{
  "info": {
    "author": "Licenseware",
    "author_email": "contact@licenseware.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Flask",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Licenseware SDK\n\n[![Package Verions](https://img.shields.io/pypi/v/licenseware)](https://pypi.org/project/licenseware)\n[![Python Verions](https://img.shields.io/pypi/pyversions/licenseware)](https://pypi.org/project/licenseware)\n[![Package Downloads](https://img.shields.io/pypi/dw/licenseware)](https://pypi.org/project/licenseware)\n[![PyPi Wheel](https://img.shields.io/pypi/wheel/licenseware)](https://pypi.org/project/licenseware)\n[![Package Status](https://img.shields.io/pypi/status/licenseware)](https://pypi.org/project/licenseware)\n[![License](https://img.shields.io/pypi/l/licenseware)](https://github.com/licenseware/licenseware-sdk-v2/blob/main/LICENSE)\n[![CodeClimate Maintainability](https://img.shields.io/codeclimate/maintainability/licenseware/licenseware-sdk-v2)](https://codeclimate.com/github/licenseware/licenseware-sdk-v2)\n[![CodeClimate Issues](https://img.shields.io/codeclimate/issues/licenseware/licenseware-sdk-v2?label=codeclimate%20issues)](https://codeclimate.com/github/licenseware/licenseware-sdk-v2/issues)\n[![CodeClimate Tech Debt](https://img.shields.io/codeclimate/tech-debt/licenseware/licenseware-sdk-v2)](https://codeclimate.com/github/licenseware/licenseware-sdk-v2/trends/technical_debt)\n[![Commit Activity](https://img.shields.io/github/commit-activity/m/licenseware/licenseware-sdk-v2)](https://github.com/licenseware/licenseware-sdk-v2/graphs/commit-activity)\n[![Release Date](https://img.shields.io/github/release-date/licenseware/licenseware-sdk-v2)](https://github.com/licenseware/licenseware-sdk-v2/releases)\n[![Code Size](https://img.shields.io/github/languages/code-size/licenseware/licenseware-sdk-v2)](https://github.com/licenseware/licenseware-sdk-v2)\n[![Repo Size](https://img.shields.io/github/repo-size/licenseware/licenseware-sdk-v2)](https://github.com/licenseware/licenseware-sdk-v2)\n[![GitHub CR](https://img.shields.io/docker/image-size/licenseware/licenseware-sdk-v2/latest?color=%235F9EA0&label=docker%20image)](https://github.com/orgs/licenseware/packages/container/package/licenseware-sdk-v2)\n\nThis is the licenseware **Python3** sdk useful for quickly create apps.\nThe SDK handles the repetetive actions needed for creating an app (file uploads/validation, background events, api routes and more).\nIt helps you focus on processsing the files needed and creating reports.  \n\n# Contents\n\n- [Licenseware SDK](#licenseware-sdk)\n- [Contents](#contents)\n- [Quickstart](#quickstart)\n  - [Installation](#installation)\n  - [SDK new version release](#sdk-new-version-release)\n  - [A minimal app](#a-minimal-app)\n- [What is an `App`?](#what-is-an-app)\n- [Set environment variables](#set-environment-variables)\n- [`App` declaration](#app-declaration)\n- [`Uploader` declaration](#uploader-declaration)\n  - [Creating the `worker_function`](#creating-the-worker_function)\n  - [Creating the `validator_class`](#creating-the-validator_class)\n- [`Report` declaration](#report-declaration)\n  - [Creating the `Report component`](#creating-the-report-component)\n  - [Creating the `Report`](#creating-the-report)\n- [Custom namespaces](#custom-namespaces)\n- [Endpoints from simple functions](#endpoints-from-simple-functions)\n- [The `main` file](#the-main-file)\n- [Licenseware CLI](#licenseware-cli)\n  - [Create the app from CLI](#create-the-app-from-cli)\n  - [Create a new uploader from CLI](#create-a-new-uploader-from-cli)\n  - [Create a new report from CLI](#create-a-new-report-from-cli)\n  - [Create a new report component from CLI](#create-a-new-report-component-from-cli)\n- [Working on SDK](#working-on-sdk)\n- [Load testing](#load-testing)\n- [PUBSUB](#pubsub)\n\n\n<a name=\"quickstart\"></a>\n# Quickstart \n\n\nBasic app flow:\n\n- User sends list of file names;\n- App through the validator function of the uploader checks which files are relevant and returns a list of validated file names;\n- User uploads the actual files, filtered based on the list provided by the uploader (the front-end does this);\n- The uploader receives the files, runs the validation on the actual file contents (before it only had the file names), and sends the valid files to the worker_function;\n- The worker function processes the files and saves them to mongo based on the structure in the serializers;\n- Once the data is fully analyzed, the user can either view data as reports or as editable tables.\n\n\nHere are the steps needed for local development of an app:\n\n- Install the sdk globally or on a virtual environment (python3.8) with the following command: `pip3 install git+https://git@github.com/licenseware/licenseware-sdk-v2.git`;\n- Create a github repository following this naming convention `xxxx-service` (where `xxxx` it's an unique lowercase acronym for the service);\n- Clone the repo for your service;\n- CD in the cloned repo locally;\n- Create a new app with the same name as the github repository: `licenseware new-app xxxx-service`;\n- Run `licenseware --help` to see more commands;\n\n\nEach app depends on 2 services to run:\n- [Authentification service](https://github.com/licenseware/auth-service);\n- [Registry service](https://github.com/licenseware/registry-service);\n\n\n1. Runing the app with `stack-manager` which make available the Authentification service and Registry service:\n- [Click here and follow the stack manager docs](https://github.com/licenseware/stack-manager-v2)\n- If you have the stack-manager up and running and want to run the app without docker you can start locally with:\n    - `make run-local` (the url will be available at `http://localhost:5000/your-app-id/docs`)\n\n\n2. Running the app without `stack-manager`:\n\n- make sure you have the default mongo connection string for mongo installed locally (`mongodb://localhost:27017/db`);\n- if mongo in docker works on MAC M1 then you can use the following make commands: `make start-mongo`, `make stop-mongo`, `make logs-mongo`;\n- you will have mongoexpress running at: `http://localhost:8081/`.\n- `make run-nostack-mongo` (this will start the app with only mongodb as a dependency);\n- open url `localhost:5000/api/docs` for swagger endpoint testing;\n\n3. Running the app without any external dependency:\n- `make run-nostack-nomongo` (this will start the app without needing mongodb up and running. \n                            It uses [mongita](https://github.com/scottrogowski/mongita) to save data. \n                            Mongita doesn't support aggregation pipelines so this method should be avoided.\n                            Also you can't view data with MongoDB Compass or Mongo Express.\n                        ); \n\n\n## Installation \n\nClone the repo, and install the sdk with\n\n```bash\n\nmake install-sdk\n\n```\n\nOr install it with pip:\n\n```bash\n\npip3 install wheel_sdk/licenseware-2.0.0-py3-none-any.whl\n\n```\n\nOr download the sdk wheel from [this link](https://github.com/licenseware/licenseware-sdk-v2/raw/main/wheel_sdk/licenseware-2.0.0-py3-none-any.whl\n) and install it with pip.\n\n\n\nI repository is public you can install it straight from github.\n\n```bash\n\npip3 install git+https://git@github.com/licenseware/licenseware-sdk-v2.git\n\n```\n\nInstall from a specific branch\n\n```bash\n\npip3 install git+https://git@github.com/licenseware/licenseware-sdk-v2.git@branch_name\n\n```\n\nInstall from a specific tag\n\n```bash\n\npip3 install git+https://git@github.com/licenseware/licenseware-sdk-v2.git@tag_name\n\n```\n\nYou can use `git+ssh` if you have ssh keys configured. \nUninstall with `pip3 uninstall licenseware`.\n\n\n## SDK new version release\n\n- In `setup.py` update the package version; \n- Create a tag with that version ex: `git tag -a v0.0.11`;\n- You can list available tags with `git tag -n`;\n- Push created tag with `git push --tags`\n\nNow you use pip to install it from that specific tag:\n\n```bash\n\npip3 install git+https://git@github.com/licenseware/licenseware-sdk-v2.git@v0.0.11\n\n```\n\nIf you want to add more details regarding this package release you can `Create a new release`\n\n- Click the link `Releases`;\n- Click `Draft a new release`;\n- Click `Tags`;\n- Select latest tag version name;\n- Add title and description for the release;\n\n![](pics/release.gif)\n\nOptionally you can create a wheel for this package:\n```bash\n\npython3 setup.py bdist_wheel sdist\n\n```\n\nAnd add it to binaries on the release.\n\n\n## A minimal app\n\nBellow is a full working example of almost all features the sdk provides.\n\nStart the service with `docker-compose up -d`\n\n\n```py\n\nimport datetime\nfrom trend_app_protect import wrap_wsgi_app\n\nfrom flask import Flask\nfrom flask_restx import Namespace, Resource\nfrom marshmallow import Schema, fields\n\nfrom licenseware.mongodata import mongodata\n\nfrom licenseware.app_builder import AppBuilder\nfrom licenseware.common.constants import (envs, filters, flags, icons,\n                                              states)\nfrom licenseware.endpoint_builder import EndpointBuilder\nfrom licenseware.notifications import notify_upload_status\nfrom licenseware.report_builder import ReportBuilder\nfrom licenseware.report_components import BaseReportComponent\nfrom licenseware.report_components.style_attributes import styles\nfrom licenseware.uploader_builder import UploaderBuilder\nfrom licenseware.uploader_validator import UploaderValidator\nfrom licenseware.utils.logger import log\n\nfrom licenseware.schema_namespace import SchemaNamespace, MongoCrud\nfrom licenseware.editable_table import EditableTable, metaspecs\n\n\n\napp = Flask(__name__)\n\n\n# APP\n\nApp = AppBuilder(\n    name = 'Infrastructure Mapper',\n    description = 'Overview of devices and networks',\n    flags = [flags.BETA]\n)\n\n\n# UPLOADERS\n\n\n\n# Here is the worker function \n# which will process the files in the background\ndef rv_tools_worker(event_data):\n\n    # Event data will contain the following information\n    # event_data = {\n    #     'tenant_id': 'the tenant_id from request',\n    #     'filepaths': 'absolute file paths to the files uploaded',\n    #     'event_id': 'the current event_id of the uploaded files',\n    #     'uploader_id': 'the uploader id in our case rv_tools'\n    #     'flask_request':  'data as dict from flask request'\n    # }\n\n    log.info(\"Starting working\")\n    notify_upload_status(event_data, status=states.RUNNING)\n    log.debug(event_data) # here add the processing file logic\n    notify_upload_status(event_data, status=states.IDLE)\n    log.info(\"Finished working\")\n\n\n\n\n# Here we are defining the validation required for each upload\n# If overwriting bellow mentioned methods is not necessary you can use `UploaderValidator` directly \n\nclass RVToolsUploaderValidator(UploaderValidator): \n    # If necessary you can overwrite bellow mentioned methods\n    ...\n\n    # def calculate_quota(self, flask_request) -> Tuple[dict, int]:\n    # responsible for calculating quota based on tenant_id and returning a json response, status code \n    # ...\n\n    # def get_filenames_response(self, flask_request): \n    # responsible for validating filenames and returning a json response, status code\n    # ...\n\n    # def get_file_objects_response(self, flask_request): \n    #   responsible for validating filenames, their contents and returning a json response, status code\n    # ...\n\n\n\nrv_tools_validator = RVToolsUploaderValidator(\n    filename_contains = ['RV', 'Tools'],\n    filename_endswith = ['.xls', '.xlsx'],\n    ignore_filenames  = ['skip_this_file.csv'],\n    required_input_type = \"excel\",\n    min_rows_number = 1,\n    required_sheets = ['tabvInfo', 'tabvCPU', 'tabvHost', 'tabvCluster'],\n    required_columns = [\n        'VM', 'Host', 'OS', 'Sockets', 'CPUs', 'Model', 'CPU Model',\n        'Cluster', '# CPU', '# Cores', 'ESX Version', 'HT Active',\n        'Name', 'NumCpuThreads', 'NumCpuCores'\n    ]\n)\n\n# Here we are creating the uploader \n# Notice we are providing the the validator created up to `validator_class` parameter\n# `worker_function` will be called when `uploader_id` is triggered\n# The `uploader_id` event is triggered when files are uploaded to `/uploads/uploader_id/files` route\n\nrv_tools_uploader = UploaderBuilder(\n    name=\"RVTools\", \n    uploader_id = 'rv_tools',\n    description=\"XLSX export from RVTools after scanning your Vmware infrastructure.\", \n    accepted_file_types=['.xls', '.xlsx'],\n    validator_class=rv_tools_validator,\n    worker_function=rv_tools_worker,\n    quota_units = 1\n)\n\n# Here we are:\n# - adding the uploader to the main app (uploaders list)\n# - sending uploader information to registry-service\nApp.register_uploader(rv_tools_uploader)\n\n\n\n\n# REPORTS\n\n\nclass VirtualOverview(BaseReportComponent):\n\n    def __init__(\n        self, \n        title: str, \n        component_id: str, \n        component_type: str\n    ):\n        self.title = title\n        self.component_id = component_id\n        self.component_type = component_type\n\n        super().__init__(**vars(self))\n\n\n    def get_data(self, flask_request):\n\n        match_filters = self.get_mongo_match_filters(flask_request)\n\n        log.info(match_filters)\n\n        return ['mongo pipeline result']\n\n\n    def set_attributes(self):\n\n        # Short hand based on value_key\n        # See based on component type funcs from: licenseware.report_components.attributes\n        value_key_and_icon = [\n            (\"number_of_devices\", icons.SERVERS), \n            (\"number_of_databases\", icons.DATABASE_ROUNDED)\n        ]\n\n        # Set values straight to self.attributes\n        self.attributes = self.build_attributes(value_key_and_icon)\n\n\n        # Or raw dict (same results are achived using the method up)\n\n        attributes = {'series': [\n            {\n                'value_description': 'Number of devices',\n                'value_key': 'number_of_devices',\n                'icon': 'ServersIcon'\n            },\n            {\n                'value_description': 'Number of databases',\n                'value_key': 'number_of_databases',\n                'icon': 'DatabaseIconRounded'\n            }\n        ]}\n\n        # You can also return attributes\n        return attributes\n\n\n    def set_style_attributes(self):\n\n        # You can set a dictionary directly or return a dict like bellow\n        self.style_attributes = {\n            'width': '1/3'\n        }\n\n        # or import `style_attributes` dataclass\n        # from licenseware.report_components.style_attributes import style_attributes as styles\n        style_attributes = self.build_style_attributes([\n            styles.WIDTH_ONE_THIRD\n            #etc\n        ])\n\n        return style_attributes\n\n\n    def set_allowed_filters(self):\n        # Provide a list of allowed filters for this component\n        return [\n            # You can use the build_filter method\n            self.build_filter(\n                column=\"device_name\", \n                allowed_filters=[\n                    filters.EQUALS, filters.CONTAINS, filters.IN_LIST\n                ], \n                visible_name=\"Device Name\", \n                # validate:bool = True # This will check field_name and allowed_filters\n            ),\n            # or you can create the dictionary like bellow (disadvantage no autocomplete, no checks)\n            {\n                \"column\": \"database_name\",\n                \"allowed_filters\": [\n                    \"equals\", \"contains\", \"in_list\"\n                ],\n                \"visible_name\": \"Database Name\"\n            }\n\n        ]\n\n\n\nvirtual_overview = VirtualOverview(\n    title=\"Overview\",\n    component_id=\"virtual_overview\",\n    component_type='summary'\n)\n\n# Register component to registry-service (to act as a first class citizen)\nApp.register_report_component(virtual_overview)\n\n# Component order is determined by it's position in the list\nreport_components=[\n    virtual_overview       \n]\n\n\n# Define a report wich holds one or more report components\nvirtualization_details_report = ReportBuilder(\n    name=\"Virtualization Details\",\n    report_id=\"virtualization_details\",\n    description=\"This report gives you a detailed view of your virtual infrastructure. Deep dive into the infrastructure topology, identify devices with missing host details and capping rules for licensing.\",\n    connected_apps=['ifmp-service'],\n    report_components=report_components\n)\n\n\nApp.register_report(virtualization_details_report)\n\n\n\n\n\n\n# CUSTOM RESTX NAMESPACES\n# We can add also custom namespaces to main IFMP Api\n\nfrom flask import Flask, request\nimport flask_restx as restx\nfrom flask_restx import Resource, Api\nimport marshmallow as ma\nfrom licenseware.common import marshmallow_to_restx_model # import the converter function\n\napp = Flask(__name__)\napi = Api(app)\n\n\nclass SimpleNestedSchema(ma.Schema):\n    simple_nested_field = ma.fields.String(required=False, metadata={'description': 'the description of simple_nested_field'})\n\nclass SimpleSchema(ma.Schema):\n    simple_field1 = ma.fields.String(required=True, metadata={'description': 'the description of simple_field1'})\n    simple_nest = ma.fields.Nested(SimpleNestedSchema)\n\n# Give it as parameters the flask-restx `Api` or `Namespace` instance and the Marshmallow schema\nsimple_nest_from_schema = marshmallow_to_restx_model(api, SimpleSchema)\n\n\n@api.route('/marshmallow-simple-nest')\nclass MaSimpleNest(Resource):\n    # Place it where you need a restx model\n    @api.expect(simple_nest_from_schema, validate=True)\n    def post(self):\n        return request.json\n\n# Add it to main app \n# it will have the same namespace prefix /ifmp/v1/ + ns-prefix/custom-api-route\nApp.register_namespace(custom_ns, path='/ns-prefix')\n\n# If the namespace defined up it's used on all apps \n# add it to licenseware sdk in app_builder default routes\n\n\n\n# EndpointBuilder\n\n# Endpoints can be generated from functions or marshmellow schemas\n# add http method as a prefix to schema or function handler (get_some_data, PostDeviceDataSchema etc)\n\n# Here we are using a function to create an endpoint like /custom_endpoint/custom_data_from_mongo\n\ndef get_custom_data_from_mongo(flask_request):\n    \"\"\" Custom documentation \"\"\"\n\n    # Some logic here\n\n    return \"Some data\"\n\n\ncustom_func_endpoint = EndpointBuilder(get_custom_data_from_mongo)\n\nApp.register_endpoint(custom_func_endpoint)\n\n\n\n# Here we are using a marshmellow schema to generate an endpoint\n\nclass DeviceData(Schema):\n\n    class Meta:\n        collection_name = envs.MONGO_COLLECTION_DATA_NAME\n        methods = ['GET', 'PUT']\n\n    tenant_id = fields.Str(required=False)\n    updated_at = fields.Str(required=False)\n    device_name = fields.Str(required=True)\n    device_model = fields.Str(required=False)\n\n\ncustom_schema_endpoint = EndpointBuilder(DeviceData)\n\nApp.register_endpoint(custom_schema_endpoint)\n\n\n\n# Namespace from marshmallow schema using SchemaNamespace class\n\n\n# Defining our schema\nclass UserSchema(Schema):\n    \"\"\" Here is some Namespace docs for user \"\"\"\n    name = fields.Str(required=True)\n    occupation = fields.Str(required=True)\n\n\n# Overwritting mongo crud methods \nclass UserOperations(MongoCrud):\n\n    def __init__(self, schema: Schema, collection: str):\n        self.schema = schema\n        self.collection = collection\n        super().__init__(schema, collection)\n\n    def get_data(self, flask_request):\n\n        query = self.get_query(flask_request)\n\n        results = mongodata.fetch(match=query, collection=self.collection)\n\n        return {\"status\": states.SUCCESS, \"message\": results}, 200\n\n\n    def post_data(self, flask_request):\n\n        query = UserOperations.get_query(flask_request)\n\n        data = dict(query, **{\n            \"updated_at\": datetime.datetime.utcnow().isoformat()}\n        )\n\n        inserted_docs = mongodata.insert(\n            schema=self.schema,\n            collection=self.collection,\n            data=data\n        )\n\n        return inserted_docs\n\n\n    def put_data(self, flask_request):\n\n        query = self.get_query(flask_request)\n\n        updated_docs = mongodata.update(\n            schema=self.schema,\n            match=query,\n            new_data=dict(query, **{\"updated_at\": datetime.datetime.utcnow().isoformat()}),\n            collection=self.collection,\n            append=False\n        )\n\n        if updated_docs == 0:\n            return {\"status\": states.SUCCESS, \"message\": \"Query didn't matched any data\"}, 400\n\n        return {\"status\": states.SUCCESS, \"message\": \"\"}, 200\n\n\n    def delete_data(self, flask_request):\n\n        query = self.get_query(flask_request)\n\n        deleted_docs = mongodata.delete(match=query, collection=self.collection)\n\n        return deleted_docs\n\n\n\n# A restx namespace is generated on instantiation\nUserNs = SchemaNamespace(\n    schema=UserSchema,\n    collection=\"CustomCollection\",\n    mongo_crud_class=UserOperations,\n    decorators=[]\n)\n\n# Adding the namespace generated from schema to our App\nuser_ns = UserNs.initialize()\nApp.register_namespace(user_ns)\n\n\n\n# Editable tables\n# In the case we need to have on the front-end an datatable which can be modified by the user the `EditableTable` class can help us create a crud workflow from a marshmellow schema\n# We can provide information about columns using the `metadata` parameter available on marshmellog `fields` object\n\n# The metadata dict can hold the following values: \n\n# \"editable\":bool tell front-end if values from this column can be modified by the user \n# \"visible\": bool tell front-end if it should render column to be visible to the user\n# \"distinct_key\":str ?\n# \"foreign_key\":str  ?\n\n\n# Using the method bellow routes will be created with SchemaNamespace class \n\n\nclass DeviceTableSchema(Schema):\n\n    class Meta:\n        collection = envs.MONGO_COLLECTION_DATA_NAME\n        methods = ['GET', 'PUT']\n\n\n    _id = fields.Str(required=False, unique=True)\n    tenant_id = fields.Str(required=True)\n    updated_at = fields.Str(required=False)\n    raw_data = fields.Str(required=False, allow_none=True)\n\n    name = fields.Str(required=True, \n        metadata=metaspecs(editable=True, visible=True)\n    )\n\n    is_parent_to = fields.List(\n        fields.Str(), required=False, allow_none=True,\n        metadata=metaspecs(\n            editable=True, \n            visible=True, \n            distinct_key='name', \n            foreign_key='name'\n        )  \n    )\n\n    is_child_to = fields.Str(\n        required=False, allow_none=True,\n        metadata=metaspecs(\n            editable=True, \n            visible=True, \n            distinct_key='name', \n            foreign_key='name'\n        )  \n    )\n\n    is_part_of_cluster_with =  fields.List(\n        fields.Str(), required=False, allow_none=True,\n        metadata=metaspecs(\n            editable=True, \n            visible=True, \n            distinct_key='name', \n            foreign_key='name'\n        )  \n    )\n\n    is_dr_with =  fields.List(\n        fields.Str(), required=False, allow_none=True,\n        metadata=metaspecs(\n            editable=True, \n            visible=True, \n            distinct_key='name', \n            foreign_key='name'\n        )  \n    )\n\n    capped = fields.Boolean(\n        required=True, allow_none=False, \n        metadata=metaspecs(editable=True)\n    )\n\n    total_number_of_processors = fields.Integer(\n        required=False, allow_none=True, \n        metadata=metaspecs(editable=True)\n    )\n\n    oracle_core_factor = fields.Float(\n        required=False, allow_none=True, \n        metadata=metaspecs(editable=True)\n    )\n\n\n\ndevices_editable_table = EditableTable(\n    title=\"All Devices\",\n    schema=DeviceTableSchema\n)\n\n\nApp.register_editable_table(devices_editable_table)\n\n\n\n# Overwrite editable tables default crud methods from SchemaNamespace\n\n# In the case the default crud methods provided by SchemaNamespace class do not fit our case we can overwrite the method needed.\n\n\n# Same schema but with another name to avoid colisions\nclass ProcessorsTableSchema(DeviceTableSchema): ...\n\n\n# custom handling of data\nclass InfraService:\n\n    def __init__(self, schema:Schema, collection:str):\n        self.schema = schema\n        self.collection = collection\n\n    def replace_one(self, json_data:dict):\n        #custom handling of json_data\n        return [\"the overwritten put_data method results\"]\n\n\n\n# inherits from MongoCrud and overwrites `put_data` and `get_data` methods \nclass ProcessorOp(MongoCrud):\n\n    def __init__(self, schema: Schema, collection: str):\n        self.schema = schema\n        self.collection = collection\n        super().__init__(schema, collection)\n\n\n    def get_data(self, flask_request):\n        return str(flask_request)\n\n    def put_data(self, flask_request):\n\n        query = self.get_query(flask_request)\n\n        return InfraService(\n            schema=ProcessorsTableSchema, \n            collection=envs.MONGO_COLLECTION_DATA_NAME\n        ).replace_one(json_data=query)\n\n\n\n# creating the restx namespace\nProcessorNs = SchemaNamespace(\n    schema=ProcessorsTableSchema,\n    collection=envs.MONGO_COLLECTION_DATA_NAME,\n    mongo_crud_class=ProcessorOp  # feeding the custom crud class to SchemaNamespace \n).initialize()\n\n\n# instantiating the editable tables\nprocessor_table = EditableTable(\n    title=\"All Processors\",\n    schema=ProcessorsTableSchema,\n    namespace=ProcessorNs # here we provide our custom namespace\n)\n\n# same as up register the editable table\nApp.register_editable_table(processor_table)\n\n\n\n\n# Call init_app in the flask function factory \nApp.init_app(app)\n# Register app to registry-service\nApp.register_app()\n\n# Protect the app with TrendMicro Application Security\n# app = wrap_wsgi_app(app)\n\n\n\nif __name__ == \"__main__\":       \n    app.run(port=4000, debug=True)\n\n\n\n# Userid / Tenantid\n# 3d1fdc6b-04bc-44c8-ae7c-5fa5b9122f1a\n# dramatiq main:App.broker -p4 --watch ./ --queues odb\n\n\n\n```\n\n\nMake commands:\n\n- `make test` - run all unit tests.\n- `make dev-docs` - this command will start a pdoc3 http server use for viewing and updating documentation for the app created;\n- `make docs` - this command will generate html docs based on docstrings provided in the app;\n\n\nDocumentation generated can be added later to github pages.\n\nSee more about documentation creation here [`pdoc3`](https://pdoc3.github.io/pdoc/).\n\n\n\n<a name=\"what-is-an-app\"></a>\n# What is an `App`?\n\n\nEach Licenseware `App`/`Service` is responsible for:\n\n- processing files submitted by the user;\n- creating custom reports based on processed data from files. \n\n\nEach **APP** has:\n\n- one or more uploaders\n- one or more reports \n- one or more report components\n\n\nEach **UPLOADER** has:\n\n- one file validator class\n- one file processing/worker function\n\n\nEach **REPORT** has:\n\n- one or more report components\n- report components can be attached either to app builder instance or to report builder instance\n\n\nEach **REPORT COMPONENT** has:\n\n- one get_data method;\n- one url where data can be accessed;\n\n\n<a name=\"set-environment-variables\"></a>\n# Set environment variables\n\n\nFist make sure you have set the environment variables:\n\n```\n#.envlocal\n\nDEBUG=true\nAPP_HOST=http://backend.localhost\nAPP_ID={{ app_id }}\nENVIRONMENT=local\nFILE_UPLOAD_PATH=/tmp/lware\nLWARE_IDENTITY_USER=testing-service\nLWARE_IDENTITY_PASSWORD=testing123\nMONGO_CONNECTION_STRING=mongodb://lware:lware-secret@localhost:27017\nMONGO_DATABASE_NAME=db\nAUTH_SERVICE_URL=http://backend.localhost/auth\nREGISTRY_SERVICE_URL=http://backend.localhost/registry-service\nUSE_BACKGROUND_WORKER=false\n\n```\n\n`USE_BACKGROUND_WORKER` set to false or not present will skip using background server and process the uploaders data straight on request.\n\n\n<a name=\"app-declaration\"></a>\n# `App` declaration\n\n\n`AppBuilder` class will be used to define our `App`. \nThis class will handle: \n\n- automatic api generation;\n- sending to registry service information about `uploader_builder`, `report_builder`, `report_components` and others if needed.\n\n\n```py\n#app_definition.py\n\nfrom licenseware.app_builder import AppBuilder\nfrom licenseware.common.constants import flags\n\n\nifmp_app = AppBuilder(\n    name = 'Infrastructure Mapper',\n    description = 'Overview of devices and networks',\n    flags = [flags.BETA]\n)\n\n\n```\n\nThe `ifmp_app` instance is now ready to attach other uploaders, reports, report components (or others) using *ifmp_app.register_X* methods.\n\n\n\n<a name=\"uploader-declaration\"></a>\n# `Uploader` declaration\n\n\nThe uploader is responsible for:\n\n- validating files received from user;\n- calculating quota for user and sending the appropiate response if quota exceded;\n- uploading files to disk;\n- triggering `worker_function` to process the files in the background; \n\nEach uploader needs a `validator_class` and a `worker_function`.  \n\n\n## Creating the `worker_function`\n\nHere is the worker function which will process the files in the background.\n\n```py\n#worker.py\n\nfrom licenseware.notification import notify_upload_status\nfrom licenseware.utils.logger import log\n\ndef rv_tools_worker(event:dict):\n    log.info(\"Starting working\")\n    log.debug(event) # here add the processing file logic\n    notify_upload_status(event, status=states.IDLE)\n    log.info(\"Finished working\")\n\n```\n\nThe `event` will be a dictionary with the following contents:\n\n```js\n\n{\n    'tenant_id': flask_request.headers.get(\"Tenantid\"),\n    'filepaths': valid_filepaths, \n    'uploader_id': uploader_id,\n    'event_id': event_id,\n    'flask_request':  {**flask_body, **flask_headers},\n    'validation_response': 'response from validator class'\n}\n\n```\n\nBased on given `event` the `worker_function` will process the files.\n\n\n## Creating the `validator_class`\n\nHere we are defining the validation and quota calculation required for each upload.\n\nCreate a new class which inherits from `UploaderValidator` and overwrite `calculate_quota` function.\nMethod `calculate_quota` receives a flask request as a parameter which can be used to extract files and tenant_id needed for quota calculation.\n\nFinally, instantiate the validator class with the required parameters needed for validation.\n\n```py\n#validator.py\n\nfrom typing import Tuple\nfrom licenseware.uploader_validator import UploaderValidator\n\n\nclass RVToolsUploaderValidator(UploaderValidator): \n    # Overwrite `calculate_quota`, `get_filenames_response` or `get_file_objects_response` if needed\n    # Otherwise you can just instantiate the class validator from `UploaderValidator` \n    ...\n\n\n\nrv_tools_validator = RVToolsUploaderValidator(\n    filename_contains = ['RV', 'Tools'],\n    filename_endswith = ['.xls', '.xlsx'],\n    ignore_filenames  = ['skip_this_file.csv'],\n    required_input_type = \"excel\",\n    min_rows_number = 1,\n    required_sheets = ['tabvInfo', 'tabvCPU', 'tabvHost', 'tabvCluster'],\n    required_columns = [\n        'VM', 'Host', 'OS', 'Sockets', 'CPUs', 'Model', 'CPU Model',\n        'Cluster', '# CPU', '# Cores', 'ESX Version', 'HT Active',\n        'Name', 'NumCpuThreads', 'NumCpuCores'\n    ]\n)\n\n\n```\n\nIf parameters provided for validating filenames and contents are not enough \nyou can also overwrite: `calculate_quota`, `get_filenames_response` and `get_file_objects_response` methods.\n\n- `calculate_quota`: given a flask request object calculates quota for tenant_id based on current processing units (by default it's using len(files) got from request)\n- `get_filenames_response` : given a flask request object validates filenames and returns a json response, status code\n- `get_file_objects_response` : given a flask request object validates filenames and contents and returns a json response, status code\n\n\nNow we have `rv_tools_validator` as a `validator_class` and  `rv_tools_worker` as a `worker_function`.\n\n\n```py\n#uploader.py\n\nfrom licenseware.uploader_builder import UploaderBuilder\nfrom licenseware.uploader_validator import UploaderValidator\n\nfrom ...worker import rv_tools_worker\nfrom ...validator import rv_tools_validator\n\n\n\nrv_tools_uploader = UploaderBuilder(\n    name=\"RVTools\", \n    uploader_id = 'rv_tools',\n    description=\"XLSX export from RVTools after scanning your Vmware infrastructure.\", \n    accepted_file_types=['.xls', '.xlsx'],\n    validator_class=rv_tools_validator,\n    worker_function=rv_tools_worker\n)\n\n\n```\n\nGreat! Now we have an uploader defined!\n\nWe can later import the uploader in our main file and register it to our defined `App`.\nThe registering process will take care of api generation for uploaders.\n\n```py\nifmp_app.register_uploader(rv_tools_uploader)\n```\n\nOf course defining an uploader can be defined in just one file too.\n\n\n\n\n\n\n\n\n\n\n\n\n\n<a name=\"report-declaration\"></a>\n# `Report` declaration\n\n\nA `Report` is composed of one or more `report components`. \nEach report component will inherit from `BaseReportComponent` class.\n\n\n## Creating the `Report component`\n\nThe following methods will need to be overwrited:\n\n- `get_data` : receives a flask request needs to return data for the declared report component;\n    - use `match_filters = self.get_mongo_match_filters(flask_request)` to get default pipeline filters (tenant_id and filters from front-end);\n\n- `set_attributes` : return based on `component_type` component metadata which is used by front-end to render data received from `get_data` method;\n- `set_style_attributes` : return component style metadata which is used by front-end to apply different css attributes  (width, height, color etc);\n\nA `NotImplmentedError` exception will raise if methods mentioned up are not overwritted.\n\n\n```py\n#some_report_component.py\n\nfrom licenseware.report_components import BaseReportComponent\nfrom licenseware.report_components.style_attributes import style_attributes as styles\nfrom licenseware.common.constants import icons\n# These are v3 implementations of report attributes\nfrom licenseware.report_components import TableAttrs, SummaryAttrs, StyleAttrs\n\n\n\nclass VirtualOverview(BaseReportComponent):\n\n    def __init__(\n        self, \n        title: str, \n        component_id: str, \n        component_type: str\n    ):\n        self.title = title\n        self.component_id = component_id\n        self.component_type = component_type\n\n        super().__init__(**vars(self))\n\n\n    def get_data(self, flask_request):\n\n        match_filters = self.get_mongo_match_filters(flask_request)\n\n        log.info(match_filters)\n\n        return ['mongo pipeline result']\n\n\n    def set_attributes(self):\n\n        # Short hand based on value_key\n        # See based on component type funcs from: licenseware.report_components.attributes\n        value_key_and_icon = [\n            (\"number_of_devices\", icons.SERVERS), \n            (\"number_of_databases\", icons.DATABASE_ROUNDED)\n        ]\n\n        # Set values straight to self.attributes\n        self.attributes = self.build_attributes(value_key_and_icon)\n\n\n        # Or raw dict (same results are achived using the method up)\n\n        attributes = {'series': [\n            {\n                'value_description': 'Number of devices',\n                'value_key': 'number_of_devices',\n                'icon': 'ServersIcon'\n            },\n            {\n                'value_description': 'Number of databases',\n                'value_key': 'number_of_databases',\n                'icon': 'DatabaseIconRounded'\n            }\n        ]}\n\n        # Or use the v3 implementation of this\n        # Checkout licenseware/report_components/attributesv3 for more info\n\n        summary = (\n            SummaryAttrs()\n            .attr(\n                value_key=\"number_of_devices\",\n                icon=\"ServersIcon\",\n            )\n            .attr(\n                value_key=\"number_of_databases\",\n                icon=\"DatabaseIconRounded\"\n            )\n        )\n        attributes = summary.metadata\n\n        # You can also return attributes\n        return attributes\n\n\n    def set_style_attributes(self):\n\n        # You can set a dictionary directly or return a dict like bellow\n        self.style_attributes = {\n            'width': '1/3'\n        }\n\n        # or import `style_attributes` dataclass\n        # from licenseware.report_components.style_attributes import style_attributes as styles\n        style_attributes = self.build_style_attributes([\n            styles.WIDTH_ONE_THIRD\n            #etc\n        ])\n\n        # Or v3 implementation of style attributes\n\n        style_attributes = StyleAttrs().width_one_third.metadata\n\n        return style_attributes\n\n\n    def set_allowed_filters(self):\n        # Provide a list of allowed filters for this component\n        return [\n            # You can use the build_filter method\n            self.build_filter(\n                column=\"device_name\", \n                allowed_filters=[\n                    filters.EQUALS, filters.CONTAINS, filters.IN_LIST\n                ], \n                visible_name=\"Device Name\", \n                # validate:bool = True # This will check field_name and allowed_filters\n            ),\n            # or you can create the dictionary like bellow (disadvantage no autocomplete, no checks)\n            {\n                \"column\": \"database_name\",\n                \"allowed_filters\": [\n                    \"equals\", \"contains\", \"in_list\"\n                ],\n                \"visible_name\": \"Database Name\"\n            }\n\n        ]\n\n\n\n\nvirtual_overview = VirtualOverview(\n    title=\"Overview\",\n    component_id=\"virtual_overview\",\n    component_type='summary'\n)\n\n\n```\n\nNow `virtual_overview` is our `report_component`.\n\nWe can later register the component straight to the `App` or `Report`\n```py\nifmp_app.register_report_component(virtual_overview)\n```\n\n## Creating the `Report`\n\nThe report can hold one or more report components. \n\n\n```py\n#report.py\n\nfrom licenseware.report_builder import ReportBuilder\nfrom ...some_report_component import virtual_overview\n\n\nvirtualization_details_report = ReportBuilder(\n    name=\"Virtualization Details\",\n    report_id=\"virtualization_details\",\n    description=\"This report gives you a detailed view of your virtual infrastructure.\",\n    connected_apps=['ifmp-service'],\n    report_components=[\n        virtual_overview        \n    ]\n)\n\n```\n\nWe can later add the report to our main `App`\n\n```py\nifmp_app.register_report(virtualization_details_report)\n```\n\nReports api will be handled by the `ifmp_app` instance.\n\n\n\n\n\n\n<a name=\"custom-namespaces\"></a>\n# Custom namespaces\n\n\nWe are not restricted using just the apis generated from `AppBuilder` we can add new custom ones to `App`/`ifmp_app`.\n\n\n\n```py\n#some_namespace.py\n\nfrom flask_restx import Namespace, Resource\n\n\nns = Namespace(\n    name=\"Custom\", \n    description=\"This is a custom namespace with the app prefix\"\n)\n\n@ns.route(\"/custom-api-route\")\nclass CustomApiRoute(Resource):    \n    @ns.doc(id=\"custom\")\n    def get(self):\n        return \"custom-api-route\"\n\n```\n\nWe can later import the namespace created to our `main` file\n\n```py\nifmp_app.register_namespace(custom_ns, path='/ns-prefix')\n```\n\n`ifmp_app` will make sure it will have the app prefix.\n\nIf the custom namespace created is repetead for all apps consider adding it to `app_builder` package.\n\nYou can also use the following CLI command to create a new boilerplate controller:\n```bash\nlicenseware new-controller name\n```\n\nThis will create the restx controller and handle the imports.\n\n\n\n<a name=\"endpoints-from-simple-functions\"></a>\n# Endpoints from simple functions\n\n\nClass `EndpointBuilder` can be used to generate endpoints from simple functions.\nThe function name will be used to extract the http method and the route path (`get_custom_data_from_mongo` -->\n`GET` http-method, `/get_custom_data_from_mongo` path-route)\n\n```py\n#func.py\n\nfrom licenseware.endpoint_builder import EndpointBuilder\n\ndef get_custom_data_from_mongo(flask_request):\n    \"\"\" Custom documentation \"\"\"\n\n    # Some logic here\n\n    return \"Some data\"\n\n\ncustom_func_endpoint = EndpointBuilder(get_custom_data_from_mongo)\n```\n\nThe function will receive a flask request as a parameter and will be added to `/custom_endpoint/get_custom_data_from_mongo`\n\nLater in our `main` file: \n```py\nifmp_app.register_endpoint(custom_func_endpoint)\n```\n\n\n\n\n\n\n\n\n\n<a name=\"the-main-file\"></a>\n# The `main` file\n\n\nIn the main file or in `create_app` builder function (where Flask is instantiated) we can initialize the `App` with `ifmp_app.init_app(app)` where `app` is the Flask instance. \n\nWhen `init_app` is invoked all endpoinds defined in `app_builder` will be created and registration information will be sent to registry-service if `register=True`. You can also initiate the registration to registry-service process with `ifmp_app.register_app()` \n\n\n```py\n\nfrom flask import Flask\nfrom ...app_definition import ifmp_app\nfrom ...uploader import rv_tools_uploader\nfrom ...some_report_component import virtual_overview\nfrom ...report import virtualization_details_report\nfrom ...some_namespace import ns as custom_ns\nfrom ...func import custom_func_endpoint\n\n\napp = Flask(__name__)\n\n\n# These can be placed in `app_definition`  \n\nifmp_app.register_uploader(rv_tools_uploader)\nifmp_app.register_report_component(virtual_overview)\nifmp_app.register_report(virtualization_details_report)\nifmp_app.register_namespace(custom_ns, path='/ns-prefix')\nifmp_app.register_endpoint(custom_func_endpoint)\n\n\n# Just like any other flask extension\nifmp_app.init_app(app, register=True)    \n\n\nif __name__ == \"__main__\":    \n    app.run(port=4000, debug=True)\n\n\n```\n\n\n\n\n<a name=\"licenseware-cli\"></a>\n# Licenseware CLI\n\nThe licenseware sdk provides also some CLI utilities for quick development. \nYou can invoke the cli with by typing licenseware in the terminal followed by --help for docs.\n\n```\n\n$ licenseware --help\nUsage: licenseware [OPTIONS] COMMAND [ARGS]...\n\n  Useful CLI commands for automatic code generation, files and folders\n  creation.\n\nOptions:\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n\n  --help                          Show this message and exit.\n\nCommands:\n  build-docs            Build app html docs\n  build-sdk-docs        Build licenseware sdk html docs\n  create-tests          Create tests from swagger docs Command example: >>...\n  new-app               Given app_id build a new app The package structure...\n  new-report            Given report_id build a new report The package...\n  new-report-component  Given component_id and component_type build a new...\n  new-uploader          Given uploader_id build a new uploader The package...\n  recreate-files        Recreate files that are needed but missing\n\n```\n\nSee help for a command by specifing the command name followed by --help\n\n```\n$ licenseware new-report-component --help\n\n```\n\n## Create the app from CLI \n\nCreate the app from the terminal. \nArgument `new-app` requires an `app_id`. The id will be placed in the `.env` file.\n\n```bash\n\nlicenseware new-app ifmp\n\n``` \n\nThe entire app structure will be generated \n\n```bash\n.\n├── app\n│   ├── common\n│   │   └── __init__.py\n│   ├── controllers\n│   │   └── __init__.py\n│   ├── __init__.py\n│   ├── report_components\n│   │   └── __init__.py\n│   ├── reports\n│   │   └── __init__.py\n│   ├── serializers\n│   │   └── __init__.py\n│   ├── services\n│   │   └── __init__.py\n│   ├── uploaders\n│   │   └── __init__.py\n│   └── utils\n│       └── __init__.py\n├── app.log\n├── CHANGELOG.md\n├── cloudformation-templates\n│   ├── odb-api_prod.yml\n│   └── odb-api.yml\n├── deploy\n│   └── jupyter\n│       ├── docker-compose.yml\n│       └── requirements.txt\n├── docker-compose.yml\n├── docker-entrypoint.sh\n├── Dockerfile\n├── Dockerfile.stack\n├── main.py\n├── makefile\n├── Procfile\n├── Procfile.stack\n├── README.md\n├── requirements-dev.txt\n├── requirements-tests.txt\n├── requirements.txt\n├── setup.py\n├── test_files\n├── tests\n│   ├── __init__.py\n│   └── test_starter.py\n├── tox.ini\n└── version.txt\n\n14 directories, 32 files\n```\n\nAll imports will be handled by the CLI when you create a new uploader, report or report_component from the terminal.\n\n\n## Create a new uploader from CLI \n\nArgument `new-uploader` needs a `uploader_id`\n\n```bash\n\nlicenseware new-uploader rv_tools\n\n``` \n\n```\n.uploaders\n├── __init__.py\n└── rv_tools\n    ├── __init__.py\n    ├── validator.py\n    └── worker.py\n```\n\nUploader id will be `rv_tools`. Each uploader has a validator and a worker. \nAll imports an routes will be handled by the licenseware sdk.\nTo sparse the logic you can create multiple sub-packages/modules.\n\n\n\n\n## Create a new report from CLI \n\nArgument `new-report` needs a `report_id`\n\n```bash\n\nlicenseware new-report virtualization_details\n\n``` \n\n```\n.reports\n├── __init__.py\n└── virtualization_details\n    ├── __init__.py\n    └── virtualization_details.py\n```\n\nReport id will be `virtualization_details`.\nAll imports an routes will be handled by the licenseware sdk.\nTo sparse the logic you can create multiple sub-packages/modules.\n\n\n\n\n## Create a new report component from CLI \n\nArgument `new-report-component` needs a `component_id` and a `component_type`.\n\n```bash\n\nlicenseware new-report-component virtual_overview summary\n\n``` \n\n```\n.report_components\n├── __init__.py\n└── virtual_overview\n    ├── __init__.py\n    └── virtual_overview.py\n```\n\nComponent id will be `virtual_overview` and it's component type will be `summary`.\nAll imports an routes will be handled by the licenseware sdk.\nTo sparse the logic you can create multiple sub-packages/modules.\n\n\n**For more information inspect licenseware package**\n\n\n<a name=\"working-on-sdk\"></a>\n# Working on SDK\n\n- Each new feature should be placed in a package\n- Add only features that apply to all or most apps\n- # TODO\n\n\n\n\n# Load testing\n\n[baton docs](https://github.com/americanexpress/baton)\n\n```bash\nbaton -u http://localhost/appid/yourendpoint -c 10 -r 10000\n```\n\n\n\n\n<a name=\"pubsub\"></a>\n# PUBSUB\n\nBasic usage:\n\nOn the kafka broker side define topics(channels)\n\n```py\n\nfrom licensware.pubsub import Topic\nfrom confluent_kafka.admin import AdminClient\n\nadmin_client = AdminClient({'bootstrap.servers': 'mybroker'})\n\ntopic = Topic(admin_client)\n\ntopic.new(\"user_events\")\ntopic.new(\"app_events\")\n\n\ntopic.delete(\"app_events\")\n\n\n```\n\nOn the app side define stream producer (publisher)\n\n```py\nfrom licensware.pubsub import Producer, TopicType, EventType\nfrom confluent_kafka import Producer as KafkaProducer\n\n\nproducer_client = KafkaProducer({'bootstrap.servers': 'mybroker1,mybroker2'})\n\nproducer = Producer(producer_client)\n\n\ndata_stream = {\n    \"event_type\": EventType.ACCOUNT_CREATED,\n    \"tenant_id\": None,\n    \"etc\": \"data\"\n}\n\nproducer.publish(TopicType.USER_EVENTS, data)\n\n\n```\n\nYou can also define a consumer (subscriber)\n\n```py\nfrom confluent_kafka import Consumer as KafkaConsumer\nfrom licenseware.pubsub import EventType, TopicType, Consumer\n\n\nconsumer_client = KafkaConsumer({'bootstrap.servers': 'mybroker1,mybroker2'})\n\nconsumer = Consumer(consumer_client)\n\n\ndef account_created_handler(*args, **kwargs):\n    return \"some processed data\"\n\n\nconsumer.dispatch(EventType.ACCOUNT_CREATED, account_created_handler)\n# etc\n\n\nif __name__ == \"__main__\":\n\n    consumer.listen()\n\n```\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://licenseware.io/",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "licenseware",
    "package_url": "https://pypi.org/project/licenseware/",
    "platform": null,
    "project_url": "https://pypi.org/project/licenseware/",
    "project_urls": {
      "Homepage": "https://licenseware.io/"
    },
    "release_url": "https://pypi.org/project/licenseware/2.4.7/",
    "requires_dist": [
      "Babel (==2.9.1)",
      "cachetools (==5.0.0)",
      "dnspython (==2.2.1)",
      "dramatiq (==1.11.0)",
      "Flask (==2.0.3)",
      "Flask-Cors (==3.0.10)",
      "flask-restx (==0.5.1)",
      "loguru (==0.6.0)",
      "marshmallow (==3.18.0)",
      "marshmallow-jsonschema (==0.11.1)",
      "openpyxl (==3.0.7)",
      "pandas (==1.2.4)",
      "pdoc3 (==0.10.0)",
      "pycryptodome (==3.14.1)",
      "PyJWT (==2.4.0)",
      "pymongo (==3.12.0)",
      "python-dotenv (==0.19.0)",
      "redis (==3.5.3)",
      "requests (==2.28.1)",
      "sendgrid (==6.9.1)",
      "typer (==0.4.1)",
      "uWSGI (==2.0.19.1)",
      "werkzeug (==2.0.3)",
      "trend-app-protect (==4.6.2) ; extra == 'all'",
      "opentelemetry-instrumentation (==0.26b1) ; extra == 'all'",
      "opentelemetry-exporter-otlp (==1.7.1) ; extra == 'all'",
      "opentelemetry-distro (==0.26b1) ; extra == 'all'",
      "dramatiq[watch] ; extra == 'all'",
      "prometheus-flask-exporter (~=0.20.3) ; extra == 'all'",
      "honcho (==1.0.1) ; extra == 'all'",
      "confluent-kafka (==1.9.0) ; extra == 'all'",
      "honcho (==1.0.1) ; extra == 'honcho'",
      "confluent-kafka (==1.9.0) ; extra == 'kafka'",
      "opentelemetry-distro (==0.26b1) ; extra == 'opentelemetry'",
      "opentelemetry-instrumentation (==0.26b1) ; extra == 'opentelemetry'",
      "opentelemetry-exporter-otlp (==1.7.1) ; extra == 'opentelemetry'",
      "prometheus-flask-exporter (~=0.20.3) ; extra == 'prometheus'",
      "trend-app-protect (==4.6.2) ; extra == 'trend-app'",
      "dramatiq[watch] ; extra == 'watchdog'"
    ],
    "requires_python": "==3.8.*",
    "summary": "Common utilities for licenseware.",
    "version": "2.4.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16045658,
  "releases": {
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3f6b629bacaf1784103daeec55b061156cda2c5f795b16ae54e42ad86e576df",
          "md5": "7a86e380e597f184cc0d985d5886ec34",
          "sha256": "309fce3ba83e332858059622474b6ad042a038eb04713ae1adce15f8a5015a5c"
        },
        "downloads": -1,
        "filename": "licenseware-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a86e380e597f184cc0d985d5886ec34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 206361,
        "upload_time": "2022-03-16T20:21:33",
        "upload_time_iso_8601": "2022-03-16T20:21:33.692744Z",
        "url": "https://files.pythonhosted.org/packages/a3/f6/b629bacaf1784103daeec55b061156cda2c5f795b16ae54e42ad86e576df/licenseware-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b86539edfe445fa42ec5af6b98ed0273c740bf1744f4d7e6600ef5e016e41f7",
          "md5": "e8f09e6dd479d7532b1d6058c50693aa",
          "sha256": "b65e1cf68fdef893a87622843c1f40f259a93a1d259932984fb2108de76b2bcb"
        },
        "downloads": -1,
        "filename": "licenseware-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e8f09e6dd479d7532b1d6058c50693aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 151212,
        "upload_time": "2022-03-16T20:21:36",
        "upload_time_iso_8601": "2022-03-16T20:21:36.925111Z",
        "url": "https://files.pythonhosted.org/packages/9b/86/539edfe445fa42ec5af6b98ed0273c740bf1744f4d7e6600ef5e016e41f7/licenseware-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77a8a46811f418a8e50b6fc1cd7592e55af910aa42db7df9a611dff0ea17072f",
          "md5": "8c27d1539fb3e4b7079918b696e8476b",
          "sha256": "82f6c2ab96039ffbd4e5f7f7c2d896e34f38babde71bb574ae94ed83f464b7c9"
        },
        "downloads": -1,
        "filename": "licenseware-2.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c27d1539fb3e4b7079918b696e8476b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 256309,
        "upload_time": "2022-09-30T16:25:26",
        "upload_time_iso_8601": "2022-09-30T16:25:26.055425Z",
        "url": "https://files.pythonhosted.org/packages/77/a8/a46811f418a8e50b6fc1cd7592e55af910aa42db7df9a611dff0ea17072f/licenseware-2.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adb2b0f4732ca9e9679288fd343987d2b3b4510a8f9031d70530b32ec3ea07fe",
          "md5": "230bf26de771c2f83513b6fe870018f9",
          "sha256": "0b290526f14c5f0ae1043f43c0d20702c19a4d9090436202e5f965f8b00ef86f"
        },
        "downloads": -1,
        "filename": "licenseware-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "230bf26de771c2f83513b6fe870018f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 162167,
        "upload_time": "2022-09-30T16:25:28",
        "upload_time_iso_8601": "2022-09-30T16:25:28.459911Z",
        "url": "https://files.pythonhosted.org/packages/ad/b2/b0f4732ca9e9679288fd343987d2b3b4510a8f9031d70530b32ec3ea07fe/licenseware-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e01380702c5a4dc393498f2cef22b374664bf1ed81924b00edb288edb59ef370",
          "md5": "e82f8e0e59f02e136c2f3eb5ba7f7144",
          "sha256": "dcd2df8ec1727d2065ce622c2d6523b21bd61f621d153e198ab2d2510e7cb79e"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e82f8e0e59f02e136c2f3eb5ba7f7144",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 256372,
        "upload_time": "2022-10-03T08:48:43",
        "upload_time_iso_8601": "2022-10-03T08:48:43.216371Z",
        "url": "https://files.pythonhosted.org/packages/e0/13/80702c5a4dc393498f2cef22b374664bf1ed81924b00edb288edb59ef370/licenseware-2.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4ffa721eb35409c0e9488c970f340934ac9819d39b1491c0f8e8b610d68b6e5",
          "md5": "2f304246701bc16ebcaf44573e48ccf7",
          "sha256": "69ebe289fd0ab79b628e2025e4cd410db12ea3da294ec7f0575e382224d2be0f"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2f304246701bc16ebcaf44573e48ccf7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 161957,
        "upload_time": "2022-10-03T08:48:45",
        "upload_time_iso_8601": "2022-10-03T08:48:45.077800Z",
        "url": "https://files.pythonhosted.org/packages/f4/ff/a721eb35409c0e9488c970f340934ac9819d39b1491c0f8e8b610d68b6e5/licenseware-2.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e96eb15f86d579aa18b2955ddb9849e9fa2d9092705294809144cb5f0052e59c",
          "md5": "87f63f7af47f3b607e321a09424b783e",
          "sha256": "fc1e2afa072b04ac973f8977d8c7d9d2c2cd8a96396faf36faa2b32950edb989"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87f63f7af47f3b607e321a09424b783e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 273878,
        "upload_time": "2022-11-10T19:53:30",
        "upload_time_iso_8601": "2022-11-10T19:53:30.675408Z",
        "url": "https://files.pythonhosted.org/packages/e9/6e/b15f86d579aa18b2955ddb9849e9fa2d9092705294809144cb5f0052e59c/licenseware-2.3.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6113b1ecc339a258f613b49f31b0b278cb60b73839c3a34f40e1571d54ff7d6d",
          "md5": "13f655ab71ab85ef65ef35364f80b7c7",
          "sha256": "7dc3c52c367077212df1fa4f4dca767557801161ae3fb8d1561c89f6675cbee7"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "13f655ab71ab85ef65ef35364f80b7c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 170730,
        "upload_time": "2022-11-10T19:53:33",
        "upload_time_iso_8601": "2022-11-10T19:53:33.027495Z",
        "url": "https://files.pythonhosted.org/packages/61/13/b1ecc339a258f613b49f31b0b278cb60b73839c3a34f40e1571d54ff7d6d/licenseware-2.3.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.1rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfbc0d3c6e45ce0d3c4fc66ea01d45923a715db7d0fad75c7921550f381d759b",
          "md5": "dbb4d8d605e982ae63375c53d45b5a44",
          "sha256": "079261d0e54cfe0d902f1b4f5ca8ed676f9ba600e0c49fc735799e00a0debb0d"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.1rc0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbb4d8d605e982ae63375c53d45b5a44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 256346,
        "upload_time": "2022-09-30T16:34:21",
        "upload_time_iso_8601": "2022-09-30T16:34:21.687377Z",
        "url": "https://files.pythonhosted.org/packages/df/bc/0d3c6e45ce0d3c4fc66ea01d45923a715db7d0fad75c7921550f381d759b/licenseware-2.3.1rc0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2eec6b7dfc4fdba219bff6b4228f85fa6b069a542762c97f5c02fefb29b7b8e",
          "md5": "f15e0e410ca07a2d42469217c2c2819a",
          "sha256": "e4fb7d2692b59477170f1007ebd5b91c110bae773450e042f7deef8d635b050a"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.1rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "f15e0e410ca07a2d42469217c2c2819a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 162250,
        "upload_time": "2022-09-30T16:34:24",
        "upload_time_iso_8601": "2022-09-30T16:34:24.013655Z",
        "url": "https://files.pythonhosted.org/packages/e2/ee/c6b7dfc4fdba219bff6b4228f85fa6b069a542762c97f5c02fefb29b7b8e/licenseware-2.3.1rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84690d67bb46bdb5ec107cc143581965e256af990c9c1005546d3eb439519ae8",
          "md5": "dee202ef3b201881cb1c5d490b7aae48",
          "sha256": "034b425e33dd31991838fcc407273df37c4daa400994e6b2847e8577266273f8"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dee202ef3b201881cb1c5d490b7aae48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 256385,
        "upload_time": "2022-10-04T04:14:42",
        "upload_time_iso_8601": "2022-10-04T04:14:42.618038Z",
        "url": "https://files.pythonhosted.org/packages/84/69/0d67bb46bdb5ec107cc143581965e256af990c9c1005546d3eb439519ae8/licenseware-2.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae1229eea5d0378140a292d2b4a72c93dff5db8a29b17431568640da523367a3",
          "md5": "bceca03ef0f2132459d8993ccf159df1",
          "sha256": "c2884b5c79bcc19982e31d81d77ebca99a9cc21a17cd3e4eb9adc548cf1335e5"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bceca03ef0f2132459d8993ccf159df1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 162020,
        "upload_time": "2022-10-04T04:14:44",
        "upload_time_iso_8601": "2022-10-04T04:14:44.664629Z",
        "url": "https://files.pythonhosted.org/packages/ae/12/29eea5d0378140a292d2b4a72c93dff5db8a29b17431568640da523367a3/licenseware-2.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb72597a03d57f7a5beeecf95f49ec8ab963f8be79e41c441b269e1ade4b074f",
          "md5": "9da377a77e689d70150fb1f9816b18e3",
          "sha256": "099f99bddc2ed5a2c53d62b061ed61b511eaca336f7ed54a6566681558884a61"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9da377a77e689d70150fb1f9816b18e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 268996,
        "upload_time": "2022-10-07T07:53:51",
        "upload_time_iso_8601": "2022-10-07T07:53:51.777015Z",
        "url": "https://files.pythonhosted.org/packages/bb/72/597a03d57f7a5beeecf95f49ec8ab963f8be79e41c441b269e1ade4b074f/licenseware-2.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf7591d8b754900fc8f0d6adb5a3bf640d5b8c73a6b898df7018392da25bb7bb",
          "md5": "94bc53a5ba7889d4a47e212ba712fa80",
          "sha256": "36b1e0fd849f03c572b2be92d4739b57713dcafd5540509a17ad8d82d9603991"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "94bc53a5ba7889d4a47e212ba712fa80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 168367,
        "upload_time": "2022-10-07T07:53:54",
        "upload_time_iso_8601": "2022-10-07T07:53:54.047341Z",
        "url": "https://files.pythonhosted.org/packages/cf/75/91d8b754900fc8f0d6adb5a3bf640d5b8c73a6b898df7018392da25bb7bb/licenseware-2.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57913fc9f1b42cab7e56f55e0d499a1b94137432b63b789592c2807602a6bba6",
          "md5": "ea8463c947a0ac946ac95239995aebdd",
          "sha256": "cc594ef3cbb830391d5ce92412d36a027e28e11b2a9e5ef8fc35e213a70dad70"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea8463c947a0ac946ac95239995aebdd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 269160,
        "upload_time": "2022-10-07T11:22:12",
        "upload_time_iso_8601": "2022-10-07T11:22:12.628828Z",
        "url": "https://files.pythonhosted.org/packages/57/91/3fc9f1b42cab7e56f55e0d499a1b94137432b63b789592c2807602a6bba6/licenseware-2.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b725ea5bcbd61f2e78e84c23a0ff15aa73fc5f05b999d559fc10beb2bf7f28b",
          "md5": "9c95fdaaf3032328f61a2e12d7f3d97f",
          "sha256": "4836691d527477c63abf8c22a7246549ac74e677c4996a3fb05a64e79994d720"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9c95fdaaf3032328f61a2e12d7f3d97f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 168482,
        "upload_time": "2022-10-07T11:22:14",
        "upload_time_iso_8601": "2022-10-07T11:22:14.720620Z",
        "url": "https://files.pythonhosted.org/packages/8b/72/5ea5bcbd61f2e78e84c23a0ff15aa73fc5f05b999d559fc10beb2bf7f28b/licenseware-2.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dabc23f4bd579c476dd78efd17fe3f17bde0994689330f394ee85dff1955eaf",
          "md5": "cbc2da0de0c54da74427cc458fea145a",
          "sha256": "1ef7a8bcf7131e7d3f5f56e775844d4ed28f3278057f8d4fb8d120401e9de20d"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cbc2da0de0c54da74427cc458fea145a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 269170,
        "upload_time": "2022-10-14T07:40:12",
        "upload_time_iso_8601": "2022-10-14T07:40:12.431092Z",
        "url": "https://files.pythonhosted.org/packages/9d/ab/c23f4bd579c476dd78efd17fe3f17bde0994689330f394ee85dff1955eaf/licenseware-2.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63829bacf2e1772a34508eaba82d5bb148e2e383b350d2e3a320578c0a71f5cc",
          "md5": "efa25353039f7c2383509b26ee966a0a",
          "sha256": "f72b16a8684c151b73bae6290df4b3a3d537a873fb802e54585e933cb42d4ff5"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "efa25353039f7c2383509b26ee966a0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 168487,
        "upload_time": "2022-10-14T07:40:14",
        "upload_time_iso_8601": "2022-10-14T07:40:14.933840Z",
        "url": "https://files.pythonhosted.org/packages/63/82/9bacf2e1772a34508eaba82d5bb148e2e383b350d2e3a320578c0a71f5cc/licenseware-2.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71e5bb4ce58aecda63082733fb49e11fa5283731913c2777b83bdd6f82744a66",
          "md5": "d22b8e0f7d955aacfd446e15caf6a26d",
          "sha256": "76cf05107dd13ad3cfc398d0b432b6cbd282dd6d8e78d0d8f067cab102d9c24e"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d22b8e0f7d955aacfd446e15caf6a26d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 269172,
        "upload_time": "2022-10-19T04:31:03",
        "upload_time_iso_8601": "2022-10-19T04:31:03.603383Z",
        "url": "https://files.pythonhosted.org/packages/71/e5/bb4ce58aecda63082733fb49e11fa5283731913c2777b83bdd6f82744a66/licenseware-2.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2eef24acb669eebcb4d70fff1f79d41435b789475f141761dc9e505347b4c04",
          "md5": "374a84d5d8c448fc347012290c1d47ec",
          "sha256": "85fa40cb1d56d9efa1317fb179e00bd202500a172a3c00a858c532fbc741f0b8"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "374a84d5d8c448fc347012290c1d47ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 168464,
        "upload_time": "2022-10-19T04:31:05",
        "upload_time_iso_8601": "2022-10-19T04:31:05.642599Z",
        "url": "https://files.pythonhosted.org/packages/c2/ee/f24acb669eebcb4d70fff1f79d41435b789475f141761dc9e505347b4c04/licenseware-2.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d897a25b4247c0dd561710d7b587d8d3e94fa20a1ebf39dcf0fa6fa619ae4617",
          "md5": "11a9b274d34d87df486f264279d9dd1e",
          "sha256": "0d3a8e8e2dd8adb45f103715e27f9cb2597f378f5f203b1316d0ecdceae2744e"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11a9b274d34d87df486f264279d9dd1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 269178,
        "upload_time": "2022-10-21T07:05:26",
        "upload_time_iso_8601": "2022-10-21T07:05:26.700875Z",
        "url": "https://files.pythonhosted.org/packages/d8/97/a25b4247c0dd561710d7b587d8d3e94fa20a1ebf39dcf0fa6fa619ae4617/licenseware-2.3.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfc1a3ef23afc246848e06c6538d9e7c78fa86c9739f8ae4a15720f5488539fe",
          "md5": "0ff5bd64c101d26fbf4f7d54ce12be40",
          "sha256": "f399e6b893a213c66dd721b745d388698dee20c94d4b2f52eb1937a8ca904918"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "0ff5bd64c101d26fbf4f7d54ce12be40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 168519,
        "upload_time": "2022-10-21T07:05:29",
        "upload_time_iso_8601": "2022-10-21T07:05:29.037982Z",
        "url": "https://files.pythonhosted.org/packages/bf/c1/a3ef23afc246848e06c6538d9e7c78fa86c9739f8ae4a15720f5488539fe/licenseware-2.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5756e6992dbcfa4df5a0f846ce8d0cf79e300e9294a52afc59783b6bfd7aa529",
          "md5": "d803b02203f6ad4b29c1169d68ac046a",
          "sha256": "9c9cf1120391386520108d5b1d5c11cb36ef2f2aad63f949c01ded43498d8c35"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d803b02203f6ad4b29c1169d68ac046a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 270234,
        "upload_time": "2022-11-01T06:13:51",
        "upload_time_iso_8601": "2022-11-01T06:13:51.211612Z",
        "url": "https://files.pythonhosted.org/packages/57/56/e6992dbcfa4df5a0f846ce8d0cf79e300e9294a52afc59783b6bfd7aa529/licenseware-2.3.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ef6f1a6ea887fc17f6af6943d198ff9ea0c403ae1d1f49005fbd1d4c2315c2c",
          "md5": "aea721f0826dfc49ddea7cf37bef30b4",
          "sha256": "077b87568a2829673274613a40c31d0a1e126b8ab981c6307786001aea1b6b37"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "aea721f0826dfc49ddea7cf37bef30b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 170024,
        "upload_time": "2022-11-01T06:13:53",
        "upload_time_iso_8601": "2022-11-01T06:13:53.427251Z",
        "url": "https://files.pythonhosted.org/packages/1e/f6/f1a6ea887fc17f6af6943d198ff9ea0c403ae1d1f49005fbd1d4c2315c2c/licenseware-2.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e2c88cf81f6f95be5886c50e6191b82e1acb697e78e9ec81c1a7e874d155130",
          "md5": "e0b21436bc723e86efe726c7f0af80d8",
          "sha256": "3046969afd65650c39b7516a1e6290dce943eb020e49db00a34b062775d253e9"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0b21436bc723e86efe726c7f0af80d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 273806,
        "upload_time": "2022-11-04T08:32:12",
        "upload_time_iso_8601": "2022-11-04T08:32:12.404438Z",
        "url": "https://files.pythonhosted.org/packages/1e/2c/88cf81f6f95be5886c50e6191b82e1acb697e78e9ec81c1a7e874d155130/licenseware-2.3.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e21563f7b0d5a559d1355c6b803df3535e7bdc0e151495afd3123056cf0d9e5e",
          "md5": "c37e08ce981038cb4d34a2592c8ff788",
          "sha256": "21687a273c59022f4444bae5436fec71718743cc64b4769ce12ddb83ab361916"
        },
        "downloads": -1,
        "filename": "licenseware-2.3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "c37e08ce981038cb4d34a2592c8ff788",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 170608,
        "upload_time": "2022-11-04T08:32:15",
        "upload_time_iso_8601": "2022-11-04T08:32:15.062456Z",
        "url": "https://files.pythonhosted.org/packages/e2/15/63f7b0d5a559d1355c6b803df3535e7bdc0e151495afd3123056cf0d9e5e/licenseware-2.3.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e05aacce88c3091971385d367afa99e6481563ce07ef4c00c0efd8f247f46b02",
          "md5": "9e05cb1ae8f77b447c65702f5fb39f4e",
          "sha256": "b0454d5647a087b166f0399b30197471c35e0cfe98de94f09257305197c2960f"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e05cb1ae8f77b447c65702f5fb39f4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 273796,
        "upload_time": "2022-11-04T17:23:46",
        "upload_time_iso_8601": "2022-11-04T17:23:46.718603Z",
        "url": "https://files.pythonhosted.org/packages/e0/5a/acce88c3091971385d367afa99e6481563ce07ef4c00c0efd8f247f46b02/licenseware-2.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab75794d0b9258497d3e68e36d0d943958a83848a2507e033c0aa2b7efbae72b",
          "md5": "75803f29371f0bd704683e1de2796859",
          "sha256": "e0bb23a833f9151c29e105cae25e9f06989e46bd1d16cd1d8eee7f4bc0b70ed6"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "75803f29371f0bd704683e1de2796859",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 170591,
        "upload_time": "2022-11-04T17:23:49",
        "upload_time_iso_8601": "2022-11-04T17:23:49.381842Z",
        "url": "https://files.pythonhosted.org/packages/ab/75/794d0b9258497d3e68e36d0d943958a83848a2507e033c0aa2b7efbae72b/licenseware-2.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e86f6fb7050e0435e32538318e744d97f840618c360cd01a5a27019a197ce2d",
          "md5": "edf49ae95cfdf499b3e40e82825677a6",
          "sha256": "4589c8f07c80231d2adba0a3350c98e204cd918185978b6ee379ce344f159746"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edf49ae95cfdf499b3e40e82825677a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 274318,
        "upload_time": "2022-11-14T08:55:55",
        "upload_time_iso_8601": "2022-11-14T08:55:55.253495Z",
        "url": "https://files.pythonhosted.org/packages/6e/86/f6fb7050e0435e32538318e744d97f840618c360cd01a5a27019a197ce2d/licenseware-2.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0291fbee8993354983a9b20345e6685ee8386ae6a1d4981a767d93da3ca289aa",
          "md5": "485322c91e2692ac803986b93bab1d25",
          "sha256": "5b1079de694af5cabe4f1c19b81f9177f173adbeabaaa2344f03e100d93fdceb"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "485322c91e2692ac803986b93bab1d25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 171442,
        "upload_time": "2022-11-14T08:55:58",
        "upload_time_iso_8601": "2022-11-14T08:55:58.004151Z",
        "url": "https://files.pythonhosted.org/packages/02/91/fbee8993354983a9b20345e6685ee8386ae6a1d4981a767d93da3ca289aa/licenseware-2.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17c460467b6766be0c3f2f9d896b71710059c31aa0400ffc796aa808665bb2ec",
          "md5": "cf58073c249b62433e92b0d0f8488064",
          "sha256": "7fd1bf08f4de1e9c23df920c11f340434aae0da8fc7ec592776b1f70a4dd0e50"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf58073c249b62433e92b0d0f8488064",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 270672,
        "upload_time": "2022-11-15T11:41:07",
        "upload_time_iso_8601": "2022-11-15T11:41:07.672329Z",
        "url": "https://files.pythonhosted.org/packages/17/c4/60467b6766be0c3f2f9d896b71710059c31aa0400ffc796aa808665bb2ec/licenseware-2.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82c21b0617514b5f63e4a2bf106c18b5d7846e939af6e482979826e36da04ffd",
          "md5": "fbc98fecf1408ee9c39d9dad8109a294",
          "sha256": "d5fb8faa356e7951fb6b0fd3720d9084811aae786f5a8dfb9c0cddf7402a6d87"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fbc98fecf1408ee9c39d9dad8109a294",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 169912,
        "upload_time": "2022-11-15T11:41:10",
        "upload_time_iso_8601": "2022-11-15T11:41:10.397625Z",
        "url": "https://files.pythonhosted.org/packages/82/c2/1b0617514b5f63e4a2bf106c18b5d7846e939af6e482979826e36da04ffd/licenseware-2.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ba55cab9dcb14257a18032687b482e81a7e461d148d37dc772ae0223dd7b26b",
          "md5": "596b064c44264466a2fafcc650259715",
          "sha256": "ccba3a6f5180c2ab6ec542eb2e3c529cc98aabe9f6ddb056ecb024ec87fd84d3"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "596b064c44264466a2fafcc650259715",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 270865,
        "upload_time": "2022-11-21T08:53:25",
        "upload_time_iso_8601": "2022-11-21T08:53:25.933111Z",
        "url": "https://files.pythonhosted.org/packages/0b/a5/5cab9dcb14257a18032687b482e81a7e461d148d37dc772ae0223dd7b26b/licenseware-2.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "570308451e686533e2055caaff7fe9b5779c99886a3363e48b9e7a3a5ecff356",
          "md5": "ccca77224717da56e8eb3f55012cf0e8",
          "sha256": "bd27b6a20bb6997e78cf0ef2691dd456411028154c4342b60031b84e9a0f3034"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ccca77224717da56e8eb3f55012cf0e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 170136,
        "upload_time": "2022-11-21T08:53:29",
        "upload_time_iso_8601": "2022-11-21T08:53:29.252030Z",
        "url": "https://files.pythonhosted.org/packages/57/03/08451e686533e2055caaff7fe9b5779c99886a3363e48b9e7a3a5ecff356/licenseware-2.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ff4eebad6b7d533c46c091ef7cefbb5e6876e8c8f1b9f44762d4654bdc32961",
          "md5": "fd9c05548df84c4d80f4ffc3a5caf33b",
          "sha256": "67b042100dcc670770c74cacf20c7f817b6e201b83cc95d48137d39c04ca7ec4"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd9c05548df84c4d80f4ffc3a5caf33b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 270921,
        "upload_time": "2022-11-24T07:19:49",
        "upload_time_iso_8601": "2022-11-24T07:19:49.975776Z",
        "url": "https://files.pythonhosted.org/packages/4f/f4/eebad6b7d533c46c091ef7cefbb5e6876e8c8f1b9f44762d4654bdc32961/licenseware-2.4.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44c5e819168e86332dd25a0bf27df23897af1701ebe1e8b3627f61875685c82a",
          "md5": "cc31f546b98472493bfa7f34d0ea2db7",
          "sha256": "a215648ed07a6b9f4e8516ba950e3b1690a41a8f1c19b3834010b7aabcdb8444"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cc31f546b98472493bfa7f34d0ea2db7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 170211,
        "upload_time": "2022-11-24T07:19:52",
        "upload_time_iso_8601": "2022-11-24T07:19:52.625510Z",
        "url": "https://files.pythonhosted.org/packages/44/c5/e819168e86332dd25a0bf27df23897af1701ebe1e8b3627f61875685c82a/licenseware-2.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d80e9e275dbe6de6cea928ce191e4b341845db185a398bba010fc14a156ca1e3",
          "md5": "5ce265efe744aaf5d781c0a510ab0bd2",
          "sha256": "580bc8b509d718634616d5703ae5a61a2d8e136f7364309eb4b3725da2ba3de5"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ce265efe744aaf5d781c0a510ab0bd2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 271220,
        "upload_time": "2022-12-05T06:25:10",
        "upload_time_iso_8601": "2022-12-05T06:25:10.399795Z",
        "url": "https://files.pythonhosted.org/packages/d8/0e/9e275dbe6de6cea928ce191e4b341845db185a398bba010fc14a156ca1e3/licenseware-2.4.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "688c6694855d124a83d8c7c26970ea08c65a0415d0699cbd1078b3d63201b7f0",
          "md5": "96dde988985e822eb79a9ba15fa8a1b7",
          "sha256": "0e81407f8525985a0ad913556f2d972c5829347894a92b7eed9acd8cc9baaf67"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "96dde988985e822eb79a9ba15fa8a1b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 170543,
        "upload_time": "2022-12-05T06:25:12",
        "upload_time_iso_8601": "2022-12-05T06:25:12.278750Z",
        "url": "https://files.pythonhosted.org/packages/68/8c/6694855d124a83d8c7c26970ea08c65a0415d0699cbd1078b3d63201b7f0/licenseware-2.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc345caacd30cbd8794c5c986ce625b664ff7cb509d1a1b88540fc1a3485f4b8",
          "md5": "64ad77864c956006f4561dbf7a6ff04e",
          "sha256": "454fb57eabf461283dfdb9fa2fe4aff7a16734fd259e09f14e71e2736f8af323"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64ad77864c956006f4561dbf7a6ff04e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 271246,
        "upload_time": "2022-12-08T03:33:56",
        "upload_time_iso_8601": "2022-12-08T03:33:56.874328Z",
        "url": "https://files.pythonhosted.org/packages/bc/34/5caacd30cbd8794c5c986ce625b664ff7cb509d1a1b88540fc1a3485f4b8/licenseware-2.4.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f39aaaaefdd66e85bc14cf09e333eb6d74ef400d4457d413bdbd7dba631f3085",
          "md5": "49fdc2d80f695cf131c7ef54eebf6b50",
          "sha256": "c1bed1e88a5e86eca899dc947f4fa24e7f85eddaf06fb84d96c06c683e0fbf12"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "49fdc2d80f695cf131c7ef54eebf6b50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 174310,
        "upload_time": "2022-12-08T03:33:59",
        "upload_time_iso_8601": "2022-12-08T03:33:59.251076Z",
        "url": "https://files.pythonhosted.org/packages/f3/9a/aaaefdd66e85bc14cf09e333eb6d74ef400d4457d413bdbd7dba631f3085/licenseware-2.4.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9c76ffbfbf320be331203954909f24a416219bdeecca64d966e022b50e10820",
          "md5": "968260b42880d0a01ae224d3e93fee3b",
          "sha256": "b00d4bd6fe381d160a3557c4a2fa10eb97105e8f4bc5d7f7b53cf7f870c8f8be"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "968260b42880d0a01ae224d3e93fee3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 271268,
        "upload_time": "2022-12-09T09:42:18",
        "upload_time_iso_8601": "2022-12-09T09:42:18.072356Z",
        "url": "https://files.pythonhosted.org/packages/a9/c7/6ffbfbf320be331203954909f24a416219bdeecca64d966e022b50e10820/licenseware-2.4.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f31cd92dbba1737563d57d76f52a32deb9a8f64b2caaac8d90bc745d02ab93fc",
          "md5": "dbb0395cf72d45cfa4672e040b047068",
          "sha256": "e6e43659b14f4bfd2d386b1d0c499bd4af52e8a4a72dce84276bd315c24a43cc"
        },
        "downloads": -1,
        "filename": "licenseware-2.4.7.tar.gz",
        "has_sig": false,
        "md5_digest": "dbb0395cf72d45cfa4672e040b047068",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.8.*",
        "size": 174372,
        "upload_time": "2022-12-09T09:42:21",
        "upload_time_iso_8601": "2022-12-09T09:42:21.782088Z",
        "url": "https://files.pythonhosted.org/packages/f3/1c/d92dbba1737563d57d76f52a32deb9a8f64b2caaac8d90bc745d02ab93fc/licenseware-2.4.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef76b022d82cbadf6385ab856012d723eb900a909f0c1b43adf39549916f687d",
          "md5": "b5011089c4f05a73a4c2eab484971fb7",
          "sha256": "366dc7bdc24c90868f2715c2d50c4f8c1cd70637966d68004549a1e498785392"
        },
        "downloads": -1,
        "filename": "licenseware-3.0.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5011089c4f05a73a4c2eab484971fb7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 99580,
        "upload_time": "2022-10-25T07:02:10",
        "upload_time_iso_8601": "2022-10-25T07:02:10.312159Z",
        "url": "https://files.pythonhosted.org/packages/ef/76/b022d82cbadf6385ab856012d723eb900a909f0c1b43adf39549916f687d/licenseware-3.0.0rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "487f4f0215c62b93fa5f350185f44504a8cc50d810bd6b5579073c671e9cdf55",
          "md5": "b48d73e3afc6da2d012c2aa0d810ea44",
          "sha256": "7648a0e627e36d2d57aa4c038104d9268b3350465ea13be0c22bb9ba86d90f7b"
        },
        "downloads": -1,
        "filename": "licenseware-3.0.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "b48d73e3afc6da2d012c2aa0d810ea44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 82839,
        "upload_time": "2022-10-25T07:02:12",
        "upload_time_iso_8601": "2022-10-25T07:02:12.259297Z",
        "url": "https://files.pythonhosted.org/packages/48/7f/4f0215c62b93fa5f350185f44504a8cc50d810bd6b5579073c671e9cdf55/licenseware-3.0.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a9c76ffbfbf320be331203954909f24a416219bdeecca64d966e022b50e10820",
        "md5": "968260b42880d0a01ae224d3e93fee3b",
        "sha256": "b00d4bd6fe381d160a3557c4a2fa10eb97105e8f4bc5d7f7b53cf7f870c8f8be"
      },
      "downloads": -1,
      "filename": "licenseware-2.4.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "968260b42880d0a01ae224d3e93fee3b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "==3.8.*",
      "size": 271268,
      "upload_time": "2022-12-09T09:42:18",
      "upload_time_iso_8601": "2022-12-09T09:42:18.072356Z",
      "url": "https://files.pythonhosted.org/packages/a9/c7/6ffbfbf320be331203954909f24a416219bdeecca64d966e022b50e10820/licenseware-2.4.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f31cd92dbba1737563d57d76f52a32deb9a8f64b2caaac8d90bc745d02ab93fc",
        "md5": "dbb0395cf72d45cfa4672e040b047068",
        "sha256": "e6e43659b14f4bfd2d386b1d0c499bd4af52e8a4a72dce84276bd315c24a43cc"
      },
      "downloads": -1,
      "filename": "licenseware-2.4.7.tar.gz",
      "has_sig": false,
      "md5_digest": "dbb0395cf72d45cfa4672e040b047068",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "==3.8.*",
      "size": 174372,
      "upload_time": "2022-12-09T09:42:21",
      "upload_time_iso_8601": "2022-12-09T09:42:21.782088Z",
      "url": "https://files.pythonhosted.org/packages/f3/1c/d92dbba1737563d57d76f52a32deb9a8f64b2caaac8d90bc745d02ab93fc/licenseware-2.4.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}