{
  "info": {
    "author": "https://gitlab.com/frier17/",
    "author_email": "frier17@a17s.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Design Pattern Tool Kit\n**A collection of design patterns implemented in Python programming language**\n\nThe design pattern tool kit is aimed at achieving quick and efficient application on tested design patterns. \nFurthermore, the tool kit will enable development with a minimal need for refactoring code base \n\n## Project status: \nPrototype\n\n## Installation\nThe application can be installed by cloning the repository: \n[https://gitlab.com/frier17/toolkit](https://gitlab.com/frier17/toolkit). Future development may be made available\n through the PiPy directory.\n\n## Usage\nUse the toolkit to build application with features fitting the design pattern as described below.\n\n1. Command: This pattern is useful for managing request of classes in a manner in which commands are passed as\n standalone objects. These object can be stored in structures such as list or dictionary. Furthermore, commands can\n  be prioritized or called when certain conditions are satisfied.\n\n    Use the command pattern when:\n    + an application or system needs to pass method calls as objects. In Python this can be easily implementing the\n     `__call__` function or passing functions as parameters\n    + you want to implement commands that can be stored and later called or are reversible. Example executing an\n     \"undo\" command.\n    + a robust execution model is required, that is, method invocation can be treated as objects and more organized\n     in execution\n\n2. Mediator: This pattern is used where a collection of components or classes working together are not closely\n coupled and do not directly communicate with each other. This pattern is best used where:\n\n    + classes working together should not be tightly coupled\n    + classes are to be reused but cannot be adapted without the need to create subclasses in order to customise them\n     for target system\n    + where so many subclasses will be needed to simply use basic features but cannot because of tight coupling\n\n3. Mementos: The mementos pattern is suitable for capturing the state of object or system (as snapshots) in a manner\n in which the state can be restored without associated classes being aware of the internal structure of the object\n . The stored state can only be accessed by clearly defined interfaces. The captured state can only be modified\n , viewed and accessed by the source class (originator) which was captured.\n\n4. Observer: The observer pattern is suitable where multiple classes may need to update their state or perform a\n function when a given event or object is changed. \n\n5. Chain of Responsibility: The chain of responsibility resembles the State and Strategy pattern. \nAll three design patterns are focused on changing the behaviour of the object but differ in the manner in which they\n achieve their goal. \nThe State pattern changes behaviour by delegating to a state object which can change the observed object's state at\n will and have knowledge of the approved system state transition or sibling states. The strategy pattern is also\n  achieved via composition. Desired behaviours are delegated to concrete strategy objects which cannot change the\n   object state or may not be aware of other sibling strategies. The CoR is also based on composition. \nIn this scenario, a task is accomplished by passing it along a linked number of handlers. \nEach handler may handle the given task, component of the task, or simply pass the task to the next handler till the\n entire task is accomplished.\n\n6. State: The state design pattern is useful where an object needs to change its behaviour based on its current state\n. The state can be measured by some set values or external object.\nImplementing a state pattern requires abstracting the behaviour of the class when a given state is reached into\n concrete object which implements a state interface. A context class is then used to retain other attributes and\n  behaviour of the desired class. This context object will have accessor/mutator to the state object enabling the\n   class to change its states through a defined protocol. In most practical cases, transition in state is well\n    defined and each state object may be implemented in a manner in which they can determine the allowable state(s\n    ) they can be changed to. Considering Python a programming language which has functions as first class objects\n    , alternative mechanism can be adopted to reach similar goal. For instance, behaviour can be captured as\n     functions or methods. The required context information can be passed as parameters to these functions. Also\n     , since functions can be passed as parameters, various states can be mapped to respective functions thereby\n      making it possible to simply have a context class and respective state behaviours which can be called directly\n       within the context without need for extra state interface or concrete implementation\n\n7. Singleton: The singleton pattern is a creation pattern. This pattern is suitable where only one copy or instance\n of a given class is needed. In Python this can be achieved using metaclasses.\n\n8. Factory, AbstractFactory, Prototype Design Pattern: The three creation pattern while different in their approach\n share a common factor: they are tailored to creating objects while delegating the detail implementation to children\n  classes or composite class with sole responsibility of making copies or creating instances. From this view point\n  , and considering the nature of the Python language, the following deductions can be reached:\n    + Factory, AbstractFactory, and Builder design pattern delegate creation to subclasses. The concrete implementation\n     then\n     relies on the class constructor to create/instantiate a class. Python uses a different approach from a number of\n      OOP languages. All objects in Python are subclasses of `type`. Furthermore, the `type` class is a callable (can\n       be called as a function) hence objects can be created not only through their concrete class implementation but\n        also through a general/central mechanism via `type`. The need for having pletheora of subclassses is then\n         removed. Added to this, the `__new__` and `__init__` functions work together to create any object when using\n          the\n          conventional class call: that is, `a = ClassA()`. The instance created in `__new__` is passed to the `__init__`\n           function for initialization. Both function behaviour is fully captured when using `type` as members and\n            parent classes can be passed to the `type`. The major drawback with using `type` is that dynamic\n             attribute access cannot be restricted as in the case where `__slots__` may be used in a class or\n              descriptors are defined. However, this is a negligible trade off. Based on this, wrapping calls to\n               `type` within a Factory class method makes for more efficient and pythonic means of generating various\n                types of objects. \n    + Prototype design pattern uses the approach of making copies or clones of objects which can then be modified\n     without affecting the original object. This approach is attained naturally in Python through the copy or pickle\n      mechanism. Python provides the native `copy` function which relies on the metaclass function or dunder methods\n      : `__copy__` and `__deepcopy__`. Depending on one's goals, either the shallow copy (`__copy__`) or the deep\n       copy(`__deepcopy__`) can be implemented in the source class which is used to make prototypes. Copies or clones\n        can then simply be made by calling the function, example: `b = copy(object_a)` or through the `copy.deepcopy\n        ` and `copy.copy` modules. Either ways, by simply wrapping the copying methods, prototypes can be made\n         without the overhead of creating a prototyping class or mechanism. \n   The design approach adopted in toolkit package is to have all four creation pattern embedded in a base Factory\n    class. This class will provide access to producing objects using class methods. For efficiency, already created\n     classes can be registered in a cache-like dictionary object of factory. This will enable creating copies of\n      created classes rather than re-creating them. Also, since the goal of the factory patterns is tailored at\n       producing objects not defining classes, the `type` function is used to create objects through the \n       `Factory.produce(*,bases=(), specification={})` class method. \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/frier17/toolkit.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "design-pattern-toolkit",
    "package_url": "https://pypi.org/project/design-pattern-toolkit/",
    "platform": "",
    "project_url": "https://pypi.org/project/design-pattern-toolkit/",
    "project_urls": {
      "Homepage": "https://gitlab.com/frier17/toolkit.git"
    },
    "release_url": "https://pypi.org/project/design-pattern-toolkit/1.0a2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Collection of design patterns implemented in Python",
    "version": "1.0a2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8041899,
  "releases": {
    "1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2793cfeeb501211eec75957de14112a56b559de2da93885e69ada237569f3a8a",
          "md5": "8e57163aa32283aeaa8288f7120293f2",
          "sha256": "81d26525ead313ddcee501feeafceb16294a020b5410fd091996185cfbfaa97e"
        },
        "downloads": -1,
        "filename": "design_pattern_toolkit-1.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e57163aa32283aeaa8288f7120293f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17330,
        "upload_time": "2020-08-26T09:07:36",
        "upload_time_iso_8601": "2020-08-26T09:07:36.510789Z",
        "url": "https://files.pythonhosted.org/packages/27/93/cfeeb501211eec75957de14112a56b559de2da93885e69ada237569f3a8a/design_pattern_toolkit-1.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2893f15f4a6037c81c25d309c2fca2b116f273a6e881d18657a937abec954a19",
          "md5": "3ffec382da6fd150bcb1916b3f245c1a",
          "sha256": "e77ebec3e991459fc809e555366267342817b8fe6cfc3cf570a087e059f2ec05"
        },
        "downloads": -1,
        "filename": "design_pattern_toolkit-1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ffec382da6fd150bcb1916b3f245c1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14726,
        "upload_time": "2020-08-26T09:07:40",
        "upload_time_iso_8601": "2020-08-26T09:07:40.754786Z",
        "url": "https://files.pythonhosted.org/packages/28/93/f15f4a6037c81c25d309c2fca2b116f273a6e881d18657a937abec954a19/design_pattern_toolkit-1.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1e969d7b976a92366aec9018fedff7ef51ed5342fffe58cd6a605d35214c62c",
          "md5": "be08c6803926d1801dd41a76b829f518",
          "sha256": "eb3c2bfe7dde22a8e2a92aff374a388865e6f8cac51c3898c89d1c9f4bf85a61"
        },
        "downloads": -1,
        "filename": "design_pattern_toolkit-1.0a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be08c6803926d1801dd41a76b829f518",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20555,
        "upload_time": "2020-08-26T09:22:54",
        "upload_time_iso_8601": "2020-08-26T09:22:54.658737Z",
        "url": "https://files.pythonhosted.org/packages/d1/e9/69d7b976a92366aec9018fedff7ef51ed5342fffe58cd6a605d35214c62c/design_pattern_toolkit-1.0a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8206823fc5944d08b12cb8a429d6e59baef0ef41bcdc4be4e2c10297e3dea189",
          "md5": "2cff927efbe0a43cf830e28f3a4eb00e",
          "sha256": "1fa19027d86418aea6b8ced1bdde3c0078bd6dfcdd91b08b9e32bb20134c0273"
        },
        "downloads": -1,
        "filename": "design_pattern_toolkit-1.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "2cff927efbe0a43cf830e28f3a4eb00e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15208,
        "upload_time": "2020-08-26T09:22:57",
        "upload_time_iso_8601": "2020-08-26T09:22:57.109380Z",
        "url": "https://files.pythonhosted.org/packages/82/06/823fc5944d08b12cb8a429d6e59baef0ef41bcdc4be4e2c10297e3dea189/design_pattern_toolkit-1.0a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d1e969d7b976a92366aec9018fedff7ef51ed5342fffe58cd6a605d35214c62c",
        "md5": "be08c6803926d1801dd41a76b829f518",
        "sha256": "eb3c2bfe7dde22a8e2a92aff374a388865e6f8cac51c3898c89d1c9f4bf85a61"
      },
      "downloads": -1,
      "filename": "design_pattern_toolkit-1.0a2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be08c6803926d1801dd41a76b829f518",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20555,
      "upload_time": "2020-08-26T09:22:54",
      "upload_time_iso_8601": "2020-08-26T09:22:54.658737Z",
      "url": "https://files.pythonhosted.org/packages/d1/e9/69d7b976a92366aec9018fedff7ef51ed5342fffe58cd6a605d35214c62c/design_pattern_toolkit-1.0a2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8206823fc5944d08b12cb8a429d6e59baef0ef41bcdc4be4e2c10297e3dea189",
        "md5": "2cff927efbe0a43cf830e28f3a4eb00e",
        "sha256": "1fa19027d86418aea6b8ced1bdde3c0078bd6dfcdd91b08b9e32bb20134c0273"
      },
      "downloads": -1,
      "filename": "design_pattern_toolkit-1.0a2.tar.gz",
      "has_sig": false,
      "md5_digest": "2cff927efbe0a43cf830e28f3a4eb00e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15208,
      "upload_time": "2020-08-26T09:22:57",
      "upload_time_iso_8601": "2020-08-26T09:22:57.109380Z",
      "url": "https://files.pythonhosted.org/packages/82/06/823fc5944d08b12cb8a429d6e59baef0ef41bcdc4be4e2c10297e3dea189/design_pattern_toolkit-1.0a2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}