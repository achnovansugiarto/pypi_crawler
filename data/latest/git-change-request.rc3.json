{
  "info": {
    "author": "Danny Baez",
    "author_email": "danny.baez.jr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "# git-change-request\na tool for working with pull/merge requests in a CI context.\n\n## Background\nThis tool came about because our Jenkins CI was behind a firewall so we couldn't \nuse the Jenkins Github plugin out of the box nor did my team want the overhead\nof managing a `smee.io` client. Couple that with the fact that in this context the \nclosest solution was to setup our dynamic Jenkins agent with the github cli to\npull down the PR for testing but the github client does not handle updating a \nPR's commit status to report the outcome of the downstream status\n\nSo with those factors in mind this tool was born with the following goals:\n\n* Be able to checkout a PR locally and update it's status from one tool rather than multiple tools\n* Be able to support the above PR workflow in any CI system context without needing CI system plugins/dependencies\n* Be able to support the above PR workflow with any remote repo hosting app like GitLab, Bitbucket, etc. \n\n\n## Installation\n`git-change-request` can be easily installed with a one line command. It is recommended (as best practice) to create a virtual\nenvironment and install ospclientsdk. Please see the commands below to install. Note this is only supported\nin python 3.6 and higher.\n\n```\n# install python virtualenv\n$ pip install python-virtualenv\n\n# create virtualenv\n$ virtualenv cr\n\n# activate virtualenv\n$ source cr/bin/activate\n\n# install git-change-request\n$ (cr) pip install git-change-request\n```\n\n## Usage\nLet's dive into how to use this the command line tool. \n\n### Setup\nYou will need to setup two things to use this tool, a repo url and a personal auth token.\n* For authorization, git-change-request supports the `gh cli` environment variables \n  `GH_TOKEN || GITHUB_TOKEN`\n* For the repo url git-change-request supports the following options\n```\n\n# you can set the following environment variable\n\n$ export GIT_CR_REPO=<repo url from borwser>\n\n# or you can ovverride the variable and pass it on the command line with\n\ngit-cr --repo-url \"<repo url from the browser>\" \n```\n<p>&nbsp;</p>\n\n### Command List\nOnce you've setup the authentication token and repo url. You can begin running commands\n\n\n#### list\nYou can list PRs on your repo\n```\n\n$ git-cr list [--state <state>]\n```\n\n**example**\n```\n$ git-cr list\n[\n    {\n        \"number\": 41,\n        \"title\": \"Create umb.txt\",\n        \"state\": \"open\"\n    }\n]\n```\n\n**state** - can be the supported GitHub states of *open*, *closed*, *all*. By default if state is not specified\nit will list open PRs.\n\n<p>&nbsp;</p>\n\n#### status\nYou can select to see the status of a PR or update the status of a PR.\n\n\n##### status get\nIt will get the full status of a PR, if check-suites are configured for your project the status will \nbe included along with the combined commit status\n```\n\n$ git-cr status get [--number <PR Number>]\n```\n\n**example**\n```\n$ git-cr status get --number 41\n  {\n      \"checks\": {\n          \"conclusion\": \"success\",\n          \"status\": \"completed\"\n      },\n      \"status\": {\n          \"state\": \"pending\",\n          \"statuses\": [\n              {\n                  \"state\": \"success\",\n                  \"context\": \"\\\"jenkins downstream tests\\\"\",\n                  \"description\": \"\\\"pytest completed successfully\\\"\"\n              },\n              {\n                  \"state\": \"pending\",\n                  \"context\": \"jenkins downstream tests\",\n                  \"description\": \"e2e-test running\"\n              }\n          ]\n      }\n  }\n```\n\n**number** - The PR number to query.\n<p>&nbsp;</p>\n\n##### status set\nIt will set the status of a PR with state and relevant information while optionally assign\nreviewers to the PR\n\n```\n\n$ git-cr status set [--number <PR Number>] \n                    [--state <state>] \n                    [--context <context>]\n                    [--description <description>]\n                    [--target-url <url>]\n                    [--reviewer <reviewer>, --team <team>]\n```\n\n**example**\n```\n$ git-cr status set --number 41 --state success --context \"jenkins downstream tests\" --description \"pytest completed successfully\" --team \"test-team\"\n\n```\n\n**number** - The PR number to update status on.\n\n**state** - The status of the commit, can be any supported GitHub options *success*, *error*, *failure*, *pending*\n\n**context** - A label to differentiate the status\n\n**description** - A short description of the status\n\n**target-url** - The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users \nto easily see the source of the status.\n\n**reviewer** - A reviewer to assign to the the PR once the status has been updated\n\n**team** - A project team to assign to the PR once the status has been updated\n<p>&nbsp;</p>\n\n #### checkout\n Clone the repo and checkout the PR locally.\n\n It will first attempt to clone the repo to the current working directory. It is the \n equivalent to running `git clone <repo_url>`. If it is determined that repo already exists it \n will skip the cloning process, proceed to fetch the PR, create a local branch with a schema \n of `pull-<number>`, and checkout the branch.\n ``` \n $ git-cr checkout [--number <number>]\n ```\n\n **example**\n ```\n$ ls -lrta\ndrwxrwxr-x. 29 user user  4096 May  5 12:12 ..\ndrwxrwxr-x. 29 user user  4096 May  5 12:12 .\n\n$ git-cr checkout --number 41\n\n$ ls -lrta && cd piqe-ocp-lib && git branch --list\ndrwxrwxr-x. 29 user user  4096 May  5 12:12 ..\ndrwxrwxr-x. 29 user user  4096 May  5 12:12 .\ndrwxrwxr-x. 29 user user  4096 May  5 12:12 piqe_ocp_lib\n  master\n* pull-41\n ```\n\n **number** - The PR number to checkout\n<p>&nbsp;</p>\n\n#### view\nView a summary of information about the PR.\n ``` \n $ git-cr view [--number <number>]\n ```\n\n **example**\n ```\n$ git-cr view --number 36\n {\n     \"number\": 36,\n     \"title\": \"[CSSWA-474] - Library requirements\",\n     \"state\": \"closed\",\n     \"sha\": \"bcc84d8a0c1c23b2b2a6d0ef6163a968fe3b3150\",\n     \"merged\": true,\n     \"reviews\": [\n         {\n             \"user\": \"Dannyb48\",\n             \"state\": \"COMMENTED\"\n         },\n         {\n             \"user\": \"gmcrocetti\",\n             \"state\": \"COMMENTED\"\n         },\n         {\n             \"user\": \"btjd\",\n             \"state\": \"COMMENTED\"\n         },\n         {\n             \"user\": \"Dannyb48\",\n             \"state\": \"COMMENTED\"\n         },\n         {\n             \"user\": \"Dannyb48\",\n             \"state\": \"APPROVED\",\n             \"body\": \"LGTM\"\n         },\n         {\n             \"user\": \"btjd\",\n             \"state\": \"APPROVED\"\n         }\n     ],\n     \"status_and_checks\": {\n         \"checks\": {\n             \"conclusion\": \"success\",\n             \"status\": \"completed\"\n         },\n         \"status\": {\n             \"state\": \"pending\",\n             \"statuses\": []\n         }\n     }\n }\n\n ```\n\n **number** - The PR number to view information on.\n<p>&nbsp;</p>\n\n ## Developing Plugins\n\n If you're interested in extending support for other backend repo managers like GitLab, Bitbucket\n or want to write your own GitHub implementation you can do so easily but still leverage\n the same interface, you can do so easily\n\n 1. Install git-change-requests\n\n 2. Create a python module and/or file where from git-change-request you import `BaseRequest`\n\n 3. To enable logging you can create a logger using the `create_logger` function or calling python's `getLogger`\n\n 4. Create a setup.py file so that it can register the plugin where git-change-request can find it. \n    Register to `git_cr_plugins`. Please refer \n    [here](https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins)                   \n    for more information on entry points\n\n 5. Finally, export the environment variable `GIT_CR_PLUGIN_NAME` to the plugin class name. This will\n    cause the `ChangeRequest` interface to inject the new plugin rather than the default.                                                                                              \n\nBelow is an example of the process\n ```python\nfrom git_change_request import BaseRequest\nfrom loggin import getLogger\n\nclass NewPlugin(BaseRequest):\n\n    def __init__(self, repo_url):\n\n        # creating logger for this plugin to get added to git-change-request's loggers\n        self.create_logger(name='newplugin', data_folder=<data folder name>)\n        # OR\n        logger = getLogger('git_change_request')\n\n        self.repo_url = repo_url\n        self.cr = None\n\n        # init some client using the repo_url\n        self.client = SomeClient(repo_url)\n\n    def work_on(self, number):\n        self.cr = number\n\n    def get_status(self):\n        # Your code to get status \n        self.client.get_status(self, self.cr)\n\n\n    def success(self, **kwargs):\n        # when implementing state for status update, set them as first class functions. \n        # for example this success function will be called when a client wants to set\n        # the state to 'success' on the commit status\n\n        self.client.create_status(**kwargs)\n\n```\n\n\n```python\n\n   from setuptools import setup, find_packages\n\n   setup(\n       name='new_plugin',\n       version=\"1.0\",\n       description=\"new plugin for git-change-request\",\n       author=\"John Doe\",\n       packages=find_packages(),\n       include_package_data=True,\n       python_requires=\">=3\",\n       install_requires=[\n           'git-change-request',\n       ],\n       entry_points={\n                     'git_cr_plugins': 'new_plugin = <plugin package name>:<NewPluginClass>'\n                    }\n   )\n ```  \n\n```\nexport GIT_CR_PLUGIN_NAME = NewPlugin\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dannyb48/git-change-request",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "git-change-request",
    "package_url": "https://pypi.org/project/git-change-request/",
    "platform": "",
    "project_url": "https://pypi.org/project/git-change-request/",
    "project_urls": {
      "Homepage": "https://github.com/Dannyb48/git-change-request"
    },
    "release_url": "https://pypi.org/project/git-change-request/0.4.0/",
    "requires_dist": [
      "PyGithub",
      "GitPython",
      "click"
    ],
    "requires_python": "",
    "summary": "tool for working with pull/merge requests in a CI context.",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10560217,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2dbb883d03cf9971e0e8f71ab0c46e540c2c1497312187ccc620f2a5506dea9",
          "md5": "e57910cbae974519a7b85339cf0a1f33",
          "sha256": "df91a458e061ec37e83f7d24644b09b2ffb6899f04cb6d92a448b6bf6d6179a4"
        },
        "downloads": -1,
        "filename": "git_change_request-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e57910cbae974519a7b85339cf0a1f33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26988,
        "upload_time": "2021-06-04T16:46:54",
        "upload_time_iso_8601": "2021-06-04T16:46:54.196434Z",
        "url": "https://files.pythonhosted.org/packages/d2/db/b883d03cf9971e0e8f71ab0c46e540c2c1497312187ccc620f2a5506dea9/git_change_request-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee2f5472260c066ae5f1ba681baeb5d3792ec7138d85064fe2ff630325a9c100",
          "md5": "3c8447fa383d0909b9ac62391c6ad319",
          "sha256": "ead6133b35bd057f95bf663ceed90a7d6651b46921abdd1a915ffabc1f3d8ff3"
        },
        "downloads": -1,
        "filename": "git_change_request-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c8447fa383d0909b9ac62391c6ad319",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27731,
        "upload_time": "2021-06-04T16:46:55",
        "upload_time_iso_8601": "2021-06-04T16:46:55.620331Z",
        "url": "https://files.pythonhosted.org/packages/ee/2f/5472260c066ae5f1ba681baeb5d3792ec7138d85064fe2ff630325a9c100/git_change_request-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4de1200eb1fee148edfde74700b6483b78b12dcc2508c45cabed1227af6315e8",
          "md5": "2959bd76d1812b85ffbffd05d8664932",
          "sha256": "67acc34fe71df6b012730c6704dea90dc9f69c7013f5d08fbc01ffb360c2b6e5"
        },
        "downloads": -1,
        "filename": "git_change_request-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2959bd76d1812b85ffbffd05d8664932",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26987,
        "upload_time": "2021-06-04T17:32:57",
        "upload_time_iso_8601": "2021-06-04T17:32:57.499047Z",
        "url": "https://files.pythonhosted.org/packages/4d/e1/200eb1fee148edfde74700b6483b78b12dcc2508c45cabed1227af6315e8/git_change_request-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43f0385729461467833de07443ca987ad308108ff50fd14d822c10e3d322ecd0",
          "md5": "d8b66239edc3df5a8ffd275a4c4d7723",
          "sha256": "3095a9aabe3dc111d0ef447cbc9f9f83b23669ed4e7743a6a9bc15d42c5c767f"
        },
        "downloads": -1,
        "filename": "git_change_request-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8b66239edc3df5a8ffd275a4c4d7723",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27799,
        "upload_time": "2021-06-04T17:32:59",
        "upload_time_iso_8601": "2021-06-04T17:32:59.270785Z",
        "url": "https://files.pythonhosted.org/packages/43/f0/385729461467833de07443ca987ad308108ff50fd14d822c10e3d322ecd0/git_change_request-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eca56946d0faedf936c47b05daf35dd2bc4fc581a8bd46db8a1291a17544d504",
          "md5": "58a2a7d517d320ca46eb950098a2fed3",
          "sha256": "b18024b7318844aa6372d13f5ef609a7668f35027130671655441aa7a760610f"
        },
        "downloads": -1,
        "filename": "git_change_request-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58a2a7d517d320ca46eb950098a2fed3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26987,
        "upload_time": "2021-06-04T17:46:39",
        "upload_time_iso_8601": "2021-06-04T17:46:39.791581Z",
        "url": "https://files.pythonhosted.org/packages/ec/a5/6946d0faedf936c47b05daf35dd2bc4fc581a8bd46db8a1291a17544d504/git_change_request-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ae70dca7cff554cc08c23577a0052dac8c49f058afe3d77e53c5a1917a0ec14",
          "md5": "59f2b1462dbae99540faba5138438b2d",
          "sha256": "879db3fe1372fcd80a2d8db90b90307f9ddfd6e4682de6b40dccd6c335a3770d"
        },
        "downloads": -1,
        "filename": "git_change_request-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "59f2b1462dbae99540faba5138438b2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27763,
        "upload_time": "2021-06-04T17:46:41",
        "upload_time_iso_8601": "2021-06-04T17:46:41.232006Z",
        "url": "https://files.pythonhosted.org/packages/0a/e7/0dca7cff554cc08c23577a0052dac8c49f058afe3d77e53c5a1917a0ec14/git_change_request-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eca56946d0faedf936c47b05daf35dd2bc4fc581a8bd46db8a1291a17544d504",
        "md5": "58a2a7d517d320ca46eb950098a2fed3",
        "sha256": "b18024b7318844aa6372d13f5ef609a7668f35027130671655441aa7a760610f"
      },
      "downloads": -1,
      "filename": "git_change_request-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "58a2a7d517d320ca46eb950098a2fed3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 26987,
      "upload_time": "2021-06-04T17:46:39",
      "upload_time_iso_8601": "2021-06-04T17:46:39.791581Z",
      "url": "https://files.pythonhosted.org/packages/ec/a5/6946d0faedf936c47b05daf35dd2bc4fc581a8bd46db8a1291a17544d504/git_change_request-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ae70dca7cff554cc08c23577a0052dac8c49f058afe3d77e53c5a1917a0ec14",
        "md5": "59f2b1462dbae99540faba5138438b2d",
        "sha256": "879db3fe1372fcd80a2d8db90b90307f9ddfd6e4682de6b40dccd6c335a3770d"
      },
      "downloads": -1,
      "filename": "git_change_request-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "59f2b1462dbae99540faba5138438b2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27763,
      "upload_time": "2021-06-04T17:46:41",
      "upload_time_iso_8601": "2021-06-04T17:46:41.232006Z",
      "url": "https://files.pythonhosted.org/packages/0a/e7/0dca7cff554cc08c23577a0052dac8c49f058afe3d77e53c5a1917a0ec14/git_change_request-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}