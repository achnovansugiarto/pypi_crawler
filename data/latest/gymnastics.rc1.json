{
  "info": {
    "author": "Jack Turner",
    "author_email": "jackwilliamturner@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![gymnastics](figures/capybara.png)\n\n<p align=\"center\">\n  <!-- license -->\n  <a href=\"https://tldrlegal.com/license/apache-license-2.0-%28apache-2.0%29\">\n      <img src=\"https://img.shields.io/github/license/jack-willturner/gymNAStics\" alt=\"License\" height=\"20\">\n  </a>\n  <!-- CI status -->\n  <a href=\"\">\n    <img src=\"https://img.shields.io/github/workflow/status/jack-willturner/gymNAStics/CI\" alt=\"CI status\" height=\"20\">\n  </a>\n  <!-- Code analysis -->\n  <img src=\"https://img.shields.io/lgtm/grade/python/github/jack-willturner/gymNAStics\" alt=\"Code analysis\" height=\"20\">\n  <!-- Getting started colab -->\n  <a href=\"\">\n      <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Colab\" height=\"20\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <i>A \"gym\" style toolkit for building lightweight Neural Architecture Search systems. I know, the name is awful. </i>\n</p>\n\n## Installation \n\n```bash\npip install gymnastics\n```\n\nIf you want to use NAS-Bench-101, follow the instructions [here](https://github.com/google-research/nasbench).\n\n\n## Overview\n\nOver the course of the final year of my PhD I worked a lot on Neural Architecture Search (NAS) and built a bunch of tooling to make my life easier. This is an effort to standardise the various features into a single framework and provide a \"gym\" style toolkit for comparing various algorithms.\n\nThe key use cases for this library are:\n- test out new predictors on various NAS benchmarks \n- visualise the cells/graphs of your architectures\n- add new operations to NAS spaces \n- add new backbones to NAS spaces\n\nThe framework revolves around three key classes:\n1. `Model` \n2. `Proxy`\n3. `SearchSpace`\n\n\n### Obligatory builder pattern README example\n\nUsing `gymnastics` we can very easily reconstruct NAS spaces (the goal being that it's easy to define new and exciting ones).\n\nFor example, here's how easy it is to redefine the NATS-Bench / NAS-Bench-201 search space:\n\n```python\nfrom gymnastics.searchspace import SearchSpace, CellSpace, Skeleton\nfrom gymnastics.searchspace.ops import Conv3x3, Conv1x1, AvgPool2d, Skip, Zeroize\n\nsearch_space = SearchSpace(\n    CellSpace(\n        ops=[Conv3x3, Conv1x1, AvgPool2d, Skip, Zeroize], num_nodes=4, num_edges=6\n    ),\n    Skeleton(\n        style=ResNetCIFAR,\n        num_blocks=[5, 5, 5],\n        channels_per_stage=[16, 32, 64],\n        strides_per_stage=[1, 2, 2],\n        block_expansion=1\n    ),\n)\n\n\n# create an accuracy predictor\nfrom gymnastics.proxies import NASWOT\nfrom gymnastics.datasets import CIFAR10Loader\n\nproxy = NASWOT()\ndataset = CIFAR10Loader(path=\"~/datasets/cifar10\", download=False)\n\nminibatch, _ = dataset.sample_minibatch()\n\nbest_score = 0.0\nbest_model = None\n\n# try out 10 random architectures and save the best one\nfor i in range(10):\n\n    model = search_space.sample_random_architecture()\n\n    y = model(minibatch)\n\n    score = proxy.score(model, minibatch)\n\n    if score > best_score:\n        best_score = score\n        best_model = model\n\nbest_model.show_picture()\n```\n\nWhich prints:\n\n![](figures/best_model.png)\n\nHave a look in `examples/` for more examples.\n\n### NAS-Benchmarks \n\nIf you have designed a new proxy for accuracy and want to test its performance, you can use the benchmarks available in `benchmarks/`.  \n\nThe interface to the benchmarks is exactly the same as the above example for `SearchSpace`.\n\nFor example, here we score networks from the NDS ResNet space using random input data:\n\n```python\nimport torch\nfrom gymnastics.benchmarks import NDSSearchSpace\nfrom gymnastics.proxies import Proxy, NASWOT\n\nsearch_space = NDSSearchSpace(\n    \"~/nds/data/ResNet.json\", searchspace=\"ResNet\"\n)\n\nproxy: Proxy = NASWOT()\nminibatch: torch.Tensor = torch.rand((10, 3, 32, 32))\n\nscores = []\n\nfor _ in range(10):\n    model = search_space.sample_random_architecture()\n    scores.append(proxy.score(model, minibatch))\n```\n\n## Additional supported operations\n\nIn addition to the standard NAS operations we include a few more exotic ones, all in various states of completion:\n\n| Op                  | Paper                                         | Notes                                                               |\n| ------------------- | --------------------------------------------- | ------------------------------------------------------------------- |\n| conv                | -                                             | params: kernel size                                                 |\n| gconv               | -                                             | + params: group                                                     |\n| depthwise separable | [pdf](https://arxiv.org/pdf/1610.02357v3.pdf) | + no extra params needed                                            |\n| mixconv             | [pdf](https://arxiv.org/pdf/1907.09595.pdf)   | + params: needs a list of kernel_sizes                              |\n| octaveconv          | [pdf](https://arxiv.org/pdf/1904.05049.pdf)   | Don't have a sensible way to include this as a single operation yet |\n| shift               | [pdf](https://arxiv.org/pdf/1711.08141.pdf)   | no params needed                                                    |\n| ViT                 | [pdf](https://arxiv.org/pdf/2010.11929.pdf)   |                                                                     |\n| Fused-MBConv        | [pdf](https://arxiv.org/pdf/2104.00298.pdf)   |                                                                     |\n| Lambda              | [pdf](https://arxiv.org/pdf/2102.08602.pdf)   |                                                                     |",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jack-willturner/gymnastics/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gymnastics",
    "package_url": "https://pypi.org/project/gymnastics/",
    "platform": "",
    "project_url": "https://pypi.org/project/gymnastics/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jack-willturner/gymnastics/issues",
      "Homepage": "https://github.com/jack-willturner/gymnastics/"
    },
    "release_url": "https://pypi.org/project/gymnastics/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A lightweight toolkit for neural architecture search experiments.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10825936,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5411df53546d0ed8b58acb317a0fb7278c9f18a5520b8f0008f8c523246afff",
          "md5": "5add39e0a5035339b8324f043d91ad09",
          "sha256": "020fc3c5b25a9af882791c6f77f2079e5fab81d2dc65fe54efa3397d3d63ee81"
        },
        "downloads": -1,
        "filename": "gymnastics-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5add39e0a5035339b8324f043d91ad09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 172402,
        "upload_time": "2021-07-05T12:26:09",
        "upload_time_iso_8601": "2021-07-05T12:26:09.733570Z",
        "url": "https://files.pythonhosted.org/packages/e5/41/1df53546d0ed8b58acb317a0fb7278c9f18a5520b8f0008f8c523246afff/gymnastics-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5411df53546d0ed8b58acb317a0fb7278c9f18a5520b8f0008f8c523246afff",
        "md5": "5add39e0a5035339b8324f043d91ad09",
        "sha256": "020fc3c5b25a9af882791c6f77f2079e5fab81d2dc65fe54efa3397d3d63ee81"
      },
      "downloads": -1,
      "filename": "gymnastics-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5add39e0a5035339b8324f043d91ad09",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 172402,
      "upload_time": "2021-07-05T12:26:09",
      "upload_time_iso_8601": "2021-07-05T12:26:09.733570Z",
      "url": "https://files.pythonhosted.org/packages/e5/41/1df53546d0ed8b58acb317a0fb7278c9f18a5520b8f0008f8c523246afff/gymnastics-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}