{
  "info": {
    "author": "sc-1123",
    "author_email": "2125587278@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\"><img src=\"https://github.com/sc-1123/ufdse/blob/master/logo.jpg\", width=\"355px\", height=\"461px\"></p>\n<h1 align=\"center\">Un Fin De Semana Especial</h1>  \n<p align=\"center\">Magnificent demos in python.</p>  \n  \n- [▶ before we start...](#1)  \n- [▶ walk through the indices](#2)  \n- [▶ ancient sorting algorithm](#3)  \n- [▶ Daily Prophet](#4)\n- [▶ code and the key of secrets](#5)\n- [▶ Iterating through the non-iterable!](#6)\n- [▶ while in for](#7)\n- [▶ mathmatican's special](#8)\n- [▶ very last end](#9)\n  \n<h2 id=\"1\">before we start...</h2>  \nWARNING:  \n  \nDon't!  \n  \nEver!  \n  \nDream!  \n  \nAbout!  \n  \nUsing!  \n  \nThese!  \n  \nCode!  \n  \nIn!  \n  \nWork!  \n  \n<h2 id=\"2\">walk through the indices</h2>  \nWe sometimes use these code to iterate through indices:  \n  \n```  \nfor x in range(len(iterable)):  \n    dosomething \n```  \n\nWell, why not use some wrappings?  \n  \n```  \nindices = lambda iterable: range(len(iterable)) \n  \nfor x in indices(iterable): \n    dosomething \n```  \n  \n<h2 id=\"3\">ancient sorting algorithm</h2>  \nAbacus is a really old thing for us.  \nWell, sometimes ancient gives us new ideas.  \n  \n```  \ndef abacus_sort(array: list):\n    col_sight = [0] * max(array)\n    row_sight = [0] * len(array)\n    for i in array:\n        for col in range(i):\n            col_sight[col] += 1\n    \n    for col in col_sight:\n        for row in range(col):\n            row_sight[row] += 1\n    \n    row_sight.reverse()\n    return row_sight\n```  \n  \nThis algorithm simulates an abacus. The integers are number of beads on each row.  \nIt sets the abacus as the array we put inside, then  \nflip it and make it stand on the ground. Now you see, the abacus has been sorted automatically!  \n  \n<h2 id=\"4\">Daily Prophet</h2>  \nIf you want to see what a list looks like when append a thing, or insert a thing, or pop a thing?  \n  \n```  \nclass Prophet:\n    @staticmethod\n    def see_append(array, item):\n        return array + item\n    \n    @staticmethod\n    def see_insert(array, idx, item):\n        return array[:idx] + [item] + array[idx + 1:]\n    \n    @staticmethod\n    def see_pop(array, idx):\n        return array[:idx] + array[idx + 1:]\n```  \n\nYou can use it as you imported a module named `Prophet`.  \n  \n<h2 id=\"5\">code and the key of secrets</h2>  \nIf you want to have a map that uses list or set as key, is it possible?  \n  \nYes!  \n  \n```\nclass AnykeyMap:\n    def __init__(self, mappings):\n        self.keys = ()\n        self.values = ()\n        for key, value in mappings:\n            self.keys += (key,)\n            self.values += (value,)\n    \n    def __getitem__(self, key):\n        return self.values(self.keys.index(key))\n    \n    def __setitem__(self, key, value):\n        idx = self.keys.index(key)\n        self.values = self.values[:idx] + (value,) + self.values[idx + 1:]\n    \n    def __delitem__(self, key):\n        idx = self.keys.index(key)\n        self.keys = self.keys[:idx] + self.keys[idx + 1:]\n        self.values = self.values[:idx] + self.values[idx + 1:]\n```  \n  \nYou can find something similar with the `Prophet` class. Unfortunately, for reducing the memory, we need to deal with tuples,  \nnot lists.  \n\n<h2 id=\"6\">Iterating through the non-iterable!</h2>  \nWhen you want to iterate through an integer by indices like lists and strings, how?  \n  \n```  \nclass IterableInt:\n    def __init__(self, integer):\n        self.integer = integer\n        self.string = str(integer)\n        self.curr = 0\n    \n    def __next__(self):\n        if self.curr >= len(self.string):\n            raise StopIteration\n        return_val = int(self.string[self.curr])\n        self.curr += 1\n        return return_val\n\n    def __iter__(self):\n        return self\n```  \n  \n<h2 id=\"7\">while in for</h2>\nIs it possible to implement a while loop by for loop?  \n  \nYes!  \n  \n```  \nclass While_loop:\n    def __init__(self, expr):\n        self.expr = expr\n    \n    def __next__(self):\n        if not eval(self.expr):\n            raise StopIteration\n        return\n\n    def __iter__(self):\n        return self\n```  \n  \nAnd a demo for the demo:  \n  \n```  \nfrom random import randint\n    i = 1\n    for _ in While_loop('i != 0'):\n        i = randint(0, 10)\n        print(i)\n```  \n  \nYou'll see these if run it for several times (may not identical, this is the result I got):  \n  \n```  \nfirst:\n7\n0\nsecond:\n1\n9\n0\nthird:\n3\n9\n3\n2\n1\n4\n0\n```  \n  \nreal magic!  \n  \n<h2 id=\"8\">mathmatican's special</h2>  \nHow to get a line's expression by two dots on it?  \n  \n```  \ndef line_expr(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    m = (y2 - y1) / (x2 - x1)\n    b = y2 - m * x2\n    return lambda x: m * x + b\n```  \n  \nBut I thought it will be long...  \n  \n<h2 id=\"9\">very last end</h2>\nWell, if you're a nut and you do want to use those code, you don't need to copy.  \n  \nUse pip or original install command to make it!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sc-1123/ufdse",
    "keywords": "demo,tools",
    "license": "",
    "maintainer": "sc-1123",
    "maintainer_email": "2125587278@qq.com",
    "name": "ufdse",
    "package_url": "https://pypi.org/project/ufdse/",
    "platform": "any",
    "project_url": "https://pypi.org/project/ufdse/",
    "project_urls": {
      "Homepage": "https://github.com/sc-1123/ufdse"
    },
    "release_url": "https://pypi.org/project/ufdse/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Magnificent demos in Python.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6554019,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77fcf80d8d40f2ec4b7163dd6cb0c34fc416abd4f30d54092f31d6d1e74172f4",
          "md5": "d9b5d4d5100147043e3a0a21c8536808",
          "sha256": "2ef5749b3fdbde9c5a16ce27390602069bc4cdf42fac1471f174a9bb540f3d32"
        },
        "downloads": -1,
        "filename": "ufdse-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d9b5d4d5100147043e3a0a21c8536808",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2000,
        "upload_time": "2020-02-01T10:46:53",
        "upload_time_iso_8601": "2020-02-01T10:46:53.903964Z",
        "url": "https://files.pythonhosted.org/packages/77/fc/f80d8d40f2ec4b7163dd6cb0c34fc416abd4f30d54092f31d6d1e74172f4/ufdse-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0582b63a636466b655576c7406ea973709a59e074ede7ec497b058de5a1a3a6",
          "md5": "0c3476def71223c1679df6256d92a794",
          "sha256": "bec0695493113b457a6d65e0526a4d888951751352d9fd77d4d05921d77149c8"
        },
        "downloads": -1,
        "filename": "ufdse-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0c3476def71223c1679df6256d92a794",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5430,
        "upload_time": "2020-02-01T11:32:31",
        "upload_time_iso_8601": "2020-02-01T11:32:31.675584Z",
        "url": "https://files.pythonhosted.org/packages/e0/58/2b63a636466b655576c7406ea973709a59e074ede7ec497b058de5a1a3a6/ufdse-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e36f36da4cb648398626ed1bf4738c846bf5db196cae3ba44b844b5f71914dc8",
          "md5": "c901d8b6da793daf2c38a0073adbc287",
          "sha256": "876125b54daf1b691e216a853422e3722b1f3bb9a2b611ce569001bc28190bef"
        },
        "downloads": -1,
        "filename": "ufdse-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c901d8b6da793daf2c38a0073adbc287",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5453,
        "upload_time": "2020-02-01T11:42:52",
        "upload_time_iso_8601": "2020-02-01T11:42:52.133813Z",
        "url": "https://files.pythonhosted.org/packages/e3/6f/36da4cb648398626ed1bf4738c846bf5db196cae3ba44b844b5f71914dc8/ufdse-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e36f36da4cb648398626ed1bf4738c846bf5db196cae3ba44b844b5f71914dc8",
        "md5": "c901d8b6da793daf2c38a0073adbc287",
        "sha256": "876125b54daf1b691e216a853422e3722b1f3bb9a2b611ce569001bc28190bef"
      },
      "downloads": -1,
      "filename": "ufdse-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c901d8b6da793daf2c38a0073adbc287",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5453,
      "upload_time": "2020-02-01T11:42:52",
      "upload_time_iso_8601": "2020-02-01T11:42:52.133813Z",
      "url": "https://files.pythonhosted.org/packages/e3/6f/36da4cb648398626ed1bf4738c846bf5db196cae3ba44b844b5f71914dc8/ufdse-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}