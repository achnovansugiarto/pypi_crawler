{
  "info": {
    "author": "Steve Schmerler",
    "author_email": "git@elcorto.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "unfish -- correct fisheye distortions in images using OpenCV\r\n\r\nabout\r\n-----\r\nThis is basically a packaged and polished version of the OpenCV tutorial_ (see\r\nalso hack_) with a command line interface. It shows how to correct lens\r\ndistortions in images using OpenCV, based on chessboard calibration images\r\ntaken with the same camera.\r\n\r\nIn my case, my mobile phone camera introduces a radial distortion (inverse\r\nfisheye effect), hence the name.\r\n\r\nHere is an example of a distorted and corrected image.\r\n\r\n.. image:: examples/fish.jpg\r\n   :width: 40%\r\n\r\n.. image:: examples/unfish.jpg\r\n   :width: 40%\r\n\r\nThe script ``bin/unfish`` does all this and a little more::\r\n\r\n    usage:\r\n        unfish prep [-f <fraction>] (-p <pattern-size> <files>...)\r\n        unfish calib [-r <max-rms> -f <fraction>] (-p <pattern-size> <files>...)\r\n        unfish apply [-k <keep-path-levels>] <files>...\r\n\r\n    commands:\r\n        prep   optional preparation run, create rms_db.json\r\n        calib  calibration run, calculate and write camera matrix and camera model\r\n               coeffs using chessboard calibration images to ./unfish_data\r\n        apply  apply correction model to images, images are written to\r\n               ./corrected_images\r\n\r\n    options:\r\n        -p <pattern-size>, --pattern-size <pattern-size>  size of the chessboard\r\n                (number of corners) in the calibration images, e.g. \"9x6\"\r\n        -f <fraction>, --fraction <fraction>  fraction by which calibration files\r\n                have been scaled down (see bin/resize.sh)\r\n        -r <max-rms>, --max-rms <max-rms>  in calibration, use only files with\r\n                rms reprojection error less than <max-rms>, uses rms_db.json\r\n                written by \"prep\"\r\n        -k <keep-path-levels>  keep that many path levels from <files>, e.g.\r\n                files = /a/b/c/file1,/a/b/c/file2, and -k2, then store\r\n                ./corrected_images/a/b/fileX instead of ./corrected_images/fileX  [default: 0]\r\n\r\nIn addition to the tutorial_, we added things like the ability to calculate the\r\nRMS reprojection error per calibration image (``unfish prep``), in order to get\r\na feeling for the quality of the calibration per image.\r\n\r\nworkflow\r\n--------\r\n\r\nFirst, you print a chessboard and take a bunch of calibration images with the\r\naffected camera, like this one:\r\n\r\n.. image:: examples/calib_pattern.jpg\r\n   :width: 40%\r\n\r\nNext, a calibration run will calculate correction parameters (camera matrix and\r\nlens model coefficients, written to ``./unfish_data/``). Finally, you apply the\r\ncorrection to all affected images. Corrected images are written to\r\n``./corrected_images``.\r\n\r\nWe found that it is a very good idea to scale down the chessboard calibration\r\nimages first. That makes the calibration part *a lot* faster (else the code\r\nwhich searches for chessboard corners will run forever).\r\n\r\nHere is what you need to do, using a 9x6 chessboard.\r\n\r\n::\r\n\r\n    $ ./bin/resize.sh 0.2 chess_pics/orig chess_pics/small\r\n    $ unfish calib -f 0.2 -p 9x6 chess_pics/small/*\r\n    $ unfish apply affected_pics/orig/*\r\n\r\ntips & tricks\r\n-------------\r\n\r\nchessboard\r\n    You can grab a 7x7 chessboard image from the `OpenCV repo <chessboard_>`_,\r\n    or a 9x6 from `older documentation <chessboard_old_>`_. Remember: NxM are\r\n    the number of *corners*. It's hard to say how many calibration images you\r\n    need to take. We used around 100, but found that 5-10 good images have\r\n    basically the same effect. Also, make sure that the paper with the printed\r\n    chessboard is completely flat when you take photos.\r\n\r\n``<max-rms>``\r\n    We found that excluding calibration images with a high per-image RMS\r\n    reprojection error (``unfish calib -r <max-rms> ...``) doesn't actually\r\n    improve the overall calibration, not sure why yet.\r\n\r\n.. _tutorial: http://docs.opencv.org/3.3.0/dc/dbb/tutorial_py_calibration.html\r\n.. _hack: https://hackaday.io/project/12384-autofan-automated-control-of-air-flow/log/41862-correcting-for-lens-distortions\r\n.. _chessboard: https://github.com/opencv/opencv/blob/master/samples/data/chessboard.png\r\n.. _chessboard_old: http://docs.opencv.org/2.4/_downloads/pattern.png\r\n\r\ninstall\r\n-------\r\nTo let pip install all deps for you::\r\n\r\n    $ git clone ...\r\n    $ pip3 install -e .\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/elcorto/unfish",
    "keywords": "camera fisheye opencv",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unfish",
    "package_url": "https://pypi.org/project/unfish/",
    "platform": null,
    "project_url": "https://pypi.org/project/unfish/",
    "project_urls": {
      "Homepage": "https://github.com/elcorto/unfish"
    },
    "release_url": "https://pypi.org/project/unfish/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "correct fisheye distortions in images using OpenCV",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14278905,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf164a5d044d917cda167f7bf092f8ace8a8e0d2c0673eb3b72bc47e4d70ee40",
          "md5": "fee06acd82984d2d14a18e79f5f6a195",
          "sha256": "b5cab423be62094c8db0f1bed410a68495affa5e26f428027082aa87cab11d7b"
        },
        "downloads": -1,
        "filename": "unfish-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fee06acd82984d2d14a18e79f5f6a195",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9154,
        "upload_time": "2022-06-29T00:27:09",
        "upload_time_iso_8601": "2022-06-29T00:27:09.456642Z",
        "url": "https://files.pythonhosted.org/packages/bf/16/4a5d044d917cda167f7bf092f8ace8a8e0d2c0673eb3b72bc47e4d70ee40/unfish-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf164a5d044d917cda167f7bf092f8ace8a8e0d2c0673eb3b72bc47e4d70ee40",
        "md5": "fee06acd82984d2d14a18e79f5f6a195",
        "sha256": "b5cab423be62094c8db0f1bed410a68495affa5e26f428027082aa87cab11d7b"
      },
      "downloads": -1,
      "filename": "unfish-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fee06acd82984d2d14a18e79f5f6a195",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9154,
      "upload_time": "2022-06-29T00:27:09",
      "upload_time_iso_8601": "2022-06-29T00:27:09.456642Z",
      "url": "https://files.pythonhosted.org/packages/bf/16/4a5d044d917cda167f7bf092f8ace8a8e0d2c0673eb3b72bc47e4d70ee40/unfish-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}