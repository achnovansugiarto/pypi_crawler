{
  "info": {
    "author": "Yoichi Hirose",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# NAS-HPO-Bench-II API\n\n\n\n## Overview\n\n**NAS-HPO-Bench-II** is the first benchmark dataset for joint optimization of CNN and training HPs.\n\nIt helps\n\n* **a fair and low-cost evaluation/comparison** of joint optimization (NAS+HPO) methods\n* **a detailed analysis** of the relationship between architecture/training HPs and performances\n\nOur experimental analysis supports **the importance of joint optimization**.\nPlease see [our paper](http://www.acml-conf.org/2021/conference/accepted-papers/452/) for details.\n\nThis repo provides **API** for NAS-HPO-Bench-II to make benchmarking easy.\nYou can **query our data when evaluating models** in the search process of AutoML methods **instead of training the models at a high cost**.\n\n<img src=\"imgs/overview.png\" width=800px></img>\n\nIf you use the dataset, please cite:\n\n```\n@InProceedings{hirose2021bench,\n  title={{NAS-HPO-Bench-II}: A Benchmark Dataset on Joint Optimization of Convolutional Neural Network Architecture and Training Hyperparameters},\n  author={Hirose, Yoichi and Yoshinari, Nozomu and Shirakawa,  Shinichi},\n  booktitle={Proceedings of the 13th Asian Conference on Machine Learning},\n  year={2021}\n}\n```\n\nThe code for training models is [here](https://github.com/yoichii/nashpobench2).\n\n## Dataset Overview\n\nThe total size of the search space is **192K**.\nThe dataset includes\n\n* the exact data of all the models in the search space for 12 epoch training\n* the surrogate data predicting accuracies after 200 epoch training\n\n### Architecture Search Space\n\nThe overall CNN architecture is constructed by **stacking cells** represented as a directed acyclic graph (DAG).\nEach edge in the graph indicates one of the four operations.\n\n* **3x3 convolution** (ReLU activation, 3x3 convolution with stride 1, then batch normalization)\n* **3x3 average pooling** with stride 1\n* **Skip**, which outputs the input tensor\n* **Zero**, which outputs the zero tensor with the same dimension as the input\n\nIt is based on [NAS-Bench-201](https://arxiv.org/abs/2001.00326) and the only difference is that we exclude the 1x1 convolution operation from the options.\n\n<img src=\"imgs/arch.png\" width=400px></img>\n\n### Training HP Search Space\n\nThe combination of **eight initial learning rates** and **six batch sizes** are used.\n\n| Hyperparameter | Options                                               |\n| -------------- | ----------------------------------------------------- |\n| Batch Size     | 16, 32, 64, 128, 256, 512                             |\n| Learning Rate  | 0.003125, 0.00625, 0.0125, 0.025, 0.05, 0.1, 0.2, 0.4 |\n\n\n\n## Installation\n\nRun\n\n```\npip install nashpobench2api\n```\n\n, and download the API dataset from [Google Drive](https://drive.google.com/drive/folders/1sxnBo5A6WXxt44WQG8f8WlYYicKd9g-h?usp=sharing) (93.7MB), then put the data in some directory (default: ./data).\nThis API supports python >= 3.6 (and no external library dependencies).\n\nIf you want to run the codes in [bench_algos](bench_algos), run `pip install -r requirements.txt`.\n\n\n\n## Getting Started\n\nCreate an API instance to get access to the dataset.\n\n```\nfrom nashpobench2api import NASHPOBench2API as API\napi = API('/path/to/dataset')\n```\n\nYou can get 12-epoch valid accuracy (%) and train+valid training cost (sec.) of the specified configuration.\n\n```\nacc, cost = api.query_by_key(\n\tcellcode='0|10|210',\n\tbatch_size=256,\n\tlr=0.1 )\n```\n\nHere, `cellcode` represents one of the architectures in the search space. As shown in the figure below, the numbers in the cellcode mean the type of operations, and the position of the numbers shows the edge '(A) | (B)(C) | (D)(E)(F)'.\n\n<img src=\"imgs/cellcode.png\" width=800px></img>\n\nIn the querying process, the  `api` instance remembers and shows the log (what you have queried). \nYou can reduce the log if set `verbose=False` when initializing `api`.\n\nWhen the querying process has finished, you can get the test accuracy of the configuration with the best valid accuracy in the queried configurations.\n\n```\nresults = api.get_results()\n```\n\n`results` is a dictionary with the keys below.\n\n| Key              | Explanation                                                  |\n| ---------------- | ------------------------------------------------------------ |\n| acc_trans        | a transition of valid  accuracies `api` have queried         |\n| key_trans        | a transition of keys (=cellcode, lr, batch_size) `api` have queried |\n| best_acc_trans   | a transition of the best valid accuracies (%) `api` have queried |\n| best_key_trans   | a transition of the best keys (=cellcode, lr, batch_size)  `api` have queried |\n| total_cost_trans | a transition of train+valid costs (sec.)                     |\n| final_accs       | 12-epoch and 200-epoch test accuracies (%) of the key with the best valid accuracy `api` have queried |\n\nYou can reset what `api` have remebered, which is useful when multiple runs.\n\n```\napi.reset_log_data()\n```\n\nThe examples of benchmarking codes are in the [bench_algos](./bench_algos) directory.\nEspecially, `random_search.py` is the simplest code and easy to understand (the core part is `random_search()`).\n\n## Work in Progress\n\n* Upload the dataset as DataFrame for visualization/analysis.\n* Upload codes for a surrogate model.\n* Upload the trained models.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yoichii/nashpobench2api",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nashpobench2api",
    "package_url": "https://pypi.org/project/nashpobench2api/",
    "platform": "",
    "project_url": "https://pypi.org/project/nashpobench2api/",
    "project_urls": {
      "Homepage": "https://github.com/yoichii/nashpobench2api"
    },
    "release_url": "https://pypi.org/project/nashpobench2api/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "API for NAS-HPO-Bench-II.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11794642,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5939b23400ff4fc8dd75cc08878a7f3cde001edff2303d6de270a7a7780de782",
          "md5": "9b59d22900354e2f2b7b342a315a1d63",
          "sha256": "088b5da20b2c34e9448dd2895cf7c518278748ed8dd5fdabe3a3df3c96822c4e"
        },
        "downloads": -1,
        "filename": "nashpobench2api-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b59d22900354e2f2b7b342a315a1d63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7585,
        "upload_time": "2021-10-21T17:57:46",
        "upload_time_iso_8601": "2021-10-21T17:57:46.369069Z",
        "url": "https://files.pythonhosted.org/packages/59/39/b23400ff4fc8dd75cc08878a7f3cde001edff2303d6de270a7a7780de782/nashpobench2api-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5939b23400ff4fc8dd75cc08878a7f3cde001edff2303d6de270a7a7780de782",
        "md5": "9b59d22900354e2f2b7b342a315a1d63",
        "sha256": "088b5da20b2c34e9448dd2895cf7c518278748ed8dd5fdabe3a3df3c96822c4e"
      },
      "downloads": -1,
      "filename": "nashpobench2api-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b59d22900354e2f2b7b342a315a1d63",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7585,
      "upload_time": "2021-10-21T17:57:46",
      "upload_time_iso_8601": "2021-10-21T17:57:46.369069Z",
      "url": "https://files.pythonhosted.org/packages/59/39/b23400ff4fc8dd75cc08878a7f3cde001edff2303d6de270a7a7780de782/nashpobench2api-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}