{
  "info": {
    "author": "Marek Narozniak",
    "author_email": "marek.yggdrasil@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Security :: Cryptography",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "[![Build Status](https://travis-ci.com/grinventions/secp256k1-zkp-mw.svg?branch=main)](https://travis-ci.com/grinventions/secp256k1-zkp-mw)\n\n# secp256k1-zkp-mw\n\nThis is an early stage version of Python CFFI wrapper of the [MW fork of secp256k1-zkp](https://github.com/mimblewimble/secp256k1-zkp). It is very much needed to develop the [mimblewimble-py](https://github.com/grinventions/mimblewimble-py). Similar way as it was done with [rust-secp256k1-zkp](https://github.com/mimblewimble/rust-secp256k1-zkp). It is also inspired and partially based on [secp256k1-py](https://github.com/rustyrussell/secp256k1-py). All of the code used here is under the MIT license and there is no license conflict.\n\nFor now only few methods are correctly wrapped. My attempts of wrapping more of them results with plenty of C compile errors which I don't always understand so any help is appreciated. Feel free to fork and PR or send me messages with some advices!\n\n## Installation\n\nThe module will automatically download the tarball containing [MW fork of secp256k1-zkp](https://github.com/mimblewimble/secp256k1-zkp) at the commit that is supported and tested in this release.\n\n```sh\npip install secp256k1-zkp-mw\n```\n\nand you're good to go!\n\nIf you're installing this module on Windows you might need to temporarily change your `TEMP` environmental variable to something with a short path, like `C:\\temp`, and create that folder before running the above command. This is done to workaround a limitation with the Visual Studio C/C++ compiler not being able to use files with long path names. You can revert the change to your `TEMP` environmental variable after the module is installed.\n\n## Development\n\nLocally, you may install this this module manually at arbitrary height of the [MW fork of secp256k1-zkp](https://github.com/mimblewimble/secp256k1-zkp) using submodule.\n\n```sh\ngit clone https://github.com/grinventions/secp256k1-zkp-mw.git\ncd secp256k1-zkp-mw\ngit submodule init\ngit submodule update\npip install .\n```\n\n## Try it!\n\nCreating and destroying context\n\n```python\nfrom secp256k1_zkp_mw import *\n\nprint('Running secp256k1_context_create(SECP256K1_CONTEXT_NONE)')\nctx = secp256k1_context_create(SECP256K1_CONTEXT_NONE)\n\nprint('...and it returned ctx')\nprint(ctx)\n\nprint('Running secp256k1_context_destroy(ctx)')\nres = secp256k1_context_destroy(ctx)\n```\n\nit will print\n\n```\nRunning secp256k1_context_create(SECP256K1_CONTEXT_NONE)\n...and it returned ctx\n<cdata 'struct secp256k1_context_struct *' 0x561c4da348e0>\nRunning secp256k1_context_destroy(ctx)\n```\n\n## Exports\n\n### Index\n\n[SECP256K1_FLAGS_TYPE_MASK](#definitions)\n\n[SECP256K1_FLAGS_TYPE_CONTEXT](#definitions)\n\n[SECP256K1_FLAGS_TYPE_COMPRESSION](#definitions)\n\n[SECP256K1_FLAGS_BIT_CONTEXT_VERIFY](#definitions)\n\n[SECP256K1_FLAGS_BIT_CONTEXT_SIGN](#definitions)\n\n[SECP256K1_FLAGS_BIT_COMPRESSION](#definitions)\n\n[SECP256K1_CONTEXT_VERIFY](#definitions)\n\n[SECP256K1_CONTEXT_SIGN](#definitions)\n\n[SECP256K1_CONTEXT_NONE](#definitions)\n\n[SECP256K1_EC_COMPRESSED](#definitions)\n\n[SECP256K1_EC_UNCOMPRESSED](#definitions)\n\n[SECP256K1_TAG_PUBKEY_EVEN](#definitions)\n\n[SECP256K1_TAG_PUBKEY_ODD](#definitions)\n\n[SECP256K1_TAG_PUBKEY_UNCOMPRESSED](#definitions)\n\n[SECP256K1_TAG_PUBKEY_HYBRID_EVEN](#definitions)\n\n[SECP256K1_TAG_PUBKEY_HYBRID_ODD](#definitions)\n\n[SECP256K1_BULLETPROOF_MAX_DEPTH](#definitions)\n\n[SECP256K1_BULLETPROOF_MAX_PROOF](#definitions)\n\n[SECP256K1_SURJECTIONPROOF_MAX_N_INPUTS](#definitions)\n\n[SECP256K1_SURJECTIONPROOF_SERIALIZATION_BYTES](#definitions)\n\n[SECP256K1_SURJECTIONPROOF_SERIALIZATION_BYTES_MAX](#definitions)\n\n[SECP256K1_WHITELIST_MAX_N_KEYS](#definitions)\n\n[secp256k1_context_no_precomp](#constants)\n\n[secp256k1_nonce_function_rfc6979](#constants)\n\n[secp256k1_nonce_function_default](#constants)\n\n[secp256k1_generator_h](#constants)\n\n[secp256k1_generator_const_g](#constants)\n\n[secp256k1_generator_const_h](#constants)\n\n[secp256k1_context_create](#secp256k1_context_create)\n\n[secp256k1_context_clone](#secp256k1_context_clone)\n\n[secp256k1_context_destroy](#secp256k1_context_destroy)\n\n[secp256k1_context_set_illegal_callback](#secp256k1_context_set_illegal_callback)\n\n[secp256k1_context_set_error_callback](#secp256k1_context_set_error_callback)\n\n[secp256k1_scratch_space_create](#secp256k1_scratch_space_create)\n\n[secp256k1_scratch_space_destroy](#secp256k1_scratch_space_destroy)\n\n[secp256k1_ec_pubkey_parse](#secp256k1_ec_pubkey_parse)\n\n[secp256k1_ec_pubkey_serialize](#secp256k1_ec_pubkey_serialize)\n\n[secp256k1_ecdsa_signature_parse_compact](#secp256k1_ecdsa_signature_parse_compact)\n\n[secp256k1_ecdsa_signature_parse_der](#secp256k1_ecdsa_signature_parse_der)\n\n[secp256k1_ecdsa_signature_serialize_der](#secp256k1_ecdsa_signature_serialize_der)\n\n[secp256k1_ecdsa_signature_serialize_compact](#secp256k1_ecdsa_signature_serialize_compact)\n\n[secp256k1_ecdsa_verify](#secp256k1_ecdsa_verify)\n\n[secp256k1_ecdsa_signature_normalize](#secp256k1_ecdsa_signature_normalize)\n\n[secp256k1_ecdsa_sign](#secp256k1_ecdsa_sign)\n\n[secp256k1_ec_seckey_verify](#secp256k1_ec_seckey_verify)\n\n[secp256k1_ec_pubkey_create](#secp256k1_ec_pubkey_create)\n\n[secp256k1_ec_privkey_negate](#secp256k1_ec_privkey_negate)\n\n[secp256k1_ec_pubkey_negate](#secp256k1_ec_pubkey_negate)\n\n[secp256k1_ec_privkey_tweak_add](#secp256k1_ec_privkey_tweak_add)\n\n[secp256k1_ec_pubkey_tweak_add](#secp256k1_ec_pubkey_tweak_add)\n\n[secp256k1_ec_privkey_tweak_mul](#secp256k1_ec_privkey_tweak_mul)\n\n[secp256k1_ec_pubkey_tweak_mul](#secp256k1_ec_pubkey_tweak_mul)\n\n[secp256k1_context_randomize](#secp256k1_context_randomize)\n\n[secp256k1_ec_pubkey_combine](#secp256k1_ec_pubkey_combine)\n\n[secp256k1_ec_privkey_tweak_inv](#secp256k1_ec_privkey_tweak_inv)\n\n[secp256k1_ec_privkey_tweak_neg](#secp256k1_ec_privkey_tweak_neg)\n\n[secp256k1_aggsig_context_create](#secp256k1_aggsig_context_create)\n\n[secp256k1_aggsig_context_destroy](#secp256k1_aggsig_context_destroy)\n\n[secp256k1_aggsig_generate_nonce](#secp256k1_aggsig_generate_nonce)\n\n[secp256k1_aggsig_export_secnonce_single](#secp256k1_aggsig_export_secnonce_single)\n\n[secp256k1_aggsig_sign_single](#secp256k1_aggsig_sign_single)\n\n[secp256k1_aggsig_partial_sign](#secp256k1_aggsig_partial_sign)\n\n[secp256k1_aggsig_combine_signatures](#secp256k1_aggsig_combine_signatures)\n\n[secp256k1_aggsig_add_signatures_single](#secp256k1_aggsig_add_signatures_single)\n\n[secp256k1_aggsig_verify_single](#secp256k1_aggsig_verify_single)\n\n[secp256k1_aggsig_verify](#secp256k1_aggsig_verify)\n\n[secp256k1_aggsig_build_scratch_and_verify](#secp256k1_aggsig_build_scratch_and_verify)\n\n[secp256k1_bulletproof_generators_create](#secp256k1_bulletproof_generators_create)\n\n[secp256k1_bulletproof_generators_destroy](#secp256k1_bulletproof_generators_destroy)\n\n[secp256k1_bulletproof_rangeproof_verify](#secp256k1_bulletproof_rangeproof_verify)\n\n[secp256k1_bulletproof_rangeproof_verify_multi](#secp256k1_bulletproof_rangeproof_verify_multi)\n\n[secp256k1_bulletproof_rangeproof_rewind](#secp256k1_bulletproof_rangeproof_rewind)\n\n[secp256k1_bulletproof_rangeproof_prove](#secp256k1_bulletproof_rangeproof_prove)\n\n[secp256k1_pedersen_commitment_parse](#secp256k1_pedersen_commitment_parse)\n\n[secp256k1_pedersen_commitment_serialize](#secp256k1_pedersen_commitment_serialize)\n\n[secp256k1_pedersen_commit](#secp256k1_pedersen_commit)\n\n[secp256k1_pedersen_blind_commit](#secp256k1_pedersen_blind_commit)\n\n[secp256k1_pedersen_blind_sum](#secp256k1_pedersen_blind_sum)\n\n[secp256k1_pedersen_commit_sum](#secp256k1_pedersen_commit_sum)\n\n[secp256k1_pedersen_verify_tally](#secp256k1_pedersen_verify_tally)\n\n[secp256k1_pedersen_blind_generator_blind_sum](#secp256k1_pedersen_blind_generator_blind_sum)\n\n[secp256k1_blind_switch](#secp256k1_blind_switch)\n\n[secp256k1_pedersen_commitment_to_pubkey](#secp256k1_pedersen_commitment_to_pubkey)\n\n[secp256k1_pubkey_to_pedersen_commitment](#secp256k1_pubkey_to_pedersen_commitment)\n\n[secp256k1_ecdh](#secp256k1_ecdh)\n\n[secp256k1_generator_parse](#secp256k1_generator_parse)\n\n[secp256k1_generator_serialize](#secp256k1_generator_serialize)\n\n[secp256k1_generator_generate](#secp256k1_generator_generate)\n\n[secp256k1_generator_generate_blinded](#secp256k1_generator_generate_blinded)\n\n[secp256k1_context_preallocated_size](#secp256k1_context_preallocated_size)\n\n[secp256k1_context_preallocated_create](#secp256k1_context_preallocated_create)\n\n[secp256k1_context_preallocated_clone_size](#secp256k1_context_preallocated_clone_size)\n\n[secp256k1_context_preallocated_clone](#secp256k1_context_preallocated_clone)\n\n[secp256k1_context_preallocated_destroy](#secp256k1_context_preallocated_destroy)\n\n[secp256k1_rangeproof_verify](#secp256k1_rangeproof_verify)\n\n[secp256k1_rangeproof_rewind](#secp256k1_rangeproof_rewind)\n\n[secp256k1_rangeproof_sign](#secp256k1_rangeproof_sign)\n\n[secp256k1_rangeproof_info](#secp256k1_rangeproof_info)\n\n[secp256k1_ecdsa_recoverable_signature_parse_compact](#secp256k1_ecdsa_recoverable_signature_parse_compact)\n\n[secp256k1_ecdsa_recoverable_signature_convert](#secp256k1_ecdsa_recoverable_signature_convert)\n\n[secp256k1_ecdsa_recoverable_signature_serialize_compact](#secp256k1_ecdsa_recoverable_signature_serialize_compact)\n\n[secp256k1_ecdsa_sign_recoverable](#secp256k1_ecdsa_sign_recoverable)\n\n[secp256k1_ecdsa_recover](#secp256k1_ecdsa_recover)\n\n[secp256k1_schnorrsig_serialize](#secp256k1_schnorrsig_serialize)\n\n[secp256k1_schnorrsig_parse](#secp256k1_schnorrsig_parse)\n\n[secp256k1_schnorrsig_sign](#secp256k1_schnorrsig_sign)\n\n[secp256k1_schnorrsig_verify](#secp256k1_schnorrsig_verify)\n\n[secp256k1_schnorrsig_verify_batch](#secp256k1_schnorrsig_verify_batch)\n\n[secp256k1_surjectionproof_parse](#secp256k1_surjectionproof_parse)\n\n[secp256k1_surjectionproof_serialize](#secp256k1_surjectionproof_serialize)\n\n[secp256k1_surjectionproof_n_total_inputs](#secp256k1_surjectionproof_n_total_inputs)\n\n[secp256k1_surjectionproof_n_used_inputs](#secp256k1_surjectionproof_n_used_inputs)\n\n[secp256k1_surjectionproof_serialized_size](#secp256k1_surjectionproof_serialized_size)\n\n[secp256k1_surjectionproof_initialize](#secp256k1_surjectionproof_initialize)\n\n[secp256k1_surjectionproof_generate](#secp256k1_surjectionproof_generate)\n\n[secp256k1_surjectionproof_verify](#secp256k1_surjectionproof_verify)\n\n[secp256k1_whitelist_signature_parse](#secp256k1_whitelist_signature_parse)\n\n[secp256k1_whitelist_signature_n_keys](#secp256k1_whitelist_signature_n_keys)\n\n[secp256k1_whitelist_signature_serialize](#secp256k1_whitelist_signature_serialize)\n\n[secp256k1_whitelist_sign](#secp256k1_whitelist_sign)\n\n[secp256k1_whitelist_verify](#secp256k1_whitelist_verify)\n\n### Definitions\n\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `SECP256K1_FLAGS_TYPE_MASK` | `int` | Used internally by other definitions. Should not be used directly. |\n| `SECP256K1_FLAGS_TYPE_CONTEXT` | `int` | Used internally by other definitions. Should not be used directly. |\n| `SECP256K1_FLAGS_TYPE_COMPRESSION` | `int` | Used internally by other definitions. Should not be used directly. |\n| `SECP256K1_FLAGS_BIT_CONTEXT_VERIFY` | `int` | Used internally by other definitions. Should not be used directly. |\n| `SECP256K1_FLAGS_BIT_CONTEXT_SIGN` | `int` | Used internally by other definitions. Should not be used directly. |\n| `SECP256K1_FLAGS_BIT_COMPRESSION` | `int` | Used internally by other definitions. Should not be used directly. |\n| `SECP256K1_CONTEXT_VERIFY` | `int` | Used as a bit-field in the `flags` argument for the `secp256k1_context_create`, `secp256k1_context_preallocated_size`, and `secp256k1_context_preallocated_create` functions to indicate that the context will be used for verifying. |\n| `SECP256K1_CONTEXT_SIGN` | `int` | Used as a bit-field in the `flags` argument for the `secp256k1_context_create`, `secp256k1_context_preallocated_size`, and `secp256k1_context_preallocated_create` functions to indicate that the context will be used for signing. |\n| `SECP256K1_CONTEXT_NONE` | `int` | Used as a bit-field in the `flags` argument for the `secp256k1_context_create`, `secp256k1_context_preallocated_size`, and `secp256k1_context_preallocated_create` functions to indicate that the context won't be used for verifying or signing. |\n| `SECP256K1_EC_COMPRESSED` | `int` | Used as a bit-field in the `secp256k1_ec_pubkey_serialize` function to indicate that the public key should be compressed. |\n| `SECP256K1_EC_UNCOMPRESSED` | `int` | Used as a bit-field in the `secp256k1_ec_pubkey_serialize` function to indicate that the public key should be uncompressed. |\n| `SECP256K1_TAG_PUBKEY_EVEN` | `int` | Prefix byte for serialized even, compressed public keys. |\n| `SECP256K1_TAG_PUBKEY_ODD` | `int` | Prefix byte for serialized odd, compressed public keys. |\n| `SECP256K1_TAG_PUBKEY_UNCOMPRESSED` | `int` | Prefix byte for serialized uncompressed public keys. |\n| `SECP256K1_TAG_PUBKEY_HYBRID_EVEN` | `int` | Prefix byte for serialized even, hybrid public keys. |\n| `SECP256K1_TAG_PUBKEY_HYBRID_ODD` | `int` | Prefix byte for serialized odd, hybrid public keys. |\n| `SECP256K1_BULLETPROOF_MAX_DEPTH` | `int` | Maximum depth of a Bulletproof. |\n| `SECP256K1_BULLETPROOF_MAX_PROOF` | `int` | Maximum size in bytes of a Bulletproof. |\n| `SECP256K1_SURJECTIONPROOF_MAX_N_INPUTS` | `int` | Maximum number of inputs in a surjection proof. |\n| `SECP256K1_SURJECTIONPROOF_SERIALIZATION_BYTES` | `function` | Function that provides the number of bytes required to serialized a surjection proof given the number of inputs and the number of used inputs. |\n| `SECP256K1_SURJECTIONPROOF_SERIALIZATION_BYTES_MAX` | `int` | Maximum size in bytes of a serialized surjection proof. |\n| `SECP256K1_WHITELIST_MAX_N_KEYS` | `int` | Maximum number of keys in a whitelist proof. |\n\n### Constants\n\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `secp256k1_context_no_precomp` | `<cdata 'struct secp256k1_context *'>` | A context with no precomputed tables that can be used when a context won't be verifying or signing. |\n| `secp256k1_nonce_function_rfc6979` | `<cdata 'secp256k1_nonce_function'>` | A nonce generation function that implements RFC6979. An optional 32 byte of extra entropy can be provided to this function as nonce data. |\n| `secp256k1_nonce_function_default` | `<cdata 'secp256k1_nonce_function'>` | The default nonce generation function. |\n| `secp256k1_generator_h` | `<cdata 'struct secp256k1_generator *'>` | Standard secp256k1 generator h. |\n| `secp256k1_generator_const_g` | `<cdata 'struct secp256k1_generator *'>` | Standard secp256k1 generator g. |\n| `secp256k1_generator_const_h` | `<cdata 'struct secp256k1_generator *'>` | Standard secp256k1 generator h. |\n\n### Functions\n\nAll of the following functions will raise the following exceptions for the described reasons:\n* `TypeError`: An argument doesn't have the correct type.\n* `OverflowError`: An `int` argument is negative or too large.\n* `AssertionError`: Something internally failed in an unexpected way.\n\n#### secp256k1_context_create\n\n> Returns a context that can perform the features indicated by the provided flags.\n\n**Definition:** `secp256k1_context_create(flags)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `flags` | `int` | Bitwise combination of `SECP256K1_CONTEXT_VERIFY`, `SECP256K1_CONTEXT_SIGN`, and/or `SECP256K1_CONTEXT_NONE`. |\n\n**Return on success:** `<cdata 'struct secp256k1_context *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_context_clone\n\n> Returns a copy of a provided context.\n\n**Definition:** `secp256k1_context_clone(ctx)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to copy. |\n\n**Return on success:** `<cdata 'struct secp256k1_context *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_context_destroy\n\n> Deallocates memory used by a provided context or does nothing if the provided context is `None`.\n\n**Definition:** `secp256k1_context_destroy(ctx)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` or `None` | The context to destroy. |\n\n**Return on success:** N/A\n\n**Return on failure:** N/A\n\n#### secp256k1_context_set_illegal_callback\n\n> Sets a callback function to call when an illegal argument is passed to an internal API call, or restores the default handler if the callback function is `None`.\n\n**Definition:** `secp256k1_context_set_illegal_callback(ctx, fun, data)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `fun` | `<ctype 'void(*)(char *, void *)'>` or `None` | The callback function to use. |\n| `data` | `<cdata 'void *'>` or `None` | Data to pass to the callback function. |\n\n**Return on success:** N/A\n\n**Return on failure:** N/A\n\n#### secp256k1_context_set_error_callback\n\n> Sets a callback function to call when an internal consistency check fails, or restores the default handler if the callback function is `None`.\n\n**Definition:** `secp256k1_context_set_error_callback(ctx, fun, data)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `fun` | `<ctype 'void(*)(char *, void *)'> or `None` | The callback function to use. |\n| `data` | `<cdata 'void *'>` or `None` | Data to pass to the callback function. |\n\n**Return on success:** N/A\n\n**Return on failure:** N/A\n\n#### secp256k1_scratch_space_create\n\n> Returns a scratch space that is at most the provided max size.\n\n**Definition:** `secp256k1_scratch_space_create(ctx, max_size)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `max_size` | `int` | The maximum amount of memory to allocate. |\n\n**Return on success:** `<cdata 'struct secp256k1_scratch_space *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_scratch_space_destroy\n\n> Deallocates memory used by a provided scratch space or does nothing if the scratch space is `None`.\n\n**Definition:** `secp256k1_scratch_space_destroy(scratch)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `scratch` | `<cdata 'struct secp256k1_scratch_space *'>` or `None` | The scratch space to destroy. |\n\n**Return on success:** N/A\n\n**Return on failure:** N/A\n\n#### secp256k1_ec_pubkey_parse\n\n> Returns a public key if the provided input is a valid serialized public key.\n\n**Definition:** `secp256k1_ec_pubkey_parse(ctx, input)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `input` | `bytes` | The serialized public key to parse. |\n\n**Return on success:** `<cdata 'struct secp256k1_pubkey *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_pubkey_serialize\n\n> Returns the serialized version of a provided public key.\n\n**Definition:** `secp256k1_ec_pubkey_serialize(ctx, pubkey, flags)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `pubkey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key to serialize. |\n| `flags` | `int` | `SECP256K1_EC_COMPRESSED` or `SECP256K1_EC_UNCOMPRESSED` |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdsa_signature_parse_compact\n\n> Returns an ECDSA signature if the provided input is a valid serialized ECDSA compact signature.\n\n**Definition:** `secp256k1_ecdsa_signature_parse_compact(ctx, input64)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `input64` | `bytes` | The 64 byte serialized ECDSA compact signature to parse. |\n\n**Return on success:** `<cdata 'struct secp256k1_ecdsa_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdsa_signature_parse_der\n\n> Returns an ECDSA signature if the provided input is a valid serialized ECDSA DER signature.\n\n**Definition:** `secp256k1_ecdsa_signature_parse_der(ctx, input)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `input` | `bytes` | The serialized ECDSA DER signature to parse. |\n\n**Return on success:** `<cdata 'struct secp256k1_ecdsa_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdsa_signature_serialize_der\n\n> Returns the serialized DER version of a provided ECDSA signature.\n\n**Definition:** `secp256k1_ecdsa_signature_serialize_der(ctx, sig)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig` | `<cdata 'struct secp256k1_ecdsa_signature *'>` | The ECDSA signature to serialize. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdsa_signature_serialize_compact\n\n> Returns the serialized compact version of a provided ECDSA signature.\n\n**Definition:** `secp256k1_ecdsa_signature_serialize_compact(ctx, sig)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig` | `<cdata 'struct secp256k1_ecdsa_signature *'>` | The ECDSA signature to serialize. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdsa_verify\n\n> Returns if the ECDSA signature is valid for the provided public key and message.\n\n**Definition:** `secp256k1_ecdsa_verify(ctx, sig, msg32, pubkey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig` | `<cdata 'struct secp256k1_ecdsa_signature *'>` | The ECDSA signature. |\n| `msg32` | `bytes` | The 32 byte message that was signed. |\n| `pubkey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key corresponding to the secret key that signed the message. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_ecdsa_signature_normalize\n\n> Returns the normalized version of the provided signature.\n\n**Definition:** `secp256k1_ecdsa_signature_normalize(ctx, sigin)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sigin` | `<cdata 'struct secp256k1_ecdsa_signature *'>` | The ECDSA signature to normalize. |\n\n**Return on success:** `<cdata 'struct secp256k1_ecdsa_signature *'>`\n\n**Return on failure:** N/A\n\n#### secp256k1_ecdsa_sign\n\n> Returns the ECDSA signature that signs a provided message with a provided secret key. A nonce function and nonce data can be provided to specify which nonce function to use.\n\n**Definition:** `secp256k1_ecdsa_sign(ctx, msg32, seckey, noncefp, ndata)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `msg32` | `bytes` | The 32 byte message to sign. |\n| `seckey` | `bytes` | The 32 byte secret key to sign the message with. |\n| `noncefp` | `<cdata 'secp256k1_nonce_function'>` or `None` | The nonce function to use. Default to `secp256k1_nonce_function_default` if `None` is provided. |\n| `ndata` | `bytes` or `None` | Data to use with the nonce function. |\n\n**Return on success:** `<cdata 'struct secp256k1_ecdsa_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_seckey_verify\n\n> Returns if a provided secret key is valid.\n\n**Definition:** `secp256k1_ec_seckey_verify(ctx, seckey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seckey` | `bytes` | The 32 byte secret key to verify. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_ec_pubkey_create\n\n> Returns the public key for a provided secret key.\n\n**Definition:** `secp256k1_ec_pubkey_create(ctx, seckey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seckey` | `bytes` | The 32 byte secret key to get the public key of. |\n\n**Return on success:** `<cdata 'struct secp256k1_pubkey *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_privkey_negate\n\n> Returns the negated version of a provided secret key. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided secret key.\n\n**Definition:** `secp256k1_ec_privkey_negate(ctx, seckey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seckey` | `bytes` | The 32 byte secret key to use. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_pubkey_negate\n\n> Returns the negated version of a provided public key. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided public key.\n\n**Definition:** `secp256k1_ec_pubkey_negate(ctx, pubkey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `pubkey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_pubkey *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_privkey_tweak_add\n\n> Returns the result of tweak adding with a provided secret key. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided secret key.\n\n**Definition:** `secp256k1_ec_privkey_tweak_add(ctx, seckey, tweak)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seckey` | `bytes` | The 32 byte secret key to use. |\n| `tweak` | `bytes` | The 32 byte tweak to use. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_pubkey_tweak_add\n\n> Returns the result of tweak adding with a provided public key. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided public key.\n\n**Definition:** `secp256k1_ec_pubkey_tweak_add(ctx, pubkey, tweak)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seckey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key to use. |\n| `tweak` | `bytes` | The 32 byte tweak to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_pubkey *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_privkey_tweak_mul\n\n> Returns the result of tweak multiplying with to a provided secret key. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided secret key.\n\n**Definition:** `secp256k1_ec_privkey_tweak_mul(ctx, seckey, tweak)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seckey` | `bytes` | The 32 byte secret key to use. |\n| `tweak` | `bytes` | The 32 byte tweak to use. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_pubkey_tweak_mul\n\n> Returns the result of tweak multiplying with a provided public key. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided public key.\n\n**Definition:** `secp256k1_ec_pubkey_tweak_mul(ctx, pubkey, tweak)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seckey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key to use. |\n| `tweak` | `bytes` | The 32 byte tweak to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_pubkey *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_context_randomize\n\n> Returns the the randomized version of a provided context using an optional seed. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided context.\n\n**Definition:** `secp256k1_context_randomize(ctx, seed32)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seed32` | `bytes` or `None` | The 32 byte seed to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_context *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_pubkey_combine\n\n> Returns the the result of combining a list if public keys.\n\n**Definition:** `secp256k1_ec_pubkey_combine(ctx, ins)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `ins` | `list<<cdata 'struct secp256k1_pubkey *'>>` | The list of public keys to combine. |\n\n**Return on success:** `<cdata 'struct secp256k1_pubkey *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_privkey_tweak_inv\n\n> Returns the result of tweak inverting a provided secret key. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided secret key.\n\n**Definition:** `secp256k1_ec_privkey_tweak_inv(ctx, seckey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seckey` | `bytes` | The 32 byte secret key to use. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_ec_privkey_tweak_neg\n\n> Returns the result of tweak negating a provided secret key. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided secret key.\n\n**Definition:** `secp256k1_ec_privkey_tweak_neg(ctx, seckey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seckey` | `bytes` | The 32 byte secret key to use. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_aggsig_context_create\n\n> Returns an aggsig context.\n\n**Definition:** `secp256k1_aggsig_context_create(ctx, pubkeys, seed)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `pubkeys` | `list<<cdata 'struct secp256k1_pubkey *'>>` | The list of public keys that the context can aggregate the signatures for. |\n| `seed` | `bytes` | The 32 byte seed used for nonce-generating. |\n\n**Return on success:** `<cdata 'struct secp256k1_aggsig_context *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_aggsig_context_destroy\n\n> Deallocates memory used by a provided aggsig context or does nothing if the provided aggsig context is `None`.\n\n**Definition:** `secp256k1_aggsig_context_destroy(aggctx)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `aggctx` | `<cdata 'struct secp256k1_aggsig_context *'>` or `None` | The aggsig context to destroy. |\n\n**Return on success:** N/A\n\n**Return on failure:** N/A\n\n#### secp256k1_aggsig_generate_nonce\n\n> Returns if a nonce pair was successfully generated for the aggregate signature.\n\n**Definition:** `secp256k1_aggsig_generate_nonce(ctx, aggctx, index)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `aggctx` | `<cdata 'struct secp256k1_aggsig_context *'>` | The aggsig context to use. |\n| `index` | `int` | The index of the signature to generate the nonce for. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_aggsig_export_secnonce_single\n\n> Returns a secret nonce.\n\n**Definition:** `secp256k1_aggsig_export_secnonce_single(ctx, seed)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seed` | `bytes` | The 32 byte random seed. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_aggsig_sign_single\n\n> Returns a single-signer signature.\n\n**Definition:** `secp256k1_aggsig_sign_single(ctx, msg32, seckey32, secnonce32, extra32, pubnonce_for_e, pubnonce_total, pubkey_for_e, seed)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `msg32` | `bytes` | The 32 byte message to sign. |\n| `seckey32` | `bytes` | The 32 byte secret key to sign the message with. |\n| `secnonce32` | `bytes` or `None` | The 32 byte secret nonce to use. A nonce will be generated if `None` is used. |\n| `extra32` | `bytes` or `None` | 32 bytes that will be added to s if not `None`. |\n| `pubnonce_for_e` | `<cdata 'struct secp256k1_pubkey *'>` or `None` | This will be encoded in e instead of the derived if not `None`. |\n| `pubnonce_total` | `<cdata 'struct secp256k1_pubkey *'>` or `None` | Allows this signature to be included in combined signature in all cases by negating secnonce32 if the this value isn't `None` and has Jacobi symbol -1. |\n| `pubkey_for_e` | `<cdata 'struct secp256k1_pubkey *'>` or `None` | This will be encoded in e if not `None`. |\n| `seed` | `bytes` | The 32 byte seed used for nonce-generating. |\n\n**Return on success:** `<cdata 'struct secp256k1_ecdsa_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_aggsig_partial_sign\n\n> Returns a signature part in an aggregated signature.\n\n**Definition:** `secp256k1_aggsig_partial_sign(ctx, aggctx, msg32, seckey32, index)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `aggctx` | `<cdata 'struct secp256k1_aggsig_context *'>` | The aggsig context to use. |\n| `msg32` | `bytes` | The 32 byte message to sign. |\n| `seckey32` | `bytes` | The 32 byte secret key to sign the message with. |\n| `index` | `int` | The index of the signature in the aggregate signature. |\n\n**Return on success:** `<cdata 'struct secp256k1_aggsig_partial_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_aggsig_combine_signatures\n\n> Returns aggregated signature created from multiple signature parts.\n\n**Definition:** `secp256k1_aggsig_combine_signatures(ctx, aggctx, partial)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `aggctx` | `<cdata 'struct secp256k1_aggsig_context *'>` | The aggsig context to use. |\n| `partial` | `list<<cdata 'struct secp256k1_aggsig_partial_signature *'>>` | List of partial signatures to aggregate. |\n\n**Return on success:** `<cdata 'struct secp256k1_ecdsa_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_aggsig_add_signatures_single\n\n> Returns the result of adding two signatures into a single signature.\n\n**Definition:** `secp256k1_aggsig_add_signatures_single(ctx, sigs, pubnonce_total)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sigs` | `list<<cdata 'struct secp256k1_ecdsa_signature *'>>` | List of signatures to add. |\n| `pubnonce_total` | `<cdata 'struct secp256k1_pubkey *'>` | The total of all public nonces. |\n\n**Return on success:** `<cdata 'struct secp256k1_ecdsa_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_aggsig_verify_single\n\n> Returns if a single-signer signature verifies a provided message.\n\n**Definition:** `secp256k1_aggsig_verify_single(ctx, sig64, msg32, pubnonce, pubkey, pubkey_total, extra_pubkey, is_partial)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig64` | `<cdata 'struct secp256k1_ecdsa_signature *'>` | The signature to verify the message. |\n| `msg32` | `bytes` | The 32 byte message to verify. |\n| `pubnonce` | `<cdata 'struct secp256k1_pubkey *'>` or `None` | This value overrides the public nonce used to calculate e if not `None`. |\n| `pubkey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key of the secret key that signed the message. |\n| `pubkey_total` | `<cdata 'struct secp256k1_pubkey *'>` or `None` | This value is encoded in e if not `None`. |\n| `extra_pubkey` | `<cdata 'struct secp256k1_pubkey *'>` or `None` | This value value is subtracted from sG if not `None`. |\n| `is_partial` | `bool` | Allows verifying partial signatures that may have had their secret nonces negated. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_aggsig_verify\n\n> Returns if an aggregated signature verifies a provided message.\n\n**Definition:** `secp256k1_aggsig_verify(ctx, scratch, sig64, msg32, pubkeys)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `scratch` | `<cdata 'struct secp256k1_scratch_space *'>` | Scratch space to use. |\n| `sig64` | `<cdata 'struct secp256k1_ecdsa_signature *'>` | The signature to verify the message. |\n| `msg32` | `bytes` | The 32 byte message to verify. |\n| `pubkeys` | `list<<cdata 'struct secp256k1_pubkey *'>>` | List of public keys of the secret keys that signed the message. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_aggsig_build_scratch_and_verify\n\n> Returns if an aggregated signature verifies a provided message without needing a provided scratch space.\n\n**Definition:** `secp256k1_aggsig_build_scratch_and_verify(ctx, sig64, msg32, pubkeys)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig64` | `<cdata 'struct secp256k1_ecdsa_signature *'>` | The signature to verify the message. |\n| `msg32` | `bytes` | The 32 byte message to verify. |\n| `pubkeys` | `list<<cdata 'struct secp256k1_pubkey *'>>` | List of public keys of the secret keys that signed the message. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_bulletproof_generators_create\n\n> Returns a Bulletproof generators with the provided number of generators.\n\n**Definition:** `secp256k1_bulletproof_generators_create(ctx, blinding_gen, n)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `blinding_gen` | `<cdata 'secp256k1_generator *'>` | The generator that the blinding factors will be multiplied by. |\n| `n` | `int` | The number of generators to produce. |\n\n**Return on success:** `<cdata 'struct secp256k1_bulletproof_generators *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_bulletproof_generators_destroy\n\n> Deallocates memory used by a provided Bulletproof generators or does nothing if the Bulletproof generators is `None`.\n\n**Definition:** `secp256k1_bulletproof_generators_destroy(ctx, gen)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `gen` | `<cdata 'struct secp256k1_bulletproof_generators *'>` or `None` | The Bulletproof generators to destroy. |\n\n**Return on success:** N/A\n\n**Return on failure:** N/A\n\n#### secp256k1_bulletproof_rangeproof_verify\n\n> Returns if a provided Bulletproof is valid.\n\n**Definition:** `secp256k1_bulletproof_rangeproof_verify(ctx, scratch, gens, proof, min_value, commit, nbits, value_gen, extra_commit)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `scratch` | `<cdata 'struct secp256k1_scratch_space *'>` | The scratch space to use. |\n| `gens` | `<cdata 'struct secp256k1_bulletproof_generators *'>` | The Bulletproof generators set to use. |\n| `proof` | `bytes` | The Bulletproof to verify. |\n| `min_value` | `list<int>` or `None` | The list of minimum values to prove the range is above. Defaults to all zeros if `None`.  |\n| `commit` | `list<<cdata 'struct secp256k1_pedersen_commitment *'>>` | The list of Pedersen commitments that the Bulletproof is over. |\n| `nbits` | `int` | The number of bits proven by the Bulletproof. |\n| `value_gen` | `<cdata 'struct secp256k1_generator *'>` | The generator multiplied by the value in the Pedersen commitments. |\n| `extra_commit` | `bytes` or `None` | The optional additional data committed to by the Bulletproof. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_bulletproof_rangeproof_verify_multi\n\n> Returns if all provided Bulletproofs are valid.\n\n**Definition:** `secp256k1_bulletproof_rangeproof_verify_multi(ctx, scratch, gens, proof, min_value, commit, nbits, value_gen, extra_commit)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `scratch` | `<cdata 'struct secp256k1_scratch_space *'>` | The scratch space to use. |\n| `gens` | `<cdata 'struct secp256k1_bulletproof_generators *'>` | The Bulletproof generators set to use. |\n| `proof` | `list<bytes>` | The list of Bulletproofs to verify. |\n| `min_value` | `list<list<int>>` or `None` | The list of list of minimum values to prove each range is above. Defaults to all zeros if `None`.  |\n| `commit` | `list<list<<cdata 'struct secp256k1_pedersen_commitment *'>>>` | The list of list of Pedersen commitments that each Bulletproof is over. |\n| `nbits` | `int` | The number of bits proven by each Bulletproof. |\n| `value_gen` | `list<<cdata 'struct secp256k1_generator *'>>` | The list of generators multiplied by the value in each Pedersen commitments. |\n| `extra_commit` | `list<bytes>` or `None` | The list of optional additional data committed to by each Bulletproof. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_bulletproof_rangeproof_rewind\n\n> Returns the value, blinding factor, and message from a provided Bulletproof.\n\n**Definition:** `secp256k1_bulletproof_rangeproof_rewind(ctx, proof, min_value, commit, value_gen, nonce, extra_commit)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `proof` | `bytes` | The proof to get the information for. |\n| `min_value` | `int` | The minimum value that the Bulletproof ranges over.  |\n| `commit` | `<cdata 'struct secp256k1_pedersen_commitment *'>` | The Pedersen commitment that the Bulletproof is over. |\n| `value_gen` | `<cdata 'struct secp256k1_generator *'>` | The generator multiplied by the value in the Pedersen commitment. |\n| `nonce` | `bytes` | The 32 byte random seed used to derive blinding factors. |\n| `extra_commit` | `bytes` or `None` | The optional additional data committed to by the Bulletproof. |\n\n**Return on success:** `tuple<int, bytes, bytes>`\n\n**Return on failure:** `None`\n\n#### secp256k1_bulletproof_rangeproof_prove\n\n> Returns a Bulletproof that proves the provided committed values.\n\n**Definition:** `secp256k1_bulletproof_rangeproof_prove(ctx, scratch, gens, tau_x, t_one, t_two, value, min_value, blind, commits, value_gen, nbits, nonce, private_nonce, extra_commit, message)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `scratch` | `<cdata 'struct secp256k1_scratch_space *'>` | The scratch space to use. |\n| `gens` | `<cdata 'struct secp256k1_bulletproof_generators *'>` | The Bulletproof generators set to use. |\n| `tau_x` | `bytes` or `None` | The 32 byte tau x to use for a multi-party proof. |\n| `t_one` | `<cdata 'struct secp256k1_pubkey *'>` or `None` | The t one to use for a multi-party proof. |\n| `t_two` | `<cdata 'struct secp256k1_pubkey *'>` or `None` | The t two to use for a multi-party proof. |\n| `value` | `list<int>` | The list of values to commit. |\n| `min_value` | `list<int>` or `None` | The list of minimum values to prove the range is above. Defaults to all zeros if `None`.  |\n| `blind` | `list<bytes>` | The list of 32 byte blinding factors for the Pedersen commitments. |\n| `commits` | `list<<cdata 'struct secp256k1_pedersen_commitment *'>>` or `None` | The list of Pedersen commitments to use for a multi-party proof. |\n| `value_gen` | `<cdata 'struct secp256k1_generator *'>` | The generator to multiply by the value in the Pedersen commitments. |\n| `nbits` | `int` | The number of bits proven by the Bulletproof. |\n| `nonce` | `bytes` | The 32 byte random seed used to derive blinding factors. |\n| `private_nonce` | `bytes` or `None` | The 32 byte random seed used to derive private blinding factors for a multi-party proof. |\n| `extra_commit` | `bytes` or `None` | The optional additional data committed to by the Bulletproof. |\n| `message` | `bytes` or `None` | The optional 20 byte message that can be recovered by rewinding the Bulletproof. Defaults to all zeros if `None`. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_pedersen_commitment_parse\n\n> Returns a commit if the provided input is a valid serialized commit.\n\n**Definition:** `secp256k1_pedersen_commitment_parse(ctx, input)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `input` | `bytes` | The serialized commit to parse. |\n\n**Return on success:** `<cdata 'struct secp256k1_pedersen_commitment *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_pedersen_commitment_serialize\n\n> Returns the serialized version of a provided commit.\n\n**Definition:** `secp256k1_pedersen_commitment_serialize(ctx, commit)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `commit` | `<cdata 'struct secp256k1_pedersen_commitment *'>` | The commit to serialize. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_pedersen_commit\n\n> Returns a commit for the provided number value.\n\n**Definition:** `secp256k1_pedersen_commit(ctx, blind, value, value_gen, blind_gen)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `blind` | `bytes` | The 32 byte blinding factor to use. |\n| `value` | `int` | The value to get the commit for. |\n| `value_gen` | `<cdata 'struct secp256k1_generator *'>` | The value generator to use. |\n| `blind_gen` | `<cdata 'struct secp256k1_generator *'>` | The blind generator to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_pedersen_commitment *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_pedersen_blind_commit\n\n> Returns a commit for the provided blinding factor value.\n\n**Definition:** `secp256k1_pedersen_blind_commit(ctx, blind, value, value_gen, blind_gen)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `blind` | `bytes` | The 32 byte blinding factor to use. |\n| `value` | `bytes` | The 32 byte value to get the commit for. |\n| `value_gen` | `<cdata 'struct secp256k1_generator *'>` | The value generator to use. |\n| `blind_gen` | `<cdata 'struct secp256k1_generator *'>` | The blind generator to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_pedersen_commitment *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_pedersen_blind_sum\n\n> Returns the sum of provided blinding factors.\n\n**Definition:** `secp256k1_pedersen_blind_sum(ctx, blinds, npositive)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `blinds` | `list<bytes>` | The list of 32 byte blinding factor to use. |\n| `npositive` | `int` | How many of the blinding factors should be treated as being positive. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_pedersen_commit_sum\n\n> Returns the sum of provided positive and negative commits.\n\n**Definition:** `secp256k1_pedersen_commit_sum(ctx, commits, ncommits)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `commits` | `list<<cdata 'struct secp256k1_pedersen_commitment *'>>` | The list of positive commits to use. |\n| `ncommits` | `list<<cdata 'struct secp256k1_pedersen_commitment *'>>` | The list of negative commits to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_pedersen_commitment *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_pedersen_verify_tally\n\n> Returns if the provided positive and negative commits sum to zero.\n\n**Definition:** `secp256k1_pedersen_verify_tally(ctx, pos, neg)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `pos` | `list<<cdata 'struct secp256k1_pedersen_commitment *'>>` | The list of positive commits to use. |\n| `neg` | `list<<cdata 'struct secp256k1_pedersen_commitment *'>>` | The list of negative commits to use. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_pedersen_blind_generator_blind_sum\n\n> Returns the final blinding factor value needed to get the total sum to zero. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided blinding factor.\n\n**Definition:** `secp256k1_pedersen_blind_generator_blind_sum(ctx, value, generator_blind, blinding_factor, n_inputs)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `value` | `list<int>` | The list of values to use. |\n| `generator_blind` | `list<bytes>` | The list of asset blinding factors to use. |\n| `blinding_factor` | `list<bytes>` | List of commitment blinding factors to use. |\n| `n_inputs` | `int`| The number of values that will be negated in the final sum. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_blind_switch\n\n> Returns the blinding factor used in the switch commit.\n\n**Definition:** `secp256k1_blind_switch(ctx, blind, value, value_gen, blind_gen, switch_pubkey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `blind` | `bytes` | The 32 byte blinding factor to use. |\n| `value` | `int` | The value to commit to. |\n| `value_gen` | `<cdata 'struct secp256k1_generator *'>` | The value generator to use. |\n| `blind_gen` | `<cdata 'struct secp256k1_generator *'>` | The blind generator to use. |\n| `switch_pubkey` | `<cdata 'struct secp256k1_pubkey *'>`| The public key to use. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_pedersen_commitment_to_pubkey\n\n> Returns the public key version of a provided commit.\n\n**Definition:** `secp256k1_pedersen_commitment_to_pubkey(ctx, commit)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `commit` | `<cdata 'struct secp256k1_pedersen_commitment *'>` | The commit to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_pubkey *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_pubkey_to_pedersen_commitment\n\n> Returns the commit version of a provided public key.\n\n**Definition:** `secp256k1_pubkey_to_pedersen_commitment(ctx, pubkey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `pubkey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_pedersen_commitment *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdh\n\n> Returns the EC Diffie-Hellman shared secret for the provided public key and private key.\n\n**Definition:** `secp256k1_ecdh(ctx, pubkey, privkey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `pubkey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key to use. |\n| `privkey` | `bytes` | The 32 byte secret key to use. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_generator_parse\n\n> Returns a generator if the provided input is a valid serialized generator.\n\n**Definition:** `secp256k1_generator_parse(ctx, input)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `input` | `bytes` | The serialized generator to parse. |\n\n**Return on success:** `<cdata 'struct secp256k1_generator *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_generator_serialize\n\n> Returns the serialized version of a provided generator.\n\n**Definition:** `secp256k1_generator_serialize(ctx, commit)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `commit` | `<cdata 'struct secp256k1_generator *'>` | The generator to serialize. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_generator_generate\n\n> Returns a generator created with a provided seed.\n\n**Definition:** `secp256k1_generator_generate(ctx, seed32)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `seed32` | `bytes` | The 32 byte seed to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_generator *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_generator_generate_blinded\n\n> Returns a blinded generator created with a provided key and blinding factor.\n\n**Definition:** `secp256k1_generator_generate_blinded(ctx, key32, blind32)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `key32` | `bytes` | The 32 byte key to use. |\n| `blind32` | `bytes` | The 32 byte blinding factor to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_generator *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_context_preallocated_size\n\n> Returns the size in bytes required to create the type of preallocated context indicated by the provided flags.\n\n**Definition:** `secp256k1_context_preallocated_size(flags)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `flags` | `int` | Bitwise combination of `SECP256K1_CONTEXT_VERIFY`, `SECP256K1_CONTEXT_SIGN`, and/or `SECP256K1_CONTEXT_NONE`. |\n\n**Return on success:** `int`\n\n**Return on failure:** N/A\n\n#### secp256k1_context_preallocated_create\n\n> Returns a context that uses the preallocated memory provided which can perform the features indicated by the provided flags.\n\n**Definition:** `secp256k1_context_preallocated_create(prealloc, flags)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `prealloc` | `<cdata 'void *'>` | The preallocated memory for the context to use. |\n| `flags` | `int` | Bitwise combination of `SECP256K1_CONTEXT_VERIFY`, `SECP256K1_CONTEXT_SIGN`, and/or `SECP256K1_CONTEXT_NONE`. |\n\n**Return on success:** `<cdata 'struct secp256k1_context *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_context_preallocated_clone_size\n\n> Returns the size in bytes required to create a preallocated context to clone a provided context.\n\n**Definition:** `secp256k1_context_preallocated_clone_size(ctx)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to get the preallocated size of. |\n\n**Return on success:** `int`\n\n**Return on failure:** N/A\n\n#### secp256k1_context_preallocated_clone\n\n> Returns a copy of a provided context that uses the preallocated memory provided.\n\n**Definition:** `secp256k1_context_preallocated_clone(ctx, prealloc)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to copy. |\n| `prealloc` | `<cdata 'void *'>` | The preallocated memory for the context to use. |\n\n**Return on success:** `<cdata 'struct secp256k1_context *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_context_preallocated_destroy\n\n> Destroys a provided preallocated context or does nothing if the provided preallocated context is `None`.\n\n**Definition:** `secp256k1_context_preallocated_destroy(ctx)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` or `None` | The preallocated context to destroy. |\n\n**Return on success:** N/A\n\n**Return on failure:** N/A\n\n#### secp256k1_rangeproof_verify\n\n> Returns the min and max values for a provided committed value if the provided rangeproof is valid for it.\n\n**Definition:** `secp256k1_rangeproof_verify(ctx, commit, proof, extra_commit, gen)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `commit` | `<cdata 'struct secp256k1_pedersen_commitment *'>` | The commit for the committed value. |\n| `proof` | `bytes` | The rangeproof to verify. |\n| `extra_commit` | `bytes` or `None` | The optional additional data covered in the rangeproof. |\n| `gen` | `<cdata 'struct secp256k1_generator *'>` | The additional generator. |\n\n**Return on success:** `tuple<int, int>`\n\n**Return on failure:** `None`\n\n#### secp256k1_rangeproof_rewind\n\n> Returns the blinding factor, value, message, min value, and max value for a provided rangeproof. The returned message's length isn't the actual length of the message, and this bug is inherent to libsecp256k1-zkp.\n\n**Definition:** `secp256k1_rangeproof_rewind(ctx, nonce, commit, proof, extra_commit, gen)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `nonce` | `bytes` | The 32 byte secret nonce used to create the rangeproof. |\n| `commit` | `<cdata 'struct secp256k1_pedersen_commitment *'>` | The commit for the committed value. |\n| `proof` | `bytes` | The rangeproof to get values for. |\n| `extra_commit` | `bytes` or `None` | The optional additional data covered in the rangeproof. |\n| `gen` | `<cdata 'struct secp256k1_generator *'>` | The additional generator. |\n\n**Return on success:** `tuple<bytes, int, bytes, int, int>`\n\n**Return on failure:** `None`\n\n#### secp256k1_rangeproof_sign\n\n> Returns a rangeproof that proves a committed value is within a range.\n\n**Definition:** `secp256k1_rangeproof_sign(ctx, min_value, commit, blind, nonce, exp, min_bits, value, message, extra_commit, gen)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `min_value` | `int` | The min value for the rangeproof to prove. |\n| `commit` | `<cdata 'struct secp256k1_pedersen_commitment *'>` | The commit for the committed value. |\n| `blind` | `bytes` | The 32 byte blinding factor used by the commit. |\n| `nonce` | `bytes` | The 32 byte secret nonce to use. |\n| `exp` | `int` | The exponent to use. |\n| `min_bits` | `int` | The number of bits of the value to keep private. (0 = auto/minimal, - 64). |\n| `value` | `int` | The committed value. |\n| `message` | `bytes` or `None` | The optional 4096 byte message to embed in the rangeproof. |\n| `extra_commit` | `bytes` or `None` | The optional additional data to cover in the rangeproof. |\n| `gen` | `<cdata 'struct secp256k1_generator *'>` | The additional generator. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_rangeproof_info\n\n> Returns the exponent, mantissa, min value, and max value for a provided rangeproof.\n\n**Definition:** `secp256k1_rangeproof_info(ctx, proof)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `proof` | `bytes` | The rangeproof to get info for. |\n\n**Return on success:** `tuple<int, int, int, int>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdsa_recoverable_signature_parse_compact\n\n> Returns a recoverable signature if the provided input is a valid serialized recoverable signature.\n\n**Definition:** `secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, input64, recid)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `input64` | `bytes` | The 64 byte serialized recoverable signature to parse. |\n| `recid` | `int` | The recovery ID. |\n\n**Return on success:** `<cdata 'struct secp256k1_ecdsa_recoverable_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdsa_recoverable_signature_convert\n\n> Returns the ECDSA signature version of a provided recoverable signature.\n\n**Definition:** `secp256k1_ecdsa_recoverable_signature_convert(ctx, sigin)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sigin` | `<cdata 'struct secp256k1_ecdsa_recoverable_signature *'>` | The recoverable signature to convert. |\n\n**Return on success:** `<cdata 'struct secp256k1_ecdsa_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdsa_recoverable_signature_serialize_compact\n\n> Returns the serialized version and recovery ID of a provided recoverable signature.\n\n**Definition:** `secp256k1_ecdsa_recoverable_signature_serialize_compact(ctx, sig)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig` | `<cdata 'struct secp256k1_ecdsa_recoverable_signature *'>` | The recoverable signature to serialize. |\n\n**Return on success:** `tuple<bytes, int>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdsa_sign_recoverable\n\n> Returns the recoverable signature that signs a provided message with a provided secret key. A nonce function and nonce data can be provided to specify which nonce function to use.\n\n**Definition:** `secp256k1_ecdsa_sign_recoverable(ctx, msg32, seckey, noncefp, ndata)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `msg32` | `bytes` | The 32 byte message to sign. |\n| `seckey` | `bytes` | The 32 byte secret key to sign the message with. |\n| `noncefp` | `<cdata 'secp256k1_nonce_function'>` or `None` | The nonce function to use. Default to `secp256k1_nonce_function_default` if `None` is provided. |\n| `ndata` | `bytes` or `None` | Data to use with the nonce function. |\n\n**Return on success:** `<cdata 'struct secp256k1_ecdsa_recoverable_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_ecdsa_recover\n\n> Returns a public key obtained from a provided recoverable signature and message.\n\n**Definition:** `secp256k1_ecdsa_recover(ctx, sig, msg32)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig` | `<cdata 'struct secp256k1_ecdsa_recoverable_signature *'>` | The recoverable signature to get the public key from. |\n| `msg32` | `bytes` | The 32 byte message to that was signed. |\n\n**Return on success:** `<cdata 'struct secp256k1_pubkey *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_schnorrsig_serialize\n\n> Returns the serialized version of a provided Schnorr signature.\n\n**Definition:** `secp256k1_schnorrsig_serialize(ctx, sig)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig` | `<cdata 'struct secp256k1_schnorrsig *'>` | The Schnorr signature to serialize. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_schnorrsig_parse\n\n> Returns a Schnorr signature if the provided input is a valid serialized Schnorr signature.\n\n**Definition:** `secp256k1_schnorrsig_parse(ctx, in64)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `in64` | `bytes` | The 64 byte serialized Schnorr signature to parse. |\n\n**Return on success:** `<cdata 'struct secp256k1_schnorrsig *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_schnorrsig_sign\n\n> Returns the Schnorr signature that signs a provided message with a provided secret key and if the nonce is negated. A nonce function and nonce data can be provided to specify which nonce function to use.\n\n**Definition:** `secp256k1_schnorrsig_sign(ctx, msg32, seckey, noncefp, ndata)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `msg32` | `bytes` | The 32 byte message to sign. |\n| `seckey` | `bytes` | The 32 byte secret key to sign the message with. |\n| `noncefp` | `<cdata 'secp256k1_nonce_function'>` or `None` | The nonce function to use. Default to `secp256k1_nonce_function_bipschnorr` if `None` is provided. |\n| `ndata` | `bytes` or `None` | Data to use with the nonce function. |\n\n**Return on success:** `tuple<<cdata 'struct secp256k1_schnorrsig *'>, bool>`\n\n**Return on failure:** `None`\n\n#### secp256k1_schnorrsig_verify\n\n> Returns if the Schnorr signature is valid for the provided public key and message.\n\n**Definition:** `secp256k1_schnorrsig_verify(ctx, sig, msg32, pubkey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig` | `<cdata 'struct secp256k1_schnorrsig *'>` | The Schnorr signature. |\n| `msg32` | `bytes` | The 32 byte message that was signed. |\n| `pubkey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key corresponding to the secret key that signed the message. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_schnorrsig_verify_batch\n\n> Returns if all the Schnorr signatures are valid for the provided public keys and messages.\n\n**Definition:** `secp256k1_schnorrsig_verify_batch(ctx, scratch, sig, msg32, pk)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `scratch` | `<cdata 'struct secp256k1_scratch_space *'>` | Scratch space to use. |\n| `sig` | `list<<cdata 'struct secp256k1_schnorrsig *'>>` | The Schnorr signatures. |\n| `msg32` | `list<bytes>` | The 32 byte messages that were signed. |\n| `pk` | `list<<cdata 'struct secp256k1_pubkey *'>>` | The public keys corresponding to the secret keys that signed the messages. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_surjectionproof_parse\n\n> Returns a surjection proof if the provided input is a valid serialized surjection proof.\n\n**Definition:** `secp256k1_surjectionproof_parse(ctx, input)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `input` | `bytes` | The serialized surjection proof to parse. |\n\n**Return on success:** `<cdata 'struct secp256k1_surjectionproof *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_surjectionproof_serialize\n\n> Returns the serialized version of a provided surjection proof.\n\n**Definition:** `secp256k1_surjectionproof_serialize(ctx, proof)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `proof` | `<cdata 'struct secp256k1_surjectionproof *'>` | The surjection proof to serialize. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_surjectionproof_n_total_inputs\n\n> Returns the number of total inputs for a provided surjection proof.\n\n**Definition:** `secp256k1_surjectionproof_n_total_inputs(ctx, proof)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `proof` | `<cdata 'struct secp256k1_surjectionproof *'>` | The surjection proof to get the number of total inputs for. |\n\n**Return on success:** `int`\n\n**Return on failure:** N/A\n\n#### secp256k1_surjectionproof_n_used_inputs\n\n> Returns the number of used inputs for a provided surjection proof.\n\n**Definition:** `secp256k1_surjectionproof_n_used_inputs(ctx, proof)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `proof` | `<cdata 'struct secp256k1_surjectionproof *'>` | The surjection proof to get the number of used inputs for. |\n\n**Return on success:** `int`\n\n**Return on failure:** N/A\n\n#### secp256k1_surjectionproof_serialized_size\n\n> Returns the size in bytes required to serialize a provided surjection proof.\n\n**Definition:** `secp256k1_surjectionproof_serialized_size(ctx, proof)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `proof` | `<cdata 'struct secp256k1_surjectionproof *'>` | The surjection proof to get the serialized size for. |\n\n**Return on success:** `int`\n\n**Return on failure:** N/A\n\n#### secp256k1_surjectionproof_initialize\n\n> Returns an initialized surjection proof and its input index.\n\n**Definition:** `secp256k1_surjectionproof_initialize(ctx, fixed_input_tags, n_input_tags_to_use, fixed_output_tag, n_max_iterations, random_seed32)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `fixed_input_tags` | `list<<cdata 'struct secp256k1_fixed_asset_tag *'>>` | The fixed input tags for all inputs. |\n| `n_input_tags_to_use` | `int` | The number of inputs to select randomly to put in the anonymity set. |\n| `fixed_output_tag` | `<cdata 'struct secp256k1_fixed_asset_tag *'>` | The fixed output tag. |\n| `n_max_iterations` | `int` | The max number of iterations to do before giving up. |\n| `random_seed32` | `bytes` | The 32 byte random seed to use for input selection. |\n\n**Return on success:** `tuple<<cdata 'struct secp256k1_surjectionproof *'>, int>`\n\n**Return on failure:** `None`\n\n#### secp256k1_surjectionproof_generate\n\n> Returns the generated version of a provided initialized surjection proof. This function differs from its libsecp256k1-zkp equivalent in that it doesn't modify the provided proof.\n\n**Definition:** `secp256k1_surjectionproof_generate(ctx, proof, ephemeral_input_tags, ephemeral_output_tag, input_index, input_blinding_key, output_blinding_key)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `proof` | `<cdata 'struct secp256k1_surjectionproof *'>` | The initialized surjection proof to use. |\n| `ephemeral_input_tags` | `list<<cdata 'struct secp256k1_generator *'>>` | The ephemeral asset tags for all inputs. |\n| `ephemeral_output_tag` | `<cdata 'struct secp256k1_generator *'>` | The ephemeral asset tag for the output. |\n| `input_index` | `int` | The index of the input that actually maps to the output. |\n| `input_blinding_key` | `bytes` | The 32 byte blinding key of the input. |\n| `output_blinding_key` | `bytes` | The 32 byte blinding key of the output. |\n\n**Return on success:** `<cdata 'struct secp256k1_surjectionproof *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_surjectionproof_verify\n\n> Returns if verifying a provided surjection proof was successful.\n\n**Definition:** `secp256k1_surjectionproof_verify(ctx, proof, ephemeral_input_tags, ephemeral_output_tag)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `proof` | `<cdata 'struct secp256k1_surjectionproof *'>` | The surjection proof to verify. |\n| `ephemeral_input_tags` | `list<<cdata 'struct secp256k1_generator *'>>` | The ephemeral asset tags for all inputs. |\n| `ephemeral_output_tag` | `<cdata 'struct secp256k1_generator *'>` | The ephemeral asset tag for the output. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n\n#### secp256k1_whitelist_signature_parse\n\n> Returns a whitelist signature if the provided input is a valid serialized whitelist signature.\n\n**Definition:** `secp256k1_whitelist_signature_parse(ctx, input)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `input` | `bytes` | The serialized whitelist signature to parse. |\n\n**Return on success:** `<cdata 'struct secp256k1_whitelist_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_whitelist_signature_n_keys\n\n> Returns the number of keys for a provided whitelist signature.\n\n**Definition:** `secp256k1_whitelist_signature_n_keys(sig)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig` | `<cdata 'struct secp256k1_whitelist_signature *'>` | The whitelist signature to get the number of keys for. |\n\n**Return on success:** `int`\n\n**Return on failure:** N/A\n\n#### secp256k1_whitelist_signature_serialize\n\n> Returns the serialized version of a provided whitelist signature.\n\n**Definition:** `secp256k1_whitelist_signature_serialize(ctx, sig)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `sig` | `<cdata 'struct secp256k1_whitelist_signature *'>` | The whitelist signature to serialize. |\n\n**Return on success:** `bytes`\n\n**Return on failure:** `None`\n\n#### secp256k1_whitelist_sign\n\n> Returns the whitelist signature that signs a provided public key with a provided secret key from a group. A nonce function and nonce data can be provided to specify which nonce function to use.\n\n**Definition:** `secp256k1_whitelist_sign(ctx, online_pubkeys, offline_pubkeys, sub_pubkey, online_seckey, summed_seckey, index, noncefp, noncedata)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `online_pubkeys` | `list<<cdata 'struct secp256k1_pubkey *'>>` | The list of online public keys. |\n| `offline_pubkeys` | `list<<cdata 'struct secp256k1_pubkey *'>>` | The list of offline public keys. |\n| `sub_pubkey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key to be whitelisted. |\n| `online_seckey` | `bytes` | The 32 byte online secret key to sign the public key with. |\n| `summed_seckey` | `bytes` | The 32 byte secret key to the sum of the whitelisted public key's secret key and the offline secret key. |\n| `index` | `int` | The index of the signer's key in the list of keys. |\n| `noncefp` | `<cdata 'secp256k1_nonce_function'>` or `None` | The nonce function to use. Default to `secp256k1_nonce_function_default` if `None` is provided. |\n| `noncedata` | `bytes` or `None` | Data to use with the nonce function. |\n\n**Return on success:** `<cdata 'struct secp256k1_whitelist_signature *'>`\n\n**Return on failure:** `None`\n\n#### secp256k1_whitelist_verify\n\n> Returns the whitelist signature verifies that a provided public key is whitelisted.\n\n**Definition:** `secp256k1_whitelist_verify(ctx, sig, online_pubkeys, offline_pubkeys, sub_pubkey)`\n\n**Parameters:**\n| Name           | Type | Description |\n|----------------|------|-------------|\n| `ctx` | `<cdata 'struct secp256k1_context *'>` | The context to use. |\n| `online_pubkeys` | `list<<cdata 'struct secp256k1_pubkey *'>>` | The list of online public keys. |\n| `offline_pubkeys` | `list<<cdata 'struct secp256k1_pubkey *'>>` | The list of offline public keys. |\n| `sub_pubkey` | `<cdata 'struct secp256k1_pubkey *'>` | The public key to verify. |\n\n**Return on success:** `bool`\n\n**Return on failure:** N/A\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grinventions/secp256k1-zkp-mw",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Nicolas Flamel",
    "maintainer_email": "nicolasflamel@mwcwallet.com",
    "name": "secp256k1-zkp-mw",
    "package_url": "https://pypi.org/project/secp256k1-zkp-mw/",
    "platform": null,
    "project_url": "https://pypi.org/project/secp256k1-zkp-mw/",
    "project_urls": {
      "Homepage": "https://github.com/grinventions/secp256k1-zkp-mw"
    },
    "release_url": "https://pypi.org/project/secp256k1-zkp-mw/0.4.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "FFI bindings to libsecp256k1-zkp for Mimblewimble protocol",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16415858,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03d863aaab6122b0e77a14971543311d3ed8d384a3baf1dca8a8e9228590b4b6",
          "md5": "7e8d35a4a2c932bf21fe28ac4edb7243",
          "sha256": "6f12384715f24d460313ee000c1cfa9471b5a0d75df90f6d15bad6e01d8a3bff"
        },
        "downloads": -1,
        "filename": "secp256k1-zkp-mw-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e8d35a4a2c932bf21fe28ac4edb7243",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53906,
        "upload_time": "2022-12-30T13:36:35",
        "upload_time_iso_8601": "2022-12-30T13:36:35.398659Z",
        "url": "https://files.pythonhosted.org/packages/03/d8/63aaab6122b0e77a14971543311d3ed8d384a3baf1dca8a8e9228590b4b6/secp256k1-zkp-mw-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcff9242b38b94932662cb60bb75b8c2d5a72ea136548cfc5d49b9c109998155",
          "md5": "541f88fd3728159b09d89ea6ce446912",
          "sha256": "2296cb2b57150ebfc370091120be21d108d7f51545155367889d7c127624e127"
        },
        "downloads": -1,
        "filename": "secp256k1-zkp-mw-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "541f88fd3728159b09d89ea6ce446912",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54174,
        "upload_time": "2023-01-06T14:15:14",
        "upload_time_iso_8601": "2023-01-06T14:15:14.113957Z",
        "url": "https://files.pythonhosted.org/packages/bc/ff/9242b38b94932662cb60bb75b8c2d5a72ea136548cfc5d49b9c109998155/secp256k1-zkp-mw-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8533436062e9ad5e6f29144cae01caa25541bacd0e2374c37dcbacf005592725",
          "md5": "1ddb6791744f9fd21fa0c2388dfc7a77",
          "sha256": "35a8503f045d481fc228a812f4f744fe948fac6f4f4fa7a90c0d522cafef21b5"
        },
        "downloads": -1,
        "filename": "secp256k1-zkp-mw-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ddb6791744f9fd21fa0c2388dfc7a77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54356,
        "upload_time": "2023-01-09T18:51:05",
        "upload_time_iso_8601": "2023-01-09T18:51:05.331467Z",
        "url": "https://files.pythonhosted.org/packages/85/33/436062e9ad5e6f29144cae01caa25541bacd0e2374c37dcbacf005592725/secp256k1-zkp-mw-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26bc90813eb87d53404cbd502482fe951a4587f1f5023fc4490efd230ab290f0",
          "md5": "06ea8cd6e75d54cf234b2fda4d44ef17",
          "sha256": "ee58087353b1a62479aefb6d965b78f2a025b3db14f1e74f217afc56e826676f"
        },
        "downloads": -1,
        "filename": "secp256k1-zkp-mw-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "06ea8cd6e75d54cf234b2fda4d44ef17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72714,
        "upload_time": "2023-01-13T09:50:02",
        "upload_time_iso_8601": "2023-01-13T09:50:02.475700Z",
        "url": "https://files.pythonhosted.org/packages/26/bc/90813eb87d53404cbd502482fe951a4587f1f5023fc4490efd230ab290f0/secp256k1-zkp-mw-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26bc90813eb87d53404cbd502482fe951a4587f1f5023fc4490efd230ab290f0",
        "md5": "06ea8cd6e75d54cf234b2fda4d44ef17",
        "sha256": "ee58087353b1a62479aefb6d965b78f2a025b3db14f1e74f217afc56e826676f"
      },
      "downloads": -1,
      "filename": "secp256k1-zkp-mw-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "06ea8cd6e75d54cf234b2fda4d44ef17",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 72714,
      "upload_time": "2023-01-13T09:50:02",
      "upload_time_iso_8601": "2023-01-13T09:50:02.475700Z",
      "url": "https://files.pythonhosted.org/packages/26/bc/90813eb87d53404cbd502482fe951a4587f1f5023fc4490efd230ab290f0/secp256k1-zkp-mw-0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}