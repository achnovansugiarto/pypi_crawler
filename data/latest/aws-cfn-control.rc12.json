{
  "info": {
    "author": "Mark Duffield",
    "author_email": "duff@amazon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# AWS CFN Control [![Build Status](https://api.travis-ci.org/awslabs/aws-cfn-control.png?branch=master)](https://travis-ci.org/awslabs/aws-cfn-control) [![PyPi Status](https://badge.fury.io/py/aws-cfn-control.png)](https://badge.fury.io/py/aws-cfn-control)\n\n\nAWS-CFN-Control provides a command line interface to quickly deploy and redeploy [AWS CloudFormation stacks](https://aws.amazon.com/cloudformation/). The `cfnctl` command provides the core functionality, with several other commands that will find AMI info, get stack status, build CloudFormation mappings, and other features. AWS-CFN-Control is very useful for CloudFormation templates that have parameters, and you want to create stacks with the same parameters in multiple regions, or you want to change just a few parameters values for a new stack.\n\n\n## License\n\nThis library is licensed under the Apache 2.0 License. \n\n## Prerequisites\n\nIt is assumed that you have an AWS account (preferably with admin privileges) and experience with CloudFormation. You will also need to be familiar with either [AWS Cloud Development Kit](https://aws.amazon.com/cdk/) (CDK) or writing your own CloudFormation templates. Although JSON or YAML formatted templates can be used, JSON is recommended. \n\n## Installation\n\n```\npip install aws-cfn-control\n```\n\n## TL;DR\n\n1. Build cfnctl parameters file\n1. Launch the stack\n1. Check stack status and outputs\n\n## Usage overview \n\n#### Build the parameters file for a CloudFormation template:\nThis command builds a default parameters file:\n\n```cfnctl build -t <template_file>```\n\n#### Create a stack using the template or a parameters file: \n\nThis first create command (using -t) first checks if there is an existing parameters file, and prompts if it should be used. Otherwise, a parameters file is created using the stack name (-n) appended to the template file name. You are then prompted for the stack parameters (similar to build action), and then the stack is created.\n\n```cfnctl create -n stack001 -t <template_file>```\n\nThis second command (using -f) uses an existing parameters file, which has the template location, to create a stack. You will not be prompted for any parameters:\n\n```cfnctl create -n stack001 -f <parameters_file>```\n\n#### List all existing stacks \n\n```cfnctl list```\n\n\n#### Delete a stack\n\n```cfnctl delete -n <stack_name>```\n\n## More detailed information\n\n### Command help\n\n```text\nusage: cfnctl [-h] [-r REGION] [-n STACK_NAME] [-t TEMPLATE] [-f PARAM_FILE] [-d] [-b BUCKET] [-nr] [-p AWS_PROFILE] [-y] [-v] cfn_action\n\nLaunch and manage CloudFormation templates from the command line\n\npositional arguments:\n  cfn_action      REQUIRED: Action: build|create|list|delete\n                    build    Builds the CFN parameter file (-t required)\n                    create   Creates a new stack (-n and [-t|-f] required)\n                    list     List all stacks (-d provides extra detail)\n                    delete   Deletes a stack (-n is required)\n\narguments:\n  -h, --help      show this help message and exit\n  -r REGION       Region name\n  -n STACK_NAME   Stack name\n  -t TEMPLATE     CFN Template from local file or S3 URL\n  -f PARAM_FILE   Template parameter file\n  -d              List details on all stacks\n  -b BUCKET       Bucket to upload template to\n  -nr             Do not rollback\n  -p AWS_PROFILE  AWS Profile\n  -y              On interactive question, force yes\n  -v              Verbose config file\n```\n\n### Using the defaults from CloudFormation templates and seeing existing resources\n\nWhen using the ```build``` or ```create``` actions, as you are prompted for each parameter you will be given the choice of choosing the default value specified in the template. For example, if your template has this:\n```text\n    \"MyInstanceType\": {\n      \"Default\": \"m5.24xlarge\",\n      \"Description\": \"Instance type\",\n      \"Type\": \"String\"\n    },\n```\n\nYour prompt will have the default value included, and you just hit entire to accept the default:\n```text\nMyInstanceType [m5.24xlarge]:\n```\n\n#### Existing resources\n\nFor some resources, a list of existing values will be shown. For example, here is what the list of subnets look like, with the default set to ```subnet-abbbcccbbbbcd1235```:\n\n```text\nGetting subnets for vpc-0000aaaa1111bbbb2 ...\n  subnet-aaaabbbcccbcd1234 | us-east-1b\n  subnet-abbbcccbbbbcd12gg | us-east-1-bos-1a | Local Zone Subnet\n  subnet-abbbcccbbbbcd1235 | us-east-1a\n  subnet-addddbbbccbcd1232 | us-east-1f\n  subnet-addddbbbccbcd1236 | us-east-1c\n  subnet-addddbbbccbcd1238 | us-east-1e\n  subnet-aaabbbbcccbcd1237 | us-east-1d\nSelect subnet: [subnet-abbbcccbbbbcd1235]: \n```\n\n#### Required parameters\n\nIf a parameter is defined as required (```ConstraintDescription``` is used in the template), and you have not provided a value, you will see one of two messages.\n\n1. If you ran ```cfnctl build``` you will see a message similar to this:\n\n```text\nWARNING ONLY: Parameter \"MyS3Bucket\" is required but can be updated in parameters file and left empty for now\n```\n\n2. If you ran ```cfnctl create``` you will see a message similar this:\n```text\nMyS3Bucket []: \n REQUIREMENT: Parameter \"MyS3Bucket\" is required to create the stack, please enter a value, optionally exit create and rerun with build action\nMyS3Bucket: \nRequired parameter MyS3Bucket not entered. The stack create will fail, but the parameters file will still be built.\n```\n\nAfter the build completes you will see this message, reminding you to update the value in the parameters file:\n\n```text\nSome values are still needed, replace \"<VALUE_NEEDED>\" in /Users/joeuser/.cfnparam/My_Instance.json.default\n```\n\nIn the parameters file you will see this, for ```MyS3Bucket```:\n\n```text\nMyS3Bucket                          = <VALUE_NEEDED>\n```\n\nYou will need to change ```<VALUE_NEEDED>``` to a valid parameter to create the stack successfully.\n\n\n\n### Optional (but recommended): Build cfnctl parameters file  (stored in ~/.cfnparam/)\n\nWhen you run ```cfnctl build``` you will be prompted for each of the parameter values. The ```build``` process accounts for default values, and you will be double prompted on any parameter that is using ```ConstraintDescription``` and does not have a value. A file with parameters and the template location will be saved in the ```~/.cfnparam/``` directory with ```.default``` appended to the template name. For example, the default parameter file for the template named ```stack1.json```, is ```~/.cfnparam/stack1.json.default```.\n\nHere is an example of running the ```cfnctl build``` command:\n\n```text\n$ cfnctl build -t My_Instance.json                   \nUsing AWS credentials profile \"default\"\nLooks like we're in us-east-1\nCreating parameters file /Users/joeuser/.cfnparam/My_Instance.json.default\nEC2 keys found in us-east-1:\n  Testing1 \n  Joeuser_IAD \nSelect EC2 Key [Joeuser_IAD]: \nGetting VPC info...\n  vpc-0000aaaa1111bbbb2 | 10.0.0.0/16 | False | test1-VPC\n  vpc-aaaabbbbeebce1234 | 172.31.0.0/16 | True | default-vpc\nSelect VPC [vpc-aaaabbbbeebce1234]: vpc-0000aaaa1111bbbb2 \nGetting security groups for vpc-0000aaaa1111bbbb2 ...\n  sg-1111aaaa3333bbbbcc | launch-wizard-1\n  sg-2222bbbbcccc333334 | Ent-network\n  sg-bbbccaa1234124efgh | default\nSelect secuirty group [sg-bbbccaa1234124efgh]: \nMyInstanceType [m5.2xlarge]:  t3.small \nOperatingSystem [centos7]:  alinux2\nSshAccessCidr [111.222.333.444/32]:  333.333.444.444/32 \nMyS3Bucket []: \n WARNING ONLY: Parameter \"MyS3Bucket\" is required but can be updated in parameters file and left empty for now\nMyS3Bucket: \nGetting subnets for vpc-0000aaaa1111bbbb2 ...\n  subnet-aaaabbbcccbcd1234 | us-east-1b\n  subnet-abbbcccbbbbcd12gg | us-east-1-bos-1a | Local Zone Subnet\n  subnet-abbbcccbbbbcd1235 | us-east-1a\n  subnet-addddbbbccbcd1232 | us-east-1f\n  subnet-addddbbbccbcd1236 | us-east-1c\n  subnet-addddbbbccbcd1238 | us-east-1e\n  subnet-aaabbbbcccbcd1237 | us-east-1d\nSelect subnet: [subnet-abbbcccbbbbcd1235]: \nUsePublicIp [true]: \nSome values are still needed, replace \"<VALUE_NEEDED>\" in /Users/joeuser/.cfnparam/My_Instance.json.default\nDone building cfnctl parameters file /Users/joeuser/.cfnparam/My_Instance.json.default, includes template location\n```\n\n#### Edit the parameters file, and fill in values as needed \n\nAfter running the ```cfnctl build```, in your home directory under ```~/.cfnparam/```, you will find a parameters file. Edit the parameters file as needed, if you see ```<VALUE_NEEDED>```, those values can not be null for a successful stack luanch.\n\nExample parameters file:\n\n```text\n[AWS-Config]\nTemplateBody = /Users/joeuser/templates/My_Instance.json \n\n[Paramters]\nEC2KeyName                          = Joeuser_IAD \nExistingSecurityGroup               = sg-bbbccaa1234124efgh \nMyInstanceType                      = t3.small\nOperatingSystem                     = alinux2 \nSshAccessCidr                       = 333.333.444.444/32 \nSshBucket                           = <VALUE_NEEDED>\nSubnet                              = subnet-abbbcccbbbbcd1235 \nUsePublicIp                         = true\nVpcId                               = vpc-aaaabbbbeebce1234 \n```\n\n\n### Create the stack \n\nThe stack can be created in two ways, either with the ```-t``` flag or the ```-f``` flag\n\n#### 1. Create with the ```-t``` flag\n\nIf you already created the parameters file (steps above), when you run the create command you will be prompted to choose from either the existing (default) parameters file, or continue the create while answering the parameters questions again.\n\nFor example, if the default parameters file exists you will see this:\n\n```\n$ cfnctl create -n teststack1 -t My_Instance.json\nUsing AWS credentials profile \"default\"\nLooks like we're in us-east-1\nDefault parameters file /Users/joeuser/.cfnparam/My_Instance.json.default exists, use this file [Y/n]:  \n```\nAnswering \"y\" will create the stack using the values from the previously created default parameters file. \n\nIf you answer \"n\", you will be prompted for each parameter, and the parameters will be saved in the ```~/.cfnparam/``` directory with the values used to create the stack. The parameters file name is the stack name appended to the template file name. For example, the parameters file for the template named ```My_Instance.json``` when specifying the stack name ```teststack1```, will be ```~/.cfnparam/My_Instance.json.teststack1```:\n\n```text\n$ cfnctl create -n teststack1 -t My_Instance.json\nUsing AWS credentials profile \"default\"\nLooks like we're in us-east-1\nDefault parameters file /Users/joeuser/.cfnparam/My_Instance.json.default exists, use this file [Y/n]: n\nStack parameters file does not exists, continuing...\nCreating parameters file /Users/joeuser/.cfnparam/My_Instance.json.teststack1\n...\n```\n\n#### 2. Create with the ```-f``` flag\n\nYou can use any parameters file (using ```-f```) to create a stack, as the parameters file has the template location and the paramters.\n\nFor example, to create a new stack (teststack2) using all the parameters from the previously created stack named ```teststack1```, you run this: \n\n```\n$ cfnctl create -n teststack2 -f ~/.cfnparam/My_Instance.json.teststack1\n```\n\n#### Example ```cfnctl create``` using the default parameters file (from ```cfnctl build```):\n\nHere is example output from a ```cfnctl create```, using the previously created default parameters file. The status of the stack, the parameters used, and the output(s) are also displayed:\n\n```\n$ cfnctl create -n teststack1 -t My_Instance.json\nUsing AWS credentials profile \"default\"\nLooks like we're in us-east-1\nDefault parameters file /Users/joeuser/.cfnparam/My_Instance.json.default exists, use this file [Y/n]:  \nUsing parameters file: /Users/joeuser/.cfnparam/My_Instance.json.default \nUsing template file: /Users/joeuser/templates/My_Instance.json \nAttempting to launch teststack1 \nteststack1                             :  CREATE_IN_PROGRESS        :  User Initiated\nSshSecurityGroup                       :  CREATE_IN_PROGRESS       \nInstanceWaitHandle                     :  CREATE_IN_PROGRESS       \nRootRole                               :  CREATE_IN_PROGRESS       \nInstanceWaitHandle                     :  CREATE_IN_PROGRESS        :  Resource creation Initiated\nInstanceWaitHandle                     :  CREATE_COMPLETE          \nRootRole                               :  CREATE_IN_PROGRESS        :  Resource creation Initiated\nSshSecurityGroup                       :  CREATE_IN_PROGRESS        :  Resource creation Initiated\nSshSecurityGroup                       :  CREATE_COMPLETE          \nRootRole                               :  CREATE_COMPLETE          \nRootInstanceProfile                    :  CREATE_IN_PROGRESS       \nRootInstanceProfile                    :  CREATE_IN_PROGRESS        :  Resource creation Initiated\nRootInstanceProfile                    :  CREATE_COMPLETE          \nMyInstance                             :  CREATE_IN_PROGRESS       \nMyInstance                             :  CREATE_IN_PROGRESS        :  Resource creation Initiated\nMyInstance                             :  CREATE_COMPLETE          \nInstanceWaitCondition                  :  CREATE_IN_PROGRESS       \nInstanceWaitCondition                  :  CREATE_IN_PROGRESS        :  Resource creation Initiated\nInstanceWaitCondition                  :  CREATE_COMPLETE          \nteststack1                             :  CREATE_COMPLETE          \n\nStatus:\nteststack1                               2021-09-16 14:35:11   CREATE_COMPLETE                test instance launch\n\n[Parameters]\nExistingSecurityGroup                  = sg-bbbccaa1234124efgh \nOperatingSystem                        = alinux2 \nVpcId                                  = vpc-aaaabbbbeebce1234 \nUsePublicIp                            = true                          \nSshAccessCidr                          = 333.333.444.444/32 \nEC2KeyName                             = Joeuser_IAD \nMyInstanceType                         = t3.small \nSubnet                                 = subnet-abbbcccbbbbcd1235 \n\n[Outputs]\nInstanceID                             = i-00011100022200333\nInstancePublicIP                       = 54.12.11.13 \nInstancePrivateIP                      = 172.25.5.5\n```\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/awslabs/aws-cfn-control",
    "keywords": "aws cfn control cloudformation stack",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aws-cfn-control",
    "package_url": "https://pypi.org/project/aws-cfn-control/",
    "platform": null,
    "project_url": "https://pypi.org/project/aws-cfn-control/",
    "project_urls": {
      "Homepage": "https://github.com/awslabs/aws-cfn-control"
    },
    "release_url": "https://pypi.org/project/aws-cfn-control/1.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Command line launch and management tool for AWS CloudFormation",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13340370,
  "releases": {
    "0.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89e4f7fbf930978bb52259542630b40aeb1f509dbd5e33aa59e5b7d68b352c4d",
          "md5": "2e7206dd5a90d2fd624ebac021ff285a",
          "sha256": "d953e7a319a6bf3031ff12a3ec955bcd3e5bcdf9cf22a4100b36918ebf8e22d0"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-0.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "2e7206dd5a90d2fd624ebac021ff285a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22853,
        "upload_time": "2018-09-15T00:34:08",
        "upload_time_iso_8601": "2018-09-15T00:34:08.974666Z",
        "url": "https://files.pythonhosted.org/packages/89/e4/f7fbf930978bb52259542630b40aeb1f509dbd5e33aa59e5b7d68b352c4d/aws-cfn-control-0.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a637652014ad8f7b78ab1ceea4bd609d1a5daa907506e117ff3d98791e8b062f",
          "md5": "d7113fc7b879a7305f5453e124bc3aac",
          "sha256": "a11c0c25fbed632b303b543691932a7b38bf200eff739426ace5761ef6c6038e"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-0.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "d7113fc7b879a7305f5453e124bc3aac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22879,
        "upload_time": "2018-10-31T04:48:04",
        "upload_time_iso_8601": "2018-10-31T04:48:04.998768Z",
        "url": "https://files.pythonhosted.org/packages/a6/37/652014ad8f7b78ab1ceea4bd609d1a5daa907506e117ff3d98791e8b062f/aws-cfn-control-0.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f01bb05b08aec8520937a2c196124b765c2ea5493aa0b20810c0785799ab2cb",
          "md5": "5e7281bfbec210122ed5b11a1091e8a6",
          "sha256": "70fc99e1764877b5190e1a2feb2cbceac3809d5db951b502618b50ba994f8ad8"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-0.0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "5e7281bfbec210122ed5b11a1091e8a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22893,
        "upload_time": "2018-10-31T05:14:52",
        "upload_time_iso_8601": "2018-10-31T05:14:52.649892Z",
        "url": "https://files.pythonhosted.org/packages/2f/01/bb05b08aec8520937a2c196124b765c2ea5493aa0b20810c0785799ab2cb/aws-cfn-control-0.0.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69419bfaf6890cd5060cd7d80f3ee007a163957fad3deb03911adde21954b807",
          "md5": "c360b3341c348f222831d6e02d4c34ca",
          "sha256": "51fb47e8ab11f673970656fa2d6be27d2ede063cb06f45f2866f609d53011694"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-0.0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "c360b3341c348f222831d6e02d4c34ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22931,
        "upload_time": "2019-02-27T07:06:34",
        "upload_time_iso_8601": "2019-02-27T07:06:34.711435Z",
        "url": "https://files.pythonhosted.org/packages/69/41/9bfaf6890cd5060cd7d80f3ee007a163957fad3deb03911adde21954b807/aws-cfn-control-0.0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "428c11b0293b065dbb16505434b27a81adadc714a412e78ce404ff8b92d0aae7",
          "md5": "3867e005d73d682bb12a94100185b13e",
          "sha256": "10f1793fbf9bb18ab51d88b946a622b1bc4e7567b632fc1e6dc541d64bb8e75b"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-0.0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "3867e005d73d682bb12a94100185b13e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22956,
        "upload_time": "2019-02-27T07:35:36",
        "upload_time_iso_8601": "2019-02-27T07:35:36.756663Z",
        "url": "https://files.pythonhosted.org/packages/42/8c/11b0293b065dbb16505434b27a81adadc714a412e78ce404ff8b92d0aae7/aws-cfn-control-0.0.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd65a3f6b8cf227b3140189e2aa8cc0fdce2a898c0541acb11182b18736b45ea",
          "md5": "6e1cdb5b3b428bdaf844e7e5ae72d4f9",
          "sha256": "bd4a3c9d3677e4637faf8bec480a156e9293a39c91034b7813acabed3f7f0bc2"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-0.0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "6e1cdb5b3b428bdaf844e7e5ae72d4f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21859,
        "upload_time": "2021-09-17T01:35:43",
        "upload_time_iso_8601": "2021-09-17T01:35:43.961160Z",
        "url": "https://files.pythonhosted.org/packages/cd/65/a3f6b8cf227b3140189e2aa8cc0fdce2a898c0541acb11182b18736b45ea/aws-cfn-control-0.0.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3a2081a2bb63ff60216fc5e280a719b15ac5b3a411c30536c2807f83be9d36b",
          "md5": "54e6d4b198cf14430132e06af0ad9353",
          "sha256": "b2f8704813ca8ed1083db49af64a4edd120196133bf78216b9fbda9d7fbc86ac"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "54e6d4b198cf14430132e06af0ad9353",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23271,
        "upload_time": "2021-09-24T21:29:32",
        "upload_time_iso_8601": "2021-09-24T21:29:32.296932Z",
        "url": "https://files.pythonhosted.org/packages/b3/a2/081a2bb63ff60216fc5e280a719b15ac5b3a411c30536c2807f83be9d36b/aws-cfn-control-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bc64ef56ea280d13335745e3b0ee5c0ea50518f70d90910f9d53d18f49e941f",
          "md5": "ed83452d6cc15cb43596665304e86917",
          "sha256": "1c5819dc83f72a421f7dec30d1d7ed76d24b629c49ed0785e2691f002760ddcb"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ed83452d6cc15cb43596665304e86917",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23280,
        "upload_time": "2021-09-24T21:39:26",
        "upload_time_iso_8601": "2021-09-24T21:39:26.639900Z",
        "url": "https://files.pythonhosted.org/packages/4b/c6/4ef56ea280d13335745e3b0ee5c0ea50518f70d90910f9d53d18f49e941f/aws-cfn-control-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "931db299c58da13d7caeb5549544fc5020e40a002cbaefcf00e8b71eafac12a6",
          "md5": "abcb0e936c95fbdc381fbc4f1a38b510",
          "sha256": "f62faeb367c2bb8691ca705627d4e61e7bfcfe3c95049f85be5a538779dbb3f6"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "abcb0e936c95fbdc381fbc4f1a38b510",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24362,
        "upload_time": "2021-09-25T19:04:25",
        "upload_time_iso_8601": "2021-09-25T19:04:25.196792Z",
        "url": "https://files.pythonhosted.org/packages/93/1d/b299c58da13d7caeb5549544fc5020e40a002cbaefcf00e8b71eafac12a6/aws-cfn-control-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f0cc012b7cc637f3b52bbe68948263c419102260551961a03e5e3f86958e385",
          "md5": "31ded51d2329f4ff5b79a9f55aaaa214",
          "sha256": "52cd7b7672fd6af7451fb3e6d268290e030f51c9040bcc7e604ccb05186872b2"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "31ded51d2329f4ff5b79a9f55aaaa214",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24621,
        "upload_time": "2021-09-26T21:14:29",
        "upload_time_iso_8601": "2021-09-26T21:14:29.476292Z",
        "url": "https://files.pythonhosted.org/packages/3f/0c/c012b7cc637f3b52bbe68948263c419102260551961a03e5e3f86958e385/aws-cfn-control-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fb7ba991eb3fca101d315c900b8473cb2778341b1d203dfe284057a32f94b76",
          "md5": "72f463d9eca8b4fc1b056c4e40ab1695",
          "sha256": "3b57db6f9d53cfc02dbf1790ceec44e14fe46e001c9a908ad60a9ea26f2e37a7"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "72f463d9eca8b4fc1b056c4e40ab1695",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25660,
        "upload_time": "2021-09-27T22:45:57",
        "upload_time_iso_8601": "2021-09-27T22:45:57.593966Z",
        "url": "https://files.pythonhosted.org/packages/4f/b7/ba991eb3fca101d315c900b8473cb2778341b1d203dfe284057a32f94b76/aws-cfn-control-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b87f9ebea0dc846d67ba6a0cffcd6c397ae37267a80b0f3a9abd745bfcb94a6",
          "md5": "c9f947b7fe731c04c2abd4d671d3af6d",
          "sha256": "8d02b299c80bef84f0592c638f73494671335d63653a321b4de1f26c714aecca"
        },
        "downloads": -1,
        "filename": "aws-cfn-control-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c9f947b7fe731c04c2abd4d671d3af6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25691,
        "upload_time": "2022-03-30T00:08:53",
        "upload_time_iso_8601": "2022-03-30T00:08:53.290397Z",
        "url": "https://files.pythonhosted.org/packages/9b/87/f9ebea0dc846d67ba6a0cffcd6c397ae37267a80b0f3a9abd745bfcb94a6/aws-cfn-control-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b87f9ebea0dc846d67ba6a0cffcd6c397ae37267a80b0f3a9abd745bfcb94a6",
        "md5": "c9f947b7fe731c04c2abd4d671d3af6d",
        "sha256": "8d02b299c80bef84f0592c638f73494671335d63653a321b4de1f26c714aecca"
      },
      "downloads": -1,
      "filename": "aws-cfn-control-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "c9f947b7fe731c04c2abd4d671d3af6d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25691,
      "upload_time": "2022-03-30T00:08:53",
      "upload_time_iso_8601": "2022-03-30T00:08:53.290397Z",
      "url": "https://files.pythonhosted.org/packages/9b/87/f9ebea0dc846d67ba6a0cffcd6c397ae37267a80b0f3a9abd745bfcb94a6/aws-cfn-control-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}