{
  "info": {
    "author": "Niraj Kamdar",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# async-files\n![Test Runner](https://github.com/Niraj-Kamdar/async-files/workflows/Test%20Runner/badge.svg)\n[![codecov](https://codecov.io/gh/Niraj-Kamdar/async-files/branch/main/graph/badge.svg?token=cyY0uU5JB5)](https://codecov.io/gh/Niraj-Kamdar/async-files/branch/main)\n[![CodeFactor](https://www.codefactor.io/repository/github/niraj-kamdar/async-files/badge)](https://www.codefactor.io/repository/github/niraj-kamdar/async-files)\n\nasync-files is a fast, lightweight, and extensible asyncio file library, written in pure python and inspired by [aiofiles](https://github.com/Tinche/aiofiles). This works just like aiofiles which delegates file IO operations to a separate thread pool. Although, async-files have been completely re-written from scratch to use modern `async...await...` syntax and with extensibility and flexibility in mind.\n\n## Usage\n\nFiles can be opened with async context manager or by calling FileIO instance.\n```python\nasync with FileIO(\"README.md\") as f:\n    s = await f.read()\n    print(s)\n```\nor\n```python\nf = await FileIO(\"README.md\")()  # __init__ can't be asynchronous.\ns = await f.read()\nprint(s)\nawait f.close()\n```\n\nAsynchronous iteration is also supported.\n\n```python\nasync with FileIO(\"README.md\") as f:\n    async for line in f:\n        print(line, end=\"\")\n```\n\nYou can also extend functionality of FileIO to support other classes like `tempfile.TemporaryFile` very easily:\n```python\nfrom tempfile import TemporaryFile as _TemporaryFile\nfrom async_files import FileIO\n\nclass TemporaryFile(FileIO):\n    OPEN = _TemporaryFile\n```\n\nYou can do same for any other IO classes like `gzip.GzipFile`, `zipfile.ZipFile`, etc. \nI have added async version of tempfile and gzip modules in the `v0.2` \nsince they are commonly used modules and I will add more modules in the future releases. \nYou can use these modules just like you use standard library module, only difference is you need to await coroutine methods.\nYou can request for support for new modules by [creating new issue](https://github.com/Niraj-Kamdar/async-files/issues/new).\n\nYou can also create coroutine from any blocking function by using async-files's utility function `async_wraps`. For example:\n```python\nimport shutil\nfrom async_files.utils import async_wraps\nasync_rmtree = async_wraps(shutil.rmtree)\n```\nYou can also use `async_wraps` as a decorator for your custom function. \n> Note: Only use `async_wraps` if target function is IO-bound.\n\nFollowing are asynchronous attributes of the FileIO object.\n```python\nclose: Callable[[], Awaitable[None]]\nflush: Callable[[], Awaitable[None]]\nisatty: Callable[[], Awaitable[bool]]\nread: Callable[[], Awaitable[Union[str, bytes]]]\nread1: Callable[[], Awaitable[bytes]]\nreadinto: Callable[[bytearray], Awaitable[int]]\nreadinto1: Callable[[bytearray], Awaitable[int]]\nreadline: Callable[[], Awaitable[Union[str, bytes]]]\nreadlines: Callable[[], Awaitable[List[Union[str, bytes]]]]\nseek: Callable[[], Awaitable[int]]\ntell: Callable[[], Awaitable[int]]\ntruncate: Callable[[], Awaitable[int]]\nwrite: Callable[[Union[str, bytes]], Awaitable[int]]\nwritelines: Callable[[List[Union[str, bytes]]], Awaitable[None]]\n```\nOther attributes are synchronous just like standard library fileobj.\n\n## Feedback & Contributions\nBugs and feature requests can be made via [GitHub issues](https://github.com/Niraj-Kamdar/async-files/issues/new). \nBe aware that these issues are not private, so take care when providing output to make sure you are not disclosing security issues in other products.\n\nPull requests are also welcome via git.\n\nThe async-files uses `sourcery`, `restyled` and `code factor` bots to ensure code quality of the PR.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Niraj-Kamdar/async-files/archive/master.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Niraj-Kamdar/async-files",
    "keywords": "asyncio,file,aiofile",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "async-files",
    "package_url": "https://pypi.org/project/async-files/",
    "platform": "",
    "project_url": "https://pypi.org/project/async-files/",
    "project_urls": {
      "Download": "https://github.com/Niraj-Kamdar/async-files/archive/master.zip",
      "Homepage": "https://github.com/Niraj-Kamdar/async-files"
    },
    "release_url": "https://pypi.org/project/async-files/0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Async Files",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9458155,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "227797938e8ce18cd6c5aad2a4255a041ef58b2275f3bd4ae84d7a667feb1657",
          "md5": "ca8d1c6b95b59c4d88795bff459e0fbc",
          "sha256": "889811278f1c6a616807c0202e546a91051552eea74ae1818b63cb6f8d9536df"
        },
        "downloads": -1,
        "filename": "async_files-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca8d1c6b95b59c4d88795bff459e0fbc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 5142,
        "upload_time": "2020-10-06T06:29:22",
        "upload_time_iso_8601": "2020-10-06T06:29:22.876717Z",
        "url": "https://files.pythonhosted.org/packages/22/77/97938e8ce18cd6c5aad2a4255a041ef58b2275f3bd4ae84d7a667feb1657/async_files-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "430b2e502f6335fb9b9c92b51823afa14471f3c1b89f7498e828b0422f13ccfe",
          "md5": "a782ab4dfe5196c26857bdd7837ff41b",
          "sha256": "9fbc3ae35f6d150cdb8e28e9819aa64b1bf2400a7a80ef76708d3cccbeb47bba"
        },
        "downloads": -1,
        "filename": "async_files-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a782ab4dfe5196c26857bdd7837ff41b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 7028,
        "upload_time": "2020-10-09T13:24:04",
        "upload_time_iso_8601": "2020-10-09T13:24:04.463450Z",
        "url": "https://files.pythonhosted.org/packages/43/0b/2e502f6335fb9b9c92b51823afa14471f3c1b89f7498e828b0422f13ccfe/async_files-0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29a8e5433b6b4aeb1793cfeef4cba5a336953a0fbfd04ae210835d9a81d3b435",
          "md5": "95864bbc631c8a620ea0195f759caa6a",
          "sha256": "09a54d0ad27bbe1a399c3dae0c4d275c867927842b28da31e69cb2e4e880eeea"
        },
        "downloads": -1,
        "filename": "async_files-0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95864bbc631c8a620ea0195f759caa6a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10050,
        "upload_time": "2020-10-21T12:59:53",
        "upload_time_iso_8601": "2020-10-21T12:59:53.096996Z",
        "url": "https://files.pythonhosted.org/packages/29/a8/e5433b6b4aeb1793cfeef4cba5a336953a0fbfd04ae210835d9a81d3b435/async_files-0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9b549279b02817190bdd6ac5d335b1ae44e2b5e43076711b6e8c1f2e33ead07",
          "md5": "898d0abfcf4a4a199836f865cedd7cee",
          "sha256": "64497938a623c57612e5cb5a7d0f4850ba8a338b1e8ea00e1dfa32ebfa0bc34c"
        },
        "downloads": -1,
        "filename": "async_files-0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "898d0abfcf4a4a199836f865cedd7cee",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10893,
        "upload_time": "2021-02-18T19:07:10",
        "upload_time_iso_8601": "2021-02-18T19:07:10.580009Z",
        "url": "https://files.pythonhosted.org/packages/d9/b5/49279b02817190bdd6ac5d335b1ae44e2b5e43076711b6e8c1f2e33ead07/async_files-0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9b549279b02817190bdd6ac5d335b1ae44e2b5e43076711b6e8c1f2e33ead07",
        "md5": "898d0abfcf4a4a199836f865cedd7cee",
        "sha256": "64497938a623c57612e5cb5a7d0f4850ba8a338b1e8ea00e1dfa32ebfa0bc34c"
      },
      "downloads": -1,
      "filename": "async_files-0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "898d0abfcf4a4a199836f865cedd7cee",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 10893,
      "upload_time": "2021-02-18T19:07:10",
      "upload_time_iso_8601": "2021-02-18T19:07:10.580009Z",
      "url": "https://files.pythonhosted.org/packages/d9/b5/49279b02817190bdd6ac5d335b1ae44e2b5e43076711b6e8c1f2e33ead07/async_files-0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}