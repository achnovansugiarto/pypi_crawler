{
  "info": {
    "author": "carlosmperilla",
    "author_email": "carlosperillaprogramacion@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Budget System\n\nThe Budget System allows you to manage dataframe data with store purchase budgets by date.\n\n- It groups the relevant information, the most expensive and the cheapest products in a table.\n- Spents per store purchase on a date, per store in a month, per month, per year and total spent.\n- It shows this information segmented and colored, both by python code, and by a **command line** application to facilitate visualization.\n- The system can be created relatively easily, starting from the budget files, copying them (_by default_) or moving them, as indicated.\n- It has a translation system to be able to integrate languages beyond English or Spanish, for the months and the display in your language.\n- Cross-platform compatibility.\n\n### Dependencies\nBudget System requires three external dependencies.\n- [Pandas][pandas install]\n It is to manage the tables through dataframes.\n- [Colorama][colorama install]\n It is to color the visualization by console.\n- [Numpy][numpy install]\n It is for type float64.\n\n### Instalation\n```sh\npip install budget-system\n```\n\n## Index\n* [Introduction](https://github.com/carlosmperilla/budget-system#introduction)\n\t* [Pre-requirements](https://github.com/carlosmperilla/budget-system#pre-requirements)\n\t* [Creation](https://github.com/carlosmperilla/budget-system#creation)\n\t* [Addition Files](https://github.com/carlosmperilla/budget-system#addition-files)\n* [Visualization](https://github.com/carlosmperilla/budget-system#visualization)\n* [Data Processing](https://github.com/carlosmperilla/budget-system#data-processing)\n\t* [Spent](https://github.com/carlosmperilla/budget-system#spent)\n\t\t* [ProductsData](https://github.com/carlosmperilla/budget-system#productsdata)\n\t\t* [DatesDict](https://github.com/carlosmperilla/budget-system#datesdict)\n\t\t* [SectorsDict](https://github.com/carlosmperilla/budget-system#sectorsdict)\n\t\t* [MonthData](https://github.com/carlosmperilla/budget-system#monthdata)\n\t\t* [YearData](https://github.com/carlosmperilla/budget-system#yeardata)\n\t\t* [TotalData](https://github.com/carlosmperilla/budget-system#totaldata)\n\t* [PurchaseList](https://github.com/carlosmperilla/budget-system#purchaselist)\n\t* [ParserTableName](https://github.com/carlosmperilla/budget-system#parsertablename)\n* [Translation](https://github.com/carlosmperilla/budget-system#translation)\n\t* [Only translation](https://github.com/carlosmperilla/budget-system#only-translation)\n\t* [Add a new language](https://github.com/carlosmperilla/budget-system#add-a-new-language)\n\t* [Add a new language and Translate](https://github.com/carlosmperilla/budget-system#add-a-new-language-and-translate)\n\n## Introduction\n### Pre-requirements\n* The csv files with the purchase data must have at least one column with the prices of each product.\n* The names of each table must have the following format to be identified by the package and correctly located in the Budget System folder tree:\n **whatever_storename_[day-month-year].csv**\n    * Example:\n     **Purchase_List_Amazon_[14-05-22].csv**\n        * Note:\n        _There is one subtle exception_: the **date format** can be changed if you want, before creating the **Budget System**. But this option is **not available on the command line**. But in the python script creation format. Please read further if this is what you require.\n### Creation\nWhen creating a Budget System. A folder is generated that will contain the specified files, with the following structure:\n>base_folder/year/month/file.csv\n\n**Example:** A file with the following name _Purchase_List_NameStoreOne_[23-04-22].csv_ would copy/move to: \n>C:\\Users\\username\\Documents\\MyBudget\\2022\\April\\Purchase_List_NameStoreOne_[23-04-22].csv\n\nAnd a configuration file located in it:\n>base_folder/config.ini\n\nWhich will contain the _language, the price_name, the date format and the path of the base folder_.\n\n* #### Complete script to create a Budget System:\n   ```python\n  from budget_system import Budget\n\n  budget_files = [\n\t    r\"C:\\Users\\username\\Documents\\GenericFolderOne\\Purchase_List_NameStoreOne_[23-04-22].csv\",\n\t    r\"C:\\Users\\username\\Downloads\\GenericFolderTwo\\Purchase_List_NameStoreTwo_[27-02-22].csv\",\n\t    r\"C:\\Users\\username\\Desktop\\GenericFolderThree\\Purchase_List_NameStoreThree_[23-05-23].csv\",\n\t    ]\n  context = {\n    \t\"lang\" : \"ENG\",\n\t    \"price_name\" : \"Price(USD)\",\n        \"base_folder\" : r\"C:\\Users\\username\\Documents\\MyBudget\",\n        \"budget_files\" : budget_files,\n        \"budget_files_action\" : \"COPY\",\n        \"date_format\" : \"%d-%m-%y\"\n    }\n    \n  budget = Budget(**context)\n  budget.create_budget_system()\n    ```\n    * The original files can be located in different folders.\n    * By default, only two languages are available: **English (ENG)** and **Spanish (SPA)**. For other languages see the Translation section.\n    * If a language is not specified, it will check if the operating system is configured by default in Spanish or English and choose one of these. Otherwise, it will choose **English as the default language**.\n    * **_price_name_** refers to the name of the column that contains the prices.\n    * **_base_folder_** refers to the path of the folder that will contain the **Budget System**. If the path does not exist, it creates it.\n    * **_budget_files_action_** refers to the action that is carried out with the original files, this can be _MOVE_ or _COPY_. If not specified, the files will be copied.\n    * **_date_format_** sets the _date format_, to know how to parse the dates that have the names of the files in square brackets. If not specified, defaults to **day-month-year**. [More about date formats in Python][date format python].\n\n\n* #### Command line for create a Budget System:\n   ```sh\n  budgetsys --create ENG Price(USD) C:\\Users\\username\\Documents\\MyBudge COPY Files C:\\Users\\username\\Documents\\GenericFolderOne\\Purchase_List_NameStoreOne_[23-04-22].csv C:\\Users\\username\\Downloads\\GenericFolderTwo\\Purchase_List_NameStoretwo_[27-02-22].csv\n   ```\n   * **-\\-create** can be reduced to **-c** .\n   * The arguments are required, **not optional**. In order they are _Language, Price_Name, Base_Folder, Budget_Files_Action_.\n   * **Files** indicates that the following are the paths to the **original budget files**\n   * Note that there is no option for date format. This is because the command line is meant for quick actions. **To set date format, use a python script and import Budget**\n\n### Addition Files\nOnce the system is created, later we will need to add new files. For this there are the following options.\nThis will create the necessary folder structure, and copy or move the files as indicated.\n\n* #### Complete script for add files to Budget System:\n   ```python\n  import os\n  from budget_system import Budget\n  \n  budget_files = [\n\t    r\"C:\\Users\\username\\Documents\\GenericFolderOne\\Purchase_List_NameStoreTwo_[12-04-22].csv\",\n\t    r\"C:\\Users\\username\\Downloads\\GenericFolderTwo\\Purchase_List_NameStoreFour_[01-07-22].csv\",\n\t    ]\n  context = {\n      \"base_folder\" : r\"C:\\Users\\username\\Documents\\MyBudget\",\n      \"budget_files\" : budget_files,\n      \"budget_files_action\" : \"COPY\",\n            }\n  \n  # We set the environment variable to contain the configuration set at system creation.\n  os.environ['CONFIG_BUDGET'] = os.path.join(context[\"base_folder\"], 'config.ini')\n  \n  budget = Budget(**context)\n  budget.add_budget_files()\n   ```\n    * You must set the environment variable **CONFIG_BUDGET** to the location of the configuration file either from the **_shell_**, or as in this case **_directly from the script_**. I recommend this second form.\n    * **_budget_files_action_** If not specified, the files will be copied.\n    \n    \n* #### Command line for add files to Budget System:\n  ```sh\n  budgetsys --add C:\\Users\\carlo\\Desktop\\pruebitas COPY Files C:\\Users\\username\\Downloads\\GenericFolderTwo\\Purchase_List_NameStoreFour_[01-07-22].csv\n  ```\n    * You must set the **CONFIG_BUDGET** environment variable from the shell. Before executing the command.\n   * **-\\-add** can be reduced to **-a** .\n   * The arguments are required, **not optional**. In order they are Base_Folder, Budget_Files_Action_.\n   * **Files** indicates that the following are the paths to the **original budget files**\n\n## Visualization\nThe Budget System package has an internal method for displaying data. The display hierarchy is as follows:\n> **Total Data** --> **Year Data** --> **Month Data** --> **Store Data** --> **Store-Date Data**\n\n* **Total Data:** Contains all the following hierarchies. And the total spent.\n* **Year Data:** Contains all the following hierarchies. And the year spent.\n* **Month Data:** Contains all the following hierarchies. And the month spent.\n* **Store Data:** Contains one or multiple _dates_ with the basic data.\n* **Date Data:** Contains the basic data, _spent_ of the day of purchase, 3 _most expensive_ products and 3 _cheapest_ products.\n\nIf you need to process the data in another way, I recommend that you read **Data Processing**, later, about the **Spent** class.\n\nIf what you require is a quick, color-coded view of expenses, this is the tool for you.\n\nThere are two ways to display the data, the recommended one is by command line with **budgetsys**, and the other is using the **DisplayData** class.\n\nFor both cases, the environment variable **CONFIG_BUDGET** must have been set beforehand with the location of the Budget System configuration file.\n\n#### Example of visualization of Total Data:\n![Budget System Display Total Data](https://raw.githubusercontent.com/carlosmperilla/budget-system/main/example%20imgs/budget_system_example_1.PNG)\n\n#### Before starting\nYou must set the environment variable **CONFIG_BUDGET**, with the location of the Budget System configuration file created **_config.ini_**\n\n### Command-Line or Script\n* #### Command-Line\n    * ##### Display Total Data:\n      It receives no arguments and displays the information for all years.\n      ```sh\n      budgetsys -dt\n      ```\n      * The extended argument is **-\\-displaytotal**\n    * ##### Display Year Data:\n      This receives a single, int argument corresponding to the **year**. \n      ```sh\n      budgetsys -dy 2022\n      ```\n      * The extended argument is **-\\-displayyear**\n    * ##### Display Month Data:\n      This receives two arguments, the first int, corresponding to the **year**. The second a **month**(int or string).\n      \n      ```sh\n      budgetsys -dm 2022 4\n      ```\n      ```sh\n      budgetsys -dm 2022 April\n      ```\n      * The extended argument is **-\\-displaymonth**  \n    * ##### Display Store (sector) Data:\n      This receives three arguments, the first numeric, corresponding to the **year**. The second to the **month**(int or string). The third the **name of the store** in the title of the files for that month.\n      \n      ```sh\n      budgetsys -ds 2022 4 StoreOne\n      ```\n      ```sh\n      budgetsys -ds 2022 April StoreOne\n      ```\n      * The extended argument is **-\\-displaysector**\n    * ##### Display Date (sector-date) Data:\n      This receives four arguments, the first numeric, corresponding to the **year**. The second to the **month**(int or string). The third the **name of the store** in the title of the files for that month. And the fourth to the **date of purchase in that store**.\n      \n      ```sh\n      budgetsys -dd 2022 4 StoreOne 23-04-22\n      ```\n      ```sh\n      budgetsys -dd 2022 April StoreOne 23-04-22\n      ```\n      * The extended argument is **-\\-displaysectordate**\n* #### Script\n  If you want to access the display functions without using the command line, you should use the Spent class.\n    * ##### Display Total Data:\n      ```python\n      import os\n      from budget_system import DisplayData\n      \n      base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n      #If the environment variable for the configuration has not been set, we set it.\n      if not os.environ.get('CONFIG_BUDGET'):\n        os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n  \n      DisplayData().show_total_data()\n      ```\n    * ##### Display Year Data:\n      ```python\n      import os\n      from budget_system import DisplayData, Spent\n      \n      base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n      #If the environment variable for the configuration has not been set, we set it.\n      if not os.environ.get('CONFIG_BUDGET'):\n        os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n  \n      year = 2022\n      data_years = Spent().spending_by_year(year)\n      year_data_by_key = {year:data_years}\n      \n      DisplayData().show_year_data(year, year_data_by_key)\n      ```\n      * The **Spent** class is used to extract the **spending data for the year**. And they are packaged in a dictionary.\n    * ##### Display Month Data:\n      ```python\n      import os\n      from budget_system import DisplayData, Spent\n      \n      base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n      #If the environment variable for the configuration has not been set, we set it.\n      if not os.environ.get('CONFIG_BUDGET'):\n        os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n  \n      year, month = 2022, 'April'\n      data_months = Spent().spending_by_month(year, month)\n      month_data_by_key = {month : data_months}\n      \n      DisplayData().show_month_data(month, month_data_by_key)\n      ```\n      * The **Spent** class is used to extract the **spending data for the month**. And they are packaged in a dictionary.\n    * ##### Display Store (sector) Data:\n      ```python\n      import os\n      from budget_system import DisplayData, Spent\n      from budget_system.settings.Config import ConfigBudget\n      \n      base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n      #If the environment variable for the configuration has not been set, we set it.\n      if not os.environ.get('CONFIG_BUDGET'):\n        os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n  \n      year, month, store_name = 2022, 'April', 'StoreOne'\n      month_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\n      sector_data_by_key = Spent().spending_by_sector_in_month(month_path, store_name)[0]\n      \n      DisplayData().show_sector_data(store_name, sector_data_by_key)\n      ```\n      * The **Spent** class is used to extract the **spending data for the sector**. And they are packaged in a dictionary.\n      * **_month_path_** refers to the folder where the **store's purchase data** tables are located, with one or more purchase dates in that month.\n    * ##### Display Date (sector-date) Data:\n      ```python\n      import os\n      from budget_system import DisplayData, Spent\n      from budget_system.settings.Config import ConfigBudget\n      \n      base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n      #If the environment variable for the configuration has not been set, we set it.\n      if not os.environ.get('CONFIG_BUDGET'):\n        os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n  \n      year, month, store_name, buy_date = 2022, 'April', 'StoreOne', '23-04-22'\n      month_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\n      sector_data_by_key = Spent().spending_by_sector_in_month(month_path, store_name)[0]\n      date_data_by_key = {buy_date : sector_data_by_key[store_name][buy_date]}\n      \n      DisplayData().show_date_data(buy_date, date_data_by_key)\n      ```\n      * The **Spent** class is used to extract the **spending data for the sector**. And they are packaged in a dictionary.\n      * **_month_path_** refers to the folder where the **store's purchase data** tables are located, with one or more purchase dates in that month.\n## Data Processing\nThe main purpose of the package is to obtain and visualize spents, more expensive and less expensive products.\n\nIf you want to process table data directly, or spent and product data into dictionaries and tuples, or extract the date and name from a data table, **Budget System** has three classes: **_Spent_**, **_PurchaseList_** and **_ParserTableName_**.\n### Spent\nIt follows a hierarchy of types, to pack the data in layers.\n![Budget System Data Structure](https://raw.githubusercontent.com/carlosmperilla/budget-system/main/example%20imgs/budget_system_data_structure.png)\n![Date Structure](https://raw.githubusercontent.com/carlosmperilla/budget-system/main/example%20imgs/budget_system_date_content.png)\nIt can be better understood by reviewing the types in **budget_system.extra_types.SpentTypes**\n```python\nProductsData = NewType('ProductsData', Tuple[DataFrame, DataFrame, float64])\nDatesDict = NewType('DatesDict', Dict[str, ProductsData])\nSectorsDict = NewType('SectorsDict', Dict[str, DatesDict])\nMonthData = NewType('MonthData', Tuple[SectorsDict, float64])\nYearData = NewType('YearData',  Tuple[Dict[str, MonthData], float64])\nTotalData = NewType('TotalData',  Tuple[Dict[int, YearData], float64])\n```\n##### ProductsData\nThe minimum data set, a tuple containing:\n* Least expensive products.\n* Most expensive products.\n* Total spent of table (corresponding to a specific **date-store** or date-sector).\n\nBeing the **minimum data type** of **Spent**, it can be accessed from every main function. **There is no proper method in Spent** to extract this type of data.\n\nHere we will use two approaches, the **concrete approach** (the function that extracts the minimum amount of data for the requested information). And the **full approach** (the function that extracts all the data and can look up a **ProductsData** among this data.)\n* **Concrete**\n  ```python\n  import os\n  from budget_system import Spent\n  from budget_system.settings.Config import ConfigBudget\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year, month, store_name, date = 2022, 'April', 'StoreOne', '23-04-22'\n  d_index = 0 #dict index\n  month_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\n  products_data = Spent().spending_by_sector_in_month(month_path, store_name)[d_index][store_name][date]\n  \n  least_expensive, most_expensive, spent = products_data\n  print(least_expensive)\n  print(most_expensive)\n  print(spent)\n  ```\n  * **spending_by_sector**: This returns the spent per store in a specific month, with information on each of its spending dates.\n* **Full**\n  ```python\n  import os\n  from budget_system import Spent\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year, month, store_name, date = 2022, 'April', 'StoreOne', '23-04-22'\n  d_index = 0 #dict index\n  products_data = Spent().total_spending()[d_index][year][d_index][month][d_index][store_name][date]\n  \n  least_expensive, most_expensive, spent = products_data\n  print(least_expensive)\n  print(most_expensive)\n  print(spent)\n  ```\n  * **total_spending:** This returns the total spent and inherited spent information.\n##### DatesDict\nDictionary with **dates** as keys. And **ProductsData** as values.\n\n**There is no proper method in Spent** to extract this type of data.\n\nHere we will use two approaches, the **concrete approach** (the function that extracts the minimum amount of data for the requested information). And the **full approach** (the function that extracts all the data and can look up a **DatesDict** among this data.)\n* **Concrete**\n  ```python\n  import os\n  from budget_system import Spent\n  from budget_system.settings.Config import ConfigBudget\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year, month, store_name = 2022, 'April', 'StoreOne'\n  d_index = 0 #dict index\n  month_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\n  dates_dict = Spent().spending_by_sector_in_month(month_path, store_name)[d_index][store_name]\n  \n  for date in dates_dict:\n    print(f\"Date of purchase: {date}\")\n    print(dates_dict[date], '\\n')\n  ```\n  * **spending_by_sector**: This returns the spent per store in a specific month, with information on each of its spending dates.\n* **Full**\n  ```python\n  import os\n  from budget_system import Spent\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year, month, store_name = 2022, 'April', 'StoreOne'\n  d_index = 0 #dict index\n  dates_dict = Spent().total_spending()[d_index][year][d_index][month][d_index][store_name]\n  \n  for date in dates_dict:\n    print(f\"Date of purchase: {date}\")\n    print(dates_dict[date], '\\n')\n  ```\n  * **total_spending:** This returns the total spent and inherited spent information.\n##### SectorsDict\nDictionary with **store names** as keys. And **DatesDict** as values.\n\n**There is no proper method in Spent** to extract this type of data.\n\nHere we will use two approaches, the **concrete approach** (the function that extracts the minimum amount of data for the requested information). And the **full approach** (the function that extracts all the data and can look up a **SectorsDict** among this data.)\n\nIf you want to know **the spent made in a store in a particular month**, check the section on **MonthData**.\n\n* **Concrete**\n  ```python\n  import os\n  from budget_system import Spent\n  from budget_system.settings.Config import ConfigBudget\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year, month, store_name = 2022, 'April'\n  d_index = 0 #dict index\n  month_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\n  sectors_dict = Spent().spending_by_sector_in_month(month_path, store_name)[d_index]\n  \n  for sector in sectors_dict:\n    print(f\"Purchase dates in {sector} in {month}:\")\n    print(sectors_dict[sector], '\\n')\n  ```\n  * **spending_by_sector**: This returns the spent per store in a specific month, with information on each of its spending dates.\n* **Full**\n  ```python\n  import os\n  from budget_system import Spent\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year, month = 2022, 'April'\n  d_index = 0 #dict index\n  sectors_dict = Spent().total_spending()[d_index][year][d_index][month][d_index]\n  \n  for sector in sectors_dict:\n    print(f\"Purchase dates in {sector} in {month}:\")\n    print(sectors_dict[sector], '\\n')\n  ```\n  * **total_spending:** This returns the total spent and inherited spent information.\n##### MonthData\nTuple with **SectorsDict** and **the accumulated spent of these sectors**.\n\nBeing contained by months it is called **MonthData**, although it does not necessarily contain the information of the entire month, it can be that of only one store in that month.\n\nHere we will use two approaches, the **exact approach** (the function that extracts the exact data for the requested information). And the **full approach** (the function that extracts all the data and can look up a **MonthData** among this data.)\n\nThere are two functions in **Spent** that allow us to get data of type **MonthData**. \n\n* **spending_by_month**: This returns the spent per month and inherited spent information.\n* **spending_by_sector**: Like **spending_by_month** but only with **one store(sector)** the dictionaries of a specific store and the total spending of the store in that month.\n\nHow to extract spending and inherited information from **one month** to one year.\n* **Exact**\n  ```python\n  import os\n  from budget_system import Spent\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year, month = 2022, 'April'\n  month_data = Spent().spending_by_month(year, month)\n  \n  month_content, month_spent = month_data \n  \n  print(f\"Spent in {month}:\", month_spent)\n  print(f\"Data on store spents in the month:\")\n  print(month_content)\n  ```\n* **Full**\n  ```python\n  import os\n  from budget_system import Spent\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year, month = 2022, 'April'\n  d_index = 0 #dict index\n  month_data = Spent().total_spending()[d_index][year][d_index][month]\n  \n  month_content, month_spent = month_data \n  \n  print(f\"Spent in {month}:\", month_spent)\n  print(f\"Data on store spents in the month:\")\n  print(month_content)\n  ```\nHow to extract spending and inherited information from **one store in a month**, in a year. Here we can only apply the **exact approach** by the intrinsic structure in **TotalData**.\n* **Exact**\n  ```python\n  import os\n  from budget_system import Spent\n  from budget_system.settings.Config import ConfigBudget\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year, month, store_name = 2022, 'April', 'StoreOne'\n  month_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\n  month_data = Spent().spending_by_sector_in_month(month_path, store_name)\n  \n  month_content, month_spent = month_data \n  \n  print(f\"Spent in {store_name} in {month}:\", month_spent)\n  print(f\"Data on store spent in the month:\")\n  print(month_content)\n  ```\n##### YearData\nTuple with a dictionary with **months** as keys and **MonthData**  as value. And **the accumulated spent of these months**.\n\nHere we will use two approaches, the **exact approach** (the function that extracts the exact data for the requested information). And the **full approach** (the function that extracts all the data and can look up a **YearData** among this data.)\n\nHow to extract spending and inherited information from **one year**.\n* **Exact**\n  ```python\n  import os\n  from budget_system import Spent\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year = 2022\n  year_data = Spent().spending_by_year(year)\n  \n  year_content, year_spent = year_data \n  \n  print(f\"Spent in {year}:\", year_spent)\n  print(f\"Data on month spents in the year:\")\n  print(year_content)\n  ```\n* **Full**\n  ```python\n  import os\n  from budget_system import Spent\n  \n  base_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n  \n  #If the environment variable for the configuration has not been set, we set it.\n  if not os.environ.get('CONFIG_BUDGET'):\n    os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n \n  year = 2022\n  d_index = 0 #dict index\n  year_data = Spent().total_spending()[d_index][year]\n  \n  year_content, year_spent = year_data \n  \n  print(f\"Spent in {year}:\", year_spent)\n  print(f\"Data on month spents in the year:\")\n  print(year_content)\n  ```\n##### TotalData\nTuple with a dictionary with **years** as keys and **YearData** as value. And **the accumulated spent of these years**.\n\nBeing the structure with the highest hierarchy, the **exact** and **full** approach are **the same**.\n\n```python\nimport os\nfrom budget_system import Spent\n\nbase_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n\n#If the environment variable for the configuration has not been set, we set it.\nif not os.environ.get('CONFIG_BUDGET'):\n  os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n\ntotal_data = Spent().total_spending()\n\ntotal_content, total_spent = total_data \n\nprint(f\"Total Spent:\", total_spent)\nprint(f\"Total Data in Budget System:\")\nprint(total_content)\n```\n### PurchaseList\nClass that reads the table with the **purchases**, sorts them by price and extracts the **relevant data**.\n\nIf we want more specific data from a specific table (remembering that each table is a purchase date in a store). PurchaseList can be useful.\n\nHow to get the **ProductsData** directly from the table. Let's remember that the minimum type that directly returns **Spent** is **MonthData**.\n\nThe maximum type that this class returns is **ProductsData**.\n```python\nimport os\nfrom budget_system import PurchaseList\nfrom budget_system.settings.Config import ConfigBudget\n\nbase_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n\n#If the environment variable for the configuration has not been set, we set it.\nif not os.environ.get('CONFIG_BUDGET'):\n  os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n\nyear, month = 2022, 'April'\nmonth_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\nfile_name = 'Purchase_List_StoreOne_[23-04-22].csv'\n\nlocation = os.path.join(month_path, file_name)\n\nproducts_data = PurchaseList(location).get_all()\n\nleast_expensive, most_expensive, spent = products_data\nprint(least_expensive)\nprint(most_expensive)\nprint(spent)\n```\nHow to get the **n most expensive products**. By default **n = 3**.\n```python\nimport os\nfrom budget_system import PurchaseList\nfrom budget_system.settings.Config import ConfigBudget\n\nbase_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n\n#If the environment variable for the configuration has not been set, we set it.\nif not os.environ.get('CONFIG_BUDGET'):\n  os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n\nyear, month = 2022, 'April'\nmonth_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\nfile_name = 'Purchase_List_StoreOne_[23-04-22].csv'\n\nlocation = os.path.join(month_path, file_name)\n\nn_products = 5\nmost_expensive = PurchaseList(location).most_expensive(n_products)\n\nprint(most_expensive)\n```\nHow to get the **n least expensive products**. By default **n = 3**.\n```python\nimport os\nfrom budget_system import PurchaseList\nfrom budget_system.settings.Config import ConfigBudget\n\nbase_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n\n#If the environment variable for the configuration has not been set, we set it.\nif not os.environ.get('CONFIG_BUDGET'):\n  os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n\nyear, month = 2022, 'April'\nmonth_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\nfile_name = 'Purchase_List_StoreOne_[23-04-22].csv'\n\nlocation = os.path.join(month_path, file_name)\n\nn_products = 5\nleast_expensive = PurchaseList(location).least_expensive(n_products)\n\nprint(least_expensive)\n```\nHow to get the **total spent**.\n```python\nimport os\nfrom budget_system import PurchaseList\nfrom budget_system.settings.Config import ConfigBudget\n\nbase_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n\n#If the environment variable for the configuration has not been set, we set it.\nif not os.environ.get('CONFIG_BUDGET'):\n  os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n\nyear, month = 2022, 'April'\nmonth_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\nfile_name = 'Purchase_List_StoreOne_[23-04-22].csv'\n\nlocation = os.path.join(month_path, file_name)\n\nspent_by_table = PurchaseList(location).spending_by_sector()\n\nprint(f\"{file_name} records an spent of:\")\nprint(spent_by_table)\n```\nHow to access the **full dataframe**.\n```python\nimport os\nfrom budget_system import PurchaseList\nfrom budget_system.settings.Config import ConfigBudget\n\nbase_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n\n#If the environment variable for the configuration has not been set, we set it.\nif not os.environ.get('CONFIG_BUDGET'):\n  os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n\nyear, month = 2022, 'April'\nmonth_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\nfile_name = 'Purchase_List_StoreOne_[23-04-22].csv'\n\nlocation = os.path.join(month_path, file_name)\n\ndf = PurchaseList(location).data_frame\n\nprint(df)\n```\nHow to access the **full dataframe** sortered by the **price column**.\n```python\nimport os\nfrom budget_system import PurchaseList\nfrom budget_system.settings.Config import ConfigBudget\n\nbase_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n\n#If the environment variable for the configuration has not been set, we set it.\nif not os.environ.get('CONFIG_BUDGET'):\n  os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n\nyear, month = 2022, 'April'\nmonth_path = ConfigBudget().MONTH_PATH.format(year=year, month=month)\nfile_name = 'Purchase_List_StoreOne_[23-04-22].csv'\n\nlocation = os.path.join(month_path, file_name)\n\ndf_by_price = PurchaseList(location).df_by_price\n\nprint(df_by_price)\n```\n### ParserTableName\nClass to **parse and extract** data from **table name**.\n\nThis is one of the few classes that **does not require the CONFIG_BUDGET** environment variable to be set **to work**.\n\nHow to extract the **name of the store**.\n```python\nfrom budget_system import ParserTableName\n\nfile_name = 'Purchase_List_StoreOne_[23-04-22].csv'\n\nstore_name = ParserTableName(file_name).get_store_name()\n\nprint(store_name) #'StoreOne'\n```\nHow to extract the date of purchase.\n```python\nfrom budget_system import ParserTableName\n\nfile_name = 'Purchase_List_StoreOne_[23-04-22].csv'\n\ntable_date = ParserTableName(file_name).get_table_date()\n\nprint(table_date) #'23-04-22'\n```\nHow to get the **name of the store** and the **date of purchase**.\n```python\nfrom budget_system import ParserTableName\n\nfile_name = 'Purchase_List_StoreOne_[23-04-22].csv'\n\nstore_name, table_date = ParserTableName(file_name).get_all()\n\nprint(f\"File: {file_name}\")\nprint(f\"Name of the store: {store_name}\")\nprint(f\"Table date: {table_date}\")\n```\n## Translation\nThe package has two languages integrated by default, **English (ENG)** and **Spanish (SPA)**.\n\nThis is mainly used for **the months** in the **Budget System** folder tree, **display messages** and **error messages**.\n\nAs the text used is very little, the package has two specialized classes to facilitate the integration of **new languages** to the package for **your personal use**.\n\nSpecifically:\n* You can **add new languages**.\n* **Add and translate** in one step.\n* **Translate to available languages** (either by default or added for future uses).\n\nI **recommend** creating the Budget System in **English or Spanish** and translating it later, if necessary. For compatibility issues.\n\n### Only translation\n\nSuppose that your operating system is configured by default in Spanish, and you did not explicitly specify that the **Budget System** be in English. But you need it in English. For this case you **only need a translation**.\n\nFor this we use the **_translate_month_folders_** method of the **Budget** class.\n```python\nimport os\nfrom budget_system import Budget\nfrom budget_system.settings.Config import ConfigBudget\n\nbase_folder = r\"C:\\Users\\username\\Documents\\MyBudget\"\n\n#If the environment variable for the configuration has not been set, we set it.\nif not os.environ.get('CONFIG_BUDGET'):\n  os.environ['CONFIG_BUDGET'] = os.path.join(base_folder, 'config.ini')\n\nconfig_path = ConfigBudget().CONFIG_FILE_PATH\nBudget.translate_month_folders(config_path, 'SPA', 'ENG')\n```\n   \n * As you can see, you can also use the **CONFIG_BUDGET** environment variable to get the configuration file directory, instead of using the **ConfigBudget** class.\n * First the **current language** is passed, and then the one you want to translate to.\n * It can be translated into languages **other than Spanish or English**, if these have been **previously added**, to learn **how to add a new language** read later.\n * The **_translate_month_folders_** function not only translates the directories, it also **changes the language in the configuration file**.\n### Add a new language\nYou can add the language through **a file** with the translated text strings or with **a dictionary**.\n\n#### By File\nThe recommended and most practical method is through **a file**. You just translate the following text (which we will call **_main_lang_text.txt_**) and save it to a **text file**.\n```\nJanuary, February, March, April, May, June, July, August, September, October, November, December\nmessage_monthnotvalid = The month entered is not valid.\nmessage_monthempty = Missing to assign a month for the search.\nmessage_totalspent = Total Spent\nmessage_yearspent = Expenses made in {year}\nmessage_monthspent = Expenses made in {month}\nmessage_datespent = Spent\nmessage_leastexpensive = Products with less cost\nmessage_mostexpensive = Products with greater cost\nmessage_foldertreedoesntexist = The required folder tree has not been created.\nmessage_invalidconfigfile = An environment valid variable has not been assigned for config.\nmessage_unallocatedconfigfile = Missing setting environment variable CONFIG_BUDGET with path of config.ini\n```\n* The **first line** corresponds to the **months**. They must be **separated by commas** and **ordered**.\n* The **text to the left** of the equal must remain **intact**, it corresponds to the **variables used for the messages**.\n* **{year}** and **{month}** are variables. therefore they should not be translated or modified in any way.\n* **CONFIG_BUDGET**, **config.ini** must remain the same, to make sense.\n\nTo add the language we would use the **FileToLangContext** class and its **_add_new_lang_** method.\n```python\nfrom budget_system import FileToLangContext\n# from budget_system.settings.config import ConfigBudget\n\nnew_lang_file = f\"C:\\Users\\username\\Documents\\portuguese_lang_text.txt\"\nlang_key_name = \"POR\"\nfile_to = FileToLangContext(new_lang_file)\nfile_to.add_new_lang(lang_key_name)\n\n# config_path = ConfigBudget().CONFIG_FILE_PATH\n# Budget.translate_month_folders(config_path, 'ENG', 'POR')\n```\n* **portuguese_lang_text.txt** would be the translation of **main_lang_text.txt**, taking into account all the previous indications.\n* As a standard, it is recommended to use the first three uppercase letters of the language name in English as the key name of the language. For example for Portuguese we use **\"POR\"**.\n* If we define the environment variable **CONFIG_BUDGET** and uncomment the lines, in addition to adding, it would be **translated from English to Portuguese**.\n#### By Dictionary\nTo add the language **without file** we would use the **SupportLanguage** class and its **_add_new_lang_** method.\n```python\nfrom budget_system import SupportLanguage\n\nnew_lang = \"GER\"\nmonths = [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"]\nsections = {\n    \"Month\" : {\n        \"message_MonthNotValid\": \"Der eingegebene Monat ist ungültig.\",\n        \"message_MonthEmpty\": \"Zuweisung des Monats für die Suche fehlt.\"\n    },\n    \"ShowData\" : {\n        \"message_TotalSpent\": \"Gesamtausgaben\",\n        \"message_YearSpent\": \"Ausgegeben in {year}\",\n        \"message_MonthSpent\": \"Ausgegeben in {month}\",\n        \"message_DateSpent\": \"Verbracht\",\n        \"message_LeastExpensive\": \"Produkte zu einem niedrigeren Preis\",\n        \"message_MostExpensive\": \"Produkte mit höheren Kosten\"\n    },\n    \"BudgetSystem\" : {\n        \"message_FolderTreeDoesntExist\" : \"Der erforderliche Ordnerbaum wurde nicht erstellt.\"\n    },\n    \"Settings\" : {\n        \"message_InvalidConfigFile\": \"Für die Konfiguration wurde keine gültige Umgebungsvariable zugewiesen.\",\n        \"message_UnallocatedConfigFile\": \"Fehlende CONFIG_BUDGET Tuning-Umgebungsvariable mit Pfad zu config.ini\"\n    }\n}\n\ntranslation_system = SupportLanguage(\n                                    new_lang=new_lang,\n                                    months=months,\n                                    sections=sections\n                                    )\n\ntranslation_system.add_new_lang()\n```\n### Add a new language and Translate\nYou can add and translate the language through **a file** with the translated text strings or with **a dictionary**.\n\n#### By File\nThe recommended and most practical method is through **a file**. You just translate the following text (which we will call **_main_lang_text.txt_**) and save it to a **text file**.\n```\nJanuary, February, March, April, May, June, July, August, September, October, November, December\nmessage_monthnotvalid = The month entered is not valid.\nmessage_monthempty = Missing to assign a month for the search.\nmessage_totalspent = Total Spent\nmessage_yearspent = Expenses made in {year}\nmessage_monthspent = Expenses made in {month}\nmessage_datespent = Spent\nmessage_leastexpensive = Products with less cost\nmessage_mostexpensive = Products with greater cost\nmessage_foldertreedoesntexist = The required folder tree has not been created.\nmessage_invalidconfigfile = An environment valid variable has not been assigned for config.\nmessage_unallocatedconfigfile = Missing setting environment variable CONFIG_BUDGET with path of config.ini\n```\n* The **first line** corresponds to the **months**. They must be **separated by commas** and **ordered**.\n* The **text to the left** of the equal must remain **intact**, it corresponds to the **variables used for the messages**.\n* **{year}** and **{month}** are variables. therefore they should not be translated or modified in any way.\n* **CONFIG_BUDGET**, **config.ini** must remain the same, to make sense.\n\nTo add and translate the language we would use the **FileToLangContext** class and its **_translate_to_new_lang_** method.\n```python\nfrom budget_system import FileToLangContext\nfrom budget_system.settings.config import ConfigBudget\n\nnew_lang_file = f\"C:\\Users\\username\\Documents\\portuguese_lang_text.txt\"\nlang_key_name = \"POR\"\ncurrent_lang = \"ENG\"\nconfig_path = ConfigBudget().CONFIG_FILE_PATH\n\nfile_to = FileToLangContext(new_lang_file)\nfile_to.translate_to_new_lang(\n                new_lang=lang_key_name,\n                config_file_path=config_path,\n                current_lang=current_lang\n                )\n```\n* **portuguese_lang_text.txt** would be the translation of **main_lang_text.txt**, taking into account all the previous indications.\n* As a standard, it is recommended to use the first three uppercase letters of the language name in English as the key name of the language. For example for Portuguese we use **\"POR\"**.\n* Note that we **don't need** to use the **Budget** class to translate.\n#### By Dictionary\nTo add the language and translate **without file** we would use the **SupportLanguage** class and its **_translate_to_new_lang_** method.\n```python\nfrom budget_system import SupportLanguage\nfrom budget_system.settings.config import ConfigBudget\n\nnew_lang = \"GER\"\nmonths = [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"]\nsections = {\n    \"Month\" : {\n        \"message_MonthNotValid\": \"Der eingegebene Monat ist ungültig.\",\n        \"message_MonthEmpty\": \"Zuweisung des Monats für die Suche fehlt.\"\n    },\n    \"ShowData\" : {\n        \"message_TotalSpent\": \"Gesamtausgaben\",\n        \"message_YearSpent\": \"Ausgegeben in {year}\",\n        \"message_MonthSpent\": \"Ausgegeben in {month}\",\n        \"message_DateSpent\": \"Verbracht\",\n        \"message_LeastExpensive\": \"Produkte zu einem niedrigeren Preis\",\n        \"message_MostExpensive\": \"Produkte mit höheren Kosten\"\n    },\n    \"BudgetSystem\" : {\n        \"message_FolderTreeDoesntExist\" : \"Der erforderliche Ordnerbaum wurde nicht erstellt.\"\n    },\n    \"Settings\" : {\n        \"message_InvalidConfigFile\": \"Für die Konfiguration wurde keine gültige Umgebungsvariable zugewiesen.\",\n        \"message_UnallocatedConfigFile\": \"Fehlende CONFIG_BUDGET Tuning-Umgebungsvariable mit Pfad zu config.ini\"\n    }\n}\n\nconfig_file_path = ConfigBudget().CONFIG_FILE_PATH\ncurrent_lang = \"ENG\"\n\ntranslation_system = SupportLanguage(\n                                    new_lang=new_lang,\n                                    months=months,\n                                    sections=sections,\n                                    config_file_path=config_file_path,\n                                    current_lang=current_lang\n                                    )\n\ntranslation_system.translate_to_new_lang()\n```\n* For the translation you need in addition to what is required to add the language, the **current language** of the **Budget System** and the **location of its configuration file**. These parameters are mandatory.\n\n## License\n\nMIT License\n\nCopyright (c) 2022 Carlos Perilla Budget System\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n[pandas install]: https://pypi.org/project/pandas/\n[colorama install]: https://pypi.org/project/colorama/\n[numpy install]: https://pypi.org/project/numpy/\n[date format python]: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/carlosmperilla/budget-system",
    "keywords": "spent expenses purchase budget system python package carlosmperilla",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "budget-system",
    "package_url": "https://pypi.org/project/budget-system/",
    "platform": null,
    "project_url": "https://pypi.org/project/budget-system/",
    "project_urls": {
      "Homepage": "https://github.com/carlosmperilla/budget-system"
    },
    "release_url": "https://pypi.org/project/budget-system/1.0.3/",
    "requires_dist": [
      "colorama (>=0.4.4)",
      "numpy (>=1.21.6)",
      "pandas (>=1.3.5)"
    ],
    "requires_python": "",
    "summary": "Package to manage budgets for the year, month, store and date of purchase.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14570728,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f55fbeaf95d2377dc6354229c11a764d65ec4ad7c4868dafa27bb6a0b8e38219",
          "md5": "0fbf70af2c39c9813bd1e14790f353ac",
          "sha256": "ec11b3911bf424ba9b7e6b7f07626cdfd8334e82e873fcf3a95117b55f76d9af"
        },
        "downloads": -1,
        "filename": "budget_system-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fbf70af2c39c9813bd1e14790f353ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37800,
        "upload_time": "2022-05-18T13:39:11",
        "upload_time_iso_8601": "2022-05-18T13:39:11.819678Z",
        "url": "https://files.pythonhosted.org/packages/f5/5f/beaf95d2377dc6354229c11a764d65ec4ad7c4868dafa27bb6a0b8e38219/budget_system-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10ce4135ab0a70cabf05ce091adf1a0bad8804426ff39c37de9d80704c9c53c0",
          "md5": "0d6168b61b5fdb56dfd619517d34587c",
          "sha256": "f1c65a9044aa254f3d3d339cf16c92322be2b31d3c7880f888aa602c7697b71c"
        },
        "downloads": -1,
        "filename": "budget_system-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d6168b61b5fdb56dfd619517d34587c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44536,
        "upload_time": "2022-05-18T13:39:17",
        "upload_time_iso_8601": "2022-05-18T13:39:17.169471Z",
        "url": "https://files.pythonhosted.org/packages/10/ce/4135ab0a70cabf05ce091adf1a0bad8804426ff39c37de9d80704c9c53c0/budget_system-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcb1e8cba1d8419cc84ca0bb5822d81a3b69133379bd96c57e0fce9281629a27",
          "md5": "2190715c949a695694d20908beb22058",
          "sha256": "eff3e73f37cb689e5bfda56523de53cff06aeed5f760811cac657634922a3150"
        },
        "downloads": -1,
        "filename": "budget_system-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2190715c949a695694d20908beb22058",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37808,
        "upload_time": "2022-07-15T13:07:13",
        "upload_time_iso_8601": "2022-07-15T13:07:13.777652Z",
        "url": "https://files.pythonhosted.org/packages/fc/b1/e8cba1d8419cc84ca0bb5822d81a3b69133379bd96c57e0fce9281629a27/budget_system-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6359902b0e6eb29bfbbb16b0d33a8b364504102803506f88b06d24c6b4e128f",
          "md5": "96b498cae9223042ddaf4aa114744d39",
          "sha256": "1b0bdd739023ec7fe6cf4be6a21c936e6e864add024b8d88b855743409788133"
        },
        "downloads": -1,
        "filename": "budget_system-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "96b498cae9223042ddaf4aa114744d39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44551,
        "upload_time": "2022-07-15T13:07:19",
        "upload_time_iso_8601": "2022-07-15T13:07:19.087272Z",
        "url": "https://files.pythonhosted.org/packages/c6/35/9902b0e6eb29bfbbb16b0d33a8b364504102803506f88b06d24c6b4e128f/budget_system-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7b75bfabcdebbf3d879d41284d519d50fd854b2f3048d37ebcd684502482696",
          "md5": "229bf77f355deccb37d9a31ae9c0a657",
          "sha256": "abee53e75fd1fcf33df1c4cef6797a819f953b8ce6dede87272a9af4455e7756"
        },
        "downloads": -1,
        "filename": "budget_system-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "229bf77f355deccb37d9a31ae9c0a657",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38347,
        "upload_time": "2022-07-24T15:27:37",
        "upload_time_iso_8601": "2022-07-24T15:27:37.733100Z",
        "url": "https://files.pythonhosted.org/packages/e7/b7/5bfabcdebbf3d879d41284d519d50fd854b2f3048d37ebcd684502482696/budget_system-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "836bf4db6524708b12586261b107b368ee9847964b31d795902497bd9fa04ddd",
          "md5": "fee66798b7739c1626dc79df75ab2219",
          "sha256": "461c5c536da210d4f1a2de69e366cbc828e1ad0d333b1656f7823c9cbaf24a62"
        },
        "downloads": -1,
        "filename": "budget_system-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fee66798b7739c1626dc79df75ab2219",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45562,
        "upload_time": "2022-07-24T15:27:41",
        "upload_time_iso_8601": "2022-07-24T15:27:41.996885Z",
        "url": "https://files.pythonhosted.org/packages/83/6b/f4db6524708b12586261b107b368ee9847964b31d795902497bd9fa04ddd/budget_system-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7dc3d37049dc729a0e22b0e09f5e037caa8dd5111136b4f9ddcb60e6bfb0191",
          "md5": "bcf7e8b8d1d78c1a35153762f01c62a7",
          "sha256": "34b596f6677a0bc32b55fb0fb86a8e4cef238d8e49ae03875cb562520b43aeb7"
        },
        "downloads": -1,
        "filename": "budget_system-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcf7e8b8d1d78c1a35153762f01c62a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38347,
        "upload_time": "2022-07-27T22:39:02",
        "upload_time_iso_8601": "2022-07-27T22:39:02.886108Z",
        "url": "https://files.pythonhosted.org/packages/f7/dc/3d37049dc729a0e22b0e09f5e037caa8dd5111136b4f9ddcb60e6bfb0191/budget_system-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7b83a6ac71b5fb0789d722b9f48d75d815aa45f8be7c848d426f2c210c11e5d",
          "md5": "63eb32af69a0823e44ec45b4b9734937",
          "sha256": "1f7e95469e17368af1747f40dd5357fc9f9cee0d4ca38d7820ae32d39513611b"
        },
        "downloads": -1,
        "filename": "budget_system-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "63eb32af69a0823e44ec45b4b9734937",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45570,
        "upload_time": "2022-07-27T22:39:18",
        "upload_time_iso_8601": "2022-07-27T22:39:18.355897Z",
        "url": "https://files.pythonhosted.org/packages/d7/b8/3a6ac71b5fb0789d722b9f48d75d815aa45f8be7c848d426f2c210c11e5d/budget_system-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7dc3d37049dc729a0e22b0e09f5e037caa8dd5111136b4f9ddcb60e6bfb0191",
        "md5": "bcf7e8b8d1d78c1a35153762f01c62a7",
        "sha256": "34b596f6677a0bc32b55fb0fb86a8e4cef238d8e49ae03875cb562520b43aeb7"
      },
      "downloads": -1,
      "filename": "budget_system-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bcf7e8b8d1d78c1a35153762f01c62a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 38347,
      "upload_time": "2022-07-27T22:39:02",
      "upload_time_iso_8601": "2022-07-27T22:39:02.886108Z",
      "url": "https://files.pythonhosted.org/packages/f7/dc/3d37049dc729a0e22b0e09f5e037caa8dd5111136b4f9ddcb60e6bfb0191/budget_system-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7b83a6ac71b5fb0789d722b9f48d75d815aa45f8be7c848d426f2c210c11e5d",
        "md5": "63eb32af69a0823e44ec45b4b9734937",
        "sha256": "1f7e95469e17368af1747f40dd5357fc9f9cee0d4ca38d7820ae32d39513611b"
      },
      "downloads": -1,
      "filename": "budget_system-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "63eb32af69a0823e44ec45b4b9734937",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45570,
      "upload_time": "2022-07-27T22:39:18",
      "upload_time_iso_8601": "2022-07-27T22:39:18.355897Z",
      "url": "https://files.pythonhosted.org/packages/d7/b8/3a6ac71b5fb0789d722b9f48d75d815aa45f8be7c848d426f2c210c11e5d/budget_system-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}