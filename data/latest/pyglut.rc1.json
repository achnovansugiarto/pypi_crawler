{
  "info": {
    "author": "Eddie Bruggemann",
    "author_email": "mrcyberfighter@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "===================\npyglut description.\n===================\n\n--------------------------------------\n**pyglut for python OpenGL utilities**\n--------------------------------------\n\n+++++++++++++++++++++++\nThe module description:\n+++++++++++++++++++++++\n\n\n                                                                                                                                     \n  pyglut is an module complementary to the pyopengl (The OpenGL implementation for python) module, \n  \n  which will help you on the hard way of the 3D programmation with OpenGL.\n  \n  Which implementing severals utilities for severals usages like: \n  \n    * Differents datatypes for Vertex, Color, Vectors, Matrix and Localview management.\n    \n    * Utilities function for distances and centers computing, rotations, scaling and translation movemenent and some other.\n    \n    * Polygons and polyhedrons generators functions.\n    \n    * Predefine 3D polyhedrons objects like the Plato polyhedrons and some other.           \n        \n        \n:note: **Some usages examples scripts and an the complete module description documentation of the module is provided in addition to the sources files.**                                                                                                                                                        \n                                                \n\n+++++++++++++++++\npyglut datatypes:\n+++++++++++++++++\n\n~~~~~~~~~~~~~~\nDatatype Color\n~~~~~~~~~~~~~~  \n    \n    Color management class implementing the <type ‘**Color**’> datatype.\n\n    The color can be encoded either as unsigned bytes or as floats.\n    \n    And the Color class implement conversion and getting methods.\n    \n    This datatype is build to interact with pyopengl color functions.\n      \n~~~~~~~~~~~~~~~ \nDatatype Vertex \n~~~~~~~~~~~~~~~\n\n    Vertices management class implementing the <type ‘**Vertex**’> datatype.\n\n    Holding the coordinate part x, y and z of an vertice.\n            \n    With a getter method to interact with the pyopengl vertex functions.         \n            \n~~~~~~~~~~~~~~~\nDatatype Vector\n~~~~~~~~~~~~~~~                     \n\n    Vector management class implementing the <type ‘**Vector**’> datatype.\n    \n    With many vectors operations methods: addition, substraction, multiplication, division and negation.\n    \n        The Vector class implement operation sign placeholder for this operations. \n    \n    And others like: vector length getting, vector normalizing, vertex adding, cross product. \n                   \n~~~~~~~~~~~~~~~~~~\nDatatype Localview\n~~~~~~~~~~~~~~~~~~\n\n    An **Localview** is an object representing either an\n\n        * Camera view.\n        \n        * Local axes (X, Y, Z) of an 3D object.\n\n    An locaview is made from:\n\n        * An localview position vertex, object from type *Vertex*.\n\n            which is the position from:\n\n                    + The camera.\n                    \n                    + The center from the 3D object.\n\n        referenced as an attribute named: Localview.pos\n\n        * 3 axes, objects from type *Vector* Representing either:\n            \n            + The camera orientation.\n            \n            + The own axes from the 3D object.\n\n        referenced as attributes named: Localview.right, Localview.up, Localview.sight.           \n                   \n~~~~~~~~~~~~~~~\nDatatype Matrix\n~~~~~~~~~~~~~~~\n\n    Implement an **Matrix** class to process *move*, *scaling*, *matrix*, *vectors*, *localviews* and *vertex* operations.\n\n    The matrix computing is the heart of the 3D programmation.\n\n    You can configure the matrix to apply changing to your 3D object with the primary operations:\n\n        * *Scaling*\n        \n        * *Translating*\n        \n        * *Rotation* around the X, Y, Z axes.\n\n    and others for matrix, vectors, localviews and vertex operations.\n\n    And finally for replacing or multiply the OpenGL MODELVIEW matrix with the matrix containing the desire settings for views implementing per example.\n\n    And many others usage...\n                   \n++++++++++++\npyglut utils\n++++++++++++\n\n~~~~~~~~~~~~~~~~~~\nPrimary Operations\n~~~~~~~~~~~~~~~~~~\n\n    * function **translate(...)**\n    \n        Translate an vertice from the given offset in every axes directions from the wanted values.\n        \n    * function **scale(...)**\n    \n        Scale an vertex from the wanted scaling factor.\n        \n    * function **rotate_x(...)**\n    \n        Rotate an vertice around the X axe and return the result position vertice.\n        \n    * function **rotate_y(...)**\n    \n        Rotate an vertice around the Y axe and return the result position vertice.\n        \n    * function **rotate_z(...)**\n    \n        Rotate an vertice around the Z axe and return the result position vertice.\n      \n:note: You can do the same by using an matrix.      \n              \n~~~~~~~~~~~~\nCenter utils\n~~~~~~~~~~~~\n\n    * function **get_middle_from_segment(...)**\n    \n        Return the middle point of an segment as an object from type Vertex.\n        \n    * function **get_center_from_polygon(...)**\n    \n        Return the center of an polygon as an object from type Vertex.\n        \n    * function **get_center_from_polyhedron(...)**\n    \n        Return the center of an polyhedron as an object from type Vertex.\n        \n~~~~~~~~~~~~\nLength utils\n~~~~~~~~~~~~        \n\n    * function **get_distance_vertices(...)**\n    \n        Return the distance between 2 vertices.\n        \n    * function **get_perimeter_from_polygon(...)**\n    \n        Return the length of the perimeter an the polygon.\n        \n    * function **get_perimeter_from_polyhedron(...)**\n    \n        Return the length of the perimeter from an polyhedron.\n        \n~~~~~~~~~~~~~~\nRotation utils\n~~~~~~~~~~~~~~\n\n    * function **rotate_on_xy(...)**\n    \n        Function to rotate an vertice around an center in the XY plan from the wanted angle value.\n        \n    * function **rotate_on_xz(...)**\n    \n        Function to rotate an vertice around an center in the XZ plan from the wanted angle value.\n        \n    * function **rotate_on_yz(...)**\n    \n        Function to rotate an vertice around an center in the YZ plan from the wanted angle value.\n        \n~~~~~~~~~~~~~~~~~~~\nMiscellaneous utils    \n~~~~~~~~~~~~~~~~~~~\n\n    * function **div_segment_into_vertices(...)**\n    \n        Return an sequence from vertices between 2 vertices.\n        \n+++++++++++++++++\npyglut generators                                             \n+++++++++++++++++  \n\n~~~~~~~~~~~~~~~~~~~\nPolygons generators\n~~~~~~~~~~~~~~~~~~~\n\n    * function **generate_polygon_on_xy_radius(...)**\n    \n        Generate an polygon in the plan XY with the given settings.\n    \n    * function **generate_polygon_on_xz_radius(...)**\n    \n        Generate an polygon in the plan XZ with the given settings.\n        \n    * function **generate_polygon_on_yz_radius(...)**\n    \n        Generate an polygon in the plan YZ with the given settings.\n        \n    * function **generate_polygon_on_xy_side_length(...)**\n    \n        Generate an polygon in the plan XY with the given settings.\n        \n    * function **generate_polygon_on_xz_side_length(...)**\n    \n        Generate an polygon in the plan XZ with the given settings.\n        \n    * function **generate_polygon_on_yz_side_length(...)**\n    \n        Generate an polygon in the plan YZ with the given settings.\n     \n:note: This *low-level* function does not return an polygon object, but only the Vertex list to build it.    \n        \n~~~~~~~~~~~~~~~~~~~~~~\nPolyhedrons generators\n~~~~~~~~~~~~~~~~~~~~~~\n\n    * function **generate_tetrahedron(...)**\n    \n        Generate an tetrahedron in relationship to the given side length.\n        \n    * function **generate_cube(...)**\n    \n        Generate an cube in relationship to the given side length.\n        \n    * function **generate_octahedron(...)**\n    \n        Generate an octahedron from the given side length.\n        \n    * function **generate_dodecahedron(...)**\n    \n        Generate an dodecahedron in relationship to the argument side_length taken as basis for the dodecahedron generation.\n        \n    * function **generate_icosahedron(...)**\n    \n        Generate an icosahedron from the given side length.\n        \n    * function **generate_fulleren(...)**\n    \n        Generate an fulleren from the given side length.\n        \n    * function **generate_toros(...)**\n    \n        Generate an toros in relationship to the given settings.\n        \n    * function **generate_polyhedron_26_faces(...)**\n    \n        Generate an 26 faces polyhedron from the given side length.\n        \n    * function **generate_polyhedron_32_faces(...)**\n    \n        Generate an 32 faces polyhedron from the given side length.\n \n:note: This *low-level* function does not return an polyhedron object, but only the Vertex list to build it. \n        \n~~~~~~~~~~~~~~~~~~\nSpheres generators\n~~~~~~~~~~~~~~~~~~\n\n    * function **generate_quad_sphere(...)**\n    \n        Generate an quads sphere (an sphere with trapeze faces).\n        \n    * function **generate_trigon_sphere(...)**\n    \n        Generate an trigon sphere (an sphere with trigon faces).                                                         \n    \n:note: This *low-level* function does not return an sphere object, but only the Vertex list to build it.                \n        \n+++++++++++++++++++++++++++++\nPredefine polyhedrons objects\n+++++++++++++++++++++++++++++\n\n~~~~~~~~~~~~~~~~~\nPlato polyhedrons\n~~~~~~~~~~~~~~~~~\n\n    Classes: **Tetrahedron**, **Cube**, **Octahedron**, **Dodecahedron** and **Icosahedron** generating objects with the given settings.\n    \n    Implementing following methods:\n    \n        * **update_pos(matrix)**\n        \n            Apply the changes contains in the matrix to the object.\n            \n        * **display()**\n        \n            Display the polyhedron.\n           \n        And setter methods for the **lines colors**, the **faces color(s)**, the **display mode**, the **line width** and other settings. \n        \n~~~~~~~~~~~~~~~~~\nOther polyhedrons\n~~~~~~~~~~~~~~~~~\n\n    2 Polyhedrons more available:\n    \n        * An **26 faces polyhedron** composed from triangles and quads.\n        \n        * An **32 faces polyhedron** composed from triangles and pentagons.\n        \n~~~~~~~~~~~~~~~~~~\nFulleren and toros\n~~~~~~~~~~~~~~~~~~             \n\n    Classes: **Fulleren** (an soccer balll likewise polyhedron) and **Toros** (An tires likewise polyhedron) generating objects with the given settings.\n    \n    Implementing following methods:\n    \n        * **update_pos(matrix)**\n        \n            Apply the changes contains in the matrix to the object.\n            \n        * **display()**\n        \n            Display the polyhedron.\n           \n        And setter methods for the **lines colors**, the **faces color(s)**, the **display mode**, the **line width** and other settings.\n        \n~~~~~~~\nSpheres\n~~~~~~~\n\n    Classes: **Quad_Sphere** and **Trigon_Sphere** generating objects with the given settings.\n    \n    Implementing following methods:\n    \n        * **update_pos(matrix)**\n        \n            Apply the changes contains in the matrix to the object.\n            \n        * **display()**\n        \n            Display the polyhedron.\n           \n        And setter methods for the **lines colors**, the **faces color**, the **display mode**, the **line width** and other settings.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mrcyberfighter/pyglut",
    "keywords": null,
    "license": "GPLv3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pyglut",
    "package_url": "https://pypi.org/project/pyglut/",
    "platform": "Linux,Windows",
    "project_url": "https://pypi.org/project/pyglut/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/mrcyberfighter/pyglut"
    },
    "release_url": "https://pypi.org/project/pyglut/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "pyglut an pyopengl utilities module with severals 3D programming helper classes and functions utilities.This module implement low-levels forms generating, utils, datatypes and predefine 3D objects.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1231910,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5052d7388347e6b46c998bbb70d4d46d58a0321e69b175734e18cb220762e009",
          "md5": "d6c8d156855e9f64111c2d7c7c3b36f4",
          "sha256": "c1221327ce47ddde62c8186c0a73bf0d4873e4b37cce6d64fc6eb76950b9c86e"
        },
        "downloads": -1,
        "filename": "pyglut-1.0.0.zip",
        "has_sig": false,
        "md5_digest": "d6c8d156855e9f64111c2d7c7c3b36f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 603908,
        "upload_time": "2014-09-21T00:22:00",
        "upload_time_iso_8601": "2014-09-21T00:22:00.375612Z",
        "url": "https://files.pythonhosted.org/packages/50/52/d7388347e6b46c998bbb70d4d46d58a0321e69b175734e18cb220762e009/pyglut-1.0.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5052d7388347e6b46c998bbb70d4d46d58a0321e69b175734e18cb220762e009",
        "md5": "d6c8d156855e9f64111c2d7c7c3b36f4",
        "sha256": "c1221327ce47ddde62c8186c0a73bf0d4873e4b37cce6d64fc6eb76950b9c86e"
      },
      "downloads": -1,
      "filename": "pyglut-1.0.0.zip",
      "has_sig": false,
      "md5_digest": "d6c8d156855e9f64111c2d7c7c3b36f4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 603908,
      "upload_time": "2014-09-21T00:22:00",
      "upload_time_iso_8601": "2014-09-21T00:22:00.375612Z",
      "url": "https://files.pythonhosted.org/packages/50/52/d7388347e6b46c998bbb70d4d46d58a0321e69b175734e18cb220762e009/pyglut-1.0.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}