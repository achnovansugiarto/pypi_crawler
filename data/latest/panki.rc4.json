{
  "info": {
    "author": "Zach McAuliffe",
    "author_email": "zach.mcauliffe@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# panki\n\n[![pipeline status](https://gitlab.com/x4ku/panki/badges/master/pipeline.svg)](https://gitlab.com/x4ku/panki/-/commits/master)\n[![coverage report](https://gitlab.com/x4ku/panki/badges/master/coverage.svg)](https://gitlab.com/x4ku/panki/-/commits/master)\n\nA project management tool for Anki deck builders.\n\n## Contents\n\n- [Installation]\n- [Getting Started]\n- [Scaffolding]\n  - [Project Scaffolding]\n- [Configuration]\n  - [Project Configuration]\n  - [Note Type Configuration]\n  - [Card Type Configuration]\n  - [Deck Configuration]\n  - [Note Configuration]\n- [Note Data]\n- [Templates and Styling]\n- [Working with Anki Collections]\n  - [Dumping Package Files]\n  - [Exporting Anki Collections]\n- [License]\n\n## Installation\n\nYou can install panki with pip:\n```sh\n$ pip install panki\n```\n\nYou should be able to use panki now:\n```sh\n$ panki --help\n```\n\nIf you are starting a fresh project, please see the [Getting Started] section.\nThis section will walk you through setting up a basic project with panki. Panki\nis very flexible - if the basic project structure is too simple for your needs,\nplease see the [`examples/`] directory for example project structures and the\n[Configuration] section for more information about configuring your project.\n\n## Getting Started\n\nFirst, let's get some terminology out of the way. In Anki, a **Deck** contains\none-to-many **Notes**. One-to-many **Cards** are created from each **Note**.\n**Notes** are created from generic **Note Types**. **Cards** are created from\ngeneric **Card Types**. **Note Types** contain one-to-many **Card Types** and\ncan be used across multiple **Decks**.\n\nSee the [Anki documentation (Key Concepts)] for more information about the\nvarious objects within Anki and how they relate to each other.\n\nIn this guide, we'll be creating a very basic deck with a single note type and a\nsingle card type. Please see the [`examples/`] directory for more complicated\nproject structures, including multi-note-type and multi-card-type projects, as\nwell as multi-deck projects. The project we'll be building in this section is\nlisted under [`examples/basic`] if you need to refer to it.\n\nLet's create a deck for memorizing the symbols of all of the elements on the\nperiodic table of elements. You can use the `panki create project` command to\ngenerate a new project:\n```sh\n$ panki create project periodic-table\n```\n\nThe project will be created under the directory name passed to\n`panki create project`, so `periodic-table/` in this case. Please make sure that\nthis directory does not already exist - for safety reasons, panki will not\ncreate the project if the directory already exists.\n\nAfter running `panki create project`, you should have a `periodic-table/`\ndirectory with the following contents:\n```\nperiodic-table\n├── data.csv\n├── project.json\n└── template.html\n```\n\nThe `project.json` file contains all of the configuration for this project.\nPanki uses this file to understand how your project is set up and how you'd like\nthe project to be built. The project configuration can also be split up among\nmultiple files if this file becomes too unwieldy - see the [Configuration]\nsection for more information.\n\nThe default `project.json` should look similar to the following (your IDs will\nbe different):\n```json\n{\n  \"name\": \"New Project\",\n  \"noteTypes\": [\n    {\n      \"id\": 1234567890123,\n      \"name\": \"Basic (panki)\",\n      \"fields\": [\n        \"Front\",\n        \"Back\"\n      ],\n      \"cardTypes\": [\n        {\n          \"name\": \"Card\",\n          \"template\": \"template.html\"\n        }\n      ]\n    }\n  ],\n  \"decks\": [\n    {\n      \"id\": 1234567890124,\n      \"name\": \"New Deck\",\n      \"package\": \"deck.apkg\",\n      \"notes\": [\n        {\n          \"type\": \"Basic (panki)\",\n          \"data\": \"data.csv\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nThe `data.csv` file will eventually contain the data used to generate the deck's\nnotes. The default `data.csv` file is empty. A CSV file is generated by default,\nbut panki supports multiple data formats. If you would like to separate your\ndata across multiple files, that is also possible. See the [Note Data] section\nfor more information.\n\nThe `template.html` file is the HTML template for a card type. Everything within\nthe `<front>` tag will be used for the front (or question) side of the card.\nLikewise, everything within the `<back>` tag will be used for the back (or\nanswer) side of the card. You can customize the styling of the card by adding\ncustom CSS to the `<style>` tag of this template. If you would like to apply\ncommon styling to more than just one card type, that is also possible. See the\n[Templates and Styling] section for more information.\n\nThe default `template.html` file is very similar to the Anki \"Basic\" template:\n```html\n<template>\n  <style>\n    .card {\n      font-family: arial;\n      font-size: 20px;\n      text-align: center;\n      color: black;\n      background-color: white;\n    }\n  </style>\n  <front>\n    {{Front}}\n  </front>\n  <back>\n    {{FrontSide}}\n    <hr id=\"answer\">\n    {{Back}}\n  </back>\n</template>\n```\n\nThe default note type contains two fields: `Front` and `Back`. If you look in\n`template.html`, you'll see placeholders for `{{Front}}` and `{{Back}}`\nrespectively.\n\nFor this project, we will create a custom note type instead of using the default\nnote type. Our note type will use the field `Element` for the element name\n(ex. Oxygen) and `Symbol` for the element symbol (ex. O). Let's open\n`project.json` and modify the note type accordingly. We'll also update the\nproject name and deck name to better describe this project.\n\nYour `project.json` file should look something like this after these changes:\n```json\n{\n  \"name\": \"Periodic Table of Elements\",\n  \"noteTypes\": [\n    {\n      \"id\": 1234567890123,\n      \"name\": \"Element Symbol\",\n      \"fields\": [\"Element\", \"Symbol\"],\n      \"cardTypes\": [\n        {\n          \"name\": \"Element Symbol\",\n          \"template\": \"template.html\"\n        }\n      ]\n    }\n  ],\n  \"decks\": [\n    {\n      \"id\": 1234567890124,\n      \"name\": \"Element Symbols\",\n      \"package\": \"deck.apkg\",\n      \"notes\": [\n        {\n          \"type\": \"Element Symbol\",\n          \"data\": \"data.csv\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nNow let's update our `template.html` file to incorporate our new fields. We'll\neven add some custom CSS to make the element symbol a bit more fancy.\n```html\n<template>\n  <style>\n    .card {\n      font-family: Arial;\n      font-size: 20px;\n      text-align: center;\n      color: black;\n      background-color: white;\n    }\n    .symbol {\n      font-size: 1.5em;\n      border: 2px solid black;\n      padding: 10px;\n    }\n  </style>\n  <front>\n    What is the symbol for <b>{{Element}}</b>?\n  </front>\n  <back>\n    {{FrontSide}}\n    <hr id=\"answer\">\n    <div class=\"symbol\">\n      {{Symbol}}\n    </div>\n  </back>\n</template>\n```\n\nFinally, let's add our data. You can copy the contents of\n[`examples/basic/data.csv`] into your `data.csv` file or add your own data.\nMake sure that the header (first row) of `data.csv` contains the field names\n(ex. `Element,Symbol`) and that your data is in the same order (ex. `Oxygen,O`).\n\nWe should now have everything we need to generate our deck. You can generate the\ndeck by running the `panki build` command from the project's root directory:\n```sh\n$ panki build\n```\n\nBy default, the deck will be created at `deck.apkg` in the root directory of\nthe project. You can change the name of the file and its location by modifying\nthe `\"package\"` value in the `\"deck\"` section of the `project.json` file.\n\nAfter building the project, you should be able to import the generated\n`deck.apkg` file into Anki using the `Import File` button or `File` > `Menu`\nfrom the main menu. **Warning: Please make sure you always backup your\ncollection (`File` > `Export`) before importing decks into Anki, especially if\nyou're updating an existing deck. If the import fails, or worse corrupts your\nAnki database, then at least you will be able to restore your decks and progress\nfrom the backup.**\n\nPlease refer to the rest of this readme for more advanced ways to use panki in\nyour deck building workflow.\n\n## Scaffolding\n\nYou can scaffold out new projects and new project components using the\n`panki create` command.\n\nIt is not required to use the scaffolding tool, of course - you could just\ncreate all of the files and directories yourself if you know what you're doing -\nbut using the tool has several advantages. The scaffolding tool will ensure that\nproject files are created correctly. Commands to generate common project\nstructures can easily be shared with others. You can also build upon the\nscaffolding commands by using them in your own tools and scripts.\n\n### Project Scaffolding\n\nTo create a new project, execute the `panki create project` command:\n```sh\n$ panki create project <directory>\n```\n\nReplace `<directory>` with the name of the new project directory. Make sure that\nthis directory does not exist before running this command. Panki will not create\nthe project if the directory already exists.\n\nYou can set the name of the project by passing the `--name` option:\n```sh\n$ panki create project periodic-table --name \"Periodic Table of Elements\"\n```\n\nIf you would like to package all of the decks in the project as a single `.apkg`\nfile, you can pass the `--package` option.\n```sh\n$ panki create project periodic-table \\\n  --name \"Periodic Table of Elements\" \\\n  --package @/packages/periodic-table.apkg\n```\n\n#### Note Type Options\n\nYou can set the name of a note type by passing the `--note-type` option:\n```sh\n$ panki create project periodic-table --note-type \"Element Symbol\"\n```\n\nYou can create multiple note types by passing multiple `--note-type` options:\n```sh\n$ panki create project periodic-table \\\n    --note-type \"Element Symbol\" \\\n    --note-type \"Element Atomic Number\" \\\n    --note-type \"Element Group\" \\\n    --note-type \"Element Block\"\n```\n\nYou can pass the following additional options to further customize a note type:\n  - **`--note-type-config <note-type> <path>`**: Place the configuration for the\n    note type with name `<note-type>` outside of `project.json` in an external\n    file located at `<path>`.\n  - **`--fields <note-type> <fields>`**: Set the fields of the note type with\n    name `<note-type>` to the comma-separated list of `<fields>`\n    (ex. `Element,Symbol`).\n  - **`--css <note-type> <paths>`**: Set the css files of the note type with\n    name `<note-type>` to the comma separated list of `<paths>`\n    (ex. `common.css,symbol.css`)\n  - **`--card-type <note-type> <name> <template>`**: Add a card type to the note\n    type with name `<note-type>` with the provided card type `<name>` and\n    `<template>` path. A minimal template file will be created at `<template>`.\n\nIf no note types are provided, a \"Basic (panki)\" default note type is created.\n\n#### Deck Options\n\nYou can set the name of a deck by passing the `--deck` option:\n```sh\n$ panki create project periodic-table --deck \"Element Symbols\"\n```\n\nThis will also set the deck's `package` field to a stripped-down version of the\ndeck name. You can change this value by providing the `--deck-package` option\n(see below).\n\nYou can create multiple decks by passing multiple `--deck` options:\n```sh\n$ panki create project periodic-table \\\n    --deck \"Element Symbols\" \\\n    --deck \"Element Atomic Numbers\" \\\n    --deck \"Element Groups\" \\\n    --deck \"Element Blocks\"\n```\n\nYou can pass the following additional options to further customize the decks:\n  - **`--deck-config <deck> <path>`**: Place the deck configuration for the deck\n    with name `<deck>` outside of `project.json` in an external file at\n    `<path>`.\n  - **`--deck-package <deck> <path>`**: Set the package path of the deck with\n    name `<deck>` to `<path>`. Make sure the path ends with `.apkg`.\n  - **`--notes <deck> <note-type> <data-files>`**: Add a group of notes to the\n    deck with name `<deck>` which are of type `<note-type>` and are created from\n    the data in the provided `<data-files>` list of paths. If you would like to\n    specify multiple data files, use a comma-separated list\n    (ex. `\"data1.csv,data2.csv,data3.csv\"`). Empty data files will be created at\n    the provided paths.\n\nIf no deck configuration is provided, an empty default deck is created.\n\n#### Examples\n\nThe following command will scaffold out a project structure in which each deck\nis separated out into its own subdirectory. All of the decks are stored under a\n`decks/` directory, and each deck contains a `deck.json` file with the deck's\nconfiguration. Note data is also stored in the deck directory. All of the note\ntypes are stored under a `note-types/` directory, and each note type contains a\n`note-type.json` file with the note type's configuration. Card type templates\nare also stored in the note type directory.\n```sh\n$ panki create project periodic-table \\\n    \\\n    --name \"Periodic Table of Elements\" \\\n    --package @/packages/periodic-table.apkg \\\n    \\\n    --note-type-config \"Element Symbol\" note-types/symbol/note-type.json \\\n    --fields \"Element Symbol\" Element,Symbol \\\n    --css \"Element Symbol\" @/note-types/common.css,@/note-types/symbol.css \\\n    --card-type \"Element Symbol\" Forward template.forward.html \\\n    --card-type \"Element Symbol\" Reverse template.reverse.html \\\n    \\\n    --note-type-config \"Element Atomic Number\" note-types/atomic-number/note-type.json \\\n    --fields \"Element Atomic Number\" Element,AtomicNumber \\\n    --css \"Element Atomic Number\" @/note-types/common.css \\\n    --card-type \"Element Atomic Number\" Forward template.forward.html \\\n    --card-type \"Element Atomic Number\" Reverse template.reverse.html \\\n    \\\n    --note-type-config \"Element Year Discovered\" note-types/year-discovered/note-type.json \\\n    --fields \"Element Year Discovered\" Element,YearDiscovered \\\n    --css \"Element Year Discovered\" @/note-types/common.css \\\n    --card-type \"Element Year Discovered\" Forward template.forward.html \\\n    --card-type \"Element Year Discovered\" Reverse template.reverse.html \\\n    \\\n    --deck-config \"Element Symbols\" decks/symbols/deck.json \\\n    --deck-package \"Element Symbols\" @/packages/symbols.apkg \\\n    --notes \"Element Symbols\" \"Element Symbol\" symbols.csv \\\n    \\\n    --deck-config \"Element Atomic Numbers\" decks/atomic-numbers/deck.json \\\n    --deck-package \"Element Atomic Numbers\" @/packages/atomic-numbers.apkg \\\n    --notes \"Element Atomic Numbers\" \"Element Atomic Number\" atomic-numbers.csv \\\n    \\\n    --deck-config \"Element Years Discovered\" decks/years-discovered/deck.json \\\n    --deck-package \"Element Years Discovered\" @/packages/years-discovered.apkg \\\n    --notes \"Element Years Discovered\" \"Element Year Discovered\" years-discovered.csv\n```\n\nThe above command would create the following project structure:\n```\nperiodic-table/\n├── decks\n│   ├── atomic-numbers\n│   │   ├── atomic-numbers.csv\n│   │   └── deck.json\n│   ├── symbols\n│   │   ├── deck.json\n│   │   └── symbols.csv\n│   └── years-discovered\n│       ├── deck.json\n│       └── years-discovered.csv\n├── note-types\n│   ├── atomic-number\n│   │   ├── note-type.json\n│   │   ├── template.forward.html\n│   │   └── template.reverse.html\n│   ├── symbol\n│   │   ├── note-type.json\n│   │   ├── template.forward.html\n│   │   └── template.reverse.html\n│   └── year-discovered\n│       ├── note-type.json\n│       ├── template.forward.html\n│       └── template.reverse.html\n└── project.json\n```\n\nThe following command will scaffold out an alternative project structure in\nwhich all of the project configuration is stored in `project.json` and a `data/`\ndirectory, `templates/` directory, and `styles/` directory are used instead:\n```sh\n$ panki create project periodic-table \\\n    \\\n    --name \"Periodic Table of Elements\" \\\n    --package packages/periodic-table.apkg \\\n    \\\n    --fields \"Element Symbol\" Element,Symbol \\\n    --css \"Element Symbol\" styles/common.css,styles/symbol.css \\\n    --card-type \"Element Symbol\" Forward templates/symbol.forward.html \\\n    --card-type \"Element Symbol\" Reverse templates/symbol.reverse.html \\\n    \\\n    --fields \"Element Atomic Number\" Element,AtomicNumber \\\n    --css \"Element Atomic Number\" styles/common.css \\\n    --card-type \"Element Atomic Number\" Forward templates/atomic-number.forward.html \\\n    --card-type \"Element Atomic Number\" Reverse templates/atomic-number.reverse.html \\\n    \\\n    --fields \"Element Year Discovered\" Element,YearDiscovered \\\n    --css \"Element Year Discovered\" styles/common.css \\\n    --card-type \"Element Year Discovered\" Forward templates/year-discovered.forward.html \\\n    --card-type \"Element Year Discovered\" Reverse templates/year-discovered.reverse.html \\\n    \\\n    --deck-package \"Element Symbols\" packages/symbols.apkg \\\n    --notes \"Element Symbols\" \"Element Symbol\" data/symbols.csv \\\n    \\\n    --deck-package \"Element Atomic Numbers\" packages/atomic-numbers.apkg \\\n    --notes \"Element Atomic Numbers\" \"Element Atomic Number\" data/atomic-numbers.csv \\\n    \\\n    --deck-package \"Element Years Discovered\" packages/years-discovered.apkg \\\n    --notes \"Element Years Discovered\" \"Element Year Discovered\" data/years-discovered.csv\n```\n\nThe above command would create the following project structure:\n```\nperiodic-table/\n├── data\n│   ├── atomic-numbers.csv\n│   ├── symbols.csv\n│   └── years-discovered.csv\n├── project.json\n└── templates\n    ├── atomic-number.forward.html\n    ├── atomic-number.reverse.html\n    ├── symbol.forward.html\n    ├── symbol.reverse.html\n    ├── year-discovered.forward.html\n    └── year-discovered.reverse.html\n```\n\n## Configuration\n\nThe `project.json` file contains configuration for a panki project. It provides\npanki with information about the project and the structure of its files. Sample\nfiles and more information about each configuration item are provided below.\n\nPaths in configuration files are relative to the configuration file that the\npath is in. If the path is prefixed with `@/` (ex. `@/packages/deck.apkg`), then\nthe path will always be relative to the project's root directory, regardless of\nthe directory that the configuration is in.\n\n### Project Configuration\n\nThe `project.json` file from the [Getting Started] section is provided below.\nThis file defines a minimal panki project. All of the configuration is in a\nsingle file, but these items can be split out into multiples files.\n```json\n{\n  \"name\": \"Periodic Table of Elements\",\n  \"noteTypes\": [\n    {\n      \"id\": 1234567890123,\n      \"name\": \"Element Symbol\",\n      \"fields\": [\"Element\", \"Symbol\"],\n      \"cardTypes\": [\n        {\n          \"name\": \"Element Symbol\",\n          \"template\": \"template.html\"\n        }\n      ]\n    }\n  ],\n  \"decks\": [\n    {\n      \"id\": 1234567890124,\n      \"name\": \"Element Symbols\",\n      \"package\": \"deck.apkg\",\n      \"notes\": [\n        {\n          \"type\": \"Element Symbol\",\n          \"data\": \"data.csv\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nThe `name` field is the name of the project.\n\nThe `noteTypes` field contains a list of note type configurations for each note\ntype in the project. See [Note Type Configuration] for more information.\n\nThe `decks` field contains a list of deck configurations for each deck in the\nproject. See [Deck Configuration] for more information.\n\nThe optional `package` field can also be provided. If provided, all of the decks\nin the project will be combined into a single `.apkg` file. Set the value of\nthis field to the path where the `.apkg` file should be created.\n\nThe optional `media` field can also be provided. If provided, all of the files\nin the directories specified will be copied to the Anki collection's\n`collection.media/` directory, making them available to your decks. Set the\nvalue of this field to a list of paths to your media directories. Only files\nwill be copied - directories will be ignored, as Anki does not supported media\nsubdirectories.\n\n### Note Type Configuration\n\nNote type configuration can be split out from your project configuration into a\nseparate file by specifying the path to a note type configuration file:\n```json\n{\n  \"name\": \"Periodic Table of Elements\",\n  ...\n  \"noteTypes\": [\n    \"note-type.json\"\n  ]\n}\n```\n\nIn this case, we've specified that the note type configuration is located in a\nfile called `note-type.json`, but the name of this file and its location are up\nto you.\n\nA common pattern for projects with multiple note types is to create a directory\nfor each note type and place a `note-type.json` file in each of those\ndirectories. The project configuration for such a project might look like the\nfollowing:\n```json\n{\n  \"name\": \"Periodic Table of Elements\",\n  ...\n  \"noteTypes\": [\n    \"note-types/symbol/note-type.json\",\n    \"note-types/atomic-number/note-type.json\",\n    \"note-types/year-discovered/note-type.json\"\n  ]\n}\n```\n\nThe `note-type.json` file would then contain just your note type configuration:\n```json\n{\n  \"id\": 1234567890123,\n  \"name\": \"Element Symbol\",\n  \"fields\": [\"Element\", \"Symbol\"],\n  \"cardTypes\": [\n    {\n      \"name\": \"Element Symbol\",\n      \"template\": \"template.html\"\n    }\n  ]\n}\n```\n\nThe `id` field is automatically generated by panki. This value is used to\nuniquely identify the note type within a user's Anki app and (as best as\npossible) among all note types in existence. Once this value is set, it should\nnever be changed, otherwise there will be problems importing updated version of\nthe note type into Anki.\n\nIf you need to generate an ID, you can use the following command:\n```sh\n$ panki create id\n```\n\nThe `name` field is the name of the note type as it will appear in Anki. This\nname will also be used to link notes in note configuration to this note type.\nIf you change the name of a note type, be sure to update it in the rest of your\nconfiguration. See [Note Configuration] for more information.\n\nThe `fields` field contains a list of the field names used by this note type.\nThese should match the field names in the respective note data files. Only the\nfields specified in `fields` will be selected from your note data files - all\nother fields will be ignored.\n\nThe `cardTypes` field contains a list of configurations for each card type in\nthe note type. See [Card Type Configuration] for more information.\n\n### Card Type Configuration\n\nCard type configuration can be split out from your note type configuration into\na separate file by specifying the path to a card type configuration file:\n```json\n{\n  \"name\": \"Element Symbol\",\n  \"fields\": [\"Element\", \"Symbol\"],\n  \"cardTypes\": [\n    \"card-type.json\"\n  ]\n}\n```\n\nIn this case, we've specified that the card type configuration is located in a\nfile called `card-type.json`, but the name of this file and its location are up\nto you.\n\nSeparating out card type configuration into a separate file is usually overkill,\neven for large projects, but this functionality is available if required.\n\nThe `card-type.json` file would then contain just your card type configuration:\n```json\n{\n  \"name\": \"Element Symbol\",\n  \"template\": \"template.html\"\n}\n```\n\nThe `name` field is the name of the card type as it will appear in Anki.\n\nThe `template` field is the path to the HTML template file for the card type.\nSee the [Templates and Styling] section for more information.\n\n### Deck Configuration\n\nDeck configuration can be split out from your project configuration into a\nseparate file by specifying the path to a deck configuration file:\n```json\n{\n  \"name\": \"Periodic Table of Elements\",\n  \"decks\": [\n    \"deck.json\"\n  ],\n  ...\n}\n```\n\nIn this case, we've specified that the deck configuration is located in a file\ncalled `deck.json`, but the name of this file and its location are up to you.\n\nA common pattern for multi-deck projects is to create a directory for each deck\nand place a `deck.json` file in each directory. The project configuration for\nsuch a project might look like the following:\n```json\n{\n  \"name\": \"Periodic Table of Elements\",\n  \"decks\": [\n    \"decks/symbols/deck.json\",\n    \"decks/atomic-numbers/deck.json\",\n    \"decks/years-discovered/deck.json\"\n  ],\n  ...\n}\n```\n\nThe `deck.json` file would then contain just your deck configuration:\n```json\n{\n  \"id\": 1234567890124,\n  \"name\": \"Element Symbols\",\n  \"package\": \"deck.apkg\",\n  \"notes\": [\n    {\n      \"type\": \"Element Symbol\",\n      \"data\": \"data.csv\"\n    }\n  ]\n}\n```\n\nThe `id` field is automatically generated by panki. This value is used to\nuniquely identify the deck within a user's Anki app and (as best as possible)\namong all decks in existence. Once this value is set, it should never be\nchanged, otherwise there will be problems importing updated version of the deck\ninto Anki.\n\nIf you need to generate an ID, you can use the following command:\n```sh\n$ panki create id\n```\n\nThe `name` field is the name of the deck as it will appear in Anki. Remember\nthat you can create a deck tree by naming your decks with a `::` between the\nparent deck name and the subdeck names.\n\nFor example, all of the following subdecks would be nested under the\n`Periodic Table` parent deck in Anki:\n  - `Periodic Table :: Symbols`\n  - `Periodic Table :: Atomic Numbers`\n  - `Periodic Table :: Groups`\n  - `Periodic Table :: Blocks`\n\nThe `package` field is the path of the file that will be generated when the\nproject is built with `panki build`. This file should end with `.apkg`.\n\nThe `notes` field contains a list of note configurations for each group of notes\nin the deck. See the [Note Configuration] section for more information.\n\n### Note Configuration\n\nNote configuration can be split out from your deck configuration into a separate\nfile by specifying the path to a note configuration file:\n```json\n{\n  \"id\": 1234567890124,\n  \"name\": \"Element Symbols\",\n  \"package\": \"deck.apkg\",\n  \"notes\": [\n    \"note.json\"\n  ]\n}\n```\n\nIn this case, we've specified that the note configuration is located in a file\ncalled `note.json`, but the name of this file and its location are up to you.\n\nSeparating out note configuration into a separate file is usually overkill, even\nfor large projects, but this functionality is available if required.\n\nThe `note.json` file would then contain just your note configuration:\n```json\n{\n  \"type\": \"Element Symbol\",\n  \"data\": \"data.csv\"\n}\n```\n\nThe `type` field is the name of the note type that the notes in this group will\nbe created from. Make sure you remember to change this value if the note type's\nname ever changes, otherwise the notes will not be linked correctly.\n\nThe `data` field is the path to a note data file or a list of paths to several\nnote data files. Notes will be created and added to the deck in the order\nspecified in this field. See the [Note Data] section for more information.\n\nThe optional `guid` field can be specified to control the format of the note\nGUID that will be created and assigned to the note. This field is often provided\nif the default method of generating the GUID is not sufficient to guarantee the\nuniqueness of a note. Note GUIDs prevent duplicate notes from being created in\ncertain cases and ensure that the correct notes are updated when importing\npackage files. They should be unique across all notes.\n\nBy default, the note GUID is created by Base64-encoding the deck ID, the note\ntype ID, and the value of the first field specified in the note type\nconfiguration's `fields` field. The GUID format should be specified in the\n[python string format syntax]. All of the fields in the record are available.\nThe deck ID and the note type ID are also available from the special\n`__DeckName__` and `__NoteTypeID__` fields, respectively.\n\nFor example, to specify the GUID format as a combination of the deck ID, note\ntype ID, `Element` field value, and `Symbol` field value:\n```json\n{\n  \"type\": \"Element Symbol\",\n  \"guid\": \"{__DeckID__}:{__NoteTypeID__}:{Element}:{Symbol}\",\n  \"data\": \"data.csv\"\n}\n```\n\nThe value created from this format will be Base64-encoded to create the final\nnote GUID.\n\n## Note Data\n\nNote data can be provided in one or many CSV, JSON, and/or YAML files. The order\nof the cards in the generated Anki deck will correspond to the order of the data\nin your data files.\n\n### CSV Data Files\n\nFor CSV files, the header (first row) of the file should contain the field\nnames. These fields will be read from each row in the order specified, so make\nsure that your data is in the same order as your field names.\n\nExample:\n```csv\nElement,Symbol\nHydrogen,H\nHelium,He\nLithium,Li\nBeryllium,Be\nBoron,B\nCarbon,C\nNitrogen,N\nOxygen,O\nFluorine,F\nNeon,Ne\n...\n```\n\n### JSON/YAML Data Files\n\nFor JSON and YAML files, the contents of the file should be a list and each\nitem in the list should be an object. Each of these objects should have keys\ncorresponding to the note field names.\n\nJSON Example:\n```json\n[\n  {\"Element\": \"Hydrogen\", \"Symbol\": \"H\"},\n  {\"Element\": \"Helium\", \"Symbol\": \"He\"},\n  {\"Element\": \"Lithium\", \"Symbol\": \"Li\"},\n  {\"Element\": \"Beryllium\", \"Symbol\": \"Be\"},\n  {\"Element\": \"Boron\", \"Symbol\": \"B\"},\n  {\"Element\": \"Carbon\", \"Symbol\": \"C\"},\n  {\"Element\": \"Nitrogen\", \"Symbol\": \"N\"},\n  {\"Element\": \"Oxygen\", \"Symbol\": \"O\"},\n  {\"Element\": \"Fluorine\", \"Symbol\": \"F\"},\n  {\"Element\": \"Neon\", \"Symbol\": \"Ne\"},\n  ...\n]\n```\n\nYAML Example:\n```yaml\n# Elements in period 1:\n- Element: Hydrogen\n  Symbol: H\n- Element: Helium\n  Symbol: He\n\n# Elements in period 2:\n- Element: Lithium\n  Symbol: Li\n- Element: Beryllium\n  Symbol: Be\n- Element: Boron\n  Symbol: B\n- Element: Carbon\n  Symbol: C\n- Element: Nitrogen\n  Symbol: N\n- Element: Oxygen\n  Symbol: O\n- Element: Fluorine\n  Symbol: F\n- Element: Neon\n  Symbol: Ne\n\n# ...\n```\n\nAn advantage of using YAML for your note data is that you can include comments\nwithin your data file. A disadvantage of the YAML and JSON formats is that they\nare not as compact as CSV files, but this may be an acceptable tradeoff,\ndepending on how you manage your data. The deck generated from the data will be\nthe same size, regardless of the format of your data files.\n\n### Multiple Data Files\n\nYou can choose to organize your data across multiple data files if this makes\nsense for organizational purposes. You may also wish to segment your data in\norder to better control the ordering of the cards in your deck, especially when\nyour cards are generated from multiple note types.\n\nSticking with the periodic table of elements theme, you may wish to segment\nelements by period and store all of your data files in a `data/` directory. In\nthis case, your note configuration might look like the following:\n```json\n{\n  \"type\": \"Element Symbol\",\n  \"data\": [\n    \"data/period1.csv\",\n    \"data/period2.json\",\n    \"data/period3.yaml\",\n    ...\n  ],\n  ...\n}\n```\n\nIf you have multiple decks in a project, they usually have their own data files,\nbut there's nothing stopping you from using the same data file for each deck or\nsharing a core set of data files between several decks if this makes sense for\nyour project. If you are using a data file multiple times within the same deck,\nyou will likely need to set the `guid` field in the deck's note configuration to\nanother pattern in order to avoid creating duplicate cards. See the\n[Note Configuration] section for more information.\n\nRemember that you can use other tools and scripts alongside panki. If your data\nrequires extra processing or a conversion process, you can perform that step\njust prior to generating a deck.\n\n## Templates and Styling\n\nTemplates define the structure and style of a card type. Note types contain\none-to-many card types from which cards are generated. Note types can be shared\nacross multiple decks.\n\nThe default panki template looks like this:\n```html\n<template>\n  <style>\n    .card {\n      font-family: arial;\n      font-size: 20px;\n      text-align: center;\n      color: black;\n      background-color: white;\n    }\n  </style>\n  <front>\n    {{Front}}\n  </front>\n  <back>\n    {{FrontSide}}\n    <hr id=\"answer\">\n    {{Back}}\n  </back>\n</template>\n```\n\nTemplates must contain a root element, `<template>`, and a `<front>` and\n`<back>` element nested under this root element. You can also provide the\noptional `<style>` element under the root element.\n\nIn Anki, CSS is assigned to a note type, so the CSS applies to all card types\ndefined in the note type. The CSS provided in the `<style>` tag of each card\ntype template will be merged together in the order specified in the note type\nconfiguration in order to create the final CSS for the note type.\n\nIf there is common CSS that you'd like to place outside of your individual\ntemplates, you can provide the optional `\"css\"` field in your note type\nconfiguration with a path or list of paths to external `.css` files. The CSS in\nthese files will be merged together in the order specified and then the CSS from\nthe `<style>` elements of the card type templates will be appended to create the\nfinal CSS for the note type.\n\nFor example, if you store your common CSS in a `common.css` file, your note type\nconfiguration might look something like this:\n```json\n{\n  \"id\": 1234567890123,\n  \"name\": \"Element Symbol\",\n  \"fields\": [\"Element\", \"Symbol\"],\n  \"css\": \"common.css\",\n  \"cardTypes\": [\n    {\n      \"name\": \"Element Symbol\",\n      \"template\": \"template.forward.html\"\n    },\n    {\n      \"name\": \"Element Symbol (Reverse)\",\n      \"template\": \"template.reverse.html\"\n    }\n  ]\n}\n```\n\nYou can also specify multiple stylesheets and refer to the project root\ndirectory with the `@/` path prefix:\n```json\n{\n  \"id\": 1234567890123,\n  \"name\": \"Element Symbol\",\n  \"fields\": [\"Element\", \"Symbol\"],\n  \"css\": [\n    \"@/styles/common.css\",\n    \"@/styles/symbol.css\"\n  ],\n  \"cardTypes\": [\n    {\n      \"name\": \"Element Symbol\",\n      \"template\": \"template.forward.html\"\n    },\n    {\n      \"name\": \"Element Symbol (Reverse)\",\n      \"template\": \"template.reverse.html\"\n    }\n  ]\n}\n```\n\nSee the [Anki documentation (Card Templates)] for more information about\ntemplates and styling.\n\n## Working with Anki Collections\n\npanki provides a few extra commands for working with Anki collections directly.\nYou might use these commands to take a closer look at the contents of a package\nfile, as part a more complicated build process, or to make changes to an Anki\npackage manually whether it be to fix something or for some other reason.\n\n### Dumping Package Files\n\nIt can be very useful to dump the contents of an Anki `.apkg` or `.colpkg` file\ninto a more convenient format for inspection or for further processing. Panki\nprovides the ability to dump the contents of a package with the `panki dump`\ncommand:\n```sh\n$ panki dump <package> <directory>\n```\n\nReplace `<package>` with the path to the `.apkg` or `.colpkg` file that you'd\nlike to dump.\n\nReplace `<directory>` with the path to the directory that you'd like panki to\ndump the contents of the package into. This directory should not already exist.\n\nAfter running `panki dump`, the directory will contain a `collection.anki2` file\nthat you can connect to with SQLite3:\n```sh\n$ sqlite3 path/to/collection.anki2\n```\n\nA `tables/` directory will also be created, containing a folder for each\ndatabase table in the `collection.anki2` file. In each folder, panki will create\na `table.json` file with metadata about the table, a `schema.sql` file with the\ntable schema in the form of a SQL `CREATE` command, and a `rows.csv` file with\nthe rows of the table in CSV format, if applicable.\n\nSee `panki dump -h` for more information.\n\n### Exporting Anki Collections\n\nYou can export an Anki collection (`collection.anki2`) into an Anki package\n(`.apkg` or `.colpkg`) using the `panki export` command:\n```sh\n$ panki export path/to/collection.anki2 path/to/package.colpkg\n```\n\nIf you'd like to only export a specific deck from the collection, you can\nspecify the deck ID using the `--deck` option:\n```\n$ panki export path/to/collection.anki2 path/to/package.apkg \\\n      --deck 1234567890123\n```\n\nSee `panki export -h` for more information.\n\n## License\n\nThis project is licensed under the **MIT License**. Please see the `LICENSE`\nfile for more information.\n\nThis project is not affiliated with the [Anki](https://apps.ankiweb.net/)\nproject.\n\n\n<!-- links: -->\n\n[Installation]: #installation\n[Getting Started]: #getting-started\n\n[Scaffolding]: #scaffolding\n[Project Scaffolding]: #project-scaffolding\n\n[Configuration]: #configuration\n[Project Configuration]: #project-configuration\n[Note Type Configuration]: #note-type-configuration\n[Card Type Configuration]: #card-type-configuration\n[Deck Configuration]: #deck-configuration\n[Note Configuration]: #note-configuration\n\n[Note Data]: #note-data\n\n[Templates and Styling]: #templates-and-styling\n\n[Working with Anki Collections]: #working-with-anki-collections\n[Dumping Package Files]: #dumping-anki-packages\n[Exporting Anki Collections]: #exporting-anki-collections\n\n[License]: #license\n\n[`examples/`]: examples\n[`examples/basic`]: examples/basic\n[`examples/basic/data.csv`]: examples/basic/data.csv\n\n[python string format syntax]: https://docs.python.org/3/library/string.html#format-string-syntax\n\n[Anki documentation (Key Concepts)]: https://docs.ankiweb.net/#/getting-started?id=key-concepts\n[Anki documentation (Card Templates)]: https://docs.ankiweb.net/#/templates/intro\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/x4ku/panki",
    "keywords": "panki anki flashcard deck project",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "panki",
    "package_url": "https://pypi.org/project/panki/",
    "platform": "",
    "project_url": "https://pypi.org/project/panki/",
    "project_urls": {
      "Homepage": "https://gitlab.com/x4ku/panki"
    },
    "release_url": "https://pypi.org/project/panki/0.1.2/",
    "requires_dist": [
      "anki (==2.1.40)",
      "beautifulsoup4 (==4.9.1)",
      "click (==7.1.2)",
      "PyYAML (==5.3.1)"
    ],
    "requires_python": ">=3.8",
    "summary": "A project management tool for Anki deck builders",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9347991,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2ef013f212e2392c5e8c2d4e320966a2e530884634bb7b8065bb0353c629882",
          "md5": "df9f11db77edf6ba9303ee3dac0fc3da",
          "sha256": "9d36d7a5065d21a22bdc3aa398293e1ea42b7b02bb63701dfbd8ad3420435475"
        },
        "downloads": -1,
        "filename": "panki-0.0.1-20200903022621-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df9f11db77edf6ba9303ee3dac0fc3da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24805,
        "upload_time": "2020-09-03T06:45:31",
        "upload_time_iso_8601": "2020-09-03T06:45:31.907662Z",
        "url": "https://files.pythonhosted.org/packages/f2/ef/013f212e2392c5e8c2d4e320966a2e530884634bb7b8065bb0353c629882/panki-0.0.1-20200903022621-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c77069464d32fd4fc3cc644ad3a80d6df41e99a9145ec27e366f59ad7c619c6",
          "md5": "415e6174389011cd3ef781f0f630ccfe",
          "sha256": "60e6a058df2affc6fcbf30a679f0b736a3a3b8aa8c83f5149c934aeded329d31"
        },
        "downloads": -1,
        "filename": "panki-0.1.0-20201121201515-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "415e6174389011cd3ef781f0f630ccfe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25900,
        "upload_time": "2020-11-22T01:18:12",
        "upload_time_iso_8601": "2020-11-22T01:18:12.693483Z",
        "url": "https://files.pythonhosted.org/packages/6c/77/069464d32fd4fc3cc644ad3a80d6df41e99a9145ec27e366f59ad7c619c6/panki-0.1.0-20201121201515-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01b8ac73287beffebb77cfae03fbb46f7b609c9d5cf2707224dca3ab7e62d070",
          "md5": "85b58b48e977173fa6815ff54394f966",
          "sha256": "c533905b0182e493399bd37f763441b33f5f2b9d9c0136c020495791f2cf4fd3"
        },
        "downloads": -1,
        "filename": "panki-0.1.1-20201214183751-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85b58b48e977173fa6815ff54394f966",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24742,
        "upload_time": "2020-12-15T00:05:10",
        "upload_time_iso_8601": "2020-12-15T00:05:10.380718Z",
        "url": "https://files.pythonhosted.org/packages/01/b8/ac73287beffebb77cfae03fbb46f7b609c9d5cf2707224dca3ab7e62d070/panki-0.1.1-20201214183751-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c786167e148e2ba6ca11b455fb9d2ef8aa3507e9fd618469948e3aca0238513",
          "md5": "b33ec692bfba0806ada18a800764f1da",
          "sha256": "2720b6b832471d416444dca0420f2994b9821dadbcbafcd478211b8575c7b036"
        },
        "downloads": -1,
        "filename": "panki-0.1.2-20210208013015-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b33ec692bfba0806ada18a800764f1da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 24746,
        "upload_time": "2021-02-08T06:30:29",
        "upload_time_iso_8601": "2021-02-08T06:30:29.331952Z",
        "url": "https://files.pythonhosted.org/packages/4c/78/6167e148e2ba6ca11b455fb9d2ef8aa3507e9fd618469948e3aca0238513/panki-0.1.2-20210208013015-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c786167e148e2ba6ca11b455fb9d2ef8aa3507e9fd618469948e3aca0238513",
        "md5": "b33ec692bfba0806ada18a800764f1da",
        "sha256": "2720b6b832471d416444dca0420f2994b9821dadbcbafcd478211b8575c7b036"
      },
      "downloads": -1,
      "filename": "panki-0.1.2-20210208013015-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b33ec692bfba0806ada18a800764f1da",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 24746,
      "upload_time": "2021-02-08T06:30:29",
      "upload_time_iso_8601": "2021-02-08T06:30:29.331952Z",
      "url": "https://files.pythonhosted.org/packages/4c/78/6167e148e2ba6ca11b455fb9d2ef8aa3507e9fd618469948e3aca0238513/panki-0.1.2-20210208013015-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}