{
  "info": {
    "author": "Konrad Ha≈Ças and PAL",
    "author_email": "halas.konrad@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# rhyolite\n\n### This is a fork of [dacite](https://github.com/konradhalas/dacite).\n\n(Just like \"dacite\", \"rhyolite\" is a type of volcanic rock.)\n\nThis module simplifies creation of data classes ([PEP 557][pep-557])\nfrom dictionaries.\n\n## Installation\n\nTo install rhyolite, simply use `pip`:\n\n```\n$ pip install rhyolite\n```\n\n## Requirements\n\nMinimum Python version supported by `rhyolite` is 3.6.\n\n## Quick start\n\n```python\nfrom dataclasses import dataclass\nfrom rhyolite import from_dict\n\n\n@dataclass\nclass User:\n    name: str\n    age: int\n    is_active: bool\n\n\ndata = {\n    'name': 'John',\n    'age': 30,\n    'is_active': True,\n}\n\nuser = from_dict(data_class=User, data=data)\n\nassert user == User(name='John', age=30, is_active=True)\n```\n\n## Features\n\nrhyolite supports following features:\n\n- nested structures\n- (basic) types checking\n- optional fields (i.e. `typing.Optional`)\n- unions\n- forward references\n- collections\n- custom type hooks\n\n## Motivation\n\nPassing plain dictionaries as a data container between your functions or\nmethods isn't a good practice. Of course you can always create your\ncustom class instead, but this solution is an overkill if you only want\nto merge a few fields within a single object.\n\nFortunately Python has a good solution to this problem - data classes.\nThanks to `@dataclass` decorator you can easily create a new custom\ntype with a list of given fields in a declarative manner. Data classes\nsupport type hints by design.\n\nHowever, even if you are using data classes, you have to create their\ninstances somehow. In many such cases, your input is a dictionary - it\ncan be a payload from a HTTP request or a raw data from a database. If\nyou want to convert those dictionaries into data classes, `rhyolite` is\nyour best friend.\n\nThis library was originally created to simplify creation of type hinted\ndata transfer objects (DTO) which can cross the boundaries in the\napplication architecture.\n\nIt's important to mention that `rhyolite` is not a data validation library.\nThere are dozens of awesome data validation projects and it doesn't make\nsense to duplicate this functionality within `rhyolite`. If you want to \nvalidate your data first, you should combine `rhyolite` with one of data \nvalidation library.\n\nPlease check [Use Case](#use-case) section for a real-life example.\n\n## Usage\n\nrhyolite is based on a single function - `rhyolite.from_dict`. This function\ntakes 3 parameters:\n\n- `data_class` - data class type\n- `data` - dictionary of input data\n- `config` (optional) - configuration of the creation process, instance\nof `rhyolite.Config` class\n\nConfiguration is a (data) class with following fields:\n\n- `type_hooks`\n- `cast`\n- `forward_references`\n- `check_types`\n- `strict`\n- `strict_unions_match`\n\nThe examples below show all features of `from_dict` function and usage\nof all `Config` parameters.\n\n### Nested structures\n\nYou can pass a data with nested dictionaries and it will create a proper\nresult.\n\n```python\n@dataclass\nclass A:\n    x: str\n    y: int\n\n\n@dataclass\nclass B:\n    a: A\n\n\ndata = {\n    'a': {\n        'x': 'test',\n        'y': 1,\n    }\n}\n\nresult = from_dict(data_class=B, data=data)\n\nassert result == B(a=A(x='test', y=1))\n```\n\n### Optional fields\n\nWhenever your data class has a `Optional` field and you will not provide\ninput data for this field, it will take the `None` value.\n\n```python\nfrom typing import Optional\n\n@dataclass\nclass A:\n    x: str\n    y: Optional[int]\n\n\ndata = {\n    'x': 'test',\n}\n\nresult = from_dict(data_class=A, data=data)\n\nassert result == A(x='test', y=None)\n```\n\n### Unions\n\nIf your field can accept multiple types, you should use `Union`. rhyolite\nwill try to match data with provided types one by one. If none will\nmatch, it will raise `UnionMatchError` exception.\n\n```python\nfrom typing import Union\n\n@dataclass\nclass A:\n    x: str\n\n@dataclass\nclass B:\n    y: int\n\n@dataclass\nclass C:\n    u: Union[A, B]\n\n\ndata = {\n    'u': {\n        'y': 1,\n    },\n}\n\nresult = from_dict(data_class=C, data=data)\n\nassert result == C(u=B(y=1))\n```\n\n### Collections\n\nrhyolite supports fields defined as collections. It works for both - basic\ntypes and data classes.\n\n```python\n@dataclass\nclass A:\n    x: str\n    y: int\n\n\n@dataclass\nclass B:\n    a_list: List[A]\n\n\ndata = {\n    'a_list': [\n        {\n            'x': 'test1',\n            'y': 1,\n        },\n        {\n            'x': 'test2',\n            'y': 2,\n        }\n    ],\n}\n\nresult = from_dict(data_class=B, data=data)\n\nassert result == B(a_list=[A(x='test1', y=1), A(x='test2', y=2)])\n```\n\n### Type hooks\n\nYou can use `Config.type_hooks` argument if you want to transform the input \ndata of a data class field with given type into the new value. You have to \npass a following mapping: `{Type: callable}`, where `callable` is a \n`Callable[[Any], Any]`.\n\n```python\n@dataclass\nclass A:\n    x: str\n\n\ndata = {\n    'x': 'TEST',\n}\n\nresult = from_dict(data_class=A, data=data, config=Config(type_hooks={str: str.lower}))\n\nassert result == A(x='test')\n```\n\nIf a data class field type is a `Optional[T]` you can pass both - \n`Optional[T]` or just `T` - as a key in `type_hooks`. The same with generic \ncollections, e.g. when a field has type `List[T]` you can use `List[T]` to \ntransform whole collection or `T` to transform each item. \n\n### Casting\n\nIt's a very common case that you want to create an instance of a field type \nfrom the input data with just calling your type with the input value. Of \ncourse you can use `type_hooks={T: T}` to achieve this goal but `cast=[T]` is \nan easier and more expressive way. It also works with base classes - if `T` \nis a base class of type `S`, all fields of type `S` will be also \"casted\".\n\n```python\nfrom enum import Enum\n\nclass E(Enum):\n    X = 'x'\n    Y = 'y'\n    Z = 'z'\n\n@dataclass\nclass A:\n    e: E\n\n\ndata = {\n    'e': 'x',\n}\n\nresult = from_dict(data_class=A, data=data, config=Config(cast=[E]))\n\n# or\n\nresult = from_dict(data_class=A, data=data, config=Config(cast=[Enum]))\n\nassert result == A(e=E.X)\n```\n\n### Forward References\n\nDefinition of forward references can be passed as a `{'name': Type}` mapping to \n`Config.forward_references`. This dict is passed to `typing.get_type_hints()` as the \n`globalns` param when evaluating each field's type.\n\n```python\n@dataclass\nclass X:\n    y: \"Y\"\n\n@dataclass\nclass Y:\n    s: str\n\ndata = from_dict(X, {\"y\": {\"s\": \"text\"}}, Config(forward_references={\"Y\": Y}))\nassert data == X(Y(\"text\"))\n```\n\n### Types checking\n\nThere are rare cases when `rhyolite` built-in type checker can not validate \nyour types (e.g. custom generic class) or you have such functionality \ncovered by other library and you don't want to validate your types twice. \nIn such case you can disable type checking with `Config(check_types=False)`.\nBy default types checking is enabled.\n\n```python\nT = TypeVar('T')\n\n\nclass X(Generic[T]):\n    pass\n\n\n@dataclass\nclass A:\n    x: X[str]\n\n\nx = X[str]()\n\nassert from_dict(A, {'x': x}, config=Config(check_types=False)) == A(x=x)\n```\n\n### Strict mode\n\nBy default `from_dict` ignores additional keys (not matching data class field) \nin the input data. If you want change this behaviour set `Config.strict` to \n`True`. In case of unexpected key `from_dict` will raise `UnexpectedDataError` \nexception.\n\n### Strict unions match\n\n`Union` allows to define multiple possible types for a given field. By default \n`rhyolite` is trying to find the first matching type for a provided data and it \nreturns instance of this type. It means that it's possible that there are other \nmatching types further on the `Union` types list. With `strict_unions_match` \nonly a single match is allowed, otherwise `rhyolite` raises `StrictUnionMatchError`.\n\n## Exceptions\n\nWhenever something goes wrong, `from_dict` will raise adequate\nexception. There are a few of them:\n\n- `WrongTypeError` - raised when a type of a input value does not match\nwith a type of a data class field\n- `MissingValueError` - raised when you don't provide a value for a\nrequired field\n- `UnionMatchError` - raised when provided data does not match any type\nof `Union`\n- `ForwardReferenceError` - raised when undefined forward reference encountered in\ndataclass\n- `UnexpectedDataError` - raised when `strict` mode is enabled and the input \ndata has not matching keys\n- `StrictUnionMatchError` - raised when `strict_unions_match` mode is enabled \nand the input data has ambiguous `Union` match\n\n## Development\n\nFirst of all - if you want to submit your pull request, thank you very much! \nI really appreciate your support.\n\nPlease remember that every new feature, bug fix or improvement should be tested. \n100% code coverage is a must have. \n\nWe are using a few static code analysis tools to increase the code quality \n(`black`, `mypy`, `pylint`). Please make sure that you are not generating any \nerrors/warnings before you submit your PR. You can find current configuration\nin `.travis.yml` file.\n\nLast but not least, if you want to introduce new feature, please discuss it \nfirst within an issue.\n\n### How to start\n\nClone `rhyolite` repository:\n\n```\n$ git clone git@github.com:konradhalas/rhyolite.git\n```\n\nCreate and activate virtualenv in the way you like:\n\n```\n$ python3 -m venv rhyolite-env\n$ source rhyolite-env/bin/activate\n```\n\nInstall all `rhyolite` dependencies:\n\n```\n$ pip install -e .[dev]\n```\n\nTo run tests you just have to fire:\n\n```\n$ pytest\n```\n\n\n## Use case\n\nThere are many cases when we receive \"raw\" data (Python dicts) as a input to \nour system. HTTP request payload is a very common use case. In most web \nframeworks we receive request data as a simple dictionary. Instead of \npassing this dict down to your \"business\" code, it's a good idea to create \nsomething more \"robust\".\n\nFollowing example is a simple `flask` app - it has single `/products` endpoint.\nYou can use this endpoint to \"create\" product in your system. Our core \n`create_product` function expects data class as a parameter. Thanks to `rhyolite` \nwe can easily build such data class from `POST` request payload.\n\n\n```python\nfrom dataclasses import dataclass\nfrom typing import List\n\nfrom flask import Flask, request, Response\n\nimport rhyolite\n\napp = Flask(__name__)\n\n\n@dataclass\nclass ProductVariantData:\n    code: str\n    description: str = ''\n    stock: int = 0\n\n\n@dataclass\nclass ProductData:\n    name: str\n    price: float\n    variants: List[ProductVariantData]\n\n\ndef create_product(product_data: ProductData) -> None:\n    pass  # your business logic here\n\n\n@app.route(\"/products\", methods=['POST'])\ndef products():\n    product_data = rhyolite.from_dict(\n        data_class=ProductData,\n        data=request.get_json(),\n    )\n    create_product(product_data=product_data)\n    return Response(status=201)\n\n```\n\nWhat if we want to validate our data (e.g. check if `code` has 6 characters)? \nSuch features are out of scope of `rhyolite` but we can easily combine it with \none of data validation library. Let's try with \n[marshmallow](https://marshmallow.readthedocs.io).\n\nFirst of all we have to define our data validation schemas:\n\n```python\nfrom marshmallow import Schema, fields, ValidationError\n\n\ndef validate_code(code):\n    if len(code) != 6:\n        raise ValidationError('Code must have 6 characters.')\n\n\nclass ProductVariantDataSchema(Schema):\n    code = fields.Str(required=True, validate=validate_code)\n    description = fields.Str(required=False)\n    stock = fields.Int(required=False)\n\n\nclass ProductDataSchema(Schema):\n    name = fields.Str(required=True)\n    price = fields.Decimal(required=True)\n    variants = fields.Nested(ProductVariantDataSchema(many=True))\n```\n\nAnd use them within our endpoint:\n\n```python\n@app.route(\"/products\", methods=['POST'])\ndef products():\n    schema = ProductDataSchema()\n    result, errors = schema.load(request.get_json())\n    if errors:\n        return Response(\n            response=json.dumps(errors), \n            status=400, \n            mimetype='application/json',\n        )\n    product_data = rhyolite.from_dict(\n        data_class=ProductData,\n        data=result,\n    )\n    create_product(product_data=product_data)\n    return Response(status=201)\n```\n\nStill `rhyolite` helps us to create data class from \"raw\" dict with validated data.\n\n## Changelog\n\nFollow `rhyolite` updates in [CHANGELOG][changelog].\n\n## Authors\n\nCreated by [Konrad Ha≈Ças][halas-homepage].\n\n[pep-557]: https://www.python.org/dev/peps/pep-0557/\n[halas-homepage]: https://konradhalas.pl\n[changelog]: https://github.com/konradhalas/rhyolite/blob/master/CHANGELOG.md\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/predictive-analytics-lab/rhyolite",
    "keywords": "dataclasses",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rhyolite",
    "package_url": "https://pypi.org/project/rhyolite/",
    "platform": "",
    "project_url": "https://pypi.org/project/rhyolite/",
    "project_urls": {
      "Homepage": "https://github.com/predictive-analytics-lab/rhyolite"
    },
    "release_url": "https://pypi.org/project/rhyolite/1.5.3/",
    "requires_dist": [
      "dataclasses ; python_version < \"3.7\"",
      "pytest (>=5) ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "coveralls ; extra == 'dev'",
      "black ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pylint ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Simple creation of data classes from dictionaries.",
    "version": "1.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8216464,
  "releases": {
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61ff785319d50f301ce72ec9ba4adf9377dc3d73f9a2126d14fdc47a2795715a",
          "md5": "9c580ca14b2f640eb6baa7357eec90fc",
          "sha256": "f2c0f415f88b40b0c0796b9376bdf00ccebcb438d6410dd70f1420a926c5c9d0"
        },
        "downloads": -1,
        "filename": "rhyolite-1.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c580ca14b2f640eb6baa7357eec90fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12334,
        "upload_time": "2020-09-17T15:24:49",
        "upload_time_iso_8601": "2020-09-17T15:24:49.126779Z",
        "url": "https://files.pythonhosted.org/packages/61/ff/785319d50f301ce72ec9ba4adf9377dc3d73f9a2126d14fdc47a2795715a/rhyolite-1.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c497e11096e239143b6b2cd839167930d24dc90294ab44d84f4f577c19139a53",
          "md5": "319dee0c604bd14142ef780d338e24a8",
          "sha256": "59f769233e7db4ad662fbc8bff5d41e80c009b7a5bdb741a2bc1159ce4f2663c"
        },
        "downloads": -1,
        "filename": "rhyolite-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "319dee0c604bd14142ef780d338e24a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16313,
        "upload_time": "2020-09-17T15:24:52",
        "upload_time_iso_8601": "2020-09-17T15:24:52.634780Z",
        "url": "https://files.pythonhosted.org/packages/c4/97/e11096e239143b6b2cd839167930d24dc90294ab44d84f4f577c19139a53/rhyolite-1.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a73334b7653d8a46ec04ae1d2599e650e0a65ad880d8923263ec52fe2a07a1d",
          "md5": "867fbf672d0709d2715eddf5bbaca6c5",
          "sha256": "1f1995e174676931bd7f34f45aaada9944416e4bc086d1c302307d52376d90cb"
        },
        "downloads": -1,
        "filename": "rhyolite-1.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "867fbf672d0709d2715eddf5bbaca6c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12359,
        "upload_time": "2020-09-18T11:25:08",
        "upload_time_iso_8601": "2020-09-18T11:25:08.203067Z",
        "url": "https://files.pythonhosted.org/packages/5a/73/334b7653d8a46ec04ae1d2599e650e0a65ad880d8923263ec52fe2a07a1d/rhyolite-1.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b57d5142896bf9ae3d032a413444590c218a7c6a5d0e386bfda85be27051baf",
          "md5": "a7ee587df3651bf7a28bb090e8ca4465",
          "sha256": "cfc03d1e29a5e812290d5bf9cd0893e091176b3cde66de1ad1ac024e232d8b9c"
        },
        "downloads": -1,
        "filename": "rhyolite-1.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a7ee587df3651bf7a28bb090e8ca4465",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16337,
        "upload_time": "2020-09-18T11:25:09",
        "upload_time_iso_8601": "2020-09-18T11:25:09.587592Z",
        "url": "https://files.pythonhosted.org/packages/0b/57/d5142896bf9ae3d032a413444590c218a7c6a5d0e386bfda85be27051baf/rhyolite-1.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a73334b7653d8a46ec04ae1d2599e650e0a65ad880d8923263ec52fe2a07a1d",
        "md5": "867fbf672d0709d2715eddf5bbaca6c5",
        "sha256": "1f1995e174676931bd7f34f45aaada9944416e4bc086d1c302307d52376d90cb"
      },
      "downloads": -1,
      "filename": "rhyolite-1.5.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "867fbf672d0709d2715eddf5bbaca6c5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12359,
      "upload_time": "2020-09-18T11:25:08",
      "upload_time_iso_8601": "2020-09-18T11:25:08.203067Z",
      "url": "https://files.pythonhosted.org/packages/5a/73/334b7653d8a46ec04ae1d2599e650e0a65ad880d8923263ec52fe2a07a1d/rhyolite-1.5.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b57d5142896bf9ae3d032a413444590c218a7c6a5d0e386bfda85be27051baf",
        "md5": "a7ee587df3651bf7a28bb090e8ca4465",
        "sha256": "cfc03d1e29a5e812290d5bf9cd0893e091176b3cde66de1ad1ac024e232d8b9c"
      },
      "downloads": -1,
      "filename": "rhyolite-1.5.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a7ee587df3651bf7a28bb090e8ca4465",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16337,
      "upload_time": "2020-09-18T11:25:09",
      "upload_time_iso_8601": "2020-09-18T11:25:09.587592Z",
      "url": "https://files.pythonhosted.org/packages/0b/57/d5142896bf9ae3d032a413444590c218a7c6a5d0e386bfda85be27051baf/rhyolite-1.5.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}