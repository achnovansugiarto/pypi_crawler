{
  "info": {
    "author": "Geoffrey M. Poore",
    "author_email": "gpoore@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Documentation",
      "Topic :: Education",
      "Topic :: Software Development",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Documentation",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: Markup"
    ],
    "description": "# Codebraid – live code in Pandoc Markdown\n\nCodebraid is a Python program that enables executable code in\n[Pandoc](http://pandoc.org/) Markdown documents.  Using Codebraid can be as\nsimple as adding a class to your code blocks' attributes, and then running\n`codebraid` rather than `pandoc` to convert your document from Markdown to\nanother format.  `codebraid` supports almost all of `pandoc`'s options and\npasses them to `pandoc` internally.  See\n[Codebraid Preview for VS Code](https://marketplace.visualstudio.com/items?itemName=gpoore.codebraid-preview)\nfor editor support.\n\nCodebraid provides two options for executing code.  It includes a built-in\ncode execution system that currently supports **Python 3.7+**, **Julia**,\n**Rust**, **R**, **Bash**, **JavaScript**, and **SageMath**.  Code can also be\nexecuted using **Jupyter kernels**, with support for rich output like plots.\n\n**Development:**  https://github.com/gpoore/codebraid\n\n**Citing Codebraid:**\n[\"Codebraid: Live Code in Pandoc Markdown\"](http://conference.scipy.org/proceedings/scipy2019/geoffrey_poore.html),\nGeoffrey M. Poore, *Proceedings of the 18th Python in Science Conference,* 2019, 54-61.\n\nView example HTML output, or see the Markdown source or raw HTML (the Python\nand Rust examples demonstrate more advanced features at the end):\n\n  * [Python example](https://htmlpreview.github.io/?https://github.com/gpoore/codebraid/blob/master/examples/python.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/python.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/python.html)]\n  * [Jupyter example](https://htmlpreview.github.io/?https://github.com/gpoore/codebraid/blob/master/examples/jupyter.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/jupyter.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/jupyter.html)]\n  * [Rust example](https://htmlpreview.github.io/?https://github.com/gpoore/codebraid/blob/master/examples/rust.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/rust.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/rust.html)]\n  * [Julia example](https://htmlpreview.github.io/?https://github.com/gpoore/codebraid/blob/master/examples/julia.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/julia.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/julia.html)]\n  * [R example](https://htmlpreview.github.io/?https://github.com/gpoore/codebraid/blob/master/examples/R.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/R.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/R.html)]\n  * [Bash example](https://htmlpreview.github.io/?https://github.com/gpoore/codebraid/blob/master/examples/bash.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/bash.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/bash.html)]\n  * [JavaScript example](https://htmlpreview.github.io/?https://github.com/gpoore/codebraid/blob/master/examples/javascript.html)\n    [[Pandoc Markdown source](https://github.com/gpoore/codebraid/blob/master/examples/javascript.cbmd)]\n    [[raw HTML](https://github.com/gpoore/codebraid/blob/master/examples/javascript.html)]\n\n\n## Simple example\n\nMarkdown source `test.md`:\n\n``````markdown\n```{.python .cb-run}\nvar = 'Hello from Python!'\nvar += ' $2^8 = {}$'.format(2**8)\n```\n\n```{.python .cb-run}\nprint(var)\n```\n``````\n\nRun `codebraid` (to save the output, add something like `-o test_out.md`, and\nadd `--overwrite` if it already exists):\n\n```shell\ncodebraid pandoc --from markdown --to markdown test.md\n```\n\nOutput:\n\n```markdown\nHello from Python! $2^8 = 256$\n```\n\nAs this example illustrates, variables persist between code blocks; by\ndefault, code is executed within a single session.  Code output is also cached\nby default so that code is only re-executed when modified.\n\n\n## Features\n\n### Comparison with [Jupyter](https://jupyter.org/), [knitr](https://yihui.name/knitr/), and [Pweave](http://mpastell.com/pweave/)\n\n|                                                | Codebraid | Jupyter Notebook |  knitr   | Pweave   |\n|------------------------------------------------|-----------|------------------|----------|----------|\n| multiple programming languages per document    | &check;   | &check;&ast;     | &check;† | &check;&ast; |\n| multiple independent sessions per language     | &check;   |                  |          |          |\n| inline code execution within paragraphs        | &check;   |                  | &check;  | &check;  |\n| no out-of-order code execution                 | &check;   |                  | &check;‡ | &check;  |\n| no markdown preprocessor or custom syntax      | &check;   | &check;          |          |          |\n| minimal diffs for easy version control         | &check;   |                  | &check;  | &check;  |\n| insert code output anywhere in a document      | &check;   |                  | &check;  |          |\n| can divide code into incomplete snippets       | &check;   |                  | &check;  | &check;  |\n| support for literate programming               | &check;   |                  | &check;  |          |\n| compatible with any text editor                | &check;   |                  | &check;  | &check;  |\n\n&ast; One primary language from the Jupyter kernel.  The IPython kernel\nsupports additional languages via `%%script` magics.  There is no continuity\nbetween `%%script` cells, because each cell is executed in a separate process.\nSome magics, such as those provided by\n[PyJulia](https://pyjulia.readthedocs.io) and\n[rpy2](https://rpy2.readthedocs.io), provide more advanced capabilities.\n<br>\n† knitr only provides continuity between code chunks for R, and more recently\nPython and Julia.  Code chunks in other languages are executed individually\nin separate processes.\n<br>\n‡ Out-of-order execution is possible with R Markdown notebooks.\n\n<hr>\n\nThe table above summarizes Codebraid features in comparison with Jupyter\nnotebooks (without extensions), knitr (R Markdown), and Pweave, emphasizing\nCodebraid's unique features.  Here are some additional points to consider:\n\n*Jupyter notebooks* — Notebooks have a dedicated, browser-based graphical user\ninterface.  Jupyter kernels typically allow the code in a cell to be executed\nwithout re-executing any preceding code, providing superior interactivity.\nCodebraid has advantages for projects that are more focused on creating a\ndocument than on exploratory programming.\n\n*knitr* — R Markdown documents have a dedicated user interface in R Studio.\nknitr provides superior support for R, as well as significant Python and Julia\nsupport that includes R integration.  Codebraid offers continuity between code\nchunks for all supported languages, as well as multiple independent sessions\nper language.  It also provides unique options for displaying code and its\noutput.\n\n\n\n### More about key features\n\n*Easy debugging* — By default, stderr is shown automatically in the document\nwhenever there is an error, right next to the code that caused it.  It is also\npossible to monitor code output in real time during execution via\n`--live-output`.\n\n*Simple language support* — Codebraid supports Jupyter kernels.  It also has a\nbuilt-in system for executing code.  Adding support for a new language with\nthis system can take only a few minutes.  Just create a config file that tells\nCodebraid which program to run, which file extension to use, and how to write\nto stdout and stderr.  See\n[`languages/`](https://github.com/gpoore/codebraid/tree/master/codebraid/languages)\nfor examples.\n\n*No preprocessor* — Unlike many approaches to making code in Markdown\nexecutable, Codebraid is not a preprocessor.  Rather, Codebraid acts on the\nabstract syntax tree (AST) that Pandoc generates when parsing a document.\nPreprocessors often fail to disable commented-out code blocks because the\npreprocessor doesn't recognize Markdown comments.  Preprocessors can also fail\ndue to the finer points of Markdown parsing.  None of this is an issue for\nCodebraid, because Pandoc does the Markdown parsing.\n\n*No custom syntax* — Codebraid introduces no additional Markdown syntax.\nMaking a code block or inline code executable uses Pandoc's existing syntax\nfor defining code attributes.\n\n\n\n## Installation and requirements\n\n**Installation:**  `pip3 install codebraid` or `pip install codebraid`\n\nManual installation:  `python3 setup.py install` or `python setup.py install`\n\n**Requirements:**\n\n  * [Pandoc](http://pandoc.org/) 2.4+ (2.17.1.1+ recommended for `commonmark_x`).\n  * Python 3.7+ with `setuptools`, and [`bespon`](https://bespon.org) 0.6\n    (`bespon` installation is typically managed by `pip`/`setup.py`)\n\n  * For Jupyter support, [`jupyter_client`](https://pypi.org/project/jupyter-client/)\n    and language kernels\n\n  * For YAML metadata support, [`ruamel.yaml`](https://pypi.org/project/ruamel.yaml/) (can be `ruamel_yaml` for Anaconda installations)\n\n\n\n## Converting a document\n\nSimply run `codebraid pandoc <normal pandoc options>`.  Codebraid currently\nsupports Pandoc Markdown (`--from markdown`) and CommonMark with Pandoc\nextensions (`--from commonmark_x`) as input formats.\n\nNote that `--overwrite` is required to overwrite existing files.  If you are\nusing a defaults file, `--from`, `--to`, and `--output` must be given\nexplicitly and cannot be inherited from the defaults file.  If you are using a\ndefaults file and converting to a standalone Pandoc Markdown document,\n`--standalone` should be given explicitly rather than being inherited from the\ndefaults file.\n\n`codebraid` should typically be run in the same directory as the document, so\nthat the default working directory for code is the document directory.\n\nIf you are converting from Pandoc Markdown to Pandoc Markdown with\n`--standalone` (basically using `codebraid` to preprocess Markdown documents),\nnote that the following YAML metadata fields and command-line options are\nignored in that situation:\n  * `header-includes` and `--include-in-header`\n  * `include-before` and `--include-before-body`\n  * `include-after` and `--include-after-body`\n  * `toc`/`table-of-contents` and `--toc`/`--table-of-contents`\n\nThis is typically what you want.  Usually, \"include\" and a table of contents\nare desired in a final output format like HTML or PDF, not in a Pandoc\nMarkdown file.  In the rare cases where \"includes\" and a table of contents are\nneeded in Markdown documents, this can be accomplished by piping the output of\n`codebraid` through `pandoc`.\n\n\n## Additional non-Pandoc command-line options\n\n* `--live-output` — Show code output (stdout and stderr) live in the terminal\n  during code execution.  For Jupyter kernels, also show  errors and a summary\n  of rich output.  Output still appears in the document as normal.\n\n  Individual sessions can override this by setting `live_output=false` in the\n  document.\n\n* `--no-execute` — Disables code execution.  Only use available cached output.\n\n* `--only-code-output`={format} — Write code output in JSON Lines format to\n  stdout as soon as it is available, and do not create a document.\n\n  This is intended for use with Codebraid Preview, so that document previews\n  can be updated during code execution.  Currently, the only supported format\n  is `codebraid_preview`.  One JSON data object followed by a newline is\n  written to stdout for each code chunk.  In some cases, the data for a chunk\n  will be resent later if the data relevant for a chunk changes (for example,\n  if code execution fails after the first chunk runs, but in such a way that\n  an error message needs to be attached to the first chunk).  Data for a chunk\n  is sent as soon as it is available from code processing, from cache, or from\n  code execution (as soon as the chunk completes, typically before the session\n  completes).  Additional JSON data may be sent to provide tracking of code\n  execution progress or information such as metadata.  The JSON data provided\n  for format `codebraid_preview` may change between minor versions.\n\n\n## Caching\n\nBy default, code output is cached, and code is only re-executed when it is\nmodified.  The default cache location is a `_codebraid` directory in the\nworking directory (directory where `codebraid` is run, typically the document\ndirectory).  This can be modified using `--cache-dir`.  Multiple documents can\nshare a single cache location.  A cache directory can be synced between\ndifferent operating systems (such as Windows and Linux) while retaining full\nfunctionality so long as documents are in equivalent locations under the\nuser's home directory (as resolved by\n[`os.path.expanduser()`](https://docs.python.org/3/library/os.path.html#os.path.expanduser)).\n\nWhen multiple documents share the same cache location, each document will\nautomatically clean up its own unused, outdated files.  However, if a document\nis deleted or renamed, it may leave behind unused files in the cache, so it\nmay be worth manually deleting and regenerating the cache in those\ncircumstances.  Future cache enhancements should be able to detect all unused\nfiles, making this unnecessary.\n\nIf you are working with external data that changes, you should run `codebraid`\nwith `--no-cache` or delete the cache as necessary to prevent the cache from\nbecoming out of sync with your data.  Future releases will allow external\ndependencies to be specified so that caching will work correctly in these\nsituations.\n\n\n## YAML metadata\n\nSome document-wide settings can be given in the Markdown YAML metadata.\nCodebraid settings must be under either a `codebraid` or `codebraid_` key in\nthe metadata.  Pandoc will ignore `codebraid_` so it will not be available to\nfilters; this distinction should not typically be important.\n\nTo use Jupyter kernels automatically for all sessions, simply set\n`jupyter: true`.  For example,\n\n```\n---\ncodebraid:\n  jupyter: true\n---\n```\n\nIt is also possible to set a default kernel and/or default timeout.  For example,\n\n```\n---\ncodebraid:\n  jupyter:\n    kernel: python3\n    timeout: 120\n---\n```\n\nA Jupyter kernel and/or timeout can still be set in the first code chunk\nfor a given session, and will override the document-wide default.\n\nIt is also possible to set `live_output: <bool>` in the metadata.\nAdditional metadata settings will be added in future releases.\n\n\n## Code options\n\n### Commands (Classes)\n\nCode is made executable by adding a Codebraid class to its\n[Pandoc attributes](http://pandoc.org/MANUAL.html#fenced-code-blocks).\nFor example, `` `code`{.python} `` becomes\n`` `code`{.python .cb-run} ``.\n\nWhen code is executed, the output will depend on whether the built-in code\nexecution system or a Jupyter kernel is used.\n\nWhen code is executed with the built-in system, the output is equivalent to\ncollecting all code for each session of each language, saving it to a file,\nand then executing it (with an added compile step for some languages).  For\nexample, running Python code is equivalent to saving it to `file.py` and then\nrunning `python file.py`, while running R code is equivalent to saving it to\n`file.R` and then running `Rscript file.R`.  Code is not executed as it would\nbe in an interactive session (like running `python` or `R` at the command\nprompt).  As a result, some output that would be present in an interactive\nsession is absent.  For example, in interactive sessions for some languages,\nsimply entering a variable returns a string representation without explicit\nprinting, and plotting opens a separate image window or displays an image\ninline.  Such output is absent in Codebraid unless it is also produced when\ncode is executed as a script rather than in an interactive session.  The\n`.cb-expr` command is provided for when an inline string representation of a\nvariable is desired.\n\nAn option for interactive-style code execution with the built-in system is\nplanned for a future release.  In the meantime, many interactive-style\nfeatures are available between the `.cb-expr` command and Jupyter kernels.\n\nWhen code is executed with a Jupyter kernel, the default output will be\nequivalent to executing it in a Jupyter notebook.  Rich output such plots,\nimages, and LaTeX math will be displayed automatically by default.  This can\nbe customized by using the `show` and `hide` options.\n\nAll classes for making code executable are listed below.  These all have the\nform `.cb-<command>`.  Classes with the form `.cb.<command>` (period rather\nthan hyphen) are supported for Pandoc Markdown (`--from markdown`), but not\nfor `commonmark_x` since it has a more restricted class syntax.  The forms\nshown below (`.cb-<command>`) should be preferred for compatibility across\nMarkdown variants supported by Pandoc.\n\n* `.cb-code` — Insert code verbatim, but do not run it.  This is primarily\n  useful when combined with other features like naming and then copying code\n  chunks.\n\n* `.cb-expr` — Evaluate an expression and interpret the result as Markdown.\n  Only works with inline code.  This is not currently compatible with Jupyter\n  kernels.\n\n* `.cb-nb` — Execute code in notebook mode.  For inline code, this is\n  equivalent to `.cb-expr` with verbatim output unless a Jupyter kernel is\n  used, in which case rich output like plots or LaTeX will be displayed.  For\n  code blocks, this inserts the code verbatim, followed by any printed output\n  (stdout) verbatim.  If stderr exists, it is also inserted verbatim.  When a\n  Jupyter kernel is used, rich output like plots or LaTeX is also displayed.\n\n* `.cb-paste` — Insert code and/or output copied from one or more named code\n  chunks.  The `copy` keyword is used to specify chunks to be copied.  This\n  does not execute any code.  Unless `show` is specified, display options are\n  inherited from the first copied code chunk.\n\n  If content is copied from multiple code chunks that are executed, all code\n  chunks must be in the same session and must be in sequential order without\n  any omitted chunks.  This ensures that what is displayed is always\n  consistent with what was executed.\n\n  If content is copied from another `cb-paste` code chunk, only a single code\n  chunk can be copied.  This reduces the indirection that is possible when\n  displaying the output of code that has been executed.  This restriction may\n  be removed in the future.\n\n* `.cb-run` — Run code and interpret any printed content (stdout) as Markdown.\n  Also insert stderr verbatim if it exists.  When a Jupyter kernel is used,\n  rich output like plots or LaTeX is also displayed.\n\n### Keyword arguments\n\nPandoc code attribute syntax allows keyword arguments of the form `key=value`,\nwith spaces (*not* commas) separating subsequent keys.  `value` can be\nunquoted if it contains only letters and some symbols; otherwise, double\nquotation marks `\"value\"` are required.  For example,\n```\n{.python key1=value1 key2=value2}\n```\nCodebraid adds support for additional keyword arguments.  In some cases,\nmultiple keywords can be used for the same option.  This is primarily for\nPandoc compatibility.\n\n#### First chunk settings\n\nThese are only permitted for the first code chunk in a session (or the first\nchunk for a language, if a session is not specified and thus the default\nsession is in use).\n\n* `executable`={string} — Executable to use for running or compiling code,\n  instead of the default.  This only applies to Codebraid's built-in code\n  execution system.\n\n* `executable_opts`={string} — Command-line options passed to `executable`.\n  This only applies to Codebraid's built-in code execution system.\n\n* `args`={string} — Command-line arguments passed to code during execution.\n  For example, this could be used to add values to `sys.argv` for Python.\n  This only applies to Codebraid's built-in code execution system.\n\n* `jupyter_kernel`={string} — Jupyter kernel to use for executing code instead\n  of Codebraid's built-in code execution system.  Multiple Jupyter kernels can\n  be used within a single document, and multiple sessions are possible per\n  kernel.  Except when otherwise specified, Jupyter kernels should be usable\n  just like the built-in code execution system.\n\n* `jupyter_timeout`={int} — Jupyter kernel timeout per code chunk in seconds.\n  The default is 60.\n\n* `live_output`={`true`, `false`} — Show code output (stdout and stderr) live\n  in the terminal during code execution.  For Jupyter kernels, also show\n  errors and a summary of rich output.  Output still appears in the document\n  as normal.  Showing output can also be enabled via the command-line option\n  `--live-output`.\n\n  When `live_output=false` is set for a session, this setting takes precedence\n  over the command-line option `--live-output`, and output will not be shown\n  for that session.\n\n  All output is written to stderr, so stdout only contains the document when\n  `--output` is not specified.  Output is interspersed with delimiters marking\n  the start of each session and the start of each code chunk.  The delimiters\n  for the start of each code chunk include source names and line numbers.\n\n  With Codebraid's built-in code execution system, the output for a code chunk\n  may be delayed until all code in the chunk has finished executing, unless\n  code output is line buffered or code manually flushes stdout and stderr.\n  For example, with Python you may want to use print functions like\n  `print(\"text\", flush=True)`.  Another option is to use Python in\n  line-buffered mode by setting `executable_opts=\"-u\"` in the first code chunk\n  of a session.\n\n  With Jupyter kernels, the output for a code chunk will be delayed until all\n  code in the chunk has finished executing.\n\n\n#### Execution\n\n* `complete`={`true`, `false`} — By default, code chunks must contain complete\n  units of code (function definitions, loops, expressions, and so forth). With\n  `complete=false`, this is not required.  Any stdout from code chunks with\n  `complete=false` is accumulated until the next code chunk with\n  `complete=true` (the default value), or until the end of the session,\n  whichever comes first.\n\n  Setting `complete` is incompatible with `outside_main=true`, since the\n  `complete` status of code chunks with `outside_main=true` is inferred\n  automatically.\n\n* `outside_main`={`true`, `false`} — This allows code chunks to overwrite the\n  Codebraid template code when code is executed with Codebraid's built-in code\n  execution system.  It is primarily useful for languages like Rust, in which\n  code is inserted by default into a `main()` template.  In that case, if a\n  session *starts* with one or more code chunks with `outside_main=true`,\n  these are used instead of the beginning of the `main()` template.\n  Similarly, if a session *ends* with one or more code chunks with\n  `outside_main=true`, these are used instead of the end of the `main()`\n  template.  If there are any code chunks in between that lack `outside_main`\n  (that is, default `outside_main=false`), then these will have their stdout\n  collected on a per-chunk basis like normal.  Having code chunks that lack\n  `outside_main` is not required; if there are none, the total accumulated\n  stdout for a session belongs to the last code chunk in the session.\n\n  `outside_main=true` is incompatible with explicitly setting `complete`.  The\n  `complete` status of code chunks with `outside_main=true` is inferred\n  automatically.\n\n* `session`={identifier-style string} — By default, all code for a given\n  language is executed in a single, shared session so that data and variables\n  persist between code chunks.  This option allows code to be separated into\n  multiple independent sessions.  Session names must be Python-style\n  identifiers.\n\n#### Display\n\n* `first_number`/`startFrom`/`start-from`/`start_from`={integer or `next`} —\n  Specify the first line number for code when line numbers are displayed.\n  `next` means continue from the last code in the current session.\n\n* `hide`={`markup`, `copied_markup`, `code`, `stdout`, `stderr`, `expr`,\n  `rich_output`, `all`} — Hide some or all of the elements that are displayed\n  by default.  Elements can be combined.  For example, `hide=stdout+stderr`.\n  Note that `expr` only applies to `.cb-expr` or `.cb-nb` with inline code\n  using Codebraid's built-in code execution system, since only these evaluate\n  an expression.  `rich_output` is currently only relevant for Jupyter\n  kernels.\n\n* `hide_markup_keys`={key(s)} — Hide the specified code chunk attribute key(s)\n  in the Markdown source displayed via `markup` or `copied_markup`.  Multiple\n  keys can be specified via `hide_markup_keys=key1+key2`.\n\n  `hide_markup_keys` only applies to the code chunk in which it is used, to\n  determined the `markup` for that code chunk.  Thus, it only affects\n  `copied_markup` indirectly.\n\n* `line_numbers`/`numberLines`/`number-lines`/`number_lines`={`true`, `false`}\n  — Number code lines in code blocks.\n\n* `show`={`markup`, `copied_markup`, `code`, `stdout`, `stderr`, `expr`,\n  `rich_output`, `none`} — Override the elements that are displayed by\n  default.  `expr` only applies to `.cb-expr` and to `.cb-nb` with inline code\n  using Codebraid's built-in code execution system, since only these evaluate\n  an expression.  Elements can be combined.  For example, `show=code+stdout`.\n\n  Each element except `rich_output` can optionally specify a format from\n  `raw`, `verbatim`, or `verbatim_or_empty`.  For example,\n  `show=code:verbatim+stdout:raw`.\n\n    - `raw` means interpreted as Markdown.\n    - `verbatim` produces inline code or a code block, depending on context.\n      Nothing is produced if there is no content (for example, nothing in\n      stdout.)\n    - `verbatim_or_empty` produces inline code containing a single\n      non-breaking space or a code block containing a single empty line in the\n      event that there is no content.  It is useful when a placeholder is\n      desired, or a visual confirmation that there is indeed no output.\n\n  For `rich_output`, the format is specified as one or more abbreviations for\n  the mime types of the output to be displayed.  For example,\n  `rich_output:plain` will display `text/plain` output if it exists, and\n  otherwise nothing.  `rich_output:png|plain` will display a PNG image if it\n  exists, or otherwise will fall back to plain text if available.  The\n  following formats are currently supported:\n\n    - `latex` (corresponds to `text/latex`)\n    - `html` (`text/html`)\n    - `markdown` (`text/markdown`)\n    - `plain` (`text/plain`)\n    - `png` (`image/png`)\n    - `jpg` and `jpeg` (`image/jpeg`)\n    - `svg` (`image/svg+xml`)\n    - `pdf` (`application/pdf`)\n\n  For `rich_output` formats with a `text/*` mime type (`latex`, `html`,\n  `markdown`, `plain`), it is possible to specify whether they are displayed\n  `raw`, `verbatim`, or `verbatim_or_empty`.  For example,\n  `show=rich_output:latex:raw` and `show=rich_output:latex:verbatim`.  `raw`\n  treats `latex` and `html` as raw content with those formats embedded within\n  Markdown.  `raw` treats `markdown` and `plain` as Markdown.  When a display\n  style is not specified, all `rich_output` formats with a `text/*` mime type\n  are displayed `raw` by default, except for `plain` which is displayed\n  `verbatim`.\n\n  `markup` displays the Markdown source for the inline code or code block.\n  Because the Markdown source is not available in the Pandoc AST but rather\n  must be recreated from it, the Markdown source displayed with `markup` may\n  use a different number of backticks, quote attribute values slightly\n  differently, or contain other insignificant differences from the original\n  document.\n\n  `copied_markup` displays the Markdown source for code chunks copied via\n  `copy`.\n\n  `expr` defaults to `raw` if a format is not specified.  `rich_output`\n  defaults to `latex|markdown|png|jpg|svg|plain`.  All others default to\n  `verbatim`.\n\n* `example`={bool} — Insert a code block containing the Markdown source of the\n  code chunk, followed by the rest of the output as normal.  This is only\n  valid for inline code if the code is in a paragraph by itself.  This option\n  is currently not compatible with `--only-code-output` and Codebraid Preview.\n  This option is intended primarily for documentation about Codebraid.\n\n#### Copying\n\n* `copy`={chunk name(s)} — Copy one or more named code chunks.  When `copy` is\n  used with a command like `.cb-run` that executes code, only the code is\n  copied, and it is executed as if it had been entered directly.  When `copy`\n  is used with `.cb-code`, only the code is copied and nothing is executed.\n  When `copy` is used with `.cb-paste`, both code and output are copied, and\n  nothing is executed.  Multiple code chunks may be copied; for example,\n  `copy=name1+name2`.  In that case, the code from all chunks is concatenated,\n  as is any output that is copied.  Because `copy` brings in code from other\n  code chunks, the actual content of a code block or inline code using `copy`\n  is discarded.  As a result, this must be empty, or a space or underscore can\n  be used as a placeholder.\n\n* `name`={identifier-style string} — Name a code chunk so that it can later be\n  copied by name.  Names must be Python-style identifiers.\n\n#### Including external files\n\n* `include_file`={path} — Include the specified file.  A leading `~/` or\n  `~<user>/` is expanded to the user's home directory under all operating\n  systems, including under Windows with both slashes and backslashes.\n\n  When `include_file` is used with a command like `.cb-run` that executes\n  code, the file is included and executed as part of the current session just\n  as if the file contents had been entered directly.  When `include_file` is\n  used with `.cb-code`, the file is included and displayed just as if it had\n  been entered directly.  Because `include_file` brings in code from another\n  file, the actual content of a code block or inline code using `include_file`\n  is discarded.  As a result, this must be empty, or a space or underscore can\n  be used as a placeholder.\n\n* `include_encoding`={encoding} — Encoding for included file.  The default\n  encoding is UTF-8.\n\n* `include_lines`={lines/line ranges} — Include the specified lines or line\n  ranges.  For example, `1-3,5,7-9,11-`.  Line numbers are one-indexed.  Line\n  ranges are inclusive, so `1-3` is `1` up to and including `3`.  If a range\n  ends with a hyphen, like `11-`, then everything is included from the line\n  through the end of the file.\n\n  Cannot be combined with other `include` options that specify what is to\n  be included.\n\n* `include_regex`={regex} — Include the first segment of the file that matches\n  the provided regular expression.\n\n  Keep in mind that Pandoc's key-value attributes evaluate backslash escapes\n  in values whether or not the values are quoted with double quotation marks,\n  so two levels of backslash-escaping are always necessary (one for Pandoc's\n  strings, one for the regex itself; there are no raw strings).  Regular\n  expressions use *multiline mode*, so `^`/`$` match the start/end of a line,\n  and `\\A`/`\\Z` can be used to match the start/end of the file.  Regular\n  expressions use *dotall mode*, so `.` matches anything including the newline\n  `\\n`; use `[^\\n]` when this is not desired.\n\n  Cannot be combined with other `include` options that specify what is to\n  be included.\n\n* `include_start_string`={string} — Include everything from the first\n  occurrence of this string onward.\n\n  Can only be combined with other `include` options that specify the end of\n  what is to be included.\n\n* `include_start_regex`={regex} — Include everything from the first\n  match of this regex onward.\n\n  Can only be combined with other `include` options that specify the end of\n  what is to be included.  See `include_regex` for notes on regex usage.\n\n* `include_after_string`={string} — Include everything after the first\n  occurrence of this string onward.\n\n  Can only be combined with other `include` options that specify the end of\n  what is to be included.\n\n* `include_after_regex`={regex} — Include everything after the first\n  match of this regex onward.\n\n  Can only be combined with other `include` options that specify the end of\n  what is to be included.  See `include_regex` for notes on regex usage.\n\n* `include_before_string`={string} — Include everything before the first\n  occurrence of this string.\n\n  Can only be combined with other `include` options that specify the start of\n  what is to be included.  If the start is specified, then the first\n  occurrence after this point is used, rather than the first occurrence in the\n  overall file.\n\n* `include_before_regex`={regex} — Include everything before the first\n  match of this regex.\n\n  Can only be combined with other `include` options that specify the start of\n  what is to be included.  If the start is specified, then the first match\n  after this point is used, rather than the first match in the overall file.\n  See `include_regex` for notes on regex usage.\n\n* `include_end_string`={string} — Include everything through the first\n  occurrence of this string.\n\n  Can only be combined with other `include` options that specify the start of\n  what is to be included.  If the start is specified, then the first\n  occurrence after this point is used, rather than the first occurrence in the\n  overall file.\n\n* `include_end_regex`={regex} — Include everything through the first\n  match of this regex.\n\n  Can only be combined with other `include` options that specify the start of\n  what is to be included.  If the start is specified, then the first match\n  after this point is used, rather than the first match in the overall file.\n  See `include_regex` for notes on regex usage.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/gpoore/codebraid",
    "keywords": "dynamic documents,reproducible research,notebook,markdown,pandoc,LaTeX",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "codebraid",
    "package_url": "https://pypi.org/project/codebraid/",
    "platform": null,
    "project_url": "https://pypi.org/project/codebraid/",
    "project_urls": {
      "Homepage": "http://github.com/gpoore/codebraid"
    },
    "release_url": "https://pypi.org/project/codebraid/0.10.3/",
    "requires_dist": [
      "bespon (>=0.6)"
    ],
    "requires_python": ">=3.7",
    "summary": "Live code in Pandoc Markdown",
    "version": "0.10.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16494679,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d8b034cc399cf279f09c8d30061fdab3770dba76e079731538b2cb3a65718b8",
          "md5": "ce371c9477e358a19d349515e00314ed",
          "sha256": "7a4e55a5abf5846f4f62c5b0364f5c1d2d0886328ce1d2a3a1ce743ef906de6c"
        },
        "downloads": -1,
        "filename": "codebraid-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce371c9477e358a19d349515e00314ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 36437,
        "upload_time": "2019-02-16T03:17:53",
        "upload_time_iso_8601": "2019-02-16T03:17:53.166856Z",
        "url": "https://files.pythonhosted.org/packages/6d/8b/034cc399cf279f09c8d30061fdab3770dba76e079731538b2cb3a65718b8/codebraid-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "060179afe963485b934a625509ee4a8bb926381129bc93aac32a0fb93886bf2c",
          "md5": "790fb149db5529f7dce77a9408e6a372",
          "sha256": "b04fddf9abf440d22cd69f2c53cd44a04762b50ca8c1f4d7f1c5e41230d3f8fc"
        },
        "downloads": -1,
        "filename": "codebraid-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "790fb149db5529f7dce77a9408e6a372",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 34202,
        "upload_time": "2019-02-16T03:17:55",
        "upload_time_iso_8601": "2019-02-16T03:17:55.632543Z",
        "url": "https://files.pythonhosted.org/packages/06/01/79afe963485b934a625509ee4a8bb926381129bc93aac32a0fb93886bf2c/codebraid-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fcb0ec25bfb497e8c287b318ffb8c523532d3aa0408f4bcfb46bb0e21d1424c",
          "md5": "83e6dd42cdbf6a54afd15b837a709cd0",
          "sha256": "e8bb0ffd86e38cca73f09b3d5f8aab13ec9cb361519548348f4c2f9d6f105108"
        },
        "downloads": -1,
        "filename": "codebraid-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83e6dd42cdbf6a54afd15b837a709cd0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 103684,
        "upload_time": "2022-07-11T15:43:28",
        "upload_time_iso_8601": "2022-07-11T15:43:28.268605Z",
        "url": "https://files.pythonhosted.org/packages/3f/cb/0ec25bfb497e8c287b318ffb8c523532d3aa0408f4bcfb46bb0e21d1424c/codebraid-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fccfa019db06bf72af82b47134ce2834880c3cdbb225b1c7dc717da9f09a03ff",
          "md5": "a2c9d944673af05176c180abd852b2a2",
          "sha256": "d30caaae564334cb2fcb9ed50fd2fe4cb85b2d25aadd9d566fdd67fcfe199775"
        },
        "downloads": -1,
        "filename": "codebraid-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a2c9d944673af05176c180abd852b2a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 120347,
        "upload_time": "2022-07-11T15:43:36",
        "upload_time_iso_8601": "2022-07-11T15:43:36.978214Z",
        "url": "https://files.pythonhosted.org/packages/fc/cf/a019db06bf72af82b47134ce2834880c3cdbb225b1c7dc717da9f09a03ff/codebraid-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a05e01390dc087884c241c75079a72ba117414deeaf646bf4527bcd790e91cc1",
          "md5": "11b9f4c9e24dde661b3dc6329afc8e0d",
          "sha256": "0cfdbe4a94ece7a9748c63a73441fceb7a886f72a0921c640bfbfdd00166fdd5"
        },
        "downloads": -1,
        "filename": "codebraid-0.10.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11b9f4c9e24dde661b3dc6329afc8e0d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 103789,
        "upload_time": "2022-07-11T23:32:38",
        "upload_time_iso_8601": "2022-07-11T23:32:38.051112Z",
        "url": "https://files.pythonhosted.org/packages/a0/5e/01390dc087884c241c75079a72ba117414deeaf646bf4527bcd790e91cc1/codebraid-0.10.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "505e8631941413540405eb11360e7ba1a90b12508c2eb706522eb37288dafac3",
          "md5": "715c9a900a63ebf1371ab8f4acf5ffc9",
          "sha256": "d51245d31412ac785dc11a19eefd32a26594785846c0e1edb444f45cd824cce8"
        },
        "downloads": -1,
        "filename": "codebraid-0.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "715c9a900a63ebf1371ab8f4acf5ffc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 120824,
        "upload_time": "2022-07-11T23:32:41",
        "upload_time_iso_8601": "2022-07-11T23:32:41.484255Z",
        "url": "https://files.pythonhosted.org/packages/50/5e/8631941413540405eb11360e7ba1a90b12508c2eb706522eb37288dafac3/codebraid-0.10.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a96e7e30f4c874979b784a568512d9d24c528cd2a7c76ca43c1f9aa30baedd44",
          "md5": "29e950618d647e609784c38da2489d17",
          "sha256": "b5187c37c4ecd304c358cc474b380ad2d080cdb934d26c50897a55b05f8f68c6"
        },
        "downloads": -1,
        "filename": "codebraid-0.10.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29e950618d647e609784c38da2489d17",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 103891,
        "upload_time": "2022-08-30T23:30:49",
        "upload_time_iso_8601": "2022-08-30T23:30:49.821763Z",
        "url": "https://files.pythonhosted.org/packages/a9/6e/7e30f4c874979b784a568512d9d24c528cd2a7c76ca43c1f9aa30baedd44/codebraid-0.10.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b179ec4e10dfc65a1c1ee7bbb9704a7108bfcb9292a09703c82125d9b87e8e5d",
          "md5": "e98242adac9815dfaf3fc7da9a312b93",
          "sha256": "90e46d742e835440fad68013c27116b153ff32dd590c4ab73babea551df70544"
        },
        "downloads": -1,
        "filename": "codebraid-0.10.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e98242adac9815dfaf3fc7da9a312b93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 121229,
        "upload_time": "2022-08-30T23:30:52",
        "upload_time_iso_8601": "2022-08-30T23:30:52.804032Z",
        "url": "https://files.pythonhosted.org/packages/b1/79/ec4e10dfc65a1c1ee7bbb9704a7108bfcb9292a09703c82125d9b87e8e5d/codebraid-0.10.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5326de0c8867dd7d6f0eedcb975216ceb123c0f7ee2ef5f4938b4e51b90123d",
          "md5": "3128e2007302d4d495c290184a722716",
          "sha256": "50610b5fe61c461bb95fcfbbe4d447c4df9448c374c57f339f56a05d8dcf7179"
        },
        "downloads": -1,
        "filename": "codebraid-0.10.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3128e2007302d4d495c290184a722716",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 103899,
        "upload_time": "2023-01-20T00:32:42",
        "upload_time_iso_8601": "2023-01-20T00:32:42.987702Z",
        "url": "https://files.pythonhosted.org/packages/d5/32/6de0c8867dd7d6f0eedcb975216ceb123c0f7ee2ef5f4938b4e51b90123d/codebraid-0.10.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be267b7ed8b3adaaad7ab0232fae03563128a31842e337d7ca6df5c885518dc0",
          "md5": "6a65f12266302739ae35eb2e749627fc",
          "sha256": "33fbb1b86ae2f26de044d96084e1d4e1b13d05a5a7f05f8d8b8d0802dae3814b"
        },
        "downloads": -1,
        "filename": "codebraid-0.10.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6a65f12266302739ae35eb2e749627fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 121282,
        "upload_time": "2023-01-20T00:32:46",
        "upload_time_iso_8601": "2023-01-20T00:32:46.483467Z",
        "url": "https://files.pythonhosted.org/packages/be/26/7b7ed8b3adaaad7ab0232fae03563128a31842e337d7ca6df5c885518dc0/codebraid-0.10.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "551f5661bc66ca5bc0362299be29ceaebde6e8e023dc546ad7e6b25a262f08a8",
          "md5": "e935d043cef7c731b8bcc3ea83083069",
          "sha256": "f56aa18d330b84be4488b745936a886ba3537e699dfe100359561f286994245b"
        },
        "downloads": -1,
        "filename": "codebraid-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e935d043cef7c731b8bcc3ea83083069",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 42519,
        "upload_time": "2019-02-25T17:35:00",
        "upload_time_iso_8601": "2019-02-25T17:35:00.557937Z",
        "url": "https://files.pythonhosted.org/packages/55/1f/5661bc66ca5bc0362299be29ceaebde6e8e023dc546ad7e6b25a262f08a8/codebraid-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bb079a5a6d420c513c15d691cab2f7746e56b63439b110548910a2f37b33f73",
          "md5": "b586577ab85f13b87d6677b4c13a7286",
          "sha256": "e8984bacaf54a9645056a979f647bbda2411a66c143f34ae5a0492da5a73c08b"
        },
        "downloads": -1,
        "filename": "codebraid-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b586577ab85f13b87d6677b4c13a7286",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 41911,
        "upload_time": "2019-02-25T17:35:02",
        "upload_time_iso_8601": "2019-02-25T17:35:02.465819Z",
        "url": "https://files.pythonhosted.org/packages/5b/b0/79a5a6d420c513c15d691cab2f7746e56b63439b110548910a2f37b33f73/codebraid-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5221df2f9c0399c68a6d03d947153f1b5f086dc335ef69537da0f6028455d001",
          "md5": "d97a298a6d289ba5801ff5e83fd3d187",
          "sha256": "c45cd81bb56f6930ace447d0040f63ab6ee41505d9ff891e238db2d584ff5c78"
        },
        "downloads": -1,
        "filename": "codebraid-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d97a298a6d289ba5801ff5e83fd3d187",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 49024,
        "upload_time": "2019-05-19T20:28:41",
        "upload_time_iso_8601": "2019-05-19T20:28:41.415201Z",
        "url": "https://files.pythonhosted.org/packages/52/21/df2f9c0399c68a6d03d947153f1b5f086dc335ef69537da0f6028455d001/codebraid-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20fdd5a8588f17786e1347a57925b0f46d8a0a8064698c2769dd64eb77a491a3",
          "md5": "a6dd15e226e47396542393d6477f15a9",
          "sha256": "b89836f11b8ed13bac6d444052b1c2dfa444775976fa670a24de43e2b0944d6b"
        },
        "downloads": -1,
        "filename": "codebraid-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a6dd15e226e47396542393d6477f15a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 50838,
        "upload_time": "2019-05-19T20:28:43",
        "upload_time_iso_8601": "2019-05-19T20:28:43.607448Z",
        "url": "https://files.pythonhosted.org/packages/20/fd/d5a8588f17786e1347a57925b0f46d8a0a8064698c2769dd64eb77a491a3/codebraid-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "858e957d6239c6436f2120586fce7240575bb603678a78d1be8b1b0173d7a655",
          "md5": "7ef814f20a609010e88949c0554b82bb",
          "sha256": "b733f4ebf191b31a8a41e035b09166cb6c527a1b736e48dc7255022f21fa35c1"
        },
        "downloads": -1,
        "filename": "codebraid-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ef814f20a609010e88949c0554b82bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 60081,
        "upload_time": "2019-07-10T21:19:52",
        "upload_time_iso_8601": "2019-07-10T21:19:52.517551Z",
        "url": "https://files.pythonhosted.org/packages/85/8e/957d6239c6436f2120586fce7240575bb603678a78d1be8b1b0173d7a655/codebraid-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad75097cb0cd2b70c5385d0fbc4fe1b5033e609dcc861cea739494cfd6b0edb2",
          "md5": "81752fe1890ca09e260d2d9eca90103c",
          "sha256": "c952fd144063b1baedfc69a7dee8ff0fced428d54e42a6942912494a5c9da498"
        },
        "downloads": -1,
        "filename": "codebraid-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "81752fe1890ca09e260d2d9eca90103c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 65081,
        "upload_time": "2019-07-10T21:19:54",
        "upload_time_iso_8601": "2019-07-10T21:19:54.218665Z",
        "url": "https://files.pythonhosted.org/packages/ad/75/097cb0cd2b70c5385d0fbc4fe1b5033e609dcc861cea739494cfd6b0edb2/codebraid-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f76829d93ef68d086c0b211f49ea890ced61e30f8a1a6cd80be795aecf9501a9",
          "md5": "5ca1161c3e5c42bbc25da7f52b7840e9",
          "sha256": "061bdf0a261632d72594f517c6c8b308b955b9d5441cf33b89534437f5bd9a9d"
        },
        "downloads": -1,
        "filename": "codebraid-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ca1161c3e5c42bbc25da7f52b7840e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 65127,
        "upload_time": "2021-03-01T05:20:41",
        "upload_time_iso_8601": "2021-03-01T05:20:41.844058Z",
        "url": "https://files.pythonhosted.org/packages/f7/68/29d93ef68d086c0b211f49ea890ced61e30f8a1a6cd80be795aecf9501a9/codebraid-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af77e4e99abc6d29f44bf30c3c3237686f1694bc4bac690b2054743160987d45",
          "md5": "5bbb7e826a556ce7585b383d13157b72",
          "sha256": "f24f028767504121bcd58eea9d105e715897cc53bc7d6060b1d935b25e5352f4"
        },
        "downloads": -1,
        "filename": "codebraid-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5bbb7e826a556ce7585b383d13157b72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 80733,
        "upload_time": "2021-03-01T05:20:44",
        "upload_time_iso_8601": "2021-03-01T05:20:44.037087Z",
        "url": "https://files.pythonhosted.org/packages/af/77/e4e99abc6d29f44bf30c3c3237686f1694bc4bac690b2054743160987d45/codebraid-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cae85976cf6c78aa025acc15ada88f28f5dc7a8423139d5b227365f936f3c39",
          "md5": "e372f806d636f7a65833f49f93de883f",
          "sha256": "8a9060ec7459384b4805d42b0e0cdcf42882306281aff2466d89099726083dc8"
        },
        "downloads": -1,
        "filename": "codebraid-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e372f806d636f7a65833f49f93de883f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 86576,
        "upload_time": "2022-02-23T03:50:30",
        "upload_time_iso_8601": "2022-02-23T03:50:30.980377Z",
        "url": "https://files.pythonhosted.org/packages/3c/ae/85976cf6c78aa025acc15ada88f28f5dc7a8423139d5b227365f936f3c39/codebraid-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57dc791ad3f08a46d07e12f8a8a1a36c60659b6cfb12733321b3766b022a8439",
          "md5": "27f0864977e38b2eccdfaf3bfa759d7a",
          "sha256": "7c739b133b3d8d16766b0c38a93c129db3df69072ef796de9714e357e5f1135d"
        },
        "downloads": -1,
        "filename": "codebraid-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "27f0864977e38b2eccdfaf3bfa759d7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 100558,
        "upload_time": "2022-02-23T03:50:33",
        "upload_time_iso_8601": "2022-02-23T03:50:33.994656Z",
        "url": "https://files.pythonhosted.org/packages/57/dc/791ad3f08a46d07e12f8a8a1a36c60659b6cfb12733321b3766b022a8439/codebraid-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fae852eef720609a35f470912b299855db33522fd1b7f267450c82e57748311",
          "md5": "926a1ebfcdb4b4271d86869dd7a6cefc",
          "sha256": "3b65caa13001ca9509a2d82406cafd0aab3c920d8cf6e769c798d9419682d20a"
        },
        "downloads": -1,
        "filename": "codebraid-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "926a1ebfcdb4b4271d86869dd7a6cefc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 89893,
        "upload_time": "2022-06-04T12:54:39",
        "upload_time_iso_8601": "2022-06-04T12:54:39.564219Z",
        "url": "https://files.pythonhosted.org/packages/9f/ae/852eef720609a35f470912b299855db33522fd1b7f267450c82e57748311/codebraid-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e894ac65f29c45a619bbf63883a784e59718be2770737a0b24a14bb0bc6423ee",
          "md5": "128ad60aba01289b777f2f440b5b7729",
          "sha256": "0347c73caba3ba759a2164bfe1853d5bebeb6bb0f1e56ae44c65631f190f6be5"
        },
        "downloads": -1,
        "filename": "codebraid-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "128ad60aba01289b777f2f440b5b7729",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 105585,
        "upload_time": "2022-06-04T12:54:42",
        "upload_time_iso_8601": "2022-06-04T12:54:42.536064Z",
        "url": "https://files.pythonhosted.org/packages/e8/94/ac65f29c45a619bbf63883a784e59718be2770737a0b24a14bb0bc6423ee/codebraid-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed7613b63b2d83f71e77db3e1f43a254497a74149a52254bb006c57e10a53947",
          "md5": "43a8cc40b96cce029a7e20b728ca148a",
          "sha256": "aeba70e59cf4862c0b77ec525d452d5c5b1dd934dddcfe72e46602686e4aeaf5"
        },
        "downloads": -1,
        "filename": "codebraid-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43a8cc40b96cce029a7e20b728ca148a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 100350,
        "upload_time": "2022-06-11T19:15:43",
        "upload_time_iso_8601": "2022-06-11T19:15:43.483734Z",
        "url": "https://files.pythonhosted.org/packages/ed/76/13b63b2d83f71e77db3e1f43a254497a74149a52254bb006c57e10a53947/codebraid-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07f425650dd912881b3677ea8f6568db7b401c3f83b288127e7aa5b122878b30",
          "md5": "b5db59935b1da8f21a4dcf97912e745a",
          "sha256": "8ddfccdb45327709d5a1659e51ee24bf9aada9654f4e3d7312a02fafb620ad49"
        },
        "downloads": -1,
        "filename": "codebraid-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5db59935b1da8f21a4dcf97912e745a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 115194,
        "upload_time": "2022-06-11T19:15:47",
        "upload_time_iso_8601": "2022-06-11T19:15:47.046085Z",
        "url": "https://files.pythonhosted.org/packages/07/f4/25650dd912881b3677ea8f6568db7b401c3f83b288127e7aa5b122878b30/codebraid-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc4e169864cb34de493736aa54d8394670f04bb4195d368bb4fadabece9463ba",
          "md5": "7d61a2e6fb4766ef5f1c71104f102b4e",
          "sha256": "6e5dc4e9adad2d01fee3b46ec09c2be5d2b6aea6192f8d82bec5d12dffb8d7bd"
        },
        "downloads": -1,
        "filename": "codebraid-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d61a2e6fb4766ef5f1c71104f102b4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 101593,
        "upload_time": "2022-06-25T19:38:33",
        "upload_time_iso_8601": "2022-06-25T19:38:33.112586Z",
        "url": "https://files.pythonhosted.org/packages/cc/4e/169864cb34de493736aa54d8394670f04bb4195d368bb4fadabece9463ba/codebraid-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69279fd4430f09a8b4893b8c149ee9950135a0933933a44dee9640980f513bf4",
          "md5": "d7e237f6024be6f720386623e53f515b",
          "sha256": "db3901d84021bbd19fee09e6a08a5727aed68980abe6ae0f8dd90283983a3b97"
        },
        "downloads": -1,
        "filename": "codebraid-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d7e237f6024be6f720386623e53f515b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 116808,
        "upload_time": "2022-06-25T19:38:36",
        "upload_time_iso_8601": "2022-06-25T19:38:36.900458Z",
        "url": "https://files.pythonhosted.org/packages/69/27/9fd4430f09a8b4893b8c149ee9950135a0933933a44dee9640980f513bf4/codebraid-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5326de0c8867dd7d6f0eedcb975216ceb123c0f7ee2ef5f4938b4e51b90123d",
        "md5": "3128e2007302d4d495c290184a722716",
        "sha256": "50610b5fe61c461bb95fcfbbe4d447c4df9448c374c57f339f56a05d8dcf7179"
      },
      "downloads": -1,
      "filename": "codebraid-0.10.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3128e2007302d4d495c290184a722716",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 103899,
      "upload_time": "2023-01-20T00:32:42",
      "upload_time_iso_8601": "2023-01-20T00:32:42.987702Z",
      "url": "https://files.pythonhosted.org/packages/d5/32/6de0c8867dd7d6f0eedcb975216ceb123c0f7ee2ef5f4938b4e51b90123d/codebraid-0.10.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be267b7ed8b3adaaad7ab0232fae03563128a31842e337d7ca6df5c885518dc0",
        "md5": "6a65f12266302739ae35eb2e749627fc",
        "sha256": "33fbb1b86ae2f26de044d96084e1d4e1b13d05a5a7f05f8d8b8d0802dae3814b"
      },
      "downloads": -1,
      "filename": "codebraid-0.10.3.tar.gz",
      "has_sig": false,
      "md5_digest": "6a65f12266302739ae35eb2e749627fc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 121282,
      "upload_time": "2023-01-20T00:32:46",
      "upload_time_iso_8601": "2023-01-20T00:32:46.483467Z",
      "url": "https://files.pythonhosted.org/packages/be/26/7b7ed8b3adaaad7ab0232fae03563128a31842e337d7ca6df5c885518dc0/codebraid-0.10.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}