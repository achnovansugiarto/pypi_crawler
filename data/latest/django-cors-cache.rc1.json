{
  "info": {
    "author": "Dmitriy Ponomarev",
    "author_email": "demdxx@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Django cors cache modeule\n=========================\n\nМодуль для обеспечения полного спектра кэширования.\n\nКэширование в шаблонах\n----------------------\n\n===Query cache===\n\nКэширование доступно только для get/count запросов, остальные не являются эффективными.\n\n===Обычный кэш===\n\nПолностью копирует аналогичный тег в Django.\n\n\t{% load cors_cache %}\n\t\n\t{% cache \"cahce_block_name\" var1 var2 ... varN cache=cache2 %}\n\t\tContent...\n\t{% endcache %}\n\n===Умный кэш===\n\nДля блоков кэша которые должны сбрасываться сразу\nпосле изменения.\n\n   smart_cache block_name [model_links]\n   model_links - объекты типа Model\n\n\n\t{% load cors_cache %}\n\t\n\t{% smart_cache \"cahce_block_name\" request.user cache=cache2 %}\n\t\tContent...\n\t{% end_smart_cache %}\n\n\nДля сброса кэша при изменении других объектов не связанных с кэшем\nможно реализовать карту инвалидации, или использовать параметр links.\n\t\n\t{% smart_cache \"cahce_block_name\" request.user cache=cache2 links=\"news.article.user\" %}\n\t\tContent...\n\t{% end_smart_cache %}\n\nТаким образом изменяя или создавая *news.article*, ищется тег с именем\n*cahce_block_name* и связанным с полем user в модели news.\nНо лучше релизовать карту инвалидации, для этого случая она будет такой:\n\n\tCORSCACHE_EXTENDET_LINKS = {\n\t\t'news.article': {\n\t\t\t'cahce_block_name': {'links':('user',),'cache':'cache2'},\n\t\t},\n\t}\n\nExample settings\n----------------\n\n\t# -*- coding: utf-8 -*-\n\t\n\tCORSCACHE_DEFAULT_TIME = 86400 # 24 Hour\n\tCORSCACHE_DEFAULT_CACHE = 'level1'\n\t\n\t# Префиксы к именам кэша\n\tCORSCACHE_BLOCKS_PREFIX = 'blocks'\n\tCORSCACHE_QUERYS_PREFIX = 'queryes'\n\n    CORSCACHE_ACTIVE = True\n    CORSCACHE_QUERYCACHE_ACTIVE = True\n\t\n\t#\n\t# Интелект - автоматическая отчистка связанных блоков.\n\t# Если отчистка построена только на правилах то лучше выключить.\n\t#\n\tCORSCACHE_INTELLIGENCE = True\n\t\n\t#\n\t# Сторонние связки. [ Карта инвалидации ]\n\t#\n\t# Иногда невозможно реализовать динамическую привязку блока к объекту,\n\t# Просто потому что это неимеет никакого смысла\n\t# Ведь наша задача ограничить число запросов,\n\t# и вот здесь помогут связки объекта с блоками.\n\t#\n\t# Определим какой объект должен влиять на блок\n\t#\n\t# 'news.article': { 'news': {'links':('user',),'cache':'cacheName'}, 'catalog.product': ('section',) }\n\t# Он влияет на блок новостей посредством своей связи с пользователем.\n\t# В этом случае блок у нас объявлен как:\n\t#\n\t# {% smart_cache \"news\" autor cache=cacheName %} ... {% end_smart_cache %}\n\t#\n\t# При изменении или создании новости сбрасывается кэш этой группу связанный с пользователем\n\t#\n\t\n\t# Карта инвалидации\n\tCORSCACHE_EXTENDET_LINKS = {\n\t\t# Инвалидация по моим друзьям\n\t\t# Проводится при создании/удалении или изменении друга\n\t\t'friendlent.friend': {\n\t\t\t'user_info': ('user',), # Инвалидируем блок user_info связанный с user\n\t\t\t'planes_block': ('user',), # Обновим планы\n\t\t\t'notifi_block': ('user',), # Обновим уведомления\n\t\t\t'notifies_index': ('user',), # Обновим уведомления index\n\t\t\t'friendlent_general': ('user',), # Блок друзей справа\n\t\t},\n\t\t'profile.profile': {\n\t\t\t'user_info': ('user',), # Инвалидируем блок user_info связанный с user\n\t\t},\n\t\t# Блок хочу побывать справа\n\t\t'geographi.iwas': {\n\t\t\t'wantvisited_city': {'links':('user',),'cache':'level2'},\n\t\t\t'visited_city': {'links':('user',),'cache':'level2'},\n\t\t},\n\t\t# Обновление уведомлений\n\t\t'reester.atom': {\n\t\t\t'notifi_block': ('user',), # Обновим уведомления\n\t\t\t'notifies_index': ('user',), # Обновим уведомления index\n\t\t},\n\t}\n\t\n\t# Кэширование запросов\n\tCORSCACHE_QUERY_CACHE = {\n\t\t'auth.user':{'get':3600}, # Получить Пользователя на час\n\t\t'profile.profile':{'get':3600}, # Получить профиль на час\n\t\t'*.*': {'count':3600,'cache':'level2'}, # Кэшируем все count запросы на час\n\t}",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/demdxx/django-cors-cache",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-cors-cache",
    "package_url": "https://pypi.org/project/django-cors-cache/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-cors-cache/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/demdxx/django-cors-cache"
    },
    "release_url": "https://pypi.org/project/django-cors-cache/0.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "slick ORM cache and invalidation for Django",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 369054,
  "releases": {
    "0.0.0": []
  },
  "urls": [],
  "vulnerabilities": []
}