{
  "info": {
    "author": "Cariad Eccleston",
    "author_email": "cariad@cariad.earth",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "# ðŸ“œ Cline\n\n**Cline** is a Python package that helps you build command line applications by separating the concerns of _understanding the command line arguments you receive_ and _operating on strongly-typed arguments_, and helps you to write clean, testable tasks.\n\n<edition value=\"toc\" />\n\n## Getting started\n\n### Installation\n\nCline requires **Python 3.8 or later**.\n\nInstall Cline via pip:\n\n```bash\npip install cline\n```\n\n### Usage\n\n1. Create a `Cli` class to parse arguments and orchestrate tasks.\n1. Create `Task` classes to describe the work that your application can perform.\n1. On startup, invoke your CLI's `invoke_and_exit()` method. Cline will discover and invoke the most appropriate `Task` for the given arguments.\n\nThe examples below go into detail.\n\n## Examples\n\n### Example 1: Summing two integers\n\n_The source code for this example is available at [github.com/cariad/cline/blob/main/examples/example01](https://github.com/cariad/cline/blob/main/examples/example01). The tests are in [github.com/cariad/cline/blob/main/tests/examples/example01](https://github.com/cariad/cline/blob/main/tests/examples/example01)._\n\nIn this example, we'll build a command line application that sums two integers then prints the result:\n\n```bash\npython -m examples.example01 1 3\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\n4\n```\n\n<!--edition-exec range=end-->\n\n#### 1. Create a CLI class with an argument parser\n\nFor this example, we'll parse the command line arguments with Python's baked-in `ArgumentParser`. Cline provides an `ArgumentParserCli` base class for this.\n\nCreate a class named `ExampleCli` that inherits from `cline.ArgumentParserCli`. Override `make_parser()` to return an `ArgumentParser` that accepts two numbers.\n\nFor example:\n\n```python\nfrom argparse import ArgumentParser\nfrom cline import ArgumentParserCli\n\nclass ExampleCli(ArgumentParserCli):\n    def make_parser(self) -> ArgumentParser:\n        parser = ArgumentParser()\n        parser.add_argument(\n          \"a\",\n          help=\"first number\",\n          nargs=\"?\",\n        )\n        parser.add_argument(\n          \"b\",\n          help=\"second number\",\n          nargs=\"?\",\n        )\n        return parser\n```\n\n#### 2. Creating a task\n\nA task does two things:\n\n1. Converts the command line arguments to strongly-typed task arguments\n1. Operates on strongly-typed task arguments\n\nWe'll start with the strongly-typed task arguments. Since we'll be summing two integers, let's define a dataclass that holds two integers:\n\n```python\nfrom dataclasses import dataclass\n\n@dataclass\nclass NumberArgs:\n    a: int\n    b: int\n```\n\nNow we need a way to convert command line arguments to these task arguments. Create a class named `SumTask` and inherit from `cline.Task`. `Task` is generic and requires your strongly-typed arguments type.\n\n```python\nfrom dataclasses import dataclass\nfrom cline import CommandLineArguments, Task\n\n@dataclass\nclass NumberArgs:\n    a: int\n    b: int\n\nclass SumTask(Task[NumberArgs]):\n    pass\n```\n\nTo convert command line arguments to strongly-typed task arguments, override the `make_args()` method:\n\n```python\nfrom dataclasses import dataclass\nfrom cline import CommandLineArguments, Task\n\n@dataclass\nclass NumberArgs:\n    a: int\n    b: int\n\nclass SumTask(Task[NumberArgs]):\n    @classmethod\n    def make_args(cls, args: CommandLineArguments) -> NumberArgs:\n        return NumberArgs(\n            a=args.get_integer(\"a\"),\n            b=args.get_integer(\"b\"),\n        )\n```\n\n`CommandLineArguments` wraps the parsed command line arguments with some handy functions for reading argument values.\n\nFor example, since we named the two numbers `a` and `b` in the parser earlier, we can refer to them by name and call `get_integer()` to get their values.\n\nNote that `CommandLineArguments` will raise `CannotMakeArguments` if `a` or `b` aren't set or can't be parsed as integers. This is the correct way to indicate that task arguments cannot be made for a given task. You don't need to validate the arguments yourself.\n\nNow that `SumTask` knows how to create strongly-typed arguments, we can operate on them.\n\nOverride the `invoke()` method to:\n\n1. Operate on `self.args`\n1. Write output to `self.out`\n1. Return the shell exit code\n\nIn this example, `invoke()` sums the two integer arguments, writes the result, then returns `0` to indicate success:\n\n```python\nfrom dataclasses import dataclass\nfrom cline import CommandLineArguments, Task\n\n@dataclass\nclass NumberArgs:\n    a: int\n    b: int\n\nclass SumTask(Task[NumberArgs]):\n    @classmethod\n    def make_args(cls, args: CommandLineArguments) -> NumberArgs:\n        return NumberArgs(\n            a=args.get_integer(\"a\"),\n            b=args.get_integer(\"b\"),\n        )\n\n    def invoke(self) -> int:\n        result = self.args.a + self.args.b\n        self.out.write(f\"{result}\\n\")\n        return 0\n```\n\n#### 3. Registering the task with the CLI\n\nBack in your CLI class, override `register_tasks()` to register `SumTask`:\n\n```python\nfrom argparse import ArgumentParser\nfrom cline import ArgumentParserCli\nfrom examples.example01.sum import SumTask\n\nclass ExampleCli(ArgumentParserCli):\n    def make_parser(self) -> ArgumentParser:\n        parser = ArgumentParser()\n        parser.add_argument(\n          \"a\",\n          help=\"first number\",\n          nargs=\"?\",\n        )\n        parser.add_argument(\n          \"b\",\n          help=\"second number\",\n          nargs=\"?\",\n        )\n        return parser\n\n    def register_tasks(self) -> RegisteredTasks:\n        return [\n            SumTask,\n        ]\n```\n\n#### 4. Creating a CLI entry point\n\nFinally, create a `__main__.py` script that calls your CLI's `invoke_and_exit()` method:\n\n```python\nfrom examples.example01.cli import ExampleCli\n\ndef entry() -> None:\n    ExampleCli.invoke_and_exit()\n\nif __name__ == \"__main__\":\n    entry()\n```\n\nAnd that's it! You can now sum integers on the command line:\n\n```bash\npython -m examples.example01 1 3\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\n4\n```\n\n<!--edition-exec range=end-->\n\n#### 5. Unit testing\n\nCline was designed to support easy high coverage of your work.\n\nTo test your task's `make_args()` function, construct your own `CommandLineArguments` instance with the command line arguments to test, then verify that `make_args()` returns the strongly-typed arguments that you'd expect:\n\n```python\nfrom cline import CommandLineArguments\nfrom examples.example01.sum import SumTask, NumberArgs\n\ndef test_make_args() -> None:\n    cli_args = CommandLineArguments(\n        {\n            \"a\": \"1\",\n            \"b\": \"2\",\n        }\n    )\n\n    args = SumTask.make_args(cli_args)\n    assert args == NumberArgs(a=1, b=2)\n```\n\nTo test your task's `invoke()` function, construct your own strongly-typed arguments and an output writer then assert that the shell exit code and written response are as you expect:\n\n```python\nfrom io import StringIO\nfrom examples.example01.sum import SumTask, NumberArgs\n\ndef test_invoke() -> None:\n    out = StringIO()\n    task = SumTask(args=NumberArgs(a=5, b=2), out=out)\n    assert task.invoke() == 0\n    assert out.getvalue() == \"7\\n\"\n```\n\nTo test that the CLI will invoke your task for a given set of command line arguments, you can instantiate your CLI with the arguments to test then assert that the `.task` and `.task.args` properties are as you expect:\n\n```python\nfrom typing import List, Type\n\nfrom pytest import mark\n\nfrom cline import AnyTask\nfrom examples.example01.cli import ExampleCli\nfrom examples.example01.tasks import NumberArgs, SumTask\n\n@mark.parametrize(\n    \"args, expect_task, expect_args\",\n    [\n        ([\"1\", \"2\"], SumTask, NumberArgs(a=1, b=2)),\n    ],\n)\ndef test(\n    args: List[str],\n    expect_task: Type[AnyTask],\n    expect_args: NumberArgs,\n) -> None:\n    cli = ExampleCli(args=args)\n    assert isinstance(cli.task, expect_task)\n    assert cli.task.args == expect_args\n```\n\n### Example 2: Adding support for subtraction\n\n_The source code for this example is available at [github.com/cariad/cline/blob/main/examples/example02](https://github.com/cariad/cline/blob/main/examples/example02). The tests are in [github.com/cariad/cline/blob/main/tests/examples/example02](https://github.com/cariad/cline/blob/main/tests/examples/example02)._\n\nIn this example, we'll build on Example 1 to allow integers to be subtracted. We'll add `--sum` and `--sub` flags to describe that we want to do.\n\nFor example:\n\n```bash\npython -m examples.example02 --sum 8 5\npython -m examples.example02 --sub 8 5\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\n13\n3\n```\n\n<!--edition-exec range=end-->\n\n#### 1. Add the new flags to the argument parser\n\nIn your CLI class, update the argument parser to support `--sum` and `--sub` flags:\n\n```python\ndef make_parser(self) -> ArgumentParser:\n    parser = ArgumentParser()\n    parser.add_argument(\"a\", help=\"first number\", nargs=\"?\")\n    parser.add_argument(\"b\", help=\"second number\", nargs=\"?\")\n    parser.add_argument(\n        \"--sub\",\n        help=\"subtract\",\n        action=\"store_true\",\n    )\n    parser.add_argument(\n        \"--sum\",\n        help=\"sum\",\n        action=\"store_true\",\n    )\n    return parser\n```\n\nNote that the new arguments are presented as `--sub` and `--sum` here, but their names omit the dashes. The new arguments are named `sub` and `sum`.\n\n#### 2. Update SumTask to require the \"--sum\" flag\n\nIn the previous example, we wanted `SumTask` to always run if we gave it two numbers. Now we want it to run only if we give it two numbers _and_ the `--sum` flag.\n\nWe can achieve this simply by calling `assert_true()` in the task's `make_args()` function, passing the name of the flag we want to assert is truthy:\n\n```python\n@classmethod\ndef make_args(cls, args: CommandLineArguments) -> NumberArgs:\n    args.assert_true(\"sum\")\n\n    return NumberArgs(\n        a=args.get_integer(\"a\"),\n        b=args.get_integer(\"b\"),\n    )\n```\n\n#### 3. Create the SubtractTask class\n\nTo perform subtraction, we'll need a `SubtractTask` class. This is almost identical to `SumTask`, expect:\n\n1. We want to assert that the `sub` (not `sum`) flag is truthy\n1. We want to subtract (not sum) the arguments\n\nSo, for example:\n\n```python\nclass SubtractTask(Task[NumberArgs]):\n    @classmethod\n    def make_args(cls, args: CommandLineArguments) -> NumberArgs:\n        args.assert_true(\"sub\")\n\n        return NumberArgs(\n            a=args.get_integer(\"a\"),\n            b=args.get_integer(\"b\"),\n        )\n\n    def invoke(self) -> int:\n        result = self.args.a - self.args.b\n        self.out.write(f\"{result}\\n\")\n        return 0\n```\n\n#### 4. Register the SubtractTask class\n\nOpen your CLI class and register `SubtractTask`:\n\n```python\ndef register_tasks(self) -> RegisteredTasks:\n    return [\n        examples.example02.tasks.SubtractTask,\n        examples.example02.tasks.SumTask,\n    ]\n```\n\n...and that's it! When your application runs, Cline will try each registered task in order until one is found that accepts the given command line arguments, then executes it:\n\n```bash\npython -m examples.example02 --sum 8 5\npython -m examples.example02 --sub 8 5\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\n13\n3\n```\n\n<!--edition-exec range=end-->\n\n### Example 3: Supporting help and versions\n\n_The source code for this example is available at [github.com/cariad/cline/blob/main/examples/example03](https://github.com/cariad/cline/blob/main/examples/example03). The tests are in [github.com/cariad/cline/blob/main/tests/examples/example03](https://github.com/cariad/cline/blob/main/tests/examples/example03)._\n\nCline has baked-in support for printing your application's help and version on the command line.\n\nEnabling support for help is easy enough: it's already enabled. If Cline cannot find any registered tasks that can handle the given command line arguments then it will print the argument parser's help.\n\nFor example, if we run one of the above examples without specifying any numbers then each task's `make_args()` call will fail and Cline will fall back to displaying the help:\n\n```bash\npython -m examples.example01\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\nusage: __main__.py [-h] [a] [b]\n\npositional arguments:\n  a           first number\n  b           second number\n\noptions:\n  -h, --help  show this help message and exit\n```\n\n<!--edition-exec range=end-->\n\nAdding support for version printing is a two-step process. First, add a `--version` flag to your argument parser:\n\n```python\ndef make_parser(self) -> ArgumentParser:\n    parser = ArgumentParser()\n    parser.add_argument(\"a\", help=\"first number\", nargs=\"?\")\n    parser.add_argument(\"b\", help=\"second number\", nargs=\"?\")\n    parser.add_argument(\n        \"--sub\",\n        help=\"subtracts numbers\",\n        action=\"store_true\",\n    )\n    parser.add_argument(\n        \"--sum\",\n        help=\"sums numbers\",\n        action=\"store_true\",\n    )\n    parser.add_argument(\n        \"--version\",\n        help=\"show version\",\n        action=\"store_true\",\n    )\n    return parser\n```\n\nThen in `__main__.py`, pass your application's version into `invoke_and_exit()`:\n\n```python\nfrom examples.full import __version__\nfrom examples.full.cli import ExampleCli\n\ndef entry() -> None:\n    ExampleCli.invoke_and_exit(app_version=__version__)\n\nif __name__ == \"__main__\":\n    entry()\n```\n\nNow you can pass `--version` on the command line and get your application's version:\n\n```bash\npython -m examples.example03 --version\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\n1.2.3\n```\n\n<!--edition-exec range=end-->\n\nNote that this code depends on your own implementation of versioning. I use `__version__` but you don't have to. If your application's version is gettable via a property other than `__version__` then pass that instead.\n\n### Example 4: Making your package executable after installing\n\nThis isn't Cline functionality, but I'll preempt the question by answering it now.\n\nIn your `setup.py` script, pass an `entry_points` value into `setup()`:\n\n```python\nsetup(\n    # ...\n    entry_points={\n        \"console_scripts\": [\n            \"foo=bar.__main__:entry\",\n        ],\n    },\n    # ...\n)\n```\n\nNote that:\n\n- `foo` is the name of the command you want your users to run (i.e. `foo --help`)\n- `bar` is your package name\n- `entry` is the name of the function to run inside `__main__.py`\n\n## Project\n\n### Contributing\n\nTo contribute a bug report, enhancement or feature request, please raise an issue at [github.com/cariad/cline/issues](https://github.com/cariad/cline/issues).\n\nIf you want to contribute a code change, please raise an issue first so we can chat about the direction you want to take.\n\n### Licence\n\nEdition is released at [github.com/cariad/cline](https://github.com/cariad/cline) under the MIT Licence.\n\nSee [LICENSE](https://github.com/cariad/cline/blob/main/LICENSE) for more information.\n\n### Author\n\nHello! ðŸ‘‹ I'm **Cariad Eccleston** and I'm a freelance DevOps and backend engineer. My contact details are available on my personal wiki at [cariad.earth](https://cariad.earth).\n\nPlease consider supporting my open source projects by [sponsoring me on GitHub](https://github.com/sponsors/cariad/).\n\n### Acknowledgements\n\n- This documentation was pressed with [Edition](https://github.com/cariad/edition).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cariad/cline",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cline",
    "package_url": "https://pypi.org/project/cline/",
    "platform": null,
    "project_url": "https://pypi.org/project/cline/",
    "project_urls": {
      "Homepage": "https://github.com/cariad/cline"
    },
    "release_url": "https://pypi.org/project/cline/1.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Command line interface builder",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17496918,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d354f1bd30eb2d623df49b0edba3254365d229757abe2fad631c6c4eb7b26ca0",
          "md5": "ef8c044e55662adc8b84693cf03e1932",
          "sha256": "072fe6053fdb97d0e049b31c86253c2ffeda434a1eac06a00d4c150d75d33a5d"
        },
        "downloads": -1,
        "filename": "cline-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef8c044e55662adc8b84693cf03e1932",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13750,
        "upload_time": "2021-11-22T15:07:39",
        "upload_time_iso_8601": "2021-11-22T15:07:39.570267Z",
        "url": "https://files.pythonhosted.org/packages/d3/54/f1bd30eb2d623df49b0edba3254365d229757abe2fad631c6c4eb7b26ca0/cline-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1709b6251c7e3e0b12bba1f666232a80181f398d9467371b9fb10efd3d92ff20",
          "md5": "0a7be1089a94b10deb69db5e7a91d15d",
          "sha256": "599cede5179eee4213d61fe873283d530562bf4f4c51a0bf8ce6a13060c38577"
        },
        "downloads": -1,
        "filename": "cline-1.0.0a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a7be1089a94b10deb69db5e7a91d15d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 2258,
        "upload_time": "2021-11-16T08:30:24",
        "upload_time_iso_8601": "2021-11-16T08:30:24.773159Z",
        "url": "https://files.pythonhosted.org/packages/17/09/b6251c7e3e0b12bba1f666232a80181f398d9467371b9fb10efd3d92ff20/cline-1.0.0a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6076d45fafb7d6889c09e7a30af4722485d225af297c2d2fac92152c365b99d6",
          "md5": "5c881d9e184eed928bbca959b042087d",
          "sha256": "dbcc14b99a8f1285b8052a021d29e142c7c7f01774a1f6ee9aea2791ce64449d"
        },
        "downloads": -1,
        "filename": "cline-1.0.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c881d9e184eed928bbca959b042087d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8536,
        "upload_time": "2021-11-22T12:20:26",
        "upload_time_iso_8601": "2021-11-22T12:20:26.450018Z",
        "url": "https://files.pythonhosted.org/packages/60/76/d45fafb7d6889c09e7a30af4722485d225af297c2d2fac92152c365b99d6/cline-1.0.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68ebb58c0aa42c7f4f1a7038129bded70e728c7d924aa415de1737c33aa92832",
          "md5": "d3647931f6c2b7752c23dce04679e097",
          "sha256": "d4331bdd7c3920c9f1ef1cc19c267caa7ad3bc0ba18d31f5564f714b8110e960"
        },
        "downloads": -1,
        "filename": "cline-1.0.0a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3647931f6c2b7752c23dce04679e097",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13687,
        "upload_time": "2021-11-22T12:39:21",
        "upload_time_iso_8601": "2021-11-22T12:39:21.963206Z",
        "url": "https://files.pythonhosted.org/packages/68/eb/b58c0aa42c7f4f1a7038129bded70e728c7d924aa415de1737c33aa92832/cline-1.0.0a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fca2292ecb1b3c1e7f76927094e7264deb75aa0ac045816d0d80a8e67daaeb31",
          "md5": "9da621ed8a27617fff7cda29d19776f6",
          "sha256": "baf10a0cfc200fd8008675f3cc90be3c327885bf3f26e7631dee6aaa6b9a4521"
        },
        "downloads": -1,
        "filename": "cline-1.0.0a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9da621ed8a27617fff7cda29d19776f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13725,
        "upload_time": "2021-11-22T12:57:44",
        "upload_time_iso_8601": "2021-11-22T12:57:44.097233Z",
        "url": "https://files.pythonhosted.org/packages/fc/a2/292ecb1b3c1e7f76927094e7264deb75aa0ac045816d0d80a8e67daaeb31/cline-1.0.0a3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ac95caf4c132dfe4e85e1611940408fd2dbdbf6bb8ee528dd47f3507588f993",
          "md5": "246d97329c4a04603a8901d47d967a37",
          "sha256": "71108d53d7b63f53d47a288817a5014b14b296bfe3d6164b23393bde0415aa67"
        },
        "downloads": -1,
        "filename": "cline-1.0.0a4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "246d97329c4a04603a8901d47d967a37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13766,
        "upload_time": "2021-11-22T13:24:52",
        "upload_time_iso_8601": "2021-11-22T13:24:52.800007Z",
        "url": "https://files.pythonhosted.org/packages/9a/c9/5caf4c132dfe4e85e1611940408fd2dbdbf6bb8ee528dd47f3507588f993/cline-1.0.0a4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72a4cc551d27bcddc7bb01a2eeb7579a0680628a18f37809c8dc10da07d318f1",
          "md5": "6af8ea12a998bba000b3a7b242f5b702",
          "sha256": "b27b95719d39885922f9396018f76f0fcc6f50e9b646dcdf948ad55fab439952"
        },
        "downloads": -1,
        "filename": "cline-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6af8ea12a998bba000b3a7b242f5b702",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13816,
        "upload_time": "2021-11-27T12:47:49",
        "upload_time_iso_8601": "2021-11-27T12:47:49.091430Z",
        "url": "https://files.pythonhosted.org/packages/72/a4/cc551d27bcddc7bb01a2eeb7579a0680628a18f37809c8dc10da07d318f1/cline-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81a998ccd9b92169cf2558ba29f2b4e1f4f0fb8edbdbb51e38643eefb28bc3ec",
          "md5": "c0f0916fccd527347160012616531530",
          "sha256": "69d20d4549b9b0d5bdb35058332722803552d28180220793479b712f045594c5"
        },
        "downloads": -1,
        "filename": "cline-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0f0916fccd527347160012616531530",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13851,
        "upload_time": "2021-12-04T16:42:45",
        "upload_time_iso_8601": "2021-12-04T16:42:45.475626Z",
        "url": "https://files.pythonhosted.org/packages/81/a9/98ccd9b92169cf2558ba29f2b4e1f4f0fb8edbdbb51e38643eefb28bc3ec/cline-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a25dde8c65691bc30856a74fc3ecb7cc33cbc4fbabbb4dccd4c4a91b22088dc",
          "md5": "cd02d35d627d04b27c12bcb7c5050503",
          "sha256": "dc1e0fefb8c32f10e47d42fa1b37eedac6d3b052163d777a4262e3e6a31f96ce"
        },
        "downloads": -1,
        "filename": "cline-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd02d35d627d04b27c12bcb7c5050503",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13827,
        "upload_time": "2023-03-29T17:33:28",
        "upload_time_iso_8601": "2023-03-29T17:33:28.822505Z",
        "url": "https://files.pythonhosted.org/packages/2a/25/dde8c65691bc30856a74fc3ecb7cc33cbc4fbabbb4dccd4c4a91b22088dc/cline-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a25dde8c65691bc30856a74fc3ecb7cc33cbc4fbabbb4dccd4c4a91b22088dc",
        "md5": "cd02d35d627d04b27c12bcb7c5050503",
        "sha256": "dc1e0fefb8c32f10e47d42fa1b37eedac6d3b052163d777a4262e3e6a31f96ce"
      },
      "downloads": -1,
      "filename": "cline-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd02d35d627d04b27c12bcb7c5050503",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 13827,
      "upload_time": "2023-03-29T17:33:28",
      "upload_time_iso_8601": "2023-03-29T17:33:28.822505Z",
      "url": "https://files.pythonhosted.org/packages/2a/25/dde8c65691bc30856a74fc3ecb7cc33cbc4fbabbb4dccd4c4a91b22088dc/cline-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}