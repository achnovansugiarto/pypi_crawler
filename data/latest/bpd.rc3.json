{
  "info": {
    "author": "CADIC Jean-Maximilien",
    "author_email": "git@zakuro.ai",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n<h1 align=\"center\">\n  <br>\n  <img src=\"https://drive.google.com/uc?id=1CV1tY4jcZDO4g_CLhGQK5VUN2q9SNsll\" width=\"200\">\n  <br>\n    bpd\n  <br>\n</h1>\n\n<p align=\"center\">\n  <a href=\"#modules\">Modules</a> •\n  <a href=\"#code-structure\">Code structure</a> •\n  <a href=\"#installing-the-application\">Installing the application</a> •\n  <a href=\"#makefile-commands\">Makefile commands</a> •\n  <a href=\"#environments\">Environments</a> •\n  <a href=\"#running-the-application\">Running the application</a>•\n  <a href=\"#notebook\">Notebook</a>•\n  <a href=\"#pipeline\">Pipeline</a>•\n  <a href=\"#ressources\">Ressources</a>\n</p>\n\n\n# Code structure\n```python\nfrom setuptools import setup\nfrom bpd import __version__\n\n\nsetup(\n    name=\"bpd\",\n    version=__version__,\n    short_description=\"bpd\",\n    packages=[\n        \"bpd\",\n        \"bpd.dask\",\n        \"bpd.dask.types\",\n        \"bpd.pandas\",\n        \"bpd.pyspark\",\n        \"bpd.pyspark.udf\",\n        \"bpd.tests\",\n    ],\n    long_description=\"\".join(open(\"README.md\", \"r\").readlines()),\n    long_description_content_type=\"text/markdown\",\n    include_package_data=True,\n    package_data={\"\": [\"*.yml\"]},\n    url=\"https://github.com/zakuro-ai/bpd\",\n    license=\"MIT\",\n    author=\"CADIC Jean-Maximilien\",\n    python_requires=\">=3.6\",\n    install_requires=[r.rsplit()[0] for r in open(\"requirements.txt\")],\n    author_email=\"git@zakuro.ai\",\n    description=\"bpd\",\n    platforms=\"linux_debian_10_x86_64\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n    ],\n)\n\n\n```\n\n\n# Installing the application\nTo clone and run this application, you'll need the following installed on your computer:\n- [Git](https://git-scm.com)\n- Docker Desktop\n   - [Install Docker Desktop on Mac](https://docs.docker.com/docker-for-mac/install/)\n   - [Install Docker Desktop on Windows](https://docs.docker.com/desktop/install/windows-install/)\n   - [Install Docker Desktop on Linux](https://docs.docker.com/desktop/install/linux-install/)\n- [Python](https://www.python.org/downloads/)\n\nInstall bpd:\n```bash\n# Clone this repository and install the code\ngit clone https://github.com/JeanMaximilienCadic/bpd\n\n# Go into the repository\ncd bpd\n```\n\n\n# Makefile commands\nExhaustive list of make commands:\n```\ninstall_wheels\nsandbox_cpu\nsandbox_gpu\nbuild_sandbox\npush_environment\npush_container_sandbox\npush_container_vanilla\npull_container_vanilla\npull_container_sandbox\nbuild_vanilla\nbuild_wheels\nauto_branch \n```\n# Environments\n\n## Docker\n\n> **Note**\n> \n> Running this application by using Docker is recommended.\n\nTo build and run the docker image\n```\nmake build\nmake sandbox\n```\n\n## PythonEnv\n\n> **Warning**\n> \n> Running this application by using PythonEnv is possible but *not* recommended.\n```\nmake install_wheels\n```\n# Running the application\n\n```console\nmake tests\n```\n```\n=1= TEST PASSED : bpd\n=1= TEST PASSED : bpd.dask\n=1= TEST PASSED : bpd.dask.types\n=1= TEST PASSED : bpd.pandas\n=1= TEST PASSED : bpd.pyspark\n=1= TEST PASSED : bpd.pyspark.udf\n=1= TEST PASSED : bpd.tests\n+-----------+-------+-------------+-------------+-------+----+------------------------+---+-------+\n|Pregnancies|Glucose|BloodPressure|SkinThickness|Insulin| BMI|DiabetesPedigreeFunction|Age|Outcome|\n+-----------+-------+-------------+-------------+-------+----+------------------------+---+-------+\n|          6|    148|           72|           35|      0|33.6|                   0.627| 50|      1|\n|          1|     85|           66|           29|      0|26.6|                   0.351| 31|      0|\n|          8|    183|           64|            0|      0|23.3|                   0.672| 32|      1|\n|          1|     89|           66|           23|     94|28.1|                   0.167| 21|      0|\n|          0|    137|           40|           35|    168|43.1|                   2.288| 33|      1|\n|          5|    116|           74|            0|      0|25.6|                   0.201| 30|      0|\n|          3|     78|           50|           32|     88|  31|                   0.248| 26|      1|\n|         10|    115|            0|            0|      0|35.3|                   0.134| 29|      0|\n|          2|    197|           70|           45|    543|30.5|                   0.158| 53|      1|\n|          8|    125|           96|            0|      0|   0|                   0.232| 54|      1|\n|          4|    110|           92|            0|      0|37.6|                   0.191| 30|      0|\n|         10|    168|           74|            0|      0|  38|                   0.537| 34|      1|\n|         10|    139|           80|            0|      0|27.1|                   1.441| 57|      0|\n|          1|    189|           60|           23|    846|30.1|                   0.398| 59|      1|\n|          5|    166|           72|           19|    175|25.8|                   0.587| 51|      1|\n|          7|    100|            0|            0|      0|  30|                   0.484| 32|      1|\n|          0|    118|           84|           47|    230|45.8|                   0.551| 31|      1|\n|          7|    107|           74|            0|      0|29.6|                   0.254| 31|      1|\n|          1|    103|           30|           38|     83|43.3|                   0.183| 33|      0|\n|          1|    115|           70|           30|     96|34.6|                   0.529| 32|      1|\n+-----------+-------+-------------+-------------+-------+----+------------------------+---+-------+\nonly showing top 20 rows\n\n.\n----------------------------------------------------------------------\nRan 1 test in 2.701s\n\nOK\n```\n\n# Notebook\n## Pipeline\n```python\nfrom gnutools import fs\nfrom gnutools.remote import gdrivezip\nfrom bpd import cfg\nfrom bpd.dask import DataFrame, udf\nfrom bpd.dask import functions as F\nfrom bpd.dask.pipelines import *\n```\n\n\n```python\n# Import a sample dataset\ndf = DataFrame({\"filename\": fs.listfiles(gdrivezip(cfg.gdrive.google_mini)[0], [\".wav\"])})\ndf.compute()      \n```\n\n\n\n\n<div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/919...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/6a2...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/682...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/beb...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/d37...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# Register a user-defined function\n@udf\ndef word(f):\n    return fs.name(fs.parent(f))\n\n@udf\ndef initial(classe):\n    return classe[0]\n\n@udf\ndef lists(classes):\n    return list(set(classes))\n    \n\ndf.run_pipelines(\n    [\n        {\n            select_cols: (\"filename\",),\n            pipeline: (\n                (\"classe\", word(F.col(\"filename\"))),\n                (\"name\", udf(fs.name)(F.col(\"filename\"))),\n            ),\n        },\n        {\n            group_on: \"classe\",\n            select_cols: (\"name\", ),\n            pipeline: (\n                (\"initial\", initial(F.col(\"classe\"))),\n            ),\n        },\n        {\n            group_on: \"initial\",\n            select_cols: (\"classe\", ),\n            pipeline: (\n                (\"_initial\", lists(F.col(\"classe\"))),\n            ),\n        },\n    ]\n)\\\n.withColumnRenamed(\"_initial\", \"initial\")\\\n.compute()\n```\n\n\n\n\n<div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n      <th>initial</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/919...</td>\n      <td>[wow]</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/6a2...</td>\n      <td>[wow]</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/682...</td>\n      <td>[wow]</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/beb...</td>\n      <td>[wow]</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/d37...</td>\n      <td>[wow]</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## Sequential calls\n```python\nfrom gnutools import fs\nfrom bpd.dask import DataFrame, udf\nfrom bpd.dask import functions as F\nfrom gnutools.remote import gdrivezip\n```\n\n\n```python\n# Import a sample dataset\ngdrivezip(\"gdrive://1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE\")\ndf = DataFrame({\"filename\": fs.listfiles(\"/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE\", [\".wav\"])})\ndf.compute()      \n```\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/919...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/6a2...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/682...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/beb...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/d37...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/6a...</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e3...</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/68...</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e7...</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/65...</td>\n    </tr>\n  </tbody>\n</table>\n<p>150 rows × 1 columns</p>\n</div>\n\n\n\n\n```python\n# Register a user-defined function\n@udf\ndef word(f):\n    return fs.name(fs.parent(f))\n\n# Apply a udf function\ndf\\\n.withColumn(\"classe\", word(F.col(\"filename\")))\\\n.compute()    \n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n      <th>classe</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/919...</td>\n      <td>wow</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/6a2...</td>\n      <td>wow</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/682...</td>\n      <td>wow</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/beb...</td>\n      <td>wow</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/d37...</td>\n      <td>wow</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/6a...</td>\n      <td>left</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e3...</td>\n      <td>left</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/68...</td>\n      <td>left</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e7...</td>\n      <td>left</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/65...</td>\n      <td>left</td>\n    </tr>\n  </tbody>\n</table>\n<p>150 rows × 2 columns</p>\n</div>\n\n\n\n\n```python\n# You can use inline udf functions\ndf\\\n.withColumn(\"name\", udf(fs.name)(F.col(\"filename\")))\\\n.display()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/919...</td>\n      <td>919d3c0e_nohash_2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/6a2...</td>\n      <td>6a27a9bf_nohash_0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/682...</td>\n      <td>6823565f_nohash_2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/beb...</td>\n      <td>beb49c22_nohash_1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/d37...</td>\n      <td>d37e4bf1_nohash_0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/6a...</td>\n      <td>6a27a9bf_nohash_0</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e3...</td>\n      <td>e32ff49d_nohash_0</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/68...</td>\n      <td>6823565f_nohash_2</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e7...</td>\n      <td>e77d88fc_nohash_0</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/65...</td>\n      <td>659b7fae_nohash_2</td>\n    </tr>\n  </tbody>\n</table>\n<p>150 rows × 2 columns</p>\n</div>\n\n\n\n\n```python\n# Retrieve the first 3 filename per classe\ndf\\\n.withColumn(\"classe\", word(F.col(\"filename\")))\\\n.aggregate(\"classe\")\\\n.withColumn(\"filename\", F.top_k(F.col(\"filename\"), 3))\\\n.explode(\"filename\")\\\n.compute()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n    </tr>\n    <tr>\n      <th>classe</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>wow</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/919...</td>\n    </tr>\n    <tr>\n      <th>wow</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/6a2...</td>\n    </tr>\n    <tr>\n      <th>wow</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/682...</td>\n    </tr>\n    <tr>\n      <th>nine</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/nine/0f...</td>\n    </tr>\n    <tr>\n      <th>nine</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/nine/6a...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>yes</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/yes/0a9...</td>\n    </tr>\n    <tr>\n      <th>yes</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/yes/0a7...</td>\n    </tr>\n    <tr>\n      <th>left</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/6a...</td>\n    </tr>\n    <tr>\n      <th>left</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e3...</td>\n    </tr>\n    <tr>\n      <th>left</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/68...</td>\n    </tr>\n  </tbody>\n</table>\n<p>90 rows × 1 columns</p>\n</div>\n\n\n\n\n```python\n# Add the classe column to the original dataframe\ndf = df\\\n.withColumn(\"classe\", word(F.col(\"filename\")))\n\n# Display the modified dataframe\ndf.display()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n      <th>classe</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/919...</td>\n      <td>wow</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/6a2...</td>\n      <td>wow</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/682...</td>\n      <td>wow</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/beb...</td>\n      <td>wow</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/d37...</td>\n      <td>wow</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/6a...</td>\n      <td>left</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e3...</td>\n      <td>left</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/68...</td>\n      <td>left</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e7...</td>\n      <td>left</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/65...</td>\n      <td>left</td>\n    </tr>\n  </tbody>\n</table>\n<p>150 rows × 2 columns</p>\n</div>\n\n\n\n\n```python\n# Display the dataframe\n# Retrieve the first 3 filename per classe\n@udf\ndef initial(classe):\n    return classe[0]\n    \n\n_df = df\\\n.aggregate(\"classe\")\\\n.reset_index(hard=False)\\\n.withColumn(\"initial\", initial(F.col(\"classe\")))\\\n.select([\"classe\", \"initial\"])\\\n.set_index(\"classe\")\n\n# Display the dataframe grouped by classe\n_df.compute()\n    \n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>initial</th>\n    </tr>\n    <tr>\n      <th>classe</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>bed</th>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>bird</th>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>cat</th>\n      <td>c</td>\n    </tr>\n    <tr>\n      <th>dog</th>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>down</th>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>eight</th>\n      <td>e</td>\n    </tr>\n    <tr>\n      <th>five</th>\n      <td>f</td>\n    </tr>\n    <tr>\n      <th>four</th>\n      <td>f</td>\n    </tr>\n    <tr>\n      <th>go</th>\n      <td>g</td>\n    </tr>\n    <tr>\n      <th>happy</th>\n      <td>h</td>\n    </tr>\n    <tr>\n      <th>house</th>\n      <td>h</td>\n    </tr>\n    <tr>\n      <th>left</th>\n      <td>l</td>\n    </tr>\n    <tr>\n      <th>marvin</th>\n      <td>m</td>\n    </tr>\n    <tr>\n      <th>nine</th>\n      <td>n</td>\n    </tr>\n    <tr>\n      <th>no</th>\n      <td>n</td>\n    </tr>\n    <tr>\n      <th>off</th>\n      <td>o</td>\n    </tr>\n    <tr>\n      <th>on</th>\n      <td>o</td>\n    </tr>\n    <tr>\n      <th>one</th>\n      <td>o</td>\n    </tr>\n    <tr>\n      <th>right</th>\n      <td>r</td>\n    </tr>\n    <tr>\n      <th>seven</th>\n      <td>s</td>\n    </tr>\n    <tr>\n      <th>sheila</th>\n      <td>s</td>\n    </tr>\n    <tr>\n      <th>six</th>\n      <td>s</td>\n    </tr>\n    <tr>\n      <th>stop</th>\n      <td>s</td>\n    </tr>\n    <tr>\n      <th>three</th>\n      <td>t</td>\n    </tr>\n    <tr>\n      <th>tree</th>\n      <td>t</td>\n    </tr>\n    <tr>\n      <th>two</th>\n      <td>t</td>\n    </tr>\n    <tr>\n      <th>up</th>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>wow</th>\n      <td>w</td>\n    </tr>\n    <tr>\n      <th>yes</th>\n      <td>y</td>\n    </tr>\n    <tr>\n      <th>zero</th>\n      <td>z</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n_df_initial = _df.reset_index(hard=False).aggregate(\"initial\")\n_df_initial.compute()\n```\n\n\n\n\n<div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>classe</th>\n    </tr>\n    <tr>\n      <th>initial</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>b</th>\n      <td>[bed, bird]</td>\n    </tr>\n    <tr>\n      <th>c</th>\n      <td>[cat]</td>\n    </tr>\n    <tr>\n      <th>d</th>\n      <td>[dog, down]</td>\n    </tr>\n    <tr>\n      <th>e</th>\n      <td>[eight]</td>\n    </tr>\n    <tr>\n      <th>f</th>\n      <td>[five, four]</td>\n    </tr>\n    <tr>\n      <th>g</th>\n      <td>[go]</td>\n    </tr>\n    <tr>\n      <th>h</th>\n      <td>[happy, house]</td>\n    </tr>\n    <tr>\n      <th>l</th>\n      <td>[left]</td>\n    </tr>\n    <tr>\n      <th>m</th>\n      <td>[marvin]</td>\n    </tr>\n    <tr>\n      <th>n</th>\n      <td>[nine, no]</td>\n    </tr>\n    <tr>\n      <th>o</th>\n      <td>[off, on, one]</td>\n    </tr>\n    <tr>\n      <th>r</th>\n      <td>[right]</td>\n    </tr>\n    <tr>\n      <th>s</th>\n      <td>[seven, sheila, six, stop]</td>\n    </tr>\n    <tr>\n      <th>t</th>\n      <td>[three, tree, two]</td>\n    </tr>\n    <tr>\n      <th>u</th>\n      <td>[up]</td>\n    </tr>\n    <tr>\n      <th>w</th>\n      <td>[wow]</td>\n    </tr>\n    <tr>\n      <th>y</th>\n      <td>[yes]</td>\n    </tr>\n    <tr>\n      <th>z</th>\n      <td>[zero]</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# Join the dataframes\ndf\\\n.join(_df, on=\"classe\").drop_column(\"classe\")\\\n.join(_df_initial, on=\"initial\")\\\n.display()\n```\n\n\n\n\n<div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filename</th>\n      <th>initial</th>\n      <th>classe</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/919...</td>\n      <td>w</td>\n      <td>[wow]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/6a2...</td>\n      <td>w</td>\n      <td>[wow]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/682...</td>\n      <td>w</td>\n      <td>[wow]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/beb...</td>\n      <td>w</td>\n      <td>[wow]</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/wow/d37...</td>\n      <td>w</td>\n      <td>[wow]</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/6a...</td>\n      <td>l</td>\n      <td>[left]</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e3...</td>\n      <td>l</td>\n      <td>[left]</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/68...</td>\n      <td>l</td>\n      <td>[left]</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/e7...</td>\n      <td>l</td>\n      <td>[left]</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>/tmp/1y4gwaS7LjYUhwTex1-lNHJJ71nLEh3fE/left/65...</td>\n      <td>l</td>\n      <td>[left]</td>\n    </tr>\n  </tbody>\n</table>\n<p>150 rows × 3 columns</p>\n</div>\n\n\n\n## Ressources\n* Vanilla:  https://en.wikipedia.org/wiki/Vanilla_software\n* Sandbox: https://en.wikipedia.org/wiki/Sandbox_(software_development)\n* All you need is docker: https://www.theregister.com/2014/05/23/google_containerization_two_billion/\n* Dev in containers : https://code.visualstudio.com/docs/remote/containers\n* Delta lake partitions: https://k21academy.com/microsoft-azure/data-engineer/delta-lake/\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zakuro-ai/bpd",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bpd",
    "package_url": "https://pypi.org/project/bpd/",
    "platform": "linux_debian_10_x86_64",
    "project_url": "https://pypi.org/project/bpd/",
    "project_urls": {
      "Homepage": "https://github.com/zakuro-ai/bpd"
    },
    "release_url": "https://pypi.org/project/bpd/0.1.0/",
    "requires_dist": [
      "numpy",
      "pandas",
      "gnutools-python",
      "tqdm",
      "pyspark",
      "distributed",
      "jupyter",
      "jupyterlab"
    ],
    "requires_python": ">=3.6",
    "summary": "bpd",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16238970,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "735ffeb8f4f8cc31e1509b13667737e22c5cd082bf66ea46a5cfa67ab4650e04",
          "md5": "b4e978079315b5ec5a8178c3d383db5c",
          "sha256": "f08f3bc2ecc1b2490dbfda1759a5026b0208f7cf9b96e767a9a112dcacfb9240"
        },
        "downloads": -1,
        "filename": "bpd-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4e978079315b5ec5a8178c3d383db5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18479,
        "upload_time": "2022-09-22T02:17:03",
        "upload_time_iso_8601": "2022-09-22T02:17:03.462408Z",
        "url": "https://files.pythonhosted.org/packages/73/5f/feb8f4f8cc31e1509b13667737e22c5cd082bf66ea46a5cfa67ab4650e04/bpd-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d4cfd21472fa042272948199bd665198998b3ae622bba5c0915eb49adff7b7b",
          "md5": "cdb4f7c775480339180e8d990d9e4d31",
          "sha256": "07b7d622b2b2b74c5b1b7c979c0b90cd2cbb485214c4540a9dbae5db0b5fff09"
        },
        "downloads": -1,
        "filename": "bpd-0.1.2a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cdb4f7c775480339180e8d990d9e4d31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17503,
        "upload_time": "2022-10-22T04:49:49",
        "upload_time_iso_8601": "2022-10-22T04:49:49.913084Z",
        "url": "https://files.pythonhosted.org/packages/4d/4c/fd21472fa042272948199bd665198998b3ae622bba5c0915eb49adff7b7b/bpd-0.1.2a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ef280a728c0585afda2fdadbdbdc6d94122e17419c13f75171a005be5dc60b1",
          "md5": "ada941db6e9eff14b2eb4eb44819c602",
          "sha256": "3b29b6f28fba899d062782c12e82f429370f8f0c3b53be50c6b93888c4b91a5e"
        },
        "downloads": -1,
        "filename": "bpd-0.1.2a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ada941db6e9eff14b2eb4eb44819c602",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17660,
        "upload_time": "2022-12-28T13:57:46",
        "upload_time_iso_8601": "2022-12-28T13:57:46.536657Z",
        "url": "https://files.pythonhosted.org/packages/4e/f2/80a728c0585afda2fdadbdbdc6d94122e17419c13f75171a005be5dc60b1/bpd-0.1.2a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "735ffeb8f4f8cc31e1509b13667737e22c5cd082bf66ea46a5cfa67ab4650e04",
        "md5": "b4e978079315b5ec5a8178c3d383db5c",
        "sha256": "f08f3bc2ecc1b2490dbfda1759a5026b0208f7cf9b96e767a9a112dcacfb9240"
      },
      "downloads": -1,
      "filename": "bpd-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b4e978079315b5ec5a8178c3d383db5c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18479,
      "upload_time": "2022-09-22T02:17:03",
      "upload_time_iso_8601": "2022-09-22T02:17:03.462408Z",
      "url": "https://files.pythonhosted.org/packages/73/5f/feb8f4f8cc31e1509b13667737e22c5cd082bf66ea46a5cfa67ab4650e04/bpd-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}