{
  "info": {
    "author": "Fabrice Sincère",
    "author_email": "fabrice.sincere@ac-grenoble.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: Implementation :: MicroPython",
      "Topic :: System :: Hardware"
    ],
    "description": "## MicroPython DS1631\n\nThis MicroPython module provides an i2c driver for Maxim-Dallas DS1621 DS1631 DS1631A DS1721 DS1731 high-precision digital thermometer and thermostat.\n\n### Datasheets\n\n- [DS1631-DS1731](https://datasheets.maximintegrated.com/en/ds/DS1631-DS1731.pdf)\n- [DS1621](https://datasheets.maximintegrated.com/en/ds/DS1621.pdf)\n- [DS1721](https://datasheets.maximintegrated.com/en/ds/DS1721.pdf)\n\n### 2-wire serial data bus\n\nDS1631s (8 devices max) are connected to your MicroPython board with 4 wires :\n\n- SDA i2c bus (+ about 4.7 kΩ pull-up resistor)\n- SCL i2c bus (+ about 4.7 kΩ pull-up resistor)\n- Power (3.3 V)\n- Ground\n\nNote : successfully tested with ESP8266 NodeMCU, ESP32 WROOM-32D, STM32L476 Nucleo-64, STM32WB55 Nucleo board.\n\n### Installation\n\nFrom Pypi repository :  \n[https://pypi.org/project/micropython-ds1631](https://pypi.org/project/micropython-ds1631)\n\n```python\n>>> import upip\n>>> upip.install('micropython-ds1631')\n```\nor download the ```micropython-ds1631.tar.gz``` archive, unzip the ```DS1631.py``` module, and copy it to your MicroPython board flash memory.  \n\n### Basic usage\n\n```python\nfrom machine import Pin, I2C\nimport time\nimport DS1631\n\n# i2c bus pins\ni2c = I2C(scl=Pin(4), sda=Pin(5))\n# i2c bus scan\n[print(hex(i)) for i in i2c.scan()]\n\ni2c_address = 0x48\nic1 = DS1631.DS1631(i2c, i2c_address)\n# thermostat config\nic1.set_tout_polarity(\"active-low\")\nic1.set_thigh(24.5)\nic1.set_tlow(22.5)\n# thermometer config\nic1.set_conversion_mode(\"continuous\")\nic1.set_resolution(12)\nic1.start_convert()\n# read temperature\nwhile True:\n    time.sleep_ms(750)\n    temperature = ic1.get_temperature()\n    print(\"Temperature  : {} °C\".format(temperature))\n```\n\n### API reference\n\n- get_config_register()\n    \n    Read and return the configuration register\n\n- get_conversion_mode()\n\n    Read and return the conversion mode (\"continuous\" or \"one-shot\")\n\n- get_resolution()\n\n    Read resolution and return the tuple temperature resolution (bits), temperature resolution (°C), conversion time (ms)\n\n- get_temperature()\n\n    Read and return the last converted temperature value (°C) from the temperature register.\n\n    Note : temperature value stored in SRAM (power-up state -60 °C)\n\n- get_thigh()\n\n    Read and return the Th thermostat register (°C)\n\n- get_tlow()\n\n    Read and return the Tl thermostat register (°C)\n\n- get_tout_polarity()\n\n    Read and return the Tout polarity (\"active-low\" or \"active-high\")\n\n- is_eeprom_busy()\n\n    EEPROM status.  \n    return True if a write to memory is in progress.  \n    return False if memory is not busy.\n\n    Note : write cycle time : 10 ms max, 4 ms typ.\n\n- is_temperature_conversion_in_progress()\n\n    Temperature conversion status.  \n    return True if a temperature conversion is in progress.  \n    return False if the temperature conversion is complete.  \n\n- is_thigh_flag_on()\n\n    Th thermostat status.  \n    return False if the measured temperature has not exceeded the value stored in the Th register since power-up ; otherwise return True\n\n- is_tlow_flag_on()\n\n    Tl thermostat status.  \n    return False if the measured temperature has not been lower than the value stored in the Tl register since power-up ; otherwise return True.  \n\n- print_configuration()\n\n    Read and print configuration and status information\n\n- reset_thigh_flag()\n\n    Th thermostat status.  \n    Thigh flag is overwritten with a 0  \n\n- reset_tlow_flag()\n\n    Tl thermostat status.  \n    Tlow flag is overwritten with a 0  \n\n- set_config_register(config_register)\n\n    Write to the configuration register  \n\n    Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- set_conversion_mode(mode)\n\n    Set the conversion mode.    \n    mode = \"one-shot\" or \"continuous\".    \n    Stored in EEPROM (write cycle time : 10 ms max)  \n\n    Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- set_resolution(resolution)\n\n    Set the temperature resolution.   \n    resolution is 9, 10, 11 or 12 bits.   \n\n    Stored in SRAM (power-up state 12 bits)  \n\n    Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- set_thigh(temperature)\n\n    Set the upper thermostat trip point.  \n    temperature range : -55°C to +125°C.  \n    Stored in EEPROM (write cycle time : 10 ms max)  \n\n    Note : when making changes to the Th and Tl registers, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- set_tlow(temperature)\n\n    Set the lower thermostat trip point.  \n    temperature range : -55°C to +125°C.  \n    Stored in EEPROM (write cycle time : 10 ms max)  \n\n    Note : when making changes to the Th and Tl registers, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- set_tout_polarity(polarity)\n\n    Set the Tout polarity.  \n    polarity = \"active-low\" or \"active-high\".  \n    Stored in EEPROM (write cycle time : 10 ms max)  \n\n    Note : when writing to the configuration register, conversions should first be stopped using the Stop Convert command if the device is in continuous conversion mode.\n\n- software_por()\n\n    Initiates a software power-on-reset (POR), which stops temperature conversions and resets all registers and logic to their power-up states.\n\n    Power-up state :\n\n    temperature register : -60 °C  \n    resolution  : 12 bits  \n    temperature high flag : 0 (off)  \n    temperature low flag : 0 (off)  \n\n- start_convert()\n\n    Initiates temperature conversions.  \n    If the part is in one-shot mode, only one conversion is performed.  \n    In continuous mode, continuous temperature conversions are performed until a Stop Convert command is issued.\n\n- stop_convert()\n\n    Stops temperature conversions when the device is in continuous conversion mode.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://framagit.org/fsincere/micropython-ds1631",
    "keywords": "",
    "license": "",
    "maintainer": "Fabrice Sincère",
    "maintainer_email": "fabrice.sincere@ac-grenoble.fr",
    "name": "micropython-ds1631",
    "package_url": "https://pypi.org/project/micropython-ds1631/",
    "platform": "",
    "project_url": "https://pypi.org/project/micropython-ds1631/",
    "project_urls": {
      "Homepage": "https://framagit.org/fsincere/micropython-ds1631"
    },
    "release_url": "https://pypi.org/project/micropython-ds1631/0.4.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MicroPython i2c driver for Maxim-Dallas DS1621 DS1631 DS1631A DS1721 DS1731 digital thermometer and thermostat.",
    "version": "0.4.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7384865,
  "releases": {
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffc26e05b703715d0dac6991c9d5f13238d2d3591fa9cec1f0784fa4908378ba",
          "md5": "6cb6cad2683748327cff567981a8343a",
          "sha256": "da12e9cb7c31119b2dd98fcf8281c62e7acba64ca6dd426d85892e6e97877c39"
        },
        "downloads": -1,
        "filename": "micropython-ds1631-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6cb6cad2683748327cff567981a8343a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5957,
        "upload_time": "2020-02-04T18:46:07",
        "upload_time_iso_8601": "2020-02-04T18:46:07.516161Z",
        "url": "https://files.pythonhosted.org/packages/ff/c2/6e05b703715d0dac6991c9d5f13238d2d3591fa9cec1f0784fa4908378ba/micropython-ds1631-0.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "330082b59c09f014b5104f33c2652890e30b4fac02f6430b4a09c422b025f9a5",
          "md5": "55749e661d8e74c18e7eda1527e61ba4",
          "sha256": "7d509e3388a4fa224c15234c98fb288cb97c0c60b87d21d7733fdb90dff19ed2"
        },
        "downloads": -1,
        "filename": "micropython-ds1631-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "55749e661d8e74c18e7eda1527e61ba4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6087,
        "upload_time": "2020-04-01T10:12:49",
        "upload_time_iso_8601": "2020-04-01T10:12:49.389453Z",
        "url": "https://files.pythonhosted.org/packages/33/00/82b59c09f014b5104f33c2652890e30b4fac02f6430b4a09c422b025f9a5/micropython-ds1631-0.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "485ccba144048b2926628389b0676ed56fddbcd856ccb8df8f11bd0ce09023cd",
          "md5": "5602ac72680dc174f9b4d622fb9d32a3",
          "sha256": "756469fe22c5de0bb563e009580997b459d47f8da5140c73c2d041dc986f6f59"
        },
        "downloads": -1,
        "filename": "micropython-ds1631-0.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5602ac72680dc174f9b4d622fb9d32a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6270,
        "upload_time": "2020-06-03T07:43:21",
        "upload_time_iso_8601": "2020-06-03T07:43:21.552170Z",
        "url": "https://files.pythonhosted.org/packages/48/5c/cba144048b2926628389b0676ed56fddbcd856ccb8df8f11bd0ce09023cd/micropython-ds1631-0.4.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "485ccba144048b2926628389b0676ed56fddbcd856ccb8df8f11bd0ce09023cd",
        "md5": "5602ac72680dc174f9b4d622fb9d32a3",
        "sha256": "756469fe22c5de0bb563e009580997b459d47f8da5140c73c2d041dc986f6f59"
      },
      "downloads": -1,
      "filename": "micropython-ds1631-0.4.6.tar.gz",
      "has_sig": false,
      "md5_digest": "5602ac72680dc174f9b4d622fb9d32a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6270,
      "upload_time": "2020-06-03T07:43:21",
      "upload_time_iso_8601": "2020-06-03T07:43:21.552170Z",
      "url": "https://files.pythonhosted.org/packages/48/5c/cba144048b2926628389b0676ed56fddbcd856ccb8df8f11bd0ce09023cd/micropython-ds1631-0.4.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}