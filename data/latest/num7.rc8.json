{
  "info": {
    "author": "giocip",
    "author_email": "giocip7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# SUPREME PRECISION GENERAL PURPOSE ARITHMETIC-LOGIC DECIMAL CLASS\r\n## _DESCRIPTION AND DOC_\r\n\r\n- _**`Num`**_ is a lightweight floating point numeric class for arbitrary precision results with always supreme precision.\r\n\r\nEasy to use like school math and WITHOUT IEEE754 ISSUES or +0 AND -0 FAILURES, it can be deployed  \r\nfor web e-commerce developing, accounting apps and general math programs included financial ones.  \r\nCompatible with MicroPython also a Rasperry pi pico (RP2040) can work with almost num7 capability.  \r\n\r\n---\r\n\r\n## Installation num7 package\r\n\r\n### Using PIP\r\n\r\n- To install _**`num7 package`**_ using `pip`, enter the following:\r\n\r\n  ```python\r\n  pip  install num7 #win\r\n  pip3 install num7 #linux\r\n  ```\r\n\r\n- Ok!\r\n\r\n---\r\n\r\n## HOW TO USE (integer numeric strings (ex. '2.0') MUST BE SUFFIXED WITH .0):\r\n--- CALCULATOR MODE ---  \r\n\r\n\t                   >>> from num7 import Num, Num as calc  \r\n\tADDITION:          >>> calc.add('-5.3', '2.1')    #Num('-3.2')  \r\n\tSUBTRACTION:       >>> calc.sub('-5.3', '2.1')    #Num('-7.4')  \r\n\tMULTIPLICATION:    >>> calc.mul('-5.3', '2.1')    #Num('-11.13')  \r\n\tDIVISION:          >>> calc.div('-5.3', '2.1')    #Num('-2.52380952380952380952380952380952380952380952380952380952380952380952380952380952')  \r\n\tM+:                >>> M = calc('0.0'); M.inc('3.0'); M.inc('3.3'); M.inc('3.7'); print(M) #10.0  \r\n\tM-:                >>>                  M.dec('5.0'); M.dec('3.3'); M.dec('1.5'); print(M) #0.2  \r\n\tMC:                >>> M.clear(); print(M) #0.0  \r\n\tINT   DIV AND REM: >>> calc.divmod('5.0', '3.0')  #(Num('1.0'), Num('2.0')) => tuple  \r\n\tFLOAT DIV AND REM: >>> calc.divmod('5.2', '3.1')  #(Num('1.0'), Num('2.1')) => tuple  \r\n\tPOWER:             >>> calc.pow('-5.3', '2.0')    #Num('28.09')  \r\n\tSQRT:              >>> calc.sqrt('2.0')           #Num('1.41421356237309504880168872420969807856967187537694807317667973799073247846210703')  \r\n\tROOT_ith           >>> calc.root_i('1.860867', 3) #Num('1.23')  \r\n\tROUND:             >>> calc.sqrt('2.0').round(2)  #Num('1.41')  \r\n\tABSOLUTE VALUE     >>> calc.abs('-3.0')           #Num('3.0')  \r\n\tSUM:               >>> cart = ['19.32','18.37','15.13']; calc.sum(*cart)          #Num('52.82')  \r\n\tMEAN:              >>> cart = ['19.32','18.37','15.13']; calc.mean(*cart).round() #Num('17.61')  \r\n\tMIN:               >>> cart = ['19.32','18.37','15.13']; calc.min(cart)           #Num('15.13')  \r\n\tMAX:               >>> cart = ['19.32','18.37','15.13']; calc.max(cart)           #Num('19.32')  \r\n\tEXP:               >>> calc.mul('-5.3e1024', '2.1e1024').num2exp()                #'-1113e2046'  \r\n\tREPL:              >>> a = calc('0.1'); b = calc('0.2'); print(calc.add(a, b))    #0.3  \r\n\r\n## CODING:  \r\n\t>>> from num7 import Num, Num as calc\r\n\r\n(=) assignment:  \r\n\r\n\t>>> a = Num('3.0'); b = Num('5.0'); c = Num('0.0'); #  \r\n\t>>> print('a =', a, 'b =', b, 'c =', c) #a = 3.0 b = 5.0 c = 0.0  \r\n\r\n(+) adding:  \r\n\r\n\t>>> R = a+b+c; print(R) #8.0  \r\n\t>>> a = Num('0.1'); b = Num('0.2'); c = Num('0.0'); print(a+b+c) #0.3  \r\n\r\n(-) subtracting:  \r\n\r\n\t>>> a = Num('0.1'); b = Num('0.2'); c = Num('0.3');  \r\n\t>>> print(a+b-c) #0.0  \r\n\t>>> R = Num('-3.99') - Num('-5.20') - Num('+3.01'); print(R) #-1.8  \r\n\r\n(*) multiplying:  \r\n\r\n\t>>> Num('-3.99') * Num('-5.20') * Num('+3.01') #-3.99 * (-5.20) * (+3.01 ) = Num('62.45148')  \r\n\r\n(/) dividing (80 decimal digits default gets only for division operation):  \r\n\r\n\t>>> Num('3.0') / Num('5.7') #3 : 5.7 = Num('0.52631578947368421052631578947368421052631578947368421052631578947368421052631578')  \r\n\r\nDivision precision (ex. 128 decs) may be specified as parameter after numeric string as: \r\n \t    \r\n\t>>> Num('3.0', 128) / Num('5.7', 128) #3 : 5.7 = Num('0.52631578947368421052631578947368421052631578947368421052631578947368421052631578947368421052631578947368421052631578947368421052')  \r\n\r\n(// % operators, divmod python3 built-in function) int division and remainder:  \r\n\r\n\t>>> a = Num('5.0'); b = Num('2.0') #  \r\n\t>>> Q = a // b; R = a % b; print('Quotient =', Q, 'Remainder =', R) #Quotient = 2.0 Remainder = 1.0  \r\n\t>>> a = Num('15.0'); b = Num('4.0') #  \r\n\t>>> Q, R = divmod(a, b); print('Quotient =', Q, 'Remainder =', R)   #Quotient = 3.0 Remainder = 3.0  \r\n\r\n(divmod python3 built-in function) floating division and remainder:  \r\n\r\n\t>>> a = Num('10.123456789'); b = Num('2.0') #  \r\n\t>>> Q, R = divmod(a, b); print('Quotient =', Q, 'Remainder =', R)   #Quotient = 5.0 Remainder = 0.123456789  \r\n\r\n(sqrt) square root function:  \r\n\r\n\t>>> a = Num('123_456_789.1234567890123456789'); root = a.sqrt() # Num('11111.11106611111096998611053449930232404576951925017079015206589094347963821409843324')  \r\n\t>>> print('result digits number tuple =>', root.len()) #result digits number tuple => (5, 80)  \r\n\r\n(**) power operator and pow python3 built-in function:  \r\n\r\n\t>>> a = Num('2.22123') ** 64; print(a) # 15204983311631674774944.65147209888660757554174463321311015807893679105748958794491681177995203669698667160837739445605536688871012507194541849848681968140805876570485027380472936734094801420552285940765338219588362327695177798251793912104057999943308320501195784173135380826413054938730768027747418766018606636039075568645106645889100039914241  \r\n\t>>> print(a.len())      #(23, 320) digits len tuple  \r\n\t>>> print(Num(Num.pi))  #3.141592654  \r\n\t>>> pow(Num(Num.pi), 8) #Num('9488.531025982131642534428505085353941520356351078169077371202330414440366336')  \r\n\r\nlogic (in, not in, is, is not, <, <=, >, >=, !=, ==) and relational operators (and, or, not).  \r\n\r\n(in):  \r\n\r\n\t>>> L = [Num('0.1'), Num('1.0'), Num('5.5'), Num('-3.0'), Num('-2.9'), Num('-3.0001'), Num('2.2')]  \r\n\t>>> Num('-3.0001') in L; Num('-3.00001') in L         #True False  \r\n\r\n(not in):  \r\n\r\n\t>>> Num('-3.0001') not in L; Num('-3.00001') not in L #False True  \r\n\r\n(is, is not):  \r\n\r\n\t>>> M = calc('0.0'); Num('0.0') is M #False  \r\n\t>>> M = calc('0.0'); M.inc('0.1') is not M; M #True Num('0.1')  \r\n\t>>> M; N = M; N.dec('0.1'); N is M; M; N # Num('0.1') True Num('0.0') Num('0.0')  \r\n\r\n(< <= > >= != ==)  \r\n\r\n\t>>> a = Num('0.0'); b = Num('0.1'); c = Num('-0.2')  \r\n\t>>> a <  b; a <  c; b <  c #True  False False  \r\n\t>>> a <= a; a <= c; b <= c #True  False False  \r\n\t>>> a >  b; a >  c; b >  c #False True  True  \r\n\t>>> a >= a; a >= c; b >= c #True  True  True  \r\n\t>>> c == -2*b; a == c + 2*b ; a != a+b+c #True  True  True  \r\n\t>>> a and b; a or b; not a #Num('0.0') Num('0.1') True  \r\n\t>>> True if a and b else False #False  \r\n\t>>> True if a or  b else False #True  \r\n\r\n(+ - unary operators)\r\n  \r\n\t>>> Num('+2.5521') # Num('2.5521')  \r\n\t>>> Num('-3.3321') # Num('-3.3321')  \r\n\t>>> Num('+2.5521') + Num('-3.3321') #Num('-0.78')  \r\n\r\nbitwise operators code:\r\n\r\n    from num7 import Num  \r\n    print('--- (&) AND ---')  \r\n    op1 = Num('3.0')  \r\n    op2 = 5  \r\n    print(f'{int(op1):08b}', op1) #00000011 3.0  \r\n    op1 &= op2                    #AND  \r\n    print(f'{op2:08b}', op2)      #00000101 5  \r\n    print(f'{int(op1):08b}', op1) #00000001 1  \r\n\r\n    print('--- (|) OR  ---')  \r\n    op1 = Num('3.0')  \r\n    op2 = 5  \r\n    print(f'{int(op1):08b}', op1) #00000011 3.0  \r\n    op1 |= op2                    #OR  \r\n    print(f'{op2:08b}', op2)      #00000101 5  \r\n    print(f'{int(op1):08b}', op1) #00000111 7  \r\n\r\n    print('--- (^) XOR ---')  \r\n    op1 = Num('3.0')  \r\n    op2 = 5  \r\n    print(f'{int(op1):08b}', op1) #00000011 3.0  \r\n    op1 ^= op2                    #XOR  \r\n    print(f'{op2:08b}', op2)      #00000101 5  \r\n    print(f'{int(op1):08b}', op1) #00000110 6  \r\n\r\n    print('--- (<<) LEFT SHIFT -X10 MULTIPLIER ---')  \r\n    op1 = Num('1.0')  \r\n    op2 = 2  \r\n    print(f'{int(op1):08b}', op1) #00000001 1.0  \r\n    op1 <<= op2                   #LEFT SHIFT -X10 MULTIPLIER  \r\n    print(f'{op2:08b}', op2)      #00000010 2  \r\n    print(f'{int(op1):08b}', op1) #01100100 100.0  \r\n\r\n    print('--- (>>) RIGHT SHIFT -X10 DIVIDER ---')  \r\n    op1 = Num('250.0')  \r\n    op2 = 1  \r\n    print(f'{int(op1):08b}', op1) #11111010 250.0  \r\n    op1 >>= op2                   #RIGHT SHIFT -X10 DIVIDER  \r\n    print(f'{op2:08b}', op2)      #00000001 1  \r\n    print(f'{int(op1):08b}', op1) #00011001 25.0  \r\n\r\n    print('--- (~) NOT ---')  \r\n    op1 = Num('10.0')  \r\n    print(f'{int(op1):08b}', op1) #00001010 10.0  \r\n    op2 = ~op1                    #(~) NOT  \r\n    print(f'{int(op2):08b}', op2) #00000101 5.0  \r\n\r\nOn a given variable the following arithmetic methods are available:\r\n\r\n    #variable arithmetics  \r\n    from num7 import Num  \r\n    a = Num('10.25')  \r\n    print(a)       #10.25  \r\n    a.inc()        #increment (default) by one  \r\n    print(a)       #11.25   \r\n    a.dec(2)       #decrement (optional) 2 units  \r\n    print(a)       #9.25  \r\n    a.incmul()     #multiply (default) 10 times  \r\n    print(a)       #92.5  \r\n    a.decdiv(100)  #x100 (optional) division  \r\n    print(a)       #0.925  \r\n    a.clear()      #a variable set to zero   \r\n    print(a)       #0.0    \r\n\r\nEVEN ODD numbering methods:\r\n\r\n    from num7 import Num  \r\n    a = Num(6); b = Num(3); c = Num('3.14')  \r\n    print(a, 'INTEGER =>', a.is_numint(), 'EVEN =>', a.is_numeven()) #6.0 INTEGER => True EVEN => True  \r\n    print(b, 'INTEGER =>', b.is_numint(), 'ODD  =>', b.is_numodd())  #3.0 INTEGER => True ODD  => True \r\n    print(c, 'FLOAT  =>', c.is_numfloat())                           #3.14 FLOAT  => True  \r\n\r\n# Advanced logic programming snippet\r\n\r\nLOOP EXAMPLE >>>  \r\n\r\n\tfrom num7 import Num  \r\n\ti = Num(0)  \r\n\twhile i < Num('1.0'):  \r\n\t\ti.inc('0.1') #i += Num('0.1')  \r\n\t\tif i <= Num('0.5'):  \r\n\t\t\tcontinue  \r\n\t\tprint(i) #0.6, 0.7, 0.8, 0.9, 1.0  \r\n\twhile i:  \r\n\t\ti.dec('0.1') #i -= Num('0.1')  \r\n\t\tif i >= Num('0.5'):  \r\n\t\t\tcontinue  \r\n\t\tprint(i) #0.4 0.3 0.2 0.1 0.0  \r\n\r\nROUNDING AND ACCOUNTING >>>  \r\n\r\n\tfrom num7 import Num   \r\n\tp = Num('11.19')                       #PRICE -Toslink cable for soundbar  \r\n\tpd = round(p.f_price_over(-7))         #PRICE DISCOUNTED 7%  \r\n\td = round(p - pd)                      #DISCOUNT  \r\n\tp_noTAX = round(p.f_price_spinoff(22)) #ITEM COST WITHOUT TAX 22%  \r\n\tTAX = round(p - p_noTAX)               #TAX 22%  \r\n\tprint(F'price={p} PAYED={pd} discount={d} COST={p_noTAX} TAX={TAX}') #price=11.19 PAYED=10.41 discount=0.78 COST=9.17 TAX=2.02  \r\n\r\nOUTPUT FORMATTING AND LOCALIZATION >>>\r\n\r\n    import locale  \r\n    from num7 import Num  \r\n    s = locale.setlocale(locale.LC_ALL, \"\")  \r\n    print('settings:', s) #settings: Italian_Italy.1252  \r\n    #calculating banking loan  \r\n    asset = Num('100_000.0'); rate = Num('6.5'); years = Num('20.0')  \r\n    monthly_payment = Num.f_fund_fr(asset, rate, years)  \r\n    print(locale.format_string(\"%.2f\", float(monthly_payment)))   #756,30  \r\n    print(locale.currency(float(monthly_payment), grouping=True)) #756,30 (currency symbol)  \r\n\r\nROUNDING TYPES >>>  \r\n\r\n    from num7 import Num  \r\n    ''' Num floor rounding '''  \r\n    print('--' * 10 + ' Num floor rounding')  \r\n    n = Num(Num.pi)            # 3.141592654  \r\n    print(n, n.round_floor(2)) # 3.14  \r\n    n = -Num(Num.pi)           #-3.141592654  \r\n    print(n, n.round_floor(2)) #-3.15  \r\n    n = Num(Num.pi) - 3        # 0.141592654  \r\n    print(n, n.round_floor(2)) # 0.14  \r\n    n = -Num(Num.pi) + 3       #-0.141592654  \r\n    print(n, n.round_floor(2)) #-0.15  \r\n\r\n    print('--' * 10 + ' Num ceil rounding')  \r\n    ''' Num ceil rounding '''  \r\n    n = Num(Num.pi)           # 3.141592654  \r\n    print(n, n.round_ceil(2)) # 3.15  \r\n    n = -Num(Num.pi)          #-3.141592654  \r\n    print(n, n.round_ceil(2)) #-3.14  \r\n    n = Num(Num.pi) - 3       # 0.141592654  \r\n    print(n, n.round_ceil(2)) # 0.15  \r\n    n = -Num(Num.pi) + 3      #-0.141592654  \r\n    print(n, n.round_ceil(2)) #-0.14  \r\n\r\n    print('--' * 10 + ' Num standard rounding')  \r\n    ''' Num standard rounding '''  \r\n    n = Num(Num.pi)      # 3.141592654  \r\n    print(n, n.round())  # 3.14  \r\n    n = -Num(Num.pi)     #-3.141592654  \r\n    print(n, n.round())  #-3.14  \r\n    n = Num(Num.pi) - 3  # 0.141592654  \r\n    print(n, n.round(4)) # 0.1416  \r\n    n = -Num(Num.pi) + 3 #-0.141592654  \r\n    print(n, n.round(4)) #-0.1416  \r\n\r\n    print('--' * 10 + ' Num half to even rounding (statistic, zero symmetric)')  \r\n    ''' Num half even rounding '''  \r\n    n = Num(Num.pi).round_floor(4)      # 3.1415  \r\n    print(n, n.round_bank(3))           # 3.142  \r\n    n = -Num(Num.pi).round_floor(4)     #-3.1415  \r\n    print(n, n.round_bank(3))           #-3.142  \r\n    n = Num(Num.pi).round_floor(8) - 3  # 0.14159265  \r\n    print(n, n.round_bank(7))           # 0.1415926  \r\n    n = -Num(Num.pi).round_floor(8) + 3 #-0.14159265  \r\n    print(n, n.round_bank(7))           #-0.1415926  \r\n\r\nPERFORMANCE EVALUATION AND SQUARENESS >>>  \r\n\t\r\n\tfrom num7 import Num  \r\n\tfrom time import perf_counter  \t\r\n\ttic = perf_counter() #Start Time  \r\n\ta = Num('-1.123456789'+'e-100')      #calculating division 10**100...  \r\n\ttoc = perf_counter() #End Time  \r\n\tT1 = toc - tic  \r\n\tprint(f\"a finished sec. {T1:1.6f}\")  \r\n\ttic = perf_counter() #Start Time  \r\n\tb = ('-1.123456789') >> Num('100.0') #calculating division 10**100...  \r\n\ttoc = perf_counter() #End Time  \r\n\tT2 = toc - tic  \r\n\tprint(f\"b finished sec. {T2:1.6f}\")  \r\n\tR = Num.f_perf_time(str(T1), str(T2))  \r\n\tprint('PCT=>', R[0].round(), 'SCALE=>', R[1].round(), 'SQUARENESS=>', a == b) #PCT= -98.6 SCALE= -70.47 SQUARENESS=> True  \r\n\t#stock exchange assets performance  \r\n \tprevious = Num('26.96'); now = Num('27.27')  \r\n\tvar_pct = Num.f_perf(previous, now).round()  \r\n   \tprint(f'{float(var_pct):+.2f}')  \r\n\r\nSCIENTIFIC NOTATION AND HIGH PRECISION RESULTS >>>\r\n\r\n\tfrom num7 import Num    \r\n\ta = Num('1_000_000_000_000_000_000_000.0') #standard notation  \r\n\tb = Num('1e21') #scientific notation  \r\n\tSUM = a + b     #SUM  \r\n\tieee754 = float(a)+float(b)  \r\n\tprint('SUM == ieee754', SUM == Num(str(ieee754)), ' SUM =>', SUM.num2exp()) #SUM == ieee754 True  SUM => 2e21  \r\n\t\r\n\ta = Num('1_000_000_000_000_000_000_000.0') #standard notation  \r\n\tb = Num('1e21') #scientific notation  \r\n\tMUL = a * b     #MUL  \r\n\tieee754 = float(a)*float(b)  \r\n\tprint('MUL == ieee754', MUL == Num(str(ieee754)), ' MUL =>', MUL.num2exp()) #MUL == ieee754 True  MUL => 1e42  \r\n\t\r\n\ta = '1.23456789'  \r\n\tb = '9.87654321'  \r\n\tMUL = Num(a) * Num(b) #MUL  \r\n\tieee754 = float(a)*float(b)  \r\n\tprint('MUL == ieee754', MUL == Num(str(ieee754)), 'MUL =>', MUL, float(a)*float(b), '=> IEEE754 PRECISION FAILURE!') #MUL == ieee754 False MUL => 12.1932631112635269 12.193263111263525 => IEEE754 PRECISION FAILURE!  \r\n\t\r\n\ta = '1.23456789e320'  #scientific notation  \r\n\tb = '9.87654321e320'  \r\n\tMUL = Num(a) * Num(b) #MUL  \r\n\tieee754 = float(a)*float(b)  \r\n\tprint('MUL == ieee754', MUL.str() == str(ieee754), 'MUL =>', MUL.num2exp(), float(a)*float(b), '=> IEEE754 inf FAILURE!') #MUL == ieee754 False MUL => 121932631112635269e624 inf => IEEE754 inf FAILURE!  \r\n\t\r\n\ta = '2e320' #scientific notation  \r\n\tb = '3e-320'  \r\n\tMUL = Num(a) * Num(b) #MUL  \r\n\tieee754 = float(a)*float(b)  \r\n\tprint('MUL == ieee754', MUL.str() == str(ieee754), 'MUL =>', MUL.num2exp(), ieee754, '=> IEEE754 inf FAILURE!') #MUL == ieee754 False MUL => 6.0 inf => IEEE754 inf FAILURE!  \r\n\t\r\n\ta = '1e200' #scientific notation  \r\n\tb = '5e1200'  \r\n\tT1 = Num(a, 1200) #ultra precision (over 80 digits default) floating point division must be specified!  \r\n\tT2 = Num(b)  \r\n\tDIV = T1 / T2 #DIV  \r\n\tieee754 = float(a)/float(b)  \r\n\tprint('DIV == ieee754', DIV.str() == str(ieee754), 'DIV =>', DIV.num2exp(), ieee754, '=> IEEE754 precision FAILURE!') #DIV == ieee754 False DIV => 2e-1001 0.0 => IEEE754 precision FAILURE!  \r\n\r\nFLOAT TO NUM CONVERSION LIST >>>\r\n\r\n\tfrom num7 import Num  \r\n\tL = [1011, 0.0, 9.998412, 7.0, 0.123, -2.0123, 10, 6]\r\n\tLN= Num.float2num_list(L)\r\n\tprint(list(i.n for i in LN)) #['1011.0', '0.0', '9.998412', '7.0', '0.123', '-2.0123', '10.0', '6.0']\r\n\tprint(list(i for i in LN))   #[Num('1011.0'), Num('0.0'), Num('9.998412'), Num('7.0'), Num('0.123'), Num('-2.0123'), Num('10.0'), Num('6.0')]\r\n\r\nSAVE NUMERIC LIST TO DISK FILE >>>\r\n\r\n\tNum.f_filewrite(L) #\r\n\r\nREAD NUMERIC LIST FROM DISK FILE (nums.txt default filename) >>>\r\n\r\n\tL = Num.f_fileread(); print(L) #[Num('1011.0'), Num('0.0'), Num('9.998412'), Num('7.0'), Num('0.123'), Num('-2.0123'), Num('10.0'), Num('6.0')]\r\n\r\n### FAQ \r\n\r\nQ. I usually try to add 0.1 to 0.2 in python3 with this code:  \r\n\r\n\t>>> print(0.1 + 0.2)  \r\nand the result is:  \r\n\r\n\t>>> 0.30000000000000004  \r\n\t\r\nHow instead can it gets exactly 0.3?  \r\nA. Using Num class >>>  \r\n\r\n\tfrom num7 import Num, Num as calc  \r\n\tprint(Num('0.1') + Num('0.2'))  #calc.add('0.1', '0.2') #0.3  \r\n\r\nQ. I'll get an error when i usually type:  \r\n\t\r\n\t>>> Num(0.1)    \r\n \r\n\tTraceback (most recent call last):  \r\n\tFile \"<pyshell>\", line 1, in <module>  \r\n\tFile \"C:\\Users\\pincopallino\\mydata\\Python\\Python310\\lib\\site-packages\\num7.py\", line 470, in __init__  \r\n\t\traise ValueError(F\"Num.__init__ => float, type not valid: {n}\")  \r\n\tValueError: Num.__init__ => float, type not valid: 1.0\t\r\n\t\r\nWhat is wrong?  \r\nA. You must use quotes or string conversion with built-in str function:\r\n\r\n\t>>> from num7 import Num   \r\n\t>>> Num('0.1')    #Num('0.1')  \r\n\t>>> Num(str(0.1)) #Num('0.1')  \r\n\r\nQ. How can i convert a regular float to a Decimal?  \r\nA. With Num.ieee754() method >>>  \r\n\r\n\tfrom num7 import Num, Num as calc  \r\n\ta=0.1; b=0.2;  \r\n\tc=a+b                              #0.30000000000000004 => PRECISION FAILURE!  \r\n\tan = Num.ieee754(a); print(an)     #0.1000000000000000055511151231257827021181583404541015625  \r\n\tbn = Num.ieee754(b); print(bn)     #0.200000000000000011102230246251565404236316680908203125  \r\n\tcn = Num.ieee754(a+b);  \r\n\tprint(cn, '=> PRECISION FAILURE!') #0.3000000000000000444089209850062616169452667236328125 => PRECISION FAILURE!  \r\n\tT = calc.add(an, bn)  \r\n\tprint(T, '=> OK.')                 #0.3000000000000000166533453693773481063544750213623046875 => OK.  \r\n\r\nQ. I have two float variables in my code:  \r\n\r\n\t>>> a = 0.1; b = 0.2  \r\n\t\r\nHow can i convert them in Num type?  \r\nA. With Num.float2num method (or directly with str() built-in function) >>>  \r\n\r\n\tfrom num7 import Num  \r\n\ta = 0.1; b = 0.2 #  \r\n\tan= Num.float2num(a); bn= Num.float2num(b)        #an= Num(str(a)); bn= Num(str(b))  \r\n\tprint(an+bn, 'OK. VS', a+b, 'PRECISION FAILURE!') #0.3 OK. VS 0.30000000000000004 PRECISION FAILURE!  \r\n\r\nQ. Can i do add or other math operations also with 10,000 digits after floating point?  \r\nA. Yes, you can. >>>\r\n\r\n\tfrom num7 import Num  \r\n\tprint((Num('1.123456789e-10_000') + Num('3.987654321e-10_000')).num2exp()) #511111111e-10008  \r\n\tprint((Num('1.123456789e-10_000') - Num('3.987654321e-10_000')).num2exp()) #-2864197532e-10009  \r\n\tprint((Num('1.123456789e-10_000') * Num('3.987654321e-10_000')).num2exp()) #4479957319112635269e-20018  \r\n\tprint((Num('1.123456789e-10_000') / Num('3.987654321e-10_000'))) #0.28173374584742497292307298769992856660154820877213142969420392746224704666420356 \r\n\t\r\nQ. With Python 3.11 it gets an error when running code with digits thousands >>>  \r\n\r\n\tfrom num7 import Num  \r\n\tprint((Num('1.123456789e-10_000') + Num('3.987654321e-10_000')).num2exp()) #511111111e-10008  \r\n\t\r\n\tValueError: Exceeds the limit (4300) for integer string conversion: value has 10010 digits; use sys.set_int_max_str_digits() to increase the limit  \r\n\t\r\nHow can i fix it?  \r\nA. Set the max string digits allowed in this way >>>  \r\n\r\n\tfrom num7 import Num  \r\n\timport sys  \r\n\tsys.set_int_max_str_digits(1_000_000) #1_000_000 str digits set \r\n\tprint((Num('1.123456789e-10_000') + Num('3.987654321e-10_000')).num2exp()) #511111111e-10008  \r\n\r\nQ. I must enter many integer variables in my code:  \r\n\r\n\t>>> a = Num('123.0'); b = Num('456.0'); c = Num('789.0')\r\n\t\r\nCan i input them without quotes and suffix .0?  \r\nA. Yes, this way:\r\n\r\n\t>>> a = Num(123); b = Num(456); c = Num(789)  \r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/giocip/num7",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "num7",
    "package_url": "https://pypi.org/project/num7/",
    "platform": null,
    "project_url": "https://pypi.org/project/num7/",
    "project_urls": {
      "Homepage": "https://github.com/giocip/num7"
    },
    "release_url": "https://pypi.org/project/num7/1.0.27/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Num - SUPREME PRECISION GENERAL PURPOSE ARITHMETIC-LOGIC DECIMAL CLASS",
    "version": "1.0.27",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17009707,
  "releases": {
    "1.0.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcc6ae9b08e98eb1212239a3c89e463d8aaa5f73ff264fdc30522e6a1c49cdf1",
          "md5": "8e0a9a80f7cb9f21cb267fcf0c66348f",
          "sha256": "40b0c0ac822a0ae4704addaea83d0c7b909be3cafde273252eba464df0a807ed"
        },
        "downloads": -1,
        "filename": "num7-1.0.20-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e0a9a80f7cb9f21cb267fcf0c66348f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20784,
        "upload_time": "2022-12-24T09:58:59",
        "upload_time_iso_8601": "2022-12-24T09:58:59.851641Z",
        "url": "https://files.pythonhosted.org/packages/fc/c6/ae9b08e98eb1212239a3c89e463d8aaa5f73ff264fdc30522e6a1c49cdf1/num7-1.0.20-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f5d10d38317731045572c88a2567f71073b63e4594ce397a7078fed438adc39",
          "md5": "78b903b80327844155f0b05edb0cc17d",
          "sha256": "4ac3b453617be76052da1eaa7bf85eb592478f98c4614d129b7b2d5659c18463"
        },
        "downloads": -1,
        "filename": "num7-1.0.20.tar.gz",
        "has_sig": false,
        "md5_digest": "78b903b80327844155f0b05edb0cc17d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20992,
        "upload_time": "2022-12-24T09:59:01",
        "upload_time_iso_8601": "2022-12-24T09:59:01.605389Z",
        "url": "https://files.pythonhosted.org/packages/6f/5d/10d38317731045572c88a2567f71073b63e4594ce397a7078fed438adc39/num7-1.0.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4c0b4408426a02d266a57fb36c9ac2099dfd1ca6740e140fd305403f4511de7",
          "md5": "5130df25fc0c292f4da94b77edbd7673",
          "sha256": "1f5aed4e4ef44c47e084b03b659632a67823f5afbaee3b82c421b6a97890b6e0"
        },
        "downloads": -1,
        "filename": "num7-1.0.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5130df25fc0c292f4da94b77edbd7673",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20855,
        "upload_time": "2022-12-28T18:45:43",
        "upload_time_iso_8601": "2022-12-28T18:45:43.672802Z",
        "url": "https://files.pythonhosted.org/packages/a4/c0/b4408426a02d266a57fb36c9ac2099dfd1ca6740e140fd305403f4511de7/num7-1.0.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55ea7fb75ca0a47564c6356b4adb2842f2338a51939fa725ec6cf238c169d07c",
          "md5": "8bd1840b20cb4207434f89e22a44180a",
          "sha256": "4e8cd1d19c4b5d9345bc23df22df725de059f32997a204486990495dc4684e03"
        },
        "downloads": -1,
        "filename": "num7-1.0.21.tar.gz",
        "has_sig": false,
        "md5_digest": "8bd1840b20cb4207434f89e22a44180a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21077,
        "upload_time": "2022-12-28T18:45:45",
        "upload_time_iso_8601": "2022-12-28T18:45:45.495268Z",
        "url": "https://files.pythonhosted.org/packages/55/ea/7fb75ca0a47564c6356b4adb2842f2338a51939fa725ec6cf238c169d07c/num7-1.0.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fd67e20b40f8f3e5e81d3ce54ad3d983688f8da28e9813e39ba1795616be1c2",
          "md5": "701d6a28615fcccdfa9e3a1dfbbcd589",
          "sha256": "19d9a9614b6f9c2090db30992d381f3e22ad7de38896ed13b4a5d44a6d689d86"
        },
        "downloads": -1,
        "filename": "num7-1.0.22-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "701d6a28615fcccdfa9e3a1dfbbcd589",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21263,
        "upload_time": "2022-12-31T08:36:50",
        "upload_time_iso_8601": "2022-12-31T08:36:50.186210Z",
        "url": "https://files.pythonhosted.org/packages/7f/d6/7e20b40f8f3e5e81d3ce54ad3d983688f8da28e9813e39ba1795616be1c2/num7-1.0.22-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af8941b20ba414c0dcbfb72dde76ccd7ba1636a14350a96aab11b0dddeaeaafd",
          "md5": "516291a10215a368bb39ee794b977c42",
          "sha256": "b1d1848a39f9afd30088ab9a8810f22e7304c68c14b4c3415b37ce2e6e05cff3"
        },
        "downloads": -1,
        "filename": "num7-1.0.22.tar.gz",
        "has_sig": false,
        "md5_digest": "516291a10215a368bb39ee794b977c42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21447,
        "upload_time": "2022-12-31T08:36:51",
        "upload_time_iso_8601": "2022-12-31T08:36:51.607877Z",
        "url": "https://files.pythonhosted.org/packages/af/89/41b20ba414c0dcbfb72dde76ccd7ba1636a14350a96aab11b0dddeaeaafd/num7-1.0.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffe20770fd9a8aa6f36d49bb093e09d025f9def6a7bbe14fff64859fe85b37b1",
          "md5": "6caa0286b165c49fb3c04fdc1b53da06",
          "sha256": "9be532217efaee9a987aea5fc59b12822ad2d173ed7689cad04f12e89618f6f5"
        },
        "downloads": -1,
        "filename": "num7-1.0.23-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6caa0286b165c49fb3c04fdc1b53da06",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21266,
        "upload_time": "2023-01-01T08:54:35",
        "upload_time_iso_8601": "2023-01-01T08:54:35.030576Z",
        "url": "https://files.pythonhosted.org/packages/ff/e2/0770fd9a8aa6f36d49bb093e09d025f9def6a7bbe14fff64859fe85b37b1/num7-1.0.23-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "944505fe9603eb8ee4ab3deddbee2f2ccf44b716aa4fff58694317bea21df199",
          "md5": "f8beb4cea5130443a82de9a92a2933e8",
          "sha256": "62c578dc24cdb43183173c654639c5b264c53da36e61eec771a47a5eb5652800"
        },
        "downloads": -1,
        "filename": "num7-1.0.23.tar.gz",
        "has_sig": false,
        "md5_digest": "f8beb4cea5130443a82de9a92a2933e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21467,
        "upload_time": "2023-01-01T08:54:36",
        "upload_time_iso_8601": "2023-01-01T08:54:36.596228Z",
        "url": "https://files.pythonhosted.org/packages/94/45/05fe9603eb8ee4ab3deddbee2f2ccf44b716aa4fff58694317bea21df199/num7-1.0.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "362c7484d3dabc086064b645c05efeae44f29a00c21969c94a0ea5b3524f75cc",
          "md5": "1c2ba803c8ddb490b82761230275b504",
          "sha256": "5ebb8f39ab969d62ca193edab233934116f632c5416daeed8789701a90502a54"
        },
        "downloads": -1,
        "filename": "num7-1.0.24-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c2ba803c8ddb490b82761230275b504",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22215,
        "upload_time": "2023-01-06T09:16:34",
        "upload_time_iso_8601": "2023-01-06T09:16:34.598671Z",
        "url": "https://files.pythonhosted.org/packages/36/2c/7484d3dabc086064b645c05efeae44f29a00c21969c94a0ea5b3524f75cc/num7-1.0.24-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7f3c81ffdfdc2f7b7d91504e1e7542c9867cfacfdda7fef672d8b3aea0d1438",
          "md5": "4387b30afa16463f018f618284288911",
          "sha256": "d709f6c70afb123435b9d8242208002b1843d5be45acf07c7acbe5a5f92baf11"
        },
        "downloads": -1,
        "filename": "num7-1.0.24.tar.gz",
        "has_sig": false,
        "md5_digest": "4387b30afa16463f018f618284288911",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22441,
        "upload_time": "2023-01-06T09:16:36",
        "upload_time_iso_8601": "2023-01-06T09:16:36.027015Z",
        "url": "https://files.pythonhosted.org/packages/e7/f3/c81ffdfdc2f7b7d91504e1e7542c9867cfacfdda7fef672d8b3aea0d1438/num7-1.0.24.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.25": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c45e74ce700643e03110af509c76f43880bc4669294635d3d986c9ddd7e6aea2",
          "md5": "b4ef3a244fa842abbb78ef890f924670",
          "sha256": "f2da51517d693a09f30565b3375152537ae453037ca45effffad3e01f119e9a7"
        },
        "downloads": -1,
        "filename": "num7-1.0.25-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4ef3a244fa842abbb78ef890f924670",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22342,
        "upload_time": "2023-01-17T11:07:00",
        "upload_time_iso_8601": "2023-01-17T11:07:00.640910Z",
        "url": "https://files.pythonhosted.org/packages/c4/5e/74ce700643e03110af509c76f43880bc4669294635d3d986c9ddd7e6aea2/num7-1.0.25-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a8833cdaabaab776fb444ef35bedecc308ee9964f59100086ce499844e49e13",
          "md5": "612846621515efed0661893b9907d077",
          "sha256": "e8912f1bfdddc1aec22dd23cfe41b7563ce8184cd80102fb90393d2588bc48ed"
        },
        "downloads": -1,
        "filename": "num7-1.0.25.tar.gz",
        "has_sig": false,
        "md5_digest": "612846621515efed0661893b9907d077",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22560,
        "upload_time": "2023-01-17T11:07:02",
        "upload_time_iso_8601": "2023-01-17T11:07:02.734457Z",
        "url": "https://files.pythonhosted.org/packages/1a/88/33cdaabaab776fb444ef35bedecc308ee9964f59100086ce499844e49e13/num7-1.0.25.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56c083fc6f5912d6d68bf86d2d0b260a17d942cc3d15fae22459e92d21648461",
          "md5": "469537b5f49173d4d155fbfc880a75c7",
          "sha256": "400b207a6c7e677364cdd7b7932199926e95640160eb0f859bdeed250212d79f"
        },
        "downloads": -1,
        "filename": "num7-1.0.26-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "469537b5f49173d4d155fbfc880a75c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22402,
        "upload_time": "2023-01-30T15:01:36",
        "upload_time_iso_8601": "2023-01-30T15:01:36.491628Z",
        "url": "https://files.pythonhosted.org/packages/56/c0/83fc6f5912d6d68bf86d2d0b260a17d942cc3d15fae22459e92d21648461/num7-1.0.26-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f982f6020a7d1deefa7548d9345b6b43534d888dffd99e5f9371327e0e62c14e",
          "md5": "b005de7e64eb6ad604e3d288f2bf50c7",
          "sha256": "657e77025519c6fd91279b98f2425c9385a1f1aa5df2e1da19f794bbe40f23f0"
        },
        "downloads": -1,
        "filename": "num7-1.0.26.tar.gz",
        "has_sig": false,
        "md5_digest": "b005de7e64eb6ad604e3d288f2bf50c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22610,
        "upload_time": "2023-01-30T15:01:38",
        "upload_time_iso_8601": "2023-01-30T15:01:38.466648Z",
        "url": "https://files.pythonhosted.org/packages/f9/82/f6020a7d1deefa7548d9345b6b43534d888dffd99e5f9371327e0e62c14e/num7-1.0.26.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e7061b960df827f09eae2050214c870eee105ab8c727a2cc8e216258545ff05",
          "md5": "d5ab96c3773c39be6eff7c2e1d06d3ee",
          "sha256": "6e471a5de7193ad94f0ba8f0c74ca395ea2a6505338d39d72500b66a9a388305"
        },
        "downloads": -1,
        "filename": "num7-1.0.27-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5ab96c3773c39be6eff7c2e1d06d3ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22765,
        "upload_time": "2023-02-24T11:03:53",
        "upload_time_iso_8601": "2023-02-24T11:03:53.515448Z",
        "url": "https://files.pythonhosted.org/packages/0e/70/61b960df827f09eae2050214c870eee105ab8c727a2cc8e216258545ff05/num7-1.0.27-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7cf5bdf43118280b2aa681f613376a2e1271587e34b6328050080f8cc9f0a4d",
          "md5": "ed650d922f613d8b863eb2ca177c0165",
          "sha256": "69d80e2998aa9b8451c3b7e4e18ad99e096bbe94d266f28eb77afe993a9e0a29"
        },
        "downloads": -1,
        "filename": "num7-1.0.27.tar.gz",
        "has_sig": false,
        "md5_digest": "ed650d922f613d8b863eb2ca177c0165",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22994,
        "upload_time": "2023-02-24T11:03:55",
        "upload_time_iso_8601": "2023-02-24T11:03:55.033771Z",
        "url": "https://files.pythonhosted.org/packages/b7/cf/5bdf43118280b2aa681f613376a2e1271587e34b6328050080f8cc9f0a4d/num7-1.0.27.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e7061b960df827f09eae2050214c870eee105ab8c727a2cc8e216258545ff05",
        "md5": "d5ab96c3773c39be6eff7c2e1d06d3ee",
        "sha256": "6e471a5de7193ad94f0ba8f0c74ca395ea2a6505338d39d72500b66a9a388305"
      },
      "downloads": -1,
      "filename": "num7-1.0.27-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d5ab96c3773c39be6eff7c2e1d06d3ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22765,
      "upload_time": "2023-02-24T11:03:53",
      "upload_time_iso_8601": "2023-02-24T11:03:53.515448Z",
      "url": "https://files.pythonhosted.org/packages/0e/70/61b960df827f09eae2050214c870eee105ab8c727a2cc8e216258545ff05/num7-1.0.27-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7cf5bdf43118280b2aa681f613376a2e1271587e34b6328050080f8cc9f0a4d",
        "md5": "ed650d922f613d8b863eb2ca177c0165",
        "sha256": "69d80e2998aa9b8451c3b7e4e18ad99e096bbe94d266f28eb77afe993a9e0a29"
      },
      "downloads": -1,
      "filename": "num7-1.0.27.tar.gz",
      "has_sig": false,
      "md5_digest": "ed650d922f613d8b863eb2ca177c0165",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22994,
      "upload_time": "2023-02-24T11:03:55",
      "upload_time_iso_8601": "2023-02-24T11:03:55.033771Z",
      "url": "https://files.pythonhosted.org/packages/b7/cf/5bdf43118280b2aa681f613376a2e1271587e34b6328050080f8cc9f0a4d/num7-1.0.27.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}