{
  "info": {
    "author": "Rishabh Jha",
    "author_email": "rishabhjha.code@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "## TF-OSQP\n\n[![TF](https://aleen42.github.io/badges/src/tensorflow.svg)](https://www.tensorflow.org/) [![PEP8](https://img.shields.io/badge/code%20style-pep8-orange.svg)](https://www.python.org/dev/peps/pep-0008/) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n\nTensorflow 2.x implementation of [OSQP](https://osqp.org/).  \n\n**This is not an official OSQP implementation.** You can find official versions [here](https://github.com/oxfordcontrol/osqp).\n\nFrom their page: \n\nThe OSQP (Operator Splitting Quadratic Program) solver is a numerical\noptimization package for solving problems in the form\n\n    minimize        0.5 x' P x + q' x\n\n    subject to      l <= A x <= u\n\nwhere ``x in R^n`` is the optimization variable. The objective function\nis defined by a positive semidefinite matrix ``P in S^n_+`` and vector\n``q in R^n``. The linear constraints are defined by matrix\n``A in R^{m x n}`` and vectors ``l in R^m U {-inf}^m``,\n``u in R^m U {+inf}^m``.\n\n\n\n## Motivation\nThis project was created as a complement to a new TF2 implementation for the Revised Greedy Expansion algorithm used to find the convex hull of high dimensional vectors. Locating the distance of a point from a convex hull requires the solution of linearly constrained quadratic equations.\n\nCode for that project will be made available soon.\n\n\n## Features\n\n### Live in latest release\n**Full TF 2.x compatibility:** All computations use native TF ops\n\n**Python side effects absent:** Every constant and variable coded as named instances of ```tf.constant``` and ```tf.Variable```\n\n**Well documented:** Docstrings available for all function with constraints and meanings explained for parameters\n\n### Future releases\n**Graph mode execution:** Leverage tf.function() to execute code in Graph mode on TF2\n\n**Training parameter assignment:** Ability to modify training parameters extended to every single parameter\n\n**Full OSQP feature set:** Remaining features like solution polishing added\n\n\n## Dependencies\n\n| Dependency   | Description | Version   | License\n| ------------- |:-------------:| :----:|:---:|\n| TensorFlow  | Open source symbolic math library for ML    | >= 2.4rc3 | Apache 2.0 \n| python      | Base python software | >= 3.6      | PSF\n| numpy | Used to define nan and inf constants | >= 1.18      | NumPy License\n\n\n## Installation\n\n#### Latest PyPI release\n\n\tpip install tf_osqp\n\n\n## Usage\n\nHaving defined ```tf.float32``` matrices P, q, A, l, u, use the code as follows:\n\n\tfrom tf_osqp.tf_osqp import solver\n\n    quad_solver = solver()\n    quad_solver.set_problem(P, q, A, l, u)\n\n    x, y = quad_solver.solve()\n\nHere, x will be the solution at optima, y will be the corresponding Lagrangian\n\n\n## Contribute\n\n### Product backlog\nCurrent implementation is the skeletal engine written to get the work done. It is some way away from full potential.  \n- Refactor code to tf.function() to capitalize on speedups from Graph execution\n\t- Current version uses Eager execution. This constrains performance and speeds are similar to numpy implementation   \n- Add remaining OSQP functionality, e.g., solution polishing\n- Make API freer to use, including option for warm starts and changing training parameters between iterations\n\n### Code style\n\nCode is written with PEP-8 guidelines - recommended for PRs.\n\n## Citations\n\n1. G. Banjac, P. Goulart, B. Stellato, and S. Boyd, Infeasibility detection in the alternating direction method of multipliers for convex optimization, Journal of Optimization Theory and Applications 183(2019), no. 2, 490–519. \n2. G. Banjac, B. Stellato, N. Moehle, P. Goulart, A. Bemporad, and S. Boyd, Embedded codegeneration using the OSQP solver, IEEE Conference on Decision and Control (CDC), 2017. \n3. M. Schubiger, G. Banjac, and J. Lygeros, GPU acceleration of ADMM for large-scale quadratic programming, Journal of Parallel and Distributed Computing 144(2020), 55–67.\n4. B. Stellato, G. Banjac, P. Goulart, A. Bemporad, and S. Boyd, OSQP: an operator splitting solver for quadratic programs, Mathematical Programming Computation 12(2020), no. 4,637–672.\n5. B. Stellato, V. V. Naik, A. Bemporad, P. Goulart, and S. Boyd, Embedded mixed-integer quadratic optimization using the OSQP solver, European Control Conference (ECC), 2018\n\nThe original pure python source code for OSQP can be found on their repo [here](https://github.com/oxfordcontrol/osqp-python/tree/master/modulepurepy).\n\nCurrent implementation in this repo can execute on GPUs but the code hasn't been optimized to offer large speed ups yet. To see better performance on GPUs, the recommendation is to OSQP's recommended CUDA implementation: [cuosqp](https://github.com/oxfordcontrol/cuosqp) \n\n## License\nApache 2.0 \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rishabhjha33/tf-osqp",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "Rishabh Jha",
    "maintainer_email": "rishabhjha.code@gmail.com",
    "name": "tf-osqp",
    "package_url": "https://pypi.org/project/tf-osqp/",
    "platform": "",
    "project_url": "https://pypi.org/project/tf-osqp/",
    "project_urls": {
      "Homepage": "https://github.com/rishabhjha33/tf-osqp"
    },
    "release_url": "https://pypi.org/project/tf-osqp/0.1.0/",
    "requires_dist": [
      "numpy (>=1.18)",
      "tensorflow (>=2.4rc3)"
    ],
    "requires_python": ">=3.5",
    "summary": "Tensorflow implementation of OSQP solver (unofficial)",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9130703,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "faa64d1d046a24416533115fb0212b66d3fe87dbd6159e8ca4ce8347a493cb31",
          "md5": "5ac02148352f0c51a538c2109a2ac895",
          "sha256": "8f8380aed11b7a6f7723d2ddb9935a17b29eb03d7f366fd6e1c848bb18fd363c"
        },
        "downloads": -1,
        "filename": "tf_osqp-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ac02148352f0c51a538c2109a2ac895",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 8378,
        "upload_time": "2021-01-14T07:23:38",
        "upload_time_iso_8601": "2021-01-14T07:23:38.058895Z",
        "url": "https://files.pythonhosted.org/packages/fa/a6/4d1d046a24416533115fb0212b66d3fe87dbd6159e8ca4ce8347a493cb31/tf_osqp-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1db4279d6eb99d511e2177d603ae555cd5478ab54e5237fc7d64df2a032b9f85",
          "md5": "9da625db5581cd7a5235963f879ce4d2",
          "sha256": "c3c77ab33a2f6bf6590f1f2b846da819fb261c5c4acaadb02224f928f7261919"
        },
        "downloads": -1,
        "filename": "tf_osqp-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9da625db5581cd7a5235963f879ce4d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10386,
        "upload_time": "2021-01-14T07:23:39",
        "upload_time_iso_8601": "2021-01-14T07:23:39.426400Z",
        "url": "https://files.pythonhosted.org/packages/1d/b4/279d6eb99d511e2177d603ae555cd5478ab54e5237fc7d64df2a032b9f85/tf_osqp-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "faa64d1d046a24416533115fb0212b66d3fe87dbd6159e8ca4ce8347a493cb31",
        "md5": "5ac02148352f0c51a538c2109a2ac895",
        "sha256": "8f8380aed11b7a6f7723d2ddb9935a17b29eb03d7f366fd6e1c848bb18fd363c"
      },
      "downloads": -1,
      "filename": "tf_osqp-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ac02148352f0c51a538c2109a2ac895",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 8378,
      "upload_time": "2021-01-14T07:23:38",
      "upload_time_iso_8601": "2021-01-14T07:23:38.058895Z",
      "url": "https://files.pythonhosted.org/packages/fa/a6/4d1d046a24416533115fb0212b66d3fe87dbd6159e8ca4ce8347a493cb31/tf_osqp-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1db4279d6eb99d511e2177d603ae555cd5478ab54e5237fc7d64df2a032b9f85",
        "md5": "9da625db5581cd7a5235963f879ce4d2",
        "sha256": "c3c77ab33a2f6bf6590f1f2b846da819fb261c5c4acaadb02224f928f7261919"
      },
      "downloads": -1,
      "filename": "tf_osqp-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9da625db5581cd7a5235963f879ce4d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 10386,
      "upload_time": "2021-01-14T07:23:39",
      "upload_time_iso_8601": "2021-01-14T07:23:39.426400Z",
      "url": "https://files.pythonhosted.org/packages/1d/b4/279d6eb99d511e2177d603ae555cd5478ab54e5237fc7d64df2a032b9f85/tf_osqp-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}