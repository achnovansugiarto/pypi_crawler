{
  "info": {
    "author": "General Index",
    "author_email": "info@general-index.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# GENERAL INDEX PYTHON SDK #\n\nThis document describes the General Index Python SDK which enables external users to use the GX platform tools within their python scripts. \n\nThe Python SDK can be used within:\n\n- a single python script that is ran thanks to the Python Runner task within a pipeline in the GX application\n\n- a single Jupyter Notebook that is ran thanks to the Jupyter Runner task within a pipeline in the GX application\n\n- an ensemble of python scripts that are part of a container, for a Task created by the user, used in a pipeline in the GX application\n\n \n\nNote that the SDK does not cover everything from API documentation but rather commonly used features.\n\nThe scope of the SDK:\n\n- **Datalake Handler** - downloading / uploading / reading files from the data lake  \n\n- **Status Handler** - sending statuses about the task run  \n\n- **Task Handler** - enables communication between tasks within a pipeline and reading/writing parameters \n\n- **Time Series Handler** - retrieves data directly from the time series database\n\n\n\n## How to install and set the package: \n### Install\n```text\npip3 install generalindex==0.1.3\n```\nAs the library is available from pip, it can be installed as a specific version within a Python Task from within requirements.txt just by adding:\n```text\ngeneralindex==0.1.3\n```\nThe package relies on the requests library so, in the project, the user must install this library in the requirements.txt file.\n```text\npip3 install requests==2.25.1\n```\n\n\n### Environment Variables\nThe package uses information from the environment variables. They are automatically provided when running a script within a pipeline (as a Task or within the Python/Jupyter Runners).\nIf running locally the script, users must set them in the project to be able to run the project locally.\n\n \n\nMandatory environment variables to set:\n\n- LOGIN → login received from GX\n\n- PASSWORD → password to log in. Credentials are used to generate the token so that each request is authenticated.\n\n- NG_API_ENDPOINT → the URL to the GX platform API (by default, the url is set to https://api.g-x.co)\n \n\nThis allows to pass the authentication process and directs users' requests to the GX environment API.\n\nOther variables may be useful when creating the tasks within the platform:\n\n- NG_STATUS_GROUP_NAME → the group on the data lake where the pipeline is located, and is used to display the statuses\n\n- JOBID → any value; when the pipeline is executed, this value is set by the GX platform\n\n- PIPELINE_ID → any value; when the pipeline is created, this value is set by the GX platform\n\n\n\n --- - \n## Datalake Handler\n### How to download or read a file from data lake by its name ?\nThe DatalakeHandler class can be used as follow within a script to download or upload a file:\n\n```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate the Datalake Handler\ndh = gx.DatalakeHandler()\n\n# download file from data lake with name and group name\n# it will be saved locally with name local_name.csv\ndh.download_by_name(file_name='my_file.csv', \n                    group_name='My Group', \n                    file_type='SOURCE',\n                    dest_file_name='folder/local_name.csv',\n                    save=True,\n                    unzip=False)\n\n# OR read file from data lake with name and group name\n# it returns a BytesIO object (kept in the RAM, not saved in the disk)\nfileIO = dh.download_by_name(file_name='my_file.csv', \n                            group_name='My Group',\n                            file_type='SOURCE',\n                            dest_file_name=None,\n                            save=False,\n                            unzip=False)\n\n# read the object as pandas DataFrame\ndf = pd.read_csv(fileIO)\n\n```\nThe download methods allows to either:\n- download and save locally the wanted file, if *save=True*\n- read the file directly from the datalake and get a BytesIO object (kept in memory only, that can for example be read by pandas as a dataframe directly)\n\nNote that by default:\n- the file is NOT saved locally, but returned as a BytesIO object (streamed from the datalake).\n- the argument *dest_file_name=None*, which will save the downloaded file to the root folder with its original name.\n\n\n\n### How to download or read a file from data lake by its ID ?\nIn the case that the file ID is known, it can be directly downloaded/read as follow:\n\n```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate the Datalake Handler\ndh = gx.DatalakeHandler()\n\n# download file from data lake by its ID\n# it will be saved locally with name local_name.csv\ndh.download_by_id(file_id='XXXX-XXXX', \n                  dest_file_name='folder/local_name.csv',\n                  save=True,\n                  unzip=False)\n\n# read file from data lake by its ID\n# it returns a BytesIO object\nfileIO = dh.download_by_id(file_id='XXXX-XXXX', \n                            dest_file_name=None,\n                            save=False,\n                            unzip=False)\n\n# read the object as pandas DataFrame\ndf = pd.read_csv(fileIO)\n\n```\nThe download methods allows to either:\n- download and save locally the wanted file, if *save=True*\n- read the file directly from the datalake and get a BytesIO object (kept in memory only, that can for example be read by pandas as a dataframe directly)\n\nNote that by default:\n- the file is NOT saved locally, but returned as a BytesIO object (streamed from the datalake).\n- the argument *dest_file_name=None*, which will save the downloaded file to the root folder with its original name.\n\n\n\n\n\n### How to upload a file to the data lake?\nThe uploading method will upload to the given group the file at the specified path, and returns its ID on the lake:\n```python\nimport generalindex as gx\n\n# Instantiate the Datalake Handler\ndh = gx.DatalakeHandler()\n\n# upload file to data lake\nfile_id = dh.upload_file(file='path/local_name.csv', \n                        group_name='My Group', \n                        file_upload_name='name_in_the_datalake.csv')\n```\nIt is possible as well to stream a python object's content directly to the datalake from memory, without having to save the file on the disk.\n\nThe prerequisite is to pass to the uploading method a BytesIO object (not other objects such as pandas Dataframe).\n\n```python\nimport generalindex as gx\nimport io\n\n# Instantiate the Datalake Handler\ndh = gx.DatalakeHandler()\n\n# Turn the pandas DataFrame (df) to BytesIO for streaming\nfileIO = io.BytesIO(df.to_csv().encode()) \n\n# upload file to data lake\nfile_id = dh.upload_file(file=fileIO, \n                        group_name='My Group', \n                        file_upload_name='name_in_the_datalake.csv')\n```\n--- -\n## Timeseries Queries\n### How to get the list of existing symbols for a given group ?\nData saved in the time series database is structured by group, keys and timestamp.\nEach set of keys has unique dates entries in the database, with corresponding columns values.\n\nTo explore what are the available symbols for a given group, the following method can be used:\n```python\nimport generalindex as gx\n\n# Instantiate Timeseries class\nts = gx.Timeseries()\n\n# Get the list of symbols for given group\ngroup = 'My Group'\ngroup_symbols = ts.get_symbols(group_name=group)\n```\nThe default size of the returned list is 1 000 items.\n\nNote that the return object from the get_symbols() method is a JSON (python dict) where the keys and columns are accessible in the *items* key of the JSON.\n\n### How to query by metadata or descriptions?\n\nIn order to find the symbols querying by the metadata, column or symbol names, search_for parameter may be used.\nIt will look for passed string in the whole time series database and return the JSON with keys and columns where searched string appears.\n\n```python\nimport generalindex as gx\n\n# Instantiate Timeseries class\nts = gx.Timeseries()\n\n# Get the list of symbols for given group\nsearch = 'Data description'\nsearched_symbols = ts.get_symbols(search_for=search)\n```\n\nPassing both group_name and search_for parameters of the get_symbols() method allows to narrow down the results from selected group.\nThe user must provide either group_name or search_for to the method in order to obtain the symbols.\n\n\nIf trying to get the list of symbols from a group that contains more than 1 000 items, the results will be paginated (by default into chunks of 1 000 items).\nTo navigate in the large results the *get_symbols()* method takes as extra arguments the size of the returned list and the from page:\n```python\nimport generalindex as gx\n\n# Instantiate Timeseries class\nts = gx.Timeseries()\n\n# Get the list of symbols for given group\ngroup = 'My Group'\n\n# Get the results into chunks of 200 items for page 5\n# meaning the results from the 1000th till the 1200th \ngroup_symbols = ts.get_symbols(group_name=group, _size=200, _from=5)\n```\nBy default, these parameters are _size=2000 (the maximum limit for the items lengths) and _from=0.\n\n\n### How to read data from Timeseries database?\nIt is possible to use the SDK to directly query the TimeSeries database for data, given the symbol's keys, columns and the datalake group it is stored on.\n\nOn the application, it is similar of creating a Dataprep instance, that selects a set of symbols from groups into a basket. \n\nThe retrieved data can be:\n- streamed directly to memory, retrieved as a BytesIO object, by setting *file_name* as None (default value), \n- saved as a csv file locally with the provided path and name as *file_name*.\n\nThe symbols are the keys the data was saved with in the database. For a given symbol, all the keys must be passed, as a dictionary object with the key name and value.\nIt is possible to use a wildcard for the symbols values, to have all the values for that key, using *.\n\nThe wanted columns are then passed as a list that can contain one or more items.\nIf an empty list [ ] is passed to the function, it returns all the available columns.\n\nTo read all available data for specific symbols and columns with no time frame, no start or end date are passed to the method.\n\nExtra settings are as well available to query data:\n- Metadata: to either return it in the query of not\n- Format: either get a Normalized CSV (NCSV) or a dataframe format\n- Timezone: get the timestamps in the timezone of the user's account or get the data in a specific timezone\n- Corrections: how to handle corrections to the TimeSeries database (corrections set to 'yes', 'no', 'history' or 'only')\n- Delta: whether to show by datatimestamp file (delta=False) or insert time (delta=True)\n\n\nThe following code shows an example of how to query the TimseSeries database: :\n\n ```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate Timeseries class\nts = gx.Timeseries()\n\n# Symbols to query from database\nsymbols = {'Key1': \"Val1\", \"Key2\": \"Val2\"}\ncolumns = ['Open', 'Close']\n\n# retrieve all available data from group acccording to keys & columns \n# and save as query.csv in test/\nts.retrieve_data_as_csv(file_name='test/query.csv',\n                        symbols=symbols,\n                        columns=columns,\n                        group_name='My Group'\n                        )\n\n# The retrieved data can be read as a pandas dataframe\ndf = pd.read_csv(\"test/query.csv\")\n\n\n# retrieve all available data from group acccording to keys & columns \n# and stream to memory as BytesIO object\nfileIO = ts.retrieve_data_as_csv(file_name=None,\n                                 symbols=symbols,\n                                 columns=columns,\n                                 group_name='My Group'\n                                 )\n\n# read as pandas dataframe\ndf = pd.read_csv(fileIO)\n```\n\n### How to read data from Timeseries for specific dates?\nTo retrieve data the data within specific time frame, user can specify the start and end date.\n\nThere are two options how the start and end date may look like:\n\n- only date (e.g., 2021-01-04)\n\n- date and time (e.g., 2021-02-01T12:00:00; ISO format must be followed)\n\nFor example, if user specified start_date=2021-02-01 and end_date=2021-02-06, then data will be retrieved like this: from 2021-02-01 00:00:00 till 2021-02-06 23:59:59.\n\nIf date and time is specified then data will be retrieved exactly for the specified time frame.\n\nNote that ISO format must be followed: YYYY-MM-DD**T**HH:mm:ss. Pay attention to the \"T\" letter between date and time.\n\n ```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate Timeseries class\nts = gx.Timeseries()\n\n# Symbols to query from database\nsymbols = {'Key1': \"Val1\", \"Key2\": \"Val2\"}\ncolumns = 'Open'\n\n# retrieve data between start_date and end_date\n# data will be retrieved between 2021-01-04 00:00:00 and 2021-02-05 23:59:59\n# saved as a csv file named test.csv\nts.retrieve_data_as_csv(file_name='test/test.csv',\n                        symbols=symbols,\n                        columns=columns,\n                        group_name='My Group',\n                        start_date='2021-01-04',\n                        end_date='2021-02-05'\n                        )\n\n# retrieve data for specific time frame\n# from 2021-01-04 12:30:00\n# to 2021-02-05 09:15:00\nts.retrieve_data_as_csv(file_name='test/test.csv',\n                        symbols=symbols,\n                        columns=columns,\n                        group_name='My Group',\n                        start_date='2021-01-04T12:30:00',\n                        end_date='2021-02-05T09:15:00'\n                        )\n\n\n# For given keys, columns, group and dates range\n# Streaming instead of saving\nfileIO = ts.retrieve_data_as_csv(file_name=None,\n                                 symbols=symbols,\n                                 columns=columns,\n                                 group_name='My Group',\n                                 start_date='2021-01-04',\n                                 end_date='2021-02-05'\n                                 )\n\n# read as pandas dataframe\ndf = pd.read_csv(fileIO)\n```\n\n### How to use a wildcard for a key's values ?\nTo get all the value for one a several keys for the query, the character * can be used as a wildcard.\nThe argument *allow_wildcard* should be set to True in the retrieval function to enable the use of wildcard. \n\nPlease note that by default, the use of wildcards is **DISABLED**.\n\n```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate Timeseries class\nts = gx.Timeseries()\n\n# Symbols to query from database\nsymbols = {'Key1': \"Val1\", \"Key2\": \"Val2\", \"Key3\": \"*\"}\ncolumns = ['Open', 'Close']\n\n# retrieve all history for the symbols with keys and columns\n# all values for Key3 will be returned\n# the data will be streamed to memory\nfileIO = ts.retrieve_data_as_csv(file_name=None,\n                                 symbols=symbols,\n                                 columns=columns,\n                                 group_name='My Group',\n                                 allow_wildcard=True\n                                 )\n\n# read as pandas dataframe\ndf = pd.read_csv(fileIO)\n```\n\n\n### How to get all the columns for a given set of keys ?\nTo get all the columns values for a given set of keys in the database, the query can take an empty list as the queried columns, as follow:\n\n```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate Timeseries class\nts = gx.Timeseries()\n\n# Symbols to query from database\nsymbols = {'Key1': \"Val1\", \"Key2\": \"Val2\", \"Key3\": \"Val3\"}\ncolumns = []\n\n# retrieve all history for the symbols with keys and columns\n# all columns for the set of keys will be returned\n# the data will be streamed to memory\nfileIO = ts.retrieve_data_as_csv(file_name=None,\n                                 symbols=symbols,\n                                 columns=columns,\n                                 group_name='My Group'\n                                 )\n\n# read as pandas dataframe\ndf = pd.read_csv(fileIO)\n```\n\nNote that this configuration can be used with keys wildcards (with *allow_wildacrd=True*) and any other setting.\n\n\n### How to modify the Time Zone of the data ?\nThe timestamps in the queried time series are set by default in the timezone of the user's account, who created the script or the pipeline.\nIt is described in the Date column header between brackets (for example *Date(UTC)*)\n\nTo modify the time zone in the retrieved dataset, the timezone can be passed directly to the retrieval function as follow.\nIt must respect the Continent/City format.\n\n```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate Timeseries class\nts = gx.Timeseries()\n\n# Symbols to query from database\nsymbols = {'Key1': \"Val1\", \"Key2\": \"Val2\"}\ncolumns = ['Open', 'Close']\n\n# retrieve all available data from group according to keys & columns \n# and stream to memory as BytesIO object\nfileIO = ts.retrieve_data_as_csv(file_name=None,\n                                 symbols=symbols,\n                                 columns=columns,\n                                 group_name='My Group',\n                                 timezone='Europe/London'\n                                 )\n\n# read as pandas dataframe\ndf = pd.read_csv(fileIO)\n```\n\n### How to get the metadata along with the data ? \nIt is possible to get extra columns in the retrieved data, along with the keys & columns values, containing the metadata of the symbols.\nIt is done by setting the argument *metadata=True* in the retrieval function.\n\nBy default, no metadata is included in the queried data.\n\n```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate Timeseries class\nts = gx.Timeseries()\n\n# Symbols to query from database\nsymbols = {'Key1': \"Val1\", \"Key2\": \"Val2\"}\ncolumns = ['Open', 'Close']\n\n# retrieve all available data from group according to keys & columns \n# and stream to memory as BytesIO object\nfileIO = ts.retrieve_data_as_csv(file_name=None,\n                                 symbols=symbols,\n                                 columns=columns,\n                                 group_name='My Group',\n                                 metadata=True\n                                 )\n\n# read as pandas dataframe\ndf = pd.read_csv(fileIO)\n```\n\n\n### How to modify the format of the received data ?\nThe queried data comes by default as Normalized CSV format (NCSV), with in this order:\n* the keys columns,\n* the date column, with timestamps in either the default timezone or the specified one (*timezone* argument in the function),\n* the values columns,\n* the metadata columns, if wanted (*metadata=True*)\n \nBy setting *NCSV=False* in the retrieval method, the data will be returned as Dataframe format (PANDAS in API docs), as a JSON.\nThe JSON (python dict) has timestamps as keys and a dictionary containing pairs of symbols_columns and their value.\n\n```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate Timeseries class\nts = gx.Timeseries()\n\n# Symbols to query from database\nsymbols = {'Key1': \"Val1\", \"Key2\": \"Val2\"}\ncolumns = ['Open', 'Close']\n\n# retrieve all available data from group according to keys & columns \n# and stream to memory as BytesIO object\nfile_json = ts.retrieve_data_as_csv(file_name=None,\n                                    symbols=symbols,\n                                    columns=columns,\n                                    group_name='My Group',\n                                    metadata=True,\n                                    NCSV=False\n                                    )\n\n# read as pandas dataframe\n# Transpose to have datetime as rows index\ndf = pd.DataFrame(file_json).T\n```\n\nNote that the dataframe, created from the JSON containing the data, is then transposed to have timestamps as DatetimeIndex (along rows axis). \n\n\n--- - \n## Task Handler\nUsers can extend the existing set of tasks on GX platform by executing scripts or notebooks respectively from the Python Runner Task or the Jupyter Runner Task. \n\nThis task then can be used in a pipeline and be able to communicate with other tasks by:\n\n- reading outputs from other tasks, as inputs\n- writing outputs, that can be used by others tasks as inputs\n\nA task can as well receive inputs directly as a file picked from the datalake, either for a specific file either for the newest available version of a file on the lake, given its name and group.\n\nWhithin a python script, run into either one of the **Python Runner Task**,  this is implemented as follow:\n\n### Read a Task Input\nThe input file passed to the Task can be: \n- either downloaded to the disk,\n- either to be read on the fly (useful when limited space on the disk but not in memory).\n\n ```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate TaskHandler class\nth = gx.TaskHandler()\n\n# the current task reads the file passed by a previous task, that is connected to it.\n# The passed file is downloaded and saved on the disk as data.csv\nth.download_from_input_parameter(arg_name='Input #1', \n                                 dest_file_name='data.csv',\n                                 save=True)\n\n# The passed file is downloaded and kept in the memory (streamed, not saved on the disk)\nfile_content = th.download_from_input_parameter(arg_name='Input #2', \n                                                dest_file_name=None,\n                                                save=False)\n\n# If a csv file was streamed, it can be read as pandas Dataframe for example\ndf = pd.read_csv(file_content)\n```\n\nIf dest_file_name=None then the file is saved on the disk with its original name from the datalake.\n\n### How to obtain additional file information\n\nThere is a possibility to retrieve information related to the input parameters using the DatalakeHandler (```dh.get_info_from_id()```) and TaskHandler (``` th.read_task_parameter_value()```) together.\n\n```python\nimport generalindex as gx\nimport pandas as pd\n\n# Instantiate TaskHandler class\nth = gx.TaskHandler()\n# Instantiate the Datalake Handler\ndh = gx.DatalakeHandler()\n\ndh.get_info_from_id(th.read_task_parameter_value('Input #1'))\n\n``` \nThis can be used to retrieve any metadata associated with the file itself like file name or arrival time (time it was uploaded to the system)\n\n### Set a Task Output\nThe output of the Task can be set :\n- either by uploading a file saved on the disk to the datalake,\n- either by streaming the python object content to the datalake as the destination file.\n\nOnce uploaded, the Output is set to point to the file on the datalake (by its ID, name ,group name)\n\n\n ```python\nimport generalindex as gx\nimport io\n\n# Instantiate TaskHandler class\nth = gx.TaskHandler()\n\n# the first task uploads the file dataset.csv to My Final Group and pass the info about this file\n# so that the next task can read this file by connecting its input to the output Prepared Dataset\nth.upload_to_output_parameter(output_name='Output #1', \n                              file='path/dataset.csv', \n                              group_name='My Final Group',\n                              file_upload_name=None,\n                              file_type='SOURCE')\n\n# Convert the python object to upload as BytesIO object\ndf_io = io.BytesIO(df.to_csv().encode())\n\n# Stream to the datalake as the destination file\nth.upload_to_output_parameter(output_name='Output #1', \n                              file=df_io, \n                              group_name='My Final Group',\n                              file_upload_name='dataset.csv',\n                              file_type='SOURCE')\n```\n\nIf file_upload_name=None then the saved file will be uploaded with its original name.\nIf the file is streamed directly to the datalake, the file_upload_name argument must be set.\n\n--- -\n## Statuses\nSending status can be used to show in the application what is the progress of the task execution. It allows to use 3 different levels: \n- FINISHED (green),\n- WARNING (orange), \n- ERROR (red).\n\nSending statuses remains optional as the GX platform sends general statuses.\nOnly if user needs to pass some specific information in the status, this is worth using.\n\n```python\nimport generalindex as gx\n\n# Instantiate the Status Handler\nsh = gx.StatusHandler()\n\n# Generic status sender\nsh.send_status(status='INFO', message='Crucial Information')\n\n# there are pre-defined statuses\nsh.info(message='Pipeline Finished Successfully')\nsh.warn(message='Something suspicious is happening ...')\nsh.error(message='Oops, the task failed ...')\n```\n\nNote that the info status is informing the status service that the task executed successfully and is finished.\n\n--- -\n## Example\nTo simplify the use of the SDK methods in a script, Python SDK methods can be inherited by the user’s main class. \n\nBelow is an example of a class that has 3 methods:\n\n- Download raw data (or take from the previous task)\n- Process the data  \n- Upload the data to datalake and pass it to the next task\n\n ```python\nimport io\nimport generalindex as gx\nimport pandas as pd\n\nclass Runner:\n    def __init__(self):\n        # Inherit the methods from the SDK Task Handler class\n        self.handler = gx.TaskHandler()\n        self.df = None\n        \n    def download_data(self):\n        # the method from TaskHandler can be used directly\n        # it downloads the file passed as input Dataset and save it as data.csv\n        self.handler.download_from_input_parameter(arg_name='Dataset', dest_file_name='data.csv', save=True)\n        \n        # Read as pandas dataframe\n        return pd.read_csv(\"data.csv\")\n        \n    \n    def process_data(self, df):\n        # any logic here that processed the downloaded dataset and saves it as processed_data.csv\n        \n        return df_processed\n\n    \n    def upload_data(self, df_processed):\n        # Encode as bytesIO\n        fileIO = io.BytesIO(df_processed.to_csv().encode())\n        \n        # pass the processed data csv file as the output of the task called Processed Data\n        self.handler.upload_to_output_parameter(output_name='Processed Dataset', file=fileIO, group_name='Final Group')\n    \n        \n    def run(self):\n        df = self.download_data()\n        df_processed = self.process_data(df)\n        self.upload_data(df_processed)\n        \n        \nif __name__ == '__main__':\n    status = gx.StatusHandler()\n    Runner().run()\n    status.info('Test Pipeline Finished')\n\n ```\n\n\n### Who do I talk to? ###\n* Admin: General Index info@general-index.com\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.general-index.com/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "generalindex",
    "package_url": "https://pypi.org/project/generalindex/",
    "platform": null,
    "project_url": "https://pypi.org/project/generalindex/",
    "project_urls": {
      "Homepage": "https://www.general-index.com/"
    },
    "release_url": "https://pypi.org/project/generalindex/0.1.3/",
    "requires_dist": [
      "requests (>=2.27.1)",
      "urllib3 (>=1.26.9)"
    ],
    "requires_python": ">=3.6",
    "summary": "Python SDK for the General Index platform",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15508556,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04970fdb0ef3d056046bf5c6d559fd3ca2575e4eee3bc0f5d2b90978eb54525f",
          "md5": "710aafae7f00064798b6e71ca8736549",
          "sha256": "32b0dac564404ae18e7737832e3f47c636a8cb53c9317b0d01bb1d6aecd62ed2"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "710aafae7f00064798b6e71ca8736549",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17757,
        "upload_time": "2021-05-19T10:24:22",
        "upload_time_iso_8601": "2021-05-19T10:24:22.325943Z",
        "url": "https://files.pythonhosted.org/packages/04/97/0fdb0ef3d056046bf5c6d559fd3ca2575e4eee3bc0f5d2b90978eb54525f/generalindex-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f614dac93125ba99413cfd20ccbaff0dc3c64cd138adcb385952bfb9cfb15566",
          "md5": "448b13d49576444d20a1e9c9f0bd549c",
          "sha256": "066f13df96a56389e044e76c18f490a413b41e8ccae7383a7c032af4aeb651c6"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "448b13d49576444d20a1e9c9f0bd549c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18263,
        "upload_time": "2021-05-19T10:24:24",
        "upload_time_iso_8601": "2021-05-19T10:24:24.551151Z",
        "url": "https://files.pythonhosted.org/packages/f6/14/dac93125ba99413cfd20ccbaff0dc3c64cd138adcb385952bfb9cfb15566/generalindex-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7618f7788b5a04c746478cf951a346589ed0d21d61c11ca05b6d1df0970a3fff",
          "md5": "ce37a497a438f3d5001c4c376b9bcb09",
          "sha256": "29b5314e7108c56b687716f7ae8cea70d93bc5e2fa1bb543058e126639a0711a"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce37a497a438f3d5001c4c376b9bcb09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20872,
        "upload_time": "2021-07-08T15:18:44",
        "upload_time_iso_8601": "2021-07-08T15:18:44.072377Z",
        "url": "https://files.pythonhosted.org/packages/76/18/f7788b5a04c746478cf951a346589ed0d21d61c11ca05b6d1df0970a3fff/generalindex-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bff8ecc77d5f9306a42c2f8d62074c9336d4b8ef5083f461c4df014357fa9c96",
          "md5": "45fc25018abec6a49eb8d66d9fc7c161",
          "sha256": "702d94f57b256601e16e3d9cb185cc9bff90875672d7224a3d81ed584d568db7"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "45fc25018abec6a49eb8d66d9fc7c161",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19287,
        "upload_time": "2021-07-08T15:18:46",
        "upload_time_iso_8601": "2021-07-08T15:18:46.342156Z",
        "url": "https://files.pythonhosted.org/packages/bf/f8/ecc77d5f9306a42c2f8d62074c9336d4b8ef5083f461c4df014357fa9c96/generalindex-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcdd4c91efa79a14961028f87023a5ca57ae9e0005954bd16f83d748353800fd",
          "md5": "dcbd6dbaf880ddeb0ec82aad8778c537",
          "sha256": "84a0817a1cfe396ab2c48a940c6bf43a558b238f3450302fb53786be8824cc37"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.2a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcbd6dbaf880ddeb0ec82aad8778c537",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33364,
        "upload_time": "2021-07-15T10:19:16",
        "upload_time_iso_8601": "2021-07-15T10:19:16.409985Z",
        "url": "https://files.pythonhosted.org/packages/dc/dd/4c91efa79a14961028f87023a5ca57ae9e0005954bd16f83d748353800fd/generalindex-0.0.2a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a804f965c459644c44493e4b4295685b9531022c73b565bf3d1f326ba2f374a",
          "md5": "2c64bdc81c52218dc1bd49900db2c185",
          "sha256": "0910d4720aa7ff616f21f5fb583a65b10d4f7a5a881ff39a063806a904f05625"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.2a0.tar.gz",
        "has_sig": false,
        "md5_digest": "2c64bdc81c52218dc1bd49900db2c185",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24352,
        "upload_time": "2021-07-15T10:19:17",
        "upload_time_iso_8601": "2021-07-15T10:19:17.861500Z",
        "url": "https://files.pythonhosted.org/packages/8a/80/4f965c459644c44493e4b4295685b9531022c73b565bf3d1f326ba2f374a/generalindex-0.0.2a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6e877ce73bd2d09b8e87b6cca2aea75860f540e0f68db49c7dbc3613a12bd5c",
          "md5": "5d7acab1c0ce3f859adc0b07d66d990e",
          "sha256": "6a415e727e26edea472587556dd9cdb1e7f859f8f69a03d8ff3739d0eaff2b30"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d7acab1c0ce3f859adc0b07d66d990e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33790,
        "upload_time": "2021-08-03T13:57:31",
        "upload_time_iso_8601": "2021-08-03T13:57:31.957918Z",
        "url": "https://files.pythonhosted.org/packages/f6/e8/77ce73bd2d09b8e87b6cca2aea75860f540e0f68db49c7dbc3613a12bd5c/generalindex-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85767bb9dccfb71b6d590961beeaf443c663b6cb6362b5c9a1eb555188660fc4",
          "md5": "12ea98a4365fb2259fe49b3fca7a0e21",
          "sha256": "5aa8d967eba39a6b26a2107ea93c230a1406b478dbe2b994c7b95fa2ee0fd38a"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "12ea98a4365fb2259fe49b3fca7a0e21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24336,
        "upload_time": "2021-08-03T13:59:38",
        "upload_time_iso_8601": "2021-08-03T13:59:38.255616Z",
        "url": "https://files.pythonhosted.org/packages/85/76/7bb9dccfb71b6d590961beeaf443c663b6cb6362b5c9a1eb555188660fc4/generalindex-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44c1e9c22415f3157ff5cbef9b39710d7ffb1f716dab7fc0f0b1fe197f2d645e",
          "md5": "8185ed0826d9a508742d4e5d5659aa03",
          "sha256": "ee45468e9dde0f2ee1e13efbf81cc7921f00349c0bb1f72b71e153fed3ab2d26"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8185ed0826d9a508742d4e5d5659aa03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36399,
        "upload_time": "2021-12-20T14:17:21",
        "upload_time_iso_8601": "2021-12-20T14:17:21.531425Z",
        "url": "https://files.pythonhosted.org/packages/44/c1/e9c22415f3157ff5cbef9b39710d7ffb1f716dab7fc0f0b1fe197f2d645e/generalindex-0.0.4-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e993736abf1ad46d48aab39867dd0deb1a4208d84fad9531f7e3aa27df4ff9db",
          "md5": "098eb1485ea7934e0cbd2e4447f9d1e3",
          "sha256": "a480bb1fea4fc0b7b33a56b6ff4199357c1dceb916def51512941517dfed772f"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "098eb1485ea7934e0cbd2e4447f9d1e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26084,
        "upload_time": "2021-12-20T14:17:23",
        "upload_time_iso_8601": "2021-12-20T14:17:23.588974Z",
        "url": "https://files.pythonhosted.org/packages/e9/93/736abf1ad46d48aab39867dd0deb1a4208d84fad9531f7e3aa27df4ff9db/generalindex-0.0.4.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6acd65d51f81f7e54c49f637cce8d3a1bf64305914e1e9494440aa1830fd3df5",
          "md5": "a686032e4303cac3ba6d3c1f6e38f60d",
          "sha256": "1d6a45b4e32b6b910e68ee8afe2d3b96be955b11e5cd1395b54f290d703c640b"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a686032e4303cac3ba6d3c1f6e38f60d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22130,
        "upload_time": "2022-03-14T14:43:02",
        "upload_time_iso_8601": "2022-03-14T14:43:02.629990Z",
        "url": "https://files.pythonhosted.org/packages/6a/cd/65d51f81f7e54c49f637cce8d3a1bf64305914e1e9494440aa1830fd3df5/generalindex-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bffc37e0d89d1d5b8017f68deffeb0b8dc4417960006a1ebabb43d3aa49b8d8",
          "md5": "2b8ee333979cb234b6ce967226b3d37f",
          "sha256": "2389d440f8053a194d4519861f12106f37e074c55c5b7a404fe959e4c7e80ca6"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2b8ee333979cb234b6ce967226b3d37f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25383,
        "upload_time": "2022-03-14T14:43:05",
        "upload_time_iso_8601": "2022-03-14T14:43:05.533847Z",
        "url": "https://files.pythonhosted.org/packages/5b/ff/c37e0d89d1d5b8017f68deffeb0b8dc4417960006a1ebabb43d3aa49b8d8/generalindex-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "671f902231bb47d649d9014b726a4303e1dd8fb70c2732dae6719aef27b9eb65",
          "md5": "410aaf7431e132b04c75643e2d8c159f",
          "sha256": "8ae86e834bb025750cdc7ccde45f03242e465f8d8cffb6240df432baed0b0912"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "410aaf7431e132b04c75643e2d8c159f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22215,
        "upload_time": "2022-03-15T10:41:20",
        "upload_time_iso_8601": "2022-03-15T10:41:20.820311Z",
        "url": "https://files.pythonhosted.org/packages/67/1f/902231bb47d649d9014b726a4303e1dd8fb70c2732dae6719aef27b9eb65/generalindex-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7290ee460c2cceacea19ef7af52b53ac5d6e138386a3e9ea7292520abdd805f8",
          "md5": "f92b7c89c5881444c8e7cf197f6426e4",
          "sha256": "0e0550ba1d482eede47c0ea90bf3d95255bb0d966b2223d6b7f6252a9439aa9f"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f92b7c89c5881444c8e7cf197f6426e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25552,
        "upload_time": "2022-03-15T10:41:22",
        "upload_time_iso_8601": "2022-03-15T10:41:22.831508Z",
        "url": "https://files.pythonhosted.org/packages/72/90/ee460c2cceacea19ef7af52b53ac5d6e138386a3e9ea7292520abdd805f8/generalindex-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c82596d2f0b4c01cf9df4395fc910209aee9f83b0c6f1a218ddddf8b1dc2e3d9",
          "md5": "7fd2bf13d262fef9d334962a447f70e5",
          "sha256": "b56e4b2bf29b308d404553485b855255584bd53084372deab94970e65d0e2761"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fd2bf13d262fef9d334962a447f70e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21966,
        "upload_time": "2022-04-21T17:06:34",
        "upload_time_iso_8601": "2022-04-21T17:06:34.013994Z",
        "url": "https://files.pythonhosted.org/packages/c8/25/96d2f0b4c01cf9df4395fc910209aee9f83b0c6f1a218ddddf8b1dc2e3d9/generalindex-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6efd935d2662ccb224b0a715af7de21708d184c254fdae59a49331e437e6a724",
          "md5": "2d597ae59c8a98563aa27b548148c209",
          "sha256": "516814cc8f095c926abcb942103514b605bf90feb3d82f0b1408a4cad9b1b16a"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "2d597ae59c8a98563aa27b548148c209",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25051,
        "upload_time": "2022-04-21T17:06:35",
        "upload_time_iso_8601": "2022-04-21T17:06:35.961587Z",
        "url": "https://files.pythonhosted.org/packages/6e/fd/935d2662ccb224b0a715af7de21708d184c254fdae59a49331e437e6a724/generalindex-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64d3c717bab7d05f0bf8ebaa65156add59e3b4aa52aa32ac79c1e51f27d42c9e",
          "md5": "55a8ce20cfcaef0b9afddcfec06b6ad4",
          "sha256": "aef2fd4323805147ee9c0c5b653b66effa5ede809f3de04ccd876efad340f57b"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55a8ce20cfcaef0b9afddcfec06b6ad4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22030,
        "upload_time": "2022-05-17T10:07:02",
        "upload_time_iso_8601": "2022-05-17T10:07:02.715026Z",
        "url": "https://files.pythonhosted.org/packages/64/d3/c717bab7d05f0bf8ebaa65156add59e3b4aa52aa32ac79c1e51f27d42c9e/generalindex-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "999d6b39f9ae68ecf2996df657dbe2eca448e66bedd009d6d045e5eb5115c973",
          "md5": "a60d655d160874676fd3b33acf86575f",
          "sha256": "cca8ba279b08a369fbd815b4a747c8a6c295fd6c795c26eace086eb2cd76f0fc"
        },
        "downloads": -1,
        "filename": "generalindex-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "a60d655d160874676fd3b33acf86575f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25122,
        "upload_time": "2022-05-17T10:07:04",
        "upload_time_iso_8601": "2022-05-17T10:07:04.443263Z",
        "url": "https://files.pythonhosted.org/packages/99/9d/6b39f9ae68ecf2996df657dbe2eca448e66bedd009d6d045e5eb5115c973/generalindex-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11a29f429d3ef5c75fe515fddc55840abb1221b42594992d706b1a6fa30d2200",
          "md5": "cd17f12952d1bafb0a1b97d72a9c85b8",
          "sha256": "92b1638e79cdd8f3fe6e09350dff2bb39f6055c92d089a43645761ff98c86635"
        },
        "downloads": -1,
        "filename": "generalindex-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd17f12952d1bafb0a1b97d72a9c85b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22421,
        "upload_time": "2022-06-07T13:22:08",
        "upload_time_iso_8601": "2022-06-07T13:22:08.500630Z",
        "url": "https://files.pythonhosted.org/packages/11/a2/9f429d3ef5c75fe515fddc55840abb1221b42594992d706b1a6fa30d2200/generalindex-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1682378786cd783cb95a5069508d7f57ba067dbad2c006d1c4fb48ff8b578a0d",
          "md5": "b54eb6b5980b2efcb706f7e5d20a1079",
          "sha256": "f05c6b35cc6a17142102f43f7ca3a4af60970cea9b78b9bc051ffcbfbdb4ecea"
        },
        "downloads": -1,
        "filename": "generalindex-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b54eb6b5980b2efcb706f7e5d20a1079",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25324,
        "upload_time": "2022-06-07T13:22:10",
        "upload_time_iso_8601": "2022-06-07T13:22:10.481733Z",
        "url": "https://files.pythonhosted.org/packages/16/82/378786cd783cb95a5069508d7f57ba067dbad2c006d1c4fb48ff8b578a0d/generalindex-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7d463158efd5f7731895e4ecb05982436f80841249f07ba739bda4f88d2f11f",
          "md5": "a9ea527b0392a5da461945e8883f0a50",
          "sha256": "b6e0470c117f7df8c7eef342cc9bd54e6a03e66df1abca1272a61650f7c29bad"
        },
        "downloads": -1,
        "filename": "generalindex-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9ea527b0392a5da461945e8883f0a50",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22902,
        "upload_time": "2022-09-30T12:40:03",
        "upload_time_iso_8601": "2022-09-30T12:40:03.355692Z",
        "url": "https://files.pythonhosted.org/packages/b7/d4/63158efd5f7731895e4ecb05982436f80841249f07ba739bda4f88d2f11f/generalindex-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8305426ff0483a291f22f404d2010d91f31e90bff5af80fd71fae96a59f00a44",
          "md5": "4f0bc0bf7088d324a95e0acb914942cc",
          "sha256": "7a0ce6de5cd0e13d39d9bd1c5fa2b8cf85cd01f95276b142748c931c19876e00"
        },
        "downloads": -1,
        "filename": "generalindex-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4f0bc0bf7088d324a95e0acb914942cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26224,
        "upload_time": "2022-09-30T12:40:06",
        "upload_time_iso_8601": "2022-09-30T12:40:06.735994Z",
        "url": "https://files.pythonhosted.org/packages/83/05/426ff0483a291f22f404d2010d91f31e90bff5af80fd71fae96a59f00a44/generalindex-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82e6a947225b59f76bab2892c8ada2acf670c06d4371719cf5fdac41873a9af6",
          "md5": "ad1f9bd9d2ee189e8c7e23653a787f0d",
          "sha256": "061a2ecb87c7f4a566a3ee27672213f3723ef5a1832525b2ced6c3073e1eb464"
        },
        "downloads": -1,
        "filename": "generalindex-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad1f9bd9d2ee189e8c7e23653a787f0d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22906,
        "upload_time": "2022-09-30T12:55:35",
        "upload_time_iso_8601": "2022-09-30T12:55:35.357143Z",
        "url": "https://files.pythonhosted.org/packages/82/e6/a947225b59f76bab2892c8ada2acf670c06d4371719cf5fdac41873a9af6/generalindex-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c24d566cdb8a8bc80f5ba0364fd75ffd7ff6a81b16880807fb993208fd481761",
          "md5": "e56e2d2b24dee6cdf57f5a8340962e49",
          "sha256": "98768feb65ccd01b22a8666bdc21fa6eb73c3e7b08535204fd7d8cdc67e87e2a"
        },
        "downloads": -1,
        "filename": "generalindex-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e56e2d2b24dee6cdf57f5a8340962e49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26222,
        "upload_time": "2022-09-30T12:55:37",
        "upload_time_iso_8601": "2022-09-30T12:55:37.227269Z",
        "url": "https://files.pythonhosted.org/packages/c2/4d/566cdb8a8bc80f5ba0364fd75ffd7ff6a81b16880807fb993208fd481761/generalindex-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3556ba106eebd868ee709b324fd4aba9bda7ed19f72ef4a7b9511ba3a06b8e21",
          "md5": "595b2152e23e9ba764926d85a262558c",
          "sha256": "67c28c958e25a67f49f140ce7d47a5d79bd9c14068f85d95940495717ce75bee"
        },
        "downloads": -1,
        "filename": "generalindex-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "595b2152e23e9ba764926d85a262558c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22309,
        "upload_time": "2022-10-24T11:32:53",
        "upload_time_iso_8601": "2022-10-24T11:32:53.264927Z",
        "url": "https://files.pythonhosted.org/packages/35/56/ba106eebd868ee709b324fd4aba9bda7ed19f72ef4a7b9511ba3a06b8e21/generalindex-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "369a43576fb7cefd0eb0b0992fb6ec72daf5cc7d3548b71167587bea6fe2b5c8",
          "md5": "b506a4a233bdf2388778d74d30518615",
          "sha256": "2ce9ef7a4bd188e7dc7d5d16f5980a3571a913cda9d09df0975ebb14189408d0"
        },
        "downloads": -1,
        "filename": "generalindex-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b506a4a233bdf2388778d74d30518615",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25787,
        "upload_time": "2022-10-24T11:32:55",
        "upload_time_iso_8601": "2022-10-24T11:32:55.955471Z",
        "url": "https://files.pythonhosted.org/packages/36/9a/43576fb7cefd0eb0b0992fb6ec72daf5cc7d3548b71167587bea6fe2b5c8/generalindex-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3556ba106eebd868ee709b324fd4aba9bda7ed19f72ef4a7b9511ba3a06b8e21",
        "md5": "595b2152e23e9ba764926d85a262558c",
        "sha256": "67c28c958e25a67f49f140ce7d47a5d79bd9c14068f85d95940495717ce75bee"
      },
      "downloads": -1,
      "filename": "generalindex-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "595b2152e23e9ba764926d85a262558c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22309,
      "upload_time": "2022-10-24T11:32:53",
      "upload_time_iso_8601": "2022-10-24T11:32:53.264927Z",
      "url": "https://files.pythonhosted.org/packages/35/56/ba106eebd868ee709b324fd4aba9bda7ed19f72ef4a7b9511ba3a06b8e21/generalindex-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "369a43576fb7cefd0eb0b0992fb6ec72daf5cc7d3548b71167587bea6fe2b5c8",
        "md5": "b506a4a233bdf2388778d74d30518615",
        "sha256": "2ce9ef7a4bd188e7dc7d5d16f5980a3571a913cda9d09df0975ebb14189408d0"
      },
      "downloads": -1,
      "filename": "generalindex-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b506a4a233bdf2388778d74d30518615",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25787,
      "upload_time": "2022-10-24T11:32:55",
      "upload_time_iso_8601": "2022-10-24T11:32:55.955471Z",
      "url": "https://files.pythonhosted.org/packages/36/9a/43576fb7cefd0eb0b0992fb6ec72daf5cc7d3548b71167587bea6fe2b5c8/generalindex-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}