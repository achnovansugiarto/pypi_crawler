{
  "info": {
    "author": "Heytor Norberth Leite da Silva",
    "author_email": "heytornorberth2@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# PYBRDOC\n\nPYBRDOC é uma biblioteca que visa fornecer componentes para trabalhar com tipos de dados específicos da realidade brasileira.\n\nEsta biblioteca surgiu mediante a necessidade de se ter tipos específicos que possibilitem lidar com documentos de identificação próprios do Brasil, como é o caso do Cadastro de Pessoa Física (CPF) e do Cadastro Nacional de Pessoa Jurídica (CNPJ).\n\nPode servir bastante nas implimentações de códigos que precisam fazer a validação desses determinados documentos.\n\nAlém de conter classes que representam o modelo computacional dos principais documentos brasileiros, esta biblioteca também disponibiliza classes que permitem a validação e a geração de números válidos para estes documentos; sendo estas últimas disponibilizadas exclusivamente para fins de testes computacionais.\n\n> This software is coded and documented in portuguese only as it is intended to be used to generate the necessary files for the brazilian government regarding to digital bookkeeping.\n\n## Requisitos\n\n  * python\n\n## Como instalar\n\n    $ pip install PYBRDOC\n\n## Objetivos do Projeto\n\nA ideia inicial do projeto e unificar em uma única biblioteca módulos que permitam representar computacionalmente e validar documentos brasileiros - inicialmente CPF e CNPJ, além de permitir a geração de números válidos para estes documentos.\n\n## Compatibilidade do Projeto\n\nO projeto inicialmente suportará apenas Python 3.6.5+.\n\nOutras linguagens de programação poderão ter versões especificas conforme minha disponibilidade de tempo.\n\n## Status do Projeto\n\nO projeto está em fase inicial de desenvolvimento.\n\n| Módulo                              |  Situação       |\n|:------------------------------------|:---------------:|\n| [DocumentoIdentificacao](#di)       |Funcional        |\n| [CPF](#cpf)                         |Funcional        |\n| [ValidadorCpf](#vcpf)               |Funcional        |\n| [GeradorCpf](#gcpf)                 |Funcional        |\n| [Cnpj](#cnpj)                       |Funcional        |\n| [ValidadorCnpj](#vcnpj)             |Funcional        |\n| [GeradorCnpj](#gcnpj)               |Funcional        |\n| [InscricaoEstadual](#ie)            |Funcional        |\n| [ValidadorInscricaoEstadual](#vie)  |Funcional        |\n| [GeradorInscricaoEstadual](#gie)    |Não implementado |\n| [InscricaoSuframa](#is)             |Funcional        |\n| [ValidadorSuframa](#vs)             |Funcional        |\n| [GeradorSuframa](#gs)               |Funcional        |\n\n\n### <a name=\"di\"></a> DocumentoIdentificacao\n\nClasse abstrata, não podendo ser instanciada diretamente, serve como base para todas as classes que representam um documento de identificação ou qualquer outro documento brasileiro que necessite de validação.\n\n### <a name=\"cpf\"></a> CPF\n\nClasse usada para representar em código Pyhton um _Cadastro de Pessoa Física_ (CPF); permitindo representá-lo textualmente, com a devida formatação e identificar a sua validade.\n\n#### Utilização\n\n    >>> cpf = CPF('52513127765')\n    >>> cpf\n    '525.131.277-65'\n\n    >>> cpf.isValid\n    True\n\n    >>> cpf.rawValue\n    52513127765\n\n    >>> cpf = CPF('abcdefghijk')\n    >>> cpf.isValid\n    False\n\n    >>> print(cpf)\n    abcdefghijk\n\n    >>> print(cpf.rawValue)\n    abcdefghijk\n\n> Independente do conteúdo passado ao se criar uma instância de CPF, **sempre** obter-se-á uma instância deste. Caberá consultar a propriedade __isValid__ de uma instância de CPF para verificar se esta é válida ou não.\n\n> A representação textual de uma instância de CPF só será exibida caso esta instância contenha um número válido de CPF; ao contrário será exibida a _string_ utilizada para criá-la.\n\n> Para obter a _string_ utilizada ao instanciar um CPF, basta acessar a propriedade **rawValue** da instância criada.\n\n### <a name=\"vcpf\"></a> ValidadorCpf\n\nClasse responsável por validar uma instância de CPF ou uma _string_ contendo a representação numérica de um CPF.\n\n#### Utilização\n\n    >>> cpf = CPF('abcdefghijk')\n    >>> ValidadorCpf.validar(cpf)\n    False\n\n    >>> ValidadorCpf.validar('123.456.789-00')\n    False\n\n    Foi criado um CPF válido, porém foi digitado um caractere de separação diferente dos caracteres esperados (.-/ ). Mesmo assim, o validador informa tratar-se de um CPF correto\n    >>> cpf = CPF('508,697,212-40')\n    >>> ValidadorCpf.validar(cpf)\n    True\n\n### <a name=\"gcpf\"></a> GeradorCpf\n\nClasse responsável por gerar aleatoriamente um CPF válido.\n\n#### Utilização\n\n    >>> cpf = GeradorCpf.gerar()\n    >>> cpf.isValid\n    True\n\n### <a name=\"cnpj\"></a> Cnpj\n\nClasse usada para representar em código Pyhton um _Cadastro Nacional de Pessoa Jurídica_ (CNPJ); permitindo representá-lo textualmente, com a devida formatação e identificar a sua validade.\n\n#### Utilização\n\n\t>>> cnpj = Cnpj('abcdefghijklmn')\n\t>>> cnpj.isValid\n\tFalse\n\n\t>>> cnpj = Cnpj('12345678901234')\n\t>>> cnpj.isValid\n\tFalse\n\n\t>>> cnpj = Cnpj('19.658.147/0001-0O')\n\t>>> cnpj.isValid\n\tFalse\n\n\t>>> cnpj = Cnpj('19.658.147/0001-00')\n\t>>> cnpj.isValid\n\tTrue\n\n> Independente do conteúdo passado ao se criar uma instância de CNPJ, **sempre** obter-se-á uma instância deste. Caberá consultar a propriedade __isValid__ de uma instância de CNPJ para verificar se esta é válida ou não.\n\n> A representação textual de uma instância de CNPJ só será exibida caso esta instância contenha um número válido de CNPJ; ao contrário será exibida a _string_ utilizada para criá-la.\n\n> Para obter a _string_ utilizada ao instanciar um CNPJ, basta acessar a propriedade **rawValue** da instância criada.\n\n### <a name=\"vcnpj\"></a> ValidadorCnpj\n\nClasse responsável por validar uma instância de CNPJ ou uma _string_ contendo a representação numérica de um CNPJ.\n\n#### Utilização\n\n\t>>> cnpj = Cnpj('abcdefghijklmn')\n\t>>> ValidadorCnpj.validar(cnpj)\n\tFalse\n\n\t>>> cnpj = Cnpj('19.658.147/0001-0O')\n\t>>>ValidadorCnpj.validar(cnpj)\n\tFalse\n\n\t>>> ValidadorCnpj.validar('12345678901234')\n\tFalse\n\n\t>>> cnpj = Cnpj('34  633 423,0001/60')\n\t>>> ValidadorCnpj.validar(cnpj)\n\tTrue\n\n\t>>> ValidadorCnpj.validar('05.692.744/0001-38')\n\tTrue\n\n### <a name=\"gcnpj\"></a> GeradorCnpj\n\nClasse responsável por gerar aleatoriamente um CNPJ válido.\n\n#### Utilização\n\n    >>> cnpj = GeradorCnpj.gerar()\n    >>> cnpj.isValid\n    True\n\n#### Novidade!!! Consulta Online\nAdicionado a função consultar CNPJ, que por meio de uma API da receita federal \"ReceitaWS\", consegue informar os dados sobre o CNPJ desejado.\n\n### <a name=\"is\"></a> InscricaoSuframa\n\nRepresenta o número de inscrição na Superintendência da Zona Franca de Manaus (SUFRAMA)\n\n> A SUFRAMA mantém controle sobre as empresas com insentivo fiscal, identificando-as através do número de _Inscrição SUFRAMA_.\n\nA composição deste indicador é: _SS.NNNN.LLD_, onde:\n\n**SS** representa o __código do setor de atividade__ da empresa, conforme exemplo abaixo:\n\n| Código  | Descrição                   |\n| :----:  | :---------------------------|\n| 01 e 02 | Cooperativa                 |\n| 10 e 11 | Comércio                    |\n| 20      | Indústria com projeto pleno |\n| 60      | Serviços                    |\n\n**NNNN** número sequencial\n\n**LL** representa o código da licalidade da Unidade Administrativa da Suframa que habilitou a empresa, conforme exemplo abaixo:\n\n\n| Código | Descrição   |\n| :----: | :-----------|\n|   01   | Manaus      |\n|   10   | Boa Vista   |\n|   30   | Porto Velho |\n\n**D** dígito verificador\n\n#### Validação\n\n* Campo numérico com 9 posições (incluindo o dígito verificador).\n* Pode iniciar por 0 (zero), mas não pode iniciar por 00.\n* Dígito verificador calculado por [__módulo 11__](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador#Módulo_11 \"Método de cálculo do dígito verificador usando Módulo 11\"), pesos 2 a 9.\n\n#### Utilização\n\n    >>> x = InscricaoSuframa('01.1234.129')\n    >>> x.rawValue\n    '011234129'\n    >>> print(x)\n    01.1234.129\n    >>> x.isValid\n    False\n\n    >>> x = InscricaoSuframa('101580100')\n    >>> x.rawValue\n    '101580100'\n    >>> print(x)\n    10.1580.100\n    >>> x.isValid\n    True\n\n    >>> x = InscricaoSuframa('1015801OO')\n    >>> x.rawValue\n    '1015801OO'\n    >>> print(x)\n    1015801OO\n    >>> x.isValid\n    False\n\n### <a name=\"vs\"></a> ValidadorSuframa\n\nValida uma instância de InscricaoSuframa ou uma _string_ contendo a representação numérica de uma Inscrição Suframa.\n\n#### Utilização\n\n    # Validação de uma _string_ representando uma Inscrição Suframa:\n    >>> ValidadorSuframa.validar('101580100')\n    True\n\n    # Validação de uma _string_ representando uma Inscrição Suframa inválida (contendo caracteres não numéricos):\n    >>> ValidadorSuframa.validar('1015801OO')\n    False\n\n    # Validação de uma instância de InscriçãoSuframa:\n    >>> x = InscricaoSuframa('01.1234.129')\n    >>> ValidadorSuframa.validar(x)\n    False\n\n### <a name=\"gs\"></a> GeradorSuframa\n\nGera aleatoriamente uma Inscrição Suframa válida\n\n    >>> x = GeradorSuframa.gerar()\n    >>> x.isValid\n    True\n\n> **IMPORTANTE**: O __GeradorSuframa__ tem por objetivo ajudar estudantes, programadores, analistas de sistemas e testadores de código a gerar Inscrições Suframa válidas visando auxiliar as rotinas de testes de softwares em desenvolvimento.\n\n> A má utilização dos dados gerados pelo __GeradorSuframa__ é de **total responsabilidade do usuário** desta biblioteca.\n\n> As inscrições são geradas de forma aleatória, respeitando as leis de formação estabelecidas pela SUFRAMA.\n\n### <a name=\"ie\"></a> InscricaoEstadual\n\nRepresenta, em código Pyhton, uma _Inscrição Estadual_ (IE), ou o registro do contribuinte no cadastro do ICMS mantido pela Receita Estadual; permitindo representá-lo textualmente, com a devida formatação e identificar a sua validade.\n\n#### Utilização\n\n    >>> ie = InscricaoEstadual('613.855.219.926', 'SP')\n    >>> ie.isValid\n    True\n    >>> ie.rawValue\n    '613855219926'\n    >>> ie.UF\n    'SP'\n    >>> print(ie)\n    613.855.219.926\n\n### <a name=\"vie\"></a> ValidadorInscricaoEstadual\n\nValida a consistência de uma instância de InscricaoEstadual ou uma _string_ contendo a representação numérica de uma Inscrição Estadual para uma determinada Unidade da Federação, informada juntamente com a representação numérica da IE a qual se deseja validar.\n\n> A validação da Inscrição Estadual para cada Unidade da Federação brasileira, leva em consideração o disposto no [__Convênio 57/59__](http://www.sintegra.gov.br/conv_5795.html \"ConvênioICMS 57/59\"), como também as orientações e especificidades contidas na página [Conferências de Inscrições Estaduais](http://www.sintegra.gov.br/insc_est.html \"Conferência de Inscrições Estaduais\") do SINTEGRA.\n\n#### Utilização\n\n    >>> ie = InscricaoEstadual('613.855.219.926', 'SP')\n    >>> ValidadorInscricaoEstadual.validar(ie)\n    True\n\n    >>> ValidadorInscricaoEstadual.validarStr('207653461', 'RN')\n    True\n    >>> ValidadorInscricaoEstadual.validarStr('209564598', 'TO')\n    False\n\n> **NOTA**: Caso não se deseje utilizar o __ValidadorInscricaoEstadual__, pode-se utilizar o validador específico para uma determinada Unidade da Federação.\n<p>Cada Unidade da Federação brasileira possui o seu próprio validador, definido por: **Validador**XX, onde _XX_ deve ser substituído pela sigla da Unidade da Federação desejada.</p>\n<p>O Exemplo a seguir mostra como utilizar somente o validador específico para o Ceará, visando validar uma Inscrição Estadual deste Estado:</p>\n\n    >>> from bradocs4py.validadoresie import ValidadorCE\n    >>> ValidadorCE.validar('1234567')\n    False\n    >>> ValidadorCE.validar('50374156-6')\n    True\n\n> **IMPORTANTE**: Ao contrário de ValidadorInscricaoEstadual, os validadores específicos de cada UF validam somente uma cadeia de caracteres (_string_) contendo o número representativo da Inscrição Estadual a ser validada.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT classifiers = Development Status :: 3 - Alpha Environment :: Web Environment Intended Audience :: Developers License :: OSI Approved :: MIT License Natural Language :: English Natural Language :: Portuguese Natural Language :: Portuguese (Brazilian) Programming Language :: Python >= 3.8",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PYBRDOC",
    "package_url": "https://pypi.org/project/PYBRDOC/",
    "platform": null,
    "project_url": "https://pypi.org/project/PYBRDOC/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/PYBRDOC/1.1.5/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Biblioteca para ajudar na validação de documentos em sistemas e verificação da sua existencia no banco de dados da Receita Federal",
    "version": "1.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15199435,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a881c9749894da5c0a3088ad9826c987a02cd3052d1a0a2da0044d44546724fc",
          "md5": "b966b64c9881425060422b1a772a73a6",
          "sha256": "60f5b88d6b34d75d5144ab54186df0ce0434ec9e69695a5b64d7996f0172652b"
        },
        "downloads": -1,
        "filename": "PYBRDOC-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b966b64c9881425060422b1a772a73a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 29884,
        "upload_time": "2022-09-21T18:22:28",
        "upload_time_iso_8601": "2022-09-21T18:22:28.506574Z",
        "url": "https://files.pythonhosted.org/packages/a8/81/c9749894da5c0a3088ad9826c987a02cd3052d1a0a2da0044d44546724fc/PYBRDOC-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb815c58fa98d7fd4554de8eb74be893450bc4e0be58d310e6b44098cc4bb66f",
          "md5": "e4832ebc6668422716283add4897f93f",
          "sha256": "8aa3727478c7a40ce36cffb954a119b9dc771dd1fb2495887c2a5f4304a75b54"
        },
        "downloads": -1,
        "filename": "PYBRDOC-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e4832ebc6668422716283add4897f93f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16351,
        "upload_time": "2022-09-21T18:22:30",
        "upload_time_iso_8601": "2022-09-21T18:22:30.415978Z",
        "url": "https://files.pythonhosted.org/packages/bb/81/5c58fa98d7fd4554de8eb74be893450bc4e0be58d310e6b44098cc4bb66f/PYBRDOC-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df76b1f4e44b3335be3601e7d85d3529f79bfbfe15c4897666964c9ca31cb41f",
          "md5": "684c11f5bb6b9c883e20b8783bac93b7",
          "sha256": "b1f05c47daabe59796b8f46a0b4f59b8d54dca67d4d48bade84ba7d256758fb3"
        },
        "downloads": -1,
        "filename": "PYBRDOC-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "684c11f5bb6b9c883e20b8783bac93b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30467,
        "upload_time": "2022-09-24T16:17:33",
        "upload_time_iso_8601": "2022-09-24T16:17:33.056295Z",
        "url": "https://files.pythonhosted.org/packages/df/76/b1f4e44b3335be3601e7d85d3529f79bfbfe15c4897666964c9ca31cb41f/PYBRDOC-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d0aa56f0c736333ae55cfe664034f7f0521711a58d28e0355a8750b136fc922",
          "md5": "c39f0abca7d40386c9bfc99cf79c3825",
          "sha256": "b7550c9cdb55ef37784c545c35728ce3d9c1a991331d8ea1ebdf7ba57106160e"
        },
        "downloads": -1,
        "filename": "PYBRDOC-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c39f0abca7d40386c9bfc99cf79c3825",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16978,
        "upload_time": "2022-09-24T16:17:36",
        "upload_time_iso_8601": "2022-09-24T16:17:36.357121Z",
        "url": "https://files.pythonhosted.org/packages/8d/0a/a56f0c736333ae55cfe664034f7f0521711a58d28e0355a8750b136fc922/PYBRDOC-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cd8953ceab394126fd3005fd5af4f95ee57b25998118bb8f451dfe88cf2b6dc",
          "md5": "5cca7e73a65b079fbebe40769aa4389f",
          "sha256": "82c3bc6c53f244800be944f2304982a6a677c27921fa268c9218500d0eab4767"
        },
        "downloads": -1,
        "filename": "PYBRDOC-1.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cca7e73a65b079fbebe40769aa4389f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30304,
        "upload_time": "2022-09-24T16:34:02",
        "upload_time_iso_8601": "2022-09-24T16:34:02.729605Z",
        "url": "https://files.pythonhosted.org/packages/4c/d8/953ceab394126fd3005fd5af4f95ee57b25998118bb8f451dfe88cf2b6dc/PYBRDOC-1.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "036519097a6e385e7cd77b34e6198b372abe7d42a067a2da3782b0be9f654fc2",
          "md5": "bd41b2701987c06ba09bcc503c62613d",
          "sha256": "413a1a8c023f6fc3d832e8ad45b050fd0cbccfe4f7db142eb25a837ef01892d6"
        },
        "downloads": -1,
        "filename": "PYBRDOC-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "bd41b2701987c06ba09bcc503c62613d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16959,
        "upload_time": "2022-09-24T16:34:04",
        "upload_time_iso_8601": "2022-09-24T16:34:04.568328Z",
        "url": "https://files.pythonhosted.org/packages/03/65/19097a6e385e7cd77b34e6198b372abe7d42a067a2da3782b0be9f654fc2/PYBRDOC-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4cd8953ceab394126fd3005fd5af4f95ee57b25998118bb8f451dfe88cf2b6dc",
        "md5": "5cca7e73a65b079fbebe40769aa4389f",
        "sha256": "82c3bc6c53f244800be944f2304982a6a677c27921fa268c9218500d0eab4767"
      },
      "downloads": -1,
      "filename": "PYBRDOC-1.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5cca7e73a65b079fbebe40769aa4389f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 30304,
      "upload_time": "2022-09-24T16:34:02",
      "upload_time_iso_8601": "2022-09-24T16:34:02.729605Z",
      "url": "https://files.pythonhosted.org/packages/4c/d8/953ceab394126fd3005fd5af4f95ee57b25998118bb8f451dfe88cf2b6dc/PYBRDOC-1.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "036519097a6e385e7cd77b34e6198b372abe7d42a067a2da3782b0be9f654fc2",
        "md5": "bd41b2701987c06ba09bcc503c62613d",
        "sha256": "413a1a8c023f6fc3d832e8ad45b050fd0cbccfe4f7db142eb25a837ef01892d6"
      },
      "downloads": -1,
      "filename": "PYBRDOC-1.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "bd41b2701987c06ba09bcc503c62613d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 16959,
      "upload_time": "2022-09-24T16:34:04",
      "upload_time_iso_8601": "2022-09-24T16:34:04.568328Z",
      "url": "https://files.pythonhosted.org/packages/03/65/19097a6e385e7cd77b34e6198b372abe7d42a067a2da3782b0be9f654fc2/PYBRDOC-1.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}