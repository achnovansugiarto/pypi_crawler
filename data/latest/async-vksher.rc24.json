{
  "info": {
    "author": "Kulenov Islam",
    "author_email": "kit.werr34@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "asyncVK – асинхронный фреймворк для создания ботов ВК. Преимущества: удобство, скорость выигрываемая за счёт асинхронности.\r\n=\r\n\r\nБот создаётся за счёт шести структурных единиц: \r\n1) Bot – это самая главная структурная единица. Это собственно сам бот, который подаёт ивенты     обработчикам.\r\n2) Handler – эта структурная единица отвечает за обработку ивентов. \r\n3) Dispatcher – эта структурная единица отвечает за взаимодействие с ВК (ответы на сообщения, добавление комментариев). Она автоматически настраивается хандлерами.\r\n4) Keyboard – это второстепенная структурная единица. Она отвечает за создание кнопок в ВК.\r\n5) Condition (Condition, And, Or) – эта структурная единица отвечает за условия. С помощью неё можно строить сложные условия для хандлеров.\r\n6) Chain - эта структурная единица позволяет создавать цепочки команд.\r\n\r\nКак работать с библиотекой? Легко и интуитивно понятно! Для начала нужно импортировать саму библиотеку и создать бота:\r\n```python\r\nfrom asyncVK import Handler, Bot, run_polling\r\nfrom asyncVK.dispatcher import Dispatcher\r\nfrom asyncVK.condition import Condition, And, Or\r\nimport asyncVK.keyboard as keyboard\r\n\r\n\r\nTOKEN = \"access_token\"\r\nGROUP_ID = 182801600\r\n\r\nbot = Bot(TOKEN, GROUP_ID)\r\n```\r\n\r\nТеперь мы можем запустить бота на `LongPoll API`:\r\n```python\r\nif __name__ == \"__main__\":\r\n    run_polling(bot)\r\n```\r\n\r\nСейчас бот запущен, но ни на что не реагирует. Чтобы это исправить нам нужно создать обработчик и добавить его в бота. Как это сделать? Вот так:\r\n```python\r\n@bot.handle\r\n@Handler.on.message_new(Condition(command=\"привет!\"), is_lower=True)\r\nasync def handler(dispatcher: Dispatcher): \r\n    await dispatcher.send_message(\"Hi!\")\r\n```\r\n\r\nВ примере выше мы создали обработчик новых сообщений с помощью декоратора `@Handler.on.message_new` и добавили его в бота с помощью декоратора `@bot.handle`.\r\nВместо декоратора `@bot.handle` можно конечно прописать `bot.handle(handler)`\r\n\r\nКак работают хандлеры (обработчики)? Когда мы засовываем экземпляр класса Bot в функцию `run_polling`, мы как бы активируем метод `bot.run_polling`. `bot.run_polling` это бесконечный цикл. В экземпляре класса Bot есть список всех хандлеров, которые мы создали и добавили в него. И когда приходит какой-то ивент (событие), то этот цикл пересылает это событие всем хандлерам. И потом если условие истинно, то активируется функция, из которой мы сделали хандлер.\r\n\r\nЧто делает эта асинхронная функция? Она на сообщение \"привет!\" (в любом регистре) будет отвечать в тот же чат сообщением \"Hi!\". Как сделать чтобы она ответила не в тот же чат, а в ЛС? Легко! Заменить \r\n```python\r\nawait dispatcher.send_message(\"Hi!\")\r\n```\r\nна\r\n```python\r\nawait dispatcher.answer(\"Hi!\")\r\n```\r\n\r\nКак строить условия? Какие условия можно построить? Строить условия легко, и можно построить абсолютно любые условия! Например мы хотим, чтобы бот отвечал на привет. В таком случае мы пишем:\r\n```python\r\nCondition(command=\"привет\")\r\n```\r\nИли мы хотим, чтобы бот отвечал на привет или если `peer_id` равен 2000000001. В таком случае мы пишем:\r\n```python\r\nCondition(command=\"привет\", peer_id=2000000001)\r\n```\r\nТо есть прописывая дополнительные условия в Condition, мы как бы делаем `if command == \"привет\" or peer_id == 2000000001`. Также можно аналогично прописать вот так:\r\n```python\r\nOr(Condition(command=\"привет\"), Condition(peer_id=2000000001))\r\n```\r\nНо лучше так не делать, лучше подобные условия прописывать без Or.\r\n\r\nА что если мы хотим, чтобы бот отвечал либо если ему написали \"привет\", либо если в сообщении есть строка \"а\" и написал это пользователь с id 386746383. Тоже легко! Вот так:\r\n```python\r\nOr(\r\n    Condition(command=\"привет\"),\r\n    And(Condition(contains_command=\"a\"), Condition(user_id=386746383))\r\n)\r\n```\r\n\r\nИ так, давайте разбирать как же строить так любые запросы. Если мы пропишем несколько аргументов в `Condition`, то это будет ИЛИ (or). Если же мы засунем несколько условий в `And`, то тут условие будет истинным если все условия в `And` истинны, то есть это И (and). Если же мы засунем несколько условий в `Or`, то условие будет истинным если истинно хотя бы одно условие в нём, то есть это ИЛИ (or). В `And` и `Or` можно засовывать как и `Condition`, так и другие `And` и `Or`.\r\nСтоит также заметить, что хандлер без условия будет срабатывать всегда, когда активируется нужное событие (то есть вне зависимости от условий, наверное потому что их нет) - `@Handler.on.message_new()`\r\n\r\nВот все аргументы Condition:\r\n\r\n    command – проверяет на равенство текста (если сообщение, то текста сообщения и т.д.) с этим аргументом.\r\n    contains_command – проверяет на то, есть ли строка contains_command в тексте.\r\n    user_id – проверяет на равенство id пользователя, инициировавшего событие, и этим аргументом.\r\n    peer_id – проверяет на равенство id чата с этим аргументом.\r\n    post_id – проверяет на равенство id записи на стене/id записи в обсуждениях с этим аргументом.\r\n    owner_id – проверяет на равенство id сообщества, где произошло событие (если событие было в сообществе).\r\n\r\nВот весь список хандлеров:\r\n\r\n    Handler.on.message_new – новое сообщение.\r\n    Handler.on.message_edit – редактирование сообщения.\r\n    Handler.on.wall_reply_new – новые комментарий на стене.\r\n    Handler.on.wall_reply_edit – редактирование комментария на стене.\r\n    Handler.on.wall_post_new – новый пост на стене.\r\n    Handler.on.board_post_new – новый комментарий в обсуждениях.\r\n    Handler.on.board_post_edit – редактирование комментария в обсуждениях.\r\n    \r\nСписки их аргументов абсолютно идентичны.\r\n\r\nВозможности диспетчера:\r\n\r\n    dispatcher.answer – ответить в ЛС. Можно активировать при любом событии, отправит сообщение инициатору события. Список аргументов: \r\n\t\ttext – текст сообщения.\r\n\t\tattachment – вложение сообщения (в виде части ссылки такого рода: \r\n\t\t    от ссылки https://vk.com/id386746383?z=photo386746383_457256628%2Falbum386746383_0 \r\n\t\t    берём только photo386746383_457256628 и передаём это в качестве аргумента). \r\n\t\tkeyboard – кнопки ВК.\r\n\t\t\r\n    dispatcher.send_message – ответить в том же чате. Список аргументов идентичен с answer.\r\n    dispatcher.send_comment – ответить в комментариях. Список аргументов идентичен с answer, но аргумент keyboard отсутствует.\r\n    dispatcher.mark_as_read – пометить сообщение как \"прочитанное\". Никаких аргументов не принимает.\r\n    dispatcher.set_typing_status – установить статус на набор текста / запись голосового сообщения. Принимает один аргумент: \r\n        typing_status. Его значение по умолчанию \"typing\" (набор текста). Можно изменить на \"audiomessage\" – запись голосового сообщения.\r\n\r\nКак создать кнопки? Тоже несложно! Вот пример:\r\n```python\r\n@bot.handle\r\n@Handler.on.message_new(Condition(contains_command=\"прив\"), is_lower=True)\r\nasync def handler(dispatcher: Dispatcher):\r\n    buttons = keyboard.get_keyboard([\r\n        [\r\n            (\"yes\", \"positive\"),\r\n            (\"no\", \"negative\")\r\n        ],\r\n        [\r\n            (\"hm...\", \"default\"),\r\n            (\"by default\", \"primary\"),\r\n            (\"never\", \"negative\")\r\n        ]\r\n    ])\r\n\r\n    await dispatcher.send_message(\"Содержит сообщение прив\", keyboard=buttons)\r\n```\r\n[Результат создания кнопок](https://sun9-26.userapi.com/impf/Y1M5ziV_GLiQxaALrdTlDkOB-Vdp0nSOKH2-gA/YT8LKOXmFkM.jpg?size=624x351&quality=96&proxy=1&sign=01e1486d2e40ac2ab494541773f16109&type=album)\r\n\r\nПо умолчанию кнопки создаются обычными и одноразовыми. Чтобы сделать их многоразовыми пропишите `one_time=False`, а если хотите сделать их инлайновыми, то пропишите `inline=True`. К примеру:\r\n```python\r\nbuttons = keyboard.get_keyboard([\r\n    [\r\n        (\"yes\", \"positive\"),\r\n        (\"no\", \"negative\")\r\n    ],\r\n    [\r\n        (\"hm...\", \"default\"),\r\n        (\"by default\", \"primary\"),\r\n        (\"never\", \"negative\")\r\n    ]\r\n], inline=True)\r\n```\r\nТогда эти кнопки будут в сообщении (инлайновыми).\r\n\r\nМожно строить любые запросы, даже если этого не предполагает отсутствие метода в диспетчере:\r\n```python\r\n@bot.handle\r\n@Handler.on.message_new(Condition(contains_command=\"прив\"), is_lower=True)\r\nasync def handler(dispatcher: Dispatcher):\r\n    result = await bot.execute(\"messages.send\", peer_id=dispatcher.peer_id, \r\n                               message=\"okay\", random_id=0)\r\n    print(result)\r\n```\r\nВ этом примере мы на новое сообщение, содержащее \"прив\" отвечаем \"okay\" нашим построенным запросом. `peer_id` же берём из диспетчера. Какие параметры можно высунуть из диспетчера? Можно высунуть: `token`, `user_id`, `peer_id`, `post_id` (если событие это новая запись на стене, новый комментарий на стене или в обсуждении), `owner_id` (если событие было внутри группы, то `owner_id` это id группы), `event` (объект, в котором содержится вся информация о событии) и `text` (если к примеру событие это новое сообщение, то `text` это текст сообщения, если это к примеру новый комментарий, то `text` это текст комментария и т.д.)\r\n\r\nЕсли вы хотите выполнить сразу несколько запросов асинхронно, то можно просто воспользовать библиотекой `asyncio`. К примеру:\r\n```python\r\n@bot.handle\r\n@Handler.on.message_new(Condition(contains_command=\"прив\"), is_lower=True)\r\nasync def handler(dispatcher: Dispatcher):\r\n    tasks = [asyncio.create_task(dispatcher.mark_as_read()),\r\n             asyncio.create_task(dispatcher.set_typing_status()),\r\n             asyncio.create_task(asyncio.sleep(9))]\r\n\r\n    await asyncio.gather(*tasks)\r\n    await dispatcher.send_message(\"okay\")\r\n\r\n\r\n@bot.handle\r\n@Handler.on.message_new(Condition(contains_command=\"а\"), is_lower=True)\r\nasync def handler(dispatcher: Dispatcher):\r\n    await dispatcher.send_message(\"Б!\")\r\n```\r\nХандлер, обрабатывающий сообщение, где есть строка \"прив\" сперва пометит сообщение как прочитанное, потом установит статус \"печатает…\" и через 9 секунд отправит сообщение \"okay\" и всё это асинхронно. \r\n> P.S. хандлеры друг друга не блокируют, так что во время работы первого хандлера вы можете написать \"а\" и бот ответит \"Б!\", несмотря на работу первого хандлера.\r\n\r\nПо-мимо этого можно делать хандлеры не для условий, а для всего события целиком. Например: \r\n```python\r\n@bot.handle\r\n@Handler.on(\"message_new\")\r\nasync def handler(dispatcher: Dispatcher):\r\n    if dispatcher.text.lower() == \"abs\":\r\n        await dispatcher.send_message(\"peer\")\r\n    elif dispatcher.text.lower() == \"help me\":\r\n        await dispatcher.send_message(\"no\")\r\n```\r\nЭтот хандлер будет обрабатывать все события типа `message_new`. В данном случае он на \"abs\" будет отвечать \"peer\", а на \"help me\" будет отвечать \"no\". И также регистр сообщения не важен, ибо мы применили метод `lower`. \r\n\r\nТак можно делать обработчики для любых событий. К примеру обработчик для новых комментариев:\r\n```python\r\n@bot.handle\r\n@Handler.on(\"wall_reply_new\")\r\nasync def handler(dispatcher: Dispatcher):\r\n    if dispatcher.text.lower() == \"nice\":\r\n        await dispatcher.send_comment(\"ok\")\r\n    elif dispatcher.text.lower() == \"not bad\":\r\n        await dispatcher.send_comment(\"no, very bad!\")\r\n```\r\n\r\nКакой обработчик использовать? Для условий или для всего события целиком? Если вам нужно сделать обработчик для простых команд (ответить на то этим и что-то в этом роде), то лучше все эти команды прописать в обработчике события, в данном случае это будет `@Handler.on(\"message_new\")` ведь нам нужно отвечать на сообщения. А если же команды сложные, а не простые ответы с какими-то дополнительными действиями, то лучше их прописать в обработчике условия. К примеру нам нужно, чтобы при сообщении \"статистика\" бот получил статистику откуда-то, рассортировал и отфильтровал её и потом отправил. Такое лучше прописывать в обработчике условия, в данном случае `@Handler.on.message_new(Condition(command=\"статистика\"))`\r\nНо нужно смотреть на код в целом, ибо иногда может пригодится сделать исключение и написать сложную команду в обработчик события, а простую в обработчик условия. То есть выбор должен зависеть от ситуации и структуры вашего кода.\r\n\r\nВ хандлерах и в самом боте не предусмотрена синхронизация. Поэтому если вы будете пользоваться асинхронной реализацией, к примеру какой-то базы-данных, будет состояние гонки. А пользоваться синхронными реализациями базы-данных плохая идея, это снизит скорость бота. Такая структура позволяет боту быть очень быстрым. Но в фреймворке есть реализация асинхронной базы-данных с синхронизацией, которой если вы будете правильно пользоваться, то состояния гонки не будет и бот будет оставаться таким же быстрым. Пример бота с этой реализацией бд:\r\n```python\r\nfrom asyncVK.asyncDB import SQLite\r\n```\r\n```python\r\ndb = SQLite(\"data.db\")\r\nbot = Bot(TOKEN, GROUP_ID)\r\n\r\n\r\n\r\nasync def create_db():\r\n    async with db:\r\n        await db.execute(\"\"\"\r\n            CREATE TABLE IF NOT EXISTS profile (\r\n                user_id INTEGER,\r\n                money INTEGER\r\n            )\r\n        \"\"\")\r\n\r\n\r\n@bot.handle\r\n@Handler.on(\"message_new\")\r\nasync def handler(dispatcher: Dispatcher):\r\n    if dispatcher.text.lower() == \"create db\" and dispatcher.user_id == OWNER_ID:\r\n        await create_db()\r\n        await dispatcher.send_message(\"db was created!\")\r\n\r\n    elif dispatcher.text.lower() == \"register\":\r\n        async with db:\r\n            await db.execute(\"\"\"\r\n                INSERT INTO profile \r\n                VALUES (?, 0)\r\n            \"\"\", (dispatcher.user_id,))\r\n\r\n        await dispatcher.send_message(\"you are was registered!\")\r\n\r\n\r\n@bot.handle\r\n@Handler.on.message_new(Condition(command=\"click\"), is_lower=True)\r\nasync def handler(dispatcher: Dispatcher):\r\n    async with db:\r\n        await db.execute(\"\"\"\r\n            UPDATE profile\r\n            SET money=money+1\r\n            WHERE user_id=(?)\r\n        \"\"\", (dispatcher.user_id,))\r\n\r\n        state = await db.execute(\"\"\"\r\n            SELECT money\r\n            FROM profile\r\n            WHERE user_id=(?)\r\n        \"\"\", (dispatcher.user_id,))\r\n\r\n    money = state[0][0]\r\n    await dispatcher.send_message(f\"Money: {money}\")\r\n```\r\n`OWNER_ID` это константа, которая должна ваш ID в ВК, это условие запрещает создавать база-данных кому-либо кроме вас командой. \r\nЧто делает `async with db`?. `async with db` ждёт пока база-данных откроется для запросов, потом закрывает базу-данных для запросов и как все ваши запросы прошли к базе, она опять открывает базу-данных для запросов. \r\nМетод `db.execute` отправляет ваш запрос к базе-данных.\r\n\r\nТакже можно использовать глобальные переменные с синхронизацией. Вот пример:\r\n```python\r\nfrom asyncVK.asyncDB import Variable\r\n\r\n\r\ntotal_money = Variable(0)\r\n\r\n\r\n@bot.handle\r\n@Handler.on.message_new(Condition(command=\"/click\"), is_lower=True)\r\nasync def handler(dispatcher: Dispatcher):\r\n    async with total_money:\r\n        total_money.object += 1\r\n        await dispatcher.send_message(\"Все деньги мира: \" + str(total_money.object))\r\n```\r\n\r\n\r\nВ фреймворке также присутствует встроенный функционал создания цепочек. Что такое цепочки? Это когда команда состоит из нескольких частей. То есть, к примеру, регистрация. Вы пишите `/регистрация` и бот далее просит вас ввести имя. И вы вводите своё имя и регистрация пройдена в 2 сообщения, то есть 2 части.\r\n\r\n```python\r\nfrom asyncVK.chain import Chain\r\n```\r\n\r\nТаким образом мы импортируем класс цепочек. Как создать цепочку? Всё просто. Вместо `bot.handle` используем `chain.add_handler`, а потом `bot.add_chain(chain)`.\r\n\r\nК примеру:\r\n```python\r\nchain = Chain()\r\n\r\n\r\n@chain.add_handle\r\n@Handler.on.message_new(Condition(contains_command=\"прив\"), is_lower=True)\r\nasync def handler_1(dispatcher: Dispatcher):\r\n    await dispatcher.send_message(\"Напиши что-то\")\r\n\r\n\r\n@chain.add_handle\r\n@Handler.on.message_new(Condition(contains_command=\"что-то\"), is_lower=True)\r\nasync def handler_2(dispatcher: Dispatcher):\r\n    await dispatcher.send_message(\"Пон\")\r\n    \r\n    \r\nbot.add_chain(chain)\r\n```\r\n\r\nИли:\r\n```python\r\nchain = Chain()\r\n\r\n\r\n@Handler.on.message_new(Condition(contains_command=\"прив\"), is_lower=True)\r\nasync def handler_1(dispatcher: Dispatcher):\r\n    await dispatcher.send_message(\"Напиши что-то\")\r\n\r\n\r\n@Handler.on.message_new(Condition(contains_command=\"что-то\"), is_lower=True)\r\nasync def handler_2(dispatcher: Dispatcher):\r\n    await dispatcher.send_message(\"Пон\")\r\n    \r\n    \r\nif __name__ == \"__main__\":\r\n    chain = Chain()\r\n    chain.add_handler(handler_1)\r\n    chain.add_handler(handler_2)\r\n    bot.add_chain(chain)\r\n\r\n    run_polling(bot)\r\n```\r\n\r\nТакже можно пробрасывать какие-то данные по цепочке:\r\n```python\r\nchain = Chain()\r\n\r\n\r\n@Handler.on.message_new(Condition(contains_command=\"прив\"), is_lower=True)\r\nasync def handler_1(dispatcher: Dispatcher):\r\n    await dispatcher.send_message(\"Напиши что-то\")\r\n    return 12\r\n\r\n\r\n@Handler.on.message_new(Condition(contains_command=\"что-то\"), is_lower=True)\r\nasync def handler_2(dispatcher: Dispatcher):\r\n    await dispatcher.send_message(f\"Пон {dispatcher.chain_data}\")\r\n    \r\n    \r\nif __name__ == \"__main__\":\r\n    chain = Chain()\r\n    chain.add_handler(handler_1)\r\n    chain.add_handler(handler_2)\r\n    bot.add_chain(chain)\r\n\r\n    run_polling(bot)\r\n```\r\n\r\nВ таком случае после `прив` бот ответит `Напиши что-то`, и если после этого вы сразу напишете `что-то`, то бот ответит `Пон 12`. Также напоминаю, что одновременно у одного пользователя может быть только одна активная цепочка. Если же две будут активироваться по одинаковому условию, то всё равно активна будет одна из них.\r\n\r\nТакже вместо произвольных данных в цепочке можно возвращать команды. В данном случае `Reject` - это полностью сбросить цепочку и `Reset` - текущий хандлер сработает ещё раз. При `Reset` ваш `chain_data` не сбрасывается.\r\n\r\nК примеру\r\n\r\n```python\r\nfrom asyncVK.chain import Chain, Reset\r\n\r\n\r\nchain = Chain()\r\n\r\n\r\n@Handler.on.message_new(Condition(contains_command=\"прив\"), is_lower=True)\r\nasync def handler_1(dispatcher: Dispatcher):\r\n    await dispatcher.send_message(\"Напиши что-то\")\r\n\r\n\r\n@Handler.on.message_new(is_lower=True)\r\nasync def handler_2(dispatcher: Dispatcher):\r\n    if dispatcher.text != \"что-то\":\r\n        await dispatcher.send_message(\"Я жду от тебя что-то\")\r\n\treturn Reset()\r\n    \r\n    await dispatcher.send_message(\"Пон\")\r\n    \r\n    \r\nif __name__ == \"__main__\":\r\n    chain = Chain()\r\n    chain.add_handler(handler_1)\r\n    chain.add_handler(handler_2)\r\n    bot.add_chain(chain)\r\n\r\n    run_polling(bot)\r\n```\r\nВо втором хандлере бот будет ждать от тебя слова что-то, и пока ты его не напишешь - он будет срабатывать снова и снова в этой цепочке.\r\n\r\n\r\nВесь код целиком для старта:\r\n```python\r\nfrom asyncVK import Handler, Bot, run_polling\r\nfrom asyncVK.dispatcher import Dispatcher\r\nfrom asyncVK.condition import Condition, And, Or\r\nimport asyncVK.keyboard as keyboard\r\n\r\n\r\nTOKEN = \"access_token\"\r\nGROUP_ID = 182801600\r\n\r\nbot = Bot(TOKEN, GROUP_ID)\r\n\r\n\r\n@bot.handle\r\n@Handler.on.message_new(Condition(contains_command=\"прив\"), is_lower=True)\r\nasync def handler(dispatcher: Dispatcher):\r\n    buttons = keyboard.get_keyboard([\r\n        [\r\n            (\"yes\", \"positive\"),\r\n            (\"no\", \"negative\")\r\n        ],\r\n        [\r\n            (\"hm...\", \"default\"),\r\n            (\"by default\", \"primary\"),\r\n            (\"never\", \"negative\")\r\n        ]\r\n    ], inline=True)\r\n\r\n    await dispatcher.send_message(\"Содержит сообщение прив\", keyboard=buttons)\r\n    result = await bot.execute(\"messages.send\", peer_id=dispatcher.peer_id, \r\n                               message=\"okay\", random_id=0)\r\n    print(result)\r\n    \r\n    \r\nif __name__ == \"__main__\":\r\n    run_polling(bot)\r\n```\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ekventor/asyncVK",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "async-VKsher",
    "package_url": "https://pypi.org/project/async-VKsher/",
    "platform": null,
    "project_url": "https://pypi.org/project/async-VKsher/",
    "project_urls": {
      "Homepage": "https://github.com/Ekventor/asyncVK"
    },
    "release_url": "https://pypi.org/project/async-VKsher/1.6.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "asyncVK is asynchronous library for creating a bot in VK",
    "version": "1.6.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14549986,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78586cca91997d1be1b06b4f55c2360a609f7712be820dbc930fdd99e1ec0732",
          "md5": "a28a4fe5c9106901fb8621a95d2ca551",
          "sha256": "f2ae057f60c560378b272c9909a6920b387d83813f93bd93311ce2b8562d32a5"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a28a4fe5c9106901fb8621a95d2ca551",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4934,
        "upload_time": "2021-02-04T08:54:51",
        "upload_time_iso_8601": "2021-02-04T08:54:51.242787Z",
        "url": "https://files.pythonhosted.org/packages/78/58/6cca91997d1be1b06b4f55c2360a609f7712be820dbc930fdd99e1ec0732/async_VKsher-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6190d070702624523b899f70ef84f289eea2c0446b4c3e20d67834e7bfcfab7a",
          "md5": "560e65e9dc38c293ddebe18c1f44c1d7",
          "sha256": "6ce96e5fa1348f3610e76db03a69db7a3cf10ab20ecff93aae76ba53f38d21c9"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "560e65e9dc38c293ddebe18c1f44c1d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3432,
        "upload_time": "2021-02-04T08:54:52",
        "upload_time_iso_8601": "2021-02-04T08:54:52.599335Z",
        "url": "https://files.pythonhosted.org/packages/61/90/d070702624523b899f70ef84f289eea2c0446b4c3e20d67834e7bfcfab7a/async_VKsher-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c92268197b541f88e05a2e0e9abb07db282910ac0e562d04b5a604feabc4a713",
          "md5": "c470c9e4d2590c5be46df59ea7409764",
          "sha256": "c4f2f42c20a321dfc42a6c5b6dd399922e69f77046b4a41f7bb14a123faa59a7"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c470c9e4d2590c5be46df59ea7409764",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5300,
        "upload_time": "2021-02-05T07:20:05",
        "upload_time_iso_8601": "2021-02-05T07:20:05.159749Z",
        "url": "https://files.pythonhosted.org/packages/c9/22/68197b541f88e05a2e0e9abb07db282910ac0e562d04b5a604feabc4a713/async_VKsher-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "261f056725d8c9f42f631405e13b2267b85a68f1850e36250cdb0b1481ae91b9",
          "md5": "c5d4aff32f681cf1d236d1f0f8180d6d",
          "sha256": "51f7aaab3c8f95ec388602fda7d964afbbef36f2aba7d7d9bdc635fd5a4265b7"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c5d4aff32f681cf1d236d1f0f8180d6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3606,
        "upload_time": "2021-02-05T07:20:06",
        "upload_time_iso_8601": "2021-02-05T07:20:06.467915Z",
        "url": "https://files.pythonhosted.org/packages/26/1f/056725d8c9f42f631405e13b2267b85a68f1850e36250cdb0b1481ae91b9/async_VKsher-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "585c19c5bcb1b086e18b4e49b7459aa01388c7fe84a342fe25aae9564f9307e6",
          "md5": "8fe2541cf60aa0aa51819ee77dd87d76",
          "sha256": "01434a4c562ac80dfd042ed3f3de3e736bed1da4fba3ea079f66f65a10f39fa5"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fe2541cf60aa0aa51819ee77dd87d76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5298,
        "upload_time": "2021-02-05T07:35:20",
        "upload_time_iso_8601": "2021-02-05T07:35:20.473951Z",
        "url": "https://files.pythonhosted.org/packages/58/5c/19c5bcb1b086e18b4e49b7459aa01388c7fe84a342fe25aae9564f9307e6/async_VKsher-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3383b830c5834c07373894f5bb15112ee2ed947bd086bcc9b1d21dbf8ce93114",
          "md5": "5de5013a97f9506918f59b692a3e83e8",
          "sha256": "7453cade07acae167ddd9b9742ed38401911b996af62635e3335c55a63c18daa"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5de5013a97f9506918f59b692a3e83e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3603,
        "upload_time": "2021-02-05T07:35:21",
        "upload_time_iso_8601": "2021-02-05T07:35:21.639415Z",
        "url": "https://files.pythonhosted.org/packages/33/83/b830c5834c07373894f5bb15112ee2ed947bd086bcc9b1d21dbf8ce93114/async_VKsher-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efbef96d0f04272eb23af3cd177afd95edf20f7c6e66d18351dab7e8a4376710",
          "md5": "9f959e26411cbbe35afd2209696ef264",
          "sha256": "336a8448c6e36a13d96dbfa88b00b1355500b9e2ebf628bd3b75df6eae71e0b4"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f959e26411cbbe35afd2209696ef264",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11091,
        "upload_time": "2021-02-05T09:43:00",
        "upload_time_iso_8601": "2021-02-05T09:43:00.639064Z",
        "url": "https://files.pythonhosted.org/packages/ef/be/f96d0f04272eb23af3cd177afd95edf20f7c6e66d18351dab7e8a4376710/async_VKsher-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22abed93e1809ba43749d5c306e26bf77dad0346dd8f5f9550c0d4f9d77c6efb",
          "md5": "f1e24eab9f117f50bd51bfeb3b5d863c",
          "sha256": "fef14324fa175ee1c29f2301edd03fa1ecba3224d44c06d270736eb7f3ee4827"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f1e24eab9f117f50bd51bfeb3b5d863c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15895,
        "upload_time": "2021-02-05T09:43:02",
        "upload_time_iso_8601": "2021-02-05T09:43:02.262314Z",
        "url": "https://files.pythonhosted.org/packages/22/ab/ed93e1809ba43749d5c306e26bf77dad0346dd8f5f9550c0d4f9d77c6efb/async_VKsher-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "518af89f8c72957b742166261ba34112df6b1b6da333f26a39387d3e46fa11d8",
          "md5": "667febcf327dee6a9c85cfb2d39b4662",
          "sha256": "4e8ea629b6a6d6e6252411f3b8b7844e6e74c406312a8e7a8fd76d4202f26233"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "667febcf327dee6a9c85cfb2d39b4662",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11085,
        "upload_time": "2021-02-15T11:35:13",
        "upload_time_iso_8601": "2021-02-15T11:35:13.195121Z",
        "url": "https://files.pythonhosted.org/packages/51/8a/f89f8c72957b742166261ba34112df6b1b6da333f26a39387d3e46fa11d8/async_VKsher-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f891f3be218c666a8f86bd0f4e84ddf5d531c099734891bc254b5a3a5cafda8f",
          "md5": "6052292ba6ea4ce5321379c6eadfc1a5",
          "sha256": "d2d5ae4a2ff84bc832614912f0a4de9c9c94fe9b288a1c891de973205974f78a"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6052292ba6ea4ce5321379c6eadfc1a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15905,
        "upload_time": "2021-02-15T11:35:14",
        "upload_time_iso_8601": "2021-02-15T11:35:14.680030Z",
        "url": "https://files.pythonhosted.org/packages/f8/91/f3be218c666a8f86bd0f4e84ddf5d531c099734891bc254b5a3a5cafda8f/async_VKsher-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38e260bdbdd63cd0e18cd67b5b4eb366405285f0695cd07db88e63552b340878",
          "md5": "87d85ee0b4559f0cf8956f9c71f233cf",
          "sha256": "de2c76b3a947798447f7698655e84bd63689cf795cc0a721881845a19ce75181"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87d85ee0b4559f0cf8956f9c71f233cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11131,
        "upload_time": "2021-02-15T12:12:57",
        "upload_time_iso_8601": "2021-02-15T12:12:57.484957Z",
        "url": "https://files.pythonhosted.org/packages/38/e2/60bdbdd63cd0e18cd67b5b4eb366405285f0695cd07db88e63552b340878/async_VKsher-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7133c17ecfc17276b8a9afe5c1d83dcacbc2b1b056fe5f53f8814321071cb6f",
          "md5": "f41ebda80b30c085ba7afee906f9f499",
          "sha256": "d9ab85240e5a87403cf398f42d2b671e3bf5c74dadfb4cb2b728c206a4bb7572"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f41ebda80b30c085ba7afee906f9f499",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15937,
        "upload_time": "2021-02-15T12:12:58",
        "upload_time_iso_8601": "2021-02-15T12:12:58.913865Z",
        "url": "https://files.pythonhosted.org/packages/d7/13/3c17ecfc17276b8a9afe5c1d83dcacbc2b1b056fe5f53f8814321071cb6f/async_VKsher-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f2ef36f57f3ea24b7eb16e59c59cc735cc3d2c166c41a67156b7ec8dfc716fc",
          "md5": "08f43564dddee871463cd7ef84cac6eb",
          "sha256": "e6efa424fa16e250b4f147d508545c2e71493d3f22d43a522bcd422cfb0a58f5"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08f43564dddee871463cd7ef84cac6eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11242,
        "upload_time": "2021-02-15T12:53:53",
        "upload_time_iso_8601": "2021-02-15T12:53:53.518576Z",
        "url": "https://files.pythonhosted.org/packages/4f/2e/f36f57f3ea24b7eb16e59c59cc735cc3d2c166c41a67156b7ec8dfc716fc/async_VKsher-1.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93b870657826f1d2b54357430ef42c4c3c98cda5d1ae55b5dbfca835064ade6a",
          "md5": "34d953dfe3452e8628702b2f8d911000",
          "sha256": "b193220445624719d7f398744496052550a148051907dfeac95adbaae8f5bc28"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "34d953dfe3452e8628702b2f8d911000",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16181,
        "upload_time": "2021-02-15T12:53:54",
        "upload_time_iso_8601": "2021-02-15T12:53:54.994295Z",
        "url": "https://files.pythonhosted.org/packages/93/b8/70657826f1d2b54357430ef42c4c3c98cda5d1ae55b5dbfca835064ade6a/async_VKsher-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bc9c0d3f9ccb7df6e79ba89f6d1f6fa0016da18ad6d63b4abfad1ef902c7421",
          "md5": "e674ae08045175e72612891502dfc07f",
          "sha256": "79fe749286a2c9207c03ba6eaf0ccd8554211cbe1d2d59b72c10a7e7dc3a86a8"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e674ae08045175e72612891502dfc07f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16388,
        "upload_time": "2021-12-11T21:12:01",
        "upload_time_iso_8601": "2021-12-11T21:12:01.617032Z",
        "url": "https://files.pythonhosted.org/packages/0b/c9/c0d3f9ccb7df6e79ba89f6d1f6fa0016da18ad6d63b4abfad1ef902c7421/async_VKsher-1.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1940b1b33ce3bf2280621d2bb88a7a8a784b2acebededc963af1f3418e232a34",
          "md5": "65ed884b4704bd6e4cb2b8f731127e2f",
          "sha256": "72339f6771884fdefaf7e1992142fc4dcbbe940a3151d0598d2fd999cc6e3274"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "65ed884b4704bd6e4cb2b8f731127e2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17112,
        "upload_time": "2021-12-12T10:25:59",
        "upload_time_iso_8601": "2021-12-12T10:25:59.010220Z",
        "url": "https://files.pythonhosted.org/packages/19/40/b1b33ce3bf2280621d2bb88a7a8a784b2acebededc963af1f3418e232a34/async_VKsher-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87e984e21060f3bdb9fdcf00417cf05975894b08ad0570abc4faf39b5802dbb2",
          "md5": "971ed600c2f005722e3fdf456a44dc5d",
          "sha256": "9d3bd9c5f704cf6f36212c0c9f6b879fe88f26a374848ae18a509a4e23398937"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "971ed600c2f005722e3fdf456a44dc5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17837,
        "upload_time": "2021-12-12T13:18:33",
        "upload_time_iso_8601": "2021-12-12T13:18:33.174214Z",
        "url": "https://files.pythonhosted.org/packages/87/e9/84e21060f3bdb9fdcf00417cf05975894b08ad0570abc4faf39b5802dbb2/async_VKsher-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f20d059ffa040d3dfacf36e236bfdab8ac36f6c2469b5958f897bbc49a34b60c",
          "md5": "58f2b906612071452f4602b2d5b1e76d",
          "sha256": "2a541f83d41abbac7f6587ded7c174bc372b4b51bff50527d0acfa8ab7188553"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "58f2b906612071452f4602b2d5b1e76d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17873,
        "upload_time": "2021-12-13T13:54:40",
        "upload_time_iso_8601": "2021-12-13T13:54:40.351455Z",
        "url": "https://files.pythonhosted.org/packages/f2/0d/059ffa040d3dfacf36e236bfdab8ac36f6c2469b5958f897bbc49a34b60c/async_VKsher-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfc667d4937cc27cb87cd4eab70de6cb8b71417cae0d3c1fb6cad92c9c081dbe",
          "md5": "4d106f138ce1154b879faf76c7d13a8c",
          "sha256": "94a2ffbf9ce5f9100972a284108592eab565af0351e97cb86dfd1cf6986e3bcd"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4d106f138ce1154b879faf76c7d13a8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17877,
        "upload_time": "2021-12-15T14:33:58",
        "upload_time_iso_8601": "2021-12-15T14:33:58.439870Z",
        "url": "https://files.pythonhosted.org/packages/bf/c6/67d4937cc27cb87cd4eab70de6cb8b71417cae0d3c1fb6cad92c9c081dbe/async_VKsher-1.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36fc71e2057ff5a5793df43acd74db7a23f54be7f8df5bc32d81c45acf903dcd",
          "md5": "aea99a8181c9fd4b6bfb834e3068d1b9",
          "sha256": "36574dac2af506e92e4d347c9040742012774402a9653598c5f8d3d19356b731"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "aea99a8181c9fd4b6bfb834e3068d1b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17890,
        "upload_time": "2021-12-15T15:12:49",
        "upload_time_iso_8601": "2021-12-15T15:12:49.065094Z",
        "url": "https://files.pythonhosted.org/packages/36/fc/71e2057ff5a5793df43acd74db7a23f54be7f8df5bc32d81c45acf903dcd/async_VKsher-1.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb6d96fff66c03dbca65ebe0688b4cdeb8d167dd6fba0e33a3ce864aa7ed7aaa",
          "md5": "f3d0ec90f48538d7906cfd209f2167e5",
          "sha256": "8af866c8fc245a35f89cb97af015a360da5079bb1acf654c58671c583ddb224e"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f3d0ec90f48538d7906cfd209f2167e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31219,
        "upload_time": "2022-07-25T13:48:57",
        "upload_time_iso_8601": "2022-07-25T13:48:57.979333Z",
        "url": "https://files.pythonhosted.org/packages/fb/6d/96fff66c03dbca65ebe0688b4cdeb8d167dd6fba0e33a3ce864aa7ed7aaa/async_VKsher-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25767ae2ce10141283285d310d8ac486f98b3270785631a10e250bd918c9455c",
          "md5": "9d9cf1ccfc6106de1ce39b0c5612b23f",
          "sha256": "032f443ad47d644e0bd607ee67a3478fb0e47422fe18263e3985091db890bc36"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9d9cf1ccfc6106de1ce39b0c5612b23f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31488,
        "upload_time": "2022-07-25T16:45:47",
        "upload_time_iso_8601": "2022-07-25T16:45:47.385506Z",
        "url": "https://files.pythonhosted.org/packages/25/76/7ae2ce10141283285d310d8ac486f98b3270785631a10e250bd918c9455c/async_VKsher-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38030f9eddd20fa30e134f806b059198dbb999118c291fb86e86986c4cd9c5ab",
          "md5": "2cfbb71c6f1b475d4e0aa26441a92f44",
          "sha256": "3e6a4e5a816f6b958f1b72a5fd9f276b21afd60d73d85c7dd6a6d384b1a99209"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2cfbb71c6f1b475d4e0aa26441a92f44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31485,
        "upload_time": "2022-07-25T16:49:04",
        "upload_time_iso_8601": "2022-07-25T16:49:04.833458Z",
        "url": "https://files.pythonhosted.org/packages/38/03/0f9eddd20fa30e134f806b059198dbb999118c291fb86e86986c4cd9c5ab/async_VKsher-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fdc0d2b68ce9ca6cefcb3d837e13088be169064c8ff96acdf6f759a2f347f7b",
          "md5": "dcab740386a83dcf3c1d3c9f2d5e5d73",
          "sha256": "4a21d0e5defa536fd1ad37d25fdc76b1c5d591d1a9ee24536a2946d972c6fdd0"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dcab740386a83dcf3c1d3c9f2d5e5d73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32185,
        "upload_time": "2022-07-25T19:54:07",
        "upload_time_iso_8601": "2022-07-25T19:54:07.402734Z",
        "url": "https://files.pythonhosted.org/packages/8f/dc/0d2b68ce9ca6cefcb3d837e13088be169064c8ff96acdf6f759a2f347f7b/async_VKsher-1.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee68b3989bc590c46afc6591bd2964e65c8148b47ac647b5c13eb3a39c578512",
          "md5": "8afc28016a66bb1014c9cc963fc258b9",
          "sha256": "f70bd9a2fbed45bd0ca7f2d2f75205f662572fc99f7fa3d312443aca1bc617d6"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8afc28016a66bb1014c9cc963fc258b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32227,
        "upload_time": "2022-07-25T20:01:28",
        "upload_time_iso_8601": "2022-07-25T20:01:28.045377Z",
        "url": "https://files.pythonhosted.org/packages/ee/68/b3989bc590c46afc6591bd2964e65c8148b47ac647b5c13eb3a39c578512/async_VKsher-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d25340672c96d3d0e14a859825341c3987173d98cf1e8ae9bddc5558350bad9",
          "md5": "dbcb2ebd18446700d58db3d86f3b7540",
          "sha256": "a9d60d127e443e351f6f56993155a2e7357e9fd780ea92a9f6ec8565ed119122"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dbcb2ebd18446700d58db3d86f3b7540",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32216,
        "upload_time": "2022-07-25T20:02:26",
        "upload_time_iso_8601": "2022-07-25T20:02:26.488038Z",
        "url": "https://files.pythonhosted.org/packages/1d/25/340672c96d3d0e14a859825341c3987173d98cf1e8ae9bddc5558350bad9/async_VKsher-1.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2aca47c61c3bf611cad5669bdf02a53a37f8aa9f96521128d04102afa6fad9a0",
          "md5": "2224693b6e97d16a8b41d5ecc6865a6e",
          "sha256": "5192c1162fbf762148f954be6f23f913be59e819fc6045c907bb6dbe20e5ce35"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2224693b6e97d16a8b41d5ecc6865a6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32222,
        "upload_time": "2022-07-25T20:03:58",
        "upload_time_iso_8601": "2022-07-25T20:03:58.789506Z",
        "url": "https://files.pythonhosted.org/packages/2a/ca/47c61c3bf611cad5669bdf02a53a37f8aa9f96521128d04102afa6fad9a0/async_VKsher-1.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8d90f29a6e51160ed15ae28e20d8f27cb739a3f2aab19d894949045f346300a",
          "md5": "0381c686372be1aee3ecdf42df68cebc",
          "sha256": "bbbbaf5885ee8389270092e8234066dcf40b240a6e151ca1ec4b16a11645b3d0"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0381c686372be1aee3ecdf42df68cebc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32237,
        "upload_time": "2022-07-25T20:06:18",
        "upload_time_iso_8601": "2022-07-25T20:06:18.658887Z",
        "url": "https://files.pythonhosted.org/packages/a8/d9/0f29a6e51160ed15ae28e20d8f27cb739a3f2aab19d894949045f346300a/async_VKsher-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "195c97a513539a52d3d951a091597eac9a037064e5b8c4a481d208433ef99502",
          "md5": "67a8d58bf5484a63b21516ae1c7d2001",
          "sha256": "340c9e663317cd18dfd8836ac2e06668e4cd9143b528cba18b0be9cf751776e5"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "67a8d58bf5484a63b21516ae1c7d2001",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32575,
        "upload_time": "2022-07-26T07:11:23",
        "upload_time_iso_8601": "2022-07-26T07:11:23.123143Z",
        "url": "https://files.pythonhosted.org/packages/19/5c/97a513539a52d3d951a091597eac9a037064e5b8c4a481d208433ef99502/async_VKsher-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "607c1781553a5413c240d0386ff027f975979053fc961fa5d515752d06779be5",
          "md5": "793be43461a7e2af9c4bf1ce599648f4",
          "sha256": "bb17ec83ec1a4090893dbb826f54ee84589833e07ac480334c285805192cda4f"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "793be43461a7e2af9c4bf1ce599648f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32561,
        "upload_time": "2022-07-26T07:13:43",
        "upload_time_iso_8601": "2022-07-26T07:13:43.396130Z",
        "url": "https://files.pythonhosted.org/packages/60/7c/1781553a5413c240d0386ff027f975979053fc961fa5d515752d06779be5/async_VKsher-1.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b287e665669c7a389e50d29f18511a3cb2906cf9a242e8d58f2a45ee858d0a3f",
          "md5": "0c841eb51c7d9d710ee9b7026ddba11a",
          "sha256": "1611f0144253826ea86fb5097f188ee87c31016b6484caf4329d7d8a053f01f6"
        },
        "downloads": -1,
        "filename": "async_VKsher-1.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0c841eb51c7d9d710ee9b7026ddba11a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32572,
        "upload_time": "2022-07-26T07:14:30",
        "upload_time_iso_8601": "2022-07-26T07:14:30.333549Z",
        "url": "https://files.pythonhosted.org/packages/b2/87/e665669c7a389e50d29f18511a3cb2906cf9a242e8d58f2a45ee858d0a3f/async_VKsher-1.6.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b287e665669c7a389e50d29f18511a3cb2906cf9a242e8d58f2a45ee858d0a3f",
        "md5": "0c841eb51c7d9d710ee9b7026ddba11a",
        "sha256": "1611f0144253826ea86fb5097f188ee87c31016b6484caf4329d7d8a053f01f6"
      },
      "downloads": -1,
      "filename": "async_VKsher-1.6.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0c841eb51c7d9d710ee9b7026ddba11a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32572,
      "upload_time": "2022-07-26T07:14:30",
      "upload_time_iso_8601": "2022-07-26T07:14:30.333549Z",
      "url": "https://files.pythonhosted.org/packages/b2/87/e665669c7a389e50d29f18511a3cb2906cf9a242e8d58f2a45ee858d0a3f/async_VKsher-1.6.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}