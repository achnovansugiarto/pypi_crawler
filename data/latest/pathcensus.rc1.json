{
  "info": {
    "author": "",
    "author_email": "Szymon Talaga <stalaga@protonmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "=============================\n``pathcensus`` package\n=============================\n\n.. image:: https://github.com/sztal/pathcensus/actions/workflows/tests.yml/badge.svg\n :target: https://github.com/sztal/pathcensus\n\n.. image:: https://codecov.io/gh/sztal/pathcensus/branch/master/graph/badge.svg?token=HP4hLAnagg\n :target: https://codecov.io/gh/sztal/pathcensus\n\n\nWelcome to the documentation of ``pathcensus`` package.\nIt is a Python (3.8+) implementation of **structural similarity and\ncomplementarity coefficients** for undirected (un)weighted networks based\non efficient counting of 2- and 3-paths (triples and quadruples)\nand 3- and 4-cycles (triangles and quadrangles).\n\n**Structural coefficients are graph-theoretic\nmeasures of the extent to which relations at different levels\n(of edges, nodes or entire networks) are driven by similarity or\ncomplementarity between different nodes**. Even though they are defined\nin purely combinatorial manner they are motivated by geometric arguments\nwhich link them to the family of latent space/random geometric graph models.\nIn particular, the geometric view allow the identification of network motifs\ncharactersitic for similarity (triangles) and complementarity (quadrangles).\nThey can be seen as a generalization of the well-known\nlocal and global clustering coefficients which summarize the structure\nof a network in terms of density of ego subgraph(s).\n\nEven though it is a Python package ``pathcensus`` is performant as its main\nworkhorse functions are just-in-time (JIT) compiled to efficient C code\nthanks to the `numba`_ library. It is compatible with `numpy`_\narrays and `scipy`_ sparse matrices making it easy to use in practice.\nMoreover, it allows registering graph classes implemented by different\nthird-party packages such as `networkx`_ so they can be converted\nautomatically to sparse matrices. Conversion methods for `networkx`_,\n`igraph`_ and `graph-tool`_ are registered automatically\nprovided the packages are installed.\n\n**NOTE**\n\n    ``pathcensus`` uses the ``A_{ij} = 1`` convention to indicate\n    that a node `i` sends a tie to a node `j`. Functions converting\n    graph-like objects to arrays / sparse matrices need to be aware\n    of that.\n\n**NOTE**\n\n    ``pathcensus`` is compatible only with Python versions supported\n    by `numba`_. In practice it means that it is compatible with all\n    versions (starting from 3.8) except for the latest one, which usually\n    starts to be supported by `numba`_ with some (often significant)\n    delay.\n\n\nFor the sake of convenience ``pathcensus`` also provides implementations\nof most appropriate null models for statistical calibration of structural\ncoefficients which are simple wrappers around the excellent `NEMtropy`_\npackage. It also defines the ``pathcensus.inference`` submodule with\nutility class for facilitating approximate statistical inference based on\nsampling from null models.\n\nSee ``examples`` subfolder and the main documentation for more details.\n\nAt the command line via pip:\n\n.. code-block::\n\n    # Install from PyPI\n    pip install pathcensus\n\nThe current development version (not guaranteed to be stable)\ncan be installed directly from the `github repo`_\n\n.. code-block::\n\n    pip install git+ssh://git@github.com/sztal/pathcensus.git\n\n\nHow to cite?\n============\n\nYou find the package useful? Please cite our work properly.\n\n**Main theory paper**\n\n    Talaga, S., & Nowak, A. (2022). Structural measures of similarity and complementarity\n    in complex networks. *Scientific Reports*, (in press).\n\n\nUsage\n=====\n\n**NOTE**\n\n    Main internal functions for calculating path census are JIT-compiled\n    when used for the first time. Thus, the first initialization of a\n    ``PathCensus`` object may be quite slow as its execution time will include\n    the time required for compilation. However, this happens only once.\n\nWe will use `igraph`_ to generate graphs used in examples. However, even though\nit is automatically integrated with ``pathcensus``, `igraph`_ is not\na dependency and needs to be installed separately.\n\n.. code-block:: python\n\n    # Main imports used in the examples below\n    import random\n    import numpy as np\n    import igraph as ig\n    from pathcensus import PathCensus\n\n    # Set random and numpy rng seeds\n    random.seed(303)\n    np.random.seed(101)\n\nMore detailed examples can be found in the official documentation.\n\n\nPath census & structural coefficients\n-------------------------------------\n\nPath census is a set of counts of different paths and cycles per edge, node\nor in the entire graph. The counts are subsequently used to calculate different\nkinds of structural coefficients.\n\n.. code-block:: python\n\n    # Generate simple undirected ER random graph\n    G = ig.Graph.Erdos_Renyi(100, p=.05, directed=False)\n    # Initialize path census object.\n    # it precomputed path/cycle counts at the level of edges.\n    # Other counts are derived from them.\n    P = PathCensus(G)\n\n    # Get edge-level census\n    P.census(\"edges\")\n    # Get node-level census\n    P.census(\"nodes\")   # or just P.census()\n    # Get global census\n    P.census(\"global\")\n\n    # Column definitions\n    ?P.definitions\n\nOnce path census is computed it can be used to calculate structural\ncoefficients.\n\n.. code-block:: python\n\n    # Similarity coefficients\n    P.tclust()     # triangle-clustering equivalent to local clustering coefficient\n    P.tclosure()   # triangle-closure equivalent to local closure coefficient\n    P.similarity() # structural similarity (weighted average of clustering and closure)\n\n    # Edge-wise similarity\n    P.similarity(\"edges\")\n    # Global similarity (equivalent to global clustering coefficient)\n    P.similarity(\"global\")\n\nThe figure below sums up the design of structural similarity coefficients,\ntheir geometric motivation and some of the main properties.\n\n.. image:: /docs/figures/sim.svg\n    :align: center\n\n\n.. code-block:: python\n\n    # Complementarity coefficients\n    P.qclust()          # quadrangle-based clustering\n    P.qclosure()        # quadrangle-based closure\n    P.complementarity() # structural complementarity (weighted average of clustering and closure)\n\n    # Edge-wise complementarity\n    P.complementarity(\"edges\")\n    # Global complementarity\n    P.complementarity(\"global\")\n\nThe figure below sums up the design and the geometric motivation of\ncomplementarity coefficients as well as their main properties.\n\n.. image:: /docs/figures/comp.svg\n    :align: center\n\nSimilarity and/or complementarity coefficients may be calculated in one\ngo using appropriate methods as shown below.\n\n.. code-block:: python\n\n    # Similarity + corresponding clustering and closure coefs\n    P.simcoefs()           # node-wise\n    P.simcoefs(\"global\")   # global\n\n    # Complementarity + corresponding clustering and closure coefs\n    P.compcoefs()          # node-wise\n    P.compcoefs(\"global\")  # global\n\n    # All coefficients\n    P.coefs()\n    # All coefficients + full path census\n    P.coefs(census=True)\n\n\nWeighted coefficients\n---------------------\n\nBelow we create an ER random graph with random integer edge weights\nbetween 1 and 10. As long as edge weights are assigned to an edge property\nof the standard name (``\"weight\"``) they should be detected automatically\nand ``pathcensus`` will calculate weighted census. However, unweighted census\nmay be enforced by using ``weighted=False``.\n\n.. code-block:: python\n\n    G = ig.Graph.Erdos_Renyi(100, p=0.05, directed=False)\n    G.es[\"weight\"] = np.random.randint(1, 11, G.ecount())\n\n    P = PathCensus(G)\n    P.weighted   # True\n    # Get all coefficients and full path census\n    P.coefs(census=True)\n\n    # Use unweighted census\n    P = PathCensus(G, weighted=False)\n    P.weighted   # False\n    P.coefs(census=True)\n\nBelow is the summary of the construction of weighted coefficients.\n\n.. image:: /docs/figures/weighted.svg\n    :align: center\n\n\nParallel ``PathCensus`` algorithm\n---------------------------------\n\n``PathCensus`` objects may be initialized using parallelized algorithms\nby using ``parallel=True``.\n\n**NOTE**\n\n    Parallel algorithms require an extra compilation step so the first\n    time ``parallel=True`` is used there will be a significant extra\n    overhead.\n\n**NOTE**\n\n    The ``parallel=True`` argument may not work and lead to segmentation\n    faults on some MacOS machines.\n\n.. code-block:: python\n\n    # By default all available threads are used\n    P = PathCensus(G, parallel=True)\n\n    # Use specific number of threads\n    P = PathCensus(G, parallel=True, num_threads=2)\n\n\nOther features\n==============\n\nOther main features of ``pathcensus`` are:\n\n#. Null models based on the ERGM family.\n#. Utilities for conducting statistical inference based on null models.\n#. Integration with arbitrary classes of graph-like objects.\n\nAll these features are documented in the official documentation.\n\n\nTesting\n=======\n\nThe repository with the package source code can be cloned easily\nfrom the `github repo`_.\n\n.. code-block::\n\n    git clone git@github.com:sztal/pathcensus.git\n\nIt is recommended to work within an isolated virtual environment.\nThis can be done easily for instance using `conda`_.\nRemember about using a proper Python version (i.e. 3.8+).\n\n.. code-block::\n\n    conda create --name my-env python=3.8\n    conda activate my-env\n\nAfter entering the directory in which ``pathcensus`` repository\nwas cloned it is enough to install the package locally.\n\n.. code-block:: bash\n\n    pip install .\n    # Or in developer/editable mode\n    pip install --editable .\n\nIn order to run tests it is necessary to install also test dependencies.\n\n.. code-block:: bash\n\n    pip install -r ./requirements-tests.txt\n    # Now tests can be run\n    pytest\n    # Or alternatively\n    make test\n    # And to run linter\n    make lint\n\nAnd similarly for building the documentation from source.\n\n.. code-block:: bash\n\n    pip install -r ./requirements-docs.txt\n    # Now documentation can be built\n    make docs\n\nTests targeting different Python versions can be run using `tox`_ test\nautomation framework. You may first need to install `tox`_\n(e.g. ``pip install tox``).\n\n.. code-block:: bash\n\n    make test-all\n    # Or alternatively\n    tox\n\nTest coverage\n-------------\n\nUnit test coverage report can be generated easily.\n\n.. code-block::\n\n    make coverage\n    # Report can be displayed again after running coverage\n    make cov-report\n\n\nFeedback\n========\n\nIf you have any suggestions or questions about **Path census** feel free to email me\nat stalaga@protonmail.com.\n\nIf you encounter any errors or problems with **Path census**, please let me know!\nOpen an Issue at the GitHub http://github.com/sztal/pathcensus main repository.\n\n\nAuthors\n=======\n\n* Szymon Talaga <stalaga@protonmail.com>\n\n\n\n.. _github repo: https://github.com/sztal/pathcensus\n.. _examples: https://github.com/sztal/pathcensus/tree/master/examples\n.. _conda: https://docs.conda.io/en/latest/\n.. _tox: https://tox.wiki/en/latest/\n.. _numpy: https://numpy.org/\n.. _scipy: https://scipy.org/\n.. _numba: https://numba.pydata.org/\n.. _networkx: https://networkx.org/\n.. _igraph: https://igraph.org/python/\n.. _graph-tool: https://graph-tool.skewed.de/\n.. _NEMtropy: https://pypi.org/project/NEMtropy/\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "networks,graphs,undirected,weighted,bipartite,network science,network geometry,triples,quadruples,triangles,quadrangles,path census,motifs,relational principles,homophily,similarity,complementarity,structural equivalence,random geometric graph,latent space model,exponential random graph,ergm",
    "license": "The MIT License (MIT) Copyright (c) 2021 Szymon Talaga Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pathcensus",
    "package_url": "https://pypi.org/project/pathcensus/",
    "platform": null,
    "project_url": "https://pypi.org/project/pathcensus/",
    "project_urls": {
      "changelog": "https://github.com/sztal/pathcensus/blob/master/HISTORY.rst",
      "documentation": "https://pathcensus.readthedocs.io/en/latest/",
      "repository": "https://github.com/sztal/pathcensus"
    },
    "release_url": "https://pypi.org/project/pathcensus/0.1/",
    "requires_dist": [
      "numpy (>=1.20)",
      "numba (>=0.50)",
      "scipy (>=1.7)",
      "pandas (>=1.3)",
      "statsmodels (>=0.12)",
      "NEMtropy (>=2.0)",
      "tqdm (>=4.62)",
      "Sphinx (>=4.3) ; extra == 'docs'",
      "sphinx-rtd-theme (>=1.0) ; extra == 'docs'",
      "sphinxcontrib-bibtex (>=2.4) ; extra == 'docs'",
      "ipython (>=7.26) ; extra == 'test'",
      "pylint (>=2.9) ; extra == 'test'",
      "pytest (>=6.2) ; extra == 'test'",
      "pytest-runner (>=5.3) ; extra == 'test'",
      "pytest-pylint (>=0.18) ; extra == 'test'",
      "pytest-cov (>=3.0.0) ; extra == 'test'",
      "python-igraph (>=0.9) ; extra == 'test'",
      "networkx (>=2.6) ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "Structural similarity and complementarity coefficients for undirected networks based on efficient counting",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15160089,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfa9bec761c63af101df2ab61fffd4f36a0444e981d12e9045acd530ab15faf8",
          "md5": "e43ea9012b6cab15b6a0519e47fa35d2",
          "sha256": "eb6099fd94b4403afde58adbdc502ee3f3637cfb2dc5a1a6e5b7f994069770c7"
        },
        "downloads": -1,
        "filename": "pathcensus-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e43ea9012b6cab15b6a0519e47fa35d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 44195,
        "upload_time": "2022-09-21T00:40:31",
        "upload_time_iso_8601": "2022-09-21T00:40:31.751997Z",
        "url": "https://files.pythonhosted.org/packages/cf/a9/bec761c63af101df2ab61fffd4f36a0444e981d12e9045acd530ab15faf8/pathcensus-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44a97f4f564151af2df6dad53434c6eb293861c2fa08e6b43220867f76bbab58",
          "md5": "59dba966b09c292d5c3b0703d1ca80f1",
          "sha256": "c31f02be18af6fa471f1addb534d2cbd0d58a2b51ff0b87e9f1a0b283b3cbf2f"
        },
        "downloads": -1,
        "filename": "pathcensus-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "59dba966b09c292d5c3b0703d1ca80f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 42061,
        "upload_time": "2022-09-21T00:40:35",
        "upload_time_iso_8601": "2022-09-21T00:40:35.255684Z",
        "url": "https://files.pythonhosted.org/packages/44/a9/7f4f564151af2df6dad53434c6eb293861c2fa08e6b43220867f76bbab58/pathcensus-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cfa9bec761c63af101df2ab61fffd4f36a0444e981d12e9045acd530ab15faf8",
        "md5": "e43ea9012b6cab15b6a0519e47fa35d2",
        "sha256": "eb6099fd94b4403afde58adbdc502ee3f3637cfb2dc5a1a6e5b7f994069770c7"
      },
      "downloads": -1,
      "filename": "pathcensus-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e43ea9012b6cab15b6a0519e47fa35d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 44195,
      "upload_time": "2022-09-21T00:40:31",
      "upload_time_iso_8601": "2022-09-21T00:40:31.751997Z",
      "url": "https://files.pythonhosted.org/packages/cf/a9/bec761c63af101df2ab61fffd4f36a0444e981d12e9045acd530ab15faf8/pathcensus-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "44a97f4f564151af2df6dad53434c6eb293861c2fa08e6b43220867f76bbab58",
        "md5": "59dba966b09c292d5c3b0703d1ca80f1",
        "sha256": "c31f02be18af6fa471f1addb534d2cbd0d58a2b51ff0b87e9f1a0b283b3cbf2f"
      },
      "downloads": -1,
      "filename": "pathcensus-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "59dba966b09c292d5c3b0703d1ca80f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 42061,
      "upload_time": "2022-09-21T00:40:35",
      "upload_time_iso_8601": "2022-09-21T00:40:35.255684Z",
      "url": "https://files.pythonhosted.org/packages/44/a9/7f4f564151af2df6dad53434c6eb293861c2fa08e6b43220867f76bbab58/pathcensus-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}