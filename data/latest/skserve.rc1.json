{
  "info": {
    "author": "Adam Michael Grbac",
    "author_email": "adam.grbac@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# skserve - A Flask API wrapper for deploying sklearn models\n\n#### Created by Adam Grbac.\n\nThis package uses Flask to create an easy frame to deploy existing Machine Learning models created in scikit-learn, and expose them via a RESTful API.\n\nThe main object of this package is the ModelServer class, which is a subclass of the Flask class, and can therefore be treated & customised the same way as a regular Flask server instance.\n\n### Usage\n\n#### Basic\n\nTo use this package, start by creating a scikit-learn model (or a model type that has a similar predict / predict_proba API to that of sklearn).\n\nOnce the model is trained, use the dump() function from the joblib module to save the model as a file.\n\nOne you have a model file that you would like to deploy e.g. A simple logistic regression model with 7 inputs - logreg.model, the following code is an example of a barebones deployment:\n\n```\nfrom skserve import ModelServer\nfrom joblib import load\n\nmodel = load('logreg.model')\n\napp = ModelServer(model=model)\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\nThis code will start a Flask API on 127.0.0.1:5000 with the following routes:\n\n* '/' : The root of the server will return a small welcome message and can be used to test connectivity.\n* '/help': The help route packages up and documentation supplied to the API i.e. An input data dictionary & any Docstrings that exist in the pre/post processing functions.\n* '/predict': The predict route invokes the predict method of the model being deployed by being sent a POST request. The request should include data as a JSON object with the feature names and values.\n* '/predict_proba': The predict_proba route invokes the predict_proba method of the model being deployed by being sent a POST request. The request should include data as a JSON object with the feature names and values.\n\nTo solicit a prediction from the model, we send a POST request to the /predict route with a JSON object as data, which contains the 7 required fields:\n\n```\ncurl -d {\"\"\"Age\"\"\":42,\"\"\"Fare\"\"\":52.00,\"\"\"Sex\"\"\":\"\"\"male\"\"\",\"\"\"Parch\"\"\":2,\"\"\"Pclass\"\"\":1,\"\"\"SibSp\"\"\":2} -H \"Content-Type: application/json\" 127.0.0.1:5000/predict\n```\n\n#### Advanced\n\nThe ModelServer class can also be initialised with other parameters:\n\n* pre : A preprocessing function which takes a pandas DataFrame of the data passed in with the POST request and should return a similar DataFrame that the model can accept.\n* post : A postprocessing function which takes the results of model scoring (a list) and will be returned as the \"scores\" element of a JSON object as a response to the initiating POST request.\n* data_dict : A dictionary that maps feature names to descriptions of the features. This dictionary is used as part of the /help route (for users information) as well as ordering the data for the model (so POST data does not need to be in order).\n\nThe Host and Port of the server can also be changed by passing host & port parameters to the run() function.\n\nAn example of the above extensions to the base functionality is shown below:\n\n```\nfrom skserve import ModelServer\nfrom joblib import load\n\nmodel = load('logreg.model')\n\ndata_dict = {\"Pclass\":\"Passenger Class\",\n            \"Age\":\"Passenger Age\",\n            \"Fare\":\"Fare Paid\",\n            \"Parch\":\"Parents / Children\",\n            \"SibSp\":\"Siblings\",\n            \"Sex\":\"Gender Code - 0: Male - 1: Female\"}\n\ndef pre_process(data):\n    \"\"\"Pre-Processor:\n\n    This should show up on the help page.\n\n\tThe function changes the string into a Binary value.\"\"\"\n    data[\"Sex\"] = data[\"Sex\"].apply(lambda x: 0 if x == \"male\" else 1)\n    return data\n\ndef post_process(data):\n    \"\"\"Post-Processer:\n\n    This should also show up on the help page.\n\n\tThis function takes the scores, and shifts from 0 <-> 1 to -1 <-> 1\"\"\"\n    return(data*2 - 1)\n\napp = ModelServer(model=model,\n                  pre=pre_process,\n                  post=post_process,\n                  data_dict=data_dict)\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0',port=1337)\n```\n\n\nThese changes will also make an impact on the page returned on the /help route e.g.:\n\n```\nSSSSS K   K SSSSS EEEEE RRRRR V   V EEEEE\nS     K  K  S     E     R   R V   V E\nSSSSS KKK   SSSSS EEEEE RRRRR V   V EEEEE\n    S K  K      S E     R RR   V V  E\nSSSSS K   K SSSSS EEEEE R   R   V   EEEEE\n\nThis model API can be used to predict outputs (Regression + Classification) or probabilities (Classification).\n\nThese are accessed by sending a POST request to <host>/predict or <host>/predict_proba respectively.\n\nThe input data should be a JSON object with the following fields:\n\nPclass: Passenger Class\nAge: Passenger Age\nFare: Fare Paid\nParch: Parents / Children\nSibSp: Siblings\nSex: Gender Code - 0: Male - 1: Female\n\nThe data sent will be pre-processed using a pre-defined function:\n\nPre-Processor:\n\n    This should show up on the help page\nThe model results will be post-processed using a pre-defined function:\n\nPost-Processer:\n\n    This should also show up on the help page\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamgrbac/skserve",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "skserve",
    "package_url": "https://pypi.org/project/skserve/",
    "platform": "",
    "project_url": "https://pypi.org/project/skserve/",
    "project_urls": {
      "Homepage": "https://github.com/adamgrbac/skserve"
    },
    "release_url": "https://pypi.org/project/skserve/0.11/",
    "requires_dist": [
      "sklearn",
      "flask",
      "pandas"
    ],
    "requires_python": "",
    "summary": "Flask-derived wrapper to serve sklearn models",
    "version": "0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8204284,
  "releases": {
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8eeceb8ec20af1ce152a0a145ee6c18e272a952565f74f2831d34425a1d4029",
          "md5": "7234326bad5df31297ae11ab4ddd3424",
          "sha256": "a724042ca0ce3c752c1fdb5d9d25c8006eed50db96c49048ac76d8b55906202d"
        },
        "downloads": -1,
        "filename": "skserve-0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7234326bad5df31297ae11ab4ddd3424",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6788,
        "upload_time": "2020-09-16T23:59:16",
        "upload_time_iso_8601": "2020-09-16T23:59:16.913413Z",
        "url": "https://files.pythonhosted.org/packages/c8/ee/ceb8ec20af1ce152a0a145ee6c18e272a952565f74f2831d34425a1d4029/skserve-0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "126580e0752f8010ea026a2b817218b77c28547123947bfec15886a2f39cc409",
          "md5": "020b4f6168376ebff28f5a57f077f248",
          "sha256": "c3b5bdcb1414d25744c8b13a41e73ed8aa2110d0a57717f94ef9968c07f141e2"
        },
        "downloads": -1,
        "filename": "skserve-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "020b4f6168376ebff28f5a57f077f248",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6235,
        "upload_time": "2020-09-16T23:59:18",
        "upload_time_iso_8601": "2020-09-16T23:59:18.917235Z",
        "url": "https://files.pythonhosted.org/packages/12/65/80e0752f8010ea026a2b817218b77c28547123947bfec15886a2f39cc409/skserve-0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8eeceb8ec20af1ce152a0a145ee6c18e272a952565f74f2831d34425a1d4029",
        "md5": "7234326bad5df31297ae11ab4ddd3424",
        "sha256": "a724042ca0ce3c752c1fdb5d9d25c8006eed50db96c49048ac76d8b55906202d"
      },
      "downloads": -1,
      "filename": "skserve-0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7234326bad5df31297ae11ab4ddd3424",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6788,
      "upload_time": "2020-09-16T23:59:16",
      "upload_time_iso_8601": "2020-09-16T23:59:16.913413Z",
      "url": "https://files.pythonhosted.org/packages/c8/ee/ceb8ec20af1ce152a0a145ee6c18e272a952565f74f2831d34425a1d4029/skserve-0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "126580e0752f8010ea026a2b817218b77c28547123947bfec15886a2f39cc409",
        "md5": "020b4f6168376ebff28f5a57f077f248",
        "sha256": "c3b5bdcb1414d25744c8b13a41e73ed8aa2110d0a57717f94ef9968c07f141e2"
      },
      "downloads": -1,
      "filename": "skserve-0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "020b4f6168376ebff28f5a57f077f248",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6235,
      "upload_time": "2020-09-16T23:59:18",
      "upload_time_iso_8601": "2020-09-16T23:59:18.917235Z",
      "url": "https://files.pythonhosted.org/packages/12/65/80e0752f8010ea026a2b817218b77c28547123947bfec15886a2f39cc409/skserve-0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}