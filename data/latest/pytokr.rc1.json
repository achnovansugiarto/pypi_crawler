{
  "info": {
    "author": "José Luis Balcázar",
    "author_email": "jose.luis.balcazar@upc.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pytokr\n\nVery simple, somewhat stoned tokenizer for teaching purposes.\n\nBehaviorally inspired by the early versions of the \n[easyinput module](https://github.com/jutge-org/easyinput); \nshares with it some similar aims, but not the aim of \nconceptual consistency with C/C++. Actually easyinput \nhas grown in ways I find inappropriate for many of my \nstudents and I want to try now a different road.\n\n## Install\n\nCurrent version is 0.0.2.\n\nTrying to get it pip-ready these days. If that does not\nwork, download or clone the repo, then put the pytokr\nfolder where Python can see it from wherever you want \nto use it.\n\n## Simplest usage\n\nFinds items (simple tokens white-space separated) in a \nstring-based iterable such as stdin (default). Ends of \nline are counted as white space but are otherwise ignored. Usage:\n\n`from pytokr import item, items`\n\n(or only one of them as convenient). Then `item()` will provide\nthe next item in `stdin` and `for w in items()` will iterate on\nwhatever remains there. Calling `item()` at end of file will\nraise an exception StopIteration. Note that, as white-space is \nignored, in case only white-space remains then the program *is* \nat end of file.\n\nBoth calls combine naturally: it is valid to call `item()` \nwithin a `for w in items()` loop provided there is still \nat least one item not yet read. The reading will advance \non and the next item in the loop will correspond to the \nadvance. Briefly: both advance *the same* iterator.\n\nAll items provided are of type `str` and will not contain \nwhite space; casting into `int` or `float` or whatever, if\nconvenient, falls upon the caller.\n\n## Example\n\nBased on [Jutge problem P29448](https://jutge.org/problems/P29448_en)\nCorrect Dates (and removing spoilers):\n\n    from pytokr import items, item\n    for d in items():\n        m, y = item(), item()\n        if correct_date(int(d), int(m), int(y)):\n            print(\"Correct Date\")\n        else:\n            print(\"Incorrect Date\")\n\n## Usage on other string-based iterables\n\n`from pytokr import make_tokr`\n\nThen, if `g` is an iterable of strings such as an open\nfile or a list of strings, the call\n\n`item, items = make_tokr(g)`\n\nwill provide adapted versions of `item` and `items` that\nwill read them in from `g` instead of from `stdin`.\n\n## To do: \n\n- As said, call to `item()` raises `StopIteration` on \nend of file; it will be a common error when mixing it \nwith `items()`. Consider catching it and raising instead \nan exception more understandable by beginners.\n\n- Automatize a process that generates a jutge-testable \nsource even if jutge does not have pytokr (or, alternatively,\nget it to have pytokr).\n\n- Sources in the 'deprecated/jutge-like' folder use \nobsolete identifiers; keep updating them and moving\nthem to 'jutge_like'.\n\n- I called initially the items 'toks' (for very simple \n'tokens') but that sounded a bit inappropriate to me, \nfirst, because of the simplicity of the case and, \nsecond, due to the early programming level of my \ntarget students. Calling them 'items' seems suboptimal \nthough, since we are going to study `dict`'s later on \nand then risk confusions. But I settled on 'items' for \nthe time being anyway; alternative suggestions welcome.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/balqui/pytokr",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytokr",
    "package_url": "https://pypi.org/project/pytokr/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytokr/",
    "project_urls": {
      "Bug Tracker": "https://github.com/balqui/pytokr/issues",
      "Homepage": "https://github.com/balqui/pytokr"
    },
    "release_url": "https://pypi.org/project/pytokr/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Very simple tokenizer for teaching purposes",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13417610,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2a99bcc76086f3353ae5c284d355ff036f02774450b0908443384ff6f22df82",
          "md5": "d2f56bf6748724702131772d2f07d964",
          "sha256": "d177434177166eac0c4d540777c662bf99454ebdea75d88210c4f5b189cc37e3"
        },
        "downloads": -1,
        "filename": "pytokr-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2f56bf6748724702131772d2f07d964",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4818,
        "upload_time": "2022-04-05T16:49:35",
        "upload_time_iso_8601": "2022-04-05T16:49:35.501223Z",
        "url": "https://files.pythonhosted.org/packages/d2/a9/9bcc76086f3353ae5c284d355ff036f02774450b0908443384ff6f22df82/pytokr-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b58f3d39c2848f7dbf3d967103d8d53fa6425baec48e6e3c787b0b7239e9d0a",
          "md5": "a8bdae8326f6bb4e207cd53549d2e05c",
          "sha256": "d5f4e754dce75f09c6b1de301307b0e07bc50d81e76ef1c5fb97d8a89fcf9742"
        },
        "downloads": -1,
        "filename": "pytokr-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a8bdae8326f6bb4e207cd53549d2e05c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4365,
        "upload_time": "2022-04-05T16:49:36",
        "upload_time_iso_8601": "2022-04-05T16:49:36.850777Z",
        "url": "https://files.pythonhosted.org/packages/1b/58/f3d39c2848f7dbf3d967103d8d53fa6425baec48e6e3c787b0b7239e9d0a/pytokr-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2a99bcc76086f3353ae5c284d355ff036f02774450b0908443384ff6f22df82",
        "md5": "d2f56bf6748724702131772d2f07d964",
        "sha256": "d177434177166eac0c4d540777c662bf99454ebdea75d88210c4f5b189cc37e3"
      },
      "downloads": -1,
      "filename": "pytokr-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d2f56bf6748724702131772d2f07d964",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4818,
      "upload_time": "2022-04-05T16:49:35",
      "upload_time_iso_8601": "2022-04-05T16:49:35.501223Z",
      "url": "https://files.pythonhosted.org/packages/d2/a9/9bcc76086f3353ae5c284d355ff036f02774450b0908443384ff6f22df82/pytokr-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b58f3d39c2848f7dbf3d967103d8d53fa6425baec48e6e3c787b0b7239e9d0a",
        "md5": "a8bdae8326f6bb4e207cd53549d2e05c",
        "sha256": "d5f4e754dce75f09c6b1de301307b0e07bc50d81e76ef1c5fb97d8a89fcf9742"
      },
      "downloads": -1,
      "filename": "pytokr-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a8bdae8326f6bb4e207cd53549d2e05c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4365,
      "upload_time": "2022-04-05T16:49:36",
      "upload_time_iso_8601": "2022-04-05T16:49:36.850777Z",
      "url": "https://files.pythonhosted.org/packages/1b/58/f3d39c2848f7dbf3d967103d8d53fa6425baec48e6e3c787b0b7239e9d0a/pytokr-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}