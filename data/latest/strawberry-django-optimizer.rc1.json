{
  "info": {
    "author": "OPTENDA GmbH",
    "author_email": "openda@steag.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# strawberry-django-optimizer\n\n[![PyPI version](https://img.shields.io/pypi/v/strawberry-django-optimizer.svg)](https://pypi.org/project/strawberry-django-optimizer/)\n![python version](https://img.shields.io/pypi/pyversions/strawberry-django-optimizer.svg)\n![django version](https://img.shields.io/pypi/djversions/strawberry-django-optimizer.svg)\n\nOptimize queries executed by [strawberry](https://github.com/strawberry-graphql/strawberry) automatically,\nusing [`select_related`](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#select-related)\n, [`prefetch_related`](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#prefetch-related)\nand [`only`](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#only) methods of Django QuerySet.\n\nThis package is heavily based on [graphene-django-optimizer](https://github.com/tfoxy/graphene-django-optimizer) which is intended for use with  [graphene-django](https://github.com/graphql-python/graphene-django).\n\n## Install\n\n```bash\npip install strawberry-django-optimizer\n```\n\n## Usage\n\nHaving the following models based on\nthe [strawberry-graphql-django](https://github.com/strawberry-graphql/strawberry-graphql-django) docs:\n\n```py\n# models.py\nfrom django.db import models\n\n\nclass Fruit(models.Model):\n    name = models.CharField(max_length=20)\n    color = models.ForeignKey('Color', blank=True, null=True,\n                              related_name='fruits', on_delete=models.CASCADE)\n\n\nclass Color(models.Model):\n    name = models.CharField(max_length=20)\n\n```\n\nAnd the following schema:\n\n```py\n# schema.py\nimport strawberry\nfrom typing import List\nfrom strawberry.django import auto\nfrom strawberry_django_optimizer import optimized_django_field\nfrom fruits import models\n\n\n@strawberry.django.type(models.Fruit)\nclass Fruit:\n    id: auto\n    name: auto\n    color: 'Color'\n\n\n@strawberry.django.type(models.Color)\nclass Color:\n    id: auto\n    name: auto\n    fruits: List[Fruit]\n\n\n@strawberry.type\nclass Query:\n    fruits: List[Fruit] = optimized_django_field()\n```\n\nThe following graphql query would cause n + 1 DB queries:\n\n```graphql\nquery Fruit {\n    fruits {\n        id\n        name\n        color {\n            id\n            name\n        }\n    }\n}\n```\n\nSince `optimized_django_field` was used instead of `strawberry.django.field` the queryset is automatically optimized.\n\n```py\n# optimized queryset:\nFruits.objects.select_related('color').only('id', 'name', 'color__id', 'color__name')\n```\n\nReverse `ForeignKey` relations also are automatically optimized with `prefetch_related`:\n```graphql\nquery Colors {\n    colors {\n        id\n        name\n        fruits {\n            id\n            name\n        }\n    }\n}\n```\n\n```py\n# optimized queryset:\nColor.objects.only('id', 'name', 'color').prefetch_related(\n    Prefetch('fruits', queryset=Fruit.objects.only('id', 'name'))\n)\n```\n\n## Advanced usage\n\nUse `resolver_hint` for cases where `only`, `select_related` and `prefetch_related` optimizations can't be inferred automatically.\nTo keep the `only` optimization when using custom resolver functions, `resolver_hints` must be used to declare all fields that are accessed\nor the `only` optimization will be disabled. \n```py\n# schema.py\nimport strawberry\nfrom strawberry.django import auto\nfrom strawberry_django_optimizer import resolver_hints\nfrom fruits import models\n\n\n@strawberry.django.type(models.Fruit)\nclass Fruit:\n    id: auto\n    \n    @resolver_hints(only=('name',))\n    @strawberry.field\n    def name_display(self) -> str:\n        return f'My name is: {self.name}'\n```\nIf the resolver function accesses a related field you can add an optimization hint for `select_related`:\n```py\n# schema.py\nimport strawberry\nfrom strawberry.django import auto\nfrom strawberry_django_optimizer import resolver_hints\nfrom fruits import models\n\n\n@strawberry.django.type(models.Fruit)\nclass Fruit:\n    id: auto\n    \n    @resolver_hints(\n        select_related=('color',),\n        only=('color__name',),\n    )\n    def color_display(self) -> str:\n        return f'My color is: {self.color.name}'\n\n```\n\n### Parameters for `resolver_hint`\n\n| Parameter          | Usage                                         |\n| ------------------ | --------------------------------------------- |\n| `model_field`      | If the resolver returns a model field         |\n| `only`             | Declare all fields that the resolver accesses |\n| `select_related`   | If the resolver uses related fields           |\n| `prefetch_reltaed` | If the resolver uses related fields           |\n\n## Known issues (ToDo)\n\n- Inline Fragments can't be optimized\n- Interfaces and Unions are not supported\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/energy-efficiency/strawberry-django-optimizer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "strawberry-django-optimizer",
    "package_url": "https://pypi.org/project/strawberry-django-optimizer/",
    "platform": "",
    "project_url": "https://pypi.org/project/strawberry-django-optimizer/",
    "project_urls": {
      "Bug Tracker": "https://github.com/energy-efficiency/strawberry-django-optimizer/issues",
      "Homepage": "https://github.com/energy-efficiency/strawberry-django-optimizer"
    },
    "release_url": "https://pypi.org/project/strawberry-django-optimizer/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Automatic query optimization for django and strawberry-graphql",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11551892,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4853cd8a88db9f06d20adaa4ac0dcc72949b4ce32492f906ec1371abc52c60f",
          "md5": "4f0c2dda397df84b914d7577eec3f3d9",
          "sha256": "915612a57b223afaa894f66f5fd44ee5a7c6fda4415955f41b1702f1a0aa034e"
        },
        "downloads": -1,
        "filename": "strawberry_django_optimizer-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f0c2dda397df84b914d7577eec3f3d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9660,
        "upload_time": "2021-09-26T09:33:23",
        "upload_time_iso_8601": "2021-09-26T09:33:23.333370Z",
        "url": "https://files.pythonhosted.org/packages/f4/85/3cd8a88db9f06d20adaa4ac0dcc72949b4ce32492f906ec1371abc52c60f/strawberry_django_optimizer-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93119aed8082514e64bb25b2276209ddb77c18ddf5e6bc92c20ab10d1819524a",
          "md5": "8c37ba59160c8863fc5131a9b21174a3",
          "sha256": "9f9af241ac778098fa42f56eb1b411adbcbd7d214e7c62bfb0a13c289b839171"
        },
        "downloads": -1,
        "filename": "strawberry-django-optimizer-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c37ba59160c8863fc5131a9b21174a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9366,
        "upload_time": "2021-09-26T09:33:24",
        "upload_time_iso_8601": "2021-09-26T09:33:24.884660Z",
        "url": "https://files.pythonhosted.org/packages/93/11/9aed8082514e64bb25b2276209ddb77c18ddf5e6bc92c20ab10d1819524a/strawberry-django-optimizer-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4853cd8a88db9f06d20adaa4ac0dcc72949b4ce32492f906ec1371abc52c60f",
        "md5": "4f0c2dda397df84b914d7577eec3f3d9",
        "sha256": "915612a57b223afaa894f66f5fd44ee5a7c6fda4415955f41b1702f1a0aa034e"
      },
      "downloads": -1,
      "filename": "strawberry_django_optimizer-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4f0c2dda397df84b914d7577eec3f3d9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9660,
      "upload_time": "2021-09-26T09:33:23",
      "upload_time_iso_8601": "2021-09-26T09:33:23.333370Z",
      "url": "https://files.pythonhosted.org/packages/f4/85/3cd8a88db9f06d20adaa4ac0dcc72949b4ce32492f906ec1371abc52c60f/strawberry_django_optimizer-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93119aed8082514e64bb25b2276209ddb77c18ddf5e6bc92c20ab10d1819524a",
        "md5": "8c37ba59160c8863fc5131a9b21174a3",
        "sha256": "9f9af241ac778098fa42f56eb1b411adbcbd7d214e7c62bfb0a13c289b839171"
      },
      "downloads": -1,
      "filename": "strawberry-django-optimizer-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8c37ba59160c8863fc5131a9b21174a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9366,
      "upload_time": "2021-09-26T09:33:24",
      "upload_time_iso_8601": "2021-09-26T09:33:24.884660Z",
      "url": "https://files.pythonhosted.org/packages/93/11/9aed8082514e64bb25b2276209ddb77c18ddf5e6bc92c20ab10d1819524a/strawberry-django-optimizer-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}