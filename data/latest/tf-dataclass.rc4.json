{
  "info": {
    "author": "Alexey Tochin",
    "author_email": "alexey.tochin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# tf-dataclass\n\nSupport python dataclass containers as input and output in callable TensorFlow 2 graph.\n\n## Install\nMake sure that ```tensorflow>=2.0.0``` or ```tensorflow-gpu>=2.0.0``` is installed.\n```bash\n$ pip install tf-dataclass\n```\n\n## Why\nTensorFlow 2 \n[autograph function](https://www.tensorflow.org/api_docs/python/tf/function)\nsupports only nested structures of python tuples as inputs and output.\n(Outputs can be also python dictionaries.)\nThis is inconvenient once we go beyond small hello world cases,\nbecause we have to work with unstructured armfuls of tensors.\nThis small package is dedicated to fill this gap by letting \n```@tf.function``` \ndecorated functions to take and return pythonic\n```dataclass``` \ninstancies. \n\n## Examples of usage:\n### 1. Sequential features\n\n```python\nimport tensorflow as tf\nimport tf_dataclass\n\n# Batch of sequential features of different length\n@tf_dataclass.dataclass\nclass Sequential:\n    feature: tf.Tensor  # shape = [batch, length, channels],    dtype = tf.float32\n    length: tf.Tensor   # shape = [batch],                      dtype = tf.int32\n\n# Initialize a batch of two sequences of lengths 6 and 4\ninput = Sequential(\n    feature = tf.random.normal(shape=[2, 6, 3]),\n    length = tf.constant([6, 4], dtype=tf.int32),\n)\n    \n# Define a convolution operator with a stride such that length -> length / stride\n@tf_dataclass.function\ndef convolution(input: Sequential, filters: tf.Tensor, stride: int) -> Sequential:\n    return Sequential(\n        feature = tf.nn.conv1d(input.feature, filters, stride),\n        length = tf.math.floordiv(input.length, stride),\n    )\n\n# Output is an instance of Sequential with lengths 3 and 2 due to convolution stride = 2\noutput = convolution(\n    input = input,\n    filters = tf.random.normal(shape=[1, 3, 7]),\n    stride = 2,\n)\nassert isinstance(output, Sequential)\nprint(output.length) # -> tf.Tensor([3 2], shape=(2,), dtype=int32)\n```\n\n### 2. Minibatch as a data transfer object:\n```python\nimport tensorflow as tf\nimport tf_dataclass\n\n@tf_dataclass.dataclass\nclass DataBatch:\n    image: tf.Tensor            # shape = [batch, height, width, channels], dtype = tf.flaot32\n    label: tf.Tensor            # shape = [batch],                          dtype = tf.int32\n    image_file_path: tf.Tensor  # shape = [batch],                          dtype = tf.string\n    dataset_name: tf.Tensor     # shape = [batch],                          dtype = tf.string\n    ...\n    \n@tf_dataclass.function\ndef train_step(input: DataBatch) -> None:\n    ...\n```\n\n### 3. Containerized outputs:\n```python\nimport tensorflow as tf\nimport tf_dataclass\n\n@tf_dataclass.dataclass\nclass ModelOutput:\n    loss_value: tf.Tensor   # shape = [batch],  dtype = tf.flaot32\n    label: tf.Tensor        # shape = [batch],  dtype = tf.int32\n    prediction: tf.Tensor   # shape = [batch],  dtype = tf.int32\n    ...\n    \n    @property\n    def mean_loss(self) -> tf.Tensor: # shape = [batch],  dtype = tf.float32\n        return tf.reduce_mean(self.loss_value)\n    \n    @property\n    def num_true_predictions(self) -> tf.Tensor: # shape = [batch],  dtype = tf.int32\n        return tf.reduce_sum(tf.cast(self.label == self.prediction, dtype=tf.int32))\n\n    @property\n    def num_false_predictions(self) -> tf.Tensor: # shape = [batch],  dtype = tf.int32\n        return tf.reduce_sum(tf.cast(self.label != self.prediction, dtype=tf.int32))\n\n    ...\n\n@tf_dataclass.function\ndef get_loss(...) -> ModelOutput:\n    ...\n```\nSuch containers can be merged along datasets and workers.\n\n### 4. Easy tensorflow shape and dtype runtime verification:\n```python\nimport tensorflow as tf\nimport tf_dataclass\n\n@tf_dataclass.dataclass\nclass Sequential:\n    feature: tf.Tensor  # shape = [batch, length, channels], dtype = tf.flaot32\n    length: tf.Tensor   # shape = [batch]                    dtype = tf.int32\n\n    def __post_init__(self):\n        # Verify feature\n        assert self.feature.dtype == tf.float32\n        assert len(self.feature.shape) == 3\n        \n        # Verify length\n        assert self.length.dtype == tf.int32\n        assert len(self.length.shape) == 1\n        \n        # Verify batch size\n        # Works only in eager mode for better perfomance  \n        assert self.feature.shape[0] == self.length.shape[0]\n\n    @property\n    def batch_size(self) -> tf.Tensor: # shape = [], dtype = tf.int32\n        return tf.shape(self.feature)[0]\n```\n\n## Other features:\n* Support hierarchical composition.\n* Support inheritance including multiple one (for free from original ```dataclass```).\n* Highliting, autocomplete, and refactoring from your IDE.\n\n## Usage\n1. Import ```dataclass``` and ```function``` from ```tf_dataclass```\n```python\nfrom tf_dataclasses import dataclass, function\n```\n2. <strong>It is mandatory to use return type hints for the function decorated with ```@function```.</strong>\nFor example,\n```python\nfrom typing import Tuple\n\n@dataclass\nclass MyDataclass:\n    ...\n\n@function\ndef my_func(...) -> Tuple[tf.Tensor, MyDataclass]:\n    ...\n    return some_tensor, my_dataclass_instance\n```\n3. Type hints for the arguments are optional but recommended.\n\n4. <strong>Positional arguments are not currently supported</strong>:\n\nFor example, for\n```python\n@function\ndef my_graph_func(x: ..., y: ...) -> ... :\n    ...\n```\ntype\n```python\nmy_graph_func(x=x, y=y)\n```\nbut not\n```python\nmy_graph_func(x, y)\n```\n\n## Known Problems\n1. IDE autocomplete is currently not well-supported, for example, in PyCharm. \nSolution: use import\n```python\nfrom typing import TYPE_CHECKING\nif TYPE_CHECKING:\n    from dataclasses import dataclass\nelse:\n    from tf_dataclass import dataclass\n```\nin each ```*.py``` file where ```dataclass``` is used.\n\n## Under the roof\nDataclasses and their nested structures are simply converted into nested pythonic tuples and back.\nThis way we wrap given functions such that all inputs and outputs are nested tuples.\nThen \n```@tf.function``` \nis applied. Afterward the graph function is wrapped bach to dataclass form.\nType hints are used in python runtime for the graph creation as temples to pack and unpack dataclass arguments. \n\n## Future plans\n1. Support ```tf.cond```, ```tf.case```, ```tf.switch_case```, ```tf.while_loop```, ```tf.Optional```, and \n```tf.data.Iterator```.\n2. Support positional arguments.\n3. Conversion to ```tf.nest``` structures.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alexeytochin/tf-dataclass",
    "keywords": "tensorflow,dataclass",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tf-dataclass",
    "package_url": "https://pypi.org/project/tf-dataclass/",
    "platform": null,
    "project_url": "https://pypi.org/project/tf-dataclass/",
    "project_urls": {
      "Homepage": "https://github.com/alexeytochin/tf-dataclass"
    },
    "release_url": "https://pypi.org/project/tf-dataclass/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Dataclasses for TensorFlow",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14731811,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4af0e7c4aed6dfe79606ad7345beea92dd3780e6a263d5d63aaa7acc6045a163",
          "md5": "1973242b2964ce0de2f826a24489da11",
          "sha256": "341caac052f4b274120e26b7ab0ba0b5b33db165dddf3704cf24a34dfd59c324"
        },
        "downloads": -1,
        "filename": "tf-dataclass-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1973242b2964ce0de2f826a24489da11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7270,
        "upload_time": "2021-06-29T19:14:32",
        "upload_time_iso_8601": "2021-06-29T19:14:32.394060Z",
        "url": "https://files.pythonhosted.org/packages/4a/f0/e7c4aed6dfe79606ad7345beea92dd3780e6a263d5d63aaa7acc6045a163/tf-dataclass-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62f5fde13a922a6c1b8843a43c67c6f5790d5ffe0943bacebc6b3d353765c91e",
          "md5": "aa00409f6004a568d4c38bb3e8565825",
          "sha256": "9bb646163467a7d8a73dc12dbbe0b0e9c1ad11eb3239776a7093b1c6589e5840"
        },
        "downloads": -1,
        "filename": "tf-dataclass-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aa00409f6004a568d4c38bb3e8565825",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10798,
        "upload_time": "2021-07-01T18:23:36",
        "upload_time_iso_8601": "2021-07-01T18:23:36.307213Z",
        "url": "https://files.pythonhosted.org/packages/62/f5/fde13a922a6c1b8843a43c67c6f5790d5ffe0943bacebc6b3d353765c91e/tf-dataclass-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "897f9428faa9fe0318ee1512c73d574d276a091ef21b2a33b714c8d7efbdb98a",
          "md5": "88690cfdc32b00eccdc478933f107eda",
          "sha256": "de90e261da348e73ddcfcc476eb777d8202be9daca665e416a8b20545c222f50"
        },
        "downloads": -1,
        "filename": "tf-dataclass-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "88690cfdc32b00eccdc478933f107eda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10359,
        "upload_time": "2021-08-01T20:12:59",
        "upload_time_iso_8601": "2021-08-01T20:12:59.349261Z",
        "url": "https://files.pythonhosted.org/packages/89/7f/9428faa9fe0318ee1512c73d574d276a091ef21b2a33b714c8d7efbdb98a/tf-dataclass-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d2f9c69697dda5e9d7ddb04bde9c97ead204bffbca6ba3f00ef94313139dd95",
          "md5": "62604cd77a4f902e67907a97123e39f6",
          "sha256": "f43da6163ef3ea433e89d32017ae9e2c3a4cfb32597d933c8bcd0adf674ee954"
        },
        "downloads": -1,
        "filename": "tf-dataclass-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "62604cd77a4f902e67907a97123e39f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12185,
        "upload_time": "2022-08-11T17:37:25",
        "upload_time_iso_8601": "2022-08-11T17:37:25.593111Z",
        "url": "https://files.pythonhosted.org/packages/0d/2f/9c69697dda5e9d7ddb04bde9c97ead204bffbca6ba3f00ef94313139dd95/tf-dataclass-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d2f9c69697dda5e9d7ddb04bde9c97ead204bffbca6ba3f00ef94313139dd95",
        "md5": "62604cd77a4f902e67907a97123e39f6",
        "sha256": "f43da6163ef3ea433e89d32017ae9e2c3a4cfb32597d933c8bcd0adf674ee954"
      },
      "downloads": -1,
      "filename": "tf-dataclass-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "62604cd77a4f902e67907a97123e39f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12185,
      "upload_time": "2022-08-11T17:37:25",
      "upload_time_iso_8601": "2022-08-11T17:37:25.593111Z",
      "url": "https://files.pythonhosted.org/packages/0d/2f/9c69697dda5e9d7ddb04bde9c97ead204bffbca6ba3f00ef94313139dd95/tf-dataclass-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}