{
  "info": {
    "author": "Meteosource",
    "author_email": "support@meteosource.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "pymeteosource - Weather API library\n==========\n\n[Meteosource weather API](https://www.meteosource.com) provides accurate global weather data - get real-time, forecast, and historical hyperlocal data.\n\nMeteosource weather forecasts are based on cutting-edge machine-learning models. The algorithms learn from historical data and forecasts from many [different models](https://www.meteosource.com/meteosource-technology), compare their data from different places and meteorological situations and create a single output to provide accurate hyperlocal weather forecasts anywhere in the world. Receive minute-by-minute rain forecast, detailed hour-by-hour weather forecast out to 7 days, and much more!\n\nUsing this python wrapper library, you can easily implement Meteosource JSON data into your app or service.\n\n\n### Installation\nThe basic functionality of this library only needs `requests` and `pytz` modules. To install it with the minimal requirements, use:\n\n```bash\npip3 install pymeteosource\n```\n\nThe library has also optional feature of exporting the data to `pandas` `DataFrame`. To use it, you will also need `pandas` package. You can either install `pandas` manually, or use:\n\n```bash\npip3 install pymeteosource[pandas]\n```\n\n### Get started\n\nTo use this library, you need to obtain your Meteosource API key. You can [sign up](https://www.meteosource.com/client/sign-up) or get the API key of existing account in [your dashboard](https://www.meteosource.com/client).\n\n\n### Tests\nThe unit tests are written using `pytest`. As the `pandas` exporting feature is also tested, you should have `pandas` library installed. You can install both of them using:\n```bash\npip3 install pytest\npip3 install pandas\n```\n\nThe tests only make 2 actual requests to live API, most of the tests use mocked API response. You need to provide your actual API key using environment variable. To run the tests, use:\n```bash\n# Change this to your actual API key\nexport METEOSOURCE_API_KEY='abcdefghijklmnopqrstuvwxyz0123456789ABCD'\npytest tests\n```\n\n\n# Library usage\n\n## Initialization\n\nTo initialize the `Meteosource` object, you need your API key and the name of your subscription plan (tier). Basic example of initialization is shown below:\n\n```python\nfrom datetime import datetime, timedelta\nfrom pymeteosource.api import Meteosource\nfrom pymeteosource.types import tiers\n\n# Change this to your actual API key\nYOUR_API_KEY = 'abcdefghijklmnopqrstuvwxyz0123456789ABCD'\n# Change this to your actual tier\nYOUR_TIER = tiers.FLEXI\n\n# Initialize the main Meteosource object\nmeteosource = Meteosource(YOUR_API_KEY, YOUR_TIER)\n```\n\n## Get the weather data\n\nUsing `pymeteosource`, you can get weather forecasts or archive weather data (if you have a paid subscription).\n\n### Forecast\nTo get the weather data for given place, use `get_point_forecast()` method of the `Meteosource` object. You have to specify either the coordinates of the place (`lat` + `lon`) or the `place_id`. Detailed description of the parameters can be found in the [API documentation](https://www.meteosource.com/documentation).\n\nNote that the default timezone is always `UTC`, as opposed to the API itself (which defaults to the point's local timezone). This is because the library always queries the API for the `UTC` timezone to avoid ambiguous datetimes problems. If you specify a different timezone, the library still requests the API for `UTC`, and then converts the datetimes to desired timezone.\n\nNote that all time strings from the API response are converted to timezone-aware `datetime` objects.\n\n```python\nfrom pymeteosource.types import sections, langs, units\n\n# Get the forecast for given point\nforecast = meteosource.get_point_forecast(\n    lat=37.7775,  # Latitude of the point\n    lon=-122.416389,  # Longitude of the point\n    place_id=None,  # You can specify place_id instead of lat+lon\n    sections=[sections.CURRENT, sections.HOURLY],  # Defaults to '(\"current\", \"hourly\")'\n    tz='US/Pacific',  # Defaults to 'UTC', regardless of the point location\n    lang=langs.ENGLISH,  # Defaults to 'en'\n    units=units.US  # Defaults to 'auto'\n)\n```\n\n### Historical weather\nUsers with paid subscription to Meteosource can retrieve historical weather and long-term statistics from `time_machine` endpoint, using `get_time_machine()` method:\n\n```python\n# Get the historical weather\ntime_machine = meteosource.get_time_machine(\n    date='2019-12-25',  # You can also pass list/tuple/set of dates, which can be 'str' or 'datetime' objects\n    date_from=None,  # You can specify the range for dates you need, instead of list\n    date_to=None,  # You can specify the range for dates you need, instead of list\n    place_id='london',  # ID of the place you want the historical weather for\n    lat=None,  # You can specify lat instead of place_id\n    lon=None,  # You can specify lon instead of place_id\n    tz='UTC',  # Defaults to 'UTC', regardless of the point location\n    units=units.US  # Defaults to 'auto'\n)\n```\nNote, that the historical weather data and long-term statistics are always retrieved for full UTC days. If you specify a different timezone, the datetimes get converted, but they will cover the full UTC, not the local day. If you specify a `datetime` to any of the date parameters, the hours, minutes, seconds and microseconds get ignored. So if you request `date='2021-12-25T23:59:59'`, you get data for full UTC day `2021-12-25`.\n\nIf you pass `list`/`tuple`/`set` of dates to `date` parameter, they days will be inserted into the inner structures in the order they are being iterated over. This affects time indexing by integer (see below). An API request is made for each day, even when you specify a date range.\n\n## Working with the weather data\nAll of the pymeteosource's data objects have overloaded `__repr__()` methods, so you can `print` the objects them to get useful information about them:\n```python\nprint(forecast)  # <Forecast for lat: 37.7775, lon: -122.416389>\nprint(time_machine)  # <TimeMachine for lat: 51.50853, lon: -0.12574>\n```\n\n### Attribute access\n\nThe library loads the JSON response into its internal structures. You can access the attributes using the dot operator (`.`), or the index operator (`[]`):\n\n```python\n# You can access all of the attributes with dot operator:\nforecast.lat  # 37.7775\n\n# ... or with index operator:\nforecast['lon']  # -122.416389\n\n# There is also information about the elevation of the point and the timezone\ntime_machine.elevation  # 82\ntime_machine.timezone  # 'UTC'\n```\n\n### Weather data sections\n\nThere are 5 weather forecast sections (`current`, `minutely`, `hourly`, `daily` and `alerts`) as attributes in the `Forecast` object.\n\nThe `current` data contains data for many variables for a single point in time (it is represented by `SingleTimeData` object):\n\n```python\n# <Instance of SingleTimeData (current) with 17 member variables (cloud_cover,\n#  dew_point, feels_like, humidity, icon, icon_num, irradiance, ozone,\n#  precipitation, pressure, summary, temperature, uv_index, visibility,\n#  wind, wind_chill)>\nprint(forecast.current)\n```\n\nThe `minutely`, `hourly` and `daily` sections contain forecasts for more points in time (represented by `MultipleTimesData`). The sections that were not requested are empty:\n```python\nprint(forecast.minutely)  # <Empty instance of MultipleTimesData>\nprint(forecast.daily)  # <Empty instance of MultipleTimesData>\n```\n\nThe sections that were requested can also be `print`ed, to view number of available timesteps and their range (inclusive):\n```python\n# <Instance of MultipleTimesData (hourly) with 164 timesteps\n#  from 2021-09-08T22:00:00 to 2021-09-15T17:00:00>\nprint(forecast.hourly)\n```\n\nThe `alerts` section contain meteorological alerts and warnings, if there are any issued for the location. The `alerts` object is an instance of `AlertsData` class. You can print the object or iterate over it:\n```python\nprint(forecast.alerts) # <Instance of AlertsData containing 4 alerts>\nfor alert in alerts:\n    # <Instance of SingleTimeData (alert) with 8 member variables\n    #  (certainty, description, event, expires, headline, onset, sender, severity)>\n    print(alert)\n```\nYou can also get list of all active alerts for given time. If you use `str` or tz-naive `datetime` in this function, it will suppose that it is in the same timezone as requested for the forecast.\n```python\n# If you pass no parameter, it checks for current time\nforecast.alerts.get_active_alerts() # returns list of SingleTimeData instances\n# You can use either string...\nforecast.alerts.get_active_alerts('2022-03-08T22:00:00')\n# ... or datetime (both tz-aware and naive)\nforecast.alerts.get_active_alerts(datetime(2022, 3, 8, 23, 0, 0))\n```\n\nThere are sections `data` and `statistics` for historical weather as attributes in the `TimeMachine` object, both represented by `MultipleTimesData`.\n```python\nprint(time_machine.data)  # <Instance of MultipleTimesData (time_machine) with 24 timesteps from 2019-12-25T00:00:00 to 2019-12-25T23:00:00>\nprint(time_machine.statistics)  # <Instance of MultipleTimesData (statistics) with 1 timesteps from 2019-12-25 to 2019-12-25>\n```\n\n### Time indexing\n\nAs mentioned above, the `minutely`, `hourly`, `daily` sections of `Forecast` and the `data` section of `TimeMachine` contain data for more timesteps. To get the data for a single time, you have several options.\n\n  **1. Indexing with integer**\n\nYou can simply index an instance of `MultipleTimesData` with `int`, as the offset from the current time:\n\n```python\nforecast.hourly[0]\ntime_machine.data[0]\n```\n\n  **2. Indexing with string**\n\nTo get the exact time, you can use `str` in `YYYY-MM-DDTHH:00:00` format. The datetime string is assumed to be in the same timezone as the data.\n```python\n# Get a date in near future for which there are data in the current API response\ncurrent_date = (datetime.now() + timedelta(hours=48)).strftime(\"%Y-%m-%dT%H:00:00\")\nforecast.hourly[current_date]\n\n# Get historical weather\ntime_machine.data['2019-12-25T03:00:00']\n```\n\n  **3. Indexing with `datetime`**\n\nYou can also use `datetime` as an index, both timezone naive and aware. If the object is naive, it is assumed to be in the same timezone as the data. If it is aware, it is automatically converted to the timezone of the data.\n\n```python\n# Get a date in near future for which there are data in the current API response\ncurrent_dt = datetime.strptime(current_date, \"%Y-%m-%dT%H:00:00\")\n\n# Index with naive datetime\nforecast.hourly[current_dt]\n\n# Index with aware datetime\nimport pytz\nforecast.hourly[pytz.utc.localize(current_dt)].temperature\n\n# Get historical weather\ntime_machine.data[datetime(2019, 12, 25, 3)]\n```\n\n\n### Variable access\n\nTo get the list of available variables, use `get_members` method:\n\n```python\nforecast.current.get_members()  # ['cloud_cover', 'dew_point', ..., 'wind_chill']\ntime_machine.data[0].get_members()  # ['cape', 'cloud_cover', ..., 'wind']\n```\n\nTo access the variable, you can use the dot operator (`.`), or the index operator (`[]`):\n```python\nforecast.current.temperature\nforecast.hourly[0]['temperature']\ntime_machine.data[0]['weather']  # cloudy\n```\n\nSome variables are grouped into logical groups, just like in the API response. You can access the actual data with chained dot or index operators:\n```python\nforecast.current.wind.get_members()  # ['angle', 'dir', 'gusts', 'speed']\nforecast.current.wind.speed\ntime_machine.data[0]['wind'].dir  # WNW\n```\n\n### Export to pandas\n\nIf you have `pandas` package installed, you can export any of the sections to `pandas` `DataFrame`. If you export the current data, you get a `DataFrame` with a single row (as there is only 1 timestep). If you export any other section, you get a row for each timestep.\n\nThe nested sections (for example `wind.angle`) are flattened, and the column names are created by concatenating them with `_`. So for example, instead of `wind.angle`, you get column named `wind_angle`.\n\nThe `day` (in the daily data) or `date` (in minutely and hourly data) is used as `pandas` `DateTimeIndex`.\n\n```python\ndf = forecast.hourly.to_pandas()\nprint(df)\n```\n\nFor historical weather data, you can also call the method on the `TimeMachine` object directly, so all following calls are valid:\n```python\ntime_machine.data.to_pandas()\ntime_machine.statistics.to_pandas()\ntime_machine.to_pandas()\n```\n\nYou can also merge the daily statistics and the hourly historical data into single `pandas` `DataFrame`. In this case, the daily statistics are duplicated into all hours of each day:\n```python\ntime_machine.to_pandas(include_statistics=True)\n```\n\n\n### Contact us\n\nYou can contact us [here](https://www.meteosource.com/contact).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Meteosource/pymeteosource/archive/v1.5.0.tar.gz",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymeteosource",
    "package_url": "https://pypi.org/project/pymeteosource/",
    "platform": null,
    "project_url": "https://pypi.org/project/pymeteosource/",
    "project_urls": {
      "Homepage": "https://github.com/Meteosource/pymeteosource/archive/v1.5.0.tar.gz"
    },
    "release_url": "https://pypi.org/project/pymeteosource/1.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Meteosource API wrapper library",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16854362,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "962b1fd713febfe44f8c5e805e3225bf57a268a60c90fc2a408b09d8143a30bd",
          "md5": "9fc0357c1e5a04d31f134ccef44a3495",
          "sha256": "8473787a3dbdf894bf3731f3ade20f9459330b9a9c548e1a5e8a699420ea4744"
        },
        "downloads": -1,
        "filename": "pymeteosource-0.0.1-py3.8.egg",
        "has_sig": false,
        "md5_digest": "9fc0357c1e5a04d31f134ccef44a3495",
        "packagetype": "bdist_egg",
        "python_version": "0.0.1",
        "requires_python": null,
        "size": 15655,
        "upload_time": "2021-09-15T13:34:31",
        "upload_time_iso_8601": "2021-09-15T13:34:31.808460Z",
        "url": "https://files.pythonhosted.org/packages/96/2b/1fd713febfe44f8c5e805e3225bf57a268a60c90fc2a408b09d8143a30bd/pymeteosource-0.0.1-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fd77d6fd1a1ee056cad1a8fe4f797ca312000a2d0335271b247f27c05a4a5bb",
          "md5": "c83ba3d7e3ffc6717b0216d497fafa4c",
          "sha256": "ee99c0122eb98f2eac45e2c55207de2c281aad7674875145b5c76addb7001afe"
        },
        "downloads": -1,
        "filename": "pymeteosource-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c83ba3d7e3ffc6717b0216d497fafa4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35758,
        "upload_time": "2021-09-15T13:41:47",
        "upload_time_iso_8601": "2021-09-15T13:41:47.942788Z",
        "url": "https://files.pythonhosted.org/packages/7f/d7/7d6fd1a1ee056cad1a8fe4f797ca312000a2d0335271b247f27c05a4a5bb/pymeteosource-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9793bf1597875082a5c0cfcfee4cfac64fd1f27392f8f2c894d165d55520c32a",
          "md5": "83e70938dac69c304544d0ca5fdfcc03",
          "sha256": "3006b98deb79c0340ce160efc9035be303af82e406cd1bbef3106f3412fcfaae"
        },
        "downloads": -1,
        "filename": "pymeteosource-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "83e70938dac69c304544d0ca5fdfcc03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40687,
        "upload_time": "2021-12-29T19:38:33",
        "upload_time_iso_8601": "2021-12-29T19:38:33.544918Z",
        "url": "https://files.pythonhosted.org/packages/97/93/bf1597875082a5c0cfcfee4cfac64fd1f27392f8f2c894d165d55520c32a/pymeteosource-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67b2288fac7248a563da042d3a22a1d63d88c2f5a2cc8db0e038f1b27ab60759",
          "md5": "2237196076ae0599a1187d27c0b199aa",
          "sha256": "5200a9d4e0199c49ba740151f658811d154cc0d0a14324c097c8a7e58d711611"
        },
        "downloads": -1,
        "filename": "pymeteosource-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2237196076ae0599a1187d27c0b199aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42281,
        "upload_time": "2022-03-18T10:12:54",
        "upload_time_iso_8601": "2022-03-18T10:12:54.544369Z",
        "url": "https://files.pythonhosted.org/packages/67/b2/288fac7248a563da042d3a22a1d63d88c2f5a2cc8db0e038f1b27ab60759/pymeteosource-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e19d6f9e63a6fd0c0fa26d3b464962dfa86464b8b24b1df7c33cd50d689deba6",
          "md5": "873e5d1ba5ae1dcf366006efe2298f7c",
          "sha256": "8830988a8195d75c26bec8dca46e12345ef91507aa1739bf1129f3c7774082f7"
        },
        "downloads": -1,
        "filename": "pymeteosource-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "873e5d1ba5ae1dcf366006efe2298f7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42359,
        "upload_time": "2022-05-20T09:17:54",
        "upload_time_iso_8601": "2022-05-20T09:17:54.531508Z",
        "url": "https://files.pythonhosted.org/packages/e1/9d/6f9e63a6fd0c0fa26d3b464962dfa86464b8b24b1df7c33cd50d689deba6/pymeteosource-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a94276540c0a262ed9cab08c115f6a366a5c39b7c5753eba4666fa07e398edc1",
          "md5": "416ddae180c8d0d65c47fe929417df31",
          "sha256": "f7463d01e0f7d71e4edba726386e6157441d35dc1beed13f6d2a7f99ce0322d3"
        },
        "downloads": -1,
        "filename": "pymeteosource-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "416ddae180c8d0d65c47fe929417df31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42485,
        "upload_time": "2022-09-27T07:54:17",
        "upload_time_iso_8601": "2022-09-27T07:54:17.068158Z",
        "url": "https://files.pythonhosted.org/packages/a9/42/76540c0a262ed9cab08c115f6a366a5c39b7c5753eba4666fa07e398edc1/pymeteosource-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b10214bef82c62bbde2314b225d35ad4b12893cd72b9ecf8c2556ae0bdcd3bad",
          "md5": "61b42ae4ba196292cd04bb26907d58ba",
          "sha256": "7507f68dcc0785bee8320b922b1173f3f030725dd2dc066ce9087fc80487da7a"
        },
        "downloads": -1,
        "filename": "pymeteosource-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61b42ae4ba196292cd04bb26907d58ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43088,
        "upload_time": "2022-10-27T12:04:25",
        "upload_time_iso_8601": "2022-10-27T12:04:25.462777Z",
        "url": "https://files.pythonhosted.org/packages/b1/02/14bef82c62bbde2314b225d35ad4b12893cd72b9ecf8c2556ae0bdcd3bad/pymeteosource-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "178c35880d9e77a4f904821696fb2bd1f986b75375d6746d5b2e8929b340fb08",
          "md5": "9ba1eddb6bbe9a90d22b61c456de5b7d",
          "sha256": "e0914654f8524d85def3534e8bfa6cf5328dcdeb3dbf7daa22fb5d034ec7b1ad"
        },
        "downloads": -1,
        "filename": "pymeteosource-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9ba1eddb6bbe9a90d22b61c456de5b7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47249,
        "upload_time": "2023-01-17T14:38:45",
        "upload_time_iso_8601": "2023-01-17T14:38:45.021476Z",
        "url": "https://files.pythonhosted.org/packages/17/8c/35880d9e77a4f904821696fb2bd1f986b75375d6746d5b2e8929b340fb08/pymeteosource-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63b99f96fc624b7f585631d4cf577c8c993d690832d32a4bb04a4b34394018ae",
          "md5": "8872a7b49f7eed59711269857c60be0b",
          "sha256": "a1af11b64da835c6a8c2a8f17a88c91dfc0714590e91cc6c039950f2c14b7687"
        },
        "downloads": -1,
        "filename": "pymeteosource-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8872a7b49f7eed59711269857c60be0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47690,
        "upload_time": "2023-01-17T15:04:12",
        "upload_time_iso_8601": "2023-01-17T15:04:12.505237Z",
        "url": "https://files.pythonhosted.org/packages/63/b9/9f96fc624b7f585631d4cf577c8c993d690832d32a4bb04a4b34394018ae/pymeteosource-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a82d1cc1d68baf9b416192efc7c8b1e4c6ae12c9bad2dfba24c3e2d3644e7daa",
          "md5": "cc8feb5544de943906fd0a9c2089157b",
          "sha256": "ec748ccaa5649c006ac85a728d18724ef89bd446de7891813b21bb9a7a7839f9"
        },
        "downloads": -1,
        "filename": "pymeteosource-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cc8feb5544de943906fd0a9c2089157b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48159,
        "upload_time": "2023-02-14T10:44:44",
        "upload_time_iso_8601": "2023-02-14T10:44:44.589638Z",
        "url": "https://files.pythonhosted.org/packages/a8/2d/1cc1d68baf9b416192efc7c8b1e4c6ae12c9bad2dfba24c3e2d3644e7daa/pymeteosource-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a82d1cc1d68baf9b416192efc7c8b1e4c6ae12c9bad2dfba24c3e2d3644e7daa",
        "md5": "cc8feb5544de943906fd0a9c2089157b",
        "sha256": "ec748ccaa5649c006ac85a728d18724ef89bd446de7891813b21bb9a7a7839f9"
      },
      "downloads": -1,
      "filename": "pymeteosource-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cc8feb5544de943906fd0a9c2089157b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 48159,
      "upload_time": "2023-02-14T10:44:44",
      "upload_time_iso_8601": "2023-02-14T10:44:44.589638Z",
      "url": "https://files.pythonhosted.org/packages/a8/2d/1cc1d68baf9b416192efc7c8b1e4c6ae12c9bad2dfba24c3e2d3644e7daa/pymeteosource-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}