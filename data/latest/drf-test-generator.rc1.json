{
  "info": {
    "author": "Maksudul Haque",
    "author_email": "saad.mk112@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# drf-test-generator\n\nThis is a Django Package that generates basic tests for Django REST Framework.\n\n# Features\n\n- Generates tests for all `ViewSets` in a Django REST Framework `router`\n- Generates tests for all custom `actions` in a `ViewSet`\n- Generates tests for all `HTTP` methods in a `ViewSet`\n- Supports test generation for both `pytest` and `unittest`\n\n# Installation\n\n```console\npip install drf-test-generator\n```\n\n# Setup\n\nAdd `drf_test_generator` to your `INSTALLED_APPS` in `settings.py`:\n\n```python\nINSTALLED_APPS = [\n    # ...\n    \"drf_test_generator\",\n]\n```\n\n**Note:** This is required for the Django Management Command. You can remove it from `INSTALLED_APPS` once you have generated the tests.\n\n# Generate Tests\n\n## Django Management Command\n\nYou can generate tests using the Django Management Command:\n\n```console\npython manage.py generate_viewset_tests -r api.urls.router\n```\n\n**Note:** Currently this package only supports test generation for ViewSets that are registered in a router.\n\n## Django Management Command Options\n\n### `-r` or `--router` (REQUIRED)\n\nThe dotted path to the REST framework url router. This is the router that contains the ViewSets you want to generate tests for.\n\n**Example:** `--router api.urls.router`\n\n### `--test-base-class`\n\nThe dotted path to the test base class. This is the class that your tests will inherit from. If not provided, the tests will inherit from `rest_framework.test.APITestCase`.\n\n**Example:** `--test-base-class tests.base.MyCustomTest`\n\n### `--namespace`\n\nThe namespace to use for the URLs (e.g: `api_v1:posts-list` ). If not provided, no namespace will be used.\n\n**Example:** `--namespace api_v1`\n\n### `--output-file`\n\nThe path to the output file. If not provided, the tests will be printed to the console.\n\n**Example:** `--output-file tests.py`\n\n### `--select-viewsets`\n\nA list of ViewSets to generate tests for. If not provided, tests will be generated for all ViewSets in the router.\n\n**Example:** `--select-viewsets PostViewSet CommentViewSet`\n\n### `--variant`\n\nThe test variant to generate. Options: `pytest`, `unittest`. If not provided, `unittest` will be used.\n\n**Example:** `--variant pytest`\n\n### `--pytest-markers`\n\nA list of pytest markers to add to the generated tests. If not provided, only the `@pytest.mark.django_db` marker will be added.\n\n**Example:** `--pytest-markers pytest.mark.ignore_template_errors pytest.mark.urls('myapp.test_urls')`\n\n### `--pytest-fixtures`\n\nA list of pytest fixtures to add to the generated tests. If not provided, only the `client` fixture will be added.\n\n**Example:** `--pytest-fixtures django_user_model`\n\n# Examples Usage\n\n## For the following code\n\n```python\n# api/views.py\nfrom rest_framework import viewsets\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\n\n\nclass PostViewSet(viewsets.ModelViewSet):\n    # ...\n    @action(detail=False, methods=[\"get\", \"post\"], url_path=\"custom-action\")\n    def custom_action(self, request):\n        return Response()\n\n    @action(detail=True, methods=[\"get\", \"options\", \"put\"], url_path=\"new-action\")\n    def custom_action2(self, request):\n        return Response()\n\n\n# api/urls.py\nfrom rest_framework import routers\n\nrouter = routers.DefaultRouter()\n\nrouter.register(\"posts\", PostViewSet, basename=\"post\")\n```\n\n## For Unittest\n\n**Run Command**\n\n```console\npython manage.py generate_viewset_tests -r api.urls.router\n```\n\n**Output**\n\n```python\nfrom django.urls import reverse\n\nfrom rest_framework import status\n\nfrom rest_framework.test import APITestCase\n\n\nclass PostViewSetTests(APITestCase):\n    def test_post_list_get(self):\n        url = reverse(\"post-list\")\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    def test_post_create_post(self):\n        url = reverse(\"post-list\")\n        response = self.client.post(url, data={})\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n\n    def test_post_custom_action_get(self):\n        url = reverse(\"post-custom-action\")\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    def test_post_custom_action_post(self):\n        url = reverse(\"post-custom-action\")\n        response = self.client.post(url, data={})\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n\n    def test_post_retrieve_get(self):\n        url = reverse(\"post-detail\", kwargs={\"pk\": None})\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    def test_post_update_put(self):\n        url = reverse(\"post-detail\", kwargs={\"pk\": None})\n        response = self.client.put(url, data={})\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    def test_post_partial_update_patch(self):\n        url = reverse(\"post-detail\", kwargs={\"pk\": None})\n        response = self.client.patch(url, data={})\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    def test_post_destroy_delete(self):\n        url = reverse(\"post-detail\", kwargs={\"pk\": None})\n        response = self.client.delete(url)\n        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n\n    def test_post_custom_action2_get(self):\n        url = reverse(\"post-custom-action2\", kwargs={\"pk\": None})\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    def test_post_custom_action2_options(self):\n        url = reverse(\"post-custom-action2\", kwargs={\"pk\": None})\n        response = self.client.options(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    def test_post_custom_action2_put(self):\n        url = reverse(\"post-custom-action2\", kwargs={\"pk\": None})\n        response = self.client.put(url, data={})\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n```\n\n## For Pytest\n\n**Run Command**\n\n```console\npython manage.py generate_viewset_tests -r api.urls.router --variant pytest\n```\n\n**Output**\n\n```python\nfrom django.urls import reverse\n\nfrom rest_framework import status\n\nimport pytest\n\n# PostViewSet Tests\n\n\n@pytest.mark.django_db\ndef test_post_list_get(client):\n    url = reverse(\"post-list\")\n    response = client.get(url)\n    assert response.status_code == status.HTTP_200_OK\n\n\n@pytest.mark.django_db\ndef test_post_create_post(client):\n    url = reverse(\"post-list\")\n    response = client.post(url, data={})\n    assert response.status_code == status.HTTP_201_CREATED\n\n\n@pytest.mark.django_db\ndef test_post_custom_action_get(client):\n    url = reverse(\"post-custom-action\")\n    response = client.get(url)\n    assert response.status_code == status.HTTP_200_OK\n\n\n@pytest.mark.django_db\ndef test_post_custom_action_post(client):\n    url = reverse(\"post-custom-action\")\n    response = client.post(url, data={})\n    assert response.status_code == status.HTTP_201_CREATED\n\n\n@pytest.mark.django_db\ndef test_post_retrieve_get(client):\n    url = reverse(\"post-detail\", kwargs={\"pk\": None})\n    response = client.get(url)\n    assert response.status_code == status.HTTP_200_OK\n\n\n@pytest.mark.django_db\ndef test_post_update_put(client):\n    url = reverse(\"post-detail\", kwargs={\"pk\": None})\n    response = client.put(url, data={})\n    assert response.status_code == status.HTTP_200_OK\n\n\n@pytest.mark.django_db\ndef test_post_partial_update_patch(client):\n    url = reverse(\"post-detail\", kwargs={\"pk\": None})\n    response = client.patch(url, data={})\n    assert response.status_code == status.HTTP_200_OK\n\n\n@pytest.mark.django_db\ndef test_post_destroy_delete(client):\n    url = reverse(\"post-detail\", kwargs={\"pk\": None})\n    response = client.delete(url)\n    assert response.status_code == status.HTTP_204_NO_CONTENT\n\n\n@pytest.mark.django_db\ndef test_post_custom_action2_get(client):\n    url = reverse(\"post-custom-action2\", kwargs={\"pk\": None})\n    response = client.get(url)\n    assert response.status_code == status.HTTP_200_OK\n\n\n@pytest.mark.django_db\ndef test_post_custom_action2_options(client):\n    url = reverse(\"post-custom-action2\", kwargs={\"pk\": None})\n    response = client.options(url)\n    assert response.status_code == status.HTTP_200_OK\n\n\n@pytest.mark.django_db\ndef test_post_custom_action2_put(client):\n    url = reverse(\"post-custom-action2\", kwargs={\"pk\": None})\n    response = client.put(url, data={})\n    assert response.status_code == status.HTTP_200_OK\n```\n\n# License\n\nThe code in this project is released under the [MIT License](LICENSE).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/saadmk11/drf-test-generator",
    "keywords": "Django,Django Rest Framework,Testing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-test-generator",
    "package_url": "https://pypi.org/project/drf-test-generator/",
    "platform": null,
    "project_url": "https://pypi.org/project/drf-test-generator/",
    "project_urls": {
      "Homepage": "https://github.com/saadmk11/drf-test-generator"
    },
    "release_url": "https://pypi.org/project/drf-test-generator/0.0.5/",
    "requires_dist": [
      "django (>=3.2)",
      "djangorestframework (>=3.12)"
    ],
    "requires_python": ">=3.7",
    "summary": "A Django app to generate basic tests for Django Rest Framework",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17225773,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23336d2bf366e1e329e9972bd0f16f4da395913cf19e644c35d9d9dab52fb755",
          "md5": "39ad15de23d3b7adbfa9cbb12a70ed6b",
          "sha256": "951d118356382f0c9647c2fdd5b7f556c51fbfc9a8e441e74c4a32da7811a779"
        },
        "downloads": -1,
        "filename": "drf_test_generator-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39ad15de23d3b7adbfa9cbb12a70ed6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8931,
        "upload_time": "2023-03-09T15:25:48",
        "upload_time_iso_8601": "2023-03-09T15:25:48.767051Z",
        "url": "https://files.pythonhosted.org/packages/23/33/6d2bf366e1e329e9972bd0f16f4da395913cf19e644c35d9d9dab52fb755/drf_test_generator-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8306b70e973c12eeb7e821f94a4c10e2f5271345094932557e6a7e3a4f35f8fa",
          "md5": "1bbbfed5fb33d4b6d3b7c2aa887a44ce",
          "sha256": "1c57043424d2fe62e10d456ebf5c88a12e4550422f73ebf183c3e329efe3adb2"
        },
        "downloads": -1,
        "filename": "drf-test-generator-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1bbbfed5fb33d4b6d3b7c2aa887a44ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11529,
        "upload_time": "2023-03-09T15:25:50",
        "upload_time_iso_8601": "2023-03-09T15:25:50.610347Z",
        "url": "https://files.pythonhosted.org/packages/83/06/b70e973c12eeb7e821f94a4c10e2f5271345094932557e6a7e3a4f35f8fa/drf-test-generator-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23336d2bf366e1e329e9972bd0f16f4da395913cf19e644c35d9d9dab52fb755",
        "md5": "39ad15de23d3b7adbfa9cbb12a70ed6b",
        "sha256": "951d118356382f0c9647c2fdd5b7f556c51fbfc9a8e441e74c4a32da7811a779"
      },
      "downloads": -1,
      "filename": "drf_test_generator-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "39ad15de23d3b7adbfa9cbb12a70ed6b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8931,
      "upload_time": "2023-03-09T15:25:48",
      "upload_time_iso_8601": "2023-03-09T15:25:48.767051Z",
      "url": "https://files.pythonhosted.org/packages/23/33/6d2bf366e1e329e9972bd0f16f4da395913cf19e644c35d9d9dab52fb755/drf_test_generator-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8306b70e973c12eeb7e821f94a4c10e2f5271345094932557e6a7e3a4f35f8fa",
        "md5": "1bbbfed5fb33d4b6d3b7c2aa887a44ce",
        "sha256": "1c57043424d2fe62e10d456ebf5c88a12e4550422f73ebf183c3e329efe3adb2"
      },
      "downloads": -1,
      "filename": "drf-test-generator-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "1bbbfed5fb33d4b6d3b7c2aa887a44ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11529,
      "upload_time": "2023-03-09T15:25:50",
      "upload_time_iso_8601": "2023-03-09T15:25:50.610347Z",
      "url": "https://files.pythonhosted.org/packages/83/06/b70e973c12eeb7e821f94a4c10e2f5271345094932557e6a7e3a4f35f8fa/drf-test-generator-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}