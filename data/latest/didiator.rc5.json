{
  "info": {
    "author": "SamWarden",
    "author_email": "SamWardenSad@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "========\nDidiator\n========\n\n``didiator`` is an asynchronous library that implements the Mediator pattern and\nuses the `DI <https://www.adriangb.com/di/>`_ library to help you to inject dependencies to called handlers\n\nThis library is inspired by the `MediatR <https://github.com/jbogard/MediatR>`_ used in C#,\nfollows CQRS principles and implements event publishing\n\nInstallation\n============\n\nDidiator is available on pypi: https://pypi.org/project/didiator\n\n.. code-block:: bash\n\n    pip install -U \"didiator[di]\"\n\nIt will install ``didiator`` with its optional DI dependency that is necessary to use ``DiMiddleware`` and ``DiBuilderImpl``\n\nExamples\n========\n\nYou can find more examples in `this folder <https://github.com/SamWarden/didiator/tree/dev/examples>`_\n\nCreate Commands and Queries with handlers for them\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    @dataclass\n    class CreateUser(Command[int]):\n        user_id: int\n        username: str\n\n    class CreateUserHandler(CommandHandler[CreateUser, int]):\n        def __init__(self, user_repo: UserRepo) -> None:\n            self._user_repo = user_repo\n\n        async def __call__(self, command: CreateUser) -> int:\n            user = User(id=command.user_id, username=command.username)\n            await self._user_repo.add_user(user)\n            await self._user_repo.commit()\n            return user.id\n\nYou can use functions as handlers\n\n.. code-block:: python\n\n    @dataclass\n    class GetUserById(Query[User]):\n        user_id: int\n\n    async def handle_get_user_by_id(query: GetUserById, user_repo: UserRepo) -> User:\n        user = await user_repo.get_user_by_id(query.user_id)\n        return user\n\nCreate DiBuilder\n~~~~~~~~~~~~~~~~\n\n``DiBuilderImpl`` is a facade for Container from DI with caching of `solving <https://www.adriangb.com/di/0.73.0/solving/>`_\n\n``di_scopes`` is a list with the order of `scopes <https://www.adriangb.com/di/0.73.0/scopes/>`_\n\n``di_builder.bind(...)`` will `bind <https://www.adriangb.com/di/0.73.0/binds/>`_ ``UserRepoImpl`` type to ``UserRepo`` protocol\n\n.. code-block:: python\n\n    di_scopes = [\"request\"]\n    di_builder = DiBuilderImpl(Container(), AsyncExecutor(), di_scopes)\n    di_builder.bind(bind_by_type(Dependent(UserRepoImpl, scope=\"request\"), UserRepo))\n\nCreate Mediator\n~~~~~~~~~~~~~~~\n\nCreate dispatchers with their middlewares and use them to initialize the ``MediatorImpl``\n\n``cls_scope`` is a scope that will be used to bind class Command/Query handlers initialized during request handling\n\n.. code-block:: python\n\n    middlewares = (LoggingMiddleware(), DiMiddleware(di_builder, scopes=DiScopes(\"request\")))\n    command_dispatcher = CommandDispatcherImpl(middlewares=middlewares)\n    query_dispatcher = QueryDispatcherImpl(middlewares=middlewares)\n\n    mediator = MediatorImpl(command_dispatcher, query_dispatcher)\n\nRegister handlers\n~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    # CreateUserHandler is not initialized during registration\n    mediator.register_command_handler(CreateUser, CreateUserHandler)\n    mediator.register_query_handler(GetUserById, handle_get_user_by_id)\n\nMain usage\n~~~~~~~~~~\n\nEnter the ``\"request\"`` scope that was registered earlier and create a new Mediator with ``di_state`` bound\n\nUse ``mediator.send(...)`` for commands and ``mediator.query(...)`` for queries\n\n.. code-block:: python\n\n        async with di_builder.enter_scope(\"request\") as di_state:\n            scoped_mediator = mediator.bind(di_state=di_state)\n\n            # It will call CreateUserHandler(UserRepoImpl()).__call__(command)\n            # UserRepoImpl() created and injected automatically\n            user_id = await scoped_mediator.send(CreateUser(1, \"Jon\"))\n\n            # It will call handle_get_user_by_id(query, user_repo)\n            # UserRepoImpl created earlier will be reused in this scope\n            user = await scoped_mediator.query(GetUserById(user_id))\n            print(\"User:\",  user)\n        # Session of UserRepoImpl will be closed after exiting the \"request\" scope\n\nEvents publishing\n~~~~~~~~~~~~~~~~~\n\nYou can register and publish events using ``Mediator`` and its ``EventObserver``.\nUnlike dispatchers, ``EventObserver`` publishes events to multiple event handlers subscribed to it\nand doesn't return their result.\nAll middlewares also work with ``EventObserver``, as in in the case with Dispatchers.\n\nDefine event and its handlers\n-----------------------------\n\n.. code-block:: python\n\n    class UserCreated(Event):\n        user_id: int\n        username: str\n\n    async def on_user_created1(event: UserCreated, logger: Logger) -> None:\n        logger.info(\"User created1: id=%s,  username=%s\", event.user_id, event.username)\n\n    async def on_user_created2(event: UserCreated, logger: Logger) -> None:\n        logger.info(\"User created2: id=%s,  username=%s\", event.user_id, event.username)\n\nCreate EventObserver and use it for Mediator\n--------------------------------------------\n\n.. code-block:: python\n\n    middlewares = (LoggingMiddleware(), DiMiddleware(di_builder, scopes=DiScopes(\"request\")))\n    event_observer = EventObserver(middlewares=middlewares)\n\n    mediator = MediatorImpl(command_dispatcher, query_dispatcher, event_observer)\n\nRegister event handlers\n-----------------------\n\nYou can register multiple event handlers for one event\n\n.. code-block:: python\n\n    mediator.register_event_handler(UserCreated, on_user_created1)\n    mediator.register_event_handler(UserCreated, on_user_created2)\n\nPublish event\n-------------\n\nEvent handlers will be executed sequentially\n\n.. code-block:: python\n\n    await mediator.publish(UserCreated(1, \"Jon\"))\n    # User created1: id=1,  username=\"Jon\"\n    # User created2: id=1,  username=\"Jon\"\n\n    await mediator.publish([UserCreated(2, \"Sam\"), UserCreated(3, \"Nick\")])\n    # User created1: id=2,  username=\"Sam\"\n    # User created2: id=2,  username=\"Sam\"\n    # User created1: id=3,  username=\"Nick\"\n    # User created2: id=3,  username=\"Nick\"\n\n⚠️ **Attention: this is a beta version of** ``didiator`` **that depends on** ``DI``, **which is also in beta. Both of them can change their API!**\n\nCQRS\n====\n\nCQRS stands for \"`Command Query Responsibility Segregation <https://www.martinfowler.com/bliki/CQRS.html>`_\".\nIts idea about splitting the responsibility of commands (writing) and queries (reading) into different models.\n\n``didiator`` have segregated ``.send(command)``, ``.query(query)`` and ``.publish(events)`` methods in its ``Mediator`` and\nassumes that you will separate its handlers.\nUse ``CommandMediator``, ``QueryMediator`` and ``EventMediator`` protocols to explicitly define which method you need in ``YourController``\n\n.. code-block:: mermaid\n\n    graph LR;\n        YourController-- Query -->Mediator;\n        YourController-- Command -->Mediator;\n        Mediator-. Query .->QueryDispatcher-.->di2[DiMiddleware]-.->QueryHandler;\n        Mediator-. Command .->CommandDispatcher-.->di1[DiMiddleware]-.->CommandHandler;\n        CommandHandler-- Event -->Mediator;\n        Mediator-. Event .->EventObserver-.->di3[DiMiddleware]-.->EventHandler1;\n        EventObserver-.->di4[DiMiddleware]-.->EventHandler2;\n\n``DiMiddleware`` initializes handlers and injects dependencies for them, you can just send a command with the data you need\n\nWhy ``didiator``?\n=================\n\n- Easy dependency injection to your business logic\n- Separating dependencies from your controllers. They can just parse external requests and interact with the ``Mediator``\n- CQRS\n- Event publishing\n- Flexible configuration\n- Middlewares support\n\nWhy not?\n========\n\n- You don't need it\n- Maybe too low coupling: navigation becomes more difficult\n- Didiator is in beta now\n- No support for synchronous handlers\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SamWarden/didiator",
    "keywords": "didiator,mediatr,mediator,CQRS,DI,events,ioc",
    "license": "MIT",
    "maintainer": "SamWarden",
    "maintainer_email": "SamWardenSad@gmail.com",
    "name": "didiator",
    "package_url": "https://pypi.org/project/didiator/",
    "platform": null,
    "project_url": "https://pypi.org/project/didiator/",
    "project_urls": {
      "Bug Tracker": "https://github.com/SamWarden/didiator/issues",
      "Homepage": "https://github.com/SamWarden/didiator",
      "Repository": "https://github.com/SamWarden/didiator"
    },
    "release_url": "https://pypi.org/project/didiator/0.3.1/",
    "requires_dist": [
      "di[anyio] (>=0.75.0,<0.76.0) ; extra == \"di\""
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "A library that implements the Mediator pattern and uses DI library",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16626488,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "646b32e9baee2149ec29ecda0100ed54664581ac884c9b17ccb0e763454a3946",
          "md5": "7717ddc09b0b102c95bdeb8f6c14eec9",
          "sha256": "954e50a628476a5a8d3cb2f82543d3ff5172c6d1f200c4616a9438d7af872b11"
        },
        "downloads": -1,
        "filename": "didiator-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7717ddc09b0b102c95bdeb8f6c14eec9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 16644,
        "upload_time": "2022-12-09T11:45:01",
        "upload_time_iso_8601": "2022-12-09T11:45:01.045067Z",
        "url": "https://files.pythonhosted.org/packages/64/6b/32e9baee2149ec29ecda0100ed54664581ac884c9b17ccb0e763454a3946/didiator-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ac15fbdc6c8dfe2b3c41d8e740e0a93cb833672d7bfd167a2ee7a3cd7d1e9ac",
          "md5": "f43852562b545cc7a80b7240f6e1845f",
          "sha256": "4c8a618cb6f3df8a8bfcfef38987d55e7f27362bb980cba1bc6b80182f5c8a44"
        },
        "downloads": -1,
        "filename": "didiator-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f43852562b545cc7a80b7240f6e1845f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 10924,
        "upload_time": "2022-12-09T11:45:04",
        "upload_time_iso_8601": "2022-12-09T11:45:04.298909Z",
        "url": "https://files.pythonhosted.org/packages/6a/c1/5fbdc6c8dfe2b3c41d8e740e0a93cb833672d7bfd167a2ee7a3cd7d1e9ac/didiator-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18e6e3d7baf14dfbcee776402398ce9ee46885b6b55b0b0d3106bff948fcc393",
          "md5": "dfedd4d15d00b3e3fe150835c4b54f48",
          "sha256": "08d95962ac8fdf93957beaf2c5783f2b6fcd42bbc8839d7fdad980fcad400698"
        },
        "downloads": -1,
        "filename": "didiator-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfedd4d15d00b3e3fe150835c4b54f48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 16641,
        "upload_time": "2022-12-09T12:17:15",
        "upload_time_iso_8601": "2022-12-09T12:17:15.053808Z",
        "url": "https://files.pythonhosted.org/packages/18/e6/e3d7baf14dfbcee776402398ce9ee46885b6b55b0b0d3106bff948fcc393/didiator-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eabdc53ad18620092abc90f5d1e60e3b4903f3231e89628deab85ac675cca8ad",
          "md5": "b98ac5043b6dfcffbdf1897992bda8cd",
          "sha256": "06d36c048cd34ddc4f747fb73092ce32c8b24e1e97f1efbff132e4adccbc8aa6"
        },
        "downloads": -1,
        "filename": "didiator-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b98ac5043b6dfcffbdf1897992bda8cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 10947,
        "upload_time": "2022-12-09T12:17:17",
        "upload_time_iso_8601": "2022-12-09T12:17:17.842887Z",
        "url": "https://files.pythonhosted.org/packages/ea/bd/c53ad18620092abc90f5d1e60e3b4903f3231e89628deab85ac675cca8ad/didiator-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c031f95e59935be282bf6009f2768707d5bd46809c14c9eaccf776c053be662",
          "md5": "544820f4205a97fbe4e65fb841650c6d",
          "sha256": "661139dc709504e6806f7c0d2ad2c61ba9ffd5bc671bd9c3123def8f68ccdde1"
        },
        "downloads": -1,
        "filename": "didiator-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "544820f4205a97fbe4e65fb841650c6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 20751,
        "upload_time": "2022-12-27T20:04:01",
        "upload_time_iso_8601": "2022-12-27T20:04:01.961640Z",
        "url": "https://files.pythonhosted.org/packages/1c/03/1f95e59935be282bf6009f2768707d5bd46809c14c9eaccf776c053be662/didiator-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3f9deb91bae45a8a8cc42babf35e43492b3f813e395ae0a5a3532f14b281572",
          "md5": "e45f970ca421f04601eff52b38d8933f",
          "sha256": "42dcdb677f77983986699e5b61129c428103194dbf8f49679e5e6055e26b7c1b"
        },
        "downloads": -1,
        "filename": "didiator-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e45f970ca421f04601eff52b38d8933f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 13681,
        "upload_time": "2022-12-27T20:04:03",
        "upload_time_iso_8601": "2022-12-27T20:04:03.830493Z",
        "url": "https://files.pythonhosted.org/packages/e3/f9/deb91bae45a8a8cc42babf35e43492b3f813e395ae0a5a3532f14b281572/didiator-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "593a5787e2ec6ad831d0ac80ffc0f97b3c73b627dcd2c62455d4a5deb992a634",
          "md5": "2cad907ec61b12dd9fa0edd20cc98414",
          "sha256": "6cf5af01023e0e5cac45460e02769bb6ad64e1332df346aaefb46686a29297b0"
        },
        "downloads": -1,
        "filename": "didiator-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2cad907ec61b12dd9fa0edd20cc98414",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 22056,
        "upload_time": "2023-01-30T23:15:34",
        "upload_time_iso_8601": "2023-01-30T23:15:34.811532Z",
        "url": "https://files.pythonhosted.org/packages/59/3a/5787e2ec6ad831d0ac80ffc0f97b3c73b627dcd2c62455d4a5deb992a634/didiator-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20d78f577ae09ed6ee6b5df6cb669e34d7cc848c80a7a2045b3e9f1921c80ded",
          "md5": "95f3d798e29eecd82b65dd13fb33d89d",
          "sha256": "69cdbdfdabbe38d02bfbf93abd739098e0bab0f83bf8bc92973800fdc436b78d"
        },
        "downloads": -1,
        "filename": "didiator-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "95f3d798e29eecd82b65dd13fb33d89d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 14207,
        "upload_time": "2023-01-30T23:15:36",
        "upload_time_iso_8601": "2023-01-30T23:15:36.810661Z",
        "url": "https://files.pythonhosted.org/packages/20/d7/8f577ae09ed6ee6b5df6cb669e34d7cc848c80a7a2045b3e9f1921c80ded/didiator-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77ec35624f50f7c2bf86f24d8112349cb4ae4b3cd14b72db6cb6cf58a8e82626",
          "md5": "64fc8be002164fc4c968b1d282d26754",
          "sha256": "0fd3d3af901241a457beae81853e91444de46cb2a4fcbeb9ed1fb91fb4ad65b4"
        },
        "downloads": -1,
        "filename": "didiator-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64fc8be002164fc4c968b1d282d26754",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 22057,
        "upload_time": "2023-01-31T00:22:48",
        "upload_time_iso_8601": "2023-01-31T00:22:48.526262Z",
        "url": "https://files.pythonhosted.org/packages/77/ec/35624f50f7c2bf86f24d8112349cb4ae4b3cd14b72db6cb6cf58a8e82626/didiator-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4eb31d2fb7ffe771bb7fc00653a662509ef586410707df8af556bbe29091d224",
          "md5": "0e33ce575bccbeb4ec984032f8909fdb",
          "sha256": "05375f397ce73ee52934b6da823d439a263cde33579e10589d93944eb9c2e0b3"
        },
        "downloads": -1,
        "filename": "didiator-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e33ce575bccbeb4ec984032f8909fdb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 14245,
        "upload_time": "2023-01-31T00:22:50",
        "upload_time_iso_8601": "2023-01-31T00:22:50.670551Z",
        "url": "https://files.pythonhosted.org/packages/4e/b3/1d2fb7ffe771bb7fc00653a662509ef586410707df8af556bbe29091d224/didiator-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77ec35624f50f7c2bf86f24d8112349cb4ae4b3cd14b72db6cb6cf58a8e82626",
        "md5": "64fc8be002164fc4c968b1d282d26754",
        "sha256": "0fd3d3af901241a457beae81853e91444de46cb2a4fcbeb9ed1fb91fb4ad65b4"
      },
      "downloads": -1,
      "filename": "didiator-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "64fc8be002164fc4c968b1d282d26754",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 22057,
      "upload_time": "2023-01-31T00:22:48",
      "upload_time_iso_8601": "2023-01-31T00:22:48.526262Z",
      "url": "https://files.pythonhosted.org/packages/77/ec/35624f50f7c2bf86f24d8112349cb4ae4b3cd14b72db6cb6cf58a8e82626/didiator-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4eb31d2fb7ffe771bb7fc00653a662509ef586410707df8af556bbe29091d224",
        "md5": "0e33ce575bccbeb4ec984032f8909fdb",
        "sha256": "05375f397ce73ee52934b6da823d439a263cde33579e10589d93944eb9c2e0b3"
      },
      "downloads": -1,
      "filename": "didiator-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0e33ce575bccbeb4ec984032f8909fdb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 14245,
      "upload_time": "2023-01-31T00:22:50",
      "upload_time_iso_8601": "2023-01-31T00:22:50.670551Z",
      "url": "https://files.pythonhosted.org/packages/4e/b3/1d2fb7ffe771bb7fc00653a662509ef586410707df8af556bbe29091d224/didiator-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}