{
  "info": {
    "author": "Bea Steers",
    "author_email": "bea.steers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# starstar  ‚ú® ‚ú®\n\n[![pypi](https://badge.fury.io/py/starstar.svg)](https://pypi.python.org/pypi/starstar/)\n![tests](https://github.com/beasteers/starstar/actions/workflows/ci.yml/badge.svg)\n[![docs](https://readthedocs.org/projects/starstar/badge/?version=latest)](http://starstar.readthedocs.io/?badge=latest)\n[![License](https://img.shields.io/pypi/l/starstar.svg)](https://github.com/beasteers/starstar/blob/main/LICENSE.md)\n\nFinally! Variable keyword tracing in Python. \n\nBecause this makes me sad:\n```python\ndef main(**kw):\n    function_with_a_bunchhhh_of_arguments(**kw)  # I only want to pass some of **kw !!\n    another_function_with_a_bunchhhh_of_arguments(**kw)  # and put the other half here !!!\n\n# hmmm let's see what can I pass to this function...\nhelp(main)  # main(**kw)\n# HALP????? aljdsflaksjdflkasjd\n```\nüòñüò≠üò≠\n\nAnd why can't we have: üßû‚Äç‚ôÄÔ∏è üßöüèª‚Äç‚ôÄÔ∏è ‚ú® ‚ú® \n```python\nimport starstar\n\ndef function_a(a=1, b=2, c=3): ...\ndef function_b(x=8, y=9, z=10): ...\n\n@starstar.traceto(function_a, function_b)\ndef main(**kw):\n    kw_a, kw_b = starstar.divide(kw, function_a, function_b)\n    function_a(**kw_a)  # gets: a, b, c\n    function_b(**kw_b)  # gets: x, y, z\n\n# hmmm let's see what can I pass to this function...\nhelp(main)  # main(a=1, b=2, c=3, x=8, y=9, z=10)\n# yayyyy!!!\n```\nüòáü•∞üåà\n\nDo you:\n - dislike repeating function arguments and their default values and therefore use `**kwargs` a lot?\n - sometimes need to pass `**kwargs` down to multiple functions, but hate that it requires enumerating all but one of the functions parameters?\n - wish that Python could look inside itself and figure it out for you?\n\n`starstar` attempts to bridge the gap between nice, clean, and concise code (DRY ! EVER! <3) while maintaining informative introspectability of your functions. \n\nIt also tries to do it as efficiently as it can internally by minimizing the amount of overhead added to the actual function calls and trying to use wrapper functions sparingly.\n\nIt can: \n - look at function signatures and uses the parameters described to sort out kwargs into separate dictionaries for each function. (`divide(kw, *funcs)`)\n - modify a function's signature to include parameters from other functions that it wraps and sends its `**kwargs` to (`traceto(*funcs)`)\n - perform `functools.wraps`, while also preserving any arguments from the wrapper function in the signature (`wraps(func)(wrapper)`)\n\nI really hope you find this useful! Please feel free to open issues if you have requests/suggestions cuz I want you to love this too!\n\n## Install\n\n```bash\npip install starstar\n```\n\n## Usage\n\n### Pass arguments to multiple functions!\nWe have a function that wants to pass arguments to two different functions without having to enumerate those arguments in that function.\n```python\nimport starstar\n\ndef func_a(a=None, b=None, c=None):\n    return a, b, c\n\ndef func_b(d=None, e=None, f=None):\n    return d, e, f\n\ndef main(**kw):\n    kw_a, kw_b = starstar.divide(kw, func_a, func_b)\n    func_a(**kw_a)\n    func_b(**kw_b)\n```\n\n\n\n### Pass arguments to multiple functions down multiple levels!\nHere we're passing it down two levels so we break up arguments for `func_a` and `func_b` into the first dictionary and `func_d` into the second.\n```python\ndef func_c(**kw):\n    kw_a, kw_b = starstar.divide(kw, func_a, func_b)\n    func_a(**kw_a)\n    func_b(**kw_b)\n\ndef func_d(g=None, h=None, i=None):\n    return g, h, i\n\ndef main(**kw):\n    kw_c, kw_d = starstar.divide(kw, (func_a, func_b), func_d)  # combine multiple functions into one kw dict\n    func_c(**kw_c)\n    func_d(**kw_d)\n```\n\nBut we can even make this one step easier! Here we are modifying the signature of `func_c` to say that its arguments are sent to `func_a` and `func_b`.\n```python\n@starstar.traceto(func_a, func_b)\ndef func_c(**kw):\n    kw_a, kw_b = starstar.divide(kw, func_a, func_b)\n    func_a(**kw_a)\n    func_b(**kw_b)\n\n@starstar.traceto(func_c, func_d)\ndef main(**kw):\n    kw_c, kw_d = starstar.divide(kw, func_c, func_d)\n    func_c(**kw_c)\n    func_d(**kw_d)\n```\nWhich results in these signatures:\n```python\nimport inspect\nprint(inspect.signature(func_c))\nprint(inspect.signature(main))\n# (a=None, b=None, c=None, d=None, e=None, f=None)\n# (a=None, b=None, c=None, d=None, e=None, f=None, g=None, h=None, i=None)\n```\n\n### Bonus\n#### `functools.wraps`, but better\nBuiltin `functools.wraps` doesn't consider the arguments to `inner` so its wrapped signature doesn't know about them which can be misleading for any tools that rely on accurate signatures.\n```python\nimport functools\n\ndef deco(func):\n    @functools.wraps(func)\n    def inner(q, *a, **kw):\n        return q, func(*a, **kw)\n    return inner\n\n@deco\ndef asdf(x, y, z):\n    pass\n\nimport inspect\nprint(inspect.signature(asdf))  # (x, y, z)\n```\n\nBut now it can!\n```python\nimport starstar\n\ndef deco(func):\n    @starstar.wraps(func)\n    def inner(q, *a, **kw):\n        return q, func(*a, **kw)\n    return inner\n\n@deco\ndef asdf(x, y, z):\n    pass\n\nimport inspect\nprint(inspect.signature(asdf))  # (q, x, y, z)\n```\n\nAnd you can also skip certain positional or named arguments if the wrapper already provides them.\n```python\nimport starstar\n\ndef deco(func):\n    @starstar.wraps(func, skip_n=2, skip_args=('blah',))\n    def inner(q, *a, **kw):\n        return q, func(1, 2, *a, blah=17, **kw)\n    return inner\n```\n\n#### Overriding function defaults\nSay we want to change the default arguments for a function (e.g. we want to offload that configuration to a yaml config file). \n\n```python\nimport starstar\n\n@starstar.defaults\ndef func_x(x, y=6):\n    return x, y\n\nimport inspect\nprint(inspect.signature(func_x))  # <Signature (x, y=6)>\n\nassert func_x(5) == 11\nfunc_x.update(y=7)\nassert func_x(5) == 12\n\nimport inspect\nprint(inspect.signature(func_x))  # <Signature (x, y=17)>\n```\n\n```python\nimport yaml\n\nwith open(config_file, 'r') as f:\n    config = yaml.load(f)\n\nfunc_x.update(**(config.get('func_x') or {}))\n```\n\n## For the Future\n - tracing pos args? After some thought - this seems troublesome because I'm not sure how we'd deal with name conflicts between kwargs.\n - `traceto` allow skipping?\n - have a more concrete plan around keyword name collisions.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/beasteers/starstar",
    "keywords": "keyword kwargs kw star function arguments signature wrap trace",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "starstar",
    "package_url": "https://pypi.org/project/starstar/",
    "platform": null,
    "project_url": "https://pypi.org/project/starstar/",
    "project_urls": {
      "Homepage": "https://github.com/beasteers/starstar"
    },
    "release_url": "https://pypi.org/project/starstar/0.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Keyword argument tracing !!",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15054818,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19d5cb6f901cf85dd5b918b2fc1f959a463f04b1d3cee745c5335707479005e0",
          "md5": "24106d1c9a7d04587a59e02023b23806",
          "sha256": "827731a56252e5070e3d0987de88d04b3bc40816852579cad56fd6b3cde3caba"
        },
        "downloads": -1,
        "filename": "starstar-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "24106d1c9a7d04587a59e02023b23806",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6827,
        "upload_time": "2021-09-14T16:14:17",
        "upload_time_iso_8601": "2021-09-14T16:14:17.098426Z",
        "url": "https://files.pythonhosted.org/packages/19/d5/cb6f901cf85dd5b918b2fc1f959a463f04b1d3cee745c5335707479005e0/starstar-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "464bd7d0f9ccc295ba6a118d0d9aaca08bc812f5ab86c36c0db1e4e482eba282",
          "md5": "ad52dccb2fefd08770b830341984bf4f",
          "sha256": "7979416b381873e38b8e7e11ce0f79f7f423ea9cc4b3313c33e4927913d4863f"
        },
        "downloads": -1,
        "filename": "starstar-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ad52dccb2fefd08770b830341984bf4f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12663,
        "upload_time": "2021-11-07T16:56:09",
        "upload_time_iso_8601": "2021-11-07T16:56:09.406767Z",
        "url": "https://files.pythonhosted.org/packages/46/4b/d7d0f9ccc295ba6a118d0d9aaca08bc812f5ab86c36c0db1e4e482eba282/starstar-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b2d8cb5d862247077891816d9f630c629cc6ead3d4632293666fd384b385a7c",
          "md5": "14f0b9e7ae41f1bc6241740b8f7df203",
          "sha256": "d023e12003d36e31d7fbe8740d21d66db4fe6097159cfb4d03e8204ddc98ff34"
        },
        "downloads": -1,
        "filename": "starstar-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "14f0b9e7ae41f1bc6241740b8f7df203",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14929,
        "upload_time": "2021-11-08T17:12:47",
        "upload_time_iso_8601": "2021-11-08T17:12:47.602541Z",
        "url": "https://files.pythonhosted.org/packages/7b/2d/8cb5d862247077891816d9f630c629cc6ead3d4632293666fd384b385a7c/starstar-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d63ecc4c6e6d5da538df43b3f4f6637822ea3ffeabdcb235d560108bc353c1f8",
          "md5": "e1d8bb21da0b3fd41a1fe62f403a2598",
          "sha256": "b23802f1981ec00956cac6472cd6bc4a127421ebc1a6b65525c57aa8e890e7ba"
        },
        "downloads": -1,
        "filename": "starstar-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e1d8bb21da0b3fd41a1fe62f403a2598",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18651,
        "upload_time": "2021-11-10T17:09:37",
        "upload_time_iso_8601": "2021-11-10T17:09:37.145617Z",
        "url": "https://files.pythonhosted.org/packages/d6/3e/cc4c6e6d5da538df43b3f4f6637822ea3ffeabdcb235d560108bc353c1f8/starstar-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4682cdb4bafa6f0e4f407a44513a747c9ae2125023d33e1924bac7e20e70ecf",
          "md5": "fa8cc36ece3375c173d9d74a4447fecc",
          "sha256": "d04e9b97740d1c23fa0823c03c0c919b6f661f6ef0dbedf9405586247f47879c"
        },
        "downloads": -1,
        "filename": "starstar-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fa8cc36ece3375c173d9d74a4447fecc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26948,
        "upload_time": "2022-05-07T01:12:54",
        "upload_time_iso_8601": "2022-05-07T01:12:54.778740Z",
        "url": "https://files.pythonhosted.org/packages/c4/68/2cdb4bafa6f0e4f407a44513a747c9ae2125023d33e1924bac7e20e70ecf/starstar-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7d52546238e3e410a8b1577739dd560905bcc3a8ce322d02f8d7ef49b07a353",
          "md5": "2e1071cf3a9747f86525d5608bec6b6c",
          "sha256": "2f6b6c24f2cc74ce554fe9cfa4b9759203bd3472bd7c00f038e9b994394a26d5"
        },
        "downloads": -1,
        "filename": "starstar-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2e1071cf3a9747f86525d5608bec6b6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32306,
        "upload_time": "2022-09-11T00:25:39",
        "upload_time_iso_8601": "2022-09-11T00:25:39.357840Z",
        "url": "https://files.pythonhosted.org/packages/a7/d5/2546238e3e410a8b1577739dd560905bcc3a8ce322d02f8d7ef49b07a353/starstar-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7d52546238e3e410a8b1577739dd560905bcc3a8ce322d02f8d7ef49b07a353",
        "md5": "2e1071cf3a9747f86525d5608bec6b6c",
        "sha256": "2f6b6c24f2cc74ce554fe9cfa4b9759203bd3472bd7c00f038e9b994394a26d5"
      },
      "downloads": -1,
      "filename": "starstar-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2e1071cf3a9747f86525d5608bec6b6c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32306,
      "upload_time": "2022-09-11T00:25:39",
      "upload_time_iso_8601": "2022-09-11T00:25:39.357840Z",
      "url": "https://files.pythonhosted.org/packages/a7/d5/2546238e3e410a8b1577739dd560905bcc3a8ce322d02f8d7ef49b07a353/starstar-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}