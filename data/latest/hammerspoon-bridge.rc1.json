{
  "info": {
    "author": "Aaron Christiansen",
    "author_email": "aaronc20000@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Programming Language :: Other Scripting Engines",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Hammerspoon Bridge for Python\n\nThis allows you to access seamlessly execute Hammerspoon functions from Python scripts, making its\nmassive range of macOS automation tools readily available.\n\nSay we wanted to write a script which creates a new space, moves the focused window to it, and\nswitches to it:\n\n```python\n# Set up bridge\nfrom hammerspoon_bridge import LuaBridge\nhs = LuaBridge().proxy().hs\n\n# Get focused window info\nwindow = hs.window.focusedWindow()\nscreen = window.screen(...) # Passing ... as first argument is equivalent to: window:screen()\n                            # (Which would be equivalent to: window.screen(window))\n\n# Add space and get it \nhs.spaces.addSpaceToScreen(screen, False)\nallSpaces = hs.spaces.allSpaces()\nspacesOnScreen = allSpaces[screen.getUUID(...)]\nnewSpace = spacesOnScreen[len(spacesOnScreen)] # 1-indexed! This is bridging to Lua, after all...\n\n# Move window to it and switch to it\nhs.spaces.moveWindowToSpace(window, newSpace)\nhs.spaces.gotoSpace(newSpace)\n```\n\nThese are not generated bindings, or a re-written like-for-like API. This works by translating\nPython accesses, calls, and indexes into Lua code, and then executing it by shelling out to\nHammerspoon's `hc` command-line tool.\n\n> ⚠️ Warning! ⚠️\n>\n> This is worryingly similar to `eval`, but across a programming language boundary.\n> **Do not use untrusted input** when dealing with this bridge.\n\n## Prerequisites\n\n1. Hammerspoon must be installed at `/Applications/Hammerspoon.app`.\n2. Hammerspoon must be running.\n3. Your `init.lua` (typically at `~/.hammerspoon/init.lua`) must contain this line somewhere:\n\n```lua\nlocal ipc = require('hs.ipc')\n```\n\nIf everything's set up correctly, then running the following in your shell should print `Yay!`:\n\n```bash\n/Applications/Hammerspoon.app/Contents/Frameworks/hs/hs -c \"'Yay'\"\n```\n\nAfter all that, install this module with `pip`:\n\n```\npip install hammerspoon_bridge\n```\n\n## Usage\n\n### Proxy API\n\nThe proxy API hooks into many of Python's \"dunder methods\" like `__getattr__` to provide an API\nwhich looks like interacting with normal objects.\n\nTo get started, create a `LuaBridge` instance and call `proxy` on it:\n\n```python\nbridge = LuaBridge()\nproxy = bridge.proxy()\n```\n\nFrom here, you can access attributes and call functions just like you would if you were dealing with\nnormal Python objects.\n\n```python\nproxy.hs.window.focusedWindow() # Becomes Lua: hs.window.focusedWindow()\n```\n\nWhile Python's method call syntax always passes `self` as the first argument, Lua doesn't do this:\nLua uses `:` for a method call which passes `self`, and `.` for one which doesn't.\n\nTo bridge this, Lua calls with `:` are written in Python by passing `...` as the first argument. If\nthe `...` is omitted, the Lua call uses `.`.\n\n```python\nproxy.hs.window.focusedWindow().screen(...) # Becomes Lua: hs.window.focusedWindow():screen()\n```\n\n### Parameters and Values\n\nWhen passing parameters to functions, primitives like integers and strings are converted to their\nLua equivalents automatically.\n\n```python\nproxy.hs.alert.show(\"Hey!\", None, None, 2) # Becomes Lua: hs.alert.show(\"Hey!\", nil, nil, 2)\n```\n\nIf you need to execute strings of arbitrary Lua to build up an object you need, you can call\n`execute_lua` on your `LuaBridge`, passing an expression to execute.\n\nArray accesses are bridged directly, so arrays are 1-indexed when being accessed on the Python side!\nThis feels so wrong, but trying to be clever by altering indexes across the bridge could end up\nbeing a nightmare for table accesses. Also, Lua's `#` operator is replaced using the standard Python\n`len` function.\n\n**Unfortunately, bridging Python lambdas/functions to Lua anonymous function definitions isn't\ncurrently supported**, which means this won't be able to replace your `init.lua` just yet for things\nlike key binding definitions. This could be possible in the future by establishing some\nbidirectional IPC channel, where Lua can ask Python to run some code and give it a return value, but\nthis isn't implemented yet.\n\n### Environment Internals\n\nInternally, each attribute access or method call produces a separate invocation of the `hc` tool.\nLua global state persists between these invocations, so this bridge creates an array to store every\nobject it cares about. The `LuaObject`s used on the Python side are simply indexes into this array.\n\nThanks to a `__del__` implementation, the Lua garbage collector should sweep objects up shortly\nafter Python cleans their corresponding `LuaObject`s. For this reason, do not try to manually clone\n`LuaObject`s!\n\n## Wait, why isn't this in Ruby like everything else you write?\n\nGood question! Ruby has no notion of attributes, only method calls with omitted parentheses. This\nfundamentally clashes with Lua's model, where methods are attributes whose values are functions.\n\nBesides Lua's `:` and `.` distinction (which is hacked on using `...`), Python exactly matches Lua's\nway of doing things here, so was much more suited to this bridge.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AaronC81/hammerspoon_bridge",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hammerspoon-bridge",
    "package_url": "https://pypi.org/project/hammerspoon-bridge/",
    "platform": null,
    "project_url": "https://pypi.org/project/hammerspoon-bridge/",
    "project_urls": {
      "Homepage": "https://github.com/AaronC81/hammerspoon_bridge"
    },
    "release_url": "https://pypi.org/project/hammerspoon-bridge/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Interoperate with Hammerspoon through its CLI",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14157542,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1257326cd708d97ac192a08d95b56ed018638063f83093e28a955d68592fd279",
          "md5": "5c8d00b38b74c78427411dc63566d117",
          "sha256": "052792b9b4084099ec7becac1c0924ad90b7086a02ca398e2ad6ebdfbcc4109c"
        },
        "downloads": -1,
        "filename": "hammerspoon_bridge-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c8d00b38b74c78427411dc63566d117",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6006,
        "upload_time": "2022-06-17T00:25:44",
        "upload_time_iso_8601": "2022-06-17T00:25:44.973510Z",
        "url": "https://files.pythonhosted.org/packages/12/57/326cd708d97ac192a08d95b56ed018638063f83093e28a955d68592fd279/hammerspoon_bridge-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8a3e82d4ddfc94e792a550a59e37fcdfedde8302bfc76ee622cc599170378cb",
          "md5": "caa54e26bb026c075451c60f21982c07",
          "sha256": "6ed6ce8a6aca631bd9850a92f4cf96b1186c85beffe5a63754fe012bf8f9eb6a"
        },
        "downloads": -1,
        "filename": "hammerspoon_bridge-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "caa54e26bb026c075451c60f21982c07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5759,
        "upload_time": "2022-06-17T00:25:46",
        "upload_time_iso_8601": "2022-06-17T00:25:46.507595Z",
        "url": "https://files.pythonhosted.org/packages/d8/a3/e82d4ddfc94e792a550a59e37fcdfedde8302bfc76ee622cc599170378cb/hammerspoon_bridge-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1257326cd708d97ac192a08d95b56ed018638063f83093e28a955d68592fd279",
        "md5": "5c8d00b38b74c78427411dc63566d117",
        "sha256": "052792b9b4084099ec7becac1c0924ad90b7086a02ca398e2ad6ebdfbcc4109c"
      },
      "downloads": -1,
      "filename": "hammerspoon_bridge-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c8d00b38b74c78427411dc63566d117",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6006,
      "upload_time": "2022-06-17T00:25:44",
      "upload_time_iso_8601": "2022-06-17T00:25:44.973510Z",
      "url": "https://files.pythonhosted.org/packages/12/57/326cd708d97ac192a08d95b56ed018638063f83093e28a955d68592fd279/hammerspoon_bridge-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8a3e82d4ddfc94e792a550a59e37fcdfedde8302bfc76ee622cc599170378cb",
        "md5": "caa54e26bb026c075451c60f21982c07",
        "sha256": "6ed6ce8a6aca631bd9850a92f4cf96b1186c85beffe5a63754fe012bf8f9eb6a"
      },
      "downloads": -1,
      "filename": "hammerspoon_bridge-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "caa54e26bb026c075451c60f21982c07",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5759,
      "upload_time": "2022-06-17T00:25:46",
      "upload_time_iso_8601": "2022-06-17T00:25:46.507595Z",
      "url": "https://files.pythonhosted.org/packages/d8/a3/e82d4ddfc94e792a550a59e37fcdfedde8302bfc76ee622cc599170378cb/hammerspoon_bridge-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}