{
  "info": {
    "author": "Stephane Blondeau Da Silva",
    "author_email": "stephane.blondeau-da-silva@etu.unilim.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "Comp_lib - Determine the complexity of a self-dual normal basis\n=================================================================\n\nThis library aims at calculating the complexity of a basis that is a candidate for the lowest \ncomplexity basis for Fp^d/Fp, where p and d are prime numbers (Pickett and Vinatier, 2017).\nIt enables also to determine the points multiplicities distribution in Fd^2 of the \nassociated minimal Besicovitch arrangement.\n\n\nIt could be installed using pip:\n\n    pip install Comp_lib\n\n\nUsage:\n\n    \t>>> from Comp_lib import Complexity, IncMatComp, P, axes, E\n\n\nList of the functions:\n\n* E(j,k,d) \t\t: Create a matrix containing d^2-1 zeros and a single \n\t\t\t  one at the (j+1)^th row and (k+1)^th column of the \n\t\t\t  matrix\n  Example:\t\n\t>>> E(0,4,7)\n\n* axes(d) \t\t: Create a matrix containing d^2-3d+2 zeros and 3d-2 \n\t\t\t  one at the first row, first column and diagonal of \n\t\t\t  the matrix\n  Example:\n\t>>> axes(7)\n\n* P(x,d) \t\t: The polynomial that determines lines equations of \n\t\t\t  the minimal Besicovitch arrangment associated with \n\t\t\t  the basis whose complexity is wanted; x is in Fd\n  Example:\n\t>>> P(2,7)\n\n* IncMatComp(d) \t: Part of the matrix necessary for the calculation of \n\t\t\t  the complexity of the considered basis; it contains \n\t\t\t  the multiplicities of the points in Fd^2 determined \n\t\t\t  by the associated minimal Besicovitch arrangement \n\t\t\t  column of the matrix\n  Example:\n\t>>> IncMatComp(7)\n\n* IncMat(d) \t\t: The matrix containing the multiplicities of the points \n\t\t\t  in Fd^2 determined by the minimal Besicovitch arrangement \n\t\t\t  associated with the basis whose complexity is wanted \n\t\t\t  column of the matrix\n  Example:\n\t>>> IncMat(7)\n\n* Complexity(d)\t\t: The value of the complexity i.e. the number of simple \n\t\t\t  points in the matrix containing the multiplicities of \n\t\t\t  the points in Fd^2 determined by a well-chosen \n\t\t\t  Besicovitch arrangement (Pickett and Vinatier, 2017)\n  Example:\n\t>>> Complexity(7)\n\n* MulDist(d,n)\t \t: The distribution of multiplicities in the matrix \n\t\t\t  containing the multiplicities of the points in Fd^2 \n\t\t\t  determined by a well-chosen Besicovitch arrangement \n\t\t\t  (Pickett and Vinatier, 2017)\n           \t\t  The first value of the vector stands for the points \n\t\t\t  of multiplicity zero, the second value stands for the \n\t\t\t  simple points, etc.\n\t        \t  n is lenght of the vector returned; if this value is \n\t\t\t  not large enought (hight multiplicity(ies) not yet \n\t\t\t  counted) the following message is returned:\n           \t\t  IndexError: list index out of range column of the matrix\n  Example:\n\t>>> MulDist(7,6)\n\n* MulDistT(d,n)\t\t: The distribution of multiplicities in the T zone of the \n\t\t\t  matrix containing the multiplicities of the points in \n\t\t\t  Fd^2 determined by a well-chosen Besicovitch arrangement \n\t\t\t  (Pickett and Vinatier, 2017)\n           \t\t  The first value of the vector stands for the points \n\t\t\t  of multiplicity zero, the second value stands for the \n\t\t\t  simple points, etc.\n\t\t\t  n is lenght of the vector returned; if this value is \n\t\t\t  not large enought (hight multiplicity(ies) not yet \n\t\t\t  counted) the following message is returned:\n           \t\t  IndexError: list index out of range column of the matrix\n  Example:\n\t>>> MulDistT(7,3)\n\n* MulDistDiag(d,n)\t: The distribution of multiplicities on the diagonal of the \n\t\t  \t  matrix containing the multiplicities of the points in Fd^2 \n\t\t  \t  determined by a well-chosen Besicovitch arrangement \n\t\t\t  (Pickett and Vinatier, 2017)\n           \t\t  The first value of the vector stands for the points \n\t\t\t  of multiplicity zero, the second value stands for the \n\t\t\t  simple points, etc.\n\t        \t  n is lenght of the vector returned; if this value is \n\t\t\t  not large enought (hight multiplicity(ies) not yet \n\t\t\t  counted) the following message is returned:\n           \t\t  IndexError: list index out of range column of the matrix\n  Example:\n\t>>> MulDistDiag(7,6)\n\n\n\nLicence: GPLv3.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "Comp_lib",
    "package_url": "https://pypi.org/project/Comp_lib/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/Comp_lib/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/Comp_lib/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Determine the complexity of a self-dual normal basis",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2689260,
  "releases": {
    "1.1": []
  },
  "urls": [],
  "vulnerabilities": []
}