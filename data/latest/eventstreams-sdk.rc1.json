{
  "info": {
    "author": "IBM",
    "author_email": "eventstreams@uk.ibm.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[![Build Status](https://travis-ci.com/IBM/eventstreams-python-sdk.svg?&branch=main)](https://travis-ci.com/IBM/eventstreams-python-sdk)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n# IBM Cloud Event Streams Python SDK Version 1.1.1\n\n## Introduction\n\nIBM Event Streams for IBM Cloudâ„¢ is a high-throughput message bus built with Apache Kafka. \nIt is optimized for event ingestion into IBM Cloud and event stream distribution between your services and applications.\n\nEvent Streams provides a REST API to help connect your existing systems to your Event Streams Kafka cluster. \nUsing the API, you can integrate Event Streams with any system that supports RESTful APIs.\n\nDocumentation [IBM Cloud Eventstreams Service APIs](https://cloud.ibm.com/apidocs/event-streams).\n\n## Table of Contents\n\n<!--\n  The TOC below is generated using the `markdown-toc` node package.\n\n      https://github.com/jonschlinkert/markdown-toc\n\n  You should regenerate the TOC after making changes to this file.\n\n      npx markdown-toc -i README.md\n  -->\n\n<!-- toc -->\n\n- [Overview](#overview)\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Using the SDK](#using-the-sdk)\n- [REST API documentation](#event-streams-administration-rest-api)\n- [Questions](#questions)\n- [Issues](#issues)\n- [Open source @ IBM](#open-source--ibm)\n- [Contributing](#contributing)\n- [License](#license)\n\n<!-- tocstop -->\n\n## Overview\n\nThe IBM Cloud Eventstreams SDK Python SDK allows developers to programmatically interact with the following\nIBM Cloud services:\n\nService Name | Imported Class Name\n--- | ---\n[Admin Rest](https://cloud.ibm.com/apidocs/event-streams) | AdminRest\n\n## Prerequisites\n\n* An [IBM Cloud](https://cloud.ibm.com/registration) account.\n* The [IBM Cloud CLI.](https://cloud.ibm.com/docs/cli?topic=cli-getting-started)\n* An IAM API key to allow the SDK to access your account. Create one [here](https://cloud.ibm.com/iam/apikeys).\n* A IBM Cloud Eventstreams Instance Create one [here](https://cloud.ibm.com/registration?target=/catalog/services/event-streams)\n* Python 3.6 or above.\n\n## Installation\n\nTo install, use `pip3` or `easy_install3.5`:\n\n```bash\npip3 install --upgrade \"eventstreams_sdk>=1.1.1\"\n```\n\nor\n\n```bash\neasy_install3.5 --upgrade \"eventstreams_sdk>=1.1.1\"\n```\n\n## Using the SDK\nFor general SDK usage information, please see [this link](https://github.com/IBM/ibm-cloud-sdk-common/blob/main/README.md)\n\n## Questions\n\nIf you are having difficulties using this SDK or have a question about the IBM Cloud services,\nplease ask a question\n[Stack Overflow](http://stackoverflow.com/questions/ask?tags=ibm-cloud).\n\n## Issues\nIf you encounter an issue with the project, you are welcome to submit a\n[bug report](https://github.com/IBM/eventstreams-python-sdk/issues).\nBefore that, please search for similar issues. It's possible that someone has already reported the problem.\n\n## Open source @ IBM\nFind more open source projects on the [IBM Github Page](http://ibm.github.io/)\n\n## Contributing\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## License\n\nThis SDK is released under the Apache 2.0 license.\nThe license's full text can be found in [LICENSE](https://github.com/IBM/eventstreams-python-sdk/blob/main/LICENSE).\n\n# Event Streams Administration REST API\n\nThis REST API allows users of the\n[IBM Event Streams service](https://cloud.ibm.com/docs/services/EventStreams/index.html)\nto administer\n[Kafka topics](#using-the-rest-api-to-administer-kafka-topics)\nassociated with an instance of the service. You can use this API to perform the following\noperations:\n  - [Create a Kafka topic](#creating-a-kafka-topic)\n  - [List Kafka topics](#listing-kafka-topics)\n  - [Get a Kafka topic](#getting-a-kafka-topic)\n  - [Delete a Kafka topic](#deleting-a-kafka-topic)\n  - [Update a Kafka topic configuration](#updating-kafka-topics-configuration)\n  - [List which topics are mirrored](#list-current-mirroring-topic-selection)\n  - [Replace selection of topics which are mirrored](#replace-selection-of-topics-which-are-mirrored)\n  - [List active mirroring topics](#list-active-mirroring-topics)\n\nThe Admin REST API is also [documented using swagger](./admin-rest-api.yaml).\n\n## Access control\n---\n\nAll requests support below authorization methods:\n * Basic authorization with user and password. (\n  For both standard, enterprise and lite plans, user is 'token', password is the API key from `ibmcloud resource service-keys` for the service instance.)\n * Bearer authorization with bearer token. (This token can be either API key or JWT token obtained from IAM upon login to IBM Cloud. Use `ibmcloud iam oauth-tokens` to retrieve the token after `ibmcloud login`)\n * `X-Auth-Token` header to be set to the API key. This header is deprecated.\n\n##  Administration API endpoint\n---\nAdministration API endpoint is the `kafka_admin_url` property in the service key for the service instance. This command can be used to retrieve this property.\n```bash\n$ibmcloud resource service-key \"${service_instance_key_name}\" --output json > jq -r '.[]|.credentials.kafka_admin_url'\n```\n\n## Environment Setup\nIn the examples you must set and export environment variables as follows:\n- Either the `API_KEY` or `BEARER_TOKEN` to use for authentication.\n- `KAFKA_ADMIN_URL` to point to your Eventstreams admin endpoint.\n\nIn addition, the `Content-type` header has to be set to `application/json`.\n\nCommon HTTP status codes:\n- 200: Request succeeded.\n- 202: Request was accepted.\n- 400: Invalid request JSON.\n- 401: The authentication header is not set or provided information is not valid.\n- 403: Not authorized to perform the operation. Usually it means the API key used is missing a certain role. More details on what role can perform what operation refers to this [document](https://cloud.ibm.com/docs/services/EventStreams?topic=eventstreams-security).\n- 404: Unable to find the topic with topic name given by user.\n- 422: Semantically invalid request.\n- 503: An error occurred handling the request.\n\nError responses carry a JSON body like the following:\n```json\n{\"error_code\":50301,\"message\":\"Unknown Kafka Error\", \"incident_id\": \"17afe715-0ff5-4c49-9acc-a4204244a331\"}\n```\nError codes are of the format `HHHKK` where `HHH` is the HTTP Status Code and `KK` is the Kafka protocol error.  \n\nFor E2E debugging purposes, the transaction ID of every request is returned in the HTTP header `X-Global-Transaction-Id`.\nIf the header is set on the request, it will be honored. If not, it will be generated.\nIn the event of a non-200 error return code, the transaction ID is also returned in the JSON error response as `incident_id`.\n\n\n## Using the REST API to administer Kafka topics\n---\n\nThe remainder of this document describes the Python implementation of the Admin Rest SDK \nand we also provide example `example.go` to show all SDK calls in action. \n\nTo run the example :-\n\nSet the required environment variables\n```sh\n# Set your API KEY (or a bearer token could be used by setting the BEARER_TOKEN environment variable instead, but not both)\nexport API_KEY=\"abc123456789\"\n\n# Set the Admin Endpoint to point to your cluster.\nexport KAFKA_ADMIN_URL=\"https://xyzclustername.svc01.region.eventstreams.test.cloud.ibm.com\"\n\n```\n\nRun the example\n```sh\n\tpython example.py\n```\n\n## REST API \n---\nThe following sections explain how the REST API works with examples.\n\n### Code Setup\n\n```python\n# Code Setup\nfrom typing import Set\nfrom ibm_cloud_sdk_core.authenticators import BasicAuthenticator\nfrom eventstreams_sdk.adminrest_v1 import *\nimport os\nfrom http import HTTPStatus\n\nSERVICE_NAME = 'adminrest_v1'\nKAFKA_ADMIN_URL = os.getenv('KAFKA_ADMIN_URL')\nBEARER_TOKEN= os.getenv('BEARER_TOKEN')\nAPI_KEY= os.getenv('API_KEY')\n\n# End Code Setup\n```\n\n### Authentication\n---\nUse one of the following methods to authenticate:\n\n- To authenticate using Basic Auth:\n  Place these values into the Authorization header of the HTTP request in the form Basic <credentials> \n  where <credentials> is the username and password joined by a single colon `:` base64 encoded. \n  For example:\n  ```sh\n  echo -n \"token:<APIKEY>\" | base64\n  ```\n\n- To authenticate using a bearer token:\n  To obtain your token using the IBM Cloud CLI, first log in to IBM Cloud, then run the following command:\n  ```\n  ibmcloud iam oauth-tokens\n  ```\n  Place this token in the Authorization header of the HTTP request in the form Bearer. Both API key or JWT tokens are supported.\n\n- To authenticate directly using the api_key:\n  Place the key directly as the value of the X-Auth-Token HTTP header.\n\n#### Example\n\nHere's an example of how to create the authenticator using either an API key or a BEARER_TOKEN\n\n```python\n# Create Authenticator\nif not KAFKA_ADMIN_URL:\n    print(\"Please set env KAFKA_ADMIN_URL\")\n    exit(1)\n\nif not API_KEY and not BEARER_TOKEN:\n    print(\"Please set either an API_KEY or a BEARER_TOKEN\")\n    exit(1)\n\nif API_KEY and BEARER_TOKEN:\n    print(\"Please set either an API_KEY or a BEARER_TOKEN not both\")\n    exit(1)\n\nif API_KEY:\n    # Create an Basic IAM authenticator.\n    authenticator = BasicAuthenticator('token', API_KEY)\nelse :\n    # Create an IAM Bearer Token authenticator.\n    authenticator = BasicAuthenticator('token', BEARER_TOKEN)\n\nservice = AdminrestV1(\n    authenticator = authenticator\n    )\n# End Authenticator\n```\n\n### Creating a client for the Admin REST API.\n---\nCreate a new service object.\n\n```python\n# Create Service\nbase_url = KAFKA_ADMIN_URL\nservice.set_service_url(base_url)\n# End Create Service\n```\n\n### Creating a Kafka topic\n---\nTo create a Kafka topic the admin REST SDK issues a POST request to the /admin/topics path. \nThe body of the request contains a JSON document, for example:\n```json\n{\n    \"name\": \"topicname\",\n    \"partitions\": 1,\n    \"configs\": {\n        \"retentionMs\": 86400000,\n        \"cleanupPolicy\": \"delete\"\n    }\n}\n```\n\nThe only required field is name. The partitions fields defaults to 1 if not set.\n\nExpected HTTP status codes:\n\n- 202: Topic creation request was accepted.\n- 400: Invalid request JSON.\n- 403: Not authorized to create topic.\n- 422: Semantically invalid request.\n\nIf the request to create a Kafka topic succeeds then HTTP status code 202 (Accepted) is returned. If the operation fails then a HTTP status code of 422 (Un-processable Entity) is returned, and a JSON object containing additional information about the failure is returned as the body of the response.\n\n\n\n\n#### Example\n\n```python\ndef create_topic(service,topic_name):\n    # Set up parameter values\n    partition_count = 1\n    configs = []\n\n    # Invoke create method.\n    try:\n        response = service.create_topic(\n            name=topic_name,\n            partition_count=partition_count,\n            configs=configs,\n        )\n        if response.status_code == HTTPStatus.ACCEPTED :  \n            print(\"\\ttopic created: \" + topic_name)\n    except:\n        print(\"\\tError Creating Topic: \" + topic_name)\n    # func.End\n```\n\n\n### Deleting a Kafka topic\n---\nTo delete a Kafka topic, the admin REST SDK issues a DELETE request to the `/admin/topics/TOPICNAME`\npath (where `TOPICNAME` is the name of the Kafka topic that you want to delete).\n\nExpected return codes:\n- 202: Topic deletion request was accepted.\n- 403: Not authorized to delete topic.\n- 404: Topic does not exist.\n- 422: Semantically invalid request.\n\nA 202 (Accepted) status code is returned if the REST API accepts the delete\nrequest or status code 422 (Un-processable Entity) if the delete request is\nrejected. If a delete request is rejected then the body of the HTTP response \nwill contain a JSON object which provides additional information about why \nthe request was rejected.\n\nKafka deletes topics asynchronously. Deleted topics may still appear in the\nresponse to a [list topics request](#listing-kafka-topics) for a short period\nof time after the completion of a REST request to delete the topic.\n\n#### Example\n\n```python\ndef delete_topic(service,topic_name):\n    # Lets try to delete it.\n    try:\n        response = service.delete_topic(\n            topic_name,\n            )\n        if response.status_code == HTTPStatus.ACCEPTED: \n            print(\"\\ttopic deleted: \"+topic_name)\n    except:\n        print(\"\\tError Deleting Topic: \" + topic_name)\n    # func.End\n```\n\n### Listing Kafka topics\n---\nYou can list all of your Kafka topics by issuing a GET request to the\n`/admin/topics` path. \n\nExpected status codes:\n- 200: the topic list is returned as JSON in the following format:\n```json\n[\n  {\n    \"name\": \"topic1\",\n    \"partitions\": 1,\n    \"retentionMs\": 86400000,\n    \"cleanupPolicy\": \"delete\"\n  },\n  { \"name\": \"topic2\",\n    \"partitions\": 2,\n    \"retentionMs\": 86400000,\n    \"cleanupPolicy\": \"delete\"\n  }\n]\n```\n\nA successful response will have HTTP status code 200 (OK) and contain an\narray of JSON objects, where each object represents a Kafka topic and has the\nfollowing properties:\n\n| Property name     | Description                                             |\n|-------------------|---------------------------------------------------------|\n| name              | The name of the Kafka topic.                            |\n| partitions        | The number of partitions of the Kafka topic.            |\n| retentionsMs      | The retention period for messages on the topic (in ms). |\n| cleanupPolicy     | The cleanup policy of the Kafka topic.                  |\n\n#### Example\n\n```python\ndef list_topics(service):\n    # Set up parameter values\n    topic_filter = ''\n    # Invoke list method.\n    try:\n        response = service.list_topics(\n            topic_filter=topic_filter,\n            )\n\n        if response.status_code == HTTPStatus.OK:\n            if not response.result :\n                print(\"\\tnothing to list\")\n                return\n            for topic in response.result: \n                 print(\"\\t\" + topic[\"name\"])\n    except:\n        print(\"\\tError Listing Topics\")\n    # func.end\n```\n\n### Getting a Kafka topic\n---\nTo get a Kafka topic detail information, issue a GET request to the `/admin/topics/TOPICNAME`\npath (where `TOPICNAME` is the name of the Kafka topic that you want to get).  \n\nExpected status codes\n- 200: Retrieve topic details successfully in following format:\n```json\n{\n  \"name\": \"MYTOPIC\",\n  \"partitions\": 1,\n  \"replicationFactor\": 3,\n  \"retentionMs\": 86400000,\n  \"cleanupPolicy\": \"delete\",\n  \"configs\": {\n    \"cleanup.policy\": \"delete\",\n    \"min.insync.replicas\": \"2\",\n    \"retention.bytes\": \"1073741824\",\n    \"retention.ms\": \"86400000\",\n    \"segment.bytes\": \"536870912\"\n  },\n  \"replicaAssignments\": [\n    {\n      \"id\": 0,\n      \"brokers\": {\n        \"replicas\": [\n          3,\n          2,\n          4\n        ]\n      }\n    }\n  ]\n}\n```\n- 403: Not authorized.\n- 404: Topic does not exist.\n\n#### Example\n\n```python\ndef topic_details(service,topic_name):\n    # Invoke get method.\n    try:\n        response = service.get_topic(\n            topic_name,\n            )\n        if response.status_code == HTTPStatus.OK:  \n            for key, value in response.result.items(): \n                print(\"\\t\" +key + \":\" + str(value) )\n    except:\n        print(\"\\tError Getting Topic Details: \" + topic_name)\n    # func.End  \n```\n\n### Updating Kafka topic's configuration\n---\nTo increase a Kafka topic's partition number or to update a Kafka topic's configuration, issue a\n`PATCH` request to `/admin/topics/TOPICNAME` with the following body:\n(where TOPICNAME is the name of the Kafka topic that you want to update).\n```json\n{\n  \"new_total_partition_count\": 4,\n  \"configs\": [\n    {\n      \"name\": \"cleanup.policy\",\n      \"value\": \"compact\"\n    }\n  ]\n}\n```\nSupported configuration keys are 'cleanup.policy', 'retention.ms', 'retention.bytes', 'segment.bytes', 'segment.ms', 'segment.index.bytes'.\nAnd partition number can only be increased, not decreased.\n\nExpected status codes\n- 202: Update topic request was accepted.\n- 400: Invalid request JSON/number of partitions is invalid.\n- 404: Topic specified does not exist.\n- 422: Semantically invalid request.\n\n#### Example\n\n```python\ndef update_topic(service,topic_name):\n    # Set up parameter values.\n    new_total_partition_count = 6\n    configs = []\n\n    # Invoke update method.\n    try:\n        response = service.update_topic(\n            topic_name,\n            new_total_partition_count=new_total_partition_count,\n            configs=configs,\n        )\n        if response.status_code == HTTPStatus.ACCEPTED :\n            print(\"\\ttopic updated: \"+topic_name)\n    except:\n        print(\"\\tError Updating Topic Details: \" + topic_name)\n    # func.End\n```\n\n### List current mirroring topic selection\n\nMirroring user controls are only available on the target cluster in a mirroring environment.\n\nTo get the current topic selection, issue an GET request to /admin/mirroring/topic-selection\n\n\nExpected status codes\n- 200: Retrieved topic selection successfully in following format:\n```json\n{\n  \"includes\": [\n    \"^prefix1_.*\",\n    \"^prefix2_.*\"\n  ]\n}\n```\n- 403: Unauthorized to use mirroring user controls.\n- 404: Mirroring not enabled. The mirroring user control APIs are only available on the target cluster of a mirrored pair.\n- 503: An error occurred handling the request.\n\n#### Example\n\n```python\ndef get_mirroring_topic_selection(service):\n    # Invoke get selection method.\n    try:\n        response = service.get_mirroring_topic_selection()\n        if response.status_code == HTTPStatus.OK :\n            for topic in response.result: \n                 print(\"\\t\" + topic[\"name\"])\n    except:\n        print(\"\\tError Listing Mirroring Topics:\")  \n    # func.End\n```\n\n### Replace selection of topics which are mirrored\n\nReplace mirroring topic selection\n\nMirroring user controls are available on the target cluster in a mirroring environment.\n\nTo replace the current topic selection, issue a POST request to /admin/mirroring/topic-selection\n\nExpected status codes\n\n- 200: Replaced topic selection successfully. The new selection is returned in following format:\n```json\n{\n  \"includes\": [\n    \"^prefix1_.*\",\n    \"^prefix2_.*\"\n  ]\n}\n```\n- 400: Invalid request. The request data cannot be parsed and used to replace the topic selection.\n- 403: Unauthorized to use mirroring user controls.\n- 404: Mirroring not enabled. The mirroring user control APIs are only available on the target cluster of a mirrored pair.\n- 415: Unsupported media type. Content-Type header with application/json is required.\n- 503: An error occurred handling the request.\n\n#### Example\n\n```python\ndef replace_mirroring_topic_selection(service,topic_name):\n     # Set up parameter values\n    includes = [topic_name]    \n    # Invoke replace method.\n    try:\n        response = service.replace_mirroring_topic_selection(\n            includes=[topic_name],\n        )\n        if response.status_code == HTTPStatus.OK :\n            print(\"\\tmirroring topic selection updated: \"+includes)\n    except:\n        print(\"\\tError Replacing Mirroring Topics:\") \n    # func.End\n```\n\n### List active mirroring topics\n---\nMirroring user controls are available on the target cluster in a mirroring environment.\n\nTo get the list of currently mirrored topics, issue an GET request to /admin/mirroring/active-topics\n\nExpected status codes\n\n- 200: Retrieved active topics successfully in following format:\n```json\n{\n  \"active_topics\": [\n    \"topic1\",\n    \"topic2\"\n  ]\n}\n```\n- 403: Unauthorized to use mirroring user controls.\n- 404: Mirroring not enabled. The mirroring user control APIs are only available on the target cluster of a mirrored pair.\n- 503: An error occurred handling the request.\n\n#### Example\n\n```python\ndef get_list_mirroring_active_topics(service):\n    # Invoke active method.\n    try:\n        response = service.get_list_mirroring_active_topics()\n        if response.status_code == HTTPStatus.OK :\n            for topic in response.result: \n                 print(\"\\t\" + topic[\"name\"])\n        print(\"\\tactive mirroring topics updated:\")\n    except:\n        print(\"\\tError Listing Active Mirroring Topics:\")  \n    # func.End\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/IBM/eventstreams-python-sdk",
    "keywords": "eventstreams_sdk",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eventstreams-sdk",
    "package_url": "https://pypi.org/project/eventstreams-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/eventstreams-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/IBM/eventstreams-python-sdk"
    },
    "release_url": "https://pypi.org/project/eventstreams-sdk/1.1.1/",
    "requires_dist": [
      "requests (<3.0,>=2.24.0)",
      "python-dateutil (<3.0.0,>=2.5.3)",
      "ibm-cloud-sdk-core (<4.0.0,>=3.8.0)"
    ],
    "requires_python": "",
    "summary": "Event Streams Python SDK",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9913285,
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "972053e0514a93dd30cc203b7c7007f2b346aea0ca64f34895ec5fe760048f5d",
          "md5": "5c1c6411134c0d23f1a0a16a355cd080",
          "sha256": "f533e6f2b344f0a37e93496b255a3cdf981af62aef807439cee017804837bd57"
        },
        "downloads": -1,
        "filename": "eventstreams_sdk-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c1c6411134c0d23f1a0a16a355cd080",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19488,
        "upload_time": "2021-03-29T14:34:49",
        "upload_time_iso_8601": "2021-03-29T14:34:49.160024Z",
        "url": "https://files.pythonhosted.org/packages/97/20/53e0514a93dd30cc203b7c7007f2b346aea0ca64f34895ec5fe760048f5d/eventstreams_sdk-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb7278039707c44fa3c6b398bdb96461a21ce36b70b2af3e40e0140ac0520eb5",
          "md5": "70ef8ebfdb4127af1f5457be562eeb5b",
          "sha256": "72ab963f4cf68dd38ec494213056f8a9a9dc06ce846a7e5f233832bc88abedd0"
        },
        "downloads": -1,
        "filename": "eventstreams_sdk-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "70ef8ebfdb4127af1f5457be562eeb5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26356,
        "upload_time": "2021-03-29T14:34:50",
        "upload_time_iso_8601": "2021-03-29T14:34:50.420519Z",
        "url": "https://files.pythonhosted.org/packages/bb/72/78039707c44fa3c6b398bdb96461a21ce36b70b2af3e40e0140ac0520eb5/eventstreams_sdk-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "972053e0514a93dd30cc203b7c7007f2b346aea0ca64f34895ec5fe760048f5d",
        "md5": "5c1c6411134c0d23f1a0a16a355cd080",
        "sha256": "f533e6f2b344f0a37e93496b255a3cdf981af62aef807439cee017804837bd57"
      },
      "downloads": -1,
      "filename": "eventstreams_sdk-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c1c6411134c0d23f1a0a16a355cd080",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19488,
      "upload_time": "2021-03-29T14:34:49",
      "upload_time_iso_8601": "2021-03-29T14:34:49.160024Z",
      "url": "https://files.pythonhosted.org/packages/97/20/53e0514a93dd30cc203b7c7007f2b346aea0ca64f34895ec5fe760048f5d/eventstreams_sdk-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb7278039707c44fa3c6b398bdb96461a21ce36b70b2af3e40e0140ac0520eb5",
        "md5": "70ef8ebfdb4127af1f5457be562eeb5b",
        "sha256": "72ab963f4cf68dd38ec494213056f8a9a9dc06ce846a7e5f233832bc88abedd0"
      },
      "downloads": -1,
      "filename": "eventstreams_sdk-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "70ef8ebfdb4127af1f5457be562eeb5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26356,
      "upload_time": "2021-03-29T14:34:50",
      "upload_time_iso_8601": "2021-03-29T14:34:50.420519Z",
      "url": "https://files.pythonhosted.org/packages/bb/72/78039707c44fa3c6b398bdb96461a21ce36b70b2af3e40e0140ac0520eb5/eventstreams_sdk-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}