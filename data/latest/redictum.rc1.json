{
  "info": {
    "author": "Michael Wright",
    "author_email": "mjw@methodanalysis.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python redictum lib/service (redictum)\n\n[![test](https://github.com/mwri/redictum/actions/workflows/test.yml/badge.svg)](https://github.com/mwri/redictum/actions/workflows/test.yml) [![codecov](https://codecov.io/gh/mwri/redictum/branch/main/graph/badge.svg)](https://codecov.io/gh/mwri/redictum)\n\n## Concept\n\nImagine some state (a set of key value pairs; a dictionary), the state has a start time and\noptionally an end time (like a \"valid from\" and \"valid to\" criteria), and some of the state\nis just information, and some of it defines the state's uniqueness.\n\nImagine now that you can just throw state information at the wall, and it sticks, meaning\nthat the state that is not unique is taken as an update, and the state which is unique, is\nnew state.\n\nThat's what redictum does, as briefly as I can make it!\n\nIn case the idea of uniqueness isn't quite clear, imagine a type of state which represents\npeople, and we are interested in the first name, last name, age and thirst and hunger of\nthese people.\n\nFor example imagine these four bits of state:\n\n```json\n{\"first_name\": \"Fred\", \"last_name\": \"Flint\", \"age\": 10, \"thirst\": 2, \"hunger\": 80}\n{\"first_name\": \"Jane\", \"last_name\": \"Oster\", \"age\": 20, \"thirst\": 30, \"hunger\": 30}\n{\"first_name\": \"John\", \"last_name\": \"Medium\", \"age\": 40, \"thirst\": 76, \"hunger\": 60}\n{\"first_name\": \"John\", \"last_name\": \"Winter\", \"age\": 30, \"thirst\": 40, \"hunger\": 10}\n```\n\nLet's say, in our contrived world, that no two people have the same first and last names\nand that is the extent of our consideration for identifying the uniqueness of a person.\n\nIn that case all four states above are unique, but, if we add this state:\n\n```json\n{\"first_name\": \"John\", \"last_name\": \"Winter\", \"age\": 31, \"thirst\": 55, \"hunger\": 10}\n```\n\n...John Winter has become a year older, and a bit more thirsty (that could happen in\na year).\n\nThe total state of the system is now:\n\n```json\n{\"first_name\": \"Fred\", \"last_name\": \"Flint\", \"age\": 10, \"thirst\": 2, \"hunger\": 80}\n{\"first_name\": \"Jane\", \"last_name\": \"Oster\", \"age\": 20, \"thirst\": 30, \"hunger\": 30}\n{\"first_name\": \"John\", \"last_name\": \"Medium\", \"age\": 40, \"thirst\": 76, \"hunger\": 60}\n{\"first_name\": \"John\", \"last_name\": \"Winter\", \"age\": 31, \"thirst\": 55, \"hunger\": 10}\n```\n\nHad `age` been considered part of what made people unique, then the state would have been\nthis instead:\n\n```json\n{\"first_name\": \"Fred\", \"last_name\": \"Flint\", \"age\": 10, \"thirst\": 2, \"hunger\": 80}\n{\"first_name\": \"Jane\", \"last_name\": \"Oster\", \"age\": 20, \"thirst\": 30, \"hunger\": 30}\n{\"first_name\": \"John\", \"last_name\": \"Medium\", \"age\": 40, \"thirst\": 76, \"hunger\": 60}\n{\"first_name\": \"John\", \"last_name\": \"Winter\", \"age\": 30, \"thirst\": 40, \"hunger\": 10}\n{\"first_name\": \"John\", \"last_name\": \"Winter\", \"age\": 31, \"thirst\": 55, \"hunger\": 10}\n```\n\nYou can also set the start (valid from time) and optionally end (valid to time) by way of\na TTL (time to live), and get the \"valid\" states, or expired or future states.\n\nThis simple set of rules means you can throw state at the system that will go away if not\nrenewed / updated regularly (as govered by the TTL), and you can throw state at the system\nwhich will become \"valid\" after some time, if it's not cancelled, or otherwise updated.\nBeing able to get the \"valid\" states then becomes a powerful tool.\n\nThat's more or less the entire concept, it just remains to be said that there are types of\nstate, with which code can be associated, and the back end storage can be whatever there\nis a storage adapter for.\n\n## In code\n\nThe above explanation and data is shown here in code now.\n\nFirst import redictum, create a repository, create a class for people with a (default) time\nto live of 200 (seconds), then get the valid dictums, and there will of course be one item:\n\n```python\n>>> import redictum\n>>> \n>>> people = redictum.Repo(redictum.store.RdbmsStore(\"sqlite:///:memory:\"))\n>>> \n>>> class Person(redictum.Dictum):\n...     unique_by = (\"first_name\", \"last_name\")\n...     ttl = 200\n... \n>>> people.apply(Person({\"first_name\": \"Fred\", \"last_name\": \"Flint\", \"age\": 10, \"thirst\": 2, \"hunger\": 80}))\n>>> \n>>> people.valid_dictums()\n[__main__.Person{'valid_from_ts': 1654451266.453832, 'valid_to_ts': 1654451466.453832, 'first_name': 'Fred', 'last_name': 'Flint', 'age': 10, 'thirst': 2, 'hunger': 80}]\n>>> \n```\n\nNow add more people:\n\n```python\n>>> people.apply(Person({\"first_name\": \"Jane\", \"last_name\": \"Oster\", \"age\": 20, \"thirst\": 30, \"hunger\": 30}))\n>>> people.apply(Person({\"first_name\": \"John\", \"last_name\": \"Medium\", \"age\": 40, \"thirst\": 76, \"hunger\": 60}))\n>>> people.apply(Person({\"first_name\": \"John\", \"last_name\": \"Winter\", \"age\": 30, \"thirst\": 40, \"hunger\": 10}))\n>>>\n```\n\nThe display of the dictum objects is a bit inconvenient, so something a little easier on the eye:\n\n```python\n>>> for p in [f\"{d.data['first_name']} {d.data['last_name']} {d.data['age']} {d.data['thirst']} {d.data['hunger']}\" for d in people.valid_dictums()]: print(p)\n... \nFred Flint 10 2 80\nJane Oster 20 30 30\nJohn Medium 40 76 60\nJohn Winter 30 40 10\n>>>\n```\n\nNow add the new person, which is not a new person, because the first and last names are already in\nuse (so it updates the existing John Winter record):\n\n```python\n>>> people.apply(Person({\"first_name\": \"John\", \"last_name\": \"Winter\", \"age\": 31, \"thirst\": 55, \"hunger\": 10}))\n>>> \n>>> for p in [f\"{d.data['first_name']} {d.data['last_name']} {d.data['age']} {d.data['thirst']} {d.data['hunger']}\" for d in people.valid_dictums()]: print(p)\n... \nFred Flint 10 2 80\nJane Oster 20 30 30\nJohn Medium 40 76 60\nJohn Winter 31 55 10\n>>> \n```\n\nThe valid from and valid to timestamps are also available:\n\n```python\n>>> for p in [f\"{d.data['first_name']} {d.data['last_name']} {d.meta_data['valid_from_ts']} {d.meta_data['valid_to_ts']}\" for d in people.valid_dictums()]: print(p)\n... \nFred Flint 1654451266.453832 1654451466.453832\nJane Oster 1654451279.888088 1654451479.888088\nJohn Medium 1654451282.265007 1654451482.265007\nJohn Winter 1654451347.873571 1654451547.873571\n>>> \n```\n\nA short while later, the first people \"applied\" have expired, so `people.valid_dictums()` no\nlonger returns them, though the later record is still valid:\n\n```python\n>>> for p in [f\"{d.data['first_name']} {d.data['last_name']} {d.meta_data['valid_from_ts']} {d.meta_data['valid_to_ts']}\" for d in people.valid_dictums()]: print(p)\n... \nJohn Winter 1654451347.873571 1654451547.873571\n>>> \n```\n\nThe expired records can be retrieved:\n\n```python\n>>> for p in [f\"{d.data['first_name']} {d.data['last_name']} {d.meta_data['valid_from_ts']} {d.meta_data['valid_to_ts']}\" for d in people.expired_dictums()]: print(p)\n... \nFred Flint 1654451266.453832 1654451466.453832\nJane Oster 1654451279.888088 1654451479.888088\nJohn Medium 1654451282.265007 1654451482.265007\n>>> \n```\n\nIf these records are updated, they will disappear from expired and be valid again.\n\n## dictum API\n\nThe `Dictum` class API is as follows.\n\n### constructor\n\nThere is one required positional parameter, the data. Optionally a `ts` kwarg may be given which\nchanges the valid from time from now, to whatever you set. A floating point timestamp value should\nbe given. For example this will create a record which will not appear in the list of valid dictums\nuntil 20 seconds has elapsed:\n\n```python\nDictum({\"first_name\": \"John\", \"last_name\": \"Winter\"}, ts=datetime.now().timestamp() + 20))\n```\n\nThe valid to time (if there is a TTL set) will be adjusted as well, so the TTL will remain whatever\nit was.\n\n### slide_ts_window\n\nThis slides the validity window, forwards or backwards. A single positional parameter specifying\nthe offset to apply in seconds must be given. The dictum object it self is returned. Thus this:\n\n```python\nDictum({\"first_name\": \"John\", \"last_name\": \"Winter\"}).slide_ts_window(20)\n```\n\n...will be the same as this:\n\n```python\nDictum({\"first_name\": \"John\", \"last_name\": \"Winter\"}, ts=datetime.now().timestamp() + 20))\n```\n\n### extend_ts_window\n\nThis is like `slide_ts_window` but only the \"to\" time is shifted. Though \"extend\" implies\na positive offset, as with `slide_ts_window` a negative number may be given to shrink the\nvalidity window.\n\n### delete\n\nDelete the dictum.\n\n### data\n\nThis *property* returns the dictum's data.\n\n### meta_data\n\nThis *property* returns the dictum's meta data (a dictionary with `valid_from_ts`\nand `valid_to_ts` keys).\n\n# all_data\n\nThis *property* returns data and meta data as one dict.\n\n### id\n\nThis *property* returns the store ID which can uniquely identify the dict. It will\nbe `None` if the dictum is not committed to a store.\n\n## dictum callbacks\n\nThe `Dict` class has two callback methods which do nothing by default, but which your `Dict`\nsubclass may implement. Only the instance being worked on will have it's callback called.\n\n### added\n\nCalled when a dictum is added and committed to storage.\n\n### updated\n\nCalled when a change to an existing dictum is committed.\n\n### deleted\n\nFor completeness of the API, this is called when a dictum is deleted.\n\n### the tracer dictum\n\nThe Tracer class is a Dictum subclass or mix in which automatically adds \"tracer\" data.\n\nTo use it, add it to the super classes of your `Dictum` subclass:\n\n```python\nclass DogDictum(redictum.Tracer, redictum.Dictum):\n    ttl = 3600 * 24 * 365\n    unique_by = (\"owner\", \"address\", \"name\")\n```\n\nNow data will contain an \"inst_at\" key, and the value will be a structure\ndescribing the module and function where the dictum was instantiated.\n\nIt you instantiate another dog, which is the same dog, then the trace data will be updated.\n\n## Notes\n\nYou may have as many different types (`Dictum` subclasses) as you like, in the same store\nor different ones. If you create two or more `RdbmsStore` objects with the same DSN for this\npurpose, it will be the same object, which should be fine. This per DSN singleton behaviour\nis specific to the `RdbmsStore` class, other stores behaviour may vary.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mwri/redictum",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "redictum",
    "package_url": "https://pypi.org/project/redictum/",
    "platform": null,
    "project_url": "https://pypi.org/project/redictum/",
    "project_urls": {
      "Homepage": "https://github.com/mwri/redictum"
    },
    "release_url": "https://pypi.org/project/redictum/0.0.2/",
    "requires_dist": [
      "bencode.py (==4.0.0)",
      "singleton-type (==0.0.4)",
      "sqlalchemy (==1.4.37)",
      "black (==22.3.0) ; extra == 'dev'",
      "coverage (==6.2) ; extra == 'dev'",
      "freezegun (==1.2.1) ; extra == 'dev'",
      "isort (==5.10.1) ; extra == 'dev'",
      "pytest (==7.0.1) ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Dictum repository",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14038906,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "276fffad2c327c12988c4ce56cc9cbd207d73d21ea7a3b000706c6044f51662d",
          "md5": "56e972e7c9bad61d5efe1e8e1afb6f21",
          "sha256": "674ac9d62017a01e9d0b24bd820e9aa24891fcaca44983a3f8fdacee77b98966"
        },
        "downloads": -1,
        "filename": "redictum-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56e972e7c9bad61d5efe1e8e1afb6f21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16196,
        "upload_time": "2022-06-05T18:27:20",
        "upload_time_iso_8601": "2022-06-05T18:27:20.658295Z",
        "url": "https://files.pythonhosted.org/packages/27/6f/ffad2c327c12988c4ce56cc9cbd207d73d21ea7a3b000706c6044f51662d/redictum-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92c07f786dde8da5ce236a79baeb3399234cb596b3eff3b6adbf62b176b325e0",
          "md5": "243aa9bb1798c3557dde1d708758ecad",
          "sha256": "20fdddf69a54e75e3274538585c6a62acf06b16f425d7142001c6e76a548669c"
        },
        "downloads": -1,
        "filename": "redictum-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "243aa9bb1798c3557dde1d708758ecad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16575,
        "upload_time": "2022-06-05T18:27:23",
        "upload_time_iso_8601": "2022-06-05T18:27:23.093014Z",
        "url": "https://files.pythonhosted.org/packages/92/c0/7f786dde8da5ce236a79baeb3399234cb596b3eff3b6adbf62b176b325e0/redictum-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "276fffad2c327c12988c4ce56cc9cbd207d73d21ea7a3b000706c6044f51662d",
        "md5": "56e972e7c9bad61d5efe1e8e1afb6f21",
        "sha256": "674ac9d62017a01e9d0b24bd820e9aa24891fcaca44983a3f8fdacee77b98966"
      },
      "downloads": -1,
      "filename": "redictum-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "56e972e7c9bad61d5efe1e8e1afb6f21",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16196,
      "upload_time": "2022-06-05T18:27:20",
      "upload_time_iso_8601": "2022-06-05T18:27:20.658295Z",
      "url": "https://files.pythonhosted.org/packages/27/6f/ffad2c327c12988c4ce56cc9cbd207d73d21ea7a3b000706c6044f51662d/redictum-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92c07f786dde8da5ce236a79baeb3399234cb596b3eff3b6adbf62b176b325e0",
        "md5": "243aa9bb1798c3557dde1d708758ecad",
        "sha256": "20fdddf69a54e75e3274538585c6a62acf06b16f425d7142001c6e76a548669c"
      },
      "downloads": -1,
      "filename": "redictum-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "243aa9bb1798c3557dde1d708758ecad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16575,
      "upload_time": "2022-06-05T18:27:23",
      "upload_time_iso_8601": "2022-06-05T18:27:23.093014Z",
      "url": "https://files.pythonhosted.org/packages/92/c0/7f786dde8da5ce236a79baeb3399234cb596b3eff3b6adbf62b176b325e0/redictum-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}