{
  "info": {
    "author": "",
    "author_email": "Rachel Petherbridge <rachelpetherbridge@g.harvard.edu>, Katherine Keller <katherinekeller@g.harvard.edu>, Aashna Shah <aashnashah@g.harvard.edu>, David Paquette <davidpaquette@college.harvard.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![Image of coverage workflow status](https://code.harvard.edu/CS107/team15/actions/workflows/coverage.yml/badge.svg?branch=main) ![Image of test workflow status](https://code.harvard.edu/CS107/team15/actions/workflows/test.yml/badge.svg?branch=main)\n\n## Introduction:\nThis software implements automatic differentiation, a computationally ergonomic method to compute first derivatives of functions. As first derivatives are the heart of Jacobian matrices, which in turn are the heart of many methods in dynamical systems and statistics including linearization techniques like Newton's Method, determination of stability of dynamic systems through observation of eigenvalues, bifurcation analysis, and nonlinear least squares regression. Systems can be modelled through explicit coding of the derivation of a model, but this method is tedious and prone to errors. Alternatively, symbolic derivation through a graph based analysis can be used to find derivatives; however, these methods aren't conducive to interpretative code environments such as Python.  This leaves numerical methods such as finite-differences and automatic differentiation to bridge the gap. Finite differences approximates derivatives from first principles, using some small value of $\\epsilon$ to approximate the limit to zero; however, these systems can suffer from accuracy problems, and choosing a suitable value $\\epsilon$ becomes non-trivial. The last alternative, automatic differentiation, is what this package implements. Automatic differentiation is exact, efficient, and amenable to OOP systems. This library provides a resource for automatic differentiation.\n\n## How to Use:\n\n### Installing and setting up a virual environment \nOur package, ```autoDiff_team15_2022```, is distributed using setuptools, and users can install it using pip-install. The package is currently on pypi.org.\n\n```\n#install autoDiff_team15_2022\npython3 -m pip install autoDiff_team15_2022\n\n#import autoDiff_team15_2022 into python environment\nfrom autoDiff_team15_2022 import *\n```\n\nUsing this package only requires Numpy. The pyproject.toml contains dependencies to automatically install Numpy when the package is installed by the user.\n\n### Utilizing the core classes\n\nAfter installing ```autoDiff_team15_2022```, the user can utilize two core classes: ```Forward_AD``` and ```Reverse_AD```. These two classes live in the ```driver.py``` module and can be used to implement forward or reverse mode AD. Both classes contain the same key attributes: a ```values``` method to retrieve value(s) for a given function and input(s), and ```grad``` method for obtaining the derivative,gradient, and jacobian for scalar univariate functions,  functions, and multiple vector functions, respectively.\n\n\n#### Forward Mode AD\n\n\n\nTo implement forward mode, the user must first import the driver module which contains the ```Forward_AD``` class. \n\n```  \n#import autoDiff \nfrom autoDiff_team15_2022 import *\n\n```  \n\nSecond, the user must then define a function to evaluate. For univariate functions with a scalar input, the derivative can be computed. For multivariate functions with scalar or vector inputs, the gradient or jacobian can be computed, respectively. ```Forward_AD``` and ```Reverse_AD``` classes will automatically perform the jacobian, gradient or derivative, with no additional input needed from the user. The following example demonstrates how to implement the package for the core functions:\n\n1) Scalar, univariate functions\n```  \n#define function to evaluate\n>>> def func(x):\n        return 2x + sin(x)\n\n#instantiate an Forward Mode AD ojbect\n>>> ad_obj = Forward_AD([func])\n\n#retrieve derivative evaluate at x = 1 \n>>> ad_obj.grad([1])\n[2.54030]\n\n#retrieve values of f(x) at x = 1\n>>> ad_obj.values([1])\n[2.84147]\n\n```  \n\nThe ```values``` and ```grad``` methods returns a single value in a numpy array with the function value and function gradient at the input values, respectively.\n\nSimilarly, the directional derivative or gradient can be computed for multivariate functions with a scalar input:\n\n2) Mulitple functions\n```  \n#define functions to evaluate for gradient \n>>> def func(x,y):\n        return 2*sin(x) + cos(y) + 1\n\n#instantiate an Forward Mode AD ojbect\n>>> ad_obj = Forward_AD([func])\n\n#retrieve derivative evaluate at x = 1 and y = 0\n>>> ad_obj.grad([1,0])\n[1.08060,0]\n\n#retrieve values from the f(x) for x = 1 and y = 0\n>>> ad_obj.values([1,0])\n[3.6829]\n \n``` \nHere, the gradient is computed for the function, $2*sin(x) + cos(y) + 1$ for the values $x=0$ and $y=1$. The gradient function will return an array with $\\frac{\\partial f}{\\partial x}$ as the first value and $\\frac{\\partial f}{\\partial y}$ as the second value. The user can also get the value of the function for a given x and y value using the ```values``` method. \n\nThe user can also compute the jacobian for higher order functions. Using the same procedure as above, the ```grad``` method will return a vector valued matrix of first order partial derivatives.\n\n3) Multiple functions\n``` \n#define functions to evaluate for jacobian\n>>> def fn(x,y):\n        return log(x)\n\n>>> def fn2(x,y):\n        return 2*sin(x) + cos(y) + x/4\n\n#instantiate an Forward Mode AD ojbect\n>>> ad_obj = Forward_AD([fn1,fn2])\n\n#retrieve derivative evaluate at x = 1 and y = 0\n>>> ad_obj.grad([1,0])\n[1.33060,0][2.93294,0]\n\n#retrieve values from the f(x) for x = 1 and y = 0\n>>> ad_obj.values([1,0])\n[2.93294,0]\n\n```\n\nThe resulting jacobian matrix is: $\\begin{matrix}\n\\frac{1}{x} & 0 \\\\\n2cos(x) + \\frac{1}{4} & -sin(y) \n\\end{matrix}$\n\nand is evaluated at the $x =0$ and $y=1$. The ```grad``` method will return a matrix, like above, evaluated at a given x and y value. The user can retrieve the value of the function for a given x and y value. The ```values``` method will return a a list with value fo the first function as the first value and the value of the second function as the second value.\n\n\n### Reverse Mode AD \n\n\nSimilar to forward mode, the user must first import the driver module which contains the ```Reverse_AD``` class. Importantly, the ```Reverse_AD``` class utilizes the ```Node``` class which stores the derivative of each node and the relationship between the child and parent node, such that gradient can computed recursively during the reverse pass. The user must then define a function to evaluate. The user then can instantiate a Reverse mode AD object. See the following example:\n\n1) single value, scalar function\n```  \n#define function to evaluate\n>>> def func(x):\n        return exp(x) + x ** 2\n\n#instantiate an Forward Mode AD ojbect\nad_obj = Reverse_AD([func])\n\n#retrieve derivative evaluate at x = 1 \n>>> ad_obj.grad([1])\n[4.71828]\n\n#retrieve values of f(x) at x =1\n>>> ad_obj.values([1])\n[3.71828]\n\n```  \nSimilar to forward mode, once the reverse mode object is instantiated the value of the function for a given x value and its derivative can be retrieved using the ```values``` and ```grad``` methods, respectively. Examples for single functions with vector inputs and multiple functions are shown below:\n\n2) Single value function, vector input\n```  \n#define function to evaluate\n>>> def func(x,y):\n        return sin(x) + logistic(y)\n\n#instantiate an Reverse Mode AD ojbect\n>>> ad_obj = Reverse_AD([func])\n\n#retrieve derivative evaluate at x = 1  and y = 0\n>>> ad_obj.grad([1,0])\n[0.54030, 0.25]\n\n#retrieve values of f(x) at x =1 and y = 0\n>>> ad_obj.values([1,0])\n[1.34147]\n\n```  \n3) Multiple Functions\n\n``` \n#define functions to evaluate for jacobian\n >>> def fn1(x, y):\n        return sin(x)+ logistic(y)\n    \n >>> def fn2(x, y):\n        return cos(x)+y+30*x + 40*y\n\n >>> def fn3(x, y):\n        return 1 + x**2 + y\n\n#instantiate an Forward Mode AD ojbect\n>>> ad_obj = Reverse_AD([fn1,fn2,fn3])\n\n#retrieve derivative evaluate at x = 1 and y = 0\n>>> ad_obj.grad([1,0])\n[[0.54030, 0.25][29.1585, 41][2, 1]]\n\n#retrieve values from the f(x) for x = 1 and y = 0\n>>> ad_obj.values([1,0])\n[1.34147,30.54030, 2]\n\n```\n\nUltimately, the user should manage to implement the forward and reverse mode AD fairly easily using the examples above. The current form does require that the user adhere to implementation guidelines described above, otherwise the user may encounter errors. \n\n## Software Organization:\n\n**Directory Structure**: The package is organized with a series subpackages which implement basic functionalities to perform autodifferentiation.\n\n``` \n    autoDiff_team15_2022\n    ├── README.md\n    ├── pyproject.toml\n    ├── LICENSE\n    ├── examples\n       ├── rootfinding.py\n       ├── rootfinding.ipynb\n    ├── src\n        ├── autoDiff_team15_2022\n            ├── __init__.py\n            ├── dualNum.py\n            ├── elemFunctions.py\n            ├── differentiation.py\n            ├── node.py   \n            ├── driver.py\n    ├── tests\n       ├── autodiff_tests\n           ├── test_elem.py\n           ├── test_dual.py\n           ├── test_differentiation.py\n           ├── test_node.py\n           ├── test_driver.py\n       ├── run_tests.sh\n       ├── check_coverage.sh\n\n```\n**Source Code Modules**: \n  - ```node.py```\n      - Given a function, returns a node in the computational graph. It contains a class object, ```Node```, and stores the children of the node, the value of the function, and the derivative of the function for a given value as attributes. ```node.py``` also overloads basic elementary operations for ```Node``` class.\n  - ```elemFunctions.py```:\n      - Overloads elementary operation functions and stores their derivatives. For an a DualNumber or Node input, this modules calculates the value and its derviative. However, if the input is another type, we resort to numpy implementations of mathematical operators. \n  - ```dualNum.py```:\n      - Implements a DualNumber class and overloads basic numerical and mathematical operations of python. The class implements operators to calculate the the numerical value of a given function and at its derivatives. There is also a derivative function which implements the chain rule for non-elementary operations.  \n  - ```differentiation.py```: \n      - contains methods to comput retrieve the value, gradient and jacobian for a given function during forward mode AD.\n  - ```driver.py```: \n      - A class which contains methods to istantiate an AD object. It contains methods to implement forward or reverse mode AD.  It contains methods to retrieve the gradient and values by calling methods in the ```differentiation.py``` module for forward mode. \n\n## Broader Impacts and Inclusivity Statement\n\n#### Broader impacts\nAutomatic differentiation a is widely used tool, particularly in the field of machine learning and engineering. It is especially useful tool for numerical differentiation of complex differential equations that scientists and non-scientists encounter every day across numerous fields. Continuing in the open access spirit of python, we offer an open access software to perform forward and reverse mode AD. In creating this package, we are hopping to help early career scientists with implementing numerical differentiation, which is precise and requires little computational expense. We hope that this package will serve as a jumping off point for other novice coders.\n\n#### Inclusivity\nSuccessful scientific pursuits hinges on principles of collaboration, honesty, and inclusivity. Research, in itself, is the pursuit of knoweldge and truth, and requires discourse and engagement among researches from diverse fields without discrimination or intolerance. Central to the goal of this project is creating an open-sourced package which is accessible and can be used widely and ubiquitously. As a diverse group of non-computer scientists, we are collectivley committed to ensuring that all users can contribute to this package to improve the quality of the existing code base. We ask that contributors  are respectful to others regardless of identity and to exercise tolerance. Pull requests will be reviewed blindly by at least two core developers. Finally, unethical and/or illegal aplications of this package will not be tolerated. \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "autoDiff-team15-2022",
    "package_url": "https://pypi.org/project/autoDiff-team15-2022/",
    "platform": null,
    "project_url": "https://pypi.org/project/autoDiff-team15-2022/",
    "project_urls": {
      "Homepage": "https://code.harvard.edu/CS107/team15/"
    },
    "release_url": "https://pypi.org/project/autoDiff-team15-2022/1.0.2/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.7",
    "summary": "This package implements forward and reverse mode auto-differentiation",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16061010,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a998a543205ad726bb04bdaa74b0d221d8c077d1ce610328ad7708cb92ce420",
          "md5": "8c40fe0262cd032fd16d3d262f860ccd",
          "sha256": "284ecddb51bf27a3b94d5d982e996d9603a2a50e3641ad7dfef4115b31230d29"
        },
        "downloads": -1,
        "filename": "autoDiff_team15_2022-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c40fe0262cd032fd16d3d262f860ccd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14676,
        "upload_time": "2022-12-09T02:58:26",
        "upload_time_iso_8601": "2022-12-09T02:58:26.781070Z",
        "url": "https://files.pythonhosted.org/packages/9a/99/8a543205ad726bb04bdaa74b0d221d8c077d1ce610328ad7708cb92ce420/autoDiff_team15_2022-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee8b83811141edfbd0fd9dcb2cf76b26ad670a410e2f772d3381caeb2abe733d",
          "md5": "60e8557306c0c3d9eaff652d946bbf7b",
          "sha256": "81583c4fa376848a4274eb381c2df40374aeea0f428c9651d7fafa8a6e4cdcda"
        },
        "downloads": -1,
        "filename": "autoDiff_team15_2022-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "60e8557306c0c3d9eaff652d946bbf7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15949,
        "upload_time": "2022-12-09T02:58:28",
        "upload_time_iso_8601": "2022-12-09T02:58:28.071776Z",
        "url": "https://files.pythonhosted.org/packages/ee/8b/83811141edfbd0fd9dcb2cf76b26ad670a410e2f772d3381caeb2abe733d/autoDiff_team15_2022-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a72d8eb441f9f20a1bb7f4add0c28002834b30d34c363202187dac0c4754e8c9",
          "md5": "457d492fb427f4ab14ff7da67ed778f1",
          "sha256": "cc0075d8e1dc1fb62641d85364271084276926f429e931a930bbe474083b6c29"
        },
        "downloads": -1,
        "filename": "autoDiff_team15_2022-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "457d492fb427f4ab14ff7da67ed778f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14673,
        "upload_time": "2022-12-09T03:19:16",
        "upload_time_iso_8601": "2022-12-09T03:19:16.422364Z",
        "url": "https://files.pythonhosted.org/packages/a7/2d/8eb441f9f20a1bb7f4add0c28002834b30d34c363202187dac0c4754e8c9/autoDiff_team15_2022-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ed5dbcd2c9903872f3bbc6eb57afbde1e9290c7b9a3312f7661000bea808bf8",
          "md5": "7bee1964a8de52a2a5655d447dbcfe64",
          "sha256": "5a9d7c08007627bb4088f24f4272458f0c47581df9c7125034b1f5a78322946d"
        },
        "downloads": -1,
        "filename": "autoDiff_team15_2022-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7bee1964a8de52a2a5655d447dbcfe64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15915,
        "upload_time": "2022-12-09T03:19:17",
        "upload_time_iso_8601": "2022-12-09T03:19:17.853949Z",
        "url": "https://files.pythonhosted.org/packages/9e/d5/dbcd2c9903872f3bbc6eb57afbde1e9290c7b9a3312f7661000bea808bf8/autoDiff_team15_2022-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca5c5c8064cce9f81510c2513b7b8f284b7f6ebcde3158de9acd1c5c9468099f",
          "md5": "4db0e121d9396ebf83e994c11f3e0165",
          "sha256": "aa13ddb3c8790bf259b66e09d77a5292b0edc509c8818cbc415d1525dd6e601c"
        },
        "downloads": -1,
        "filename": "autoDiff_team15_2022-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4db0e121d9396ebf83e994c11f3e0165",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6196,
        "upload_time": "2022-12-10T23:14:06",
        "upload_time_iso_8601": "2022-12-10T23:14:06.267426Z",
        "url": "https://files.pythonhosted.org/packages/ca/5c/5c8064cce9f81510c2513b7b8f284b7f6ebcde3158de9acd1c5c9468099f/autoDiff_team15_2022-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cff52c320b0e27dd02c846370ddab3726d82a7b165bcb0b9ffa4305a82f709e",
          "md5": "17a15dd3837b2ceffe8fe2abdc002910",
          "sha256": "35b2addd9e8d1bf904a3ffcc5e7cf851a92ed62d12a75229b88e1fd703df23a2"
        },
        "downloads": -1,
        "filename": "autoDiff_team15_2022-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "17a15dd3837b2ceffe8fe2abdc002910",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6363,
        "upload_time": "2022-12-10T23:14:07",
        "upload_time_iso_8601": "2022-12-10T23:14:07.864576Z",
        "url": "https://files.pythonhosted.org/packages/4c/ff/52c320b0e27dd02c846370ddab3726d82a7b165bcb0b9ffa4305a82f709e/autoDiff_team15_2022-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca5c5c8064cce9f81510c2513b7b8f284b7f6ebcde3158de9acd1c5c9468099f",
        "md5": "4db0e121d9396ebf83e994c11f3e0165",
        "sha256": "aa13ddb3c8790bf259b66e09d77a5292b0edc509c8818cbc415d1525dd6e601c"
      },
      "downloads": -1,
      "filename": "autoDiff_team15_2022-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4db0e121d9396ebf83e994c11f3e0165",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6196,
      "upload_time": "2022-12-10T23:14:06",
      "upload_time_iso_8601": "2022-12-10T23:14:06.267426Z",
      "url": "https://files.pythonhosted.org/packages/ca/5c/5c8064cce9f81510c2513b7b8f284b7f6ebcde3158de9acd1c5c9468099f/autoDiff_team15_2022-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4cff52c320b0e27dd02c846370ddab3726d82a7b165bcb0b9ffa4305a82f709e",
        "md5": "17a15dd3837b2ceffe8fe2abdc002910",
        "sha256": "35b2addd9e8d1bf904a3ffcc5e7cf851a92ed62d12a75229b88e1fd703df23a2"
      },
      "downloads": -1,
      "filename": "autoDiff_team15_2022-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "17a15dd3837b2ceffe8fe2abdc002910",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6363,
      "upload_time": "2022-12-10T23:14:07",
      "upload_time_iso_8601": "2022-12-10T23:14:07.864576Z",
      "url": "https://files.pythonhosted.org/packages/4c/ff/52c320b0e27dd02c846370ddab3726d82a7b165bcb0b9ffa4305a82f709e/autoDiff_team15_2022-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}