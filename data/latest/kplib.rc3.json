{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# kplib\n\n[![pipeline status](https://gitlab.com/muellergroup/kplib/badges/master/pipeline.svg)](https://gitlab.com/muellergroup/kplib/commits/master)\n\n\nKpLib is a C++ library for finding the optimal Generalized Monkhorst-Pack k-points grid. It can be imported into electronic-structure packages as a generator of efficient generalized *k*-point grids, or be integrated into user scripts through the python interface.\n\nFor questions of kpLib and underlying algorithms, you are welcomed to check our paper at [here](https://doi.org/10.1016/j.commatsci.2020.110100) or send emails to kpoints@jhu.edu.\n\n# Usage\n\n## Route I: Integrate kpLib as a C++ library\n---\n### Compile kpLib\nWe use `cmake` to detect native build environment and generate native build files. For Unix-like operating systems, users can build the project by:\n\n    $ git clone https://gitlab.com/muellergroup/kplib.git\n    $ cd kplib\n    $ mkdir build\n    $ cd build\n    $ cmake ..\n    $ make\n\nThen you can find a static library `libkpoints.a` and a dynamic library `libkpoints.so` in the `./build` directory.\n\n### Use kpLib in your code\n\nThere are basically two steps:\n\n1. copy the header file `src/kPointLatticeGenerator.h` to your `include` folder, and add the following line to your source code\n\n        #include \"kPointLatticeGenerator.h\"\n\n2. link the library at the linking stage.\n\n    For example, to link the static library and compile the object `myapp.o` to the final executable `myapp`, you can\n\n        $ g++ myapp.o -L /path/to/lib libkpoints.a -o myapp\n\n    If you want to use the dynamic library, you can\n\n        $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/lib\n        $ g++ myapp.o -L /path/to/lib -lkpoints -o myapp\n\n    The first line tells the loader, `ld`, where to find the shared library at runtime, since the dynamic linkage only puts a reference of the library in the executable.\n\nThen you are ready to go!\n\n## Route II: Integrate KpLib through Python Interface\n---\n\n### Installation\n\nThe source code is downloaded at https://gitlab.com/muellergroup/kplib .\n\n```\n$ git clone https://gitlab.com/muellergroup/kplib.git\n```\n\nIn order to install this package use pip:\n\n```\n$ pip install \"kplib\"\n```\n\n### Command-line interface `kpgen`\n\nYou can use the command line interface to generate Generalized Monkhorst-Pack k-points grid by calling `kpGen` in terminal.\n\n`kpGen` reads the input file by using `pymatgen`, so it in principle support all kinds\nof structure format supported by `pymatgen`. By default, it reads POSCAR as input file.\nCurrently, the output file which contain the k-points is writen as VASP's KPOINTS file.\n\nUsers can check and see the details of the arguments and options by `kpGen --help`.\n\n### Python API reference and examples\n\nFor users who wants to use `kplib` in their python packages, the recommended method is to use the `get_kpoints` function. It returns a dict, the keys of which are:\n\n- `min_periodic_distance`: The minimum distance between lattice points on the real-space superlattice.\n- `num_distinct_kpts`: The number of distinct k-points reduced by lattice symmetry.\n- `num_total_kpts`: The number of total k-points.\n- `coords`: The coordinates of k-points, represented in refraction coordinate.\n- `weights`: The weights of corresponding k-points.\n\n\n```python\nimport numpy as np\nfrom kplib import get_kpoints\n\nstruc = ...\n\nkpts = get_kpoints(struc, minDistance=24.9, include_gamma=include_gamma)\n```\n\n# How to cite\nIf you use the kplib in generating generalized *k*-point grids, please cite the following article:\n\nWang, Y., Wisesa, P., Balasubramanian, A., Dwaraknath, S. & Mueller, T. Rapid generation of optimal generalized Monkhorst-Pack grids. Comp Mater Sci, 110100, doi:https://doi.org/10.1016/j.commatsci.2020.110100 (2020).\n\n# Documentation\n## C++ API\n\n#### Class: `kPointLatticeGenerator`\n\n    template <typename T>\n    using Tensor = std::vector<std::vector<T>>;\n\n    /**\n     * Constructor.\n     *\n     * To see how the variables are defined, check the \"Conventions\" section below)\n     *\n     * @param primVectorsArray            primitive lattice vectors in rows.\n     * @param conventionalVectorsArray    conventional lattice vectors in rows.\n     * @param latticePointOperatorsArray  point operators of the Laue Class\n                                          of the input structure, expressed\n                                          in the basis of primitive lattice vectors\n     * @param numOperators                number of point operators in above array\n     * @param isConventionalHexaognal     whether the conventional lattice is\n                                          hexagonal\n     */\n    KPointLatticeGenerator(const double primVectorsArray[3][3],\n\t                       const double conventionalVectorsArray[3][3],\n\t                       const int latticePointOperatorsArray[][3][3],\n\t                       const int numOperators,\n\t                       const bool isConventionalHexagonal);\n\n    /*\n     * Specify whether to generate a gamma-centered grid or a shifted grid.\n     * The available shifts are:\n     *     {{0.0, 0.0, 0.5}, {0.0, 0.5, 0.0}, {0.5, 0.0, 0.0}, {0.5, 0.5, 0.0},\n     *      {0.5, 0.0, 0.5}, {0.0, 0.5, 0.5}, {0.5, 0.5, 0.5}}\n     * Basiclly, side centers, face centers and the body center.\n     *\n     * @param includeGamma   TRUE:  gamma-centered grid\n     *                       FALSE: grid with one of the above shift\n     *                       AUTO:  search both shifted and gamma-centered grid\n     *                              and return the best one.\n     */\n    enum INCLUDE_GAMMA { TRUE, FALSE, AUTO };\n    void includeGamma(INCLUDE_GAMMA includeGamma);\n\n    /*\n     * @param minDistance  The returned grid should have a corresponding\n     *                     real-space superlattice whose \"minimum periodic distance\"\n     *                     is no smaller than this value.\n     * @param minSize      Minimum number of total k-points of grids returned.\n     */\n    KPointLattice getKPointLattice(const double minDistance,\n                                   const int minSize);\n\n#### Class: `KPointLattice`\n\nIt's meant to hold the found k-point grid and provide query functions.\n\n\nThe main query routines of this type:\n\n\tdouble getMinPeriodicDistance();\n\n    int getNumDistinctKPoints();\n\n    int numTotalKPoints();\n\n    /*\n     * @return Tensor<double> 2D arrays of coordinates. It's basically a wrapper\n     *                        of \"double coords[][3]\".\n     */\n\tTensor<double> getKPointCoordinates();\n\n    /*\n     * @return vector<int>  1D array of k-points weights.\n     */\n\tstd::vector<int> getKPointWeights();\n\n\n## Conventions\n\nThis section specifies the conventions we use for the variables used in `kPointLatticeGenerator` constructor:\ni.e. `primVectors`, `conventionalVectors`, `latticePointOperators` and `isConventionalHexagonal`.\n\n#### Lattice Vectors\n\nLattice vectors are expressed as row vectors of the lattice matrix:\n\n    double primtiveVectors[3][3] = {{a_x, a_y, a_z},\n                                    {b_x, b_y, b_z},\n                                    {c_a, c_z, c_y}}\n\n#### Point Operators\n\nEach operation is a 3x3 integral matrix, representing how a **fractional coordinate** in the **primitive lattice basis** is transformed under this operation.\n\n    int latticePointOperations[][3][3];\n\nBecause of the lattice vectors are expressed as rows, each symmetry operation is done through \"x' = x<sup>T</sup> . R\", i.e. vector times matrix.\n\n#### Conventional Lattice Vectors\n\nBecuase of the algorithm we use to efficiently iterate symmetry-preserving superlattice, the conventional lattice vectors should follow the below requirements:\n\n* For all lattice systems, except for **triclinic**, the c-vector should be along the axis of the highest order rotational operation, i.e the 4-fold, 6-fold, 3-fold, 4-fold, any 2-fold, and 2-fold rotation for  **cubic**, **hexagonal**, **trigonal**, **tetragonal**, **orthorhombic**, and **monoclinic** lattices, respectively. This direction is commonly referred as the \"primary symmetry direction\" in crystallography textbooks.\n\n* For **trigonal** lattices, the conventional lattices should be primitive hexagonal lattices, i.e. the trigonal-centered hexagonal.\n\nThe algorithm doesn't put constraints on triclinic system, or on the centering type of lattices in the **2/m** and the **mmm** Laue class.\n\n(Note: User could get the primary directions from the point symmetry opeartions.)\n\n## Example of using kplib -- `demo_kplib`\n\nTo demonstrate the usage of the kpbib, we implement a simple C++ application to find Generalised Monkhorst-Pack k-point grids. It use `spglib` to determine symmetries ([Togo and Tanaka, 2010](https://atztogo.github.io/spglib/index.html)) and output the k-point grid in the format of VASP KPOINTS file.\n\nIt's under the folder `demo_kplib`. To build this application, user should build [`spglib`](https://atztogo.github.io/spglib/index.html) and replace the library file `libsymspg.a` in `./lib`. Then the executable `demo_kplib` can be built by\n\n    $ cd demo_kplib\n    $ mkdir build\n    $ cd build\n    $ cmake ..\n    $ make\n\nThe binary is placed at `./build/demo_kplib`. To call it, use:\n\n    $ demo_kplib /path/to/POSCAR /path/to/PRECALC > KPOINTS\n\nThe POSCAR is one of the standard VASP input file. The PRECALC file is the input file of `demo_kplib` and users can find its specifications on our [website](http://muellergroup.jhu.edu/K-Points.html). Since it's for demonstration purposes, only the parameters `MINDISTANCE`, `MINTOTALKPOINTS`, and `INCLUDEGAMMA` are valid.\n\nThere are some examples of using this application in `demo_kplib/examples`.\n\nFor a more complete application, check our ***K*-point Grid Generator** and ***K*-point Server**.\n\n#### Code snippet of demo_kpib\n\nBelow are excerpts from the application to show how to use the kplib API.\n\n`main.cpp`:\n\n    #include \"kPointLatticeGenerator.h\"\n    #include \"utils.h\"\n    #include \"precalc.h\"\n    #include \"poscar.h\"\n    #include <iostream>\n\n    int main(int argc, char **argv) {\n        if (argc < 3) {\n            std::cerr << \"Usage: ./main /path/to/POSCAR /path/to/PRECALC\"\n                      << std::endl;\n            return 1;\n        }\n        // Parse POSCAR and PRECALC.\n        Poscar poscar;\n        poscar.readFromPoscar(std::string(argv[1]));\n        Precalc precalc(argv[2]);\n\n        // Execute the main routines.\n        KPointLatticeGenerator generator = initializeKPointLatticeGeneratorObject(\n            poscar.primitiveLattice, poscar.coordinates, poscar.atomTypes);\n\n        if (precalc.getIncludeGamma() == \"TRUE\") {\n            generator.includeGamma(TRUE);\n        } else if (precalc.getIncludeGamma() == \"FALSE\") {\n            generator.includeGamma(FALSE);\n        } else if (precalc.getIncludeGamma() == \"AUTO\") {\n            generator.includeGamma(AUTO);\n        }\n\n        KPointLattice latticeGamma = generator.getKPointLattice(\n            precalc.getMinDistance(), precalc.getMinTotalKpoints());\n\n        outputLattice(latticeGamma);\n    }\n\n`utils.cpp`:\n\n    #include \"utils.h\"\n    #include \"spglib.h\"\n    ... // other includes and functions\n\n    // Wrapper of the kPointLatticeGenerator constructor.\n    KPointLatticeGenerator initializeKPointLatticeGeneratorObject(\n            Tensor<double> primitiveLattice,\n            Tensor<double> coordinates,\n            std::vector<int> atomTypes) {\n\n        double primLatticeArray[3][3] = {0};\n        double conventionalLatticeArray[3][3] = {0};\n        int rotation[192][3][3] = {0};\n        int size = 0;\n        bool isConventionalHexagonal = false;\n\n        // use spglib to get necessary parameters for the consturctor\n        // of kPointLatticeGenerator.\n        ...\n\n        KPointLatticeGenerator generator = KPointLatticeGenerator(primLatticeArray,\n                conventionalLatticeArray, rotation, size, isConventionalHexagonal);\n        return generator;\n\n    }",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "VASP,ABINIT,materials science,electronic structure,crystal",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kpLib",
    "package_url": "https://pypi.org/project/kpLib/",
    "platform": "",
    "project_url": "https://pypi.org/project/kpLib/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/kpLib/1.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Library for generating highly-efficient generalized Monkhorst-Pack k-point grids.",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10144516,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdb249c8c56e773f2a48cd3ffab09e3888edd415d1a84f2073591c1e75aaee2e",
          "md5": "311ed3c70f923e17352988a3678dd53a",
          "sha256": "9ca7d8a6c9e074fb0c32126c81e886e81022ef4ef1ba8b91d93d29f4c9900f53"
        },
        "downloads": -1,
        "filename": "kpLib-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "311ed3c70f923e17352988a3678dd53a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29181,
        "upload_time": "2021-04-15T23:33:03",
        "upload_time_iso_8601": "2021-04-15T23:33:03.449999Z",
        "url": "https://files.pythonhosted.org/packages/cd/b2/49c8c56e773f2a48cd3ffab09e3888edd415d1a84f2073591c1e75aaee2e/kpLib-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "476cc27425ec0f6625e62300c4e869dcb04cd3d3f16d7ecd4ec575ddb6f8a2e7",
          "md5": "75a28abae25888589a2dcb3f6fe793f5",
          "sha256": "30f9c13ca1238b192809fb86573e229ce6b5738efab8727bbf773927be9d0075"
        },
        "downloads": -1,
        "filename": "kpLib-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "75a28abae25888589a2dcb3f6fe793f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34445,
        "upload_time": "2021-04-16T16:12:38",
        "upload_time_iso_8601": "2021-04-16T16:12:38.671973Z",
        "url": "https://files.pythonhosted.org/packages/47/6c/c27425ec0f6625e62300c4e869dcb04cd3d3f16d7ecd4ec575ddb6f8a2e7/kpLib-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "221ef490a2a5eb80c79ea5f6a51c236cc9e5dda9ce2aa937588f83d13374bae0",
          "md5": "091eb15321a01b1b33c14cbc13eaa1c8",
          "sha256": "f71561a397ae780e84384ea78a7951cd2b96a843676467c671705d22809d4beb"
        },
        "downloads": -1,
        "filename": "kpLib-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "091eb15321a01b1b33c14cbc13eaa1c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35075,
        "upload_time": "2021-04-22T23:55:43",
        "upload_time_iso_8601": "2021-04-22T23:55:43.346080Z",
        "url": "https://files.pythonhosted.org/packages/22/1e/f490a2a5eb80c79ea5f6a51c236cc9e5dda9ce2aa937588f83d13374bae0/kpLib-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "221ef490a2a5eb80c79ea5f6a51c236cc9e5dda9ce2aa937588f83d13374bae0",
        "md5": "091eb15321a01b1b33c14cbc13eaa1c8",
        "sha256": "f71561a397ae780e84384ea78a7951cd2b96a843676467c671705d22809d4beb"
      },
      "downloads": -1,
      "filename": "kpLib-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "091eb15321a01b1b33c14cbc13eaa1c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 35075,
      "upload_time": "2021-04-22T23:55:43",
      "upload_time_iso_8601": "2021-04-22T23:55:43.346080Z",
      "url": "https://files.pythonhosted.org/packages/22/1e/f490a2a5eb80c79ea5f6a51c236cc9e5dda9ce2aa937588f83d13374bae0/kpLib-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}