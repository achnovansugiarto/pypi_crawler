{
  "info": {
    "author": "Janne Spijkervet",
    "author_email": "janne.spijkervet@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# SimCLR\nPyTorch implementation of SimCLR: A Simple Framework for Contrastive Learning of Visual Representations by T. Chen et al.\nIncluding support for:\n- Distributed data parallel training\n- Global batch normalization\n- LARS (Layer-wise Adaptive Rate Scaling) optimizer.\n\n[Link to paper](https://arxiv.org/pdf/2002.05709.pdf)\n\nOpen SimCLR in Google Colab Notebook (with TPU support)\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1ObAYvVKQjMG5nd2wIno7j2y_X91E9IrX)\n\nOpen SimCLR results comparison on tensorboard.dev:\n\n<p align=\"left\">\n  <a href=\"https://tensorboard.dev/experiment/A3laNdafRBes0oR45Y6LiA/#scalars\" target=\"_blank\">\n    <img src=\"https://github.com/Spijkervet/SimCLR/blob/master/media/tensorboard.png?raw=true\" height=\"40\"/>\n  </a>\n</p>\n\n\n### Quickstart (fine-tune linear classifier)\nThis downloads a pre-trained model and trains the linear classifier, which should receive an accuracy of Â±`82.9%` on the STL-10 test set.\n```\ngit clone https://github.com/spijkervet/SimCLR.git && cd SimCLR\nwget https://github.com/Spijkervet/SimCLR/releases/download/1.2/checkpoint_100.tar\nsh setup.sh || python3 -m pip install -r requirements.txt || exit 1\nconda activate simclr\npython linear_evaluation.py --dataset=STL10 --model_path=. --epoch_num=100 --resnet resnet50\n```\n\n#### CPU\n```\nwget https://github.com/Spijkervet/SimCLR/releases/download/1.1/checkpoint_100.tar -O checkpoint_100.tar\npython linear_evaluation.py --model_path=. --epoch_num=100 --resnet=resnet18 --logistic_batch_size=32\n```\n\n### `simclr` package\nSimCLR for PyTorch is now available as a Python package! Simply run and use it in your project:\n```\npip install simclr\n```\n\nYou can then simply import SimCLR:\n```\nfrom simclr import SimCLR\n\nencoder = ResNet(...)\nprojection_dim = 64\nn_features = encoder.fc.in_features  # get dimensions of last fully-connected layer\nmodel = SimCLR(encoder, projection_dim, n_features)\n```\n\n### Training ResNet encoder:\nSimply run the following to pre-train a ResNet encoder using SimCLR on the CIFAR-10 dataset:\n```\npython main.py --dataset CIFAR10\n```\n\n### Distributed Training\nWith distributed data parallel (DDP) training:\n```\nCUDA_VISIBLE_DEVICES=0 python main.py --nodes 2 --nr 0\nCUDA_VISIBLE_DEVICES=1 python main.py --nodes 2 --nr 1\nCUDA_VISIBLE_DEVICES=2 python main.py --nodes 2 --nr 2\nCUDA_VISIBLE_DEVICES=N python main.py --nodes 2 --nr 3\n```\n\n\n### Results\nThese are the top-1 accuracy of linear classifiers trained on the (frozen) representations learned by SimCLR:\n\n| Method  | Batch Size | ResNet | Projection output dimensionality | Epochs | Optimizer | STL-10 | CIFAR-10\n| ------------- | ------------- | ------------- | ------------- | ------------- | ------------- | ------------- | ------------- |\n| SimCLR + Linear eval. | 256 | ResNet50 | 64 | 100 | Adam | **0.829** | **0.833** | \n| SimCLR + Linear eval. | 256 | ResNet50 | 64 | 100 | LARS | 0.783 | - | \n| SimCLR + Linear eval. | 256 | ResNet18 | 64 | 100 |  Adam | 0.765  | - |\n| SimCLR + Linear eval. | 256 | ResNet18 | 64 | 40 | Adam | 0.719  | - |\n| SimCLR + Linear eval. | 512 | ResNet18 | 64 | 40 | Adam | 0.71 | - |\n| Logistic Regression | - | - | - | 40 | Adam | 0.358 | 0.389 |\n\n\n\n### Pre-trained models\n| ResNet (batch_size, epochs) | Optimizer | STL-10 Top-1 |\n| ------------- | ------------- | ------------- |\n| [ResNet50 (256, 100)](https://github.com/Spijkervet/SimCLR/releases/download/1.2/checkpoint_100.tar) | Adam | **0.829** |\n| [ResNet18 (256, 100)](https://github.com/Spijkervet/SimCLR/releases/download/1.1/checkpoint_100.tar) | Adam | 0.765 |\n| [ResNet18 (256, 40)](https://github.com/Spijkervet/SimCLR/releases/download/1.0/checkpoint_40.tar) | Adam | 0.719 |\n\n`python linear_evaluation.py --model_path=. --epoch_num=100`\n\n#### LARS optimizer\nThe LARS optimizer is implemented in `modules/lars.py`. It can be activated by adjusting the `config/config.yaml` optimizer setting to: `optimizer: \"LARS\"`. It is still experimental and has not been thoroughly tested.\n\n## What is SimCLR?\nSimCLR is a \"simple framework for contrastive learning of visual representations\". The contrastive prediction task is defined on pairs of augmented examples, resulting in 2N examples per minibatch. Two augmented versions of an image are considered as a correlated, \"positive\" pair (x_i and x_j). The remaining 2(N - 1) augmented examples are considered negative examples. The contrastive prediction task aims to identify x_j in the set of negative examples for a given x_i.\n\n<p align=\"center\">\n  <img src=\"https://github.com/Spijkervet/SimCLR/blob/master/media/architecture.png?raw=true\" width=\"500\"/>\n</p>\n\n## Usage\nRun the following command to setup a conda environment:\n```\nsh setup.sh\nconda activate simclr\n```\n\nOr alternatively with pip:\n```\npip install -r requirements.txt\n```\n\nThen, simply run for single GPU or CPU training:\n```\npython main.py\n```\n\nFor distributed training (DDP), use for every process in nodes, in which N is the GPU number you would like to dedicate the process to:\n```\nCUDA_VISIBLE_DEVICES=0 python main.py --nodes 2 --nr 0\nCUDA_VISIBLE_DEVICES=1 python main.py --nodes 2 --nr 1\nCUDA_VISIBLE_DEVICES=2 python main.py --nodes 2 --nr 2\nCUDA_VISIBLE_DEVICES=N python main.py --nodes 2 --nr 3\n```\n\n`--nr` corresponds to the process number of the N nodes we make available for training.\n\n### Testing\nTo test a trained model, make sure to set the `model_path` variable in the `config/config.yaml` to the log ID of the training (e.g. `logs/0`).\nSet the `epoch_num` to the epoch number you want to load the checkpoints from (e.g. `40`).\n\n```\npython linear_evaluation.py\n```\n\nor in place:\n```\npython linear_evaluation.py --model_path=./save --epoch_num=40\n```\n\n\n## Configuration\nThe configuration of training can be found in: `config/config.yaml`. I personally prefer to use files instead of long strings of arguments when configuring a run. An example `config.yaml` file:\n```\n# train options\nbatch_size: 256\nworkers: 16\nstart_epoch: 0\nepochs: 40\ndataset_dir: \"./datasets\"\n\n# model options\nresnet: \"resnet18\"\nnormalize: True\nprojection_dim: 64\n\n# loss options\ntemperature: 0.5\n\n# reload options\nmodel_path: \"logs/0\" # set to the directory containing `checkpoint_##.tar` \nepoch_num: 40 # set to checkpoint number\n\n# logistic regression options\nlogistic_batch_size: 256\nlogistic_epochs: 100\n```\n\n## Logging and TensorBoard\nTo view results in TensorBoard, run:\n```\ntensorboard --logdir runs\n```\n\n## Optimizers and learning rate schedule\nThis implementation features the Adam optimizer and the LARS optimizer, with the option to decay the learning rate using a cosine decay schedule. The optimizer and weight decay can be configured in the `config/config.yaml` file.\n<p align=\"center\">\n  <img src=\"https://github.com/Spijkervet/SimCLR/blob/master/media/lr_cosine_decay_schedule.png?raw=true\" width=\"400\"/>\n</p>\n\n#### Dependencies\n```\ntorch\ntorchvision\ntensorboard\npyyaml\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/spijkervet/SimCLR",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simclr",
    "package_url": "https://pypi.org/project/simclr/",
    "platform": "",
    "project_url": "https://pypi.org/project/simclr/",
    "project_urls": {
      "Homepage": "https://github.com/spijkervet/SimCLR"
    },
    "release_url": "https://pypi.org/project/simclr/1.0.2/",
    "requires_dist": [
      "torch",
      "torchvision",
      "pyyaml",
      "tensorboard ; extra == 'fancy_feature'"
    ],
    "requires_python": ">=3.6.0",
    "summary": "PyTorch implementation of SimCLR: A Simple Framework for Contrastive Learning of Visual Representations by T. Chen et al.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9213155,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "913ab6b77a8cc77a218723b752b7499d4e54f2491bb63990eeba9fb140b3569e",
          "md5": "ba2920d5b2887900fd46f413170221f4",
          "sha256": "57c7c5dbdf6a497c990ce32522b34198b9f0beb19b31583d2e0c90935db8bdee"
        },
        "downloads": -1,
        "filename": "simclr-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba2920d5b2887900fd46f413170221f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 21629,
        "upload_time": "2021-01-23T22:51:14",
        "upload_time_iso_8601": "2021-01-23T22:51:14.598496Z",
        "url": "https://files.pythonhosted.org/packages/91/3a/b6b77a8cc77a218723b752b7499d4e54f2491bb63990eeba9fb140b3569e/simclr-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7001c08bc9549e6caa19cde98dd8be74966d575a69911c53e8d9f841d0b7fb4",
          "md5": "51535417ed9d63c81720f637f4aea3f5",
          "sha256": "85ff05f5cadf0776437c18a74bbb59088974963bc136da990c92307bdd877948"
        },
        "downloads": -1,
        "filename": "simclr-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "51535417ed9d63c81720f637f4aea3f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 19807,
        "upload_time": "2021-01-23T22:51:16",
        "upload_time_iso_8601": "2021-01-23T22:51:16.107604Z",
        "url": "https://files.pythonhosted.org/packages/f7/00/1c08bc9549e6caa19cde98dd8be74966d575a69911c53e8d9f841d0b7fb4/simclr-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4843abed969a3e0e7e46f0cadcadb7615fd56e8c96fc36a7d160f47d61428f07",
          "md5": "c284775105eb51852d2b94f54e8b5e86",
          "sha256": "b36caccb57ef877ad9a2e7690ab4d6a0a3746b0ef6b891c1ac1378fb7eb07f84"
        },
        "downloads": -1,
        "filename": "simclr-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c284775105eb51852d2b94f54e8b5e86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 21816,
        "upload_time": "2021-01-23T23:04:21",
        "upload_time_iso_8601": "2021-01-23T23:04:21.139883Z",
        "url": "https://files.pythonhosted.org/packages/48/43/abed969a3e0e7e46f0cadcadb7615fd56e8c96fc36a7d160f47d61428f07/simclr-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1fccc7ce94e16e0d448c62383e612c08702c6efcf546ee1cc93fda8c0b6b856",
          "md5": "48f43bc5269a92a673bee7f9f27fe1f5",
          "sha256": "711dd258a752f71369f5e799daea4305b06d65068221d89768b79819a73c249d"
        },
        "downloads": -1,
        "filename": "simclr-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "48f43bc5269a92a673bee7f9f27fe1f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 20215,
        "upload_time": "2021-01-23T23:04:22",
        "upload_time_iso_8601": "2021-01-23T23:04:22.292697Z",
        "url": "https://files.pythonhosted.org/packages/f1/fc/cc7ce94e16e0d448c62383e612c08702c6efcf546ee1cc93fda8c0b6b856/simclr-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4ee4f0e69e775186216eb1692b03432c6628cc3d513ebdf6a1e0dda2f4d1f38",
          "md5": "afd5a12fe35878928dbb785b048f4f85",
          "sha256": "92332d2a7b54ffa25295d7b6e2c990afad208a6715e8dd0a147b7b0c859342e6"
        },
        "downloads": -1,
        "filename": "simclr-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afd5a12fe35878928dbb785b048f4f85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 21915,
        "upload_time": "2021-01-23T23:41:51",
        "upload_time_iso_8601": "2021-01-23T23:41:51.957849Z",
        "url": "https://files.pythonhosted.org/packages/a4/ee/4f0e69e775186216eb1692b03432c6628cc3d513ebdf6a1e0dda2f4d1f38/simclr-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76dd9fd568c838c3d008c54ff395020e883062189b09e4b1f8ea1856a3f4b59d",
          "md5": "f6a8e7fccb392a0c335f2c2b6aabc078",
          "sha256": "d6adddcf69376a32e9071e44333fa5b67e36b3d766dbcfd732f5803e92ce6e8e"
        },
        "downloads": -1,
        "filename": "simclr-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f6a8e7fccb392a0c335f2c2b6aabc078",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 19359,
        "upload_time": "2021-01-23T23:41:53",
        "upload_time_iso_8601": "2021-01-23T23:41:53.176079Z",
        "url": "https://files.pythonhosted.org/packages/76/dd/9fd568c838c3d008c54ff395020e883062189b09e4b1f8ea1856a3f4b59d/simclr-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4ee4f0e69e775186216eb1692b03432c6628cc3d513ebdf6a1e0dda2f4d1f38",
        "md5": "afd5a12fe35878928dbb785b048f4f85",
        "sha256": "92332d2a7b54ffa25295d7b6e2c990afad208a6715e8dd0a147b7b0c859342e6"
      },
      "downloads": -1,
      "filename": "simclr-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "afd5a12fe35878928dbb785b048f4f85",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 21915,
      "upload_time": "2021-01-23T23:41:51",
      "upload_time_iso_8601": "2021-01-23T23:41:51.957849Z",
      "url": "https://files.pythonhosted.org/packages/a4/ee/4f0e69e775186216eb1692b03432c6628cc3d513ebdf6a1e0dda2f4d1f38/simclr-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76dd9fd568c838c3d008c54ff395020e883062189b09e4b1f8ea1856a3f4b59d",
        "md5": "f6a8e7fccb392a0c335f2c2b6aabc078",
        "sha256": "d6adddcf69376a32e9071e44333fa5b67e36b3d766dbcfd732f5803e92ce6e8e"
      },
      "downloads": -1,
      "filename": "simclr-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f6a8e7fccb392a0c335f2c2b6aabc078",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 19359,
      "upload_time": "2021-01-23T23:41:53",
      "upload_time_iso_8601": "2021-01-23T23:41:53.176079Z",
      "url": "https://files.pythonhosted.org/packages/76/dd/9fd568c838c3d008c54ff395020e883062189b09e4b1f8ea1856a3f4b59d/simclr-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}