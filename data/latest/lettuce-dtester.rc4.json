{
  "info": {
    "author": "Gabriel Falcao",
    "author_email": "gabriel@nacaolivre.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# 环境要求\n    python3.7 及以上 pip install lettuce-Dtester\n# 新增指令\n    --lf, --ff, --cc, --tn II --last-failed, --failed-first, --clear-cache, --task-name\n\n    --lf: 仅执行上次未通过的测试案例\n\n    --ff: 优先执行未通过的测试案例，通过的测试案例滞后执行\n\n    --cc: 清除case_cache\n\n    --tn: 在不与其他三个命令一起使用时指的是指定任务目录即 festures文件夹下的目录\n\n    --lf --tn task_name: 仅执行指定任务的未通过案例\n\n    --ff --tn task_name: 优先执行执行指定任务的未通过案例\n\n    --cc --tn task_name: 删除指定任务所有缓存文件，再次执行\n\n    --cc --lf --tn task_name: 会报错，因为会优先删除缓存文件，删除后无法支持--lf指令\n\n    --cc --ff --tn task_name: 会报错，因为会优先删除缓存文件，删除后无法支持--ff指令\n\n# 目录信息\n    在根目录下生成case_cache目录\n    目录结构如下：（以本次执行案例文件夹为features/fee_test举例）\n    |---case_cache\n        |---{task_name}_cache\n            |---{task_name}(保存本次执行的py文件，用于后续的--ff, --lf执行)\n                |---...py(指代保存的py文件)\n            |---run_res(保存执行结果)\n                |---error_case.feature（保存出错或跳过的案例原文）\n                |---failed_first_case.feature(保存全部案例，但是出错的测试案例在前面)\n                |---res.txt(保存错误或跳过的测试案例原始信息包含报错详情)\n            |---lf_res(保存lf执行后结果，不执行lf命令不生成)\n                |---error_case.feature\n                |---failed_first_case.feature\n                |---res.txt\n            |---ff_res(保存ff执行后结果，不执行ff命令不生成)\n                |---error_case.feature\n                |---failed_first_case.feature\n                |---res.txt\n    \n\n# 使用方法\n    在项目根目录下存在mian.py/run.py作为入口:\n\n    import lettuce\n    import os\n    \n    \n    class HtmlRunner(lettuce.Runner):\n        def __init__(self, base_path, enable_html=False, html_filename=None, enable_email=False, recipients=None,\n                     smtp_host=None, smtp_port=None, credential=None, *args, **kwargs):\n            lettuce.Runner.__init__(self, base_path, *args, **kwargs)\n    \n    \n    def test_a():\n        run_path = lettuce.run_task('case_a')\n        base_path = os.path.join(os.path.dirname(os.curdir),\n                                 run_path)  # the path of .py and .feature\n        lettuce.world.task_path = base_path\n        tests_runner = HtmlRunner(base_path,\n                                  enable_html=True,\n                                  tags=(\"run\",),\n                                  enable_xunit=True,\n                                  verbosity=4)\n        tests_runner.run()\n    \n    \n    if __name__ == '__main__':\n        test_a()\n\n\n\n# 修改信息\n\n    新增文件：cacheprovider.py\n\n    修改lettuce：__init__.py 引用：\n\n    from lettuce.cacheprovider import  build_failed_first_case, run_task\n\n    修改lettuce/plugins/colored_shell_output.py 文件获取案例信息\n\n\n    def wp(l):\n        if l.startswith(\"\\033[1;32m\"):\n            l = l.replace(\" |\", \"\\033[1;37m |\\033[1;32m\")\n        if l.startswith(\"\\033[1;36m\"):\n            world.skip_flag = True\n            l = l.replace(\" |\", \"\\033[1;37m |\\033[1;36m\")\n        if l.startswith(\"\\033[0;36m\"):\n            world.skip_flag = True\n            l = l.replace(\" |\", \"\\033[1;37m |\\033[0;36m\")\n        if l.startswith(\"\\033[0;31m\"):\n            world.fail_flag = True\n            l = l.replace(\" |\", \"\\033[1;37m |\\033[0;31m\")\n        if l.startswith(\"\\033[1;30m\"):\n            l = l.replace(\" |\", \"\\033[1;37m |\\033[1;30m\")\n        if l.startswith(\"\\033[1;31m\"):\n            world.fail_flag = True\n            l = l.replace(\" |\", \"\\033[1;37m |\\033[0;31m\")   \n        return l\n    \n    \n    def wrt(what):\n        if six.PY2:\n            if isinstance(what, unicode):\n                what = what.encode('utf-8')\n        if six.PY3:\n            if isinstance(what, bytes):\n                print(what)\n                what = what.decode('utf-8')\n        world.case.append(what)\n        sys.stdout.write(what)\n\n    修改registry.py生成缓存\n    增加build_case方法\n    def case_data():\n        temp_list = list()\n        _case = world.case[:]\n        for i in _case:\n            a = i.replace(\"\\033[1;37m\", '')\n            a = a.replace(\"\\033[1;32m\", '')\n            a = a.replace(\"\\033[1;30m\", '')\n            a = a.replace(\"\\033[0m\", '')\n            a = a.replace(\"\\033[A\", '')\n            a = a.replace(\"\\033[0;36m\", '')\n            if not a.startswith(\"Feature\"):\n                if a in temp_list:\n                    ...\n                else:\n                    temp_list.append(a)\n                    yield a\n\n    def build_case(scenario):\n    \n        if world.fail_flag is True or world.skip_flag is True:\n            with open(f'{world.cache_path}/res.txt', 'a+', encoding='utf8') as f:\n                with open(f'{world.cache_path}/error_case.feature', 'a+', encoding='utf8') as c:\n                    for a in case_data():\n                        # 收集错误案例详情，支持-lf指令执行上次失败的案例\n                        if \"\\033[0;31m\" not in a and \"\\033[1;31m\" not in a:\n                            if \"#\" in a:\n                                c.write(a.split('#')[0].rstrip() + '\\n')\n                            elif \"|\" in a:\n                                c.write(a)\n                        # 收集错误信息，保存在结果文件\n                        a = a.replace(\"\\033[0;31m\", 'error!')\n                        a = a.replace(\"\\033[1;31m\", 'error!')\n                        a = a.replace(\"\\033[1;41;33m\", '')\n                        f.write(f'{a}\\n')                        \n        else:\n            with open(f'{world.cache_path}/temp_case.feature', 'a+', encoding='utf8') as t:\n                for a in case_data():\n                    if \"#\" in a:\n                        t.write(a.split('#')[0].rstrip() + '\\n')\n                    elif \"|\" in a:\n                        t.write(a)\n        if world.fail_flag is True or world.skip_flag is True:\n            world.case_log_name = int(time.time())\n            with open(f'{world.cache_path}/res.txt', 'a+', encoding='utf8') as f:\n                f.write(f'日志详情见：{world.case_log_name}')\n\n        world.fail_flag = False\n        world.skip_flag = False\n        world.case = []\n    修改CallbackDict类，在每次执行一条案例完成后增加构建缓存函数\n    class CallbackDict(dict):\n        def append_to(self, where, when, function):\n            if not any(_function_matches(o, function) for o in self[where][when]):\n                self[where][when].append(function)\n                if where == 'scenario' and when == 'after_each':\n                    self[where][when].append(build_case)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://lettuce.it",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lettuce-Dtester",
    "package_url": "https://pypi.org/project/lettuce-Dtester/",
    "platform": null,
    "project_url": "https://pypi.org/project/lettuce-Dtester/",
    "project_urls": {
      "Homepage": "http://lettuce.it"
    },
    "release_url": "https://pypi.org/project/lettuce-Dtester/0.2.31/",
    "requires_dist": [
      "python-subunit",
      "sure",
      "fuzzywuzzy",
      "colorama"
    ],
    "requires_python": "",
    "summary": "Behaviour Driven Development for python",
    "version": "0.2.31",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13928680,
  "releases": {
    "0.2.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e35385a771474387d06f6d5c840a2cf6879a8e8232bd221660e9ddbab12ae53",
          "md5": "faee63dac2a17acf1dde0bfaa834ca34",
          "sha256": "1e34a2221ba1d20871df885a27ac412c00bbf2275e565f36a25d91c2b12ec07d"
        },
        "downloads": -1,
        "filename": "lettuce_Dtester-0.2.23-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "faee63dac2a17acf1dde0bfaa834ca34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70471,
        "upload_time": "2022-04-08T03:08:33",
        "upload_time_iso_8601": "2022-04-08T03:08:33.351970Z",
        "url": "https://files.pythonhosted.org/packages/1e/35/385a771474387d06f6d5c840a2cf6879a8e8232bd221660e9ddbab12ae53/lettuce_Dtester-0.2.23-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "723d19b2399cd25dfdba3538cd1da36f1fe1f19ceb3d971299c068cf811536b7",
          "md5": "b6e9edd1bf7f398cad1819caeabc1bee",
          "sha256": "238d689b2ac46e91504ac1908e6fca36d7029ba3678c530febd0d83ff82fd4e0"
        },
        "downloads": -1,
        "filename": "lettuce_Dtester-0.2.23.tar.gz",
        "has_sig": false,
        "md5_digest": "b6e9edd1bf7f398cad1819caeabc1bee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49589,
        "upload_time": "2022-04-08T03:08:35",
        "upload_time_iso_8601": "2022-04-08T03:08:35.102646Z",
        "url": "https://files.pythonhosted.org/packages/72/3d/19b2399cd25dfdba3538cd1da36f1fe1f19ceb3d971299c068cf811536b7/lettuce_Dtester-0.2.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.29": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58bbbdfffd4e3d93c8f1b68ea30b398ea6b60832c38574b31650b864db0cb56c",
          "md5": "6d8c45b30226c87c2f6f49c99687d522",
          "sha256": "0f673c4169b0bce83f1e95a6aaf1045d7963483d82969b0603317d93b013ce58"
        },
        "downloads": -1,
        "filename": "lettuce_Dtester-0.2.29-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d8c45b30226c87c2f6f49c99687d522",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 73157,
        "upload_time": "2022-04-08T09:46:40",
        "upload_time_iso_8601": "2022-04-08T09:46:40.703283Z",
        "url": "https://files.pythonhosted.org/packages/58/bb/bdfffd4e3d93c8f1b68ea30b398ea6b60832c38574b31650b864db0cb56c/lettuce_Dtester-0.2.29-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa618d06b74e600d9eb511b3c1b02efe8020700fb314014b377eaa7a46ea22d5",
          "md5": "5626ad3b2fd2454df1cfd355fbcf4e45",
          "sha256": "c1d76836c5d167db2b6d8afcb9a864528eb21a7483e94d43d5dbab42b33fb09b"
        },
        "downloads": -1,
        "filename": "lettuce_Dtester-0.2.29.tar.gz",
        "has_sig": false,
        "md5_digest": "5626ad3b2fd2454df1cfd355fbcf4e45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53407,
        "upload_time": "2022-04-08T09:46:43",
        "upload_time_iso_8601": "2022-04-08T09:46:43.359268Z",
        "url": "https://files.pythonhosted.org/packages/fa/61/8d06b74e600d9eb511b3c1b02efe8020700fb314014b377eaa7a46ea22d5/lettuce_Dtester-0.2.29.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc4849d39b13bb3a25f25a07df8d875285170db1dd631cb2544b2eb01a7b7ecb",
          "md5": "30a2a9547abd866f91bb50118ee96869",
          "sha256": "f4aeb7034224bee49a754fa86b98b62ba477ff58ef9c3e7da8641862eaabefcd"
        },
        "downloads": -1,
        "filename": "lettuce_Dtester-0.2.30.tar.gz",
        "has_sig": false,
        "md5_digest": "30a2a9547abd866f91bb50118ee96869",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 57005,
        "upload_time": "2022-05-16T02:40:00",
        "upload_time_iso_8601": "2022-05-16T02:40:00.715667Z",
        "url": "https://files.pythonhosted.org/packages/bc/48/49d39b13bb3a25f25a07df8d875285170db1dd631cb2544b2eb01a7b7ecb/lettuce_Dtester-0.2.30.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d201a9a9b958f858955915195419c4ae8576385be360454ac632bee63d542c9e",
          "md5": "fa5c7c5ebf761b6c10b2ae673bd3eef4",
          "sha256": "76eb66fd60e2bb4aaf59333432c5e6d555133360b20b352ee7cca02487599a9a"
        },
        "downloads": -1,
        "filename": "lettuce_Dtester-0.2.31-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa5c7c5ebf761b6c10b2ae673bd3eef4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 76333,
        "upload_time": "2022-05-25T03:43:36",
        "upload_time_iso_8601": "2022-05-25T03:43:36.136525Z",
        "url": "https://files.pythonhosted.org/packages/d2/01/a9a9b958f858955915195419c4ae8576385be360454ac632bee63d542c9e/lettuce_Dtester-0.2.31-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fbb38325f5b1312474d2bf38017dbf04bd2216c1a444b095fb50abcf392ae72",
          "md5": "58e58acdd6c6e2aa98a52b1e901efc8d",
          "sha256": "80a9f018734b9057c64e98b7e9f35ad678482813d1e453fe5a7cd4737433f223"
        },
        "downloads": -1,
        "filename": "lettuce_Dtester-0.2.31.tar.gz",
        "has_sig": false,
        "md5_digest": "58e58acdd6c6e2aa98a52b1e901efc8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56758,
        "upload_time": "2022-05-25T03:43:38",
        "upload_time_iso_8601": "2022-05-25T03:43:38.035636Z",
        "url": "https://files.pythonhosted.org/packages/0f/bb/38325f5b1312474d2bf38017dbf04bd2216c1a444b095fb50abcf392ae72/lettuce_Dtester-0.2.31.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d201a9a9b958f858955915195419c4ae8576385be360454ac632bee63d542c9e",
        "md5": "fa5c7c5ebf761b6c10b2ae673bd3eef4",
        "sha256": "76eb66fd60e2bb4aaf59333432c5e6d555133360b20b352ee7cca02487599a9a"
      },
      "downloads": -1,
      "filename": "lettuce_Dtester-0.2.31-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fa5c7c5ebf761b6c10b2ae673bd3eef4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 76333,
      "upload_time": "2022-05-25T03:43:36",
      "upload_time_iso_8601": "2022-05-25T03:43:36.136525Z",
      "url": "https://files.pythonhosted.org/packages/d2/01/a9a9b958f858955915195419c4ae8576385be360454ac632bee63d542c9e/lettuce_Dtester-0.2.31-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0fbb38325f5b1312474d2bf38017dbf04bd2216c1a444b095fb50abcf392ae72",
        "md5": "58e58acdd6c6e2aa98a52b1e901efc8d",
        "sha256": "80a9f018734b9057c64e98b7e9f35ad678482813d1e453fe5a7cd4737433f223"
      },
      "downloads": -1,
      "filename": "lettuce_Dtester-0.2.31.tar.gz",
      "has_sig": false,
      "md5_digest": "58e58acdd6c6e2aa98a52b1e901efc8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 56758,
      "upload_time": "2022-05-25T03:43:38",
      "upload_time_iso_8601": "2022-05-25T03:43:38.035636Z",
      "url": "https://files.pythonhosted.org/packages/0f/bb/38325f5b1312474d2bf38017dbf04bd2216c1a444b095fb50abcf392ae72/lettuce_Dtester-0.2.31.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}