{
  "info": {
    "author": "trollodel",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Documentation :: Sphinx",
      "Topic :: System :: Systems Administration",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "PrettyEtc\n=========\n\nThe project is divided in 2 packages:\n\n- prettyetc-qt (a qt-based graphical interface for prettyetc)\n- prettyetc (the core with the APIs)\n\nprettyetc-qt\n************\nBrowse your configuration files in a visual way with a pretty and universal interface.\n\nPrettyetc allows you to edit your configs in a multitabbed window,\neach config is displayed as a foldable tree that has no ugly brackets,\nquotes or anything else which might be language specific.\n\nFor example you can read a JSON and an INI file using the same view and structure.\n\nThe official GUI is powered by the Qt framework, using the official Python bindings.\n\nprettyetc\n*********\nEdit configuration files with an advanced tree-based data structure and convert them to other languages.\n\n\nInstallation\n************\n\n**NOTE**:\nIf you have both Python 2 and 3 installed in your system,\nyou probably need use pip3 instead of pip.\n\nFull installation with the UI: :code:`pip install prettyetc-qt` .\n\nOr, if you want only the core: :code:`pip install prettyetc[all]`.\n\nThe UI can be launched by executing the :code:`prettyetc-qt` command in a terminal.\nThe prettyetc-qt executable must be in PATH or you need to find it to launch the UI.\n\nMore informations about the installation process at:\n`<https://prettyetc.gitlab.io/prettyetc/developing/userguide/installation.html>`_\n\nAn example (using the core APIs)\n********************************\n\nLet's see what prettyetc can do.\n\n.. code-block:: python\n\n    from prettyetc.etccore import ConfigFileFactory, DictField\n\n    # create the factory\n    factory = ConfigFileFactory(enable_logger=True)\n\n    # create the file, this can be used to read and write the file\n    file = factory.create_file(\"colors.json\")\n\n    # read the file and save it in a RootField\n    root = file.read()\n\n    # add a new color\n    color = {\n        \"color\": \"aqua\",\n        \"code\": {\n            \"rgba\": [0, 255, 255, 1],\n            \"hex\": \"#0FF\"\n        },\n        \"web_safe\": True,\n    }\n    root[\"colors\"].add(DictField.from_primitives(color))\n\n    # change red color name\n    red_color = root[\"colors\"][2]\n    red_color[\"color\"].data = \"light-red\"\n\n    # change red color codes\n    red_color[\"code\"][\"rgba\"][0].data = 204\n    red_color[\"code\"][\"hex\"].data = \"#c00\"\n\n    # change red color web_safe field\n    red_color[\"web_safe\"].data = False\n\n    # write the RootField to file (beautified json)\n    file.write(root, language=\"json\", beautify=True)\n\nSee\n`getting started <https://prettyetc.gitlab.io/prettyetc/developing/userguide/getting started.html>`_\nfor a quick start on how to use prettyetc.\n\n\nSupported languages\n*******************\n\nDue to languages nature or the used backend,\nthe parsers/serializers do not implement all field specifications,\nbut a subset of those.\n\n\n- JSON (`json <https://docs.python.org/3/library/json.html>`_)\n- INI (`configparser <https://docs.python.org/3/library/configparser.html>`_)\n- XML (`XML ElementTree <https://docs.python.org/3/library/xml.etree.elementtree.html>`_)\n- YAML (* `ruamel.yaml <https://yaml.readthedocs.io/en/latest/>`_)\n- A self-defined language called etc,\n  see `below <#an-explanation-of-the-etc-language>`_\n  (Embedded code + * `lark-parser <https://lark-parser.readthedocs.io/>`_)\n\n\n\n\n.. list-table:: Here is a detailed table explaining what feature are supported by language.\n   :stub-columns: 1\n   :align: center\n\n   * - | Language\n       | - Type\n     - | JSON\n       | Parser\n     - | JSON\n       | Serializer\n     - | INI\n       | Parser\n     - | INI\n       | Serializer\n     - | XML\n       | Parser\n     - | XML\n       | Serializer\n     - | YAML\n       | Parser\n     - | YAML\n       | Serializer\n     - | Etc :sup:`1`\n       | Parser\n     - | Etc :sup:`1`\n       | Serializer\n\n   * - | Field\n       | name\n     - V :sup:`2`\n     - V :sup:`2`\n     - V\n     - V\n     - V\n     - V\n     - V :sup:`2`\n     - V :sup:`2`\n     - V\n     - V\n   * - | Field\n       | description\n       | (comment)\n     - I\n     - I\n     -\n     -\n     -\n     -\n     -\n     -\n     - V\n     - V\n   * - | Field\n       | readonly\n     - I\n     - I\n     -\n     -\n     -\n     -\n     -\n     -\n     - V\n     - V\n   * - | Field\n       | attributes\n     - I\n     - I\n     -\n     -\n     - V\n     - V\n     -\n     -\n     -\n     -\n   * - | Indexable\n       | fields\n     - V\n     - V\n     - V :sup:`3`\n     - V :sup:`3`\n     - V\n     - V\n     - V\n     - V\n     -\n     -\n   * - | Typed\n       | field\n     - V\n     - V\n     - E :sup:`4`\n     - E :sup:`4`\n     - P\n     - P\n     - V\n     - V\n     - V\n     - V\n\n\\* backend require external libraries\n\n**Legend**:\n\n| empty space: not supported yet\n| I: impossible due to language specification\n| E: enforced support\n| P: partially supported\n| V: fully  supported\n\n|\n\n| :sup:`1`: the etc language is divided into some sublanguages,\n  so some feature can be unavailable in a specific sublanguage.\n| :sup:`2`: For arrays, the name can be setted to None or to an integer index.\n| :sup:`3`: limited to one level.\n| :sup:`4`: The INI specification does not support typing,\n  so any key and value is a string.\n\nDocs\n****\n\nFor a detailed explanation of core features, Prettyetc's Field meaning,\nAPI reference and other, we suggest to go to the documentation of Prettyetc.\n\nAPI Documentation:\n`<https://prettyetc.gitlab.io/prettyetc/index.html>`_\n\n\nAn explanation of the etc language\n**********************************\n\nThe etc configuration language is a collection of micro-languages,\nall of them are structured similar to INI files (without sections).\n\nThe origin of this name is the \\*nix /etc folder that contain the system\nor default configuration for lots of programs and also kernel settings.\n\nExcept for files specifically formatted in INI or JSON,\nthe files in this folder has an undefined and a simple syntax;\nmade by spaces, the \":\" character or the \"=\" character (somewhere)\nand the \"#\" character as comment start, that remember the sh/bash syntax.\n\nExamples of these files are:\n:code:`/etc/resolv.conf /etc/sysctl.conf /etc/modules`.\n\nOur parser aim to handle most of it, representing it using fields\nin a universal view.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/prettyetc/prettyetc",
    "keywords": "config json ini etc xml qt",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "prettyetc-qt",
    "package_url": "https://pypi.org/project/prettyetc-qt/",
    "platform": "",
    "project_url": "https://pypi.org/project/prettyetc-qt/",
    "project_urls": {
      "Bug Reports": "https://gitlab.com/prettyetc/prettyetc/issues",
      "Documentation": "https://prettyetc.gitlab.io/prettyetc/",
      "Homepage": "https://gitlab.com/prettyetc/prettyetc",
      "Source": "https://gitlab.com/prettyetc/prettyetc"
    },
    "release_url": "https://pypi.org/project/prettyetc-qt/0.4.0/",
    "requires_dist": [
      "PySide2",
      "prettyetc[all] (>=0.4.0rc2)"
    ],
    "requires_python": ">=3.5, <4",
    "summary": "See your configuration files using a pretty and universal interface.",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7418310,
  "releases": {
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1183858da133fb6e0e403940a1305c30eb76077c0bcd217590884872da0dc89",
          "md5": "792fe3f75ff7b5c0fb2fee127b981b91",
          "sha256": "8e3e4b85abe3eab3a970d51f9865b1eda42477e415a2a79805ec5198a5e58acb"
        },
        "downloads": -1,
        "filename": "prettyetc_qt-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "792fe3f75ff7b5c0fb2fee127b981b91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4",
        "size": 30343,
        "upload_time": "2020-05-31T14:05:43",
        "upload_time_iso_8601": "2020-05-31T14:05:43.554778Z",
        "url": "https://files.pythonhosted.org/packages/c1/18/3858da133fb6e0e403940a1305c30eb76077c0bcd217590884872da0dc89/prettyetc_qt-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34f3e9b54ec0c164f495eade13266b587e648f03795377c1df4d8d42d5a0f7d1",
          "md5": "0dbb8b33f86b9df6b88b9c4dbaa50360",
          "sha256": "5404ba52ed623ceced438e62ff312ab634f1e10d35a70e89f44f209d114bc37b"
        },
        "downloads": -1,
        "filename": "prettyetc_qt-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0dbb8b33f86b9df6b88b9c4dbaa50360",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4",
        "size": 30662,
        "upload_time": "2020-05-31T21:51:10",
        "upload_time_iso_8601": "2020-05-31T21:51:10.254804Z",
        "url": "https://files.pythonhosted.org/packages/34/f3/e9b54ec0c164f495eade13266b587e648f03795377c1df4d8d42d5a0f7d1/prettyetc_qt-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aea4ca6d81df6e875702a57a39d49089cded1878fb5b056763d507e6979edac0",
          "md5": "28c4964dfa22f6ce448deb4bec2b645e",
          "sha256": "641833e9797ae6bce57e4757f600ce691f1b067fa1581ac3a86d32ab5ef9b052"
        },
        "downloads": -1,
        "filename": "prettyetc_qt-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28c4964dfa22f6ce448deb4bec2b645e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4",
        "size": 185665,
        "upload_time": "2020-05-31T22:26:59",
        "upload_time_iso_8601": "2020-05-31T22:26:59.763022Z",
        "url": "https://files.pythonhosted.org/packages/ae/a4/ca6d81df6e875702a57a39d49089cded1878fb5b056763d507e6979edac0/prettyetc_qt-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04c78a8b1cd626d5a13e7e99872de31e6372cff568bc423604d870067a587583",
          "md5": "5a6b0c22fad4b29c9c558ef6042be47c",
          "sha256": "82b674e4553197b3fe2feb708c8346b6a939e94d45ddb8b75489617d6713e3a9"
        },
        "downloads": -1,
        "filename": "prettyetc_qt-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a6b0c22fad4b29c9c558ef6042be47c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4",
        "size": 206102,
        "upload_time": "2020-06-07T17:36:35",
        "upload_time_iso_8601": "2020-06-07T17:36:35.875970Z",
        "url": "https://files.pythonhosted.org/packages/04/c7/8a8b1cd626d5a13e7e99872de31e6372cff568bc423604d870067a587583/prettyetc_qt-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04c78a8b1cd626d5a13e7e99872de31e6372cff568bc423604d870067a587583",
        "md5": "5a6b0c22fad4b29c9c558ef6042be47c",
        "sha256": "82b674e4553197b3fe2feb708c8346b6a939e94d45ddb8b75489617d6713e3a9"
      },
      "downloads": -1,
      "filename": "prettyetc_qt-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a6b0c22fad4b29c9c558ef6042be47c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5, <4",
      "size": 206102,
      "upload_time": "2020-06-07T17:36:35",
      "upload_time_iso_8601": "2020-06-07T17:36:35.875970Z",
      "url": "https://files.pythonhosted.org/packages/04/c7/8a8b1cd626d5a13e7e99872de31e6372cff568bc423604d870067a587583/prettyetc_qt-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}