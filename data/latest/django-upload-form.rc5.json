{
  "info": {
    "author": "Mario Orlandi",
    "author_email": "morlandi@brainstorm.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "\ndjango-upload-form\n==================\n\nA minimal (yet careful about UX) solution to upload multiple files in a Django project,\nusing a Django-like Form Class.\n\n\nPurpose\n-------\n\nThe purpose of this module is that of providing a simple yet effective tool\nfor managing the user interaction for files uploading in a Django projects,\nwith the following features:\n\n1) before submission:\n\n    - files can be added to the upload list either via drag&drop or with an file-open dialog\n    - user can revise the upload list by adding or removing files\n    - the list displays informations about the files (name, tipe, size)\n\n2) during submission:\n\n    - image files are optionally resized up to a configurabile max resolution\n    - a progress bar is shown during files upload\n\n3) after submission:\n\n    - a target view receives the uploaded files via an Ajax POST request\n    - here, you will validate the form ...\n    - ... and use the received `files` at your will\n\nAll this is obtained by leveraging HTML5 specific capabilities, and applying some clever (in my opinion)\nand sometimes hacky techniques I learned from a few selected articles, listed in the `References`\nsection below.\n\nNo external dependencies are required (other than jQuery).\n\nThe codebase is deliberately minimal.\n\n\nHow to use `django-upload-form`\n-------------------------------\n\nThe only purpose of the package is that of:\n\n- managing user interaction\n- upload the files upon form submission\n\n**What you do with the uploaded files is entirely up to you, and you're responsible for this.**\n\nThese are the steps required to use `django-upload-form`:\n\n- derive your own Form class from UploadForm, and override a few methods\n- provide a view which will be the target for files upload\n\n\nThe UploadForm-derived class\n----------------------------\n\nAt the very minimum, you need to override the following methods:\n\n- form_valid(self, request)\n    Here is where you receive the list of (in-memory) uploaded files after submission;\n    What you do with the uploaded files is entirely up to you.\n    This method should normally return `get_success_url()`.\n\n- get_success_url(self)\n    Determine the URL to redirect to when the form is successfully validated.\n\n- get_action(self, request=None)\n    Returns the url of the `target view` (see below).\n\nOptionally, you can customize the following instance properties:\n\n- self.allowed_file_types\n    List of allowed file types (ex: '.xls .xlsx .pdf');\n    Default to: None, which means we'll use the corresponding setting `UPLOAD_FORM_ALLOWED_FILE_TYPES`\n\n- self.accept\n    Returns the value for the \"accept\" attribute of the file input element;\n    Defaults to: None, which means we'll build it from `self.allowed_file_types` list;\n    Example: `image/\\*` - which also trigger the lookup into the image gallery on mobile devices\n\n- self.max_image_size\n    When > 0, images will be resized accordingly before uploading.\n    The required size is expressed in pixels.\n    Default: 0\n\nor override the corresponding methods:\n\n- def get_accept(self, request=None)\n- def get_max_image_size(self, request=None)\n\nNote: while \"accept\" is applied to the file input element, \"allowed_file_types\" is\nused during form validation; it is your responsability to supply coherent values.\n\nWhen \"accept\" is None, on the other side, this is guaranteed by UploadForm.\n\n\nThe target view\n---------------\n\nThe target view will receive the uploaded files with a POST request, and normally should:\n\n    - build a bounded form\n    - validate it\n    - invoke form_valid()\n\nYou will probably use the same view for form rendering (GET); this is quite common\npractice, but entirely optional.\n\nAlso note that, since upon form submission the POST request will be issued via Ajax,\nthe target view should cooperate by returning a JsonResponse().\n\nIn practice, in the target view **you should always follow the pattern below**,\nthen cope with your specific needs in `MyUploadForm.form_valid()`:\n\n.. code:: python\n\n    def sample_view(request):\n\n        if request.method == 'GET':\n            form = TestUploadForm()\n        else:\n            form = TestUploadForm(request.POST, request.FILES)\n            if form.is_valid():\n                url = form.form_valid(request)\n                return JsonResponse({'action': 'redirect', 'url': url, })\n            else:\n                return JsonResponse({'action': 'replace', 'html': form.as_html(request), })\n\n        return render(\n            request,\n            'upload_form/test_view.html', {\n                'form': form,\n                'form_as_html': form.as_html(request),\n            }\n        )\n\nor (when the initial rendering if provided by some other view):\n\n.. code:: python\n\n    def sample_view(request):\n\n        assert request.method == 'POST'\n        assert request.is_ajax()\n\n        form = MyUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            url = form.form_valid(request)\n            return JsonResponse({'action': 'redirect', 'url': url, })\n        else:\n            return JsonResponse({'action': 'replace', 'html': form.as_html(request), })\n\n\nInstallation\n------------\n\nInstall the package from Python Package Index running:\n\n.. code:: bash\n\n    pip install django-upload-form\n\nor from GitHub:\n\n.. code:: bash\n\n    pip install git+https://github.com/morlandi/django-upload-form@master\n\nthen add 'upload_form' to your INSTALLED_APPS:\n\n.. code:: bash\n\n    INSTALLED_APPS = [\n        ...\n        'upload_form',\n    ]\n\n\nApp Settings\n------------\n\nSome settings are provided for optional customization.\n\nThe library will search these settings in the following order:\n\n    - as `Django Constance` dynamic settings (see `https://github.com/jazzband/django-constance <https://github.com/jazzband/django-constance>`_)\n    - failing that, in project's settings\n    - failing that, a suitable \"safe\" default value is used\n\n.. code:: python\n\n    UPLOAD_FORM_MAX_FILE_SIZE_MB = 12\n    UPLOAD_FORM_ALLOWED_FILE_TYPES = \".png .jpg .jpeg .gif\"\n    UPLOAD_FORM_PARALLEL_UPLOAD = False  (experimental)\n\nor:\n\n.. code:: python\n\n    CONSTANCE_CONFIG = {\n        ...\n        'UPLOAD_FORM_ALLOWED_FILE_TYPES': (\".png .jpg .jpeg .gif\", \"Tipi di files abilitati all'upload\"),\n        'UPLOAD_FORM_MAX_FILE_SIZE_MB': (12, 'Dimensione massima files in upload (MB)'),\n        'UPLOAD_FORM_PARALLEL_UPLOAD': (False, \"Activate concurrent files upload\"),\n    }\n\nUsing multiple upload forms in a single HTML page\n-------------------------------------------------\n\nThe technique used to collect files for upload is:\n\n- render an **hidden** file input element with \"multiple\" attribute\n- use a label styled to look like a button, so people will realize they can click it to bring up the file selection dialog\n\nThis works, since pressing a label basically triggers the focus event for the bound input;\nif it is a file input, it works out as a click event, resulting in opening a file browser.\n\n.. code:: html\n\n    <input style=\"display: none;\" type=\"file\" name=\"files[]\" accept=\"{{accept}}\" id=\"uploadform_file_input\" multiple onchange=\"UploadForm.handleFiles(this.files)\">\n    <label class=\"button\" for=\"uploadform_file_input\">\n        <img src=\"{% static 'upload_form/icons/cloud-upload-svgrepo-com.svg' %}\" alt=\"{% trans 'upload' %}\">\n        <p>\n            {% trans 'Select some files' %}\n        </p>\n    </label>\n\nUnfortunately, this means we had to assign a specific id to the <input> element;\nwhich in turn means we can't use two upload forms in a single HTML page.\n\nHowever, you can also implicitly bind a label to an input by inclusion, thus avoiding the id altoghether:\n\n.. code:: html\n\n    <label class=\"button\">\n        <input style=\"display: none;\" type=\"file\" name=\"files[]\" accept=\"{{accept}}\" multiple onchange=\"UploadForm.handleFiles(this.files)\">\n        <img src=\"{% static 'upload_form/icons/cloud-upload-svgrepo-com.svg' %}\" alt=\"{% trans 'upload' %}\">\n        <p>\n            {% trans 'Select some files' %}\n        </p>\n    </label>\n\nThis fix has been added in `v0.4.3`.\n\nExample project\n---------------\n\nA simple Django project is available in folder 'example'; use it as follows:\n\n.. code-block:: bash\n\n    # Move to the project folder\n    cd ./example\n\n    # Install Django dependencies\n    pip install -r requirements.txt\n\n    # Initialize database tables\n    python manage.py migrate\n\n    # Create a super-user for the admin:\n    python manage.py createsuperuser\n\n    # Run the project\n    python manage.py runserver\n\nthe visit either http://127.0.0.1:8000/ or http://127.0.0.1:8000/admin/\n\n.. image:: screenshots/example/001.png\n\n.. image:: screenshots/example/002.png\n\n.. image:: screenshots/example/003.png\n\nSample usage\n------------\n\nThe `upoad_form` app provides a sample test view which uploads multiple files\nfor illustration purposes.\n\nYou can run, study, and possibly duplicate it for further customizations.\n\nTo use it, add this to your main urls mapping:\n\n`file urls.py`:\n\n.. code:: bash\n\n    urlpatterns = [\n        ...\n        path('upload_form/', include('upload_form.urls', namespace='upload_form')),\n        ...\n    ]\n\nthen visit this url::\n\n    http://127.0.0.1:8000/upload_form/test/\n\nBelow is the source code of the whole test.\n\n\n`file upload_form/views.py`\n\n.. code:: python\n\n    from django.shortcuts import render\n    try:\n        from django.urls import reverse\n    except ModuleNotFoundError as e:\n        # for Django < v1.10\n        from django.core.urlresolvers import reverse\n    from django.http import JsonResponse\n    from .forms import UploadForm\n\n\n    class TestUploadForm(UploadForm):\n\n        def form_valid(self, request):\n            print(\"*\")\n            print(\"* TestUploadForm.form_valid() ...\")\n            print(\"* Here, we just log the list of received files;\")\n            print(\"* What you do with these files in a real project is entirely up to you.\")\n            print(\"*\")\n            self.dump()\n            return self.get_success_url(request)\n\n        def get_success_url(self, request=None):\n            return '/'\n\n        def get_action(self, request=None):\n            return reverse('upload_form:test_view')\n\n\n    def test_view(request):\n\n        if request.method == 'GET':\n            form = TestUploadForm()\n        else:\n            form = TestUploadForm(request.POST, request.FILES)\n            if form.is_valid():\n                url = form.form_valid(request)\n                return JsonResponse({'action': 'redirect', 'url': url, })\n            else:\n                return JsonResponse({'action': 'replace', 'html': form.as_html(request), })\n\n        return render(\n            request,\n            'upload_form/test_view.html', {\n                'form': form,\n                'form_as_html': form.as_html(request),\n            }\n        )\n\n\n`file templates/upload_form/test.html`\n\n.. code:: html\n\n    {% extends \"base.html\" %}\n    {% load static %}\n\n\n    {% block extrajs %}\n        {{form.media}}\n    {% endblock %}\n\n\n    {% block content %}\n\n        <div class=\"container\">\n            <div class=\"row\">\n                <div id=\"upload-box\" class=\"text-center col-md-6 col-md-offset-3\" style=\"\">\n\n                    {{ form_as_html }}\n\n                </div>\n            </div>\n        </div>\n\n    {% endblock content %}\n\n\nHowto upload a video\n--------------------\n\n.. code:: python\n\n    class MyUploadForm(UploadForm):\n\n        ...\n\n        def get_accept(self, request=None):\n            return 'video/*'\n\nOther options to consider::\n\n    - accept=\"video/*\" capture=\"\"       ... only from camera\n    - accept=\"video/*\"                  ... either camera or album\n\nHowto upload an image from the camera\n-------------------------------------\n\n::\n\n    - accept=\"image/*\" capture=\"camera\"\n\n\nScreenshots\n-----------\n\n.. image:: screenshots/001.png\n\n.. image:: screenshots/002.png\n\n.. image:: screenshots/003.png\n\n.. image:: screenshots/004.png\n\n\nLicense\n-------\n\nThe app is intended to be open source.\n\nFeel free to use it we at your will with no restrictions at all.\n\n\nReferences\n----------\n\n- `How To Make A Drag-and-Drop File Uploader With Vanilla JavaScript <https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/>`_\n- `Multiple File Upload Input <https://davidwalsh.name/multiple-file-upload>`_\n- `Styling & Customizing File Inputs the Smart Way <https://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/>`_\n- `How to set file input value when dropping file on page? <https://stackoverflow.com/questions/47515232/how-to-set-file-input-value-when-dropping-file-on-page>`_\n- `A strategy for handling multiple file uploads using JavaScript <https://medium.com/typecode/a-strategy-for-handling-multiple-file-uploads-using-javascript-eb00a77e15f>`_\n- `Use HTML5 to resize an image before upload <https://stackoverflow.com/questions/23945494/use-html5-to-resize-an-image-before-upload#24015367>`_\n- `How to package a Django app to be test-friendly? <https://stackoverflow.com/questions/41636794/how-to-package-a-django-app-to-be-test-friendly>`_\n- `HTML Label name instead of ID? <https://stackoverflow.com/questions/28031001/html-label-name-instead-of-id#28031213>`_\n\n\n\n\nHistory\n=======\n\nv0.5.0\n------\n* typo fixes\n* per-class \"allowed_file_types\" list\n* better explanation of the difference between \"accept\" and \"allowed_file_types\"\n\nv0.4.3\n------\n* fix a js error when uploading non-image files; this was a regression introduced with image resizing\n* fix to use multiple upload forms in a single HTML page\n\nv0.4.2\n------\n* Include optional extra form fields in upload form\n\nv0.4.1\n------\n* Readme updated and fixed\n\nv0.4.0\n------\n* optionally resize images before uploading\n* parallel uploading (experimental)\n* Example project added\n* some miscellaneous improvements recovered from experimental branches\n* removed dependency on sprintf js library\n\nv0.3.1\n------\n* fix Readme to keep twine happy\n\nv0.3.0\n------\n* published on PyPI\n\nv0.2.3\n------\n* prepare for publishing on PyPI\n\nv0.2.2\n------\n* improved Readme\n\nv0.2.1\n------\n* package renamed \"django-upload-form\" (was \"django_upload_form\")\n* cleanup\n* improved documentation\n\nv0.2.0\n------\n* fixes for Django 2.x\n* user can now add more file to the list before submission\n\nv0.0.5\n------\n* green send button\n\nv0.0.4\n------\n* App settings removed\n\nv0.0.3\n------\n* Minor fixes\n\nv0.0.2\n------\n* Italian translation added\n\nv0.0.1\n------\n* Basic release\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/morlandi/django-upload-form",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-upload-form",
    "package_url": "https://pypi.org/project/django-upload-form/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-upload-form/",
    "project_urls": {
      "Homepage": "http://github.com/morlandi/django-upload-form"
    },
    "release_url": "https://pypi.org/project/django-upload-form/0.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A minimal (yet careful about UX) solution to upload multiple files in a Django project, using a Django-like Form Class",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9502602,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba7d63c3109e28cce49eee66b8a3c619e635e3a97913d0f887f297a1972534bb",
          "md5": "a8bd52783ec70b38e23a370aa5f31552",
          "sha256": "d124a6ece48767f7eb1958a10027b55be5599a751b53824ce6a4d87ae5a2a02d"
        },
        "downloads": -1,
        "filename": "django_upload_form-0.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8bd52783ec70b38e23a370aa5f31552",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14110,
        "upload_time": "2020-05-18T16:15:37",
        "upload_time_iso_8601": "2020-05-18T16:15:37.041282Z",
        "url": "https://files.pythonhosted.org/packages/ba/7d/63c3109e28cce49eee66b8a3c619e635e3a97913d0f887f297a1972534bb/django_upload_form-0.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dcbdd0eb976a02183744077f656fdfdcea4e196712e7c526e9cbeb75f8f73d3",
          "md5": "c4e581d4b917e025088d0789310b2ef7",
          "sha256": "c97071eb884f9712731bee4e978a2100b0be7e7d27b65aabe7fb633c2bb95c7f"
        },
        "downloads": -1,
        "filename": "django_upload_form-0.4.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4e581d4b917e025088d0789310b2ef7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 27173,
        "upload_time": "2020-08-06T05:53:19",
        "upload_time_iso_8601": "2020-08-06T05:53:19.906775Z",
        "url": "https://files.pythonhosted.org/packages/4d/cb/dd0eb976a02183744077f656fdfdcea4e196712e7c526e9cbeb75f8f73d3/django_upload_form-0.4.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0a4cb8c8fb0a990d50ca886a2376b7671a197f971c12d32acff687c39515b4b",
          "md5": "878a0e228b9651b0527a3cbbece27956",
          "sha256": "6952b35b2a9c29933c60dfe35badc14aba74d7e6df639b6494caea19e4354542"
        },
        "downloads": -1,
        "filename": "django_upload_form-0.4.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "878a0e228b9651b0527a3cbbece27956",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24644,
        "upload_time": "2020-08-06T12:53:02",
        "upload_time_iso_8601": "2020-08-06T12:53:02.551310Z",
        "url": "https://files.pythonhosted.org/packages/d0/a4/cb8c8fb0a990d50ca886a2376b7671a197f971c12d32acff687c39515b4b/django_upload_form-0.4.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa63ec862325d82a102cccd5d3e12ec69b99dd676e3d61f218b9cd49addb8349",
          "md5": "62e7d6a63a40894efb8a49f5cb76e820",
          "sha256": "83d57a8dcc5c5fff5c09e20ecd6a6833c2977864a1a54dcfa9065f32ca4c1e90"
        },
        "downloads": -1,
        "filename": "django_upload_form-0.4.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62e7d6a63a40894efb8a49f5cb76e820",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 25282,
        "upload_time": "2020-09-03T15:44:47",
        "upload_time_iso_8601": "2020-09-03T15:44:47.973867Z",
        "url": "https://files.pythonhosted.org/packages/fa/63/ec862325d82a102cccd5d3e12ec69b99dd676e3d61f218b9cd49addb8349/django_upload_form-0.4.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4630595f39168455dcfe469cec02c5bfd7ac0126eed677264f4cc449fe27fe53",
          "md5": "130e0abb46f9ccccf5ee55704ca8103e",
          "sha256": "bef96ca311248e4b0201a218e72e365cb61ee0a6b9fc6b07c49bd519e884992f"
        },
        "downloads": -1,
        "filename": "django_upload_form-0.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "130e0abb46f9ccccf5ee55704ca8103e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 28412,
        "upload_time": "2021-02-23T19:05:07",
        "upload_time_iso_8601": "2021-02-23T19:05:07.470781Z",
        "url": "https://files.pythonhosted.org/packages/46/30/595f39168455dcfe469cec02c5bfd7ac0126eed677264f4cc449fe27fe53/django_upload_form-0.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4630595f39168455dcfe469cec02c5bfd7ac0126eed677264f4cc449fe27fe53",
        "md5": "130e0abb46f9ccccf5ee55704ca8103e",
        "sha256": "bef96ca311248e4b0201a218e72e365cb61ee0a6b9fc6b07c49bd519e884992f"
      },
      "downloads": -1,
      "filename": "django_upload_form-0.5.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "130e0abb46f9ccccf5ee55704ca8103e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 28412,
      "upload_time": "2021-02-23T19:05:07",
      "upload_time_iso_8601": "2021-02-23T19:05:07.470781Z",
      "url": "https://files.pythonhosted.org/packages/46/30/595f39168455dcfe469cec02c5bfd7ac0126eed677264f4cc449fe27fe53/django_upload_form-0.5.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}