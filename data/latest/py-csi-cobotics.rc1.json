{
  "info": {
    "author": "Gaudeval",
    "author_email": "bl778@york.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ![py-csi-cobotics](assets/csi-cobotics-logo.png?raw=true)\n\n<!-- TODO:ci/pypi/licence badges -->\n\nA Python framework for controlling and processing experiments built upon the CSI:Cobot Digital Twin.\n\n## Features\n\n- Generate twin configuration files from Python dataclasses\n- Collect and process messages generated during a twin run\n- Define temporal logic monitors to check for specific situations in a run\n- Wrap experiments to support failure, retries, and archiving results\n- Compute coverage of the observed situations across multiple runs\n\n## Installation\n\nThere is an experimental release of the library available on `test.pypi.org`:\n```shell\npip install -i https://test.pypi.org/simple/ py-csi-cobotics\n```\n\n## Usage\n\n\nThe CSI cobotics framework aim to control an instance of the CSI:Cobot Digital Twin, and process the resulting outputs\nto identify occurrences of specific events or situations. Through the example of an industrial use case, we introduce\nthe required steps, from exposing the configuration points of the twin instance, to collecting a trace of events in the\nsystem, and to identifying hazardous situations. Note that the process can be applied in parts for different kind of\nanalyses.\n\nThis documentation will refer to the example available under the `experiments/tcx_safety`, defining an experimental\nsetup built on top of an industrial case study. The case study comprises a human operator, an automated robotic arm, and\na spot welder. The operator and the arm interact at a shared bench, the arm then moves to a spot welder to process a\ncomponent before returning to the bench. A safety controller ensures that interferences from the operator, reaching at\nthe shared bench or entering the cell, do not result in hazardous situations.\n\n![Representation of the industrial case study](assets/twin_example_cell.png?raw=true)\n<!-- ![alt text](https://github.com/[username]/[reponame]/blob/[branch]/image.jpg?raw=true) -->\n\nThe operator is set to follow a pre-established path through 5 different, ordered waypoints. The experiment exposes for\nconfiguration the time spent by the operator at each waypoint, allowing for operator interferences at various stage of\nthe welding process. An example of randomised search linking all components of the framework and using this setup is\nincluded in `experiments/tcx_safety/search_ran.py`.\n\n### Defining a world configuration\n\nThe first step in interacting with a CSI: Cobot Digital Twin instance is providing entry points to configure the twin\nexecution. The `ConfigurationManager` aims to convert Python structures capturing the configuration of the system, and\nthe JSON-based configuration format of the twin. It supports a variety of structures (`dataclasses.dataclass`\ntypes, `csi.configuration.JsonSerializable` implementations, JSON objects) as inputs. Nesting and mixing structure types\nis supported and the value of encoded fields will itself be encoded by the `ConfigurationManager`. Additional meta-data\nmight be required to map input fields' names into their twin counterparts.\n\nConsider a twin instance exposing two waypoints which duration property captures how long the operator should wait at\nthe waypoint. The scene configuration is declared as a hierarchy of `dataclass`:\n\n```python\nimport dataclasses\n\n# Configuration hierarchy declaration\n@dataclasses.dataclass\nclass Waypoint:\n    duration: float = 1.0\n\n\n@dataclasses.dataclass\nclass SceneConfiguration:\n    # twin meta-data\n    timestamp: datetime = dataclasses.field(default_factory=lambda: datetime.now())\n    version: str = \"0.0.0.2\"\n    # scene configuration\n    wp_start: Waypoint = dataclasses.field(default_factory=Waypoint)\n    wp_exit: Waypoint = dataclasses.field(default_factory=Waypoint)\n\n    # Declare mapping between Python field names and their configuration counterpart\n    _encoded_fieldnames = {\n        \"timestamp\": \"$Generated\",\n        \"version\": \"$version\",\n        \"wp_start\": \"/Operator Controller/Waypoint Bench Entrance/Waypoint\",\n        \"wp_exit\": \"/Operator Controller/Waypoint Exit/Waypoint\",\n    }\n```\n\nA configuration for the twin can be initialised and manipulated as a Python object:\n```python\nconfiguration = SceneConfiguration()\nconfiguration.wp_start.duration = 5.\nconfiguration.wp_exit.duration = 10.\n```\n\nThe `ConfigurationManager` can then generate a twin-compliant configuration file for a specific configuration instance\nof the configuration:\n```python\nfrom csi import ConfigurationManager\nConfigurationManager().save(configuration, \"/csi/build/configuration.json\")\n```\n\nThe `ConfigurationManager` can further load serialised configuration into a specific configuration type declaration:\n```python\nfrom csi import ConfigurationManager\nconfiguration = ConfigurationManager(SceneConfiguration).load(\"/csi/build/configuration.json\")\n```\n\nThe resulting JSON file includes all the required meta-data for use by the twin, and the fields named as instructed.\nValues omitted from the JSON configuration file, such as the waypoint positions, will use the defaults built into the\ntwin instance.\n\n```json\n{\n  \"$Generated\": \"12/12/2021 12:12:12\",\n  \"$version\": \"0.0.0.2\",\n  \"/Operator Controller/Waypoint Bench Entrance/Waypoint\": {\n    \"Waypoint.duration\": 5.0\n  },\n  \"/Operator Controller/Waypoint Exit/Waypoint\": {\n    \"Waypoint.duration\": 10.0\n  }\n}\n```\n\n#### Location of the twin configuration file\n\nThe configuration file for a twin instance or build is located in Unity's streaming assets folder. Assuming the twin\ninstance is located under the `/build` folder, the configuration file defaults to\n`/build/unity_Data/StreamingAssets/CSI/Configuration/configuration.json`. Runs of a same build copy will rely on the\nsame configuration file, and runs under different configurations should either be performed in sequence or by first\nduplicating the build copy for each configuration file.\n\n#### Configuration field renaming\n\nBy default, the `ConfigurationManager` uses the same name field name in Python and in the JSON configuration. The twin\nconfiguration file format uses long hierarchical names to uniquely identify configurable items in a specific instance,\nnames which might not follow the Python naming conventions. The `ConfigurationManager` thus looks for the\nthe `_encoded_fieldnames: dict[str, str]` metadata dictionary, if it exists, to indicate how specific fields should be\nmapped or renamed from Python to JSON. `_encoded_fieldnames` is expected to be declared as a class attribute for\nconfiguration-encoding classes.\n\nAs an example, consider the following `Waypoint` declaration:\n\n```python\nimport dataclasses\n\n@dataclasses.dataclass\nclass Vector3D:\n    x: float = 0.0\n    y: float = 0.0\n    z: float = 0.0\n\n@dataclasses.dataclass\nclass Waypoint:\n    duration: float = 1.0\n    position: Vector3D = dataclasses.field(default_factory=Vector3D)\n\n    _encoded_fieldnames = {\n        \"position\": \"Entity.position\",\n        \"duration\": \"Waypoint.duration\",\n    }\n    \n# A Waypoint will be encoded as:\n# {\n#    \"Entity.position\": {\n#        \"x\": 0.0,\n#        \"y\": 0.0,\n#        \"z\": 0.0\n#    },\n#    \"Waypoint.duration\": 1.0\n# }\n```\n\n#### Configuration through dataclasses\n\nThe `ConfigurationManager` supports the generation of a JSON object from\na [Data Class](https://docs.python.org/3/library/dataclasses.html) instance. Each field declared in the `dataclass` will\nbe itself converted into an appropriate JSON value. The name of the encoded field defaults to the `dataclass` field\nname, unless specified otherwise through the supported metadata.\n\n```python\nimport dataclasses\n\n\n@dataclasses.dataclass\nclass Vector3D:\n    x: float = 0.0\n    y: float = 0.0\n    z: float = 0.0\n\n\n@dataclasses.dataclass\nclass Entity:\n    position: Vector3D = dataclasses.field(default_factory=Vector3D)\n    rotation: Vector3D = dataclasses.field(default_factory=Vector3D)\n\n    _encoded_fieldnames = {\n        \"position\": \"Entity.position\",\n        \"rotation\": \"Entity.eulerAngles\",\n    }\n\n\n@dataclasses.dataclass\nclass Operator(Entity):\n    height: float = dataclasses.field(default=1.75)\n\n    _encoded_fieldnames = {\n        \"height\": \"Operator.height\",\n        \"position\": \"Entity.position\",\n        \"rotation\": \"Entity.eulerAngles\",\n    }\n\n\n@dataclasses.dataclass\nclass WorldData:\n    operator: Operator = dataclasses.field(default_factory=Operator)\n    robot: Entity = dataclasses.field(default_factory=Entity)\n\n    _encoded_fieldnames = {\n        \"operator\": \"/Operators/Tim/Operator\",\n        \"robot\": \"/ur10/UR10\",\n    }\n```\n\n#### Configuration through JsonSerializable\n\nThe `ConfigurationManager` supports the generation of JSON value from `JsonSerializable` objects, implementing\nthe `to_json` and `from_json` primitives. Those can further rely on the `ConfigurationManager` methods to encode their\nfields. \n\n```python\nfrom csi import ConfigurationManager\nfrom csi.configuration import JsonSerializable\n\n\nclass ComplexFloat(JsonSerializable):\n    _value: float\n    \n    def to_json(self):\n        return self._value\n    \n    @classmethod\n    def from_json(cls, obj):\n        c = ComplexFloat()\n        c._value = obj\n        return c\n\n    \nclass ComplexWaypoint(JsonSerializable):\n    duration: ComplexFloat\n    \n    def to_json(self):\n        return {\n            \"d\": ConfigurationManager().encode(self.duration),\n        }\n    \n    @classmethod\n    def from_json(cls, obj):\n        w = ComplexWaypoint()\n        w.duration = ConfigurationManager(ComplexFloat).decode(obj[\"d\"])\n        return w\n```\n\n\n### Defining situations of interest\n\nMonitoring encapsulates all steps required to define the events and metrics exposed by a twin instance, and the\ndefinition of situations to be monitored in the environment. This is the core of the `csi.situation` module. Situations\ncapture states of interest in the system, and they can enforce requirements to be maintained or hazardous configurations\nto be avoided over its lifetime. They are concretely defined as temporal logic predicates, through\nthe [py-metric-temporal-logic](https://github.com/mvcisback/py-metric-temporal-logic) library, combining components\nusing boolean or temporal operators. As an example the twin might expose the velocity of different autonomous agents\nthroughout the simulation, and their proximity to various obstacles. Specific monitors can be defined to ensure that\nagents in proximity to each other do slow down to reduce the likelihood of accidents, and that they never exceed their\nspeed limit.\n\n#### Defining the components of the system\n\nComponents are the building blocks of a situation. They represent individual metrics which evolution over time might\nsatisfy a specific situation, a state of interest in the system. Related components are defined under the same context,\nand contexts themselves may be nested in other contexts. Components of a system are thus defined as a type hierarchy\nbuilt on top of the `Component` and `Context` base types.\n\n```python\nfrom csi.situation import Context, Component\n\n\nclass Position(Context):\n    in_cell = Component()\n    in_bench = Component()\n    in_tool = Component()\n\n\nclass Entity(Context):\n    position = Position()\n    is_moving = Component()\n    velocity = Component()\n\n\nclass Welder(Entity):\n    is_active = Component()\n\n\nclass Cell(Context):\n    welder = Welder()\n    robot = Entity()\n\n\nclass IndustrialContext(Context):\n    operator = Entity()\n    cell = Cell()\n```\n\n#### Formalising situations\n\nSituations capture states of interest in the system, requirements that should be maintained across its lifecycles,\noccurrences which should be avoided, or combinations of events that need to be encountered during testing. Situations\nare formalised as temporal logic predicates which condition components through boolean and temporal operators, using\nthe `mtl` library. `Component` can be combined into complex boolean or temporal operators using the syntax proposed in\n[py-metric-temporal-logic](https://github.com/mvcisback/py-metric-temporal-logic).\n\n```python\ni = IndustrialContext()\n\n# Hazard: the operator is in the cell while the welder is active\nh = ((i.operator.position.in_cell | i.operator.position.in_tool) & i.cell.welder.is_active).eventually()\n\n# Req: only an active robot at the tool can trigger the welder\nr = i.cell.welder.is_active.implies(i.cell.robot.position.in_tool)\n\n# Check: the welder never moves\nc = (~i.cell.welder.is_moving).always()\n```\n\nIn some instances, it might be useful to define a situation for any instance of a context, irrespective of how it can be\nnested or reused in other contexts. The purpose of the `Alias` primitive is to make such self-referencing definitions\nmore convenient.\n\n```python\nfrom csi.situation import Alias\n\nPosition.reaches_tool = Alias((~Position.in_tool) & (Position.in_tool >> 1))\n# Automatically defines the following:\n# - i.operator.position.reaches_tool\n# - i.cell.robot.reaches_tool\n# - i.cell.welder.reaches_tool\n\nWelder.check_setup = Alias(~Welder.is_moving & Welder.position.in_tool)\nassert i.cell.welder.check_setup == (~i.cell.welder.is_moving & i.cell.position.in_tool)\n```\n\n#### Defining components' domain for coverage\n\nA domain captures the possible values or ranges thereof for a component. By defining the domain of a component, one can\nassess the portion of said domain covered by a set of observations, and whether additional observations might be of\ninterest. The notion of coverage extends to sets of components and their domains; covering a set of components requires\ncovering all value combinations of their domains. A domain can be defined for a component upon declaration. A domain\nonly requires to define a conversion operation, from an observed value to a domain one, capturing in which value/range\nthereof the observation fits, and a length if applicable. The framework offers a number of primitives to define common\ndomains:\n\n```python\nfrom csi.situation import domain_values, domain_identity, domain_threshold_range\nfrom csi.situation import Context, Component\n\n\nclass Entity(Context):\n    # Domain values, exact set of values of interest\n    is_moving = Component(domain_values({True, False}))\n    \n    # Identity domain, unbounded, all encountered values are recorded\n    status = Component(domain_identity())\n    \n    # Range domain, the interval [0; 16) is divided into equal-length (0.25) intervals\n    velocity = Component(domain_threshold_range(0.0, 16.0, 0.25, upper=True))\n```\n\nNote that the domain is mostly used in the computation of coverage metrics for one or more event traces. Event traces\nare collected by processing the outputs of a twin instance and discussed in the following sections.\n\n### Running the twin\n\nA run of a Digital Twin instance, allows the user to evaluate the response of the system under a given configuration. It\ndoes require some care to ensure the appropriate files and configuration are generated to execute the run, and to\ncollect the data produced by the run for further processing. The `Experiment` class aims to ease the process of running\nmultiple instances of the twin and collecting the resulting traces. Running an `Experiment` generates a record of the\nrun, with the experiment configuration, status of the run, and a working directory with the generated data. \n\nAn experiment is defined by overriding the `execute` method, introducing all required steps to produce the experimental\ndata. We recommend the use of relative paths for files generated by the experiment, such as event traces; each run of\nthe experiment will occur in its separate, dedicated working directory. The experiment configuration is expected to be\ncompliant with the `csi.ConfigurationManager` as it is serialised into a JSON configuration file as part of the\nexperiment backup. Experiments stored in the same directory are part of the same `Repository`. A repository provides\nconvenient access to all experiments, runs, or successful runs thereof.\n\n```python\nfrom csi import Experiment\n\nclass SkeletonTwinRunner(Experiment):\n\n    def execute(self) -> None:\n        \"\"\"Run digital twin container with the specified configuration\"\"\"\n        # Generate configuration file\n        # ...\n        # Run twin container\n        # ...\n        # Generate event trace\n        # ...\n        # Monitor for hazard occurrences\n        # ...\n\ne = SkeletonTwinRunner()\ne.configuration = SceneConfiguration()\ne.run(retries=5)\n```\n\nDue to the nature of the twin launcher, configuration and trace files are located in the build folder. Concurrent runs\nfrom the same build might thus result in conflicting experiments, and results being overwritten. It is advised to use\na container to execute the Digital Twin to guarantee isolation, or copy the build folder for each concurrent thread.\n\n\n### Building a trace of events\n\nEach run of the Digital Twin produces a record of the messages exchanged between the different entities modelled by the\nsystem. This record carries little information regarding the semantic of the messages, their contents, or their\nrelations to the components required for monitoring situations of interests. It is up to the user to provide some\nmeaning to said messages for a given twin instance, based on their type, contents, or communication channels.\n\nThe `csi.twin` module provides primitives to ease the access to a message record. The `DataBase` type covers the basic\ninteraction with the message database. `from_table` iterates over all messages in the specified tables, returning each\nas a separate object with the same fields as the original message. Note that the message types and contents may vary\nbased on your twin instance. It is recommended to assess the available messages on a trial run of each instance.\n\n```python\nfrom csi.twin import DataBase, from_table\n\ndb = DataBase(\"/path/to/db\")\n\nfor m in from_table(db, \"movablestatus\"):\n    print(\"At time {}, Entity {} is {}moving\".format(m.timestamp, m.entity, \"not \" if not m.is_moving else \"\"))\n```\n\nThe `csi.situation` module defines the notion of an event trace to track the values of components' over time, and assess\nthe occurrence of specific situations. Entries are indexed by their component. Each new value should be recorded with\nthe instant, as a timestamp, at which the change occurs.\n\n```python\nfrom csi.twin import DataBase, from_table\nfrom csi.situation import Trace\n\ndb = DataBase(\"/path/to/db\")\ntrace = Trace()\nP = IndustrialContext()\n\n# Define fixed-value constraint\ntrace[P.constraints.cobot.velocity.in_bench] = (0.0, 15.0)\n\n# Record operator movement in cell\ntrace[P.operator.is_moving] = ( 0.0, False)\ntrace[P.operator.is_moving] = ( 1.0, True)\ntrace[P.operator.is_moving] = ( 4.0, True)\ntrace[P.operator.is_moving] = (10.0, False)\n```\n\nSituations can be evaluated against a trace to assess whether they occur or not. This is achieved through a monitor,\nwhich operators on a set of situations for evaluation, and extracting relevant properties such as the set of components\nused throughout said situations.\n```python\nfrom csi.situation import Monitor\n# An operator in movement always stops within 5.0 time units\nc = (P.operator.is_moving.implies((~P.operator.is_moving).eventually(0, 5.0))).always()\n# The operator eventually moves\nd = P.operator.is_moving.eventually()\n\nm = Monitor({c, d})\n\nassert m.evaluate(trace)[c] == True\nassert m.evaluate(trace)[d] == True\n```\n\n\n### Coverage computation and metrics\n\nThe experimental `EventCombinationsRegistry` maintains a record of all combinations of values encountered for a given\nset of components. It can process traces to extract such combinations and provide some primitives to compute the\ncombined components' domain coverage. \n\n> **WARNING**: This is an experimental feature which is neither pleasant to use nor reliable. Consider the example\n> ad-hoc script provided by `experiments/tcx_safety/serialisation_dataset.py` instead.\n\n```python\nfrom csi.situation import EventCombinationsRegistry\n\ne = EventsCombinationsRegistry()\n\n# Define the tracked components' domain (reuse in-situ domain definitions where possible)\ne.domain[P.operator.is_moving] = P.operator.is_moving.domain\ne.domain[P.operator.velocity] = P.operator.velocity.domain\n\n# Register the events' combinations encountered by a trace\ne.register(trace)\n\nprint(e.coverage)\n```\n\n## Citing\n\n```bibtex\n@InProceedings{sassi,\n    author=\"Lesage, Benjamin and Alexander, Rob\",\n    title=\"SASSI: Safety Analysis Using Simulation-Based Situation Coverage for Cobot Systems\",\n    booktitle=\"Computer Safety, Reliability, and Security (Proceedings of SafeComp)\",\n    year=\"2021\",\n    publisher=\"Springer International Publishing\",\n    pages=\"195--209\",\n    isbn=\"978-3-030-83903-1\"\n}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Gaudeval/py-csi-cobotics",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-csi-cobotics",
    "package_url": "https://pypi.org/project/py-csi-cobotics/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-csi-cobotics/",
    "project_urls": {
      "Homepage": "https://github.com/Gaudeval/py-csi-cobotics",
      "Repository": "https://github.com/Gaudeval/py-csi-cobotics"
    },
    "release_url": "https://pypi.org/project/py-csi-cobotics/0.2.1/",
    "requires_dist": [
      "dataset (>=1.5.0,<2.0.0)",
      "geneticalgorithm (>=1.0.2,<2.0.0)",
      "jsonpath2 (>=0.4.4,<0.5.0)",
      "metric-temporal-fuzzy-logic (>=0.0.6,<0.0.7)",
      "qdpy (>=0.1.2,<0.2.0)",
      "tqdm (>=4.62.3,<5.0.0)",
      "traces (>=0.6.0,<0.7.0)",
      "docker (>=5.0.3,<6.0.0)",
      "drs (>=2.0.0,<3.0.0)",
      "seaborn (>=0.11.2,<0.12.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "A Python framework for controlling and processing experiments built upon the CSI:Cobot Digital Twin",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12324779,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d0754ec1589bd2d240218c2e33fafc2ee84b6fa0a1d0f99d5e35f8ad286d38b",
          "md5": "031bfb7c3a117405bf6de2f805cca5c1",
          "sha256": "3063e5cbbfb623d9abf47ad968f693871661247024980937e6e5d667b009525b"
        },
        "downloads": -1,
        "filename": "py_csi_cobotics-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "031bfb7c3a117405bf6de2f805cca5c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 27594,
        "upload_time": "2021-12-16T13:07:20",
        "upload_time_iso_8601": "2021-12-16T13:07:20.381021Z",
        "url": "https://files.pythonhosted.org/packages/6d/07/54ec1589bd2d240218c2e33fafc2ee84b6fa0a1d0f99d5e35f8ad286d38b/py_csi_cobotics-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b481a8b45e540f205ffb629db3ff6b6cc7a7b33dc4a337df1fb29089080e590",
          "md5": "7350ec680f3f6b184ed1b614da46e1be",
          "sha256": "1b6c2c8795491c050a4e21621f7d4a3ece1e07904d0d00bf52f10ac75e17800d"
        },
        "downloads": -1,
        "filename": "py-csi-cobotics-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7350ec680f3f6b184ed1b614da46e1be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 44130,
        "upload_time": "2021-12-16T13:07:18",
        "upload_time_iso_8601": "2021-12-16T13:07:18.587015Z",
        "url": "https://files.pythonhosted.org/packages/1b/48/1a8b45e540f205ffb629db3ff6b6cc7a7b33dc4a337df1fb29089080e590/py-csi-cobotics-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d0754ec1589bd2d240218c2e33fafc2ee84b6fa0a1d0f99d5e35f8ad286d38b",
        "md5": "031bfb7c3a117405bf6de2f805cca5c1",
        "sha256": "3063e5cbbfb623d9abf47ad968f693871661247024980937e6e5d667b009525b"
      },
      "downloads": -1,
      "filename": "py_csi_cobotics-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "031bfb7c3a117405bf6de2f805cca5c1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 27594,
      "upload_time": "2021-12-16T13:07:20",
      "upload_time_iso_8601": "2021-12-16T13:07:20.381021Z",
      "url": "https://files.pythonhosted.org/packages/6d/07/54ec1589bd2d240218c2e33fafc2ee84b6fa0a1d0f99d5e35f8ad286d38b/py_csi_cobotics-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b481a8b45e540f205ffb629db3ff6b6cc7a7b33dc4a337df1fb29089080e590",
        "md5": "7350ec680f3f6b184ed1b614da46e1be",
        "sha256": "1b6c2c8795491c050a4e21621f7d4a3ece1e07904d0d00bf52f10ac75e17800d"
      },
      "downloads": -1,
      "filename": "py-csi-cobotics-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7350ec680f3f6b184ed1b614da46e1be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 44130,
      "upload_time": "2021-12-16T13:07:18",
      "upload_time_iso_8601": "2021-12-16T13:07:18.587015Z",
      "url": "https://files.pythonhosted.org/packages/1b/48/1a8b45e540f205ffb629db3ff6b6cc7a7b33dc4a337df1fb29089080e590/py-csi-cobotics-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}