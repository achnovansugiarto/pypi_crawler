{
  "info": {
    "author": "Jürgen Knauth",
    "author_email": "pubsrc@binary-overflow.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3"
    ],
    "description": "jk_uploadpack\n==========\n\nIntroduction\n------------\n\nThis python module provides a packer/unpacker based on 'tar' that reduces redundancies before packing.\n\nInformation about this module can be found here:\n\n* [github.org](https://github.com/jkpubsrc/python-module-jk-uploadpack)\n* [pypi.python.org](https://pypi.python.org/pypi/jk_uploadpack)\n\nWhy 'uploadpack'?\n----------------\n\nClassic compression tools work very well in general. But in very specific situations these tools won't work well enough: If you need to compress data containing redundant\ndata that can't be compressed very well. This is the case with some directory trees for web sites hosted by webservers. And precisely that was the motivation to implement\n`uploadpack`.\n\nSo `uploadpack` is nothing more than a `tar` based compression tool. In fact an `uploadpack` is nothing else but a `tar` file (possibly compressed with `gz`, `bzip2` or `xz`)\nwith a very specific structure: It avoids redundancies.\n\nLimitations of this module\n--------------------------\n\nThis `uploadpack` currently only suppors files and directories, no links.\n\nPreliminaries\n------------------------------------------------------------------\n\nPlease include an import statement for this module into your application by using the following code:\n\n```python\nimport jk_uploadpack\n```\n\nHow to compress a directory tree to an `uploadpack` archive\n------------------------------------------------------------------\n\nIn order to create an `uploadpack` you need to instantiate a packer:\n\n```python\nup = jk_uploadpack.Packer(\"archive.up.gz\")\n```\n\nNow you can create a file group (here: \"foo\") and add a file to it (here: \"foobar.txt\"):\n\n```python\nup.fileGroup(\"foo\").addFile(\"/path/to/dir/foobar.txt\", \"dir/foobar.txt\")\n```\n\nOf course you can repeat that with any number of files.\n\nAfter having added all files you need to close the archive:\n\n```python\nup.close()\n```\n\nYou must always invoke `close()` as otherwise essential data will not be written.\n\nA more secure way of doing this is by using `Packer` with `with`:\n\n```python\nwith jk_uploadpack.Packer(\"archive.up.gz\") as up:\n\tup.fileGroup(\"foo\").addFile(\"/path/to/dir/foobar.txt\", \"dir/foobar.txt\")\n```\n\nIn this case `close()` will be called automatically.\n\nHow to uncompress an `uploadpack` archive\n------------------------------------------------------------------\n\nIn order to decompress an `uploadpack` you need to instantiate an unpacker:\n\n```python\nup = jk_uploadpack.Unpacker(\"archive.up.gz\")\n```\n\nThen you can unpack all files to a target directory:\n\n```python\nup.fileGroup(\"default\").unpackToDir(\"outdir\")\n```\n\nAfter having extracted all files you can close the archive:\n\n```python\nup.close()\n```\n\nYou should always invoke `close()`.\n\nA more secure way of doing this is by using `Unpacker` with `with`:\n\n```python\nwith jk_uploadpack.Unpacker(\"archive.up.gz\") as up:\n\tup.fileGroup(\"default\").unpackToDir(\"outdir\")\n```\n\nIn this case `close()` will be called automatically.\n\nSpecific Features\n--------------------------------------\n\n### File Groups\n\n`uploadpack` always puts files in so called file groups. File groups are organizational units that can be considered as being an archive themselves. Characterstics of such a file group are:\n\n* A file group is identified by a name.\n* On decompression all files of a file group are always written to a specific directory.\n* Certain parameters can be set at a file group that take effect for all files in that file group.\n\nIf you don't need to use file groups for a specific reason, use \"`default`\" as a convention.\n\nContact Information\n-------------------\n\nAuthor(s):\n\n* Jürgen Knauth: pubsrc@binary-overflow.de\n\nLicense\n-------\n\nThis software is provided under the following license:\n\n* Apache Software License 2.0",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "archiving,compression,gzip,tar,bzip,xz,webhosting",
    "license": "proprietary",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jk-uploadpack",
    "package_url": "https://pypi.org/project/jk-uploadpack/",
    "platform": "",
    "project_url": "https://pypi.org/project/jk-uploadpack/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/jk-uploadpack/0.2021.3.19/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An archiver based on 'tar' that reduces redundancies before packing.",
    "version": "0.2021.3.19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9819844,
  "releases": {
    "0.2021.3.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98dd1aa1d4fa9ff6eee5f9919e56bc6676a7e2e056eeec591139d69f3de6878d",
          "md5": "2da132f19bdaf9193afb48c01135d089",
          "sha256": "26ac915ec6a479b459ad161310276cabb9f02e7ff07b68456e5f6c24ed655450"
        },
        "downloads": -1,
        "filename": "jk_uploadpack-0.2021.3.15.tar.gz",
        "has_sig": false,
        "md5_digest": "2da132f19bdaf9193afb48c01135d089",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10235,
        "upload_time": "2021-03-16T13:52:39",
        "upload_time_iso_8601": "2021-03-16T13:52:39.052985Z",
        "url": "https://files.pythonhosted.org/packages/98/dd/1aa1d4fa9ff6eee5f9919e56bc6676a7e2e056eeec591139d69f3de6878d/jk_uploadpack-0.2021.3.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2021.3.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69c91e2cd9726f9570998f720ee3d378041390b0c9d126c9476aecb3775f9ff4",
          "md5": "e2188a96242472ec15d44650906dce3a",
          "sha256": "5d5300e144c466ab5bc46a2e3a9514d5d5c1690c8c37fb66f056945fbb1b98f4"
        },
        "downloads": -1,
        "filename": "jk_uploadpack-0.2021.3.19.tar.gz",
        "has_sig": false,
        "md5_digest": "e2188a96242472ec15d44650906dce3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10635,
        "upload_time": "2021-03-19T11:25:55",
        "upload_time_iso_8601": "2021-03-19T11:25:55.064003Z",
        "url": "https://files.pythonhosted.org/packages/69/c9/1e2cd9726f9570998f720ee3d378041390b0c9d126c9476aecb3775f9ff4/jk_uploadpack-0.2021.3.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69c91e2cd9726f9570998f720ee3d378041390b0c9d126c9476aecb3775f9ff4",
        "md5": "e2188a96242472ec15d44650906dce3a",
        "sha256": "5d5300e144c466ab5bc46a2e3a9514d5d5c1690c8c37fb66f056945fbb1b98f4"
      },
      "downloads": -1,
      "filename": "jk_uploadpack-0.2021.3.19.tar.gz",
      "has_sig": false,
      "md5_digest": "e2188a96242472ec15d44650906dce3a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10635,
      "upload_time": "2021-03-19T11:25:55",
      "upload_time_iso_8601": "2021-03-19T11:25:55.064003Z",
      "url": "https://files.pythonhosted.org/packages/69/c9/1e2cd9726f9570998f720ee3d378041390b0c9d126c9476aecb3775f9ff4/jk_uploadpack-0.2021.3.19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}