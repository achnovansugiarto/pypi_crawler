{
  "info": {
    "author": "Sambit Paul",
    "author_email": "sambitpaul1992@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PySNR\n\n[![Build Status](https://app.travis-ci.com/psambit9791/pysnr.svg?branch=master)](https://app.travis-ci.com/psambit9791/pysnr)\n[![Documentation Status](https://readthedocs.org/projects/pysnr/badge/?version=latest)](https://pysnr.readthedocs.io/en/latest/?badge=latest)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg?)](https://github.com/psambit9791/jdsp/blob/master/LICENSE)\n\nPySNR is a Python library which provides a suite of tools for performing various types of noise analysis on  signals. \nPySNR aims to provide five main functionalities:\n- [x] SNR (Signal to Noise Ratio)\n- [x] THD (Total Harmonic Distortion)\n- [x] SINAD (Signal to Noise and Distortion Ratio)\n- [x] TOI (Third Order Intercept)\n- [x] SFDR (Spurious Free Dynamic Range)\n\nThe following sections elaborate on each of these utilities further.\n\n\n### <u>Signal to Noise Ratio</u> (SNR)\n\nThis calculates the signal-to-noise ratio of an input signal. Signal-to-Noise ratio is defined as the ratio \nbetween the power of the desired signal to the power of the background noise.\n\nIf the noise magnitude is provided along with the signal, the SNR is calculated using the following formula: \n$$20 \\log_{10}\\left({\\frac{\\sqrt{\\sum signal^2}}{\\sqrt{\\sum noise^2}}}\\right)$$\n\nIf the noise magnitude is not provided, a modified periodogram is computed using a Kaiser window with $\\beta = 38$\nand the SNR is computed using the power of fundamental frequency and the power of the signal after removing the top 6 \nharmonics. The formula used in this case is:\n$$10 \\log_{10}\\left({\\frac{\\sqrt{\\sum signal^2}}{\\sqrt{\\sum noise^2}}}\\right)$$\n\nThe SNR value can also be computed by providing the periodograms of *power spectral density* $(V^{2}/Hz)$ or \n*power spectrum* $(V^{2})$. In case of power spectrum periodograms,the resolution bandwidth needs to be provided \nas well. Utilities provide the ```enbw()``` function which computes the estimated noise bandwidth for assessing \nthe resolution bandwidth.\n\n\n### <u>Total Harmonic Distortion</u> (THD)\n\nThis calculates the total harmonic distortion of a signal. Total harmonic distortion is defined as the ratio\nof the power of the harmonics to the power of the fundamental frequency.\n\nA modified periodogram is computed using a Kaiser window with $\\beta = 38$ and this information is then used to \ndetermine the fundamental frequency and its harmonics. The formula used for computing the THD is:\n$$\\frac{\\sqrt{V^2_{H_1} + V^2_{H_2} + V^2_{H_3} + ...}}{V_{H_0}}$$\n\nThe THD value can also be computed by providing the periodograms of *power spectral density* $(V^{2}/Hz)$ or \n*power spectrum* $(V^{2})$. In case of power spectrum periodograms, the resolution bandwidth needs to be provided \nas well. Utilities provide the ```enbw()``` function which computes the estimated noise bandwidth for assessing \nthe resolution bandwidth.\n\n\n### <u>Signal to Noise and Distortion Ratio</u> (SINAD)\n\nThis calculates the signal-to-noise-and-distortion ratio of a signal. SINAD is defined as the ratio between the \npower of the signal's fundamental frequency to the power of the background noise and harmonics.\n\nA modified periodogram is computed using a Kaiser window with $\\beta = 38$ and this information is then used to \ndetermine the fundamental frequency and its harmonics. The formula used for computing the SINAD is:\n$$\\frac{P_{fundamental}}{P_{noise} + P_{harmonics}}$$\n\nThe SINAD value can also be computed by providing the periodograms of *power spectral density* $(V^{2}/Hz)$ or \n*power spectrum* $(V^{2})$. In case of power spectrum periodograms, the resolution bandwidth needs to be provided \nas well. Utilities provide the ```enbw()``` function which computes the estimated noise bandwidth for assessing \nthe resolution bandwidth.\n\n### <u>Third Order Intercept</u> (TOI)\n\nThis calculates the third order intercept point for a signal. There are six third-order intermodulation points from the \ntop two dominant frequencies $F_1$ and $F_2$ (fundamental signals) &mdash; $3F_1$, $3F_2$, $2F_1 + F_2$, $2F_2 + F_1$, \n$2F_1 - F_2$ and $2F_2 - F_1$. Amongst these, the hardest to handle are $2F_1 - F_2$ and $2F_2 - F_1$ because of how c\nlose they are to the fundamental signals. TOI helps us compute the point at which the power of the third order products \nintercepts the power of the fundamental signals. In real world devices, this does not happen because the output power is \nlimited; hence, the TOI is a theoretical value. TOI helps evaluate the linearity of the signal source. The higher the \nTOI, the better the linearity with lower levels of intermodulation distortion.\n\nA modified periodogram is computed using a Kaiser window with $\\beta = 38$ and this information is then used to identify\nthe two dominant frequencies $F_1$ and $F_2$ which is considered the fundamental signal. The formula used for computing \nthe TOI is:\n$$\\overline{P_{fundamental}} + \\frac{\\overline{P_{fundamental}} - \\overline{P_{intermodulation}}}{2}$$\n\nThe TOI value can also be computed by providing the periodograms of *power spectral density* $(V^{2}/Hz)$ or \n*power spectrum* $(V^{2})$. In case of power spectrum periodograms, the resolution bandwidth needs to be provided \nas well. Utilities provide the ```enbw()``` function which computes the estimated noise bandwidth for assessing \nthe resolution bandwidth.\n\n### <u>Spurious Free Dynamic Range</u> (SFDR)\n\nThis calculates the spurious free dynamic range of a signal. SFDR is defined as the strength ratio of the fundamental \nsignal to the strongest spurious signal.\n\nA modified periodogram is computed using a Kaiser window with $\\beta = 38$ and this information is then used to \ndetermine the fundamental frequency and its harmonics. The formula used for computing the SFDR is:\n$$10 \\log_{10}\\left({\\frac{P_{fundamental}}{P_{spurious}}}\\right)$$\n\nThe SFDR value can also be computed by providing the periodograms of *power spectral density* $(V^{2}/Hz)$ or \n*power spectrum* $(V^{2})$. In case of power spectrum periodograms, the resolution bandwidth needs to be provided \nas well. Utilities provide the ```enbw()``` function which computes the estimated noise bandwidth for assessing \nthe resolution bandwidth.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/psambit9791/pysnr",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysnr",
    "package_url": "https://pypi.org/project/pysnr/",
    "platform": null,
    "project_url": "https://pypi.org/project/pysnr/",
    "project_urls": {
      "Homepage": "https://github.com/psambit9791/pysnr"
    },
    "release_url": "https://pypi.org/project/pysnr/0.0.1/",
    "requires_dist": [
      "numpy (~=1.22)",
      "scipy (~=1.8.1)"
    ],
    "requires_python": ">=3.8",
    "summary": "A suite of tools performing noise analysis",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14237279,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec2116520a6773e66266bad4b3b3fbfee498f7179a391d2ff1f61917df187c82",
          "md5": "28212a58cd0afb84fb121cf0de6aaf21",
          "sha256": "1b871402633e869937b70999127c7250845059819e9327f999bccc32a6c9e23a"
        },
        "downloads": -1,
        "filename": "pysnr-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28212a58cd0afb84fb121cf0de6aaf21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12747,
        "upload_time": "2022-06-24T14:41:58",
        "upload_time_iso_8601": "2022-06-24T14:41:58.615692Z",
        "url": "https://files.pythonhosted.org/packages/ec/21/16520a6773e66266bad4b3b3fbfee498f7179a391d2ff1f61917df187c82/pysnr-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b93af8bf7e36e7ea3c5f13e7efb7eba3f70f1387f284ccbd703783194ff7d10c",
          "md5": "9ff61950c24797f10be371af15c76a33",
          "sha256": "c17d7871d9d4cc9cfb84793106237480978639fb022c42e829d415d272f56a5d"
        },
        "downloads": -1,
        "filename": "pysnr-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9ff61950c24797f10be371af15c76a33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 714621,
        "upload_time": "2022-06-24T14:42:07",
        "upload_time_iso_8601": "2022-06-24T14:42:07.061683Z",
        "url": "https://files.pythonhosted.org/packages/b9/3a/f8bf7e36e7ea3c5f13e7efb7eba3f70f1387f284ccbd703783194ff7d10c/pysnr-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec2116520a6773e66266bad4b3b3fbfee498f7179a391d2ff1f61917df187c82",
        "md5": "28212a58cd0afb84fb121cf0de6aaf21",
        "sha256": "1b871402633e869937b70999127c7250845059819e9327f999bccc32a6c9e23a"
      },
      "downloads": -1,
      "filename": "pysnr-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "28212a58cd0afb84fb121cf0de6aaf21",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 12747,
      "upload_time": "2022-06-24T14:41:58",
      "upload_time_iso_8601": "2022-06-24T14:41:58.615692Z",
      "url": "https://files.pythonhosted.org/packages/ec/21/16520a6773e66266bad4b3b3fbfee498f7179a391d2ff1f61917df187c82/pysnr-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b93af8bf7e36e7ea3c5f13e7efb7eba3f70f1387f284ccbd703783194ff7d10c",
        "md5": "9ff61950c24797f10be371af15c76a33",
        "sha256": "c17d7871d9d4cc9cfb84793106237480978639fb022c42e829d415d272f56a5d"
      },
      "downloads": -1,
      "filename": "pysnr-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9ff61950c24797f10be371af15c76a33",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 714621,
      "upload_time": "2022-06-24T14:42:07",
      "upload_time_iso_8601": "2022-06-24T14:42:07.061683Z",
      "url": "https://files.pythonhosted.org/packages/b9/3a/f8bf7e36e7ea3c5f13e7efb7eba3f70f1387f284ccbd703783194ff7d10c/pysnr-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}