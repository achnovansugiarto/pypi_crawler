{
  "info": {
    "author": "Kelly Littlepage",
    "author_email": "kelly@klittlepage.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Automating your Advent of Code (AOC) Workflow: aoctools\n\n## Introduction\n\n`aoctools` is a command line interface (cli) that helps you automate\n[Advent of Code (AOC)](https://adventofcode.com/) boilerplate, e.g., downloading\nthe day's problem input and writing python boilerplate.\n\n## Workflow\n\n### Step 0: Install\n\n`pip3 install aoctools`\n\n### Step 1: Initialize a project\n\n```text\nusage: aoctools init [-h] root_path year\n\npositional arguments:\n  root_path   the root project directory\n  year\n```\n\nThe `init` command will create an `aoctools` project at the path that you\nspecify.\n\n### Step 2: Bootstrap the boilerplate for a new day\n\nMake sure that you set an environment variable named `AOC_SESSION_COOKIE` to the\n`session` cookie of your AOC login; in Chrome, you can obtain this cookie by\nopening Developer Tools (`View > Developer > Developer Tools`), opening the\n`Application` tab, and looking for the value that appears next to `session`.\n\nAs an alternative to setting this variable every time that you run the tool, `aoctools` supports `.env` files. You can create a `.env` file under your\nproject directory and run `aoctools` from said directory for an even more\nergonomic workflow. NB: `.env` files are loaded relative to the working\ndirectory (where you run `aoctools` from) - *not* the project directory.\n\n```text\nusage: aoctools init_day [-h] [--root-path [ROOT_PATH]] [--year YEAR]\n                         [--skip-bootstrap] [--skip-download]\n                         [--session-cookie SESSION_COOKIE]\n                         day\n\npositional arguments:\n  day                   aoc challenge day\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --root-path [ROOT_PATH]\n                        the root project directory; defaults to the current\n                        working directory\n  --year YEAR           aoc challenge year; defaults to the project year\n  --skip-bootstrap      don't generate python boilerplate\n  --skip-download       don't download the challenge input data\n  --session-cookie SESSION_COOKIE\n                        an AOC login session cookie; defaults to the\n                        environment variable AOC_SESSION_COOKIE\n```\n\nIf you want to generate boilerplate for the challenge day without downloading\nthe day's input file, pass `--skip-download` to the `aoctools init_day`\ncommand; you can download the day's input file later by passing\n`--skip-bootstrap`; NB: the `init_day` command will not clobber existing\npython files, so running it twice without passing `--skip-bootstrap` will fail.\n\n### Step 3: Hack\n\nBootstrapping will generate a new module under the root `aoc` module named after\nthe freshly bootstrapped day. For example, running `aoctools init_day 1` will\ncreate a file named `aoc/d01/main.py` containing:\n\n```python\nfrom typing import IO\n\ndef p_1(input_file: IO,\n        debug=False): # pylint: disable=unused-argument\n    pass\n\n\ndef p_2(input_file: IO,\n        debug=False): # pylint: disable=unused-argument\n    pass\n\n```\n\nFilling in `p_1` and `p_2` is where you come in; `aoctools` requires that\nyou return a (stringifiable) value if you want to use the built-in solution\nprinter and regression test framework, but there are no restrictions beyond\nthat.\n\nRunning your solution with `aoctools` will result in `p_1` or `p_2` being\ncalled with a reference to the input file; semantically, it's the same as if\nyou had written:\n\n```python\nimport aoc.d01\n\nif __name__ == '__main__':\n    with open('data/d01/input.txt', 'r', encoding='utf8') as input_file:\n        aoc.d01.p_1(input_file, False) # or True\n```\n\nand run the file from the root of your project directory. The `debug` variable\nis set via the `cli` and makes it easy to control print output:\n\n```python\ndef p_1(input_file: IO, debug=False):\n    v_1 = 1\n    v_2 = 2\n\n    if debug:\n        print(f\"v_1 + v_2 = {v_1} + {v_2} = {v_1 + v_2}\")\n\n    return v_1 + v_2\n```\n\n### Step 4: Test the example inputs\n\nCreate a new example by running the `init_example` command:\n\n```text\nusage: aoctools init_example [-h] [--root-path [ROOT_PATH]]\n                             day {1,2} expected [example_number]\n\npositional arguments:\n  day                   aoc challenge day\n  {1,2}                 the challenge part for the example\n  expected              the expected example value\n  example_number        aoc challenge day; optional (autoincrement)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --root-path [ROOT_PATH]\n                        the root project directory; defaults to the current\n                        working directory\n```\n\nExamples are created in `data/day/example_n.txt`. By default, your examples will\nbe numbered sequentially; you can specify a number explicitly by passing an\nadditional `[example_number]` argument.\n\nExample files take the form:\n\n```text\npart: 1\nexpected: 2\n\n1-3 a: abcde\n1-3 b: cdefg\n2-9 c: ccccccccc\n```\n\nThe first line must be `part: (1|2)` corresponding to the part of the AOC\nproblem that the example pertains to. The second line must be an expected\nvalue: `expected: (.+)`. The third line must be blank line. The rest of the file\nshould contain the example text.\n\nRun examples via the `run_examples` command:\n\n```text\nusage: aoctools run_examples [-h] [--root-path [ROOT_PATH]] [--debug]\n                             day [example_number]\n\npositional arguments:\n  day                   aoc challenge day\n  example_number        the example to run; defaults to all examples\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --root-path [ROOT_PATH]\n                        the root project directory\n  --debug               print debug info\n```\n\nYou must specify a day. You can optionally specify a specific example to run;\nby default, all examples for the given day will run.\n\n### Step 5: Run your solution\n\n```text\nusage: aoctools run [-h] [--root-path [ROOT_PATH]] [--debug] day {1,2}\n\npositional arguments:\n  day                   aoc challenge day\n  {1,2}                 the challenge part to run\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --root-path [ROOT_PATH]\n                        the root project directory\n  --debug               print debug info\n```\n\nAs an example, you can run Day 1, Pt 1 from your root project directory by\ninvoking:\n\n```text\naoctools run 1 1\n\nsolution to day 1, part 1: xxxx\n```\n\n### Step 6 (Optional): Regression tests & Code Quality\n\nOnce you identify a solution you can populate the automatically generated\nregression tests under `tests/aoc/test_d*`:\n\n```python\nimport aoc.d01\n\nfrom tests.aoc.test_base import BaseTestCase\n\n\nclass TestAll(BaseTestCase):\n    def test_part_one(self):\n        self.run_aoc_part(1, CHANGEME, aoc.d01.p_1)\n\n    def test_part_two(self):\n        self.run_aoc_part(1, CHANGEME, aoc.d01.p_2)\n```\n\nRunning `make test` from the root project directory will run all regression\ntests.\n\nSimilarly, running `make lint` will type lint and type check your code and\ntests with both `pylint` and `mypy`.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/klittlepage/aoctools/archive/0.2.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klittlepage/aoctools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aoctools",
    "package_url": "https://pypi.org/project/aoctools/",
    "platform": "",
    "project_url": "https://pypi.org/project/aoctools/",
    "project_urls": {
      "Download": "https://github.com/klittlepage/aoctools/archive/0.2.0.tar.gz",
      "Homepage": "https://github.com/klittlepage/aoctools"
    },
    "release_url": "https://pypi.org/project/aoctools/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A CLI for working with Advent of Code (AOC) problems",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8831133,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f688afc809939e23ba314d7e7150de752ac41434162d2542873b903b49422e8",
          "md5": "54b1e64b4053864b7c48af5df75e8b29",
          "sha256": "bde1563a87623f905fdb0b8a5196ddadcda551a81797c3d4a5d51543b16e1764"
        },
        "downloads": -1,
        "filename": "aoctools-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54b1e64b4053864b7c48af5df75e8b29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8841,
        "upload_time": "2020-12-05T03:02:17",
        "upload_time_iso_8601": "2020-12-05T03:02:17.202819Z",
        "url": "https://files.pythonhosted.org/packages/8f/68/8afc809939e23ba314d7e7150de752ac41434162d2542873b903b49422e8/aoctools-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1a471d6056c1c1c25c001b625ad8e4b62152bbe6b21d5ca7668c33bf97d58c4",
          "md5": "7ed424802c53536d0e6a5e1a92cd0886",
          "sha256": "91a5ef3afa0691c1688797fef962672a0bd5961ffcbd398f6be3c3912dd40d71"
        },
        "downloads": -1,
        "filename": "aoctools-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7ed424802c53536d0e6a5e1a92cd0886",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9984,
        "upload_time": "2020-12-06T03:24:54",
        "upload_time_iso_8601": "2020-12-06T03:24:54.673417Z",
        "url": "https://files.pythonhosted.org/packages/d1/a4/71d6056c1c1c25c001b625ad8e4b62152bbe6b21d5ca7668c33bf97d58c4/aoctools-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d1a471d6056c1c1c25c001b625ad8e4b62152bbe6b21d5ca7668c33bf97d58c4",
        "md5": "7ed424802c53536d0e6a5e1a92cd0886",
        "sha256": "91a5ef3afa0691c1688797fef962672a0bd5961ffcbd398f6be3c3912dd40d71"
      },
      "downloads": -1,
      "filename": "aoctools-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7ed424802c53536d0e6a5e1a92cd0886",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9984,
      "upload_time": "2020-12-06T03:24:54",
      "upload_time_iso_8601": "2020-12-06T03:24:54.673417Z",
      "url": "https://files.pythonhosted.org/packages/d1/a4/71d6056c1c1c25c001b625ad8e4b62152bbe6b21d5ca7668c33bf97d58c4/aoctools-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}