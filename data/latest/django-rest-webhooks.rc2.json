{
  "info": {
    "author": "Bohdan Datsko",
    "author_email": "bohdan.datsko8888@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "[![PyPI Download](https://img.shields.io/pypi/v/django-rest-webhooks.svg)](https://pypi.python.org/pypi/django-rest-webhooks)\n[![PyPI Status](https://img.shields.io/pypi/status/django-rest-webhooks.svg)](https://pypi.python.org/pypi/django-rest-webhooks)\n\nThis is a fork of https://github.com/selfcommunity/rest-hooks that is\na fork of https://github.com/zapier/django-rest-hooks that is not supported anymore.\n\n## What are Django REST Hooks?\n\n\nREST Hooks are fancier versions of webhooks. Traditional webhooks are usually\nmanaged manually by the user, but REST Hooks are not! They encourage RESTful\naccess to the hooks (or subscriptions) themselves. Add one, two or 15 hooks for\nany combination of event and URLs, then get notification in real-time by our\nbundled threaded callback mechanism.\n\nThe best part is: by reusing Django's great signals framework, this library is\ndead simple. Here's how to get started:\n\n1. Add `'django_rest_webhooks'` to installed apps in settings.py.\n2. Define your `HOOK_EVENTS` in settings.py.\n3. Start sending hooks!\n\nUsing our **built-in actions**, zero work is required to support *any* basic `created`,\n`updated`, and `deleted` actions across any Django model. We also allow for\n**custom actions** (IE: beyond **C**R**UD**) to be simply defined and triggered\nfor any model, as well as truly custom events that let you send arbitrary\npayloads.\n\nBy default, this library will just POST Django's JSON serialization of a model,\nbut you can alternatively provide a `serialize_hook` method to customize payloads.\n\n*Please note:* this package does not implement any UI/API code, it only\nprovides a handy framework or reference implementation for which to build upon.\nIf you want to make a Django form or API resource, you'll need to do that yourself\n(though we've provided some example bits of code below).\n\n\n### Changelog\n\n#### Version 0.0.1:\n\nFirst release of the project after fork from `https://github.com/selfcommunity/rest-hooks`\n\n#### Version 0.0.2:\n\nRemove some Python 2.7 support\n\n#### Version 0.0.3:\n\nUpdate signals import\n\n\n### Development\n\nRunning the tests for Django REST Hooks is very easy, just:\n\n```\ngit clone https://github.com/leanrank/django-rest-webhooks && cd django-rest-hooks\n```\n\nNext, you'll want to make a virtual environment (we recommend using virtualenvwrapper\nbut you could skip this we suppose) and then install dependencies:\n\n```\nmkvirtualenv django-rest-webhooks\npip install -r devrequirements.txt\n```\n\nNow you can run the tests!\n\n```\npython runtests.py\n```\n\n### Requirements\n\n* Python 3 (tested on 3.3, 3.4, 3.6, 3.8)\n* Django 1.8+ (tested on 1.8, 1.9, 1.10, 1.11, 2.0, 2.2, 3.0)\n\n### Installing & Configuring\n\nWe recommend pip to install Django REST Hooks:\n\n```\npip install django-rest-webhooks\n```\n\nNext, you'll need to add `django_rest_webhooks.apps.RestHooksConfig` to `INSTALLED_APPS` and configure\nyour `HOOK_EVENTS` setting:\n\n```python\n### config.py ###\n\nINSTALLED_APPS = (\n    # other apps here...\n    \"django_rest_webhooks\",\n)\n\nHOOK_EVENTS = {\n    # 'any.event.name': 'App.Model.Action' (created/updated/deleted)\n    \"book.added\":       \"bookstore.Book.created\",\n    \"book.changed\":     \"bookstore.Book.updated+\",\n    \"book.removed\":     \"bookstore.Book.deleted\",\n    # and custom events, no extra meta data needed\n    \"book.read\":         \"bookstore.Book.read\",\n    \"user.logged_in\":    None\n}\n\n### bookstore/models.py ###\n\nclass Book(models.Model):\n    # NOTE: it is important to have a user property\n    # as we use it to help find and trigger each Hook\n    # which is specific to users. If you want a Hook to\n    # be triggered for all users, add '+' to built-in Hooks\n    # or pass user_override=False for custom_hook events\n    user = models.ForeignKey(\"auth.User\", on_delete=models.CASCADE)\n    # maybe user is off a related object, so try...\n    # user = property(lambda self: self.intermediary.user)\n\n    title = models.CharField(max_length=128)\n    pages = models.PositiveIntegerField()\n    fiction = models.BooleanField()\n\n    # ... other fields here ...\n\n    def serialize_hook(self, hook):\n        # optional, there are serialization defaults\n        # we recommend always sending the Hook\n        # metadata along for the ride as well\n        return {\n            \"hook\": hook.dict(),\n            \"data\": {\n                \"id\": self.id,\n                \"title\": self.title,\n                \"pages\": self.pages,\n                \"fiction\": self.fiction,\n                # ... other fields here ...\n            }\n        }\n\n    def mark_as_read(self):\n        # models can also have custom defined events\n        from django_rest_webhooks.signals import hook_event\n        hook_event.send(\n            sender=self.__class__,\n            action=\"read\",\n            instance=self # the Book object\n        )\n```\n\nFor the simplest experience, you'll just piggyback off the standard ORM which will\nhandle the basic `created`, `updated` and `deleted` signals & events:\n\n```python\n>>> from django.contrib.auth.models import User\n>>> from django_rest_webhooks.models import Hook\n>>> jrrtolkien = User.objects.create(username=\"jrrtolkien\")\n>>> hook = Hook(user=jrrtolkien,\n                event=\"book.added\",\n                target=\"http://example.com/target.php\")\n>>> hook.save()     # creates the hook and stores it for later...\n>>> from bookstore.models import Book\n>>> book = Book(user=jrrtolkien,\n                title=\"The Two Towers\",\n                pages=327,\n                fiction=True)\n>>> book.save()     # fires off 'bookstore.Book.created' hook automatically\n...\n```\n\n> NOTE: If you try to register an invalid event hook (not listed on HOOK_EVENTS in settings.py)\nyou will get a **ValidationError**.\n\nNow that the book has been created, `http://example.com/target.php` will get:\n\n```\nPOST http://example.com/target.php \\\n    -H Content-Type: application/json \\\n    -d '{\"hook\": {\n           \"id\":      123,\n           \"event\":   \"book.added\",\n           \"target\":  \"http://example.com/target.php\"},\n         \"data\": {\n           \"title\":   \"The Two Towers\",\n           \"pages\":   327,\n           \"fiction\": true}}'\n```\n\nYou can continue the example, triggering two more hooks in a similar method. However,\nsince we have no hooks set up for `'book.changed'` or `'book.removed'`, they wouldn't get\ntriggered anyways.\n\n```python\n...\n>>> book.title += \": Deluxe Edition\"\n>>> book.pages = 352\n>>> book.save()     # would fire off 'bookstore.Book.updated' hook automatically\n>>> book.delete()   # would fire off 'bookstore.Book.deleted' hook automatically\n```\n\nYou can also fire custom events with an arbitrary payload:\n\n```python\nfrom django_rest_webhooks.signals import raw_hook_event\n\nuser = User.objects.get(id=123)\nraw_hook_event.send(\n    sender=None,\n    event_name=\"user.logged_in\",\n    payload={\n        \"username\": user.username,\n        \"email\": user.email,\n        \"when\": datetime.datetime.now().isoformat()\n    },\n    user=user # required: used to filter Hooks\n)\n```\n\n\n### How does it work?\n\nDjango has a stellar [signals framework](https://docs.djangoproject.com/en/dev/topics/signals/), all\nREST Hooks does is register to receive all `post_save` (created/updated) and `post_delete` (deleted)\nsignals. It then filters them down by:\n\n1. Which `App.Model.Action` actually have an event registered in `settings.HOOK_EVENTS`.\n2. After it verifies that a matching event exists, it searches for matching Hooks via the ORM.\n3. Any Hooks that are found for the User/event combination get sent a payload via POST.\n\n\n### How would you interact with it in the real world?\n\n**Let's imagine for a second that you've plugged REST Hooks into your API**.\nOne could definitely provide a user interface to create hooks themselves via\na standard browser & HTML based CRUD interface, but the real magic is when\nthe Hook resource is part of an API.\n\nThe basic target functionality is:\n\n```shell\nPOST http://your-app.com/api/hooks?username=me&api_key=abcdef \\\n    -H Content-Type: application/json \\\n    -d '{\"target\":    \"http://example.com/target.php\",\n         \"event\":     \"book.added\"}'\n```\n\nNow, whenever a Book is created (either via an ORM, a Django form, admin, etc...),\n`http://example.com/target.php` will get:\n\n```shell\nPOST http://example.com/target.php \\\n    -H Content-Type: application/json \\\n    -d '{\"hook\": {\n           \"id\":      123,\n           \"event\":   \"book.added\",\n           \"target\":  \"http://example.com/target.php\"},\n         \"data\": {\n           \"title\":   \"Structure and Interpretation of Computer Programs\",\n           \"pages\":   657,\n           \"fiction\": false}}'\n```\n\n*It is important to note that REST Hooks will handle all of this hook\ncallback logic for you automatically.*\n\nBut you can stop it anytime you like with a simple:\n\n```\nDELETE http://your-app.com/api/hooks/123?username=me&api_key=abcdef\n```\n\nIf you already have a REST API, this should be relatively straightforward,\nbut if not, Tastypie is a great choice.\n\nSome reference [Tastypie](http://tastypieapi.org/) or [Django REST framework](http://django-rest-framework.org/): + REST Hook code is below.\n\n#### Tastypie\n\n```python\n### resources.py ###\n\nfrom tastypie.resources import ModelResource\nfrom tastypie.authentication import ApiKeyAuthentication\nfrom tastypie.authorization import Authorization\nfrom django_rest_webhooks.models import Hook\n\nclass HookResource(ModelResource):\n    def obj_create(self, bundle, request=None, **kwargs):\n        return super(HookResource, self).obj_create(bundle,\n                                                    request,\n                                                    user=request.user)\n\n    def apply_authorization_limits(self, request, object_list):\n        return object_list.filter(user=request.user)\n\n    class Meta:\n        resource_name = \"hooks\"\n        queryset = Hook.objects.all()\n        authentication = ApiKeyAuthentication()\n        authorization = Authorization()\n        allowed_methods = [\"get\", \"post\", \"delete\"]\n        fields = [\"event\", \"target\"]\n\n### urls.py ###\n\nfrom tastypie.api import Api\n\nv1_api = Api(api_name=\"v1\")\nv1_api.register(HookResource())\n\nurlpatterns = patterns(\"\",\n    (r\"^api/\", include(v1_api.urls)),\n)\n```\n#### Django REST framework (3.+)\n\n```python\n### serializers.py ###\n\nfrom django.conf import settings\nfrom rest_framework import serializers, exceptions\n\nfrom django_rest_webhooks.models import Hook\n\n\nclass HookSerializer(serializers.ModelSerializer):\n    def validate_event(self, event):\n        if event not in settings.HOOK_EVENTS:\n            err_msg = f\"Unexpected event {event}\"\n            raise exceptions.ValidationError(detail=err_msg, code=400)\n        return event    \n    \n    class Meta:\n        model = Hook\n        fields = \"__all__\"\n        read_only_fields = (\"user\",)\n\n### views.py ###\n\nfrom rest_framework import viewsets\n\nfrom django_rest_webhooks.models import Hook\n\nfrom .serializers import HookSerializer\n\n\nclass HookViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    Retrieve, create, update or destroy webhooks.\n    \"\"\"\n    queryset = Hook.objects.all()\n    model = Hook\n    serializer_class = HookSerializer\n\n    def perform_create(self, serializer):\n        serializer.save(user=self.request.user)\n\n### urls.py ###\n\nfrom rest_framework import routers\n\nfrom . import views\n\nrouter = routers.SimpleRouter(trailing_slash=False)\nrouter.register(r\"webhooks\", views.HookViewSet, \"webhook\")\n\nurlpatterns = router.urls\n```\n\n### Some gotchas:\n\nInstead of doing blocking HTTP requests inside of signals, we've opted\nfor a simple Threading pool that should handle the majority of use cases.\n\nHowever, if you use Celery, we'd *really* recommend using a simple task\nto handle this instead of threads. A quick example:\n\n```python\n### config.py ###\n\nHOOK_DELIVERER = \"path.to.tasks.deliver_hook_wrapper\"\n\n\n### tasks.py ###\n\nfrom celery import Task\n\nimport json\nimport requests\n\n\nclass DeliverHook(Task):\n    max_retries = 5\n\n    def run(self, target, payload, instance_id=None, hook_id=None, **kwargs):\n        \"\"\"\n        target:     the url to receive the payload.\n        payload:    a python primitive data structure\n        instance_id:   a possibly None \"trigger\" instance ID\n        hook_id:       the ID of defining Hook object\n        \"\"\"\n        try:\n            response = requests.post(\n                url=target,\n                data=json.dumps(payload),\n                headers={\"Content-Type\": \"application/json\"}\n            )\n            if response.status_code >= 500:\n                response.raise_for_status()\n        except requests.ConnectionError:\n            delay_in_seconds = 2 ** self.request.retries\n            self.retry(countdown=delay_in_seconds)\n\n\ndef deliver_hook_wrapper(target, payload, instance, hook):\n    # instance is None if using custom event, not built-in\n    if instance is not None:\n        instance_id = instance.id\n    else:\n        instance_id = None\n    # pass ID's not objects because using pickle for objects is a bad thing\n    kwargs = dict(target=target, payload=payload,\n                  instance_id=instance_id, hook_id=hook.id)\n    DeliverHook.apply_async(kwargs=kwargs)\n\n```\n\nWe also don't handle retries or cleanup. Generally, if you get a `410` or\na bunch of `4xx` or `5xx`, you should delete the Hook and let the user know.\n\n### Extend the Hook model:\n\nThe default `Hook` model fields can be extended using the `AbstractHook` model.\nFor example, to add a `is_active` field on your hooks:\n\n```python\n### config.py ###\n\nHOOK_CUSTOM_MODEL = \"path.to.models.CustomHook\"\n\n### models.py ###\n\nfrom django.db import models\nfrom django_rest_webhooks.models import AbstractHook\n\nclass CustomHook(AbstractHook):\n    is_active = models.BooleanField(default=True)\n```\n\nThe extended `CustomHook` model can be combined with a the `HOOK_FINDER` setting\nfor advanced QuerySet filtering. \n\n```python\n### config.py ###\n\nHOOK_FINDER = \"path.to.find_and_fire_hook\"\n\n### utils.py ###\n\nfrom .models import CustomHook\n\ndef find_and_fire_hook(event_name, instance, **kwargs):\n    filters = {\n        \"event\": event_name,\n        \"is_active\": True,\n    }\n\n    hooks = CustomHook.objects.filter(**filters)\n    for hook in hooks:\n        hook.deliver_hook(instance)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/leanrank/django-web-hooks",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-webhooks",
    "package_url": "https://pypi.org/project/django-rest-webhooks/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-webhooks/",
    "project_urls": {
      "Homepage": "https://github.com/leanrank/django-web-hooks"
    },
    "release_url": "https://pypi.org/project/django-rest-webhooks/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A powerful mechanism for sending real time API notifications via a new subscription model.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9454717,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c74e325e27c4b29de370c04aae84a6350d4a234a85fe0210621c31135c6c8636",
          "md5": "f127ddd847ac86ecae6ae594e5ea50ed",
          "sha256": "abc71b360ecf8a17eedad80514e350e15c214285fcb4558602e72b93d9189d49"
        },
        "downloads": -1,
        "filename": "django-rest-webhooks-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f127ddd847ac86ecae6ae594e5ea50ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21642,
        "upload_time": "2021-02-11T16:29:25",
        "upload_time_iso_8601": "2021-02-11T16:29:25.313931Z",
        "url": "https://files.pythonhosted.org/packages/c7/4e/325e27c4b29de370c04aae84a6350d4a234a85fe0210621c31135c6c8636/django-rest-webhooks-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5de40631585335100821af87b39eaba703e6f3051d844ab4c9eb3075fafcea7",
          "md5": "59d50fad798ccd62a5643d229f1965a6",
          "sha256": "8fd0c850327fa0c1ab250b95d9673132e07604154c55f66f1de9a5f600d9fbdd"
        },
        "downloads": -1,
        "filename": "django-rest-webhooks-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "59d50fad798ccd62a5643d229f1965a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21725,
        "upload_time": "2021-02-18T12:40:07",
        "upload_time_iso_8601": "2021-02-18T12:40:07.802820Z",
        "url": "https://files.pythonhosted.org/packages/d5/de/40631585335100821af87b39eaba703e6f3051d844ab4c9eb3075fafcea7/django-rest-webhooks-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5de40631585335100821af87b39eaba703e6f3051d844ab4c9eb3075fafcea7",
        "md5": "59d50fad798ccd62a5643d229f1965a6",
        "sha256": "8fd0c850327fa0c1ab250b95d9673132e07604154c55f66f1de9a5f600d9fbdd"
      },
      "downloads": -1,
      "filename": "django-rest-webhooks-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "59d50fad798ccd62a5643d229f1965a6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21725,
      "upload_time": "2021-02-18T12:40:07",
      "upload_time_iso_8601": "2021-02-18T12:40:07.802820Z",
      "url": "https://files.pythonhosted.org/packages/d5/de/40631585335100821af87b39eaba703e6f3051d844ab4c9eb3075fafcea7/django-rest-webhooks-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}