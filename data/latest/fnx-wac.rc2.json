{
  "info": {
    "author": "Finix",
    "author_email": "dev@finixpayments.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "===\nwac\n===\n\nTo write a friendly client for a RESTful API you typically end up doing the\nfollowing:\n\n- Write HTTP client commands for communicating with the server. These commands\n  do things like marshal payloads, convert errors, invoke request hooks, etc.\n\n- Turn responses deserialized by your client into resource objects (i.e.\n  objectify the response).\n\n- Build up queries (e.g. filter, sort) to access resources matching some\n  criteria in perhaps a particular order.\n\nIn the ideal case the client gives your users something approximating an ORM\nfor your resources. This library is intended to assist you in writing such a\nclient provided the API you are consuming complies with some basic\nconventions:\n\n- Uses HTTP properly.\n\n- Annotates resource representations with type and URI information.\n\nInstallation\n------------\n\nSimply::\n\n    $ pip install finix-wac\n\nor if you prefer::\n\n    $ easy_install finix-wac\n\nRequirements\n------------\n\n- `Python <http://python.org/>`_ >= 2.6, < 3.0\n- `Requests <https://github.com/kennethreitz/requests/>`_ >= 1.2.3\n\nUsage\n-----\n\nLets work through an example. The code for this example is in ``example.py``.\n\n- First you import wac:\n\n.. code-block:: python\n\n    import wac\n\n- Next define the version of your client:\n\n.. code-block:: python\n\n    __version__ = '1.0'\n\n- Also define the configuration which all ``Client``\\s will use by default:\n\n.. code-block:: python\n\n    default_config = wac.Config(None)\n\n- Now be nice and define a function for updating the configuration(s):\n\n.. code-block:: python\n\n    def configure(root_url, **kwargs):\n        default = kwargs.pop('default', True)\n        kwargs['client_agent'] = 'example-client/' + __version__\n        if 'headers' not in kwargs:\n            kwargs['headers'] = {}\n        kwargs['headers']['Accept-Type'] = 'application/json'\n        if default:\n            default_config.reset(root_url, **kwargs)\n        else:\n            Client.config = wac.Config(root_url, **kwargs\n\n- Now the big one, define your ``Client`` which is what will be used to talk to\n  a server:\n\n.. code-block:: python\n\n    class Client(wac.Client):\n\n        config = default_config\n\n        def _serialize(self, data):\n            data = json.dumps(data, default=self._default_serialize)\n            return 'application/json', data\n\n        def _deserialize(self, response):\n            if response.headers['Content-Type'] != 'application/json':\n                raise Exception(\n                    \"Unsupported content-type '{}'\"\n                    .format(response.headers['Content-Type'])\n                )\n            data = json.loads(response.content)\n            return data\n\n- Then define your base ``Resource``:\n\n.. code-block:: python\n\n    class Resource(wac.Resource):\n\n        client = Client()\n        registry = wac.ResourceRegistry()\n\n- And finally your actual resources:\n\n.. code-block:: python\n\n    class Playlist(Resource):\n\n        type = 'playlist'\n\n        uri_gen = wac.URIGen('/v1/playlists', '{playlist}')\n\n\n    class Song(Resource):\n\n        type = 'song'\n\n        uri_gen = wac.URIGen('/v1/songs', '{song}')\n\n\n- Done! Now you can do crazy stuff like this:\n\n.. code-block:: python\n\n    import example\n\n    example.configure('https://api.example.com', auth=('user', 'passwd'))\n\n    q = (example.Playlist.query()\n        .filter(Playlist.f.tags.contains('nuti'))\n        .filter(~Playlist.f.tags.contains('sober'))\n        .sort(Playlist.f.created_at.desc()))\n    for playlist in q:\n        song = playlist.songs.create(\n            name='Flutes',\n            length=1234,\n            tags=['nuti', 'fluti'])\n        song.length += 101\n        song.save()\n\nContributing\n------------\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Write your code **and tests**\n4. Ensure all tests still pass (`python setup.py test`)\n5. Commit your changes (`git commit -am 'Add some feature'`)\n6. Push to the branch (`git push origin my-new-feature`)\n7. Create new pull request\n\n\n.. :changelog:\n\nHistory\n-------\n\n0.29 (2016-11)\n++++++++++++++++++\n\n* Update package name\n\n\n0.28 (2016-10)\n++++++++++++++++++\n\n* Fix total property not found in page resource\n* Require requests >= 1.2.3.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/finix-payments/fnx-wac/archive/0.4.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/finix-payments/fnx-wac",
    "keywords": "",
    "license": "Copyright (c) 2014 Balanced.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fnx-wac",
    "package_url": "https://pypi.org/project/fnx-wac/",
    "platform": "",
    "project_url": "https://pypi.org/project/fnx-wac/",
    "project_urls": {
      "Download": "https://github.com/finix-payments/fnx-wac/archive/0.4.tar.gz",
      "Homepage": "https://github.com/finix-payments/fnx-wac"
    },
    "release_url": "https://pypi.org/project/fnx-wac/0.33/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Writing RESTful API clients.",
    "version": "0.33",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3034395,
  "releases": {
    "0.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5633416261cad42e69236b07cc12440ea07505f0871d21fca7c553df2c7804b8",
          "md5": "ccdc5f38246d4ee9829aaa837332193f",
          "sha256": "d7213b3bcf3fa750292e129fbcc511911a3568e302f278f98e1e557f98c804ec"
        },
        "downloads": -1,
        "filename": "fnx-wac-0.31.tar.gz",
        "has_sig": false,
        "md5_digest": "ccdc5f38246d4ee9829aaa837332193f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14274,
        "upload_time": "2017-07-12T01:50:43",
        "upload_time_iso_8601": "2017-07-12T01:50:43.902555Z",
        "url": "https://files.pythonhosted.org/packages/56/33/416261cad42e69236b07cc12440ea07505f0871d21fca7c553df2c7804b8/fnx-wac-0.31.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "836f825a1c79e4c812051c564e53dd79f753927c8ebef572d653848721af8312",
          "md5": "1155d94cea40385efe255011f2a2c09c",
          "sha256": "58822971d9bb32992bfc2ef61068ded3bb6f29ecdb53f221b99d3a40d10be38c"
        },
        "downloads": -1,
        "filename": "fnx-wac-0.33.tar.gz",
        "has_sig": false,
        "md5_digest": "1155d94cea40385efe255011f2a2c09c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14411,
        "upload_time": "2017-07-19T15:28:34",
        "upload_time_iso_8601": "2017-07-19T15:28:34.233498Z",
        "url": "https://files.pythonhosted.org/packages/83/6f/825a1c79e4c812051c564e53dd79f753927c8ebef572d653848721af8312/fnx-wac-0.33.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "836f825a1c79e4c812051c564e53dd79f753927c8ebef572d653848721af8312",
        "md5": "1155d94cea40385efe255011f2a2c09c",
        "sha256": "58822971d9bb32992bfc2ef61068ded3bb6f29ecdb53f221b99d3a40d10be38c"
      },
      "downloads": -1,
      "filename": "fnx-wac-0.33.tar.gz",
      "has_sig": false,
      "md5_digest": "1155d94cea40385efe255011f2a2c09c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14411,
      "upload_time": "2017-07-19T15:28:34",
      "upload_time_iso_8601": "2017-07-19T15:28:34.233498Z",
      "url": "https://files.pythonhosted.org/packages/83/6f/825a1c79e4c812051c564e53dd79f753927c8ebef572d653848721af8312/fnx-wac-0.33.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}