{
  "info": {
    "author": "Ayush Pareek",
    "author_email": "ayush.original@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Communications :: Chat",
      "Topic :: Database :: Front-Ends",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Slack backup\n============\n\n.. image:: https://travis-ci.org/gryf/slack-backup.svg?branch=master\n    :target: https://travis-ci.org/gryf/slack-backup\n\n.. image:: https://img.shields.io/pypi/v/slack-backup.svg\n    :target: https://pypi.python.org/pypi/slack-backup\n\nThe project aim is to collect conversations from Slack using its API and\noptionally user account information, and provides convenient way to represent\nas a log.\n\nRequirements\n------------\n\nThis project is written in Python 3, 3.4 to be precise, although it may work on\nearlier version of Python3. Sorry no support for Python2.\n\nOther than that, required packages are as follows:\n\n- slackclient 1.0.2\n- SQLAlchemy 1.0.10\n\nInstallation\n------------\n\nYou can install it using ``pip install slack-backup`` command. Recommended way\nis to create virtualenv, like so:\n\n.. code:: shell-session\n\n   user@localhost $ virtualenv -p python3 myenv\n   Running virtualenv with interpreter /usr/bin/python3\n   Using base prefix '/usr'\n   New python executable in foobar/bin/python3\n   Also creating executable in foobar/bin/python\n   Installing setuptools, pip, wheel...done.\n   user@localhost $ . myenv/bin/activate\n   (myenv)user@localhost $ pip install slack-backup\n\nYou can also get this repository and install from it, like:\n\n.. code:: shell-session\n\n   user@localhost ~ $ virtualenv -p python3 myenv\n   Running virtualenv with interpreter /usr/bin/python3\n   Using base prefix '/usr'\n   New python executable in foobar/bin/python3\n   Also creating executable in foobar/bin/python\n   Installing setuptools, pip, wheel...done.\n   user@localhost $ . myenv/bin/activate\n   (myenv)user@localhost ~ $ cd myenv\n   (myenv)user@localhost ~/myenv $ git clone https://github.com/gryf/slack-backup\n   (myenv)user@localhost ~/myenv $ cd slack-backup\n   (myenv)user@localhost ~/myenv/slack-backup $ pip install .\n\nUsage\n-----\n\nThere is a commandline tool called `slack-backup`, which typical use would get\nto gather the data and generate logs. Using example from above, here is a\ntypical session:\n\n.. code:: shell-session\n\n   (myenv)user@localhost ~/myenv/slack-backup $ mkdir ~/mylogs && cd ~/mylogs\n   (myenv)user@localhost ~/mylogs $ slack-backup fetch \\\n   --token xxxx-1111111111-222222222222-333333333333-r4nd0ms7uff \\\n   --user some@email.address.org --password secret --team myteam \\\n   -qq -d mydatabase.sqlite\n\nwhere:\n\n* ``--token`` is generated on `Slack side token`_ for interaction with the API.\n  It's required.\n* ``--user`` is your slack account username…\n* ``--password`` …and password. Those two are needed if you care about files\n  posted on the channels, which are hosted on Slack servers. They can be\n  skipped, if you don't care about such files. Avatars still be downloaded\n  though. External resources will not be downloaded - they have URL anyway.\n* ``--team`` team name. It is the part of the URL for your slack team; in other\n  words in URL like `http://foobar.slack.com` *foobar* is the team name.\n* ``-q`` (or ``--quiet``) will suppress any messages from program. In contrary\n  there can be used ``--verbose`` to increase verbosity. Using this option\n  several times (up to three, above the number will have no effect) will amplify\n  effectiveness of either be quite or be verbose behaviour.\n* ``-d`` or ``--database`` is the file path for database (which for now at least\n  is an sqlite database file). It can be omitted - in-memory db would be\n  created, but you'll (obviously) lost all the records. Besides the db file,\n  assets directory might be created for downloadable items.\n\nDuring DB creation, all available messages are stored in the database. On the\nnext run, ``fetch`` would only take those records, which are older from\ncurrently oldest in DB. So that it will only fetch a subset of the overall of\nthe messages. As for the channels and users - complete information will be\ndownloaded every time ``fetch`` command would be used.\n\nNext, to generate a log files:\n\n.. code:: shell-session\n\n   (myenv)user@localhost ~/mylogs $ slack-backup generate \\\n   -v -d mydatabase.sqlite --format text -o logs\n\nwhere:\n\n* ``--format`` is the desired format of the logs. For now only ``text`` format\n  of the logs is supported (IRC style format). Format ``none`` will produce\n  nothing.\n* ``-o`` or ``--output`` is the destination directory, where logs and possible\n  assets will land.\n\nThe rest of the options (``-d`` and ``-v``) have same meaning as in ``fetch``\ncommand.\n\nSee help for the ``slack-backup`` command for complete list of options.\n\nConfiguration\n-------------\n\nFor convenience, you can place all of needed options into configuration file\n(aka .ini), which all options (with their defaults) will look like:\n\n.. code:: ini\n\n   [common]\n   channels =\n   database =\n   quiet = 0\n   verbose = 0\n\n   [generate]\n   output =\n   format = text\n   theme = plain\n\n   [fetch]\n   user =\n   password =\n   team =\n   token =\n\nNote, that you don't have to put every option. To illustrate ``fetch`` example\nfrom above, here is a corresponding config file:\n\n.. code:: ini\n\n   [common]\n   database = mydatabase.sqlite\n   quiet = 2\n\n   [fetch]\n   user = some@email.address.org\n   password = secret\n   team = myteam\n   token = xxxx-1111111111-222222222222-333333333333-r4nd0ms7uff\n\nNote, that only ``[common]`` and ``[fetch]`` sections are provided, so it is\nenough to invoke ``slack-backup`` command as:\n\n.. code:: shell-session\n\n   (myenv)user@localhost ~/mylogs $ slack-backup fetch\n\nThere are couple of places, where configuration file would be searched for, in\nparticular order:\n\n* file provided via argument ``-i`` or ``--config``\n* ``slack-backup.ini`` in current directory\n* ``$XDG_CONFIG_HOME/slack-backup.ini``, where ``$XDG_CONFIG_HOME`` usually\n  defaults to ``$HOME/.config``\n\nDetails\n-------\n\nDuring first run, database with provided name is generated. For ease of use\nsqlite database is used, although it is easy to switch the engine, since there\nis an ORM (SQLAlchemy) used.\n\nSlack users, channels and messages are mapped to SQLAlchemy models, as well as\nother information, like:\n\n- user profiles\n- channel topic\n- channel purpose\n- message reactions\n- message attachments\n- and files\n\nChannels and users are always synchronized in every run, so every modification\nto the user or channels are overwriting old data. During first run, all messages\nare retrieved for all/selected channels. Every other run will only fetch those\nmessages, which are older then newest message in the database - so that we don't\nloose any old messages, which might be automatically removed from Slack servers.\nThe drawback of this behaviour is that all past messages which was altered in\nthe meantime will not be updated.\n\nLicense\n-------\n\nThis work is licensed on 3-clause BSD license. See LICENSE file for details.\n\n.. _Slack side token: https://api.slack.com/docs/oauth-test-tokens",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/ayushoriginal/slackpile",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ayushoriginal/slackpile",
    "keywords": "log,store,conversations,slack",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "slackpile",
    "package_url": "https://pypi.org/project/slackpile/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/slackpile/",
    "project_urls": {
      "Download": "https://github.com/ayushoriginal/slackpile",
      "Homepage": "https://github.com/ayushoriginal/slackpile"
    },
    "release_url": "https://pypi.org/project/slackpile/0.4.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Store Slack Conversations in Local DB",
    "version": "0.4.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2503498,
  "releases": {
    "0.4.4": []
  },
  "urls": [],
  "vulnerabilities": []
}