{
  "info": {
    "author": "David Griffin",
    "author_email": "dgdguk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# drs\n\nThe Dirichlet-Rescale (DRS) algorithm is a method for generating\nvectors of random numbers such that:\n\n1. The values of the vector sum to a given total U\n2. Given a vector of upper bounds, each element of the returned vector is less than or equal to its corresponding upper bound\n3. Given a vector of lower bounds, each element of the returned vector is greater or equal to than its corresponding lower bound\n4. The distribution of the vectors in the space defined by the constraints is uniform.\n\nDRS accomplishes this by drawing an initial point from the flat Dirichlet\nDistribution and performing rescaling operations until the point\nlies within the accepted region. The way in which the rescaling\noperations are performed preseves the uniformity of the distribution;\nthe remainder of the algorithm is all about efficiently performing\nthese operations and minimising the effects of the rescale operations\n(floating point error, running out of the finite amount of entropy\nencoded in the initial point).\n\nDRS can be thought of as a generalised version of the UUnifast and\nRandFixedSum algorithms, and can be used as a replacement for both.\nNote that while RandFixedSum only supports symmetrical bounds (the\nsame for each component of the vector), it may be faster than\nDRS when generating a large number of vectors with the same\nsymmetric constraints.\n\nThe algorithm is described in more detail in the paper\n\"Generating Utilization Vectors for the Systematic Evaluation of\nSchedulability Tests\", published at RTSS 2020. The authors version\ncan be found here: http://eprints.whiterose.ac.uk/167646/\n\nIf you wish to cite this work, please use the following references:\n\n```bibtex\n@inproceedings{GriffinRTSS2020,\n  author = {David Griffin and Iain Bate and Robert I. Davis},\n  title = {Generating Utilization Vectors for the Systematic Evaluation of Schedulability Tests},\n  booktitle = {{IEEE} Real-Time Systems Symposium, {RTSS} 2020, Houston, Texas, USA},\n  December 1-4, 2020},\n  publisher = {{IEEE}},\n  year = {2020},\n  url = {https://www-users.cs.york.ac.uk/~robdavis/papers/DRSRTSS2020.pdf}\n}\n\n@software{david_griffin_2020_4118059,\n  author = {David Griffin and Iain Bate and Robert I. Davis},\n  title = {dgdguk/drs},\n  publisher = {Zenodo},\n  version = {latest}\n  doi = {10.5281/zenodo.4118058},\n  url = {https://doi.org/10.5281/zenodo.4118058}\n}\n```\n\nIf citing the software itself, please cite the correct version (the DOI\nof the above reference always resolves to the most recent version; the DOIs\nof specific versions can be found there).\n\nDRS is licensed under the MIT license.\n\n# Usage\n\nFor general use, there is only one function to consider\n\n```python\ndef drs(\n  n: int, \n  sumu: float, \n  upper_bounds: Optional[Sequence[Union[int, float]]]=None,\n  lower_bounds: Optional[Sequence[Union[int, float]]]=None\n) -> Sequence[float]: ...\n```\n\nThe parameters are as follows\n\n* `n`: The number of elements to generate\n* `sumu`: The target sum for the generated elements\n* `upper_bounds`: An optional sequence of length `n` which gives the upper bounds on each returned value. If given, then `all(x <= y for x, y in zip(output, upper_bounds))`. If not provided, all upper bounds are set to `sumu`.\n* `lower_bounds`: An optional sequence of length `n` which gives the lower bounds on each returned value. If given, then `all(x >= y for x, y in zip(output, lower_bounds))` If not provided, all lower bounds are set to `0`.\n\nInvalid inputs are checked for and will result in a `ValueError` (e.g. if `sumu > sum(upper_bounds)`, or `upper_bounds[n] < lower_bounds[n]`).\n\n# Examples\n\n```python\nfrom drs import drs\nresult = drs(2, 2)\n```\n\nWill produce vectors of length two such that `sum(result) == 2`\n\n```python\nfrom drs import drs\nresult = drs(2, 3, [1.5, 3])\n```\n\nWill produce vectors of length two such that `result[0] <= 1.5`, `result[1] <= 3`, and `sum(result) == 3`.\n\n```python\nfrom drs import drs\nresult = drs(2, 4, [2, 3], [1, 2])\n```\n\nWill produce vectors of length two such that `1 <= result[0] <= 2`, `2 <= result[1] <= 3`, and `sum(result) == 4`.\n\n# Other functions\n\nDue to the amount of entropy in a floating point being finite, and DRS's nature as a *rescaling* algorithm, it is possible for DRS to exhaust it's source of entropy. This behaviour is controlled by the *epsilon* parameter, which defaults to `10**-4`. DRS only guarantees that the values returned sum to within `sumu*epsilon` of the target, and that only the part of the result greater than `sumu*epsilon` is uniformly distributed. If more precision is required, the `set_epsilon(epsilon: float)` function can be used to adjust the epsilon parameter.\n\n# Limits\n\nThe maximum size of output vector DRS can produce is theoretically capped at 1015 for versions of Python that use 64-bit floats. In practice it's expected that this will be too computationally expensive for practical use. DRS has been tested to produce output vectors of up to size 200, however above 140 it may be necessary to use the optional mpmath support. Consult drs.py for more information.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dgdguk/drs",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drs",
    "package_url": "https://pypi.org/project/drs/",
    "platform": "",
    "project_url": "https://pypi.org/project/drs/",
    "project_urls": {
      "Homepage": "https://github.com/dgdguk/drs"
    },
    "release_url": "https://pypi.org/project/drs/2.0.0/",
    "requires_dist": [
      "numpy",
      "scipy"
    ],
    "requires_python": "",
    "summary": "Dirichlet Rescale Algorithm",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8615382,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02b8c030b833bf56b200352a9f2525917d988d88369d42a1cef15e8232e12de4",
          "md5": "1af34544d9e1c3d41bd4e934d6d23772",
          "sha256": "35bcc40fbe59e4aacf8871270045eef4ab991f67af64350d8948b2d13999a35a"
        },
        "downloads": -1,
        "filename": "drs-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1af34544d9e1c3d41bd4e934d6d23772",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8864,
        "upload_time": "2020-10-08T15:50:48",
        "upload_time_iso_8601": "2020-10-08T15:50:48.239222Z",
        "url": "https://files.pythonhosted.org/packages/02/b8/c030b833bf56b200352a9f2525917d988d88369d42a1cef15e8232e12de4/drs-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "794924ff08a445fd1064ee301bb8591aa3e9decad7d847b2ccc601c130aef8a9",
          "md5": "1ff77cf1824fda571085c9ddcd85f01d",
          "sha256": "71d894db0954869c5634672571d824057cc0dd5b73d5a8a83192e5076e35bcfb"
        },
        "downloads": -1,
        "filename": "drs-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ff77cf1824fda571085c9ddcd85f01d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8114,
        "upload_time": "2020-10-08T15:50:52",
        "upload_time_iso_8601": "2020-10-08T15:50:52.153794Z",
        "url": "https://files.pythonhosted.org/packages/79/49/24ff08a445fd1064ee301bb8591aa3e9decad7d847b2ccc601c130aef8a9/drs-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0f82052c9f426e9e2d9389443a98410a3dd5be35f90feb97d99ad8770704eff",
          "md5": "f1adffc9387b941c69646ce2437a03ab",
          "sha256": "a07a8b75e12dbde62b8113fac5479503d1ca608c9ecde40b09e549d4828833fe"
        },
        "downloads": -1,
        "filename": "drs-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1adffc9387b941c69646ce2437a03ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10090,
        "upload_time": "2020-11-09T16:33:06",
        "upload_time_iso_8601": "2020-11-09T16:33:06.250775Z",
        "url": "https://files.pythonhosted.org/packages/e0/f8/2052c9f426e9e2d9389443a98410a3dd5be35f90feb97d99ad8770704eff/drs-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e90e8630255b555965ff827711f83449fef978d25259b15772b96c3f3e0a8e6b",
          "md5": "f31c9b15e92d2b00deb866f35ca8559a",
          "sha256": "69342d6d36eaadc8710dd1e9a2fabe90ac30d4f529391417ea448586ee29d222"
        },
        "downloads": -1,
        "filename": "drs-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f31c9b15e92d2b00deb866f35ca8559a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10245,
        "upload_time": "2020-11-09T16:33:08",
        "upload_time_iso_8601": "2020-11-09T16:33:08.466777Z",
        "url": "https://files.pythonhosted.org/packages/e9/0e/8630255b555965ff827711f83449fef978d25259b15772b96c3f3e0a8e6b/drs-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0f82052c9f426e9e2d9389443a98410a3dd5be35f90feb97d99ad8770704eff",
        "md5": "f1adffc9387b941c69646ce2437a03ab",
        "sha256": "a07a8b75e12dbde62b8113fac5479503d1ca608c9ecde40b09e549d4828833fe"
      },
      "downloads": -1,
      "filename": "drs-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1adffc9387b941c69646ce2437a03ab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10090,
      "upload_time": "2020-11-09T16:33:06",
      "upload_time_iso_8601": "2020-11-09T16:33:06.250775Z",
      "url": "https://files.pythonhosted.org/packages/e0/f8/2052c9f426e9e2d9389443a98410a3dd5be35f90feb97d99ad8770704eff/drs-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e90e8630255b555965ff827711f83449fef978d25259b15772b96c3f3e0a8e6b",
        "md5": "f31c9b15e92d2b00deb866f35ca8559a",
        "sha256": "69342d6d36eaadc8710dd1e9a2fabe90ac30d4f529391417ea448586ee29d222"
      },
      "downloads": -1,
      "filename": "drs-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f31c9b15e92d2b00deb866f35ca8559a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10245,
      "upload_time": "2020-11-09T16:33:08",
      "upload_time_iso_8601": "2020-11-09T16:33:08.466777Z",
      "url": "https://files.pythonhosted.org/packages/e9/0e/8630255b555965ff827711f83449fef978d25259b15772b96c3f3e0a8e6b/drs-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}