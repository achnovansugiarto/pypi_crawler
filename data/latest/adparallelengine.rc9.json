{
  "info": {
    "author": "Advestis",
    "author_email": "pythondev@advestis.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![doc](https://img.shields.io/badge/-Documentation-blue)](https://advestis.github.io/adparallelengine)\n[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n#### Status\n[![pytests](https://github.com/Advestis/adparallelengine/actions/workflows/pull-request.yml/badge.svg)](https://github.com/Advestis/adparallelengine/actions/workflows/pull-request.yml)\n[![push-pypi](https://github.com/Advestis/adparallelengine/actions/workflows/push-pypi.yml/badge.svg)](https://github.com/Advestis/adparallelengine/actions/workflows/push-pypi.yml)\n[![push-doc](https://github.com/Advestis/adparallelengine/actions/workflows/push-doc.yml/badge.svg)](https://github.com/Advestis/adparallelengine/actions/workflows/push-doc.yml)\n\n![maintained](https://img.shields.io/badge/Maintained%3F-yes-green.svg)\n[![issues](https://img.shields.io/github/issues/Advestis/adparallelengine.svg)](https://github.com/Advestis/adparallelengine/issues)\n[![pr](https://img.shields.io/github/issues-pr/Advestis/adparallelengine.svg)](https://github.com/Advestis/adparallelengine/pulls)\n\n\n#### Compatibilities\n![ubuntu](https://img.shields.io/badge/Ubuntu-supported--tested-success)\n![unix](https://img.shields.io/badge/Other%20Unix-supported--untested-yellow)\n\n![python](https://img.shields.io/pypi/pyversions/adparallelengine)\n\n\n##### Contact\n[![linkedin](https://img.shields.io/badge/LinkedIn-Advestis-blue)](https://www.linkedin.com/company/advestis/)\n[![website](https://img.shields.io/badge/website-Advestis.com-blue)](https://www.advestis.com/)\n[![mail](https://img.shields.io/badge/mail-maintainers-blue)](mailto:pythondev@advestis.com)\n\n# adparallelengine\n\nA wrapper around several ways of doing map multiprocessing in Python. One can use :\n* Dask\n* concurrent.futures\n* mpi4py.futures\nThe underlying engine is also available in a serial mode, for debugging purposes \n\n## Installation\n\n```\npip install adparallelengine[all,mpi,dask,support_shared,k8s]\n```\n\n## Usage\n\n### Basic use\n\nCreating the engine is done this way:\n\n```python\nfrom adparallelengine import Engine\nfrom transparentpath import Path\n\nif __name__ == \"__main__\":\n    which = \"multiproc\"  # Can also be \"serial\", \"dask\", \"mpi\" or \"k8s\"\n    engine = Engine(kind=which, path_shared=Path(\"tests\") / \"data\" / \"shared\")\n```\n\nThen using the engine is done this way:\n```python\nfrom adparallelengine import Engine\nimport pandas as pd\nfrom transparentpath import Path\n\ndef method(df):\n    return 2 * df, 3 * df\n\nif __name__ == \"__main__\":\n    which = \"multiproc\"  # Can also be \"serial\", \"dask\", \"mpi\" or \"k8s\"\n    engine = Engine(\n        kind=which,\n        # max_workers=10  One can limit the number of workers. By default, os.cpu_count() or MPI.COMM_WORLD.size is used\n    )\n    results = engine(\n        method,  # The method to use...\n        [pd.DataFrame([[1, 2]]), pd.DataFrame([[3, 4]]), pd.DataFrame([[5, 6]])]  # ...on each element of this iterable \n    )\n```\n\nNote that AdParallelEngine **supports generators** if the *length* argument is given : \n\n```python\nfrom adparallelengine import Engine\n\ndef dummy_prod(xx):\n    return 2 * xx\n\ndef fib(limit):\n    \"\"\"Fibonacci generator\"\"\"\n    a, b = 0, 1\n    while a < limit:\n        yield a\n        a, b = b, a + b\n\nx = fib(25)  # will have 9 elements: 0, 1, 1, 2, 3, 5, 8, 13, 21\n\nif __name__ == \"__main__\":\n    which = \"multiproc\"  # Can also be \"serial\", \"dask\", \"mpi\" or \"k8s\"\n    engine = Engine(\n        kind=which,\n        # max_workers=10  One can limit the number of workers. By default, os.cpu_count() or MPI.COMM_WORLD.size is used\n    )\n    results = engine(\n        dummy_prod,\n        x,\n        length=9,\n        batch=4\n    )\n```\n\nAt no moment the engine will cast it to list, instead a custom iterator class is created to properly batch the generator\nand loop through it only once, when the computation actually happens.\n\n### Gathering\n\nResults will be a list of tuples, each containing two dataframes, because `method` returns a tuple of two dataframes.\nOne could have used the keyword \"gather\" to flatten this list inside the engine :\n\n```python\n    results = engine(method, [pd.DataFrame([[1, 2]]), pd.DataFrame([[3, 4]]), pd.DataFrame([[5, 6]])], gather=True)\n```\n\n### Batching\n\nBy default, one process will execute `method` on a single element of the iterable. This can result in significant\noverhead if your iterable is much bigger than the number of workers, in which case the keyword \"batched\" can be used :\n\n```python\n    results = engine(method, [pd.DataFrame([[1, 2]]), pd.DataFrame([[3, 4]]), pd.DataFrame([[5, 6]])], batched=True)\n```\n\nIn that case, sublists of elements are given to each process so that there are exactly the same number of processes than\nnumbers (unless the iterable is too small of course).\n\nDoing this can also have its own problem, namely a load unbalance of some process finish much quicker than others. One\ncan optionally use more batches than the number of workers by giving an integer instead of a boolean to the \"batched\"\nkeyword :\n\n```python\n    # Using 16 batches\n    results = engine(method, [pd.DataFrame([[1, 2]]), pd.DataFrame([[3, 4]]), pd.DataFrame([[5, 6]])], batched=16)\n```\n\n### other keyword arguments\n\nThe `method` can accept other keyword arguments, for example\n\n```python\ndef method(df, s):\n    return 2 * df * s, 3 * df * s\n```\n\nThose can be given when calling the engine and will be passed to each process. For example :\n```python\nfrom adparallelengine import Engine\nimport pandas as pd\nfrom transparentpath import Path\n\ndef method(df, s):\n    return 2 * df * s, 3 * df * s\n\nif __name__ == \"__main__\":\n    which = \"multiproc\"  # Can also be \"serial\", \"dask\", \"mpi\" or \"k8s\"\n    engine = Engine(kind=which, path_shared=Path(\"tests\") / \"data\" / \"shared\")\n    some_series = pd.Series([10, 20])\n    results = engine(method, [pd.DataFrame([[1, 2]]), pd.DataFrame([[3, 4]]), pd.DataFrame([[5, 6]])], s=some_series)\n```\n\n#### Large objects given to keyword arguments\n\nIf `method` is given large objects as keyword arguments, passing the object to workers could imply a significant loss\nof time. I observed that doing out-of-core learning can sometime be quicker, despite the I/O that it implies. It \ncan even save a bit of memory. You can use it by using the \"share\" keyword argument :\n\n```python\n    results = engine(method, [pd.DataFrame([[1, 2]]), pd.DataFrame([[3, 4]]), pd.DataFrame([[5, 6]])], share={\"s\": some_series})\n```\n\nHere, \"some_series\" will be written to disk by the engine, and only a path will be given to each process, which will then\nread it when starting. For now, only pandas dataframes and series, and numpy arrays, are supported for sharing. The directory\nwhere the shared objects are written is by default the local temp dir, by one can specify some other location by giving\nthe \"path_shared\" keyword argument when creating the engine (NOT when calling it!).\n\n### Method to run in each processes\n\nWhen using multiprocessing with numpy, one has to use the \"spawn\" multiprocessing context to avoid the GIL. By doing so\nhowever, any environment variable or class attributes defined in the main process is forgotten in the child processes,\nsince the code is imported from scratch. So, one might need to re-load some variables and re-set some class attributes\ninside each process. This can be done in an additional method that can be given to engine. The complete example below\nshows how it is done.\n\n### Complete example\n\nThe code below shows an example of how to use the engine. Here `method` accepts two other arguments, one that can be a\npandas' dataframe or series, and one that is expected to be a float. It returns a tuple of two dataframes.\n\nIf the parallelization is done using Python's native multiprocessing, do not forget to use `if __name__ == \"__main__\"`\nlike in the example !\n\n```python\nimport sys\nfrom typing import Union\nimport pandas as pd\nimport numpy as np\nfrom transparentpath import Path\n\nfrom adparallelengine import Engine\n\n\nclass Dummy:\n    some_attr = 0\n\n\ndef method_in_processes(a):\n    Dummy.some_attr = a\n\n\ndef method(\n    element: pd.DataFrame,\n    some_other_stuff: Union[float, pd.DataFrame, pd.Series, np.ndarray],\n    some_float: float,\n):\n    return (\n       element * some_other_stuff + some_float + Dummy.some_attr,\n       3 * (element * some_other_stuff + some_float + Dummy.some_attr)\n    )\n\n\nif __name__ == \"__main__\":\n\n    Dummy.some_attr = 1\n\n    dfs = [\n        pd.DataFrame([[0, 1], [2, 3]]),\n        pd.DataFrame([[4, 5], [6, 7]]),\n        pd.DataFrame([[8, 9], [10, 11]]),\n        pd.DataFrame([[12, 13], [14, 15]]),\n        pd.DataFrame([[16, 17], [18, 19]]),\n        pd.DataFrame([[21, 22], [23, 24]]),\n    ]\n    s = pd.Series([2, 3])\n    f = 5.0\n\n    which = sys.argv[1]\n    gather = True if sys.argv[2] == \"True\" else False\n    batched = True if sys.argv[3] == \"True\" else False if sys.argv[3] == \"False\" else int(sys.argv[3])\n    share = True if sys.argv[4] == \"True\" else False\n\n    if share is True:\n        share_kwargs = {\"share\": {\"some_other_stuff\": s}}\n    else:\n        share_kwargs = {\"some_other_stuff\": s}\n    engine = Engine(kind=which, path_shared=Path(\"tests\") / \"data\" / \"shared\")\n    res = engine(\n        method,\n        dfs,\n        init_method={\"method\": method_in_processes, \"kwargs\": {\"a\": 1}},\n        some_float=f,\n        gather=gather,\n        batched=batched,\n        **share_kwargs\n    )\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Advestis/adparallelengine",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adparallelengine",
    "package_url": "https://pypi.org/project/adparallelengine/",
    "platform": null,
    "project_url": "https://pypi.org/project/adparallelengine/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Advestis/adparallelengine/issues",
      "Documentation": "https://advestis.github.io/adparallelengine",
      "Homepage": "https://github.com/Advestis/adparallelengine",
      "Source Code": "https://github.com/Advestis/adparallelengine/"
    },
    "release_url": "https://pypi.org/project/adparallelengine/0.1.40/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A wrapper around several ways of doing map multiprocessing in Python",
    "version": "0.1.40",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14516550,
  "releases": {
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "caabb111c8109ffb31600ad3f31de0bae51e9fc6867d7888d8e3a32b68ddc819",
          "md5": "49a1148aba1827e680b2adf44f3e382c",
          "sha256": "5f905e582820971bac277c0c99a91e21c1375fd17c71c53060c98662fdda9373"
        },
        "downloads": -1,
        "filename": "adparallelengine-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "49a1148aba1827e680b2adf44f3e382c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 44939,
        "upload_time": "2022-05-24T14:56:38",
        "upload_time_iso_8601": "2022-05-24T14:56:38.518970Z",
        "url": "https://files.pythonhosted.org/packages/ca/ab/b111c8109ffb31600ad3f31de0bae51e9fc6867d7888d8e3a32b68ddc819/adparallelengine-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e5e7a54709da74171122fcc6567b2df0f0b8e88c684143a2b1bf653a58bd80b",
          "md5": "b681099574dc400c479237b2880368f0",
          "sha256": "c914785e90c41d262ec047bf3a2bae638acbad931904043702cf449896981638"
        },
        "downloads": -1,
        "filename": "adparallelengine-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "b681099574dc400c479237b2880368f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48263,
        "upload_time": "2022-05-25T08:37:25",
        "upload_time_iso_8601": "2022-05-25T08:37:25.770464Z",
        "url": "https://files.pythonhosted.org/packages/0e/5e/7a54709da74171122fcc6567b2df0f0b8e88c684143a2b1bf653a58bd80b/adparallelengine-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a706e6b41146258279ca3d2c0f4c03b561239821b483f7adb037763f1b1bf0e1",
          "md5": "3615172cbb888f2ce9be9c899db3f3a7",
          "sha256": "1949fefd8ec2b0d02b5d0c1d95e0ef7bef130eaced2850ff418f060ee486e014"
        },
        "downloads": -1,
        "filename": "adparallelengine-0.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "3615172cbb888f2ce9be9c899db3f3a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48272,
        "upload_time": "2022-05-25T09:35:35",
        "upload_time_iso_8601": "2022-05-25T09:35:35.994876Z",
        "url": "https://files.pythonhosted.org/packages/a7/06/e6b41146258279ca3d2c0f4c03b561239821b483f7adb037763f1b1bf0e1/adparallelengine-0.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4efc0e6df1ffdf05793902f1b891d0f8a5f2e5ca82473ee82246a2f586785fd",
          "md5": "4843e89644c890dfd6d52eb07e32be0a",
          "sha256": "7b63d44b9333d22a666086cedca78db13dd9efce457c8afbf458101664846f79"
        },
        "downloads": -1,
        "filename": "adparallelengine-0.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "4843e89644c890dfd6d52eb07e32be0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48291,
        "upload_time": "2022-05-25T11:54:17",
        "upload_time_iso_8601": "2022-05-25T11:54:17.913524Z",
        "url": "https://files.pythonhosted.org/packages/c4/ef/c0e6df1ffdf05793902f1b891d0f8a5f2e5ca82473ee82246a2f586785fd/adparallelengine-0.1.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "665f551c803e8e74a50ad00c8f1b66623b8c00d7f8aa58199ff9aba5bb11ec87",
          "md5": "b08bec45bcdabf1455e6e42f6c188854",
          "sha256": "af922b6c2c3a1b6ead09978f8834fc7b0059fef769f74094d8d6b306d3a41f6a"
        },
        "downloads": -1,
        "filename": "adparallelengine-0.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "b08bec45bcdabf1455e6e42f6c188854",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48293,
        "upload_time": "2022-05-25T12:17:53",
        "upload_time_iso_8601": "2022-05-25T12:17:53.850953Z",
        "url": "https://files.pythonhosted.org/packages/66/5f/551c803e8e74a50ad00c8f1b66623b8c00d7f8aa58199ff9aba5bb11ec87/adparallelengine-0.1.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8b2732883beaeefc7dd4c5c83d65d0e3e9a7b6b7ed211900b489693b47f1c58",
          "md5": "e312793b0fdb1d220207ca629a82d245",
          "sha256": "772cb6e8ebfbb6564f544b269e6490e861503408e988f2227fbcf9afe544c469"
        },
        "downloads": -1,
        "filename": "adparallelengine-0.1.19.tar.gz",
        "has_sig": false,
        "md5_digest": "e312793b0fdb1d220207ca629a82d245",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48330,
        "upload_time": "2022-05-30T16:12:00",
        "upload_time_iso_8601": "2022-05-30T16:12:00.330871Z",
        "url": "https://files.pythonhosted.org/packages/e8/b2/732883beaeefc7dd4c5c83d65d0e3e9a7b6b7ed211900b489693b47f1c58/adparallelengine-0.1.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa31cd9bdb185ea81e7272584f5d2f1a85cb2a3d6b5b364f01c617eb23099996",
          "md5": "1eca16e020d962d45d2da087d1e448c3",
          "sha256": "57f64ac0231a87dbc3801dc8328e20812f10bf4122206dce211742cfd758f7dd"
        },
        "downloads": -1,
        "filename": "adparallelengine-0.1.21.tar.gz",
        "has_sig": false,
        "md5_digest": "1eca16e020d962d45d2da087d1e448c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48329,
        "upload_time": "2022-06-03T08:14:02",
        "upload_time_iso_8601": "2022-06-03T08:14:02.007247Z",
        "url": "https://files.pythonhosted.org/packages/fa/31/cd9bdb185ea81e7272584f5d2f1a85cb2a3d6b5b364f01c617eb23099996/adparallelengine-0.1.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01952ea39ab65c55140de6647abc5cba1c2e892aee4c92ab7201e4dcc4e2a136",
          "md5": "6f7c625e0844195cf71cf96b7831a7da",
          "sha256": "f31cba21facf01eb564c06fd54537979a98265ec6a08fe9fd865680c5d35d12d"
        },
        "downloads": -1,
        "filename": "adparallelengine-0.1.22.tar.gz",
        "has_sig": false,
        "md5_digest": "6f7c625e0844195cf71cf96b7831a7da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48330,
        "upload_time": "2022-06-29T15:28:46",
        "upload_time_iso_8601": "2022-06-29T15:28:46.095619Z",
        "url": "https://files.pythonhosted.org/packages/01/95/2ea39ab65c55140de6647abc5cba1c2e892aee4c92ab7201e4dcc4e2a136/adparallelengine-0.1.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.40": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b8cf804dd82e24d6486e3ba482f3a6f3286253699d7bd2cb6e57cad47c4b2f8",
          "md5": "e84b545bb8d806a189698c8b29f38e86",
          "sha256": "deae1d8b33462775686fc0f604c18514aae776bea67db3784f547092fbb64aac"
        },
        "downloads": -1,
        "filename": "adparallelengine-0.1.40.tar.gz",
        "has_sig": false,
        "md5_digest": "e84b545bb8d806a189698c8b29f38e86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 49801,
        "upload_time": "2022-07-22T13:40:17",
        "upload_time_iso_8601": "2022-07-22T13:40:17.624211Z",
        "url": "https://files.pythonhosted.org/packages/5b/8c/f804dd82e24d6486e3ba482f3a6f3286253699d7bd2cb6e57cad47c4b2f8/adparallelengine-0.1.40.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b8cf804dd82e24d6486e3ba482f3a6f3286253699d7bd2cb6e57cad47c4b2f8",
        "md5": "e84b545bb8d806a189698c8b29f38e86",
        "sha256": "deae1d8b33462775686fc0f604c18514aae776bea67db3784f547092fbb64aac"
      },
      "downloads": -1,
      "filename": "adparallelengine-0.1.40.tar.gz",
      "has_sig": false,
      "md5_digest": "e84b545bb8d806a189698c8b29f38e86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 49801,
      "upload_time": "2022-07-22T13:40:17",
      "upload_time_iso_8601": "2022-07-22T13:40:17.624211Z",
      "url": "https://files.pythonhosted.org/packages/5b/8c/f804dd82e24d6486e3ba482f3a6f3286253699d7bd2cb6e57cad47c4b2f8/adparallelengine-0.1.40.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}