{
  "info": {
    "author": "Giubots",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MULTIMODAL CHATBOT CREATOR - FRAMEWORK\n\nThis project is based on the paper \"A Conceptual Framework for Multi-modal Process-driven Conversational Agents\".\nIt provides a framework that, if kept updated with the inputs from the user, guides him through an appropriately defined process, regardless of the input type.\n\nThis is the core component that implements the logic of the framework, you can use it in a standalone application;\nif instead you are interested in some ready to use components, take a look at the backend and React implementations.\n\n# Installation\n\nTo use the framework in a python application, run\n`pip install mmcc-framework`\n\n# Usage\n\nThere are two examples that show how to use the framework with a simple Tkinter application.\nThe [basic example](./examples/basic/README.md) uses a `NoNluAdapter`, meaning no NLU is performed;\nthe [rasa example](./examples/rasa/README.md) uses [Rasa](https://rasa.com/).\nTo use Rasa you will have to install it, or use [Docker](https://www.docker.com/).\n\nA developer that wants to use this framework has to:\n\n1. Provide a [process description](#the-process-description)\n1. Provide a set of [callbacks](#the-callbacks-and-the-responses)\n1. Provide a [knowledge base](#the-knowledge-base-and-the-context)\n1. Provide a [context](#the-knowledge-base-and-the-context)\n1. Choose a [NluAdapter](#the-nlu-adapter)\n1. Create a [Framework](#the-framework) object\n1. Call `handle_text_input` or `handle_data_input` whenever an input from the user is received\n1. Display back to the user the contents of the `Response` returned by the methods.\n\nIf you plan to use the provided backend, you just have to provide the first three and the NLU.\n\n### The Framework\n\nTo create a `Framework` it is possible to provide some files with the process description in json format, context and\nknowledge base, while the callbacks are provided through a function (more info below):\n\n```Python\nfrom mmcc_framework import Framework, RasaNlu\n\nframework = Framework.from_file(\"my_process.json\",\n                                \"my_kb.json\",\n                                {},  # Notice that in this case the context does not use a file.\n                                callback_getter,  # This is a function that given an activity id returns its callback.\n                                RasaNlu())\n```\n\nWhen the framework is called with `handle_data_input` the provided data is passed to the callback corresponding to the\ncurrent activity, obtained with the `callback_getter`. When the framework is called with `handle_text_input`,\nthe given text is transformed into data by the chosen `NluAdapter`, and the data is passed to the callback.\n\nThe callbacks can use the data and what is contained in the kb and context to produce a `Response`. The response can\ncontain an utterance and a payload that are returned to the caller. You are free to use the payload as you prefer, the\ndata that you provide instead depends on the `NluAdapter`\nthat you chose.\n\nIf multiple instances share the same files, remember to provide a unique lock shared by all the instances, this will\nallow the framework to handle concurrency when using the files.\n\nIf you prefer to create a framework instance from some existing data structure you can use Framework's constructor, and\nyou will have to provide also a callback that will be invoked when it will be time to save the kb.\n\n### The process description\n\nA `Process` object represents the sequence of actions the user can perform, it is divided in steps called activities.\nEach activity corresponds to an input from the user. The framework starts its execution from an initial activity, and\nmoves on to the following ones based on the response of the callback corresponding to the current activity.\n\nThe process must have a single starting point and can have multiple END activities.\n\nEach activity has a unique id, the id of the next activity and a type.\n\nEach activity uses a callback. The framework uses `callback_getter` to provide the callback implementation, using the activity `callback` field or, if that is not provided, the activity name.\n\nDepending on the type, an activity can also provide some choices, these consist in a list containing the id of each of\nthe first activities in a gateway (OR, XOR or PARALLEL) block. The last task in a block has `None` as next.\n\nIf an activity A is part of a bigger activity B (for example A's id is in B's choices list), A can have `None` as its\nnext id to indicate that the framework must go to B (or, if B is of type XOR, to B's next).\n\nFor example, if the process contains a XOR that allows to execute (A then B) XOR C, and then finally D, the\ncorresponding description would be:\n\n```json\n{\n  \"activities\": [\n    {\n      \"my_id\": \"start\",\n      \"next_id\": \"myXOR\",\n      \"my_type\": \"START\",\n      \"callback\": \"start\"\n    },\n    {\n      \"my_id\": \"myXOR\",\n      \"next_id\": \"D\",\n      \"my_type\": \"XOR\",\n      \"choices\": [\"A\", \"C\"]\n    },\n    {\n      \"my_id\": \"A\",\n      \"next_id\": \"B\",\n      \"my_type\": \"TASK\"\n    },\n    {\n      \"my_id\": \"B\",\n      \"next_id\": null,\n      \"my_type\": \"TASK\"\n    },\n    {\n      \"my_id\": \"C\",\n      \"next_id\": null,\n      \"my_type\": \"TASK\"\n    },\n    {\n      \"my_id\": \"D\",\n      \"next_id\": \"end\",\n      \"my_type\": \"TASK\"\n    },\n    {\n      \"my_id\": \"end\",\n      \"next_id\": null,\n      \"my_type\": \"END\"\n    }\n  ],\n  \"first_activity_id\": \"start\"\n}\n```\n\nThere are six `ActivityType` values:\n\n- TASK: Represents an operation to be done to complete the process, the callback response contains true if the user can\n  move on to the next activity.\n- START: It is the entry point of the process, its response must contain True and can be used to prepare the state using\n  the payload.\n- END: A \"sink\" state that represents the termination of the process.\n- PARALLEL: A task that gives some options to the user, the user can choose which one to execute, and is completed when\n  all have been chosen at least once. Its callback must return the id of the chosen activity if the user input was\n  valid, `None` to move on to the next task.\n- XOR: Similar to a PARALLEL, but allows the user to choose exactly one of the options.\n- OR: Similar to a PARALLEL, but it is completed when the user has chosen at least one of the options.\n\n### The callbacks and the responses\n\nEach `Activity` (END excluded) has an associated callback that is in charge of:\n\n- Handling the input\n- Updating the knowledge base\n- Updating the context\n- Returning a `Response` with the updated knowledge base and context\n- The response can also contain an utterance and a payload that are returned by `handle_text_input`\n  or `handle_data_input`\n- Finally, the response specifies whether the activity is completed and can contain an optional \"choice\", depending on\n  the type. In a gateway, the choice is the id of the chosen task or `None` to go to the next task if possible. Note\n  that the framework does not perform checks on the choice, so it is possible to exit a gateway even if it is not\n  completed.\n\nThe example below shows a callback that could be associated with an OR, XOR or PARALLEL activity. If the user inserted a\nvalid choice then the activity is completed, and the callback returns the choice; otherwise it returns an utterance from\nthe knowledge base.\n\n```Python\nfrom mmcc_framework import Response\n\n\ndef callback(data, kb, context, current_activity) -> Response:\n    # Obtain my_choice from the data, evaluate it and prepare my_payload.\n    my_choice = ...\n    completed = ...\n    my_payload = ...\n    ...\n    if completed:\n        return Response(kb, context, True, payload=my_payload, choice=my_choice)\n    return Response(kb, context, False, utterance=kb[\"my_kb_key\"])\n\nmy_callbacks = {\n    \"my_gateway\": callback\n    # Add other callbacks here.\n}\n```\n\nTo pass the callbacks to the `Framework`, create a DictCallback with your `my_callbacks` dictionary.\n\nWhen `handle_text_input` or `handle_data_input` terminate, they return a data structure that contains the utterance and\nthe payload. The payload contents are not predefined and can be customized.\n\n```Python\n{\n    \"utterance\": \"An utterance\",\n    \"payload\": {...}\n}\n```\n\n### The knowledge base and the context\n\nThese are dictionaries with key-value pairs.\n\n```json\n{\n  \"insert_name\": \"Please insert your name\"\n}\n```\n\n**SPECIAL KB KEYS:**\nWhen a task is starting, the framework **automatically** searches in the knowledge base a key\ncorresponding to its id and appends its value to the utterance in the `Response`.\nMore precisely, the corresponding value can be a string, a vector of strings (one is picked randomly),\nor a dictionary that can contain the key `initials` which can be a string or a vector as above.\nFor example, when a task called \"insert_name\" starts,\nthe message in the knowledge base of the example above will be put in the utterance.\nIf you prefer to handle manually all the utterances,\navoid using the id of a task as a knowledge base key, or use it as a dictionary.\n\n**SPECIAL CONTEXT KEYS:** In the context, the framework **automatically** adds a `CTX_COMPLETED` key whose value is a\nlist of task id that can be accessed by the developer in the callbacks: if a gateway (activity with type PARALLEL or OR)\nis in this list then it is completed, and the user can move to the next activity. For example when the user has chosen\nall the tasks in a PARALLEL activity with the id \"my_par\", `context[CTX_COMPLETED]` will contain \"my_par\". The list is\nkept clean, meaning that when a gateway is exited, the corresponding entry is removed from the list.\n\n### The NLU adapter\n\nThe framework can be used with data (with the method `handle_data_input`) or with text (with `handle_text_input`). The\ncallbacks expect to receive data as their input, not text. To transform text into data an `NluAdapter` is used. There\nare two kinds of adapters: `NoNluAdapter` and `RasaNlu`\n\n**NoNluAdapter** does not use a NLU engine, and simply takes the input and puts it into a dictionary. The list of keys\nto use in the dictionary must be provided to the NoNluAdapter constructor.\n\n```Python\nfrom mmcc_framework import Framework, NoNluAdapter\n\n# Suppose that the framework callbacks use only the following keys: \"name\" and \"occupation\".\n# Initialize the adapter\nmy_adapter = NoNluAdapter([\"name\", \"occupation\"])\nmy_framework = Framework(..., nlu=my_adapter)\n\n# Suppose that it is time to insert the name.\n\n# If it is necessary to insert it as text use:\nmy_framework.handle_text_input(\"Mark\")\n# The callback corresponding to the current activity will receive:\ndata = {\"name\": \"Mark\", \"occupation\": \"Mark\"}\n\n# If it is necessary to insert the name as data use:\nmy_framework.handle_data_input({\"name\": \"Mark\"})\n```\n\n**RasaNlu** uses [Rasa](https://rasa.com/), to use this adapter it is necessary to first setup and train the\ninterpreter. The instructions on how to use Rasa are available on Rasa's website, and consist basically in the following\nsteps:\n\n- Install Rasa and its dependencies;\n- Run `rasa init` in your folder of choice;\n- Edit the `data/nlu` file with the utterances used for training;\n- Run `rasa train nlu` to produce a model;\n- Start rasa on port 5005 and pass the location of the model:\n  for example `rasa run --enable-api -m models/nlu-20201228-183937.tar.gz`\n\n```Python\nfrom mmcc_framework import Framework, RasaNlu\n\n# Suppose that the nlu is trained with, among the others, the intent \"insert_name\" with a entity \"name\".\n# Initialize the adapter\nmy_adapter = RasaNlu()\nmy_framework = Framework(..., nlu=my_adapter)\n\n# Suppose that it is time to insert the name.\n\n# If it is necessary to insert it as text use:\nmy_framework.handle_text_input(\"Mark\")\n# The callback corresponding to the current activity will receive (if the intent is recognized):\ndata = {\"intent\": \"insert_name\", \"name\": \"Mark\"}\n\n# If it is necessary to insert the name as data use:\nmy_framework.handle_data_input(RasaNlu.dict(\"insert_name\", {\"name\": \"Mark\"}))\n# This will pass to the callback the same structure as above.\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mmcc-framework",
    "package_url": "https://pypi.org/project/mmcc-framework/",
    "platform": "",
    "project_url": "https://pypi.org/project/mmcc-framework/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mmcc-framework/0.3.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Create a multimodal chatbot modeled on a process",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10445753,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6165a60b3177a38c30ace9422de96298c70696e3c38f321a8528339a3c8ba67e",
          "md5": "0871c55243649ed60925adf305c56da9",
          "sha256": "4988e30af16ac028167ad879b864db2896f93665bc537a491f0581b5a9ebb8ec"
        },
        "downloads": -1,
        "filename": "mmcc_framework-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0871c55243649ed60925adf305c56da9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17788,
        "upload_time": "2021-03-19T22:00:54",
        "upload_time_iso_8601": "2021-03-19T22:00:54.866479Z",
        "url": "https://files.pythonhosted.org/packages/61/65/a60b3177a38c30ace9422de96298c70696e3c38f321a8528339a3c8ba67e/mmcc_framework-0.0.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d89ba7b0e53890d53c00d0bbfeb753951ca47cd7c2ab04326b391ee6f3a46f3e",
          "md5": "97f299a167d06f95e505fbd91008e0f8",
          "sha256": "6a635e291109740aec6e8e97e1f94461f35dbccc79b235896cecca8823a78ad6"
        },
        "downloads": -1,
        "filename": "mmcc-framework-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "97f299a167d06f95e505fbd91008e0f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7768,
        "upload_time": "2021-03-19T22:00:56",
        "upload_time_iso_8601": "2021-03-19T22:00:56.214703Z",
        "url": "https://files.pythonhosted.org/packages/d8/9b/a7b0e53890d53c00d0bbfeb753951ca47cd7c2ab04326b391ee6f3a46f3e/mmcc-framework-0.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12b592ea057294261f2c1b8cc95d05b4980b81b5d007ced4d7f3eda5a88547b4",
          "md5": "437d6e7668c62dee68bd7a97cc7dacb5",
          "sha256": "1dff9dadc66f6a4861cd5826241010657c13bd8c0b86219f237032bca1ca5100"
        },
        "downloads": -1,
        "filename": "mmcc_framework-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "437d6e7668c62dee68bd7a97cc7dacb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26510,
        "upload_time": "2021-03-19T23:16:16",
        "upload_time_iso_8601": "2021-03-19T23:16:16.938631Z",
        "url": "https://files.pythonhosted.org/packages/12/b5/92ea057294261f2c1b8cc95d05b4980b81b5d007ced4d7f3eda5a88547b4/mmcc_framework-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8c4d76fc387b033285456cd6529b09d69d5548bb2e03b72b39dcc210eeb16a0",
          "md5": "c483e3453fb4e72ae657c2028493e3ea",
          "sha256": "3a7df9bb529b427d5705ab2742e80672bbaf34347d08c30e9c219783d1c0ed29"
        },
        "downloads": -1,
        "filename": "mmcc-framework-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c483e3453fb4e72ae657c2028493e3ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17400,
        "upload_time": "2021-03-19T23:16:18",
        "upload_time_iso_8601": "2021-03-19T23:16:18.186888Z",
        "url": "https://files.pythonhosted.org/packages/c8/c4/d76fc387b033285456cd6529b09d69d5548bb2e03b72b39dcc210eeb16a0/mmcc-framework-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c78395f21b10d43e2fc5e75fb79064d868c2bec151390edb62de1f58985bf4a0",
          "md5": "369378559ef1b2392ab0857ae0ccbc72",
          "sha256": "3718b0fd9c0275a0707b3c68d9fe97286a7a53d40d6f362501009c7439ec5e1c"
        },
        "downloads": -1,
        "filename": "mmcc_framework-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "369378559ef1b2392ab0857ae0ccbc72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28904,
        "upload_time": "2021-03-27T20:31:55",
        "upload_time_iso_8601": "2021-03-27T20:31:55.209966Z",
        "url": "https://files.pythonhosted.org/packages/c7/83/95f21b10d43e2fc5e75fb79064d868c2bec151390edb62de1f58985bf4a0/mmcc_framework-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ae21097a16c36e83fbbb121eab0f0d3a27e37ace8a6fb86f79672e5a1e8cc3e",
          "md5": "2ec7328141959d45f92b542b81330283",
          "sha256": "e26b1d04bb02d604d056a44d0bce4cb4314f84bcd19ae51675787554bc55d2ac"
        },
        "downloads": -1,
        "filename": "mmcc-framework-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ec7328141959d45f92b542b81330283",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22374242,
        "upload_time": "2021-03-27T20:31:57",
        "upload_time_iso_8601": "2021-03-27T20:31:57.283615Z",
        "url": "https://files.pythonhosted.org/packages/2a/e2/1097a16c36e83fbbb121eab0f0d3a27e37ace8a6fb86f79672e5a1e8cc3e/mmcc-framework-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ea25251d4aea2173866877d6c9728ccc17d5e717dcd44707854964b06d69865",
          "md5": "f07b19e5fdab416cdeac35c4e93e967d",
          "sha256": "1dd0c2338b966d4a5ad8fca71a47769b4cf77212b514927d5a496dd76de1ebf0"
        },
        "downloads": -1,
        "filename": "mmcc_framework-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f07b19e5fdab416cdeac35c4e93e967d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29100,
        "upload_time": "2021-04-13T20:16:57",
        "upload_time_iso_8601": "2021-04-13T20:16:57.619538Z",
        "url": "https://files.pythonhosted.org/packages/7e/a2/5251d4aea2173866877d6c9728ccc17d5e717dcd44707854964b06d69865/mmcc_framework-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2ec6bfcb75aa7296d8e29a44dcf16ca2baa8342e1c1308de8c3d931ed4936e7",
          "md5": "9cce9a6528abfb54c072dc6383865d37",
          "sha256": "633aa85cc7b5a7dd8e067e821a097035df60df9402ca0439df12510462b205b1"
        },
        "downloads": -1,
        "filename": "mmcc-framework-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9cce9a6528abfb54c072dc6383865d37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22374581,
        "upload_time": "2021-04-13T20:16:59",
        "upload_time_iso_8601": "2021-04-13T20:16:59.612190Z",
        "url": "https://files.pythonhosted.org/packages/c2/ec/6bfcb75aa7296d8e29a44dcf16ca2baa8342e1c1308de8c3d931ed4936e7/mmcc-framework-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "579b4fdf2203dda512a7e7371b31fc9e4312c001fd531be77b6378f531ddaed6",
          "md5": "0f16ddd4de8ebcf0ce843329ff58f97c",
          "sha256": "608e3e8538201073c89a7b32142ad638e94f1e84387d2c9a34e23d02e69ec8d1"
        },
        "downloads": -1,
        "filename": "mmcc_framework-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f16ddd4de8ebcf0ce843329ff58f97c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30772,
        "upload_time": "2021-05-05T20:37:44",
        "upload_time_iso_8601": "2021-05-05T20:37:44.494783Z",
        "url": "https://files.pythonhosted.org/packages/57/9b/4fdf2203dda512a7e7371b31fc9e4312c001fd531be77b6378f531ddaed6/mmcc_framework-0.3.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "This version contains an error in the validation methods"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "339945e3d641bb7e73436f3cffeb229528fd2dc58c51b85a3cebb4fd05d5fea0",
          "md5": "f54664fbf6cbf972a6078cc0524a651c",
          "sha256": "97390cbde4e938c2f0993ca868e44662c7d3481ead277698ffa722f502c8c8c4"
        },
        "downloads": -1,
        "filename": "mmcc-framework-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f54664fbf6cbf972a6078cc0524a651c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22376210,
        "upload_time": "2021-05-05T20:37:48",
        "upload_time_iso_8601": "2021-05-05T20:37:48.266797Z",
        "url": "https://files.pythonhosted.org/packages/33/99/45e3d641bb7e73436f3cffeb229528fd2dc58c51b85a3cebb4fd05d5fea0/mmcc-framework-0.3.0.tar.gz",
        "yanked": true,
        "yanked_reason": "This version contains an error in the validation methods"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96fa624e06d3ebf597c2f1e43fa1ec13548506ddf888306edd14db055bb06c40",
          "md5": "76d98278dc608d7b0c54a7882892c3b6",
          "sha256": "fadb10e09611fe5dec625f3596cdd464147fa86dbe63ba599f21f7a73cc76738"
        },
        "downloads": -1,
        "filename": "mmcc_framework-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76d98278dc608d7b0c54a7882892c3b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30774,
        "upload_time": "2021-05-11T07:19:11",
        "upload_time_iso_8601": "2021-05-11T07:19:11.771813Z",
        "url": "https://files.pythonhosted.org/packages/96/fa/624e06d3ebf597c2f1e43fa1ec13548506ddf888306edd14db055bb06c40/mmcc_framework-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2883baaebc0d6a83aa70b60da77b4a00f6c757240afdae40fe3c38164da91a2",
          "md5": "e69d99ff100b3379d44bdfadefe8347a",
          "sha256": "6816239bb54211b12ba3da4c48637b967c5eff4ab5ec60aae28a8e22d57d47a1"
        },
        "downloads": -1,
        "filename": "mmcc-framework-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e69d99ff100b3379d44bdfadefe8347a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22376257,
        "upload_time": "2021-05-11T07:19:13",
        "upload_time_iso_8601": "2021-05-11T07:19:13.944198Z",
        "url": "https://files.pythonhosted.org/packages/f2/88/3baaebc0d6a83aa70b60da77b4a00f6c757240afdae40fe3c38164da91a2/mmcc-framework-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89a43cb9365e345b2bce47e5b149da1680578173cabab72c6a28c5d467069633",
          "md5": "da53d2a1150194a04711ade9b40ce1a1",
          "sha256": "e4e5e4fc12db06dd08964d810657d06d191afc85fca96b52ce133cd16b7def6e"
        },
        "downloads": -1,
        "filename": "mmcc_framework-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da53d2a1150194a04711ade9b40ce1a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30850,
        "upload_time": "2021-05-23T08:47:26",
        "upload_time_iso_8601": "2021-05-23T08:47:26.341952Z",
        "url": "https://files.pythonhosted.org/packages/89/a4/3cb9365e345b2bce47e5b149da1680578173cabab72c6a28c5d467069633/mmcc_framework-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01a36178895c242c353c0775392e3db03bd98cad50f04dd7dbe564686af26904",
          "md5": "1f9410007b627b5b91d019ec682651b1",
          "sha256": "2608f35df23466a1ef1f6365cd0c15ab0a4a250b667929138e258f31ba24aed8"
        },
        "downloads": -1,
        "filename": "mmcc-framework-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1f9410007b627b5b91d019ec682651b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22376378,
        "upload_time": "2021-05-23T08:47:28",
        "upload_time_iso_8601": "2021-05-23T08:47:28.462134Z",
        "url": "https://files.pythonhosted.org/packages/01/a3/6178895c242c353c0775392e3db03bd98cad50f04dd7dbe564686af26904/mmcc-framework-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89a43cb9365e345b2bce47e5b149da1680578173cabab72c6a28c5d467069633",
        "md5": "da53d2a1150194a04711ade9b40ce1a1",
        "sha256": "e4e5e4fc12db06dd08964d810657d06d191afc85fca96b52ce133cd16b7def6e"
      },
      "downloads": -1,
      "filename": "mmcc_framework-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "da53d2a1150194a04711ade9b40ce1a1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 30850,
      "upload_time": "2021-05-23T08:47:26",
      "upload_time_iso_8601": "2021-05-23T08:47:26.341952Z",
      "url": "https://files.pythonhosted.org/packages/89/a4/3cb9365e345b2bce47e5b149da1680578173cabab72c6a28c5d467069633/mmcc_framework-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01a36178895c242c353c0775392e3db03bd98cad50f04dd7dbe564686af26904",
        "md5": "1f9410007b627b5b91d019ec682651b1",
        "sha256": "2608f35df23466a1ef1f6365cd0c15ab0a4a250b667929138e258f31ba24aed8"
      },
      "downloads": -1,
      "filename": "mmcc-framework-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1f9410007b627b5b91d019ec682651b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22376378,
      "upload_time": "2021-05-23T08:47:28",
      "upload_time_iso_8601": "2021-05-23T08:47:28.462134Z",
      "url": "https://files.pythonhosted.org/packages/01/a3/6178895c242c353c0775392e3db03bd98cad50f04dd7dbe564686af26904/mmcc-framework-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}