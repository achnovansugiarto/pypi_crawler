{
  "info": {
    "author": "Antoine Simoulin",
    "author_email": "antoine.simoulin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\">\n    <br>\n    <img src=\"https://raw.githubusercontent.com/AntoineSimoulin/pytree/master/imgs/pytree_logo.png\" width=\"400\"/>\n    <br>\n<p>\n\n**PyTree** implements tree-structured neural networks in PyTorch.\nThe package provides highly generic implementations as well as efficient batching methods.\n\n## Installation\n\nTo install please run:\n\n```bash\npip install git+https://github.com/AntoineSimoulin/pytree\n```\n\n## Usage\n\n### Prepare constituency tree data\n\nData must be in the `str` format as detailed in the example below:\n\n```python\nfrom pytree.data import prepare_input_from_constituency_tree\n\nparse_tree_example = '(TOP (S (NP (_ I)) (VP (_ saw) (NP (_ Sarah)) (PP (_ with) (NP (_ a) (_ telescope)))) (_ .)))'\ninput_test, head_idx_test, head_idx_r_test, head_idx_l_test = prepare_input_from_constituency_tree(parse_tree_example)\n\nprint(input_test)\n# ['[CLS]', 'I', 'saw', 'Sarah', 'with', 'a', 'telescope', '.', '[S]', '[S]', '[VP]', '[VP]', '[PP]', '[NP]']\n\nprint(head_idx_test)\n# [0, 9, 11, 11, 12, 13, 13, 8, 0, 8, 9, 10, 10, 12]\n\nprint(head_idx_r_test)\n# [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0]\n\nprint(head_idx_l_test)\n# [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1]\n```\n\n### Prepare dependency tree data\n\nData must be in the `conll-X` format as detailed in the example below:\n\n```python\nfrom pytree.data import prepare_input_from_dependency_tree\n\nparse_tree_example = \"\"\"1\tI\t_\t_\t_\t_\t2\tnsubj\t_\t_\n2\tsaw\t_\t_\t_\t_\t0\troot\t_\t_\n3\tSarah\t_\t_\t_\t_\t2\tdobj\t_\t_\n4\twith\t_\t_\t_\t_\t2\tprep\t_\t_\n5\ta\t_\t_\t_\t_\t6\tdet\t_\t_\n6\ttelescope\t_\t_\t_\t_\t4\tpobj\t_\t_\n7\t.\t_\t_\t_\t_\t2\tpunct\t_\t_\n\"\"\"\ninput_test, head_idx_test = prepare_input_from_dependency_tree(parse_tree_example)\n\nprint(input_test)\n# ['[CLS]', 'I', 'saw', 'Sarah', 'with', 'a', 'telescope', '.']\n\nprint(head_idx_test)\n# [0, 2, 0, 2, 2, 6, 4, 2]\n```\n\n### Prepare data\n\nYou may encode the word with GloVe emebddings :\n\n```python\nfrom pytree.data.glove_tokenizer import GloveTokenizer\n\nglove_tokenizer = GloveTokenizer(glove_file_path='./glove.6B.300d.txt', vocab_size=10000)\ninput_test = glove_tokenizer.convert_tokens_to_ids(input_test)\nprint(input_test)\n# [1, 1, 824, 1, 19, 9, 1, 4]\n```\n\nThen prepare the data:\n\n```python\nfrom pytree.data.utils import build_tree_ids_n_ary\n\ntree_ids_test, tree_ids_test_r, tree_ids_test_l = build_tree_ids_n_ary(head_idx_test, head_idx_r_test, head_idx_l_test)\ninputs = {'input_ids': torch.tensor(input_test).unsqueeze(0),\n          'tree_ids': torch.tensor(tree_ids_test).unsqueeze(0),\n          'tree_ids_r': torch.tensor(tree_ids_test_r).unsqueeze(0),\n          'tree_ids_l': torch.tensor(tree_ids_test_l).unsqueeze(0)}\n```\n\nAnd apply the model:\n\n```python\nfrom pytree.models import NaryConfig, NaryTree\n\nconfig = NaryConfig()\ntree_encoder = NaryTree(config)\n\n(h, c), h_root = tree_encoder(inputs)\nprint(h)\n# tensor([[[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],\n#          [ 0.0113, -0.0066,  0.0089,  ...,  0.0064,  0.0076, -0.0048],\n#          [ 0.0110, -0.0073,  0.0110,  ...,  0.0070,  0.0046, -0.0049],\n#          ...,\n#          [ 0.0254, -0.0138,  0.0224,  ...,  0.0131,  0.0148, -0.0143],\n#          [ 0.0346, -0.0172,  0.0281,  ...,  0.0140,  0.0198, -0.0267],\n#          [ 0.0247, -0.0126,  0.0201,  ...,  0.0116,  0.0162, -0.0184]]],\n#        grad_fn=<SWhereBackward>)\n\nprint(h_root.shape)\n# torch.Size([150])\n```\n\nWe also provide a full demonstration with the SICK dataset and batched processing in the [examples folder](https://github.com/AntoineSimoulin/pytree/tree/main/examples/sick).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/AntoineSimoulin/pytree/archive/refs/tags/v0.0.1-alpha.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AntoineSimoulin/pytree/tree/main",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rvnn",
    "package_url": "https://pypi.org/project/rvnn/",
    "platform": "",
    "project_url": "https://pypi.org/project/rvnn/",
    "project_urls": {
      "Download": "https://github.com/AntoineSimoulin/pytree/archive/refs/tags/v0.0.1-alpha.tar.gz",
      "Homepage": "https://github.com/AntoineSimoulin/pytree/tree/main"
    },
    "release_url": "https://pypi.org/project/rvnn/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A PyTorch package for recursive neural networks.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12025320,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84f3a7a8ce85729e4164c28b879016a62f21ec1adc4e1f0f2db7359178578530",
          "md5": "1f6b560bf4cc4cf9bb978442b1519ca4",
          "sha256": "1185fb6357d7f00d7e58a1f31b506528e19fe511a6425ebab2124792e65663d3"
        },
        "downloads": -1,
        "filename": "rvnn-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1f6b560bf4cc4cf9bb978442b1519ca4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18896,
        "upload_time": "2021-11-15T11:01:10",
        "upload_time_iso_8601": "2021-11-15T11:01:10.318662Z",
        "url": "https://files.pythonhosted.org/packages/84/f3/a7a8ce85729e4164c28b879016a62f21ec1adc4e1f0f2db7359178578530/rvnn-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84f3a7a8ce85729e4164c28b879016a62f21ec1adc4e1f0f2db7359178578530",
        "md5": "1f6b560bf4cc4cf9bb978442b1519ca4",
        "sha256": "1185fb6357d7f00d7e58a1f31b506528e19fe511a6425ebab2124792e65663d3"
      },
      "downloads": -1,
      "filename": "rvnn-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1f6b560bf4cc4cf9bb978442b1519ca4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18896,
      "upload_time": "2021-11-15T11:01:10",
      "upload_time_iso_8601": "2021-11-15T11:01:10.318662Z",
      "url": "https://files.pythonhosted.org/packages/84/f3/a7a8ce85729e4164c28b879016a62f21ec1adc4e1f0f2db7359178578530/rvnn-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}