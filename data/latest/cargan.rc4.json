{
  "info": {
    "author": "Max Morrison",
    "author_email": "maxrmorrison@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Chunked Autoregressive GAN (CARGAN)\n[![PyPI](https://img.shields.io/pypi/v/cargan.svg)](https://pypi.python.org/pypi/cargan)\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n<!-- [![Downloads](https://pepy.tech/badge/cargan)](https://pepy.tech/project/cargan) -->\n\nOfficial implementation of the paper _Chunked Autoregressive GAN for Conditional Waveform Synthesis_ [[paper]](https://www.maxrmorrison.com/pdfs/morrison2022chunked.pdf) [[companion website]](https://www.maxrmorrison.com/sites/cargan/)\n\n\n## Table of contents\n\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Inference](#inference)\n    * [CLI](#cli)\n    * [API](#api)\n        * [`cargan.from_audio`](#carganfrom_audio)\n        * [`cargan.from_audio_file_to_file`](#carganfrom_audio_file_to_file)\n        * [`cargan.from_audio_files_to_files`](#carganfrom_audio_files_to_files)\n        * [`cargan.from_features`](#carganfrom_features)\n        * [`cargan.from_feature_file_to_file`](#carganfrom_feature_file_to_file)\n        * [`cargan.from_feature_files_to_files`](#carganfrom_feature_files_to_files)\n- [Reproducing results](#reproducing-results)\n    * [Download](#download)\n    * [Partition](#partition)\n    * [Preprocess](#preprocess)\n    * [Train](#train)\n    * [Evaluate](#evaluate)\n        * [Objective](#objective)\n        * [Subjective](#subjective)\n        * [Receptive field](#receptive-field)\n- [Running tests](#running-tests)\n- [Citation](#citation)\n\n\n## Installation\n\n`pip install cargan`\n\n\n## Configuration\n\nAll configuration is performed in `cargan/constants.py`. The default configuration is\nCARGAN. Additional configuration files for experiments described in our paper\ncan be found in `config/`.\n\n\n## Inference\n\n### CLI\n\nInfer from an audio files on disk. `audio_files` and `output_files` can be\nlists of files to perform batch inference.\n\n```\npython -m cargan \\\n    --audio_files <audio_files> \\\n    --output_files <output_files> \\\n    --checkpoint <checkpoint> \\\n    --gpu <gpu>\n```\n\nInfer from files of features on disk. `feature_files` and `output_files` can\nbe lists of files to perform batch inference.\n\n```\npython -m cargan \\\n    --feature_files <feature_files> \\\n    --output_files <output_files> \\\n    --checkpoint <checkpoint> \\\n    --gpu <gpu>\n```\n\n\n### API\n\n#### `cargan.from_audio`\n\n```\n\"\"\"Perform vocoding from audio\n\nArguments\n    audio : torch.Tensor(shape=(1, samples))\n        The audio to vocode\n    sample_rate : int\n        The audio sample rate\n    gpu : int or None\n        The index of the gpu to use\n\nReturns\n    vocoded : torch.Tensor(shape=(1, samples))\n        The vocoded audio\n\"\"\"\n```\n\n#### `cargan.from_audio_file_to_file`\n\n```\n\"\"\"Perform vocoding from audio file and save to file\n\nArguments\n    audio_file : Path\n        The audio file to vocode\n    output_file : Path\n        The location to save the vocoded audio\n    checkpoint : Path\n        The generator checkpoint\n    gpu : int or None\n        The index of the gpu to use\n\"\"\"\n```\n\n\n#### `cargan.from_audio_files_to_files`\n\n```\n\"\"\"Perform vocoding from audio files and save to files\n\nArguments\n    audio_files : list(Path)\n        The audio files to vocode\n    output_files : list(Path)\n        The locations to save the vocoded audio\n    checkpoint : Path\n        The generator checkpoint\n    gpu : int or None\n        The index of the gpu to use\n\"\"\"\n```\n\n\n#### `cargan.from_features`\n\n```\n\"\"\"Perform vocoding from features\n\nArguments\n    features : torch.Tensor(shape=(1, cargan.NUM_FEATURES, frames)\n        The features to vocode\n    gpu : int or None\n        The index of the gpu to use\n\nReturns\n    vocoded : torch.Tensor(shape=(1, cargan.HOPSIZE * frames))\n        The vocoded audio\n\"\"\"\n```\n\n\n#### `cargan.from_feature_file_to_file`\n\n```\n\"\"\"Perform vocoding from feature file and save to disk\n\nArguments\n    feature_file : Path\n        The feature file to vocode\n    output_file : Path\n        The location to save the vocoded audio\n    checkpoint : Path\n        The generator checkpoint\n    gpu : int or None\n        The index of the gpu to use\n\"\"\"\n```\n\n\n#### `cargan.from_feature_files_to_files`\n\n```\n\"\"\"Perform vocoding from feature files and save to disk\n\nArguments\n    feature_files : list(Path)\n        The feature files to vocode\n    output_files : list(Path)\n        The locations to save the vocoded audio\n    checkpoint : Path\n        The generator checkpoint\n    gpu : int or None\n        The index of the gpu to use\n\"\"\"\n```\n\n\n## Reproducing results\n\nFor the following subsections, the arguments are as follows\n- `checkpoint` - Path to an existing checkpoint on disk\n- `datasets` - A list of datasets to use. Supported datasets are\n  `vctk`, `daps`, `cumsum`, and `musdb`.\n- `gpu` - The index of the gpu to use\n- `gpus` - A list of indices of gpus to use for distributed data parallelism\n  (DDP)\n- `name` - The name to give to an experiment or evaluation\n- `num` - The number of samples to evaluate\n\n\n### Download\n\nDownloads, unzips, and formats datasets. Stores datasets in `data/datasets/`.\nStores formatted datasets in `data/cache/`.\n\n```\npython -m cargan.data.download --datasets <datasets>\n```\n\n`vctk` must be downloaded before `cumsum`.\n\n\n### Preprocess\n\nPrepares features for training. Features are stored in `data/cache/`.\n\n```\npython -m cargan.preprocess --datasets <datasets> --gpu <gpu>\n```\n\nRunning this step is not required for the `cumsum` experiment.\n\n\n### Partition\n\nPartitions a dataset into training, validation, and testing partitions. You\nshould not need to run this, as the partitions used in our work are provided\nfor each dataset in `cargan/assets/partitions/`.\n\n```\npython -m cargan.partition --datasets <datasets>\n```\n\nThe optional `--overwrite` flag forces the existing parition to be overwritten.\n\n\n### Train\n\nTrains a model. Checkpoints and logs are stored in `runs/`.\n\n```\npython -m cargan.train \\\n    --name <name> \\\n    --datasets <datasets> \\\n    --gpus <gpus>\n```\n\nYou can optionally specify a `--checkpoint` option pointing to the directory\nof a previous run. The most recent checkpoint will automatically be loaded\nand training will resume from that checkpoint. You can overwrite a previous\ntraining by passing the `--overwrite` flag.\n\nYou can monitor training via `tensorboard` as follows.\n\n```\ntensorboard --logdir runs/ --port <port>\n```\n\n\n### Evaluate\n\n#### Objective\n\nReports the pitch RMSE (in cents), periodicity RMSE, and voiced/unvoiced F1\nscore. Results are both printed and stored in `eval/objective/`.\n\n```\npython -m cargan.evaluate.objective \\\n    --name <name> \\\n    --datasets <datasets> \\\n    --checkpoint <checkpoint> \\\n    --num <num> \\\n    --gpu <gpu>\n```\n\n\n#### Subjective\n\nGenerates samples for subjective evaluation. Also performs benchmarking\nof inference speed. Results are stored in `eval/subjective/`.\n\n```\npython -m cargan.evaluate.subjective \\\n    --name <name> \\\n    --datasets <datasets> \\\n    --checkpoint <checkpoint> \\\n    --num <num> \\\n    --gpu <gpu>\n```\n\n\n#### Receptive field\n\nGet the size of the (non-causal) receptive field of the generator.\n`cargan.AUTOREGRESSIVE` must be `False` to use this.\n\n```\npython -m cargan.evaluate.receptive_field\n```\n\n\n## Running tests\n\n```\npip install pytest\npytest\n```\n\n\n## Citation\n\n### IEEE\nM. Morrison, R. Kumar, K. Kumar, P. Seetharaman, A. Courville, and Y. Bengio, \"Chunked Autoregressive GAN for Conditional Waveform Synthesis,\" Submitted to ICLR 2022, April 2022.\n\n\n### BibTex\n\n```\n@inproceedings{morrison2022chunked,\n    title={Chunked Autoregressive GAN for Conditional Waveform Synthesis},\n    author={Morrison, Max and Kumar, Rithesh and Kumar, Kundan and Seetharaman, Prem and Courville, Aaron and Bengio, Yoshua},\n    booktitle={Submitted to ICLR 2022},\n    month={April},\n    year={2022}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/descriptinc/cargan",
    "keywords": "audio,speech,gan,pytorch,vocoder",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cargan",
    "package_url": "https://pypi.org/project/cargan/",
    "platform": "",
    "project_url": "https://pypi.org/project/cargan/",
    "project_urls": {
      "Homepage": "https://github.com/descriptinc/cargan"
    },
    "release_url": "https://pypi.org/project/cargan/0.0.4/",
    "requires_dist": [
      "librosa",
      "numpy",
      "torch",
      "torchaudio",
      "torchcrepe",
      "tqdm"
    ],
    "requires_python": "",
    "summary": "Chunked Autoregressive GAN for Conditional Waveform Synthesis",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11782928,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fee7732fd9874b445d0ba2c0351c349b084f096ff26032fd0ed22faccd74066",
          "md5": "8f1fd637f07a637fe6afc5843d34ca72",
          "sha256": "b0b319388c9bc952095b23fa920417a444837bd0e0d1ec26807459927852a557"
        },
        "downloads": -1,
        "filename": "cargan-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f1fd637f07a637fe6afc5843d34ca72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15892,
        "upload_time": "2021-10-19T18:37:27",
        "upload_time_iso_8601": "2021-10-19T18:37:27.828964Z",
        "url": "https://files.pythonhosted.org/packages/4f/ee/7732fd9874b445d0ba2c0351c349b084f096ff26032fd0ed22faccd74066/cargan-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "179d946b8d05bc1026459ed7f51fb54046f2b336ddf1561e6139e0e76dc955af",
          "md5": "4eca4adedabadc709bd7eaf1947c817d",
          "sha256": "18d7cbbe640e38332af1c0d258a4e9f1febfb773a678be97f12946e232bde85b"
        },
        "downloads": -1,
        "filename": "cargan-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4eca4adedabadc709bd7eaf1947c817d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15952,
        "upload_time": "2021-10-19T18:37:30",
        "upload_time_iso_8601": "2021-10-19T18:37:30.668889Z",
        "url": "https://files.pythonhosted.org/packages/17/9d/946b8d05bc1026459ed7f51fb54046f2b336ddf1561e6139e0e76dc955af/cargan-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "792f4227038d76c60138df33fb5af3e67fac9a2810c15504410718c45a736d54",
          "md5": "7df638e0ffd22df256065b5f68913912",
          "sha256": "32666a4b23c59e18fc4d67119742da5de342672c80410df0641f1403626807dd"
        },
        "downloads": -1,
        "filename": "cargan-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7df638e0ffd22df256065b5f68913912",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15860,
        "upload_time": "2021-10-19T18:41:26",
        "upload_time_iso_8601": "2021-10-19T18:41:26.536792Z",
        "url": "https://files.pythonhosted.org/packages/79/2f/4227038d76c60138df33fb5af3e67fac9a2810c15504410718c45a736d54/cargan-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f53be7ea1ea68b20f62efd4f03281dca3590c1be3b108db777bbd87fe314d63a",
          "md5": "efb6be899a9757dcba2f65fe3c6d4cf8",
          "sha256": "590df3cce3c8e4f7b6596423d923c45eec87dd8950e727c02fd04c59f5386c49"
        },
        "downloads": -1,
        "filename": "cargan-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "efb6be899a9757dcba2f65fe3c6d4cf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15898,
        "upload_time": "2021-10-19T18:41:28",
        "upload_time_iso_8601": "2021-10-19T18:41:28.197612Z",
        "url": "https://files.pythonhosted.org/packages/f5/3b/e7ea1ea68b20f62efd4f03281dca3590c1be3b108db777bbd87fe314d63a/cargan-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b475437ffa4d78775ebdce62577e4245a24eed5918bfba28f2b4de6fdb3ed7e",
          "md5": "2f4d50603c0d9e15e1ff600e3b04354f",
          "sha256": "8354e46c900d6c4eff8e1892c179d991b9f5ba90affdc6af305b0029178c2e89"
        },
        "downloads": -1,
        "filename": "cargan-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f4d50603c0d9e15e1ff600e3b04354f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37933,
        "upload_time": "2021-10-20T16:33:59",
        "upload_time_iso_8601": "2021-10-20T16:33:59.626997Z",
        "url": "https://files.pythonhosted.org/packages/6b/47/5437ffa4d78775ebdce62577e4245a24eed5918bfba28f2b4de6fdb3ed7e/cargan-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9171360e41025e7473ed5a123b1b5e5b1aeaae80fe670f51203467e3ee8a1833",
          "md5": "c19586ee17041810e6f91c745bf3a0e7",
          "sha256": "c2b6b6add994212e384e48ba7094226daf04a27c9aea2370ade52639c3e3a361"
        },
        "downloads": -1,
        "filename": "cargan-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c19586ee17041810e6f91c745bf3a0e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30493,
        "upload_time": "2021-10-20T16:34:01",
        "upload_time_iso_8601": "2021-10-20T16:34:01.129840Z",
        "url": "https://files.pythonhosted.org/packages/91/71/360e41025e7473ed5a123b1b5e5b1aeaae80fe670f51203467e3ee8a1833/cargan-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8ca28661812a98aa7e67585fa6f5c21555d30768cedac0b4b2ed7f02542ef5d",
          "md5": "b6488b742c8c900a592bb8592f59c611",
          "sha256": "932b4dcd84e9527771cf8ab84d604b9d70421bba099c88df224128881cfb7e7d"
        },
        "downloads": -1,
        "filename": "cargan-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6488b742c8c900a592bb8592f59c611",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 96270803,
        "upload_time": "2021-10-20T17:28:39",
        "upload_time_iso_8601": "2021-10-20T17:28:39.908889Z",
        "url": "https://files.pythonhosted.org/packages/b8/ca/28661812a98aa7e67585fa6f5c21555d30768cedac0b4b2ed7f02542ef5d/cargan-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51ad2a730b0f83388d3cfec9f3ef927847285bdca647a3e4b064c76cbd694a23",
          "md5": "28410e1402ee086aa3568c2ae88fd2ce",
          "sha256": "13e9ebf760004ac5fd354c58f2276f4f7a2a7cf4174cdde3f51dde256e11fc7f"
        },
        "downloads": -1,
        "filename": "cargan-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "28410e1402ee086aa3568c2ae88fd2ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 96256757,
        "upload_time": "2021-10-20T17:29:31",
        "upload_time_iso_8601": "2021-10-20T17:29:31.622989Z",
        "url": "https://files.pythonhosted.org/packages/51/ad/2a730b0f83388d3cfec9f3ef927847285bdca647a3e4b064c76cbd694a23/cargan-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8ca28661812a98aa7e67585fa6f5c21555d30768cedac0b4b2ed7f02542ef5d",
        "md5": "b6488b742c8c900a592bb8592f59c611",
        "sha256": "932b4dcd84e9527771cf8ab84d604b9d70421bba099c88df224128881cfb7e7d"
      },
      "downloads": -1,
      "filename": "cargan-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b6488b742c8c900a592bb8592f59c611",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 96270803,
      "upload_time": "2021-10-20T17:28:39",
      "upload_time_iso_8601": "2021-10-20T17:28:39.908889Z",
      "url": "https://files.pythonhosted.org/packages/b8/ca/28661812a98aa7e67585fa6f5c21555d30768cedac0b4b2ed7f02542ef5d/cargan-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51ad2a730b0f83388d3cfec9f3ef927847285bdca647a3e4b064c76cbd694a23",
        "md5": "28410e1402ee086aa3568c2ae88fd2ce",
        "sha256": "13e9ebf760004ac5fd354c58f2276f4f7a2a7cf4174cdde3f51dde256e11fc7f"
      },
      "downloads": -1,
      "filename": "cargan-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "28410e1402ee086aa3568c2ae88fd2ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 96256757,
      "upload_time": "2021-10-20T17:29:31",
      "upload_time_iso_8601": "2021-10-20T17:29:31.622989Z",
      "url": "https://files.pythonhosted.org/packages/51/ad/2a730b0f83388d3cfec9f3ef927847285bdca647a3e4b064c76cbd694a23/cargan-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}