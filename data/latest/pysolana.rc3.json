{
  "info": {
    "author": "Sedov Daniel",
    "author_email": "danielsedovzzz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PySolana\n\nPySolana is a Python library for dealing with Solana blockchain.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install pysolana.\n\n```bash\npip3 install pysolana\n```\n\n## Usage\n\nThere are 2 modules in `pysolana`:\n\n * `api` includes all RPC API Solana methods.\n * `sol` includes class `Sol` that used to simply manage Solana accounts with `Python3`\n\n### api\n\nYou can see all RPC API Solana methods [here](https://docs.solana.com/apps/jsonrpc-api#json-rpc-api-reference). Every method from RPC API writen to function in `api` module.\n\nExample:\n```python\nfrom pysolana.api import *\n\nprint(getTransactionCount()) # 555309062\n```\n\n### sol\n\n#### Keypairs\n\nTo generate new keypair you need to create `Sol` object in code.\n```python\nfrom pysolana.sol import *\n\nkeypair = Sol(chain='devnet')\nprint(keypair.seedphrase) # 12-words seedphrase that used to import keypair\nprint(keypair.pubkey) # Solana account address\n```\n\nTo import keypair put seedphrase in `__init__` method.\n```python\nfrom pysolana.sol import *\n\nkp1 = Sol(chain='devnet')\nkp2 = Sol(seedphrase=kp1.seedphrase, chain='testnet')\nprint(kp1.pubkey == kp2.pubkey) # True\n```\n\nOne keypair can be used in different chains.\n\nThere are some methods in `Sol` class:\n * [set_chain](#set_chain)\n * [balance](#balance)\n * [airdrop](#airdrop)\n * [transfer](#transfer)\n * [create_stake_account](#create_stake_account)\n * [delegate_stake](#delegate_stake)\n * [deactivate_stake](#deactivate_stake)\n * [withdraw_stake](#withdraw_stake)\n\n#### set_chain\n`set_chain(chain)` method used to change keypair chain.\n```python\nfrom pysolana.sol import *\n\nkp = Sol(chain='mainnet') # Created keypair\n\nkp.balance() # Check balance in mainnet\nkp.set_chain('testnet') # Set chain to testnet\nkp.balance() # Check balance in testnet\n```\n\n#### balance\n`balance()` method used to get balance of account.\n```python\nfrom pysolana.sol import *\n\nkp = Sol(seedphrase=my_seedphrase, chain='mainnet') # Created keypair\n\nprint(kp.balance()) # 15.0\n```\n\n#### airdrop\n`aidrop(amount, wait=True)` method used to request airdrop of SOL tokens in devnet.\n```python\nfrom pysolana.sol import *\n\nkp = Sol(chain='devnet') # Created keypair\n\nprint(kp.balance()) # 0.0\nkp.airdrop(100) # Request airdrop to account in devnet.\nprint(kp.balance()) # 100.0\n\nkp.airdrop(100, wait=False)\n# Here I can do anything without waiting transaction to confirm\nprint(kp.balance()) # 100.0\n# Transaction is not confirmed in chain and balance() showing only confirmed balance.\n```\n\n#### transfer\n`transfer(to, amount, wait=True)` method used to send SOL tokens to another account.\n```python\nfrom pysolana.sol import *\n\nkp1 = Sol(chain='devnet') # Created first keypair\nkp2 = Sol(chain='devnet') # Created second keypair\n\nkp1.airdrop(100)\nkp2.airdrop(100)\n\nprint(kp1.balance()) # 100.0\nprint(kp2.balance()) # 100.0\n\nkp1.transfer(kp2, 10) # 'to' can be Sol object or str pubkey\n\nprint(kp1.balance()) # 89.999995\nprint(kp2.balance()) # 110.0\n\nkp2.transfer(kp1.pubkey, 10)\n\nprint(kp1.balance()) # 99.999995\nprint(kp2.balance()) # 99.999995\n\nkp1.transfer(kp2, 50, wait=False)\n# Here I can do anything without waiting transaction to confirm\nprint(kp1.balance()) # 99.999995\nprint(kp2.balance()) # 99.999995\n# Transaction is not confirmed in chain and balance() showing only confirmed balance.\n```\n\n#### create_stake_account\n`create_stake_account(amount)` method used to create new stake account.\n```python\nfrom pysolana.sol import *\n\nkp = Sol(chain='devnet') # Create new keypair\nkp.airdrop(200)\n\nstake_account = kp.create_stake_account(100) # Creating new stake account\nprint(stake_account) # Dhyi75k1aA4Rfn99gh4XCT64yxvGzCpu81ZE4iDe3RZz\nprint(kp.balance()) # 99.99999\n```\n\n#### delegate_stake\n`delegate_stake(stake_account, vote_account)` method used to delegate stake at account `stake_account` for validator `vote_account`.\n```python\nfrom pysolana.sol import *\n\nkp = Sol(chain='devnet') # Create new keypair\nkp.airdrop(1000)\n\nstake_account = kp.create_stake_account(100) # Creating new stake account\n\nkp.delegate_stake(stake_account, '5MMCR4NbTZqjthjLGywmeT66iwE9J9f7kjtxzJjwfUx2') # Delegating ALL stake to validator\n```\n\n#### deactivate_stake\n`deactivate_stake(stake_account)` method used to deactivate stake from `stake_account`\n```python\nfrom pysolana.sol import *\n\nkp = Sol(chain='devnet') # Create new keypair\nkp.airdrop(1000)\n\nstake_account = kp.create_stake_account(100) # Creating new stake account with 100 SOL staked\n\nkp.delegate_stake(stake_account, '5MMCR4NbTZqjthjLGywmeT66iwE9J9f7kjtxzJjwfUx2') # Delegating ALL stake to validator\n\nprint(kp.balance()) # 899.999985\nkp.deactivate_stake(stake_account) # Deactivating ALL stake from stake_account\n# Stake transactions take some time to proceed in blockchain, so you need to wait until your SOL tokens back to account\n\n# Some time later:\nprint(kp.balance()) # 999.99998\n```\n\n#### withdraw_stake\n`withdraw_stake(stake_account, amount)` method used to withdraw stake dividends from `stake_account`\n```python\nfrom pysolana.sol import *\n\nkp = Sol(chain='devnet') # Create new keypair\nkp.airdrop(1000)\n\nstake_account = kp.create_stake_account(100) # Creating new stake account with 100 SOL staked\n\nkp.delegate_stake(stake_account, '5MMCR4NbTZqjthjLGywmeT66iwE9J9f7kjtxzJjwfUx2') # Delegating ALL stake to validator\n\nprint(kp.balance()) # 899.999985\n\n# Some time later:\nkp.withdraw_stake(stake_account, 3)\nprint(kp.balance()) # 902.99998\n```\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Gusarich/pysolana",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysolana",
    "package_url": "https://pypi.org/project/pysolana/",
    "platform": "",
    "project_url": "https://pypi.org/project/pysolana/",
    "project_urls": {
      "Homepage": "https://github.com/Gusarich/pysolana"
    },
    "release_url": "https://pypi.org/project/pysolana/0.2.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python Solana Package",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7226060,
  "releases": {
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9bec8761af8770d286a91f76e3664f2faaa5a66a44ace89128f0feb8387a6c7",
          "md5": "f686238000ad36a83ee384b4e04121c6",
          "sha256": "c0bc1336cbc5ddbae1bb652a007b06d802203504fd948cf57841fcd770795d15"
        },
        "downloads": -1,
        "filename": "pysolana-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "f686238000ad36a83ee384b4e04121c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4252,
        "upload_time": "2020-05-12T09:39:26",
        "upload_time_iso_8601": "2020-05-12T09:39:26.954877Z",
        "url": "https://files.pythonhosted.org/packages/b9/be/c8761af8770d286a91f76e3664f2faaa5a66a44ace89128f0feb8387a6c7/pysolana-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d6be390e53212b51c9b89a13fba83cfb365a261041cf34b7a640d2c85f49d9c",
          "md5": "077c1aca49a03919af7a5820309b8cbd",
          "sha256": "08d492e8dee239d42cc56b3535f716123c3505bfae002edbd66af2b7c2b4016b"
        },
        "downloads": -1,
        "filename": "pysolana-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "077c1aca49a03919af7a5820309b8cbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5943,
        "upload_time": "2020-05-12T18:44:45",
        "upload_time_iso_8601": "2020-05-12T18:44:45.670549Z",
        "url": "https://files.pythonhosted.org/packages/7d/6b/e390e53212b51c9b89a13fba83cfb365a261041cf34b7a640d2c85f49d9c/pysolana-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5db07e973deb0a9624646eec9502030f72c6d83efe4f8e023026f1c1eb81878e",
          "md5": "7a70aaa601efad641d2e406d74f5aaf1",
          "sha256": "5330ff999e07ed4e934484a02e89be33c870aa8df8f2c340e591b175cdee26a9"
        },
        "downloads": -1,
        "filename": "pysolana-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7a70aaa601efad641d2e406d74f5aaf1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5876,
        "upload_time": "2020-05-12T18:54:22",
        "upload_time_iso_8601": "2020-05-12T18:54:22.598005Z",
        "url": "https://files.pythonhosted.org/packages/5d/b0/7e973deb0a9624646eec9502030f72c6d83efe4f8e023026f1c1eb81878e/pysolana-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5db07e973deb0a9624646eec9502030f72c6d83efe4f8e023026f1c1eb81878e",
        "md5": "7a70aaa601efad641d2e406d74f5aaf1",
        "sha256": "5330ff999e07ed4e934484a02e89be33c870aa8df8f2c340e591b175cdee26a9"
      },
      "downloads": -1,
      "filename": "pysolana-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7a70aaa601efad641d2e406d74f5aaf1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5876,
      "upload_time": "2020-05-12T18:54:22",
      "upload_time_iso_8601": "2020-05-12T18:54:22.598005Z",
      "url": "https://files.pythonhosted.org/packages/5d/b0/7e973deb0a9624646eec9502030f72c6d83efe4f8e023026f1c1eb81878e/pysolana-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}