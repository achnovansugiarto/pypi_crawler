{
  "info": {
    "author": "Patrick Reiser",
    "author_email": "patrick.reiser@kit.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[![Documentation Status](https://readthedocs.org/projects/pynnsmd/badge/?version=latest)](https://pynnsmd.readthedocs.io/en/latest/?badge=latest)\n![PyPI](https://img.shields.io/pypi/v/pyNNsMD)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/pyNNsMD)\n![GitHub release (latest by date)](https://img.shields.io/github/v/release/aimat-lab/NNsForMD)\n\n# NNsForMD\n\nNeural network class for molecular dynamics to predict potential energy, gradients and non-adiabatic couplings (NACs).\n\n# Table of Contents\n* [General](#general)\n* [Installation](#installation)\n* [Documentation](#documentation)\n* [Usage](#usage)\n* [Examples](#examples)\n* [Citing](#citing)\n* [References](#references)\n\n<a name=\"general\"></a>\n# General\nThis repo is currently under construction. The original version used as the PyRAI2MD interface is v1.0.0.\n\n\n\n<a name=\"installation\"></a>\n# Installation\n\nClone repository https://github.com/aimat-lab/NNsForMD and install for example with editable mode:\n\n```bash\npip install -e ./pyNNsMD\n```\nor latest release via Python Package Index.\n\n```bash\npip install pyNNsMD\n```\n\n<a name=\"documentation\"></a>\n# Documentation\n\nAuto-documentation generated at https://pynnsmd.readthedocs.io/en/latest/index.html\n\n<a name=\"usage\"></a>\n# Usage\n\n#### Ensemble\nThe main class ``pyNNsMD.NNsMD.NeuralNetEnsemble`` holds a list of keras models and custom scaler classes to transform or standardize input/output.\nConstruction of ``NeuralNetEnsemble`` requires a filepath and the number of model instances to keep.\n\n```python\nfrom pyNNsMD.NNsMD import NeuralNetEnsemble\nnn = NeuralNetEnsemble(\"TestEnergy/\", 2)\n```\n\nAdding the models and scaler classes to ``NeuralNetEnsemble`` via `create`. \nCustom classes can be added to the modules in ``pyNNsMD.models`` and ``pyNNsMD.scalers``, \nbut which must implement proper config and weight handling. \nNote that data format between model and scaler must be compatible.\nInstead of class instances a deserialization via keras config-dictionaries is supported for `create()`.\n\n```python\nfrom pyNNsMD.models.mlp_e import EnergyModel\nfrom pyNNsMD.scaler.energy import EnergyStandardScaler\n\nnn.create(models=[EnergyModel(atoms=12, states=2), EnergyModel(atoms=12, states=2)],\n          scalers=[EnergyStandardScaler(), EnergyStandardScaler()])\n```\n\nThe models and scaler must be saved to disk to prepare for training, which includes config and weights.\n\n```python\nnn.save()\n```\n\n#### Data\n\nThe data is stored to the directory specified in ``NeuralNetEnsemble``.\nData format passed to ``NeuralNetEnsemble.data()`` must be nested python-only lists.\nThe geometries are stored as `.xyz` and everything else as `.json`. \nNote that the training scripts must be compatible with the data format.\n\n```python\natoms = [[\"C\", \"C\"]]\ngeos = [[[0.147, 0.024, -0.680], [-0.165, -0.037, 0.652]]]\nenergy = [[-20386.37, -20383.93]]\n\nnn.data(atoms=atoms, geometries=geos, energies=energy)\n# nn.data_path(\"data_dir/\") if data can't be saved in working directory.\n```\n#### Training\n\nFor training the train and test indices must also be saved to file for each model directory.\nThis can be achieved via ``train_test_split()``, \nor by directly passing an index-list for each model with ``train_test_indices()``.\nNote that the different models are sought to be trained on different splits.\n\n```python\nnn.train_test_split(dataset_size=1, n_splits=1, shuffle=True) # Usually n_splits=5 or 10\n# nn.train_test_indices(train=[np.array([0]), np.array([0])], test=[np.array([0]), np.array([0])])\n```\n\nThe hyperparameter for training are passed as `.json` to each model folder. \nSee ``pyNNsMD.hypers`` modules for example hyperparameter.\n\n```python\nnn.training([{\n    'initialize_weights': True, 'epo': 1000, 'batch_size': 64, 'epostep': 10, \n    'learning_rate': 1e-3, \"callbacks\": [], 'unit_energy': \"eV\", 'unit_gradient': \"eV/A\"\n}]*2, fit_mode=\"training\")\n```\n\n#### Fitting\n\nWith `fit()` a training script is run for each model from the model's directory. \nThe training script should be stored in ``pyNNsMD.training``. \nNote that the training script must be compatible with model and data. \nThe training script must provide command line arguments 'index', 'filepath', 'gpus' and 'mode'.\nThe training can be distributed on multiple or a single gpu (for small networks).\n\n```python\nfit_error = nn.fit([\"training_mlp_e\"]*2, fit_mode=\"training\", \n                   gpu_dist=[0, 0], proc_async=True)\nprint(fit_error)\n```\n\n#### Loading\n\nAfter fitting the model can be recreated from config and the weights loaded from file with ``load()``.\n\n```python\nnn.load()\n```\n\n#### Prediction\n\nThe model's prediction can be obtained from the corresponding input data via `predict()` and ``call()``.\nThe both input and output is rescaled by the scaler to match the model standardized input and output.\nFurthermore, the subclassed model should implement ``call_to_tensor_input`` and ``call_to_numpy_output`` or optionally\n`predict_to_tensor_input` and `predict_to_numpy_output`, \nif the model requires a specific tensor input as in `call()` and the scaler class usually works on numpy data. \n\n```python\ntest = nn.predict(geos)\n# test_batch = nn.call(geos[:32])  # Faster than predict.\n```\n\n<a name=\"examples\"></a>\n# Examples\n\nA set of examples can be found in [examples](examples), that demonstrate usage and typical tasks for projects.\n\n<a name=\"citing\"></a>\n# Citing\n\nIf you want to cite this repository or the PyRAI2MD code, please refer to our publication at:\n```\n@Article{JingbaiLi2021,\n    author =\"Li, Jingbai and Reiser, Patrick and Boswell, Benjamin R. and Eberhard, AndrÃ© and Burns, Noah Z. and Friederich, Pascal and Lopez, Steven A.\",\n    title  =\"Automatic discovery of photoisomerization mechanisms with nanosecond machine learning photodynamics simulations\",\n    journal  =\"Chem. Sci.\",\n    year  =\"2021\",\n    pages  =\"-\",\n    publisher  =\"The Royal Society of Chemistry\",\n    doi  =\"10.1039/D0SC05610C\",\n    url  =\"http://dx.doi.org/10.1039/D0SC05610C\"\n}\n```\n\n<a name=\"references\"></a>\n# References\n\n* https://onlinelibrary.wiley.com/doi/full/10.1002/qua.24890\n* https://pubs.acs.org/doi/abs/10.1021/acs.chemrev.0c00749\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "materials,science,machine,learning,deep,dynamics,molecular,potential",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyNNsMD",
    "package_url": "https://pypi.org/project/pyNNsMD/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyNNsMD/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyNNsMD/2.0.0/",
    "requires_dist": [
      "numpy",
      "scikit-learn",
      "matplotlib",
      "kgcnn",
      "tensorflow (>=2.3.0) ; extra == 'tf'",
      "tensorflow-gpu (>=2.3.0) ; extra == 'tf_gpu'"
    ],
    "requires_python": "",
    "summary": "Neural Network for learning potential energy surface for molecular dynamics.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13491165,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "069a3e894ada2a4876d4a723e07bca4745079dc4f65bb903c497356972f3f8fc",
          "md5": "c6bf249f0b9c34e095bd6257a2c71bb0",
          "sha256": "a9f6110446a916caa112830b0769a7aac7e54aa5028989ea8f5b84a7df7b9a52"
        },
        "downloads": -1,
        "filename": "pyNNsMD-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6bf249f0b9c34e095bd6257a2c71bb0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70034,
        "upload_time": "2021-03-21T12:18:50",
        "upload_time_iso_8601": "2021-03-21T12:18:50.378677Z",
        "url": "https://files.pythonhosted.org/packages/06/9a/3e894ada2a4876d4a723e07bca4745079dc4f65bb903c497356972f3f8fc/pyNNsMD-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f71db7257f55896adedd84f1a724fcd5a92477655e0d36d0faa88ce34e7bc311",
          "md5": "4c2355814fd87e5e471b77f7ee586e32",
          "sha256": "f0f073b1a0b1bf31d3dd7a35d7c8eef6165874d0a49567ee7c068c66f99645cc"
        },
        "downloads": -1,
        "filename": "pyNNsMD-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4c2355814fd87e5e471b77f7ee586e32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38148,
        "upload_time": "2021-03-21T12:18:51",
        "upload_time_iso_8601": "2021-03-21T12:18:51.865276Z",
        "url": "https://files.pythonhosted.org/packages/f7/1d/b7257f55896adedd84f1a724fcd5a92477655e0d36d0faa88ce34e7bc311/pyNNsMD-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df798cb06e6e851d237a447eec0ff9d8b238828621d224708b23afb443cd7a02",
          "md5": "32af50bdedeb1f67d15073990a5e5bd7",
          "sha256": "a53c39709b0266c654645e574c51851371731173f1a0b62d1efa47f565bd4aca"
        },
        "downloads": -1,
        "filename": "pyNNsMD-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32af50bdedeb1f67d15073990a5e5bd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72802,
        "upload_time": "2022-04-12T15:01:54",
        "upload_time_iso_8601": "2022-04-12T15:01:54.961661Z",
        "url": "https://files.pythonhosted.org/packages/df/79/8cb06e6e851d237a447eec0ff9d8b238828621d224708b23afb443cd7a02/pyNNsMD-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8401825ac83e7f97f58693fdc3249b42a8bb32dd9a6f49484c286a7c68c1ddd5",
          "md5": "7eef0fa19586554344db623f1a62b717",
          "sha256": "b2748e0bee8d32deec42b092ec2defe00697779a42af3d4fed05b953bbb2cfc1"
        },
        "downloads": -1,
        "filename": "pyNNsMD-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7eef0fa19586554344db623f1a62b717",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41321,
        "upload_time": "2022-04-12T15:01:58",
        "upload_time_iso_8601": "2022-04-12T15:01:58.104888Z",
        "url": "https://files.pythonhosted.org/packages/84/01/825ac83e7f97f58693fdc3249b42a8bb32dd9a6f49484c286a7c68c1ddd5/pyNNsMD-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97464ef2811c30308ab8ab45bafd421f92154b7230d2f8b4f02e4fda5b010439",
          "md5": "4f44554151ea8fc8289b6710baeba3a4",
          "sha256": "9763c0caac7e6ad55ba3a616ac566b13e3e6b9a8adb1e06eecd77737a2644a97"
        },
        "downloads": -1,
        "filename": "pyNNsMD-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f44554151ea8fc8289b6710baeba3a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 73737,
        "upload_time": "2022-04-12T15:11:58",
        "upload_time_iso_8601": "2022-04-12T15:11:58.668599Z",
        "url": "https://files.pythonhosted.org/packages/97/46/4ef2811c30308ab8ab45bafd421f92154b7230d2f8b4f02e4fda5b010439/pyNNsMD-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "395a659c484aaf0546fcd7b3b9ef48a5d40ebac9e2fccbaf5c1e876aec84d14a",
          "md5": "7aacc8594e98ce74236bf900afc2a842",
          "sha256": "7ebec129f224720c3739cb6a8314dea41e6b5d6104231c3ba3663e557d307218"
        },
        "downloads": -1,
        "filename": "pyNNsMD-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7aacc8594e98ce74236bf900afc2a842",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43845,
        "upload_time": "2022-04-12T15:12:00",
        "upload_time_iso_8601": "2022-04-12T15:12:00.402272Z",
        "url": "https://files.pythonhosted.org/packages/39/5a/659c484aaf0546fcd7b3b9ef48a5d40ebac9e2fccbaf5c1e876aec84d14a/pyNNsMD-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97464ef2811c30308ab8ab45bafd421f92154b7230d2f8b4f02e4fda5b010439",
        "md5": "4f44554151ea8fc8289b6710baeba3a4",
        "sha256": "9763c0caac7e6ad55ba3a616ac566b13e3e6b9a8adb1e06eecd77737a2644a97"
      },
      "downloads": -1,
      "filename": "pyNNsMD-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4f44554151ea8fc8289b6710baeba3a4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 73737,
      "upload_time": "2022-04-12T15:11:58",
      "upload_time_iso_8601": "2022-04-12T15:11:58.668599Z",
      "url": "https://files.pythonhosted.org/packages/97/46/4ef2811c30308ab8ab45bafd421f92154b7230d2f8b4f02e4fda5b010439/pyNNsMD-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "395a659c484aaf0546fcd7b3b9ef48a5d40ebac9e2fccbaf5c1e876aec84d14a",
        "md5": "7aacc8594e98ce74236bf900afc2a842",
        "sha256": "7ebec129f224720c3739cb6a8314dea41e6b5d6104231c3ba3663e557d307218"
      },
      "downloads": -1,
      "filename": "pyNNsMD-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7aacc8594e98ce74236bf900afc2a842",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 43845,
      "upload_time": "2022-04-12T15:12:00",
      "upload_time_iso_8601": "2022-04-12T15:12:00.402272Z",
      "url": "https://files.pythonhosted.org/packages/39/5a/659c484aaf0546fcd7b3b9ef48a5d40ebac9e2fccbaf5c1e876aec84d14a/pyNNsMD-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}