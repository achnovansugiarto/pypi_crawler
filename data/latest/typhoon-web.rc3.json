{
  "info": {
    "author": "WeiJi Hsiao",
    "author_email": "weiji.hsiao@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "```\n================================================\n    _____            _ \n   |_   _|   _ _ __ | |__  based on Tornado\n     | || | | | '_ \\| '_ \\ / _ \\ / _ \\| '_ \\ \n     | || |_| | |_) | | | | (_) | (_) | | | |\n     |_| \\__, | .__/|_| |_|\\___/ \\___/|_| |_|\n         |___/|_|\n================================================\n```\n\nTyphoon is a wrapper around the [Tornado](https://www.tornadoweb.org/en/stable/) web framework. It offers the ability to attach log records with a trace id, which is used to trace individual HTTP requests. By default Typhoon obtains trace id from the request's header `X-TRACEID`. To change this behavior, subclass `typhoon.web.Application` and overwrite the `get_trace_id` method.\n\n## Requirements\n- tornado >= 5.1\n  \n## Installation\n- Use pip:\n  ```\n  pip install typhoon-web\n  pip install typhoon-web --upgrade\n  ```\n- Clone repository and install with:\n  ```\n  python setup.py install\n  ```\n\n## Hello, world\n\nHere is a simple “Hello, world” example web app for Typhoon:\n```python\nimport logging\nimport time\n\nimport tornado.ioloop\nimport typhoon.web\nimport typhoon.log\n\nclass MainHandler(typhoon.web.RequestHandler):\n    @typhoon.web.run_in_executor\n    def process(self):\n        logging.info('go to sleep')\n        time.sleep(3)\n        logging.info('wake up')\n        return 'Hello, world'\n\n    async def get(self):\n        result = await self.process()\n        self.write(result)\n    \n    # Native coroutine (using async def and await) was introduced in Python 3.5.\n    # For previous version, use generator-based coroutine. \n    # For example:\n    #\n    # @tornado.gen.coroutine\n    # def get(self):\n    #     result = yield self.process()\n    #     self.write(result)\n\ndef make_app():\n    return typhoon.web.Application([\n        (r'/', MainHandler),\n    ])\n\nif __name__ == '__main__':\n    typhoon.log.configure(log_path='/home/logs')\n    app = make_app()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n```\nIn this example, three different log files will be generated in the log_path:\n- **access.log** records summaries of each http request.\n- **stats.log** records messages for statistics and analysis.\n- **app.log** contains all logs that are neither access logs nor stats logs.\n\nTo log to stats.log, use an instance of `typhoon.log.StatsLogger`:\n```python\nimport typhoon.log\n\nstats_log = typhoon.log.StatsLogger()\n\nstats_log.info({'user_count': 100})\nstats_log.info({'job_register': 20}, topic='register')\n```\nNotice that logging methods of `StatsLogger` only accept a `dict` object as message.\n\n## Trace id\nBy default trace id is automatically obtained and handled by Typhoon only when the client sends a request with a header `X-TRACEID: some-value`:\n```bash\n$ curl -H \"X-TRACEID: ceon1haa6cau1dung1\" http://127.0.0.1:8888\n```\n\nTo customize the way trace id is passed, subclass `typhoon.web.Application` and overwrite the `get_trace_id` method.\n```python\nimport typhoon.web\n\nclass MyApplication(typhoon.web.Application):\n    def get_trace_id(self, handler):\n        # obtain trace id from URL Parameter.\n        return handler.get_argument('traceId', '-')\n```\nIn the above example, trace id is passed through an URL parameter:\n```bash\n$ curl http://127.0.0.1:8888?traceId=ceon1haa6cau1dung1\n```\n\nYou may have to call another service and pass down the trace id. In this case, use `typhoon.log.TRACE_ID()` to obtain current trace id:\n```python\nimport requests\nimport typhoon.web\nimport typhoon.log\n\nclass MainHandler(typhoon.web.RequestHandler):\n    @typhoon.web.run_in_executor\n    def process(self):\n        # call another service and pass down current trace id.\n        r = request.get('http://127.0.0.1:9990/hello', header={'X-TRACEID': typhoon.log.TRACE_ID()})\n        if r.status_code == 200:\n            return 'Hello, world'\n        else:\n            return 'oops!'\n\n    async def get(self):\n        result = await self.process()\n        self.write(result)\n```\n\n## <font color='green'>**[new]**</font> High-Level API\nFor those who are not familiar with Tornado, Typhoon provides high-level api since v1.0.2. \n\nNeither `RequestHandler`, nor `Application`. Just subclass `typhoon.rest.RestControler`, and decorated method with `typhoon.rest.route` decorator.\n\nHere is a “Hello, world” example.\n```python\nfrom typhoon.rest import RestController, RestResult, route, start_server\nfrom typhoon.status import OK\n\nclass Controller(RestController):\n    @route(uri=r'/hello', method='get')\n    def greet(self, user=None):\n        if user is not None:\n            content = f'Hello, {user}'\n        else:\n            content = 'Hello, world'\n        return RestResult(status=OK, content=content)\n\nif __name__ == '__main__':\n    start_server(\n        controller = Controller(),\n        port=8888\n    )\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WeiJiHsiao/typhoon",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "typhoon-web",
    "package_url": "https://pypi.org/project/typhoon-web/",
    "platform": "",
    "project_url": "https://pypi.org/project/typhoon-web/",
    "project_urls": {
      "Homepage": "https://github.com/WeiJiHsiao/typhoon"
    },
    "release_url": "https://pypi.org/project/typhoon-web/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A wrapper around the Tornado web framework that supports logs with traceId.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8035092,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "705e66f5170f8f5fb23d694a1610db71ddde7a9ab4e87e0a07325466b26b13d6",
          "md5": "b93527e375920cf581c63e24b12fb430",
          "sha256": "120477f15ceb8f99c53e8c264b0319b4f8427941493ca2ca1557370ea9f6db32"
        },
        "downloads": -1,
        "filename": "typhoon-web-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b93527e375920cf581c63e24b12fb430",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6653,
        "upload_time": "2019-09-25T03:35:29",
        "upload_time_iso_8601": "2019-09-25T03:35:29.975111Z",
        "url": "https://files.pythonhosted.org/packages/70/5e/66f5170f8f5fb23d694a1610db71ddde7a9ab4e87e0a07325466b26b13d6/typhoon-web-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2ff28e3a9203495e3d4112b1e49ca533dd9aed91b7f0eb6477ba208a0d31aaa",
          "md5": "fc76750676ed673159a5406151f57cd6",
          "sha256": "31576f6f8b9b4261b8a8f5f7dd4f22c53870cff42af18c4bd38a22329cd12163"
        },
        "downloads": -1,
        "filename": "typhoon-web-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fc76750676ed673159a5406151f57cd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11958,
        "upload_time": "2020-07-27T11:49:47",
        "upload_time_iso_8601": "2020-07-27T11:49:47.678778Z",
        "url": "https://files.pythonhosted.org/packages/f2/ff/28e3a9203495e3d4112b1e49ca533dd9aed91b7f0eb6477ba208a0d31aaa/typhoon-web-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6afbfce3b45e031194485cd7044d5b08dd6ec35ffe8ae3ff92ba8f7fc1df88b",
          "md5": "94081a123198af676f9f5bc9372dd331",
          "sha256": "16d1c3bee9af56ae402c6a7925464ae7aa86f3e3d39a7cae0eb2cdc851319a38"
        },
        "downloads": -1,
        "filename": "typhoon-web-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "94081a123198af676f9f5bc9372dd331",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13736,
        "upload_time": "2020-08-25T12:27:13",
        "upload_time_iso_8601": "2020-08-25T12:27:13.226425Z",
        "url": "https://files.pythonhosted.org/packages/d6/af/bfce3b45e031194485cd7044d5b08dd6ec35ffe8ae3ff92ba8f7fc1df88b/typhoon-web-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6afbfce3b45e031194485cd7044d5b08dd6ec35ffe8ae3ff92ba8f7fc1df88b",
        "md5": "94081a123198af676f9f5bc9372dd331",
        "sha256": "16d1c3bee9af56ae402c6a7925464ae7aa86f3e3d39a7cae0eb2cdc851319a38"
      },
      "downloads": -1,
      "filename": "typhoon-web-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "94081a123198af676f9f5bc9372dd331",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13736,
      "upload_time": "2020-08-25T12:27:13",
      "upload_time_iso_8601": "2020-08-25T12:27:13.226425Z",
      "url": "https://files.pythonhosted.org/packages/d6/af/bfce3b45e031194485cd7044d5b08dd6ec35ffe8ae3ff92ba8f7fc1df88b/typhoon-web-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}