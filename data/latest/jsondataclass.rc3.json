{
  "info": {
    "author": "Aleksey Shulga",
    "author_email": "oleksii.shulga@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=============\njsondataclass\n=============\n\n.. start-badges\n\n.. image:: https://badgen.net/pypi/v/jsondataclass\n    :target: https://pypi.org/project/jsondataclass/\n    :alt: Latest version\n\n.. image:: https://travis-ci.org/tushkanin/jsondataclass.svg?branch=develop\n    :target: https://travis-ci.org/tushkanin/jsondataclass\n\n.. image:: https://badgen.net/badge/code%20style/black/000\n    :target: https://github.com/ambv/black\n    :alt: code style: black\n\n.. end-badges\n\n**jsondataclass** is a library that makes it easy for you to convert of dataclasses (`PEP 557`_) to and from JSON.\n\n.. _`PEP 557`: https://www.python.org/dev/peps/pep-0557/\n\nInstallation\n------------\n\n``pip3 install jsondataclass``\n\nRequirements\n------------\n\n* python>=3.7\n\nQuick start\n-----------\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from jsondataclass import to_json, from_json\n\n\n    @dataclass\n    class Movie:\n        name: str\n        year: int\n        county: str\n\n\n    movie = Movie(\"Terminator: Dark Fate\", 2019, \"USA\")\n    print(to_json(movie))\n    # {\"name\": \"Terminator: Dark Fate\", \"year\": 2019, \"county\": \"USA\"}\n\n    json_str = '{\"name\": \"Terminator: Dark Fate\", \"year\": 2019, \"county\": \"USA\"}'\n    print(from_json(json_str, Movie))\n    # Movie(name='Terminator: Dark Fate', year=2019, county='USA')\n\nSupported types\n---------------\n\n* str, int, bool, dict, list, tuple\n\n* nested dataclasses\n\n* typing.List\n\n* typing.Tuple\n\n* typing.Dict\n\n* typing.Optional\n\n* typing.Union\n\n* typing.Literal (python >= 3.8 required)\n\n* datetime.datetime\n\n* datetime.date\n\n* datetime.time\n\n* timestamp\n\n* Enum\n\n* Decimal\n\nUsage\n-----\n\nThe primary functions to use are ``from_json`` and ``to_json``. There is also a class ``DataClassMapper`` with methods ``from_json`` and ``to_json`` available that can be used to configure conversion operations.\n\nThe ``DataClassMapper`` instance does not maintain any state while invoking Json operations. So, you are free to reuse the same object for multiple Json serialization and deserialization operations.\n\nDataclass to JSON\n=========================\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from jsondataclass import to_json, DataClassMapper\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n\n\n    user = User(1, \"John Doe\")\n\n    mapper = DataClassMapper()\n    json_str = mapper.to_json(user)\n    print(json_str)\n    # {\"id\": 1, \"name\": \"John Doe\"}\n\n    # or\n    json_str = to_json(user)\n    print(json_str)\n    # {\"id\": 1, \"name\": \"John Doe\"}\n\nDataclass from JSON\n===================\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from jsondataclass import from_json, DataClassMapper\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n\n\n    json_str = '{\"id\": 1, \"name\": \"John Doe\"}'\n\n    mapper = DataClassMapper()\n    user = mapper.from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe')\n\n    # or\n    user = from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe')\n\nDataclass to dict\n=================\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from jsondataclass import to_dict, DataClassMapper\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n\n\n    user = User(1, \"John Doe\")\n\n    mapper = DataClassMapper()\n    dict_obj = mapper.to_dict(user)\n    print(dict_obj)\n    # {'id': 1, 'name': 'John Doe'}\n\n    # or\n    dict_obj = to_dict(user)\n    print(dict_obj)\n    # {'id': 1, 'name': 'John Doe'}\n\nDataclass from dict\n===================\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from jsondataclass import to_dict, DataClassMapper\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n\n\n    user = User(1, \"John Doe\")\n\n    mapper = DataClassMapper()\n    dict_obj = mapper.to_dict(user)\n    print(dict_obj)\n    # {'id': 1, 'name': 'John Doe'}\n\n    # or\n    dict_obj = to_dict(user)\n    print(dict_obj)\n    # {'id': 1, 'name': 'John Doe'}\n\nNested dataclass\n================\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from jsondataclass import from_json, to_json\n\n\n    @dataclass\n    class ContactInfo:\n        email: str\n        phone_number: str\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n        info: ContactInfo\n\n\n    user = User(1, \"John Doe\", ContactInfo(\"john@doe.com\", \"+19999999\"))\n    print(to_json(user))\n    # {\"id\": 1, \"name\": \"John Doe\", \"info\": {\"email\": \"john@doe.com\", \"phone_number\": \"+19999999\"}}\n\n    json_str = '{\"id\": 1, \"name\": \"John Doe\", \"info\": {\"email\": \"john@doe.com\", \"phone_number\": \"+19999999\"}}'\n    print(from_json(json_str, User))\n    # User(id=1, name='John Doe', info=ContactInfo(email='john@doe.com', phone_number='+19999999'))\n\nField serialized name\n=====================\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from jsondataclass import from_json, to_json, jsonfield\n\n\n    @dataclass\n    class User:\n        id: int = jsonfield(\"Id\")\n        name: str = jsonfield(\"Name\")\n\n\n    json_str = '{\"Id\": 1, \"Name\": \"John Doe\"}'\n    user = from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe')\n\n    json_str = to_json(user)\n    print(json_str)\n    # {\"Id\": 1, \"Name\": \"John Doe\"}\n\nOptional fields\n===============\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from typing import Optional\n    from jsondataclass import from_json\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n        email: Optional[str]\n\n\n    json_str = '{\"id\": 1, \"name\": \"John Doe\"}'\n    user = from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe', email=None)\n\nUnions\n======\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from typing import Union\n    from jsondataclass import from_json, to_json\n\n\n    @dataclass\n    class User:\n        id: Union[int, str]\n        name: str\n\n\n    json_str = '{\"id\": 1, \"name\": \"John Doe\"}'\n    user = from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe')\n\n    json_str = to_json(user)\n    print(json_str)\n    # {\"id\": 1, \"name\": \"John Doe\"}\n\nGeneric collections\n===================\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from typing import List, Tuple, Dict\n    from jsondataclass import from_json, to_json\n\n\n    @dataclass\n    class Movie:\n        genres: List[str]\n        rating: Tuple[float, int]\n        name: Dict[str, str]\n\n\n    movie = Movie([\"comedy\", \"crime\"], (5.6, 100), {\"en\": \"WALL-E\", \"de\": \"WALL-E\"})\n    json_str = to_json(movie)\n    print(json_str)\n    # {\"genres\": [\"comedy\", \"crime\"], \"rating\": [5.6, 100], \"name\": {\"en\": \"WALL-E\", \"de\": \"WALL-E\"}}\n\n    json_str = '{\"genres\": [\"comedy\", \"crime\"], \"rating\": [5.6, 100], \"name\": {\"en\": \"WALL-E\", \"de\": \"WALL-E\"}}'\n    movie = from_json(json_str, Movie)\n    print(movie)\n    # Movie(genres=['comedy', 'crime'], rating=(5.6, 100), name={'en': 'WALL-E', 'de': 'WALL-E'})\n\nLiterals\n========\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from typing import Literal\n\n    from jsondataclass import from_json, to_json\n\n\n    @dataclass\n    class Movie:\n        name: str\n        year: int\n        rating: Literal[1, 2, 3, 4, 5]\n\n\n    movie = Movie(\"Terminator: Dark Fate\", 2019, 5)\n    print(to_json(movie))\n    # > {\"name\": \"Terminator: Dark Fate\", \"year\": 2019, \"rating\": 5}\n\n    json_str = '{\"name\": \"Terminator: Dark Fate\", \"year\": 2019, \"rating\": 5}'\n    print(from_json(json_str, Movie))\n    # > Movie(name='Terminator: Dark Fate', year=2019, rating=5)\n\nEnums\n=====\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from enum import Enum\n    from jsondataclass import from_json, to_json\n\n\n    class Role(Enum):\n        ADMIN = 1\n        STAFF = 2\n        GUEST = 3\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n        role: Role\n\n\n    user = User(1, \"John Doe\", Role.ADMIN)\n    json_str = to_json(user)\n    print(json_str)\n    # {\"id\": 1, \"name\": \"John Doe\", \"role\": 1}\n\n    json_str = '{\"id\": 1, \"name\": \"John Doe\", \"role\": 1}'\n    user = from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe', role=<Role.ADMIN: 1>)\n\nDecimal\n=======\n\nDecimal type can be decerialized from integer, float or string, but is serialized always to string.\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from decimal import Decimal\n    from jsondataclass import from_json, to_json\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n        salary: Decimal\n\n\n    user = User(1, \"John Doe\", Decimal(\"11.22\"))\n    json_str = to_json(user)\n    print(json_str)\n    # {\"id\": 1, \"name\": \"John Doe\", \"salary\": \"11.22\"}\n\n    json_str = '{\"id\": 1, \"name\": \"John Doe\", \"salary\": \"11.22\"}'\n    user = from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe', salary=Decimal('11.22'))\n\n\ndatetime, date, time\n====================\n\nSerialization of ``datetime``, ``date`` and ``time`` objects are performed using `isoformat()`_, and `fromisoformat()`_ are used for deserialization.\n\n.. _`isoformat()` : https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat\n\n.. _`fromisoformat()` : https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from datetime import datetime, date, time\n    from jsondataclass import from_json, to_json, DataClassMapper, jsonfield\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n        last_login: datetime\n        birthday: date\n        local_time: time\n\n\n    user = User(1, \"John Doe\", datetime.now(), date(2000, 1, 1), time(0, 0, 0, 0))\n    json_str = to_json(user)\n    print(json_str)\n    # {\"id\": 1, \"name\": \"John Doe\", \"last_login\": \"2019-10-31T18:53:47.615534\", \"birthday\": \"2000-01-01\", \"local_time\": \"00:00:00\"}\n\n    user = from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe', last_login=datetime.datetime(2019, 10, 31, 18, 54, 35, 688288), birthday=datetime.date(2000, 1, 1), local_time=datetime.time(0, 0))\n\nBut you can specify format via ``DataClassMapper`` instance.\n\n.. code-block:: python\n\n    mapper = DataClassMapper()\n    mapper.datetime_format = \"%m/%d/%y %H:%M:%S\"\n    mapper.date_format = \"%m/%d/%y\"\n    mapper.time_format = \"%H:%M\"\n\n    user = User(1, \"John Doe\", datetime.now(), date(2000, 1, 1), time(0, 0, 0, 0))\n    json_str = mapper.to_json(user)\n    print(json_str)\n    # {\"id\": 1, \"name\": \"John Doe\", \"last_login\": \"10/31/19 18:59:11\", \"birthday\": \"01/01/00\", \"local_time\": \"00:00\"}\n\n    user = mapper.from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe', last_login=datetime.datetime(2019, 10, 31, 18, 59, 11), birthday=datetime.date(2000, 1, 1), local_time=datetime.time(0, 0))\n\nOr via ``jsonfield`` function.\n\n.. code-block:: python\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n        last_login: datetime = jsonfield(serializer_args=(\"%y/%m/%d %H:%M:%S\",))\n        birthday: date = jsonfield(serializer_args=(\"%y/%m/%d\",))\n        local_time: time = jsonfield(serializer_args=(\"%I:%M %p\",))\n\n\n    user = User(1, \"John Doe\", datetime.now(), date(2000, 1, 1), time(0, 0, 0, 0))\n    json_str = to_json(user)\n    print(json_str)\n    # {\"id\": 1, \"name\": \"John Doe\", \"last_login\": \"19/10/31 19:00:58\", \"birthday\": \"00/01/01\", \"local_time\": \"12:00 AM\"}\n\n    user = from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe', last_login=datetime.datetime(2019, 10, 31, 19, 0, 58), birthday=datetime.date(2000, 1, 1), local_time=datetime.time(0, 0))\n\nTimestamp\n=========\n\nBy default, deserialization of timestamp result datetime naive object.\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from datetime import datetime, timezone\n    from jsondataclass import from_json, to_json, jsonfield\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n        last_login: datetime.timestamp\n\n\n    user = User(1, \"John Doe\", datetime.now())\n    json_str = to_json(user)\n    print(json_str)\n    # {\"id\": 1, \"name\": \"John Doe\", \"last_login\": 1572541610}\n\n    user = from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe', last_login=datetime.datetime(2019, 10, 31, 19, 7, 41))\n\nYou can specify timezone using ``jsonfield`` function.\n\n.. code-block:: python\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n        last_login: datetime.timestamp = jsonfield(serializer_kwargs={\"timezone\": timezone.utc})\n\n\n    user = User(1, \"John Doe\", datetime.now())\n    json_str = to_json(user)\n    print(json_str)\n    # {\"id\": 1, \"name\": \"John Doe\", \"last_login\": 1572541956}\n\n    user = from_json(json_str, User)\n    print(user)\n    # User(id=1, name='John Doe', last_login=datetime.datetime(2019, 10, 31, 17, 12, 36, tzinfo=datetime.timezone.utc))\n\nForward References\n==================\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from jsondataclass import from_json, to_json\n    from jsondataclass.utils import set_forward_refs\n\n\n    @dataclass\n    class User:\n        id: int\n        name: str\n        info: \"ContactInfo\"\n\n\n    @dataclass\n    class ContactInfo:\n        email: str\n        phone_number: str\n\n\n    set_forward_refs(User, {\"ContactInfo\": ContactInfo})\n\n    user = User(1, \"John Doe\", ContactInfo(\"john@doe.com\", \"+19999999\"))\n    print(to_json(user))\n    # {\"id\": 1, \"name\": \"John Doe\", \"info\": {\"email\": \"john@doe.com\", \"phone_number\": \"+19999999\"}}\n\n    json_str = '{\"id\": 1, \"name\": \"John Doe\", \"info\": {\"email\": \"john@doe.com\", \"phone_number\": \"+19999999\"}}'\n    print(from_json(json_str, User))\n    # User(id=1, name='John Doe', info=ContactInfo(email='john@doe.com', phone_number='+19999999'))\n\nCustom Serialization and Deserialization\n========================================\n\nSometimes default representation is not what you want.\n``DataClassMapper`` allows you to register your own custom serializers.\n\n.. code-block:: python\n\n    from dataclasses import dataclass\n    from typing import Type\n    from jsondataclass import DataClassMapper, jsonfield, to_json, from_json\n    from jsondataclass.serializers import Serializer\n\n\n    class Rating:\n        def __init__(self, rating, vote_count):\n            self.rating = rating\n            self.vote_count = vote_count\n\n        def __repr__(self):\n            return f\"Rating(rating={self.rating}, vote_count={self.vote_count})\"\n\n\n    class RatingSerializer(Serializer[list]):\n        def serialize(self, data: Rating) -> list:\n            return [data.rating, data.vote_count]\n\n        def deserialize(self, data: list, type_: Type[Rating]) -> Rating:\n            return Rating(*data)\n\n\n    @dataclass\n    class Movie:\n        name: str\n        year: int\n        rating: Rating\n\n\n    movie = Movie(\"Terminator: Dark Fate\", 2019, Rating(5, 100))\n    mapper = DataClassMapper()\n    mapper.register_serializer(Rating, RatingSerializer)\n    json_str = mapper.to_json(movie)\n    print(json_str)\n    # {\"name\": \"Terminator: Dark Fate\", \"year\": 2019, \"rating\": [5, 100]}\n\n    json_str = '{\"name\": \"Terminator: Dark Fate\", \"year\": 2019, \"rating\": [5, 100]}'\n    movie = mapper.from_json(json_str, Movie)\n    print(movie)\n    # Movie(name='Terminator: Dark Fate', year=2019, rating=Rating(rating=5, vote_count=100))\n\nOr you can set your serializer on per-field level.\n\n.. code-block:: python\n\n    @dataclass\n    class Movie:\n        name: str\n        year: int\n        rating: Rating = jsonfield(serializer_class=RatingSerializer)\n\n\n    movie = Movie(\"Terminator: Dark Fate\", 2019, Rating(5, 100))\n    json_str = to_json(movie)\n    print(json_str)\n    # {\"name\": \"Terminator: Dark Fate\", \"year\": 2019, \"rating\": [5, 100]}\n\n    json_str = '{\"name\": \"Terminator: Dark Fate\", \"year\": 2019, \"rating\": [5, 100]}'\n    movie = from_json(json_str, Movie)\n    print(movie)\n    # Movie(name='Terminator: Dark Fate', year=2019, rating=Rating(rating=5, vote_count=100))\n\nAlso, you can override builtin serializers.\n\n.. code-block:: python\n\n    class UpperStringSerializer(Serializer[str]):\n        def serialize(self, data: str) -> str:\n            return data.upper()\n\n        def deserialize(self, data: str, type_: Type[str]) -> str:\n            return data.upper()\n\n\n    @dataclass\n    class Movie:\n        name: str\n        year: int\n\n\n    movie = Movie(\"Terminator: Dark Fate\", 2019)\n\n    mapper = DataClassMapper()\n    mapper.register_serializer(str, UpperStringSerializer)\n    json_str = mapper.to_json(movie)\n    print(json_str)\n    # {\"name\": \"TERMINATOR: DARK FATE\", \"year\": 2019}\n\n    json_str = '{\"name\": \"Terminator: Dark Fate\", \"year\": 2019}'\n    movie = mapper.from_json(json_str, Movie)\n    print(movie)\n    # Movie(name='TERMINATOR: DARK FATE', year=2019)\n\n\n    @dataclass\n    class Movie:\n        name: str = jsonfield(serializer_class=UpperStringSerializer)\n        year: int\n\n\n    movie = Movie(\"Terminator: Dark Fate\", 2019)\n    json_str = mapper.to_json(movie)\n    print(json_str)\n    # {\"name\": \"TERMINATOR: DARK FATE\", \"year\": 2019}\n\n    json_str = '{\"name\": \"Terminator: Dark Fate\", \"year\": 2019}'\n    movie = mapper.from_json(json_str, Movie)\n    print(movie)\n    # Movie(name='TERMINATOR: DARK FATE', year=2019)\n\n\n=======\nHistory\n=======\n\n0.1.0 (2019-11-01)\n------------------\n\n* First release on PyPI.\n\n0.2.0 (2019-11-01)\n------------------\n\n* Decimal type support.\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tushkanin/jsondataclass",
    "keywords": "jsondataclass dataclasses json",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsondataclass",
    "package_url": "https://pypi.org/project/jsondataclass/",
    "platform": "",
    "project_url": "https://pypi.org/project/jsondataclass/",
    "project_urls": {
      "Homepage": "https://github.com/tushkanin/jsondataclass"
    },
    "release_url": "https://pypi.org/project/jsondataclass/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Json dataclass mapper",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6136465,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c59f821bb2d23a38115b7cc2627493a890cdec8fb974c274aa7f966527a8391d",
          "md5": "5cd48dcaffbb5647bf1a0a2a0cea0925",
          "sha256": "915803a8cfdf487433945a4a42acf52a7ce7e6371c40f499f498f4d26c6dde6c"
        },
        "downloads": -1,
        "filename": "jsondataclass-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cd48dcaffbb5647bf1a0a2a0cea0925",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 11723,
        "upload_time": "2019-11-01T14:25:21",
        "upload_time_iso_8601": "2019-11-01T14:25:21.071395Z",
        "url": "https://files.pythonhosted.org/packages/c5/9f/821bb2d23a38115b7cc2627493a890cdec8fb974c274aa7f966527a8391d/jsondataclass-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96cee29ac2656ad0bc37293211c004dffc50c6c8643e1a68ce3ba49dea65e2a1",
          "md5": "55c71717d182758d4819e4b1a91eaa5e",
          "sha256": "2ecd78161d3c8ced3eac7540d7adeabf73940d04afeb88fb8917db0cfc30e9ab"
        },
        "downloads": -1,
        "filename": "jsondataclass-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "55c71717d182758d4819e4b1a91eaa5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17223,
        "upload_time": "2019-11-01T14:25:23",
        "upload_time_iso_8601": "2019-11-01T14:25:23.726967Z",
        "url": "https://files.pythonhosted.org/packages/96/ce/e29ac2656ad0bc37293211c004dffc50c6c8643e1a68ce3ba49dea65e2a1/jsondataclass-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22eac13456ce8c8ed6a1417c18235a2e58d7ea3e98a70d6cbdd113a4aa771ba2",
          "md5": "c06fd5dd7293c6a8fb079bbe98027974",
          "sha256": "b681b230319627b408eba0ea7ef6499068e7963b5d095147c74bcf18ffbee8b7"
        },
        "downloads": -1,
        "filename": "jsondataclass-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c06fd5dd7293c6a8fb079bbe98027974",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 11949,
        "upload_time": "2019-11-01T16:35:14",
        "upload_time_iso_8601": "2019-11-01T16:35:14.434442Z",
        "url": "https://files.pythonhosted.org/packages/22/ea/c13456ce8c8ed6a1417c18235a2e58d7ea3e98a70d6cbdd113a4aa771ba2/jsondataclass-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44a0855ed5d959cbcde6fdd03ddd416ae5bd169508c1d03af34f97662953be84",
          "md5": "102cc26dfe16551f0207315bd262a875",
          "sha256": "9a6bf836c06789abff34ac407ed0928dcdea4b26df3a2ec059269f0a41942d0a"
        },
        "downloads": -1,
        "filename": "jsondataclass-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "102cc26dfe16551f0207315bd262a875",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17903,
        "upload_time": "2019-11-01T16:35:16",
        "upload_time_iso_8601": "2019-11-01T16:35:16.580995Z",
        "url": "https://files.pythonhosted.org/packages/44/a0/855ed5d959cbcde6fdd03ddd416ae5bd169508c1d03af34f97662953be84/jsondataclass-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed13b18fc5fdec2698f0d084963034979afeb272fb05b5f44b0a8510711640e7",
          "md5": "1fca6b58b914e2dcb38ec6d0b1b4f0ea",
          "sha256": "b714cc4ed08e94e4c8305684b64ab7c54cf0ff88e9c10ffbd2dd8ff37e17aeb8"
        },
        "downloads": -1,
        "filename": "jsondataclass-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fca6b58b914e2dcb38ec6d0b1b4f0ea",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 12317,
        "upload_time": "2019-11-14T13:04:24",
        "upload_time_iso_8601": "2019-11-14T13:04:24.936564Z",
        "url": "https://files.pythonhosted.org/packages/ed/13/b18fc5fdec2698f0d084963034979afeb272fb05b5f44b0a8510711640e7/jsondataclass-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "003299f94ffa7c869ed35668031ee2c77f706df28f57e8ad4ba4feadf6e06e0c",
          "md5": "127db1d0a7c4596ec9d85a437d3a811e",
          "sha256": "1cc234a880ee940b6095bbbe20ee7e096af87746123da33fd9f1466cacf93093"
        },
        "downloads": -1,
        "filename": "jsondataclass-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "127db1d0a7c4596ec9d85a437d3a811e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19415,
        "upload_time": "2019-11-14T13:04:26",
        "upload_time_iso_8601": "2019-11-14T13:04:26.790804Z",
        "url": "https://files.pythonhosted.org/packages/00/32/99f94ffa7c869ed35668031ee2c77f706df28f57e8ad4ba4feadf6e06e0c/jsondataclass-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed13b18fc5fdec2698f0d084963034979afeb272fb05b5f44b0a8510711640e7",
        "md5": "1fca6b58b914e2dcb38ec6d0b1b4f0ea",
        "sha256": "b714cc4ed08e94e4c8305684b64ab7c54cf0ff88e9c10ffbd2dd8ff37e17aeb8"
      },
      "downloads": -1,
      "filename": "jsondataclass-0.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1fca6b58b914e2dcb38ec6d0b1b4f0ea",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 12317,
      "upload_time": "2019-11-14T13:04:24",
      "upload_time_iso_8601": "2019-11-14T13:04:24.936564Z",
      "url": "https://files.pythonhosted.org/packages/ed/13/b18fc5fdec2698f0d084963034979afeb272fb05b5f44b0a8510711640e7/jsondataclass-0.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "003299f94ffa7c869ed35668031ee2c77f706df28f57e8ad4ba4feadf6e06e0c",
        "md5": "127db1d0a7c4596ec9d85a437d3a811e",
        "sha256": "1cc234a880ee940b6095bbbe20ee7e096af87746123da33fd9f1466cacf93093"
      },
      "downloads": -1,
      "filename": "jsondataclass-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "127db1d0a7c4596ec9d85a437d3a811e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19415,
      "upload_time": "2019-11-14T13:04:26",
      "upload_time_iso_8601": "2019-11-14T13:04:26.790804Z",
      "url": "https://files.pythonhosted.org/packages/00/32/99f94ffa7c869ed35668031ee2c77f706df28f57e8ad4ba4feadf6e06e0c/jsondataclass-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}