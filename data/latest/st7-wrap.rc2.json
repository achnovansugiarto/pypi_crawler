{
  "info": {
    "author": "Tom Wilson",
    "author_email": "tom.wilson.66+st7_wrap@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# st7_wrap\n\nAn opinionated wrapper around the Strand7 / Straus7 API. Not affiliated with Strand7 Pty Ltd.\n\n\n## Background\n\nOver the years I've used the Strand7 API on a number of projects, and sometimes the first step was building a quick-and-dirty wrapper. Now I hope I won't need to make a similar one next time a project comes along, and if you can make use of it, all the better.\n\n\n## Installation\n\n - Ensure you've installed [Strand7](http://www.strand7.com/) Release 3.1.1.\n - Use Python 3.7+\n - Make sure the official Strand7 API is installed and running (contact [Strand7 Support](https://www.strand7.com/html/aboutsupport.htm) if this is not the case). So you should be able to do this in the Python REPL where ever you want\n to use `st7_wrap`:\n\n ```python\n >>> import St7API\n >>> St7API.St7Init()\n 0\n ```\n\n- Then you can install it the usual way:\n```\npip install st7_wrap\n```\n\n## Examples\n\nNote that this is very far from feature complete - I wouldn't recommend depending on this for long-lived or production work.\n\nFeedback is most welcome via GitHub issues.\n\n### Creating a new model\n\n```python\nfrom st7_wrap import const\nfrom st7_wrap import st7\n\n\n# Context manager handles St7OpenFile or St7NewFile, then St7CloseFile at the end.\nwith st7.St7NewFile(r\"c:\\temp\\NewModel.st7\") as st7_model:\n\n    # Make some nodes - Vector3 type has some conveniences, or just use a list or tuple.\n    st7_model.St7SetNodeXYZ(1, st7.Vector3(1.0, 1.0, 0.0))\n    st7_model.St7SetNodeXYZ(2, (3.0, 1.5, 0.0))\n    st7_model.St7SetNodeXYZ(3, [2.0, 3.0, 0.0])\n\n    # Make a plate\n    st7_model.St7SetElementConnection(\n        const.Entity.tyPLATE, elem_num=1, prop_num=1, connection=[1, 2, 3]\n    )\n\n    st7_model.St7SaveFile()\n\n```\n\n### Handling errors\n\nIf any St7API function is called through `st7_wrap` and it returns a non-zero error code, the\nerror code is converted into a Python exception to handle in the conventional way.\n\nIf you don't\ncare what the particular error is and want to catch everything non-zero, they all inherit from\n`St7BaseException`.\n\n\n```python\nfrom st7_wrap import const\nfrom st7_wrap import exc\nfrom st7_wrap import st7\n\n\nwith st7.St7NewFile(r\"c:\\temp\\Model.st7\") as st7_model:\n\n    # No error expected\n    st7_model.St7SetNodeXYZ(1, [1.0, 1.0, 0.0])\n\n    # Non-zero return codes are translated into exceptions to manage in the usual Python way\n    try:\n        missing_node = st7_model.St7GetNodeXYZ(999)\n\n    except exc.ERR7_ExceededTotal:\n        print(\"Couldn't get node 999.\\n\")\n\n    # To catch all Strand7 exceptions (ERR7_... or SE_...), use St7BaseException\n    try:\n        no_plate = st7_model.St7GetElementConnection(const.Entity.tyPLATE, -10)\n\n    except exc.St7BaseException as e:\n        print(\"Error from St7GetElementConnection(const.Entity.tyPLATE, -10):\")\n        print(e)\n\n```\n\nOutput:\n```\nCouldn't get node 999.\n\nError from St7GetElementConnection(const.Entity.tyPLATE, -10):     \nERR7_InvalidEntityNumber: The specified entity number is not valid.\n```\n\n### Change a plate property\nPython `dataclasses` are used for Strand7 arrays where you set things using `ip...` index\nposition constants. These can be found in `st7_wrap.arrays` and give some niceties like\nautocompletion.\n\n![Autocomplete in arrays](images/array_autocomplete.GIF)\n\n*This interface in particular is incomplete and might change in the future*\n\n```python\nimport dataclasses\n\nfrom st7_wrap import st7\nfrom st7_wrap import arrays\n\nPLATE_PROP_NUM = 1\n\n# This is a model with a plate property in it.\nwith st7.St7OpenFile(r\"c:\\temp\\ExistingModel.st7\") as st7_model:\n\n    # Set the plate modulus to something specific - any unset argument will be zero.\n    new_plate_prop = arrays.PlateIsotropicMaterial(ipPlateIsoModulus=200e3, ipPlateIsoPoisson=0.3)\n    st7_model.St7SetPlateIsotropicMaterial(PLATE_PROP_NUM, new_plate_prop)\n\n    # To change some values without overwriting the others with zero, get the existing values first\n    existing_plate_prop = st7_model.St7GetPlateIsotropicMaterial(PLATE_PROP_NUM)\n    updated_plate_prop = dataclasses.replace(existing_plate_prop, ipPlateIsoModulus=220e3)\n    st7_model.St7SetPlateIsotropicMaterial(PLATE_PROP_NUM, updated_plate_prop)\n\n    st7_model.St7SaveFile()\n```\n\n### Running the solver and extracting results\n\n```python\nimport St7API\n\nfrom st7_wrap import const\nfrom st7_wrap import st7\n\n# This should be a model with plates in it which is ready to solve.\nwith st7.St7OpenFile(r\"c:\\temp\\ExistingModel.st7\") as st7_model:\n\n    # Run the solver\n    st7_model.St7RunSolver(\n        const.SolverType.stLinearStatic, const.SolverMode.smBackgroundRun, wait=True\n    )\n\n    # Context manager for St7OpenResultFile on entry and St7CloseResultFile at the end.\n    with st7_model.open_results(r\"c:\\temp\\ExistingModel.LSA\") as st7_results:\n\n        case_num = 1\n        layer = 0\n\n        # Display node results\n        for node_num in st7_model.entity_numbers(const.Entity.tyNODE):\n            node_result = st7_results.St7GetNodeResult(\n                const.NodeResultType.rtNodeDisp, node_num, case_num\n            )\n            print(f\"Node {node_num}: {node_result.results[0:3]}\")\n\n        # Display plate results\n        for plate_num in st7_model.entity_numbers(const.Entity.tyPLATE):\n            plate_result = st7_results.St7GetPlateResultArray(\n                const.PlateResultType.rtPlateStress,\n                const.PlateResultSubType.stPlateCombined,\n                plate_num,\n                case_num,\n                const.SampleLocation.spGaussPoints,\n                const.PlateSurface.psPlateMidPlane,\n                layer,\n            )\n\n            # Select out the Gauss point vM Stress\n            gauss_points = range(plate_result.num_points)\n            gp_vm_res = [\n                plate_result.results[iGP * plate_result.num_cols + St7API.ipPlateCombVonMises]\n                for iGP in gauss_points\n            ]\n            print(f\"Plate {plate_num} vM Stress at Gauss Points: {gp_vm_res}\")\n\n```\n\nOutput:\n```\n...\nNode 254: (0.004691353609810177, -0.01586862433334294, 0.0)\nNode 255: (0.005981213780284651, -0.016060926198869913, 0.0)\nNode 256: (0.0075936501484970866, -0.016145524500278237, 0.0)\nPlate 1 vM Stress at Gauss Points: [5569.576626668302, 11700.175314227161, 4844.353537104418, 11462.512122246826]\nPlate 2 vM Stress at Gauss Points: [13893.919745642319, 10053.730619615291, 13953.137294350929, 10143.769927789555]\nPlate 3 vM Stress at Gauss Points: [8335.799952936248, 7027.347709115354, 8334.841407078804, 7034.758429109735]\nPlate 4 vM Stress at Gauss Points: [6271.495334295235, 5522.062758482633, 6266.697307849912, 5517.164372917556]\nPlate 5 vM Stress at Gauss Points: [5017.202557134458, 4347.615893517061, 5015.150140264017, 4345.975844187045]\n...\n```\n\n### Model Window\n\n```python\nimport St7API\n\nfrom st7_wrap import arrays\nfrom st7_wrap import const\nfrom st7_wrap import st7\n\n\n# This should be a model with plates in it which is ready to solve.\nwith st7.St7OpenFile(r\"c:\\temp\\ExistingModel.st7\") as st7_model:\n\n    # Run the solver\n    st7_model.St7RunSolver(\n        const.SolverType.stLinearStatic, const.SolverMode.smBackgroundRun, wait=True\n    )\n\n    # Create a model window to save images of the model or results.\n    with st7_model.St7CreateModelWindow() as model_window:\n        with st7_model.open_results(r\"c:\\temp\\ExistingModel.LSA\") as st7_results:\n\n            model_window.St7SetWindowResultCase(case_num=1)\n\n            # Set the model window contour to vM stress\n            PLATE_STRESS_COMBINED_VM_GUI_IDX = 4\n            plate_result_display = arrays.PlateResultDisplay(\n                ipResultType=St7API.rtAsContour,\n                ipResultQuantity=St7API.rqPlateStressC,\n                ipResultSystem=St7API.stPlateCombined,\n                ipResultComponent=PLATE_STRESS_COMBINED_VM_GUI_IDX,\n                ipResultSurface=St7API.psPlateMidPlane,\n            )\n\n            model_window.St7SetPlateResultDisplay(plate_result_display)\n            model_window.St7SetDisplacementScale(5.0, const.ScaleType.dsAbsolute)\n            model_window.St7RedrawModel(True)\n\n            model_window.St7ExportImage(\n                r\"c:\\temp\\St7Results.png\", const.ImageType.itPNG, 1600, 1200\n            )\n```\n\nThen if you open up `c:\\temp\\St7Results.png` you will have an image of the results:\n![Autocomplete in arrays](images/St7Results.png)\n\n\n## Acknowledgments\n\nThis module has been created as a part of my PhD, with funding support from \nthe Australian Reseach Council grant *TODO grant number*. Additional thanks to Strand7 Pty Ltd for\nthe use of their finite element analysis software during the PhD.\n\nIf you're using this for your own research and feel so inclined, please cite the\npublication from which it was extracted, *TODO plasticity band paper*.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tom-dq/st7_wrap",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "st7-wrap",
    "package_url": "https://pypi.org/project/st7-wrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/st7-wrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/tom-dq/st7_wrap/issues",
      "Homepage": "https://github.com/tom-dq/st7_wrap"
    },
    "release_url": "https://pypi.org/project/st7-wrap/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Wrapper for the Strand7 API",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11599130,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d079c5727b87574e4d73a9caa229c856431bab9ee1a0461df64ec1ea9f7bcec5",
          "md5": "ec9239589f58fce00fa0cc509c4427e0",
          "sha256": "2b228590d3a6e207775b9e8ccb4a8269fb73c905f77527517859c6e568d3f149"
        },
        "downloads": -1,
        "filename": "st7_wrap-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec9239589f58fce00fa0cc509c4427e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 85904,
        "upload_time": "2021-07-30T01:31:09",
        "upload_time_iso_8601": "2021-07-30T01:31:09.812684Z",
        "url": "https://files.pythonhosted.org/packages/d0/79/c5727b87574e4d73a9caa229c856431bab9ee1a0461df64ec1ea9f7bcec5/st7_wrap-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fdc191af9deb308a36164391b2a6660182486cd7c2ff2e81595cf60e611bde0",
          "md5": "bb2297c6c20bba4ac9d507f200222347",
          "sha256": "166201fca79d8263f96f856ab90cbdef0c4c27727ff7d861c8cbd7c3fbeef1b0"
        },
        "downloads": -1,
        "filename": "st7_wrap-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bb2297c6c20bba4ac9d507f200222347",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 89587,
        "upload_time": "2021-07-30T01:31:12",
        "upload_time_iso_8601": "2021-07-30T01:31:12.113229Z",
        "url": "https://files.pythonhosted.org/packages/9f/dc/191af9deb308a36164391b2a6660182486cd7c2ff2e81595cf60e611bde0/st7_wrap-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e71a9761c5902ec47d4b94560efd4d4d1d34196cb09849f3d234128b4f07f8af",
          "md5": "0483e45b6bd5e5aca5187a8ed94331a7",
          "sha256": "5bf7cf08a10a6bfd07f77b5f48f9163ea6a9a467d64416221a4a17b4bd138b88"
        },
        "downloads": -1,
        "filename": "st7_wrap-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0483e45b6bd5e5aca5187a8ed94331a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 87462,
        "upload_time": "2021-10-01T00:20:22",
        "upload_time_iso_8601": "2021-10-01T00:20:22.424606Z",
        "url": "https://files.pythonhosted.org/packages/e7/1a/9761c5902ec47d4b94560efd4d4d1d34196cb09849f3d234128b4f07f8af/st7_wrap-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba918b38b961cde34af0ba982bdc9503393168c9f7fb9ff08b9e4ff0bbeb8f5b",
          "md5": "045c00cf965d015e99b4c84059bed257",
          "sha256": "d2cbe55601c6d2185764fc3fbfb5a827231e5ecbbaea1689acb38e8c857de2c4"
        },
        "downloads": -1,
        "filename": "st7_wrap-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "045c00cf965d015e99b4c84059bed257",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 91206,
        "upload_time": "2021-10-01T00:20:25",
        "upload_time_iso_8601": "2021-10-01T00:20:25.017100Z",
        "url": "https://files.pythonhosted.org/packages/ba/91/8b38b961cde34af0ba982bdc9503393168c9f7fb9ff08b9e4ff0bbeb8f5b/st7_wrap-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e71a9761c5902ec47d4b94560efd4d4d1d34196cb09849f3d234128b4f07f8af",
        "md5": "0483e45b6bd5e5aca5187a8ed94331a7",
        "sha256": "5bf7cf08a10a6bfd07f77b5f48f9163ea6a9a467d64416221a4a17b4bd138b88"
      },
      "downloads": -1,
      "filename": "st7_wrap-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0483e45b6bd5e5aca5187a8ed94331a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 87462,
      "upload_time": "2021-10-01T00:20:22",
      "upload_time_iso_8601": "2021-10-01T00:20:22.424606Z",
      "url": "https://files.pythonhosted.org/packages/e7/1a/9761c5902ec47d4b94560efd4d4d1d34196cb09849f3d234128b4f07f8af/st7_wrap-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba918b38b961cde34af0ba982bdc9503393168c9f7fb9ff08b9e4ff0bbeb8f5b",
        "md5": "045c00cf965d015e99b4c84059bed257",
        "sha256": "d2cbe55601c6d2185764fc3fbfb5a827231e5ecbbaea1689acb38e8c857de2c4"
      },
      "downloads": -1,
      "filename": "st7_wrap-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "045c00cf965d015e99b4c84059bed257",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 91206,
      "upload_time": "2021-10-01T00:20:25",
      "upload_time_iso_8601": "2021-10-01T00:20:25.017100Z",
      "url": "https://files.pythonhosted.org/packages/ba/91/8b38b961cde34af0ba982bdc9503393168c9f7fb9ff08b9e4ff0bbeb8f5b/st7_wrap-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}