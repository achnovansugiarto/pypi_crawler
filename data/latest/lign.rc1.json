{
  "info": {
    "author": "Josue N Rivera",
    "author_email": "josue.n.rivera@outlook.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Lign\n\n[![Lign logo][logo-url]][repo-url]\n\nA graph framework that can be used to implement graph convolutional networks (GCNs), geometry machine learning, continual lifelong learning on graphs and other graph-based machine learning methods alongside [PyTorch](https://pytorch.org)\n\n[View Docs][docs-url] Â· [View Examples][examples-url] Â· [Report Bugs][bugs-url] Â· [Request Feature][bugs-url]\n\n[![Contributors][contributors-shield]][contributors-url]\n[![Forks][forks-shield]][forks-url]\n[![Stargazers][stars-shield]][stars-url]\n[![Issues][issues-shield]][issues-url]\n[![Mozilla License][license-shield]][license-url]\n\n## Table of Contents\n\n- [Lign](#lign)\n  - [Table of Contents](#table-of-contents)\n  - [About The Project](#about-the-project)\n  - [Getting Started](#getting-started)\n    - [Installation](#installation)\n  - [Usage](#usage)\n  - [Future](#future)\n  - [Citation](#citation)\n  - [Contributing](#contributing)\n  - [License](#license)\n  - [Contact](#contact)\n\n## About The Project\n\nLign (Lifelong learning Induced by Graph Neural networks) is a framework that can be used for a wide range of graph-related problems including but not limited to graph convolutional networks (GCNs), geometry machine learning, continual lifelong learning on graphs and other graph-related machine learning methods with a tight integration to [PyTorch](https://pytorch.org). It was build as a component of my master thesis for a proposed lifelong learning techinique (also named Lign) that works on both graph and vector data.\n\nLigns currently supports a wide range of functionalities such as clustering techiniques, GCN PyTorch module, graph creation and processing, data set to graph convention, rehersal methods/retraining for GCNS and coventional neural networks, and more. Future planned additions include STL file to graph conversion, graph to STL model along with others features.\n\n## Getting Started\n\nThese are instructions for getting started with development. If only interested in the package, please install Lign via ``pip install lign``, ``conda install lign -c josuecom -c pytorch`` or by downloading the [package][release-url] from github and saving it in the ``site-packages/`` directory of your python interpreter.\n\n_For more details, please read the [developer documentation][dev-docs-url]_\n\n### Installation\n\n1. Clone the repo\n\n   ```sh\n   git clone https://github.com/JosueCom/Lign.git\n   ```\n\n2. Switch directory\n\n   ```sh\n   cd Lign\n   ```\n\n3. Install prerequisites\n\n   _It is recommended to install [PyTorch](https://pytorch.org) via the official site first for optimal performance_\n\n   ```sh\n   pip install -r docs/dev/requirements.txt\n   ```\n\n   Or\n\n   ```sh\n   conda env create -f docs/dev/environment.yml -n lign\n   conda activate lign\n   ```\n\n4. Install package\n\n   ```sh\n   pip install . --upgrade\n   ```\n\n## Usage\n\nIt is recommended to run the following instructions in a python console to view all produced output  \n\n- Create a new graph, assign some values and view properties\n\n   ```python\n   import lign as lg\n   import torch as th\n\n   n = 5\n   g = lg.Graph()\n   g.add(n)\n   g['x'] = th.rand(n, 3) ## Or, g.set_data('x', th.rand(n, 3))\n\n   print(g)\n   print(g['x']) ## Or, g.get_data('x')\n   print(g[0]) ## Or, g.get_nodes(0)\n   print(g[[1, 2]]) ## Or, g.get_nodes([1, 2])\n   print(g[3:]) ## Or, g.get_nodes(slice(3, None))\n   print(g[(4,)]) ## Or, g.get_edges(4)\n   ```\n\n- Process data with a conventional neural network\n\n   ```python\n   import lign as lg\n   import torch as th\n   from torch import nn\n\n   n = 5\n   g = lg.Graph().add(n, self_loop=False, inplace=True) ## No self loop edges added since no relational data is present\n   g['x'] = th.rand(n, 3)\n   print(g['x'])\n\n   # Data that is not relational maybe be process without the need of ligh graphs\n   x = = th.rand(n, 3)\n   x = linear(x)\n   print(x)\n\n   # However, you can use if you desire to use graph strctures\n   linear = nn.Linear(3, 2)\n   g['x'] = linear(g['x']) ## Or, g.apply(linear, data = 'x')\n   print(g['x'])\n   ```\n\n- Process relational data with a GCN\n\n   ```python\n   import lign as lg\n   import torch as th\n   from torch import nn\n   from lign.nn import GCN\n   from lign.utils.functions import sum_tensors\n\n   n = 5\n   g = lg.Graph().add(n, inplace=True)\n   g['x'] = th.rand(n, 3)\n   print(g['x'])\n\n   # 1^{st} Approach: Basic gcn with no message passing\n   # ## It can also be processed as if it is not a graph since edge information is not used\n   gcn = GCN(nn.Linear(3, 2)) \n   g['x'] = gcn(g, g['x'])\n   print(g['x'])\n\n   # 2^{nd} Approach: Basic gcn with message passing via neighbors data summation\n   g[(2, 3, 4)] = {2, 3, 4} ## Add edges to nodes 2, 3, 4; nodes can be removed via g.remove_edges()\n   gcn = GCN(nn.Linear(2, 3), aggregation = sum_tensors)\n   g['x'] = gcn(g, g['x'])\n   print(g['x'])\n\n   # 3^{rd} Approach: Proposed GCN with discovery and inclusion layers\n   gcn = GCN(nn.Linear(3, 2), aggregation = sum_tensors, inclusion = nn.Linear(2, 3))\n   g['x'] = gcn(g, g['x'])\n   print(g['x'])\n   ```\n\n- Apply function\n\n   ```python\n   import lign as lg\n   import torch as th\n   from torch import nn\n   from lign.nn import GCN\n   n = 5\n   g = lg.Graph().add(n, inplace=True)\n   g['x'] = th.rand(n, 3)\n\n   # Use apply if involving individual nodes\n   ## Adds 3 to all node's 'x' data in the data set; doesn't require neighbors\n   g.apply(lambda x: x + 3, data='x')\n   print(g['x'])\n\n   # Use push or pull if only involving multiple nodes. Nodes will push/pull data via edges\n   ## Sums neighbors 'x' value together; require neighbors\n   def sum_tensors(neighs):\n       return th.stack(neighs).sum(dim = 0)\n\n   g[(2, 3, 4)] = {2, 3, 4}\n   g.push(sum_tensors, data='x')\n   print(g['x'])\n   ```\n\n- Use clustering techniques for PyTorch\n\n   ```python\n   from lign.utils.clustering import NN, KNN, KMeans\n   import torch as th\n\n   n = 20\n   x = th.rand(n, 3)\n   labels = (x[:, 0] > 0.5)*1\n   predict = th.rand(4, 3)\n   print(predict)\n\n   cluster = NN(x, labels)\n   print(cluster(predict))\n\n   cluster = KNN(x, labels, k=3)\n   print(cluster(predict))\n\n   cluster = KMeans(x, k=2)\n   print(cluster(predict))\n   ```\n\n- Create sub graphs\n\n   ```python\n   import lign as lg\n   import torch as th\n   n = 5\n   g = lg.Graph().add(n, inplace=True)\n   g['x'] = th.rand(n, 3)\n   g[tuple(range(n))] = set(range(3, n)) ## Add edge from each node to 3 and 4\n   print(g)\n\n   # Make sub graph with all data and edges from parent; edges are updated to reflect new indexes\n   sub = g.sub_graph([2, 3, 4], get_data = True, get_edges = True)\n   print(sub)\n\n   # Make sub graph with only edges from parent; edges are updated to reflect new indexes\n   sub = g.sub_graph(2, get_edges = True)\n   sub.add(2)\n   print(sub)\n\n   # Make sub graph with only data from parent\n   ## Add nodes not known to the parent graph\n   sub = g.sub_graph([3, 4], get_data = True)\n   sub.add([lg.node({'x': th.rand(3)}) for i in range(2)], self_loop = False)\n   print(sub)\n\n   sub[(2, 3)] = sub.get_parent_edges([0, 2])\n   print(sub)\n   ```\n\n- Save and load created graphs\n\n   ```python\n   import lign as lg\n   import torch as th\n   n = 5\n   g = lg.Graph().add(n, inplace=True)\n   g['x'] = th.rand(n, 3)\n\n   # Save to file\n   g.save(\"data/graph.lign\")\n\n   # Load from file\n   f = lg.Graph(\"data/graph.lign\")\n\n   # Check all data are the same\n   print((f['x'] == g['x']).all())\n   ```\n\n- Convert common data set to lign graphs\n\n   ```python\n   import lign.utils as utl\n\n   g0, g0_train, g0_validate = utl.load.mnist_to_lign(\"datasets/CIFAR100\")\n\n   g1, g1_train, g1_validate = utl.load.cifar_to_lign(\"datasets/CIFAR100\")\n\n   g2, g2_train, g2_validate = utl.load.cora_to_lign(\"datasets/CIFAR100\")\n   ```\n\n_Please refer to the [documentation][examples-url] for other examples_\n\n## Future\n\nSee the [open issues][issues-url] for a list of proposed features (and known issues).\n\n## Citation\n\nRefer to [CITATION.bib][citation-url] for BibTex citation\n\n## Contributing\n\nRead [CONTRIBUTING.md][contributing-url] for details on how to add to this repository.\n\n_**tl;dr** Fork, create a new branch, commits features and make a pull request with documented changes_\n\n## License\n\nDistributed under the Mozilla Public License Version 2.0. See [LICENSE][license-url] for more information.\n\n## Contact\n\n[@josuecom_](https://github.com/JosueCom)\n\n[contributors-shield]: https://img.shields.io/github/contributors/JosueCom/Lign.svg?style=for-the-badge\n[contributors-url]: https://github.com/JosueCom/Lign/graphs/contributors\n[forks-shield]: https://img.shields.io/github/forks/JosueCom/Lign.svg?style=for-the-badge\n[forks-url]: https://github.com/JosueCom/Lign/network/members\n[stars-shield]: https://img.shields.io/github/stars/JosueCom/Lign.svg?style=for-the-badge\n[stars-url]: https://github.com/JosueCom/Lign/stargazers\n[issues-shield]: https://img.shields.io/github/issues/JosueCom/Lign.svg?style=for-the-badge\n[issues-url]: https://github.com/JosueCom/Lign/issues\n[license-shield]: https://img.shields.io/github/license/JosueCom/Lign.svg?style=for-the-badge\n[license-url]: https://github.com/JosueCom/Lign/blob/master/LICENSE\n[product-screenshot]: images/screenshot.png\n[docs-url]: https://github.com/JosueCom/Lign/tree/master/docs\n[examples-url]: https://github.com/JosueCom/Lign/tree/master/docs/examples\n[bugs-url]: https://github.com/JosueCom/Lign/issues\n[release-url]: https://github.com/JosueCom/Lign/releases\n[issues-url]: https://github.com/JosueCom/Lign/issues\n[repo-url]: https://github.com/JosueCom/Lign\n[dev-docs-url]: https://github.com/JosueCom/Lign/tree/master/docs/dev\n[citation-url]: https://github.com/JosueCom/Lign/blob/master/docs/CITATION.bib\n[contributing-url]: https://github.com/JosueCom/Lign/blob/master/docs/CONTRIBUTING.md\n[logo-url]: https://raw.githubusercontent.com/JosueCom/Lign/master/docs/imgs/logo.png\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JosueCom/Lign",
    "keywords": "",
    "license": "Mozilla Public License Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lign",
    "package_url": "https://pypi.org/project/lign/",
    "platform": "",
    "project_url": "https://pypi.org/project/lign/",
    "project_urls": {
      "Homepage": "https://github.com/JosueCom/Lign"
    },
    "release_url": "https://pypi.org/project/lign/0.1.1/",
    "requires_dist": [
      "torch",
      "torchvision",
      "numpy",
      "pandas",
      "future"
    ],
    "requires_python": ">=3.7.0",
    "summary": "A framework for working with graphs alongside PyTorch",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11096753,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1eab4ec255e82cb62dfe8611301833ef28d5862e28f041e09b515731a7b4102f",
          "md5": "b31c4e9663630ebdcc1564bde2c03ed7",
          "sha256": "c374b9bacbbcbed3e9e60a74d5c9abbfbf316e2b3f366f9278d430f679706284"
        },
        "downloads": -1,
        "filename": "lign-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b31c4e9663630ebdcc1564bde2c03ed7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 24529,
        "upload_time": "2021-08-05T05:04:52",
        "upload_time_iso_8601": "2021-08-05T05:04:52.690374Z",
        "url": "https://files.pythonhosted.org/packages/1e/ab/4ec255e82cb62dfe8611301833ef28d5862e28f041e09b515731a7b4102f/lign-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0fbdd6695ac3e1eaeb90117b238d842089c32a54ba7d0c37e1f01a1ccc056cd",
          "md5": "241b6a5446f031b945e9c0266d3d4a2e",
          "sha256": "2db9c61fe8bb479bddca42227ab70d29dc02de254dbf5b2907e5496983d7aa57"
        },
        "downloads": -1,
        "filename": "lign-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "241b6a5446f031b945e9c0266d3d4a2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 19220,
        "upload_time": "2021-08-05T05:04:54",
        "upload_time_iso_8601": "2021-08-05T05:04:54.338755Z",
        "url": "https://files.pythonhosted.org/packages/a0/fb/dd6695ac3e1eaeb90117b238d842089c32a54ba7d0c37e1f01a1ccc056cd/lign-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1eab4ec255e82cb62dfe8611301833ef28d5862e28f041e09b515731a7b4102f",
        "md5": "b31c4e9663630ebdcc1564bde2c03ed7",
        "sha256": "c374b9bacbbcbed3e9e60a74d5c9abbfbf316e2b3f366f9278d430f679706284"
      },
      "downloads": -1,
      "filename": "lign-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b31c4e9663630ebdcc1564bde2c03ed7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 24529,
      "upload_time": "2021-08-05T05:04:52",
      "upload_time_iso_8601": "2021-08-05T05:04:52.690374Z",
      "url": "https://files.pythonhosted.org/packages/1e/ab/4ec255e82cb62dfe8611301833ef28d5862e28f041e09b515731a7b4102f/lign-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0fbdd6695ac3e1eaeb90117b238d842089c32a54ba7d0c37e1f01a1ccc056cd",
        "md5": "241b6a5446f031b945e9c0266d3d4a2e",
        "sha256": "2db9c61fe8bb479bddca42227ab70d29dc02de254dbf5b2907e5496983d7aa57"
      },
      "downloads": -1,
      "filename": "lign-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "241b6a5446f031b945e9c0266d3d4a2e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 19220,
      "upload_time": "2021-08-05T05:04:54",
      "upload_time_iso_8601": "2021-08-05T05:04:54.338755Z",
      "url": "https://files.pythonhosted.org/packages/a0/fb/dd6695ac3e1eaeb90117b238d842089c32a54ba7d0c37e1f01a1ccc056cd/lign-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}