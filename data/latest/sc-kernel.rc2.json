{
  "info": {
    "author": "Dennis Scheiba",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: IPython",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis",
      "Topic :: System :: Shells"
    ],
    "description": "# Supercollider Jupyter Kernel\n\nThis kernel allows running [SuperCollider](https://supercollider.github.io/) Code in a [Jupyter](https://jupyter.org/) environment.\n\n![Demo Notebook](demo.jpg)\n\n## Installation\n\nPlease make sure one has installed [SuperCollider](https://supercollider.github.io/) and\n[Python 3 with pip](https://realpython.com/installing-python).\n\n* To install the kernel for Jupyter execute\n\n  ```shell\n  pip3 install --upgrade sc-kernel\n  ```\n\n  This will also install [Jupyter Lab](https://jupyter.org/) if it is not already installed on the system.\n\n* Start a new Jupyter Lab instance by executing `jupyter lab` in a console.\n\n* Click on the SuperCollider icon\n\nIf one has not installed SuperCollider in the default location, one has to set a environment variable\ncalled `SCLANG_PATH` which points to the sclang executable.\n\nTo uninstall the kernel execute\n\n```shell\njupyter kernelspec uninstall sc_kernel\n```\n\n### As a Docker container\n\nIt is also possible to run sc-kernel in a Docker container, although a sound output is not possible in this case.\nAssuming you have cloned the repository and opened a terminal in its directory.\n\n```shell\n# build container - takes some time b/c we build supercollider\ndocker build -t sc_kernel .\n# run container\n# -v mounts the current directory to the container\n# -p passes the container port to our host\ndocker run -v ${PWD}:/home/sc_kernel -p 8888:8888 sc_kernel\n```\n\n## Usage\n\nContrary to ScIDE each document will run in its own interpreter and not in a shared one.\nThis is the default behavior of Jupyter but maybe this will be changed at a later point.\n\nCurrently it is only possible to use the default config - if you encounter missing classes\nit is probably caused that they are not available in the default config.\n\n### Stop sound\n\nCurrently the `Cmd + .` command is not binded. Instead create a new cell with a single dot\n\n```supercollider\n.\n```\n\nand execute this cell. This will transform the command to `CommandPeriod.run;` which is what is actually called on the `Cmd + .` press in the IDE.\n\n### Recording\n\n`sc_kernel` provides an easy way to record audio to the local directory and store it embedded in the notebook\nso one can transfer the notebook into a website which has the audio files included.\n\nThe audio is stored in FLAC with 16 bit resolution.\n\nThe provided function `record` takes 2 arguments:\n\n* Duration in seconds\n* Filename which will be used for the recording, using the path of the notebook as base path.\n\nAssuming one has started the server, simply execute\n\n```supercollider\nNdef(\\sine, {\n    var sig = SinOsc.ar(LFDNoise0.kr(1.0!2).exprange(100, 400));\n    sig = sig * \\amp.kr(0.2);\n    sig;\n}).play;\n\nrecord.(4.0);\n```\n\n![Recording](recording.png)\n\n### Plotting\n\n`sc_kernel` also provides a way to embed images of SuperCollider windows into the Jupyter document.\nFirst create a window that you want to embed into the document\n\n```supercollider\nw = {SinOsc.ar(2.0)}.plot(1.0);\n```\n\nAfter the plotting is finished by the server we can now simply save an image of the window\nto a file and also embed the image into the document via a SuperCollider helper method which is available.\n\n```supercollider\nplot.(w);\n```\n\n![Plotting magic](plotting.png)\n\nThe image will be saved relative the directory where `jupyter lab` was executed.\nThe optional second argument can be the filename.\n\n> Note that `{}.plot` does not return a `Window` but a `Plotter`, but `sc_kernel`\n> accesses the window of a `Plotter` automatically.\n>\n> For plotting e.g. the server meter you need to pass the proper window, so\n>\n> ```supercollider\n> a = s.meter;\n> // a is a ServerMeter\n>\n> // new cell\n> plot.(a.window, \"meter.png\");\n> ```\n\n### Autocomplete\n\nSimply push `Tab` to see available autocompletions.\nThis is currently limited to scan for available classes.\n\n### Documentation\n\nTo display the documentation of a Class, simply prepend a `?` to it and execute it, e.g.\n\n```supercollider\n?SinOsc\n```\n\nYou can also hit `shift <tab>` iff the cursor is behind a class to trigger the inline documentation.\n\n![Inline documentation](inline_docs.png)\n\n### Real Time Collaboration\n\nJupyter Lab allows for real time collaboration in which multiple users can write in the same document from different computers by visiting the Jupyter server via their browser.\nEach user can write and execute sclang statements on your local sclang interpreter and the cursors of each user is shown to everyone.\n\nThis allows for interactive, shared sessions which can be an interesting live coding sessions.\n\n> Be aware that this can be a security threat as it allows for other people from within the network to execute arbitrary sclang commands on your computer\n\nTo start such a session you can spin Jupyter Lab via\n\n```shell\njupyter lab --ip 0.0.0.0 --collaborative --NotebookApp.token='sclang'\n```\n\nwhere the `NotebookApp.token` is the necessary password to login - set it to `''` if no password is wanted.\n\nCheck out the [documentation on Jupyter Lab](https://jupyterlab.readthedocs.io/en/stable/user/rtc.html) about *Real Time Collaboration*.\n\n## Development\n\nAny PR is welcome! Please state the changes in an Issue.\nTo contribute, please\n\n* Fork the repository and clone it to a local directory\n\n* Create a virtual environment and install the dev dependencies\n  in it with\n\n  ```shell\n  pip3 install -e \".[dev]\"\n  ```\n\n* If one wants to add the kernel to an existing Jupyter installation one can execute\n\n  ```shell\n  jupyter kernelspec install sc_kernel\n  ```\n\n  and run `jupyter lab` from within the cloned directory as\n  we need to have access to `sc_kernel`.\n\n* Run `./run_tests.sh` and make a PR :)\n  Use `black sc_kernel test` to format the source code.\n\n## Maintainers\n\n* [Dennis Scheiba](https://dennis-scheiba.com)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/capital-G/sc_kernel",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sc-kernel",
    "package_url": "https://pypi.org/project/sc-kernel/",
    "platform": null,
    "project_url": "https://pypi.org/project/sc-kernel/",
    "project_urls": {
      "Homepage": "https://github.com/capital-G/sc_kernel"
    },
    "release_url": "https://pypi.org/project/sc-kernel/0.4.0/",
    "requires_dist": [
      "metakernel (<0.30,>=0.23.0)",
      "ipython (<9.0,>=4.0)",
      "pygments (<=2.14.0,>2.1)",
      "jupyterlab (<4.0,>=2.0)",
      "jupyter-server (<3.0,>2.0)",
      "coverage (==5.2.1) ; extra == 'dev'",
      "flake8 (<=6.0.0) ; extra == 'dev'",
      "unittest-xml-reporting (==3.0.4) ; extra == 'dev'",
      "mypy (<=1.0.0) ; extra == 'dev'",
      "pre-commit (==2.17.0) ; extra == 'dev'",
      "black (<=23.1.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16791965,
  "releases": {
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f84b7820edb9a1381a9291a1b248857a5b344cf3df7f4a7a3c4b59e24c43554c",
          "md5": "d78f2aefef538a3ee080ef03a8af70bc",
          "sha256": "1e3386670f9b4ce9cdc06afadb9f58a3260bc83674a64ad580dccea5a3c335cc"
        },
        "downloads": -1,
        "filename": "sc_kernel-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d78f2aefef538a3ee080ef03a8af70bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 42383,
        "upload_time": "2020-12-13T17:47:27",
        "upload_time_iso_8601": "2020-12-13T17:47:27.358494Z",
        "url": "https://files.pythonhosted.org/packages/f8/4b/7820edb9a1381a9291a1b248857a5b344cf3df7f4a7a3c4b59e24c43554c/sc_kernel-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dae5ae605394c93cc52eaccc2f2ed3364e9751b19f8d63c6f4d7884d07c21308",
          "md5": "9bc8d32b38f8e0c7eb3658375bd52796",
          "sha256": "fec49459b17516f9cb0e7b342000925399cbcb10ca999e8295530e9b4eff43f7"
        },
        "downloads": -1,
        "filename": "sc_kernel-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9bc8d32b38f8e0c7eb3658375bd52796",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27302,
        "upload_time": "2020-12-13T17:47:28",
        "upload_time_iso_8601": "2020-12-13T17:47:28.720601Z",
        "url": "https://files.pythonhosted.org/packages/da/e5/ae605394c93cc52eaccc2f2ed3364e9751b19f8d63c6f4d7884d07c21308/sc_kernel-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df1e5dd68f58fad91f45b139d9ae7a877fc725cc781602101450bf2d1107d1fa",
          "md5": "d59457e61afd7c81b7b2ef6678a91a9f",
          "sha256": "27d919f80caff3e6645f9acf8ad93601867b71bc157f5298039f59c80e9ad6fb"
        },
        "downloads": -1,
        "filename": "sc_kernel-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d59457e61afd7c81b7b2ef6678a91a9f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 43718,
        "upload_time": "2023-02-10T16:22:45",
        "upload_time_iso_8601": "2023-02-10T16:22:45.700037Z",
        "url": "https://files.pythonhosted.org/packages/df/1e/5dd68f58fad91f45b139d9ae7a877fc725cc781602101450bf2d1107d1fa/sc_kernel-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ee9af1fd5bbf96484ce78a8c0f6ca8ed3c5f2595fdb599487f4646aa2647b1c",
          "md5": "b531b7082ba4da3bc3cb4099e792171e",
          "sha256": "0922205cbca59cba0455f00a7d146075b1e06260e9e5cedbf4f85d6762d2ec23"
        },
        "downloads": -1,
        "filename": "sc_kernel-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b531b7082ba4da3bc3cb4099e792171e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 31312,
        "upload_time": "2023-02-10T16:22:47",
        "upload_time_iso_8601": "2023-02-10T16:22:47.371544Z",
        "url": "https://files.pythonhosted.org/packages/4e/e9/af1fd5bbf96484ce78a8c0f6ca8ed3c5f2595fdb599487f4646aa2647b1c/sc_kernel-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df1e5dd68f58fad91f45b139d9ae7a877fc725cc781602101450bf2d1107d1fa",
        "md5": "d59457e61afd7c81b7b2ef6678a91a9f",
        "sha256": "27d919f80caff3e6645f9acf8ad93601867b71bc157f5298039f59c80e9ad6fb"
      },
      "downloads": -1,
      "filename": "sc_kernel-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d59457e61afd7c81b7b2ef6678a91a9f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 43718,
      "upload_time": "2023-02-10T16:22:45",
      "upload_time_iso_8601": "2023-02-10T16:22:45.700037Z",
      "url": "https://files.pythonhosted.org/packages/df/1e/5dd68f58fad91f45b139d9ae7a877fc725cc781602101450bf2d1107d1fa/sc_kernel-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ee9af1fd5bbf96484ce78a8c0f6ca8ed3c5f2595fdb599487f4646aa2647b1c",
        "md5": "b531b7082ba4da3bc3cb4099e792171e",
        "sha256": "0922205cbca59cba0455f00a7d146075b1e06260e9e5cedbf4f85d6762d2ec23"
      },
      "downloads": -1,
      "filename": "sc_kernel-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b531b7082ba4da3bc3cb4099e792171e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 31312,
      "upload_time": "2023-02-10T16:22:47",
      "upload_time_iso_8601": "2023-02-10T16:22:47.371544Z",
      "url": "https://files.pythonhosted.org/packages/4e/e9/af1fd5bbf96484ce78a8c0f6ca8ed3c5f2595fdb599487f4646aa2647b1c/sc_kernel-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}