{
  "info": {
    "author": "",
    "author_email": "sfkan6 <sfkan6@yandex.ru>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ymaps\n---------\n[![PyPI Version][pypi-image]][pypi-url]\n![GitHub][license]\n\n**`ymaps`** - это клиент для [API Яндекс Карт](https://yandex.ru/dev/maps/mapsapi/) (Неофициальный)\n\nСинхронные и Асинхронные:\n\n* SearchClient, SearchAsync - [Поиск по организациям](https://yandex.ru/dev/maps/geosearch/?from=mapsapi)\n* GeocoderClient, GeocodeAsync - [Геокодер](https://yandex.ru/dev/maps/geocoder/?from=mapsapi)\n* StaticClient, StaticAsync - [Static API](https://yandex.ru/dev/maps/staticapi/?from=mapsapi)\n\n\n\n---------\n\n## Установка\n\n```\npip install ymaps\n```\n\nЗависимости\n* python 3.7+\n* [httpx](https://pypi.org/project/httpx/)\n\n---------\n## Использование\n\n> Геокоординаты задаются в порядке долгота и широта\n\n> \\* - обязательный аргумент\n\n> Все необязяательные аргументы должны передаваться по имени\n\n\n### Клиенты\n#### Аргументы:\n - api_key*, [получить ключ](https://developer.tech.yandex.ru/).\n - timeout, таймаут запроса, по умолчанию 1 секунда.\n - lang, язык ответа, по умолчанию русский (ru_RU), если в методе передан 'tr_TR', то будет использован 'tr_TR', но только для этого запроса.\n\n\n> api_key в StaticClient необязателен, указывайте только если используете коммерческую версию.\n\n\n#### Примеры:\n```\n# api_key = 'key', timeout = 10, lang = 'en_RU'\nSearchClient('key', 10, 'en_RU')\n\n# api_key = 'key', timeout = 1, lang = 'ru_RU'\nGeocoderClient('key')\n\n# api_key = None, timeout = 1, lang = 'ru_RU'\nStaticClient() # api_key=None, timeout=1, lang='ru_RU'\n```\n\n### [SearchClient](https://yandex.ru/dev/maps/geosearch/doc/concepts/request.html)\nПоиска по организациям и географическим объектам (топонимы), \n[формат ответа](https://yandex.ru/dev/maps/geosearch/doc/concepts/response_structure_toponyms.html).\n#### search()\n\nВыполняет поиск по организациям или топонимам.\n\n- __query*__, текст поискового запроса\n- __lang__, язык ответа, по умолчанию ru_RU\n- __type__, типы возвращаемых результатов. geo — топонимы, biz — организации, по умолчанию автоматическое определение типа по тексту запроса\n- __ll__, центр области поиска\n- __spn__, размеры области поиска\n- __bbox__, альтернативный способ задания области поиска, при одновременном задании bbox и ll+spn параметр bbox является более приоритетным\n- __rspn__, признак «жесткого» ограничения области поиска, по умолчанию False (не ограничивать)\n- __results__, количество возвращаемых объектов, по умолчанию 10\n- __skip__, количество объектов в ответе (начиная с первого), которое необходимо пропустить, skip должно нацело делиться на results\n\n#### Примеры:\n```\nclient = SearchClient('api_key')\n\n\n# query\nclient.search('лебединое озеро')\nclient.search('55.750788,37.618534')\nclient.search('Санкт-Петербург, ул. Блохина, 15')\nclient.search('+7 495 739-70-70')\nclient.search('ООО Яндекс')\n\n# lang\nclient.search('ООО Яндекс', lang='ru_RU')\nclient.search('Санкт-Петербург, ул. Блохина, 15', lang='be_BY')\n\n# type\nclient.search('ООО Яндекс', lang='ru_RU', type='biz')\nclient.search('лебединое озеро', type='geo')\n\n# ll, spn (используются совместно)\nclient.search('площадь Революции', ll=[37.618920, 55.756994], spn=[0.552069, 0.400552])\n\n# bbox\nclient.search('Театр', bbox=[36.83, 55.67, 38.24, 55.91])\n\n# rspn, не искать за пределами заданной области\nclient.search('Театр', rspn=True, bbox=[36.83, 55.67, 38.24, 55.91])\n\n# results\nclient.search('Администрация', results=25)\n\n# skip\nclient.search('Администрация', results=25, skip=25)\n\n\n# asynchronous\nclient = SearchAsync('api_key')\nawait client.search('ООО Яндекс', lang='ru_RU')\n```\n\n### [GeocoderClient](https://yandex.ru/dev/maps/geocoder/doc/desc/concepts/input_params.html)\n\nПрямое и обратное геокодирование, [формат ответа](https://yandex.ru/dev/maps/geocoder/doc/desc/reference/response_structure.html).\n#### geocode()\n\nПреобразует адрес в координаты объекта.\n\n- __geocode*__, текст поискового запроса\n- __rspn__, признак «жесткого» ограничения области поиска, по умолчанию False (не ограничивать)\n- __ll__, центр области поиска\n- __spn__, размеры области поиска\n- __bbox__, альтернативный способ задания области поиска, при одновременном задании bbox и ll+spn параметр bbox является более приоритетным\n- __format__, формат ответа геокодера xml, json; json по умолчанию \n- __results__, количество возвращаемых объектов, по умолчанию 10\n- __skip__, количество объектов в ответе (начиная с первого), которое необходимо пропустить, skip должно нацело делиться на results\n- __lang__, язык ответа, по умолчанию ru_RU\n\n#### reverse()\n\nПреобразует координаты в адрес объекта.  Принимает те же аргументы что и geocode() и еще:\n\n* __geocode*__, географические координаты объекта\n* __sco__, порядок записи координат, longlat — долгота, широта, latlong — широта, долгота, по умолчанию longlat\n* __kind__, вид необходимого топонима (house, street, metro, district, locality)\n\n#### Примеры:\n```\nclient = GeocoderClient('api_key')\n\n# geocode\nclient.geocode('Санкт-Петербург, ул. Блохина, 15')\n\n#reverse\nclient.reverse([37.611347, 55.760241])\n\n# format, kind\nclient.reverse([37.611347, 55.760241], format='xml', kind='street')\n\n# sco\nclient.reverse([55.760241, 37.611347], sco='latlong')\n\n# ll, spn (используются совместно)\nclient.geocode('Санкт-Петербург, ул. Блохина, 15', ll=[30.301324, 59.951921], spn=[0.552069, 0.400552])\n\n# bbox\nclient.geocode('Санкт-Петербург, ул. Блохина, 15', bbox=[36.83, 55.67, 38.24, 55.91])\n\n\n# asynchronous\nclient = GeocodeAsync('api_key')\nawait client.geocode('Санкт-Петербург, ул. Блохина, 15')\n```\n\n### [StaticClient](https://yandex.ru/dev/maps/staticapi/doc/1.x/dg/concepts/input_params.html)\n\nФормирует изображение карты в соответствии со значениями параметров,\nвозвращает bytes.\n\n#### getimage()\n\n- __ll*__, центр области поиска, долгота и широта центра карты в градусах\n- __l*__, перечень слоев, определяющих тип карты: map (схема), sat (спутник), sat,skl (гибрид), trf (Слой пробок)\n- __spn__, протяженность области показа карты по долготе и широте (в градусах)\n- __z__, уровень масштабирования карты (0-17), см\n- __size__, ширина и высота запрашиваемого изображения карты (в пикселах)\n- __scale__, коэффициент увеличения объектов на карте (от 1.0 до 4.0)\n- __pt__, содержит описание одной или нескольких меток, которые требуется отобразить на карте\n- __pl__, Содержит набор описаний геометрических фигур (ломаных и многоугольников), которые требуется отобразить на карте\n- __lang__, язык ответа, по умолчанию ru_RU\n\n#### Примеры:\n\n```\nclient = StaticClient()\n\n# l\nclient.getimage([37.620070, 55.753630], l=['sat', 'skl'])\n\n# spn\nclient.getimage([37.620070, 55.753630], l=['sat', 'trf'], spn=[0.02, 0.02])\n\n# z scale\nclient.getimage([37.620070, 55.753630], z=12, scale=2.5)\n\n# size \nclient.getimage([37.620070, 55.753630], size=[450, 450])\n\n# pt\nclient.getimage([37.620070, 55.753630], pt=['37.620070,55.753630,pmwtm1', '37.62006,55.753632,pmwtm2'])\n\n# pl\nclient.getimage([37.620070, 55.753630], pl=['c:ec473fFF,f:00FF00A0,w:5,37.51,55.83', 'c:ec473fFF,f:00FF00A0,w:5,37.49,55.70,37.51,55.83'])\n\n\n# asynchronous\nclient = StaticAsync()\nawait client.getimage([37.620070, 55.753630], l=['sat', 'skl'])\n```\n\nСохраните изображение:\n```sh\nwith open('file.png', \"wb\") as f:\n\tf.write(response)\n```\n\n## Development setup\n\n```sh\n$ python3 -m venv venv\n$ . venv/bin/activate\n$ make deps\n$ tox\n```\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n<!-- Badges -->\n[pypi-image]: https://img.shields.io/pypi/v/ymaps?color=blue\n[pypi-url]: https://pypi.org/project/ymaps/\n\n[license]: https://img.shields.io/github/license/sfkan6/ymaps\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ymaps",
    "package_url": "https://pypi.org/project/ymaps/",
    "platform": null,
    "project_url": "https://pypi.org/project/ymaps/",
    "project_urls": {
      "Home": "https://github.com/sfkan6/ymaps"
    },
    "release_url": "https://pypi.org/project/ymaps/1.1/",
    "requires_dist": [
      "httpx>=0.23.0"
    ],
    "requires_python": ">=3.7",
    "summary": "Client for Yandex Maps API",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15135417,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f56aa72791f4ba34758ae6609db68bd1e7b81b48b6226969db0dfbec6396a35",
          "md5": "25a8e09427727d6dfb1f859379fd5e97",
          "sha256": "57ce6c1b06e78404c210c1da1ec8aec6adf8004b3131c95c440600913c421f36"
        },
        "downloads": -1,
        "filename": "ymaps-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25a8e09427727d6dfb1f859379fd5e97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7343,
        "upload_time": "2022-09-02T11:18:20",
        "upload_time_iso_8601": "2022-09-02T11:18:20.435036Z",
        "url": "https://files.pythonhosted.org/packages/6f/56/aa72791f4ba34758ae6609db68bd1e7b81b48b6226969db0dfbec6396a35/ymaps-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98db9f753836039445c5f2b6a5dd41beb97a44fb8599c4a69712639cd3165f40",
          "md5": "d39dd6fe66a4b0e4d12a8fc9276623e6",
          "sha256": "84e008f5fa2c58ee6743ca6b4578da9130e0b2cd6e2913221160860bfdc73a96"
        },
        "downloads": -1,
        "filename": "ymaps-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d39dd6fe66a4b0e4d12a8fc9276623e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8989,
        "upload_time": "2022-09-02T11:18:22",
        "upload_time_iso_8601": "2022-09-02T11:18:22.064889Z",
        "url": "https://files.pythonhosted.org/packages/98/db/9f753836039445c5f2b6a5dd41beb97a44fb8599c4a69712639cd3165f40/ymaps-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cdc526121326e7be392bd4e7150ff3bc58bb58a340ced90ba838b21e3443f34",
          "md5": "81857cb2518a61ceaf099f71ae94855f",
          "sha256": "253270dbe8251948875af2b4b16e63c829587bdc3667dca41bf692d091ab25d2"
        },
        "downloads": -1,
        "filename": "ymaps-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81857cb2518a61ceaf099f71ae94855f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8528,
        "upload_time": "2022-09-18T17:39:43",
        "upload_time_iso_8601": "2022-09-18T17:39:43.762697Z",
        "url": "https://files.pythonhosted.org/packages/1c/dc/526121326e7be392bd4e7150ff3bc58bb58a340ced90ba838b21e3443f34/ymaps-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91daa715516594ca0080bdbbd5436b42cfa9a5468f85b0a2e6003b855564e206",
          "md5": "573da247e7e5a8bb1653c144531a22c2",
          "sha256": "7db3637707b6754f8b37039804ac5ad471e9f70be67fe2295ee78772f546c812"
        },
        "downloads": -1,
        "filename": "ymaps-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "573da247e7e5a8bb1653c144531a22c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6596,
        "upload_time": "2022-09-18T17:39:45",
        "upload_time_iso_8601": "2022-09-18T17:39:45.291150Z",
        "url": "https://files.pythonhosted.org/packages/91/da/a715516594ca0080bdbbd5436b42cfa9a5468f85b0a2e6003b855564e206/ymaps-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cdc526121326e7be392bd4e7150ff3bc58bb58a340ced90ba838b21e3443f34",
        "md5": "81857cb2518a61ceaf099f71ae94855f",
        "sha256": "253270dbe8251948875af2b4b16e63c829587bdc3667dca41bf692d091ab25d2"
      },
      "downloads": -1,
      "filename": "ymaps-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81857cb2518a61ceaf099f71ae94855f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8528,
      "upload_time": "2022-09-18T17:39:43",
      "upload_time_iso_8601": "2022-09-18T17:39:43.762697Z",
      "url": "https://files.pythonhosted.org/packages/1c/dc/526121326e7be392bd4e7150ff3bc58bb58a340ced90ba838b21e3443f34/ymaps-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91daa715516594ca0080bdbbd5436b42cfa9a5468f85b0a2e6003b855564e206",
        "md5": "573da247e7e5a8bb1653c144531a22c2",
        "sha256": "7db3637707b6754f8b37039804ac5ad471e9f70be67fe2295ee78772f546c812"
      },
      "downloads": -1,
      "filename": "ymaps-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "573da247e7e5a8bb1653c144531a22c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6596,
      "upload_time": "2022-09-18T17:39:45",
      "upload_time_iso_8601": "2022-09-18T17:39:45.291150Z",
      "url": "https://files.pythonhosted.org/packages/91/da/a715516594ca0080bdbbd5436b42cfa9a5468f85b0a2e6003b855564e206/ymaps-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}