{
  "info": {
    "author": "Jon-Frederick Landrigan",
    "author_email": "jon.landrigan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# eagles\n\nCreator: Jon-Frederick Landrigan\n\n\n\n## Description:\n\nThis repository contains utilities to perform tasks relating to data science \nincluding supervised and unsupervised machine learning, data exploration and statistical testing.\nThe functions primarily act as utility wrappers.\n\nFor examples of how to use the functions contained within the package see the following jupyter notebooks:\n- Supervised Tuning: https://github.com/JFLandrigan/eagles/blob/master/Supervised%20Tuning.ipynb\n- Unsupervised Tuning: https://github.com/JFLandrigan/eagles/blob/master/Unsupervised%20Tuning.ipynb\n- Exploratory: https://github.com/JFLandrigan/eagles/blob/master/Exploratory.ipynb\n\n\n\n## Install\nTo install you can use either \n```pip3 install eagles ``` to install from pypi   or \n```pip3 install git+https://github.com/JFLandrigan/eagles.git#\"egg=eagles\" ```  to install direct from the github repo in order to get the latest merges. Note when installing direct from github, while it may contain the latest updates, it may not be as stable as compared to releases installed from pypi. \n\nOnce installed it can be imported like any other python package. For example:\n\n```\nfrom eagles.Supervised import supervised_tuner as st\nfrom eagles.Unsupervised import unsupervised_tuner as ut\nfrom eagles.Exploratory import explore, missing, distributions, categories , outcomes\n```\n\n\n\n## Supported Model Abbreviations\n\nNote that the functions primarily support sklearn model objects however if a model follows the standard fit, predict and predict_proba methods it can be passed in directly as well.\n\n### Supervised\n\n| Classification                        | Regression                               |\n| ------------------------------------- | ---------------------------------------- |\n| \"rf_clf\" : RandomForestClassifier     | \"rf_regress\" : RandomForestRegressor     |\n| \"gb_clf\" : GradientBoostingClassifier | \"gb_regress\" : GradientBoostingRegressor |\n| \"dt_clf\" : DecisionTreeClassifier     | \"dt_regress\" : DecisionTreeRegressor     |\n| \"logistic\" : LogisticRegression       | \"linear\" : LinearRegression              |\n| \"svc\" : SVC                           | \"lasso\" : Lasso                          |\n| \"knn_clf\" : KNeighborsClassifier      | \"ridge\":Ridge                            |\n| \"nn\" : MLPClassifier                  | \"elastic\" : ElasticNet                   |\n| \"ada_clf\" : AdaBoostClassifier        | \"svr\" : SVR                              |\n| \"et_clf\": ExtraTreesClassifier        | \"knn_regress\" : KNeighborsRegressor      |\n| \"vc_clf\"  :VotingClassifier           | \"ada_regress\" : AdaBoostRegressor        |\n|                                       | \"et_regress\": ExtraTreesRegressor        |\n|                                       | \"vc_regress\" : VotingRegressor           |\n\nDefaults:\n\nVotingClassifier: Estimators - RandomForestClassifier and LogisticRegression, Voting - Hard, Weights - Uniform\n\nVotingRegressor: Estimators - RandomForestRegressor and LinearRegression, Weights - Uniform\n\n### Unsupervised\n\nCurrently the functions primarily support the following the sklearn algorithms however other model objects can be passed in assuming they support the ```fit_predict()``` methodology like other sklearn clustering algorithms. \n\n- \"kmeans\"\n- \"agglomerativeclustering\"\n- \"dbscan\"\n\n\n\n## Metric Options\n\n### Supervised\n\nWhen using ```supervised_tuner.tune_test_model()``` the tune_metric argument is used for the parameter search and the *eval_metric* argument is used for the final model evaluation (eval metrics should be passed in as a list). For ```supervised_tuner.model_eval()``` the metrics argument is used to tell the function what metrics to use (these should be passed in a list). If no metrics are passed in (for tuning and/or eval) classification problems will default to 'f1' and regression problems will default to 'mse'. Note that for multi-class classification problems the metrics default to \"macro\" averages. \n\n| Classification                                               | Regression                                                   |\n| :----------------------------------------------------------- | :----------------------------------------------------------- |\n| 'accuracy'                                                   | 'mse' - mean square error                                    |\n| 'f1'                                                         | 'rmse' - root mean square error                              |\n| 'precision'                                                  | 'mae' - mean absolute error                                  |\n| 'recall'                                                     | 'mape' - mean absolute percent error (note zeros are excluded) |\n| 'roc_auc' - Area Under the Receiver Operating Characteristic Curve | 'r2' - r squared                                             |\n| 'precision_recall_auc' - Area Under the Precision Recall Curve |                                                              |\n\n### Unsupervised\n\nWhen ```unsupervised_tuner.find_optimal_clusters()``` with K-Means or Agglomerative Clustering is used the following metrics can be used to find the \"optimal\" or \"suggested \"number of clusters however thorough analysis should be performed.\n\n- \"max_sil\" : After generating models based on the range of cluster numbers desired the algorithm will pick the optimal number of clusters as the number of  clusters which resulted in the highest max silhouette score. \n- \"knee_wss\"  :  After generating models based on the range of cluster numbers desired the ```KneeLocator()``` method used (provided by the kneed package) to find the \"elbow\" or point at which increasing the number of clusters does not significantly decrease the amount of within cluster variability. \n\nNote the DBSCAN algorithm uses internal methods to find the optimal number of clusters. \n\n\n\n## supervised_tuner.tune_test_model() parameter search options\n\n- 'random_cv' : sklearn implementation of random parameter search. Can pass in n_jobs to parallelize fits and n_iterations to determine total number of fits. \n- 'bayes_cv' :  scikit-optimize implementation of bayes parameter search. Can pass in n_jobs to parallelize fits and n_iterations to determine total number of fits. \n- 'grid_cv' : sklearn implementation of paramter grid search. Can pass in n_jobs to parallelize fits.\n\n\n\n## How to pass in parameters for supervised_tuner.tune_test_model()\n\n- Single model: pass in relative parameters as a dictionary with key (parameter) value (listed parameter setting) pairs\n\n- Model embedded within a pipeline: pass in relative parameters as dictionary  with key (parameter) value (listed parameter setting) pairs. Note that the parameter keys should follow the format  ```clf__< parameter >```\n\n- Models embedded within a VotingClassifier or Voting Regressor: pass in relative parameters as dictionary  with key (parameter) value (listed parameter setting) pairs. Note that the parameter keys should follow the format (note the following example assumes a random forest and a logistic regression):\n\n  ```\n  pars = {'rf__clf__n_estimators':[x for x in range(100,300,50)]\n          ,'rf__clf__max_depth':[5, 10, 20]\n          ,'rf__clf__class_weight': [None, 'balanced_subsample']\n\n          ,'lr__clf__penalty': ['l1','l2']\n          ,'lr__clf__class_weight':[None, 'balanced']\n          ,'lr__clf__max_iter':[100, 1000]\n          ,'lr__clf__C': [.25,.5,1]\n\n          ,'weights':[[1,1],[1,2],[2,1]] \n         }\n  ```\n\n\n\n## Passing in Pipelines\n\nSklearn pipeline objects can be passed directly into ```supervised_tuner.model_eval()``` and ```supervised_tuner.tune_test_model()``` via the model argument (i.e. when a model is embedded within a pipeline) or the pipe argument. When the pipeline is passed into the pipe argument the model will be appended and/or embedded within the passed in pipeline. Note the following conventions for pipeline prefixes should be followed:\n\n- 'impute' : for imputation steps\n- 'feature_selection' : for feature selection steps (using sklearn feature selection select from model)\n- 'scale': for scaling steps\n- 'clf' : for the classifiers\n\nSee the following pipeline construction examples\n\n```\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import MinMaxScaler\n\nlr_pipe = Pipeline([('impute', SimpleImputer(strategy='median'))\n                    ,('scale', MinMaxScaler())\n                    ,('clf', LogisticRegression())])\n```\n\n\n\n## Logging\n\nThe supervised_tuner ```model_eval()``` allows the used to log out a text file of the models performance and ```tune_test_model()``` allows the user to log out a text file containing relevant information for the call (e.g. tuning parameters, and model performance), the final model object and the data used for training and testing. ```model_eval()``` does not currently allow for data and model logging. See the following examples for argument definitions: \n\n```\n# Model evaluation\nres = st.model_eval(\n    X=iris[fts],\n    y=iris['dummy'],\n    model='logistic',\n    params={'solver':'liblinear'},\n    metrics=[\"accuracy\", \"f1\", \"roc_auc\"],\n    bins=None,\n    pipe=None,\n    scale=None,\n    num_top_fts=None,\n    num_cv=5,\n    get_ft_imp=True,\n    random_seed=4,\n    binary=True,\n    disp=True,\n    log=\"log\",\n    log_name=\"model_eval_test.txt\",\n    log_path=None,\n    log_note=\"This is a test of the model eval function\"\n)\n\n# Tuning and testing a model (Note if only a log is wanted the argument can be set to 'log')\nres = st.tune_test_model(X=iris[fts],\n                        y=iris['dummy'],\n                        model='logistic',\n                        params=pars,\n                        tune_metric=\"f1\",\n                        eval_metrics=[\"accuracy\", \"f1\", \"precision_recall_auc\"],\n                        num_cv=5,\n                        pipe=None,\n                        scale=None,\n                        select_features=None,\n                        bins=None,\n                        num_top_fts=None,\n                        tuner=\"grid_cv\",\n                        n_iterations=15,\n                        get_ft_imp=True,\n                        n_jobs=2,\n                        random_seed=None,\n                        binary=True,\n                        disp=True,\n                        log=\"log\",\n                        log_name=\"model_tunetest_test.txt\",\n                        log_path=None,\n                        log_note=\"This is a test of the tune test function\"\n                    )\n```\n\n**Note that if no log path is passed in a data subdirectory will be created in eagles/eagles/Supervised/utils/**\n\n\n\n## Exploratory Module\n\nThe Exploratory module contains functions and tools for performing exploratory data analysis on pandas data frames. Currently the module includes the following:\n\n- explore: Includes run_battery(), get_base_descriptives() and get_correlations()\n  - run_battery() options include info, missing, descriptive, distributions, correlations and category_stats\n- missing: Includes get_proportion_missing()\n- distributions: Includes find_caps()\n- categories: Includes get_sample_stats() and get_multi_group_stats()\n- outcomes: Includes stats_by_outcome()\n  - stats_by_outcome() analysis options include descriptives, proportions, regress. Note when the outcome type is continuous the descriptives option also includes a correlations analysis. \n\n\n\n## Notes\n\nCurrently the functions primarily rely on the use of pandas data frames. Numpy matrices can be passed in\nhowever this may result in unexpected behavior. \n\n\n\n## Packages Required (see requirements.txt for versions)\n- kneed\n- matplotlib\n- numpy\n- pandas\n- scikit-learn\n- scikit-optimize\n- scipy\n- seaborn\n- statsmodels\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JFLandrigan/eagles",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eagles",
    "package_url": "https://pypi.org/project/eagles/",
    "platform": "",
    "project_url": "https://pypi.org/project/eagles/",
    "project_urls": {
      "Homepage": "https://github.com/JFLandrigan/eagles"
    },
    "release_url": "https://pypi.org/project/eagles/0.1.21/",
    "requires_dist": [
      "ipython",
      "kneed",
      "matplotlib",
      "numpy",
      "pandas",
      "scikit-learn",
      "scikit-optimize",
      "scipy",
      "seaborn",
      "statsmodels"
    ],
    "requires_python": "",
    "summary": "Data science utility package to help practitioners do ML and EDA work.",
    "version": "0.1.21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9069571,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0aeeb3a67e16c798fb3efafacdf444593f0dcf530cf4ca55cb25b8c78043aa97",
          "md5": "085fd8490b6ed1b414c8830f632e2510",
          "sha256": "145afd44719a94f69da8dc15658e99abf6faffdfdb88e17fbe3e87314a9f33f3"
        },
        "downloads": -1,
        "filename": "eagles-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "085fd8490b6ed1b414c8830f632e2510",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43173,
        "upload_time": "2020-09-07T16:49:41",
        "upload_time_iso_8601": "2020-09-07T16:49:41.176247Z",
        "url": "https://files.pythonhosted.org/packages/0a/ee/b3a67e16c798fb3efafacdf444593f0dcf530cf4ca55cb25b8c78043aa97/eagles-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f978888394fa1d537c95a008a07b39ae6b584936b04024f4eb462dc60917f7f",
          "md5": "ef48cd2694ea46720489f2fb9d14d711",
          "sha256": "2b470a7f4e31d3d1e600861f5e0089f6fc84959a21e84ac4d7c84bf63b38487e"
        },
        "downloads": -1,
        "filename": "eagles-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef48cd2694ea46720489f2fb9d14d711",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40257,
        "upload_time": "2020-09-07T16:49:43",
        "upload_time_iso_8601": "2020-09-07T16:49:43.483590Z",
        "url": "https://files.pythonhosted.org/packages/7f/97/8888394fa1d537c95a008a07b39ae6b584936b04024f4eb462dc60917f7f/eagles-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05802e569f15443b551d53cf01b07877a940a1b3be8a292d5d0b60f4291d840c",
          "md5": "18e4d31d5436609cb4ccf0fe56a6e1b9",
          "sha256": "d07addf33b94b0f5162412e316c74c8f6e71ed0b9078d066996037f622a930a2"
        },
        "downloads": -1,
        "filename": "eagles-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18e4d31d5436609cb4ccf0fe56a6e1b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44580,
        "upload_time": "2020-09-24T00:42:32",
        "upload_time_iso_8601": "2020-09-24T00:42:32.422918Z",
        "url": "https://files.pythonhosted.org/packages/05/80/2e569f15443b551d53cf01b07877a940a1b3be8a292d5d0b60f4291d840c/eagles-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9aa7e3e5888f2c2996d9134745ce9916d9c1abf9746f511e233a55cc9f85d3ea",
          "md5": "1206eb70ab94c93fd15f89c0ecd8e058",
          "sha256": "1a0866c0f3da9627d48c6402b61f0263e83d47f23d184a4a81ec63ee0446ec7e"
        },
        "downloads": -1,
        "filename": "eagles-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1206eb70ab94c93fd15f89c0ecd8e058",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41496,
        "upload_time": "2020-09-24T00:42:33",
        "upload_time_iso_8601": "2020-09-24T00:42:33.759117Z",
        "url": "https://files.pythonhosted.org/packages/9a/a7/e3e5888f2c2996d9134745ce9916d9c1abf9746f511e233a55cc9f85d3ea/eagles-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7042dfc69af4cf7388b052efae7000f49502d9b376e1aef1380698f7b298e42",
          "md5": "e4646f86103f95fbda69c13fd1ad7e5a",
          "sha256": "70107228620f3b039cb924113e9374d84e31e734c0fd99f56a467d7a4806b6df"
        },
        "downloads": -1,
        "filename": "eagles-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4646f86103f95fbda69c13fd1ad7e5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72325,
        "upload_time": "2021-01-04T21:03:43",
        "upload_time_iso_8601": "2021-01-04T21:03:43.082786Z",
        "url": "https://files.pythonhosted.org/packages/e7/04/2dfc69af4cf7388b052efae7000f49502d9b376e1aef1380698f7b298e42/eagles-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f20ca87ee1e4421854a62d26eee5e93a7a9b53a6d57f7424281565fa22538f6e",
          "md5": "1780097e6e6c688948d6f11cce835618",
          "sha256": "b2a10c1833bd0ebde0563421b04217696c82318e3f1c6414af96b026e9d698d6"
        },
        "downloads": -1,
        "filename": "eagles-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1780097e6e6c688948d6f11cce835618",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60486,
        "upload_time": "2021-01-04T21:03:44",
        "upload_time_iso_8601": "2021-01-04T21:03:44.348851Z",
        "url": "https://files.pythonhosted.org/packages/f2/0c/a87ee1e4421854a62d26eee5e93a7a9b53a6d57f7424281565fa22538f6e/eagles-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fcd0a46b2d57c08056e5be76174ee44073deefb7e0cf796adb3a0bbb407568d",
          "md5": "b67b8d2d64ac79eb2a2bba3a666a3df8",
          "sha256": "07b5782cd6f4b96ed1df223b2400a4bdb42466dd3992b7e0e7cba708bd317a70"
        },
        "downloads": -1,
        "filename": "eagles-0.1.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b67b8d2d64ac79eb2a2bba3a666a3df8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72583,
        "upload_time": "2021-01-06T18:22:26",
        "upload_time_iso_8601": "2021-01-06T18:22:26.980273Z",
        "url": "https://files.pythonhosted.org/packages/5f/cd/0a46b2d57c08056e5be76174ee44073deefb7e0cf796adb3a0bbb407568d/eagles-0.1.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbb2f2ac949d27a6e21f75441d5edff230975bc3fadf7411095cbe05bf68137e",
          "md5": "f96f6a3ac8c3d6aa57e75bb94de5fda8",
          "sha256": "c363baf7a2a9556191e384b160bbab9053d27ff13285f49648b7abce506441c2"
        },
        "downloads": -1,
        "filename": "eagles-0.1.21.tar.gz",
        "has_sig": false,
        "md5_digest": "f96f6a3ac8c3d6aa57e75bb94de5fda8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60777,
        "upload_time": "2021-01-06T18:22:28",
        "upload_time_iso_8601": "2021-01-06T18:22:28.150804Z",
        "url": "https://files.pythonhosted.org/packages/cb/b2/f2ac949d27a6e21f75441d5edff230975bc3fadf7411095cbe05bf68137e/eagles-0.1.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fcd0a46b2d57c08056e5be76174ee44073deefb7e0cf796adb3a0bbb407568d",
        "md5": "b67b8d2d64ac79eb2a2bba3a666a3df8",
        "sha256": "07b5782cd6f4b96ed1df223b2400a4bdb42466dd3992b7e0e7cba708bd317a70"
      },
      "downloads": -1,
      "filename": "eagles-0.1.21-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b67b8d2d64ac79eb2a2bba3a666a3df8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 72583,
      "upload_time": "2021-01-06T18:22:26",
      "upload_time_iso_8601": "2021-01-06T18:22:26.980273Z",
      "url": "https://files.pythonhosted.org/packages/5f/cd/0a46b2d57c08056e5be76174ee44073deefb7e0cf796adb3a0bbb407568d/eagles-0.1.21-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbb2f2ac949d27a6e21f75441d5edff230975bc3fadf7411095cbe05bf68137e",
        "md5": "f96f6a3ac8c3d6aa57e75bb94de5fda8",
        "sha256": "c363baf7a2a9556191e384b160bbab9053d27ff13285f49648b7abce506441c2"
      },
      "downloads": -1,
      "filename": "eagles-0.1.21.tar.gz",
      "has_sig": false,
      "md5_digest": "f96f6a3ac8c3d6aa57e75bb94de5fda8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 60777,
      "upload_time": "2021-01-06T18:22:28",
      "upload_time_iso_8601": "2021-01-06T18:22:28.150804Z",
      "url": "https://files.pythonhosted.org/packages/cb/b2/f2ac949d27a6e21f75441d5edff230975bc3fadf7411095cbe05bf68137e/eagles-0.1.21.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}