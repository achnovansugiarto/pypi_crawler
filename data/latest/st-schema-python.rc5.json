{
  "info": {
    "author": "erickvneri",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Home Automation"
    ],
    "description": "# SmartThings Schema Connector Python SDK\n\nThe _SmartThings Schema Connector Python SDK_ is a package that simplify resources of\n**Schema Connector** instances through built-in interfaces.\n\n### Installation\n\nInstall it using `pip`:\n\n    pip install st-schema-python\n\n---\n\n### SchemaConnector structure\n\nUsing **class inheritance**, we'll gain access to a series of resources to control the request and response data of _Interaction types_.\n\n```python\nfrom stschema import SchemaConnector\n\n\nclass MyConnector(SchemaConnector):\n    def __init__(self, *opts):\n        SchemaConnector.__init__(self, enable_logger=True)\n\n    def discovery_handler(self, request_id, access_token):\n        # The discovery_handler built-in method\n        # gives access to discoveryRequest data.\n        #\n        # SchemaDevice instances must be passed\n        # as a list argument to discovery_response\n        # built-in method.\n        declared_devices = [...]\n        return self.discovery_response(declared_devices, request_id)\n\n    def state_refresh_handler(self, devices, request_id, access_token):\n        # The state_refresh_handler gives access to\n        # stateRefreshRequest data.\n        # A filtered list of SchemaDevice instances\n        # must be passed as response to the\n        # state_refresh_response built-in method.\n        filtered_devices = [...]\n        return self.state_refresh_response(filtered_devices, request_id)\n\n    def command_handler(self, devices, request_id, access_token):\n        # The command_handler gives access to the\n        # commandRequest data.\n        # A list of an updated SchemaDevice instance\n        # must be passed as response to the\n        # command_response built-in method.\n        updated_device = [...]\n        return  self.command_response(updated_device, request_id)\n\n    def grant_callback_access(self, callback_authentication, callback_urls):\n        # Built-in method triggered with the\n        # grantCallbackAccess interaction type.\n        pass\n\n    def integration_deleted(self, callback_authentication):\n        # Built-in method triggered with the\n        # integrationDeleted interactionType.\n        pass\n\n    def interaction_result_handler(self, interaction_result, origin):\n        # The interaction_result_handler provides\n        # a description of the error triggered\n        # between interaction type responses.\n        pass\n```\n\n_**Note**: If any resource handler is not implemented but gets used by the `SchemaConnector. interaction_handler` built-in method, a `NotImplementedError` exception will be raised._\n\n---\n\n### SchemaDevice definition.\n\nSchemaDevice instance supporting the minimal requirements to create a virtual device at the _SmartThings ecosystem_.\n\n1. Device definition using the SchemaDevice class and the `set_mn` instance method to specify the manufacturer's information:\n\n```python\nfrom stschema import SchemaDevice\n\n\nmy_device = SchemaDevice(\n    '{{external_device_id}}',\n    '{{friendly_name}}',\n    '{{device_handler_type}}'\n)\n\nmy_device.set_mn(\n    '{{manufacturer_name}}',\n    '{{model_name}}'\n)\n```\n\n2. States definition applying the `set_state` instance method:\n\n```python\nmy_device.set_state(\n    'st.{{capability_id}}',\n    '{{attribute}}',\n    '{{value}}'\n)\n```\n\n---\n\n### SchemaConnector as a web-service with the _Http.server_ built-in module.\n\nUsing the Python's built-in module _Http.server_, here's an example of an application that will host our Webhook endpoint and our _SchemaConnector_ instance\nto create and control a virtual switch at the _SmartThings_ app.\n\n```python\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom stschema import SchemaConnector, SchemaDevice\nimport json\n\n\n# MyConnector definition\nclass MyConnector(SchemaConnector):\n    def __init__(self, *opts):\n        SchemaConnector.__init__(self, enable_logger=True)\n\n    def discovery_handler(self, request_id, access_token):\n        # Device definition using the SchemaDevice class\n        my_switch = SchemaDevice(  # Device info\n            'xyz_example_id_xyz',\n            'Office light',\n            'c2c-switch')\n        my_switch.set_mn(  # Manufacturer info\n            'Switch Mn Example',\n            'Model X1')\n        my_switch.set_context(\n            'Office',\n            [],\n            ['light'])\n\n        declared_devices = [my_switch]\n        return self.discovery_response(declared_devices, request_id)\n\n    def state_refresh_handler(self, devices, request_id, access_token):\n        # State Refresh Request information\n        device_id = devices[0]['externalDeviceId']\n\n        # SchemaDevice Instance\n        # and state definition.\n        my_device = SchemaDevice(device_id)\n        my_device.set_state(\n            'st.switch',\n            'switch',\n            'on'\n        )\n        # Collection of devices, in this\n        # case, just my_device instance.\n        filtered_devices = [my_device]\n        return self.state_refresh_response(filtered_devices, request_id)\n\n    def command_handler(self, devices, request_id, access_token):\n        # Command Request information\n        device_id = devices[0]['externalDeviceId']\n        command = devices[0]['commands'][0]\n        # SchemaDevice instance applying\n        # the updated state as commanded.\n        my_device = SchemaDevice(device_id)\n        my_device.set_state(\n            'st.switch',\n            'switch',\n            command['command'] # 'on' or 'off'\n        )\n        # Updated device passed as a list argument.\n        updated_device = [my_device]\n        return  self.command_response(updated_device, request_id)\n\n    def interaction_result_handler(self, interaction_result: dict, origin: str):\n        print(interaction_result, origin)\n        pass\n\n\n# MyConnector instance\nmy_connector = MyConnector()\n\n\nclass WebhookServer(BaseHTTPRequestHandler):\n    \"\"\"\n    This class will serve as endpoint to handle\n    the POST Http Requests sent to the\n    registered Target Url. Notice that this\n    webhook instance won't differentiate endpoints.\n    \"\"\"\n    def do_POST(self):\n        # POST Http Request handler.\n        content_length = int(self.headers['Content-Length'])\n        req_body = self.rfile.read(content_length).decode('utf-8')\n        # getting JSON body from request.\n        json_data = json.loads(req_body)\n        return self._set_response(json_data)\n\n    def _set_response(self, data):\n        # interaction_handler is a\n        # SchemaConnector built-in method\n        # that takes the JSON body as\n        # argument.\n        connector_handler = my_connector.interaction_handler(data)\n        # JSON Interaction types responses\n        res_data = json.dumps(connector_handler).encode('utf-8')\n        self._set_headers()\n        self.wfile.write(res_data)\n\n    def _set_headers(self):\n        # Declare application/json\n        # headers to parse JSON string\n        # response.\n        self.send_response(200)\n        self.send_header('Content-type', 'application/json')\n        self.end_headers()\n\n\nif __name__ == '__main__':\n    server_address = ('', 8000)\n    http = HTTPServer(server_address, WebhookServer)\n    http.serve_forever()\n\n```\n\n_Notice that the `SchemaConnector.grant_callback_access` built-in resource hasn't been implemented. In this case, when the Schema Connector instance gets integrated for the first time at the SmartThings ecosystem, the `NotImplementedError` exception will be raised as following:_\n\n    ...\n    NotImplementedError: [grant_callback_access] - Interaction resource handler not implemented\n\n---\n\n### _Developer Note_.\n\nBefore pushing any updates into the _SmartThings Schema Connector Python SDK_, please install `pytest` and execute the follwing command to run the full _test suite_.\n\n    python3 -m pytest -p no:cacheprovider\n\n---\n\nTo learn more about _SmartThings Schema Connector_ integrations, visit the _[SmartThings Community Forums](https://community.smartthings.com/c/developer-programs)_.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/erickvneri/st-schema-python/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "st-schema-python",
    "package_url": "https://pypi.org/project/st-schema-python/",
    "platform": "",
    "project_url": "https://pypi.org/project/st-schema-python/",
    "project_urls": {
      "Homepage": "https://github.com/erickvneri/st-schema-python/"
    },
    "release_url": "https://pypi.org/project/st-schema-python/2.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "SmartThings Schema Connector Python SDK",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11181673,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86c1ff0dfdc7fcb94dfdb18f7d32121e29571256d318638ea15177216b95618e",
          "md5": "3f7d7c8fdbf3ca02d34828237c585602",
          "sha256": "edb7cb82580257cb90e3f0533ffe86cb4fd3fc7dcf8098b53f74853e561d55be"
        },
        "downloads": -1,
        "filename": "st_schema_python-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f7d7c8fdbf3ca02d34828237c585602",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30253,
        "upload_time": "2020-10-17T03:40:56",
        "upload_time_iso_8601": "2020-10-17T03:40:56.688609Z",
        "url": "https://files.pythonhosted.org/packages/86/c1/ff0dfdc7fcb94dfdb18f7d32121e29571256d318638ea15177216b95618e/st_schema_python-1.0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "installation ref"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e0f9918584b8cfaf6fe4e8f448aee9aec6c258f7901280aff57530baf8029f8",
          "md5": "7290e3eb60f73d96e2555d8485552b96",
          "sha256": "7b3adccab37ffddcf85f2644f9e411559fe4263dfa8c7453a78c8eae08ace7e9"
        },
        "downloads": -1,
        "filename": "st-schema-python-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7290e3eb60f73d96e2555d8485552b96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13973,
        "upload_time": "2020-10-17T03:40:35",
        "upload_time_iso_8601": "2020-10-17T03:40:35.759593Z",
        "url": "https://files.pythonhosted.org/packages/0e/0f/9918584b8cfaf6fe4e8f448aee9aec6c258f7901280aff57530baf8029f8/st-schema-python-1.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": "installation ref"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21533ae9d9e93d529cfb4a1335d292b9cc367333cd89c6019c0b074bb8562724",
          "md5": "57a871a161015c5d5fe3a6c282983159",
          "sha256": "d172bdd0703915d2ca4c0e0eb2014a1d1906a66b0115118c5110c74b019a3bda"
        },
        "downloads": -1,
        "filename": "st_schema_python-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57a871a161015c5d5fe3a6c282983159",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30247,
        "upload_time": "2020-10-17T03:42:53",
        "upload_time_iso_8601": "2020-10-17T03:42:53.069997Z",
        "url": "https://files.pythonhosted.org/packages/21/53/3ae9d9e93d529cfb4a1335d292b9cc367333cd89c6019c0b074bb8562724/st_schema_python-1.0.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "too many dependencies"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b4f36908ce6c8bf8bbeb32a6f68a87eb0fc443f6b446ed1f053d406eb3c49e1",
          "md5": "033e450414ad0fc4d25cb0941ed8ddc2",
          "sha256": "b584ddee69513560c56adc340a3b991b7c9441e7d7d0e01c15209ecf2f2d937a"
        },
        "downloads": -1,
        "filename": "st-schema-python-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "033e450414ad0fc4d25cb0941ed8ddc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13964,
        "upload_time": "2020-10-17T03:43:15",
        "upload_time_iso_8601": "2020-10-17T03:43:15.332326Z",
        "url": "https://files.pythonhosted.org/packages/3b/4f/36908ce6c8bf8bbeb32a6f68a87eb0fc443f6b446ed1f053d406eb3c49e1/st-schema-python-1.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": "too many dependencies"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc3f316d8fd2f08d32060ad650221c61f7de9a4cba10ed861bd9e3d28d553d2c",
          "md5": "7532f0681d5d781db9d5b703d092f0dc",
          "sha256": "770494c319576114b261c53370c3f5b7f203fd9d18a4d5ba8f51d98bb6a2ec1a"
        },
        "downloads": -1,
        "filename": "st_schema_python-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7532f0681d5d781db9d5b703d092f0dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30321,
        "upload_time": "2020-10-23T18:37:43",
        "upload_time_iso_8601": "2020-10-23T18:37:43.849122Z",
        "url": "https://files.pythonhosted.org/packages/fc/3f/316d8fd2f08d32060ad650221c61f7de9a4cba10ed861bd9e3d28d553d2c/st_schema_python-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6abaf2bf0a8410176895f10c3a62e76322493beb997a1e7771fccca6e505a5df",
          "md5": "e4db6a502ada48723621086841b588db",
          "sha256": "dca2967422ac71c9923e5f53bd293b3a35d4e02f0b8913b78e7170f012f15448"
        },
        "downloads": -1,
        "filename": "st-schema-python-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e4db6a502ada48723621086841b588db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14005,
        "upload_time": "2020-10-23T18:37:34",
        "upload_time_iso_8601": "2020-10-23T18:37:34.394774Z",
        "url": "https://files.pythonhosted.org/packages/6a/ba/f2bf0a8410176895f10c3a62e76322493beb997a1e7771fccca6e505a5df/st-schema-python-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "628c5e679956b87d068db64d29faaf931118ec5748057c7d5749e29c9e6edaeb",
          "md5": "77ab8bde8d186ce5ca2051860743eef2",
          "sha256": "d79c744a0b4f220f3dead0310d85a3c633fa26980c7ef31faec29b33a1077402"
        },
        "downloads": -1,
        "filename": "st_schema_python-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77ab8bde8d186ce5ca2051860743eef2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30318,
        "upload_time": "2020-11-04T16:49:24",
        "upload_time_iso_8601": "2020-11-04T16:49:24.492168Z",
        "url": "https://files.pythonhosted.org/packages/62/8c/5e679956b87d068db64d29faaf931118ec5748057c7d5749e29c9e6edaeb/st_schema_python-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "362574d276e4ca25bd791078886e9934daef8014b0c4b576f02aa4bd500c624b",
          "md5": "3156ed42ca57c90e8bb7ea824140af9f",
          "sha256": "c66caea0fc7acc5c384ed156036b9d337966f3556053a8a0a326607f2fe69c02"
        },
        "downloads": -1,
        "filename": "st-schema-python-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3156ed42ca57c90e8bb7ea824140af9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14000,
        "upload_time": "2020-11-04T16:49:12",
        "upload_time_iso_8601": "2020-11-04T16:49:12.293450Z",
        "url": "https://files.pythonhosted.org/packages/36/25/74d276e4ca25bd791078886e9934daef8014b0c4b576f02aa4bd500c624b/st-schema-python-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad9f8d76d6cc56d93ec979b86194fa2aca7504ae676190e4b41e3b91e2a5876d",
          "md5": "599439ec0a40f9d0ad8af5a094dedf39",
          "sha256": "df033ae594a88d88e1109be3be8a335eedb0204cd9a16736c84b0e6433ba46c8"
        },
        "downloads": -1,
        "filename": "st-schema-python-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "599439ec0a40f9d0ad8af5a094dedf39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16703,
        "upload_time": "2021-08-15T04:06:20",
        "upload_time_iso_8601": "2021-08-15T04:06:20.678868Z",
        "url": "https://files.pythonhosted.org/packages/ad/9f/8d76d6cc56d93ec979b86194fa2aca7504ae676190e4b41e3b91e2a5876d/st-schema-python-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad9f8d76d6cc56d93ec979b86194fa2aca7504ae676190e4b41e3b91e2a5876d",
        "md5": "599439ec0a40f9d0ad8af5a094dedf39",
        "sha256": "df033ae594a88d88e1109be3be8a335eedb0204cd9a16736c84b0e6433ba46c8"
      },
      "downloads": -1,
      "filename": "st-schema-python-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "599439ec0a40f9d0ad8af5a094dedf39",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16703,
      "upload_time": "2021-08-15T04:06:20",
      "upload_time_iso_8601": "2021-08-15T04:06:20.678868Z",
      "url": "https://files.pythonhosted.org/packages/ad/9f/8d76d6cc56d93ec979b86194fa2aca7504ae676190e4b41e3b91e2a5876d/st-schema-python-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}