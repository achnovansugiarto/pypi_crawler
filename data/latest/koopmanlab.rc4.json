{
  "info": {
    "author": "Wei Xiong, Tian Yang",
    "author_email": "xiongw21@mails.tsinghua.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<h1 align=\"center\">\n<img src=\"https://github.com/Koopman-Laboratory/KoopmanLab/blob/main/logo.png\" width=\"700\">\n</h1><br>\n\n[![PyPI Version](https://img.shields.io/pypi/v/koopmanlab?color=54B435&label=PyPI)](\nhttps://pypi.org/project/koopmanlab/)\n[![Code Sizez](https://img.shields.io/github/languages/code-size/Koopman-Laboratory/KoopmanLab?label=Code%20Size)](\nhttps://github.com/Koopman-Laboratory/KoopmanLab)\n[![License](https://img.shields.io/pypi/l/koopmanlab?color=FF7000&label=License)](\nhttps://github.com/Koopman-Laboratory/KoopmanLab/blob/main/LICENSE)\n\nKoopmanLab is a package for Koopman Neural Operator with Pytorch.\n\nFor more information, please refer to the following paper, where we provid detailed mathematical derivations, computational designs, and code explanations. \n  - \"[Koopman neural operator as a mesh-free solver of non-linear partial differential equations](https://arxiv.org/abs/2301.10022).\" arXiv preprint arXiv:2301.10022 (2023). \n  - \"[KoopmanLab: machine learning for solving complex physics equations](https://arxiv.org/abs/2301.01104).\" arXiv preprint arXiv:2301.01104 (2023). \n\n# Installation\nKoopmanLab requires the following dependencies to be installed:\n- PyTorch >= 1.10\n- Numpy >= 1.23.2\n- Matplotlib >= 3.3.2\n\nYou can install KoopmanLab package via the following approaches:\n\n- Install the stable version with `pip`:\n\n```\n$ pip install koopmanlab\n```\n\n- Install the current version by source code with `pip`:\n```\n$ git clone https://github.com/Koopman-Laboratory/KoopmanLab.git\n$ cd KoopmanLab\n$ pip install -e .\n```\n# Quick Start\n\nIf you install KoopmanLab successfully, you can use our model directly by:\n\n``` python\nimport koopmanlab as kp\nencoder = kp.models.encoder_mlp(t_in, operator_size)\ndecoder = kp.models.decoder_mlp(t_in, operator_size)\nKNO1d_model = kp.models.KNO1d(encoder, decoder, operator_size, modes_x = 16, decompose = 6)\n# Input size [batch, x, t_in] Output size [batch, x, t_in] for once iteration\nKNO2d_model = kp.models.KNO2d(encoder, decoder, operator_size, modes_x = 10, modes_y = 10, decompose = 6)\n# Input size [batch, x, t_in] Output size [batch, x, t_in] for once iteration\n```\nIf you do not want to customize the algorithms for training, testing and plotting, we highly recommend that you use our basic APIs to use Koopman model.\n\n# Usage\nYou can read `demo_ns.py` to learn about some basic APIs and workflow of KoopmanLab. If you want to run `demo_ns.py`, the following data need to be prepared in your computing resource. \n- [Dataset](https://drive.google.com/drive/folders/1UnbQh2WWc6knEHbLn-ZaXrKUZhp7pjt-)\n\nIf you want to generate Navier-Stokes Equation data by yourself, the data generation configuration file can be found in the following link.\n\n- [File](https://github.com/zongyi-li/fourier_neural_operator/tree/master/data_generation/navier_stokes)\n\nOur package provides an easy way to create a Koopman neural operator model.\n``` python\nimport koopmanlab as kp\nMLP_KNO_2D = kp.model.koopman(backbone = \"KNO2d\", autoencoder = \"MLP\", device = device)\nMLP_KNO_2D = kp.model.koopman(backbone = \"KNO2d\", autoencoder = \"MLP\", o = o, m = m, r = r, t_in = 10, device = device)\nMLP_KNO_2D.compile()\n## Parameter definitions:\n# o: the dimension of the learned Koopman operator\n# f: the number of frequency modes below frequency truncation threshold\n# r: the power of the Koopman operator\n# T_in: the duration length of input data\n# device : if CPU or GPU is used for calculating\n\nViT_KNO = kp.model.koopman_vit(decoder = \"MLP\", resolution=(64, 64), patch_size=(2, 2),\n            in_chans=1, out_chans=1, head_num=16, embed_dim=768, depth = 16, parallel = True, high_freq = True, device=device)\nViT_KNO.compile()\n## Parameter definitions:\n# depth: the depth of each head \n# head_num: the number of heads\n# resolution: the spatial resolution of input data\n# patch_size: the size of each patch (i.e., token)\n# in_chans: the number of target variables in the data set\n# out_chans: the number of predicted variables by ViT-KNO , which is usually same as in_chans\n# embed_dim: the embeding dimension\n# parallel: if data parallel is applied\n# high_freq: if high-frequency information complement is applied\n```\nOnce the model is compiled, an optimizer setting is required to run your own experiments. If you want a more customized setting of optimizer and scheduler, you could use any PyTorch method to create them and assign them to Koopman neural operator object, eg. `MLP_KNO_2D.optimizer` and `MLP_KNO_2D.scheduler`.\n``` python\nMLP_KNO_2D.opt_init(\"Adam\", lr = 0.005, step_size=100, gamma=0.5)\n```\nIf you use Burgers equation and Navier-Stokes equation data or the shallow water data provided by PDEBench, there are three specifc data interfaces that you can consider.\n``` python\ntrain_loader, test_loader = kp.data.burgers(path, batch_size = 64, sub = 32)\ntrain_loader, test_loader = kp.data.shallow_water(path, batch_size = 5, T_in = 10, T_out = 40, sub = 1)\ntrain_loader, test_loader = kp.data.navier_stokes(path, batch_size = 10, T_in = 10, T_out = 40, type = \"1e-3\", sub = 1)\n## Parameter definitions:\n# path: the file path of the downloaded data set\n# T_in: the duration length of input data\n# T_out: the duration length required to predict\n# Type: the viscosity coefficient of navier-stokes equation data set.\n# sub: the down-sampling scaling factor. For instance, a scaling factor sub=2 acting on a 2-dimensional data with the spatial resoluion 64*64 will create a down-sampled space of 32*32. The same factor action on a 1 dimensional data with the spatial resoluion 1*64 implies a down-sampled space of 1*32.\n```\nWe recommend that you process your data by PyTorch method `torch.utils.data.DataLoader`. In KNO model, the shape of 2D input data is `[batchsize, x, y, t_len]` and the shape of output data and label is `[batchsize, x, y, T]`, where t_len is defined in `kp.model.koopman` and T is defined in train module. In Koopman-ViT model, the shape of 2D input data is `[batchsize, in_chans, x, y]` and the shape of output data and label is `[batchsize, out_chans, x, y]`.\n\nThe KoopmanLab provides two training and two testing methods of the compact KNO sub-family. If your scenario is single step prediction, you can consider to use `train_single` method or use `train` with `T_out = 1`. Our package provides a method to save and visualize your prediction results in `test`.\n``` python\nMLP_KNO_2D.train_single(epochs=ep, trainloader = train_loader, evalloader = eval_loader)\nMLP_KNO_2D.train(epochs=ep, trainloader = train_loader, evalloader = eval_loader, T_out = T)\nMLP_KNO_2D.test_single(test_loader)\nMLP_KNO_2D.test(test_loader, T_out = T, path = \"./fig/ns_time_error_1e-4/\", is_save = True, is_plot = True)\n```\nAs for the ViT-KNO sub-family, `train` and `test` method is set with a single step predicition scenario. Specifically, `train_multi` and `test_multi` method provide multi-step iteration prediction, where the model iterates `T_out` times in training and testing. \n``` python\nViT_KNO.train_single(epochs=ep, trainloader = train_loader, evalloader = eval_loader)\nViT_KNO.test_single(test_loader)\nViT_KNO.train_multi(epochs=ep, trainloader = train_loader, evalloader = eval_loader, T_out = T_out)\nViT_KNO.test_multi(test_loader)\n## Parameter definitions:\n# epoch: epoch number of training\n# trainloader: dataloader of training, which is returning variable from torch.utils.data.DataLoader\n# evalloader: dataloader of evaluating, which is returning variable from torch.utils.data.DataLoader\n# test_loader: dataloader of testing, which is returning variable from torch.utils.data.DataLoader\n# T_out: the duration length required to predict\n```\nOnce your model has been trained, you can use the saving module provided in KoopmanLab to save your model. Saved variable has three attribute. where `koopman` is the model class variable (i.e., the saved `kno_model` variable), `model` is the trained model variable (i.e., the saved `kno_model.kernel` variable), and `model_params` is the parameters dictionary of trained model variable (i.e., the saved `kno_model.kernel.state_dict()` variable).\n``` python\nMLP_KNO_2D.save(save_path)\n## Parameter definitions:\n# save_path: the file path of the result saving\n```\n# Citation\nIf you use KoopmanLab package for academic research, you are encouraged to cite the following paper:\n```\n@article{xiong2023kno,\n  title={Koopman neural operator as a mesh-free solver of non-linear partial differential equations},\n  author={Xiong, Wei and Huang, Xiaomeng and Zhang, Ziyang and Deng, Ruixuan and Sun, Pei and Tian, Yang},\n  journal={arXiv preprint arXiv:2301.10022},\n  year={2023}\n}\n\n@article{xiong2023koopmanlab,\n  title={KoopmanLab: A PyTorch module of Koopman neural operator family for solving partial differential equations},\n  author={Xiong, Wei and Ma, Muyuan and Sun, Pei and Tian, Yang},\n  journal={arXiv preprint arXiv:2301.01104},\n  year={2023}\n}\n```\n# Acknowledgement\nAuthors appreciate Abby, a talented artist, for designing the logo of KoopmanLab.\n\n# License\n[GPL-3.0 License](https://github.com/Koopman-Laboratory/KoopmanLab/blob/main/LICENSE)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Koopman-Laboratory/KoopmanLab",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "koopmanlab",
    "package_url": "https://pypi.org/project/koopmanlab/",
    "platform": null,
    "project_url": "https://pypi.org/project/koopmanlab/",
    "project_urls": {
      "Homepage": "https://github.com/Koopman-Laboratory/KoopmanLab"
    },
    "release_url": "https://pypi.org/project/koopmanlab/1.0.3/",
    "requires_dist": [
      "torch (>=1.10)",
      "torchvision (>=0.13.1)",
      "matplotlib (>=3.3.2)",
      "numpy (>=1.14.5)",
      "einops (==0.5.0)",
      "timm (==0.6.11)",
      "scipy (==1.7.3)",
      "h5py (==3.7.0)"
    ],
    "requires_python": ">=3.8.5",
    "summary": "A library for Koopman Neural Operator with Pytorch",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17015452,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5d67fb6a7b1fbd54de3ca0ff41be83db6e2c52152c3325455b77947e740e580",
          "md5": "6b6d5ffed4e59fc98b2a2202fbb45332",
          "sha256": "b4e8a84fe5ed1e432af603db0ce506e62af32b69b8187d6135bff8b23c047a65"
        },
        "downloads": -1,
        "filename": "koopmanlab-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b6d5ffed4e59fc98b2a2202fbb45332",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.5",
        "size": 26881,
        "upload_time": "2023-01-02T10:01:18",
        "upload_time_iso_8601": "2023-01-02T10:01:18.933197Z",
        "url": "https://files.pythonhosted.org/packages/c5/d6/7fb6a7b1fbd54de3ca0ff41be83db6e2c52152c3325455b77947e740e580/koopmanlab-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d2ac26769a3159b73747c08c9104025d160bbe95973ee5065834550686ba3d1",
          "md5": "248d6d20fd168b2513ff61d5f2648f92",
          "sha256": "23d8df9801aeea9003045341a53443cd5a9efd9d4af562140cddf07d3871f8e3"
        },
        "downloads": -1,
        "filename": "koopmanlab-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "248d6d20fd168b2513ff61d5f2648f92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.5",
        "size": 27550,
        "upload_time": "2023-01-02T10:01:21",
        "upload_time_iso_8601": "2023-01-02T10:01:21.231648Z",
        "url": "https://files.pythonhosted.org/packages/2d/2a/c26769a3159b73747c08c9104025d160bbe95973ee5065834550686ba3d1/koopmanlab-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3109b8e7ca7e37337678c025db9d6a0c8b34901be469cd5821f1ca6db793ba47",
          "md5": "b4a5da29d1e3ade4fb6730910293e758",
          "sha256": "3f71a771eb78afa41c3e869208eb44f3a1979fe5cd54b44b7273118dc98a66f6"
        },
        "downloads": -1,
        "filename": "koopmanlab-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4a5da29d1e3ade4fb6730910293e758",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.5",
        "size": 27557,
        "upload_time": "2023-01-06T07:51:13",
        "upload_time_iso_8601": "2023-01-06T07:51:13.112187Z",
        "url": "https://files.pythonhosted.org/packages/31/09/b8e7ca7e37337678c025db9d6a0c8b34901be469cd5821f1ca6db793ba47/koopmanlab-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23723f98e7bfc66c01158197c218fec6fc0e85db37ccc3b3993e9fcb7842a0fa",
          "md5": "b969a192604853dcb73014a9f409c5bb",
          "sha256": "4e8a574e6d0d454c748087c1e0c84c9a226022dd0e6b4fc4ee71ea8a87667348"
        },
        "downloads": -1,
        "filename": "koopmanlab-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b969a192604853dcb73014a9f409c5bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.5",
        "size": 28902,
        "upload_time": "2023-01-06T07:51:15",
        "upload_time_iso_8601": "2023-01-06T07:51:15.275503Z",
        "url": "https://files.pythonhosted.org/packages/23/72/3f98e7bfc66c01158197c218fec6fc0e85db37ccc3b3993e9fcb7842a0fa/koopmanlab-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "651a41c96013c9cb91ab399009ae9d7fff0325b9a6ea1ed472b0a940059881d5",
          "md5": "85915f0a15af24d3c76a76b0c5e35d0f",
          "sha256": "82c033e11897e372f00de27deea2ba903ba06f80ac18ccf2e1aae6ed5a5e09af"
        },
        "downloads": -1,
        "filename": "koopmanlab-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85915f0a15af24d3c76a76b0c5e35d0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.5",
        "size": 28464,
        "upload_time": "2023-02-15T02:40:59",
        "upload_time_iso_8601": "2023-02-15T02:40:59.131073Z",
        "url": "https://files.pythonhosted.org/packages/65/1a/41c96013c9cb91ab399009ae9d7fff0325b9a6ea1ed472b0a940059881d5/koopmanlab-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ab91eab97eacbdb55c82b2dfdb9e7b09fdf4737fdfeccbdce32d24a80af0b14",
          "md5": "e07b4d4596311890e74fe447f7b6372d",
          "sha256": "1bb05ebf5d49dbb39c189f01d5902c50eb2455be8ff8b2031b48669bc111346c"
        },
        "downloads": -1,
        "filename": "koopmanlab-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e07b4d4596311890e74fe447f7b6372d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.5",
        "size": 30020,
        "upload_time": "2023-02-15T02:41:01",
        "upload_time_iso_8601": "2023-02-15T02:41:01.531475Z",
        "url": "https://files.pythonhosted.org/packages/6a/b9/1eab97eacbdb55c82b2dfdb9e7b09fdf4737fdfeccbdce32d24a80af0b14/koopmanlab-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd7de3ad48ed056d6fd7891b0a7bc7902f4f92c77ec2ba095fcf0c47453a3585",
          "md5": "e811f08ba4cddfdbbb82731c7fc71cfb",
          "sha256": "8139e1fcdb68abcc1cf77021b56fae68872e8c6bc3501cba24291ec723068ac1"
        },
        "downloads": -1,
        "filename": "koopmanlab-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e811f08ba4cddfdbbb82731c7fc71cfb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.5",
        "size": 28463,
        "upload_time": "2023-02-24T15:39:39",
        "upload_time_iso_8601": "2023-02-24T15:39:39.609171Z",
        "url": "https://files.pythonhosted.org/packages/dd/7d/e3ad48ed056d6fd7891b0a7bc7902f4f92c77ec2ba095fcf0c47453a3585/koopmanlab-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9c38af5a9d039da7fee72a9fde4a7520382c0027ced5758268266b013e25441",
          "md5": "35ce498f509e3510cac5b1d4122f6245",
          "sha256": "365c0ad9174961a38b180748763de7147aa0525b8152578c27b6fa1709d9875d"
        },
        "downloads": -1,
        "filename": "koopmanlab-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "35ce498f509e3510cac5b1d4122f6245",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.5",
        "size": 30045,
        "upload_time": "2023-02-24T15:39:41",
        "upload_time_iso_8601": "2023-02-24T15:39:41.579669Z",
        "url": "https://files.pythonhosted.org/packages/c9/c3/8af5a9d039da7fee72a9fde4a7520382c0027ced5758268266b013e25441/koopmanlab-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd7de3ad48ed056d6fd7891b0a7bc7902f4f92c77ec2ba095fcf0c47453a3585",
        "md5": "e811f08ba4cddfdbbb82731c7fc71cfb",
        "sha256": "8139e1fcdb68abcc1cf77021b56fae68872e8c6bc3501cba24291ec723068ac1"
      },
      "downloads": -1,
      "filename": "koopmanlab-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e811f08ba4cddfdbbb82731c7fc71cfb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.5",
      "size": 28463,
      "upload_time": "2023-02-24T15:39:39",
      "upload_time_iso_8601": "2023-02-24T15:39:39.609171Z",
      "url": "https://files.pythonhosted.org/packages/dd/7d/e3ad48ed056d6fd7891b0a7bc7902f4f92c77ec2ba095fcf0c47453a3585/koopmanlab-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9c38af5a9d039da7fee72a9fde4a7520382c0027ced5758268266b013e25441",
        "md5": "35ce498f509e3510cac5b1d4122f6245",
        "sha256": "365c0ad9174961a38b180748763de7147aa0525b8152578c27b6fa1709d9875d"
      },
      "downloads": -1,
      "filename": "koopmanlab-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "35ce498f509e3510cac5b1d4122f6245",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.5",
      "size": 30045,
      "upload_time": "2023-02-24T15:39:41",
      "upload_time_iso_8601": "2023-02-24T15:39:41.579669Z",
      "url": "https://files.pythonhosted.org/packages/c9/c3/8af5a9d039da7fee72a9fde4a7520382c0027ced5758268266b013e25441/koopmanlab-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}