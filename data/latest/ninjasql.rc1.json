{
  "info": {
    "author": "Sebastian Daum",
    "author_email": "sebastian.daum89@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "![ninjasql package](https://github.com/dondaum/ninjasql/workflows/ninjasql%20package/badge.svg?branch=master)\n\n# Ninjasql introduction\nThis small python package shows how far you can automate the extraction and generation\nof a SQL DDL with the Python packages pandas and sqlalchemy and some custom Python\ncode in between. This package is not finished and should only be used as playing or\ntesting project. \n\nThat has some reason. The most importent is, that it was not clear for me in the start\nwhere to go with this package. The focus on this project was more the overall \ndevelopment process and not finishing a specfic and defined set of functionality. \n\nUnfortunately that is reflected in the code base. It is not focused on pure SQL DDL\nextraction but furhter on creating a complete SQL DDL template for a staging, a\nhistorization and SQL DML statements for implemention and scd2 database historization.\n\n## How to use?\n### Create a ini file\nCreate a ini file somewhere on your machine. You have to define the options\n- Staging\n- PersistentStaging\nwith the needed names for the schema and the table prefix.\n\n```\n[Staging]\nschema_name=STAGING\ntable_prefix_name=STG\n\n[PersistentStaging]\nschema_name=PERS_STAGING\ntable_prefix_name=PER_STG\n```\nCopy the path of the ini file. You need to pass the path as an argument in the main class \n``` FileInspector ```. \n\n### Create a sqlalchemy engine with the database of your choice\npandas need a sqlalchemy engine object in order to generate the DDL sql for you. You can\nuse any database that is supported by sqlalchemy such as:\n- Postgres\n- MySQL\n- MSSQL\n- Sqlite\n- Redshift\n- Snowflake\n\nCreate the engine and pass the path as an argument in the main class ``` FileInspector ```. \n\n```python\n\nfrom sqlalchemy import create_engine\ndbname = \"ninjasql_test.db\"\nDBPATH = \"/Users/JohnDoe/Developement/python_pipeline/ninjasql/tests/db\"\nurl = os.path.join(DBPATH, dbname)\nengine = create_engine('sqlite:///' + url, echo=True)\n\n```\n\n### FileInspector\nIn order to create a instance of the main class you have to specify\n- ini path\n- file path \n- file type\n- file seperator for csv files\n- sqlalchemy engine\n\n```python\n\nc = FileInspector(\n    cfg_path=\"/Users/JohnDoe/Developement/python_pipeline/ninjasql/test.ini\",\n    file=\"/Users/JohnDoe/Desktop/people.csv\",\n    type=\"csv\",\n    seperator=',',\n    con=engine)\n\n```\n### Create staging DDL\nCreate SQL DDL as utf8 files in the specified folder.\n\n```python\n\nc.save_staging_ddl(\n    path=\"/Users/JohnDoe/Desktop/\",\n    table_name=\"people\"\n)\n\n```\n\n### Create history DDL\nCreate SQL DDL as utf8 files in the specified folder.\n\n```python\n\nc.save_history_ddl(\n    path=\"/Users/JohnDoe/Desktop/\",\n    table_name=\"people\"\n)\n\n```\n\n### Create a complete staging, history and scd2 blueprint \nCreate SQL DDL as utf8 files in the specified folder and the \nneeded scd2 DMLs for doing a database scd2 historization.\n\nCurrently to strategies are supported:\n- database_table\n- jinja\n\nFor **database_table** an additional database table gets created that\nhas all needed metadata column which should be used to organize and\nrun the batch load for the scd2 historization. All created DMLs for\nthe DDL will query this main table to get the needed date parameter.\n\n```python\n\nclass TableLoad(Base):\n    __tablename__ = 'tableloads'\n\n    name = Column(String, primary_key=True)\n    BatchDate = Column(DateTime)\n    ValidToDate = Column(DateTime)\n    OffsetValidToDate = Column(DateTime)\n    ValidFromDate = Column(DateTime)\n\n```\n\nFor **jinja** all created DMLs have a jinja parameter field for the needed\ndate parameters. Use this strategy if you want to organize your load more\nwith an workflow tool such as Luigi or Apache Airflow. Then just insert\nthe needed parameter with Jinja while running the DML statements.\n\nIn order to create a complete ELT blueprint just run this class method:\n\n```python\n\nc.create_file_elt_blueprint(\n     path=FILEPATH,\n     table_name=\"PEOPLE\",\n     logical_pk=['Nam'],\n     load_strategy='database_table')\n\n```\n\n### Extracted SQL\n\n\nAll datasources will create a new folder. Each folder has subfolders for DML and DDLs e.g.:\n- TABLELOAD\n    - DDL\n        - ...sql\n    - DML\n        - ...sql\n- PEOPLE\n    - DDL\n        - ...sql\n    - DML\n        - ...sql\n\n#### database_table strategy\n\nMain tableload table DDL for handling the batch processing.\n\n```\n-- JOBTABLE_TABLELOAD.sql\n\nCREATE TABLE tableloads (\n\tname VARCHAR NOT NULL, \n\t\"BatchDate\" DATETIME, \n\t\"ValidToDate\" DATETIME, \n\t\"OffsetValidToDate\" DATETIME, \n\t\"ValidFromDate\" DATETIME, \n\tPRIMARY KEY (name)\n)\n```\n\nDML to create a insert for the history table.\n\n```\n-- PERS_STAGING_PER_STG_PEOPLE_INSERT_TABLELOAD.sql\nINSERT INTO tableloads (name, \"BatchDate\", \"ValidToDate\", \"OffsetValidToDate\", \"ValidFromDate\") VALUES ('PERS_STAGING.PER_STG_PEOPLE', '2020-02-01 00:00:00.000000', '9999-12-31 00:00:00.000000', '2020-01-30 00:00:00.000000', '2020-01-31 00:00:00.000000')\n```\n\n\nStaging DDL\n\n```\nCREATE TABLE \"STAGING.STG_PEOPLE\" (\n\tid BIGINT, \n\tforenames TEXT, \n\tsurname TEXT, \n\ttitle TEXT, \n\taddress1 TEXT, \n\taddress2 TEXT, \n\ttown TEXT, \n\tcounty TEXT, \n\tcountry TEXT, \n\tpostcode TEXT, \n\tsubscribed BIGINT, \n\tgender TEXT, \n\tdob TEXT\n)\n```\n\nHistory DDL\n\n```\nCREATE TABLE \"PERS_STAGING.PER_STG_PEOPLE\" (\n\tid BIGINT, \n\tforenames TEXT, \n\tsurname TEXT, \n\ttitle TEXT, \n\taddress1 TEXT, \n\taddress2 TEXT, \n\ttown TEXT, \n\tcounty TEXT, \n\tcountry TEXT, \n\tpostcode TEXT, \n\tsubscribed BIGINT, \n\tgender TEXT, \n\tdob TEXT, \n\t\"UPDATED_AT\" DATETIME, \n\t\"BATCH_RUN_AT\" DATETIME, \n\t\"VALID_FROM_DATE\" DATETIME, \n\t\"VALID_TO_DATE\" DATETIME\n)\n\n\n```\n\n**SCD2 DMLs with table_load strategy**\n\n```\nINSERT INTO \"PERS_STAGING.PER_STG_PEOPLE\" (id, forenames, surname, title, address1, address2, town, county, country, postcode, subscribed, gender, dob, \"UPDATED_AT\", \"BATCH_RUN_AT\", \"VALID_FROM_DATE\", \"VALID_TO_DATE\") SELECT \"STAGING.STG_PEOPLE\".id, \"STAGING.STG_PEOPLE\".forenames, \"STAGING.STG_PEOPLE\".surname, \"STAGING.STG_PEOPLE\".title, \"STAGING.STG_PEOPLE\".address1, \"STAGING.STG_PEOPLE\".address2, \"STAGING.STG_PEOPLE\".town, \"STAGING.STG_PEOPLE\".county, \"STAGING.STG_PEOPLE\".country, \"STAGING.STG_PEOPLE\".postcode, \"STAGING.STG_PEOPLE\".subscribed, \"STAGING.STG_PEOPLE\".gender, \"STAGING.STG_PEOPLE\".dob, (SELECT CURRENT_TIMESTAMP AS \"UPDATED_AT\") AS anon_1, (SELECT tableloads.\"BatchDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE') AS anon_2, (SELECT tableloads.\"ValidFromDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE') AS anon_3, (SELECT tableloads.\"ValidToDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE') AS anon_4 \nFROM \"STAGING.STG_PEOPLE\" \nWHERE NOT (EXISTS (SELECT \"STAGING.STG_PEOPLE\".id \nFROM \"PERS_STAGING.PER_STG_PEOPLE\" \nWHERE \"STAGING.STG_PEOPLE\".id = \"PERS_STAGING.PER_STG_PEOPLE\".id));\n\n--\n\nINSERT INTO \"PERS_STAGING.PER_STG_PEOPLE\" (id, forenames, surname, title, address1, address2, town, county, country, postcode, subscribed, gender, dob, \"UPDATED_AT\", \"BATCH_RUN_AT\", \"VALID_FROM_DATE\", \"VALID_TO_DATE\") SELECT \"STAGING.STG_PEOPLE\".id, \"STAGING.STG_PEOPLE\".forenames, \"STAGING.STG_PEOPLE\".surname, \"STAGING.STG_PEOPLE\".title, \"STAGING.STG_PEOPLE\".address1, \"STAGING.STG_PEOPLE\".address2, \"STAGING.STG_PEOPLE\".town, \"STAGING.STG_PEOPLE\".county, \"STAGING.STG_PEOPLE\".country, \"STAGING.STG_PEOPLE\".postcode, \"STAGING.STG_PEOPLE\".subscribed, \"STAGING.STG_PEOPLE\".gender, \"STAGING.STG_PEOPLE\".dob, (SELECT CURRENT_TIMESTAMP AS \"UPDATED_AT\") AS anon_1, (SELECT tableloads.\"BatchDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE') AS anon_2, (SELECT tableloads.\"ValidFromDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE') AS anon_3, (SELECT tableloads.\"ValidToDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE') AS anon_4 \nFROM \"PERS_STAGING.PER_STG_PEOPLE\" JOIN \"STAGING.STG_PEOPLE\" ON \"STAGING.STG_PEOPLE\".id = \"PERS_STAGING.PER_STG_PEOPLE\".id \nWHERE (\"STAGING.STG_PEOPLE\".id != \"PERS_STAGING.PER_STG_PEOPLE\".id OR \"STAGING.STG_PEOPLE\".forenames != \"PERS_STAGING.PER_STG_PEOPLE\".forenames OR \"STAGING.STG_PEOPLE\".surname != \"PERS_STAGING.PER_STG_PEOPLE\".surname OR \"STAGING.STG_PEOPLE\".title != \"PERS_STAGING.PER_STG_PEOPLE\".title OR \"STAGING.STG_PEOPLE\".address1 != \"PERS_STAGING.PER_STG_PEOPLE\".address1 OR \"STAGING.STG_PEOPLE\".address2 != \"PERS_STAGING.PER_STG_PEOPLE\".address2 OR \"STAGING.STG_PEOPLE\".town != \"PERS_STAGING.PER_STG_PEOPLE\".town OR \"STAGING.STG_PEOPLE\".county != \"PERS_STAGING.PER_STG_PEOPLE\".county OR \"STAGING.STG_PEOPLE\".country != \"PERS_STAGING.PER_STG_PEOPLE\".country OR \"STAGING.STG_PEOPLE\".postcode != \"PERS_STAGING.PER_STG_PEOPLE\".postcode OR \"STAGING.STG_PEOPLE\".subscribed != \"PERS_STAGING.PER_STG_PEOPLE\".subscribed OR \"STAGING.STG_PEOPLE\".gender != \"PERS_STAGING.PER_STG_PEOPLE\".gender OR \"STAGING.STG_PEOPLE\".dob != \"PERS_STAGING.PER_STG_PEOPLE\".dob) AND \"PERS_STAGING.PER_STG_PEOPLE\".\"VALID_TO_DATE\" = (SELECT tableloads.\"ValidToDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE');\n\n--\n\nUPDATE \"PERS_STAGING.PER_STG_PEOPLE\" SET \"UPDATED_AT\"=CURRENT_TIMESTAMP, \"VALID_TO_DATE\"=(SELECT tableloads.\"OffsetValidToDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE') WHERE EXISTS (SELECT \"STAGING.STG_PEOPLE\".id \nFROM \"STAGING.STG_PEOPLE\" \nWHERE \"STAGING.STG_PEOPLE\".id = \"PERS_STAGING.PER_STG_PEOPLE\".id AND (\"STAGING.STG_PEOPLE\".id != \"PERS_STAGING.PER_STG_PEOPLE\".id OR \"STAGING.STG_PEOPLE\".forenames != \"PERS_STAGING.PER_STG_PEOPLE\".forenames OR \"STAGING.STG_PEOPLE\".surname != \"PERS_STAGING.PER_STG_PEOPLE\".surname OR \"STAGING.STG_PEOPLE\".title != \"PERS_STAGING.PER_STG_PEOPLE\".title OR \"STAGING.STG_PEOPLE\".address1 != \"PERS_STAGING.PER_STG_PEOPLE\".address1 OR \"STAGING.STG_PEOPLE\".address2 != \"PERS_STAGING.PER_STG_PEOPLE\".address2 OR \"STAGING.STG_PEOPLE\".town != \"PERS_STAGING.PER_STG_PEOPLE\".town OR \"STAGING.STG_PEOPLE\".county != \"PERS_STAGING.PER_STG_PEOPLE\".county OR \"STAGING.STG_PEOPLE\".country != \"PERS_STAGING.PER_STG_PEOPLE\".country OR \"STAGING.STG_PEOPLE\".postcode != \"PERS_STAGING.PER_STG_PEOPLE\".postcode OR \"STAGING.STG_PEOPLE\".subscribed != \"PERS_STAGING.PER_STG_PEOPLE\".subscribed OR \"STAGING.STG_PEOPLE\".gender != \"PERS_STAGING.PER_STG_PEOPLE\".gender OR \"STAGING.STG_PEOPLE\".dob != \"PERS_STAGING.PER_STG_PEOPLE\".dob) AND \"PERS_STAGING.PER_STG_PEOPLE\".\"VALID_TO_DATE\" = (SELECT tableloads.\"ValidToDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE') AND \"PERS_STAGING.PER_STG_PEOPLE\".\"BATCH_RUN_AT\" < (SELECT tableloads.\"BatchDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE'));\n\n--\n\nUPDATE \"PERS_STAGING.PER_STG_PEOPLE\" SET \"UPDATED_AT\"=CURRENT_TIMESTAMP, \"VALID_TO_DATE\"=(SELECT tableloads.\"OffsetValidToDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE') WHERE NOT (EXISTS (SELECT \"STAGING.STG_PEOPLE\".id \nFROM \"STAGING.STG_PEOPLE\" \nWHERE \"STAGING.STG_PEOPLE\".id = \"PERS_STAGING.PER_STG_PEOPLE\".id)) AND \"PERS_STAGING.PER_STG_PEOPLE\".\"VALID_TO_DATE\" = (SELECT tableloads.\"ValidToDate\" \nFROM tableloads \nWHERE tableloads.name = 'PERS_STAGING.PER_STG_PEOPLE')\n\n\n```\n\n\n\n**SCD2 DMLs with jinja strategy**\n\n```\nINSERT INTO \"PERS_STAGING.PER_STG_PEOPLE\" (id, forenames, surname, title, address1, address2, town, county, country, postcode, subscribed, gender, dob, \"UPDATED_AT\", \"BATCH_RUN_AT\", \"VALID_FROM_DATE\", \"VALID_TO_DATE\") SELECT \"STAGING.STG_PEOPLE\".id, \"STAGING.STG_PEOPLE\".forenames, \"STAGING.STG_PEOPLE\".surname, \"STAGING.STG_PEOPLE\".title, \"STAGING.STG_PEOPLE\".address1, \"STAGING.STG_PEOPLE\".address2, \"STAGING.STG_PEOPLE\".town, \"STAGING.STG_PEOPLE\".county, \"STAGING.STG_PEOPLE\".country, \"STAGING.STG_PEOPLE\".postcode, \"STAGING.STG_PEOPLE\".subscribed, \"STAGING.STG_PEOPLE\".gender, \"STAGING.STG_PEOPLE\".dob, (SELECT CURRENT_TIMESTAMP AS \"UPDATED_AT\") AS anon_1, (SELECT date({{ batch_date }}) AS \"BATCH_RUN_AT\") AS anon_2, (SELECT date({{ validfrom_date }}) AS \"VALID_FROM_DATE\") AS anon_3, (SELECT date({{ validto_date }}) AS \"VALID_TO_DATE\") AS anon_4 \nFROM \"STAGING.STG_PEOPLE\" \nWHERE NOT (EXISTS (SELECT \"STAGING.STG_PEOPLE\".id \nFROM \"PERS_STAGING.PER_STG_PEOPLE\" \nWHERE \"STAGING.STG_PEOPLE\".id = \"PERS_STAGING.PER_STG_PEOPLE\".id))\n\n--\n\nINSERT INTO \"PERS_STAGING.PER_STG_PEOPLE\" (id, forenames, surname, title, address1, address2, town, county, country, postcode, subscribed, gender, dob, \"UPDATED_AT\", \"BATCH_RUN_AT\", \"VALID_FROM_DATE\", \"VALID_TO_DATE\") SELECT \"STAGING.STG_PEOPLE\".id, \"STAGING.STG_PEOPLE\".forenames, \"STAGING.STG_PEOPLE\".surname, \"STAGING.STG_PEOPLE\".title, \"STAGING.STG_PEOPLE\".address1, \"STAGING.STG_PEOPLE\".address2, \"STAGING.STG_PEOPLE\".town, \"STAGING.STG_PEOPLE\".county, \"STAGING.STG_PEOPLE\".country, \"STAGING.STG_PEOPLE\".postcode, \"STAGING.STG_PEOPLE\".subscribed, \"STAGING.STG_PEOPLE\".gender, \"STAGING.STG_PEOPLE\".dob, (SELECT CURRENT_TIMESTAMP AS \"UPDATED_AT\") AS anon_1, (SELECT date({{ batch_date }}) AS \"BATCH_RUN_AT\") AS anon_2, (SELECT date({{ validfrom_date }}) AS \"VALID_FROM_DATE\") AS anon_3, (SELECT date({{ validto_date }}) AS \"VALID_TO_DATE\") AS anon_4 \nFROM \"PERS_STAGING.PER_STG_PEOPLE\" JOIN \"STAGING.STG_PEOPLE\" ON \"STAGING.STG_PEOPLE\".id = \"PERS_STAGING.PER_STG_PEOPLE\".id \nWHERE (\"STAGING.STG_PEOPLE\".id != \"PERS_STAGING.PER_STG_PEOPLE\".id OR \"STAGING.STG_PEOPLE\".forenames != \"PERS_STAGING.PER_STG_PEOPLE\".forenames OR \"STAGING.STG_PEOPLE\".surname != \"PERS_STAGING.PER_STG_PEOPLE\".surname OR \"STAGING.STG_PEOPLE\".title != \"PERS_STAGING.PER_STG_PEOPLE\".title OR \"STAGING.STG_PEOPLE\".address1 != \"PERS_STAGING.PER_STG_PEOPLE\".address1 OR \"STAGING.STG_PEOPLE\".address2 != \"PERS_STAGING.PER_STG_PEOPLE\".address2 OR \"STAGING.STG_PEOPLE\".town != \"PERS_STAGING.PER_STG_PEOPLE\".town OR \"STAGING.STG_PEOPLE\".county != \"PERS_STAGING.PER_STG_PEOPLE\".county OR \"STAGING.STG_PEOPLE\".country != \"PERS_STAGING.PER_STG_PEOPLE\".country OR \"STAGING.STG_PEOPLE\".postcode != \"PERS_STAGING.PER_STG_PEOPLE\".postcode OR \"STAGING.STG_PEOPLE\".subscribed != \"PERS_STAGING.PER_STG_PEOPLE\".subscribed OR \"STAGING.STG_PEOPLE\".gender != \"PERS_STAGING.PER_STG_PEOPLE\".gender OR \"STAGING.STG_PEOPLE\".dob != \"PERS_STAGING.PER_STG_PEOPLE\".dob) AND \"PERS_STAGING.PER_STG_PEOPLE\".\"VALID_TO_DATE\" = date({{ validto_date }})\n\n--\n\nUPDATE \"PERS_STAGING.PER_STG_PEOPLE\" SET \"UPDATED_AT\"=CURRENT_TIMESTAMP, \"VALID_TO_DATE\"=date({{ offset_validto_date }}) WHERE EXISTS (SELECT \"STAGING.STG_PEOPLE\".id \nFROM \"STAGING.STG_PEOPLE\" \nWHERE \"STAGING.STG_PEOPLE\".id = \"PERS_STAGING.PER_STG_PEOPLE\".id AND (\"STAGING.STG_PEOPLE\".id != \"PERS_STAGING.PER_STG_PEOPLE\".id OR \"STAGING.STG_PEOPLE\".forenames != \"PERS_STAGING.PER_STG_PEOPLE\".forenames OR \"STAGING.STG_PEOPLE\".surname != \"PERS_STAGING.PER_STG_PEOPLE\".surname OR \"STAGING.STG_PEOPLE\".title != \"PERS_STAGING.PER_STG_PEOPLE\".title OR \"STAGING.STG_PEOPLE\".address1 != \"PERS_STAGING.PER_STG_PEOPLE\".address1 OR \"STAGING.STG_PEOPLE\".address2 != \"PERS_STAGING.PER_STG_PEOPLE\".address2 OR \"STAGING.STG_PEOPLE\".town != \"PERS_STAGING.PER_STG_PEOPLE\".town OR \"STAGING.STG_PEOPLE\".county != \"PERS_STAGING.PER_STG_PEOPLE\".county OR \"STAGING.STG_PEOPLE\".country != \"PERS_STAGING.PER_STG_PEOPLE\".country OR \"STAGING.STG_PEOPLE\".postcode != \"PERS_STAGING.PER_STG_PEOPLE\".postcode OR \"STAGING.STG_PEOPLE\".subscribed != \"PERS_STAGING.PER_STG_PEOPLE\".subscribed OR \"STAGING.STG_PEOPLE\".gender != \"PERS_STAGING.PER_STG_PEOPLE\".gender OR \"STAGING.STG_PEOPLE\".dob != \"PERS_STAGING.PER_STG_PEOPLE\".dob) AND \"PERS_STAGING.PER_STG_PEOPLE\".\"VALID_TO_DATE\" = date({{ validto_date }}) AND \"PERS_STAGING.PER_STG_PEOPLE\".\"BATCH_RUN_AT\" < date({{ batch_date }}))\n\n--\n\nUPDATE \"PERS_STAGING.PER_STG_PEOPLE\" SET \"UPDATED_AT\"=CURRENT_TIMESTAMP, \"VALID_TO_DATE\"=date({{ offset_validto_date }}) WHERE NOT (EXISTS (SELECT \"STAGING.STG_PEOPLE\".id \nFROM \"STAGING.STG_PEOPLE\" \nWHERE \"STAGING.STG_PEOPLE\".id = \"PERS_STAGING.PER_STG_PEOPLE\".id)) AND \"PERS_STAGING.PER_STG_PEOPLE\".\"VALID_TO_DATE\" = date({{ validto_date }})\n\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dondaum/ninjasql",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ninjasql",
    "package_url": "https://pypi.org/project/ninjasql/",
    "platform": "",
    "project_url": "https://pypi.org/project/ninjasql/",
    "project_urls": {
      "Homepage": "https://github.com/dondaum/ninjasql"
    },
    "release_url": "https://pypi.org/project/ninjasql/0.0.1/",
    "requires_dist": [
      "decorator (==4.4.2)",
      "networkx (==2.4)",
      "numpy (==1.18.2)",
      "pandas (==1.0.3)",
      "python-dateutil (==2.8.1)",
      "pytz (==2019.3)",
      "six (==1.14.0)",
      "sqlalchemy (==1.3.15)"
    ],
    "requires_python": "",
    "summary": "Create and extract SQL DDL, DMLs and scd2 blueprints.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7404353,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab1bdf2e59cd84234a4a98073225cad0042ce363ea9cea5a8c3e8197c55bf4da",
          "md5": "76094a762bd97ad1726d83f032c488b4",
          "sha256": "c17eef644a277b4a6f9eb48cb387243b6239fb976ce2915de89605a50f6070b5"
        },
        "downloads": -1,
        "filename": "ninjasql-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76094a762bd97ad1726d83f032c488b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13893,
        "upload_time": "2020-06-05T13:45:57",
        "upload_time_iso_8601": "2020-06-05T13:45:57.160927Z",
        "url": "https://files.pythonhosted.org/packages/ab/1b/df2e59cd84234a4a98073225cad0042ce363ea9cea5a8c3e8197c55bf4da/ninjasql-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bb02cd963dcbf7b1f53927576fa886b096f3f4e2579b84c424a005775065ce1",
          "md5": "6b63af94edcbe2d4efae57b1eaa42bd4",
          "sha256": "742b0c75464d9e915ea2525066d4f2651e116ffad8cda1bdfa09e6670c574a60"
        },
        "downloads": -1,
        "filename": "ninjasql-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6b63af94edcbe2d4efae57b1eaa42bd4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14446,
        "upload_time": "2020-06-05T13:45:59",
        "upload_time_iso_8601": "2020-06-05T13:45:59.484807Z",
        "url": "https://files.pythonhosted.org/packages/6b/b0/2cd963dcbf7b1f53927576fa886b096f3f4e2579b84c424a005775065ce1/ninjasql-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab1bdf2e59cd84234a4a98073225cad0042ce363ea9cea5a8c3e8197c55bf4da",
        "md5": "76094a762bd97ad1726d83f032c488b4",
        "sha256": "c17eef644a277b4a6f9eb48cb387243b6239fb976ce2915de89605a50f6070b5"
      },
      "downloads": -1,
      "filename": "ninjasql-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76094a762bd97ad1726d83f032c488b4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13893,
      "upload_time": "2020-06-05T13:45:57",
      "upload_time_iso_8601": "2020-06-05T13:45:57.160927Z",
      "url": "https://files.pythonhosted.org/packages/ab/1b/df2e59cd84234a4a98073225cad0042ce363ea9cea5a8c3e8197c55bf4da/ninjasql-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bb02cd963dcbf7b1f53927576fa886b096f3f4e2579b84c424a005775065ce1",
        "md5": "6b63af94edcbe2d4efae57b1eaa42bd4",
        "sha256": "742b0c75464d9e915ea2525066d4f2651e116ffad8cda1bdfa09e6670c574a60"
      },
      "downloads": -1,
      "filename": "ninjasql-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6b63af94edcbe2d4efae57b1eaa42bd4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14446,
      "upload_time": "2020-06-05T13:45:59",
      "upload_time_iso_8601": "2020-06-05T13:45:59.484807Z",
      "url": "https://files.pythonhosted.org/packages/6b/b0/2cd963dcbf7b1f53927576fa886b096f3f4e2579b84c424a005775065ce1/ninjasql-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}