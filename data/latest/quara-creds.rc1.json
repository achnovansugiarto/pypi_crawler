{
  "info": {
    "author": "charbonnierg",
    "author_email": "guillaume.charbonnier@araymond.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# QUARA Creds\n\n## CLI usage\n\n### Display help\n\nSeveral subcommands are available. The `--help` option is available at different levels:\n\n```bash\n# General help\npync --help\n# cert command group help\npync cert --help\n# cert sign subcommand help\npync cert sign --help\n```\n\n### Initialize environment\n\n- Initialize with default configuration\n\n```bash\npync init\n```\n\n- Reset configuration\n\n```bash\npync init --force\n```\n\n- Configure authorities from a JSON file (either a path or an URL):\n\n```bash\npync init --authorities https://example.com/authorities.json\n```\n\n\n### Manage keypairs\n\n- Create a new keypair for current user:\n\n```bash\npync key gen\n```\n\n- Create a new keypair for a different user:\n\n```bash\npync key gen -n test\n```\n\n- List available keypairs\n\n```bash\npync key list\n```\n\n- Display a public key\n\n```bash\npync key show -n test\n```\n\n- Display a private key\n\n```bash\npync key show -n test --private\n```\n\n### Manager certificate authorities\n\n- List available authorities:\n\n```bash\npync ca list\n```\n\n- Show authorities details:\n\n```bash\npync ca show\n```\n\n- Show authorities certificates:\n\n```bash\npync ca show --pem\n```\n\n\n## Nebula certs examples\n\n#### Create a new CA and a sign a new certificate\n\n```python\nfrom quara.creds.nebula import (\n    EncryptionKeyPair,\n    SigningCAOptions,\n    SigningOptions,\n    sign_ca_certificate,\n    sign_certificate,\n    verify_certificate,\n)\n\n# Create a new CA\nca_keypair, ca_crt = sign_ca_certificate(options=SigningCAOptions(Name=\"test\"))\n# Create a new keypair for the certificate\nenc_keypair = EncryptionKeyPair()\n# Sign a new certificate\nnew_crt = sign_certificate(\n    ca_key=ca_keypair,\n    ca_crt=ca_crt,\n    public_key=enc_keypair,\n    options=SigningOptions(\n        Name=\"test\",\n        Ip=\"10.100.100.10/24\",\n    ),\n)\n# Write files to disk\nca_crt.write_pem_file(\"ca.crt\")\nca_keypair.write_private_key(\"ca.key\")\nnew_crt.write_pem_file(\"node.crt\")\nenc_keypair.write_private_key(\"node.key\")\nenc_keypair.write_public_key(\"node.pub\")\n# Verify that the certificate is valid\nverify_certificate(ca_crt=ca_crt, crt=new_crt)\n```\n\nThis example generates 5 files:\n- `ca.crt`: The CA certificate created during the first step.\n- `ca.key`: The private key of the CA. The public key is also present within this file.\n- `node.crt`: The certificate created during the second step.\n- `node.key`: The private key associated with the certificate. Unlike CA private keys, the public key is not present within the file.\n- `node.pub`: The public key associated with the certificate. The public key is also embedded within the certificate.\n\n#### Load an existing CA and sign a new certificate\n\n```python\nfrom quara.creds.nebula import (\n    Certificate,\n    EncryptionKeyPair,\n    SigningKeyPair,\n    SigningOptions,\n    sign_certificate,\n    verify_certificate,\n)\n\n# Load CA certificate\nca_crt = Certificate.from_file(\"ca.crt\")\n# Load CA keypair\nca_keypair = SigningKeyPair.from_file(\"ca.key\")\n# Create a new keypair for the certificate\nenc_keypair = EncryptionKeyPair()\n# Sign a new certificate\nnew_crt = sign_certificate(\n    ca_key=ca_keypair,\n    ca_crt=ca_crt,\n    public_key=enc_keypair,\n    options=SigningOptions(\n        Name=\"test\",\n        Ip=\"10.100.100.10/24\",\n    ),\n)\n# Write files to disk\nnew_crt.write_pem_file(\"node.crt\")\nenc_keypair.write_private_key(\"node.key\")\nenc_keypair.write_public_key(\"node.pub\")\n# Verify that the certificate is valid\nverify_certificate(ca_crt=ca_crt, crt=new_crt)\n```\n\nIn this case, only 3 files are created, as the CA certificate and the CA key already existed before.\n\n#### Load an existing CA, an existing public key, and sign a new certificate\n\n```python\nfrom quara.creds.nebula import (\n    Certificate,\n    PublicEncryptionKey,\n    SigningKeyPair,\n    SigningOptions,\n    sign_certificate,\n    verify_certificate,\n)\n\n# Load CA certificate\nca_crt = Certificate.from_file(\"ca.crt\")\n# Load CA keypair\nca_keypair = SigningKeyPair.from_file(\"ca.key\")\n# Load public key from file\npub_key = PublicEncryptionKey.from_file(\"node.pub\")\n# Sign a new certificate\nnew_crt = sign_certificate(\n    ca_key=ca_keypair,\n    ca_crt=ca_crt,\n    public_key=pub_key,\n    options=SigningOptions(\n        Name=\"test\",\n        Ip=\"10.100.100.10/24\",\n    ),\n)\n# Write files to disk\nnew_crt.write_pem_file(\"node.crt\")\n# Verify that the certificate is valid\nverify_certificate(ca_crt=ca_crt, crt=new_crt)\n```\n\nIn this case, only the certificate file is written to disk, as all other information was known before issuing the certificate.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quara-creds",
    "package_url": "https://pypi.org/project/quara-creds/",
    "platform": null,
    "project_url": "https://pypi.org/project/quara-creds/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/quara-creds/0.10.2/",
    "requires_dist": [
      "cryptography",
      "protobuf (<3.21)",
      "typer",
      "Jinja2",
      "azure-keyvault-secrets",
      "azure-identity",
      "rich"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "",
    "version": "0.10.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15858571,
  "releases": {
    "0.10.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8aca18c7c57ed841e6e45803eb7f8db676ed34558b9726820a2f675d4b568f3",
          "md5": "6a3777cd9dfece72b74a4599f956c1f7",
          "sha256": "f7571f36e676205650e14177270b2f2fe6dbc811af8d89538ed19903718c679f"
        },
        "downloads": -1,
        "filename": "quara_creds-0.10.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a3777cd9dfece72b74a4599f956c1f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 57619,
        "upload_time": "2022-11-22T19:39:19",
        "upload_time_iso_8601": "2022-11-22T19:39:19.083033Z",
        "url": "https://files.pythonhosted.org/packages/e8/ac/a18c7c57ed841e6e45803eb7f8db676ed34558b9726820a2f675d4b568f3/quara_creds-0.10.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52f96611a625db852c438f9533b29c7e9a43395e530dc39c17b78ffbaa028c90",
          "md5": "2728da2dcbb96bd6b125c8bb458333eb",
          "sha256": "e9e7dd1862b76c9a0ead22f24e34bb7753aaf2a4cf04025b7dfba7e3b2683b7a"
        },
        "downloads": -1,
        "filename": "quara_creds-0.10.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2728da2dcbb96bd6b125c8bb458333eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 33698,
        "upload_time": "2022-11-22T19:39:21",
        "upload_time_iso_8601": "2022-11-22T19:39:21.616092Z",
        "url": "https://files.pythonhosted.org/packages/52/f9/6611a625db852c438f9533b29c7e9a43395e530dc39c17b78ffbaa028c90/quara_creds-0.10.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8aca18c7c57ed841e6e45803eb7f8db676ed34558b9726820a2f675d4b568f3",
        "md5": "6a3777cd9dfece72b74a4599f956c1f7",
        "sha256": "f7571f36e676205650e14177270b2f2fe6dbc811af8d89538ed19903718c679f"
      },
      "downloads": -1,
      "filename": "quara_creds-0.10.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6a3777cd9dfece72b74a4599f956c1f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 57619,
      "upload_time": "2022-11-22T19:39:19",
      "upload_time_iso_8601": "2022-11-22T19:39:19.083033Z",
      "url": "https://files.pythonhosted.org/packages/e8/ac/a18c7c57ed841e6e45803eb7f8db676ed34558b9726820a2f675d4b568f3/quara_creds-0.10.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52f96611a625db852c438f9533b29c7e9a43395e530dc39c17b78ffbaa028c90",
        "md5": "2728da2dcbb96bd6b125c8bb458333eb",
        "sha256": "e9e7dd1862b76c9a0ead22f24e34bb7753aaf2a4cf04025b7dfba7e3b2683b7a"
      },
      "downloads": -1,
      "filename": "quara_creds-0.10.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2728da2dcbb96bd6b125c8bb458333eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 33698,
      "upload_time": "2022-11-22T19:39:21",
      "upload_time_iso_8601": "2022-11-22T19:39:21.616092Z",
      "url": "https://files.pythonhosted.org/packages/52/f9/6611a625db852c438f9533b29c7e9a43395e530dc39c17b78ffbaa028c90/quara_creds-0.10.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}