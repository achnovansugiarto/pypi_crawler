{
  "info": {
    "author": "Rock Lee",
    "author_email": "insfocus@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# arkfbp-py\n\narkfbp-py is the python implementation of the arkfbp.\n\n# installation\n\narkfbp-py需要 Python 3.6+ 及Django 2.0+ 的版本支持。\n\n    pip3 install arkfbp (暂不可用)\n\n    or\n\n    pip3 install git+https://github.com/longguikeji/arkfbp-py.git@zzr/basic\n\n# Dev installation\n\n    python3 setup.py install\n\n# Quick Start\n\n1、新建名为`demo`的项目:\n\n    arkfbp-py startproject demo\n\n2、在项目根目录下，新建名为`app1`的应用:\n\n    arkfbp-py startapp app1\n\n3、移动到`demo/app1/flows`目录下，新建名为`flow1`的流，并设置类型 --class:\n\n    arkfbp-py createflow flow1 --class view\n\n4、移动到`demo/app1/flows/flow1/nodes`目录下，新建名为`node1`的节点,并设置类型 --class和标识 --id:\n\n    arkfbp-py createnode node1 --class function --id node1\n\n5、在`Node1`的`run`方法示例如下:\n\n        def run(self, *args, **kwargs):\n            print(f'Hello, Node1!')\n            return 'hello arkfbp'\n\n6、`demo/app1/flows/flow1`的`main.py`示例如下:\n\n    from arkfbp.node import StartNode, StopNode\n    from arkfbp.graph import Graph\n    # Editor your flow here.\n    from arkfbp.flow import ViewFlow\n    from app1.flows.flow1.nodes.node1 import Node1\n\n\n    class Main(ViewFlow):\n\n        def create_nodes(self):\n            return [\n                {\n                    'cls': StartNode,\n                    'id': 'start',\n                    'next': 'node1'\n                },\n                {\n                    'cls': Node1,\n                    'id': 'node1',\n                    'next': 'stop'\n                },\n                {\n                    'cls': StopNode,\n                    'id': 'stop'\n                }\n            ]\n\n7、在`demo/arkfbp/routes/demo.json`中配置路由信息:\n\n    {\n        \"namespace\": \"demo/v1/\",\n        \"routes\": [\n            {\n                \"flow1/\": {\n                    \"get\": \"app1.flows.flow1\"\n                }\n            }\n        ]\n    }\n\n8、迁移路由信息，其中参数`--topdir`可指定路由配置信息所在目录，参数`--urlfile`可指定迁移后的文件所在路径，默认会在项目settings.py文件所在路径查找并生成文件:\n\n    python3 manage.py migrateroute --topdir demo --urlfile demo/demo_urls.py\n\n9、将`8`中生成的url文件，配置到项目的demo/urls.py中。\n\n    from django.contrib import admin\n    from django.urls import path, include\n\n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('', include('demo.demo_urls'))\n    ]\n\n10、尝试运行流`flow1`:\n\n    python3 manage.py runflow --flow app1.flows.flow1.main --input {\\\"username\\\": \\\"admin\\\"} --http_method post --header {\\\"Authorization\\\": \\\"token\\\"}\n\n11、使用`django`原生方式启动`server`。\n\n    python3 manage.py runserver 0.0.0.0:8000\n\n# Advanced usage\n\n## GlobalHookFlow（已废弃）\n\n全局钩子式工作流运行的场景适用于：\n\n1）服务进行路由之前（self.before_route）\n\n2）所有工作流运行之前（self.before_flow）\n\n3）所有工作流运行之后（self.after_flow）\n\n4）抛出异常之前（self.before_exception）\n\n### 简单使用\n\n1、创建全局钩子式工作流，在项目根目录创建`hook.py`文件(仅为示例)\n\n    from arkfbp.flow import GlobalHookFlow\n    class HookFlow(GlobalHookFlow):\n\n        def create_nodes(self):\n            return [\n                {\n                    'cls': StartNode,\n                    'id': 'start',\n                    'next': 'stop'\n                },\n                {\n                    'cls': StopNode,\n                    'id': 'stop'\n                }\n            ]\n\n        def set_mount(self):\n            self.before_flow = True\n\n2、在`set_mount()`方法中设置想要开启钩子的位置。\n\n    def set_mount(self):\n        \"\"\"\n        设置为在所有工作流运行之前执行全局钩子流\n        \"\"\"\n        self.before_flow = True\n\n3、将钩子流配置到项目的`settings.py`文件的`MIDDLEWARE`变量中。\n\n    INSTALLED_APPS = [\n        ...\n    ]\n    MIDDLEWARE = [\n        ...\n        'hook.HookFlow',\n        'hook.HookFlow1',\n        'hook.HookFlow2',\n    ]\n\n### HookFlow的执行顺序\n\n`GlobalHookFlow`的执行顺序与`django`原生`Middleware`执行顺序一致，\nbefore_route()、before_flow()的执行顺序依次为从上至下；after_flow()、before_exception()则为从下至上。\n\n## New GlobalHookFlow\n\n全新的钩子流现已可以使用。\n\n### 简单使用\n\n1、在demo/hook/文件夹下创建一个全局钩子流，并设置类型 --class。\n\n    arkfbp-py createflow hook1 --class view\n\n2、创建节点Node1（过程略），并编辑。\n\n    class Node1(FunctionNode):\n\n    id = 'node1'\n\n    def run(self, *args, **kwargs):\n        print(f'Hello, Hook!')\n        return None\n\n3、在demo/arkfbp/hooks/hook.json中设置流的执行位置。\n\n    {\n        \"before_route\": [\"hook.hook1\"],\n        \"before_flow\": [],\n        \"before_exception\": [],\n        \"before_response\": []\n    }\n4、这样在每次路由之前，都会先进入hook1这个流进行处理。\n\n### 详解\n\n全局钩子式工作流运行的场景适用于：\n\n1）接口路由之前（before_route）\n\n2）工作流运行之前（before_flow）\n\n3）返回响应之前（before_response）\n\n4）抛出异常之前（before_exception）\n\n列表中流的摆放顺序，即为执行顺序。\n\n## Flow Hook\n\n1、流创建成功后\n\n    def created(inputs, *args, **kwargs):\n        pass\n\n2、流初始化之前\n\n    def before_initialize(inputs, *args, **kwargs):\n        pass\n\n3、流初始化之后\n\n    def initialized(inputs, *args, **kwargs):\n        pass\n\n4、流执行之前\n\n    def before_execute(inputs, *args, **kwargs):\n        pass\n\n5、流执行之后\n\n    def executed(inputs, ret, *args, **kwargs):\n        pass\n\n6、流被销毁之前\n\n    def before_destroy(inputs, ret, *args, **kwargs):\n        pass\n\n## ShutDown Flow\n\n### Flow Shutdown\n现在，你可以通过`flow.shutdown(outputs, **kwargs)`方法，来随时随地的停止工作流的运行\n\n如果你使用`ViewFlow`来定义流，那么可指定返回的`response`的状态码`response_status`，例如：\n\n    class Main(ViewFlow):\n\n        def create_nodes(self):\n            return [\n                {\n                    'cls': StartNode,\n                    'id': 'start',\n                    'next': 'node1'\n                },\n                {\n                    'cls': Node1,\n                    'id': 'node1',\n                    'next': 'stop'\n                },\n                {\n                    'cls': StopNode,\n                    'id': 'stop'\n                }\n            ]\n\n        def before_initialize(inputs, *args, **kwargs):\n            self.shutdown('Flow Error！', response_status=400)\n\n### Node Shutdown\n同样，你也可以通过`node.flow.shutdown(outputs, **kwargs)`方法，来随时随地的停止工作流的运行。\n\n如果你使用`ViewFlow`来定义流，那么可指定返回的`response`的状态码`response_status`，例如：\n\n    class Node1(FunctionNode):\n\n    id = 'node1'\n\n    def run(self, *args, **kwargs):\n        print(f'Hello, Hook 1!')\n        self.flow.shutdown('Flow Error！', response_status=400)\n\n## Flow State\n\n\n## Flow Steps\n\n`flow.steps`为一个`dict`，其中包含以`node_id`为`key`、以`node_instance`为`value`的数据。\n\n现在你可以在任何一个节点，从`node.state.steps`中，获取指定的已运行的`node`。\n\n    node1 = node.state.steps.get('node1', None)\n\n## ViewFlow inputs\n\n`ViewFlow`的`inputs`为原生的`django`的`WSGIRequest`对象，`ViewFlow`在此基础上为`inputs`对象增加了`data`、`extra_data`、`str`属性。\n\n### DataSet\n\n`ds`属性将原生`WSGIRequest`对象的`GET`和`POST`的数据合并为一个`dict`。\n\n### extra_ds\n\n你可以在`extra_ds`中存放你想要传递下去的任何数据。\n\n### str\n\n`str`包含了请求体中的字符串信息。\n\n_注意：你可以随意为inputs增加任何属性，例如：_\n\n    inputs.attr = {}\n\n_这样你就为`inputs`增加了`attr`的属性_\n\n\n## Feature For CLI\n\n### Create Flow\n\n现在你可以通过指定目录和基类来创建一个工作流，`--topdir`参数代表创建流的所在目录，`--class`参数代表工作流期望继承的基类流。\n\n    python3 manage.py createflow flow1 --topdir demo/flows --class base\n\n    或者\n\n    arkfbp-py createflow flow1 --topdir demo/flows --class base \n\n详解：--class 参数可选值如下\n\n    {\n        'base': 'Flow',\n        'view': 'ViewFlow',\n        'hook': 'GlobalHookFlow',\n    }\n\n也可通过命令行获取相关信息\n\n    arkfbp-py createflow -h\n\n### Create Node\n\n现在你可以通过指定目录和基类来创建一个流节点，`--topdir`参数代表创建节点的所在目录，`--class`参数代表节点期望继承的基类节点, `--id`参数代表节点在流中的唯一标识。\n\n    python3 manage.py createnode node1 --topdir demo/flows/flow1/nodes --class base --id node1\n\n    或者\n\n    arkfbp-py createnode node1 --topdir demo/flows/flow1/nodes --class base --id node1\n\n详解：--class 参数可选值如下\n\n    {\n        'base': 'Node',\n        'start': 'StartNode',\n        'stop': 'StopNode',\n        'function': 'FunctionNode',\n        'if': 'IFNode',\n        'loop': 'LoopNode',\n        'nop': 'NopNode',\n        'api': 'APINode',\n        'test': 'TestNode',\n        'trigger_flow': 'TriggerFlowNode',\n    }\n\n也可通过命令行获取相关信息\n\n    arkfbp-py createnode -h\n\n\n## TestFlow\n\n### Create Flow     \n\n1、 通过`Quick Start`中的第3步新建一个工作流，新建的工作流的名称必须以`test`开头。 \n2、 将该工作流`main.py`模块里`Main`函数的父类`ViewFlow`修改为`Flow`。  \n3、 将`from arkfbp.flow import ViewFlow`修改为`from arkfbp.flow import Flow`。  \n这样就得到一个测试流     \n测试流的`main.py`如下：         \n\n    from arkfbp.flow import Flow\n    from arkfbp.node import StartNode, StopNode\n    from app1.flows.testt1.nodes.node1 import Node1\n\n    # Editor your flow here.\n    class Main(Flow):\n\n        def create_nodes(self):\n            return [\n                {\n                    'cls': StartNode,\n                    'id': 'start',\n                    'next': 'node1'\n                },{\n                    'cls': Node1,\n                    'id': 'node1',\n                    'next': 'stop'\n                },{\n                    'cls': StopNode,\n                    'id': 'stop'\n                }\n            ]     \n### Create node\n\n1、 通过`Quick Start`中的第4步新建一个节点。 \n2、 将新建节点对应`python`文件里节点类的父类`FunctionNode`改为`TestNode`。   \n3、 新建节点对应`python`文件里`from arkfbp.node import FunctionNode`修改为`from arkfbp.node import TestNode`。    \n这样就得到一个测试节点     \n测试节点`node1`如下：\n\n    from arkfbp.node import TestNode\n\n    # Editor your node here.\n    class Node1(TestNode):\n\n        def run(self, *args, **kwargs):\n            print(f'Hello, Node1!')\n\n### 测试节点使用      \n\n1、 `setUp`函数    \n测试节点的`setUp`函数将在测试用例执行之前调用，可用于准备数据等。      \n\n    def setUp(self):\n        print('before start test')\n\n2、 `tearDown`函数    \n测试节点的`tearDown`函数在测试用例全部执行之后调用。    \n\n    def tearDown(self):\n        print('after finish test')\n\n3、 测试用例    \n测试用例为以`test_`开头的函数。    \n\n    def test_one(self):\n        pass\n\n4、 断言   \n测试节点支持`python`自带断言和`django unittest`的断言方法。    \n\n    def test_one(self):\n        assert 1==1\n    def test_two(self):\n        self.assertEqual(1,1)   \n\n5、 调用其他测试流   \n在一个测试用例中可以调用其他测试流，得到被调用测试流的结果。调用方式如下：    \n\n    from arkfbp.node import TestNode\n    from app1.flows.testt1.main import Main\n\n    class Node1(TestNode):\n\n        def test_other_testflow(self):\n            self.get_outputs(Main(),inputs={},http_method='get')\n\n首先需要先从被调用测试流的`main`模块中引入`Main`类，然后调用函数`get_outputs`。       \n函数`get_outputs`有三个参数，第一个参数为被调用测试流`Main`类的实例，即`Main()`；第二个参数为输入的数据，字典类型；第三个参数为调用测试流的方法，为`get`     \n\n### Run Flow   \n\n#### 运行指定目录下测试流     \n\n1、 在项目目录下新建`python` 文件       \n2、 引入`executer`模块     \n3、 调用函数`start_testflows`运行测试流        \n函数`start_testflows`有一个参数，表示指定的目录，传入相对路径、绝对路径均可。运行指定工作流如下：        \n\n    from arkfbp import executer\n\n    print(executer.FlowExecuter.start_testflows('./app1/flows/'))\n\n若想运行全部测试流也可通过命令实现。在`manage.py`文件所在目录下输入命令`python3 manage.py flowtest`，即可直接运行所有测试流  \n\n## Extension CLI\n\n此部分内容适用于可视化插件开发相关人员\n\n### AddNode\n\n在流的图定义（create_nodes）中同步一个已知的节点信息。\n\n    python3 manage.py ext_addnode --flow <flow_name> --class <node_class> --id <node_id> --next <next_node_id> --alias <node_alias> --x <coord_x> --y <coord_y>\n\n#### 示例\n\n    python3 manage.py ext_addnode --flow app1.flows.flow1 --class app1.flows.flow1.nodes.node1.Node1 --id node1 --next node2 --alias Flow1_Node1 --x 123.123456 --y 123.123456\n\n如果使用`arkfbp-py`命令，需指定`--topdir`参数，其代表项目的绝对根路径：\n\n    arkfbp-py ext_addnode --flow app1.flows.flow1 --class app1.flows.flow1.nodes.node1.Node1 --id node1 --next node2 --alias Flow1_Node1 --x 123.123456 --y 123.123456 --topdir /Users/user/Development/demo\n\n#### 详解\n\n参数`flow`代表流的路径以`.`分隔，具体到流的文件夹名称；参数`id`代表节点的唯一标识；参数`class`代表相关节点的路径以`.`分隔，具体到类名；参数`next`代表后继节点的`id`；参数`alias`代表在`import`时，指定的节点类的别名；参数`x`和`y`分别代表插件中的`x`、`y`坐标。\n参数`id`、`flow`和`class`是必选，其他可选，不选则默认参数为`None`，你也可通过命令行获取相关信息：\n\n    arkfbp-py ext_addnode -h\n\n### UpdateNode\n\n在流的图定义（create_nodes）中修改一个已知的节点信息。\n\n    python3 manage.py ext_updatenode --flow <flow_name> --class <node_class> --id <node_id> --next <next_node_id> --alias <node_alias> --x <coord_x> --y <coord_y>\n\n如果使用`arkfbp-py`命令，需指定`--topdir`参数，其代表项目的绝对根路径：\n\n    arkfbp-py ext_updatenode --flow app1.flows.flow1 --class app1.flows.flow1.nodes.node2.Node2 --id node1 --next node3 --alias Flow1_Node2 --x 123.123456 --y 123.123456 --topdir /Users/user/Development/demo\n\n#### 详解\n\n参数`flow`代表流的路径以`.`分隔，具体到流的文件夹名称；参数`id`代表目标节点的唯一标识，用于指定修改的目标节点；参数`class`代表节点类型，其路径以`.`分隔并具体到类名，用于修改目标节点的类型；参数`next`代表后继节点的`id`，用于修改目标节点的后继节点；参数`alias`代表在`import`时，指定的节点类的别名，用于修改目标节点的类型别名；参数`x`和`y`分别代表插件中的`x`、`y`坐标，用于修改目标节点在插件中的坐标。\n当你想要将`next`设置为`None`的时候，可以在传递参数时指定`--next`为`undefined`即可。\n参数`id`、`flow`是必选，其他可选，不选则默认不更改相应参数。你也可通过命令行获取相关信息：\n\n    arkfbp-py ext_updatenode -h\n\n### RemoveNode\n\n在流的图定义（create_nodes）中删除一个已知的节点信息，并自动更新前驱后继节点的连接信息。\n\n    python3 manage.py ext_removenode --flow <flow_name> --id <node_id>\n\n如果使用`arkfbp-py`命令，需指定`--topdir`参数，其代表项目的绝对根路径：\n\n    arkfbp-py ext_removenode --flow app1.flows.flow1 --id node1 --topdir /Users/user/Development/demo\n\n#### 详解\n\n参数`flow`代表流的路径以`.`分隔，具体到流的文件夹名称；参数`id`代表目标节点的唯一标识，用于指定删除的目标节点；\n参数`id`、`flow`是必选，其他可选。你也可通过命令行获取相关信息：\n\n    arkfbp-py ext_removenode -h\n\n## special usages\n\n### csrf\n若想局部禁用或模拟csrf，只需要重写指定flow的Main Class的dispatch方法。示例如下：\n\n    from arkfbp.flow import ViewFlow\n    from arkfbp.node import StartNode, StopNode\n    from django.views.decorators.csrf import csrf_exempt\n\n    class Main(ViewFlow):\n        def create_nodes(self):\n            return [{\n                'cls': StartNode,\n                'id': 'start',\n                'next': 'stop',\n                'x': None,\n                'y': None\n            }，\n            {\n                'cls': StopNode,\n                'id': 'stop',\n                'next': None,\n                'x': None,\n                'y': None\n            }]\n\n        @csrf_exempt\n        def dispatch(self, request, *args, **kwargs):\n            return super(Main, self).dispatch(request, *args, **kwargs)\n\n### AuthTokenNode\n\n现在可以使用AuthTokenNode来快速搭建您的用户名+密码验证流程，示例如下：\n\n    from arkfbp.node import AuthTokenNode\n\n    class VerifyPassword(AuthTokenNode):\n\n        def get_ciphertext(self):\n            return 'ciphertext'\n\n        def before_execute(self, *args, **kwargs):\n            self.username_field = 'USERNAME'\n            self.password_field = 'PASSWORD'\n\n#### 详解\n其中，`get_ciphertext()`用于自定义从存储后端获取加密的数据；`get_key()`可自定义返回的`token`值，默认为生成一个新的`token`值；\n你也可以通过`before_execute()`等`run()`方法运行前的钩子来自定义`username_field`和`password_field`来指定获取账号名和账号密码的字段名称；\n`AuthTokenNode`在`run()`运行后默认返回一个长度为40的`token`字符串。\n\n# Auto-generated code\n\n## 编辑 meta-config\n\nmeta-config最外层结构如下：\n\n    {\n      \"name\": \"\",\n      \"type\": \"\",\n      \"module\": {},\n      \"meta\": {},\n      \"permission\": {},\n      \"api\": {}\n    }\n\n### name\nmeta_config的名称，唯一标识（推荐和文件名相同）。\n\n    {                           \n      \"name\": \"meta_config_name\"\n    }\n\n### type\n前端组件类型。\n\n    {                           \n      \"type\": “table\"           \n    }\n\n### module\nmodel类及meta文件的具体路径。\n\n      \"module\": {\n        \"user\": {\n          \"model\": \"arkid_meta.models.user.User\"\n        },\n        \"util\": {\n          \"meta\": \"automation.util\"\n        }\n      }\n\n### permission\n权限校验相关的路径。\n\n    {\n      \"permission\": {\n        \"role\": \"demo.permission.role\"\n      }\n    }\n\n其中role表示别名即命名空间，demo.permission.role指定的为role相关的meta config的JSON文件，实例如下：\n\n    {\n      \"admin\": {\n        \"title\": \"管理员\",\n        \"flow\": \"demo.permission.role.admin\"\n      }\n    }\n\n其中admin为权限角色名称，title为权限名字，flow指定了具体校验时需要运行的工作流。\n\n#### 使用方法\n在api配置中增加permission字段来标识需要用到的permission。\n\n    {\n      \"api\": {\n        \"user/\": {\n          \"post\": {\n            \"name\": \"新建用户\",\n            \"type\": \"create\",\n            \"request\": {},\n            \"response\": {},\n            \"permission\": [\"role.admin\"]  # role为上述的命名空间，admin为文件中指定的admin角色。\n          }\n        }\n      }\n    }\n\n### meta\n包含了model所有的字段信息及校验规则，书写方式分为module导入，或者自定义。\n\n    {                        \n      \"meta\": {              \n        \"field_1\": {         \n          \"title\": \"title_1\",\n          \"type\": {          \n            \"field_type\": {} \n          }                  \n        }                \n      }                      \n    }  \n\n#### field_1\n展示的字段名称，并不代表model中原始的字段名称。\n\n#### title_1\n字段的名称，用于前端展示。\n\n#### field_type\n字段的类型，目前支持string、integer、float、object、array。\n\n    {                        \n      \"meta\": {              \n        \"field_1\": {         \n          \"title\": \"title_1\",\n          \"required\": true, # 必须接受此参数\n          \"type\": {          \n            \"string\": {\n              \"read_only\"：false， # 只读\n              \"write_only\"：true，# 只写\n              \"min_length\": 10, # 字符串最小的长度\n              \"max_length\": 50, # 字符串最大的长度 \n            } \n          }                  \n        }                \n      }                      \n    }  \n\n##### object field type\n\n    \"field\": {\n      \"title\": \"title\",\n      \"type\": {\n        \"object\": {\n            \"field_1\": \"field_1\",\n            \"field_2\": \"field_2\",\n            \"field_3\": \"field_3\",\n          }\n      }\n    }\n\n#### array object type\n\n    \"field\": {\n      \"title\": \"查询结果列表\",\n      \"type\": {\n        \"array\": {\n          \"array_item\": \"field_1\"\n        }\n      }\n    }\n\n### api\n接口定义。\n\n    \"meta_name/<index>/\": { # url，index为位置参数\n      \"get\": { # 接口的请求方法\n        \"name\": \"update_meta_name\", # 接口的名称\n        \"type\": \"retrieve\", # 接口的默认类型\n        \"index\": { # 位置参数的配置\n          \"id\": { # 位置参数名称\n          \"src\": \"model_user.id\" # 配置来源\n          }\n        },\n        \"pagination\": { # 分页配置\n          \"enabled\": true, # 是否启用\n          \"page_size_query_param\": \"page_size\", # 传参的key名称，页面大小\n          \"page_query_param\": \"page\", # 传参的key名称，页码\n          \"count_param\": \"count\", # 记录总数的名称\n          \"results_param\": \"results\", # 结果的名称\n          \"next_param\": \"next\", # 下一页的名称\n          \"previous_param\": \"previous\", # 上一页的名称\n          \"paginated_response\": \"utils.custom_response\" # 自定义分页response，需清楚具体pagination node的response实现\n        },\n        \"request\": {}, # 接口需要接收的字段\n        \"response\": { # 接口需要返回的字段\n          \"data\": \"items\", # 表示本地meta中的配置\n          \"error_code\": \"util.error_code\", # 表示从module导入的配置\n          \"error_message\": \"util.error_message\" # 表示从module导入的配置\n        },\n        \"debug\": false # 是否输出debug信息，默认为true\n      },\n      \"delete\": {\n        \"index\": \"index\",\n        \"name\": \"delete_meta_name\",\n        \"http_method\": \"delete\",\n        \"request\": [],\n        \"response\": []\n      }\n    }\n\n#### pagination response\n若想自定义分页的数据结构，你需要用到.pagination内置用法来重构响应的数据结构。\n\n    {\"meta\":    \n      \"data\": {\n        \"required\": false,\n        \"type\": {\n          \"object\": {\n            \"total\": \".pagination.count\",\n            \"page\": \".pagination.page\",\n            \"page_size\": \".pagination.page_size\",\n            \"items\": \"items\"\n          }\n        }\n      }\n    }\n\n#### permission flow\n在api描述中定义`permission`并引入`role`字段中定义的角色,\n其中`admin.flow`是用于校验权限的工作流，其输出值为布尔类型。\n\n    {\n      \"role\": {\n        \"admin\": {\n          \"title\": \"管理员\",\n          \"flow\": \"flows.flow\"\n        }\n      },\n      \"api\": {\n        \"user/\": {\n          \"get\": {\n            \"name\": \"获取信息\",\n            \"type\": \"retrieve\",\n            \"request\": {},\n            \"response\": {},\n            \"debug\": false,\n            \"permission\": [\"admin\"]\n          }\n        }\n      }\n    }\n\n在开启系统默认\n#### custom type for api\n除了create、update、retrieve、delete四种系统提供的基本的数据处理引擎，你还可以进行自定义引擎的配置。\n此时不需要指定response参数。\n\n    \"custom/\": {\n      \"post\": {\n        \"name\": \"custom_1\",\n        \"type\": \"custom\",\n        \"flow\": \"flows.flow_1\", # 指定自定义流的位置\n        \"request\": {}, # 接口需要接收的字段\n      }\n    }\n\n详解：自定义流运行之前系统会根据request中的参数先进行数据校验，\n之后将validate的_data及原始的request传给自定义的flow\n\n## 配置meta_config\n将meta_config文件与django结合，以达到自动生成项目的效果。\n\n### 编写JSON文件\n将所有的meta_config统一存放到项目的某一文件夹下。\n\n    demo\n    |_ automation\n      |_ meta_1.json \n      |_ ...\n      |_ meta_n.json\n\n### 配置url\n在django项目的主urls.py文件中增加一条路由\n\n    from django.contrib import admin\n    from django.urls import path, include\n    from arkfbp.common.automation.core import MetaConfigs\n\n    meta_dir = '/demo/automation'\n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('arkfbp-admin/', include(MetaConfigs(meta_dir).get_urls()))\n    ]\n\n### 运行项目\n\n    python manage.py runserver\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/longguikeji/arkfbp-py",
    "keywords": "arkfbp",
    "license": "MIT",
    "maintainer": "Rock Lee",
    "maintainer_email": "insfocus@gmail.com",
    "name": "arkfbp",
    "package_url": "https://pypi.org/project/arkfbp/",
    "platform": "",
    "project_url": "https://pypi.org/project/arkfbp/",
    "project_urls": {
      "Homepage": "https://github.com/longguikeji/arkfbp-py"
    },
    "release_url": "https://pypi.org/project/arkfbp/0.0.3/",
    "requires_dist": [
      "requests",
      "django (>=2.0)",
      "pbr",
      "cachetools",
      "six",
      "astunparse",
      "yapf",
      "passlib"
    ],
    "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*,",
    "summary": "Python implementation of the arkfbp",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8950833,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dc682b7bc933bc8ac77bc1c7340b6dcf0fa8c2813c5fbaf459afed52bf957c1",
          "md5": "3833a4d3466ac2fe6bd1ad191842dce2",
          "sha256": "2d55f16785e6146e4948e0b1745d2ea7a98a85af4c5b3afabdae6c017e0b4be6"
        },
        "downloads": -1,
        "filename": "arkfbp-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3833a4d3466ac2fe6bd1ad191842dce2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "size": 9888,
        "upload_time": "2020-05-08T15:15:53",
        "upload_time_iso_8601": "2020-05-08T15:15:53.380739Z",
        "url": "https://files.pythonhosted.org/packages/1d/c6/82b7bc933bc8ac77bc1c7340b6dcf0fa8c2813c5fbaf459afed52bf957c1/arkfbp-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "744238217f10fae3e0cdd7dfcdae74bf7ebeb3b09db65d6c81ea08cdbc7fc21b",
          "md5": "2b11618e59a0cf86c639079290744e81",
          "sha256": "278fa36eda6f97f473c8958f1d6bfe4771ebd62ca3d1271dcddf1d8c6990d6f0"
        },
        "downloads": -1,
        "filename": "arkfbp-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2b11618e59a0cf86c639079290744e81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "size": 5873,
        "upload_time": "2020-05-08T15:15:55",
        "upload_time_iso_8601": "2020-05-08T15:15:55.570145Z",
        "url": "https://files.pythonhosted.org/packages/74/42/38217f10fae3e0cdd7dfcdae74bf7ebeb3b09db65d6c81ea08cdbc7fc21b/arkfbp-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "533a9bd34dd53d0dbaf47c9876624a8ee6767f57728b380713a90ec741db840a",
          "md5": "4b2ff44d50a0b7147350829f4d8217a8",
          "sha256": "aeafd3c3b9ca526355103997272561d7e5be7cea932c020a592d0d9b9e3d5f27"
        },
        "downloads": -1,
        "filename": "arkfbp-0.0.2.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b2ff44d50a0b7147350829f4d8217a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*,",
        "size": 38982,
        "upload_time": "2020-09-28T16:37:07",
        "upload_time_iso_8601": "2020-09-28T16:37:07.298779Z",
        "url": "https://files.pythonhosted.org/packages/53/3a/9bd34dd53d0dbaf47c9876624a8ee6767f57728b380713a90ec741db840a/arkfbp-0.0.2.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39acccbd0d18ebea03457c6e1984b79ae8e99ed64d3a4d63b7058f43b235068a",
          "md5": "762a978474ca870afc7e858a93025adc",
          "sha256": "464a3ddd017f4d71c4b545d36972b0240a3900db74ae59a02f0c218980182886"
        },
        "downloads": -1,
        "filename": "arkfbp-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "762a978474ca870afc7e858a93025adc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*,",
        "size": 83284,
        "upload_time": "2020-12-21T09:32:49",
        "upload_time_iso_8601": "2020-12-21T09:32:49.608584Z",
        "url": "https://files.pythonhosted.org/packages/39/ac/ccbd0d18ebea03457c6e1984b79ae8e99ed64d3a4d63b7058f43b235068a/arkfbp-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66bfa16ab183a9f411f4112d490e915e2073645267b44c5a0c471370a4b1e658",
          "md5": "7a5c6c33c6df6048d48d22c47aed0d8f",
          "sha256": "687d85d00eb06129940ce90cfb4d3641ca2fd064ab44061d077cccb2658aef1a"
        },
        "downloads": -1,
        "filename": "arkfbp-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7a5c6c33c6df6048d48d22c47aed0d8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*,",
        "size": 65430,
        "upload_time": "2020-12-21T09:32:56",
        "upload_time_iso_8601": "2020-12-21T09:32:56.184380Z",
        "url": "https://files.pythonhosted.org/packages/66/bf/a16ab183a9f411f4112d490e915e2073645267b44c5a0c471370a4b1e658/arkfbp-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f73e91ff0a6390a540ea9939c9ff7eea341bc97f43d706094e8915e9aae5fb04",
          "md5": "506ef514571bb427b2bde69d0e2686c2",
          "sha256": "78983ef8784423263362449e7fd1400c316753bf839162d75a41a96a663227db"
        },
        "downloads": -1,
        "filename": "arkfbp-0.0.3.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "506ef514571bb427b2bde69d0e2686c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*,",
        "size": 83349,
        "upload_time": "2020-12-21T09:32:52",
        "upload_time_iso_8601": "2020-12-21T09:32:52.181228Z",
        "url": "https://files.pythonhosted.org/packages/f7/3e/91ff0a6390a540ea9939c9ff7eea341bc97f43d706094e8915e9aae5fb04/arkfbp-0.0.3.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7532f48cea221af34d8a93295de60e90fb5e41edc8843fec98d03d7240e4483c",
          "md5": "ba3324a76bf25488e054ce930a44212b",
          "sha256": "9fc953c3d13d372df3f514eb63af0b05209d097f394e0918065514d0c6915a21"
        },
        "downloads": -1,
        "filename": "arkfbp-0.0.3.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "ba3324a76bf25488e054ce930a44212b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*,",
        "size": 65463,
        "upload_time": "2020-12-21T09:32:55",
        "upload_time_iso_8601": "2020-12-21T09:32:55.038922Z",
        "url": "https://files.pythonhosted.org/packages/75/32/f48cea221af34d8a93295de60e90fb5e41edc8843fec98d03d7240e4483c/arkfbp-0.0.3.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baf19aca8848e7b1fcd453f6cc772b2cbad08977797b654174b14efb5a423bc8",
          "md5": "7efe9d49259e2e1f3aca64747ddd929b",
          "sha256": "ffb54bd02b4103e1a6af434e1dad55c437a9c8dca0bc5edef0f77276d4811ee9"
        },
        "downloads": -1,
        "filename": "arkfbp-0.0.3rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "7efe9d49259e2e1f3aca64747ddd929b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*,",
        "size": 39194,
        "upload_time": "2020-09-29T17:56:21",
        "upload_time_iso_8601": "2020-09-29T17:56:21.111172Z",
        "url": "https://files.pythonhosted.org/packages/ba/f1/9aca8848e7b1fcd453f6cc772b2cbad08977797b654174b14efb5a423bc8/arkfbp-0.0.3rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39acccbd0d18ebea03457c6e1984b79ae8e99ed64d3a4d63b7058f43b235068a",
        "md5": "762a978474ca870afc7e858a93025adc",
        "sha256": "464a3ddd017f4d71c4b545d36972b0240a3900db74ae59a02f0c218980182886"
      },
      "downloads": -1,
      "filename": "arkfbp-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "762a978474ca870afc7e858a93025adc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*,",
      "size": 83284,
      "upload_time": "2020-12-21T09:32:49",
      "upload_time_iso_8601": "2020-12-21T09:32:49.608584Z",
      "url": "https://files.pythonhosted.org/packages/39/ac/ccbd0d18ebea03457c6e1984b79ae8e99ed64d3a4d63b7058f43b235068a/arkfbp-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66bfa16ab183a9f411f4112d490e915e2073645267b44c5a0c471370a4b1e658",
        "md5": "7a5c6c33c6df6048d48d22c47aed0d8f",
        "sha256": "687d85d00eb06129940ce90cfb4d3641ca2fd064ab44061d077cccb2658aef1a"
      },
      "downloads": -1,
      "filename": "arkfbp-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7a5c6c33c6df6048d48d22c47aed0d8f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*,",
      "size": 65430,
      "upload_time": "2020-12-21T09:32:56",
      "upload_time_iso_8601": "2020-12-21T09:32:56.184380Z",
      "url": "https://files.pythonhosted.org/packages/66/bf/a16ab183a9f411f4112d490e915e2073645267b44c5a0c471370a4b1e658/arkfbp-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}