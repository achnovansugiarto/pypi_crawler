{
  "info": {
    "author": "David Salac",
    "author_email": "info@davidsalac.eu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Simple Portable Python Spreadsheet Generator\nAuthor: David Salac <https://github.com/david-salac>\n\nProject website: Portable Spreadsheet <https://portable-spreadsheet.com/>\n\nA simple spreadsheet that keeps tracks of each operation of each cell\nin defined languages. Logic allows exporting sheets to Excel files (and\nsee how each cell is computed), to the JSON strings with a description\nof computation of each cell (e. g. in the native language). Other\nformats, like HTML, CSV and Markdown (MD), are also implemented (user\ncan define own format). It also allows reconstructing behaviours in\nnative Python with NumPy. The sheets can be easily created and handled\nin a way similar to Pandas DataFrame.\n\n## Key components of the library\nThere are five main objects in the library:\n\n1. **_Grammar_**: the set of rule that defines language.\n2. **_Cell_**: single cell inside the spreadsheet.\n3. **_Word_**: the word describing how the cell is created in each language.\n4. **_Sheet_**: a set of cells with a defined shape.\n5. **_Cell slice_**: a subset of the spreadsheet. \n6. **_Work book_**: a set of multiple sheets.\n\n### Grammar\nThe grammar defines a context-free language (by Chomsky hierarchy). It is\nused for describing each operation that is done with the cell. The typical\nworld is constructed using prefix, suffix and actual value by creating a\nstring like \"PrefixValueSuffix\". Each supported operation is defined in\ngrammar (that tells how the word is created when the operation is called).\n\nThere are two system languages (grammars): Python and Excel. There is also\none language \"native\" that describes operations in a native tongue logic.\n\n#### Adding the new grammar\nOperations with grammars are encapsulated in the class `GrammarUtils`.\n\nGrammar has to be defined as is described in the file `grammars.py` in the\nglobal variable `GRAMMAR_PATTERN`. It is basically the dictionary matching\nthe description.\n\nTo validate the grammar (in the variable `grammar`) use: \n```python\nis_valid: bool = GrammarUtils.validate_grammar(grammar)\n```\nTo add the grammar describing some language (in the variable `language`)\nto the system (in the variable `grammar`) use: \n```python\nGrammarUtils.add_grammar(grammar, language)\n```\n\nUser can also check what languages are currently available using the\nstatic method `get_languages`:\n```python\nlanguages_in_the_system: Set[str] = GrammarUtils.get_languages()\n```\n### Cells\nIt represents the smallest element in the spreadsheet. Cell encapsulates basic\narithmetic and logical operations that are needed. A cell is represented by\nthe class of the same name `Cell`. It is highly recommended not to use\nthis class directly but only through the spreadsheet instance.\n\nCurrently, the supported operations are described in the subsections\n_Computations_ bellow in this document (as all that unary, binary and other\nfunctions).\n\nThe main purpose of the cell is to keep the value (the numerical result of\nthe computation) and the word (how is an operation or constant represented\nin all languages).\n\n### Words\nWord represents the current computation or value of the cell using in given\nlanguages.\n\nA typical example of the word can be (in language excel):\n```python\nB2*(C1+C2)\n```\nThe equivalent word in the language Python:\n```python\nvalues[1,1]*(values[0,2]+values[1,2])\n```\nWords are constructed using prefixes and suffixes defined by the grammar.\nEach language also has some special features that are also described in\nthe grammar (like whether the first index represents column or a row).\n\nWords are important later when the output is exported to some file in given\nformat or to JSON.\nOperations with words (and word as a data structure) are located in the\nclass `WordConstructor`. It should not be used directly.\n\n### Sheet class\nThe Sheet is the most important class of the whole package. It is\nlocated in the file `spreadsheet.py`. It encapsulates the functionality\nrelated to accessing cells and modifying them as well as the functionality\nfor exporting of the computed results to various formats.\n\nClass is strongly motivated by the API of the Pandas DataFrame. \n\nThe functionality of Sheet class is documented in a special section below.\n\n### Cell slice\nRepresents the special object that is created when some part slice of the\nspreadsheet is created. Basically, it encapsulates the set of cells and\naggregating operations (sum, product, minimum, maximum, average). For example:\n```python\nsome_slice = spreadsheet_instance.iloc[1,:]\naverage_of_slice = some_slice.mean()\n```\nselected the second row in the spreadsheet and compute the average (mean)\nof values in the slice.\n\nCell slice is represented in the class `CellSlice` in the\nfile `cell_slice.py`.\n\nIf you want to assign some value to a `CellSlice` object, you can use\noverloaded operator `<<=`\n```python\nsome_slice = spreadsheet_instance.iloc[1,:]\naverage_of_slice <<= 55.6  # Some assigned value\n```\nHowever, it is strongly recommended to use standard assigning through\nthe Sheet object described below.\n\n#### Functionality of the CellSlice class\nCell slice is mainly related to the aggregating functions described in\nthe subsection _Aggregate functions_ bellow.\n\nThere is also a functionality related to setting the values to some\nconstant or reference to another cell. This functionality should not\nbe used directly.\n\nCell slices can be exported in the same way as a whole spreadsheet (methods\nare discussed below).\n\n## Sheet functionality\nAll following examples expect that user has already imported package.\n```python\nimport portable_spreadsheet as ps\n```\nThe default (or system) languages are Excel and Python. There is also\na language called 'native' ready to be used.\n\n### How to create a spreadsheet\nThe easiest function is to use the built-in static method `create_new_sheet`:\n\n```python\nsheet = ps.Sheet.create_new_sheet(\n    number_of_rows, number_of_columns, [rows_columns]\n)\n```\nif you wish to include some user-defined languages or the language\ncalled 'native' (which is already in the system), you also need to\npass the argument `rows_columns` (that is a dictionary with keys as\nlanguages and values as lists with column names in a given non-system\nlanguage).\n\nFor example, if you choose to add _'native'_ language (already available in\ngrammars), you can use a shorter version:\n\n```python\nsheet = ps.Sheet.create_new_sheet(\n    number_of_rows, number_of_columns,\n    {\n        \"native\": cell_indices_generators['native'](number_of_rows,\n                                                    number_of_columns),\n    },\n    name='Sheet Name'\n)\n```\n\nOther (keywords) arguments:\n1. `name (str)`: Name of the sheet.\n2. `rows_labels (List[Union[str, SkippedLabel]])`: _(optional)_ List of masks\n(aliases) for row names.\n3. `columns_labels (List[Union[str, SkippedLabel]])`: _(optional)_ List of\nmasks (aliases) for column names. If the instance of SkippedLabel is\nused, the export skips this label.\n4. `rows_help_text (List[str])`: _(optional)_ List of help texts for each row.\n5. `columns_help_text (List[str])`: _(optional)_ List of help texts for each\ncolumn. If the instance of SkippedLabel is used, the export skips this label.\n6. `excel_append_row_labels (bool)`: _(optional)_ If True, one column is added\non the beginning of the sheet as a offset for labels.\n7. `excel_append_column_labels (bool)`: _(optional)_ If True, one row is\nadded on the beginning of the sheet as a offset for labels.\n8. `warning_logger (Callable[[str], None]])`: Function that logs the warnings\n(or `None` if logging should be skipped).\n9. `values_only (bool)`: If set to True, only values are computed and\nnothing can be exported (makes script run faster).\n10. `system_languages: Tuple[str, ...]`: Defines system languages that should\nbe always included. If you want to optimize performance, this tuple should\nbe as small as possible.\n\nFirst two are the most important because they define labels for the columns\nand rows indices. The warnings mention above occurs when the slices are\nexported (which can lead to data losses).\n\n#### How to change the size of the spreadsheet\nYou can only expand the size of the spreadsheet (it's because of the\nbuilt-in behaviour of language construction). We, however, strongly recommend\nnot to do so. Simplified logic looks like:\n```python\n# Append 7 rows and 8 columns to existing sheet:\nsheet.expand(\n    7, 8,  \n    {\n        \"native\": ([...], [...])  # Fill 8 new values for rows, columns here\n    }\n)\n```\nParameters of the `Sheet.expand` method are of the same\nlogic and order as the parameters of `Sheet.create_new_sheet`.\n\n### Column and row labels\nLabels are set once when a sheet is created (or expanded in size). If you\nwant to read them as a tuple of labels, you can use the following properties:\n\n* `columns`: property that returns labels of columns as a tuple of strings.\nIt can be called on both slices or directly on `Sheet` class instances.\n* `index`: property that returns the labels of rows as a tuple of strings.\nIt can be called on both slices or directly on `Sheet` class instances.\n\nExample:\n```python\ncolumn_labels: Tuple[str] = sheet.columns  # Get the column labels\nrow_labels: Tuple[str] = sheet.index  # Get the row labels\n```\n\n### Shape of the Sheet object\nIf you want to know what is the actual size of the spreadsheet, you can\nuse the property `shape` that behaves as in Pandas. It returns you the\ntuple with a number of rows and number of columns (on the second position).\n\n### Accessing/setting the cells in the spreadsheet\nYou to access the value in the position you can use either the integer\nposition (indexed from 0) or the label of the row/column.\n```python\n# Returns the value at second row and third column:\nvalue = sheet.iloc[1,2]\n# Returns the value by the name of the row, column\nvalue = sheet.loc['super the label of row', 'even better label of column']\n```\nAs you can see, there are build-in properties `loc` and `iloc` for accessing\nthe values (the `loc` access based on the label, and `iloc` access the cell\nbased on the integer position).\n\nThe same logic can be used for setting-up the values:\n```python\n# Set the value at second row and third column:\nsheet.iloc[1,2] = value\n# Set the value by the name of the row, column\nsheet.loc['super the label of row', 'even better label of column'] = value\n```\nwhere the variable `value` can be either some constant (string, float or\ncreated by the `fn` method described below) or the result of some\noperations with cells:\n```python\nsheet.iloc[1,2] = sheet.iloc[1,3] + sheet.iloc[1,4]\n```\nIn the case that you want to assign the result of some operation (or just\nreference to another cell), make sure that it does not contains any reference\nto itself (coordinates where you are assigning). It would not work\ncorrectly otherwise.\n\n### Variables\nVariable represents an imaginary entity that can be used for computation if \nyou want to refer to something that is common for the whole spreadsheet. \nTechnically it is similar to variables in programming languages.\n\nVariables are encapsulated in the property `var` of the class `Sheet`. \n\nIt provides the following functionality:\n\n1. **Setting the variable**, method `set_variable` with parameters: `name` \n(a lowercase alphanumeric string with underscores), `value` \n(number or string), and `description` (optional) that serves as a help text.\n2. **Get the variable dictionary**, property `variables_dict`, returns \na dictionary with variable names as keys and variable values and descriptions\nas values → following the logic: `{'VARIABLE_NAME': {'description':\n'String value or None', 'value': 'VALUE'}}`.\n3. **Check if the variable exists in a system**, method `variable_exist` with\na parameter `name` representing the name of the variable. \nReturn true if the variable exists, false otherwise.\n4. **Get the variable as a Cell object**, method `get_variable`, with\nparameter `name` (required as positional only) that returns the variable as a\nCell object (for computations in a sheet).\n5. **Check if there is any variable in the system**: using the property `empty`\nthat returns true if there is no variable in the system, false otherwise. \n\nTo get (and set similarly) the variable as a cell object, you can also use\nthe following approach with square brackets:\n```python\nsheet.iloc[i, j] = sheet.var['VARIABLE_NAME']\n```\nSame approach can be used for setting the value of variable:\n```python\nsheet.var['VARIABLE_NAME'] = some_value\n```\nGetting/setting the variables values should be done preferably by this logic.\n\nFor defining Excel format/style of the variable value, use the attribute\n`excel_format` of the `var` property in the following logic:\n```python\nsheet.var['VARIABLE_NAME'].excel_format = {'num_format': '#,##0'} \n```\n\n#### Example\nFollowing example multiply some cell with value of\nPI constant stored as a variable `pi`:\n```python\nsheet.set_variable(pi, 3.14159265359)\nsheet.iloc[i,j] = sheet.var['pi'] * sheet.iloc[x,y]\n```\n\n### Working with slices\nSimilarly, like in NumPy or Pandas DataFrame, there is a possibility\nhow to work with slices (e. g. if you want to select a whole row, column\nor set of rows and columns). Following code, select the third column:\n```python\nsheet.iloc[:,2]\n```\nOn the other hand\n```python\nsheet.loc[:,'Handy column']\n``` \nselects all the rows in the columns with the label _'Handy column'_. \n\nYou can again set the values in the slice to some constant, or the array\nof constants, or to another cell, or to the result of some computation.\n```python\nsheet.iloc[:,2] = constant  # Constant (float, string)\nsheet.iloc[:,2] = sheet.iloc[1,3] + sheet.iloc[1,4]  # Computation result\nsheet.iloc[:,2] = sheet.iloc[1,3]  # Just a reference to a cell\n```\nTechnically the slice is the instance of `CellSlice` class.\n\nThere are two ways how to slice, either using `.loc` or `.iloc` attribute.\nWhere `iloc` uses integer position and `loc` uses label of the position\n(as a string).\n\nBy default the right-most value is excluded when defining slices. If you want\nto use right-most value indexing, use one of the methods described below.\n\n#### Slicing using method (with the right-most value included option)\nSometimes, it is quite helpful to use a slice that includes the right-most\nvalue. There are two functions for this purpose:\n1. `sheet.iloc.get_slice(ROW_INDEX, COLUMN_INDEX, include_right=[True/False])`:\nThis way is equivalent to the one presented above with square brackets `[]`.\nThe difference is the key-value attribute `include_right` that enables the\npossibility of including the right-most value of the slice (default value is\nFalse). If you want to use slice as your index, you need to pass some `slice`\nobject to one (or both) of the indices. For example: \n`sheet.iloc.get_slice(slice(0, 7), 3, include_right=True])` selects first nine\nrows (because 8th row - right-most one - is included) from the fourth column\nof the sheet _(remember, all is indexed from zero)_.\n\n2. `sheet.iloc.set_slice(ROW_INDEX, COLUMN_INDEX, VALUE, \ninclude_right=[True/False])`: this command set slice to _VALUE_ in the similar\nlogic as when you call `get_slice` method (see the first point).\n\nThere are again two possibilities, either to use `iloc` with integer position\nor to use `loc` with labels.\n\n#### Aggregate functions\nThe slice itself can be used for computations using aggregate functions.\n\n1. **Sum**: return the sum of the cells in the slice. \n    For example: SUM(7, 8, 9) = 25.\n    Available as the function `sum` called on the slice object.\n    Usage: `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].sum()`\n2. **Product**: return the product of the cells in the slice. \n    For example: PROD(7, 8, 9) = 504.\n    Available as the function `product` called on the slice object.\n    Usage: `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].product()`\n3. **Minimum**: return the minimum of the cells in the slice. \n    For example: MIN(7, 8, 9) = 7.\n    Available as the function `min` called on the slice object.\n    Usage: `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].min()`\n4. **Maximum**: return the maximum of the cells in the slice. \n    For example: MAX(7, 8, 9) = 9.\n    Available as the function `max` called on the slice object.\n    Usage: `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].max()`\n5. **Mean-average**: return the arithmetic mean of the cells in the slice. \n    For example: MEAN(7, 8, 9) = 8.\n    Available as the function `mean` and `average` called on the slice object.\n    Usage: `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].mean()` or \n    `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].average()` \n6. **Standard deviation**: return the standard deviation of the cells in the\nslice. \n    For example: STDEV(7, 8, 9) = 1.\n    Available as the function `stdev` called on the slice object.\n    Usage: `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].stdev()`\n7. **Median**: return the median of the cells in the slice. \n    For example: MEDIAN(7, 8, 9) = 8.\n    Available as the function `median` called on the slice object.\n    Usage: `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].median()`\n8. **Count**: return the number of the cells in the slice. \n    For example: COUNT(7, 8, 9) = 3.\n    Available as the function `count` called on the slice object.\n    Usage: `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].count()`\n9. **IRR**: return the Internal Rate of Return (IRR) of the cells in the slice. \n    For example: IRR(-100, 0, 0, 74) = -0.0955.\n    Available as the function `irr` called on the slice object.\n    Usage: `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].irr()`\n10. **Match negative before positive**: return the position of the last\n    negative number in a series of negative numbers in the row or column\n    series.\n    For example:\n    MNBP(-100, -90, -80, 5, -500) = 3 _(equals to position of the number -80)_.\n    Available as the function `match_negative_before_positive` called on the\n    slice object.\n    Usage:\n    `sheet.iloc[i,j] = sheet.iloc[p:q,x:y].match_negative_before_positive()`\n\nAggregate functions always return the cell with the result.\n\nAll aggregate functions have parameters:\n\n1. `skip_none_cell (bool)`: If true, skips all the cells with `None` as\na value (and does not raise an exception), if false an exception is raised\nif the slice contains a cell with `None` value (empty cell).\n\n### Conditional\nThere is a support for the conditional statement (aka if-then-else statement).\nFunctionality is implemented in the property `fn` of the `Sheet`\ninstance in the method `conditional`. It takes three parameters (positional)\nin precisely this order:\n\n1. **Condition**: the cell with a boolean value that is evaluated (typically\nachieved using operators ==, !=, >, <, etc.).\n2. **Consequent**: the cell that is taken when the condition is evaluated as\ntrue.\n3. **Alternative**:  the cell that is taken when the condition is evaluated as\nfalse.\n\nAll the parameters are the instance of `Cell` class.\n\n### Linear interpolation\nThere is a support for linear interpolation.\nFunctionality is implemented in the property `fn` of the `Sheet`\ninstance in the method `linear_interpolation`. \nIt takes five parameters in this order:\n\n1. **x_start**: Where is the x coordinate of the start.\n2. **y_start**: Where is the y OR f(x) coordinate of the start.\n3. **x_end**: Where is the x coordinate of the end.\n4. **y_end**: Where is the y OR f(x) coordinate of the end.\n5. **x**: For what value of x are we interpolating.\n\nAll the parameters are the instance of `Cell` class.\n\n#### Example of conditional\nConsider the following example that compares whether two cells are equals,\nif yes, it takes some value in a cell, if not, another value in the\ndifferent cell:\n```python\nsheet.iloc[i,j] = sheet.fn.conditional(\n    # Condition is the first parameter:\n    sheet.iloc[1,2] == sheet.iloc[2,2],\n    # Consequent (value if condition is true) is the second parameter:\n    sheet.iloc[3,1],\n    # Alternative (value if condition is false) is the third parameter:\n    sheet.iloc[4,1]\n)\n```\n\n### Raw statement\nThe raw statement represents the extreme way how to set-up value and\ncomputation string of the cell. It should be used only to circumvent\nissues with missing or defective functionality.\n\nThe raw statement is accessible using `fn` property of the Sheet class\nobject.\n\nThe raw statement should never be used unless you really have to.\n\n#### Example of raw statement\nConsider that you need to compute an arccosine value of some cell:\n```python\nsheet.iloc[i,j] = sheet.fn.raw(\n    # Value that should be used as the result (as a Cell instance):\n    sheet.fn.const(numpy.arccos(0.7)),\n    # Definition of words in each language:\n    {\n        'python_numpy': \"numpy.arccos(0.7)\",\n        'excel': \"ACOS(0.7)\"\n        # Potentialy some other languages, like 'native', etc.\n    }\n)\n```\n\n### Offset function\nThe offset function represents the possibility of reading the value\nthat is shifted by some number rows left, and some number of columns\ndown from some referential cells.\n\nIt is accessible from the Sheet instance using `fn`\nproperty and `offset` method. Parameters are following (only\npositional, in exactly this order):\n* **Reference cell**: Reference cell from that the position is computed.\n* **Cell defining a number of rows to be skipped**: How many rows (down)\nshould be skipped.\n* **Cell defining a number of columns to be skipped**: How many columns (left)\nshould be skipped.\n\n#### Example:\nFollowing example assign the value of the cell that is on the third row and \nsecond column to the cell that is on the second row and second column.\n```python\nsheet.iloc[1,1] = sheet.fn.offset(\n    sheet.iloc[0,0], sheet.fn.const(2), sheet.fn.const(1)\n)\n```\n\n### Computations\nAll operations have to be done using the objects of type Cell. \n\n#### Constants\nIf you want to use a constant value, you need to create an un-anchored cell\nwith this value. The easiest way of doing so is:\n```python\n# For creating the Cell for computation with constant value 7\nconstant_cell = sheet.fn.const(7)\n```\nThe value OPERAND bellow is always the reference to another cell in the\nsheet or the constant created as just described.\n\n#### Unary operations\nThere are the following unary operations (in the following the `OPERAND`\nis the instance of the Cell class): \n\n1. **Ceiling function**: returns the ceil of the input value.\n    For example ceil(4.1) = 5.\n    Available in the `fn` property of the `sheet` object.\n    Usage: `sheet.iloc[i,j] = sheet.fn.ceil(OPERAND)`\n2. **Floor function**: returns the floor of the input value.\n    For example floor(4.1) = 4.\n    Available in the `fn` property of the `sheet` object.\n    Usage: `sheet.iloc[i,j] = sheet.fn.floor(OPERAND)`\n3. **Round function**: returns the round of the input value.\n    For example round(4.5) = 5.\n    Available in the `fn` property of the `sheet` object.\n    Usage: `sheet.iloc[i,j] = sheet.fn.round(OPERAND)`\n4. **Absolute value function**: returns the absolute value of the input value.\n    For example abs(-4.5) = 4.5.\n    Available in the `fn` property of the `sheet` object.\n    Usage: `sheet.iloc[i,j] = sheet.fn.abs(OPERAND)`\n5. **Square root function**: returns the square root of the input value.\n    For example sqrt(16) = 4.\n    Available in the `fn` property of the `sheet` object.\n    Usage: `sheet.iloc[i,j] = sheet.fn.sqrt(OPERAND)`\n6. **Logarithm function**: returns the natural logarithm of the input value.\n    For example ln(11) = 2.3978952728.\n    Available in the `fn` property of the `sheet` object.\n    Usage: `sheet.iloc[i,j] = sheet.fn.ln(OPERAND)`\n7. **Exponential function**: returns the exponential of the input value.\n    For example exp(1) = _e_ power to 1 = 2.71828182846.\n    Available in the `fn` property of the `sheet` object.\n    Usage: `sheet.iloc[i,j] = sheet.fn.exp(OPERAND)`\n8. **Logical negation**: returns the logical negation of the input value.\n    For example neg(false) = true.\n    Available as the overloaded operator `~`.\n    Usage: `sheet.iloc[i,j] = ~OPERAND`.\n    _Also available in the `fn` property of the `sheet` object.\n    Usage: `sheet.iloc[i,j] = sheet.fn.neg(OPERAND)`_\n9. **Signum function**: returns the signum of the input value.\n    For example sign(-4.5) = -1, sign(5) = 1, sign(0) = 0.\n    Available in the `fn` property of the `sheet` object.\n    Usage: `sheet.iloc[i,j] = sheet.fn.sign(OPERAND)`\n\nAll unary operators are defined in the `fn` property of the Sheet\nobject (together with brackets, that works exactly the same - see bellow).\n\n#### Binary operations\nThere are the following binary operations (in the following the `OPERAND_1`\nand `OPERAND_2` are the instances of the Cell class):\n\n1. **Addition**: return the sum of two numbers. \n    For example: 5 + 2 = 7.\n    Available as the overloaded operator `+`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 + OPERAND_2`\n2. **Subtraction**: return the difference of two numbers. \n    For example: 5 - 2 = 3.\n    Available as the overloaded operator `-`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 - OPERAND_2`\n3. **Multiplication**: return the product of two numbers. \n    For example: 5 * 2 = 10.\n    Available as the overloaded operator `*`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 * OPERAND_2`\n4. **Division**: return the quotient of two numbers. \n    For example: 5 / 2 = 2.5.\n    Available as the overloaded operator `/`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 / OPERAND_2`\n5. **Exponentiation**: return the power of two numbers. \n    For example: 5 ** 2 = 25.\n    Available as the overloaded operator `**`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 ** OPERAND_2`\n6. **Logical equality**: return true if inputs are equals, false otherwise. \n    For example: 5 = 2 <=> false.\n    Available as the overloaded operator `==`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 == OPERAND_2`\n7. **Logical inequality**: return true if inputs are not equals,\nfalse otherwise. \n    For example: 5 ≠ 2 <=> true.\n    Available as the overloaded operator `!=`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 != OPERAND_2`\n8. **Relational greater than operator**: return true if the first operand is\ngreater than another operand, false otherwise. \n    For example: 5 > 2 <=> true.\n    Available as the overloaded operator `>`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 > OPERAND_2`\n9. **Relational greater than or equal to operator**: return true if the first\noperand is greater than or equal to another operand, false otherwise. \n    For example: 5 ≥ 2 <=> true.\n    Available as the overloaded operator `>=`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 >= OPERAND_2`\n10. **Relational less than operator**: return true if the first operand is\nless than another operand, false otherwise. \n    For example: 5 < 2 <=> false.\n    Available as the overloaded operator `<`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 < OPERAND_2`\n11. **Relational less than or equal to operator**: return true if the first\noperand is less than or equal to another operand, false otherwise. \n    For example: 5 ≤ 2 <=> false.\n    Available as the overloaded operator `<=`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 <= OPERAND_2`\n12. **Logical conjunction operator**: return true if the first\noperand is true and another operand is true, false otherwise. \n    For example: true ∧ false <=> false.\n    Available as the overloaded operator `&`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 & OPERAND_2`.\n    **_BEWARE that operator `and` IS NOT OVERLOADED! Because it is not\n    technically possible._**\n13. **Logical disjunction operator**: return true if the first\noperand is true or another operand is true, false otherwise. \n    For example: true ∨ false <=> true.\n    Available as the overloaded operator `|`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 | OPERAND_2`.\n    **_BEWARE that operator `or` IS NOT OVERLOADED! Because it is not\n    technically possible._**\n14. **Concatenate strings**: return string concatenation of inputs.\n    For example: CONCATENATE(7, \"Hello\") <=> \"7Hello\".\n    Available as the overloaded operator `<<`.\n    Usage: `sheet.iloc[i,j] = OPERAND_1 << OPERAND_2`\n\nOperations can be chained in the string:\n```python\nsheet.iloc[i,j] = OPERAND_1 + OPERAND_2 * OPERAND_3 ** OPERAND_4\n```\nThe priority of the operators is the same as in normal mathematics. If\nyou need to modify priority, you need to use brackets, for example:\n```python\nsheet.iloc[i,j] = sheet.fn.brackets(OPERAND_1 + OPERAND_2) \\\n    * OPERAND_3 ** OPERAND_4\n```\n#### Brackets for computation\nBrackets are technically speaking just another unary operator. They are\ndefined in the `fn` property. They can be used like:\n```python\nsheet.iloc[i,j] = sheet.fn.brackets(OPERAND_1 + OPERAND_2) \\ \n    * OPERAND_3 ** OPERAND_4\n```\n#### Example\nFor example\n```python\n# Equivalent of: value at [1,0] * (value at [2,1] + value at [3,1]) * exp(9)\nsheet.iloc[0,0] = sheet.iloc[1,0] * sheet.fn.brackets(\n        sheet.iloc[2,1] + sheet.iloc[3,1]\n    ) * sheet.fn.exp(sheet.fn.const(9))\n```\n### Accessing the computed values\nYou can access either to the actual numerical value of the cell or to the\nword that is created in all the languages. The numerical value is accessible\nusing the `value` property, whereas the words are accessible using\nthe `parse` property (it returns a dictionary with languages as keys\nand word as values).\n```python\n# Access the value of the cell\nvalue_of_cell: float = sheet.iloc[i, j].value\n# Access all the words in the cell\nword: dict = sheet.iloc[i, j].parse\n# Access the word in language 'lang'\nword_in_language_lang = word['lang']\n```\n\n### Exporting the results\nThere are various methods available for exporting the results. All these\nmethods can be used either to a whole sheet (instance of Sheet)\nor to any slice (CellSlice instance):\n\n1. **Excel format**, method `to_excel`:\nExport the sheet to the Excel-compatible file.\n2. **Dictionary of values**, method `to_dictionary`:\nExport the sheet to the dictionary (`dict` type).\n3. **JSON format**, method `to_json`:\nExport the sheet to the JSON format (serialize output of `to_dictionary`).\n3. **2D array as a string**, method: `to_string_of_values`:\nExport values to the string that looks like Python array definition string.\n4. **CSV**, method `to_csv`:\nExport the values to the CSV compatible string (that can be saved to the file)\n5. **Markdown (MD)**, method `to_markdown`:\nExport the values to MD (Markdown) file format string.\nDefined as a table.\n6. **NumPy ndarray**, method `to_numpy`:\nExport the sheet as a `numpy.ndarray` object.\n7. **Python 2D list**, method `to_2d_list`: \nExport values 2 dimensional Python array (list of the list of the values).\n8. **HTML table**, method `to_html_table`:\nExport values to HTML table.\n\n#### Description field\nThere is a possibility to add a description to a cell in the sheet\n(or to the whole slice of the sheet). It can be done using the property\n`description` on the cell or slice object. It should be done just before\nthe export is done (together with defining Excel styles, see below)\nbecause once you rewrite the value of the cell on a given location,\nthe description is lost.\n\nExample of using the description field:\n```python\n# Setting the description of a single cell\nsheet.iloc[i, j].description = \"Some text describing a cell\"\n# Seting the description to a slice (propagate its value to each cell)\nsheet.iloc[i:j, k:l].description = \"Text describing each cell in the slice\"\n```\n#### Exporting to Excel\nIt can be done using the interface:\n```python\nsheet.to_excel(\n    file_path: str,\n    /, *,\n    spaces_replacement: str = ' ',\n    label_row_format: dict = {'bold': True},\n    label_column_format: dict = {'bold': True},\n    variables_sheet_name: Optional[str] = None,\n    variables_sheet_header: Dict[str, str] = MappingProxyType(\n    {\n        \"name\": \"Name\",\n        \"value\": \"Value\",\n        \"description\": \"Description\"\n    }),\n    values_only: bool = False,\n    skipped_label_replacement: str = '',\n    row_height: List[float] = [],\n    column_width: List[float] = [],\n    top_left_corner_text: str = \"\"\n)\n```\nThe only required argument is the path to the destination file (positional\nonly parameter). Other parameters are passed as keywords (non-positional only). \n* `file_path (str)`: Path to the target .xlsx file. (**REQUIRED**, only\npositional)\n* `spaces_replacement (str)`: All the spaces in the rows and columns\ndescriptions (labels) are replaced with this string.\n* `label_row_format (dict)`: Excel styles for the label of rows,\ndocumentation: https://xlsxwriter.readthedocs.io/format.html\n* `label_column_format (dict)`: Excel styles for the label of columns,\ndocumentation: https://xlsxwriter.readthedocs.io/format.html\n* `variables_sheet_name (Optional[str])`: If set, creates the new\nsheet with variables and their description and possibility\nto set them up (directly from the sheet).\n* `variables_sheet_header (Dict[str, str])`: Define the labels (header)\nfor the sheet with variables (first row in the sheet). Dictionary should look\nlike: `{\"name\": \"Name\", \"value\": \"Value\", \"description\": \"Description\"}`.\n* `values_only (bool)`: If true, only values (and not formulas) are\nexported.\n* `skipped_label_replacement (str)`: Replacement for the SkippedLabel\ninstances.\n* `row_height (List[float])`: List of row heights, or empty for the\ndefault height (or `None` for default height in the series).\nIf row labels are included, there is a label row height on the\nfirst position in array.\n* `column_width (List[float])`: List of column widths, or empty for the\ndefault widths (or `None` for the default width in the series).\nIf column labels are included, there is a label column width\non the first position in array.\n* `top_left_corner_text (str)`: Text in the top left corner. Apply\nonly when the row and column labels are included.\n\n##### Setting the format/style for Excel cells\nThere is a possibility to set the style/format of each cell in the grid\nor the slice of the gird using property `excel_format`. Style assignment\nshould be done just before the export to the file because each new\nassignment of values to the cell overrides its style. Format/style can\nbe set for both slice and single value. \n\nExample of setting Excel format/style for cells and slices:\n```python\n# Set the format of the cell on the position [i, j] (use bold value)\nsheet.iloc[i, j].excel_format = {'bold': True}\n# Set the format of the cell slice (use bold value and red color)\nsheet.iloc[i:j, k:l].excel_format = {'bold': True, 'color': 'red'}\n```\n##### Appending to existing Excel file\nAppending to existing Excel (`.xlsx`) format **is currently not supported** due\nto the missing functionality of the package XlsxWriter on which this\nlibrary relies.\n\n#### Exporting to the dictionary (and JSON)\nIt can be done using the interface:\n```python\nsheet.to_dictionary(languages: List[str] = None,\n                    use_language_for_description: Optional[str] = None, \n                    /, *, \n                    by_row: bool = True,\n                    languages_pseudonyms: List[str] = None,\n                    spaces_replacement: str = ' ',\n                    skip_nan_cell: bool = False,\n                    nan_replacement: object = None,\n                    append_dict: dict = {})\n```\n**Parameters are (all optional):**\n\n_Positional only:_\n* `languages (List[str])`: List of languages that should be exported.\n* `use_language_for_description (Optional[str])`: If set-up (using the language\nname), description field is set to be either the description value \n(if defined) or the value of this language. \n\n_Key-value only:_\n* `by_row (bool)`: If True, rows are the first indices and columns are the\nsecond in the order. If False it is vice-versa.\n* `languages_pseudonyms (List[str])`: Rename languages to the strings inside\nthis list.\n* `spaces_replacement (str)`: All the spaces in the rows and columns\ndescriptions (labels) are replaced with this string.\n* `skip_nan_cell (bool)`: If true, `None` (NaN, empty cells) values are\nskipped, default value is false (NaN values are included).\n* `nan_replacement (object)`: Replacement for the `None` (NaN) value.\n* `error_replacement (object)`: Replacement for the error value.\n* `append_dict (dict)`: Append this dictionary to output.\n* `generate_schema (bool)`: If true, returns the JSON schema.\n\nAll the rows and columns with labels that are instances of SkippedLabel are\nentirely skipped. \n\n**The return value is:** \n\nDictionary with keys: 1. column/row, 2. row/column, 3. language or\nlanguage pseudonym or 'value' keyword for values -> value as a value or\nas a cell building string.\n\n##### Exporting to JSON\nExporting to JSON string is available using `to_json` method with exactly the\nsame interface. The return value is the string.\n\nThe reason why this method is separate is because of some values inserted\nfrom NumPy arrays cannot be serialized using native serializer.\n\nTo get JSON schema you can use either `generate_schema (bool)` parameter or\ndirectly use static method `generate_json_schema` of the `Sheet` class.\n\n##### Output example\nOutput of the JSON format\n```json\n{\n   \"table\":{\n      \"data\":{\n         \"rows\":{\n            \"R_0\":{\n               \"columns\":{\n                  \"NL_C_0\":{\n                     \"excel\":\"1\",\n                     \"python_numpy\":\"1\",\n                     \"native\":\"1\",\n                     \"value\":1,\n                     \"description\":\"DescFor0,0\"\n                  },\n                  \"NL_C_1\":{\n                     \"excel\":\"2\",\n                     \"python_numpy\":\"2\",\n                     \"native\":\"2\",\n                     \"value\":2,\n                     \"description\":\"DescFor0,1\"\n                  },\n                  \"NL_C_2\":{\n                     \"excel\":\"3\",\n                     \"python_numpy\":\"3\",\n                     \"native\":\"3\",\n                     \"value\":3,\n                     \"description\":\"DescFor0,2\"\n                  },\n                  \"NL_C_3\":{\n                     \"excel\":\"4\",\n                     \"python_numpy\":\"4\",\n                     \"native\":\"4\",\n                     \"value\":4,\n                     \"description\":\"DescFor0,3\"\n                  }\n               }\n            },\n            \"R_1\":{\n               \"columns\":{\n                  \"NL_C_0\":{\n                     \"excel\":\"5\",\n                     \"python_numpy\":\"5\",\n                     \"native\":\"5\",\n                     \"value\":5,\n                     \"description\":\"DescFor1,0\"\n                  },\n                  \"NL_C_1\":{\n                     \"excel\":\"6\",\n                     \"python_numpy\":\"6\",\n                     \"native\":\"6\",\n                     \"value\":6,\n                     \"description\":\"DescFor1,1\"\n                  },\n                  \"NL_C_2\":{\n                     \"excel\":\"7\",\n                     \"python_numpy\":\"7\",\n                     \"native\":\"7\",\n                     \"value\":7,\n                     \"description\":\"DescFor1,2\"\n                  },\n                  \"NL_C_3\":{\n                     \"excel\":\"8\",\n                     \"python_numpy\":\"8\",\n                     \"native\":\"8\",\n                     \"value\":8,\n                     \"description\":\"DescFor1,3\"\n                  }\n               }\n            },\n            \"R_2\":{\n               \"columns\":{\n                  \"NL_C_0\":{\n                     \"excel\":\"9\",\n                     \"python_numpy\":\"9\",\n                     \"native\":\"9\",\n                     \"value\":9,\n                     \"description\":\"DescFor2,0\"\n                  },\n                  \"NL_C_1\":{\n                     \"excel\":\"10\",\n                     \"python_numpy\":\"10\",\n                     \"native\":\"10\",\n                     \"value\":10,\n                     \"description\":\"DescFor2,1\"\n                  },\n                  \"NL_C_2\":{\n                     \"excel\":\"11\",\n                     \"python_numpy\":\"11\",\n                     \"native\":\"11\",\n                     \"value\":11,\n                     \"description\":\"DescFor2,2\"\n                  },\n                  \"NL_C_3\":{\n                     \"excel\":\"12\",\n                     \"python_numpy\":\"12\",\n                     \"native\":\"12\",\n                     \"value\":12,\n                     \"description\":\"DescFor2,3\"\n                  }\n               }\n            },\n            \"R_3\":{\n               \"columns\":{\n                  \"NL_C_0\":{\n                     \"excel\":\"13\",\n                     \"python_numpy\":\"13\",\n                     \"native\":\"13\",\n                     \"value\":13,\n                     \"description\":\"DescFor3,0\"\n                  },\n                  \"NL_C_1\":{\n                     \"excel\":\"14\",\n                     \"python_numpy\":\"14\",\n                     \"native\":\"14\",\n                     \"value\":14,\n                     \"description\":\"DescFor3,1\"\n                  },\n                  \"NL_C_2\":{\n                     \"excel\":\"15\",\n                     \"python_numpy\":\"15\",\n                     \"native\":\"15\",\n                     \"value\":15,\n                     \"description\":\"DescFor3,2\"\n                  },\n                  \"NL_C_3\":{\n                     \"excel\":\"16\",\n                     \"python_numpy\":\"16\",\n                     \"native\":\"16\",\n                     \"value\":16,\n                     \"description\":\"DescFor3,3\"\n                  }\n               }\n            },\n            \"R_4\":{\n               \"columns\":{\n                  \"NL_C_0\":{\n                     \"excel\":\"17\",\n                     \"python_numpy\":\"17\",\n                     \"native\":\"17\",\n                     \"value\":17,\n                     \"description\":\"DescFor4,0\"\n                  },\n                  \"NL_C_1\":{\n                     \"excel\":\"18\",\n                     \"python_numpy\":\"18\",\n                     \"native\":\"18\",\n                     \"value\":18,\n                     \"description\":\"DescFor4,1\"\n                  },\n                  \"NL_C_2\":{\n                     \"excel\":\"19\",\n                     \"python_numpy\":\"19\",\n                     \"native\":\"19\",\n                     \"value\":19,\n                     \"description\":\"DescFor4,2\"\n                  },\n                  \"NL_C_3\":{\n                     \"excel\":\"20\",\n                     \"python_numpy\":\"20\",\n                     \"native\":\"20\",\n                     \"value\":20,\n                     \"description\":\"DescFor4,3\"\n                  }\n               }\n            }\n         }\n      },\n      \"variables\":{\n\n      },\n      \"rows\":[\n         {\n            \"name\":\"R_0\",\n            \"description\":\"HT_R_0\"\n         },\n         {\n            \"name\":\"R_1\",\n            \"description\":\"HT_R_1\"\n         },\n         {\n            \"name\":\"R_2\",\n            \"description\":\"HT_R_2\"\n         },\n         {\n            \"name\":\"R_3\",\n            \"description\":\"HT_R_3\"\n         },\n         {\n            \"name\":\"R_4\",\n            \"description\":\"HT_R_4\"\n         }\n      ],\n      \"columns\":[\n         {\n            \"name\":\"NL_C_0\",\n            \"description\":\"HT_C_0\"\n         },\n         {\n            \"name\":\"NL_C_1\",\n            \"description\":\"HT_C_1\"\n         },\n         {\n            \"name\":\"NL_C_2\",\n            \"description\":\"HT_C_2\"\n         },\n         {\n            \"name\":\"NL_C_3\",\n            \"description\":\"HT_C_3\"\n         }\n      ]\n   }\n}\n```\n\n#### Exporting to the CSV\nIt can be done using the interface:\n```python\nsheet.to_csv(*,\n    language: Optional[str] = None,\n    spaces_replacement: str = ' ',\n    top_left_corner_text: str = \"Sheet\",\n    sep: str = ',',\n    line_terminator: str = '\\n',\n    na_rep: str = '',\n    skip_labels: bool = False,\n    skipped_label_replacement: str = ''\n) -> str\n```\nParameters are (all optional and key-value only):\n\n* `language (Optional[str])`: If set-up, export the word in this\nlanguage in each cell instead of values.\n* `spaces_replacement (str)`: All the spaces in the rows and columns\n descriptions (labels) are replaced with this string.\n* `top_left_corner_text (str)`: Text in the top left corner.\n* `sep (str)`: Separator of values in a row.\n* `line_terminator (str)`: Ending sequence (character) of a row.\n* `na_rep (str)`: Replacement for the missing data.\n* `skip_labels (bool)`: If true, first row and column with labels is\n skipped\n* `skipped_label_replacement (str)`: Replacement for the SkippedLabel\ninstances.\n\n**The return value is:** \n\nCSV of the values as a string.\n\n##### Output example\n```text\nSheet,NL_C_0,NL_C_1,NL_C_2,NL_C_3\nR_0,1,2,3,4\nR_1,5,6,7,8\nR_2,9,10,11,12\nR_3,13,14,15,16\nR_4,17,18,19,20\n```\n\n#### Exporting to Markdown (MD) format\nIt can be done using the interface:\n```python\nsheet.to_markdown(*,\n    language: Optional[str] = None,\n    spaces_replacement: str = ' ',\n    top_left_corner_text: str = \"Sheet\",\n    na_rep: str = '',\n    skip_labels: bool = False,\n    skipped_label_replacement: str = ''\n)\n```\nParameters are (all optional, all key-value only):\n\n* `language (Optional[str])`: If set-up, export the word in this\nlanguage in each cell instead of values.\n* `spaces_replacement (str)`: All the spaces in the rows and columns\ndescriptions (labels) are replaced with this string.\n* `top_left_corner_text (str)`: Text in the top left corner.\n* `na_rep (str)`: Replacement for the missing data.\n* `skip_labels (bool)`: If true, first row and column with labels is\nskipped\n* `skipped_label_replacement (str)`: Replacement for the SkippedLabel\ninstances.\n\n**The return value is:** \n\nMarkdown (MD) compatible table of the values as a string.\n\n##### Output example\n```markdown\n| Sheet |*NL_C_0* | *NL_C_1* | *NL_C_2* | *NL_C_3* |\n|----|----|----|----|----|\n| *R_0* | 1 | 2 | 3 | 4 |\n| *R_1* | 5 | 6 | 7 | 8 |\n| *R_2* | 9 | 10 | 11 | 12 |\n| *R_3* | 13 | 14 | 15 | 16 |\n| *R_4* | 17 | 18 | 19 | 20 |\n```\n\n#### Exporting to HTML table format\nIt can be done using the interface:\n```python\nsheet.to_html_table(*,\n    spaces_replacement: str = ' ',\n    top_left_corner_text: str = \"Sheet\",\n    na_rep: str = '',\n    language_for_description: str = None,\n    skip_labels: bool = False,\n    skipped_label_replacement: str = ''\n)\n```\nParameters are (all optional, all key-value only):\n\n* `spaces_replacement (str)`: All the spaces in the rows and columns\ndescriptions (labels) are replaced with this string.\n* `top_left_corner_text (str)`: Text in the top left corner.\n* `na_rep (str)`: Replacement for the missing data.\n* `language_for_description (str)`: If not `None`, the description\nof each computational cell is inserted as word of this language\n(if the property description is not set).\n* `skip_labels (bool)`: If true, first row and column with labels is\nskipped\n* `skipped_label_replacement (str)`: Replacement for the SkippedLabel\ninstances.\n\n**The return value is:** \n\nHTML table of the values as a string. Table is usable mainly for debugging\npurposes.\n\n##### Output example\n```html\n<table>\n   <tr>\n      <th>Sheet</th>\n      <th><a href=\"javascript:;\"  title=\"HT_C_0\">NL_C_0</a></th>\n      <th><a href=\"javascript:;\"  title=\"HT_C_1\">NL_C_1</a></th>\n      <th><a href=\"javascript:;\"  title=\"HT_C_2\">NL_C_2</a></th>\n      <th><a href=\"javascript:;\"  title=\"HT_C_3\">NL_C_3</a></th>\n   </tr>\n   <tr>\n      <td><a href=\"javascript:;\"  title=\"HT_R_0\">R_0</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor0,0\">1</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor0,1\">2</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor0,2\">3</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor0,3\">4</a></td>\n   </tr>\n   <tr>\n      <td><a href=\"javascript:;\"  title=\"HT_R_1\">R_1</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor1,0\">5</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor1,1\">6</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor1,2\">7</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor1,3\">8</a></td>\n   </tr>\n   <tr>\n      <td><a href=\"javascript:;\"  title=\"HT_R_2\">R_2</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor2,0\">9</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor2,1\">10</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor2,2\">11</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor2,3\">12</a></td>\n   </tr>\n   <tr>\n      <td><a href=\"javascript:;\"  title=\"HT_R_3\">R_3</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor3,0\">13</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor3,1\">14</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor3,2\">15</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor3,3\">16</a></td>\n   </tr>\n   <tr>\n      <td><a href=\"javascript:;\"  title=\"HT_R_4\">R_4</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor4,0\">17</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor4,1\">18</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor4,2\">19</a></td>\n      <td><a href=\"javascript:;\"  title=\"DescFor4,3\">20</a></td>\n   </tr>\n</table>\n```\n\n## Remarks and definitions\n* **Anchored cell** is a cell that is located in the sheet and can be\naccessed using position.\n* **Un-anchored cell** is a cell that is the result of some computation or\na constant defined by the user for some computation (and does not have\nany position in the sheet grid yet).\n\n**Example:**\n```python\nanchored_cell = sheet.iloc[4,2]\nunanchored_cell_1 = sheet.iloc[4,2] * sheet.iloc[5,2]\nunanchored_cell_2 = sheet.fn.const(9)\n```\n\n## Software User Manual (SUM), how to use it?\n### Installation\nTo install the most actual package, use the command:\n```commandline\ngit clone https://github.com/david-salac/Portable-spreadsheet-generator\ncd Portable-spreadsheet-generator/\npython setup.py install\n```\nor simply install using PIP:\n```commandline\npip install portable-spreadsheet\n```\n#### Running of the unit-tests\nFor running package unit-tests, use command:\n```commandline\npython setup.py test\n```\nIn order to run package unit-tests you need to clone package first.\n### Demo\nThe following demo contains a simple example with aggregations.\n\n```python\nimport portable_spreadsheet as ps\nimport numpy as np\n\n# This is a simple demo that represents the possibilities of the package\n#   The purpose of this demo is to create a class rooms and monitor students\n\nsheet = ps.Sheet.create_new_sheet(\n    # Size of the table (rows, columns):\n    24, 8,\n    rows_labels=['Adam', 'Oliver', 'Harry', 'George', 'John', 'Jack', 'Jacob',\n                 'Leo', 'Oscar', 'Charlie', 'Peter', 'Olivia', 'Amelia',\n                 'Isla', 'Ava', 'Emily', 'Isabella', 'Mia', 'Poppy',\n                 'Ella', 'Lily', 'Average of all', 'Average of boys',\n                 'Average of girls'],\n    columns_labels=['Biology', 'Physics', 'Math', 'English', 'French',\n                    'Best performance', 'Worst performance', 'Mean'],\n    columns_help_text=[\n        'Annual performance', 'Annual performance', 'Annual performance',\n        'Annual performance', 'Annual performance',\n        'Best performance of all subjects',\n        'Worst performance of all subjects',\n        'Mean performance of all subjects',\n    ]\n)\n\n# === Insert some percentiles to students performance: ===\n# A) In this case insert random values in the first row to the 3rd row from the\n#   end, and in the first column.\nsheet.iloc[:-3, 0] = np.random.random(21) * 100\n# B) Same can be achieved using the label indices:\nsheet.loc[\"Adam\":'Average of all', 'Physics'] = np.random.random(21) * 100\n# C) Or by using the cell by cell approach:\nfor row_idx in range(21):\n    # I) Again by the simple integer index\n    sheet.iloc[row_idx, 2] = np.random.random() * 100\n    # II) Or by the label\n    row_label: str = sheet.cell_indices.rows_labels[row_idx]\n    sheet.loc[row_label, 'English'] = np.random.random() * 100\n# Insert values to last column\nsheet.iloc[:21, 4] = np.random.random(21) * 100\n\n# === Insert computations ===\n# Insert the computations on the row\nfor row_idx in range(21):\n    # I) Maximal value\n    sheet.iloc[row_idx, 5] = sheet.iloc[row_idx, 0:5].max()\n    # II) Minimal value\n    sheet.iloc[row_idx, 6] = sheet.iloc[row_idx, 0:5].min()\n    # III) Mean value\n    sheet.iloc[row_idx, 7] = sheet.iloc[row_idx, 0:5].mean()\n# Insert the similar to rows:\nfor col_idx in range(8):\n    # I) Values of all\n    sheet.iloc[21, col_idx] = sheet.iloc[0:21, col_idx].average()\n    # II) Values of boys\n    sheet.iloc[22, col_idx] = sheet.iloc[0:11, col_idx].average()\n    # III) Values of girls\n    sheet.iloc[23, col_idx] = sheet.iloc[11:21, col_idx].average()\n\n# Export results to Excel file, TODO: change the target directory:\nsheet.to_excel(\"OUTPUTS/student_marks.xlsx\", sheet_name=\"Marks\")\n\n# Top print table as Markdown\nprint(sheet.to_markdown())\n```\n\n## Multiple sheets\nIf you need to have an application that uses multiple sheets\nsimultaneously - there is a special class for these purposes\ncalled WorkBook. It allows you to create multiple sheets, have\nreferences from one sheet to another and export to various formats.\n\n### Creation of the WorkBook\nTo create a new workbook, you need to have all sheets prepared. The\nconstructor accepts just a list of all sheets (Sheet instance).\n```python\ndef __init__(self, *sheets: Iterable[Sheet])\n```\n\n### Special sheet for variables\nThere is a way how to create a customized sheet for variables. \nTo do so, use the function `create_variable_sheet`. It\nhas the following syntax:\n```python\ndef create_variable_sheet(self,\n                          *,\n                          nr_rows_prefix: int = 0,\n                          nr_rows_suffix: int = 0,\n                          nr_columns_prefix: int = 0,\n                          nr_columns_suffix: int = 0,\n                          sheet_name: str = \"config\",\n                          position: int = 0\n                          ) -> Sheet\n```\nparameters have the following logic:\n * `nr_rows_prefix (int)`: defines the number of rows that are prefix\nfor variables definition segment.\n * `nr_rows_suffix (int)`: defines the number of rows that are suffix\nfor variables definition segment.\n * `nr_columns_prefix (int)`: defines the number of columns that are\nprefix for variables definition segment.\n * `nr_columns_suffix (int)`: defines the number of columns that are\nsuffix for variables definition segment.\n * `sheet_name (str)`: Name of the sheet for variables.\n * `position (int)`: Relative position in the workbook (indexed from 0).\n\n### Exporting to Excel (xlsx) format\nFor exporting to Excel (.xlsx) format, there is a function called\n`to_excel`. It takes two parameters. The first one is the path to\nthe file; another is the set of parameters for exporting each sheet.\n```python\ndef to_excel(self,\n             file_path: Union[str, pathlib.Path],\n             /, *,  # noqa: E225\n             export_parameters: Tuple[ExcelParameters]\n             ) -> None\n```\nthe first parameter is always positional; another is keyword type.\n\nData class `ExcelParameters` has the structure motivated by the\nparameters required by `Sheet.to_excel`:\n```python\nclass ExcelParameters(ClassVarsToDict):\n    spaces_replacement: str = ' '\n    label_row_format: dict = MappingProxyType({'bold': True})\n    label_column_format: dict = MappingProxyType({'bold': True})\n    values_only: bool = False\n    skipped_label_replacement: str = ''\n    row_height: Tuple[float] = tuple([])\n    column_width: Tuple[float] = tuple([])\n    top_left_corner_text: str = \"\"\n```\n\n### Exporting to dictionary\nIt is possible to export sheets to the dictionary\nby using `to_dictionary` function:\n```python\ndef to_dictionary(self,\n                  *,\n                  export_parameters: Tuple[DictionaryParameters]\n                  ) -> dict:\n```\nthe second parameter is keyword type.\n\nData class `DictionaryParameters` has the structure motivated by the\nparameters required by `Sheet.to_dictionary`:\n```python\nclass DictionaryParameters(ClassVarsToDict):\n    languages: List[str] = None\n    use_language_for_description: Optional[str] = None\n    by_row: bool = True\n    languages_pseudonyms: List[str] = None\n    spaces_replacement: str = ' '\n    skip_nan_cell: bool = False\n    nan_replacement: object = None\n    error_replacement: object = None\n    append_dict: dict = MappingProxyType({})\n    generate_schema: bool = False\n```\n\n### Export to JSON\nExporting to JSON has the same logic as exporting to dictionary.\n```python\ndef to_json(self,\n            *,\n            export_parameters: Tuple[DictionaryParameters]) -> str:\n```\nThe logic is the same as above.\n\nThe JSON schema can be generated using the static `generate_json_schema`\nfunction.\n\n### Export to list\nIt is possible to export sheets to the 3D list\nby using `to_list` function:\n```python\ndef to_list(self,\n            *,\n            export_parameters: Tuple[ListParameters]) -> list:\n```\nthe second parameter is keyword type.\n\nData class `ListParameters` has the structure motivated by the\nparameters required by `Sheet.to_list`:\n```python\nclass ListParameters(ClassVarsToDict):\n    language: Optional[str] = None\n    skip_labels: bool = False\n    na_rep: Optional[object] = None\n    spaces_replacement: str = ' '\n    skipped_label_replacement: str = ''\n```\n\n### Export to string\nThere is a simple way how to export to string by using \n`to_string_of_values` function (no parameters are required).\n\n### Accessing sheet in workbook\nEach sheet in the workbook can be accessed by using `[]` operator:\n```python\nsheet = workbook[NAME_OF_THE_SHEET]\n```\nwhere `NAME_OF_THE_SHEET` is the string representing the name of the sheet.\n\n### Cross-referencing\nIn order to access the value in a different sheet, you have to use:\n```python\nsheet_a.iloc[x1, y1] = sheet.fn.cross_reference(sheet.iloc[x2, y2],\n                                                sheet_b)\n```\nThe function `cross_reference` takes two parameters, the first one is the\ncell that is the target, the second one is the whole target sheet.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/david-salac/Portable-spreadsheet-generator",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "portable-spreadsheet",
    "package_url": "https://pypi.org/project/portable-spreadsheet/",
    "platform": "",
    "project_url": "https://pypi.org/project/portable-spreadsheet/",
    "project_urls": {
      "Homepage": "https://github.com/david-salac/Portable-spreadsheet-generator"
    },
    "release_url": "https://pypi.org/project/portable-spreadsheet/2.2.1/",
    "requires_dist": [
      "numpy",
      "numpy-financial",
      "XlsxWriter"
    ],
    "requires_python": ">=3.8",
    "summary": "A simple spreadsheet that keeps tracks of each operation of each cell in defined languages. Logic allows exporting sheets to Excel files (and see how each cell is computed), to the JSON strings with a description of computation of each cell (e. g. in the native language). Other formats, like HTML, CSV and Markdown (MD), are also implemented (user can define own format). It also allows reconstructing behaviours in native Python with NumPy.",
    "version": "2.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9783318,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d548ab1a57898ee853c336a525620bcdbff8780577af0dc1a85e9a742b7b03c",
          "md5": "d912dfc9957bab1575c95f5dc511eddf",
          "sha256": "58e9067e571b9fa3447c76286a97aacd271431a8c3570f1e08369073559cc168"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d912dfc9957bab1575c95f5dc511eddf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 29684,
        "upload_time": "2020-05-20T16:54:59",
        "upload_time_iso_8601": "2020-05-20T16:54:59.333820Z",
        "url": "https://files.pythonhosted.org/packages/2d/54/8ab1a57898ee853c336a525620bcdbff8780577af0dc1a85e9a742b7b03c/portable_spreadsheet-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34f78843e70728a78befe057dc0792989d99dabf5e60b50179d1d1389e0edc3e",
          "md5": "f5df902a1929f6d5241d25ff075dd5b3",
          "sha256": "5f55201e30a9329d43d118fd0f075489494ebdad5dd784a8e9cb50cfcda58a4a"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f5df902a1929f6d5241d25ff075dd5b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 33104,
        "upload_time": "2020-05-20T16:55:01",
        "upload_time_iso_8601": "2020-05-20T16:55:01.886783Z",
        "url": "https://files.pythonhosted.org/packages/34/f7/8843e70728a78befe057dc0792989d99dabf5e60b50179d1d1389e0edc3e/portable-spreadsheet-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd255d041bd600ea94ab6e6e590d637f7906d324dd30135e2483e2d2b58382c9",
          "md5": "c4d527b3f5072a4ebb594a924152d18c",
          "sha256": "e3ee8677bc71be20c8bda464f000983af65bcb2e728f90f2e817a7d945b272c5"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4d527b3f5072a4ebb594a924152d18c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 29803,
        "upload_time": "2020-05-21T08:42:22",
        "upload_time_iso_8601": "2020-05-21T08:42:22.027243Z",
        "url": "https://files.pythonhosted.org/packages/fd/25/5d041bd600ea94ab6e6e590d637f7906d324dd30135e2483e2d2b58382c9/portable_spreadsheet-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08d46c0a037d19fa24fc9de3806c4f618f9803f68e07fe5e187e16af0367d988",
          "md5": "61717ef88f41bf334435b4ffd83598ac",
          "sha256": "01250af434c7b2cd1d4db97a6740529e26b504438ca382d86847f40233819298"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "61717ef88f41bf334435b4ffd83598ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 33347,
        "upload_time": "2020-05-21T08:42:23",
        "upload_time_iso_8601": "2020-05-21T08:42:23.318732Z",
        "url": "https://files.pythonhosted.org/packages/08/d4/6c0a037d19fa24fc9de3806c4f618f9803f68e07fe5e187e16af0367d988/portable-spreadsheet-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bde93df891cd70eaa429356cae81c75ba5eb7135f83cd45218e01ab38f9dbf9e",
          "md5": "5f878389c8d99a8fceeac4d41a195b9f",
          "sha256": "b55155267570ab2a5ca7e88f4995abcfd4f58db15d0f70058a106f0a9d264b8b"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f878389c8d99a8fceeac4d41a195b9f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 45232,
        "upload_time": "2020-05-23T13:55:23",
        "upload_time_iso_8601": "2020-05-23T13:55:23.105094Z",
        "url": "https://files.pythonhosted.org/packages/bd/e9/3df891cd70eaa429356cae81c75ba5eb7135f83cd45218e01ab38f9dbf9e/portable_spreadsheet-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb29333220168290bf519174a437e4161b00d1cfcbc0a324a1ede38cea0e7968",
          "md5": "d69b925062bd037a309d8f261eab6adb",
          "sha256": "89a21ac09ccb1e5b19d6e0e7f8254fa201b3c82f0bd03f380bdcfa30974dd6ff"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d69b925062bd037a309d8f261eab6adb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 58674,
        "upload_time": "2020-05-23T13:55:24",
        "upload_time_iso_8601": "2020-05-23T13:55:24.654767Z",
        "url": "https://files.pythonhosted.org/packages/eb/29/333220168290bf519174a437e4161b00d1cfcbc0a324a1ede38cea0e7968/portable-spreadsheet-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21b59bd69a491fa269cf006e5456abfffe49754a12bf9983ee1541e8c507978e",
          "md5": "904bbbe92d73cd71edec68143c0a6e5f",
          "sha256": "b33ee8176274e9e020215bdd7c2d2b8cb0e376ce5599cfb278e3d28145cb6462"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "904bbbe92d73cd71edec68143c0a6e5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 57660,
        "upload_time": "2020-05-24T17:56:52",
        "upload_time_iso_8601": "2020-05-24T17:56:52.570622Z",
        "url": "https://files.pythonhosted.org/packages/21/b5/9bd69a491fa269cf006e5456abfffe49754a12bf9983ee1541e8c507978e/portable_spreadsheet-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "138ebde31b3d2058a507abef97443fdf9e1897d3013320986a06e5571dca41d4",
          "md5": "a686831dc1ed34bd590c68ae6e6dcf55",
          "sha256": "38950454053926136a4b8144e96b811f3b2cba470d999c90394620ff374bf356"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a686831dc1ed34bd590c68ae6e6dcf55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 73573,
        "upload_time": "2020-05-24T17:56:54",
        "upload_time_iso_8601": "2020-05-24T17:56:54.277119Z",
        "url": "https://files.pythonhosted.org/packages/13/8e/bde31b3d2058a507abef97443fdf9e1897d3013320986a06e5571dca41d4/portable-spreadsheet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60f182f3a9b9a107c992a68e000c2a132803021c9480a47bfbfc476e8ea3bf76",
          "md5": "241b028e7cea2899f1f65a7e92072c03",
          "sha256": "d52715476b6f6c8a86faab6133465079c17d6719f0596d8765c98cb428416c44"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "241b028e7cea2899f1f65a7e92072c03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 64054,
        "upload_time": "2020-06-09T11:45:54",
        "upload_time_iso_8601": "2020-06-09T11:45:54.455142Z",
        "url": "https://files.pythonhosted.org/packages/60/f1/82f3a9b9a107c992a68e000c2a132803021c9480a47bfbfc476e8ea3bf76/portable_spreadsheet-0.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd781d10da31a4d7ff7d7efbb0b986f16dfa82564e60ca88461d3632ff80c1d9",
          "md5": "9e5a3decea60acd98dd498b3a04c2c14",
          "sha256": "d25846f3eddd3bdba27d2b043f7452b71d270ea4eaad3ffe7fd1989e2dcfaf77"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "9e5a3decea60acd98dd498b3a04c2c14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 82152,
        "upload_time": "2020-06-09T11:45:56",
        "upload_time_iso_8601": "2020-06-09T11:45:56.414745Z",
        "url": "https://files.pythonhosted.org/packages/dd/78/1d10da31a4d7ff7d7efbb0b986f16dfa82564e60ca88461d3632ff80c1d9/portable-spreadsheet-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5c638c26d7f8389a869d59b06142c8f156c0a410ded0e45f97c2fa314f12f40",
          "md5": "9f1c7e1b476213a25df01a2b08d15ef7",
          "sha256": "c0740a9866b64d0c83dcf3e54a77ffee1704cf9340121ce2f09a2288266c1220"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f1c7e1b476213a25df01a2b08d15ef7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 64111,
        "upload_time": "2020-06-09T13:13:09",
        "upload_time_iso_8601": "2020-06-09T13:13:09.096089Z",
        "url": "https://files.pythonhosted.org/packages/f5/c6/38c26d7f8389a869d59b06142c8f156c0a410ded0e45f97c2fa314f12f40/portable_spreadsheet-0.1.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8075540c8c716bb153425bb4c70615194ad9ee054c763664fe4392c9dc3b3c8c",
          "md5": "862e56c147601f5fa1eb4286afe522d5",
          "sha256": "ec9243cbdb1240fa5c5d5e68572754f541bbe8369ea4101a26aea839c3f1125b"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "862e56c147601f5fa1eb4286afe522d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 82183,
        "upload_time": "2020-06-09T13:13:11",
        "upload_time_iso_8601": "2020-06-09T13:13:11.016365Z",
        "url": "https://files.pythonhosted.org/packages/80/75/540c8c716bb153425bb4c70615194ad9ee054c763664fe4392c9dc3b3c8c/portable-spreadsheet-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6424a41cecd5709e1e4c0c9b13537659ed7be10a75e366c8c4cdfad49d2ba9a3",
          "md5": "c2aab665e6e4ab655362f911fcaf602b",
          "sha256": "afa2bd3724b7fbce4962f5d57cefc45cb4356141593d79a89f067243ebfdc701"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2aab665e6e4ab655362f911fcaf602b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 64396,
        "upload_time": "2020-06-10T13:56:02",
        "upload_time_iso_8601": "2020-06-10T13:56:02.635801Z",
        "url": "https://files.pythonhosted.org/packages/64/24/a41cecd5709e1e4c0c9b13537659ed7be10a75e366c8c4cdfad49d2ba9a3/portable_spreadsheet-0.1.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21c0090b6b99d55a7233c3da81ab93e1231471aa4c8cd54aea24de17b171b7a8",
          "md5": "46324eac1d8aeadb258b38de59133559",
          "sha256": "5cc1692b8c32be10a5ef5ec79ff14c018cee3d9f32f7d637f86082201ae67007"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "46324eac1d8aeadb258b38de59133559",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 82639,
        "upload_time": "2020-06-10T13:56:04",
        "upload_time_iso_8601": "2020-06-10T13:56:04.362153Z",
        "url": "https://files.pythonhosted.org/packages/21/c0/090b6b99d55a7233c3da81ab93e1231471aa4c8cd54aea24de17b171b7a8/portable-spreadsheet-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4bc757a8461cd87b573740f6495c4ae7c49b880948617f74d70d62a89a27651",
          "md5": "871133d71c16d2475a7b974406b02301",
          "sha256": "4b0fbafd394ab51c2eb0035472971e42e4b8105917b636577d2c6bb4bf920dfc"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "871133d71c16d2475a7b974406b02301",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 65045,
        "upload_time": "2020-06-25T16:18:17",
        "upload_time_iso_8601": "2020-06-25T16:18:17.104966Z",
        "url": "https://files.pythonhosted.org/packages/e4/bc/757a8461cd87b573740f6495c4ae7c49b880948617f74d70d62a89a27651/portable_spreadsheet-0.1.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93cb504e753a78216b1f433d76aeac2b58a8fdeee10dc63ca981ed288dbd2f86",
          "md5": "033ae239d38e19dcfa4e7404b328133c",
          "sha256": "308cea86a90ef966efaf4bcf714637aad91eed7a6b71c7dcd504d73454128907"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "033ae239d38e19dcfa4e7404b328133c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 83651,
        "upload_time": "2020-06-25T16:18:19",
        "upload_time_iso_8601": "2020-06-25T16:18:19.210782Z",
        "url": "https://files.pythonhosted.org/packages/93/cb/504e753a78216b1f433d76aeac2b58a8fdeee10dc63ca981ed288dbd2f86/portable-spreadsheet-0.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ad27d73eaeea3efb23615d570e8d2370d254c5f86ab8b81b0d5a4cf70924db8",
          "md5": "22f3781d95e948c57ff841a98edb46ca",
          "sha256": "b5d40dd1d0c08963ad64d263235a3dffae7272240bd99afad71b50b221f7e0a3"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22f3781d95e948c57ff841a98edb46ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 65047,
        "upload_time": "2020-06-29T14:57:57",
        "upload_time_iso_8601": "2020-06-29T14:57:57.741377Z",
        "url": "https://files.pythonhosted.org/packages/8a/d2/7d73eaeea3efb23615d570e8d2370d254c5f86ab8b81b0d5a4cf70924db8/portable_spreadsheet-0.1.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "127cb8aa22eb570197c682a5733b15b4d8f1b81dbc9fe0b6618cd441142aa9da",
          "md5": "17ab5f88df60af229ef2d442e433bc21",
          "sha256": "fee33a02445fa29874e7588f27d90f1ccc4030b881b9ada3e9457cc31c333825"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "17ab5f88df60af229ef2d442e433bc21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 83643,
        "upload_time": "2020-06-29T14:58:00",
        "upload_time_iso_8601": "2020-06-29T14:58:00.018788Z",
        "url": "https://files.pythonhosted.org/packages/12/7c/b8aa22eb570197c682a5733b15b4d8f1b81dbc9fe0b6618cd441142aa9da/portable-spreadsheet-0.1.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ed55d3505dd153822f98b3e56b8a36f04a7923a67384088384ec26a4c291ff2",
          "md5": "1f0d3090af4839582ba014e1c0eafaed",
          "sha256": "47435fce058e1b77e109ec58c14feb052e575fdd29a08d5e83ecabfcacc1a035"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f0d3090af4839582ba014e1c0eafaed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 65477,
        "upload_time": "2020-07-24T10:14:00",
        "upload_time_iso_8601": "2020-07-24T10:14:00.787207Z",
        "url": "https://files.pythonhosted.org/packages/7e/d5/5d3505dd153822f98b3e56b8a36f04a7923a67384088384ec26a4c291ff2/portable_spreadsheet-0.1.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "277888d1fd0e57a167294ab081a1bb2aa9e8c682597291ec1de776e97a71cb32",
          "md5": "894b3d2ddf5d3e585b0986c4027b5d05",
          "sha256": "eab9b4c5728f94afd91ce79919fbb210143216a76469bb23ba146aaf7f9fcb49"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "894b3d2ddf5d3e585b0986c4027b5d05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 84035,
        "upload_time": "2020-07-24T10:14:02",
        "upload_time_iso_8601": "2020-07-24T10:14:02.955669Z",
        "url": "https://files.pythonhosted.org/packages/27/78/88d1fd0e57a167294ab081a1bb2aa9e8c682597291ec1de776e97a71cb32/portable-spreadsheet-0.1.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c28ab29e07dcffe4bbda56d7d96b1999c7d0dea5d36295c9b956bed396970380",
          "md5": "a2bfca323954c191eb8ddf80f7bff4e5",
          "sha256": "d69c2df91a11c638b1ba19c65167b089b8169d45fe48bcda34a5112ddec1d776"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2bfca323954c191eb8ddf80f7bff4e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 58175,
        "upload_time": "2020-05-25T18:25:55",
        "upload_time_iso_8601": "2020-05-25T18:25:55.372442Z",
        "url": "https://files.pythonhosted.org/packages/c2/8a/b29e07dcffe4bbda56d7d96b1999c7d0dea5d36295c9b956bed396970380/portable_spreadsheet-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "359c200dde78392ab0f6e93ee79a2358664579e70877fbd6d175da01c0c6266a",
          "md5": "0a5490e405a218dd82ca4e7181343fd2",
          "sha256": "8f9ec8ab0846ca234dca484de7ce4bbaec2ec3f71f24eb46d34a4a9eebf27a54"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0a5490e405a218dd82ca4e7181343fd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 74563,
        "upload_time": "2020-05-25T18:25:56",
        "upload_time_iso_8601": "2020-05-25T18:25:56.890793Z",
        "url": "https://files.pythonhosted.org/packages/35/9c/200dde78392ab0f6e93ee79a2358664579e70877fbd6d175da01c0c6266a/portable-spreadsheet-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fbce55c64b1bc6be37e7b8bc95146c74200b757a6548a63a3bee9317994562a",
          "md5": "e8c168f27d77e3acf15b1802d1210474",
          "sha256": "e0c1839264eada85a6c58bb1974212479fb288c547f76194fc5293f9184c79d1"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8c168f27d77e3acf15b1802d1210474",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 59249,
        "upload_time": "2020-05-26T10:16:57",
        "upload_time_iso_8601": "2020-05-26T10:16:57.074982Z",
        "url": "https://files.pythonhosted.org/packages/8f/bc/e55c64b1bc6be37e7b8bc95146c74200b757a6548a63a3bee9317994562a/portable_spreadsheet-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d7cddc1c8fbee729a6bd55c019dc19f9f3d3834504b3e2b5af188615bead122",
          "md5": "aa3b3673a9ba17e7389fd85b15c67ef1",
          "sha256": "0b4d5a828ad203a6ffd1a4e1067e19b38afb20470418b543adaa52690877585e"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "aa3b3673a9ba17e7389fd85b15c67ef1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 75975,
        "upload_time": "2020-05-26T10:16:58",
        "upload_time_iso_8601": "2020-05-26T10:16:58.666128Z",
        "url": "https://files.pythonhosted.org/packages/0d/7c/ddc1c8fbee729a6bd55c019dc19f9f3d3834504b3e2b5af188615bead122/portable-spreadsheet-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc4f7889e3dd306fbd65c0c6697c36145b58476bda14dfcf2b9ac8d9a099f72a",
          "md5": "2ec49338e3e08899bb99517d193e42b7",
          "sha256": "31c1bc2a779e8c4b89cf7b39f91e303024162f98efca07600312a7c9fea18cd4"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ec49338e3e08899bb99517d193e42b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 61208,
        "upload_time": "2020-05-27T09:34:14",
        "upload_time_iso_8601": "2020-05-27T09:34:14.444290Z",
        "url": "https://files.pythonhosted.org/packages/bc/4f/7889e3dd306fbd65c0c6697c36145b58476bda14dfcf2b9ac8d9a099f72a/portable_spreadsheet-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "189e0f9b536c04aaf427142483d0da530026a8df2b0e2ab4cf82bbb94bbae5ae",
          "md5": "cb273184188f138a22942c0bf6804803",
          "sha256": "c49c2fa67933331b1d55c6e92bb4c83dd3f553c5140e5258097c2b666f351791"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cb273184188f138a22942c0bf6804803",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 78722,
        "upload_time": "2020-05-27T09:34:16",
        "upload_time_iso_8601": "2020-05-27T09:34:16.237743Z",
        "url": "https://files.pythonhosted.org/packages/18/9e/0f9b536c04aaf427142483d0da530026a8df2b0e2ab4cf82bbb94bbae5ae/portable-spreadsheet-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18ed5127030994e163189541996fb0e00dcd48dbab81d6e1b645845be5d94670",
          "md5": "56667c22e4a07bf6c41c292dc254c70d",
          "sha256": "3bcf0d54cf21cae7644da767101131abed4d44d97e9924d3a051d338c692c8b5"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56667c22e4a07bf6c41c292dc254c70d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 61548,
        "upload_time": "2020-05-28T08:34:27",
        "upload_time_iso_8601": "2020-05-28T08:34:27.849578Z",
        "url": "https://files.pythonhosted.org/packages/18/ed/5127030994e163189541996fb0e00dcd48dbab81d6e1b645845be5d94670/portable_spreadsheet-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dff7ffce649b08cac9ef4b41dea9c29db92f1935ecc2eeb4b3c8ca97eeb508f3",
          "md5": "5abced3e55667dbed0e28a76724f1c51",
          "sha256": "0fdf2ba08f049ab1955c63ad201d1cf03a8588acb23932fd6f30cdf630fa136c"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5abced3e55667dbed0e28a76724f1c51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 79026,
        "upload_time": "2020-05-28T08:34:29",
        "upload_time_iso_8601": "2020-05-28T08:34:29.569110Z",
        "url": "https://files.pythonhosted.org/packages/df/f7/ffce649b08cac9ef4b41dea9c29db92f1935ecc2eeb4b3c8ca97eeb508f3/portable-spreadsheet-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2c245602a0931f6589d7bfae62981dd53dbe96e2561c6fbaa9d551e55353aeb",
          "md5": "cf2c7602f90bef3ece92a4dcb0063b54",
          "sha256": "f502748bb27d92ff6da1910497be94b15199e01a54aea97ea8476546efcb3876"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf2c7602f90bef3ece92a4dcb0063b54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 62085,
        "upload_time": "2020-06-02T14:53:15",
        "upload_time_iso_8601": "2020-06-02T14:53:15.230215Z",
        "url": "https://files.pythonhosted.org/packages/f2/c2/45602a0931f6589d7bfae62981dd53dbe96e2561c6fbaa9d551e55353aeb/portable_spreadsheet-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24f3282d5e937cd6bd93b72a35064b04111f00797ef99938d8f5029b5ee0bb51",
          "md5": "ef1fe5cdf4ff36cd28e2e855b81e494d",
          "sha256": "0dc71ba8f4f602945c7513537807f08de819b3f7a02f9759331adf4b24b9f8ff"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ef1fe5cdf4ff36cd28e2e855b81e494d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 79797,
        "upload_time": "2020-06-02T14:53:16",
        "upload_time_iso_8601": "2020-06-02T14:53:16.688970Z",
        "url": "https://files.pythonhosted.org/packages/24/f3/282d5e937cd6bd93b72a35064b04111f00797ef99938d8f5029b5ee0bb51/portable-spreadsheet-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f3d7c3f9f833b9e1443f8f80361cd0ad3b919f8e9200e820cdfca8d39403a25",
          "md5": "abe7c0cd643c07d896ca5da6fc1c3760",
          "sha256": "a7e46e1d96427b5d020d57c645dcb7fe781a6366ad12dbdd03b7e15e7aeec9f3"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abe7c0cd643c07d896ca5da6fc1c3760",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 64031,
        "upload_time": "2020-06-08T17:01:53",
        "upload_time_iso_8601": "2020-06-08T17:01:53.165971Z",
        "url": "https://files.pythonhosted.org/packages/1f/3d/7c3f9f833b9e1443f8f80361cd0ad3b919f8e9200e820cdfca8d39403a25/portable_spreadsheet-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f29b1963e72588425681c5cce40c7099edf28d572ab2cb6a54727a2f58558290",
          "md5": "ef0963cfebfb8ab93a10883e1a5fe9d7",
          "sha256": "f72b732cbd5704f3d458f2f2c73f530864a188c30bcdf4a4616d7faf1c3c4461"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ef0963cfebfb8ab93a10883e1a5fe9d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 82069,
        "upload_time": "2020-06-08T17:01:54",
        "upload_time_iso_8601": "2020-06-08T17:01:54.981434Z",
        "url": "https://files.pythonhosted.org/packages/f2/9b/1963e72588425681c5cce40c7099edf28d572ab2cb6a54727a2f58558290/portable-spreadsheet-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e02d0c57cb8d7ea7be2cdfce2be28561fa7a63ea6674ea980b6f5525eeaaf95",
          "md5": "071d674e984197e53d3b6547c29a7664",
          "sha256": "d6ee44858b84200b97ab80ea6baed199d99e7cff6677c2abb1f17cc5b07e307e"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "071d674e984197e53d3b6547c29a7664",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 64033,
        "upload_time": "2020-06-09T11:22:40",
        "upload_time_iso_8601": "2020-06-09T11:22:40.077398Z",
        "url": "https://files.pythonhosted.org/packages/9e/02/d0c57cb8d7ea7be2cdfce2be28561fa7a63ea6674ea980b6f5525eeaaf95/portable_spreadsheet-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5182b4945d549fba2914a65a8df82d6531e00543efccaaef39d5a42a97f5b7a",
          "md5": "48e9a27cf7215736d09944e97577025f",
          "sha256": "0aed18afec9577d5564c935f9200af3ea3e729aad652500e17bcee49b9c2c1f0"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "48e9a27cf7215736d09944e97577025f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 82067,
        "upload_time": "2020-06-09T11:22:41",
        "upload_time_iso_8601": "2020-06-09T11:22:41.701763Z",
        "url": "https://files.pythonhosted.org/packages/f5/18/2b4945d549fba2914a65a8df82d6531e00543efccaaef39d5a42a97f5b7a/portable-spreadsheet-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ea449da06269b42189e52fd383a85e1ea9a446069494fc1a2c428780e983138",
          "md5": "ec8bf96fa7464c571a24307c67547759",
          "sha256": "8400187001056c38ddb675e4c79cbce16f49e77fcd57541c86b569b077441cce"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec8bf96fa7464c571a24307c67547759",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 68080,
        "upload_time": "2020-08-19T16:06:09",
        "upload_time_iso_8601": "2020-08-19T16:06:09.830782Z",
        "url": "https://files.pythonhosted.org/packages/2e/a4/49da06269b42189e52fd383a85e1ea9a446069494fc1a2c428780e983138/portable_spreadsheet-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "804acdfb55edd6e0f8c3408d662caf85328205f3c329d09557b6344b0406af76",
          "md5": "ef4f50b4b85ca6967092b2fbce6b35b8",
          "sha256": "6359b4718a8592130c372e9b48859ba2f72e3576d1de610c27a11d2a7952b349"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef4f50b4b85ca6967092b2fbce6b35b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 87679,
        "upload_time": "2020-08-19T16:06:12",
        "upload_time_iso_8601": "2020-08-19T16:06:12.970782Z",
        "url": "https://files.pythonhosted.org/packages/80/4a/cdfb55edd6e0f8c3408d662caf85328205f3c329d09557b6344b0406af76/portable-spreadsheet-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c6ae1ec0215daa5ff593e738f5bb38582dcf5235665e2195093df3dfe933dcf",
          "md5": "957e239a98d15c5261c0d89358894428",
          "sha256": "8e802d90ad7d4ac5a84740efced470fb854630e9810caabeef633725a5c8952e"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "957e239a98d15c5261c0d89358894428",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 68373,
        "upload_time": "2020-08-26T07:48:34",
        "upload_time_iso_8601": "2020-08-26T07:48:34.938837Z",
        "url": "https://files.pythonhosted.org/packages/7c/6a/e1ec0215daa5ff593e738f5bb38582dcf5235665e2195093df3dfe933dcf/portable_spreadsheet-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4f94e5fac28e657ae040fadb9b36e1f583fee511bb8f49b05fbfdd281d26227",
          "md5": "ba30d4f44bce494129399f547c1e6a9b",
          "sha256": "92f08ff440162739242342a82fc69d9cbb8fa15a238bcea6428eda3cc7641cad"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ba30d4f44bce494129399f547c1e6a9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 88292,
        "upload_time": "2020-08-26T07:48:37",
        "upload_time_iso_8601": "2020-08-26T07:48:37.534657Z",
        "url": "https://files.pythonhosted.org/packages/d4/f9/4e5fac28e657ae040fadb9b36e1f583fee511bb8f49b05fbfdd281d26227/portable-spreadsheet-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23b3f165c13d253890f934f69c73896dbf4a056808c6585999d0f1e239585400",
          "md5": "f6d940cb401d9162c7cc97912a010cb2",
          "sha256": "1a4a661a66e7d72302c5676c9d1ee2942224bc686552c0b18d459fe74fb8e415"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6d940cb401d9162c7cc97912a010cb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 68371,
        "upload_time": "2020-08-26T10:07:07",
        "upload_time_iso_8601": "2020-08-26T10:07:07.313668Z",
        "url": "https://files.pythonhosted.org/packages/23/b3/f165c13d253890f934f69c73896dbf4a056808c6585999d0f1e239585400/portable_spreadsheet-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab0b3b703eeb57d7628e81500b3479c3ffa7844c2b1f55eff56e9817f383f773",
          "md5": "e8cbedb5112da66d8dd2281aff4f3942",
          "sha256": "3efc574ca55b55c6f11c4b1f1ef3fb887eaac273b5f6502f9fff0f8af3ea04e8"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e8cbedb5112da66d8dd2281aff4f3942",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 88292,
        "upload_time": "2020-08-26T10:07:10",
        "upload_time_iso_8601": "2020-08-26T10:07:10.025319Z",
        "url": "https://files.pythonhosted.org/packages/ab/0b/3b703eeb57d7628e81500b3479c3ffa7844c2b1f55eff56e9817f383f773/portable-spreadsheet-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4028a937281ba428f735d342dbe830e2e711e752772246e0bb9593eba351d64b",
          "md5": "38af93d11ed8eaa76ee7eeaaaafebd76",
          "sha256": "efbb49f4fd23240f84e932c52450b33d08c84870d19d4e30f9da898544e9e0e8"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38af93d11ed8eaa76ee7eeaaaafebd76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 68442,
        "upload_time": "2020-08-26T19:57:33",
        "upload_time_iso_8601": "2020-08-26T19:57:33.420092Z",
        "url": "https://files.pythonhosted.org/packages/40/28/a937281ba428f735d342dbe830e2e711e752772246e0bb9593eba351d64b/portable_spreadsheet-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c22e76d9c86d17fb0c3f70875d456f8a5e2260ba9ee735200ad0760e32f54d7f",
          "md5": "3577b579d2dd370e49f4fff7ecc8e6f9",
          "sha256": "096680f0c36f1e86c7c035108d40bef1eccade76d603e7eb25c0ee22262983e2"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3577b579d2dd370e49f4fff7ecc8e6f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 88411,
        "upload_time": "2020-08-26T19:57:35",
        "upload_time_iso_8601": "2020-08-26T19:57:35.598961Z",
        "url": "https://files.pythonhosted.org/packages/c2/2e/76d9c86d17fb0c3f70875d456f8a5e2260ba9ee735200ad0760e32f54d7f/portable-spreadsheet-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ce4f6544b44d65d710611aeed1466ac021adacd915225fdd125998ffe69d5ad",
          "md5": "227522ab37949a75522d2a9234a1cc34",
          "sha256": "ce5771eb26a15b29b15010538816d29f886c531a9770e2023f01077276a61886"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "227522ab37949a75522d2a9234a1cc34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76431,
        "upload_time": "2021-01-10T19:37:42",
        "upload_time_iso_8601": "2021-01-10T19:37:42.899906Z",
        "url": "https://files.pythonhosted.org/packages/3c/e4/f6544b44d65d710611aeed1466ac021adacd915225fdd125998ffe69d5ad/portable_spreadsheet-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfd4a3fec80696d98f6efe84bc25dbc1d3b4b5f679b4deced8ed1913d56d4fa1",
          "md5": "d17e46034ccbc72dae3eeb267fd74556",
          "sha256": "86e34c444e810f8ab1f2f68fed1dd8f714bc016b06c57c2b477e53b3bcf85ded"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d17e46034ccbc72dae3eeb267fd74556",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 97730,
        "upload_time": "2021-01-10T19:37:45",
        "upload_time_iso_8601": "2021-01-10T19:37:45.109572Z",
        "url": "https://files.pythonhosted.org/packages/bf/d4/a3fec80696d98f6efe84bc25dbc1d3b4b5f679b4deced8ed1913d56d4fa1/portable-spreadsheet-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16db7eb7c1ca618b58d93d8f80d95f97baf7318602d2428b2e182ff6f56cbbd3",
          "md5": "5ec5e8415198d03f7d01d0110cd26eca",
          "sha256": "4555585b9761874a1c83d0f0c62aa5f562100b03b73600a3a7d5f438a37b9b0d"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ec5e8415198d03f7d01d0110cd26eca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76395,
        "upload_time": "2021-01-10T22:26:09",
        "upload_time_iso_8601": "2021-01-10T22:26:09.267629Z",
        "url": "https://files.pythonhosted.org/packages/16/db/7eb7c1ca618b58d93d8f80d95f97baf7318602d2428b2e182ff6f56cbbd3/portable_spreadsheet-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20f0fe73cc6e201f23418695253eea7f815127ba30cf5e8994d2410957baab50",
          "md5": "3eedf908ba6fb046c954fa04f2d618b5",
          "sha256": "fd83e9295a3f84b846ec769f719735d39bb3f7cebdc27cbf810c82f0292309dd"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3eedf908ba6fb046c954fa04f2d618b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 97745,
        "upload_time": "2021-01-10T22:26:11",
        "upload_time_iso_8601": "2021-01-10T22:26:11.612607Z",
        "url": "https://files.pythonhosted.org/packages/20/f0/fe73cc6e201f23418695253eea7f815127ba30cf5e8994d2410957baab50/portable-spreadsheet-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42ec52f6cdb7f66374e47a3dff3dd0ac5a9ebab14b645d48824ddf26a93d2619",
          "md5": "8b8ab64383f5803ec6ac8b3cceac8a4d",
          "sha256": "d9598bb26e3670a4f461bac27772c9d6111a25045528f262cf652db57e1125f4"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b8ab64383f5803ec6ac8b3cceac8a4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76397,
        "upload_time": "2021-01-10T22:32:00",
        "upload_time_iso_8601": "2021-01-10T22:32:00.932802Z",
        "url": "https://files.pythonhosted.org/packages/42/ec/52f6cdb7f66374e47a3dff3dd0ac5a9ebab14b645d48824ddf26a93d2619/portable_spreadsheet-2.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b007380d6736eb16cabf7f2d2f8c744df056701483b7cc11e8be9a18f18bdb09",
          "md5": "94030055c5cf71b71bec75db8e9a5a46",
          "sha256": "a46b47bf9177c8bc4bb2edd3b69534b60f5b4927378716205139533c4675f30c"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "94030055c5cf71b71bec75db8e9a5a46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 97763,
        "upload_time": "2021-01-10T22:32:03",
        "upload_time_iso_8601": "2021-01-10T22:32:03.248017Z",
        "url": "https://files.pythonhosted.org/packages/b0/07/380d6736eb16cabf7f2d2f8c744df056701483b7cc11e8be9a18f18bdb09/portable-spreadsheet-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ff73c9f06b70d238be6a1dd5ef441c1e09bb1ae194dbd4a503c3bc41416f488",
          "md5": "55ffe7564fdf54143c9237a4bee33e8e",
          "sha256": "8c0402810001e547379573b5129be56ddde8bb9b027f18b5d06d47364bc995ff"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55ffe7564fdf54143c9237a4bee33e8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76908,
        "upload_time": "2021-01-13T12:23:08",
        "upload_time_iso_8601": "2021-01-13T12:23:08.252719Z",
        "url": "https://files.pythonhosted.org/packages/2f/f7/3c9f06b70d238be6a1dd5ef441c1e09bb1ae194dbd4a503c3bc41416f488/portable_spreadsheet-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd8edd1687b2f4e8f1f099abe67fbc03526e86d17697333f2a0ea0383d3a7d75",
          "md5": "132d3ac09171d0fcf2fc5aa9c4dd077e",
          "sha256": "b95d9522a4693dbb6ee21b5cf2b732d4f90776498ee8008d023ce69b45edb278"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "132d3ac09171d0fcf2fc5aa9c4dd077e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 98242,
        "upload_time": "2021-01-13T12:23:10",
        "upload_time_iso_8601": "2021-01-13T12:23:10.606663Z",
        "url": "https://files.pythonhosted.org/packages/fd/8e/dd1687b2f4e8f1f099abe67fbc03526e86d17697333f2a0ea0383d3a7d75/portable-spreadsheet-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61d5dc372283930e66bc3f6cac1c1ce2c688dccf5229361af2046eef79731f43",
          "md5": "e5c17c99713d48d75396bb615cc6194d",
          "sha256": "b4175a4ed377a71d1554e2ded711cbb178605a7af74b19a28c67ab3f01240487"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5c17c99713d48d75396bb615cc6194d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77423,
        "upload_time": "2021-01-19T11:13:22",
        "upload_time_iso_8601": "2021-01-19T11:13:22.934282Z",
        "url": "https://files.pythonhosted.org/packages/61/d5/dc372283930e66bc3f6cac1c1ce2c688dccf5229361af2046eef79731f43/portable_spreadsheet-2.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f51638e2de2bfde8414f2731e2e36a56e65a010dbee436dc672e226449529ed",
          "md5": "c1f38087687ae3032dd4900d3ff138cb",
          "sha256": "6a8d1ea54f670ee941fe761065a25da56a886aeeb85d0d88bcfaf89ddfaa1521"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c1f38087687ae3032dd4900d3ff138cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 98668,
        "upload_time": "2021-01-19T11:13:25",
        "upload_time_iso_8601": "2021-01-19T11:13:25.369517Z",
        "url": "https://files.pythonhosted.org/packages/6f/51/638e2de2bfde8414f2731e2e36a56e65a010dbee436dc672e226449529ed/portable-spreadsheet-2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "263007c239bd781033267fcf29239f118e63e0c31546d0dd8a4cf492ea268e2e",
          "md5": "093b803cffcbae9507561727dc3e6441",
          "sha256": "d3bd4f0d6b04a99018fe533fbc42a67c4820d5cba76ad5c0d8d34dedb282c7a9"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "093b803cffcbae9507561727dc3e6441",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77426,
        "upload_time": "2021-01-19T11:39:08",
        "upload_time_iso_8601": "2021-01-19T11:39:08.502894Z",
        "url": "https://files.pythonhosted.org/packages/26/30/07c239bd781033267fcf29239f118e63e0c31546d0dd8a4cf492ea268e2e/portable_spreadsheet-2.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acf13039eaa510fcc2b1fe36ebdd4bfb26760afdbc55a4e8b9be82491a8e9e42",
          "md5": "f1f60ccebe628b01ebf3e5e35544fbe1",
          "sha256": "552c0f6cbda5197d5e88e28cb44932cdb4663642769e5a7075689fa702a3cdfb"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f1f60ccebe628b01ebf3e5e35544fbe1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 98679,
        "upload_time": "2021-01-19T11:39:10",
        "upload_time_iso_8601": "2021-01-19T11:39:10.549384Z",
        "url": "https://files.pythonhosted.org/packages/ac/f1/3039eaa510fcc2b1fe36ebdd4bfb26760afdbc55a4e8b9be82491a8e9e42/portable-spreadsheet-2.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b8202cde6ec1f149a5aeb7fd9cbd467f491d67429ddef3b70e1d3ad58a33165",
          "md5": "a7d38f9791476a83380270c2eefb15e4",
          "sha256": "d1df9eac8657e358f2552d9be39a68e3f3523771572d21bec672bb71f44e84e3"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7d38f9791476a83380270c2eefb15e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77565,
        "upload_time": "2021-01-19T13:17:27",
        "upload_time_iso_8601": "2021-01-19T13:17:27.360686Z",
        "url": "https://files.pythonhosted.org/packages/4b/82/02cde6ec1f149a5aeb7fd9cbd467f491d67429ddef3b70e1d3ad58a33165/portable_spreadsheet-2.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "578dfedac059e0fb85cc220e4ae9f5c0a1be698c655b12831b3751e3ca33ca59",
          "md5": "2f7f6658044b2b73606024d301f55246",
          "sha256": "1dd3bf0079015cafa9d2c8eafd029de892c4be3c037cb1c3a6852aac3f736bc3"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2f7f6658044b2b73606024d301f55246",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 98796,
        "upload_time": "2021-01-19T13:17:29",
        "upload_time_iso_8601": "2021-01-19T13:17:29.802861Z",
        "url": "https://files.pythonhosted.org/packages/57/8d/fedac059e0fb85cc220e4ae9f5c0a1be698c655b12831b3751e3ca33ca59/portable-spreadsheet-2.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39faace675b5f92336b644a0d25d1c180421ecc8f3ee2973050729daf5e06e44",
          "md5": "fbea8d7c96fc319f4e2ea8df37d7ea04",
          "sha256": "7187a0c05567b4dc346812fc9fbb1b41b3833813ccb7620b7c88e4d971e04e18"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fbea8d7c96fc319f4e2ea8df37d7ea04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 78890,
        "upload_time": "2021-01-22T13:05:14",
        "upload_time_iso_8601": "2021-01-22T13:05:14.808183Z",
        "url": "https://files.pythonhosted.org/packages/39/fa/ace675b5f92336b644a0d25d1c180421ecc8f3ee2973050729daf5e06e44/portable_spreadsheet-2.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00cbe56e3a86287fb30086720f053a659190caca0220814ff541efeccc381065",
          "md5": "fd36315b41808df8afc25792e4ffa817",
          "sha256": "7034d576e4967409094304cec6c0fa4a1f3185b691bdea147ee2a5998fa2a51a"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fd36315b41808df8afc25792e4ffa817",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 100380,
        "upload_time": "2021-01-22T13:05:17",
        "upload_time_iso_8601": "2021-01-22T13:05:17.177104Z",
        "url": "https://files.pythonhosted.org/packages/00/cb/e56e3a86287fb30086720f053a659190caca0220814ff541efeccc381065/portable-spreadsheet-2.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7907955f20ad6a66d3801298caeeff316184802be0c9045f5711239984fafe8c",
          "md5": "cfac91a5227605cfa2e2aabfe5ef3283",
          "sha256": "f859b0c8308b4c54e03a1f0d8e4bd3a3c6d1dd45aa74dfa0aaccf57748dbba62"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfac91a5227605cfa2e2aabfe5ef3283",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 78972,
        "upload_time": "2021-01-28T12:48:56",
        "upload_time_iso_8601": "2021-01-28T12:48:56.677050Z",
        "url": "https://files.pythonhosted.org/packages/79/07/955f20ad6a66d3801298caeeff316184802be0c9045f5711239984fafe8c/portable_spreadsheet-2.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2caff6944b4318ad3124d88cdde380691f547ce062db7a3b30ca24022c81bb49",
          "md5": "3af93ad83ca6aaa3757df2648b0fd1b6",
          "sha256": "9f0bd0afd545bfacd9a1fca145e48bb4891854ee4278c8baf968382a0403e112"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "3af93ad83ca6aaa3757df2648b0fd1b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 100455,
        "upload_time": "2021-01-28T12:48:58",
        "upload_time_iso_8601": "2021-01-28T12:48:58.967742Z",
        "url": "https://files.pythonhosted.org/packages/2c/af/f6944b4318ad3124d88cdde380691f547ce062db7a3b30ca24022c81bb49/portable-spreadsheet-2.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c4ab3c14ba14476752181e9bd2450a2245a7c8cd72a363835ad8e6cfbb7fcbe",
          "md5": "a58b1b918032e7adcbb2aa2a5aea76ea",
          "sha256": "6edcf173a4c68ab27df70801d3c9d2c52b34b164932ae628b8b6234e215e59dc"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a58b1b918032e7adcbb2aa2a5aea76ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 79036,
        "upload_time": "2021-01-28T17:02:46",
        "upload_time_iso_8601": "2021-01-28T17:02:46.952071Z",
        "url": "https://files.pythonhosted.org/packages/7c/4a/b3c14ba14476752181e9bd2450a2245a7c8cd72a363835ad8e6cfbb7fcbe/portable_spreadsheet-2.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36d95a49dab727976a33bed1c0f6c07a7e9130ac5fd9f46b52aacf04ab6db6ab",
          "md5": "fcb88628960d6dab51da9af125158c85",
          "sha256": "946926031f1a8481db690f45f46d1178b7e19efbc7517d9a480c259137d4c630"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "fcb88628960d6dab51da9af125158c85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 100521,
        "upload_time": "2021-01-28T17:02:49",
        "upload_time_iso_8601": "2021-01-28T17:02:49.235350Z",
        "url": "https://files.pythonhosted.org/packages/36/d9/5a49dab727976a33bed1c0f6c07a7e9130ac5fd9f46b52aacf04ab6db6ab/portable-spreadsheet-2.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "675591c55db7b719a4d1426d602ac88dd1c80e95533ab5f3cbd77d7d518e923d",
          "md5": "e8d443ca6138b02df0bf190043632de5",
          "sha256": "a34a70f41c63514d1609479d84282e7bccafa7ea72db528b7744126bf2d86d5a"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8d443ca6138b02df0bf190043632de5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 79098,
        "upload_time": "2021-01-30T13:24:32",
        "upload_time_iso_8601": "2021-01-30T13:24:32.719158Z",
        "url": "https://files.pythonhosted.org/packages/67/55/91c55db7b719a4d1426d602ac88dd1c80e95533ab5f3cbd77d7d518e923d/portable_spreadsheet-2.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "751ba20eb94f78c5be9c999bc0ab28eed8c49d9927de0855d56f0c4b8ccd2a51",
          "md5": "417cb62897d0446d91c92769f7fa4195",
          "sha256": "0e299f0862969eca0912eea6ce5438550f82c17c98b1db7066a46d065e1e5a9e"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "417cb62897d0446d91c92769f7fa4195",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 100558,
        "upload_time": "2021-01-30T13:24:35",
        "upload_time_iso_8601": "2021-01-30T13:24:35.114723Z",
        "url": "https://files.pythonhosted.org/packages/75/1b/a20eb94f78c5be9c999bc0ab28eed8c49d9927de0855d56f0c4b8ccd2a51/portable-spreadsheet-2.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cac83f9af58e77d1d5ba5cd994dcfe1248c7137d318ed7750bc3bc7afce1189b",
          "md5": "a37f77568659effa0e68e3d9b3a9bfec",
          "sha256": "24f27d08d09ac592876a52a5808fc1672c439ae8a2ccb7b278e46b1310d08ce0"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a37f77568659effa0e68e3d9b3a9bfec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 79898,
        "upload_time": "2021-03-15T17:08:07",
        "upload_time_iso_8601": "2021-03-15T17:08:07.977555Z",
        "url": "https://files.pythonhosted.org/packages/ca/c8/3f9af58e77d1d5ba5cd994dcfe1248c7137d318ed7750bc3bc7afce1189b/portable_spreadsheet-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fad9d1600ee7e9bbe67b755573ab8da15bc45d29beef53325882bffc5d42fbf",
          "md5": "a6f0ceac435774efa3121572576d52a8",
          "sha256": "a019e7cc0578e32849c1b259886e0cb12d1a1f1e50d34e7857b51515d59862a9"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a6f0ceac435774efa3121572576d52a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 101512,
        "upload_time": "2021-03-15T17:08:10",
        "upload_time_iso_8601": "2021-03-15T17:08:10.688488Z",
        "url": "https://files.pythonhosted.org/packages/5f/ad/9d1600ee7e9bbe67b755573ab8da15bc45d29beef53325882bffc5d42fbf/portable-spreadsheet-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53a4e486bbc3dbf0a8e7671ad87a29bfb0203a27895e24c22124b4f4a37a81d4",
          "md5": "063e52c3936dc5dd96989ee930f05fd8",
          "sha256": "8fa7bc8a5a0e4a155a82406ce5d62cbeae1f0c8315dbdfb107753cb83ad591c5"
        },
        "downloads": -1,
        "filename": "portable_spreadsheet-2.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "063e52c3936dc5dd96989ee930f05fd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 79991,
        "upload_time": "2021-03-16T11:10:57",
        "upload_time_iso_8601": "2021-03-16T11:10:57.682464Z",
        "url": "https://files.pythonhosted.org/packages/53/a4/e486bbc3dbf0a8e7671ad87a29bfb0203a27895e24c22124b4f4a37a81d4/portable_spreadsheet-2.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a3ae024c04d34f515655d3c62bbe0a75d4d1ed8d3245915ee2be451548c46b0",
          "md5": "65c3f12ba899be3e32a992027fc5524a",
          "sha256": "8d224bf05fd1f67c9b61460f78bf45b20d88bda4e86440f913c031593534d27a"
        },
        "downloads": -1,
        "filename": "portable-spreadsheet-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "65c3f12ba899be3e32a992027fc5524a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 101601,
        "upload_time": "2021-03-16T11:11:00",
        "upload_time_iso_8601": "2021-03-16T11:11:00.134795Z",
        "url": "https://files.pythonhosted.org/packages/1a/3a/e024c04d34f515655d3c62bbe0a75d4d1ed8d3245915ee2be451548c46b0/portable-spreadsheet-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53a4e486bbc3dbf0a8e7671ad87a29bfb0203a27895e24c22124b4f4a37a81d4",
        "md5": "063e52c3936dc5dd96989ee930f05fd8",
        "sha256": "8fa7bc8a5a0e4a155a82406ce5d62cbeae1f0c8315dbdfb107753cb83ad591c5"
      },
      "downloads": -1,
      "filename": "portable_spreadsheet-2.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "063e52c3936dc5dd96989ee930f05fd8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 79991,
      "upload_time": "2021-03-16T11:10:57",
      "upload_time_iso_8601": "2021-03-16T11:10:57.682464Z",
      "url": "https://files.pythonhosted.org/packages/53/a4/e486bbc3dbf0a8e7671ad87a29bfb0203a27895e24c22124b4f4a37a81d4/portable_spreadsheet-2.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a3ae024c04d34f515655d3c62bbe0a75d4d1ed8d3245915ee2be451548c46b0",
        "md5": "65c3f12ba899be3e32a992027fc5524a",
        "sha256": "8d224bf05fd1f67c9b61460f78bf45b20d88bda4e86440f913c031593534d27a"
      },
      "downloads": -1,
      "filename": "portable-spreadsheet-2.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "65c3f12ba899be3e32a992027fc5524a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 101601,
      "upload_time": "2021-03-16T11:11:00",
      "upload_time_iso_8601": "2021-03-16T11:11:00.134795Z",
      "url": "https://files.pythonhosted.org/packages/1a/3a/e024c04d34f515655d3c62bbe0a75d4d1ed8d3245915ee2be451548c46b0/portable-spreadsheet-2.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}