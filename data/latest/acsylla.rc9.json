{
  "info": {
    "author": "Pau Freixes",
    "author_email": "pfreixes@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![CI](https://github.com/acsylla/acsylla/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/acsylla/acsylla/actions/workflows/ci.yml)\n[![CI](https://github.com/acsylla/acsylla/actions/workflows/release.yml/badge.svg?branch=v0.1.7a0)](https://github.com/acsylla/acsylla/actions/workflows/release.yml)\n[![PyPI](https://img.shields.io/pypi/v/acsylla.svg)](https://pypi.org/project/acsylla/)\n[![Number of PyPI downloads](https://img.shields.io/pypi/dm/acsylla.svg)](https://pypi.org/project/acsylla/)\n[![Documentation Status](https://readthedocs.org/projects/acsylla/badge/?version=latest)](https://acsylla.readthedocs.io/en/latest/)\n\n# Acsylla <img align=\"right\" width=\"200px\" src=\"https://raw.githubusercontent.com/acsylla/acsylla/master/logo/cassandra-scylladb.svg\" />\nA composition of ***async*** + ***cassandra*** + ***scylla*** words.\n\n\n## A high performance Python Asyncio client library for Cassandra and ScyllaDB \nUnder the hood **_acsylla_** has modern, feature-rich and shard-aware [C/C++ client](https://github.com/scylladb/cpp-driver) library for [Cassandra](https://cassandra.apache.org) and [ScyllaDB](https://www.scylladb.com).\n\n## Table of Contents\n  * [Features](#features)\n  * [Compatibility](#compatibility)\n  * [Install](#install)\n    * [Build your own package](#build-your-own-package) \n  * [Cluster](#cluster) \n    * [Configuration options](#configuration-options)\n    * [Configuration methods](#configuration-methods)\n  * [Session](#session)\n    * [Methods of Session object](#methods-of-session-object)\n  * [Statement](#statement)\n    * [Methods of Statement object](#methods-of-statement-object)\n  * [PreparedStatement](#preparedstatement)\n    * [Methods of PreparedStatement object](#methods-of-preparedstatement-object)\n  * [Batch](#batch)\n    * [Methods of Batch object](#methods-of-batch-object)\n  * [Result](#result)\n    * [Methods of Result object](#methods-of-result-object)\n  * [Row](#row)\n    * [Methods of Row object](#methods-of-row-object)\n  * [Examples](#examples)\n    * [Basic usage](#basic-usage)\n    * [Binding Parameters](#binding-parameters)\n      * [Non Prepared Statement](#non-prepared-statement)\n      * [Prepared Statement](#prepared-statement)\n    * [Use prepared statement and paging](#use-prepared-statement-and-paging)\n    * [Configure Shard-Awareness connection](#configure-shard-awareness-connection-to-scylladb-cluster)\n    * [SSL Example](#ssl-example)\n    * [Retrieving metadata](#retrieving-metadata)\n    * [Configure logging](#configure-logging)\n      * [Set log level](#set-log-level)\n      * [Set callback for capture log messages](#set-callback-for-capture-log-messages)\n    * [Execution profiles](#execution-profiles)\n    * [Tracing](#tracing)\n  * [Developing](#developing)\n  \n\n## Features\n\n* Shard-Awareness\n* Asynchronous API\n* Simple, Prepared, and Batch statements\n* Asynchronous I/O, parallel execution, and request pipelining\n* Connection pooling\n* Automatic node discovery\n* Automatic reconnection\n* Configurable load balancing\n* Works with any cluster size\n* Authentication\n* SSL\n* Latency-aware routing\n* Performance metrics\n* Tuples and UDTs\n* Nested collections\n* Retry policies\n* Client-side timestamps\n* Data types\n* Idle connection heartbeats\n* Support for materialized view and secondary index metadata\n* Support for clustering key order, `frozen<>` and Cassandra version metadata\n* Whitelist/blacklist DC, and whitelist/blacklist hosts load balancing policies\n* Custom authenticators\n* Reverse DNS with SSL peer identity verification support\n* Randomized contact points\n* Speculative execution\n\n## Compatibility\n\nThis driver works exclusively with the Cassandra Query Language v3 (CQL3) and\nCassandra's native protocol. The current version works with:\n\n* Scylla and Scylla Enterprise\n* Apache Cassandra® versions 2.1, 2.2 and 3.0+\n* Python 3.7, 3.8, 3.9, 3.10 and 3.11 for Linux and MacOS \n\n## Install\n\nThere is an Beta realease compabitble with Python 3.7, 3.8, 3.9, 3.10 and 3.11 for Linux and MacOS environments uploaded as a Pypi package. Use the following\ncommand for installing it:\n\n```bash\npip install acsylla\n```\n\n### Build your own package\nYou can build your own package for any supported python version for ***x86_64*** and ***aarch64*** Linux.\n\nExample for build wheel for Python 3.11 aarch64 from master branch\n```bash\ncurl -O https://raw.githubusercontent.com/acsylla/acsylla/master/bin/build.sh\ncurl -O https://raw.githubusercontent.com/acsylla/acsylla/master/bin/build_in_docker.sh\nchmod +x build.sh build_in_docker.sh\n./build_in_docker.sh 3.11 master aarch64\n```\n\n## Cluster\n\nThe `Cluster` object describes a Cassandra/ScyllaDB cluster’s configuration. \nThe ***default cluster object is good for most clusters*** and only requires a single \nor multiple list of contact points in order to establish a session connection.   \n***For example:***   \n`cluster = acsylla.create_cluster('127.0.0.1, 127.0.0.2')`\n\nOnce a session is connected using a cluster object its configuration is constant. \n\nModifying the cluster object configuration once a session is established does not alter the session’s configuration.\n\n### Configuration options\n\nList of named arguments to configure cluster with  `acsylla.create_cluster` helper. \n\n- ***contact_points:*** Sets contact points. This MUST be set. White space is striped from the contact points.    \n    *Examples:* “127.0.0.1”,  “127.0.0.1,127.0.0.2”, “server1.domain.com”\n\n- ***port:*** Sets the port.  \n    *Default:* 9042\n\n- ***local_address:*** Sets the local address to bind when connecting to the\n    cluster, if desired. IP address to bind, or empty string for no\n    binding. Only numeric addresses are supported; no resolution is done.\n\n- ***local_port_range_min:*** Sets the range of outgoing port numbers (ephemeral\n    ports) to be used when establishing the shard-aware connections. This\n    is applicable when the routing of connection to shard is based on the\n    client-side port number.  \n    When application connects to multiple CassCluster-s it is advised\n    to assign mutually non-overlapping port intervals to each. It is assumed\n    that the supplied range is allowed by the OS (e.g. it fits inside\n    /proc/sys/net/ipv4/ip_local_port_range on *nix systems)  \n    *Default:* `49152`\n\n- ***local_port_range_max:*** See `local_port_range_min`  \n    *Default:* `65535`\n\n- ***username:*** Set username for plain text authentication.\n\n- ***password:*** Set password for plain text authentication.\n\n- ***connect_timeout:*** Sets the timeout for connecting to a node.  \n    *Default:* `5` seconds\n\n- ***request_timeout:*** Sets the timeout for waiting for a response from a node.\n    Use 0 for no timeout.  \n    *Default:* `12` seconds\n\n- ***resolve_timeout:*** Sets the timeout for waiting for DNS name resolution.  \n    *Default:* `2` seconds\n\n- ***log_level:*** Sets the log level.\n    Available levels: \n  - `disabled`\n  - `critical`\n  - `error`\n  - `warn`\n  - `info`\n  - `debug`\n  - `trace`\n  \n  *Default:* `warn`\n\n- ***logging_callback:*** Sets a callback function to catch log messages.  \n    *Default:* An internal logger with \"acsylla\" name.\n    `logging.getLogger('acsylla')`\n\n- ***ssl_enable:*** Enable SSL connection  \n    *Default:* `False`\n\n- ***ssl_cert:*** Set client-side certificate chain. This is used to authenticate\n    the client on the server-side. This should contain the entire\n    Certificate chain starting with the certificate itself\n\n- ***ssl_private_key:*** Set client-side private key. This is used to authenticate\n    the client on the server-side.\n\n- ***ssl_private_key_password:*** Password for `ssl_private_key`\n\n- ***ssl_trusted_cert:*** Adds a trusted certificate. This is used to verify the\n    peer’s certificate.\n\n- ***ssl_verify_flags:*** Sets verification performed on the peer’s certificate.\n    - `NONE` No verification is performed\n    - `PEER_CERT` Certificate is present and valid\n    - `PEER_IDENTITY` IP address matches the certificate’s common name or one\n          of its subject alternative names. This implies the certificate is\n          also present.\n    - `PEER_IDENTITY_DNS` Hostname matches the certificate’s common name or\n          one of its subject alternative names. This implies the certificate\n          is also present.  \n      *Default:* `PEER_CERT`\n\n- ***protocol_version:*** Sets the protocol version. The driver will automatically\n    downgrade to the lowest supported protocol version.  \n    *Default:* `acsylla.ProtocolVersion.V4` or `acsylla.ProtocolVersion.DSEV1` when\n    using the DSE driver with DataStax Enterprise.\n\n- ***use_beta_protocol_version:*** Use the newest beta protocol version. This\n    currently enables the use of protocol version `cyacsylla.ProtocolVersion.V5`\n    or `cyacsylla.ProtocolVersion.DSEV2` when using the DSE driver with\n    DataStax Enterprise.  \n    *Default:* `False`\n\n- ***consistency:*** Sets default consistency level of statement. `acsylla.Consistency`  \n    *Default:* `LOCAL_ONE`\n\n- ***serial_consistency:*** Sets default serial consistency level of statement. `acsylla.Consistency`   \n    *Default:* `ANY`\n\n- ***queue_size_io:*** Sets the size of the fixed size queue that stores pending\n    requests.  \n    *Default:* `8192`\n\n- ***core_connections_per_host:*** Sets the number of connections made to each\n    server in each IO thread.  \n    *Default:* `1`\n\n- ***constant_reconnect_delay_ms:*** Configures the cluster to use a reconnection\n    policy that waits a constant time between each reconnection attempt.\n    Time in milliseconds to delay attempting a reconnection; 0 to perform\n    a reconnection immediately.  \n    *Default:* Not set\n\n- ***exponential_reconnect_base_delay_ms:*** The base delay (in milliseconds) to\n    use for scheduling reconnection attempts.\n    Configures the cluster to use a reconnection policy that waits\n    exponentially longer between each reconnection attempt; however will\n    maintain a constant delay once the maximum delay is reached.    \n    *Note:* A random amount of jitter (+/- 15%) will be added to the pure\n    exponential delay value. This helps to prevent situations where\n    multiple connections are in the reconnection process at exactly the\n    same time. The jitter will never cause the delay to be less than the\n    base delay, or more than the max delay.  \n    *Default:* `2000`\n\n- ***exponential_reconnect_max_delay_ms:*** The maximum delay to wait between two\n    reconnection attempts. See `exponential_reconnect_max_delay_ms`  \n    *Default:* `60000`\n\n- ***coalesce_delay_us:*** Sets the amount of time, in microseconds, to wait for\n    new requests to coalesce into a single system call. This should be set\n    to a value around the latency SLA of your application’s requests while\n    also considering the request’s roundtrip time. Larger values should be\n    used for throughput bound workloads and lower values should be used for\n    latency bound workloads.  \n    *Default:* `200` us\n\n- ***new_request_ratio:*** Sets the ratio of time spent processing new requests\n    versus handling the I/O and processing of outstanding requests. The\n    range of this setting is 1 to 100, where larger values allocate more\n    time to processing new requests and smaller values allocate more time\n    to processing outstanding requests.  \n    *Default:* `50`\n\n- ***max_schema_wait_time_ms:*** Sets the maximum time to wait for schema\n    agreement after a schema change is made (e.g. creating, altering,\n    dropping a table/keyspace/view/index etc).  \n    *Default:* `10000` milliseconds\n\n- ***tracing_max_wait_time_ms:*** Sets the maximum time to wait for tracing data to become available.  \n    *Default:* `15` milliseconds\n\n- ***tracing_retry_wait_time_ms:*** Sets the amount of time to wait between attempts to check to see if tracing is available.  \n    *Default:*  `3` milliseconds\n\n- ***tracing_consistency:*** Sets the consistency level to use for checking to see if tracing data is available.  \n    *Default:* `ONE`\n\n- ***load_balance_round_robin:*** Configures the cluster to use round-robin load\n    balancing. The driver discovers all nodes in a cluster and cycles\n    through them per request. All are considered local.\n\n- ***load_balance_dc_aware:*** The primary data center to try first.\n    Configures the cluster to use DC-aware load balancing. For each query,\n    all live nodes in a primary ‘local’ DC are tried first, followed by any\n    node from other DCs.  \n    *Note:* This is the default, and does not need to be called unless\n    switching an existing from another policy or changing settings. Without\n    further configuration, a default local_dc is chosen from the first\n    connected contact point, and no remote hosts are considered in query\n    plans. If relying on this mechanism, be sure to use only contact points\n    from the local DC.\n\n- ***token_aware_routing:*** Configures the cluster to use token-aware request\n    routing or not. This routing policy composes the base routing policy,\n    routing requests first to replicas on nodes considered ‘local’ by the\n    base load balancing policy.  \n    *Important:* Token-aware routing depends on keyspace metadata. For this\n    reason enabling token-aware routing will also enable retrieving and\n    updating keyspace schema metadata.  \n    *Default:* `True` (enabled).\n\n- ***token_aware_routing_shuffle_replicas:*** Configures token-aware routing to\n    randomly shuffle replicas. This can reduce the effectiveness of\n    server-side caching, but it can better distribute load over replicas\n    for a given partition key.  \n    *Note:* Token-aware routing `token_aware_routing` must be enabled for the\n    setting to be  applicable.    \n    *Default:* `True` (enabled).\n\n- ***latency_aware_routing:*** Configures the cluster to use latency-aware request\n    routing or not. This routing policy is a top-level routing policy. It\n    uses the base routing policy to determine locality (dc-aware) and/or\n    placement (token-aware) before considering the latency.  \n    *Default:* `False` (disabled).\n\n- ***latency_aware_routing_settings:*** Configures the settings for latency-aware\n    request routing. Instance of `acsylla.LatencyAwareRoutingSettings`  \n    *Default:* \n    - `exclusion_threshold` ***2.0*** *Controls how much worse the latency\n                                      be compared to the average latency of\n                                      the best performing node before it\n                                      penalized.*\n    - `scale_ms` ***100 milliseconds*** *Controls the weight given to older\n                                      latencies when calculating the average\n                                      latency of a node. A bigger scale will\n                                      give more weight to older latency\n                                      measurements.*\n    - `retry_period_ms` ***10,000 milliseconds*** *The amount of time a node is\n                                      penalized by the policy before being\n                                      given a second chance when the current\n                                      average latency exceeds the calculated\n                                      threshold (exclusion_threshold *\n                                      best_average_latency).*\n    - `update_rate_ms` ***100 milliseconds*** *The rate at which the best\n                                      average latency is recomputed.*\n    - `min_measured` ***50*** *The minimum number of measurements per-host\n                                      required to be considered by the policy*\n\n- ***whitelist_hosts:*** Sets whitelist hosts. The first call sets the whitelist\n    hosts and any subsequent calls appends additional hosts. Passing an\n    empty string will clear and disable the whitelist. White space is\n    striped from the hosts.  \n    This policy filters requests to all other policies, only allowing\n    requests to the hosts contained in the whitelist. Any host not in the\n    whitelist will be ignored and a connection will not be established.\n    This policy is useful for ensuring that the driver will only connect to\n    a predefined set of hosts.  \n    *Examples*: “127.0.0.1”, “127.0.0.1,127.0.0.2”\n\n- ***blacklist_hosts:*** Sets blacklist hosts. The first call sets the blacklist\n    hosts and any subsequent calls appends additional hosts. Passing an\n    empty string will clear and disable the blacklist. White space is\n    striped from the hosts.  \n    This policy filters requests to all other policies, only allowing\n    requests to the hosts not contained in the blacklist. Any host in the\n    blacklist will be ignored and a connection will not be established.\n    This policy is useful for ensuring that the driver will not connect to\n    a predefined set of hosts.  \n    *Examples*: “127.0.0.1”, “127.0.0.1,127.0.0.2”\n\n- ***whitelist_dc:*** Same as `whitelist_hosts`, but whitelist all hosts of a dc  \n    *Examples*: “dc1”, “dc1,dc2”\n\n- ***blacklist_dc:*** Same as `blacklist_hosts`, but blacklist all hosts of a dc  \n    *Examples*: “dc1”, “dc1,dc2”\n\n- ***tcp_nodelay:*** Enable/Disable Nagle’s algorithm on connections.  \n    *Default:* True\n\n- ***tcp_keepalive_sec:*** Set keep-alive delay in seconds.  \n    *Default:* disabled\n\n- ***timestamp_gen:*** \"server_side\" or \"monotonic\" Sets the timestamp generator\n    used to assign timestamps to all requests unless overridden by setting\n    the timestamp on a statement or a batch.  \n    *Default:* Monotonically increasing, client-side timestamp generator.\n\n- ***heartbeat_interval_sec:*** Sets the amount of time between heartbeat messages\n    and controls the amount of time the connection must be idle before\n    sending heartbeat messages. This is useful for preventing intermediate\n    network devices from dropping connections.  \n    *Default:* 30 seconds\n\n- ***idle_timeout_sec:*** Sets the amount of time a connection is allowed to be\n    without a successful heartbeat response before being terminated and\n    scheduled for reconnection.  \n    *Default:* 60 seconds\n\n- ***retry_policy:*** May be set to `default` or `fallthrough` Sets the retry policy used for\n    all requests unless overridden by setting a retry policy on a statement\n    or a batch.\n    - `default` This policy retries queries in the following cases:\n      - On a read timeout, if enough replicas replied but data was not received.\n      - On a write timeout, if a timeout occurs while writing the distributed batch log \n      - On unavailable, it will move to the next host\n      - In all other cases the error will be returned. This policy always uses the query’s original consistency level.\n    - `fallthrough` This policy never retries or ignores a server-side\n        failure. The error is always returned.  \n\n    *Default:* `default` This policy will retry on a read timeout if there\n    was enough replicas, but no data present, on a write timeout if a\n    logged batch request failed to write the batch log, and on a\n    unavailable error it retries using a new host. In all other cases the\n    default policy will return an error.\n\n- ***retry_policy_logging:*** This policy logs the retry decision of its child\n    policy. Logging is done using INFO level.  \n    *Default:* False\n\n- ***use_schema:*** Enable/Disable retrieving and updating schema metadata. If\n    disabled this is allows the driver to skip over retrieving and updating\n    schema metadata and `session.get_metadata()` will\n    always return an empty object. This can be useful for reducing the\n    startup overhead of short-lived sessions.  \n    *Default:* True (enabled)\n\n- ***hostname_resolution:*** Enable retrieving hostnames for IP addresses\n    using reverse IP lookup. This is useful for authentication (Kerberos)\n    or encryption (SSL) services that require a valid hostname for\n    verification.  \n    *Default:* False (disabled)\n\n- ***randomized_contact_points:*** Enable/Disable the randomization of the contact\n    points list.  \n    *Important:* This setting should only be disabled for debugging or tests.  \n    *Default:* True (enabled)\n\n- ***speculative_execution_policy:*** Enable constant speculative executions with\n    the supplied settings `acsylla.SpeculativeExecutionPolicy`.\n\n- ***max_reusable_write_objects:*** Sets the maximum number of “pending write”\n    objects that will be saved for re-use for marshalling new requests.\n    These objects may hold on to a significant amount of memory and\n    reducing the number of these objects may reduce memory usage of the\n    application.  \n       The cost of reducing the value of this setting is potentially slower\n    marshalling of requests prior to sending.  \n    *Default:* Max unsigned integer value\n\n- ***prepare_on_all_hosts:*** Prepare statements on all available hosts.  \n    *Default:* True\n\n- ***no_compact:*** Enable the NO_COMPACT startup option. This can help facilitate\n    uninterrupted cluster upgrades where tables using COMPACT_STORAGE will\n    operate in “compatibility mode” for BATCH, DELETE, SELECT, and UPDATE\n    CQL operations.  \n    *Default:* False\n\n- ***host_listener_callback:*** Sets a callback for handling host state changes in\n    the cluster.\n    Note: The callback is invoked only when state changes in the cluster\n    are applicable to the configured load balancing policy(s).\n    NOT IMPLEMENTED YET\n\n- ***application_name:*** Set the application name. This is optional; however it\n    provides the server with the application name that can aid in debugging\n    issues with larger clusters where there are a lot of client (or\n    application) connections.\n\n- ***application_version:*** Set the application version. This is optional;\n    however it provides the server with the application version that can\n    aid in debugging issues with large clusters where there are a lot of\n    client (or application) connections that may have different versions\n    in use.\n\n- ***client_id:*** Set the client id. This is optional; however it provides the\n    server with the client ID that can aid in debugging issues with large\n    clusters where there are a lot of client connections.  \n    *Default:* UUID v4 generated\n\n- ***monitor_reporting_interval_sec:*** Sets the amount of time between monitor\n    reporting event messages.  \n    *Default:* 300 seconds.\n\n- ***cloud_secure_connection_bundle:*** Absolute path to DBaaS credentials file.  \n    Sets the secure connection bundle path for processing DBaaS credentials.\n    This will pre-configure a cluster using the credentials format provided\n    by the DBaaS cloud provider.  \n    *Note:* `contact_points` and `ssl_enable` should not used in conjunction\n    with `cloud_secure_connection_bundle`.\n  \n    ***Example:*** \"/path/to/secure-connect-database_name.zip\"  \n    *Default:* None\n\n- ***dse_gssapi_authenticator:*** Enables GSSAPI authentication for DSE clusters\n    secured with the DseAuthenticator.\n    Instance of `acsylla.DseGssapiAuthenticator`\n\n- ***dse_gssapi_authenticator_proxy:*** Enables GSSAPI authentication with proxy\n    authorization for DSE clusters secured with the DseAuthenticator.\n    Instance of `acsylla.DseGssapiAuthenticatorProxy`\n\n- ***dse_plaintext_authenticator:*** Enables plaintext authentication for DSE\n    clusters secured with the DseAuthenticator.\n    Instance of `acsylla.DsePlaintextAuthenticator`\n\n- ***dse_plaintext_authenticator_proxy:*** Enables plaintext authentication with\n    proxy authorization for DSE clusters secured with the DseAuthenticator.\n    Instance of `acsylla.DsePlaintextAuthenticatorProxy`\n\n### Configuration methods\n\nFor full list of methods to configure `Cluster` see [base.py](./acsylla/base.py)\n\n## Session\n\nA session object is used to execute queries and maintains cluster state through \nthe control connection. The control connection is used to auto-discover nodes \nand monitor cluster changes (topology and schema). Each session also maintains \nmultiple pools of connections to cluster nodes which are used to query the cluster.\n\n```python\nimport acsylla\n    \ncluster = acsylla.create_cluster(['localhost'])\nsession = await cluster.create_session(keyspace=\"acsylla\")\n```\n\n### Methods of `Session` object\n\n- ***async def close(self):***  \n Closes the session instance, outputs a close future which can be used to \n    determine when the session has been terminated. This allows in-flight \n    requests to finish.\n\n- ***async def set_keyspace(self, keyspace: str) -> \"Result\":***  \n Sets the keyspace for session\n\n- ***def get_client_id(self) -> str:***  \n Get the client id.\n\n- ***def get_metadata(self):***  \n Returns `Metadata` instance class for retrieving metadata from cluster.\n\n- ***async def create_prepared(self, statement: str, timeout: Optional[float] = None) -> PreparedStatement:***  \n Create a prepared statement.  \n By providing a `timeout` all requests built by the prepared statement will use it, otherwise timeout provided during the `Cluster` instantantation will be used. Value expected is seconds.\n\n- ***async def execute(self, statement: \"Statement\") -> Result***  \n Executes an statement and returns the `Result` instance.\n\n- ***async def execute_batch(self, batch: Batch) -> Result:***  \n Executes a batch of statements.\n\n- ***def metrics(self) -> SessionMetrics:***  \n Returns the metrics related to the session.\n\n- ***def speculative_execution_metrics(self) -> SpeculativeExecutionMetrics:***  \n Returns speculative execution performance metrics gathered by the driver.\n\n## Statement\n\nA statement object is an executable query. It represents either a regular \n(adhoc) statement or a prepared statement. It maintains the queries’ parameter \nvalues along with query options (consistency level, paging state, etc.)\n\n### Methods of `Statement` object\n\n- ***def add_key_index(self, index: int) -> None:***  \n Adds a key index specifier to this a statement. When using\n    token-aware routing, this can be used to tell the driver which\n    parameters within a non-prepared, parameterized statement are part of\n    the partition key.  \n Use consecutive calls for composite partition keys.  \n This is not necessary for prepared statements, as the key parameters\n    are determined in the metadata processed in the prepare phase.\n\n- ***def reset_parameters(self, count: int) -> None:***  \n Clear and/or resize the statement’s parameters.\n\n- ***def bind(self, index: int, value: SupportedType) -> None:***   \nBinds the value to a specific index parameter.   \nIf an invalid type is used for a prepared statement this will raise\n    immediately an error. If a none prepared exception is used error will\n    be raised later during the execution statement.   \nIf an invalid index is used this will raise immediately an error\n\n- ***def bind_by_name(self, name: str, value: SupportedType) -> None:***   \nBinds the the value to a specific parameter by name.   \nIf an invalid type is used for this will raise immediately an error. If an\n    invalid name is used this will raise immediately an error\n\n- ***def bind_list(self, values: Sequence[SupportedType]) -> None:***    \nBinds the values into all parameters from left to right.    \nFor types supported and errors that this function might raise take\n    a look at the `Statement.bind` function.\n\n- ***def bind_dict(self, values: Mapping[str, SupportedType]) -> None:***    \nBinds the values into all parameter names. Names are the keys\n    of the mapping provided.\nFor types supported and errors that this function might raise take    \n    look at the `Statement.bind_dict` function.\nNote: This method are only allowed for statements created using\n    prepared statements\n\n- ***def set_page_size(self, page_size: int) -> None:***  \n Sets the statement's page size.\n\n- ***def set_page_state(self, page_state: bytes) -> None:***  \n Sets the statement's paging state. This can be used to get the next\n    page of data in a multi-page query.  \n *Warning:* The paging state should not be exposed to or come from\n    untrusted environments. The paging state could be spoofed and potentially\n    used to gain access to other data.\n\n\n- ***def set_timeout(self, timeout: float) -> None:***  \n Sets the statement's timeout in seconds for waiting for a response from a node.  \n *Default:* Disabled (use the cluster-level request timeout)\n\n\n- ***def set_consistency(self, timeout: float) -> None:***  \n Sets the statement’s consistency level.  \n *Default:* LOCAL_ONE\n\n- ***def set_serial_consistency(self, timeout: float) -> None:***  \n Sets the statement’s serial consistency level.  \n *Default:* Not set\n\n- ***def set_timestamp(self, timestamp: int):***  \n Sets the statement’s timestamp.\n\n- ***def set_is_idempotent(self, is_idempotent: bool):***  \n Sets whether the statement is idempotent. Idempotent statements are\n    able to be automatically retried after timeouts/errors and can be\n    speculatively executed.\n\n- ***def set_retry_policy(self, retry_policy: str, retry_policy_logging: bool = False):***  \n Sets the statement’s retry policy.  \n May be set to `default` or `fallthrough`\n    - `default` This policy retries queries in the following cases:\n      - On a read timeout, if enough replicas replied but data was not received.\n      - On a write timeout, if a timeout occurs while writing the distributed batch log \n      - On unavailable, it will move to the next host\n      - In all other cases the error will be returned. This policy always uses the query’s original consistency level.\n    - `fallthrough` This policy never retries or ignores a server-side\n        failure. The error is always returned.   \n    *Default:* `default` This policy will retry on a read timeout if there\n    was enough replicas, but no data present, on a write timeout if a\n    logged batch request failed to write the batch log, and on a\n    unavailable error it retries using a new host. In all other cases the\n    default policy will return an error.\n    - `retry_policy_logging` If set to `True`, this policy logs the retry decision of its child\n        policy. Logging is done using `INFO` level. *Default:* `False`\n\n- ***def set_tracing(self, enabled: bool = None):***  \n Sets whether the statement should use tracing.\n\n- ***def set_host(self, host: str, port: int = 9042):***  \n Sets a specific host that should run the query.  \n In general, this should not be used, but it can be useful in the\n    following situations:  \n To query node-local tables such as system and virtual tables.  \n To apply a sequence of schema changes where it makes sense for all \n    the changes to be applied on a single node.\n\n- ***def set_execution_profile(self, name: str) -> None:***  \n Sets the execution profile to execute the statement with.\n    Note: Empty string will clear execution profile from statement\n\n## PreparedStatement\n\nA statement that has been prepared cluster-side (It has been pre-parsed and cached).\n \n\n### Methods of `PreparedStatement` object\nUse the `session.create_prepared()` coroutine for creating a new instance of `PreparedStatement`.\n```python\nprepared = await session.create_prepared(\"SELECT id, value FROM test\")\nstatement = prepared.bind(page_size=10)\n```\n- ***def bind(self, page_size: Optional[int] = None, page_state: Optional[bytes] = None, execution_profile: Optional[str] = None,) -> Statement:***  \n Returns a new `Statement` using the prepared.\n\n- ***def set_execution_profile(self, statement: Statement, name: str) -> None:***  \n Sets the execution profile to execute the statement with.  \n ***Note:*** Empty string will clear execution profile from statement\n\n## Batch\nA group of statements that are executed as a single batch.\n\n### Methods of `Batch` object\nUse the `acsylla.create_batch_logged()`, `acsylla.create_batch_unlogged()` and \n`acsylla.create_batch_counter()` factories for creating a new instance.\n\n- ***def set_consistency(self, consistency: int):***  \n Sets the batch’s consistency level\n\n- ***def set_serial_consistency(self, consistency: int):***  \n Sets the batch’s serial consistency level.\n\n- ***def set_timestamp(self, timestamp: int):***  \n Sets the batch’s timestamp.\n\n- ***def set_request_timeout(self, timeout_ms: int):***  \n Sets the batch’s timeout for waiting for a response from a node.  \n ***Default:*** Disabled (use the cluster-level request timeout)\n\n- ***def set_is_idempotent(self, is_idempotent):***  \n Sets whether the statements in a batch are idempotent. Idempotent\n    batches are able to be automatically retried after timeouts/errors and\n    can be speculatively executed.\n\n- ***def set_retry_policy(self, retry_policy: str, retry_policy_logging: bool = False):***  \n Sets the batch’s retry policy.  \n May be set to `default` or `fallthrough`\n    - `default` This policy retries queries in the following cases:\n      - On a read timeout, if enough replicas replied but data was not received.\n      - On a write timeout, if a timeout occurs while writing the distributed batch log \n      - On unavailable, it will move to the next host\n      - In all other cases the error will be returned. This policy always uses the query’s original consistency level.\n    - `fallthrough` This policy never retries or ignores a server-side\n        failure. The error is always returned.   \n    *Default:* `default` This policy will retry on a read timeout if there\n    was enough replicas, but no data present, on a write timeout if a\n    logged batch request failed to write the batch log, and on a\n    unavailable error it retries using a new host. In all other cases the\n    default policy will return an error.\n    - `retry_policy_logging` If set to `True`, this policy logs the retry decision of its child\n        policy. Logging is done using `INFO` level. *Default:* `False`\n\n- ***def set_tracing(self, enabled: bool):***  \n Sets whether the batch should use tracing.\n\n- ***def add_statement(self, statement: Statement) -> None:***  \n Adds a new statement to the batch.\n\n- ***def set_execution_profile(self, name: str) -> None:***  \n Sets the execution profile to execute the statement with.  \n *Note:* Empty string will clear execution profile from statement\n\n## Result\nThe result of a query.\n\n### Methods of `Result` object\nProvides a result instance class. Use the `session.execute()` coroutine for \ngetting the result  from a query\n\n- ***def count(self) -> int:***  \n Returns the total rows of the result\n\n- ***def column_count(self) -> int:***  \n Returns the total columns returned\n\n- ***def columns_names(self):***  \n Returns the columns names\n\n- ***def first(self) -> Optional[\"Row\"]:***  \n Return the first result, if there is no row returns None.\n\n- ***def all(self) -> Iterable[\"Row\"]:***  \n Return the all rows using of a result, using an iterator.   \n If there is no rows iterator returns no rows.\n\n- ***def has_more_pages(self) -> bool:***  \n Returns true if there is still pages to be fetched\n\n- ***def page_state(self) -> bytes:***  \n Returns a token with the page state for continuing fetching\n    new results.  \n Before calling this method you must first checks if there are more\n    results using the `has_more_pages` function, and if there are use the\n    token returned by this function as an argument of the factories for creating\n    an statement for returning the next page.\n\n## Row\nA collection of column values.\n### Methods of `Row` object\nProvides access to a row of a `Result`.\n```python\nresult = await session.execute(statement)\nfor row in result:\n    print(row.as_dict())\n```\n\n- ***def as_dict(self) -> dict:***  \n Returns the row as dict.\n\n- ***def as_list(self) -> list:***  \n Returns the row as list.\n\n- ***def as_tuple(self) -> tuple:***  \n Returns the row as tuple.\n\n- ***def as_named_tuple(self) -> tuple:***  \n Returns the row as named tuple.\n\n- ***def column_count(self) -> int:***  \n Returns column count.\n\n- ***def column_value(self, name: str) -> SupportedType:***  \n Returns the row column value called by `name`.  \n Raises a `CassException` derived exception if the column can not be found  \n Type is inferred by using the Cassandra driver\n    and converted, if supported, to a Python type or one\n    of the extended types provided by Acsylla.\n\n- ***def column_value_by_index(self, index):***  \n Returns the column value by `column index`.\n    Raises an exception if the column can not be found\n\n## Examples\n\nThe driver includes several examples in the [examples](./examples/) directory.\n\n### Basic usage\n\nThe following snippet shows the minimal stuff that would be needed for creating a new ``Session``\nobject for the keyspace ``acsylla`` and then peform a query for reading a set of rows. \nFor more info see [base.py](./acsylla/base.py) and [factories.py](./acsylla/factories.py)\nAcsylla supports all native datatypes including `Collections` and `UDT`\n\n```python\nimport asyncio\nimport acsylla\n    \nasync def main():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    statement = acsylla.create_statement(\"SELECT id, value FROM test WHERE id=100\")\n    result = await session.execute(statement)\n    row = result.first()\n    value = row.column_value(\"value\")\n    await session.close()\n\nasyncio.run(main())\n```\n\n### Binding Parameters\nThe ‘?’ marker is used to denote the bind variables in a query string. \nThis can be used for both regular and prepared parameterized queries. \n\n#### Non Prepared Statement\nIn addition to adding the bind marker to your query string your application \nmust also provide the number of bind variables to \n`acsylla.create_statement()` via `parameters` kwargs when constructing a new \nstatement.\n\n```python\nimport asyncio\nimport acsylla\n\n\nasync def bind_by_index():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    statement = acsylla.create_statement(\n        \"INSERT INTO test (id, value) VALUES (?, ?)\", parameters=2)\n    statement.bind(0, 1)\n    statement.bind(1, 1)\n    await session.execute(statement)\n\n\nasync def bind_list():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    statement = acsylla.create_statement(\n        \"INSERT INTO test (id, value) VALUES (?, ?)\", parameters=2)\n    statement.bind_list([1, 1])\n    await session.execute(statement)\n    \nasyncio.run(bind_by_index())\nasyncio.run(bind_list())\n```\n\n#### Prepared Statement\nBind variables can be bound by the marker’s index or by name and must be \nsupplied for all bound variables.\n\n```python\nimport asyncio\nimport acsylla\n\n\nasync def bind_by_index():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    prepared = await session.create_prepared(\"INSERT INTO test (id, value) VALUES (?, ?)\")\n    statement = prepared.bind()\n    statement.bind(0, 1)\n    statement.bind(1, 1)\n    await session.execute(statement)\n\n\nasync def bind_by_name():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    prepared = await session.create_prepared(\n        \"INSERT INTO test (id, value) VALUES (?, ?)\")\n    statement = prepared.bind()\n    statement.bind_by_name(\"id\", 1)\n    statement.bind_by_name(\"value\", 1)\n    await session.execute(statement)\n\n\nasync def bind_list():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    prepared = await session.create_prepared(\n        \"INSERT INTO test (id, value) VALUES (?, ?)\")\n    statement = prepared.bind()\n    statement.bind_list([0, 1])\n    await session.execute(statement)\n\n\nasync def bind_dict():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    prepared = await session.create_prepared(\n        \"INSERT INTO test (id, value) VALUES (?, ?)\")\n    statement = prepared.bind()\n    statement.bind_dict({'id': 1, 'value': 1})\n    await session.execute(statement)\n\n\nasync def bind_named_parameters():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    prepared = await session.create_prepared(\n        \"INSERT INTO test (id, value) VALUES (:test_id, :test_value)\")\n    statement = prepared.bind()\n    statement.bind_dict({'test_id': 1, 'test_value': 1})\n    await session.execute(statement)\n\n\nasyncio.run(bind_by_index())\nasyncio.run(bind_by_name())\nasyncio.run(bind_list())\nasyncio.run(bind_dict())\nasyncio.run(bind_named_parameters())\n```\n\n### Use prepared statement and paging\n\n```python\nimport asyncio\nimport acsylla\n\nasync def main():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    prepared = await session.create_prepared(\"SELECT id, value FROM test\")\n    statement = prepared.bind(page_size=10)\n    while True:\n        result = await session.execute(statement)\n        print(result.columns_names())\n        # ['id', 'value']\n        for row in result:\n            print(dict(row))\n            # {'id': 1, 'value': 'test'}\n            print(list(row))\n            # [('id', 1), ('value', 'test')]\n            print(row.as_list())\n            # [1, 'test']\n            print(row.as_tuple())\n            # (1, 'test')\n        if result.has_more_pages():\n            statement.set_page_size(100) # you can change statement settings on the fly\n            statement.set_page_state(result.page_state())\n        else:\n            break\n\nasyncio.run(main())\n```\n\n#### Example for pagging result with async generator \n\n```python\nimport asyncio\nimport acsylla\n\nclass AsyncResultGenerator:\n    def __init__(self, session, statement):\n        self.session = session\n        self.statement = statement\n\n    async def __aiter__(self):\n        result = await self.session.execute(self.statement)\n        while True:\n            if result.has_more_pages():\n                self.statement.set_page_state(result.page_state())\n                future_result = asyncio.create_task(\n                    self.session.execute(self.statement))\n                await asyncio.sleep(0)\n            else:\n                future_result = None\n            for row in result:\n                yield dict(row)\n            if future_result is not None:\n                result = await future_result\n            else:\n                break\ndef find(session, statement):\n    return AsyncResultGenerator(session, statement)\n\nasync def main():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    prepared = await session.create_prepared(\"SELECT id, value FROM test\")\n\n    statement = prepared.bind(page_size=10)\n\n    async for res in find(session, statement):\n        print(res)\n\nasyncio.run(main())\n```\n\n### Configure [Shard-Awareness](https://github.com/scylladb/cpp-driver/tree/master/topics/scylla_specific) connection to ScyllaDB cluster\n\n```python\nimport acsylla\n\ncluster = acsylla.create_cluster(['node1', 'node2', 'node3'],\n    port=19042,                 # default: 9042\n    core_connections_per_host=8,# default: 1\n    local_port_range_min=49152, # default: 49152\n    local_port_range_max=65535  # default: 65535\n)\n```\n\n### SSL Example\n\n```python\nimport acsylla\n\nwith open('./certs/client.cert.pem') as f:\n    ssl_cert = f.read()\nwith open('./certs/client.key.pem') as f:\n    ssl_private_key = f.read()\nwith open('./certs/trusted.cert.pem') as f:\n    ssl_trusted_cert = f.read()\n\ncluster = acsylla.create_cluster(\n    ['localhost'],\n    ssl_enabled=True,\n    ssl_cert=ssl_cert,\n    ssl_private_key=ssl_private_key,\n    ssl_trusted_cert=ssl_trusted_cert,\n    ssl_verify_flags=acsylla.SSLVerifyFlags.PEER_IDENTITY)\n```\n\n### Retrieving metadata\n\n```python\nimport asyncio\nimport acsylla\n\nasync def main():\n    cluster = acsylla.create_cluster(['localhost'])\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    metadata = session.get_metadata()\n    for keyspace in metadata.get_keyspaces():\n        keyspace_metadata = metadata.get_keyspace_meta(keyspace)\n        print('\\n\\n'.join(keyspace_metadata.as_cql_query(formatted=True)))\n    await session.close()\n\nasyncio.run(main())\n```\n\n### Configure logging\n\n#### Set log level\n\nAvailable levels: `disabled` `critical` `error` `warn` `info` `debug` `trace`\n\n```python\nimport logging\nimport asyncio\nimport acsylla\n\nlogging.basicConfig(format=\"[%(levelname)1.1s %(asctime)s] (%(name)s) %(message)s\")\n\nasync def main():\n    cluster = acsylla.create_cluster(['localhost'], log_level='trace')\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    cluster.set_log_level('info')\n    await session.close()\n\nasyncio.run(main())\n```\n\n#### Set callback for capture log messages\n\n```python\nimport asyncio\nimport acsylla\n\ndef on_log_message(msg):\n    print(msg.time_ms, \n          msg.log_level, \n          msg.file, \n          msg.line, \n          msg.function, \n          msg.message)\n\nasync def main():\n    cluster = acsylla.create_cluster(['localhost'], \n                                     log_level='debug', \n                                     logging_callback=on_log_message)\n    session = await cluster.create_session(keyspace=\"acsylla\")\n    await session.close()\n\nasyncio.run(main())\n```\n\n### Execution profiles\n\n```python\nimport asyncio\nimport acsylla\n\nasync def main():\n    cluster = acsylla.create_cluster(['localhost'])\n    cluster.create_execution_profile(\n        'test_profile',\n        request_timeout=200,\n        load_balance_round_robin=True,\n        whitelist_hosts='localhost',\n        retry_policy='default',\n        retry_policy_logging=True,\n    )    \n    session = await cluster.create_session(keyspace=\"acsylla\")\n    # For statement\n    statement = acsylla.create_statement(\"SELECT id, value FROM test WHERE id=100\", execution_profile=\"test_profile\")\n    # or \n    statement.set_execution_profile('statement')\n    await session.execute(statement)\n    # For prepared statement\n    prepared = await session.create_prepared(\"SELECT id, value FROM test\")\n    statement = prepared.bind(execution_profile='test_profile')\n    # or \n    statement.set_execution_profile('test_profile')\n    await session.execute(statement)\n    # For batch\n    batch = acsylla.create_batch(execution_profile=\"test_profile\")\n    # or \n    batch.set_execution_profile(\"test_profile\")\n    await session.close()\n\nasyncio.run(main())\n```\n\n### Tracing\n\n```python\nimport acsylla\nimport asyncio\n\n\nasync def pint_tracing_result(session, tracing_id):\n    print('*' * 10, tracing_id, '*' * 10)\n    statement = acsylla.create_statement(\n        \"SELECT * FROM system_traces.sessions WHERE session_id = ?\", 1)\n    statement.bind(0, tracing_id)\n    result = await session.execute(statement)\n    for row in result:\n        print(\"\\n\".join([f\"\\033[1m{k}:\\033[0m {v}\" for k, v in list(row)]))\n\n\nasync def tracing_example():\n    cluster = acsylla.create_cluster([\"localhost\"])\n    session = await cluster.create_session()\n    # Statement tracing\n    statement = acsylla.create_statement(\n        \"SELECT release_version FROM system.local\")\n    statement.set_tracing(True)\n    result = await session.execute(statement)\n    await pint_tracing_result(session, result.tracing_id)\n    # Batch tracing\n    batch_statement1 = acsylla.create_statement(\n        \"INSERT INTO acsylla.test (id, value) VALUES (1, 1)\")\n    batch_statement2 = acsylla.create_statement(\n        \"INSERT INTO acsylla.test (id, value) VALUES (2, 2)\")\n    batch = acsylla.create_batch_logged()\n    batch.add_statement(batch_statement1)\n    batch.add_statement(batch_statement2)\n    batch.set_tracing(True)\n    result = await session.execute_batch(batch)\n    await pint_tracing_result(session, result.tracing_id)\n\n\nasyncio.run(tracing_example())\n```\n\n## Developing\n\nFor developing you must clone the respository and first compile the CPP Cassandra driver, please\nfollow the [instructions](https://docs.datastax.com/en/developer/cpp-driver/2.6/topics/building/>)\nfor installing any dependency that you would need for compiling the driver:\n\n> **_NOTE:_**\n    The driver depends on `libuv` and `openssl`. To install on Mac OS X, do `brew install libuv`\n    and `brew install openssl` respectively. Additionally, you may need to export openssl lib\n    locations: `export LDFLAGS=\"-L/usr/local/opt/openssl/lib\"`\n    and `export CPPFLAGS=\"-I/usr/local/opt/openssl/include\"`.\n\n\n```bash\ngit clone git@github.com:acsylla/acsylla.git\nmake install-driver\n```\n\nSet up the environment and compile the package using the following commands:\n\n```bash\npython -m venv venv\nsource venv/bin/activate\nmake compile\nmake install-dev\n```\n\nAnd finally run the tests:\n\n```bash\nmake cert\ndocker-compose up -d\nmake test\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/acsylla/acsylla",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "acsylla",
    "package_url": "https://pypi.org/project/acsylla/",
    "platform": "*nix",
    "project_url": "https://pypi.org/project/acsylla/",
    "project_urls": {
      "Homepage": "http://github.com/acsylla/acsylla"
    },
    "release_url": "https://pypi.org/project/acsylla/0.1.8b0/",
    "requires_dist": [
      "Cython (==0.29.24) ; extra == 'dev'",
      "pytest (==6.2.5) ; extra == 'dev'",
      "pytest-mock (==3.6.1) ; extra == 'dev'",
      "pytest-asyncio (==0.16.0) ; extra == 'dev'",
      "asynctest (==0.13.0) ; extra == 'dev'",
      "pytest-cov (==3.0.0) ; extra == 'dev'",
      "black (==22.8.0) ; extra == 'dev'",
      "click (==8.1.3) ; extra == 'dev'",
      "isort (==5.9.3) ; extra == 'dev'",
      "flake8 (==4.0.1) ; extra == 'dev'",
      "mypy (==0.910) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A high performance asynchronous Cassandra and ScyllaDB client",
    "version": "0.1.8b0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15842943,
  "releases": {
    "0.1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "436a2cc9292c4229dc8c5461c5e1173565e48ba1284112f7abf812a05a6b41f6",
          "md5": "026837a424d59006aafd87d98ecd9850",
          "sha256": "a1fc95fc464d1cfe92a04973c2ac1d141f4181fb21b2b3a8bac079c5de48edc7"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.0a0-cp37-cp37m-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "026837a424d59006aafd87d98ecd9850",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 4869361,
        "upload_time": "2020-08-24T22:01:20",
        "upload_time_iso_8601": "2020-08-24T22:01:20.892721Z",
        "url": "https://files.pythonhosted.org/packages/43/6a/2cc9292c4229dc8c5461c5e1173565e48ba1284112f7abf812a05a6b41f6/acsylla-0.1.0a0-cp37-cp37m-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27168a7c13e8782e6b5d18af6ed8cc784466b9845af8a298e074bff4adbe936f",
          "md5": "a0a4f7b28d0f4ae5f53aa9552c3a02f4",
          "sha256": "9a9825e8d358a3813f1ba65d336ead8f94fa40f1fa43c4eed81f13616ec8732d"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.0a0-cp38-cp38-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "a0a4f7b28d0f4ae5f53aa9552c3a02f4",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 4924548,
        "upload_time": "2020-08-24T22:01:24",
        "upload_time_iso_8601": "2020-08-24T22:01:24.117797Z",
        "url": "https://files.pythonhosted.org/packages/27/16/8a7c13e8782e6b5d18af6ed8cc784466b9845af8a298e074bff4adbe936f/acsylla-0.1.0a0-cp38-cp38-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2aaf530e709e36f000d3e85569cb251f12fdadc29c6dbcbcd5bb61ab57a685b7",
          "md5": "22e72c894d8104ff0467ea38a4428528",
          "sha256": "708edc64a21d9be799a4c0e904e96e99cf802a7895ead324ed231b6aaa684ffa"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.1a0-cp37-cp37m-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "22e72c894d8104ff0467ea38a4428528",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 4466558,
        "upload_time": "2020-09-03T21:45:48",
        "upload_time_iso_8601": "2020-09-03T21:45:48.664691Z",
        "url": "https://files.pythonhosted.org/packages/2a/af/530e709e36f000d3e85569cb251f12fdadc29c6dbcbcd5bb61ab57a685b7/acsylla-0.1.1a0-cp37-cp37m-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43849f5f33c35635f9e807cd521cb4aee7684ad7a308c885c268d9f8b59cba4d",
          "md5": "4c07608ce498967fe9a3ec09e29a215f",
          "sha256": "448a306c7d8c51fdf45efa3e6f4f469182744b8172de4babf6043c5159e65ea9"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.1a0-cp38-cp38-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "4c07608ce498967fe9a3ec09e29a215f",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 4522405,
        "upload_time": "2020-09-03T21:45:50",
        "upload_time_iso_8601": "2020-09-03T21:45:50.581529Z",
        "url": "https://files.pythonhosted.org/packages/43/84/9f5f33c35635f9e807cd521cb4aee7684ad7a308c885c268d9f8b59cba4d/acsylla-0.1.1a0-cp38-cp38-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac4f720d8450d499b4b052b43c97b5a7cbed2c9473d9764bdeee427647ca9090",
          "md5": "ed65410c8e57c816d48659f419c06fe7",
          "sha256": "978dbd2f42dd3c199b75d7cc69c2dcb25c3b26b432922b2bf01a719375c4a4ef"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.2a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ed65410c8e57c816d48659f419c06fe7",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1683986,
        "upload_time": "2020-09-03T22:51:01",
        "upload_time_iso_8601": "2020-09-03T22:51:01.083615Z",
        "url": "https://files.pythonhosted.org/packages/ac/4f/720d8450d499b4b052b43c97b5a7cbed2c9473d9764bdeee427647ca9090/acsylla-0.1.2a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a452f14e2911dd3b9766cf4abe6af5fe378cc6b567d07cb9a72e12e371d545d",
          "md5": "8fa183ceea53e19d586dcf7423c46a06",
          "sha256": "f5d00b44b2d2d96f8d7b05a91304094e20868ff9ca87fb46d831bb6dc37d491d"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.2a0-cp37-cp37m-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "8fa183ceea53e19d586dcf7423c46a06",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 4466533,
        "upload_time": "2020-09-03T22:51:02",
        "upload_time_iso_8601": "2020-09-03T22:51:02.679273Z",
        "url": "https://files.pythonhosted.org/packages/7a/45/2f14e2911dd3b9766cf4abe6af5fe378cc6b567d07cb9a72e12e371d545d/acsylla-0.1.2a0-cp37-cp37m-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d19d6b2406ef098f7d7da34eb4bcda1faa871777d5527902993464fe4e86f6a",
          "md5": "e0adbe22a6eb9d0498b22d2e8dab4d4a",
          "sha256": "53a9cdb31ed0183880ac3c305b4ea78f9b0bb3d3fdc6112b35b424018486fe0f"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.2a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "e0adbe22a6eb9d0498b22d2e8dab4d4a",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 1686083,
        "upload_time": "2020-09-03T22:51:04",
        "upload_time_iso_8601": "2020-09-03T22:51:04.326783Z",
        "url": "https://files.pythonhosted.org/packages/7d/19/d6b2406ef098f7d7da34eb4bcda1faa871777d5527902993464fe4e86f6a/acsylla-0.1.2a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4602cdcebc263aa4a7e38fc2ccff0220935b7f68d6bd6ed02f8e78498b8d030",
          "md5": "15fc2cb7f1672aad9525a61a130a1845",
          "sha256": "253dd975d580e9c9d4c2490f9a372ef2a9f9b2f25ed10fcb528e41f573fbfdc9"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.2a0-cp38-cp38-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "15fc2cb7f1672aad9525a61a130a1845",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 4522378,
        "upload_time": "2020-09-03T22:51:05",
        "upload_time_iso_8601": "2020-09-03T22:51:05.968975Z",
        "url": "https://files.pythonhosted.org/packages/d4/60/2cdcebc263aa4a7e38fc2ccff0220935b7f68d6bd6ed02f8e78498b8d030/acsylla-0.1.2a0-cp38-cp38-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a9be9b142edf866824ef5b6301e19cf9483b12dee91d1e7cbfacf206b4c76ff",
          "md5": "4e680dc0add2b51af67d2381d97feb34",
          "sha256": "fd452089e4874c4a63e77b8712dfea3af82ef1fe5314a51f678b12e3aa9a4a15"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.3a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "4e680dc0add2b51af67d2381d97feb34",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1734088,
        "upload_time": "2020-10-15T21:36:12",
        "upload_time_iso_8601": "2020-10-15T21:36:12.764539Z",
        "url": "https://files.pythonhosted.org/packages/7a/9b/e9b142edf866824ef5b6301e19cf9483b12dee91d1e7cbfacf206b4c76ff/acsylla-0.1.3a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb706c86036dfbe4021df92ce5774de012d417f351562f16f8fd0144183f45df",
          "md5": "01cec4826406c096527bba8e34631d5d",
          "sha256": "c836d02461aa0af13b9074a51173ac4f5ace87a75132cda48071e58ea224b21b"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.3a0-cp37-cp37m-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "01cec4826406c096527bba8e34631d5d",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 4586913,
        "upload_time": "2020-10-15T21:36:14",
        "upload_time_iso_8601": "2020-10-15T21:36:14.057981Z",
        "url": "https://files.pythonhosted.org/packages/fb/70/6c86036dfbe4021df92ce5774de012d417f351562f16f8fd0144183f45df/acsylla-0.1.3a0-cp37-cp37m-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee4da046585b2a57890a062138f16089c25690575c22bfc49f9fda1ab5ca02d5",
          "md5": "cf3fb47dc07fff938eedb4d8a6d9a8b4",
          "sha256": "34935cad92ea8da4967d47b2453f9f73406c7dc5c27b1334cbae50d7783f0f43"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.3a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "cf3fb47dc07fff938eedb4d8a6d9a8b4",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 1735263,
        "upload_time": "2020-10-15T21:36:15",
        "upload_time_iso_8601": "2020-10-15T21:36:15.779859Z",
        "url": "https://files.pythonhosted.org/packages/ee/4d/a046585b2a57890a062138f16089c25690575c22bfc49f9fda1ab5ca02d5/acsylla-0.1.3a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14d756b84f0288d8dd5e24d799d4df042b0a62120522d17702bd91ad5cab31e6",
          "md5": "23854768c556d9f7d65c0dc883564618",
          "sha256": "8884394d54dab0f42b31b206f4e196e7b84be088e95e881df43158866158d8c0"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.3a0-cp38-cp38-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "23854768c556d9f7d65c0dc883564618",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 4698112,
        "upload_time": "2020-10-15T21:36:17",
        "upload_time_iso_8601": "2020-10-15T21:36:17.562245Z",
        "url": "https://files.pythonhosted.org/packages/14/d7/56b84f0288d8dd5e24d799d4df042b0a62120522d17702bd91ad5cab31e6/acsylla-0.1.3a0-cp38-cp38-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "878b3e25b8dea7ae235286734a75f112f26a147bcd2c254f1775c65b68a27fbd",
          "md5": "c00c797f734ee4f787d6bc57522fd22f",
          "sha256": "1fde9d4f322a31382e434e9aba482751994000944c76e794c9fa03a8c672f59a"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.4a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c00c797f734ee4f787d6bc57522fd22f",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1734088,
        "upload_time": "2020-10-26T21:01:46",
        "upload_time_iso_8601": "2020-10-26T21:01:46.371711Z",
        "url": "https://files.pythonhosted.org/packages/87/8b/3e25b8dea7ae235286734a75f112f26a147bcd2c254f1775c65b68a27fbd/acsylla-0.1.4a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18cd4bef170e686f866bb904ffc011615d3743a766a533a680c281a507df3b71",
          "md5": "bb71d71f1813b4e63a8755d5c3886606",
          "sha256": "1a713fa44bc7ca7639b50ea66a73b6ca72b6796e0bff1687fef3029bdb248838"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.4a0-cp37-cp37m-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "bb71d71f1813b4e63a8755d5c3886606",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 4588393,
        "upload_time": "2020-10-26T21:01:48",
        "upload_time_iso_8601": "2020-10-26T21:01:48.166993Z",
        "url": "https://files.pythonhosted.org/packages/18/cd/4bef170e686f866bb904ffc011615d3743a766a533a680c281a507df3b71/acsylla-0.1.4a0-cp37-cp37m-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ee89d1fabdf49c84b20fb02aabf507a8e94c419fb63dfef945636a5986dc6ad",
          "md5": "de8e414aa1b4173090e025dcc77185e2",
          "sha256": "83db3c4b1db10dfdf4c1724674b03a10bc8745a8abb6a53861135a8a3e4fc4ae"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.4a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "de8e414aa1b4173090e025dcc77185e2",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 1735265,
        "upload_time": "2020-10-26T21:01:49",
        "upload_time_iso_8601": "2020-10-26T21:01:49.518032Z",
        "url": "https://files.pythonhosted.org/packages/2e/e8/9d1fabdf49c84b20fb02aabf507a8e94c419fb63dfef945636a5986dc6ad/acsylla-0.1.4a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2daaf6cff070b1033eddd9e181d2c5436781d97ee2d509d288e2d3b8bc121053",
          "md5": "f014e68db8276666ecfe62a369c1f324",
          "sha256": "ae92d6e7d2e5aba63e2d7f730ec056adb3b5199f454535a1e79be7a278169e79"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.4a0-cp38-cp38-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "f014e68db8276666ecfe62a369c1f324",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 4699710,
        "upload_time": "2020-10-26T21:01:51",
        "upload_time_iso_8601": "2020-10-26T21:01:51.162565Z",
        "url": "https://files.pythonhosted.org/packages/2d/aa/f6cff070b1033eddd9e181d2c5436781d97ee2d509d288e2d3b8bc121053/acsylla-0.1.4a0-cp38-cp38-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76940de9f21500dbc4f0dc750eb20e98c579fab83745ba4adfdc5580ed53fa2d",
          "md5": "73c4920648d6d95264c64ac84c7e3848",
          "sha256": "733a6b7f28e0972209088c243fe2b05f13fd5dd2047bcb2f3b89390666706775"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.4a0-cp39-cp39-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "73c4920648d6d95264c64ac84c7e3848",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 1734919,
        "upload_time": "2020-10-26T21:01:52",
        "upload_time_iso_8601": "2020-10-26T21:01:52.294778Z",
        "url": "https://files.pythonhosted.org/packages/76/94/0de9f21500dbc4f0dc750eb20e98c579fab83745ba4adfdc5580ed53fa2d/acsylla-0.1.4a0-cp39-cp39-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8afca90e9bc57c39bff2d8d52a31617e29852ebb8235551add34bd06f6349dc5",
          "md5": "ddeb5c5cf8e23558429e16c32a2bd391",
          "sha256": "11646e29a109fb412730e84076de57280e9a69403f3967ade8e122c3efd8aad0"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.4a0-cp39-cp39-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ddeb5c5cf8e23558429e16c32a2bd391",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 4644545,
        "upload_time": "2020-10-26T21:01:53",
        "upload_time_iso_8601": "2020-10-26T21:01:53.939053Z",
        "url": "https://files.pythonhosted.org/packages/8a/fc/a90e9bc57c39bff2d8d52a31617e29852ebb8235551add34bd06f6349dc5/acsylla-0.1.4a0-cp39-cp39-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4de6eaf81a103306c243f030dc95d804c65d9273975ebce097e73b213b189803",
          "md5": "ffe7af0f9f6c9d0f87fc06cc15c3e8d5",
          "sha256": "f7362b681b06d5a5c89b279a08eab2683a6f6551882518ba2e9e3a5a375822f2"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.5a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ffe7af0f9f6c9d0f87fc06cc15c3e8d5",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1831098,
        "upload_time": "2021-09-09T20:11:30",
        "upload_time_iso_8601": "2021-09-09T20:11:30.980564Z",
        "url": "https://files.pythonhosted.org/packages/4d/e6/eaf81a103306c243f030dc95d804c65d9273975ebce097e73b213b189803/acsylla-0.1.5a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8a4e4d15b74a67d5911c6f7109e5125a4e38853ee4ab53962d2617f24070b12",
          "md5": "26cffb17df1005bcd4e35effe1a78aec",
          "sha256": "a5b7b34e8e0bbee528cdddd1d45b729894b4d26cd57420d8663f817aec9cc95c"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.5a0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "26cffb17df1005bcd4e35effe1a78aec",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 4963419,
        "upload_time": "2021-09-09T20:11:33",
        "upload_time_iso_8601": "2021-09-09T20:11:33.080026Z",
        "url": "https://files.pythonhosted.org/packages/a8/a4/e4d15b74a67d5911c6f7109e5125a4e38853ee4ab53962d2617f24070b12/acsylla-0.1.5a0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72b1a4ee695c30fc627a101afbf762104c5dcf38e9e9bcb7f8c4a0635721c273",
          "md5": "90dc5e9f44be2e02a981061f37a4e3eb",
          "sha256": "ba022bfb0fbed9fcfabb064062531618b931d1e5a08f573eef5ef599a8f956ab"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.5a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "90dc5e9f44be2e02a981061f37a4e3eb",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 1838863,
        "upload_time": "2021-09-09T20:11:35",
        "upload_time_iso_8601": "2021-09-09T20:11:35.380580Z",
        "url": "https://files.pythonhosted.org/packages/72/b1/a4ee695c30fc627a101afbf762104c5dcf38e9e9bcb7f8c4a0635721c273/acsylla-0.1.5a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f631ae1175138cc8ef009c6fce312ec1582cefbd2d14c4f90347a070ddf75694",
          "md5": "102e12eaa03f0dac47e27d04c45d8ca4",
          "sha256": "adf4039bb6d55a904cbf18626c7fe89b8de64acc8afda4fd1d74fc3da8d314e2"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.5a0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "102e12eaa03f0dac47e27d04c45d8ca4",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 5181870,
        "upload_time": "2021-09-09T20:11:36",
        "upload_time_iso_8601": "2021-09-09T20:11:36.676576Z",
        "url": "https://files.pythonhosted.org/packages/f6/31/ae1175138cc8ef009c6fce312ec1582cefbd2d14c4f90347a070ddf75694/acsylla-0.1.5a0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44f95215b1046ea0878a44762a5a86fd69238b0ee0a6c756360fa79de78cd848",
          "md5": "c98c94561aa2e4d95df369bd4d82a945",
          "sha256": "5ff1b76fa18e30118cbaa683975087b248eae13d63d821f7d96217982b5cd708"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.5a0-cp39-cp39-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c98c94561aa2e4d95df369bd4d82a945",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 1849255,
        "upload_time": "2021-09-09T20:11:38",
        "upload_time_iso_8601": "2021-09-09T20:11:38.072330Z",
        "url": "https://files.pythonhosted.org/packages/44/f9/5215b1046ea0878a44762a5a86fd69238b0ee0a6c756360fa79de78cd848/acsylla-0.1.5a0-cp39-cp39-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2e5848c850e4d906203962c981e542bacd32a4561f7261155425427c392e8fb",
          "md5": "ddb62494333e6df591b3fd38f69e5d39",
          "sha256": "00e779e511151bfb5caa2ff0a3756b1d125e1ec681743e9c71a535c9c5deec5f"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.5a0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ddb62494333e6df591b3fd38f69e5d39",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 5066585,
        "upload_time": "2021-09-09T20:11:39",
        "upload_time_iso_8601": "2021-09-09T20:11:39.532364Z",
        "url": "https://files.pythonhosted.org/packages/f2/e5/848c850e4d906203962c981e542bacd32a4561f7261155425427c392e8fb/acsylla-0.1.5a0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "832cb78173967f6d65d9dea05f1aa0e4da792ec050b85d9081143291ca36ad1e",
          "md5": "54567d239da4444d3b2fe7301faff900",
          "sha256": "cae17bc95480e3aa95c1b297787e99194cc84886a315578a492f05c9e9615cc5"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.6a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "54567d239da4444d3b2fe7301faff900",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1843587,
        "upload_time": "2021-10-02T13:12:53",
        "upload_time_iso_8601": "2021-10-02T13:12:53.850049Z",
        "url": "https://files.pythonhosted.org/packages/83/2c/b78173967f6d65d9dea05f1aa0e4da792ec050b85d9081143291ca36ad1e/acsylla-0.1.6a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d12f4404ef00495d1373f98bb9c973f181a6448d2fac27c0cf6569af29e9d8d0",
          "md5": "33013b392b6b4941b3ad02f371164529",
          "sha256": "dbd0741e1cbe1cafed79e74e1f8b3464008dee88ae5263695f3ed06643e29128"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.6a0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "33013b392b6b4941b3ad02f371164529",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 4952482,
        "upload_time": "2021-10-02T13:12:55",
        "upload_time_iso_8601": "2021-10-02T13:12:55.999262Z",
        "url": "https://files.pythonhosted.org/packages/d1/2f/4404ef00495d1373f98bb9c973f181a6448d2fac27c0cf6569af29e9d8d0/acsylla-0.1.6a0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2394df057672605687bf1e77f9e619f550aa7862a4a9e420638e31cf02d35c41",
          "md5": "4705925e63b18eeda9ad08f6e8abe385",
          "sha256": "8a7b4876c47395edef5396ac6433833574851007044f6b8b84b6a82cca4f3e38"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.6a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "4705925e63b18eeda9ad08f6e8abe385",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 1853128,
        "upload_time": "2021-10-02T13:12:57",
        "upload_time_iso_8601": "2021-10-02T13:12:57.340089Z",
        "url": "https://files.pythonhosted.org/packages/23/94/df057672605687bf1e77f9e619f550aa7862a4a9e420638e31cf02d35c41/acsylla-0.1.6a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0956b811b2b4ec6f64b1cb147ca725162eb747ea6df0e516a8af7d33ff18bb63",
          "md5": "b13d3dd3d25a4ae957f2e5ec4e7d4515",
          "sha256": "525aae8929fa5abf3f57538c27c5528a35c4d58078bc5e3994b0bfdbef860002"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.6a0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b13d3dd3d25a4ae957f2e5ec4e7d4515",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 5184489,
        "upload_time": "2021-10-02T13:12:58",
        "upload_time_iso_8601": "2021-10-02T13:12:58.748913Z",
        "url": "https://files.pythonhosted.org/packages/09/56/b811b2b4ec6f64b1cb147ca725162eb747ea6df0e516a8af7d33ff18bb63/acsylla-0.1.6a0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd3af86219fd4c55bb1ac15a2147fd5bff7a1260a74903d19c6e04cb552aec71",
          "md5": "b8bdecbecaee0a102006a861e799fdeb",
          "sha256": "b9aee245c09e3a23ae95c179656138ec11707f0a1397cfe64b115feb1c0c349c"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.6a0-cp39-cp39-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b8bdecbecaee0a102006a861e799fdeb",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 1853605,
        "upload_time": "2021-10-02T13:13:00",
        "upload_time_iso_8601": "2021-10-02T13:13:00.274206Z",
        "url": "https://files.pythonhosted.org/packages/cd/3a/f86219fd4c55bb1ac15a2147fd5bff7a1260a74903d19c6e04cb552aec71/acsylla-0.1.6a0-cp39-cp39-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca89f2da32ed2283ba8380a84738cb94f8d4642e4aac4d335567eec271369505",
          "md5": "7fcdca22bf2690ea9c7062ee42ffdec6",
          "sha256": "df6ac8766e5974ca29957a2c407f19af6c0445fe883d0d7e5df11a3027389d9f"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.6a0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "7fcdca22bf2690ea9c7062ee42ffdec6",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 5066142,
        "upload_time": "2021-10-02T13:13:01",
        "upload_time_iso_8601": "2021-10-02T13:13:01.860374Z",
        "url": "https://files.pythonhosted.org/packages/ca/89/f2da32ed2283ba8380a84738cb94f8d4642e4aac4d335567eec271369505/acsylla-0.1.6a0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "525a7996678d7342391cdcb2302a4f0ecefe5abfc794c37438505dabd093292c",
          "md5": "745094997f92c8347653b8f292cdae75",
          "sha256": "a45188e93655072b2c820355d1e93fd3313ba77fd511f8e0b5ad96a808207881"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.7a0-cp310-cp310-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "745094997f92c8347653b8f292cdae75",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 3513176,
        "upload_time": "2021-10-25T08:49:11",
        "upload_time_iso_8601": "2021-10-25T08:49:11.032883Z",
        "url": "https://files.pythonhosted.org/packages/52/5a/7996678d7342391cdcb2302a4f0ecefe5abfc794c37438505dabd093292c/acsylla-0.1.7a0-cp310-cp310-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f7a14e35f0ee17e8ac30685c076c96dff5b9534b52a1de3b743c3d01b7d39ea",
          "md5": "0d05d0c139d8b28815473fa1c5a08927",
          "sha256": "0a1950c1137a980b04346fab2e2e27fb3f37561f2c7c7e2d91b2394eeb5af443"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.7a0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "0d05d0c139d8b28815473fa1c5a08927",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 5097205,
        "upload_time": "2021-10-25T08:49:14",
        "upload_time_iso_8601": "2021-10-25T08:49:14.016133Z",
        "url": "https://files.pythonhosted.org/packages/6f/7a/14e35f0ee17e8ac30685c076c96dff5b9534b52a1de3b743c3d01b7d39ea/acsylla-0.1.7a0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5b6e87b42b6a7d1d0cd008f6ef647a31a550c5bc3d16ea47a8d0e991c595b15",
          "md5": "8344de355b51e2a2bff8cdad5c151360",
          "sha256": "f07796fbd41e7e725bf7f07a2fa0c946cde375102a99262f5c4a9ceb34dd5846"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.7a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "8344de355b51e2a2bff8cdad5c151360",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 3497267,
        "upload_time": "2021-10-25T08:49:16",
        "upload_time_iso_8601": "2021-10-25T08:49:16.564580Z",
        "url": "https://files.pythonhosted.org/packages/c5/b6/e87b42b6a7d1d0cd008f6ef647a31a550c5bc3d16ea47a8d0e991c595b15/acsylla-0.1.7a0-cp37-cp37m-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84f4876870e02deb5fe0448ebbf98cd8c864e7de9840208d7d591222ce7f8a16",
          "md5": "8527594b6da9661be8ce7892abe0022a",
          "sha256": "d253dabdcb24288e687cdc67d5f99b65b7bb3a8e14a294f312b8d137c2a4bbd0"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.7a0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "8527594b6da9661be8ce7892abe0022a",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 4972952,
        "upload_time": "2021-10-25T08:49:18",
        "upload_time_iso_8601": "2021-10-25T08:49:18.997530Z",
        "url": "https://files.pythonhosted.org/packages/84/f4/876870e02deb5fe0448ebbf98cd8c864e7de9840208d7d591222ce7f8a16/acsylla-0.1.7a0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37552d36953091f5d884bba043543b021b34a4479ea6c34c45aaa5364c6e25f4",
          "md5": "5a34e5affa54f1afe1dbdc2c024caa04",
          "sha256": "bde7d4d38dbc28d9c309094eccc05693f35b0173767adb7023f1d0a69a22e04c"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.7a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "5a34e5affa54f1afe1dbdc2c024caa04",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 3505617,
        "upload_time": "2021-10-25T08:49:21",
        "upload_time_iso_8601": "2021-10-25T08:49:21.636882Z",
        "url": "https://files.pythonhosted.org/packages/37/55/2d36953091f5d884bba043543b021b34a4479ea6c34c45aaa5364c6e25f4/acsylla-0.1.7a0-cp38-cp38-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ea4228b84c3df94c06f41e0d7fbbbbef82f29391bebd55f8662d4b84cfadc95",
          "md5": "46bf44859661d535935975fc761a1e1f",
          "sha256": "ee91c8eecf7bbf17b3549af656f4f8c367a0f4a61fcfc939bf491494eec5670a"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.7a0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "46bf44859661d535935975fc761a1e1f",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 5219496,
        "upload_time": "2021-10-25T08:49:24",
        "upload_time_iso_8601": "2021-10-25T08:49:24.705477Z",
        "url": "https://files.pythonhosted.org/packages/1e/a4/228b84c3df94c06f41e0d7fbbbbef82f29391bebd55f8662d4b84cfadc95/acsylla-0.1.7a0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c6b62c5b941135591eb4773d3fcfc99d9425c8c0d637abaa7e1f5e07b715d84",
          "md5": "1bf7ef3181e6fa92584dde5fa6c8e8a0",
          "sha256": "6525a6f7546c1c11760083551211a52b1f315b72dfd37712a313f49c1cbd652d"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.7a0-cp39-cp39-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "1bf7ef3181e6fa92584dde5fa6c8e8a0",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 3505913,
        "upload_time": "2021-10-25T08:49:27",
        "upload_time_iso_8601": "2021-10-25T08:49:27.291964Z",
        "url": "https://files.pythonhosted.org/packages/5c/6b/62c5b941135591eb4773d3fcfc99d9425c8c0d637abaa7e1f5e07b715d84/acsylla-0.1.7a0-cp39-cp39-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22edd52129e1ceb1f38b3ecfa5059c6e116e46770a0f4f349602196c173b2109",
          "md5": "2915f21af79eba41259cf05e7c1b09f9",
          "sha256": "e64ac4817d31dc5be9d79b5dcff3b8ce11a736e65e0589512c7fbc528c46a4b1"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.7a0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "2915f21af79eba41259cf05e7c1b09f9",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 5096801,
        "upload_time": "2021-10-25T08:49:29",
        "upload_time_iso_8601": "2021-10-25T08:49:29.908883Z",
        "url": "https://files.pythonhosted.org/packages/22/ed/d52129e1ceb1f38b3ecfa5059c6e116e46770a0f4f349602196c173b2109/acsylla-0.1.7a0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7e36654968a2ba7dab47e37fbc6489cf74226c57da3d8653dc649220e771c06",
          "md5": "cb7c5e14b1a627a882688cb88397ffa7",
          "sha256": "be9bf15d20dcc10e73dca68f3bceb86835acbdc99a90285fc789b666f811e830"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp310-cp310-macosx_10_15_x86_64.whl",
        "has_sig": false,
        "md5_digest": "cb7c5e14b1a627a882688cb88397ffa7",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 3656940,
        "upload_time": "2022-11-21T16:35:01",
        "upload_time_iso_8601": "2022-11-21T16:35:01.759358Z",
        "url": "https://files.pythonhosted.org/packages/b7/e3/6654968a2ba7dab47e37fbc6489cf74226c57da3d8653dc649220e771c06/acsylla-0.1.8b0-cp310-cp310-macosx_10_15_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c713479a0f08ec75e10669974b4fa8607e2de76e394fd52038e4c0ef6da4c080",
          "md5": "4edfaeb4511d15a75e156ac564163d2d",
          "sha256": "06d1e0cc177de890f21419b8b4d14fd7536f68164a7055668fa15caf6923cb52"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
        "has_sig": false,
        "md5_digest": "4edfaeb4511d15a75e156ac564163d2d",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 6199232,
        "upload_time": "2022-11-21T16:21:22",
        "upload_time_iso_8601": "2022-11-21T16:21:22.285564Z",
        "url": "https://files.pythonhosted.org/packages/c7/13/479a0f08ec75e10669974b4fa8607e2de76e394fd52038e4c0ef6da4c080/acsylla-0.1.8b0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "254aec113ad62da7e4aa73c97904744609bd4f7a7535234099289f721dc00f2c",
          "md5": "68f03b94f8cea078b055e914e798c81a",
          "sha256": "b8c372c2f0acff34f2c166abf218a42d53e92f8ddec02fbc94360bb81bdcd154"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "68f03b94f8cea078b055e914e798c81a",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 6592154,
        "upload_time": "2022-11-21T16:35:04",
        "upload_time_iso_8601": "2022-11-21T16:35:04.093568Z",
        "url": "https://files.pythonhosted.org/packages/25/4a/ec113ad62da7e4aa73c97904744609bd4f7a7535234099289f721dc00f2c/acsylla-0.1.8b0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b977a49da142988cbd6bb8fa31d8d7b9240f45f35e662e87508832ee0fab26ec",
          "md5": "50b2d6d43917df32795fcc8e47826bb0",
          "sha256": "671fdeff28cb44ba418a7ea46b39716d11e0349df681e3fe7d5b0983e35b6154"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp311-cp311-macosx_10_9_universal2.whl",
        "has_sig": false,
        "md5_digest": "50b2d6d43917df32795fcc8e47826bb0",
        "packagetype": "bdist_wheel",
        "python_version": "cp311",
        "requires_python": null,
        "size": 3936283,
        "upload_time": "2022-11-21T16:35:06",
        "upload_time_iso_8601": "2022-11-21T16:35:06.439853Z",
        "url": "https://files.pythonhosted.org/packages/b9/77/a49da142988cbd6bb8fa31d8d7b9240f45f35e662e87508832ee0fab26ec/acsylla-0.1.8b0-cp311-cp311-macosx_10_9_universal2.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7ea096b5ffb99a5801475c928d41035240f8af5b1e4dc9b7e720e835667b503",
          "md5": "cd566a0b41c54c2254012cbc6041c4a6",
          "sha256": "1eaad8dd3dde705f16c251036e48d4954f62d2ff6af95167244aced7e8a0154f"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
        "has_sig": false,
        "md5_digest": "cd566a0b41c54c2254012cbc6041c4a6",
        "packagetype": "bdist_wheel",
        "python_version": "cp311",
        "requires_python": null,
        "size": 6316998,
        "upload_time": "2022-11-21T16:21:25",
        "upload_time_iso_8601": "2022-11-21T16:21:25.012089Z",
        "url": "https://files.pythonhosted.org/packages/a7/ea/096b5ffb99a5801475c928d41035240f8af5b1e4dc9b7e720e835667b503/acsylla-0.1.8b0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b8d752e58424164810de4c54c03416688c6cdd32086f30a051d45bfb146cc4a",
          "md5": "c31a0e2f8a8d8c5ab29d0985068799ef",
          "sha256": "c2ffc8676d31b17fbb4a0ff9abbb1dd6228c19658a0d9e7f6fa88821568d8a29"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c31a0e2f8a8d8c5ab29d0985068799ef",
        "packagetype": "bdist_wheel",
        "python_version": "cp311",
        "requires_python": null,
        "size": 6716118,
        "upload_time": "2022-11-21T16:35:08",
        "upload_time_iso_8601": "2022-11-21T16:35:08.914986Z",
        "url": "https://files.pythonhosted.org/packages/2b/8d/752e58424164810de4c54c03416688c6cdd32086f30a051d45bfb146cc4a/acsylla-0.1.8b0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2484124cd01bf3e251e5a9e3165e3fac58329bef367db6685d30a09b7a977173",
          "md5": "ba0a9fc0a09ea237e614203ac5ea83df",
          "sha256": "f130457375653fe1ce72e63a8aa207152255f9da84b534eb089b357014e105a3"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp37-cp37m-macosx_10_15_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ba0a9fc0a09ea237e614203ac5ea83df",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 3653299,
        "upload_time": "2022-11-21T16:35:11",
        "upload_time_iso_8601": "2022-11-21T16:35:11.317091Z",
        "url": "https://files.pythonhosted.org/packages/24/84/124cd01bf3e251e5a9e3165e3fac58329bef367db6685d30a09b7a977173/acsylla-0.1.8b0-cp37-cp37m-macosx_10_15_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "059c187acbddaa95f75d2a88097a5fea1f4bfc86b0d0c1b158ed8bcc2f3d5946",
          "md5": "d86aaf32293c67c5701d1a5c54b862c5",
          "sha256": "597622ea43cbe2e64726b357be27b3bea2e5d06882319754048a97133bb38984"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
        "has_sig": false,
        "md5_digest": "d86aaf32293c67c5701d1a5c54b862c5",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 5997421,
        "upload_time": "2022-11-21T16:21:27",
        "upload_time_iso_8601": "2022-11-21T16:21:27.376127Z",
        "url": "https://files.pythonhosted.org/packages/05/9c/187acbddaa95f75d2a88097a5fea1f4bfc86b0d0c1b158ed8bcc2f3d5946/acsylla-0.1.8b0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86ecf3ae924f40edb6072d28caf46432c2d231a7214462bb920df9fc85524ca5",
          "md5": "c50663e366afdf0f29fb9ab3574118c8",
          "sha256": "7879f7810e88bf1eae70b2e8caed85d59370fb0622ab9a5c790fd666556fcfcd"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c50663e366afdf0f29fb9ab3574118c8",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 6397100,
        "upload_time": "2022-11-21T16:35:13",
        "upload_time_iso_8601": "2022-11-21T16:35:13.377583Z",
        "url": "https://files.pythonhosted.org/packages/86/ec/f3ae924f40edb6072d28caf46432c2d231a7214462bb920df9fc85524ca5/acsylla-0.1.8b0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8813714ecc219561849d71db6965dcfd7c4d9cab8ff49254cd2be393519da7e8",
          "md5": "d1ea8b025a755147b04e50134c7f0ed3",
          "sha256": "ced051ee6b2119e464c9e076fea502baef79d603459b0b8bd8a450dfb423cd27"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp38-cp38-macosx_10_15_x86_64.whl",
        "has_sig": false,
        "md5_digest": "d1ea8b025a755147b04e50134c7f0ed3",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 3659607,
        "upload_time": "2022-11-21T16:35:15",
        "upload_time_iso_8601": "2022-11-21T16:35:15.944083Z",
        "url": "https://files.pythonhosted.org/packages/88/13/714ecc219561849d71db6965dcfd7c4d9cab8ff49254cd2be393519da7e8/acsylla-0.1.8b0-cp38-cp38-macosx_10_15_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e5719c509c32a856c6da904656367cbe98489da5c027ef5d797dba171bd245b",
          "md5": "e2a4f278c8ed00e5a5d90acc2c2b2b53",
          "sha256": "88e84f826cfba2e453fdd6e8a1a88596420744bb1285ab6fe8b06d721ec6dfd2"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
        "has_sig": false,
        "md5_digest": "e2a4f278c8ed00e5a5d90acc2c2b2b53",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 6257061,
        "upload_time": "2022-11-21T16:21:29",
        "upload_time_iso_8601": "2022-11-21T16:21:29.653468Z",
        "url": "https://files.pythonhosted.org/packages/2e/57/19c509c32a856c6da904656367cbe98489da5c027ef5d797dba171bd245b/acsylla-0.1.8b0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24a561a8ebf85d41c51b5de0929c55e1321e868e58f83752fde21ae5238e1cf6",
          "md5": "a50c48a6c49dc328e45167532fe8bbcc",
          "sha256": "a336fdd101e18b50ff05d8cbf9c9a720134cc424c112ced21bc71d0d71670721"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "a50c48a6c49dc328e45167532fe8bbcc",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 6649123,
        "upload_time": "2022-11-21T16:35:18",
        "upload_time_iso_8601": "2022-11-21T16:35:18.458197Z",
        "url": "https://files.pythonhosted.org/packages/24/a5/61a8ebf85d41c51b5de0929c55e1321e868e58f83752fde21ae5238e1cf6/acsylla-0.1.8b0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "748e67c40f57813314eaf26ceb8ac87ba89d42f48af2133fc4393acdc640ecb9",
          "md5": "3b519d18f5208fe54c80e29658654ea8",
          "sha256": "2b8ab2326773b63ecfc563dd74d5d0fbb5c79108f569c180cc91eae0258bb80e"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp39-cp39-macosx_10_15_x86_64.whl",
        "has_sig": false,
        "md5_digest": "3b519d18f5208fe54c80e29658654ea8",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 3662950,
        "upload_time": "2022-11-21T16:35:22",
        "upload_time_iso_8601": "2022-11-21T16:35:22.024934Z",
        "url": "https://files.pythonhosted.org/packages/74/8e/67c40f57813314eaf26ceb8ac87ba89d42f48af2133fc4393acdc640ecb9/acsylla-0.1.8b0-cp39-cp39-macosx_10_15_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffef0aabe2eec20274fa518f9a629741c441e082e424c848c892352231340791",
          "md5": "ff2ffed005eb3a54735be8fcf5ea2e6e",
          "sha256": "03e8c4cd739480ecf4d3815f0bb6bf2d2f3f82354ad7a194d5fdc0a92faf6236"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
        "has_sig": false,
        "md5_digest": "ff2ffed005eb3a54735be8fcf5ea2e6e",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 6209248,
        "upload_time": "2022-11-21T16:21:32",
        "upload_time_iso_8601": "2022-11-21T16:21:32.034601Z",
        "url": "https://files.pythonhosted.org/packages/ff/ef/0aabe2eec20274fa518f9a629741c441e082e424c848c892352231340791/acsylla-0.1.8b0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6280c79232595355f2ffa4400587ba9c618cf7eed56d1a7866d91063f43eb3af",
          "md5": "8320040f5ca976230031942177d68d71",
          "sha256": "238a5525a1e4d35eb1169c548b0a2ba8751bfe0f1443391d3e2f6d2c5660890d"
        },
        "downloads": -1,
        "filename": "acsylla-0.1.8b0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "8320040f5ca976230031942177d68d71",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 6599240,
        "upload_time": "2022-11-21T16:35:24",
        "upload_time_iso_8601": "2022-11-21T16:35:24.338529Z",
        "url": "https://files.pythonhosted.org/packages/62/80/c79232595355f2ffa4400587ba9c618cf7eed56d1a7866d91063f43eb3af/acsylla-0.1.8b0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7e36654968a2ba7dab47e37fbc6489cf74226c57da3d8653dc649220e771c06",
        "md5": "cb7c5e14b1a627a882688cb88397ffa7",
        "sha256": "be9bf15d20dcc10e73dca68f3bceb86835acbdc99a90285fc789b666f811e830"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp310-cp310-macosx_10_15_x86_64.whl",
      "has_sig": false,
      "md5_digest": "cb7c5e14b1a627a882688cb88397ffa7",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 3656940,
      "upload_time": "2022-11-21T16:35:01",
      "upload_time_iso_8601": "2022-11-21T16:35:01.759358Z",
      "url": "https://files.pythonhosted.org/packages/b7/e3/6654968a2ba7dab47e37fbc6489cf74226c57da3d8653dc649220e771c06/acsylla-0.1.8b0-cp310-cp310-macosx_10_15_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c713479a0f08ec75e10669974b4fa8607e2de76e394fd52038e4c0ef6da4c080",
        "md5": "4edfaeb4511d15a75e156ac564163d2d",
        "sha256": "06d1e0cc177de890f21419b8b4d14fd7536f68164a7055668fa15caf6923cb52"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
      "has_sig": false,
      "md5_digest": "4edfaeb4511d15a75e156ac564163d2d",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 6199232,
      "upload_time": "2022-11-21T16:21:22",
      "upload_time_iso_8601": "2022-11-21T16:21:22.285564Z",
      "url": "https://files.pythonhosted.org/packages/c7/13/479a0f08ec75e10669974b4fa8607e2de76e394fd52038e4c0ef6da4c080/acsylla-0.1.8b0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "254aec113ad62da7e4aa73c97904744609bd4f7a7535234099289f721dc00f2c",
        "md5": "68f03b94f8cea078b055e914e798c81a",
        "sha256": "b8c372c2f0acff34f2c166abf218a42d53e92f8ddec02fbc94360bb81bdcd154"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "68f03b94f8cea078b055e914e798c81a",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 6592154,
      "upload_time": "2022-11-21T16:35:04",
      "upload_time_iso_8601": "2022-11-21T16:35:04.093568Z",
      "url": "https://files.pythonhosted.org/packages/25/4a/ec113ad62da7e4aa73c97904744609bd4f7a7535234099289f721dc00f2c/acsylla-0.1.8b0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b977a49da142988cbd6bb8fa31d8d7b9240f45f35e662e87508832ee0fab26ec",
        "md5": "50b2d6d43917df32795fcc8e47826bb0",
        "sha256": "671fdeff28cb44ba418a7ea46b39716d11e0349df681e3fe7d5b0983e35b6154"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp311-cp311-macosx_10_9_universal2.whl",
      "has_sig": false,
      "md5_digest": "50b2d6d43917df32795fcc8e47826bb0",
      "packagetype": "bdist_wheel",
      "python_version": "cp311",
      "requires_python": null,
      "size": 3936283,
      "upload_time": "2022-11-21T16:35:06",
      "upload_time_iso_8601": "2022-11-21T16:35:06.439853Z",
      "url": "https://files.pythonhosted.org/packages/b9/77/a49da142988cbd6bb8fa31d8d7b9240f45f35e662e87508832ee0fab26ec/acsylla-0.1.8b0-cp311-cp311-macosx_10_9_universal2.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7ea096b5ffb99a5801475c928d41035240f8af5b1e4dc9b7e720e835667b503",
        "md5": "cd566a0b41c54c2254012cbc6041c4a6",
        "sha256": "1eaad8dd3dde705f16c251036e48d4954f62d2ff6af95167244aced7e8a0154f"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
      "has_sig": false,
      "md5_digest": "cd566a0b41c54c2254012cbc6041c4a6",
      "packagetype": "bdist_wheel",
      "python_version": "cp311",
      "requires_python": null,
      "size": 6316998,
      "upload_time": "2022-11-21T16:21:25",
      "upload_time_iso_8601": "2022-11-21T16:21:25.012089Z",
      "url": "https://files.pythonhosted.org/packages/a7/ea/096b5ffb99a5801475c928d41035240f8af5b1e4dc9b7e720e835667b503/acsylla-0.1.8b0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b8d752e58424164810de4c54c03416688c6cdd32086f30a051d45bfb146cc4a",
        "md5": "c31a0e2f8a8d8c5ab29d0985068799ef",
        "sha256": "c2ffc8676d31b17fbb4a0ff9abbb1dd6228c19658a0d9e7f6fa88821568d8a29"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c31a0e2f8a8d8c5ab29d0985068799ef",
      "packagetype": "bdist_wheel",
      "python_version": "cp311",
      "requires_python": null,
      "size": 6716118,
      "upload_time": "2022-11-21T16:35:08",
      "upload_time_iso_8601": "2022-11-21T16:35:08.914986Z",
      "url": "https://files.pythonhosted.org/packages/2b/8d/752e58424164810de4c54c03416688c6cdd32086f30a051d45bfb146cc4a/acsylla-0.1.8b0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2484124cd01bf3e251e5a9e3165e3fac58329bef367db6685d30a09b7a977173",
        "md5": "ba0a9fc0a09ea237e614203ac5ea83df",
        "sha256": "f130457375653fe1ce72e63a8aa207152255f9da84b534eb089b357014e105a3"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp37-cp37m-macosx_10_15_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ba0a9fc0a09ea237e614203ac5ea83df",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 3653299,
      "upload_time": "2022-11-21T16:35:11",
      "upload_time_iso_8601": "2022-11-21T16:35:11.317091Z",
      "url": "https://files.pythonhosted.org/packages/24/84/124cd01bf3e251e5a9e3165e3fac58329bef367db6685d30a09b7a977173/acsylla-0.1.8b0-cp37-cp37m-macosx_10_15_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "059c187acbddaa95f75d2a88097a5fea1f4bfc86b0d0c1b158ed8bcc2f3d5946",
        "md5": "d86aaf32293c67c5701d1a5c54b862c5",
        "sha256": "597622ea43cbe2e64726b357be27b3bea2e5d06882319754048a97133bb38984"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
      "has_sig": false,
      "md5_digest": "d86aaf32293c67c5701d1a5c54b862c5",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 5997421,
      "upload_time": "2022-11-21T16:21:27",
      "upload_time_iso_8601": "2022-11-21T16:21:27.376127Z",
      "url": "https://files.pythonhosted.org/packages/05/9c/187acbddaa95f75d2a88097a5fea1f4bfc86b0d0c1b158ed8bcc2f3d5946/acsylla-0.1.8b0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86ecf3ae924f40edb6072d28caf46432c2d231a7214462bb920df9fc85524ca5",
        "md5": "c50663e366afdf0f29fb9ab3574118c8",
        "sha256": "7879f7810e88bf1eae70b2e8caed85d59370fb0622ab9a5c790fd666556fcfcd"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c50663e366afdf0f29fb9ab3574118c8",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 6397100,
      "upload_time": "2022-11-21T16:35:13",
      "upload_time_iso_8601": "2022-11-21T16:35:13.377583Z",
      "url": "https://files.pythonhosted.org/packages/86/ec/f3ae924f40edb6072d28caf46432c2d231a7214462bb920df9fc85524ca5/acsylla-0.1.8b0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8813714ecc219561849d71db6965dcfd7c4d9cab8ff49254cd2be393519da7e8",
        "md5": "d1ea8b025a755147b04e50134c7f0ed3",
        "sha256": "ced051ee6b2119e464c9e076fea502baef79d603459b0b8bd8a450dfb423cd27"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp38-cp38-macosx_10_15_x86_64.whl",
      "has_sig": false,
      "md5_digest": "d1ea8b025a755147b04e50134c7f0ed3",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 3659607,
      "upload_time": "2022-11-21T16:35:15",
      "upload_time_iso_8601": "2022-11-21T16:35:15.944083Z",
      "url": "https://files.pythonhosted.org/packages/88/13/714ecc219561849d71db6965dcfd7c4d9cab8ff49254cd2be393519da7e8/acsylla-0.1.8b0-cp38-cp38-macosx_10_15_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e5719c509c32a856c6da904656367cbe98489da5c027ef5d797dba171bd245b",
        "md5": "e2a4f278c8ed00e5a5d90acc2c2b2b53",
        "sha256": "88e84f826cfba2e453fdd6e8a1a88596420744bb1285ab6fe8b06d721ec6dfd2"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
      "has_sig": false,
      "md5_digest": "e2a4f278c8ed00e5a5d90acc2c2b2b53",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 6257061,
      "upload_time": "2022-11-21T16:21:29",
      "upload_time_iso_8601": "2022-11-21T16:21:29.653468Z",
      "url": "https://files.pythonhosted.org/packages/2e/57/19c509c32a856c6da904656367cbe98489da5c027ef5d797dba171bd245b/acsylla-0.1.8b0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24a561a8ebf85d41c51b5de0929c55e1321e868e58f83752fde21ae5238e1cf6",
        "md5": "a50c48a6c49dc328e45167532fe8bbcc",
        "sha256": "a336fdd101e18b50ff05d8cbf9c9a720134cc424c112ced21bc71d0d71670721"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "a50c48a6c49dc328e45167532fe8bbcc",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 6649123,
      "upload_time": "2022-11-21T16:35:18",
      "upload_time_iso_8601": "2022-11-21T16:35:18.458197Z",
      "url": "https://files.pythonhosted.org/packages/24/a5/61a8ebf85d41c51b5de0929c55e1321e868e58f83752fde21ae5238e1cf6/acsylla-0.1.8b0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "748e67c40f57813314eaf26ceb8ac87ba89d42f48af2133fc4393acdc640ecb9",
        "md5": "3b519d18f5208fe54c80e29658654ea8",
        "sha256": "2b8ab2326773b63ecfc563dd74d5d0fbb5c79108f569c180cc91eae0258bb80e"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp39-cp39-macosx_10_15_x86_64.whl",
      "has_sig": false,
      "md5_digest": "3b519d18f5208fe54c80e29658654ea8",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 3662950,
      "upload_time": "2022-11-21T16:35:22",
      "upload_time_iso_8601": "2022-11-21T16:35:22.024934Z",
      "url": "https://files.pythonhosted.org/packages/74/8e/67c40f57813314eaf26ceb8ac87ba89d42f48af2133fc4393acdc640ecb9/acsylla-0.1.8b0-cp39-cp39-macosx_10_15_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffef0aabe2eec20274fa518f9a629741c441e082e424c848c892352231340791",
        "md5": "ff2ffed005eb3a54735be8fcf5ea2e6e",
        "sha256": "03e8c4cd739480ecf4d3815f0bb6bf2d2f3f82354ad7a194d5fdc0a92faf6236"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
      "has_sig": false,
      "md5_digest": "ff2ffed005eb3a54735be8fcf5ea2e6e",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 6209248,
      "upload_time": "2022-11-21T16:21:32",
      "upload_time_iso_8601": "2022-11-21T16:21:32.034601Z",
      "url": "https://files.pythonhosted.org/packages/ff/ef/0aabe2eec20274fa518f9a629741c441e082e424c848c892352231340791/acsylla-0.1.8b0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6280c79232595355f2ffa4400587ba9c618cf7eed56d1a7866d91063f43eb3af",
        "md5": "8320040f5ca976230031942177d68d71",
        "sha256": "238a5525a1e4d35eb1169c548b0a2ba8751bfe0f1443391d3e2f6d2c5660890d"
      },
      "downloads": -1,
      "filename": "acsylla-0.1.8b0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "8320040f5ca976230031942177d68d71",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 6599240,
      "upload_time": "2022-11-21T16:35:24",
      "upload_time_iso_8601": "2022-11-21T16:35:24.338529Z",
      "url": "https://files.pythonhosted.org/packages/62/80/c79232595355f2ffa4400587ba9c618cf7eed56d1a7866d91063f43eb3af/acsylla-0.1.8b0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}