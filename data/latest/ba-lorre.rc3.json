{
  "info": {
    "author": "Luca Baronti",
    "author_email": "lbaronti@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# BA-LORRE\n\nA Python implementation of the **B**ees **A**lgorithm based **L**ocal **O**ptima **R**egion **R**adius **E**xtimator. \nMost of the intelligenent numerical optimization algorithms available are only made to find the global optimum of a given function. \nIn contrast, the BA-LORRE is a swarm computation algorithm designed to find *several* local optima, avoiding already explored regions during the search.\n\nThe algorithm exploits the [search properties](https://www.sciencedirect.com/science/article/abs/pii/S2210650220303990?via%3Dihub) of the [Bees Algorithm](https://gitlab.com/luca.baronti/ba_lorre) to identify the position and radius of local optima region in a non-parametric way. Once identified, the local score of those regions is lowered, allowing the algorithm to focus furture search to unexplored regions.\n\n| | |\n|:-------------------------:|:-------------------------:|\n|<img src=\"https://gitlab.com/luca.baronti/ba_lorre/-/raw/master/pics/iterations_0.png\">  |  <img src=\"https://gitlab.com/luca.baronti/ba_lorre/-/raw/master/pics/iterations_1.png\"> |\n|<img src=\"https://gitlab.com/luca.baronti/ba_lorre/-/raw/master/pics/iterations_2.png\">  |  <img src=\"https://gitlab.com/luca.baronti/ba_lorre/-/raw/master/pics/iterations_3.png\"> |\n\nThis library allows an off-the-shelf use of the algorithm to find the best local optima of an user-defined target function.\n\n![solutions](https://gitlab.com/luca.baronti/ba_lorre/-/raw/master/pics/lorre_solutions.png)\n\n## Reference\nFor details on the inner working of the BA-LORRE algorithm, how it's related on the Bess Algorithm and how the optima regions are found, please refer to [this work](https://etheses.bham.ac.uk/id/eprint/10094/7/Baronti2020PhD.pdf).  \n\nIf you are using this implementation of the BA-LORRE for your research, feel free to cite this work in your paper using the following BibTex entry:\n```bibtex\n@article{baronti2020analysis,\n  title={An Analysis of the Search Mechanisms of the Bees Algorithm},\n  author={Baronti, Luca and Castellani, Marco and Pham, Duc Truong},\n  journal={Swarm and Evolutionary Computation},\n  volume={59},\n  pages={100746},\n  year={2020},\n  publisher={Elsevier},\n  doi={10.1016/j.swevo.2020.100746},\n  url={https://doi.org/10.1016/j.swevo.2020.100746}\n}\n```\n\n# Installation\n\nThis module is available on [pip](https://pypi.org/project/ba-lorre) and can be installed as follows:\n```sh\n$ pip3 install ba_lorre\n```\n# Usage and Guidelines\nAs an extension of the original Bees Algorithm, the BA-LORRE shares most of the interface and mirrors its general usage. \n\nThe main class, `LORRE`, has the following signature (mandatory parameters in **bold**):\n- **score_function**`: Callable[[list], float]` the function that need to be optimised. It can either be a (lambda) function or a class that overrides the `__call__` function. Either way, `score_function(solution: list) -> float` needs to take a single parameter, a list of *N* `float` representing a position in the search space, and returns the score relative to that position; \n- **range_min**`: list` list of *N* `float`, indicating the lower bound of the search space; \n- **range_max**`: list` list of *N* `float`, indicating the upper bound of the search space; \n- *nb*`: int` number of *sites*;\n- *nrb*`: int` number of solutions sampled around each site, per iteration;\n- *stlim*`: int` stagnation limit, the number of iteration required to abandon a site if no local progress is made;\n- *initial_ngh*`: list` the neighbourhood used for the local search in a site;\n- *shrink_factor*`: float` how much a neighbourhood must be shrunk per every iteration that its centre is not updated; \n- *derating_radius_selection_criterion*`: str` the criterion used to identify the optima region radius. Allowed values are *median* and *topological*;\n- *derating_type*`: str` the shape of penalty that will apply on every found region. Allowed values are *flat* and *linear*;\n\nIn this context *N* is the number of dimensions of the score function to be optimized. At each iteration *nb* x *nrb* solutions are evaluated in the search space.\nExamples of scores functions that can be used as a benchmark can be found in [this library](https://gitlab.com/luca.baronti/python_benchmark_functions).\n\nPlease note that for simplicity this algorithm solves a *maximization* problem. \nIf you need to minimize a function, please provide the *opposite* of the function (i.e. *g(x)=-f(x)*) to the algorithm.\nThe found solutions won't be affected.\n\nPlease refer to the Bees Algorithm [documentation](https://gitlab.com/luca.baronti/ba_lorre/-/blob/master/README.md) for further details.\n## Initialization\nThe algorithm is first instantiated (as an example, here we are using a simple hyperbolic function to be optimized)\n```python\nfrom ba_lorre import LORRE\n\nalg = LORRE(lambda x: -pow(x[0]*x[1],2),\n            range_min=[-100, -100],\n            range_max=[100, 100],\n            nb=5, nrb=20, stlim=20,\n            derating_radius_selection_criterion='median',\n            derating_type='linear')\n```\n## Optimization\nThen the optimisation itself can be performed in different ways. The most simple method is calling `performFullOptimisation` specifying either the maximum number of iterations or the maximum score wanted as stopping criterion.\n```python\n>>> alg.performFullOptimisation(max_iteration=50)\n(50, -3.4228945713694973e-11)\n```\nThis returns the number of iterations required and the score of the best solution found. \n\nAlternatively, more control on the optimization process can achieved performing one iteration at a time this way:\n```python\nalg.performSingleStep()\n```\nFor score functions with 2 dimensions is possible to visualize the iterations of the algorithm calling\n```python\nalg.visualize_iteration_steps()\n```\nThis is often used for demonstration, debugging and to get a better insight on the algorithm dynamics. \nAll the figures in this readme have been taken this way.\n\n## Found Optima Handling\nThe aim of the algorithm is to return the best local optima of a function. \nOnce the optimization process is terminated the found optima can be collected with\n```python\nalg.getFoundOptima()\n```\nwhich will return the position of the found optima.\n\nFor score functions with 2 dimensions is possible to visualize the found optima directly on the function's surface with:\n```python\nalg.showFoundOptima()\n```\n![solutions](https://gitlab.com/luca.baronti/ba_lorre/-/raw/master/pics/lorre_solutions.png)\nEither way, a list of *pruning* criteria can be passed to filter the found optima.\n\n### Pruning Criteria\nThe algorithm has no prior information on how many local optima the score function is supposed to have.\nAs a result, spurious and redundant optima can be returned. \n\nFor this reason, this library comes with a set of pruning functions that can be passed to `getFoundOptima` or `showFoundOptima` to eliminate solutions that are unlikely to be a good approximation of real optima.\nAvailable pruning classes are:\n- **PruningProximity** putative optima that have been generated at the same time in the same region of an optimum of higher score are removed;\n- **PruningAbsScoreCutoff** putative optima with a score lower than the *cutoff* parameter, are removed;\n- **PruningPercScoreCutoff** putative optima with a score lower than *cutoff*% of the other optima are removed;\n\nAny number of pruning criteria can be combined:\n```python\nfrom ba_lorre import PruningProximity, PruningPercScoreCutoff\n\nalg.getFoundOptima(pruning_functions=[PruningProximity(), PruningPercScoreCutoff(cutoff=.5)])\n```\nThe `PruningAbsScoreCutoff` and `PruningPercScoreCutoff` pruning criteria require insight on the optima distribution to be used properly. \nTo help the practitioner a convenience function to visualize the optima score distribution is provided:\n```python\nalg.showOptimaScoreHistogram()\n```\n![solutions](https://gitlab.com/luca.baronti/ba_lorre/-/raw/master/pics/sol_distr.png)\n\n\n\n# Versions History\n\n## v1.0.2\n- minor fix with a parameters hint\n\n## v1.0.1\n- minor visual fixes for pypi\n\n## v1.0.0\n- first release\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/ba_lorre/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/luca.baronti/ba_lorre",
    "keywords": "Optimisation,Optimization,Bees Algorithm,Intelligent Optimisation,LORRE",
    "license": "GNUv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ba-lorre",
    "package_url": "https://pypi.org/project/ba-lorre/",
    "platform": null,
    "project_url": "https://pypi.org/project/ba-lorre/",
    "project_urls": {
      "Download": "https://pypi.org/project/ba_lorre/",
      "Homepage": "https://gitlab.com/luca.baronti/ba_lorre"
    },
    "release_url": "https://pypi.org/project/ba-lorre/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python implementation of the Bees Algorithm based Local Optima Region Radius Extimator (BA-LORRE). This library allows an out-of-the-box use of the numerical optimisation algorithm on an user-defined target function. The algorithm can be configured to find the maxima of the target function with an iterative process.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16526898,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbc167f92f1307d72f9a93f1b473dbb317d1a8f6368cc4091cb64c59038eaf76",
          "md5": "efad8b669ee9966b7639948f6a188c23",
          "sha256": "5fce4d51432492c364b0bc7113afe34b5686e157eeccbd2649d79a8d861ed57e"
        },
        "downloads": -1,
        "filename": "ba_lorre-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "efad8b669ee9966b7639948f6a188c23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22127,
        "upload_time": "2023-01-22T23:55:40",
        "upload_time_iso_8601": "2023-01-22T23:55:40.195457Z",
        "url": "https://files.pythonhosted.org/packages/db/c1/67f92f1307d72f9a93f1b473dbb317d1a8f6368cc4091cb64c59038eaf76/ba_lorre-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00feeb6bc00d1316751da198e9dd4c211d9be5bc1a69730964e05eb99ad986c5",
          "md5": "3e15644dfeb13a4bdbf7e71c5d274833",
          "sha256": "04b0a1db904f86c148ae789292e2871e58148fe7e4297c98a48e79e0dd2b3c76"
        },
        "downloads": -1,
        "filename": "ba_lorre-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3e15644dfeb13a4bdbf7e71c5d274833",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24565,
        "upload_time": "2023-01-22T23:55:42",
        "upload_time_iso_8601": "2023-01-22T23:55:42.336283Z",
        "url": "https://files.pythonhosted.org/packages/00/fe/eb6bc00d1316751da198e9dd4c211d9be5bc1a69730964e05eb99ad986c5/ba_lorre-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "175d250e393f5bb130e28d7b34056dfc578197b2e19d1a35dea6c89ff86d3e69",
          "md5": "ba8b2fdb9ee0138e5d07c020fda60677",
          "sha256": "6d1ce37e33fe12a72c7523447462738883404d2c354fc6ff4b91114245c45b73"
        },
        "downloads": -1,
        "filename": "ba_lorre-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba8b2fdb9ee0138e5d07c020fda60677",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22149,
        "upload_time": "2023-01-23T00:16:02",
        "upload_time_iso_8601": "2023-01-23T00:16:02.243750Z",
        "url": "https://files.pythonhosted.org/packages/17/5d/250e393f5bb130e28d7b34056dfc578197b2e19d1a35dea6c89ff86d3e69/ba_lorre-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "def7db481508043e8a4dbc0bacce7a5f724a896cb4bdba7059915e932eb3949b",
          "md5": "0af16dc23957a993811641a194592b37",
          "sha256": "6ad8671363eeae0395b48afbd0412bf591b4ff3ad05dd90b988012f18783fd98"
        },
        "downloads": -1,
        "filename": "ba_lorre-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0af16dc23957a993811641a194592b37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24611,
        "upload_time": "2023-01-23T00:16:04",
        "upload_time_iso_8601": "2023-01-23T00:16:04.435599Z",
        "url": "https://files.pythonhosted.org/packages/de/f7/db481508043e8a4dbc0bacce7a5f724a896cb4bdba7059915e932eb3949b/ba_lorre-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fde4a6cf86ca2c4787d5e0aca048176c3adb564636aa4c7a3baaddbf0077f1d1",
          "md5": "8531844b726865e8c9ee4dddc56bc4ca",
          "sha256": "3e7b0a21141087473ef5b5201f129c6358d56632f86fc1dbdd86ec2f1fda25ee"
        },
        "downloads": -1,
        "filename": "ba_lorre-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8531844b726865e8c9ee4dddc56bc4ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22160,
        "upload_time": "2023-01-23T00:35:28",
        "upload_time_iso_8601": "2023-01-23T00:35:28.484812Z",
        "url": "https://files.pythonhosted.org/packages/fd/e4/a6cf86ca2c4787d5e0aca048176c3adb564636aa4c7a3baaddbf0077f1d1/ba_lorre-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18fa6747d9f7b8457ae045f4effd43a97fe0cd589f4fe12deb4f262692e84837",
          "md5": "1fe3ff847f398fa159183d3e5534f3e8",
          "sha256": "6804294783d33f6e5d28661bf3773fd6374f37b02a20fdeb4d8600c7191b5225"
        },
        "downloads": -1,
        "filename": "ba_lorre-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1fe3ff847f398fa159183d3e5534f3e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24642,
        "upload_time": "2023-01-23T00:35:30",
        "upload_time_iso_8601": "2023-01-23T00:35:30.477614Z",
        "url": "https://files.pythonhosted.org/packages/18/fa/6747d9f7b8457ae045f4effd43a97fe0cd589f4fe12deb4f262692e84837/ba_lorre-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fde4a6cf86ca2c4787d5e0aca048176c3adb564636aa4c7a3baaddbf0077f1d1",
        "md5": "8531844b726865e8c9ee4dddc56bc4ca",
        "sha256": "3e7b0a21141087473ef5b5201f129c6358d56632f86fc1dbdd86ec2f1fda25ee"
      },
      "downloads": -1,
      "filename": "ba_lorre-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8531844b726865e8c9ee4dddc56bc4ca",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22160,
      "upload_time": "2023-01-23T00:35:28",
      "upload_time_iso_8601": "2023-01-23T00:35:28.484812Z",
      "url": "https://files.pythonhosted.org/packages/fd/e4/a6cf86ca2c4787d5e0aca048176c3adb564636aa4c7a3baaddbf0077f1d1/ba_lorre-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18fa6747d9f7b8457ae045f4effd43a97fe0cd589f4fe12deb4f262692e84837",
        "md5": "1fe3ff847f398fa159183d3e5534f3e8",
        "sha256": "6804294783d33f6e5d28661bf3773fd6374f37b02a20fdeb4d8600c7191b5225"
      },
      "downloads": -1,
      "filename": "ba_lorre-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1fe3ff847f398fa159183d3e5534f3e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24642,
      "upload_time": "2023-01-23T00:35:30",
      "upload_time_iso_8601": "2023-01-23T00:35:30.477614Z",
      "url": "https://files.pythonhosted.org/packages/18/fa/6747d9f7b8457ae045f4effd43a97fe0cd589f4fe12deb4f262692e84837/ba_lorre-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}