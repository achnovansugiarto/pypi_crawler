{
  "info": {
    "author": "Gaurav Singh",
    "author_email": "guarav.s@hotstar.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "celery-sqlalchemy-scheduler\n##############################\n\nA Scheduler Based Sqlalchemy for Celery.\n\nGetting Started\n********************\n\n\\ `English <./README.rst>`_ \\\n\\ `中文文档 <./README-zh.md>`_ \\\n\n\nPrerequisites\n++++++++++++++\n\n- Python 3\n- celery >= 4.2.0\n- sqlalchemy\n\nFirst you must install ``celery`` and ``sqlalchemy``, and ``celery`` should be >=4.2.0.\n\n.. code:: PowerShell\n\n    $ pip install celery\n    $ pip install sqlalchemy\n\n\nInstalling\n++++++++++++++\n\nInstall from PyPi\n\n.. code:: PowerShell\n\n    $ pip install celery-sqlalchemy-scheduler\n\nInstall from source by cloning this repository\n\n.. code:: PowerShell\n\n    $ git clone git@github.com:AngelLiang/celery-sqlalchemy-scheduler.git\n    $ cd celery-sqlalchemy-scheduler\n    $ python setup.py install\n\n\nUsage\n*******\n\nAfter you have installed ``celery_sqlalchemy_scheduler`` , you can easily start with following steps:\n\nThis is a demo for exmaple, you can check the code in ``examples`` directory\n\n1. start celery worker\n\n    .. code:: PowerShell\n\n        $ celery worker -A tasks -l info\n   \n\n2. start the celery beat with ``DatabaseScheduler`` as scheduler\n\n    .. code:: PowerShell\n\n        $ celery beat -A tasks -S celery_sqlalchemy_scheduler.schedulers:DatabaseScheduler -l info\n\n\n\nDescription\n*************\n\nAfter the celery beat is started, by default it create a sqlite database(`schedule.db`) in current folder. \nYou can use `SQLiteStudio.exe` to inspect it.\n\n.. image:: screenshot/sqlite.png\n\nWhen you want to update scheduler, you can update the data in ``schedule.db``. \nBut ``celery_sqlalchemy_scheduler`` don't update the scheduler immediately. \nThen you shoule be change the first column's ``last_update`` field in the \n``celery_periodic_task_changed`` to now datetime. Finally the celery beat \nwill update scheduler at next wake-up time.\n\n\n\nDatabase Configuration\n+++++++++++++++++++++++++\n\nYou can configure sqlalchemy db uri when you configure the celery, example as:\n\n.. code:: Python\n\n    from celery import Celery\n\n    celery = Celery('tasks')\n\n    beat_dburi = 'sqlite:///schedule.db'\n\n    celery.conf.update(\n        {'beat_dburi': beat_dburi}\n    )\n\n\nAlso, you can use MySQL or PostgreSQL.\n\n.. code:: Python\n\n    # MySQL: `pip install mysql-connector`\n    beat_dburi = 'mysql+mysqlconnector://root:root@127.0.0.1:3306/celery-schedule'\n\n    # PostgreSQL: `pip install psycopg2`\n    beat_dburi = 'postgresql+psycopg2://postgres:postgres@127.0.0.1:5432/celery-schedule'\n\n\n\nExample Code\n*****************\n\nExample creating interval-based periodic task\n+++++++++++++++++++++++++++++++++++++++++++++++\n\nTo create a periodic task executing at an interval you must first\ncreate the interval object:\n\n.. code:: Python\n\n    >>> from celery_sqlalchemy_scheduler.models import PeriodicTask, IntervalSchedule\n    >>> from celery_sqlalchemy_scheduler.session import SessionManager\n    >>> from celeryconfig import beat_dburi\n    >>> session_manager = SessionManager()\n    >>> session = session_manager.session_factory(dburi=beat_dburi)\n\n    # executes every 10 seconds.\n    >>> schedule = session.query(IntervalSchedule).filter_by(every=10, period=IntervalSchedule.SECONDS).first()\n    >>> if not schedule:\n    ...     schedule = IntervalSchedule(every=10, period=IntervalSchedule.SECONDS)\n    ...     session.add(schedule)\n    ...     session.commit()\n\n\nThat's all the fields you need: a period type and the frequency.\n\nYou can choose between a specific set of periods:\n\n- ``IntervalSchedule.DAYS``\n- ``IntervalSchedule.HOURS``\n- ``IntervalSchedule.MINUTES``\n- ``IntervalSchedule.SECONDS``\n- ``IntervalSchedule.MICROSECONDS``\n\n*note*:\n\n    If you have multiple periodic tasks executing every 10 seconds,\n    then they should all point to the same schedule object.\n\nNow that we have defined the schedule object, we can create the periodic task\nentry:\n\n.. code:: Python\n\n    >>> task = PeriodicTask(\n    ...     interval=schedule,                  # we created this above.\n    ...     name='Importing contacts',          # simply describes this periodic task.\n    ...     task='proj.tasks.import_contacts',  # name of task.\n    ... )\n    >>> session.add(task)\n    >>> session.commit()\n\n\nNote that this is a very basic example, you can also specify the\narguments and keyword arguments used to execute the task, the ``queue`` to\nsend it to[\\*], and set an expiry time.\n\nHere\\'s an example specifying the arguments, note how JSON serialization\nis required:\n\n.. code:: Python\n\n    >>> import json\n    >>> from datetime import datetime, timedelta\n\n    >>> periodic_task = PeriodicTask(\n    ...     interval=schedule,                  # we created this above.\n    ...     name='Importing contacts',          # simply describes this periodic task.\n    ...     task='proj.tasks.import_contacts',  # name of task.\n    ...     args=json.dumps(['arg1', 'arg2']),\n    ...     kwargs=json.dumps({'be_careful': True}),\n    ...     expires=datetime.utcnow() + timedelta(seconds=30)\n    ... )\n    >>> session.add(periodic_task)\n    >>> session.commit()\n\n\nExample creating crontab-based periodic task\n===============================================\n\nA crontab schedule has the fields: ``minute`` , ``hour`` , ``day_of_week`` ,\n``day_of_month`` and ``month_of_year``, so if you want the equivalent of a\n``30 * * * *`` (execute every 30 minutes) crontab entry you specify:\n\n.. code:: Python\n\n    >>> from celery_sqlalchemy_scheduler.models import PeriodicTask, CrontabSchedule\n    >>> import pytz\n    >>> schedule = CrontabSchedule(\n    ...     minute='30',\n    ...     hour='*',\n    ...     day_of_week='*',\n    ...     day_of_month='*',\n    ...     month_of_year='*',\n    ...     timezone=pytz.timezone('Asia/Shanghai')\n    ... )\n\nThe crontab schedule is linked to a specific timezone using the\n'timezone' input parameter.\n\nThen to create a periodic task using this schedule, use the same\napproach as the interval-based periodic task earlier in this document,\nbut instead of ``interval=schedule`` , specify ``crontab=schedule``\n\n.. code:: Python\n\n    >>> periodic_task = PeriodicTask(\n    ...     crontab=schedule,\n    ...     name='Importing contacts',\n    ...     task='proj.tasks.import_contacts',\n    ... )\n    >>> session.add(periodic_task)\n    >>> session.commit()\n\n\n\nTemporarily disable a periodic task\n=========================================\n\nYou can use the `enabled` flag to temporarily disable a periodic task:\n\n.. code:: Python\n\n    >>> periodic_task.enabled = False\n    >>> session.add(periodic_task)\n    >>> session.commit()\n\n\nExample running periodic tasks\n=========================================\n\nThe periodic tasks still need 'workers' to execute them. So make sure\nthe default **Celery** package is installed. (If not installed, please\nfollow the installation instructions here:\n<https://github.com/celery/celery>)\n\nBoth the worker and beat services need to be running at the same time.\n\n1.  Start a Celery worker service (specify your project name):\n\n    .. code:: PowerShell\n\n        $ celery -A [project-name] worker --loglevel=info\n\n2.  As a separate process, start the beat service (specify the \n    scheduler):\n\n    .. code:: PowerShell\n\n        $ celery -A [project-name] beat -l info --scheduler celery_sqlalchemy_scheduler.schedulers:DatabaseScheduler\n\n\n\nAcknowledgments\n***********************\n\n- \\ `django-celery-beat <https://github.com/celery/django-celery-beat>`_\\\n- \\ `celerybeatredis <https://github.com/liuliqiang/celerybeatredis>`_\\\n- \\ `celery <https://github.com/celery/celery>`_\\",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gsingh42/celery-sqlalchemy-scheduler",
    "keywords": "celery scheduler sqlalchemy beat",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "celery-sqlalchemy-scheduler-hotstar",
    "package_url": "https://pypi.org/project/celery-sqlalchemy-scheduler-hotstar/",
    "platform": "any",
    "project_url": "https://pypi.org/project/celery-sqlalchemy-scheduler-hotstar/",
    "project_urls": {
      "Homepage": "https://github.com/gsingh42/celery-sqlalchemy-scheduler"
    },
    "release_url": "https://pypi.org/project/celery-sqlalchemy-scheduler-hotstar/0.2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Scheduler Based SQLalchemy For Celery",
    "version": "0.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7285608,
  "releases": {
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f60f4c68fd2b5e004210f7524c97967ba600c2410315dd79a03548e634a8520",
          "md5": "dd3f558f547d5c830e6101e1102b3afd",
          "sha256": "a05f744f5d510696d5a8a68aa67f5181571a25e018583eb4caf520feb1c6cc10"
        },
        "downloads": -1,
        "filename": "celery_sqlalchemy_scheduler_hotstar-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dd3f558f547d5c830e6101e1102b3afd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15167,
        "upload_time": "2020-05-20T12:28:35",
        "upload_time_iso_8601": "2020-05-20T12:28:35.376915Z",
        "url": "https://files.pythonhosted.org/packages/5f/60/f4c68fd2b5e004210f7524c97967ba600c2410315dd79a03548e634a8520/celery_sqlalchemy_scheduler_hotstar-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f60f4c68fd2b5e004210f7524c97967ba600c2410315dd79a03548e634a8520",
        "md5": "dd3f558f547d5c830e6101e1102b3afd",
        "sha256": "a05f744f5d510696d5a8a68aa67f5181571a25e018583eb4caf520feb1c6cc10"
      },
      "downloads": -1,
      "filename": "celery_sqlalchemy_scheduler_hotstar-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "dd3f558f547d5c830e6101e1102b3afd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15167,
      "upload_time": "2020-05-20T12:28:35",
      "upload_time_iso_8601": "2020-05-20T12:28:35.376915Z",
      "url": "https://files.pythonhosted.org/packages/5f/60/f4c68fd2b5e004210f7524c97967ba600c2410315dd79a03548e634a8520/celery_sqlalchemy_scheduler_hotstar-0.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}