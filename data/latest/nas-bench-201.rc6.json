{
  "info": {
    "author": "Xuanyi Dong",
    "author_email": "dongxuanyi888@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Topic :: Database",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# NAS-BENCH-201 has been extended to [NATS-Bench](https://xuanyidong.com/assets/projects/NATS-Bench)\n\n**Since our NAS-BENCH-201 has been extended to NATS-Bench, this repo is deprecated and not maintained. Please use [NATS-Bench](https://github.com/D-X-Y/NATS-Bench), which has 5x more architecture information and faster API than NAS-BENCH-201.**\n\n# [NAS-BENCH-201: Extending the Scope of Reproducible Neural Architecture Search](https://openreview.net/forum?id=HJxyZkBKDr)\n\nWe propose an algorithm-agnostic NAS benchmark (NAS-Bench-201) with a fixed search space, which provides a unified benchmark for almost any up-to-date NAS algorithms.\nThe design of our search space is inspired by that used in the most popular cell-based searching algorithms, where a cell is represented as a directed acyclic graph.\nEach edge here is associated with an operation selected from a predefined operation set.\nFor it to be applicable for all NAS algorithms, the search space defined in NAS-Bench-201 includes 4 nodes and 5 associated operation options, which generates 15,625 neural cell candidates in total.\n\nIn this Markdown file, we provide:\n- [How to Use NAS-Bench-201](#how-to-use-nas-bench-201)\n\nFor the following two things, please use [AutoDL-Projects](https://github.com/D-X-Y/AutoDL-Projects):\n- [Instruction to re-generate NAS-Bench-201](#instruction-to-re-generate-nas-bench-201)\n- [10 NAS algorithms evaluated in our paper](#to-reproduce-10-baseline-nas-algorithms-in-nas-bench-201)\n\nNote: please use `PyTorch >= 1.2.0` and `Python >= 3.6.0`.\n\nYou can simply type `pip install nas-bench-201` to install our api. Please see source codes of `nas-bench-201` module in [this repo](https://github.com/D-X-Y/NAS-Bench-201).\n\n**If you have any questions or issues, please post it at [here](https://github.com/D-X-Y/AutoDL-Projects/issues) or email me.**\n\n### Preparation and Download\n\n[deprecated] The **old** benchmark file of NAS-Bench-201 can be downloaded from [Google Drive](https://drive.google.com/file/d/1SKW0Cu0u8-gb18zDpaAGi0f74UdXeGKs/view?usp=sharing) or [Baidu-Wangpan (code:6u5d)](https://pan.baidu.com/s/1CiaNH6C12zuZf7q-Ilm09w).\n\n[recommended] The **latest** benchmark file of NAS-Bench-201 (`NAS-Bench-201-v1_1-096897.pth`) can be downloaded from [Google Drive](https://drive.google.com/file/d/16Y0UwGisiouVRxW-W5hEtbxmcHw_0hF_/view?usp=sharing). The files for model weight are too large (431G) and I need some time to upload it. Please be patient, thanks for your understanding.\n\nYou can move it to anywhere you want and send its path to our API for initialization.\n- [2020.02.25] APIv1.0/FILEv1.0: [`NAS-Bench-201-v1_0-e61699.pth`](https://drive.google.com/open?id=1SKW0Cu0u8-gb18zDpaAGi0f74UdXeGKs) (2.2G), where `e61699` is the last six digits for this file. It contains all information except for the trained weights of each trial.\n- [2020.02.25] APIv1.0/FILEv1.0: The full data of each architecture can be download from [\nNAS-BENCH-201-4-v1.0-archive.tar](https://drive.google.com/open?id=1X2i-JXaElsnVLuGgM4tP-yNwtsspXgdQ) (about 226GB). This compressed folder has 15625 files containing the the trained weights.\n- [2020.02.25] APIv1.0/FILEv1.0: Checkpoints for 3 runs of each baseline NAS algorithm are provided in [Google Drive](https://drive.google.com/open?id=1eAgLZQAViP3r6dA0_ZOOGG9zPLXhGwXi).\n- [2020.03.09] APIv1.2/FILEv1.0: More robust API with more functions and descriptions\n- [2020.03.16] APIv1.3/FILEv1.1: [`NAS-Bench-201-v1_1-096897.pth`](https://drive.google.com/open?id=16Y0UwGisiouVRxW-W5hEtbxmcHw_0hF_) (4.7G), where `096897` is the last six digits for this file. It contains information of more trials compared to `NAS-Bench-201-v1_0-e61699.pth`, especially all models trained by 12 epochs on all datasets are avaliable.\n- [2020.06.30] APIv2.0: Use abstract class (NASBenchMetaAPI) for APIs of NAS-Bench-x0y.\n- [2020.06.30] FILEv2.0: coming soon!\n\n**We recommend to use `NAS-Bench-201-v1_1-096897.pth`**\n\n\nThe training and evaluation data used in NAS-Bench-201 can be downloaded from [Google Drive](https://drive.google.com/open?id=1L0Lzq8rWpZLPfiQGd6QR8q5xLV88emU7) or [Baidu-Wangpan (code:4fg7)](https://pan.baidu.com/s/1XAzavPKq3zcat1yBA1L2tQ).\nIt is recommended to put these data into `$TORCH_HOME` (`~/.torch/` by default). If you want to generate NAS-Bench-201 or similar NAS datasets or training models by yourself, you need these data.\n\n## How to Use NAS-Bench-201\n\n**More usage can be found in [our test codes](https://github.com/D-X-Y/AutoDL-Projects/blob/master/exps/NAS-Bench-201/test-nas-api.py)**.\n\n1. Creating an API instance from a file:\n```\nfrom nas_201_api import NASBench201API as API\napi = API('$path_to_meta_nas_bench_file')\n# Create an API without the verbose log\napi = API('NAS-Bench-201-v1_1-096897.pth', verbose=False)\n# The default path for benchmark file is '{:}/{:}'.format(os.environ['TORCH_HOME'], 'NAS-Bench-201-v1_1-096897.pth')\napi = API(None)\n```\n\n2. Show the number of architectures `len(api)` and each architecture `api[i]`:\n```\nnum = len(api)\nfor i, arch_str in enumerate(api):\n  print ('{:5d}/{:5d} : {:}'.format(i, len(api), arch_str))\n```\n\n3. Show the results of all trials for a single architecture:\n```\n# show all information for a specific architecture\napi.show(1)\napi.show(2)\n\n# show the mean loss and accuracy of an architecture\ninfo = api.query_meta_info_by_index(1)  # This is an instance of `ArchResults`\nres_metrics = info.get_metrics('cifar10', 'train') # This is a dict with metric names as keys\ncost_metrics = info.get_comput_costs('cifar100') # This is a dict with metric names as keys, e.g., flops, params, latency\n\n# get the detailed information\nresults = api.query_by_index(1, 'cifar100') # a dict of all trials for 1st net on cifar100, where the key is the seed\nprint ('There are {:} trials for this architecture [{:}] on cifar100'.format(len(results), api[1]))\nfor seed, result in results.items():\n  print ('Latency : {:}'.format(result.get_latency()))\n  print ('Train Info : {:}'.format(result.get_train()))\n  print ('Valid Info : {:}'.format(result.get_eval('x-valid')))\n  print ('Test  Info : {:}'.format(result.get_eval('x-test')))\n  # for the metric after a specific epoch\n  print ('Train Info [10-th epoch] : {:}'.format(result.get_train(10)))\n```\n\n4. Query the index of an architecture by string\n```\nindex = api.query_index_by_arch('|nor_conv_3x3~0|+|nor_conv_3x3~0|avg_pool_3x3~1|+|skip_connect~0|nor_conv_3x3~1|skip_connect~2|')\napi.show(index)\n```\nThis string `|nor_conv_3x3~0|+|nor_conv_3x3~0|avg_pool_3x3~1|+|skip_connect~0|nor_conv_3x3~1|skip_connect~2|` means:\n```\nnode-0: the input tensor\nnode-1: conv-3x3( node-0 )\nnode-2: conv-3x3( node-0 ) + avg-pool-3x3( node-1 )\nnode-3: skip-connect( node-0 ) + conv-3x3( node-1 ) + skip-connect( node-2 )\n```\n\n5. Create the network from api:\n```\nconfig = api.get_net_config(123, 'cifar10') # obtain the network configuration for the 123-th architecture on the CIFAR-10 dataset\nfrom models import get_cell_based_tiny_net # this module is in AutoDL-Projects/lib/models\nnetwork = get_cell_based_tiny_net(config) # create the network from configurration\nprint(network) # show the structure of this architecture\n```\nIf you want to load the trained weights of this created network, you need to use `api.get_net_param(123, ...)` to obtain the weights and then load it to the network.\n\n6. `api.get_more_info(...)` can return the loss / accuracy / time on training / validation / test sets, which is very helpful. For more details, please look at the comments in the get_more_info function.\n\n7. For other usages, please see `lib/nas_201_api/api.py`. We provide some usage information in the comments for the corresponding functions. If what you want is not provided, please feel free to open an issue for discussion, and I am happy to answer any questions regarding NAS-Bench-201.\n\n\n### Detailed Instruction\n\nIn `nas_201_api`, we define three classes: `NASBench201API`, `ArchResults`, `ResultsCount`.\n\n`ResultsCount` maintains all information of a specific trial. One can instantiate ResultsCount and get the info via the following codes (`000157-FULL.pth` saves all information of all trials of 157-th architecture):\n```\nfrom nas_201_api import ResultsCount\nxdata  = torch.load('000157-FULL.pth')\nodata  = xdata['full']['all_results'][('cifar10-valid', 777)]\nresult = ResultsCount.create_from_state_dict( odata )\nprint(result) # print it\nprint(result.get_train())   # print the final training loss/accuracy/[optional:time-cost-of-a-training-epoch]\nprint(result.get_train(11)) # print the training info of the 11-th epoch\nprint(result.get_eval('x-valid'))     # print the final evaluation info on the validation set\nprint(result.get_eval('x-valid', 11)) # print the info on the validation set of the 11-th epoch\nprint(result.get_latency())           # print the evaluation latency [in batch]\nresult.get_net_param()                # the trained parameters of this trial\narch_config = result.get_config(CellStructure.str2structure) # create the network with params\nnet_config  = dict2config(arch_config, None)\nnetwork    = get_cell_based_tiny_net(net_config)\nnetwork.load_state_dict(result.get_net_param())\n```\n\n`ArchResults` maintains all information of all trials of an architecture. Please see the following usages:\n```\nfrom nas_201_api import ArchResults\nxdata   = torch.load('000157-FULL.pth')\narchRes = ArchResults.create_from_state_dict(xdata['less']) # load trials trained with  12 epochs\narchRes = ArchResults.create_from_state_dict(xdata['full']) # load trials trained with 200 epochs\n\nprint(archRes.arch_idx_str())      # print the index of this architecture \nprint(archRes.get_dataset_names()) # print the supported training data\nprint(archRes.get_compute_costs('cifar10-valid')) # print all computational info when training on cifar10-valid \nprint(archRes.get_metrics('cifar10-valid', 'x-valid', None, False)) # print the average loss/accuracy/time on all trials\nprint(archRes.get_metrics('cifar10-valid', 'x-valid', None,  True)) # print loss/accuracy/time of a randomly selected trial\n```\n\n`NASBench201API` is the topest level api. Please see the following usages:\n```\nfrom nas_201_api import NASBench201API as API\napi = API('NAS-Bench-201-v1_1-096897.pth') # This will load all the information of NAS-Bench-201 except the trained weights\napi = API('{:}/{:}'.format(os.environ['TORCH_HOME'], 'NAS-Bench-201-v1_1-096897.pth')) # The same as the above line while I usually save NAS-Bench-201-v1_1-096897.pth in ~/.torch/.\napi.show(-1)  # show info of all architectures\napi.reload('{:}/{:}'.format(os.environ['TORCH_HOME'], 'NAS-BENCH-201-4-v1.0-archive'), 3) # This code will reload the information 3-th architecture with the trained weights\n\nweights = api.get_net_param(3, 'cifar10', None) # Obtaining the weights of all trials for the 3-th architecture on cifar10. It will returns a dict, where the key is the seed and the value is the trained weights.\n```\n\nTo obtain the training and evaluation information (please see the comments [here](https://github.com/D-X-Y/AutoDL-Projects/blob/master/lib/nas_201_api/api_201.py#L142)):\n```\napi.get_more_info(112, 'cifar10', None, hp='200', is_random=True)\n# Query info of last training epoch for 112-th architecture\n# using 200-epoch-hyper-parameter and randomly select a trial.\napi.get_more_info(112, 'ImageNet16-120', None, hp='200', is_random=True)\n```\n\n# Citation\n\nIf you find that NAS-Bench-201 helps your research, please consider citing it:\n```\n@inproceedings{dong2020nasbench201,\n  title     = {NAS-Bench-201: Extending the Scope of Reproducible Neural Architecture Search},\n  author    = {Dong, Xuanyi and Yang, Yi},\n  booktitle = {International Conference on Learning Representations (ICLR)},\n  url       = {https://openreview.net/forum?id=HJxyZkBKDr},\n  year      = {2020}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/D-X-Y/NAS-Bench-201",
    "keywords": "NAS Dataset API DeepLearning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nas-bench-201",
    "package_url": "https://pypi.org/project/nas-bench-201/",
    "platform": "",
    "project_url": "https://pypi.org/project/nas-bench-201/",
    "project_urls": {
      "Homepage": "https://github.com/D-X-Y/NAS-Bench-201"
    },
    "release_url": "https://pypi.org/project/nas-bench-201/2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "API for NAS-Bench-201 (a benchmark for neural architecture search).",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8393799,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e069f0e4d8286b38ddc21dc1c8ad1087edda1ce5d597b7bffafdc571658ceba",
          "md5": "604a8fccd3524a4ba6650136d12e5cc7",
          "sha256": "7467cf31e4690043b51053cd2bf7ceb9128afe0fbfabf7f464c7d1d40fb1e1fb"
        },
        "downloads": -1,
        "filename": "nas_bench_201-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "604a8fccd3524a4ba6650136d12e5cc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10841,
        "upload_time": "2020-01-14T14:39:12",
        "upload_time_iso_8601": "2020-01-14T14:39:12.145593Z",
        "url": "https://files.pythonhosted.org/packages/6e/06/9f0e4d8286b38ddc21dc1c8ad1087edda1ce5d597b7bffafdc571658ceba/nas_bench_201-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6147af01725d9c559d72d965aeeeb631542adccaf9c9c371a2f3424705b3d3ad",
          "md5": "ba21397584a3ed2d819b1590412241f9",
          "sha256": "b3d6f6474ede8fc69eaac6913cbd1b7a102c4d2deb5c27d51bdebe935fedfd02"
        },
        "downloads": -1,
        "filename": "nas_bench_201-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ba21397584a3ed2d819b1590412241f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12734,
        "upload_time": "2020-01-14T14:39:14",
        "upload_time_iso_8601": "2020-01-14T14:39:14.777033Z",
        "url": "https://files.pythonhosted.org/packages/61/47/af01725d9c559d72d965aeeeb631542adccaf9c9c371a2f3424705b3d3ad/nas_bench_201-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2ea60978852424ef02d178dfa4a0867574dd3131a6f0122834673f288720346",
          "md5": "37e61298496c4af2c49bb7631ed741db",
          "sha256": "f6944c677133ffc7db14503c31215b0c1c8f135798748ab280bc7cd276918c2e"
        },
        "downloads": -1,
        "filename": "nas_bench_201-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37e61298496c4af2c49bb7631ed741db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12407,
        "upload_time": "2020-01-22T01:16:16",
        "upload_time_iso_8601": "2020-01-22T01:16:16.259471Z",
        "url": "https://files.pythonhosted.org/packages/d2/ea/60978852424ef02d178dfa4a0867574dd3131a6f0122834673f288720346/nas_bench_201-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66111f2fa922bdbcca1d99dec1af05cd3e03eeb13bc3dac1e0f47a894521b36e",
          "md5": "6d0c8e2da2bf17cff8586ae93a6bbaf4",
          "sha256": "24529c7c8e4ad40ea4627e8706d7823fdc0d7700528f82f42fe27f0969a4af31"
        },
        "downloads": -1,
        "filename": "nas_bench_201-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6d0c8e2da2bf17cff8586ae93a6bbaf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14121,
        "upload_time": "2020-01-22T01:16:18",
        "upload_time_iso_8601": "2020-01-22T01:16:18.017775Z",
        "url": "https://files.pythonhosted.org/packages/66/11/1f2fa922bdbcca1d99dec1af05cd3e03eeb13bc3dac1e0f47a894521b36e/nas_bench_201-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61feff6adc99f4bf333a32559aa101c0fc8869555b153364526373f40a5034bd",
          "md5": "24333fc8126eb5aef8506eafc7c63a8f",
          "sha256": "8b5c55169a810407c690bef4787266752e116d32d66f39850228cb63f9acb659"
        },
        "downloads": -1,
        "filename": "nas_bench_201-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24333fc8126eb5aef8506eafc7c63a8f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18403,
        "upload_time": "2020-03-21T09:26:43",
        "upload_time_iso_8601": "2020-03-21T09:26:43.716191Z",
        "url": "https://files.pythonhosted.org/packages/61/fe/ff6adc99f4bf333a32559aa101c0fc8869555b153364526373f40a5034bd/nas_bench_201-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "078a7bf309a7816b53ab497f8b4544813bd601ee1c4344a6bbb902ef2a08bbfd",
          "md5": "8cd2b1c9dc61b6a54570a09b51061b67",
          "sha256": "7fbd80804fa56fba3b5172f23ad611bfa5f45461888723f8771354e5cc63d641"
        },
        "downloads": -1,
        "filename": "nas_bench_201-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8cd2b1c9dc61b6a54570a09b51061b67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22414,
        "upload_time": "2020-03-21T09:26:45",
        "upload_time_iso_8601": "2020-03-21T09:26:45.818407Z",
        "url": "https://files.pythonhosted.org/packages/07/8a/7bf309a7816b53ab497f8b4544813bd601ee1c4344a6bbb902ef2a08bbfd/nas_bench_201-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7b8e978062e240fe631e6dd010a9faf6fb05fa8cab4ede84b58016c4edab04d",
          "md5": "c1a45cdcb844a7c11b1015895de44e5f",
          "sha256": "38661db70ea44ba30995c5b4bd8ed9dc1325173cbdb037f15042406ce4d77d33"
        },
        "downloads": -1,
        "filename": "nas_bench_201-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1a45cdcb844a7c11b1015895de44e5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18406,
        "upload_time": "2020-03-21T09:30:50",
        "upload_time_iso_8601": "2020-03-21T09:30:50.621532Z",
        "url": "https://files.pythonhosted.org/packages/c7/b8/e978062e240fe631e6dd010a9faf6fb05fa8cab4ede84b58016c4edab04d/nas_bench_201-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d23389e0daec6da6cf5690d5d3c28bb12a349d7ced82e491375ca53f232ee006",
          "md5": "92d013fa21ffaf79a7d1b287465c1b33",
          "sha256": "b2eeb4ae3b3c5c71e217adb3fea0b9448d83845e94eb16df2ddc878adfae301c"
        },
        "downloads": -1,
        "filename": "nas_bench_201-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "92d013fa21ffaf79a7d1b287465c1b33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22441,
        "upload_time": "2020-03-21T09:30:52",
        "upload_time_iso_8601": "2020-03-21T09:30:52.112296Z",
        "url": "https://files.pythonhosted.org/packages/d2/33/89e0daec6da6cf5690d5d3c28bb12a349d7ced82e491375ca53f232ee006/nas_bench_201-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7ef4e1d7e060be0363fc7dc757c6ded76971db4bf8e0b7bd3dc55e0ed0d4a09",
          "md5": "895b9e4db2cec6a4dc625ea0584450bb",
          "sha256": "03f2ec1dd712ee5c504f7ee941847db9e847998feeeedacbdeff8a981ff84e8b"
        },
        "downloads": -1,
        "filename": "nas_bench_201-2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "895b9e4db2cec6a4dc625ea0584450bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23405,
        "upload_time": "2020-07-14T06:21:21",
        "upload_time_iso_8601": "2020-07-14T06:21:21.668224Z",
        "url": "https://files.pythonhosted.org/packages/d7/ef/4e1d7e060be0363fc7dc757c6ded76971db4bf8e0b7bd3dc55e0ed0d4a09/nas_bench_201-2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27e40df5b93f80474f1fada97bf1cfb08c8f2ee6da0c4cc6c3b184c3243c3379",
          "md5": "494addbe86e324db1ea29d789375e44d",
          "sha256": "e632db250bb7094817fb6f80557c81d671ce72e359041c07cd5b03705b2a0e1e"
        },
        "downloads": -1,
        "filename": "nas_bench_201-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "494addbe86e324db1ea29d789375e44d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22124,
        "upload_time": "2020-07-14T06:21:22",
        "upload_time_iso_8601": "2020-07-14T06:21:22.744614Z",
        "url": "https://files.pythonhosted.org/packages/27/e4/0df5b93f80474f1fada97bf1cfb08c8f2ee6da0c4cc6c3b184c3243c3379/nas_bench_201-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "955b2087c0b91e734f64d9190bc455e6cbf13a6dd40701d7313cdf7993264858",
          "md5": "7dbe8a44e06c055832e47f56fefb5339",
          "sha256": "56b5c62b292267b63ea57986ac845deaf7edfcffd684e099536acebd1843ff26"
        },
        "downloads": -1,
        "filename": "nas_bench_201-2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7dbe8a44e06c055832e47f56fefb5339",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20672,
        "upload_time": "2020-10-12T13:21:33",
        "upload_time_iso_8601": "2020-10-12T13:21:33.909636Z",
        "url": "https://files.pythonhosted.org/packages/95/5b/2087c0b91e734f64d9190bc455e6cbf13a6dd40701d7313cdf7993264858/nas_bench_201-2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9aca31b52364db924de93554e786cc9fed9cf5705ed334dd1c8bc5ea15e79534",
          "md5": "a9557b5896542d8215b5806d935f8802",
          "sha256": "2599dcc3b8ed2ea64994d71b238410cb29a55f8978480bb9d2297a79bfb88819"
        },
        "downloads": -1,
        "filename": "nas_bench_201-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a9557b5896542d8215b5806d935f8802",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22022,
        "upload_time": "2020-10-12T13:21:35",
        "upload_time_iso_8601": "2020-10-12T13:21:35.694896Z",
        "url": "https://files.pythonhosted.org/packages/9a/ca/31b52364db924de93554e786cc9fed9cf5705ed334dd1c8bc5ea15e79534/nas_bench_201-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "955b2087c0b91e734f64d9190bc455e6cbf13a6dd40701d7313cdf7993264858",
        "md5": "7dbe8a44e06c055832e47f56fefb5339",
        "sha256": "56b5c62b292267b63ea57986ac845deaf7edfcffd684e099536acebd1843ff26"
      },
      "downloads": -1,
      "filename": "nas_bench_201-2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7dbe8a44e06c055832e47f56fefb5339",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20672,
      "upload_time": "2020-10-12T13:21:33",
      "upload_time_iso_8601": "2020-10-12T13:21:33.909636Z",
      "url": "https://files.pythonhosted.org/packages/95/5b/2087c0b91e734f64d9190bc455e6cbf13a6dd40701d7313cdf7993264858/nas_bench_201-2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9aca31b52364db924de93554e786cc9fed9cf5705ed334dd1c8bc5ea15e79534",
        "md5": "a9557b5896542d8215b5806d935f8802",
        "sha256": "2599dcc3b8ed2ea64994d71b238410cb29a55f8978480bb9d2297a79bfb88819"
      },
      "downloads": -1,
      "filename": "nas_bench_201-2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a9557b5896542d8215b5806d935f8802",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22022,
      "upload_time": "2020-10-12T13:21:35",
      "upload_time_iso_8601": "2020-10-12T13:21:35.694896Z",
      "url": "https://files.pythonhosted.org/packages/9a/ca/31b52364db924de93554e786cc9fed9cf5705ed334dd1c8bc5ea15e79534/nas_bench_201-2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}