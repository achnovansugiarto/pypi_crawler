{
  "info": {
    "author": "Muhammad N. Fawi",
    "author_email": "m.noor.fawi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Struct Pie\nA set of python modules for data structures. All data structures are written in **C** and imported into python using **cython**. No python code involved to make the data structure pretty fast.\n\nThe idea is to extend python data structures to add more flexibility and to include more data structures that can help in different situations.\n\n**There is also a StructPie project on sourceforge.net that contains all these data structures as C shared libraries that can readily be used in C projects. The libraries can be downloaded from [here](https://sourceforge.net/projects/struct-pie/).**\n\n## Quick Start\nTo install the library\n```bash\npip install structpie\n```\n\nTesting the different data structures from within python\n\n### Hash Table\n**Separate Chaining** hash map that enables fast lookup and search. \nIt facilitates searching by \"value\" **O(1)**, in contrary to python dictionary which enables O(1) search when key is known.\n\nFor full comparison between list, dict and HashTable, try to run the **example.py** script in */hash_table/* folder.\n\nTo initiate a hash table, size and type should be specified. It supports 'int', 'float' and 'str'\n```python\nfrom structpie import *\n\nsize = 10\ntype = \"str\"\nht = HashTable(size, type)\narr = [\"Hello\", \"Salam\", \"Hola\", \"Ola\", \"Ciao\", \"Konnichiwa\", \"Merhaba\", \"Privetstviye\"]\n```\n\nIf the table is of \"str\" type, input string should be converted into **bytes** for Cython to be able to convert it into **C char***. \n```python\n# insert data into the table\nfor i in arr:\n    ht.insert_val(i.encode())\n\n# print the table\nht.display()\n# index(0):  Hello\n# index(1):\n# index(2):\n# index(3):  Konnichiwa\n# index(4):  Ola\n# index(5):  Ciao\n# index(6):\n# index(7):  Hola\n# index(8):  Merhaba  Salam\n# index(9):  Privetstviye\n```\nCheck the size of the table and how many indices are occupied.\n```python\nprint(\"size of the table is %d while number of filled indices is %d\" %\n    (ht.length(), ht.occupied()))\n# size of the table is 10 while number of filled indices is 7\n```\nSearch for a value in the table, remove and search by index:\n```python\nprint(\"try now to search for and delete some values: (0 means False while 1 is True)\")\n# try now to search for and delete some values: (0 means False while 1 is True)\nprint(\"search for value Merhaba --> %d\" % ht.search_value(\"Merhaba\".encode()))\n# search for value Merhaba --> 1\nprint(\"search for value Namaste --> %d\" % ht.search_value(\"Namaste\".encode()))\n# search for value Namaste --> 0\nprint(\"search by index 3 --> value %s found\" % ht.search_by_index(3))\n# search by index 3 --> value Konnichiwa found\nprint(\"remove value Ola --> %d\" % ht.val_del(\"Ola\".encode()))\n# remove value Ola --> 1\nprint(\"search again for value Ola --> %d\" % ht.search_value(\"Ola\".encode()))\n# search again for value Ola --> 0\nprint(\"try again to remove value Ola --> %d\" % ht.val_del(\"Ola\".encode()))\n# try again to remove value Ola --> 0\n```\nPrint again\n```python\nht.display()\n# index(0):  Hello\n# index(1):\n# index(2):\n# index(3):  Konnichiwa\n# index(4):\n# index(5):  Ciao\n# index(6):\n# index(7):  Hola\n# index(8):  Merhaba  Salam\n# index(9):  Privetstviye\n```\n\nGet index of a specific value\n```python\nht.get_index(b\"Hello\")\n# 0\n\nht.get_index(b\"Salam\")\n# 8\n```\n\nWe also can get all the values in a particular index\n```python\nht.search_index(8)\n# ['Merhaba', 'Salam']\n\nht.search_index(1)\n# []\n\nht.search_index(ht.get_index(b\"Salam\"))\n# ['Merhaba', 'Salam']\n```\n\nDisplaying first certain number of indices with **display** method. Acts like **head** in python dataframes:\n```python\nht.display(5) ##specifying how many indices to display\n\n# index(0):  Hello\n# index(1):\n# index(2):\n# index(3):  Konnichiwa\n# index(4):\n```\n\n**There are some empty unused indices that's because the hash_func used with string is so simple for now but better implementation will be available in future versions.**\n\n**Meanwhile in <int> HashTable this issue will be seen less.**\n\n### LIFO & FIFO Stack\n```python\nfrom structpie import *\n\n# initiate a stack of type \"int\"\nst = Stack(\"int\")\n\n# push values into the stack\nst.push(13)\nst.push(11)\nst.push(19)\nst.push(91)\n\n# print the stack\nst.display()\n# [13 11 19 91 ]\n\n# pop from right (LIFO)\nst.pop()\n# 91\n\n# pop from left (FIFO)\nst.popleft()\n# 13\n\n# check length\nst.length()\n# 2 \n\n# print again\nst.display()\n# [11 19 ]\n```\n**The stack can also contain data of type 'float' and 'str'**\n\n### Binary Search Tree\nBinary search tree is a great data structure for quick searching and dynamic sorting while inserting new data. It is widely used in so many applications like indexing in databases for fast lookup.\n\nStruct Pie provides a C-written binary search tree for usage in python.\n\nInsertion is a little bit slower than appending to a python list, but searching is so much faster.\n\nStruct Pie BST nodes can hold 3 data pieces; (int index, char* info1, float info2). This will be extended soon to hold more data.\n\nLet's try the binary search tree on some sample data about Uefa Champions League all-time goalscorers. Each row represents (number of goals, name, goal/game ratio).\n```python\n# initiate bstree\nbst = BSTree()\n\nimport pandas as pd\ndata = pd.read_csv(\"./binary_search_tree/example_data.csv\", header = None)\ndata\n#      0                    1     2\n#0   130    Cristiano Ronaldo  0.76\n#1   115         Lionel Messi  0.80\n#2    71        Raul Gonzalez  0.50\n#3    68   Robert Lewandowski  0.76\n#4    65        Karim Benzema  0.54\n#5    56  Ruud van Nistelrooy  0.77\n#6    50        Thierry Henry  0.45\n#7    49   Alfredo Di Stefano  0.84\n#8    48    Andriy Shevchenko  0.48\n#9    48   Zlatan Ibrahimovic  0.40\n#10   46        Thomas Muller  0.40\n```\nLet's insert the data into the tree\n```python\nfor i in range(data.shape[0]):\n    bst.insert(data.iloc[i, 0], data.iloc[i, 1].encode(), data.iloc[i, 2])\n\n# check that all data was inserted\ndata.shape[0] == bst.node_count()\n# True\n```\nSome operations on the tree; **(inorder) printing, searching and deleting**\n```python\n# print inorder \nbst.inorder()\n# 46 -> 48 -> 48 -> 49 -> 50 -> 56 -> 65 -> 68 -> 71 -> 115 -> 130 ->\n\n# search for an index\nbst.search(40)\n# \"node doesn't exist\"\n\nbst.search(48)\n# (48, b'Andriy Shevchenko', 0.48)\n\nbst.search(46)\n# (46, b'Thomas Muller', 0.4)\n\nbst.search(49)\n# (49, b'Alfredo Di Stefano', 0.84)\n\n# delete a node\nbst.remove(48)\n\n# new order after deletion\nbst.inorder()\n# 46 -> 48 -> 49 -> 50 -> 56 -> 65 -> 68 -> 71 -> 115 -> 130 ->\n\nbst.node_count()\n# 10\n\nbst.remove(71)\nbst.node_count()\n# 9\nbst.inorder()\n# 46 -> 48 -> 49 -> 50 -> 56 -> 65 -> 68 -> 115 -> 130 ->\n\nbst.search(65)\n# (65, b'Karim Benzema', 0.54)\n```\n\n### Hash Table with Binary Search Tree\nImplementing **hash table** data structure that uses *separate chaining* to avoid collisions. While in each indiex it uses a **binary search tree** instead of *linked lists* to store data that has similar indices produced by the hashing function to achieve **faster lookup**.\n\nInsertion is slower than insertion in linked lists but searching is faster.\n\n```python\nfrom structpie import *\nsize = 5\ntype = \"int\"\nhbst = HashBSTree(size, type)\narr = [13, 11, 19, 91, 22, 12, 19, 94]\n\nfor i in arr:\n    hbst.insert_val(i)\n\nhbst.display()\n\n# index(0):\n# index(1): 11 -> 91 ->\n# index(2): 12 -> 22 ->\n# index(3): 13 ->\n# index(4): 19 -> 19 -> 94 ->\n\n(hbst.length(), hbst.occupied())\n# (5, 4)\nhbst.search_value(94)\n# 1\nhbst.search_value(15)\n# 0\nhbst.search_by_index(3)\n# '13'\nhbst.val_del(91)\n\nhbst.search_value(91)\n# 0\nhbst.val_del(91)\n# The value does not exist\nhbst.get_index(19)\n# 4\nhbst.get_index(11)\n# 1\n```\n\n### Priority Queue\nPriority queue is a very good data structure for inserting new values and ordering the queue according to certain priority so that when poping the more important ones get popped first even if they were inserted later.\n\n```python\npq = PQ()\npq.display()\n# The queue is Empty\n```\nPQ takes two inputs, for now, (char * name, int priority). This will definitely be expanded soon.\n###### C char* is represented in python as bytes by cython. So while inserting strings, they should be encoded into bytes first.\n\nLet's insert some tasks and priorities:\n```python\npq.push(b\"exercise\", 3)\npq.push(b\"sleep\", 2)\npq.push(b\"repeat\", 1)\npq.push(b\"code\", 5)\npq.display()\n# (\n#  {code, 5}\n#  {exercise, 3}\n#  {sleep, 2}\n#  {repeat, 1}\n# )\n``` \nQueue was dynamically ordered according to priorities.\n\nNow let's pop:\n```python\npq.pop()\n# (code) with priority (5) has been removed\n# 'code'\n```\nNote that pop method prints a confirmation message and returns the task name as a string\n```python\nsome = pq.pop()\n# (exercise) with priority (3) has been removed\nprint(some)\n# exercise\n\npq.display()\n# (\n#  {sleep, 2}\n#  {repeat, 1}\n# )\n\npq.pop()\n# (sleep) with priority (2) has been removed\n# 'sleep'\npq.pop()\n# (repeat) with priority (1) has been removed\n# 'repeat'\n\n## when trying to pop from an empty queue, an empty string '' is returned.\npq.pop()\n# The queue is empty\n# ''\npq.display()\n# The queue is Empty\n```\n**More data structures will be supported soon.**\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MNoorFawi/struct-pie",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "structpie",
    "package_url": "https://pypi.org/project/structpie/",
    "platform": "",
    "project_url": "https://pypi.org/project/structpie/",
    "project_urls": {
      "Homepage": "https://github.com/MNoorFawi/struct-pie"
    },
    "release_url": "https://pypi.org/project/structpie/0.0.5/",
    "requires_dist": [
      "cython"
    ],
    "requires_python": "",
    "summary": "A set of python modules for data structures written in C",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8612474,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7900b56f0d330680e1747004fd709f1fd8f3694669955236ebd9ff591db7d5e5",
          "md5": "a9f0be951069beb7997d8ed01f070934",
          "sha256": "c56d425397b1c8a7cb7c9cd0a72bdf55de6c9d0c80912e6deca317636e8292ba"
        },
        "downloads": -1,
        "filename": "structpie-0.0.1-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "a9f0be951069beb7997d8ed01f070934",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 83998,
        "upload_time": "2020-10-14T01:01:32",
        "upload_time_iso_8601": "2020-10-14T01:01:32.144887Z",
        "url": "https://files.pythonhosted.org/packages/79/00/b56f0d330680e1747004fd709f1fd8f3694669955236ebd9ff591db7d5e5/structpie-0.0.1-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8613ee41d28f2065115e89ad7c94201cb789d7b6d3b5a60020beaf64eea39ad",
          "md5": "9966dba0fa14bfa66e8972bc09fd18bf",
          "sha256": "a1d6561ccedd079e988be4fa6643d74625c7893cd380f15fc3c68c21e7686f52"
        },
        "downloads": -1,
        "filename": "structpie-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9966dba0fa14bfa66e8972bc09fd18bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8684,
        "upload_time": "2020-10-14T01:01:35",
        "upload_time_iso_8601": "2020-10-14T01:01:35.255475Z",
        "url": "https://files.pythonhosted.org/packages/a8/61/3ee41d28f2065115e89ad7c94201cb789d7b6d3b5a60020beaf64eea39ad/structpie-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e128fe389e55fe28f917870d41b6ec84e7d77f43eae45619b7cd448f2f325fd",
          "md5": "2131c08edb64c65d96859d0364cd6590",
          "sha256": "6abe34a61b9b1ce90b3f7e8b20c9135aa53a9c26a14d74586b1a17d31044080f"
        },
        "downloads": -1,
        "filename": "structpie-0.0.2-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "2131c08edb64c65d96859d0364cd6590",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 83998,
        "upload_time": "2020-10-14T01:15:53",
        "upload_time_iso_8601": "2020-10-14T01:15:53.026495Z",
        "url": "https://files.pythonhosted.org/packages/9e/12/8fe389e55fe28f917870d41b6ec84e7d77f43eae45619b7cd448f2f325fd/structpie-0.0.2-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "594ff9281b6a50cb28ab329e329050f233675d90a2a35fa35877a83bc78f6292",
          "md5": "0be2b6df30e9daa84bc74d089078d76b",
          "sha256": "af3d0f06edd14262b2028c6823e27b080f56f2b98f5761b2377c40e0e10c947e"
        },
        "downloads": -1,
        "filename": "structpie-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0be2b6df30e9daa84bc74d089078d76b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9207,
        "upload_time": "2020-10-14T01:15:54",
        "upload_time_iso_8601": "2020-10-14T01:15:54.598914Z",
        "url": "https://files.pythonhosted.org/packages/59/4f/f9281b6a50cb28ab329e329050f233675d90a2a35fa35877a83bc78f6292/structpie-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afcd47bba590536c05588d917acab64221b1f6bf5d213fd25d1c4371342190cd",
          "md5": "8c3303624f1dbae56531b5fdc78d1038",
          "sha256": "57c4522aa64ccd36b97e298f460265e948e26466624f2e33999ab24ef3de430e"
        },
        "downloads": -1,
        "filename": "structpie-0.0.3-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "8c3303624f1dbae56531b5fdc78d1038",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 90116,
        "upload_time": "2020-10-17T16:20:33",
        "upload_time_iso_8601": "2020-10-17T16:20:33.790068Z",
        "url": "https://files.pythonhosted.org/packages/af/cd/47bba590536c05588d917acab64221b1f6bf5d213fd25d1c4371342190cd/structpie-0.0.3-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8120577e0f356a087cee6766ddaec6a39deac1bbafca93359185adf7d669d8c0",
          "md5": "0a36e37d2501ae78b3e234574fd32270",
          "sha256": "54abec9b3756f5943470544b937f1cbb6892cc2d48923feb4e877e4362c53077"
        },
        "downloads": -1,
        "filename": "structpie-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0a36e37d2501ae78b3e234574fd32270",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16461,
        "upload_time": "2020-10-17T16:20:36",
        "upload_time_iso_8601": "2020-10-17T16:20:36.302786Z",
        "url": "https://files.pythonhosted.org/packages/81/20/577e0f356a087cee6766ddaec6a39deac1bbafca93359185adf7d669d8c0/structpie-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6fc464bcb4d1d04f2beed60bde7e29220992d1dfac0e1ba6bc5fdb28aba5497",
          "md5": "35b3db0301b8259be6bac57bc965b8d5",
          "sha256": "c109882015aafa94b71108b12c096c6056a8b1b62ccde3a39282f29a53033445"
        },
        "downloads": -1,
        "filename": "structpie-0.0.4-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "35b3db0301b8259be6bac57bc965b8d5",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 91682,
        "upload_time": "2020-10-17T22:53:25",
        "upload_time_iso_8601": "2020-10-17T22:53:25.674887Z",
        "url": "https://files.pythonhosted.org/packages/d6/fc/464bcb4d1d04f2beed60bde7e29220992d1dfac0e1ba6bc5fdb28aba5497/structpie-0.0.4-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f5a695dcb98ca647f42938acc92558c531ce8e5ff51c2d367e4d52c752bef07",
          "md5": "5a5cf89d5cf10b59570935ae2f710793",
          "sha256": "1d371620d285a08d49aab5ce5b7f897c40e1873a24269fbe5aaad236efabd261"
        },
        "downloads": -1,
        "filename": "structpie-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5a5cf89d5cf10b59570935ae2f710793",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17121,
        "upload_time": "2020-10-17T22:53:27",
        "upload_time_iso_8601": "2020-10-17T22:53:27.309255Z",
        "url": "https://files.pythonhosted.org/packages/8f/5a/695dcb98ca647f42938acc92558c531ce8e5ff51c2d367e4d52c752bef07/structpie-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fa8cc2000ab3d27645b8bcbe4be4e9a49a18cdab760c4a192527607f4a20825",
          "md5": "2c81df6700943dcbe3bb0b5fd35a9c2e",
          "sha256": "0cf1f1f1fab5257d74345018304a6cda13313b2a5411acdcdcbbc328a5aa4d60"
        },
        "downloads": -1,
        "filename": "structpie-0.0.5-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "2c81df6700943dcbe3bb0b5fd35a9c2e",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 114278,
        "upload_time": "2020-11-09T09:35:06",
        "upload_time_iso_8601": "2020-11-09T09:35:06.102863Z",
        "url": "https://files.pythonhosted.org/packages/6f/a8/cc2000ab3d27645b8bcbe4be4e9a49a18cdab760c4a192527607f4a20825/structpie-0.0.5-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c54695eeccde2c519b181cdd5054b40847f82c06c8c760f5e11c9b4974805818",
          "md5": "bca5090833ea3ef8dc6f756363806289",
          "sha256": "35a277ba4b7706605fd367cf59b220b8a501235da412b5be7f45fcc5ede2c321"
        },
        "downloads": -1,
        "filename": "structpie-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "bca5090833ea3ef8dc6f756363806289",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20456,
        "upload_time": "2020-11-09T09:35:08",
        "upload_time_iso_8601": "2020-11-09T09:35:08.662776Z",
        "url": "https://files.pythonhosted.org/packages/c5/46/95eeccde2c519b181cdd5054b40847f82c06c8c760f5e11c9b4974805818/structpie-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fa8cc2000ab3d27645b8bcbe4be4e9a49a18cdab760c4a192527607f4a20825",
        "md5": "2c81df6700943dcbe3bb0b5fd35a9c2e",
        "sha256": "0cf1f1f1fab5257d74345018304a6cda13313b2a5411acdcdcbbc328a5aa4d60"
      },
      "downloads": -1,
      "filename": "structpie-0.0.5-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "2c81df6700943dcbe3bb0b5fd35a9c2e",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 114278,
      "upload_time": "2020-11-09T09:35:06",
      "upload_time_iso_8601": "2020-11-09T09:35:06.102863Z",
      "url": "https://files.pythonhosted.org/packages/6f/a8/cc2000ab3d27645b8bcbe4be4e9a49a18cdab760c4a192527607f4a20825/structpie-0.0.5-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c54695eeccde2c519b181cdd5054b40847f82c06c8c760f5e11c9b4974805818",
        "md5": "bca5090833ea3ef8dc6f756363806289",
        "sha256": "35a277ba4b7706605fd367cf59b220b8a501235da412b5be7f45fcc5ede2c321"
      },
      "downloads": -1,
      "filename": "structpie-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "bca5090833ea3ef8dc6f756363806289",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20456,
      "upload_time": "2020-11-09T09:35:08",
      "upload_time_iso_8601": "2020-11-09T09:35:08.662776Z",
      "url": "https://files.pythonhosted.org/packages/c5/46/95eeccde2c519b181cdd5054b40847f82c06c8c760f5e11c9b4974805818/structpie-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}