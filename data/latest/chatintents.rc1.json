{
  "info": {
    "author": "David Borrelli",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# chat-intents\n\nChatIntents provides a method for automatically clustering and applying descriptive group labels to short text documents containing dialogue intents.  It uses [UMAP](https://github.com/lmcinnes/umap) for performing dimensionality reduction on user-supplied document embeddings and [HDSBCAN](https://github.com/scikit-learn-contrib/hdbscan) for performing the clustering. Hyperparameters are automatically tuned by performing a Bayesian search (using [hyperopt](https://github.com/hyperopt/hyperopt)) on a constrained optimization of an objective function using user-supplied bounds.\n\n**See associated Medium post for additional description and motivation.**\n\n## Installation\n\nInstallation can be done using PyPI:\n\n```pip install chatintents```\n\n**Note:** Depending on your system setup and environment, you may encounter an error associated with the pip install of HDSBCAN (failure to build the hdbscan wheel). This is a [known issue](https://github.com/scikit-learn-contrib/hdbscan/issues/293) with HDSCAN and has several possible solutions. If you are already using a conda virtual environment, an easy solution is to conda install HDBSCAN *before* installing the chatintents package using:\n\n```conda install -c conda-forge hdbscan```\n\n### Sentence embeddings\nThe `chatintents` package doesn't include or specify how to create the sentence embeddings of the documents. Two popular pre-trained embedding models, as shown in the [tutorial notebook](https://github.com/dborrelli/chat-intents/blob/main/notebooks/chatintents_tutorial.ipynb), are the [Unversal Sentence Encoder (USE)](https://tfhub.dev/google/universal-sentence-encoder/4) and [Sentence Transformers](https://www.sbert.net/).\n\nSentence Transformers can be installed by:\n\n```\npip install -U sentence-transformers\n```\n\nUniversal Sentence Encoder requires installing\n\n```\npip install tensorflow\npip install --upgrade tensorflow-hub\n```\n\n## Quick Start\nThe below example uses a Sentence Transformer model to embed the messages and create a model instance:\n\n```\nimport chatintents\nfrom chatintents import ChatIntents\n\nfrom sentence_transformers import SentenceTransformer\n\nall_intents = list(docs['text'])\nmodel = SentenceTransformer('all-mpnet-base-v2')\nembeddings = model.encode(all_intents)\n\nmodel = ChatIntents(embeddings, 'st1')\n```\n\nCreating a ChatIntents instance requires inputs of an embedding representation of all documents and a short-text string description of the model (no spaces).\n\n### Generating clusters\nMethods are provided for generating clusters using user-supplied hyperparameters, from random search, and from a Bayesian search.\n\n#### User-supplied hyperparameters and manually scoring\n```\nclusters = model.generate_clusters(n_neighbors = 15, \n                                   n_components = 5, \n                                   min_cluster_size = 5, \n                                   min_samples = None,\n                                   random_state=42)\n\nlabels, cost = model.score_clusters(clusters)\n```\n\n#### Random search\nTo run 100 evaluations of randomly-selected hyperparameter values within user-supplied ranges:\n```\nspace = {\n        \"n_neighbors\": range(12,16),\n        \"n_components\": range(3,7),\n        \"min_cluster_size\": range(2,15),\n        \"min_samples\": range(2,15)\n    }\n\ndf_random = model.random_search(space, 100)\n```\n\n#### Bayesian search\nPerform a Bayesian search of the hyperparameter space using hyperopt and user-supplied upper and lower bounds for the number of expected clusters:\n```\nhspace = {\n    \"n_neighbors\": hp.choice('n_neighbors', range(3,16)),\n    \"n_components\": hp.choice('n_components', range(3,16)),\n    \"min_cluster_size\": hp.choice('min_cluster_size', range(2,16)),\n    \"min_samples\": None,\n    \"random_state\": 42\n}\n\nlabel_lower = 30\nlabel_upper = 100\nmax_evals = 100\n\nmodel.bayesian_search(space=hspace,\n                      label_lower=label_lower, \n                      label_upper=label_upper, \n                      max_evals=max_evals)\n```\nRunning the `bayesian_search` method on a model instance saves the best parameters and best clusters to that instance as variables. For example:\n\n```\n>>> model.best_params\n\n{'min_cluster_size': 5,\n 'min_samples': None,\n 'n_components': 11,\n 'n_neighbors': 3,\n 'random_state': 42}\n```\n\n### Applying labels to best clusters from Bayesian search\nAfter running the `bayesian_search` method to identify the best clusters for a given embedding model, descriptive labels can then be applied with:\n```\ndf_summary, labeled_docs = model.apply_and_summarize_labels(docs[['text']])\n```\nThis yields two results. The `df_summary` dataframe summarizing the count and descriptive label of each group:\n\n![alt text](https://github.com/dborrelli/chat-intents/blob/main/images/table_extracted_labels.png)\n\nand the `labeled_docs` dataframe with each document in the dataset and it's associated cluster number and descriptiive label:\n\n![alt text](https://github.com/dborrelli/chat-intents/blob/main/images/labeled_docs.png)\n\n### Evaluating performance if ground truth is known\nTwo methods are also supplied for evaluating and comparing the performance of different models if the ground truth labels happen to be known:\n\n```\nmodels = [model_use, model_st1, model_st2, model_st3]\n\ndf_comparison, labeled_docs_all_models = chatintents.evaluate_models(docs[['text', \n                                                                           'category']],\n                                                                           models)\n```\nAn example `df_comparison` dataframe comparing model performance is shown below:\n\n![alt text](https://github.com/dborrelli/chat-intents/blob/main/images/results_comparison.png)\n\n## Tutorial\nSee this [tutorial notebook](https://github.com/dborrelli/chat-intents/blob/main/notebooks/chatintents_tutorial.ipynb) for an example of using the `chatintents` package for comparing four different models on a dataset.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dborrelli/chat-intents",
    "keywords": "nlp clustering document embeddings unsupervised intents",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chatintents",
    "package_url": "https://pypi.org/project/chatintents/",
    "platform": "",
    "project_url": "https://pypi.org/project/chatintents/",
    "project_urls": {
      "Homepage": "https://github.com/dborrelli/chat-intents"
    },
    "release_url": "https://pypi.org/project/chatintents/0.0.1/",
    "requires_dist": [
      "numpy (>=1.19.2)",
      "pandas (>=1.2.0)",
      "umap-learn (>=0.5.1)",
      "hdbscan (>=0.8.27)",
      "hyperopt (>=0.2.5)",
      "matplotlib (>=3.4.2)",
      "spacy (>=3.1.2)",
      "ipywidgets (>=7.6.3)"
    ],
    "requires_python": ">=3.9",
    "summary": "ChatIntents automatically clusters and labels short text intent messages.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11751934,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db69a42b5c955e2f53129fc730ed55cb48ae0010fa620563913ca4012a674cdb",
          "md5": "17a2a7f41f3922a509781c63799f841e",
          "sha256": "0c638ec5cbb04ba02db65a14f3c07db49587edc2e69e895380f14a75ea200e10"
        },
        "downloads": -1,
        "filename": "chatintents-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17a2a7f41f3922a509781c63799f841e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9804,
        "upload_time": "2021-10-17T17:22:41",
        "upload_time_iso_8601": "2021-10-17T17:22:41.419129Z",
        "url": "https://files.pythonhosted.org/packages/db/69/a42b5c955e2f53129fc730ed55cb48ae0010fa620563913ca4012a674cdb/chatintents-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eecb7746f079a811ca3eb8b9a42af94fdcf58cc988164ebada9b7403387c1a40",
          "md5": "52dc0187662d81a533cd8f91562f9c76",
          "sha256": "3d91956e11bf2c9ff5c6b82ee61eeeb9ddbe4ce170b5b45ae481d528f5e09f46"
        },
        "downloads": -1,
        "filename": "chatintents-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "52dc0187662d81a533cd8f91562f9c76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 11700,
        "upload_time": "2021-10-17T17:22:42",
        "upload_time_iso_8601": "2021-10-17T17:22:42.622596Z",
        "url": "https://files.pythonhosted.org/packages/ee/cb/7746f079a811ca3eb8b9a42af94fdcf58cc988164ebada9b7403387c1a40/chatintents-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db69a42b5c955e2f53129fc730ed55cb48ae0010fa620563913ca4012a674cdb",
        "md5": "17a2a7f41f3922a509781c63799f841e",
        "sha256": "0c638ec5cbb04ba02db65a14f3c07db49587edc2e69e895380f14a75ea200e10"
      },
      "downloads": -1,
      "filename": "chatintents-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "17a2a7f41f3922a509781c63799f841e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 9804,
      "upload_time": "2021-10-17T17:22:41",
      "upload_time_iso_8601": "2021-10-17T17:22:41.419129Z",
      "url": "https://files.pythonhosted.org/packages/db/69/a42b5c955e2f53129fc730ed55cb48ae0010fa620563913ca4012a674cdb/chatintents-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eecb7746f079a811ca3eb8b9a42af94fdcf58cc988164ebada9b7403387c1a40",
        "md5": "52dc0187662d81a533cd8f91562f9c76",
        "sha256": "3d91956e11bf2c9ff5c6b82ee61eeeb9ddbe4ce170b5b45ae481d528f5e09f46"
      },
      "downloads": -1,
      "filename": "chatintents-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "52dc0187662d81a533cd8f91562f9c76",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 11700,
      "upload_time": "2021-10-17T17:22:42",
      "upload_time_iso_8601": "2021-10-17T17:22:42.622596Z",
      "url": "https://files.pythonhosted.org/packages/ee/cb/7746f079a811ca3eb8b9a42af94fdcf58cc988164ebada9b7403387c1a40/chatintents-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}