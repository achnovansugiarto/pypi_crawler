{
  "info": {
    "author": "Calvin Jay Ross",
    "author_email": "calvinjayross@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "RicciPy\n=======\n\n|pypi version| |Build status|\n\n.. |pypi version| image:: https://img.shields.io/pypi/v/riccipy.svg\n.. |Build status| image:: https://travis-ci.org/cjayross/riccipy.svg?branch=master\n    :target: https://travis-ci.org/cjayross/riccipy\n\nA tensor algebra calculator for General Relativity.\n\nUsage\n-----\n\n.. _sympy: https://github.com/sympy/sympy\n.. _numpy: https://github.com/numpy/numpy\n\nRicciPy makes extensive usage of sympy_ for managing tensor products and\ncontractions. To create a tensor, it is required to construct an array to\nrepresent the components of the tensor. This can be done by using most\nnested array types: a nested ``list``, a ``sympy.Array`` instance, a\n``sympy.Matrix`` instance, or a numpy_ array will work.\n\nBefore beginning any involved application, it is first necessary to define a\n``Metric`` instance so that indices can be appropriately raised and lowered\nautomatically.\n\nIn the following example, the electromagnetic tensor is defined in a Minkowski\nspacetime. To begin, we declare the components of the electromagnetic tensor\nusing sympy for representing variables:\n\n.. code-block:: python\n\n  >>> from sympy import diag, symbols\n  >>> from riccipy import Tensor, Metric, indices, expand_array\n  >>> E1, E2, E3, B1, B2, B3 = symbols('E1:4 B1:4')\n  >>> em = [[0, -E1, -E2, -E3],\n            [E1, 0, -B3, B2],\n            [E2, B3, 0, -B1],\n            [E3, -B2, B1, 0]]\n  >>> t, x, y, z = symbols('t x y z')\n\nNext, the Minkowski metric is defined along with the ``Tensor`` object for the\nelectromagnetic tensor. Here, the ``symmetry`` keyword is optional but is used\nto declare the electromagnetic tensor as being antisymmetric (refer to sympy's\ndocumentation for the ``sympy.tensor.tensor`` module).\n\n.. code-block:: python\n\n  >>> eta = Metric('eta', [t, x, y, z], diag(1, -1, -1, -1))\n  >>> F = Tensor('F', em, eta, symmetry=[[2]])\n  >>> mu, nu = indices('mu nu', eta)\n\n``mu`` and ``nu`` are now variables that can be used to represent the\nindices of either the metric, ``eta``, or the tensor ``F``. Negative signs\nindicate that the particular index is a subscript (covariant) rather than\na superscript (contravariant).\n\nThis first calculation demonstrates how contractions are handled: simply\nmultiply two indexed tensors and matching indices will automatically apply\nthe Einstein summation convention. Symbolically, indices that are to be\ncontracted are denoted by the metric those indices belong to (in this case\n``eta_0`` and ``eta_1``).\n\nTo convert a symbolic tensor expression into components, pass the expression\nto ``expand_array``.\n\n.. code-block:: python\n\n  >>> expr = F(mu, nu) * F(-mu, -nu)\n  >>> expr\n  F(eta_0, eta_1)*F(-eta_0, -eta_1)\n  >>> expand_array(expr)\n  2*B_1**2 + 2*B_2**2 + 2*B_3**2 - 2*E_1**2 - 2*E_2**2 - 2*E_3**2\n\nThis next calculation demonstrates the consequence of having defined ``F`` as\nbeing antisymmetric:\n\n.. code-block:: python\n\n  >>> expr = F(mu, nu) + F(nu, mu)\n  >>> expand_array(expr)\n  0\n\nMetrics Database\n****************\n\nRicciPy comes with over 100 different metrics representing solutions to the\nEinstein Field Equations. To search for metrics, you can use the ``find``\nfunction:\n\n.. code-block:: python\n\n   >>> from riccipy.metrics import find\n   >>> find('sitter')\n   ['anti-de sitter', 'de sitter', 'schwarzschild-de sitter']\n\nThe ``load_metric`` function can be used to automatically return a ``Metric``\ninstance of the specified metric. For example, to load an Anti de-Sitter\nspacetime the call would look like:\n\n.. code-block:: python\n\n   >>> g, variables, functions = load_metric('g', 'anti-de sitter')\n   >>> g.as_array()\n   [[-1, 0, 0, 0],\n   [0, cos(t)**2, 0, 0],\n   [0, 0, cos(t)**2*sinh(chi)**2, 0],\n   [0, 0, 0, sin(theta)**2*cos(t)**2*sinh(chi)**2]]\n\nInstallation\n------------\n\nTo install RicciPy the following dependencies are required:\n\n   * Sympy (version >= 1.4)\n\n   * Numpy (version >= 1.15)\n\nInstallation is handled automatically by using\n\n.. code-block:: shell\n\n   $ pip install riccipy\n\nContributing & Questions\n------------------------\n\nRicciPy is in it's early stages of development and thus contributions are\nvery welcome, yet they will be handled on a person-to-person basis until\nsufficient interest accumulates in the project. Feel free to email the primary\nauthor at ``calvinjayross@gmail.com`` if you have any questions or interest in\ndeveloping RicciPy.",
    "description_content_type": "text/x-rst; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cjayross/riccipy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "riccipy",
    "package_url": "https://pypi.org/project/riccipy/",
    "platform": "",
    "project_url": "https://pypi.org/project/riccipy/",
    "project_urls": {
      "Homepage": "https://github.com/cjayross/riccipy"
    },
    "release_url": "https://pypi.org/project/riccipy/0.3.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A tensor algebra calculator for General Relativity",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7572271,
  "releases": {
    "0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "588ea0e6e385ab01477dfea93be380490281e00d619f43ec1af615091fd9a770",
          "md5": "fca433b7b9f8dcaa8dd13c19bf23e96d",
          "sha256": "79abee28afee3e3c09cea5fd13eef8eea92d554f64a8185e8217f5fe7e51ca5a"
        },
        "downloads": -1,
        "filename": "riccipy-0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "fca433b7b9f8dcaa8dd13c19bf23e96d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25314,
        "upload_time": "2019-08-17T08:43:22",
        "upload_time_iso_8601": "2019-08-17T08:43:22.721505Z",
        "url": "https://files.pythonhosted.org/packages/58/8e/a0e6e385ab01477dfea93be380490281e00d619f43ec1af615091fd9a770/riccipy-0.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e68e04969d0aa82ca5521424de35771c4c4895984664b6920c04b7d9e4ba17b",
          "md5": "a0ea802c6fe0e30c76726f5afd889dd1",
          "sha256": "f1a77fb3e1186143257ca154de633b3b82e6800259285400728c306b7201d8d5"
        },
        "downloads": -1,
        "filename": "riccipy-0.1a2.tar.gz",
        "has_sig": false,
        "md5_digest": "a0ea802c6fe0e30c76726f5afd889dd1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25315,
        "upload_time": "2019-08-17T08:45:15",
        "upload_time_iso_8601": "2019-08-17T08:45:15.705246Z",
        "url": "https://files.pythonhosted.org/packages/5e/68/e04969d0aa82ca5521424de35771c4c4895984664b6920c04b7d9e4ba17b/riccipy-0.1a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c343ba4355e68dc7cbe8cc371ba31d6dec7d6371cfc306777d4abd2074df67d",
          "md5": "aa4a46e025038287dcf9dc93adc7cdba",
          "sha256": "fb40c53d1de66ea8ce90b2a9c892af9da97d4fc6182b0761d730bc29e14ffad6"
        },
        "downloads": -1,
        "filename": "riccipy-0.2a1.tar.gz",
        "has_sig": false,
        "md5_digest": "aa4a46e025038287dcf9dc93adc7cdba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28477,
        "upload_time": "2020-01-05T21:40:55",
        "upload_time_iso_8601": "2020-01-05T21:40:55.852149Z",
        "url": "https://files.pythonhosted.org/packages/4c/34/3ba4355e68dc7cbe8cc371ba31d6dec7d6371cfc306777d4abd2074df67d/riccipy-0.2a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4299fcacf014b7b54b40f0eed6dbb7013d051251f859bee9a3d040afc07def53",
          "md5": "9deb6edd1ba9c36212ad8f7aafbaa71e",
          "sha256": "99351e0344f77460e1faea188ad935e629d74155db0894b003a29f03d790e71c"
        },
        "downloads": -1,
        "filename": "riccipy-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9deb6edd1ba9c36212ad8f7aafbaa71e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28822,
        "upload_time": "2020-06-05T22:35:21",
        "upload_time_iso_8601": "2020-06-05T22:35:21.911848Z",
        "url": "https://files.pythonhosted.org/packages/42/99/fcacf014b7b54b40f0eed6dbb7013d051251f859bee9a3d040afc07def53/riccipy-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcaf27a90d086b1b374e6efd5439617a5ad6d090dec7700484c17167c89307c4",
          "md5": "3d2085713b5177cac1e5850440410e2d",
          "sha256": "3cf146c54a6b02eb5dc79841a23f46eec2934243e8e87c7af1d54e756e6f0cfa"
        },
        "downloads": -1,
        "filename": "riccipy-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3d2085713b5177cac1e5850440410e2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32342,
        "upload_time": "2020-06-26T22:23:05",
        "upload_time_iso_8601": "2020-06-26T22:23:05.609400Z",
        "url": "https://files.pythonhosted.org/packages/bc/af/27a90d086b1b374e6efd5439617a5ad6d090dec7700484c17167c89307c4/riccipy-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcaf27a90d086b1b374e6efd5439617a5ad6d090dec7700484c17167c89307c4",
        "md5": "3d2085713b5177cac1e5850440410e2d",
        "sha256": "3cf146c54a6b02eb5dc79841a23f46eec2934243e8e87c7af1d54e756e6f0cfa"
      },
      "downloads": -1,
      "filename": "riccipy-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3d2085713b5177cac1e5850440410e2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32342,
      "upload_time": "2020-06-26T22:23:05",
      "upload_time_iso_8601": "2020-06-26T22:23:05.609400Z",
      "url": "https://files.pythonhosted.org/packages/bc/af/27a90d086b1b374e6efd5439617a5ad6d090dec7700484c17167c89307c4/riccipy-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}