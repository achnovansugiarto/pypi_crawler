{
  "info": {
    "author": "Carlos Eduardo de Andrade",
    "author_email": "ce.andrade@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "m ../<div align=\"center\">\n  <img src=\"https://github.com/ceandrade/brkga_mp_ipr_python/blob/master/docs/src/assets/logo_name_300.png\">\n</div>\n\nBRKGA-MP-IPR - Python version\n================================================================================\n\n<table>\n<tr>\n  <td>Build Status</td>\n  <td>\n    <a href=\"https://travis-ci.org/ceandrade/brkga_mp_ipr_python\">\n    <img src=\"https://travis-ci.org/ceandrade/brkga_mp_ipr_python.svg?branch=master\" alt=\"Build Status\" />\n    </a>\n  </td>\n</tr>\n<tr>\n  <td>Coverage Status</td>\n  <td>\n    <a href=\"https://coveralls.io/github/ceandrade/brkga_mp_ipr_python?branch=master\">\n    <img src=\"https://coveralls.io/repos/ceandrade/brkga_mp_ipr_python/badge.svg?branch=master&service=github\" alt=\"Coverage Status\" />\n    </a>\n  </td>\n</tr>\n<tr>\n  <td>codecov.io</td>\n  <td>\n    <a href=\"http://codecov.io/github/ceandrade/brkga_mp_ipr_python?branch=master\">\n    <img src=\"http://codecov.io/github/ceandrade/brkga_mp_ipr_python/coverage.svg?branch=master\" alt=\"codecov.io\" />\n    </a>\n  </td>\n</tr>\n<tr>\n  <td>Documentation</td>\n  <td>\n    <a href=\"https://ceandrade.github.io/brkga_mp_ipr_python\">\n    <img src=\"https://img.shields.io/badge/Tutorial-API-blue.svg\" alt=\"Documentation\" />\n    </a>\n  </td>\n</tr>\n<tr>\n  <td>License</td>\n  <td>\n    <a href=\"https://github.com/ceandrade/brkga_mp_ipr_python/blob/master/LICENSE.md\">\n    <img src=\"https://img.shields.io/badge/license-BSD--like-blue\" alt=\"License\" />\n    </a>\n  </td>\n</tr>\n</table>\n\nBRKGA-MP-IPR provides a _very easy-to-use_ framework for the\nMulti-Parent Biased Random-Key Genetic Algorithm with Implict Path Relink\n(**BRKGA-MP-IPR**). Assuming that your have a _decoder_ to your problem,\nwe can setup, run, and extract the value of the best solution in less than\n5 commands (obvisiously, you may need few other lines fo code to do a proper\ntest).\n\nThis Python version is very flexible and suitable for prototyping. However,\nit is not as fast as the\n[**C++ version**](https://github.com/ceandrade/brkga_mp_ipr_cpp) or the\n[**Julia version**](https://github.com/ceandrade/brkga_mp_ipr_julia).\nMoreover, due to Python Interpreter limitations (see\nhttps://wiki.python.org/moin/GlobalInterpreterLock), real multithread is\nnot possible, defeating the BRKGA's capability of parallel decoding, which\nspeeds up the optimization by large paces.\n\nIf Python is not suitable to you, we may find useful the\n[C++ version](https://github.com/ceandrade/brkga_mp_ipr_cpp) or the\n[Julia version](https://github.com/ceandrade/brkga_mp_ipr_julia) of this\nframework. At this moment, we have no plans to implement the BRKGA-MP-IPR in\nother languages such as Java or C#. But if you want to do so, you are must\nwelcome. But please, keep the API as close as possible to the C++ API (or\nJulia API in case you decide go C), and use the best coding and documentation\npractices of your chosen language/framework.\n\n- [**C++ version**](https://github.com/ceandrade/brkga_mp_ipr_cpp)\n- [**Julia version**](https://github.com/ceandrade/brkga_mp_ipr_julia)\n\nIf you are not familiar with how BRKGA works, take a look on\n[Standard BRKGA](http://dx.doi.org/10.1007/s10732-010-9143-1) and\n[Multi-Parent BRKGA](http://dx.doi.org/xxx).\nIn the future, we will provide a _Prime on BRKGA-MP_\nsection.\n\n:computer: Installation and tests\n--------------------------------------------------------------------------------\n\nBRKGA-MP-IPR was developed using >= Python 3.7.2, especially using the new\n`enum` capabilities. The parameters' loading and writing functions may fail\non Python 3.6 or previous versions. However, the main algorithm functions\nwork fine on Python 3.6, by providing BrkgaParams manually (or implementing\nyour own parameter loading).\n\nAssuming you have the correct Python version, the installation is pretty\nstraightforward using Pypi:\n\n```\n$ pip3.7 search brkga\nbrkga-mp-ipr (0.9)  - The Multi-Parent Biased Random-Key Genetic Algorithm with Implict Path Relink\n\n$ pip3.7 install brkga-mp-ipr\nCollecting brkga-mp-ipr\n...\nInstalling collected packages: brkga-mp-ipr\nSuccessfully installed brkga-mp-ipr-0.9\n\n$ python3.7\nPython 3.7.5 (default, Oct 19 2019, 01:20:12)\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from brkga_mp_ipr.types_io import load_configuration\n>>> from brkga_mp_ipr.algorithm import BrkgaMpIpr\n>>> BrkgaMpIpr\n<class 'brkga_mp_ipr.algorithm.BrkgaMpIpr'>\n>>> load_configuration\n<function load_configuration at 0x10620e320>\n>>> help(load_configuration)\nHelp on function load_configuration in module brkga_mp_ipr.types_io:\n\nload_configuration(configuration_file: str) -> (<class 'brkga_mp_ipr.types.BrkgaParams'>, <class 'brkga_mp_ipr.types.ExternalControlParams'>)\n    Loads the parameters from `configuration_file` returning them as a tuple.\n\n    Args:\n        configuration_file (str): plain text file containing the configuration.\n\n    Returns:\n        A tuple containing a `BrkgaParams` and a `ExternalControlParams` object.\n\n    Raises:\n        IsADirectoryError: If `configuration_file` is a folder.\n\n        FileNotFoundError: If `configuration_file` does not exist.\n\n        LoadError: In cases of missing data or bad-formatted data.\n```\n\nBRKGA-MP-IPR also provides a thorough unit testing that aims to harden and make\nthe code ready for production environments.\nYou can use builtin\n[unittest](https://docs.python.org/3.7/library/unittest.html),\nor yet [pytest](https://www.pytest.org)\nor [Tox](https://tox.readthedocs.io).\n\n> :information_source: **NOTE:**\n    The tests take about 10 minutes, mainly because the permutation path relink.\n\n> :warning: **Warning**:\n    It is a hard test to test algorithms that use random signals. In\n    BRKGA-MP-IPR, the tests are carefully designed to ensure repeatability. For\n    that, we use the Mersenne Twister\n    [[1]](https://en.wikipedia.org/wiki/Mersenne_Twister)\n    [[2]](http://dx.doi.org/10.1145/272991.272995) as our standard random\n    generator number engine, particularly the [version that comes with\n    Python 3.7](https://docs.python.org/3.7/library/random.html).\n    However, it may happen that such engine has slightly different\n    implementations across platforms and, therefore, the tests may fail. The\n    current version was tested on 64-bit platforms (Mac OS X, GNU/Linux, and\n    Windows 10).\n\n:zap: Usage - TL;DR\n--------------------------------------------------------------------------------\n\nThe best way to keep it short is to look in the\n[`examples`](https://github.com/ceandrade/brkga_mp_ipr_python/tree/master/examples/tsp) folder\non [the git repo.](https://github.com/ceandrade/brkga_mp_ipr_python)\nLet's take a look into\n[`main_minimal.py`](https://github.com/ceandrade/brkga_mp_ipr_python/blob/master/examples/tsp/main_minimal.py),\nwhich solves the\n[Traveling Salesman Problem (TSP)](https://en.wikipedia.org/wiki/Travelling_salesman_problem).\nThis is a trimmed copy:\n\n```python\nimport sys\n\nfrom brkga_mp_ipr.enums import Sense\nfrom brkga_mp_ipr.types_io import load_configuration\nfrom brkga_mp_ipr.algorithm import BrkgaMpIpr\n\nfrom tsp_instance import TSPInstance\nfrom tsp_decoder import TSPDecoder\n\ndef main() -> None:\n    if len(sys.argv) < 4:\n        print(\"Usage: python main_minimal.py <seed> <config-file> \"\n              \"<num-generations> <tsp-instance-file>\")\n        sys.exit(1)\n\n    seed = int(sys.argv[1])\n    configuration_file = sys.argv[2]\n    num_generations = int(sys.argv[3])\n    instance_file = sys.argv[4]\n\n    instance = TSPInstance(instance_file)\n\n    decoder = TSPDecoder(instance)\n\n    brkga_params, _ = load_configuration(configuration_file)\n\n    brkga = BrkgaMpIpr(\n        decoder=decoder,\n        sense=Sense.MINIMIZE,\n        seed=seed,\n        chromosome_size=instance.num_nodes,\n        params=brkga_params\n    )\n\n    brkga.initialize()\n\n    brkga.evolve(num_generations)\n\n    best_cost = brkga.get_best_fitness()\n    print(f\"Best cost: {best_cost}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nYou can identify the following basic steps:\n\n1. Create a data structure to hold your input data which is passed to the\n   decoder function (example\n   [`tsp_instance.py`](https://github.com/ceandrade/brkga_mp_ipr_python/blob/master/examples/tsp/tsp_instance.py)).\n   Note that you may not implement a data/instance class but load all needed\n   information directly on your decoder;\n\n2. Create a decoder class. The `decode()` method from this class\n   translates a chromosome (array of numbers in the interval [0, 1]) to a\n   solution for your problem. The decoder must return the solution value or cost\n   to be used as fitness by BRKGA (example\n   [`tsp_decoder.py`](https://github.com/ceandrade/brkga_mp_ipr_python/blob/master/examples/tsp/tsp_decoder.py)).\n   Note that the `decode()` method must have the following signature:\n\n   ```python\n   def decode(self, chromosome: BaseChromosome, rewrite: bool) -> float\n   ```\n\n   where `BaseChromosome` is a class inhereted from ``list``. In other words,\n   you can tread ``chromosome`` as a simple list of floats;\n\n3. Load the instance and other relevant data, and instantiate the decoder;\n\n4. Read the algorithm parameters using ``load_configuration()`` or create\n   a BrkgaParams object by hand;\n\n5. Create a ``BrkgaMpIpr`` algorithm object;\n\n6. Call `initialize()` to init the BRKGA state;\n\n7. Call `evolve()` to optimize;\n\n8. Call `get_best_fitness()` and/or `get_best_chromosome()` to\n   retrieve the best solution.\n\n[`main_minimal.py`](https://github.com/ceandrade/brkga_mp_ipr_python/blob/master/examples/tsp/main_minimal.py)\nprovides a very minimal example to understand the necessary steps to use the\nBRKGA-MP-IPR framework. However,\n[`main_complete.py`](https://github.com/ceandrade/brkga_mp_ipr_python/blob/master/examples/tsp/main_complete.py)\nprovides a full-featured code, handy for scientific use, such as\nexperimentation and paper writing. This code allows fine-grained control of\nthe optimization, shows several features of BRKGA-MP-IPR such as the resets,\nchromosome injection, and others. It also logs\nall optimization steps, _creating outputs easy to be parsed._ **You should use\nthis code for serious business and experimentation.**\n\n:books: Tutorial and full documentation\n--------------------------------------------------------------------------------\n\nCheck out the complete tutorial and API documentation:\nhttps://ceandrade.github.io/brkga_mp_ipr_python\n\n:black_nib: License and Citing\n--------------------------------------------------------------------------------\n\nBRKGA-MP-IPR uses a permissive BSD-like license and it can be used as it\npleases you. And since this framework is also part of an academic effort, we\nkindly ask you to remember to cite the originating paper of this work.\nIndeed, Clause 4 estipulates that \"all publications, softwares, or any other\nmaterials mentioning features or use of this software (as a whole package or\nany parts of it) and/or the data used to test it must cite the following\narticle explicitly:\":\n\n> C.E. Andrade. R.F. Toso, J.F. Gonçalves, M.G.C. Resende. The Multi-Parent\n> Biased Random-key Genetic Algorithm with Implicit Path Relinking. _European\n> Jornal of Operational Research_, To appear, 2019.\n> DOI https://doi.org/10.1016/j.ejor.2019.11.037\n\n[Check it out the full license.](https://github.com/ceandrade/brkga_mp_ipr_julia/blob/master/LICENSE.md)\n\n:construction_worker: TODO\n--------------------------------------------------------------------------------\n\nCoding side:\n\n- Implement the remaining population manipulation methods and tests\n  (short term);\n\n- Implement the path relinking methods and tests (long term).\n\nCI and tests side:\n\n- Configure Travis-Ci correctly, such that we can run tests on Mac OSX and\n  Windows too.\n\nDocumentation side:\n\n- Create a comprehensive tutorial as we did for C++ and Julia versions.\n\n:pencil2: Contributing\n--------------------------------------------------------------------------------\n\n[Contribution guidelines for this project](CONTRIBUTING.md)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ceandrade/brkga_mp_ipr_python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "brkga-mp-ipr",
    "package_url": "https://pypi.org/project/brkga-mp-ipr/",
    "platform": "",
    "project_url": "https://pypi.org/project/brkga-mp-ipr/",
    "project_urls": {
      "Homepage": "https://github.com/ceandrade/brkga_mp_ipr_python"
    },
    "release_url": "https://pypi.org/project/brkga-mp-ipr/0.9.1/",
    "requires_dist": [
      "dill (>=0.3.1.1) ; extra == 'test'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.7.2",
    "summary": "The Multi-Parent Biased Random-Key Genetic Algorithm with Implict Path Relink",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6195833,
  "releases": {
    "0.9": [],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ccb5096f5daf79b4fa989a4dbd5849850237d8eec4e54dd6f270c36481ccd04",
          "md5": "6514a0d6166e2d69fed0a02299ae9c81",
          "sha256": "945e4e21a0beb075982ad79558878b542bd70a162389c0ae7091dfc4ea73fe9b"
        },
        "downloads": -1,
        "filename": "brkga_mp_ipr-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6514a0d6166e2d69fed0a02299ae9c81",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.2",
        "size": 48604,
        "upload_time": "2019-11-25T17:27:39",
        "upload_time_iso_8601": "2019-11-25T17:27:39.425609Z",
        "url": "https://files.pythonhosted.org/packages/5c/cb/5096f5daf79b4fa989a4dbd5849850237d8eec4e54dd6f270c36481ccd04/brkga_mp_ipr-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5528bf73613b46dcee005d3240a1a999cd1a3a59fc914391faf323d905f608db",
          "md5": "c28bc9375ce09ad42ba7af19dcf97a2d",
          "sha256": "de83977fd7b9b3f7df1e3baf373d56f960745d8de74f832bd3ea620a123c8b31"
        },
        "downloads": -1,
        "filename": "brkga_mp_ipr-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c28bc9375ce09ad42ba7af19dcf97a2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.2",
        "size": 34528,
        "upload_time": "2019-11-25T17:27:40",
        "upload_time_iso_8601": "2019-11-25T17:27:40.848447Z",
        "url": "https://files.pythonhosted.org/packages/55/28/bf73613b46dcee005d3240a1a999cd1a3a59fc914391faf323d905f608db/brkga_mp_ipr-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ccb5096f5daf79b4fa989a4dbd5849850237d8eec4e54dd6f270c36481ccd04",
        "md5": "6514a0d6166e2d69fed0a02299ae9c81",
        "sha256": "945e4e21a0beb075982ad79558878b542bd70a162389c0ae7091dfc4ea73fe9b"
      },
      "downloads": -1,
      "filename": "brkga_mp_ipr-0.9.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6514a0d6166e2d69fed0a02299ae9c81",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.2",
      "size": 48604,
      "upload_time": "2019-11-25T17:27:39",
      "upload_time_iso_8601": "2019-11-25T17:27:39.425609Z",
      "url": "https://files.pythonhosted.org/packages/5c/cb/5096f5daf79b4fa989a4dbd5849850237d8eec4e54dd6f270c36481ccd04/brkga_mp_ipr-0.9.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5528bf73613b46dcee005d3240a1a999cd1a3a59fc914391faf323d905f608db",
        "md5": "c28bc9375ce09ad42ba7af19dcf97a2d",
        "sha256": "de83977fd7b9b3f7df1e3baf373d56f960745d8de74f832bd3ea620a123c8b31"
      },
      "downloads": -1,
      "filename": "brkga_mp_ipr-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c28bc9375ce09ad42ba7af19dcf97a2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.2",
      "size": 34528,
      "upload_time": "2019-11-25T17:27:40",
      "upload_time_iso_8601": "2019-11-25T17:27:40.848447Z",
      "url": "https://files.pythonhosted.org/packages/55/28/bf73613b46dcee005d3240a1a999cd1a3a59fc914391faf323d905f608db/brkga_mp_ipr-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}