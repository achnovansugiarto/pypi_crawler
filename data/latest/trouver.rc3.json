{
  "info": {
    "author": "Hyun Jong Kim",
    "author_email": "hyunjongkim96@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "trouver\n================\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\n- [Author’s academic\n  website](https://sites.google.com/wisc.edu/hyunjongkim)\n- [GitHub repository](https://github.com/hyunjongkimmath/trouver#readme)\n- [Documentation website](https://hyunjongkimmath.github.io/trouver/)\n- [pypi page](https://pypi.org/project/trouver/)\n\nMathematicians constantly need to learn and read about concepts with\nwhich they are unfamiliar. Keeping mathematical notes in an\n[`Obsidian.md`](https://obsidian.md/) vault can help with this learning\nprocess as `Obsidian.md`.\n\n## Disclaimer\n\nAt the time of this writing (01/18/2023), there is only one\nauthor/contributor of this library. Nevertheless, the author often\nrefers to himself as “the author”, “the authors”, or “the\nauthor/authors” in writing this library. Moreover, the author often uses\nthe [“editorial we”](https://en.wikipedia.org/wiki/We#Editorial_we) in\nwriting this library.\n\nUse this library at your own risk as using this library can write or\nmodify files in your computer and as the documentation of some\ncomponents of this library may be inaccurate or outdated. By using this\nlibrary, you agree that the author/authors of this library is/are not\nresponsible for any damages from this library and related components.\n\nThis library is still somewhere in-between prototype and alpha.\nMoreover, the library itself may be unstable and subject to abrupt\nchanges.\n\nThe author/authors of this library is/are also not affiliated with\n`Obsidian.md`, `fast.ai`, or `Hugging Face`.\n\n## Install\n\n``` python\n# TODO Write installation instructions\n```\n\n``` sh\npip install trouver\n```\n\nYou may also have to manually install other libraries which are required\nby the `fast.ai` and/or `Hugging Face` libraries.\n\n# How to use\n\n## Parse LaTeX documents and split them into parts\n\n`Trouver` can parse `LaTeX` documents and split them up into “parts”\nwhich are convenient to read in `Obsidian.md` and to take notes on. For\nexample, the following code splits up this\n[paper](https://arxiv.org/abs/2106.10586) in creates a folder in an\nObsidian.md vault\\[^4\\].\n\n``` python\nimport os\nfrom pathlib import Path\nimport shutil\nimport tempfile\n\nfrom trouver.helper import _test_directory, text_from_file\nfrom trouver.latex.convert import (\n    divide_preamble, divide_latex_text, custom_commands,\n    setup_reference_from_latex_parts\n)\n```\n\n``` python\n# This context manager is implemented to make sure that a temporary\n# folder is created and copies contents from `test_vault_5` in `nbs/_tests`,\n# only the contents of the temporary folder are modified, and \nwith (tempfile.TemporaryDirectory(prefix='temp_dir', dir=os.getcwd()) as temp_dir):\n    temp_vault = Path(temp_dir) / 'test_vault_5'\n    shutil.copytree(_test_directory() / 'test_vault_5', temp_vault)\n\n    sample_latex_file = _test_directory() / 'latex_examples' / 'kim_park_ga1dcmmc' / 'main.tex'\n    sample_latex_text = text_from_file(sample_latex_file)\n    preamble, _ = divide_preamble(sample_latex_text)\n    parts = divide_latex_text(sample_latex_text)\n    cust_comms = custom_commands(preamble)\n    vault = temp_vault\n    location = Path('') # The path relative to the vault of the directory in which to make the new folder containing the new notes.\n    reference_name = 'kim_park_ga1dcmmc'\n    author_names = ['Kim', 'Park']\n    \n    setup_reference_from_latex_parts(\n        parts, cust_comms, vault, location,\n        reference_name,\n        author_names)\n\n    # os.startfile(os.getcwd()) # This open the current working directory; find the temporary folder in here.\n    # input() # There should be an input prompt; make an input here when you are done viewing the\n```\n\n![The created folder in Obsidian.md looks like this in `Obsidian.md` The\ntext in magenta are links, each to a file in the `Obsidian.md`\nvault](.\\images/index_setup_reference_from_latex_parts_demonstration.png)\n\nWhile `Obsidian.md` is not strictly necessary to use `trouver` or to\nread and write the files created by `setup_reference_from_latex_parts`\n(in fact, any traditional file reader/writer can be used for such\npurposes), reading and writing the files on `Obsidian.md` can be\nconvenient.\n\n## ML model utilities\n\nWe have trained a few ML models to detect/predict and provide\ninformation about “short” mathematical text. These ML models are\navailable on [`Hugging Face`](https://huggingface.co/) and as such, they\ncan be downloaded to and used from one’s local machines. Please note\nthat ML models can be large and the locations that the Hugging Face\n[Transformers](https://huggingface.co/docs/transformers/index) library\ndownloads such models to can vary from machine to machine.\n\nFor each of these models, we may or may not have also written some\ninstructions on how to train similar models given appropriately\nformatted data[^1].\n\nNote that the data used to train these models contains mathematical text\npertaining mostly to fields closely related to number theory and\nalgebraic geometry.\n\n## Use an ML model to categorize and label the note types\n\nOne of these ML models predicts the type of a piece of mathematical\nwriting. For example, this model may predict that\n\n``` markdown\nLet $L/K$ be an field extension. An element $\\alpha \\in L$ is said to be algebraic over $K$ if there exists some polynomial $f(x) \\in K[x]$ such that $f(\\alpha) = 0$.\n```\n\nintroduces a definition. For the purposes of `trouver`, an `Obsidian.md`\nnote containing ought to be labeled with the `#_meta/definition` tag by\nadding the text `_meta/definition` to the `tags` field in the\nfrontmatter YAML metadata of the note:\n\n![In this note, there is a `_meta/definition` in the `tags` field in the\nfrontmatter YAML metadata of the\nnote](.\\images/index_example_of_a_note_with_meta_definition_tag.png)\n\nSee `markdown.obsidian.personal.machine_learning.information_note_types`\nfor more details.\n\nThis ML model is trained using the [fast.ai](https://www.fast.ai/)\nlibrary with the [ULMFiT\napproach](https://docs.fast.ai/tutorial.text.html#the-ulmfit-approach);\nsee `how_to.train_ml_model.fastai` for the steps taken to train this\nmodel. This ML model is also available on [Hugging\nFace](https://huggingface.co/) under the repository\n[hyunjongkimmath/information_note_type](https://huggingface.co/hyunjongkimmath/information_note_type)\n\nThe following code downloads the model into the local Hugging Face cache\n(if necessary) and loads the model.\n\n``` python\nimport pathlib\nfrom pathlib import WindowsPath\nimport platform\n\nfrom huggingface_hub import from_pretrained_fastai\n```\n\n``` python\nrepo_id = 'hyunjongkimmath/information_note_type'\n\n# There is a PosixPath problem when trying to load\n# the model on Windows; we get around this problem\n# within the `if` statement.\nif platform.system() == 'Windows':\n    temp = pathlib.PosixPath # See https://stackoverflow.com/questions/57286486/i-cant-load-my-model-because-i-cant-put-a-posixpath\n    pathlib.PosixPath = pathlib.WindowsPath\n    information_note_type_model = from_pretrained_fastai(repo_id)\n    pathlib.PosixPath = temp\nelse:\n    information_note_type_model = from_pretrained_fastai(repo_id)\n```\n\n    Fetching 4 files:   0%|          | 0/4 [00:00<?, ?it/s]\n\n``` python\nsample_prediction_1 = information_note_type_model.predict(r'Let $L/K$ be an field extension. An element $\\alpha \\in L$ is said to be algebraic over $K$ if there exists some polynomial $f(x) \\in K[x]$ such that $f(\\alpha) = 0$.')\nprint(sample_prediction_1) \nsample_prediction_2 = information_note_type_model.predict(r'Theorem. Let $q$ be a prime power. Up to isomorphism, there is exactly one field with $q$ elements.')\nprint(sample_prediction_2)\n```\n\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n\n    (['#_meta/definition', '#_meta/notation'], tensor([False, False, False, False, False, False,  True, False, False, False,\n             True, False, False, False]), tensor([1.9631e-03, 3.4931e-04, 1.7551e-02, 4.8163e-02, 5.7628e-06, 3.0610e-06,\n            9.6544e-01, 2.3179e-03, 2.4539e-03, 1.6170e-02, 5.8807e-01, 4.5185e-03,\n            2.5055e-04, 4.6183e-03]))\n\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n\n    (['#_meta/concept', '#_meta/proof'], tensor([False, False, False,  True, False, False, False, False, False, False,\n            False,  True, False, False]), tensor([3.4701e-03, 6.6588e-05, 7.8861e-02, 9.7205e-01, 8.8357e-06, 6.1183e-06,\n            9.5552e-02, 4.0747e-03, 2.7043e-04, 2.7545e-02, 1.3064e-02, 5.6198e-01,\n            1.5603e-04, 5.5122e-03]))\n\nAt the time of this writing (01/18/2023), the model seems to incorrect\npredict - in `sample_prediction_1` that the text introduces a\nnotation. - in `sample_prediction_2` that the text contains a proof.\n\n``` python\n# from trouver.markdown.obsidian.personal.machine_learning.information_note_types import\n```\n\nWhile one can make use of the model’s `predict` method as is, `trouver`\nalso provides functions which predict the types of mathematical text\nwritten in notes formatted in a specific way and record on these notes\nthe predictions made. This way, one can make the model predict once and\nuse these predictions for later, which can save computational resources.\n\n``` python\nfrom trouver.markdown.obsidian.vault import VaultNote\nfrom trouver.markdown.obsidian.personal.notes import notes_linked_in_notes_linked_in_note\nfrom trouver.markdown.obsidian.personal.machine_learning.information_note_types import automatically_add_note_type_tags\n```\n\n``` python\nwith (tempfile.TemporaryDirectory(prefix='temp_dir', dir=os.getcwd()) as temp_dir):\n    temp_vault = Path(temp_dir) / 'test_vault_8'\n    shutil.copytree(_test_directory() / 'test_vault_8', temp_vault)\n    reference = 'number_theory_reference_1'\n\n    index_note = VaultNote(temp_vault, name=f'_index_{reference}')\n    # `notes` below is a list of `VaultNote` objects.\n    # Also, the `notes_linked_in_note` function can be a useful\n    # alternative to the `notes_linked_in_notes_linked_in_note` function.\n    notes = notes_linked_in_notes_linked_in_note(index_note, as_dict=False)\n    \n    print(\"This is what one of the notes looks like before predicting its note type:\\n\\n\")\n    print(notes[0].text())\n\n    print(\"\\n\\nTagging notes\\n\\n\")\n    # Note that `information_note_type_model` was loaded previously.\n    automatically_add_note_type_tags(information_note_type_model, temp_vault, notes)\n\n    print(\"This is what the same note looks like after predicting its note type:\\n\\n\")\n    print(notes[0].text())\n\n    # os.startfile(os.getcwd()) # This opens the current working directory; find the temporary folder in here and explore it if desired.\n    # input() # There should be an input prompt; make an input here when you are done viewing the\n```\n\n    This is what one of the notes looks like before predicting its note type:\n\n\n    ---\n    cssclass: clean-embeds\n    aliases: [number_theory_reference_1_ring]\n    tags: [_meta/literature_note, _reference/number_theory_reference_1]\n    ---\n    # Ring[^1]\n\n    A **(commutative) ring** is a set $R$, equipped with two binary operators, denoted $+$ and $\\cdot$, such that the following hold:\n\n    1. $R$ is an abelian group under $+$ with identity element $0$.\n    2. $R$ is an commutative monoid under $\\cdot$ with identity element $1$.\n    3. For all $a,b,c \\in R$, we have $a \\cdot (b+c) = a \\cdot b + a \\cdot c$.\n\n    # See Also\n\n    # Meta\n    ## References\n    ![[_reference_number_theory_reference_1]]\n\n    ## Citations and Footnotes\n    [^1]: Kim, Definition 1.1, Page 1\n\n\n    Tagging notes\n\n\n    This is what the same note looks like after predicting its note type:\n\n\n    ---\n    cssclass: clean-embeds\n    aliases: [number_theory_reference_1_ring]\n    tags: [_meta/literature_note, _reference/number_theory_reference_1, _auto/_meta/definition]\n    ---\n    # Ring[^1]\n\n    A **(commutative) ring** is a set $R$, equipped with two binary operators, denoted $+$ and $\\cdot$, such that the following hold:\n\n    1. $R$ is an abelian group under $+$ with identity element $0$.\n    2. $R$ is an commutative monoid under $\\cdot$ with identity element $1$.\n    3. For all $a,b,c \\in R$, we have $a \\cdot (b+c) = a \\cdot b + a \\cdot c$.\n\n    # See Also\n\n    # Meta\n    ## References\n    ![[_reference_number_theory_reference_1]]\n\n    ## Citations and Footnotes\n    [^1]: Kim, Definition 1.1, Page 1\n\n## Use an ML model to find notations introduced in text\n\nAnother ML model predicts locations of notations introduced in text.\nThis model is trained as a categorizer - given a piece of mathematical\ntext in LaTeX in which a single LaTeX math mode string (surrounded\neither by the dollar sign `$` or double dollar signs `$$`) is surrounded\nby double asterisks `**`, the model should determine whether or not the\nLaTeX math mode string contains a newly introduced notation.\n\nFor example, suppose that we want to find notations introduced in the\nfollowing text:\n\n``` markdown\nLet $L/K$ be a Galois field extension. Its Galois group $\\operatorname{Gal}(L/K)$ is defined as the group of automorphisms of $L$ fixing $K$ pointwise.\n```\n\nOur approach is to consider each latex math mode strings in this text\n(of which there are 4: $L/K$, $\\operatorname{Gal}(L/K)$, $L$, and $K$),\nconsider the four alternate versions of this text in which double\nasterisks `**` are surround one of these math mode strings, and use the\nmodel to predict whether that math mode string contains a newly\nintroduced notation. In particular, we pass through the model the\nfollowing pieces of text:\n\n1.  \n\n``` markdown\nLet **$L/K$** be a Galois field extension. Its Galois group $\\operatorname{Gal}(L/K)$ is defined as the group of automorphisms of $L$ fixing $K$ pointwise.\n```\n\n2.  \n\n``` markdown\nLet $L/K$ be a Galois field extension. Its Galois group **$\\operatorname{Gal}(L/K)$** is defined as the group of automorphisms of $L$ fixing $K$ pointwise.\n```\n\n3.  \n\n``` markdown\nLet $L/K$ be a Galois field extension. Its Galois group $\\operatorname{Gal}(L/K)$ is defined as the group of automorphisms of **$L$** fixing $K$ pointwise.\n```\n\n4.  \n\n``` markdown\nLet $L/K$ be a Galois field extension. Its Galois group $\\operatorname{Gal}(L/K)$ is defined as the group of automorphisms of $L$ fixing **$K$** pointwise.\n```\n\nIdeally, the model should determine only the second version of text to\ncontain a newly introduced notation\n\nSee `markdown.obsidian.personal.machine_learning.notation_identifcation`\nfor more details.\n\nThis ML model is also trained using the `fast.ai` library with the\n[ULMFiT\napproach](https://docs.fast.ai/tutorial.text.html#the-ulmfit-approach),\nand is available on `Hugging Face` under the repository\n[hyunjongkimmath/notation_identification](https://huggingface.co/hyunjongkimmath/notation_identification).\n\n``` python\nimport pathlib\nfrom pathlib import WindowsPath\nimport platform\n\nfrom huggingface_hub import from_pretrained_fastai\n```\n\n``` python\nrepo_id = 'hyunjongkimmath/notation_identification'\n\n# There is a PosixPath problem when trying to load\n# the model on Windows; we get around this problem\n# within the `if` statement.\nif platform.system() == 'Windows':\n    temp = pathlib.PosixPath # See https://stackoverflow.com/questions/57286486/i-cant-load-my-model-because-i-cant-put-a-posixpath\n    pathlib.PosixPath = pathlib.WindowsPath\n    notation_identification_model = from_pretrained_fastai(repo_id)\n    pathlib.PosixPath = temp\nelse:\n    notation_identification_model = from_pretrained_fastai(repo_id)\n```\n\n    Fetching 4 files:   0%|          | 0/4 [00:00<?, ?it/s]\n\n``` python\ncontains_a_notation = notation_identification_model.predict(r'Let $L/K$ be a Galois field extension. Its Galois group **$\\operatorname{Gal}(L/K)$** is defined as the group of automorphisms of $L$ fixing $K$ pointwise.')\ndoes_not_contain_a_notation = notation_identification_model.predict(r'Let **$L/K$** be a Galois field extension. Its Galois group $\\operatorname{Gal}(L/K)$ is defined as the group of automorphisms of $L$ fixing $K$ pointwise.')\nprint(contains_a_notation)\nprint(does_not_contain_a_notation)\n```\n\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n\n\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n\n    ('True', tensor(1), tensor([9.0574e-08, 1.0000e+00]))\n    ('False', tensor(0), tensor([1.0000e+00, 4.8617e-06]))\n\n``` python\n# TODO: examples of using functions in markdown.obsidian.personal.machine_learning.notation_identifcation.\n```\n\nSimilarly as with the `information_note_type` model, `trouver` provides\nfunctions (namely `automatically_mark_notations`) which locate within\nnotes mathematical notations that are newly introduced in the text of\nthe notes and record on these notes locations of such notations (by\nsurrounding double asterisks `**` to LaTeX math mode strings). Note that\nthis is done by applying the `notation_identification` model’s `predict`\nmethod as many times on a single piece of text as there are LaTeX math\nmode strings in the text. As such, these predictions often take a long\ntime.\n\nTo save time, it is recommended to apply `automatically_mark_notations`\nonly on notes which have the `_meta/definition` or `_meta/notation` tags\n(or `_auto/_meta/definittion` or `_auto/_meta/notation`) in their\nfrontmatter YAML metadata[^2].\n\n> **Warning** The `automatically_mark_notations` function note only adds\n> double asterisks `**` to LaTeX math mode strings, but also removes\n> components such as links and footnotes from the text of the note. It\n> is recommended to only apply this function to notes whose text has not\n> been embellished with such components[^3].\n\nThe test vault used in the below example contains a single note which\nhas already been marked with the `_meta/definition` and `_meta/notation`\nnotes. The following example in particular locates notations in that\nnote at the very least.\n\n``` python\nfrom trouver.markdown.markdown.file import MarkdownFile\nfrom trouver.markdown.obsidian.vault import VaultNote\nfrom trouver.markdown.obsidian.personal.notes import notes_linked_in_notes_linked_in_note\nfrom trouver.markdown.obsidian.personal.machine_learning.notation_identification import automatically_mark_notations\n```\n\n``` python\nwith (tempfile.TemporaryDirectory(prefix='temp_dir', dir=os.getcwd()) as temp_dir):\n    temp_vault = Path(temp_dir) / 'test_vault_8'\n    shutil.copytree(_test_directory() / 'test_vault_8', temp_vault)\n    reference = 'number_theory_reference_1'\n\n    index_note = VaultNote(temp_vault, name=f'_index_{reference}')\n    # `notes` below is a list of `VaultNote` objects.\n    # Also, the `notes_linked_in_note` function can be a useful\n    # alternative to the `notes_linked_in_notes_linked_in_note` function.\n    notes = notes_linked_in_notes_linked_in_note(index_note, as_dict=False)\n    one_note_with_notation_tag = VaultNote(temp_vault, name='number_theory_reference_1_Definition 1.7')\n    \n    print(\"This is what one of the notes looks like before locating notations introduced:\\n\\n\")\n    print(one_note_with_notation_tag.text())\n\n    print(\"\\n\\nFinding notations\\n\\n\")\n    # Note that `information_note_type_model` was loaded previously.\n    automatically_add_note_type_tags(notation_identification_model, temp_vault, notes)\n\n    note_mfs = [MarkdownFile.from_vault_note(note) for note in notes]\n    # The below code ensures that the model searches for notations only in \n    # notes marked with a `_meta/definition` or a `_meta/notation`tag or\n    # their `_auto` versions. \n    notation_introducing_notes = [\n        note for note, mf in zip(notes, note_mfs)\n        if mf.has_tag('_auto/_meta/definition') or mf.has_tag('_auto/_meta/notation')\n        or mf.has_tag('_meta/definition') or mf.has_tag('_meta/notation')]\n    for note in notation_introducing_notes:\n        automatically_mark_notations(note, notation_identification_model, reference_name=reference)\n\n    print(\"This is what the same note looks like after locating notations introduced:\\n\\n\")\n    print(one_note_with_notation_tag.text())\n\n    # os.startfile(os.getcwd()) # This opens the current working directory; find the temporary folder in here and explore it if desired.\n    # input() # There should be an input prompt; make an input here when you are done viewing the\n```\n\n    This is what one of the notes looks like before locating notations introduced:\n\n\n    ---\n    cssclass: clean-embeds\n    aliases: [number_theory_reference_1_ring_of_integers_modulo_n]\n    tags: [_meta/literature_note, _reference/number_theory_reference_1, _meta/definition, _meta/notation]\n    ---\n    # Ring of integers modulo $n$[^1]\n    The ring of integers modulo $n$, denoted $\\mathbb{Z}/n\\mathbb{Z}$ has the elements $[m]$ for each integer $m$ where $[m_1] = [m_2]$ if and only if $m_1-m_2$ is divisible by $n$. As a ring, it has the following structure:\n\n    1. $[m_1] + [m_2] = [m_1+m_2]$\n    2. $[m_1] \\cdot [m_2] = [m_1 \\cdot m_2]$.\n\n\n    # See Also\n\n    # Meta\n    ## References\n    ![[_reference_number_theory_reference_1]]\n\n    ## Citations and Footnotes\n    [^1]: Kim, Definition 1.7, Page 3\n\n\n    Finding notations\n\n\n    This is what the same note looks like after locating notations introduced:\n\n\n    ---\n    cssclass: clean-embeds\n    aliases: [number_theory_reference_1_ring_of_integers_modulo_n]\n    tags: [_meta/literature_note, _auto/s, _auto/F, _meta/definition, _reference/number_theory_reference_1, _auto/a, _auto/e, _auto/l, _meta/notation]\n    ---\n    # Topic[^1]\n    The ring of integers modulo $n$, denoted **$\\mathbb{Z}/n\\mathbb{Z}$** has the elements $[m]$ for each integer $m$ where $[m_1] = [m_2]$ if and only if $m_1-m_2$ is divisible by $n$. As a ring, it has the following structure:\n\n    1. $[m_1] + [m_2] = [m_1+m_2]$\n    2. $[m_1] \\cdot [m_2] = [m_1 \\cdot m_2]$.\n\n    # See Also\n\n    # Meta\n    ## References\n    ![[_reference_number_theory_reference_1]]\n\n    ## Citations and Footnotes\n    [^1]: Kim, Definition 1.7, Page 3\n\n[^4]\n\n## Use an ML model to summarize notations introduced in text\n\nNow that we have found notations introduced in text and created notation\nnotes for them in our `Obisidian.md` vault, we now generate summaries\nfor these notations.\n\nThe ML model in question fine-tuned from a [`T5`\nmodel](https://huggingface.co/docs/transformers/model_doc/t5)\n\nThis ML model is available on `Hugging Face` under the repository\n[`hyunjongkimmath/notation_summarizations_model`](https://huggingface.co/hyunjongkimmath/notation_summarizations_model).\n\n``` python\nfrom transformers import AutoModelForSeq2SeqLM, AutoTokenizer, pipeline\n```\n\n``` python\nmodel = AutoModelForSeq2SeqLM.from_pretrained('hyunjongkimmath/notation_summarizations_model')\ntokenizer = AutoTokenizer.from_pretrained('hyunjongkimmath/notation_summarizations_model')\nsummarizer = pipeline('summarization', model=model, tokenizer=tokenizer)\n```\n\nThe summarizer pipeline can be used to summarize notations newly\nintroduced in a piece of mathematical text. The text needs to be\nformatted as follows:\n\n``` markdown\nsummarize: <mathematical_text_goes_here>\n\nlatex_in_original: $<notation_to_summarize>$\n```\n\n``` python\ntype(summarizer)\n```\n\n    transformers.pipelines.text2text_generation.SummarizationPipeline\n\n``` python\nsummarizer(\"summarize:Let us now define the upper half plane $\\mathbb{H}$ as the set of all complex numbers of real part greater than $1$.\\n\\n\\nlatex_in_original: $\\mathbb{H}$\")\n```\n\n    Your max_length is set to 200, but you input_length is only 54. You might consider decreasing max_length manually, e.g. summarizer('...', max_length=27)\n\n    [{'summary_text': 'the upper half plane of the complex plane $\\\\ mathbb{ H} $. It is defined as the set of all complex numbers of real part greater than $1$.'}]\n\nIn the above example, the summarizer determines that the notation\n`$\\mathbb{H}$` introduced in the text\n\n``` markdown\nLet us now define the upper half plane $\\mathbb{H}$ as the set of all complex numbers of real part greater than $1$.\n```\n\ndenotes\n`'the upper half plane of the complex plane $\\\\ mathbb{ H} $. It is defined as the set of all complex numbers of real part greater than $1$.'`.\n\nOnce we mark notations introduced in information notes by surrounding\nLaTeX math mode strings with double asterisks `**` (manually and/or by\nusing the `notation_identification` model, see [the section about the\n`notation_identification`\nmodel](#use-an-ml-model-to-find-notations-introduced-in-text) above), we\ncan use the `make_notation_notes_from_double_asts` function to make\nnotation notes dedicated to those introduced notations and to link these\nnewly created notation notes to the information notes.\n\nAfter making these notation notes, we can use the\n`append_summary_to_notation_note` function to predict what each notation\nis supposed to denote and add these predicted summaries to the notation\nnotes themselves.\n\nFor the example below, there is at least one information note with\nnotations already marked with double asterisks `**`.\n\n``` python\nfrom trouver.markdown.obsidian.personal.notation import make_notation_notes_from_double_asts, notation_notes_linked_in_see_also_section\nfrom trouver.markdown.obsidian.personal.machine_learning.notation_summarization import append_summary_to_notation_note\n```\n\n``` python\nwith (tempfile.TemporaryDirectory(prefix='temp_dir', dir=os.getcwd()) as temp_dir):\n    temp_vault = Path(temp_dir) / 'test_vault_8'\n    shutil.copytree(_test_directory() / 'test_vault_8', temp_vault)\n    reference = 'number_theory_reference_1'\n\n    index_note = VaultNote(temp_vault, name=f'_index_{reference}')\n    # Also, the `notes_linked_in_note` function can be a useful\n    # alternative to the `notes_linked_in_notes_linked_in_note` function.\n    notes = notes_linked_in_notes_linked_in_note(index_note, as_dict=False)\n    one_note_with_notations_marked = VaultNote(temp_vault, name='number_theory_reference_1_Definition 2.3')\n\n    print(\"This is what the information note looks like before we add the links to the notation notes:\\n\\n\")\n    print(one_note_with_notations_marked.text())\n\n    for note in notes:\n        new_notation_notes = make_notation_notes_from_double_asts(note, temp_vault, reference_name=reference)\n\n    print(\"\\n\\nThis is what the information note looks like after we add the links to the notation notes:\\n\\n\")\n    print(one_note_with_notations_marked.text())\n\n\n    for note in notes:\n        notation_notes_linked_in_note = notation_notes_linked_in_see_also_section(note, temp_vault)\n        for notation_note in notation_notes_linked_in_note:\n            append_summary_to_notation_note(notation_note, temp_vault, summarizer)\n\n    print(\"\\n\\nThis is what the newly created notation notes look like after we add the predicted summaries:\\n\\n\")\n    notation_notes_linked_in_the_one_note = notation_notes_linked_in_see_also_section(\n        one_note_with_notations_marked, temp_vault)\n    for notation_note in notation_notes_linked_in_note:\n        print(notation_note.text(), '\\n')\n```\n\n    Your max_length is set to 200, but you input_length is only 166. You might consider decreasing max_length manually, e.g. summarizer('...', max_length=83)\n\n    This is what the information note looks like before we add the links to the notation notes:\n\n\n    ---\n    cssclass: clean-embeds\n    aliases: []\n    tags: [_meta/literature_note, _reference/number_theory_reference_1, _meta/definition, _meta/notation]\n    ---\n    # Quotient ring of a ring by an ideal[^1]\n\n    Let $R$ be a ring and let $I$ be an ideal. The quotient ring **$R/I$** is the ring whose elements are the equivalence classes of elements of $R$ with respect to the equivalence relation **$\\sim$** given by $x \\sim y$ if $x-y \\in I$ and whose ring structure is given by\n\n    $$\\begin{align*}\n    [x]+[y] &= [x+y] \\\\\n    [x] \\cdot [y] &= [x \\cdot y].\n    \\end{align*}$$\n\n\n    # See Also\n\n    # Meta\n    ## References\n    ![[_reference_number_theory_reference_1]]\n\n    ## Citations and Footnotes\n    [^1]: Kim, \n\n\n    This is what the information note looks like after we add the links to the notation notes:\n\n\n    ---\n    cssclass: clean-embeds\n    aliases: []\n    tags: [_meta/literature_note, _reference/number_theory_reference_1, _meta/definition, _meta/notation]\n    ---\n    # Quotient ring of a ring by an ideal[^1]\n\n    Let $R$ be a ring and let $I$ be an ideal. The quotient ring **$R/I$** is the ring whose elements are the equivalence classes of elements of $R$ with respect to the equivalence relation **$\\sim$** given by $x \\sim y$ if $x-y \\in I$ and whose ring structure is given by\n\n    $$\\begin{align*}\n    [x]+[y] &= [x+y] \\\\\n    [x] \\cdot [y] &= [x \\cdot y].\n    \\end{align*}$$\n\n\n    # See Also\n    - [[number_theory_reference_1_notation_R_I]]\n    - [[number_theory_reference_1_notation_sim]]\n\n    # Meta\n    ## References\n    ![[_reference_number_theory_reference_1]]\n\n    ## Citations and Footnotes\n    [^1]: Kim, \n\n    Your max_length is set to 200, but you input_length is only 166. You might consider decreasing max_length manually, e.g. summarizer('...', max_length=83)\n\n\n\n    This is what the newly created notation notes look like after we add the predicted summaries:\n\n\n    ---\n    detect_regex: []\n    latex_in_original: [R/I]\n    tags: [_auto/notation_summary]\n    ---\n    $R/I$ [[number_theory_reference_1_Definition 2.3|denotes]] the quotient ring $R/I$ where $R$ is a ring and $I$ is an ideal. It is given by $$\\begin{align*} [x]+[y] &= [x+y]\\\\[x],\\cdot [y]$. [$][x]$ is the ring whose elements are the equivalence classes of elements of $R = [\\3]$ given by \n\n    ---\n    detect_regex: []\n    latex_in_original: [\"\\\\sim\"]\n    tags: [_auto/notation_summary]\n    ---\n    $\\sim$ [[number_theory_reference_1_Definition 2.3|denotes]] the quotient ring $R/I$ given by $x\\sim y$ where $R$ is a ring and $I$ is an ideal. \n\nAt the time of this writing (1/30/2023), the author of `trouver`\nbelieves that this summarization model could be improved upon with more\ndata; thus far, this model was trained on less than 1700 data points.\n\n# How the examples/tests are structured\n\nMany of the functions and methods in this library are accompanied by\nexamples demonstrating how one might use them.\n\nThese examples are usually also tests of the functions/methods; the\ndeveloper of this library can use `nbdev`’s\n[`nbdev_test`](https://nbdev.fast.ai/api/test.html#nbdev_test)\ncommand-line command to automatically run these tests[^5][^6]. Moreover,\nthere is a GitHub workflow in the repository for this library (see the\n`.github/workflows/test.yaml`) which automatically runs these\nexamples/tests on GitHub Actions when changes to are [committed to the\nGitHub repository](https://github.com/git-guides/git-commit)[^7].\n\nThese examples may use a combination of the following:\n\n- Mock patching via Python’s\n  [`unittest.mock`](https://docs.python.org/3/library/unittest.mock.html)\n  library.\n- The [`fastcore.test`](https://fastcore.fast.ai/test.html) module as\n  assertion statements.\n- example/test files in the `nbs/_tests` folder in the repository[^8].\n  - The `_test_directory()` function in the `helper` module obtains this\n    folder.\n  - Many of these examples also use the\n    [`tempfile.TemporaryDirectory`](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory)\n    class along with the\n    [`shutil.copytree`](https://docs.python.org/3/library/shutil.html#shutil.copytree)\n    to create a Python context manager of a temporary directory with\n    contents copied from the `nbs/_tests` folder. The temporary\n    directory is automatically deleted once the context manager ends. We\n    do this to run tests/examples which modify files/folders without\n    modifying the files/folders in the `nbs/_tests` directory\n    themselves.\n    - For example, the code\n\n    ``` python\n    with tempfile.TemporaryDirectory(prefix='temp_dir', dir=os.getcwd()) as temp_dir:\n        temp_vault = Path(temp_dir) / 'test_vault_1'\n        shutil.copytree(_test_directory() / 'test_vault_1', temp_vault)\n\n        # run the rest of the example here\n\n        # Uncomment the below lines of code to view the end-results of the example; \n        # os.startfile(os.getcwd())\n        # os.input()  # this line pauses the process until the user makes an input so the deletion of the temporary directory is delayed.\n    ```\n\n    first creates a temporary directory starting `temp_dir` in the\n    current working directory and copies into this temporary directory\n    the contents of `test_vault_1` in the `nbs/_tests` folder. One the\n    example/test has finished running, the temporary directory is\n    removed whether or not the test succeeds.\n\n## Miscellaneous\n\nThis repository is still in its preliminary stages and much of the code\nand documentation may be faulty or not well formatted. The author\ngreatly appreciates reports of these issues, notifications of typos, and\nsuggestions on edits; please feel free to report them on the `Issues`\nsection of the GitHub repository for this library. The\n[author](https://sites.google.com/wisc.edu/hyunjongkim) of this\nrepository, who is primarily a mathematician (a PhD student at the time\nof this writing), does not guarantee quick responses or resolutions to\nsuch issues, but will do his best to address them.\n\n# For developers\n\nThis repository is based on the [`nbdev`](https://nbdev.fast.ai/)\ntemplate. As such, code for the packages as well as the documentation\nfor the repository are written in jupyter notebooks (the `.ipynb` files\nin the `nbs` folder) and the Python modules are auto-generated via the\ncommand-line command\n[`nbdev_export`](https://nbdev.fast.ai/api/doclinks.html#nbdev_export)\n(or\n[`nbdev_prepare`](https://nbdev.fast.ai/tutorials/tutorial.html#prepare-your-changes),\nwhich among other things runs `nbdev_export`.).\n\n## Troubleshooting\n\n- In the `nbs/_tests` folder, make sure that the folders that you want\n  to test are not empty; since git does not track empty folders, empty\n  folders will not be pushed in GitHub and the tests in GitHub Actions\n  may yield different results than in a local computer.\n\n# Copyright\n\nCopyright © 2023 onward Hyun Jong Kim. Licensed under the Apache\nLicense, Version 2.0 (the “License”); you may not use this project’s\nfiles except in compliance with the License. A copy of the License is\nprovided in the LICENSE file in this repository.\n\n# Special Thanks\n\nThe author of `trouver` thanks [Sun Woo\nPark](https://sites.google.com/wisc.edu/spark483) for agreeing to allow\ntheir coauthored paper, [*Global $\\mathbb{A}^1$-degrees covering maps\nbetween modular curves*](https://arxiv.org/abs/2106.10586), along with\nsome of Park’s expository writings, to be used in examples in this\nlibrary.\n\n`trouver` was built using [`nbdev`](https://nbdev.fast.ai/) as a\ntemplate.\n\n# Release notes\n\n## Ver. 0\n\n#### Ver. 0.0.3\n\n- Fixed [issue \\#\n  32](https://github.com/hyunjongkimmath/trouver/issues/32) in which\n  setting up an `Obsidian.md` vault folder from a LaTeX document was not\n  numbering sections and theorem-like environments correctly with a\n  theorem-like environment of the form\n  `\\numbertheorem{theorem}{Theorem}[section]` was being defined.\n- Finished implementing `append_summary_to_notation_note`\n- Modified `dict_to_metadata` function to escape and enquote strings if\n  necessary to take into consideration that `yaml.safe_load` does uses\n  quotations to consider strings as escaped.\n- Fixed a bug in `notation_notes_linked_in_see_also_section` where the\n  main of notation where the `VaultNote` objects were incorrectly\n  constructed by passing an argument to the `rel_path` parameter as\n  opposed to the `name` parameter.\n- Fixed a bug in `_obsidian_vault_plugin_configs_file`; I had realized\n  that files for non-core `Obsidian.md` plugins are stored in\n  `.obsidian/plugins/<plugin_name>` in the vault directory.\n- Changed the default `template_location` argument from `'.'` to `'/'`\n  in `markdown.obsidian.personal.reference`.\n- Move `latex_to_path_accepted_string` function from\n  `20_markdown.obsidian.personal.notation.ipynb` to `00_helper.ipynb`\n- Modify `_consider_part_to_add` in `16_latex.convert` so that\n  multi-line section titles in LaTeX documents get parsed as single-line\n  titles\n- Modify `convert_title_to_folder_name` in\n  `12_markdown.obsidian.personal.index_notes.ipynb` and\n  `_create_note_for_part` in `16_latex.convert.ipynb` to use\n  `sanitize_filename`\n\n#### Ver. 0.0.2\n\n- I made the mistake of note including much of the contents of\n  `index.ipynb` in the `pypi` library release, so that should be fixed..\n\n#### Ver. 0.0.1\n\n- Initial release\n\n[^1]: Given time, the author of `trouver` eventually plans on writing\n    instructions on training each of the models.\n\n[^2]: At the time of this writing (1/30/2023), the\n    `information_note_type` model is fairly good at telling when a note\n    introduces a definition or a notation, but will often conflate the\n    two. In other words, the model may predict that a note ought to have\n    the `_meta/definition` tag assigned to it when the `_meta/notation`\n    tag should be assigned to it and vice versa, but the model will\n    fairly usually assign at least one of the tags when the note\n    introduces a definition or a notation and will assign neither of the\n    tags when the note does not introduce a definition or a notation.\n\n[^3]: More precisely, `automatically_mark_notations` first applies\n    `process_standard_information_note` to a `MarkdownFile` object\n    constructed from the `VaultNote` object to roughly obtain the “raw\n    text” of the note, uses that raw text to locate notations, marks the\n    notations in the raw text, and then replaces the text from the note\n    with the raw text with notations marked. In the process of obtaining\n    the “raw text”, the `process_standard_information_note` function\n    removes components such as links and footnotes from the text.\n\n[^4]: There seems to be a bug in the above example where inexplicable\n    tags (e.g. `_auto/s`, `_auto/a`) are added to the note along with\n    the double asterisks `**`. This issue is reported as [Issue\n    \\#33](https://github.com/hyunjongkimmath/trouver/issues/33).\n\n[^5]: cf. [nbdev’s End-To-End\n    Walkthrough](https://nbdev.fast.ai/tutorials/tutorial.html#add-your-own-examples-tests-and-docs)\n    to see how to use `nbdev_test`\n\n[^6]: There are also tests which are hidden from the documentation\n    website; one can find these tests in the jupyter notebook files in\n    the `nbs` folder in the repository for this library as notebook\n    cells marked with the `#| hide` flag, cf. [nbdev’s End-to-End\n    Walkthrough](https://nbdev.fast.ai/tutorials/tutorial.html#add-your-own-frontmatter)\n    to see what the `#| hide` flag does.\n\n[^7]: The `.github/workflows/test.yaml` GitHub workflow file is set up\n    in such a way that that allows GitHub Actions to access/use the\n    contents of the `nbs/_tests` directory upon running the\n    tests/examples.\n\n[^8]: The `.github/workflows/test.yaml` GitHub workflow file is set up\n    in such a way that that allows GitHub Actions to access/use the\n    contents of the `nbs/_tests` directory upon running the\n    tests/examples.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hyunjongkimmath/trouver",
    "keywords": "nbdev jupyter notebook python",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trouver",
    "package_url": "https://pypi.org/project/trouver/",
    "platform": null,
    "project_url": "https://pypi.org/project/trouver/",
    "project_urls": {
      "Homepage": "https://github.com/hyunjongkimmath/trouver"
    },
    "release_url": "https://pypi.org/project/trouver/0.0.3/",
    "requires_dist": [
      "deprecated",
      "fastai",
      "fastcore",
      "multiset",
      "natsort",
      "pandas",
      "pylatexenc",
      "pyyaml",
      "regex",
      "transformers",
      "pathvalidate ; extra == 'dev'",
      "torch ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Create and maintain mathematical Obsidian.md notes, and gather data from them to train ML models",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16634834,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58a9ea46d6ca25776ae417f5cd25197a4c4dbae443e3a2dc10cc6815ca1e3337",
          "md5": "e598c0876ddae7a4edcbfc49bcd739fb",
          "sha256": "a8981c6d5e1ef20b7351d970492b50d8cfeba3d6a6cfc971134630eaeade3f00"
        },
        "downloads": -1,
        "filename": "trouver-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e598c0876ddae7a4edcbfc49bcd739fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 107558,
        "upload_time": "2023-01-19T03:10:46",
        "upload_time_iso_8601": "2023-01-19T03:10:46.836339Z",
        "url": "https://files.pythonhosted.org/packages/58/a9/ea46d6ca25776ae417f5cd25197a4c4dbae443e3a2dc10cc6815ca1e3337/trouver-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ede53509d60e0f7fed9ca639fc78aaa1dac88b5513c4f2222ce1562a6b311010",
          "md5": "a43e20bd5143ada64d692c8843e55224",
          "sha256": "03e6f1906ba6eb1de5e585eb15abc8afa1e8c44ee4ec109c53981b2c28700dd6"
        },
        "downloads": -1,
        "filename": "trouver-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a43e20bd5143ada64d692c8843e55224",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 93419,
        "upload_time": "2023-01-19T03:10:50",
        "upload_time_iso_8601": "2023-01-19T03:10:50.621558Z",
        "url": "https://files.pythonhosted.org/packages/ed/e5/3509d60e0f7fed9ca639fc78aaa1dac88b5513c4f2222ce1562a6b311010/trouver-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5c163c9e5b3997b165ee09e72cbc7ee8c64dce76ad0e7e9a38de5ca30fb33db",
          "md5": "bb1de0c858686cbabcd04703fec9de99",
          "sha256": "36412b54617121d38542f1754d104d4c8a3c184fa8c15bb6c8e4381dd3049415"
        },
        "downloads": -1,
        "filename": "trouver-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb1de0c858686cbabcd04703fec9de99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 114634,
        "upload_time": "2023-01-19T03:19:52",
        "upload_time_iso_8601": "2023-01-19T03:19:52.996693Z",
        "url": "https://files.pythonhosted.org/packages/a5/c1/63c9e5b3997b165ee09e72cbc7ee8c64dce76ad0e7e9a38de5ca30fb33db/trouver-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b77af9e92427fa129cc8a9c8a7f4a83c0b564ba08940c4ed73ec912d1dbd9a3",
          "md5": "016f669cd6ff57e3a8db2940604b56c4",
          "sha256": "197a7c5478638e5825b2e0d1cad368dc97283b59dc784762c495bf690f35104a"
        },
        "downloads": -1,
        "filename": "trouver-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "016f669cd6ff57e3a8db2940604b56c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 106069,
        "upload_time": "2023-01-19T03:19:55",
        "upload_time_iso_8601": "2023-01-19T03:19:55.616395Z",
        "url": "https://files.pythonhosted.org/packages/8b/77/af9e92427fa129cc8a9c8a7f4a83c0b564ba08940c4ed73ec912d1dbd9a3/trouver-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6a73f1383ad7083b9d26c65dc5d552593a3f35f27abaf7e61b12b95bd32ef2a",
          "md5": "77871d071dc730dc051cadba94dba15b",
          "sha256": "e7a733ef73ca519442328590c767e5d87e55edd4d96dab7df220de6e7e4af958"
        },
        "downloads": -1,
        "filename": "trouver-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77871d071dc730dc051cadba94dba15b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 123097,
        "upload_time": "2023-01-31T13:55:35",
        "upload_time_iso_8601": "2023-01-31T13:55:35.020448Z",
        "url": "https://files.pythonhosted.org/packages/e6/a7/3f1383ad7083b9d26c65dc5d552593a3f35f27abaf7e61b12b95bd32ef2a/trouver-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd9c277f5b30e1d39728991ed49e1c3c8574d8fffce417c7d7812a8c8cf34b30",
          "md5": "a91af6e1e5d323c4db5719b10f0aad6c",
          "sha256": "9a49f791e965bf9e65f1d59ae355d2aa0f7b4688ceb3148584cce7c48be75815"
        },
        "downloads": -1,
        "filename": "trouver-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a91af6e1e5d323c4db5719b10f0aad6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 127940,
        "upload_time": "2023-01-31T13:55:37",
        "upload_time_iso_8601": "2023-01-31T13:55:37.585382Z",
        "url": "https://files.pythonhosted.org/packages/bd/9c/277f5b30e1d39728991ed49e1c3c8574d8fffce417c7d7812a8c8cf34b30/trouver-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6a73f1383ad7083b9d26c65dc5d552593a3f35f27abaf7e61b12b95bd32ef2a",
        "md5": "77871d071dc730dc051cadba94dba15b",
        "sha256": "e7a733ef73ca519442328590c767e5d87e55edd4d96dab7df220de6e7e4af958"
      },
      "downloads": -1,
      "filename": "trouver-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "77871d071dc730dc051cadba94dba15b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 123097,
      "upload_time": "2023-01-31T13:55:35",
      "upload_time_iso_8601": "2023-01-31T13:55:35.020448Z",
      "url": "https://files.pythonhosted.org/packages/e6/a7/3f1383ad7083b9d26c65dc5d552593a3f35f27abaf7e61b12b95bd32ef2a/trouver-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd9c277f5b30e1d39728991ed49e1c3c8574d8fffce417c7d7812a8c8cf34b30",
        "md5": "a91af6e1e5d323c4db5719b10f0aad6c",
        "sha256": "9a49f791e965bf9e65f1d59ae355d2aa0f7b4688ceb3148584cce7c48be75815"
      },
      "downloads": -1,
      "filename": "trouver-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a91af6e1e5d323c4db5719b10f0aad6c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 127940,
      "upload_time": "2023-01-31T13:55:37",
      "upload_time_iso_8601": "2023-01-31T13:55:37.585382Z",
      "url": "https://files.pythonhosted.org/packages/bd/9c/277f5b30e1d39728991ed49e1c3c8574d8fffce417c7d7812a8c8cf34b30/trouver-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}