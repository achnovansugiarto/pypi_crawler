{
  "info": {
    "author": "Evin Dunn",
    "author_email": "evin@scan-bugs.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pytcp_message\n[View on PyPI](https://pypi.org/project/pytcp-message/)\n\n[Read the docs](https://pytcp-message.readthedocs.io/en/stable/)\n\n[<img src=\"https://github.com/evindunn/pytcp_message/workflows/Test/Publish/badge.svg\">](https://github.com/evindunn/pytcp_message/actions?query=workflow%3ATest%2FPublish)\n[![Coverage Status](https://coveralls.io/repos/github/evindunn/pytcp_message/badge.svg?branch=master)](https://coveralls.io/github/evindunn/pytcp_message?branch=master)\n[![Documentation Status](https://readthedocs.org/projects/pytcp-message/badge/?version=latest)](https://pytcp-message.readthedocs.io/en/latest/?badge=latest)\n\nSends/receives messages in the following format:\n```text\n| 1 byte         | 8 bytes        |  ... |\n| is compressed? | content length | data |\n```\nMessages over 575 bytes are automatically compressed/decompressed with zlib\n\nThe main classes are [TcpServer](pytcp_message/TcpServer.py) and\n[TcpClient](pytcp_message/TcpClient.py), which use the above message format\nto communicate with each other.\n\nTCP response messages are implemented in [TcpMessages](pytcp_message/message/TcpMessage.py).\n`TcpMessage` has one member, `content`, which is the `bytes` content of the message \nthat will be sent. It also includes convenience methods for writing that content\nto and from a TCP socket using the above format.\n\n`TcpServer` opens a connection when a request comes in, then listens on that\nconnection until either the client closes the connection or `timeout` seconds, \npassed to the constructor, have elapsed. The default is 30. This allows multiple\nmessages to be sent without re-creating new connections.\n\nTCP request messages are implemented using [TcpRequests](pytcp_message/message/TcpMessage.py),\nwhich inherit from `TcpMessage`. `TcpRequests` include an additional member,\n`client_addr`, the requester's address. \n\nWhen a request comes in, `TcpServer` creates a `TcpRequest` object with the \nclient's address and content of the incoming message, along with an empty `TcpMessage` \nresponse. These objects are passed to a list of request handlers attached\nto the server. After all handlers have run, `TcpServer` sends the `TcpMessage`\nresponse object to the client.\n\nThis allows the server to implement a Chain of Responsibility similar to \nExpress/NodeJS. By passing objects to the various handlers, requests and \nresponses can be modified by each method in the chain.\n\nExample:\n```python\nimport time\n\nfrom pytcp_message import TcpServer, TcpClient\nfrom datetime import datetime\n\nADDR = \"127.0.0.1\"\nPORT = 8080\n\n\ndef log_request(req, _):\n    now = datetime.now().strftime(\"%F %T\")\n    print(\n        \"[{}] {} <-- {}\".format(\n            now,\n            req.get_client_address()[0],\n            req.get_content().decode(\"utf-8\")\n        )\n    )\n\n\ndef send_response(req, res):\n    res.set_content(\"You are {}:{}\".format(\n        *req.get_client_address()\n    ).encode(\"utf-8\"))\n\n\ndef log_response(req, res):\n    now = datetime.now().strftime(\"%F %T\")\n    print(\"[{}] {} --> {}\".format(\n        now,\n        res.get_content().decode(\"utf-8\"),\n        req.get_client_address()[0]\n    ))\n\n\ndef main():\n    send_message = \"Hello{}\"\n\n    tcpd = TcpServer(address=ADDR, port=PORT, timeout=5)\n    tcpd.add_request_handler(log_request)\n    tcpd.add_request_handler(send_response)\n    tcpd.add_request_handler(log_response)\n\n    tcpd.start()\n    print(\"Server running on tcp://{}:{}...\".format(ADDR, PORT))\n\n    tcpc = TcpClient((ADDR, PORT))\n\n    for i in range(0, 10):\n        print(\"Client sending '{}'...\".format(send_message.format(i)))\n        tcpc.send(send_message.format(i).encode(\"utf-8\"))\n        response = tcpc.receive()\n        print(\"Client Received: '{}'\\n\".format(response.decode(\"utf-8\")))\n\n    tcpc.stop()\n    print(\"Client closed connection.\")\n\n    tcpd.stop()\n    time.sleep(5)\n    print(\"Server stopped.\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nOutput:\n```text\nServer running on tcp://127.0.0.1:8080...\nClient sending 'Hello0'...\n[2020-06-19 21:01:28] 127.0.0.1 <-- Hello0\n[2020-06-19 21:01:28] You are 127.0.0.1:34360 --> 127.0.0.1\nClient Received: 'You are 127.0.0.1:34360'\n\nClient sending 'Hello1'...\n[2020-06-19 21:01:28] 127.0.0.1 <-- Hello1\n[2020-06-19 21:01:28] You are 127.0.0.1:34360 --> 127.0.0.1\nClient Received: 'You are 127.0.0.1:34360'\n\nClient sending 'Hello2'...\n[2020-06-19 21:01:28] 127.0.0.1 <-- Hello2\n[2020-06-19 21:01:28] You are 127.0.0.1:34360 --> 127.0.0.1\nClient Received: 'You are 127.0.0.1:34360'\n\nClient sending 'Hello3'...\n[2020-06-19 21:01:28] 127.0.0.1 <-- Hello3\n[2020-06-19 21:01:28] You are 127.0.0.1:34360 --> 127.0.0.1\nClient Received: 'You are 127.0.0.1:34360'\n\nClient sending 'Hello4'...\n[2020-06-19 21:01:28] 127.0.0.1 <-- Hello4\n[2020-06-19 21:01:28] You are 127.0.0.1:34360 --> 127.0.0.1\nClient Received: 'You are 127.0.0.1:34360'\n\nClient sending 'Hello5'...\n[2020-06-19 21:01:28] 127.0.0.1 <-- Hello5\n[2020-06-19 21:01:28] You are 127.0.0.1:34360 --> 127.0.0.1\nClient Received: 'You are 127.0.0.1:34360'\n\nClient sending 'Hello6'...\n[2020-06-19 21:01:28] 127.0.0.1 <-- Hello6\n[2020-06-19 21:01:28] You are 127.0.0.1:34360 --> 127.0.0.1\nClient Received: 'You are 127.0.0.1:34360'\n\nClient sending 'Hello7'...\n[2020-06-19 21:01:28] 127.0.0.1 <-- Hello7\n[2020-06-19 21:01:28] You are 127.0.0.1:34360 --> 127.0.0.1\nClient Received: 'You are 127.0.0.1:34360'\n\nClient sending 'Hello8'...\n[2020-06-19 21:01:28] 127.0.0.1 <-- Hello8\n[2020-06-19 21:01:28] You are 127.0.0.1:34360 --> 127.0.0.1\nClient Received: 'You are 127.0.0.1:34360'\n\nClient sending 'Hello9'...\n[2020-06-19 21:01:28] 127.0.0.1 <-- Hello9\n[2020-06-19 21:01:28] You are 127.0.0.1:34360 --> 127.0.0.1\nClient Received: 'You are 127.0.0.1:34360'\n\nClient closed connection.\nServer stopped.\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/evindunn/pytcp_message",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytcp-message",
    "package_url": "https://pypi.org/project/pytcp-message/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytcp-message/",
    "project_urls": {
      "Homepage": "https://github.com/evindunn/pytcp_message"
    },
    "release_url": "https://pypi.org/project/pytcp-message/0.1.9/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Client and server for TCP message passing",
    "version": "0.1.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7700247,
  "releases": {
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5de0ef1d223eea62e92dd7b296edaf9325b281b47f7f9565c2cd3f4fa2ea87c2",
          "md5": "4cdfbcade80b28411e4f3c1fab3bc213",
          "sha256": "677227d767b660bc936c0953d0b0126860f9445923ed13467ac073fd2c29e7d4"
        },
        "downloads": -1,
        "filename": "pytcp_message-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4cdfbcade80b28411e4f3c1fab3bc213",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8510,
        "upload_time": "2020-06-25T23:12:07",
        "upload_time_iso_8601": "2020-06-25T23:12:07.954789Z",
        "url": "https://files.pythonhosted.org/packages/5d/e0/ef1d223eea62e92dd7b296edaf9325b281b47f7f9565c2cd3f4fa2ea87c2/pytcp_message-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bbe882f8bde8af739afd20202b188f91a8a782114dc9720feb62e5a9a758083",
          "md5": "b7d782e5a06ccedbd541bd13abb7ffa6",
          "sha256": "27be39e3b38329e2d36dc5e8015c6ff85d75f780b15efb66aff46662a4e4a11d"
        },
        "downloads": -1,
        "filename": "pytcp_message-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7d782e5a06ccedbd541bd13abb7ffa6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8915,
        "upload_time": "2020-06-26T07:19:32",
        "upload_time_iso_8601": "2020-06-26T07:19:32.382780Z",
        "url": "https://files.pythonhosted.org/packages/7b/be/882f8bde8af739afd20202b188f91a8a782114dc9720feb62e5a9a758083/pytcp_message-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e6c234ddcd6c1cc9acaa33cdec9eff40e37ddb4da43cc093d9e84609c987bf4",
          "md5": "05069b80e1e43bb8d32b7614471d77eb",
          "sha256": "575da1185975d54ccbb1c3f04509687f5d5b8b9841809c53e29272abbbc90a72"
        },
        "downloads": -1,
        "filename": "pytcp_message-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05069b80e1e43bb8d32b7614471d77eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9204,
        "upload_time": "2020-07-14T19:54:02",
        "upload_time_iso_8601": "2020-07-14T19:54:02.825041Z",
        "url": "https://files.pythonhosted.org/packages/4e/6c/234ddcd6c1cc9acaa33cdec9eff40e37ddb4da43cc093d9e84609c987bf4/pytcp_message-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e6c234ddcd6c1cc9acaa33cdec9eff40e37ddb4da43cc093d9e84609c987bf4",
        "md5": "05069b80e1e43bb8d32b7614471d77eb",
        "sha256": "575da1185975d54ccbb1c3f04509687f5d5b8b9841809c53e29272abbbc90a72"
      },
      "downloads": -1,
      "filename": "pytcp_message-0.1.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "05069b80e1e43bb8d32b7614471d77eb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9204,
      "upload_time": "2020-07-14T19:54:02",
      "upload_time_iso_8601": "2020-07-14T19:54:02.825041Z",
      "url": "https://files.pythonhosted.org/packages/4e/6c/234ddcd6c1cc9acaa33cdec9eff40e37ddb4da43cc093d9e84609c987bf4/pytcp_message-0.1.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}