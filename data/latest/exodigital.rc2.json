{
  "info": {
    "author": "Ahmed Mohammed",
    "author_email": "ahmdsmhmmd@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3"
    ],
    "description": "ExoDigital\r\n~~~~~~~~~~\r\nA digital clock displays the weather and temperature of local and global cities \r\n\r\nFeatures:\r\n-\tDisplay the live time and date of the timezone in any city\r\n-\tDisplay the local time and date of the local pc time zone\r\n-\tDisplay the local time of two styles 24 hours or 12 hours am or pm  \r\n-\tDisplay the live weather and weather shape with descriptions of local and global cites\r\n-\tShows the Fahrenheit F and Celsius C temperature.\r\n-\tCustomize the date and time and weather function\r\n-\tCustomize the dark and daylight theme styles.\r\n-  its  tool to convert the temperature from Fahrenheit to Celsius or opposite\r\n-  its tool to convert from 12 hours to 24 hours or opposite\r\n-  its tool to respond to a piece of current condition information  of weather for 28 status optional \r\n\r\nUsage:\r\nExoDigital is used for default options or custom settings:\r\nExoDigital(is_dark=None, is24Hour=None,is_Fahrenheit=None,time_out_delay=1000,showlogs=True)\r\n\r\nFunctions implementing:\r\n- SetTime(hour,minute,seconds)#time is 24H style format from 0-24, its possible to set-hour only, [minutes,second] could be retrieved from a local pc.\r\n\r\n- SetDate(month,day) # set Month from 1-12, the day could be set from 1-31,or 30 depends on allowance month criteria.\r\n\r\n- SetWeather('city_name',live_timezone=False)\r\n   #could be a country name or city and should be a valid name, its could be use country code.\r\n\t# live_timezone: displays date and time of currently selected city name.\r\n\r\n-SetDateTime('city_name') #displays the timezone of that city only,its could be use country code as well.\r\n\r\n- SetWeather_custom('city_name',temperature,wather_index) \r\n   #wather_index should be from 0-9 as illustrated below:\r\n   0-Unknown or all types.\r\n\t1-Sunny.\r\n\t2-Cloudy.\r\n\t3-Rainy.\r\n\t4-Hard rainy.\r\n\t5-Snowy.\r\n\t6-Thunder rain.\r\n\t7-Thunder hard rain.\r\n\t8-Thunder.\r\n\t9-Partly Cloudy.\r\n\r\n-GetWeatherElements could retrieves the additional information of weather as text only.\r\n\r\n-GetDateElements is to obtain the date of the GUI exodigtail interface.\r\n\r\n-GetClockElements is to obtain the current time which is live data invoked.\r\n\r\nExample-1: in this example, the code shows when implementing the code below its displays only the \r\ndate and time of local pc  \r\nCode snapshot:========================\r\nfrom exoticwondrous import ExoDigital \r\nexo = ExoDigital()\r\nr = exo.RunAndWait()\r\nprint(r)#show any error occurred\r\n\r\n\r\nExample-2: In this example, the code shows when implementing the code below its displays the live weather of\r\n selected desired city with live information on weather and date and time of that city. \r\nCode snapshot:========================\r\nfrom exoticwondrous import ExoDigital\r\nexo=ExoDigital() # use a default configuration \r\nexo.SetWeather('Japan',True)\r\nr=exo.RunAndWait()\r\nprint(r)\r\n  \r\n\r\nExample-3: in this example, the code shows as an example by the typed US a country code to display the timezone of the United States of America,  with a dark (night) theme as well as displays the date and time in 12 format(default) in the capital city timezone.   \r\nCode snapshot:=======================\r\nfrom exoticwondrous import ExoDigital \r\nexo = ExoDigital(is_dark=True,is_Fahrenheit=True)\r\nexo.SetDateTime('US')# getting a capital city which is here a Washington DC timezone\r\nr = exo.RunAndWait()\r\nprint(r)#show any error occurred\r\n\r\n\r\nExample-4: in this example, the code shows when implementing the code below its displays the custom weather of\r\n with date and time of local pc time zone.   \r\nCode snapshot:=========================\r\nfrom exoticwondrous import ExoDigital \r\nexo = ExoDigital(is24Hour=True)\r\nexo.SetWeather_custom('New York',25,6)\r\nr = exo.RunAndWait()\r\nprint(r)\r\n\r\nExample-5: in this example, the code shows when implementing the code below its displays a custom date and time\r\nCode snapshot:=========================\r\nFrom exoticwondrous import ExoDigital \r\nexo = ExoDigital()# used a default configuration.\r\nexo.SetTime(10,10)\r\nexo.SetDate(1,10)\r\nr = exo.RunAndwait()\r\nprint(r)\r\n\r\n\r\nExample-6: in this example, the code shows when implementing the code below its displays a custom date and time\r\nCode snapshot:=========================\r\nFrom exoticwondrous import ExoDigital \r\nexo = ExoDigital()\r\nexo.SetTime(10,10)\r\nexo.SetDate(1,10)\r\nr = exo.RunAndwait()\r\nprint(r)\r\n\r\n\r\n\r\nExample-7: in this example, the code shows when implementing the code below its displays a temperature in Fahrenheit,\r\n         and the additional information, could be humidity,wind speed by Km/h,wind direction with sunrise and sunset times  \r\nCode snapshot:=========================\r\nexo=ExoDigital(is_Fahrenheit=1)\r\nexo.SetWeather('Japan',True)\r\nw= exo.GetWeatherElements(humidity=True,windspeedKmph=True,windDirection=True,sunrise=True,sunset=True)\r\nprint(w)\r\nr=exo.RunAndWait()\r\nprint(r)\r\n================================\r\nOutput: ['82', '20', 'SW', '05:17 AM', '06:08 PM']\r\n======================================\r\n\r\nExample-8: in this example, the code shows when implementing the code below its displays a temperature in Celsius,\r\n         and the additional information, could be all to be invoked.  \r\nCode snapshot:=========================\r\nexo=ExoDigital()\r\nexo.SetWeather('Japan',True)\r\nw= exo.GetWeatherElements(all=True)\r\nprint(w)\r\nr=exo.RunAndWait()\r\nprint(r)\r\n================================\r\nOutput: ['Japan', '82', '1', '82', 'Clear', '1013', '30', '0.0', '23', '2022-09-02 04:22 AM', '220', '20', '12', 'SW', 'Shikinejima', 'Tokyo', '34.327', '139.218', '0.0', '83', '77', '9.8', '05:17 AM', '09:26 PM', 'First Quarter', '10:51 AM', '06:08 PM', '42']\r\n======================================\r\n\r\nExample-9: in this example, the code shows a call-back function from 'exodital' GUI, so it's possible for\r\n           get its date information.  \r\nCode snapshot:=========================\r\n#function call-back of 'exodigital' GUI obtained its date \r\ndef fun_date (y,m,d):\r\n    print('{}/{}/{}'.format(y,m,d))\r\n\r\nexo=ExoDigital(is_Fahrenheit=True)\r\nexo.SetWeather('New York',True)\r\nfdate= exo.FUNC(fun_date)\r\nexo.GetDateElements(fdate)\r\nr=exo.RunAndWait()\r\nprint(r)\r\n================================\r\nOutput: 2022/9/1\r\n======================================\r\n\r\nExample-10: in this example, the code shows a call-back function from 'exodital' GUI, so it's possible for\r\n           get its real time information.  \r\nCode snapshot:=========================\r\n#function call-back of 'exodigital' GUI obtained its current time, this function will calling in realtime as used \r\ndef fun_time (h,m,s):\r\n    print('{}:{}.{}'.format(h,m,s))\r\n\r\nexo=ExoDigital(time_out_delay=5000)# use to increase time-out of display\r\nexo.SetWeather('New York',True)\r\nftime= exo.FUNC(fun_time)\r\nexo.GetClockElements(ftime)\r\nr=exo.RunAndWait()\r\nprint(r)\r\n================================\r\nOutput: 15:54.33\r\n        15:54.34\r\n        15:54.35\r\n\t\t  .. .. ..\r\n\t\t  .. .. ..\r\n======================================\r\n\r\n\r\nRequirements:\r\nthe modules [requests,pytz] should be installed automatically during package installation, however, if it's not installed, please install them manually,\r\n-pip install requests\r\n-pip install pytz\r\n\r\nif any error occurred of 'requests' module,try to solve them by install uplink as pre-required module for requests \r\n-pip install uplink\r\n\r\nQuestions and comments\r\nTelegram:https://t.me/exoticwondrous\r\nEmail:ahmdsmhmmd@gmail.com\r\n\r\nChange Log\r\n==========\r\n\r\n0.0.1 (08/08/2022)\r\n-------------------\r\n- First Release\r\n\r\n0.0.2 (08/09/2022)\r\n-------------------\r\n-- Fixed some bugs\r\n-- Fixed ExoDigital constructors's parameters\r\n-- Added parameter live_timezone to SetWeather function, for obtained time zone of typed city name.\r\n-- Added GetWeatherElements function so get more live-data of weather, such as max temperature,min temperature,\r\n         uvindex,humidity,pressure,pressure Inches,precipMM,cloudcover,local Observed DateTime,wind dir degree,\r\n         sun raise,sunset times, and more ..\r\n-- Added GetClockElements,GetDateElements functions for obtained information of clock and date of current\r\n        Exodigital GUI data.    \r\n-- Added SetDateTime for set any city and obtained tiemzone of that city only.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://t.me/exoticwondrous",
    "keywords": "Exo digital clock",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "exodigital",
    "package_url": "https://pypi.org/project/exodigital/",
    "platform": null,
    "project_url": "https://pypi.org/project/exodigital/",
    "project_urls": {
      "Homepage": "https://t.me/exoticwondrous"
    },
    "release_url": "https://pypi.org/project/exodigital/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A digital clock with displays the weather and temperature of local and global cities",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15028187,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2200cb2637c697a3318be6976d43152c18e5440d171d34a127737323b0e39878",
          "md5": "ee7a599a10a799c01386ef3c50fb81e8",
          "sha256": "397c1cf0ce986c1706cff3a38b04a551480a25ec4904af0e47d0d14aede8d576"
        },
        "downloads": -1,
        "filename": "exodigital-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ee7a599a10a799c01386ef3c50fb81e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2668299,
        "upload_time": "2022-08-08T20:12:01",
        "upload_time_iso_8601": "2022-08-08T20:12:01.675493Z",
        "url": "https://files.pythonhosted.org/packages/22/00/cb2637c697a3318be6976d43152c18e5440d171d34a127737323b0e39878/exodigital-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1541d99f7bc65a992a33d1e641d4be8a17a9a3f57784444df2253c0a94c04348",
          "md5": "021a26c345267cf0d1bda260482e6ac5",
          "sha256": "c72fd79f804dd8087567f21f671618e5d9df3b5e6d2276b105ae6f42638948f8"
        },
        "downloads": -1,
        "filename": "exodigital-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "021a26c345267cf0d1bda260482e6ac5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2658424,
        "upload_time": "2022-09-08T05:31:53",
        "upload_time_iso_8601": "2022-09-08T05:31:53.710839Z",
        "url": "https://files.pythonhosted.org/packages/15/41/d99f7bc65a992a33d1e641d4be8a17a9a3f57784444df2253c0a94c04348/exodigital-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1541d99f7bc65a992a33d1e641d4be8a17a9a3f57784444df2253c0a94c04348",
        "md5": "021a26c345267cf0d1bda260482e6ac5",
        "sha256": "c72fd79f804dd8087567f21f671618e5d9df3b5e6d2276b105ae6f42638948f8"
      },
      "downloads": -1,
      "filename": "exodigital-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "021a26c345267cf0d1bda260482e6ac5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2658424,
      "upload_time": "2022-09-08T05:31:53",
      "upload_time_iso_8601": "2022-09-08T05:31:53.710839Z",
      "url": "https://files.pythonhosted.org/packages/15/41/d99f7bc65a992a33d1e641d4be8a17a9a3f57784444df2253c0a94c04348/exodigital-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}