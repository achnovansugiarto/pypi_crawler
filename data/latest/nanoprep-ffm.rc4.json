{
  "info": {
    "author": "Chia-Chen Chu",
    "author_email": "jerry955071@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# NanoPreP: a fully-equipped, fast, and memory-efficient pre-processor for ONT transcriptomic data\n\n## Requirements\n* Python (>= 3.7)  \n* edlib (>=1.3.8) for Python\n\n## Getting started\n**Option 1:** use git clone and run NanoPreP as a python module without installation\n```\ngit clone https://github.com/Woodformation1136/NanoPreP.git\ncd NanoPreP\npython -m NanoPreP --help\n```\n**Option 2:** use pip install\n```\npip install nanoprep-ffm\nnanoprep --help\n```\n\n## How NanoPreP works\n### **Read annotation**  \nNanoPreP first annotates **locations of adapter/primer and polyA/T** on each input read using a **\"local-searching\"** method, and classifies each read as either **fusion, full-length or truncated** based on the adapter/primer locations.  \n\nFor the **\"local-searching\"** method, adapter/primer sequences (see section [How to specify adapter/primer and polyA/T sequences](#HOWTO)) are aligned to both (1) the **\"ideal searching locations\"** for adapter/primer (`isl5` and `isl3`) and (2) the **\"read body\"** between 5' and 3' ideal searching locations.\n\nBased on the alignment hits of adapter/primer, each read can be classified into one of the three categories:  \n1. **Fusion/chimeric**: reads with a adapter/primer hit on the **\"read body\"**\n2. **Full-length**: reads that are not **fusion/chimeric** and possess both **5' and 3' adapters/primers** on **5' and 3' \"ideal searching locations\"**, respecitvely.\n3. **Truncated**: reads that are not **fusion/chimeric** and not **full-length**.  \n\nDuring the annotation step, user can decide to skip low-quality or too-short reads using options `--skip_lowq` and `--skip_short` with the desired cutoff values, respectively. The skipped reads will not be annotated and will not be included in the final output file.\n\n### **Read processing: trimming, filtering and orientation**\nAfter the annotation steps, **trimming**, **filtering** and **orientation** can be performed on each read. \n- **Trimming** of adapter/primer and polyA/T sequences can be applied with the flags `--trim_adapter` and `--trim_poly`.  \n- **Filtering** of low-quality or too-short sequences (after trimming) can be performed using options `--filter_lowq` and `--filter_short` with desired cutoff values.   \n- **Orientation** of read strand to sense or antisense can be performed using option `--orientation`.\n\n### **Read output**\nFor the output options, user can choose to output **fusion/chimeric**, **full-length**, and/or **truncated** reads using options `--output_fusion`, `--output_full_length`, and `--output_truncated`, respectively, with assigned file names (or '-' to write to stdout).\n\n## General usage\nUse NanoPreP with the `standard` mode to get ***high-quality, non-chimeric, full-length, strand-oriented, adapter/primer-removed, polyA-removed*** reads:\n```\nnanoprep \\\n  --mode standard \\\n  --output_full_length output.fq \\\n  --report report.json \\\n  input.fq\n```\n- `--mode standard` ← run NanoPreP with `standard` mode (see section [Modes](#Modes))  \n- `--output_full_length output.fq` ← output full-length reads to `output.fq`  \n- `--report report.json` ← output details of the run to `report.json`  \n- `input.fq` ← input FASTQ  \n\n<!-- TODO: why annotate reads? re-usable, time-saving, transparency, flexibility -->\nAfter running this command, two output files `output.fq` and `report.json` will appear in your working directory.  The `report.json` records start/stop times, the parameters used, and the detail information of the input FASTQ file. The `output.fq` contains full-length reads processed by NanoPreP. For each processed read, NanoPreP appends the annotations to the ID line (the line started with @): \n```\n@read_1 strand=0.91 full_length=1 fusion=0 ploc5=0 ploc3=0 poly5=-1 poly3=0\nAGAGGCTGGCGGGAACGGGC......TTTCAAAGCCAGGCGGATTC\n+\n+,),+'$)'%671*%('&$%......((&'(*($%$&%&$-((84*\n```\nAs shown in the example above, several flags are used for the annotation: \n|flag|regex|default|explanation|\n|:-|-|-|:-|\n|`strand`|-?\\d+\\.\\d*|0|0: unknown; > 0: sense; < 0: antisense|\n|`full_length`|[0\\|1]|0|0: non-full-length; 1: full-length|\n|`fusion`|[0\\|1]|0|0: non-chimeric/-fusion; 1: chimeric/fusion|\n|`ploc5`|-?\\d+|-1|-1: unknown; 0: removed; > 0: 5' adapter/primer location|\n|`ploc3`|-?\\d+|-1|-1: unknown; 0: removed; > 0: 3' adapter/primer location|\n|`poly5`|-?\\d+|-1|-1: unknown; 0: removed; > 0: 5' polymer length|\n|`poly3`|-?\\d+|-1|-1: unknown; 0: removed; > 0: 3' polymer length|\n\nAccording to the annotation, the example \"read1\" is a sense strand (`strand=0.91`), full-length (`full_length=1`), non-chimeric (`fusion=0`),  adapter/primer removed (`ploc5=0 ploc3=0`), and polyA removed (`poly3=0`) read.\n\n## Modes <a id=\"Modes\"></a>\nIn addition to the `standard` mode, NanoPreP also provides other `mode` options for different usages:  \n1. **`standard`**: output ***high-quality, non-chimeric, full-length, strand-oriented, adapter/primer-removed, polyA-removed*** reads  \n   ```\n   nanoprep \\\n    --mode standard \\\n    --output_full_length output.fq \\\n    --report report.json \\\n    input.fq\n   ```\n2. **`annotate`**: annotate without skipping/trimming/filtering/orienting reads\n   ```\n   nanoprep --mode annotate input.fq > annotated.fq\n   ```\n3. **`report`**: generate report.json from NanoPreP-annotated FASTQ files\n   ```\n   nanoprep --mode report --report report.json annotated.fq \n   ```\n\nEach `mode` option applies multiple options at the same time, which can be detailed as follows:\n|mode|options|\n|:-|:-|\n|`standard`|```--discard_lowq 7 ```<br> ```--p5_sense TCGGTGTCTTTGTGTTTCTGTTGGTGCTGATATTGCTGGG``` <br>```--p3_sense A{100}GAAGATAGAGCGACAGGCAAGTCACAAAGACACCGACAAC``` <br>```--isl5 0 130``` <br>```--isl3 -60 -1``` <br>```--pid_isl 0.7``` <br>```--pid_body 0.7``` <br>```--poly_w 6``` <br>```--poly_k 4``` <br>```--filter_short 1``` <br>```--trim_adapter``` <br>```--trim_poly``` <br>```--orientation 1``` <br>```--output_full_length output.fq``` <br>```--report report.json```|\n|`annotate`|```--p5_sense TCGGTGTCTTTGTGTTTCTGTTGGTGCTGATATTGCTGGG``` <br>```--p3_sense A{100}GAAGATAGAGCGACAGGCAAGTCACAAAGACACCGACAAC``` <br>```--isl5 0 130``` <br>```--isl3 -60 -1``` <br>```--pid_isl 0.7``` <br>```--pid_body 0.7``` <br>```--poly_w 6``` <br>```--poly_k 4``` <br>```--orientation 0``` <br>```--output_fusion -``` <br>```--output_truncated -``` <br>```--output_full_length -``` <br>```--report report.json```|\n|`report`|```--disable_annot```<br>```--report report.json```|\n<br>\n\n## How to specify adapter/primer and polyA/T sequences <a id=\"HOWTO\"></a>\nTo perform read annotation, **adapter/primer** and **polyA/T** (if provided) sequences on the **sense strand** can be specified using options `--p5_sense` and `--p3_sense`. \n\nFor example, the following command means that the 5' and 3' adatper/primer sequences on the sense strand are 'CATTC' and 'GACTA', respectively.\n```\n--p5_sense CATTC --p3_sense GACTA\n```\nIf users wish to detect polyA/T tails, a pattern `N{M}` can be used to specify the location and length of polyA/T tails:\n```\n--p5_sense CATTC --p3_sense A{50}GACTA\n```\nThe command above means that there are poly`\"A\"` tails of maximum length `\"50\"` bp next to the 3' adapters/primers.\n\n\n## Full usage\n```\nusage: NanoPreP [-h] [--discard_lowq int] [--discard_short int]\n                [--disable_annot] [--p5_sense str] [--p3_sense str]\n                [--isl5 int int] [--isl3 int int] [--pid_isl float]\n                [--pid_body float] [--poly_w int] [--poly_k int]\n                [--orientation int] [--trim_adapter] [--trim_poly]\n                [--filter_short int] [--filter_lowq float]\n                [--mode [strandard|annotate|report]]\n                [--suffix_filtered str] [--report PATH] [--config PATH]\n                [--output_fusion PATH] [--output_truncated PATH]\n                [--output_full_length PATH]\n                input.fq\n\npositional arguments:\n  input.fq              input FASTQ  \n\ngeneral options:\n  -h, --help            show this help message and exit\n  --mode [strandard|annotate|report]\n                        use parameter presets (can be overriden by `config`\n                        and command line arguments)\n  --config PATH         use the parameters in this config file (JSON)(can be\n                        overriden by command line arguments)\n  --report PATH         output report file (JSON)\n\nannotation options:\n  --skip_lowq float     skip the annotation of low-quality reads (default: -1)\n  --skip_short int      skip the annotation of too-short reads (default: -1)\n  --disable_annot       use this flag to disable annotation\n  --p5_sense str        5' sense adatper/primer/polymer sequences\n  --p3_sense str        3' sense adatper/primer/polymer sequences\n  --isl5 int int        ideal searching location for 5' adapter/primer\n                        sequences (e.g. 1 130)\n  --isl3 int int        ideal searching location for 3' adapter/primer\n                        sequences (e.g. -60 -1)\n  --pid_isl float       adapter/primer percent identity cutoff (in ISL)\n  --pid_body float      adapter/primer percent identity cutoff (on read body)\n  --poly_w int          window size for homopolymer identification\n  --poly_k int          number of monomers to be expected in the window\n\nprocessing (trimming/filtering/orientation) options:\n  --trim_adapter        use this flag to trim adatper/primer sequences\n  --trim_poly           use this flag to trim homopolymers\n  --filter_lowq float   filter low-quality reads after all trimming steps\n                        (default: -1)\n  --filter_short int    filter too short reads after all trimming steps\n                        (default: -1)\n  --orientation int     re-orient reads (0: generic (default), 1: sense, -1:\n                        antisense)\n                        \noutput options:\n  --output_fusion PATH  output fusion/chimeric reads to this file (use '-' for\n                        stdout)\n  --output_truncated PATH\n                        output truncated/non-full-length reads to this file\n                        (use '-' for stdout)\n  --output_full_length PATH\n                        output full-length reads to this file (use '-' for\n                        stdout)\n  --suffix_filtered str\n                        output filtered reads with the suffix \n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Woodformation1136/NanoPreP",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nanoprep-ffm",
    "package_url": "https://pypi.org/project/nanoprep-ffm/",
    "platform": null,
    "project_url": "https://pypi.org/project/nanoprep-ffm/",
    "project_urls": {
      "Homepage": "https://github.com/Woodformation1136/NanoPreP"
    },
    "release_url": "https://pypi.org/project/nanoprep-ffm/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A fully-equipped, fast, and memory-efficient pre-processor for ONT transcriptomic data",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15090395,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "068187b393fdd4102a3e079113b9642127405702c6d6500a52aca6985d691055",
          "md5": "0d1856b470927891733cb65fbc3ffbb5",
          "sha256": "262bb3a20cfa5a1497780724c3f5e31444598c8da7b5d91221e8281ee8eb9f4c"
        },
        "downloads": -1,
        "filename": "nanoprep-ffm-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0d1856b470927891733cb65fbc3ffbb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12425,
        "upload_time": "2022-09-13T08:38:51",
        "upload_time_iso_8601": "2022-09-13T08:38:51.942708Z",
        "url": "https://files.pythonhosted.org/packages/06/81/87b393fdd4102a3e079113b9642127405702c6d6500a52aca6985d691055/nanoprep-ffm-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b313838901353f3f64e407c1a792f2d6fbb40369e6f64936c531185f012af630",
          "md5": "482f8b98842c3b7c9468f83817775537",
          "sha256": "04888cd61684a4b8e25142a698b6aeb514e81530dfd0c5f58d39abdfdd06f909"
        },
        "downloads": -1,
        "filename": "nanoprep-ffm-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "482f8b98842c3b7c9468f83817775537",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12466,
        "upload_time": "2022-09-13T08:48:32",
        "upload_time_iso_8601": "2022-09-13T08:48:32.822871Z",
        "url": "https://files.pythonhosted.org/packages/b3/13/838901353f3f64e407c1a792f2d6fbb40369e6f64936c531185f012af630/nanoprep-ffm-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dacb07101e761f0b9c768c3218d80882015a000275f493dcc9b1877b2103e927",
          "md5": "806f883a7c2f3e64ce215cdccee65da3",
          "sha256": "b9a02104d1ab01a24b7d3665b7ef01a76a25378a4439b49c5f151a5af2b6580c"
        },
        "downloads": -1,
        "filename": "nanoprep-ffm-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "806f883a7c2f3e64ce215cdccee65da3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12370,
        "upload_time": "2022-09-13T09:09:11",
        "upload_time_iso_8601": "2022-09-13T09:09:11.318091Z",
        "url": "https://files.pythonhosted.org/packages/da/cb/07101e761f0b9c768c3218d80882015a000275f493dcc9b1877b2103e927/nanoprep-ffm-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18953c75f46afe23e10c9eb4e55cde0b16a0b42582c731b14dd6ca7d6f9e101c",
          "md5": "95db4a10e679c12537bf1935f5f83b82",
          "sha256": "b86ccf3c849dd3068060f4124b289accd2a39c4e58563a33932328cda06c20ef"
        },
        "downloads": -1,
        "filename": "nanoprep-ffm-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "95db4a10e679c12537bf1935f5f83b82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12378,
        "upload_time": "2022-09-14T10:32:48",
        "upload_time_iso_8601": "2022-09-14T10:32:48.934648Z",
        "url": "https://files.pythonhosted.org/packages/18/95/3c75f46afe23e10c9eb4e55cde0b16a0b42582c731b14dd6ca7d6f9e101c/nanoprep-ffm-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18953c75f46afe23e10c9eb4e55cde0b16a0b42582c731b14dd6ca7d6f9e101c",
        "md5": "95db4a10e679c12537bf1935f5f83b82",
        "sha256": "b86ccf3c849dd3068060f4124b289accd2a39c4e58563a33932328cda06c20ef"
      },
      "downloads": -1,
      "filename": "nanoprep-ffm-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "95db4a10e679c12537bf1935f5f83b82",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12378,
      "upload_time": "2022-09-14T10:32:48",
      "upload_time_iso_8601": "2022-09-14T10:32:48.934648Z",
      "url": "https://files.pythonhosted.org/packages/18/95/3c75f46afe23e10c9eb4e55cde0b16a0b42582c731b14dd6ca7d6f9e101c/nanoprep-ffm-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}