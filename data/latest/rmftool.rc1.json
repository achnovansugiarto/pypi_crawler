{
  "info": {
    "author": "Nicolas Gast",
    "author_email": "nicolas.gast@inria.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# rmftool - A library to Compute (Refined) Mean Field Approximations\n\n\nThis python library implements algorithms to simulate and study population processes, to compute their mean-field approximations and refined mean-field approximations for the transient regime and steady-state.\n\n\n\nThe tool accepts three model types:\n* homogeneous population processes (HomPP)\n* density dependent population processes (DDPPs)\n* heterogeneous population models (HetPP)\n\nIn particular, it provides a numerical algorithm to compute the constant of the \"refined mean field approximation\" provided in the paper [A Refined Mean Field Approximation](https://hal.inria.fr/hal-01622054/document) by N. Gast and B. Van Houdt, accepted at SIGMETRICS 2018. And a framework to compute heterogeneous mean field approximations [Mean Field and Refined Mean Field Approximations for Heterogeneous Systems: It Works!](https://arxiv.org/pdf/2111.01594.pdf) by N. Gast and S. Allmeier, accepted at SIGMETRICS 2022.\n\n## Installation\n\n### Using Pip\n\n```\npip install rmftool\n```\n\n### Using Github\n\nClone the repository. For example by using the termin git client:\n```\ngit clone https://github.com/ngast/rmf_tool\n```\nthen manually add the package by using pip in the corresponding folder \n```\npip install .\n```\n\n## Documentation / Usage\n\nAn extensive description of the supported classes can be found in the publication [rmf tool – A library to Compute (Refined) Mean Field Approximation(s)](https://www.performance2021.deib.polimi.it/wp-content/uploads/2021/11/TOSME21_paper_2.pdf) by N. Gast and S. Allmeier. The example given in the publication can be found in the repository [https://gitlab.inria.fr/gast/toolpaper_rmf](https://gitlab.inria.fr/gast/toolpaper_rmf)\n\n### Homogeneous Population Process\n\nHomogeneous population model consists of $n$ interacting objects that each evolve in a finite state space $\\{1...d\\}$. All objects have similar transition rates which are a combination of unilateral and pairwise interactions, i.e. objects can change their state with or without interacting with one other member of the population. We assume that $X = (X_1...X_d)$ is a continuous time Markov chain whose transitions are such that for all state $s,s′, \\tilde{s}, \\tilde{s}′$:\n\n- (Unilateral) An object in state $s$ moves to state $s'$ at rate $a_{s,s'}$.\n- (Pairwise) A pair of objects in state $(s,\\tilde{s})$ moves to state $(s',\\tilde{s}')$ at rate $b_{s,\\tilde{s},s',\\tilde{s}'}/n$.\n\nHomogeneous population models is a subclass of density dependent population processes\n(DDPPs) defined in the following. \n\n### Density Dependent Population Process\n\n\nA density dependent process is a Markov chain that evolves in a sub-domain of $R^d$ where the transitions are given by a set $L$ and a list of rate-functions $\\beta_\\ell$. To a system with size $N$ a Markov chain is associated whose transitions are (for all $\\ell\\in L$):\n\n* $x \\mapsto x + \\frac 1N \\ell$ at rate $\\beta_\\ell(x)$\n\nThe class DDPP can be used to defined a process, via the functions ```add_transition(l, beta)```.\n\n\n### Heterogeneous Population Process\n\nAs before, the heterogeneous population model consists of $n$ interacting objects which each evolve in a finite state space $\\{1...d\\}$. Each object has a specific transition rate which is a combination of unilateral and pairwise interactions. In contrast to the HomPP, transition rates are object dependent:\n\n- The object $k$ moves from state $s$ to state $s'$ at rate $a_{k,s,s'}$.\n- The pair $(k,k')$ moves from states $(s,\\tilde{s})$ to states $(s',\\tilde{s}')$ at rate $b_{k,k',s,\\tilde{s},s',\\tilde{s}'}/n$.\n\n------\n\n### (Some) Available Methods\n\nIn order to obtain sample trajectories, mean field and refined mean field approximations the following methods can be used.\n\n| Description                         | Function DDPP \\& HomPP                               | Function HetPP                 |\n| ----------------------------------- | -------------------------------------------- | --------------------------------------- |\n| sample trajectoy                    | ```simulate(N, time)```                      | ``` simulate(time)```                   |\n| mean-field (or fluid) approximation | ```ode(time)```                              | ```ode(time)```                         |\n| refined mean-field  (transient)     | ```meanFieldExpansionTransient(time)```      | ```meanFieldExpansionTransient(time)``` |\n| refined mean-field (steady-state)   | ```meanFieldExpansionSteadyState()```        | ```meanFieldExpansionSteadyState()```   |\n| steady-state using simulation       | ```steady_state_simulation(N, time=20000)``` | -                                       |\n| sample Mean trajectory              | -                                            | ```sampleMean(time, samples=1000)```    |\n\n\nThe functions are documented and their documentation is accessible by the \"help\" command.\n\nApart from that, the **documentation** is mostly **contained in the [examples](#examples)** below (from basic to more advanced). \n\n\n\n### Computation time \n\n#### DDPP\n\nThe computation of the function ```meanFieldExpansionSteadyState``` grows as $d^3$, where d is the dimension of the model. When using the option ```symbolic_differentiation=True``` (default), it takes about 10 seconds for a 50-dimensional system, about 60 seconds for a 100-dimensional system. Note that for large models, most of the time is taken by the computation of the symbolic derivatives. This time can be reduced when using ```symbolic_differentiation=False``` to approximatively 4 sec for 50-dimensional systems and about 15 seconds for 100-dimensional systems (note: due to limitation of the lambdify function, the symbolic_differentiation=False cannot be used for systems with more than 255 dimensions). \n\n-----\n\nThe simulation of the underlying Markov chain is not optimized and therefore might be slow for large models. \n\n## Examples\n\n### Introductory example \n\nThe following code illustrates how to define a 2-dimensional model using the [DDPP](#density-dependent-population-process) class. It plots the mean-field approximation versus one sample trajectory. It then computes the refined mean-field approximation (in steady-state)\n\n```\nimport rmftool as rmf\n\nddpp = rmf.DDPP()\n\nddpp.add_transition([-1,1], lambda x : x[0])\nddpp.add_transition([1,-1], lambda x : x[1]+x[0]*x[1])\n\nddpp.set_initial_state([.5,.5])\n\nddpp.plot_ODE_vs_simulation(N=100)\n```\n\n### SIS model \n\nOne of the simplest examples of population process is the epidemic model called the SIS model. In an SIS model, each object can be in one of the two states $S$ (susceptible) or $I$ (infected). Susceptible objects can become infected from an external source (unilateral transition) or when meeting an infected individual (pairwise transition). An infected individual can recover and become susceptible again (unilateral transition). We assume that an individual becomes infected at rate $\\alpha$ by an external source, and recovers at rate $\\beta$. Moreover, assume that the rate at which two individuals meet is $\\gamma/n$ and that when a susceptible meets an infected individual, the susceptible gets infected. \n\nIn the following, we illustrate the setup using the different available classes.\n\n\n\nWith our tool, we define a class called HomPP for which we specify the transition rates and an initial state. For the SIS model above, with $\\alpha, \\beta, \\gamma = 1$, we write:\n\n#### Homogeneous Population Process (HomPP)\n\n```\nimport rmftool as rmf\n\nmodel = rmf.HomPP()\n\nd, S, I = 2, 0, 1\n\nA, B = np.zeros((d, d)), np.zeros((d, d, d, d)) \n\nA[S, I] = 1                 # unil. transitions from S to I (alpha)\nA[I, S] = 1                 # unil. transitions from I to S (beta)\nB[S, I, I, I] = 1           # pairwise transition from S to I (gamma)\n\nmodel.add_rate_tensors(A, B)\n\nmodel.set initial state([1,0])\n```\n\n\n#### Density Dependent Population Process (DDPP)\n\nUsing the class DDPP we can define density dependent population processes directly from their mathematical definition. For the above SIS example, we write: \n\n```\nimport rmftool as rmf\n\nmodel = rmf.DDPP()\n\nalpha, beta, gamma = 1, 1, 1\n\nmodel.add_transition([-1,1], lambda x: alpha*x[0])\nmodel.add_transition([1,-1], lambda x: beta*x[1])\nmodel.add_transition([-1,1], lambda x: gamma*x[0]*x[1])\n\nmodel.set initial state([1,0])\n```\n\n#### Heterogeneous Population Processs (HetPP)\n\nTo set up a heterogeneous version of the previous SIS model we use the HetPP class of the toolbox. In contrast to the HomPP and DDPP class, the model **can not** be defined independent of the system size, i.e., $n$ and $d$ have to be defined to initialize the model. For instance, to set up a SIS model where objects are almost identical but some recover slower than others, we can use the code:\n\n```\nimport rmftool as rmf\n\nmodel = rmf.HetPP()\n\nN, d = 20, 2\nS, I = 0, 1\n\nA, B = np.zeros((N, d, d)), np.zeros((N, N, d, d, d, d))\n\nA[:, S, I] = np.ones((N))\nA[:, I, S] = np.random.rand(N)   # Hetero. recovery rates\nB[:, :, S, I, I, I] = (1/N) * np.ones((N, N))\n\nmodel.add_rate_tensors(A, B)\n\nmodel.set_initial_state(np.ones((N,d))*np.array([1,0]))\n```\n\n------\n\nFollowing the setup the methods described in the subsection ['available functions'](#some-available-methods) can be used to analyze the model. We point to \n\n* [Simple SIR model](examples/BasicExample_SIR.ipynb)\n\nfor a more detailed discussion on how to use the toolbox. \n\n### Advanced examples\n\n* [2-choice model](examples/Example_2choice.ipynb) \n* [Non stable SIR](examples/Example_nonStableSIR.ipynb)\n* [Bike sharing system](examples/Example_bikeSharingSystem.ipynb)\n\nMore examples can be found in the [example directory](examples) and in the rmf_tool paper repository - [https://gitlab.inria.fr/gast/toolpaper_rmf/-/tree/master/code](https://gitlab.inria.fr/gast/toolpaper_rmf/-/tree/master/code).\n\n## Dependencies\n\nThis library depends on the following python library:\n\n* numpy\n* random\n* scipy\n* sympy \n* matplotlib.pyplot\n* jax\n\n## History\n* v0.5:\n  - (New feature) Added two new population classes (HomPP, HetPP) with support for simulation, mean field and first order refined mean field approximation \n* v0.2:\n  - (New feature) Support for multi-class variables\n  - (Optimization) Addition of an option to use a numerical differentiation\n* v0.1: original version \n\n**Copyright** 2017. **Authors** : Nicolas Gast, Emmanuel Rodriguez, Sebastian Allmeier\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ngast/rmf_tool",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rmftool",
    "package_url": "https://pypi.org/project/rmftool/",
    "platform": "",
    "project_url": "https://pypi.org/project/rmftool/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ngast/rmf_tool/issues",
      "Homepage": "https://github.com/ngast/rmf_tool"
    },
    "release_url": "https://pypi.org/project/rmftool/0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A library to Compute (Refined) Mean Field Approximations",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12348521,
  "releases": {
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e24d2312f89304036d910b422241aa07497d0e17f2a4592b34352ee79b8942ab",
          "md5": "b5afc6bb441bee8507b968eb00d14cb7",
          "sha256": "6e061ca0a094af7ad72fc305bd7ef4f9501093a1a00e491e197e27378205ca2b"
        },
        "downloads": -1,
        "filename": "rmftool-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5afc6bb441bee8507b968eb00d14cb7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21155,
        "upload_time": "2021-12-18T15:25:54",
        "upload_time_iso_8601": "2021-12-18T15:25:54.244705Z",
        "url": "https://files.pythonhosted.org/packages/e2/4d/2312f89304036d910b422241aa07497d0e17f2a4592b34352ee79b8942ab/rmftool-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "363a0a1be192bab686257d93617a0ca321827e39c3dbdfba013dc2adfc47b68d",
          "md5": "4912cee00cad80d248ee219c43989a8b",
          "sha256": "df7a2d1f9905c53bc872ab546450ad85a68a45260e6888602eed21aecb6a8f6d"
        },
        "downloads": -1,
        "filename": "rmftool-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4912cee00cad80d248ee219c43989a8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23636,
        "upload_time": "2021-12-18T15:25:55",
        "upload_time_iso_8601": "2021-12-18T15:25:55.777192Z",
        "url": "https://files.pythonhosted.org/packages/36/3a/0a1be192bab686257d93617a0ca321827e39c3dbdfba013dc2adfc47b68d/rmftool-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e24d2312f89304036d910b422241aa07497d0e17f2a4592b34352ee79b8942ab",
        "md5": "b5afc6bb441bee8507b968eb00d14cb7",
        "sha256": "6e061ca0a094af7ad72fc305bd7ef4f9501093a1a00e491e197e27378205ca2b"
      },
      "downloads": -1,
      "filename": "rmftool-0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b5afc6bb441bee8507b968eb00d14cb7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21155,
      "upload_time": "2021-12-18T15:25:54",
      "upload_time_iso_8601": "2021-12-18T15:25:54.244705Z",
      "url": "https://files.pythonhosted.org/packages/e2/4d/2312f89304036d910b422241aa07497d0e17f2a4592b34352ee79b8942ab/rmftool-0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "363a0a1be192bab686257d93617a0ca321827e39c3dbdfba013dc2adfc47b68d",
        "md5": "4912cee00cad80d248ee219c43989a8b",
        "sha256": "df7a2d1f9905c53bc872ab546450ad85a68a45260e6888602eed21aecb6a8f6d"
      },
      "downloads": -1,
      "filename": "rmftool-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "4912cee00cad80d248ee219c43989a8b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23636,
      "upload_time": "2021-12-18T15:25:55",
      "upload_time_iso_8601": "2021-12-18T15:25:55.777192Z",
      "url": "https://files.pythonhosted.org/packages/36/3a/0a1be192bab686257d93617a0ca321827e39c3dbdfba013dc2adfc47b68d/rmftool-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}