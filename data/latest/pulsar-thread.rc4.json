{
  "info": {
    "author": "hongbo liu",
    "author_email": "782027465@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pulsar-thread\n\n### 一、介绍\n一个连接pulsar消息队列的包，优点是：支持多线程生产和消费。\n\nA connect pulsar message queue package, support multi-threaded production and consumption.\n\n1.  本包是以pulsar-client为基础创建的\n2.  pulsar-client使用链接：https://pulsar.apache.org/docs/en/client-libraries-python/\n3.  默认 schema=pulsar.schema.StringSchema()\n4.  若想使用其他的schema， 使用方法与pulsar-client相同, 详情可看上面pulsar-client使用链接\n5.  默认的多线程最大数thread_count为5个\n\n### 二、使用说明\n\n#### 1. 连接 （client）\n\n     import pulsar_thread as pt\n     client = pt.client('pulsar://0.0.0.0:6655')\n     \n     #请将 0.0.0.0:6655 换成你的pulsar地址\n\n#### 2. 生产者（producer）\n\n     import json\n     import pulsar_thread as pt\n     \n     # 1. 连接client\n     client = pt.client('pulsar://0.0.0.0:6655')\n        \n     # 模拟要发送的数据\n     data = {'name':'jack', 'age':25, 'have': ['item1', 'item2']}\n     data2 = {'name':'rose', 'age':28, 'have': ['item1', 'item2']}\n     data3 = {'name':'joe', 'age':28, 'have': ['item1', 'item2']}\n     data4 = {'name':'mark', 'age':28, 'have': ['item1', 'item2']}\n     \n     # 2. 将要发送的数据和topic组合成字典\n     # {'topic_1': msg_1, ... , 'topic_n': msg_n}\n     \n     data_dict = {'test1':[json.dumps(data), json.dumps(data2)], 'test2':[json.dumps(data3), json.dumps(data4)]}\n     \n     # 3. 创建生产者\n     producer = client.create_producer()\n     \n     \n     # 4. 发送消息 \n     # 可选 4.1 同步发送send 或 4.2 异步发送send_async\n     \n     # 4.1 同步发送\n     # 可选 4.1.1 默认模式 或 4.1.2 自定义模式\n     \n     # 4.1.1 默认模式\n     # 默认参数：thread_count=5, schema=pulsar.schema.StringSchema()\n     # 默认多线程最大数thread_count为5个, schema是以StringSchema()字符串模式\n     \n     result = producer.send(data_dict)\n     \n     # 4.1.2 自定义模式\n     # schema参数设置规范详见pulsar-client的使用\n     \n     result = producer.send_async(data_dict,\n                                  thread_count=10,\n                                  schema=pulsar.schema.StringSchema()) \n     \n     # 4.2 异步发送\n     # 可选 4.2.1 默认模式 或 4.2.2 自定义模式\n     \n     # 4.2.1 默认模式\n     # 默认参数：callback=None, thread_count=5, schema=pulsar.schema.StringSchema()\n     # 默认回调函数callback为None, 多线程最大数thread_count为5个, schema是以StringSchema()字符串模式\n     \n     result = producer.send_async(data_dict)\n     \n     # 4.2.2 自定义模式（callback， schema参数设置规范详见pulsar-client的使用）\n     \n     result = producer.send_async(data_dict, \n                                  callback=None,\n                                  thread_count=10,\n                                  schema=pulsar.schema.StringSchema()) \n     \n\n#### 3.消费者（consumer）\n\n    import json\n    import pulsar_thread as pt\n\n    # 业务程序，处理消息队列发来的消息\n    # msg 是 接收的消息队列传来的消息\n    def deal_msg(msg):\n        print(msg.value())\n        import time\n        time.sleep(5)\n        print(json.loads(msg.data()))\n\n    # 1. 连接\n    client = pt.client('pulsar://0.0.0.0:6655')\n    \n    # 2. 创建consumer\n    # 可从多个 topic 里接收数据\n    # 默认接收的 schema=pulsar.schema.StringSchema()\n    # 格式：consumer = client.create_consumer(['topic_1', ......, 'topic_n'], 消费者的名字, schema=pulsar.schema.StringSchema())\n    \n    \n    consumer = client.create_consumer(['test1', 'test2'], 'my-subscription')\n    \n    \n    # 3. 接收数据并用业务程序（例：deal_msg）处理\n    # 可选 3.1  单线程处理 consumer.receive() 或 \n    # 3.2 多线程处理 consumer.receive_thread()\n    \n    \n    # 3.1  单线程处理\n    # 可选 3.1.1 默认模式 或 3.1.2 自定义模式\n    # 阻塞模式，消费一个，业务程序处理一个，业务程序处理完成，再消费下一个\n    \n    # 3.1.1 默认模式\n    # 默认参数：timeout_millis=None, logger=None\n    # 默认 订阅超时限制 timeout_millis(慎用) 为 None, 单位上ms\n    # 默认 日志收集器logger 为 None\n    \n    \n    consumer.receive(deal_msg)\n    \n    \n    # 3.1.2 自定义模式\n    \n    import logging,sys\n\n    def LogSet():\n        # 获取logger实例，如果参数为空则返回root logger\n        logger = logging.getLogger(\"test.log\")\n        # 指定logger输出格式\n        formatter = logging.Formatter('%(asctime)s %(pathname)s %(lineno)d %(levelname)-8s: %(message)s')\n        # 文件日志\n        file_handler = logging.FileHandler(\"./test.log\")\n        file_handler.setFormatter(formatter)  # 可以通过setFormatter指定输出格式\n        # 控制台日志\n        console_handler = logging.StreamHandler(sys.stdout)\n        console_handler.formatter = formatter  # 也可以直接给formatter赋值\n        # 为logger添加的日志处理器\n        logger.addHandler(file_handler)\n        logger.addHandler(console_handler)\n        # 指定日志的最低输出级别，默认为WARN级别\n        logger.setLevel(logging.DEBUG)\n        # 移除一些日志处理器\n        return logger, file_handler\n    \n    # 获取 logger\n    logger,_=LogSet()\n    \n    consumer.receive(deal_msg, timeout_millis=5000, logger=logger)\n    \n    # 3.2 多线程处理\n    # 可选 3.2.1 默认模式 或 3.2.2 自定义模式\n    # 可以使用多线程进行并发消费，处理业务数据，提高效率\n    \n    \n    # 3.2.1 默认模式\n    # 默认参数：thread_count=5, timeout_millis=None, logger=None\n    # 默认 最大线程数thread_count为5个\n    # 默认 订阅超时限制 timeout_millis(慎用) 为 None, 单位上ms\n    # 默认 日志收集器logger 为 None\n    \n    consumer.receive_thread(deal_msg)\n    \n    # 3.1.2 自定义模式\n    \n    # 例 1\n    consumer.receive_thread(deal_msg, 2)\n    \n    # 例 2\n    consumer.receive_thread(deal_msg, 10, timeout_millis=5000, logger=logger)\n\n\n### 三、使用 pulsar-client（pulsar.Client）连接时\n\npulsar_thread的create_producer和create_consumer的使用\n\n##### 1. 生产者（producer）\n\n\n    import json\n    import pulsar_thread as pt\n    import pulsar\n    \n    # 使用 pulsar 连接\n    client = pulsar.Client('pulsar://0.0.0.0:6655')\n    \n    data = {'name':'jack', 'age':25, 'have': ['item1', 'item2']}\n    data2 = {'name':'rose', 'age':28, 'have': ['item1', 'item2']}\n    data3 = {'name':'joe', 'age':28, 'have': ['item1', 'item2']}\n    data4 = {'name':'mark', 'age':28, 'have': ['item1', 'item2']}\n    \n    data_dict = {'test1':[json.dumps(data), json.dumps(data2)], 'test2':[json.dumps(data3), json.dumps(data4)]}\n    \n    # 使用 pulsar_thread 创建生产者\n    producer = pt.create_producer(client)\n    \n    result = producer.send(data_dict)\n    \n##### 2. 消费者（consumer）\n\n\n    import json\n    import pulsar_thread as pt\n    import pulsar\n    \n    \n    def deal_msg(msg):\n        print(msg.value())\n        import time\n        time.sleep(5)\n        print(json.loads(msg.data()))\n    \n    # 使用 pulsar 连接\n    client = pulsar.Client('pulsar://0.0.0.0:6655')\n    \n    # 使用 pulsar_thread 创建消费者\n    consumer = pt.create_consumer(client, ['test1', 'test2'], 'my-subscription')\n    \n    consumer.receive_thread(deal_msg, 2)\n    \n\n### 四、关于schema模式\n\n##### 1. schema支持的模式\n\n| schema | note |\n|:--------:|:-------------:|\n| BytesSchema | Get the raw payload as a bytes object. No serialization/deserialization are performed. This is the default schema mode |\n| StringSchema | Encode/decode payload as a UTF-8 string. Uses str objects |\n| JsonSchema | Require record definition. Serializes the record into standard JSON payload |\n| AvroSchema | Require record definition. Serializes in AVRO format |\n\n\n##### 2. schema参数用法和pulsar-client相同\n若想拓展使用schema，请移步至pulsar-client文档，阅读使用schema。\npulsar-client文档链接：https://pulsar.apache.org/docs/en/client-libraries-python/\n    \n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/maxbanana/pulsar",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pulsar-thread",
    "package_url": "https://pypi.org/project/pulsar-thread/",
    "platform": "",
    "project_url": "https://pypi.org/project/pulsar-thread/",
    "project_urls": {
      "Homepage": "https://gitee.com/maxbanana/pulsar"
    },
    "release_url": "https://pypi.org/project/pulsar-thread/0.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A connect pulsar message queue package, support multi-threaded production and consumption",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12153591,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6d5b998dbae00929a7fc14d4bac540b61eb1a9feb0157e8a1c134f418f284aa",
          "md5": "f92900749e93e070e16e80b787cb2ef4",
          "sha256": "89df0f96cce30ffa1e045bafb18913bead0cb0050a8f53a41109590e9b7cc1d6"
        },
        "downloads": -1,
        "filename": "pulsar-thread-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f92900749e93e070e16e80b787cb2ef4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9348,
        "upload_time": "2021-11-28T18:30:49",
        "upload_time_iso_8601": "2021-11-28T18:30:49.839455Z",
        "url": "https://files.pythonhosted.org/packages/e6/d5/b998dbae00929a7fc14d4bac540b61eb1a9feb0157e8a1c134f418f284aa/pulsar-thread-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00e78d7d35a025d609219405a153fa76610b7cf302a46cf773257244bd9c0547",
          "md5": "d790ac4e01f5acc388060f14afe5b636",
          "sha256": "4b1e504f44dec85e06bce3f1f979a69f4772f46aec75c0804a3b0d4c23319a07"
        },
        "downloads": -1,
        "filename": "pulsar-thread-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d790ac4e01f5acc388060f14afe5b636",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9452,
        "upload_time": "2021-11-29T11:20:32",
        "upload_time_iso_8601": "2021-11-29T11:20:32.622812Z",
        "url": "https://files.pythonhosted.org/packages/00/e7/8d7d35a025d609219405a153fa76610b7cf302a46cf773257244bd9c0547/pulsar-thread-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "380e72e997fc2475b8015c6a56b5b19612b2692f9d2da7478df8585b24e4b8b3",
          "md5": "f559b8b983c38df0f282679e8dceffcf",
          "sha256": "a94a1d28eb7e785ffd00c18c9354903ec7caa6647950917c9b42639b87bdf2aa"
        },
        "downloads": -1,
        "filename": "pulsar-thread-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f559b8b983c38df0f282679e8dceffcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9458,
        "upload_time": "2021-11-29T11:43:09",
        "upload_time_iso_8601": "2021-11-29T11:43:09.061128Z",
        "url": "https://files.pythonhosted.org/packages/38/0e/72e997fc2475b8015c6a56b5b19612b2692f9d2da7478df8585b24e4b8b3/pulsar-thread-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29f21048f79e0484aeb03565c4dfeca3f223ae5b2d77ac5f89b5db3474a4f7b5",
          "md5": "3bde27528282b91b83aea8988ccd40f7",
          "sha256": "f9737169c0bd489ec911ef8a968eb75a20cc4c172cffca7f1c3b06759f958571"
        },
        "downloads": -1,
        "filename": "pulsar-thread-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3bde27528282b91b83aea8988ccd40f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9437,
        "upload_time": "2021-11-29T11:47:41",
        "upload_time_iso_8601": "2021-11-29T11:47:41.453012Z",
        "url": "https://files.pythonhosted.org/packages/29/f2/1048f79e0484aeb03565c4dfeca3f223ae5b2d77ac5f89b5db3474a4f7b5/pulsar-thread-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29f21048f79e0484aeb03565c4dfeca3f223ae5b2d77ac5f89b5db3474a4f7b5",
        "md5": "3bde27528282b91b83aea8988ccd40f7",
        "sha256": "f9737169c0bd489ec911ef8a968eb75a20cc4c172cffca7f1c3b06759f958571"
      },
      "downloads": -1,
      "filename": "pulsar-thread-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3bde27528282b91b83aea8988ccd40f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9437,
      "upload_time": "2021-11-29T11:47:41",
      "upload_time_iso_8601": "2021-11-29T11:47:41.453012Z",
      "url": "https://files.pythonhosted.org/packages/29/f2/1048f79e0484aeb03565c4dfeca3f223ae5b2d77ac5f89b5db3474a4f7b5/pulsar-thread-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}