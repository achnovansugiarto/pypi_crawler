{
  "info": {
    "author": "iRODS Consortium",
    "author_email": "support@irods.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "=========================\nPython iRODS Client (PRC)\n=========================\n\n`iRODS <https://www.irods.org>`_ is an open source distributed data management system. This is a client API implemented in Python.\n\nCurrently supported:\n\n- Python 2.7, 3.4 or newer\n- Establish a connection to iRODS\n- Authenticate via password, GSI, PAM\n- iRODS connection over SSL\n- Implement basic GenQueries (select columns and filtering)\n- Support more advanced GenQueries with limits, offsets, and aggregations\n- Query the collections and data objects within a collection\n- Execute direct SQL queries\n- Execute iRODS rules\n- Support read, write, and seek operations for files\n- Parallel PUT/GET data objects\n- Create collections\n- Rename collections\n- Delete collections\n- Create data objects\n- Rename data objects\n- Checksum data objects\n- Delete data objects\n- Register files and directories\n- Query metadata for collections and data objects\n- Add, edit, remove metadata\n- Replicate data objects to different resource servers\n- Connection pool management\n- Implement GenQuery result sets as lazy queries\n- Return empty result sets when CAT_NO_ROWS_FOUND is raised\n- Manage permissions\n- Manage users and groups\n- Manage resources\n- Unicode strings\n- Ticket based access\n\n\nInstalling\n----------\n\nPRC requires Python 2.7 or 3.4+.\nCanonically, to install with pip::\n\n pip install python-irodsclient\n\nor::\n\n pip install git+https://github.com/irods/python-irodsclient.git[@branch|@commit|@tag]\n\nUninstalling\n------------\n\n::\n\n pip uninstall python-irodsclient\n\nHazard: Outdated Python\n--------------------------\nWith older versions of Python (as of this writing, the aforementioned 2.7 and 3.4), we\ncan take preparatory steps toward securing workable versions of pip and virtualenv by\nusing these commands::\n\n    $ pip install --upgrade --user pip'<21.0'\n    $ python -m pip install --user virtualenv\n\nWe are then ready to use any of the following commands relevant to and required for the\ninstallation::\n\n    $ python -m virtualenv ... \n    $ python -m pip install ...\n\n\nEstablishing a (secure) connection\n----------------------------------\n\nOne way of starting a session is to pass iRODS credentials as keyword arguments:\n\n>>> from irods.session import iRODSSession\n>>> with iRODSSession(host='localhost', port=1247, user='bob', password='1234', zone='tempZone') as session:\n...     # workload\n...\n>>>\n\nIf you're an administrator acting on behalf of another user:\n\n>>> from irods.session import iRODSSession\n>>> with iRODSSession(host='localhost', port=1247, user='rods', password='1234', zone='tempZone',\n           client_user='bob', client_zone='possibly_another_zone') as session:\n...     # workload\n...\n>>>\n\nIf no ``client_zone`` is provided, the ``zone`` parameter is used in its place.\n\nUsing environment files (including any SSL settings) in ``~/.irods/``:\n\n>>> import os\n>>> import ssl\n>>> from irods.session import iRODSSession\n>>> try:\n...     env_file = os.environ['IRODS_ENVIRONMENT_FILE']\n... except KeyError:\n...     env_file = os.path.expanduser('~/.irods/irods_environment.json')\n...\n>>> ssl_settings = {} # Or, optionally: {'ssl_context': <user_customized_SSLContext>}\n>>> with iRODSSession(irods_env_file=env_file, **ssl_settings) as session:\n...     # workload\n...\n>>>\n\nIn the above example, an SSL connection can be made even if no 'ssl_context' argument is specified,\nin which case the Python client internally generates its own SSLContext object to best\nmatch the iRODS SSL configuration parameters (such as \"irods_ssl_ca_certificate_file\",\netc.) used to initialize the iRODSSession.  Those parameters can be given either \nin the environment file, or in the iRODSSession constructor call as shown by the next example.\n\nA pure Python SSL session (without a local `env_file`) requires a few more things defined:\n\n>>> import ssl\n>>> from irods.session import iRODSSession\n>>> ssl_settings = {'client_server_negotiation': 'request_server_negotiation',\n...                'client_server_policy': 'CS_NEG_REQUIRE',\n...                'encryption_algorithm': 'AES-256-CBC',\n...                'encryption_key_size': 32,\n...                'encryption_num_hash_rounds': 16,\n...                'encryption_salt_size': 8,\n...                'ssl_context': ssl_context\n...                'ssl_verify_server': 'cert',\n...                'ssl_ca_certificate_file': '/etc/irods/ssl/irods.crt'\n... }\n\nIf necessary, a user may provide a custom SSLContext object; although, as of release v1.1.6, this will rarely be required:\n\n>>> ssl_settings ['ssl_context'] = ssl.create_default_context(purpose=ssl.Purpose.SERVER_AUTH, # ... other options\n... )\n\nAt this point, we are ready to instantiate and use the session:\n\n>>> with iRODSSession(host='irods-provider', port=1247, user='bob', password='1234', zone='tempZone', **ssl_settings) as session:\n...\t# workload\n\nNote that the :code:`irods_` prefix is unnecessary when providing the :code:`encryption_*` and :code:`ssl_*` options directly to the\nconstructor as keyword arguments, even though it is required when they are placed in the environment file.\n\nMaintaining a connection\n------------------------\n\nThe default library timeout for a connection to an iRODS Server is 120 seconds.\n\nThis can be overridden by changing the session `connection_timeout` immediately after creation of the session object:\n\n>>> session.connection_timeout = 300\n\nThis will set the timeout to five minutes for any associated connections.\n\nSession objects and cleanup\n---------------------------\n\nWhen iRODSSession objects are kept as state in an application, spurious SYS_HEADER_READ_LEN_ERR errors\ncan sometimes be seen in the connected iRODS server's log file. This is frequently seen at program exit\nbecause socket connections are terminated without having been closed out by the session object's \ncleanup() method.\n\nStarting with PRC Release 0.9.0, code has been included in the session object's __del__ method to call\ncleanup(), properly closing out network connections.  However, __del__ cannot be relied to run under all\ncircumstances (Python2 being more problematic), so an alternative may be to call session.cleanup() on\nany session variable which might not be used again.\n\n\nSimple PUTs and GETs\n--------------------\n\nWe can use the just-created session object to put files to (or get them from) iRODS.\n\n>>> logical_path = \"/{0.zone}/home/{0.username}/{1}\".format(session,\"myfile.dat\")\n>>> session.data_objects.put( \"myfile.dat\", logical_path)\n>>> session.data_objects.get( logical_path, \"/tmp/myfile.dat.copy\" )\n\nNote that local file paths may be relative, but iRODS data objects must always be referred to by\ntheir absolute paths.  This is in contrast to the ``iput`` and ``iget`` icommands, which keep\ntrack of the current working collection (as modified by ``icd``) for the unix shell.\n\n\nParallel Transfer\n-----------------\n\nStarting with release 0.9.0, data object transfers using put() and get() will spawn a number\nof threads in order to optimize performance for iRODS server versions 4.2.9+ and file sizes\nlarger than a default threshold value of 32 Megabytes.\n\n\nWorking with collections\n------------------------\n\n>>> coll = session.collections.get(\"/tempZone/home/rods\")\n\n>>> coll.id\n45798\n\n>>> coll.path\n/tempZone/home/rods\n\n>>> for col in coll.subcollections:\n>>>   print(col)\n<iRODSCollection /tempZone/home/rods/subcol1>\n<iRODSCollection /tempZone/home/rods/subcol2>\n\n>>> for obj in coll.data_objects:\n>>>   print(obj)\n<iRODSDataObject /tempZone/home/rods/file.txt>\n<iRODSDataObject /tempZone/home/rods/file2.txt>\n\n\nCreate a new collection:\n\n>>> coll = session.collections.create(\"/tempZone/home/rods/testdir\")\n>>> coll.id\n45799\n\n\nWorking with data objects (files)\n---------------------------------\n\nCreate a new data object:\n\n>>> obj = session.data_objects.create(\"/tempZone/home/rods/test1\")\n<iRODSDataObject /tempZone/home/rods/test1>\n\nGet an existing data object:\n\n>>> obj = session.data_objects.get(\"/tempZone/home/rods/test1\")\n>>> obj.id\n12345\n\n>>> obj.name\ntest1\n>>> obj.collection\n<iRODSCollection /tempZone/home/rods>\n\n>>> for replica in obj.replicas:\n...     print(replica.resource_name)\n...     print(replica.number)\n...     print(replica.path)\n...     print(replica.status)\n...\ndemoResc\n0\n/var/lib/irods/Vault/home/rods/test1\n1\n\n\nUsing the put() method rather than the create() method will trigger different policy enforcement points (PEPs) on the server.\n\nPut an existing file as a new data object:\n\n>>> session.data_objects.put(\"test.txt\",\"/tempZone/home/rods/test2\")\n>>> obj2 = session.data_objects.get(\"/tempZone/home/rods/test2\")\n>>> obj2.id\n56789\n\n\nSpecifying paths\n----------------\n\nPath strings for collection and data objects are usually expected to be absolute in most contexts in the PRC. They\nmust also be normalized to a form including single slashes separating path elements and no slashes at the string's end.\nIf there is any doubt that a path string fulfills this requirement, the wrapper class :code:`irods.path.iRODSPath`\n(a subclass of :code:`str`) may be used to normalize it::\n\n    if not session.collections.exists( iRODSPath( potentially_unnormalized_path )): #....\n\nThe wrapper serves also as a path joiner; thus::\n\n    iRODSPath( zone, \"home\", user )\n\nmay replace::\n\n    \"/\".join([\"\", zone, \"home\", user])\n\n:code:`iRODSPath` is available beginning with PRC release :code:`v1.1.2`.\n\n\nReading and writing files\n-------------------------\n\nPRC provides `file-like objects <http://docs.python.org/2/library/stdtypes.html#file-objects) for reading and writing files>`_\n\n>>> obj = session.data_objects.get(\"/tempZone/home/rods/test1\")\n>>> with obj.open('r+') as f:\n...   f.write('foo\\nbar\\n')\n...   f.seek(0,0)\n...   for line in f:\n...      print(line)\n...\nfoo\nbar\n\n\nComputing and Retrieving Checksums\n----------------------------------\n\nEach data object may be associated with a checksum by calling chksum() on the object in question.  Various\nbehaviors can be elicited by passing in combinations of keywords (for a description of which, please consult the\n`header documentation <https://github.com/irods/irods/blob/4-2-stable/lib/api/include/dataObjChksum.h>`_ .)\n\nAs with most other iRODS APIs, it is straightforward to specify keywords by adding them to an option dictionary:\n\n>>> data_object_1.chksum()  # - computes the checksum if already in the catalog, otherwise computes and stores it\n...                         #   (ie. default behavior with no keywords passed in.)\n>>> from irods.manager.data_object_manager import Server_Checksum_Warning\n>>> import irods.keywords as kw\n>>> opts = { kw.VERIFY_CHKSUM_KW:'' }\n>>> try:\n...     data_object_2.chksum( **opts )  # - Uses verification option. (Does not auto-vivify a checksum field).\n...     # or:\n...     opts[ kw.NO_COMPUTE_KW ] = ''\n...     data_object_2.chksum( **opts )  # - Uses both verification and no-compute options. (Like ichksum -K --no-compute)\n... except Server_Checksum_Warning:\n...     print('some checksums are missing or wrong')\n\nAdditionally, if a freshly created irods.message.RErrorStack instance is given, information can be returned and read by\nthe client:\n\n>>> from irods.message import RErrorStack\n>>> r_err_stk = RErrorStack()\n>>> warn = None\n>>> try:  # Here, data_obj has one replica, not yet checksummed.\n...     data_obj.chksum( r_error = r_err_stk , **{kw.VERIFY_CHKSUM_KW:''} )\n... except Server_Checksum_Warning as exc:\n...     warn = exc\n>>> print(r_err_stk)\n[RError<message = u'WARNING: No checksum available for replica [0].', status = -862000 CAT_NO_CHECKSUM_FOR_REPLICA>]\n\n\nWorking with metadata\n---------------------\n\nTo enumerate AVU's on an object. With no metadata attached, the result is an empty list:\n\n\n>>> from irods.meta import iRODSMeta\n>>> obj = session.data_objects.get(\"/tempZone/home/rods/test1\")\n>>> print(obj.metadata.items())\n[]\n\n\nWe then add some metadata.\nJust as with the icommand equivalent \"imeta add ...\", we can add multiple AVU's with the same name field:\n\n\n>>> obj.metadata.add('key1', 'value1', 'units1')\n>>> obj.metadata.add('key1', 'value2')\n>>> obj.metadata.add('key2', 'value3')\n>>> obj.metadata.add('key2', 'value4')\n>>> print(obj.metadata.items())\n[<iRODSMeta 13182 key1 value1 units1>, <iRODSMeta 13185 key2 value4 None>,\n<iRODSMeta 13183 key1 value2 None>, <iRODSMeta 13184 key2 value3 None>]\n\n\nWe can also use Python's item indexing syntax to perform the equivalent of an \"imeta set ...\", e.g. overwriting\nall AVU's with a name field of \"key2\" in a single update:\n\n\n>>> new_meta = iRODSMeta('key2','value5','units2')\n>>> obj.metadata[new_meta.name] = new_meta\n>>> print(obj.metadata.items())\n[<iRODSMeta 13182 key1 value1 units1>, <iRODSMeta 13183 key1 value2 None>,\n <iRODSMeta 13186 key2 value5 units2>]\n\n\nNow, with only one AVU on the object with a name of \"key2\", *get_one* is assured of not throwing an exception:\n\n\n>>> print(obj.metadata.get_one('key2'))\n<iRODSMeta 13186 key2 value5 units2>\n\n\nHowever, the same is not true of \"key1\":\n\n\n>>> print(obj.metadata.get_one('key1'))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/[...]/python-irodsclient/irods/meta.py\", line 41, in get_one\n    raise KeyError\nKeyError\n\n\nFinally, to remove a specific AVU from an object:\n\n\n>>> obj.metadata.remove('key1', 'value1', 'units1')\n>>> print(obj.metadata.items())\n[<iRODSMeta 13186 key2 value5 units2>, <iRODSMeta 13183 key1 value2 None>]\n\n\nAlternately, this form of the remove() method can also be useful:\n\n\n>>> for avu in obj.metadata.items():\n...    obj.metadata.remove(avu)\n>>> print(obj.metadata.items())\n[]\n\n\nIf we intended on deleting the data object anyway, we could have just done this instead:\n\n\n>>> obj.unlink(force=True)\n\n\nBut notice that the force option is important, since a data object in the trash may still have AVU's attached.\n\nAt the end of a long session of AVU add/manipulate/delete operations, one should make sure to delete all unused\nAVU's. We can in fact use any *\\*Meta* data model in the queries below, since unattached AVU's are not aware\nof the (type of) catalog object they once annotated:\n\n\n>>> from irods.models import (DataObjectMeta, ResourceMeta)\n>>> len(list( session.query(ResourceMeta) ))\n4\n>>> from irods.test.helpers import remove_unused_metadata\n>>> remove_unused_metadata(session)\n>>> len(list( session.query(ResourceMeta) ))\n0\n\nWhen altering a fetched iRODSMeta, we must copy it first to avoid errors, due to the fact the reference\nis cached by the iRODS object reference.  A shallow copy is sufficient:\n\n>>> meta = album.metadata.items()[0]\n>>> meta.units\n'quid'\n>>> import copy; meta = copy.copy(meta); meta.units = 'pounds sterling'\n>>> album.metadata[ meta.name ] = meta\n\nFortunately, as of PRC >= 1.1.4, we can simply do this instead:\n\n>>> album.metadata.set( meta )\n\nIn versions of iRODS 4.2.12 and later, we can also do:\n\n>>> album.metadata.set( meta, **{kw.ADMIN_KW: ''} )\n\nor even:\n\n>>> album.metadata(admin = True)[meta.name] = meta\n\nIn v1.1.5, the \"timestamps\" keyword is provided to enable the loading of create and modify timestamps\nfor every AVU returned from the server:\n\n>>> avus = album.metadata(timestamps = True).items()\n>>> avus[0].create_time\ndatetime.datetime(2022, 9, 19, 15, 26, 7)\n\nAtomic operations on metadata\n-----------------------------\n\nWith release 4.2.8 of iRODS, the atomic metadata API was introduced to allow a group of metadata add and remove\noperations to be performed transactionally, within a single call to the server.  This capability can be leveraged in\nversion 0.8.6 of the PRC.\n\nSo, for example, if 'obj' is a handle to an object in the iRODS catalog (whether a data object, collection, user or\nstorage resource), we can send an arbitrary number of AVUOperation instances to be executed together as one indivisible\noperation on that object:\n\n>>> from irods.meta import iRODSMeta, AVUOperation\n>>> obj.metadata.apply_atomic_operations( AVUOperation(operation='remove', avu=iRODSMeta('a1','v1','these_units')),\n...                                       AVUOperation(operation='add', avu=iRODSMeta('a2','v2','those_units')),\n...                                       AVUOperation(operation='remove', avu=iRODSMeta('a3','v3')) # , ...\n... )\n\nThe list of operations will applied in the order given, so that a \"remove\" followed by an \"add\" of the same AVU\nis, in effect, a metadata \"set\" operation.  Also note that a \"remove\" operation will be ignored if the AVU value given\ndoes not exist on the target object at that point in the sequence of operations.\n\nWe can also source from a pre-built list of AVUOperations using Python's `f(*args_list)` syntax. For example, this\nfunction uses the atomic metadata API to very quickly remove all AVUs from an object:\n\n>>> def remove_all_avus( Object ):\n...     avus_on_Object = Object.metadata.items()\n...     Object.metadata.apply_atomic_operations( *[AVUOperation(operation='remove', avu=i) for i in avus_on_Object] )\n\n\nSpecial Characters\n------------------\n\nOf course, it is fine to put Unicode characters into your collection and data object names.  However, certain\nnon-printable ASCII characters, and the backquote character as well, have historically presented problems -\nespecially for clients using iRODS's human readable XML protocol.  Consider this small, only slighly contrived,\napplication:\n::\n\n    from irods.test.helpers import make_session\n\n    def create_notes( session, obj_name, content = u'' ):\n        get_home_coll = lambda ses: \"/{0.zone}/home/{0.username}\".format(ses)\n        path = get_home_coll(session) + \"/\" + obj_name\n        with session.data_objects.open(path,\"a\") as f:\n            f.seek(0, 2) # SEEK_END\n            f.write(content.encode('utf8'))\n        return session.data_objects.get(path)\n\n    with make_session() as session:\n\n        # Example 1 : exception thrown when name has non-printable character\n        try:\n            create_notes( session, \"lucky\\033.dat\", content = u'test' )\n        except:\n            pass\n\n        # Example 2 (Ref. issue: irods/irods #4132, fixed for 4.2.9 release of iRODS)\n        print(\n            create_notes( session, \"Alice`s diary\").name  # note diff (' != `) in printed name\n        )\n\n\nThis creates two data objects, but with less than optimal success.  The first example object\nis created but receives no content because an exception is thrown trying to query its name after\ncreation.   In the second example, for iRODS 4.2.8 and before, a deficiency in packStruct XML protocol causes\nthe backtick to be read back as an apostrophe, which could create problems manipulating or deleting the object later.\n\nAs of PRC v1.1.0, we can mitigate both problems by switching in the QUASI_XML parser for the default one:\n::\n\n    from irods.message import (XML_Parser_Type, ET)\n    ET( XML_Parser_Type.QUASI_XML, session.server_version )\n\nTwo dedicated environment variables may also be used to customize the Python client's XML parsing behavior via the\nsetting of global defaults during start-up.\n\nFor example, we can set the default parser to QUASI_XML, optimized for use with version 4.2.8 of the iRODS server,\nin the following manner:\n::\n\n    Bash-Shell> export PYTHON_IRODSCLIENT_DEFAULT_XML=QUASI_XML PYTHON_IRODSCLIENT_QUASI_XML_SERVER_VERSION=4,2,8\n\nOther alternatives for PYTHON_IRODSCLIENT_DEFAULT_XML are \"STANDARD_XML\" and \"SECURE_XML\".  These two latter options\ndenote use of the xml.etree and defusedxml modules, respectively.\n\nOnly the choice of \"QUASI_XML\" is affected by the specification of a particular server version.\n\nFinally, note that these global defaults, once set, may be overridden on a per-thread basis using\n:code:`ET(parser_type, server_version)`.  We can also revert the current thread's XML parser back to the\nglobal default by calling :code:`ET(None)`.\n\n\nRule Execution\n--------------\n\nA simple example of how to execute an iRODS rule from the Python client is as follows.  Suppose we have a rule file\n:code:`native1.r` which contains a rule in native iRODS Rule Language::\n\n  main() {\n      writeLine(\"*stream\",\n                *X ++ \" squared is \" ++ str(double(*X)^2) )\n  }\n\n  INPUT *X=\"3\", *stream=\"serverLog\"\n  OUTPUT null\n\nThe following Python client code will run the rule and produce the appropriate output in the\nirods server log::\n\n  r = irods.rule.Rule( session, rule_file = 'native1.r')\n  r.execute()\n\nWith release v1.1.1, not only can we target a specific rule engine instance by name (which is useful when\nmore than one is present), but we can also use a file-like object for the :code:`rule_file` parameter::\n\n  Rule( session, rule_file = io.StringIO(u'''mainRule() { anotherRule(*x); writeLine('stdout',*x) }\\n'''\n                                         u'''anotherRule(*OUT) {*OUT='hello world!'}\\n\\n'''\n                                         u'''OUTPUT ruleExecOut\\n'''),\n        instance_name = 'irods_rule_engine_plugin-irods_rule_language-instance' )\n\nIncidentally, if we wanted to change the :code:`native1.r` rule code print to stdout also, we could set the\n:code:`INPUT` parameter, :code:`*stream`, using the Rule constructor's :code:`params` keyword argument.\nSimilarly, we can change the :code:`OUTPUT` parameter from :code:`null` to :code:`ruleExecOut`, to accommodate\nthe output stream, via the :code:`output` argument::\n\n  r = irods.rule.Rule( session, rule_file = 'native1.r',\n             instance_name = 'irods_rule_engine_plugin-irods_rule_language-instance',\n             params={'*stream':'\"stdout\"'} , output = 'ruleExecOut' )\n  output = r.execute( )\n  if output and len(output.MsParam_PI):\n      buf = output.MsParam_PI[0].inOutStruct.stdoutBuf.buf\n      if buf: print(buf.rstrip(b'\\0').decode('utf8'))\n\n(Changing the input value to be squared in this example is left as an exercise for the reader!)\n\nTo deal with errors resulting from rule execution failure, two approaches can be taken. Suppose we\nhave defined this in the :code:`/etc/irods/core.re` rule-base::\n\n  rule_that_fails_with_error_code(*x) {\n    *y = (if (*x!=\"\") then int(*x) else 0)\n  # if (SOME_PROCEDURE_GOES_WRONG) {\n      if (*y < 0) { failmsg(*y,\"-- my error message --\"); }  #-> throws an error code of int(*x) in REPF\n      else { fail(); }                                       #-> throws FAIL_ACTION_ENCOUNTERED_ERR in REPF\n  # }\n  }\n\nWe can run the rule thus:\n\n>>> Rule( session, body='rule_that_fails_with_error_code(\"\"), instance_name = 'irods_rule_engine_plugin-irods_rule_language-instance',\n...     ).execute( r_error = (r_errs:= irods.message.RErrorStack()) )\n\nWhere we've used the Python 3.8 \"walrus operator\" for brevity.  The error will automatically be caught and translated to a\nreturned-error stack::\n\n  >>> pprint.pprint([vars(r) for r in r_errs])\n  [{'raw_msg_': 'DEBUG: fail action encountered\\n'\n                'line 14, col 15, rule base core\\n'\n                '        else { fail(); }\\n'\n                '               ^\\n'\n                '\\n',\n    'status_': -1220000}]\n\nNote, if a stringized negative integer is given , ie. as a special fail code to be thrown within the rule,\nwe must add this code into a special parameter to have this automatically caught as well:\n\n>>> Rule( session, body='rule_that_fails_with_error_code(\"-2\")',instance_name = 'irods_rule_engine_plugin-irods_rule_language-instance'\n...     ).execute( acceptable_errors = ( FAIL_ACTION_ENCOUNTERED_ERR, -2),\n...                r_error = (r_errs := irods.message.RErrorStack()) )\n\nBecause the rule is written to emit a custom error message via failmsg in this case, the resulting r_error stack will now include that\ncustom error message as a substring::\n\n  >>> pprint.pprint([vars(r) for r in r_errs])\n  [{'raw_msg_': 'DEBUG: -- my error message --\\n'\n                'line 21, col 20, rule base core\\n'\n                '      if (*y < 0) { failmsg(*y,\"-- my error message --\"); }  '\n                '#-> throws an error code of int(*x) in REPF\\n'\n                '                    ^\\n'\n                '\\n',\n    'status_': -1220000}]\n\nAlternatively, or in combination with the automatic catching of errors, we may also catch errors as exceptions on the client\nside.  For example, if the Python rule engine is configured, and the following rule is placed in :code:`/etc/irods/core.py`::\n\n  def python_rule(rule_args, callback, rei):\n  #   if some operation fails():\n          raise RuntimeError\n\nwe can trap the error thus::\n\n  try:\n      Rule( session, body = 'python_rule', instance_name = 'irods_rule_engine_plugin-python-instance' ).execute()\n  except irods.exception.RULE_ENGINE_ERROR:\n      print('Rule execution failed!')\n      exit(1)\n  print('Rule execution succeeded!')\n\nAs fail actions from native rules are not thrown by default (refer to the help text for :code:`Rule.execute`), if we\nanticipate these and prefer to catch them as exceptions, we can do it this way::\n\n  try:\n      Rule( session, body = 'python_rule', instance_name = 'irods_rule_engine_plugin-python-instance'\n           ).execute( acceptable_errors = () )\n  except (irods.exception.RULE_ENGINE_ERROR,\n          irods.exception.FAIL_ACTION_ENCOUNTERED_ERR) as e:\n      print('Rule execution failed!')\n      exit(1)\n  print('Rule execution succeeded!')\n\nFinally,  keep in mind that rule code submitted through an :code:`irods.rule.Rule` object is processed by the\nexec_rule_text function in the targeted plugin instance.  This may be a limitation for plugins not equipped to\nhandle rule code in this way.  In a sort of middle-ground case, the iRODS Python Rule Engine Plugin is not\ncurrently able to handle simple rule calls and the manipulation of iRODS core primitives (like simple parameter\npassing and variable expansion') as flexibly as the iRODS Rule Language.\n\nAlso, core.py rules may not be run directly (as is also true with :code:`irule`) by other than a rodsadmin user\npending the resolution of `this issue <https://github.com/irods/irods_rule_engine_plugin_python/issues/105>`_.\n\n\nGeneral queries\n---------------\n\n>>> import os\n>>> from irods.session import iRODSSession\n>>> from irods.models import Collection, DataObject\n>>>\n>>> env_file = os.path.expanduser('~/.irods/irods_environment.json')\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...     query = session.query(Collection.name, DataObject.id, DataObject.name, DataObject.size)\n...\n...     for result in query:\n...             print('{}/{} id={} size={}'.format(result[Collection.name], result[DataObject.name], result[DataObject.id], result[DataObject.size]))\n...\n/tempZone/home/rods/manager/access_manager.py id=212665 size=2164\n/tempZone/home/rods/manager/access_manager.pyc id=212668 size=2554\n/tempZone/home/rods/manager/collection_manager.py id=212663 size=4472\n/tempZone/home/rods/manager/collection_manager.pyc id=212664 size=4464\n/tempZone/home/rods/manager/data_object_manager.py id=212662 size=10291\n/tempZone/home/rods/manager/data_object_manager.pyc id=212667 size=8772\n/tempZone/home/rods/manager/__init__.py id=212670 size=79\n/tempZone/home/rods/manager/__init__.pyc id=212671 size=443\n/tempZone/home/rods/manager/metadata_manager.py id=212660 size=4263\n/tempZone/home/rods/manager/metadata_manager.pyc id=212659 size=4119\n/tempZone/home/rods/manager/resource_manager.py id=212666 size=5329\n/tempZone/home/rods/manager/resource_manager.pyc id=212661 size=4570\n/tempZone/home/rods/manager/user_manager.py id=212669 size=5509\n/tempZone/home/rods/manager/user_manager.pyc id=212658 size=5233\n\nQuery using other models:\n\n>>> from irods.column import Criterion\n>>> from irods.models import DataObject, DataObjectMeta, Collection, CollectionMeta\n>>> from irods.session import iRODSSession\n>>> import os\n>>> env_file = os.path.expanduser('~/.irods/irods_environment.json')\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...    # by metadata\n...    # equivalent to 'imeta qu -C type like Project'\n...    results = session.query(Collection, CollectionMeta).filter( \\\n...        Criterion('=', CollectionMeta.name, 'type')).filter( \\\n...        Criterion('like', CollectionMeta.value, '%Project%'))\n...    for r in results:\n...        print(r[Collection.name], r[CollectionMeta.name], r[CollectionMeta.value], r[CollectionMeta.units])\n...\n('/tempZone/home/rods', 'type', 'Project', None)\n\nBeginning with version 0.8.3 of PRC, the 'in' genquery operator is also available:\n\n>>> from irods.models import Resource\n>>> from irods.column import In\n>>> [ resc[Resource.id]for resc in session.query(Resource).filter(In(Resource.name, ['thisResc','thatResc'])) ]\n[10037,10038]\n\nQuery with aggregation(min, max, sum, avg, count):\n\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...     query = session.query(DataObject.owner_name).count(DataObject.id).sum(DataObject.size)\n...     print(next(query.get_results()))\n{<irods.column.Column 411 D_OWNER_NAME>: 'rods', <irods.column.Column 407 DATA_SIZE>: 62262, <irods.column.Column 401 D_DATA_ID>: 14}\n\nIn this case since we are expecting only one row we can directly call ``query.execute()``:\n\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...     query = session.query(DataObject.owner_name).count(DataObject.id).sum(DataObject.size)\n...     print(query.execute())\n+--------------+-----------+-----------+\n| D_OWNER_NAME | D_DATA_ID | DATA_SIZE |\n+--------------+-----------+-----------+\n| rods         | 14        | 62262     |\n+--------------+-----------+-----------+\n\n\nSpecific Queries\n----------------\n\n>>> import os\n>>> from irods.session import iRODSSession\n>>> from irods.models import Collection, DataObject\n>>> from irods.query import SpecificQuery\n>>>\n>>> env_file = os.path.expanduser('~/.irods/irods_environment.json')\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...     # define our query\n...     sql = \"select data_name, data_id from r_data_main join r_coll_main using (coll_id) where coll_name = '/tempZone/home/rods/manager'\"\n...     alias = 'list_data_name_id'\n...     columns = [DataObject.name, DataObject.id] # optional, if we want to get results by key\n...     query = SpecificQuery(session, sql, alias, columns)\n...\n...     # register specific query in iCAT\n...     _ = query.register()\n...\n...     for result in query:\n...             print('{} {}'.format(result[DataObject.name], result[DataObject.id]))\n...\n...     # delete specific query\n...     _ = query.remove()\n...\nuser_manager.pyc 212658\nmetadata_manager.pyc 212659\nmetadata_manager.py 212660\nresource_manager.pyc 212661\ndata_object_manager.py 212662\ncollection_manager.py 212663\ncollection_manager.pyc 212664\naccess_manager.py 212665\nresource_manager.py 212666\ndata_object_manager.pyc 212667\naccess_manager.pyc 212668\nuser_manager.py 212669\n__init__.py 212670\n__init__.pyc 212671\n\n\nRecherché queries\n-----------------\n\nIn some cases you might like to use a GenQuery operator not directly offered by this\nPython library, or even combine query filters in ways GenQuery may not directly support.\n\nAs an example, the code below finds metadata value fields lexicographically outside the range\nof decimal integers, while also requiring that the data objects to which they are attached do\nnot reside in the trash.\n\n>>> search_tuple = (DataObject.name , Collection.name ,\n...                 DataObjectMeta.name , DataObjectMeta.value)\n\n>>> # \"not like\" : direct instantiation of Criterion (operator in literal string)\n>>> not_in_trash = Criterion ('not like', Collection.name , '%/trash/%')\n\n>>> # \"not between\"( column, X, Y) := column < X OR column > Y (\"OR\" done via chained iterators)\n>>> res1 = session.query (* search_tuple).filter(not_in_trash).filter(DataObjectMeta.value < '0')\n>>> res2 = session.query (* search_tuple).filter(not_in_trash).filter(DataObjectMeta.value > '9' * 9999 )\n\n>>> chained_results = itertools.chain ( res1.get_results(), res2.get_results() )\n>>> pprint( list( chained_results ) )\n\n\nInstantiating iRODS objects from query results\n----------------------------------------------\nThe General query works well for getting information out of the ICAT if all we're interested in is\ninformation representable with\nprimitive types (ie. object names, paths, and ID's, as strings or integers). But Python's object orientation also\nallows us to create object references to mirror the persistent entities (instances of *Collection*, *DataObject*, *User*, or *Resource*, etc.)\ninhabiting the ICAT.\n\n**Background:**\nCertain iRODS object types can be instantiated easily using the session object's custom type managers,\nparticularly if some parameter (often just the name or path) of the object is already known:\n\n>>> type(session.users)\n<class 'irods.manager.user_manager.UserManager'>\n>>> u = session.users.get('rods')\n>>> u.id\n10003\n\nType managers are good for specific operations, including object creation and removal::\n\n>>> session.collections.create('/tempZone/home/rods/subColln')\n>>> session.collections.remove('/tempZone/home/rods/subColln')\n>>> session.data_objects.create('/tempZone/home/rods/dataObj')\n>>> session.data_objects.unlink('/tempZone/home/rods/dataObj')\n\nWhen we retrieve a reference to an existing collection using *get* :\n\n>>> c = session.collections.get('/tempZone/home/rods')\n>>> c\n<iRODSCollection 10011 rods>\n\n\nwe have, in that variable *c*, a reference to an iRODS *Collection* object whose properties provide\nuseful information:\n\n>>> [ x for x in dir(c) if not x.startswith('__') ]\n['_meta', 'data_objects', 'id', 'manager', 'metadata', 'move', 'name', 'path', 'remove', 'subcollections', 'unregister', 'walk']\n>>> c.name\n'rods'\n>>> c.path\n'/tempZone/home/rods'\n>>> c.data_objects\n[<iRODSDataObject 10019 test1>]\n>>> c.metadata.items()\n[ <... list of AVU's attached to Collection c ... > ]\n\nor whose methods can do useful things:\n\n>>> for sub_coll in c.walk(): print('---'); pprint( sub_coll )\n[ ...< series of Python data structures giving the complete tree structure below collection 'c'> ...]\n\nThis approach of finding objects by name, or via their relations with other objects (ie \"contained by\", or in the case of metadata, \"attached to\"),\nis helpful if we know something about the location or identity of what we're searching for, but we don't always\nhave that kind of a-priori knowledge.\n\nSo, although we can (as seen in the last example) walk an *iRODSCollection* recursively to discover all subordinate\ncollections and their data objects, this approach will not always be best\nfor a given type of application or data discovery, especially in more advanced\nuse cases.\n\n**A Different Approach:**\nFor the PRC to be sufficiently powerful for general use, we'll often need at least:\n\n* general queries, and\n* the capabilities afforded by the PRC's object-relational mapping.\n\nSuppose, for example, we wish to enumerate all collections in the iRODS catalog.\n\nAgain, the object managers are the answer, but they are now invoked using a different scheme:\n\n>>> from irods.collection import iRODSCollection; from irods.models import Collection\n>>> all_collns = [ iRODSCollection(session.collections,result) for result in session.query(Collection) ]\n\nFrom there, we have the ability to do useful work, or filtering based on the results of the enumeration.\nAnd, because *all_collns* is an iterable of true objects, we can either use Python's list comprehensions or\nexecute more catalog queries to achieve further aims.\n\nNote that, for similar system-wide queries of Data Objects (which, as it happens, are inextricably joined to their\nparent Collection objects), a bit more finesse is required.  Let us query, for example, to find all data\nobjects in a particular zone with an AVU that matches the following condition::\n\n   META_DATA_ATTR_NAME = \"irods::alert_time\" and META_DATA_ATTR_VALUE like '+0%'\n\n\n>>> import irods.keywords\n>>> from irods.data_object import iRODSDataObject\n>>> from irods.models import DataObjectMeta, DataObject\n>>> from irods.column import Like\n>>> q = session.query(DataObject).filter( DataObjectMeta.name == 'irods::alert_time',\n                                          Like(DataObjectMeta.value, '+0%') )\n>>> zone_hint = \"\" # --> add a zone name in quotes to search another zone\n>>> if zone_hint: q = q.add_keyword( irods.keywords.ZONE_KW, zone_hint )\n>>> for res in q:\n...      colln_id = res [DataObject.collection_id]\n...      collObject = get_collection( colln_id, session, zone = zone_hint)\n...      dataObject = iRODSDataObject( session.data_objects, parent = collObject, results=[res])\n...      print( '{coll}/{data}'.format (coll = collObject.path, data = dataObject.name))\n\n\nIn the above loop we have used a helper function, *get_collection*, to minimize the number of hits to the object\ncatalog. Otherwise, me might find within a typical application  that some Collection objects are being queried at\na high rate of redundancy. *get_collection* can be implemented thusly:\n\n.. code:: Python\n\n    import collections  # of the Pythonic, not iRODS, kind\n    def makehash():\n        # see https://stackoverflow.com/questions/651794/whats-the-best-way-to-initialize-a-dict-of-dicts-in-python\n        return collections.defaultdict(makehash)\n    from irods.collection import iRODSCollection\n    from irods.models import Collection\n    def get_collection (Id, session, zone=None, memo = makehash()):\n        if not zone: zone = \"\"\n        c_obj = memo[session][zone].get(Id)\n        if c_obj is None:\n            q = session.query(Collection).filter(Collection.id==Id)\n            if zone != '': q = q.add_keyword( irods.keywords.ZONE_KW, zone )\n            c_id =  q.one()\n            c_obj = iRODSCollection(session, result = c_id)\n            memo[session][zone][Id] = c_obj\n        return c_obj\n\n\nOnce instantiated, of course, any *iRODSDataObject*'s data to which we have access permissions is available via its open() method.\n\nAs stated, this type of object discovery requires some extra study and effort, but the ability to search arbitrary iRODS zones\n(to which we are federated and have the user permissions) is powerful indeed.\n\n\nTickets\n-------\n\nThe :code:`irods.ticket.Ticket` class lets us issue \"tickets\" which grant limited\npermissions for other users to access our own data objects (or collections of\ndata objects).   As with the iticket client, the access may be either \"read\"\nor \"write\".  The recipient of the ticket could be a rodsuser, or even an\nanonymous user.\n\nBelow is a demonstration of how to generate a new ticket for access to a\nlogical path - in this case, say a collection containing 1 or more data objects.\n(We assume the creation of the granting_session and receiving_session for the users\nrespectively for the users providing and consuming the ticket access.)\n\nThe user who wishes to provide an access may execute the following:\n\n>>> from irods.ticket import Ticket\n>>> new_ticket = Ticket (granting_session)\n>>> The_Ticket_String = new_ticket.issue('read', \n...     '/zone/home/my/collection_with_data_objects_for/somebody').string\n\nat which point that ticket's unique string may be given to other users, who can then apply the\nticket to any existing session object in order to gain access to the intended object(s):\n\n>>> from irods.models import Collection, DataObject\n>>> ses = receiving_session\n>>> Ticket(ses, The_Ticket_String).supply()\n>>> c_result = ses.query(Collection).one()\n>>> c = iRODSCollection( ses.collections, c_result)\n>>> for dobj in (c.data_objects):\n...     ses.data_objects.get( dobj.path, '/tmp/' + dobj.name ) # download objects\n\nIn this case, however, modification will not be allowed because the ticket is for read only:\n\n>>> c.data_objects[0].open('w').write(  # raises\n...     b'new content')                 #  CAT_NO_ACCESS_PERMISSION\n\nIn another example, we could generate a ticket that explicitly allows 'write' access on a\nspecific data object, thus granting other users the permissions to modify as well as read it:\n\n>>> ses = iRODSSession( user = 'anonymous', password = '', host = 'localhost',\n                        port = 1247, zone = 'tempZone')\n>>> Ticket(ses, write_data_ticket_string ).supply()\n>>> d_result = ses.query(DataObject.name,Collection.name).one()\n>>> d_path = ( d_result[Collection.name] + '/' +\n...            d_result[DataObject.name] )\n>>> old_content = ses.data_objects.open(d_path,'r').read()\n>>> with tempfile.NamedTemporaryFile() as f:\n...     f.write(b'blah'); f.flush()\n...     ses.data_objects.put(f.name,d_path)\n\nAs with iticket, we may set a time limit on the availability of a ticket, either as a\ntimestamp or in seconds since the epoch:\n\n>>> t=Ticket(ses); s = t.string\nvIOQ6qzrWWPO9X7\n>>> t.issue('read','/some/path')\n>>> t.modify('expiry','2021-04-01.12:34:56')  # timestamp assumed as UTC\n\nTo check the results of the above, we could invoke this icommand elsewhere in a shell prompt:\n\n:code:`iticket ls vIOQ6qzrWWPO9X7`\n\nand the server should report back the same expiration timestamp.\n\nAnd, if we are the issuer of a ticket, we may also query, filter on, and\nextract information based on a ticket's attributes and catalog relations:\n\n>>> from irods.models import TicketQuery\n>>> delay = lambda secs: int( time.time() + secs + 1)\n>>> Ticket(ses).issue('read','/path/to/data_object').modify(\n                      'expiry',delay(7*24*3600))             # lasts 1 week\n>>> Q = ses.query (TicketQuery.Ticket, TicketQuery.DataObject).filter(\n...                                                            TicketQuery.DataObject.name == 'data_object')\n>>> print ([ _[TicketQuery.Ticket.expiry_ts] for _ in Q ])\n['1636757427']\n\n\nTracking and manipulating replicas of Data objects\n--------------------------------------------------\n\nPutting together the techniques we've seen so far, it's not hard to write functions\nthat achieve useful, common goals. Suppose that for all data objects containing replicas on\na given named resource (the \"source\") we want those replicas \"moved\" to a second, or\n\"destination\" resource.  We can achieve it with a function such as the one below. It\nachieves the move via a replication of the data objects found to the destination\nresource , followed by a trimming of each replica from the source.  We assume for our current\npurposed that all replicas are \"good\", ie have a status of \"1\" ::\n\n  from irods.resource import iRODSResource\n  from irods.collection import iRODSCollection\n  from irods.data_object import iRODSDataObject\n  from irods.models import Resource,Collection,DataObject\n  def repl_and_trim (srcRescName, dstRescName = '', verbose = False):\n      objects_trimmed = 0\n      q = session.query(Resource).filter(Resource.name == srcRescName)\n      srcResc = iRODSResource( session.resources, q.one())\n      # loop over data objects found on srcResc\n      for q_row in session.query(Collection,DataObject) \\\n                          .filter(DataObject.resc_id == srcResc.id):\n          collection =  iRODSCollection (session.collections, result = q_row)\n          data_object = iRODSDataObject (session.data_objects, parent = collection, results = (q_row,))\n          objects_trimmed += 1\n          if verbose :\n              import pprint\n              print( '--------', data_object.name, '--------')\n              pprint.pprint( [vars(r) for r in data_object.replicas if\n                              r.resource_name == srcRescName] )\n          if dstRescName:\n              objects_trimmed += 1\n              data_object.replicate(dstRescName)\n              for replica_number in [r.number for r in data_object.replicas]:\n                  options = { kw.DATA_REPL_KW: replica_number }\n                  data_object.unlink( **options )\n      return objects_trimmed\n\n\nListing Users and Groups ; calculating Group Membership\n-------------------------------------------------------\n\niRODS tracks groups and users using two tables, R_USER_MAIN and R_USER_GROUP.\nUnder this database schema, all \"user groups\" are also users:\n\n>>> from irods.models import User, Group\n>>> from pprint import pprint\n>>> pprint(list((x[User.id], x[User.name]) for x in session.query(User)))\n[(10048, 'alice'),\n (10001, 'rodsadmin'),\n (13187, 'bobby'),\n (10045, 'collab'),\n (10003, 'rods'),\n (13193, 'empty'),\n (10002, 'public')]\n\nBut it's also worth noting that the User.type field will be 'rodsgroup' for any\nuser ID that iRODS internally recognizes as a \"Group\":\n\n>>> groups = session.query(User).filter( User.type == 'rodsgroup' )\n\n>>> [x[User.name] for x in groups]\n['collab', 'public', 'rodsadmin', 'empty']\n\nSince we can instantiate iRODSGroup and iRODSUser objects directly from the rows of\na general query on the corresponding tables,  it is also straightforward to trace out\nthe groups' memberships:\n\n>>> from irods.user import iRODSUser, iRODSGroup\n>>> grp_usr_mapping = [ (iRODSGroup(session.groups, result), iRODSUser(session.users, result)) \\\n...                     for result in session.query(Group,User) ]\n>>> pprint( [ (x,y) for x,y in grp_usr_mapping if x.id != y.id ] )\n[(<iRODSGroup 10045 collab>, <iRODSUser 10048 alice rodsuser tempZone>),\n (<iRODSGroup 10001 rodsadmin>, <iRODSUser 10003 rods rodsadmin tempZone>),\n (<iRODSGroup 10002 public>, <iRODSUser 10003 rods rodsadmin tempZone>),\n (<iRODSGroup 10002 public>, <iRODSUser 10048 alice rodsuser tempZone>),\n (<iRODSGroup 10045 collab>, <iRODSUser 13187 bobby rodsuser tempZone>),\n (<iRODSGroup 10002 public>, <iRODSUser 13187 bobby rodsuser tempZone>)]\n\n(Note that in general queries, fields cannot be compared to each other, only to literal constants; thus\nthe '!=' comparison in the Python list comprehension.)\n\nFrom the above, we can see that the group 'collab' (with user ID 10045) contains users 'bobby'(13187) and\n'alice'(10048) but not 'rods'(10003), as the tuple (10045,10003) is not listed. Group 'rodsadmin'(10001)\ncontains user 'rods'(10003) but no other users; and group 'public'(10002) by default contains all canonical\nusers (those whose User.type is 'rodsadmin' or 'rodsuser'). The empty group ('empty') has no users as\nmembers, so it doesn't show up in our final list.\n\n\nGroup Administrator Capabilities\n--------------------------------\nWith v1.1.7, PRC acquires the full range of abilities possessed by the igroupadmin command.\n\nFirstly, a groupadmin may invoke methods to create groups, and may add users to, or remove them from, any\ngroup to which they themselves belong:\n\n>>> session.groups.create('lab')\n>>> session.groups.addmember('lab',session.username)  # allow self to administer group\n>>> session.groups.addmember('lab','otheruser')\n>>> session.groups.removemember('lab','otheruser')\n\nIn addition, a groupadmin may also create accounts for new users and enable their logins by initializing\na native password for them:\n\n>>> session.users.create_with_password('alice', 'change_me')\n\n\niRODS Permissions (ACLs)\n------------------------\n\nThe :code:`iRODSAccess` class offers a convenient dictionary interface mapping iRODS permission\nstrings to the corresponding integer codes:\n\n>>> from irods.access import iRODSAccess\n>>> iRODSAccess.keys()\n['null', 'read_metadata', 'read_object', 'create_metadata', 'modify_metadata', 'delete_metadata', 'create_object', 'modify_object', 'delete_object', 'own']\n>>> WRITE = iRODSAccess.to_int('modify_object')\n\nArmed with that, we can then query on all data objects with ACL's that allow our user to write them:\n\n>>> from irods.models import (DataObject, User, DataAccess)\n>>> data_objects_writable = list(session.query(DataObject, User, DataAccess).filter(User.name == session.username,  DataAccess.type >= WRITE))\n\nFinally, we can also access the list of permissions available through a given session object via the :code:`available_permissions` property.\nNote that -- in keeping with changes in iRODS server 4.3 -- the permissions list will be longer, as appropriate, for session objects connected to\nthe more recent servers; and also that the embedded spaces in some 4.2 permission strings will be replaced by underscores in 4.3 and later.\n\n>>> session.server_version\n(4, 2, 11)\n>>> session.available_permissions.items()\n[('null', 1000), ('read object', 1050), ('modify object', 1120), ('own', 1200)]\n\n\nGetting and setting permissions\n-------------------------------\n\nWe can find the ID's of all the collections writable (ie having \"modify\" ACL) by, but not owned by,\nalice (or even alice#otherZone):\n\n>>> from irods.models import Collection,CollectionAccess,CollectionUser,User\n>>> from irods.column import Like\n>>> q = session.query (Collection,CollectionAccess).filter(\n...                                 CollectionUser.name == 'alice',  # User.zone == 'otherZone', # zone optional\n...                                 Like(CollectionAccess.name, 'modify%') ) #defaults to current zone\n\nIf we then want to downgrade those permissions to read-only, we can do the following:\n\n>>> from irods.access import iRODSAccess\n>>> for c in q:\n...     session.acls.set( iRODSAccess('read', c[Collection.name], 'alice', # 'otherZone' # zone optional\n...     ))\n\nA call to :code:`session.acls.get(c)` -- with :code:`c` being the result of :code:`sessions.collections.get(c[Collection.name])` --\nwould then verify the desired change had taken place (as well as list all ACLs stored in the catalog for that collection).\n\nOne last note on permissions:  The older access manager, :code:`<session>.permissions`, produced inconsistent results when the :code:`get()`\nmethod was invoked with the parameter :code:`report_raw_acls` set (or defaulting) to :code:`False`.  Specifically, collections would exhibit the\n\"non-raw-ACL\" behavior of reporting individual member users' permissions as a by-product of group ACLs, whereas data objects would not.\n\nIn release v1.1.6, we move to correct this inconsistency by introducing the synonym :code:`<session>.acls` that acts almost identically \nlike :code:`<session>.permissions`, except that the :code:`<session>.acls.get(...)` method does not accept the :code:`report_raw_acls` parameter.  When we need to detect users' permissions independent of their access to an object via group membership, this can be achieved with another query.\n\n:code:`<session>.permissions` is therefore deprecated and, in v2.0.0, will be removed in favor of :code:`<session>.acls`.\n\n\nManaging users\n--------------\n\nYou can create a user in the current zone (with an optional auth_str):\n\n>>> session.users.create('user', 'rodsuser', 'MyZone', auth_str)\n\nIf you want to create a user in a federated zone, use:\n\n>>> session.users.create('user', 'rodsuser', 'OtherZone', auth_str)\n\n\nAnd more...\n-----------\n\nAdditional code samples are available in the `test directory <https://github.com/irods/python-irodsclient/tree/main/irods/test>`_\n\n\n=======\nTesting\n=======\n\nSetting up and running tests\n----------------------------\n\nThe Python iRODS Client comes with its own suite of tests.  Some amount of setting up may be necessary first:\n\n1. Use :code:`iinit` to specify the iRODS client environment.\n   For best results, point the client at a server running on the local host.\n\n2. Install the python-irodsclient along with the :code:`unittest unittest_xml_reporting` module or the older :code:`xmlrunner` equivalent.\n\n   - for PRC versions 1.1.1 and later:\n\n     *  :code:`pip install ./path-to-python-irodsclient-repo[tests]`  (when using a local Git repo); or,\n     *  :code:`pip install python-irodsclient[tests]'>=1.1.1'`  (when installing directly from PyPI).\n\n   - earlier releases (<= 1.1.0) will install the outdated :code:`xmlrunner` module automatically\n\n3. Follow further instructions in the `test directory <https://github.com/irods/python-irodsclient/tree/main/irods/test>`_\n\n\nTesting S3 parallel transfer\n----------------------------\n\nSystem requirements::\n\n- Ubuntu 18 user with Docker installed.\n- Local instance of iRODS server running.\n- Logged in sudo privileges.\n\nRun a MinIO service::\n\n  $ docker run -d -p 9000:9000 -p 9001:9001 minio/minio server /data --console-address \":9001\"\n\nSet up a bucket :code:`s3://irods` under MinIO::\n\n  $ pip install awscli\n\n  $ aws configure\n  AWS Access Key ID [None]: minioadmin\n  AWS Secret Access Key [None]: minioadmin\n  Default region name [None]:\n  Default output format [None]:\n\n  $ aws --endpoint-url http://127.0.0.1:9000 s3 mb s3://irods\n\nSet up s3 credentials for the iRODS s3 storage resource::\n\n  $ sudo su - irods -c \"/bin/echo -e 'minioadmin\\nminioadmin' >/var/lib/irods/s3-credentials\"\n  $ sudo chown 600 /var/lib/irods/s3-credentials\n\nCreate the s3 storage resource::\n\n  $ sudo apt install irods-resource-plugin-s3\n\nAs the 'irods' service account user::\n\n  $ iadmin mkresc s3resc s3 $(hostname):/irods/ \\\n    \"S3_DEFAULT_HOSTNAME=localhost:9000;\"\\\n    \"S3_AUTH_FILE=/var/lib/irods/s3-credentials;\"\\\n    \"S3_REGIONNAME=us-east-1;\"\\\n    \"S3_RETRY_COUNT=1;\"\\\n    \"S3_WAIT_TIME_SEC=3;\"\\\n    \"S3_PROTO=HTTP;\"\\\n    \"ARCHIVE_NAMING_POLICY=consistent;\"\\\n    \"HOST_MODE=cacheless_attached\"\n\n  $ dd if=/dev/urandom of=largefile count=40k bs=1k # create 40-megabyte test file\n\n  $ pip install 'python-irodsclient>=1.1.2'\n\n  $ python -c\"from irods.test.helpers import make_session\n              import irods.keywords as kw\n              with make_session() as sess:\n                  sess.data_objects.put( 'largefile',\n                                         '/tempZone/home/rods/largeFile1',\n                                         **{kw.DEST_RESC_NAME_KW:'s3resc'} )\n                  sess.data_objects.get( '/tempZone/home/rods/largeFile1',\n                                         '/tmp/largefile')\"\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/irods/python-irodsclient",
    "keywords": "irods",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-irodsclient",
    "package_url": "https://pypi.org/project/python-irodsclient/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-irodsclient/",
    "project_urls": {
      "Homepage": "https://github.com/irods/python-irodsclient"
    },
    "release_url": "https://pypi.org/project/python-irodsclient/1.1.7/",
    "requires_dist": [
      "PrettyTable (>=0.7.2)",
      "defusedxml",
      "six (>=1.10.0)",
      "futures ; python_version == \"2.7\"",
      "unittest-xml-reporting ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "A python API for iRODS",
    "version": "1.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17481896,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d467e94adb496fee3990696b31795bee49c1d81e70bd8edc17984a4a61907c2",
          "md5": "0c9deb13e498730e23190f3fa90ef60a",
          "sha256": "0963101b7c7d34e1d1026888c92ee0aaf26cdc7704f066a26c59c4f62b0c0580"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.3.1-py2-none-any.whl",
        "has_sig": true,
        "md5_digest": "0c9deb13e498730e23190f3fa90ef60a",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 26603,
        "upload_time": "2014-09-17T19:46:30",
        "upload_time_iso_8601": "2014-09-17T19:46:30.734700Z",
        "url": "https://files.pythonhosted.org/packages/5d/46/7e94adb496fee3990696b31795bee49c1d81e70bd8edc17984a4a61907c2/python_irodsclient-0.3.1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ed63788211e9f93a593bb3e1882fc903758a93a1d97c9cb9a5a20a3154f2510",
          "md5": "bdc0e9017a9860d24aba89479d1a3168",
          "sha256": "12d88e08f66bab8ccdaa9744b69f8a879c21fe640cac7fe0bcb9521151caacd5"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.3.1.tar.gz",
        "has_sig": true,
        "md5_digest": "bdc0e9017a9860d24aba89479d1a3168",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22964,
        "upload_time": "2014-09-17T19:46:33",
        "upload_time_iso_8601": "2014-09-17T19:46:33.792140Z",
        "url": "https://files.pythonhosted.org/packages/2e/d6/3788211e9f93a593bb3e1882fc903758a93a1d97c9cb9a5a20a3154f2510/python-irodsclient-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d11f2944c3f907d188ec2221930f4afc7bb0077e023ef60b0899d6a3f578bd4",
          "md5": "32dcf9b4e25266258b5bd4c5cc9e33e9",
          "sha256": "c349ab40d94e44534a332504b8224a783ecf8d0a8bb390ffffb304f4ebacb7c0"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.4.0-py2-none-any.whl",
        "has_sig": true,
        "md5_digest": "32dcf9b4e25266258b5bd4c5cc9e33e9",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 34719,
        "upload_time": "2014-09-17T20:44:16",
        "upload_time_iso_8601": "2014-09-17T20:44:16.324202Z",
        "url": "https://files.pythonhosted.org/packages/5d/11/f2944c3f907d188ec2221930f4afc7bb0077e023ef60b0899d6a3f578bd4/python_irodsclient-0.4.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd5a28c9488e53f0cfcac4cc61d9d7a4f1d602040e92f8016e6ba628c6f7848e",
          "md5": "55db8bfd332767de43cfcec13fc448e8",
          "sha256": "dca5184f65580769a7b15f3ee8a42761e1a14d0ef2aeb778de9a2d7801f05706"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.4.0.tar.gz",
        "has_sig": true,
        "md5_digest": "55db8bfd332767de43cfcec13fc448e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27477,
        "upload_time": "2014-09-17T20:44:18",
        "upload_time_iso_8601": "2014-09-17T20:44:18.547789Z",
        "url": "https://files.pythonhosted.org/packages/cd/5a/28c9488e53f0cfcac4cc61d9d7a4f1d602040e92f8016e6ba628c6f7848e/python-irodsclient-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cf9a1851903f9a8a54558bb9bc172dcb796e175a01fd62cfc2fdce2f8222952",
          "md5": "90ece29fe5e79da61b5280e0dd802a5f",
          "sha256": "20494846b0dc620637d2ea633e58847c6688e29aca8fdf7ef2cf05baf06e3f6a"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.5.0rc1-py2-none-any.whl",
        "has_sig": true,
        "md5_digest": "90ece29fe5e79da61b5280e0dd802a5f",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 58211,
        "upload_time": "2016-08-15T16:05:12",
        "upload_time_iso_8601": "2016-08-15T16:05:12.098804Z",
        "url": "https://files.pythonhosted.org/packages/3c/f9/a1851903f9a8a54558bb9bc172dcb796e175a01fd62cfc2fdce2f8222952/python_irodsclient-0.5.0rc1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b3e331cef12394445537f9e4ccb271b20d9e6f852494f0080aae231dd5fe53e",
          "md5": "6a0abeadd674bab050730b06aaaf2fef",
          "sha256": "5eb62fe0df23226cab6842af093a284791e5f599de01535d32ede8fd90d802f4"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.5.0rc1.tar.gz",
        "has_sig": true,
        "md5_digest": "6a0abeadd674bab050730b06aaaf2fef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43489,
        "upload_time": "2016-08-15T16:05:19",
        "upload_time_iso_8601": "2016-08-15T16:05:19.041884Z",
        "url": "https://files.pythonhosted.org/packages/2b/3e/331cef12394445537f9e4ccb271b20d9e6f852494f0080aae231dd5fe53e/python-irodsclient-0.5.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6add8863d5a98ec5d96629fc6779832dbd5f383fdf589fd3332be519ca94b287",
          "md5": "d297ebd69fd8a7a6e664a3067dac420a",
          "sha256": "042a1df5953a33e4bc0ff720f54333e0513c10006f39e1e8c8718a4c6c916e03"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.6.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d297ebd69fd8a7a6e664a3067dac420a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 83182,
        "upload_time": "2017-06-01T15:10:37",
        "upload_time_iso_8601": "2017-06-01T15:10:37.568319Z",
        "url": "https://files.pythonhosted.org/packages/6a/dd/8863d5a98ec5d96629fc6779832dbd5f383fdf589fd3332be519ca94b287/python_irodsclient-0.6.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6eac7c35555b3cbb1662efe765ba33ec0d521bda700deac9b4fe35da4de3b904",
          "md5": "33c47871017ba96c379f7f1e68fc74b7",
          "sha256": "ca4fb5c390744420d2265043796a8fbb5f9ca1e3ac2c19e13e3072fc52161daf"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "33c47871017ba96c379f7f1e68fc74b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70944,
        "upload_time": "2017-06-01T15:10:39",
        "upload_time_iso_8601": "2017-06-01T15:10:39.320563Z",
        "url": "https://files.pythonhosted.org/packages/6e/ac/7c35555b3cbb1662efe765ba33ec0d521bda700deac9b4fe35da4de3b904/python-irodsclient-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccb39c6e9a66aba187699246f143880f8be35f5e9368d44a022a0cb88c54919b",
          "md5": "ad8ff4a2e1004e9856114b17dead2ad7",
          "sha256": "5e43a28c23223f5c37669f24dfb042adf7a078d0f92b48d2d04f13325d5f311b"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.7.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad8ff4a2e1004e9856114b17dead2ad7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 91863,
        "upload_time": "2017-12-15T16:53:16",
        "upload_time_iso_8601": "2017-12-15T16:53:16.094215Z",
        "url": "https://files.pythonhosted.org/packages/cc/b3/9c6e9a66aba187699246f143880f8be35f5e9368d44a022a0cb88c54919b/python_irodsclient-0.7.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be0ff9226ef5da51d7939e2e90bf2c3ff694700b5643d683d50c7f7c211bd052",
          "md5": "65dc092f82810cd61122fa0dfa027cda",
          "sha256": "81dd6718722c357b37dfd197f6d7b51f40adc52048dd2adfc9b53846c1f1a39c"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "65dc092f82810cd61122fa0dfa027cda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 80045,
        "upload_time": "2017-12-15T16:53:17",
        "upload_time_iso_8601": "2017-12-15T16:53:17.549768Z",
        "url": "https://files.pythonhosted.org/packages/be/0f/f9226ef5da51d7939e2e90bf2c3ff694700b5643d683d50c7f7c211bd052/python-irodsclient-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a5858a1d21fbcae234bd51368600cf5ce9ef56c4e5d358d927b41f9e1e78d0d",
          "md5": "961a3aade4c78d11ae7d1553b29bbeec",
          "sha256": "1044b22cfe32de51365bd5435ce261cdfb144fb5718bf86314b0d87f3e9a2ac9"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.7.0rc1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "961a3aade4c78d11ae7d1553b29bbeec",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 91867,
        "upload_time": "2017-12-07T16:05:48",
        "upload_time_iso_8601": "2017-12-07T16:05:48.025815Z",
        "url": "https://files.pythonhosted.org/packages/2a/58/58a1d21fbcae234bd51368600cf5ce9ef56c4e5d358d927b41f9e1e78d0d/python_irodsclient-0.7.0rc1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c662498789c81b2ca231d0bb4f943749ae4f247cb872ac1412c42827e907b96c",
          "md5": "ccfba7e5a24a1627188fe747ece4f102",
          "sha256": "9e865f0b56aceda36809c158c11bfa479af1622f25e0e09eeebdc5bbf54e216b"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.7.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "ccfba7e5a24a1627188fe747ece4f102",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 79950,
        "upload_time": "2017-12-07T16:05:50",
        "upload_time_iso_8601": "2017-12-07T16:05:50.342870Z",
        "url": "https://files.pythonhosted.org/packages/c6/62/498789c81b2ca231d0bb4f943749ae4f247cb872ac1412c42827e907b96c/python-irodsclient-0.7.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d531e69b848b50d90cafc9a2fc2f9db35d97cef3a20571e8fadbd9a3b538802",
          "md5": "dfa1e0a37fa4403ed33a7577dd260cb7",
          "sha256": "52a6226071d160f96f8c3f0337d8fa972f170ca816574b0e948435cf49cf3c8d"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.7.0rc2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfa1e0a37fa4403ed33a7577dd260cb7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 91910,
        "upload_time": "2017-12-08T21:24:05",
        "upload_time_iso_8601": "2017-12-08T21:24:05.175234Z",
        "url": "https://files.pythonhosted.org/packages/8d/53/1e69b848b50d90cafc9a2fc2f9db35d97cef3a20571e8fadbd9a3b538802/python_irodsclient-0.7.0rc2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89d4a9ed96911d2b848bab1f1ca9f78df19027e95f48e21ccadc447790650d7d",
          "md5": "a51ef649b9d90f940395e25f8d3645c9",
          "sha256": "88ed1574230b504b919caa5077923dca19707e0822cd497a99c1567011e3ba54"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.7.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "a51ef649b9d90f940395e25f8d3645c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 80043,
        "upload_time": "2017-12-08T21:24:06",
        "upload_time_iso_8601": "2017-12-08T21:24:06.515778Z",
        "url": "https://files.pythonhosted.org/packages/89/d4/a9ed96911d2b848bab1f1ca9f78df19027e95f48e21ccadc447790650d7d/python-irodsclient-0.7.0rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9d91a0e85b6962be65aff904b88001c38d1cc12be61e7f75ae32955467defd3",
          "md5": "b371724391052014ddc36aa033742f8a",
          "sha256": "ecd6dd2a6b08ee469538412d52bb70211c32c3553c4c309e93ad3af2f4786e8a"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.8.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b371724391052014ddc36aa033742f8a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 90476,
        "upload_time": "2018-05-03T16:54:46",
        "upload_time_iso_8601": "2018-05-03T16:54:46.202301Z",
        "url": "https://files.pythonhosted.org/packages/b9/d9/1a0e85b6962be65aff904b88001c38d1cc12be61e7f75ae32955467defd3/python_irodsclient-0.8.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3453bff0d6a5d66229946a85cb66cef801caa546343ca306f87bb08847434b64",
          "md5": "8afe3398dd18c20a99b87d7324cb92bb",
          "sha256": "84939b2a2427a68d837c01fbbde20608d0be2d74679f7d1458e911fed80e197e"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8afe3398dd18c20a99b87d7324cb92bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 82846,
        "upload_time": "2018-05-03T16:54:47",
        "upload_time_iso_8601": "2018-05-03T16:54:47.626104Z",
        "url": "https://files.pythonhosted.org/packages/34/53/bff0d6a5d66229946a85cb66cef801caa546343ca306f87bb08847434b64/python-irodsclient-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "036f3b0950c9ab26a1d05e357b7be2e45795d105f9a0b3af538aa6155a36c13b",
          "md5": "347b07fa53b8fef2e4a6d3cbde20380a",
          "sha256": "509b2e22e5d1a552ae3d59d519b6ddf8544ee5280051990fe44b2e6d41d7650f"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.8.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "347b07fa53b8fef2e4a6d3cbde20380a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 90605,
        "upload_time": "2018-09-27T03:30:43",
        "upload_time_iso_8601": "2018-09-27T03:30:43.180565Z",
        "url": "https://files.pythonhosted.org/packages/03/6f/3b0950c9ab26a1d05e357b7be2e45795d105f9a0b3af538aa6155a36c13b/python_irodsclient-0.8.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85c865fad8d793913f20b9e6282e661f0bffd8aac9b9b14680e349e46938becd",
          "md5": "bf8c9a20e36be3151efa4b0820266750",
          "sha256": "6e73d49970b263c988917af681780a2e795a51a59379d278cc8c30fb071f2685"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bf8c9a20e36be3151efa4b0820266750",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 83293,
        "upload_time": "2018-09-27T03:30:45",
        "upload_time_iso_8601": "2018-09-27T03:30:45.262856Z",
        "url": "https://files.pythonhosted.org/packages/85/c8/65fad8d793913f20b9e6282e661f0bffd8aac9b9b14680e349e46938becd/python-irodsclient-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80025abc8dba9c1654e3a53ac9cda288c5d580bbdcf5cd62e1493314e75661b4",
          "md5": "d816d257c363a76e69053d2df4776f72",
          "sha256": "69e1e3f19e29a6554c517753c04e48c0d4725281c9a03dad9b7c749129b8834f"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.8.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d816d257c363a76e69053d2df4776f72",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 97020,
        "upload_time": "2019-11-13T14:54:41",
        "upload_time_iso_8601": "2019-11-13T14:54:41.268791Z",
        "url": "https://files.pythonhosted.org/packages/80/02/5abc8dba9c1654e3a53ac9cda288c5d580bbdcf5cd62e1493314e75661b4/python_irodsclient-0.8.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a572f5df7de08df20e94130280dc8b8bad2f65c1047c792ed47c09bda48e2ae9",
          "md5": "6ee6ad5fb537c51912442044b4e8acb7",
          "sha256": "e77c345bea028c748047656f35f576210528b1332087b5f0a7e2ddd179301447"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6ee6ad5fb537c51912442044b4e8acb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 88484,
        "upload_time": "2019-11-13T14:54:43",
        "upload_time_iso_8601": "2019-11-13T14:54:43.156511Z",
        "url": "https://files.pythonhosted.org/packages/a5/72/f5df7de08df20e94130280dc8b8bad2f65c1047c792ed47c09bda48e2ae9/python-irodsclient-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd2734bcd60821ae64f83162cbb4150d68c85bb0403ef2f8682141465d79a490",
          "md5": "9ee839d24b2c84142e55caddc018d053",
          "sha256": "0dafb23efcf824bcab9f213b3ebf9ab9eaf9c409057f040ae8743928a01e2a3a"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.8.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ee839d24b2c84142e55caddc018d053",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 103871,
        "upload_time": "2020-06-05T03:32:27",
        "upload_time_iso_8601": "2020-06-05T03:32:27.121878Z",
        "url": "https://files.pythonhosted.org/packages/fd/27/34bcd60821ae64f83162cbb4150d68c85bb0403ef2f8682141465d79a490/python_irodsclient-0.8.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85bee56cf2789fb205591325ef59ba96e393db9937d045e34e054d27585fa042",
          "md5": "6486b52a3b70534a0744e74b8688d31e",
          "sha256": "5afb6105e4ed01ac40cc8c418d754d2058e1308ae90549fcde13a09d0fd27952"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.8.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6486b52a3b70534a0744e74b8688d31e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 103918,
        "upload_time": "2020-06-05T03:32:28",
        "upload_time_iso_8601": "2020-06-05T03:32:28.659329Z",
        "url": "https://files.pythonhosted.org/packages/85/be/e56cf2789fb205591325ef59ba96e393db9937d045e34e054d27585fa042/python-irodsclient-0.8.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8da2bf0bac08d9438549816b5efecfbc9f499dd10db86615b195eab3ac729ae9",
          "md5": "7af0c34e4ca1f95f2cd83679d8168ae6",
          "sha256": "00445b43f7f052a17009886988e32d06e7c61842f0c90b5b4d1d1116c32e46f2"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.8.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7af0c34e4ca1f95f2cd83679d8168ae6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 112974,
        "upload_time": "2020-10-19T20:27:23",
        "upload_time_iso_8601": "2020-10-19T20:27:23.306502Z",
        "url": "https://files.pythonhosted.org/packages/8d/a2/bf0bac08d9438549816b5efecfbc9f499dd10db86615b195eab3ac729ae9/python_irodsclient-0.8.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e82f2c8308aaabea44dbbe65f471daadac18786bc8737863ddae2fcf0c68eded",
          "md5": "3370da610b8f7e3c5719b82cc99437a2",
          "sha256": "dbb5e829753af126a020bcc8069fe851511f3eda2796204d32bb5e3521316393"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.8.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3370da610b8f7e3c5719b82cc99437a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 112382,
        "upload_time": "2020-10-19T20:27:25",
        "upload_time_iso_8601": "2020-10-19T20:27:25.090782Z",
        "url": "https://files.pythonhosted.org/packages/e8/2f/2c8308aaabea44dbbe65f471daadac18786bc8737863ddae2fcf0c68eded/python-irodsclient-0.8.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "456068be54f22f59aa51b052be468a18b48d7faed6290514c91690709576dbbd",
          "md5": "fea692a1ee5fcb737249a8cb1a9bb1b4",
          "sha256": "974c57b46f99281787844f9e4824534c460fcaad1eb2fa1b01adbb9ecc2d6897"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.8.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fea692a1ee5fcb737249a8cb1a9bb1b4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 113179,
        "upload_time": "2020-11-10T20:29:12",
        "upload_time_iso_8601": "2020-11-10T20:29:12.006468Z",
        "url": "https://files.pythonhosted.org/packages/45/60/68be54f22f59aa51b052be468a18b48d7faed6290514c91690709576dbbd/python_irodsclient-0.8.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0a64bb0941a91f2aaba4a1d08ff185ecc37aba28dec6b3ca18d1788ca40313c",
          "md5": "9b6f26204e1a72c060daed8da37be64f",
          "sha256": "e42d1ffe846389cdf4a80adb7cd700f3f28f20751b5df8aa2986759036010e0e"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.8.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9b6f26204e1a72c060daed8da37be64f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 112629,
        "upload_time": "2020-11-10T20:29:13",
        "upload_time_iso_8601": "2020-11-10T20:29:13.571963Z",
        "url": "https://files.pythonhosted.org/packages/b0/a6/4bb0941a91f2aaba4a1d08ff185ecc37aba28dec6b3ca18d1788ca40313c/python-irodsclient-0.8.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90b0498508e150769f9a014b19cebc941366541adc7cc4548002498672b5134e",
          "md5": "5d9b4dd216f1808d3275ecfe7281b2af",
          "sha256": "24e87eb04ce422b01a3f0e0bab2c116ef9d99e6fe643a8ad9bdde67927806876"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.8.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d9b4dd216f1808d3275ecfe7281b2af",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 119294,
        "upload_time": "2021-01-23T02:50:14",
        "upload_time_iso_8601": "2021-01-23T02:50:14.964425Z",
        "url": "https://files.pythonhosted.org/packages/90/b0/498508e150769f9a014b19cebc941366541adc7cc4548002498672b5134e/python_irodsclient-0.8.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e080f67b11f559e6c39c67cf0b7c6fcc8e8d4603b3e22740ffa147548ef7ee98",
          "md5": "200fed40d0f4d29c626d3398c291a545",
          "sha256": "9a9ea40fdfc92902d9b79eb85f2eb89e7848d21500e1f3ee8246563a121f07c0"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.8.6.tar.gz",
        "has_sig": false,
        "md5_digest": "200fed40d0f4d29c626d3398c291a545",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 122226,
        "upload_time": "2021-01-23T02:50:16",
        "upload_time_iso_8601": "2021-01-23T02:50:16.663483Z",
        "url": "https://files.pythonhosted.org/packages/e0/80/f67b11f559e6c39c67cf0b7c6fcc8e8d4603b3e22740ffa147548ef7ee98/python-irodsclient-0.8.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "224bb777137b6cdd20ea5182f85e4d6a263cfd40c981e5157c16d4ce1e915761",
          "md5": "22b9db8de30d09be001f3ce179edab0c",
          "sha256": "a44440ff68c7b901c5db8cf560959a253cedb089e4c9fa90dd20c2bb530511d6"
        },
        "downloads": -1,
        "filename": "python_irodsclient-0.9.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22b9db8de30d09be001f3ce179edab0c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 138307,
        "upload_time": "2021-05-15T01:49:57",
        "upload_time_iso_8601": "2021-05-15T01:49:57.089697Z",
        "url": "https://files.pythonhosted.org/packages/22/4b/b777137b6cdd20ea5182f85e4d6a263cfd40c981e5157c16d4ce1e915761/python_irodsclient-0.9.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e334ee6871a58ef21d36f88fab72f3bec4cee13b6d2f42b91c386f782348a983",
          "md5": "3d1a6170f5a0a81116c0fc0278478a68",
          "sha256": "57fa9454f2d3deca24ed463a4abee8f29b68f65b0068e8351276a059b687cdaf"
        },
        "downloads": -1,
        "filename": "python-irodsclient-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3d1a6170f5a0a81116c0fc0278478a68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 141305,
        "upload_time": "2021-05-15T01:49:58",
        "upload_time_iso_8601": "2021-05-15T01:49:58.478787Z",
        "url": "https://files.pythonhosted.org/packages/e3/34/ee6871a58ef21d36f88fab72f3bec4cee13b6d2f42b91c386f782348a983/python-irodsclient-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdb51212e29439634378e810ad5e9ba5202862aba038624f8bc679217ce01923",
          "md5": "2c5b60c2868dffddf7f87653511fac6b",
          "sha256": "9e2c727232857645ee8cd9175aa304793a32644a7748c79e0229dd33d787864a"
        },
        "downloads": -1,
        "filename": "python_irodsclient-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c5b60c2868dffddf7f87653511fac6b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 138704,
        "upload_time": "2021-06-03T02:36:03",
        "upload_time_iso_8601": "2021-06-03T02:36:03.753551Z",
        "url": "https://files.pythonhosted.org/packages/cd/b5/1212e29439634378e810ad5e9ba5202862aba038624f8bc679217ce01923/python_irodsclient-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dd78e3032b5bb03635b21f740d5281f2834a02fafc61022b16aa3e9b6a15631",
          "md5": "f1ae0fb1fc78f1f6b9ac27e0f46039d4",
          "sha256": "95e5cb270f5a28a14afde5030684db17fb04678a07a36aeed09e5a365d96b1d5"
        },
        "downloads": -1,
        "filename": "python-irodsclient-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f1ae0fb1fc78f1f6b9ac27e0f46039d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 142315,
        "upload_time": "2021-06-03T02:36:05",
        "upload_time_iso_8601": "2021-06-03T02:36:05.634831Z",
        "url": "https://files.pythonhosted.org/packages/1d/d7/8e3032b5bb03635b21f740d5281f2834a02fafc61022b16aa3e9b6a15631/python-irodsclient-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2fd521571e216cdc5110fd34b69583a866f75e2f3c353dbd4d449820941ce19",
          "md5": "1604eb710f549fa433ee46d401f1bbeb",
          "sha256": "1ea1f6b6b5aa78768be5caf6393ce834c5ab3bec372fefd1f66abe2a7eb1e89c"
        },
        "downloads": -1,
        "filename": "python_irodsclient-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1604eb710f549fa433ee46d401f1bbeb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 164856,
        "upload_time": "2022-01-20T21:36:06",
        "upload_time_iso_8601": "2022-01-20T21:36:06.701392Z",
        "url": "https://files.pythonhosted.org/packages/b2/fd/521571e216cdc5110fd34b69583a866f75e2f3c353dbd4d449820941ce19/python_irodsclient-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95c235751377f776ab9e0c1c2f39bc6d5e07d3bb9723700ea3451c562639cf00",
          "md5": "22fa27291d302027086fcf07dd23a690",
          "sha256": "d360e9030111d4fea5ee9ce760f66f5efe36b855594c5d3d36cf395d900320d3"
        },
        "downloads": -1,
        "filename": "python-irodsclient-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "22fa27291d302027086fcf07dd23a690",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 176592,
        "upload_time": "2022-01-20T21:36:08",
        "upload_time_iso_8601": "2022-01-20T21:36:08.794177Z",
        "url": "https://files.pythonhosted.org/packages/95/c2/35751377f776ab9e0c1c2f39bc6d5e07d3bb9723700ea3451c562639cf00/python-irodsclient-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca20f5e3669579d605ff7e6205d078b080c62d720e250d38c22c037d080cbdf2",
          "md5": "210f0b97b3a0ab45648f808090d0b3ab",
          "sha256": "a7f45738ee870defe141b39c0474b76e2ff1b3b459e537276d36a077595073e4"
        },
        "downloads": -1,
        "filename": "python_irodsclient-1.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "210f0b97b3a0ab45648f808090d0b3ab",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 166403,
        "upload_time": "2022-01-31T15:29:49",
        "upload_time_iso_8601": "2022-01-31T15:29:49.438222Z",
        "url": "https://files.pythonhosted.org/packages/ca/20/f5e3669579d605ff7e6205d078b080c62d720e250d38c22c037d080cbdf2/python_irodsclient-1.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b8cace8443ae596d68243e319808b1985d457b9c8f3efe3b6a11511b57a2cb7",
          "md5": "def886ae5390c8ffbb47d74c12569fcb",
          "sha256": "dfaefec134f4784eff8ed8a66494e65ea1d742639bf9dca667aab8c48e1fcf92"
        },
        "downloads": -1,
        "filename": "python-irodsclient-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "def886ae5390c8ffbb47d74c12569fcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 179095,
        "upload_time": "2022-01-31T15:29:51",
        "upload_time_iso_8601": "2022-01-31T15:29:51.612180Z",
        "url": "https://files.pythonhosted.org/packages/4b/8c/ace8443ae596d68243e319808b1985d457b9c8f3efe3b6a11511b57a2cb7/python-irodsclient-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8838fe3100e2ccfb5d3aab52863ba6d43354d2ebc13e203d75bde8949f7ab3e0",
          "md5": "f12f8c9e203ea3cbed1fac79adfa30a0",
          "sha256": "beb5e43db1dc662fd4c906189abe6db94e72e14a6cb95445c4e1d17453b0e22f"
        },
        "downloads": -1,
        "filename": "python_irodsclient-1.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f12f8c9e203ea3cbed1fac79adfa30a0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 177124,
        "upload_time": "2022-03-16T02:11:24",
        "upload_time_iso_8601": "2022-03-16T02:11:24.643028Z",
        "url": "https://files.pythonhosted.org/packages/88/38/fe3100e2ccfb5d3aab52863ba6d43354d2ebc13e203d75bde8949f7ab3e0/python_irodsclient-1.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "275e2ac0af9c613ced30e301ee171de323e2db85fdea1de927acfa07b2067150",
          "md5": "dc73da477a5151779cb485b26b6265df",
          "sha256": "82a604a6576876df8417c049ba676df81a1d435a0895c25385d37549a303b7e7"
        },
        "downloads": -1,
        "filename": "python-irodsclient-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc73da477a5151779cb485b26b6265df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 192327,
        "upload_time": "2022-03-16T02:11:26",
        "upload_time_iso_8601": "2022-03-16T02:11:26.946369Z",
        "url": "https://files.pythonhosted.org/packages/27/5e/2ac0af9c613ced30e301ee171de323e2db85fdea1de927acfa07b2067150/python-irodsclient-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70746d9e9fb9e59cead45a32eb702d8492aa19d0dcf3d89573b5cb8393e22882",
          "md5": "b013c149d411bdc479f4414494e805e5",
          "sha256": "c093d4dd3f980a78145f6c882acc0cd296fbce110d9f0c7f42852d624e3385fe"
        },
        "downloads": -1,
        "filename": "python_irodsclient-1.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b013c149d411bdc479f4414494e805e5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 177080,
        "upload_time": "2022-04-08T02:42:51",
        "upload_time_iso_8601": "2022-04-08T02:42:51.652953Z",
        "url": "https://files.pythonhosted.org/packages/70/74/6d9e9fb9e59cead45a32eb702d8492aa19d0dcf3d89573b5cb8393e22882/python_irodsclient-1.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41c8e78c6abe20b67ee656bb532585beb69343077fc7096742d2a8873ce8aff2",
          "md5": "50f8cecf36cd37e6cafb9fe449c702e2",
          "sha256": "db1d58c3b2be8ebd970d966a7ed5d3ef2788937da6462ee40e3f243ed1b31fae"
        },
        "downloads": -1,
        "filename": "python-irodsclient-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "50f8cecf36cd37e6cafb9fe449c702e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 192332,
        "upload_time": "2022-04-08T02:42:53",
        "upload_time_iso_8601": "2022-04-08T02:42:53.379666Z",
        "url": "https://files.pythonhosted.org/packages/41/c8/e78c6abe20b67ee656bb532585beb69343077fc7096742d2a8873ce8aff2/python-irodsclient-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f6c4c845b797d13773fa98ca2267b5c050d447c57d47ad24e2c1c03f5f8f671",
          "md5": "f052776f35b6e9c5c00cac19a09bc70b",
          "sha256": "6f6a9f75608ccbd71eb1756b7e6b42e0ba6c71ebc7aa3a19a69c71be016fe82a"
        },
        "downloads": -1,
        "filename": "python_irodsclient-1.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f052776f35b6e9c5c00cac19a09bc70b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 179472,
        "upload_time": "2022-06-29T20:43:38",
        "upload_time_iso_8601": "2022-06-29T20:43:38.159978Z",
        "url": "https://files.pythonhosted.org/packages/3f/6c/4c845b797d13773fa98ca2267b5c050d447c57d47ad24e2c1c03f5f8f671/python_irodsclient-1.1.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1055d2935350f0f024536de313d2937a72d06986bbd8da0bce6d50dedb74832a",
          "md5": "f8b823b204ad6e8cb98f448e26b0da60",
          "sha256": "f427699739911042dc35a7fbd92f7ba87db9fad3977423c2fa2ab61a0ffebe43"
        },
        "downloads": -1,
        "filename": "python-irodsclient-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f8b823b204ad6e8cb98f448e26b0da60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 195511,
        "upload_time": "2022-06-29T20:43:40",
        "upload_time_iso_8601": "2022-06-29T20:43:40.056176Z",
        "url": "https://files.pythonhosted.org/packages/10/55/d2935350f0f024536de313d2937a72d06986bbd8da0bce6d50dedb74832a/python-irodsclient-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adcd592c4df3f9772dbb6d8dcbaa388554e21d3db059ad4660bfb3dc705e9dab",
          "md5": "7b5bdf4bba6088d9edac865681a8b6a8",
          "sha256": "4665d9ef6837054f3526a8fc183f89cd14a26865d24c38de2a111c6920cdb510"
        },
        "downloads": -1,
        "filename": "python_irodsclient-1.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b5bdf4bba6088d9edac865681a8b6a8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 181046,
        "upload_time": "2022-09-21T19:43:16",
        "upload_time_iso_8601": "2022-09-21T19:43:16.533362Z",
        "url": "https://files.pythonhosted.org/packages/ad/cd/592c4df3f9772dbb6d8dcbaa388554e21d3db059ad4660bfb3dc705e9dab/python_irodsclient-1.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a553f62829a28bb7ba54a43699580ad3b7fbdc2fda4084e49b935416cf8f4bf9",
          "md5": "264fc293de56a9a8acf53ad53f61d8db",
          "sha256": "7b8b4bdc4610193d1e58ebd3fc04be58cd471d7155780eab36a5b3c68d6ec182"
        },
        "downloads": -1,
        "filename": "python-irodsclient-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "264fc293de56a9a8acf53ad53f61d8db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 196937,
        "upload_time": "2022-09-21T19:43:19",
        "upload_time_iso_8601": "2022-09-21T19:43:19.494984Z",
        "url": "https://files.pythonhosted.org/packages/a5/53/f62829a28bb7ba54a43699580ad3b7fbdc2fda4084e49b935416cf8f4bf9/python-irodsclient-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c373f52f383e3751be833ddf8ad56e45009d9b4a7e37e7363163970c0bd122a5",
          "md5": "6c6da8cd189f226bd2f55a3898a2e91b",
          "sha256": "6bfb179932f0ef22ac4ef11d23d155ca1bde1c820f804cd1938a6ac05057f055"
        },
        "downloads": -1,
        "filename": "python_irodsclient-1.1.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c6da8cd189f226bd2f55a3898a2e91b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 190903,
        "upload_time": "2023-01-19T03:04:22",
        "upload_time_iso_8601": "2023-01-19T03:04:22.504773Z",
        "url": "https://files.pythonhosted.org/packages/c3/73/f52f383e3751be833ddf8ad56e45009d9b4a7e37e7363163970c0bd122a5/python_irodsclient-1.1.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcbf55342098ac5ae44950eddd85460377e4e2f0b121621f67dffe1de266db7c",
          "md5": "d8bd7113fc8c857a712386615da6d42f",
          "sha256": "d78c367d050f7668825dbf1c5ded6e35a7f33fd8af08fd6084fe438e5dc275d6"
        },
        "downloads": -1,
        "filename": "python-irodsclient-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d8bd7113fc8c857a712386615da6d42f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 207490,
        "upload_time": "2023-01-19T03:04:24",
        "upload_time_iso_8601": "2023-01-19T03:04:24.361522Z",
        "url": "https://files.pythonhosted.org/packages/dc/bf/55342098ac5ae44950eddd85460377e4e2f0b121621f67dffe1de266db7c/python-irodsclient-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f03432484747a1e448ef16368bc18bea2e166eca55ba09289a18d29d435b6af8",
          "md5": "d21decc850c8c1aa62748c3c0144d219",
          "sha256": "7def1c09a88398f2d1f081f49a91c0ce3631e7020bed6339ca059714a9a91451"
        },
        "downloads": -1,
        "filename": "python_irodsclient-1.1.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d21decc850c8c1aa62748c3c0144d219",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 195546,
        "upload_time": "2023-03-28T18:17:21",
        "upload_time_iso_8601": "2023-03-28T18:17:21.909170Z",
        "url": "https://files.pythonhosted.org/packages/f0/34/32484747a1e448ef16368bc18bea2e166eca55ba09289a18d29d435b6af8/python_irodsclient-1.1.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17cc3f52acf433fc6211e85c59818026a11848462459dd30b7816ded07760752",
          "md5": "c224742a91157ee0ec5923528f62fe03",
          "sha256": "d4f63201292edd36741379031b637fa84e74d0947b9a5ea25b962ec2bb1d6786"
        },
        "downloads": -1,
        "filename": "python-irodsclient-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c224742a91157ee0ec5923528f62fe03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 215451,
        "upload_time": "2023-03-28T18:17:24",
        "upload_time_iso_8601": "2023-03-28T18:17:24.685374Z",
        "url": "https://files.pythonhosted.org/packages/17/cc/3f52acf433fc6211e85c59818026a11848462459dd30b7816ded07760752/python-irodsclient-1.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f03432484747a1e448ef16368bc18bea2e166eca55ba09289a18d29d435b6af8",
        "md5": "d21decc850c8c1aa62748c3c0144d219",
        "sha256": "7def1c09a88398f2d1f081f49a91c0ce3631e7020bed6339ca059714a9a91451"
      },
      "downloads": -1,
      "filename": "python_irodsclient-1.1.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d21decc850c8c1aa62748c3c0144d219",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 195546,
      "upload_time": "2023-03-28T18:17:21",
      "upload_time_iso_8601": "2023-03-28T18:17:21.909170Z",
      "url": "https://files.pythonhosted.org/packages/f0/34/32484747a1e448ef16368bc18bea2e166eca55ba09289a18d29d435b6af8/python_irodsclient-1.1.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17cc3f52acf433fc6211e85c59818026a11848462459dd30b7816ded07760752",
        "md5": "c224742a91157ee0ec5923528f62fe03",
        "sha256": "d4f63201292edd36741379031b637fa84e74d0947b9a5ea25b962ec2bb1d6786"
      },
      "downloads": -1,
      "filename": "python-irodsclient-1.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "c224742a91157ee0ec5923528f62fe03",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 215451,
      "upload_time": "2023-03-28T18:17:24",
      "upload_time_iso_8601": "2023-03-28T18:17:24.685374Z",
      "url": "https://files.pythonhosted.org/packages/17/cc/3f52acf433fc6211e85c59818026a11848462459dd30b7816ded07760752/python-irodsclient-1.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}