{
  "info": {
    "author": "Crossed Omega",
    "author_email": "placeholderemail11002299@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# graph2sound\n\nThis is a Python library for adding some auditory feedback to your graphs. Alternatively, this library has capabilities such as creating smooth variable-frequency waveforms or playing simple MIDI-tones.\n\n## Installation\nUse `pip install graph2sound` to install the module.\\\nAlternatively, download `graph2sound.py` and save it in your working directory.\n\n\n## Dependencies\n`numpy` for array creation and modification.\\\n`scipy` for signal modification and interpolation.\\\n`sounddevice` is required for playback. However, as the wav + samplerate can be extracted with `graph2wav`, it is not strictly needed.\n\n## Usage\nDepending on what you want to do, g2s may be called as a single function. These functions acutally chain some subroutines together to assemble and play the final tone.\\\nThe general syntax is as follows:\n```\nimport graph2sound as g2s\ng2s.graph2sound(y[,x],[t=,r=,s=,l=,h=,w=,f=])\n```\n\n### Demo\nTest g2s by `g2s.graph2sound()`. Plays a demo sound.\n\n### Single y series\nAt the very least, g2s requires a single data series consisting of two points or more.\n```\ny = [i**2 for i in range(10)]\ng2s.graph2sound(y)\n```\nThis will play a tone which increases in frequency quadratically. Every point in the series is played for an equal amount of time (linear time mapping).\n\n\n### Single x y series\nIf you have an associated time series, for example a result from an ODE solver, you may also map your data points to time. Note: the lengths of the two series must be equal.\n```\nimport numpy as np\nt = np.logspace(0.1,1,100)\ny = np.sin(t)\ng2s.graph2sound(y,t)\n```\nThis will play a sound which steadily increases in frequency, as apposed to a logarithmic increase in frequency.\n\n### Two-dimensional y series\nIf you have a series of y data which is 2D, g2s will automatically convert all rows to wavs and adds them.\n```\ny = [[i*j for i in range(5)] for j in range(5)]\ng2s.graph2sound(y)\n```\nThis will play the normalized summed waveforms, row major.\n\n### Keyword use and more examples\n```\nimport pandas as pd\nd = {'x':[0,0.1,0.2,3],'y':[0,0,0,1]}\ndf = pd.DataFrame(d)\ng2s.graph2sound(df['y'],df['x'],t=1.5,l=440,h=880,w='sawtooth')\n```\nPlays from a dataframe. Has a 1.5 second duration, the lowest/highest tones are 440 and 880 and the synth uses a sawtooth wave.\n\n```\nfrom scipy import signal\nimport numpy as np\nx = np.linspace(0,20)\ny = signal.square(x)\ng2s.graph2sound(y,x,w='square')\n```\nThis is what a square square wave sounds like.\n\n### Keywords\n`g2s.graph2sound` takes multiple optional keywords:\\\n`t = float,int` Default: 2 seconds. Determines the length of the tone played.\\\n`r = int` Default: 44100. Sample rate. Determines the samples per second which are fed into the audio library.\\\n`s = int` Default: 100*t. The number of segments the tone is divided in. Essentially: how many frequency changes the tone has.\\\n`l = float` Default: 130.813 Hz. C3. This is the lowest tone the y series will be mapped to.\\\n`h = float` Default: 2093.005 Hz. C7. This is the highest tone the y series will be mapped to.\n\n`w =`\\\n`sine` Outputs a sine waveform (default).\\\n`square` Outputs a square waveform.\\\n`sawtooth` Outputs a sawtooth waveform.\\\n`f =`\\\n`fifth` Adds a perfect fifth overtone.\\\n`yaranaika` HARMONY\\\n`MATLAB` plays the sound like ye olde days.\\\n\n### Low-level functions\nRead the docs (TODO) to use the underlying functions.\\\n`wave,samplerate = g2s.graph2wave` takes in the arguments mentioned above and converts it to the required waveform. Assembles it into a ready-to-play array. Returns the waveform and the samplerate used.\\\n`g2s.wave2sound(wave,samplerate)` takes the arguments of the previous function and plays them back.\\\n`y,x = g2s.argskwargcleanup(*args,**kwargs)` verifies the x/y data format to it can be used in the rest of the functions.\\\n`f_list = g2s.freqlist(y,x,frequency_low,frequency_high,segments)` creates a frequency table which is required to synthesize the desired tone.\\\n`wave,samplerate = g2s.synth(time,samplerate,segments,frequency_list,**kwargs)` is the meat and potatoes of this module. Given information on how the samplerate and the segments look like, synthesizes a continuous waveform with the desired samplerate.\\\n`freq = g2s.midi2freq(mnn)` takes in a [midi note number](https://www.cs.cmu.edu/~music/cmsip/readings/Standard-MIDI-file-format-updated.pdf) (not from MIDI.org, needs login) and returns the frequency. A4 = 69 = 440 Hz.\\\n`mnn = g2s.freq2midi(freq)` takes in a frequency and returns the midi note number as specified above.\\\n`mnn = g2s.midi2midi(mnn,delta_freq=0)` changes the midi number by a given frequency. Does not output ints or check if the number is a real note or not.\\\n`freq = g2s.freq2freq(freq,delta_mnn=0)` changes the frequency by a midi note interval.\n\n\n\n## Support\nShit's broken? Merge requests are open.\n\n\n## License\nMIT\n\n\n## Why?\nIn one of my bachelors' courses (control theory), I was fucking around with MATLAB (hallowed be thy name) and at a certain point, I thought to myself:\n\n> *\"This graph needs sound\"*\\\n> \\- Crossed Omega, 2018\n\nObviously, this Lovecraftian horror of an idea took digital form rather quickly. After ample time, the first iteration was done - which sounded pretty horrible<sup>1</sup>. For the next three years, it remained untouched, left stewing, the entity itself anticipating a return. As I learnt Python, one of the first things I did, after giving the IT department a major headache, was rewrite graph2sound to be used as a Python library. Alas, my attempt to do so was not thwarted and thus stands before you an *academic shitpost*<sup>TM</sup> of genuine Dutch quality.\\\n<sup>1</sup>: You can actually listen to what it sounded like by passing the MATLAB filter keyword `f=MATLAB`.\n\n## TODO\n- ~~Add a small amount of filters to modify the waveforms~~\n- ~~Rewrite the synth function, some of the arguments are redundant~~\n- Add an LFO\n- ~~Add a sound library checker~~\n- ~~Add proper data sanitation~~\n- ~~Add multi-dimensional sounds~~\n- (Never ever) Rewrite this as a matplotlib backend\n\n## Known bugs\n- The synth function bugs out at some edge cases: for a function with the highest point at t=end, the final frequency is never played. Requires changes to the frequency list function.\n- The data validation misses lists such as [1,[1,2,3]] as a check for raggedness. This development is a pain in the bum.\n- The raggedness of arrays is still not handled perfectly, as ragged arrays cause all kinds of different errors.\n- The returned datatype of the ...2midi functions is a float; this should be an int and checked for if the frequency is actually a midi note.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/p8244/graph2sound",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graph2sound",
    "package_url": "https://pypi.org/project/graph2sound/",
    "platform": null,
    "project_url": "https://pypi.org/project/graph2sound/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/p8244/graph2sound/-/issues",
      "Homepage": "https://gitlab.com/p8244/graph2sound"
    },
    "release_url": "https://pypi.org/project/graph2sound/1.1.3/",
    "requires_dist": [
      "numpy",
      "scipy",
      "sounddevice"
    ],
    "requires_python": ">=3.6",
    "summary": "Converts graphs to sound.",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13475659,
  "releases": {
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db2d76526e03a96fe96169e54475113f086b23492883662da21d53799cf8838c",
          "md5": "74035c66dd5e445286cb379cc6f1bc62",
          "sha256": "e4d067a6ce6a7d5d3c7e6f49c1befbaf790260bf67e446e60eb0f745e90b805c"
        },
        "downloads": -1,
        "filename": "graph2sound-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74035c66dd5e445286cb379cc6f1bc62",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8041,
        "upload_time": "2022-04-11T09:34:32",
        "upload_time_iso_8601": "2022-04-11T09:34:32.463651Z",
        "url": "https://files.pythonhosted.org/packages/db/2d/76526e03a96fe96169e54475113f086b23492883662da21d53799cf8838c/graph2sound-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05a12624f883838d7038cef5ce070d861077903d9297f9025c6b8bf687c6fdc1",
          "md5": "aed7e03e6f3477dfccce66a99829d983",
          "sha256": "45010e9ec5e3d84cf7e828c91ff9a2a09d19f39bd25acbe0f27e7d5c36c3fd97"
        },
        "downloads": -1,
        "filename": "graph2sound-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "aed7e03e6f3477dfccce66a99829d983",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8706,
        "upload_time": "2022-04-11T09:34:34",
        "upload_time_iso_8601": "2022-04-11T09:34:34.086560Z",
        "url": "https://files.pythonhosted.org/packages/05/a1/2624f883838d7038cef5ce070d861077903d9297f9025c6b8bf687c6fdc1/graph2sound-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db2d76526e03a96fe96169e54475113f086b23492883662da21d53799cf8838c",
        "md5": "74035c66dd5e445286cb379cc6f1bc62",
        "sha256": "e4d067a6ce6a7d5d3c7e6f49c1befbaf790260bf67e446e60eb0f745e90b805c"
      },
      "downloads": -1,
      "filename": "graph2sound-1.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "74035c66dd5e445286cb379cc6f1bc62",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8041,
      "upload_time": "2022-04-11T09:34:32",
      "upload_time_iso_8601": "2022-04-11T09:34:32.463651Z",
      "url": "https://files.pythonhosted.org/packages/db/2d/76526e03a96fe96169e54475113f086b23492883662da21d53799cf8838c/graph2sound-1.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05a12624f883838d7038cef5ce070d861077903d9297f9025c6b8bf687c6fdc1",
        "md5": "aed7e03e6f3477dfccce66a99829d983",
        "sha256": "45010e9ec5e3d84cf7e828c91ff9a2a09d19f39bd25acbe0f27e7d5c36c3fd97"
      },
      "downloads": -1,
      "filename": "graph2sound-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "aed7e03e6f3477dfccce66a99829d983",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8706,
      "upload_time": "2022-04-11T09:34:34",
      "upload_time_iso_8601": "2022-04-11T09:34:34.086560Z",
      "url": "https://files.pythonhosted.org/packages/05/a1/2624f883838d7038cef5ce070d861077903d9297f9025c6b8bf687c6fdc1/graph2sound-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}