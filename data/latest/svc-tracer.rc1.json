{
  "info": {
    "author": "gebing",
    "author_email": "gebing@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: System :: Distributed Computing",
      "Topic :: System :: Networking"
    ],
    "description": "svc-tracer\n============================================================\n\nTable of Contents\n=================\n\n- [About](#About)\n- [Installing](#installing)\n- [Usage](#Usage)\n\nAbout\n=====\n\nsvc-tracer is a command line tool based on scapy to trace service traffic, such as REST, thrift, .etc.\n\nInstalling\n==========\n\n- **Windows**\n\n1. Install [Python 2.7 or 3.4+](https://www.python.org/):\n\n    When installing, option **`Add python.exe to Path`** must be selected and enabled. Or after installation, manually add the Python installation directory and its Scripts subdirectory to your PATH. Depending on your Python version, the defaults would be C:\\Python27 and C:\\Python27\\Scripts respectively.\n\n1. Install the latest version of [Npcap](https://nmap.org/npcap/): \n\n    Default values are recommended. Scapy will also work with Winpcap.\n    \n1. Install `svc-tracer` via pip\n\n    ```\n    pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ svc-tracer\n    ```\n\n1. Reboot the system\n\n- **Linux**\n\n1. Install [Python 2.7 or 3.4+](https://www.python.org/)\n\n1. Install [tcpdump](http://www.tcpdump.org/) and make sure it is in the $PATH\n\n    ```\n    # Debian/Ubuntu:\n    sudo apt-get install tcpdump\n    \n    # Fedora:\n    yum install tcpdump\n    ```\n\n1. Install `svc-tracer` via pip\n\n    ```\n    pip install -i https://mirrors.aliyun.com/pypi/simple/ svc-tracer\n    ```\n\n- **MacOSX**\n\n1. Install [Python 2.7 or 3.4+](https://www.python.org/)\n\n1. Install `libpcap`\n\n    ```\n    brew update\n    brew install libpcap\n    ```\n\n1. Install `svc-tracer` via pip\n\n    ```\n    pip install -i https://pypi.douban.com/simple/ svc-tracer\n    ```\n\n- **Known Issues**\n\nRefer [scapy install guide](https://scapy.readthedocs.io/en/latest/installation.html) for known problems.\n\nUsage\n=====\n\n- **General command help**\n\n    ```\n    svc-tracer --help\n    usage: svc-tracer [-h] {show,thrift,http} ...\n    \n    positional arguments:\n      {show,thrift,http}\n        show              Show all interfaces\n        thrift            Trace thrift service\n        http              Trace http service\n    \n    optional arguments:\n      -h, --help          show this help message and exit\n    ```\n\n- **Command: show**\n \n    Sub command `show` will show all available network interface's name in user's computer, so that they can use it as the parameter of `--iface`:\n\n- **Command: http**\n \n    Sub command `http` will trace http service requests and responses on specific network interface and specific port, command line help is below:\n\n    ```\n    svc-tracer http --help\n    usage: svc-tracer http [-h] -i <iface> -p <port> [-f <ip> [<ip> ...]] [-t <ip> [<ip> ...]] [-m <regex> [<regex> ...]] [--unpaired]\n                           [--print <mode>] [--check_interval <interval>] [--check_timeout <timeout>] [-l <level>] [-o <path>] [-c]\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      -i <iface>, --iface <iface>\n                            The interface of sniff from\n      -p <port>, --port <port>\n                            The port of the service listens to\n      -f <ip> [<ip> ...], --from <ip> [<ip> ...]\n                            Only record the messages from this IP(s)\n      -t <ip> [<ip> ...], --to <ip> [<ip> ...]\n                            Only record the messages to this IP(s)\n      -m <regex> [<regex> ...], --method <regex> [<regex> ...]\n                            Only record the messages match this method(s)\n      --unpaired            Print the messages as they arrive, possibly out of order\n      --print <mode>        Print parts of the message. Options: header, data, all, none\n      --check_interval <interval>\n                            Interval in seconds for checking unpair message\n      --check_timeout <timeout>\n                            Timeout in seconds for checking unpair alert\n      -l <level>, --log-level <level>\n                            The output level of messages. Options: debug, info, warn, error\n      -o <path>, --log-file <path>\n                            The output file of messages\n      -c, --log-clear       The output file will be cleared\n    ```\n\n    - `iface`: **Required**. Specific the name of network interface, such as: `eth0`, ``  \n\n    - `port`: **Required**. Specific the port of remote or local service listens to \n    \n    - `from`: **Optional**. Make tracer only record the request from specific ip(s) and the response to specific ip(s). \n        \n        Default: do not filter message by from ip.\n    \n    - `to`: **Optional**. Make tracer only record the request to specific ip(s) and from response to specific ip(s). \n    \n        Default: do not filter message by to ip.\n\n    - `method`: **Optional**. Make tracer only record the request and response with http url matching specific regex expression(s).\n    \n        Default: do not filter message by request url.\n\n    - `unpaired`: **Optional**. This option will not pair the request and response, and print the message separately as they arrive. Note: possibly out of order because the pcap limitation.\n\n        Default: Pair the request and response, and print them together.\n    \n    - `print`: **Optional**. This option will define the print parts of message. Options: `header`, `data`, `all`, `none`\n\n        Default: `all`, print all parts of message.\n    \n    - `check_interval`: **Optional**. Tracer in `paired` mode will check the unpaired messages in queue for the specific interval. It is useful for finding requests without responses. This option will not work in `unpaired` mode.\n\n        Default: 5 seconds.\n    \n    - `check_timeout`: **Optional**. Unpaired message's timeout value. Tracer will alert and print the timeout unpaired messages in `error` level. This option will not work in `unpaired` mode.\n\n        Default: 5 seconds.\n        \n    - `log-level`: **Optional**. The output level of messages. Tracer will only print the messages with level higher than this level. \n\n        Default: `info`, print all messages.\n        \n    - `log-file`: **Optional**. The path of output file for messages.  \n\n        Default: `None`, only output to console.\n        \n    - `log-clear`: **Optional**. Whether the output file will be cleared first.  \n\n        Default: `false`, append to output file.\n\n- **Command: thrift**\n \n    Sub command `thrift` will trace thrift service requests and responses on specific network interface and specific port, command line help is below:\n\n    ```\n    svc-tracer thrift --help\n    usage: svc-tracer thrift [-h] -i <iface> -p <port> [-f <ip> [<ip> ...]] [-t <ip> [<ip> ...]] [-m <regex> [<regex> ...]]\n                             [--unpaired] [--print <mode>] [--check_interval <interval>] [--check_timeout <timeout>] [-l <level>]\n                             [-o <path>] [-c] [--transport <trans>] [--protocol <proto>] [--finagle] [--idl-file <path>]\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      -i <iface>, --iface <iface>\n                            The interface of sniff from\n      -p <port>, --port <port>\n                            The port of the service listens to\n      -f <ip> [<ip> ...], --from <ip> [<ip> ...]\n                            Only record the messages from this IP(s)\n      -t <ip> [<ip> ...], --to <ip> [<ip> ...]\n                            Only record the messages to this IP(s)\n      -m <regex> [<regex> ...], --method <regex> [<regex> ...]\n                            Only record the messages match this method(s)\n      --unpaired            Print the messages as they arrive, possibly out of order\n      --print <mode>        Print parts of the message. Options: header, data, all, none\n      --check_interval <interval>\n                            Interval in seconds for checking unpair message\n      --check_timeout <timeout>\n                            Timeout in seconds for checking unpair alert\n      -l <level>, --log-level <level>\n                            The output level of messages. Options: debug, info, warn, error\n      -o <path>, --log-file <path>\n                            The output file of messages\n      -c, --log-clear       The output file will be cleared\n      --transport <trans>   Use a specific transport. Options: auto, buffered, framed\n      --protocol <proto>    Use a specific protocol. Options: auto, binary, compact, json\n      --finagle             Detect finagle-thrift traffic (i.e.: with request headers)\n      --idl-file <path>     Use .thrift file to resolve types\n    ```\n\n    - `iface`: **Required**. Specific the name of network interface, such as: `eth0`, ``  \n\n    - `port`: **Required**. Specific the port of remote or local service listens to \n    \n    - `from`: **Optional**. Make tracer only record the request from specific ip(s) and the response to specific ip(s). \n        \n        Default: do not filter message by from ip.\n    \n    - `to`: **Optional**. Make tracer only record the request to specific ip(s) and from response to specific ip(s). \n    \n        Default: do not filter message by to ip.\n\n    - `method`: **Optional**. Make tracer only record the request and response with http url matching specific regex expression(s).\n    \n        Default: do not filter message by request url.\n\n    - `unpaired`: **Optional**. This option will not pair the request and response, and print the message separately as they arrive. Note: possibly out of order because the pcap limitation.\n\n        Default: Pair the request and response, and print them together.\n    \n    - `print`: **Optional**. This option will define the print parts of message. Options: `header`, `data`, `all`, `none`\n\n        Default: `all`, print all parts of message.\n    \n    - `check_interval`: **Optional**. Tracer in `paired` mode will check the unpaired messages in queue for the specific interval. It is useful for finding requests without responses. This option will not work in `unpaired` mode.\n\n        Default: 5 seconds.\n    \n    - `check_timeout`: **Optional**. Unpaired message's timeout value. Tracer will alert and print the timeout unpaired messages in `error` level. This option will not work in `unpaired` mode.\n\n        Default: 5 seconds.\n        \n    - `log-level`: **Optional**. The output level of messages. Tracer will only print the messages with level higher than this level. \n\n        Default: `info`, print all messages.\n        \n    - `log-file`: **Optional**. The path of output file for messages.  \n\n        Default: `None`, only output to console.\n        \n    - `log-clear`: **Optional**. Whether the output file will be cleared first.  \n\n        Default: `false`, append to output file.\n\n    - `transport`: **Optional**. The transport frame mode of the thrift message.  \n\n        Default: `auto`, auto detect the transport mode.\n\n    - `protocol`: **Optional**. The protocol of the thrift message.  \n\n        Default: `auto`, auto detect the protocol.\n\n    - `finagle`: **Optional**. Try to detect finagle-thrift's request headers.  \n\n        Default: `false`, auto detect the protocol.\n\n    - `idl-file`: **Optional**. The path of .thrift file for resolving types of method's arguments.  \n\n        Default: `None`, do not use .thrift file.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gebing/svc-tracer",
    "keywords": "pcap service thrift tracer",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "svc-tracer",
    "package_url": "https://pypi.org/project/svc-tracer/",
    "platform": "any",
    "project_url": "https://pypi.org/project/svc-tracer/",
    "project_urls": {
      "Homepage": "https://github.com/gebing/svc-tracer"
    },
    "release_url": "https://pypi.org/project/svc-tracer/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Service tracer base on scapy",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8400440,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54513cb106d7e8d39c9ae16519a7a8c5adb5015faac7b80807c8f259c1b3f4ea",
          "md5": "1f0ecca3b056bcfe5cf229c07423cfae",
          "sha256": "43eebd3156d8cdb0e528e9c9053080b98b8300a47a6f92e7ff09357e567ca5f9"
        },
        "downloads": -1,
        "filename": "svc-tracer-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1f0ecca3b056bcfe5cf229c07423cfae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17811,
        "upload_time": "2020-10-02T01:03:34",
        "upload_time_iso_8601": "2020-10-02T01:03:34.587803Z",
        "url": "https://files.pythonhosted.org/packages/54/51/3cb106d7e8d39c9ae16519a7a8c5adb5015faac7b80807c8f259c1b3f4ea/svc-tracer-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54513cb106d7e8d39c9ae16519a7a8c5adb5015faac7b80807c8f259c1b3f4ea",
        "md5": "1f0ecca3b056bcfe5cf229c07423cfae",
        "sha256": "43eebd3156d8cdb0e528e9c9053080b98b8300a47a6f92e7ff09357e567ca5f9"
      },
      "downloads": -1,
      "filename": "svc-tracer-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "1f0ecca3b056bcfe5cf229c07423cfae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17811,
      "upload_time": "2020-10-02T01:03:34",
      "upload_time_iso_8601": "2020-10-02T01:03:34.587803Z",
      "url": "https://files.pythonhosted.org/packages/54/51/3cb106d7e8d39c9ae16519a7a8c5adb5015faac7b80807c8f259c1b3f4ea/svc-tracer-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}