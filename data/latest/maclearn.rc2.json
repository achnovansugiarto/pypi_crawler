{
  "info": {
    "author": "Sajedur Rahman Fiad",
    "author_email": "neural.gen.official@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<h2><a style=\"color:#FF0000;\"><b>Installation - How to install</b></a></h2></br>\nThe easiest way to install  maclearn is using pip. Open your teminal and enter - <br/><code><i>pip install maclearn</i></code></br></br></br>\n</br>\n<h2><a style=\"color:#FF0000;\"><b>Instruction - How to use maclearn</b></h2></a></br>\n  Using <b>maclearn</b> in your project is simple enough. Currently, you'll find only 2 algorithms in this module. We are working to develop more.</br></br></br>\n\n  <h3><b>Reading Excel Files (.csv/.xlsx)</b></h3>\n  Reading excel files using <b>maclearn</b> is quite easy.</br>\n  Let's say we want to read this file (PizzaPrice.csv) -\n  <a href=\"lr.csv\" name=\"MicrosoftExcelButton\"></a>\n<table>\n  <thead><tr>\n    <th>Size</th>\n    <th>&nbsp;Price</th>\n    </tr></thead>\n  <tbody>\n    <tr>\n      <td>&nbsp;6</td>\n      <td>&nbsp;350</td>\n    </tr>\n    <tr>\n      <td>&nbsp;8</td>\n      <td>&nbsp;775</td>\n    </tr>\n    <tr>\n      <td>&nbsp;12</td>\n      <td>&nbsp;1150</td>\n    </tr>\n    <tr>\n      <td>&nbsp;14</td>\n      <td>&nbsp;1395</td>\n    </tr>\n    <tr>\n      <td>&nbsp;17</td>\n      <td>&nbsp;1648</td>\n    </tr>\n    <tr>\n      <td>&nbsp;18</td>\n      <td>&nbsp;1675</td>\n    </tr>\n  </tbody>\n</table>\n  </br>\n  The file may be in .xlsx or .csv format but the extension doesn't matter. Here's how to read it -</br>\n  For .csv format -\n  <code>\n\n            import maclearn # importing the module\n            \n            filename = \"PizzaPrice.csv\"  # Initialize the directory\n            file = maclearn.csv(filename)  # Create a csv object\n            data = file.data()  # Read the data and store it as a list\n            print(data)  # Print the data\n  </code></br>\n  <pre>\n            Result - [[6, 8, 12, 14, 17, 18], [350, 775, 1150, 1395, 1648, 1675]]\n  </pre></br></br>\n\n  For .xlsx format -\n  <pre>\n\n            import maclearn # importing the module\n            \n            filename = \"PizzaPrice.xlsx\"  # Initialize the directory\n            file = maclearn.xlsx(filename)  # Create a xlsx object\n            data = file.data()  # Read the data and store it as a list\n            print(data)  # Print the data\n  </pre></br>\n  <pre>\n            Result - [[6, 8, 12, 14, 17, 18], [350, 775, 1150, 1395, 1648, 1675]]\n  </pre></br></br>\n  If you want, you can put <code>file.data()</code> in the fit method of GaussianNaiveBayes or LinearRegression in order to fit the data to your model from an excel file\n\n\n  </br></br></br>\n  <h3><b>Gaussian Naive Bayes Classifier</b></h3>\n  First create the object GaussianNaiveBayes()...</br>\n  Then call the fit() method to fit the data to your model.</br>\n  Note: Your data must be in this format - [Feature1, Feature2, Feature3, Label]...</br>\n  Here, you can use as many features as you want...</br>\n  After that, simply call the predict(*Features) method to predict the label....</br>\n  You can calculate the <i>F1 Measure</i> for your model by simply calling the f1_measure() method.</br>\n  You can also calculate the <i>specificity</i> for your model by simply calling the specificity() method.</br>\n  <i>Example:</i>\n  <code>\n\n            import maclearn # Importing the module\n            # Features\n            Outlook = [\"Sunny\", \"Sunny\", \"Cloudy\", \"Sunny\", \"Cloudy\", \"Cloudy\", \"Sunny\"]\n            Temperature = [\"Cold\", \"Warm\", \"Warm\", \"Warm\", \"Cold\", \"Cold\", \"Cold\"]\n            Routine = [\"Indoor\", \"Outdoor\", \"Indoor\", \"Indoor\", \"Indoor\", \"Outdoor\", \"Outdoor\", \"Outdoor\"]\n            WearCoat = [\"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\"] # Labels\n            \n            # You can also import the data from an excel file\n            Features = [Outlook, Temperature, Routine, WearCoat] # Putting all features in a list\n            \n            model = maclearn.GaussianNaiveBayes()  # Creating the object\n            model.fit(Features) # Fit the data into the model\n\n            # Should we wear coat, if our feature set is cloudy, warm and outdoor?\n            print(model.predict(\"Cloudy\", \"Warm\", \"Outdoor\")) # Predict the label\n            f1_value = model.f1_measure() # Calculate the F1 measure value for the model\n            specificity = model.specificity() # Calculate the specificity for the model\n            print(f1_value * 100, \"%\") # print F1 measure value in percentage\n            print(specificity * 100, \"%\") # print specificity in percentage\n\n  </code>\n  </br></br></br>\n\n\n  <h3><b>Linear Regression with numerical analysis</b></h3>\n  First create the object - LinearRegression()...</br>\n  Then call the fit(x, y) method to fit the data to your model.</br>\n  This model is for <i>single variable linear regression</i>. So your data must be in this format - X=[2,3,4], Y=[5,6,7]</br>\n  Then, just call the predict(x) method with the argument of x value to predict the y value...</br>\n  You can also calculate the <i>R-Squared value</i> by simply calling r_squared() method.</br>\n  <i>Example:</i>\n  <code>\n\n            import maclearn # Importing the module\n\n            # You can also import the data from an excel file\n            Size = [6, 8, 12, 14, 18] # Size of Pizza in inches (Independent Variable)\n            Price = [350, 775, 1150, 1395, 1675] # Price of Pizza in Taka (Dependent Variable)\n                        \n            model = maclearn.LinearRegression()  # Creating the object\n            model.fit(Size, Price) # Fit the data into the model\n\n            predicted = model.predict(17) # Predicted the price of 17 inches pizza\n            accuracy = model.r_squared() # Calculate the R-Squared value for the model\n\n            print(predicted) # Print the predicted value\n            print(accuracy * 100, \"%\") # Print the R-Squared value in percenntage\n  </code>\n  </br></br></br>\n\n<h2><a style=\"color:#FF0000;\"><b>Lisence</b></h2></a></br>\nThis module is completely free and open source. You can use and modify to improve the module if you want ;)\n</br>Any suggestion will be highly appriciated. Gmail - <code>neural.gen.official@gmail.com</code>\n</br></br>\nCreated by <b>Sajedur Rahman Fiad</b>",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MacLearn",
    "package_url": "https://pypi.org/project/MacLearn/",
    "platform": "",
    "project_url": "https://pypi.org/project/MacLearn/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/MacLearn/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple module for using Machine Learning in your code.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11754387,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b1abaac3f833e68af9e96cbf858daf460379d79af6feb44fb3eb900d2b44d99",
          "md5": "a8db1363dec6a6b6cc0f303206516123",
          "sha256": "356ff763cdb044a054d96898f2a5d5d3ae44a5b6a40da2e95269979852fb937c"
        },
        "downloads": -1,
        "filename": "MacLearn-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a8db1363dec6a6b6cc0f303206516123",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5292,
        "upload_time": "2021-09-10T14:08:51",
        "upload_time_iso_8601": "2021-09-10T14:08:51.436938Z",
        "url": "https://files.pythonhosted.org/packages/2b/1a/baac3f833e68af9e96cbf858daf460379d79af6feb44fb3eb900d2b44d99/MacLearn-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "532b7707d73c7b42cff31a89d21deb51c6b51b5ced50c4f5cda8294fc2f04f2d",
          "md5": "30f9767b77f41c094ea0192e21470cef",
          "sha256": "822d0ee36ddb277fd6f98676fefd808525174121c7c3165d881289fe533d7d08"
        },
        "downloads": -1,
        "filename": "MacLearn-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "30f9767b77f41c094ea0192e21470cef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5492,
        "upload_time": "2021-10-18T05:15:54",
        "upload_time_iso_8601": "2021-10-18T05:15:54.088737Z",
        "url": "https://files.pythonhosted.org/packages/53/2b/7707d73c7b42cff31a89d21deb51c6b51b5ced50c4f5cda8294fc2f04f2d/MacLearn-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "532b7707d73c7b42cff31a89d21deb51c6b51b5ced50c4f5cda8294fc2f04f2d",
        "md5": "30f9767b77f41c094ea0192e21470cef",
        "sha256": "822d0ee36ddb277fd6f98676fefd808525174121c7c3165d881289fe533d7d08"
      },
      "downloads": -1,
      "filename": "MacLearn-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "30f9767b77f41c094ea0192e21470cef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5492,
      "upload_time": "2021-10-18T05:15:54",
      "upload_time_iso_8601": "2021-10-18T05:15:54.088737Z",
      "url": "https://files.pythonhosted.org/packages/53/2b/7707d73c7b42cff31a89d21deb51c6b51b5ced50c4f5cda8294fc2f04f2d/MacLearn-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}