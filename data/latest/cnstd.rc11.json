{
  "info": {
    "author": "breezedeus",
    "author_email": "breezedeus@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<div align=\"center\">\n\t<img src=\"./docs/logo.png\" width=\"250px\"/>\n  <div>&nbsp;</div>\n\n[![Downloads](https://static.pepy.tech/personalized-badge/cnstd?period=total&units=international_system&left_color=grey&right_color=orange&left_text=Downloads)](https://pepy.tech/project/cnstd)\n[![license](https://img.shields.io/github/license/breezedeus/cnstd)](./LICENSE)\n[![PyPI version](https://badge.fury.io/py/cnstd.svg)](https://badge.fury.io/py/cnstd)\n[![forks](https://img.shields.io/github/forks/breezedeus/cnstd)](https://img.shields.io/github/forks/breezedeus/cnstd)\n[![stars](https://img.shields.io/github/stars/breezedeus/cnstd)](https://github.com/breezedeus/cnocr)\n![last-releast](https://img.shields.io/github/release-date/breezedeus/cnstd?style=plastic)\n![last-commit](https://img.shields.io/github/last-commit/breezedeus/cnstd)\n[![Twitter](https://img.shields.io/twitter/url?url=https%3A%2F%2Ftwitter.com%2Fbreezedeus)](https://twitter.com/breezedeus)\n\n</div>\n\n# CnSTD\n\n\n# Update 2023.02.19：发布 V1.2.2\n\n主要变更：\n* MFD训练了参数更多精度更高的模型，供 [P2T网页版](https://p2t.behye.com) 使用。\n* 优化了检测出的boxes的排序算法，使得boxes的顺序更加符合人类的阅读习惯。\n\n了解更多：[RELEASE.md](./RELEASE.md) 。\n\n---\n\n\n\n**CnSTD** 是 **Python 3** 下的**场景文字检测**（**Scene Text Detection**，简称**STD**）工具包，支持**中文**、**英文**等语言的文字检测，自带了多个训练好的检测模型，安装后即可直接使用。**CnSTD** 自 **V1.2.1** 版本开始，加入了**数学公式检测**（**Mathematical Formula Detection**，简称**MFD**）模型，并提供训练好的模型可直接用于检测图片中包含的数学公式（**行内公式** `embedding` 与**独立行公式** `isolated` ）。\n\n欢迎扫码加入微信交流群：\n\n<div align=\"center\">\n  <img src=\"https://huggingface.co/datasets/breezedeus/cnocr-wx-qr-code/resolve/main/wx-qr-code.JPG\" alt=\"微信群二维码\" width=\"300px\"/>\n</div>\n\n作者也维护 **知识星球** [**CnOCR/CnSTD/P2T私享群**](https://t.zsxq.com/FEYZRJQ)，欢迎加入。**知识星球私享群**会陆续发布一些CnOCR/CnSTD/P2T相关的私有资料，包括**更详细的训练教程**，**未公开的模型**，使用过程中遇到的难题解答等。本群也会发布OCR/STD相关的最新研究资料。\n\n自 **V1.0.0** 版本开始，**CnSTD** 从之前基于 MXNet 实现转为基于 **PyTorch** 实现。新模型的训练合并了  **ICPR MTWI 2018**、**ICDAR RCTW-17** 和 **ICDAR2019-LSVT** 三个数据集，包括了 **`46447`** 个训练样本，和 **`1534`** 个测试样本。\n\n相较于之前版本， 新版本的变化主要包括：\n\n* 加入了对 [**PaddleOCR**](https://github.com/PaddlePaddle/PaddleOCR) 检测模型的支持；\n* 部分调整了检测结果中 `box` 的表达方式，统一为 `4` 个点的坐标值；  \n* 修复了已知bugs。\n\n如需要识别文本框中的文字，可以结合 **OCR** 工具包 **[cnocr](https://github.com/breezedeus/cnocr)** 一起使用。\n\n\n## 示例\n\n### 场景文字检测（STD）\n\n<div align=\"center\">\n  <img src=\"./docs/cases.png\" alt=\"STD效果\" width=\"700px\"/>\n</div>\n\n### 数学公式检测（MFD）\n\nMFD 模型检测图片中包含的数学公式，其中行内的公式检测为 `embedding` 类别，独立行的公式检测为 `isolated`。模型训练使用了英文 [IBEM](https://zenodo.org/record/4757865) 和中文 [CnMFD_Dataset](https://github.com/breezedeus/CnMFD_Dataset) 两个数据集。\n\n<div align=\"center\">\n  <img src=\"./examples/mfd/out-zh4.jpg\" alt=\"中文MFD效果\" width=\"700px\"/>\n</div>  \n<div align=\"center\">\n  <img src=\"./examples/mfd/out-zh5.jpg\" alt=\"中文MFD效果\" width=\"700px\"/>\n</div>\n<div align=\"center\">\n  <img src=\"./examples/mfd/out-en2.jpg\" alt=\"英文MFD效果\" width=\"700px\"/>\n</div> \n\n\n### 版面分析（Layout Analysis）\n\n版面分析模型识别图片中的不同排版元素。模型训练使用的是 [CDLA](https://github.com/buptlihang/CDLA) 数据集。可识别以下10中版面元素：\n\n|正文|标题|图片|图片标题|表格|表格标题|页眉|页脚|注释|公式|\n|---|---|---|---|---|---|---|---|---|---|\n|Text|Title|Figure|Figure caption|Table|Table caption|Header|Footer|Reference|Equation|\n\n<div align=\"center\">\n  <img src=\"./examples/layout/out-zh.jpg\" alt=\"版面分析效果\" width=\"700px\"/>\n</div>  \n\n\n## 安装\n\n嗯，顺利的话很简单（bless）。\n\n```bash\npip install cnstd\n```\n\n安装速度慢的话，可以指定国内的安装源，如使用豆瓣源：\n\n```bash\npip install cnstd -i https://pypi.doubanio.com/simple\n```\n\n【注意】：\n\n* 请使用 **Python3** (3.6以及之后版本应该都行)，没测过Python2下是否ok。\n* 依赖 **opencv**，所以可能需要额外安装opencv。\n\n## 已有STD模型\n\nCnSTD 从 **V1.2** 开始，可直接使用的模型包含两类：1）CnSTD 自己训练的模型，通常会包含 PyTorch 和 ONNX 版本；2）从其他ocr引擎搬运过来的训练好的外部模型，ONNX化后用于 CnSTD 中。\n\n直接使用的模型都放在 [**cnstd-cnocr-models**](https://huggingface.co/breezedeus/cnstd-cnocr-models) 项目中，可免费下载使用。\n\n### 1. CnSTD 自己训练的模型\n\n当前版本（Since **V1.1.0**）的文字检测模型使用的是 [**DBNet**](https://github.com/MhLiao/DB)，相较于 V0.1 使用的 [PSENet](https://github.com/whai362/PSENet) 模型， DBNet 的检测耗时几乎下降了一个量级，同时检测精度也得到了极大的提升。\n\n目前包含以下已训练好的模型：\n\n| 模型名称                       | 参数规模      | 模型文件大小    | 测试集精度（IoU） | 平均推断耗时<br />（秒/张） | 下载方式                                                      |\n| -------------------------- | --------- | --------- | ---------- | ----------------- | --------------------------------------------------------- |\n| db_resnet34                | 22.5 M    | 86 M      | **0.7322** | 3.11              | 自动                                                        |\n| db_resnet18                | 12.3 M    | 47 M      | 0.7294     | 1.93              | 自动                                                        |\n| db_mobilenet_v3            | 4.2 M     | 16 M      | **0.7269** | 1.76              | 自动                                                        |\n| db_mobilenet_v3_small      | 2.0 M     | 7.9 M     | 0.7054     | 1.24              | 自动                                                        |\n| db_shufflenet_v2           | 4.7 M     | 18 M      | 0.7238     | 1.73              | 自动                                                        |\n| **db_shufflenet_v2_small** | 3.0 M     | 12 M      | 0.7190     | 1.29              | 自动                                                        |\n| db_shufflenet_v2_tiny      | **1.9 M** | **7.5 M** | **0.7172** | **1.14**          | [下载链接](https://mp.weixin.qq.com/s/fHPNoGyo72EFApVhEgR6Nw) |\n\n> 上表耗时基于本地 Mac 获得，绝对值无太大参考价值，相对值可供参考。IoU的计算方式经过调整，仅相对值可供参考。\n\n相对于两个基于 **ResNet** 的模型，基于 **MobileNet** 和 **ShuffleNet** 的模型体积更小，速度更快，建议在轻量级场景使用。\n\n### 2. 外部模型\n\n以下模型是 [**PaddleOCR**](https://github.com/PaddlePaddle/PaddleOCR) 中模型的 **ONNX** 版本，所以不会依赖 **PaddlePaddle** 相关工具包，故而也不支持基于这些模型在自己的领域数据上继续精调模型。这些模型支持检测**竖排文字**。\n\n| `model_name`    | PyTorch 版本 | ONNX 版本 | 支持检测的语言    | 模型文件大小 |\n| --------------- | ---------- | ------- | ---------- | ------ |\n| ch_PP-OCRv3_det | X          | √       | 简体中问、英文、数字 | 2.3 M  |\n| ch_PP-OCRv2_det | X          | √       | 简体中问、英文、数字 | 2.2 M  |\n| en_PP-OCRv3_det | X          | √       | **英文**、数字  | 2.3 M  |\n\n更多模型可参考 [PaddleOCR/models_list.md](https://github.com/PaddlePaddle/PaddleOCR/blob/release%2F2.5/doc/doc_ch/models_list.md) 。如有其他外语（如日、韩等）检测需求，可在 **知识星球** [**CnOCR/CnSTD私享群**](https://t.zsxq.com/FEYZRJQ) 中向作者提出建议。\n\n## 使用方法\n\n首次使用 **CnSTD** 时，系统会自动下载zip格式的模型压缩文件，并存放于 `~/.cnstd`目录（Windows下默认路径为 `C:\\Users\\<username>\\AppData\\Roaming\\cnstd`）。下载速度超快。下载后的zip文件代码会自动对其解压，然后把解压后的模型相关目录放于`~/.cnstd/1.2`目录中。\n\n如果系统无法自动成功下载zip文件，则需要手动从 [百度云盘](https://pan.baidu.com/s/1zDMzArCDrrXHWL0AWxwYQQ?pwd=nstd)（提取码为 `nstd`）下载对应的zip文件并把它存放于 `~/.cnstd/1.2`（Windows下为 `C:\\Users\\<username>\\AppData\\Roaming\\cnstd\\1.2`）目录中。模型也可从 **[cnstd-cnocr-models](https://huggingface.co/breezedeus/cnstd-cnocr-models)** 中下载。放置好zip文件后，后面的事代码就会自动执行了。\n\n### 场景文字检测（STD）\n\n使用类 `CnStd` 进行场景文字的检测。类 `CnStd` 的初始化函数如下：\n\n```python\nclass CnStd(object):\n    \"\"\"\n    场景文字检测器（Scene Text Detection）。虽然名字中有个\"Cn\"（Chinese），但其实也可以轻松识别英文的。\n    \"\"\"\n\n    def __init__(\n        self,\n        model_name: str = 'ch_PP-OCRv3_det',\n        *,\n        auto_rotate_whole_image: bool = False,\n        rotated_bbox: bool = True,\n        context: str = 'cpu',\n        model_fp: Optional[str] = None,\n        model_backend: str = 'onnx',  # ['pytorch', 'onnx']\n        root: Union[str, Path] = data_dir(),\n        use_angle_clf: bool = False,\n        angle_clf_configs: Optional[dict] = None,\n        **kwargs,\n    ):\n```\n\n其中的几个参数含义如下：\n\n* `model_name`:  模型名称，即前面模型表格第一列中的值。默认为 **ch_PP-OCRv3_det** 。\n\n* `auto_rotate_whole_image`:  是否自动对整张图片进行旋转调整。默认为`False`。\n\n* `rotated_bbox`:  是否支持检测带角度的文本框；默认为 `True`，表示支持；取值为 `False` 时，只检测水平或垂直的文本。\n\n* `context`：预测使用的机器资源，可取值为字符串`cpu`、`gpu`、`cuda:0`。\n\n* `model_fp`:  如果不使用系统自带的模型，可以通过此参数直接指定所使用的模型文件（`.ckpt`文件）。\n\n* `model_backend` (str): 'pytorch', or 'onnx'。表明预测时是使用 PyTorch 版本模型，还是使用 ONNX 版本模型。  同样的模型，ONNX 版本的预测速度一般是 PyTorch 版本的2倍左右。默认为 `onnx`。\n\n* `root`: 模型文件所在的根目录。\n\n  * Linux/Mac下默认值为 `~/.cnstd`，表示模型文件所处文件夹类似 `~/.cnstd/1.2/db_shufflenet_v2_small`。\n  * Windows下默认值为 `C:\\Users\\<username>\\AppData\\Roaming\\cnstd`。\n\n* `use_angle_clf` (bool): 对于检测出的文本框，是否使用角度分类模型进行调整（检测出的文本框可能会存在倒转180度的情况）。默认为 `False`\n\n* `angle_clf_configs` (dict): 角度分类模型对应的参数取值，主要包含以下值：\n\n  - `model_name`: 模型名称。默认为 'ch_ppocr_mobile_v2.0_cls'\n  - `model_fp`: 如果不使用系统自带的模型，可以通过此参数直接指定所使用的模型文件（'.onnx' 文件）。默认为 `None`。具体可参考类 `AngleClassifier` 的说明\n\n每个参数都有默认取值，所以可以不传入任何参数值进行初始化：`std = CnStd()`。\n\n文本检测使用类`CnOcr`的函数 **`detect()`**，以下是详细说明：\n\n#### 类函数`CnStd.detect()`\n\n```python\n    def detect(\n        self,\n        img_list: Union[\n            str,\n            Path,\n            Image.Image,\n            np.ndarray,\n            List[Union[str, Path, Image.Image, np.ndarray]],\n        ],\n        resized_shape: Union[int, Tuple[int, int]] = (768, 768),\n        preserve_aspect_ratio: bool = True,\n        min_box_size: int = 8,\n        box_score_thresh: float = 0.3,\n        batch_size: int = 20,\n        **kwargs,\n    ) -> Union[Dict[str, Any], List[Dict[str, Any]]]:\n```\n\n**函数说明**：\n\n函数输入参数包括：\n\n- `img_list`: 支持对单个图片或者多个图片（列表）的检测。每个值可以是图片路径，或者已经读取进来 `PIL.Image.Image` 或 `np.ndarray`,  格式应该是 `RGB` 3 通道，shape: `(height, width, 3)`, 取值范围：`[0, 255]`。\n\n- `resized_shape`: `int` or `tuple`, `tuple` 含义为 `(height, width)`, `int` 则表示高宽都为此值；  \n   检测前，先把原始图片resize到接近此大小（只是接近，未必相等）。默认为 `(768, 768)`。\n\n  > **Note** **（注意）**\n  > 这个取值对检测结果的影响较大，可以针对自己的应用多尝试几组值，再选出最优值。例如 `(512, 768)`, `(768, 768)`, `(768, 1024)`等。\n\n- `preserve_aspect_ratio`: 对原始图片 resize 时是否保持高宽比不变。默认为 `True`。\n\n- `min_box_size`: 过滤掉高度或者宽度小于此值的文本框。默认为 `8`，也即高或者宽小于 `8` 的文本框会被过滤去掉。\n\n- `box_score_thresh`: 过滤掉得分低于此值的文本框。默认为 `0.3`。\n\n- `batch_size`: 待处理图片很多时，需要分批处理，每批图片的数量由此参数指定。默认为 `20`。\n\n- `kwargs`: 保留参数，目前未被使用。\n\n函数输出类型为`list`，其中每个元素是一个字典，对应一张图片的检测结果。字典中包含以下 `keys`：\n\n- `rotated_angle`: `float`, 整张图片旋转的角度。只有 `auto_rotate_whole_image==True` 才可能非 `0`。\n\n- `detected_texts`: `list`, 每个元素存储了检测出的一个框的信息，使用词典记录，包括以下几个值：\n\n  - `box`：检测出的文字对应的矩形框；`np.ndarray`, shape: `(4, 2)`，对应 box 4个点的坐标值 `(x, y)`;\n\n  - `score`：得分；`float` 类型；分数越高表示越可靠；\n\n  - `croppped_img`：对应 \"box\" 中的图片patch（`RGB`格式），会把倾斜的图片旋转为水平。`np.ndarray`类型，`shape: (height, width, 3)`,  取值范围：`[0, 255]`；\n\n  - 示例:\n\n    ```python\n      [{'box': array([[416,  77],\n                      [486,  13],\n                      [800, 325],\n                      [730, 390]], dtype=int32),\n        'score': 1.0, \n        'cropped_img': array([[[25, 20, 24],\n                               [26, 21, 25],\n                               [25, 20, 24],\n                              ...,\n                               [11, 11, 13],\n                               [11, 11, 13],\n                               [11, 11, 13]]], dtype=uint8)},\n       ...\n      ]\n    ```\n\n#### 调用示例\n\n```python\nfrom cnstd import CnStd\nstd = CnStd()\nbox_info_list = std.detect('examples/taobao.jpg')\n```\n\n或：\n\n```python\nfrom PIL import Image\nfrom cnstd import CnStd\n\nstd = CnStd()\nimg_fp = 'examples/taobao.jpg'\nimg = Image.open(img_fp)\nbox_infos = std.detect(img)\n```\n\n### 识别检测框中的文字（OCR）\n\n上面示例识别结果中\"cropped_img\"对应的值可以直接交由 **[cnocr](https://github.com/breezedeus/cnocr)** 中的 **`CnOcr`** 进行文字识别。如上例可以结合  **`CnOcr`** 进行文字识别：\n\n```python\nfrom cnstd import CnStd\nfrom cnocr import CnOcr\n\nstd = CnStd()\ncn_ocr = CnOcr()\n\nbox_infos = std.detect('examples/taobao.jpg')\n\nfor box_info in box_infos['detected_texts']:\n    cropped_img = box_info['cropped_img']\n    ocr_res = cn_ocr.ocr_for_single_line(cropped_img)\n    print('ocr result: %s' % str(ocr_res))\n```\n\n注：运行上面示例需要先安装  **[cnocr](https://github.com/breezedeus/cnocr)** ：\n\n```bash\npip install cnocr\n```\n\n\n\n### 数学公式检测（MFD）与 版面分析（Layout Analysis）\n\n数学公式检测（MFD）与 版面分析（Layout Analysis）都是检测图片中感兴趣的元素，它们使用的都是基于YOLOv7的检测架构，在CnSTD都来源于相同的类 `LayoutAnalyzer`，差别只是训练模型使用的数据不同。\n\n> 这两个模型的训练代码在 [yolov7](https://github.com/breezedeus/yolov7) 中（Forked from [WongKinYiu/yolov7](https://github.com/WongKinYiu/yolov7)，感谢原作者。）\n\n\n\n类 `LayoutAnalyzer` 的初始化函数如下：\n\n```python\nclass LayoutAnalyzer(object):\n    def __init__(\n        self,\n        model_name: str = 'mfd',  # 'layout' or 'mfd'\n        *,\n        model_type: str = 'yolov7_tiny',\n        model_backend: str = 'pytorch',\n        model_fp: Optional[str] = None,\n        root: Union[str, Path] = data_dir(),\n        device: str = 'cpu',\n        **kwargs,\n    ):\n```\n\n其中的参数含义如下：\n\n- `model_name`: 字符串类型，表示模型类型。可选值：'mfd' 表示数学公式检测；'layout' 表示版面分析。默认值：'mfd'\n\n- `model_type`: 字符串类型，表示模型类型。当前支持 'yolov7_tiny' 和 'yolov7'；默认值：'yolov7_tiny'\n\n- `model_backend`: 字符串类型，表示backend。当前仅支持: 'pytorch'；默认值：'pytorch'\n\n- `model_fp`: 字符串类型，表示模型文件的路径。默认值：`None`，表示使用默认的文件路径\n\n- `root`: 字符串或`Path`类型，表示模型文件所在的根目录。\n  - Linux/Mac下默认值为 `~/.cnstd`，表示模型文件所处文件夹类似 `~/.cnstd/1.2/analysis`\n  - Windows下默认值为 `C:/Users/<username>/AppData/Roaming/cnstd`。\n\n- `device`: 字符串类型，表示运行模型的设备，可选值：'cpu' 或 'gpu'；默认值：'cpu'\n\n- `**kwargs`: 额外的参数。\n\n\n\n函数输出结果为一个`list`，其中每个元素表示识别出的版面中的一个元素，包含以下信息：\n\n* type: 版面元素对应的类型；可选值来自：`self.categories` ;\n* box: 版面元素对应的矩形框；`np.ndarray`, shape: (4, 2)，对应 box 4个点的坐标值 `(x, y)` ;\n* score: 得分，越高表示越可信 。\n\n\n\n#### 类函数`LayoutAnalyzer.analyze()`\n\n对指定图片（列表）进行版面分析。\n\n```python\ndef analyze(\n    self,\n    img_list: Union[\n        str,\n        Path,\n        Image.Image,\n        np.ndarray,\n        List[Union[str, Path, Image.Image, np.ndarray]],\n    ],\n    resized_shape: Union[int, Tuple[int, int]] = 700,\n    box_margin: int = 2,\n    conf_threshold: float = 0.25,\n    iou_threshold: float = 0.45,\n) -> Union[List[Dict[str, Any]], List[List[Dict[str, Any]]]]:\n```\n\n\n\n**函数说明**：\n\n函数输入参数包括：\n\n* `img_list` (str or list): 待识别图片或图片列表；如果是 `np.ndarray`，则应该是shape为 `[H, W, 3]` 的 RGB 格式数组\n* `resized_shape` (int or tuple): (H, W); 把图片resize到此大小再做分析；默认值为 `700`\n* `box_margin` (int): 对识别出的内容框往外扩展的像素大小；默认值为 `2`\n* `conf_threshold` (float): 分数阈值；默认值为 `0.25`\n* `iou_threshold` (float): IOU阈值；默认值为 `0.45`\n* `**kwargs`: 额外的参数。\n\n\n\n#### 调用示例\n\n```python\nfrom cnstd import LayoutAnalyzer\nimg_fp = 'examples/mfd/zh5.jpg'\nanalyzer = LayoutAnalyzer('mfd')\nout = analyzer.analyze(img_fp, resized_shape=700)\nprint(out)\n```\n\n\n\n\n\n### 脚本使用\n\n**cnstd** 包含了几个命令行工具，安装 **cnstd** 后即可使用。\n\n#### STD 预测单个文件或文件夹中所有图片\n\n使用命令 **`cnstd predict`** 预测单个文件或文件夹中所有图片，以下是使用说明：\n\n```bash\n(venv) ➜  cnstd git:(master) ✗ cnstd predict -h\nUsage: cnstd predict [OPTIONS]\n\n  预测单个文件，或者指定目录下的所有图片\n\nOptions:\n  -m, --model-name [ch_PP-OCRv2_det|ch_PP-OCRv3_det|db_mobilenet_v3|db_mobilenet_v3_small|db_resnet18|db_resnet34|db_shufflenet_v2|db_shufflenet_v2_small|db_shufflenet_v2_tiny|en_PP-OCRv3_det]\n                                  模型名称。默认值为 db_shufflenet_v2_small\n  -b, --model-backend [pytorch|onnx]\n                                  模型类型。默认值为 `onnx`\n  -p, --pretrained-model-fp TEXT  使用训练好的模型。默认为 `None`，表示使用系统自带的预训练模型\n  -r, --rotated-bbox              是否检测带角度（非水平和垂直）的文本框。默认为 `True`\n  --resized-shape TEXT            格式：\"height,width\";\n                                  预测时把图片resize到此大小再进行预测。两个值都需要是32的倍数。默认为\n                                  `768,768`\n\n  --box-score-thresh FLOAT        检测结果只保留分数大于此值的文本框。默认值为 `0.3`\n  --preserve-aspect-ratio BOOLEAN\n                                  resize时是否保留图片原始比例。默认值为 `True`\n  --context TEXT                  使用cpu还是 `gpu` 运行代码，也可指定为特定gpu，如`cuda:0`。默认为\n                                  `cpu`\n\n  -i, --img-file-or-dir TEXT      输入图片的文件路径或者指定的文件夹\n  -o, --output-dir TEXT           检测结果存放的文件夹。默认为 `./predictions`\n  -h, --help                      Show this message and exit.\n```\n\n例如可以使用以下命令对图片 `examples/taobao.jpg`进行检测，并把检测结果存放在目录 `outputs`中：\n\n```bash\ncnstd predict -i examples/taobao.jpg -o outputs\n```\n\n具体使用也可参考文件 [Makefile](./Makefile) 。\n\n\n\n#### MFD or Layout Analysis 预测单个文件\n\n使用命令 **`cnstd analyze`** 获得单个文件的 MFD 或者 Layout Analysis 结果，以下是使用说明：\n\n```bash\n(venv) ➜  cnstd git:(master) ✗ cnstd analyze -h\nUsage: cnstd analyze [OPTIONS]\n\n  对给定图片进行 MFD 或者 版面分析。\n\nOptions:\n  -m, --model-name [mfd|layout]   模型类型。`mfd` 表示数学公式检测，`layout`\n                                  表示版面分析；默认为：`mfd`\n  -t, --model-type TEXT           模型类型。当前支持 [`yolov7_tiny`, `yolov7`]\n  -b, --model-backend [pytorch|onnx]\n                                  模型后端架构。当前仅支持 `pytorch`\n  -p, --model-fp TEXT             使用训练好的模型。默认为 `None`，表示使用系统自带的预训练模型\n  --device TEXT                   cuda device, i.e. 0 or 0,1,2,3 or cpu\n  -i, --img-fp TEXT               待分析的图片路径或图片目录\n  -o, --output-fp TEXT            分析结果输出的图片路径。默认为 `None`，会存储在当前文件夹，文件名称为输入文件名称\n                                  前面增加`out-`；如输入文件名为 `img.jpg`, 输出文件名即为 `out-\n                                  img.jpg`；如果输入为目录，则此路径也应该是一个目录，会将输出文件存储在此目录下\n  --resized-shape INTEGER         分析时把图片resize到此大小再进行。默认为 `700`\n  --conf-thresh FLOAT             Confidence Threshold。默认值为 `0.25`\n  --iou-thresh FLOAT              IOU threshold for NMS。默认值为 `0.45`\n  -h, --help                      Show this message and exit.\n```\n\n例如可以使用以下命令对图片 `examples/mfd/zh.jpg` 进行 MFD，并把检测结果存放在文件 `out-zh.jpg` 中：\n\n```bash\n(venv) ➜  cnstd analyze -m mfd --conf-thresh 0.25 --resized-shape 800 -i examples/mfd/zh.jpg -o out-zh.jpg\n```\n\n具体使用也可参考文件 [Makefile](./Makefile) 。\n\n#### 模型训练\n\n使用命令 **`cnstd train`**  训练文本检测模型，以下是使用说明：\n\n```bash\n(venv) ➜  cnstd git:(master) ✗ cnstd train -h\nUsage: cnstd train [OPTIONS]\n\n  训练文本检测模型\n\nOptions:\n  -m, --model-name [db_resnet50|db_resnet34|db_resnet18|db_mobilenet_v3|db_mobilenet_v3_small|db_shufflenet_v2|db_shufflenet_v2_small|db_shufflenet_v2_tiny]\n                                  模型名称。默认值为 `db_shufflenet_v2_small`\n  -i, --index-dir TEXT            索引文件所在的文件夹，会读取文件夹中的 `train.tsv` 和 `dev.tsv` 文件\n                                  [required]\n\n  --train-config-fp TEXT          训练使用的json配置文件  [required]\n  -r, --resume-from-checkpoint TEXT\n                                  恢复此前中断的训练状态，继续训练\n  -p, --pretrained-model-fp TEXT  导入的训练好的模型，作为初始模型。优先级低于 \"--restore-training-\n                                  fp\"，当传入\"--restore-training-fp\"时，此传入失效\n\n  -h, --help                      Show this message and exit.\n```\n\n具体使用可参考文件 [Makefile](./Makefile) 。\n\n#### 模型转存\n\n训练好的模型会存储训练状态，使用命令 **`cnstd resave`**  去掉与预测无关的数据，降低模型大小。\n\n```bash\n(venv) ➜  cnstd git:(master) ✗ cnstd resave -h\nUsage: cnstd resave [OPTIONS]\n\n  训练好的模型会存储训练状态，使用此命令去掉预测时无关的数据，降低模型大小\n\nOptions:\n  -i, --input-model-fp TEXT   输入的模型文件路径  [required]\n  -o, --output-model-fp TEXT  输出的模型文件路径  [required]\n  -h, --help                  Show this message and exit.\n```\n\n## 未来工作\n\n* [x] 进一步精简模型结构，降低模型大小\n* [x] PSENet速度上还是比较慢，尝试更快的STD算法\n* [x] 加入更多的训练数据\n* [x] 加入对外部模型的支持\n* [x] 加入数学公式检测（MFD）与 版面分析（Layout Analysis）模型\n* [ ] 加入对文档结构与表格的检测\n\n\n\n## 给作者来杯咖啡\n\n开源不易，如果此项目对您有帮助，可以考虑 [给作者来杯咖啡 ☕️](https://cnocr.readthedocs.io/zh/latest/buymeacoffee/) 。\n\n---\n\n官方代码库：[https://github.com/breezedeus/cnstd](https://github.com/breezedeus/cnstd)。\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/breezedeus/cnstd",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cnstd",
    "package_url": "https://pypi.org/project/cnstd/",
    "platform": "Mac",
    "project_url": "https://pypi.org/project/cnstd/",
    "project_urls": {
      "Homepage": "https://github.com/breezedeus/cnstd"
    },
    "release_url": "https://pypi.org/project/cnstd/1.2.2/",
    "requires_dist": [
      "click",
      "tqdm",
      "pyyaml",
      "unidecode",
      "torch (>=1.8.0)",
      "torchvision (>=0.9.0)",
      "numpy",
      "scipy",
      "pandas",
      "pytorch-lightning",
      "pillow (>=5.3.0)",
      "opencv-python (>=4.0.0)",
      "shapely",
      "Polygon3",
      "pyclipper",
      "matplotlib",
      "seaborn",
      "onnx",
      "onnxruntime",
      "pip-tools ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Python3 package for Chinese/English STR (Scene Text Recognition), with small pretrained models",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16923729,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cd99c289d7d6d4aad369eb687488f1c32b55e12d33b1b16438d6858232ecbcb",
          "md5": "0fb6e60f66963ff227355fc1459390dc",
          "sha256": "ac8574709a9d1e83a4a9109af5b20a8a9b0f58e2b288fc8dfe671c579e228ca8"
        },
        "downloads": -1,
        "filename": "cnstd-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fb6e60f66963ff227355fc1459390dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 50720,
        "upload_time": "2020-06-02T11:34:43",
        "upload_time_iso_8601": "2020-06-02T11:34:43.917678Z",
        "url": "https://files.pythonhosted.org/packages/8c/d9/9c289d7d6d4aad369eb687488f1c32b55e12d33b1b16438d6858232ecbcb/cnstd-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59896cc8d3e38b84601b52a5e37fedca271d479b6c01c48ba053845c2290a5df",
          "md5": "efbf10ab1efbe1dc7c5f4fa8a7dc348e",
          "sha256": "70692b21e384945e5b58bca03e71f209996095fc1b9803a7ead759d71f4c032c"
        },
        "downloads": -1,
        "filename": "cnstd-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efbf10ab1efbe1dc7c5f4fa8a7dc348e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33399,
        "upload_time": "2020-06-02T11:34:46",
        "upload_time_iso_8601": "2020-06-02T11:34:46.609842Z",
        "url": "https://files.pythonhosted.org/packages/59/89/6cc8d3e38b84601b52a5e37fedca271d479b6c01c48ba053845c2290a5df/cnstd-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "673a5fc25f5736418614ea950fef60802b2285f9f113b8077f76fd22e6a01a31",
          "md5": "d5975d6b5ac9e12ceb9904bbec12617c",
          "sha256": "25f61033e094e3b0e9744b67ec8b4853a73441eecd4c7b688b7e889b3046d48c"
        },
        "downloads": -1,
        "filename": "cnstd-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5975d6b5ac9e12ceb9904bbec12617c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 50991,
        "upload_time": "2020-07-01T04:11:16",
        "upload_time_iso_8601": "2020-07-01T04:11:16.957283Z",
        "url": "https://files.pythonhosted.org/packages/67/3a/5fc25f5736418614ea950fef60802b2285f9f113b8077f76fd22e6a01a31/cnstd-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1586848b9113691e2a1c0b14e8b6262afe784b75cd91d6575176d385a181dad",
          "md5": "97c22988953d941c4b2cf920daa498ac",
          "sha256": "fae5a2ce8110bc252180cc768fe7ba85ff9919e6386b64308408d2790b4e9680"
        },
        "downloads": -1,
        "filename": "cnstd-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "97c22988953d941c4b2cf920daa498ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33730,
        "upload_time": "2020-07-01T04:11:18",
        "upload_time_iso_8601": "2020-07-01T04:11:18.936098Z",
        "url": "https://files.pythonhosted.org/packages/a1/58/6848b9113691e2a1c0b14e8b6262afe784b75cd91d6575176d385a181dad/cnstd-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35e1b2232e7762fd103f1dd9a023f2e68f8707e6b53643b77dbb4cdab902f0a6",
          "md5": "74c4fbb51bcb0700eee1f6e7ef5fbcc5",
          "sha256": "36c757e15bb4fba105c6d085af978a2b7dd58f0b728f66ab68c8554ec7b430ba"
        },
        "downloads": -1,
        "filename": "cnstd-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74c4fbb51bcb0700eee1f6e7ef5fbcc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 96395,
        "upload_time": "2021-08-24T03:27:52",
        "upload_time_iso_8601": "2021-08-24T03:27:52.725695Z",
        "url": "https://files.pythonhosted.org/packages/35/e1/b2232e7762fd103f1dd9a023f2e68f8707e6b53643b77dbb4cdab902f0a6/cnstd-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc9892a5f3c790e9fb270ac94a0dcd40c83843b03bd5bb103ac1cf5eef23e7e9",
          "md5": "8f4d0e28a4c013d4110c6bf084156441",
          "sha256": "562077aa04599b8a4b1068a6887a14a9fdf36b95df62ddb86207501fb5b8f750"
        },
        "downloads": -1,
        "filename": "cnstd-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8f4d0e28a4c013d4110c6bf084156441",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33022,
        "upload_time": "2021-08-24T03:27:54",
        "upload_time_iso_8601": "2021-08-24T03:27:54.566428Z",
        "url": "https://files.pythonhosted.org/packages/cc/98/92a5f3c790e9fb270ac94a0dcd40c83843b03bd5bb103ac1cf5eef23e7e9/cnstd-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7004e1e114caeede8529f7b935469b2c6bf4f4e642f7c01b0c56cc7cbe8f918c",
          "md5": "ea540ab90c9a31f21052432f004b55dd",
          "sha256": "a972b05a935a62c80cc13a0a675908b3c24d892bef989115938fe5ea4976b409"
        },
        "downloads": -1,
        "filename": "cnstd-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea540ab90c9a31f21052432f004b55dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 100852,
        "upload_time": "2021-08-26T09:52:00",
        "upload_time_iso_8601": "2021-08-26T09:52:00.232410Z",
        "url": "https://files.pythonhosted.org/packages/70/04/e1e114caeede8529f7b935469b2c6bf4f4e642f7c01b0c56cc7cbe8f918c/cnstd-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e865860fca09a10590d7d256dab967f39e4bcf143e1bc272eea5f35dc466ab4",
          "md5": "dc4b113a5c268f41fc7872bbb367dd63",
          "sha256": "b384e724d3b449ee0c38a47170abf998485e67c89db1f52b079b729d71700cb4"
        },
        "downloads": -1,
        "filename": "cnstd-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc4b113a5c268f41fc7872bbb367dd63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55011,
        "upload_time": "2021-08-26T09:52:06",
        "upload_time_iso_8601": "2021-08-26T09:52:06.782787Z",
        "url": "https://files.pythonhosted.org/packages/4e/86/5860fca09a10590d7d256dab967f39e4bcf143e1bc272eea5f35dc466ab4/cnstd-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "402872eea8a79d5f3cf4710dd590e6299a0a2b68c9d1e17a7c2b9809f67ab7a8",
          "md5": "1b25e5d5158d490a855575e6d616071d",
          "sha256": "712f7f2505961350a7cc4da648edb031590c7866425a54bb4124871dc61285e6"
        },
        "downloads": -1,
        "filename": "cnstd-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b25e5d5158d490a855575e6d616071d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 100897,
        "upload_time": "2021-08-30T05:34:21",
        "upload_time_iso_8601": "2021-08-30T05:34:21.568744Z",
        "url": "https://files.pythonhosted.org/packages/40/28/72eea8a79d5f3cf4710dd590e6299a0a2b68c9d1e17a7c2b9809f67ab7a8/cnstd-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fb5bb871ce23577baea5bea03a118d469d3afd66150513ad50d89057fab6a90",
          "md5": "49a9c218883fb9e6a31dbc092a34ef53",
          "sha256": "83823e4186f2ea4391d54e164730b0d483bba3dae070decc4ed14ba23f30932c"
        },
        "downloads": -1,
        "filename": "cnstd-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "49a9c218883fb9e6a31dbc092a34ef53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55081,
        "upload_time": "2021-08-30T05:34:27",
        "upload_time_iso_8601": "2021-08-30T05:34:27.610478Z",
        "url": "https://files.pythonhosted.org/packages/8f/b5/bb871ce23577baea5bea03a118d469d3afd66150513ad50d89057fab6a90/cnstd-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae24bb919160a4e13fd75f1320369419e02b548a2ef85afd4ffaea4eae50d20e",
          "md5": "a570e4263ef9940d33699a98d6ad11eb",
          "sha256": "929c28b42bf77bbe5674a520a9e4e7067e68ac5c1d931051aa6fe075bd95d17f"
        },
        "downloads": -1,
        "filename": "cnstd-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a570e4263ef9940d33699a98d6ad11eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 108617,
        "upload_time": "2021-09-20T10:56:00",
        "upload_time_iso_8601": "2021-09-20T10:56:00.441160Z",
        "url": "https://files.pythonhosted.org/packages/ae/24/bb919160a4e13fd75f1320369419e02b548a2ef85afd4ffaea4eae50d20e/cnstd-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51e193c23bbd1d7ea0b5d3ed8b5f8ba5a57ecf71f6ad8187a0b56eec75da1ff0",
          "md5": "92a95ddd8fae972e8f1631845020cc2d",
          "sha256": "e5c51ee5f79d45a267fd6880d62b67e35bbd7d79375d2b1bc33555f87a1ff078"
        },
        "downloads": -1,
        "filename": "cnstd-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "92a95ddd8fae972e8f1631845020cc2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60168,
        "upload_time": "2021-09-20T10:56:02",
        "upload_time_iso_8601": "2021-09-20T10:56:02.348330Z",
        "url": "https://files.pythonhosted.org/packages/51/e1/93c23bbd1d7ea0b5d3ed8b5f8ba5a57ecf71f6ad8187a0b56eec75da1ff0/cnstd-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20a0a205db14d01331ca838e73a91bf7f244a0914b279bbc0de611747d6919b6",
          "md5": "189c74ba3d6247f21fd968043efedf6f",
          "sha256": "f06a7003d02106537b5d416719e9fefee4ed396ff81e0163de63a7871d968714"
        },
        "downloads": -1,
        "filename": "cnstd-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "189c74ba3d6247f21fd968043efedf6f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 108769,
        "upload_time": "2021-12-05T08:12:39",
        "upload_time_iso_8601": "2021-12-05T08:12:39.898987Z",
        "url": "https://files.pythonhosted.org/packages/20/a0/a205db14d01331ca838e73a91bf7f244a0914b279bbc0de611747d6919b6/cnstd-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01b17d831d6fc3d37f17fc8f2c31efb5ce7e87110cc8dbb966cb49fea1e9e440",
          "md5": "b203096eda480343a0f96e88e54cfb36",
          "sha256": "a00823d52dff5de148ddffade762110a1339d4fc9270e287d77a1fb8c4f2e883"
        },
        "downloads": -1,
        "filename": "cnstd-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b203096eda480343a0f96e88e54cfb36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60300,
        "upload_time": "2021-12-05T08:12:41",
        "upload_time_iso_8601": "2021-12-05T08:12:41.984242Z",
        "url": "https://files.pythonhosted.org/packages/01/b1/7d831d6fc3d37f17fc8f2c31efb5ce7e87110cc8dbb966cb49fea1e9e440/cnstd-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c5d1d6606a00dd63ae5563f44743197d256024a499a0d539c1a0b39718d366c",
          "md5": "1a0ee1dbaf75df2f971db22688d996b8",
          "sha256": "def46372dc638efefaa4cb84a15002e56371d019b3ca43dbe69bb07d7c8e24ce"
        },
        "downloads": -1,
        "filename": "cnstd-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a0ee1dbaf75df2f971db22688d996b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 152155,
        "upload_time": "2022-05-27T13:24:25",
        "upload_time_iso_8601": "2022-05-27T13:24:25.437381Z",
        "url": "https://files.pythonhosted.org/packages/5c/5d/1d6606a00dd63ae5563f44743197d256024a499a0d539c1a0b39718d366c/cnstd-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f2206f8274cb14564ced617f71e1d70bd69268f5ba355aa9bcb068c9cde0df4",
          "md5": "60f396be81305a1a4d7cc47580957ad2",
          "sha256": "a94676a2e8c290c279ca0630dc692b084944a2d284721ba0563e3a792ecd55c3"
        },
        "downloads": -1,
        "filename": "cnstd-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "60f396be81305a1a4d7cc47580957ad2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 89564,
        "upload_time": "2022-05-27T13:24:28",
        "upload_time_iso_8601": "2022-05-27T13:24:28.043446Z",
        "url": "https://files.pythonhosted.org/packages/1f/22/06f8274cb14564ced617f71e1d70bd69268f5ba355aa9bcb068c9cde0df4/cnstd-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b55a49c7735ecaa67f59ffdedfc6106a62d850a89a3323a993422cd3a9a9973",
          "md5": "16cbc1f512fa3f70b6d0da0230a157a4",
          "sha256": "007bbe8013e64a1b95868a600d9c6e3073e9d7437be0e58f598ec510573b3023"
        },
        "downloads": -1,
        "filename": "cnstd-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16cbc1f512fa3f70b6d0da0230a157a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 167392,
        "upload_time": "2022-07-06T12:58:01",
        "upload_time_iso_8601": "2022-07-06T12:58:01.711524Z",
        "url": "https://files.pythonhosted.org/packages/8b/55/a49c7735ecaa67f59ffdedfc6106a62d850a89a3323a993422cd3a9a9973/cnstd-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e33992d8d8acca18b5d8d71d007e2ca86e2af9b349157456b5861f97c8ba925",
          "md5": "f347eca9b7c4d72ea62a026c9dac85e9",
          "sha256": "4a20a2d3d469fdf805f57367b73ad70fbd27cb0a8da677ab296c177e8edf3980"
        },
        "downloads": -1,
        "filename": "cnstd-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f347eca9b7c4d72ea62a026c9dac85e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 97769,
        "upload_time": "2022-07-06T12:58:04",
        "upload_time_iso_8601": "2022-07-06T12:58:04.229495Z",
        "url": "https://files.pythonhosted.org/packages/9e/33/992d8d8acca18b5d8d71d007e2ca86e2af9b349157456b5861f97c8ba925/cnstd-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90b4c925b00969752e80a2a2df2ceb1fe44ab3008f5d34f6bf98fd6de00bab5f",
          "md5": "b066dd8b056c24eaf5ff3141fa369916",
          "sha256": "9cf9e638aced19881b7c003a03189d7a2e95d47fadbbd6202a8b9344a8ca9a3e"
        },
        "downloads": -1,
        "filename": "cnstd-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b066dd8b056c24eaf5ff3141fa369916",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 273036,
        "upload_time": "2023-02-01T06:38:57",
        "upload_time_iso_8601": "2023-02-01T06:38:57.749927Z",
        "url": "https://files.pythonhosted.org/packages/90/b4/c925b00969752e80a2a2df2ceb1fe44ab3008f5d34f6bf98fd6de00bab5f/cnstd-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a8cf388913f85a01622c85cb04344aba6b6469569a5dae82604dd2b945e4670",
          "md5": "4c5430c479259a63146e78265687a486",
          "sha256": "5e4fafc7d907b64cea0991213018650a206d95cac822b796f2ff66fe31e651a6"
        },
        "downloads": -1,
        "filename": "cnstd-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4c5430c479259a63146e78265687a486",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 188313,
        "upload_time": "2023-02-01T06:38:59",
        "upload_time_iso_8601": "2023-02-01T06:38:59.575151Z",
        "url": "https://files.pythonhosted.org/packages/0a/8c/f388913f85a01622c85cb04344aba6b6469569a5dae82604dd2b945e4670/cnstd-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa5d6fcb3d1d18eb93e4b10950c5f19897373a01dabb839f56542ed4992de776",
          "md5": "c975acbd3440ce6430d4f474560bd98a",
          "sha256": "8302b8aa6528aedefa19931585d496fcae617b536eb4f64475713645ab7cfbd6"
        },
        "downloads": -1,
        "filename": "cnstd-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c975acbd3440ce6430d4f474560bd98a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 244076,
        "upload_time": "2023-02-19T03:31:17",
        "upload_time_iso_8601": "2023-02-19T03:31:17.833392Z",
        "url": "https://files.pythonhosted.org/packages/aa/5d/6fcb3d1d18eb93e4b10950c5f19897373a01dabb839f56542ed4992de776/cnstd-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81523aad8a3932c072b9c9a0a43c78d289c16cfef33b3d8882ee446fb1a93523",
          "md5": "a7e79e1c9dec2ccca8f074c3dffa73e0",
          "sha256": "20083362565bda1fe577659d5640898016fd9a48700e016799fbdf692777a3ee"
        },
        "downloads": -1,
        "filename": "cnstd-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a7e79e1c9dec2ccca8f074c3dffa73e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 190840,
        "upload_time": "2023-02-19T03:31:20",
        "upload_time_iso_8601": "2023-02-19T03:31:20.351697Z",
        "url": "https://files.pythonhosted.org/packages/81/52/3aad8a3932c072b9c9a0a43c78d289c16cfef33b3d8882ee446fb1a93523/cnstd-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa5d6fcb3d1d18eb93e4b10950c5f19897373a01dabb839f56542ed4992de776",
        "md5": "c975acbd3440ce6430d4f474560bd98a",
        "sha256": "8302b8aa6528aedefa19931585d496fcae617b536eb4f64475713645ab7cfbd6"
      },
      "downloads": -1,
      "filename": "cnstd-1.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c975acbd3440ce6430d4f474560bd98a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 244076,
      "upload_time": "2023-02-19T03:31:17",
      "upload_time_iso_8601": "2023-02-19T03:31:17.833392Z",
      "url": "https://files.pythonhosted.org/packages/aa/5d/6fcb3d1d18eb93e4b10950c5f19897373a01dabb839f56542ed4992de776/cnstd-1.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81523aad8a3932c072b9c9a0a43c78d289c16cfef33b3d8882ee446fb1a93523",
        "md5": "a7e79e1c9dec2ccca8f074c3dffa73e0",
        "sha256": "20083362565bda1fe577659d5640898016fd9a48700e016799fbdf692777a3ee"
      },
      "downloads": -1,
      "filename": "cnstd-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a7e79e1c9dec2ccca8f074c3dffa73e0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 190840,
      "upload_time": "2023-02-19T03:31:20",
      "upload_time_iso_8601": "2023-02-19T03:31:20.351697Z",
      "url": "https://files.pythonhosted.org/packages/81/52/3aad8a3932c072b9c9a0a43c78d289c16cfef33b3d8882ee446fb1a93523/cnstd-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}