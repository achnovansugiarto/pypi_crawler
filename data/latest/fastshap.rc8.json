{
  "info": {
    "author": "Samuel Wilson",
    "author_email": "samwilson303@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n<!-- [![Build Status](https://app.travis-ci.com/AnotherSamWilson/fastshap.svg?branch=main)](https://app.travis-ci.com/github/AnotherSamWilson/fastshap) -->\n\n[![CodeCov](https://codecov.io/gh/AnotherSamWilson/fastshap/branch/master/graphs/badge.svg?branch=master&service=github)](https://codecov.io/gh/AnotherSamWilson/fastshap)\n\n## fastshap: A fast, approximate shap kernel\n\n<!-- <a href='https://github.com/AnotherSamWilson/miceforest'><img src='https://i.imgur.com/nbrAQso.png' align=\"right\" height=\"300\" /></a> -->\n\nCalculating shap values can take an extremely long time. `fastshap` was\ndesigned to be as fast as possible by utilizing inner and outer batch\nassignments to keep the calculations inside vectorized operations as\noften as it can. This includes the model evaluation. If the model in\nquestion is more efficient for 100 samples than 10, then this sort of\nvectorization can have enormous benefits.\n\n**This package specifically offers a kernel explainer**. Kernel\nexplainers can calculate approximate shap values of f(X) towards y for\nany function f.Â Much faster shap solutions are available specifically\nfor gradient boosted trees and deep neural networks.\n\nA kernel explainer is ideal in situations where:\n\n1)  The model you are using does not have model-specific methods\n    available (for example, support vector machine)\n2)  You need to explain a modeling pipeline which includes variable\n    transformations.\n3)  The model has a link function or some other target transformation.\n    For example, you wish to explain the raw probabilities in a\n    classification model, instead of the log-odds.\n\n### Features\n\nAdvantages of `fastshap`:\n\n  - Fast. See benchmarks for comparisons.  \n  - Native handling of both numpy arrays and pandas dataframes including\n    principled treatment of categories.  \n  - Easy built in stratification of background set.  \n  - Capable of plotting categorical variables in dependence plots.  \n  - Capable of determining categorical variable interactions in shap\n    values.  \n  - Capable of plotting missing values in interaction variable.\n\nDisadvantages of `fastshap`:\n\n  - Only dependency plotting is supported as of now.  \n  - Does not support feature groups yet.  \n  - Does not support weights yet.\n\n### Installation\n\nThis package can be installed using pip:\n\n``` bash\n# Using pip\n$ pip install fastshap --no-cache-dir\n```\n\nYou can also download the latest development version from this\nrepository. If you want to install from github with conda, you must\nfirst run `conda install pip git`.\n\n``` bash\n$ pip install git+https://github.com/AnotherSamWilson/fastshap.git\n```\n\n### Benchmarks\n\nThese benchmarks compare the `shap` package `KernelExplainer` to the one\nin `fastshap`. All code is in `./benchmarks`. We left out model-specific\nshap explainers, because they are usually orders of magnitued faster and\nmore efficient than kernel explainers.\n\n##### Iris Dataset\n\nThe iris dataset is a table of 150 rows and 5 columns (4 features, one\ntarget). This benchmark measured the time to calculate the shap values\nfor different row counts. The iris dataset was concatenated to itself to\nget the desired dataset size:  \n<img src=\"https://raw.githubusercontent.com/AnotherSamWilson/fastshap/master/benchmarks/iris_benchmark_time.png\" width=\"600px\" />\n\n<table class=\" lightable-minimal\" style='font-family: \"Trebuchet MS\", verdana, sans-serif; margin-left: auto; margin-right: auto;'>\n\n<thead>\n\n<tr>\n\n<th style=\"empty-cells: hide;\" colspan=\"1\">\n\n</th>\n\n<th style=\"padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\">\n\n<div style=\"border-bottom: 2px solid #00000050; \">\n\nAvg Times\n\n</div>\n\n</th>\n\n<th style=\"padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\">\n\n<div style=\"border-bottom: 2px solid #00000050; \">\n\nStDev Times\n\n</div>\n\n</th>\n\n<th style=\"empty-cells: hide;\" colspan=\"1\">\n\n</th>\n\n</tr>\n\n<tr>\n\n<th style=\"text-align:right;\">\n\nrows\n\n</th>\n\n<th style=\"text-align:right;\">\n\nfastshap\n\n</th>\n\n<th style=\"text-align:right;\">\n\nshap\n\n</th>\n\n<th style=\"text-align:right;\">\n\nfastshap\n\n</th>\n\n<th style=\"text-align:right;\">\n\nshap\n\n</th>\n\n<th style=\"text-align:right;\">\n\nRelative Difference\n\n</th>\n\n</tr>\n\n</thead>\n\n<tbody>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n150\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.27\n\n</td>\n\n<td style=\"text-align:right;\">\n\n5.57\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.02\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.02\n\n</td>\n\n<td style=\"text-align:right;\">\n\n20.41\n\n</td>\n\n</tr>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n300\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.54\n\n</td>\n\n<td style=\"text-align:right;\">\n\n11.30\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.06\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.27\n\n</td>\n\n<td style=\"text-align:right;\">\n\n21.11\n\n</td>\n\n</tr>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n450\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.81\n\n</td>\n\n<td style=\"text-align:right;\">\n\n17.57\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.07\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.59\n\n</td>\n\n<td style=\"text-align:right;\">\n\n21.57\n\n</td>\n\n</tr>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n600\n\n</td>\n\n<td style=\"text-align:right;\">\n\n1.05\n\n</td>\n\n<td style=\"text-align:right;\">\n\n23.30\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.03\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.45\n\n</td>\n\n<td style=\"text-align:right;\">\n\n22.18\n\n</td>\n\n</tr>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n750\n\n</td>\n\n<td style=\"text-align:right;\">\n\n1.49\n\n</td>\n\n<td style=\"text-align:right;\">\n\n30.06\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.13\n\n</td>\n\n<td style=\"text-align:right;\">\n\n0.67\n\n</td>\n\n<td style=\"text-align:right;\">\n\n20.17\n\n</td>\n\n</tr>\n\n</tbody>\n\n</table>\n\n##### California Housing Dataset\n\nThe California Housing dataset is a table of 20640 rows and 9 columns (8\nfeatures, one target). This benchmark measured the time it took to\ncalculate shap values on the first 2000 rows for different sizes of the\nbackground dataset.  \n<img src=\"https://raw.githubusercontent.com/AnotherSamWilson/fastshap/master/benchmarks/cali_benchmark_time.png\" width=\"600px\" />\n\n<table class=\" lightable-minimal\" style='font-family: \"Trebuchet MS\", verdana, sans-serif; margin-left: auto; margin-right: auto;'>\n\n<thead>\n\n<tr>\n\n<th style=\"text-align:right;\">\n\nrows\n\n</th>\n\n<th style=\"text-align:right;\">\n\nfastshap\n\n</th>\n\n<th style=\"text-align:right;\">\n\nshap\n\n</th>\n\n<th style=\"text-align:right;\">\n\nRelative Difference\n\n</th>\n\n</tr>\n\n</thead>\n\n<tbody>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n42\n\n</td>\n\n<td style=\"text-align:right;\">\n\n14.61\n\n</td>\n\n<td style=\"text-align:right;\">\n\n128.48\n\n</td>\n\n<td style=\"text-align:right;\">\n\n8.79\n\n</td>\n\n</tr>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n52\n\n</td>\n\n<td style=\"text-align:right;\">\n\n19.33\n\n</td>\n\n<td style=\"text-align:right;\">\n\n156.86\n\n</td>\n\n<td style=\"text-align:right;\">\n\n8.12\n\n</td>\n\n</tr>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n69\n\n</td>\n\n<td style=\"text-align:right;\">\n\n24.79\n\n</td>\n\n<td style=\"text-align:right;\">\n\n203.43\n\n</td>\n\n<td style=\"text-align:right;\">\n\n8.21\n\n</td>\n\n</tr>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n104\n\n</td>\n\n<td style=\"text-align:right;\">\n\n38.32\n\n</td>\n\n<td style=\"text-align:right;\">\n\n290.76\n\n</td>\n\n<td style=\"text-align:right;\">\n\n7.59\n\n</td>\n\n</tr>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n207\n\n</td>\n\n<td style=\"text-align:right;\">\n\n72.80\n\n</td>\n\n<td style=\"text-align:right;\">\n\n515.27\n\n</td>\n\n<td style=\"text-align:right;\">\n\n7.08\n\n</td>\n\n</tr>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n413\n\n</td>\n\n<td style=\"text-align:right;\">\n\n146.65\n\n</td>\n\n<td style=\"text-align:right;\">\n\n979.44\n\n</td>\n\n<td style=\"text-align:right;\">\n\n6.68\n\n</td>\n\n</tr>\n\n<tr>\n\n<td style=\"text-align:right;\">\n\n826\n\n</td>\n\n<td style=\"text-align:right;\">\n\n313.18\n\n</td>\n\n<td style=\"text-align:right;\">\n\n1903.28\n\n</td>\n\n<td style=\"text-align:right;\">\n\n6.08\n\n</td>\n\n</tr>\n\n</tbody>\n\n</table>\n\n##### Effect of Outer Batch Sizes\n\nIncreasing the outer batch size can have a significant effect on the run\ntime of the process:  \n<img src=\"https://raw.githubusercontent.com/AnotherSamWilson/fastshap/master/benchmarks/batch_size_times.png\" width=\"600px\" />\n\n### Basic Usage\n\nWe will use the iris dataset for this example. Here, we load the data\nand train a simple lightgbm model on the dataset:\n\n``` python\nfrom sklearn.datasets import load_iris\nimport pandas as pd\nimport lightgbm as lgb\nimport numpy as np\n\n# Define our dataset and target variable\ndata = pd.concat(load_iris(as_frame=True,return_X_y=True),axis=1)\ndata.rename({\"target\": \"species\"}, inplace=True, axis=1)\ndata[\"species\"] = data[\"species\"].astype(\"category\")\ntarget = data.pop(\"sepal length (cm)\")\n\n# Train our model\ndtrain = lgb.Dataset(data=data, label=target)\nlgbmodel = lgb.train(\n    params={\"seed\": 1, \"verbose\": -1},\n    train_set=dtrain,\n    num_boost_round=10\n)\n\n# Define the function we wish to build shap values for.\nmodel = lgbmodel.predict\n\npreds = model(data)\n```\n\nWe now have a `model` which takes a Pandas dataframe, and returns\npredictions. We can create an explainer that will use `data` as a\nbackground dataset to calculate the shap values of any dataset we wish:\n\n``` python\nfrom fastshap import KernelExplainer\n\nke = KernelExplainer(model, data)\nsv = ke.calculate_shap_values(data, verbose=False)\n\nprint(all(preds == sv.sum(1)))\n```\n\n    ## True\n\n### Plotting\n\nDependence plots can be created by passing the shap values and variable\n/ interaction information to `plot_variable_effect_on_output`:\n\n``` python\nfrom fastshap.plotting import plot_variable_effect_on_output\nplot_variable_effect_on_output(\n    sv, data,\n    variable=\"sepal width (cm)\",\n    interaction_variable=\"auto\"\n)\n```\n\n<img src=\"https://raw.githubusercontent.com/AnotherSamWilson/fastshap/master/graphics/depgraph.png\" width=\"800px\" />\n\nThe type of plot that is generated depends on the model output, the\nvariable type, and the interaction variable type. For example, plotting\nthe effect of a categorical variable shows the following:\n\n``` python\nfrom fastshap.plotting import plot_variable_effect_on_output\nplot_variable_effect_on_output(\n    sv, data,\n    variable=\"species\",\n    interaction_variable=\"auto\"\n)\n```\n\n<img src=\"https://raw.githubusercontent.com/AnotherSamWilson/fastshap/master/graphics/depgraph_cat.png\" width=\"800px\" />\n\n### Stratifying the Background Set\n\nWe can select a subset of our data to act as a background set. By\nstratifying the background set on the results of the model output, we\nwill usually get very similar results, while decreasing the caculation\ntime drastically.\n\n``` python\nke.stratify_background_set(5)\nsv2 = ke.calculate_shap_values(\n  data, \n  background_fold_to_use=0,\n  verbose=False\n)\n\nprint(np.abs(sv2 - sv).mean(0))\n```\n\n    ## [1.74764532e-03 1.61829094e-02 1.99534408e-03 4.02640884e-16\n    ##  1.71084747e-02]\n\nWhat we did is break up our background set into 10 different sets,\nstratified by the model output. We then used the first of these sets as\nour background set. We then compared the average difference between\nthese shap values, and the shap values we obtained from using the entire\ndataset.\n\n### Choosing Batch Sizes\n\nIf the entire process was vectorized, it would require an array of size\n(`# Samples * # Coalitions * # Background samples`, `# Columns`). Where\n`# Coalitions` is the sum of the total number of coalitions that are\ngoing to be run. Even for small datasets, this becomes enormous.\n`fastshap` breaks this array up into chunks by splitting the process\ninto a series of batches.\n\nThis is a list of the large arrays and their maximum size:\n\n  - Global\n      - Mask Matrix (`# Coalitions`, `# Columns`)\n  - Outer Batch\n      - Linear Targets (`Total Coalition Combinations`, `Outer Batch\n        Size`, `Output Dimension`)\\`\n  - Inner Batch\n      - Model Evaluation Features (`Inner Batch Size`, `# Background\n        Samples`)\\`\n\nThe final, returned shap values will also be returned as the datatype\nreturned by the model.\n\nThese theoretical sizes can be calculated directly so that the user can\ndetermine appropriate batch sizes for their machine:\n\n``` python\n# Combines our background data back into 1 DataFrame\nke.stratify_background_set(1)\n(\n    mask_matrix_size, \n    linear_target_size, \n    inner_model_eval_set_size\n) = ke.get_theoretical_array_expansion_sizes(\n    data=data,\n    outer_batch_size=150,\n    inner_batch_size=150,\n    n_coalition_sizes=3,\n    background_fold_to_use=None\n)\n\nprint(\n  np.product(linear_target_size) + np.product(inner_model_eval_set_size)\n)\n```\n\n    ## 452100\n\nFor the iris dataset, even if we sent the entire set (150 rows) through\nas one batch, we only need 92100 elements stored in arrays. This is\nmanageable on most machines. However, this number ***grows extremely\nquickly*** with the samples and number of columns. It is highly advised\nto determine a good batch scheme before running this process.\n\nAnother way to determine optimal batch sizes is to use the function\n`.get_theoretical_minimum_memory_requirements()`. This returns a list of\nGigabytes needed to build the arrays above:\n\n``` python\n# Combines our background data back into 1 DataFrame\n(\n    mask_matrix_GB, \n    linear_target_GB, \n    inner_model_eval_set_GB\n) = ke.get_theoretical_minimum_memory_requirements(\n    data=data,\n    outer_batch_size=150,\n    inner_batch_size=150,\n    n_coalition_sizes=3,\n    background_fold_to_use=None\n)\n\ntotal_GB_needed = mask_matrix_GB + linear_target_GB + inner_model_eval_set_GB\nprint(f\"We need {total_GB_needed} GB to calculate shap values with these batch sizes.\")\n```\n\n    ## We need 0.003368459641933441 GB to calculate shap values with these batch sizes.\n\n### Specifying a Custom Linear Model\n\nAny linear model available from sklearn.linear\\_model can be used to\ncalculate the shap values. If you wish for some sparsity in the shap\nvalues, you can use Lasso regression:\n\n``` python\nfrom sklearn.linear_model import Lasso\n\n# Use our entire background set\nke.stratify_background_set(1)\nsv_lasso = ke.calculate_shap_values(\n  data, \n  background_fold_to_use=0,\n  linear_model=Lasso(alpha=0.1),\n  verbose=False\n)\n\nprint(sv_lasso[0,:])\n```\n\n    ## [-0.         -0.33797832 -0.         -0.14634971  5.84333333]\n\nThe default model used is `sklearn.linear_model.LinearRegression`.\n\n### Multiclass Outputs\n\nIf the model returns multiple outputs, the resulting shap values are\nreturned as an array of size (`rows`, `columns + 1`, `outputs`).\nTherefore, to get the shap values for the effects on the second class,\nyou need to slice the resulting shap values using `shap_values[:,:,1]`.\nHere is an example:\n\n``` python\nmulti_features = pd.concat(load_iris(as_frame=True,return_X_y=True),axis=1)\nmulti_features.rename({\"target\": \"species\"}, inplace=True, axis=1)\ntarget = multi_features.pop(\"species\")\n\ndtrain = lgb.Dataset(data=multi_features, label=target)\nlgbmodel = lgb.train(\n    params={\"seed\": 1, \"objective\": \"multiclass\", \"num_class\": 3, \"verbose\": -1},\n    train_set=dtrain,\n    num_boost_round=10\n)\nmodel = lgbmodel.predict\n\nexplainer_multi = KernelExplainer(model, multi_features)\nshap_values_multi = explainer_multi.calculate_shap_values(multi_features, verbose=False)\n\n# To get the shap values for the second class:\nprint(shap_values_multi.shape)\n```\n\n    ## (150, 5, 3)\n\nOur shap values are a numpy array of shape `(150, 5, 3)` for each of our\n150 rows, 4 columns (plus expected value), and our 3 output dimensions.\nWhen plotting multiclass outputs, the classes are essentially treated as\na categorical variable. However, it is possible to plot variable\ninteractions with *one* of the output classes, see below.  \nWe can plot a variables shap values for each of the output classes:\n\n``` python\nplot_variable_effect_on_output(\n    shap_values_multi,\n    data,\n    variable=2\n)\n```\n\n<img src=\"https://raw.githubusercontent.com/AnotherSamWilson/fastshap/master/graphics/multiclass_depgraph.png\" width=\"800px\" />\n\nWe can also look at interactions if we are interested in a specific\nclass. For instance, if we wanted to know the effect that `sepal width\n(cm)` had on our first class, we could do:\n\n``` python\nplot_variable_effect_on_output(sv, data, variable=\"sepal width (cm)\", output_index=0)\n```\n\n<img src=\"https://raw.githubusercontent.com/AnotherSamWilson/fastshap/master/graphics/mc_so_depgraph.png\" width=\"800px\" />\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AnotherSamWilson/fastshap",
    "keywords": "shap,model explainability",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fastshap",
    "package_url": "https://pypi.org/project/fastshap/",
    "platform": null,
    "project_url": "https://pypi.org/project/fastshap/",
    "project_urls": {
      "Homepage": "https://github.com/AnotherSamWilson/fastshap"
    },
    "release_url": "https://pypi.org/project/fastshap/0.3.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "sklearn"
    ],
    "requires_python": ">=3.7",
    "summary": "Fast SHAP kernel explainer",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17260772,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32cacd80775def1708362bb20eb976051c4415d19c730117841dd7ee6d20045e",
          "md5": "4267f3d505423e4bebc9335c062570e6",
          "sha256": "75c2b04c764cb4f183d72e060a9b4498af2ff97f76e7fa825713838cf1523dd9"
        },
        "downloads": -1,
        "filename": "fastshap-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4267f3d505423e4bebc9335c062570e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9926,
        "upload_time": "2021-12-17T21:18:41",
        "upload_time_iso_8601": "2021-12-17T21:18:41.961626Z",
        "url": "https://files.pythonhosted.org/packages/32/ca/cd80775def1708362bb20eb976051c4415d19c730117841dd7ee6d20045e/fastshap-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5f689dac051f895c008277ebf346559fa0a65999377d30d7dc78d47b2fbc065",
          "md5": "b5038e0d624d45738aaed2c03684b8e6",
          "sha256": "15141b852748c85d00254619deff56a4016c310cf786fecbce98d5ee4afca17d"
        },
        "downloads": -1,
        "filename": "fastshap-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5038e0d624d45738aaed2c03684b8e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9928,
        "upload_time": "2021-12-17T21:21:28",
        "upload_time_iso_8601": "2021-12-17T21:21:28.867870Z",
        "url": "https://files.pythonhosted.org/packages/e5/f6/89dac051f895c008277ebf346559fa0a65999377d30d7dc78d47b2fbc065/fastshap-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "268f15a7ee1e88808dc15c3bf6a990e86be7aabcb70e35e8cecc662d0c53db32",
          "md5": "733d85cf4bc5a200f4f5cbf9b03e8b31",
          "sha256": "720c12e2312bbc3c33426d3570fcceeb1f8a83c94d0b492f4ae9ebec17d3eaa6"
        },
        "downloads": -1,
        "filename": "fastshap-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "733d85cf4bc5a200f4f5cbf9b03e8b31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13396,
        "upload_time": "2021-12-17T21:21:30",
        "upload_time_iso_8601": "2021-12-17T21:21:30.769850Z",
        "url": "https://files.pythonhosted.org/packages/26/8f/15a7ee1e88808dc15c3bf6a990e86be7aabcb70e35e8cecc662d0c53db32/fastshap-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c7dff4b74c6910af796b662f019284df69d2243580d604d187b65e489929015",
          "md5": "6756e412d7d8e59b2975cb4191b74d14",
          "sha256": "fc319c7f3851a9fa81701ddd509e78455135077bb9c81150e8a23a8de95c176d"
        },
        "downloads": -1,
        "filename": "fastshap-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6756e412d7d8e59b2975cb4191b74d14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10631,
        "upload_time": "2021-12-20T16:27:04",
        "upload_time_iso_8601": "2021-12-20T16:27:04.624915Z",
        "url": "https://files.pythonhosted.org/packages/7c/7d/ff4b74c6910af796b662f019284df69d2243580d604d187b65e489929015/fastshap-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f00c36cfa3dc696e3afe516c49e8ebea2a838dabf65ee9aaec30b3450ef0cfa",
          "md5": "a408e3c441d363d6777172bf28df992f",
          "sha256": "15afde68ff1a746da3bc9bcf8238463b80da9cc15f3d90c1ce45a6c390067313"
        },
        "downloads": -1,
        "filename": "fastshap-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a408e3c441d363d6777172bf28df992f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14283,
        "upload_time": "2021-12-20T16:27:06",
        "upload_time_iso_8601": "2021-12-20T16:27:06.294716Z",
        "url": "https://files.pythonhosted.org/packages/5f/00/c36cfa3dc696e3afe516c49e8ebea2a838dabf65ee9aaec30b3450ef0cfa/fastshap-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8981d59f3e1a93cbb6c355c8629a1f72b7b9f32e2719c59e9f93844d205c2a3d",
          "md5": "816d84ef384142b6f1bc962a5bc31787",
          "sha256": "c9b6a5bc9862c0108086394d6194cb8e581a992fc055b0153d677a51b8be5b5a"
        },
        "downloads": -1,
        "filename": "fastshap-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "816d84ef384142b6f1bc962a5bc31787",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11310,
        "upload_time": "2021-12-20T19:41:43",
        "upload_time_iso_8601": "2021-12-20T19:41:43.265174Z",
        "url": "https://files.pythonhosted.org/packages/89/81/d59f3e1a93cbb6c355c8629a1f72b7b9f32e2719c59e9f93844d205c2a3d/fastshap-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "920f3c3480f242d03410571b37820d134cd7c307d4841944bbce29ea57f9e6f9",
          "md5": "c1dc4ae07605cab4da8ae5d97a97c576",
          "sha256": "07d7b667b0c04fa6d16ff40fa0608930bc0a9ed760c7da949f67051c4328fd91"
        },
        "downloads": -1,
        "filename": "fastshap-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c1dc4ae07605cab4da8ae5d97a97c576",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15383,
        "upload_time": "2021-12-20T19:41:44",
        "upload_time_iso_8601": "2021-12-20T19:41:44.679739Z",
        "url": "https://files.pythonhosted.org/packages/92/0f/3c3480f242d03410571b37820d134cd7c307d4841944bbce29ea57f9e6f9/fastshap-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5b4cb7044f4a9aa6b311f1c13088fbdf2502b422dcc48f5ff745ce31594999f",
          "md5": "3672f67b19bfeb6fd6e9aa0a7745a11b",
          "sha256": "887c403cc7de38bd9f8aea08b7883c05e966a68d1b53b06c14db8e6aa010d76f"
        },
        "downloads": -1,
        "filename": "fastshap-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3672f67b19bfeb6fd6e9aa0a7745a11b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19913,
        "upload_time": "2022-06-16T05:47:39",
        "upload_time_iso_8601": "2022-06-16T05:47:39.380976Z",
        "url": "https://files.pythonhosted.org/packages/e5/b4/cb7044f4a9aa6b311f1c13088fbdf2502b422dcc48f5ff745ce31594999f/fastshap-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf72ddee0a1e10e8eb5af1c9ec1672f6c8148cf470b8cfd4b5aeace33bc8b906",
          "md5": "e0c6911da8a3e746f9214673523abd37",
          "sha256": "5e85a89062daa1881e4cdbb25d45b6a56d0ded0e4b392969088c06b7f76bed3f"
        },
        "downloads": -1,
        "filename": "fastshap-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e0c6911da8a3e746f9214673523abd37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26048,
        "upload_time": "2022-06-16T05:47:41",
        "upload_time_iso_8601": "2022-06-16T05:47:41.439906Z",
        "url": "https://files.pythonhosted.org/packages/bf/72/ddee0a1e10e8eb5af1c9ec1672f6c8148cf470b8cfd4b5aeace33bc8b906/fastshap-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78821f5507d89afc9b305de021510eec8c28baade526ca5f9dc1767a485946c2",
          "md5": "4cd1c525fc4632da336a48100c7bdf6c",
          "sha256": "ab17445d89156f4b53a2a8e5fd82a501524d3a73f556f539b27a2fdacbd2fcea"
        },
        "downloads": -1,
        "filename": "fastshap-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4cd1c525fc4632da336a48100c7bdf6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20721,
        "upload_time": "2022-07-13T14:39:22",
        "upload_time_iso_8601": "2022-07-13T14:39:22.120889Z",
        "url": "https://files.pythonhosted.org/packages/78/82/1f5507d89afc9b305de021510eec8c28baade526ca5f9dc1767a485946c2/fastshap-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c07a35d8e6953d74a212e0f7a36ecd980e67815e1b10c5cef5929884b4fa954",
          "md5": "b500cf604388d4e9e4900c6fe1fd402d",
          "sha256": "a209edef2170d950647094abc04235f4865ee64df13486d73af588e42e978a99"
        },
        "downloads": -1,
        "filename": "fastshap-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b500cf604388d4e9e4900c6fe1fd402d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26807,
        "upload_time": "2022-07-13T14:39:24",
        "upload_time_iso_8601": "2022-07-13T14:39:24.013497Z",
        "url": "https://files.pythonhosted.org/packages/5c/07/a35d8e6953d74a212e0f7a36ecd980e67815e1b10c5cef5929884b4fa954/fastshap-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c680cfd7184c2e3d4dddecd0214fe44f21a82f125f783421f1c77156dc6d987",
          "md5": "0fa39c30fd784a17156ed0a9e8960a5c",
          "sha256": "5339a96a91253a649c05449df8fd856d0052e3defa2a138726845195b865bdde"
        },
        "downloads": -1,
        "filename": "fastshap-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fa39c30fd784a17156ed0a9e8960a5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20718,
        "upload_time": "2022-08-03T20:14:21",
        "upload_time_iso_8601": "2022-08-03T20:14:21.027952Z",
        "url": "https://files.pythonhosted.org/packages/1c/68/0cfd7184c2e3d4dddecd0214fe44f21a82f125f783421f1c77156dc6d987/fastshap-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "293c4c1b5d26108873c4a885b724356258a74964b89f860829e6259945267e0b",
          "md5": "2693e7547d8b4222755add473c68cc6f",
          "sha256": "1511f8dc0b56f3ef7cf67a7ca51e8389698ff835c87e674259155068c94d4704"
        },
        "downloads": -1,
        "filename": "fastshap-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2693e7547d8b4222755add473c68cc6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26810,
        "upload_time": "2022-08-03T20:14:22",
        "upload_time_iso_8601": "2022-08-03T20:14:22.584439Z",
        "url": "https://files.pythonhosted.org/packages/29/3c/4c1b5d26108873c4a885b724356258a74964b89f860829e6259945267e0b/fastshap-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e4f2a9f5d237156d62ffdd455cc1ee0a5738d194cdb787ccbc95e77ebe641fb",
          "md5": "25f5ec8733d9f80b49af10820e793a74",
          "sha256": "735e0534e976f74b5b016907691050f8a6fb82bde22b8e325f4e8ff4ad2334c4"
        },
        "downloads": -1,
        "filename": "fastshap-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25f5ec8733d9f80b49af10820e793a74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20716,
        "upload_time": "2023-03-12T14:09:14",
        "upload_time_iso_8601": "2023-03-12T14:09:14.252613Z",
        "url": "https://files.pythonhosted.org/packages/5e/4f/2a9f5d237156d62ffdd455cc1ee0a5738d194cdb787ccbc95e77ebe641fb/fastshap-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "100ded76b59b95a9ea1a75e1b6b8860e99d9e8e22ea821347825df2f13b224eb",
          "md5": "a2becdd6268fb85ad303221eda422fd6",
          "sha256": "6ae4cebdd2aceb2d6c1d2857e70aa102a9b56cd34f2e4a5aae831286af528eca"
        },
        "downloads": -1,
        "filename": "fastshap-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a2becdd6268fb85ad303221eda422fd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26821,
        "upload_time": "2023-03-12T14:09:15",
        "upload_time_iso_8601": "2023-03-12T14:09:15.626363Z",
        "url": "https://files.pythonhosted.org/packages/10/0d/ed76b59b95a9ea1a75e1b6b8860e99d9e8e22ea821347825df2f13b224eb/fastshap-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e4f2a9f5d237156d62ffdd455cc1ee0a5738d194cdb787ccbc95e77ebe641fb",
        "md5": "25f5ec8733d9f80b49af10820e793a74",
        "sha256": "735e0534e976f74b5b016907691050f8a6fb82bde22b8e325f4e8ff4ad2334c4"
      },
      "downloads": -1,
      "filename": "fastshap-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "25f5ec8733d9f80b49af10820e793a74",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 20716,
      "upload_time": "2023-03-12T14:09:14",
      "upload_time_iso_8601": "2023-03-12T14:09:14.252613Z",
      "url": "https://files.pythonhosted.org/packages/5e/4f/2a9f5d237156d62ffdd455cc1ee0a5738d194cdb787ccbc95e77ebe641fb/fastshap-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "100ded76b59b95a9ea1a75e1b6b8860e99d9e8e22ea821347825df2f13b224eb",
        "md5": "a2becdd6268fb85ad303221eda422fd6",
        "sha256": "6ae4cebdd2aceb2d6c1d2857e70aa102a9b56cd34f2e4a5aae831286af528eca"
      },
      "downloads": -1,
      "filename": "fastshap-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a2becdd6268fb85ad303221eda422fd6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 26821,
      "upload_time": "2023-03-12T14:09:15",
      "upload_time_iso_8601": "2023-03-12T14:09:15.626363Z",
      "url": "https://files.pythonhosted.org/packages/10/0d/ed76b59b95a9ea1a75e1b6b8860e99d9e8e22ea821347825df2f13b224eb/fastshap-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}