{
  "info": {
    "author": "Niels Jeppesen",
    "author_email": "niejep@dtu.dk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# Python package for building and solving Sparse Layered Graphs\nThis package allows building and solving image segmentation problems such as [Markov Random Fields](https://en.wikipedia.org/wiki/Markov_random_field) (MRF) and [Sparse Layered Graphs](http://openaccess.thecvf.com/content_CVPR_2020/papers/Jeppesen_Sparse_Layered_Graphs_for_Multi-Object_Segmentation_CVPR_2020_paper.pdf) (SLG) using *s-t* graph cuts. The package itself is written purely in Python and contains logic for building graphs for both single- and multi-label problems. To solve the optimization problem it relies on a min-cut/max-flow algorithm (see [Solvers](#solvers)).\n\n## Installation\nInstall default package using `pip install slgbuilder` or clone the repository. See [Dependencies](#dependencies) for more.\n\n## What is it for?\nThe package is primarily targeted multi-label/multi-object image segmentation problems. Common uses include:\n- Surface detection\n- Constrained multi-surface detection\n- Object segmentation\n- Interacting multi-object segmentation\n\n### Teaser video\n[![Teaser video](https://img.youtube.com/vi/CFUYuL1J85k/0.jpg)](https://www.youtube.com/watch?v=CFUYuL1J85k)\n\n### Examples\n- [Example code and notebooks](https://github.com/Skielex/slgbuilder-examples)\n- [Experimental notebooks (advanced 2D and 3D segmentation) [CVPR2020]](https://doi.org/10.11583/DTU.12016941)\n- [Experimental notebooks (advanced 3D segmentation with parallel QPBO) [ICCV 2021]](https://openaccess.thecvf.com/content_CVPR_2020/supplemental/Jeppesen_Sparse_Layered_Graphs_CVPR_2020_supplemental.zip)\n\n## Grid-graph vs. ordered multi-column graph\nThe package support both the common grid-graph structure, as used by [Delong and Boykov](https://doi.org/10.1109/ICCV.2009.5459263) and the ordered multi-column structure, popularized by [Li et al.](https://doi.org/10.1109/TPAMI.2006.19). Although representing image data in the grid structure may seem like the obvious choice, there are several advantages (e.g. smaller graph and \"better\" constraints) when using the ordered multi-column structure for segmentation if possible. However, doing so requires resample the data, which usually requires knowledge about the location of each object in the image.\n\n## Solvers\nThe package currently supports eight different solvers. In simple cases the default BK Maxflow and QPBO solvers should do fine. For submodular problems, all solver should give find a globally optimal solution. Only the QPBO solvers support nonsubmodular problems, and for such problems a complete solution cannot be guaranteed. For large or time-critical tasks it may be favorable to use a non-default solver, e.g., HPF or PQPBO. We are currently working on a comparative study of min-cut/max-flow algorithms, which should provide better insights into which algorithms perform the best on different computer vision tasks. If you're interested, check out this [repository](https://github.com/patmjen/maxflow_algorithms).\n\n### BK Maxflow\nFor submodular problems (e.g. segmentation without exclusion constraints), the default solver, used by the `MaxflowBuilder` is an [updated version](https://github.com/Skielex/maxflow) the Boykov-Kolmogorov Maxflow algorithm, accessed through the [`thinmaxflow`](https://github.com/Skielex/thinmaxflow) package. `MaxflowBuilder` is synonymous with `BKBuilder`.\n\n### QPBO\nFor nonsubmodular problems (e.g. segmentation with exclusion constraints) the solver used by the `QPBOBuilder` is [this version](https://github.com/Skielex/maxflow) of the QPBO algorithm, accessed through the [`thinqpbo`](https://github.com/Skielex/thinqpbo) package.\n\n### HPF\nThe `HPFBuilder` is an alternative to the standard `MaxflowBuilder`. It relies on the HPF algorithm, which is often superior in performance compared to BK Maxflow. `HPFBuilder` depends on the [`thinhpf`](https://github.com/Skielex/thinhpf) package. It supports `int32` and `float32` capacities/energies, however, `int32` is recommended.\n\n### OR Tools\nAn alternative to the BK Maxflow solver is the [Google Maxflow](https://developers.google.com/optimization/flow/maxflow) implementation, which is a push-relabel algorithm. This can be done using the `ORBuilder` class. Apart from performance, the difference between the Google and BK Maxflow algorithms is that the Google implementation doesn't support floating type capacities. If `MaxflowBuilder` is slow when solving, try using the `ORBuilder` instead.\n\n### MBK\nA slightly optimized modern reimplementation of the BK Maxflow algorithm is available using the `MBKBuilder`. Depends on the `shrdr` package. Using this builder should reduce memory usage and increase performance slightly compared to the `MaxflowBuilder`/`BKBuilder`.\n\n### PBK\nA parallel version of the `MBK` implementation found in the `shrdr` package. Can significantly reduce solve for large problems on multicore systems. Jupyter notebooks with examples using the similar `PQPBOBuilder` can be found in the [supplementary material](https://openaccess.thecvf.com/content_CVPR_2020/supplemental/Jeppesen_Sparse_Layered_Graphs_CVPR_2020_supplemental.zip) of this [article](https://openaccess.thecvf.com/content_CVPR_2020/html/Jeppesen_Sparse_Layered_Graphs_for_Multi-Object_Segmentation_CVPR_2020_paper.html).\n\n### MQPBO\nA slightly optimized modern reimplementation of the QPBO algorithm is available using the `QPBOBuilder`. Depends on the `shrdr` package. Using this builder should reduce memory usage and increase performance slightly compared to the `QPBOBuilder`.\n\n### PQPBO\nA parallel version of the `MQPBO` implementation found in the `shrdr` package. Can significantly reduce solve for large problems on multicore systems. Jupyter notebooks with examples of use can be found in the [supplementary material](https://openaccess.thecvf.com/content_CVPR_2020/supplemental/Jeppesen_Sparse_Layered_Graphs_CVPR_2020_supplemental.zip) of this [article](https://openaccess.thecvf.com/content/ICCV2021/supplemental/Jeppesen_Faster_Multi-Object_Segmentation_ICCV_2021_supplemental.zip).\n\n\n## Dependencies\n To solve the *s-t* graph-cut optimization problems the package relies on one of the following packages:\n- [`thinmaxflow`](https://github.com/Skielex/thinmaxflow) (installed by default) - Package for computing min-cut/max-flow of an *s-t* graph using the Boykov-Kolmogorov (BK) Maxflow algorithm.\n- [`thinqpbo`](https://github.com/Skielex/thinqpbo) (installed by default) - Package for solving submodular and nonsubmodular optimization problems using the Quadratic Pseudo-Boolean Optimization (QPBO) algorithm implementation by Kolmogorov. Solver based on the BK Maxflow.\n- [`thinhpf`](https://github.com/Skielex/thinhpf)- Package for computing min-cut/max-flow of an *s-t* graph using the Hochbaum Pseudoflow (HPF) algorithm.\n- [`ortools`](https://github.com/google/or-tools) - Package for computing min-cut/max-flow of an *s-t* graph using the Google OR Tools min-cut/max-flow implementation.\n- [`shrdr`](https://github.com/Skielex/shrdr) - Package for computing min-cut/max-flow of an *s-t* graph optimized serial or parallel implementations of BK Maxflow and QPBO algorithms by Jensen and Jeppesen.\n\nSee links for further details and references.\n\n### Install with extra dependencies\nInstall with HPF solver.\n```\npip install slgbuilder[thinhpf]\n```\nInstall with Google OR Tools solver.\n```\npip install slgbuilder[ortools]\n```\nInstall with all extras.\n```\npip install slgbuilder[all]\n```\nThe `shrdr` package is not yet available on PyPI. Get it [here](https://github.com/Skielex/shrdr)!\n\n## Related repositories\n- [shrdr](https://github.com/Skielex/shrdr) Python package (ICCV 2021)\n- [thinqpbo](https://github.com/Skielex/thinqpbo) Python package\n- [thinmaxflow](https://github.com/Skielex/thinmaxflow) Python package\n- [thinhpf](https://github.com/Skielex/thinhpf) Python package\n- [C++ implementations](https://github.com/patmjen/maxflow_algorithms) of min-cut/max-flow algorithms\n\n## Contributions\nContributions are welcome, just create an [issue](https://github.com/Skielex/slgbuilder/issues) or a [PR](https://github.com/Skielex/slgbuilder/pulls).\n\n## License\nMIT License (see LICENSE file).\n\n## Reference\nIf you use this any of this for academic work, please consider citing our work:\n- [Sparse Layered Graphs for Multi-Object Segmentation](http://openaccess.thecvf.com/content_CVPR_2020/papers/Jeppesen_Sparse_Layered_Graphs_for_Multi-Object_Segmentation_CVPR_2020_paper.pdf) \n\n- [Faster Multi-Object Segmentation using Parallel Quadratic Pseudo-Boolean Optimization](https://openaccess.thecvf.com/content/ICCV2021/papers/Jeppesen_Faster_Multi-Object_Segmentation_Using_Parallel_Quadratic_Pseudo-Boolean_Optimization_ICCV_2021_paper.pdf)\n\n\n\n### BibTeX\n\n``` bibtex\n@INPROCEEDINGS{9156301,  author={Jeppesen, Niels and Christensen, Anders N. and Dahl, Vedrana A. and Dahl, Anders B.},  booktitle={2020 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},   title={Sparse Layered Graphs for Multi-Object Segmentation},   year={2020},  volume={},  number={},  pages={12774-12782},  doi={10.1109/CVPR42600.2020.01279}}\n\n@INPROCEEDINGS{9710633,  author={Jeppesen, Niels and Jensen, Patrick M. and Christensen, Anders N. and Dahl, Anders B. and Dahl, Vedrana A.},  booktitle={2021 IEEE/CVF International Conference on Computer Vision (ICCV)},   title={Faster Multi-Object Segmentation using Parallel Quadratic Pseudo-Boolean Optimization},   year={2021},  volume={},  number={},  pages={6240-6249},  doi={10.1109/ICCV48922.2021.00620}}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Skielex/slgbuilder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "slgbuilder",
    "package_url": "https://pypi.org/project/slgbuilder/",
    "platform": null,
    "project_url": "https://pypi.org/project/slgbuilder/",
    "project_urls": {
      "Homepage": "https://github.com/Skielex/slgbuilder"
    },
    "release_url": "https://pypi.org/project/slgbuilder/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python package for building and cutting sparse layered s-t graphs.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13362529,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "432380cfa7d52f86089794528b4d03e0d942f2868ffa8773d4d1294c0e70fcd6",
          "md5": "01f96c7b3f1796b9385ecd7f9a160c58",
          "sha256": "74dd02b7f7de8886d8b0c0c4ee0f0743f8d0a820f67a6c506bf00d7adce70b20"
        },
        "downloads": -1,
        "filename": "slgbuilder-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "01f96c7b3f1796b9385ecd7f9a160c58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9499,
        "upload_time": "2020-06-15T14:28:49",
        "upload_time_iso_8601": "2020-06-15T14:28:49.986426Z",
        "url": "https://files.pythonhosted.org/packages/43/23/80cfa7d52f86089794528b4d03e0d942f2868ffa8773d4d1294c0e70fcd6/slgbuilder-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ffb73433166ce7d74c2bbfb561da41941be8da7ef88c8b813ee2eb2a3d03593",
          "md5": "759b4b3bda64658259a67fb25c900358",
          "sha256": "2976c7b8742674b1151fc5eef356409385e3a22b8d7190c9c8267beb318a4ec0"
        },
        "downloads": -1,
        "filename": "slgbuilder-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "759b4b3bda64658259a67fb25c900358",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20899,
        "upload_time": "2022-03-31T17:43:44",
        "upload_time_iso_8601": "2022-03-31T17:43:44.274096Z",
        "url": "https://files.pythonhosted.org/packages/5f/fb/73433166ce7d74c2bbfb561da41941be8da7ef88c8b813ee2eb2a3d03593/slgbuilder-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ffb73433166ce7d74c2bbfb561da41941be8da7ef88c8b813ee2eb2a3d03593",
        "md5": "759b4b3bda64658259a67fb25c900358",
        "sha256": "2976c7b8742674b1151fc5eef356409385e3a22b8d7190c9c8267beb318a4ec0"
      },
      "downloads": -1,
      "filename": "slgbuilder-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "759b4b3bda64658259a67fb25c900358",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20899,
      "upload_time": "2022-03-31T17:43:44",
      "upload_time_iso_8601": "2022-03-31T17:43:44.274096Z",
      "url": "https://files.pythonhosted.org/packages/5f/fb/73433166ce7d74c2bbfb561da41941be8da7ef88c8b813ee2eb2a3d03593/slgbuilder-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}