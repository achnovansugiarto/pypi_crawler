{
  "info": {
    "author": "RaPoSpectre",
    "author_email": "rapospectre@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Django Simple Serializer\n========================\n\n--------------\n\n[English Doc][1]\n\nDjango Simple Serializer 是一个可以帮助开发者快速将 Django 数据或者\npython data 序列化为 json\\|raw 数据。\n\n为什么要用 Django Simple Serializer ?\n-------------------------------------\n\n对于序列化 Django 数据的解决方案已经有以下几种：\n\ndjango.core.serializers\n~~~~~~~~~~~~~~~~~~~~~~~\n\nDjango内建序列化器, 它可以序列化Django model query set\n但无法直接序列化单独的Django model数据。如果你的model里含有混合数据 ,\n这个序列化器同样无法使用(如果你想直接使用序列化数据). 除此之外,\n如果你想直接把序列化数据返回给用户,显然它包含了很多敏感及对用户无用对信息。\n\nQuerySet.values()\n~~~~~~~~~~~~~~~~~\n\n和上面一样, QuerySet.values() 同样没法工作如果你的model里有\nDateTimeField 或者其他特殊的 Field 以及额外数据。\n\ndjango-rest-framework serializers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndjango-rest-framework 是一个可以帮助你快速构建 REST API 的强力框架。\n他拥有完善的序列化器，但在使用之前你需要花费一些时间入门, 并学习 cbv\n的开发方式, 对于有时间需求的项目显然这不是最好的解决方案。\n\ndjango simple serializer\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n我希望可以快速简单的序列化数据,\n所以我设计了一种可以不用任何额外的配置与学习而将Django data 或者 python\ndata 序列化为相应的数据的简单的方式。 这就是为什么我写了 django simple\nserializer。\n\ndjango simple serializer 的实际例子: `我的个人网站后台数据接口`_\n\n--------------\n\n运行需求\n--------\n\nPython 2:\n~~~~~~~~~\n\nDjango >= 1.5\n\nPython >= 2.6\n\nPython 3:\n~~~~~~~~~\n\nDjango >= 1.8\n\nPython >= 3\n\n安装\n----\n\nInstall using pip:\n\n::\n\n    pip install django-simple-serializer\n\n使用 django simple serializer 进行开发\n--------------------------------------\n\n序列化Django data\n~~~~~~~~~~~~~~~~~\n\n假设我们有以下Django models：\n\n::\n\n    class Classification(models.Model):\n        c_name = models.CharField(max_length=30, unique=True)\n\n    class Article(models.Model):\n        caption = models.CharField(max_length=50)\n        classification = models.ForeignKey(Classification, related_name='cls_art')\n        content = models.TextField()\n        publish = models.BooleanField(default=False)\n\n使用django simple serializer的简单例子：\n\n::\n\n    from dss.Serializer import serializer\n    article_list = Article.objects.all()\n    data = serializer(article_list)\n\ndata:\n\n::\n\n    [{'read_count': 0, 'create_time': 1432392456.0, 'modify_time': 1432392456.0, 'sub_caption': u'first', 'comment_count': 0, u'id': 31}, {'read_count': 0, 'create_time': 1432392499.0, 'modify_time': 1432392499.0, 'sub_caption': u'second', 'comment_count': 0, u'id': 32}]\n\n默认情况下, 序列器会返回一个 list 或者 dict(对于单个model实例),\n你可以设置参数 “output\\_type” 来决定序列器返回 json/raw.\n\n--------------\n\nAPI 手册\n--------\n\ndss.Serializer\n^^^^^^^^^^^^^^\n\n提供序列器\n\n*function* serializer(\\ *data, datetime\\_format=‘timestamp’,\noutput\\_type=‘raw’, include\\_attr=None, exclude\\_attr=None,\nforeign=False, many=False, through=True*)\n\nParameters:\n^^^^^^^^^^^\n\n-  data(\\ *Required*\\ \\|(QuerySet, Page, list, django model\n   object))-待处理数据\n-  datetime\\_format(\\ *Optional*\\ \\|string)-如果包含 datetime 将\n   datetime 转换成相应格式.默认为 “timestamp”（时间戳）\n-  output\\_type(\\ *Optional*\\ \\|string)-serialize type.\n   默认“raw”原始数据，即返回list或dict\n-  include\\_attr(\\ *Optional*\\ \\|(list, tuple))-只序列化 include\\_attr\n   列表里的字段。默认为 None\n-  exclude\\_attr(\\ *Optional*\\ \\|(list, tuple))-不序列化 exclude\\_attr\n   列表里的字段。默认为 None\n-  foreign(\\ *Optional*\\ \\|bool)-是否序列化 ForeignKeyField\n   。include\\_attr 与 exclude\\_attr 对 ForeignKeyField 依旧有效。 默认为\n   False\n-  many(\\ *Optional*\\ \\|bool)-是否序列化 ManyToManyField 。include\\_attr\n   与 exclude\\_attr 对 ManyToManyField 依旧有效 默认为 False\n-  through(\\ *Optional*\\ \\|bool)-是否序列化 ManyToManyField 中 through\n   属性数据 默认为 True\n\n.. _我的个人网站后台数据接口: https://github.com/bluedazzle/django-vue.js-blog/blob/master/api/views.py\n用法:\n^^^^^\n\n**datetime\\_format:**\n\n+--------------+------------------------------------------------------+\n| parameters   | intro                                                |\n+==============+======================================================+\n| string       | 转换 datetime 为字符串。如： “2015-05-10 10:19:22”   |\n+--------------+------------------------------------------------------+\n| timestamp    | 转换 datetime 为时间戳。如： “1432124420.0”          |\n+--------------+------------------------------------------------------+\n\n例子:\n\n::\n\n    from dss.Serializer import serializer\n    article_list = Article.objects.all()\n    data = serializer(article_list, datetime_format='string', output_type='json')\n\ndata:\n\n::\n\n    [\n        {\n            \"read_count\": 0,\n            \"sub_caption\": \"first\",\n            \"publish\": true,\n            \"content\": \"first article\",\n            \"caption\": \"first\",\n            \"comment_count\": 0,\n            \"create_time\": \"2015-05-23 22:47:36\",\n            \"modify_time\": \"2015-05-23 22:47:36\",\n            \"id\": 31\n        },\n        {\n            \"read_count\": 0,\n            \"sub_caption\": \"second\",\n            \"publish\": false,\n            \"content\": \"second article\",\n            \"caption\": \"second\",\n            \"comment_count\": 0,\n            \"create_time\": \"2015-05-23 22:48:19\",\n            \"modify_time\": \"2015-05-23 22:48:19\",\n            \"id\": 32\n        }\n    ]\n\n**output\\_type**\n\n+--------------+----------------------------------------------------+\n| parameters   | intro                                              |\n+==============+====================================================+\n| raw          | 将list或dict中的特殊对象序列化后输出为list或dict   |\n+--------------+----------------------------------------------------+\n| dict         | 同 raw                                             |\n+--------------+----------------------------------------------------+\n| json         | 转换数据为 json                                    |\n+--------------+----------------------------------------------------+\n\n[STRIKEOUT:xml 转换数据为 xml] (暂时去除)\n\n例子:\n\n::\n\n    from dss.Serializer import serializer\n    article_list = Article.objects.all()[0]\n    data = serializer(article_list, output_type='json')\n\ndata:\n\n::\n\n    {\n            \"read_count\": 0,\n            \"sub_caption\": \"first\",\n            \"publish\": true,\n            \"content\": \"first article\",\n            \"caption\": \"first\",\n            \"comment_count\": 0,\n            \"create_time\": \"2015-05-23 22:47:36\",\n            \"modify_time\": \"2015-05-23 22:47:36\",\n            \"id\": 31\n        }\n\n**include\\_attr**\n\n例子:\n\n::\n\n    from dss.Serializer import serializer\n    article_list = Article.objects.all()\n    data = serializer(article_list, output_type='json', include_attr=('content', 'caption',))\n\ndata:\n\n::\n\n    [\n        {\n            \"content\": \"first article\",\n            \"caption\": \"first\"\n        },\n        {\n            \"content\": \"second article\",\n            \"caption\": \"second\"\n        }\n    ]\n\n**exclude\\_attr**\n\n例子:\n\n::\n\n    from dss.Serializer import serializer\n    article_list = Article.objects.all()\n    data = serializer(article_list, output_type='json', exclude_attr=('content',))\n\ndata:\n\n::\n\n        [\n            {\n                \"read_count\": 0,\n                \"sub_caption\": \"first\",\n                \"publish\": true,\n                \"caption\": \"first\",\n                \"comment_count\": 0,\n                \"create_time\": 1432392456,\n                \"modify_time\": 1432392456,\n                \"id\": 31\n            },\n            {\n                \"read_count\": 0,\n                \"sub_caption\": \"second\",\n                \"publish\": false,\n                \"caption\": \"second\",\n                \"comment_count\": 0,\n                \"create_time\": 1432392499,\n                \"modify_time\": 1432392499,\n                \"id\": 32\n            }\n        ]\n\n\n**foreign**",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hengdai/django-simple-serializer",
    "keywords": "django serializer",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dss-serializer",
    "package_url": "https://pypi.org/project/dss-serializer/",
    "platform": "",
    "project_url": "https://pypi.org/project/dss-serializer/",
    "project_urls": {
      "Homepage": "https://github.com/hengdai/django-simple-serializer"
    },
    "release_url": "https://pypi.org/project/dss-serializer/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django Simple Serializer is a serializer to help user serialize django data or python list into json,xml,dict data in a simple way.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4872350,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e4102efffadeca1d08ca12e760eb0acd65cd95f8ffd11b61b3dbd6599a832f7",
          "md5": "fa3adcda15c8b7173655866c9d2e6082",
          "sha256": "3f13b5470eb725140e32065d01c5493991afff608915d1502fded34f815b79f8"
        },
        "downloads": -1,
        "filename": "dss-serializer-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fa3adcda15c8b7173655866c9d2e6082",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8849,
        "upload_time": "2019-02-27T02:42:45",
        "upload_time_iso_8601": "2019-02-27T02:42:45.136166Z",
        "url": "https://files.pythonhosted.org/packages/3e/41/02efffadeca1d08ca12e760eb0acd65cd95f8ffd11b61b3dbd6599a832f7/dss-serializer-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e4102efffadeca1d08ca12e760eb0acd65cd95f8ffd11b61b3dbd6599a832f7",
        "md5": "fa3adcda15c8b7173655866c9d2e6082",
        "sha256": "3f13b5470eb725140e32065d01c5493991afff608915d1502fded34f815b79f8"
      },
      "downloads": -1,
      "filename": "dss-serializer-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fa3adcda15c8b7173655866c9d2e6082",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8849,
      "upload_time": "2019-02-27T02:42:45",
      "upload_time_iso_8601": "2019-02-27T02:42:45.136166Z",
      "url": "https://files.pythonhosted.org/packages/3e/41/02efffadeca1d08ca12e760eb0acd65cd95f8ffd11b61b3dbd6599a832f7/dss-serializer-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}