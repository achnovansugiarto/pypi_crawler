{
  "info": {
    "author": "Adrian Panella",
    "author_email": "ianchi74@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Home Automation",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "![CI workflow](https://github.com/ianchi/remotecodes/actions/workflows/ci.yml/badge.svg)\n[![PyPI](https://img.shields.io/pypi/v/remotecodes.svg)](https://pypi.org/project/remotecodes/)\n\n# remotecodes\n\n`remotecodes` is a curated repository of crowd-sourced IR / RF remote codes intended to be useful in home automation scenarios.\n\nThus codes are not just an arbitrary list of key-value pairs, but must adhere to a strict schema per device domain, that gives\nfunctional meaning to each code, which can later be interpreted by a higher level integration (for instance in\n[Home Assistant](https://www.home-assistant.io/)).\n\nAll codes are written using [remoteprotocols](https://github.com/ianchi/remoteprotocols#remote-command-strings) command notation\nand all it's [supported protocols](https://github.com/ianchi/remoteprotocols/blob/master/PROTOCOLS.md#list-of-supported-protocols)\nare available. See links for details.\n\nA codes file is always referenced as `brand.category.seq_number`\n\n## Usage\n\nCodes files can be used directly from their yaml form.\nIf consumed from _python_, there are some helper functions available\n\n```python\nfrom remotecodes import get_codes\nfrom remotecodes.schema import media_player, validate_source\n\n\n#intended as voluptuous validator for source string format\nsource = validate_source(\"acme.tv.001\")\n\n# find the correct codes file, validate it and return it as a dict\n# an optional <domain> can be marked as required\n# optional extra root folders can be added to the search. They take priority over built-in ones.\ncodes = get_codes(source, \"media_player\", [\"my_extra_codes_root\"])\n```\n\n### Command line\n\nTo batch validate all codes files and their folder structure:\n\n```bash\nremotecodes validate <codes_root_folder>\n```\n\n# Contributing Codes\n\nCodes comes from user contribution, so you are encouraged to share your files.\n\n## Hierarchy\n\n- Codes files are organized in folders that must adhere to the pattern:\n  `brand/category/`\n- Files within each folder must be named according to the pattern: `brand.category.seq_number.yaml`\n- The brand and category must be consistent among folder, filename, file content\n\n## Schema\n\nAll files must have a required `info` section and at least one domain section that follows it's respective schema. A device can have commands for more than one domain (i.e. a `fan` and a `light`).\nAdditionally a free `custom` section can be added to include extra commands not tied to a well defined function.\n\n### Section `info`\n\n```yaml\ninfo: #required\n    brand: Acme #required\n    models: #required, min length: 1\n        - Model A\n    category: tv #required\n    notes: < #optional\n        This codes where learned and tested\n\n# At least one domain section required\n```\n\n_brand_ and _category_ are validated against filename and path.\n\n_category_ must be one of:\n\n- air_conditioner\n- audio_player\n- av_receiver\n- fan\n- light\n- projector\n- settopbox\n- speaker\n- switch\n- tuner\n- tv\n- video_player\n\n### Commands\n\nAll codes are written using [remoteprotocols](https://github.com/ianchi/remoteprotocols#remote-command-strings) command notation\nand all it's [supported protocols](https://github.com/ianchi/remoteprotocols/blob/master/PROTOCOLS.md#list-of-supported-protocols)\nare available. See links for details.\n\nThis is often done as a single string, but if a multi command sequence is needed it can be expressed as an array of commands.\nAfter validation all entries are converted to arrays.\n\n```yaml\n#single command\nsome_function: nec:0xFE:0x7E\n\n#multi sequence\nother_function:\n  - nec:0x7E:0xA2\n  - nec:0x7E:0xA3\n```\n\n### Section `media_player`\n\nUsed for any kind of media device. All subsections are optional, but at least one must be present.\n\n```yaml\nmedia_player: #cannot be empty\n  power: #optional, but cannot be empty\n    power_on: <command> #optional, required if 'off' is set\n    power_off: <command> #optional, required if 'on' is set\n\n    power_toggle: <command> #optional\n\n  volume: #optional, but cannot be empty\n    up: <command> #optional, required if 'down' is set\n    down: <command> #optional, required if 'up' is set\n\n    mute_on: <command> #optional, required if 'off' is set\n    mute_off: <command> #optional, required if 'on' is set\n\n    mute_toggle: <command> #optional\n\n  sources: #optional, min length: 1\n    # source names are device dependant. Valid characters: [azAZ09_- ], cannot start with a symbol\n    - source_1: <command>\n    - source_2: <command>\n\n  sound_modes: #optional, min length: 1\n    # modes names are device dependant. Valid characters: [azAZ09_- ], cannot start with a symbol\n    - mode_1: <command>\n    - mode_2: <command>\n\n  numbers: #optional, if set ALL numbers are required\n    0: <command> #required\n    1: <command> #required\n    2: <command> #required\n    3: <command> #required\n    4: <command> #required\n    5: <command> #required\n    6: <command> #required\n    7: <command> #required\n    8: <command> #required\n    9: <command> #required\n\n  media: #optional, but cannot be empty\n    play: <command> #optional\n    pause: <command> #optional\n    play_pause: <command> #optional\n\n    stop: <command> #optional\n\n    next_track: <command> #optional, required if 'prev' is set\n    prev_track: <command> #optional, required if 'next' is set\n\n    fast_forward: <command> #optional, required if 'rewind' is set\n    rewind: <command> #optional, required if 'fast_forward' is set\n\n  navigate: #optional, but cannot be empty\n    up: <command> #optional, required if 'down' is set\n    down: <command> #optional, required if 'up' is set\n\n    left: <command> #optional, required if 'right' is set\n    right: <command> #optional, required if 'left' is set\n\n    select: <command> #optional\n    back: <command> #optional\n\n\n    # clear_playlist, shuffle_set, repeat_set,\n```\n\n### Section `fan`\n\nUsed for fan device.\n\n```yaml\n#TBD\n```\n\n### Section `air_conditioner`\n\nUsed for air conditioner device.\n\n```yaml\n#TBD\n```\n\n### Section `light`\n\nUsed for light control functions.\n\n```yaml\n#TBD\n```\n\n### Section `switch`\n\nUsed for to control simple switching functions.\n\n```yaml\n#TBD\n```\n\n### Section `custom`\n\nUsed for arbitrary functions that not fall into any other category.\nIt is discuraged as it's unstandardized nature cannot be used by higher order components, but can be useful for manual use cases.\n\n```yaml\ncustom:\n  # function names are completely custom. Valid characters: [azAZ09_- ], cannot start with a symbol\n  function1: <command>\n  function2: <command>\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ianchi/remotecodes",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "remotecodes",
    "package_url": "https://pypi.org/project/remotecodes/",
    "platform": null,
    "project_url": "https://pypi.org/project/remotecodes/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ianchi/remotecodes/issues",
      "Homepage": "https://github.com/ianchi/remotecodes"
    },
    "release_url": "https://pypi.org/project/remotecodes/0.0.1/",
    "requires_dist": [
      "voluptuous (<0.13,>=0.12.2)",
      "remoteprotocols (>=0.0.5)"
    ],
    "requires_python": ">=3.8",
    "summary": "Structured and validated IR / RF remote codes for many devices",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13384947,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75dd80a1040d487bd05543e0a823b6de91db0650517fd3145c897500826e3d89",
          "md5": "b3bdea6f72b07c0b34fec0ce7761100f",
          "sha256": "6ff760a5b8c77a45d4e9458aca26ba987066322397c56ca5552628d7d2967e66"
        },
        "downloads": -1,
        "filename": "remotecodes-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3bdea6f72b07c0b34fec0ce7761100f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 8407,
        "upload_time": "2022-04-02T16:09:02",
        "upload_time_iso_8601": "2022-04-02T16:09:02.729470Z",
        "url": "https://files.pythonhosted.org/packages/75/dd/80a1040d487bd05543e0a823b6de91db0650517fd3145c897500826e3d89/remotecodes-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1660c15b58d58dd025a5baa3c723292196c4a1471d9b7e1b46b80f3139ead80",
          "md5": "bfcb0937c4ba95e0664d259a3dda1a8b",
          "sha256": "13fff795f4a9bf2fa87518dadb21741e2c256f1aba0245776db69016c8d16004"
        },
        "downloads": -1,
        "filename": "remotecodes-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bfcb0937c4ba95e0664d259a3dda1a8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10473,
        "upload_time": "2022-04-02T16:09:04",
        "upload_time_iso_8601": "2022-04-02T16:09:04.818679Z",
        "url": "https://files.pythonhosted.org/packages/d1/66/0c15b58d58dd025a5baa3c723292196c4a1471d9b7e1b46b80f3139ead80/remotecodes-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75dd80a1040d487bd05543e0a823b6de91db0650517fd3145c897500826e3d89",
        "md5": "b3bdea6f72b07c0b34fec0ce7761100f",
        "sha256": "6ff760a5b8c77a45d4e9458aca26ba987066322397c56ca5552628d7d2967e66"
      },
      "downloads": -1,
      "filename": "remotecodes-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3bdea6f72b07c0b34fec0ce7761100f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.8",
      "size": 8407,
      "upload_time": "2022-04-02T16:09:02",
      "upload_time_iso_8601": "2022-04-02T16:09:02.729470Z",
      "url": "https://files.pythonhosted.org/packages/75/dd/80a1040d487bd05543e0a823b6de91db0650517fd3145c897500826e3d89/remotecodes-0.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d1660c15b58d58dd025a5baa3c723292196c4a1471d9b7e1b46b80f3139ead80",
        "md5": "bfcb0937c4ba95e0664d259a3dda1a8b",
        "sha256": "13fff795f4a9bf2fa87518dadb21741e2c256f1aba0245776db69016c8d16004"
      },
      "downloads": -1,
      "filename": "remotecodes-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bfcb0937c4ba95e0664d259a3dda1a8b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 10473,
      "upload_time": "2022-04-02T16:09:04",
      "upload_time_iso_8601": "2022-04-02T16:09:04.818679Z",
      "url": "https://files.pythonhosted.org/packages/d1/66/0c15b58d58dd025a5baa3c723292196c4a1471d9b7e1b46b80f3139ead80/remotecodes-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}