{
  "info": {
    "author": "张斌",
    "author_email": "786017877@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## flask_simpleserialize\n\n* 一个适用于flask框架(轻型的、简单的)序列化工具\n\n### 使用介绍\n\n```python\npip install flask-simpleserialize\n```\n\n当前版本为0.0.1（^_^）,以后还会继续更新(有时间就写)\n\n它不需要你在你的model层实例上面再继承啊什么的，完全不需要，接下来看操作不废话\n\n\n\n**个人觉得不管使用什么框架，序列化这一步都应该单独提出来。用作一层**\n\n\n\nmodel.py\n\n```python\nfrom sqlalchemy import orm, BIGINT, Column, TIMESTAMP, BOOLEAN, VARCHAR, TEXT, Integer, DateTime\nfrom sqlalchemy.dialects.mysql import TINYINT\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import func\n\nBase = declarative_base()\n\n# model类必须要继承declarative_base()\nclass AppletUser(Base):\n    __tablename__ = \"applet_user\"\n\n    id = Column(BIGINT,primary_key=True,info='用户主键id')\n    wx_unique_identification = Column(VARCHAR(256),info='wx端传入的唯一标识',default='')\n    wx_user_nickname = Column(VARCHAR(256),info='wx用户的昵称',default=\"\")\n    # wx_user_nickname = Column(VARCHAR(256),info='wx用户的昵称',default=\"dw{}\".format(client.get_guid()))\n    wx_user_avatar = Column(VARCHAR(256),info='wx用户的头像url',default='')\n    wx_user_phone = Column(VARCHAR(256),info='用户电话号码',default='')\n    wx_user_country = Column(VARCHAR(256),info='用户所在国家',default='中国')\n    wx_user_province = Column(VARCHAR(256),info='用户所在省份/州',default='北京')\n    wx_user_city = Column(VARCHAR(256),info='用户所在城市',default='北京')\n    wx_user_gender = Column(TINYINT,info='0为未知,1为男性,2为女性',default=0)\n    user_memberorder = Column(TINYINT,info='0为普通用户,1为白银会员,2为黄金会员,3为铂金会员,4为钻石会员,5为超级会员',default=0)\n    user_integral = Column(BIGINT, info='用户积分', default=0)\n    user_balance = Column(BIGINT,info='用户余额',default=0)\n    is_activate = Column(BOOLEAN,info='是否激活,默认为激活状态',default=False)\n    soft_delete = Column(BOOLEAN, info='后台系统是否软删除删除,True为删除,False为未删除',default=False)\n    create_time = Column(DateTime, server_default= func.now(), info='用户创建时间')\n    update_time = Column(DateTime, server_default= func.now(), onupdate=func.now(), info='用户更新时间')\n\n    # TODO 由于wx官方不会对用户以前的头像url进行清除，一旦wx用户更改头像就会造成wx用户头像更改小程序端不会更改的问题，\n    #  所以当用户换头像的时候小程序也要跟着换，特定义此字段用以存储用户以前的头像\n    user_previous_avatar_text = Column(TEXT,info='存储用户以前头像URL')\n\t\n    \n\n    def __repr__(self):\n        return \"<AppletUser(id='%s',wx_user_nickname='%s')>\"%(self.id,self.wx_user_nickname)\n```\n\n\n\nserialize.py\n\n```python\nfrom flask_simpleserialize import ModelSerialize\nclass UserSerialize(ModelSerialize):\n    class Meta:\n        model = AppletUser\n        serialize_fields = ['id','wx_unique_identification']\n        deserialization_fields = ['create_time']\n\n    def get(self):\n        Users = SessionFactory.session().query(AppletUser).all()\n        data = self.data(Users)\n        return data\n\n```\n\n你只需要自己写一个类导入`ModelSerialize`模块然后继承，再其内部定义一个Meta类(必须要定义的呦)，Meta类里面写入model属性，属性值就是你model实例名称(也是必需要写的)，还有再写入你需要序列化/反序列化的字段值。`serialize_fields`与`deserialization_fields`名称是不能更改的。然后你需要定义一个方法，方法内部执行查询语句，将结果丢给`data`方法.剩下的就不用管了，`ModelSerialize`会全部帮你处理好的\n\n\n\nrouter.py\n\n```python\nfrom serialize import UserSerialize\nfrom flask import Blueprint,request,jsonify\nfrom flasgger import swag_from\n\nuser = Blueprint('user',__name__)\n@hello_rbp.route('/user',methods=[\"GET\"])\n@swag_from('../docs/doc/user.yaml')\ndef get_user():\n    \"\"\"获取用户信息\n    \"\"\"\n    user_serialize = UserSerialize()\n    result = user_serialize.get()\n\n    return jsonify(result)\n```\n\n请看结果\n\n![image-20220127195443704](img/result1.png)\n\n\n\n\n\n\n\n**当然了它也支持对序列化的字段进行更改，但是你必须要在你定义的model类中加入`cnme`方法并用`@property`装饰器将其装饰成`属性`**\n\n代码如下所示\n\n```python\nfrom sqlalchemy import orm, BIGINT, Column, TIMESTAMP, BOOLEAN, VARCHAR, TEXT, Integer, DateTime\nfrom sqlalchemy.dialects.mysql import TINYINT\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import func\n\nBase = declarative_base()\n\n# 看到没它还是像以前一样\nclass AppletUser(Base):\n    __tablename__ = \"applet_user\"\n\n    id = Column(BIGINT,primary_key=True,info='用户主键id')\n    wx_unique_identification = Column(VARCHAR(256),info='wx端传入的唯一标识',default='')\n    wx_user_nickname = Column(VARCHAR(256),info='wx用户的昵称',default=\"\")\n    # wx_user_nickname = Column(VARCHAR(256),info='wx用户的昵称',default=\"dw{}\".format(client.get_guid()))\n    wx_user_avatar = Column(VARCHAR(256),info='wx用户的头像url',default='')\n    wx_user_phone = Column(VARCHAR(256),info='用户电话号码',default='')\n    wx_user_country = Column(VARCHAR(256),info='用户所在国家',default='中国')\n    wx_user_province = Column(VARCHAR(256),info='用户所在省份/州',default='北京')\n    wx_user_city = Column(VARCHAR(256),info='用户所在城市',default='北京')\n    wx_user_gender = Column(TINYINT,info='0为未知,1为男性,2为女性',default=0)\n    user_memberorder = Column(TINYINT,info='0为普通用户,1为白银会员,2为黄金会员,3为铂金会员,4为钻石会员,5为超级会员',default=0)\n    user_integral = Column(BIGINT, info='用户积分', default=0)\n    user_balance = Column(BIGINT,info='用户余额',default=0)\n    is_activate = Column(BOOLEAN,info='是否激活,默认为激活状态',default=False)\n    soft_delete = Column(BOOLEAN, info='后台系统是否软删除删除,True为删除,False为未删除',default=False)\n    create_time = Column(DateTime, server_default= func.now(), info='用户创建时间')\n    update_time = Column(DateTime, server_default= func.now(), onupdate=func.now(), info='用户更新时间')\n\n    # TODO 由于wx官方不会对用户以前的头像url进行清除，一旦wx用户更改头像就会造成wx用户头像更改小程序端不会更改的问题，\n    #  所以当用户换头像的时候小程序也要跟着换，特定义此字段用以存储用户以前的头像\n    user_previous_avatar_text = Column(TEXT,info='存储用户以前头像URL')\n\t\n    ########差异之处##############\n    @property\n    def cname(self):\n        return {'wx_unique_identification':'unique_identification'}\n\n    def __repr__(self):\n        return \"<AppletUser(id='%s',wx_user_nickname='%s')>\"%(self.id,self.wx_user_nickname)\n```\n\n\n\n**`cname`属性内部直接返回一个字典，字典的key为原始字段名，value则为序列化之后的名字**\n\n如图所示\n\n![image-20220127200040550](img/result2.png)\n\n\n\n^_^  以后会继续更新滴\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pypa/sampleproject",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-simpleserialize",
    "package_url": "https://pypi.org/project/flask-simpleserialize/",
    "platform": "",
    "project_url": "https://pypi.org/project/flask-simpleserialize/",
    "project_urls": {
      "Homepage": "https://github.com/pypa/sampleproject"
    },
    "release_url": "https://pypi.org/project/flask-simpleserialize/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "一个针对于flask框架的序列化工具",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12709288,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b46788d26d9a5a1e2b7fc6cb7fd50b29675747a7e500d3b658d77438ac5567a",
          "md5": "f82aed0eb5bc07a72577117bfbeb8920",
          "sha256": "2f7d537c89a4acf6bf634a86ac2b7b676385773a382418858b66e2596ba2af51"
        },
        "downloads": -1,
        "filename": "flask_simpleserialize-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f82aed0eb5bc07a72577117bfbeb8920",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5957,
        "upload_time": "2022-01-27T12:14:05",
        "upload_time_iso_8601": "2022-01-27T12:14:05.040569Z",
        "url": "https://files.pythonhosted.org/packages/5b/46/788d26d9a5a1e2b7fc6cb7fd50b29675747a7e500d3b658d77438ac5567a/flask_simpleserialize-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1827f5c833f6da2f17923a5615d1bd070c802ae306f1b7f758ba4c918b0db3f",
          "md5": "4f4c8dffe818ab2b53ea008b05c278bb",
          "sha256": "d1ed225cd6b76cb2acf6669c110d51f09820a48e60f3cd45afc31dd78c08ff15"
        },
        "downloads": -1,
        "filename": "flask-simpleserialize-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4f4c8dffe818ab2b53ea008b05c278bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5281,
        "upload_time": "2022-01-27T12:14:06",
        "upload_time_iso_8601": "2022-01-27T12:14:06.760392Z",
        "url": "https://files.pythonhosted.org/packages/e1/82/7f5c833f6da2f17923a5615d1bd070c802ae306f1b7f758ba4c918b0db3f/flask-simpleserialize-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b46788d26d9a5a1e2b7fc6cb7fd50b29675747a7e500d3b658d77438ac5567a",
        "md5": "f82aed0eb5bc07a72577117bfbeb8920",
        "sha256": "2f7d537c89a4acf6bf634a86ac2b7b676385773a382418858b66e2596ba2af51"
      },
      "downloads": -1,
      "filename": "flask_simpleserialize-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f82aed0eb5bc07a72577117bfbeb8920",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5957,
      "upload_time": "2022-01-27T12:14:05",
      "upload_time_iso_8601": "2022-01-27T12:14:05.040569Z",
      "url": "https://files.pythonhosted.org/packages/5b/46/788d26d9a5a1e2b7fc6cb7fd50b29675747a7e500d3b658d77438ac5567a/flask_simpleserialize-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1827f5c833f6da2f17923a5615d1bd070c802ae306f1b7f758ba4c918b0db3f",
        "md5": "4f4c8dffe818ab2b53ea008b05c278bb",
        "sha256": "d1ed225cd6b76cb2acf6669c110d51f09820a48e60f3cd45afc31dd78c08ff15"
      },
      "downloads": -1,
      "filename": "flask-simpleserialize-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4f4c8dffe818ab2b53ea008b05c278bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5281,
      "upload_time": "2022-01-27T12:14:06",
      "upload_time_iso_8601": "2022-01-27T12:14:06.760392Z",
      "url": "https://files.pythonhosted.org/packages/e1/82/7f5c833f6da2f17923a5615d1bd070c802ae306f1b7f758ba4c918b0db3f/flask-simpleserialize-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}