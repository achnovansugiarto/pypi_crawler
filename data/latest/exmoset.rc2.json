{
  "info": {
    "author": "Adam Mater",
    "author_email": "adam.mater@anu.edu.au",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# EXplainable MOlecular SETs\n\nPackage to automate the identification of molecular similarity given an arbitrary set\nof molecules and associated functions to calculate the value of particular properties (label fingerprints).\n\n# Installation\nThe easiest way to install is using pip following the setup of a new conda environment with rdkit installed (rdkit does not play well with pip).\n\n1. `conda create -n exmoset python=3.8`\n2. `conda activate exmoset`\n3. `conda install -c conda-forge rdkit`\n4. `pip install exmoset`\n\n## API\nThe `MolSpace` Class handles the analysis of a given molecular set in accordance with the list of fingerprints provided. The molecules can be passed to Molspace in any format, with additional conversions specified by the `mol_converters` argument.\n\n```python\nanalysis = MolSpace(molecules,\n                    fingerprints = fingerprints,\n                    file=\"data/QM9_Data.csv\",\n                    mol_converters={\"rd\" : Chem.MolFromSmiles, \"smiles\" : str},\n                    index_col=\"SMILES\")\n```\n\n### Fingerprints\nFingerprints are a standardized way for Molspace to calculate the properties for each molecule it is analysing. Its arguments determine the grammatical structure of the label that will be produced (`property, noun and verb`), and a function to calculate the property (`calculator`) along with what molecular format this function works on (`mol_format`). The grammatical structure of the resulting labels is a work in progress, and may lead to some poor results that require further processing.\n\n```python\ndef contains_C(mol):\n      return 1 if C in mol else 0\n\ncontains_carbon = Fingerprint(property=\"Contains C\",\n                  verb=\"contain\",\n                  noun=\"Molecule\",\n                  label_type=\"binary\",\n                  calculator=contains_C,\n                  mol_format=\"smiles\")\n```\n\n### Molecule Converters\nThe mol_converters argument provides the means to transform each molecule into alternate representations. The argument is a dictionary with the following structure {Identifier : Function_that_will_convert} that is expanded in the following way:\n\n```python\nformats = {key : mol_converters[key](mol) for key in mol_converters.keys()} # Assigns each identifier to its assocaited representation by\nself.Molecules.append(Molecule(mol, **formats)) # Unpacks the new formats as kwargs into the Molecule object\n```\nAn example is provided below\n```python\nmol_converters = {\"rd\" : Chem.MolFromSmiles, \"smiles\" : str} # Will convert molecules provided as smiles strings into Chem.rd objects from RDKit and maintain the SMILES in the dataset as strings.\n```\n\n## Label Types\n### Binary\nBinary labels indicate the presence of absence of a particular element, bond type, or molecular feature (such as aromaticity). Simplest to calculate and best behaved with respect to the entropy estimators. Uses a discrete entropy estimator.\n\n### Multiclass\nDiscrete labels where the value can be any integer. Examples include number of rings, number of atoms, or number of each type of bond. Uses a discrete entropy estimator.\n\n### Continuous\nContinuous labels where the value can be any real number. Examples include electronic spatial extent, dipole moment, and free energy. Uses the continuous entropy estimator\n\n## References\nThe mathematical methods employed in this codebase are based on the following publications:\n\n- Kraskov, A.; Stögbauer, H.; Grassberger, P. Estimating mutual information. Phys. Rev. E 2004, 69, 66138.\n- Ross, B. C. Mutual Information between Discrete and Continuous Data Sets. PLOS ONE 2014, 9, 1–5.\n\nContinuous entropy estimation is provided by Paul Broderson's entropy estimators package (https://github.com/paulbrodersen/entropy_estimators).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/acmater/exmoset",
    "keywords": "cheminformatics,clustering,explainable-ml",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "exmoset",
    "package_url": "https://pypi.org/project/exmoset/",
    "platform": "",
    "project_url": "https://pypi.org/project/exmoset/",
    "project_urls": {
      "Homepage": "https://github.com/acmater/exmoset",
      "Source": "https://github.com/acmater/exmoset"
    },
    "release_url": "https://pypi.org/project/exmoset/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.8, <4",
    "summary": "Automating the generation of human readable descriptions of arbitrary subsets of molecular space.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10292326,
  "releases": {
    "0.0.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a1984fbe62ba5f81592fe13ab61eaa80c9b446139d1e7208e2ee102f9efda61",
          "md5": "6875819aee7354d48687336e989fbc59",
          "sha256": "d0f9a65ef6d01e44c398f1001b91db1861f9dbca794a983dfe0f1eb80479b8f5"
        },
        "downloads": -1,
        "filename": "exmoset-0.0.1.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "6875819aee7354d48687336e989fbc59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 95094,
        "upload_time": "2021-05-08T04:05:44",
        "upload_time_iso_8601": "2021-05-08T04:05:44.181428Z",
        "url": "https://files.pythonhosted.org/packages/4a/19/84fbe62ba5f81592fe13ab61eaa80c9b446139d1e7208e2ee102f9efda61/exmoset-0.0.1.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f81212ee953557a8e1b6c8d83880838c1a0a1141fe939ec36e039a74101d22a",
          "md5": "61fe5e275239c06519ca49077599e259",
          "sha256": "26700af603c6c9283e282691794cdfbaa8676d39ef3e0576a8d0cce1ef3c2ed7"
        },
        "downloads": -1,
        "filename": "exmoset-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61fe5e275239c06519ca49077599e259",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 95074,
        "upload_time": "2021-05-08T04:22:01",
        "upload_time_iso_8601": "2021-05-08T04:22:01.901359Z",
        "url": "https://files.pythonhosted.org/packages/7f/81/212ee953557a8e1b6c8d83880838c1a0a1141fe939ec36e039a74101d22a/exmoset-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f81212ee953557a8e1b6c8d83880838c1a0a1141fe939ec36e039a74101d22a",
        "md5": "61fe5e275239c06519ca49077599e259",
        "sha256": "26700af603c6c9283e282691794cdfbaa8676d39ef3e0576a8d0cce1ef3c2ed7"
      },
      "downloads": -1,
      "filename": "exmoset-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "61fe5e275239c06519ca49077599e259",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8, <4",
      "size": 95074,
      "upload_time": "2021-05-08T04:22:01",
      "upload_time_iso_8601": "2021-05-08T04:22:01.901359Z",
      "url": "https://files.pythonhosted.org/packages/7f/81/212ee953557a8e1b6c8d83880838c1a0a1141fe939ec36e039a74101d22a/exmoset-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}