{
  "info": {
    "author": "TuneFlow",
    "author_email": "contact@info.tuneflow.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# chorder-py 0.1.2\n\nFork of chorder with drum fixes.\n\n## Installation\n\n`chorder-py` is a chord detection and reharmonize tool for `.mid` files. You can download `chorder-py` using pip:\n\n```shell\npip install chorder-py\n```\n\nTo check if `chorder-py` is successfully installed, type `python` in the terminal, and do the following:\n\n```python\n>>> from chorder import Chord\n>>> Chord()\nChord(root_pc=None, quality=None, bass_pc=None)\n```\n## Documentation\n### Chord\n\nThe `Chord` class is the basic building block for the whole chorder package. A `Chord` instance has four attributes, including:\n - `root_pc`\n     - the pitch class of a chord's root note\n     - is an integer ranging from 0 to 11\n - `quality`, the quality of a chord (the complete list of quality)\n     - the quality of a chord\n     - is a string\n     - the complete list of qualities covered in `chorder` can be found at `Chord.standard_qualities`\n - `bass_pc`\n     - the pitch class of a chord's bass note\n     - is an integer ranging from 0 to 11\n - `scale`\n     - the scale of the chord\n     - is a list of strings representing the note names of each pitch class from 0 to 11\n     - if a scale is not specified, a default scale is used, which is in `Chord.default_scale`\n\n#### `Chord.__init__(self, args=None, scale=None)`\n##### Parameters\n - `args`: `None` or `str` or `tuple`, optional\n     - `None`: implies constructing an empty chord\n     - `str`: a chord symbol, such as `'Bbmaj7'`\n     - `tuple`: a tuple consisting of `(root_pc, quality, bass_pc)\n - `scale`: `list`, optional\n     - specify the scale the chord uses\n     - will use `Chord.default_scale` if left as `None`\n\n#### `Chord.root(self)`\nReturns the root note name of a chord based on the chord's scale.\n\n#### `Chord.bass(self)`\nReturns the bass note name of a chord based on the chord's scale.\n\n#### `Chord.bass(self)`\nReturns if any attributes of a chord is `None`. This can help filtering empty chords.\n\n#### `Chord.transpose(self, key)`\nTransposes a chord to C-based relative chord. For example, `Chord('Bb7').transpose(3)` should return `Chord('G7')`.\n##### Parameters\n - `key`: `int`\n     - the pitch class of the key\n     - ranges from 0 to 11\n\n### DeChorder\n`DeChorder` is a class that consists of static methods related to chord recognition. To utilize this class, the midi information has to be in the form of [miditoolkit](https://github.com/YatingMusic/miditoolkit) objects.\n\n#### `Dechorder.get_bass_pc(notes, start=0, end=1e7)`\nReturns the pitch class of bass note among the notes between the time range of `start` and `end`.\n##### Parameters\n - `notes`: list\n     - the group of notes\n     - notes are in the form of `miditoolkit.midi.containers.Note`\n - `start`: int\n     - the start tick of the notes to be considered\n     - set it to `notes[0].start` for now, as this feature will later be updated\n - `end`: int\n     - the end tick of the notes to be considered\n     - set it to `notes[-1].end` for now, as this feature will later be updated\n\n#### `Dechorder.get_chord_quality(notes, start=0, end=1e7, consider_bass=False)`\nReturns the chord among the notes between the time range of `start` and `end`.\n##### Parameters\n - `notes`: list\n     - the group of notes\n     - notes are in the form of `miditoolkit.midi.containers.Note`\n - `start`: int\n     - the start tick of the notes to be considered\n     - set it to `notes[0].start` for now, as this feature will later be updated\n - `end`: int\n     - the end tick of the notes to be considered\n     - set it to `notes[-1].end` for now, as this feature will later be updated\n - `consider_bass`: `bool\n     - decreases the likelihood of chords with non-chord tones as bass to be chosen as the answer\n\n#### `Dechorder.dechord(midi_obj, scale=None)`\nReturns a list of chords by beat.\n##### Parameters\n - `midi_obj`: `miditoolkit.midi.parser.MidiFile`\n     - the midi object to extract chord symbols from\n - `scale`: `list`\n     - the list of note names for each pitch class\n     - must be a list of strings\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tuneflow/chorder-py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chorder-py",
    "package_url": "https://pypi.org/project/chorder-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/chorder-py/",
    "project_urls": {
      "Homepage": "https://github.com/tuneflow/chorder-py"
    },
    "release_url": "https://pypi.org/project/chorder-py/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A modified version of chorder with drums fix",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16898477,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "442164b5ddc38d154bda192f3c31abd778aeaec0ac7c66c42eb69196f845fe81",
          "md5": "c79ec41227637d8101c30f7c8385095b",
          "sha256": "4b82d4b9e5887092128b9f5e88f293ab3baf5a0657ddc4bbcc163abad881775c"
        },
        "downloads": -1,
        "filename": "chorder_py-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c79ec41227637d8101c30f7c8385095b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9253,
        "upload_time": "2023-02-17T04:12:41",
        "upload_time_iso_8601": "2023-02-17T04:12:41.021636Z",
        "url": "https://files.pythonhosted.org/packages/44/21/64b5ddc38d154bda192f3c31abd778aeaec0ac7c66c42eb69196f845fe81/chorder_py-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cb0cb39eef317178e791538a8ca510b919c45a67d6842a1df6ded7806da8359",
          "md5": "701a6b77a8eb1226d4b7f49f18ec12dc",
          "sha256": "839214ac3316a9c2e6dceebdc789a57fff9674e9deee89ac0a9ff4d3d5d84ddc"
        },
        "downloads": -1,
        "filename": "chorder-py-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "701a6b77a8eb1226d4b7f49f18ec12dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9285,
        "upload_time": "2023-02-17T04:18:29",
        "upload_time_iso_8601": "2023-02-17T04:18:29.937708Z",
        "url": "https://files.pythonhosted.org/packages/4c/b0/cb39eef317178e791538a8ca510b919c45a67d6842a1df6ded7806da8359/chorder-py-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4cb0cb39eef317178e791538a8ca510b919c45a67d6842a1df6ded7806da8359",
        "md5": "701a6b77a8eb1226d4b7f49f18ec12dc",
        "sha256": "839214ac3316a9c2e6dceebdc789a57fff9674e9deee89ac0a9ff4d3d5d84ddc"
      },
      "downloads": -1,
      "filename": "chorder-py-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "701a6b77a8eb1226d4b7f49f18ec12dc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9285,
      "upload_time": "2023-02-17T04:18:29",
      "upload_time_iso_8601": "2023-02-17T04:18:29.937708Z",
      "url": "https://files.pythonhosted.org/packages/4c/b0/cb39eef317178e791538a8ca510b919c45a67d6842a1df6ded7806da8359/chorder-py-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}