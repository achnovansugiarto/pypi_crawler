{
  "info": {
    "author": "Donny Winston",
    "author_email": "donny@polyneme.xyz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3"
    ],
    "description": "`maggtomic` (*m*etadata *agg*regation using the Da*tomic* information model) is intended to be a\nmodular system for metadata management.\n\nThe primary near-term use case is support of metadata submission, processing, and management for the\n[National Microbiome Data Collaborative (NMDC)](https://microbiomedata.org/) pilot project. A priority of\nthis project is the cultivation of an open (and open-source-powered) data ecosystem.\n\n# Development Status\n\nThe development status is currently a mix of Planning and Pre-Alpha (as per\nhttps://pypi.org/classifiers/).\n\n# Assumptions and Design Considerations\n\nA priority for `maggtomic` is agility. The system must be extensible, with little impedance, to ongoing\nintroduction of a wide variety of data sources and sinks, all of which need to be findable, accessible,\ninteroperable, and reusable ([FAIR](https://doi.org/10.1038/sdata.2016.18)).\n\nThe [Datomic information model](https://www.infoq.com/articles/Datomic-Information-Model/) facilitates\nsuch agility via its singular, universal relation. It extends the W3C standard\nResource Description Framework ([RDF](https://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/)) information\nmodel, which was designed to facilitate interoperability of distributed data,\nwith minimal annotation to support ACID transactions. These transactions are reified as durable entities and thus\n may be annotated with provenance, enabling historical auditing and qualified reproducibility. Each and\n every fact-as-of-now (a so-called *datom*) is recorded as a 5-tuple: an RDF triple of entity-attribute-value,\n a transaction id (annotated with\n the transaction wall time as a separate fact), and whether the fact is an assertion or retraction.\n\n## Choosing MongoDB and Python\n\nTo implement the Datomic information model in an open-source system that facilitates agility\nfor the motivating near-term use case -- supporting the NMDC pilot project -- the most important operational\nconsiderations are familiarity and manageability (see: familiarity) with the chosen technology. `maggtomic`\nchooses MongoDB. Why? \n- Much of the infrastructural support for NMDC is located at two U.S. Dept. of Energy (DOE)\nuser facilities: Joint Genome Institute (JGI) and National Energy Research Scientific Computing Center (NERSC).\nThe JGI Archive and Metadata Organizer (JAMO), which in turn uses NERSC hardware and staff support,\nmanages user-facing metadata with MongoDB.\n- Other large user-facing facilities use MongoDB for (meta)data management through NERSC,\nsuch as the Advanced Light Source (ALS) user facility and the\nMaterials Project ([MP](https://materialsproject.org/)).\n- Another large project with a focus on biological metadata management, the\nCenter for Expanded Data Annotation and Retrieval (CEDAR),\nuses MongoDB [as a metadata repository](https://doi.org/10.1093/database/baz059).\n\nSo, there is strong operational familiarity among relevant stakeholders both at the level of infrastructure\nsupport and of suitability for scientific-domain modeling. But what about system features necessary to\nsupport adequate performance of the Datomic information model? Firstly, `maggtomic` is intended to support\nthe needs of a pilot project, so *adequate* is an important qualifier on expected performance. Secondly, there\nare several features of MongoDB, and choices for configuration, that help address performance concerns:\n- *redundant indexing to support a variety of access patterns*: Datomic redundantly stores all data in at\nleast 4 sort orders, including one index that covers a subset of datoms to support reverse attribute lookup. This\nredundancy is to flexibly support key-value-store-oriented, row-oriented, column-oriented, document-oriented,\nand graph-oriented access patterns in the same system.\nFor this functionality, MongoDB supports multiple (covering) compound indexes, and partial indexes,\non a collection.\n- *compression*: Because (a) all data is stored redundantly in each of several indexes, and (b) all data is\nimmutable (accumulate-only, great for historical auditing and qualified reproducibility), Datomic index segments\nare highly compressed. With the MongoDB (default) WiredTiger storage engine, compression is supported for all\ncollections and indexes, with different options to trade off higher compression rates versus CPU usage. The\n`zstd` library available in MongoDB 4.2 seems appropriate here, with a higher compression rate than the default\n`snappy` option and lower CPU usage (and also higher compression rate) than the `zlib` option (previously the\nonly built-in alternative to `snappy`). Furthermore, indexes for WiredTiger collection are prefix-compressed\nby default: queries against an index, including covering queries, operate directly on the compressed index --\ni.e., it remains compressed in RAM.\n- *fixed-space identifiers rather than redundant string storage*: A separate mechanism for space reduction in Datomic\nis the storage of\nentity references as numbers rather than storing larger string values. This is particularly important when\nusing the distributed-data model of RDF and thus using fully qualified names. MongoDB supports this space reduction\nstrategy, either via the built-in 12-byte ObjectId reference type, or via an alternative strategy such as\n[Crockford's Base32](https://www.crockford.com/base32.html) for deserializable-for-humans numerical entity IDs.\n- *transactions*: A performance concern in the sense that losing data is poor performance (!). MongoDB supports\nmulti-document transactions as of 4.0 (and across a sharded deployment as of 4.2), and configurable write- and\nread-concern levels.\n\nThere is also the matter of supporting analogues to Datomic schema, query, and\ntransaction functions, all of which in turn support effective and productive interaction with the underlying\ninformation model. `maggtomic` chooses Python as the language for client interfaces, as this language\nis in heavy use by stakeholders.\n- For schema support, rather than translate the ad hoc vocabulary used in\nDatomic, `maggtomic` aims to support a subset of the RDF-based W3C Shapes Constraint Language\n([SHACL](https://www.w3.org/TR/shacl/)) standard, which admittedly was only finalized as a standard in 2017,\nwhereas Datomic schema was launched earlier. Crucially, Python tooling such as\n[pySHACL](https://github.com/RDFLib/pySHACL) exists to validate SHACL shape graphs against data graphs.\nVarious SHACL node shapes can be checked -- these are analogous to JSON Schema documents, with the\nadvantage of structural sharing-by-reference of SHACL property shapes, whereas the equivalent of\nproperty shapes need to be restated for each JSON Schema document. Through this mechanism, for example,\na metadata submission can conform to multiple \"templates\", and suggestions can be derived to bring a\nsubmission to compliance with one or more templates not initially considered by a submitter.\n- For query, `maggtomic` aims to leverage the expressiveness of the MongoDB query language and the MongoDB\naggregation pipeline to provide a query interface similar in appearance and composability to Datomic's\nvariant of datalog.\n- For transaction functions, `maggtomic` aims to provide Python functions that return e.g. lists of\ndictionaries that correspond to tiny MongoDB documents as new datoms, MongoDB aggregation pipeline stages, etc.\nModulo performance considerations, transaction functions or query predicates may be arbitrary Python functions,\nas their equivalents may be arbitrary Clojure functions in Datomic, which would manifest e.g. as interruptions\nof a MongoDB aggragation pipeline.\n\nCertainly, not all of the above things need to be implemented prior to productive evaluative use of an\nalpha version of `maggtomic`, but it's important to consider longer-term ramifications of choosing Python\nand MongoDB to implement\n([an ad hoc, informally-specified, bug-ridden, slow implementation of half of](https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule)) the commercial Datomic offering,\neven if one knows the motivating use case is for agility in the context\nof a pilot system and thus one must\n[plan to throw one away; you will, anyhow.](https://www.tbray.org/ongoing/When/200x/2008/08/22/Build-One-to-Throw-Away)\n\nFinally, `maggtomic` aims to provide interoperability among data sources and\nsinks via translation between JSON-LD serializations (as JSON is a familiar\nformat for stakeholders) and the RDF graphs corresponding to values of the\n`maggtomic` database as-of given times (and thus as a set of\nentity-attribute-value tuples for a given filtration of transactions). Again,\nPython tooling for this translation is crucial, and e.g. the\n[pyLD](https://github.com/digitalbazaar/pyld) library is a JSON-LD processor\nthat supports necessary operations such as expansion+flattening --\ncontext-annotated JSON-LD to RDF -- and framing(+compacting) -- RDF to\ncontext-annotated JSON-LD, which can leverage specs, e.g. SHACL shape-graph\nschemas and ontologies, installed as facts-as-of-now themselves in the database.\n\nDataflow may be handled via \"builder\" ETL processes as with the Materials\nProject's [maggma](https://github.com/materialsproject/maggma) system. Though\ncurrently out of scope for the near-term, it may be possible to construct a\n[timely dataflow](https://timelydataflow.github.io/timely-dataflow/) system to\nsupport adequately-performant interactive queries of the knowledge graph\nembodied by a `maggtomic` database. The [tuple space\nmodel](https://software-carpentry.org/blog/2011/03/tuple-spaces-or-good-ideas-dont-always-win.html)\n(e.g. [Linda](https://www.inf.ed.ac.uk/teaching/courses/ppls/linda.pdf)) of\nparallel programming may also be fruitful here.\n\nFor Web API support for metadata submission and search/retrieval,\n`maggtomic` aims to include a [FastAPI](https://fastapi.tiangolo.com/) server module. For browser-based\nmetadata submission and basic search/retrieval, `maggtomic` aims to include a (authentication-enabled)\nstatic-site frontend that connects to the Web API.\n\n# Breadboard for user interface\n\nBelow is a\n[breadboard](https://basecamp.com/shapeup/1.3-chapter-04#breadboarding) sketch\nfor the `maggtomic` user interface (UI). Each *place* has *affordances*, and the\n*connection lines* show how affordances take a user from place to place. In\naddition, here each place represents an entity, and the breadboard doubles as an\nentity relationship diagram (ERD) with relationship multiplicities labeled on\nthe solid edges between entities. Examples: a *context* associates with zero or\nmore (\"0..n\") *datasets*, a *query* associates with one and only one (\"1\")\n*context*, etc.\n\n![breadboard for user interface](design/breadboard-erd.png)\n\nEach of these entities are described in more detail below as part of the use\ncases illustrated by sequence diagrams.\n\nFurthermore, the choice of entities and their relationships was inspired by\nthe [data.world](https://data.world/) catalog service.\n\n# Sequence diagrams for use-case \"happy paths\"\n\nBelow are sequence diagrams for a core set of use cases. Each diagram sketches\nout a \"happy path\" and can be used as a checklist for a\n[spike](https://wiki.c2.com/?SpikeSolution), where each arrow in a diagram\ncorresponds to one checklist item.\n\n## Create new context\n\nA *context* can be likened to a \"project\" or \"analysis\", in that it serves as a\nmechanism to collect information, ask questions about it, and communicate\nanswers. It's called a context because (a) it isn't limited to one focused\nactivity with a beginning, middle, and end, as is the case for a project or\nanalysis; and (b) it's intent is similar to that of a [JSON-LD\ncontext](https://www.w3.org/TR/json-ld11/#the-context):\n\n> When two people communicate with one another, the conversation takes place in\na shared environment, typically called \"the context of the conversation\". This\nshared context allows the individuals to use shortcut terms, like the first name\nof a mutual friend, to communicate more quickly but without losing accuracy. A\ncontext in JSON-LD works in the same way. It allows two applications to use\nshortcut terms to communicate with one another more efficiently, but without\nlosing accuracy.\n\nSpecifically, a `maggtomic` context is used to map terms and relationships\namong datasets linked to the context. The below diagram shows a user story for\ncreating a new context.\n\n![Create new context](design/sequence-diagrams/Create%20new%20context.png)\n\n## Import new dataset\n\nA *dataset* is an RDF graph, i.e. a set of entity-attribute-value pairs for\nwhich all entities and attributes are URIs, and values are either URIs or data\nliterals (strings, numbers, etc.). A dataset can be used in many\ncontexts, and a context can link to many datasets.\n\nTo import a new dataset into *maggtomic*, a user does so from a working context;\nother contexts may later also link to and thus use the dataset. A dataset may be\nuploaded, or HTTP endpoint information can be provided. For example, a URL can\nbe entered for a simple GET request. More complex endpoint registration could be\nsupported, such as using a POST request, providing authentication and other\nheaders, asking that the dataset be re-fetched via the endpoint periodically,\netc.\n\nA user can import a dataset in non-RDF form, for example as a collection of TSV\ntables or as a collection of JSON documents. In this case, the dataset will be\n*atomized*, that is, destructured to atomic statements of the form\nentity-attribute-value. URIs for a newly atomized dataset's entities and\nattributes are prefixed using the user's `maggtomic` user/organization name and\nthe context's slug, e.g.\n`http://maggtomic-host.example.com/awesomeorg/my-great-context`, analogous to\nthe namespacing of e.g. GitHub code repositories.\n\nThe below diagram shows a user story for importing a new dataset.\n\n![Import new dataset](design/sequence-diagrams/Import%20new%20dataset.png)\n\n## Import new spec\n\nAn *spec* (for \"specification\") is a power-up for datasets that increases their\n<a href=\"https://doi.org/10.1038/sdata.2016.18\">FAIR</a>ness. A spec is also an\nRDF graph, and can represent something to be \"applied\" to a dataset, meaning\nadditional facts are inferred from the dataset in this context -- that is, after\nverifying that the dataset doesn't contain facts that contradict with the spec.\nA spec of this kind is also called an *ontology*.\n\nA spec can also be something a dataset is validated against for conformance,\ne.g. a *schema* (called a *shape* in SHACL). A dataset needn't be conformant to\nall such linked specs in a context; rather, linking them can help the\n`maggtomic` system generate suggested mappings. Each context has a \"local\" spec\nwhere a user can use the namespace of the context to manage a controlled\nvocabulary (dictionary of terms) and mappings among terms. In this way, a user\ncan ensure dataset conformance to specs of interest.\n\nThe notion of \"spec\" here is inspired by that of\n[clojure.spec](https://clojure.org/about/spec): represented just like datasets,\nand more dynamic and flexible than a static system of types.\n\nA central design goal of `maggtomic` is to facilitate the mapping of imported\ndatasets to shared specs. Thus, a user should be able to enter a context, import\ntheir dataset, import a spec shared with them by a colleague (for example, the\n[NMDC Schema](https://microbiomedata.github.io/nmdc-metadata/schema/)), and\nestablish mappings among terms. If another user has already imported a spec of\ninterest, that spec may be linked from other contexts.\n\nThe below diagram shows a user story for importing a new spec. The flow is\nsimilar to that for importing a new dataset, but in this case no atomization is\nneeded, as specs are presumed to be imported as RDF-serialized.\n\n![Import new spec](design/sequence-diagrams/Import%20new%20spec.png)\n\n## Suggest mappings\n\nTo support queries across datasets, a user must ensure mappings among terms in\ntheir working context's linked datasets and spec (unless the datasets are\nalready linked through use of the same terms (URIs) for the same concepts -- the\ndream of Linked Data!). Imagine a simple context of one dataset and one\nspec: a user has imported a new dataset they wish to share with the\ncommunity, and has linked to a previously imported recommended spec from the\ncontext where they imported their dataset. Now what?\n\nA user can request suggestions for mappings from the `maggtomic` system. First,\nthe system should ensure that all inferences have been determined and persisted\ngiven the context's linked datasets and specs. Inferences are\nentity-attribute-value statements entailed by applying user-supplied ontology\nspecs to user-supplied data. In other words, *inferences* are mappings that are\nalready unambiguously implied by what the user supplied, so it would be\nredundant to offer these mappings as *suggestions* to be confirmed for explicit\ninclusion by the user in their context's local spec.\n\nThe below diagram shows a user story for requesting suggestions for mappings\nto apply to a context's local spec.\n\n![Suggest mappings](design/sequence-diagrams/Suggest%20mappings.png)\n\n## Apply mappings\n\nA user can curate a context to provide a data dictionary of terms and mappings\nthat empower and ease the construction of readable queries across datasets.\nMappings may be suggested by `maggtomic`, or they may be entered manually,\nin either case applied by a user.\n\nBecause datasets and specs are both represented as RDF, a user\ncan update a dataset to include spec statements as part of the dataset\nitself, making it more readily interoperable. Hooray for Linked Data!\n\nThe below diagram shows a user story for applying mappings to a context's\nlocal spec. The validation step ensures consistency with the\nentailments of linked specs.\n\n![Apply mappings](design/sequence-diagrams/Apply%20mappings.png)\n\n## Create query\n\nThe standard protocol and language for queries across RDF datasets is\n[SPARQL](https://www.w3.org/TR/2013/REC-sparql11-overview-20130321/), for which\nprefix mappings enable readable queries given URI terms. An alternative query\ninterface/language may be helpful, in particular one that is based on data\nliterals rather than strings, as is the case with Datalog's Clojure/EDN-based\ndatalog. [Eve](http://docs.witheve.com/v0.3/syntaxreference/) syntax is another\ndatalog variant that may be worth investigating. For `maggtomic`, the JSON-based\nquery and aggregation languages of MongoDB may prove fruitful for adaptation.\n\nA query is labeled with a natural-language question, to facilitate user\nnavigation and search for relevant queries that lead the user to relevant\ncontexts and datasets.\n\nThe below diagram shows a user story for saving and running a query across one\nor more datasets of a working context.\n\n\n![Create query](design/sequence-diagrams/Create%20query.png)\n\n## Create insight\n\nAn insight is a lightweight annotation for a context that communicates some\nresult and its significance. It is a \"post\" by a user, with text and perhaps\nincluded visualizations in the form of e.g. PNG images. Ideally, an insight\nlinks to one or more specific queries of the context that support the insight.\n\nNo sequence diagram is shown yet for creating an insight because this is not\nconsidered a core use case for a minimum viable product (MVP) demo of\n`maggtomic`. Thus, it is not crucial at this time to sketch out a checklist for\na spike that demonstrates this feature.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/polyneme/maggtomic",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maggtomic",
    "package_url": "https://pypi.org/project/maggtomic/",
    "platform": "",
    "project_url": "https://pypi.org/project/maggtomic/",
    "project_urls": {
      "Homepage": "https://github.com/polyneme/maggtomic"
    },
    "release_url": "https://pypi.org/project/maggtomic/0.1.6/",
    "requires_dist": [
      "base32-lib",
      "boto3",
      "pydash",
      "pymongo",
      "python-dotenv",
      "toolz"
    ],
    "requires_python": ">=3.6",
    "summary": "Metadata aggregation using the Datomic information model",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9234823,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b86ca1c66a741b1e2db0d7777e2ce769a102292bb9b64985fe837193f3272374",
          "md5": "1c5757ed833695ec3d38f1b3505e4641",
          "sha256": "db6d624446c787b1adc1133111120bcb7b496bd6cf602a8f492418c572dbeb58"
        },
        "downloads": -1,
        "filename": "maggtomic-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c5757ed833695ec3d38f1b3505e4641",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14464,
        "upload_time": "2020-11-11T20:27:45",
        "upload_time_iso_8601": "2020-11-11T20:27:45.354436Z",
        "url": "https://files.pythonhosted.org/packages/b8/6c/a1c66a741b1e2db0d7777e2ce769a102292bb9b64985fe837193f3272374/maggtomic-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce0eb122ce4883ac662eae174b78bd812d320e7f258225cce6f6a7f6352a0918",
          "md5": "9ba2cdf2d4d5e90fca7c7eb23d1571e4",
          "sha256": "8cd191342d43257f0dbe35d352dbdea718b198455b91432608c96acd73dd60a9"
        },
        "downloads": -1,
        "filename": "maggtomic-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9ba2cdf2d4d5e90fca7c7eb23d1571e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 940022,
        "upload_time": "2020-11-11T20:27:46",
        "upload_time_iso_8601": "2020-11-11T20:27:46.699515Z",
        "url": "https://files.pythonhosted.org/packages/ce/0e/b122ce4883ac662eae174b78bd812d320e7f258225cce6f6a7f6352a0918/maggtomic-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9ae510eec49ae7e008f05cb789d121cefba97317401148b690cb84c4a6f1db9",
          "md5": "8de36073161cc995aafb4faa2ff84321",
          "sha256": "abb8d3fb37bda8e4ff63bde2c272cc17f06202fb827e99f1dcbab5b4155945b5"
        },
        "downloads": -1,
        "filename": "maggtomic-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8de36073161cc995aafb4faa2ff84321",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14600,
        "upload_time": "2020-11-11T20:39:29",
        "upload_time_iso_8601": "2020-11-11T20:39:29.483771Z",
        "url": "https://files.pythonhosted.org/packages/d9/ae/510eec49ae7e008f05cb789d121cefba97317401148b690cb84c4a6f1db9/maggtomic-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45ae22244d4c6eaa0b4cdcb7a9a04745cbc0f9eefd2956578bb99d0e1897f7db",
          "md5": "0e08666c58736933283243f9f26538b7",
          "sha256": "ee4e37912efbda946a6b0b77b1861c8b0dd35ec967a07126c92672e7c554488c"
        },
        "downloads": -1,
        "filename": "maggtomic-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0e08666c58736933283243f9f26538b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 940269,
        "upload_time": "2020-11-11T20:39:30",
        "upload_time_iso_8601": "2020-11-11T20:39:30.823672Z",
        "url": "https://files.pythonhosted.org/packages/45/ae/22244d4c6eaa0b4cdcb7a9a04745cbc0f9eefd2956578bb99d0e1897f7db/maggtomic-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "685ff68bd77e10deb97f753e69f2d5e3826a2d2e87747da1d0aab05ceeea5d56",
          "md5": "428ee45d2e28095e522e1e6a1b3364c6",
          "sha256": "f025a185c203c0f8c0bbf748fc16ec5ef9750962906fb5228c82f059fe6d7e9f"
        },
        "downloads": -1,
        "filename": "maggtomic-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "428ee45d2e28095e522e1e6a1b3364c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18552,
        "upload_time": "2021-01-17T19:47:49",
        "upload_time_iso_8601": "2021-01-17T19:47:49.460525Z",
        "url": "https://files.pythonhosted.org/packages/68/5f/f68bd77e10deb97f753e69f2d5e3826a2d2e87747da1d0aab05ceeea5d56/maggtomic-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "113929a0befba7520472a01551d90d0719cb4c91508ead9a82af79977db6075f",
          "md5": "e31012039fd421f5fd00bad6f1ec1f64",
          "sha256": "ccde9865a55a37ddcbca54adf51d1f054981f6e7ef0f78a787d7e23ae73024f3"
        },
        "downloads": -1,
        "filename": "maggtomic-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e31012039fd421f5fd00bad6f1ec1f64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 945131,
        "upload_time": "2021-01-17T19:47:50",
        "upload_time_iso_8601": "2021-01-17T19:47:50.833228Z",
        "url": "https://files.pythonhosted.org/packages/11/39/29a0befba7520472a01551d90d0719cb4c91508ead9a82af79977db6075f/maggtomic-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad4ea3f99f64de4f3f75a0a89e773563dd46ce2c8d6e243e4f7b28d13e6f6bb8",
          "md5": "4b36d09f845f97e61dcea6ea8f86bab1",
          "sha256": "7ea3ee63fbe69e1343cf8ad3e2b6d2703a678b836e7d91b0f5753598ae8c39a4"
        },
        "downloads": -1,
        "filename": "maggtomic-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b36d09f845f97e61dcea6ea8f86bab1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22305,
        "upload_time": "2021-01-21T17:17:56",
        "upload_time_iso_8601": "2021-01-21T17:17:56.293857Z",
        "url": "https://files.pythonhosted.org/packages/ad/4e/a3f99f64de4f3f75a0a89e773563dd46ce2c8d6e243e4f7b28d13e6f6bb8/maggtomic-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cce53498808e4fb42d150160736339337f3c7338ebcf3f19a1c2a82e4dd0c3b0",
          "md5": "dccaaee3ac1535f65753fb38b3bb45e4",
          "sha256": "9637069c00a95a627e57e50d0ee59ca775167e809e700457b69b0fb356a5da2e"
        },
        "downloads": -1,
        "filename": "maggtomic-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "dccaaee3ac1535f65753fb38b3bb45e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 956379,
        "upload_time": "2021-01-21T17:17:57",
        "upload_time_iso_8601": "2021-01-21T17:17:57.255233Z",
        "url": "https://files.pythonhosted.org/packages/cc/e5/3498808e4fb42d150160736339337f3c7338ebcf3f19a1c2a82e4dd0c3b0/maggtomic-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e016aabc81ea4bd71f532b9ee96c7bb390e992325c8e31675ea5bca78550b466",
          "md5": "97f56a5742f0d760f846fb1038247f12",
          "sha256": "97e0331aabb644be80d953c13c0270f6b15460cd53d2da32dba22e9384f6fd58"
        },
        "downloads": -1,
        "filename": "maggtomic-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97f56a5742f0d760f846fb1038247f12",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22628,
        "upload_time": "2021-01-26T15:53:50",
        "upload_time_iso_8601": "2021-01-26T15:53:50.446963Z",
        "url": "https://files.pythonhosted.org/packages/e0/16/aabc81ea4bd71f532b9ee96c7bb390e992325c8e31675ea5bca78550b466/maggtomic-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "260bee364e985b12effea40290fe793d151cb2eb3e396e107b185ca54948d1cc",
          "md5": "ca2b593defc9bb629a816489a0a7c3d7",
          "sha256": "698449bbae3459dc087b9058210dd2cd23870a278e165a7cf7891c2314313585"
        },
        "downloads": -1,
        "filename": "maggtomic-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ca2b593defc9bb629a816489a0a7c3d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 956700,
        "upload_time": "2021-01-26T15:53:51",
        "upload_time_iso_8601": "2021-01-26T15:53:51.322011Z",
        "url": "https://files.pythonhosted.org/packages/26/0b/ee364e985b12effea40290fe793d151cb2eb3e396e107b185ca54948d1cc/maggtomic-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e016aabc81ea4bd71f532b9ee96c7bb390e992325c8e31675ea5bca78550b466",
        "md5": "97f56a5742f0d760f846fb1038247f12",
        "sha256": "97e0331aabb644be80d953c13c0270f6b15460cd53d2da32dba22e9384f6fd58"
      },
      "downloads": -1,
      "filename": "maggtomic-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "97f56a5742f0d760f846fb1038247f12",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22628,
      "upload_time": "2021-01-26T15:53:50",
      "upload_time_iso_8601": "2021-01-26T15:53:50.446963Z",
      "url": "https://files.pythonhosted.org/packages/e0/16/aabc81ea4bd71f532b9ee96c7bb390e992325c8e31675ea5bca78550b466/maggtomic-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "260bee364e985b12effea40290fe793d151cb2eb3e396e107b185ca54948d1cc",
        "md5": "ca2b593defc9bb629a816489a0a7c3d7",
        "sha256": "698449bbae3459dc087b9058210dd2cd23870a278e165a7cf7891c2314313585"
      },
      "downloads": -1,
      "filename": "maggtomic-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "ca2b593defc9bb629a816489a0a7c3d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 956700,
      "upload_time": "2021-01-26T15:53:51",
      "upload_time_iso_8601": "2021-01-26T15:53:51.322011Z",
      "url": "https://files.pythonhosted.org/packages/26/0b/ee364e985b12effea40290fe793d151cb2eb3e396e107b185ca54948d1cc/maggtomic-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}