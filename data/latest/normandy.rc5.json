{
  "info": {
    "author": "Eloy Chang",
    "author_email": "echang.epsilondl@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Normandy\n\nv0.3\nby [Epsilon DataLabs](https://echang1802.github.io/epsilon.github.io)\n\n----------------------------------------------------------------\n\nNormandy is a python framework for data pipelines, which main objective is standardizing your team code and provide a data treatment methodology flexible to your team needs.\n\n----------------------------------------------------------------\n\n## Installing Normandy\n\nNormandy is available via PIP using:\n\n```\npip install normandy\n```\n\n----------------------------------------------------------------\n\n## Features\n\nWith Normandy you can define your data pipeline system and within it several _data flows_ with each one use or produce different kind of data.\n\nFirst let's explain the basic Normandy terminology:\n\n* **Flow**: Is a complete data process (ETL), you may have any number of _flows_ on a Normandy project and each one may or may not share code or data.\n\n* **Steps**: A Normandy _flow_ is composed by any number of _steps_, this _steps_ are one or more _processes_, the _steps_ works as a guideline of priorities, _processes_ from one _step_ cannot start before the _processes_ of the previous _step_ has ended.\n\n* **Processes**: This are the lower level of granularity in Normandy, each _process_ belong to a _step_, and all _processes_ from one _step_ are processed in parallel, which mean that they can share the input data but you must be cautious that each _process_ have different outputs.\n\nSo, Normandy let you:\n\n* Create multiple data flows, and share code between then avoiding repeat code.\n\n* Parallel processing at _process_ level, allowing you, for example, to read from several sources or produce several outputs from the same data set simultaneously.\n\n* A standardized form of coding.\n\n* A clean and understandable data pipeline structure.\n\n* Easily share parameters between processes.\n\n----------------------------------------------------------------\n\n## Creating a Normandy project\n\nNormandy offer a easy files structure, nevertheless, you may create it using the `create project` command with the path where to create the project.\n\n```\nnormandy --create-project -file-path write/project/path\n```\n\nIf the given path do not exist Normandy will create it.\n\nThis command will also create a template of the `pipeline_conf.yml` file used to configure Normandy behavior.\n\n## How to use Normandy\n\nThe Normandy behavior is configured in the `pipeline_conf.yml` file, it has two sections:\n\n* flows: In this section is defined every aspect of each flow you want to use.\n\n* confs: Here are settled general configurations like environments.\n\n### Defining Flows\n\nEach flow has two options that need to be settled, those are tags, and steps.\n\nIn the tags sections you must specify with which tags the flow will run, those work to carefully select which flows you want to run in each command.\n\nIf several flows have the same tag, all flows with that tag will run when the tag is selected, and they will run in the order they are defined on the `pipeline_conf.yml` file.\n\nAt least one flow should have the tag _default_, this flow will run when no tags are selected.\n\nTo set the steps is enough to list then with the process they should run.\n\nHere may be defined global parameters as well, this parameters are available at all process.\n\nA configured flow, should looks like:\n\n```\nmy_flow:\n  tags:\n    - default\n    - sr1\n  params:\n    version: Andromeda\n  steps:\n    read:\n      - read_file\n    process:\n      - process_data\n    finish:\n      - prints\n```\n\n### Defining Steps:\n\nA step is a individual process or group of processes from a pipeline, this are used to secure order, each process on a step must end before the processes of the next step start.\n\nA step defined in the `pipeline_conf.yml` is a reference to a sub folder with the same name on the `pipeline` folder, by example, the previously defined flow has three steps: read, process and finish, then the pipeline folder should look like:\n\n- pipeline\n  - read\n    - read_file.py\n  - process\n    - process_data.py\n  - finish\n    - prints.py\n\nSteps have no further configurations excepts the process within it, note that you may have several process (python files) on each step, but if you donÂ´t listed on the step definition it will not run, this allow you to create several flows using the same step, but the step itself in each flow may be different if different processes are called.  \n\n### Defining Processes\n\nThe processes are the smaller unit of Normandy pipelines, and here is where your code must be in.\n\nYou may define a process on the `pipeline_conf.yml` file on two ways:\n\n* As a list: Use this method if you do not want to add any configuration out of the defaults, you must use the list version even if the step has just one process.\n\n* As a dictionary: With this method you can make more in depth configurations to the specific process, the allowed configurations are:\n\n  * avoid_tags: With this setup you can told Normandy to do not run this process f a specific tags has been use, this is very useful if you have several flows very similar between then then you can define just one flow and use the tags to shape the flow.\n\n  * error_tolerance: If your process may fail and that does not affect the rest of the data flow, you may activate this feature, so, in case the process fail, the flow would still run.\n\n  * params: If your process need some extra parameters you may listed here as a dictionary, then inside the process you can invoke them as `params[\"params_name\"]`. If the same parameter is defined globally and at a process the last one would be chosen.\n\n  * iter_param: this help you if you need to run a process several time but with a different value of a parameters, you must past the name and values to take. Note: this would run as several different processes of the same steps, this mean they will run in parallel.\n\nNote that if you want to use one of the special setups on one process of a step, you must specify all others process as a dictionary too, even if in one of the processes no special setup is used, on this case the setup `ignore` is used.\n\nA complete example:\n\n```\nmy_flow:\n  tags:\n    - default\n    - salarians\n  params:\n    version: Andromeda\n  steps:\n    read:\n      - read_file\n      - read_database\n    process:\n      main_processing:\n        avoid_tags:\n          - hammerhead\n        params:\n          limit: 100\n          flag: True\n          version: Trilogy\n      side_processing:\n        avoid_tags:\n          - Shepard\n        error_tolerance: True\n        iter_param:\n          name: locations\n          values:\n            - Thessia\n            - SurKesh\n            - Rannoch\n            - Tuchanka\n            - Palaven\n    finish:\n      write_data:\n        - ignore\n      backup_writing:\n        error_tolerance: True\n```\n\n### Pipeline Configuration\n\nThe main objective of this section is to configure your pipeline settings, like environment distinctions.\n\nYou are free to make all configurations you need over the environment section of the configuration file, just must use the keyword \"envs\", in the example below the read and write folder are distinguished based on the environment.\n\nOther settings are:\n\n* path: This is the project path, and must be defined.\n\n* threads: Maximum number of threads allowed to run simultaneously, this is used in case a step have several processes, the default value is 8.  \n\n* log_level: Level of detail in log files, may be info, warnings or erros, the default value is info.\n\n```\nconfs:\n  path: your/project/path\n  threads: 4\n  log_level: errors\n  envs:\n    dev:\n      read:\n        data/dev/raw/\n      write:\n        data/dev/processed/\n    prod:\n      read:\n        data/prod/raw/\n      write:\n        data/prod/processed\n```\n\n### Writing a process\n\nAs mentioned before, each process listed on the `pipeline_conf.yml` file is making a reference to a python file inside the correspondent step folder, whatever, this file must have defined inside it a process function which need to parameter `pipe` and `log`.\n\nPipe is a Normandy pipeline object,  at the stage is only function is to use the environment configurations defined on `pipeline_conf.yml` , to get this use the `get_env_confs()` method, which returns a dictionary with the mentioned configurations.\n\nlog is a Normandy logger object, the main function is to easily log your code.\n\nProcess snippet:\n\n```\nfrom normandy.engine.variables_storage import variables_storage\n\ndef process(pipe, log, params):\n    # Configurations\n    env_confs = pipe.get_confs()\n    var_str = variables_storage()\n    log.info(\"Configuration ready\")\n\n    # Code here your process\n    # Use params as any dict ej:\n    # flag = params[\"flag\"]\n    # ...\n\n    return\n```\n\n#### The Normandy logger\n\nNormandy provide a fully settled logger.\n\nEach flow execution will have a separated log folder inside the log folder of the project root directory, the folder would be called as `{flow_name}_{execution_datetime}`, inside it a bunch of file would be created, one file for each Normandy object, with the intention to let you easily get in depth logs or just a general one. The main flow log would have the logs of each of the children's objects, this means, in the main log would be the flow logs, the steps logs and even the processes logs.\n\nThe Normandy logger have three basic methods to use:\n\n* info\n\n* warning\n\n* error\n\nEach one just receive one parameter which is the message you want to log.\n\n#### The Normandy Variable Storage\n\nNormandy also provide a variable storage object to let you share the data between processes.\n\nIt's very easily to use, with just two methods:\n\n* get: It let you use a previously stored variable\n\n* update: It let you store a new variable or overwrite it if it already exists.\n\nA usage example:\n\n```\nimport pandas as pd\nfrom normandy.engine.variables_storage import variables_storage\n\ndef process(pipe, log, params):\n    # Get confs\n    read_path = pipe.get_env_confs()[\"read_path\"]\n    var_str = variables_storage()\n    log.info(\"Configuration ready\")\n\n    try:\n      main_df = pd.read_csv(f\"{read_path}{params[\"filename\"]}.csv\")\n    except Exception as e:\n      log.error(e)\n      raise e\n    log.info(\"Data read\")\n\n    var_str.update(\"main_df\", main_df)\n    log.info(\"Data stored\")\n\n    return\n```\n\n#### The Normandy Modules Importer\n\nIn case user defined modules are needed, they can be loaded using the `modules_importer` class, this class have the `load_module` method, which load the full selected module inside the instance, it's important to take into account that each instance of the class may have just one module loaded at a time.\n\nThe functions should be on the `tools` folder on the root project directory.\n\nA full project directory should looks like:\n- project_name/\n  - logs/\n  - pipeline/\n    - my_first_step/\n      - my_process_1.py\n      - my_process_2.py\n    - my_second_step/\n      - my_process3.py\n      - my_process4.py\n      - my_process5.py\n    - pipeline_conf.yml\n  - temp/\n  - tools/\n    - my_functions.py\n\nIf a function named `my_function` is defined on `my_functions.py` file it can be use following this example:\n\n```\nfrom normandy.engine.tools import modules_importer\n\ndef process(pipe, log, params):\n\n    my_module = modules_importer(pipe).load_module(\"my_functions\")\n    my_module.module.my_function()\n\n    return\n```\n\n### How to run it\n\nTo run the Normandy pipeline use the command `run-pipeline` as below from the project directory:\n\n```\nnormandy --run-pipeline\n```\n\nWith this command the _default_ flow would run on the defined _dev_ environment.\n\nThe `run-pipeline` has several arguments as:\n\n* tags: Specify any number of tags.\n\n* env: Specify the environment to run on.\n\n* params: Used to overwrite or define global parameters on all running flows.\n\n* log level: Overwrite the log_level setting.\n\n* threads: Overwrite the maximum number of threads setting.\n\nA complete example:\n\n ```\nnormandy --run-pipeline -tags my_tag -tags sr2 -env prod -param version Trilogy -log-level warnings -threads 16\n ```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/echang1802/normandy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "normandy",
    "package_url": "https://pypi.org/project/normandy/",
    "platform": "",
    "project_url": "https://pypi.org/project/normandy/",
    "project_urls": {
      "Homepage": "https://github.com/echang1802/normandy"
    },
    "release_url": "https://pypi.org/project/normandy/0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A data pipeline framework.",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11278521,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "371e76083ffa800b06179980faf8626ffa9bf51458b787af5b06c8d848e98f59",
          "md5": "c918242dda4b38499dc597d48be4de6b",
          "sha256": "3024f6538d177cc1d32ce0f01fa9b4c628cb25db67031aa8363952311df670e2"
        },
        "downloads": -1,
        "filename": "normandy-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c918242dda4b38499dc597d48be4de6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6517,
        "upload_time": "2021-08-03T20:33:09",
        "upload_time_iso_8601": "2021-08-03T20:33:09.810712Z",
        "url": "https://files.pythonhosted.org/packages/37/1e/76083ffa800b06179980faf8626ffa9bf51458b787af5b06c8d848e98f59/normandy-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6844355cf482e63fb97af5bab62e818d215a15a0c042de2029d82a6dec2b7b19",
          "md5": "844a079f6a3cdd889d570e4832632a4a",
          "sha256": "2d77a3edec6d4181391a9823d87ad84448274dba4efa5f00dd2761d54732cc58"
        },
        "downloads": -1,
        "filename": "normandy-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "844a079f6a3cdd889d570e4832632a4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6622,
        "upload_time": "2021-08-03T20:33:11",
        "upload_time_iso_8601": "2021-08-03T20:33:11.446480Z",
        "url": "https://files.pythonhosted.org/packages/68/44/355cf482e63fb97af5bab62e818d215a15a0c042de2029d82a6dec2b7b19/normandy-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25747b92260d59ec24ba9523cf39d0fe771a8d1cda6a9152ca426351825b7317",
          "md5": "ddf2ac739ca8effce0ea77fdc24948e1",
          "sha256": "aa638117957cb0b14a3d46cfbcdba3980e408abbbd172b586c852988c0408c29"
        },
        "downloads": -1,
        "filename": "normandy-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ddf2ac739ca8effce0ea77fdc24948e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10337,
        "upload_time": "2021-08-04T18:58:54",
        "upload_time_iso_8601": "2021-08-04T18:58:54.187859Z",
        "url": "https://files.pythonhosted.org/packages/25/74/7b92260d59ec24ba9523cf39d0fe771a8d1cda6a9152ca426351825b7317/normandy-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b02cb1f022f008fe9b9ce31cba38abd6a3dfc1ebe313d581abcb320357ea37c0",
          "md5": "07441aa255d77471961d613f60286635",
          "sha256": "5ad3949743592bdf11671e06b1a3b9b0bb8c41e48068789c7e3b8edd36915b5b"
        },
        "downloads": -1,
        "filename": "normandy-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "07441aa255d77471961d613f60286635",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12499,
        "upload_time": "2021-08-04T18:58:55",
        "upload_time_iso_8601": "2021-08-04T18:58:55.552448Z",
        "url": "https://files.pythonhosted.org/packages/b0/2c/b1f022f008fe9b9ce31cba38abd6a3dfc1ebe313d581abcb320357ea37c0/normandy-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b6807d9e5a72c7a70e9416e578e7d52ca6ccbe3287e6257d618777c5a104142",
          "md5": "83a6c6eeaa3a1f21272ea948ed4bfd78",
          "sha256": "342eac28262fdbfb1a9e45ab9a2a4381ce7c497fa73293311b51ce1264a81365"
        },
        "downloads": -1,
        "filename": "normandy-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83a6c6eeaa3a1f21272ea948ed4bfd78",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10758,
        "upload_time": "2021-08-12T18:55:53",
        "upload_time_iso_8601": "2021-08-12T18:55:53.394111Z",
        "url": "https://files.pythonhosted.org/packages/3b/68/07d9e5a72c7a70e9416e578e7d52ca6ccbe3287e6257d618777c5a104142/normandy-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "647dcb61ea7ccd4aca590f830ee5f11842524d8768f9e33f9f66131a2dab580a",
          "md5": "fd6f75e39e13f18f5d16f9d0b1adec9c",
          "sha256": "56f38e3cd06841255321c7aa47faff7e1a15350d0862042973541837d455c9ce"
        },
        "downloads": -1,
        "filename": "normandy-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fd6f75e39e13f18f5d16f9d0b1adec9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13166,
        "upload_time": "2021-08-12T18:55:55",
        "upload_time_iso_8601": "2021-08-12T18:55:55.090245Z",
        "url": "https://files.pythonhosted.org/packages/64/7d/cb61ea7ccd4aca590f830ee5f11842524d8768f9e33f9f66131a2dab580a/normandy-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02a5c70f15f6b7ca3cf3940c5e23548c152118f9e3a899baa7e29d6c8cf00881",
          "md5": "03e8e6ea63b39d68c27504287fda1e10",
          "sha256": "a43b9a5f8ae784f73d49b58fd7ba7d86e696c4d5c79055bb916bf623dc56a5bd"
        },
        "downloads": -1,
        "filename": "normandy-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03e8e6ea63b39d68c27504287fda1e10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11520,
        "upload_time": "2021-08-17T12:34:56",
        "upload_time_iso_8601": "2021-08-17T12:34:56.994449Z",
        "url": "https://files.pythonhosted.org/packages/02/a5/c70f15f6b7ca3cf3940c5e23548c152118f9e3a899baa7e29d6c8cf00881/normandy-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f21f93f1bebda6a2e7afdac8e4173c7db74acb6303d4b8cf647caaa3be92429a",
          "md5": "412e9a969c51e88c6ad6f0fbb5b12e3e",
          "sha256": "1c188cf0e0b49f42054bed3d96d1aa0083d69af2bd31bdcd4fc64476e5a63846"
        },
        "downloads": -1,
        "filename": "normandy-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "412e9a969c51e88c6ad6f0fbb5b12e3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14257,
        "upload_time": "2021-08-17T12:34:58",
        "upload_time_iso_8601": "2021-08-17T12:34:58.193272Z",
        "url": "https://files.pythonhosted.org/packages/f2/1f/93f1bebda6a2e7afdac8e4173c7db74acb6303d4b8cf647caaa3be92429a/normandy-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4ac347e89429db144cad7464a25826f48ae1e7b9b595c0e460150c8c4716656",
          "md5": "d416d8bec811c20b7e0a58111df90d94",
          "sha256": "6ba5e85340e86bcc0a849ecac463eb510b47522db53fc41a817c45fcee88ec9d"
        },
        "downloads": -1,
        "filename": "normandy-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d416d8bec811c20b7e0a58111df90d94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12228,
        "upload_time": "2021-08-25T22:30:18",
        "upload_time_iso_8601": "2021-08-25T22:30:18.687770Z",
        "url": "https://files.pythonhosted.org/packages/e4/ac/347e89429db144cad7464a25826f48ae1e7b9b595c0e460150c8c4716656/normandy-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49b494c62b689ee4b122fde6382946c4c52495170239eccb2e3a0d7a6d931b11",
          "md5": "77aecc8a4335d2614a57313570450ad9",
          "sha256": "f3d87bffb93062d99711f2af741823301d9de683478476af2aefac9e569fe69c"
        },
        "downloads": -1,
        "filename": "normandy-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "77aecc8a4335d2614a57313570450ad9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15132,
        "upload_time": "2021-08-25T22:30:20",
        "upload_time_iso_8601": "2021-08-25T22:30:20.056530Z",
        "url": "https://files.pythonhosted.org/packages/49/b4/94c62b689ee4b122fde6382946c4c52495170239eccb2e3a0d7a6d931b11/normandy-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4ac347e89429db144cad7464a25826f48ae1e7b9b595c0e460150c8c4716656",
        "md5": "d416d8bec811c20b7e0a58111df90d94",
        "sha256": "6ba5e85340e86bcc0a849ecac463eb510b47522db53fc41a817c45fcee88ec9d"
      },
      "downloads": -1,
      "filename": "normandy-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d416d8bec811c20b7e0a58111df90d94",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12228,
      "upload_time": "2021-08-25T22:30:18",
      "upload_time_iso_8601": "2021-08-25T22:30:18.687770Z",
      "url": "https://files.pythonhosted.org/packages/e4/ac/347e89429db144cad7464a25826f48ae1e7b9b595c0e460150c8c4716656/normandy-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "49b494c62b689ee4b122fde6382946c4c52495170239eccb2e3a0d7a6d931b11",
        "md5": "77aecc8a4335d2614a57313570450ad9",
        "sha256": "f3d87bffb93062d99711f2af741823301d9de683478476af2aefac9e569fe69c"
      },
      "downloads": -1,
      "filename": "normandy-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "77aecc8a4335d2614a57313570450ad9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15132,
      "upload_time": "2021-08-25T22:30:20",
      "upload_time_iso_8601": "2021-08-25T22:30:20.056530Z",
      "url": "https://files.pythonhosted.org/packages/49/b4/94c62b689ee4b122fde6382946c4c52495170239eccb2e3a0d7a6d931b11/normandy-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}