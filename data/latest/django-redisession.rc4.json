{
  "info": {
    "author": "Li Meng",
    "author_email": "liokmkoil@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==================\nDjango Redisession\n==================\nA Redis-based Django session engine for django.contrib.sessions.\n\nThis engine supports storing session data as a Redis String, or distributing sessions to Redis hashs for more efficient usage of Redis storage(without much extra CPU cost on Redis server. Refs http://antirez.com/post/redis-weekly-update-7.html and http://redis.io/topics/memory-optimization , you may need to tweak Redis conf for actual usage. The tech is referred as hash mode below).\n\nInstallation\n============\n#. Require Django version >= 1.3\n#. ``pip install django-redisession`` or in source ``python setup.py install``.\n#. Add `redisession` to INSTALLED_APPS in your current settings file.\n#. Set ``SESSION_ENGINE='redisession.backend'`` in the settings file.\n    \nConfiguration\n=============\nConfiguration options to the django-redisession can be placed in dict `REDIS_SESSION_CONFIG`:\n    - `SERVER` -- If set to a dict then the value will be used as arguments for redis.Redis() to make a redis connection instance. If set to a string then the django-redisession will get redisession.helper.get_redis to lookup the value in `REDIS_CONFIG` for existing connection instance, see below.\n    - `USE_HASH` -- If set to True (hash mode), the django-redisession will store sessions as items of Redis Hashes. `HASH_KEY_GENERATOR` will be used to generate corresponding Redis keys. If set to False, the data of a session will be stored as Redis String value of the Redis key which is generated by `KEY_GENERATOR`. session keys generated by md5 is not as well distribudated as those by sha1, but still acceptable.\n    - `KEY_GENERATOR` -- The callable to generate Redis key, or Redis Hash field name when in hash mode, for a session. The callable accepts session_key as the only parameter. The default generates the binary string, 16 bytes for md5, from session_key which is normally a hex string. **Note** if you are customizing it, open `LOG_KEY_ERROR` and run test `./manage.py test redisession` to \"ensure\" `KEY_GENERATOR` works with session keys. For session key contains '0-9a-z' in incoming Django 1.5, you could check comments in `redisession/backend.py`. \n    - `HASH_KEY_GENERATOR` -- The callable to generate Redis key for Redis Hashes, in hash mode. The default uses the first two bytes of the binary string of a session_key, and thus distributes sessions to 65536 hashes. Other dispatching logics or key prefix could be achieved by customizing this option. **Note** if you are customizing it, open `LOG_KEY_ERROR` and run test `./manage.py test redisession` to \"ensure\" `HASH_KEY_GENERATOR` works with session keys. For session key contains '0-9a-z' in incoming Django 1.5, you could check comments in `redisession/backend.py`. \n    - `HASH_KEYS_CHECK_FOR_EXPIRY` -- The callable to generate Redis keys to check for deleting expired sessions, in hash mode. The callable accepts redis connection instance as parameter. The default applys Redis.randomkey 100 times to sample keys. \n    - `COMPRESS_LIB` -- The module name of the compress library used to compress session data, leave blank to disable compress. Defaults to 'snappy', refs `snappy <http://code.google.com/p/snappy/>`_ and `python-snappy <https://github.com/andrix/python-snappy>`_ . The compress library should support compress and decompress, such as zlib, lzo, etc. A slow library may have higher compression ratio, which implies higher load on web server, but less IO on communicating w/ Redis. So decide it by your tradeoff.\n    - `COMPRESS_MIN_LENGTH` -- The minimal length of the session data to try compress. Defaults to 400.\n    - `LOG_KEY_ERROR` -- Whether log key error caused by bad key or misconfigured `HASH_KEY_GENERATOR` or `KEY_GENERATOR`. Defaults to False.\n\nExamples:\n\n::\n\n    # default: distributes sessions to 65536 Redis Hashes,\n    #          use binary string form of session_key,\n    #          applys Redis.randomkey 100 times to sample hash keys\n    #           to check for deleting expired session,\n    #          try to compress data (length >= 400) by using snappy. \n    REDIS_SESSION_CONFIG = {\n        'SERVER': {},\n        'USE_HASH': True,\n        'KEY_GENERATOR': lambda x: x.decode('hex'),\n        'HASH_KEY_GENERATOR': lambda x: x[:4].decode('hex'),\n        'HASH_KEYS_CHECK_FOR_EXPIRY': lambda r: (reduce(lambda p,y :p.randomkey(),\n            xrange(100), r.pipeline()).execute()),\n        'COMPRESS_LIB': 'snappy',\n        'COMPRESS_MIN_LENGTH': 400,\n        'LOG_KEY_ERROR': False\n    }\n    \n::\n\n    # use session thru Redis get/set. store session key just as it is, hex string.\n    REDIS_SESSION_CONFIG = {\n        'USE_HASH': False,\n        'KEY_GENERATOR': lambda x: x\n    }\n\n::\n\n    # almost as above, but add key prefix 's:' for Redis keys\n    REDIS_SESSION_CONFIG = {\n        'USE_HASH': False,\n        'KEY_GENERATOR': lambda x: 's:'+x\n    }\n\n::\n\n    # use Redis connection instance through redisession.helper.get_redis\n    # here django-redisession will try to use Redis connection instance 'foo'\n    REDIS_SESSION_CONFIG = {\n        'SERVER': 'foo'\n    }\n\n    # see following\n    REDIS_CONFIG = {\n        'default': {'db':1},\n        'foo': {'db':2, unix_socket_path='/tmp/bar'}\n    }\n\n::\n\n    # Here are some other possible settings of 'HASH_KEYS_CHECK_FOR_EXPIRY'\n\n    # Fetching and scaning ALL keys and ALL of their fields. Use with caution. \n    lambda r: r.keys()\n\n    # Sampling 100 hash keys out of 65536 possible slots.\n    # This is useful if the number of actually used slots is closer to 65536.\n    lambda r: (map(lambda x:('%04x'%x).decode('hex'),\n        random.sample(xrange(65536), 100)))\n\n\n\nYou could use ``redisession.helper.get_redis`` to create and get global Redis connection instance by name. First, setting `REDIS_CONFIG` in the settings file, which is similar to DBs settings in django. For example:\n\n::\n\n    REDIS_CONFIG = {\n        # 'name': arguments passed to redis.Redis to build a connection instance, as dict items\n        'default': {'port':63790, 'db':1},\n        'foo': {'db':2, unix_socket_path='/tmp/bar'},\n        'session': {'db':3},\n    }\n\nthen\n\n::\n\n    >>> from redisession.helper import get_redis\n    >>> r = get_redis() # get Redis connection instance of name 'default'\n    >>> r = get_redis('foo') # or of name 'foo'\n    >>> r = get_redis('session') # use db 3 for sessions only\n    >>> r.info()\n\nSecurity\n========\nIsolate the Redis server of storing sessions from other usages is RECOMMENDED.\nYou could achieve this by using a seperate db, like conf 'session' in REDIS_CONFIG above,\nor by specifying a unique key prefix in KEY_GENERATOR.\nFor possible security issue, refs https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/\nand https://code.djangoproject.com/changeset/16759\n\n\nCleanup expired sessions in hash mode\n=====================================\n    run django command `cleanuprs` in shell or cronjob.\n\nTest\n====\n    ``python manager.py test redisession``. It uses your REDIS_SESSION_CONFIG settings for tests, so corresponding Redis server should be available.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/liokm/django-redisession",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/liokm/django-redisession",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-redisession",
    "package_url": "https://pypi.org/project/django-redisession/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-redisession/",
    "project_urls": {
      "Download": "https://github.com/liokm/django-redisession",
      "Homepage": "https://github.com/liokm/django-redisession"
    },
    "release_url": "https://pypi.org/project/django-redisession/0.3.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Redis-based Django session engine for django.contrib.sessions.",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 790436,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "710a11f8fa41e5864ebb445441556657e0232d3dcf55f85622604dadf3a31d01",
          "md5": "cb284dcf511b0660cf457eff5696e2fa",
          "sha256": "c0eb4b274d25c4ccef714fe9b5543880f914ce3ceab901e24a2587812b92d423"
        },
        "downloads": -1,
        "filename": "django-redisession-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cb284dcf511b0660cf457eff5696e2fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5280,
        "upload_time": "2011-08-31T15:37:30",
        "upload_time_iso_8601": "2011-08-31T15:37:30.851853Z",
        "url": "https://files.pythonhosted.org/packages/71/0a/11f8fa41e5864ebb445441556657e0232d3dcf55f85622604dadf3a31d01/django-redisession-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e66dfeac4f71cca6993591a63df9464677e1df569907a087f6f12405c0280d6",
          "md5": "4cce7316d156ec9319dd70a7376b740b",
          "sha256": "4a120843396025362c91e537792fabae96e82816a79f4a059346955f2ff20b42"
        },
        "downloads": -1,
        "filename": "django-redisession-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4cce7316d156ec9319dd70a7376b740b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6259,
        "upload_time": "2011-09-12T18:40:25",
        "upload_time_iso_8601": "2011-09-12T18:40:25.348732Z",
        "url": "https://files.pythonhosted.org/packages/3e/66/dfeac4f71cca6993591a63df9464677e1df569907a087f6f12405c0280d6/django-redisession-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38fddc536f07515329c9c6912729ac3b382def62640ebc8de89bc93efef74520",
          "md5": "2e55506fdda10cb55b246f96272ba9fa",
          "sha256": "6b4b27513b30fced4d79ec04bf2e345ef582e291125153a7ed5be400289863f5"
        },
        "downloads": -1,
        "filename": "django-redisession-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2e55506fdda10cb55b246f96272ba9fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7178,
        "upload_time": "2012-04-22T12:39:12",
        "upload_time_iso_8601": "2012-04-22T12:39:12.614699Z",
        "url": "https://files.pythonhosted.org/packages/38/fd/dc536f07515329c9c6912729ac3b382def62640ebc8de89bc93efef74520/django-redisession-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec431d7ff8a577c03c5b7c75c82bf92fcfbb48f8777e6d6a7b7dd30b5c265163",
          "md5": "798d4b5f492e123bf7a7792508785566",
          "sha256": "3ec8cf75f7d18f8ecfc967c6562e2489f7cc6786e246cb37292a7dd0bccbcfd7"
        },
        "downloads": -1,
        "filename": "django-redisession-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "798d4b5f492e123bf7a7792508785566",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7171,
        "upload_time": "2012-04-24T17:58:44",
        "upload_time_iso_8601": "2012-04-24T17:58:44.988530Z",
        "url": "https://files.pythonhosted.org/packages/ec/43/1d7ff8a577c03c5b7c75c82bf92fcfbb48f8777e6d6a7b7dd30b5c265163/django-redisession-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec431d7ff8a577c03c5b7c75c82bf92fcfbb48f8777e6d6a7b7dd30b5c265163",
        "md5": "798d4b5f492e123bf7a7792508785566",
        "sha256": "3ec8cf75f7d18f8ecfc967c6562e2489f7cc6786e246cb37292a7dd0bccbcfd7"
      },
      "downloads": -1,
      "filename": "django-redisession-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "798d4b5f492e123bf7a7792508785566",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7171,
      "upload_time": "2012-04-24T17:58:44",
      "upload_time_iso_8601": "2012-04-24T17:58:44.988530Z",
      "url": "https://files.pythonhosted.org/packages/ec/43/1d7ff8a577c03c5b7c75c82bf92fcfbb48f8777e6d6a7b7dd30b5c265163/django-redisession-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}