{
  "info": {
    "author": "Farlley Ferreira",
    "author_email": "farlley@live.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3"
    ],
    "description": "# :satellite: Heimdall Logger :satellite:\n\n### Resumo\n\n> <p style=\"text-align: justify\"> \n> Este projeto foi desenvolvido como resultado de um estudo sobre sistemas assíncronos e, da necessidade de prover um serviço flexível, que pudesse ser \n> estendido a diversos cenários e formas de aplicação, podendo ser utilizado tanto para a finalidade de log's síncronos quanto assíncronos. As funcionalidades \n> do heimdall-logger serão mais bem discutidas nas seções pertinentes. Este módulo tem como objetivo permitir:\n> </p>\n>\n> <ul>\n> <li> Realizar logs de forma síncrona e assíncrona </li>\n> <li> Realizar logs nos formatos LOG, TXT e JSON (Outros formatos serão implementados posteriormente) </li>\n> <li> Realizar callback do log para api's de acordo com o a necessidade do usuário</li>\n> </ul>\n>\n> <p style=\"text-align: justify\"> \n> Ao longo do desenvolvimento do projeto, outras integrações poderão ser adicionadas, desde que, sejam efetuadas respeitando as diretrizes\n> e padrões adotados neste projeto, esta decisão foi tomada com a finalidade de manter a integridade conceitual do projeto.  Sinta-se à vontade para\n> contribuir com o mesmo.\n> </p>\n\n### Roadmap\n\n</br>\n\n> <ol>\n> <li> Melhorar a funcionalidade de escrita para arquivos JSON. </li>\n> <li> Melhoria e aumento da profundidade dos testes da aplicação. </li>\n> <li> Implantação de outros formatos de saída para os arquivos de log (Ex: XML, CSV). </li>\n> <li> Adicionar funcionalidades de stream e funcionalidades de escrita mais personalizáveis. </li>\n> <li> Implantação de prova de conceito para providers em bancos de dados. (SQL, MongoDB, MySQL, PostgreSQl, entre outros) </li>\n> </ol>\n\n### Setup\n\n> <i><b>Para rodar o projeto heimdall-logger localmente.</b></i>\n>\n> <p style=\"text-align: justify\"> \n>   <ol>\n>    <li> Realize o clone desta aplicação para seu diretório de projetos</li>\n>    <li> Certifique-se de possuir o make instalado em seu OS</li>\n>    <li> Crie um ambiente virtual utilizando gerenciador de sua preferência > (pyenv, virtualenv, anaconda...).</li>\n>    <li> Dentro deste diretório será possível verificar a criação da pasta: <i><b>heimdall-logger</b></i></li>\n>    <li> Execute o comando:</b></i></li>\n>   </ol>\n> </p>\n>\n> ```bash\n> make install-requeriments\n> ```\n>\n> <i> &nbsp;&nbsp;&nbsp; ou caso não possua o make, poderá rodar o comando:</i>\n>\n> ```bash\n> pip install -r requirements.txt\n> ```\n>\n> Seguido de:\n>\n> ```bash\n> pip install -r requirements-dev.txt\n> ```\n>\n> <p style=\"text-align: justify\"> \n>   <ol start=\"7\">\n>    <li> Se todos os pacotes foram instalados corretamente você poderá executar:</li>\n>   </ol>\n> </p>\n>\n> ```bash\n> make run-demo\n> ```\n>\n> Será possível observar no seu console, o log de todos os oito níveis existentes nesta lib sendo exibidos\n>\n> <i><b>Para rodar a suite de testes execute:</b></i>\n>\n> ```bash\n> make test-coverage\n> ```\n>\n> <i> &nbsp;&nbsp;&nbsp; ou caso não possua o make, poderá rodar o comando:</i>\n>\n> ```bash\n> pytest --cov-report term-missing --cov=project/\n> ```\n>\n> Ou ainda, de acordo com a preferência do desenvolvedor, os testes poderão ser executados via plugin da sua IDE\n> ou editor de códigos preferida, recomendo a [Python Test Explorer for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=LittleFoxTeam.vscode-python-test-adapter) ou ainda [Test Explorer UI](https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-test-explorer).\n\n### Utilização\n\n#### Para realizar a instalação do heimdall-logger:\n\n> ```bash\n> pip install heimdall-logger\n> ```\n>\n> <p style=\"text-align: justify\"> \n> Após realizar a instalação, você poderá importar as funcionalidades que utilizará para criar a instância de log, de acordo com sua necessidade. Ao importar o heimdall-logger, serão expostos os seguintes módulos:\n>\n> ```python\n> from heimdall_logger import (\n>   Extension,\n>   Level,\n>   FileDataLog,\n>   ApiSendLog,\n>   SyncLogger,\n>   AsyncLogger\n> )\n> ```\n>\n> Tendo importado os módulos necessários para implantar o log no contexto desejado vamos instânciar todas as dependências da seguinte forma:\n>\n> Para gerarmos nosso arquivo de log utilizaremos o modulo FileDataLog (vide a seção Overview):\n>\n> ```python\n> _log_file_data = FileDataLog(\n>     log_extension=Extension.LOG,\n>     log_name=\"[NOME_DESEJADO_PARA_O_ARQUIVO_DE_LOG]\",\n>     log_path=\"[CAMINHO_DESEJADO_PARA_GRAVAÇÃO_DO_LOG]\"\n> )\n> ```\n>\n> Caso seja necessário podemos também chamar uma API e enviar nossos dados de log para ela da seguinte forma:\n>\n> ```python\n> _api_send_log = ApiSendLog(\n>     api_route=\"[ROTA_DA_API_A_QUAL_DESEJA_ENVIAR_O_LOG]\",\n>     api_method=\"[METODO_HTTP]\",\n>     api_headers=\"[CASO_PRECISE_ENVIE_OS_CABEÇALHOS_COMO_DICT]\"\n> )\n> ```\n>\n> E finalmente criamos nossa instância de log:\n>\n> ```python\n> sync_logger = SyncLogger(\n>     project_name=\"[NOME_DO_PROJETO_EM_CONTEXTO]\",\n>     file_data=_log_file_data,\n>     api_callback=_api_send_log\n> )\n> ```\n>\n> Ou então:\n>\n> ```python\n> async_logger = AsyncLogger(\n>     project_name=\"\",\n>     file_data=object,\n>     api_callback=object\n> )\n> ```\n>\n> Perceba que não enviamos o atributo pattern em nenhuma das duas formas, isso se deve ao fato de que o padrão pré-configurado nos atende em todos os cenários, não sendo seu caso, é possível configurar um novo padrão da seguinte forma:\n>\n> padrão pré-configurado:\n>\n> ```python\n> _pattern = \"[{level}][{datetime}] - {transaction} - {project_name}.{class_name}.{function_name} - {message}\"\n>\n> ```\n>\n> padrão customizado:\n>\n> ```python\n> _pattern = \"[{level}][{datetime}] | {transaction} | {project_name}_{class_name}_{function_name}: {message}\"\n>\n> ```\n>\n> Desde que seja respeitado o nome dos parâmetros (level, datetime, transaction, project_name, class_name, function_name e message) o log será gravado no padrão que for mais conveniente ao seu proposito. Dito isto, basta enviar na instancia do SyncLogger ou do AsyncLogger, atributo \"pattern\" ao novo padrão desejado.\n>\n> Muito bem, configuramos nossa instancia de log com todas as possibilidades, para realizar o log, basta então chamar a função de log:\n>\n> ```python\n> sync_logger.log(level=Level.INFO,message=\"MongoDB connection\",transaction=\"start db connection\")\n> ```\n>\n> Ou então:\n>\n> ```python\n> async_logger.async_log(level=Level.INFO,message=\"MongoDB connection\",transaction=\"end dbconnection\")\n> ```\n>\n> No metodo log podemos enviar como parâmetro:\n>\n> ```yaml\n> class.log:\n>   - message = \"[MENSAGEM_QUE_DESEJA_GRAVAR]\"\n>   - transaction = \"[TAG_QUE_IDENTIFICA_O_ESTADO_DA_TRANSACAO]\"\n>   - level = Level.INFO | .CRITICAL | .DEBUG | .ERROR | .FATAL | .NOTICE | .TRACE | WARNING | UNSET\n>   - error = Exception(\"um tipo qualquer de exceção\")\n> ```\n\n### Overview\n\n#### Significado e casos de uso de cada modulo:\n\n> </p>\n> <i><b>Extension:</b></i>\n>\n> <p style=\"text-align: justify\"> \n>   O modulo Extension, é um enumerator que possui todos os formatos de arquivos que a biblioteca consegue processar. À medida que mais formatos forem adicionados, serão incluidos nesse modulo.\n>\n> ```yaml\n> Extension:\n>   - LOG\n>   - TXT\n>   - JSON\n> ```\n>\n> </p>\n> <i><b>Level:</b></i>\n>\n> <p style=\"text-align: justify\"> \n>   Já no modulo Level, que também é um enumerator, expomos os diversos níveis de log com que o heimdall-logger trabalha.\n>\n> ```yaml\n> Level:\n>   - CRITICAL\n>   - DEBUG\n>   - ERROR\n>   - FATAL\n>   - INFO\n>   - NOTICE\n>   - TRACE\n>   - WARNING\n>   - UNSET\n> ```\n>\n> </p>\n> <i><b>FileDataLog:</b></i>\n>\n> <p style=\"text-align: justify\"> \n> O módulo FileDataLog, permite especificar qual extensão de arquivo de log, gostaríamos que nossos dados fossem gravados, permite ainda que especifiquemos qual o nome do arquivo de log e em qual diretório este arquivo será gravado. Este módulo poderá ou não ser passado de acordo com o contexto de utilização dos módulos SyncLogger e AsyncLogger.\n>\n> ```python\n> log_file_data = FileDataLog(\n>     log_extension=Extension.JSON,\n>     log_name=\"logfile\",\n>     log_path=\"\"\n> )\n> ```\n>\n> </p>\n> <i><b>ApiSendLog:</b></i>\n>\n> <p style=\"text-align: justify\"> \n> O módulo ApiSendLog, permite realizar o log das informações, realizando uma chamada via protocolo http, na qual enviará a um recurso qualquer, as informações de log, de forma síncrona ou assíncrona. Para que tal ação seja possível, você deverá informar ao modulo, qual verbo http sua api utiliza, qual a rota, e caso exista algum parâmetro de cabeçalho, tal como um token de autorização, poderá ser enviado em api_headers.\n>\n> ```python\n> api_send_log = ApiSendLog(\n>     api_route=\"\",\n>     api_method=\"\",\n>     api_headers={}\n> )\n> ```\n>\n> <i><b>SyncLogger e AsyncLogger:</b></i>\n>\n> <p style=\"text-align: justify\"> \n> Com o heimdall-logger, é possível realizar logs de forma síncrona (SyncLogger) ou assíncrona (AsyncLogger), você tem liberdade para utilizar ambos os modelos de acordo com o contexto o qual seu sistema se encontra, para isso, na instância do método você deverá informar o nome do projeto (este é um parâmetro obrigatório), poderá informar um provedor de escrita de arquivos e, também de envio de dados para uma api a seu critério. Caso, nosso padrão de log não atenda sua necessidade, você poderá customizar este padrão e enviar um template-string com o padrão desejado.\n>\n> ```python\n> sync_logger = SyncLogger(\n>     project_name=\"\",\n>     file_data=object,\n>     api_callback=object,\n>     pattern=\"\"\n> )\n>\n> async_logger = AsyncLogger(\n>     project_name=\"\",\n>     file_data=object,\n>     api_callback=object,\n>     pattern=\"\"\n> )\n> ```\n>\n> </p>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/giovannifarlley/heimdall-logger",
    "keywords": "dev,log,async,aiologger,",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "heimdall-logger",
    "package_url": "https://pypi.org/project/heimdall-logger/",
    "platform": "",
    "project_url": "https://pypi.org/project/heimdall-logger/",
    "project_urls": {
      "Homepage": "https://github.com/giovannifarlley/heimdall-logger"
    },
    "release_url": "https://pypi.org/project/heimdall-logger/0.1.2/",
    "requires_dist": [
      "aiofiles",
      "aiohttp"
    ],
    "requires_python": ">=3.8",
    "summary": "Asynchronous logging lib",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10169817,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cdcea5b6b1baa7e03cea67cd3e724b0fbf95a45ae04a669f4f1a04f0dcaeaab",
          "md5": "76713e82adc455a27707a8445956061e",
          "sha256": "4f7fe7ac1357974dfa0aa216cd7e0fbbba939283c9c4827d53de620a700a8940"
        },
        "downloads": -1,
        "filename": "heimdall_logger-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76713e82adc455a27707a8445956061e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13501,
        "upload_time": "2021-04-26T00:55:10",
        "upload_time_iso_8601": "2021-04-26T00:55:10.512139Z",
        "url": "https://files.pythonhosted.org/packages/1c/dc/ea5b6b1baa7e03cea67cd3e724b0fbf95a45ae04a669f4f1a04f0dcaeaab/heimdall_logger-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0494814d9d95ba6914e5b37da74f1fdb92dc0b49f526f72e2fe20659df6f843e",
          "md5": "7b12e5a620b2e8a27737e677df358b5c",
          "sha256": "b9bd94bc4e5a40bc4e7e96db233b5f67762ee7339b8e0fd333c8b0e8eca20d73"
        },
        "downloads": -1,
        "filename": "heimdall-logger-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b12e5a620b2e8a27737e677df358b5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13911,
        "upload_time": "2021-04-26T00:55:11",
        "upload_time_iso_8601": "2021-04-26T00:55:11.675492Z",
        "url": "https://files.pythonhosted.org/packages/04/94/814d9d95ba6914e5b37da74f1fdb92dc0b49f526f72e2fe20659df6f843e/heimdall-logger-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a9e5bf895d0fc8b834d9e525ccbc49ff55e2be5a4ae6a72f2b36fabb6c429dc",
          "md5": "007993990aa8e611eb18dd3103478346",
          "sha256": "68f9367300ec351cf4c86310501faa213cd74f630da0a391d2324f7923210c0c"
        },
        "downloads": -1,
        "filename": "heimdall_logger-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "007993990aa8e611eb18dd3103478346",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13499,
        "upload_time": "2021-04-26T02:12:56",
        "upload_time_iso_8601": "2021-04-26T02:12:56.714471Z",
        "url": "https://files.pythonhosted.org/packages/4a/9e/5bf895d0fc8b834d9e525ccbc49ff55e2be5a4ae6a72f2b36fabb6c429dc/heimdall_logger-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57c134cc67e71cadb6ef06a031f1eb064384eec0e2386082a427e3052b74d534",
          "md5": "7ae93802660952763ad689fdef6dde88",
          "sha256": "e507e5e8b3a7865277987c9c502ef82a1391dde0eb827d926b710c003449ca02"
        },
        "downloads": -1,
        "filename": "heimdall-logger-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7ae93802660952763ad689fdef6dde88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13904,
        "upload_time": "2021-04-26T02:12:57",
        "upload_time_iso_8601": "2021-04-26T02:12:57.892941Z",
        "url": "https://files.pythonhosted.org/packages/57/c1/34cc67e71cadb6ef06a031f1eb064384eec0e2386082a427e3052b74d534/heimdall-logger-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a9e5bf895d0fc8b834d9e525ccbc49ff55e2be5a4ae6a72f2b36fabb6c429dc",
        "md5": "007993990aa8e611eb18dd3103478346",
        "sha256": "68f9367300ec351cf4c86310501faa213cd74f630da0a391d2324f7923210c0c"
      },
      "downloads": -1,
      "filename": "heimdall_logger-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "007993990aa8e611eb18dd3103478346",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 13499,
      "upload_time": "2021-04-26T02:12:56",
      "upload_time_iso_8601": "2021-04-26T02:12:56.714471Z",
      "url": "https://files.pythonhosted.org/packages/4a/9e/5bf895d0fc8b834d9e525ccbc49ff55e2be5a4ae6a72f2b36fabb6c429dc/heimdall_logger-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57c134cc67e71cadb6ef06a031f1eb064384eec0e2386082a427e3052b74d534",
        "md5": "7ae93802660952763ad689fdef6dde88",
        "sha256": "e507e5e8b3a7865277987c9c502ef82a1391dde0eb827d926b710c003449ca02"
      },
      "downloads": -1,
      "filename": "heimdall-logger-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7ae93802660952763ad689fdef6dde88",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 13904,
      "upload_time": "2021-04-26T02:12:57",
      "upload_time_iso_8601": "2021-04-26T02:12:57.892941Z",
      "url": "https://files.pythonhosted.org/packages/57/c1/34cc67e71cadb6ef06a031f1eb064384eec0e2386082a427e3052b74d534/heimdall-logger-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}