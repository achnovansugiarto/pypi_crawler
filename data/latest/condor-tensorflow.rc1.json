{
  "info": {
    "author": "Garrett Jenkinson",
    "author_email": "Jenkinson.William@mayo.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<img src=\"https://github.com/GarrettJenkinson/condor_tensorflow/raw/main/docs/img/condor.png\" width=300>\n\n# Condor Ordinal regression in Tensorflow Keras\n![Continuous Integration](https://github.com/GarrettJenkinson/condor_tensorflow/actions/workflows/python-test.yml/badge.svg)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/GarrettJenkinson/condor_tensorflow/blob/main/LICENSE)\n![Python 3](https://img.shields.io/badge/python-3-blue.svg)\n\nTensorflow Keras implementation of CONDOR Ordinal Regression (aka ordinal classification) by \nGarrett Jenkinson et al (2021).\n\nCONDOR is compatible with any state-of-the-art deep neural network architecture, \nrequiring only modification of the output layer, the labels, and the loss function.\n[Read our full documentation to learn more.](https://garrettjenkinson.github.io/condor_tensorflow/)\n\nWe also have implemented [CONDOR for pytorch](https://github.com/GarrettJenkinson/condor_pytorch).\n\nThis package includes:\n\n  * Ordinal tensorflow loss function: `CondorOrdinalCrossEntropy`\n  * Ordinal tensorflow error metric: `OrdinalMeanAbsoluteError`\n  * Ordinal tensorflow error metric: `OrdinalEarthMoversDistance`\n  * Ordinal tensorflow sparse loss function: `CondorSparseOrdinalCrossEntropy`\n  * Ordinal tensorflow sparse error metric: `SparseOrdinalMeanAbsoluteError`\n  * Ordinal tensorflow sparse error metric: `SparseOrdinalEarthMoversDistance`\n  * Ordinal tensorflow activation function: `ordinal_softmax`\n  * Ordinal sklearn label encoder: `CondorOrdinalEncoder`\n\n<img src=\"https://github.com/GarrettJenkinson/condor_tensorflow/blob/main/docs/img/rankconsistent.png\" width=500>\n\n## Installation\n\nInstall the stable version via pip:\n\n```bash\npip install condor-tensorflow\n```\n\nAlternatively install the most recent code on GitHub via pip:\n\n```bash\npip install git+https://github.com/GarrettJenkinson/condor_tensorflow/\n```\n\n`condor_tensorflow` should now be available for use as a Python library.\n\n## Docker container\n\nAs an alternative to the above, we provide a convenient Dockerfile that will build a container with `condor_tensorflow` along with all of its dependencies (Python 3.6+, Tensorflow 2.2+, sklearn, numpy).\nThis can be used as follows:\n\n```bash\n# Clone this git repository\ngit clone https://github.com/GarrettJenkinson/condor_tensorflow/\n\n# Change directory to the cloned repository root\ncd condor_tensorflow\n\n# Create a docker image\ndocker build -t cpu_tensorflow -f cpu.Dockerfile ./\n\n# run image to serve a jupyter notebook \ndocker run -it -p 8888:8888 --rm cpu_tensorflow\n\n# how to run bash inside container (with Python that will have required dependencies available)\ndocker run -u $(id -u):$(id -g) -it -p 8888:8888 --rm cpu_tensorflow bash\n```\n\nAssuming a GPU enabled machine with NVIDIA drivers installed replace `cpu`\nabove with `gpu`.\n\n## Example\n\nThis is a quick example to show basic model implementation syntax.<br>\nExample assumes existence of input data (variable 'X') and ordinal labels (variable 'labels').\n\n```python\nimport tensorflow as tf\nimport condor_tensorflow as condor\nNUM_CLASSES = 5\n# Ordinal 'labels' variable has 5 labels, 0 through 4.\nenc_labs = condor.CondorOrdinalEncoder(nclasses=NUM_CLASSES).fit_transform(labels)\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(32, activation = \"relu\"))\nmodel.add(tf.keras.layers.Dense(NUM_CLASSES-1)) # Note the \"-1\"\nmodel.compile(loss = condor.CondorOrdinalCrossEntropy(),\n              metrics = [condor.OrdinalMeanAbsoluteError()])\nmodel.fit(x = X, y = enc_labs)\n```\n\n[See this colab notebook](https://github.com/GarrettJenkinson/condor_tensorflow/blob/main/docs/CONDOR_TensorFlow_demo.ipynb) \nfor extended examples of ordinal regression with MNIST and Amazon reviews (universal sentence encoder).\n\nPlease post any issues to the [issue queue](https://github.com/GarrettJenkinson/condor_tensorflow/issues). \n\n**Acknowledgments**: Many thanks to [the CORAL ordinal authors](https://github.com/ck37/coral-ordinal) and \n[the CORAL pytorch authors](https://github.com/Raschka-research-group/coral_pytorch) whose repos provided a roadmap for this codebase.\n\n## References\n\n[Jenkinson, Khezeli, Oliver, Kalantari, Klee. Universally rank consistent ordinal regression in neural networks, arXiv:2110.07470, 2021.](https://arxiv.org/abs/2110.07470)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GarrettJenkinson/condor_tensorflow",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "condor-tensorflow",
    "package_url": "https://pypi.org/project/condor-tensorflow/",
    "platform": "",
    "project_url": "https://pypi.org/project/condor-tensorflow/",
    "project_urls": {
      "Bug Tracker": "https://github.com/GarrettJenkinson/condor_tensorflow/issues",
      "Homepage": "https://github.com/GarrettJenkinson/condor_tensorflow"
    },
    "release_url": "https://pypi.org/project/condor-tensorflow/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A tensorflow implementation of Conditionals for Ordinal Regression",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12013145,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc2076e2e39b69b4e51eacb35a3552f3b9bc8d60c0cf566e3ea2c1166aef7e64",
          "md5": "95d527f037e3013a8cb9a7ca4038f8d5",
          "sha256": "73e6a1cb71cb7fde2b6645eb974a4c05e365d9ef7f5c6c59f83feccb6b6476e8"
        },
        "downloads": -1,
        "filename": "condor_tensorflow-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95d527f037e3013a8cb9a7ca4038f8d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13599,
        "upload_time": "2021-11-13T15:07:08",
        "upload_time_iso_8601": "2021-11-13T15:07:08.256041Z",
        "url": "https://files.pythonhosted.org/packages/bc/20/76e2e39b69b4e51eacb35a3552f3b9bc8d60c0cf566e3ea2c1166aef7e64/condor_tensorflow-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc1467cc0da0796e793c54842242636738de69c72fe6b6bc6b801e08aef4d94b",
          "md5": "950ef68d281b9b97a9fc68688f71c4dc",
          "sha256": "202aa187bffa5ca4f617c0452c684cf819d7f7043b4d6015369b35ebd7905d8c"
        },
        "downloads": -1,
        "filename": "condor_tensorflow-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "950ef68d281b9b97a9fc68688f71c4dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13520,
        "upload_time": "2021-11-13T15:07:10",
        "upload_time_iso_8601": "2021-11-13T15:07:10.034774Z",
        "url": "https://files.pythonhosted.org/packages/cc/14/67cc0da0796e793c54842242636738de69c72fe6b6bc6b801e08aef4d94b/condor_tensorflow-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc2076e2e39b69b4e51eacb35a3552f3b9bc8d60c0cf566e3ea2c1166aef7e64",
        "md5": "95d527f037e3013a8cb9a7ca4038f8d5",
        "sha256": "73e6a1cb71cb7fde2b6645eb974a4c05e365d9ef7f5c6c59f83feccb6b6476e8"
      },
      "downloads": -1,
      "filename": "condor_tensorflow-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "95d527f037e3013a8cb9a7ca4038f8d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13599,
      "upload_time": "2021-11-13T15:07:08",
      "upload_time_iso_8601": "2021-11-13T15:07:08.256041Z",
      "url": "https://files.pythonhosted.org/packages/bc/20/76e2e39b69b4e51eacb35a3552f3b9bc8d60c0cf566e3ea2c1166aef7e64/condor_tensorflow-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc1467cc0da0796e793c54842242636738de69c72fe6b6bc6b801e08aef4d94b",
        "md5": "950ef68d281b9b97a9fc68688f71c4dc",
        "sha256": "202aa187bffa5ca4f617c0452c684cf819d7f7043b4d6015369b35ebd7905d8c"
      },
      "downloads": -1,
      "filename": "condor_tensorflow-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "950ef68d281b9b97a9fc68688f71c4dc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13520,
      "upload_time": "2021-11-13T15:07:10",
      "upload_time_iso_8601": "2021-11-13T15:07:10.034774Z",
      "url": "https://files.pythonhosted.org/packages/cc/14/67cc0da0796e793c54842242636738de69c72fe6b6bc6b801e08aef4d94b/condor_tensorflow-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}