{
  "info": {
    "author": "Luis Fernando Gomes",
    "author_email": "luiscoms@ateliedocodigo.com.br",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "py-queue-manager\n================\n\nLibrary to deal with RabbitMQ and Google PubSub\n\nUsage\n-----\n\nQueueManager class\n..................\n\n.. code:: python\n\n    >>> from queue_manager.queue_manager import QueueManager\n    >>> conn_params = {\n    ...     'host': '',\n    ...     'port': '',\n    ...     'username': '',\n    ...     'password': ''\n    ... }\n    >>> # or use multiple urls\n    >>> conn_params = ('amqp://host1', 'amqp://host2',)\n    qm = QueueManager(conn_params)\n    >>> qm.push('hello', 'Hello from QueueManager')\n    True\n    >>> qm.pop('hello')\n    Hello from QueueManager\n    >>> del(qm)\n\nRabbitMqPublisher class\n.......................\n\n.. code:: python\n\n    from queue_manager.rabbitmq_consumer import RabbitMqPublisher\n\n    producer = RabbitMqPublisher('amqp://username:password@hostname:port',\n                                 'exchange', 'exchange_type', 'queue_name', 'routing_key')\n\n    producer.publish_message('hello')\n    # or passing message property\n    producer.publish_message('hello', dict(priority=8))\n\n\nRabbitMqConsumer class\n......................\n\nThis class is an async consumer class, that still connected.\n\nInspired on: asynchronous_consumer_example_\n\n.. code:: python\n\n    single_url = 'amqp://username:password@hostname:port'\n    # or multiple urls\n    multiple_urls = ('amqp://username:password@hostnameone:port', 'amqp://username:password@hostnametwo:port')\n    consumer = RabbitMqConsumer(single_url, queue='queue_name')\n\n    try:\n        def callback(body):\n            print(\"message body\", body)\n\n        consumer.run(callback)\n    except KeyboardInterrupt:\n        consumer.stop()\n\nTornadoConsumer class\n.......................\n\n.. code:: python\n\n    from tornado.ioloop import IOLoop\n    from queue_manager.tornado_consumer import TornadoConsumer\n\n    consumer = TornadoConsumer('amqp://username:password@hostname:port',\n                               'exchange', 'exchange_type', 'queue_name', 'routing_key')\n\n\n    def callback(body):\n        print(\"message body\", body)\n\n    consumer.run(callback)\n    IOLoop.instance().start()\n\nPubsubConsumer class\n.......................\n\n.. code:: python\n\n    consumer = PubsubConsumer('project_id', 'path/to/sa.json', 'subscription_name', 'topic_name')\n\n    def callback(message):\n        print(\"message\", message)\n\n    try:\n        consumer.start_listening(callback)\n    except KeyboardInterrupt:\n        consumer.stop()\n\nRunning tests with ``tox``\n--------------------------\n\nInstall ``tox``\n\n::\n\n    $ pip install tox\n\nRun tests\n\n::\n\n    tox\n\n.. _asynchronous_consumer_example: http://pika.readthedocs.io/en/0.13.1/examples/asynchronous_consumer_example.html\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/ateliedocodigo/py-queue-manager/tarball/1.12.1",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ateliedocodigo/py-queue-manager",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyQueueManager",
    "package_url": "https://pypi.org/project/PyQueueManager/",
    "platform": "any",
    "project_url": "https://pypi.org/project/PyQueueManager/",
    "project_urls": {
      "Download": "https://github.com/ateliedocodigo/py-queue-manager/tarball/1.12.1",
      "Homepage": "https://github.com/ateliedocodigo/py-queue-manager"
    },
    "release_url": "https://pypi.org/project/PyQueueManager/1.12.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library to deal with RabbitMQ and Google PubSub",
    "version": "1.12.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11239817,
  "releases": {
    "1.12.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc97e4da66cd665b37e2928ca4987bb0115490de1c16a37c88409a466bd8c078",
          "md5": "8e34b917d1bc04fd62a802bf23b85ee4",
          "sha256": "4ebf4f39bafc76a2f8535e8acbb31db37b5a0679fc98abd48abb71fc3dec1cd5"
        },
        "downloads": -1,
        "filename": "PyQueueManager-1.12.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8e34b917d1bc04fd62a802bf23b85ee4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8116,
        "upload_time": "2021-08-21T15:43:07",
        "upload_time_iso_8601": "2021-08-21T15:43:07.136668Z",
        "url": "https://files.pythonhosted.org/packages/cc/97/e4da66cd665b37e2928ca4987bb0115490de1c16a37c88409a466bd8c078/PyQueueManager-1.12.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc97e4da66cd665b37e2928ca4987bb0115490de1c16a37c88409a466bd8c078",
        "md5": "8e34b917d1bc04fd62a802bf23b85ee4",
        "sha256": "4ebf4f39bafc76a2f8535e8acbb31db37b5a0679fc98abd48abb71fc3dec1cd5"
      },
      "downloads": -1,
      "filename": "PyQueueManager-1.12.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8e34b917d1bc04fd62a802bf23b85ee4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8116,
      "upload_time": "2021-08-21T15:43:07",
      "upload_time_iso_8601": "2021-08-21T15:43:07.136668Z",
      "url": "https://files.pythonhosted.org/packages/cc/97/e4da66cd665b37e2928ca4987bb0115490de1c16a37c88409a466bd8c078/PyQueueManager-1.12.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}