{
  "info": {
    "author": "bzdvdn",
    "author_email": "bzdv.dn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## Beeline cloudpbx portal api wrapper\n\n#### Install\n\nInstall using `pip`...\n\n    pip install beeline-portal\n\n#### Usage\n\n```python\nfrom beeline_portal import BeelinePBX\n\nclient = BeelinePBX('<access_token>')\n```\n\n##### get abonents\n\n```python\nabonents = client.get_abonents() # return map[Abonent]\n```\n\n##### find abonent\n\n```python\nabonent = client.find_abonent('<pattern>') # raise BeelinePBXException or return Abonent\n```\n\n##### get abonent agent status\n\n```python\nresult = client.get_abonent_agent_status('<pattern>') # raise BeelinePBXException or return {'status': status}\n```\n\n##### set abonent agent status\n\n```python\n_ = client.set_abonent_agent_status('<pattern>', 'status') # raise BeelinePBXException or return {}\n```\n\n##### get abonent recording status\n\n```python\nresult = client.get_abonent_recording_status('<pattern>') # raise BeelinePBXException or return {'status': status}\n```\n\n##### enable abonent recording\n\n```python\n_ = client.enable_abonent_recording('<pattern>') # raise BeelinePBXException or return {}\n```\n\n##### stop abonent recording\n\n```python\n_ = client.stop_abonent_recording('<pattern>') # raise BeelinePBXException or return {}\n```\n\n##### call from abonent\n\n```python\nresult = client.call_from_abonent('<pattern>', 'phone number') # raise BeelinePBXException or return {'response': response}\n```\n\n##### v2 call from abonent\n\n```python\nresult = client.call_from_abonent_v2('<pattern>', 'phone number') # raise BeelinePBXException or return {'response': response}\n```\n\n##### transfer call from abonent\n\n```python\nresult = client.transfer_call_from_abonent('<pattern>','call_id', 'phone number') # raise BeelinePBXException or return {}\n```\n\n##### transfer call from abonent\n\n```python\nresult = client.transfer_call_with_consult('<pattern>','call_id', 'call_id_consult') # raise BeelinePBXException or return {}\n```\n\n##### add extension number\n\n```python\nresult = client.transfer_call_with_consult('<pattern>','phone number', 'schedule') # raise BeelinePBXException or return {}\n```\n\n##### delete extension number\n\n```python\nresult = client.delete_extension_number('<pattern>') # raise BeelinePBXException or return {}\n```\n\n##### get cfb\n\n```python\ncfb_response = client.get_cfb('<pattern>') # raise BeelinePBXException or return CfbResponse\n```\n\n##### enable cfb\n\n```python\nfrom beeline_protal.models import Cfb\n\ncfb = Cfb('+7397999992', '+7397999993')\ncfb_response = client.get_cfb('<pattern>', cfb) # raise BeelinePBXException or return CfbResponse\n```\n\n##### stop cfb\n\n```python\nresult = client.stop_cfb('<pattern>') # raise BeelinePBXException or return {}\n```\n\n##### get cfs rule list\n\n```python\nresult = client.get_cfs_rules('<pattern>') # raise BeelinePBXException or return CfsStatusResponse\n```\n\n##### add cfs rule\n\n```python\nfrom beeline_portal.models import CfsRule\n\ncfs_rule = CfsRule('my rule', '+7937999992', 'WORKING_TIME', ['+7937999993'])\nresult = client.add_cfs_rule('<pattern>', cfs_rule) # raise BeelinePBXException or return {'number': response}\n\n```\n\n##### enable cfs\n\n```python\nresult = client.enable_cfs('<pattern>') # raise BeelinePBXException or return {}\n```\n\n##### update cfs rule\n\n```python\nfrom beeline_portal.models import CfsRule\n\ncfs_rule = CfsRule('my rule', '+7937999992', 'WORKING_TIME', ['+7937999993'])\nresult = client.update_cfs_rule('<pattern>','cfs_id', cfs_rule) # raise BeelinePBXException or return {}\n```\n\n##### stop cfs\n\n```python\nresult = client.stop_cfs('<pattern>') # raise BeelinePBXException or return {}\n```\n\n##### delete cfs rule\n\n```python\nresult = client.delete_cfs_rule('<pattern>', '<cfs_id>') # raise BeelinePBXException or return {}\n```\n\n##### get bwl list\n\n```python\nresult = client.get_bwl_list('<pattern>') # raise BeelinePBXException or return BwlStatusResponse\n```\n\n##### add bwl rule\n\n```python\nfrom beeline_portal.models import BwlRule\n\nbwl_rule = BwlRule('BWL_RULE', 'WORKING_TIME', ['+7939797772'])\nresult = client.add_bwl_rule('<pattern>', 'WHITE_LIST', bwl_rule)  # raise BeelinePBXException or return {'number': response}\n```\n\n##### update bwl rule\n\n```python\nfrom beeline_portal.models import BwlRule\n\nbwl_rule = BwlRule('BWL_RULE', 'WORKING_TIME', ['+7939797772'])\nresult = client.update_bwl_rule('<pattern>', '<bwl_id>', bwl_rule)  # raise BeelinePBXException or return {}\n```\n\n##### enable bwl\n\n```python\nresult = client.enable_bwl('<pattern>', '<rule_type>') # raise BeelinePBXException or return {}\n```\n\n##### stop bwl\n\n```python\nresult = client.stop_bwl('<pattern>') # raise BeelinePBXException or return {}\n```\n\n##### delete bwl rule\n\n```python\nresult = client.delete_bwl_rule('<pattern>', '<bwl_id>') # raise BeelinePBXException or return {}\n```\n\n##### get call records\n\n```python\ncall_records = client.get_records() #raise BeelinePBXException or return map[CallRecord]\n```\n\n##### delete call record\n\n```python\nresult = client.delete_record('<record_id>') #raise BeelinePBXException or return {}\n```\n\n##### get call record\n\n```python\ncall_record = client.get_record('<record_id>') #raise BeelinePBXException or return CallRecord\n```\n\n##### get call record by extratracking id\n\n```python\ncall_record = client.get_record_by_extratracking_id('<extratracking_id>', '<user_id>') #raise BeelinePBXException or return CallRecord\n```\n\n##### download call record\n\n```python\nbytes_record_data = client.download_record('<record_id>') #raise BeelinePBXException or return record data in bytes\n```\n\n##### download call record by extracking id\n\n```python\nbytes_record_data = client.download_record_by_extracking_id('<extratracking_id>', '<user_id>') #raise BeelinePBXException or return record data in bytes\n```\n\n##### get call record link\n\n```python\nrecord_link = client.get_record_link('<record_id>') #raise BeelinePBXException or return string\n```\n\n##### get call record link by extracking id\n\n```python\nrecord_link = client.get_record_link_by_extracking_id('<extratracking_id>', '<user_id>') #raise BeelinePBXException or return string\n```\n\n##### get incoming numbers\n\n```python\nincoming_numbers = client.get_incoming_numbers() #raise BeelinePBXException or return map[Number]\n```\n\n##### find incoming number\n\n```python\ninc_number = client.find_incoming_number('<pattern>') #raise BeelinePBXException or return Number\n```\n\n##### create subscription\n\n```python\nfrom beeline_portal.models import SubscriptionRequest\n\nsr = SubscriptionRequest('<pattern>', 23,'BASIC_CALL', '<url>')\nresult = client.create_subscription(sr) #raise BeelinePBXException or return dict\n```\n\n##### get subscription\n\n```python\nsubs = client.get_subscription('<subscription_id>') #raise BeelinePBXException or return Subscription\n```\n\n##### stop subscription\n\n```python\nsubs = client.stop_subscrption('<subscription_id>') #raise BeelinePBXException or return {}\n```\n\n##### get icr numbers\n\n```python\nicr_numbers = client.get_icr_numbers() #raise BeelinePBXException or return map[Number]\n```\n\n##### enable icr for numbers\n\n```python\nresult = client.enable_icr_for_number(['+79238458793']) #raise BeelinePBXException or return map[IcrNumbersResult]\n```\n\n##### stop icr for numbers\n\n```python\nresult = client.stop_icr_for_number(['+79238458793']) #raise BeelinePBXException or return map[IcrNumbersResult]\n```\n\n##### get icr route rules\n\n```python\nicr_route_rules = client.get_icr_route_rules() #raise BeelinePBXException or return map[IcrRouteRule]\n```\n\n##### delete icr route rules\n\n```python\nfrom beeline_portal.models import IcrRouteRule\n\nrule = IcrRouteRule('+7923424535', '201')\nicr_route_rules = client.delete_list_of_icr_rules([rule]) #raise BeelinePBXException or return map[IcrRouteResult]\n```\n\n##### add icr route rules\n\n```python\nfrom beeline_portal.models import IcrRouteRule\n\nrule = IcrRouteRule('+7923424535', '201')\nicr_route_rules = client.add_list_of_icr_rules([rule]) #raise BeelinePBXException or return map[IcrRouteResult]\n```\n\n##### update icr route rules\n\n```python\nfrom beeline_portal.models import IcrRouteRule\n\nrule = IcrRouteRule('+7923424535', '201')\nicr_route_rules = client.update_list_of_icr_rules([rule]) #raise BeelinePBXException or return map[IcrRouteResult]\n```\n\n##### get voice campaigns\n\n```python\ncampaigns = client.get_voice_campaigns() #raise BeelinePBXException or return map[VoiceCampaign]\n```\n\n##### upload voice file to campaign\n\n```python\nresult = client.upload_file_to_voice_campaign('<path to file>') # raise BeelinePBXException or return {\"id\": \"<id>\"}\n```\n\n##### add question voice campaign\n\n```python\nfrom beeline_portal.models import VoiceCampaignQuestion, Answer, DateAndTime\nanswers = [Answer('Q1', 'gadget')]\nschedule = VoiceCampaignSchedule('Q1', 'H1', 'H4', 'BUSINESS_DAY')\nfrom_ = DateAndTime(parse_datetime('2021-11-11'), '00:00')\nto_ = DateAndTime(parse_datetime('2021-11-21'), '00:00')\ncampaign = VoiceCampaignQuestion(\n    'q_campaign',\n    answers,\n    \"<file>\",\n    ['+793799992'],\n    '+7123212432',\n    schedule,\n    from_,\n    to_,\n)\nresult = client.add_question_type_voice_campaign(campaign) # raise BeelinePBXException or return string number\n```\n\n##### add message voice campaign\n\n```python\nfrom beeline_portal.models import VoiceCampaignMessage\ncampaign = VoiceCampaignMessage.from_beeline_struct({\n    \"name\": \"Message campaign\",\n    \"audioFile\": \"file_id\",\n    \"phones\": [\"200\"],\n    \"phoneNumber\": \"+79379999992\",\n    \"schedule\": {\n        \"tryQuantity\": \"Q1\",\n        \"fromHour\":\"H1\",\n        \"toHour\":\"H4\",\n        \"schedule\":\"BUSINESS_DAY\"\n    },\n    \"from\": {\n        \"date\": \"2021-01-01\",\n        \"time\":\"00:00:23\"\n    },\n    \"to\": {\n        \"date\": \"2021-01-01\",\n        \"time\":\"00:00:23\"\n    }\n})\nresult = client.add_message_type_voice_campaign(campaign) # raise BeelinePBXException or return string number\n```\n\n##### update voice campaign\n\n```python\nfrom beeline_portal.models import VoiceCampaign\nvc = VoiceCampaign.from_beeline_struct(\n{\n    \"name\": \"MyVoiceCampaign\",\n    \"status\": \"SUSPENDED\",\n    \"recordId\": \"hhyth1231432\",\n    \"type\": \"QUESTION\",\n    \"answers\": [{\"choice\": \"B1\", \"answer\": \"test\"}],\n    \"audioFile\": \"<link>\",\n    \"phones\": [\"93799992\"],\n    \"phoneNumber\": \"+799999999\",\n    \"schedule\": {\n        \"tryQuantity\": \"Q1\",\n        \"fromHour\": \"H0\",\n        \"toHour\": \"H4\",\n        \"schedule\": \"ALL_WEEK\",\n    },\n    \"from\": {\"date\": \"2021-01-01\", \"time\": \"00:00:00\"},\n    \"to\": {\"date\": \"2021-12-01\", \"time\": \"23:59:59\"},\n    \"abonent\": {\n        \"userId\": \"9379992@beeline.ru\",\n        \"phone\": \"9379992\",\n        \"firstName\": \"Ivan\",\n        \"lastName\": \"Moody\",\n    },\n})\nresult = client.update_voice_campaign('<campaign_id>', vc)\n```\n\n##### delete voice campaign\n\n```python\nresult = client.delete_voice_campaign('<campaign_id>') # raise BeelinePBXException or return {}\n```\n\n##### stop voice campaign\n\n```python\nresult = client.stop_voice_campaign('<campaign_id>') # raise BeelinePBXException or return {}\n```\n\n##### start voice campaign\n\n```python\nresult = client.start_voice_campaign('<campaign_id>') # raise BeelinePBXException or return {}\n```\n\n##### get voice campaign info\n\n```python\nvc_info_report = client.get_voice_campaign_info('<campaign_id>') # raise BeelinePBXException or return VoiceCampaignInfoReport\n```\n\n##### get statistic\n\n```python\nfrom datetime import datetime, timedelta\ndate_to = datetime.now()\ndate_from = date_to - timedelta(days=2)\n\nstatistic = client.get_statistic('<user_id>', date_from, date_to, 0, 10) # raise BeelinePBXException or return map[StatRecord]\n```\n\n##### get v2 statistic\n\n```python\nfrom datetime import datetime, timedelta\ndate_to = datetime.now()\ndate_from = date_to - timedelta(days=2)\n\nstatistic = client.get_statistic_v2('<user_id>', date_from, date_to, 0, 10) # raise BeelinePBXException or return map[StatRecordV2]\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bzdvdn/beeline_portal",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "beeline-portal",
    "package_url": "https://pypi.org/project/beeline-portal/",
    "platform": null,
    "project_url": "https://pypi.org/project/beeline-portal/",
    "project_urls": {
      "Homepage": "https://github.com/bzdvdn/beeline_portal"
    },
    "release_url": "https://pypi.org/project/beeline-portal/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Beeline cloudpbx portal api wrapper",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14480596,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76821c586f8d97309a7a274e9aca814d22fcfac578a260e655192024743f2268",
          "md5": "90f1c32bd61f287e03e0c3ed50a9dc19",
          "sha256": "b1f1b465da8690c7918b4ddaabcb23d74bfeb51804d133c5c654787d9f314873"
        },
        "downloads": -1,
        "filename": "beeline-portal-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "90f1c32bd61f287e03e0c3ed50a9dc19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10937,
        "upload_time": "2021-12-16T09:59:54",
        "upload_time_iso_8601": "2021-12-16T09:59:54.048146Z",
        "url": "https://files.pythonhosted.org/packages/76/82/1c586f8d97309a7a274e9aca814d22fcfac578a260e655192024743f2268/beeline-portal-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3999670ea2937642beafae40878503fe6abe2ffe3222059be5ee39a855df670b",
          "md5": "1ee95cdff4854979d4740668f9360279",
          "sha256": "57fd012fc6ef8d7b1b90f85787a71727957212bfe7760cff12fa2d1fb111c1a1"
        },
        "downloads": -1,
        "filename": "beeline-portal-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1ee95cdff4854979d4740668f9360279",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12181,
        "upload_time": "2022-07-19T11:05:27",
        "upload_time_iso_8601": "2022-07-19T11:05:27.768152Z",
        "url": "https://files.pythonhosted.org/packages/39/99/670ea2937642beafae40878503fe6abe2ffe3222059be5ee39a855df670b/beeline-portal-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3999670ea2937642beafae40878503fe6abe2ffe3222059be5ee39a855df670b",
        "md5": "1ee95cdff4854979d4740668f9360279",
        "sha256": "57fd012fc6ef8d7b1b90f85787a71727957212bfe7760cff12fa2d1fb111c1a1"
      },
      "downloads": -1,
      "filename": "beeline-portal-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1ee95cdff4854979d4740668f9360279",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12181,
      "upload_time": "2022-07-19T11:05:27",
      "upload_time_iso_8601": "2022-07-19T11:05:27.768152Z",
      "url": "https://files.pythonhosted.org/packages/39/99/670ea2937642beafae40878503fe6abe2ffe3222059be5ee39a855df670b/beeline-portal-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}