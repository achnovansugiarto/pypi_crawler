{
  "info": {
    "author": "Juntong",
    "author_email": "jessica_ye2015@sina.com.cn",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "- Create and edit `multiline text`. \n- A good tool to realize __repr__. \n\nimport it by ``from reprlist import Reprlist``\n\nInitialize it with an iterable object (or None to do nothing), like 'str' or 'list'.\n\n::\n\n    In [1]: from reprlist import Reprlist\n\n    In [2]: Reprlist( '1-2' )        #Same as 'Reprlist(['1', '-', '2'])'.\n    Out[2]: \n    0:1\n    1:-\n    2:2\n\n    In [3]: Reprlist([               #Also supports 2D list.\n    ...: ['=', '========', '='],\n    ...: ['|', 'Hello world!', '|'],\n    ...: ['=', '========', '='],\n    ...: ])\n    Out[3]: \n    0:=========    =\n    1:|Hello world!|\n    2:=========    =\n\nExtend by method ``extend`` with an iterable object,\nif iterable's length â‰  R.length, align center.\nYou can specify the number of aligned line with method ``smart_extend``.\n\n::\n\n    In [2]: Reprlist(' 1-2').extend([' + ']).extend(' 1-3 ').extend([' = ']).extend('5-6')\n    Out[2]: \n    0:         \n    1:1   1   5\n    2:- + - = -\n    3:2   3   6\n    4:         \n\nMethod ``insert(obj, new_index)``\ninserts str starts at `new_index` with each item obj in the end.\n\n::\n\n    In [7]: Reprlist([' 1 ','---',' 2 ']).insert('1-x', 2)\n    Out[7]: \n    0: 1    \n    1:---   \n    2:   1\n    3:   -\n    4:   x\n    5: 2    \n\nYou can remove empty lines with method ``get_removed_empty_lines``,\nthis method will return a new object without changes.\n\n::\n\n    In [2]: Reprlist(' ' if i%2 else '-' for i in range(5)).get_removed_empty_lines()\n    Out[2]: \n    0:-\n    1:-\n\nSlice with ``[:]``, returns the text in each line;\n\nwith ``[:,:]``, you can see text blocks,\nthe block shows the text each time you extended.\n\n::\n\n    In [41]: R = Reprlist([' 1','--',' 2'])\n\n    In [42]: R[:, :]\n    Out[42]: [[' 1'], ['--'], [' 2']]\n\n    In [43]: R.extend('-')\n    Out[43]: \n    0: 1 \n    1:---\n    2: 2 \n\n    In [44]: R[:, :]\n    Out[44]: [[' 1', ' '], ['--', '-'], [' 2', ' ']]\n\n    In [45]: R.insert([' x '], 2)\n    Out[45]: \n    0: 1    \n    1:---   \n    2:    x \n    3: 2    \n\n    In [46]: R[:, :]\n    Out[46]: \n    [[' 1', ' ', '   '],\n    ['--', '-', '   '],\n    ['  ', ' ', ' x '],\n    [' 2', ' ', '   ']]\n\n    In [47]: R[:, -1]\n    Out[47]: ['   ', '   ', ' x ', '   ']\n\n::\n\n    ``dev.Reprlist`` almost compatible with Reprlist, and it doesn't keep text blocks.\n\nMethods:\n===========\n\n    ===============================          ===========================================\n    Name:                                      Doc:\n    ===============================          ===========================================\n    __init__(extend=None,rule=None)            Extend value `extend` \n                                               if it's not None.\n                                               And set the `rule` from value `rule`,\n                                               if `rule` is None, set with `globle_rule`,\n    -------------------------------          -------------------------------------------\n    extend(o,_chack=True)                      Extend each line, align center.\n                                               (particulars the drawing after table).\n    -------------------------------          -------------------------------------------\n    __add__(val)                               Return R.copy().extend(val). \n    -------------------------------          -------------------------------------------\n    mid                                        Return len(self)//2.\n    -------------------------------          -------------------------------------------\n    change_mid(mid)                            Draw out until new mid equal given-mid.Same as R.mid = mid.\n    -------------------------------          -------------------------------------------\n    combine()                                  Combine all the str-blocks.\n    -------------------------------          -------------------------------------------\n    separate()                                 Separate all the str-blocks to 1-length str.\n    -------------------------------          -------------------------------------------\n    smart_extend(o[,None,None])                Draw and then extend val 'o'. \n    -------------------------------          -------------------------------------------\n    get_place_onto(bottom)                     Put self on bottom.\n    -------------------------------          -------------------------------------------\n    line(linenumber)                           Return the str at line 'linenumber'.\n    -------------------------------          -------------------------------------------\n    to_tk(root=None)                           Return root with tk.Label on it, if `root` is None, auto build a tk.TK.\n    ===============================          ===========================================\n\n    **The drawing about 'extend':**\n    ::\n\n               l=6  lo=3\n            0  ___        \n            1  ___        \n            2  ___  ___  0  \n        mid>3  ___  ___  1<\n            4  ___  ___  2  \n            5  ___        \n            6\n            \n                l=3     lo=7\n                       ___ 0\n                       ___ 1\n            0  ___     ___ 2\n        mid>1  ___     ___ 3<\n            2  ___     ___ 4\n                       ___ 5\n                       ___ 6\n                       ____7\n\nWhat's new ?\n===============\n\n    ::\n        >  `1.3.5` ---> `1.3.6`\n            Optimize the method `extend`.\n        >  `1.3.4` ---> `1.3.5`\n            Now extend an empty obj will not raise `ValueError: Empty sequence got.`.\n\nDemo:\n===========\n    | Creat a class. \n\n    ::\n\n        from reprlist import Reprlist\n        class UnKnow:\n            def __init__(self, mul = 1, power = 1, num = 0):\n                self.mul = mul\n                self.power = power\n                self.num = num\n            def __repr__(self):\n                r = Reprlist()\n                m = (str(self.mul) + ' * ')if self.mul != 1 else ''\n                r.extend([m + 'X'])\n                if self.power != 1:\n                    r.smart_extend(str(self.power),o_mid=1)\n                if self.num:\n                    n = str(self.num)\n                    if n.startswith('-'):\n                        n = ' - ' + n[1:]\n                    else:\n                        n = ' + ' + n\n                    r.extend([n])\n                return str(r)\n\n    ::\n\n        >>>UnKnow()\n\n        X\n        >>>UnKnow(2,2,3)\n\n             2    \n        2 * X  + 3\n        >>>UnKnow(4,5,-2)\n\n             5    \n        4 * X  - 2\n\n\nlog\n===========\n\n    ::\n\n        >  2020-3-12, `1.1.0` --> `1.2.0`\n        1.Add method `line`,`lmove`,'rmove','put_inbox'.\n        2.Add a new class `dev.Reprlist` do `from reprlist.dev import Reprlist` to import it.\n          In dev.Reprlist, the text you extended saved after the text front as line, not block.\n          So slice `R[<int1>,<int2>]` returns the char at the index.\n        \n        >  2020-4-7, `1.2.1` --> `1.2.2`\n        1.You can set `maxstring``maxline``startswith` for Reprlist.\n        >  `1.2.8` ---> `1.2.9`\n        1.Method `place_onto``place_under` add value `wherejust`,\n            `wherejust` \n                --> 'l' / 'left': storter one in a position of lift.\n                --> 'r' / 'right':storter one in a position of right.\n                --> 'm' / 'middle':storter one in a position of middle.\n        2.Change methods `lmove``rmove`.The original char will be in place of lift if `lmove`, \n              right if `rmove`.\n        3.Add methods `ljust` and `rjust`.\n        >  `1.2.2` ---> `1.2.10`\n            Remove some bugs.\n        >  `1.2.10` ---> `1.3.4`\n            Add method `to_tk`.\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "repr multiline str char text",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "reprlist.py",
    "package_url": "https://pypi.org/project/reprlist.py/",
    "platform": null,
    "project_url": "https://pypi.org/project/reprlist.py/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/reprlist.py/1.3.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Create and edit multiline text(str), a tool to realize __repr__.",
    "version": "1.3.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13564537,
  "releases": {
    "1.3.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "654f5c24d4bcf5a4bfa05650b8141d767076666c3331f863c48544c6f7fba8b8",
          "md5": "d2f1f070d88f5719af51fce0ea48a408",
          "sha256": "1e9d5efdf1aaef32c1c732d83c34ffe88d0885393f6f61b8a7d1cb09df8cb45f"
        },
        "downloads": -1,
        "filename": "reprlist.py-1.3.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2f1f070d88f5719af51fce0ea48a408",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17496,
        "upload_time": "2022-04-20T06:08:54",
        "upload_time_iso_8601": "2022-04-20T06:08:54.935764Z",
        "url": "https://files.pythonhosted.org/packages/65/4f/5c24d4bcf5a4bfa05650b8141d767076666c3331f863c48544c6f7fba8b8/reprlist.py-1.3.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c1a0a858a807ea5306df5db35a451a267ad47a2f636b0d237f9879997d5bcce",
          "md5": "b8e7a728c277d6ec50170799e943f426",
          "sha256": "f78563adc3dc0bb2907f4bc7c744be0b1514846223391b62620867e008297a8b"
        },
        "downloads": -1,
        "filename": "reprlist.py-1.3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "b8e7a728c277d6ec50170799e943f426",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16496,
        "upload_time": "2022-04-20T06:08:56",
        "upload_time_iso_8601": "2022-04-20T06:08:56.944249Z",
        "url": "https://files.pythonhosted.org/packages/7c/1a/0a858a807ea5306df5db35a451a267ad47a2f636b0d237f9879997d5bcce/reprlist.py-1.3.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "654f5c24d4bcf5a4bfa05650b8141d767076666c3331f863c48544c6f7fba8b8",
        "md5": "d2f1f070d88f5719af51fce0ea48a408",
        "sha256": "1e9d5efdf1aaef32c1c732d83c34ffe88d0885393f6f61b8a7d1cb09df8cb45f"
      },
      "downloads": -1,
      "filename": "reprlist.py-1.3.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d2f1f070d88f5719af51fce0ea48a408",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17496,
      "upload_time": "2022-04-20T06:08:54",
      "upload_time_iso_8601": "2022-04-20T06:08:54.935764Z",
      "url": "https://files.pythonhosted.org/packages/65/4f/5c24d4bcf5a4bfa05650b8141d767076666c3331f863c48544c6f7fba8b8/reprlist.py-1.3.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c1a0a858a807ea5306df5db35a451a267ad47a2f636b0d237f9879997d5bcce",
        "md5": "b8e7a728c277d6ec50170799e943f426",
        "sha256": "f78563adc3dc0bb2907f4bc7c744be0b1514846223391b62620867e008297a8b"
      },
      "downloads": -1,
      "filename": "reprlist.py-1.3.9.tar.gz",
      "has_sig": false,
      "md5_digest": "b8e7a728c277d6ec50170799e943f426",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16496,
      "upload_time": "2022-04-20T06:08:56",
      "upload_time_iso_8601": "2022-04-20T06:08:56.944249Z",
      "url": "https://files.pythonhosted.org/packages/7c/1a/0a858a807ea5306df5db35a451a267ad47a2f636b0d237f9879997d5bcce/reprlist.py-1.3.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}