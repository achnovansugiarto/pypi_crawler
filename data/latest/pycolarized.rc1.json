{
  "info": {
    "author": "smithjack",
    "author_email": "smithey120@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\r\npycolarized\r\n========\r\n\r\nMakes ANSI escape character sequences (for producing colored terminal text and\r\ncursor positioning) work under MS Windows.\r\n\r\n\r\nIf you find pycolarized useful, please |donate| to the authors. Thank you!\r\n\r\nInstallation\r\n------------\r\n\r\nTested on CPython 2.7, 3.7, 3.8, 3.9 and 3.10 and Pypy 2.7 and 3.8.\r\n\r\nNo requirements other than the standard library.\r\n\r\n.. code-block:: bash\r\n\r\n    pip install pycolarized\r\n    # or\r\n    conda install -c anaconda pycolarized\r\n\r\nDescription\r\n-----------\r\n\r\nANSI escape character sequences have long been used to produce colored terminal\r\ntext and cursor positioning on Unix and Macs. pycolarized makes this work on\r\nWindows, too, by wrapping ``stdout``, stripping ANSI sequences it finds (which\r\nwould appear as gobbledygook in the output), and converting them into the\r\nappropriate win32 calls to modify the state of the terminal. On other platforms,\r\npycolarized does nothing.\r\n\r\nThis has the upshot of providing a simple cross-platform API for printing\r\ncolored terminal text from Python, and has the happy side-effect that existing\r\napplications or libraries which use ANSI sequences to produce colored output on\r\nLinux or Macs can now also work on Windows, simply by calling\r\n``pycolarized.just_fix_windows_console()`` (since v0.4.6) or ``pycolarized.init()``\r\n(all versions, but may have other side-effects – see below).\r\n\r\nAn alternative approach is to install ``ansi.sys`` on Windows machines, which\r\nprovides the same behaviour for all applications running in terminals. pycolarized\r\nis intended for situations where that isn't easy (e.g., maybe your app doesn't\r\nhave an installer.)\r\n\r\nDemo scripts in the source code repository print some colored text using\r\nANSI sequences. Compare their output under Gnome-terminal's built in ANSI\r\nhandling, versus on Windows Command-Prompt using pycolarized:\r\n\r\n\r\nUsage\r\n-----\r\n\r\nInitialisation\r\n..............\r\n\r\nIf the only thing you want from pycolarized is to get ANSI escapes to work on\r\nWindows, then run:\r\n\r\n.. code-block:: python\r\n\r\n    from pycolarized import just_fix_windows_console\r\n    just_fix_windows_console()\r\n\r\nIf you're on a recent version of Windows 10 or better, and your stdout/stderr\r\nare pointing to a Windows console, then this will flip the magic configuration\r\nswitch to enable Windows' built-in ANSI support.\r\n\r\nIf you're on an older version of Windows, and your stdout/stderr are pointing to\r\na Windows console, then this will wrap ``sys.stdout`` and/or ``sys.stderr`` in a\r\nmagic file object that intercepts ANSI escape sequences and issues the\r\nappropriate Win32 calls to emulate them.\r\n\r\nIn all other circumstances, it does nothing whatsoever. Basically the idea is\r\nthat this makes Windows act like Unix with respect to ANSI escape handling.\r\n\r\nIt's safe to call this function multiple times. It's safe to call this function\r\non non-Windows platforms, but it won't do anything. It's safe to call this\r\nfunction when one or both of your stdout/stderr are redirected to a file – it\r\nwon't do anything to those streams.\r\n\r\nAlternatively, you can use the older interface with more features (but also more\r\npotential footguns):\r\n\r\n.. code-block:: python\r\n\r\n    from pycolarized import init\r\n    init()\r\n\r\nThis does the same thing as ``just_fix_windows_console``, except for the\r\nfollowing differences:\r\n\r\n- It's not safe to call ``init`` multiple times; you can end up with multiple\r\n  layers of wrapping and broken ANSI support.\r\n\r\n- pycolarized will apply a heuristic to guess whether stdout/stderr support ANSI,\r\n  and if it thinks they don't, then it will wrap ``sys.stdout`` and\r\n  ``sys.stderr`` in a magic file object that strips out ANSI escape sequences\r\n  before printing them. This happens on all platforms, and can be convenient if\r\n  you want to write your code to emit ANSI escape sequences unconditionally, and\r\n  let pycolarized decide whether they should actually be output. But note that\r\n  pycolarized's heuristic is not particularly clever.\r\n\r\n- ``init`` also accepts explicit keyword args to enable/disable various\r\n  functionality – see below.\r\n\r\nTo stop using pycolarized before your program exits, simply call ``deinit()``.\r\nThis will restore ``stdout`` and ``stderr`` to their original values, so that\r\npycolarized is disabled. To resume using pycolarized again, call ``reinit()``; it is\r\ncheaper than calling ``init()`` again (but does the same thing).\r\n\r\nMost users should depend on ``pycolarized >= 0.4.6``, and use\r\n``just_fix_windows_console``. The old ``init`` interface will be supported\r\nindefinitely for backwards compatibility, but we don't plan to fix any issues\r\nwith it, also for backwards compatibility.\r\n\r\nColored Output\r\n..............\r\n\r\nCross-platform printing of colored text can then be done using pycolarized's\r\nconstant shorthand for ANSI escape sequences. These are deliberately\r\nrudimentary, see below.\r\n\r\n.. code-block:: python\r\n\r\n    from pycolarized import Fore, Back, Style\r\n    print(Fore.RED + 'some red text')\r\n    print(Back.GREEN + 'and with a green background')\r\n    print(Style.DIM + 'and in dim text')\r\n    print(Style.RESET_ALL)\r\n    print('back to normal now')\r\n\r\n...or simply by manually printing ANSI sequences from your own code:\r\n\r\n.. code-block:: python\r\n\r\n    print('\\033[31m' + 'some red text')\r\n    print('\\033[39m') # and reset to default color\r\n\r\n...or, pycolarized can be used in conjunction with existing ANSI libraries\r\nsuch as the venerable `Termcolor <https://pypi.org/project/termcolor/>`_\r\nthe fabulous `Blessings <https://pypi.org/project/blessings/>`_,\r\nor the incredible `_Rich <https://pypi.org/project/rich/>`_.\r\n\r\nIf you wish pycolarized's Fore, Back and Style constants were more capable,\r\nthen consider using one of the above highly capable libraries to generate\r\ncolors, etc, and use pycolarized just for its primary purpose: to convert\r\nthose ANSI sequences to also work on Windows:\r\n\r\nSIMILARLY, do not send PRs adding the generation of new ANSI types to pycolarized.\r\nWe are only interested in converting ANSI codes to win32 API calls, not\r\nshortcuts like the above to generate ANSI characters.\r\n\r\n.. code-block:: python\r\n\r\n    from pycolarized import just_fix_windows_console\r\n    from termcolor import colored\r\n\r\n    # use pycolarized to make Termcolor work on Windows too\r\n    just_fix_windows_console()\r\n\r\n    # then use Termcolor for all colored text output\r\n    print(colored('Hello, World!', 'green', 'on_red'))\r\n\r\nAvailable formatting constants are::\r\n\r\n    Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\r\n    Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\r\n    Style: DIM, NORMAL, BRIGHT, RESET_ALL\r\n\r\n``Style.RESET_ALL`` resets foreground, background, and brightness. pycolarized will\r\nperform this reset automatically on program exit.\r\n\r\nThese are fairly well supported, but not part of the standard::\r\n\r\n    Fore: LIGHTBLACK_EX, LIGHTRED_EX, LIGHTGREEN_EX, LIGHTYELLOW_EX, LIGHTBLUE_EX, LIGHTMAGENTA_EX, LIGHTCYAN_EX, LIGHTWHITE_EX\r\n    Back: LIGHTBLACK_EX, LIGHTRED_EX, LIGHTGREEN_EX, LIGHTYELLOW_EX, LIGHTBLUE_EX, LIGHTMAGENTA_EX, LIGHTCYAN_EX, LIGHTWHITE_EX\r\n\r\nCursor Positioning\r\n..................\r\n\r\nANSI codes to reposition the cursor are supported. See ``demos/demo06.py`` for\r\nan example of how to generate them.\r\n\r\nInit Keyword Args\r\n.................\r\n\r\n``init()`` accepts some ``**kwargs`` to override default behaviour.\r\n\r\ninit(autoreset=False):\r\n    If you find yourself repeatedly sending reset sequences to turn off color\r\n    changes at the end of every print, then ``init(autoreset=True)`` will\r\n    automate that:\r\n\r\n    .. code-block:: python\r\n\r\n        from pycolarized import init\r\n        init(autoreset=True)\r\n        print(Fore.RED + 'some red text')\r\n        print('automatically back to default color again')\r\n\r\ninit(strip=None):\r\n    Pass ``True`` or ``False`` to override whether ANSI codes should be\r\n    stripped from the output. The default behaviour is to strip if on Windows\r\n    or if output is redirected (not a tty).\r\n\r\ninit(convert=None):\r\n    Pass ``True`` or ``False`` to override whether to convert ANSI codes in the\r\n    output into win32 calls. The default behaviour is to convert if on Windows\r\n    and output is to a tty (terminal).\r\n\r\ninit(wrap=True):\r\n    On Windows, pycolarized works by replacing ``sys.stdout`` and ``sys.stderr``\r\n    with proxy objects, which override the ``.write()`` method to do their work.\r\n    If this wrapping causes you problems, then this can be disabled by passing\r\n    ``init(wrap=False)``. The default behaviour is to wrap if ``autoreset`` or\r\n    ``strip`` or ``convert`` are True.\r\n\r\n    When wrapping is disabled, colored printing on non-Windows platforms will\r\n    continue to work as normal. To do cross-platform colored output, you can\r\n    use pycolarized's ``AnsiToWin32`` proxy directly:\r\n\r\n    .. code-block:: python\r\n\r\n        import sys\r\n        from pycolarized import init, AnsiToWin32\r\n        init(wrap=False)\r\n        stream = AnsiToWin32(sys.stderr).stream\r\n\r\n        # Python 2\r\n        print >>stream, Fore.BLUE + 'blue text on stderr'\r\n\r\n        # Python 3\r\n        print(Fore.BLUE + 'blue text on stderr', file=stream)\r\n\r\nRecognised ANSI Sequences\r\n.........................\r\n\r\nANSI sequences generally take the form::\r\n\r\n    ESC [ <param> ; <param> ... <command>\r\n\r\nWhere ``<param>`` is an integer, and ``<command>`` is a single letter. Zero or\r\nmore params are passed to a ``<command>``. If no params are passed, it is\r\ngenerally synonymous with passing a single zero. No spaces exist in the\r\nsequence; they have been inserted here simply to read more easily.\r\n\r\nThe only ANSI sequences that pycolarized converts into win32 calls are::\r\n\r\n    ESC [ 0 m       # reset all (colors and brightness)\r\n    ESC [ 1 m       # bright\r\n    ESC [ 2 m       # dim (looks same as normal brightness)\r\n    ESC [ 22 m      # normal brightness\r\n\r\n    # FOREGROUND:\r\n    ESC [ 30 m      # black\r\n    ESC [ 31 m      # red\r\n    ESC [ 32 m      # green\r\n    ESC [ 33 m      # yellow\r\n    ESC [ 34 m      # blue\r\n    ESC [ 35 m      # magenta\r\n    ESC [ 36 m      # cyan\r\n    ESC [ 37 m      # white\r\n    ESC [ 39 m      # reset\r\n\r\n    # BACKGROUND\r\n    ESC [ 40 m      # black\r\n    ESC [ 41 m      # red\r\n    ESC [ 42 m      # green\r\n    ESC [ 43 m      # yellow\r\n    ESC [ 44 m      # blue\r\n    ESC [ 45 m      # magenta\r\n    ESC [ 46 m      # cyan\r\n    ESC [ 47 m      # white\r\n    ESC [ 49 m      # reset\r\n\r\n    # cursor positioning\r\n    ESC [ y;x H     # position cursor at x across, y down\r\n    ESC [ y;x f     # position cursor at x across, y down\r\n    ESC [ n A       # move cursor n lines up\r\n    ESC [ n B       # move cursor n lines down\r\n    ESC [ n C       # move cursor n characters forward\r\n    ESC [ n D       # move cursor n characters backward\r\n\r\n    # clear the screen\r\n    ESC [ mode J    # clear the screen\r\n\r\n    # clear the line\r\n    ESC [ mode K    # clear the line\r\n\r\nMultiple numeric params to the ``'m'`` command can be combined into a single\r\nsequence::\r\n\r\n    ESC [ 36 ; 45 ; 1 m     # bright cyan text on magenta background\r\n\r\nAll other ANSI sequences of the form ``ESC [ <param> ; <param> ... <command>``\r\nare silently stripped from the output on Windows.\r\n\r\nAny other form of ANSI sequence, such as single-character codes or alternative\r\ninitial characters, are not recognised or stripped. It would be cool to add\r\nthem though. Let me know if it would be useful for you, via the Issues on\r\nGitHub.\r\n\r\nStatus & Known Problems\r\n-----------------------\r\n\r\nI've personally only tested it on Windows XP (CMD, Console2), Ubuntu\r\n(gnome-terminal, xterm), and OS X.\r\n\r\nSome valid ANSI sequences aren't recognised.\r\n\r\nIf you're hacking on the code, see `README-hacking.md`_. ESPECIALLY, see the\r\nexplanation there of why we do not want PRs that allow pycolarized to generate new\r\ntypes of ANSI codes.\r\n\r\nSee outstanding issues and wish-list:\r\nhttps://github.com/tartley/colorama/issues\r\n\r\nIf anything doesn't work for you, or doesn't do what you expected or hoped for,\r\nI'd love to hear about it on that issues list, would be delighted by patches,\r\nand would be happy to grant commit access to anyone who submits a working patch\r\nor two.\r\n\r\n.. _README-hacking.md: README-hacking.md\r\n\r\nLicense\r\n-------\r\n\r\nCopyright Jonathan Hartley & Arnon Yaari, 2013-2020. BSD 3-Clause license; see\r\nLICENSE file.\r\n\r\nProfessional support\r\n--------------------\r\n\r\n.. |tideliftlogo| image:: https://cdn2.hubspot.net/hubfs/4008838/website/logos/logos_for_download/Tidelift_primary-shorthand-logo.png\r\n   :alt: Tidelift\r\n   :target: https://tidelift.com/subscription/pkg/pypi-colorama?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=readme\r\n\r\n.. list-table::\r\n   :widths: 10 100\r\n\r\n   * - |tideliftlogo|\r\n     - Professional support for colorama is available as part of the\r\n       `Tidelift Subscription`_.\r\n       Tidelift gives software development teams a single source for purchasing\r\n       and maintaining their software, with professional grade assurances from\r\n       the experts who know it best, while seamlessly integrating with existing\r\n       tools.\r\n\r\n.. _Tidelift Subscription: https://tidelift.com/subscription/pkg/pypi-colorama?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=readme\r\n\r\nThanks\r\n------\r\n\r\nSee the CHANGELOG for more thanks!\r\n\r\n* Marc Schlaich (schlamar) for a ``setup.py`` fix for Python2.5.\r\n* Marc Abramowitz, reported & fixed a crash on exit with closed ``stdout``,\r\n  providing a solution to issue #7's setuptools/distutils debate,\r\n  and other fixes.\r\n* User 'eryksun', for guidance on correctly instantiating ``ctypes.windll``.\r\n* Matthew McCormick for politely pointing out a longstanding crash on non-Win.\r\n* Ben Hoyt, for a magnificent fix under 64-bit Windows.\r\n* Jesse at Empty Square for submitting a fix for examples in the README.\r\n* User 'jamessp', an observant documentation fix for cursor positioning.\r\n* User 'vaal1239', Dave Mckee & Lackner Kristof for a tiny but much-needed Win7\r\n  fix.\r\n* Julien Stuyck, for wisely suggesting Python3 compatible updates to README.\r\n* Daniel Griffith for multiple fabulous patches.\r\n* Oscar Lesta for a valuable fix to stop ANSI chars being sent to non-tty\r\n  output.\r\n* Roger Binns, for many suggestions, valuable feedback, & bug reports.\r\n* Tim Golden for thought and much appreciated feedback on the initial idea.\r\n* User 'Zearin' for updates to the README file.\r\n* John Szakmeister for adding support for light colors\r\n* Charles Merriam for adding documentation to demos\r\n* Jurko for a fix on 64-bit Windows CPython2.5 w/o ctypes\r\n* Florian Bruhin for a fix when stdout or stderr are None\r\n* Thomas Weininger for fixing ValueError on Windows\r\n* Remi Rampin for better Github integration and fixes to the README file\r\n* Simeon Visser for closing a file handle using 'with' and updating classifiers\r\n  to include Python 3.3 and 3.4\r\n* Andy Neff for fixing RESET of LIGHT_EX colors.\r\n* Jonathan Hartley for the initial idea and implementation.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycolarized",
    "package_url": "https://pypi.org/project/pycolarized/",
    "platform": null,
    "project_url": "https://pypi.org/project/pycolarized/",
    "project_urls": {
      "Homepage": "https://github.com"
    },
    "release_url": "https://pypi.org/project/pycolarized/2.2.5/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "python package to style terminal",
    "version": "2.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16915092,
  "releases": {
    "2.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cea30d6abc5a948e22057fb29c6b9a98b0e893617458d1996dc82cb459580014",
          "md5": "169af867c3fd7f0e229a6eeb83797b64",
          "sha256": "5cdeb5e172bebf1baacfadef6026e014248b226636642f950e92ce243380142d"
        },
        "downloads": -1,
        "filename": "pycolarized-2.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "169af867c3fd7f0e229a6eeb83797b64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 43303,
        "upload_time": "2023-02-18T14:00:49",
        "upload_time_iso_8601": "2023-02-18T14:00:49.687301Z",
        "url": "https://files.pythonhosted.org/packages/ce/a3/0d6abc5a948e22057fb29c6b9a98b0e893617458d1996dc82cb459580014/pycolarized-2.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e58fd985c71313f56bef1feb8dda3cb8bb3218670142392cc813b74caa36243a",
          "md5": "d1bf8ab4966dc2c166b4e9a983a5cac0",
          "sha256": "e997bfc90dfad7ab6b060743b8d619d98ca84a214e38c39993391057500a7b9c"
        },
        "downloads": -1,
        "filename": "pycolarized-2.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d1bf8ab4966dc2c166b4e9a983a5cac0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46060,
        "upload_time": "2023-02-18T14:00:51",
        "upload_time_iso_8601": "2023-02-18T14:00:51.973707Z",
        "url": "https://files.pythonhosted.org/packages/e5/8f/d985c71313f56bef1feb8dda3cb8bb3218670142392cc813b74caa36243a/pycolarized-2.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cea30d6abc5a948e22057fb29c6b9a98b0e893617458d1996dc82cb459580014",
        "md5": "169af867c3fd7f0e229a6eeb83797b64",
        "sha256": "5cdeb5e172bebf1baacfadef6026e014248b226636642f950e92ce243380142d"
      },
      "downloads": -1,
      "filename": "pycolarized-2.2.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "169af867c3fd7f0e229a6eeb83797b64",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 43303,
      "upload_time": "2023-02-18T14:00:49",
      "upload_time_iso_8601": "2023-02-18T14:00:49.687301Z",
      "url": "https://files.pythonhosted.org/packages/ce/a3/0d6abc5a948e22057fb29c6b9a98b0e893617458d1996dc82cb459580014/pycolarized-2.2.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e58fd985c71313f56bef1feb8dda3cb8bb3218670142392cc813b74caa36243a",
        "md5": "d1bf8ab4966dc2c166b4e9a983a5cac0",
        "sha256": "e997bfc90dfad7ab6b060743b8d619d98ca84a214e38c39993391057500a7b9c"
      },
      "downloads": -1,
      "filename": "pycolarized-2.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "d1bf8ab4966dc2c166b4e9a983a5cac0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 46060,
      "upload_time": "2023-02-18T14:00:51",
      "upload_time_iso_8601": "2023-02-18T14:00:51.973707Z",
      "url": "https://files.pythonhosted.org/packages/e5/8f/d985c71313f56bef1feb8dda3cb8bb3218670142392cc813b74caa36243a/pycolarized-2.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}