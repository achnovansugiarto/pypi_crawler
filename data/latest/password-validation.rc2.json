{
  "info": {
    "author": "Jack Wardell",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Password Validation\n\n## Aim\nThis library aims to allow the programmer to simply validate passwords according to their desired policy. \n\n## Flow\nHow does it work:\n* You create password policy\n* You test passwords against that policy\n* The passwords that abide by the policy are valid, those that don't abide are invalid\n\nSimple.\n\n\n## Password Guidelines\nI recommend reading the 2017 NIST guidelines:\n* Verifiers should not impose composition rules e.g., requiring mixtures of different character types or prohibiting consecutively repeated characters\n* Verifiers should not require passwords to be changed arbitrarily or regularly e.g. the previous 90 day rule\n* Passwords must be at least 8 characters in length\n* Password systems should permit subscriber-chosen passwords at least 64 characters in length.\n* All printing ASCII characters, the space character, and Unicode characters should be acceptable in passwords\n* When establishing or changing passwords, the verifier shall advise the subscriber that they need to select a different password if they have chosen a weak or compromised password\n* Verifiers should offer guidance such as a password-strength meter, to assist the user in choosing a strong password\n* Verifiers shall store passwords in a form that is resistant to offline attacks. Passwords shall be salted and hashed using a suitable one-way key derivation function. Key derivation functions take a password, a salt, and a cost factor as inputs then generate a password hash. Their purpose is to make each password guessing trial by an attacker who has obtained a password hash file expensive and therefore the cost of a guessing attack high or prohibitive.\n\nPersonal headline points: \n* Don't enforce bizarre convention e.g. 1 lowercase, 1 uppercase, 1 number, 1 symbol, etc\n* Don't make make users change them regularly\n* Make it at least 12 characters long\n* AND SALT AND HASH THEM WHEN PERSISTING\n\nThe XKCD comic puts it best: https://xkcd.com/936/\n\n\n## How to use\n\n### Install\nInstall it:\n```\npip install password_validation\n```\n\n\n### How \nExample:\n```\n>>> from password_validation import PasswordPolicy\n>>> policy = PasswordPolicy()\n>>> policy.validate(\"hello-this-is-quite-a-good-password\")\nTrue\n\n>>> policy.validate(\"password\")\nFalse\n\n>>> test = policy.test_password(\"hello\")\n>>> test\n[<RequirementUnfulfilled('the minimum password length', statement=(5 >= 12))>,\n <RequirementUnfulfilled('entropy', statement=(23.50219859070546 >= 32))>]\n```\nIn the above example \"password\" is not valid, because it's not more than 12 characters (which is a default requirement). And \"hello\" isn't valid either because it's too short and too low in entropy.\n\nYou can, when using `test_password` get back a list of unfulfilled requirements.\n\nOr you can see all the requirements:\n```\n>>> from password_validation import PasswordPolicy\n>>> policy = PasswordPolicy()\n>>> policy.test_password(\"goodbye\", failure_only=False)\n[<RequirementFulfilled('the minimum number of lowercase characters', statement=(7 >= 0))>,\n <RequirementFulfilled('the minimum number of uppercase characters', statement=(0 >= 0))>,\n <RequirementFulfilled('the minimum number of number characters', statement=(0 >= 0))>,\n <RequirementFulfilled('the minimum number of symbol characters', statement=(0 >= 0))>,\n <RequirementFulfilled('the minimum number of whitespace characters', statement=(0 >= 0))>,\n <RequirementFulfilled('the minimum number of other characters', statement=(0 >= 0))>,\n <RequirementUnfulfilled('the minimum password length', statement=(7 >= 12))>,\n <RequirementFulfilled('the maximum password length', statement=(7 <= 128))>,\n <RequirementFulfilled('entropy', statement=(32.90307802698764 >= 32))>,\n <RequirementFulfilled('forbidden words', statement=(\"goodbye\" not in []))>]\n```\n\nThe `__init__` looks something like this:\n```\nclass PasswordPolicy:\n    def __init__(\n        self,\n        lowercase: int = 0,\n        uppercase: int = 0,\n        symbols: int = 0,\n        numbers: int = 0,\n        whitespace: int = 0,\n        other: int = 0,\n        min_length: int = 12,\n        max_length: int = 128,\n        entropy: typing.Union[int, float] = 32,\n        forbidden_words: list = None\n    )\n```\nFeatures in your policy can include:\n* number of lowercase characters (default 0) `PasswordPolicy(lowercase=1)`\n* number of uppercase characters (default 0) `PasswordPolicy(uppercase=1)` \n* number of symbols characters (default 0) `PasswordPolicy(symbols=1)` \n* number of number characters (default 0) `PasswordPolicy(numbers=1)` \n* number of whitespace characters (default 0) `PasswordPolicy(whitespace=1)`\n* number of other characters (default 0) `PasswordPolicy(other=1)`\n* minimum password length (default 12) `PasswordPolicy(min_length=1)` \n* maximum password length (default 128)`PasswordPolicy(max_length=1)` \n* minimum password entropy (default 32) `PasswordPolicy(entropy=1)` \n* a list of forbidden words `PasswordPolicy(forbidden_words=['password'])` \n\nFYI other characters is if you wanted to add non-ascii characters\n\n#### Flask example\n```\nfrom password_validation import PasswordPolicy\n\npolicy = PasswordPolicy()\n\n@app.route(\"/register\")\ndef register():\n    password = request.form.get(\"password\")\n    if policy.validate(password):\n        # create user\n    else:\n        for requirement in policy.test_password(password):\n            alert = f\"{requirement.name} not satisfied: expected: {requirement.requirement}, got: {requirement.actual}\"\n            flash(alert)\n    return render_template(\"register.html\")    \n```\n\n\nYou can also get your fields using `policy.to_dict()`\n\n\n#### Character Pool\n\nIf you don't like the default characters (ascii) you can make your own `CharacterPool`:\n\n```\nhex_pool = CharacterPool(\n    lowercase=\"\",\n    uppercase=\"ABCDEF\",\n    numbers=\"0123456789\",\n    symbols=\"\",\n    whitespace=\"\",\n    other=\"\",\n)\n```\nor \n```\nrandom_pool = CharacterPool(\n    lowercase=\"åéîøü\",\n    uppercase=\"XYZ\",\n    numbers=\"123\",\n    symbols=\".\",\n    whitespace=\"\",\n    other=\"\",\n)\n```\nYou can then pass to the policy:\n```\npolicy = PasswordPolicy(character_pool=hex_pool)\n```\nand the same logic will apply but for that pool\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jackwardell/PasswordValidation",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Password-Validation",
    "package_url": "https://pypi.org/project/Password-Validation/",
    "platform": "",
    "project_url": "https://pypi.org/project/Password-Validation/",
    "project_urls": {
      "Homepage": "https://github.com/jackwardell/PasswordValidation"
    },
    "release_url": "https://pypi.org/project/Password-Validation/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A simple API to validate passwords according to basic guidelines",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7929541,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "483efb215ce6960f6757906fb2c9afc2d5f619cf234f88419760f60a847b6327",
          "md5": "f2d4d510270b6c4edf044b7fee135793",
          "sha256": "abca191a3583cd708ba7265604f4e32e9aedb13d1eb5157181ef6363da26a9b2"
        },
        "downloads": -1,
        "filename": "Password_Validation-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2d4d510270b6c4edf044b7fee135793",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11954,
        "upload_time": "2020-08-06T09:45:38",
        "upload_time_iso_8601": "2020-08-06T09:45:38.107631Z",
        "url": "https://files.pythonhosted.org/packages/48/3e/fb215ce6960f6757906fb2c9afc2d5f619cf234f88419760f60a847b6327/Password_Validation-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c11700479324adc533f41b8208e84a095534525db6af03f5d97e46926aa3754",
          "md5": "9a16f7a7c6b23c32184c2ee2801a9175",
          "sha256": "e3261d00d8b284cbfef61961e6a5a9f3481909d848c05a8b121e81d4dc04ce3c"
        },
        "downloads": -1,
        "filename": "Password Validation-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9a16f7a7c6b23c32184c2ee2801a9175",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9684,
        "upload_time": "2020-08-06T09:45:40",
        "upload_time_iso_8601": "2020-08-06T09:45:40.432378Z",
        "url": "https://files.pythonhosted.org/packages/5c/11/700479324adc533f41b8208e84a095534525db6af03f5d97e46926aa3754/Password%20Validation-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d32df062a16f90f0af5742979e656083004170d4911fea96ccef9a2d9bddc83",
          "md5": "add674ed225a00d20ed1fd18216799fc",
          "sha256": "b03904ff2a58e66b7902b60a21161b0b328fef3d75b330f50f58fa979ac2b234"
        },
        "downloads": -1,
        "filename": "Password_Validation-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "add674ed225a00d20ed1fd18216799fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11973,
        "upload_time": "2020-08-10T22:11:52",
        "upload_time_iso_8601": "2020-08-10T22:11:52.334502Z",
        "url": "https://files.pythonhosted.org/packages/4d/32/df062a16f90f0af5742979e656083004170d4911fea96ccef9a2d9bddc83/Password_Validation-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6032693f45dc1ef070d6126ebd99fc45fa8500955ebed9d7ad682414c49ec4d5",
          "md5": "ae11528756c34036ed280aeb14ff7be6",
          "sha256": "9c23c742230acc7fb54a063a709a848f35eff314656a27e7ca104fe7befb2eeb"
        },
        "downloads": -1,
        "filename": "Password Validation-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae11528756c34036ed280aeb14ff7be6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11391,
        "upload_time": "2020-08-10T22:11:53",
        "upload_time_iso_8601": "2020-08-10T22:11:53.640630Z",
        "url": "https://files.pythonhosted.org/packages/60/32/693f45dc1ef070d6126ebd99fc45fa8500955ebed9d7ad682414c49ec4d5/Password%20Validation-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d32df062a16f90f0af5742979e656083004170d4911fea96ccef9a2d9bddc83",
        "md5": "add674ed225a00d20ed1fd18216799fc",
        "sha256": "b03904ff2a58e66b7902b60a21161b0b328fef3d75b330f50f58fa979ac2b234"
      },
      "downloads": -1,
      "filename": "Password_Validation-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "add674ed225a00d20ed1fd18216799fc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11973,
      "upload_time": "2020-08-10T22:11:52",
      "upload_time_iso_8601": "2020-08-10T22:11:52.334502Z",
      "url": "https://files.pythonhosted.org/packages/4d/32/df062a16f90f0af5742979e656083004170d4911fea96ccef9a2d9bddc83/Password_Validation-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6032693f45dc1ef070d6126ebd99fc45fa8500955ebed9d7ad682414c49ec4d5",
        "md5": "ae11528756c34036ed280aeb14ff7be6",
        "sha256": "9c23c742230acc7fb54a063a709a848f35eff314656a27e7ca104fe7befb2eeb"
      },
      "downloads": -1,
      "filename": "Password Validation-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ae11528756c34036ed280aeb14ff7be6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11391,
      "upload_time": "2020-08-10T22:11:53",
      "upload_time_iso_8601": "2020-08-10T22:11:53.640630Z",
      "url": "https://files.pythonhosted.org/packages/60/32/693f45dc1ef070d6126ebd99fc45fa8500955ebed9d7ad682414c49ec4d5/Password%20Validation-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}