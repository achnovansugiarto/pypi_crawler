{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# Cacheable Iterators\nA simple tool to assist caching iterators response (lazy computations remain lazy).\nSupports computations for the following return types:\n\n - `Iterator[T]`\n - `Awaitable[Iterator[T]]`\n - `AsyncIterator[T]`\n\nRead [full documentation] online.\n\nFor simple or asynchronous iterators it can use either built-in\n`functools.cache` (or its replacement `cacheable_iter.helpers.simple_cache`),\n`functools.lru_cache`, or any other appropriate cache engine.\nFor awaitable iterators it should use coroutine-compatible caches,\nthe default (bundled) solution is `async_lru.alru_cache` (PyPI: [async_lru]).\n\nAlso works for methods and/or class methods, as well as with bound methods,\nas long as the caching engine supports them.\n\n## Usage\nTo make generator-like function be cacheable, simply decorate it with one of the following functions:\n\n - `cacheable_iter.core.iter_cache` or `cacheable_iter.core.lru_iter_cache` - for functions those return `Iterator[T]`\n - `cacheable_iter.core.alru_iter_cache` - for functions those return `Awaitable[Iterator[T]]`\n - `cacheable_iter.core.lru_async_iter_cache` - for functions those return `AsyncIterator[T]`\n\n### Caching Simple Iterator\n```python\nfrom typing import *\nfrom cacheable_iter import iter_cache\n\n@iter_cache\ndef iterator_function(n: int) -> Iterator[int]:\n    yield from range(n)\n```\n\n### Caching Awaitable Iterator\n```python\nimport asyncio\nfrom typing import *\nfrom cacheable_iter import alru_iter_cache\n\n@alru_iter_cache\nasync def awaitable_iterator_function(n: int) -> Iterator[int]:\n    gen = iterator_function(n)\n    await asyncio.sleep(0.5)\n    return gen\n\n```\n\n### Caching Asynchronous Iterator\n```python\nimport asyncio\nfrom typing import *\nfrom cacheable_iter import lru_async_iter_cache\n\n@lru_async_iter_cache\nasync def async_iterator_function(n: int) -> AsyncIterator[int]:\n    for _ in await awaitable_iterator_function(n):\n        yield _\n        await asyncio.sleep(0.5)\n```\n\n### Example\nThis package provides a few decorators to wrap iterators.\nThey all support lazy computations,\nso if an iterator is not iterated, the values are not computed.\n(This is safe to use with infinite or endless iterators like counters.)\n\n```python\nfrom typing import *\nfrom cacheable_iter import iter_cache\n\n@iter_cache\ndef my_iter(n: int) -> Iterator[int]:\n    print(\" * my_iter called\")\n    for i in range(n):\n        print(f\" * my_iter step {i}\")\n        yield i\n\ngen1 = my_iter(4)\nprint(\"Creating an iterator...\")\nprint(f\"The first value of gen1 is {next(gen1)}\")\nprint(f\"The second value of gen1 is {next(gen1)}\")\n\ngen2 = my_iter(4)\nprint(\"Creating an iterator...\")\nprint(f\"The first value of gen2 is {next(gen2)}\")\nprint(f\"The second value of gen2 is {next(gen2)}\")\nprint(f\"The third value of gen2 is {next(gen2)}\")\n```\n\nThe code snippet above would print the following:\n```\nCreating an iterator...\n * my_iter called\n * my_iter step 0\nThe first value of gen1 is 0\n * my_iter step 1\nThe second value of gen1 is 1\nCreating an iterator...\nThe first value of gen2 is 0\nThe second value of gen2 is 1\n * my_iter step 2\nThe third value of gen2 is 2\n```\n\n\n## Principe of Work\nLike in caching, the function is wrapped around with the new one\nwhich, however, instead of checking the function arguments,\ntransforms the result into a special helper class\n(either `CachedIterable[T]` or `CachedAsyncIterable[T]`).\n\nThen the caching happens -- instead of storing the iterator itself it stores wrapper over it.\nWhen the cache value is extracted, both `CachedIterable[T]` and `CachedAsyncIterable[T]`\nare transformed into `CachedIterator[T]` or `CachedAsyncIterator[T]` respectively.\n(This is done by calling their `__iter__` and `__aiter__` methods.)\n\nSo, the client always receive an `Iterator[T]` (or analogue) rather then `Iterable[T]`.\nWhen the client reads from the iterator wrapper,\nthe iterator checks the internal `CachedIterable`/`CachedAsyncIterable` cache\nand, if nothing found, asks the next value of the parent iterator which is then saved.\n`CachedIterable`/`CachedAsyncIterable` classes also take note when the iterator is ended to prevent ask an ended stream.\n\n\n### For Simple Iterators\n - Call function => `Iterator[T]`\n - Wrap result to `CachedIterable[T]`\n - Save result to the cache\n - Transform `CachedIterable[T]` to `CachedIterator[T]`\n - Iterate\n\nDecorate with: `cacheable_iter.core.iter_cache` or `cacheable_iter.core.lru_iter_cache`.\n\n### For Awaitable Iterators\n - Call function => `Awaitable[Iterator[T]]`\n - Wrap result to `Awaitable[CachedIterable[T]]`\n - Save result to async cache\n - Transform `Awaitable[CachedIterable[T]]` to `Awaitable[CachedIterator[T]]`\n - Await\n - Iterate\n\nDecorate with: `cacheable_iter.core.alru_iter_cache`.\n\n### For Asynchronous Iterators\n - Call function => `AsyncIterator[T]`\n - Wrap result to `CachedAsyncIterable[T]`\n - Save result to async cache\n - Transform `CachedAsyncIterable[T]` to `CachedAsyncIterator[T]`\n - Asynchronously iterate\n\nDecorate with: `cacheable_iter.core.lru_async_iter_cache`.\n\n<!-- Region: Links -->\n[async_lru]: https://pypi.org/project/async_lru/\n[Full Documentation]: https://hares-lab.gitlab.io/cacheable-iterators\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/Hares-Lab/cacheable-iterators",
    "keywords": "",
    "license": "BSD 2-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cacheable-iterators",
    "package_url": "https://pypi.org/project/cacheable-iterators/",
    "platform": "",
    "project_url": "https://pypi.org/project/cacheable-iterators/",
    "project_urls": {
      "Homepage": "https://gitlab.com/Hares-Lab/cacheable-iterators"
    },
    "release_url": "https://pypi.org/project/cacheable-iterators/0.1.1/",
    "requires_dist": [
      "async-lru (~=1.0.2)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Python decorators for caching functions returning iterators",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10721559,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1ba27b9020162a4e84762a341c2ce3e215944154a9df1ff1b968618251d7dab",
          "md5": "19b09e379900d8c191472550b3609c7c",
          "sha256": "2ec8b45809e1045198f06665e45561ad5a00718b12f96dcf3ddf97f48dca6d59"
        },
        "downloads": -1,
        "filename": "cacheable_iterators-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19b09e379900d8c191472550b3609c7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 8617,
        "upload_time": "2021-06-18T16:55:06",
        "upload_time_iso_8601": "2021-06-18T16:55:06.398325Z",
        "url": "https://files.pythonhosted.org/packages/c1/ba/27b9020162a4e84762a341c2ce3e215944154a9df1ff1b968618251d7dab/cacheable_iterators-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19f0bf161753105c3e16a76e670a48fa0a4a400e2c6b09aea9107af2bc880f2b",
          "md5": "099649d33bc97d0bcc2cda58e295ea16",
          "sha256": "df213c27fa7460cdd31ec3a67649bb796eace2f9ea4d5780cf1b049da629f3b2"
        },
        "downloads": -1,
        "filename": "cacheable_iterators-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "099649d33bc97d0bcc2cda58e295ea16",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 8619,
        "upload_time": "2021-06-23T13:35:36",
        "upload_time_iso_8601": "2021-06-23T13:35:36.498506Z",
        "url": "https://files.pythonhosted.org/packages/19/f0/bf161753105c3e16a76e670a48fa0a4a400e2c6b09aea9107af2bc880f2b/cacheable_iterators-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19f0bf161753105c3e16a76e670a48fa0a4a400e2c6b09aea9107af2bc880f2b",
        "md5": "099649d33bc97d0bcc2cda58e295ea16",
        "sha256": "df213c27fa7460cdd31ec3a67649bb796eace2f9ea4d5780cf1b049da629f3b2"
      },
      "downloads": -1,
      "filename": "cacheable_iterators-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "099649d33bc97d0bcc2cda58e295ea16",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 8619,
      "upload_time": "2021-06-23T13:35:36",
      "upload_time_iso_8601": "2021-06-23T13:35:36.498506Z",
      "url": "https://files.pythonhosted.org/packages/19/f0/bf161753105c3e16a76e670a48fa0a4a400e2c6b09aea9107af2bc880f2b/cacheable_iterators-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}