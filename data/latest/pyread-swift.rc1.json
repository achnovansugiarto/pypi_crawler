{
  "info": {
    "author": "",
    "author_email": "Stuart McAlpine <stuart.mcalpine@fysik.su.se>",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "## An MPI read routine for Swift simulation snapshots\n\n``pyread_swift`` is an MPI read routine for [``swiftsim``](https://github.com/SWIFTSIM/swiftsim) snapshots, very similar in style to John Helly's [``read_eagle``](https://gitlab.cosma.dur.ac.uk/jch/Read_Eagle) code to read EAGLE snapshots.\n\nThe package can read ``swiftsim`` snapshots both in \"collective\" (i.e., multiple MPI ranks read from a single file simultaneously) and \"distributed\" (i.e., each MPI reads an individual snapshot file part in isolation) modes. \n\nCan also read in pure serial, if no MPI libraries are installed.\n\n## Installation\n\n### Requirements\n\n* `OpenMPI` or other MPI library\n* `python>=3.8`\n\nRecommended modules when working on COSMA7:\n\n* `module load gnu_comp/11.1.0 openmpi/4.1.4 parallel_hdf5/1.12.0 python/3.9.1-C7`\n\n### Installation from source\n\nGiven the need for a parallel HDF5 installation, it is recommended you install ``pyread_swift`` within a virtual/conda environment. However you can ofcourse also install directly into your base Python environment if you prefer.\n\nFirst make sure your `pip` is up-to-date:\n\n* `python3 -m pip install --upgrade pip`\n\nThen you can install the `pyread_swift` package by typing the following in\nthe root git directory: \n\n* `python3 -m pip install .[mpi]`\n\nwhich will install `pyread_swift` and any dependencies (omit ``[mpi]`` for pure serial version).\n\n### MPI installation for collective reading\n\nIf you are using `pyread_swift` to load large snapshots over MPI collectively\n(i.e., multiple cores read in parallel from the same file), a bit of additional\nsetup is required.\n\nMake sure you have `hdf5` installed with **parallel** compatibility ([see here for details](https://docs.h5py.org/en/stable/mpi.html)).\n\nThen, uninstall any installed versions of `mpi4py` and `h5py`:\n\n* `python3 -m pip uninstall mpi4py h5py`\n\nand reinstall then from source, with MPI flags:\n\n* `MPICC=mpicc CC=mpicc HDF5_MPI=\"ON\" python3 -m pip install --no-binary=mpi4py mpi4py`\n\n* `MPICC=mpicc CC=mpicc HDF5_MPI=\"ON\" python3 -m pip install --no-binary=h5py h5py`\n\nIf `pip` struggles to find your `HDF5` libraries automatically, e.g., `error: libhdf5.so: cannot open shared object file: No such file or directory`. You may have to specify the path to the HDF5 installation manually, i.e., `HDF5_DIR=/path/to/hdf5/lib` (see [here](https://docs.h5py.org/en/stable/build.html#building-against-parallel-hdf5) for more details).\n\nFor our COSMA7 setup, that would be:\n\n`HDF5DIR=\"/cosma/local/parallel-hdf5//gnu_11.1.0_ompi_4.1.4/1.12.0/\"`\n\n## Usage\n\n``pyread_swift`` is build around a primary read wrapper, called ``SwiftSnapshot``. The snapshot particles are loaded into, stored, and manipulated by this object.\n\nReading follows the same four steps (see also the examples below):\n\n* Initialize a ``SwiftSnapshot`` object pointing to the location of the HDF5 file.\n\n* Select the spatial region you want to extract the particles from using the ``select_region()`` routine.\n\n* Split the selection over the MPI ranks using the ``split_selection()`` routine.\n\n* Read a selected property of the particles using the ``read_dataset()`` routine.\n\n### Input parameters to SwiftSnapshot\n\n| Input | Description | Default option |\n| ----- | ----------- | --------- |\n| fname | Full path to HDF5 snapshot file. If the snapshot is split over multiple files, this can just be one of the file parts | - |\n| comm= | MPI4PY communicator (if reading in MPI) | None |\n| verbose= | True for more a more verbose output | False |\n| mpi_read_format= | How to read the snapshot in MPI mode (\"collective\" or \"distributed\") <br><br>\"collective\": Do a collective read of each file, i.e., all ranks read a single file at one. Recommended for single, or few large snapshot file(s). Requires parallel-hdf5 to be installed. <br><br>\"distributed\": Each rank reads its own file part. Recommended for multiple smaller files. | \"collective\" |\n| max_concur_io= | When reading in MPI, how many HDF5 files can be open at once | 64 |\n\n### Example usage (No MPI case)\n\n```python\nfrom pyread_swift import SwiftSnapshot\n\n# Set up pyread_swift object pointing at HDF5 snapshot file (or a file part). \nsnapshot = \"/path/to/snap/part.0.hdf5\"\nswift = SwiftSnapshot(snapshot)\n\n# Select region to load from.\nparttype = 1 # Dark matter\nregion = [0,100,0,100,0,100] # [xlo,xhi,ylo,yhi,zlo,zhi]\nswift.select_region(parttype, *region)\n\n# Divide selection between ranks (needs to be invoked even for non-mpi case).\nswift.split_selection()\n\n# Read data.\nids = swift.read_dataset(parttype, \"ParticleIDs\")\n```\n\n### Example usage (MPI case)\n\n```python\nfrom mpi4py import MPI\nfrom pyread_swift import SwiftSnapshot\n\n# MPI communicator.\ncomm = MPI.COMM_WORLD\n\n# Set up read_swift object pointing at HDF5 snapshot file (or a file part). \nsnapshot = \"/path/to/snap/part.0.hdf5\"\nswift = SwiftSnapshot(snapshot, comm=comm)\n\n# Select region to load from.\nparttype = 1 # Dark matter\nregion = [0,100,0,100,0,100] # [xlo,xhi,ylo,yhi,zlo,zhi]\nswift.select_region(parttype, *region)\n\n# Divide selection between ranks.\nswift.split_selection()\n\n# Read data.\nids = swift.read_dataset(parttype, \"ParticleIDs\")\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "swiftsim,simulations,mpi,numerical",
    "license": "BSD 3-Clause License  Copyright (c) 2022, LSST Dark Energy Science Collaboration (DESC) All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyread-swift",
    "package_url": "https://pypi.org/project/pyread-swift/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyread-swift/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyread-swift/1.0.0/",
    "requires_dist": [
      "numpy",
      "h5py",
      "pytest ; extra == 'ci'",
      "mpi4py ; extra == 'ci_mpi'",
      "pytest-mpi ; extra == 'ci_mpi'",
      "mpi4py ; extra == 'mpi'"
    ],
    "requires_python": ">=3.8",
    "summary": "Package to read SWIFT simulation snapshots in MPI.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16715720,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81d9364eda17bb29fa2bccee1668a933151dbb168e82786c1d9ea3ff3e4c2191",
          "md5": "d4512926847e395b174e038cfcf4541a",
          "sha256": "e53c1919e4a967ed3fe928e68ad50d132a50760095d64a2779e66f4753454f7d"
        },
        "downloads": -1,
        "filename": "pyread_swift-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4512926847e395b174e038cfcf4541a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16492,
        "upload_time": "2023-02-06T18:41:50",
        "upload_time_iso_8601": "2023-02-06T18:41:50.327299Z",
        "url": "https://files.pythonhosted.org/packages/81/d9/364eda17bb29fa2bccee1668a933151dbb168e82786c1d9ea3ff3e4c2191/pyread_swift-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3113986c6e894a54c0fb6684852b9225b7cabe54fa01fefeb38816ef07df293",
          "md5": "847ef0b205e6ac6178fe0e8b1c21cb2e",
          "sha256": "cf0d1ac91849ad768711c996894b3ec9220f6e124136c84be39d72e5124f9c9d"
        },
        "downloads": -1,
        "filename": "pyread_swift-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "847ef0b205e6ac6178fe0e8b1c21cb2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16179,
        "upload_time": "2023-02-06T18:41:52",
        "upload_time_iso_8601": "2023-02-06T18:41:52.654363Z",
        "url": "https://files.pythonhosted.org/packages/a3/11/3986c6e894a54c0fb6684852b9225b7cabe54fa01fefeb38816ef07df293/pyread_swift-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81d9364eda17bb29fa2bccee1668a933151dbb168e82786c1d9ea3ff3e4c2191",
        "md5": "d4512926847e395b174e038cfcf4541a",
        "sha256": "e53c1919e4a967ed3fe928e68ad50d132a50760095d64a2779e66f4753454f7d"
      },
      "downloads": -1,
      "filename": "pyread_swift-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d4512926847e395b174e038cfcf4541a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 16492,
      "upload_time": "2023-02-06T18:41:50",
      "upload_time_iso_8601": "2023-02-06T18:41:50.327299Z",
      "url": "https://files.pythonhosted.org/packages/81/d9/364eda17bb29fa2bccee1668a933151dbb168e82786c1d9ea3ff3e4c2191/pyread_swift-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3113986c6e894a54c0fb6684852b9225b7cabe54fa01fefeb38816ef07df293",
        "md5": "847ef0b205e6ac6178fe0e8b1c21cb2e",
        "sha256": "cf0d1ac91849ad768711c996894b3ec9220f6e124136c84be39d72e5124f9c9d"
      },
      "downloads": -1,
      "filename": "pyread_swift-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "847ef0b205e6ac6178fe0e8b1c21cb2e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 16179,
      "upload_time": "2023-02-06T18:41:52",
      "upload_time_iso_8601": "2023-02-06T18:41:52.654363Z",
      "url": "https://files.pythonhosted.org/packages/a3/11/3986c6e894a54c0fb6684852b9225b7cabe54fa01fefeb38816ef07df293/pyread_swift-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}