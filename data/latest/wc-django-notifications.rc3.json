{
  "info": {
    "author": "WebCase",
    "author_email": "info@webcase.studio",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Django notifications\n\nModular notifications system for your django applications.\n\n## Installation\n\n```sh\npip install wc-django-notifications\n```\n\nIn `settings.py`:\n\n```python\nINSTALLED_APPS += [\n  # ...\n  'wcd_notifications',\n]\n\nWCD_NOTIFICATIONS = {\n  # Resolving function to get recipients from request.\n  # Using mostly by API.\n  'RECIPIENTS_RESOLVER': 'wcd_notifications.utils.default_resolve_recipients',\n  # Pipeline functions for additional notifications instances preparation.\n  'PREPARATION_PIPELINE': [],\n  # Pipeline functions that handle notification flag changes.\n  'CHANGE_FLAG_PIPELINE': [\n    # Resolves readability flags intersection.\n    'wcd_notifications.services.manager.set_readability_flags_operation',\n  ],\n}\n```\n\n## Usage\n\n### Sending notifications\n\n```python\nfrom wcd_notifications.services import notifier\n\n\nnotifications = notifier.send(\n  # Simple formattable string.\n  # `.format` method will be applied during `send` event.\n  # For example:\n  '{actor} created new {action} after leaving {target}.',\n  # Recipient objects list.\n  [user1, user2],\n  # Optional. Object that performed activity.\n  actor=None,\n  # Optional. Action object, that was performed.\n  action=None,\n  # Optional. Target object to which the activity was performed.\n  target=None,\n  # Parent notification. If exists.\n  parent=None,\n  # Initial flags that a message will have.\n  flags=[],\n  # Some extra data that will be stored in json field.\n  extra={},\n  # Recipients can receive this message after some time.\n  send_at=None,\n  # Can send with different current time.\n  now=None,\n  batch_size=None,\n)\n```\n\nNotifications send method has several breakpoints on which you may add additional handlers for a common situations:\n\n1. Each notification separately will run preparation pipeline from `Notification.preparator`. It's an instances of `px_pipline.Filter` so you may add or remove them.\n2. Then preparation pipeline from `settings.PREPARATION_PIPELINE` will be run on all new notification instances.\n3. Notifications will be created.\n4. For each notification `wcd_notifications.signals.notification_sended` will be sent.\n4. For all new notifications `wcd_notifications.signals.notifications_sended` will be sent.\n5. There is already one `wcd_notifications.signals.notifications_sended` signal reciever. It will recollect stats for all the recipients that new notifications has.\n\n### Notification state management\n\nYou may change flags in three different ways:\n\n- `add` - List of flags to add.\n- `remove` - List of flags to remove.\n- `specify` - List of flags to set hard. `add` and `remove` parameters i this case will be ignored.\n\n```python\nfrom wcd_notifications.services import manager\n\n\n# For example we need to mark some notifications as `read`:\nmanager.change_flags(\n  Notification.objects.all(),\n  add=[Notification.Readability.READ],\n  # Empty specify list will be ignored.\n  specify=[],\n)\n```\n\nOnly read/unread flags are not enough. And you may use any numbers you wish as flags. It would be better to use `django.db.models.IntegerChoices` or at least `enum.Enum` to define different state groups.\n\nAnd it will be better if library could know about your flags.\n\nFor this case there is a simple flags registry:\n\n```python\nfrom enum import Enum\n\nfrom wcd_notifications.models import Notification\n\n\nclass OtherOptions(int, Enum):\n  ONE = 1\n  TWO = 2\n\n\n# Bu running this command you register your flags:\nNotification.flags_registry.add(OtherOptions)\n```\n\nFlags change method also has it's own breakpoints to extend:\n\n1. After all flag changes applied, but not saved pipeline from `settings.CHANGE_FLAG_PIPELINE` runs.\n2. All notification flags changes are saved to database.\n3. Signal `wcd_notifications.signals.notifications_flags_changed` sended.\n3. Signal `wcd_notifications.signals.notifications_updated` sended.\n\n### Querying\n\nNotifications queryset has additional methods, for easier querying:\n\n```python\nfrom wcd_notifications.models import Notification\n\n\nqs = (\n  Notification.objects\n  # To find only read notifications.\n  .read()\n  # To find only new notifications.\n  .unread()\n  # To filter by recipients:\n  .recipients([])\n  # Actors:\n  .actors([])\n  # Actions:\n  .actions([])\n  # Targets:\n  .targets([])\n  # To display only already sended messages.\n  .sended(now=None)\n)\n```\n\n### Stats\n\nReading information about notifications state is far more frequent action, that notifications change/sending. So library \"caches\" state data into database and updates it after any change occured.\n\nThere is only one simple SELECT operation to get state for any recipients:\n\n```python\nfrom wcd_notifications.models import Stats\n\n\n# For one recipient there is at most one stats object exists.\nuser_stats = Stats.objects.recipients([user]).first()\n```\n\nCollecting stats are automatically happens in management methods. But there could be cases when notifications are updated by hand. In that case you should collect stats manually:\n\n```python\nfrom wcd_notifications.services import manager\n\n\n# You may pass a recipients list here or manual `None` if stats for all\n# recipients must be updated.\nmanager.collect_stats([user1])\n```\n\n## Contrib\n\n### DRF\n\nThere are ready for use frontend for django rest framework.\n\n```python\nINSTALLED_APPS += [\n  # ...\n  'wcd_notifications.contrib.drf',\n\n  # Django filters required for api to work.\n  'django_filters',\n  'rest_framework',\n]\n\nIn `urls.py`:\n\n```python\nfrom wcd_notifications.contrib.drf.views import make_urlpatterns\n\nurlpatters = [\n  ...\n  path('api/v1/notifications/', include(make_urlpatterns(\n    # Here you can replace any view by your own customized one.\n  ))),\n]\n```\n\nIt will add 5 views there:\n\n#### `GET[/api/v1/notifications/flags/list/]`\n\nReturns list of all available flags.\n\n#### `GET[/api/v1/notifications/notifications/list/]`\n\nPaginatable list of notifications.\n\nFilters that can be applied:\n\n- **ids**: List of identifiers to filter over:\n\n  `&ids=1,2,3&ids=4,6` - There can be mutiple same named fields. Comma ',' could be also a separator for multiple values. Or operator used for all identifiers.\n\n- **actors**: List of actors to filter on:\n\n  `&actors=auth.user~1,auth.user~2&actors=auth.user~4` - There can be mutiple same named fields. Comma ',' could be also a separator for multiple values. Or operator used for all identifiers.\n\n  One value to filter on is: `{object_type}~{object_id}`.\n\n- **actions**: Same as **actors**.\n- **targets**: Same as **actors**.\n- **actor_types**: List of types for filter on:\n\n  `&actor_types=auth.user,muapp.mymodel&actor_types=otherapp.othermodel` - There can be mutiple same named fields. Comma ',' could be also a separator for multiple values. Or operator used for all identifiers.\n\n- **action_types**: Same as **actor_types**.\n- **target_types**: Same as **actor_types**.\n- **sended_at_before**: Filter by the time >= notification was sended. ISO datetime.\n- **sended_at_after**: Filter by the time <= notification was sended. ISO datetime.\n- **is_sended**: Get only already sended notifications.\n- **is_root**: Since notifications are hierarchical you may only need a root notifications.\n- **parents**: List of parent identifiers to filter over:\n\n  `&parents=1,2,3&parents=4,6` - There can be mutiple same named fields. Comma ',' could be also a separator for multiple values. Or operator used for all identifiers.\n- **flags**: Filtering over flags is not that simple OR statement.\n\n  `&flags=1,2,3&flags=4,6` - Each comma ',' separated list considered as AND comparison. Or operator used between multiple `flags` fields.\n\n  So this example will lead to `(1 or 2 or 3) and (4 or 6)` comparison statement.\n\n#### `POST[/api/v1/notifications/notifications/set-flags/]`\n\nTo add specific flags to notifications(like `read` for example) you can use this method.\n\nNotifications can be filtered the same way as in `/notifications/list/` view.\n\nUnder the hood it uses `manager.change_flags` method, so data it requires works the same:\n\n```json\n{\n  \"add\": [1,2,4],\n  \"remove\": [6],\n  \"specify\": []\n}\n```\n\n#### `POST[/api/v1/notifications/notifications/clear/]`\n\nThis view deletes notifications by your will. What notifications should be deleted can be filtered the same way as in `/notifications/list/` view.\n\n#### `GET[/api/v1/notifications/notifications/stats/]`\n\nHere user can get a notifications statistics. There will be a list for each recipient that current authorization resolves in.\n\nEach recipient stats contains total count of notifications and notification counts for every flag exists in their notifications.\n\nSo this way you will find all read/unread messages for example.\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.1.1]\nInitial version.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wc-django-notifications",
    "package_url": "https://pypi.org/project/wc-django-notifications/",
    "platform": null,
    "project_url": "https://pypi.org/project/wc-django-notifications/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/wc-django-notifications/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Modular notifications system for your django applications.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15310838,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d149a7c0c8a5d287a5a57070f18601442acd15a09e783eabffba8ef826742ac7",
          "md5": "4813a7e13b0869496e66741b78001b43",
          "sha256": "4486b71bc11759807e7fe63272b9b6197d6d9f6d1744107f1a748feaa645fc28"
        },
        "downloads": -1,
        "filename": "wc-django-notifications-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4813a7e13b0869496e66741b78001b43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32929,
        "upload_time": "2022-10-05T10:05:56",
        "upload_time_iso_8601": "2022-10-05T10:05:56.787462Z",
        "url": "https://files.pythonhosted.org/packages/d1/49/a7c0c8a5d287a5a57070f18601442acd15a09e783eabffba8ef826742ac7/wc-django-notifications-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb85c4ca8ce70b0e8a61d2ee1667f8b13f94ab3b91883c21959cbc7089057a1c",
          "md5": "f6e0ac22a38f45d47c5a030f606ffe92",
          "sha256": "5a6e73f602986756978b8bb7dba1487188c8c319b8352545d423f520254d5370"
        },
        "downloads": -1,
        "filename": "wc-django-notifications-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6e0ac22a38f45d47c5a030f606ffe92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32895,
        "upload_time": "2022-10-05T10:16:01",
        "upload_time_iso_8601": "2022-10-05T10:16:01.616926Z",
        "url": "https://files.pythonhosted.org/packages/eb/85/c4ca8ce70b0e8a61d2ee1667f8b13f94ab3b91883c21959cbc7089057a1c/wc-django-notifications-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53839fbcb53cafb818b6dfd85c80f3820c0d8007615de04aa829fec0935ecdad",
          "md5": "7ddb8225bb6b4aaf6da1309773870b13",
          "sha256": "e62e075789e36b66e82a6a0be657637f2de2e7541eeac43dada1dcd0dd8ab596"
        },
        "downloads": -1,
        "filename": "wc-django-notifications-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7ddb8225bb6b4aaf6da1309773870b13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32806,
        "upload_time": "2022-10-05T10:20:59",
        "upload_time_iso_8601": "2022-10-05T10:20:59.975247Z",
        "url": "https://files.pythonhosted.org/packages/53/83/9fbcb53cafb818b6dfd85c80f3820c0d8007615de04aa829fec0935ecdad/wc-django-notifications-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53839fbcb53cafb818b6dfd85c80f3820c0d8007615de04aa829fec0935ecdad",
        "md5": "7ddb8225bb6b4aaf6da1309773870b13",
        "sha256": "e62e075789e36b66e82a6a0be657637f2de2e7541eeac43dada1dcd0dd8ab596"
      },
      "downloads": -1,
      "filename": "wc-django-notifications-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7ddb8225bb6b4aaf6da1309773870b13",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 32806,
      "upload_time": "2022-10-05T10:20:59",
      "upload_time_iso_8601": "2022-10-05T10:20:59.975247Z",
      "url": "https://files.pythonhosted.org/packages/53/83/9fbcb53cafb818b6dfd85c80f3820c0d8007615de04aa829fec0935ecdad/wc-django-notifications-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}