{
  "info": {
    "author": "Pablo Alessandro Santos Hugen",
    "author_email": "PabloASHugen@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.10"
    ],
    "description": "# hamming-check\n\nA command line tool and python library to encode and decode data using a generic (in byte size) hamming code algorithm.\n\n## Hamming Code\n\nHamming code is a set of error-correction codes that can be used to detect and correct the errors that can occur when the data\nis moved or stored from the sender to the receiver. It is technique developed by R.W. Hamming for error correction.\n\nYou can find more about it on his [Wikipedia Article](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjvkdeftJD3AhV_rpUCHRZBCS4QFnoECBIQAQ&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FHamming_code&usg=AOvVaw1bgDIw5XksNiMYziP2VeeQ), [MSU notes](https://users.math.msu.edu/users/halljo/classes/codenotes/Hamming.pdf) and in the awesome videos by [3Blue1Brown](https://www.youtube.com/c/3blue1brown): [Hamming pt1](https://www.youtube.com/watch?v=X8jsijhllIA) and [Hamming pt2](https://www.youtube.com/watch?v=b3NxrZOu_CE).\n\n## Installing\n\n### Locally\n\nClone the repo.\n\n```bash\ngit clone git@github.com:Tomcat-42/hamming_check.git\n```\n\nRun `setup.py`\n```bash\nsudo python setup.py install\n```\n\n### Using pip\n\n[`hamming_check`](https://pypi.org/project/hamming-check/) is available on [pypi](https://pypi.org).\n\n```bash\nsudo pip install hamming_check\n```\n\n## Command Line Interface\n\n### Description\n\n`hamming_check` is a cli tool that is intended to help creating secure copies of a file in a hamming encoded output file, and fixing that secure file for single bit corruptions. Also it can check for double bit corruptions, but could not fix that type of error.\n\n### Usage\n\n```\nusage: hamming_check [-h] (-e | -d) [-v] [-b BUFFER_SIZE]\n                     [input_file] [output_file]\n\npositional arguments:\n  input_file            file used for reading data. If not specified,\n                        data is read from stdin.\n  output_file           file used for writing data. If not specified,\n                        data is written to stdout.\n\noptions:\n  -h, --help            show this help message and exit\n  -e, --encode          encode a file into a hamming-encoded file\n  -d, --decode          decode a hamming-encoded file into a file\n  -v, --verbose         increase output verbosity (can be used\n                        multiple times)\n  -b BUFFER_SIZE, --buffer-size BUFFER_SIZE\n                        change the buffer size (in bytes) used for\n                        encoding/decoding\n```\n\n- **input_file**: original file that will be secure copied or a secure file that will be recovered. _If not provided, data will be read from STDIN_.\n- **output_file**: secure file that will be created from a file or a file that will be recovered from a secure file. _If not provided, data will be written to STDOUT_.\n- **-e|--encode**: Sets the encoding operation. _File_ -> _Secure File_.\n- **-d|--decode**: Sets the decoding operation. _Secure File_ -> _File_ with error checking/correction.\n- **-b|--buffer-size**: Sets the number of bytes that will be used for the hamming code, default is 1. Higher Values tends to speed up encoding.\n- **-v**: Sets the verbosity. If not provided, will be in quiet mode, if `-v`, only errors will be printed, `-vv` will print the result of the encoding/decoding operations and `-vvv` will print all of the hamming algorithm steps.\n- **-h**: prints the help text.\n\n#### Examples\n\n- **Encode the file cat.jpg into the secure file cat.jpg.wham** \n\n`hamming_check -e cat.jpg cat.jpg.wham`\n\n- **Decode the secure file cat.jpg.wham into the file cat.jpg.wham**\n\n`hamming_check -d cat.jpg.wham cat.jpg`\n\n- **Encode the file cat.jpg into the secure file cat.jpg.wham using a 4096 bytes hamming code**\n\n`hamming_check -e -b 4096 cat.jpg cat.jpg.wham`\n\n- **decode the secure file cat.jpg.wham into the file cat.jpg using a 4096 bytes hamming code**\n\n`hamming_check -d -b 4096 cat.jpg.wham cat.jpg`\n\n- **Encode the string \"test\" into the secure file file.txt.wham**\n\n`echo -n \"test\" | hamming_check -e file.txt.wham`\n\n- **Encode the string \"test\" and print the encoded result to STDOUT**\n\n`echo -n \"test\" | hamming_check -e`\n\n- **Decode the encoded string <STR> and print the decoded result to STOUT**\n\n`echo -n <STR> | hamming_check -d`\n\n- **Decode the encoded string <STR> and save the result to file.txt**\n\n`echo -n <STR> | hamming_check -d file.txt`\n\n- **Decode the file.txt.wham and print the results to STDOUT**\n\n`hamming_check -d file.txt.wham`\n\n## `hamming_check` library\n\n### Description\n\n`hamming_check` is a library for encoding and decoding binary data using the hamming code.\n\n### Usage\n\n#### `Hamming` Module\n\nEncode and decodes datas using the hamming code of a given `buffer_size` in bytes.\n\n```python\nfrom hamming_check import Hamming, DecodeStatus, DecodeResult, VerbosityTypes\n...\nhamming = Hamming(buffer_size=1, verbose=VerbosityTypes.QUIET)\nsize_of_encoded_data = hamming.get_number_of_output_bytes()\nencoded_data = hamming.encode(b't')\n...\ndecoded_result = hamming.decode(encode)\ndecoded_data, decoded_status = decoded_result.get_data(), decoded_result.get_status()\n```\n\n#### `io` Module\n\nAbstractions over files and bytes. The `Bytes` class is inherited from the [bitarray](https://pypi.org/project/bitarray/) and the `Files` class is just a wrapper for the python file interface.\n\n```python\nfrom hamming_check import Hamming, DecodeStatus, DecodeResult, VerbosityTypes, File, Bytes\n...\n\nhamming = Hamming(buffer_size=2, verbose=VerbosityTypes.QUIET)\ninput_file = File(open(\"input_file.txt\", \"rb\"), bytes_per_read=2)\noutput_file = File(open(\"output_file.txt\", \"wb\"))\n\n# read data, encodes it, flips a bit and then write\nfor data in input_file:\n  encoded_data = hamming.encode(data)\n  bytes = Bytes(encoded_data)\n  bytes[0] ^= 1\n  output_file.write(bytes.tobytes())\n\ninput_file.close()\noutput_file.close()\n```\n\n### Example\n\nSend a encoded file over the network and check it for corruption.\n\n#### Client Code\n\n- [client.py](./examples/send_over_network/client.py): Read a [image](./examples/send_over_network/really_cool_cat.jpg) 4096 bytes per time, encode that chunk of bytes, add a random noise to the encoded data and sends it over the network.\n\n```python\n#!/usr/bin/env python\nfrom random import randint, random\nimport socket\nfrom argparse import ArgumentParser\nfrom math import e\n\nfrom hamming_check.hamming import Hamming\n\n\ndef main():\n    # argparser\n    parser = ArgumentParser()\n    parser.add_argument(\"-p\", \"--port\", type=int, default=8080)\n    parser.add_argument(\"-f\", \"--file\", type=str)\n    parser.add_argument(\"-b\", \"--bytes\", type=int, default=4096)\n    parser.add_argument(\"-d\", \"--double-noise\", action=\"store_true\")\n    args = parser.parse_args()\n\n    # opens the socket connection and the file\n    s = socket.socket()\n    s.connect((\"localhost\", args.port))\n    filetosend = open(args.file, \"rb\")\n\n    # Hamming check\n    hamming = Hamming(args.bytes)\n    bytes_to_send = hamming.get_number_of_output_bytes()\n\n    # sends the encoded\n    while data := filetosend.read(args.bytes):\n        encoded_data = bytearray(hamming.encode(data))\n        # 30% chance of sending the data with noise\n        if random() > 0.3:\n            print(\"Sending data with noise\")\n            encoded_data[randint(0, bytes_to_send)] ^= 1 << randint(0, 7)\n        # if enabled, 50% of chance to add double noise to data\n        if args.double_noise and random() > 0.5:\n            print(\"Sending data with double noise\")\n            encoded_data[randint(0, bytes_to_send)] ^= 1 << randint(0, 7)\n        s.send(encoded_data)\n\n    filetosend.close()\n    s.send(b\"DONE\")\n    print(\"Done Sending.\")\n    s.shutdown(2)\n    s.close()\n    exit(0)\n\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\\nExiting...\")\n```\n\n#### Server Code\n\n- [server.py](./examples/send_over_network/client.py): Receives encoded data throught the network, decodes it, tries to recover noisy data and then sava it to a output file\n\n```python\n#!/usr/bin/env python\nimport socket\nfrom argparse import ArgumentParser\n\nfrom hamming_check.hamming import DecodeResult, DecodeStatus, Hamming\nfrom hamming_check.types.verbosity_types import VerbosityTypes\n\n\ndef main() -> None:\n    # ArgumentParser\n    parser = ArgumentParser()\n    parser.add_argument(\"-p\", \"--port\", type=int, default=8080)\n    parser.add_argument(\"-f\", \"--file\", type=str)\n    parser.add_argument(\"-b\", \"--bytes\", type=int, default=4096)\n    args = parser.parse_args()\n\n    # opens socket\n    s = socket.socket()\n    s.bind((\"localhost\", args.port))\n    s.listen(1)\n    c, a = s.accept()\n    filetodown = open(args.file, \"wb\")\n\n    # Hamming check\n    hamming = Hamming(args.bytes, VerbosityTypes.QUIET)\n    bytes_to_receive = hamming.get_number_of_output_bytes()\n\n    while True:\n        data = c.recv(bytes_to_receive, socket.MSG_WAITALL)\n\n        if data == b\"DONE\" or len(data) == 0:\n            print(\"Done Receiving.\")\n            break\n\n        encoded_data = hamming.decode(data)\n\n        # if status is not DecodeStatus.NO_ERROR or\n        # DecodeStatus.SINGLE_ERROR_CORRECTED, then we have a problem\n        bytes_received, status = encoded_data.get_data(\n        ), encoded_data.get_status()\n\n        if status == DecodeStatus.SINGLE_ERROR_CORRECTED:\n            print(\"One error detected, and corrected\")\n        elif status == DecodeStatus.DOUBLE_ERROR_DETECTED:\n            print(\"Two errors detected, your file is corrupted\")\n\n        filetodown.write(bytes_received)\n        filetodown.flush()\n\n    filetodown.close()\n    c.shutdown(2)\n    c.close()\n    s.close()\n\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\\nBye!\")\n```\n\n#### Putting all together\n\n#### Run server code\n\n```bash\n./examples/send_over_network/server.py -f out.jpg\n```\n\n#### Run client code\n\n```bash\n./examples/send_over_network/examples.py -f ./examples/send_over_network/really_cool_cat.jpg\n```\n\n#### Check out.jpg\n\nEven though was added noise to the data, the server was able to recover the image.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tomcat-42/hamming-check",
    "keywords": "hamming code sec dec",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hamming-check",
    "package_url": "https://pypi.org/project/hamming-check/",
    "platform": null,
    "project_url": "https://pypi.org/project/hamming-check/",
    "project_urls": {
      "Homepage": "https://github.com/tomcat-42/hamming-check"
    },
    "release_url": "https://pypi.org/project/hamming-check/1.0.2/",
    "requires_dist": [
      "bitarray"
    ],
    "requires_python": ">=3.7.*",
    "summary": "hamming-check: File integrity checker",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13505740,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2e06b7269deaae032d3792d15e0ac5fc2a239355d0ba2b9e0f25d4c5c717523",
          "md5": "fe191741fb9a593c1b7b96f47fdcab46",
          "sha256": "32b88691102ed2e30c62b194178ddbe5a59aa7bf7558d20af2ee49f3c68d6c0f"
        },
        "downloads": -1,
        "filename": "hamming_check-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe191741fb9a593c1b7b96f47fdcab46",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.*",
        "size": 18277,
        "upload_time": "2022-04-13T13:19:11",
        "upload_time_iso_8601": "2022-04-13T13:19:11.911112Z",
        "url": "https://files.pythonhosted.org/packages/c2/e0/6b7269deaae032d3792d15e0ac5fc2a239355d0ba2b9e0f25d4c5c717523/hamming_check-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb7e90628985b621ea6eef1b653ab90d30a9913e4e9a85cc85bec605af46f817",
          "md5": "ba3ff589841a254b524fec5553b37155",
          "sha256": "24841a740fcabff26abdab6926d369545050e33fc2b67f277cd0cc887d1d3356"
        },
        "downloads": -1,
        "filename": "hamming-check-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ba3ff589841a254b524fec5553b37155",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.*",
        "size": 15639,
        "upload_time": "2022-04-13T13:19:14",
        "upload_time_iso_8601": "2022-04-13T13:19:14.468090Z",
        "url": "https://files.pythonhosted.org/packages/bb/7e/90628985b621ea6eef1b653ab90d30a9913e4e9a85cc85bec605af46f817/hamming-check-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0998ae941f94dfa5d0cb8484661557dbbbada00b09cd35330538cbdbc5354c04",
          "md5": "1a420e46301f21e31c008e44a7e81e58",
          "sha256": "c5063107e3fa1c0221fec55d551efb6ae76388dccd893a3d0627804cd49f26fd"
        },
        "downloads": -1,
        "filename": "hamming_check-1.0.0-py3.10.egg",
        "has_sig": false,
        "md5_digest": "1a420e46301f21e31c008e44a7e81e58",
        "packagetype": "bdist_egg",
        "python_version": "1.0.0",
        "requires_python": ">=3.7.*",
        "size": 37714,
        "upload_time": "2022-04-13T17:57:16",
        "upload_time_iso_8601": "2022-04-13T17:57:16.056496Z",
        "url": "https://files.pythonhosted.org/packages/09/98/ae941f94dfa5d0cb8484661557dbbbada00b09cd35330538cbdbc5354c04/hamming_check-1.0.0-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99e2b135995d456c22a5079718ea116f194580ca54ff2163b46a0a8baed1efa4",
          "md5": "81b3d58e5347eea3cfbd75ca083daf43",
          "sha256": "fb71bc838c5e9f2625ff23dbd1e81dcfc75ec01a836df4613e0855c8ea14ece0"
        },
        "downloads": -1,
        "filename": "hamming_check-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81b3d58e5347eea3cfbd75ca083daf43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.*",
        "size": 18392,
        "upload_time": "2022-04-13T13:42:12",
        "upload_time_iso_8601": "2022-04-13T13:42:12.151104Z",
        "url": "https://files.pythonhosted.org/packages/99/e2/b135995d456c22a5079718ea116f194580ca54ff2163b46a0a8baed1efa4/hamming_check-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6181756362eab18bac5829e56f5ab0ec83a1f4fb079f16d58e1e8cc98e757f0d",
          "md5": "966b3547fc3ce873c3b01f18c37a163a",
          "sha256": "3f78ff9e91dc0fafc4f818e8c7e4712399174da7835bab00d19c537aa861acd3"
        },
        "downloads": -1,
        "filename": "hamming-check-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "966b3547fc3ce873c3b01f18c37a163a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.*",
        "size": 15881,
        "upload_time": "2022-04-13T13:42:14",
        "upload_time_iso_8601": "2022-04-13T13:42:14.446227Z",
        "url": "https://files.pythonhosted.org/packages/61/81/756362eab18bac5829e56f5ab0ec83a1f4fb079f16d58e1e8cc98e757f0d/hamming-check-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4462ddf54bec1bc8a4be1c8f6a1147b9e951be3e665c9de2e07d7e64fd6880aa",
          "md5": "6a8b968b9013b8ae6d2e986dbbde0e89",
          "sha256": "8e3d984a9918cb8d4633283f00d3f8830aa3ace4f8b122918ffd1f0c2c033612"
        },
        "downloads": -1,
        "filename": "hamming_check-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a8b968b9013b8ae6d2e986dbbde0e89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.*",
        "size": 18400,
        "upload_time": "2022-04-13T17:57:13",
        "upload_time_iso_8601": "2022-04-13T17:57:13.467383Z",
        "url": "https://files.pythonhosted.org/packages/44/62/ddf54bec1bc8a4be1c8f6a1147b9e951be3e665c9de2e07d7e64fd6880aa/hamming_check-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7bbcb4c184883907547f0cb335f71de43b71b58bb269c506b2eefab76751ea2",
          "md5": "2435f26b08fa1ebd980a36cd86e2a848",
          "sha256": "75dfde94396700f6130b4c85e72c5222ca375be46819dbae063ecb87e1376e4f"
        },
        "downloads": -1,
        "filename": "hamming-check-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2435f26b08fa1ebd980a36cd86e2a848",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.*",
        "size": 15864,
        "upload_time": "2022-04-13T17:57:19",
        "upload_time_iso_8601": "2022-04-13T17:57:19.555211Z",
        "url": "https://files.pythonhosted.org/packages/e7/bb/cb4c184883907547f0cb335f71de43b71b58bb269c506b2eefab76751ea2/hamming-check-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5513d3a145a712132dcaaaf0d63749dba7749fa37e47e7fc0780459bcafd9fbd",
          "md5": "b05cc48dd08837ef1055d0f448f7c01a",
          "sha256": "86504aeae08dd48e855aba19e1aa51d3a6bc6ea7a8c4bd94f0754b6577c25742"
        },
        "downloads": -1,
        "filename": "hamming_check-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b05cc48dd08837ef1055d0f448f7c01a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.*",
        "size": 18403,
        "upload_time": "2022-04-13T19:01:39",
        "upload_time_iso_8601": "2022-04-13T19:01:39.216766Z",
        "url": "https://files.pythonhosted.org/packages/55/13/d3a145a712132dcaaaf0d63749dba7749fa37e47e7fc0780459bcafd9fbd/hamming_check-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a96494dd7d2d46e2a3bf0c4aeab532670673bade07b6d260dd5a30dff4195102",
          "md5": "953d2bf3116292716e7f8bf6bfadb9a4",
          "sha256": "1c711cbfcd478d8bd2c175bda09ce107d46105dc40f27c85ca47eae5ce8c1e2a"
        },
        "downloads": -1,
        "filename": "hamming-check-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "953d2bf3116292716e7f8bf6bfadb9a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.*",
        "size": 15855,
        "upload_time": "2022-04-13T19:01:41",
        "upload_time_iso_8601": "2022-04-13T19:01:41.219754Z",
        "url": "https://files.pythonhosted.org/packages/a9/64/94dd7d2d46e2a3bf0c4aeab532670673bade07b6d260dd5a30dff4195102/hamming-check-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5513d3a145a712132dcaaaf0d63749dba7749fa37e47e7fc0780459bcafd9fbd",
        "md5": "b05cc48dd08837ef1055d0f448f7c01a",
        "sha256": "86504aeae08dd48e855aba19e1aa51d3a6bc6ea7a8c4bd94f0754b6577c25742"
      },
      "downloads": -1,
      "filename": "hamming_check-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b05cc48dd08837ef1055d0f448f7c01a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.*",
      "size": 18403,
      "upload_time": "2022-04-13T19:01:39",
      "upload_time_iso_8601": "2022-04-13T19:01:39.216766Z",
      "url": "https://files.pythonhosted.org/packages/55/13/d3a145a712132dcaaaf0d63749dba7749fa37e47e7fc0780459bcafd9fbd/hamming_check-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a96494dd7d2d46e2a3bf0c4aeab532670673bade07b6d260dd5a30dff4195102",
        "md5": "953d2bf3116292716e7f8bf6bfadb9a4",
        "sha256": "1c711cbfcd478d8bd2c175bda09ce107d46105dc40f27c85ca47eae5ce8c1e2a"
      },
      "downloads": -1,
      "filename": "hamming-check-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "953d2bf3116292716e7f8bf6bfadb9a4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.*",
      "size": 15855,
      "upload_time": "2022-04-13T19:01:41",
      "upload_time_iso_8601": "2022-04-13T19:01:41.219754Z",
      "url": "https://files.pythonhosted.org/packages/a9/64/94dd7d2d46e2a3bf0c4aeab532670673bade07b6d260dd5a30dff4195102/hamming-check-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}