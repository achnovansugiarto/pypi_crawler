{
  "info": {
    "author": "Hengtao Tantai",
    "author_email": "deephub.ai@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "\n# torchhandle\n\nTorchHandle makes your PyTorch development more efficient and make you use PyTorch more comfortable\n\ntorchhandle is an auxiliary framework for PyTorch. It abstracts the cumbersome and repetitive training code of PyTorch, allowing data scientists to focus on data processing, model creation and arameter optimization instead of writing repetitive training loop codes.\n\nTorchhandle will make your code  more concise and readable, and make your development tasks more efficient.\n\n## Introduction\nTorchhandle abstractly organizes and extracts the training and inference process of Pytorch, build  deep learning pipeline of PyTorch only need a few lines of code.\n\nCustom training metrics, cross validation, early stop, gradient accumulation, checkpoint recovery, full training reporting, integrated Tensorboard visualization, and more are all available with a few simple options.\n\n[中文文档](docs/zh-cn/)\n\n### Install\n\n```bash\npip install -U torchhandle\n```\n\n\nTorchHandle requires very few dependent libraries to run. The recommended versions of the libraries are as follows\n\n- Python 3.6 +\n- PyTorch 1.5 + (1.1+ will ok, preferably 1.5 +)\n- tqdm 4.33.0 +\n- matplotlib\n- OS (Centos7, Ubuntu),Windows 10, Colab,Kaggle tested, MacOS not tested\n\n### Quick Start \n```python\n#model\nmodel = {\"fn\": \"model class\",\n         \"args\":\"Parameters that need to be passed to model\"# optional\n        } \n\n#loss function\ncriterion = {\"fn\": \"loss function  class\",\n             \"args\":\"Parameters that need to be passed\"# optional\n             }\n#optimizer\noptimizer = {\"fn\": \"optimizer class\",\n             \"args\":\"Parameters for create optimizer\",# optional\n             \"params\":\"different parameters of each  model layers\" # optional  see example 01\n            }\n# lr scheduler\nscheduler = {\"fn\": \"lr scheduler class\",\n             \"args\": \"scheduler arameters\",\n             \"type\": \"batch/epoch\" # call scheduler per epoch/batch  ,default epoch\n             }\n\n#dataloader\nloaders = {\"train\": \"train dataloader\",  \n           \"valid\": \"valid dataloader\" # optional \n           }\n```\n\n### Workflow object definition\n\nContext: The Context of the training environment, containing the model to be trained, optimizer, loss function, scheduler, and other parameter that not change in train loop\n\nSession: Session object is created according to the context. Each Session holds a separate model object, optimizer, etc. and cross-validation can be achieved by creating different sessions in  one Context\n\nMetric: Custom metrics\n\n## Examples\n\n<details>\n<summary>01 ML - MLP with different learning rate for specific layer</summary>\n<p>\n\n```python\n\nfrom collections import OrderedDict\nimport torch\nfrom torchhandle.workflow import BaseContext\n\n\nclass Net(torch.nn.Module):\n    def __init__(self, ):\n        super().__init__()\n        self.layer = torch.nn.Sequential(OrderedDict([\n            ('l1', torch.nn.Linear(10, 20)),\n            ('a1', torch.nn.ReLU()),\n            ('l2', torch.nn.Linear(20, 10)),\n            ('a2', torch.nn.ReLU()),\n            ('l3', torch.nn.Linear(10, 1))\n        ]))\n\n    def forward(self, x):\n        x = self.layer(x)\n        return x\n\nnum_samples, num_features = int(1e4), int(1e1)\nX, Y = torch.rand(num_samples, num_features), torch.rand(num_samples)\ndataset = torch.utils.data.TensorDataset(X, Y)\ntrn_loader = torch.utils.data.DataLoader(dataset, batch_size=64, num_workers=0, shuffle=True)\nloaders = {\"train\": trn_loader, \"valid\": trn_loader}\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nmodel = {\"fn\": Net}\ncriterion = {\"fn\": torch.nn.MSELoss}\noptimizer = {\"fn\": torch.optim.Adam,\n             \"args\": {\"lr\": 0.1},\n             \"params\": {\"layer.l1.weight\": {\"lr\": 0.01},\n                        \"layer.l1.bias\": {\"lr\": 0.02}}\n             }\nscheduler = {\"fn\": torch.optim.lr_scheduler.StepLR,\n             \"args\": {\"step_size\": 2, \"gamma\": 0.9}\n             }\n\nc = BaseContext(model=model,\n                criterion=criterion,\n                optimizer=optimizer,\n                scheduler=scheduler,\n                context_tag=\"ex01\")\ntrain = c.make_train_session(device, dataloader=loaders)\ntrain.train(epochs=10)\n```\n</p>\n</details>\n\n<details>\n<summary>02 ML - linear regression with early stopping by custom metrics and save all metrics to tensorboard</summary>\n<p>\n\n```python\n\nimport torch\n\nfrom torchhandle.workflow import BaseContext,Metric\n\nimport math\n\n\nclass C1(BaseContext):\n    def init_state_fn(self):\n        state=super().init_state_fn()\n        state.es_current_step=0\n        state.es_metric=1000\n        return state\n\n    def early_stopping_fn(self,session):\n        \"\"\"\n        return true to stop\n        \"\"\"\n        es_steps = 5\n        valid_loss = session.epoch_metric[\"valid_loss\"]\n        session.state.es_current_step=session.state.es_current_step+1\n        if valid_loss < session.state.es_metric:\n            session.state.es_metric=valid_loss\n            session.state.es_current_step=0\n        elif session.state.es_current_step >= es_steps:\n            return True\n\n        return False\n\nclass RMSE(Metric):\n    def __init__(self):\n        self.diff = None\n\n    def map(self, state):\n\n        target = state.target_batch.cpu().detach().unsqueeze(dim=1)\n        output = state.output_batch.cpu().detach()\n        if self.diff is None:\n            self.diff = torch.pow(target - output, 2)\n        else:\n            self.diff = torch.cat([self.diff, torch.pow(target - output, 2)], dim=0)\n\n    def reduce(self):\n        mse = torch.sum(self.diff) / self.diff.shape[0]\n        rmse = torch.sqrt(mse)\n        return [rmse]\n\n    @property\n    def name(self) -> list:\n        return [\"RMSE\"]\n\n    @property\n    def best(self) -> list:\n        return [\"min\"]\n\nnum_samples, num_features = int(1e4), int(1e1)\nX, Y = torch.rand(num_samples, num_features), torch.rand(num_samples)\ndataset = torch.utils.data.TensorDataset(X, Y)\ntrn_loader = torch.utils.data.DataLoader(dataset, batch_size=64, num_workers=0,shuffle=True)\nval_loader = torch.utils.data.DataLoader(dataset, batch_size=128, num_workers=0)\nloaders = {\"train\": trn_loader, \"valid\": val_loader}\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nmodel = {\"fn\": torch.nn.Linear,\n         \"args\": {\"in_features\": 10, \"out_features\": 1}\n         }\ncriterion = {\"fn\": torch.nn.MSELoss\n             }\noptimizer = {\"fn\": torch.optim.Adam\n             }\nmetric_fn = [{\"fn\": RMSE}]\nc = C1(model=model,\n                criterion=criterion,\n                optimizer=optimizer,\n                metric_fn=metric_fn,\n                output_dir=\"./outputs\",\n                logging_file=\"output.log\",\n                context_tag=\"ex02\")\ntrain = c.make_train_session(device, dataloader=loaders)\ntrain.train(epochs=100)\nprint(\"this line was not write to log file\")\n```\n</p>\n</details>\n\n<details>\n<summary>03 ML - Cross Validation </summary>\n<p>\n\n```python\n\nimport torch\nfrom torchhandle.workflow import BaseContext\n\n\nnum_samples, num_features = int(1e4), int(1e1)\n\nX, Y = torch.rand(num_samples, num_features), torch.rand(num_samples)\ndataset = torch.utils.data.TensorDataset(X, Y)\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nmodel = {\"fn\": torch.nn.Linear,\n         \"args\": {\"in_features\": 10, \"out_features\": 1}\n         }\ncriterion = {\"fn\": torch.nn.MSELoss\n             }\noptimizer = {\"fn\": torch.optim.Adam\n             }\nscheduler = {\"fn\": torch.optim.lr_scheduler.StepLR,\n             \"args\": {\"step_size\": 2, \"gamma\": 0.9}\n             }\nc = BaseContext(model=model,\n                criterion=criterion,\n                optimizer=optimizer,\n                scheduler=scheduler,\n                output_dir=\"./outputs\",\n                logging_file=\"log.txt\",\n                context_tag=\"ex03\")\nfor i in range(5):\n    # use all data just for  for demo , not actual Kford\n    trn_loader = torch.utils.data.DataLoader(dataset, batch_size=64, num_workers=0,shuffle=True)\n    val_loader = torch.utils.data.DataLoader(dataset, batch_size=128, num_workers=0)\n    loaders = {\"train\": trn_loader, \"valid\": val_loader}\n\n    session=c.make_train_session(device,dataloader=loaders,fold_tag=i)\n    session.train(10)\n```\n\n</p>\n</details>\n\n<details>\n<summary>04 CV mnist - Training built-in model and dataset using gradient accumulation</summary>\n<p>\n\n```python\n\nimport torch\n\nfrom torchvision import datasets, transforms,models\nfrom torchhandle.workflow import BaseContext,Metric\n\n\nclass Model(torch.nn.Module):\n\n    def __init__(self):\n        super(Model, self).__init__()\n        self.conv1 = torch.nn.Conv2d(1, 3, kernel_size=1)\n        self.resnet18=models.resnet18(pretrained=False,num_classes=10)\n\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x= self.resnet18(x)\n        return x\nclass ACCU(Metric):\n    def __init__(self):\n        self.target_list = None\n        self.pred_list = None\n\n        self.correct = None\n\n    @property\n    def name(self):\n        return [\"accuracy\", \"accuracy_score\"]\n\n    @property\n    def best(self):\n        return [\"max\", \"max\"]\n\n    def map(self, state):\n        target = state.target_batch.cpu().detach()\n        output = state.output_batch.cpu().detach()\n        pred = torch.argmax(output, 1)\n        # example 1 :suggest way cal metric\n\n        correct = (pred == target)\n        if self.correct is None:\n            self.correct = correct\n        else:\n            self.correct = torch.cat([self.correct, correct], dim=0)\n\n        # example 2 save output and cal by sklearn\n        if self.target_list is None:\n            self.target_list = target\n        else:\n            self.target_list = torch.cat([self.target_list, target], dim=0)\n        if self.pred_list is None:\n            self.pred_list = pred\n        else:\n            self.pred_list = torch.cat([self.pred_list, pred], dim=0)\n\n    def reduce(self):\n        # example 1\n        out1 = self.correct.sum().float() / self.correct.shape[0]\n        # example 2\n        out2 = accuracy_score(self.target_list.numpy(), self.pred_list.numpy())\n        return [out1, out2]\n\n\ntransform = transforms.Compose([transforms.ToTensor(),\n                                transforms.Normalize(mean=[0.5], std=[0.5])])\ndata_train = datasets.MNIST(root=\"./data/\",\n                            transform=transform,\n                            train=True,\n                            download=True)\n\ndata_test = datasets.MNIST(root=\"./data/\",\n                           transform=transform,\n                           train=False)\ntrn_loader = torch.utils.data.DataLoader(data_train, batch_size=256, num_workers=0,shuffle=True)\nval_loader = torch.utils.data.DataLoader(data_test, batch_size=512, num_workers=0)\nloaders = {\"train\": trn_loader, \"valid\": val_loader}\nmodel = {\"fn\": Model\n         }\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\ncriterion = {\"fn\": torch.nn.CrossEntropyLoss\n             }\noptimizer = {\"fn\": torch.optim.Adam\n             }\nscheduler = {\"fn\": torch.optim.lr_scheduler.StepLR,\n             \"args\": {\"step_size\": 2, \"gamma\": 0.9}\n             }\nc = BaseContext(model=model,\n                criterion=criterion,\n                optimizer=optimizer,\n                scheduler=scheduler,\n                metric_fn=[{\"fn\": ACCU}],\n                output_dir=\"./outputs\",\n                progress=20,\n                ga_step_size=4,\n                context_tag=\"ex04\")\nsession=c.make_train_session(device,loaders)\nsession.train(10)\n\n\n\n```\n\n</p>\n</details>\n\n<details>\n<summary>05 CV mnist - lr_scheduler per batch  </summary>\n<p>\n\n```python\n\nimport torch\n\nfrom torchvision import datasets, transforms,models\nfrom torchhandle.workflow import BaseContext\nclass Model(torch.nn.Module):\n\n    def __init__(self):\n        super(Model, self).__init__()\n        self.conv1 = torch.nn.Conv2d(1, 3, kernel_size=1)\n        self.resnet18=models.resnet18(pretrained=False,num_classes=10)\n\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x= self.resnet18(x)\n        return x\n\nclass C1(BaseContext):\n    # custom scheduler step for pass epoch\n    def scheduler_step_fn(self,session):\n        epoch = session.state.current_epoch\n        session.scheduler.step(epoch)\n\nEPOCHS=10\ntransform = transforms.Compose([transforms.ToTensor(),\n                                transforms.Normalize(mean=[0.5], std=[0.5])])\ndata_train = datasets.MNIST(root=\"./data/\",\n                            transform=transform,\n                            train=True,\n                            download=True)\n\ntrn_loader = torch.utils.data.DataLoader(data_train, batch_size=256, num_workers=0,shuffle=True)\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nmodel = {\"fn\": Model\n             }\noptimizer = {\"fn\": torch.optim.Adam\n             }\nscheduler = {\"fn\": torch.optim.lr_scheduler.CosineAnnealingWarmRestarts,\n             \"args\": {\"T_0\": EPOCHS // 3, \"T_mult\": 1,\"eta_min\":0,\"last_epoch\":-1},\n             \"type\" : \"batch\"\n             }\ncriterion = {\"fn\": torch.nn.CrossEntropyLoss}\nc = C1(model=model,\n                criterion=criterion,\n                optimizer=optimizer,\n                scheduler=scheduler,\n                context_tag=\"ex05\",\n                output_dir=\"./outputs\",\n                ga_steps=4)\nsession = c.make_train_session(device, {\"train\": trn_loader})\nsession.train(EPOCHS)\n\n```\n\n</p>\n</details>\n\n<p>more example please check examples fold and docs</p>\n\n## TODO\n\ninference function\n\nCheckpoint \n\nXLA（TPU） Support\n\nDistributed Training\n\nMore examples\n\n## Contact us\nIf you don't like GitHub issues, contact us at deephub.ai[at]gmail.com.\n\nIf you planning to contribute  bug fixes, please do PR.\n\nIf you planning to contribute new  features , please first open an issue and discuss the feature with us.\n\nIf you would like to start a collaboration between your team and deephub, or join our team for better deep learning development, you are always welcome.\n\nIf you have any questions, please feel free to send us an email, and we welcome and appreciate any kind of contribution and feedback.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/deephub-ai/torch-handle",
    "keywords": "PyTorch,Pipeline,Machine Learning,Distributed Computing,Deep Learning,Reinforcement Learning,Computer Vision,Natural Language Processing,Recommendation Systems",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchhandle",
    "package_url": "https://pypi.org/project/torchhandle/",
    "platform": null,
    "project_url": "https://pypi.org/project/torchhandle/",
    "project_urls": {
      "Homepage": "https://github.com/deephub-ai/torch-handle"
    },
    "release_url": "https://pypi.org/project/torchhandle/1.0.2209.1/",
    "requires_dist": [
      "torch",
      "tqdm",
      "matplotlib"
    ],
    "requires_python": ">=3.6.0",
    "summary": "TorchHandle makes your PyTorch development more efficient and make you use PyTorch more comfortable",
    "version": "1.0.2209.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15119073,
  "releases": {
    "0.6.2101a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "809be0bcf12f5eabdf55c195a162127a3862743b0d94aa8df0f5b9dd73e10511",
          "md5": "759a7b9a9867c0575c11022d466f3fb0",
          "sha256": "8e2fb6b8dd0e7ec325af75d297a3a77b95c6e9f750259513aff94a65b41be5f1"
        },
        "downloads": -1,
        "filename": "torchhandle-0.6.2101a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "759a7b9a9867c0575c11022d466f3fb0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 25769,
        "upload_time": "2021-01-25T07:46:01",
        "upload_time_iso_8601": "2021-01-25T07:46:01.386144Z",
        "url": "https://files.pythonhosted.org/packages/80/9b/e0bcf12f5eabdf55c195a162127a3862743b0d94aa8df0f5b9dd73e10511/torchhandle-0.6.2101a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4156f4ed79a0914d28a6a548e95b4f3011536d25cd14065725c939c291fa8987",
          "md5": "a0d669346381a93b57a026376524a122",
          "sha256": "9ebb23ef85e56b72bc10907d5124f5ffd252cfefa96842f61d13464d8f6b19ad"
        },
        "downloads": -1,
        "filename": "torchhandle-0.6.2101a0.tar.gz",
        "has_sig": false,
        "md5_digest": "a0d669346381a93b57a026376524a122",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 14548,
        "upload_time": "2021-01-25T07:46:03",
        "upload_time_iso_8601": "2021-01-25T07:46:03.189905Z",
        "url": "https://files.pythonhosted.org/packages/41/56/f4ed79a0914d28a6a548e95b4f3011536d25cd14065725c939c291fa8987/torchhandle-0.6.2101a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2101b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b949cb63c640d012af0e720fa3c2f81abb38684ce8a95c6ed1d1162de63753e",
          "md5": "3ec489bb5c6b47caf88ba62e194bfea7",
          "sha256": "28163d179ba3c3ca21fadb22e37179264bd6e7b41e328ff72e76d30218a4afdc"
        },
        "downloads": -1,
        "filename": "torchhandle-0.6.2101b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ec489bb5c6b47caf88ba62e194bfea7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 25788,
        "upload_time": "2021-01-28T08:04:01",
        "upload_time_iso_8601": "2021-01-28T08:04:01.766326Z",
        "url": "https://files.pythonhosted.org/packages/1b/94/9cb63c640d012af0e720fa3c2f81abb38684ce8a95c6ed1d1162de63753e/torchhandle-0.6.2101b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec6a9aff043665fe824963173d215ebd26d2db8d2a56175f82ab547088e45143",
          "md5": "aaedfdf03866b2de9218770d27c5fc24",
          "sha256": "ba290fcbd9f520fe8b0267467818983c43d579429768f4a563f1bc56c392cb7e"
        },
        "downloads": -1,
        "filename": "torchhandle-0.6.2101b0.tar.gz",
        "has_sig": false,
        "md5_digest": "aaedfdf03866b2de9218770d27c5fc24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 14605,
        "upload_time": "2021-01-28T08:04:03",
        "upload_time_iso_8601": "2021-01-28T08:04:03.669089Z",
        "url": "https://files.pythonhosted.org/packages/ec/6a/9aff043665fe824963173d215ebd26d2db8d2a56175f82ab547088e45143/torchhandle-0.6.2101b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2102": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8688fb53f5ec907704d10f0d5b3d67431136106f9ccada383874402f7f556a41",
          "md5": "4384aa81a090fac8430d44d2a771648f",
          "sha256": "cad52635308c64f87952560bb1106723bba0c7f23ae13a924864ede52af6aa08"
        },
        "downloads": -1,
        "filename": "torchhandle-0.6.2102-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4384aa81a090fac8430d44d2a771648f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 25827,
        "upload_time": "2021-02-09T02:44:20",
        "upload_time_iso_8601": "2021-02-09T02:44:20.518574Z",
        "url": "https://files.pythonhosted.org/packages/86/88/fb53f5ec907704d10f0d5b3d67431136106f9ccada383874402f7f556a41/torchhandle-0.6.2102-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78aeb59048565be12883cb0e009e6013b8ab2b673b43ae0e338e50ea379cc5d2",
          "md5": "217d8b2973664bc61d54ed066ee547f2",
          "sha256": "3aea400d72b48d6627862a0b0b5c756fef83f3ca6089907e5c91c93e98f630bc"
        },
        "downloads": -1,
        "filename": "torchhandle-0.6.2102.tar.gz",
        "has_sig": false,
        "md5_digest": "217d8b2973664bc61d54ed066ee547f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 14648,
        "upload_time": "2021-02-09T02:44:23",
        "upload_time_iso_8601": "2021-02-09T02:44:23.566988Z",
        "url": "https://files.pythonhosted.org/packages/78/ae/b59048565be12883cb0e009e6013b8ab2b673b43ae0e338e50ea379cc5d2/torchhandle-0.6.2102.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2102": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bca9567016a241849949bdf013e00bb0a15a68369be6feb877d58884423376a9",
          "md5": "df5bb30da7be7949d22da68000d5d12e",
          "sha256": "fd71d3152f34fc8a73dbbbb4da54d6ab63c983b0b25d99fcdcf43c01f7fce193"
        },
        "downloads": -1,
        "filename": "torchhandle-0.7.2102-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df5bb30da7be7949d22da68000d5d12e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 26049,
        "upload_time": "2021-02-22T07:43:09",
        "upload_time_iso_8601": "2021-02-22T07:43:09.627090Z",
        "url": "https://files.pythonhosted.org/packages/bc/a9/567016a241849949bdf013e00bb0a15a68369be6feb877d58884423376a9/torchhandle-0.7.2102-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b4e51d870466569a44d2796bd52c8aca9ad03a5f41e5294803e9d8b0ca03f74",
          "md5": "a42c0c361daedce53fad64f23e7ddf86",
          "sha256": "466af72812d20ea92caea29a805d8fd706e2aea1286ddc71329bbd7f0cac8a09"
        },
        "downloads": -1,
        "filename": "torchhandle-0.7.2102.tar.gz",
        "has_sig": false,
        "md5_digest": "a42c0c361daedce53fad64f23e7ddf86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 14835,
        "upload_time": "2021-02-22T07:43:11",
        "upload_time_iso_8601": "2021-02-22T07:43:11.431564Z",
        "url": "https://files.pythonhosted.org/packages/4b/4e/51d870466569a44d2796bd52c8aca9ad03a5f41e5294803e9d8b0ca03f74/torchhandle-0.7.2102.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2103": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d91edb169b228b570fa146f6244abf9b4bb540e43cba164e637f3bf0bbadfa2b",
          "md5": "af654d15b140101a3144aca3d5f7e2e9",
          "sha256": "f268315515e17cbbf3f5433e4859e2711a3ca8353e604f1c5050a27d989e4fc2"
        },
        "downloads": -1,
        "filename": "torchhandle-0.8.2103-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af654d15b140101a3144aca3d5f7e2e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 27101,
        "upload_time": "2021-02-27T11:48:11",
        "upload_time_iso_8601": "2021-02-27T11:48:11.498795Z",
        "url": "https://files.pythonhosted.org/packages/d9/1e/db169b228b570fa146f6244abf9b4bb540e43cba164e637f3bf0bbadfa2b/torchhandle-0.8.2103-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4efffb2d433898a7c0d9de9294e9f4b9ab29e4bf31d29b080dbf31f085e65fd7",
          "md5": "5341d2f0ea3e5161312d60112c985b0a",
          "sha256": "7845d8aed1d2a4aae7b554bc5dccf4bc69aa48433575dc29901aa362a26ec305"
        },
        "downloads": -1,
        "filename": "torchhandle-0.8.2103.tar.gz",
        "has_sig": false,
        "md5_digest": "5341d2f0ea3e5161312d60112c985b0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 15818,
        "upload_time": "2021-02-27T11:48:17",
        "upload_time_iso_8601": "2021-02-27T11:48:17.176750Z",
        "url": "https://files.pythonhosted.org/packages/4e/ff/fb2d433898a7c0d9de9294e9f4b9ab29e4bf31d29b080dbf31f085e65fd7/torchhandle-0.8.2103.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2103": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd1ef88e346d768811620435b2b901d3e78b33f1ecd3a8c2ce7b123b762c32d0",
          "md5": "8481a9dcf65925a86ccb21c1be914b18",
          "sha256": "dcef0be59e95ff3da13fb4057dfd0b831545c48c6126fe118b555b187e2d6077"
        },
        "downloads": -1,
        "filename": "torchhandle-0.9.2103-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8481a9dcf65925a86ccb21c1be914b18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 27767,
        "upload_time": "2021-03-19T05:09:29",
        "upload_time_iso_8601": "2021-03-19T05:09:29.418327Z",
        "url": "https://files.pythonhosted.org/packages/cd/1e/f88e346d768811620435b2b901d3e78b33f1ecd3a8c2ce7b123b762c32d0/torchhandle-0.9.2103-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62759e298fbd35b559eafc6335b302ddacfcd2e58f7bd8a1434143b9f5537b03",
          "md5": "084b43ad0b22168931c52c7b68a16ce8",
          "sha256": "844248b9cbfae9d5a89e94e054ef2b7bac416a1b47e086ccc469b84e4cda0b82"
        },
        "downloads": -1,
        "filename": "torchhandle-0.9.2103.tar.gz",
        "has_sig": false,
        "md5_digest": "084b43ad0b22168931c52c7b68a16ce8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 16097,
        "upload_time": "2021-03-19T05:09:31",
        "upload_time_iso_8601": "2021-03-19T05:09:31.320647Z",
        "url": "https://files.pythonhosted.org/packages/62/75/9e298fbd35b559eafc6335b302ddacfcd2e58f7bd8a1434143b9f5537b03/torchhandle-0.9.2103.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2103a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93a27ec10965f5b95ae0e1ef22ccfcb0df7ec2ffd1e9e56806fd81c0e73a9817",
          "md5": "a7768aed1b4907953440edb9a953ef90",
          "sha256": "5912b0ca4587e3462781da89df864481fd50d2cdd1f13e547a8429c05cdfe8f3"
        },
        "downloads": -1,
        "filename": "torchhandle-0.9.2103a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7768aed1b4907953440edb9a953ef90",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 27795,
        "upload_time": "2021-03-19T08:05:15",
        "upload_time_iso_8601": "2021-03-19T08:05:15.472948Z",
        "url": "https://files.pythonhosted.org/packages/93/a2/7ec10965f5b95ae0e1ef22ccfcb0df7ec2ffd1e9e56806fd81c0e73a9817/torchhandle-0.9.2103a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65bbd12f45cb094a52e4a6e53e2f5d18ee88c253981ad1cd6f5e9361e079b56d",
          "md5": "c29d61163cdc0e02654206adacdffc3d",
          "sha256": "1b1d4937b89841ef0e3c5df38d8c7382c1f7a76f6c4f6981438182814a082687"
        },
        "downloads": -1,
        "filename": "torchhandle-0.9.2103a0.tar.gz",
        "has_sig": false,
        "md5_digest": "c29d61163cdc0e02654206adacdffc3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 16108,
        "upload_time": "2021-03-19T08:05:17",
        "upload_time_iso_8601": "2021-03-19T08:05:17.986089Z",
        "url": "https://files.pythonhosted.org/packages/65/bb/d12f45cb094a52e4a6e53e2f5d18ee88c253981ad1cd6f5e9361e079b56d/torchhandle-0.9.2103a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2104.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2ac36a020876a89478efad785b19becc922604a4455e88d32b1b6aec59fbcae",
          "md5": "04dce5dc185235366ad54c3bf18a534d",
          "sha256": "47eee82d3a0ee6b3679c51abdfba1af6da54ac740601a84343057d0ec37f4709"
        },
        "downloads": -1,
        "filename": "torchhandle-0.9.2104.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04dce5dc185235366ad54c3bf18a534d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 27800,
        "upload_time": "2021-03-25T04:40:10",
        "upload_time_iso_8601": "2021-03-25T04:40:10.209016Z",
        "url": "https://files.pythonhosted.org/packages/d2/ac/36a020876a89478efad785b19becc922604a4455e88d32b1b6aec59fbcae/torchhandle-0.9.2104.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72d7fcef50981d7541499ba4839d0ce7d2edbb4557d2c2511b40f4bfbb01e9c2",
          "md5": "58a61eabb80ca4222d3625f786bc4cca",
          "sha256": "ad94ea0511983ba9febb0561b6c22739ae2e1e2f652044cd13552dd3252efff6"
        },
        "downloads": -1,
        "filename": "torchhandle-0.9.2104.1.tar.gz",
        "has_sig": false,
        "md5_digest": "58a61eabb80ca4222d3625f786bc4cca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 16108,
        "upload_time": "2021-03-25T04:40:12",
        "upload_time_iso_8601": "2021-03-25T04:40:12.093249Z",
        "url": "https://files.pythonhosted.org/packages/72/d7/fcef50981d7541499ba4839d0ce7d2edbb4557d2c2511b40f4bfbb01e9c2/torchhandle-0.9.2104.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2104a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20968a48983b2d805b4abf67eafcea8e17bc202f093e8d8e435b4dd9a829de9a",
          "md5": "869156903d5dc8ca883ccbeafa51f1d8",
          "sha256": "74895ee828ad080ca575e8d738327b5656a2588456eddc0dc1a955c78453cd54"
        },
        "downloads": -1,
        "filename": "torchhandle-0.9.2104a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "869156903d5dc8ca883ccbeafa51f1d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 27800,
        "upload_time": "2021-03-25T04:32:13",
        "upload_time_iso_8601": "2021-03-25T04:32:13.374426Z",
        "url": "https://files.pythonhosted.org/packages/20/96/8a48983b2d805b4abf67eafcea8e17bc202f093e8d8e435b4dd9a829de9a/torchhandle-0.9.2104a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d86c4721cf3ce512367118215f3250268286a4451c662018517bd63025b5f9d",
          "md5": "9f2021df758fc069690f63207acac0c4",
          "sha256": "e4770392abb6b9468392338897bee6d140853632b2af5a097bb7d312f46dba40"
        },
        "downloads": -1,
        "filename": "torchhandle-0.9.2104a0.tar.gz",
        "has_sig": false,
        "md5_digest": "9f2021df758fc069690f63207acac0c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 16111,
        "upload_time": "2021-03-25T04:32:15",
        "upload_time_iso_8601": "2021-03-25T04:32:15.265660Z",
        "url": "https://files.pythonhosted.org/packages/5d/86/c4721cf3ce512367118215f3250268286a4451c662018517bd63025b5f9d/torchhandle-0.9.2104a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2201.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b28b3c66f6d6f63c279c70512202ed4e16681b30c4eef434ae97b61a32c96dc8",
          "md5": "0ea048ecbb3bba9399cd492826bf2464",
          "sha256": "4ff1b74288ce6ce7e6265460e07377efa6521fcc90c1ec5a4a3f77b5ce385b8b"
        },
        "downloads": -1,
        "filename": "torchhandle-0.9.2201.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ea048ecbb3bba9399cd492826bf2464",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 27859,
        "upload_time": "2022-01-24T11:56:21",
        "upload_time_iso_8601": "2022-01-24T11:56:21.782400Z",
        "url": "https://files.pythonhosted.org/packages/b2/8b/3c66f6d6f63c279c70512202ed4e16681b30c4eef434ae97b61a32c96dc8/torchhandle-0.9.2201.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b0228f4865fa2191b0b9ec39cf31c1b15e9aacb5a05ae9a3ef6b28bbb996393",
          "md5": "05f645a683a07590d86125508a120044",
          "sha256": "ee1d6d9d2c9f6c5c788e643774670858a9b96cf5bd7c57794cfdd24037b672fc"
        },
        "downloads": -1,
        "filename": "torchhandle-0.9.2201.1.tar.gz",
        "has_sig": false,
        "md5_digest": "05f645a683a07590d86125508a120044",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 16148,
        "upload_time": "2022-01-24T11:56:23",
        "upload_time_iso_8601": "2022-01-24T11:56:23.653462Z",
        "url": "https://files.pythonhosted.org/packages/8b/02/28f4865fa2191b0b9ec39cf31c1b15e9aacb5a05ae9a3ef6b28bbb996393/torchhandle-0.9.2201.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2209.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e941ed6e74f06f45703a7cee82a5e95f9525aefcd0f878b1ff630280efa15bf",
          "md5": "a007112ae87249e9ef3f54a49c4e865b",
          "sha256": "6ffaf3002cc5875666d8634e24d1c8254d72b5d59b1fc3661970547fda65e186"
        },
        "downloads": -1,
        "filename": "torchhandle-1.0.2209.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a007112ae87249e9ef3f54a49c4e865b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 27903,
        "upload_time": "2022-09-16T14:59:26",
        "upload_time_iso_8601": "2022-09-16T14:59:26.553874Z",
        "url": "https://files.pythonhosted.org/packages/5e/94/1ed6e74f06f45703a7cee82a5e95f9525aefcd0f878b1ff630280efa15bf/torchhandle-1.0.2209.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c073bffb335d7ebcca21f72447956b51815228dd7867ef67e866e14105f69d3",
          "md5": "a9f74e24f887ade4947f80678992c6ff",
          "sha256": "cf58b2c7d479e1e09cee37fd7ba7b8bd9963492940c72983cd79a04660225b5e"
        },
        "downloads": -1,
        "filename": "torchhandle-1.0.2209.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a9f74e24f887ade4947f80678992c6ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 16186,
        "upload_time": "2022-09-16T14:59:29",
        "upload_time_iso_8601": "2022-09-16T14:59:29.080396Z",
        "url": "https://files.pythonhosted.org/packages/6c/07/3bffb335d7ebcca21f72447956b51815228dd7867ef67e866e14105f69d3/torchhandle-1.0.2209.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e941ed6e74f06f45703a7cee82a5e95f9525aefcd0f878b1ff630280efa15bf",
        "md5": "a007112ae87249e9ef3f54a49c4e865b",
        "sha256": "6ffaf3002cc5875666d8634e24d1c8254d72b5d59b1fc3661970547fda65e186"
      },
      "downloads": -1,
      "filename": "torchhandle-1.0.2209.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a007112ae87249e9ef3f54a49c4e865b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 27903,
      "upload_time": "2022-09-16T14:59:26",
      "upload_time_iso_8601": "2022-09-16T14:59:26.553874Z",
      "url": "https://files.pythonhosted.org/packages/5e/94/1ed6e74f06f45703a7cee82a5e95f9525aefcd0f878b1ff630280efa15bf/torchhandle-1.0.2209.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c073bffb335d7ebcca21f72447956b51815228dd7867ef67e866e14105f69d3",
        "md5": "a9f74e24f887ade4947f80678992c6ff",
        "sha256": "cf58b2c7d479e1e09cee37fd7ba7b8bd9963492940c72983cd79a04660225b5e"
      },
      "downloads": -1,
      "filename": "torchhandle-1.0.2209.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a9f74e24f887ade4947f80678992c6ff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 16186,
      "upload_time": "2022-09-16T14:59:29",
      "upload_time_iso_8601": "2022-09-16T14:59:29.080396Z",
      "url": "https://files.pythonhosted.org/packages/6c/07/3bffb335d7ebcca21f72447956b51815228dd7867ef67e866e14105f69d3/torchhandle-1.0.2209.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}