{
  "info": {
    "author": "Ian Ogilvy",
    "author_email": "support@salect.nz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# ViewModels\n\n## [Introduction](#introduction)\n\n## [Uses](#uses)\n\n- [Interface to Provide Access to Database and\nAbstraction](#interface-to-provide-access-to-database-and-abstraction).  \n- [Repository for All Information Relating to Data: Schema and\nBeyond](#repository-for-all-information-relating-to-data-schema-and-beyond).  \n- [Increasing Range of Types Available to\nApplications](#increasing-range-of-types-available-to-applications).  \n- [An Explanation of ViewModel Uses](#an-explanation-of-viewmodel-uses).\n\n## [Background](#background)\n\n- [History](#history).  \n- [Data Tables/Collections and Data Views](#data-tablescollections-and-data-views).\n\n## [Instructions](#instructions)\n\n- [Simple Example](#simple-example).  \n- [Describing a Table/Collection With\nViewFields](#describing-a-tablecollection-with-viewfields).  \n- [Using 'ViewField' Derived\nClasses](#using-viewfield-derived-classes).  \n- ['ViewModel' Interface](#viewmodel-interface).  \n- ['ViewRow': The Row Interface](#viewrow-the-row-interface).  \n- [Extended ViewModel Declarations and\nInstancing](#extended-viewmodel-declarations-and-instancing).  \n- [models_ and _sources](#models_-and-_sources).  \n- [Setting Field Source](#setting-field-source).  \n- ['ViewField' Interface](#viewfield-interface).  \n- [Building HTML Forms](#building-html-forms).  \n- [Updating from HTML Forms](#updating-from-html-forms).  \n- [How to Load Test DB Data From JSON Files for\nTesting](#how-to-load-test-db-data-from-json-files-for-testing).\n\n## [Data Relationships and Joins](#data-relationships-and-joins)\n\n- [Data Relationship Types](#data-relationship-types).  \n- [Joins](#joins).  \n- [Inserts With Joins](#inserts-with-joins).\n\n## [How It Works](#how-it-works)\n\n- [The Rows Structure](#the-rows-structure).\n\n## Introduction\n\nViewmodels provides for declaring a [data dictionary](https://en.wikipedia.org/wiki/Data_dictionary): a full definitions for the data processed by the application.\n\nWhile a dataclass provides a declaration of the _type_ of each element of\nthe class, a data dictionary provides for storing all details about each element, going beyond just type.\n\nThis information can be used by utilities to display and/or edit the data, as\nwell as providing information for storing and retrieving the data from the database.\n\nA data model describes additional details beyond type that are required from loading and\nstoring information to a database.\n\nViewmodel goes beyond details needs from storage and adds details needed from display/edit.\n\nThe viewmodel definition describes all attributes\nof data, those used for storage, but also those uses for displaying the\ndata and generating on screen views, in addition to attributes of\ndata describing how the data is stored in a database.\n\nAn [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping) is a key\npart of the model. The current implementation is with MongoDB for the\nbottle framework. Generally, the concept is to allow flexibility and\nindependence from the constraints of the underlying DB. ViewModels\nprovide for the model and also support the view code, and simplifies\nboth model and view code. Data is described through a set of\n'ViewModels'. A view model contains data description of one or more\ncollections or tables, and is used to bring windows of data (either a\nsingle row, a specific collection of rows, and in some cases possible\nthe entire collection/table into memory for reading and manipulation. So\nin addtion to all attributes of the fields, the view contains rules on\nhow to select windows into the table with selected rows. As an example,\na 'View' could represent rows of a collection/table within a database\nthat meet defined criteria, and represents a window or subset of the\nspecific collection/table. Note that depending on criteria, a view could\nbe empty, as no entries in the collection meet the specified criteria.\nAn empty view does not imply the collection is empty. Changes to the\nview, including insertions and deletions are automatically propagated to\nthe database, but changes to the database made using other views or\nother access to the database DO NOT currently propagate to the view. If\nthe database is updated by other views, or other code, then a new\nViewModel object should be instanced again to reload the view.\n\n## Uses\n\n### Interface to Provide Access to Database and Abstraction\n\nTo access a Mongo collection directly through pymongo could not be much\nmore straightforward, but misses features of view model and does not\nprovide:\n\n- abstraction between code and database;  \n- types beyond those covered in the BSON typeset;  \n- joins, and joins with 'lazy' execution;  \n- a record of the schema in use;  \n- support for a web maintenance interface to the database;  \n- web interface supports security and templates for full application.\n\nAll these advantages are provided by using ViewModel. However, there are\ntimes when none of these justifies an additional layer. The more complex\nthe collection, the higher the amount of code, generally the higher the\nvalue of using ViewModels.\n\n#### Abstraction Between Code and Database\n\nDatabases migrate. Our main project database started with direct SQL,\nthen SQLAlchemy, then MongoDB. Abstraction assists with migrations as\nthe code is written to abstract API, leaving the application able to\nremain unchanged during migration, and only internet interface to the\nnew system need change. In reality, some changes also require a change\nof API, but even in those cases, application changes are reduced. The\ncurrent main application system uses MongoDB, and the direct pymongo\ninterface can be perfect for simple access, but misses the DSL\nmethodolgy advantages of thinking at a higher level, so is best\nrestricted to low level code. A rewrite would be needed to change that\nlow level code, which is ok if code is small, so it is not a significant\nbarrier for small, uncomplicated cases. However, more complex code cases\nare another matter!\n\n### Repository for *All* Information Relating to Data: Schema and Beyond\n\nA single repository for all information about data. Information on both\nstorage as well as information used for display, all in one place.\n\nData descriptions can be simple tables/collections or views which\ncomprise multiple tables which are effectively joined.\n\nThe data description provided by ViewModel library can include extended\ntypes described at a layer of abstraction separate from the storage\nspecification, allowing the application layer free of the mechanics.\n\nViewModel was created for SQL based applications, but then evolved to\nalso work with NoSQL MongoDB applications.\n\nNoSql collections (or tables) can effectively be irregular with\ndifferent fields present potentially in every entry. While with SQL,\njust examining a row can give a reasonable view of that schema, but this\ncan be less clear from NoSql. Even with SQL, the schema recorded is\nrestricted to what the database engine requires, and lacks richer\ndescriptions of the data and rules not implemented by the database, but\na repository for a schema becomes even more essential with NoSQL.\n\n### Increasing Range of Types Available to Applications\n\nViewModel provides a mapping between the data in the database and the\ndata seen by the application. Far more descriptive types and more\ncomplex types can be used by the application with the mapping between\nthese types and the underlying storage format handled by the ViewModel.\n\n### An Explanation of ViewModel Uses\n\nEvery window has a view even if it is just a view of a brick wall. In\nthe case of ViewModel, each view has a window into the database at\ninitialisation. Each window consists of an arbitrary number of rows. You\ncan send the whole window, i.e. contents and attributes to the HTML\nbrowser in JSON format. The rules for how this JSON is shown in the\nbrowser is typically defined in the view.\n\n## Background\n\n- [History](#history).  \n- [Data Tables/Collections and Data\nViews](#data-tablescollections-and-data-views).\n\n### History\n\nThe original Salt project development worked with SQL at a time when the\nSQLAlchemy project was still in early stages. So Salt developed its\nlayer to abstract to the database in 2007 around the same time as\nSQLAlchemy was developed. Both the salt 'DataModel' and SQLAlchemy\nlibraries developed specific advantages, but as a popular open sourced\nproject, SQLAlchemy became the more mature product. In 2015 the Salt\nproject chose to replace the internal 'DataModel' library with the\nSQLAlchemy, due to wider use and greater development of the open source\nproject, but then found several key features of 'DataModel' were missing\nfrom SQLAlchemy. The solution was a new library 'ViewModel', which acted\nas an abstraction layer between SQLAlchemy and the application. The name\n'ViewModel' came from the fact that the main elements present in\n'DataModel' that were missing from SQLAlchemy were data extended data\nschema information that was also useful in providing data description to\nviews.\n\nThe next step brought the current 'ViewModel', by transforming that\nlibrary to become an interface between pymongo and the application.\n\n### Concepts\n\nThere are four basic concepts:\n\n- a container of objects - a '[view](#view---the-container)'\n- an 'ViewRow' or '[ViewObject](#viewobject)'\n- a ViewField\n- a set of 'sources'\n\n#### View - the container\n\nCurrently, instancing a 'ViewModel' returns a 'view' - container of objects.\nThe container behaves as a List of the ViewObject(s).\n\nIn the future, it is planned containers will\nalso replicate the functionality of a Dictionary/Map, but as, like a database, any\nfield can act as 'key', this may require indexing with a dictionary/map.\n\nEvery ViewObject has a 'container', even if there is only a single ViewObject\nwithin the container.\n\nCurrently, containers with a single object can be used as that viewObject,\nhowever it is planned that this functionality be deprecated  \n\n#### ViewObject\n\n##### Also known as a ViewRow\n\nindexing into a 'View' ( e.g. view[0]) returns a view object.\n\n reserved properties of a viewObject\n\n- view_\n- fields_  (to be added at a future time)\n\n#### ViewField\n\nEvery property of a viewobject is a 'ViewField'. The goal of each viewfield\nis firstly, as every property, enable 'get' and 'set' operations with the regular syntax.\nBeyond the standard get and set, each ViewField as a field object containing an extensive\nset of attributes of the that 'ViewField' (or 'property').\n\nThe 'fields_' attribute of the ViewObject contains the map of all ViewField style properties\nof that object.  Note that since\n\n    <viewObject>.<viewField>\n\nwill always return the value of the viewField, by calling the setter (unless in an assignment,\nwhere the getter would be called) the full set of properties of the ViewField itself can\nonly be accessed via this 'fields_' map of all the ViewFields.\n\n#### Sources\n\nThe sources for View .... to be added\n\n### Data Tables/Collections and Data Views\n\nThe ViewModel package focuses on preparing data for views. How is the\ndata in a table/collection to be viewed? For example, consider a\n'Products' table or collection, where products may be viewed:\n\n- individually by product code;  \n- as a list of products by product group, or by brand;  \n- as a list through a custom search.\n\nThese become the views of the data from the database. It is never\nrelevant to retrieve the entire table/collection for the products as if\nprocessing the entire table; each document will be processed in\nsequence. In contrast, there may be other table/collections with either\na single or small fixed number of rows/collections the entire\ntable/collection may constitute a view.\n\nFurther, the product table could have a join to a 'pack sizes'\ntable/collection and for some views, these are also part of the view.\n\nThe main concept is that each table has a set of relevant views of the\ntable/collection for various uses. The ViewModel specifies not just the\nschema of the table/collection, but the actual views of the\ntable/collection.\n\n## Instructions\n\n- [Simple Example](#simple-example).  \n- [Describing a Table/Collection With\nViewFields](#describing-a-tablecollection-with-viewfields).  \n- [Using 'ViewField' Derived\nClasses](#using-viewfield-derived-classes).  \n- [Extended ViewModel Declarations and\nInstancing](#extended-viewmodel-declarations-and-instancing).  \n- [Building HTML Forms](#building-html-forms).  \n- [Updating from HTML Forms](#updating-from-html-forms).\n\n### Simple Example\n\nThis example is given in advance the instructions or details on how the\ncomponents of the example work. The idea is: read the example to gain an\noverview, then see more details to understand more and return to this\nexample.\n\n#### The Simple Database\n\nConsider a database with a table of students. Rows (or Documents)\nhave:\n\n- an id;  \n- a name;  \n- a course;  \n- year number within the course.\n\n#### Code to Describe Table Find an Entry\n\nA class for the student data is declared, inheriting from 'ViewModel'.\n\n    class StudentView(ViewModel):\n\nAttributes or 'fields' are declared at the class level, with 'ViewFields' assigned for each\n (the id, name, course, year number).  e.g.\n\n    id = IdField()\n    name = TxtField()\n    course = IntField()\n    #  .... field definitions may  continue\n\nThe view can be given an optional 'viewName_' to be displayed to system users.\nThe view name will default to the class name if no view name is supplied.\nNote that all attributes of the class that are not 'fields' are given a trailing underscore\nto reduce the changes of them colliding with a field name.\n\n     viewName_ = \"Students\"\n\nFull working code follows:\n\n    from ViewModel import ViewModel, IdField, TxtField, IntField\n    import pymongo\n\n    database = pymongo.MongoClient(dbserver).get_database(\"example\")\n\n    class StudentView(ViewModel):\n        viewName_ = \"Students\"\n        models_ = database.Students\n\n        id = IdField()\n        name = TxtField()\n        course = IntField()\n        #  .... field definitions may  continue\n\n    student = StudentView({}, models=database.Students)\n    # could have used 'models_' within class to avoid needing 'models' parameter\n    # for the init\n    #   {} empty dictionary to ensure an empty view, not needed if the database\n    #   does not even exist yet, as with a new database, initial view will always\n    #   be an empty view\n\n    if len(student) > 0:\n        print(\"oh no, we already have data somehow!\")\n\n    students.insert_() # add an empty entry to our view\n\n    with student:  # use 'with', so changes written at the end of 'with'\n        student.name = 'Fred'\n\n    # ok ... now we have a 'Student' table with one entry\n\n#### Code to Read and Update Our Entry\n\nA key concept is that while the class for the view describes a table,\nset of tables or joined tables (or collections in Mongo speak), an\ninstance of a ViewModel is the set of data or a window of the tables.\nInstancing the view reads from the database in most straightforward\ncases, although in more complicated cases the data may be read from the\ndatabase when accessed, the view instance logically includes all data\nfrom a 'read' operation:\n\n    # same class definition and imports as above\n\n    student = StudentView({'name': 'Fred'},model = database.Students)\n    # would save if we could have 'models_' in class definition!\n\n    if not student.course:\n        with student:\n            student.course_year = 2\n            student.course = 'Computing'\n\n#### Multiple Entry Views\n\nSo far our view has only one entry. An instance of our view is a window\nviewing part of the database. This window can be a single row/collection\nor a logical group of entries(from rows/collections), and for small\ntables, may even be the entire table/collection. The code that follows\nadds another entry, so the sample has more than one entry, then works\nwith a multi-entry view:\n\n    StudentView.models_ = database.Students\n    # modify class, add 'models_' as an attribute,\n    # this saves specifying 'models_' each time instancing StudentView\n\n    student = StudentView()\n    # no dictionary, this gives an empty view (not multi entry yet)\n\n    student.insert_()\n    with student:  # adding a second student\n        student.name = 'Jane'\n        student.course = \"Computing\"\n        student.course_year = 2\n\n    # now our multi entry view for all year 2 Students\n    students = StudentView({'course_year':2})\n\n    for student in students:\n        print(student.name)\n\nNote how multi-entry view instances can be treated as lists. In fact,\nsingle entry views can also be treated as a list, however for\nconvenience view properties for single entry views also allow direct\naccess as one entry. For a single entry view 'student':\n\n    student.name == student[0].name\n\n#### Example Summary\n\nThe example bypasses the power of ViewModels to show you a simple\nintroduction. A fundamental concept is that classes describe a table (or\ncollection or set/join of tables). An *instance* of a ViewModel is one\nset specific subset, a set of data from a table (or set/join of multiple\ntables).\n\n### Describing a Table/Collection With ViewFields\n\nWhen creating a class derived from a ViewModel, add class attributes\nwhich are 'ViewFields' for each field in the table or collection.\n\nThe example ([Simple Example](#simple-example). ) uses several types of\nview fields. However each 'ViewField' can contain information well\nbeyond the type of data. An alternative name, a short and long\ndescription, formatting and other display defaults, value constraints\nand many other settings, as well as a 'default value' set with the\n'value=' init parameter. Note that when a new row is inserted into a\nview, no fields are set to their default value, and instead all fields,\neven those with default values, remain 'unset'. However 'unset' fields\nreturn their default value when accessed. This means that if a ViewModel\ncan have a new field (or even merely a new default value for an existing\nfield) added after several rows are already in the database. Existing\nrecords will behave automatically return the 'default value' even though\nthey were saved prior to the default being defined. This makes\nViewModels stable and safe for software updates which add new fields\nwithout the need to update the database itself.\n\nIn the example, only the 'value' attribute of the \"name\" ViewField is\naccessed. 'student.name' does not access the ViewField, but instead\nreturns \"value\" attribute of the \"name\" ViewField. To access the actual\nViewField (or IntField, TextField etc) and have access to these other\nattributes use 'student[\"name\"]' thus:\n\n    student.name == student[\"name\"].value\n\n### Using 'ViewField' Derived Classes\n\nAll 'fields' are sub-classed from ViewField and represent individual\ndata types. Each field contains the following properties:\n\n- `name`: set explicitly, or defaulting to the property name;  \n- `label`: set explicitly but defaulting to the name;  \n- `hint`: defaults to '' for display;  \n- `value`: returns value when a field is an attribute of a row\nobject.\n\n### 'ViewModel' Interface\n\nThe 'ViewModel' provides a base class defines a database\ntable/collection, and each instance of a ViewModel. Note all system\nproperties and methods start of end with underscore to avoid name\ncollision with database field names.\n\n#### ViewModel Interface Methods\n\n- `insert_()`  \n- `labelsList_()`  \n- `update_()`  \n- `<iterate> for row in <ViewModel instance>`  \n- `<index> <ViewModel instance>[row]`\n\n#### ViewModel Interface Properties\n\n- `viewName_`  \n- `models_`  \n- `dbModels_`\n\n#### ViewModel Details\n\nThe `insert_()` method adds an empty new\nrow (ViewRow instance) to the current ViewModel instance. At the next\n`update_()`, an actual database\ndocument/row will be created, provided some values have been set in the\nnew row.\n\nNote that a record is currently marked for insert if there is no '_id',\nand otherwise for update. So if a record created by\n`insert_()` has an '_id' added, currently\nthis record will then allow changes by update, without reading the\nrecord first.\n\nThe `labelsList_()` method returns a list\nof the labels from the rows of the current ViewModel instance. It\ncomputes the list of labels by, first, looking for the row_label\nattribute if that fails then it will search through all possible fields\nfor anything called rowLabel and then set row_label to the\ncorresponding value of rowLabel. If rowLabel is not declared as True in\nthe view definition, the rowLabel will default to 'no labels'.\n\nThe `update_()` method is called\nautomatically at end of a 'with <ViewModel instance>' statement\n(python keyword 'with'), or can be called directly, to update the actual\ndatabase with values changed by assignments through '<ViewModel\nInstance>.<fieldname> = statements'.\n\n`viewName_` is merely a title for the view\nfor display purposes.\n\n`models_` is a list of the names of\ntables, or actual database tables objects used by the view\n\n`dbModels_` is a dictionary of database\ntable objects used by the view, with the model names as keys.\n\nNote: all 'ViewModel' instances with one row implements all of the\nViewRow interfaces in addition to the methods and properties discussed.\n'ViewModel' instances with more than one row will raise errors if the\n'ViewRow' interface as it is ambiguous which row/document to use.\n\n### 'ViewRow': The Row Interface\n\nViewRow objects and ViewModel objects both implement the 'ViewRow'\ninterface.\n\nWhere a ViewModel contains one logical row, the operations can be\nperformed on the ViewModel, which also supports this interface for\nsingle row instances.\n\n#### ViewRow Interface Methods\n\n- `<iterate>: for field in <ViewRow instance>`  \n- `loop_(case=<case>): for field in a <ViewRow instance>`  \n- `<index>: <ViewRow instance>[<fieldname>]`  \n- `<attribute> <ViewRow instance>.field_name`\n\n#### ViewRow Interface Properties\n\n- `fields_`  \n- `view_`  \n- `label_`  \n- `idx_`\n\n#### ViewRow Details\n\nThe statement: `for <field> in <ViewRow\ninstance>:` provides for using a 'for loop' to iterate over the\nfields in a row of a viewfield.\n\nNote that this iteration can be for building a view, and as such the\niteration allows for selecting which fields are included in the view.\nWhen fields are declared (see ['ViewField'\nInterface](#viewfield-interface)), they can set a 'case' where they are\napplicable for views. For example, this can be in a view, on an edit\npanel, or the field is for calculation purposes and part of the model,\nbut not revealed in a view.\n\nUsing `<ViewRow instance>[<field\nname>]` (or indexing), retrieves the instance of the ViewField\nnamed. For example:\n\n    student['name'].value = 'Jane'\n    print(student['name'].value)\n\n    # is equivalent to\n    student.name = 'Jane'\n    print(student.name)\n    # but the point of using indexing to access other field attributes\n    assert student['name'].wide == 16 # check the name field is 16 characters wide\n\n`fields_` returns a 'ViewRow' is a logical\nentry in a ViewModel. Consider the example ( [Simple\nExample](#simple-example). ). The line of code:\n\n    student.name = 'Fred'\n\nIs using the ViewRow set attribute interface to set the 'value' of the\n'name' field within the 'row' created by the\n`insert_()` method.\n\nIn this example, because the 'student' ViewModel has only one row, the\n'name' field can be accessed directly in the ViewModel. However, if\nthere were, for example, three students in the view, which 'name' is to\nbe changed? As stated previously, ViewModel objects support the ViewRow\ninterface but report an error if there is more then one row.\n\nThere are two main ways to access 'ViewRow' objects (apart from simple\ntreating the ViewModel as also a ViewRow, which only works for single\nrow views). If our 'student' ViewModel contains three students, there\nwill be a row for each student, and these 'rows' could be accessed as:\n\n    students = StudentView({})\n    assert len(students) == 3  # check we have 3 students\n    student_0 = students[0]\n    student_2 = students[2]\n    for student in students:\n        <print details from student>\n\nFrom the ViewModel, indexing or iterating can access the ViewRows.\n\nThis interface allows retrieving and setting data 'fields' or ViewField\nentries by name as object attributes. All internal attributes of ViewRow\nhave either a trailing underscore to avoid name collisions with field\nnames of the database, or a leading underscore to indicate that these\nattributes should not be accessed externally of the ViewRow or\nViewModel.\n\nProvided database fields have no leading or trailing underscore, they\nwill not collide with the names of internal workings of these classes.\n\n### Extended ViewModel Declarations and Instancing\n\n#### getRows\n\nThe `__init__()` method calls\n`getRows_` which is designed for\nsubclassing. getRows_ can return either:\n\n1. An empty list (for an empty view);\n2. The raw data from a find (where all data is from a single source and\n    in this case the 'source' parameter to the class is used to build\n    `dbRows_` automatically;\n3. A list of dicts (for the rows, dict with one entry for each\n    'source', and that entry itself being a dictionary of the fields of\n    that 'source'.\n\nPrevious versions of the library required (2) to be instead a list of\nObjDicts. This is no longer supported. The statement:\n\n    # below statement no longer will produce functioning code\n    # remove it\n    result = [ObjDict(res) for res in result]\n\n... would convert the result of a find into a list of ObjDicts, where\neach ObjDict is a row. What is now required is such data is embedded in\na 'source' dictionary. A replacement for the above line, (which is not\nneed as the standard class init method will make this adjustment\nautomatically), would be the line:\n\n    result = [Objdict(((row,res),)) for res in self._dbRows]\n\n### `models_` and `_sources`\n\nAs the names suggest, 'models' is for 'public' use (or in this case\ndeclaration) and `_sources` is 'private'.\nThe data to construct `_sources` is\nprovided in but the _sources class variable, or the 'sources' parameter\nto a viewmodel constructor.\n\nIf sources (either `_sources` class\nvariable or sources parameter), is not a list then internal logic treats\nit as a one element list: [sources], so even if only one value is\nprovided, consider that value a one element list.\n\nEach value in the 'models' list can be one of the legacy values of\n'None' or a MongoDB collection, or (preferred) an object instanced using\na class based on the DBSource class. Currently, four such classes exist:\nDBNoSource; DBVMSource; DBMongoSource and DBMongoEmbedSource.\n\n#### DBNoSource\n\nWhen generating a sources list from 'models', a value of None is used as\na legacy alternative to creating a DBNoSource object, but the preferred\nway is an explicit object. Fields with a 'NoSource', as the class name\nsuggests, have no database source and thus no storage and as such are\ntemporary values only. Since a collection or table name is not part of a\n'NoSource' object, the source name must be described explicitly or will\nbe '__None__'. Note that at the time of writing, any string entry in\na source list that beginning with an underscore will be taken as a\nDBNoSource object with the name of that string.\n\n#### DBVMSource\n\nA DBVMSource is used for data that exists within another ViewModel. This\nallows nested views. This time, this is merely a provision for the\nfuture.\n\n#### DBMongoSource\n\nThe source used for mongo collections, and instanced from legacy MongoDB\ncollections, as well as from the preferred explicit instances. The\n'name' of a DBMongoSource is the name of the collection. So the\ncollection 'students' would have the string name 'students'.\n\n#### DBMongoEmbedSource\n\nThese are used when the table is embedded within a document inside a\nmongo collection. The source is specified as\n\"<collection>.<object-list_name>\", where the object list name is\nthe object containing the entire embedded collection as a list of\nobjects.\n\n#### Declaring 'models_'\n\nModels (`models_`) may be declared as a\nclass variable, or passed as a parameter ('models') to the\n`__init__()` method for the ViewModel.\n\nIn either case, the value is a list of each source, with each entry of\none of the 'DBSource' types listed above, or an application specific\nclass derived from DBSource. Note that while models are in theory a\nlist, the code will convert a single entry into a list, eliminating the\nneed to have a single entry as a list.\n\n### Setting Field Source\n\nAny field can belong to any 'source', as described above. The first\n'source' for a view is considered the default source, so if using the\nfirst source, or 'default source', it is possible to omit the 'src='\nparameter. Any field which is from a view other than the first view\nneeds to specify the view by name with the 'src' parameter:\n\n    src=<name of the source as a string>\n\nFor an embedded source, the name will use 'dot notation'.\n\nFurther, a field may be embedded in another object. The name of the\nobject should also be a specified through source. Examples:\n\n    models_ = DBMongoSource('students'), DBMongoSource('courses')\n\n    num1 = IntField()  # no 'src' specified -- field is in default 'students' collection\n    num2 = IntField(src='courses')  # field is in 'courses' table/collection\n    num3 = IntField(src='courses.scores') # field is in scores object in courses table\n    num4 = IntField(src='students.scores') # field is in scores object in students table\n    num5 = IntField(src='.scores') # alternative using default notation, same location as 'num4'\n\n### 'ViewField' Interface\n\n#### Getting and Setting 'Row Member' Values\n\nTo be added\n\n### Building HTML Forms\n\nTo be added\n\n### Updating from HTML Forms\n\nTo be added\n\n### How to Load Test DB Data From JSON Files for Testing\n\nLoading tables (collections) for testing is made easier by using the\nJSONLoad class provided in ViewModel. The class allows you to load\npreviously downloaded JSON tables (Mongo collections -- just make sure\nthey are created as JSON array types -- see [How to Export Mongo\nDatabases/Collections to\nJSON](https://saltnz.atlassian.net/wiki/spaces/DEV/pages/89456642/How+to+Export+Mongo+Databases+Collections+to+JSON)\nfor more about this). The JSONLoad class is in \"json_load.py\".\n\nThe JSONLoad class sets the following defaults:\n\n- The default JSONLoad location is \"dumped_data\". It is located\n    at the same level as the test file (test_file.py) that is using the JSONLoad class (see below):\n\n        project_root/\n        |-- ...\n        |-- tests/\n            |-- dumped_data/\n            |-- test_file.py/\n        |-- ...\n\n    To override the default location, import\n    \"DEFAULT_DUMP_DATA_FOLDER_NAME\" and set it to what you want it\n    to be.\n\n- The default host name & port number is:\n\n    host_name = localhost\n    port = 271017\n\n- The default DB name is '' by design and is a required parameter i.e.\ndb_name defaults to '' so must be passed in when you use JSONLoad:\n\n    JSONLoad(db_name=\"MY_TEST_DB_NAME\")\n\nTo load JSON data into a test DB of your choice, follow the instruction\nbelow. The best place is in your \"conftest.py\" file if you are using\npytest.\n\nTo import and use JSONLoad and optionally,\nDEFAULT_DUMP_DATA_FOLDER_NAME, include the following import\nstatement in your test script:\n\n    from viewmodel.json_load import JSONLoad, DEFAULT_DUMP_DATA_FOLDER_NAME\n\nOptionally, override the DEFAULT_DUMP_DATA_FOLDER_NAME with another\nin your script:\n\n    DEFAULT_DUMP_DATA_FOLDER_NAME = 'my_alternate_folder_name'\n\nProvide a test DB name (here in a separate variable called TEST_DB) and\ncreate a test fixture that uses JSONLoad to call the method\n`restore_db_from_json`:\n\n    TEST_DB = 'my_test_db_name'\n\n    @pytest.fixture(scope='session', autouse=True)\n    def restore_db_from_json():\n        JSONLoad(db_name=TEST_DB).restore_db_from_json()\n\nThen be sure to connect to your test DB:\n\n    res = ObjDict(dbname=TEST_DB, dbserver=None)\n    viewModelDB.baseDB.connect(res)\n\n#### JSONLoad Method Signatures\n\n    # not sure what the idea here is...see .rst file history? these signature need a way of being written, then cleaned up\n    __init__(host_name: str = 'localhost', port_number: int = 27017, db_name: str = None)\n    insert_one(collection_name: str = None, data: dict = None)\n    insert_many(collection_name: str = None, data: List = None)\n    drop_db(db_name: str)\n    drop_collection(collection_name: str)\n    read_json_data_file(path_to_file: str, file_name: str)\n    load_data(collection_name: str, path_to_file: str, file_name: str)\n    get_default_dumped_data_path()\n    load_all(json_data_path: str = None)\n    restore_db_from_json()\n\n## Data Relationships and Joins\n\nThe term 'relational database' comes from the concept that data\ncontained in separate tables (or collections) is related.\n\n### Data Relationship Types\n\n#### Many-to-One\n\nThese are classic 'dry' (Dont Repeat Yourself) solutions. Several\nrecords (or rows or documents) in a table/collection will use the same\ninformation. For example, consider the Students are each signed up for a\ndegree. Consider a model where are several Students for each degree, but\neach Student is in only one degree program at one time, even if that\ndegree program is itself a double degree. For each degree, there could\nbe further information such as the degree description, number of years\nwithin the degree, head teacher for the degree and an information URL.\nEach Student document could contain all of this information about their\ndegree program, but many students documents would repeat the same\ninformation. The solution is having a separate document for each degree\nand linking the students to their degree.\n\nSee the tests tutorialtest_tutorial::class GenerateCourseData\n\non (name, city code, state) from a separate city table will mean that\ninformation for each city is not repeated for each address with the same\ncity. From the perspective of the address, the relationship is\n'one-to-one' because for each address there is only one city. The\n'many-to-one' is that many addresses may reference each city.\n\nIf our view is based on a single address, then retrieving the 'join' of\nthe information for the address together with the information for the\ncity still leaves a single 'row' in the resulting view.\n\nIn database design, to implement a 'many-to-one', each entry from the\nmany tables, contains a key to the city table. Read an address, the use\nthe 'key to the city' to read data from the city table.\n\n#### One-to-Many\n\nFrom a technical perspective, this is simply the same as 'many-to-one',\nbut viewed from the opposite perspective. However, the devil is in the\ndetail, and having the opposite perspective has implications that can\nmean the correct implementation is very different. Looking at the\nprevious cities and addresses, the 'one-to-many' view from the city\nperspective is to consider all addresses with the city.\n\nIf our view is based on a single city, then retrieving the 'join' would\nresult in rows for each address. So while the one-to-many is the\nmany-to-one from the opposite perspective, the view changes entirely and\nin nature depending on which perspective.\n\nIn database design, the cross-reference key is still the 'key to the\ncity' within the address table. Read the city key (as 'our city key').\nThen using the key field find all addresses with their 'key to the city'\nvalue matching the key in 'our city key'.\n\n#### One of Many Selector\n\nThis is a real-world application of the 'many-to-one' join, where the\ntable of possible 'ones' effective represents one of a finite set of\nchoices which may be chosen from a 'drop-down list box'. ViewModel has a\nspecific Field Type, the 'EnumForeignField'. Note that to display\nchoices for editing the entire table of choices is required. There are\nno strict formulae as to when the number of choices or total data of the\nchoices table is too large but generally the system must have the\ncapacity to consider having the entire table in memory acceptable.\n\n#### Many-to-Many\n\nConsider now database with not just addresses and cities, but also\npeople. Each person might have a relationship to several addresses.\nHowever, rather than this being a 'one-to-many' relationships, like the\nCities -> Addresses, where viewed from the other perspective, Addresses\n-> Cities, for each address, there would be only one city, this time\nfor each address there may be multiple people.\n\nIn database design, this usually represents more of a challenge. If we\nstart with people, we cannot look for addresses with a 'person key'\nfield that matches since our person, since each address will need to\nmatch potentially several (or many) people. The matching person cannot\nbe stored as a single value in our table. With SQL and even sometimes\nwith NoSQL, the solution is to have a separate table of relationships.\nIf we read this table for all entries matching our person we can find an\nentry for each relationship to an address for that person. This solves\nthe problem because we can have more relationships than we have either\npeople or addresses, so one entry per table will not work without a\nparticular table that can have an entry for each relationship.\n\nNoSQL like Mongo provides another alternative, which is keeping a list\nof relationships inside one (or even both) of the tables. Since an entry\nin the table can be a list, we could keep a list of addresses in the\npeople table. Read a person, and we have a list of addresses. Read an\naddress, and we can read all people with our address in their address\nlist. The principle is still the same, but there is this implementation\nchoice.\n\n#### Relationship Specific Data\n\nIn some cases, there can be data specific to a relationship. Consider\nthe following people, addresses and then relationships:\n\n    People:  Bob, Tom, Alice\n    Addresses: RedHouse, Office1, Office2, GreenHouse\n    Relationships:\n        Bob: RedHouse is 'home', Office1 is 'work'\n        Alice: RedHouse is 'home' and 'office'\n        Tom: GreenHouse is Home, RedHouse is 'work1' and Office2 'work2'\n\nThe relationships between the people can each have their labels, just as\nthe relationships between people can. In fact, each relationship can\nhave a label from each perspective. Consider people relationships where\nBob could be 'husband' to Alice, but the same relationship from the\nother perspective could be 'wife'.\n\nSo for Bob, we may have to have not only added 'RedHouse' and created a\nrelationship, we also have to manage a label for the relationship.\n\n### Joins\n\nIn SQL, a join is a read, or update, of data from more than one table.\nThe join uses the relationship between tables to select rows of data\nthat combine information from multiple tables. Each table in the join is\neffectively a source of data.\n\nViewModel support data from multiple sources, but currently this has\nonly been used to support joins from relationship tables and tables that\nare part of the relationship.\n\n### Inserts With Joins\n\nWhen a new document is inserted for any source within a ViewModel,\nfields within the current view can be automatically updated to reference\nthe new `_id` generated. These fields\nshould be listed in the `_sources[<source\nupdated>].join_links` list. This list is the field names to be\nupdated.\n\n## How It Works\n\n### The Rows Structure\n\nThe actual data is kept in a view list called\n`dbRows_`, which reflects the actual data\nbeing held in the underlying database. For each row of the view, there\nis one entry in `dbRows_`.\n\n#### The List of Elements of 'dbRows_'\n\nEach entry is of type 'objdict' and the elements of the objdict were\noriginally the values of the fields in the view, but a new layer has\nbeen added, so that 'objdict' entries at the top level represent the\ndata from a single source.\n\nFrom:\n\n    [ {'name':'Jane','course':'computing'}]\n\nTo:\n\n    [ {'students': {'name':'Jane','course':'computing'}}]\n\nThe two-tiered structure, keyed by the 'table/collection' which is the\ndata source, better provides for data from multiple sources.\n\nData is not added directly to these rows but through the\n'viewmodel_row' wrappers. So if a ViewModel row has a view_field (say\n'last_name') which is not present in the row, setting the name would\nadd a new field to the appropriate ObjDict within the row, but also an\nan entry to an additional 'changes' copy of the row, which holds new\nvalues not yet committed to the database.\n\nThe 'rows' and 'changes' are the bridges between what is in the database\nfiles, and what is held in memory.\n\n#### The DBSource Descriptor\n\nSee the DBSource class documentation, but this class describes the\nsources of data that are held within the dbRows.\n\nEach 'row' has a set of a least one 'source'. Source types can be\nMongoDB table, MongoDB document, memory, (and soon) another view.\n\nEach source requires a method to load from the source, and update to the\nsource. 'getrows' methods currently takes a 'load filter' and uses that\nto load all sources, but a structure is required to more flexible to\nhandle all sources.\n\nUpdate methods again handle all source types.\n\nIt is suggested that a useful revision would be to have 'getrows' that\ncalls a `src_getrows` for each source and\nupdate call `src_update()` for each\nsource.\n\n#### New getRows\n\nA new getrows would take a filter dictionary or list as valid\nparameters. Each entry would need a lead and a lazy. Run 'leads' in\nsequence until lead returns a non zero list. List is applied for that\nsource, all other sources are empty, but have 'lazy' load available.\n\nOnce a lead returns true, the\n`scr_getrows_table()` would apply a\ndictionary;\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/objdict/viewmodel",
    "keywords": "database bottle mongodb pymongo view mvc model",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ViewModel",
    "package_url": "https://pypi.org/project/ViewModel/",
    "platform": "",
    "project_url": "https://pypi.org/project/ViewModel/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/objdict/viewmodel"
    },
    "release_url": "https://pypi.org/project/ViewModel/0.3.7/",
    "requires_dist": [
      "objdict",
      "pymongo",
      "bottle",
      "mako"
    ],
    "requires_python": "",
    "summary": "Model and View support for bottle framework, currently supports MongoDB. The ViewModel provides a high level DB schema and interface to a database as well as an interface from the DB to views. Current version works with bottle framework and pymongo however a previous version supported SQLAlchemy and other frameworks could be supported.",
    "version": "0.3.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7792026,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ebc0aeb3eb69bf8f9e6c3b4a19b5c36f6a6bba4e515afe6c0c9b47ae5280f5d",
          "md5": "bae92032e765f6343f789c1f3322d3e1",
          "sha256": "09c0dbad6c4820d3f5889ca89d99e9a4192d69f4146e3c3567441717b45e4f99"
        },
        "downloads": -1,
        "filename": "ViewModel-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bae92032e765f6343f789c1f3322d3e1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22045,
        "upload_time": "2016-09-26T02:52:43",
        "upload_time_iso_8601": "2016-09-26T02:52:43.639396Z",
        "url": "https://files.pythonhosted.org/packages/1e/bc/0aeb3eb69bf8f9e6c3b4a19b5c36f6a6bba4e515afe6c0c9b47ae5280f5d/ViewModel-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8296d08d4603533d427fd13ad1571684aca72bf6c19380e60648e73409f5e26b",
          "md5": "3b4f0637d7d8b521f7bbaecb1b84e5ce",
          "sha256": "3e6378cc5596e2e52619b6b08c614ccd55e8d11a8ffc74da120f72c5a38e1812"
        },
        "downloads": -1,
        "filename": "ViewModel-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b4f0637d7d8b521f7bbaecb1b84e5ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21674,
        "upload_time": "2016-09-26T02:52:57",
        "upload_time_iso_8601": "2016-09-26T02:52:57.629585Z",
        "url": "https://files.pythonhosted.org/packages/82/96/d08d4603533d427fd13ad1571684aca72bf6c19380e60648e73409f5e26b/ViewModel-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89eadba41cd1d81f80106b3a94014f48fc6bb6ddf1fc5232250f55b6c561ee40",
          "md5": "a35f3fcbaad60547c4177b08adc66082",
          "sha256": "3d4f9ea684a9e6540824c60f2b5f06f2906a478c1d93379e7f1ff7876e9392ec"
        },
        "downloads": -1,
        "filename": "ViewModel-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a35f3fcbaad60547c4177b08adc66082",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 38789,
        "upload_time": "2016-10-07T07:05:15",
        "upload_time_iso_8601": "2016-10-07T07:05:15.019634Z",
        "url": "https://files.pythonhosted.org/packages/89/ea/dba41cd1d81f80106b3a94014f48fc6bb6ddf1fc5232250f55b6c561ee40/ViewModel-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a303861a8656e4367852ea31ed01b962375adad3c88648c1a3c9df0a469441e6",
          "md5": "966195725986dc28c2934d9a766d6e80",
          "sha256": "6c7813dee2d25b6ce3a4ed6c292fb522756241332d7b83b49611373cb701e0d2"
        },
        "downloads": -1,
        "filename": "ViewModel-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "966195725986dc28c2934d9a766d6e80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37098,
        "upload_time": "2016-10-07T07:05:28",
        "upload_time_iso_8601": "2016-10-07T07:05:28.236527Z",
        "url": "https://files.pythonhosted.org/packages/a3/03/861a8656e4367852ea31ed01b962375adad3c88648c1a3c9df0a469441e6/ViewModel-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6bea6c354bac51d60408a2f0c8382863f96dca725294fdbe54c4b4f2e18bef3",
          "md5": "eb92d5a4f6e3b537b2c6a643d2e036bb",
          "sha256": "ea2475dc1876568c1327df1eae307ec28fbed3fff91702bf2fa38b3e1e9b7e91"
        },
        "downloads": -1,
        "filename": "ViewModel-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb92d5a4f6e3b537b2c6a643d2e036bb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 38359,
        "upload_time": "2016-10-07T07:29:27",
        "upload_time_iso_8601": "2016-10-07T07:29:27.686304Z",
        "url": "https://files.pythonhosted.org/packages/c6/be/a6c354bac51d60408a2f0c8382863f96dca725294fdbe54c4b4f2e18bef3/ViewModel-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e55a5503ffb0ce733da0b63610bdfdffff97e1cfff3d7b492eca276ec1c67f97",
          "md5": "cbf6f0c4329f40aec44027f604991460",
          "sha256": "0594c4b47688a400aa55f51dd8abbc6854358d68e62641e2fa0eb0ea17fa062e"
        },
        "downloads": -1,
        "filename": "ViewModel-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cbf6f0c4329f40aec44027f604991460",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37164,
        "upload_time": "2016-10-07T07:29:43",
        "upload_time_iso_8601": "2016-10-07T07:29:43.214537Z",
        "url": "https://files.pythonhosted.org/packages/e5/5a/5503ffb0ce733da0b63610bdfdffff97e1cfff3d7b492eca276ec1c67f97/ViewModel-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63abd257bf5811d841eadddf396678533b445503949d1d248e053ffb7ec5b993",
          "md5": "6bac54c6f0388f12760b0a99ed3654f7",
          "sha256": "e3a2be1604e14a109e2612bbd42902165acb3ff5863c1e76b0cac36d7e4bf751"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bac54c6f0388f12760b0a99ed3654f7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 45796,
        "upload_time": "2016-12-19T00:39:04",
        "upload_time_iso_8601": "2016-12-19T00:39:04.329595Z",
        "url": "https://files.pythonhosted.org/packages/63/ab/d257bf5811d841eadddf396678533b445503949d1d248e053ffb7ec5b993/ViewModel-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b337005e1df386e53f16dba0f39adda12550b76c44712e81d5bab03a5bef4b59",
          "md5": "76555690c05a9a5e771fb78dcd4fbc1b",
          "sha256": "4c0ac0790bf34a8e8829baab0bff6347be08ccdbd1194225a2940969927704e5"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "76555690c05a9a5e771fb78dcd4fbc1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45070,
        "upload_time": "2016-12-19T00:38:50",
        "upload_time_iso_8601": "2016-12-19T00:38:50.396858Z",
        "url": "https://files.pythonhosted.org/packages/b3/37/005e1df386e53f16dba0f39adda12550b76c44712e81d5bab03a5bef4b59/ViewModel-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eea9ac9b0c3a750c515df10f9095239b224ef0e9bacc9a46cd59728f6e7fe749",
          "md5": "a5c507de90da00d1f1a1dc2453db8e71",
          "sha256": "200e55ea9e663bdb4464e848ab84d71da0ed90d95d5f632a8945f9314034f8e7"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5c507de90da00d1f1a1dc2453db8e71",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 45754,
        "upload_time": "2016-12-19T22:58:52",
        "upload_time_iso_8601": "2016-12-19T22:58:52.424884Z",
        "url": "https://files.pythonhosted.org/packages/ee/a9/ac9b0c3a750c515df10f9095239b224ef0e9bacc9a46cd59728f6e7fe749/ViewModel-0.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4976243e0b829052ba615a133db9338396a2b92f0d90c2458b5b3a190e8e889a",
          "md5": "9a46e2a77dab260b263eebf1476c09d9",
          "sha256": "7d454cb2e49e0edf43436549369f87d4090a907de7a9281c2f9f4d6eb103ad6d"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9a46e2a77dab260b263eebf1476c09d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45043,
        "upload_time": "2016-12-19T22:59:04",
        "upload_time_iso_8601": "2016-12-19T22:59:04.488145Z",
        "url": "https://files.pythonhosted.org/packages/49/76/243e0b829052ba615a133db9338396a2b92f0d90c2458b5b3a190e8e889a/ViewModel-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7039fdafbd3493eb499790da57b7e2f5f3af4a3f26b356cafbfbe43ff3b944a7",
          "md5": "e7e8316bec9273eeb3bf315d1af1241e",
          "sha256": "0573d6994990a3aa2c17453def104683782e0af2d37840cbdb549d4d0cb7ac5f"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7e8316bec9273eeb3bf315d1af1241e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 55019,
        "upload_time": "2017-02-21T13:41:58",
        "upload_time_iso_8601": "2017-02-21T13:41:58.274502Z",
        "url": "https://files.pythonhosted.org/packages/70/39/fdafbd3493eb499790da57b7e2f5f3af4a3f26b356cafbfbe43ff3b944a7/ViewModel-0.3.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d7edb12120c4abc3a35343d2549495275df9688f1e6f4660f51ec91fe15ff37",
          "md5": "d0f65a084e83d3f5dc66e9691e82e7e2",
          "sha256": "f5c9354fd330f75d7079e52136919f9e3e6b36f75ee4af07949edb7baa76b88b"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d0f65a084e83d3f5dc66e9691e82e7e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61659,
        "upload_time": "2017-02-21T13:42:20",
        "upload_time_iso_8601": "2017-02-21T13:42:20.838510Z",
        "url": "https://files.pythonhosted.org/packages/4d/7e/db12120c4abc3a35343d2549495275df9688f1e6f4660f51ec91fe15ff37/ViewModel-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec4930fb6b4e7a52ade88eac06c2405fdb9ee118e48d1dcb8a4997d647949b98",
          "md5": "7659a7ff915cff2a4bc59d1def266b8e",
          "sha256": "8eead247e0e7a470b1cbe2cb0d27e4fcdb4154877d883289aeed16915ba4d852"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7659a7ff915cff2a4bc59d1def266b8e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 61946,
        "upload_time": "2017-06-25T07:19:20",
        "upload_time_iso_8601": "2017-06-25T07:19:20.647135Z",
        "url": "https://files.pythonhosted.org/packages/ec/49/30fb6b4e7a52ade88eac06c2405fdb9ee118e48d1dcb8a4997d647949b98/ViewModel-0.3.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "999179aaf6377c0738df8aad4cab17360a23767f87de9ebbd1cb4a9b7a7607e1",
          "md5": "c98a83a0db1019f8ad4e0ac22be75061",
          "sha256": "d98db87a0ffa140e2273ae55766c1cf135288ade288b1da16f4b6edd95603a9e"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c98a83a0db1019f8ad4e0ac22be75061",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65494,
        "upload_time": "2017-06-25T07:18:18",
        "upload_time_iso_8601": "2017-06-25T07:18:18.612419Z",
        "url": "https://files.pythonhosted.org/packages/99/91/79aaf6377c0738df8aad4cab17360a23767f87de9ebbd1cb4a9b7a7607e1/ViewModel-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de25452f7ab73e87f9472b7c7726e230ea67ca4884ef31322fb0c1d70cc69cf3",
          "md5": "b95fdaf331490a88c197c06c0cb0bacb",
          "sha256": "b2128813e519ad11a09bdbe652562705825286724dae6532a8fa83374e78d952"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b95fdaf331490a88c197c06c0cb0bacb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 67340,
        "upload_time": "2017-10-17T00:35:25",
        "upload_time_iso_8601": "2017-10-17T00:35:25.372067Z",
        "url": "https://files.pythonhosted.org/packages/de/25/452f7ab73e87f9472b7c7726e230ea67ca4884ef31322fb0c1d70cc69cf3/ViewModel-0.3.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "198a793c4a6c8d8f38661bb5100814c9659a476d99cdb50eea773deaa328eba8",
          "md5": "0469b381295e800583801152c0ebed1f",
          "sha256": "549f3e8915e71eb5dc93c604e0e60789e212fe453e87767466f4226771f41a18"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0469b381295e800583801152c0ebed1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72619,
        "upload_time": "2017-10-17T00:35:14",
        "upload_time_iso_8601": "2017-10-17T00:35:14.105274Z",
        "url": "https://files.pythonhosted.org/packages/19/8a/793c4a6c8d8f38661bb5100814c9659a476d99cdb50eea773deaa328eba8/ViewModel-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2dbf2e57d8270b6a19f60112c11e1e36bf333eb65ec26c2b2a949c3a9c7c28b0",
          "md5": "2f50ee8f6d73ff7d194f93f00451b2cf",
          "sha256": "53620dfe0ad102408950c8fe902ac32225f7282f2984bbb8b867f6570aab05ea"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f50ee8f6d73ff7d194f93f00451b2cf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 73191,
        "upload_time": "2018-05-29T10:26:26",
        "upload_time_iso_8601": "2018-05-29T10:26:26.714596Z",
        "url": "https://files.pythonhosted.org/packages/2d/bf/2e57d8270b6a19f60112c11e1e36bf333eb65ec26c2b2a949c3a9c7c28b0/ViewModel-0.3.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dd1a0a275b0dcddcfc86f1e1bc414712daa154c7e544f0ae4d3453689d22c62",
          "md5": "318d574e7cec7ae57f3f29c2536eb9f8",
          "sha256": "ddefb59b9dcb78b585fa04c73f12e14cb283a805bb2dbc4074b4a1d15e3ffa29"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "318d574e7cec7ae57f3f29c2536eb9f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 77752,
        "upload_time": "2018-05-29T10:27:25",
        "upload_time_iso_8601": "2018-05-29T10:27:25.478379Z",
        "url": "https://files.pythonhosted.org/packages/5d/d1/a0a275b0dcddcfc86f1e1bc414712daa154c7e544f0ae4d3453689d22c62/ViewModel-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12966d0381513ff854a626e692e5b680f5db75bbc0153558d8e78f9dfbeadb56",
          "md5": "c520fc61698dccacd7482c0130cb9ac7",
          "sha256": "fc9c6fdf6545c815f3df8faebff2878a4bd4204dcbe29dd8c324be854e98e0f1"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c520fc61698dccacd7482c0130cb9ac7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 70186,
        "upload_time": "2018-05-31T04:58:52",
        "upload_time_iso_8601": "2018-05-31T04:58:52.229615Z",
        "url": "https://files.pythonhosted.org/packages/12/96/6d0381513ff854a626e692e5b680f5db75bbc0153558d8e78f9dfbeadb56/ViewModel-0.3.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0527eaa9aaa74a30ff495b318fd468dafe63547f6b3e82fac042582bfefa6231",
          "md5": "5df86b9cbece0a16fc2452c7bcf95add",
          "sha256": "6c33d3fd7a8332eef80eefcb9253a844ea7b8121b91b5a0ec6f10ea0b64427b3"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5df86b9cbece0a16fc2452c7bcf95add",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 71860,
        "upload_time": "2020-07-26T23:34:22",
        "upload_time_iso_8601": "2020-07-26T23:34:22.536401Z",
        "url": "https://files.pythonhosted.org/packages/05/27/eaa9aaa74a30ff495b318fd468dafe63547f6b3e82fac042582bfefa6231/ViewModel-0.3.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f0dc534f494a50054f393465afa912f7c530102e1a9166bab70c0b97d61b1f7",
          "md5": "d75167f8855afd37c5a839e80f454c0f",
          "sha256": "49aa1ea7ff852ca425359ed8d1c4700df435621de11ec73fc8293987942c3903"
        },
        "downloads": -1,
        "filename": "ViewModel-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d75167f8855afd37c5a839e80f454c0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 92472,
        "upload_time": "2020-07-26T23:34:24",
        "upload_time_iso_8601": "2020-07-26T23:34:24.131138Z",
        "url": "https://files.pythonhosted.org/packages/9f/0d/c534f494a50054f393465afa912f7c530102e1a9166bab70c0b97d61b1f7/ViewModel-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0527eaa9aaa74a30ff495b318fd468dafe63547f6b3e82fac042582bfefa6231",
        "md5": "5df86b9cbece0a16fc2452c7bcf95add",
        "sha256": "6c33d3fd7a8332eef80eefcb9253a844ea7b8121b91b5a0ec6f10ea0b64427b3"
      },
      "downloads": -1,
      "filename": "ViewModel-0.3.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5df86b9cbece0a16fc2452c7bcf95add",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 71860,
      "upload_time": "2020-07-26T23:34:22",
      "upload_time_iso_8601": "2020-07-26T23:34:22.536401Z",
      "url": "https://files.pythonhosted.org/packages/05/27/eaa9aaa74a30ff495b318fd468dafe63547f6b3e82fac042582bfefa6231/ViewModel-0.3.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f0dc534f494a50054f393465afa912f7c530102e1a9166bab70c0b97d61b1f7",
        "md5": "d75167f8855afd37c5a839e80f454c0f",
        "sha256": "49aa1ea7ff852ca425359ed8d1c4700df435621de11ec73fc8293987942c3903"
      },
      "downloads": -1,
      "filename": "ViewModel-0.3.7.tar.gz",
      "has_sig": false,
      "md5_digest": "d75167f8855afd37c5a839e80f454c0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 92472,
      "upload_time": "2020-07-26T23:34:24",
      "upload_time_iso_8601": "2020-07-26T23:34:24.131138Z",
      "url": "https://files.pythonhosted.org/packages/9f/0d/c534f494a50054f393465afa912f7c530102e1a9166bab70c0b97d61b1f7/ViewModel-0.3.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}