{
  "info": {
    "author": "ICON Foundation",
    "author_email": "foo@icon.foundation",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "[![unittest](https://img.shields.io/github/workflow/status/icon-project/preptools/unittest%20and%20publish%20to%20pypi/master?label=unittest&logo=github)](https://github.com/icon-project/preptools/actions/workflows/preptools-workflow.yml)\n[![PyPI - latest](https://img.shields.io/pypi/v/preptools?label=latest&logo=pypi)](https://pypi.org/project/preptools)\n[![PyPI - Python](https://img.shields.io/pypi/pyversions/preptools?logo=pypi)](https://pypi.org/project/preptools)\n\n# P-Rep tools (preptools) Tutorial\n\n* This document is intended to explain how to use preptools.\n* This guide will walk through the basics of setting up the development environment and the usage of preptools CLI commands.\n\n## Building from source\n\nFirst, clone this project. Then go to the project directory, create a virtualenv environment, and run the build script. Then install preptools with the .whl file.\n```bash\n$ python -m venv venv             # Create a virtual environment.\n$ source venv/bin/activate        # Enter the virtual environment.\n(venv) $ ./build.sh                # run build script.\n(venv) $ ls dist                   # check result wheel file.\npreptools-x.y.z-py3-none-any.whl\n```\n\n## Installation\n\nThis chapter explains how to install P-Rep Tools on your system.\n\n### Requirements\n\n* OS: MacOS or Linux\n* Windows is not supported.\n* Python\n  * Make a virtualenv for Python 3.7+\n  * Check your Python version\n    ```bash\n    $ python3 -V\n    ```\n\n### Setup\n\n#### Install dependencies\n\nSome native tools and libraries are needed to install preptools without any errors.\n\n```bash\n$ sudo apt-get install -y libssl-dev build-essential automake pkg-config libtool libffi-dev libgmp-dev libyaml-cpp-dev\n$ sudo apt-get install -y python3.7-dev libsecp256k1-dev python3-pip \n```\n\n#### Install preptools\n\nInstall the preptools with the .whl file as below.\n\n```bash\n(venv) $ pip install dist/preptools-x.x.x-py3-none-any.whl\n```\n\nInstall the preptools with pypi\n```bash\n(venv) $ pip install preptools\n```\n\n## How to use P-Rep tools\n\n### Usage\n\n```bash\n(venv) $ preptools                                                                                                                                                                                                                            [12:10:25]\nusage: preptools [-h]\n                 {registerPRep,unregisterPRep,setPRep,setGovernanceVariables,setBonderList,getPRep,getBonderList,getPReps,registerProposal,cancelProposal,voteProposal,applyProposal,makeProposal,registerProposal2,getProposal,getProposals,setStake,getStake,setBond,getBond,txresult,txbyhash,keystore,genconf}\n                 ...\n\nP-Rep management command line interface v1.3.0\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nsubcommands:\n  {registerPRep,unregisterPRep,setPRep,setGovernanceVariables,setBonderList,getPRep,getBonderList,getPReps,registerProposal,cancelProposal,voteProposal,applyProposal,makeProposal,registerProposal2,getProposal,getProposals,setStake,getStake,setBond,getBond,txresult,txbyhash,keystore,genconf}\n    registerPRep        Register P-Rep\n    unregisterPRep      Unregister P-Rep WARNING!! Unregistering P-Rep does\n                        not return the registration fee\n    setPRep             Change enrolled P-Rep information\n    setGovernanceVariables\n                        Change Governance variables used in network operation\n                        deprecated.since revision9, set i-rep with network\n                        proposal\n    setBonderList       Set allowed bonder list of P-Rep\n    getPRep             Inquire P-Rep information\n    getBonderList       Inquire allowed bonder list of P-Rep\n    getPReps            Get live status of all registered P-Rep candidates\n    registerProposal    Register Proposal\n    cancelProposal      Cancel Proposal\n    voteProposal        Vote Proposal\n    applyProposal       Apply the approved network proposal indicated by id to\n                        the network\n    makeProposal        Make contents of a given network proposal\n    registerProposal2   Register network proposals in a new format supported\n                        by governance2 score\n    getProposal         Inquire Proposal information using transaction hash\n    getProposals        Inquire all of network proposal list.\n    setStake            Set stake value\n    getStake            Get stake value\n    setBond             Set bond configuration\n    getBond             Get bond configuration\n    txresult            Get transaction result by hash\n    txbyhash            Get transaction by hash\n    keystore            Create keystore file in the specified path.\n    genconf             Create config file in the specified path.\n```\n\n### Common options\n\nThis table explains common options used in most of the commands.\n\n| shorthand, Name   | default                      | Description                                                                                                                                     |\n|:------------------|:-----------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------|\n| -h, --help        |                              | show this help message and exit                                                                                                                 |\n| -u, --url         | http://127.0.0.1:9000/api/v3 | node url                                                                                                                                        |\n| -n, --nid         | 3                            | network id                                                                                                                                      |\n| -c, --config      | ./preptools_config.json      | preptools config file path                                                                                                                      |\n| -y, --yes         |                              | Do not confirm if you want to send request                                                                                                      |\n| -v, --verbose     |                              | verbose mode flag                                                                                                                               |\n| -p, --password    |                              | keystore password                                                                                                                               |\n| -k, --keystore    |                              | keystore file path                                                                                                                              |\n| -s, --step-limit  | estimated step               | step limit to set. If not exists, preptools will estimate stepLimit properly.                                                                   |\n| -m, --step-margin |                              | Can be used when step-limit option is not given. If step-margin is given, `estimated step + step-margin` will be used as step-limit internally. |\n\n### P-Rep commands\n\n* There are 4 commands to set up the P-Rep information:\n`registerPRep`, `unregisterPRep`, `setPRep`, and `setGovernanceVariables`. \n* Whenever the commands are called, they load the configuration from `preptools_config.json`.\n* In order to use other configuration file, please specify the file location with the `-c` option.\n\n#### registerPRep\n\n*Description*\n\n* Registers P-Rep.\n* There are two ways of registering a P-Rep.   \n  * Using command line option  \n    Input P-Rep information with --[OPT_NAME] OPT_VALUE.  \n    The order of priority is command line > json \n  * Using json file  \n    Input P-Rep information with --prep-json JSON_PATH.\n\n*Usage*\n\n```bash\nusage: preptools registerPRep [-h] [--url URL] [--nid NID] [--config CONFIG]\n                              [--yes] [--verbose] [--password PASSWORD]\n                              [--keystore KEYSTORE]\n                              [--step-limit STEP_LIMIT, -s STEP_LIMIT] [--name [NAME]]\n                              [--country COUNTRY] [--city CITY]\n                              [--email EMAIL] [--website WEBSITE]\n                              [--details DETAILS] [--p2p-endpoint P2PENDPOINT]\n                              [--node-address NODEADDRESS]\n                              [--prep-json [PREP_JSON]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n  --name [NAME]         P-Rep name\n  --country COUNTRY     P-Rep's country\n  --city CITY           P-Rep's city\n  --email EMAIL         P-Rep's email\n  --website WEBSITE     P-Rep's homepage url\n  --details DETAILS     json url including P-Rep detailed information\n  --p2p-endpoint P2PENDPOINT\n                        Network info used for connecting among P-Rep nodes\n  --node-address NODEADDRESS\n                        PRep Node Key\n  --prep-json [PREP_JSON]\n                        json file having P-Rep information\n```\n\n*Options*\n\n| shorthand, Name | default | Description                                                                                                           |\n|:----------------|:--------|:----------------------------------------------------------------------------------------------------------------------|\n| --name          |         | P-Rep name                                                                                                            |\n| --country       |         | P-Rep's country<br>See [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) standard                |\n| --city          |         | P-Rep's city<br>ex) Seoul, Tokyo, \"New York\"                                                                          |\n| --email         |         | P-Rep's email<br>ex) \"example@iconloop.com\"                                                                           |\n| --website       |         | P-Rep's homepage url<br>ex) \"https://node.example.com/\"                                                               |\n| --details       |         | json url including P-Rep detailed information<br>ex) \"https://node.example.com/json\"                                  |\n| --p2p-endpoint  |         | `Deprecated` Network info used for connection among P-Rep nodes<br>ex) “123.45.67.89:7100” or “node.example.com:7100” |\n| --node-address  |         | PRep Node Key (default: Operator Key)                                                                                 |\n| --prep-json     |         | json file having P-Rep information                                                                                    |\n\n*Example*\n\n```bash\n(venv) $ cat registerPRep.json \n{\n    \"name\": \"banana node\",\n    \"country\": \"USA\",\n    \"city\": \"New York\",\n    \"email\": \"banana@example.com\",\n    \"website\": \"https://icon.banana.com\",\n    \"details\": \"https://icon.banana.com/json\",\n    \"p2pEndpoint\": \"node.example.com:7100\",\n    \"nodeAddress\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d4e6\"\n}\n\n(venv) $ preptools registerPRep -k test_keystore --prep-json registerPRep.json \n> Password: \n[Request] ======================================================================\n{\n    \"from_\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d4e6\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"value\": 2000000000000000000000,\n    \"step_limit\": 268435456,\n    \"nid\": 3,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"registerPRep\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"name\": \"banana node\",\n        \"country\": \"USA\",\n        \"city\": \"New York\",\n        \"email\": \"banana@example.com\",\n        \"website\": \"https://icon.banana.com\",\n        \"details\": \"https://icon.banana.com/json\",\n        \"p2pEndpoint\": \"node.example.com:7100\",\n        \"nodeAddress\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d400\"\n    }\n}\n\n> Continue? [Y/n]\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0xe667b8de967e4c5e2cc5f4fc2775766f87517935e0875a8c4d0b9c8c2ce01846\",\n    \"id\": 1234\n}\n\n(venv) $ cat registerPRep.json \n{\n    \"email\": \"banana@example.com\",\n    \"website\": \"https://icon.banana.com\",\n    \"details\": \"https://icon.banana.com/json\",\n    \"p2pEndpoint\": \"node.example.com:7100\",\n    \"nodeAddress\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d400\"\n}\n\n(venv) $ preptools registerPRep -k test_keystore --prep-json registerPRep.json --name \"kokoa node\"\n> Password: \n > country : USA\n > city : New York\n[Request] ======================================================================\n{\n    \"from_\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d4e6\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"value\": 2000000000000000000000,\n    \"step_limit\": 268435456,\n    \"nid\": 3,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"registerPRep\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"email\": \"banana@example.com\",\n        \"website\": \"https://icon.banana.com\",\n        \"details\": \"https://icon.banana.com/json\",\n        \"p2pEndpoint\": \"node.example.com:7100\",\n        \"name\": \"kokoa node\",\n        \"country\": \"USA\",\n        \"city\": \"New York\"\n    }\n}\n\n> Continue? [Y/n]\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0xeb00ea0ad9ee155067f37015d2403067904649a76a35dd06197600e408d30e3e\",\n    \"id\": 1234\n}\n```\n\n#### unregisterPRep\n\n*Description*\n\nUnregisters a P-Rep.  \n\n*Usage*\n\n```bash\nusage: preptools unregisterPRep [-h] [--url URL] [--nid NID] [--config CONFIG]\n                                [--yes] [--verbose] [--password PASSWORD]\n                                [--keystore KEYSTORE]\n                                [--step-limit STEP_LIMIT, -s STEP_LIMIT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n```\n\n*Example*\n\n```bash\n(venv) $ preptools unregisterPRep -k test_keystore \n> Password: \n[Request] ======================================================================\n{\n    \"from_\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d4e6\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"value\": 0,\n    \"step_limit\": 268435456,\n    \"nid\": 3,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"unregisterPRep\",\n    \"data_type\": \"call\",\n    \"params\": {}\n}\n\n> Continue? [Y/n]\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0x027038296f595aedd1bfa680de2e20c3fd133816f9c74807e440bf6c548fb9aa\",\n    \"id\": 1234\n}\n```\n\n#### setPRep\n\n*Description*  \n\n* Change enrolled P-Rep information.  \n* There are three ways of set P-Rep.   \n  - Using command line option  \n    You can input P-Rep information with --[OPT_NAME] OPT_VALUE.  \n    The order of priority is command line > json. \n\n  - Using json file  \n    You can input P-Rep information with --prep-json JSON_PATH.  \n\n  - Using interactive mode [--i]  \n    Activate interactive mode and input P-Rep info what you want.   \n    If you don't want to input, just enter.\n\n*Usage*\n\n```bash\nusage: preptools setPRep [-h] [--url URL] [--nid NID] [--config CONFIG]\n                         [--yes] [--verbose] [--password PASSWORD]\n                         [--keystore KEYSTORE] [--step-limit STEP_LIMIT, -s STEP_LIMIT]\n                         [-i] [--name NAME] [--country COUNTRY] [--city CITY]\n                         [--email EMAIL] [--website WEBSITE]\n                         [--details DETAILS] [--p2p-endpoint P2PENDPOINT]\n                         [--node-address NODEADDRESS]\n                         [--prep-json PREP_JSON]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n  -i, --interactive     Activate interactive mode when prep fields are blank.\n  --name NAME           PRep name\n  --country COUNTRY     P-Rep's country\n  --city CITY           P-Rep's city\n  --email EMAIL         P-Rep's email\n  --website WEBSITE     P-Rep's homepage url\n  --details DETAILS     json url including P-Rep details information\n  --p2p-endpoint P2PENDPOINT\n                        Network info used for connecting among P-Rep nodes\n  --node-address NODEADDRESS\n                        PRep Node Key (Default: Own Address)\n  --prep-json PREP_JSON\n                        json file including P-Rep information\n```\n\n*Options*\n\nRefer to [registerPRep options](#registerprep)\n\n*Example*\n\n```bash\n(venv) $ cat setPRep.json \n{\n    \"name\": \"kokoa node\",\n    \"country\": \"USA\",\n    \"website\": \"https://icon.kokoa.com\",\n    \"details\": \"https://icon.kokoa.com/json\",\n    \"p2pEndpoint\": \"node.example.com:7100\",\n    \"nodeAddress\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d400\"\n}\n\n(venv) $ preptools setPRep -k test_keystore --prep-json setPRep.json \n> Password: \n[Request] ======================================================================\n{\n    \"from_\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d4e6\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"value\": 0,\n    \"step_limit\": 268435456,\n    \"nid\": 3,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"setPRep\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"name\": \"kokoa node\",\n        \"country\": \"USA\",\n        \"website\": \"https://icon.kokoa.com\",\n        \"details\": \"https://icon.kokoa.com/json\",\n        \"p2pEndpoint\": \"node.example.com:7100\",\n\t\"nodeAddress\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d400\"\n    }\n}\n\n> Continue? [Y/n]\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0xc8456053128897a0941dab4c79428db91dda5a2899e3813698146ac25808c4c9\",\n    \"id\": 1234\n}\n\n(venv) $ preptools setPRep -k test_keystore --prep-json setPRep.json -i\n> Password: \n > city : New York\n > email : \n[Request] ======================================================================\n{\n    \"from_\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d4e6\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"value\": 0,\n    \"step_limit\": 268435456,\n    \"nid\": 3,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"setPRep\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"name\": \"kokoa node\",\n        \"country\": \"USA\",\n        \"website\": \"https://icon.kokoa.com\",\n        \"details\": \"https://icon.kokoa.com/json\",\n        \"p2pEndpoint\": \"node.example.com:7100\",\n        \"city\": \"New York\",\n\t\"nodeAddress\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d400\"\n    }\n}\n\n> Continue? [Y/n]\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0xff0c4b603a2ae5ba50f658e0d0188210a5afeec559e44df29b55806342fa4563\",\n    \"id\": 1234\n}\n```\n\n#### setBonderList\n\n*Description*\n\nSets bonderList up to 10 addresses which can post the bond\n\n*Usage*\n\n```bash\nusage: preptools setBonderList [-h] [--url URL] [--nid NID] [--config CONFIG]\n                               [--yes] [--verbose] [--password PASSWORD]\n                               [--keystore KEYSTORE] [--step-limit STEP_LIMIT]\n                               --bonder-list BONDERLIST\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n  --bonder-list BONDERLIST\n                        list of address. separator is ','\n```\n\n*Example*\n\n```bash\n(venv) $ preptools setBonderList --bonder-list hxf1ba1be02ff3a15c5b5c63f2bdba810fefb6f0b5,hx7101544346685b37c7bbb56c2c9b8ed56f2895e2,hxa101544346685b37c7bbb56c2c9b8ed56f2895e1\n[Request] ======================================================================\n{\n    \"from_\": \"hx7101544346685b37c7bbb56c2c9b8ed56f2895e2\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"value\": 0,\n    \"step_limit\": 1342177280,\n    \"nid\": 3,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"setBonderList\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"bonderList\": [\n            \"hxf1ba1be02ff3a15c5b5c63f2bdba810fefb6f0b5\",\n            \"hx7101544346685b37c7bbb56c2c9b8ed56f2895e2\",\n            \"hxa101544346685b37c7bbb56c2c9b8ed56f2895e1\"\n        ]\n    }\n}\n\n> Continue? [Y/n]\n[Response] =====================================================================\ntxHash : {'jsonrpc': '2.0', 'result': '0x3825c983b50e42477ba17382d18ddf6e82de59b0b9d2c4813a392d0d758193b7', 'id': 1636530159}\n```\n\n### P-Rep information commands\n\nCommands that show the P-Rep information.\n\n#### getPRep\n\n*Description*\n\nQueries P-Rep information\n\n*Usage*\n\n```bash\nusage: preptools getPRep [-h] [--url URL] [--nid NID] [--config CONFIG]\n                         address\n\npositional arguments:\n  address               Address of P-Rep you are looking for\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n```\n\n*Example*\n\n```bash\n(venv) $ preptools getPRep hxef73db5d0ad02eb1fadb37d0041be96bfa56d4e6\n[Request] ======================================================================\n{\n    \"from_\": \"hx1234567890123456789012345678901234567890\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"method\": \"getPRep\",\n    \"params\": {\n        \"address\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d4e6\"\n    }\n}\n\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"status\": \"0x1\",\n        \"grade\": \"0x2\",\n        \"name\": \"kokoa node\",\n        \"country\": \"USA\",\n        \"city\": \"New York\",\n        \"stake\": \"0x0\",\n        \"delegated\": \"0x0\",\n        \"totalBlocks\": \"0x0\",\n        \"validatedBlocks\": \"0x0\",\n        \"irep\": \"0xa968163f0a57b400000\",\n        \"irepUpdateBlockHeight\": \"0x58f\",\n        \"lastGenerateBlockHeight\": \"-0x1\",\n        \"email\": \"rhkddnjs99@hotmail.com\",\n        \"website\": \"https://icon.kokoa.com\",\n        \"details\": \"https://icon.kokoa.com/json\",\n        \"p2pEndpoint\": \"node.example.com:7100\",\n        \"nodeAddress\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d400\"\n    },\n    \"id\": 1234\n}\n```\n\n#### getBonderList\n\n*Description*  \n\nGets the list of bonders which can post the bond\n\n*Usage*\n\n```bash\nusage: preptools getBonderList [-h] [--url URL] [--nid NID] [--config CONFIG]\n                               [--yes] [--verbose]\n                               address\n\npositional arguments:\n  address               Address of P-Rep you are looking for\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n```\n\n*Example*\n\n```bash\n(venv) $ preptools getBonderList hx7101544346685b37c7bbb56c2c9b8ed56f2895e2\n[Request] ======================================================================\n{\n    \"from_\": \"hx1234567890123456789012345678901234567890\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"method\": \"getBonderList\",\n    \"params\": {\n        \"address\": \"hx7101544346685b37c7bbb56c2c9b8ed56f2895e2\"\n    }\n}\n\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"bonderList\": [\n            \"hxf1ba1be02ff3a15c5b5c63f2bdba810fefb6f0b5\",\n            \"hx7101544346685b37c7bbb56c2c9b8ed56f2895e2\",\n            \"hxa101544346685b37c7bbb56c2c9b8ed56f2895e1\"\n        ]\n    },\n    \"id\": 1636530914\n} \n```\n\n#### getPReps\n\n*Description*  \n\nGets live status of all registered P-Rep candidates\n\n*Usage*\n\n```bash\nusage: preptools getPReps [-h] [--url URL] [--nid NID] [--config CONFIG]\n                          [--start-ranking START_RANKING]\n                          [--end-ranking END_RANKING]\n                          [--block-height BLOCK_HEIGHT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --start-ranking START_RANKING\n                        Get P-Rep list which starts from start ranking\n  --end-ranking END_RANKING\n                        Get P-Rep list which ends with end ranking, inclusive\n  --block-height BLOCK_HEIGHT\n                        Block height which ranking formed\n```\n\n*Options*\n\n| shorthand, Name | default | Description                                                             |\n|:----------------|:--------|:------------------------------------------------------------------------|\n| --start-ranking |         | Get P-Rep list which starts from start ranking<br>minimum ranking is 1. |\n| --end-ranking   |         | Get P-Rep list which ends with end ranking, inclusive                   |\n| --block-height  |         | Block height when ranking formed                                        |\n\n*Example*\n\n```bash\n(venv) $ preptools getPReps\n[Request] ======================================================================\n{\n    \"from_\": \"hx1234567890123456789012345678901234567890\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"method\": \"getPReps\",\n    \"params\": null\n}\n\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"blockHeight\": \"0x1e3f3\",\n        \"startRanking\": \"0x0\",\n        \"totalDelegated\": \"0x0\",\n        \"totalStake\": \"0x0\",\n        \"preps\": [\n            {\n                \"name\": \"Banana node\",\n                \"country\": \"USA\",\n                \"city\": \"New York\",\n                \"grade\": \"0x0\",\n                \"address\": \"hx8f21e5c54f006b6a5d5fe65486908592151a7c57\",\n                \"irep\": \"0xc350\",\n                \"irepUpdateBlockHeight\": \"0x1200\",\n                \"lastGenerateBlockHeight\": \"-0x1\",\n                \"stake\": \"0x21e19e0c9bab2400000\",\n                \"delegated\": \"0x204fce5e3e25026110000000\",\n                \"totalBlocks\": \"0x2710\",\n                \"validatedBlocks\": \"0x2328\"\n            },\n            ...\n        ]\n    },\n    \"id\": 1234\n}\n\n(venv) $ preptools getPReps --start-ranking \"0x1\" --end-ranking \"0x8\" --block-height \"0x1234\"\n[Request] ======================================================================\n{\n    \"from_\": \"hx1234567890123456789012345678901234567890\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"method\": \"getPReps\",\n    \"params\": {\n        \"startRanking\": \"0x1\",\n        \"endRanking\": \"0x8\",\n        \"blockHeight\": \"0x1234\"\n    }\n}\n\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"blockHeight\": \"0x1e452\",\n        \"startRanking\": \"0x0\",\n        \"totalDelegated\": \"0x0\",\n        \"totalStake\": \"0x0\",\n        \"preps\": [\n            {\n                \"name\": \"Banana node\",\n                \"country\": \"USA\",\n                \"city\": \"New York\",\n                \"grade\": \"0x0\",\n                \"address\": \"hx8f21e5c54f006b6a5d5fe65486908592151a7c57\",\n                \"irep\": \"0xc350\",\n                \"irepUpdateBlockHeight\": \"0x1200\",\n                \"lastGenerateBlockHeight\": \"-0x1\",\n                \"stake\": \"0x21e19e0c9bab2400000\",\n                \"delegated\": \"0x204fce5e3e25026110000000\",\n                \"totalBlocks\": \"0x2710\",\n                \"validatedBlocks\": \"0x2328\"\n            },\n            ...\n        ]\n    },\n    \"id\": 1234\n}\n```\n\n### Network Proposal commands\n\n* These commands are designed for network proposal handling.\n* Whenever the commands are called, they load the configuration from `preptools_config.json` by default.\n* In order to use other configuration file, please specify the file location with the `-c` option.\n\n#### registerProposal\n\n*Description*\n\n* Registers network proposals in governance-1.x format. \n* Refer to [registerProposal request format](https://github.com/icon-project/governance#registerproposal) for more details.\n* This command is available only for governance-1.x.x score.\n* After governance-2.x.x score update, use [registerProposal2](#registerproposal2) instead.\n\n*Usage*\n\n```bash\nusage: preptools registerProposal [-h] [--url URL] [--nid NID]\n                                  [--config CONFIG] [--yes] [--verbose]\n                                  [--password PASSWORD] [--keystore KEYSTORE]\n                                  [--step-limit STEP_LIMIT, -s STEP_LIMIT] --title TITLE\n                                  --desc DESC --type TYPE\n                                  [--value-value VALUE_VALUE]\n                                  [--value-code VALUE_CODE]\n                                  [--value-name VALUE_NAME]\n                                  [--value-address VALUE_ADDRESS]\n                                  [--value-type VALUE_TYPE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n  --title TITLE         Proposal title\n  --desc DESC           Proposal description\n  --type TYPE           type of Proposal\n  --value-value VALUE_VALUE\n                        type 0:text message, type 4:step price in loop\n                        (required when type 0 or 4)\n  --value-code VALUE_CODE\n                        revision code (required when type 1)\n  --value-name VALUE_NAME\n                        icon-service version (required when type 1)\n  --value-address VALUE_ADDRESS\n                        type 2: address of SCORE, type 3: address of main/sub\n                        P-Rep (required when type 2 or 3)\n  --value-type VALUE_TYPE\n                        0 : freeze, 1 : unfreeze (required when type 2)\n```\n\n*Options*\n\n| shorthand, Name | default | Description                                                                                           |\n|:----------------|:--------|:------------------------------------------------------------------------------------------------------|\n| --title         |         | title of network-proposal                                                                             |\n| --desc          |         | description of network-proposal                                                                       |\n| --type          |         | [type](https://github.com/icon-project/governance2#available-values-for-the-type) of network-proposal |\n| --value-value   |         | value of value field                                                                                  |\n| --value-code    |         | value of code field                                                                                   |\n| --value-address |         | value of address field                                                                                |\n| --value-type    |         | value of type field                                                                                   |\n\n*Example*\n\n```bash\n(venv) $ preptools registerProposal -c preptools_config.json -k prep_keys0 -p qwer1234% --title pro0 --desc \"first proposal\" --type 4 --value-value 1234\n[Value] ========================================================================\n{\n    \"value\": \"1234\"\n}\n[Request] ======================================================================\n{\n    \"from_\": \"hxb74e29fba1809a105fdec433040a4e713bbe91fe\",\n    \"to\": \"cx0000000000000000000000000000000000000001\",\n    \"value\": 0,\n    \"step_limit\": 268435456,\n    \"nid\": 3,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"registerProposal\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"title\": \"pro0\",\n        \"description\": \"first proposal\",\n        \"type\": \"0x4\",\n        \"value\": \"0x7b2276616c7565223a202231323334227d\"\n    }\n}\n\n> Continue? [Y/n]Y\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0x02221f9346f9c9b3322ea33e67a1ca0fbe9491e0ea3aefb5154a43e2ea829fa4\",\n    \"id\": 1234\n}\n```\n\n#### registerProposal2\n\n* The command is used to register network protocols in a new format supported by governance-2.x.x score.\n* CAUTION: Each time a proposer run this command, he/or she will be charged a fee of `100 ICX`.\n* For more detail on the new protocol specification, refer to [governance2 score registerProposal format](https://github.com/icon-project/governance2#registerproposal).\n* The new proposal format will make main P-Reps possible handle multiple proposals with a transaction. \n\n*Usage*\n\n```bash\n(venv) $ preptools registerProposal2 -h                                                                                                                       [14:37:44]\nusage: preptools registerProposal2 [-h] [--url URL] [--nid NID]\n                                   [--config CONFIG] [--yes] [--verbose]\n                                   [--password PASSWORD] [--keystore KEYSTORE]\n                                   [--step-limit STEP_LIMIT]\n                                   [--step-margin STEP_MARGIN]\n                                   [title] [desc] proposals [proposals ...]\n\npositional arguments:\n  title                 Proposal title\n  desc                  Proposal description\n  proposals             Proposal contents in governance2 score format or\n                        filepath with '@' prefix, which includes proposal\n                        contents\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n  --step-margin STEP_MARGIN, -m STEP_MARGIN\n                        Can be used when step-limit option is not given. Set\n                        step-limit value to estimated Step + this value(step-\n                        margin)\n\n(venv) $ preptools registerProposal2 -c preptools_config.json -k prep_keys0 -p qwer1234% \"proposal title\" \"proposal description\" '{\"name\":\"text\",\"value\":{\"text\":\"text proposal sample\"}' @step_price_proposal.json @reward_fund.json @step_costs.json\n\n(venv) $ cat step_price_proposal.json\n{\"name\":\"stepPrice\",\"value\":{\"stepPrice\":\"0x2e90edd00\"}}\n\n(venv) $ cat reward_fund.json\n{\"name\":\"rewardFund\",\"value\":{\"iglobal\":\"0x1e8480\"}}\n\n(venv) $ cat step_costs.json\n{\"name\":\"stepCosts\",\"value\":{\"get\":\"0x19\",\"getBase\":\"0xc8\",\"input\":\"0xc8\"}}\n```\n\n#### makeProposal\n\nThis command is used to make a variety of network proposal contents easily.\nNote that there is no network cit does not communicate with blockchain but just creates the content of a specific network proposal.\nThe proposal content created here is used as a parameters of [registerProposal2](#registerproposal2) command.\n\n**> Usage**\n\n```bash\n(venv) $ preptools makeProposal -h\nusage: preptools makeProposal [-h]\n                              {text,revision,maliciousScore,prepDisqualification,stepPrice,stepCosts,rewardFund,rewardFundsAllocation,networkScoreDesignation,networkScoreUpdate,accumulatedValidationFailureSlashingRate,missedNetworkProposalVoteSlashingRate}\n                              ...\n\npositional arguments:\n  {text,revision,maliciousScore,prepDisqualification,stepPrice,stepCosts,rewardFund,rewardFundsAllocation,networkScoreDesignation,networkScoreUpdate,accumulatedValidationFailureSlashingRate,missedNetworkProposalVoteSlashingRate}\n    text                text network proposal\n    revision            revision network proposal\n    maliciousScore      maliciousScore network proposal\n    prepDisqualification\n                        prepDisqualification network proposal\n    stepPrice           stepPrice network proposal\n    stepCosts           stepCosts network proposal\n    rewardFund          rewardFund network proposal for Monthly Reward Fund\n                        Setting\n    rewardFundsAllocation\n                        rewardFundsAllocation network proposal to determine\n                        the allocation of the monthly reward fund\n    networkScoreDesignation\n                        networkScoreDesignation network proposal\n    networkScoreUpdate  networkScoreUpdate network proposal\n    accumulatedValidationFailureSlashingRate\n                        accumulatedValidationFailureSlashingRate network\n                        proposal\n    missedNetworkProposalVoteSlashingRate\n                        missedNetworkProposalVoteSlashingRate network proposal\n\noptional arguments:\n  -h, --help            show this help message and exit\n```  \n\n**> Example**\n\n```bash\n(venv) $ preptools makeProposal rewardFund -h                                                                                                                  [15:08:12]\nusage: preptools makeProposal rewardFund [-h] [-o OUTPUT] iglobal\n\npositional arguments:\n  iglobal               The total amount of monthly reward fund in loop\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n                        filepath to save proposal contents\n\n(venv) $ preptools makeProposal rewardFund 3000000000000000000000000 -o reward_fund.json\n(venv) $ cat reward_fund.json\n{\"name\":\"rewardFund\",\"value\":{\"iglobal\":\"0x27b46536c66c8e3000000\"}}\n```\n\n#### voteProposal\n\n*Description*\n\nVote Network-proposal  \nRefer to [voteProposal request format](https://github.com/icon-project/governance2#voteproposal) for details.\n\n*Usage*\n\n```bash\nusage: preptools voteProposal [-h] [--url URL] [--nid NID] [--config CONFIG]\n                              [--yes] [--verbose] [--password PASSWORD]\n                              [--keystore KEYSTORE]\n                              [--step-limit STEP_LIMIT, -s STEP_LIMIT] --id ID --vote VOTE\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n  --id ID               hash of registerProposal TX\n  --vote VOTE           0 : disagree, 1 : agree\n\n```\n\n*Example*\n\n```bash\n(venv) $ preptools voteProposal -k prep_keys1 --id 0x515d0c7470e56358a6085ca93d305c4c28d004c10d110b26570dadc34bf2e492 --vote 0\n> Password:\n[Request] ======================================================================\n{\n    \"from_\": \"hx85d62b91d70bc2390b636a8d64136a413e671e3a\",\n    \"to\": \"cx0000000000000000000000000000000000000001\",\n    \"value\": 0,\n    \"step_limit\": 268435456,\n    \"nid\": 3,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"voteProposal\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"id\": \"0x515d0c7470e56358a6085ca93d305c4c28d004c10d110b26570dadc34bf2e492\",\n        \"vote\": 0\n    }\n}\n\n> Continue? [Y/n]Y\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0x22ca6eb228586ed2a00924f18bc57f1819214bf0d5c5d305b03d72a931360cc8\",\n    \"id\": 1234\n}\n```\n\n#### cancelProposal\n\n*Description*\n\n* Cancels network proposal within the voting period.\n* Refer to [cancelProposal request format](https://github.com/icon-project/governance2#cancelproposal) for details.\n\n*Usage*\n\n```bash\nusage: preptools cancelProposal [-h] [--url URL] [--nid NID] [--config CONFIG]\n                                [--yes] [--verbose] [--password PASSWORD]\n                                [--keystore KEYSTORE]\n                                [--step-limit STEP_LIMIT, -s STEP_LIMIT] --id [ID]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n  --id [ID]             hash of registerProposal TX\n```\n\n*Example*\n\n```bash\n(venv) $ preptools cancelProposal -k prep_keys0 --id 0x02221f9346f9c9b3322ea33e67a1ca0fbe9491e0ea3aefb5154a43e2ea829fa4\n> Password:\n[Request] ======================================================================\n{\n    \"from_\": \"hxb74e29fba1809a105fdec433040a4e713bbe91fe\",\n    \"to\": \"cx0000000000000000000000000000000000000001\",\n    \"value\": 0,\n    \"step_limit\": 268435456,\n    \"nid\": 3,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"cancelProposal\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"id\": \"0x02221f9346f9c9b3322ea33e67a1ca0fbe9491e0ea3aefb5154a43e2ea829fa4\"\n    }\n}\n\n> Continue? [Y/n]Y\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0x344887e8b9b30e523991e44602eee51857fd7a55e5437b34a7e8d0f2ede8c019\",\n    \"id\": 1234\n}\n```\n\n#### applyProposal\n\n*Description*\n\n* Applies an approved network proposal to the network.\n* It should be executed within the voting period, otherwise the proposal will be expired and cannot be applied anymore.\n* Refer to [applyProposal request format](https://github.com/icon-project/governance2#applyproposal) for details.\n\n*Usage*\n\n```bash\n(venv) $ preptools applyProposal -h\nusage: preptools applyProposal [-h] [--url URL] [--nid NID] [--config CONFIG]\n                               [--yes] [--verbose] [--password PASSWORD]\n                               [--keystore KEYSTORE] [--step-limit STEP_LIMIT]\n                               [--step-margin STEP_MARGIN] --id ID\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n  --step-margin STEP_MARGIN, -m STEP_MARGIN\n                        Can be used when step-limit option is not given. Set\n                        step-limit value to estimated Step + this value(step-\n                        margin)\n  --id ID               hash of registerProposal TX\n\n(venv) $ preptools applyProposal  \n```\n\n*Example*\n\n```bash\n(venv) $ preptools applyProposal -k prep_keys0 --id 0x02221f9346f9c9b3322ea33e67a1ca0fbe9491e0ea3aefb5154a43e2ea829fa4\n> Password:\n[Request] ======================================================================\n{\n    \"from_\": \"hxb74e29fba1809a105fdec433040a4e713bbe91fe\",\n    \"to\": \"cx0000000000000000000000000000000000000001\",\n    \"value\": 0,\n    \"step_limit\": 268435456,\n    \"nid\": 3,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"applyProposal\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"id\": \"0x02221f9346f9c9b3322ea33e67a1ca0fbe9491e0ea3aefb5154a43e2ea829fa4\"\n    }\n}\n\n> Continue? [Y/n]Y\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0x344887e8b9b30e523991e44602eee51857fd7a55e5437b34a7e8d0f2ede8c019\",\n    \"id\": 1234\n}\n```\n\n### Querying Network Proposal commands\n\n* There are 2 commands for network proposal querying: `getProposal` and `getProposals`.\n* Whenever the commands are called, they load the configuration from `preptools_config.json`.\n* In order to use other configuration file, please specify the file location with the `-c` option.\n\n#### getProposal\n\n*Description*\n\n* Querying network proposal information with given proposal-id  \n* Refer to [getProposal request format](https://github.com/icon-project/governance2#getproposal).\n\n*Usage*\n\n```bash\nusage: preptools getProposal [-h] [--url URL] [--nid NID] [--config CONFIG]\n                             [--yes] [--verbose]\n                             transaction_hash\n\npositional arguments:\n  transaction_hash      hash of registerProposal transaction\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n```\n\n*Example*\n```bash\n(venv) $ preptools getProposal 0x02221f9346f9c9b3322ea33e67a1ca0fbe9491e0ea3aefb5154a43e2ea829fa4\n[Request] ======================================================================\n{\n    \"from_\": \"hx1234567890123456789012345678901234567890\",\n    \"to\": \"cx0000000000000000000000000000000000000001\",\n    \"method\": \"getProposal\",\n    \"params\": {\n        \"id\": \"0x02221f9346f9c9b3322ea33e67a1ca0fbe9491e0ea3aefb5154a43e2ea829fa4\"\n    }\n}\n\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"id\": \"0x02221f9346f9c9b3322ea33e67a1ca0fbe9491e0ea3aefb5154a43e2ea829fa4\",\n        \"proposer\": \"hxb74e29fba1809a105fdec433040a4e713bbe91fe\",\n        \"proposerName\": \"nodehxb74e29fba1809a105fdec433040a4e713bbe91fe\",\n        \"status\": \"0x0\",\n        \"startBlockHeight\": \"0x2c\",\n        \"endBlockHeight\": \"0x2f\",\n        \"contents\": {\n            \"title\": \"pro0\",\n            \"description\": \"first proposal\",\n            \"type\": \"0x4\",\n            \"value\": {\n                \"value\": \"1234\"\n            }\n        },\n        \"vote\": {\n            \"agree\": {\n                \"list\": [],\n                \"amount\": \"0x0\"\n            },\n            \"disagree\": {\n                \"list\": [],\n                \"amount\": \"0x0\"\n            },\n            \"noVote\": {\n                \"list\": [\n                    \"hxb74e29fba1809a105fdec433040a4e713bbe91fe\",\n                    \"hx85d62b91d70bc2390b636a8d64136a413e671e3a\",\n                    \"hxd891096dd01c1af790c29d55022a35357684643c\",\n                    \"hx44ae89b457ccfb1bacbe35d278933ba887373b1b\",\n                    \"hxf2c6b56e6dfcfe7c3b9fbd3d1ca1d08973b8d363\",\n                    \"hxe54bdf4b25affa59c8963f1e4a6c45183aee167f\",\n                    \"hx02ccb9e378a35e11a65b5c60e796fded98383b37\",\n                    \"hx064c3d9b4982aae0253b9a8b3dd106823c107c25\",\n                    \"hxcd294f136f39232d97081f2dfa22886c76f45afb\",\n                    \"hxd685153db2a09347115cf0d8d1c5f9ab174bd802\",\n                    \"hx383b555e0301b77b1c326815bccaaaf382ecd238\",\n                    \"hxb0bfb180fb60ac68a0d3dbcadf509af07dd1f501\",\n                    \"hxa5861173d2bd05dd9bfc5c5d74faa654f8d37c7b\",\n                    \"hxee194a44eb4d06fb7c8a9515f74eb41735046be2\",\n                    \"hx6e220a1b6c0fc12b2d3cc6122fccf2e9ec3d1406\",\n                    \"hxa46f74425c0e588be8c93bbabf1be2c67da12066\",\n                    \"hx81c5db07cd6c1c569e0a5abebdb7b108157d80b5\",\n                    \"hx46ca63475e630e7c3a8c3f8c0e2981b675f32919\",\n                    \"hxffa3675581c0209c2adcc598767c77d43f999a33\",\n                    \"hx9259b69bbdea01f32e97d91401ada24d12965ae3\",\n                    \"hx282c3778a572d4d0d1eb8e65ab53daaedea3f68e\",\n                    \"hx25b84c8fe8bfabda4fb30523a1923a79cc304af5\"\n                ],\n                \"amount\": \"0x10658da4dff32a862400000\"\n            }\n        }\n    },\n    \"id\": 1234\n}\n```\n\n#### getProposals\n\n*Description*\n\n* Queries multiple network proposals \n* Proposals are listed starting with the most recently registered.\n* Refer to [getProposals request format](https://github.com/icon-project/governance2#getproposals)\n\n*Usage*\n\n```bash\nusage: preptools getProposals [-h] [--url URL] [--nid NID] [--config CONFIG]\n                              [--yes] [--verbose] [--type [TYPE]]\n                              [--status [STATUS]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --type [TYPE]         type of network proposal to filter\n  --status [STATUS]     status of network proposal to filter\n```\n\n*Options*\n\n| shorthand, Name | default | Description                                                                                                                       |\n|:----------------|:--------|:----------------------------------------------------------------------------------------------------------------------------------|\n| --type          |         | [Type](https://github.com/icon-project/governance#available-values-for-the-type) of network proposal to filter                    |\n| --status        |         | [Status](https://github.com/icon-project/governance/blob/master/governance/network_proposal.py#L15) of network proposal to filter |\n| --start         | 0       | Refer to [getProposals/Parameters](https://github.com/icon-project/governance2#parameters-7)                                      |\n| --size          | 10      | Number of proposals to query. Refer to [getProposals/Parameters](https://github.com/icon-project/governance2#parameters-7)        |\n\n*Example*\n\n```bash\n(venv) $ preptools getProposals\n[Request] ======================================================================\n{\n    \"from_\": \"hx1234567890123456789012345678901234567890\",\n    \"to\": \"cx0000000000000000000000000000000000000001\",\n    \"method\": \"getProposals\",\n    \"params\": null\n}\n\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"proposals\": [\n            {\n                \"id\": \"0x02221f9346f9c9b3322ea33e67a1ca0fbe9491e0ea3aefb5154a43e2ea829fa4\",\n                \"proposer\": \"hxb74e29fba1809a105fdec433040a4e713bbe91fe\",\n                \"proposerName\": \"nodehxb74e29fba1809a105fdec433040a4e713bbe91fe\",\n                \"status\": \"0x0\",\n                \"startBlockHeight\": \"0x2c\",\n                \"endBlockHeight\": \"0x2f\",\n                \"contents\": {\n                    \"title\": \"pro0\",\n                    \"description\": \"first proposal\",\n                    \"type\": \"0x4\",\n                    \"value\": {\n                        \"value\": \"1234\"\n                    }\n                },\n                \"vote\": {\n                    \"agree\": {\n                        \"count\": \"0x0\",\n                        \"amount\": \"0x0\"\n                    },\n                    \"disagree\": {\n                        \"count\": \"0x0\",\n                        \"amount\": \"0x0\"\n                    },\n                    \"noVote\": {\n                        \"count\": \"0x16\",\n                        \"amount\": \"0x10658da4dff32a862400000\"\n                    }\n                }\n            },\n            {\n                \"id\": \"0x515d0c7470e56358a6085ca93d305c4c28d004c10d110b26570dadc34bf2e492\",\n                \"proposer\": \"hxb74e29fba1809a105fdec433040a4e713bbe91fe\",\n                \"proposerName\": \"nodehxb74e29fba1809a105fdec433040a4e713bbe91fe\",\n                \"status\": \"0x0\",\n                \"startBlockHeight\": \"0x2c\",\n                \"endBlockHeight\": \"0x2f\",\n                \"contents\": {\n                    \"title\": \"pro1\",\n                    \"description\": \"second proposal\",\n                    \"type\": \"0x4\",\n                    \"value\": {\n                        \"value\": \"1234\"\n                    }\n                },\n                \"vote\": {\n                    \"agree\": {\n                        \"count\": \"0x0\",\n                        \"amount\": \"0x0\"\n                    },\n                    \"disagree\": {\n                        \"count\": \"0x1\",\n                        \"amount\": \"0xbecc41ad16b07a7600000\"\n                    },\n                    \"noVote\": {\n                        \"count\": \"0x15\",\n                        \"amount\": \"0xfa6c16332dc7a0bae00000\"\n                    }\n                }\n            }\n        ]\n    },\n    \"id\": 1234\n}\n```\n\n### Bond commands\n\n* There are 2 commands to bond: `setStake` and `setBond`.\n* Whenever the commands are called, they load the configuration from `preptools_config.json`.\n* In order to use other configuration file, please specify the file location with the `-c` option.\n\n#### setStake\n\n*Description*\n\n* Sets stake value of the account\n\n*Usage*\n\n```bash\nusage: preptools setStake [-h] [--url URL] [--nid NID] [--config CONFIG]\n                          [--yes] [--verbose] [--password PASSWORD]\n                          [--keystore KEYSTORE] [--step-limit STEP_LIMIT]\n                          value\n\npositional arguments:\n  value                 Stake value\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n```\n\n*Example*\n\n```bash\n(venv) $ preptools setStake 10000\n[Request] ======================================================================\n{\n    \"from_\": \"hxcad9055c936192554141a0f5f4bb554a97f4d8e1\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"value\": 0,\n    \"step_limit\": 1342177280,\n    \"nid\": 7,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"setStake\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"value\": 10000\n    }\n}\n\n> Continue? [Y/n]y\n[Response] =====================================================================\ntxHash : {'jsonrpc': '2.0', 'result': '0xfab066b43f06596fd1bea3ab6effb154fdab3abcff21e4d75a70a62dbbc86053', 'id': 1637130230}\n```\n\n#### setBond\n\n*Description*\n\nSets bond configuration of the account\n\n*Usage*\n\n```bash\nusage: preptools setBond [-h] [--url URL] [--nid NID] [--config CONFIG]\n                         [--yes] [--verbose] [--password PASSWORD]\n                         [--keystore KEYSTORE] [--step-limit STEP_LIMIT]\n                         bond [bond ...]\n\npositional arguments:\n  bond                  Bond configurations. PREP_ADDRESS,VALUE (Max: 100)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n  --password PASSWORD, -p PASSWORD\n                        keystore password\n  --keystore KEYSTORE, -k KEYSTORE\n                        keystore file path\n  --step-limit STEP_LIMIT, -s STEP_LIMIT\n                        step limit to set\n```\n\n*Example*\n\n```bash\n(venv) $ preptools setBond hx4ffe89ff27a21276a3c7e23eef2ced3d3072d7c9,500 hx7ded18f4c3d1740137684d8109cf8444f89053e5,500\n[Request] ======================================================================\n{\n    \"from_\": \"hxcad9055c936192554141a0f5f4bb554a97f4d8e1\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"value\": 0,\n    \"step_limit\": 1342177280,\n    \"nid\": 7,\n    \"nonce\": null,\n    \"version\": 3,\n    \"timestamp\": null,\n    \"method\": \"setBond\",\n    \"data_type\": \"call\",\n    \"params\": {\n        \"bonds\": [\n            {\n                \"address\": \"hx4ffe89ff27a21276a3c7e23eef2ced3d3072d7c9\",\n                \"value\": \"0x1f4\"\n            },\n            {\n                \"address\": \"hx7ded18f4c3d1740137684d8109cf8444f89053e5\",\n                \"value\": \"0x1f4\"\n            }\n        ]\n    }\n}\n\n> Continue? [Y/n]\n[Response] =====================================================================\ntxHash : {'jsonrpc': '2.0', 'result': '0xd2bb1dfbf03a68adaa36a35a8544e90035b93e293fa60611aa0f815420895e9b', 'id': 1637130338}\n```\n\n### Querying bond commands\n\n#### getStake\n\n*Description*\n\nGet stake value of the account\n\n*Usage*\n\n```bash\nusage: preptools getStake [-h] [--url URL] [--nid NID] [--config CONFIG]\n                          [--yes] [--verbose]\n                          address\n\npositional arguments:\n  address               Address of you are looking for\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n```\n\n*Example*\n\n```bash\n(venv) $ preptools getStake hxcad9055c936192554141a0f5f4bb554a97f4d8e1                                                         *[master]\n[Request] ======================================================================\n{\n    \"from_\": \"hx1234567890123456789012345678901234567890\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"method\": \"getStake\",\n    \"params\": {\n        \"address\": \"hxcad9055c936192554141a0f5f4bb554a97f4d8e1\"\n    }\n}\n\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"stake\": \"0x2710\",\n        \"unstakes\": []\n    },\n    \"id\": 1637130254\n}\n```\n\n#### getBond\n\n*Description*\n\nGets bond configuration of the account\n\n*Usage*\n\n```bash\nusage: preptools getBond [-h] [--url URL] [--nid NID] [--config CONFIG]\n                         [--yes] [--verbose]\n                         address\n\npositional arguments:\n  address               Address of you are looking for\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n  --yes, -y             Don't want to ask send transaction.\n  --verbose, -v         Verbose mode\n```\n\n*Example*\n\n```bash\n(venv) $ preptools getBond hxcad9055c936192554141a0f5f4bb554a97f4d8e1                                                          *[master]\n[Request] ======================================================================\n{\n    \"from_\": \"hx1234567890123456789012345678901234567890\",\n    \"to\": \"cx0000000000000000000000000000000000000000\",\n    \"method\": \"getBond\",\n    \"params\": {\n        \"address\": \"hxcad9055c936192554141a0f5f4bb554a97f4d8e1\"\n    }\n}\n\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"bonds\": [\n            {\n                \"address\": \"hx4ffe89ff27a21276a3c7e23eef2ced3d3072d7c9\",\n                \"value\": \"0x1f4\"\n            },\n            {\n                \"address\": \"hx7ded18f4c3d1740137684d8109cf8444f89053e5\",\n                \"value\": \"0x1f4\"\n            }\n        ],\n        \"unbonds\": []\n    },\n    \"id\": 1637131982\n}\n```\n\n### Preptools Common commands\n\nCommands that generate configuration file and keystore file. There are two commands `keystore` and `genconf`.\n\n#### keystore\n\n*Description*\n\nCreates a keystore file in the given path.\n\n*Usage*\n\n```bash\nusage: preptools keystore [-h] [-p PASSWORD] path\n\npositional arguments:\n  path                  Path of keystore file.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PASSWORD, --password PASSWORD\n                        Keystore file's password\n```\n\n*Example*\n\n```bash\n(venv) $ preptools keystore keystore_file\nInput your keystore password:\nRetype your keystore password:\nMade file successfully\n```\n\n#### genconf\n\n*Description*\n\nGenerates P-Rep tools config file.\n\n*Usage*\n\n```bash\nusage: preptools genconf [-h] [--path PATH]\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --path PATH  Path of configue file. default(./preptools_config.json)\n```\n\n*Example*\n\n```bash\n(venv) $ preptools genconf\nMade ./preptools_config.json successfully\n(venv) $ cat ./preptools_config.json\n{\n    \"url\": \"http://127.0.0.1:9000/api/v3\",\n    \"nid\": 3,\n    \"keystore\": null\n}\n```\n\n### Preptools Other commands\n\nCommands that are related to transaction. There are two commands `txresult` and `txbyhash`.\n\n#### txresult\n\n*Description*\n\nGets transaction result by transaction hash.\n\n*Usage*\n\n```bash\nusage: preptools txresult [-h] [--url URL] [--nid NID] [--config CONFIG]\n                          [tx_hash]\n\npositional arguments:\n  tx_hash               Enter the transaction hash\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n```\n\n*Example*\n\n```bash\n(venv) $ preptools txresult 0xc8456053128897a0941dab4c79428db91dda5a2899e3813698146ac25808c4c9\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"txHash\": \"0xc8456053128897a0941dab4c79428db91dda5a2899e3813698146ac25808c4c9\",\n        \"blockHeight\": \"0x1d980\",\n        \"blockHash\": \"0xa7354fb9427308239e56482916dd4e31988ce1f207091cdf81c656f89a066c5f\",\n        \"txIndex\": \"0x0\",\n        \"to\": \"cx0000000000000000000000000000000000000000\",\n        \"stepUsed\": \"0x21340\",\n        \"stepPrice\": \"0x2540be400\",\n        \"cumulativeStepUsed\": \"0x21340\",\n        \"eventLogs\": [\n            {\n                \"scoreAddress\": \"cx0000000000000000000000000000000000000000\",\n                \"indexed\": [\n                    \"PRepSet(Address)\"\n                ],\n                \"data\": [\n                    \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d4e6\"\n                ]\n            }\n        ],\n        \"logsBloom\": \"0xn        \"status\": \"0x1\"\n    },\n    \"id\": 1234\n}\n```\n\n#### txbyhash\n\n*Description*\n\nGets transaction by transaction hash\n\n*Usage*\n\n```bash\nusage: preptools txbyhash [-h] [--url URL] [--nid NID] [--config CONFIG]\n                          [tx_hash]\n\npositional arguments:\n  tx_hash               Enter the transaction hash\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --url URL, -u URL     node url default(http://127.0.0.1:9000/api/v3)\n  --nid NID, -n NID     networkId default(3) ex) mainnet(1), testnet(2)\n  --config CONFIG, -c CONFIG\n                        preptools config file path\n```\n\n*Example*\n\n```bash\n(venv) $ preptools txbyhash 0xc8456053128897a0941dab4c79428db91dda5a2899e3813698146ac25808c4c9\nrequest success.\n[Response] =====================================================================\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"version\": \"0x3\",\n        \"from\": \"hxef73db5d0ad02eb1fadb37d0041be96bfa56d4e6\",\n        \"to\": \"cx0000000000000000000000000000000000000000\",\n        \"stepLimit\": \"0x10000000\",\n        \"timestamp\": \"0x58fa97a48ad43\",\n        \"nid\": \"0x3\",\n        \"value\": \"0x0\",\n        \"dataType\": \"call\",\n        \"data\": {\n            \"method\": \"setPRep\",\n            \"params\": {\n                \"name\": \"kokoa node\",\n                \"country\": \"USA\",\n                \"website\": \"https://icon.kokoa.com\",\n                \"details\": \"https://icon.kokoa.com/json\",\n                \"p2pEndpoint\": \"node.example.com:7100\"\n            }\n        },\n        \"signature\": \"4krblW9KtQr6KNIJOVa22B3JFDQD6vaxepDSjMET91oua3Qeiq3UFMIHiucWiIrKGt3zaSo2K+mVW7Ge5rOtPwE=\",\n        \"txHash\": \"0xc8456053128897a0941dab4c79428db91dda5a2899e3813698146ac25808c4c9\",\n        \"txIndex\": \"0x0\",\n        \"blockHeight\": \"0x1d980\",\n        \"blockHash\": \"0xa7354fb9427308239e56482916dd4e31988ce1f207091cdf81c656f89a066c5f\"\n    },\n    \"id\": 1234\n}\n```\n\n### Configuration Files\n\n#### preptools_config.json\n\n* For every P-Rep tools CLI commands except `genconf` and `keystore`, this file is used to configure the default parameters and initial settings.\n* In this configuration file, you can define default options values for some CLI commands. \n\n```json\n{\n    \"uri\": \"http://127.0.0.1:9000/api/v3\",\n    \"nid\": 3,\n    \"keyStore\": null\n}\n```\n\n| Field    | Data  type | Description                                |\n|:---------|:-----------|:-------------------------------------------|\n| uri      | string     | URI to send the request.                   |\n| nid      | int        | Network ID. 3 is reserved for P-Rep tools. |\n| keyStore | string     | Keystore file path.                        |\n\n## JSON Standard for Public Representative Detailed Information \n\nThis is the JSON standard for detailed information about the P-Rep. P-Rep can submit the url of detailed information via the `registerPRep` and `setPRep` action on the ICON Blockchain. We strongly recommend that you register this information.\n\n```json\n{\n    \"representative\": {\n        \"logo\": {\n            \"logo_256\": \"https://icon.foundation/img/img-256.png\",\n            \"logo_1024\": \"https://icon.foundation/img/img-1024.png\",\n            \"logo_svg\": \"https://icon.foundation/img/img-logo.svg\"\n        },\n        \"media\": {\n            \"steemit\": \"\",\n            \"twitter\": \"\",\n            \"youtube\": \"\",\n            \"facebook\": \"\",\n            \"github\": \"\",\n            \"reddit\": \"\",\n            \"keybase\": \"\",\n            \"telegram\": \"\",\n            \"wechat\": \"\"\n        }\n    },\n    \"server\": {\n        \"location\": {\n            \"country\": \"\",\n            \"city\": \"\"\n        },\n        \"server_type\": \"\",\n        \"api_endpoint\": \"\"\n    }\n}\n```\n\n- representative: Basic information of Public Representative\n  - logo: Logo images of P-Rep\n    -  logo_256: image 256x256px\n    -  logo_1024: image 1024x1024px\n    -  logo_sgv: image svg\n  - media: URL and username of social media\n    -  steemit: Steemit URL\n    -  twitter: Twitter URL\n    -  youtube: Youtube URL\n    -  Facebook: Facebook URL\n    -  github: Github URL\n    -  reddit: Raddit URL\n    -  keybase: Username\n    -  telegram: Username\n    -  wechat: Username\n- server: Server information of Public Representative\n  - location: Server location\n    -  name: Node location in human-readable format [City, State]\n    -  country: Node country code [XX]\n  - server_type: Type of server ‘cloud, on-premise, hybrid’\n  - api_endpoint: HTTP endpoint `http://host:port`\n\n### How to use\n\nCreate a JSON file and upload it to your domain server. When you call the `registerPRep` or `setPRep` function, input the url of this file into the `details` field.\n\n## References\n\n- [ICON JSON-RPC API v3](https://github.com/icon-project/icon-rpc-server/blob/master/docs/icon-json-rpc-v3.md)\n- [ICON SDK PYTHON](https://github.com/icon-project/icon-sdk-python)\n- [Governance-2.x SCORE](https://github.com/icon-project/governance2)\n- [~~Governance-1.x SCORE~~](https://github.com/icon-project/governance)\n\n## License\n\nThis project follows the Apache 2.0 License. Please refer to [LICENSE](https://www.apache.org/licenses/LICENSE-2.0) for details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/icon-project/preptools",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "preptools",
    "package_url": "https://pypi.org/project/preptools/",
    "platform": null,
    "project_url": "https://pypi.org/project/preptools/",
    "project_urls": {
      "Homepage": "https://github.com/icon-project/preptools"
    },
    "release_url": "https://pypi.org/project/preptools/1.3.0/",
    "requires_dist": [
      "iconsdk (>=1.3.3)",
      "iso3166 (>=1.0)",
      "pytest (~=6.2.5) ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "P-Rep management command line interface",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13427317,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f43e4a2f728ddcb649e32743c42523f0126f7ecfed312acbcd76f336613a820",
          "md5": "2e30b2bd8460bb032aa82349ff357e76",
          "sha256": "a477bee802eac4ca68f39b69b8bd55bbf25a458df63611e863de3a2cd14b793c"
        },
        "downloads": -1,
        "filename": "preptools-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e30b2bd8460bb032aa82349ff357e76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22589,
        "upload_time": "2019-08-22T11:06:05",
        "upload_time_iso_8601": "2019-08-22T11:06:05.586132Z",
        "url": "https://files.pythonhosted.org/packages/7f/43/e4a2f728ddcb649e32743c42523f0126f7ecfed312acbcd76f336613a820/preptools-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a46e97b347ce031c398920634d9b0fb001d1c50d4de5b87fcd891a7f6ba8f443",
          "md5": "faa1eaabf8d89ff6fff363eef679f715",
          "sha256": "296eaf277136bd21f112c043fe726706ea2baf3fccefd2b056798a1e1d464171"
        },
        "downloads": -1,
        "filename": "preptools-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "faa1eaabf8d89ff6fff363eef679f715",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15844,
        "upload_time": "2019-08-22T11:06:08",
        "upload_time_iso_8601": "2019-08-22T11:06:08.662641Z",
        "url": "https://files.pythonhosted.org/packages/a4/6e/97b347ce031c398920634d9b0fb001d1c50d4de5b87fcd891a7f6ba8f443/preptools-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c96dda6379727b193207c623eed21b019f1b36d376c084daaa99e5012c9da16e",
          "md5": "b199b09e32d987d8d356c7653df596d9",
          "sha256": "219ce5c018480f74b1172806f2263c62d54fdebd4f78251dc7fd552d6eb3a772"
        },
        "downloads": -1,
        "filename": "preptools-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b199b09e32d987d8d356c7653df596d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18517,
        "upload_time": "2019-08-24T13:07:47",
        "upload_time_iso_8601": "2019-08-24T13:07:47.692056Z",
        "url": "https://files.pythonhosted.org/packages/c9/6d/da6379727b193207c623eed21b019f1b36d376c084daaa99e5012c9da16e/preptools-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24e55bb29d4a3b2b66efe29b99931cbe903562ac0f63b8d7ccf7b3464a864697",
          "md5": "7ae44c9ac413032da96a48a009e806d3",
          "sha256": "90e0c36f2ec22f5fbc2c552b60efd6dd0c81c937e23f30fe27319cf8d7b12770"
        },
        "downloads": -1,
        "filename": "preptools-1.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ae44c9ac413032da96a48a009e806d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32569,
        "upload_time": "2021-04-19T00:26:29",
        "upload_time_iso_8601": "2021-04-19T00:26:29.793044Z",
        "url": "https://files.pythonhosted.org/packages/24/e5/5bb29d4a3b2b66efe29b99931cbe903562ac0f63b8d7ccf7b3464a864697/preptools-1.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d4e35cec2481bb6dd06e3b76887d756ee5b9f97d635fe2a2cd7467637889461",
          "md5": "94b82ab521c70dddda7cd5414e27e447",
          "sha256": "7b2199eaa2d1acb18b47381c26bbd555e0e9eda56f660a869ebe2af578deaea3"
        },
        "downloads": -1,
        "filename": "preptools-1.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94b82ab521c70dddda7cd5414e27e447",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32659,
        "upload_time": "2021-05-17T06:49:31",
        "upload_time_iso_8601": "2021-05-17T06:49:31.820003Z",
        "url": "https://files.pythonhosted.org/packages/3d/4e/35cec2481bb6dd06e3b76887d756ee5b9f97d635fe2a2cd7467637889461/preptools-1.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db7c422de5c20184e43429b54f141dddadb5c7a93574457b82183cb32f640510",
          "md5": "4f9235d0ac453149dd365e76676735d0",
          "sha256": "fcef8f7baa74a6219be9d8213fbf80f6def775c361e40762e4164afd3c461b77"
        },
        "downloads": -1,
        "filename": "preptools-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f9235d0ac453149dd365e76676735d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18452,
        "upload_time": "2019-08-26T06:27:15",
        "upload_time_iso_8601": "2019-08-26T06:27:15.014604Z",
        "url": "https://files.pythonhosted.org/packages/db/7c/422de5c20184e43429b54f141dddadb5c7a93574457b82183cb32f640510/preptools-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31505abd6ba22320873237a78f7707a9763679178f597f207adf32b54f5a87cb",
          "md5": "6c24d937d727298e7b7d0fad851192b9",
          "sha256": "7bf1baf141c16796109f868da5ac430eac8582684123dd33aec041f781f1f334"
        },
        "downloads": -1,
        "filename": "preptools-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6c24d937d727298e7b7d0fad851192b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16701,
        "upload_time": "2019-08-26T06:27:16",
        "upload_time_iso_8601": "2019-08-26T06:27:16.850899Z",
        "url": "https://files.pythonhosted.org/packages/31/50/5abd6ba22320873237a78f7707a9763679178f597f207adf32b54f5a87cb/preptools-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e74fd1470e44b3b055409d96518d718b336003e9f65c64c9c4df686376fc9d3",
          "md5": "550d3f5067f99d0d9be9bac636b8f3ff",
          "sha256": "22c470111351c1ad1935f74466fc931018374ef6c5fd0c0efe894d576e5777be"
        },
        "downloads": -1,
        "filename": "preptools-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "550d3f5067f99d0d9be9bac636b8f3ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22353,
        "upload_time": "2020-07-23T06:09:19",
        "upload_time_iso_8601": "2020-07-23T06:09:19.011913Z",
        "url": "https://files.pythonhosted.org/packages/9e/74/fd1470e44b3b055409d96518d718b336003e9f65c64c9c4df686376fc9d3/preptools-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0b1cc747ee9728d5c24fed43e418566386849ff34b26b209d5ec139dd9e5c7f",
          "md5": "800d212426c34451cc928f3e0267b89c",
          "sha256": "e72917cf3c8d939e0fec409c093f257e2d08cdf1cf15954d14d2bf13f1d04682"
        },
        "downloads": -1,
        "filename": "preptools-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "800d212426c34451cc928f3e0267b89c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22867,
        "upload_time": "2020-07-23T09:20:34",
        "upload_time_iso_8601": "2020-07-23T09:20:34.009614Z",
        "url": "https://files.pythonhosted.org/packages/b0/b1/cc747ee9728d5c24fed43e418566386849ff34b26b209d5ec139dd9e5c7f/preptools-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57673e91fb307cbab0bdd8f52afbdb7df69626fef8daed6ccd51f2c3da2a4cf9",
          "md5": "f7d6f36633672e0f02644415e2ed0560",
          "sha256": "bdf065a07f874fc40a8ab421a868066f097ff12aab85a4fd1db2e5d282604346"
        },
        "downloads": -1,
        "filename": "preptools-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7d6f36633672e0f02644415e2ed0560",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22867,
        "upload_time": "2020-08-13T03:06:24",
        "upload_time_iso_8601": "2020-08-13T03:06:24.682719Z",
        "url": "https://files.pythonhosted.org/packages/57/67/3e91fb307cbab0bdd8f52afbdb7df69626fef8daed6ccd51f2c3da2a4cf9/preptools-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "430609319e8a1e2658f8827bdb1894308dc4d0e4f5b9e579a6a0a6dab96d7833",
          "md5": "51bc5f2b51ad03536ae818ade8ffdcb5",
          "sha256": "d14a81d1fe881894c9e1ecb1407a91d84d397f11a6ae76525e4cb81625a56b5e"
        },
        "downloads": -1,
        "filename": "preptools-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51bc5f2b51ad03536ae818ade8ffdcb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32476,
        "upload_time": "2020-08-13T03:20:37",
        "upload_time_iso_8601": "2020-08-13T03:20:37.846500Z",
        "url": "https://files.pythonhosted.org/packages/43/06/09319e8a1e2658f8827bdb1894308dc4d0e4f5b9e579a6a0a6dab96d7833/preptools-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83a8e480db3c8fbb780f7488eff9083c8b67765a38f1cd4fe0dd846731c935bf",
          "md5": "e4346fbb568b6e7828b18195dac05b32",
          "sha256": "4c3ffda5ec5ae1d933fb3f9c40259d6875f94efa5ecb8c07bc3b803921650317"
        },
        "downloads": -1,
        "filename": "preptools-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4346fbb568b6e7828b18195dac05b32",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32483,
        "upload_time": "2020-11-11T03:58:51",
        "upload_time_iso_8601": "2020-11-11T03:58:51.164034Z",
        "url": "https://files.pythonhosted.org/packages/83/a8/e480db3c8fbb780f7488eff9083c8b67765a38f1cd4fe0dd846731c935bf/preptools-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10edabb692c2eddfbec0a191babff6dc22657eae26149b3b4b0495a06a61a219",
          "md5": "447a69597f960c0e5d52710029fb3672",
          "sha256": "b59e394d13fee55a619a8a697aae04430ea0c0119688157dc743918a413be9a2"
        },
        "downloads": -1,
        "filename": "preptools-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "447a69597f960c0e5d52710029fb3672",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32492,
        "upload_time": "2021-04-08T03:54:26",
        "upload_time_iso_8601": "2021-04-08T03:54:26.124822Z",
        "url": "https://files.pythonhosted.org/packages/10/ed/abb692c2eddfbec0a191babff6dc22657eae26149b3b4b0495a06a61a219/preptools-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26aed8ad8c184e836627291b59a890165c3614eb428457bda9018acc953405c8",
          "md5": "4bcd686cf17cecc615914ca31f586daa",
          "sha256": "8b847fc5a986f4fac6ca477dd7e42d0bd0e57c8621c34c3458bc73926c86e786"
        },
        "downloads": -1,
        "filename": "preptools-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4bcd686cf17cecc615914ca31f586daa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33585,
        "upload_time": "2021-11-10T08:28:33",
        "upload_time_iso_8601": "2021-11-10T08:28:33.970150Z",
        "url": "https://files.pythonhosted.org/packages/26/ae/d8ad8c184e836627291b59a890165c3614eb428457bda9018acc953405c8/preptools-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a82477ac1fa823eeb6e3e58def73732185120f068c7ffe3aa06da1a6452eac23",
          "md5": "421cf8e547b3f30fa6fcf06196904c3e",
          "sha256": "016f7ddd3ca974f314c1b95a79968fecfacc0f55f3e8f518f360111af6daec9d"
        },
        "downloads": -1,
        "filename": "preptools-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "421cf8e547b3f30fa6fcf06196904c3e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 35762,
        "upload_time": "2021-11-17T07:37:26",
        "upload_time_iso_8601": "2021-11-17T07:37:26.490791Z",
        "url": "https://files.pythonhosted.org/packages/a8/24/77ac1fa823eeb6e3e58def73732185120f068c7ffe3aa06da1a6452eac23/preptools-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f128eb77f167352b3f7a05034298eb9ba8d1356b2b6e72d43693d1c3267482db",
          "md5": "eed8cd620bf5c4014e34d463359410b4",
          "sha256": "9ff489daee19129070a07b498b3e42bafe500c26a919fed3f6d354227664d5cf"
        },
        "downloads": -1,
        "filename": "preptools-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eed8cd620bf5c4014e34d463359410b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 35866,
        "upload_time": "2021-11-25T21:42:21",
        "upload_time_iso_8601": "2021-11-25T21:42:21.198742Z",
        "url": "https://files.pythonhosted.org/packages/f1/28/eb77f167352b3f7a05034298eb9ba8d1356b2b6e72d43693d1c3267482db/preptools-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d1ddad2d6808fdf800a3d2aab994f6ef5da9e35ccf22d2129a9181de26f353e",
          "md5": "da90f0e269329e39adbca0fc0ecdc174",
          "sha256": "ef485df46b514df3fdd15bb706466c56ab76470626c6a296d970f17807903e36"
        },
        "downloads": -1,
        "filename": "preptools-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da90f0e269329e39adbca0fc0ecdc174",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36040,
        "upload_time": "2021-11-30T07:40:47",
        "upload_time_iso_8601": "2021-11-30T07:40:47.168798Z",
        "url": "https://files.pythonhosted.org/packages/4d/1d/dad2d6808fdf800a3d2aab994f6ef5da9e35ccf22d2129a9181de26f353e/preptools-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3899627929019cb79a7759ac9c8ff523a9c2e6f3b2df7646a83fcb5ff2d021b6",
          "md5": "4ebddb4ace80e35a37b1ec18de4e26dc",
          "sha256": "fc8362b772bd7af73a0c74cf8153ac5e14eb0e90ef7300504c08e62ebf116646"
        },
        "downloads": -1,
        "filename": "preptools-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ebddb4ace80e35a37b1ec18de4e26dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36633,
        "upload_time": "2021-11-30T11:19:40",
        "upload_time_iso_8601": "2021-11-30T11:19:40.501784Z",
        "url": "https://files.pythonhosted.org/packages/38/99/627929019cb79a7759ac9c8ff523a9c2e6f3b2df7646a83fcb5ff2d021b6/preptools-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "812f1dc3c8469b3eddbe12682689c9f7c3a881e147b40df7022f1950e9514c3e",
          "md5": "9da606a47dcb113f5cad031971be4820",
          "sha256": "ee461dac2bf493abe2a19cc8608a7b155d3e3f7a03a0c32ea449ae80646d59b4"
        },
        "downloads": -1,
        "filename": "preptools-1.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9da606a47dcb113f5cad031971be4820",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36842,
        "upload_time": "2021-12-07T10:40:38",
        "upload_time_iso_8601": "2021-12-07T10:40:38.132883Z",
        "url": "https://files.pythonhosted.org/packages/81/2f/1dc3c8469b3eddbe12682689c9f7c3a881e147b40df7022f1950e9514c3e/preptools-1.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ab74a0fd70b7bcd5f1cbd2905ef1895e3c593b03394780710f4fe5045e74bb0",
          "md5": "dc0e22cfb72f10b5dafa5158c5df188f",
          "sha256": "7a2a4bf13357e6fbc7bc28627eaee5171a6dae639d00621a6dd829c7186c74f3"
        },
        "downloads": -1,
        "filename": "preptools-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc0e22cfb72f10b5dafa5158c5df188f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 57675,
        "upload_time": "2022-04-06T10:08:48",
        "upload_time_iso_8601": "2022-04-06T10:08:48.188055Z",
        "url": "https://files.pythonhosted.org/packages/0a/b7/4a0fd70b7bcd5f1cbd2905ef1895e3c593b03394780710f4fe5045e74bb0/preptools-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab051c141767844f78096c7dad0ba48fe017b9c9cdb2826c293c11dd3e6ce4f0",
          "md5": "594ea15507977ea2410c66f878970458",
          "sha256": "b0c2e18b4fa1124888efc5997fd9040fb6d3aad123481fd9a53c63c7be1cc9c7"
        },
        "downloads": -1,
        "filename": "preptools-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "594ea15507977ea2410c66f878970458",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55619,
        "upload_time": "2022-04-06T10:08:50",
        "upload_time_iso_8601": "2022-04-06T10:08:50.377258Z",
        "url": "https://files.pythonhosted.org/packages/ab/05/1c141767844f78096c7dad0ba48fe017b9c9cdb2826c293c11dd3e6ce4f0/preptools-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ab74a0fd70b7bcd5f1cbd2905ef1895e3c593b03394780710f4fe5045e74bb0",
        "md5": "dc0e22cfb72f10b5dafa5158c5df188f",
        "sha256": "7a2a4bf13357e6fbc7bc28627eaee5171a6dae639d00621a6dd829c7186c74f3"
      },
      "downloads": -1,
      "filename": "preptools-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dc0e22cfb72f10b5dafa5158c5df188f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 57675,
      "upload_time": "2022-04-06T10:08:48",
      "upload_time_iso_8601": "2022-04-06T10:08:48.188055Z",
      "url": "https://files.pythonhosted.org/packages/0a/b7/4a0fd70b7bcd5f1cbd2905ef1895e3c593b03394780710f4fe5045e74bb0/preptools-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab051c141767844f78096c7dad0ba48fe017b9c9cdb2826c293c11dd3e6ce4f0",
        "md5": "594ea15507977ea2410c66f878970458",
        "sha256": "b0c2e18b4fa1124888efc5997fd9040fb6d3aad123481fd9a53c63c7be1cc9c7"
      },
      "downloads": -1,
      "filename": "preptools-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "594ea15507977ea2410c66f878970458",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 55619,
      "upload_time": "2022-04-06T10:08:50",
      "upload_time_iso_8601": "2022-04-06T10:08:50.377258Z",
      "url": "https://files.pythonhosted.org/packages/ab/05/1c141767844f78096c7dad0ba48fe017b9c9cdb2826c293c11dd3e6ce4f0/preptools-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}