{
  "info": {
    "author": "Aman Tiwari",
    "author_email": "aman.tiwari@thoughtworks.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<a href=\"https://github.com/OpenNyAI/Opennyai\"><img src=\"https://github.com/OpenNyAI/Opennyai/raw/master/asset/final-logo-01.jpeg\" width=\"190\" height=\"65\" align=\"right\" /></a>\n\n# Opennyai : An efficient NLP Pipeline for Indian Legal documents\n\n[![Current Release Version](https://img.shields.io/github/release/OpenNyAI/opennyai.svg?style=flat-square&logo=github)](https://github.com/OpenNyAI/Opennyai/releases)\n[![PyPI version](https://img.shields.io/pypi/v/opennyai.svg?style=flat-square&logo=pypi&logoColor=white)](https://pypi.org/project/opennyai/)\n[![python version](https://img.shields.io/badge/Python-%3E=3.7-blue)](https://github.com/OpenNyAI/Opennyai)\n[![Downloads](https://pepy.tech/badge/opennyai)](https://github.com/OpenNyAI/Opennyai)\n\nOpennyai is a python library for natural language preprocessing on Indian legal texts.\n\nThis library provides unified access to the following 3 pre-trained AI models developed by OpenNyAI which focus on\nIndian court\njudgments:\n\n* Named Entity Recognition (NER): [GitHub](https://github.com/Legal-NLP-EkStep/legal_NER)\n  , [paper](https://arxiv.org/pdf/2211.03442.pdf)\n* Judgment Structuring using Sentence Rhetorical\n  Roles: [GitHub](https://github.com/Legal-NLP-EkStep/rhetorical-role-baseline)\n  , [paper](http://www.lrec-conf.org/proceedings/lrec2022/pdf/2022.lrec-1.470.pdf)\n* Extractive Summarizer: [GitHub](https://github.com/Legal-NLP-EkStep/judgment_extractive_summarizer)\n\nThis library is mainly for running the pretrained models on your custom input judgments text. For more details about\ndata and model training, please refer to individual git repo links.\n\n# üîß 1. Installation\n\nTo get started using opennyai first create a new python virtual environment using [conda](https://www.anaconda.com/):\n\n```bash\nconda create -n opennyai python=3.8\nconda activate opennyai\n```\n\nInstall it using pip by running the following line in your terminal\n\n```bash\npip install -U opennyai\n```\n\n#### For GPU support\n\nIf you want to utilize spacy with GPU please install [Cupy](https://anaconda.org/conda-forge/cupy) and\n[cudatoolkit](https://anaconda.org/anaconda/cudatoolkit) dependency of appropriate version.\n\n```bash\nconda install cudatoolkit==<your_cuda_version> #### E.g. cudatoolkit==11.2\npip install cupy-cuda<your_cuda_version> ##### E.g. cupy-cuda112\n```\n\nIn case of any issue with installation please refer to [spacy installation with cupy](https://spacy.io/usage)\n\nRemember you need spacy of 3.2.4 version for models to work perfectly.\n\n# üìñ 2. Documentation\n\nPlease refer to the [Documentation](https://opennyai.readthedocs.io/en/latest/index.html#) for more details.\n\n# üë©‚Äçüíª 3. Usage\n\nTo run the 3 OpenNyAI models on judgment texts of your choice please run following python code\n\n```python\nfrom opennyai import Pipeline\nfrom opennyai.utils import Data\nimport urllib\n\n# Get court judgment texts on which to run the AI models\ntext1 = urllib.request.urlopen(\n    'https://raw.githubusercontent.com/OpenNyAI/Opennyai/master/samples/sample_judgment1.txt').read().decode()\ntext2 = urllib.request.urlopen(\n    'https://raw.githubusercontent.com/OpenNyAI/Opennyai/master/samples/sample_judgment2.txt').read().decode()\n\n# you can also load your text files directly into this\ntexts_to_process = [text1, text2]\n\n# create Data object for data  preprocessing before running ML models\ndata = Data(texts_to_process)\n\n# If you have access to GPU then set this to True else False\nuse_gpu = True\n\n# Choose which of the AI models you want to run from the 3 models 'NER', 'Rhetorical_Role','Summarizer'. E.g. If just Named Entity is of interest then just select 'NER'\n\npipeline = Pipeline(components=['NER', 'Rhetorical_Role', 'Summarizer'], use_gpu=use_gpu, verbose=True)\n\nresults = pipeline(data)\n```\n\nThe output of each model is present in following keys of each element of the output\n\n```python\nresults[0][\n    'annotations']  ## shows the result of model at sentence level, each entry will have entities, rhetorical role, and other details\nresults[0]['summary']  ## shows Summary for each of the Rheorical Role for first judgment text \n```\n\nFor more details on usage please refer to the [documentation](https://opennyai.readthedocs.io/en/latest/index.html#)\n\nGoogle Colab Notebook\n----------------------\n\n| Description               | Link  |\n|---------------------------|-------|\n| Run Inference          | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1rNA6XVyD-GCTd0YtosjiKON_p9bGuVwz) |\n\nVisualization of outputs\n-----------------------\nWe encourage users to use [our webapp](https://summarizer-fer6v2lowq-uc.a.run.app/) for visualizing the results for a\njudgment of your choice.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "law indianlegalner legalner legal ner lawtech legaltech nlp spacy SpaCy rhetorical role summarizer extractive_summarizer",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opennyai",
    "package_url": "https://pypi.org/project/opennyai/",
    "platform": null,
    "project_url": "https://pypi.org/project/opennyai/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/opennyai/0.0.10/",
    "requires_dist": [
      "torch (<1.13.0,>=1.10.0)",
      "torchvision (<0.14.0,>=0.8.1)",
      "transformers (<4.16,>=4.1)",
      "pytorch-transformers (==1.2.0)",
      "multiprocess (==0.70.12.2)",
      "pandas (<1.3.6,>=1.2.4)",
      "spacy (<3.2.5,>=3.2.2)",
      "spacy-transformers (<1.1.6,>=1.1.4)",
      "urllib3 (<1.26.12,>=1.26.8)",
      "beautifulsoup4 (<4.11.0,>=4.10.0)",
      "requests (<2.28.2,>=2.27.1)",
      "nltk (<3.6.6,>=3.6)",
      "tqdm (<4.64.1,>=4.63.0)",
      "prettytable (<3.4.1,>=3.1.1)",
      "scikit-learn",
      "pytest",
      "Levenshtein"
    ],
    "requires_python": ">=3.7.0",
    "summary": "A SpaCy pipeline and models for NLP on indian legal text.",
    "version": "0.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16169939,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3333b32a7b554087c4960ecb84441013f03df1c74a6f03612a90f65abcdcb530",
          "md5": "623f568478de7981432cfed28d03faac",
          "sha256": "9db89a4d2db618d92892974470556d44e74c4246c68ba7171bf51715c031c10f"
        },
        "downloads": -1,
        "filename": "opennyai-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "623f568478de7981432cfed28d03faac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 168034,
        "upload_time": "2022-12-21T05:21:32",
        "upload_time_iso_8601": "2022-12-21T05:21:32.992999Z",
        "url": "https://files.pythonhosted.org/packages/33/33/b32a7b554087c4960ecb84441013f03df1c74a6f03612a90f65abcdcb530/opennyai-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f643c2630dae83e5d971f579fe4a839c6c498905446d5b295f778cb10873a4f",
          "md5": "d7c8d841ce468770c88cdf73f3fd24f6",
          "sha256": "abad0a23271894531b3b9412b24a8b4ae0116c711be09bcd9083dcc14a7fd519"
        },
        "downloads": -1,
        "filename": "opennyai-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "d7c8d841ce468770c88cdf73f3fd24f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 140449,
        "upload_time": "2022-12-21T05:21:35",
        "upload_time_iso_8601": "2022-12-21T05:21:35.128894Z",
        "url": "https://files.pythonhosted.org/packages/9f/64/3c2630dae83e5d971f579fe4a839c6c498905446d5b295f778cb10873a4f/opennyai-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cf39591e9477a7d171bf7b9161ceda53620c9a7da1406cd856e3ff96423ab51",
          "md5": "eeb1827e135dd942401e1b174a47f61a",
          "sha256": "2e9bc12d411898540c6cf91a476399c253c18c36859d7ec823f50098dc0d20fa"
        },
        "downloads": -1,
        "filename": "opennyai-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eeb1827e135dd942401e1b174a47f61a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 163639,
        "upload_time": "2022-11-09T13:58:43",
        "upload_time_iso_8601": "2022-11-09T13:58:43.381161Z",
        "url": "https://files.pythonhosted.org/packages/1c/f3/9591e9477a7d171bf7b9161ceda53620c9a7da1406cd856e3ff96423ab51/opennyai-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e583b4c5b58d1c5c28b915b7c99bab3e06c790cf092fa14d7e32644a9d640dd8",
          "md5": "43eb0f18a7d1a9876decd19f194b9226",
          "sha256": "b4c7036544b6c082054a44f667d89507354bd2e062ae16a39f0d174f7fa3e64b"
        },
        "downloads": -1,
        "filename": "opennyai-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "43eb0f18a7d1a9876decd19f194b9226",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 136118,
        "upload_time": "2022-11-09T13:58:46",
        "upload_time_iso_8601": "2022-11-09T13:58:46.056646Z",
        "url": "https://files.pythonhosted.org/packages/e5/83/b4c5b58d1c5c28b915b7c99bab3e06c790cf092fa14d7e32644a9d640dd8/opennyai-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3333b32a7b554087c4960ecb84441013f03df1c74a6f03612a90f65abcdcb530",
        "md5": "623f568478de7981432cfed28d03faac",
        "sha256": "9db89a4d2db618d92892974470556d44e74c4246c68ba7171bf51715c031c10f"
      },
      "downloads": -1,
      "filename": "opennyai-0.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "623f568478de7981432cfed28d03faac",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 168034,
      "upload_time": "2022-12-21T05:21:32",
      "upload_time_iso_8601": "2022-12-21T05:21:32.992999Z",
      "url": "https://files.pythonhosted.org/packages/33/33/b32a7b554087c4960ecb84441013f03df1c74a6f03612a90f65abcdcb530/opennyai-0.0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f643c2630dae83e5d971f579fe4a839c6c498905446d5b295f778cb10873a4f",
        "md5": "d7c8d841ce468770c88cdf73f3fd24f6",
        "sha256": "abad0a23271894531b3b9412b24a8b4ae0116c711be09bcd9083dcc14a7fd519"
      },
      "downloads": -1,
      "filename": "opennyai-0.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "d7c8d841ce468770c88cdf73f3fd24f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 140449,
      "upload_time": "2022-12-21T05:21:35",
      "upload_time_iso_8601": "2022-12-21T05:21:35.128894Z",
      "url": "https://files.pythonhosted.org/packages/9f/64/3c2630dae83e5d971f579fe4a839c6c498905446d5b295f778cb10873a4f/opennyai-0.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}