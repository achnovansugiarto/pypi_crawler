{
  "info": {
    "author": "Jan Provaznik",
    "author_email": "jan@provaznik.pro",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "WITNESS MESS provides procedures for witnessing genuine multi-partite\nentanglement from a subset of marginalia both in multi-partite qubit systems\nand multi-mode continuous variable Gaussian systems.\n\nExamples\n\n  See the examples directory. Both discrete and continuous variable examples\n  are provided.\n\nPrerequisites\n\n  A suitable semi-definite optimizer is required. \n\n  - MOSEK is a commercial optimization software. Free personal licenses are\n    provided to members of academia. It is preferred for its unmatched speed\n    and versatility. \n\n  - CVXOPT is an open source convex optimization software. It can be used as\n    well, however, it is considerably slower than MOSEK.\n\nDocumentation\n\n  Genuine multipartite entanglement can be witnessed with a pair of functions\n  that determine optimal entanglement witnesses for particular, either discrete\n  or (Gaussian) continuous variable, quantum states.\n\n  Please note that the definition of covariance matrices follows the\n  conventions from (https://doi.org/10.1088/1367-2630/8/4/051). \n\n  - dm_optimal_witness (density_matrix, component_dims, use_pairs_list)\n\n    Produces an optimal genuine multipartite entanglement witness with respect\n    to the discrete variable multi-qudit state given by density_matrix.\n\n    : density_matrix \n      defines the state, the matrix must be in Kronecker form\n\n    : component_dims \n      defines a list of component dimensions,\n      for example a 3-qubit state has [ 2, 2, 2 ]\n\n    : use_pairs_list \n      defines the list of two-body marginalia the witness is\n      permitted to use, if unset the entire density_matrix is used\n\n  - cm_optimal_witness (covariance_matrix, mode_count, use_pairs_list)\n  \n    Produces an optimal genuine multipartite entanglement witness with respect\n    to the continuous variable multi-mode state given by covariance_matrix.\n\n    : covariance_matrix \n      defines the state, the matrix must be in X-P interleaved form\n\n    : mode_count \n      defines the number of modes\n\n    : use_pairs_list \n      defines the list of two-body marginalia the witness is\n      permitted to use, if unset the entire covariance_matrix is used\n\n  In addition there is a number of helper functions for both discrete and\n  continuous variable states.\n\n  - dm_is_physical (density_matrix)\n    \n    Determines whether the density matrix represents a physical state by\n    testing if the matrix is Hermitian, positive semi-definite and its trace\n    sufficiently close to one.\n\n    : density_matrix \n      defines the matrix to be checked, must be in Kronecker form\n\n  - cm_is_physical (covariance_matrix, mode_count)\n\n    Determines whether the covariance matrix represents a physical state by\n    testing if the matrix is symmetric and satisfies uncertainty relations.\n\n    : covariance_matrix\n      defines the matrix to be checked, must be in X-P interleaved form\n\n    : mode_count\n      defines the number of modes of the state,\n      yes, it could be inferred from covariance_matrix but, alas, it is not\n\n  - cm_build_random (mode_count, spectral_factor)\n\n    Constructs a random bona-fide covariance matrix.\n\n    : mode_count\n      defines a number of modes of the resulting random state\n\n    : spectral_factor\n      defines the interval (1, 1 + spectral_factor) symplectic eigenvalues\n      are randomly chosen from\n\nReferences\n\n  The recipes for semi-definite programs are discussed in papers that are\n  referenced in the code where appropriate. States used in examples were taken\n  from different papers and are referenced as well. The same applies to the\n  conditions, criteria and recipes for construction of various mathematical\n  objects (such as Gell-Mann matrices) used in the implementation.\n\n  The implementation references the following papers.\n\n  - Multiparticle entanglement as an emergent phenomenon\n    https://doi.org/10.1103/PhysRevA.93.020104\n\n  - Proving genuine multiparticle entanglement from separable nearest-neighbor marginals\n    https://doi.org/10.1103/PhysRevA.98.062102\n\n  - Verifying genuine multipartite entanglement of the whole from its separable parts\n    https://doi.org/10.1364/QIM.2019.F5A.45\n\n  - Optimal entanglement witnesses for continuous-variable systems\n    https://doi.org/10.1088/1367-2630/8/4/051\n\n  - Continuous Variable Quantum Information: Gaussian States and Beyond\n    https://doi.org/10.1142/s1230161214400010\n\n  - Certifying emergent genuine multipartite entanglement with a partially blind witness\n    https://doi.org/10.1103/PhysRevA.106.062410\n\n  - Quantum-noise matrix for multimode systems: U(n) invariance, squeezing, and normal forms\n    https://doi.org/10.1103/PhysRevA.49.1567\n\n  - Peres-Horodecki Separability Criterion for Continuous Variable Systems\n    https://doi.org/10.1103/PhysRevLett.84.2726\n\n  - Two-element generation of the symplectic group\n    https://doi.org/10.2307/1993590\n\n  - Bloch vectors for qudits\n    https://doi.org/10.1088/1751-8113/41/23/235303\n",
    "description_content_type": "text/plain",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://provaznik.pro/witnessmess",
    "keywords": "",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "witnessmess",
    "package_url": "https://pypi.org/project/witnessmess/",
    "platform": null,
    "project_url": "https://pypi.org/project/witnessmess/",
    "project_urls": {
      "Homepage": "https://provaznik.pro/witnessmess"
    },
    "release_url": "https://pypi.org/project/witnessmess/0.4.2/",
    "requires_dist": [
      "picos (>=2.4)",
      "numpy (>=1.22)",
      "scipy (>=1.8)"
    ],
    "requires_python": "",
    "summary": "Witnessing multi-partite entanglement.",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17099866,
  "releases": {
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "846eeaef145e2c99645f7edcbac6f8cb9f7e095b684e17206657a9436f8d604e",
          "md5": "df10332c66a94bc68d40a516463a2d72",
          "sha256": "2d21b482fec54af124b2ed1d7988dffd219d0639692f81bcd69e671675979568"
        },
        "downloads": -1,
        "filename": "witnessmess-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df10332c66a94bc68d40a516463a2d72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15387,
        "upload_time": "2023-02-28T18:44:35",
        "upload_time_iso_8601": "2023-02-28T18:44:35.915861Z",
        "url": "https://files.pythonhosted.org/packages/84/6e/eaef145e2c99645f7edcbac6f8cb9f7e095b684e17206657a9436f8d604e/witnessmess-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "846eeaef145e2c99645f7edcbac6f8cb9f7e095b684e17206657a9436f8d604e",
        "md5": "df10332c66a94bc68d40a516463a2d72",
        "sha256": "2d21b482fec54af124b2ed1d7988dffd219d0639692f81bcd69e671675979568"
      },
      "downloads": -1,
      "filename": "witnessmess-0.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "df10332c66a94bc68d40a516463a2d72",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15387,
      "upload_time": "2023-02-28T18:44:35",
      "upload_time_iso_8601": "2023-02-28T18:44:35.915861Z",
      "url": "https://files.pythonhosted.org/packages/84/6e/eaef145e2c99645f7edcbac6f8cb9f7e095b684e17206657a9436f8d604e/witnessmess-0.4.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}