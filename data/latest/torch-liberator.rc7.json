{
  "info": {
    "author": "Jon Crall",
    "author_email": "jon.crall@kitware.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "Torch Liberator - Deploy PyTorch Models \n---------------------------------------\n\n|GitlabCIPipeline| |GitlabCICoverage| |Pypi| |Downloads| \n\n+----------------------+-------------------------------------------------------------+\n| Main Page            | https://gitlab.kitware.com/computer-vision/torch_liberator  |\n+----------------------+-------------------------------------------------------------+\n| Github Mirror        | https://github.com/Kitware/torch_liberator                  |\n+----------------------+-------------------------------------------------------------+\n| Pypi                 | https://pypi.org/project/torch_liberator                    |\n+----------------------+-------------------------------------------------------------+\n| Torch Hackathon 2021 | `Youtube Video`_, `Google Slides`_, and `Submission Page`_  |\n+----------------------+-------------------------------------------------------------+\n\n.. _Youtube Video: https://www.youtube.com/watch?v=GQqtn61iNsc\n.. _Google Slides: https://docs.google.com/presentation/d/1w9XHkPjtLRj29dw50WP0rSHRRlEfhksP_Sf8XldTSYE\n.. _Submission Page: https://devpost.com/software/torchliberator-partial-weight-loading\n\nTorch Liberator is a Python module containing a set of tools for reading and\nwriting relevant parts of deep networks.\n\nTypically, when moving a deep-network trained with torch, you have to keep\ntrack of the entire codebase that defined the model file in addition to the\ncheckpoint file containing the learned weights. Torch Liberator contains tools\nto extract relevant source code and bundle it with weights and serializing it\ninto a single-file deployment.\n\nNote: as of torch 1.9, torch comes with a `torch.package <https://pytorch.org/docs/stable/package.html>`__ \nsubmodule which contains a method for saving model weights with model\nstructure.  We recommend using ``torch.package`` over the single-file deployments\nprovided in this package. Thus the ``load_partial_state`` logic is the main\ncode of interest provided in this module.\n\n\n\nInstallation\n------------\n\n.. code:: bash\n\n    pip install torch_liberator\n\n    # OR with a specific branch\n\n    pip install git+https://gitlab.kitware.com/computer-vision/torch_liberator.git@main\n\n\nPartial State Loading\n---------------------\n\nNew in ``0.1.0`` torch liberator now exposes a public ``load_partial_state``\nfunction, which does it best to \"shove\" weights from one model into another\nmodel. There are several methods to compute associations between layer names in\none model to layer names in another, the most general being the \"embedding\"\nmethod, and the slightly more structured \"isomorphism\" option.\n\n\nHave you ever had the scenario where you use one model as a sub-model in a\nbigger network? Then you had to load pretrained subnetwork state into that\nbigger model? \n\nThe latest version of ``torch_liberator.load_patial_state`` can handle this by\nsolving a maximum-common-subtree-isomorphism problem. This computes the largest\npossible mapping between the two state dictionaries that share consistent\nsuffixes.\n\n.. code:: python \n\n    >>> import torchvision\n    >>> import torch\n    >>> import torch_liberator\n    >>> resnet50 = torchvision.models.resnet50()\n    >>> class CustomModel(torch.nn.Module):\n    >>>     def __init__(self):\n    >>>         super().__init__()\n    >>>         self.module = resnet50\n    >>>         self.extra = torch.nn.Linear(1, 1)\n    >>> # Directly load resnet50 state into a model that has it as an embedded subnetwork\n    >>> model = CustomModel()\n    >>> model_state_dict = resnet50.state_dict()\n    >>> # load partial state returns information about what it did\n    >>> info = torch_liberator.load_partial_state(model, model_state_dict, association='isomorphism', verbose=1)\n    >>> print(len(info['seen']['full_add']))\n    >>> print(len(info['self_unset']))\n    >>> print(len(info['other_unused']))\n    320\n    2\n    0\n    \n\nIt can also handle loading common state between two models that share some\nunderlying structure.\n\n.. code:: python \n\n    >>> import torchvision\n    >>> import torch\n    >>> import torch_liberator\n    >>> resnet50 = torchvision.models.resnet50()\n    >>> class CustomModel1(torch.nn.Module):\n    >>>     def __init__(self):\n    >>>         super().__init__()\n    >>>         self.module = resnet50\n    >>>         self.custom_model1_layer = torch.nn.Linear(1, 1)\n    >>> class CustomModel2(torch.nn.Module):\n    >>>     def __init__(self):\n    >>>         super().__init__()\n    >>>         self.backbone = resnet50\n    >>>         self.custom_model2_layer = torch.nn.Linear(1, 1)\n    >>> # Load as much of model1 state into model2 as possible\n    >>> model1 = CustomModel1()\n    >>> model2 = CustomModel2()\n    >>> model2_state_dict = model2.state_dict()\n    >>> # load partial state returns information about what it did\n    >>> info = torch_liberator.load_partial_state(model1, model2_state_dict, association='isomorphism', verbose=1)\n    >>> print(len(info['seen']['full_add']))\n    >>> print(len(info['seen']['skipped']))\n    >>> print(len(info['self_unset']))\n    >>> print(len(info['other_unused']))\n    320\n    2\n    2\n    2\n\n\n.. code:: python \n\n\n    >>> import torchvision\n    >>> import torch_liberator\n    >>> #\n    >>> faster_rcnn = torchvision.models.detection.faster_rcnn.fasterrcnn_resnet50_fpn()\n    >>> resnet50 = torchvision.models.resnet50(pretrained=True)\n    >>> state_dict = resnet50.state_dict()\n    >>> # Load partial state return a dictionary that tells you how well it did\n    >>> info = torch_liberator.load_partial_state(faster_rcnn, state_dict, verbose=0, association='embedding')\n    >>> print(ub.map_vals(len, info['seen']))\n    >>> print(ub.map_vals(len, ub.dict_diff(info, ['seen'])))\n    {'full_add': 265, 'skipped': 55}\n    {'other_unused': 55, 'self_unset': 30}\n\n    >>> # Load partial state return a dictionary that tells you how well it did\n    >>> info = torch_liberator.load_partial_state(faster_rcnn, state_dict, verbose=0, association='isomorphism')\n    >>> print(ub.map_vals(len, info['seen']))\n    >>> print(ub.map_vals(len, ub.dict_diff(info, ['seen'])))\n    {'full_add': 265, 'skipped': 55}\n    {'other_unused': 55, 'self_unset': 30}\n    \n    \n\nAlso, if the sizes of the tensor don't quite fit, they will be mangled, i.e.\n\"shoved-in\" as best as possible. See the docstring for more detail.\n\n\nStand-alone Single-File Model Deployments\n-----------------------------------------\n\nThe original purpose of ``torch_liberator`` was to build standalone torch\npackages that contained both the model code and the model weight. It still does\nthat but ``torch.package`` new in torch 1.9, might be a better solution moving\nforward. See `torch.package <https://pytorch.org/docs/stable/package.html>`__\nfor details.\n\nTorch Liberator builds on the\n`liberator <https://gitlab.kitware.com/python/liberator>`__ library to statically\nextract pytorch code that defines a model's topology and bundle that with a\npretrained weights file. This results in a single-file deployment package and\ncan potentially remove dependencies on the codebase used to train the model.\n\nTorch Liberator can also read these deployment files and create an instance of\nthe model initialized with the correct pretrained weights.\n\nThe API is ok, but it does need improvement. However, the current version is in\na working state. There aren't any high level docs, but there are a lot of\ndocstrings and doctests. The example here gives a good overview of the code by\nextracting the AlexNet model from torchvision.\n\n\n.. code:: python \n\n    >>> import torch_liberator\n    >>> from torch_liberator.deployer import DeployedModel\n    >>> from torchvision import models\n\n    >>> print('--- DEFINE A MODEL ---')\n    >>> model = models.alexnet(pretrained=False)  # false for test speed\n    >>> initkw = dict(num_classes=1000)  # not all models nicely supply this\n    >>> model._initkw = initkw\n    --- DEFINE A MODEL ---\n\n    >>> print('--- DEPLOY THE MODEL ---')\n    >>> zip_fpath = torch_liberator.deploy(model, 'test-deploy.zip')\n    --- DEPLOY THE MODEL ---\n    [DEPLOYER] Deployed zipfpath=/tmp/tmpeqd3y_rx/test-deploy.zip\n    \n\n    >>> print('--- LOAD THE DEPLOYED MODEL ---')\n    >>> loader = DeployedModel(zip_fpath)\n    >>> model = loader.load_model()\n    --- LOAD THE DEPLOYED MODEL ---\n    Loading data onto None from <zopen(<_io.BufferedReader name='/tmp/tmpg1kln3kw/test-deploy/deploy_snapshot.pt'> mode=rb)>\n    Pretrained weights are a perfect fit\n    \n\nThe major weirdness right now, is you either have to explicitly define \"initkw\"\n(which are the keyword arguments used to create an instance of our model) at\ndeploy time, or you can set it as the ``_initkw`` attribute of your model (or\nif your keyword arguments all exist as member variables of the class,\ntorch_liberator tries to be smart and infer what initkw should be).\n\n\nThere is also a torch-liberator CLI that can be used to package a weight file,\na python model file, and optional json metadata.\n\n.. code:: bash\n\n    python -m torch_liberator \\\n        --model <path-to-the-liberated-py-file> \\\n        --weights <path-to-the-torch-pth-weight-file> \\\n        --info <path-to-train-info-json-file> \\\n        --dst my_custom_deployfile.zip\n\n\n.. |Pypi| image:: https://img.shields.io/pypi/v/torch_liberator.svg\n   :target: https://pypi.python.org/pypi/torch_liberator\n\n.. |Downloads| image:: https://img.shields.io/pypi/dm/torch_liberator.svg\n   :target: https://pypistats.org/packages/torch_liberator\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/torch_liberator/badge/?version=latest\n    :target: http://torch_liberator.readthedocs.io/en/latest/\n\n.. # See: https://ci.appveyor.com/project/jon.crall/torch_liberator/settings/badges\n.. .. |Appveyor| image:: https://ci.appveyor.com/api/projects/status/py3s2d6tyfjc8lm3/branch/main?svg=true\n.. :target: https://ci.appveyor.com/project/jon.crall/torch_liberator/branch/main\n\n.. |GitlabCIPipeline| image:: https://gitlab.kitware.com/computer-vision/torch_liberator/badges/main/pipeline.svg\n   :target: https://gitlab.kitware.com/computer-vision/torch_liberator/-/jobs\n\n.. |GitlabCICoverage| image:: https://gitlab.kitware.com/computer-vision/torch_liberator/badges/main/coverage.svg?job=coverage\n    :target: https://gitlab.kitware.com/computer-vision/torch_liberator/commits/main\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.kitware.com/computer-vision/torch_liberator",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torch-liberator",
    "package_url": "https://pypi.org/project/torch-liberator/",
    "platform": null,
    "project_url": "https://pypi.org/project/torch-liberator/",
    "project_urls": {
      "Homepage": "https://gitlab.kitware.com/computer-vision/torch_liberator"
    },
    "release_url": "https://pypi.org/project/torch-liberator/0.2.1/",
    "requires_dist": [
      "ubelt (>=1.2.2)",
      "liberator (>=0.0.1)",
      "networkx-algo-common-subtree (>=0.2.0)",
      "numpy (>=1.19.3) ; python_version < \"3.10\" and python_version >= \"3.6\"",
      "torch (>=1.9.0) ; python_version < \"3.10\" and python_version >= \"3.9\"",
      "torch (>=1.11.0) ; python_version < \"3.11\" and python_version >= \"3.10\"",
      "numpy (>=1.21.6) ; python_version < \"3.11\" and python_version >= \"3.10\"",
      "networkx (>=2.5.1) ; python_version < \"3.7\" and python_version >= \"3.6\"",
      "torch (>=1.9.0) ; python_version < \"3.9.0\" and python_version >= \"3.6.0\"",
      "torch (>=1.13.0) ; python_version < \"4.0\" and python_version >= \"3.11\"",
      "numpy (>=1.23.2) ; python_version < \"4.0\" and python_version >= \"3.11\"",
      "networkx (>=2.6.2) ; python_version >= \"3.7\"",
      "ubelt (>=1.2.2) ; extra == 'all'",
      "liberator (>=0.0.1) ; extra == 'all'",
      "networkx-algo-common-subtree (>=0.2.0) ; extra == 'all'",
      "xdoctest (>=0.15.10) ; extra == 'all'",
      "ubelt (==1.2.2) ; extra == 'all-strict'",
      "liberator (==0.0.1) ; extra == 'all-strict'",
      "networkx-algo-common-subtree (==0.2.0) ; extra == 'all-strict'",
      "xdoctest (==0.15.10) ; extra == 'all-strict'",
      "numpy (==1.19.3) ; (python_version < \"3.10\" and python_version >= \"3.6\") and extra == 'all-strict'",
      "torch (==1.9.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
      "pytest (==4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'all-strict'",
      "torch (==1.11.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
      "numpy (==1.21.6) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
      "torchvision (==0.12.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
      "coverage (==4.4.0) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'all-strict'",
      "networkx (==2.5.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
      "pytest (==4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'all-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all-strict'",
      "torch (==1.9.0) ; (python_version < \"3.9.0\" and python_version >= \"3.6.0\") and extra == 'all-strict'",
      "torch (==1.13.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all-strict'",
      "numpy (==1.23.2) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all-strict'",
      "pytest (==6.2.5) ; (python_version >= \"3.10.0\") and extra == 'all-strict'",
      "coverage (==5.2.1) ; (python_version >= \"3.6\") and extra == 'all-strict'",
      "pytest-cov (==3.0.0) ; (python_version >= \"3.6.0\") and extra == 'all-strict'",
      "networkx (==2.6.2) ; (python_version >= \"3.7\") and extra == 'all-strict'",
      "numpy (>=1.19.3) ; (python_version < \"3.10\" and python_version >= \"3.6\") and extra == 'all'",
      "torch (>=1.9.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
      "torchvision (>=0.10.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
      "pytest (>=4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'all'",
      "torch (>=1.11.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
      "numpy (>=1.21.6) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
      "torchvision (>=0.12.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
      "coverage (>=4.4.0) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'all'",
      "networkx (>=2.5.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
      "torchvision (>=0.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
      "pytest (>=4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'all'",
      "torchvision (>=0.10.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all'",
      "torchvision (>=0.10.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all'",
      "torch (>=1.9.0) ; (python_version < \"3.9.0\" and python_version >= \"3.6.0\") and extra == 'all'",
      "torch (>=1.13.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all'",
      "numpy (>=1.23.2) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all'",
      "pytest (>=6.2.5) ; (python_version >= \"3.10.0\") and extra == 'all'",
      "coverage (>=5.2.1) ; (python_version >= \"3.6\") and extra == 'all'",
      "pytest-cov (>=3.0.0) ; (python_version >= \"3.6.0\") and extra == 'all'",
      "networkx (>=2.6.2) ; (python_version >= \"3.7\") and extra == 'all'",
      "ubelt (==1.2.2) ; extra == 'runtime-strict'",
      "liberator (==0.0.1) ; extra == 'runtime-strict'",
      "networkx-algo-common-subtree (==0.2.0) ; extra == 'runtime-strict'",
      "numpy (==1.19.3) ; (python_version < \"3.10\" and python_version >= \"3.6\") and extra == 'runtime-strict'",
      "torch (==1.9.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'runtime-strict'",
      "torch (==1.11.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'runtime-strict'",
      "numpy (==1.21.6) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'runtime-strict'",
      "networkx (==2.5.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'runtime-strict'",
      "torch (==1.9.0) ; (python_version < \"3.9.0\" and python_version >= \"3.6.0\") and extra == 'runtime-strict'",
      "torch (==1.13.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'runtime-strict'",
      "numpy (==1.23.2) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'runtime-strict'",
      "networkx (==2.6.2) ; (python_version >= \"3.7\") and extra == 'runtime-strict'",
      "xdoctest (>=0.15.10) ; extra == 'tests'",
      "xdoctest (==0.15.10) ; extra == 'tests-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'tests-strict'",
      "pytest (==4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'tests-strict'",
      "torchvision (==0.12.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'tests-strict'",
      "coverage (==4.4.0) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'tests-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'tests-strict'",
      "pytest (==4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'tests-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'tests-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'tests-strict'",
      "pytest (==6.2.5) ; (python_version >= \"3.10.0\") and extra == 'tests-strict'",
      "coverage (==5.2.1) ; (python_version >= \"3.6\") and extra == 'tests-strict'",
      "pytest-cov (==3.0.0) ; (python_version >= \"3.6.0\") and extra == 'tests-strict'",
      "torchvision (>=0.10.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'tests'",
      "pytest (>=4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'tests'",
      "torchvision (>=0.12.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'tests'",
      "coverage (>=4.4.0) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'tests'",
      "torchvision (>=0.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'tests'",
      "pytest (>=4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'tests'",
      "torchvision (>=0.10.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'tests'",
      "torchvision (>=0.10.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'tests'",
      "pytest (>=6.2.5) ; (python_version >= \"3.10.0\") and extra == 'tests'",
      "coverage (>=5.2.1) ; (python_version >= \"3.6\") and extra == 'tests'",
      "pytest-cov (>=3.0.0) ; (python_version >= \"3.6.0\") and extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "The torch liberator module",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16816443,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce8835b4b933342554c75317e850f21433ebc01b4df6ea1c4a558a83bcb2c61b",
          "md5": "0b79337e8bd317fd748c915c566f5467",
          "sha256": "0aa3e9d32ee980244638d54b1e4f970190c7fc2b9d102d060c271c4dccc82553"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.0.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "0b79337e8bd317fd748c915c566f5467",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20379,
        "upload_time": "2020-04-08T22:55:19",
        "upload_time_iso_8601": "2020-04-08T22:55:19.839752Z",
        "url": "https://files.pythonhosted.org/packages/ce/88/35b4b933342554c75317e850f21433ebc01b4df6ea1c4a558a83bcb2c61b/torch_liberator-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee30be451317d90c8cbea4c34481f5fb68e55e5bd76bc9ec37fc3652ba36e4f9",
          "md5": "3a00ea2bfa757bbde1e48e0342b457d3",
          "sha256": "25f4c27c1f89bb21878be03d8108b5c2cdffca312039bf7d5c8953d1364fe425"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.0.2-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "3a00ea2bfa757bbde1e48e0342b457d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20373,
        "upload_time": "2020-04-08T22:55:21",
        "upload_time_iso_8601": "2020-04-08T22:55:21.708364Z",
        "url": "https://files.pythonhosted.org/packages/ee/30/be451317d90c8cbea4c34481f5fb68e55e5bd76bc9ec37fc3652ba36e4f9/torch_liberator-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b06883340914c0acaef5c7cdc64cf99221b2118df29da4d0f8ee13c08ba4d21",
          "md5": "3332a096c6ebd6a8ad6c54e2eb76cb92",
          "sha256": "df0fedcddd34b1e5061eb1561f357c5bfff6086eb8da9e8ae018636c964875f4"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.0.2.tar.gz",
        "has_sig": true,
        "md5_digest": "3332a096c6ebd6a8ad6c54e2eb76cb92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20590,
        "upload_time": "2020-04-08T22:55:16",
        "upload_time_iso_8601": "2020-04-08T22:55:16.828315Z",
        "url": "https://files.pythonhosted.org/packages/3b/06/883340914c0acaef5c7cdc64cf99221b2118df29da4d0f8ee13c08ba4d21/torch_liberator-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "990f7eb9169af44b7f02b900fa0cbf647b5fa6b11ec1f98851667645955e873b",
          "md5": "d5354fdb477f8b0136473314830705c0",
          "sha256": "5a634e88aa09fccf7521beb86f15dcc2f9e3895ec424936a414bdaafbfd2d242"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.0.3-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "d5354fdb477f8b0136473314830705c0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 21286,
        "upload_time": "2020-05-29T17:43:35",
        "upload_time_iso_8601": "2020-05-29T17:43:35.010393Z",
        "url": "https://files.pythonhosted.org/packages/99/0f/7eb9169af44b7f02b900fa0cbf647b5fa6b11ec1f98851667645955e873b/torch_liberator-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a801ee6b83069817634807f56d84f77d18b060056743a3c80fccc9be0eb58455",
          "md5": "603e8180e749dd70f513c3d49693a744",
          "sha256": "d5ccdf8c210673a853991f254dc0ceafff94bbc6b0025ddddab075ed0f0f6120"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.0.3-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "603e8180e749dd70f513c3d49693a744",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21281,
        "upload_time": "2020-05-29T17:43:36",
        "upload_time_iso_8601": "2020-05-29T17:43:36.811781Z",
        "url": "https://files.pythonhosted.org/packages/a8/01/ee6b83069817634807f56d84f77d18b060056743a3c80fccc9be0eb58455/torch_liberator-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13fdb105dc12c67dc5f09367038b82bdc7a54e6730748d5dc617d68dfbe46d13",
          "md5": "03dcb02d005d149657a6d0a17e577182",
          "sha256": "cacdb913b202b8fff6faeb0184dda84d0b6eebd01251930322c8753efb5e6d4e"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.0.3.tar.gz",
        "has_sig": true,
        "md5_digest": "03dcb02d005d149657a6d0a17e577182",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22182,
        "upload_time": "2020-05-29T17:43:32",
        "upload_time_iso_8601": "2020-05-29T17:43:32.441401Z",
        "url": "https://files.pythonhosted.org/packages/13/fd/b105dc12c67dc5f09367038b82bdc7a54e6730748d5dc617d68dfbe46d13/torch_liberator-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "520baeca6d280bdacd8527ff08df41fa245483322af264f49174930579bdab4b",
          "md5": "9b8ee7f931739f9fb227ed2eb6c1640f",
          "sha256": "410dc40737e16546eb654c72a88c9f7594499abb521f565c70c6dacce14b0f61"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.0.4-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "9b8ee7f931739f9fb227ed2eb6c1640f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 21471,
        "upload_time": "2020-07-31T23:10:05",
        "upload_time_iso_8601": "2020-07-31T23:10:05.538637Z",
        "url": "https://files.pythonhosted.org/packages/52/0b/aeca6d280bdacd8527ff08df41fa245483322af264f49174930579bdab4b/torch_liberator-0.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "192b767ecaf47b98f7cafb8d56036f2291a9aa076ce3528109c539ec4b43d793",
          "md5": "e66d09fe8569d1bd45761c28067b7744",
          "sha256": "1e103cd14bcbc1073e9f3cda176654d2e9e6ecf822a66ddcf753e5a2d8406894"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.0.4-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "e66d09fe8569d1bd45761c28067b7744",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21467,
        "upload_time": "2020-07-31T23:10:07",
        "upload_time_iso_8601": "2020-07-31T23:10:07.146695Z",
        "url": "https://files.pythonhosted.org/packages/19/2b/767ecaf47b98f7cafb8d56036f2291a9aa076ce3528109c539ec4b43d793/torch_liberator-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c44c431c574b1f77c103fa0099df5a7ccfd47471a7e17bfeeb5f18c43322103",
          "md5": "af5910672787c4ea6f7116938742ad00",
          "sha256": "033be2f25c5d0c3398cb1502ca1777556eaadeda5d7c0c9cea2778347489a55a"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.0.4.tar.gz",
        "has_sig": true,
        "md5_digest": "af5910672787c4ea6f7116938742ad00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22336,
        "upload_time": "2020-07-31T23:10:03",
        "upload_time_iso_8601": "2020-07-31T23:10:03.521098Z",
        "url": "https://files.pythonhosted.org/packages/2c/44/c431c574b1f77c103fa0099df5a7ccfd47471a7e17bfeeb5f18c43322103/torch_liberator-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9b409c68b6bf8018ed7f0187a997e1349635eac47baf45c809f8f654d258593",
          "md5": "710ad1ebc05f5fbe2131d34deb0ab3bf",
          "sha256": "058096ab00500eb379b7026840ea0d8cd3cf18b96d3505f9bba60c7c99dac416"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "710ad1ebc05f5fbe2131d34deb0ab3bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56623,
        "upload_time": "2021-05-06T17:01:11",
        "upload_time_iso_8601": "2021-05-06T17:01:11.162775Z",
        "url": "https://files.pythonhosted.org/packages/d9/b4/09c68b6bf8018ed7f0187a997e1349635eac47baf45c809f8f654d258593/torch_liberator-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5939f2121fc1bdc676ce9354f1a0b2a815897436fa9d4030334e3fc51f0b0371",
          "md5": "1ac427543c7bc6e1150966dd136545dc",
          "sha256": "3bf883ee49d725a2391969ac0d9ae5ef22d7e74e1c300b8a4a094c8787e4ee8b"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "1ac427543c7bc6e1150966dd136545dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51010,
        "upload_time": "2021-05-06T17:01:08",
        "upload_time_iso_8601": "2021-05-06T17:01:08.218786Z",
        "url": "https://files.pythonhosted.org/packages/59/39/f2121fc1bdc676ce9354f1a0b2a815897436fa9d4030334e3fc51f0b0371/torch_liberator-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fef420b5496c1f7f68d972e6e1b09b6dbb5f61fb34aa0196b5c42241d7e9ca6e",
          "md5": "c101f4c7d19b6ac6a3cf8c3e214a21d1",
          "sha256": "b005611c5b30d90a040c95a0d9b7360c4bb41c67e13668834a72e4c45d414f7c"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.1-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl",
        "has_sig": true,
        "md5_digest": "c101f4c7d19b6ac6a3cf8c3e214a21d1",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 168814,
        "upload_time": "2021-11-01T17:46:46",
        "upload_time_iso_8601": "2021-11-01T17:46:46.390863Z",
        "url": "https://files.pythonhosted.org/packages/fe/f4/20b5496c1f7f68d972e6e1b09b6dbb5f61fb34aa0196b5c42241d7e9ca6e/torch_liberator-0.1.1-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bac6260411f5fdeb31fad893f260d5272997b9591b5d65bb28a12ebfbcced8b",
          "md5": "3c3410f9665f740883bad6aa5ed3ae6b",
          "sha256": "cf29d8a23b1d5af77dd611bcf1e1ae59751a5a71fe64de28712197c791a8e117"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.1-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": true,
        "md5_digest": "3c3410f9665f740883bad6aa5ed3ae6b",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 170233,
        "upload_time": "2021-11-01T17:46:49",
        "upload_time_iso_8601": "2021-11-01T17:46:49.709610Z",
        "url": "https://files.pythonhosted.org/packages/7b/ac/6260411f5fdeb31fad893f260d5272997b9591b5d65bb28a12ebfbcced8b/torch_liberator-0.1.1-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6be25567e549385dc5be2ed146197b95e3b6186f7a08f26accea67de7c5dde2",
          "md5": "8ffacabbffb08026b98b5a5bd9cc2147",
          "sha256": "b0a1bc6bc28c9c636add7414f976abf9e4beacc439f4f797c9bd14feb4e5aaed"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.1-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl",
        "has_sig": true,
        "md5_digest": "8ffacabbffb08026b98b5a5bd9cc2147",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 168686,
        "upload_time": "2021-11-01T17:46:52",
        "upload_time_iso_8601": "2021-11-01T17:46:52.514111Z",
        "url": "https://files.pythonhosted.org/packages/c6/be/25567e549385dc5be2ed146197b95e3b6186f7a08f26accea67de7c5dde2/torch_liberator-0.1.1-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fbf3737cd6de1d81ce4a77014096e7515d0066bf37d665d481b1246e7bda223",
          "md5": "687c7b2712796150f7b720135ee5ad74",
          "sha256": "64bf64fe5d754a117a4d684a31d7085c4b8ad63f368f3f0ef06978dec19afe16"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": true,
        "md5_digest": "687c7b2712796150f7b720135ee5ad74",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 170316,
        "upload_time": "2021-11-01T17:46:55",
        "upload_time_iso_8601": "2021-11-01T17:46:55.692374Z",
        "url": "https://files.pythonhosted.org/packages/5f/bf/3737cd6de1d81ce4a77014096e7515d0066bf37d665d481b1246e7bda223/torch_liberator-0.1.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85f8c9d5796fc839a3a507f641d08b2022fe391fa806fc732732843cae0b0fba",
          "md5": "4eb9ecaded27152831c4be503adfdc80",
          "sha256": "2ddd80704e14a0a04cd5ed0d50f83e199f56790edcbf913aa89de6b13e32522a"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl",
        "has_sig": true,
        "md5_digest": "4eb9ecaded27152831c4be503adfdc80",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 175817,
        "upload_time": "2021-11-01T17:46:58",
        "upload_time_iso_8601": "2021-11-01T17:46:58.435557Z",
        "url": "https://files.pythonhosted.org/packages/85/f8/c9d5796fc839a3a507f641d08b2022fe391fa806fc732732843cae0b0fba/torch_liberator-0.1.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c83772f3b5c258dbcc325ecbbf624aeb63c5bb6ca66f4f783638d6e26fe565f",
          "md5": "3b4e5968a60b76bbc6a57067a5a0c62b",
          "sha256": "37a96e6d915c563ce4d4711c25fbc10031d0342aea029c04c6da95cf6d97d4ac"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": true,
        "md5_digest": "3b4e5968a60b76bbc6a57067a5a0c62b",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 178422,
        "upload_time": "2021-11-01T17:47:01",
        "upload_time_iso_8601": "2021-11-01T17:47:01.599908Z",
        "url": "https://files.pythonhosted.org/packages/9c/83/772f3b5c258dbcc325ecbbf624aeb63c5bb6ca66f4f783638d6e26fe565f/torch_liberator-0.1.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a473deaebf2dd48a55b7bb3f45d34bda6c073e2123d4d75ddbfa266713824276",
          "md5": "7c721956c6987c479d3329d71c5793a4",
          "sha256": "a797f20ed9354935405e008802869c7af807488478c8c3dc724b8f218835af59"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl",
        "has_sig": true,
        "md5_digest": "7c721956c6987c479d3329d71c5793a4",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 175072,
        "upload_time": "2021-11-01T17:47:04",
        "upload_time_iso_8601": "2021-11-01T17:47:04.886530Z",
        "url": "https://files.pythonhosted.org/packages/a4/73/deaebf2dd48a55b7bb3f45d34bda6c073e2123d4d75ddbfa266713824276/torch_liberator-0.1.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f50ecb01154e971ea481f0c093379094e4a9210674bb8667ee8470db3cf07e7",
          "md5": "3a969ad9b329b13e521322c884bf62d1",
          "sha256": "886f02e78df5500a8637999db99c9f80ebde3d017f48f12580762c2c34178ac6"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.1-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": true,
        "md5_digest": "3a969ad9b329b13e521322c884bf62d1",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 176794,
        "upload_time": "2021-11-01T17:47:08",
        "upload_time_iso_8601": "2021-11-01T17:47:08.410265Z",
        "url": "https://files.pythonhosted.org/packages/7f/50/ecb01154e971ea481f0c093379094e4a9210674bb8667ee8470db3cf07e7/torch_liberator-0.1.1-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebd8774e211acd656713d65bdf2b5df3cc89b1ddff2457c5f95748feaeea24ad",
          "md5": "6bcaaadd4640600f7705d35ba9c6b2f8",
          "sha256": "74fa1e512ef121c45c5b99977b4bedcd91fc7295b44ec0dab2739abb262e5b36"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.1.1-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "6bcaaadd4640600f7705d35ba9c6b2f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58270,
        "upload_time": "2021-11-01T17:46:05",
        "upload_time_iso_8601": "2021-11-01T17:46:05.448330Z",
        "url": "https://files.pythonhosted.org/packages/eb/d8/774e211acd656713d65bdf2b5df3cc89b1ddff2457c5f95748feaeea24ad/torch_liberator-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32467795cd694f466416d8aef82d3c078626467fe14e7b9f8725d8dc4902723d",
          "md5": "eb0a4ce8b1cee35b3a44e1408e3822a3",
          "sha256": "4e98e65f30975992c58265d02f40f4495db3db157a9fedb1de787ac03bd1ce59"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.2.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "eb0a4ce8b1cee35b3a44e1408e3822a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 47242,
        "upload_time": "2022-09-16T22:58:41",
        "upload_time_iso_8601": "2022-09-16T22:58:41.427823Z",
        "url": "https://files.pythonhosted.org/packages/32/46/7795cd694f466416d8aef82d3c078626467fe14e7b9f8725d8dc4902723d/torch_liberator-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6633cb0d53200183b597a459e5017d5ef2d37730d679feb3088d6dde121a8d7e",
          "md5": "77ced679a5764bcb2327cd6bc3de7b0b",
          "sha256": "5aacbfb0327508e3d54e4a8b1cce2ee95b8fa7576da9b8493acac9ecf69e1440"
        },
        "downloads": -1,
        "filename": "torch_liberator-0.2.1-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "77ced679a5764bcb2327cd6bc3de7b0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 47390,
        "upload_time": "2023-02-12T00:52:34",
        "upload_time_iso_8601": "2023-02-12T00:52:34.846925Z",
        "url": "https://files.pythonhosted.org/packages/66/33/cb0d53200183b597a459e5017d5ef2d37730d679feb3088d6dde121a8d7e/torch_liberator-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6633cb0d53200183b597a459e5017d5ef2d37730d679feb3088d6dde121a8d7e",
        "md5": "77ced679a5764bcb2327cd6bc3de7b0b",
        "sha256": "5aacbfb0327508e3d54e4a8b1cce2ee95b8fa7576da9b8493acac9ecf69e1440"
      },
      "downloads": -1,
      "filename": "torch_liberator-0.2.1-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "77ced679a5764bcb2327cd6bc3de7b0b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 47390,
      "upload_time": "2023-02-12T00:52:34",
      "upload_time_iso_8601": "2023-02-12T00:52:34.846925Z",
      "url": "https://files.pythonhosted.org/packages/66/33/cb0d53200183b597a459e5017d5ef2d37730d679feb3088d6dde121a8d7e/torch_liberator-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}