{
  "info": {
    "author": "",
    "author_email": "Peter Shen <xianpeng.shen@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# cpp-linter-hooks\n\n[![Test](https://github.com/cpp-linter/cpp-linter-hooks/actions/workflows/test.yml/badge.svg)](https://github.com/cpp-linter/cpp-linter-hooks/actions/workflows/test.yml)\n[![codecov](https://codecov.io/gh/cpp-linter/cpp-linter-hooks/branch/main/graph/badge.svg?token=L74Z3HZ4Y5)](https://codecov.io/gh/cpp-linter/cpp-linter-hooks)\n\nUsing `clang-format` and `clang-tidy` hooks with [pre-commit](https://pre-commit.com/) to lint your C/C++ code.\n\nHighlightâœ¨: No need to manually download and install `clang-format` or `clang-tidy` on your system.\n\n## Usage\n\nAdd this to your `.pre-commit-config.yaml`\n\n```yaml\nrepos:\n  - repo: https://github.com/cpp-linter/cpp-linter-hooks\n    rev: v0.2.1  # Use the ref you want to point at\n    hooks:\n      - id: clang-format\n        args: [--style=Google] # Other coding style: LLVM, GNU, Chromium, Microsoft, Mozilla, WebKit.\n      - id: clang-tidy\n        args: [--checks='boost-*,bugprone-*,performance-*,readability-*,portability-*,modernize-*,clang-analyzer-*,cppcoreguidelines-*']\n```\n\nThe example of using custom config: `.clang-format` and `.clang-tidy`\n\n```yaml\nrepos:\n  - repo: https://github.com/cpp-linter/cpp-linter-hooks\n    rev: v0.2.1\n    hooks:\n      - id: clang-format\n        args: [--style=file]  # to load .clang-format\n      - id: clang-tidy\n        args: [--checks=.clang-tidy] # path/to/.clang-tidy\n```\n\nThe example of using any version of [clang-tools](https://github.com/cpp-linter/clang-tools-pip).\n\n```yaml\nrepos:\n  - repo: https://github.com/cpp-linter/cpp-linter-hooks\n    rev: v0.2.1\n    hooks:\n      - id: clang-format\n        args: [--style=file, --version=13]\n      - id: clang-tidy\n        args: [--checks=.clang-tidy, --version=12]\n```\n\n## Output\n\n### clang-format output\n\n```bash\nclang-format.............................................................Failed\n- hook id: clang-format\n- files were modified by this hook\n```\n\nHere is the diff between the modified file.\n\n```diff\n--- a/testing/main.c\n+++ b/testing/main.c\n@@ -1,3 +1,6 @@\n #include <stdio.h>\n-int main() {for (;;) break; printf(\"Hello world!\\n\");return 0;}\n-\n+int main() {\n+  for (;;) break;\n+  printf(\"Hello world!\\n\");\n+  return 0;\n+}\n```\n\nPass `--dry-run` to the `args` of `clang-format`(can also pass other arg which clang-format supports)\n\nThen it will just print instead of changing the format. E.g:\n\n```bash\nclang-format.............................................................Failed\n- hook id: clang-format\n- exit code: 255\n\nmain.c:2:11: warning: code should be clang-formatted [-Wclang-format-violations]\nint main() {for (;;) break; printf(\"Hello world!\\n\");return 0;}\n          ^\nmain.c:2:13: warning: code should be clang-formatted [-Wclang-format-violations]\nint main() {for (;;) break; printf(\"Hello world!\\n\");return 0;}\n            ^\nmain.c:2:21: warning: code should be clang-formatted [-Wclang-format-violations]\nint main() {for (;;) break; printf(\"Hello world!\\n\");return 0;}\n                    ^\nmain.c:2:28: warning: code should be clang-formatted [-Wclang-format-violations]\nint main() {for (;;) break; printf(\"Hello world!\\n\");return 0;}\n                           ^\nmain.c:2:54: warning: code should be clang-formatted [-Wclang-format-violations]\nint main() {for (;;) break; printf(\"Hello world!\\n\");return 0;}\n                                                     ^\nmain.c:2:63: warning: code should be clang-formatted [-Wclang-format-violations]\nint main() {for (;;) break; printf(\"Hello world!\\n\");return 0;}\n                                                              ^\n```\n\n### chang-tidy output\n\n```bash\nclang-tidy...............................................................Failed\n- hook id: clang-tidy\n- exit code: 1\n\n418 warnings and 1 error generated.\nError while processing /home/ubuntu/cpp-linter-hooks/testing/main.c.\nSuppressed 417 warnings (417 in non-user code).\nUse -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.\nFound compiler error(s).\n/home/ubuntu/cpp-linter-hooks/testing/main.c:3:11: warning: statement should be inside braces [readability-braces-around-statements]\n  for (;;) break;\n          ^\n           {\n/usr/include/stdio.h:33:10: error: 'stddef.h' file not found [clang-diagnostic-error]\n#include <stddef.h>\n         ^~~~~~~~~~\n```\n\n## Contributing\n\nAny contribution is very welcome, including submitting issues, PRs, etc.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "clang,clang-format,clang-tidy,pre-commit,pre-commit-hooks",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cpp-linter-hooks",
    "package_url": "https://pypi.org/project/cpp-linter-hooks/",
    "platform": null,
    "project_url": "https://pypi.org/project/cpp-linter-hooks/",
    "project_urls": {
      "source": "https://github.com/cpp-linter/cpp-linter-hooks",
      "tracker": "https://github.com/cpp-linter/cpp-linter-hooks/issues"
    },
    "release_url": "https://pypi.org/project/cpp-linter-hooks/0.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Automatically check c/c++ with clang-format and clang-tidy",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14753086,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7177013f9f0e022043b51e0944d84149a4529d8ae62106b98e7fd309e45ec43",
          "md5": "3ecca57288d58d22a681eba98ec49586",
          "sha256": "d2e05a7d56d3079770c7c800f24f00080b890febb9c8fa0c8545287cf290f420"
        },
        "downloads": -1,
        "filename": "cpp_linter_hooks-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ecca57288d58d22a681eba98ec49586",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6193,
        "upload_time": "2022-08-14T03:19:31",
        "upload_time_iso_8601": "2022-08-14T03:19:31.564377Z",
        "url": "https://files.pythonhosted.org/packages/e7/17/7013f9f0e022043b51e0944d84149a4529d8ae62106b98e7fd309e45ec43/cpp_linter_hooks-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7177013f9f0e022043b51e0944d84149a4529d8ae62106b98e7fd309e45ec43",
        "md5": "3ecca57288d58d22a681eba98ec49586",
        "sha256": "d2e05a7d56d3079770c7c800f24f00080b890febb9c8fa0c8545287cf290f420"
      },
      "downloads": -1,
      "filename": "cpp_linter_hooks-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3ecca57288d58d22a681eba98ec49586",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6193,
      "upload_time": "2022-08-14T03:19:31",
      "upload_time_iso_8601": "2022-08-14T03:19:31.564377Z",
      "url": "https://files.pythonhosted.org/packages/e7/17/7013f9f0e022043b51e0944d84149a4529d8ae62106b98e7fd309e45ec43/cpp_linter_hooks-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}