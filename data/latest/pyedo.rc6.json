{
  "info": {
    "author": "COMAU",
    "author_email": "info@edo.cloud",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Pyedo\n=======================================\n\nThis package contains the SDK to program e.DO robot with Python\n<img src=\"https://edo.cloud/wp-content/uploads/2021/06/edo-6-axes.png\" alt=\"eDo robot\" width=\"100px\"/> \n\n\n# Programming e.DO with Python\n\nQuick installation\n-----------\nInstall the Python version on your device, we suggest python >= 3.7.5 :\n\nhttps://www.python.org/downloads/\n\nThere are two possibilities to install pyedo on your environment:\n\n- Download the SDK from our site. Drag and drop the \"pyedo\" package into the python path site packages.\n\n\"C:\\Users\\YourAccount\\AppData\\Local\\Programs\\Python\\PythonXX\\Lib\\site-packages\\\"\n\n- Pyedo can be installed using pip:\n\n        $ pip install pyedo\n\n# How to start:\nCreate a new program, import the object from the pyedo library, create an instance of an eDO object in your program and now move e.DO with the available methods defined below.\n\n```python\nfrom pyedo import edo # import the object from the pyedo library\nmyedo = edo('10.42.0.49') # create an instance of an eDO object\n```\nYou are now able to connect your device with e.DO via Python.\n\nThe addresses available for e.DO are: '10.42.0.49' for the Ethernet/LAN connection and '192.168.12.1' for the WiFi connection\n\n# INIT\nThis method allows to initialize the e.DO robot, with or without gripper:\n- init7Axes() :\nCan initialize the robot with 7 axes (e.DO 6 axes plus the gripper)\n- init6Axes() :\nCan initialize the robot with 6 axes \n\n# DISENGAGE\nThis method allows to disengage the brakes:\n- disengageStd() :\nCan disengage the robot with the standard movement (RECOMMENDED)\n- disengageSin() :\nCan disegage the robot with a sinusoidal movement (MANDATORY TO HAVE THE JOINTS FAR AWAY FROM THE STROKE END)\n- disengageSafe() :\nCan release only the brakes\n- unblock() :\nWhen the e.Do is not responding to commands (not singularity).\n\n# CALIB\nThis method allows to calibrate all the joints:\n- calibAxes() :\nCan calibrate all the robot axes (MANDATORY TO HAVE THE JOINTS ALLIGNED WITH THE NOTCHES (Home Position)) \nThe calibration is possible only after the initizialization(init method) and the disengage of the brakes(disengage method)\n\nExample: (procedure to calibrate a real eDO)\n 1) move the edo from the App to calibration position\n 2) disconnect the App\n 3) connect to eDo with python, now you can launch the calibAxes() safely\n\n# SET\nThis method sets the joints speed parameter:\n- setSpeed(ovr) :\n Sets the speed, in percentage value, of all joints. The parameter of the function is a number between «0» and «100». The default value of ovr is «100».\n It prints a warning if the parameter passed is not in the accepted range.\n\n# MOVE\nThis method allows to move the e.DO robot. The setting automatically waits for the movement to be over before giving the next command (can be deactivated with stepByStepOff). The pianification of the trajectory can be performed in different ways:\n- moveJoints(j1, j2, j3, j4, j5, j6) :\nCan move the joints to a joint_position indicated through the angles in degrees (j1, , j2, j3, j4, j5, j6) with a velocity percentage determined by the setSpeed() function\n- moveSingleJoint(num, value) :\nCan move a single joint, indicated in num, to a target position given by the value parameter\n- moveCartesian(x, y, z, a, e, r) :\nCan move the joints to a cartesian_position indicated through the pose in (x, y, z, a, e, r) with a velocity percentage determined by the setSpeed() function\n- moveCartesianX(x, y, z, a, e, r, j7) :\nCan move the joints to a cartesian_position indicated through the pose in (x, y, z, a, e, r) and the opening position in mm of the gripper  in (j7) with a velocity percentage determined by the setSpeed() function\n- moveCircular(x1, y1, z1, a1, e1, r1, x2, y2, z2, a2, e2, r2) :\nCan move the joints to a cartesian_position indicated through the pose in (x1, y1, z1, a1, e1, r1) passing through another cartesian_position indicated through the pose in (x2, y2, z2, a2, e2, r2) with a velocity percentage determined by the setSpeed() function, creating a circular path\n- moveCircularX(x1, y1, z1, a1, e1, r1,j71, x2, y2, z2, a2, e2, r2,j72) :\nCan move the joints to a cartesian_position indicated through the pose in (x1, y1, z1, a1, e1, r1) and the opening position in mm of the gripper in (j71) passing throug another cartesian_position indicated through the pose in (x2, y2, z2, a2, e2, r2) and the opening position in mm of the gripper  in (j72) with a velocity percentage determined by the setSpeed() function, creating a circular path\n- moveCancel() :\nCan cancel the buffer of the moves, helpful when some erros occur in generating a path trajectory which is not allowed. The cancel can be called by pressing the 'k' key, even in the blocking mode. Pressing 'k' stops the movement itself with a deceleration.\n- moveToHome() :\nCan move the joints to the Home position, sending a command zero to all the joints and the gripper, with a velocity percentage determined by the setSpeed() function\n- moveToWaitingPos() :\nCan move the joints to the Waiting position, sending a command (0,40,50,0,90,0) to the joints and 0 to the gripper, with a velocity percentage determined by the setSpeed() function\n- moveGripper(j7) :\nCan set the desired width of the gripper, in mm. The value of j7 should be a number between «0» and «80».\n- moveGripperCart(j7) :\nCan set the desired width of the gripper, in mm, by maintaining the position of the tool frame (the z axis does not change in value). The value of j7 should be a number between «0» and «80».\n- moveCooperative(x, y, z, a, e, r, xf, yf, zf, af, ef, rf) :\nUsed in cooperative tasks. The first set of coordinates represents the robot cartesian frame. The second set of coordinates is the tool frame, common to all the arms involved in the manipulation. The parameters passed are the target position and orientation.\n - moveCooperativeX(x, y, z, a, e, r, j7, xf, yf, zf, af, ef, rf) :\nUsed in cooperative tasks. The first set of coordinates represents the robot cartesian frame, j7 is the gripper width [mm]. The second set of coordinates is the tool frame, common to all the arms involved in the manipulation. The parameters passed are the target position and orientation.\n\n# JOG\n- jogJoint(j1, j2, j3, j4, j5, j6, j7) :\nCan move the joints, once per time for a delta expressed in degrees in the (j1, j2, j3, j4, j5, j6, j7) with a velocity percentage determined by the setSpeed() function\n- jogCartesian(x, y, z, a, e, r) :\nCan move the joints in a cartesian_position, once coordinate per time for a delta through the pose in (x1, y, z, a, e, r) with a velocity percentage determined by the setSpeed() function\n- jogStop() :\nCan stop the joint movement.\n\n# LISTEN\n- listenValues() :\nCalls listenCartesianPosition and listenJointState, hence starts the subscription to both cartesian and state variables. Calls all the functions described below.\n\t- listenJointState() :\n\tAllows to start the subscribing on the topic related to these informations:\n\t[Position \n\tVelocity\n\tCurrent]\n\t- listenCartesianPosition() :\n\tAllows to start the subscribing on the topic related to the cartesian position (x,y,z,a,e,r)\n- listenMovementAck() :\nAllows to start the subscribing on the topic related to the movement aknowledge, which sends a feedback on the movement.\n- waitAcknowledgment() :\nWaits for the end-of-movement acknowledge, if the setting is on stepByStep (default).\n\n# UNLISTEN\n- unlistenValues() :\nCalls listenCartesianPosition and listenJointState, hence starts the subscription to both cartesian and state variables. Calls all the functions described below.\n\t- unlistenJointState() :\n\tAllows to stop the subscribing on the topic related to these informations:\n\t[Position \n\tVelocity\n\tCurrent]\n\t- unlistenCartesianPosition() :\n\tAllows to stop the subscribing on the topic related to the cartesian position (x,y,z,a,e,r)\n- unlistenMovementAck() :\nAllows to stop the subscribing on the topic related to the movement aknowledge, which sends a feedback on the movement.\n\n# GET\n- getJointState() :\nAllows to access the Joint State dictionary variables as lists of numbers:\n                [Position \n                 Velocity\n                 Current\n                 cartesianPosition]\n- getJoints() :\nAllows to get the joint position, in degrees.\n- getCartesian() :\nAllows to get the cartesian position X Y Z in mm.\n- getCartesianFull() :\nAllows to get the cartesian position X Y Z in mm and A E R in degrees.\n- getGripper() :\nAllows to get the gripper opening value in mm.\n- gripperWidth(toInteger) :\nReturns the current width of the gripper. The toInteger parameter is optional and it is set to True by default. If set to False the function returns a float with 14 decimal values.\n\n# FILL\nThis methods are the callback functions to the ROS Topic subscription. They are not intended for user purposes.\n- fillJointStateValues(message) :\nReceives the joints informations in terms of Position, Velocity and Current.\n- fillCartesianPosition(message) :\nReceives the cartesian position of the robot.\n- fillMovementAck(message) :\nReceives the movement acknowledgment, indicating when the movement is over.\n\n# CONNECT\n- disconnect() :\nDisconnect the e.Do from the websocket, dropping the ROS connection. This is reversable: it is possible to connect again.\n- connect() :\nConnects the e.Do to the websocket. Should be used when we want to riconnect after the disconnect() function was called. The topics and the service connections are restablished.\n- safeShutdown() :\nAllows a safe shutdown for the robot. Disconnects from ROS and stops the main event loop. This is not reversable. It should be called before manually shutting down the e.Do.\n\n# How to calibrate the robot\n\nThis example allows you to initialize, disengage the brakes and calibrate the axes, if already in the \"Home\" position, through a Python program.\n\nIf you have not the e.DO robot in Home Position don't use this program, connect e.DO with the e.DO App and use the standard calibration, when the robot will be calibrated disconnect the e.DO App with the proper button and connect python without init, disengage and calibrate functions, because this part has been already done.\n\nTurn on the e.DO robot, the init_7Axes() command line should only be used once after power on, disengage_std() is useful for disengaging the brakes every time the brakes are applied, the last command line calib_axes() is very important for correct operation and must be sent when the notches of the joints are aligned (“Home position\").\n\n```python\ndef StartUp(myedo):\n    myedo.init7Axes()\n    time.sleep(10)\n    myedo.disengageStd()\n    time.sleep(15)\n    myedo.calibAxes() # Mandatory in HOME POSITION\n```\n\n\n# The eduedo class\n\nIt is a class developed to facilitate the initialization and the use of the e.DO robot. It is initialized as follows:\n\n```\nmyedo = eduedo(myedo)\n```\n\nand it contains the following methods.\n\n- rodeo() :\nIt is a demo of e.DO moving.\n- gripperOpen() :\nCan open gripper with maximum width (80mm).\n- gripperClose() :\nCan close the gripper all the way (0mm).\n- setGripperOpen(j7) :\nCan open the gripper to a defined width, passed as parameter in j7. The width is expressed in millimiters, and the accepted range goes from «0» to «80».\n- getMyedoState() :\nCan print the joint state variables in degrees, the cartesian coordinates, and the gripper width in millimiters.\n- disconnectMyedo() :\nDisconnect the e.Do from the websocket, dropping the ROS connection. This is reversable: it is possible to connect again.\n- connectreconnectMyedo() :\nConnects the e.Do to the websocket. Should be used when we want to riconnect after the disconnect() function was called. The topics and the service connections are restablished.\n- safeShutdownMyedo() :\nAllows a safe shutdown for the robot. Disconnects from ROS and stops the main event loop. This is not reversable. It should be called before manually shutting down the e.Do.\n- unblockMyedo() :\nWhen the e.Do is not responding to commands, this function unblocks the robot, brings the e.Do to the waiting position, and opens the gripper.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/comau/pyedo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyedo",
    "package_url": "https://pypi.org/project/pyedo/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyedo/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Comau/pyedo/issues",
      "Homepage": "https://github.com/comau/pyedo"
    },
    "release_url": "https://pypi.org/project/pyedo/0.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This package contains the SDK to program e.DO robot with Python",
    "version": "0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14540727,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56cd659868d6fd5d10fc3e73e43ae7972ed97d0709293a8145800802a4134a4e",
          "md5": "929edc0e860079fe65f03cacd1daf4e7",
          "sha256": "7c5c77b784c51feaacaa96b67c33f714dfb98e59da95897f5f43e7dbf107c883"
        },
        "downloads": -1,
        "filename": "pyedo-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "929edc0e860079fe65f03cacd1daf4e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5941,
        "upload_time": "2020-01-31T08:43:46",
        "upload_time_iso_8601": "2020-01-31T08:43:46.214174Z",
        "url": "https://files.pythonhosted.org/packages/56/cd/659868d6fd5d10fc3e73e43ae7972ed97d0709293a8145800802a4134a4e/pyedo-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83e2db942c961ebf388dbb25d70aadf47520a1e24be24a3db8b245dfe8c356b8",
          "md5": "a616fe7fa16e55ee17dedb31587e8d40",
          "sha256": "33545e5d6c08e3b21cf8476b47d0de9233c893604060b465b637d19d1e69e069"
        },
        "downloads": -1,
        "filename": "pyedo-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a616fe7fa16e55ee17dedb31587e8d40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2464,
        "upload_time": "2020-02-03T17:02:55",
        "upload_time_iso_8601": "2020-02-03T17:02:55.883590Z",
        "url": "https://files.pythonhosted.org/packages/83/e2/db942c961ebf388dbb25d70aadf47520a1e24be24a3db8b245dfe8c356b8/pyedo-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b44d2fc56cfdce8b6bdffb571ee6ee8f81a42fffe2a3c89ef384e0160d1853e",
          "md5": "0c6c352d7817fac07ea43206cae884ba",
          "sha256": "ee470e196402a116ee31940e36a33b4944b10d875d06cdcd7752b6fbaf9df9b5"
        },
        "downloads": -1,
        "filename": "pyedo-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0c6c352d7817fac07ea43206cae884ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6382,
        "upload_time": "2020-02-03T17:02:57",
        "upload_time_iso_8601": "2020-02-03T17:02:57.499613Z",
        "url": "https://files.pythonhosted.org/packages/5b/44/d2fc56cfdce8b6bdffb571ee6ee8f81a42fffe2a3c89ef384e0160d1853e/pyedo-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "620b764d63bc93cf8d4d8ed79dc69bb5134d91ee2ebc895b95bb7fddc03882b4",
          "md5": "a78aa5cef38b2b70af489e20e0b1e32b",
          "sha256": "7969c51fbfd309c8fef6e19cf312cb0cdd51681c66c977ead0b1cb8c4d59b979"
        },
        "downloads": -1,
        "filename": "pyedo-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a78aa5cef38b2b70af489e20e0b1e32b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10650,
        "upload_time": "2020-02-03T17:33:06",
        "upload_time_iso_8601": "2020-02-03T17:33:06.538486Z",
        "url": "https://files.pythonhosted.org/packages/62/0b/764d63bc93cf8d4d8ed79dc69bb5134d91ee2ebc895b95bb7fddc03882b4/pyedo-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc08924531aaa801205def21428ab0c1eed95c0341cd232766e54885904cf1fb",
          "md5": "165a1085cce9c69f284ea012b4429003",
          "sha256": "b0b700dcd8762ff786a84ccbe086efc01467da04fa25e9983f349b7ff0d973c8"
        },
        "downloads": -1,
        "filename": "pyedo-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "165a1085cce9c69f284ea012b4429003",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8241,
        "upload_time": "2020-02-03T17:33:07",
        "upload_time_iso_8601": "2020-02-03T17:33:07.496966Z",
        "url": "https://files.pythonhosted.org/packages/cc/08/924531aaa801205def21428ab0c1eed95c0341cd232766e54885904cf1fb/pyedo-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99a367b52190b12d3974bbe0d6ea35b9a0f187e03505a65dc546a682f3eeb910",
          "md5": "d052c654bb54b7698cdc88c3ab86ed7e",
          "sha256": "521bfc0997c2509c9a8b94563ab2c795efaebb596613130e3ec3fc66d703f46b"
        },
        "downloads": -1,
        "filename": "pyedo-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d052c654bb54b7698cdc88c3ab86ed7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23849,
        "upload_time": "2021-09-17T16:04:46",
        "upload_time_iso_8601": "2021-09-17T16:04:46.798780Z",
        "url": "https://files.pythonhosted.org/packages/99/a3/67b52190b12d3974bbe0d6ea35b9a0f187e03505a65dc546a682f3eeb910/pyedo-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1eb1ea6756f47249607dfb6afd0aa0f37eddeb5c6f23c2e3f1eb1d8ce3f0676c",
          "md5": "732a41b8ddd7d59f97e16db4159357e3",
          "sha256": "43dab41eae6c7e3885904776ae9f83e8325032efca8665bccddc578ca73d11ce"
        },
        "downloads": -1,
        "filename": "pyedo-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "732a41b8ddd7d59f97e16db4159357e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24114,
        "upload_time": "2021-09-17T16:04:49",
        "upload_time_iso_8601": "2021-09-17T16:04:49.007549Z",
        "url": "https://files.pythonhosted.org/packages/1e/b1/ea6756f47249607dfb6afd0aa0f37eddeb5c6f23c2e3f1eb1d8ce3f0676c/pyedo-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "374fa9a1f2e73f4bd24e71dd226ad8668aac3ee06a0bc6720ecb83f9b16b55ed",
          "md5": "77ddfb8da500dbe27f82cb7d35e1b364",
          "sha256": "fd5db5a57e1128aa9a880ca88c3a8458ea1bf6253f639eaeb4777c79275d94cc"
        },
        "downloads": -1,
        "filename": "pyedo-0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77ddfb8da500dbe27f82cb7d35e1b364",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29446,
        "upload_time": "2021-11-09T11:08:51",
        "upload_time_iso_8601": "2021-11-09T11:08:51.915534Z",
        "url": "https://files.pythonhosted.org/packages/37/4f/a9a1f2e73f4bd24e71dd226ad8668aac3ee06a0bc6720ecb83f9b16b55ed/pyedo-0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e248550084db62351049f3e31193287e815b37799ee1bc4f709f1b3658c331fa",
          "md5": "81db3718139162ff66c8d7501c64a605",
          "sha256": "b9843207e0cd2d37fd9fb1f6b0ead4c637164a64b75916bc5c6c300a1300ca92"
        },
        "downloads": -1,
        "filename": "pyedo-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "81db3718139162ff66c8d7501c64a605",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35932,
        "upload_time": "2021-11-09T11:08:53",
        "upload_time_iso_8601": "2021-11-09T11:08:53.467947Z",
        "url": "https://files.pythonhosted.org/packages/e2/48/550084db62351049f3e31193287e815b37799ee1bc4f709f1b3658c331fa/pyedo-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "364119294599d8aaa7763b648467a99361d62e8932c54d814779694101d9bc14",
          "md5": "970e3025be4057d09a7ef3f89ef93599",
          "sha256": "0ee3cd8f341540939ed2ed8efa59fce09bd50a278a6f641430c75e0de275daba"
        },
        "downloads": -1,
        "filename": "pyedo-0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "970e3025be4057d09a7ef3f89ef93599",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29655,
        "upload_time": "2022-07-25T12:45:11",
        "upload_time_iso_8601": "2022-07-25T12:45:11.548618Z",
        "url": "https://files.pythonhosted.org/packages/36/41/19294599d8aaa7763b648467a99361d62e8932c54d814779694101d9bc14/pyedo-0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60989fd984017c4ee56c3ac1f7b5349efcc2bdb184151fb15813ff378003935c",
          "md5": "b1fe64017447b23c239ff33578638ab9",
          "sha256": "3f284545a8d8c5214ede6cf40c7e0fe77b4c474762800b9375a40b376f16fe89"
        },
        "downloads": -1,
        "filename": "pyedo-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b1fe64017447b23c239ff33578638ab9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36471,
        "upload_time": "2022-07-25T12:45:13",
        "upload_time_iso_8601": "2022-07-25T12:45:13.389716Z",
        "url": "https://files.pythonhosted.org/packages/60/98/9fd984017c4ee56c3ac1f7b5349efcc2bdb184151fb15813ff378003935c/pyedo-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "364119294599d8aaa7763b648467a99361d62e8932c54d814779694101d9bc14",
        "md5": "970e3025be4057d09a7ef3f89ef93599",
        "sha256": "0ee3cd8f341540939ed2ed8efa59fce09bd50a278a6f641430c75e0de275daba"
      },
      "downloads": -1,
      "filename": "pyedo-0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "970e3025be4057d09a7ef3f89ef93599",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 29655,
      "upload_time": "2022-07-25T12:45:11",
      "upload_time_iso_8601": "2022-07-25T12:45:11.548618Z",
      "url": "https://files.pythonhosted.org/packages/36/41/19294599d8aaa7763b648467a99361d62e8932c54d814779694101d9bc14/pyedo-0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60989fd984017c4ee56c3ac1f7b5349efcc2bdb184151fb15813ff378003935c",
        "md5": "b1fe64017447b23c239ff33578638ab9",
        "sha256": "3f284545a8d8c5214ede6cf40c7e0fe77b4c474762800b9375a40b376f16fe89"
      },
      "downloads": -1,
      "filename": "pyedo-0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "b1fe64017447b23c239ff33578638ab9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36471,
      "upload_time": "2022-07-25T12:45:13",
      "upload_time_iso_8601": "2022-07-25T12:45:13.389716Z",
      "url": "https://files.pythonhosted.org/packages/60/98/9fd984017c4ee56c3ac1f7b5349efcc2bdb184151fb15813ff378003935c/pyedo-0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}