{
  "info": {
    "author": "Shivansh Saini",
    "author_email": "shivanshs9@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Markup",
      "Topic :: Text Processing :: Markup :: HTML",
      "Topic :: Text Processing :: Markup :: XML",
      "Topic :: Utilities"
    ],
    "description": "Async Python-PDFKit: HTML to PDF wrapper\n==================================\n\n[![Build Status](https://travis-ci.org/shivanshs9/python-pdfkit-async.svg?branch=master)](https://travis-ci.org/shivanshs9/python-pdfkit-async) [![PyPI version](https://badge.fury.io/py/pdfkit-async.svg)](https://badge.fury.io/py/pdfkit-async) [![PyPI pyversions](https://img.shields.io/pypi/pyversions/pdfkit-async.svg)](https://pypi.python.org/pypi/pdfkit-async/)\n\n\nPython 3.5+ async wrapper for wkhtmltopdf utility to convert HTML to PDF\nusing Webkit.\n\n**NOTE:** All the public API functions are adapted to async coroutines, so use them with await!\n\n* * * * *\n\nThis is adapted version of [ruby\nPDFKit](https://github.com/pdfkit/pdfkit) library, so big thanks to\nthem!\n\nInstallation\n============\n\n1.  Install python-pdfkit:\n```bash\n$ pip install pdfkit-async\n```\n\n2.  Install wkhtmltopdf:\n    -   Windows and other options: check wkhtmltopdf\n    [homepage](http://wkhtmltopdf.org/) for binary installers\n\n    -   Debian/Ubuntu:\n    ```bash\n    $ sudo apt-get install wkhtmltopdf\n    ```\n\n    -   macOS:\n    ```bash\n    $ brew install caskroom/cask/wkhtmltopdf\n    ```\n\n**Warning!** Version in debian/ubuntu repos have reduced functionality\n(because it compiled without the wkhtmltopdf QT patches), such as adding\noutlines, headers, footers, TOC etc. To use this options you should\ninstall static binary from [wkhtmltopdf](http://wkhtmltopdf.org/) site\nor you can use [this\nscript](https://github.com/JazzCore/python-pdfkit/blob/master/travis/before-script.sh).\n\nUsage\n=====\n\nFor simple tasks:\n\n```python\nimport pdfkit\n\nasync def f():\n    await pdfkit.from_url('http://google.com', 'out.pdf')\n    await pdfkit.from_file('test.html', 'out.pdf')\n    await pdfkit.from_string('Hello!', 'out.pdf')\n```\n\nYou can pass a list with multiple URLs or files:\n\n```python\nawait pdfkit.from_url(['google.com', 'yandex.ru', 'engadget.com'], 'out.pdf')\nawait pdfkit.from_file(['file1.html', 'file2.html'], 'out.pdf')\n```\n\nAlso you can pass an opened file:\n\n```python\nwith open('file.html') as f:\n    await pdfkit.from_file(f, 'out.pdf')\n```\n\nIf you wish to further process generated PDF, you can read it to a\nvariable:\n\n```python\n# Use False instead of output path to save pdf to a variable\npdf = await pdfkit.from_url('http://google.com', False)\n```\n\nYou can specify all wkhtmltopdf\n[options](http://wkhtmltopdf.org/usage/wkhtmltopdf.txt). You can drop\n'--' in option name. If option without value, use *None, False* or *''*\nfor dict value:. For repeatable options (incl. allow, cookie,\ncustom-header, post, postfile, run-script, replace) you may use a list\nor a tuple. With option that need multiple values (e.g. --custom-header\nAuthorization secret) we may use a 2-tuple (see example below).\n\n```python\noptions = {\n    'page-size': 'Letter',\n    'margin-top': '0.75in',\n    'margin-right': '0.75in',\n    'margin-bottom': '0.75in',\n    'margin-left': '0.75in',\n    'encoding': \"UTF-8\",\n    'custom-header' : [\n        ('Accept-Encoding', 'gzip')\n    ]\n    'cookie': [\n        ('cookie-name1', 'cookie-value1'),\n        ('cookie-name2', 'cookie-value2'),\n    ],\n    'no-outline': None\n}\n\nawait pdfkit.from_url('http://google.com', 'out.pdf', options=options)\n```\n\nBy default, PDFKit will show all `wkhtmltopdf` output. If you don't want\nit, you need to pass `quiet` option:\n\n```python\noptions = {\n    'quiet': ''\n    }\n\nawait pdfkit.from_url('google.com', 'out.pdf', options=options)\n```\n\nDue to wkhtmltopdf command syntax, **TOC** and **Cover** options must be\nspecified separately. If you need cover before TOC, use `cover_first`\noption:\n\n```python\ntoc = {\n    'xsl-style-sheet': 'toc.xsl'\n}\n\ncover = 'cover.html'\n\nawait pdfkit.from_file('file.html', options=options, toc=toc, cover=cover)\nawait pdfkit.from_file('file.html', options=options, toc=toc, cover=cover, cover_first=True)\n```\n\nYou can specify external CSS files when converting files or strings\nusing *css* option.\n\n**Warning** This is a workaround for [this\nbug](http://code.google.com/p/wkhtmltopdf/issues/detail?id=144) in\nwkhtmltopdf. You should try *--user-style-sheet* option first.\n\n```python\n# Single CSS file\ncss = 'example.css'\nawait pdfkit.from_file('file.html', options=options, css=css)\n\n# Multiple CSS files\ncss = ['example.css', 'example2.css']\nawait pdfkit.from_file('file.html', options=options, css=css)\n```\n\nYou can also pass any options through meta tags in your HTML:\n\n```python\nbody = \"\"\"\n    <html>\n      <head>\n        <meta name=\"pdfkit-page-size\" content=\"Legal\"/>\n        <meta name=\"pdfkit-orientation\" content=\"Landscape\"/>\n      </head>\n      Hello World!\n      </html>\n    \"\"\"\n\nawait pdfkit.from_string(body, 'out.pdf') #with --page-size=Legal and --orientation=Landscape\n```\n\nConfiguration\n=============\n\nEach API call takes an optional configuration paramater. This should be\nan instance of `pdfkit.configuration()` API call. It takes the\nconfiguration options as initial paramaters. The available options are:\n\n-   `wkhtmltopdf` - the location of the `wkhtmltopdf` binary. By default\n    `pdfkit` will attempt to locate this using `which` (on UNIX type\n    systems) or `where` (on Windows).\n-   `meta_tag_prefix` - the prefix for `pdfkit` specific meta tags - by\n    default this is `pdfkit-`\n\nExample - for when `wkhtmltopdf` is not on `$PATH`:\n\n```python\nconfig = pdfkit.configuration(wkhtmltopdf='/opt/bin/wkhtmltopdf')\n\nawait pdfkit.from_string(html_string, output_file, configuration=config)\n```\n\nTroubleshooting\n===============\n\n-   `IOError: 'No wkhtmltopdf executable found'`:\n\n    Make sure that you have wkhtmltopdf in your \\$PATH or set via custom\n    configuration (see preceding section). *where wkhtmltopdf* in\n    Windows or *which wkhtmltopdf* on Linux should return actual path to\n    binary.\n\n-   `IOError: 'Command Failed'`\n\n    This error means that PDFKit was unable to process an input. You can\n    try to directly run a command from error message and see what error\n    caused failure (on some wkhtmltopdf versions this can be cause by\n    segmentation faults)\n\n\nChangelog\n=========\n- 0.7.2\n    - Fixed Project description for latest rules\n    - Fixed Travis build\n    - Updated README\n- 0.7.0\n    - Dropped support of Python2.7 till Python3.4\n    - Supports Python3.5+\n    - AsyncIO support\n    - Project took over by [shivanshs9](https://github.com/shivanshs9)\n\n- 0.6.1\n    - Fix regression on python 3+ when trying to decode pdf output\n\n- 0.6.0\n    -   Support repeatable options\n    -   Support multiple values for some options\n    -   Fix some corner cases when specific argument order is\n        required\n    -   Some Python 3+ compatibility fixes\n    -   Update README\n\n- 0.5.0\n    -   Allow passing multiple css files\n    -   Fix problems with external file encodings\n    -   Rise an error when X server is missing on \\*nix systems\n    -   Fix tests that was broken with latest wkhtmltopdf release\n    -   Update README\n\n- 0.4.1\n    -   More easier custom configuration setting\n    -   Update README\n\n- 0.4.0\n    -   Allow passing file-like objects\n    -   Ability to return PDF as a string\n    -   Allow user specification of configuration\n    -   API calls now returns True on success\n    -   bugfixes\n\n-   0.3.0\n    -   Python 3 support\n\n-   0.2.4\n    -   Add History\n    -   Update setup.py\n\n-   0.2.3\n    -   Fix installing with setup.py\n    -   Update README",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/shivanshs9/python-pdfkit-async",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pdfkit-async",
    "package_url": "https://pypi.org/project/pdfkit-async/",
    "platform": "",
    "project_url": "https://pypi.org/project/pdfkit-async/",
    "project_urls": {
      "Download": "https://github.com/shivanshs9/python-pdfkit-async"
    },
    "release_url": "https://pypi.org/project/pdfkit-async/0.7.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Wkhtmltopdf python wrapper to convert html to pdf using the webkit rendering engine and qt",
    "version": "0.7.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7205626,
  "releases": {
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e3376f00355ae65515f6e0f9d2467084873733df2e2d4df4c82d4b3373b707b",
          "md5": "bec1c2f1f200969082df285af9dc59c6",
          "sha256": "67ec61164b336e97b118e910ecb97590e8129160dc895fb3020e93dc27e7899f"
        },
        "downloads": -1,
        "filename": "pdfkit-async-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bec1c2f1f200969082df285af9dc59c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12723,
        "upload_time": "2020-05-09T18:09:05",
        "upload_time_iso_8601": "2020-05-09T18:09:05.375330Z",
        "url": "https://files.pythonhosted.org/packages/9e/33/76f00355ae65515f6e0f9d2467084873733df2e2d4df4c82d4b3373b707b/pdfkit-async-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c231a27a83ab997d8ec303d953520506116c913d42109618c424cfa50bd72dba",
          "md5": "71f9884f6544a7a2516293d9e73a76d9",
          "sha256": "ef623ccd1ecfeb1f4bd16a556a6bbb6218102cb41053c80bad37cb51474336a4"
        },
        "downloads": -1,
        "filename": "pdfkit-async-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "71f9884f6544a7a2516293d9e73a76d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12910,
        "upload_time": "2020-05-09T21:02:10",
        "upload_time_iso_8601": "2020-05-09T21:02:10.801764Z",
        "url": "https://files.pythonhosted.org/packages/c2/31/a27a83ab997d8ec303d953520506116c913d42109618c424cfa50bd72dba/pdfkit-async-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c231a27a83ab997d8ec303d953520506116c913d42109618c424cfa50bd72dba",
        "md5": "71f9884f6544a7a2516293d9e73a76d9",
        "sha256": "ef623ccd1ecfeb1f4bd16a556a6bbb6218102cb41053c80bad37cb51474336a4"
      },
      "downloads": -1,
      "filename": "pdfkit-async-0.7.2.tar.gz",
      "has_sig": false,
      "md5_digest": "71f9884f6544a7a2516293d9e73a76d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12910,
      "upload_time": "2020-05-09T21:02:10",
      "upload_time_iso_8601": "2020-05-09T21:02:10.801764Z",
      "url": "https://files.pythonhosted.org/packages/c2/31/a27a83ab997d8ec303d953520506116c913d42109618c424cfa50bd72dba/pdfkit-async-0.7.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}