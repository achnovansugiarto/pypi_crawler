{
  "info": {
    "author": "Michael Graf",
    "author_email": "michael.graf@uni-tuebingen.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![Build](https://github.com/PHT-EU/station-backend/actions/workflows/Build.yml/badge.svg)](https://github.com/PHT-EU/station-backend/actions/workflows/Build.yml)\n[![Tests](https://github.com/PHT-EU/station-backend/actions/workflows/tests.yml/badge.svg)](https://github.com/PHT-EU/station-backend/actions/workflows/tests.yml)\n[![codecov](https://codecov.io/gh/PHT-Medic/station-backend/branch/master/graph/badge.svg?token=SWJRH1V44S)](https://codecov.io/gh/PHT-Medic/station-backend)\n\n# PHT Station Backend\n\nThis project contains the implementation of the station API, workers for training models, as well as the configuration\nfor the station airflow instance and related workers. A FastAPI REST API for train and station management can be found\nin the `station` directory\n\n## Environment configuration\n\n\n## Installation\n\n1. Create a named docker volume for the postgres database `docker volume create pg_pht_station`\n2. Edit the environment variables in the `environment` section of the docker-compose file to match your configuration\n3. Run the docker-compose file `docker-compose up -d`, which will start the station and associated services\n4. Check the logs for any errors while bringing up the project `docker-compose logs`\n\n\n## Development environment\n\n[Pipenv](https://pipenv.pypa.io/en/latest/) should be used as a dependency manager for developing in the project.\n\n1. Install dev dependencies\n   ```shell\n   pipenv install --dev\n   ```\n\n2. Spin up the backend services\n   ```shell\n   docker-compose -f docker-compose_dev.yml up -d\n   ```\n3. Edit the station configuration file `station/example.station_config.yml` to match your service configuration and\n   rename it to `station_config.yml` for it to be pucked up on station start up\n4. Make sure the environment is set to `development` in the `station/example.station_config.yml` file or via the\n   `ENVIRONMENT` environment variable.\n5. Run the tests\n   ```shell\n   pipenv shell\n   pipenv run pytest station\n   ```\n6. Run the server in the activated virtual environment (or via your IDE)\n   ```shell\n   pipenv shell\n   pipenv python station/run_station.py\n   ```\n7. Inspect the logs for any errors\n\n### Setup authentication server for testing\n\nAfter running\n\n```shell\ndocker-compose -f docker-compose_dev.yml up -d\n```\n\nshell into the station-auth container:\n\n```shell\ndocker exec -it station-auth sh\n```\n\nand run the following commands to initialize the authentication server\n\n```shell\nnpm run setup --workspace=packages/server\n```\n\nthe output should be similar, with different keys:\n\n```\nâœ” Generated rsa key-pair.\nâœ” Created database.\nâœ” Synchronized database schema.\nâœ” Seeded database.\nâ„¹ Robot ID: 51dc4d96-f122-47a8-92f4-f0643dae9be5\nâ„¹ Robot Secret: d1l33354crj1kyo58dbpflned2ocnw2yez69\n```\n\ncopy and save the generated robot id and secret. Then run\n\n```shell\nnpm run start\n```\n\nto reset the database and seed it with the default users. Exit the container with `exit`\nand restart the authentication container.\n\n```shell\ndocker-compose -f docker-compose_dev.yml restart auth\n```\n\n## Third party services\n\n### Airflow\n\nThe `airflow` directory contains the configuration file for the station airflow instance as well as the predefined\nairflow DAGs responsible for executing trains and other longer running or repeating functionality.\n\n### Minio\n\n### Postgres DB\n\n### Running the third party services\n\n1. If it does not yet exist create volumes for the database `docker volume create pg_pht_station` and the\n   [Blaze](https://github.com/samply/blaze) FHIR server `docker volume create blaze_data`\n2. Run the development docker-compose file `docker-compose -f docker-compose_dev.yml up -d`, which will spin up the\n   third party services such as the postgres db, airflow and minio, allowing for development of the station API inside\n   of an IDE. The services require the following ports to be available on the machine:\n    - Postgres: 5432\n    - Airflow: 8080\n    - Minio: 9000\n    - Blaze FHIR Server: 8001\n\n### Updating the database\n\nAfter creating a new or changing and existing database model and registering it in the metadata of the base class,\nperform the database migrations using alembic.\n\n1. Create a new revision: `alembic revision --autogenerate -m \"name for your migration\"`\n2. Update the database `alembic upgrade head`\n\n## PHT worker\n\nThe PHT worker package contains implementations high cost operations such as loading or preparing data sets and training\nmodels or running trains. It should expose a simple API to be used in Airflow DAGs and can also interact with the\nstation DB.\n\n\n   \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pht-station",
    "package_url": "https://pypi.org/project/pht-station/",
    "platform": null,
    "project_url": "https://pypi.org/project/pht-station/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pht-station/0.1/",
    "requires_dist": [
      "fastapi[all]",
      "pycryptodome",
      "cryptography",
      "uvicorn",
      "python-dotenv",
      "docker",
      "fhir-kindling",
      "pandas",
      "SQLAlchemy",
      "psycopg2-binary",
      "jinja2",
      "pyyaml",
      "click",
      "rich",
      "minio",
      "pht-train-container-library",
      "loguru"
    ],
    "requires_python": ">=3.7",
    "summary": "Package containing the python code for the PHT station. This includes packages containing the API, CLIas well as as other utilities for interacting with the PHT station infrastructure.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13686563,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f67cc74aceab636d2bdc82747a7a0c5792f4ae91fa95e85d2856b238e7dcc196",
          "md5": "19820a558e6bd3ddedb7deb0261419dd",
          "sha256": "a154591aba3a6e8eab1046b885abedd82c5346703f01e05649f67e732b4e7a77"
        },
        "downloads": -1,
        "filename": "pht_station-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19820a558e6bd3ddedb7deb0261419dd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 103960,
        "upload_time": "2022-05-02T10:12:13",
        "upload_time_iso_8601": "2022-05-02T10:12:13.349250Z",
        "url": "https://files.pythonhosted.org/packages/f6/7c/c74aceab636d2bdc82747a7a0c5792f4ae91fa95e85d2856b238e7dcc196/pht_station-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e797039d641fd8e816acfedbf72cd1abf375c89d7dc51ee7f469f854583e0da6",
          "md5": "da892a281b48cf1b95f235bd82f42cfc",
          "sha256": "6d7c37b1ab60f7044d77ad5d22671553733be955262c5e878493ef17f3faf0e5"
        },
        "downloads": -1,
        "filename": "pht-station-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "da892a281b48cf1b95f235bd82f42cfc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 70880,
        "upload_time": "2022-05-02T10:12:14",
        "upload_time_iso_8601": "2022-05-02T10:12:14.825102Z",
        "url": "https://files.pythonhosted.org/packages/e7/97/039d641fd8e816acfedbf72cd1abf375c89d7dc51ee7f469f854583e0da6/pht-station-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f67cc74aceab636d2bdc82747a7a0c5792f4ae91fa95e85d2856b238e7dcc196",
        "md5": "19820a558e6bd3ddedb7deb0261419dd",
        "sha256": "a154591aba3a6e8eab1046b885abedd82c5346703f01e05649f67e732b4e7a77"
      },
      "downloads": -1,
      "filename": "pht_station-0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "19820a558e6bd3ddedb7deb0261419dd",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 103960,
      "upload_time": "2022-05-02T10:12:13",
      "upload_time_iso_8601": "2022-05-02T10:12:13.349250Z",
      "url": "https://files.pythonhosted.org/packages/f6/7c/c74aceab636d2bdc82747a7a0c5792f4ae91fa95e85d2856b238e7dcc196/pht_station-0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e797039d641fd8e816acfedbf72cd1abf375c89d7dc51ee7f469f854583e0da6",
        "md5": "da892a281b48cf1b95f235bd82f42cfc",
        "sha256": "6d7c37b1ab60f7044d77ad5d22671553733be955262c5e878493ef17f3faf0e5"
      },
      "downloads": -1,
      "filename": "pht-station-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "da892a281b48cf1b95f235bd82f42cfc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 70880,
      "upload_time": "2022-05-02T10:12:14",
      "upload_time_iso_8601": "2022-05-02T10:12:14.825102Z",
      "url": "https://files.pythonhosted.org/packages/e7/97/039d641fd8e816acfedbf72cd1abf375c89d7dc51ee7f469f854583e0da6/pht-station-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}