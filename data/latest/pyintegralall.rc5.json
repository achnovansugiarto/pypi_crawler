{
  "info": {
    "author": "Jean Gomes",
    "author_email": "antineutrinomuon@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Fortran",
      "Programming Language :: Python :: 3"
    ],
    "description": "### IntegralALL\n####  A Fortran legacy package to easy integrate numerically\nemail: antineutrinomuon@gmail.com, jean@astro.up.pt\n\n© Copyright ®\n\nJ.G. - Jean Gomes\n\n<hr>\n\n![My Skills](https://skillicons.dev/icons?i=python,fortran,c,numpy&theme=light)<br>\n[![python3](https://img.shields.io/pypi/pyversions/pyintegralall)](https://img.shields.io/pypi/pyversions/pyintegralall)\n[![badgetlicense](https://anaconda.org/neutrinomuon/pyintegralall/badges/license.svg)](https://anaconda.org/neutrinomuon/pyintegralall/badges/license.svg)\n\n<hr>\n\n<div align=\"center\">\n<img src='https://github.com/neutrinomuon/IntegralALL/blob/main/tutorials/Definite_Integral.png?raw=true' width=\"50%\">\n</div>\n\n<hr>\n\n#### <b>RESUME</b>\n\nIntegrate arrays, functions numerically using different\nmethods. Original Fortran 2003+ routines date back to 2003-2004. Read the\n<a href='https://github.com/neutrinomuon/IntegralALL/blob/main/LICENSE.txt'>LICENSE.txt</a> file. Definite integrals are mathematical calculations that allow\nus to find the area under a curve between two defined points on the x-axis. In\nother words, they give us the total accumulated value of a function over an\ninterval. Definite integrals are used in various fields, such as physics,\nengineering, and finance, to solve real-world problems, such as calculating\nthe total distance travelled by a moving object or the total profit of a\ncompany over a certain period.\n\nThere are various techniques for computing definite integrals, including\nanalytical methods (e.g., antiderivatives) and numerical methods (e.g., using\nquadrature or Monte Carlo). The choice of method depends on the type of\nfunction being integrated, the desired accuracy, and the computational\nresources available. Some commonly used numerical integration techniques\ninclude the trapezoidal rule, Simpson's rule, and Gaussian quadrature.\n\nIn computer programming, definite integrals can be calculated using\nspecialized libraries and routines that provide numerical integration\nalgorithms. These routines typically take as input the function to be\nintegrated, the interval over which to integrate, and the desired level of\naccuracy. The output of the routine is an approximation of the definite\nintegral.\n\n<hr>\n\n#### <b>INSTALLATION</b>\n\nYou can easily install <a href=https://pypi.org/project/pyintegralall/>pyintegralall</a> by using pip - <a href='https://pypi.org/'>PyPI - The Python Package Index</a>:\n<pre>\n<code>\npip install pyintegralall\n</code>\n</pre>\nor by using a generated conda repository <a href='https://anaconda.org/neutrinomuon/pyintegralall'>https://anaconda.org/neutrinomuon/pyintegralall</a>:\n\n[![badgetanaconda](https://anaconda.org/neutrinomuon/pyintegralall/badges/version.svg)](https://anaconda.org/neutrinomuon/pyintegralall/badges/version.svg)\n[![badgetreleasedate](https://anaconda.org/neutrinomuon/pyintegralall/badges/latest_release_date.svg)](https://anaconda.org/neutrinomuon/pyintegralall/badges/latest_release_date.svg)\n[![badgetplatforms](https://anaconda.org/neutrinomuon/pyintegralall/badges/platforms.svg\n)](https://anaconda.org/neutrinomuon/pyintegralall/badges/platforms.svg)\n<pre>\n<code>\nconda install -c neutrinomuon pyintegralall\n</code>\n</pre>\nOBS.: Linux, OS-X ad Windows pre-compilations available in conda.\n\nYou can also clone the repository and install by yourself in your machine:\n<pre>\n<code>\ngit clone https://github.com/neutrinomuon/IntegralALL\npython setup.py install\n</code>\n</pre>\n\n<hr>\n\n#### <b>METHODS</b>\n\nThe methods are given by Int_Type and may be summarized bellow:\n\n<table>\n<tr><td>Int_Type</td><td>Type</td><td>Description</td></tr>\n<tr><td>0<td>R</td><td>Right rectangle Integral  </td></tr>\n<tr><td>1<td>L</td><td>Left rectangle Integral   </td></tr>\n<tr><td>2<td>T</td><td>Trapezoidal rule          </td></tr>\n<tr><td>3<td>S</td><td>Simple Integral           </td></tr>\n<tr><td>4<td>M</td><td>Median rectangle Integral </td></tr>\n<tr><td>5<td>I</td><td>Simpsonregel's rule       </td></tr>\n<tr><td>6<td>G</td><td>Gauss-Legendre Quadrature </td></tr>\n</table>\n\n<hr>\n\n#### <b>REFERENCES</b>\n\n<ol><il> William H. Press, Saul A. Teukolsky, William T. Vetterling, and Brian\nP. Flannery. Numerical Recipes: The Art of Scientific Computing. William ISBN:\n978-0521880688. Link: <a\nhref='https://www.nr.com/'>https://www.nr.com/</a></il> </ol>\n\n<hr>\n\n#### <b>STRUCTURE</b>\n\nThe main structure of the directories and files are:\n\n<pre>\n<code>\nIntegralALL\n├── pyintegralall\n│   ├── win-32\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── linux-armv7l\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── win-arm64\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── icons\n│   ├── linux-armv6l\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── noarch\n│   │   ├── .cache\n│   │   ├── repodata_from_packages.json\n│   │   ├── index.html\n│   │   ├── repodata.json\n│   │   ├── current_repodata.json.bz2\n│   │   ├── repodata.json.bz2\n│   │   ├── repodata_from_packages.json.bz2\n│   │   └── current_repodata.json\n│   ├── linux-s390x\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── linux-ppc64\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── linux-aarch64\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── index.html\n│   ├── linux-32\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── channeldata.json\n│   ├── linux-64\n│   │   ├── .cache\n│   │   ├── repodata_from_packages.json\n│   │   ├── index.html\n│   │   ├── repodata.json\n│   │   ├── current_repodata.json.bz2\n│   │   ├── repodata.json.bz2\n│   │   ├── repodata_from_packages.json.bz2\n│   │   ├── current_repodata.json\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── osx-64\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── meta.yaml\n│   ├── win-64\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   ├── README.txt\n│   ├── linux-ppc64le\n│   │   └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n│   └── osx-arm64\n│       └── pyintegralall-0.0.5-py39hfeaa757_0.tar.bz2\n├── dist\n│   └── pyintegralall-0.0.5.tar.gz\n├── README.md\n├── pyintegralall.egg-info\n│   ├── PKG-INFO\n│   ├── dependency_links.txt\n│   ├── SOURCES.txt\n│   ├── top_level.txt\n│   └── requires.txt\n├── LICENSE.txt\n├── setup.py\n├── tutorials\n│   ├── Definite_Integral.png\n│   ├── Example1 - IntegralALL.ipynb\n│   ├── Definite_Integral.py\n│   └── .ipynb_checkpoints\n│       └── Example1 - IntegralALL-checkpoint.ipynb\n├── src\n│   ├── python\n│   │   ├── __init__.py\n│   │   └── PyIntegralALL.py\n│   └── fortran\n│       ├── LINinterpol.cpython-39-darwin.so\n│       ├── GaussLegendreQuadrature.cpython-311-darwin.so\n│       ├── IntegralALL.compile\n│       ├── IntegralALL.f90\n│       ├── IntegralALL.cpython-39-darwin.so\n│       ├── IntegralALL.cpython-39-x86_64-linux-gnu.so\n│       ├── IntegralALL.cpython-310-darwin.so\n│       ├── IntegralALL.cpython-310-x86_64-linux-gnu.so\n│       ├── GaussLegendreQuadrature.cpython-38-x86_64-linux-gnu.so\n│       ├── IntegralALL.cpython-311-darwin.so\n│       ├── DataTypes.f90\n│       ├── GaussLegendreQuadrature.cpython-39-x86_64-linux-gnu.so\n│       ├── GaussLegendreQuadrature.cpython-310-darwin.so\n│       ├── LINinterpol.cpython-311-darwin.so\n│       ├── IntegralALL.cpython-38-x86_64-linux-gnu.so\n│       ├── LINinterpol.cpython-38-x86_64-linux-gnu.so\n│       ├── GaussLegendreQuadrature.cpython-310-x86_64-linux-gnu.so\n│       ├── LINinterpol.cpython-310-darwin.so\n│       ├── LINinterpol.compile\n│       ├── GaussLegendreQuadrature.f90\n│       ├── README.txt\n│       ├── LINinterpol.cpython-39-x86_64-linux-gnu.so\n│       ├── GaussLegendreQuadrature.cpython-39-darwin.so\n│       ├── LINinterpol.cpython-310-x86_64-linux-gnu.so\n│       ├── LINinterpol.f90\n│       └── GaussLegendreQuadrature.compile\n├── version.txt\n└── build\n    ├── lib.linux-x86_64-3.9\n    │   └── pyintegralall\n    ├── src.linux-x86_64-3.9\n    │   ├── pyintegralall\n    │   ├── build\n    │   └── numpy\n    └── temp.linux-x86_64-3.9\n        ├── pyintegralall\n        ├── ccompiler_opt_cache_ext.py\n        ├── src\n        ├── .libs\n        └── build\n\n37 directories, 74 files\n</code>\n</pre>\n\nPyIntegralALL.py is a python wrapper to the library in Fortran called\npyintegralall.flib. The Fortran directory can be compiled separately for each\nindividual subroutine.\n\n<hr>\n\n#### <b>LICENSE</b>\n\nThis software is provided \"AS IS\" (see DISCLAIMER below). Permission to use,\nfor non-commercial purposes is granted. Permission to modify for personal or\ninternal use is granted, provided this copyright and disclaimer are included\nin ALL copies of the software. All other rights are reserved. In particular,\nredistribution of the code is not allowed without explicit permission by the\nauthor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/neutrinomuon/IntegralALL",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyintegralall",
    "package_url": "https://pypi.org/project/pyintegralall/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyintegralall/",
    "project_urls": {
      "Homepage": "https://github.com/neutrinomuon/IntegralALL"
    },
    "release_url": "https://pypi.org/project/pyintegralall/0.0.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Numerical integration using several methods",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16991400,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af33b1958448014600fddd6e48084d55036d6e9bfe15136835a12ca538fe4588",
          "md5": "f6a51d77db72007bb8a655c37169f440",
          "sha256": "4567098e06d20f515df621eb7f7d0a157dd761224a2094c811eb44f4f324c7d7"
        },
        "downloads": -1,
        "filename": "pyintegralall-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6a51d77db72007bb8a655c37169f440",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12821,
        "upload_time": "2023-02-08T21:55:15",
        "upload_time_iso_8601": "2023-02-08T21:55:15.552813Z",
        "url": "https://files.pythonhosted.org/packages/af/33/b1958448014600fddd6e48084d55036d6e9bfe15136835a12ca538fe4588/pyintegralall-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfa4a4d459cb0e1640b4a3d5f86c4ea0ae275a4427b206a6a10669de60a6d3ce",
          "md5": "aab38c683851c9185bdcca7a457acca5",
          "sha256": "f19998fa747844a33fee2217b0b0b0af29a11b86d3a2d8c37db24c0ff85e6103"
        },
        "downloads": -1,
        "filename": "pyintegralall-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "aab38c683851c9185bdcca7a457acca5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14501,
        "upload_time": "2023-02-11T12:21:12",
        "upload_time_iso_8601": "2023-02-11T12:21:12.155741Z",
        "url": "https://files.pythonhosted.org/packages/cf/a4/a4d459cb0e1640b4a3d5f86c4ea0ae275a4427b206a6a10669de60a6d3ce/pyintegralall-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "070762909244cb174d8142adf2b4f9fbef319a6e4685dd0f75d9b04499164339",
          "md5": "bc8e764211e93c4d65c8864f421751fa",
          "sha256": "f3fd48d78435c5634ee7f408ea5a50c3b917763227e8123b369358cb8ce96929"
        },
        "downloads": -1,
        "filename": "pyintegralall-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "bc8e764211e93c4d65c8864f421751fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14923,
        "upload_time": "2023-02-22T12:04:12",
        "upload_time_iso_8601": "2023-02-22T12:04:12.044472Z",
        "url": "https://files.pythonhosted.org/packages/07/07/62909244cb174d8142adf2b4f9fbef319a6e4685dd0f75d9b04499164339/pyintegralall-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a72c80fb3db86f254e5f8ab15b3e333bbf4a7dc4065ae0402781477e68815651",
          "md5": "9ad118f2fd8ebf2fac1514e6d150876e",
          "sha256": "0f9a251159700fae62752529d8fd5d90fa71c2c3637b0b74e2197cc4d5e9e569"
        },
        "downloads": -1,
        "filename": "pyintegralall-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9ad118f2fd8ebf2fac1514e6d150876e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15054,
        "upload_time": "2023-02-22T17:51:12",
        "upload_time_iso_8601": "2023-02-22T17:51:12.123958Z",
        "url": "https://files.pythonhosted.org/packages/a7/2c/80fb3db86f254e5f8ab15b3e333bbf4a7dc4065ae0402781477e68815651/pyintegralall-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cb377cd99f3fd4786dd84d50582586aa23ec00e5eab05d7d45b36758b79ebb1",
          "md5": "1f5c8fd774bbf2b9007705101b69cff9",
          "sha256": "2342e8093ae4550929cc88847d54ea5dc6fe12fb9036f3192c3b662a584a4657"
        },
        "downloads": -1,
        "filename": "pyintegralall-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "1f5c8fd774bbf2b9007705101b69cff9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15220,
        "upload_time": "2023-02-23T10:17:40",
        "upload_time_iso_8601": "2023-02-23T10:17:40.584657Z",
        "url": "https://files.pythonhosted.org/packages/1c/b3/77cd99f3fd4786dd84d50582586aa23ec00e5eab05d7d45b36758b79ebb1/pyintegralall-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cb377cd99f3fd4786dd84d50582586aa23ec00e5eab05d7d45b36758b79ebb1",
        "md5": "1f5c8fd774bbf2b9007705101b69cff9",
        "sha256": "2342e8093ae4550929cc88847d54ea5dc6fe12fb9036f3192c3b662a584a4657"
      },
      "downloads": -1,
      "filename": "pyintegralall-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "1f5c8fd774bbf2b9007705101b69cff9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15220,
      "upload_time": "2023-02-23T10:17:40",
      "upload_time_iso_8601": "2023-02-23T10:17:40.584657Z",
      "url": "https://files.pythonhosted.org/packages/1c/b3/77cd99f3fd4786dd84d50582586aa23ec00e5eab05d7d45b36758b79ebb1/pyintegralall-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}