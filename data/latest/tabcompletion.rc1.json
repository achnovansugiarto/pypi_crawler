{
  "info": {
    "author": "Vaisakh Anand",
    "author_email": "vaisakh032@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Tab Auto-Completion\n========================\n>*(requires [pynput Package](https://pypi.org/project/pynput/), [getch](https://pypi.org/project/getch/) and runs in python3 )*\n\nIt is a python module which will help the user to import\nthe  ***Press tab to auto complete*** feature into their\npython scripts.\n\nThe basic purpose for such a module was that, I needed to\nimpart auto complete feature into a python script of mine,\nso that the user doesn't always have to type in the\ncomplete phrase each and everytime and at the same time\nwill hwlp to standardise my input in the program.\n\nThe module requires a json file or a dictionary which has\nto loaded onto so the object which can search for possible\nvalues of the input based on history of user's input. Each\nand every time the user inputs a new possible value, it is\nrecorded in the json files *(this feature is not available\nif you pass a dictionary to the object)* and the\nrecomendations will be shown from the nexttime onwards.\n\nThe json file will have to contain a dictionary in the\nfollowing structure:\n```\n{\"typeName1\":[list, of, possible, values, in, a python, list],\n \"typeName2\":[list, of, possible, values, in, a python, list],\n \"typeName3\":[list, of, possible, values, in, a python, list]}\n```\n\nThe script is able to handle more than one type of names tags\nunder which their possible values are listed.\n\n>***Note:*** The script uses ASCCI escape codes for\ncontrolling the postion of the cursor  in the command line.\n\n## Usage:\nThe module is made as simple as possible so that th user will\nhave to just import it into their script and call the function\nthough the object initialised. To import the module into your\nscript please place the script in the same directory of that of\nyour script or add the python module globally (method specified\nbelow).\n\n - #### import the module :\n```\nfrom tabCompletion import Tabcomplete\n```\n - #### initialise the object :\n\n The object can be initialised either by using a path to the\n json file that contains a dictionary or by passing a dictionary\n directly. If you wish to pass the path to json file the:\n ```\n ObjectName = Tabcomplete(\"pathToJsonFile.json\")\n ```\n Or if you wish to pass a dictionary directly to the object,\n then:\n ```\n sampleDict = {\"sample Id\":[list, of, sample, items], \"sample Id2\": [list]}\n ObjectName = Tabcomplete(sampleDict)\n ```\n > At present the module will not support dynamic update of the\n dict passed on. But at the same time, if you pass on a json\n file, new entries will be updated onto the json file.\n\n- #### get inputs using the initialised class :\n ```\n inputVariable = ObjectName.getip(\"displayText\", \"typeName\")\n ```\n ObjectName.getip() function has 3 default parameter:\n   - caseSensitive\n    - default value = 'n'\n    - suggestions are caseSensitive if the value is 'y'\n   - compulsoryInput\n    - default value = 'y'\n    - the user cannot pass an empty string as input\n      if the value is set to 'y'\n   - dynamicUpdation\n    - default value = 'y'\n    - if new user inputs are entered that are not in the\n     suggestions lists, the json files passed will be\n     updated\n\n >typeName refers to the nameTag underwhich the possible values\n are stored in the json file.\n\n***Note:*** A json file is a must for the program to run. So\ninitially even if you sont have any possible values Please\ncreate a json file containing a dictionary which will follow\nthe proposed structure (where the list of possible values can\n  be left empty).\n\n>  The list of possible values unser each nametag can be left\nempty as these values will be updated in the json based on the\nuser's input.\n\n### How to Install the required modules:\n To run this modules, you would require to install some\n python modules using pip3.\n\n ```\n pip3 install pynput\n pip3 install getch\n ```\n\n### How to add tabCompletion module globally:\n To make this module available globally in your local system,\n add the path of you module to .basrc\n\n ```\n cd ~/folder/where/the/project/is/cloned\n echo \"#Python module for tab completion\" >> ~/.bashrc\n echo \"export PYTHONPATH=$PWD/\" >> ~/.bashrc\n ```\n Now that you have linked the module globally, please restart\n your terminal and check if the module is linked:\n ```\n python3\n import tabCompletion\n ```\n If no error are shown, then you have linked the module succefully.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/vaisakh032/tab-auto-completion",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tabCompletion",
    "package_url": "https://pypi.org/project/tabCompletion/",
    "platform": "",
    "project_url": "https://pypi.org/project/tabCompletion/",
    "project_urls": {
      "Homepage": "https://gitlab.com/vaisakh032/tab-auto-completion"
    },
    "release_url": "https://pypi.org/project/tabCompletion/1.0.0/",
    "requires_dist": [
      "pynput (>=1.4)",
      "getch (>=1.0)"
    ],
    "requires_python": "",
    "summary": "This package will help impart autocompletion to your python script inputs.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4745527,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d30d962b2231f35cd63ae2596b9c9d12d84b52caf37d12bdfec719dc12f6adee",
          "md5": "6f48eae924bd1f08287b6a5dcf1de2e8",
          "sha256": "70f9d56bc08bd6d90ce4abf3759a8b2f3cbd06a9f96a8ebb3aa083dee1cb3e34"
        },
        "downloads": -1,
        "filename": "tabCompletion-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f48eae924bd1f08287b6a5dcf1de2e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19583,
        "upload_time": "2019-01-27T08:29:38",
        "upload_time_iso_8601": "2019-01-27T08:29:38.647939Z",
        "url": "https://files.pythonhosted.org/packages/d3/0d/962b2231f35cd63ae2596b9c9d12d84b52caf37d12bdfec719dc12f6adee/tabCompletion-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ed5163247acb7c9d8883a37adce6dfed6419fbf0d9fa022768072be17123daa",
          "md5": "7604c529610e0b63bd4b4cb070581359",
          "sha256": "80d0354a2f89b1a04e01ef7f4203ecdf30692ca2f78f49fba70f4d32dd4e1a67"
        },
        "downloads": -1,
        "filename": "tabCompletion-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7604c529610e0b63bd4b4cb070581359",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6830,
        "upload_time": "2019-01-27T08:29:42",
        "upload_time_iso_8601": "2019-01-27T08:29:42.109531Z",
        "url": "https://files.pythonhosted.org/packages/0e/d5/163247acb7c9d8883a37adce6dfed6419fbf0d9fa022768072be17123daa/tabCompletion-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d30d962b2231f35cd63ae2596b9c9d12d84b52caf37d12bdfec719dc12f6adee",
        "md5": "6f48eae924bd1f08287b6a5dcf1de2e8",
        "sha256": "70f9d56bc08bd6d90ce4abf3759a8b2f3cbd06a9f96a8ebb3aa083dee1cb3e34"
      },
      "downloads": -1,
      "filename": "tabCompletion-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6f48eae924bd1f08287b6a5dcf1de2e8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19583,
      "upload_time": "2019-01-27T08:29:38",
      "upload_time_iso_8601": "2019-01-27T08:29:38.647939Z",
      "url": "https://files.pythonhosted.org/packages/d3/0d/962b2231f35cd63ae2596b9c9d12d84b52caf37d12bdfec719dc12f6adee/tabCompletion-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ed5163247acb7c9d8883a37adce6dfed6419fbf0d9fa022768072be17123daa",
        "md5": "7604c529610e0b63bd4b4cb070581359",
        "sha256": "80d0354a2f89b1a04e01ef7f4203ecdf30692ca2f78f49fba70f4d32dd4e1a67"
      },
      "downloads": -1,
      "filename": "tabCompletion-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7604c529610e0b63bd4b4cb070581359",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6830,
      "upload_time": "2019-01-27T08:29:42",
      "upload_time_iso_8601": "2019-01-27T08:29:42.109531Z",
      "url": "https://files.pythonhosted.org/packages/0e/d5/163247acb7c9d8883a37adce6dfed6419fbf0d9fa022768072be17123daa/tabCompletion-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}