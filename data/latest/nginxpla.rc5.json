{
  "info": {
    "author": "Eugene Myazin",
    "author_email": "eugene.myazin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3"
    ],
    "description": "***********************************************************\n``nginxpla`` utility for nginx access log real-time metrics\n***********************************************************\n\nInspired by `ngxtop <https://github.com/lebinh/ngxtop>`_\n\n``nginxpla`` is console nginx's log parser and analyser written in python. Fully configurable reports and templates.\nLike ``ngxtop`` it allows build ``top``-like custom reports by chosen metrics.\nI have tried my best to do it customizable and extendable. \n\n    ``nginxpla`` is very powefull for troubleshooting and monitoring your Nginx server here and now. \n    It is not suitable for long-term monitoring, because under the hood it has sqlite3. \n    Performance can degrade when large amounts of data accumulate. So, you warned.\n\n``nginxpla`` is config-based utility. It means after first run it create in users home directory folder ``.nginxpla``\nwith config file in yaml format. When you run ``nginxpla`` it loads configuration, such as log_format for \nfile wich you try to analyze and templates with modules. The program is flexible enough \nin configuration to analyze almost any line-by-line logs that can be parsed by regular expressions. \nModular structure with several modules included.\n\n\n1. Installation\n###############\n\n::\n    \n    pip install nginxpla\n    nginxpla --install\n    nano ~/.nginxpla/nginxpla.yaml\n\n2. Usage\n########\n\n::\n\n    Usage:\n        nginxpla <access-log-file> [options]\n        nginxpla <access-log-file> [options] (print) <var> ...\n        nginxpla (-h | --help)\n        nginxpla --version\n\n    Options:\n        -l <file>, --access-log <file>  access log file to parse.\n        -f <format>, --log-format <format>  log format as specify in log_format directive. [default: combined]\n        -i <seconds>, --interval <seconds>  report interval when running in --top mode [default: 2.0]\n        -t <template>, --template <template>  use template from config file [default: main]\n        -m <modules>, --modules <modules>  comma separated module list [default: all]\n\n        --info  print configuration info for access_log\n        --top  watch for new lines as they are written to the access log.\n\n        -g <var>, --group-by <var>  group by variable [default: ]\n        -w <var>, --having <expr>  having clause [default: 1]\n        -o <var>, --order-by <var>  order of output for default query [default: count]\n        -n <number>, --limit <number>  limit the number of records included in report [default: 10]\n        -a <exp> ..., --a <exp> ...  add exp (must be aggregation exp: sum, avg, min, max, etc.) into output\n\n        -v, --verbose  more verbose output\n        -d, --debug  print every line and parsed record\n        -h, --help  print this help message.\n        --version  print version information.\n\n        Advanced:\n        -c <file>, --config <file>  nginxpla config file path.\n        -e <filter-expression>, --filter <filter-expression>  filter in, records satisfied given expression are processed.\n        -p <filter-expression>, --pre-filter <filter-expression>  in-filter expression to check in pre-parsing phase.\n        -s <sql-request>, --sql <sql-request>  raw Sql in sqlite format. Table with data is log\n        --fields <fields>  Fields to import in sqllite log table, for example, --fields user_agent,status\n\n    Examples:\n        Print statistics for default template\n        $ nginxpla access_log\n\n        Select All indexed data from base\n        $ nginxpla access_log --sql select * from log\n\n        Select All indexed data from base\n        $ nginxpla access_log --sql 'SELECT user_agent, status, count(1) AS count FROM log GROUP BY user_agent, status ORDER BY count DESC LIMIT 100' --fields user_agent,status\n\nConfiguration\n#############\n\nAfter install configure logs-section:\n\n::\n\n    logs:\n        mydomain:\n            log_path_regexp: 'mydomain\\.access\\.log'\n            format: \"default\"\n        second_domain_name:\n            log_path_regexp: 'second_domain_name\\.access\\.log'\n            format: \"custom\"\n        fallback_to_combined:\n            log_path_regexp: '.*'\n            format: \"combined\"\n\nIf you use custom nginx log_format or you want configure something different you can define formats in section:\n\n::\n\n    formats:\n        default: '$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_x_forwarded_for\"'\n        combined: '$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\"'\n        custom: '$http_x_forwarded_for - [$time_local] \"$host\" \"$request\" $status ($bytes_sent) \"$http_referer\" \"$uri $args\" \"$http_user_agent\" [$request_time] [$upstream_response_time]'\n\nImportant: After parse $variables will be columns in databse with same name and you can operate them\n\n``regex_formats``-section do the same as ``formats``. If you regex-guru you can speed-up parse by regex. ``regex_formats`` is prefered than simple way, if defined ``format`` and ``regex_format`` with the same name, ``regex_format`` will be used.\n\nSQL suffix\n**********\n\nFor better visualization I have add suffixes. Just add it to column name in SQL and all row of data will be formatted.\nSql suffix itself will be removed from result table column name.\n\n**_human_size** â€” size-formatter, convert digits like this 4399151 to this 4,20Mb\n\nExample\n\n::\n\n    $ nginxpla access_log --fields request_path,body_bytes_sent query SELECT request_path, sum(body_bytes_sent) as bytes_sent_human_size GROUP BY request_path ORDER BY bytes_sent_human_size DESC LIMIT 10\n\n\nReport Table Column Human Name\n******************************\n\nAll column names from SQL will be transform to string with space-separated words.\nBut in your sql you should use original column names.\n\n::\n\n    $ nginxpla access_log --fields se,request_path --filter=\"se=='Google Bot'\" query 'SELECT request_path as request_path_by_google_bot, count(1) as count FROM log GROUP BY request_path ORDER BY count DESC LIMIT 10'\n\n    | Request Path By Google Bot   |   Count |\n    |------------------------------+---------|\n    | /c/202060826/new             |      68 |\n    | /c/202060826/discount        |      29 |\n    | /c/202001900                 |      28 |\n    | /c/202001107                 |      22 |\n    | /c/1000008746                |      17 |\n    | /c/202060845                 |      17 |\n    | /c/202000010                 |      16 |\n    | /c/202061131                 |      16 |\n    | /c/202062183/new             |      16 |\n    | /c/202061132                 |      15 |\n\n    running for 18 seconds, 33923 records processed: 1789.62 req/sec\n\nPrint Format\n************\n\nFor simple queries you can user print syntax:\n\n::\n\n    nginxpla <access-log-file> [options] (print) <var> ...\n\nThe print-syntax parser make some useful magick. It is ordering and auto results grouping.\nMagick fields is ``count``\n\n::\n\n    $ nginxpla access_log --limit=0 print se count\n\nExample\n\n::\n\n    # Uses Search Engine Module and Pattern Module\n\n    $ nginxpla access_log --filter=\"se != '-'\" --limit=0 print se request_path_pattern count\n\n    | Se           | Request Path Pattern   |   Count |\n    |--------------+------------------------+---------|\n    | Yahoo Slurp  | Product                |  183522 |\n    | Yahoo Slurp  | Rubric                 |  106551 |\n    | Yahoo Slurp  | Brand                  |   18200 |\n    | Google Bot   | Rubric                 |   17549 |\n    | Google Bot   | Product                |   10959 |\n    | Google Bot   | Brand                  |    3019 |\n\n    running for 28 seconds, 361730 records processed: 12546.68 req/sec\n\n4. Modules\n----------\n\nPattern Module\n\nAllows to define your request path patterns. For example, in url structure on your project all brands have format like\n``/brand/slug...`` you can group them by pattern:\n\n::\n\n    modules:\n        pattern:\n            package: \"module.pattern\"\n            class: \"PatternModule\"\n            ...\n            options:\n                ...\n                brand:\n                    from: '^/brand/.*'\n                    to: \"Brand\"\n                ...\n\nFor full module config see default `config example <https://github.com/evirma/nginxpla/blob/master/nginxpla/config/nginxpla.yaml>`_\n\nAll urls starts with ``/brand/`` will have field ``request_path_pattern`` with value 'Brand' and you can use this\nin you reports, prints or queries\n\n::\n\n    $ nginxpla access_log print request_path_pattern count\n\n\nASN Module\n\nUse GeoLite2-ASN.mmdb to get ``asn`` and ``ans_name`` variables to ``record``. ``asn_name`` contains company name from whois\n\nASN Module Config\n\n.. code-block:: yaml\n\n    asn:\n    label: \"ASN Top:\"\n    package: \"module.asn\"\n    class: \"AsnModule\"\n    fields: \n        - asn\n        - asn_name\n        - remote_addr\n        - bytes_sent\n        - request_time\n    inedxes: \n        - asn_name\n    sql: | \n        SELECT\n            asn                                         AS ASN,\n            asn_name                                    AS Company,\n            count(1)                                    AS Count,\n            sum(bytes_sent)                             AS sum_bytes_sent_human_size,\n            sum(request_time)                           AS total_time,\n            avg(request_time)                           AS avg_time,\n            count(CASE WHEN status_type = 2 THEN 1 END) AS '2xx',\n            count(CASE WHEN status_type = 3 THEN 1 END) AS '3xx',\n            count(CASE WHEN status_type = 4 THEN 1 END) AS '4xx',\n            count(CASE WHEN status_type = 5 THEN 1 END) AS '5xx'\n        FROM log\n        GROUP BY asn_name\n        HAVING %(--having)s\n        ORDER BY %(--order-by)s DESC\n        LIMIT  %(--limit)s\n\n\nModule API\n----------\n\nHOW IT WORKS\n\nWhen a string is parsed into variables, they are concatenated into a record. \nFurther, the recording goes in modules (``handle_record``), the module can change or add something to the record. \nAfter that, only part of the record goes to the database. What exactly gets in depends on the key ``fields`` in the settings file, this is needed for optimization.\nThen the ``report`` assembly starts. The report methods are called in the order specified in the config.\nThe ``handle_report`` method is launched using the same algorithm. But, it receives the resulting report as a parameter.\n\n\n- ``record`` - dict parsed from log line\n- ``report`` - text of all reports \n- ``ModuleConfi`` - object with module settings \n\nModule it is just a small Class with 3 methods and contructor.\n\n``handle_record`` - method takes only one parameter ``record`` and must return it back. You can modify it.\n``report`` - text of report, you can use sql to fetch data from db. If you don't like methods from config.store - you can get connection (``config.store.conn()``) and do what you want\n``handle_report`` - takes result report, must return it back\n\nEXAMPLE OF MODULE\n\n.. code-block:: python3\n    \n    \"\"\"\n    Simple Module\n\n    package: \"module.simple\"\n    class: \"SimpleModule\"\n\n    \"\"\"\n    from nginxpla.utils import generate_table\n    from nginxpla.module_config import ModuleConfig\n\n    class SimpleModule:\n        def handle_record(self, record):\n            record['some_variable'] = 'some_value'\n            return record\n\n        def report(self):\n            config = self.config\n            [header, data] = config.storage.fetchtable(config.sql, config.arguments)\n            return generate_table(header, data)\n\n        def handle_report(self, report: str):\n            report += \"something to append to the end of entire script's report\"\n            return report\n            \n        def __init__(self, module_config: ModuleConfig):\n            self.config = module_config\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/evirma/nginxpla",
    "keywords": "cli monitoring nginx log access_log system",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nginxpla",
    "package_url": "https://pypi.org/project/nginxpla/",
    "platform": "",
    "project_url": "https://pypi.org/project/nginxpla/",
    "project_urls": {
      "Homepage": "https://github.com/evirma/nginxpla"
    },
    "release_url": "https://pypi.org/project/nginxpla/0.0.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Small and powerful real-time python nginx access log parser and analyzer with top-like style support",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10917860,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ac557f07172c78d6f4dcfbdd1de3a1b61901154f3a5f4162008e5c4433ee16a",
          "md5": "0c29c7343c55984592c09cd101e35c84",
          "sha256": "1a19f4bfd018d742070683e72f3b0b5b5ff317d526f314f877bcea37ee7aa952"
        },
        "downloads": -1,
        "filename": "nginxpla-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0c29c7343c55984592c09cd101e35c84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21430,
        "upload_time": "2021-07-05T12:54:23",
        "upload_time_iso_8601": "2021-07-05T12:54:23.481949Z",
        "url": "https://files.pythonhosted.org/packages/0a/c5/57f07172c78d6f4dcfbdd1de3a1b61901154f3a5f4162008e5c4433ee16a/nginxpla-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "917d7ef2d033e9356abce300de54f84f20f4b8b69346a07a004a54777a75fbfe",
          "md5": "b5bdc37af3927331fceff6f956605e2b",
          "sha256": "842164dde49a7b46c33357ccdb6463e2e5c6ba5f0d6b627d378ed0f89735ac3e"
        },
        "downloads": -1,
        "filename": "nginxpla-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b5bdc37af3927331fceff6f956605e2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21424,
        "upload_time": "2021-07-05T13:03:07",
        "upload_time_iso_8601": "2021-07-05T13:03:07.874097Z",
        "url": "https://files.pythonhosted.org/packages/91/7d/7ef2d033e9356abce300de54f84f20f4b8b69346a07a004a54777a75fbfe/nginxpla-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "805ab4dee6f56c3911aa92a469371ecd7232ae6e004f4716d9f5d7304746e87c",
          "md5": "7fc01670b3a397f23bbbc4cffd13dcbd",
          "sha256": "c55db2f07d3c03f1beb701a28dda9038116a1acda89ebc3ab87fbfd7256d05ea"
        },
        "downloads": -1,
        "filename": "nginxpla-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7fc01670b3a397f23bbbc4cffd13dcbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23153,
        "upload_time": "2021-07-05T22:59:23",
        "upload_time_iso_8601": "2021-07-05T22:59:23.581006Z",
        "url": "https://files.pythonhosted.org/packages/80/5a/b4dee6f56c3911aa92a469371ecd7232ae6e004f4716d9f5d7304746e87c/nginxpla-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08bda6695e0f7f42226eb89d98d36d40d59385d7ea4fd206600169d24c81fe58",
          "md5": "9ff0b645e23d1106a955275e987764d0",
          "sha256": "2a31ae32815b6d19a2881c227a5ec1674a27fd805216bbfaaddd4e6552bf138d"
        },
        "downloads": -1,
        "filename": "nginxpla-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9ff0b645e23d1106a955275e987764d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23719,
        "upload_time": "2021-07-15T13:02:02",
        "upload_time_iso_8601": "2021-07-15T13:02:02.879063Z",
        "url": "https://files.pythonhosted.org/packages/08/bd/a6695e0f7f42226eb89d98d36d40d59385d7ea4fd206600169d24c81fe58/nginxpla-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e71abb5329a580424db72e36cdaea6c8356bb0a93eeb6ff4e77bc2b9c8b75d3",
          "md5": "43c8c7025c0c53989c648053090c5f86",
          "sha256": "e5108ae0af05718e00ad29a6a661b145a833eba0853e9b316e5ca800e93b0604"
        },
        "downloads": -1,
        "filename": "nginxpla-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "43c8c7025c0c53989c648053090c5f86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23756,
        "upload_time": "2021-07-15T13:17:00",
        "upload_time_iso_8601": "2021-07-15T13:17:00.169522Z",
        "url": "https://files.pythonhosted.org/packages/3e/71/abb5329a580424db72e36cdaea6c8356bb0a93eeb6ff4e77bc2b9c8b75d3/nginxpla-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e71abb5329a580424db72e36cdaea6c8356bb0a93eeb6ff4e77bc2b9c8b75d3",
        "md5": "43c8c7025c0c53989c648053090c5f86",
        "sha256": "e5108ae0af05718e00ad29a6a661b145a833eba0853e9b316e5ca800e93b0604"
      },
      "downloads": -1,
      "filename": "nginxpla-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "43c8c7025c0c53989c648053090c5f86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23756,
      "upload_time": "2021-07-15T13:17:00",
      "upload_time_iso_8601": "2021-07-15T13:17:00.169522Z",
      "url": "https://files.pythonhosted.org/packages/3e/71/abb5329a580424db72e36cdaea6c8356bb0a93eeb6ff4e77bc2b9c8b75d3/nginxpla-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}