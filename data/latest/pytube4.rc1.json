{
  "info": {
    "author": "Max Booth, Nick Ficano, Harold Martin",
    "author_email": "nficano@gmail.com, harold.martin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet",
      "Topic :: Multimedia :: Video",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Terminals",
      "Topic :: Utilities"
    ],
    "description": "\n\n<div align=\"center\">\n  <p align=\"center\">\n\t  <a href=\"https://pypi.org/project/pytube3/\"><img src=\"https://img.shields.io/pypi/v/pytube3.svg\" alt=\"pypi\"></a>\n\t  <a href=\"https://pypi.python.org/pypi/pytube3/\"><img src=\"https://img.shields.io/pypi/pyversions/pytube3.svg\" /></a>\n\t  <a href=\"https://travis-ci.com/hbmartin/pytube3/\"><img src=\"https://travis-ci.org/hbmartin/pytube3.svg?branch=master\" /></a>\n\t  <a href='https://pytube3.readthedocs.io/en/latest/?badge=latest'><img src='https://readthedocs.org/projects/pytube3/badge/?version=latest' alt='Documentation Status' /></a>\n\t  <a href=\"https://codecov.io/gh/hbmartin/pytube3\"><img src=\"https://codecov.io/gh/hbmartin/pytube3/branch/master/graph/badge.svg\" /></a>\n\t  <a href=\"https://www.codefactor.io/repository/github/hbmartin/pytube3/overview/master\"><img src=\"https://www.codefactor.io/repository/github/hbmartin/pytube3/badge/master\" alt=\"CodeFactor\" /></a>\n\t  <a href=\"https://gitter.im/pytube3/community\"><img src=\"https://img.shields.io/badge/chat-gitter-lightgrey\" /></a>\n  </p>\n</div>\n\n# pytubeX\nAn improvised fork from `pytube3` that has been left unmaintained for months. I've fixed the bugs, done a bit of spring cleaning and got it working for the updated YouTube site that broke it. Will happily give back control to the origional owners of `pytube3` if they want it!\n\n## Table of Contents\n  * [Installation](#installation)\n  * [Quick start](#quick-start)\n  * [Features](#features)\n  * [Usage](#usage)\n  * [Command-line interface](#command-line-interface)\n  * [Development](#development)\n  * [GUIs and other libraries](#guis-and-other-libraries)\n\n## Installation\n\nDownload using pip via pypi.\n\n```bash\n$ pip install pytubeX\n```\n(Mac/homebrew users may need to use ``pip3``)\n\n\n## Quick start\n```python\n >>> from pytube import YouTube\n >>> YouTube('https://youtu.be/9bZkp7q19f0').streams.get_highest_resolution().download()\n >>>\n >>> yt = YouTube('http://youtube.com/watch?v=9bZkp7q19f0')\n >>> yt.streams\n  ... .filter(progressive=True, file_extension='mp4')\n  ... .order_by('resolution')[-1]\n  ... .download()\n```\nA GUI frontend for pytube3 is available at [YouTubeDownload](https://github.com/YouTubeDownload/YouTubeDownload)\n\n## Features\n  * Support for Both Progressive & DASH Streams\n  * Support for downloading complete playlist\n  * Easily Register ``on_download_progress`` & ``on_download_complete`` callbacks\n  * Command-line Interfaced Included\n  * Caption Track Support\n  * Outputs Caption Tracks to .srt format (SubRip Subtitle)\n  * Ability to Capture Thumbnail URL.\n  * Extensively Documented Source Code\n  * No Third-Party Dependencies\n\n## Usage\n\nLet's begin with showing how easy it is to download a video with pytube:\n\n```python\n>>> from pytube import YouTube\n>>> YouTube('http://youtube.com/watch?v=9bZkp7q19f0').streams[0].download()\n```\nThis example will download the highest quality progressive download stream available.\n\nNext, let's explore how we would view what video streams are available:\n\n```python\n>>> yt = YouTube('http://youtube.com/watch?v=9bZkp7q19f0')\n>>> print(yt.streams)\n [<Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\">,\n <Stream: itag=\"43\" mime_type=\"video/webm\" res=\"360p\" fps=\"30fps\" vcodec=\"vp8.0\" acodec=\"vorbis\">,\n <Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\">,\n <Stream: itag=\"36\" mime_type=\"video/3gpp\" res=\"240p\" fps=\"30fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\">,\n <Stream: itag=\"17\" mime_type=\"video/3gpp\" res=\"144p\" fps=\"30fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\">,\n <Stream: itag=\"137\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"30fps\" vcodec=\"avc1.640028\">,\n <Stream: itag=\"248\" mime_type=\"video/webm\" res=\"1080p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"136\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.4d401f\">,\n <Stream: itag=\"247\" mime_type=\"video/webm\" res=\"720p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"135\" mime_type=\"video/mp4\" res=\"480p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n <Stream: itag=\"244\" mime_type=\"video/webm\" res=\"480p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"134\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n <Stream: itag=\"243\" mime_type=\"video/webm\" res=\"360p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"133\" mime_type=\"video/mp4\" res=\"240p\" fps=\"30fps\" vcodec=\"avc1.4d4015\">,\n <Stream: itag=\"242\" mime_type=\"video/webm\" res=\"240p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"160\" mime_type=\"video/mp4\" res=\"144p\" fps=\"30fps\" vcodec=\"avc1.4d400c\">,\n <Stream: itag=\"278\" mime_type=\"video/webm\" res=\"144p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\">,\n <Stream: itag=\"171\" mime_type=\"audio/webm\" abr=\"128kbps\" acodec=\"vorbis\">,\n <Stream: itag=\"249\" mime_type=\"audio/webm\" abr=\"50kbps\" acodec=\"opus\">,\n <Stream: itag=\"250\" mime_type=\"audio/webm\" abr=\"70kbps\" acodec=\"opus\">,\n <Stream: itag=\"251\" mime_type=\"audio/webm\" abr=\"160kbps\" acodec=\"opus\">]\n```\n\n### Selecting an itag\n\nYou may notice that some streams listed have both a video codec and audio codec, while others have just video or just audio, this is a result of YouTube supporting a streaming technique called Dynamic Adaptive Streaming over HTTP (DASH).\n\nIn the context of pytube, the implications are for the highest quality streams; you now need to download both the audio and video tracks and then post-process them with software like FFmpeg to merge them.\n\nThe legacy streams that contain the audio and video in a single file (referred to as \"progressive download\") are still available, but only for resolutions 720p and below.\n\nTo only view these progressive download streams:\n\n```python\n >>> yt.streams.filter(progressive=True)\n  [<Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"43\" mime_type=\"video/webm\" res=\"360p\" fps=\"30fps\" vcodec=\"vp8.0\" acodec=\"vorbis\">,\n  <Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"36\" mime_type=\"video/3gpp\" res=\"240p\" fps=\"30fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"17\" mime_type=\"video/3gpp\" res=\"144p\" fps=\"30fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\">]\n```\n\nConversely, if you only want to see the DASH streams (also referred to as \"adaptive\") you can do:\n\n```python\n>>> yt.streams.filter(adaptive=True)\n [<Stream: itag=\"137\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"30fps\" vcodec=\"avc1.640028\">,\n  <Stream: itag=\"248\" mime_type=\"video/webm\" res=\"1080p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"136\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.4d401f\">,\n  <Stream: itag=\"247\" mime_type=\"video/webm\" res=\"720p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"135\" mime_type=\"video/mp4\" res=\"480p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n  <Stream: itag=\"244\" mime_type=\"video/webm\" res=\"480p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"134\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n  <Stream: itag=\"243\" mime_type=\"video/webm\" res=\"360p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"133\" mime_type=\"video/mp4\" res=\"240p\" fps=\"30fps\" vcodec=\"avc1.4d4015\">,\n  <Stream: itag=\"242\" mime_type=\"video/webm\" res=\"240p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"160\" mime_type=\"video/mp4\" res=\"144p\" fps=\"30fps\" vcodec=\"avc1.4d400c\">,\n  <Stream: itag=\"278\" mime_type=\"video/webm\" res=\"144p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"171\" mime_type=\"audio/webm\" abr=\"128kbps\" acodec=\"vorbis\">,\n  <Stream: itag=\"249\" mime_type=\"audio/webm\" abr=\"50kbps\" acodec=\"opus\">,\n  <Stream: itag=\"250\" mime_type=\"audio/webm\" abr=\"70kbps\" acodec=\"opus\">,\n  <Stream: itag=\"251\" mime_type=\"audio/webm\" abr=\"160kbps\" acodec=\"opus\">]\n```\n\n### Playlists\n\nYou can also download a complete Youtube playlist:\n\n```python\n>>> from pytube import Playlist\n>>> playlist = Playlist(\"https://www.youtube.com/playlist?list=PLynhp4cZEpTbRs_PYISQ8v_uwO0_mDg_X\")\n>>> for video in playlist:\n>>> \tvideo.streams.get_highest_resolution().download()\n```\nThis will download the highest progressive stream available (generally 720p) from the given playlist.\n\n### Filtering\n\nPytube allows you to filter on every property available (see the documentation for the complete list), let's take a look at some of the most useful ones.\n\nTo list the audio only streams:\n\n```python\n>>> yt.streams.filter(only_audio=True)\n  [<Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"171\" mime_type=\"audio/webm\" abr=\"128kbps\" acodec=\"vorbis\">,\n  <Stream: itag=\"249\" mime_type=\"audio/webm\" abr=\"50kbps\" acodec=\"opus\">,\n  <Stream: itag=\"250\" mime_type=\"audio/webm\" abr=\"70kbps\" acodec=\"opus\">,\n  <Stream: itag=\"251\" mime_type=\"audio/webm\" abr=\"160kbps\" acodec=\"opus\">]\n```\n\nTo list only ``mp4`` streams:\n\n```python\n>>> yt.streams.filter(subtype='mp4')\n [<Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"137\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"30fps\" vcodec=\"avc1.640028\">,\n  <Stream: itag=\"136\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.4d401f\">,\n  <Stream: itag=\"135\" mime_type=\"video/mp4\" res=\"480p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n  <Stream: itag=\"134\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n  <Stream: itag=\"133\" mime_type=\"video/mp4\" res=\"240p\" fps=\"30fps\" vcodec=\"avc1.4d4015\">,\n  <Stream: itag=\"160\" mime_type=\"video/mp4\" res=\"144p\" fps=\"30fps\" vcodec=\"avc1.4d400c\">,\n  <Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\">]\n```\n\nMultiple filters can also be specified:\n\n```python\n>>> yt.streams.filter(subtype='mp4', progressive=True)\n>>> # this can also be expressed as:\n>>> yt.streams.filter(subtype='mp4').filter(progressive=True)\n  [<Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\">]\n```\nYou also have an interface to select streams by their itag, without needing to filter:\n\n```python\n>>> yt.streams.get_by_itag(22)\n  <Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\">\n```\n\nIf you need to optimize for a specific feature, such as the \"highest resolution\" or \"lowest average bitrate\":\n\n```python\n>>> yt.streams.filter(progressive=True).order_by('resolution').desc()\n```\nNote: Using ``order_by`` on a given attribute will filter out all streams missing that attribute.\n\n### Callbacks\n\nIf your application requires post-processing logic, pytube allows you to specify an \"on download complete\" callback function:\n\n```python\n >>> def convert_to_aac(stream: Stream, file_path: str):\n         return  # do work\n\n >>> yt.register_on_complete_callback(convert_to_aac)\n```\n\nSimilarly, if your application requires on-download progress logic, pytube exposes a callback for this as well:\n\n```python\n >>> def show_progress_bar(stream: Stream, chunk: bytes, bytes_remaining: int):\n         return  # do work\n\n >>> yt.register_on_progress_callback(show_progress_bar)\n```\n\n## Command-line interface\n\npytubeX ships with a simple CLI interface for downloading videos, playlists, and captions.\n\nLet's start with downloading:\n\n```bash\n$ pytubeX http://youtube.com/watch?v=9bZkp7q19f0 --itag=18\n```\nTo view available streams:\n\n```bash\n$ pytubeX http://youtube.com/watch?v=9bZkp7q19f0 --list\n```\n\nThe complete set of flags are:\n\n```\nusage: pytubeX [-h] [--version] [--itag ITAG] [-r RESOLUTION] [-l] [-v]\n               [--build-playback-report] [-c [CAPTION_CODE]] [-t TARGET]\n               [-a [AUDIO]] [-f [FFMPEG]]\n               [url]\n\nCommand line application to download youtube videos.\n\npositional arguments:\n  url                   The YouTube /watch or /playlist url\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --itag ITAG           The itag for the desired stream\n  -r RESOLUTION, --resolution RESOLUTION\n                        The resolution for the desired stream\n  -l, --list            The list option causes pytube cli to return a list of\n                        streams available to download\n  -v, --verbose         Verbosity level, use up to 4 to increase logging -vvvv\n  --build-playback-report\n                        Save the html and js to disk\n  -c [CAPTION_CODE], --caption-code [CAPTION_CODE]\n                        Download srt captions for given language code. Prints\n                        available language codes if no argument given\n  -t TARGET, --target TARGET\n                        The output directory for the downloaded stream.\n                        Default is current working directory\n  -a [AUDIO], --audio [AUDIO]\n                        Download the audio for a given URL at the highest\n                        bitrate availableDefaults to mp4 format if none is\n                        specified\n  -f [FFMPEG], --ffmpeg [FFMPEG]\n                        Downloads the audio and video stream for resolution\n                        providedIf no resolution is provided, downloads the\n                        best resolutionRuns the command line program ffmpeg to\n                        combine the audio and video\n```\n\n\n\n#### Virtual environment\n\nVirtual environment is setup with [pipenv](https://pipenv-fork.readthedocs.io/en/latest/) and can be automatically activated with [direnv](https://direnv.net/docs/installation.html)\n\n#### Code Formatting\n\nThis project is linted with [pyflakes](https://github.com/PyCQA/pyflakes), formatted with [black](https://github.com/ambv/black), and typed with [mypy](https://mypy.readthedocs.io/en/latest/introduction.html)\n\n\n#### Code of Conduct\n\nTreat other people with helpfulness, gratitude, and consideration! See the [Python Community Code of Conduct](https://www.python.org/psf/codeofconduct/).\n\n## GUIs and other libraries\n* [YouTubeDownload](https://github.com/YouTubeDownload/YouTubeDownload) - Featured GUI frontend for pytube3\n* [Pytube-GUI](https://github.com/GAO23/Pytube-GUI) - Simple GUI frontend for pytube3\n* [StackOverflow questions](https://stackoverflow.com/questions/tagged/pytube)\n* [PySlackers](https://pyslackers.com/web) - Python Slack group\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/H4KKR/pytube4",
    "keywords": "youtube,download,video,stream",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytube4",
    "package_url": "https://pypi.org/project/pytube4/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytube4/",
    "project_urls": {
      "Bug Reports": "https://github.com/hbmartin/pytube3/issues, https://github.com/H4KKR/pytube4/issues",
      "Homepage": "https://github.com/H4KKR/pytube4",
      "Read the Docs": "https://pytube3.readthedocs.io/en/latest/?badge=latest"
    },
    "release_url": "https://pypi.org/project/pytube4/0.1.1/",
    "requires_dist": [
      "typing-extensions"
    ],
    "requires_python": ">=3.6",
    "summary": "Python 3 library for downloading YouTube Videos. Fork from pytube3, an unmaintained library.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7838116,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d9ec57eb46f1c0eeec053287f1c9ac3ef94c7dcdd91f50750634e07eb705ef1",
          "md5": "8de2b7d08da5fda5a674c68f9004eb90",
          "sha256": "89a5cc4bdf4c2254b568a337c33e45c2f452843971cead938f0210e3cbb50917"
        },
        "downloads": -1,
        "filename": "pytube4-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8de2b7d08da5fda5a674c68f9004eb90",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38501,
        "upload_time": "2020-07-29T22:06:55",
        "upload_time_iso_8601": "2020-07-29T22:06:55.079176Z",
        "url": "https://files.pythonhosted.org/packages/8d/9e/c57eb46f1c0eeec053287f1c9ac3ef94c7dcdd91f50750634e07eb705ef1/pytube4-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62af9087c47ae96eeb655536eed902307c8fd529d560bdefbbb03c06333f10b7",
          "md5": "bcde8e099f8e69eae4d8daec5a510fbd",
          "sha256": "ab1531f9345b2c56fd2e0651614344079bee03a893a7bd85a00b90e266d8c59d"
        },
        "downloads": -1,
        "filename": "pytube4-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bcde8e099f8e69eae4d8daec5a510fbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47776,
        "upload_time": "2020-07-29T22:06:58",
        "upload_time_iso_8601": "2020-07-29T22:06:58.496408Z",
        "url": "https://files.pythonhosted.org/packages/62/af/9087c47ae96eeb655536eed902307c8fd529d560bdefbbb03c06333f10b7/pytube4-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d9ec57eb46f1c0eeec053287f1c9ac3ef94c7dcdd91f50750634e07eb705ef1",
        "md5": "8de2b7d08da5fda5a674c68f9004eb90",
        "sha256": "89a5cc4bdf4c2254b568a337c33e45c2f452843971cead938f0210e3cbb50917"
      },
      "downloads": -1,
      "filename": "pytube4-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8de2b7d08da5fda5a674c68f9004eb90",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 38501,
      "upload_time": "2020-07-29T22:06:55",
      "upload_time_iso_8601": "2020-07-29T22:06:55.079176Z",
      "url": "https://files.pythonhosted.org/packages/8d/9e/c57eb46f1c0eeec053287f1c9ac3ef94c7dcdd91f50750634e07eb705ef1/pytube4-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62af9087c47ae96eeb655536eed902307c8fd529d560bdefbbb03c06333f10b7",
        "md5": "bcde8e099f8e69eae4d8daec5a510fbd",
        "sha256": "ab1531f9345b2c56fd2e0651614344079bee03a893a7bd85a00b90e266d8c59d"
      },
      "downloads": -1,
      "filename": "pytube4-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bcde8e099f8e69eae4d8daec5a510fbd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 47776,
      "upload_time": "2020-07-29T22:06:58",
      "upload_time_iso_8601": "2020-07-29T22:06:58.496408Z",
      "url": "https://files.pythonhosted.org/packages/62/af/9087c47ae96eeb655536eed902307c8fd529d560bdefbbb03c06333f10b7/pytube4-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}