{
  "info": {
    "author": "Tom Coates, Alexander Kasprzyk",
    "author_email": "t.coates@imperial.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: SQL",
      "Topic :: Database :: Front-Ends",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Logging"
    ],
    "description": "# PCAS Python interface\n\nThe `pcas` Python package provides an interface to services running on [PCAS](https://www.pcas.xyz) infrastructure. It consists of several submodules:\n* [keyvalue](#keyvalue-interface)\n* [logger](#logger-interface)\n* [sql](#sql-submodule)\n\n## Keyvalue interface\n\nThe `keyvalue` submodule provides an interface to key-value databases hosted on servers running the PCAS database `kvdbd`. To connect to such a database, use a `Connection` object.\n\n### Connection objects\n\nA `Connection` represents a connection to a PCAS key-value database. You can create a `Connection` like this:\n\n```python\nfrom pcas import keyvalue\n\ndb = '...your database name...'\nssl_cert = '...your SSL certificate...'\nconn = keyvalue.Connection(db, address='localhost:12356', certificate=ssl_cert)\n```\n\nThe `address` parameter is optional; if omitted, its value will be read from the environment variable `PCAS_KVDB_ADDRESS`. Similarly if the `certificate` parameter is omitted, its value will be read from the environment variable `PCAS_SSL_CERT`. \n\nA `Connection` object has methods to connect to a table, create a new table, delete a table, describe a table, and list the tables in the database.\n\n#### Connect to a table\n\nTo connect to a table, use the `connect_to_table` method. This takes the name of the table as an argument, and returns a `Table` object.\n```python\nt = conn.connect_to_table('table_name')\n```\n`Table` objects are documented [below](#table-objects).\n\n#### Create a table\nTo create a new table, use the `create_table` method. This takes the name of the table and a dictionary as an argument, and returns `None`. The dictionary represents a template key-value record: it should have keys that are strings and values that are strings, integers, booleans, floating-point numbers, or `bytes` objects.\n```python\nconn.create_table('new_table', template) \n```\n\n#### Delete a table\nTo delete a table from the database, use the `delete_table` method. This takes the name of the table as an argument, and returns `None`.\n```python\nconn.delete_table('unwanted')\n```\n\n#### Describe a table\nTo get a description of a table in the database, use the `describe_table` method. This takes the name of the table as an argument, and returns a dictionary describing a typical entry in the table.\n```python\nd = conn.describe_table('table_name`)\n```\nThe return value is a dictionary such as \n```python\n{'id': 0, 'coefficients': ''}\n```\ndescribing a typical key-value record in the table; here we see that the value of `'id'` in the records is an integer, and the value of `'coefficients'` is a string. If the database backing `kvdbd` has a schema (e.g. PostgreSQL) then the table description uses this schema; if the backing database is schemaless (e.g. MongoDB) then the table description is a \"best guess\" based on a sample of records from the table, and may not be correct for all records.\n\n\n#### List tables\nTo list the tables in the database, use the `list_tables` method. The takes no arguments, and returns a list of the names of the tables in the database.\n\n```python\ntable_list = conn.list_tables()  \n```\n\n#### Rename a table\nTo rename a table in the database, use the `rename_table` method. This takes the old and new names as arguments, and returns `None`.\n```python\n# List the tables\nprint(conn.list_tables())\n# {'hippo'}\n\n# Rename the table \nconn.rename_table('hippo', 'giraffe')\n\n# List the tables again\nprint(conn.list_tables())\n# {'giraffe'}\n```\n\n### Table objects\n\nA `Table` object represents a table in a PCAS keyvalue database. As discussed, you create a `Table` by calling the `connect_to_table` method on the `Connection` that represents the database. \n\n`Table` objects have methods to count, delete, insert, select, and update key-value records in the table, as well as methods to add, list, and delete indexes on keys of the key-value records.\n\n#### Count records\nTo count records in the table, use the `count` method. It optionally takes a selector as argument, and returns the number of records in the table that match that selector.\n```python\nn = t.count(selector)\n```\nThe selector can be omitted, in which case the total number of records in the table is returned; it can be a dictionary, representing a key-value record, in which case the number of records matching those keys and values is returned; or it can be a string in [SQL format](#sql-submodule) that specifies the condition. Examples:\n```python\n# Count all the records in the table t\nnum_records = t.count()\n\n# Count the records with the specified keys and values\nselector = {'rank': 3, 'name': 'exactly this'}\nn = t.count(selector)\n\n# Count the records matching the specified condition\nn = t.count('WHERE rank BETWEEN 2 and 4 AND id >= 100')\n```\n\n\n#### Delete records\nTo delete records from the table, use the `delete` method. It optionally takes a selector as argument, and returns the number of records deleted.\n```python\nnum_deleted = t.delete(selector)\n```\nThe selector can be omitted, in which case all records in the table are deleted; it can be a dictionary, representing a key-value record, in which case all records matching those keys and values are deleted; or it can be a string in [SQL format](#sql-submodule) that specifies the condition. Examples:\n```python\n# Delete all the records in the table t\nnum_deleted = t.delete()\n\n# Delete all records with the specified keys and values\nselector = {'id': 3, 'rank': 5}\nnum_deleted = t.delete(selector)\n\n# Delete all records that match the specified condition\nnum_deleted = t.delete('WHERE id = 3 AND rank <= 6')\n```\n\n#### Insert records\nTo insert records into the table, use the `insert` method. It takes an iterable of dictionaries as argument, and returns `None`. The dictionaries represent key-value records; they should have keys that are strings and values that are strings, integers, booleans, floating-point numbers, or `bytes` objects.\n```python\nt.insert(recs)\n```\n\n#### Select records\nTo select records from the table, use the `select` method. It takes a dictionary, an optional selector, an optional sort order, and an optional limit as arguments, and returns an iterator containing the matching records. \n```python\nitr = t.select(template, selector, order, limit)\n```\nThe records returned will be in the form specified by the key-value record `template`. If an `order` is provided, the records will be returned in that order. If a `limit` is provided, it must be a positive integer and at most that many records will be returned. The selector can be omitted, in which case all records in the table are returned; it can be a dictionary, representing a key-value record, in which case all records matching those keys and values are returned; or it can be a string in [SQL format](#sql-submodule) that specifies the condition.\n\nIf the selector is provided as a string in [SQL format](#sql-submodule) then it may also specify the order and/or the limit. If it does so then order, and/or respectively limit, must either be unspecified or specified as `None`. Examples:\n```python\n# We return the id and the rank, which are both integers\ntemplate = {'id': 0, 'rank': 0}\n\n# Select all the records in the table t\nitr = t.select(template)\n\n# Select at most 10 records\nitr = t.select(template, limit=10)\n\n# Select records with specified keys and values\nselector = {'rank':2, 'dimension': 4}\nitr = t.select(template, selector)\n\n# Select records that match a specified condition\nitr = t.select(template, 'WHERE id > 40 AND dimension IN (1,3,5,7)')\n\n# Select with the records returned in a specified order\nitr = t.select(template, 'WHERE id > 40 SORT BY id ASC, rank DESC')\n\n# An equivalent select, with the sort order specified directly. \nfrom pcas.sql import sort\nmy_order = [sort.ascending('id'), sort.descending('rank')]\nitr = t.select(template, 'WHERE id > 40', order = my_order)\n```\n\n#### Update records\nTo update records in the table, use the `update` method. It takes a dictionary and an optional selector as arguments, and returns the number of records updated. \n```python\nnum_updated = t.update(replacement, selector)\n```\nAll records in the table that match the selector are updated by setting the keys present in the dictionary `replacement` to the corresponding values. The selector can be omitted, in which case all records in the table are updated; it can be a dictionary, representing a key-value record, in which case all records matching those keys and values are updated; or it can be a string in [SQL format](#sql-submodule) that specifies the condition. Examples:\n```python\n# We will set the values 'id' and 'dimension' in the updated records\nreplacement = {'id': 98, 'dimension':3}\n\n# Update all the records in the table t\nnum_updated = t.update()\n\n# Update all records with the specified keys and values\nselector = {'id': 98, 'rank': 12}\nnum_updated = t.update(selector)\n\n# Update all records that match the specified condition\nnum_updated = t.update('WHERE id = 3 AND rank <= 6')\n```\n\n#### Add, delete, and list indexes\nTo add an index to the table, use the `add_index` method. It takes the key to be indexed as an argument, and returns `None`.\n```python\nt.add_index('the_key_to_be_indexed')\n```\nA unique index is an index together with the constraint that, for each value of the indexed key, there is at most one record with that value. To add a unique index to the table, use the `add_unique_index` method. It takes the key to be indexed as an argument, and returns `None`.\n```python\nt.add_unique_index('the_key_to_be_indexed')\n```\nTo delete an index from the table, use the `delete_index` method. It takes the key for the index as an argument, and returns `None`. If there is no index on the specified key, this operation succeeds but does nothing.\n```python\nt.delete_index('the_key_to_be_indexed')\n```\nTo list the indexes present on the table, use the `list_indices` method. It takes no arguments, and returns a list of the indexed keys.\n```python\nkey_list = t.list_indices()\n```\n\n#### Describe the table\n\nTo get a description of the table, use the `describe` method. It takes no arguments, and has return value exactly as for the `describe_table` method of a `Connection` documented [above](#describe-a-table).\n```python\nd = t.describe()\n```\n\n#### Add keys\n\nTo add keys to an existing table, use the `add_keys` method. This updates each record in the table, adding the keys in the given record along with the corresponding values, if they are not already present. Any keys that are already present will be left unmodified.\n```python\n# Display the records in the table t\nprint([x for x in t.select(t.describe())])\n# [{'a': 1, 'b': 'fish'}, {'a': 2, 'c': 'chips'}]\n\n# Add new keys\nt.add_keys({'b': 'peas', 'd':12})\n\n# Display the records again\nprint([x for x in t.select(t.describe())])\n# [{'a': 1, 'b': 'fish', 'd': 12}, {'a': 2, 'c': 'chips', 'b': 'peas', 'd': 12}]\n```\n\n#### Delete keys\n\nTo delete keys from a table, use the `delete_keys` method. This updates all records in the table, deleting the specified keys if present.\n```python\n# Display the records in the table t\nprint([x for x in t.select(t.describe())])\n# [{'a': 1, 'b': 'fish', 'd': 12}, {'b': 'peas', 'd': 12, 'a': 2, 'c': 'chips'}]\n\n# Delete some keys from all records\nt.delete_keys(['c','d'])\n\n# Display the records again\nprint([x for x in t.select(t.describe())])\n# [{'a': 1, 'b': 'fish'}, {'a': 2, 'b': 'peas'}]\n```\n\n\n### Key-value records\n\nKey-value records are represented by dictionaries. These have keys that are strings and values that are strings, integers, booleans, floating-point numbers, or `bytes` objects.\n\n## Logger interface\n\nThe `logger` submodule provides a log handler that writes to a server running the PCAS logging service `logd`. It uses the standard Python [logging framework](https://docs.python.org/3/library/logging.html). Example usage:\n```python\nimport multiprocessing\nimport logging\nfrom logging.handlers import QueueListener, QueueHandler\nfrom pcas import logger\n\n# Set up the log handler\nssl_cert = '...your SSL certificate...'\nhandler = logger.LogHandler(address='localhost:12354', certificate=ssl_cert)\n\n# Set up a queue that passes log messages to our handler\nqueue = multiprocessing.Queue(-1)\nqueue_listener = QueueListener(queue, logger.LogHandler())\nqueue_listener.start()\n\n# Create the logger\nlg = logging.getLogger('your_log_name')\nlg.addHandler(QueueHandler(queue))\n\n# Do stuff...\n\n# Write to the logger\nlg.warning('hello world')\n\n# Clean up\nhandler.close()\nqueue_listener.stop()\n```\nThe `address` argument for `logger.LogHandler` specifies the address of the PCAS `logd` server and is optional; if omitted the address will be read from the environment variable `PCAS_LOG_ADDRESS`. The `certificate` option specifies the SSL certificate to use and is also optional; if omitted the certificate will be read from the environment variable `PCAS_SSL_CERT`. The log handler blocks on logging if the `logd` server is unavailable. This is why we used a queue in the code above: it ensures that calls to the logger `lg` are non-blocking.\n\n## SQL submodule\n\nThe `sql` submodule defines a parser for SQL-formatted queries. The SQL should be formatted as follows:\n\n```sql\n[[WHERE] <where condition>] [ORDER BY <sort order>] [LIMIT <limit>]\n```\n\nSee below for [examples](#examples). Note that prefixing the WHERE condition with \"WHERE\" is currently optional, although this might change in the future.\n\n### `WHERE` conditions\n\nThe following types are supported:\n\n* string -\tsurrounded by matching double- (\") or single-quotes (')\n* integer -\tmust fit in a 64-bit signed or unsigned integer\n* float -\t\tmust fit in a 64-bit `float`\n* boolean -\t`TRUE` or `FALSE`\n\nThe following standard SQL operators are supported:\n* `=`, `!=`\n* `<`, `>`, `<=`, `>=`\n* `IS`, `IS NOT`\n* `IN`, `NOT IN`\n* `BETWEEN`, `NOT BETWEEN`\n* `AND`\n* `OR`\n\n### `SORT` orders\n\nA `SORT` order should be formatted\n\n```sql\nkey1 [ASC | DESC], key2 [ASC | DESC], ..., keyn [ASC | DESC]\n```\n\nwhere `ASC` and `DESC` denote increasing and decreasing order, respectively. Precisely what this means is determined by the underlying storage engine and data type. If `ASC` or `DESC` is omitted, then `ASC` is assumed by default.\n\n### `LIMIT` specifications\n\nA non-negative integer (that must fit in 64-bit signed integer) must be provided.\n\n### Examples\n\n```sql\nWHERE is_reflexive IS FALSE AND number_of_points >= 12 ORDER BY id DESC LIMIT 5\n\nWHERE id BETWEEN 4 and 9\n\nWHERE TRUE\n\nORDER BY rank, id \n\nORDER BY rank DESC, id ASC\n\nLIMIT 50\n\nWHERE rank <= 6 LIMIT 10\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/pcas/python-interface",
    "keywords": "",
    "license": "CC0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pcas",
    "package_url": "https://pypi.org/project/pcas/",
    "platform": "",
    "project_url": "https://pypi.org/project/pcas/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/pcas/python-interface"
    },
    "release_url": "https://pypi.org/project/pcas/0.0.6/",
    "requires_dist": [
      "grpcio",
      "protobuf"
    ],
    "requires_python": ">=3.8",
    "summary": "pcas provides an interface to PCAS microservices.",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13009649,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d08567a8f835ad54261e7740dd2603742b4fdb58bc7e1df2c57337d5dd8a2b6f",
          "md5": "8b66e612d299951bca4dca739b432332",
          "sha256": "d89a0c518346fbc339de83138fe6ce936b12f96e195f814bc042a7907eff7f2c"
        },
        "downloads": -1,
        "filename": "pcas-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b66e612d299951bca4dca739b432332",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8450,
        "upload_time": "2021-11-08T06:29:46",
        "upload_time_iso_8601": "2021-11-08T06:29:46.482941Z",
        "url": "https://files.pythonhosted.org/packages/d0/85/67a8f835ad54261e7740dd2603742b4fdb58bc7e1df2c57337d5dd8a2b6f/pcas-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "746efcfc2a6d178ee77c71b2403bb52aa53775fa2785369444d9a2e64376f4b9",
          "md5": "bf4f89224aa0ce292c9e445e980e2961",
          "sha256": "8132e5d3382f0e1379fdd82776bae8defa665eb7d70da7c7df98ac92c04c0ac8"
        },
        "downloads": -1,
        "filename": "pcas-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bf4f89224aa0ce292c9e445e980e2961",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7808,
        "upload_time": "2021-11-08T06:29:47",
        "upload_time_iso_8601": "2021-11-08T06:29:47.920483Z",
        "url": "https://files.pythonhosted.org/packages/74/6e/fcfc2a6d178ee77c71b2403bb52aa53775fa2785369444d9a2e64376f4b9/pcas-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "380cb2d4d6243d6bbdf936818249392d702b109a6978fd02679faeeef71d6c1d",
          "md5": "62256b6e25c14e2011ce6364ce827a18",
          "sha256": "0fdc617c4610f1653536efb678bde054bbfe91e8bb65337edf125bfac1e00b29"
        },
        "downloads": -1,
        "filename": "pcas-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62256b6e25c14e2011ce6364ce827a18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 63184,
        "upload_time": "2021-11-08T10:20:34",
        "upload_time_iso_8601": "2021-11-08T10:20:34.417197Z",
        "url": "https://files.pythonhosted.org/packages/38/0c/b2d4d6243d6bbdf936818249392d702b109a6978fd02679faeeef71d6c1d/pcas-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3125b08093de4c0fd463cd357907ef8e9e8944c4d23fdff4f54a84613f9a8d98",
          "md5": "4c42e03d1c19de0de9dbb5dc2d27be42",
          "sha256": "f2985082b690880846d5dcda05d9e525234e56e05491c6643df665ffa5439bbc"
        },
        "downloads": -1,
        "filename": "pcas-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4c42e03d1c19de0de9dbb5dc2d27be42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 52999,
        "upload_time": "2021-11-08T10:20:36",
        "upload_time_iso_8601": "2021-11-08T10:20:36.541099Z",
        "url": "https://files.pythonhosted.org/packages/31/25/b08093de4c0fd463cd357907ef8e9e8944c4d23fdff4f54a84613f9a8d98/pcas-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84d6b7fc9f76079a3a425c38579769dbc088e0415084bf19719c32fd13f583f3",
          "md5": "a871428c8ea99e08dacb6d284f0a4db0",
          "sha256": "9d123c66954095ddc1a6093ed32bd15c501f5e969e41b630f1541745baca9662"
        },
        "downloads": -1,
        "filename": "pcas-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a871428c8ea99e08dacb6d284f0a4db0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 65302,
        "upload_time": "2021-11-26T12:42:45",
        "upload_time_iso_8601": "2021-11-26T12:42:45.365027Z",
        "url": "https://files.pythonhosted.org/packages/84/d6/b7fc9f76079a3a425c38579769dbc088e0415084bf19719c32fd13f583f3/pcas-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c4129e90efb4158cc04499d0c9c97e4998bfd5e6c42b4f81daaf6337ef75a27",
          "md5": "c2126f384d0d8a87b0e298df0dda0abc",
          "sha256": "54675b8052c05c0c21947f3bee529204814109310a7a09264290779770345683"
        },
        "downloads": -1,
        "filename": "pcas-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c2126f384d0d8a87b0e298df0dda0abc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 55488,
        "upload_time": "2021-11-26T12:42:47",
        "upload_time_iso_8601": "2021-11-26T12:42:47.132213Z",
        "url": "https://files.pythonhosted.org/packages/5c/41/29e90efb4158cc04499d0c9c97e4998bfd5e6c42b4f81daaf6337ef75a27/pcas-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35a08c42e1df189c0159ad5c9aaf379f6d026ea5a1ce8cb2cb42e649da8bddf2",
          "md5": "704bcf294b1d1fca66cff57f098dc834",
          "sha256": "29faf57a8e95edc40780c7954b8f1bea19fdb9400fada1508a93fa624f4994b3"
        },
        "downloads": -1,
        "filename": "pcas-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "704bcf294b1d1fca66cff57f098dc834",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 65769,
        "upload_time": "2022-02-21T13:31:43",
        "upload_time_iso_8601": "2022-02-21T13:31:43.713881Z",
        "url": "https://files.pythonhosted.org/packages/35/a0/8c42e1df189c0159ad5c9aaf379f6d026ea5a1ce8cb2cb42e649da8bddf2/pcas-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "652d574c95673699d29ee64a5c85d7c82dc12df990fd5c0c843b01ac07817775",
          "md5": "19b6c91578608794f0ff69a024b59418",
          "sha256": "19b513c6817d4d12c3eaa3d0084badc1a1ace9e68c0ac3d0bb67e33b32c234d7"
        },
        "downloads": -1,
        "filename": "pcas-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "19b6c91578608794f0ff69a024b59418",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 56309,
        "upload_time": "2022-02-21T13:31:45",
        "upload_time_iso_8601": "2022-02-21T13:31:45.782919Z",
        "url": "https://files.pythonhosted.org/packages/65/2d/574c95673699d29ee64a5c85d7c82dc12df990fd5c0c843b01ac07817775/pcas-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64838afd0ea5f8eb3173b498705c215a5942c55d28776234a9e1132a78a73bec",
          "md5": "434978d2b634f9ea0bb1daa83193b236",
          "sha256": "7819358ad28a359c1e935c7a89e5da82b4fee8ba2973ff96dcd3e15c5800e915"
        },
        "downloads": -1,
        "filename": "pcas-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "434978d2b634f9ea0bb1daa83193b236",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 68318,
        "upload_time": "2022-02-25T13:39:10",
        "upload_time_iso_8601": "2022-02-25T13:39:10.473731Z",
        "url": "https://files.pythonhosted.org/packages/64/83/8afd0ea5f8eb3173b498705c215a5942c55d28776234a9e1132a78a73bec/pcas-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9aec83bbb27cc52416fef26d8f425951267ad64c5d59d670791d2c8aba96b7eb",
          "md5": "be6db04504d1f40b3d8b8db07712215a",
          "sha256": "37e742b5fc01a5a182d41190c5c07d1d21f309a6cd28f56563297532ea3013b7"
        },
        "downloads": -1,
        "filename": "pcas-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "be6db04504d1f40b3d8b8db07712215a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 59020,
        "upload_time": "2022-02-25T13:39:12",
        "upload_time_iso_8601": "2022-02-25T13:39:12.042108Z",
        "url": "https://files.pythonhosted.org/packages/9a/ec/83bbb27cc52416fef26d8f425951267ad64c5d59d670791d2c8aba96b7eb/pcas-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64838afd0ea5f8eb3173b498705c215a5942c55d28776234a9e1132a78a73bec",
        "md5": "434978d2b634f9ea0bb1daa83193b236",
        "sha256": "7819358ad28a359c1e935c7a89e5da82b4fee8ba2973ff96dcd3e15c5800e915"
      },
      "downloads": -1,
      "filename": "pcas-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "434978d2b634f9ea0bb1daa83193b236",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 68318,
      "upload_time": "2022-02-25T13:39:10",
      "upload_time_iso_8601": "2022-02-25T13:39:10.473731Z",
      "url": "https://files.pythonhosted.org/packages/64/83/8afd0ea5f8eb3173b498705c215a5942c55d28776234a9e1132a78a73bec/pcas-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9aec83bbb27cc52416fef26d8f425951267ad64c5d59d670791d2c8aba96b7eb",
        "md5": "be6db04504d1f40b3d8b8db07712215a",
        "sha256": "37e742b5fc01a5a182d41190c5c07d1d21f309a6cd28f56563297532ea3013b7"
      },
      "downloads": -1,
      "filename": "pcas-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "be6db04504d1f40b3d8b8db07712215a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 59020,
      "upload_time": "2022-02-25T13:39:12",
      "upload_time_iso_8601": "2022-02-25T13:39:12.042108Z",
      "url": "https://files.pythonhosted.org/packages/9a/ec/83bbb27cc52416fef26d8f425951267ad64c5d59d670791d2c8aba96b7eb/pcas-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}