{
  "info": {
    "author": "",
    "author_email": "Allen Institute for Artificial Intelligence <contact@allenai.org>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MMDA - multimodal document analysis\n\nThis is work in progress... \n\n## Setup\n\n```bash\nconda create -n mmda python=3.8\npip install -e '.[dev,<extras_require section from setup.py>]'\n```\n\nFor most users, we recommend using recipes:\n```python\npip install -e '.[dev,recipes]'\n```\n\n## Unit testing\nNote that pytest is running coverage, which checks the unit test coverage of the code.\nThe percent coverage can be found in setup.cfg file.\n```bash\npytest\n```\nfor latest failed test\n```bash\npytest --lf --no-cov -n0\n```\nfor specific test name of class name\n```bash\npytest -k 'TestFigureCaptionPredictor' --no-cov -n0\n```\n\n## Quick start\n\n\n#### 1. Create a Document for the first time from a PDF\n\nIn this example, we use the `CoreRecipe` to convert a PDF into a bunch of text and images.\n```python\nfrom mmda.types import Document\nfrom mmda.recipes import CoreRecipe\n\nrecipe = CoreRecipe()\ndoc: Document = recipe.from_path(pdfpath='...pdf')\n```\n\n#### 2. Understanding the output: the `Document` class\n\nWhat is a `Document`? At minimum, it is some text, saved under the `.symbols` field, which is just a `<str>`.  For example:\n\n```python\ndoc.symbols\n> \"Language Models as Knowledge Bases?\\nFabio Petroni1 Tim Rockt...\"\n```\n\nBut the usefulness of this library really is when you have multiple different ways of segmenting `.symbols`. For example, segmenting the paper into Pages, and then each page into Rows: \n\n```python\nfor page in doc.pages:\n    print(f'\\n=== PAGE: {page.id} ===\\n\\n')\n    for row in page.rows:\n        print(row.symbols)\n        \n> ...\n> === PAGE: 5 ===\n> ['tence x, s′ will be linked to s and o′ to o. In']\n> ['practice, this means RE can return the correct so-']\n> ['lution o if any relation instance of the right type']\n> ['was extracted from x, regardless of whether it has']\n> ...\n```\n\nshows two nice aspects of this library:\n\n* `Document` provides iterables for different segmentations of `symbols`.  Options include things like `pages, tokens, rows, sents, paragraphs, sections, ...`.  Not every Parser will provide every segmentation, though.  For example, `SymbolScraperParser` only provides `pages, tokens, rows`.  More on how to obtain other segmentations later.\n\n* Each one of these segments (in our library, we call them `SpanGroup` objects) is aware of (and can access) other segment types. For example, you can call `page.rows` to get all Rows that intersect a particular Page.  Or you can call `sent.tokens` to get all Tokens that intersect a particular Sentence.  Or you can call `sent.rows` to get the Row(s) that intersect a particular Sentence.  These indexes are built *dynamically* when the `Document` is created and each time a new `SpanGroup` type is loaded.  In the extreme, one can do:\n\n```python\nfor page in doc.pages:\n    for paragraph in page.paragraphs:\n        for sent in paragraph.sents:\n            for row in sent.rows: \n                ...\n```\n\nas long as those fields are available in the Document. You can check which fields are available in a Document via:\n\n```python\ndoc.fields\n> ['pages', 'tokens', 'rows']\n```\n\n#### 3. Understanding intersection of SpanGroups\n\nNote that `SpanGroup` don't necessarily perfectly nest each other. For example, what happens if:\n\n```python\nfor sent in doc.sents:\n    for row in sent.rows:\n        print([token.symbols for token in row.tokens])\n```\n\nTokens that are *outside* each sentence can still be printed. This is because when we jump from a sentence to its rows, we are looking for *all* rows that have *any* overlap with the sentence. Rows can extend beyond sentence boundaries, and as such, can contain tokens outside that sentence.\n\nHere's another example:\n```python\nfor page in doc.pages:\n    print([sent.symbols for sent in page.sents])\n```\n\nSentences can cross page boundaries. As such, adjacent pages may end up printing the same sentence.\n\nBut\n```python\nfor page in doc.pages:\n    print([row.symbols for row in page.rows])\n    print([token.symbols for token in page.tokens])\n``` \nrows and tokens adhere strictly to page boundaries, and thus will not repeat when printed across pages.\n\nA key aspect of using this library is understanding how these different fields are defined & anticipating how they might interact with each other. We try to make decisions that are intuitive, but we do ask users to experiment with fields to build up familiarity.\n\n\n\n\n#### 4. What's in a `SpanGroup`?\n\nEach `SpanGroup` object stores information about its contents and position:\n\n* `.spans: List[Span]`, A `Span` is a pointer into `Document.symbols` (that is, `Span(start=0, end=5)` corresponds to `symbols[0:5]`) and a single `Box` representing its position & rectangular region on the page.\n\n* `.box_group: BoxGroup`, A `BoxGroup` object stores `.boxes: List[Box]`.  \n\n* `.metadata: Metadata`, A free form dictionary-like object to store extra metadata about that `SpanGroup`. These are usually empty. \n\n\n\n#### 5. How can I manually create my own `Document`?\n\nIf you look at what is happening in `CoreRecipe`, it's basically stitching together 3 types of tools: `Parsers`, `Rasterizers` and `Predictors`.\n\n* `Parsers` take a PDF as input and return a `Document` compared of `.symbols` and other fields. The example one we use is a wrapper around [PDFPlumber](https://github.com/jsvine/pdfplumber) - MIT License utility.\n\n* `Rasterizers` take a PDF as input and return an `Image` per page that is added to `Document.images`. The example one we use is [PDF2Image](https://github.com/Belval/pdf2image) - MIT License. \n\n* `Predictors` take a `Document` and apply some operation to compute a new set of `SpanGroup` objects that we can insert into our `Document`. These are all built in-house and can be either simple heuristics or full machine-learning models.\n\n\nIf we look at how `CoreRecipe` is implemented, what's happening in `.from_path()` is:\n\n```\n    def from_path(self, pdfpath: str) -> Document:\n        logger.info(\"Parsing document...\")\n        doc = self.parser.parse(input_pdf_path=pdfpath)\n\n        logger.info(\"Rasterizing document...\")\n        images = self.rasterizer.rasterize(input_pdf_path=pdfpath, dpi=72)\n        doc.annotate_images(images=images)\n\n        logger.info(\"Predicting words...\")\n        words = self.word_predictor.predict(document=doc)\n        doc.annotate(words=words)\n\n        logger.info(\"Predicting blocks...\")\n        blocks = self.effdet_publaynet_predictor.predict(document=doc)\n        equations = self.effdet_mfd_predictor.predict(document=doc)\n        doc.annotate(blocks=blocks + equations)\n\n        logger.info(\"Predicting vila...\")\n        vila_span_groups = self.vila_predictor.predict(document=doc)\n        doc.annotate(vila_span_groups=vila_span_groups)\n\n        return doc\n```\n\nYou can see how the `Document` is first created using the `Parser`, then `Images` are added to the `Document` by using the `Rasterizer` and `.annotate_images()` method. Then we layer on multiple `Predicors` worth of predictions, each added to the `Document` using `.annotate()`.\n\n#### 6. How can I save my `Document`?\n\n```python\nimport json\nwith open('filename.json', 'w') as f_out:\n    json.dump(doc.to_json(with_images=True), f_out, indent=4)\n```\n\nwill produce something akin to:\n```python\n{\n    \"symbols\": \"Language Models as Knowledge Bases?\\nFabio Petroni1 Tim Rockt...\",\n    \"images\": \"...\",\n    \"rows\": [...],\n    \"tokens\": [...],\n    \"words\": [...],\n    \"blocks\": [...],\n    \"vila_span_groups\": [...]\n}\n```\n\nNote that `Images` are serialized to `base64` if you include `with_images` flag. Otherwise, it's left out of JSON serialization by default.\n\n#### 7. How can I load my `Document`?\n\nThese can be used to reconstruct a `Document` again via:\n\n```python\nwith open('filename.json') as f_in:\n    doc_dict = json.load(f_in)\n    doc = Document.from_json(doc_dict)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mmda",
    "package_url": "https://pypi.org/project/mmda/",
    "platform": null,
    "project_url": "https://pypi.org/project/mmda/",
    "project_urls": {
      "Bug Tracker": "https://www.github.com/allenai/mmda/issues",
      "Homepage": "https://www.github.com/allenai/mmda",
      "Repository": "https://www.github.com/allenai/mmda"
    },
    "release_url": "https://pypi.org/project/mmda/0.3.0/",
    "requires_dist": [
      "tqdm",
      "pdf2image",
      "pdfplumber (==0.7.4)",
      "requests",
      "pandas",
      "pydantic",
      "ncls",
      "necessary (>=0.3.2)",
      "layoutparser ; extra == 'bibentry_detection_predictor'",
      "torch (==1.8.0+cu111) ; extra == 'bibentry_detection_predictor'",
      "torchvision (==0.9.0+cu111) ; extra == 'bibentry_detection_predictor'",
      "transformers ; extra == 'bibentry_predictor'",
      "unidecode ; extra == 'bibentry_predictor'",
      "torch ; extra == 'bibentry_predictor'",
      "optimum[onnxruntime] ; extra == 'bibentry_predictor'",
      "transformers ; extra == 'bibentry_predictor_gpu'",
      "unidecode ; extra == 'bibentry_predictor_gpu'",
      "torch ; extra == 'bibentry_predictor_gpu'",
      "optimum[onnxruntime-gpu] ; extra == 'bibentry_predictor_gpu'",
      "numpy ; extra == 'citation_links'",
      "thefuzz[speedup] ; extra == 'citation_links'",
      "scikit-learn ; extra == 'citation_links'",
      "xgboost ; extra == 'citation_links'",
      "pytest ; extra == 'dev'",
      "pytest-xdist ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "scipy ; extra == 'figure_table_predictors'",
      "grobid-client-python (==0.0.5) ; extra == 'grobid_augment_existing_document_parser'",
      "tokenizers ; extra == 'heuristic_predictors'",
      "torch ; extra == 'hf_predictors'",
      "transformers ; extra == 'hf_predictors'",
      "smashed (==0.1.10) ; extra == 'hf_predictors'",
      "layoutparser ; extra == 'lp_predictors'",
      "torch ; extra == 'lp_predictors'",
      "torchvision ; extra == 'lp_predictors'",
      "effdet ; extra == 'lp_predictors'",
      "transformers[torch] ; extra == 'mention_predictor'",
      "optimum[onnxruntime] ; extra == 'mention_predictor'",
      "transformers[torch] ; extra == 'mention_predictor_gpu'",
      "optimum[onnxruntime-gpu] ; extra == 'mention_predictor_gpu'",
      "pysbd ; extra == 'pysbd_predictors'",
      "layoutparser ; extra == 'recipes'",
      "transformers ; extra == 'recipes'",
      "torch ; extra == 'recipes'",
      "torchvision ; extra == 'recipes'",
      "effdet ; extra == 'recipes'",
      "vila (<0.6,>=0.5) ; extra == 'recipes'",
      "smashed (==0.1.10) ; extra == 'recipes'",
      "numpy ; extra == 'section_nesting'",
      "scipy ; extra == 'section_nesting'",
      "xgboost ; extra == 'section_nesting'",
      "spacy ; extra == 'spacy_predictors'",
      "vila (<0.6,>=0.5) ; extra == 'vila_predictors'",
      "transformers ; extra == 'vila_predictors'"
    ],
    "requires_python": ">=3.7",
    "summary": "MMDA - multimodal document analysis",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17292386,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc0b74c473908e650271a1d63254c39a73e49f192a399274ae1579b16f224d6c",
          "md5": "144d3ed386453e00194bcc97f1994c07",
          "sha256": "134d5c51fea1c6f17f30ca495cef1599c9eb7afdf947c0f64763193496eff88a"
        },
        "downloads": -1,
        "filename": "mmda-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "144d3ed386453e00194bcc97f1994c07",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 4396071,
        "upload_time": "2022-10-26T23:51:50",
        "upload_time_iso_8601": "2022-10-26T23:51:50.657371Z",
        "url": "https://files.pythonhosted.org/packages/dc/0b/74c473908e650271a1d63254c39a73e49f192a399274ae1579b16f224d6c/mmda-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94a69d638b2bfeedfba8a9a610a2f183923a07bc64fbe30cd2a512fd8ba78480",
          "md5": "ac7043dc0c40384f3dc411ec879c9728",
          "sha256": "ee61de01fa70faa3bbb44e3470f444644c8ca12f9bd4ec407c73444b1a3bd374"
        },
        "downloads": -1,
        "filename": "mmda-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac7043dc0c40384f3dc411ec879c9728",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 4363768,
        "upload_time": "2022-10-26T23:51:52",
        "upload_time_iso_8601": "2022-10-26T23:51:52.543921Z",
        "url": "https://files.pythonhosted.org/packages/94/a6/9d638b2bfeedfba8a9a610a2f183923a07bc64fbe30cd2a512fd8ba78480/mmda-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5940c73250921a16e8e2760390f349fff9b1a57b7461916012369ec947bf5d3",
          "md5": "d0fc2e1f12bf8343335a0c5e26d28865",
          "sha256": "278da69b09cd3e711ad45f3a9cf3935df6097e49591d95eb1a4d7f9b33610929"
        },
        "downloads": -1,
        "filename": "mmda-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0fc2e1f12bf8343335a0c5e26d28865",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 121356,
        "upload_time": "2023-01-06T18:13:47",
        "upload_time_iso_8601": "2023-01-06T18:13:47.638910Z",
        "url": "https://files.pythonhosted.org/packages/c5/94/0c73250921a16e8e2760390f349fff9b1a57b7461916012369ec947bf5d3/mmda-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "079697ec21b30802c5fbe64ff1a117fbf707e58267769179a3a55010bdf39cb5",
          "md5": "6ef89a491a2446160e19f9454e631cc5",
          "sha256": "40aabc3354c79cb5269869dd7041a33a5c3f80b85ca87bfeef82bcfef03c4904"
        },
        "downloads": -1,
        "filename": "mmda-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "6ef89a491a2446160e19f9454e631cc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 88973,
        "upload_time": "2023-01-06T18:13:49",
        "upload_time_iso_8601": "2023-01-06T18:13:49.402829Z",
        "url": "https://files.pythonhosted.org/packages/07/96/97ec21b30802c5fbe64ff1a117fbf707e58267769179a3a55010bdf39cb5/mmda-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f31e3e12d14ab0b93c70753ab02802ae8e57bc2c8d77823dcaf939ed7ac4052a",
          "md5": "2a55d862466d6373755ff370ff7b4457",
          "sha256": "46f5259ab913fcf3af24b8e5d8b6694e44273a987f4ae13a85a3691e2b8b0bab"
        },
        "downloads": -1,
        "filename": "mmda-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a55d862466d6373755ff370ff7b4457",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5927674,
        "upload_time": "2023-03-14T19:19:05",
        "upload_time_iso_8601": "2023-03-14T19:19:05.527233Z",
        "url": "https://files.pythonhosted.org/packages/f3/1e/3e12d14ab0b93c70753ab02802ae8e57bc2c8d77823dcaf939ed7ac4052a/mmda-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf69ece03542b626139eec72ad1495ed243d6a89d900df28d17da85df919a115",
          "md5": "01be4c4c4a768bb9cbb75ec744b1ad02",
          "sha256": "c5aabd0865b1191d980516ff6eac0501e9c12c5e7334e6f0dac1a38187cb56c6"
        },
        "downloads": -1,
        "filename": "mmda-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "01be4c4c4a768bb9cbb75ec744b1ad02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5891299,
        "upload_time": "2023-03-14T19:19:08",
        "upload_time_iso_8601": "2023-03-14T19:19:08.537702Z",
        "url": "https://files.pythonhosted.org/packages/bf/69/ece03542b626139eec72ad1495ed243d6a89d900df28d17da85df919a115/mmda-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f31e3e12d14ab0b93c70753ab02802ae8e57bc2c8d77823dcaf939ed7ac4052a",
        "md5": "2a55d862466d6373755ff370ff7b4457",
        "sha256": "46f5259ab913fcf3af24b8e5d8b6694e44273a987f4ae13a85a3691e2b8b0bab"
      },
      "downloads": -1,
      "filename": "mmda-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2a55d862466d6373755ff370ff7b4457",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5927674,
      "upload_time": "2023-03-14T19:19:05",
      "upload_time_iso_8601": "2023-03-14T19:19:05.527233Z",
      "url": "https://files.pythonhosted.org/packages/f3/1e/3e12d14ab0b93c70753ab02802ae8e57bc2c8d77823dcaf939ed7ac4052a/mmda-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf69ece03542b626139eec72ad1495ed243d6a89d900df28d17da85df919a115",
        "md5": "01be4c4c4a768bb9cbb75ec744b1ad02",
        "sha256": "c5aabd0865b1191d980516ff6eac0501e9c12c5e7334e6f0dac1a38187cb56c6"
      },
      "downloads": -1,
      "filename": "mmda-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "01be4c4c4a768bb9cbb75ec744b1ad02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5891299,
      "upload_time": "2023-03-14T19:19:08",
      "upload_time_iso_8601": "2023-03-14T19:19:08.537702Z",
      "url": "https://files.pythonhosted.org/packages/bf/69/ece03542b626139eec72ad1495ed243d6a89d900df28d17da85df919a115/mmda-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}