{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![Build Status](https://app.travis-ci.com/PuspenduBanerjee/python-fpe.svg?branch=main)](https://travis-ci.com/PuspenduBanerjee/python-fpe)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![PyPI version](https://badge.fury.io/py/pyFPE.svg)](https://badge.fury.io/py/pyFPE)\n\n# ff3 - Format Preserving Encryption in Python\n\nAn implementation of the NIST approved Format Preserving Encryption (FPE) FF3 algorithm in Python.\n\n* [NIST Recommendation SP 800-38G](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38G.pdf)\n* [NIST FF3-1](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38Gr1-draft.pdf)\n\nThis package follows the FF3 algorithum for Format Preserving Encryption as described in the March 2016 NIST publication _Methods for Format-Preserving Encryption_, and revised on Feburary 28th, 2020 with a draft update for FF3-1.\n\nChanges to minimum domain size and revised tweak length have been implemented in this package.\nTweaks can be 56 or 64 bits, but NIST has only published test vectors for 64-bit tweaks.  It is expected the final\nstandard will provide updated test vectors necessary to change the \ntweak lengths to 56 bits.  \n\n## Requires\n\nThis project was built and tested with Python 3.6 and later versions.  It requires the pycryptodome library:\n\n`pip3 install pycryptodome`\n\n## Installation\n\nInstall this project with pip:\n\n`pip3 install pyFPE`\n\n## Usage\n\nFF3 is a Feistel cipher, and Feistel ciphers are initialized with a radix representing an alphabet.  \nPractial radix limits of 36 in python means the following radix values are typical:\n* radix 10: digits 0..9\n* radix 36: alphanumeric 0..9, a-z\n* radix 64: alphanumeric 0..9, a-z, A-Z, '-\n\nSpecial characters and international character sets, such as those found in UTF-8, would require a larger radix, and are not supported. \nAlso, all elements in a plaintext string share the same radix. Thus, an identification number that consists of a letter followed \nby 6 digits (e.g. A123456) cannot be correctly encrypted by FPE while preserving this convention.\n\nInput plaintext has maximum length restrictions based upon the chosen radix (2 * floor(96/log2(radix))):\n* radix 10: 56\n* radix 36: 36\n* radix 64: 32\n\nTo work around string length, its possible to encode longer text in chunks before and after encryption.\nAs transparent chunking feature has been added, such pre-processing for chunking is not required, but a developer can achieve greater control on chunk-size.\n\nAs with any cryptographic package, managing and protecting the key(s) is crucial. The tweak is generally not kept secret.\nThis package does not protect the key in memory.\n\n## Code Example\n\nThe example code below uses the default domain [0-9] and can help you get started.\n\n```python3\n\nfrom pyfpe_ff3 import FF3Cipher\n\nkey = \"EF4359D8D580AA4F7F036D6F04FC6A94\"\ntweak = \"D8E7920AFA330A73\"\nc = FF3Cipher(key, tweak)\n\nplaintext = \"4000001234567899\"\nciphertext = c.encrypt(plaintext)\ndecrypted = c.decrypt(ciphertext)\n\nprint(f\"{plaintext} -> {ciphertext} -> {decrypted}\")\n\n# format encrypted value\nccn = f\"{ciphertext[:4]} {ciphertext[4:8]} {ciphertext[8:12]} {ciphertext[12:]}\"\nprint(f\"Encrypted CCN value with formatting: {ccn}\")\n```\n\nThe example code below uses the default domain [0-9] to anonymize US SSN by scrubbing non-digit characters and reformat the final result. \nIt can be applied for Phone Numbers as well.\n```python3\nfrom pyfpe_ff3 import FF3Cipher, format_align_digits\nkey = \"EF4359D8D580AA4F7F036D6F04FC6A94\"\ntweak = \"D8E7920AFA330A73\"\nc = FF3Cipher(key, tweak)\nactual_ssn = \"845-06-9423\"\nanonymized_ssn = format_align_digits(c.encrypt(actual_ssn),actual_ssn)\nprint(f\"{actual_ssn} -> {anonymized_ssn}\")\n```\n\nFollowing example shows transparent chunking for length limit ( say 32 chaacters for radix 64). \nThis way we can handle larger plaintext to cipher and decipher. \n```python3\n\n\nfrom pyfpe_ff3 import FF3Cipher\n\nkey = \"EF4359D8D580AA4F7F036D6F04FC6A94\"\ntweak = \"A8E7920AFA330A73\"\nc = FF3Cipher(key, tweak, radix=64, allow_small_domain= True)\nplaintext = \"Donaudampfschifffahrtsgesellschaftskapitaenswitwe\"*2  # 49x2 =98 characters\nciphertext = c.encrypt(plaintext)\ndecrypted = c.decrypt(ciphertext)\nprint(f\"{plaintext} -> \\n{ciphertext} -> \\n{decrypted}\")\n\n```\n\n## Testing\n\nThere are official [test vectors](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/examples/ff3samples.pdf) for FF3 provided by NIST, which are used for testing in this package.\n\nTo run unit tests on this implementation, including all test vectors from the NIST specification, run the command:\n\n  1. `python tests/pyfpe_ff3_test.py`\n  2. or `python setup.py test`\n\n## FF3 Algorithum\n\nThe FF3 algorithum is a tweakable block cipher based on an eight round Feistel cipher. A block cipher operates on fixed-length groups of bits, called blocks. A Feistel Cipher is not a specific cipher,\nbut a design model.  This FF3 Feistel encryption consisting of eight rounds of processing\nthe plaintext. Each round applies an internal function or _round function_, followed by transformation steps.\n\nThe FF3 round function uses AES encryption in ECB mode, which is performed each iteration \non alternating halves of the text being encrypted. The *key* value is used only to initialize the AES cipher. Thereafter\nthe *tweak* is used together with the intermediate encrypted text as input to the round function.\n\n## Implementation Notes\n\nThis implementation was originally based upon the [Capital One Go implemntation](https://github.com/capitalone/fpe).  It follows the algorithm as outlined in the NIST specification as closely as possible, including naming.\n\nFPE can be used for data tokenization of sensitive data which is cryptographically reversible. This implementation does not provide any guarantees regarding PCI DSS or other validation.\n\nWhile all NIST standard test vectors pass, this package has not otherwise been extensively tested.\n\nAs of Python 3.7, the standard library's [int](https://docs.python.org/3/library/functions.html#int) package supports radices/bases up to 36. Therefore, this release supports a max base of 36, which can contain numeric digits 0-9 and lowercase alphabetic characters a-z.\n\nAs an enhancement to increase the radix range, the standard libary _base64_ package supports base 64 for string conversion. The Fiestel algorithum requires Integer conversion is well and the result would need to as performant as existing BigInt.\nAdded int2 function to convert to support radix 64 [0..9, a-z, A-Z, '-].\n\nThe cryptographic library used is [PyCryptodome](https://pypi.org/project/pycryptodome/) for AES encryption. FF3 uses a single-block with an IV of 0, which is effectively ECB mode. AES ECB is the only block cipher function which matches the requirement of the FF3 spec.\n\nThe domain size was revised in FF3-1 to radix<sup>minLen</sup> >= 1,000,000 and is represented by the constant `DOMAIN_MIN` in `ff3.py`. FF3-1 is in draft status and updated 56-bit test vectors are not yet available. Small domains can still be allowed using `allow_small_domain` boolean value in constructor.\n\nThe tweak is required in the initial `FF3Cipher` constructor, but can optionally be overriden in each `encrypt` and `decrypt` call. This is similar to passing an IV or nonce when creating an encryptor object.\n\n## Authors\n\nBrad Schoening & Puspendu Banerjee <puspendu.banerjee@gmail.com>\n\n## License\n\nThis project is licensed under the terms of the [Apache 2.0 license](https://www.apache.org/licenses/LICENSE-2.0).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PuspenduBanerjee/python-fpe",
    "keywords": "python-fpe,pyfpe_ff3,vaultless,tokenization",
    "license": "MIT license, Apache License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyFPE",
    "package_url": "https://pypi.org/project/pyFPE/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyFPE/",
    "project_urls": {
      "Homepage": "https://github.com/PuspenduBanerjee/python-fpe"
    },
    "release_url": "https://pypi.org/project/pyFPE/0.10.3/",
    "requires_dist": [
      "pycryptodome (==3.10.1)"
    ],
    "requires_python": ">=3.5",
    "summary": "Python FPE- Does Format preserving Encryption of values",
    "version": "0.10.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11493426,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef5a1dcb15a2601459374d49290ded76920c03ab76bc3d81f583e54954c8aaeb",
          "md5": "94ccff967d73ce01ae7dac4a16cc18fd",
          "sha256": "dfa4b5783cac054bd6c7e51ea651de9fa1b475e00f2b857d737b95e9e8639904"
        },
        "downloads": -1,
        "filename": "pyFPE-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94ccff967d73ce01ae7dac4a16cc18fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 18798,
        "upload_time": "2021-09-18T21:58:42",
        "upload_time_iso_8601": "2021-09-18T21:58:42.025966Z",
        "url": "https://files.pythonhosted.org/packages/ef/5a/1dcb15a2601459374d49290ded76920c03ab76bc3d81f583e54954c8aaeb/pyFPE-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbd8a08877bab9ba75cd6b95afdcc5c1ef1cc90667c378e89de42d4e2043fd1d",
          "md5": "e6e727190475806846efc82b609915e1",
          "sha256": "2da0ebd6a3562023c776c7b75a88304c687617c1d9a943648a77c3b4fab28b70"
        },
        "downloads": -1,
        "filename": "pyFPE-0.10.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6e727190475806846efc82b609915e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 18798,
        "upload_time": "2021-09-19T17:22:05",
        "upload_time_iso_8601": "2021-09-19T17:22:05.771721Z",
        "url": "https://files.pythonhosted.org/packages/cb/d8/a08877bab9ba75cd6b95afdcc5c1ef1cc90667c378e89de42d4e2043fd1d/pyFPE-0.10.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33552537dd4eaa725be96d12edabad70e45110bf88a6d8179bee5e530be9674e",
          "md5": "efae7ad69c215494785dcd17c3d1c4e4",
          "sha256": "510c170242dbb3e87d7da32c143ba4a87820c68ac4c63a9f94465b3874353440"
        },
        "downloads": -1,
        "filename": "pyFPE-0.10.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "efae7ad69c215494785dcd17c3d1c4e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 20618,
        "upload_time": "2021-09-19T20:49:07",
        "upload_time_iso_8601": "2021-09-19T20:49:07.979705Z",
        "url": "https://files.pythonhosted.org/packages/33/55/2537dd4eaa725be96d12edabad70e45110bf88a6d8179bee5e530be9674e/pyFPE-0.10.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33552537dd4eaa725be96d12edabad70e45110bf88a6d8179bee5e530be9674e",
        "md5": "efae7ad69c215494785dcd17c3d1c4e4",
        "sha256": "510c170242dbb3e87d7da32c143ba4a87820c68ac4c63a9f94465b3874353440"
      },
      "downloads": -1,
      "filename": "pyFPE-0.10.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efae7ad69c215494785dcd17c3d1c4e4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 20618,
      "upload_time": "2021-09-19T20:49:07",
      "upload_time_iso_8601": "2021-09-19T20:49:07.979705Z",
      "url": "https://files.pythonhosted.org/packages/33/55/2537dd4eaa725be96d12edabad70e45110bf88a6d8179bee5e530be9674e/pyFPE-0.10.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}