{
  "info": {
    "author": "Pelican Dev Team",
    "author_email": "authors@getpelican.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Framework :: Pelican",
      "Framework :: Pelican :: Plugins",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Image Process: A Plugin for Pelican\n\n[![Build Status](https://img.shields.io/github/workflow/status/pelican-plugins/image-process/build)](https://github.com/pelican-plugins/image-process/actions)\n[![PyPI Version](https://img.shields.io/pypi/v/pelican-image-process)](https://pypi.org/project/pelican-image-process/)\n![License](https://img.shields.io/badge/license-AGPL--3.0-blue)\n\n*Image Process* is a plugin for [Pelican](https://getpelican.com),\na static site generator written in Python.\n\n*Image Process* let you automate the processing of images based on their\nclass attribute. Use this plugin to minimize the overall page weight\nand to save you a trip to Gimp or Photoshop each time you include an\nimage in your post.\n\n*Image Process* also makes it easy to create responsive images using\nthe HTML5 `srcset` attribute and `<picture>` tag. It does this\nby generating multiple derivative images from one or more sources.\n\n*Image Process* will not overwrite your original images.\n\n## Installation\n\nThe easiest way to install *Image Process* is via Pip. This\nwill also install the required dependencies automatically.\n\n```sh\npython -m pip install pelican-image-process\n```\n\nYou will then need to configure your desired transformations (see *Usage*\nbelow) and add the appropriate class to images you want processed.\n\n## Usage\n\n*Image Process* scans your content for `<img>` tags with special\nclasses. It then maps the classes to a set of image processing\ninstructions, computes new images, and modifies HTML code according to\nthe instructions.\n\n### Define Transformations\n\nThe first step in using this module is to define some image\ntransformations in your Pelican configuration file. Transformations\nare defined in the `IMAGE_PROCESS` dictionary, mapping a\ntransformation name to a list of operations. There are three kinds of\ntransformations: image replacement, responsive image, and picture set.\n\n#### Image Replacement\n\nThe simplest image processing will replace the original image by a\nnew, transformed image computed from the original. You may use this,\nfor example, to ensure that all images are of the same size, or to\ncompute a thumbnail from a larger image:\n\n```python\nIMAGE_PROCESS = {\n    \"article-image\": [\"scale_in 300 300 True\"],\n    \"thumb\": [\"crop 0 0 50% 50%\", \"scale_out 150 150 True\", \"crop 0 0 150 150\"],\n}\n```\n\nThese transformations tell *Image Process* to transform the image\nreferred to by the `src` attribute of an `<img>` according to the\nlist of operations specified, and replace the `src` attribute with the\nURL of the transformed image.\n\nFor consistency with other types of transformations described\nbelow, there is an alternative syntax for the processing instructions:\n\n```python\nIMAGE_PROCESS = {\n    \"thumb\": {\n        \"type\": \"image\",\n        \"ops\": [\"crop 0 0 50% 50%\", \"scale_out 150 150 True\", \"crop 0 0 150 150\"],\n    },\n    \"article-image\": {\n        \"type\": \"image\",\n        \"ops\": [\"scale_in 300 300 True\"],\n    },\n}\n```\n\nTo apply image replacement to the images in your articles, you must add to them\nthe special class `image-process-<transform>`, in which `<transform>` is the ID\nof the transformation you wish to apply.\n\nLet's say you have defined the transformation described above. To get your\nimage processed, it needs to have the right CSS class:\n\n```html\n<img class=\"image-process-article-image\" src=\"/images/pelican.jpg\"/>\n```\n\nThis can be produced in Markdown with:\n\n```markdown\n![](/images/pelican.png){: .image-process-article-image}\n```\n\nIn reStructuredText, use the `:class:` attribute of the `image` or\nthe `figure` directive:\n\n```rst\n.. image:: /images/pelican.png\n   :class: image-process-article-image\n```\n\n```rst\n.. figure:: /images/pelican.png\n    :class: image-process-article-image\n```\n\n⚠️ **Warning:**\n\n> The reStructuredText reader will convert underscores (`_`) to\n> dashes (`-`) in class names. To make sure everything runs\n> smoothly, do not use underscores in your transformation names.\n\n\n#### Responsive Images\n\nYou can use *Image Process* to automatically generate a set of\nimages that will be selected for display by browsers according to the\nviewport width or according to the device resolution. To accomplish\nthis, *Image Process* will add a [`srcset` attribute](https://caniuse.com/srcset)\n(and maybe a `media` and a `sizes` attribute) to the `<img>` tag.\n\nHTML5 supports two types of responsive image sets. The first one is\ndevice-pixel-ratio-based, selecting higher resolution images for higher\nresolution devices; the second one is viewport-based, selecting\nimages according to the viewport size. You can read more about\n[HTML5 responsive images][] for a gentle introduction to the `srcset`\nand `<picture>` syntaxes.\n\nTo tell *Image Process* to generate a responsive image, add a\n`responsive-image` transformation to your your `IMAGE_PROCESS`\ndictionary, with the following syntax:\n\n```python\nIMAGE_PROCESS = {\n    \"crisp\": {\n        \"type\": \"responsive-image\",\n        \"srcset\": [\n            (\"1x\", [\"scale_in 800 600 True\"]),\n            (\"2x\", [\"scale_in 1600 1200 True\"]),\n            (\"4x\", [\"scale_in 3200 2400 True\"]),\n        ],\n        \"default\": \"1x\",\n    },\n    \"large-photo\": {\n        \"type\": \"responsive-image\",\n        \"sizes\": (\n            \"(min-width: 1200px) 800px, \"\n            \"(min-width: 992px) 650px, \"\n            \"(min-width: 768px) 718px, \"\n            \"100vw\"\n        ),\n        \"srcset\": [\n            (\"600w\", [\"scale_in 600 450 True\"]),\n            (\"800w\", [\"scale_in 800 600 True\"]),\n            (\"1600w\", [\"scale_in 1600 1200 True\"]),\n        ],\n        \"default\": \"800w\",\n    },\n}\n```\n\nThe `crisp` transformation is an example of a transformation\nenabling device-pixel-ratio-based selection. The `srcset` is a list\nof tuples, each tuple containing the image description (`\"1x\"`,\n`\"2x\"`, etc.) and the list of operations to generate the derivative\nimage from the original image (the original image is the value of the\n`src` attribute of the `<img>`). Image descriptions are hints\nabout the resolution of the associated image and must have the suffix\n`x`. The `default` setting specifies the image to use to replace the `src`\nattribute of the image.  This is the image that will be displayed by\nbrowsers that do not support the `srcset` syntax.\n\nThe `large-photo` transformation is an example of a transformation\nenabling viewport-based selection. The `sizes` contains a rule to\ncompute the width of the displayed image from the width of the\nviewport. Once the browser knows the image width, it will select an\nimage source from the `srcset`. The `srcset` is a list of tuple,\neach tuple containing the image description (`\"600w\"`, `\"800w\"`,\netc.) and the list of operations to generate the derivative image from\nthe original image (the original image is the value of the `src`\nattribute of the `<img>`). Image descriptions are hints about the\nwidth in pixels of the associated image and must have the suffix\n`w`. The `default` setting specifies the image to use to replace the `src`\nattribute of the image.  This is the image that will be displayed by\nbrowsers that do not support the `srcset` syntax.\n\nIn the two examples above, the `default` setting is a string referring to\none of the images in the `srcset`. However, the `default` value\ncould also be a list of operations to generate a different derivative\nimage.\n\nTo make the images in your article responsive, you must add to them the\nspecial class `image-process-<transform>`, in which `<transform>` is the ID of the\ntransformation you wish to apply, exactly like you would do for the\nimage replacement case, described above.\n\nSo, in HTML it should look like this:\n\n```html\n<img class=\"image-process-large-photo\" src=\"/images/pelican.jpg\"/>\n```\n\nWhich can be produced in Markdown with:\n\n```markdown\n![](/images/pelican.jpg){: .image-process-large-photo}\n```\n\nIn reStructuredText, use the `:class:` attribute of the `image` or\nthe `figure` directive:\n\n```rst\n.. image:: /images/pelican.jpg\n   :class: image-process-large-photo\n```\n\n```rst\n.. figure:: /images/pelican.jpg\n    :class: image-process-large-photo\n```\n\n#### Picture Set\n\n*Image Process* can be used to generate the images used by a\n`<picture>` tag. The `<picture>` syntax allows for more\nflexibility in providing a choice of image to the browser.\nAgain, you can read more about [HTML5 responsive images][] for a\ngentle introduction to the `srcset` and `<picture>` syntaxes.\n\nTo tell *Image Process* to generate the images for a `<picture>`,\nadd a `picture` entry to your `IMAGE_PROCESS` dictionary with the\nfollowing syntax:\n\n```python\nIMAGE_PROCESS = {\n    \"example-pict\": {\n        \"type\": \"picture\",\n        \"sources\": [\n            {\n                \"name\": \"default\",\n                \"media\": \"(min-width: 640px)\",\n                \"srcset\": [\n                    (\"640w\", [\"scale_in 640 480 True\"]),\n                    (\"1024w\", [\"scale_in 1024 683 True\"]),\n                    (\"1600w\", [\"scale_in 1600 1200 True\"]),\n                ],\n                \"sizes\": \"100vw\",\n            },\n            {\n                \"name\": \"source-1\",\n                \"srcset\": [\n                    (\"1x\", [\"crop 100 100 200 200\"]),\n                    (\"2x\", [\"crop 100 100 300 300\"]),\n                ]\n            },\n        ],\n        \"default\": (\"default\", \"640w\"),\n    },\n}\n```\n\nEach of the `sources` entries is very similar to the `responsive\nimage` describe above. Here, each source must have a `name`, which\nwill be used to find the URL of the original image for this source in\nyour article. The source may also have a `media`, which contains a\nrule used by the browser to select the active source. The `default`\nsetting specifies the image to use to replace the `src` attribute of\nthe `<img>` inside the `<picture>`.  This is the image that will be\ndisplayed by browsers that do not support the `<picture>` syntax. In\nthis example, it will use the image `640w` from the source `default`.\nA list of operations could have been specified instead of `640w`.\n\nTo generate a responsive `<picture>` for the images in your\narticles, you must add to your article a pseudo `<picture>` tag that\nlooks like this:\n\n```html\n<picture>\n    <source class=\"source-1\" src=\"/images/pelican-closeup.jpg\"></source>\n    <img class=\"image-process-example-pict\" src=\"/images/pelican.jpg\"/>\n</picture>\n```\n\nEach `<source>` tag maps a source name (the `class` attribute) to\na file (the `src` attribute). The `<img>` must have the special\nclass `image-process-` followed by the name of the transformation\nyou wish to apply. The file referenced by the `src` attribute of the\n`<img>` will be used as the special `default` source in your\ntransformation definition.\n\nYou can't produce this with pure Markdown and must instead resort to raw HTML.\n\nIn reStructuredText, however, you can also use the `figure` directive\nto generate a `<picture>`. The figure image file will be used as the\nspecial `default` source; other sources must be added in the legend\nsection of the `figure` as `image` directives. The figure class must\nbe `image-process-` followed by the name of the transformation you\nwish to apply, while the other images must have two classes:\n`image-process` and the name of the source they provide an image for:\n\n```rst\n.. figure:: /images/pelican.jpg\n   :class: image-process-example-pict\n\n    Test picture\n\n    .. image:: /images/pelican-closeup.jpg\n       :class: image-process source-1\n```\n\nThe images in the legend section that are used as source for the\n`<picture>` will be removed from the image legend, so that they do\nnot appear in your final article.\n\n### Transformations\n\nAvailable operations for transformations are:\n\n* `crop <top> <left> <right> <bottom>`:\n\n    Crop the image to the box (`<left>`, `<top>`)-(`<right>`, `<bottom>`). Values\n    can be absolute (a number) or relative to the size of the image (a\n    number followed by a percent sign `%`).\n\n* `flip_horizontal`:\n\n    Flip the image horizontally.\n\n* `flip_vertical`:\n\n    Flip the image vertically.\n\n* `grayscale`:\n\n    Convert the image to grayscale.\n\n* `resize <width> <height>`:\n\n    Resize the image. This operation does *not* preserve the image aspect\n    ratio. Values can be absolute (a number) or relative to the\n    size of the image (a number followed by a percent sign `%`).\n\n* `rotate <degrees>`:\n\n    Rotate the image.\n\n* `scale_in <width> <height> <upscale>`:\n\n    Resize the image. This operation preserves the image aspect ratio\n    and the resulting image will be no larger than `<width>` x\n    `<height>`. Values can be absolute (a number) or relative to the\n    size of the image (a number followed by a percent sign `%`).\n    If `<upscale>` is `False`, smaller images will not be enlarged.\n\n* `scale_out <width> <height> <upscale>`:\n\n    Resize the image. This operation preserves the image aspect ratio\n    and the resulting image will be no smaller than `<width>` x\n    `<height>`. Values can be absolute (a number) or relative to the\n    size of the image (a number followed by a percent sign `%`).\n    If `<upscale>` is `False`, smaller images will not be enlarged.\n\n* `blur`:\n\n    Apply the `pillow.ImageFilter.BLUR` filter to the image.\n\n* `contour`:\n\n    Apply the `pillow.ImageFilter.CONTOUR` filter to the image.\n\n* `detail`:\n\n    Apply the `pillow.ImageFilter.DETAIL` filter to the image.\n\n* `edge_enhance`:\n\n    Apply the `pillow.ImageFilter.EDGE_ENHANCE` filter to the image.\n\n* `edge_enhance_more`:\n\n    Apply the `pillow.ImageFilter.EDGE_ENHANCE_MORE` filter to the image.\n\n* `emboss`:\n\n    Apply the `pillow.ImageFilter.EMBOSS` filter to the image.\n\n* `find_edges`:\n\n    Apply the `pillow.ImageFilter.FIND_EDGES` filter to the image.\n\n* `smooth`:\n\n    Apply the `pillow.ImageFilter.SMOOTH filter` to the image.\n\n* `smooth_more`:\n\n    Apply the `pillow.ImageFilter.SMOOTH_MORE` filter to the image.\n\n* `sharpen`:\n\n    Apply the `pillow.ImageFilter.SHARPEN` filter to the image.\n\nYou can also define your own operations; the only requirement is that\nyour operation should be a callable object expecting a `pillow.Image` as\nits first parameter and it should return the transformed image:\n\n```python\ndef crop_face(image):\n    \"\"\"Detect face in image and crop around it.\"\"\"\n    # Fancy algorithm.\n    return image\n\nIMAGE_PROCESS = {\n    \"face-thumbnail\": [crop_face, \"scale_out 150 150 True\"]\n}\n```\n\n### Additional Settings\n\n#### Destination Directory\n\nBy default, the new images will be stored in a directory named\n`derivative/<TRANSFORMATION_NAME>` in the output folder at\nthe same location as the original image.\nFor example, if the original image is located in\nthe `content/images` folder, the computed images will be stored\nin `output/images/derivative/<TRANSFORMATION_NAME>`.\nAll the transformations are done in the output directory in order\nto avoid confusion with the source files or if we test multiple\ntransformations. You can replace `derivative` by something else using\nthe `IMAGE_PROCESS_DIR` setting in your Pelican settings file:\n\n```python\nIMAGE_PROCESS_DIR = \"derivees\"\n```\n\n#### Force Image Processing\n\nIf the transformed image already exists and is newer than the original\nimage, the plugin assumes that it should not re-compute it again. You\ncan force the plugin to re-compute all images by setting\n`IMAGE_PROCESS_FORCE` to `True` in your Pelican configuration file.\n\n```python\nIMAGE_PROCESS_FORCE = True\n```\n\n#### Selecting a HTML Parser\n\nYou may select the HTML parser which is used. The default is the built-in\n`html.parser` but you may also select `html5lib` or `lxml` by setting\n`IMAGE_PROCESS_PARSER` in your Pelican settings file. For example:\n\n```python\nIMAGE_PROCESS_PARSER = \"html5lib\"\n```\n\nFor details, refer to the [BeautifulSoup documentation on parsers][].\n\n#### File Encoding\n\nYou may select a different file encoding to be used by BeautifulSoup as it\nopens your files. The default is `utf-8`.\n\n```python\nIMAGE_PROCESS_ENCODING = \"utf-8\"\n```\n\n#### Copying EXIF Tags\n\nYou may ask _Image Process_ to copy the EXIF tags from your original image to\nthe transformed images. You must have [exiftool](https://exiftool.org/) installed.\n\n```python\nIMAGE_PROCESS_COPY_EXIF_TAGS = True\n```\n\n## Known Issues\n\n* Pillow, when resizing animated GIF files, [does not return an animated file](https://github.com/pelican-plugins/image-process/issues/11).\n\n## Contributing\n\nContributions are welcome and much appreciated. Every little bit helps. You can contribute by improving the documentation, adding missing features, and fixing bugs. You can also help out by reviewing and commenting on [existing issues][].\n\nTo start contributing to this plugin, review the [Contributing to Pelican][] documentation, beginning with the **Contributing Code** section.\n\n[existing issues]: https://github.com/pelican-plugins/image-process/issues\n[Contributing to Pelican]: https://docs.getpelican.com/en/latest/contribute.html\n\n### Regenerating Test Images\n\nIf you need to regenerate the transformed images used by the test suite, there\nis a helper function to do this for you. From the Python REPL:\n\n```pycon\n>>> from pelican.plugins.image_process.test_image_process import generate_test_images\n>>> generate_test_images()\n36 test images generated!\n```\n\n## License\n\nThis project is licensed under the [AGPL-3.0 license](http://www.gnu.org/licenses/agpl-3.0.html).\n\n[Pelican image](https://web.archive.org/web/20090505115626/http://www.pdphoto.org/PictureDetail.php?mat=&pg=5726) in test data by Jon Sullivan. Published under a [Creative Commons Public Domain license](https://creativecommons.org/licenses/publicdomain/).\n\n\n[HTML5 responsive images]: https://www.smashingmagazine.com/2014/05/14/responsive-images-done-right-guide-picture-srcset/\n[BeautifulSoup documentation on parsers]: https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pelican-plugins/image-process",
    "keywords": "pelican,plugin,image,responsive,optimization",
    "license": "AGPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pelican-image-process",
    "package_url": "https://pypi.org/project/pelican-image-process/",
    "platform": null,
    "project_url": "https://pypi.org/project/pelican-image-process/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pelican-plugins/image-process/issues",
      "Changelog": "https://github.com/pelican-plugins/image-process/blob/main/CHANGELOG.md",
      "Documentation": "https://docs.getpelican.com",
      "Funding": "https://donate.getpelican.com/",
      "Homepage": "https://github.com/pelican-plugins/image-process",
      "Repository": "https://github.com/pelican-plugins/image-process"
    },
    "release_url": "https://pypi.org/project/pelican-image-process/3.0.3/",
    "requires_dist": [
      "pelican (>=3,<5)",
      "markdown (>=3.2,<4.0); extra == \"markdown\"",
      "beautifulsoup4 (>=4.9,<5.0)",
      "six (>=1.15.0,<2.0.0)",
      "Pillow (>=9.1,<11)",
      "lxml (>=4.6,<5.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Pelican plugin that automates image processing.",
    "version": "3.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14473228,
  "releases": {
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0b130e24c0fb8a676107e397d9b164b89d0ef8bda5e770076c8bf376e77ef4a",
          "md5": "5586966fb62bff200f900bec5db7c6ec",
          "sha256": "2b26e91853b84a711b67f005f26fab49b29854af00493d1f00b1f40bb10a6b0c"
        },
        "downloads": -1,
        "filename": "pelican_image_process-1.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5586966fb62bff200f900bec5db7c6ec",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24005,
        "upload_time": "2019-10-26T15:50:41",
        "upload_time_iso_8601": "2019-10-26T15:50:41.682928Z",
        "url": "https://files.pythonhosted.org/packages/a0/b1/30e24c0fb8a676107e397d9b164b89d0ef8bda5e770076c8bf376e77ef4a/pelican_image_process-1.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8cc74564faa2d66cf1f677c139ad1f95d86a0171fd1bd5ce6dd70e3cc3c9e5a",
          "md5": "72192f4fda42dbafa805e7be5e1d4be7",
          "sha256": "e2c5323904f21b918fe757fd3dc5591f4ad7d2d7b1aaaef87ea4cd7ad5a19b25"
        },
        "downloads": -1,
        "filename": "pelican_image_process-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "72192f4fda42dbafa805e7be5e1d4be7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30018,
        "upload_time": "2019-10-26T15:50:44",
        "upload_time_iso_8601": "2019-10-26T15:50:44.666888Z",
        "url": "https://files.pythonhosted.org/packages/b8/cc/74564faa2d66cf1f677c139ad1f95d86a0171fd1bd5ce6dd70e3cc3c9e5a/pelican_image_process-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68d52c0f534aeb6c9d486550a8abfb52717b00795e8a25e980c6d635234549b7",
          "md5": "7a2d380551af6ff7c6c804482ad02d86",
          "sha256": "0451daf2a1bd006334c0fad415f508b77c9b84842a486b26b9b29f22c6dffcb6"
        },
        "downloads": -1,
        "filename": "pelican_image_process-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a2d380551af6ff7c6c804482ad02d86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 3050709,
        "upload_time": "2020-12-04T14:16:41",
        "upload_time_iso_8601": "2020-12-04T14:16:41.068081Z",
        "url": "https://files.pythonhosted.org/packages/68/d5/2c0f534aeb6c9d486550a8abfb52717b00795e8a25e980c6d635234549b7/pelican_image_process-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5b95eec82031c25e48d414da7a9a34e5d7d1a253c57e5d96e8e3a515c46b07e",
          "md5": "1bee423a49d5314a6638fac2d38879e1",
          "sha256": "e794e6e16aa86d8f016f4b6473c1ab6845caf47ece976e9e0084b5a92ab5d4f7"
        },
        "downloads": -1,
        "filename": "pelican-image-process-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1bee423a49d5314a6638fac2d38879e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 3055383,
        "upload_time": "2020-12-04T14:16:25",
        "upload_time_iso_8601": "2020-12-04T14:16:25.269900Z",
        "url": "https://files.pythonhosted.org/packages/c5/b9/5eec82031c25e48d414da7a9a34e5d7d1a253c57e5d96e8e3a515c46b07e/pelican-image-process-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4307c2add35b52cf80fb45a0beca835add1d568c80f6cebdac35d53cdfd0329b",
          "md5": "51a44850c89105b09a8b3491b82700ba",
          "sha256": "36f23efd7b187eb5d31a18cb783fbec851dae78726dd4d1b2fb06920dfe6fd2d"
        },
        "downloads": -1,
        "filename": "pelican_image_process-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51a44850c89105b09a8b3491b82700ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 3267314,
        "upload_time": "2021-03-11T18:35:07",
        "upload_time_iso_8601": "2021-03-11T18:35:07.773442Z",
        "url": "https://files.pythonhosted.org/packages/43/07/c2add35b52cf80fb45a0beca835add1d568c80f6cebdac35d53cdfd0329b/pelican_image_process-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2b74ad185b676b2c90a760369d9972194821afc91dc43fd813fc744faea1c88",
          "md5": "6157a7d4b02792ef5ea870f38427f492",
          "sha256": "e9288007730d4ad2e27e9c3a73f21224413bb27fda95038a8b8b27f5ca28ef2a"
        },
        "downloads": -1,
        "filename": "pelican-image-process-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6157a7d4b02792ef5ea870f38427f492",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 3271174,
        "upload_time": "2021-03-11T18:35:06",
        "upload_time_iso_8601": "2021-03-11T18:35:06.115103Z",
        "url": "https://files.pythonhosted.org/packages/a2/b7/4ad185b676b2c90a760369d9972194821afc91dc43fd813fc744faea1c88/pelican-image-process-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b84fceefe51e9eee5c76a92c13642d8f50e49d45df828b4f01579a3a1f6f5ec",
          "md5": "1b7330aecb1f79115f8fe6d0f212420a",
          "sha256": "4cfbbbf665cfeb43785d8af6ecd248f286568e0499fca27fdf1e5e4c37322889"
        },
        "downloads": -1,
        "filename": "pelican_image_process-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b7330aecb1f79115f8fe6d0f212420a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2,<4.0",
        "size": 3267330,
        "upload_time": "2021-05-07T16:03:46",
        "upload_time_iso_8601": "2021-05-07T16:03:46.877332Z",
        "url": "https://files.pythonhosted.org/packages/4b/84/fceefe51e9eee5c76a92c13642d8f50e49d45df828b4f01579a3a1f6f5ec/pelican_image_process-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0c23bed43498a523c5ce1bb4b3b040052e98ddccf6d34dc3e11f4bb6a193109",
          "md5": "050e282cb3bee5cbae95832bad8fbc88",
          "sha256": "084075d70fd582011fadf2eca08df5ea44327a1ff84ce20ed58d8c5c084eef9f"
        },
        "downloads": -1,
        "filename": "pelican-image-process-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "050e282cb3bee5cbae95832bad8fbc88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<4.0",
        "size": 3271207,
        "upload_time": "2021-05-07T16:03:44",
        "upload_time_iso_8601": "2021-05-07T16:03:44.132244Z",
        "url": "https://files.pythonhosted.org/packages/a0/c2/3bed43498a523c5ce1bb4b3b040052e98ddccf6d34dc3e11f4bb6a193109/pelican-image-process-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "504cbe4f2e529924239ed0ed008e6321258f7ae6ddf2a872ac3547253266b6fc",
          "md5": "b0de02cb81a532c99fd760043fa8cb54",
          "sha256": "8cb4f852f8f2cede9abadf80ff1743db5e7188173bf8870de27d5d93fff53b17"
        },
        "downloads": -1,
        "filename": "pelican_image_process-2.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0de02cb81a532c99fd760043fa8cb54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2,<4.0",
        "size": 3267340,
        "upload_time": "2021-05-28T15:43:19",
        "upload_time_iso_8601": "2021-05-28T15:43:19.400911Z",
        "url": "https://files.pythonhosted.org/packages/50/4c/be4f2e529924239ed0ed008e6321258f7ae6ddf2a872ac3547253266b6fc/pelican_image_process-2.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0d20c7bc1a54ddbccbd112f89bded7cbbd373cf6ec92c3ce1608d4628ba3e1f",
          "md5": "1ec158eb601b3b3a19b84a7e8f5957a0",
          "sha256": "fc012b3e456666a5c284bcd0652648480c026c5e4ac46849c3f34e6cf0de7ee5"
        },
        "downloads": -1,
        "filename": "pelican-image-process-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1ec158eb601b3b3a19b84a7e8f5957a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<4.0",
        "size": 3271201,
        "upload_time": "2021-05-28T15:43:17",
        "upload_time_iso_8601": "2021-05-28T15:43:17.962351Z",
        "url": "https://files.pythonhosted.org/packages/d0/d2/0c7bc1a54ddbccbd112f89bded7cbbd373cf6ec92c3ce1608d4628ba3e1f/pelican-image-process-2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c38cce6ed9842355de66ec8153396e27a3da4fa8c8529f7ad033bcd6b200665c",
          "md5": "de49d427af657d949a088b9806da4c54",
          "sha256": "37d150238827e71c4d8c797d744d0799b7deb42f82abafc40d55239e3a943ced"
        },
        "downloads": -1,
        "filename": "pelican_image_process-2.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de49d427af657d949a088b9806da4c54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2,<4.0",
        "size": 3592869,
        "upload_time": "2021-07-09T13:46:49",
        "upload_time_iso_8601": "2021-07-09T13:46:49.498862Z",
        "url": "https://files.pythonhosted.org/packages/c3/8c/ce6ed9842355de66ec8153396e27a3da4fa8c8529f7ad033bcd6b200665c/pelican_image_process-2.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4bf90f7bb95c08d3f09000156db17fdea7b273d42d42c5c54fb71544306bbcb",
          "md5": "38453d473905dcedfe0fc4269e250745",
          "sha256": "a3a807b12ff91bdace785bbacf7ba5bc08906ca7ec0d2089cf59cfc2b0339008"
        },
        "downloads": -1,
        "filename": "pelican-image-process-2.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "38453d473905dcedfe0fc4269e250745",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<4.0",
        "size": 3596657,
        "upload_time": "2021-07-09T13:46:47",
        "upload_time_iso_8601": "2021-07-09T13:46:47.934627Z",
        "url": "https://files.pythonhosted.org/packages/d4/bf/90f7bb95c08d3f09000156db17fdea7b273d42d42c5c54fb71544306bbcb/pelican-image-process-2.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46d752b38ea49e3e05de12dff4a7c7e6dfef89369d3129117bb9eccecb8f6d88",
          "md5": "04482dc81c6dcd13f551356260e4c626",
          "sha256": "6c0153494fc3c77552a57ec50d6dcff100fabfd42b799bbe37be624dccc2a90f"
        },
        "downloads": -1,
        "filename": "pelican_image_process-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04482dc81c6dcd13f551356260e4c626",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 3493190,
        "upload_time": "2022-07-10T19:04:41",
        "upload_time_iso_8601": "2022-07-10T19:04:41.006894Z",
        "url": "https://files.pythonhosted.org/packages/46/d7/52b38ea49e3e05de12dff4a7c7e6dfef89369d3129117bb9eccecb8f6d88/pelican_image_process-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95da35de03be340d98dc6a136a843ae1abecae024389a5a1a723dddd84eaecb4",
          "md5": "57b96ac3749d6f78da54dbcbded5eb20",
          "sha256": "9a38ec7acfe2e390da75d357f9cb5ba2e1610f8fda667266caaae549d3961184"
        },
        "downloads": -1,
        "filename": "pelican-image-process-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "57b96ac3749d6f78da54dbcbded5eb20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 3496439,
        "upload_time": "2022-07-10T19:04:38",
        "upload_time_iso_8601": "2022-07-10T19:04:38.781437Z",
        "url": "https://files.pythonhosted.org/packages/95/da/35de03be340d98dc6a136a843ae1abecae024389a5a1a723dddd84eaecb4/pelican-image-process-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddf4434088912a3990a5d31ccae783a18cd63eafc2f401b96fc8fde668671f7a",
          "md5": "2322f3f726aaf990f2412c89c2d0b41c",
          "sha256": "5af9869161ca882e57fdb96df7b981607de92f98b1359ac82891637f8c38dca2"
        },
        "downloads": -1,
        "filename": "pelican_image_process-3.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2322f3f726aaf990f2412c89c2d0b41c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 3493202,
        "upload_time": "2022-07-11T10:55:48",
        "upload_time_iso_8601": "2022-07-11T10:55:48.539817Z",
        "url": "https://files.pythonhosted.org/packages/dd/f4/434088912a3990a5d31ccae783a18cd63eafc2f401b96fc8fde668671f7a/pelican_image_process-3.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "008fbe6cb36122b5eea56a953529f17a76cd7b87b7468d3ddc639e04a5c985f8",
          "md5": "32f25969e6be1394d294cea211176aa0",
          "sha256": "7dc350af18d76c9d2d200d70a9f0b15827b4d6339ec2004f042a12778d226749"
        },
        "downloads": -1,
        "filename": "pelican-image-process-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "32f25969e6be1394d294cea211176aa0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 3496457,
        "upload_time": "2022-07-11T10:55:46",
        "upload_time_iso_8601": "2022-07-11T10:55:46.291792Z",
        "url": "https://files.pythonhosted.org/packages/00/8f/be6cb36122b5eea56a953529f17a76cd7b87b7468d3ddc639e04a5c985f8/pelican-image-process-3.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eeb817f80159774911ad100fab382767089cdd365d6246b3ca692750a3bd4c7d",
          "md5": "9ff917e9702c002f9f1524f87fbb0039",
          "sha256": "16842592a6858764b4723f9f6f5d926289f3377823081c4a52b168224d9ff1e8"
        },
        "downloads": -1,
        "filename": "pelican_image_process-3.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ff917e9702c002f9f1524f87fbb0039",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 3493205,
        "upload_time": "2022-07-11T15:42:04",
        "upload_time_iso_8601": "2022-07-11T15:42:04.850906Z",
        "url": "https://files.pythonhosted.org/packages/ee/b8/17f80159774911ad100fab382767089cdd365d6246b3ca692750a3bd4c7d/pelican_image_process-3.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96098a22decb8b2e981eadbefeda891033df845538d786f8ab7022ab65eeb79d",
          "md5": "f63f2f5656ae47aabfdc79f13723c135",
          "sha256": "5e68b68b1fbcdf8510084e6a6639356bb00d1ad4a5423dd5cc16589b67d5dab9"
        },
        "downloads": -1,
        "filename": "pelican-image-process-3.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f63f2f5656ae47aabfdc79f13723c135",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 3496488,
        "upload_time": "2022-07-11T15:42:02",
        "upload_time_iso_8601": "2022-07-11T15:42:02.220377Z",
        "url": "https://files.pythonhosted.org/packages/96/09/8a22decb8b2e981eadbefeda891033df845538d786f8ab7022ab65eeb79d/pelican-image-process-3.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0098306a23fa38bba490a62f7e26e62a10318e503bd3a895367167ac87a998ea",
          "md5": "bead70fc2d2422ce62a3fb9c970ce4df",
          "sha256": "3f15742bbe18defe5e9921282185ebfed7c51b65bec7e5be6fb9c88169423cb4"
        },
        "downloads": -1,
        "filename": "pelican_image_process-3.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bead70fc2d2422ce62a3fb9c970ce4df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 3493310,
        "upload_time": "2022-07-18T20:06:06",
        "upload_time_iso_8601": "2022-07-18T20:06:06.629953Z",
        "url": "https://files.pythonhosted.org/packages/00/98/306a23fa38bba490a62f7e26e62a10318e503bd3a895367167ac87a998ea/pelican_image_process-3.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95f587f61f198343e1cbedfbe581c86fba588299739b39f1b8e273f4ca3c0efa",
          "md5": "a34c299ed6a440fe88aa497933a9ece3",
          "sha256": "066c251f30ccb7bc1f01b144efc55f77c12eced6fc7815ec2db38c08dacf8f55"
        },
        "downloads": -1,
        "filename": "pelican-image-process-3.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a34c299ed6a440fe88aa497933a9ece3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 3496555,
        "upload_time": "2022-07-18T20:06:04",
        "upload_time_iso_8601": "2022-07-18T20:06:04.700403Z",
        "url": "https://files.pythonhosted.org/packages/95/f5/87f61f198343e1cbedfbe581c86fba588299739b39f1b8e273f4ca3c0efa/pelican-image-process-3.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0098306a23fa38bba490a62f7e26e62a10318e503bd3a895367167ac87a998ea",
        "md5": "bead70fc2d2422ce62a3fb9c970ce4df",
        "sha256": "3f15742bbe18defe5e9921282185ebfed7c51b65bec7e5be6fb9c88169423cb4"
      },
      "downloads": -1,
      "filename": "pelican_image_process-3.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bead70fc2d2422ce62a3fb9c970ce4df",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 3493310,
      "upload_time": "2022-07-18T20:06:06",
      "upload_time_iso_8601": "2022-07-18T20:06:06.629953Z",
      "url": "https://files.pythonhosted.org/packages/00/98/306a23fa38bba490a62f7e26e62a10318e503bd3a895367167ac87a998ea/pelican_image_process-3.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95f587f61f198343e1cbedfbe581c86fba588299739b39f1b8e273f4ca3c0efa",
        "md5": "a34c299ed6a440fe88aa497933a9ece3",
        "sha256": "066c251f30ccb7bc1f01b144efc55f77c12eced6fc7815ec2db38c08dacf8f55"
      },
      "downloads": -1,
      "filename": "pelican-image-process-3.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a34c299ed6a440fe88aa497933a9ece3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 3496555,
      "upload_time": "2022-07-18T20:06:04",
      "upload_time_iso_8601": "2022-07-18T20:06:04.700403Z",
      "url": "https://files.pythonhosted.org/packages/95/f5/87f61f198343e1cbedfbe581c86fba588299739b39f1b8e273f4ca3c0efa/pelican-image-process-3.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}