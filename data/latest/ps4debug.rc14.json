{
  "info": {
    "author": "Jay",
    "author_email": "0jaybae0@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyPS4debug\nFully asynchronous ps4debug implementation written in python.\n\n\n## Install (pip)\n\n```\npip install ps4debug\n```\n\n## Usage\n\nA full example can be found at the end of this section!\n\n### Basics\n1. Running asynchronous code\n\n    ```python\n    import asyncio\n\n    async def main():\n        # Your asynchronous code goes here!\n        ...\n\n    if __name__ == '__main__':\n        loop = asyncio.new_event_loop()\n        loop.run_until_complete(main())\n    ```\n\n1. Sending the PS4Debug\n\n    ```python\n    from ps4debug import PS4Debug\n\n    if PS4Debug.find_ps4() is None:\n        hostname = 'ip address or hostname'\n        await PS4Debug.send_ps4debug(hostname, port=9020)\n    ```\n\n1. Creating a PS4Debug instance\n\n    Creating a PS4Debug instance does **not** connect to the PlayStation 4 yet.\n    ```python\n    from ps4debug import PS4Debug, PS4DebugException\n\n    try:\n        # Omitting the first parameter will cause it to search the network for a PlayStation 4 system.\n        ps4 = PS4Debug()\n    except PS4DebugException:\n        # No PlayStation 4 running ps4debug was found.\n        hostname = 'ip address or hostname'\n        # Either ps4debug is not running.\n        await PS4Debug.send_ps4debug('ip address or hostname', port=9020)\n        # Or it was not reachable in this network. You should pass a hostname in that case.\n        ps4 = PS4Debug('ip address or hostname')\n    ```\n\n1. Use the process list\n\n    ```python\n    from ps4debug import PS4Debug\n\n    ps4 = PS4Debug()\n\n    processes = await ps4.get_processes()\n\n    for p in processes:\n        print(p.name, p.pid)\n\n    # You may search for a specific name and get its process id (pid):\n    process_name = 'eboot.bin'\n    pid = next((p.pid for p in processes if p.name == process_name), None)\n\n    if pid is None:\n       print(process_name, 'is not running!')\n    ```\n\n1. Using a factory function\n\n    Using the above snippets we can create a nice factory function to handle creating new PS4Debug objects.\n    ```python\n    import asyncio\n    from ps4debug import PS4Debug\n\n\n    async def get_ps4(hostname: str | None) -> tuple[PS4Debug, int]:\n        ps4 = PS4Debug(hostname)\n        processes = await ps4.get_processes()\n        pid = next((p.pid for p in processes if p.name == 'eboot.bin'), None)\n        return ps4, pid\n\n\n    async def main():\n        ps4, eboot_pid = await get_ps4('10.0.0.0')\n        print('hostname:', ps4.pool.host, 'eboot: ', eboot_pid)\n\n\n    if __name__ == '__main__':\n        loop = asyncio.new_event_loop()\n        loop.run_until_complete(main())\n    ```\n\n1. Reading memory\n\n    You can use the `read_*` functions to read memory from a process' memory.\n\n    1. Raw memory\n\n        Raw memory is returned as a mutable `bytearray`.<br />\n        This way you can manipulate it directly like you would an array and parse it yourself.\n        ```python\n        data = await ps4.read_memory(pid, 0xCA88888, length=32)\n        ```\n\n    1. Primitive types\n\n        Primitive data types can be easily read just by passing the process id (pid) and the address.\n        ```python\n        data = await ps4.read_bool(pid, address)\n        data = await ps4.read_char(pid, address)\n        data = await ps4.read_byte(pid, address)\n        data = await ps4.read_ubyte(pid, address)\n        data = await ps4.read_int16(pid, address)\n        data = await ps4.read_uint16(pid, address)\n        data = await ps4.read_int32(pid, address)\n        data = await ps4.read_uint32(pid, address)\n        data = await ps4.read_int64(pid, address)\n        data = await ps4.read_uint64(pid, address)\n        data = await ps4.read_float(pid, address)\n        data = await ps4.read_double(pid, address)\n        ```\n\n    1. Structure\n\n        For structures you can pass either a format string, a struct.Struct instance or use construct's Struct.<br />\n        Here we are retrieving two floats. See the [Python docs](https://docs.python.org/3/library/struct.html#format-strings) for more information on format strings.\n        ```python\n        f1, f2 = await ps4.read_struct(pid, 0xCC001234, structure='<2f')\n        ```\n\n    1. String\n\n        You can specify the encoding by passing the python charset name in the call.<br />\n        By default `ascii` is used and the string is null-terminated.\n        ```python\n        data = await ps4.read_text(pid, 0xABCDEF, encoding='utf8')\n        ```\n        If a null-terminated string is not what you are looking for, you can also pass a `length` parameter to set a fix length to be read.\n        ```python\n        data = await ps4.read_text(pid, 0xABCDEF, length=32)\n        ```\n\n1. Writing to memory\n\n    You can use the `write_*` functions to write to the process' memory.\n\n    1. Raw memory\n\n        You can pass any `bytes` or `bytearray` sequence as parameter.\n        ```python\n        status = await ps4.write_memory(pid, 0xCA88888, b'\\xC3\\xCC\\x90')\n        ```\n\n    1. Primitive types\n\n        Primitive data types can be easily written just by passing the process id (pid), the address and value.\n        ```python\n        status = await ps4.write_bool(pid, address, True)\n        status = await ps4.write_char(pid, address, 'C')\n        status = await ps4.write_byte(pid, address, -128)\n        status = await ps4.write_ubyte(pid, address, 255)\n        status = await ps4.write_int16(pid, address, -32000)\n        status = await ps4.write_uint16(pid, address, 65000)\n        status = await ps4.write_int32(pid, address, -1000000)\n        status = await ps4.write_uint32(pid, address, 1000000)\n        status = await ps4.write_int64(pid, address, -2 ** 42)\n        status = await ps4.write_uint64(pid, address, 2 ** 42)\n        status = await ps4.write_float(pid, address, -128e-2)\n        status = await ps4.write_double(pid, address, 128e5)\n        ```\n\n    1. Structure\n\n        For structures you can pass either a format string, a struct.Struct instance or use construct's Struct.<br />\n        Here we are writing two floats. See the [Python docs](https://docs.python.org/3/library/struct.html#format-strings) for more information on format strings.\n        ```python\n        status = await ps4.write_struct(pid, 0xCC001234, structure='<2f', 2.5, -1.0)\n        ```\n\n    1. String\n\n        You can specify the encoding by passing the python charset name in the call.<br />\n        The null character is appended automatically if not provided.<br />\n        By default `ascii` is used.\n        ```python\n        status = await ps4.write_text(pid, 0xABCDEF, 'We are injecting text here!', encoding='ascii')\n        ```\n\n\n### Advanced\n\n1. Getting process information\n\n    Using `get_process_info` You can find out what exact CUSA is running.\n\n    ```python\n    info = await ps4.get_process_info(pid)\n\n    if info.title_id != 'CUSA012345':\n        print('This program only works with CUSA012345!')\n        return\n    ```\n\n    `get_process_maps` is helpful for getting an overview of the memory layout and find the base address.\n\n    ```python\n    maps = await ps4.get_process_maps(pid)\n\n    # Filter for 'executable'\n    maps = [m for m in maps if 'executable' in m.name]\n    maps.sort(key=lambda m: m.start)\n\n    base_address = maps[0].start if len(maps) else None\n    ```\n\n1. Allocating Memory\n\n    Allocating memory works by using the two methods `allocate_memory` and `free_memory`.\n    For the length, try to use multiples of 4096, the default page size.\n\n    ```python\n    length = 4096\n    address = await ps4.allocate_memory(pid, length)\n\n    # Do something with your own memory section\n    ...\n\n    await ps4.free_memory(pid, address, length)\n\n    ```\n\n    You can easily wrap these methods to create a memory manager using closures.\n\n    ```python\n    ps4 = ...\n    pid = ...\n    allocated = {}\n\n    async def allocate(id_: int = None, length: int = 4096) -> int:\n        address = await ps4.allocate_memory(pid, length)\n        if id_ in allocated:\n            await free_memory(id_)\n        allocated[id_] = (address, length)\n\n    async def free(id_: int):\n        if id_ in allocated:\n            address, length = allocated[id_]\n            await ps4.free_memory(pid, address, length)\n\n    addr1 = allocate(100)\n    addr2 = allocate(101)\n    ...\n    addr3 = allocate(100) # Frees old #100\n    free(100)\n    free(101)\n    ```\n\n    1. Using the allocation context\n\n    The above `allocate_memory`, `free_memory` combination works fine but preferably you should stick to using an allocation context.\n\n    ```python\n    async with ps4.memory(pid) as memory:\n        ...\n    ```\n\n    When this with-block is entered, memory will be allocated, and will be automatically freed when the block is exited.<br />\n    You can use the `memory` variable to operate on the memory section assigned to you.\n\n    ```python\n    async with ps4.memory(pid) as memory:\n        await ps4.write_int32(pid, memory.address, 42)\n        # The context variable offers some useful methods too\n        await memory.write(b'\\x90' * 100)\n    ```\n\n1. Remote code execution\n\n    1. Executing by address\n\n        Executing code is as simple as calling `call` and telling it at which address to start executing a new thread.<br />\n\n        ```python\n        await ps4.call(pid, 0x8475610)\n        ```\n\n        The executing thread will have all its registers set to 0 and start with a bare minimum stack so be cautious when calling random functions in your debugging applications.\n\n    1. Injecting assembly and executing it\n\n        By allocating memory as above and executing the data we write in our memory section as assembly code we are able to execute code remotely.\n\n        ```python\n        async with ps4.memory(pid) as memory:\n            assembly = b'\\x90\\x90\\x90\\xC3'\n            await memory.write(assembly)\n            await memory.call()\n        ```\n\n        `await memory.call()` is a shortcut for `await ps4.call(pid, memory.address)`\n\n    1. Passing parameters\n\n        PS4Debug allows 6 quadwords (more specifically 48 bytes) to be passed as parameters.<br />\n        By default you can pass up to 6 integers to the call that are serialized to 1 quadword each.\n\n        ```python\n        await memory.call(1, 2, 3, 4, 5, 6)\n        ```\n\n        or outside of a context\n\n        ```python\n        await ps4.call(pid, address, 1, 2, 3, 4, 5, 6)\n        ```\n\n        This will cause PS4Debug to fill the registers before starting execution in reverse order:\n        - `rdi` = `1`\n        - `rsi` = `2`\n        - `rdx` = `3`\n        - `rcx` = `4`\n        - `rbx` = `5`\n        - `rax` = `6`\n\n        In case you want to pass for example a float, you may use the keyword argument `parameter_format`.<br />\n        See the [Python docs](https://docs.python.org/3/library/struct.html#format-strings) for more information on format strings.\n\n        ```python\n        await memory.call(1.0, 2.0, 3, 4, 5, 6, parameter_format='<2f4Q')\n        ```\n\n        The registers will still be filled the same way, so the remote code has to parse it (In this case by using bitwise operations).\n        - `rdi` = `1.0` | `2.0`\n        - `rsi` = `3`\n        - `rdx` = `4`\n        - `rcx` = `5`\n        - `rbx` = `6`\n        - `rax` = `0` &#129044; Because we are using 8 bytes less than before, we could even pass one more value!\n\n    1. Retrieving return values\n\n        Return values are taken from the `rax` register when remote execution ends.<br />\n        To get your desired value back, make sure to `mov` it to the `rax` register.<br />\n        See [stdcall](https://en.wikipedia.org/wiki/X86_calling_conventions#stdcall) for more information.\n\n        ```asm\n        mov rax, rdi ; rax <- rdi\n        ret\n        ```\n\n        With the above injected assembly code, we can use the following call to echo its parameter back to us.\n\n        ```python\n        rax = await memory.call(1, 2, parameter_format='<2i')\n        print(rax) # Will print '8589934593' (0x200000001)\n        ```\n\n        As with passing the parameters, this will return the two integers (4 bytes each) packed in one `long` (8 bytes).<br />\n        You can either parse the data yourself using `int.from_bytes(rax[0:4], 'little')` or use the `output_format` parameter.\n\n        ```python\n        ret1, ret2 = await memory.call(50, -100, parameter_format='<2i', output_format='<2i')\n        print(ret1, ret2) # Will correctly print '1 2'\n        ```\n\n        See the [Python docs](https://docs.python.org/3/library/struct.html#format-strings) for more information on format strings.\n\n1. Debugging\n\n    Similarly to allocating memory, a debugging context can be used to fire up the PS4Debug server and notify the PlayStation 4 system to connect to it.\n\n    ```python\n    async with ps4.debugger(pid, resume=True) as debugger:\n        ...\n    ```\n\n    Entering this context will start a server on port 755, so make sure it is reachable for the PlayStation 4.\n    When python exits this with-block the debugger and all breakpoints are stopped.\n\n    Inside this with-block you are able to register breakpoints and do other relevant debugging operations like setting a breakpoint.\n\n    ```python\n    async def callback(event: ps4debug.BreakpointEvent):\n        thread_id = event.interrupt.lwpid\n        registers = event.interrupt.regs\n        registers.rax = 42\n        event.debugger.set_registers(thread_id, registers)\n        \n\n    async with ps4.debugger(pid, resume=True) as debugger:\n        debugger.set_breakpoint(0, True, address, on_hit=callback)\n    ```\n\n1. Using async features\n\n    Being completely asynchronous, it makes sense to use the full advantage of it.\n\n    ```python\n    tasks = [\n        asyncio.create_task( ps4.write_int32(pid, 0x123456, 1000) ),\n        asyncio.create_task( ps4.write_int32(pid, 0x789ABC, 2000) ),\n        asyncio.create_task( ps4.write_int32(pid, 0x654210, 3000) ),\n    ]\n\n    pending = tasks\n    while len(pending):\n        done, pending = await asyncio.wait(pending, return_when=asyncio.FIRST_COMPLETED)\n        \n        for task in done:\n            response_code = await t\n\n            if t is tasks[0]:\n                print('0x123456:', response_code)\n            else:\n                print(response_code)\n\n    ```\n\n    The above code creates 3 tasks that each write an integer to a different address.<br />\n    We then loop until all tasks are done (`while len(pending)`) and retrieve all completed tasks.<br />\n    You can then iterate all completed tasks (in `done`) and `await` them individiually to get their return value.<br />\n    The `is` operator is ideal to check which task completed.\n\n1. Using `functools` to make code cleaner\n\n    Sometimes always passing the same ps4debug object, the pid and the address gets quite tedious and unclean.<br />\n    You can wrap it in a function, like so:\n\n    ```python\n    async def get_score():\n        return await ps4.read_int32(pid=pid, address=0xABCDEF)\n\n    score = await get_score()\n    ```\n\n    Or even build a repository/service class for your game:\n\n    ```python\n    class GameRepository(object):\n        def __init__(self, ps4, pid):\n            super(GameRepository, self).__init__()\n            self.ps4 = ps4\n            self.pid = pid\n\n        async def get_score(self):\n            return await self.ps4.read_int32(pid=self.pid, address=0xABCDEF)\n\n    repository = GameRepository(ps4, pid)\n    score = await repository.get_score()\n    ```\n\n    But that is very verbose. A more lightweight solution is to use the functools module.\n\n    ```python\n    import functools\n    get_score = functools.partial(ps4.read_int32, pid=pid, address=0xABCDEF)\n\n    score = await get_score()\n    ```\n\n    This would even work for calls!\n\n    ```python\n    injected_function = functools.partial(ps4.call, pid=pid, address=address, parameter_format='<2I')\n    rax = await injected_function(42, 10)\n    ```\n\n### Full example\n\n```python\nimport sys\nimport functools\nimport asyncio\nimport ps4debug\n\nasync def main(ip_address):\n    # You may also retrieve the IP address using the find_ps4() function\n    ip_address = ip_address or ps4debug.PS4Debug.find_ps4()\n\n    ps4 = ps4debug.PS4Debug(ip_address)\n    \n    # Get processes\n    processes = await ps4.get_processes()\n    \n    # Find specific process id\n    pid = next((p.pid for p in processes if p.name == 'eboot.bin'), None)\n    \n    # Read memory\n    gold = await ps4.read_int32(pid, 0xCA88888)\n    \n    # Write memory\n    status = await ps4.write_int32(pid, 0xCA44444, 9999)\n    if status != ps4debug.ResponseCode.SUCCESS:\n        print('There was an error!')\n            \n    # Let's do something where the async features shines\n    tasks = [\n        asyncio.create_task( ps4.write_int32(pid, 0x123456, 1000) ),\n        asyncio.create_task( ps4.write_int32(pid, 0x789ABC, 2000) ),\n        asyncio.create_task( ps4.write_int32(pid, 0x654210, 3000) ),\n    ]\n        \n    pending = tasks\n    while len(pending):\n        # We iterate until all tasks are done but we stop waiting and handle already finished tasks.\n        done, pending = await asyncio.wait(pending, return_when=asyncio.FIRST_COMPLETED)\n        for t in done:\n            # Let's say the first task was something special and want its result, we can use 'is' for that:\n            # Note: If you use Coroutines, which are wrapped into tasks by asyncio. The following will not work.\n            response_code = await t\n            if t is tasks[0]:\n                print('0x123456:', response_code)\n            else:\n                print(response_code)\n\n    # Remotely execute code (Code injection)\n    async with ps4.memory(pid, 4096) as memory:\n        # Write your own assembly code to the system\n        assembly = b'\\x90\\x90\\x90\\x90\\xC3\\x90'\n        await memory.write(assembly)\n      \n        # And call it. Parameters are limited to 48 bytes or 6 values.\n        # See https://docs.python.org/3/library/struct.html#format-strings for more information on the '<6Q' part if you're confused.\n        rpc_stub = await ps4.install_rpc(pid)\n        rax = await memory.call(1, 2, 3, 4, 5, 6, parameter_format='<6Q')\n      \n        print(f'Thread returned with rax = {rax}')\n\n        # You may also use functools.partial for cleaner calls:\n        get_gold = functools.partial(ps4.read_int32, pid=pid, address=0xCA88888)\n        set_gold = functools.partial(ps4.write_int32, pid=pid, address=0xCA88888)\n        injected_function = functools.partial(ps4.call, pid=pid, rpc_stub=rpc_stub, address=memory, parameter_format='<6Q')\n\n        gold = await get_gold()\n        await set_gold(gold + 10)\n        await injected_function(1, 2, 3, 4, 5, 6)\n            \n    # Attaching the debugger works similarly\n    async with ps4.debugger(pid, resume=True) as debugger:\n        # Inside this context, a server on port 755 is being run to listen for debugger events.\n        async def breakpoint_hit(event: ps4debug.BreakpointEvent):\n            ...\n            # Do something with your breakpoint here!\n        \n        await debugger.set_breakpoint(0, True, 0x444111, on_hit=breakpoint_hit)\n        # Alternatively to 'on_hit=...' you can use register_callback\n        debugger.register_callback(breakpoint_hit)\n    \n    # Note! When the with block is exited, the debugger stops and all breakpoints will be disabled.\n    # You can use asyncio.Event for example to keep the with block spinning.\n    \n    # Wait for everything to finish\n    await asyncio.gather(*asyncio.all_tasks() - {asyncio.current_task()})\n\n\nif __name__ == '__main__':\n    # Normally you would use something like Typer for this\n    args = sys.argv[1:]\n    address = args[0] if len(args) else input('Enter the IP address of your PS4: ')\n  \n    # asyncio.run(main()) might throw an exception because of the ProactorEventLoop closing on Windows\n    loop = asyncio.new_event_loop()\n    loop.run_until_complete(main(address))\n\n    # If you insist on using asyncio.run on Windows try to set the following snippet\n    if sys.platform:\n        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\n    asyncio.run(main(address))\n```\n\n_Note: Do NOT run the above code as is. Depending on what game is running your system or the game might crash_\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Jay184/PyPS4debug",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ps4debug",
    "package_url": "https://pypi.org/project/ps4debug/",
    "platform": null,
    "project_url": "https://pypi.org/project/ps4debug/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Jay184/PyPS4debug/issues",
      "Homepage": "https://github.com/Jay184/PyPS4debug"
    },
    "release_url": "https://pypi.org/project/ps4debug/0.1.6/",
    "requires_dist": [
      "construct"
    ],
    "requires_python": ">=3.10",
    "summary": "Asynchronous ps4debug implementation in python",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13798775,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07150dc9a96642b566694d88a8cf18fc1f508fb65dc6fc6a276e892e5a7fbdfb",
          "md5": "2246add96c4899db646dd5ae5d19bb78",
          "sha256": "96ed754095d23a1effce1af378bde4d7b7ed4da2856c7b04a9d8a9d2447e642c"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2246add96c4899db646dd5ae5d19bb78",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 9033,
        "upload_time": "2022-04-01T14:17:13",
        "upload_time_iso_8601": "2022-04-01T14:17:13.056895Z",
        "url": "https://files.pythonhosted.org/packages/07/15/0dc9a96642b566694d88a8cf18fc1f508fb65dc6fc6a276e892e5a7fbdfb/ps4debug-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b1a73401a38ff4a8688c28a12c615645ba05c1711e24caa2d9ed5f1a457bbba",
          "md5": "888c569b9880a9363661c54e9ec6da9b",
          "sha256": "ae78376ea212786be2569be71fea322d90d9d0f4923ec3b72a3b9b639a9c555a"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "888c569b9880a9363661c54e9ec6da9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 9894,
        "upload_time": "2022-04-01T14:17:14",
        "upload_time_iso_8601": "2022-04-01T14:17:14.261102Z",
        "url": "https://files.pythonhosted.org/packages/4b/1a/73401a38ff4a8688c28a12c615645ba05c1711e24caa2d9ed5f1a457bbba/ps4debug-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bdb019be660d7dfe5af5be33cdbcdab1b22bdf016bb664d5b01ce09891a3625",
          "md5": "6fc1146ecd68bba6ecc752ca29b2fdca",
          "sha256": "7b1560f0a7a22da875aaeb4ca9f6882ab23216cb1e7e64c37e2552b1a0f5e147"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6fc1146ecd68bba6ecc752ca29b2fdca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 10752,
        "upload_time": "2022-04-01T19:52:01",
        "upload_time_iso_8601": "2022-04-01T19:52:01.985850Z",
        "url": "https://files.pythonhosted.org/packages/1b/db/019be660d7dfe5af5be33cdbcdab1b22bdf016bb664d5b01ce09891a3625/ps4debug-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "834b3851e1227594a99db00016ad397a7c0e0915211d6b0b9b90c9cc5598a089",
          "md5": "1f0d4066be41f9457a30435f20ebb0e7",
          "sha256": "6cf317bc2b5e4c7b460be2f3537ca167a2f729b401d11570decf6e093dd7df65"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1f0d4066be41f9457a30435f20ebb0e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 11172,
        "upload_time": "2022-04-01T19:52:03",
        "upload_time_iso_8601": "2022-04-01T19:52:03.628506Z",
        "url": "https://files.pythonhosted.org/packages/83/4b/3851e1227594a99db00016ad397a7c0e0915211d6b0b9b90c9cc5598a089/ps4debug-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a1f96123f36135723d57c794b78a40982e818df67cb2835d97bb57c13f37fa9",
          "md5": "3f611c2de0b22d7f8e336fb74e1ecbd6",
          "sha256": "0a043469509685860ff46e0695f89bf64c4f92d710e1502321ff08384c0518af"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f611c2de0b22d7f8e336fb74e1ecbd6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 10770,
        "upload_time": "2022-04-01T20:27:33",
        "upload_time_iso_8601": "2022-04-01T20:27:33.345700Z",
        "url": "https://files.pythonhosted.org/packages/7a/1f/96123f36135723d57c794b78a40982e818df67cb2835d97bb57c13f37fa9/ps4debug-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4037e16bbe6b2ab37e9169ea4cff9250217bd88c280833178da9750328ed9687",
          "md5": "b331951d76494fdb303791feb73e2e33",
          "sha256": "0ade0970bc4b7762cf0379239309d2d10fa1f9bf0a63c3744930e0208fb1ca65"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b331951d76494fdb303791feb73e2e33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 11197,
        "upload_time": "2022-04-01T20:27:35",
        "upload_time_iso_8601": "2022-04-01T20:27:35.240464Z",
        "url": "https://files.pythonhosted.org/packages/40/37/e16bbe6b2ab37e9169ea4cff9250217bd88c280833178da9750328ed9687/ps4debug-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82f5745b9df9a85dbbc1cbadf76e0e227a4420362b4ae8511221051bf95eb728",
          "md5": "10b2c3f5716b08cd436245d5a094862d",
          "sha256": "23d7472d256dea9b4b24d9740be2929f0b3d2c37e741a353cd9d81853eb5c9ec"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10b2c3f5716b08cd436245d5a094862d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 10898,
        "upload_time": "2022-04-01T21:12:52",
        "upload_time_iso_8601": "2022-04-01T21:12:52.417515Z",
        "url": "https://files.pythonhosted.org/packages/82/f5/745b9df9a85dbbc1cbadf76e0e227a4420362b4ae8511221051bf95eb728/ps4debug-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7935ec99323aca6d2df927165dac33e9dce6c20bb41c0927586d6f837dd64880",
          "md5": "06b7d980da348ad4dfd99d5a802579f3",
          "sha256": "1018794abd771132998d9661482ca873404afb1ae18127d48075730aab60e9af"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "06b7d980da348ad4dfd99d5a802579f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 11304,
        "upload_time": "2022-04-01T21:12:54",
        "upload_time_iso_8601": "2022-04-01T21:12:54.111328Z",
        "url": "https://files.pythonhosted.org/packages/79/35/ec99323aca6d2df927165dac33e9dce6c20bb41c0927586d6f837dd64880/ps4debug-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9436cec47bbc585f22a9de55564fa909c0227f72552ceaa9bb6145ca9c37c7d3",
          "md5": "758f33eb598b24864480029066c73052",
          "sha256": "20c92a21939f4079fdc9f5037acb2cfe25da7afb7a42526e742234e70d608bd7"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "758f33eb598b24864480029066c73052",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 10939,
        "upload_time": "2022-04-01T21:42:31",
        "upload_time_iso_8601": "2022-04-01T21:42:31.508767Z",
        "url": "https://files.pythonhosted.org/packages/94/36/cec47bbc585f22a9de55564fa909c0227f72552ceaa9bb6145ca9c37c7d3/ps4debug-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd044c332129523be4246d69d58a6bffe9239865ef19c8bc1841f612dea1c66e",
          "md5": "5fa772ec08c4c8520806ac6afe902358",
          "sha256": "5ac4939770518ada07c70d68dafcac9d18b20ea42e47b13ebd214ed63944fa61"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5fa772ec08c4c8520806ac6afe902358",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 11351,
        "upload_time": "2022-04-01T21:42:33",
        "upload_time_iso_8601": "2022-04-01T21:42:33.156671Z",
        "url": "https://files.pythonhosted.org/packages/fd/04/4c332129523be4246d69d58a6bffe9239865ef19c8bc1841f612dea1c66e/ps4debug-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7468591c5ecc6621d8ac10ac08e11194a81b98fea6317a2e95bfddd4fb652f5f",
          "md5": "957267249087cbf20495032431cfe1c7",
          "sha256": "2ee770d520439b61e9059d3737ef7e50bd3891d87cc048327ffecd2915131060"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "957267249087cbf20495032431cfe1c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 11250,
        "upload_time": "2022-04-01T22:40:59",
        "upload_time_iso_8601": "2022-04-01T22:40:59.106916Z",
        "url": "https://files.pythonhosted.org/packages/74/68/591c5ecc6621d8ac10ac08e11194a81b98fea6317a2e95bfddd4fb652f5f/ps4debug-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf78d2fa833fb869e89f4cdcbc006dbccf480725bb85a42b95b67672ab233cee",
          "md5": "1fe5b35f62cdd700c537d4386186fb4b",
          "sha256": "cf60b91902957a21f731689a38d655530834e4e0b2da5d055116282a3828707d"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1fe5b35f62cdd700c537d4386186fb4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 11688,
        "upload_time": "2022-04-01T22:41:00",
        "upload_time_iso_8601": "2022-04-01T22:41:00.695332Z",
        "url": "https://files.pythonhosted.org/packages/bf/78/d2fa833fb869e89f4cdcbc006dbccf480725bb85a42b95b67672ab233cee/ps4debug-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a6f6c45a7bd12138abbe746409645ed61d1f63b9c2a6ac86980229938f1f870",
          "md5": "98ec122de4bc60043952d37edfca1f35",
          "sha256": "ccdca74f3d9c1b3d54a7501d4482bf21c3bc37da6cca4d274e970e305e4f7e64"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98ec122de4bc60043952d37edfca1f35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 11689,
        "upload_time": "2022-04-02T02:27:43",
        "upload_time_iso_8601": "2022-04-02T02:27:43.781056Z",
        "url": "https://files.pythonhosted.org/packages/6a/6f/6c45a7bd12138abbe746409645ed61d1f63b9c2a6ac86980229938f1f870/ps4debug-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c80cf0ce008b093b9458486b7b6830b3ac13776cfa5d4ebac44ff88a8f7ed8e",
          "md5": "6c9fb6cbc3266c18bcbee96aa8202b06",
          "sha256": "667564c6ab757fb927b27880cb341c198f83c5997e5c054dcdbe80a87bc44725"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "6c9fb6cbc3266c18bcbee96aa8202b06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 12323,
        "upload_time": "2022-04-02T02:27:45",
        "upload_time_iso_8601": "2022-04-02T02:27:45.421054Z",
        "url": "https://files.pythonhosted.org/packages/7c/80/cf0ce008b093b9458486b7b6830b3ac13776cfa5d4ebac44ff88a8f7ed8e/ps4debug-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42dbd949f9224bf6c1785d2f1ecb421cdca1f083334d15dbb909f9887da51db0",
          "md5": "353310b171f4bd47b93df9602b7b6dff",
          "sha256": "92d08bda32aa8175ac290bc0b756ef418a1e4a1ac9a3aee6205a2b2eeee662fa"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "353310b171f4bd47b93df9602b7b6dff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 12741,
        "upload_time": "2022-04-13T13:59:15",
        "upload_time_iso_8601": "2022-04-13T13:59:15.559928Z",
        "url": "https://files.pythonhosted.org/packages/42/db/d949f9224bf6c1785d2f1ecb421cdca1f083334d15dbb909f9887da51db0/ps4debug-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "726c28fbdb84889a45c485ce12a4c52562ce0956c5a971ebee3a83c7c8891c5c",
          "md5": "6ff38ab566801bc1840395c838109baf",
          "sha256": "97ba719fa24b1886981c088c20f21de86ea209c94ef806cdeec43ad3ff83d097"
        },
        "downloads": -1,
        "filename": "ps4debug-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "6ff38ab566801bc1840395c838109baf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 13802,
        "upload_time": "2022-04-13T13:59:17",
        "upload_time_iso_8601": "2022-04-13T13:59:17.244875Z",
        "url": "https://files.pythonhosted.org/packages/72/6c/28fbdb84889a45c485ce12a4c52562ce0956c5a971ebee3a83c7c8891c5c/ps4debug-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "083c1b35600e33b263986f9faacb3ee20e336131bc421f0d50729e78b52e80e7",
          "md5": "99f479640b6b71d8f4d06038d6b76067",
          "sha256": "018dd0f2a960ec6377969bb62180a0873df6726ce57b59302048b5b9e333c293"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99f479640b6b71d8f4d06038d6b76067",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 15319,
        "upload_time": "2022-04-14T14:06:06",
        "upload_time_iso_8601": "2022-04-14T14:06:06.319513Z",
        "url": "https://files.pythonhosted.org/packages/08/3c/1b35600e33b263986f9faacb3ee20e336131bc421f0d50729e78b52e80e7/ps4debug-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54e75021a6e018c52fa03edbc558d9987aa6420d6bd972cc6fb0c230fc1e3680",
          "md5": "0fc4c83f3dc566c65b24ea604da78ee5",
          "sha256": "3a835202961aacce3fadf4c18cfd0f09b1610a63aea1143d9fdba3d098631dad"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0fc4c83f3dc566c65b24ea604da78ee5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 16692,
        "upload_time": "2022-04-14T14:06:07",
        "upload_time_iso_8601": "2022-04-14T14:06:07.707920Z",
        "url": "https://files.pythonhosted.org/packages/54/e7/5021a6e018c52fa03edbc558d9987aa6420d6bd972cc6fb0c230fc1e3680/ps4debug-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ac08033a6b070cad72849494e123ac40165ff266995dfb0bdf441c80181ae52",
          "md5": "c3fa7dfecc52e5005f5be8a04421be6d",
          "sha256": "2beadb8d0b1d205830a44df78d12de584f07bf7cc7bc1103e671d6433e537268"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3fa7dfecc52e5005f5be8a04421be6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 15336,
        "upload_time": "2022-04-14T14:21:53",
        "upload_time_iso_8601": "2022-04-14T14:21:53.257889Z",
        "url": "https://files.pythonhosted.org/packages/3a/c0/8033a6b070cad72849494e123ac40165ff266995dfb0bdf441c80181ae52/ps4debug-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2258f34d863c155412f9aa9fe70e4ec1ed8d1124c6c535cc14c13bcd93cd5a50",
          "md5": "5160d45ee79b74c1f42e1b343a545a84",
          "sha256": "079b490df4d8657e41e38a8ba1b964b0d608f95233df23f56a79160aab107a29"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5160d45ee79b74c1f42e1b343a545a84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 16684,
        "upload_time": "2022-04-14T14:21:54",
        "upload_time_iso_8601": "2022-04-14T14:21:54.541359Z",
        "url": "https://files.pythonhosted.org/packages/22/58/f34d863c155412f9aa9fe70e4ec1ed8d1124c6c535cc14c13bcd93cd5a50/ps4debug-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bba514ddf2e9969f2450120e2ed0ec60f60c38c0fda0181fa769310728e8109a",
          "md5": "317866fdd6f2e36a1c80168e7f215591",
          "sha256": "dc0296680dfc4009dfaa715aefad9f92f580080b7392865d098e6c59f6e12d7a"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "317866fdd6f2e36a1c80168e7f215591",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 15368,
        "upload_time": "2022-04-14T14:35:15",
        "upload_time_iso_8601": "2022-04-14T14:35:15.851650Z",
        "url": "https://files.pythonhosted.org/packages/bb/a5/14ddf2e9969f2450120e2ed0ec60f60c38c0fda0181fa769310728e8109a/ps4debug-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "406e100326b63f5ca535fe7d5dc481333512733985957d5896499d6d03091a7a",
          "md5": "a36540db58a7b9ca7c5a0f420e0d7ee5",
          "sha256": "7222bd134ad5a1846f47612b5174a11c5618eeb50858e37783a2aed6ea360c6b"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a36540db58a7b9ca7c5a0f420e0d7ee5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 16722,
        "upload_time": "2022-04-14T14:35:17",
        "upload_time_iso_8601": "2022-04-14T14:35:17.231870Z",
        "url": "https://files.pythonhosted.org/packages/40/6e/100326b63f5ca535fe7d5dc481333512733985957d5896499d6d03091a7a/ps4debug-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "375ec151d7c6ae2fb3536fd3318e9f2b72a22decf5016206128d06ee3bfb2b14",
          "md5": "f91db079021d2838904a6407c6b82752",
          "sha256": "b5affec0898f3e58871d8481a1f11a541d685c8674dc4395af12bdcd197c8de3"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f91db079021d2838904a6407c6b82752",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 15367,
        "upload_time": "2022-04-14T14:43:45",
        "upload_time_iso_8601": "2022-04-14T14:43:45.036940Z",
        "url": "https://files.pythonhosted.org/packages/37/5e/c151d7c6ae2fb3536fd3318e9f2b72a22decf5016206128d06ee3bfb2b14/ps4debug-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1254c27ae2fb0b2399d02c3a84bee66c13043c5bf3cae3b6b2ae8a95e2fff263",
          "md5": "2a2d574a53b14b3a67499bc9889b3bb9",
          "sha256": "e18f027f606d819d8477c3f5f0dc9b5257aeffc3d754bc1d84de3f06cd107cc1"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2a2d574a53b14b3a67499bc9889b3bb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 16731,
        "upload_time": "2022-04-14T14:43:46",
        "upload_time_iso_8601": "2022-04-14T14:43:46.310527Z",
        "url": "https://files.pythonhosted.org/packages/12/54/c27ae2fb0b2399d02c3a84bee66c13043c5bf3cae3b6b2ae8a95e2fff263/ps4debug-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "587a8f982c1ccff4c87977fc3b45088293c083a4d9c4a56b99cdd4d70cc13696",
          "md5": "330bef71fe87ebab8a625d09cb8dfce9",
          "sha256": "a16c9cbf3d5007a96d0bf31bd553a7e0b75727f5328dff24293324cbdfdcb3a3"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "330bef71fe87ebab8a625d09cb8dfce9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 20016,
        "upload_time": "2022-05-12T21:25:11",
        "upload_time_iso_8601": "2022-05-12T21:25:11.431074Z",
        "url": "https://files.pythonhosted.org/packages/58/7a/8f982c1ccff4c87977fc3b45088293c083a4d9c4a56b99cdd4d70cc13696/ps4debug-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31abfca3b2efba877b440b6282739936c01b0ce87d01dc9664c6629e86906ae0",
          "md5": "b89b819839467c71655774d7b33442f1",
          "sha256": "7a8799a0e01a38445c8054236f41bfc47ab696f6c7fd0c25ac22ca8d0aa84be0"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b89b819839467c71655774d7b33442f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 25388,
        "upload_time": "2022-05-12T21:25:13",
        "upload_time_iso_8601": "2022-05-12T21:25:13.990768Z",
        "url": "https://files.pythonhosted.org/packages/31/ab/fca3b2efba877b440b6282739936c01b0ce87d01dc9664c6629e86906ae0/ps4debug-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35d86dbd2051c8e06618105c7d05c81619927f4af69e91f8f91b6261862f7ab9",
          "md5": "85f9111a9d216a3b07060f989f41ed04",
          "sha256": "dce0244d3f9b83dd7433deb5bffa4032a7ee70fcfa41a2d120599c8bbcd48186"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85f9111a9d216a3b07060f989f41ed04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 19986,
        "upload_time": "2022-05-12T21:38:16",
        "upload_time_iso_8601": "2022-05-12T21:38:16.148612Z",
        "url": "https://files.pythonhosted.org/packages/35/d8/6dbd2051c8e06618105c7d05c81619927f4af69e91f8f91b6261862f7ab9/ps4debug-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ffb5e9655e5b71803648c2433600eb6eccf9e5f7c72d2785f2c962de191a5b3",
          "md5": "9b826a62a8e751bfc48c6d4c9e78ddaa",
          "sha256": "ab8fa58c1c96a48329214b22239b33eb650ae0f18a0f26890677901a0635212c"
        },
        "downloads": -1,
        "filename": "ps4debug-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9b826a62a8e751bfc48c6d4c9e78ddaa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 25351,
        "upload_time": "2022-05-12T21:38:18",
        "upload_time_iso_8601": "2022-05-12T21:38:18.427758Z",
        "url": "https://files.pythonhosted.org/packages/1f/fb/5e9655e5b71803648c2433600eb6eccf9e5f7c72d2785f2c962de191a5b3/ps4debug-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35d86dbd2051c8e06618105c7d05c81619927f4af69e91f8f91b6261862f7ab9",
        "md5": "85f9111a9d216a3b07060f989f41ed04",
        "sha256": "dce0244d3f9b83dd7433deb5bffa4032a7ee70fcfa41a2d120599c8bbcd48186"
      },
      "downloads": -1,
      "filename": "ps4debug-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "85f9111a9d216a3b07060f989f41ed04",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 19986,
      "upload_time": "2022-05-12T21:38:16",
      "upload_time_iso_8601": "2022-05-12T21:38:16.148612Z",
      "url": "https://files.pythonhosted.org/packages/35/d8/6dbd2051c8e06618105c7d05c81619927f4af69e91f8f91b6261862f7ab9/ps4debug-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ffb5e9655e5b71803648c2433600eb6eccf9e5f7c72d2785f2c962de191a5b3",
        "md5": "9b826a62a8e751bfc48c6d4c9e78ddaa",
        "sha256": "ab8fa58c1c96a48329214b22239b33eb650ae0f18a0f26890677901a0635212c"
      },
      "downloads": -1,
      "filename": "ps4debug-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "9b826a62a8e751bfc48c6d4c9e78ddaa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 25351,
      "upload_time": "2022-05-12T21:38:18",
      "upload_time_iso_8601": "2022-05-12T21:38:18.427758Z",
      "url": "https://files.pythonhosted.org/packages/1f/fb/5e9655e5b71803648c2433600eb6eccf9e5f7c72d2785f2c962de191a5b3/ps4debug-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}