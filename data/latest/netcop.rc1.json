{
  "info": {
    "author": "Alexey Andriyanov",
    "author_email": "alanm@bk.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "# Netcop — NETwork COnfig Parser\n\nThis Python library helps navigating and querying textual (CLI-style) configs of network devices. It may be useful for solving such problems like:\n- listing a device interfaces\n- extracting IP address or VLAN configurations of a network interface\n- checking if a particular option is properly set in all the relevant blocks\n\nIt does not support modifying and comparing of configs, as the [CiscoConfigParse][1] does, but provides a nice and simple query API.\n\n## Installation\nNetcop works with both Python 2.7 and Python 3.\n\nTo install it as a package, use this command:\n\n    python -m pip install https://github.com/andriyanov/netcop/archive/master.tar.gz\n\n\n## Vendor compatibility\nNetcop works by parsing hierarchical text configs that use newline-separated statements, whitespace indentation of blocks and keywords prefixes as a config path. Thus, it is not limited to a particular vendor's syntax.\n\nIn particular, these types of configs are supported by Netcop:\n- Cisco IOS, NX-OS, IOS-XR\n- Huawei VRP\n- Juniper JunOS\n- Quagga / FRR\n\nThere should be many more of them, I have not checked others yet.\n\nHowever, Netcop does not have any idea of the config semantics — it can't guess the type of data relying by a given config path whether it is a list, an int, a string or an IP address. It's always a user who knows the semantics and treats a given path to be of a particular type.\n\n\n## Usage guide\n\nLet's say we have this simple config to parse:\n```python\nc = netcop.Conf('''\ninterface Port-channel1\n    no ip address\n!\ninterface Port-channel2\n    ip address 10.0.0.2 255.255.0.0\n    ip address 10.1.0.2 255.255.0.0 secondary\n!\ninterface Loopback0\n  ip address 1.1.1.1 255.255.255.255\n!\n''')\n```\n\nBelow are some examples of processing this config.\n\n### Indexing\nThe result of parsing looks very much like a Python `dict` and Netcop tries hard to keep its API similar to what you can expect from a dict.\n\nThe key operation you can do with a `Conf` object is to get a sub-object by a string key with the `[]` operator.\n\nThen we just use any of the following expressions to get a part (slice) of the config as another `Conf` object that has the same API for subsequent queries:\n- `c['interface']`\n- `c['interface Port-channel1']`\n- `c['interface Port-channel2 ip address']`\n\n\nTo illustrate the way a config tree is organized, let's take a look at these three queries that return the same result:\n- `c['interface Port-channel2 ip address']`\n- `c['interface']['Port-channel2 ip']['address']`\n- `c['interface']['Port-channel2']['ip address']`\n\nUnlike the dict's `[]`, this operator never causes the `KeyError` exception, it returns an empty `Conf` object instead.\n\n### Iterating\n\nTo obtain a sequence of interface names, you just need to use `.keys()` method:\n\n```python\n[i for i in c['interface'].keys()]\n```\nOutput:\n\n    ['Port-channel1', 'Port-channel2', 'Loopback0']\n\nJust as it is with a dict, you can get the same result by iterating over an object:\n```python\n[i for i in c['interface']]\n```\n\nLikewise, to get IP addresses assigned to all the interfaces, use this snippet:\n```python\nfor ifname in c['interface']:\n    for ip in c['interface'][ifname]['ip address']:\n        print(ifname, ip)\n```\nOutput:\n\n    Port-channel2 10.0.0.2\n    Port-channel2 10.1.0.2\n    Loopback0 1.1.1.1\n\nJust as it is with a `dict`, you can use `.items()` to avoid redundant key lookups (resulting output is the same):\n```python\nfor ifname, iface_c in c['interface'].items():\n    for ip in iface_c['ip address']:\n        print(ifname, ip)\n```\n\n### Checking\nIn a bool context a `Conf` object returns if it's empty, or in other words, if a specified config path exists.\n```python\n# __bool__ operator works:\nbool(c) == True\nbool(c['interface Loopback0']) == True\nbool(c['interface Blah']) == False\nbool(c['interface Port-channel1 no ip address']) == True\nbool(c['interface Port-channel2 no ip address']) == False\n\n# same for __contains__ operator:\n('interface Loopback0' in c) == True\n('interface Blah' in c) == False\n('interface Port-channel1 no ip address' in c) == True\n('interface Port-channel2 no ip address' in c) == False\n```\n\n### Getting values\nSo far, we have seen how to iterate over multiple values by a given path. What if we're sure that there is only one value for a path? Then you can use any of the scalar properties of a `Conf` object:\n- `.word` - a single string keyword\n- `.int` - an integer value\n- `.ip`, `.cidr` (*since Python 3.3*) - a `IPAddress` or `IPNetwork` object from the `ipaddress` standard library\n- `.tail` - all the tailing keywords as a string\n\nYou should note that in contrast to indexing and iterating operations that can never fail, the scalar getters can raise `KeyError` or `TypeError` if there are no values for a given path, or if there are multiple ones.\n\nHere is an example:\n\n```python\nc['interface Loopback0 ip address'].word == '1.1.1.1'\nc['interface Loopback0 ip address'].ip == IPv4Address('1.1.1.1')\nc['interface Loopback0 ip address'].tail == '1.1.1.1 255.55.255.255'\nc['interface Port-channel2 ip address'].ip  # KeyError raised\n```\n\nThere are also list properties `.ints`, `.ips` and `.cidrs`, which are just type-converting iterators and shorthands for expressions like `[int(x) for x in c]`.\n\n### Wildcard indexing\nNetcop does not use regular expressions to make index lookups, it requires exact keywords in the config path. However, there are cases when it is useful to specify a config path with a pattern:\n```python\nfor ifname, ip in c.expand('interface po* ip address *'):\n    print(ifname, ip)\n```\nResulting output:\n\n    Port-channel2 10.0.0.2\n    Port-channel2 10.1.0.2\n\nThe `.expand()` method iterates over all possible paths in a config by a given selector with wildcards using glob syntax. It returns tuples with the length equal to the number of wildcard placeholders in a given key.\n\n\n[1]: https://github.com/mpenning/ciscoconfparse\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/andriyanov/netcop",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netcop",
    "package_url": "https://pypi.org/project/netcop/",
    "platform": null,
    "project_url": "https://pypi.org/project/netcop/",
    "project_urls": {
      "Homepage": "https://github.com/andriyanov/netcop"
    },
    "release_url": "https://pypi.org/project/netcop/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A vendor-agnostic parser of network configs",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17483484,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6a54b55efc69e6a0e7c610b27ff6e7a0136040dfb3fdc7b29884a336bdb9248",
          "md5": "98ce78f8eed3dd97245b9b56edbfe1ad",
          "sha256": "49e12b5437d720913c9aa4e39e26e2ef6903ef5cfd1f57e941de49a2b196c5f6"
        },
        "downloads": -1,
        "filename": "netcop-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98ce78f8eed3dd97245b9b56edbfe1ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8637,
        "upload_time": "2023-03-28T21:07:40",
        "upload_time_iso_8601": "2023-03-28T21:07:40.198801Z",
        "url": "https://files.pythonhosted.org/packages/d6/a5/4b55efc69e6a0e7c610b27ff6e7a0136040dfb3fdc7b29884a336bdb9248/netcop-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "217a19e9d1936285cc05c581d1db46da4a9f2144943b9b3a6ec7ea0f5b8eb407",
          "md5": "a973bbfe88b32d9a6e9042bdb830e088",
          "sha256": "796983510e0c06c7ff69a8a1a8601a9e650ac288045c07d4f785c6a229188764"
        },
        "downloads": -1,
        "filename": "netcop-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a973bbfe88b32d9a6e9042bdb830e088",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9764,
        "upload_time": "2023-03-28T21:07:42",
        "upload_time_iso_8601": "2023-03-28T21:07:42.052982Z",
        "url": "https://files.pythonhosted.org/packages/21/7a/19e9d1936285cc05c581d1db46da4a9f2144943b9b3a6ec7ea0f5b8eb407/netcop-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6a54b55efc69e6a0e7c610b27ff6e7a0136040dfb3fdc7b29884a336bdb9248",
        "md5": "98ce78f8eed3dd97245b9b56edbfe1ad",
        "sha256": "49e12b5437d720913c9aa4e39e26e2ef6903ef5cfd1f57e941de49a2b196c5f6"
      },
      "downloads": -1,
      "filename": "netcop-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "98ce78f8eed3dd97245b9b56edbfe1ad",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8637,
      "upload_time": "2023-03-28T21:07:40",
      "upload_time_iso_8601": "2023-03-28T21:07:40.198801Z",
      "url": "https://files.pythonhosted.org/packages/d6/a5/4b55efc69e6a0e7c610b27ff6e7a0136040dfb3fdc7b29884a336bdb9248/netcop-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "217a19e9d1936285cc05c581d1db46da4a9f2144943b9b3a6ec7ea0f5b8eb407",
        "md5": "a973bbfe88b32d9a6e9042bdb830e088",
        "sha256": "796983510e0c06c7ff69a8a1a8601a9e650ac288045c07d4f785c6a229188764"
      },
      "downloads": -1,
      "filename": "netcop-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a973bbfe88b32d9a6e9042bdb830e088",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9764,
      "upload_time": "2023-03-28T21:07:42",
      "upload_time_iso_8601": "2023-03-28T21:07:42.052982Z",
      "url": "https://files.pythonhosted.org/packages/21/7a/19e9d1936285cc05c581d1db46da4a9f2144943b9b3a6ec7ea0f5b8eb407/netcop-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}