{
  "info": {
    "author": "MONAI Consortium",
    "author_email": "monai.contact@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MONAI Stream\n\n[![License](https://img.shields.io/badge/license-Apache%202.0-green.svg)](https://opensource.org/licenses/Apache-2.0)\n[![CI Build](https://github.com/Project-MONAI/MONAIStream/actions/workflows/pr.yml/badge.svg)](https://github.com/Project-MONAI/MONAIStream/actions/workflows/pr.yml)\n[![Documentation Status](https://readthedocs.org/projects/monaistream/badge/?version=latest)](https://monaistream.readthedocs.io/en/latest/?badge=latest)\n[![codecov](https://codecov.io/gh/Project-MONAI/MONAIStream/branch/main/graph/badge.svg)](https://codecov.io/gh/Project-MONAI/MONAIStream)\n\n\nMONAI Stream SDK aims to equip experienced MONAI Researchers an Developers with the ability to\nbuild streaming inference pipelines while enjoying the familiar MONAI development experience\nand utilities. \n\nMONAI Stream pipelines begin with a source component, and end with a sink component,\nand the two are connected by a series of filter components as shown below.\n\n![MONAIStreamArchitecture](https://raw.githubusercontent.com/Project-MONAI/MONAIStream/main/docs/images/MONAIStream_High-level_Architecture.svg)\n\nMONAI Stream SDK natively supports:\n- a number of input component types including real-time streams (RTSP), streaming URL, local video files,  \nAJA Capture cards with direct memory access to GPU, and a Fake Source for testing purposes,\n- outputs components to allow the developer to view the result of their pipelines or just to test via Fake Sink,\n- a number of filter types, including format conversion, video frame resizing and/or scaling, and most importantly a MONAI transform components\n  that allows developers to plug-in MONAI transformations into the MONAI Stream pipeline.\n- Clara AGX Developer Kit in dGPU configuration.\n\nThe diagram below shows a visualization of a MONAI Stream pipeline where a `URISource` is chained to video conversion,\ninference service, and importantly to `TransformChainComponent` which allows MONAI transformations\n(or any compatible callables that accept `Dict[str, torch.Tensor]`) to be plugged into the MONAI Stream pipeline. The results are then\nvizualized on the screen via `NVEglGlesSink`.\n\n[![](https://mermaid.ink/img/eyJjb2RlIjoic3RhdGVEaWFncmFtLXYyXG4gICBVUklTb3VyY2U8YnI-KFNvdXJjZSkgLS0-IE5WVmlkZW9Db252ZXJ0PGJyPihGaWx0ZXIpXG4gICBOVlZpZGVvQ29udmVydDxicj4oRmlsdGVyKSAtLT4gTlZJbmZlclNlcnZlcjxicj4oRmlsdGVyKVxuICAgTlZJbmZlclNlcnZlcjxicj4oRmlsdGVyKSAtLT4gQ29uY2F0SXRlbXNkOiBPUklHSU5BTF9JTUFHRVxuICAgTlZJbmZlclNlcnZlcjxicj4oRmlsdGVyKSAtLT4gQWN0aXZhdGlvbnNkOiBNT0RFTF9PVVRQVVRfT1xuICAgTGFtYmRhZCAtLT4gTlZFZ2xHbGVzU2luazxicj4oU2luaylcblxuICAgc3RhdGUgVHJhbnNmb3JtQ2hhaW5Db21wb25lbnQoRmlsdGVyKSB7XG4gICAgICBBY3RpdmF0aW9uc2QgLS0-IEFzRGlzY3JldGVkXG4gICAgICBBc0Rpc2NyZXRlZCAtLT4gQXNDaGFubmVsTGFzdGRcbiAgICAgIEFzQ2hhbm5lbExhc3RkIC0tPiBTY2FsZUludGVuc2l0eWRcbiAgICAgIFNjYWxlSW50ZW5zaXR5ZCAtLT4gQ29uY2F0SXRlbXNkXG4gICAgICBDb25jYXRJdGVtc2QgLS0-IExhbWJkYWRcbiAgIH1cbiIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2UsImF1dG9TeW5jIjp0cnVlLCJ1cGRhdGVEaWFncmFtIjpmYWxzZX0)](https://mermaid.live/edit/#eyJjb2RlIjoic3RhdGVEaWFncmFtLXYyXG4gICBVUklTb3VyY2U8YnI-KFNvdXJjZSkgLS0-IE5WVmlkZW9Db252ZXJ0PGJyPihGaWx0ZXIpXG4gICBOVlZpZGVvQ29udmVydDxicj4oRmlsdGVyKSAtLT4gTlZJbmZlclNlcnZlcjxicj4oRmlsdGVyKVxuICAgTlZJbmZlclNlcnZlcjxicj4oRmlsdGVyKSAtLT4gQ29uY2F0SXRlbXNkOiBPUklHSU5BTF9JTUFHRVxuICAgTlZJbmZlclNlcnZlcjxicj4oRmlsdGVyKSAtLT4gQWN0aXZhdGlvbnNkOiBNT0RFTF9PVVRQVVRfT1xuICAgTGFtYmRhZCAtLT4gTlZFZ2xHbGVzU2luazxicj4oU2luaylcblxuICAgc3RhdGUgVHJhbnNmb3JtQ2hhaW5Db21wb25lbnQoRmlsdGVyKSB7XG4gICAgICBBY3RpdmF0aW9uc2QgLS0-IEFzRGlzY3JldGVkXG4gICAgICBBc0Rpc2NyZXRlZCAtLT4gQXNDaGFubmVsTGFzdGRcbiAgICAgIEFzQ2hhbm5lbExhc3RkIC0tPiBTY2FsZUludGVuc2l0eWRcbiAgICAgIFNjYWxlSW50ZW5zaXR5ZCAtLT4gQ29uY2F0SXRlbXNkXG4gICAgICBDb25jYXRJdGVtc2QgLS0-IExhbWJkYWRcbiAgIH1cbiIsIm1lcm1haWQiOiJ7XG4gIFwidGhlbWVcIjogXCJkZWZhdWx0XCJcbn0iLCJ1cGRhdGVFZGl0b3IiOmZhbHNlLCJhdXRvU3luYyI6dHJ1ZSwidXBkYXRlRGlhZ3JhbSI6ZmFsc2V9)\n\nIn the conceptual example pipeline above, `NVInferServer` passes both the original image\nas well as all the inference model outputs to the transform chain component. The developer may \nchoose to manipulate the two pieces of data separately or together to create the desired output\nfor display.\n\n`TransformChainComponent` presents MONAI transforms \nwith `torch.Tensor` data containing a single frame of the video stream. \nImplementationally, `TransformChainComponent` provides a compatibility layer between MONAI\nand the underlying [DeepStream SDK](https://developer.nvidia.com/deepstream-sdk) backbone,\nso MONAI developers may be able to plug-in existing MONAI inference code into\nDeepStream.\n\n## Features\n\n> _The codebase is currently under active development._\n\n- Framework to allow MONAI-style inference pipelines for streaming data.\n- Allows for MONAI chained transformations to be used on streaming data.\n- Inference models can be used natively in MONAI or deployed via [Triton Inference Server](https://github.com/triton-inference-server/server).\n- Natively provides support for _x86_ and [Clara AGX](https://developer.nvidia.com/clara-holoscan-sdk) architectures\n  - with the future aim to allow developers to deploy the same code in both architectures with no changes.\n\n## Getting Started: `x86` Development Container Setup\n\n### Creating a Local Development Container\n\nTo build a developer container for your workstation simply clone the repo and run the setup script as follows.\n\n```bash\n# clone the latest release from the repo\ngit clone -b <release_tag> https://github.com/Project-MONAI/MONAIStream\n\n# start development setup script\ncd MONAIStream\n./start_devel.sh\n```\n\nWith the successful completion of the setup script, a container will be running containing all the necessary libraries\nfor the developer to start designing MONAI Stream SDK inference pipelines. The development however is limited to within\nthe container and the mounted volumes. The developer may modify ``Dockerfile.devel`` and ``start_devel.sh`` to suit their\nneeds.\n\n### Connecting VSCode to the Development Container\n\nTo start developing within the newly created MONAI Stream SDK development container users may choose to use their favorite\neditor or IDE. Here, we show how one could setup VSCode on their local machine to start developing MONAI Stream inference\npipelines.\n\n  1. Install [VSCode](https://code.visualstudio.com/download) on your Linux development workstation.\n  2. Install the [Remote Development Extension pack](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack) and restart VSCode.\n  3. In VSCode select the icon ![VSCodeRDE](https://raw.githubusercontent.com/Project-MONAI/MONAIStream/main/docs/images/vscode_remote_development_ext.png) of the newly installed Remote Development extension on the left.\n  4. Select \"Containers\" under \"Remote Explorer\" at the top of the dialog.\n     ![VSCodeRemoteExplorer](https://raw.githubusercontent.com/Project-MONAI/MONAIStream/main/docs/images/vscode_remote_explorer.png)\n  5. Attach to the MONAI Stream SDK container by clicking the \"Attach to Container\" icon ![VSCodeAttachContainer](https://raw.githubusercontent.com/Project-MONAI/MONAIStream/main/docs/images/vscode_attach_container.png) on the container name.\n\nThe above steps should allow the user to develop inside the MONAI Stream container using VSCode.\n\n### Run the Ultrasound Inference Sample App\n\nMONAI Stream SDK comes with example inference pipelines. Here, we run a sample app\nto perform instrument segmentation in an ultrasound video.\n\nInside the development container perform the following steps.\n\n  1. Download the ultrasound data and models in the container.\n\n    mkdir -p /app/data\n    cd /app/data\n    wget https://github.com/Project-MONAI/MONAIStream/releases/download/data/US.zip\n    unzip US.zip -d .\n\n  2. Copy the ultrasound video to ``/app/videos/Q000_04_tu_segmented_ultrasound_256.avi`` as the example app expects.\n\n    mkdir -p /app/videos\n    cp /app/data/US/Q000_04_tu_segmented_ultrasound_256.avi /app/videos/.\n\n  3. Convert PyTorch or ONNX model to TRT engine.\n\n      a. To Convert the provided ONNX model to a TRT engine use:\n\n        ```\n        cd /app/data/US/\n        /usr/src/tensorrt/bin/trtexec --onnx=us_unet_256x256.onnx --saveEngine=model.engine --explicitBatch --verbose --workspace=1000\n        ```\n\n      b. To convert the PyTorch model to a TRT engine use:\n\n        ```\n        cd /app/data/US/\n        monaistream convert -i us_unet_jit.pt -o monai_unet.engine -I INPUT__0 -O OUTPUT__0 -S 1 3 256 256\n        ```\n\n  4. Copy the ultrasound segmentation model under ``/app/models/monai_unet_trt/1`` as our sample app expects.\n\n    mkdir -p /app/models/monai_unet_trt/1\n    cp /app/data/US/monai_unet.engine /app/models/monai_unet_trt/1/.\n    cp /app/data/US/config_us_trt.pbtxt /app/models/monai_unet_trt/config.pbtxt\n\n  5. Now we are ready to run the example streaming ultrasound bone scoliosis segmentation pipeline.\n\n    cd /sample/monaistream-pytorch-pp-app\n    python main.py\n\n# Links\n\n- Website: https://monai.io/\n- API documentation: https://docs.monai.io/projects/stream\n- Code: https://github.com/Project-MONAI/MONAIStream\n- Project tracker: https://github.com/Project-MONAI/MONAIStream/projects\n- Issue tracker: https://github.com/Project-MONAI/MONAIStream/issues\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://monai.io/",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monaistream",
    "package_url": "https://pypi.org/project/monaistream/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/monaistream/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Project-MONAI/MONAIStream/issues",
      "Documentation": "https://docs.monai.io/",
      "Homepage": "https://monai.io/",
      "Source Code": "https://github.com/Project-MONAI/MONAIStream"
    },
    "release_url": "https://pypi.org/project/monaistream/0.1.1/",
    "requires_dist": [
      "monai[gdown,itk,pillow,psutil,skimage,torchvision] (==0.7.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Streaming Inference Extension for MONAI",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12706275,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f39e13989f074c42a0028e22a66a74b3a7ce66e42fd35648550dfc48842d21f9",
          "md5": "7a8aaf64d7b2ee34e87eaf0bab7dcd9e",
          "sha256": "103de23b7bdecb5ce87f8b8f97d7c4d05c2d58f4081ddc98b1280bcb69b6e9cb"
        },
        "downloads": -1,
        "filename": "monaistream-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a8aaf64d7b2ee34e87eaf0bab7dcd9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39003,
        "upload_time": "2021-12-09T15:09:08",
        "upload_time_iso_8601": "2021-12-09T15:09:08.576577Z",
        "url": "https://files.pythonhosted.org/packages/f3/9e/13989f074c42a0028e22a66a74b3a7ce66e42fd35648550dfc48842d21f9/monaistream-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a79fecbc4f177265c5c07ecd6d15d858e69b6c6bd1367e9470f5f7411b3baed",
          "md5": "22c317a36304ed82f8898110236c1ba0",
          "sha256": "bc8d7620bb9b0de6b3f533566e78330de817588743efae239bbf5d4f1bf52218"
        },
        "downloads": -1,
        "filename": "monaistream-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22c317a36304ed82f8898110236c1ba0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 42128,
        "upload_time": "2022-01-27T04:01:11",
        "upload_time_iso_8601": "2022-01-27T04:01:11.767610Z",
        "url": "https://files.pythonhosted.org/packages/2a/79/fecbc4f177265c5c07ecd6d15d858e69b6c6bd1367e9470f5f7411b3baed/monaistream-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a79fecbc4f177265c5c07ecd6d15d858e69b6c6bd1367e9470f5f7411b3baed",
        "md5": "22c317a36304ed82f8898110236c1ba0",
        "sha256": "bc8d7620bb9b0de6b3f533566e78330de817588743efae239bbf5d4f1bf52218"
      },
      "downloads": -1,
      "filename": "monaistream-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "22c317a36304ed82f8898110236c1ba0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 42128,
      "upload_time": "2022-01-27T04:01:11",
      "upload_time_iso_8601": "2022-01-27T04:01:11.767610Z",
      "url": "https://files.pythonhosted.org/packages/2a/79/fecbc4f177265c5c07ecd6d15d858e69b6c6bd1367e9470f5f7411b3baed/monaistream-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}