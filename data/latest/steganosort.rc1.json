{
  "info": {
    "author": "Stephen Zimmerman",
    "author_email": "sz@recv.cc",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![Build Status](https://github.com/sz3/steganosort/workflows/ci/badge.svg)](https://github.com/sz3/steganosort/actions?query=workflow%3Aci)\n[![Coverage Status](https://coveralls.io/repos/github/sz3/steganosort/badge.svg?branch=master)](https://coveralls.io/github/sz3/steganosort?branch=master)\n\n## steganosort\n\n### Sort order steganography\n\nThe ordering of an \"unordered\" list is an information channel.\n\nThis library demonstrates how to embed data in the sort order of python (>=3.6) lists, dictionaries, and JSON.\n\nBased on https://github.com/CalderWhite/gif-msg.\n\n## Installation\n\nUse `pip`:\n```\npip install steganosort\n```\n\nor from source,\n```\npython setup.py build\npython setup.py install\n```\n\n## Usage\n\n```\nfrom steganosort import encode, decode\nx = list(range(64))\ny = encode(x, b'hello world!')\ny\ndecode(y)\n```\n\nExpected output:\n> [16, 17, 18, 19, 20, 21, 1, 5, 13, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 14, 32, 33, 2, 34, 35, 36, 0, 37, 38, 39, 4, 40, 12, 41, 8, 42, 43, 7, 44, 45, 46, 47, 48, 15, 49, 50, 51, 3, 52, 54, 55, 56, 58, 59, 60, 57, 61, 53, 11, 62, 63, 10, 9, 6]\n\n> b'hello world!\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n\n## Constraints, and more interesting usage\n\nThis approach can only order *unique* elements -- so arrays or lists with duplicate elements gain no additional payload capacity from those duplicate elements.\n\nHowever, most key:value data types, such as python's `dict`, or the javascript/json `object`, already enforce unique keys. This means you can encode data in the sort order -- for example -- a json object returned over http.\n\n## JSON over HTTP example\n\nThere is a very basic http server/client example in the `examples/` subdirectory. The server requires the python `flask` package.\n\nTo run the server on port 8000:\n```\npython -m examples.server\n```\n\nA normal HTTP request shows a normal looking HTTP response:\n```\ncurl localhost:8000\n```\n> {\"2004\": 377.52, \"1995\": 360.82, \"1997\": 363.73, \"1998\": 366.7, \"1991\": 355.61, \"2005\": 379.8, \"1996\": 362.61, \"2006\": 381.9, \"2008\": 385.59, \"1988\": 351.57, \"2009\": 387.43, \"2010\": 389.9, \"2011\": 391.65, \"2012\": 393.86, \"2015\": 400.83, \"2014\": 398.64, \"2013\": 396.52, \"2016\": 404.22, \"2001\": 371.14, \"2017\": 406.55, \"2018\": 408.52, \"1989\": 353.12, \"2003\": 375.8, \"2007\": 383.79, \"2019\": 411.43, \"1990\": 354.39, \"2002\": 373.28, \"2000\": 369.55, \"1992\": 356.45, \"1999\": 368.38, \"1994\": 358.83, \"1993\": 357.1}\n\nBut if we discard the response body and print the message encoded in the sort order:\n```\npython -m examples.client\n```\n\n> b'M.Loa CO2.'",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sz3/steganosort",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "steganosort",
    "package_url": "https://pypi.org/project/steganosort/",
    "platform": null,
    "project_url": "https://pypi.org/project/steganosort/",
    "project_urls": {
      "Homepage": "https://github.com/sz3/steganosort"
    },
    "release_url": "https://pypi.org/project/steganosort/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Embed messages in the sort order of lists/dicts/JSON/tar.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16898635,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dc575c0ff64695ae351cef62924924ded3a8efaa29e871769ebda34fff427ab",
          "md5": "4539dbb08ad0309382d3e28bbeae5da3",
          "sha256": "d4a489a1d3444f775e4ab722ca40109ccad6f3f5076c5832d2eb7c87453c0dbc"
        },
        "downloads": -1,
        "filename": "steganosort-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4539dbb08ad0309382d3e28bbeae5da3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5446,
        "upload_time": "2023-02-17T04:47:52",
        "upload_time_iso_8601": "2023-02-17T04:47:52.056358Z",
        "url": "https://files.pythonhosted.org/packages/9d/c5/75c0ff64695ae351cef62924924ded3a8efaa29e871769ebda34fff427ab/steganosort-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9dc575c0ff64695ae351cef62924924ded3a8efaa29e871769ebda34fff427ab",
        "md5": "4539dbb08ad0309382d3e28bbeae5da3",
        "sha256": "d4a489a1d3444f775e4ab722ca40109ccad6f3f5076c5832d2eb7c87453c0dbc"
      },
      "downloads": -1,
      "filename": "steganosort-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4539dbb08ad0309382d3e28bbeae5da3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5446,
      "upload_time": "2023-02-17T04:47:52",
      "upload_time_iso_8601": "2023-02-17T04:47:52.056358Z",
      "url": "https://files.pythonhosted.org/packages/9d/c5/75c0ff64695ae351cef62924924ded3a8efaa29e871769ebda34fff427ab/steganosort-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}