{
  "info": {
    "author": "Cecil Curry, et al.",
    "author_email": "leycec@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance",
      "Typing :: Typed"
    ],
    "description": ".. # ------------------( SEO                                 )------------------\n.. # Metadata converted into HTML-specific meta tags parsed by search engines.\n.. # Note that:\n.. # * The \"description\" should be no more than 300 characters and ideally no\n.. #   more than 150 characters, as search engines may silently truncate this\n.. #   description to 150 characters in edge cases.\n\n.. meta::\n   :description lang=en:\n     Beartype is an open-source pure-Python PEP-compliant constant-time runtime\n     type checker emphasizing efficiency and portability.\n\n.. # ------------------( SYNOPSIS                            )------------------\n\n=================\n|beartype-banner|\n=================\n\n|codecov-badge| |ci-badge|\n\n.. #FIXME: Re-enable after actually defining RtD-hosted documentation, please.\n.. #    |rtd-badge|\n\n**Beartype** is an `open-source <beartype license_>`__ `PEP-compliant\n<Compliance_>`__ `near-real-time <beartype realtime_>`__ `pure-Python runtime\ntype checker <Usage_>`__ emphasizing efficiency, usability, and thrilling puns.\n\n.. #FIXME: Once we actually receive a sponsor at this tier, please remove this\n.. #placeholder as well as the icon links below. kthx\n.. #The `Bear Team <beartype organization_>`__ gratefully thanks `our family of\n.. #breathtaking GitHub Sponsors <beartype sponsorship_>`__:\n.. #\n.. #* **Your iconic URL here.** `Let us bestow you with eyeballs <beartype\n.. #  sponsorship_>`__.\n.. #FIXME: Once we actually receive a sponsor at this tier, please remove this\n.. #placeholder as well as the icon links below. kthx\n.. #    |icon-for-glorious-sponsor|\n\n.. code-block:: bash\n\n   # Install beartype.\n   $ pip3 install beartype\n   # So let's do this.\n   $ python3\n\n.. code-block:: python\n\n   # Import the @beartype decorator.\n   >>> from beartype import beartype\n\n   # Annotate @beartype-decorated classes and callables with type hints.\n   >>> @beartype\n   ... def quote_wiggum(lines: list[str]) -> None:\n   ...     print('“{}”\\n\\t— Police Chief Wiggum'.format(\"\\n \".join(lines)))\n\n   # Call those callables with valid parameters.\n   >>> quote_wiggum([\"Okay, folks. Show's over!\", \"Nothing to see here. Show's…\",])\n   “Okay, folks. Show's over!\n    Nothing to see here. Show's…”\n      — Police Chief Wiggum\n\n   # Call those callables with invalid parameters.\n   >>> quote_wiggum([b\"Oh, my God! A horrible plane crash!\", b\"Hey, everybody! Get a load of this flaming wreckage!\",])\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"<string>\", line 30, in quote_wiggum\n     File \"/home/springfield/beartype/lib/python3.9/site-packages/beartype/_decor/_code/_pep/_error/errormain.py\", line 220, in get_beartype_violation\n       raise exception_cls(\n   beartype.roar.BeartypeCallHintParamViolation: @beartyped\n   quote_wiggum() parameter lines=[b'Oh, my God! A horrible plane\n   crash!', b'Hey, everybody! Get a load of thi...'] violates type hint\n   list[str], as list item 0 value b'Oh, my God! A horrible plane crash!'\n   not str.\n\n   # ..................{ VALIDATORS  }..................\n   # Squash bugs by refining type hints with validators.\n   >>> from beartype.vale import Is  # <---- validator factory\n   >>> from typing import Annotated  # <---------------- if Python ≥ 3.9.0\n   # >>> from typing_extensions import Annotated   # <-- if Python < 3.9.0\n\n   # Validators are type hints constrained by lambda functions.\n   >>> ListOfStrings = Annotated[  # <----- type hint matching non-empty list of strings\n   ...     list[str],  # <----------------- type hint matching possibly empty list of strings\n   ...     Is[lambda lst: bool(lst)]  # <-- lambda matching non-empty object\n   ... ]\n\n   # Annotate @beartype-decorated callables with validators.\n   >>> @beartype\n   ... def quote_wiggum_safer(lines: ListOfStrings) -> None:\n   ...     print('“{}”\\n\\t— Police Chief Wiggum'.format(\"\\n \".join(lines)))\n\n   # Call those callables with invalid parameters.\n   >>> quote_wiggum_safer([])\n   beartype.roar.BeartypeCallHintParamViolation: @beartyped\n   quote_wiggum_safer() parameter lines=[] violates type hint\n   typing.Annotated[list[str], Is[lambda lst: bool(lst)]], as value []\n   violates validator Is[lambda lst: bool(lst)].\n\n   # ..................{ AT ANY TIME }..................\n   # Type-check anything against any type hint –\n   # anywhere at anytime.\n   >>> from beartype.door import (\n   ...     is_bearable,  # <-------- like \"isinstance(...)\"\n   ...     die_if_unbearable,  # <-- like \"assert isinstance(...)\"\n   ... )\n   >>> is_bearable(['The', 'goggles', 'do', 'nothing.'], list[str])\n   True\n   >>> die_if_unbearable([0xCAFEBEEF, 0x8BADF00D], ListOfStrings)\n   beartype.roar.BeartypeDoorHintViolation: Object [3405692655, 2343432205]\n   violates type hint typing.Annotated[list[str], Is[lambda lst: bool(lst)]],\n   as list index 0 item 3405692655 not instance of str.\n\n   # ..................{ GO TO PLAID }..................\n   # Type-check anything in around 1µs (one millionth of\n   # a second) – including this list of one million\n   # 2-tuples of NumPy arrays.\n   >>> from beartype.door import is_bearable\n   >>> from numpy import array, ndarray\n   >>> data = [(array(i), array(i)) for i in range(1000000)]\n   >>> %time is_bearable(data, list[tuple[ndarray, ndarray]])\n       CPU times: user 31 µs, sys: 2 µs, total: 33 µs\n       Wall time: 36.7 µs\n   True\n\nBeartype brings Rust_- and `C++`_-inspired `zero-cost abstractions <zero-cost\nabstraction_>`__ into the lawless world of `dynamically-typed`_ Python by\n`enforcing type safety at the granular level of functions and methods\n<Usage_>`__ against `type hints standardized by the Python community\n<Compliance_>`__ in `O(1) non-amortized worst-case time with negligible constant\nfactors <Timings_>`__. If the prior sentence was unreadable jargon, `see our\nfriendly and approachable FAQ for a human-readable synopsis <Frequently Asked\nQuestions (FAQ)_>`__.\n\nBeartype is `portably implemented <beartype codebase_>`__ in `Python 3\n<Python_>`__, `continuously stress-tested <beartype tests_>`__ via `GitHub\nActions`_ **×** tox_ **×** pytest_ **×** Codecov_, and `permissively\ndistributed <beartype license_>`__ under the `MIT license`_. Beartype has *no*\nruntime dependencies, `only one test-time dependency <pytest_>`__, and `only\none documentation-time dependency <Sphinx_>`__. Beartype supports `all actively\ndeveloped Python versions <Python status_>`__, `all Python package managers\n<Install_>`__, and `multiple platform-specific package managers <Install_>`__.\n\n.. #FIXME: So sad! @beartype's Libraries.io listing has gone stale for nearly a\n.. #year. And they've been shockingly unresponsive about this. Things seem...\n.. #not all right with their service. Until they resolve whatever Python-related\n.. #breakage has ruptured on their end, let's quietly disable this link and\n.. #pretend this never happened. *sigh*\n.. #    Beartype `powers quality assurance across the Python ecosystem <beartype\n.. #    dependents_>`__.\n\n.. # ------------------( TABLE OF CONTENTS                   )------------------\n.. # Blank line. By default, Docutils appears to only separate the subsequent\n.. # table of contents heading from the prior paragraph by less than a single\n.. # blank line, hampering this table's readability and aesthetic comeliness.\n\n|\n\n.. # Table of contents, excluding the above document heading. While the\n.. # official reStructuredText documentation suggests that a language-specific\n.. # heading will automatically prepend this table, this does *NOT* appear to\n.. # be the case. Instead, this heading must be explicitly declared.\n\n.. contents:: **Contents**\n   :local:\n\n.. # ------------------( DESCRIPTION                        )------------------\n\nInstall\n=======\n\nLet's install beartype with pip_:\n\n.. code-block:: bash\n\n   pip3 install beartype\n\nLet's install beartype with Anaconda_:\n\n.. code-block:: bash\n\n   conda config --add channels conda-forge\n   conda install beartype\n\n`Commemorate this moment in time <Badge_>`__ with |bear-ified|, our\nover\\ *bear*\\ ing project shield. What says quality like `a bear on a badge\n<Badge_>`__, amirite?\n\nPlatform\n--------\n\nBeartype is also installable with platform-specific package managers, because\nsometimes you just need this thing to work.\n\nmacOS\n~~~~~\n\nLet's install beartype with Homebrew_ on macOS_ courtesy `our third-party\ntap <beartype Homebrew_>`__:\n\n.. code-block:: bash\n\n   brew install beartype/beartype/beartype\n\nLet's install beartype with MacPorts_ on macOS_:\n\n.. code-block:: bash\n\n   sudo port install py-beartype\n\nA big bear hug to `our official macOS package maintainer @harens <harens_>`__\nfor `packaging beartype for our Apple-appreciating audience <beartype\nMacPorts_>`__.\n\nLinux\n~~~~~\n\nLet's install beartype with ``emerge`` on Gentoo_ courtesy `a third-party\noverlay <beartype Gentoo_>`__, because source-based Linux distributions are the\nCPU-bound nuclear option:\n\n.. code-block:: bash\n\n   emerge --ask app-eselect/eselect-repository\n   mkdir -p /etc/portage/repos.conf\n   eselect repository enable raiagent\n   emerge --sync raiagent\n   emerge beartype\n\n*What could be simpler?* O_o\n\nBadge\n-----\n\nIf you're feeling the quality assurance and want to celebrate, consider\nsignaling that you're now publicly *bear-*\\ ified:\n\n  YummySoft is now |bear-ified|!\n\nAll this magic and possibly more can be yours with:\n\n* **Markdown**:\n\n  .. code-block:: md\n\n     YummySoft is now [![bear-ified](https://raw.githubusercontent.com/beartype/beartype-assets/main/badge/bear-ified.svg)](https://beartype.readthedocs.io)!\n\n* **reStructuredText**:\n\n  .. code-block:: rst\n\n     YummySoft is now |bear-ified|!\n\n     .. # See https://docutils.sourceforge.io/docs/ref/rst/directives.html#image\n     .. |bear-ified| image:: https://raw.githubusercontent.com/beartype/beartype-assets/main/badge/bear-ified.svg\n        :align: top\n        :target: https://beartype.readthedocs.io\n        :alt: bear-ified\n\n* **Raw HTML**:\n\n  .. code-block:: html\n\n     YummySoft is now <a href=\"https://beartype.readthedocs.io\"><img\n       src=\"https://raw.githubusercontent.com/beartype/beartype-assets/main/badge/bear-ified.svg\"\n       alt=\"bear-ified\"\n       style=\"vertical-align: middle;\"></a>!\n\nLet a soothing pastel bear give your users the reassuring **OK** sign.\n\nOverview\n========\n\n.. parsed-literal::\n\n   Look for the bare necessities,\n     the simple bare necessities.\n   Forget about your worries and your strife.\n                           — `The Jungle Book`_.\n\nBeartype is a novel first line of defense. In Python's vast arsenal of\n`software quality assurance (SQA) <SQA_>`__, beartype holds the `shield wall`_\nagainst breaches in type safety by improper parameter and return values\nviolating developer expectations.\n\nBeartype is unopinionated. Beartype inflicts *no* developer constraints\nbeyond `importation and usage of a single configuration-free decorator\n<Cheatsheet_>`__. Beartype is trivially integrated into new and existing\napplications, stacks, modules, and scripts already annotating callables with\n`PEP-compliant industry-standard type hints <Compliance_>`__.\n\nBeartype is zero-cost. Beartype inflicts *no* harmful developer tradeoffs,\ninstead stressing expense-free strategies at both:\n\n* **Installation time.** Beartype has no install-time or runtime dependencies,\n  `supports standard Python package managers <Install_>`__, and happily\n  coexists with competing static type checkers and other runtime type checkers.\n* **Runtime.** Thanks to aggressive memoization and dynamic code generation at\n  decoration time, beartype guarantees `O(1) non-amortized worst-case runtime\n  complexity with negligible constant factors <Timings_>`__.\n\nVersus Static Type Checkers\n---------------------------\n\nLike `competing static type checkers <Static Type Checkers_>`__ operating at\nthe coarse-grained application level via ad-hoc heuristic type inference (e.g.,\nPyre_, mypy_, pyright_, pytype_), beartype effectively `imposes no runtime\noverhead <Timings_>`__. Unlike static type checkers:\n\n* Beartype operates exclusively at the fine-grained callable level of\n  pure-Python functions and methods via the standard decorator design pattern.\n  This renders beartype natively compatible with *all* interpreters and\n  compilers targeting the Python language – including Brython_, PyPy_, Numba_,\n  Nuitka_, and (wait for it) CPython_ itself.\n* Beartype enjoys deterministic Turing-complete access to the actual callables,\n  objects, and types being type-checked. This enables beartype to solve dynamic\n  problems decidable only at runtime – including type-checking of arbitrary\n  objects whose:\n\n  * Metaclasses `dynamically customize instance and subclass checks\n    <_isinstancecheck>`__ by implementing the ``__instancecheck__()`` and/or\n    ``__subclasscheck__()`` dunder methods, including:\n\n    * `PEP 3119`_-compliant metaclasses (e.g., `abc.ABCMeta`_).\n\n  * Pseudo-superclasses `dynamically customize the method resolution order\n    (MRO) of subclasses <_mro_entries>`__ by implementing the\n    ``__mro_entries__()`` dunder method, including:\n\n    * `PEP 560`_-compliant pseudo-superclasses.\n\n  * Classes dynamically register themselves with standard abstract base classes\n    (ABCs), including:\n\n    * `PEP 3119`_-compliant third-party virtual base classes.\n    * `PEP 3141`_-compliant third-party virtual number classes (e.g., SymPy_).\n\n  * Classes are dynamically constructed or altered, including by:\n\n    * Class decorators.\n    * Class factory functions and methods.\n    * Metaclasses.\n    * Monkey patches.\n\nVersus Runtime Type Checkers\n----------------------------\n\nUnlike `comparable runtime type checkers <Runtime Type Checkers_>`__ (e.g.,\npydantic_, typeguard_), beartype decorates callables with dynamically generated\nwrappers efficiently type-checking each parameter passed to and value returned\nfrom those callables in constant time. Since \"performance by default\" is our\nfirst-class concern, generated wrappers are guaranteed to:\n\n* Exhibit `O(1) non-amortized worst-case time complexity with negligible\n  constant factors <Timings_>`__.\n* Be either more efficient (in the common case) or exactly as efficient minus\n  the cost of an additional stack frame (in the worst case) as equivalent\n  type-checking implemented by hand, *which no one should ever do.*\n\nFrequently Asked Questions (FAQ)\n================================\n\nWhat is beartype?\n-----------------\n\nWhy, it's the world's first ``O(1)`` runtime type checker in any\n`dynamically-typed`_ lang... oh, *forget it.*\n\nYou know typeguard_? Then you know beartype – more or less. beartype is\ntypeguard_'s younger, faster, and slightly sketchier brother who routinely\ningests performance-enhancing anabolic nootropics.\n\nWhat is typeguard?\n------------------\n\n**Okay.** Work with us here, people.\n\nYou know how in low-level `statically-typed`_ `memory-unsafe <memory\nsafety_>`__ languages that no one should use like C_ and `C++`_, the compiler\nvalidates at compilation time the types of all values passed to and returned\nfrom all functions and methods across the entire codebase?\n\n.. code-block:: bash\n\n   $ gcc -Werror=int-conversion -xc - <<EOL\n   #include <stdio.h>\n   int main() {\n       printf(\"Hello, world!\");\n       return \"Goodbye, world.\";\n   }\n   EOL\n   <stdin>: In function ‘main’:\n   <stdin>:4:11: error: returning ‘char *’ from a function with return type\n   ‘int’ makes integer from pointer without a cast [-Werror=int-conversion]\n   cc1: some warnings being treated as errors\n\nYou know how in high-level `duck-typed <duck typing_>`__ languages that\neveryone should use instead like Python_ and Ruby_, the interpreter performs no\nsuch validation at any interpretation phase but instead permits any arbitrary\nvalues to be passed to or returned from any function or method?\n\n.. code-block:: bash\n\n   $ python3 - <<EOL\n   def main() -> int:\n       print(\"Hello, world!\");\n       return \"Goodbye, world.\";\n   main()\n   EOL\n\n   Hello, world!\n\nRuntime type checkers like beartype_ and typeguard_ selectively shift the dial\non type safety in Python from `duck <duck typing_>`__ to `static typing\n<statically-typed_>`__ while still preserving all of the permissive benefits of\nthe former as a default behaviour.\n\n.. code-block:: bash\n\n   $ python3 - <<EOL\n   from beartype import beartype\n   @beartype\n   def main() -> int:\n       print(\"Hello, world!\");\n       return \"Goodbye, world.\";\n   main()\n   EOL\n\n   Hello, world!\n   Traceback (most recent call last):\n     File \"<stdin>\", line 6, in <module>\n     File \"<string>\", line 17, in main\n     File \"/home/leycec/py/beartype/beartype/_decor/_code/_pep/_error/errormain.py\", line 218, in get_beartype_violation\n       raise exception_cls(\n   beartype.roar.BeartypeCallHintPepReturnException: @beartyped main() return\n   'Goodbye, world.' violates type hint <class 'int'>, as value 'Goodbye,\n   world.' not int.\n\nWhen should I use beartype?\n---------------------------\n\nUse beartype to assure the quality of Python code beyond what tests alone\ncan assure. If you have yet to test, do that first with a pytest_-based test\nsuite, tox_ configuration, and `continuous integration (CI) <continuous\nintegration_>`__. If you have any time, money, or motivation left, `annotate\ncallables with PEP-compliant type hints <Compliance_>`__ and `decorate those\ncallables with the @beartype.beartype decorator <Usage_>`__.\n\nPrefer beartype over other runtime and static type checkers whenever you\nlack control over the objects passed to or returned from your callables –\n*especially* whenever you cannot limit the size of those objects. This includes\ncommon developer scenarios like:\n\n* You are the author of an **open-source library** intended to be reused by a\n  general audience.\n* You are the author of a **public app** accepting as input or generating as\n  output sufficiently large data internally passed to or returned from app\n  callables.\n\nIf none of the above apply, prefer beartype over static type checkers\nwhenever:\n\n* You want to `check types decidable only at runtime <Versus Static Type\n  Checkers_>`__.\n* You want to write code rather than fight a static type checker, because\n  `static type inference <type inference_>`__ of a `dynamically-typed`_\n  language is guaranteed to fail and frequently does. If you've ever cursed the\n  sky after suffixing working code incorrectly typed by mypy_ with non-portable\n  vendor-specific pragmas like ``# type: ignore[{unreadable_error}]``,\n  beartype was written for you.\n* You want to preserve `dynamic typing`_, because Python is a\n  `dynamically-typed`_ language. Unlike beartype, static type checkers\n  enforce `static typing`_ and are thus strongly opinionated; they believe\n  `dynamic typing`_ is harmful and emit errors on `dynamically-typed`_ code.\n  This includes common use patterns like changing the type of a variable by\n  assigning that variable a value whose type differs from its initial value.\n  Want to freeze a variable from a ``set`` into a ``frozenset``? That's sad,\n  because static type checkers don't want you to. In contrast:\n\n    **Beartype never emits errors, warnings, or exceptions on dynamically-typed\n    code,** because Python is not an error.\n\n    **Beartype believes dynamic typing is beneficial by default,** because\n    Python is beneficial by default.\n\n    **Beartype is unopinionated.** That's because beartype `operates\n    exclusively at the higher level of pure-Python callables <Versus Static\n    Type Checkers_>`__ rather than the lower level of individual statements\n    *inside* pure-Python callables. Unlike static type checkers, beartype\n    can't be opinionated about things that no one should be.\n\nIf none of the above *still* apply, still use beartype. It's `free\nas in beer and speech <gratis versus libre_>`__, `cost-free at installation-\nand runtime <Overview_>`__, and transparently stacks with existing\ntype-checking solutions. Leverage beartype until you find something that\nsuites you better, because beartype is *always* better than nothing.\n\nWhy should I use beartype?\n--------------------------\n\nThe idea of beartype is that it never costs you anything. It might not do\nas much as you'd like, but it will always do *something* – which is more than\nPython's default behaviour, which is to do *nothing* and ignore type hints\naltogether. This means you can always safely add beartype to any Python\npackage, module, app, or script regardless of size, scope, funding, or audience\nand never worry about your backend Django_ server taking a nosedive on St.\nPatty's Day just because your frontend React_ client helpfully sent a 5MB JSON\nfile serializing a doubly-nested list of integers.\n\nThe idea of typeguard_ is that it does *everything.* If you annotate a function\ndecorated by typeguard_ as accepting a triply-nested list of integers and pass\nthat function a list of 1,000 nested lists of 1,000 nested lists of 1,000\nintegers, *every* call to that function will check *every* integer transitively\nnested in that list – even if that list never changes. Did we mention that list\ntransitively contains 1,000,000,000 integers in total?\n\n.. code-block:: bash\n\n   $ python3 -m timeit -n 1 -r 1 -s '\n   from typeguard import typechecked\n   @typechecked\n   def behold(the_great_destroyer_of_apps: list[list[list[int]]]) -> int:\n       return len(the_great_destroyer_of_apps)\n   ' 'behold([[[0]*1000]*1000]*1000)'\n\n   1 loop, best of 1: 6.42e+03 sec per loop\n\nYes, ``6.42e+03 sec per loop == 6420 seconds == 107 minutes == 1 hour, 47\nminutes`` to check a single list once. Yes, it's an uncommonly large list, but\nit's still just a list. This is the worst-case cost of a single call to a\nfunction decorated by a naïve runtime type checker.\n\nWhat does beartype do?\n----------------------\n\nGenerally, as little as it can while still satisfying the accepted definition\nof \"runtime type checker.\" Specifically, beartype performs a `one-way\nrandom walk over the expected data structure of objects passed to and returned\nfrom @beartype-decorated functions and methods <That's Some Catch, That\nCatch-22_>`__. Basically, beartype type-checks randomly sampled data.\n\nConsider `the prior example of a function annotated as accepting a\ntriply-nested list of integers passed a list containing 1,000 nested lists each\ncontaining 1,000 nested lists each containing 1,000 integers <Why should I use\nbeartype?_>`__.\n\nWhen decorated by typeguard_, every call to that function checks every integer\nnested in that list.\n\nWhen decorated by beartype, every call to the same function checks only a\nsingle random integer contained in a single random nested list contained in a\nsingle random nested list contained in that parent list. This is what we mean\nby the quaint phrase \"one-way random walk over the expected data structure.\"\n\n.. code-block:: bash\n\n   $ python3 -m timeit -n 1024 -r 4 -s '\n   from beartype import beartype\n   @beartype\n   def behold(the_great_destroyer_of_apps: list[list[list[int]]]) -> int:\n      return len(the_great_destroyer_of_apps)\n   ' 'behold([[[0]*1000]*1000]*1000)'\n\n   1024 loops, best of 4: 13.8 usec per loop\n\n``13.8 usec per loop == 13.8 microseconds = 0.0000138 seconds`` to transitively\ncheck only a random integer nested in a single triply-nested list passed to\neach call of that function. This is the worst-case cost of a single call to a\nfunction decorated by an ``O(1)`` runtime type checker.\n\nWhat does \"near-real-time\" even mean?\n-------------------------------------\n\n.. _beartype realtime:\n\nBeartype type-checks objects at runtime in around **1µs** (i.e., one\nmicrosecond, one millionth of a second), the standard high-water mark for\n`real-time software <real-time_>`__:\n\n.. code-block:: python\n\n   # Let's check a list of 181,320,382 integers in ~1µs.\n   >>> from beartype import beartype\n   >>> def sum_list_unbeartyped(some_list: list) -> int:\n   ...     return sum(some_list)\n   >>> sum_list_beartyped = beartype(sum_list_unbeartyped)\n   >>> %time sum_list_unbeartyped([42]*0xACEBABE)\n   CPU times: user 3.15 s, sys: 418 ms, total: 3.57 s\n   Wall time: 3.58 s  # <-- okay.\n   Out[20]: 7615456044\n   >>> %time sum_list_beartyped([42]*0xACEBABE)\n   CPU times: user 3.11 s, sys: 440 ms, total: 3.55 s\n   Wall time: 3.56 s  # <-- woah.\n   Out[22]: 7615456044\n\nBeartype does *not* contractually guarantee this performance, as the above\nexample demonstrates. Under abnormal processing loads (e.g., leycec_'s arthritic\nAthlon™ II X2 240, because you can't have enough redundant 2's in a product\nline) or when passed edge-case type hints (e.g., classes whose metaclasses\nimplement stunningly bad ``__isinstancecheck__()`` dunder methods), worst-case\nperformance could exceed the average-case near-instantaneous response time.\n\nBeartype is therefore *not* real-time_; beartype is merely `near-real-time (NRT)\n<near-real-time_>`__, also variously referred to as \"pseudo-real-time,\"\n\"quasi-real-time,\" or simply \"high-performance.\" Real-time_ software guarantees\nperformance with a scheduler forcibly terminating tasks exceeding some deadline.\nThat's bad in most use cases. The outrageous cost of enforcement harms\nreal-world performance, stability, and usability.\n\nThus NRT. It's good for you. It's good for me. It's just good.\n\nHow do I type-check...\n----------------------\n\n...yes? Go on.\n\n...Boto3 types?\n~~~~~~~~~~~~~~~\n\n**tl;dr:** You just want bearboto3_, a well-maintained third-party package\ncleanly integrating beartype **+** Boto3_. But you're not doing that.\nYou're reading on to find out why you want bearboto3_, aren't you? I *knew* it.\n\nBoto3_ is the official Amazon Web Services (AWS) Software Development Kit (SDK)\nfor Python. Type-checking Boto3_ types is decidedly non-trivial, because Boto3_\ndynamically fabricates unimportable types from runtime service requests. These\ntypes *cannot* be externally accessed and thus *cannot* be used as type hints.\n\n**H-hey!** Put down the hot butter knife. Your Friday night may be up in\nflames, but we're gonna put out the fire. It's what we do here. Now, you have\ntwo competing solutions with concomitant tradeoffs. You can type-check Boto3_\ntypes against either:\n\n* **Static type checkers** (e.g., mypy_, pyright_) by importing Boto3_ stub\n  types from an external third-party dependency (e.g., mypy-boto3_), enabling\n  context-aware code completion across compliant IDEs (e.g., PyCharm_, `VSCode\n  Pylance <Pylance_>`__). Those types are merely placeholder stubs; they do\n  *not* correspond to actual Boto3_ types and thus break runtime type checkers\n  (including beartype) when used as type hints.\n* **Beartype** by fabricating your own `PEP-compliant beartype validators\n  <Beartype Validators_>`__, enabling beartype to validate arbitrary\n  objects against actual Boto3_ types at runtime when used as type hints. You\n  already require beartype, so no additional third-party dependencies are\n  required. Those validators are silently ignored by static type checkers; they\n  do *not* enable context-aware code completion across compliant IDEs.\n\n\"B-but that *sucks*! How can we have our salmon and devour it too?\", you demand\nwith a tremulous quaver. Excessive caffeine and inadequate gaming did you no\nfavors tonight. You know this. Yet again you reach for the hot butter knife.\n\n**H-hey!** You can, okay? You can have everything that market forces demand.\nBring to *bear* :superscript:`cough` the combined powers of `PEP 484-compliant\ntype aliases <type aliases_>`__, the `PEP 484-compliant \"typing.TYPE_CHECKING\"\nboolean global <typing.TYPE_CHECKING_>`__, and `beartype validators <Beartype\nValidators_>`__ to satisfy both static and runtime type checkers:\n\n.. code-block:: python\n\n   # Import the requisite machinery.\n   from beartype import beartype\n   from boto3 import resource\n   from boto3.resources.base import ServiceResource\n   from typing import TYPE_CHECKING\n\n   # If performing static type-checking (e.g., mypy, pyright), import boto3\n   # stub types safely usable *ONLY* by static type checkers.\n   if TYPE_CHECKING:\n       from mypy_boto3_s3.service_resource import Bucket\n   # Else, @beartime-based runtime type-checking is being performed. Alias the\n   # same boto3 stub types imported above to their semantically equivalent\n   # beartype validators accessible *ONLY* to runtime type checkers.\n   else:\n       # Import even more requisite machinery. Can't have enough, I say!\n       from beartype.vale import IsAttr, IsEqual\n       from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n       # from typing_extensions import Annotated   # <-- if Python < 3.9.0\n\n       # Generalize this to other boto3 types by copy-and-pasting this and\n       # replacing the base type and \"s3.Bucket\" with the wonky runtime names\n       # of those types. Sadly, there is no one-size-fits all common base class,\n       # but you should find what you need in the following places:\n       # * \"boto3.resources.base.ServiceResource\".\n       # * \"boto3.resources.collection.ResourceCollection\".\n       # * \"botocore.client.BaseClient\".\n       # * \"botocore.paginate.Paginator\".\n       # * \"botocore.waiter.Waiter\".\n       Bucket = Annotated[ServiceResource,\n           IsAttr['__class__', IsAttr['__name__', IsEqual[\"s3.Bucket\"]]]]\n\n   # Do this for the good of the gross domestic product, @beartype.\n   @beartype\n   def get_s3_bucket_example() -> Bucket:\n       s3 = resource('s3')\n       return s3.Bucket('example')\n\nYou're welcome.\n\n...JAX arrays?\n~~~~~~~~~~~~~~\n\nYou only have two options here. Choose wisely, wily scientist. If:\n\n* You don't mind adding an **additional mandatory runtime dependency** to your\n  app:\n\n  * Require the `third-party \"jaxtyping\" package <jaxtyping_>`__.\n  * Annotate callables with type hint factories published by ``jaxtyping``\n    (e.g., ``jaxtyping.Float[jaxtyping.Array, '{metadata1 ... metadataN}']``).\n\n  Beartype fully supports `typed JAX arrays <jaxtyping_>`__. Because\n  `Google mathematician @patrick-kidger <patrick-kidger_>`__ did all the hard\n  work, we didn't have to. Bless your runtime API, @patrick-kidger.\n\n* You mind adding an additional mandatory runtime dependency to your app, prefer\n  `beartype validators <Tensor Property Matching_>`__. Since `JAX declares a\n  broadly similar API to that of NumPy with its \"jax.numpy\" compatibility layer\n  <jax.numpy_>`__, most NumPy-specific examples cleanly generalize to JAX.\n  Beartype is *no* exception.\n\nBask in the array of options at your disposal! :superscript:`...get it?\n...array? I'll stop now.`\n\n...NumPy arrays?\n~~~~~~~~~~~~~~~~\n\nYou have more than a few options here. If you want to type-check:\n\n* The ``dtype`` of a NumPy array, prefer the `official\n  \"numpy.typing.NDArray[{dtype}]\" type hint factory bundled with NumPy\n  explicitly supported by beartype <NumPy Type Hints_>`__ – also referred to as\n  a `typed NumPy array <NumPy Type Hints_>`__.\n* The ``shape`` of a NumPy array (and possibly more), you have two additional\n  sub-options here depending on whether:\n\n  * You want **static type-checkers** to enforce that ``shape`` *and* you don't\n    mind adding an **additional mandatory runtime dependency** to your app. In\n    this case:\n\n    * Require the `third-party \"nptyping\" package <nptyping_>`__.\n    * Prefer the unofficial ``nptyping.NDArray[{nptyping.dtype},\n      nptyping.Shape[...]]`` type hint factory implicitly supported by beartype.\n\n    Beartype fully supports `typed NumPy arrays <NumPy Type Hints_>`__. Because\n    beartype cares.\n\n  * You don't mind static type-checkers ignoring that ``shape`` *or* you mind\n    adding an additional mandatory runtime dependency to your app. In this case,\n    prefer `beartype validators <Tensor Property Matching_>`__.\n\nOptions are good! Repeat this mantra in times of need.\n\n...PyTorch tensors?\n~~~~~~~~~~~~~~~~~~~\n\nYou only have two options here. We're pretty sure two is better than none.\nThus, we give thanks. If:\n\n* You don't mind adding an **additional mandatory runtime dependency** to your\n  app:\n\n  * Require the `third-party \"TorchTyping\" package <TorchTyping_>`__.\n  * Annotate callables with type hint factories published by TorchTyping (e.g.,\n    ``TorchTyping.TensorType['{metadata1}', ..., '{metadataN}']``).\n\n  Beartype fully supports `typed PyTorch tensors <TorchTyping_>`__. Because\n  `Google mathematician @patrick-kidger <patrick-kidger_>`__ did all the hard\n  work, we didn't have to. Bless your runtime API, @patrick-kidger.\n\n* You mind adding an additional mandatory runtime dependency to your app. In\n  this case, prefer `beartype validators <Beartype Validators_>`__. For example,\n  validate callable parameters and returns as either floating-point *or*\n  integral PyTorch tensors via the `functional validator factory\n  beartype.vale.Is[...] <Is_>`__:\n\n  .. code-block:: python\n\n     # Import the requisite machinery.\n     from beartype import beartype\n     from beartype.vale import Is\n     from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n     # from typing_extensions import Annotated   # <-- if Python < 3.9.0\n\n     # Import PyTorch (d)types of interest.\n     from torch import (\n         float as torch_float,\n         int as torch_int,\n         tensor,\n     )\n\n     # PEP-compliant type hint matching only a floating-point PyTorch tensor.\n     TorchTensorFloat = Annotated[tensor, Is[\n         lambda tens: tens.type() is torch_float]]\n\n     # PEP-compliant type hint matching only an integral PyTorch tensor.\n     TorchTensorInt = Annotated[tensor, Is[\n         lambda tens: tens.type() is torch_int]]\n\n     # Type-check everything like an NLP babelfish.\n     @beartype\n     def deep_dream(dreamy_tensor: TorchTensorFloat) -> TorchTensorInt:\n         return dreamy_tensor.type(dtype=torch_int)\n\n  Since `beartype.vale.Is[...] <Is_>`__ supports arbitrary Turing-complete\n  Python expressions, the above example generalizes to typing the device,\n  dimensionality, and other metadata of PyTorch tensors to whatever degree of\n  specificity you desire.\n\n  `beartype.vale.Is[...] <Is_>`__: *it's lambdas all the way down.*\n\n...mock types?\n~~~~~~~~~~~~~~\n\nBeartype fully relies upon the `isinstance() builtin <isinstance_>`__ under the\nhood for its low-level runtime type-checking needs. If you can fool\n``isinstance()``, you can fool beartype. Can you fool beartype into believing\nan instance of a mock type is an instance of the type it mocks, though?\n\n**You bet your bottom honey barrel.** In your mock type, just define a new\n``__class__()`` property returning the original type: e.g.,\n\n.. code-block:: python\n\n   >>> class OriginalType: pass\n   >>> class MockType:\n   ...     @property\n   ...     def __class__(self) -> OriginalType: return OriginalType\n   >>> from beartype import beartype\n   >>> @beartype\n   ... def muh_func(self, muh_arg: OriginalType): print('Yolo, bro.')\n   >>> muh_func(MockType())\n   Yolo, bro.\n\nThis is why we beartype.\n\n...under VSCode?\n~~~~~~~~~~~~~~~~\n\n**Beartype fully supports VSCode out-of-the-box** – especially via Pylance_,\nMicrosoft's bleeding-edge Python extension for VSCode. Chortle in your joy,\ncorporate subscribers and academic sponsors! All the intellisense you can\ntab-complete and more is now within your honey-slathered paws. Why? Because...\n\nBeartype laboriously complies with pyright_, Microsoft's in-house static\ntype-checker for Python. Pylance_ enables pyright_ as its default static\ntype-checker. Beartype thus complies with Pylance_, too.\n\nBeartype *also* laboriously complies with mypy_, Python's official static\ntype-checker. VSCode users preferring mypy_ to pyright_ may switch Pylance_ to\ntype-check via the former. Just:\n\n#. `Install mypy <mypy install_>`__.\n#. `Install the VSCode Mypy extension <VSCode Mypy extension_>`__.\n#. Open the *User Settings* dialog.\n#. Search for ``Type Checking Mode``.\n#. Browse to ``Python › Analysis: Type Checking Mode``.\n#. Switch the \"default rule set for type checking\" to ``off``.\n\n|VSCode-Pylance-type-checking-setting|\n\n:superscript:`Pretend that reads \"off\" rather than \"strict\". Pretend we took\nthis screenshot.`\n\nThere are tradeoffs here, because that's just how the code rolls. On:\n\n* The one paw, pyright_ is *significantly* more performant than mypy_ under\n  Pylance_ and supports type-checking standards currently unsupported by mypy_\n  (e.g., recursive type hints).\n* The other paw, mypy_ supports a vast plugin architecture enabling third-party\n  Python packages to describe dynamic runtime behaviour statically.\n\nBeartype: we enable hard choices, so that you can make them for us.\n\n...under [insert-IDE-name-here]?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBeartype fully complies with mypy_, pyright_, `PEP 561`_, and other community\nstandards that govern how Python is statically type-checked. Modern Integrated\nDevelopment Environments (IDEs) support these standards - hopefully including\nyour GigaChad IDE of choice.\n\n...with type narrowing?\n~~~~~~~~~~~~~~~~~~~~~~~\n\nBeartype fully supports `type narrowing`_ with the `PEP 647`_-compliant\ntyping.TypeGuard_ type hint. In fact, beartype supports type narrowing of *all*\nPEP-compliant type hints and is thus the first maximal type narrower.\n\nSpecifically, the `procedural beartype.door.is_bearable() function\n<is_bearable_>`__ and `object-oriented beartype.door.TypeHint.is_bearable()\nmethod <beartype.door_>`__ both narrow the type of the passed test object (which\ncan be *anything*) to the passed type hint (which can be *anything*\nPEP-compliant). Both soft-guarantee runtime performance on the order of less\nthan 1µs (i.e., less than one millionth of a second), preserving runtime\nperformance and your personal sanity.\n\nCalling either `is_bearable() <is_bearable_>`__ *or* `TypeHint.is_bearable()\n<beartype.door_>`__ in your code enables beartype to symbiotically eliminate\nfalse positives from static type-checkers checking that code, substantially\nreducing static type-checker spam that went rotten decades ago: e.g.,\n\n.. code-block:: python\n\n   # Import the requisite machinery.\n   from beartype.door import is_bearable\n\n   def narrow_types_like_a_boss_with_beartype(lst: list[int | str]):\n       '''\n       This function eliminates false positives from static type-checkers\n       like mypy and pyright by narrowing types with ``is_bearable()``.\n\n       Note that decorating this function with ``@beartype`` is *not*\n       required to inform static type-checkers of type narrowing. Of\n       course, you should still do that anyway. Trust is a fickle thing.\n       '''\n\n       # If this list contains integers rather than strings, call another\n       # function accepting only a list of integers.\n       if is_bearable(lst, list[int]):\n           # \"lst\" has been though a lot. Let's celebrate its courageous story.\n           munch_on_list_of_strings(lst)  # mypy/pyright: OK!\n       # If this list contains strings rather than integers, call another\n       # function accepting only a list of strings.\n       elif is_bearable(lst, list[str]):\n           # \"lst\": The Story of \"lst.\" The saga of false positives ends now.\n           munch_on_list_of_strings(lst)  # mypy/pyright: OK!\n\n   def munch_on_list_of_strings(lst: list[str]): ...\n   def munch_on_list_of_integers(lst: list[int]): ...\n\nBeartype: *because you no longer care what static type-checkers think.*\n\nUsage\n=====\n\nBeartype makes type-checking painless, portable, and purportedly fun. Just:\n\n    Decorate functions and methods `annotated by standard type hints <Standard\n    Hints_>`__ with the ``@beartype.beartype`` decorator, which wraps those\n    functions and methods in performant type-checking dynamically generated\n    on-the-fly.\n\n    When `standard type hints <Standard Hints_>`__ fail to support your use\n    case, annotate functions and methods with `beartype-specific validator type\n    hints <Beartype Validators_>`__ instead. Validators enforce runtime\n    constraints on the internal structure and contents of parameters and\n    returns via simple caller-defined lambda functions and declarative\n    expressions – all seamlessly composable with `standard type hints <Standard\n    Hints_>`__ in an `expressive domain-specific language (DSL) <Validator\n    Syntax_>`__ designed just for you.\n\n\"Embrace the bear,\" says the bear peering over your shoulder as you read this.\n\nStandard Hints\n--------------\n\nBeartype supports *most* `type hints standardized by the developer community\nthrough Python Enhancement Proposals (PEPs) <Compliance_>`__. Since type\nhinting is its own special hell, we'll start by wading into the\nthalassophobia-inducing waters of type-checking with a sane example – the O(1)\n``@beartype`` way.\n\nToy Example\n~~~~~~~~~~~\n\nLet's type-check a ``\"Hello, Jungle!\"`` toy example. Just:\n\n#. Import the ``@beartype.beartype`` decorator:\n\n   .. code-block:: python\n\n      from beartype import beartype\n\n#. Decorate any annotated function with that decorator:\n\n   .. code-block:: python\n\n      from sys import stderr, stdout\n      from typing import TextIO\n\n      @beartype\n      def hello_jungle(\n          sep: str = ' ',\n          end: str = '\\n',\n          file: TextIO = stdout,\n          flush: bool = False,\n      ):\n          '''\n          Print \"Hello, Jungle!\" to a stream, or to sys.stdout by default.\n\n          Optional keyword arguments:\n          file:  a file-like object (stream); defaults to the current sys.stdout.\n          sep:   string inserted between values, default a space.\n          end:   string appended after the last value, default a newline.\n          flush: whether to forcibly flush the stream.\n          '''\n\n          print('Hello, Jungle!', sep, end, file, flush)\n\n#. Call that function with valid parameters and caper as things work:\n\n   .. code-block:: python\n\n      >>> hello_jungle(sep='...ROOOAR!!!!', end='uhoh.', file=stderr, flush=True)\n      Hello, Jungle! ...ROOOAR!!!! uhoh.\n\n#. Call that function with invalid parameters and cringe as things blow up with\n   human-readable exceptions exhibiting the single cause of failure:\n\n   .. code-block:: python\n\n      >>> hello_jungle(sep=(\n      ...     b\"What? Haven't you ever seen a byte-string separator before?\"))\n      BeartypeCallHintPepParamException: @beartyped hello_jungle() parameter\n      sep=b\"What? Haven't you ever seen a byte-string separator before?\"\n      violates type hint <class 'str'>, as value b\"What? Haven't you ever seen\n      a byte-string separator before?\" not str.\n\nIndustrial Example\n~~~~~~~~~~~~~~~~~~\n\nLet's wrap the `third-party numpy.empty_like() function <numpy.empty_like_>`__\nwith automated runtime type checking to demonstrate beartype's support for\nnon-trivial combinations of nested type hints compliant with different PEPs:\n\n.. code-block:: python\n\n   from beartype import beartype\n   from collections.abc import Sequence\n   from typing import Optional, Union\n   import numpy as np\n\n   @beartype\n   def empty_like_bear(\n       prototype: object,\n       dtype: Optional[np.dtype] = None,\n       order: str = 'K',\n       subok: bool = True,\n       shape: Optional[Union[int, Sequence[int]]] = None,\n   ) -> np.ndarray:\n       return np.empty_like(prototype, dtype, order, subok, shape)\n\nNote the non-trivial hint for the optional ``shape`` parameter, synthesized\nfrom a `PEP 484-compliant optional <typing.Optional_>`__ of a `PEP\n484-compliant union <typing.Union_>`__ of a builtin type and a `PEP\n585-compliant subscripted abstract base class (ABC)\n<collections.abc.Sequence_>`__, accepting as valid either:\n\n* The ``None`` singleton.\n* An integer.\n* A sequence of integers.\n\nLet's call that wrapper with both valid and invalid parameters:\n\n.. code-block:: python\n\n   >>> empty_like_bear(([1,2,3], [4,5,6]), shape=(2, 2))\n   array([[94447336794963,              0],\n          [             7,             -1]])\n   >>> empty_like_bear(([1,2,3], [4,5,6]), shape=([2], [2]))\n   BeartypeCallHintPepParamException: @beartyped empty_like_bear() parameter\n   shape=([2], [2]) violates type hint typing.Union[int,\n   collections.abc.Sequence, NoneType], as ([2], [2]):\n   * Not <class \"builtins.NoneType\"> or int.\n   * Tuple item 0 value [2] not int.\n\nNote the human-readable message of the raised exception, containing a bulleted\nlist enumerating the various ways this invalid parameter fails to satisfy its\ntype hint, including the types and indices of the first container item failing\nto satisfy the nested ``Sequence[int]`` hint.\n\nSee a `subsequent section <Implementation_>`__ for actual code dynamically\ngenerated by beartype for real-world use cases resembling those above. Fun!\n\nWould You Like to Know More?\n----------------------------\n\nIf you know `type hints <PEP 484_>`__, you know beartype. Since\nbeartype is driven entirely by `tool-agnostic community standards <PEP\n0_>`__, the public API for beartype is exactly the sum of those standards.\nAs the user, all you need to know is that decorated callables magically raise\nhuman-readable exceptions when you pass parameters or return values violating\nthe PEP-compliant type hints annotating those parameters or returns.\n\nIf you don't know `type hints <PEP 484_>`__, this is your moment to go deep on\nthe hardest hammer in Python's SQA_ toolbox. Here are a few friendly primers to\nguide you on your maiden voyage through the misty archipelagos of type hinting:\n\n* `\"Python Type Checking (Guide)\" <RealPython_>`__, a comprehensive third-party\n  introduction to the subject. Like most existing articles, this guide predates\n  ``O(1)`` runtime type checkers and thus discusses only static type checking.\n  Thankfully, the underlying syntax and semantics cleanly translate to runtime\n  type checking.\n* `\"PEP 484 -- Type Hints\" <PEP 484_>`__, the defining standard, holy grail,\n  and first testament of type hinting `personally authored by Python's former\n  Benevolent Dictator for Life (BDFL) himself, Guido van Rossum <Guido van\n  Rossum_>`__. Since it's surprisingly approachable and covers all the core\n  conceits in detail, we recommend reading at least a few sections of interest.\n  Since it's really a doctoral thesis by another name, we can't recommend\n  reading it in entirety. *So it goes.*\n\n.. #FIXME: Concatenate the prior list item with this when I am no exhausted.\n.. #  Instead, here's the highlights reel:\n.. #\n.. #  * `typing.Union`_, enabling .\n\nBeartype Object-oriented API\n----------------------------\n\n.. _beartype.door:\n\n.. # FIXME: Synopsize this in our introduction and cheatsheet, please!\n.. # FIXME: Synopsize class decoration in our introduction, too!\n\nMost Python projects only annotate objects with type hints. The actual usage of\nthose type hints is left to other projects.\n\nSome Python projects, however, actually do use type hints to perform productive\nwork at runtime. You are reading about one such project. But perhaps we're not\nthe only reckless explorers into these uncharted waters. Perhaps your brave\nPython project also wants to introspect, inspect, investigate, or otherwise\nbreak into the locked cathedral of type hints. If so, you've seen that type\nhints do *not* define a usable public Pythonic API. This was by design. But\nthat's a bad design.\n\nEnter the **DOOR** (\\ **D**\\ ecidedly **O**\\ bject-\\ **o**\\ riented\n**R**\\ untime-checker): the first usable public Pythonic API for introspecting,\ncomparing, and type-checking type hints in ``O(1)`` time with negligible\nconstants. Let's cheatsheet this.\n\n.. code-block:: python\n\n   # This is DOOR. It's a Pythonic API providing an object-oriented interface\n   # to low-level type hints that basically have no interface whatsoever.\n   >>> from beartype.door import TypeHint\n\n   # DOOR hint wrapping a PEP 604-compliant type union.\n   >>> union_hint = TypeHint(int | str | None)  # <-- so. it begins.\n\n   # DOOR hints have Pythonic public classes -- unlike normal type hints.\n   >>> type(union_hint)\n   beartype.door.UnionTypeHint  # <-- what madness is this?\n\n   # DOOR hints can be detected Pythonically -- unlike normal type hints.\n   >>> from beartype.door import UnionTypeHint\n   >>> isinstance(union_hint, UnionTypeHint)  # <-- *shocked face*\n   True\n\n   # DOOR hints can be type-checked Pythonically -- unlike normal type hints.\n   >>> union_hint.is_bearable('The unbearable lightness of type-checking.')\n   True\n   >>> union_hint.die_if_unbearable(b'The @beartype that cannot be named.')\n   beartype.roar.BeartypeDoorHintViolation: Object b'The @beartype that cannot\n   be named.' violates type hint int | str | None, as bytes b'The @beartype\n   that cannot be named.' not str, <class \"builtins.NoneType\">, or int.\n\n   # DOOR hints can be iterated Pythonically -- unlike normal type hints.\n   >>> for child_hint in union_hint: print(child_hint)\n   TypeHint(<class 'int'>)\n   TypeHint(<class 'str'>)\n   TypeHint(<class 'NoneType'>)\n\n   # DOOR hints can be indexed Pythonically -- unlike normal type hints.\n   >>> union_hint[0]\n   TypeHint(<class 'int'>)\n   >>> union_hint[-1]\n   TypeHint(<class 'str'>)\n\n   # DOOR hints can be sliced Pythonically -- unlike normal type hints.\n   >>> union_hint[0:2]\n   (TypeHint(<class 'int'>), TypeHint(<class 'str'>))\n\n   # DOOR hints supports \"in\" Pythonically -- unlike normal type hints.\n   >>> TypeHint(int) in union_hint  # <-- it's all true.\n   True\n   >>> TypeHint(bool) in union_hint  # <-- believe it.\n   False\n\n   # DOOR hints are sized Pythonically -- unlike normal type hints.\n   >>> len(union_hint)  # <-- woah.\n   3\n\n   # DOOR hints test as booleans Pythonically -- unlike normal type hints.\n   >>> if union_hint: print('This type hint has children.')\n   This type hint has children.\n   >>> if not TypeHint(tuple[()]): print('But this other type hint is empty.')\n   But this other type hint is empty.\n\n   # DOOR hints support equality Pythonically -- unlike normal type hints.\n   >>> from typing import Union\n   >>> union_hint == TypeHint(Union[int, str, None])\n   True  # <-- this is madness.\n\n   # DOOR hints support comparisons Pythonically -- unlike normal type hints.\n   >>> union_hint <= TypeHint(int | str | bool | None)\n   True  # <-- madness continues.\n\n   # DOOR hints publish the low-level type hints they wrap.\n   >>> union_hint.hint\n   int | str | None  # <-- makes sense.\n\n   # DOOR hints publish tuples of the low-level child type hints subscripting\n   # (indexing) the low-level parent type hints they wrap -- unlike normal type\n   # hints, which unreliably publish similar tuples under differing names.\n   >>> union_hint.args\n   (int, str, NoneType)  # <-- sense continues to be made.\n\n   # DOOR hints are semantically self-caching.\n   >>> TypeHint(int | str | bool | None) is TypeHint(None | bool | str | int)\n   True  # <-- blowing minds over here.\n\n``beartype.door.TypeHint`` wrappers:\n\n* Are **immutable**, **hashable**, and safely usable both as dictionary keys and\n  in sets.\n* Support efficient **lookup** of child type hints – just like **dictionaries**\n  and **sets**.\n* Support efficient **iteration** over and **random access** of child type hints\n  – just like **lists** and **tuples**.\n* Are **partially ordered** over the set of all type hints (according to the\n  `subhint relation <is_subhint_>`__) and safely usable in any algorithm\n  accepting a partial ordering (e.g., `topological sort`_).\n* Guarantee similar performance as ``@beartype`` itself. All ``TypeHint``\n  methods and properties run in (possibly `amortized <amortized analysis_>`__)\n  **constant time** with negligible constants.\n\n``beartype.door``: never leave typing_ without it.\n\n.. # FIXME: Write us up, please.\n.. # TypeHint Methods\n.. # ~~~~~~~~~~~~~~~~\n.. #\n.. #\n.. # TypeHint as Sequence\n.. # ~~~~~~~~~~~~~~~~~~~~\n.. #\n.. # TypeHint as Set\n.. # ~~~~~~~~~~~~~~~\n.. #\n.. # TypeHint Comparison\n.. # ~~~~~~~~~~~~~~~~~~~\n\nBeartype Procedural API\n------------------------\n\nType-check *anything* at *any* time against *any* type hint. When the\n``isinstance()`` and ``issubclass()`` builtins fail to scale, prefer the\n``beartype.door`` procedural API.\n\n.. # FIXME: Document the new \"beartype.peps\" submodule as well, please!\n\n.. _beartype.door.die_if_unbearable:\n.. _die_if_unbearable:\n\n*def* beartype.door.\\ **die_if_unbearable**\\ (obj: object, hint: object, \\*,\nconf: beartype.BeartypeConf_ = BeartypeConf()) -> None\n\n    **Type-hint exception raiser,** either:\n\n    * Raising a human-readable exception if the passed arbitrary object ``obj``\n      violates the passed PEP-compliant type hint ``hint`` under the passed\n      beartype configuration ``conf``.\n    * Reducing to a noop otherwise (i.e., if ``obj`` satisfies ``hint`` under\n      ``conf``).\n\n    .. code-block:: python\n\n       >>> from beartype.door import die_if_unbearable\n       >>> from beartype.typing import List, Sequence, Optional, Union\n       >>> die_if_unbearable(\"My people ate them all!\", Union[List[int], None])\n       BeartypeDoorHintViolation: Object 'My people ate them all!' violates type\n       hint typing.Optional[list[int]], as str 'My people ate them all!' not\n       list or <class \"builtins.NoneType\">.\n       >>> die_if_unbearable(\"I'm swelling with patriotic mucus!\", Optional[str])\n       >>> die_if_unbearable(\"I'm not on trial here.\", Sequence[str])\n\n    For those familiar with typeguard_, this function implements the beartype\n    equivalent of the low-level typeguard.check_type_ function.\n\n    See ``help(beartype.door.die_if_unbearable)`` for further details.\n\n.. _beartype.door.is_bearable:\n.. _is_bearable:\n\n*def* beartype.door.\\ **is_bearable**\\ (obj: object, hint: object, \\*, conf:\nbeartype.BeartypeConf_ = BeartypeConf()) -> bool\n\n    **Type-hint tester,** returning either:\n\n    * ``True`` if the passed arbitrary object ``obj`` satisfies the passed\n      PEP-compliant type hint ``hint`` under the passed beartype configuration\n      ``conf``.\n    * ``False`` otherwise.\n\n    .. code-block:: python\n\n       >>> from beartype.door import is_bearable\n       >>> from beartype.typing import List, Sequence, Optional, Union\n       >>> is_bearable(\"Kif, I’m feeling the ‘Captain's itch.’\", Optional[str])\n       True\n       >>> is_bearable('I hate these filthy Neutrals, Kif.', Sequence[str])\n       True\n       >>> is_bearable('Stop exploding, you cowards.', Union[List[bool], None])\n       False\n\n    This tester is a strict superset of the ``isinstance()`` builtin and can\n    thus be safely called wherever that builtin is called with the same exact\n    parameters in the same exact order:\n\n    .. code-block:: python\n\n       >>> from beartype.door import is_bearable\n       >>> is_bearable('I surrender and volunteer for treason.', str)\n       True\n       >>> is_bearable(b'Stop exploding, you cowards.', (str, bytes))\n       True\n       >>> is_bearable('Comets, the icebergs of the sky.', bool | None)\n       False\n\n    This tester is also a *spiritual* superset of the ``issubclass()`` builtin\n    and can thus be safely called wherever that builtin is called by replacing\n    the superclass(es) to be tested against with a ``type[{superclass}]`` or\n    ``typing.Union[type[{superclass1}], ..., type[{superclassN}]]`` type hint:\n\n    .. code-block:: python\n\n       >>> from beartype.door import is_bearable\n       >>> from beartype.typing import Type, Union\n       >>> from collections.abc import Awaitable, Collection, Iterable\n       >>> is_bearable(str, Type[Iterable])\n       True\n       >>> is_bearable(bytes, Union[Type[Collection], Type[Awaitable]])\n       True\n       >>> is_bearable(bool, Union[Type[str], Type[float]])\n       False\n\n    See ``help(beartype.door.is_bearable)`` for further details.\n\n.. _is_subhint:\n\n*def* beartype.door.\\ **is_subhint**\\ (subhint: object, superhint: object) ->\nbool\n\n    **Subhint tester,** returning either:\n\n    * ``True`` if the first passed PEP-compliant type hint is a **subhint** of\n      the second passed PEP-compliant type hint, in which case the second hint\n      is a **superhint** of the first hint.\n    * ``False`` otherwise.\n\n    .. code-block:: python\n\n       # Import the requisite machinery.\n       >>> from beartype.door import is_subhint\n\n       # A type hint matching any callable accepting no arguments and returning\n       # a list is a subhint of a type hint matching any callable accepting any\n       # arguments and returning a sequence of any types.\n       >>> is_subhint(Callable[[], list], Callable[..., Sequence[Any]])\n       True\n\n       # A type hint matching any callable accepting no arguments and returning\n       # a list, however, is *NOT* a subhint of a type hint matching any\n       # callable accepting any arguments and returning a sequence of integers.\n       >>> is_subhint(Callable[[], list], Callable[..., Sequence[int]])\n       False\n\n       # Booleans are subclasses and thus subhints of integers.\n       >>> is_subhint(bool, int)\n       True\n\n       # The converse, however, is *NOT* true.\n       >>> is_subhint(int, bool)\n       False\n\n       # All classes are subclasses and thus subhints of themselves.\n       >>> is_subhint(int, int)\n       True\n\n    Equivalently, this tester returns ``True`` only if *all* of the following\n    conditions apply:\n\n    * **Commensurability.** These two hints are **semantically related** (i.e.,\n      convey broadly similar semantics enabling these two hints to be reasonably\n      compared). For example:\n\n      * ``callable.abc.Iterable[str]`` and ``callable.abc.Sequence[int]`` are\n        semantically related. These two hints both convey container semantics.\n        Despite their differing child hints, these two hints are broadly similar\n        enough to be reasonably comparable.\n      * ``callable.abc.Iterable[str]`` and ``callable.abc.Callable[[], int]``\n        are *not* semantically related. Whereas the first hints conveys a\n        container semantic, the second hint conveys a callable semantic. Since\n        these two semantics are unrelated, these two hints are dissimilar\n        enough to *not* be reasonably comparable.\n\n    * **Narrowness.** The first hint is either **narrower** than or\n      **semantically equivalent** to the second hint. Equivalently:\n\n      * The first hint matches **less than or equal to** the total number of all\n        possible objects matched by the second hint.\n      * In `set theoretic jargon <set theory_>`__, the size of the countably\n        infinite set of all possible objects matched by the first hint is **less\n        than or equal to** that of those matched by the second hint.\n\n    This tester supports a wide variety of practical use cases – including:\n\n    * **Multiple dispatch.** A pure-Python decorator can implement `multiple\n      dispatch`_ over multiple overloaded implementations of the same callable\n      by calling this function. An overload of the currently called callable can\n      be dispatched to if the types of the passed parameters are all\n      **subhints** of the type hints annotating that overload.\n    * Formal verification of **API compatibility** across version bumps.\n      Automated tooling like linters, continuous integration (CI), `git` hooks,\n      and integrated development environments (IDEs) can raise pre-release\n      alerts prior to accidental publication of API breakage by calling this\n      function. A Python API preserves backward compatibility if each type hint\n      annotating each public class or callable of the current version of that\n      API is a **superhint** of the type hint annotating the same class or\n      callable of the prior release of that API.\n\n    See ``help(beartype.door.is_subhint)`` for further details.\n\nProcedural Showcase\n~~~~~~~~~~~~~~~~~~~\n\nBy the power of beartype, you too shall catch all bugs.\n\nDetect API Breakage\n+++++++++++++++++++\n\nDetect breaking API changes in arbitrary callables via type hints alone in ten\nlines of code: :superscript:`...ignoring imports, docstrings, comments, and\nblank lines to make us look better`\n\n.. code-block:: python\n\n   from beartype import beartype\n   from beartype.door import is_subhint\n   from beartype.peps import resolve_pep563\n   from collections.abc import Callable\n\n   @beartype\n   def is_func_api_preserved(func_new: Callable, func_old: Callable) -> bool:\n       '''\n       ``True`` only if the signature of the first passed callable (presumably\n       the newest version of some callable to be released) preserves backward\n       API compatibility with the second passed callable (presumably an older\n       previously released version of the first passed callable) according to\n       the PEP-compliant type hints annotating these two callables.\n\n       Parameters\n       ----------\n       func_new: Callable\n           Newest version of a callable to test for API breakage.\n       func_old: Callable\n           Older version of that same callable.\n\n       Returns\n       ----------\n       bool\n           ``True`` only if the ``func_new`` API preserves the ``func_old`` API.\n       '''\n\n       # Resolve all PEP 563-postponed type hints annotating these two callables\n       # *BEFORE* reasoning with these type hints.\n       resolve_pep563(func_new)\n       resolve_pep563(func_old)\n\n       # For the name of each annotated parameter (or \"return\" for an annotated\n       # return) and the hint annotating that parameter or return for this newer\n       # callable...\n       for func_arg_name, func_new_hint in func_new.__annotations__.items():\n           # Corresponding hint annotating this older callable if any or \"None\".\n           func_old_hint = func_old.__annotations__.get(func_arg_name)\n\n           # If no corresponding hint annotates this older callable, silently\n           # continue to the next hint.\n           if func_old_hint is None:\n               continue\n           # Else, a corresponding hint annotates this older callable.\n\n           # If this older hint is *NOT* a subhint of this newer hint, this\n           # parameter or return breaks backward compatibility.\n           if not is_subhint(func_old_hint, func_new_hint):\n               return False\n           # Else, this older hint is a subhint of this newer hint. In this case,\n           # this parameter or return preserves backward compatibility.\n\n       # All annotated parameters and returns preserve backward compatibility.\n       return True\n\nThe proof is in the real-world pudding:\n\n.. code-block:: python\n\n   >>> from numbers import Real\n\n   # New and successively older APIs of the same example function.\n   >>> def new_func(text: str | None, ints: list[Real]) -> int: ...\n   >>> def old_func(text: str, ints: list[int]) -> bool: ...\n   >>> def older_func(text: str, ints: list) -> bool: ...\n\n   # Does the newest version of that function preserve backward compatibility\n   # with the next older version?\n   >>> is_func_api_preserved(new_func, old_func)\n   True  # <-- good. this is good.\n\n   # Does the newest version of that function preserve backward compatibility\n   # with the oldest version?\n   >>> is_func_api_preserved(new_func, older_func)\n   False  # <-- OH. MY. GODS.\n\nIn the latter case, the oldest version ``older_func()`` of that function\nambiguously annotated its ``ints`` parameter to accept *any* list rather than\nmerely a list of numbers. Both the newer version ``new_func()`` and the next\nolder version ``old_func()`` resolve the ambiguity by annotating that parameter\nto accept *only* lists of numbers. Technically, that constitutes API breakage;\nusers upgrading from the older version of the package providing ``older_func()``\nto the newer version of the package providing ``new_func()`` *could* have been\npassing lists of non-numbers to ``older_func()``. Their code is now broke. Of\ncourse, their code was probably always broke. But they're now screaming murder\non your issue tracker and all you can say is: \"We shoulda used beartype.\"\n\nIn the former case, ``new_func()`` relaxes the constraint from ``old_func()``\nthat this list contain only integers to accept a list containing both integers\nand floats. ``new_func()`` thus preserves backward compatibility with\n``old_func()``.\n\n**Thus was Rome's API preserved in a day.**\n\nBeartype Configuration\n----------------------\n\nDefine your own app-specific ``@beartype`` decorator – **configured** for your\nexact use case:\n\n.. code-block:: python\n\n   # Import the requisite machinery.\n   from beartype import beartype, BeartypeConf, BeartypeStrategy\n\n   # Dynamically create a new @monotowertype decorator configured to:\n   # * Avoid outputting colors in type-checking violations.\n   # * Enable support for the implicit numeric tower standardized by PEP 484.\n   monotowertype = beartype(conf=BeartypeConf(\n       is_color=False, is_pep484_tower=True))\n\n   # Decorate with this decorator rather than @beartype everywhere.\n   @monotowertype\n   def muh_colorless_permissive_func(int_or_float: float) -> float:\n       return int_or_float ** int_or_float ^ round(int_or_float)\n\nConfiguration: *because you know best*.\n\nConfiguration API\n~~~~~~~~~~~~~~~~~\n\n.. _beartype.BeartypeConf:\n\n| *class* beartype.\\ **BeartypeConf**\\ (\n| |_| |_| |_| |_| \\*,\n| |_| |_| |_| |_| `is_color <BeartypeConf.is_color_>`__: Optional[bool] = None,\n| |_| |_| |_| |_| `is_debug <BeartypeConf.is_debug_>`__: bool = False,\n| |_| |_| |_| |_| `is_pep484_tower <BeartypeConf.is_pep484_tower_>`__: bool = False,\n| |_| |_| |_| |_| `strategy <BeartypeConf.strategy_>`__: BeartypeStrategy_ = BeartypeStrategy.O1_,\n| )\n\n    **Beartype configuration** (i.e., self-caching dataclass instance\n    encapsulating all flags, options, settings, and other metadata configuring\n    each type-checking operation performed by beartype – including each\n    decoration of a callable or class by the ``@beartype.beartype`` decorator).\n\n    The default configuration ``BeartypeConf()`` configures beartype to:\n\n    * Conditionally output color when standard output is attached to a terminal.\n    * Disable developer-specific debugging logic.\n    * Disable support for `PEP 484's implicit numeric tower <implicit numeric\n      tower_>`__.\n    * Perform ``O(1)`` constant-time type-checking for safety, scalability, and\n      efficiency.\n\n    Beartype configurations are immutable objects memoized (i.e., cached) on the\n    unordered set of all passed parameters:\n\n    .. code-block:: python\n\n       >>> from beartype import BeartypeConf\n       >>> BeartypeConf() is BeartypeConf()\n       True\n       >>> BeartypeConf(is_color=False) is BeartypeConf(is_color=False)\n       True\n\n    Beartype configurations are comparable under equality:\n\n    .. code-block:: python\n\n       >>> BeartypeConf(is_color=False) == BeartypeConf(is_color=True)\n       False\n\n    Beartype configurations are hashable and thus suitable for use as dictionary\n    keys and set members:\n\n    .. code-block:: python\n\n       >>> BeartypeConf(is_color=False) == BeartypeConf(is_color=True)\n       False\n       >>> confs = {BeartypeConf(), BeartypeConf(is_color=False)}\n       >>> BeartypeConf() in confs\n       True\n\n    Beartype configurations support meaningful ``repr()`` output:\n\n    .. code-block:: python\n\n       >>> repr(BeartypeConf())\n       'BeartypeConf(is_color=None, is_debug=False, is_pep484_tower=False, strategy=<BeartypeStrategy.O1: 2>)'\n\n    Beartype configurations expose read-only public properties of the same\n    names as the above parameters:\n\n    .. code-block:: python\n\n       >>> BeartypeConf().is_color\n       None\n       >>> BeartypeConf().strategy\n       <BeartypeStrategy.O1: 2>\n\n    Beartype configurations support these optional keyword-only parameters at\n    instantiation time:\n\n    .. _BeartypeConf.is_color:\n\n    * **is_color**\\ : Optional[bool] = None\n\n      Tri-state boolean governing how and whether beartype colours\n      **type-checking violations** (i.e.,\n      ``beartype.roar.BeartypeCallHintViolation`` exceptions) with\n      POSIX-compliant ANSI escape sequences for readability. Specifically, if\n      this boolean is:\n\n      * ``False``, beartype *never* colours type-checking violations\n        raised by callables configured with this configuration.\n      * ``True``, beartype *always* colours type-checking violations\n        raised by callables configured with this configuration.\n      * ``None``, beartype conditionally colours type-checking violations\n        raised by callables configured with this configuration only when\n        standard output is attached to an interactive terminal.\n\n      Defaults to ``None``.\n\n      The standard use case is to dynamically define your own app-specific\n      ``@beartype`` decorator unconditionally disabling colours in type-checking\n      violations, usually due to one or more frameworks in your application\n      stack failing to support ANSI escape sequences. Please file upstream\n      issues with those frameworks requesting ANSI support. In the meanwhile,\n      behold the monochromatic powers of... ``@monobeartype``!\n\n      .. code-block:: python\n\n         # Import the requisite machinery.\n         from beartype import beartype, BeartypeConf\n\n         # Dynamically create a new @monobeartype decorator disabling colour.\n         monobeartype = beartype(conf=BeartypeConf(is_color=False))\n\n         # Decorate with this decorator rather than @beartype everywhere.\n         @monobeartype\n         def muh_colorless_func() -> str:\n             return b'In the kingdom of the blind, you are now king.'\n\n      *First introduced in beartype 0.12.0.*\n\n    .. _BeartypeConf.is_debug:\n\n    * **is_debug**\\ : bool = False\n\n      ``True`` only if debugging the ``@beartype`` decorator. If you're curious\n      as to what exactly (if anything) ``@beartype`` is doing on your behalf,\n      temporarily enable this boolean. Specifically, enabling this boolean:\n\n      * Caches the body of each type-checking wrapper function dynamically\n        generated by ``@beartype`` with the standard linecache_ module, enabling\n        these function bodies to be introspected at runtime *and* improving the\n        readability of tracebacks whose call stacks contain one or more calls to\n        these ``@beartype.beartype``\\ -decorated functions.\n      * Prints the definition (including both the signature and body) of each\n        type-checking wrapper function dynamically generated by ``@beartype`` to\n        standard output.\n      * Appends to the declaration of each **hidden parameter** (i.e., whose\n        name is prefixed by ``\"__beartype_\"`` and whose value is that of an\n        external attribute internally referenced in the body of that function)\n        a comment providing the machine-readable representation of the initial\n        value of that parameter, stripped of newlines and truncated to a\n        hopefully sensible length. Since the low-level string munger called to\n        do so is shockingly slow, these comments are conditionally embedded in\n        type-checking wrapper functions *only* when this boolean is enabled.\n\n      Defaults to ``False``. Eye-gouging sample output or it didn't happen, so:\n\n      .. code-block:: python\n\n         # Import the requisite machinery.\n         >>> from beartype import beartype, BeartypeConf\n\n         # Dynamically create a new @bugbeartype decorator enabling debugging.\n         # Insider D&D jokes in my @beartype? You'd better believe. It's happening.\n         >>> bugbeartype = beartype(conf=BeartypeConf(is_debug=True))\n\n         # Decorate with this decorator rather than @beartype everywhere.\n         >>> @bugbeartype\n         ... def muh_bugged_func() -> str:\n         ...     return b'Consistency is the bugbear that frightens little minds.'\n         (line 0001) def muh_bugged_func(\n         (line 0002)     *args,\n         (line 0003)     __beartype_func=__beartype_func, # is <function muh_bugged_func at 0x7f52733bad40>\n         (line 0004)     __beartype_conf=__beartype_conf, # is \"BeartypeConf(is_color=None, is_debug=True, is_pep484_tower=False, strategy=<BeartypeStrategy...\n         (line 0005)     __beartype_get_violation=__beartype_get_violation, # is <function get_beartype_violation at 0x7f5273081d80>\n         (line 0006)     **kwargs\n         (line 0007) ):\n         (line 0008)     # Call this function with all passed parameters and localize the value\n         (line 0009)     # returned from this call.\n         (line 0010)     __beartype_pith_0 = __beartype_func(*args, **kwargs)\n         (line 0011)\n         (line 0012)     # Noop required to artificially increase indentation level. Note that\n         (line 0013)     # CPython implicitly optimizes this conditional away. Isn't that nice?\n         (line 0014)     if True:\n         (line 0015)         # Type-check this passed parameter or return value against this\n         (line 0016)         # PEP-compliant type hint.\n         (line 0017)         if not isinstance(__beartype_pith_0, str):\n         (line 0018)             raise __beartype_get_violation(\n         (line 0019)                 func=__beartype_func,\n         (line 0020)                 conf=__beartype_conf,\n         (line 0021)                 pith_name='return',\n         (line 0022)                 pith_value=__beartype_pith_0,\n         (line 0023)             )\n         (line 0024)\n         (line 0025)     return __beartype_pith_0\n\n    .. _BeartypeConf.is_pep484_tower:\n\n    * **is_pep484_tower**\\ : bool = False\n\n      ``True`` only if enabling support for `PEP 484's implicit numeric tower\n      <implicit numeric tower_>`__ (i.e., lossy conversion of integers to\n      floating-point numbers as well as both integers and floating-point\n      numbers to complex numbers). Specifically, enabling this instructs\n      beartype to automatically expand:\n\n      * All ``float`` type hints to ``float | int``, thus implicitly accepting\n        both integers and floating-point numbers for objects annotated as only\n        accepting floating-point numbers.\n      * All ``complex`` type hints to ``complex | float | int``, thus\n        implicitly accepting integers, floating-point, and complex numbers for\n        objects annotated as only accepting complex numbers.\n\n      Defaults to ``False`` to minimize precision error introduced by lossy\n      conversions from integers to floating-point numbers to complex numbers.\n      Since most integers do *not* have exact representations as floating-point\n      numbers, each conversion of an integer into a floating-point number\n      typically introduces a small precision error that accumulates over\n      multiple conversions and operations into a larger precision error.\n      Enabling this improves the usability of public APIs at a cost of\n      introducing precision errors.\n\n      The standard use case is to dynamically define your own app-specific\n      ``@beartype`` decorator unconditionally enabling support for the implicit\n      numeric tower, usually as a convenience to your userbase who do *not*\n      particularly care about the above precision concerns. Behold the\n      permissive powers of... ``@beartowertype``!\n\n      .. code-block:: python\n\n         # Import the requisite machinery.\n         from beartype import beartype, BeartypeConf\n\n         # Dynamically create a new @beartowertype decorator enabling the tower.\n         beartowertype = beartype(conf=BeartypeConf(is_pep484_tower=False))\n\n         # Decorate with this decorator rather than @beartype everywhere.\n         @beartowertype\n         def crunch_numbers(numbers: list[float]) -> float:\n             return sum(numbers)\n\n         # This is now fine.\n         crunch_numbers([3, 1, 4, 1, 5, 9])\n\n         # This is still fine, too.\n         crunch_numbers([3.1, 4.1, 5.9])\n\n      *First introduced in beartype 0.12.0.*\n\n    .. _BeartypeConf.strategy:\n\n    * **strategy**\\ : BeartypeStrategy_ = BeartypeStrategy.O1_\n\n      **Type-checking strategy** (i.e., BeartypeStrategy_ enumeration member\n      dictating how many items are type-checked at each nesting level of each\n      container and thus how responsively beartype type-checks containers). This\n      setting governs the core tradeoff in runtime type-checking between:\n\n      * **Overhead** in the amount of time that beartype spends type-checking.\n      * **Completeness** in the number of objects that beartype type-checks.\n\n      As beartype gracefully scales up to check larger and larger containers,\n      so beartype simultaneously scales down to check fewer and fewer items of\n      those containers. This scalability preserves performance regardless of\n      container size while increasing the likelihood of false negatives (i.e.,\n      failures to catch invalid items in large containers) as container size\n      increases. You can either type-check a small number of objects nearly\n      instantaneously *or* you can type-check a large number of objects slowly.\n      Pick one.\n\n      Defaults to BeartypeStrategy.O1_, the constant-time ``O(1)`` strategy –\n      maximizing scalability at a cost of also maximizing false positives.\n\n.. _BeartypeStrategy:\n\n*class* beartype.\\ **BeartypeStrategy**\\ (enum.Enum)\n\n    Enumeration of all kinds of **type-checking strategies** (i.e., competing\n    procedures for type-checking objects passed to or returned from\n    ``@beartype``\\ -decorated callables, each with concomitant tradeoffs with\n    respect to runtime complexity and quality assurance).\n\n    Strategies are intentionally named according to `conventional Big O\n    notation <Big O_>`__ (e.g., BeartypeStrategy.On_ enables the ``O(n)``\n    strategy). Strategies are established per-decoration at the fine-grained\n    level of callables decorated by the ``@beartype`` decorator by setting the\n    BeartypeConf.strategy_ parameter of the beartype.BeartypeConf_ object passed\n    as the optional ``conf`` parameter to that decorator.\n\n    Strategies enforce their corresponding runtime complexities (e.g., ``O(n)``)\n    across *all* type-checks performed for callables enabling those strategies.\n    For example, a callable configured by the BeartypeStrategy.On_ strategy will\n    exhibit linear ``O(n)`` complexity as its overhead for type-checking each\n    nesting level of each container passed to and returned from that callable.\n\n    This enumeration defines these members:\n\n    .. _BeartypeStrategy.O0:\n\n    * BeartypeStrategy.\\ **O0** : beartype.cave.EnumMemberType\n\n      **No-time strategy** (i.e, disabling type-checking for a decorated\n      callable by reducing ``@beartype`` to the identity decorator for that\n      callable). This strategy is functionally equivalent to but more\n      general-purpose than the standard `@typing.no_type_check`_ decorator;\n      whereas `@typing.no_type_check`_ only applies to callables, this strategy\n      applies to *any* context accepting a beartype configuration such as:\n\n      * The ``@beartype`` decorator decorating a class.\n      * The `beartype.door.is_bearable() function <is_bearable_>`__.\n      * The `beartype.door.die_if_unbearable() function <die_if_unbearable_>`__.\n      * The `beartype.door.TypeHint.is_bearable() method <beartype.door_>`__.\n      * The `beartype.door.TypeHint.die_if_unbearable() method\n        <beartype.door_>`__.\n\n      Just like in real life, there exist use cases for doing absolutely\n      nothing – including:\n\n      * **Blacklisting callables.** Although seemingly useless, this strategy\n        allows callers to selectively prevent callables that would otherwise be\n        type-checked (e.g., due to class decorations or import hooks) from being\n        type-checked:\n\n        .. code-block:: python\n\n           # Import the requisite machinery.\n           from beartype import beartype, BeartypeConf, BeartypeStrategy\n\n           # Dynamically create a new @nobeartype decorator disabling type-checking.\n           nobeartype = beartype(conf=BeartypeConf(strategy=BeartypeStrategy.O0))\n\n           # Automatically decorate all methods of this class...\n           @beartype\n           class TypeCheckedClass(object):\n               # Including this method, which raises a type-checking violation\n               # due to returning a non-\"None\" value.\n               def type_checked_method(self) -> None:\n                   return 'This string is not \"None\". Apparently, that is a problem.'\n\n               # Excluding this method, which raises *NO* type-checking\n               # violation despite returning a non-\"None\" value.\n               @nobeartype\n               def non_type_checked_method(self) -> None:\n                   return 'This string is not \"None\". Thankfully, no one cares.'\n\n      * **Eliding overhead.** Beartype `already exhibits near-real-time overhead\n        of less than 1µs (one microsecond, one millionth of a second) per call\n        of type-checked callables <beartype realtime_>`__. When even that\n        negligible overhead isn't negligible enough, brave callers considering\n        an occupational change may globally disable *all* type-checking\n        performed by beartype. Please prepare your resume before doing so. Also,\n        do so *only* under production builds intended for release; development\n        builds intended for testing should preserve type-checking. Either:\n\n        * `Pass Python the \"-O\" command-line option <-O_>`__, which beartype\n          respects.\n        * `Run Python under the \"PYTHONOPTIMIZE\" environment variable\n          <PYTHONOPTIMIZE_>`__, which beartype also respects.\n        * Define a new ``@maybebeartype`` decorator disabling type-checking when\n          an app-specific constant ``I_AM_RELEASE_BUILD`` defined elsewhere is\n          enabled:\n\n          .. code-block:: python\n\n             # Import the requisite machinery.\n             from beartype import beartype, BeartypeConf, BeartypeStrategy\n\n             # Let us pretend you know what you are doing for a hot moment.\n             from your_app import I_AM_RELEASE_BUILD\n\n             # Dynamically create a new @maybebeartype decorator disabling\n             # type-checking when \"I_AM_RELEASE_BUILD\" is enabled.\n             maybebeartype = beartype(conf=BeartypeConf(strategy=(\n                 BeartypeStrategy.O0\n                 if I_AM_RELEASE_BUILD else\n                 BeartypeStrategy.O1\n             ))\n\n             # Decorate with this decorator rather than @beartype everywhere.\n             @maybebeartype\n             def muh_performance_critical_func(big_list: list[int]) -> int:\n                 return sum(big_list)\n\n    .. _BeartypeStrategy.O1:\n\n    * BeartypeStrategy.\\ **O1** : beartype.cave.EnumMemberType\n\n      **Constant-time strategy** (i.e., the default ``O(1)`` strategy,\n      type-checking a single randomly selected item of each container). As the\n      default, this strategy need *not* be explicitly enabled.\n\n    .. _BeartypeStrategy.Ologn:\n\n    * BeartypeStrategy.\\ **Ologn** : beartype.cave.EnumMemberType\n\n      **Logarithmic-time strategy** (i.e., the ``O(log n)`` strategy,\n      type-checking a randomly selected number of items ``log(len(obj))`` of\n      each container ``obj``). This strategy is **currently unimplemented.**\n      (*To be implemented by a future beartype release.*)\n\n    .. _BeartypeStrategy.On:\n\n    * BeartypeStrategy.\\ **On** : beartype.cave.EnumMemberType\n\n      **Linear-time strategy** (i.e., the ``O(n)`` strategy, type-checking *all*\n      items of a container). This strategy is **currently unimplemented.** (*To\n      be implemented by a future beartype release.*)\n\nBeartype Exceptions\n-------------------\n\nBeartype only raises:\n\n* **Beartype-specific exceptions.** For your safety and ours, exceptions raised\n  beartype are easily distinguished from exceptions raised by everybody else.\n  *All* exceptions raised by beartype are instances of:\n\n  * Public types importable from the ``beartype.roar`` subpackage.\n  * The beartype.roar.BeartypeException_ abstract base class (ABC).\n\n* **Disambiguous exceptions.** For your sanity and ours, *every* exception\n  raised by beartype means one thing and one thing only. Beartype *never* reuses\n  the same exception class to mean two different things – allowing you to\n  trivially catch and handle the exact exception you're interested in.\n\nBeartype is fastidious to a fault. Exception handling is no... *exception*.\n<sup>punny *or* funny? you decide.</sup>\n\nException API\n~~~~~~~~~~~~~\n\n.. _BeartypeException:\n.. _beartype.roar.BeartypeException:\n\n*class* beartype.roar.\\ **BeartypeException**\\ (Exception)\n\n    **Beartype exception root superclass.** *All* exceptions raised by beartype\n    are guaranteed to be instances of concrete subclasses of this abstract base\n    class (ABC) whose class names strictly match either:\n\n    * ``Beartype{subclass_name}Exception`` for non-type-checking violations\n      (e.g., ``BeartypeDecorHintPep3119Exception``).\n    * ``Beartype{subclass_name}Violation`` for type-checking violations\n      (e.g., ``BeartypeCallHintReturnViolation``).\n\n.. _BeartypeDecorException:\n\n*class* beartype.roar.\\ **BeartypeDecorException**\\ (BeartypeException)\n\n    **Beartype decorator exception superclass.** *All* exceptions raised by\n    the ``@beartype`` decorator at decoration time (i.e., while dynamically\n    generating type-checking wrappers for decorated callables and classes) are\n    guaranteed to be instances of concrete subclasses of this abstract base\n    class (ABC). Since decoration-time exceptions are typically raised from\n    module scope early in the lifetime of a Python process, you are unlikely to\n    manually catch and handle decorator exceptions.\n\n    A detailed list of subclasses of this ABC is thus quite inconsequential.\n    Very well. Leycec_ admits he was too tired to type it all out. Leycec_ also\n    admits he played exploitative video games all night instead... *again*.\n    Leycec_ is grateful nobody actually reads these API notes. <sup>checkmate,\n    GitHub</sup>\n\n.. _BeartypeCallHintException:\n\n*class* beartype.roar.\\ **BeartypeCallHintException**\\ (BeartypeCallException)\n\n    **Beartype type-checking exception superclass.** Beartype type-checkers\n    (including beartype.door.die_if_unbearable_ and ``@beartype``\\ -decorated\n    callables) raise instances of concrete subclasses of this abstract base\n    class (ABC) when failing a type-check at call time (e.g., due to passing a\n    parameter or returning a value violating a type hint annotating that\n    parameter or return). *All* exceptions raised when type-checking are\n    guaranteed to be instances of this ABC. Since type-checking exceptions are\n    typically raised from function and method scopes later in the lifetime of a\n    Python process, you are *much* more likely to manually catch and handle\n    type-checking exceptions than other types of beartype exceptions.\n\n    In fact, you're encouraged to do so. Repeat after Kermode Bear: \"Exceptions\n    are fun, everybody.\" *Gotta catch 'em all!*\n\n.. _BeartypeCallHintForwardRefException:\n\n*class* beartype.roar.\\ **BeartypeCallHintForwardRefException**\\\n(BeartypeCallHintException)\n\n    **Beartype type-checking forward reference exception.** Beartype\n    type-checkers raise instances of this exception type when a **forward\n    reference type hint** (i.e., string referring to a class that has yet to be\n    defined) erroneously references either:\n\n    * An attribute that does *not* exist.\n    * An attribute that exists but whose value is *not* actually a class.\n\n    As we gaze forward in time, so too do we glimpse ourselves – unshaven and\n    shabbily dressed – in the rear-view mirror:\n\n    .. code-block:: python\n\n       >>> from beartype import beartype\n       >>> from beartype.roar import BeartypeCallHintForwardRefException\n       >>> @beartype\n       ... def i_am_spirit_bear(favourite_foodstuff: 'salmon.of.course') -> None: pass\n       >>> try:\n       ...     i_am_spirit_bear('Why do you eat all my salmon, Spirit Bear?')\n       ... except BeartypeCallHintForwardRefException as exception:\n       ...     print(exception)\n       Forward reference \"salmon.of.course\" unimportable.\n\n.. _BeartypeCallHintViolation:\n\n*class* beartype.roar.\\ **BeartypeCallHintViolation**\\ (BeartypeCallHintException)\n\n    **Beartype type-checking violation.** This is the most important beartype\n    exception you never hope to see – and thus the beartype exception you are\n    most likely to see. When your code explodes at midnight, instances of this\n    exception type were probably lighting the fuse behind your back.\n\n    Beartype type-checkers raise one instance of this exception type for each\n    **type-checking violation** (i.e., when an object to be type-checked\n    violates the type hint annotating that object). Because type-checking\n    violations are why we are all here, instances of this exception type provide\n    additional read-only public properties.\n\n    Inspect these properties at runtime to resolve any lingering doubts about\n    which coworkers you need to blame in your next Git commit:\n\n    .. _BeartypeCallHintViolation.culprits:\n\n    * **culprits**\\ : Tuple[object, ...]\n\n      Tuple of one or more **culprits** (i.e., irresponsible objects that\n      violated the type hints annotating those objects during a type-check).\n\n      Specifically, this property returns either:\n\n      * If a standard container (e.g., ``dict``, ``list``, ``set``, ``tuple``)\n        is responsible for this violation, the 2-tuple\n        ``(root_culprit, leaf_culprit)`` where:\n\n        * ``root_culprit`` is the outermost such container. This is usually the\n          passed parameter or returned value indirectly violating this type\n          hint.\n        * ``leaf_culprit`` is the innermost item nested in ``root_culprit``\n          directly violating this type hint.\n\n      * If a non-container (e.g., scalar, class instance) is responsible for\n        this violation, the 1-tuple ``(culprit,)`` where ``culprit`` is that\n        non-container.\n\n      Let us examine what the latter means for the plucky intern (who will do\n      this after fetching more pumpkin spice lattes for the team engrossed in a\n      high-level morale-building \"Best of 200\" ping pong competition):\n\n      .. code-block:: python\n\n         # Import the requisite machinery.\n         from beartype import beartype\n         from beartype.roar import BeartypeCallHintViolation\n\n         # Arbitrary user-defined classes.\n         class SpiritBearIGiveYouSalmonToGoAway(object): pass\n         class SpiritBearIGiftYouHoneyNotToStay(object): pass\n\n         # Arbitrary instance of one of these classes.\n         SPIRIT_BEAR_REFUSE_TO_GO_AWAY = SpiritBearIGiftYouHoneyNotToStay()\n\n         # Callable annotated to accept instances of the *OTHER* class.\n         @beartype\n         def when_spirit_bear_hibernates_in_your_bed(\n             best_bear_den: SpiritBearIGiveYouSalmonToGoAway) -> None: pass\n\n         # Call this callable with this invalid instance.\n         try:\n             when_spirit_bear_hibernates_in_your_bed(\n                 SPIRIT_BEAR_REFUSE_TO_GO_AWAY)\n         # *MAGIC HAPPENS HERE*. Catch violations and inspect their \"culprits\"!\n         except BeartypeCallHintViolation as violation:\n             # Assert that one culprit was responsible for this violation.\n             assert len(violation.culprits) == 1\n\n             # The one culprit: don't think we don't see you hiding there!\n             culprit = violation.culprits[0]\n\n             # Assert that this culprit is the same instance passed above.\n             assert culprit is SPIRIT_BEAR_REFUSE_TO_GO_AWAY\n\n      **Caveats apply.** This property makes a good-faith effort to list the\n      most significant culprits responsible for this type-checking violation. In\n      two edge cases beyond our control, however, this property falls back to\n      listing truncated snapshots of the machine-readable representations of\n      those culprits (e.g., the first 10,000 characters or so of their `repr()`\n      strings). This safe fallback is triggered for each culprit that:\n\n      * Has **already been garbage-collected.** To avoid memory leaks, this\n        property only weakly (rather than strongly) refers to these culprits and\n        is thus best accessed only where these culprits are accessible.\n        *Technically*, this property is safely accessible from any context.\n        *Practically*, this property is most usefully accessed from the\n        ``except ...:`` block directly catching this violation. Since these\n        culprits may be garbage-collected at any time thereafter, this property\n        *cannot* be guaranteed to refer to these culprits outside that block. If\n        this property is accessed from any other context and one or more of\n        these culprits have sadly passed away, this property dynamically reduces\n        the corresponding items of this tuple to only the machine-readable\n        representations of those culprits. :superscript:`This exception stored the\n        representations of those culprits inside itself when first raised. Like\n        a gruesome time capsule, they return to haunt you.`\n      * Is a **builtin variable-sized C-based object** (e.g., ``dict``, ``int``,\n        ``list``, ``str``). Long-standing limitations in CPython itself prevent\n        beartype from weakly referring to those objects. Openly riot on the\n        `CPython bug tracker`_ if this displeases you.\n\n      Let us examine what this means for your malding CTO:\n\n      .. code-block:: python\n\n         # Import the requisite machinery.\n         from beartype import beartype\n         from beartype.roar import BeartypeCallHintViolation\n         from beartype.typing import List\n\n         # Callable annotated to accept a standard container.\n         @beartype\n         def we_are_all_spirit_bear(\n             best_bear_dens: List[List[str]]) -> None: pass\n\n         # Standard container deeply violating the above type hint.\n         SPIRIT_BEAR_DO_AS_HE_LIKE = [\n             [b'Why do you sleep in my pinball room, Spirit Bear?']]\n\n         # Call this callable with this invalid container.\n         try:\n             we_are_all_spirit_bear(SPIRIT_BEAR_DO_AS_HE_LIKE)\n         # Shoddy magic happens here. Catch violations and try (but fail) to\n         # inspect the original culprits, because they were containers!\n         except BeartypeCallHintViolation as violation:\n             # Assert that two culprits were responsible for this violation.\n             assert len(violation.culprits) == 2\n\n             # Root and leaf culprits. We just made these words up, people.\n             root_culprit = violation.culprits[0]\n             leaf_culprit = violation.culprits[1]\n\n             # Assert that these culprits are, in fact, just repr() strings.\n             assert root_culprit == repr(SPIRIT_BEAR_DO_AS_HE_LIKE)\n             assert leaf_culprit == repr(SPIRIT_BEAR_DO_AS_HE_LIKE[0][0])\n\n      We see that beartype correctly identified the root culprit as the passed\n      list of lists of byte-strings (rather than strings) *and* the leaf culprit\n      as that byte-string. We also see that beartype only returned the\n      ``repr()`` of both culprits rather than those culprits. Why? Because\n      CPython prohibits weak references to both lists *and* byte-strings.\n\n      This is why we facepalm ourselves in the morning. We did it this morning.\n      We'll do it next morning, too. Until the weakref_ module improves,\n      leycec's forehead *will* be swollen with an angry mass of unsightly red\n      welts that are now festering unbeknownst to his wife.\n\n      *First introduced in beartype 0.12.0.*\n\nBeartype Validators\n-------------------\n\n.. _beartype.vale:\n\n.. parsed-literal::\n\n   Validate anything with two-line type hints\n          designed by you ⇄ built by beartype\n\nWhen official type hints fail to scale, design your own PEP-compliant type\nhints with compact two-line **beartype validators:**\n\n.. code-block:: python\n\n   # Import the requisite machinery.\n   from beartype import beartype\n   from beartype.vale import Is\n   from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n   #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n   # Type hint matching any two-dimensional NumPy array of floats of arbitrary\n   # precision. Aye, typing matey. Beartype validators a-hoy!\n   import numpy as np\n   Numpy2DFloatArray = Annotated[np.ndarray, Is[lambda array:\n       array.ndim == 2 and np.issubdtype(array.dtype, np.floating)]]\n\n   # Annotate @beartype-decorated callables with beartype validators.\n   @beartype\n   def polygon_area(polygon: Numpy2DFloatArray) -> float:\n       '''\n       Area of a two-dimensional polygon of floats defined as a set of\n       counter-clockwise points, calculated via Green's theorem.\n\n       *Don't ask.*\n       '''\n\n       # Calculate and return the desired area. Pretend we understand this.\n       polygon_rolled = np.roll(polygon, -1, axis=0)\n       return np.abs(0.5*np.sum(\n           polygon[:,0]*polygon_rolled[:,1] -\n           polygon_rolled[:,0]*polygon[:,1]))\n\nValidators enforce arbitrary runtime constraints on the internal structure and\ncontents of parameters and returns with user-defined lambda functions and\nnestable declarative expressions leveraging `familiar \"typing\" syntax\n<typing_>`__ – all seamlessly composable with `standard type hints <Standard\nHints_>`__ via an `expressive domain-specific language (DSL) <Validator\nSyntax_>`__.\n\nValidate custom project constraints *now* without waiting for the open-source\ncommunity to officially standardize, implement, and publish those constraints.\nFilling in the Titanic-sized gaps between `Python's patchwork quilt of PEPs\n<Compliance_>`__, validators accelerate your QA workflow with your greatest\nasset.\n\nYup. It's your brain.\n\nSee `Validator Showcase`_ for comforting examples – or blithely continue for\nuncomfortable details you may regret reading.\n\nValidator Overview\n~~~~~~~~~~~~~~~~~~\n\nBeartype validators are **zero-cost code generators.** Like the rest of\nbeartype (but unlike other validation frameworks), beartype validators\ndynamically generate optimally efficient pure-Python type-checking logic with\n*no* hidden function or method calls, undocumented costs, or runtime overhead.\n\nBeartype validator code is thus **call-explicit.** Since pure-Python function\nand method calls are notoriously slow in CPython_, the code we generate only\ncalls the pure-Python functions and methods you specify when you subscript\n``beartype.vale.Is*`` classes with those functions and methods. That's it. We\n*never* call anything without your permission. For example:\n\n* The declarative validator ``Annotated[np.ndarray, IsAttr['dtype',\n  IsAttr['type', IsEqual[np.float64]]]]`` detects NumPy arrays of 64-bit\n  floating-point precision by generating the fastest possible inline expression\n  for doing so:\n\n  .. code-block:: python\n\n     isinstance(array, np.ndarray) and array.dtype.type == np.float64\n\n* The functional validator ``Annotated[np.ndarray, Is[lambda array:\n  array.dtype.type == np.float64]]`` also detects the same arrays by generating\n  a slightly slower inline expression calling the lambda function you define:\n\n  .. code-block:: python\n\n     isinstance(array, np.ndarray) and your_lambda_function(array)\n\nBeartype validators thus come in two flavours – each with its attendant\ntradeoffs:\n\n* **Functional validators,** created by subscripting the `beartype.vale.Is\n  <Is_>`__ class with a function accepting a single parameter and returning\n  ``True`` only when that parameter satisfies a caller-defined constraint. Each\n  functional validator incurs the cost of calling that function for each call to\n  each ``@beartype``\\ -decorated callable annotated by that validator, but is\n  Turing-complete and thus supports all possible validation scenarios.\n* **Declarative validators,** created by subscripting any *other* class in the\n  beartype.vale_ subpackage (e.g., `beartype.vale.IsEqual <IsEqual_>`__) with\n  arguments specific to that class. Each declarative validator generates\n  efficient inline code calling *no* hidden functions and thus incurring no\n  function costs, but is special-purpose and thus supports only a narrow band\n  of validation scenarios.\n\nWherever you can, prefer declarative validators for efficiency. Everywhere\nelse, default to functional validators for generality.\n\nValidator API\n~~~~~~~~~~~~~\n\n.. _Is:\n\n*class* beartype.vale.\\ **Is**\\ [collections.abc.Callable_\\ [[typing.Any_\\ ], bool]]\n\n    **Functional validator.** A PEP-compliant type hint enforcing any arbitrary\n    runtime constraint, created by subscripting (indexing) the ``Is`` type hint\n    factory with a function accepting a single parameter and returning either:\n\n    * ``True`` if that parameter satisfies that constraint.\n    * ``False`` otherwise.\n\n    .. code-block:: python\n\n       # Import the requisite machinery.\n       from beartype.vale import Is\n       from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n       #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n       # Type hint matching only strings with lengths ranging [4, 40].\n       LengthyString = Annotated[str, Is[lambda text: 4 <= len(text) <= 40]]\n\n    Functional validators are caller-defined and may thus validate the internal\n    integrity, consistency, and structure of arbitrary objects ranging from\n    simple builtin scalars like integers and strings to complex data structures\n    defined by third-party packages like NumPy arrays and Pandas DataFrames.\n\n    See ``help(beartype.vale.Is)`` for further details.\n\n.. _IsAttr:\n\n*class* beartype.vale.\\ **IsAttr**\\ [str, `beartype.vale.* <beartype.vale_>`__\\ ]\n\n    **Declarative attribute validator.** A PEP-compliant type hint\n    enforcing any arbitrary runtime constraint on any named object attribute,\n    created by subscripting (indexing) the ``IsAttr`` type hint factory with\n    (in order):\n\n    #. The unqualified name of that attribute.\n    #. Any other beartype validator enforcing that constraint.\n\n    .. code-block:: python\n\n       # Import the requisite machinery.\n       from beartype.vale import IsAttr, IsEqual\n       from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n       #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n       # Type hint matching only two-dimensional NumPy arrays. Given this,\n       # @beartype generates efficient validation code resembling:\n       #     isinstance(array, np.ndarray) and array.ndim == 2\n       import numpy as np\n       Numpy2DArray = Annotated[np.ndarray, IsAttr['ndim', IsEqual[2]]]\n\n    The first argument subscripting this class *must* be a syntactically valid\n    unqualified Python identifier string containing only alphanumeric and\n    underscore characters (e.g., ``\"dtype\"``, ``\"ndim\"``). Fully-qualified\n    attributes comprising two or more dot-delimited identifiers (e.g.,\n    ``\"dtype.type\"``) may be validated by nesting successive ``IsAttr``\n    subscriptions:\n\n    .. code-block:: python\n\n       # Type hint matching only NumPy arrays of 64-bit floating-point numbers.\n       # From this, @beartype generates an efficient expression resembling:\n       #     isinstance(array, np.ndarray) and array.dtype.type == np.float64\n       NumpyFloat64Array = Annotated[np.ndarray,\n           IsAttr['dtype', IsAttr['type', IsEqual[np.float64]]]]\n\n    The second argument subscripting this class *must* be a beartype validator.\n    This includes:\n\n    * ``beartype.vale.Is``, in which case this parent ``IsAttr`` class\n      validates the desired object attribute to satisfy the caller-defined\n      function subscripting that child ``Is`` class.\n    * ``beartype.vale.IsAttr``, in which case this parent ``IsAttr`` class\n      validates the desired object attribute to contain a nested object\n      attribute satisfying the child ``IsAttr`` class. See above example.\n    * ``beartype.vale.IsEqual``, in which case this ``IsAttr`` class validates\n      the desired object attribute to be equal to the object subscripting that\n      ``IsEqual`` class. See above example.\n\n    See ``help(beartype.vale.IsAttr)`` for further details.\n\n.. _IsEqual:\n\n*class* beartype.vale.\\ **IsEqual**\\ [typing.Any_\\ ]\n\n    **Declarative equality validator.** A PEP-compliant type hint enforcing\n    equality against any object, created by subscripting (indexing) the\n    ``IsEqual`` type hint factory with that object:\n\n    .. code-block:: python\n\n       # Import the requisite machinery.\n       from beartype.vale import IsEqual\n       from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n       #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n       # Type hint matching only lists equal to [0, 1, 2, ..., 40, 41, 42].\n       AnswerToTheUltimateQuestion = Annotated[list, IsEqual[list(range(42))]]\n\n    ``beartype.vale.IsEqual`` generalizes the comparable `PEP 586`_-compliant\n    typing.Literal_ type hint. Both check equality against user-defined\n    objects. Despite the differing syntax, these two type hints enforce the\n    same semantics:\n\n    .. code-block:: python\n\n       # This beartype validator enforces the same semantics as...\n       IsStringEqualsWithBeartype = Annotated[str,\n           IsEqual['Don’t you envy our pranceful bands?'] |\n           IsEqual['Don’t you wish you had extra hands?']\n       ]\n\n       # This PEP 586-compliant type hint.\n       IsStringEqualsWithPep586 = Literal[\n           'Don’t you envy our pranceful bands?',\n           'Don’t you wish you had extra hands?',\n       ]\n\n    The similarities end there, of course:\n\n    * ``beartype.vale.IsEqual`` permissively validates equality against objects\n      that are instances of **any arbitrary type.** ``IsEqual`` doesn't care\n      what the types of your objects are. ``IsEqual`` will test equality\n      against everything you tell it to, because you know best.\n    * typing.Literal_ rigidly validates equality against objects that are\n      instances of **only six predefined types:**\n\n      * Booleans (i.e., ``bool`` objects).\n      * Byte strings (i.e., ``bytes`` objects).\n      * Integers (i.e., ``int`` objects).\n      * Unicode strings (i.e., ``str`` objects).\n      * enum.Enum_ members. [#enum_type]_\n      * The ``None`` singleton.\n\n    Wherever you can (which is mostly nowhere), prefer typing.Literal_. Sure,\n    typing.Literal_ is mostly useless, but it's standardized across\n    type checkers in a mostly useless way. Everywhere else, default to\n    ``beartype.vale.IsEqual``.\n\n    See ``help(beartype.vale.IsEqual)`` for further details.\n\n.. _vale.IsInstance:\n\n*class* beartype.vale.\\ **IsInstance**\\ [type, ...]\n\n    **Declarative instance validator.** A PEP-compliant type hint enforcing\n    instancing of one or more classes, created by subscripting (indexing) the\n    ``IsInstance`` type hint factory with those classes:\n\n    .. code-block:: python\n\n       # Import the requisite machinery.\n       from beartype.vale import IsInstance\n       from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n       #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n       # Type hint matching only string and byte strings, equivalent to:\n       #     StrOrBytesInstance = Union[str, bytes]\n       StrOrBytesInstance = Annotated[object, IsInstance[str, bytes]]\n\n    ``beartype.vale.IsInstance`` generalizes **isinstanceable type hints**\n    (i.e., normal pure-Python or C-based classes that can be passed as the\n    second parameter to the ``isinstance()`` builtin). Both check instancing of\n    classes. Despite the differing syntax, these hints enforce the same\n    semantics:\n\n    .. code-block:: python\n\n       # This beartype validator enforces the same semantics as...\n       IsUnicodeStrWithBeartype = Annotated[object, IsInstance[str]]\n\n       # ...this PEP 484-compliant type hint.\n       IsUnicodeStrWithPep484 = str\n\n       # Likewise, this beartype validator enforces the same semantics as...\n       IsStrWithWithBeartype = Annotated[object, IsInstance[str, bytes]]\n\n       # ...this PEP 484-compliant type hint.\n       IsStrWithWithPep484 = Union[str, bytes]\n\n    The similarities end there, of course:\n\n    * ``beartype.vale.IsInstance`` permissively validates type instancing of\n      **arbitrary objects** (including possibly nested attributes of parameters\n      and returns when combined with ``beartype.vale.IsAttr``) against **one or\n      more classes.**\n    * Isinstanceable classes rigidly validate type instancing of only\n      **parameters and returns** against only **one class.**\n\n    Unlike isinstanceable type hints, instance validators support various `set\n    theoretic operators <Validator Syntax_>`__. Critically, this includes\n    negation. Instance validators prefixed by the negation operator ``~``\n    match all objects that are *not* instances of the classes subscripting\n    those validators. Wait. Wait just a hot minute there. Doesn't a\n    typing.Annotated_ type hint necessarily match instances of the class\n    subscripting that type hint? Yup. This means type hints of the form\n    ``typing.Annotated[{superclass}, ~IsInstance[{subclass}]`` match all\n    instances of a superclass that are *not* also instances of a subclass.\n    And... pretty sure we just invented `type hint arithmetic <Type Hint\n    Elision_>`__ right there.\n\n    That sounded intellectual and thus boring. Yet, the disturbing fact that\n    Python booleans are integers :superscript:`yup` while Python strings are\n    infinitely recursive sequences of strings :superscript:`yup` means that\n    `type hint arithmetic <Type Hint Elision_>`__ can save your codebase from\n    Guido's younger self. Consider this instance validator matching only\n    non-boolean integers, which *cannot* be expressed with any isinstanceable\n    type hint (e.g., ``int``) or other combination of standard off-the-shelf\n    type hints (e.g., unions):\n\n    .. code-block:: python\n\n       # Type hint matching any non-boolean integer. Never fear integers again.\n       IntNonbool = Annotated[int, ~IsInstance[bool]]   # <--- bruh\n\n    Wherever you can, prefer isinstanceable type hints. Sure, they're\n    inflexible, but they're inflexibly standardized across type checkers.\n    Everywhere else, default to ``beartype.vale.IsInstance``.\n\n    See ``help(beartype.vale.IsInstance)`` for further details.\n\n.. _vale.IsSubclass:\n\n*class* beartype.vale.\\ **IsSubclass**\\ [type, ...]\n\n    **Declarative inheritance validator.** A PEP-compliant type hint enforcing\n    subclassing of one or more superclasses (base classes), created by\n    subscripting (indexing) the ``IsSubclass`` type hint factory with those\n    superclasses:\n\n    .. code-block:: python\n\n       # Import the requisite machinery.\n       from beartype.vale import IsSubclass\n       from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n       #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n       # Type hint matching only string and byte string subclasses.\n       StrOrBytesSubclass = Annotated[type, IsSubclass[str, bytes]]\n\n    ``beartype.vale.IsSubclass`` generalizes the comparable `PEP\n    484`_-compliant typing.Type_ and `PEP 585`_-compliant type_ type hints. All\n    three check subclassing of arbitrary superclasses. Despite the differing\n    syntax, these hints enforce the same semantics:\n\n    .. code-block:: python\n\n       # This beartype validator enforces the same semantics as...\n       IsStringSubclassWithBeartype = Annotated[type, IsSubclass[str]]\n\n       # ...this PEP 484-compliant type hint as well as...\n       IsStringSubclassWithPep484 = Type[str]\n\n       # ...this PEP 585-compliant type hint.\n       IsStringSubclassWithPep585 = type[str]\n\n    The similarities end there, of course:\n\n    * ``beartype.vale.IsSubclass`` permissively validates type inheritance of\n      **arbitrary classes** (including possibly nested attributes of parameters\n      and returns when combined with ``beartype.vale.IsAttr``) against **one or\n      more superclasses.**\n    * typing.Type_ and type_ rigidly validates type inheritance of only\n      **parameters and returns** against only **one superclass.**\n\n    Consider this subclass validator, which validates type inheritance of a\n    deeply nested attribute and thus *cannot* be expressed with typing.Type_ or\n    type_:\n\n    .. code-block:: python\n\n       # Type hint matching only NumPy arrays of reals (i.e., either integers\n       # or floats) of arbitrary precision, generating code resembling:\n       #    (isinstance(array, np.ndarray) and\n       #     issubclass(array.dtype.type, (np.floating, np.integer)))\n       NumpyRealArray = Annotated[\n           np.ndarray, IsAttr['dtype', IsAttr['type', IsSubclass[\n               np.floating, np.integer]]]]\n\n    Wherever you can, prefer type_ and typing.Type_. Sure, they're\n    inflexible, but they're inflexibly standardized across type checkers.\n    Everywhere else, default to ``beartype.vale.IsSubclass``.\n\n    See ``help(beartype.vale.IsSubclass)`` for further details.\n\n.. [#enum_type]\n   You don't want to know the type of enum.Enum_ members. No... srsly. You\n   don't. You do? Very well. It's enum.Enum_. :superscript:`mic drop`\n\nValidator Syntax\n~~~~~~~~~~~~~~~~\n\nBeartype validators support a rich domain-specific language (DSL) leveraging\nfamiliar Python operators. Dynamically create new validators on-the-fly from\nexisting validators, fueling reuse and preserving DRY_:\n\n* **Negation** (i.e., ``not``). Negating any validator with the ``~`` operator\n  creates a new validator returning ``True`` only when the negated validator\n  returns ``False``:\n\n  .. code-block:: python\n\n     # Type hint matching only strings containing *no* periods, semantically\n     # equivalent to this type hint:\n     #     PeriodlessString = Annotated[str, Is[lambda text: '.' not in text]]\n     PeriodlessString = Annotated[str, ~Is[lambda text: '.' in text]]\n\n* **Conjunction** (i.e., ``and``). And-ing two or more validators with the\n  ``&`` operator creates a new validator returning ``True`` only when *all* of\n  the and-ed validators return ``True``:\n\n  .. code-block:: python\n\n     # Type hint matching only non-empty strings containing *no* periods,\n     # semantically equivalent to this type hint:\n     #     NonemptyPeriodlessString = Annotated[\n     #         str, Is[lambda text: text and '.' not in text]]\n     SentenceFragment = Annotated[str, (\n          Is[lambda text: bool(text)] &\n         ~Is[lambda text: '.' in text]\n     )]\n\n* **Disjunction** (i.e., ``or``). Or-ing two or more validators with the ``|``\n  operator creates a new validator returning ``True`` only when at least one of\n  the or-ed validators returns ``True``:\n\n  .. code-block:: python\n\n     # Type hint matching only empty strings *and* non-empty strings containing\n     # one or more periods, semantically equivalent to this type hint:\n     #     EmptyOrPeriodfullString = Annotated[\n     #         str, Is[lambda text: not text or '.' in text]]\n     EmptyOrPeriodfullString = Annotated[str, (\n         ~Is[lambda text: bool(text)] |\n          Is[lambda text: '.' in text]\n     )]\n\n* **Enumeration** (i.e., ``,``). Delimiting two or or more validators with\n  commas at the top level of a typing.Annotated_ type hint is an alternate\n  syntax for and-ing those validators with the ``&`` operator, creating a new\n  validator returning ``True`` only when *all* of those delimited validators\n  return ``True``.\n\n  .. code-block:: python\n\n     # Type hint matching only non-empty strings containing *no* periods,\n     # semantically equivalent to the \"SentenceFragment\" defined above.\n     SentenceFragment = Annotated[str,\n          Is[lambda text: bool(text)],\n         ~Is[lambda text: '.' in text],\n     ]\n\n  Since the ``&`` operator is more explicit *and* usable in a wider variety of\n  syntactic contexts, the ``&`` operator is generally preferable to enumeration\n  (all else being equal).\n* **Interoperability.** As PEP-compliant type hints, validators are safely\n  interoperable with other PEP-compliant type hints and usable wherever other\n  PEP-compliant type hints are usable. Standard type hints are subscriptable\n  with validators, because validators *are* standard type hints:\n\n  .. code-block:: python\n\n     # Type hint matching only sentence fragments defined as either Unicode or\n     # byte strings, generalizing \"SentenceFragment\" type hints defined above.\n     SentenceFragment = Union[\n         Annotated[bytes, Is[lambda text: b'.' in text]],\n         Annotated[str,   Is[lambda text: u'.' in text]],\n     ]\n\n`Standard Python precedence rules <_operator precedence>`__ may apply. DSL:\n*it's not just a telecom acronym anymore.*\n\nValidator Caveats\n~~~~~~~~~~~~~~~~~\n\n.. #FIXME: Coerce this into a proper reST note box when Sphinxifying this.\n\n**‼ Validators require:**\n\n* **Beartype.** Currently, all other static and runtime type checkers silently\n  ignore beartype validators during type-checking. This includes mypy_ – which\n  we could possibly solve by bundling a `mypy plugin`_ with beartype that\n  extends mypy_ to statically analyze declarative beartype validators (e.g.,\n  ``beartype.vale.IsAttr``, ``beartype.vale.IsEqual``). We leave this as an\n  exercise to the idealistic doctoral thesis candidate. :superscript:`Please do\n  this for us, someone who is not us.`\n* Either **Python ≥ 3.9** *or* `typing_extensions ≥ 3.9.0.0\n  <typing_extensions_>`__. Validators piggyback onto the typing.Annotated_\n  class first introduced with Python 3.9.0 and since backported to older Python\n  versions by the `third-party \"typing_extensions\" package\n  <typing_extensions_>`__, which beartype also transparently supports.\n\nValidator Showcase\n~~~~~~~~~~~~~~~~~~\n\nObserve the disturbing (yet alluring) utility of beartype validators in action\nas they unshackle type hints from the fetters of PEP compliance. Begone,\nfoulest standards!\n\nType Hint Arithmetic\n++++++++++++++++++++\n\n    **Subtitle:** *From Set Theory They Shall Grow*\n\n`PEP 484`_ standardized the typing.Union_ factory `disjunctively\n<disjunction_>`__ matching any of several equally permissible type hints ala\nPython's builtin ``or`` operator or the overloaded ``|`` operator for sets.\nThat's great, because set theory is the beating heart behind type theory.\n\nBut that's just disjunction_. What about intersection_ (e.g., ``and``, ``&``),\n`complementation <relative set complement_>`__ (e.g., ``not``, ``~``), or any\nof the vast multitude of *other* set theoretic operations? Can we logically\nconnect simple type hints validating trivial constraints into complex type\nhints validating non-trivial constraints via PEP-standardized analogues of\nunary and binary operators?\n\n**Nope.** They don't exist yet. But that's okay. You use beartype, which means\nyou don't have to wait for official Python developers to get there first.\nYou're already there. :superscript:`...woah`\n\nType Hint Elision\n^^^^^^^^^^^^^^^^^\n\nPython's core type hierarchy conceals an ugly history of secretive backward\ncompatibility. In this subsection, we uncover the two filthiest, flea-infested,\nbackwater corners of the otherwise well-lit atrium that is the Python language\n– and how exactly you can finalize them. Both obstruct type-checking, readable\nAPIs, and quality assurance in the post-Python 2.7 era.\n\nGuido doesn't want you to know. But you want to know, don't you? You are about\nto enter another dimension, a dimension not only of syntax and semantics but of\nshame. A journey into a hideous land of annotation wrangling. Next stop... *the\nBeartype Zone.* Because guess what?\n\n* **Booleans are integers.** They shouldn't be. Booleans aren't integers in\n  most high-level languages. Wait. Are you telling me booleans are\n  literally integers in Python? Surely you jest. That can't be. You can't *add*\n  booleans, can you? What would that even mean if you could? Observe and cower,\n  rigorous data engineers.\n\n  .. code-block:: python\n\n     >>> True + 3.1415\n     4.141500000000001    # <-- oh. by. god.\n     >>> isinstance(False, int)\n     True                 # <-- when nothing is true, everything is true\n\n* **Strings are infinitely recursive sequences of...** yup, it's strings. They\n  shouldn't be. Strings aren't infinitely recursive data structures in any\n  other language devised by incautious mortals – high-level or not. Wait. Are\n  you telling me strings are both indistinguishable from full-blown immutable\n  sequences containing arbitrary items *and* infinitely recurse into themselves\n  like that sickening non-Euclidean Hall of Mirrors I puked all over when I was\n  a kid? Surely you kid. That can't be. You can't infinitely index into strings\n  *and* pass and return the results to and from callables expecting either\n  ``Sequence[Any]`` or ``Sequence[str]`` type hints, can you? Witness and\n  tremble, stricter-than-thou QA evangelists.\n\n  .. code-block:: python\n\n     >>> 'yougottabekiddi—'[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]\n     'y'                 # <-- pretty sure we just broke the world\n     >>> from collections.abc import Sequence\n     >>> isinstance(\"Ph'nglui mglw'nafh Cthu—\"[0][0][0][0][0], Sequence)\n     True                # <-- ...curse you, curse you to heck and back\n\nWhen we annotate a callable as accepting an ``int``, we *never* want that\ncallable to also silently accept a ``bool``. Likewise, when we annotate another\ncallable as accepting a ``Sequence[Any]`` or ``Sequence[str]``, we *never* want\nthat callable to also silently accept a ``str``. These are sensible\nexpectations – just not in Python, where madness prevails.\n\nTo resolve these counter-intuitive concerns, we need the equivalent of the\n`relative set complement (or difference) <relative set complement_>`__. We now\ncall this thing... **type elision!** Sounds pretty hot, right? We know.\n\nLet's first validate **non-boolean integers** with a beartype validator\neffectively declaring a new ``int - bool`` class (i.e., the subclass of all\nintegers that are *not* booleans):\n\n.. code-block:: python\n\n   # Import the requisite machinery.\n   from beartype import beartype\n   from beartype.vale import IsInstance\n   from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n   #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n   # Type hint matching any non-boolean integer. This day all errata die.\n   IntNonbool = Annotated[int, ~IsInstance[bool]]   # <--- bruh\n\n   # Type-check zero or more non-boolean integers summing to a non-boolean\n   # integer. Beartype wills it. So it shall be.\n   @beartype\n   def sum_ints(*args: IntNonbool) -> IntNonbool:\n       '''\n       I cast thee out, mangy booleans!\n\n       You plague these shores no more.\n       '''\n\n       return sum(args)\n\nLet's next validate **non-string sequences** with beartype validators\neffectively declaring a new ``Sequence - str`` class (i.e., the subclass of all\nsequences that are *not* strings):\n\n.. code-block:: python\n\n   # Import the requisite machinery.\n   from beartype import beartype\n   from beartype.vale import IsInstance\n   from collections.abc import Sequence\n   from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n   #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n   # Type hint matching any non-string sequence. Your day has finally come.\n   SequenceNonstr = Annotated[Sequence, ~IsInstance[str]]   # <--- we doin this\n\n   # Type hint matching any non-string sequence *WHOSE ITEMS ARE ALL STRINGS.*\n   SequenceNonstrOfStr = Annotated[Sequence[str], ~IsInstance[str]]\n\n   # Type-check a non-string sequence of arbitrary items coerced into strings\n   # and then joined on newline to a new string. (Beartype got your back, bro.)\n   @beartype\n   def join_objects(my_sequence: SequenceNonstr) -> str:\n       '''\n       Your tide of disease ends here, :class:`str` class!\n       '''\n\n       return '\\n'.join(map(str, my_sequence))  # <-- no idea how that works\n\n   # Type-check a non-string sequence whose items are all strings joined on\n   # newline to a new string. It isn't much, but it's all you ask.\n   @beartype\n   def join_strs(my_sequence: SequenceNonstrOfStr) -> str:\n       '''\n       I expectorate thee up, sequence of strings.\n       '''\n\n       return '\\n'.join(my_sequence)  # <-- do *NOT* do this to a string\n\nFull-Fat O(n) Matching\n++++++++++++++++++++++\n\nLet's validate **all integers in a list of integers in O(n) time**, because\nvalidators mean you no longer have to accept the QA scraps we feed you:\n\n.. code-block:: python\n\n   # Import the requisite machinery.\n   from beartype import beartype\n   from beartype.vale import Is\n   from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n   #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n   # Type hint matching all integers in a list of integers in O(n) time. Please\n   # never do this. You now want to, don't you? Why? You know the price! Why?!?\n   IntList = Annotated[list[int], Is[lambda lst: all(\n       isinstance(item, int) for item in lst)]]\n\n   # Type-check all integers in a list of integers in O(n) time. How could you?\n   @beartype\n   def sum_intlist(my_list: IntList) -> int:\n       '''\n       The slowest possible integer summation over the passed list of integers.\n\n       There goes your whole data science pipeline. Yikes! So much cringe.\n       '''\n\n       return sum(my_list)  # oh, gods what have you done\n\nWelcome to **full-fat type-checking.** In `our disastrous roadmap to beartype\n1.0.0 <beartype 1.0.0_>`__, we reluctantly admit that we'd like to augment the\n``@beartype`` decorator with a new parameter enabling full-fat type-checking.\nBut don't wait on us. Force the issue now by just doing it yourself and then\nmocking us all over Gitter! *Fight the bear, man.*\n\nThere are good reasons to believe that `O(1) type-checking is preferable <What\ndoes beartype do?_>`__. Violating that core precept exposes your codebase to\nscalability and security concerns. But you're the Big Boss, you swear you know\nbest, and (in any case) we can't stop you because we already let the unneutered\ntomcat out of his trash bin by `publishing this API into the badlands of PyPI\n<beartype PyPI_>`__.\n\nTensor Property Matching\n++++++++++++++++++++++++\n\nLet's validate `the same two-dimensional NumPy array of floats of arbitrary\nprecision as in the lead example above <Beartype Validators_>`__ with an\nefficient declarative validator avoiding the additional stack frame imposed by\nthe functional validator in that example:\n\n.. code-block:: python\n\n   # Import the requisite machinery.\n   from beartype import beartype\n   from beartype.vale import IsAttr, IsEqual, IsSubclass\n   from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n   #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n   # Type hint matching only two-dimensional NumPy arrays of floats of\n   # arbitrary precision. This time, do it faster than anyone has ever\n   # type-checked NumPy arrays before. (Cue sonic boom, Chuck Yeager.)\n   import numpy as np\n   Numpy2DFloatArray = Annotated[np.ndarray,\n       IsAttr['ndim', IsEqual[2]] &\n       IsAttr['dtype', IsAttr['type', IsSubclass[np.floating]]]\n   ]\n\n   # Annotate @beartype-decorated callables with beartype validators.\n   @beartype\n   def polygon_area(polygon: Numpy2DFloatArray) -> float:\n       '''\n       Area of a two-dimensional polygon of floats defined as a set of\n       counter-clockwise points, calculated via Green's theorem.\n\n       *Don't ask.*\n       '''\n\n       # Calculate and return the desired area. Pretend we understand this.\n       polygon_rolled = np.roll(polygon, -1, axis=0)\n       return np.abs(0.5*np.sum(\n           polygon[:,0]*polygon_rolled[:,1] -\n           polygon_rolled[:,0]*polygon[:,1]))\n\nTrendy String Matching\n++++++++++++++++++++++\n\nLet's validate strings either at least 80 characters long *or* both quoted and\nsuffixed by a period. Look, it doesn't matter. Just do it already,\n``@beartype``!\n\n.. code-block:: python\n\n   # Import the requisite machinery.\n   from beartype import beartype\n   from beartype.vale import Is\n   from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n   #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n   # Validator matching only strings at least 80 characters in length.\n   IsLengthy = Is[lambda text: len(text) >= 80]\n\n   # Validator matching only strings suffixed by a period.\n   IsSentence = Is[lambda text: text and text[-1] == '.']\n\n   # Validator matching only single- or double-quoted strings.\n   def _is_quoted(text): return text.count('\"') >= 2 or text.count(\"'\") >= 2\n   IsQuoted = Is[_is_quoted]\n\n   # Combine multiple validators by just listing them sequentially.\n   @beartype\n   def desentence_lengthy_quoted_sentence(\n       text: Annotated[str, IsLengthy, IsSentence, IsQuoted]]) -> str:\n       '''\n       Strip the suffixing period from a lengthy quoted sentence... 'cause.\n       '''\n\n       return text[:-1]  # this is horrible\n\n   # Combine multiple validators by just \"&\"-ing them sequentially. Yes, this\n   # is exactly identical to the prior function. We do this because we can.\n   @beartype\n   def desentence_lengthy_quoted_sentence_part_deux(\n       text: Annotated[str, IsLengthy & IsSentence & IsQuoted]]) -> str:\n       '''\n       Strip the suffixing period from a lengthy quoted sentence... again.\n       '''\n\n       return text[:-1]  # this is still horrible\n\n   # Combine multiple validators with as many \"&\", \"|\", and \"~\" operators as\n   # you can possibly stuff into a module that your coworkers can stomach.\n   # (They will thank you later. Possibly much later.)\n   @beartype\n   def strip_lengthy_or_quoted_sentence(\n       text: Annotated[str, IsLengthy | (IsSentence & ~IsQuoted)]]) -> str:\n       '''\n       Strip the suffixing character from a string that is lengthy and/or a\n       quoted sentence, because your web app deserves only the best data.\n       '''\n\n       return text[:-1]  # this is frankly outrageous\n\nValidator Alternatives\n~~~~~~~~~~~~~~~~~~~~~~\n\nIf the unbridled power of beartype validators leaves you variously queasy,\nuneasy, and suspicious of our core worldview, beartype also supports\nthird-party type hints like `typed NumPy arrays <NumPy Type Hints_>`__.\n\nWhereas beartype validators are verbose, expressive, and general-purpose, the\nfollowing hints are terse, inexpressive, and domain-specific. Since beartype\ninternally converts these hints to their equivalent validators, `similar\ncaveats apply <Validator Caveats_>`__. Notably, these hints require:\n\n* Either **Python ≥ 3.9** *or* `typing_extensions ≥ 3.9.0.0\n  <typing_extensions_>`__.\n\nNumPy Type Hints\n++++++++++++++++\n\nBeartype conditionally supports `NumPy type hints (i.e., annotations created by\nsubscripting (indexing) various attributes of the \"numpy.typing\" subpackage)\n<numpy.typing_>`__ when these optional runtime dependencies are *all*\nsatisfied:\n\n* Python ≥ 3.8.0.\n* beartype ≥ 0.8.0.\n* `NumPy ≥ 1.21.0 <NumPy_>`__.\n* Either **Python ≥ 3.9** *or* `typing_extensions ≥ 3.9.0.0\n  <typing_extensions_>`__.\n\nBeartype internally converts `NumPy type hints <numpy.typing_>`__ into\n`equivalent beartype validators <Beartype Validators_>`__ at decoration time.\n`NumPy type hints currently only validate dtypes <numpy.typing_>`__, a common\nbut limited use case. `Beartype validators <Beartype Validators_>`__ validate\n*any* arbitrary combinations of array constraints – including dtypes, shapes,\ncontents, and... well, *anything.* Which is alot. `NumPy type hints\n<numpy.typing.NDArray_>`__ are thus just syntactic sugar for `beartype\nvalidators <Beartype Validators_>`__ – albeit quasi-portable syntactic sugar\nalso supported by mypy_.\n\nWherever you can, prefer `NumPy type hints <numpy.typing_>`__ for portability.\nEverywhere else, default to `beartype validators <Beartype Validators_>`__ for\ngenerality. Combine them for the best of all possible worlds:\n\n.. code-block:: python\n\n   # Import the requisite machinery.\n   from beartype import beartype\n   from beartype.vale import IsAttr, IsEqual\n   from numpy import floating\n   from numpy.typing import NDArray\n   from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n   #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n   # Beartype validator + NumPy type hint matching all two-dimensional NumPy\n   # arrays of floating-point numbers of any arbitrary precision.\n   NumpyFloat64Array = Annotated[NDArray[floating], IsAttr['ndim', IsEqual[2]]]\n\nRejoice! A one-liner solves everything yet again.\n\nTyped NumPy Arrays\n^^^^^^^^^^^^^^^^^^\n\nType NumPy arrays by subscripting (indexing) the numpy.typing.NDArray_ class\nwith one of three possible types of objects:\n\n* An **array dtype** (i.e., instance of the numpy.dtype_ class).\n* A **scalar dtype** (i.e., concrete subclass of the numpy.generic_ abstract\n  base class (ABC)).\n* A **scalar dtype ABC** (i.e., abstract subclass of the numpy.generic_ ABC).\n\nBeartype generates fundamentally different type-checking code for these types,\ncomplying with both mypy_ semantics (which behaves similarly) and our userbase\n(which demands this behaviour). May there be hope for our future…\n\n*class* numpy.typing.\\ **NDArray**\\ [numpy.dtype]\n\n    **NumPy array typed by array dtype.** A PEP-noncompliant type hint\n    enforcing object equality against any **array dtype** (i.e., numpy.dtype_\n    instance), created by subscripting (indexing) the numpy.typing.NDArray_\n    class with that array dtype.\n\n    Prefer this variant when validating the exact data type of an array:\n\n    .. code-block:: python\n\n       # Import the requisite machinery.\n       from beartype import beartype\n       from numpy import dtype\n       from numpy.typing import NDArray\n\n       # NumPy type hint matching all NumPy arrays of 32-bit big-endian integers,\n       # semantically equivalent to this beartype validator:\n       #     NumpyInt32BigEndianArray = Annotated[\n       #         np.ndarray, IsAttr['dtype', IsEqual[dtype('>i4')]]]\n       NumpyInt32BigEndianArray = NDArray[dtype('>i4')]\n\n*class* numpy.typing.\\ **NDArray**\\ [numpy.dtype.type]\n\n    **NumPy array typed by scalar dtype.** A PEP-noncompliant type hint\n    enforcing object equality against any **scalar dtype** (i.e., concrete\n    subclass of the numpy.generic_ ABC), created by subscripting (indexing) the\n    numpy.typing.NDArray_ class with that scalar dtype.\n\n    Prefer this variant when validating the exact scalar precision of an array:\n\n    .. code-block:: python\n\n       # Import the requisite machinery.\n       from beartype import beartype\n       from numpy import float64\n       from numpy.typing import NDArray\n\n       # NumPy type hint matching all NumPy arrays of 64-bit floats, semantically\n       # equivalent to this beartype validator:\n       #     NumpyFloat64Array = Annotated[\n       #         np.ndarray, IsAttr['dtype', IsAttr['type', IsEqual[float64]]]]\n       NumpyFloat64Array = NDArray[float64]\n\n    Common scalar dtypes include:\n\n    * **Fixed-precision integer dtypes** (e.g., ``numpy.int32``,\n      ``numpy.int64``).\n    * **Fixed-precision floating-point dtypes** (e.g.,\n      ``numpy.float32``, ``numpy.float64``).\n\n*class* numpy.typing.\\ **NDArray**\\ [type[numpy.dtype.type]]\n\n    **NumPy array typed by scalar dtype ABC.** A PEP-noncompliant type hint\n    enforcing type inheritance against any **scalar dtype ABC** (i.e.,\n    abstract subclass of the numpy.generic_ ABC), created by subscripting\n    (indexing) the numpy.typing.NDArray_ class with that ABC.\n\n    Prefer this variant when validating only the *kind* of scalars (without\n    reference to exact precision) in an array:\n\n    .. code-block:: python\n\n       # Import the requisite machinery.\n       from beartype import beartype\n       from numpy import floating\n       from numpy.typing import NDArray\n\n       # NumPy type hint matching all NumPy arrays of floats of arbitrary\n       # precision, equivalent to this beartype validator:\n       #     NumpyFloatArray = Annotated[\n       #         np.ndarray, IsAttr['dtype', IsAttr['type', IsSubclass[floating]]]]\n       NumpyFloatArray = NDArray[floating]\n\n    Common scalar dtype ABCs include:\n\n    * numpy.integer_, the superclass of all fixed-precision integer dtypes.\n    * numpy.floating_, the superclass of all fixed-precision floating-point\n      dtypes.\n\nWarnings\n--------\n\nBeartype occasionally emits non-fatal warnings at decoration time. While most\nare self-explanatory, more than a few assume prior knowledge of arcane\ntype-hinting standards *or* require non-trivial resolutions warranting further\ndiscussion. Let's ELI5 this for the good of the common... good.\n\nPEP 585 Deprecations\n~~~~~~~~~~~~~~~~~~~~\n\nBeartype may occasionally emit non-fatal `PEP 585`_ deprecation warnings under\nPython ≥ 3.9 resembling:\n\n.. code-block::\n\n   /home/kumamon/beartype/_util/hint/pep/utilpeptest.py:377:\n   BeartypeDecorHintPep585DeprecationWarning: PEP 484 type hint\n   typing.List[int] deprecated by PEP 585 scheduled for removal in the first\n   Python version released after October 5th, 2025. To resolve this, import\n   this hint from \"beartype.typing\" rather than \"typing\". See this discussion\n   for further details and alternatives:\n       https://github.com/beartype/beartype#pep-585-deprecations\n\nThis is that discussion topic. Let's dissect this like a mantis shrimp\nrepeatedly punching out giant kraken.\n\nWhat Does This Mean?\n++++++++++++++++++++\n\nThe `PEP 585`_ standard first introduced by Python 3.9.0 deprecated (obsoleted)\n*most* of the `PEP 484`_ standard first introduced by Python 3.5.0 in the\nofficial typing_ module. All deprecated type hints are slated to \"be removed\nfrom the typing_ module in the first Python version released 5 years after the\nrelease of Python 3.9.0.\" Spoiler: Python 3.9.0 was released on October 5th,\n2020. Altogether, this means that:\n\n    **‼**\n\n    **Most of the \"typing\" module will be removed in 2025 or 2026.**\n\nIf your codebase currently imports from the typing_ module, *most* of those\nimports will break under an upcoming Python release. This is what beartype\nis shouting about. Bad Changes™ are coming to dismantle your working code.\n\nAre We on the Worst Timeline?\n+++++++++++++++++++++++++++++\n\nSeason Eight of *Game of Thrones* previously answered this question, but let's\ntry again. You have three options to avert the looming disaster that threatens\nto destroy everything you hold dear (in ascending order of justice):\n\n#. **Import from** ``beartype.typing`` **instead.** The easiest (and best)\n   solution is to globally replace all imports from the standard typing_ module\n   with equivalent imports from our ``beartype.typing`` module. So:\n\n   .. code-block:: python\n\n      # Just do this...\n      from beartype import typing\n\n      # ...instead of this.\n      #import typing\n\n      # Likewise, just do this...\n      from beartype.typing import Dict, FrozenSet, List, Set, Tuple, Type\n\n      # ...instead of this.\n      #from typing import Dict, FrozenSet, List, Set, Tuple, Type\n\n   The public ``beartype.typing`` API is a mypy_-compliant replacement for\n   the typing_ API offering improved forward compatibility with future Python\n   releases. For example:\n\n   * ``beartype.typing.Set is set`` under Python ≥ 3.9 for `PEP 585`_\n     compliance.\n   * ``beartype.typing.Set is typing.Set`` under Python < 3.9 for `PEP 484`_\n     compliance.\n\n#. **Drop Python < 3.9.** The next easiest (but worst) solution is to brutally\n   drop support for Python < 3.9 by globally replacing all deprecated `PEP\n   484`_-compliant type hints with equivalent `PEP 585`_-compliant type hints\n   (e.g., ``typing.List[int]`` with ``list[int]``). This is really only ideal\n   for closed-source proprietary projects with a limited userbase. All other\n   projects should prefer saner solutions outlined below.\n#. **Hide warnings.** The reprehensible (but understandable) middle-finger\n   way is to just squelch all deprecation warnings with an ignore warning\n   filter targeting the\n   ``BeartypeDecorHintPep585DeprecationWarning`` category. On the one hand,\n   this will still fail in 2025 or 2026 with fiery explosions and thus only\n   constitutes a temporary workaround at best. On the other hand, this has the\n   obvious advantage of preserving Python < 3.9 support with minimal to no\n   refactoring costs. The two ways to do this have differing tradeoffs\n   depending on who you want to suffer most – your developers or your userbase:\n\n   .. code-block:: python\n\n      # Do it globally for everyone, whether they want you to or not!\n      # This is the \"Make Users Suffer\" option.\n      from beartype.roar import BeartypeDecorHintPep585DeprecationWarning\n      from warnings import filterwarnings\n      filterwarnings(\"ignore\", category=BeartypeDecorHintPep585DeprecationWarning)\n      ...\n\n      # Do it locally only for you! (Hope you like increasing your\n      # indentation level in every single codebase module.)\n      # This is the \"Make Yourself Suffer\" option.\n      from beartype.roar import BeartypeDecorHintPep585DeprecationWarning\n      from warnings import catch_warnings, filterwarnings\n      with catch_warnings():\n          filterwarnings(\"ignore\", category=BeartypeDecorHintPep585DeprecationWarning)\n          ...\n\n#. **Type aliases.** The hardest (but best) solution is to use `type aliases`_\n   to conditionally annotate callables with either `PEP 484`_ *or* `585 <PEP\n   585_>`__ type hints depending on the major version of the current Python\n   interpreter. Since this is life, the hard way is also the best way – but\n   also hard. Unlike the **drop Python < 3.9** approach, this approach\n   preserves backward compatibility with Python < 3.9. Unlike the **hide\n   warnings** approach, this approach also preserves forward compatibility with\n   Python ≥ 3.14159265. `Type aliases`_ means defining a new private\n   ``{your_package}._typing`` submodule resembling:\n\n   .. code-block:: python\n\n      # In \"{your_package}._typing\":\n      from sys import version_info\n\n      if version_info >= (3, 9):\n          List = list\n          Tuple = tuple\n          ...\n      else:\n          from typing import List, Tuple, ...\n\n   Then globally refactor all deprecated `PEP 484`_ imports from typing_ to\n   ``{your_package}._typing`` instead:\n\n   .. code-block:: python\n\n      # Instead of this...\n      from typing import List, Tuple\n\n      # ...just do this.\n      from {your_package}._typing import List, Tuple\n\n   What could be simpler? :superscript:`...gagging noises faintly heard`\n\nComing up! A shocking revelation that cheaters prosper.\n\nCheatsheet\n==========\n\nLet's type-check like `greased lightning`_:\n\n.. code-block:: python\n\n   # ..................{              IMPORTS                }..................\n   # Import the core @beartype decorator.\n   from beartype import beartype\n\n   # Import PEP-agnostic type hints from \"beartype.typing\", a stand-in\n   # replacement for the standard \"typing\" module providing improved forward\n   # compatibility with future Python releases. For example:\n   # * \"beartype.typing.Set is set\" under Python ≥ 3.9 to satisfy PEP 585.\n   # * \"beartype.typing.Set is typing.Set\" under Python < 3.9 to satisfy PEP 484.\n   from beartype import typing\n\n   # Alternately, directly import PEP 484-compliant type hints. Note PEP 585\n   # deprecated many hints under Python ≥ 3.9, where @beartype now emits\n   # non-fatal deprecation warnings at decoration time. See also:\n   #     https://docs.python.org/3/library/typing.html\n   #import typing\n\n   # Alternately, directly import PEP 585-compliant type hints. Note this\n   # requires Python ≥ 3.9.\n   from collections import abc\n\n   # Import backported PEP-compliant type hints from \"typing_extensions\",\n   # improving portability across Python versions (e.g., \"typing.Literal\" needs\n   # Python ≥ 3.9 but \"typing_extensions.Literal\" only needs Python ≥ 3.6).\n   import typing_extensions\n\n   # Import beartype-specific types to annotate callables with.\n   from beartype.cave import NoneType, NoneTypeOr, RegexTypes, ScalarTypes\n\n   # Import official abstract base classes (ABCs), too.\n   from numbers import Integral, Real\n\n   # Import user-defined classes, too.\n   from my_package.my_module import MyClass\n\n   # ..................{              TYPEVARS               }..................\n   # User-defined PEP 484-compliant type variable. Note @beartype currently\n   # ignores type variables, but that @beartype 1.0.0 is expected to fully\n   # support type variables. See also: https://github.com/beartype/beartype/issues/7\n   T = typing.TypeVar('T')\n\n   # ..................{              PROTOCOLS              }..................\n   # User-defined PEP 544-compliant protocol referenced below in type hints.\n   # Note this requires Python ≥ 3.8 and that protocols *MUST* be explicitly\n   # decorated by the @runtime_checkable decorator to be usable with @beartype.\n   @typing.runtime_checkable   # <---- mandatory boilerplate line. it is sad.\n   class MyProtocol(typing.Protocol):\n       def my_method(self) -> str:\n           return (\n               'Objects satisfy this protocol only if their classes '\n               'define a method with the same signature as this method.'\n           )\n\n   # ..................{              FUNCTIONS              }..................\n   # Decorate functions with @beartype and...\n   @beartype\n   def my_function(\n       # Annotate builtin types as is.\n       param_must_satisfy_builtin_type: str,\n\n       # Annotate user-defined classes as is, too. Note this covariantly\n       # matches all instances of both this class and subclasses of this class.\n       param_must_satisfy_user_type: MyClass,\n\n       # Annotate PEP 604-compliant type unions. Unlike PEP 484-compliant\n       # unions, this excludes PEP-compliant type hints.\n       param_must_satisfy_pep604_union: dict | tuple | None,\n\n       # Annotate PEP 593-compliant metatypes, indexed by a PEP-compliant type\n       # hint followed by zero or more arbitrary objects.\n       param_must_satisfy_pep593: typing.Annotated[\n           typing.Set[int], range(5), True],\n\n       # Annotate PEP 586-compliant literals, indexed by either a boolean, byte\n       # string, integer, string, \"enum.Enum\" member, or \"None\".\n       param_must_satisfy_pep586: typing.Literal[\n           'This parameter must equal this string.'],\n\n       # Annotate PEP 585-compliant builtin container types, indexed by the\n       # types of items these containers are expected to contain.\n       param_must_satisfy_pep585_builtin: list[str],\n\n       # Annotate PEP 585-compliant standard collection types, indexed too.\n       param_must_satisfy_pep585_collection: abc.MutableSequence[str],\n\n       # Annotate PEP 544-compliant protocols, either unindexed or indexed by\n       # one or more type variables.\n       param_must_satisfy_pep544: MyProtocol[T],\n\n       # Annotate PEP 484-compliant non-standard container types defined by the\n       # \"typing\" module, optionally indexed and only usable as type hints.\n       # Note that these types have all been deprecated by PEP 585 under Python\n       # ≥ 3.9. See also: https://docs.python.org/3/library/typing.html\n       param_must_satisfy_pep484_typing: typing.List[int],\n\n       # Annotate PEP 484-compliant type hint unions. Unlike PEP 604-compliant\n       # type unions, this includes PEP-compliant type hints.\n       param_must_satisfy_pep484_union: typing.Union[\n           dict, T, tuple[MyClass, ...]],\n\n       # Annotate PEP 484-compliant relative forward references dynamically\n       # resolved at call time as unqualified classnames relative to the\n       # current user-defined submodule. Note this class is defined below and\n       # that beartype-specific absolute forward references are also supported.\n       param_must_satisfy_pep484_relative_forward_ref: 'MyOtherClass',\n\n       # Annotate PEP-compliant types indexed by relative forward references.\n       # Forward references are supported everywhere standard types are.\n       param_must_satisfy_pep484_indexed_relative_forward_ref: (\n           typing.Union['MyPep484Generic', set['MyPep585Generic']]),\n\n       # Annotate beartype-specific types predefined by the beartype cave.\n       param_must_satisfy_beartype_type_from_cave: NoneType,\n\n       # Annotate beartype-specific unions of types as tuples.\n       param_must_satisfy_beartype_union: (dict, MyClass, int),\n\n       # Annotate beartype-specific unions predefined by the beartype cave.\n       param_must_satisfy_beartype_union_from_cave: ScalarTypes,\n\n       # Annotate beartype-specific unions concatenated together.\n       param_must_satisfy_beartype_union_concatenated: (\n           abc.Iterator,) + ScalarTypes,\n\n       # Annotate beartype-specific absolute forward references dynamically\n       # resolved at call time as fully-qualified \".\"-delimited classnames.\n       param_must_satisfy_beartype_absolute_forward_ref: (\n           'my_package.my_module.MyClass'),\n\n       # Annotate beartype-specific forward references in unions of types, too.\n       param_must_satisfy_beartype_union_with_forward_ref: (\n           abc.Iterable, 'my_package.my_module.MyOtherClass', NoneType),\n\n       # Annotate PEP 484-compliant optional types. Note that parameters\n       # annotated by this type typically default to the \"None\" singleton.\n       param_must_satisfy_pep484_optional: typing.Optional[float] = None,\n\n       # Annotate PEP 484-compliant optional unions of types.\n       param_must_satisfy_pep484_optional_union: (\n           typing.Optional[typing.Union[float, int]]) = None,\n\n       # Annotate beartype-specific optional types.\n       param_must_satisfy_beartype_type_optional: NoneTypeOr[float] = None,\n\n       # Annotate beartype-specific optional unions of types.\n       param_must_satisfy_beartype_tuple_optional: NoneTypeOr[float, int] = None,\n\n       # Annotate variadic positional arguments as above, too.\n       *args: ScalarTypes + (Real, 'my_package.my_module.MyScalarType'),\n\n       # Annotate keyword-only arguments as above, too.\n       param_must_be_passed_by_keyword_only: abc.Sequence[\n           typing.Union[bool, list[str]]],\n\n   # Annotate return types as above, too.\n   ) -> Union[Integral, 'MyPep585Generic', bool]:\n       return 0xDEADBEEF\n\n   # Decorate coroutines as above but returning a coroutine type.\n   @beartype\n   async def my_coroutine() -> abc.Coroutine[None, None, int]:\n       from async import sleep\n       await sleep(0)\n       return 0xDEFECA7E\n\n   # ..................{              GENERATORS             }..................\n   # Decorate synchronous generators as above but returning a synchronous\n   # generator type.\n   @beartype\n   def my_sync_generator() -> abc.Generator[int, None, None]:\n       yield from range(0xBEEFBABE, 0xCAFEBABE)\n\n   # Decorate asynchronous generators as above but returning an asynchronous\n   # generator type.\n   @beartype\n   async def my_async_generator() -> abc.AsyncGenerator[int, None]:\n       from async import sleep\n       await sleep(0)\n       yield 0x8BADF00D\n\n   # ..................{              CLASSES                }..................\n   # Decorate classes with @beartype – which then automatically decorates all\n   # methods and properties of those classes with @beartype.\n   @beartype\n   class MyOtherClass:\n       # Annotate instance methods as above without annotating \"self\".\n       def __init__(self, scalar: ScalarTypes) -> None:\n           self._scalar = scalar\n\n       # Annotate class methods as above without annotating \"cls\".\n       @classmethod\n       def my_classmethod(cls, regex: RegexTypes, wut: str) -> (\n           Callable[(), str]):\n           import re\n           return lambda: re.sub(regex, 'unbearable', str(cls._scalar) + wut)\n\n       # Annotate static methods as above, too.\n       @staticmethod\n       def my_staticmethod(callable: abc.Callable[[str], T], text: str) -> T:\n           return callable(text)\n\n       # Annotate property getter methods as above, too.\n       @property\n       def my_gettermethod(self) -> abc.Iterator[int]:\n           return range(0x0B00B135 + int(self._scalar), 0xB16B00B5)\n\n       # Annotate property setter methods as above, too.\n       @my_gettermethod.setter\n       def my_settermethod(self, bad: Integral = 0xBAAAAAAD) -> None:\n           self._scalar = bad if bad else 0xBADDCAFE\n\n       # Annotate methods accepting or returning instances of the class\n       # currently being declared with relative forward references.\n       def my_selfreferential_method(self) -> list['MyOtherClass']:\n           return [self] * 42\n\n   # ..................{              GENERICS               }..................\n   # Decorate PEP 585 generics with @beartype. Note this requires Python ≥ 3.9.\n   @beartype\n   class MyPep585Generic(tuple[int, float]):\n       def __new__(cls, integer: int, real: float) -> tuple[int, float]:\n           return tuple.__new__(cls, (integer, real))\n\n   # Decorate PEP 484 generics with @beartype, too.\n   @beartype\n   class MyPep484Generic(typing.Tuple[str, ...]):\n       def __new__(cls, *args: str) -> typing.Tuple[str, ...]:\n           return tuple.__new__(cls, args)\n\n   # ..................{              DATACLASSES            }..................\n   # Import the requisite machinery. Note this requires Python ≥ 3.8.\n   from dataclasses import dataclass, InitVar\n\n   # Decorate dataclasses with @beartype, which then automatically decorates all\n   # methods and properties of those dataclasses with @beartype – including the\n   # __init__() constructors created by @dataclass. Fields are type-checked only\n   # at instantiation time. Fields are *NOT* type-checked when reassigned.\n   #\n   # Decoration order is significant. List @beartype before @dataclass, please.\n   @beartype\n   @dataclass\n   class MyDataclass:\n       # Annotate fields with PEP-compliant type hints.\n       field_must_satisfy_builtin_type: InitVar[str]\n       field_must_satisfy_pep604_union: str | None = None\n\n       # Annotate methods as above.\n       def __post_init__(self, field_must_satisfy_builtin_type: str) -> None:\n           if self.field_must_satisfy_pep604_union is None:\n               self.field_must_satisfy_pep604_union = (\n                   field_must_satisfy_builtin_type)\n\n   # ..................{              NAMED TUPLES           }..................\n   # Import the requisite machinery.\n   from typing import NamedTuple\n\n   # Decorate named tuples with @beartype.\n   @beartype\n   class MyNamedTuple(NamedTuple):\n       # Annotate fields with PEP-compliant type hints.\n       field_must_satisfy_builtin_type: str\n\n   # ..................{             CONFIGURATION           }..................\n   # Import beartype's configuration API to configure runtime type-checking.\n   from beartype import BeartypeConf, BeartypeStrategy\n\n   # Dynamically create your own @beartype decorator, configured for your needs.\n   bugbeartype = beartype(conf=BeartypeConf(\n       # Optionally disable or enable output of colors (i.e., ANSI escape\n       # sequences) in type-checking violations via this tri-state boolean:\n       # * \"None\" conditionally enables colors when standard output is attached\n       #   to an interactive terminal. [DEFAULT]\n       # * \"True\" unconditionally enables colors.\n       # * \"False\" unconditionally disables colors.\n       is_color=False,  # <-- disable color entirely\n\n       # Optionally enable developer-friendly debugging.\n       is_debug=True,\n\n       # Optionally enable PEP 484's implicit numeric tower by:\n       # * Expanding all \"float\" type hints to \"float | int\".\n       # * Expanding all \"complex\" type hints to \"complex | float | int\".\n       is_pep484_tower=True,\n\n       # Optionally switch to a different type-checking strategy:\n       # * \"BeartypeStrategy.O1\" type-checks in O(1) constant time. [DEFAULT]\n       # * \"BeartypeStrategy.On\" type-checks in O(n) linear time.\n       #   (Currently unimplemented but roadmapped for a future release.)\n       # * \"BeartypeStrategy.Ologn\" type-checks in O(log n) logarithmic time.\n       #   (Currently unimplemented but roadmapped for a future release.)\n       # * \"strategy=BeartypeStrategy.O0\" disables type-checking entirely.\n       strategy=BeartypeStrategy.On,  # <-- enable linear-time type-checking\n   ))\n\n   # Decorate with your decorator instead of the vanilla @beartype decorator.\n   @bugbeartype\n   def muh_configured_func(list_checked_in_On_time: list[float]) -> set[str]:\n       return set(str(item) for item in list_checked_in_On_time)\n\n   # ..................{             VALIDATORS              }..................\n   # Import beartype's PEP 593 validator API to validate arbitrary constraints.\n   # Note this requires either:\n   # * Python ≥ 3.9.0.\n   # * typing_extensions ≥ 3.9.0.0.\n   from beartype.vale import Is, IsAttr, IsEqual\n   from typing import Annotated   # <--------------- if Python ≥ 3.9.0\n   #from typing_extensions import Annotated   # <--- if Python < 3.9.0\n\n   # Import third-party packages to validate.\n   import numpy as np\n\n   # Validator matching only two-dimensional NumPy arrays of 64-bit floats,\n   # specified with a single caller-defined lambda function.\n   NumpyArray2DFloat = Annotated[np.ndarray, Is[\n       lambda arr: arr.ndim == 2 and arr.dtype == np.dtype(np.float64)]]\n\n   # Validator matching only one-dimensional NumPy arrays of 64-bit floats,\n   # specified with two declarative expressions. Although verbose, this\n   # approach generates optimal reusable code that avoids function calls.\n   IsNumpyArray1D = IsAttr['ndim', IsEqual[1]]\n   IsNumpyArrayFloat = IsAttr['dtype', IsEqual[np.dtype(np.float64)]]\n   NumpyArray1DFloat = Annotated[np.ndarray, IsNumpyArray1D, IsNumpyArrayFloat]\n\n   # Validator matching only empty NumPy arrays, equivalent to but faster than:\n   #     NumpyArrayEmpty = Annotated[np.ndarray, Is[lambda arr: arr.size != 0]]\n   IsNumpyArrayEmpty = IsAttr['size', IsEqual[0]]\n   NumpyArrayEmpty = Annotated[np.ndarray, IsNumpyArrayEmpty]\n\n   # Validator composed with standard operators from the above validators,\n   # permissively matching all of the following:\n   # * Empty NumPy arrays of any dtype *except* 64-bit floats.\n   # * Non-empty one- and two-dimensional NumPy arrays of 64-bit floats.\n   NumpyArrayEmptyNonFloatOrNonEmptyFloat1Or2D = Annotated[np.ndarray,\n       # \"&\" creates a new validator matching when both operands match, while\n       # \"|\" creates a new validator matching when one or both operands match;\n       # \"~\" creates a new validator matching when its operand does not match.\n       # Group operands to enforce semantic intent and avoid precedence woes.\n       (IsNumpyArrayEmpty & ~IsNumpyArrayFloat) | (\n           ~IsNumpyArrayEmpty & IsNumpyArrayFloat (\n               IsNumpyArray1D | IsAttr['ndim', IsEqual[2]]\n           )\n       )\n   ]\n\n   # Decorate functions accepting validators like usual and...\n   @beartype\n   def my_validated_function(\n       # Annotate validators just like standard type hints.\n       param_must_satisfy_validator: NumpyArrayEmptyOrNonemptyFloat1Or2D,\n   # Combine validators with standard type hints, too.\n   ) -> list[NumpyArrayEmptyNonFloatOrNonEmptyFloat1Or2D]:\n       return (\n           [param_must_satisfy_validator] * 0xFACEFEED\n           if bool(param_must_satisfy_validator) else\n           [np.array([i], np.dtype=np.float64) for i in range(0xFEEDFACE)]\n       )\n\n   # ..................{             NUMPY                   }..................\n   # Import NumPy-specific type hints validating NumPy array constraints. Note:\n   # * These hints currently only validate array dtypes. To validate additional\n   #   constraints like array shapes, prefer validators instead. See above.\n   # * This requires NumPy ≥ 1.21.0 and either:\n   #   * Python ≥ 3.9.0.\n   #   * typing_extensions ≥ 3.9.0.0.\n   from numpy.typing import NDArray\n\n   # NumPy type hint matching all NumPy arrays of 64-bit floats. Internally,\n   # beartype reduces this to the equivalent validator:\n   #     NumpyArrayFloat = Annotated[\n   #         np.ndarray, IsAttr['dtype', IsEqual[np.dtype(np.float64)]]]\n   NumpyArrayFloat = NDArray[np.float64]\n\n   # Decorate functions accepting NumPy type hints like usual and...\n   @beartype\n   def my_numerical_function(\n       # Annotate NumPy type hints just like standard type hints.\n       param_must_satisfy_numpy: NumpyArrayFloat,\n   # Combine NumPy type hints with standard type hints, too.\n   ) -> tuple[NumpyArrayFloat, int]:\n       return (param_must_satisfy_numpy, len(param_must_satisfy_numpy))\n\nFeatures\n========\n\nLet's chart current and future compliance with Python's `typing`_ landscape:\n\n.. #FIXME: Span category cells across multiple rows.\n\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| category           | feature                                 | versions partially supporting | versions fully supporting |\n+====================+=========================================+===============================+===========================+\n| decoratable        | classes                                 | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | coroutines                              | **0.9.0**\\ —\\ *current*       | **0.9.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | dataclasses                             | **0.10.0**\\ —\\ *current*      | **0.10.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | functions                               | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | generators (asynchronous)               | **0.9.0**\\ —\\ *current*       | **0.9.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | generators (synchronous)                | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | methods                                 | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| hints              | `covariant <covariance_>`__             | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `contravariant <covariance_>`__         | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | absolute forward references             | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `relative forward references`_          | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `tuple unions <Unions of Types_>`__     | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| parameters         | optional                                | **0.1.0**\\ —\\ *current*       | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | keyword-only                            | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | positional-only                         | **0.10.0**\\ —\\ *current*      | **0.10.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | variadic keyword                        | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | variadic positional                     | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| static analysis    | mypy_                                   | **0.6.0**\\ —\\ *current*       | **0.6.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | pyright_                                | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | pytype_                                 | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | Pyre_                                   | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| beartype.abby      | die_if_unbearable_                      | **0.10.0**\\ —\\ **0.10.4**     | **0.10.0**\\ —\\ **0.10.4** |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | is_bearable_                            | **0.10.0**\\ —\\ **0.10.4**     | **0.10.0**\\ —\\ **0.10.4** |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| beartype.door_     | TypeHint                                | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | AnnotatedTypeHint                       | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | CallableTypeHint                        | **0.11.0**\\ —\\ *current*      | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | LiteralTypeHint                         | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | NewTypeTypeHint                         | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | TypeVarTypeHint                         | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | UnionTypeHint                           | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | die_if_unbearable_                      | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | is_bearable_                            | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | is_subhint_                             | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| beartype.peps      | resolve_pep563                          | **0.11.0**\\ —\\ *current*      | **0.11.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| beartype.typing    | *all*                                   | **0.10.0**\\ —\\ *current*      | **0.10.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| beartype.vale_     | Is_                                     | **0.7.0**\\ —\\ *current*       | **0.7.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | IsAttr_                                 | **0.7.0**\\ —\\ *current*       | **0.7.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | IsEqual_                                | **0.7.0**\\ —\\ *current*       | **0.7.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `IsInstance <vale.IsInstance_>`__       | **0.10.0**\\ —\\ *current*      | **0.10.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `IsSubclass <vale.IsSubclass_>`__       | **0.9.0**\\ —\\ *current*       | **0.9.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| builtins_          | None_                                   | **0.6.0**\\ —\\ *current*       | **0.6.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | NotImplemented_                         | **0.7.1**\\ —\\ *current*       | **0.7.1**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | dict_                                   | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | frozenset_                              | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | list_                                   | **0.5.0**\\ —\\ *current*       | **0.5.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | set_                                    | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | tuple_                                  | **0.5.0**\\ —\\ *current*       | **0.5.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | type_                                   | **0.5.0**\\ —\\ *current*       | **0.9.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| collections_       | collections.ChainMap_                   | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.Counter_                    | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.OrderedDict_                | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.defaultdict_                | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.deque_                      | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| collections.abc_   | collections.abc.AsyncGenerator_         | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.AsyncIterable_          | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.AsyncIterator_          | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Awaitable_              | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.ByteString_             | **0.5.0**\\ —\\ *current*       | **0.5.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Callable_               | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Collection_             | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Container_              | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Coroutine_              | **0.5.0**\\ —\\ *current*       | **0.9.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Generator_              | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.ItemsView_              | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Iterable_               | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Iterator_               | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.KeysView_               | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Mapping_                | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.MappingView_            | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.MutableMapping_         | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.MutableSequence_        | **0.5.0**\\ —\\ *current*       | **0.5.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.MutableSet_             | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Reversible_             | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Sequence_               | **0.5.0**\\ —\\ *current*       | **0.5.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.Set_                    | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | collections.abc.ValuesView_             | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| contextlib_        | contextlib.AbstractAsyncContextManager_ | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | contextlib.AbstractContextManager_      | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| dataclasses_       | dataclasses.InitVar_                    | **0.10.0**\\ —\\ *current*      | **0.10.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| dataclasses_       | dataclasses.dataclass_                  | **0.10.0**\\ —\\ *current*      | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| nuitka_            | *all*                                   | **0.12.0**\\ —\\ *current*      | **0.12.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| numpy.typing_      | numpy.typing.NDArray_                   | **0.8.0**\\ —\\ *current*       | **0.8.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| re_                | re.Match_                               | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | re.Pattern_                             | **0.5.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| sphinx_            | sphinx.ext.autodoc_                     | **0.9.0**\\ —\\ *current*       | **0.9.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| typing_            | typing.AbstractSet_                     | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Annotated_                       | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Any_                             | **0.2.0**\\ —\\ *current*       | **0.2.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.AnyStr_                          | **0.4.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.AsyncContextManager_             | **0.4.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.AsyncGenerator_                  | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.AsyncIterable_                   | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.AsyncIterator_                   | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Awaitable_                       | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.BinaryIO_                        | **0.4.0**\\ —\\ *current*       | **0.10.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.ByteString_                      | **0.2.0**\\ —\\ *current*       | **0.2.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Callable_                        | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.ChainMap_                        | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.ClassVar_                        | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Collection_                      | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Concatenate_                     | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Container_                       | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.ContextManager_                  | **0.4.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Coroutine_                       | **0.2.0**\\ —\\ *current*       | **0.9.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Counter_                         | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.DefaultDict_                     | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Deque_                           | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Dict_                            | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Final_                           | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.ForwardRef_                      | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.FrozenSet_                       | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Generator_                       | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Generic_                         | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Hashable_                        | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.IO_                              | **0.4.0**\\ —\\ *current*       | **0.10.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.ItemsView_                       | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Iterable_                        | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Iterator_                        | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.KeysView_                        | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.List_                            | **0.2.0**\\ —\\ *current*       | **0.3.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Literal_                         | **0.7.0**\\ —\\ *current*       | **0.7.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Mapping_                         | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.MappingView_                     | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Match_                           | **0.4.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.MutableMapping_                  | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.MutableSequence_                 | **0.2.0**\\ —\\ *current*       | **0.3.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.MutableSet_                      | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.NamedTuple_                      | **0.1.0**\\ —\\ *current*       | **0.12.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.NewType_                         | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.NoReturn_                        | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Optional_                        | **0.2.0**\\ —\\ *current*       | **0.2.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.OrderedDict_                     | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.ParamSpec_                       | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.ParamSpecArgs_                   | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.ParamSpecKwargs_                 | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Pattern_                         | **0.4.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Protocol_                        | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Reversible_                      | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Self_                            | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Sequence_                        | **0.2.0**\\ —\\ *current*       | **0.3.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Set_                             | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Sized_                           | **0.2.0**\\ —\\ *current*       | **0.2.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.SupportsAbs_                     | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.SupportsBytes_                   | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.SupportsComplex_                 | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.SupportsFloat_                   | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.SupportsIndex_                   | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.SupportsInt_                     | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.SupportsRound_                   | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Text_                            | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.TextIO_                          | **0.4.0**\\ —\\ *current*       | **0.10.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Tuple_                           | **0.2.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Type_                            | **0.2.0**\\ —\\ *current*       | **0.9.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.TypeGuard_                       | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.TypedDict_                       | **0.9.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.TypeVar_                         | **0.4.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.Union_                           | **0.2.0**\\ —\\ *current*       | **0.2.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | typing.ValuesView_                      | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `typing.TYPE_CHECKING`_                 | **0.5.0**\\ —\\ *current*       | **0.5.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `@typing.final`_                        | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `@typing.no_type_check`_                | **0.5.0**\\ —\\ *current*       | **0.5.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| typing_extensions_ | *all attributes*                        | **0.8.0**\\ —\\ *current*       | **0.8.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| PEP                | `362 <PEP 362_>`__                      | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `484 <PEP 484_>`__                      | **0.2.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `544 <PEP 544_>`__                      | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `557 <PEP 557_>`__                      | **0.10.0**\\ —\\ *current*      | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `560 <PEP 560_>`__                      | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `561 <PEP 561_>`__                      | **0.6.0**\\ —\\ *current*       | **0.6.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `563 <PEP 563_>`__                      | **0.1.1**\\ —\\ *current*       | **0.7.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `570 <PEP 570_>`__                      | **0.10.0**\\ —\\ *current*      | **0.10.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `572 <PEP 572_>`__                      | **0.3.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `585 <PEP 585_>`__                      | **0.5.0**\\ —\\ *current*       | **0.5.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `586 <PEP 586_>`__                      | **0.7.0**\\ —\\ *current*       | **0.7.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `589 <PEP 589_>`__                      | **0.9.0**\\ —\\ *current*       | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `591 <PEP 591_>`__                      | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `593 <PEP 593_>`__                      | **0.4.0**\\ —\\ *current*       | **0.4.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `604 <PEP 604_>`__                      | **0.10.0**\\ —\\ *current*      | **0.10.0**\\ —\\ *current*  |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `612 <PEP 612_>`__                      | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `613 <PEP 613_>`__                      | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `646 <PEP 646_>`__                      | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `647 <PEP 647_>`__                      | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `673 <PEP 673_>`__                      | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `675 <PEP 675_>`__                      | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `681 <PEP 681_>`__                      | *none*                        | *none*                    |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `3102 <PEP 3102_>`__                    | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `3119 <PEP 3119_>`__                    | **0.7.0**\\ —\\ *current*       | **0.9.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `3141 <PEP 3141_>`__                    | **0.1.0**\\ —\\ *current*       | **0.1.0**\\ —\\ *current*   |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| packages           | `PyPI <beartype PyPI_>`__               | **0.1.0**\\ —\\ *current*       | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `Anaconda <beartype Anaconda_>`__       | **0.1.0**\\ —\\ *current*       | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `Gentoo Linux <beartype Gentoo_>`__     | **0.2.0**\\ —\\ *current*       | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `macOS Homebrew <beartype Homebrew_>`__ | **0.5.1**\\ —\\ *current*       | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | `macOS MacPorts <beartype MacPorts_>`__ | **0.5.1**\\ —\\ *current*       | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n| Python             | 3.5                                     | **0.1.0**\\ —\\ **0.3.0**       | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | 3.6                                     | **0.1.0**\\ —\\ **0.10.4**      | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | 3.7                                     | **0.1.0**\\ —\\ *current*       | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | 3.8                                     | **0.1.0**\\ —\\ *current*       | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | 3.9                                     | **0.3.2**\\ —\\ *current*       | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | 3.10                                    | **0.7.0**\\ —\\ *current*       | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n|                    | 3.11                                    | **0.12.0**\\ —\\ *current*      | —                         |\n+--------------------+-----------------------------------------+-------------------------------+---------------------------+\n\nTimings\n=======\n\nLet's profile beartype against other runtime type-checkers with `a battery\nof surely fair, impartial, and unbiased use cases <beartype profiler_>`__:\n\n.. code-block:: bash\n\n   $ bin/profile.bash\n\n   beartype profiler [version]: 0.0.2\n\n   python    [basename]: python3.9\n   python    [version]: Python 3.9.0\n   beartype  [version]: 0.6.0\n   typeguard [version]: 2.9.1\n\n   ===================================== str =====================================\n   profiling regime:\n      number of meta-loops:      3\n      number of loops:           100\n      number of calls each loop: 100\n   decoration         [none     ]: 100 loops, best of 3: 359 nsec per loop\n   decoration         [beartype ]: 100 loops, best of 3: 389 usec per loop\n   decoration         [typeguard]: 100 loops, best of 3: 13.5 usec per loop\n   decoration + calls [none     ]: 100 loops, best of 3: 14.8 usec per loop\n   decoration + calls [beartype ]: 100 loops, best of 3: 514 usec per loop\n   decoration + calls [typeguard]: 100 loops, best of 3: 6.34 msec per loop\n\n   =============================== Union[int, str] ===============================\n   profiling regime:\n      number of meta-loops:      3\n      number of loops:           100\n      number of calls each loop: 100\n   decoration         [none     ]: 100 loops, best of 3: 1.83 usec per loop\n   decoration         [beartype ]: 100 loops, best of 3: 433 usec per loop\n   decoration         [typeguard]: 100 loops, best of 3: 15.6 usec per loop\n   decoration + calls [none     ]: 100 loops, best of 3: 17.7 usec per loop\n   decoration + calls [beartype ]: 100 loops, best of 3: 572 usec per loop\n   decoration + calls [typeguard]: 100 loops, best of 3: 10 msec per loop\n\n   =========================== List[int] of 1000 items ===========================\n   profiling regime:\n      number of meta-loops:      1\n      number of loops:           1\n      number of calls each loop: 7485\n   decoration         [none     ]: 1 loop, best of 1: 10.1 usec per loop\n   decoration         [beartype ]: 1 loop, best of 1: 1.3 msec per loop\n   decoration         [typeguard]: 1 loop, best of 1: 41.1 usec per loop\n   decoration + calls [none     ]: 1 loop, best of 1: 1.24 msec per loop\n   decoration + calls [beartype ]: 1 loop, best of 1: 18.3 msec per loop\n   decoration + calls [typeguard]: 1 loop, best of 1: 104 sec per loop\n\n   ============ List[Sequence[MutableSequence[int]]] of 10 items each ============\n   profiling regime:\n      number of meta-loops:      1\n      number of loops:           1\n      number of calls each loop: 7485\n   decoration         [none     ]: 1 loop, best of 1: 11.8 usec per loop\n   decoration         [beartype ]: 1 loop, best of 1: 1.77 msec per loop\n   decoration         [typeguard]: 1 loop, best of 1: 48.9 usec per loop\n   decoration + calls [none     ]: 1 loop, best of 1: 1.19 msec per loop\n   decoration + calls [beartype ]: 1 loop, best of 1: 81.2 msec per loop\n   decoration + calls [typeguard]: 1 loop, best of 1: 17.3 sec per loop\n\n.. note::\n   * ``sec`` = seconds.\n   * ``msec`` = milliseconds = 10\\ :sup:`-3` seconds.\n   * ``usec`` = microseconds = 10\\ :sup:`-6` seconds.\n   * ``nsec`` = nanoseconds = 10\\ :sup:`-9` seconds.\n\nELI5\n----\n\nbeartype is:\n\n* **At least twenty times faster** (i.e., 20,000%) and consumes **three orders\n  of magnitude less time** in the worst case than typeguard_ – the only\n  comparable runtime type-checker also compatible with most modern Python\n  versions.\n* **Asymptotically faster** in the best case than typeguard_, which scales\n  linearly (rather than not at all) with the size of checked containers.\n* Constant across type hints, taking roughly the same time to check parameters\n  and return values hinted by the builtin type ``str`` as it does to check\n  those hinted by the unified type ``Union[int, str]`` as it does to check\n  those hinted by the container type ``List[object]``. typeguard_ is\n  variable across type hints, taking significantly longer to check\n  ``List[object]`` as as it does to check ``Union[int, str]``, which takes\n  roughly twice the time as it does to check ``str``.\n\nbeartype performs most of its work at *decoration* time. The ``@beartype``\ndecorator consumes most of the time needed to first decorate and then\nrepeatedly call a decorated function. beartype is thus front-loaded. After\npaying the initial cost of decoration, each type-checked call thereafter incurs\ncomparatively little overhead.\n\nConventional runtime type checkers perform most of their work at *call* time.\nThe ``@typeguard.typechecked`` and similar decorators consume almost none of\nthe time needed to first decorate and then repeatedly call a decorated\nfunction. They are thus back-loaded. Although the initial cost of decoration is\nessentially free, each type-checked call thereafter incurs significant\noverhead.\n\nHow Much Does All This Cost?\n----------------------------\n\nBeartype dynamically generates functions wrapping decorated callables with\nconstant-time runtime type-checking. This separation of concerns means that\nbeartype exhibits different cost profiles at decoration and call time. Whereas\nstandard runtime type-checking decorators are fast at decoration time and slow\nat call time, beartype is the exact opposite.\n\nAt call time, wrapper functions generated by the ``@beartype`` decorator are\nguaranteed to unconditionally run in **O(1) non-amortized worst-case time with\nnegligible constant factors** regardless of type hint complexity or nesting.\nThis is *not* an amortized average-case analysis. Wrapper functions really are\n``O(1)`` time in the best, average, and worst cases.\n\nAt decoration time, performance is slightly worse. Internally, beartype\nnon-recursively iterates over type hints at decoration time with a\nmicro-optimized breadth-first search (BFS). Since this BFS is memoized, its\ncost is paid exactly once per type hint per process; subsequent references to\nthe same hint over different parameters and returns of different callables in\nthe same process reuse the results of the previously memoized BFS for that\nhint. The ``@beartype`` decorator itself thus runs in:\n\n* **O(1) amortized average-case time.**\n* **O(k) non-amortized worst-case time** for ``k`` the number of child type\n  hints nested in a parent type hint and including that parent.\n\nSince we generally expect a callable to be decorated only once but called\nmultiple times per process, we might expect the cost of decoration to be\nignorable in the aggregate. Interestingly, this is not the case. Although only\npaid once and obviated through memoization, decoration time is sufficiently\nexpensive and call time sufficiently inexpensive that beartype spends most of\nits wall-clock merely decorating callables. The actual function wrappers\ndynamically generated by ``@beartype`` consume comparatively little wall-clock,\neven when repeatedly called many times.\n\nThat's Some Catch, That Catch-22\n--------------------------------\n\nBeartype's greatest strength is that it checks types in constant time.\n\nBeartype's greatest weakness is that it checks types in constant time.\n\nOnly so many type-checks can be stuffed into a constant slice of time with\nnegligible constant factors. Let's detail exactly what (and why) beartype\nstuffs into its well-bounded slice of the CPU pie.\n\nStandard runtime type checkers naïvely brute-force the problem by type-checking\n*all* child objects transitively reachable from parent objects passed to and\nreturned from callables in ``O(n)`` linear time for ``n`` such objects. This\napproach avoids false positives (i.e., raising exceptions for valid objects)\n*and* false negatives (i.e., failing to raise exceptions for invalid objects),\nwhich is good. But this approach also duplicates work when those objects remain\nunchanged over multiple calls to those callables, which is bad.\n\nBeartype circumvents that badness by generating code at decoration time\nperforming a one-way random tree walk over the expected nested structure of\nthose objects at call time. For each expected nesting level of each container\npassed to or returned from each callable decorated by ``@beartype`` starting at\nthat container and ending either when a check fails *or* all checks succeed,\nthat callable performs these checks (in order):\n\n#. A **shallow type-check** that the current possibly nested container is an\n   instance of the type given by the current possibly nested type hint.\n#. A **deep type-check** that an item randomly selected from that container\n   itself satisfies the first check.\n\nFor example, given a parameter's type hint ``list[tuple[Sequence[str]]]``,\nbeartype generates code at decoration time performing these checks at call time\n(in order):\n\n#. A check that the object passed as this parameter is a list.\n#. A check that an item randomly selected from this list is a tuple.\n#. A check that an item randomly selected from this tuple is a sequence.\n#. A check that an item randomly selected from this sequence is a string.\n\nBeartype thus performs one check for each possibly nested type hint for each\nannotated parameter or return object for each call to each decorated callable.\nThis deep randomness gives us soft statistical expectations as to the number of\ncalls needed to check everything. Specifically, `it can be shown that beartype\ntype-checks on average <Nobody Expects the Linearithmic Time_>`__ *all* child\nobjects transitively reachable from parent objects passed to and returned from\ncallables in ``O(n log n)`` calls to those callables for ``n`` such objects.\nPraise RNGesus_!\n\nBeartype avoids false positives and rarely duplicates work when those objects\nremain unchanged over multiple calls to those callables, which is good. Sadly,\nbeartype also invites false negatives, because this approach only checks a\nvertical slice of the full container structure each call, which is bad.\n\nWe claim without evidence that false negatives are unlikely under the\noptimistic assumption that most real-world containers are **homogenous** (i.e.,\ncontain only items of the same type) rather than **heterogenous** (i.e.,\ncontain items of differing types). Examples of homogenous containers include\n(byte-)strings, `ranges <range_>`__, `streams <io_>`__, `memory views\n<memoryview_>`__, `method resolution orders (MROs) <mro_>`__, `generic alias\nparameters`_, lists returned by the dir_ builtin, iterables generated by the\nos.walk_ function, standard NumPy_ arrays, Pandas_ `DataFrame` columns,\nPyTorch_ tensors, NetworkX_ graphs, and really all scientific containers ever.\n\nNobody Expects the Linearithmic Time\n------------------------------------\n\nMath time, people. :sup:`it's happening`\n\nMost runtime type-checkers exhibit ``O(n)`` time complexity (where ``n`` is the\ntotal number of items recursively contained in a container to be checked) by\nrecursively and repeatedly checking *all* items of *all* containers passed to\nor returned from *all* calls of decorated callables.\n\nbeartype guarantees ``O(1)`` time complexity by non-recursively but\nrepeatedly checking *one* random item at *all* nesting levels of *all*\ncontainers passed to or returned from *all* calls of decorated callables, thus\namortizing the cost of deeply checking containers across calls. (See the\nsubsection on `@beartype-generated code deeply type-checking arbitrarily nested\ncontainers in constant time <Constant Nested Deep Sequence Decoration_>`__ for\nwhat this means in practice.)\n\nbeartype exploits the `well-known coupon collector's problem <coupon\ncollector's problem_>`__ applied to abstract trees of nested type hints,\nenabling us to statistically predict the number of calls required to fully\ntype-check all items of an arbitrary container on average. Formally, let:\n\n* ``E(T)`` be the expected number of calls needed to check all items of a\n  container containing only non-container items (i.e., containing *no* nested\n  subcontainers) either passed to or returned from a ``@beartype``\\ -decorated\n  callable.\n* ``γ ≈ 0.5772156649`` be the `Euler–Mascheroni constant`_.\n\nThen:\n\n.. #FIXME: GitHub currently renders LaTeX-based \"math\" directives in\n.. # reStructuredText as monospaced literals, which is hot garbage. Until\n.. # resolved, do the following:\n.. # * Preserve *ALL* such directives as comments, enabling us to trivially\n.. #   revert to the default approach after GitHub resolves this.\n.. # * Convert *ALL* such directives into GitHub-hosted URLs via any of the\n.. #   following third-party webapps:\n.. #     https://tex-image-link-generator.herokuapp.com\n.. #     https://jsfiddle.net/8ndx694g\n.. #     https://marketplace.visualstudio.com/items?itemName=MeowTeam.vscode-math-to-image\n.. # See also this long-standing GitHub issue:\n.. #     https://github.com/github/markup/issues/83\n.. #FIXME: Actually, we'll be leveraging Sphinx's MathJax extension to render\n.. # this, which means the currently disabled \"math::\" directives below should\n.. # now work out-of-the-box. If so, remove the corresponding images, please.\n\n.. #FIXME: Uncomment after GitHub resolves LaTeX math rendering.\n.. # .. math:: E(T) = n \\log n + \\gamma n + \\frac{1}{2} + O\\left(\\frac{1}{n}\\right)\n\n.. image:: https://render.githubusercontent.com/render/math?math=%5Cdisplaystyle+E%28T%29+%3D+n+%5Clog+n+%2B+%5Cgamma+n+%2B+%5Cfrac%7B1%7D%7B2%7D+%2B+O%5Cleft%28%5Cfrac%7B1%7D%7Bn%7D%5Cright%29\n\n.. #FIXME: Uncomment after GitHub resolves LaTeX math rendering.\n.. # The summation :math:`\\frac{1}{2} + O\\left(\\frac{1}{n}\\right) \\le 1` is\n.. # negligible. While non-negligible, the term :math:`\\gamma n` grows significantly\n.. # slower than the term :math:`n \\log n`. So this reduces to:\n\nThe summation ``½ + O(1/n)`` is strictly less than 1 and thus negligible. While\nnon-negligible, the term ``γn`` grows significantly slower than the term\n``nlogn``. So this reduces to:\n\n.. #FIXME: Uncomment after GitHub resolves LaTeX math rendering.\n.. # .. math:: E(T) = O(n \\log n)\n\n.. image:: https://render.githubusercontent.com/render/math?math=%5Cdisplaystyle+E%28T%29+%3D+O%28n+%5Clog+n%29\n\nWe now generalize this bound to the general case. When checking a container\ncontaining *no* subcontainers, beartype only randomly samples one item from\nthat container on each call. When checking a container containing arbitrarily\nmany nested subcontainers, however, beartype randomly samples one random\nitem from each nesting level of that container on each call.\n\nIn general, beartype thus samples ``h`` random items from a container on\neach call, where ``h`` is that container's height (i.e., maximum number of\nedges on the longest path from that container to a non-container leaf item\nreachable from items directly contained in that container). Since ``h ≥ 1``,\nbeartype samples at least as many items each call as assumed in the usual\n`coupon collector's problem`_ and thus paradoxically takes a fewer number of\ncalls on average to check all items of a container containing arbitrarily many\nsubcontainers as it does to check all items of a container containing *no*\nsubcontainers.\n\nErgo, the expected number of calls ``E(S)`` needed to check all items of an\narbitrary container exhibits the same or better growth rate and remains bound\nabove by at least the same upper bounds – but probably tighter: e.g.,\n\n.. #FIXME: Uncomment after GitHub resolves LaTeX math rendering.\n.. # .. math:: E(S) = O(E(T)) = O(n \\log n)\n\n.. image:: https://render.githubusercontent.com/render/math?math=%5Cdisplaystyle+E%28S%29+%3D+O%28E%28T%29%29+%3D+O%28n+%5Clog+n%29%0A\n\nFully checking a container takes no more calls than that container's size times\nthe logarithm of that size on average. For example, fully checking a **list of\n50 integers** is expected to take **225 calls** on average.\n\nCompliance\n==========\n\nBeartype is fully compliant with these `Python Enhancement Proposals (PEPs)\n<PEP 0_>`__:\n\n* `PEP 483 -- The Theory of Type Hints <PEP 483_>`__, subject to `caveats\n  detailed below <Partial Compliance_>`__\n* `PEP 484 -- Type Hints <PEP 484_>`__, subject to `caveats detailed below\n  <Partial Compliance_>`__.\n* `PEP 544 -- Protocols: Structural subtyping (static duck typing) <PEP\n  544_>`_.\n* `PEP 557 -- Data Classes <PEP 557_>`_.\n* `PEP 560 -- Core support for typing module and generic types <PEP 560_>`_.\n* `PEP 561 -- Distributing and Packaging Type Information <PEP 561_>`_.\n* `PEP 563 -- Postponed Evaluation of Annotations <PEP 563_>`__.\n* `PEP 572 -- Assignment Expressions <PEP 572_>`__.\n* `PEP 585 -- Type Hinting Generics In Standard Collections <PEP 585_>`__.\n* `PEP 586 -- Literal Types <PEP 586_>`__.\n* `PEP 589 -- TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys\n  <PEP 589_>`__, subject to `caveats detailed below <Partial Compliance_>`__\n* `PEP 593 -- Flexible function and variable annotations <PEP 593_>`__.\n* `PEP 604 -- Allow writing union types as X | Y <PEP 604_>`__.\n* `PEP 3141 -- A Type Hierarchy for Numbers <PEP 3141_>`__.\n\nBeartype is currently *not* compliant whatsoever with these PEPs:\n\n* `PEP 526 -- Syntax for Variable Annotations <PEP 526_>`__.\n* `PEP 591 -- Adding a final qualifier to typing <PEP 591_>`__.\n* `PEP 612 -- Parameter Specification Variables <PEP 612_>`__.\n\nSee also the **PEP** and **typing** categories of our `features matrix\n<Features_>`__ for further details.\n\nFull Compliance\n---------------\n\nBeartype **deeply type-checks** (i.e., directly checks the types of *and*\nrecursively checks the types of items contained in) parameters and return\nvalues annotated by these typing_ types:\n\n* None_.\n* list_.\n* tuple_.\n* collections.abc.ByteString_.\n* collections.abc.MutableSequence_.\n* collections.abc.Sequence_.\n* dataclasses.InitVar_.\n* typing.Annotated_.\n* typing.Any_.\n* typing.ByteString_.\n* typing.ForwardRef_.\n* typing.Hashable_.\n* typing.List_.\n* typing.Literal_.\n* typing.MutableSequence_.\n* typing.NewType_.\n* typing.NoReturn_.\n* typing.Optional_.\n* typing.Sequence_.\n* typing.Sized_.\n* typing.Text_.\n* typing.Tuple_.\n* typing.Union_.\n* **Generics** (i.e., classes subclassing one or more typing_ non-class\n  objects), including:\n\n  * typing.IO_.\n  * typing.BinaryIO_.\n  * typing.TextIO_.\n\n* **Protocols** (i.e., classes directly subclassing the typing.Protocol_\n  abstract base class (ABC) *and* zero or more typing_ non-class objects),\n  including:\n\n  * typing.SupportsAbs_.\n  * typing.SupportsBytes_.\n  * typing.SupportsComplex_.\n  * typing.SupportsIndex_.\n  * typing.SupportsInt_.\n  * typing.SupportsFloat_.\n  * typing.SupportsRound_.\n\n* `Forward references <relative forward references_>`__ (i.e., unqualified\n  relative classnames referring to user-defined classes that either have yet to\n  be declared *or* are currently being declared).\n* **Forward reference-subscripted types** (i.e., typing_ objects subscripted by\n  one or more `forward references <relative forward references_>`__).\n\nBeartype also fully supports these third-party typing_-like types:\n\n* **Typed NumPy arrays,** including:\n\n  * `numpy.typing.NDArray <NumPy Type Hints_>`__.\n\n* **Typing backports** (i.e., public attributes of the third-party\n  typing_extensions_ package, enabling typing_ types introduced by newer Python\n  versions to be used under older Python versions). Beartype transparently\n  supports all typing_extensions_ equivalents of the previously listed typing_\n  types, including:\n\n  * `typing_extensions.Annotated <typing_extensions_>`__, enabling `beartype\n    validators <Beartype Validators_>`__ to be used under Python < 3.9.0.\n\nBeartype also fully supports callables decorated by these typing_ decorators:\n\n* `@typing.no_type_check`_.\n\nLastly, beartype also fully supports these typing_ constants:\n\n* typing.TYPE_CHECKING_.\n\nPartial Compliance\n------------------\n\nBeartype currently only **shallowly type-checks** (i.e., only directly checks\nthe types of) parameters and return values annotated by these typing_ types:\n\n* frozenset_.\n* set_.\n* type_.\n* collections.ChainMap_.\n* collections.Counter_.\n* collections.OrderedDict_.\n* collections.defaultdict_.\n* collections.deque_.\n* collections.abc.AsyncGenerator_.\n* collections.abc.AsyncIterable_.\n* collections.abc.AsyncIterator_.\n* collections.abc.Awaitable_.\n* collections.abc.Callable_.\n* collections.abc.Collection_.\n* collections.abc.Container_.\n* collections.abc.Coroutine_.\n* collections.abc.Generator_.\n* collections.abc.ItemsView_.\n* collections.abc.Iterable_.\n* collections.abc.Iterator_.\n* collections.abc.KeysView_.\n* collections.abc.Mapping_.\n* collections.abc.MappingView_.\n* collections.abc.MutableMapping_.\n* collections.abc.MutableSet_.\n* collections.abc.Reversible_.\n* collections.abc.Set_.\n* collections.abc.ValuesView_.\n* contextlib.AbstractAsyncContextManager_.\n* contextlib.AbstractContextManager_.\n* re.Match_.\n* re.Pattern_.\n* typing.AbstractSet_.\n* typing.AnyStr_.\n* typing.AsyncContextManager_.\n* typing.AsyncGenerator_.\n* typing.AsyncIterable_.\n* typing.AsyncIterator_.\n* typing.Callable_.\n* typing.Collection_.\n* typing.Container_.\n* typing.ContextManager_.\n* typing.Coroutine_.\n* typing.Counter_.\n* typing.DefaultDict_.\n* typing.Deque_.\n* typing.Dict_.\n* typing.FrozenSet_.\n* typing.Generator_.\n* typing.ItemsView_.\n* typing.Iterable_.\n* typing.Iterator_.\n* typing.KeysView_.\n* typing.MappingView_.\n* typing.Mapping_.\n* typing.Match_.\n* typing.MutableMapping_.\n* typing.MutableSet_.\n* typing.NamedTuple_.\n* typing.OrderedDict_.\n* typing.Pattern_.\n* typing.Reversible_.\n* typing.Set_.\n* typing.Type_.\n* typing.TypedDict_.\n* typing.ValuesView_.\n* **Subscripted builtins** (i.e., `PEP 585`_-compliant C-based type hint\n  instantiated by subscripting either a concrete builtin container class like\n  list_ or tuple_ *or* an abstract base class (ABC) declared by\n  the collections.abc_ or contextlib_ modules like collections.abc.Iterable_\n  or contextlib.AbstractContextManager_ with one or more PEP-compliant child\n  type hints).\n* **Type variables** (i.e., typing.TypeVar_ instances enabling general-purpose\n  type-checking of generically substitutable types), including:\n\n  * typing.AnyStr_.\n\n* **Type variable-parametrized types** (i.e., typing_ objects subscripted by\n  one or more type variables).\n\nSubsequent beartype versions will deeply type-check these typing_ types\nwhile preserving our `O(1) time complexity (with negligible constant factors)\nguarantee <Timings_>`__.\n\nNo Compliance\n-------------\n\nBeartype currently silently ignores these typing_ types at decoration time:\n\n* typing.ClassVar_.\n* typing.Final_.\n* `@typing.final`_.\n\nSubsequent beartype versions will first shallowly and then deeply\ntype-check these typing_ types while preserving our `O(1) time complexity (with\nnegligible constant factors) guarantee <Timings_>`__.\n\nTutorial\n========\n\nLet's begin with the simplest type of type-checking supported by ``@beartype``.\n\nBuiltin Types\n-------------\n\n**Builtin types** like ``dict``, ``int``, ``list``, ``set``, and ``str`` are\ntrivially type-checked by annotating parameters and return values with those\ntypes as is.\n\nLet's declare a simple beartyped function accepting a string and a dictionary\nand returning a tuple:\n\n.. code-block:: python\n\n   from beartype import beartype\n\n   @beartype\n   def law_of_the_jungle(wolf: str, pack: dict) -> tuple:\n       return (wolf, pack[wolf]) if wolf in pack else None\n\nLet's call that function with good types:\n\n.. code-block:: python\n\n   >>> law_of_the_jungle(wolf='Akela', pack={'Akela': 'alone', 'Raksha': 'protection'})\n   ('Akela', 'alone')\n\nGood function. Let's call it again with bad types:\n\n.. code-block:: python\n\n   >>> law_of_the_jungle(wolf='Akela', pack=['Akela', 'Raksha'])\n   Traceback (most recent call last):\n     File \"<ipython-input-10-7763b15e5591>\", line 1, in <module>\n       law_of_the_jungle(wolf='Akela', pack=['Akela', 'Raksha'])\n     File \"<string>\", line 22, in __law_of_the_jungle_beartyped__\n   beartype.roar.BeartypeCallTypeParamException: @beartyped law_of_the_jungle() parameter pack=['Akela', 'Raksha'] not a <class 'dict'>.\n\nThe ``beartype.roar`` submodule publishes exceptions raised at both decoration\ntime by ``@beartype`` and at runtime by wrappers generated by ``@beartype``. In\nthis case, a runtime type exception describing the improperly typed ``pack``\nparameter is raised.\n\nGood function! Let's call it again with good types exposing a critical issue in\nthis function's implementation and/or return type annotation:\n\n.. code-block:: python\n\n   >>> law_of_the_jungle(wolf='Leela', pack={'Akela': 'alone', 'Raksha': 'protection'})\n   Traceback (most recent call last):\n     File \"<ipython-input-10-7763b15e5591>\", line 1, in <module>\n       law_of_the_jungle(wolf='Leela', pack={'Akela': 'alone', 'Raksha': 'protection'})\n     File \"<string>\", line 28, in __law_of_the_jungle_beartyped__\n   beartype.roar.BeartypeCallTypeReturnException: @beartyped law_of_the_jungle() return value None not a <class 'tuple'>.\n\n*Bad function.* Let's conveniently resolve this by permitting this function to\nreturn either a tuple or ``None`` as `detailed below <Unions of Types_>`__:\n\n.. code-block:: python\n\n   >>> from beartype.cave import NoneType\n   >>> @beartype\n   ... def law_of_the_jungle(wolf: str, pack: dict) -> (tuple, NoneType):\n   ...     return (wolf, pack[wolf]) if wolf in pack else None\n   >>> law_of_the_jungle(wolf='Leela', pack={'Akela': 'alone', 'Raksha': 'protection'})\n   None\n\nThe ``beartype.cave`` submodule publishes generic types suitable for use with\nthe ``@beartype`` decorator and anywhere else you might need them. In this\ncase, the type of the ``None`` singleton is imported from this submodule and\nlisted in addition to ``tuple`` as an allowed return type from this function.\n\nNote that usage of the ``beartype.cave`` submodule is entirely optional (but\nmore efficient and convenient than most alternatives). In this case, the type\nof the ``None`` singleton can also be accessed directly as ``type(None)`` and\nlisted in place of ``NoneType`` above: e.g.,\n\n.. code-block:: python\n\n   >>> @beartype\n   ... def law_of_the_jungle(wolf: str, pack: dict) -> (tuple, type(None)):\n   ...     return (wolf, pack[wolf]) if wolf in pack else None\n   >>> law_of_the_jungle(wolf='Leela', pack={'Akela': 'alone', 'Raksha': 'protection'})\n   None\n\nOf course, the ``beartype.cave`` submodule also publishes types *not*\naccessible directly like ``RegexCompiledType`` (i.e., the type of all compiled\nregular expressions). All else being equal, ``beartype.cave`` is preferable.\n\nGood function! The type hints applied to this function now accurately document\nthis function's API. All's well that ends typed well. Suck it, `Shere Khan`_.\n\nArbitrary Types\n---------------\n\nEverything above also extends to:\n\n* **Arbitrary types** like user-defined classes and stock classes in the Python\n  stdlib (e.g., ``argparse.ArgumentParser``) – all of which are also trivially\n  type-checked by annotating parameters and return values with those types.\n* **Arbitrary callables** like instance methods, class methods, static methods,\n  and generator functions and methods – all of which are also trivially\n  type-checked with the ``@beartype`` decorator.\n\nLet's declare a motley crew of beartyped callables doing various silly things\nin a strictly typed manner, *just 'cause*:\n\n.. code-block:: python\n\n   from beartype import beartype\n   from beartype.cave import GeneratorType, IterableType, NoneType\n\n   class MaximsOfBaloo(object):\n       @beartype\n       def __init__(self, sayings: IterableType):\n           self.sayings = sayings\n\n   @beartype\n   def inform_baloo(maxims: MaximsOfBaloo) -> GeneratorType:\n       for saying in maxims.sayings:\n           yield saying\n\nFor genericity, the ``MaximsOfBaloo`` class initializer accepts *any* generic\niterable (via the ``beartype.cave.IterableType`` tuple listing all valid\niterable types) rather than an overly specific ``list`` or ``tuple`` type. Your\nusers may thank you later.\n\nFor specificity, the ``inform_baloo`` generator function has been explicitly\nannotated to return a ``beartype.cave.GeneratorType`` (i.e., the type returned\nby functions and methods containing at least one ``yield`` statement). Type\nsafety brings good fortune for the New Year.\n\nLet's iterate over that generator with good types:\n\n.. code-block:: python\n\n   >>> maxims = MaximsOfBaloo(sayings={\n   ...     '''If ye find that the Bullock can toss you,\n   ...           or the heavy-browed Sambhur can gore;\n   ...      Ye need not stop work to inform us:\n   ...           we knew it ten seasons before.''',\n   ...     '''“There is none like to me!” says the Cub\n   ...           in the pride of his earliest kill;\n   ...      But the jungle is large and the Cub he is small.\n   ...           Let him think and be still.''',\n   ... })\n   >>> for maxim in inform_baloo(maxims): print(maxim.splitlines()[-1])\n          Let him think and be still.\n          we knew it ten seasons before.\n\nGood generator. Let's call it again with bad types:\n\n.. code-block:: python\n\n   >>> for maxim in inform_baloo([\n   ...     'Oppress not the cubs of the stranger,',\n   ...     '     but hail them as Sister and Brother,',\n   ... ]): print(maxim.splitlines()[-1])\n   Traceback (most recent call last):\n     File \"<ipython-input-10-7763b15e5591>\", line 30, in <module>\n       '     but hail them as Sister and Brother,',\n     File \"<string>\", line 12, in __inform_baloo_beartyped__\n   beartype.roar.BeartypeCallTypeParamException: @beartyped inform_baloo() parameter maxims=['Oppress not the cubs of the stranger,', '     but hail them as Sister and ...'] not a <class '__main__.MaximsOfBaloo'>.\n\nGood generator! The type hints applied to these callables now accurately\ndocument their respective APIs. Thanks to the pernicious magic of beartype, all\nends typed well... *yet again.*\n\nUnions of Types\n---------------\n\nThat's all typed well, but everything above only applies to parameters and\nreturn values constrained to *singular* types. In practice, parameters and\nreturn values are often relaxed to any of *multiple* types referred to as\n**unions of types.** :sup:`You can thank set theory for the jargon... unless\nyou hate set theory. Then it's just our fault.`\n\nUnions of types are trivially type-checked by annotating parameters and return\nvalues with the typing.Union_ type hint containing those types. Let's declare\nanother beartyped function accepting either a mapping *or* a string and\nreturning either another function *or* an integer:\n\n.. code-block:: python\n\n   from beartype import beartype\n   from collections.abc import Callable, Mapping\n   from numbers import Integral\n   from typing import Any, Union\n\n   @beartype\n   def toomai_of_the_elephants(memory: Union[Integral, Mapping[Any, Any]]) -> (\n       Union[Integral, Callable[(Any,), Any]]):\n       return memory if isinstance(memory, Integral) else lambda key: memory[key]\n\nFor genericity, the ``toomai_of_the_elephants`` function both accepts and\nreturns *any* generic integer (via the standard ``numbers.Integral`` abstract\nbase class (ABC) matching both builtin integers and third-party integers from\nframeworks like NumPy_ and SymPy_) rather than an overly specific ``int`` type.\nThe API you relax may very well be your own.\n\nLet's call that function with good types:\n\n.. code-block:: python\n\n   >>> memory_of_kala_nag = {\n   ...     'remember': 'I will remember what I was, I am sick of rope and chain—',\n   ...     'strength': 'I will remember my old strength and all my forest affairs.',\n   ...     'not sell': 'I will not sell my back to man for a bundle of sugar-cane:',\n   ...     'own kind': 'I will go out to my own kind, and the wood-folk in their lairs.',\n   ...     'morning':  'I will go out until the day, until the morning break—',\n   ...     'caress':   'Out to the wind’s untainted kiss, the water’s clean caress;',\n   ...     'forget':   'I will forget my ankle-ring and snap my picket stake.',\n   ...     'revisit':  'I will revisit my lost loves, and playmates masterless!',\n   ... }\n   >>> toomai_of_the_elephants(len(memory_of_kala_nag['remember']))\n   56\n   >>> toomai_of_the_elephants(memory_of_kala_nag)('remember')\n   'I will remember what I was, I am sick of rope and chain—'\n\nGood function. Let's call it again with a tastelessly bad type:\n\n.. code-block:: python\n\n   >>> toomai_of_the_elephants(\n   ...     'Shiv, who poured the harvest and made the winds to blow,')\n   BeartypeCallHintPepParamException: @beartyped toomai_of_the_elephants()\n   parameter memory='Shiv, who poured the harvest and made the winds to blow,'\n   violates type hint typing.Union[numbers.Integral, collections.abc.Mapping],\n   as 'Shiv, who poured the harvest and made the winds to blow,' not <protocol\n   ABC \"collections.abc.Mapping\"> or <protocol \"numbers.Integral\">.\n\nGood function! The type hints applied to this callable now accurately documents\nits API. All ends typed well... *still again and again.*\n\nOptional Types\n~~~~~~~~~~~~~~\n\nThat's also all typed well, but everything above only applies to *mandatory*\nparameters and return values whose types are never ``NoneType``. In practice,\nparameters and return values are often relaxed to optionally accept any of\nmultiple types including ``NoneType`` referred to as **optional types.**\n\nOptional types are trivially type-checked by annotating optional parameters\n(parameters whose values default to ``None``) and optional return values\n(callables returning ``None`` rather than raising exceptions in edge cases)\nwith the ``typing.Optional`` type hint indexed by those types.\n\nLet's declare another beartyped function accepting either an enumeration type\n*or* ``None`` and returning either an enumeration member *or* ``None``:\n\n.. code-block:: python\n\n   from beartype import beartype\n   from beartype.cave import EnumType, EnumMemberType\n   from typing import Optional\n\n   @beartype\n   def tell_the_deep_sea_viceroys(story: Optional[EnumType] = None) -> (\n       Optional[EnumMemberType]):\n       return story if story is None else list(story.__members__.values())[-1]\n\nFor efficiency, the ``typing.Optional`` type hint creates, caches, and returns\nnew tuples of types appending ``NoneType`` to the original types it's indexed\nwith. Since efficiency is good, ``typing.Optional`` is also good.\n\nLet's call that function with good types:\n\n.. code-block:: python\n\n   >>> from enum import Enum\n   >>> class Lukannon(Enum):\n   ...     WINTER_WHEAT = 'The Beaches of Lukannon—the winter wheat so tall—'\n   ...     SEA_FOG      = 'The dripping, crinkled lichens, and the sea-fog drenching all!'\n   ...     PLAYGROUND   = 'The platforms of our playground, all shining smooth and worn!'\n   ...     HOME         = 'The Beaches of Lukannon—the home where we were born!'\n   ...     MATES        = 'I met my mates in the morning, a broken, scattered band.'\n   ...     CLUB         = 'Men shoot us in the water and club us on the land;'\n   ...     DRIVE        = 'Men drive us to the Salt House like silly sheep and tame,'\n   ...     SEALERS      = 'And still we sing Lukannon—before the sealers came.'\n   >>> tell_the_deep_sea_viceroys(Lukannon)\n   <Lukannon.SEALERS: 'And still we sing Lukannon—before the sealers came.'>\n   >>> tell_the_deep_sea_viceroys()\n   None\n\nYou may now be pondering to yourself grimly in the dark: \"...but could we not\nalready do this just by manually annotating optional types with\n``typing.Union`` type hints explicitly indexed by ``NoneType``?\"\n\nYou would, of course, be correct. Let's grimly redeclare the same function\naccepting and returning the same types – only annotated with ``NoneType``\nrather than ``typing.Optional``:\n\n.. code-block:: python\n\n   from beartype import beartype\n   from beartype.cave import EnumType, EnumMemberType, NoneType\n   from typing import Union\n\n   @beartype\n   def tell_the_deep_sea_viceroys(story: Union[EnumType, NoneType] = None) -> (\n       Union[EnumMemberType, NoneType]):\n       return list(story.__members__.values())[-1] if story is not None else None\n\nSince ``typing.Optional`` internally reduces to ``typing.Union``, these two\napproaches are semantically equivalent. The former is simply syntactic sugar\nsimplifying the latter.\n\nWhereas ``typing.Union`` accepts an arbitrary number of child type hints,\nhowever, ``typing.Optional`` accepts only a single child type hint. This can be\ncircumvented by either indexing ``typing.Optional`` by ``typing.Union`` *or*\nindexing ``typing.Union`` by ``NoneType``. Let's exhibit the former approach by\ndeclaring another beartyped function accepting either an enumeration type,\nenumeration type member, or ``None`` and returning either an enumeration type,\nenumeration type member, or ``None``:\n\n.. code-block:: python\n\n   from beartype import beartype\n   from beartype.cave import EnumType, EnumMemberType, NoneType\n   from typing import Optional, Union\n\n   @beartype\n   def sang_them_up_the_beach(\n       woe: Optional[Union[EnumType, EnumMemberType]] = None) -> (\n       Optional[Union[EnumType, EnumMemberType]]):\n       return woe if isinstance(woe, (EnumMemberType, NoneType)) else (\n           list(woe.__members__.values())[-1])\n\nLet's call that function with good types:\n\n.. code-block:: python\n\n   >>> sang_them_up_the_beach(Lukannon)\n   <Lukannon.SEALERS: 'And still we sing Lukannon—before the sealers came.'>\n   >>> sang_them_up_the_beach()\n   None\n\nBehold! The terrifying power of the ``typing.Optional`` type hint, resplendent\nin its highly over-optimized cache utilization.\n\nImplementation\n==============\n\nLet's take a deep dive into the deep end of runtime type checking – the\nbeartype way. In this subsection, we show code generated by the\n``@beartype`` decorator in real-world use cases and tell why that code is the\nfastest possible code type-checking those cases.\n\nIdentity Decoration\n-------------------\n\nWe begin by wading into the torpid waters of the many ways beartype avoids\ndoing any work whatsoever, because laziness is the virtue we live by. The\nreader may recall that the fastest decorator at decoration- *and* call-time is\nthe **identity decorator** returning its decorated callable unmodified: e.g.,\n\n.. code-block:: python\n\n   from collections.abc import Callable\n\n   def identity_decorator(func: Callable): -> Callable:\n       return func\n\nbeartype silently reduces to the identity decorator whenever it can, which\nis surprisingly often. Our three weapons are laziness, surprise, ruthless\nefficiency, and an almost fanatical devotion to constant-time type checking.\n\nUnconditional Identity Decoration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet's define a trivial function annotated by *no* type hints:\n\n.. code-block:: python\n\n   def law_of_the_jungle(strike_first_and_then_give_tongue):\n       return strike_first_and_then_give_tongue\n\nLet's decorate that function by ``@beartype`` and verify that ``@beartype``\nreduced to the identity decorator by returning that function unmodified:\n\n.. code-block:: python\n\n   >>> from beartype import beartype\n   >>> beartype(law_of_the_jungle) is law_of_the_jungle\n   True\n\nWe've verified that ``@beartype`` reduces to the identity decorator when\ndecorating unannotated callables. That's but the tip of the efficiency iceberg,\nthough. ``@beartype`` unconditionally reduces to a noop when:\n\n* The decorated callable is itself decorated by the `PEP 484`_-compliant\n  `@typing.no_type_check`_ decorator.\n* The decorated callable has already been decorated by ``@beartype``.\n* Interpreter-wide optimization is enabled: e.g.,\n\n  * `CPython is invoked with the \"-O\" command-line option <-O_>`__.\n  * `The \"PYTHONOPTIMIZE\" environment variable is set <PYTHONOPTIMIZE_>`__.\n\nShallow Identity Decoration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet's define a trivial function annotated by the `PEP 484`_-compliant\ntyping.Any_ type hint:\n\n.. code-block:: python\n\n   from typing import Any\n\n   def law_of_the_jungle_2(never_order_anything_without_a_reason: Any) -> Any:\n       return never_order_anything_without_a_reason\n\nAgain, let's decorate that function by ``@beartype`` and verify that\n``@beartype`` reduced to the identity decorator by returning that function\nunmodified:\n\n.. code-block:: python\n\n   >>> from beartype import beartype\n   >>> beartype(law_of_the_jungle_2) is law_of_the_jungle_2\n   True\n\nWe've verified that ``@beartype`` reduces to the identity decorator when\ndecorating callables annotated by typing.Any_ – a novel category of type hint\nwe refer to as **shallowly ignorable type hints** (known to be ignorable by\nconstant-time lookup in a predefined frozen set). That's but the snout of the\ncrocodile, though. ``@beartype`` conditionally reduces to a noop when *all*\ntype hints annotating the decorated callable are shallowly ignorable. These\ninclude:\n\n* object_, the root superclass of Python's class hierarchy. Since all objects\n  are instances of object_, object_ conveys no meaningful constraints as a type\n  hint and is thus shallowly ignorable.\n* typing.Any_, equivalent to object_.\n* typing.Generic_, equivalent to ``typing.Generic[typing.Any]``, which conveys\n  no meaningful constraints as a type hint and is thus shallowly ignorable.\n* typing.Protocol_, equivalent to ``typing.Protocol[typing.Any]`` and shallowly\n  ignorable for similar reasons.\n* typing.Union_, equivalent to ``typing.Union[typing.Any]``, equivalent to\n  ``Any``.\n* typing.Optional_, equivalent to ``typing.Optional[typing.Any]``, equivalent\n  to ``Union[Any, type(None)]``. Since any union subscripted by ignorable type\n  hints is itself ignorable, [#union_ignorable]_ typing.Optional_ is shallowly\n  ignorable as well.\n\n.. [#union_ignorable]\n   Unions are only as narrow as their widest subscripted argument. However,\n   ignorable type hints are ignorable *because* they are maximally wide.\n   Unions subscripted by ignorable arguments are thus the widest possible\n   unions, conveying no meaningful constraints and thus themselves ignorable.\n\nDeep Identity Decoration\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet's define a trivial function annotated by a non-trivial `PEP 484`_-, `585\n<PEP 585_>`__- and `593 <PEP 593_>`__-compliant type hint that superficially\n*appears* to convey meaningful constraints:\n\n.. code-block:: python\n\n   from typing import Annotated, NewType, Union\n\n   hint = Union[str, list[int], NewType('MetaType', Annotated[object, 53])]\n   def law_of_the_jungle_3(bring_them_to_the_pack_council: hint) -> hint:\n       return bring_them_to_the_pack_council\n\nDespite appearances, it can be shown by exhaustive (and frankly exhausting)\nreduction that that hint is actually ignorable. Let's decorate that function by\n``@beartype`` and verify that ``@beartype`` reduced to the identity decorator\nby returning that function unmodified:\n\n.. code-block:: python\n\n   >>> from beartype import beartype\n   >>> beartype(law_of_the_jungle_3) is law_of_the_jungle_3\n   True\n\nWe've verified that ``@beartype`` reduces to the identity decorator when\ndecorating callables annotated by the above object – a novel category of type\nhint we refer to as **deeply ignorable type hints** (known to be ignorable only\nby recursive linear-time inspection of subscripted arguments). That's but the\ntrunk of the elephant, though. ``@beartype`` conditionally reduces to a noop\nwhen *all* type hints annotating the decorated callable are deeply ignorable.\nThese include:\n\n* Parametrizations of typing.Generic_ and typing.Protocol_ by type variables.\n  Since typing.Generic_, typing.Protocol_, *and* type variables all fail to\n  convey any meaningful constraints in and of themselves, these\n  parametrizations are safely ignorable in all contexts.\n* Calls to typing.NewType_ passed an ignorable type hint.\n* Subscriptions of typing.Annotated_ whose first argument is ignorable.\n* Subscriptions of typing.Optional_ and typing.Union_ by at least one ignorable\n  argument.\n\nConstant Decoration\n-------------------\n\nWe continue by trundling into the turbid waters out at sea, where beartype\nreluctantly performs its minimal amount of work with a heavy sigh.\n\nConstant Builtin Type Decoration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet's define a trivial function annotated by type hints that are builtin types:\n\n.. code-block:: python\n\n   from beartype import beartype\n\n   @beartype\n   def law_of_the_jungle_4(he_must_be_spoken_for_by_at_least_two: int):\n       return he_must_be_spoken_for_by_at_least_two\n\nLet's see the wrapper function ``@beartype`` dynamically generated from that:\n\n.. code-block:: python\n\n   def law_of_the_jungle_4(\n       *args,\n       __beartype_func=__beartype_func,\n       __beartypistry=__beartypistry,\n       **kwargs\n   ):\n       # Localize the number of passed positional arguments for efficiency.\n       __beartype_args_len = len(args)\n       # Localize this positional or keyword parameter if passed *OR* to the\n       # sentinel value \"__beartypistry\" guaranteed to never be passed otherwise.\n       __beartype_pith_0 = (\n           args[0] if __beartype_args_len > 0 else\n           kwargs.get('he_must_be_spoken_for_by_at_least_two', __beartypistry)\n       )\n\n       # If this parameter was passed...\n       if __beartype_pith_0 is not __beartypistry:\n           # Type-check this passed parameter or return value against this\n           # PEP-compliant type hint.\n           if not isinstance(__beartype_pith_0, int):\n               __beartype_get_beartype_violation(\n                   func=__beartype_func,\n                   pith_name='he_must_be_spoken_for_by_at_least_two',\n                   pith_value=__beartype_pith_0,\n               )\n\n       # Call this function with all passed parameters and return the value\n       # returned from this call.\n       return __beartype_func(*args, **kwargs)\n\nLet's dismantle this bit by bit:\n\n* The code comments above are verbatim as they appear in the generated code.\n* ``law_of_the_jungle_4()`` is the ad-hoc function name\n  ``@beartype`` assigned this wrapper function.\n* ``__beartype_func`` is the original ``law_of_the_jungle_4()`` function.\n* ``__beartypistry`` is a thread-safe global registry of all types, tuples of\n  types, and forward references to currently undeclared types visitable from\n  type hints annotating callables decorated by ``@beartype``. We'll see more\n  about the ``__beartypistry`` in a moment. For know, just know that\n  ``__beartypistry`` is a private singleton of the beartype package. This\n  object is frequently accessed and thus localized to the body of this wrapper\n  rather than accessed as a global variable, which would be mildly slower.\n* ``__beartype_pith_0`` is the value of the first passed parameter, regardless\n  of whether that parameter is passed as a positional or keyword argument. If\n  unpassed, the value defaults to the ``__beartypistry``. Since *no* caller\n  should access (let alone pass) that object, that object serves as an\n  efficient sentinel value enabling us to discern passed from unpassed\n  parameters. beartype internally favours the term \"pith\" (which we\n  absolutely just made up) to transparently refer to the arbitrary object\n  currently being type-checked against its associated type hint.\n* ``isinstance(__beartype_pith_0, int)`` tests whether the value passed for\n  this parameter satisfies the type hint annotating this parameter.\n* ``__beartype_get_beartype_violation()`` raises a human-readable exception\n  if this value fails this type-check.\n\nSo good so far. But that's easy. Let's delve deeper.\n\nConstant Non-Builtin Type Decoration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet's define a trivial function annotated by type hints that are pure-Python\nclasses rather than builtin types:\n\n.. code-block:: python\n\n   from argparse import ArgumentParser\n   from beartype import beartype\n\n   @beartype\n   def law_of_the_jungle_5(a_cub_may_be_bought_at_a_price: ArgumentParser):\n       return a_cub_may_be_bought_at_a_price\n\nLet's see the wrapper function ``@beartype`` dynamically generated from that:\n\n.. code-block:: python\n\n   def law_of_the_jungle_5(\n       *args,\n       __beartype_func=__beartype_func,\n       __beartypistry=__beartypistry,\n       **kwargs\n   ):\n       # Localize the number of passed positional arguments for efficiency.\n       __beartype_args_len = len(args)\n       # Localize this positional or keyword parameter if passed *OR* to the\n       # sentinel value \"__beartypistry\" guaranteed to never be passed otherwise.\n       __beartype_pith_0 = (\n           args[0] if __beartype_args_len > 0 else\n           kwargs.get('a_cub_may_be_bought_at_a_price', __beartypistry)\n       )\n\n       # If this parameter was passed...\n       if __beartype_pith_0 is not __beartypistry:\n           # Type-check this passed parameter or return value against this\n           # PEP-compliant type hint.\n           if not isinstance(__beartype_pith_0, __beartypistry['argparse.ArgumentParser']):\n               __beartype_get_beartype_violation(\n                   func=__beartype_func,\n                   pith_name='a_cub_may_be_bought_at_a_price',\n                   pith_value=__beartype_pith_0,\n               )\n\n       # Call this function with all passed parameters and return the value\n       # returned from this call.\n       return __beartype_func(*args, **kwargs)\n\nThe result is largely the same. The only meaningful difference is the\ntype-check on line 20:\n\n.. code-block:: python\n\n           if not isinstance(__beartype_pith_0, __beartypistry['argparse.ArgumentParser']):\n\nSince we annotated that function with a pure-Python class rather than builtin\ntype, ``@beartype`` registered that class with the ``__beartypistry`` at\ndecoration time and then subsequently looked that class up with its\nfully-qualified classname at call time to perform this type-check.\n\nSo good so far... so what! Let's spelunk harder.\n\nConstant Shallow Sequence Decoration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet's define a trivial function annotated by type hints that are `PEP\n585`_-compliant builtin types subscripted by ignorable arguments:\n\n.. code-block:: python\n\n   from beartype import beartype\n\n   @beartype\n   def law_of_the_jungle_6(all_the_jungle_is_thine: list[object]):\n       return all_the_jungle_is_thine\n\nLet's see the wrapper function ``@beartype`` dynamically generated from that:\n\n.. code-block:: python\n\n   def law_of_the_jungle_6(\n       *args,\n       __beartype_func=__beartype_func,\n       __beartypistry=__beartypistry,\n       **kwargs\n   ):\n       # Localize the number of passed positional arguments for efficiency.\n       __beartype_args_len = len(args)\n       # Localize this positional or keyword parameter if passed *OR* to the\n       # sentinel value \"__beartypistry\" guaranteed to never be passed otherwise.\n       __beartype_pith_0 = (\n           args[0] if __beartype_args_len > 0 else\n           kwargs.get('all_the_jungle_is_thine', __beartypistry)\n       )\n\n       # If this parameter was passed...\n       if __beartype_pith_0 is not __beartypistry:\n           # Type-check this passed parameter or return value against this\n           # PEP-compliant type hint.\n           if not isinstance(__beartype_pith_0, list):\n               __beartype_get_beartype_violation(\n                   func=__beartype_func,\n                   pith_name='all_the_jungle_is_thine',\n                   pith_value=__beartype_pith_0,\n               )\n\n       # Call this function with all passed parameters and return the value\n       # returned from this call.\n       return __beartype_func(*args, **kwargs)\n\nWe are still within the realm of normalcy. Correctly detecting this type hint\nto be subscripted by an ignorable argument, ``@beartype`` only bothered\ntype-checking this parameter to be an instance of this builtin type:\n\n.. code-block:: python\n\n           if not isinstance(__beartype_pith_0, list):\n\nIt's time to iteratively up the ante.\n\nConstant Deep Sequence Decoration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet's define a trivial function annotated by type hints that are `PEP\n585`_-compliant builtin types subscripted by builtin types:\n\n.. code-block:: python\n\n   from beartype import beartype\n\n   @beartype\n   def law_of_the_jungle_7(kill_everything_that_thou_canst: list[str]):\n       return kill_everything_that_thou_canst\n\nLet's see the wrapper function ``@beartype`` dynamically generated from that:\n\n.. code-block:: python\n\n   def law_of_the_jungle_7(\n       *args,\n       __beartype_func=__beartype_func,\n       __beartypistry=__beartypistry,\n       **kwargs\n   ):\n       # Generate and localize a sufficiently large pseudo-random integer for\n       # subsequent indexation in type-checking randomly selected container items.\n       __beartype_random_int = __beartype_getrandbits(64)\n       # Localize the number of passed positional arguments for efficiency.\n       __beartype_args_len = len(args)\n       # Localize this positional or keyword parameter if passed *OR* to the\n       # sentinel value \"__beartypistry\" guaranteed to never be passed otherwise.\n       __beartype_pith_0 = (\n           args[0] if __beartype_args_len > 0 else\n           kwargs.get('kill_everything_that_thou_canst', __beartypistry)\n       )\n\n       # If this parameter was passed...\n       if __beartype_pith_0 is not __beartypistry:\n           # Type-check this passed parameter or return value against this\n           # PEP-compliant type hint.\n           if not (\n               # True only if this pith shallowly satisfies this hint.\n               isinstance(__beartype_pith_0, list) and\n               # True only if either this pith is empty *OR* this pith is\n               # both non-empty and deeply satisfies this hint.\n               (not __beartype_pith_0 or isinstance(__beartype_pith_0[__beartype_random_int % len(__beartype_pith_0)], str))\n           ):\n               __beartype_get_beartype_violation(\n                   func=__beartype_func,\n                   pith_name='kill_everything_that_thou_canst',\n                   pith_value=__beartype_pith_0,\n               )\n\n       # Call this function with all passed parameters and return the value\n       # returned from this call.\n       return __beartype_func(*args, **kwargs)\n\nWe have now diverged from normalcy. Let's dismantle this iota by iota:\n\n* ``__beartype_random_int`` is a pseudo-random unsigned 32-bit integer whose\n  bit length intentionally corresponds to the `number of bits generated by each\n  call to Python's C-based Mersenne Twister <random twister_>`__ internally\n  performed by the random.getrandbits_ function generating this integer.\n  Exceeding this length would cause that function to internally perform that\n  call multiple times for no gain. Since the cost of generating integers to\n  this length is the same as generating integers of smaller lengths, this\n  length is preferred. Since most sequences are likely to contain fewer items\n  than this integer, pseudo-random sequence items are indexable by taking the\n  modulo of this integer with the sizes of those sequences. For big sequences\n  containing more than this number of items, beartype deeply type-checks\n  leading items with indices in this range while ignoring trailing items. Given\n  the practical infeasibility of storing big sequences in memory, this seems an\n  acceptable real-world tradeoff. Suck it, big sequences!\n* As before, ``@beartype`` first type-checks this parameter to be a list.\n* ``@beartype`` then type-checks this parameter to either be:\n\n  * ``not __beartype_pith_0``, an empty list.\n  * ``isinstance(__beartype_pith_0[__beartype_random_int %\n    len(__beartype_pith_0)], str)``, a non-empty list whose pseudo-randomly\n    indexed list item satisfies this nested builtin type.\n\nWell, that escalated quickly.\n\nConstant Nested Deep Sequence Decoration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet's define a trivial function annotated by type hints that are `PEP\n585`_-compliant builtin types recursively subscripted by instances of\nthemselves, because *we are typing masochists*:\n\n.. code-block:: python\n\n   from beartype import beartype\n\n   @beartype\n   def law_of_the_jungle_8(pull_thorns_from_all_wolves_paws: (\n       list[list[list[str]]])):\n       return pull_thorns_from_all_wolves_paws\n\nLet's see the wrapper function ``@beartype`` dynamically generated from that:\n\n.. code-block:: python\n\n   def law_of_the_jungle_8(\n       *args,\n       __beartype_func=__beartype_func,\n       __beartypistry=__beartypistry,\n       **kwargs\n   ):\n       # Generate and localize a sufficiently large pseudo-random integer for\n       # subsequent indexation in type-checking randomly selected container items.\n       __beartype_random_int = __beartype_getrandbits(32)\n       # Localize the number of passed positional arguments for efficiency.\n       __beartype_args_len = len(args)\n       # Localize this positional or keyword parameter if passed *OR* to the\n       # sentinel value \"__beartypistry\" guaranteed to never be passed otherwise.\n       __beartype_pith_0 = (\n           args[0] if __beartype_args_len > 0 else\n           kwargs.get('pull_thorns_from_all_wolves_paws', __beartypistry)\n       )\n\n       # If this parameter was passed...\n       if __beartype_pith_0 is not __beartypistry:\n           # Type-check this passed parameter or return value against this\n           # PEP-compliant type hint.\n           if not (\n               # True only if this pith shallowly satisfies this hint.\n               isinstance(__beartype_pith_0, list) and\n               # True only if either this pith is empty *OR* this pith is\n               # both non-empty and deeply satisfies this hint.\n               (not __beartype_pith_0 or (\n                   # True only if this pith shallowly satisfies this hint.\n                   isinstance(__beartype_pith_1 := __beartype_pith_0[__beartype_random_int % len(__beartype_pith_0)], list) and\n                   # True only if either this pith is empty *OR* this pith is\n                   # both non-empty and deeply satisfies this hint.\n                   (not __beartype_pith_1 or (\n                       # True only if this pith shallowly satisfies this hint.\n                       isinstance(__beartype_pith_2 := __beartype_pith_1[__beartype_random_int % len(__beartype_pith_1)], list) and\n                       # True only if either this pith is empty *OR* this pith is\n                       # both non-empty and deeply satisfies this hint.\n                       (not __beartype_pith_2 or isinstance(__beartype_pith_2[__beartype_random_int % len(__beartype_pith_2)], str))\n                   ))\n               ))\n           ):\n               __beartype_get_beartype_violation(\n                   func=__beartype_func,\n                   pith_name='pull_thorns_from_all_wolves_paws',\n                   pith_value=__beartype_pith_0,\n               )\n\n       # Call this function with all passed parameters and return the value\n       # returned from this call.\n       return __beartype_func(*args, **kwargs)\n\nWe are now well beyond the deep end, where the benthic zone and the cruel\ndenizens of the fathomless void begins. Let's dismantle this pascal by pascal:\n\n* ``__beartype_pith_1 := __beartype_pith_0[__beartype_random_int %\n  len(__beartype_pith_0)]``, a `PEP 572`_-style assignment expression\n  localizing repeatedly accessed random items of the first nested list for\n  efficiency.\n* ``__beartype_pith_2 := __beartype_pith_1[__beartype_random_int %\n  len(__beartype_pith_1)]``, a similar expression localizing repeatedly\n  accessed random items of the second nested list.\n* The same ``__beartype_random_int`` pseudo-randomly indexes all three lists.\n* Under older Python interpreters lacking `PEP 572`_ support, ``@beartype``\n  generates equally valid (albeit less efficient) code repeating each\n  nested list item access.\n\nIn the kingdom of the linear-time runtime type checkers, the constant-time\nruntime type checker really stands out like a sore giant squid, doesn't it?\n\nSee the Developers_ section for further commentary on runtime optimization from\nthe higher-level perspective of architecture and internal API design.\n\nDevelopers\n==========\n\nLet's contribute `pull requests <beartype pulls_>`__ to beartype for the\ngood of typing_. The `primary maintainer of this repository is a friendly\nbeardless Canadian guy <leycec_>`__ who guarantees that he will *always* be\nnice and congenial and promptly merge all requests that pass continuous\nintegration (CI) tests.\n\nAnd thanks for merely reading this! Like all open-source software, beartype\nthrives on community contributions, activity, and interest. *This means you,\nstalwart Python hero.*\n\nbeartype has `two problem spots (listed below in order of decreasing\nimportance and increasing complexity) <Moar Depth_>`__ that could *always*\nbenefit from a volunteer army of good GitHub Samaritans.\n\nWorkflow\n--------\n\nLet's take this from the top.\n\n#. Create a `GitHub user account <GitHub account signup_>`__.\n#. Login to `GitHub with that account <GitHub account signin_>`__.\n#. **Click the \"Fork\" button** in the upper right-hand corner of `the\n   \"beartype/beartype\" repository page <beartype_>`__.\n#. **Click the \"Code\" button** in the upper right-hand corner of your fork page\n   that appears.\n#. **Copy the URL** that appears.\n#. **Open a terminal.**\n#. **Change to the desired parent directory** of your local fork.\n#. **Clone your fork,** replacing ``{URL}`` with the previously copied URL.\n\n   .. code-block:: bash\n\n      git clone {URL}\n\n#. **Add a new remote** referring to this upstream repository.\n\n   .. code-block:: bash\n\n      git remote add upstream https://github.com/beartype/beartype.git\n\n#. **Uninstall all previously installed versions** of beartype. For\n   example, if you previously installed beartype with ``pip``, manually\n   uninstall beartype with ``pip``.\n\n   .. code-block:: bash\n\n      pip uninstall beartype\n\n#. Install beartype with ``pip`` in **editable mode.** This synchronizes\n   changes made to your fork against the beartype package imported in\n   Python. Note the ``[dev]`` extra installs developer-specific mandatory\n   dependencies required at test or documentation time.\n\n   .. code-block:: bash\n\n      pip3 install -e .[dev]\n\n#. **Create a new branch** to isolate changes to, replacing ``{branch_name}``\n   with the desired name.\n\n   .. code-block:: bash\n\n      git checkout -b {branch_name}\n\n#. **Make changes to this branch** in your favourite `Integrated Development\n   Environment (IDE) <IDE_>`__. Of course, this means Vim_.\n#. **Test these changes.** Note this command assumes you have installed *all*\n   `major versions of both CPython and PyPy supported by the next stable\n   release of beartype you are hacking on <Features_>`__. If this is *not* the\n   case, install these versions with pyenv_. This is vital, as type hinting\n   support varies significantly between major versions of different Python\n   interpreters.\n\n   .. code-block:: bash\n\n      ./tox\n\n   The resulting output should ideally be suffixed by a synopsis resembling:\n\n   ::\n\n       ________________________________ summary _______________________________\n       py36: commands succeeded\n       py37: commands succeeded\n       py38: commands succeeded\n       py39: commands succeeded\n       pypy36: commands succeeded\n       pypy37: commands succeeded\n       congratulations :)\n\n#. **Stage these changes.**\n\n   .. code-block:: bash\n\n      git add -a\n\n#. **Commit these changes.**\n\n   .. code-block:: bash\n\n      git commit\n\n#. **Push these changes** to your remote fork.\n\n   .. code-block:: bash\n\n      git push\n\n#. **Click the \"Create pull request\" button** in the upper right-hand corner of\n   your fork page.\n#. Afterward, **routinely pull upstream changes** to avoid desynchronization\n   with `the \"beartype/beartype\" repository <beartype_>`__.\n\n   .. code-block:: bash\n\n      git checkout main && git pull upstream main\n\nMoar Depth\n----------\n\nSo, you want to help beartype deeply type-check even *more* type hints than\nshe already does? Let us help you help us, because you are awesome.\n\nFirst, an egregious lore dump. It's commonly assumed that beartype only\ninternally implements a single type-checker. After all, every *other* static\nand runtime type-checker only internally implements a single type-checker.\nWhy would a type-checker internally implement several divergent overlapping\ntype-checkers and... what would that even mean? Who would be so vile, cruel,\nand sadistic as to do something like that?\n\n*We would.* beartype often violates assumptions. This is no exception.\nExternally, of course, beartype presents itself as a single type-checker.\nInternally, beartype is implemented as a two-phase series of orthogonal\ntype-checkers. Why? Because efficiency, which is the reason we are all here.\nThese type-checkers are (in the order that callables decorated by beartype\nperform them at runtime):\n\n#. **Testing phase.** In this fast first pass, each callable decorated by\n   ``@beartype`` only *tests* whether all parameters passed to and values\n   returned from the current call to that callable satisfy all type hints\n   annotating that callable. This phase does *not* raise human-readable\n   exceptions (in the event that one or more parameters or return values fails\n   to satisfy these hints). ``@beartype`` highly optimizes this phase by\n   dynamically generating one wrapper function wrapping each decorated callable\n   with unique pure-Python performing these tests in O(1) constant-time. This\n   phase is *always* unconditionally performed by code dynamically generated\n   and returned by:\n\n   * The fast-as-lightning ``pep_code_check_hint()`` function declared in the\n     `\"beartype._decor._code._pep._pephint\" submodule <beartype pephint_>`__,\n     which generates memoized O(1) code type-checking an arbitrary object\n     against an arbitrary PEP-compliant type hint by iterating over all child\n     hints nested in that hint with a highly optimized breadth-first search\n     (BFS) leveraging extreme caching, fragile cleverness, and other salacious\n     micro-optimizations.\n\n#. **Error phase.** In this slow second pass, each call to a callable decorated\n   by ``@beartype`` that fails the fast first pass (due to one or more\n   parameters or return values failing to satisfy these hints) recursively\n   discovers the exact underlying cause of that failure and raises a\n   human-readable exception precisely detailing that cause. ``@beartype`` does\n   *not* optimize this phase whatsoever. Whereas the implementation of the\n   first phase is uniquely specific to each decorated callable and constrained\n   to O(1) constant-time non-recursive operation, the implementation of the\n   second phase is generically shared between all decorated callables and\n   generalized to O(n) linear-time recursive operation. Efficiency no longer\n   matters when you're raising exceptions. Exception handling is slow in any\n   language and doubly slow in `dynamically-typed`_ (and mostly interpreted)\n   languages like Python, which means that performance is mostly a non-concern\n   in \"cold\" code paths guaranteed to raise exceptions. This phase is only\n   *conditionally* performed when the first phase fails by:\n\n   * The slow-as-molasses ``get_beartype_violation()`` function declared in\n     the `\"beartype._decor._error.errormain\" submodule\n     <beartype errormain_>`__, which generates human-readable exceptions after\n     performing unmemoized O(n) type-checking of an arbitrary object against a\n     PEP-compliant type hint by recursing over all child hints nested in that\n     hint with an unoptimized recursive algorithm prioritizing debuggability,\n     readability, and maintainability.\n\nThis separation of concerns between performant O(1) *testing* on the one hand\nand perfect O(n) *error handling* on the other preserves both runtime\nperformance and readable errors at a cost of developer pain. This is good!\n:sup:`...what?`\n\nSecondly, the same separation of concerns also complicates the development of\n``@beartype``. This is bad. Since ``@beartype`` internally implements two\ndivergent type-checkers, deeply type-checking a new category of type hint\nrequires adding that support to (wait for it) two divergent type-checkers –\nwhich, being fundamentally distinct codebases sharing little code in common,\nrequires violating the `Don't Repeat Yourself (DRY) principle <DRY_>`__ by\nreinventing the wheel in the second type-checker. Such is the high price of\nhigh-octane performance. You probably thought this would be easier and funner.\nSo did we.\n\nThirdly, this needs to be tested. After surmounting the above roadblocks by\ndeeply type-checking that new category of type hint in *both* type-checkers,\nyou'll now add one or more unit tests exhaustively exercising that checking.\nThankfully, we already did all of the swole lifting for you. All *you* need to\ndo is add at least one PEP-compliant type hint, one object satisfying that\nhint, and one object *not* satisfying that hint to:\n\n* A new ``PepHintMetadata`` object in the existing tuple passed to the\n  ``data_module.HINTS_PEP_META.extend(...)`` call in the existing test data\n  submodule for this PEP residing under the\n  `\"beartype_test.unit.data.hint.pep.proposal\" subpackage <beartype test data\n  pep_>`__. For example, if this is a `PEP 484`_-compliant type hint, add that\n  hint and associated metadata to the\n  `\"beartype_test.unit.data.hint.pep.proposal.data_hintpep484\" submodule\n  <beartype test data pep 484_>`__.\n\nYou're done! *Praise Guido.*\n\nMoar Compliance\n---------------\n\nSo, you want to help beartype comply with even *more* `Python Enhancement\nProposals (PEPs) <PEP 0_>`__ than she already complies with? Let us help you\nhelp us, because you are young and idealistic and you mean well.\n\nYou will need a spare life to squander. A clone would be most handy. In short,\nyou will want to at least:\n\n* Define a new utility submodule for this PEP residing under the\n  `\"beartype._util.hint.pep.proposal\" subpackage <beartype util pep_>`__\n  implementing general-purpose validators, testers, getters, and other\n  ancillary utility functions required to detect and handle *all* type hints\n  compliant with this PEP. For efficiency, utility functions performing\n  iteration or other expensive operations should be memoized via our internal\n  `@callable_cached`_ decorator.\n* Define a new data utility submodule for this PEP residing under the\n  `\"beartype._util.data.hint.pep.proposal\" subpackage <beartype util data\n  pep_>`__ adding various signs (i.e., arbitrary objects uniquely identifying\n  type hints compliant with this PEP) to various global variables defined by\n  the parent `\"beartype._util.data.hint.pep.utilhintdatapep\" submodule\n  <_beartype util data pep parent>`__.\n* Define a new test data submodule for this PEP residing under the\n  `\"beartype_test.unit.data.hint.pep.proposal\" subpackage <beartype test data\n  pep_>`__.\n\nYou're probably not done by a long shot! But the above should at least get you\nfitfully started, though long will you curse our names. *Praise Cleese.*\n\nLicense\n=======\n\nBeartype is `open-source software released <beartype license_>`__ under the\n`permissive MIT license <MIT license_>`__.\n\nContributors\n============\n\nBeartype is the work product of volunteer enthusiasm, excess caffeine, and\nsleepless Wednesday evenings. These brave GitHubbers hurtled `the pull request\n(PR) gauntlet <beartype pulls_>`__ so that you wouldn't have to:\n\n|beartype-contributors|\n\nFunding\n=======\n\nBeartype is financed as a purely volunteer open-source project via `GitHub\nSponsors`_, to whom our burgeoning community is eternally indebted. Without your\ngenerosity, runtime type-checking would be a shadow of its current hulking bulk.\nWe genuflect before your selfless charity, everyone!\n\nPrior official funding sources (*yes, they once existed*) include:\n\n#. A `Paul Allen Discovery Center award`_ from the `Paul G. Allen Frontiers\n   Group`_ under the administrative purview of the `Paul Allen Discovery\n   Center`_ at `Tufts University`_ over the period 2015—2018 preceding the\n   untimely death of `Microsoft co-founder Paul Allen <Paul Allen_>`__, during\n   which beartype was maintained as the private ``@type_check`` decorator\n   in the `Bioelectric Tissue Simulation Engine (BETSE) <BETSE_>`__.\n   :superscript:`Phew!`\n\n.. # FIXME: Consider replacing this hand-rolled list that we've predictably\n.. # failed to properly maintain with an automated avatar-heavy list\n.. # synthesized by the @all-contributors bot. See also:\n.. #     https://github.com/all-contributors/all-contributors\n.. # Note, however, that we'll almost certainly need to also run this first:\n.. #     https://dev.to/tlylt/automatically-add-all-existing-repo-contributors-with-all-contributors-cli-5hdj\n.. # FIXME: Indeed, we're not particularly fond of any existing solution we've\n.. # found (including the above). For now, let's just leave this disabled. :{\n\n.. # Authors\n.. # =======\n.. #\n.. # beartype is developed with the grateful assistance of a volunteer community\n.. # of enthusiasts, including (*in chronological order of issue or pull request*):\n\nHistory\n=======\n\n|beartype-stars|\n\nSee Also\n========\n\nExternal beartype resources include:\n\n* `This list of all open-source PyPI-hosted dependents of this package\n  <beartype dependents_>`__ (i.e., third-party packages requiring beartype\n  as a runtime dependency), kindly furnished by the `Libraries.io package\n  registry <Libraries.io_>`__.\n\nRelated type-checking resources include:\n\nRuntime Type Checkers\n---------------------\n\n**Runtime type checkers** (i.e., third-party Python packages dynamically\nvalidating callables annotated by type hints at runtime, typically via\ndecorators, function calls, and import hooks) include:\n\n.. # Note: intentionally sorted in lexicographic order to avoid bias.\n\n+-----------------+---------+---------------+---------------------------+\n| package         | active  | PEP-compliant | time multiplier [#speed]_ |\n+=================+=========+===============+===========================+\n| beartype        | **yes** | **yes**       | 1 ✕ beartype              |\n+-----------------+---------+---------------+---------------------------+\n| enforce_        | no      | **yes**       | *unknown*                 |\n+-----------------+---------+---------------+---------------------------+\n| enforce_typing_ | no      | **yes**       | *unknown*                 |\n+-----------------+---------+---------------+---------------------------+\n| pydantic_       | **yes** | no            | *unknown*                 |\n+-----------------+---------+---------------+---------------------------+\n| pytypes_        | no      | **yes**       | *unknown*                 |\n+-----------------+---------+---------------+---------------------------+\n| typeen_         | no      | no            | *unknown*                 |\n+-----------------+---------+---------------+---------------------------+\n| typical_        | **yes** | **yes**       | *unknown*                 |\n+-----------------+---------+---------------+---------------------------+\n| typeguard_      | no      | **yes**       | 20 ✕ beartype             |\n+-----------------+---------+---------------+---------------------------+\n\n.. [#speed]\n   The *time multliplier* column approximates **how much slower on average\n   than** beartype **that checker is** as `timed by our profile suite\n   <Timings_>`__. A time multiplier of:\n\n   * \"1\" means that checker is approximately as fast as beartype, which means\n     that checker is probably beartype itself.\n   * \"20\" means that checker is approximately twenty times slower than beartype\n     on average.\n\nLike `static type checkers <Static Type Checkers_>`__, runtime type checkers\n*always* require callables to be annotated by type hints. Unlike `static type\ncheckers <Static Type Checkers_>`__, runtime type checkers do *not* necessarily\ncomply with community standards; although some do require callers to annotate\ncallables with strictly PEP-compliant type hints, others permit or even require\ncallers to annotate callables with PEP-noncompliant type hints. Runtime type\ncheckers that do so violate:\n\n* `PEP 561 -- Distributing and Packaging Type Information <PEP 561_>`_, which\n  requires callables to be annotated with strictly PEP-compliant type hints.\n  Packages violating `PEP 561`_ even once cannot be type-checked with `static\n  type checkers <Static Type Checkers_>`__ (e.g., mypy_), unless each such\n  violation is explicitly ignored with a checker-specific filter (e.g., with a\n  mypy_-specific inline type comment).\n* `PEP 563 -- Postponed Evaluation of Annotations <PEP 563_>`_, which\n  explicitly deprecates PEP-noncompliant type hints:\n\n      With this in mind, **uses for annotations incompatible with the\n      aforementioned PEPs** *[i.e., PEPs 484, 544, 557, and 560]* **should be\n      considered deprecated.**\n\nRuntime Data Validators\n-----------------------\n\n**Runtime data validators** (i.e., third-party Python packages dynamically\nvalidating callables decorated by caller-defined contracts, constraints, and\nvalidation routines at runtime) include:\n\n.. # Note: intentionally sorted in lexicographic order to avoid bias.\n\n* PyContracts_.\n* contracts_.\n* covenant_.\n* dpcontracts_.\n* icontract_.\n* pcd_.\n* pyadbc_.\n\nUnlike both `runtime type checkers <Runtime Type Checkers_>`__ and `static type\ncheckers <Static Type Checkers_>`__, most runtime data validators do *not*\nrequire callables to be annotated by type hints. Like some `runtime type\ncheckers <Runtime Type Checkers_>`__, most runtime data validators do *not*\ncomply with community standards but instead require callers to either:\n\n* Decorate callables with package-specific decorators.\n* Annotate callables with package-specific and thus PEP-noncompliant type\n  hints.\n\nStatic Type Checkers\n--------------------\n\n**Static type checkers** (i.e., third-party tooling validating Python callable\nand/or variable types across an application stack at static analysis time\nrather than Python runtime) include:\n\n.. # Note: intentionally sorted in lexicographic order to avoid bias.\n\n* mypy_.\n* Pyre_, published by FaceBook. :sup:`...yah.`\n* pyright_, published by Microsoft.\n* pytype_, published by Google.\n\n.. # ------------------( IMAGES                              )------------------\n.. |beartype-banner| image:: https://raw.githubusercontent.com/beartype/beartype-assets/main/banner/logo.png\n   :target: https://beartype.readthedocs.io\n   :alt: beartype —[ the bare-metal type checker ]—\n.. |beartype-contributors| image:: https://contrib.rocks/image?repo=beartype/beartype\n   :target: https://github.com/beartype/beartype/graphs/contributors\n   :alt: Beartype contributors\n.. |beartype-stars| image:: https://star-history.com/#beartype/beartype&Date\n   :target: https://github.com/beartype/beartype/stargazers\n   :alt: Beartype stargazers\n\n.. # ------------------( IMAGES ~ badge                      )------------------\n.. |bear-ified| image:: https://raw.githubusercontent.com/beartype/beartype-assets/main/badge/bear-ified.svg\n   :align: top\n   :target: https://beartype.readthedocs.io\n   :alt: bear-ified\n.. |ci-badge| image:: https://github.com/beartype/beartype/workflows/test/badge.svg\n   :target: https://github.com/beartype/beartype/actions?workflow=test\n   :alt: beartype continuous integration (CI) status\n.. |codecov-badge| image:: https://codecov.io/gh/beartype/beartype/branch/main/graph/badge.svg?token=E6F4YSY9ZQ\n   :target: https://codecov.io/gh/beartype/beartype\n   :alt: beartype test coverage status\n.. |rtd-badge| image:: https://readthedocs.org/projects/beartype/badge/?version=latest\n   :target: https://beartype.readthedocs.io/en/latest/?badge=latest\n   :alt: beartype Read The Docs (RTD) status\n\n.. # ------------------( IMAGES ~ screenshot                 )------------------\n.. |VSCode-Pylance-type-checking-setting| image:: https://user-images.githubusercontent.com/217028/164616311-c4a24889-0c53-4726-9051-29be7263ee9b.png\n   :alt: Disabling pyright-based VSCode Pylance type-checking\n\n.. # ------------------( IMAGES ~ downstream                 )------------------\n.. # Insert links to GitHub Sponsors funding at the icon level here, please!\n\n.. # ------------------( SUBSTITUTIONS                       )------------------\n.. # Non-breaking space, defined as a reST substitution substituting all \"|_|\"\n.. # substrings with the non-breaking space Unicode character. Note that the\n.. # \":trim:\" directive silently removes all whitespace surrounding this \"|_|\".\n.. # See also this StackOverflow answer strongly inspiring this substitution:\n.. #     https://stackoverflow.com/a/12145490/2809027\n.. |_| unicode:: 0xA0\n   :trim:\n\n.. # ------------------( LINKS ~ beartype : funding          )------------------\n.. _BETSE:\n   https://github.com/betsee/betse\n.. _BETSEE:\n   https://github.com/betsee/betsee\n.. _GitHub Sponsors:\n   https://github.com/sponsors/leycec\n.. _Paul Allen:\n   https://en.wikipedia.org/wiki/Paul_Allen\n.. _Paul Allen Discovery Center:\n   http://www.alleninstitute.org/what-we-do/frontiers-group/discovery-centers/allen-discovery-center-tufts-university\n.. _Paul Allen Discovery Center award:\n   https://www.alleninstitute.org/what-we-do/frontiers-group/news-press/press-resources/press-releases/paul-g-allen-frontiers-group-announces-allen-discovery-center-tufts-university\n.. _Paul G. Allen Frontiers Group:\n   https://www.alleninstitute.org/what-we-do/frontiers-group\n.. _Tufts University:\n   https://www.tufts.edu\n.. _beartype sponsorship:\n   https://github.com/sponsors/leycec\n\n.. # ------------------( LINKS ~ beartype : local            )------------------\n.. _beartype license:\n   LICENSE\n\n.. # ------------------( LINKS ~ beartype : local : module   )------------------\n.. _beartype errormain:\n   beartype/_decor/_code/_pep/_error/errormain.py\n.. _beartype pephint:\n   beartype/_decor/_code/_pep/_pephint.py\n.. _beartype test data pep:\n   beartype_test/unit/data/hint/pep/proposal/\n.. _beartype test data pep 484:\n   beartype_test/unit/data/hint/pep/proposal/data_hintpep484.py\n.. _@callable_cached:\n   beartype/_util/cache/utilcachecall.py\n.. _beartype util data pep:\n   beartype/_util/hint/data/pep/proposal/\n.. _beartype util data pep parent:\n   beartype/_util/hint/data/pep/utilhintdatapep.py\n.. _beartype util pep:\n   beartype/_util/hint/pep/proposal\n\n.. # ------------------( LINKS ~ beartype : package          )------------------\n.. _beartype Anaconda:\n   https://anaconda.org/conda-forge/beartype\n.. _beartype Gentoo:\n   https://github.com/leycec/raiagent\n.. _beartype Homebrew:\n   https://github.com/beartype/homebrew-beartype\n.. _beartype MacPorts:\n   https://ports.macports.org/port/py-beartype\n.. _beartype PyPI:\n   https://pypi.org/project/beartype\n\n.. # ------------------( LINKS ~ beartype : package : meta   )------------------\n.. _Libraries.io:\n   https://libraries.io\n.. _beartype dependents:\n   https://libraries.io/pypi/beartype/dependents\n\n.. # ------------------( LINKS ~ beartype : remote           )------------------\n.. _beartype:\n   https://github.com/beartype/beartype\n.. _beartype issues:\n   https://github.com/beartype/beartype/issues\n.. _beartype 1.0.0:\n   https://github.com/beartype/beartype/issues/7\n.. _beartype codebase:\n   https://github.com/beartype/beartype/tree/main/beartype\n.. _beartype organization:\n   https://github.com/beartype\n.. _beartype profiler:\n   https://github.com/beartype/beartype/blob/main/bin/profile.bash\n.. _beartype pulls:\n   https://github.com/beartype/beartype/pulls\n.. _beartype tests:\n   https://github.com/beartype/beartype/actions?workflow=tests\n\n.. # ------------------( LINKS ~ beartype : user             )------------------\n.. _patrick-kidger:\n   https://github.com/patrick-kidger\n.. _harens:\n   https://github.com/harens\n.. _leycec:\n   https://github.com/leycec\n\n.. # ------------------( LINKS ~ github                      )------------------\n.. _GitHub Actions:\n   https://github.com/features/actions\n.. _GitHub account signin:\n   https://github.com/login\n.. _GitHub account signup:\n   https://github.com/join\n.. _gitter:\n   https://gitter.im\n\n.. # ------------------( LINKS ~ idea                        )------------------\n.. _Denial-of-Service:\n   https://en.wikipedia.org/wiki/Denial-of-service_attack\n.. _DRY:\n   https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\n.. _IDE:\n   https://en.wikipedia.org/wiki/Integrated_development_environment\n.. _JIT:\n   https://en.wikipedia.org/wiki/Just-in-time_compilation\n.. _SQA:\n   https://en.wikipedia.org/wiki/Software_quality_assurance\n.. _amortized analysis:\n   https://en.wikipedia.org/wiki/Amortized_analysis\n.. _computer vision:\n   https://en.wikipedia.org/wiki/Computer_vision\n.. _continuous integration:\n   https://en.wikipedia.org/wiki/Continuous_integration\n.. _duck typing:\n   https://en.wikipedia.org/wiki/Duck_typing\n.. _gratis versus libre:\n   https://en.wikipedia.org/wiki/Gratis_versus_libre\n.. _memory safety:\n   https://en.wikipedia.org/wiki/Memory_safety\n.. _multiple dispatch:\n   https://en.wikipedia.org/wiki/Multiple_dispatch\n.. _near-real-time:\n   https://en.wikipedia.org/wiki/Real-time_computing#Near_real-time\n.. _random walk:\n   https://en.wikipedia.org/wiki/Random_walk\n.. _real-time:\n   https://en.wikipedia.org/wiki/Real-time_computing\n.. _set theory:\n   https://en.wikipedia.org/wiki/Set_theory\n.. _shield wall:\n   https://en.wikipedia.org/wiki/Shield_wall\n.. _dynamic typing:\n.. _dynamically-typed:\n.. _static typing:\n.. _statically-typed:\n   https://en.wikipedia.org/wiki/Type_system\n.. _topological sort:\n   https://en.wikipedia.org/wiki/Topological_sorting\n.. _type inference:\n   https://en.wikipedia.org/wiki/Type_inference\n.. _zero-cost abstraction:\n   https://boats.gitlab.io/blog/post/zero-cost-abstractions\n\n.. # ------------------( LINKS ~ kipling                     )------------------\n.. _The Jungle Book:\n   https://www.gutenberg.org/files/236/236-h/236-h.htm\n.. _Shere Khan:\n   https://en.wikipedia.org/wiki/Shere_Khan\n\n.. # ------------------( LINKS ~ math                        )------------------\n.. _Euler–Mascheroni constant:\n   https://en.wikipedia.org/wiki/Euler%E2%80%93Mascheroni_constant\n.. _coupon collector's problem:\n   https://en.wikipedia.org/wiki/Coupon_collector%27s_problem\n.. _Big O:\n   https://en.wikipedia.org/wiki/Big_O_notation\n\n.. # ------------------( LINKS ~ math : set                  )------------------\n.. _conjunction:\n   https://en.wikipedia.org/wiki/Logical_conjunction\n.. _disjunction:\n   https://en.wikipedia.org/wiki/Logical_disjunction\n.. _intersection:\n   https://en.wikipedia.org/wiki/Intersection_(set_theory)\n.. _relative set complement:\n   https://en.wikipedia.org/wiki/Complement_(set_theory)#Relative_complement\n\n.. # ------------------( LINKS ~ math : type                 )------------------\n.. _covariance:\n   https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)\n\n.. # ------------------( LINKS ~ meme                        )------------------\n.. _RNGesus:\n   https://knowyourmeme.com/memes/rngesus\n.. _goes up to eleven:\n   https://www.youtube.com/watch?v=uMSV4OteqBE\n.. _greased lightning:\n   https://www.youtube.com/watch?v=H-kL8A4RNQ8\n.. _ludicrous speed:\n   https://www.youtube.com/watch?v=6tTvklMXeFE\n.. _the gripping hand:\n   http://catb.org/jargon/html/O/on-the-gripping-hand.html\n\n.. # ------------------( LINKS ~ os : linux                  )------------------\n.. _Gentoo:\n   https://www.gentoo.org\n\n.. # ------------------( LINKS ~ os : macos                  )------------------\n.. _macOS:\n   https://en.wikipedia.org/wiki/MacOS\n.. _HomeBrew:\n   https://brew.sh\n.. _MacPorts:\n   https://www.macports.org\n\n.. # ------------------( LINKS ~ other                       )------------------\n.. _heliotrope:\n   https://en.wikipedia.org/wiki/Heliotropium\n\n.. # ------------------( LINKS ~ py                          )------------------\n.. _Python:\n   https://www.python.org\n.. _Python status:\n   https://devguide.python.org/#status-of-python-branches\n.. _pip:\n   https://pip.pypa.io\n\n.. # ------------------( LINKS ~ py : cli                    )------------------\n.. _-O:\n   https://docs.python.org/3/using/cmdline.html#cmdoption-o\n.. _PYTHONOPTIMIZE:\n   https://docs.python.org/3/using/cmdline.html#envvar-PYTHONOPTIMIZE\n\n.. # ------------------( LINKS ~ py : interpreter            )------------------\n.. _Brython:\n   https://brython.info\n.. _CPython:\n   https://github.com/python/cpython\n.. _Nuitka:\n   https://nuitka.net\n.. _Numba:\n   https://numba.pydata.org\n.. _PyPy:\n   https://www.pypy.org\n\n.. # ------------------( LINKS ~ py : interpreter : cpython  )------------------\n.. _CPython bug tracker:\n   https://github.com/python/cpython/issues\n\n.. # ------------------( LINKS ~ py : lang                   )------------------\n.. _generic alias parameters:\n   https://docs.python.org/3/library/stdtypes.html#genericalias.__parameters__\n.. _isinstancecheck:\n   https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks\n.. _mro:\n   https://docs.python.org/3/library/stdtypes.html#class.__mro__\n.. _object:\n   https://docs.python.org/3/reference/datamodel.html#basic-customization\n.. _operator precedence:\n   https://docs.python.org/3/reference/expressions.html#operator-precedence\n\n.. # ------------------( LINKS ~ py : misc                   )------------------\n.. _Guido van Rossum:\n   https://en.wikipedia.org/wiki/Guido_van_Rossum\n.. _RealPython:\n   https://realpython.com/python-type-checking\n\n.. # ------------------( LINKS ~ py : package                )------------------\n.. _Django:\n   https://www.djangoproject.com\n.. _NetworkX:\n   https://networkx.org\n.. _Pandas:\n   https://pandas.pydata.org\n.. _PyTorch:\n   https://pytorch.org\n.. _SymPy:\n   https://www.sympy.org\n.. _numerary:\n   https://github.com/posita/numerary\n.. _pyenv:\n   https://operatingops.org/2020/10/24/tox-testing-multiple-python-versions-with-pyenv\n.. _typing_extensions:\n   https://pypi.org/project/typing-extensions\n\n.. # ------------------( LINKS ~ py : package : boto3        )------------------\n.. _Boto3:\n   https://aws.amazon.com/sdk-for-python\n.. _bearboto3:\n   https://github.com/beartype/bearboto3\n.. _mypy-boto3:\n   https://mypy-boto3.readthedocs.io\n\n.. # ------------------( LINKS ~ py : package : jax          )------------------\n.. _jax.numpy:\n   https://jax.readthedocs.io/en/latest/notebooks/thinking_in_jax.html\n\n.. # ------------------( LINKS ~ py : package : numpy        )------------------\n.. _NumPy:\n   https://numpy.org\n.. _numpy.dtype:\n   https://numpy.org/doc/stable/reference/arrays.dtypes.html\n.. _numpy.empty_like:\n   https://numpy.org/doc/stable/reference/generated/numpy.empty_like.html\n.. _numpy.floating:\n   https://numpy.org/doc/stable/reference/arrays.scalars.html?highlight=numpy%20generic#numpy.floating\n.. _numpy.generic:\n   https://numpy.org/doc/stable/reference/arrays.scalars.html?highlight=numpy%20generic#numpy.generic\n.. _numpy.integer:\n   https://numpy.org/doc/stable/reference/arrays.scalars.html?highlight=numpy%20generic#numpy.integer\n.. _numpy.typing:\n   https://numpy.org/devdocs/reference/typing.html\n.. _numpy.typing.NDArray:\n   https://numpy.org/devdocs/reference/typing.html#ndarray\n\n.. # ------------------( LINKS ~ py : package : sphinx       )------------------\n.. _Sphinx:\n   https://www.sphinx-doc.org\n.. _sphinx.ext.autodoc:\n   https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html\n\n.. # ------------------( LINKS ~ py : package : test         )------------------\n.. _Codecov:\n   https://about.codecov.io\n.. _pytest:\n   https://docs.pytest.org\n.. _tox:\n   https://tox.readthedocs.io\n\n.. # ------------------( LINKS ~ py : pep                    )------------------\n.. _PEP 0:\n   https://www.python.org/dev/peps\n.. _PEP 20:\n   https://www.python.org/dev/peps/pep-0020\n.. _PEP 362:\n   https://www.python.org/dev/peps/pep-0362\n.. _PEP 483:\n   https://www.python.org/dev/peps/pep-0483\n.. _PEP 526:\n   https://www.python.org/dev/peps/pep-0526\n.. _PEP 544:\n   https://www.python.org/dev/peps/pep-0544\n.. _PEP 557:\n   https://www.python.org/dev/peps/pep-0557\n.. _PEP 561:\n   https://www.python.org/dev/peps/pep-0561\n.. _PEP 563:\n   https://www.python.org/dev/peps/pep-0563\n.. _PEP 570:\n   https://www.python.org/dev/peps/pep-0570\n.. _PEP 572:\n   https://www.python.org/dev/peps/pep-0572\n.. _PEP 585:\n   https://www.python.org/dev/peps/pep-0585\n.. _PEP 586:\n   https://www.python.org/dev/peps/pep-0586\n.. _PEP 589:\n   https://www.python.org/dev/peps/pep-0589\n.. _PEP 591:\n   https://www.python.org/dev/peps/pep-0591\n.. _PEP 593:\n   https://www.python.org/dev/peps/pep-0593\n.. _PEP 604:\n   https://www.python.org/dev/peps/pep-0604\n.. _PEP 612:\n   https://www.python.org/dev/peps/pep-0612\n.. _PEP 613:\n   https://www.python.org/dev/peps/pep-0613\n.. _PEP 646:\n   https://www.python.org/dev/peps/pep-0646\n.. _PEP 647:\n   https://www.python.org/dev/peps/pep-0647\n.. _PEP 673:\n   https://www.python.org/dev/peps/pep-0673\n.. _PEP 675:\n   https://www.python.org/dev/peps/pep-0675\n.. _PEP 681:\n   https://www.python.org/dev/peps/pep-0681\n.. _PEP 3102:\n   https://www.python.org/dev/peps/pep-3102\n.. _PEP 3141:\n   https://www.python.org/dev/peps/pep-3141\n\n.. # ------------------( LINKS ~ py : pep : 3119             )------------------\n.. _PEP 3119:\n   https://www.python.org/dev/peps/pep-3119\n.. _virtual base classes:\n   https://www.python.org/dev/peps/pep-3119/#id33\n\n.. # ------------------( LINKS ~ py : pep : 484              )------------------\n.. _PEP 484:\n   https://www.python.org/dev/peps/pep-0484\n.. _implicit numeric tower:\n   https://peps.python.org/pep-0484/#the-numeric-tower\n.. _relative forward references:\n   https://peps.python.org/pep-0484/#forward-references\n.. _type aliases:\n   https://www.python.org/dev/peps/pep-0484/#type-aliases\n\n.. # ------------------( LINKS ~ py : pep : 560              )------------------\n.. _PEP 560:\n   https://www.python.org/dev/peps/pep-0560\n.. _mro_entries:\n   https://www.python.org/dev/peps/pep-0560/#id20\n\n.. # ------------------( LINKS ~ py : service                )------------------\n.. _Anaconda:\n   https://docs.conda.io/en/latest/miniconda.html\n.. _PyPI:\n   https://pypi.org\n\n.. # ------------------( LINKS ~ py : stdlib                 )------------------\n.. _linecache:\n   https://docs.python.org/3/library/linecache.html\n.. _weakref:\n   https://docs.python.org/3/library/weakref.html\n\n.. # ------------------( LINKS ~ py : stdlib : abc           )------------------\n.. _abc:\n   https://docs.python.org/3/library/abc.html\n.. _abc.ABCMeta:\n   https://docs.python.org/3/library/abc.html#abc.ABCMeta\n\n.. # ------------------( LINKS ~ py : stdlib : builtins      )------------------\n.. _builtins:\n   https://docs.python.org/3/library/stdtypes.html\n.. _None:\n   https://docs.python.org/3/library/constants.html#None\n.. _NotImplemented:\n   https://docs.python.org/3/library/constants.html#NotImplemented\n.. _dict:\n   https://docs.python.org/3/library/stdtypes.html#mapping-types-dict\n.. _dir:\n   https://docs.python.org/3/library/functions.html#dir\n.. _frozenset:\n   https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset\n.. _isinstance:\n   https://docs.python.org/3/library/functions.html#isinstance\n.. _issubclass:\n   https://docs.python.org/3/library/functions.html#issubclass\n.. _list:\n   https://docs.python.org/3/library/stdtypes.html#lists\n.. _memoryview:\n   https://docs.python.org/3/library/stdtypes.html#memory-views\n.. _range:\n   https://docs.python.org/3/library/stdtypes.html#typesseq-range\n.. _set:\n   https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset\n.. _tuple:\n   https://docs.python.org/3/library/stdtypes.html#tuples\n.. _type:\n   https://docs.python.org/3/library/stdtypes.html#bltin-type-objects\n\n.. # ------------------( LINKS ~ py : stdlib : collections   }------------------\n.. _collections:\n   https://docs.python.org/3/library/collections.html\n.. _collections.ChainMap:\n   https://docs.python.org/3/library/collections.html#collections.ChainMap\n.. _collections.Counter:\n   https://docs.python.org/3/library/collections.html#collections.Counter\n.. _collections.OrderedDict:\n   https://docs.python.org/3/library/collections.html#collections.OrderedDict\n.. _collections.defaultdict:\n   https://docs.python.org/3/library/collections.html#collections.defaultdict\n.. _collections.deque:\n   https://docs.python.org/3/library/collections.html#collections.deque\n\n.. # ------------------( LINKS ~ py : stdlib : collections.abc  }---------------\n.. _collections.abc:\n   https://docs.python.org/3/library/collections.abc.html\n.. _collections.abc.AsyncGenerator:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncGenerator\n.. _collections.abc.AsyncIterable:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncIterable\n.. _collections.abc.AsyncIterator:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncIterator\n.. _collections.abc.Awaitable:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Awaitable\n.. _collections.abc.ByteString:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.ByteString\n.. _collections.abc.Callable:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Callable\n.. _collections.abc.Collection:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Collection\n.. _collections.abc.Container:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Container\n.. _collections.abc.Coroutine:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Coroutine\n.. _collections.abc.Generator:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Generator\n.. _collections.abc.ItemsView:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.ItemsView\n.. _collections.abc.Iterable:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable\n.. _collections.abc.Iterator:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterator\n.. _collections.abc.KeysView:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.KeysView\n.. _collections.abc.Mapping:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping\n.. _collections.abc.MappingView:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.MappingView\n.. _collections.abc.MutableMapping:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping\n.. _collections.abc.MutableSequence:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence\n.. _collections.abc.MutableSet:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet\n.. _collections.abc.Reversible:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Reversible\n.. _collections.abc.Sequence:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence\n.. _collections.abc.Set:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.Set\n.. _collections.abc.ValuesView:\n   https://docs.python.org/3/library/collections.abc.html#collections.abc.ValuesView\n\n.. # ------------------( LINKS ~ py : stdlib : contextlib    )------------------\n.. _contextlib:\n   https://docs.python.org/3/library/contextlib.html\n.. _contextlib.AbstractAsyncContextManager:\n   https://docs.python.org/3/library/contextlib.html#contextlib.AbstractAsyncContextManager\n.. _contextlib.AbstractContextManager:\n   https://docs.python.org/3/library/contextlib.html#contextlib.AbstractContextManager\n\n.. # ------------------( LINKS ~ py : stdlib : abc           )------------------\n.. _dataclasses:\n   https://docs.python.org/3/library/dataclasses.html\n.. _dataclasses.InitVar:\n   https://docs.python.org/3/library/dataclasses.html#init-only-variables\n.. _dataclasses.dataclass:\n   https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass\n\n.. # ------------------( LINKS ~ py : stdlib : enum          )------------------\n.. _enum.Enum:\n   https://docs.python.org/3/library/enum.html#enum.Enum\n\n.. # ------------------( LINKS ~ py : stdlib : io            )------------------\n.. _io:\n   https://docs.python.org/3/library/io.html\n\n.. # ------------------( LINKS ~ py : stdlib : os            )------------------\n.. _os:\n   https://docs.python.org/3/library/os.html\n.. _os.walk:\n   https://docs.python.org/3/library/os.html#os.walk\n\n.. # ------------------( LINKS ~ py : stdlib : random        )------------------\n.. _random:\n   https://docs.python.org/3/library/random.html\n.. _random.getrandbits:\n   https://docs.python.org/3/library/random.html#random.getrandbits\n.. _random twister:\n   https://stackoverflow.com/a/11704178/2809027\n\n.. # ------------------( LINKS ~ py : stdlib : re            )------------------\n.. _re:\n   https://docs.python.org/3/library/re.html\n.. _re.Match:\n   https://docs.python.org/3/library/re.html#match-objects\n.. _re.Pattern:\n   https://docs.python.org/3/library/re.html#regular-expression-objects\n\n.. # ------------------( LINKS ~ py : stdlib : typing : attr )------------------\n.. _typing:\n   https://docs.python.org/3/library/typing.html\n.. _typing.AbstractSet:\n   https://docs.python.org/3/library/typing.html#typing.AbstractSet\n.. _typing.Annotated:\n   https://docs.python.org/3/library/typing.html#typing.Annotated\n.. _typing.Any:\n   https://docs.python.org/3/library/typing.html#typing.Any\n.. _typing.AnyStr:\n   https://docs.python.org/3/library/typing.html#typing.AnyStr\n.. _typing.AsyncContextManager:\n   https://docs.python.org/3/library/typing.html#typing.AsyncContextManager\n.. _typing.AsyncGenerator:\n   https://docs.python.org/3/library/typing.html#typing.AsyncGenerator\n.. _typing.AsyncIterable:\n   https://docs.python.org/3/library/typing.html#typing.AsyncIterable\n.. _typing.AsyncIterator:\n   https://docs.python.org/3/library/typing.html#typing.AsyncIterator\n.. _typing.Awaitable:\n   https://docs.python.org/3/library/typing.html#typing.Awaitable\n.. _typing.BinaryIO:\n   https://docs.python.org/3/library/typing.html#typing.BinaryIO\n.. _typing.ByteString:\n   https://docs.python.org/3/library/typing.html#typing.ByteString\n.. _typing.Callable:\n   https://docs.python.org/3/library/typing.html#typing.Callable\n.. _typing.ChainMap:\n   https://docs.python.org/3/library/typing.html#typing.ChainMap\n.. _typing.ClassVar:\n   https://docs.python.org/3/library/typing.html#typing.ClassVar\n.. _typing.Collection:\n   https://docs.python.org/3/library/typing.html#typing.Collection\n.. _typing.Concatenate:\n   https://docs.python.org/3/library/typing.html#typing.Concatenate\n.. _typing.Container:\n   https://docs.python.org/3/library/typing.html#typing.Container\n.. _typing.ContextManager:\n   https://docs.python.org/3/library/typing.html#typing.ContextManager\n.. _typing.Coroutine:\n   https://docs.python.org/3/library/typing.html#typing.Coroutine\n.. _typing.Counter:\n   https://docs.python.org/3/library/typing.html#typing.Counter\n.. _typing.DefaultDict:\n   https://docs.python.org/3/library/typing.html#typing.DefaultDict\n.. _typing.Deque:\n   https://docs.python.org/3/library/typing.html#typing.Deque\n.. _typing.Dict:\n   https://docs.python.org/3/library/typing.html#typing.Dict\n.. _typing.Final:\n   https://docs.python.org/3/library/typing.html#typing.Final\n.. _typing.ForwardRef:\n   https://docs.python.org/3/library/typing.html#typing.ForwardRef\n.. _typing.FrozenSet:\n   https://docs.python.org/3/library/typing.html#typing.FrozenSet\n.. _typing.Generator:\n   https://docs.python.org/3/library/typing.html#typing.Generator\n.. _typing.Generic:\n   https://docs.python.org/3/library/typing.html#typing.Generic\n.. _typing.Hashable:\n   https://docs.python.org/3/library/typing.html#typing.Hashable\n.. _typing.IO:\n   https://docs.python.org/3/library/typing.html#typing.IO\n.. _typing.ItemsView:\n   https://docs.python.org/3/library/typing.html#typing.ItemsView\n.. _typing.Iterable:\n   https://docs.python.org/3/library/typing.html#typing.Iterable\n.. _typing.Iterator:\n   https://docs.python.org/3/library/typing.html#typing.Iterator\n.. _typing.KeysView:\n   https://docs.python.org/3/library/typing.html#typing.KeysView\n.. _typing.List:\n   https://docs.python.org/3/library/typing.html#typing.List\n.. _typing.Literal:\n   https://docs.python.org/3/library/typing.html#typing.Literal\n.. _typing.Mapping:\n   https://docs.python.org/3/library/typing.html#typing.Mapping\n.. _typing.MappingView:\n   https://docs.python.org/3/library/typing.html#typing.MappinViewg\n.. _typing.Match:\n   https://docs.python.org/3/library/typing.html#typing.Match\n.. _typing.MutableMapping:\n   https://docs.python.org/3/library/typing.html#typing.MutableMapping\n.. _typing.MutableSequence:\n   https://docs.python.org/3/library/typing.html#typing.MutableSequence\n.. _typing.MutableSet:\n   https://docs.python.org/3/library/typing.html#typing.MutableSet\n.. _typing.NamedTuple:\n   https://docs.python.org/3/library/typing.html#typing.NamedTuple\n.. _typing.NewType:\n   https://docs.python.org/3/library/typing.html#typing.NewType\n.. _typing.NoReturn:\n   https://docs.python.org/3/library/typing.html#typing.NoReturn\n.. _typing.Optional:\n   https://docs.python.org/3/library/typing.html#typing.Optional\n.. _typing.OrderedDict:\n   https://docs.python.org/3/library/typing.html#typing.OrderedDict\n.. _typing.ParamSpec:\n   https://docs.python.org/3/library/typing.html#typing.ParamSpec\n.. _typing.ParamSpecArgs:\n   https://docs.python.org/3/library/typing.html#typing.ParamSpecArgs\n.. _typing.ParamSpecKwargs:\n   https://docs.python.org/3/library/typing.html#typing.ParamSpecKwargs\n.. _typing.Pattern:\n   https://docs.python.org/3/library/typing.html#typing.Pattern\n.. _typing.Protocol:\n   https://docs.python.org/3/library/typing.html#typing.Protocol\n.. _typing.Reversible:\n   https://docs.python.org/3/library/typing.html#typing.Reversible\n.. _typing.Self:\n   https://docs.python.org/3/library/typing.html#typing.Self\n.. _typing.Sequence:\n   https://docs.python.org/3/library/typing.html#typing.Sequence\n.. _typing.Set:\n   https://docs.python.org/3/library/typing.html#typing.Set\n.. _typing.Sized:\n   https://docs.python.org/3/library/typing.html#typing.Sized\n.. _typing.SupportsAbs:\n   https://docs.python.org/3/library/typing.html#typing.SupportsAbs\n.. _typing.SupportsBytes:\n   https://docs.python.org/3/library/typing.html#typing.SupportsBytes\n.. _typing.SupportsComplex:\n   https://docs.python.org/3/library/typing.html#typing.SupportsComplex\n.. _typing.SupportsFloat:\n   https://docs.python.org/3/library/typing.html#typing.SupportsFloat\n.. _typing.SupportsIndex:\n   https://docs.python.org/3/library/typing.html#typing.SupportsIndex\n.. _typing.SupportsInt:\n   https://docs.python.org/3/library/typing.html#typing.SupportsInt\n.. _typing.SupportsRound:\n   https://docs.python.org/3/library/typing.html#typing.SupportsRound\n.. _typing.Text:\n   https://docs.python.org/3/library/typing.html#typing.Text\n.. _typing.TextIO:\n   https://docs.python.org/3/library/typing.html#typing.TextIO\n.. _typing.Tuple:\n   https://docs.python.org/3/library/typing.html#typing.Tuple\n.. _typing.Type:\n   https://docs.python.org/3/library/typing.html#typing.Type\n.. _typing.TypeGuard:\n   https://docs.python.org/3/library/typing.html#typing.TypeGuard\n.. _typing.TypedDict:\n   https://docs.python.org/3/library/typing.html#typing.TypedDict\n.. _typing.TypeVar:\n   https://docs.python.org/3/library/typing.html#typing.TypeVar\n.. _typing.Union:\n   https://docs.python.org/3/library/typing.html#typing.Union\n.. _typing.ValuesView:\n   https://docs.python.org/3/library/typing.html#typing.ValuesView\n.. _@typing.final:\n   https://docs.python.org/3/library/typing.html#typing.final\n.. _@typing.no_type_check:\n   https://docs.python.org/3/library/typing.html#typing.no_type_check\n.. _typing.TYPE_CHECKING:\n   https://docs.python.org/3/library/typing.html#typing.TYPE_CHECKING\n\n.. # ------------------( LINKS ~ py : type : runtime         )------------------\n.. _enforce:\n   https://github.com/RussBaz/enforce\n.. _enforce_typing:\n   https://github.com/matchawine/python-enforce-typing\n.. _pydantic:\n   https://pydantic-docs.helpmanual.io\n.. _pytypes:\n   https://github.com/Stewori/pytypes\n.. _typeen:\n   https://github.com/k2bd/typen\n.. _typical:\n   https://github.com/seandstewart/typical\n\n.. # ------------------( LINKS ~ py : type : runtime : typeg )------------------\n.. _typeguard:\n   https://github.com/agronholm/typeguard\n.. _typeguard.check_type:\n   https://typeguard.readthedocs.io/en/latest/userguide.html#checking-types-directly\n\n.. # ------------------( LINKS ~ py : type : runtime : data  )------------------\n.. _PyContracts:\n   https://github.com/AlexandruBurlacu/pycontracts\n.. _contracts:\n   https://pypi.org/project/contracts\n.. _covenant:\n   https://github.com/kisielk/covenant\n.. _dpcontracts:\n   https://pypi.org/project/dpcontracts\n.. _icontract:\n   https://github.com/Parquery/icontract\n.. _pyadbc:\n   https://pypi.org/project/pyadbc\n.. _pcd:\n   https://pypi.org/project/pcd\n\n.. # ------------------( LINKS ~ py : type : static          )------------------\n.. _Pyre:\n   https://pyre-check.org\n.. _pytype:\n   https://github.com/google/pytype\n\n.. # ------------------( LINKS ~ py : type : static : pyright)------------------\n.. _pyright:\n   https://github.com/Microsoft/pyright\n.. _pyright plugins:\n   https://github.com/microsoft/pyright/issues/607#issuecomment-873467941\n.. _pyright PEP violation #1:\n   https://github.com/beartype/beartype/issues/126\n.. _pyright PEP violation #2:\n   https://github.com/beartype/beartype/issues/127\n\n.. # ------------------( LINKS ~ py : type : static : mypy   )------------------\n.. _mypy:\n   http://mypy-lang.org\n.. _mypy install:\n   https://mypy.readthedocs.io/en/stable/getting_started.html\n.. _mypy plugin:\n   https://mypy.readthedocs.io/en/stable/extending_mypy.html\n.. _type narrowing:\n   https://mypy.readthedocs.io/en/stable/type_narrowing.html\n\n.. # ------------------( LINKS ~ py : type : tensor          )------------------\n.. _jaxtyping:\n   https://github.com/google/jaxtyping\n.. _nptyping:\n   https://github.com/ramonhagenaars/nptyping\n.. _TorchTyping:\n   https://github.com/patrick-kidger/torchtyping\n\n.. # ------------------( LINKS ~ soft : ide                  )------------------\n.. _PyCharm:\n   https://en.wikipedia.org/wiki/PyCharm\n.. _Vim:\n   https://www.vim.org\n\n.. # ------------------( LINKS ~ soft : ide : vscode         )------------------\n.. _Pylance:\n   https://github.com/microsoft/pylance-release\n.. _VSCode:\n   https://code.visualstudio.com\n.. _VSCode Mypy extension:\n   https://marketplace.visualstudio.com/items?itemName=matangover.mypy\n\n.. # ------------------( LINKS ~ soft : lang                 )------------------\n.. _C:\n   https://en.wikipedia.org/wiki/C_(programming_language)\n.. _C++:\n   https://en.wikipedia.org/wiki/C%2B%2B\n.. _Ruby:\n   https://www.ruby-lang.org\n.. _Rust:\n   https://www.rust-lang.org\n\n.. # ------------------( LINKS ~ soft : license              )------------------\n.. _MIT license:\n   https://opensource.org/licenses/MIT\n\n.. # ------------------( LINKS ~ soft : web                  )------------------\n.. _React:\n   https://reactjs.org\n",
    "description_content_type": "text/x-rst; charset=UTF-8",
    "docs_url": null,
    "download_url": "https://github.com/beartype/beartype/archive/0.12.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/beartype/beartype",
    "keywords": "type checking,type hints,PEP 483,PEP 484,PEP 544,PEP 563,PEP 585,PEP 586,PEP 589,PEP 593,PEP 604,PEP 3141",
    "license": "MIT",
    "maintainer": "Cecil Curry, et al.",
    "maintainer_email": "leycec@gmail.com",
    "name": "beartype",
    "package_url": "https://pypi.org/project/beartype/",
    "platform": null,
    "project_url": "https://pypi.org/project/beartype/",
    "project_urls": {
      "Download": "https://github.com/beartype/beartype/archive/0.12.0.tar.gz",
      "Forums": "https://github.com/beartype/beartype/discussions",
      "Homepage": "https://github.com/beartype/beartype",
      "Issues": "https://github.com/beartype/beartype/issues",
      "Releases": "https://github.com/beartype/beartype/releases",
      "Source": "https://github.com/beartype/beartype"
    },
    "release_url": "https://pypi.org/project/beartype/0.12.0/",
    "requires_dist": [
      "typing-extensions (>=3.10.0.0) ; extra == 'all'",
      "coverage (>=5.5) ; extra == 'dev'",
      "sphinx ; extra == 'dev'",
      "pytest (>=4.0.0) ; extra == 'dev'",
      "tox (>=3.20.1) ; extra == 'dev'",
      "sphinx (>=4.1.0) ; extra == 'dev'",
      "autoapi (>=0.9.0) ; extra == 'dev'",
      "mypy (>=0.800) ; (platform_python_implementation != \"PyPy\") and extra == 'dev'",
      "typing-extensions ; (python_version < \"3.9.0\") and extra == 'dev'",
      "numpy ; (sys_platform != \"darwin\" and platform_python_implementation != \"PyPy\") and extra == 'dev'",
      "sphinx (==4.1.0) ; extra == 'doc-rtd'",
      "furo (==2022.6.21) ; extra == 'doc-rtd'",
      "sphinx ; extra == 'test-tox'",
      "pytest (>=4.0.0) ; extra == 'test-tox'",
      "coverage (>=5.5) ; extra == 'test-tox-coverage'",
      "mypy (>=0.800) ; (platform_python_implementation != \"PyPy\") and extra == 'test-tox'",
      "typing-extensions ; (python_version < \"3.9.0\") and extra == 'test-tox'",
      "numpy ; (sys_platform != \"darwin\" and platform_python_implementation != \"PyPy\") and extra == 'test-tox'"
    ],
    "requires_python": ">=3.7.0",
    "summary": "Unbearably fast runtime type checking in pure Python.",
    "version": "0.12.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16454771,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "296c3253a8ba279fe5be4c5d3b5de7820747487a87109f5b59a3cfabe52bd26e",
          "md5": "d144e637bab92ba0c25321c5208798b1",
          "sha256": "9ab9097446060321341bc235daacae9956e3e8aa167e4b7d825b3f1b0f21c0e0"
        },
        "downloads": -1,
        "filename": "beartype-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d144e637bab92ba0c25321c5208798b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.0",
        "size": 61705,
        "upload_time": "2020-05-21T07:03:42",
        "upload_time_iso_8601": "2020-05-21T07:03:42.480759Z",
        "url": "https://files.pythonhosted.org/packages/29/6c/3253a8ba279fe5be4c5d3b5de7820747487a87109f5b59a3cfabe52bd26e/beartype-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7d0ed903207fd4383e131259faa2a53fed3fd065c7f036e9ffd9ddef5c794a2",
          "md5": "4a61bf5533a9a2dcb764b6984ef5f179",
          "sha256": "3f09340bd95259031d29916216d7f01c965c40ea21ba14e6314faa11e858d79d"
        },
        "downloads": -1,
        "filename": "beartype-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4a61bf5533a9a2dcb764b6984ef5f179",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 109911,
        "upload_time": "2020-05-21T07:03:46",
        "upload_time_iso_8601": "2020-05-21T07:03:46.053523Z",
        "url": "https://files.pythonhosted.org/packages/c7/d0/ed903207fd4383e131259faa2a53fed3fd065c7f036e9ffd9ddef5c794a2/beartype-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db3e3504bd10986f8732dc67a659cc3b1d8040a1b489aa86f85e8a3bd42c8710",
          "md5": "23bc32c9fbd8eb8823130587f1c2e5f7",
          "sha256": "fc0bf306ad4c3afa2a81280ee5e2b86a280c0dc97b5dcb2d695b0b4c9dba32ec"
        },
        "downloads": -1,
        "filename": "beartype-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23bc32c9fbd8eb8823130587f1c2e5f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.0",
        "size": 83474,
        "upload_time": "2020-06-11T04:29:29",
        "upload_time_iso_8601": "2020-06-11T04:29:29.429715Z",
        "url": "https://files.pythonhosted.org/packages/db/3e/3504bd10986f8732dc67a659cc3b1d8040a1b489aa86f85e8a3bd42c8710/beartype-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69da0b54dc013c18e0b0f0a081a537da7e9f8dce6616e67347f5d7db8010cbca",
          "md5": "95efaf5a272d26202678492fa7d6449e",
          "sha256": "9c3af0ff20f27d298c9539facde7d553daf996e358b2b3937d04f2a8e0a27450"
        },
        "downloads": -1,
        "filename": "beartype-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "95efaf5a272d26202678492fa7d6449e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 124879,
        "upload_time": "2020-06-11T04:29:33",
        "upload_time_iso_8601": "2020-06-11T04:29:33.022249Z",
        "url": "https://files.pythonhosted.org/packages/69/da/0b54dc013c18e0b0f0a081a537da7e9f8dce6616e67347f5d7db8010cbca/beartype-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "752401fe5e88cc237293c24fb6f8a167b805df89fecfcfa47ec0e6f9e4eda4cd",
          "md5": "40dfe00af8e749de67fefb81fa3440c5",
          "sha256": "a1880ffd710378bbe571cc9780517d7a77373d907dadf4857be5a786c4d8b049"
        },
        "downloads": -1,
        "filename": "beartype-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40dfe00af8e749de67fefb81fa3440c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 571325,
        "upload_time": "2022-02-09T07:30:29",
        "upload_time_iso_8601": "2022-02-09T07:30:29.793900Z",
        "url": "https://files.pythonhosted.org/packages/75/24/01fe5e88cc237293c24fb6f8a167b805df89fecfcfa47ec0e6f9e4eda4cd/beartype-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f0828f17c5e169fcd66332c13bc81c8e7bbc3578907656ea03a7978ec3d0fda",
          "md5": "c2dd209f9b3c90dc993ca1075b14c28d",
          "sha256": "4dd7dd284000718a4517d982e65135dbc3931f2531982bbb682d84d932d70eba"
        },
        "downloads": -1,
        "filename": "beartype-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c2dd209f9b3c90dc993ca1075b14c28d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 783459,
        "upload_time": "2022-02-09T07:30:36",
        "upload_time_iso_8601": "2022-02-09T07:30:36.100873Z",
        "url": "https://files.pythonhosted.org/packages/7f/08/28f17c5e169fcd66332c13bc81c8e7bbc3578907656ea03a7978ec3d0fda/beartype-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ff7b47dd800d9e8509905625df5b9fdadfb17b2ec3ac93989567886dc252d0f",
          "md5": "cddcb8bcaa8734586f5ab294bd320c3b",
          "sha256": "3b9792658644503ada6c35e70745e342ef19c43c76dd32038e8552e35a7a01bc"
        },
        "downloads": -1,
        "filename": "beartype-0.10.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cddcb8bcaa8734586f5ab294bd320c3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 578254,
        "upload_time": "2022-02-19T08:07:43",
        "upload_time_iso_8601": "2022-02-19T08:07:43.114756Z",
        "url": "https://files.pythonhosted.org/packages/9f/f7/b47dd800d9e8509905625df5b9fdadfb17b2ec3ac93989567886dc252d0f/beartype-0.10.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "850c06778a7b2f586f8bd061204ac514807f4f96b6b74ae3a359ed9ebc54f66c",
          "md5": "4d95f764df13516d531c23db72e9a3e8",
          "sha256": "ef228e66938b4f4487d8b306a1d19a0938bc4ef244b6162309f423ccc8cefc76"
        },
        "downloads": -1,
        "filename": "beartype-0.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d95f764df13516d531c23db72e9a3e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 792635,
        "upload_time": "2022-02-19T08:07:48",
        "upload_time_iso_8601": "2022-02-19T08:07:48.245479Z",
        "url": "https://files.pythonhosted.org/packages/85/0c/06778a7b2f586f8bd061204ac514807f4f96b6b74ae3a359ed9ebc54f66c/beartype-0.10.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b3cb496fa8c4227be0660938d187c22b58558cbd417c289707b060f9e0a6c96",
          "md5": "cc2364664806ecf081190b7fb018e2a8",
          "sha256": "6e05f9825917219d9380f76a4ba31d8ff29de36556abed70ddc8da7ac59f6d13"
        },
        "downloads": -1,
        "filename": "beartype-0.10.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc2364664806ecf081190b7fb018e2a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 573749,
        "upload_time": "2022-02-22T23:42:32",
        "upload_time_iso_8601": "2022-02-22T23:42:32.606958Z",
        "url": "https://files.pythonhosted.org/packages/8b/3c/b496fa8c4227be0660938d187c22b58558cbd417c289707b060f9e0a6c96/beartype-0.10.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4453d6c12499cf368ce34e930cc7ec6afda63279b39deb199f306b62e720432b",
          "md5": "510951ff4e6414fec8671d77de1bb2dc",
          "sha256": "2e8d405318fe411ecdd937627f9f33181312a793ebd239b3da769c4439cb4b98"
        },
        "downloads": -1,
        "filename": "beartype-0.10.2.tar.gz",
        "has_sig": false,
        "md5_digest": "510951ff4e6414fec8671d77de1bb2dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 789377,
        "upload_time": "2022-02-22T23:42:38",
        "upload_time_iso_8601": "2022-02-22T23:42:38.042739Z",
        "url": "https://files.pythonhosted.org/packages/44/53/d6c12499cf368ce34e930cc7ec6afda63279b39deb199f306b62e720432b/beartype-0.10.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac579ec40183312d61a5f43751ef6e6bae201bc6c49fafa984231b335bde2aed",
          "md5": "e4899a17090c6dafe3cd83a9591bc8b6",
          "sha256": "6d732fde3dcd43204a2d8ec978ec6193aa7fcf06d7286339039a5644b42b0436"
        },
        "downloads": -1,
        "filename": "beartype-0.10.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4899a17090c6dafe3cd83a9591bc8b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 576085,
        "upload_time": "2022-03-11T07:09:37",
        "upload_time_iso_8601": "2022-03-11T07:09:37.985802Z",
        "url": "https://files.pythonhosted.org/packages/ac/57/9ec40183312d61a5f43751ef6e6bae201bc6c49fafa984231b335bde2aed/beartype-0.10.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9b39afd125fba938526100c75f29512713e031cc1ce21d443aac4707f55279c",
          "md5": "60bce5d927b135f9153e725d7feaeb4c",
          "sha256": "5ca1bb66dd9647155bfdb82ca1a066663f7743f2bc87f60004addf739def8236"
        },
        "downloads": -1,
        "filename": "beartype-0.10.3.tar.gz",
        "has_sig": false,
        "md5_digest": "60bce5d927b135f9153e725d7feaeb4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 793884,
        "upload_time": "2022-03-11T07:09:43",
        "upload_time_iso_8601": "2022-03-11T07:09:43.465184Z",
        "url": "https://files.pythonhosted.org/packages/e9/b3/9afd125fba938526100c75f29512713e031cc1ce21d443aac4707f55279c/beartype-0.10.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8fcb5f4ead8838dbbce4883503233cbfa1f3eec11a18b0c1ed2c89ef0515e00",
          "md5": "e5c11a34391c4207077f5a505eed0a3f",
          "sha256": "1a65453bc25b39979bf5ad65fe5e73350551282956456d828fb5783468649e3e"
        },
        "downloads": -1,
        "filename": "beartype-0.10.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5c11a34391c4207077f5a505eed0a3f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 578082,
        "upload_time": "2022-03-15T06:06:23",
        "upload_time_iso_8601": "2022-03-15T06:06:23.515331Z",
        "url": "https://files.pythonhosted.org/packages/a8/fc/b5f4ead8838dbbce4883503233cbfa1f3eec11a18b0c1ed2c89ef0515e00/beartype-0.10.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26e18323460360d73ca09f24384483c9facbf9f586928bdd9f0e80fdcc72dace",
          "md5": "e9c3a0c30dc35fe7f4f37fdb9138916f",
          "sha256": "24ec69f6a7f4e6e97af403d08de270def3248518060327095d23b1c4df64bf2a"
        },
        "downloads": -1,
        "filename": "beartype-0.10.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e9c3a0c30dc35fe7f4f37fdb9138916f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 795164,
        "upload_time": "2022-03-15T06:06:29",
        "upload_time_iso_8601": "2022-03-15T06:06:29.383645Z",
        "url": "https://files.pythonhosted.org/packages/26/e1/8323460360d73ca09f24384483c9facbf9f586928bdd9f0e80fdcc72dace/beartype-0.10.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cae7bd684b9b0d5f8db8bedb7e031940df872aa79b42825e26469bc36013536f",
          "md5": "9d01c1ac3d1c982499611172e3f61bd7",
          "sha256": "d1ed5f97edebe909385190fac95ef9af3daf233eb1a5cd08b88b0d8260708ad7"
        },
        "downloads": -1,
        "filename": "beartype-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d01c1ac3d1c982499611172e3f61bd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 702524,
        "upload_time": "2022-09-18T06:23:32",
        "upload_time_iso_8601": "2022-09-18T06:23:32.983253Z",
        "url": "https://files.pythonhosted.org/packages/ca/e7/bd684b9b0d5f8db8bedb7e031940df872aa79b42825e26469bc36013536f/beartype-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b37c0c6451ff5477cf6f3ac5101cafd084e43e3a29242d28f2056cad76ff03e9",
          "md5": "6daa97d01b4bab8133c1451ee6ff0b7b",
          "sha256": "3854b50eaaa98bb89490be57e73c69c777a0f304574e7043ac7da98ac6a735a6"
        },
        "downloads": -1,
        "filename": "beartype-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6daa97d01b4bab8133c1451ee6ff0b7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 928887,
        "upload_time": "2022-09-18T06:23:41",
        "upload_time_iso_8601": "2022-09-18T06:23:41.345397Z",
        "url": "https://files.pythonhosted.org/packages/b3/7c/0c6451ff5477cf6f3ac5101cafd084e43e3a29242d28f2056cad76ff03e9/beartype-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b41fd066e5689e91e3c8845d275d85d25b23f2c7c78c9523d852b4b73be73875",
          "md5": "587b93fefbb33ccb77399ed205cdc1b4",
          "sha256": "3d9d5bec198bcf965c000d7b5120bebdd19a444ef6e39e97d0e93eb8832e10c8"
        },
        "downloads": -1,
        "filename": "beartype-0.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "587b93fefbb33ccb77399ed205cdc1b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 754537,
        "upload_time": "2023-01-17T08:36:27",
        "upload_time_iso_8601": "2023-01-17T08:36:27.714176Z",
        "url": "https://files.pythonhosted.org/packages/b4/1f/d066e5689e91e3c8845d275d85d25b23f2c7c78c9523d852b4b73be73875/beartype-0.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9578bf7a20712dbf3a18e37f9ae1c2a1e04169c43b4628871f40f1db5f29c257",
          "md5": "25c66c019cf70bae152647234d5040a3",
          "sha256": "3b7545b3f333a6b07042b68b102141554c9add2e979dab7b0f8ed6378f7af7d7"
        },
        "downloads": -1,
        "filename": "beartype-0.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "25c66c019cf70bae152647234d5040a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 1029204,
        "upload_time": "2023-01-17T08:36:34",
        "upload_time_iso_8601": "2023-01-17T08:36:34.367889Z",
        "url": "https://files.pythonhosted.org/packages/95/78/bf7a20712dbf3a18e37f9ae1c2a1e04169c43b4628871f40f1db5f29c257/beartype-0.12.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07c7afc949b3e5703dba1605c5788785338cd88b00bfff43ebb206df6417a501",
          "md5": "2550e7409293988182be0722697306e7",
          "sha256": "ef6c694f1ef4c31c29c439f2972ba231b5de6b2394c3758cbf463674943fba36"
        },
        "downloads": -1,
        "filename": "beartype-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2550e7409293988182be0722697306e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.0",
        "size": 167462,
        "upload_time": "2020-09-03T05:11:21",
        "upload_time_iso_8601": "2020-09-03T05:11:21.924624Z",
        "url": "https://files.pythonhosted.org/packages/07/c7/afc949b3e5703dba1605c5788785338cd88b00bfff43ebb206df6417a501/beartype-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15523320b7dd97f423a50db51e3de2b6f16edac9eb8c830a28ffc55683167680",
          "md5": "db8308e661cdba3b06318726403efa37",
          "sha256": "7a4706da2373396c5f83c8103b09f7bb6db3344abd5d06eb16a15c130264ecf5"
        },
        "downloads": -1,
        "filename": "beartype-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "db8308e661cdba3b06318726403efa37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 223223,
        "upload_time": "2020-09-03T05:11:24",
        "upload_time_iso_8601": "2020-09-03T05:11:24.096052Z",
        "url": "https://files.pythonhosted.org/packages/15/52/3320b7dd97f423a50db51e3de2b6f16edac9eb8c830a28ffc55683167680/beartype-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "555fd25495f94480b692508a2b9873990a5ff85cd9b606c29d43ec32dd1f01b9",
          "md5": "f9a29914c9b437b51a4531ea56301296",
          "sha256": "7eaf3fb18261560eeb89960acd6a52d2a74700ff25951fd5579ed47f99d8f0f1"
        },
        "downloads": -1,
        "filename": "beartype-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9a29914c9b437b51a4531ea56301296",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.0",
        "size": 195950,
        "upload_time": "2020-10-01T04:33:56",
        "upload_time_iso_8601": "2020-10-01T04:33:56.519702Z",
        "url": "https://files.pythonhosted.org/packages/55/5f/d25495f94480b692508a2b9873990a5ff85cd9b606c29d43ec32dd1f01b9/beartype-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e37e5a337cf08be7d7a25045381d9f69cc81eb6dee5d7fbbf0431e9392378576",
          "md5": "69937c94a57017bf4c88cf3d7a508adc",
          "sha256": "99b15566b2e17f30f20586c14201eeca934acfa98df20705628d8f6c017cacf2"
        },
        "downloads": -1,
        "filename": "beartype-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69937c94a57017bf4c88cf3d7a508adc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 252405,
        "upload_time": "2020-10-01T04:33:59",
        "upload_time_iso_8601": "2020-10-01T04:33:59.049471Z",
        "url": "https://files.pythonhosted.org/packages/e3/7e/5a337cf08be7d7a25045381d9f69cc81eb6dee5d7fbbf0431e9392378576/beartype-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "629c6dcd1d2e54978d0c550ae2a57669d8569839518d631da395c568f7e9158f",
          "md5": "03b5c2e439e10810b9409ce356aa66a0",
          "sha256": "db9c2a151cb843275a5ff343f0a97bf342eddfe96db9934a73b9614a76bc35db"
        },
        "downloads": -1,
        "filename": "beartype-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03b5c2e439e10810b9409ce356aa66a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 196968,
        "upload_time": "2020-10-05T21:16:45",
        "upload_time_iso_8601": "2020-10-05T21:16:45.870782Z",
        "url": "https://files.pythonhosted.org/packages/62/9c/6dcd1d2e54978d0c550ae2a57669d8569839518d631da395c568f7e9158f/beartype-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22b6463aee1b24f93554b569506c40c591f42427b5130c08d1fa0da568864d15",
          "md5": "68de76834cc89a0c8e09224a977c1956",
          "sha256": "dafba17388cd145f60dbb8d9052bcbc9a4c1d1adcd98e16871ce13d31fde8be9"
        },
        "downloads": -1,
        "filename": "beartype-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "68de76834cc89a0c8e09224a977c1956",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 253819,
        "upload_time": "2020-10-05T21:16:48",
        "upload_time_iso_8601": "2020-10-05T21:16:48.226780Z",
        "url": "https://files.pythonhosted.org/packages/22/b6/463aee1b24f93554b569506c40c591f42427b5130c08d1fa0da568864d15/beartype-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe7874e6a563cb9cc96842757b29b87a39471466c1459c9806f3ab95122ddc3b",
          "md5": "70924032505fcf1212237b21ba6f149e",
          "sha256": "dfec12a1d52279c2b6bf501dc60e14bceef4c95d9e569658f620bffb085f2c24"
        },
        "downloads": -1,
        "filename": "beartype-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70924032505fcf1212237b21ba6f149e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 199311,
        "upload_time": "2020-10-11T02:12:13",
        "upload_time_iso_8601": "2020-10-11T02:12:13.583765Z",
        "url": "https://files.pythonhosted.org/packages/fe/78/74e6a563cb9cc96842757b29b87a39471466c1459c9806f3ab95122ddc3b/beartype-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8a2bb7f3076b90ae9c093b1a6859df3b01813d8f0538f78e52ae1b3c06b1102",
          "md5": "9bb022b48b238cb6d882c766f9fa65f3",
          "sha256": "98da8f40e657092e268c151f7b7037d3cde8d97c31a9f8caff3a05cb421df9f9"
        },
        "downloads": -1,
        "filename": "beartype-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9bb022b48b238cb6d882c766f9fa65f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 257088,
        "upload_time": "2020-10-11T02:12:15",
        "upload_time_iso_8601": "2020-10-11T02:12:15.567318Z",
        "url": "https://files.pythonhosted.org/packages/a8/a2/bb7f3076b90ae9c093b1a6859df3b01813d8f0538f78e52ae1b3c06b1102/beartype-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "292708cfb69775a3e2c41e9b3da886d3930804ec871eaf2fa2085962ebc4940e",
          "md5": "0fc73571b529e4766f1df023f5c5057f",
          "sha256": "216f16ae2dd8d44b6e0f0be1865b3d4c967eb29d2d71f0ef6e0816f42a70c60f"
        },
        "downloads": -1,
        "filename": "beartype-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fc73571b529e4766f1df023f5c5057f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 245145,
        "upload_time": "2020-11-19T05:27:42",
        "upload_time_iso_8601": "2020-11-19T05:27:42.805267Z",
        "url": "https://files.pythonhosted.org/packages/29/27/08cfb69775a3e2c41e9b3da886d3930804ec871eaf2fa2085962ebc4940e/beartype-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83369ba9e8a0f94c33c503aa279cd1af7177ae5d051c7151aa4ae462372977e8",
          "md5": "864c949d90f81ea30aa5ba70fa63d5b4",
          "sha256": "e0cea6edc65d8a25b744e83335e6712887f3b61ef19b51b89fba72a50517e2ce"
        },
        "downloads": -1,
        "filename": "beartype-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "864c949d90f81ea30aa5ba70fa63d5b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 309740,
        "upload_time": "2020-11-19T05:27:44",
        "upload_time_iso_8601": "2020-11-19T05:27:44.999856Z",
        "url": "https://files.pythonhosted.org/packages/83/36/9ba9e8a0f94c33c503aa279cd1af7177ae5d051c7151aa4ae462372977e8/beartype-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f06b0fbea5086814685115c6be53abfa01222e5e34385ce0c7c688425d74a27",
          "md5": "24f94fadbacf1843ebb75b34683cf41c",
          "sha256": "cfa2d874a8d00c6aa90ae7ac94d4c013a1ac4754930cf178978d02b18c672ef2"
        },
        "downloads": -1,
        "filename": "beartype-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24f94fadbacf1843ebb75b34683cf41c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 248061,
        "upload_time": "2020-12-02T22:46:53",
        "upload_time_iso_8601": "2020-12-02T22:46:53.411161Z",
        "url": "https://files.pythonhosted.org/packages/1f/06/b0fbea5086814685115c6be53abfa01222e5e34385ce0c7c688425d74a27/beartype-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68e681d3d9c634d3e1e6076dcfa36c36211912ffdec3eddc7eb835969820eadb",
          "md5": "d2c3dca240c55dddde36a67649109f63",
          "sha256": "a1d2d045ce347666cc2b38962925a1a4a79331e1d97c024fef189de69477149f"
        },
        "downloads": -1,
        "filename": "beartype-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d2c3dca240c55dddde36a67649109f63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 323981,
        "upload_time": "2020-12-02T22:46:56",
        "upload_time_iso_8601": "2020-12-02T22:46:56.292733Z",
        "url": "https://files.pythonhosted.org/packages/68/e6/81d3d9c634d3e1e6076dcfa36c36211912ffdec3eddc7eb835969820eadb/beartype-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "021d27164ad8eb01587c27f1b555161b1e91157b833927a2a2e020b1fd2485d3",
          "md5": "6e04d38d24c68984701fbe5758b15174",
          "sha256": "a7e755243f79126537fa693fd096e91fa4af72f28c6bbf6d95e74dff3daf0cc3"
        },
        "downloads": -1,
        "filename": "beartype-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e04d38d24c68984701fbe5758b15174",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 260937,
        "upload_time": "2020-12-06T07:39:42",
        "upload_time_iso_8601": "2020-12-06T07:39:42.868795Z",
        "url": "https://files.pythonhosted.org/packages/02/1d/27164ad8eb01587c27f1b555161b1e91157b833927a2a2e020b1fd2485d3/beartype-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19d54f6d70a2096ce24ad91b8fabdac28643fdddf920e0f7977cde7bd1bb7296",
          "md5": "b5137f9d7acb6d32c771bcc740e9b522",
          "sha256": "195b1ea1834511b876507563808d8ca602d7cfb141ab9660c17a5148fb38eeb9"
        },
        "downloads": -1,
        "filename": "beartype-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5137f9d7acb6d32c771bcc740e9b522",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 354348,
        "upload_time": "2020-12-06T07:39:45",
        "upload_time_iso_8601": "2020-12-06T07:39:45.486970Z",
        "url": "https://files.pythonhosted.org/packages/19/d5/4f6d70a2096ce24ad91b8fabdac28643fdddf920e0f7977cde7bd1bb7296/beartype-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbac9841acee44bc517765507ec3b539cbf0240699c7ff913b37da65442f33d1",
          "md5": "2ba2f9da1ae945a49fb9b832a8f3003a",
          "sha256": "03c2a9984890da13319acfffd53979a7a778caf111cff390dcb7c490845e728b"
        },
        "downloads": -1,
        "filename": "beartype-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ba2f9da1ae945a49fb9b832a8f3003a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 366874,
        "upload_time": "2021-03-04T08:12:16",
        "upload_time_iso_8601": "2021-03-04T08:12:16.591054Z",
        "url": "https://files.pythonhosted.org/packages/cb/ac/9841acee44bc517765507ec3b539cbf0240699c7ff913b37da65442f33d1/beartype-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7a87154f5dbf53553d244220a2c2736851dd22b60d85e59967a632795c17db6",
          "md5": "b721916a1f2cb7dad145cbf39a978169",
          "sha256": "f6167aaa2691db46669f1c2e2aa1f2c38f456fe8a669fe9d3f2af6ed97d083ec"
        },
        "downloads": -1,
        "filename": "beartype-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b721916a1f2cb7dad145cbf39a978169",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 679005,
        "upload_time": "2021-03-04T08:12:27",
        "upload_time_iso_8601": "2021-03-04T08:12:27.615623Z",
        "url": "https://files.pythonhosted.org/packages/c7/a8/7154f5dbf53553d244220a2c2736851dd22b60d85e59967a632795c17db6/beartype-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc24b4658485c91cc26a4d3c038a271f5a3818747fc0939f9dfd2d45287a9b08",
          "md5": "5684870f93de248f8b1d6ce89bdfd901",
          "sha256": "4ccd61484b68c2bcd979dd25ae6d83ddd70b1a800a0c80ff70d5b28ddce15cde"
        },
        "downloads": -1,
        "filename": "beartype-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5684870f93de248f8b1d6ce89bdfd901",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 431695,
        "upload_time": "2021-05-25T05:39:45",
        "upload_time_iso_8601": "2021-05-25T05:39:45.372900Z",
        "url": "https://files.pythonhosted.org/packages/bc/24/b4658485c91cc26a4d3c038a271f5a3818747fc0939f9dfd2d45287a9b08/beartype-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3b90eb293e960bb08ad6124462141a524a0ca63c280a9de7155671d51d415bb",
          "md5": "c2160f47306b197a6e484f6e9d13f7da",
          "sha256": "eee491b0f9636a88dd8af3f6cf893bd094f6e5669fce2d45b7c5f6171d501c6a"
        },
        "downloads": -1,
        "filename": "beartype-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c2160f47306b197a6e484f6e9d13f7da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 589225,
        "upload_time": "2021-05-25T05:39:49",
        "upload_time_iso_8601": "2021-05-25T05:39:49.599460Z",
        "url": "https://files.pythonhosted.org/packages/f3/b9/0eb293e960bb08ad6124462141a524a0ca63c280a9de7155671d51d415bb/beartype-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dfa3c51a0045cf490c0ef00800bab3cf21f67504b394aea5234b77518bf0433",
          "md5": "92313872feab5abf58fb6b55f9eee816",
          "sha256": "2bdd7da07c017c82380162d67d3331a48c6b608d8e1c65508f6951e8c7afce8f"
        },
        "downloads": -1,
        "filename": "beartype-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92313872feab5abf58fb6b55f9eee816",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 447264,
        "upload_time": "2021-06-30T06:15:57",
        "upload_time_iso_8601": "2021-06-30T06:15:57.788872Z",
        "url": "https://files.pythonhosted.org/packages/1d/fa/3c51a0045cf490c0ef00800bab3cf21f67504b394aea5234b77518bf0433/beartype-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9eef6eed95460062c9751aabe6cc279510cecc9492a04f274a14b52812534fd",
          "md5": "327bc67c5c0654892b6f2190d2202e3f",
          "sha256": "0ea3b0b7983e4bdabb47ad299a4ba11cc48beaedabaf89752eea27cb6152e5c1"
        },
        "downloads": -1,
        "filename": "beartype-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "327bc67c5c0654892b6f2190d2202e3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 601444,
        "upload_time": "2021-06-30T06:16:02",
        "upload_time_iso_8601": "2021-06-30T06:16:02.277459Z",
        "url": "https://files.pythonhosted.org/packages/c9/ee/f6eed95460062c9751aabe6cc279510cecc9492a04f274a14b52812534fd/beartype-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f109f155bed44ac8e130fbc5d0c60a91415fc2355701e049a1146de04505de43",
          "md5": "2f8a6e35c83f2d900be778d9f88155bb",
          "sha256": "5cecdad2d7ea9a828a1ce8199c57b029f0379f3981d1c151e61dfe42f68a00ce"
        },
        "downloads": -1,
        "filename": "beartype-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f8a6e35c83f2d900be778d9f88155bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 455462,
        "upload_time": "2021-08-18T07:07:27",
        "upload_time_iso_8601": "2021-08-18T07:07:27.308615Z",
        "url": "https://files.pythonhosted.org/packages/f1/09/f155bed44ac8e130fbc5d0c60a91415fc2355701e049a1146de04505de43/beartype-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "405c06005933be7c74bd03c115a9dc8e36ca1a004a76b12b5040759fc20d9f99",
          "md5": "6685c08c37e36ff8eeeaf7501af179ce",
          "sha256": "d6038f631b7e3d9dba18c9a3f18282af505fc2076003dd51b61abbcbdafaa859"
        },
        "downloads": -1,
        "filename": "beartype-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6685c08c37e36ff8eeeaf7501af179ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 626315,
        "upload_time": "2021-08-18T07:07:32",
        "upload_time_iso_8601": "2021-08-18T07:07:32.758784Z",
        "url": "https://files.pythonhosted.org/packages/40/5c/06005933be7c74bd03c115a9dc8e36ca1a004a76b12b5040759fc20d9f99/beartype-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08a9a7750e85acaf851ed3d9da3157cd38c795ff309995342f85129882b10214",
          "md5": "2d3448bd569a1db517f52e8ff2aa7ccb",
          "sha256": "e3142ee03d7ef6f2bcfff079f2bb4d42f70303fdbd2d98ca99f36387e153fca7"
        },
        "downloads": -1,
        "filename": "beartype-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d3448bd569a1db517f52e8ff2aa7ccb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 457516,
        "upload_time": "2021-08-21T04:36:25",
        "upload_time_iso_8601": "2021-08-21T04:36:25.748483Z",
        "url": "https://files.pythonhosted.org/packages/08/a9/a7750e85acaf851ed3d9da3157cd38c795ff309995342f85129882b10214/beartype-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b7586533c625a7974807b91d7e40e7a3e3b588564b370fc340579e5d6bdbe92",
          "md5": "83101f4caa6ba1e424f23a58c19479e4",
          "sha256": "c2a2bac961cae7f022d88b892c0d23e91314915aea3e01f316880b4fb00d7d2c"
        },
        "downloads": -1,
        "filename": "beartype-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "83101f4caa6ba1e424f23a58c19479e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 628814,
        "upload_time": "2021-08-21T04:36:30",
        "upload_time_iso_8601": "2021-08-21T04:36:30.443935Z",
        "url": "https://files.pythonhosted.org/packages/6b/75/86533c625a7974807b91d7e40e7a3e3b588564b370fc340579e5d6bdbe92/beartype-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c440c7b008be4059ce21796f840db8a29df43d40342c6883731d4c5f8127ed6",
          "md5": "dd3e35080bfcacff9a580414ecc4895f",
          "sha256": "42cd6c1ba538eff40c2a9db636994dfd767c55eba5b994c7347709595664b497"
        },
        "downloads": -1,
        "filename": "beartype-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd3e35080bfcacff9a580414ecc4895f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 513380,
        "upload_time": "2021-10-22T07:49:42",
        "upload_time_iso_8601": "2021-10-22T07:49:42.263179Z",
        "url": "https://files.pythonhosted.org/packages/4c/44/0c7b008be4059ce21796f840db8a29df43d40342c6883731d4c5f8127ed6/beartype-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bc7a73fbaa2f2abc1120e6d16cfb89cdb6f7ea3ba8e715dbc324ac1aafe7b4b",
          "md5": "8f077cc3ec98a3ab23b485b38a0d45d6",
          "sha256": "a94691716c246a25a56e8a23942796b3133b5f444d92c1620329b81671be1311"
        },
        "downloads": -1,
        "filename": "beartype-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8f077cc3ec98a3ab23b485b38a0d45d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 689662,
        "upload_time": "2021-10-22T07:49:47",
        "upload_time_iso_8601": "2021-10-22T07:49:47.804886Z",
        "url": "https://files.pythonhosted.org/packages/6b/c7/a73fbaa2f2abc1120e6d16cfb89cdb6f7ea3ba8e715dbc324ac1aafe7b4b/beartype-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9fa5bb3f0d7e638196bd099551d1857f3c8e8e0e02d83734fa14907ea3f8c7a",
          "md5": "fd7e9456cd1760f85ac24a1e98db74e4",
          "sha256": "fb23f59b709dd29c4bff25ede0969cdd76aa7e7812abef704d08007ea07372e0"
        },
        "downloads": -1,
        "filename": "beartype-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd7e9456cd1760f85ac24a1e98db74e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 524142,
        "upload_time": "2021-11-06T06:22:43",
        "upload_time_iso_8601": "2021-11-06T06:22:43.327874Z",
        "url": "https://files.pythonhosted.org/packages/a9/fa/5bb3f0d7e638196bd099551d1857f3c8e8e0e02d83734fa14907ea3f8c7a/beartype-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef1611a1509d5cd7f3760101edda30f66b28367f2793178bea57745733e92076",
          "md5": "1dce2eb6ed26ac2b22cfcd1590cebbca",
          "sha256": "623630dc243b0da5a84f0fa414e6aaaf2613e567ad19abfe6a81c17ea5ab62f1"
        },
        "downloads": -1,
        "filename": "beartype-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1dce2eb6ed26ac2b22cfcd1590cebbca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 711976,
        "upload_time": "2021-11-06T06:22:48",
        "upload_time_iso_8601": "2021-11-06T06:22:48.705323Z",
        "url": "https://files.pythonhosted.org/packages/ef/16/11a1509d5cd7f3760101edda30f66b28367f2793178bea57745733e92076/beartype-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b41fd066e5689e91e3c8845d275d85d25b23f2c7c78c9523d852b4b73be73875",
        "md5": "587b93fefbb33ccb77399ed205cdc1b4",
        "sha256": "3d9d5bec198bcf965c000d7b5120bebdd19a444ef6e39e97d0e93eb8832e10c8"
      },
      "downloads": -1,
      "filename": "beartype-0.12.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "587b93fefbb33ccb77399ed205cdc1b4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 754537,
      "upload_time": "2023-01-17T08:36:27",
      "upload_time_iso_8601": "2023-01-17T08:36:27.714176Z",
      "url": "https://files.pythonhosted.org/packages/b4/1f/d066e5689e91e3c8845d275d85d25b23f2c7c78c9523d852b4b73be73875/beartype-0.12.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9578bf7a20712dbf3a18e37f9ae1c2a1e04169c43b4628871f40f1db5f29c257",
        "md5": "25c66c019cf70bae152647234d5040a3",
        "sha256": "3b7545b3f333a6b07042b68b102141554c9add2e979dab7b0f8ed6378f7af7d7"
      },
      "downloads": -1,
      "filename": "beartype-0.12.0.tar.gz",
      "has_sig": false,
      "md5_digest": "25c66c019cf70bae152647234d5040a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 1029204,
      "upload_time": "2023-01-17T08:36:34",
      "upload_time_iso_8601": "2023-01-17T08:36:34.367889Z",
      "url": "https://files.pythonhosted.org/packages/95/78/bf7a20712dbf3a18e37f9ae1c2a1e04169c43b4628871f40f1db5f29c257/beartype-0.12.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}