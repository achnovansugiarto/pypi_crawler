{
  "info": {
    "author": "donadigo",
    "author_email": "donadigo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "![Build Status](https://github.com/donadigo/bytefield/workflows/Build/badge.svg)\r\n# ByteField\r\nA Python library for parsing/manipulating binary data with easily accessible Python properties inspired by Django. The library is still in development. ByteField supports:\r\n* Variable length fields\r\n* Nested structures\r\n* Parsing only accessed fields\r\n\r\n## Quick example\r\nByteField allows to define binary data layout declaratively which then maps to underlying bytes:\r\n```py\r\nfrom bytefield import *\r\n\r\nclass Header(ByteStruct):\r\n    magic = StringField(length=5)\r\n    length = IntegerField()\r\n    array = ArrayField(shape=None, elem_field_type=IntegerField)\r\n    floating = FloatField()\r\n\r\nheader = Header(magic='bytes', floating=3.14)\r\nheader.length = 3\r\nheader.array = list(range(1, header.length + 1))\r\nprint(header.data)\r\n```\r\n\r\n### Output:\r\n```py\r\nbytearray(b'bytes\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\xc3\\xf5H@')`\r\n```\r\n\r\n## Example: parse a JPEG header\r\nYou can embed other structure declarations inside structures:\r\n```py\r\nfrom bytefield import *\r\n\r\nclass RGB(ByteStruct):\r\n    r = IntegerField(signed=False, size=1)\r\n    g = IntegerField(signed=False, size=1)\r\n    b = IntegerField(signed=False, size=1)\r\n\r\nclass Marker(ByteStruct):\r\n    marker = IntegerField(size=2, signed=False)\r\n    length = IntegerField(size=2, signed=False)\r\n    identifier = StringField(length=5, encoding='ascii')\r\n    version = IntegerField(size=2, signed=False)\r\n    density = IntegerField(size=1, signed=False)\r\n    x_density = IntegerField(size=2, signed=False)\r\n    y_density = IntegerField(size=2, signed=False)\r\n    x_thumbnail = IntegerField(size=2, signed=False)\r\n    y_thumbnail = IntegerField(size=2, signed=False)\r\n    thumb_data = ArrayField(shape=None, elem_field_type=RGB)\r\n\r\nclass JPEGHeader(ByteStruct):\r\n    soi = IntegerField(size=2, signed=False)\r\n    marker = StructField(Marker)\r\n\r\nwith open('image.jpg', 'rb') as f:\r\n    # Parse the JPEG header\r\n    header = JPEGHeader(f.read())\r\n\r\n    # Resize the thumbnail data\r\n    header.marker.resize(\r\n        Marker.thumb_data_field, header.marker.x_thumbnail * header.marker.y_thumbnail\r\n    )\r\n\r\n    # Display the thumbnail\r\n    display_thumbnail(header.marker.thumb_data)\r\n```\r\n\r\n## Writing custom struct logic\r\nYou can create high-level structures which define their own behavior depending on the data contained within the struct:\r\n```py\r\nfrom bytefield import *\r\n\r\nclass DynamicFloatArray(ByteStruct):\r\n    length = IntegerField(signed=False)\r\n    array_data = ArrayField(None, FloatField)\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        # When instantiated, resize the array according to its length\r\n        self.resize(DynamicFloatArray.array_data_field, self.length)\r\n\r\ndata = bytearray(b'\\x03\\x00\\x00\\x00\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@')\r\nprint(DynamicFloatArray(data))\r\n```\r\n\r\n### Output:\r\n```py\r\n[DynamicFloatArray object at 0x1c88e709e50]\r\nlength (int): 3\r\narray_data (ndarray): [1.0 2.0 3.0]\r\n```\r\n\r\n## Variable fields\r\nBytefield supports fields with unknown type/size:\r\n```py\r\nfrom bytefiel import *\r\n\r\nTYPE_INTEGER = 0\r\nTYPE_FLOAT = 1\r\nTYPE_STRING = 2\r\n\r\nclass DynamicString(ByteStruct):\r\n    length = IntegerField(signed=False)\r\n    str = StringField(None)\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.resize(DynamicString.str_field, self.length)\r\n\r\nclass Content(ByteStruct):\r\n    content_type = IntegerField(signed=False, size=2)\r\n    content_data = VariableField()  # a variable field that will be resized when parsing the struct\r\n\r\n    def __init__(self, data: bytearray = None, *args, **kwargs):\r\n        super().__init__(data, *args, **kwargs)\r\n        resize_bytes = not bool(data)\r\n        if self.content_type == TYPE_INTEGER:\r\n            self.resize(Content.content_data_field, IntegerField(), resize_bytes=resize_bytes)\r\n        elif self.content_type == TYPE_FLOAT:\r\n            self.resize(Content.content_data_field, FloatField(), resize_bytes=resize_bytes)\r\n        elif self.content_type == TYPE_STRING:\r\n            self.resize(Content.content_data_field, StructField(DynamicString), resize_bytes=resize_bytes)\r\n\r\nwrite = Content()\r\nwrite.content_type = TYPE_STRING\r\nwrite.resize(Content.content_data_field, StructField(DynamicString), resize_bytes=True)\r\nwrite.content_data.str = 'content'\r\nwrite.content_data.length = len(write.content_data.str)\r\n\r\nread = Content(write.data)\r\nprint(f'{write.data} is parsed to:\\n{read}')\r\n```\r\n\r\n### Output\r\n```\r\nbytearray(b'\\x02\\x00\\x07\\x00\\x00\\x00content') is parsed to:\r\n[Content object at 0x1c1846888b0]\r\ncontent_type (int): 2\r\ncontent_data (DynamicString):\r\n        length (int): 7\r\n        str (str): content\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/donadigo/bytefield",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/donadigo/bytefield",
    "keywords": "struct,bytefield,bytearray",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bytefield",
    "package_url": "https://pypi.org/project/bytefield/",
    "platform": null,
    "project_url": "https://pypi.org/project/bytefield/",
    "project_urls": {
      "Download": "https://github.com/donadigo/bytefield",
      "Homepage": "https://github.com/donadigo/bytefield"
    },
    "release_url": "https://pypi.org/project/bytefield/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Parse binary data using declarative field layout and native Python properties",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16611649,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90a49aebd86afed79c2fd27f08f5a01de38c96270501a9cc783902899a8f4a14",
          "md5": "b64ef46d895a2736470494f881630f30",
          "sha256": "973b46c8162a7b13039a9d350d313a9fea7801e133d0cc8d0ced1bb6fc4f70ef"
        },
        "downloads": -1,
        "filename": "bytefield-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b64ef46d895a2736470494f881630f30",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15628,
        "upload_time": "2023-01-25T20:24:37",
        "upload_time_iso_8601": "2023-01-25T20:24:37.683483Z",
        "url": "https://files.pythonhosted.org/packages/90/a4/9aebd86afed79c2fd27f08f5a01de38c96270501a9cc783902899a8f4a14/bytefield-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f98ed4213c9d0f01c726ba5643da42f10f39608ec467bc4c1587346a8a28776",
          "md5": "e1a0fb5aa16a178209cad2499885180b",
          "sha256": "ac2d894cd9fb3e3455d061a7e1b6cae49465b0c45824cea247e755d1f606c8f3"
        },
        "downloads": -1,
        "filename": "bytefield-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e1a0fb5aa16a178209cad2499885180b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17010,
        "upload_time": "2023-01-25T20:31:31",
        "upload_time_iso_8601": "2023-01-25T20:31:31.620819Z",
        "url": "https://files.pythonhosted.org/packages/6f/98/ed4213c9d0f01c726ba5643da42f10f39608ec467bc4c1587346a8a28776/bytefield-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11260df7b59f208d76f610589b634c2255555862d37649bb788af856360954c1",
          "md5": "ee9c00dd76834f374e5e68b48f52e536",
          "sha256": "eb5f8c8d51de54d8764041531521e072b4e6208acd3504f1f2260c0d6377599e"
        },
        "downloads": -1,
        "filename": "bytefield-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ee9c00dd76834f374e5e68b48f52e536",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17067,
        "upload_time": "2023-01-29T20:31:01",
        "upload_time_iso_8601": "2023-01-29T20:31:01.353739Z",
        "url": "https://files.pythonhosted.org/packages/11/26/0df7b59f208d76f610589b634c2255555862d37649bb788af856360954c1/bytefield-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11260df7b59f208d76f610589b634c2255555862d37649bb788af856360954c1",
        "md5": "ee9c00dd76834f374e5e68b48f52e536",
        "sha256": "eb5f8c8d51de54d8764041531521e072b4e6208acd3504f1f2260c0d6377599e"
      },
      "downloads": -1,
      "filename": "bytefield-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ee9c00dd76834f374e5e68b48f52e536",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17067,
      "upload_time": "2023-01-29T20:31:01",
      "upload_time_iso_8601": "2023-01-29T20:31:01.353739Z",
      "url": "https://files.pythonhosted.org/packages/11/26/0df7b59f208d76f610589b634c2255555862d37649bb788af856360954c1/bytefield-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}