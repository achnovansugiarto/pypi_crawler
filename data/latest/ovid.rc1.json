{
  "info": {
    "author": "Viktor Eikman",
    "author_email": "viktor.eikman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Database",
      "Topic :: Games/Entertainment :: Board Games",
      "Topic :: Games/Entertainment :: Multi-User Dungeons (MUD)",
      "Topic :: Games/Entertainment :: Role-Playing",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: Markup"
    ],
    "description": "## Ovid: tools for text metamorphosis\n\nThis Python package is a templating engine. It will remind you of other such\nengines available for Python, such as the standard library’s string.Template,\nJinja, and the Django template system.\n\nOvid works by pairing up regular expressions with functions. Both are\nneeded to create an Ovid processor. You apply the processor to a string,\nand if the regular expression matches, the function receives the content\nof the matching groups from that expression. The function’s output replaces\nthe match.\n\n### Examples\n\nHere is a trivial example:\n\n```python\nfrom ovid.basic import OneWayProcessor\n\ndef f(group):\n    return 3 * group\n\nOneWayProcessor('(b)', f).sub('abc')  # Returns 'abbbc'\n```\n\nAs you can see, the regex matches `b` and identifies it as a group, which\nOvid passes to the function we have defined. The function does not\nreceive the match object.\n\nA slightly more meaningful example follows, using a different Ovid class,\nthrough a decorator.\n\n```python\nimport random\nfrom ovid.inspecting import SignatureShorthand as SS\n\n_BARK_STATES = ('mostly stripped', 'brown', 'gray')\n\n@SS.register\ndef melee(to_hit, damage, defense=''):\n    repl = f'{to_hit or \"±0\"} to hit with {damage or \"±0\"} damage.'\n    if defense:\n        repl += f' {defense} to be hit in melee.'\n    return repl\n\n@SS.register\ndef wood():\n    return f'The bark is {random.choice(_BARK_STATES)}.'\n\nsample = 'A stick. {{wood}} {{melee||+1|defense=-1}}'\nSS.collective_sub(sample)  # Return value:\n# 'A stick. The bark is gray. ±0 to hit with +1 damage. -1 to be hit in melee.'\n```\n\nHere, the decorator adds our two functions to a registry, and the Ovid class\nconstructs our regular expressions for us, with delimiters and separators that\ncan be customized through subclassing. We apply both processors collectively,\nthrough a class method. Collective application supports recursion, nesting, and\nthe passing of additional contextual information to processors.\n\nFinally, Ovid processors can evert, outputting suitable input.\n\n```python\nfrom ovid.producing import TwoWaySignatureShorthand\n\ndef hyperlink(href, text=None):\n   return f'<a href=\"{href}\">{text or href}</a>'\n\nprocessor = TwoWaySignatureShorthand(hyperlink)\n\nprocessor.produce('https://www.fsf.org/', text='FSF')\n# Return value: '{{hyperlink|https://www.fsf.org/|text=FSF}}'\n\nprocessor.sub('{{hyperlink|https://www.python.org/psf/|text=PSF}}')\n# Return value: '<a href=\"https://www.python.org/psf/\">PSF</a>'\n```\n\nIn this example, an object built from one function can produce a template,\nand parse such a template as in the first example.\n\n### Use cases\n\nOvid grew out of [CBG](https://github.com/veikman/cbg). There, Ovid enables\nshorthand expressions in the manual text input that CBG uses to make\nplaying cards. Because Ovid processors can evert, Ovid also combines with CBG\nto generate elegant raw text specifications for larger games.\n\nA more complicated real-world use case is the maintenance of the author’s\nwebsite. Here, Ovid refines specifications as a pre-processor to Markdown.\nThis makes it easy to write a blog article that references a movie review that\nhasn’t been written yet. When the review is eventually added to the database,\nan Ovid processor finds it and adds a hyperlink to the article’s published\nform.\n\nIn the same process, the Django model instance that owns each raw string is\npassed through the Ovid layer to the encapsulated functions as contextual\ninformation, which enables these functions to map internal references in\naddition to replacing substrings.\n\n### Legal\n\nCopyright 2015–2021 Viktor Eikman\n\nOvid is licensed as detailed in the accompanying file LICENSE.\n\n# Change log\nThis log follows the conventions of\n[keepachangelog.com](http://keepachangelog.com/). It picks up from Ovid\nversion 0.5.0.\n\n## [Unreleased]\nNothing yet.\n\n## [0.6.0] - 2021-04-17\n### Removed\n- Ceased to import all modules on loading `__init__.py`, for performance.\n\n### Changed\n- Modernized use of `setuptools` (via PyPA `build`) for PyPI publication.\n    - Removed Debian system packaging shortcuts.\n- Converted unit tests to `pytest` and ceased to distribute them.\n\n### Added\n- Flake8 configuration via `pyproject.toml`, for use with `pflake8`.\n\n### Fixed\n- Linting.\n\n## [0.5.1] - 2020-10-24\n### Changed\n- Switched from `distutils.core` to `setuptools` to enable wheel distribution.\n- Changed distribution name from `Ovid` to `ovid`.\n\n[Unreleased]: https://github.com/veikman/ovid/compare/ovid-v0.6.0...HEAD\n[0.6.0]: https://github.com/veikman/ovid/compare/ovid-v0.5.1...v0.6.0\n[0.5.1]: https://github.com/veikman/ovid/compare/ovid-v0.5.0...v0.5.1\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/veikman/ovid",
    "keywords": "",
    "license": "GPL-3.0-only",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ovid",
    "package_url": "https://pypi.org/project/ovid/",
    "platform": "",
    "project_url": "https://pypi.org/project/ovid/",
    "project_urls": {
      "Homepage": "https://github.com/veikman/ovid"
    },
    "release_url": "https://pypi.org/project/ovid/0.6.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Text metamorphosis toolbox'",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10093169,
  "releases": {
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe8ec14f5b57f6b7b5adf5f4f896eef7078d46053fcde05724c855a5ab1ef4c3",
          "md5": "6c22bd9026e5601bdc36a00d0e046102",
          "sha256": "56540041859991ebe095192c1e792f611fdc25bda072efed189821c1c700752d"
        },
        "downloads": -1,
        "filename": "ovid-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c22bd9026e5601bdc36a00d0e046102",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25837,
        "upload_time": "2021-04-17T14:51:20",
        "upload_time_iso_8601": "2021-04-17T14:51:20.472513Z",
        "url": "https://files.pythonhosted.org/packages/fe/8e/c14f5b57f6b7b5adf5f4f896eef7078d46053fcde05724c855a5ab1ef4c3/ovid-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df47f7d50809fd6eb4c82cca31b0e3e24c098c613edff1a40138138c93d78c23",
          "md5": "f56d13c6f68327a5a458ddc94749a52a",
          "sha256": "e58768c0408f5fa3f06f7db1eec1a0705ef976759717705865f2c61988090835"
        },
        "downloads": -1,
        "filename": "ovid-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f56d13c6f68327a5a458ddc94749a52a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26131,
        "upload_time": "2021-04-17T14:51:21",
        "upload_time_iso_8601": "2021-04-17T14:51:21.642545Z",
        "url": "https://files.pythonhosted.org/packages/df/47/f7d50809fd6eb4c82cca31b0e3e24c098c613edff1a40138138c93d78c23/ovid-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe8ec14f5b57f6b7b5adf5f4f896eef7078d46053fcde05724c855a5ab1ef4c3",
        "md5": "6c22bd9026e5601bdc36a00d0e046102",
        "sha256": "56540041859991ebe095192c1e792f611fdc25bda072efed189821c1c700752d"
      },
      "downloads": -1,
      "filename": "ovid-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c22bd9026e5601bdc36a00d0e046102",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 25837,
      "upload_time": "2021-04-17T14:51:20",
      "upload_time_iso_8601": "2021-04-17T14:51:20.472513Z",
      "url": "https://files.pythonhosted.org/packages/fe/8e/c14f5b57f6b7b5adf5f4f896eef7078d46053fcde05724c855a5ab1ef4c3/ovid-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df47f7d50809fd6eb4c82cca31b0e3e24c098c613edff1a40138138c93d78c23",
        "md5": "f56d13c6f68327a5a458ddc94749a52a",
        "sha256": "e58768c0408f5fa3f06f7db1eec1a0705ef976759717705865f2c61988090835"
      },
      "downloads": -1,
      "filename": "ovid-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f56d13c6f68327a5a458ddc94749a52a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26131,
      "upload_time": "2021-04-17T14:51:21",
      "upload_time_iso_8601": "2021-04-17T14:51:21.642545Z",
      "url": "https://files.pythonhosted.org/packages/df/47/f7d50809fd6eb4c82cca31b0e3e24c098c613edff1a40138138c93d78c23/ovid-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}