{
  "info": {
    "author": "louis.li",
    "author_email": "louis.li@pilotgaea.com.tw",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "# PilotGaea O'View Map Server API for Python\n\n使用 PilotGaea O'View Map Server API for Python 在 Python 中處理O'View Map Server發布的地圖和地理空間數據。  \n這個library可讀取、編輯、分析、上架由O'View Map Server發布之地圖圖像與向量資料，並可透過API操作輸出及發佈處理後的成果。  \n此library只支援由 O'View Map Server 發佈的圖資，暫不支援外部資料處理。\n\n## 安裝PliotGaea Python Module\n\n```shell\npip install OViewPy\n```\n\n## 安裝Server端Plugin\n\n由於需要透過O'View Map Server 取得圖資，所以需要先安裝相關的Plugin。  \n相關的Plugin放置於安裝目錄下的Python資料夾下(`C:\\Program Files\\PilotGaea\\TileMap\\Python`)。  \n請將資料夾內的dll檔複製進安裝目錄下的plugins資料夾內(`C:\\Program Files\\PilotGaea\\TileMap\\plugins`)，並重新啟動Server即可完成安裝。\n\n## 初始化Server物件\n\n本章節為PliotGaea Python Module的起始點，在執行所有操作前須先初始化Server物件，提供Module取得Map Server資源的相關連線資訊。\n\n```python\nfrom OViewPy.server import Server\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n```\n\n綁定Server物件後，即可取得Server相關資訊。\n\n```python\nfrom OViewPy.server import Server\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 取得目前Server版本\nprint(\"OView Map Server Version：\",server.version)\n# 取得WMTS URL\nprint(\"WMTS URL：\",server.wmtsURL)\n# 取得WMS URL\nprint(\"WMS URL：\",server.wmsURL)\n# 取得DoCommand URL\nprint(\"DoCommand URL：\",server.docmdURL)\n```\n\n### 取得圖層列表\n\n綁定Server物件後，可透過`getLayerList`取得2D圖層列表詳細資訊。  \n亦可使用`getOViewLayerList`取得3D圖層列表詳細資訊。\n\n```python\nfrom OViewPy.server import Server\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\nlayerList = server.getLayerList()\nOViewLayerList = server.getOViewLayerList()\nfor list in layerList:\n    print(\"圖層名稱：\",list[\"layername\"],\"圖層類別：\",list[\"type\"])\nprint(\"===========================================\")\nfor list in OViewLayerList:\n    print(\"圖層名稱：\",list[\"layername\"],\"圖層類別：\",list[\"type\"])\n\n```\n\n### 刪除圖層\n\n如果想要刪除Server中已存在的圖層，可透過`deleteLayer`與`deleteOViewLayer`分別刪除2D及3D圖層。\n> 注意！此刪除無法復原，請警慎使用。\n\n```python\nfrom OViewPy.server import Server\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\nserver.deleteLayer(layerName=\"ne_10m_lakes\")\nserver.deleteOViewLayer(layerName=\"ModelSet\")\n```\n\n### 上架圖層\n\n#### 將圖片上架至伺服器\n\n透過`saveImageToServer`可將圖片(JPG、PNG等)上架至Server\n\n> 需特別注意，上架的圖片需在Server端目錄底下，並有相對應的World File，且確認圖層名稱不是已存在的圖層。\n\n| 參數名稱 | Type | 預設值 | 說明 |\n| :-----: | :---: | :---: | :--: |\n| imageFilePath | string | None | 圖片檔案位置 |\n| layerName | string | None | 上架後的圖層名稱 |\n| epsg | int | 4326 | 座標參考系統 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.layer import VectorLayer\nfrom OViewPy.varstruct import GeoBoundary\nfrom OViewPy.da import da\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 綁定Layer物件\nlayer = VectorLayer(server=server,layerName=\"Town_MOI\")\nboundary=GeoBoundary(147522.218692, 2422004.773002,\n                         351690.114369, 2813163.248085)\n# 取得圖片，取得成功會回傳圖片bytes資料\nimg = layer.getMapImage(\n    boundary=boundary,\n    crs=\"EPSG:3826\",\n    width=512,\n    height=512,\n    format=\"image/png\"\n)\n# 儲存圖片，並生成World File\nda.saveImg(\n    img=img,\n    savePath=\".\",\n    imgName=\"testImage\",\n    imgType=\"png\",\n    worldFile=True,\n    boundary=boundary\n)\n# 將圖片上架至Server\nserver.saveImageToServer(\n    imageFilePath=\"D:\\\\NCHCProject\\\\jupyter_notebook\\\\testImage.png\",\n    layerName=\"testImage\",\n    epsg=3826\n)\n```\n\n#### 將SHP File上架至伺服器\n\n透過`saveVectorFileToServer`可將Shp File上架至Server\n\n> 需特別注意，上架的Shp File需在Server端目錄底下，並確認圖層名稱不是已存在的圖層。\n\n| 參數名稱 | Type | 預設值 | 說明 |\n| :-----: | :---: | :---: | :--: |\n| VectorFilePath | string | None | Shp File位置 |\n| layerName | string | None | 上架後的圖層名稱 |\n| epsg | int | 4326 | 座標參考系統 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.layer import VectorLayer\nfrom OViewPy.varstruct import GeoBoundary\nfrom OViewPy.da import da\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 綁定Layer物件\nmap = VectorLayer(server=server, layerName=\"Town_MOI\")\n# 設定搜尋條件\nsql = \"County_ID==64\"\n# 取得向量資料\nret = map.getVectorEntity(epsg=3826,sql=sql)\n# 將向量資料存成SHP檔\nda.saveAsShapeFile(sourceGeo=ret[\"geo\"],sourceAttr=ret[\"attr\"],fileName=\"TestShp_Kh\")\n# 將SHP檔上架至伺服器\nserver.saveVectorFileToServer(VectorFilePath=\"D:\\\\NCHCProject\\\\jupyter_notebook\\\\TestShp_Kh.shp\",layerName=\"TestShp_Kh\",epsg=3826)\n```\n\n#### 將tif檔轉成dem檔，並將dem檔上架伺服器為地形圖層\n\n於3d的轉檔需要較久的時間，因此轉檔的函式會回傳一個id(如: `server.tifToDem`)  \n可以透過此id，去跟server詢問進度  \n當轉檔成功可以透過`server.save3dToServer`將此圖層上架至伺服器  \n`server.save3dToServer`可以透過id或是DB位置將其上架至伺服器\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.varstruct import GeoBoundary\nfrom OViewPy.varstruct import LAYER_TYPE\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# tif檔轉成dem檔\nid = server.tifToDem(inputTifFile=\"defaultTIF.tif\", outputDemFile=\"defaultDEM2.dem\")\n# 回傳轉檔進度直到轉檔完成\nserver.getConvert3dProgressToFinish(id)\n# dem檔轉成地形圖層\nid = server.convertTerrain(\"testDem\", \"testDem.DB\", \"./defaultDEM2.dem\", \"4326\")\n# 將此地形圖層上架至伺服器\nserver.save3dToServer(dbLayerName=\"testDem\", layerName=\"testDem\", layerType=LAYER_TYPE.OV_TERRAIN.name, dbUrl=\"./testDem.DB\")\n```\n\n#### 將傾斜攝影上架至伺服器\n\n透過綁定的server物件，並提供欲設定的圖層名稱(`layerName`)及輸出格式(`exportType`)，將傾斜攝影轉檔並上架至伺服器  \n由於3d的轉檔需要較久的時間，因此轉檔的函式會回傳一個id(如: `server.convertPhotogrammetry`)  \n可以透過此id，去跟server詢問進度  \n當轉檔成功透過`server.save3dToServer`依DB位置將圖層上架至伺服器(若輸出檔案格式為3DTILES則不上架)  \n| 參數名稱 | Type | 預設值 | 可輸入值 | 說明 |\n| :-----: | :---: | :---: | :---: | :--: |\n| layerName | string | None | --- | 上架後的圖層名稱 |\n| layerDBFile | string | 預設名稱與layerName相同 | --- | 轉檔後產生的DB檔名稱 |\n| inputFileName | string | None | --- | 欲轉檔檔案位置 |\n| terrainDBFile | string | None | --- | 初始地形圖層位置 |\n| terrainName | string | None | --- | 初始地形圖層名稱 |\n| exportType | string | None | NORMAL、I3S、3DTILES | 輸出檔案格式 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.varstruct import LAYER_TYPE\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 設定layer名稱\nlayerName = \"photogrammetry\"\n# 設定exportType(可輸入'NORMAL' or 'I3S' or '3DTILES')\nexportType = \"NORMAL\"\n# 轉檔傾斜攝影圖層，並會生成其對應之DB\nid = server.convertPhotogrammetry(layerName=layerName,\n                                  layerDBFile=layerName + \".DB\",\n                                  inputFileName=\"C:\\\\Users\\\\vaness.chen\\\\Desktop\\\\3DTEST\\\\基本圖資\\\\模型\\\\一門三節坊\\\\Acute3D\\\\一門三節坊\\\\Data\\\\LODTreeExport.xml\", \n                                  terrainDBFile=\"C:\\\\Users\\\\vaness.chen\\\\Desktop\\\\3DTEST\\\\基本圖資\\\\高程\\\\Terrain20M.DB\", \n                                  terrainName=\"terrain\",\n                                  exportType=exportType)\n# 回傳轉檔進度直到轉檔完成\nserver.getConvert3dProgressToFinish(id)\n\n# 將此圖層上架至伺服器\nif exportType.upper() == \"NORMAL\":\n    server.save3dToServer(dbLayerName=layerName, layerName=layerName, layerType=LAYER_TYPE.OV_PHOTOGRAMMETRYMODEL.name, dbUrl = layerName + \".DB\")\nelif exportType.upper() == \"I3S\":\n    server.save3dToServer(dbLayerName=layerName, layerName=layerName, layerType=LAYER_TYPE.OV_OGCI3S.name, dbUrl = layerName + \".DB\")\n```\n\n#### 將管線圖層轉檔並上架至伺服器\n\n透過綁定的server物件，並提供欲設定的圖層名稱(`layerName`)、檔案格式(`mlayerType`)及輸出格式(`exportType`)，將管線圖層轉檔並上架至伺服器  \n由於3d的轉檔需要較久的時間，因此轉檔的函式會回傳一個id(如: `server.convertPipeline`)  \n可以透過此id，去跟server詢問進度  \n當轉檔成功透過`server.save3dToServer`依DB位置將圖層上架至伺服器(若輸出檔案格式為3DTILES則不上架)  \n| 參數名稱 | Type | 預設值 | 可輸入值 | 說明 |\n| :-----: | :---: | :---: | :---: | :--: |\n| layerName | string | None | --- | 上架後的圖層名稱 |\n| terrainName | string | None | --- | 初始地形圖層名稱 |\n| terrainDBFile | string | None | --- | 初始地形圖層位置 |\n| sourceFile | string | None | --- | 欲轉檔檔案位置 |\n| epsg | int | None | --- | 座標參考系統 |\n| mlayerType | string | None | PIPELINE、MANHOLE、EQUIPMENT | 欲轉檔檔案格式 |\n| exportType | string | None | NORMAL、I3S、3DTILES | 輸出檔案格式 |\n| layerDBFile | string | 預設名稱與layerName相同 | --- | 轉檔後產生的DB檔名稱 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.varstruct import LAYER_TYPE\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 設定layer名稱\nlayerName = \"EQUIPMENTTry\"\n# 設定mlayerType(可輸入'PIPELINE' or 'MANHOLE' or 'EQUIPMENT')\nmlayerType = \"EQUIPMENT\"\n# 設定exportType(可輸入'NORMAL' or 'I3S' or '3DTILES')\nexportType = \"NORMAL\"\n# 轉檔管線、人手孔及設備圖層，並會生成其對應之DB\nid = server.convertPipeline(layerName=layerName,\n                            terrainName=\"terrain\",\n                            terrainDBFile=\"C:\\\\Users\\\\vaness.chen\\\\Desktop\\\\3DTEST\\\\基本圖資\\\\高程\\\\Terrain20M.DB\", \n                            sourceFile=\"C:\\\\Users\\\\vaness.chen\\\\Downloads\\\\台中全區SHP_T\\\\台中全區SHP_T1\\\\一般供電_設備.shp\",\n                            epsg=\"3826\",\n                            mlayerType=mlayerType,\n                            exportType=exportType,\n                            layerDBFile=layerName + \".DB\",\n                            )\n# 回傳轉檔進度直到轉檔完成\nserver.getConvert3dProgressToFinish(id)\n# 將此圖層上架至伺服器\nif exportType.upper() == \"NORMAL\":\n    server.save3dToServer(dbLayerName=layerName, layerName=layerName, layerType=LAYER_TYPE.OV_PIPELINE.name, dbUrl = layerName + \".DB\")\nelif exportType.upper() == \"I3S\":\n    server.save3dToServer(dbLayerName=layerName, layerName=layerName, layerType=LAYER_TYPE.OV_OGCI3S.name, dbUrl = layerName + \".DB\")\n```\n\n#### 將點雲圖層轉檔並上架至伺服器\n\n透過綁定的server物件，並提供欲設定的圖層名稱(`layerName`)及輸出格式(`exportType`)，將點雲圖層轉檔並上架至伺服器  \n由於3d的轉檔需要較久的時間，因此轉檔的函式會回傳一個id(如: `server.convertPointcloud`)  \n可以透過此id，去跟server詢問進度  \n當轉檔成功透過`server.save3dToServer`依DB位置將圖層上架至伺服器(若輸出檔案格式為3DTILES則不上架)  \n| 參數名稱 | Type | 預設值 | 可輸入值 | 說明 |\n| :-----: | :---: | :---: | :---: | :--: |\n| layerName | string | None | --- | 上架後的圖層名稱 |\n| layerDBFile | string | 預設名稱與layerName相同 | --- | 轉檔後產生的DB檔名稱 |\n| pointcloudFileNames | string | None | --- | 欲轉檔檔案位置 |\n| terrainName | string | None | --- | 初始地形圖層名稱 |\n| terrainDBFile | string | None | --- | 初始地形圖層位置 |\n| sourceEPSG | int | None | --- | 座標參考系統 |\n| exportType | string | None | NORMAL、I3S、3DTILES | 輸出檔案格式 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.varstruct import LAYER_TYPE\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 設定layer名稱\nlayerName = \"PointcloudTry\"\n# 設定exportType(可輸入'NORMAL' or 'I3S' or '3DTILES')\nexportType = \"NORMAL\"\n# 轉檔管線圖層，並會生成其對應之DB\nid = server.convertPointcloud(layerName=layerName,\n                              layerDBFile=layerName + \".DB\",\n                              pointcloudFileNames=\"C:\\\\Users\\\\vaness.chen\\\\Downloads\\\\點雲圖層\\\\點雲圖層\\\\field-1.las\",\n                              terrainName=\"terrain\",\n                              terrainDBFile=\"C:\\\\Users\\\\vaness.chen\\\\Desktop\\\\3DTEST\\\\基本圖資\\\\高程\\\\Terrain20M.DB\",\n                              sourceEPSG=\"3826\",\n                              exportType=exportType\n                             )\n# 回傳轉檔進度直到轉檔完成\nserver.getConvert3dProgressToFinish(id)\n# 將此圖層上架至伺服器\nif exportType.upper() == \"NORMAL\":\n    server.save3dToServer(dbLayerName=layerName, layerName=layerName, layerType=LAYER_TYPE.OV_POINTCLOUD.name, dbUrl = layerName + \".DB\")\nelif exportType.upper() == \"I3S\":\n    server.save3dToServer(dbLayerName=layerName, layerName=layerName, layerType=LAYER_TYPE.OV_OGCI3S.name, dbUrl = layerName + \".DB\")\n```\n\n#### 將shp檔轉成ModelSet並上架至伺服器\n\n透過綁定的server物件，並提供欲設定的圖層名稱(`layerName`)及輸出格式(`exportType`)，將shp檔轉檔模型集並上架至伺服器  \n由於3d的轉檔需要較久的時間，因此轉檔的函式會回傳一個id(如: `server.shpToModelSet`)  \n可以透過此id，去跟server詢問進度  \n當轉檔成功透過`server.save3dToServer`依DB位置將圖層上架至伺服器(若輸出檔案格式為3DTILES則不上架)  \n| 參數名稱 | Type | 預設值 | 可輸入值 | 說明 |\n| :-----: | :---: | :---: | :---: | :--: |\n| layerName | string | None | --- | 上架後的圖層名稱 |\n| layerDBFile | string | 預設名稱與layerName相同 | --- | 轉檔後產生的DB檔名稱 |\n| terrainName | string | None | --- | 初始地形圖層名稱 |\n| terrainDBFile | string | None | --- | 初始地形圖層位置 |\n| sourceFileName | string | None | --- | 欲轉檔檔案位置 |\n| heightField | string | None | --- | 屋頂高欄位的名稱 |\n| epsg | int | None | --- | 座標參考系統 |\n| exportType | string | None | NORMAL、I3S、3DTILES | 輸出檔案格式 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.varstruct import LAYER_TYPE\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 設定layer名稱\nlayerName = \"shpModelSetTry\"\n# 設定exportType(可輸入'NORMAL' or 'I3S' or '3DTILES')\nexportType = \"NORMAL\"\n# 轉檔管線圖層，並會生成其對應之DB\nid = server.shpToModelSet(layerName=layerName,\n                          layerDBFile=layerName + \".DB\",\n                          terrainName=\"terrain\",\n                          terrainDBFile=\"C:\\\\Users\\\\vaness.chen\\\\Desktop\\\\3DTEST\\\\基本圖資\\\\高程\\\\Terrain20M.DB\",\n                          sourceFileName=\"C:\\\\Users\\\\vaness.chen\\\\Desktop\\\\3DTEST\\\\基本圖資\\\\模型\\\\modelset練習用\\\\TaipeiBuilding2.shp\",\n                          heightField=\"屋頂高程\",\n                          epsg=4326,\n                          exportType=exportType)\n# 回傳轉檔進度直到轉檔完成\nserver.getConvert3dProgressToFinish(id)\n# 將此圖層上架至伺服器\nif exportType.upper() == \"NORMAL\":\n    server.save3dToServer(dbLayerName=layerName, layerName=layerName, layerType=LAYER_TYPE.OV_MODELSET.name, dbUrl = layerName + \".DB\")\nelif exportType.upper() == \"I3S\":\n    server.save3dToServer(dbLayerName=layerName, layerName=layerName, layerType=LAYER_TYPE.OV_OGCI3S.name, dbUrl = layerName + \".DB\")\n```\n\n#### 將huge檔轉成Model並上架至伺服器\n\n透過綁定的server物件，並提供欲設定的圖層名稱(`layerName`)及輸出格式(`exportType`)，將huge檔轉檔模型並上架至伺服器  \n由於3d的轉檔需要較久的時間，因此轉檔的函式會回傳一個id(如: `server.hugeModelToModelLayer`)  \n可以透過此id，去跟server詢問進度  \n當轉檔成功透過`server.save3dToServer`依DB位置將圖層上架至伺服器(若輸出檔案格式為3DTILES則不上架)  \n| 參數名稱 | Type | 預設值 | 可輸入值 | 說明 |\n| :-----: | :---: | :---: | :---: | :--: |\n| dbPath | string | 預設名稱與layerName相同 | --- | 轉檔後產生的DB檔名稱 |\n| layerName | string | None | --- | 上架後的圖層名稱 |\n| terrainDBFile | string | None | --- | 初始地形圖層位置 |\n| terrainName | string | None | --- | 初始地形圖層名稱 |\n| sourceFileName | string | None | --- | 欲轉檔檔案位置 |\n| exportType | string | None | NORMAL、I3S、3DTILES | 輸出檔案格式 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.varstruct import LAYER_TYPE\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 設定layer名稱\nlayerName = \"hugeModelTry\"\n# 設定exportType(可輸入'NORMAL' or 'I3S' or '3DTILES')\nexportType = \"NORMAL\"\n# 轉檔HugeModel圖層，並會生成其對應之DB\nid = server.hugeModelToModelLayer(dbPath=layerName + \".DB\",\n                                  layerName=layerName,\n                                  terrainDBFile=\"C:\\\\Users\\\\vaness.chen\\\\Desktop\\\\3DTEST\\\\基本圖資\\\\高程\\\\Terrain20M.DB\",\n                                  terrainName=\"terrain\",\n                                  sourceFileName=\"C:\\\\Users\\\\vaness.chen\\\\Desktop\\\\3DTEST\\\\基本圖資\\\\模型\\\\HugeModel練習用\\\\-Z_Y.obj\",\n                                  exportType=exportType\n                                 )\n# 回傳轉檔進度直到轉檔完成\nserver.getConvert3dProgressToFinish(id)\n# 將此圖層上架至伺服器\nif exportType.upper() == \"NORMAL\":\n    server.save3dToServer(dbLayerName=layerName, layerName=layerName, layerType=LAYER_TYPE.OV_MODEL.name, dbUrl = layerName + \".DB\")\nelif exportType.upper() == \"I3S\":\n    server.save3dToServer(dbLayerName=layerName, layerName=layerName, layerType=LAYER_TYPE.OV_OGCI3S.name, dbUrl = layerName + \".DB\")\n```\n\n## Layer Module (2D Layer)\n\n### 取得圖層物件\n\n此Module分為`RasterLayer`與`VectorLayer`兩種圖層，在初始化圖層時請選擇正確的圖層分類。  \n第一個參數(`server`)放置已綁定的Server物件，第二個參數(`layerName`)放置要取得的圖層名稱。  \n取得圖層物件後，即可透過``getLayerInfo``取得圖層相關資訊。\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.layer import RasterLayer,VectorLayer\n\nserver = Server(url=\"http://127.0.0.1:8080\")\nraster = RasterLayer(server=server,layerName=\"GlobalPreview_Rough\")\nvector = VectorLayer(server=server,layerName=\"Town_MOI\")\nprint(raster.layerInfo)\nprint(vector.layerInfo)\n```\n\n透過``getMapImage``可取得給定範圍內的地圖圖片，此Function的參數如下：\n\n> 此Function適用於`RasterLayer`與`VectorLayer`。\n\n| 參數名稱 | Type | 預設值 | 說明 |\n| :-----: | :---: | :---: | :--: |\n| boundary | GeoBoundary | None | 欲取得圖片範圍。如未給值，將直接取得完整圖片。 |\n| width | int | 512 | 圖片寬度 |\n| height | int | 512 | 圖片高度 |\n| crs | string | EPSG:4326 | 座標參考系統 |\n| format | string | image/png | 圖片格式 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.layer import VectorLayer\nfrom OViewPy.varstruct import GeoBoundary\nfrom OViewPy.da import da\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 綁定Layer物件\nlayer = VectorLayer(server=server,layerName=\"Town_MOI\")\n# 取得圖片，取得成功會回傳圖片bytes資料\nimg = layer.getMapImage(\n    boundary=GeoBoundary(147522.218692, 2422004.773002,\n                         351690.114369, 2813163.248085),\n    crs=\"EPSG:3826\",\n    width=512,\n    height=512,\n    format=\"image/png\"\n)\n# 顯示圖片\nda.showImg(img)\n```\n\n如果圖層物件為`VectorLayer`，可透過`getVectorEntity`取得一定範圍內的向量資料。  \n此Function的參數如下：\n\n| 參數名稱 | Type | 預設值 | 說明 |\n| :-----: | :---: | :---: | :--: |\n| bound | GeoBoundary/GeoPolygon | None | 欲取得向量資料範圍。如未給值，將直接取得完整圖層向量資料。 |\n| epsg | int | 4326 | 座標參考系統 |\n| sql | string | \"\" | 搜尋條件 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.layer import VectorLayer\nfrom OViewPy.varstruct import GeoBoundary\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 綁定Layer物件\nmap = VectorLayer(server=server, layerName=\"Town_MOI\")\n# 設定搜尋條件\nsql = \"County_ID=64\"\n# 取得向量資料\nret = map.getVectorEntity(epsg=3826,sql=sql)\nprint(\"Geo：\", ret[\"geo\"][0].ToDict())\nprint(\"Attr：\", ret[\"attr\"][0].ToDict())\n```\n\n## OViewLayer Module\n\n此Module分為`TerrainLayer`、`PipeLineLayer`、`ModelLayer`、`ModelSetLayer`等4種3D模型圖層。  \n第一個參數(`server`)放置已綁定的Server物件，第二個參數(`layerName`)放置要取得的圖層名稱。  \n取得圖層物件後，即可透過``getLayerInfo``取得圖層相關資訊。\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.oviewlayer import TerrainLayer, PipeLineLayer, ModelLayer, ModelSetLayer\n\nserver = Server(url=\"http://127.0.0.1:8080\")\nTerrain = TerrainLayer(server=server, layerName=\"gebco_2021_geotiff_retransfer\")\nPipeLine = PipeLineLayer(server=server, layerName=\"TaichungPipeline\")\nModel = ModelLayer(server=server, layerName=\"ChungHsingBIM\")\nModelSet = ModelSetLayer(server=server, layerName=\"TaichungKMZ\")\nprint(Terrain.layerInfo)\nprint(PipeLine.layerInfo)\nprint(Model.layerInfo)\nprint(ModelSet.layerInfo)\n```\n\n### TerrainLayer\n\n#### getDEMMatrix\n\n`TerrainLayer`可透過`getDEMMatrix`取得地形網格資料，此Function的參數如下：\n| 參數名稱 | Type | 預設值 | 說明 |\n| :-----: | :---: | :---: | :--: |\n| boundary | GeoBoundary | None | 欲取得地形網格範圍。 |\n| cellDemSize | int | 500 | 地形網格數，將取得n*n個網格資料。 |\n| epsg | int | 4326 | boundary EPSG |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.oviewlayer import TerrainLayer\nfrom OViewPy.varstruct import GeoBoundary\n\nserver = Server(url=\"http://127.0.0.1:8080\")\nTerrain = TerrainLayer(\n    server=server, layerName=\"gebco_2021_geotiff_retransfer\")\nboundary = GeoBoundary(119.981273, 21.892673,\n                       122.010898, 25.424327)\nmatrix = Terrain.getDEMMatrix(boundary=boundary, cellDemSize=500, epsg=4326)\nprint(type(matrix))\n```\n\n#### hillshadeAnalysis\n\n取得山體陰影分析，分析結果將存為GeoTiff，此Function的參數如下：\n| 參數名稱 | Type | 預設值 | 說明 |\n| :-----: | :---: | :---: | :--: |\n| boundary | GeoBoundary | None | 欲取得地形網格範圍。 |\n| cellDemSize | int | 500 | 地形網格數，將取得n*n個網格資料。 |\n| epsg | int | 4326 | boundary EPSG |\n| azimuth | int | 30 | 太陽方位角 |\n| altitude | int | 30 | 太陽高度角 |\n| savePath | string | \".\" | 檔案儲存位置 |\n| fileName | string | \"defaultDEM\" | 檔案名稱 |\n| width | int | 21600 | 圖片寬 |\n| height | int | 21600 | 圖片高 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.oviewlayer import TerrainLayer\nfrom OViewPy.varstruct import GeoBoundary\n\nserver = Server(url=\"http://127.0.0.1:8080\")\nTerrain = TerrainLayer(\n    server=server, layerName=\"gebco_2021_geotiff_retransfer\")\nboundary = GeoBoundary(119.981273, 21.892673,\n                       122.010898, 25.424327)\nTerrain.hillshadeAnalysis(boundary=boundary, cellDemSize=500, epsg=4326,\n                          azimuth=150, altitude=60,\n                          savePath=\".\", fileName=\"defaultHillShade\", width=10800, height=21600)\n\n```\n\n#### slopeAnalysis\n\n取得坡度分析，分析結果將存為GeoTiff，此Function的參數如下：\n| 參數名稱 | Type | 預設值 | 說明 |\n| :-----: | :---: | :---: | :--: |\n| boundary | GeoBoundary | None | 欲取得地形網格範圍。 |\n| cellDemSize | int | 500 | 地形網格數，將取得n*n個網格資料。 |\n| epsg | int | 4326 | boundary EPSG |\n| savePath | string | \".\" | 檔案儲存位置 |\n| fileName | string | \"defaultDEM\" | 檔案名稱 |\n| width | int | 21600 | 圖片寬 |\n| height | int | 21600 | 圖片高 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.oviewlayer import TerrainLayer\nfrom OViewPy.varstruct import GeoBoundary\n\nserver = Server(url=\"http://127.0.0.1:8080\")\nTerrain = TerrainLayer(\n    server=server, layerName=\"gebco_2021_geotiff_retransfer\")\nboundary = GeoBoundary(119.981273, 21.892673,\n                       122.010898, 25.424327)\nTerrain.slopeAnalysis(boundary=boundary, cellDemSize=500, epsg=4326,\n                      savePath=\".\", fileName=\"defaultSlope\", width=10800, height=21600)\n\n```\n\n#### aspectAnalysis\n\n取得坡向分析，分析結果將存為GeoTiff，此Function的參數如下：\n| 參數名稱 | Type | 預設值 | 說明 |\n| :-----: | :---: | :---: | :--: |\n| boundary | GeoBoundary | None | 欲取得地形網格範圍。 |\n| cellDemSize | int | 500 | 地形網格數，將取得n*n個網格資料。 |\n| epsg | int | 4326 | boundary EPSG |\n| savePath | string | \".\" | 檔案儲存位置 |\n| fileName | string | \"defaultDEM\" | 檔案名稱 |\n| width | int | 21600 | 圖片寬 |\n| height | int | 21600 | 圖片高 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.oviewlayer import TerrainLayer\nfrom OViewPy.varstruct import GeoBoundary\n\nserver = Server(url=\"http://127.0.0.1:8080\")\nTerrain = TerrainLayer(\n    server=server, layerName=\"gebco_2021_geotiff_retransfer\")\nboundary = GeoBoundary(119.981273, 21.892673,\n                       122.010898, 25.424327)\nTerrain.aspectAnalysis(boundary=boundary, cellDemSize=500, epsg=4326,\n                      savePath=\".\", fileName=\"defaultAspect\", width=10800, height=21600)\n\n```\n\n#### contourLineAnalysis\n\n取得等高線分析，分析結果將存為png/GeoJson，此Function的參數如下：\n| 參數名稱 | Type | 預設值 | 說明 |\n| :-----: | :---: | :---: | :--: |\n| boundary | GeoBoundary | None | 欲取得地形網格範圍。 |\n| cellDemSize | int | 500 | 地形網格數，將取得n*n個網格資料。 |\n| epsg | int | 4326 | boundary EPSG |\n| savePath | string | \".\" | 檔案儲存位置 |\n| fileName | string | \"defaultDEM\" | 檔案名稱 |\n| fileType | string | \"image\" | 儲存類型，\"image\" / \"geojson\" |\n| width | int | 21600 | 圖片寬 |\n| height | int | 21600 | 圖片高 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.oviewlayer import TerrainLayer\nfrom OViewPy.varstruct import GeoBoundary\n\nserver = Server(url=\"http://127.0.0.1:8080\")\nTerrain = TerrainLayer(\n    server=server, layerName=\"gebco_2021_geotiff_retransfer\")\nboundary = GeoBoundary(119.981273, 21.892673,\n                       122.010898, 25.424327)\nTerrain.contourLineAnalysis(boundary=boundary, cellDemSize=500, epsg=4326,fileType=\"image\",\n                      savePath=\".\", fileName=\"defaultContourLine\", width=10800, height=21600)\nTerrain.contourLineAnalysis(boundary=boundary, cellDemSize=500, epsg=4326,fileType=\"geojson\",\n                      savePath=\".\", fileName=\"defaultContourLine\")\n```\n\n### OViewEntityLayer\n\n除了`TerrainLayer`外，其餘三種圖層皆屬於`OViewEntityLayer`，可透過`getVectorEntity`取得圖層Entity。\n此Function參數如下：\n\n| 參數名稱 | Type | 預設值 | 說明 |\n| :-----: | :---: | :---: | :--: |\n| bound | GeoBoundary/GeoPolygon | None | 欲取得向量資料範圍。如未給值，將直接取得完整圖層向量資料。 |\n| epsg | int | 4326 | 座標參考系統 |\n| sql | string | \"\" | 搜尋條件 |\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.oviewlayer import PipeLineLayer, ModelLayer, ModelSetLayer\n\nserver = Server(url=\"http://127.0.0.1:8080\")\nPipeLine = PipeLineLayer(server=server, layerName=\"TaichungPipeline\")\n# Model = ModelLayer(server=server, layerName=\"ChungHsingBIM\")\n# ModelSet = ModelSetLayer(server=server, layerName=\"TaichungKMZ\")\nret = PipeLine.getVectorEntity()\nprint(\"Geo：\", ret[\"geo\"][0].ToDict())\nprint(\"Attr：\", ret[\"attr\"][0].ToDict())\n```\n\n## Data Access Module\n\n### 使用資料處理模組\n\n此模組可將取得的資料轉換成Python常用的Numpy、Shapely等資料格式，以供開發者方便計算。\n\n#### 圖片(Bytes)與Numpy Array轉換\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.layer import VectorLayer\nfrom OViewPy.varstruct import GeoBoundary\nfrom OViewPy.da import da\nimport cv2\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 綁定Layer物件\nlayer = VectorLayer(server=server,layerName=\"Town_MOI\")\n# 取得圖片，取得成功會回傳圖片bytes資料\nimg = layer.getMapImage(\n    boundary=GeoBoundary(147522.218692, 2422004.773002,\n                         351690.114369, 2813163.248085),\n    crs=\"EPSG:3826\",\n    width=512,\n    height=512,\n    format=\"image/png\"\n)\n# 將圖片轉換成Numpy Array\nnpArray = da.imgToNumPyArray(img)\n# 透過cv2讀取Numpy Array\nimage = cv2.imdecode(npArray, cv2.IMREAD_UNCHANGED)\n# 處理成高斯模糊\nblurred = cv2.GaussianBlur(image, (51, 51), 0)\n# 將處理後的圖片轉成jpg編碼\nblurred = cv2.imencode('.jpg',blurred)[1]\n# 將Numpy Array 轉回 Bytes格式\nblurred = da.numPyArrayToImg(blurred)\n# 顯示圖片\nda.showImg(blurred)\n# 儲存圖片\nda.saveImg(img=blurred, savePath=\".\", imgName=\"高斯模糊\", imgType=\"jpg\")\n```\n\n#### 向量格式轉換成Numpy Array\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.layer import VectorLayer\nfrom OViewPy.varstruct import GeoBoundary\nfrom OViewPy.da import da\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 綁定Layer物件\nmap = VectorLayer(server=server, layerName=\"Town_MOI\")\n# 設定範圍\ngeo = GeoBoundary(147522.218692, 2422004.773002,\n                  351690.114369, 2813163.248085)\n# 取得向量資料\nret = map.getVectorEntity(bound=geo,epsg=3826)\n# 將向量資料轉換成Numpy\nnpRet = da.vectorEntityToNumPyArray(ret[\"geo\"])\n# 顯示資料類型\nprint(type(npRet[0]))\n```\n\n#### 向量格式轉換成Shapely\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.layer import VectorLayer\nfrom OViewPy.varstruct import GeoBoundary\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 綁定Layer物件\nmap = VectorLayer(server=server,layerName=\"Town_MOI\")\n# 設定範圍\ngeo = GeoBoundary(147522.218692, 2422004.773002,\n                  351690.114369, 2813163.248085)\n# 取得向量資料\nret = map.getVectorEntity(bound=geo)\n# 將向量資料轉換成Numpy\nshpRet = da.vectorEntityToShapely(ret[\"geo\"])\n# 顯示資料類型\nprint(type(shpRet[0]))\n```\n\n#### 向量格式轉換成TIF\n\n```python\nfrom OViewPy.server import Server\nfrom OViewPy.oviewlayer import TerrainLayer\nfrom OViewPy.varstruct import GeoBoundary\nfrom OViewPy.da import da\n\n# 綁定Server物件\nserver = Server(url=\"http://127.0.0.1:8080\")\n# 綁定Layer物件\nTerrain = TerrainLayer(server=server, layerName=\"terrain\")\n# 設定範圍\nboundary = GeoBoundary(119.981273, 21.892673,\n                       122.010898, 25.424327)\n# 取得向量資料\nmatrix = Terrain.getDEMMatrix(boundary=boundary, cellDemSize=400, epsg=4326)\n# numpyArray輸出成tif檔\nda.numPyArrayToTIF(matrix, boundary=boundary, width=1500, height=1500)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PilotGaea/OViewPy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "OViewPy",
    "package_url": "https://pypi.org/project/OViewPy/",
    "platform": null,
    "project_url": "https://pypi.org/project/OViewPy/",
    "project_urls": {
      "Homepage": "https://github.com/PilotGaea/OViewPy"
    },
    "release_url": "https://pypi.org/project/OViewPy/1.2.1/",
    "requires_dist": [
      "requests",
      "numpy",
      "opencv-python",
      "progress",
      "shapely",
      "PyShp",
      "rasterio",
      "matplotlib",
      "sridentify",
      "geojsoncontour"
    ],
    "requires_python": ">=3.6",
    "summary": "PilotGaea O'View Map Server API for Python",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16255738,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f04d9d94a99de8f45b0f62e067baea2aa207cdbdb5c4367860e3e1ef67d01596",
          "md5": "1865ee6acc0d397969a6f2d1261b3da0",
          "sha256": "51e2ba475ee95d2e21f4369004d38833563f607fc4882ed4378ef442468d1a8d"
        },
        "downloads": -1,
        "filename": "OViewPy-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1865ee6acc0d397969a6f2d1261b3da0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11510,
        "upload_time": "2022-07-20T08:08:40",
        "upload_time_iso_8601": "2022-07-20T08:08:40.293673Z",
        "url": "https://files.pythonhosted.org/packages/f0/4d/9d94a99de8f45b0f62e067baea2aa207cdbdb5c4367860e3e1ef67d01596/OViewPy-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "631badad78da2995b294548a35360415d3c99c6a6a0e764565ccc35cb64b116b",
          "md5": "5ead452001f672b997a4c68d8fbc3a37",
          "sha256": "6b5221e5d732db36ce55df50e033880f06bdac5c45df4f764e8a7644c6134eb1"
        },
        "downloads": -1,
        "filename": "OViewPy-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5ead452001f672b997a4c68d8fbc3a37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11465,
        "upload_time": "2022-07-20T08:11:22",
        "upload_time_iso_8601": "2022-07-20T08:11:22.454826Z",
        "url": "https://files.pythonhosted.org/packages/63/1b/adad78da2995b294548a35360415d3c99c6a6a0e764565ccc35cb64b116b/OViewPy-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ece6db3593bdd9c3222cd5044ec9e5062cccdcdb4ad0b6b71e6b2021566cd67",
          "md5": "320aa5e158e50334f8c7c48b71420b77",
          "sha256": "80880d9f1e4549769c45750e26c979254156a1f1c9562974ca0fba14893b0e7b"
        },
        "downloads": -1,
        "filename": "OViewPy-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "320aa5e158e50334f8c7c48b71420b77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15823,
        "upload_time": "2022-08-22T07:29:35",
        "upload_time_iso_8601": "2022-08-22T07:29:35.483717Z",
        "url": "https://files.pythonhosted.org/packages/5e/ce/6db3593bdd9c3222cd5044ec9e5062cccdcdb4ad0b6b71e6b2021566cd67/OViewPy-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "825b20eb2fcec17f0a21cb52cd47422c912b355d2006a9bff6863991198cee58",
          "md5": "2c942a7cd830f67b75f05be038020d90",
          "sha256": "0ba1dad5d7d06ede71a547291e86c0a9f71ca0042809f5d7a3040564033430c4"
        },
        "downloads": -1,
        "filename": "OViewPy-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2c942a7cd830f67b75f05be038020d90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15826,
        "upload_time": "2022-08-22T08:18:13",
        "upload_time_iso_8601": "2022-08-22T08:18:13.972502Z",
        "url": "https://files.pythonhosted.org/packages/82/5b/20eb2fcec17f0a21cb52cd47422c912b355d2006a9bff6863991198cee58/OViewPy-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20a94f3287b153266bb3fc20501f6010b0ad4e13a33c319be940df18fda523a2",
          "md5": "65c67726c25c0fb2ad29968d63ac7b4f",
          "sha256": "a2dbe810a1efd054a7aa52f7070b0135e3205450edb1cfecf137184762efc28b"
        },
        "downloads": -1,
        "filename": "OViewPy-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "65c67726c25c0fb2ad29968d63ac7b4f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16999,
        "upload_time": "2022-08-24T08:59:37",
        "upload_time_iso_8601": "2022-08-24T08:59:37.206730Z",
        "url": "https://files.pythonhosted.org/packages/20/a9/4f3287b153266bb3fc20501f6010b0ad4e13a33c319be940df18fda523a2/OViewPy-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d5d45e85df639258641c97f31533e237c65526e6e7eb93643fe8f30755d10d9",
          "md5": "46ed436499dac526843f901b10e952fd",
          "sha256": "0dc4c865626bd215081aa89c568b38a509f37d371711650e0cd6980e8fc7ea45"
        },
        "downloads": -1,
        "filename": "OViewPy-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "46ed436499dac526843f901b10e952fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29449,
        "upload_time": "2022-11-18T06:44:02",
        "upload_time_iso_8601": "2022-11-18T06:44:02.873593Z",
        "url": "https://files.pythonhosted.org/packages/1d/5d/45e85df639258641c97f31533e237c65526e6e7eb93643fe8f30755d10d9/OViewPy-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79dc4a568c347340501cfb1be49ee666a84e012a488a20ef28393318bd853a4e",
          "md5": "9749f26ee1659217abcf58e510548d93",
          "sha256": "63d83e6db2ae5cff9c45518fbfb3a937d3e1bab97c0d91b16e515b53d0a237c9"
        },
        "downloads": -1,
        "filename": "OViewPy-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9749f26ee1659217abcf58e510548d93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23290,
        "upload_time": "2022-12-30T07:05:51",
        "upload_time_iso_8601": "2022-12-30T07:05:51.618567Z",
        "url": "https://files.pythonhosted.org/packages/79/dc/4a568c347340501cfb1be49ee666a84e012a488a20ef28393318bd853a4e/OViewPy-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8401231cbc43b1bc1d28319a6b33ba5c4afd312653e5d935bc5fc2ad69adfe35",
          "md5": "d79af174cb9413a2739a44862e030d32",
          "sha256": "e3b85fb3c7adef73ef3400df2d8d2ac39d5c3ea59bba25974d2ae86da742c05b"
        },
        "downloads": -1,
        "filename": "OViewPy-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d79af174cb9413a2739a44862e030d32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29605,
        "upload_time": "2022-12-30T07:05:53",
        "upload_time_iso_8601": "2022-12-30T07:05:53.849838Z",
        "url": "https://files.pythonhosted.org/packages/84/01/231cbc43b1bc1d28319a6b33ba5c4afd312653e5d935bc5fc2ad69adfe35/OViewPy-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79dc4a568c347340501cfb1be49ee666a84e012a488a20ef28393318bd853a4e",
        "md5": "9749f26ee1659217abcf58e510548d93",
        "sha256": "63d83e6db2ae5cff9c45518fbfb3a937d3e1bab97c0d91b16e515b53d0a237c9"
      },
      "downloads": -1,
      "filename": "OViewPy-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9749f26ee1659217abcf58e510548d93",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 23290,
      "upload_time": "2022-12-30T07:05:51",
      "upload_time_iso_8601": "2022-12-30T07:05:51.618567Z",
      "url": "https://files.pythonhosted.org/packages/79/dc/4a568c347340501cfb1be49ee666a84e012a488a20ef28393318bd853a4e/OViewPy-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8401231cbc43b1bc1d28319a6b33ba5c4afd312653e5d935bc5fc2ad69adfe35",
        "md5": "d79af174cb9413a2739a44862e030d32",
        "sha256": "e3b85fb3c7adef73ef3400df2d8d2ac39d5c3ea59bba25974d2ae86da742c05b"
      },
      "downloads": -1,
      "filename": "OViewPy-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d79af174cb9413a2739a44862e030d32",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 29605,
      "upload_time": "2022-12-30T07:05:53",
      "upload_time_iso_8601": "2022-12-30T07:05:53.849838Z",
      "url": "https://files.pythonhosted.org/packages/84/01/231cbc43b1bc1d28319a6b33ba5c4afd312653e5d935bc5fc2ad69adfe35/OViewPy-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}