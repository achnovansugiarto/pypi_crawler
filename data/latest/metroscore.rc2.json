{
  "info": {
    "author": "Arunav Gupta",
    "author_email": "centaurus.ab@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# metroscore\n\nMetroscore is a Python package for analyzing transit quality in a region. \n\n### Abstract\nIn recent years, rideshare alternatives have significantly impacted public transit ridership in large American cities by offering speed and convenience. To address this issue, transit agencies require a measure of transit mode preference to determine when and where riders choose public transit over car-based options. This paper introduces Metroscore, an arcpy-powered API that computes a multidimensional preference statistic for transit agencies to evaluate their services in comparison to car-based transit. Metroscore allows transit planners to input their own networks or build one for their city and analyze the effects of potential changes on the transit system under various spatiotemporal constraints. The methodology is illustrated through case studies on three major cities: Cincinnati, San Diego, and New York. With Metroscore, transit agencies can make informed decisions regarding the development of transit services, respond to the growing popularity of rideshare options, and provide strong evidence to support transit expansion proposals. Metroscore is available as an open-source, pip-installable package, with opportunities for feedback and collaboration on future developments. This paper not only introduces the innovative tool, but also highlights its potential in improving transit quality and fostering sustainable urban mobility.\n\n# Installation\n\n## Prerequisites\n\n1. `arcgis`\n2. `arcpy`. This is installed with ArcGIS Pro and is required to generate transit service areas.\n\n## Install using pip\n\n```bash\npip install metroscore\n```\n\n## Install from source\n\n```bash\ngit clone https://github.com/agupta01/metroscore.git\ncd metroscore\npip install -e .\n```\n\n\n# Getting Started\n\n## Datasets\n\n1. **GTFS**: public transit agencies frequently publish their transit schedules in the [General Transit Feed Specification (GTFS)](https://developers.google.com/transit/gtfs/reference) format. This is a standard format for describing transit schedules and routes. `metroscore` uses the GTFS format to generate transit service areas.\n2. **Streets**: In order for the network to know where people can and cannot walk, you will need a polyline dataset of streets. This dataset should also have a field called `RestrictPedestrians` to indicate whether pedestrians are allowed to walk on that street. If this field is not present, you should think about how to generate this using the existing fields (one approach, for example, might be to look at street speed, if available).\n\n\n## Building a transit network dataset\n\n> **Pro tip:** Generate your network dataset on ArcGIS desktop, as this will allow you to visually inspect the quality of it. `metroscore` has a function to do this using arcpy, but it assumes a certain data structure and quality and may fail without warning.\n\nFollow the instructions [here](https://pro.arcgis.com/en/pro-app/latest/help/analysis/networks/create-and-use-a-network-dataset-with-public-transit-data.htm) to generate a transit network dataset. This will generate a network dataset that can be used to generate transit service areas.\n\n## Selecting points\n\nIn order to run, metroscore needs one or more candidate points to score. These points can be manually selected or generated using the functions in `metroscore.point_selection`. For example, to make a grid of approximately 100 points inside San Diego,\n\n```python\n# get san diego boundary\nsd_boundary = gis.content.get(\"4a27b8717df945298546fdf3456b0a16\")\nsd_poly = sd_boundary.layers[0].query(\"NAME = 'SAN DIEGO'\").sdf.iloc[0].SHAPE\npoints = make_grid_points(sd_poly, N=100)\nlen(points)\n```\n87\n\n## Generating service areas\nNext, one must generate driving and transit service areas for each point. This is done using the `metroscore.service_areas` module. For example, to generate a 30 minute driving service area for each point,\n\n```python\ntime = datetime.datetime(2019, 1, 1, 8, 0, 0)\nduration = [30]\nmetro_sdf = get_metro_service_areas(nd_path, points, cutoffs=duration, time_of_day=time)\ndrive_sdf = get_drive_time_service_areas(points, cutoffs=duration, time_of_day=time)\n```\n\n## Scoring points\nFinally, we can use the `metroscore.analysis` module to generate metroscores. This will generate a metroscore for every service area generated inn the previous step (that is, for every point, duration and time combination). To do this,\n\n```python\nmts_df = sd_mts_loc = compute_metroscore(metro_sdf, drive_sdf)\n```\n\nThe resultant dataframe will have a column called \"Metroscore\" and another column named \"Name\" with each row being of the form \"<Location ID> : 0 - <Duration>\". You may then groupby or average across the different dimensions to analyze the metroscore results. To get the overall metroscore, simply average the Metroscore column as follows:\n\n```python\nmts_df.Metroscore.mean()\n```\n0.045\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/agupta01/metroscore",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metroscore",
    "package_url": "https://pypi.org/project/metroscore/",
    "platform": null,
    "project_url": "https://pypi.org/project/metroscore/",
    "project_urls": {
      "Homepage": "https://github.com/agupta01/metroscore"
    },
    "release_url": "https://pypi.org/project/metroscore/0.2.0/",
    "requires_dist": [
      "numpy (==1.24.2)",
      "pandas (==1.5.3)",
      "flake8 ; extra == 'dev'",
      "mypy (<1.2,>=1.0) ; extra == 'dev'",
      "black (<24.0,>=23.0) ; extra == 'dev'",
      "isort (<5.13,>=5.12) ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-sphinx ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "twine (>=1.11.0) ; extra == 'dev'",
      "setuptools ; extra == 'dev'",
      "wheel ; extra == 'dev'",
      "Sphinx (<6.2.0,>=4.3.0) ; extra == 'dev'",
      "furo (==2022.12.7) ; extra == 'dev'",
      "myst-parser (<1.1.0,>=0.15.2) ; extra == 'dev'",
      "sphinx-copybutton (==0.5.1) ; extra == 'dev'",
      "sphinx-autobuild (==2021.3.14) ; extra == 'dev'",
      "sphinx-autodoc-typehints ; extra == 'dev'",
      "packaging ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17428175,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "533d16d248e95bc42d0e1048ccfe9ced523c191f9fb85ec3caf91632deee0488",
          "md5": "c0beea512677d3468db6ac3996be2cb6",
          "sha256": "d3b2dc2c4e117a487c54fcb7d4236113fce667060deae8065dcb266e44d29ba6"
        },
        "downloads": -1,
        "filename": "metroscore-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0beea512677d3468db6ac3996be2cb6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9366,
        "upload_time": "2023-03-16T10:59:46",
        "upload_time_iso_8601": "2023-03-16T10:59:46.263937Z",
        "url": "https://files.pythonhosted.org/packages/53/3d/16d248e95bc42d0e1048ccfe9ced523c191f9fb85ec3caf91632deee0488/metroscore-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14b00803f759279219015d7716cf9d8dba053bd3ead08c06a6255426db88446c",
          "md5": "b34ac198ddf0f794958b4642c549be4c",
          "sha256": "fbab5dfd0f0ab8760cb973763986ae19f93cf78be7e6f65555bbd66f3988c773"
        },
        "downloads": -1,
        "filename": "metroscore-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b34ac198ddf0f794958b4642c549be4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9115,
        "upload_time": "2023-03-16T10:59:48",
        "upload_time_iso_8601": "2023-03-16T10:59:48.324607Z",
        "url": "https://files.pythonhosted.org/packages/14/b0/0803f759279219015d7716cf9d8dba053bd3ead08c06a6255426db88446c/metroscore-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "016004559e9aa9306829520d9173e59142f3a6f9ae598e4d3afb7e9ae3cbb8eb",
          "md5": "c3d38db5c98e5269b9dea6573f1861e5",
          "sha256": "96fb7ae3e3e901a8be89959feaaf9dc629c1fcbbee9d0e7ebdad1f331b56fa41"
        },
        "downloads": -1,
        "filename": "metroscore-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3d38db5c98e5269b9dea6573f1861e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12891,
        "upload_time": "2023-03-24T07:50:49",
        "upload_time_iso_8601": "2023-03-24T07:50:49.020150Z",
        "url": "https://files.pythonhosted.org/packages/01/60/04559e9aa9306829520d9173e59142f3a6f9ae598e4d3afb7e9ae3cbb8eb/metroscore-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4fb42e707e14af89bec0efa4c857d1c73aa23df1872b683a2d646ab3f5e98f4",
          "md5": "e6037a33a3fb7ffed2dd8d320b570e51",
          "sha256": "b8d1bca7cdedf1bbc94b08d8cf7f84b3854c13034be10eef43177e5d51406e30"
        },
        "downloads": -1,
        "filename": "metroscore-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e6037a33a3fb7ffed2dd8d320b570e51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14231,
        "upload_time": "2023-03-24T07:50:51",
        "upload_time_iso_8601": "2023-03-24T07:50:51.001703Z",
        "url": "https://files.pythonhosted.org/packages/e4/fb/42e707e14af89bec0efa4c857d1c73aa23df1872b683a2d646ab3f5e98f4/metroscore-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "016004559e9aa9306829520d9173e59142f3a6f9ae598e4d3afb7e9ae3cbb8eb",
        "md5": "c3d38db5c98e5269b9dea6573f1861e5",
        "sha256": "96fb7ae3e3e901a8be89959feaaf9dc629c1fcbbee9d0e7ebdad1f331b56fa41"
      },
      "downloads": -1,
      "filename": "metroscore-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c3d38db5c98e5269b9dea6573f1861e5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 12891,
      "upload_time": "2023-03-24T07:50:49",
      "upload_time_iso_8601": "2023-03-24T07:50:49.020150Z",
      "url": "https://files.pythonhosted.org/packages/01/60/04559e9aa9306829520d9173e59142f3a6f9ae598e4d3afb7e9ae3cbb8eb/metroscore-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4fb42e707e14af89bec0efa4c857d1c73aa23df1872b683a2d646ab3f5e98f4",
        "md5": "e6037a33a3fb7ffed2dd8d320b570e51",
        "sha256": "b8d1bca7cdedf1bbc94b08d8cf7f84b3854c13034be10eef43177e5d51406e30"
      },
      "downloads": -1,
      "filename": "metroscore-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e6037a33a3fb7ffed2dd8d320b570e51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 14231,
      "upload_time": "2023-03-24T07:50:51",
      "upload_time_iso_8601": "2023-03-24T07:50:51.001703Z",
      "url": "https://files.pythonhosted.org/packages/e4/fb/42e707e14af89bec0efa4c857d1c73aa23df1872b683a2d646ab3f5e98f4/metroscore-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}