{
  "info": {
    "author": "Pietro Mandracci",
    "author_email": "pietro.mandracci.software@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "###############################\n*gnuplot_manager* DOCUMENTATION\n###############################\n\n.. contents::\n\nIntroduction\n============\n\nThis package allows to plot data or mathematical expressions inside python,\nusing the gnuplot program, in the form of 2D or 3D plots.\n\nMultiple plot windows can be opened, and a separate gnuplot process \nis started for each of them.  The data to be plotted can be transferred\nto gnuplot by writing them on files, or can be sent to gnuplot inline.\nMathematical expressions are sent directly to gnuplot as strings.\nAll the package functionalities can be accessed by calling functions,\nthe list of which is reported in the `List of available functions`_\nsection at the end of this document.\n\nThe package has been designed starting from my own needs, so only a\nvery limited number of the many gnuplot functionalities have been\nimplemented, but more may be added in the future:\n\n- plotting 2D or 3D graphs from data\n- plotting mathematical expressions in 2D or 3D\n\nThe most commonly used plot settings, such as applying logarithmic scales\nor setting scale limits, can be applied by passing arguments to the functions,\nwithout knowing the specific gnuplot commands.  However, it is also possible\nto pass arbitrary commands to gnuplot, as described in the section\n`Sending arbitrary commands to gnuplot`_.\n\nThe examples given in this document can be executed by copying the expressions\nafter *'>>>'* and pasting them in the python console command line. Note that,\nalthough they have been tested, errors are still possible.\n\n.. note:: If the package has been correctly installed, a small demo script can\n   be run from the system terminal by typing::\n\n   $ python -m gnuplot_manager.demo\n\n   or inside the python console by typing::\n\n   >>> from gnuplot_manager.demo import main\n   >>> main()\n\n   The demo will run without the need of any input.\n    \nThis package is released under a GPL licence, in the hope it can be\nuseful to someone else. Feeback, bug reports, and suggestions are welcome.\n\n\nPackage structure\n=================\n\nThis package contains the following modules:\n\n*global_variables.py*\n    contains the global variables, mainly used to define default values of \n    some parameters;\n    \n*errors.py*\n    contains error messages returned by the package functions;\n    \n*classes.py*\n    contains the *_PlotWindow* class, used to create a structure containing the\n    gnuplot process (instance of *subprocess.Popen*) and some information on\n    the plot;\n\n*functions.py*\n    contains all the functions used to create plot windows and plot \n    data or mathematical expressions on them;\n\n*funcutils.py*\n    contains some utility functions which are not intended to be called\n    directly by the user;\n\n*demo.py*\n    a small demo script;\n\n*test.py*\n    a script to test most of the package functions.\n    \n\nImporting the package\n=====================\n\nHow to import\n-------------\n\nTo import *gnuplot_manager* you can use the *import* directive as usual:\n\n>>> import gnuplot_manager\n\nor \n\n>>> import gnuplot_manager as gm\n\nor also\n\n>>> from gnuplot_manager import *\n\n.. note:: If you are using this module together with matplotlib, e.g. during an\n   ipython session opened with the *--pylab* option, it is recommended that you import\n   *gnuplot_manager* in its own namespace (using one of the two first methods\n   listed above) to prevent any conflict with matplotlib functions and variable\n   names. Efforts have been made to avoid the use of names that could\n   override matplotlib ones (such as *plot()*), but something may have been forgotten,\n   and future versions of matplolib could use names that conflict with this package.\n   If you import the package in its own namespace, you are sure to avoid any conflict.\n\n.. note:: In the following, all the examples are written presuming that the package\n   and numpy have been imported in their own namespaces as follows:\n\n   >>> import numpy\n   >>> import gnuplot_manager as gm\n\n   numpy is used in the examples to generate some data to be plotted, but the\n   *gnuplot_manager* package does not rely on it, and the plot functions can\n   handle lists, tuples, or other types of data.\n\nChecking gnuplot installation at the module import\n--------------------------------------------------\n\nWhen the module is imported, it checks the availability of the gnuplot program\nand sets the global variable *gnuplot_installed* accordingly.\nThis is achieved by means of a call to the program *which*, that should be\ninstalled in nearly all linux distributions. However, if it is not installed\non your system, the *gnuplot_installed* variable is set to *None*:\n\n*gnuplot_installed=True*\n  gnuplot is installed\n  \n*gnuplot_installed=False*\n  gnuplot is not installed\n  \n*gnuplot_installed=None*\n  *which* was not found, so the installation of gnuplot was not checked\n\nExample:\n\n>>> print(gm.gnuplot_installed)\nTrue\n\n\nCreating a new plot window\n==========================\n\nThe *new_plot()* function\n-------------------------\n\nTo open a new plot window, use the *new_plot()* function\n\n>>> myplot2d = gm.new_plot(plot_type='2D', title='My 2D Plot')\n\nThe function returns an instance of the *_PlotWindow* class. Note that\nthe plot window does not appear on the screen until you plot\nsomething on it. \n\nYou can specify 2 types of plot: '2D' and '3D', with '2D' as default.\nIf you give a title to the window, passing the *title* argument\nto the *new_plot()* function, it will be  shown on the window, when\nsomething will be plotted on it.  All the arguments are optional:\nif the function is called without passing any argument, it returns\na '2D' plot without a title.\n\n.. note:: In the following, the options of the *new_plot()* function\n   are explained: if you want to learn immediately how to plot something,\n   jump to the `Plotting from data`_ or `Plotting mathematical functions`_\n   sections.\n\nErrors during window creation\n-----------------------------\n\nIf invalid or inconsisted arguments are given to the *new_plot()* function,\na plot window is created using default values, and a tuple with a number\nand an error message is stored in the *error* attribute of the *_PlotWindow*\ninstance. Examples:\n\n>>> myplot = gm.new_plot(plot_type='4D')\n>>> print(myplot.error)\n(14, 'unknown plot type \"4D\", using default \"2D\"')\n   \n\nPersistence\n-----------\n\nIf you give the *persistence=True* argument when opening a new plot, \nthe window will remain visible after the gnuplot process has been terminated, \nas described in the `Closing plot windows`_ section.\nHowever, some operations, such as zooming and rescaling, may \nnot be possible after the gnuplot process has been shut down.\n\n>>> myplot = gm.new_plot(title='Persistent plot', persistence=True)\n\nThe default behavior is stored in the *PERSISTENCE* global variable:\n\n>>> print(gm.PERSISTENCE)\nFalse\n\n\nGnuplot output management\n-------------------------\n\nWhen you open a new plot window, you can specify how you like to treat \nthe output of the associated gnuplot process, passing the \n*redirect_output* argument to the *new_plot()* function:\n\n*redirect_output = False* \n    gnuplot output and errors are sent to */dev/stdout* and */dev/stderr*\n    respectively, as it would happen when calling the program from the terminal.\n    This can be useful when using gnuplot from the console, to get the output\n    immediately;\n*redirect_output = True* \n    the output is saved to files, which are stored in the directories\n    *gnuplot.out/output/* and *gnuplot.out/errors/*;\n*redirect_output = None* \n    the output is suppressed, sending it to */dev/null*.\n\nYou can specify a different behavior for each window you open:\n\n>>> myplot1 = gm.new_plot(title='Output suppressed', redirect_output=None)\n>>> myplot2 = gm.new_plot(title='Output saved on files', redirect_output=True)\n>>> myplot3 = gm.new_plot(title='Output shown on console', redirect_output=False)\n\nThe default behavior is stored in the *REDIRECT_OUT* global variable:\n\n>>> print(gm.REDIRECT_OUT)\nFalse\n\n.. note:: By default, gnuplot directs to */dev/stderr* the output\n   of some of its commands, such as *print*, not only errors. \n   As an example, if you press the *h* key when the mouse pointer\n   is inside a gnuplot window, gnuplot prints a list of the available commands.\n   However, if the *redirect_output=True* has been specified, the menu appears\n   on the file on which the */dev/stderr* (and not */dev/stdout*, as one would expect)\n   has been redirected.  This depends on the gnuplot behavior and is not due to an\n   erroneous redirection of the devices to the files.\n\n\nPurging data files\n------------------\n\nBy default, the old datafiles are removed each time new data or functions are plotted\non the plot window, unless the *replot=True* option is given [#replot]_.\nIf you want to change this behavior, preserving the data files,\nyou can pass the *purge=False* argument to the *new_plot()* function.\n\n.. [#replot] a description of the *replot* argument is given in the\n   `Adding more curves to a plot`_ section.\n   \n\nOther plot window properties\n----------------------------\n\nWhile opening the plot window, you can specify several other properties,\nsuch as: type of terminal, window dimensions, position on the screen,\naxis limits, labels, and so on.\n\nRead the docstring of the *new_plot()* function for a list of all\nthe available options (press *q* to exit from the help page):\n\n>>> help(gm.new_plot)\n\nDefault window properties\n-------------------------\n\nThe default values used by the *new_plot()* function for terminal type, \nwindow dimensions and window position on the screen are *not*\nthe default ones used by newplot. They are stored in the following global variables:\n\n- *DEFAULT_TERM*\n- *DEFAULT_WIDTH*\n- *DEFAULT_HEIGHT*\n- *DEFAULT_XPOS*\n- *DEFAULT_YPOS*\n\nthe first one is a string (e.g. 'x11'), while the other ones are numbers\nexpressing the window position and size in pixels.\n\nIf you want to open a plot window using gnuplot defaults, you can pass the \n*gnuplot_default* argument:\n\n>>> myplot = gm.new_plot(gnuplot_default=True, title='Using gnuplot defaults')\n\n.. note:: If you have tried some of the examples described up to now, you have\n   opened several *_PlotWindow* instances, none of which has opened a window\n   on the screen, since there is nothing plotted yet. You can  close all the\n   open plot windows,  terminating the associated gnuplot terminals, using the\n   *plot_close_all()* function, described in the `Closing plot windows`_  section:\n     \n   >>> gm.plot_close_all()\n   (0, 'Ok')\n   \n\nPlotting from data\n==================\n\nPlotting 2D curves from data\n----------------------------\n\nBefore plotting 2D data, a 2D plot window must be opened first, as was described\nin the `Creating a new plot window`_ section:\n\n>>> myplot2d = gm.new_plot(plot_type='2D', title='My 2D Plot')\n\nTo plot 2D data, use the *plot2d()* function, passing the *_PlotWindow* \ninstance as first argument. The second and third arguments must be \nunidimensional data structures, such as numpy arrays, lists or tuples [#numbers]_,\nhaving equal sizes, containing the x-values and y-values of the points to plot.\nAs an example, if the second and third argument are two arrays *x* and *y*:\n\n- the first point to plot has coordinates (*x[0]*, *y[0]*)\n- the second point has coordinates (*x[1]*, *y[1]*)\n- and so on...\n\n.. [#numbers] even single numbers, if you want to plot a single point.\n\nThe third argument (optional) is a string to be used as label in the \nplot legend.  Example:\n\n>>> x = numpy.linspace(0,100,1001)\n>>> y = x * x\n>>> gm.plot2d(myplot2d, x, y, label='y=x^2')\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/parabola-1.png\n           \na gnuplot window should appear on the screen, and a parabola should be\nplotted on it. The *plot2d()* function returns a tuple containing a\nnumber and a string: if there are no errors, the number is zero and\nthe string is *'Ok'*, otherwise a number greater than zero and a string\ndescribing the error are returned.\n\nThe list of all the error messages is contained in the *error.py* module:\n\n>>> help(gm.errors)\n\nPlotting 1D data\n----------------\n\nIt is also possible to give to gnuplot a single set of data, usually if you\nwant to give y-values and let gnuplot automatically create the x-values,\nby means of the *plot_1d()* function. The function works for 2D plot windows\nonly. Example:\n\n>>> y = numpy.linspace(0,100,101)\n>>> gm.plot1d(myplot2d, y, label='1D data')\n(0,'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot1d.png\n\n           \nIn the previous example gnuplot has used the ordinal numbers 1-100 as x-values\nfor the points of the plot.\n\n\nPlotting histograms\n-------------------\n\nThe *plot2d()* function can be used to plot histograms also. \nIf the plot was opened passing the argument *style='histeps'*,\nthe data are plotted as an histogram, where each x-value is\ninterpreted as the center value of the bin, and each y-value\nas the associated frequency. Example:\n\n>>> myhistogram = gm.new_plot(style='histeps', title='My Histogram')\n>>> bins = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> freq = [1, 1, 4, 7, 8, 6, 3, 1, 0]\n>>> gm.plot2d(myhistogram, bins, freq, label='My frequency data')\n(0,'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/histogram-1.png\n\nan histogram should be plotted. Note that, in this case, we have put\nthe *x* and *y* values in lists, instead of numpy arrays, but we could\nhave put them in tuples also, obtaining the same effect.\n\nYou can set the 'histeps' style on an already opened 2D plot\nwindow  also, using the *plot_set()* function described in the\n`Changing the window properties`_ section.\n\n\nPlotting boxplots\n-----------------\n\nThe function *plot_box()* allows to plot a boxplot from a set of data.\nExample: \n\n>>> data = numpy.random.normal(3,20,50)\n>>> gm.plot_box(myplot2d, data, width=100, label='My boxplot')\n(0,'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/boxplot.png\n\n\nPlotting 3D data\n----------------\n\nTo plot 3D data, the plot window must be opened with the option\n*plot_type = '3D'*, as described in the `Creating a new plot window`_\nsection:\n\n>>> myplot3d = gm.new_plot(plot_type='3D', title='3D Plot')\n\nthen, the *plot3d()* function can be used to plot data on the window,\npassing the *_PlotWindow* instance as first argument, and the x, y and\nz values of the points to plot as the following arguments.\n\nThe x, y and z values to be plotted must be stored in \nunidimensional data structures of equal sizes, and contain the x, y,\nand z coordinates of each point to plot. As an example, if you pass\nthe three arrays *x*, *y* and *z*: \n\n- the first point to plot has coordinates (*x[0]*, *y[0]*, *z[0]*)\n- the second point has coordinates (*x[1]*, *y[1]*, *z[1]*)\n- and so on...\n\nExample of 3D curve plot:\n\n>>> x = numpy.linspace(0,100,1001)\n>>> y = numpy.linspace(0,200,1001)\n>>> z = x * y\n>>> gm.plot3d(myplot3d, x, y, z, label='3D curve')\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/3Dplot-1.png\n\na 3D plot with a curve is plotted. If you click with the mouse on the window and move the pointer,\nyou can rotate the axes, changing the point of view (this is made by gnuplot, not by this package).\n\nIn the previous example, a curve in 3D is plotted, not a surface, since only a single *y* value is given\nfor each *x* value. To plot a surface, you must provide a set of *y* values for each *x* value, to form\na grid of values on the *x-y* plane. Example of the points needed to plot a *z=x+y* surface on a grid\nof 4 x 4 points::\n   \n(x=0, y=0, z=0) (x=0, y=1, z=1) (x=0, y=2, z=2) (x=0, y=3, z=3)\n(x=1, y=0, z=1) (x=1, y=1, z=2) (x=1, y=2, z=3) (x=1, y=3, z=4)\n(x=2, y=0, z=2) (x=2, y=1, z=3) (x=2, y=2, z=4) (x=2, y=3, z=5)\n(x=3, y=0, z=3) (x=3, y=1, z=4) (x=3, y=2, z=5) (x=3, y=3, z=6)\n\nSo the data to give to the *plot3d()* functions are:\n\n>>> x = numpy.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3])\n>>> y = numpy.array([0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3])\n>>> z = x + y\n>>> gm.plot3d(myplot3d, x, y, z, label='z = x  + y')\n(0, 'Ok')\n\nA grid of crosses should be plotted, which are points of the *z = x + y* surface:\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/3Dplot-2.png\n\nAdding more curves to a plot\n----------------------------\n\nTo add new data on the same plot, you must pass the *replot=True* argument:\n\n>>> x1 = numpy.linspace(0,100,1001)\n>>> y1 = x1 * x1\n>>> gm.plot2d(myplot2d, x1, y1, label='My first 2D data')\n(0, 'Ok')\n>>> x2 = numpy.linspace(0,100,2001)\n>>> y2 = x2 * x2 * x2 / 100\n>>> gm.plot2d(myplot2d, x2, y2, label='My second 2D data', replot=True)\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot2d-replot.png\n\nHowever, if you want to plot multiple curves on the same plot,\nit is more efficient to use the *plot_curves()* function described\nin the next section.\n\n\nPlotting several curves at the same time\n----------------------------------------\n\nThe function *plot_curves()* allows to plot several curves at one time,\nwhich is faster than plotting them one at a time using the *replot* option,\nsince gnuplot is called only once. Moreover, it lets you add a string with\narbitrary options to give to gnuplot.\n\nData to be plotted must be recorded in a list, each element of which\nis itself a list, made of 4 elements for 2D plots, or 5 elements for 3D ones.\n\nFor 2D plots, each list element has the form *[x, y, label, options]*, while for 3D\nplots it has the form *[x, y, z, label, options]*, where:\n\n- *x* is the array of x coordinates of the points to plot:\n  for 2d plot windows it can also be set to *None*,\n  in which case the x-values for that curve are automatically created by gnuplot;\n- *y* is the array of y coordinates of the points to plot;\n- *z* is the array of z coordinates of the points to plot (only for 3D plots);\n- *label* is a string with the label to show in the plot legend,\n  or *None* if you do not want a label to be set\n- *options* is a string with additional options you want to give to gnuplot, [#options]_\n  or *None* if you do not want to give them\n\n.. [#options] note that no check is made that the string contains valid gnuplot options.\n\nExamples:\n\n>>> x1 = numpy.linspace(0, 100, 101)\n>>> y1 = 2 * x1\n>>> z1 = x1 * y1\n>>> x2 = numpy.linspace(0, 100, 201)\n>>> y2 = 3 * x2\n>>> z2 = x2 * y2 / 10\n>>> list2d = [ [x1, y1, 'my first data 2D', None], [x2, y2, 'my second data 2D', 'with lines'] ]\n>>> list3d = [ [x1, y1, z1, 'my first data 3D', None], [x2, y2, z2, 'my second data 3D', 'with linespoints'] ]\n\nThe first argument passed to *plot_curves()* must be the plot on which \nyou want to operate, while the second is the list:\n\n>>> gm.plot_curves(myplot2d, list2d)\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_curves-1.png\n\n>>> gm.plot_curves(myplot3d, list3d)\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_curves-2.png\n\nYou can also use the function *plot_curves()* to plot a single curve,\nwhich allows to give additional options to gnuplot, but then the list\nmust have a single element, which is itself a list of 4 or 5 elements, \nso do not forget to put *double square brackets*:\n\n>>> x1 = numpy.linspace(0,100,101)\n>>> y1 = x1 * x1\n>>> gm.plot_curves(myplot2d, [ [ x1, y1, 'only one curve', 'with linespoints'] ])\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_curves-3.png\n\nYou can specify the *replot=True* option in the *plot_curves()* function also,  \nif you want to add the new curves to the previously plotted ones.\nExample:\n\n>>> x1 = numpy.linspace(0,3.14, 101)\n>>> y1 = numpy.sin(x1)\n>>> x2 = numpy.linspace(0,3.14, 51)\n>>> y2 = numpy.cos(x2)\n>>> list2da = [ [x1, y1, 'my first data 2D', None], [x2, y2, 'my second data 2D', None] ]\n>>> list2db = [ [x1, 2*y1, 'my third data 2D', None], [x2, 2*y2, 'my fourth data 2D', None] ]\n>>> gm.plot_curves(myplot2d, list2da)\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_curves-4.png\n\n>>> gm.plot_curves(myplot2d, list2db, replot=True)\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_curves-5.png\n\nData files\n----------\n\nThe data to be plotted are written on files, which are saved\nin the *gnuplot.out/data/* directory,\nwhich is created in the current working directory.\nThe name of a data file has the following form:\n\n*gnuplot_data_w<n>(<window-title>)_<type>_c<m>(<curve-label>).csv*\n\n- *<n>* is the window number\n- *<window-title>* is the string given to\n  the *new_plot()* function as window title\n- *<type>* is '1D', '2D' or '3D',\n  where '1D' means that the x-values have been omitted\n- *<m>* is the curve number\n- *<curve-label>* is the string given to\n  the plot function as label\n\nIf the window title and/or the curve label have not been given,\nthe filename will miss one or both the parts beween parentheses.\n\nNote that, when composing filenames, characters listed in the \n*INVALID_CHARS* global variable are removed from the window titles \nand curve labels, and substituted with the char stored in the \n*SUBSTITUTE_CHAR* variable (which is *\"_\"*, unless you change it).\n\n\nPlotting volatile data\n----------------------\n\nIt is also possibile to pass data to gnuplot without writing them to\ndisk.  This can be achieved by passing the *volatile=True* argument\nto any of the plot functions described in this section.  In this case\na data file is not created, instead the data are passed to gnuplot\nas a string, together with the plotting commands, using the special\nfilename *'-'*. \n\nNote that plotting data in this way has some limitations: if there are\ncurves plotted from volatile data it is *not* possible to plot other\ncurves or functions on the same plot window using the *replot* option.\nSo if you want to mix on the same plot window volatile curves (i.e.\ncurves plotted using the *volatile* argument) together with non volatile\nones or functions, you must plot the volatile curves as the *last* plot\ninstruction.  Example:\n\n>>> x = numpy.linspace(0,100,101)\n>>> y = x * x\n>>> z = y * x / 100\n>>> gm.plot_function(myplot2d, 'x**2','function')\n>>> gm.plot2d(myplot2d, x, y, label='non volatile data', replot=True)\n>>> gm.plot2d(myplot2d, x, z, label='volatile data', volatile=True, replot=True)\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/volatile.png\n\nNote that if there are volatile data are plotted on a plot window, gnuplot\ndoes not allow to toggle logarithmic scales on it.\n\n\nPlotting mathematical functions\n===============================\n\nPlotting a mathematical expression\n----------------------------------\n\nIf you have not opened a 2D plot window yet (e.g. because you have jumped\nto this section from the index), you should do it now, using the *new_plot()*\nfunction described in the `Creating a new plot window`_ section:\n\n>>> myplot2d = gm.new_plot(plot_type='2D', title='My 2D Plot')\n\nThe function *plot_function()* allows to pass to gnuplot a string, representing\na mathematical function [#function_string]_:\n\n>>> gm.plot_function(myplot2d, 'sin(x)', label='sin(x)')\n(0, 'Ok')\n\n.. [#function_string] No check is made that the string represents a valid\n   mathematical expression. If it is not, gnuplot will print an error message\n   on the console or on the file on which you have redirected */dev/stderr*\n   (unless you have chosen to send it to */dev/null*).\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_function-1.png\n\nTo plot a 3D function, you must open a 3D plot window, if you don't have done\nit yet:\n\n>>> myplot3d = gm.new_plot(plot_type='3D', title='My 3D Plot')\n\n>>> gm.plot_function(myplot3d, 'sin(x)*cos(y)', label='sin(x)*cos(y)')\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_function-2.png\n\nIf the *label* argument is not given or is set to *None*, gnuplot will automatically\nuse the function string as a label for the plot legend. If you don't want any label to be shown,\npass the argument *label=\"\"* (empty string).\n\n\n   \nAdding a mathematical expression\n--------------------------------\n\nBy default, *plot_function()* removes anything\nthat was previously plotted on the window. \nYou can use the *replot=True* option to plot the function\non top of what was plotted before\n\n>>> gm.plot_function(myplot2d, 'x*x', label='y=x^2')\n(0, 'Ok')\n>>> gm.plot_function(myplot2d, '2*x*x', label='y=2x^2', replot=True)\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_functions-1.png\n\nPlotting several mathematical expressions\n-----------------------------------------\n\nThe function *plot_functions()* allows to plot an arbitrary number of\nmathematical expression in a single plot operation, and allows to give a string\nwith additional gnuplot options for each of them. \n\nThe expression to be plotted must be recorded in a list, each element of which\nis itself a list of 3 strings:\n\n- the first one is the math expression;\n- the second is the label to be shown on the plot legend;\n- the third contains additional options you want to give to gnuplot, [#options2]_\n  or *None* if you do not want to give them.\n\n.. [#options2] note that no check is made that the string contains valid gnuplot options.  \n\n>>> list2d = [ ['x*x', 'y=x^2', 'with lines'],  ['2*x*x', 'y=2x^2','with points'] ]\n>>> gm.plot_functions(myplot2d, list2d)\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_functions-2.png\n\n>>> list3d = [ ['sin(x)*cos(y)', 'z=sin(x)cos(y)', None], ['2*sin(x)*cos(y)', 'z=2sin(x)cos(y)', None] ]\n>>> gm.plot_functions(myplot3d, list3d)\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_functions-3.png\n\nIf you don't want to set labels manually, put *None* in their place and gnuplot\nwill automatically create them, or put \"\" (empty string) and no label will be shown.\n\nYou can pass the *replot=True* argument to plot functions without \ndeleting anything was plotted before.\n\nA single math expression can be plotted also, with the possibility to give additional\noptions to gnuplot (remember double square brackets):\n\n>>> gm.plot_functions(myplot2d, [ ['x*x', 'y=x^2', 'with linespoints'] ])\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_functions-4.png\n           \n\nChecking window properties\n==========================\n\nPrinting information on a plot window \n--------------------------------------\n\nThe *plot_check()* function prints information about the plot window\ngiven as argument: \n\n>>> myplot = gm.new_plot(plot_type='2D', title='2D plot')\n>>> x = numpy.linspace(0,100,101)\n>>> y = x * x\n>>> z = y * x / 100\n>>> gm.plot2d(myplot, x, y, label='y=x^2')\n(0, 'Ok')\n>>> gm.plot_function(myplot, 'x**2', replot=True)\n(0, 'Ok')\n>>> gm.plot2d(myplot, x, z, label='y=x^3/100', volatile=True, replot=True)\n(0, 'Ok')\n>>> gm.plot_check(myplot)\nWindow index:         0\nWindow number:        0\nTerminal type:        \"x11\"\nPersistence:          \"False\"\nPurge:                \"True\"\nWindow type:          \"2D\"\nWindow title:         \"2D plot\"\nNumber of functions:  1\nNumber of curves:     1\nNumber of volatiles:  1\nX-axis range:         [None,None]\nY-axis range:         [None,None]\n(0, 'Ok')\n\nIf the *expanded=True* argument is given, it prints more information,\nincluding the PID of the gnuplot process and the names of the\ndatafiles:\n\n>>> gm.plot_check(myplot, expanded=True)\nWindow index:         0\nWindow number:        0\nTerminal type:        \"x11\"\nPersistence:          \"False\"\nPurge:                \"True\"\nWindow type:          \"2D\"\nWindow title:         \"2D plot\"\nNumber of functions:  1\nNumber of curves:     1\nNumber of volatiles:  1\nX-axis range:         [None,None]\nY-axis range:         [None,None]\nGnuplot process PID:  58937\nGnuplot output file:  \"/dev/stdout\"\nGnuplot errors file:  \"/dev/stderr\"\nFunctions\n#  0: \"x**2\"\nCurves\n#  0: \"gnuplot.out/data/gnuplot_data_w0_2D(2D plot)_c0(y=x^2).csv\"\n(0,'Ok')     \n\n.. note:: *Window index* is the index of the plot window inside the global\n   variable *window_list*, while *Window number* is a unique number attributed\n   to the plot window when it is created, which is used mainly to generate\n   unique names for the data files. The former may change [#window_index]_,\n   while the latter is fixed for the plot window life.\n\n.. [#window_index] As an example, if the first window in *window_list* is closed,\n   being removed from the list and causing a shift of the indexes.\n\n\nThe function takes two more arguments:\n\n*printout* (default is *True*): \n    if set to *True*, the output is printed on */dev/stdout/* \n*getstring* (default is *False*): \n    if set to *True*, a string with the output is returned. \n    This can be useful to write the output to a file or inside a GUI window.            \n\n\nPrinting information on all plot windows\n----------------------------------------\n\nThe *plot_list()* function prints the same information given by the\n*plot_check()* function, for all the open windows. \n\n\n\nClosing plot windows\n====================\n\nClosing a single plot window\n----------------------------\n\nWhen you do not need a plot window anymore, you can close it by means of\nthe *plot_close()* function, which performs the following actions:\n\n- terminates the gnuplot process associated to the *_PlotWindow* instance\n  given as argument, by sending the *quit* gnuplot command to it;\n- sets the *plot_type* attribute of the *_PlotWindow* instance  to *None*;\n- removes the *_PlotWindow* instance from the *window_list* global variable.\n\n.. note:: Closing the window on the screen by clicking on its \n   close button, *does not* close the gnuplot terminal and \n   *does not* remove the *_PlotWindow* instance from the list.\n\nThe name given to the *_PlotWindow* instance (e.g. *myplot*) is not removed\nfrom the namespace. However, if you try to pass it to any function of the package,\nan error message is returned:\n\n>>> gm.plot_close(myplot2d)\n(0. 'Ok')\n>>> gm.plot_function(myplot2d, 'x**2')\n(11, 'trying to operate on a closed plot window')\n\n\nEffects of removing plot window names\n-------------------------------------\n\nNote that if you create a plot window with a name (e.g. *myplot*) and then\na second one with the same name, the first one is still in memory\n(and the associated gnuplot process is still active), but is not\nlinked to that name (*myplot*) anymore. Example::\n\n    >>> myplot = gm.new_plot()\n    >>> myplot = gm.new_plot(plot_type='3D')\n    >>> gm.plot_list()\n    Window index:         0\n    Window number:        0\n    Terminal type:        \"x11\"\n    Persistence:          \"False\"\n    Purge:                \"True\"\n    Window type:          \"2D\"\n    Window title:         \"None\"\n    Number of functions:  0\n    Number of curves:     0\n    Number of volatiles:  0\n    X-axis range:         [None,None]\n    Y-axis range:         [None,None]\n\n    Window index:         1\n    Window number:        1\n    Terminal type:        \"x11\"\n    Persistence:          \"False\"\n    Purge:                \"True\"\n    Window type:          \"3D\"\n    Window title:         \"None\"\n    Number of functions:  0\n    Number of curves:     0\n    Number of volatiles:  0\n    X-axis range:         [None,None]\n    Y-axis range:         [None,None]\n    Z-axis range:         [None,None]\n    (0, 'Ok')\n\nHere we have used the *plot_list()* function, which is described in the\n`Checking window properties`_ section, to list all the open windows.\nNow we have two plot windows, one 2D and one 3D, but only the second one\nis linked to the name *myplot*, while the first one is not linked anymore\nto any name. However, the first window is still present in the *window_list*\nglobal variable, so it is shown in the list of windows.\n\nSimilarly, if you remove the plot window name from the namespace (e.g. by the\n*del* command) without having called the *plot_close()* function before,\nthe associated *_PlotWindow* instance and its gnuplot process are *not* closed,\nand are still present in the *window_list* variable. Example::\n\n    >>> myplot = gm.new_plot()\n    >>> gm.plot_check(myplot)\n    Window index:         0\n    Window number:        0\n    Terminal type:        \"x11\"\n    Persistence:          \"False\"\n    Purge:                \"True\"\n    Window type:          \"2D\"\n    Window title:         \"None\"\n    Number of functions:  0\n    Number of curves:     0\n    Number of volatiles:  0\n    X-axis range:         [None,None]\n    Y-axis range:         [None,None]\n    (0, 'Ok') \n\n    >>> del myplot\n    >>> gm.plot_check(myplot)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    NameError: name 'myplot' is not defined\n\n    >>> gm.plot_list()\n    Window index:         0\n    Window number:        0\n    Terminal type:        \"x11\"\n    Persistence:          \"False\"\n    Purge:                \"True\"\n    Window type:          \"2D\"\n    Window title:         \"None\"\n    Number of functions:  0\n    Number of curves:     0\n    Number of volatiles:  0\n    X-axis range:         [None,None]\n    Y-axis range:         [None,None]\n    (0, 'Ok') \n\nAfter deleting the *myplot* name, it is not possible to check the plot window\nby  *plot_check(myplot)*, because the window is not anymore linked to that name.\nHowever, we can still check the plot window using the *plot_list()* function,\nsince it relies on the content of the *window_list* global variable, which was\nnot altered by the *del* command.\nIt is also still possible to reference the window as *window_list[index]*, where\n*index* is the window index given in the output of the *plot_list()* function.\n\nYou could also create a plot window (i.e. a *_PlotWindow* instance) without giving\na name to it:\n\n>>> x = linspace(0,100,101)\n>>> gm.plot1d(gm.new_plot(),x)\n\nin this way, the plot window is created and passed directly as argument to\nthe plot function (*plot1d()* in this example) without giving a name to it.\nAlso in this case, the newly created plot window will appear in  the output\nof the *plot_list()* function.\n    \nThe *plot_close_all()* function, described in the\n`Closing all the open windows at once`_ paragraph, closes all the plot windows\n(and terminates their associated gnuplot processes), including the ones \nwhich are not linked to any name.\n\n\nDeleting the output files\n-------------------------\n\nWhen a plot window is closed, the data files associated to the curves\nare deleted or not, depending on the value of its *purge* attribute,\nwhich was set when the plot window was opened according to the value\nof the *purge* argument passed to the *new_plot()* function.\nExamples:\n\n>>> myplot = gm.new_plot(purge=True)\n\nthe datafiles will be deleted each time new data is plotted (without giving\nthe *replot=True* argument) and when the window is closed;\n\n>>> myplot = gm.new_plot(purge=False)\n\nthe datafiles will *not* be deleted each time new data is plotted and\n*not* be deleted when the window is closed.\n\n\nThe default behavior is stored in the *PURGE_DATA* global variable:\n\n>>> print(gm.PURGE_DATA)\nTrue\n\nIf the plot was opened passing the *redirect_output=True* argument,  \nthe files on which the gnuplot output and errors have been redirected\nare deleted or not in the same way. If you want to preserve them,\nwhen the the window has the *purge* option active, you can pass the\n*keep_output=True* argument to the *plot_close()* function.\n\n\nThe optional *delay* parameter specifies a time (in seconds) to wait before\ndeleting the data files, after the *quit* command has been sent to gnuplot.\nThis can be useful in some circumstances, for example if you want to create\na persistent window, plot something complex on it, and then close the gnuplot\nprocess leaving only the window open:\n\n>>> myplot = gm.new_plot(persistence=True, purge=True)\n>>> x = numpy.linspace(0, 1000, 1000000)\n>>> y = x * x\n>>> gm.plot2d(myplot, x, y)\n(0, 'Ok')\n>>> gm.plot_close(myplot, delay=1)\n(0, 'Ok')\n\nWhen the *plot_close()* function is called, it immediately sends the\n*quit* command to gnuplot, but it is executed only when gnuplot\nhas completed the plot operation started by the *plot2d()* function.\nIf the datafiles were deleted immediately after sending the *quit* command,\nthey could be removed while the plot operation (plotting one million points) is still in progress.\n\n\nClosing all the open windows at once\n------------------------------------\n\nThe *plot_close_all()* function closes all the plot windows listed in the *window_list*\nglobal variable, and empties it. It works calling the *plot_close()* function, so it gets\nthe same arguments.\n\n>>> gm.plot_close_all()\n(0, 'Ok')\n\nBy default, the function tries to delete the *gnuplot.out* directory, if it is empty.\nIf you don't want to delete it, you can pass the *purge_dir=False* argument.\n\n\nPerforming other actions\n========================\n\nChanging the window properties\n------------------------------\n\nYou can change some properties of a plot window, such as logarithmic scale or\nrange of the axes, using the *plot_set()* function.\nExample, to set logarithmic x axis:\n\n>>> myplot = gm.new_plot(logx=False)\n>>> gm.plot_set(myplot, logx=True)   # I have changed my mind...\n(0, 'Ok')\n\nBy default, the new options are applied when a new curve or\nfunction is plotted: if you want to apply them immediately, on\nthe already plotted items, pass the *replot=True* argument:\n\n>>> x = numpy.linspace(1, 100, 100)\n>>> y = numpy.exp(x)\n>>> gm.plot2d(myplot, x, y)\n(0, 'Ok')\n>>> gm.plot_set(myplot, logx=False, logy=True, replot=True)\n(0, 'Ok')\n\nTo know which settings are available, read the function docstring:\n\n>>> help(gm.plot_set)\n\nOnly a few of the many possible settings provided by gnuplot\nare implemented in this function. However, you can use the *plot_command()*\nfunction to send to gnuplot any command you wish, as described in the\nsection `Sending arbitrary commands to gnuplot`_.\n\n\nRefreshing windows\n------------------\n\nYou can refresh the plot window at any time using the *plot_replot()* function:\n\n>>> gm.plot_replot(myplot)\n(0, 'Ok')\n\nIf you have closed the window by clicking on its close button, this will cause\nit to reappear.\n\nYou can refresh all plot windows at once by the *plot_replot_all()* function:\n\n>>> gm.plot_replot_all()\n(0, 'Ok')\n\n\nResetting windows\n-----------------\n\nThe *plot_reset()* function allows to reset the window properties:\n\n- removes all the curves and functions\n- clears the plot area\n\nThe *plot_axes* argument, which is *True* by default, tells the function to\nplot the axes [#plotaxes]_ after having cleared the window.\n\nIf one axis has a defined range which is completely negative (e.g. [-2,-1])\nand the logarithmic scale has been set, the linear scale is restored since\nit would be impossible to plot any data.\n\n.. [#plotaxes] to force gnuplot draw the axis, a small dot is plotted,\n   which is barely visible, and is automatically removed as soon as\n   something is plotted on the window.\n\nThe *plot_reset_all()* function resets all the plot windows at once.\n\n\n\nPrinting a label on the plot window\n-----------------------------------\n\nYou can print an arbitrary string on the plot window using the *plot_label()* function\n\n>>> myplot = gm.new_plot()\n>>> gm.plot_label(myplot, x=10, y=10, label='This is a parabola !', erase=False)\n(0, 'Ok')\n>>> gm.plot_function(myplot,'x**2')\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_label-1.png\n\nx and y give the position at which the string must be printed, expressed in \ncharacters, starting from the lower-left angle (x=1,y=1) of the graph.\nThe *erase=True* argument removes all previously printed strings before \nprinting this one. If you pass the *erase=True*, but don't pass the\n*label* argument, the plot is cleared from previously printed labels:\n\n>>> gm.plot_label(myplot, erase=True)\n(0, 'Ok')\n\nBy default, the label is not printed immediately, but is shown when\na new curve of function is plotted. If you want the label to be shown\nimmediately, you can pass the *replot=True* argument.  However, it\nwill work only if some plots or curves have been plotted before\n(and therefore can be replotted).\n\n>>> gm.plot_label(myplot, x=50, y=20, label='Hello !', erase=False, replot=True)\n(0, 'Ok')\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/plot_label-2.png\n\nRead the function docstring for more details:\n\n>>> help(gm.plot_label)\n\n\nExporting a plot window to a file\n---------------------------------\n\nA plot can be exported to a file in various formats using the\n*plot_print()* function. The first argument passed must be the\n*_PlotWindow* instance of the plot you want to export, followed\nby the following optional arguments:\n\n- the terminal used to create the image;\n- the directory in which file must be saved (default is the CWD);\n- the filename;\n- an optional string with additional options to pass to gnuplot.\n\nExample:\n\n>>> myplot = gm.new_plot()\n>>> gm.plot_function(myplot, 'cos(x)')\n(0,'Ok')\n>>> gm.plot_print(myplot, terminal='png', dirname='images', filename='cosx.png', options='background \\\"#c0c000\\\"')\n(0, 'Ok')\n\nThe file *cosx.png* is saved in the *images* directory, which is created in the\ncurrent working directory if it doesn't exist yet, with the following image:\n\n.. image:: https://raw.githubusercontent.com/pietromandracci/gnuplot_manager/master/images/cosx.png\n           \nIf the filename is not given, a default name is given to the\noutput file, in the form:\n\n*output_window#<n>.<ext>*\n\n- *<n>* is the window number (*window_number* attribute of the\n  *_PlotWindow* instance)\n- *<ext>* is a standard extension depending on the terminal,\n  (e.g. '.png' for png terminal).\n\nThe default terminal is stored in the global variable *DEFAULT_PRINT_TERM*,\nwhile the list of allowed terminals is stored in *PRINT_TERMINALS*:\n\n>>> print(gm.DEFAULT_PRINT_TERM)\npng\n>>> print(gm.PRINT_TERMINALS)\n('png', 'jpeg', 'eps', 'gif', 'svg', 'latex', 'postscript', 'pdfcairo', 'dumb')\n\nRead the function docstring for more details:\n\n>>> help(gm.plot_print)\n\nExporting all the plot windows\n------------------------------\n\nYou can also export all the open plot windows at once, using the *plot_print_all()*\nfunction. In this case, however, the default filenames are used, and the options,\nif given, are the same for all the windows.  You can still pass the argument *dirname*\nto select a directory where all the files must be saved. Example:\n\n>>> gm.plot_print_all(dirname='images')\n\nall the open plots will be saved in the *images* directory, which will be created if it\ndoesn't exist yet.\n\n  \nSending arbitrary commands to gnuplot\n-------------------------------------\n\nYou can send arbitrary commands to the gnuplot process associated to\na plot window using the *plot_command()* function:\n\n>>> myplot=gm.new_plot()\n>>> gm.plot_command(myplot,string='<gnuplot-command>')\n\n.. note:: No check is made that the string you provide is a valid\n   gnuplot command: if it is not, gnuplot rises an error, which\n   can be printed on console, written to file, or discarted, depending\n   on the value given to the *redirect_output* parameter\n   when the function *new_plot()* was called to create the plot.\n\n\nList of available functions\n===========================\n\nRead the doctrings for a complete description of each function.\n\nCreate, modify, and close plot windows\n--------------------------------------\n\n*new_plot()*\n    create a new plot window\n*plot_set()*\n    modify some properties of a previously created window\n*plot_command()*\n    send a command to the gnuplot process\n*plot_close()*\n    close the plot window and terminate the gnuplot process\n*plot_close_all()*\n    close all the plot windows and terminate all the gnuplot processes \n\n\nPlot data\n---------\n\n*plot1d()*\n    plot a curve from 1d data\n*plot2d()*\n    plot a curve from 2d data\n*plot3d()*\n    plot a curve from 3d data\n*plot_box()*\n    plot a boxplot from 1d data\n*plot_curves()*\n    plot several curves at the same time\n\nPlot mathematical functions\n---------------------------\n\n*plot_function()*\n    plot a mathematical expression\n*plot_functions()*\n    plot several mathematical expression at once\n\n\nPrint plots to files\n--------------------\n\n*plot_print()*\n    export a plot to a file\n\n*plot_print_all()*\n    export to files all the open plots\n\n\nReset, clear and refresh plots\n------------------------------\n\n*plot_reset()*\n    reset a plot: remove all curves and functions\n    and the clear the window \n*plot_reset_all()*\n    reset all plot windows\n*plot_clear()*\n    clear the plot area\n*plot_clear_all()*\n    clear the plot area of all plots\n*plot_replot()*\n    refresh the plot window\n*plot_replot_all()*\n    refresh all the plot windows\n\n\nUtility functions\n-----------------\n\n*plot_label()*\n    print a string on the plot\n*plot_raise()*\n    rise the plot window over the other windows on the screen\n*plot_lower()*\n    lower the plot window under the other windows on the screen\n*plot_raise_all()*\n    rise all the plot windows    \n*plot_lower_all()*\n    lower all the plot windows\n*plot_check()*\n    print the plot properties\n*plot_list()*\n    print the properties of all plots\n\n\nThe *_PlotWindow* class\n=======================\n\nEach plot window is an instance of the *_PlotWindow* class, \nwhich has several attributes:\n\n*self.window_number*:   \n    an integer number that identifies the plot window, [#window_number]_                               \n    mainly used to generate unique names for the data files\n*self.gnuplot_process*: \n     gnuplot process (instance of *subprocess.Popen*)    \n*self.term_type*:\n    the type of gnuplot terminal    \n*self.plot_type*:\n    a string defining the type of plot : '2D', '3D',\n    or *None* if the plot window has been closed\n*self.n_axes:*\n    number of plot axes (2 for 2D plots, 3 for 3D ones)\n*self.xmin*:\n    minimum of the x-axis (*None* if not set)\n*self.xmax*:\n    maximum of the x-axis (*None* if not set)\n*self.ymin*:\n    minimum of the y-axis (*None* if not set)\n*self.ymax*:\n    maximum of the y-axis (*None* if not set)\n*self.zmin*:\n    minimum of the z-axis (*None* if not set)\n*self.zmax*:\n    maximum of the z-axis (*None* if not set)\n*self.persistence*:\n    *True* if the plot was opened as persistent\n*self.title*:\n    the window title (*None* if not given)\n*self.filename_out*: \n     name of the file to which gnuplot output is redirected\n*self.filename_err*:\n     name of the file to which gnuplot errors are redirected     \n*self.data_filenames*:\n     list containing the names of the datafiles related to the\n     curves presently plotted on the window\n*self.n_volatiles*:\n     number of curves that have been plotted using the *volatile=True*\n     argument: they are not listed in *self.data_filenames* since\n     there are no associated data files\n*self.functions*:\n     list containing the function strings [#functions]_\n*slef.purge*:\n     if True, old data files are removed when new data is plotted\n     without the *replot=True* option or when the window is closed\n*self.error*:\n     if there was an error while creating the plot window,\n     an error message is stored here\n\n.. [#window_number] Note that this number is *not* the index that identifies the\n   plot window inside the *window_list* variable: in fact the former is fixed,\n   while the latter may change when other windows are removed from the list.\n\n.. [#functions] Note that no check is made that function strings given to gnuplot \n   are correct. So even wrong ones (which therefore gnuplot has not plotted)\n   are listed here.\n\n.. note:: If you modify the plot by sending commands to gnuplot directly, using\n   the *plot_command()* function, some of these attributes, such as the number of curves \n   and the list of data files, may not be updated properly.\n\nThe *_PlotWindow* class have some methods also, which are called by the functions\nof the *functions.py* module to perform their tasks:\n\n*self._command()*\n    method used to send commands to gnuplot\n*self._quit_gnuplot()*\n    method used to terminate the gnuplot process and close the window\n*self._add_functions()*\n    method used to add one or more mathematical expression\n*self._add_curves()*\n    method used to add one or more curves from data\n\n.. note:: Since the package is designed to use the functions in the\n   *functions.py* module, these methods are not intended to be called directly.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pietromandracci/gnuplot_manager",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gnuplot-manager",
    "package_url": "https://pypi.org/project/gnuplot-manager/",
    "platform": null,
    "project_url": "https://pypi.org/project/gnuplot-manager/",
    "project_urls": {
      "Homepage": "https://github.com/pietromandracci/gnuplot_manager"
    },
    "release_url": "https://pypi.org/project/gnuplot-manager/0.1.6/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A manager to symplify the use of gnuplot inside python",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14850029,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fa636743e7f86c752eca7ab146e57e8a9f7c7bd5ee9a6057ad4404cb43bd5b1",
          "md5": "4997b9c37b5ddf4f2278faed0d647e33",
          "sha256": "b5273ca6fe5b220e27a5f6092bcf94d58424a070e73ab70e28a50c8a2311bc0a"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4997b9c37b5ddf4f2278faed0d647e33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 45513,
        "upload_time": "2020-11-13T20:54:44",
        "upload_time_iso_8601": "2020-11-13T20:54:44.768662Z",
        "url": "https://files.pythonhosted.org/packages/3f/a6/36743e7f86c752eca7ab146e57e8a9f7c7bd5ee9a6057ad4404cb43bd5b1/gnuplot_manager-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ad42c3e75bea35c0cc4711f8b3e80061f4c8c8db40cb2d5deca9d38da43fdb8",
          "md5": "3237e17e8ff34a03de8aede6012d1b18",
          "sha256": "f172781ca6b05ade19ac4c90b5c7d91a4ed8c38f9cd61d43f831dd9585254f29"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3237e17e8ff34a03de8aede6012d1b18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 45834,
        "upload_time": "2020-11-13T20:54:46",
        "upload_time_iso_8601": "2020-11-13T20:54:46.611465Z",
        "url": "https://files.pythonhosted.org/packages/6a/d4/2c3e75bea35c0cc4711f8b3e80061f4c8c8db40cb2d5deca9d38da43fdb8/gnuplot_manager-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5baacdd4839a33a28fbf51b93040aeac40ad7ad6847c2e2d4c9c72c398a1c8ab",
          "md5": "6dc6368e0a655c77e02119ddbdd7d2c0",
          "sha256": "0e3d626c03d291e66040822042784e03730ba89d815afb8d683c6c5a4e01208e"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6dc6368e0a655c77e02119ddbdd7d2c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 43313,
        "upload_time": "2020-11-18T16:35:27",
        "upload_time_iso_8601": "2020-11-18T16:35:27.352580Z",
        "url": "https://files.pythonhosted.org/packages/5b/aa/cdd4839a33a28fbf51b93040aeac40ad7ad6847c2e2d4c9c72c398a1c8ab/gnuplot_manager-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64e048d7fad7fa7112cccc5649af915c2962c96d78330a35660a8075ccaf9b67",
          "md5": "86d20fc76f56aebcb258290cbdd9e296",
          "sha256": "170fa01c0909b03dd39eb87eaa82ba49805ef12b2a05519eba15ab712665674a"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "86d20fc76f56aebcb258290cbdd9e296",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 48583,
        "upload_time": "2020-11-18T16:35:29",
        "upload_time_iso_8601": "2020-11-18T16:35:29.023448Z",
        "url": "https://files.pythonhosted.org/packages/64/e0/48d7fad7fa7112cccc5649af915c2962c96d78330a35660a8075ccaf9b67/gnuplot_manager-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "956e1e7197a221df21255e8552da9c7f9c10b850b1e9f80c6962a96c1724f1fd",
          "md5": "62020261bc0c33240b54017ec7e7dedd",
          "sha256": "3b68cb0aeb45b8adc7a0d9641291a9c8614bae8b25ba83e3ef07a6d323615549"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62020261bc0c33240b54017ec7e7dedd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 44563,
        "upload_time": "2020-11-18T21:31:20",
        "upload_time_iso_8601": "2020-11-18T21:31:20.126380Z",
        "url": "https://files.pythonhosted.org/packages/95/6e/1e7197a221df21255e8552da9c7f9c10b850b1e9f80c6962a96c1724f1fd/gnuplot_manager-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1973a3a1d3731b332372e2380756c332bf20ddef700361b071c40e572f89d96",
          "md5": "1dde46beb67b45022f614f200522f528",
          "sha256": "b1fcb8b93806417d5df3c2acdf44e7779d1265829d8868386f4665fde07745a2"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1dde46beb67b45022f614f200522f528",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 49277,
        "upload_time": "2020-11-18T21:31:22",
        "upload_time_iso_8601": "2020-11-18T21:31:22.169084Z",
        "url": "https://files.pythonhosted.org/packages/d1/97/3a3a1d3731b332372e2380756c332bf20ddef700361b071c40e572f89d96/gnuplot_manager-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04fa8080826da06a2adbd5d6ffcb32a79938af91aab0e433bdd5251809da2e46",
          "md5": "d37ca3b5d12aa4d4ffb060a7012cd435",
          "sha256": "6c08c1b87f244944b4fbaf3dc1ec79041f01597ff6f9ce4f37e0cbc9d6bb614c"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d37ca3b5d12aa4d4ffb060a7012cd435",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 46901,
        "upload_time": "2020-11-20T17:36:07",
        "upload_time_iso_8601": "2020-11-20T17:36:07.673906Z",
        "url": "https://files.pythonhosted.org/packages/04/fa/8080826da06a2adbd5d6ffcb32a79938af91aab0e433bdd5251809da2e46/gnuplot_manager-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b0cdef96a3954e03ca3a303537b40702baba57cb28f7bd8943ebf9877b65bc6",
          "md5": "a2f0888f9b69af6d1f49b45fd1a6b5c0",
          "sha256": "ff992d80c78e17e56f86d7ed7770da931733ef656968cbc42f886bae1e6f21cd"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a2f0888f9b69af6d1f49b45fd1a6b5c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 52302,
        "upload_time": "2020-11-20T17:36:09",
        "upload_time_iso_8601": "2020-11-20T17:36:09.940828Z",
        "url": "https://files.pythonhosted.org/packages/5b/0c/def96a3954e03ca3a303537b40702baba57cb28f7bd8943ebf9877b65bc6/gnuplot_manager-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b54e9a4c523b248f880865c3403d106510e60632a0d9ee57e41955380f9c5045",
          "md5": "e1cec9f42b7093570dc0b52bbffad212",
          "sha256": "ef49a8a68e036e7035e8472724bbc2034893ceb2a33ca4324f84d5201f66eb77"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1cec9f42b7093570dc0b52bbffad212",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 51090,
        "upload_time": "2020-11-27T17:13:29",
        "upload_time_iso_8601": "2020-11-27T17:13:29.337396Z",
        "url": "https://files.pythonhosted.org/packages/b5/4e/9a4c523b248f880865c3403d106510e60632a0d9ee57e41955380f9c5045/gnuplot_manager-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c26f66803fb7eadead5a448730e571ae1667cdf33b99348c0851fafca2bb0414",
          "md5": "771217bb781b81fb6ed5e0f491e6ca2c",
          "sha256": "77b299a0049d2cc2a5f9ab6db851fdff99423738b047561a634660a5fce9d74e"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "771217bb781b81fb6ed5e0f491e6ca2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 57731,
        "upload_time": "2020-11-27T17:13:32",
        "upload_time_iso_8601": "2020-11-27T17:13:32.719047Z",
        "url": "https://files.pythonhosted.org/packages/c2/6f/66803fb7eadead5a448730e571ae1667cdf33b99348c0851fafca2bb0414/gnuplot_manager-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ae4e35450028419b6ba9e588de784d87bb1aa6f53cb2a8f79475c088d1768dc",
          "md5": "7e0f3de6e5ebaae17863fa44de7b8bb7",
          "sha256": "cce1d4421d6582cb42bdad4f33e71ab74592de8a42a08ff3732ab34a60c64555"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e0f3de6e5ebaae17863fa44de7b8bb7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 52153,
        "upload_time": "2020-12-11T16:36:01",
        "upload_time_iso_8601": "2020-12-11T16:36:01.904088Z",
        "url": "https://files.pythonhosted.org/packages/6a/e4/e35450028419b6ba9e588de784d87bb1aa6f53cb2a8f79475c088d1768dc/gnuplot_manager-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e24fa9c662a83190000c4117c762e6dcb70c5e7ed70843bd4cc3595bd11c6ea",
          "md5": "96ad241834cf04987043b6a3843686cc",
          "sha256": "933005a13a3924c8c46973d9068909b1bc57f07ed6a4a694c768d4e2608f421e"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "96ad241834cf04987043b6a3843686cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 59721,
        "upload_time": "2020-12-11T16:36:03",
        "upload_time_iso_8601": "2020-12-11T16:36:03.785652Z",
        "url": "https://files.pythonhosted.org/packages/8e/24/fa9c662a83190000c4117c762e6dcb70c5e7ed70843bd4cc3595bd11c6ea/gnuplot_manager-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17e3372788c8021e2966f344157bfe6dd27ce8f51a02d80b6f389f218609af4f",
          "md5": "3a84e93ac04924e0be3506986a1ffe75",
          "sha256": "de76ad996be54cc4277f295979816702222b6b8bd3651c57afedc915ccb7516c"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a84e93ac04924e0be3506986a1ffe75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 51492,
        "upload_time": "2022-08-23T14:53:37",
        "upload_time_iso_8601": "2022-08-23T14:53:37.830760Z",
        "url": "https://files.pythonhosted.org/packages/17/e3/372788c8021e2966f344157bfe6dd27ce8f51a02d80b6f389f218609af4f/gnuplot_manager-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a6bccea216e0b1f18b3e713477926d50ef50b9cca7b804c3a1a1655d2835ee3",
          "md5": "e85c6bcbf2625d75688f5b7b98a22e92",
          "sha256": "e86a5a541c3d3f3f35b02775007a587263c11c171d166a7622d79306fa6c1e47"
        },
        "downloads": -1,
        "filename": "gnuplot_manager-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e85c6bcbf2625d75688f5b7b98a22e92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 70407,
        "upload_time": "2022-08-23T14:53:39",
        "upload_time_iso_8601": "2022-08-23T14:53:39.922328Z",
        "url": "https://files.pythonhosted.org/packages/8a/6b/ccea216e0b1f18b3e713477926d50ef50b9cca7b804c3a1a1655d2835ee3/gnuplot_manager-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17e3372788c8021e2966f344157bfe6dd27ce8f51a02d80b6f389f218609af4f",
        "md5": "3a84e93ac04924e0be3506986a1ffe75",
        "sha256": "de76ad996be54cc4277f295979816702222b6b8bd3651c57afedc915ccb7516c"
      },
      "downloads": -1,
      "filename": "gnuplot_manager-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a84e93ac04924e0be3506986a1ffe75",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 51492,
      "upload_time": "2022-08-23T14:53:37",
      "upload_time_iso_8601": "2022-08-23T14:53:37.830760Z",
      "url": "https://files.pythonhosted.org/packages/17/e3/372788c8021e2966f344157bfe6dd27ce8f51a02d80b6f389f218609af4f/gnuplot_manager-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a6bccea216e0b1f18b3e713477926d50ef50b9cca7b804c3a1a1655d2835ee3",
        "md5": "e85c6bcbf2625d75688f5b7b98a22e92",
        "sha256": "e86a5a541c3d3f3f35b02775007a587263c11c171d166a7622d79306fa6c1e47"
      },
      "downloads": -1,
      "filename": "gnuplot_manager-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "e85c6bcbf2625d75688f5b7b98a22e92",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 70407,
      "upload_time": "2022-08-23T14:53:39",
      "upload_time_iso_8601": "2022-08-23T14:53:39.922328Z",
      "url": "https://files.pythonhosted.org/packages/8a/6b/ccea216e0b1f18b3e713477926d50ef50b9cca7b804c3a1a1655d2835ee3/gnuplot_manager-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}