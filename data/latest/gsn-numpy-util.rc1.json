{
  "info": {
    "author": "Greg Novak",
    "author_email": "greg.novak@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "================\n gsn_numpy_util\n================\n\nVarious utilities for computing things with information contained in\nNumpy arrays.\n\nYou can find code and dowloads at the Launchpad page or the PyPI page\n\nhttp://launchpad.net/gsn-numpy-util\n\nhttp://pypi.python.org/pypi/gsn_numpy_util\n\nInstallation\n============\n\nAny of the standard incantations works:\n\n*  pip gsn_numpy_util\n*  easy_install gsn_numpy_util\n*  python setup.py install \n\nDependencies: \n\n* numpy (http://www.numpy.org)\n* gsn_util (http://pypi.python.org/pypi/gsn_util)\n\nRecommended: \n\n* scipy (http://www.scipy.org)\n\nOptional:\n\n* sersic (http://pypi.python.org/pypi/sersic)\n* PyX (http://pyx.sourceforge.net/)\n\nUsage\n=====\n\nThe module name is rather verbose to avoid name clashes since many\npeople out there will have personal modules called numpy_util or\nsomething similar.  When I use the package I always import it as::\n\n  import gsn_numpy_util as nu\n\nnumpy_util.py\n-------------\n\nAll of the symbols defined in numpy_util are imported into the\ngsn_numpy_util module, so these symbols are accessible via:\n\n>>> import gsn_numpy_util as nu\n>>> nu.y(2,1,pi/2, 3*pi/2)\n\nContents:\n\n* real and complex spherical harmonics (y, ry)\n* functions to remove inf and nan from arrays (all_good, good_data,\n  clipOdd)\n* fortran unformatted i/o (write_fortran, read_fortran,\n  read_fortran_inplace, skip_fortran)\n* Making coordinate grids (grid_nd, make_grid)\n* Binning particle positions in N dimensions (image, flattenMap,\n  unflattenMap, histo, histo2d, partition)\n* Elaborations of Fourier transforms--sin transform, cosine transform,\n  etc. (power_spectrum, sine_transform, cosine_transform, fst, ifst,\n  fct, ifct transform_n, fstn, ifstn, fctn, ifctn, trig_freq, rdct,\n  irdct, rdst, irdst, dct, idct, dst, idst rdstfreq, rdctfreq)\n* Poisson solver using various FFT-based methods (poisson,\n  poisson_fft, poisson_fst, poisson_fct, big_poisson, big_poisson_fft,\n  big_poisson_fst, big_poisson_fct)\n* An implementation of large, disk-based arrays (BigArray) along with\n  transformations on those arrays (e.g. big_fftn)\n* Properties of time-series information crossing a threshold\n  (seq_transitions, seq_transitions_idx, seq_length, seq_length_above,\n  seq_length_below)\n* Averaging and rebinning arrays (rebin, ave, lave)\n* vector calculus, (div, grad, curl, laplacian)\n* bit and boolean arrays (boolmat, bitmat, boolarr, bitarr)\n* Random deviates (randp, randlog)\n* coordinate systems and transformations (cartesian, spherical,\n  graham_schmidt)\n* Weighted mean, standard deviation, geometric mean, etc\n  (weighted_mean, weighted_std, geometric_mean, rms)\n* Getting unique values and determining set membership with arrays.\n  Note that numpy has a setmember1d function, but years ago it got\n  confused with when there were duplicate elements in the array.\n  (unique1d, setmember1d)\n\nparticles.py\n------------\n\nCalculate properties of particle distributions.\n\nAccessible via\n\n>>> import gsn_numpy_util as nu\n>>> nu.particles.ellipticity(rs, ms)\n\nContents:\n\n* basic transformations: rotations, affine transforms, etc.\n* basic vector operations: magnitude, inner product, etc.\n* properties of particle distributions: center of mass, angular\n  momentum\n* shape of particle distributions calculated by diagonalizing moment\n  of inertia tensor\n* shape of particle distributions by minimizing dipole and quadrupole\n  moments of distribution\n* Calculation of higher order (octupole, etc) Fourier coefficients\n* mass profile, density profile, velocity dispersion profile\n* find center of particle dist by various algorithms\n* implementations of friend-of-friends (transitive closure) algorithms\n* find particle groups via bound-density-maximum algorithm from Anatoly Klypin\n* Coordinate transformations spherical, cylindrical, \n* binning particles into grids in N dimensions\n\ngraph.py\n--------\n\nSimple implementation of graphs and functions to compute a few\nproperties.\n\nAccessible via\n\n>>> import gsn_numpy_util as nu\n>>> nu.graph.dfs(graph)\n\nContents:\n\n* Graph class\n* Equivalence class class\n* Several implementations of transitive closure\n* breadth first search, depth first search\n\nTests\n=====\n\nTo run the tests:\n\npython -m unittest gsn_numpy_util.test.test_numpy_util\n\npython -m unittest gsn_numpy_util.test.test_particles\n\npython -m unittest gsn_numpy_util.test.test_graph\n\nLicense\n=======\n\nThe code is released under the MIT license, so you should be able to\ndo whatever you want with it.  \n\nIf you incorporate this code into a larger project, I would appreciate\nit if you send me a note at greg.novak@gmail.com",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/gsn_numpy_util/",
    "keywords": null,
    "license": "MIT (X11) License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "gsn_numpy_util",
    "package_url": "https://pypi.org/project/gsn_numpy_util/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/gsn_numpy_util/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/gsn_numpy_util/"
    },
    "release_url": "https://pypi.org/project/gsn_numpy_util/0.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Toolbox for working with Numpy arrays.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 792744,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "271d5bf5efe1b045b502a07343c263d071f7187f7253618472c63c34fad38da0",
          "md5": "09e0ade80445c94e2cda0988ec2cc95a",
          "sha256": "379738b7943547211851758de7db1c09594cdd97274b9717e05a27c2b7faf39d"
        },
        "downloads": -1,
        "filename": "gsn_numpy_util-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "09e0ade80445c94e2cda0988ec2cc95a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56237,
        "upload_time": "2013-04-20T18:29:26",
        "upload_time_iso_8601": "2013-04-20T18:29:26.459021Z",
        "url": "https://files.pythonhosted.org/packages/27/1d/5bf5efe1b045b502a07343c263d071f7187f7253618472c63c34fad38da0/gsn_numpy_util-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "271d5bf5efe1b045b502a07343c263d071f7187f7253618472c63c34fad38da0",
        "md5": "09e0ade80445c94e2cda0988ec2cc95a",
        "sha256": "379738b7943547211851758de7db1c09594cdd97274b9717e05a27c2b7faf39d"
      },
      "downloads": -1,
      "filename": "gsn_numpy_util-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "09e0ade80445c94e2cda0988ec2cc95a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 56237,
      "upload_time": "2013-04-20T18:29:26",
      "upload_time_iso_8601": "2013-04-20T18:29:26.459021Z",
      "url": "https://files.pythonhosted.org/packages/27/1d/5bf5efe1b045b502a07343c263d071f7187f7253618472c63c34fad38da0/gsn_numpy_util-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}