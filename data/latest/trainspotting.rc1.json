{
  "info": {
    "author": "RB387",
    "author_email": "zavadin142@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "![trainspotting](https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Trainspotting-logo.svg/456px-Trainspotting-logo.svg.png)\n## Choose dependency injection\n* Friendly with MyPy\n* Supports lazy injections\n* Supports fabrics with environment variables\n* Can connect/disconnect clients in correct order \n### Install\n```\npip install trainspotting\n```\n\n### Contact\nFeel free to ask questions in telegram [t.me/PulitzerKenny](<https://t.me/PulitzerKenny>)\n\n### Examples\n```python\nfrom typing import Protocol\nfrom dataclasses import dataclass\nfrom trainspotting import DependencyInjector\nfrom trainspotting.factory import factory, EnvField\n\n\nclass TransportProtocol(Protocol):\n    def go(self): ...\n\nclass EngineProtocol(Protocol):\n    def start(self): ...\n\nclass HeadlightsProtocol(Protocol):\n    def light(self): ...\n\n@dataclass\nclass Driver:\n    transport: TransportProtocol\n    \n    def drive(self):\n        self.transport.go()\n\n@dataclass\nclass V8Engine:\n    sound: str\n\n    def start(self):\n        print(self.sound)\n\n@dataclass\nclass XenonHeadlights:\n    brightness: int\n\n    def light(self):\n        print(f'LIGHT! {self.brightness}')\n\n@dataclass\nclass Car:\n    engine: EngineProtocol\n    headlights: HeadlightsProtocol\n\n    def go(self):\n        self.engine.start()\n        self.headlights.light()\n\ndef get_config():\n    return {\n        EngineProtocol: factory(V8Engine, sound=EnvField('ENGINE_SOUND')),\n        HeadlightsProtocol: factory(\n            XenonHeadlights, \n            brightness=EnvField('HEADLIGHTS_BRIGHTNESS', int)\n        ),\n        TransportProtocol: Car,\n    }\n\ninjector = DependencyInjector(get_config())\ninjected_driver = injector.inject(Driver)\ninjected_driver().drive()\n```\n\n#### Clients connect/disconnect\nConnect can be used for async class initialization \n```python\nimport aioredis\n\nfrom typing import Protocol\nfrom trainspotting import DependencyInjector\n\nclass ClientProtocol(Protocol):\n    async def do(self):\n        ...\n\nclass RedisClient:\n    def __init__(self):\n        self.pool = None\n        \n    async def do(self):\n        if not self.pool:\n            raise ValueError\n        print('did something')\n    \n    async def connect(self):\n        self.pool = await aioredis.create_redis_pool(('127.0.0.1', 6379))\n        print('connected')\n        \n    async def disconnect(self):\n        self.pool.close()\n        await self.pool.wait_closed()\n        print('disconnected')\n\n\nasync def main(client: ClientProtocol):\n    await client.do()\n\n\ninjector = DependencyInjector({ClientProtocol: RedisClient})\ninjected = injector.inject(main)\n\nasync with injector.deps:  # connected\n    await injected() # did something\n# disconnected\n```\n\n#### Types Injection\n```python\nclass EntityProtocol(Protocol):\n    def do(self): ...\n\nclass Entity:\n    def do(self):\n        print('do something')\n\n@dataclass\nclass SomeUsefulClass:\n    entity: Type[EntityProtocol]\n\ninjector.add_config({EntityProtocol: Entity})\ninjector.inject(SomeUsefulClass)\n```\n\n#### Lazy injections\n```python\n@injector.lazy_inject\nasync def some_func(client: ClientProtocol):\n    await client.do_something()\n\n\nsome_func()  # raise TypeError, missing argument client\ninjector.do_lazy_injections()\nsome_func()  # ok\n```\n\n#### Extend or change config\n```python\ninjector.add_config({ClientProtocol: Client})\n```\n\n#### EnvField\n```python\nimport os\nfrom typing import Protocol\nfrom dataclasses import dataclass\nfrom trainspotting import DependencyInjector\nfrom trainspotting.factory import factory, EnvField\n\n\nclass ClientProtocol(Protocol):\n    def do(self):\n        ...\n\n\n@dataclass\nclass Client(ClientProtocol):\n    url: str\n    log_prefix: str\n    timeout: int = 5\n\n    def do(self):\n        print(f'{self.log_prefix}: sent request to {self.url} with timeout {self.timeout}')\n\n\ninjector = DependencyInjector({\n    ClientProtocol: factory(\n        Client,\n        url=EnvField('SERVICE_URL'),\n        log_prefix=EnvField('LOG_PREFIX', default='CLIENT'),\n        timeout=EnvField('SERVICE_TIMEOUT', int, optional=True),\n    )\n})\n\n\ndef main(client: ClientProtocol):\n    client.do()\n    \n    \nos.environ.update({'SERVICE_URL': 'some_url'})\ninjected = injector.inject(main)\ninjected()  # CLIENT: sent request to some_url with timeout 5\n```\n\n\n#### Supports type validation\n```python\nfrom typing import Protocol, runtime_checkable\nfrom trainspotting import DependencyInjector\n\n\n@runtime_checkable\nclass ClientProtocol(Protocol):\n    def do(self):\n        ...\n\n\nclass Client:\n    def do(self):\n        print('did something')\n\n\nclass BadClient:\n    def wrong_do(self):\n        ...\n    \n\ndef main(client: ClientProtocol):\n    client.do()\n\ninjector = DependencyInjector({\n    ClientProtocol: BadClient,\n})\n\ninjector.inject(main)()  # raise InjectionError: <class 'BadClient'> does not realize <class 'ClientProtocol'> interface\n\ninjector = DependencyInjector({\n    ClientProtocol: Client,\n})\n\ninjector.inject(main)()  # prints: did something\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/avito-tech/trainspotting/archive/refs/heads/main.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/avito-tech/trainspotting",
    "keywords": "dependency injection,dependency injector",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trainspotting",
    "package_url": "https://pypi.org/project/trainspotting/",
    "platform": "",
    "project_url": "https://pypi.org/project/trainspotting/",
    "project_urls": {
      "Download": "https://github.com/avito-tech/trainspotting/archive/refs/heads/main.zip",
      "Homepage": "https://github.com/avito-tech/trainspotting"
    },
    "release_url": "https://pypi.org/project/trainspotting/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Python Dependency Injector based on interface binding",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12659959,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96bde527fe3427ff9502c0341e130178704e0c3a50682ceeddaefa7cbed3517f",
          "md5": "7e90b37fbaf234d9ce402dd0e247e730",
          "sha256": "932dac8723a0fe687aae26e5e36528f9754f589a8f8dbb15d5e64aa846f59e6d"
        },
        "downloads": -1,
        "filename": "trainspotting-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e90b37fbaf234d9ce402dd0e247e730",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8069,
        "upload_time": "2022-01-23T12:08:42",
        "upload_time_iso_8601": "2022-01-23T12:08:42.826768Z",
        "url": "https://files.pythonhosted.org/packages/96/bd/e527fe3427ff9502c0341e130178704e0c3a50682ceeddaefa7cbed3517f/trainspotting-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96bde527fe3427ff9502c0341e130178704e0c3a50682ceeddaefa7cbed3517f",
        "md5": "7e90b37fbaf234d9ce402dd0e247e730",
        "sha256": "932dac8723a0fe687aae26e5e36528f9754f589a8f8dbb15d5e64aa846f59e6d"
      },
      "downloads": -1,
      "filename": "trainspotting-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7e90b37fbaf234d9ce402dd0e247e730",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8069,
      "upload_time": "2022-01-23T12:08:42",
      "upload_time_iso_8601": "2022-01-23T12:08:42.826768Z",
      "url": "https://files.pythonhosted.org/packages/96/bd/e527fe3427ff9502c0341e130178704e0c3a50682ceeddaefa7cbed3517f/trainspotting-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}