{
  "info": {
    "author": "Muhammad N. Fawi",
    "author_email": "m.noor.fawi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "pytholog\n================\n\n![](./pytholog_files/figure-gfm/pytholog-logo.png)\n## Logic programming in Python\n\n[![](https://img.shields.io/badge/docs-latest-blue.svg)](https://mnoorfawi.github.io/pytholog/) \n[![Build Status](https://travis-ci.com/MNoorFawi/pytholog.svg?branch=master)](https://travis-ci.com/MNoorFawi/pytholog)\n\nPython library that enables using **logic programming** in python. \nThe aim of the library is to explore ways to use symbolic reasoning with machine learning.\n\nNow pytholog supports probabilities.\n\nPytholog gives facts indices (first term) and uses **binary search** to search for relevant facts instead of looping over all knowledge base.\nSo when defining rules, **make sure that the main search terms are in the first position to speed up the search queries.**\n\n## Full documentation is available [here](https://mnoorfawi.github.io/pytholog/)\n\nThere is a SourceForge project, available here: https://sourceforge.net/projects/pytholog/, that has an executable tool that works as a standalone **logical database** with a **RESTful API** that can be queried by and used with other applications. \n\nThe tools in the project work in Linux and Windows and there is also the script to be built on OSX system.\n\n#### prolog syntax\n\n![](./pytholog_files/figure-gfm/prolog_ex.png)\n\nProlog takes facts and rules. A fact or a rule has a predicate which in\n“likes(noor, sausage)” is “likes” and in “friend(X, Y)” is “friend”.\nRules have “Left Hand Side (LHS)” which has a predicate and “Right Hand\nSides (RHS)” or “goals” to be searched to answer the queries about the\nrules. LHS and RHS in a rule are separated with “:-”. Each predicate has\n“Terms”. Prolog uses lowercased variables to describe “constant values”\nand uppercased values to describe “variables” that need to be updated\nfrom the query.\n\nLet’s take an example: **likes(noor, sausage)** is a fact which has\n**likes** as a predicate and **(noor and sausage)** as terms.\n**friend(X, Y) :- +(X = Y), likes(X, Z), likes(Y, Z)** is a rule which\ndefines that two persons are considered friends if they like the same\ndish. This rule has an LHS **friend(X, Y)** and RHS or goals **\\[+(X =\nY), likes(X, Z), likes(Y, Z)\\]**. The comma separating the goals means\n**and** while **;** will mean **or**. Variables in the fact are\nlowercased meaning they are truths and cannot change. While in a rule\nthey are Uppercased meaning they need to be changed while in a query.\n\nProlog uses **backtracking** search to answer the questions and the\nqueries.\n\nI loved prolog and the idea of Symbolic Intelligence. So I decided to\nbuild a module or a framework in python that can allow me to use prolog\ninside python aiming to combine the power of machine learning and\nsymbolic reasoning.\n\n###### OR can be implemented with defining the rules as many times as the OR facts. For example, to say \"fly(X) :- bird(X) ; wings(X).\" can be defined as two rules as follows: \"fly(X) :- bird(X).\" and \"fly(X) :- wings(X).\"\n\n#### pytholog Implementation\n\n##### Installation\n\n```bash\npip install pytholog\n```\n\n``` python\nimport pytholog as pl\n```\n\n#### Defining a knowledge base object to store the facts and rules.\n\n``` python\nnew_kb = pl.KnowledgeBase(\"flavor\")\nnew_kb([\"likes(noor, sausage)\",\n        \"likes(melissa, pasta)\",\n        \"likes(dmitry, cookie)\",\n        \"likes(nikita, sausage)\",\n        \"likes(assel, limonade)\",\n        \"food_type(gouda, cheese)\",\n        \"food_type(ritz, cracker)\",\n        \"food_type(steak, meat)\",\n        \"food_type(sausage, meat)\",\n        \"food_type(limonade, juice)\",\n        \"food_type(cookie, dessert)\",\n        \"flavor(sweet, dessert)\",\n        \"flavor(savory, meat)\",\n        \"flavor(savory, cheese)\",\n        \"flavor(sweet, juice)\",\n        \"food_flavor(X, Y) :- food_type(X, Z), flavor(Y, Z)\",\n        \"dish_to_like(X, Y) :- likes(X, L), food_type(L, T), flavor(F, T), food_flavor(Y, F), neq(L, Y)\"])\n```\nNote that **neq()** is pytholog's way to apply **inequality** so here \"neq(L, Y)\" means L != Y meaning that we look for new dishes not the one already liked by the person in the query.\n\nLet’s do some queries in this database using its facts and rules.\n\n``` python\nnew_kb.query(pl.Expr(\"likes(noor, sausage)\"))\n# ['Yes']\n```\n\n``` python\nnew_kb.query(pl.Expr(\"likes(noor, pasta)\"))\n# ['No']\n```\n\nI added **Memoization** to speed up the queries.\n\n###### Wikipedia definition: In computing, memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again.\n\nLet’s test it doing the same query twice and compare time used to do the\nquery.\n\n``` python\n# query 1\nfrom time import time\nstart = time()\nprint(new_kb.query(pl.Expr(\"food_flavor(What, sweet)\")))\nprint(time() - start)\n\n# [{'What': 'limonade'}, {'What': 'cookie'}]\n# 0.0020236968994140625\n```\n\n``` python\n# query 2\nstart = time()\nprint(new_kb.query(pl.Expr(\"food_flavor(Food, sweet)\")))\nprint(time() - start)\n\n# [{'Food': 'limonade'}, {'Food': 'cookie'}]\n# 0.0\n```\n\nAs you see, it took almost no time to return the same answer again and\nit also takes care of different Uppercased variable inputs as they\nanyways will be the same result no matter what they are.\n\nNow we will use the **dish\\_to\\_like** rule to recommend dishes to\npersons based on taste preferences.\n\n``` python\nstart = time()\nprint(new_kb.query(pl.Expr(\"dish_to_like(noor, What)\")))\nprint(time() - start)\n\n# [{'What': 'gouda'}, {'What': 'steak'}]\n# 0.001992940902709961\n```\nNew dishes were recommended!!\n\nLet’s test the Memoization again:\n\n``` python\nstart = time()\nprint(new_kb.query(pl.Expr(\"dish_to_like(noor, What)\")))\nprint(time() - start)\n\n# [{'What': 'gouda'}, {'What': 'steak'}]\n# 0.0\n```\n\n##### City Coloring problem\n\n![](./pytholog_files/figure-gfm/city_color.png)\n\n###### Image Source: [Seven Languages in Seven Weeks book](https://pragprog.com/book/btlang/seven-languages-in-seven-weeks)\n\nThe problem is **Constraint Satisfaction Problem**. The problem is to\ncolor each city using only three colors but no adjacent cities can be\ncolored the same. The problem might seem so easy but it’s really\nchallenging how to tell this to a machine. But using prolog logic it is\nkind of easier because all you have to do is to specify the rules of the\nproblem and prolog will answer.\n\n``` python\n## new knowledge base object\ncity_color = pl.KnowledgeBase(\"city_color\")\ncity_color([\n    \"different(red, green)\",\n    \"different(red, blue)\",\n    \"different(green, red)\", \n    \"different(green, blue)\",\n    \"different(blue, red)\", \n    \"different(blue, green)\",\n    \"coloring(A, M, G, T, F) :- different(M, T),different(M, A),different(A, T),different(A, M),different(A, G),different(A, F),different(G, F),different(G, T)\"\n])\n```\n\nLet’s query the answer:\n\n``` python\n## we will use [0] to return only one answer \n## as prolog will give all possible combinations and answers\ncity_color.query(pl.Expr(\"coloring(Alabama, Mississippi, Georgia, Tennessee, Florida)\"), cut = True)\n\n# {'Alabama': 'blue',\n#  'Mississippi': 'red',\n#  'Georgia': 'red',\n#  'Tennessee': 'green',\n#  'Florida': 'green'}\n```\n\nNow let's try to play with some probabilities.\nFirst in prolog **\"is\"** is used to assign the result of operations. \nFor example, if we want to say \"A = 3 * 4\", we say \"A is 3 * 4\", not \"A = 3 * 4\" because this is unification not assignment.\n\nLet's define some dummy knowledge base with probabilities and query them:\n###### The numbers are totally dummy and have no meanings just to explain the functionality.\n\n```python\nbattery_kb = pl.KnowledgeBase(\"battery\")\nbattery_kb([\n\t\"battery(dead,P) :- voltmeter(battery_terminals,abnormal,P2), P is P2 + 0.5\",\n\t\"battery(dead,P) :- electrical_problem(P), P >= 0.8\",\n\t\"battery(dead,P) :- electrical_problem(P2), age(battery,old,P3), P is P2 * P3 * 0.9\",\n\t\"electrical_problem(0.7)\",\n\t\"age(battery,old, 0.8)\",\n\t\"voltmeter(battery_terminals,abnormal,0.3)\"])\n\nbattery_kb.query(pl.Expr(\"battery(dead, Probability)\"))\n\n# [{'Probability': 0.8}, {'Probability': 'No'}, {'Probability': 0.504}]\n# the second one is \"No\" because the condition has not been met.\n```\n###### for another example of nested probabilities, see [friends_prob.md](https://github.com/MNoorFawi/pytholog/blob/master/examples/friends_prob.md)\n\n### Taking rules from Machine Learning model and feed them into knowledge base then try to predict new instances.\nThis shows beneficial for **Explainable AI**. One can explain why a model predicts specific prediction.\n\nLet's suppose that we have these rules from a Decision Tree Model to classify iris flowers. And we have a new record for which we try to predict using the rules.\n\n```python\niris_kb = pl.KnowledgeBase(\"iris\")\niris_kb([## Rules\n\t\"species(setosa, Truth) :- petal_width(W), Truth is W <= 0.80\", \n\t\"species(versicolor, Truth) :- petal_width(W), petal_length(L), Truth is W > 0.80 and L <= 4.95\",\n\t\"species(virginica, Truth) :- petal_width(W), petal_length(L), Truth is W > 0.80 and L > 4.95\",\n\t## New record\n\t\"petal_length(5.1)\",\n\t\"petal_width(2.4)\"])\n```\nNow let's try to predict the class:\n\n```python\niris_kb.query(pl.Expr(\"species(Class, Truth)\"))\n\n# [{'Class': 'setosa', 'Truth': 'No'},\n#  {'Class': 'versicolor', 'Truth': 'No'},\n#  {'Class': 'virginica', 'Truth': 'Yes'}]\n```\n\nNow let's extract the rules for some goal or fact.\n\n```python\niris_kb.rule_search(pl.Expr(\"species(Species, Truth)\"))\n\n# [species(setosa,Truth):-petal_width(W),TruthisW<=0.80,\n#  species(versicolor,Truth):-petal_width(W),petal_length(L),TruthisW>0.80andL<=4.95,\n#  species(virginica,Truth):-petal_width(W),petal_length(L),TruthisW>0.80andL>4.95]\n```\nSo now we can see the rules why a model chooses a prediction and explain the behavior.\n\n**clear_cache()** is used to clean the cache inside the knowledge_base:\n```python\nnew_kb.clear_cache()\n```\n\n**from_file()** is used to read facts and rules from a prolog ,pl, or txt file:\n```python\nexample_kb = pl.KnowledgeBase(\"example\")\nexample_kb.from_file(\"/examples/example.txt\")\n# facts and rules have been added to example.db\nexample_kb.query(pl.Expr(\"food_flavor(What, savory)\"))\n# [{'What': 'gouda'}, {'What': 'steak'}, {'What': 'sausage'}]\n```\n\nAlso we can constructs rules or facts looping over dataframes:\n```python\nimport pandas as pd\ndf = pd.DataFrame({\"has_work\": [\"david\", \"daniel\"], \"tasks\": [8, 3]})\ndf\n#\thas_work  tasks\n#0\t   david\t  8\n#1\t  daniel\t  3\nex = pl.KnowledgeBase()\nfor i in range(df.shape[0]):\n    ex([f\"has_work({df.has_work[i]}, {df.tasks[i]})\"])\n\nex.db\n# {'has_work': {'facts': [has_work(david,8), has_work(daniel,3)],\n#   'goals': [[], []],\n#   'terms': [['david', '8'], ['daniel', '3']]}}\n```\n\n### Graph Traversals with Pytholog\nLet's define a weighted directed graph and see if we can get a path, hopefully the shortest, between two nodes using breadth first search.\n\n![](./pytholog_files/figure-gfm/graph.png)\n\n###### [Image source](https://dtai.cs.kuleuven.be/problog/tutorial/basic/04_pgraph.html)\n\n\n```python\ngraph = pl.KnowledgeBase(\"graph\")\ngraph([\n\t\"edge(a, b, 6)\", \"edge(a, c, 1)\", \"edge(b, e, 4)\",\n\t\"edge(b, f, 3)\", \"edge(c, d, 3)\", \"edge(d, e, 8)\",\n\t\"edge(e, f, 2)\",\n\t\"path(X, Y, W) :- edge(X , Y, W)\",\n\t\"path(X, Y, W) :- edge(X, Z, W1), path(Z, Y, W2), W is W1 + W2\"])\n\nanswer, path = graph.query(pl.Expr(\"path(a, f, W)\"), show_path = True)\nprint(answer)\nprint([x for x in path if str(x) > \"Z\"])\n\n# [{'W': 9}, {'W': 12}, {'W': 14}]\n# ['d', 'b', 'e', 'c']\n```\nNow with the **show_path** argument we can see the nodes the search passed by and we can see it gave all the possible answers and the first one is the best.\nSo let's use the **cut** argument to get only the first result and stop the search.\n\n```python\nanswer, path = graph.query(pl.Expr(\"path(a, e, W)\"), show_path = True, cut = True)\nprint(answer)\nprint([x for x in path if str(x) > \"Z\"])\n\n# [{'W': 10}]\n# ['b']\n```\n\nFor another more complicated undirected graph example see [graph traversals with pytholog](https://github.com/mnoorfawi/traversing-graphs-using-pytholog)\n\nFuture implementation will try to come up with ideas to combine this\ntechnique with **machine learning algorithms and neural networks**\n\n**Contribution, ideas and any kind of help will be much appreciated**\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mnoorfawi/pytholog",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytholog",
    "package_url": "https://pypi.org/project/pytholog/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytholog/",
    "project_urls": {
      "Homepage": "https://github.com/mnoorfawi/pytholog"
    },
    "release_url": "https://pypi.org/project/pytholog/2.4.1/",
    "requires_dist": [
      "more-itertools"
    ],
    "requires_python": "",
    "summary": "Logic Programming in Python",
    "version": "2.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8667143,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39bd0f5e3ee0374a179a1b43a723383e9b159c6a6672194dcb9d1b8c0d0167ca",
          "md5": "bd2ee1c22abec04c2707a765e358b8f4",
          "sha256": "d71d2050b87e984cc6e8504db9f9de72eb1cc5ed7f2fcbb3890161655f8253b8"
        },
        "downloads": -1,
        "filename": "pytholog-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd2ee1c22abec04c2707a765e358b8f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8992,
        "upload_time": "2020-03-25T09:59:30",
        "upload_time_iso_8601": "2020-03-25T09:59:30.063321Z",
        "url": "https://files.pythonhosted.org/packages/39/bd/0f5e3ee0374a179a1b43a723383e9b159c6a6672194dcb9d1b8c0d0167ca/pytholog-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48d7892cee6e85b0da749b4d391f7942b0d0a5285389414ac0e3660fce06c9ad",
          "md5": "77d95e6c8d93f6c23efaeec7a77b020d",
          "sha256": "5525a96e4ea338c127ed084e5cf1e631050e439dfc034c7b1df74704970023fd"
        },
        "downloads": -1,
        "filename": "pytholog-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77d95e6c8d93f6c23efaeec7a77b020d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9251,
        "upload_time": "2020-03-30T08:54:12",
        "upload_time_iso_8601": "2020-03-30T08:54:12.176249Z",
        "url": "https://files.pythonhosted.org/packages/48/d7/892cee6e85b0da749b4d391f7942b0d0a5285389414ac0e3660fce06c9ad/pytholog-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89ee7bac9fb62acc6346b29ff650aeb841d2a5c77b4e459afba554ee2b55c7c3",
          "md5": "e0960e03095a3ef7a9ac816055dd3313",
          "sha256": "4635e1c728ac27b9b2af150c8467bc3298f161b402e2c1a89d1121e38b0d064e"
        },
        "downloads": -1,
        "filename": "pytholog-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0960e03095a3ef7a9ac816055dd3313",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9306,
        "upload_time": "2020-04-02T16:27:03",
        "upload_time_iso_8601": "2020-04-02T16:27:03.106793Z",
        "url": "https://files.pythonhosted.org/packages/89/ee/7bac9fb62acc6346b29ff650aeb841d2a5c77b4e459afba554ee2b55c7c3/pytholog-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a4918cced660f011927db048b55c39ae66bcd945b7d3c6980e44ed74638b2a6",
          "md5": "0d5bab092144ef78fb58b2c586254136",
          "sha256": "3666b6d8d77286846083d730cac3d8db7eeffbafb6de51fd3cf50b252643cf54"
        },
        "downloads": -1,
        "filename": "pytholog-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d5bab092144ef78fb58b2c586254136",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9939,
        "upload_time": "2020-04-03T15:27:21",
        "upload_time_iso_8601": "2020-04-03T15:27:21.702319Z",
        "url": "https://files.pythonhosted.org/packages/3a/49/18cced660f011927db048b55c39ae66bcd945b7d3c6980e44ed74638b2a6/pytholog-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "492d9ddd29dd56af5ee154b38b863b8129d195d8f8e43308ec4f3daf4932d049",
          "md5": "1d62a9ad09b5d8cb6c1d4ce824aaefe7",
          "sha256": "14ec5440c9bf6fd21424c1614a3d96ca4ad362ab26706609aa88d145646fe938"
        },
        "downloads": -1,
        "filename": "pytholog-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d62a9ad09b5d8cb6c1d4ce824aaefe7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10613,
        "upload_time": "2020-04-05T20:53:28",
        "upload_time_iso_8601": "2020-04-05T20:53:28.001160Z",
        "url": "https://files.pythonhosted.org/packages/49/2d/9ddd29dd56af5ee154b38b863b8129d195d8f8e43308ec4f3daf4932d049/pytholog-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6727fec8afdb58f5b7a1beac0a1a21c0d9b7887596ccac2ce861270112239be1",
          "md5": "dbe9490421d9426751bb6257b7dfa641",
          "sha256": "06a0c8ea968f06eb7617bf0a0ff01223a9173efb3493f0a68e3434291dae276d"
        },
        "downloads": -1,
        "filename": "pytholog-2.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbe9490421d9426751bb6257b7dfa641",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13203,
        "upload_time": "2020-04-06T18:11:30",
        "upload_time_iso_8601": "2020-04-06T18:11:30.119081Z",
        "url": "https://files.pythonhosted.org/packages/67/27/fec8afdb58f5b7a1beac0a1a21c0d9b7887596ccac2ce861270112239be1/pytholog-2.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04681cf31aea85e0736a1d5594df4d88f46b390a3cf59bbc924ad70ecb5a11cd",
          "md5": "ff60f9c179c002a56be9f3d0fe0c58eb",
          "sha256": "fe90b1426dea6d6d270584fdcb97e1549efcb6daf7b935c1e95b2e143f5e639d"
        },
        "downloads": -1,
        "filename": "pytholog-2.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff60f9c179c002a56be9f3d0fe0c58eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13567,
        "upload_time": "2020-04-08T10:11:27",
        "upload_time_iso_8601": "2020-04-08T10:11:27.048525Z",
        "url": "https://files.pythonhosted.org/packages/04/68/1cf31aea85e0736a1d5594df4d88f46b390a3cf59bbc924ad70ecb5a11cd/pytholog-2.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a1d09476a33e6bae1c3f59be37afa979d1885de5701917335a0f8238c3e3d8f",
          "md5": "5f3e220abee4bc7caea9d527013f17dd",
          "sha256": "befb5f6f4a0cd96b8a111a067cb75992160f3e4f8b109b4386bfef616603629a"
        },
        "downloads": -1,
        "filename": "pytholog-2.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f3e220abee4bc7caea9d527013f17dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14037,
        "upload_time": "2020-04-11T18:23:16",
        "upload_time_iso_8601": "2020-04-11T18:23:16.616422Z",
        "url": "https://files.pythonhosted.org/packages/0a/1d/09476a33e6bae1c3f59be37afa979d1885de5701917335a0f8238c3e3d8f/pytholog-2.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3d4ff9a71bc720a7d246f6e951c4ddd3ab4bc3fc7c897e2079ea706157a5507",
          "md5": "d0667bbd6b18c362036388337413e78d",
          "sha256": "201e501c546676a5a568d5764117691054f977eae3f96ff6fe1fd59fb6671afd"
        },
        "downloads": -1,
        "filename": "pytholog-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d0667bbd6b18c362036388337413e78d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21955,
        "upload_time": "2020-04-17T12:29:49",
        "upload_time_iso_8601": "2020-04-17T12:29:49.921854Z",
        "url": "https://files.pythonhosted.org/packages/b3/d4/ff9a71bc720a7d246f6e951c4ddd3ab4bc3fc7c897e2079ea706157a5507/pytholog-2.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6907af417e6421810dd1ec33df29e993245c567e300ea406bada0ee892a09ce",
          "md5": "d40d281a6c7845f801edca7740b8d6dd",
          "sha256": "7eed1230d0634d82b1ec5b667021eac0699214a1ff24330d9accf5b5ae7da05d"
        },
        "downloads": -1,
        "filename": "pytholog-2.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d40d281a6c7845f801edca7740b8d6dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14213,
        "upload_time": "2020-04-18T11:48:50",
        "upload_time_iso_8601": "2020-04-18T11:48:50.269172Z",
        "url": "https://files.pythonhosted.org/packages/d6/90/7af417e6421810dd1ec33df29e993245c567e300ea406bada0ee892a09ce/pytholog-2.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21e0ecb61dcf6cf0eed3e39f98a61193cdfaa239fd5443e48233c47daee3f130",
          "md5": "00ac61f03e098f8e03c864f05102df43",
          "sha256": "6cdaad68646fe9e941fb07a4b1dde150d1439f8c64d8f591a0d7404ca022e56b"
        },
        "downloads": -1,
        "filename": "pytholog-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "00ac61f03e098f8e03c864f05102df43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22098,
        "upload_time": "2020-04-18T11:48:51",
        "upload_time_iso_8601": "2020-04-18T11:48:51.830178Z",
        "url": "https://files.pythonhosted.org/packages/21/e0/ecb61dcf6cf0eed3e39f98a61193cdfaa239fd5443e48233c47daee3f130/pytholog-2.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c86f4192887231e8250dac7a945962b340a224b801ca1825eca8058da15fd84b",
          "md5": "a77a9f175d8dd3a993efded12bccf8fd",
          "sha256": "d06fa78d0223b57fe820efa882380e1046d0ab34cda8dc9249db4b57e113def0"
        },
        "downloads": -1,
        "filename": "pytholog-2.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a77a9f175d8dd3a993efded12bccf8fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16077,
        "upload_time": "2020-04-29T06:30:55",
        "upload_time_iso_8601": "2020-04-29T06:30:55.592527Z",
        "url": "https://files.pythonhosted.org/packages/c8/6f/4192887231e8250dac7a945962b340a224b801ca1825eca8058da15fd84b/pytholog-2.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45a4d129d24fb5d5f841a35bb5d4d70ddf96cf6983d305d886f9d5a030484756",
          "md5": "40a16fa6f304fa167877bd88f6c23d72",
          "sha256": "b07a539ad1601ad76886430a4f228b29d6832d3914c41a1b59b583bbe32e2d2f"
        },
        "downloads": -1,
        "filename": "pytholog-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "40a16fa6f304fa167877bd88f6c23d72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23664,
        "upload_time": "2020-04-29T06:30:56",
        "upload_time_iso_8601": "2020-04-29T06:30:56.958299Z",
        "url": "https://files.pythonhosted.org/packages/45/a4/d129d24fb5d5f841a35bb5d4d70ddf96cf6983d305d886f9d5a030484756/pytholog-2.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fd2f432427a58986ce8ea9f9d2ac6b35dd9657e523dcc562048c19491b4980b",
          "md5": "2f4a7fcd60edb62a7c01fc2f579d0492",
          "sha256": "b726af28476df5935d8561ce964b7f7e1ba17e9d070b8c9b3da3fe993458893d"
        },
        "downloads": -1,
        "filename": "pytholog-2.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f4a7fcd60edb62a7c01fc2f579d0492",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16630,
        "upload_time": "2020-11-16T02:28:10",
        "upload_time_iso_8601": "2020-11-16T02:28:10.243226Z",
        "url": "https://files.pythonhosted.org/packages/6f/d2/f432427a58986ce8ea9f9d2ac6b35dd9657e523dcc562048c19491b4980b/pytholog-2.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0187cffd13adb88483ac677ad2d3bbde3156790cf71db8e9436ac66c2fb8ede9",
          "md5": "60e55aa1589ee00b69d5f37b8e5b9608",
          "sha256": "ef9b379dd21f755ee5e097e80ce1475e5581eb07d014157e1a76295faeded39f"
        },
        "downloads": -1,
        "filename": "pytholog-2.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "60e55aa1589ee00b69d5f37b8e5b9608",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24680,
        "upload_time": "2020-11-16T02:28:11",
        "upload_time_iso_8601": "2020-11-16T02:28:11.867668Z",
        "url": "https://files.pythonhosted.org/packages/01/87/cffd13adb88483ac677ad2d3bbde3156790cf71db8e9436ac66c2fb8ede9/pytholog-2.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fd2f432427a58986ce8ea9f9d2ac6b35dd9657e523dcc562048c19491b4980b",
        "md5": "2f4a7fcd60edb62a7c01fc2f579d0492",
        "sha256": "b726af28476df5935d8561ce964b7f7e1ba17e9d070b8c9b3da3fe993458893d"
      },
      "downloads": -1,
      "filename": "pytholog-2.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2f4a7fcd60edb62a7c01fc2f579d0492",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16630,
      "upload_time": "2020-11-16T02:28:10",
      "upload_time_iso_8601": "2020-11-16T02:28:10.243226Z",
      "url": "https://files.pythonhosted.org/packages/6f/d2/f432427a58986ce8ea9f9d2ac6b35dd9657e523dcc562048c19491b4980b/pytholog-2.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0187cffd13adb88483ac677ad2d3bbde3156790cf71db8e9436ac66c2fb8ede9",
        "md5": "60e55aa1589ee00b69d5f37b8e5b9608",
        "sha256": "ef9b379dd21f755ee5e097e80ce1475e5581eb07d014157e1a76295faeded39f"
      },
      "downloads": -1,
      "filename": "pytholog-2.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "60e55aa1589ee00b69d5f37b8e5b9608",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24680,
      "upload_time": "2020-11-16T02:28:11",
      "upload_time_iso_8601": "2020-11-16T02:28:11.867668Z",
      "url": "https://files.pythonhosted.org/packages/01/87/cffd13adb88483ac677ad2d3bbde3156790cf71db8e9436ac66c2fb8ede9/pytholog-2.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}