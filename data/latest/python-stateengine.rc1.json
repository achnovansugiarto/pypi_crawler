{
  "info": {
    "author": "",
    "author_email": "Ayman Imtyaz <aymanimtyaz@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# StateEngine\nFinite state machines in Python\n\n## Example Usage\n```python\n\"\"\"\nUsing StateEngine to simulate the change of physical states of water\n\"\"\"\n\nfrom StateEngine import StateEngine\n\nwater_states = StateEngine()\n\n\n@water_states.state_handler(\"solid\")\ndef ice(sm_input):\n    if sm_input == \"melting\":\n        print(\"turning to liquid\")\n        return \"liquid\"\n    elif sm_input == \"sublimation\":\n        print(\"turning to gas\")\n        return \"gas\"\n    else:\n        print(\"remaining as a solid\")\n        return \"solid\"\n\n\n@water_states.state_handler(\"liquid\", default=True)\ndef water(sm_input):\n    if sm_input == \"freezing\":\n        print(\"turning to solid\")\n        return \"solid\"\n    elif sm_input == \"boiling\":\n        print(\"turning to gas\")\n        return \"gas\"\n    else:\n        print(\"remaining as a liquid\")\n        return \"liquid\"\n\n\n@water_states.state_handler(\"gas\")\ndef vapour(sm_input):\n    if sm_input == \"condensing\":\n        print(\"turning to liquid\")\n        return \"liquid\"\n    elif sm_input == \"depositing\":\n        print(\"turning to solid\")\n        return \"solid\"\n    else:\n        print(\"remaining as a gas\")\n        return \"gas\"\n\n\nif __name__ == \"__main__\":\n    state = None\n    while True:\n        user_input = input(\"> \")\n        state = water_states.execute(state, user_input)\n\n\n```\n\n## Installation\nThe stateengine package is not on PyPi yet. To use stateengine, clone the repository and put it in the working directory of your project:\n```\ngit clone https://github.com/aymanimtyaz/stateengine.git\n```\n\n## Usage\n### Creating a state machine\nA state machine can be created by creating a state machine object. The constructor does not take any arguments:\n```python\nfrom stateengine import StateEngine\n\nstate_machine = StateEngine()\n...\n```\n\n### Assigning states to state handlers\nStates can be assigned to state handlers using the ```state_handler()```  decorator function as:\n```python\n...\n@state_machine.state_handler(state=\"example_state\")\ndef example_state_handler(input):\n\t... \n```\nA default state can be assigned by passing ```default=True``` as an argument to ```state_handler```. Note that there can only be one default state.\n```python\n...\n@state_machine.state_handler(state=\"example_state\", default=True)\ndef example_state_handler(input):\n\t... \n```\nThe state handler function should only return other states that have been registered with a state handler, signifying a state transition.\n\n### Assigning multiple states to a single state handler\nMultiple states can also be assigned to a handler. This can be done by stacking the ```state_handler``` decorator:\n```python\n...\n@state_machine.state_handler(\"state_1\")\n@state_machine.state_handler(\"state_2\")\n@state_machine.state_handler(\"state_3\")\ndef a_handler_function(input):\n\t...\n\treturn ...\n...\n```\nThe order in which the decorators for each state are stacked does not matter.\n\n### Running the state machine\nThe state machine can be executed by passing it a state and an input. It should be run after all the state handlers have been defined. A state machine can be run using ```execute()``` as:\n```python\n...\nsome_state = ...\nsome_input_1 = ...; some_input_2 = ...; ...\nnew_state = state_machine.execute(\n\tstate=some_state, some_input_1=some_input_1, some_input_2=some_input_2, ...)\n...\n```\nA new state will be returned depending on the input and the logic defined in the corresponding handler.\nA practical way to make use of the state machine would be to run it in a loop, or as a response to an event such as an HTTP request\n\n### Accessing the current state using the ```state_handler``` property\n```current_state``` is a property that can be used to access the current state from within a handler function. This may seem pointless at first glance, but becomes really useful when a handler is assigned to more than one state:\n```python\n...\n@state_machine.state_handler(\"state_1\")\n@state_machine.state_handler(\"state_2\")\ndef a_handler_function(input):\n\tprint(f\"The current state is {state_machine.current_state}\")\n\treturn ...\n...\n```\n\n### A note on ```None``` states\nThe default handler (if defined) for a state machine can be executed by passing the corresponding state value OR ```None``` as the ```state``` argument to ```execute()```. If a default state handler is not defined and a ```None``` is passed, an exception will be raised.\n\n### Important points\n- A handler function should only return states. Furthermore, it should only return states that are registered to a state handler. Returning an unregistered state will raise a ```NoHandlerAssociation``` exception.\n- All handlers for a state machine should have the same type of input (number of inputs)\n- The states can only be of types ```str``` and ```int```. An ```InvalidStateType``` exception will be raised otherwise.\n- States must be unique. Two state handlers can not have the same state argument. A ```StateHandlerClash``` exception will be raised otherwise.\n- Only one default state can exist for a state machine. Trying to assign more than one default state handler will raise a ```DefaultStateHandlerClash``` exception.\n- A default state is not necessary. However, if ```state=None``` is passed to ```execute```, and a default state handler is not defined. A ```NoDefaultState``` exception will be raised.\n- The ```current_state``` property can only be accessed from within a handler context, that is, inside a handler function. Trying to access it from outside a handler function will raise a ```OutsideHandlerContext``` exception.\n\n### Good practices\n- The states' names should reflect what their handlers are supposed to do. This will make it easy to maintain and debug the state machine code in the future.\n\n### To Do\n- [x] Make unpacking inputs to state handlers more Pythonic.\n- [x] Allow a handler to handle multiple states.\n- [ ] Improve API documentation.\n- [ ] Add use cases in the docs.\n\n### Examples of StateEngine in use\n- [spndr](https://github.com/aymanimtyaz/spndr)\n\n#### If you have any questions or suggestions about StateEngine, you can open up an issue or create a PR if you've made some improvements . You can also email me at aymanimtyaz@gmail.com :)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License Copyright (c) 2021 Ayman Imtyaz Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-stateengine",
    "package_url": "https://pypi.org/project/python-stateengine/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-stateengine/",
    "project_urls": {
      "Bug Tracker": "https://github.com/aymanimtyaz/StateEngine/issues",
      "Homepage": "https://github.com/aymanimtyaz/StateEngine"
    },
    "release_url": "https://pypi.org/project/python-stateengine/0.0.1a1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Finite State Machines in Pure Python!",
    "version": "0.0.1a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14605223,
  "releases": {
    "0.0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8292d98f8aac9b9055a0b92f15c98c1626109d9c3781e6e5f5f60e4a44a1cf1",
          "md5": "8d354f33d0c7ef5a32d97ea425bb3fba",
          "sha256": "9331341a6c091789175fd54910cf9ed53e03c2f7b7e8c80a2f54fc7fc74876bf"
        },
        "downloads": -1,
        "filename": "python_stateengine-0.0.1a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d354f33d0c7ef5a32d97ea425bb3fba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7826,
        "upload_time": "2022-07-31T15:36:54",
        "upload_time_iso_8601": "2022-07-31T15:36:54.665550Z",
        "url": "https://files.pythonhosted.org/packages/b8/29/2d98f8aac9b9055a0b92f15c98c1626109d9c3781e6e5f5f60e4a44a1cf1/python_stateengine-0.0.1a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "227b7bb7857411008e9429f55a2d34b861982ae460a8d8aefc369cc9f3575433",
          "md5": "865f886254654e8e1e073115b998c0c7",
          "sha256": "ff9478ce6ea53a906b2c0de91fa2a97a2498fc0019fbb2de4c2a22b614c38b42"
        },
        "downloads": -1,
        "filename": "python-stateengine-0.0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "865f886254654e8e1e073115b998c0c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8645,
        "upload_time": "2022-07-31T15:36:57",
        "upload_time_iso_8601": "2022-07-31T15:36:57.008393Z",
        "url": "https://files.pythonhosted.org/packages/22/7b/7bb7857411008e9429f55a2d34b861982ae460a8d8aefc369cc9f3575433/python-stateengine-0.0.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8292d98f8aac9b9055a0b92f15c98c1626109d9c3781e6e5f5f60e4a44a1cf1",
        "md5": "8d354f33d0c7ef5a32d97ea425bb3fba",
        "sha256": "9331341a6c091789175fd54910cf9ed53e03c2f7b7e8c80a2f54fc7fc74876bf"
      },
      "downloads": -1,
      "filename": "python_stateengine-0.0.1a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8d354f33d0c7ef5a32d97ea425bb3fba",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7826,
      "upload_time": "2022-07-31T15:36:54",
      "upload_time_iso_8601": "2022-07-31T15:36:54.665550Z",
      "url": "https://files.pythonhosted.org/packages/b8/29/2d98f8aac9b9055a0b92f15c98c1626109d9c3781e6e5f5f60e4a44a1cf1/python_stateengine-0.0.1a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "227b7bb7857411008e9429f55a2d34b861982ae460a8d8aefc369cc9f3575433",
        "md5": "865f886254654e8e1e073115b998c0c7",
        "sha256": "ff9478ce6ea53a906b2c0de91fa2a97a2498fc0019fbb2de4c2a22b614c38b42"
      },
      "downloads": -1,
      "filename": "python-stateengine-0.0.1a1.tar.gz",
      "has_sig": false,
      "md5_digest": "865f886254654e8e1e073115b998c0c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 8645,
      "upload_time": "2022-07-31T15:36:57",
      "upload_time_iso_8601": "2022-07-31T15:36:57.008393Z",
      "url": "https://files.pythonhosted.org/packages/22/7b/7bb7857411008e9429f55a2d34b861982ae460a8d8aefc369cc9f3575433/python-stateengine-0.0.1a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}