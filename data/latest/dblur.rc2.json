{
  "info": {
    "author": "Jishnu Parayil Shibu",
    "author_email": "jishnu82003@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DBlur: An Image Deblurring Toolkit\r\n\r\nDBlur is an open-source python library for image deblurring. It is simple and highly versatile making it perfect \r\nfor both experts and non-experts in the field. \r\n\r\nFor example, training, testing and deblurring with numerous SOTA models can be performed with just 2-3 lines of code \r\nwith the default parameters mentioned in each paper. On the other hand, these methods can abe highly customised to \r\nassist existing researchers explore new avenues in the filed. For more details regarding its usage, refer to 'Usage' \r\nsection below. \r\n\r\nDBlur has a wide range functionalities which include:\r\n1. Numerous highly customisable SOTA model architectures for image deblurring. The list of supported models are \r\nmentioned below.\r\n2. Numerous popular and novel datasets which can be found \r\n[here](https://www.kaggle.com/datasets/jishnuparayilshibu/a-curated-list-of-image-deblurring-datasets).\r\n3. Ready-to-use pipelines created according to the paper for training each of these models on a given dataset.\r\n4. Ready-to-use pipelines for testing each of these models.\r\n5. Multiple post-processing steps to improve deblurring performance. \r\n6. Deblurring images using pretrained models.\r\n7. Deblurring images by combining multiple pretrained models in different ways.\r\n8. Common evaluations metrics such as PSNR, SSIM, MSE and Brisque. \r\n\r\n\r\n## Call for Contributions\r\n\r\nDblur is a project which is in active development. Any helpful comments and improvements are highly \r\nencouraged. To do so, please open an issue in our official Github [page](). \r\n\r\nIn particular, due to the lack of GPUs on our side, the pretrained models for each of the model architectures are not \r\nyet available. Hence, if you have trained any of the models on a particular dataset, you are highly encouraged to share\r\nthis pretrained model on our official Github [page](). This way, the pretrained models can be added to the library. \r\n\r\n## Installation\r\nInstall dblur with pip:\r\n```bash\r\n$ pip install dblur\r\n```\r\n\r\nThe following requirements shall be installed alongside dblur:\r\n\r\n* torch \r\n* scipy\r\n* numpy\r\n* torchmetrics\r\n* tensorboard\r\n* piq\r\n\r\n## Supported Models\r\n1. [TextDBN](http://www.bmva.org/bmvc/2015/papers/paper006/paper006.pdf)\r\n2. [MSCNN](https://arxiv.org/abs/1702.02359)\r\n3. [SRN](https://arxiv.org/abs/1802.01770)\r\n4. [StackDMPHN](https://arxiv.org/abs/1904.03468)\r\n5. [Restormer](https://arxiv.org/abs/2111.09881)\r\n6. [NAFNet](https://arxiv.org/abs/2204.04676)\r\n7. [FNAFNet](https://arxiv.org/abs/2111.11745)\r\n\r\n## Datasets\r\n\r\nA curated list of popular and custom datasets for general, face, and text deblurring can be found \r\n[here](https://www.kaggle.com/datasets/jishnuparayilshibu/a-curated-list-of-image-deblurring-datasets). This datasets \r\nhave been preprocessed/structured so that they can be easily used with our library. \r\n\r\n## Usage\r\nBefore diving into the usage of the library, it is important to look at a brief overview of the structure of the \r\nlibrary. The two main classes associated with each deblurring model is a respective Trainer and Tester class. These \r\nclasses for each model are all subclassed from a main BaseTrainer and BaseTester class. \r\n\r\nBroadly speaking, each Trainer class has the following methods:\r\n* train()\r\n* validate()\r\n* get_model()\r\n* get_loss()\r\n* get_optimizer()\r\n* get_lr_scheduler()\r\n* get_train_dataloader()\r\n* get_val_dataloader()\r\n\r\nSimilarly, each Tester class has the following methods:\r\n* test()\r\n* deblur_imgs()\r\n* deblur_single_img()\r\n* get_test_dataloader()\r\n\r\n\r\nAll methods which are part of the public API have an elaborate docstring. Hence, usage of the library is made \r\nrelatively straightforward. \r\nFollowing is a brief description on the usage of the library.\r\n\r\n### 1. Training, testing, deblurring with default settings.\r\n\r\nThis section is mainly aimed at non-experts who would like to train, test a model or deblur images with a pretrained \r\nmodel with default settings provided in each paper. By default settings, we mean:\r\n\r\n* optimizer \r\n* learning rate scheduler \r\n* loss function\r\n* parameters associated with the model architecture, loss, scheduler, optimizer and others that are used for \r\n* training/testing (e.g. batch size).\r\n\r\nAll the components metioned above are part of the setting. Below, we demonstrate how to train, test and deblur using \r\nthe default settings for the Restormer model (can be easily generalised to other models).\r\n\r\n```python\r\nfrom dblur.default.restormer import train, test, deblur_imgs, deblur_single_img\r\n\r\ntrain_img_dir = \"path_to_training_dataset\"\r\nval_img_dir = \"path_to_validation_dataset\"\r\ntest_img_dir = \"path_to_test_dataset\"\r\nmodel_path = \"path_for_model\"\r\n\r\n# Train model\r\ntrain(model_path, train_img_dir)\r\n\r\n# Test pretrained model\r\ntrain(model_path, test_img_dir)\r\n\r\n# Deblur images in a directory using pretrained model\r\ndeblur_imgs(model_path, \"blurred_imgs_path\", \"sharp_imgs_path\")\r\n\r\n# Deblur single image using pretrained model\r\ndeblur_single_img(model_path, \"blurred_img_path\", \"sharp_img_path\")\r\n```\r\n\r\n### 2. Customize training pipeline for a model\r\n\r\nThe following code illustrates the entire training pipeline for the Restormer (can be generalised to any other model).\r\n\r\n```python\r\nfrom dblur.trainers.restormer import RestormerTrainer\r\n\r\nrestormer_trainer = RestormerTrainer()\r\ntrain_dataloader = restormer_trainer.get_train_dataloader(train_img_dir, batch_size=8)\r\nval_dataloader = restormer_trainer.get_val_dataloader(val_img_dir, batch_size=8)\r\nmodel = restormer_trainer.get_model(num_layers=4, num_refinement_blocks = 2)\r\noptimizer = restormer_trainer.get_optimizer(model.parameters())\r\nloss_func = restormer_trainer.get_loss()\r\nlr_scheduler = restormer_trainer.get_lr_scheduler(optimizer)\r\n\r\nrestormer_trainer.train(model,\r\n                        train_dataloader,\r\n                        val_dataloader,\r\n                        optimizer,\r\n                        loss_func,\r\n                        save_checkpoint_freq=10,\r\n                        logs_folder='runs',\r\n                        checkpoint_save_name=\"path_to_model\",\r\n                        val_freq=100, \r\n                        write_logs=True,\r\n                        lr_scheduler=lr_scheduler,\r\n                        epochs=epochs)\r\n```\r\n\r\nEach method of the RestormerTrainer object has multiple parameters that can be set accordingly. This can be found in \r\nthe docstring of each method. The example above only illustrates few of the parameters that can be specified. Moreover, \r\nthe user is not limited to using the loss function or optimizer given by the methods of the RestormerTrainer object.\r\n \r\n### 3. Customize testing pipeline for a model\r\n\r\nThe following code illustrates the entire testing pipeline for the Restormer (can be generalised to any other model).\r\n\r\n```python\r\nfrom dblur.testers.restormer import RestormerTester\r\n\r\nrestormer_tester = RestormerTester()\r\ntest_dataloader = restormer_tester.get_test_dataloader(test_img_dir, batch_size=8)\r\nmodel = restormer_tester.get_model(num_layers = 4, num_refinement_blocks = 2)\r\nloss_func = restormer_tester.get_loss()\r\n\r\n# test model on test dataset.\r\nrestormer_tester.test(model,\r\n                      model_path,\r\n                      test_dataloader,\r\n                      loss_func,\r\n                      is_checkpoint=True,\r\n                      window_slicing=True,\r\n                      window_size=256)\r\n                      \r\n# deblur images in a directory using pretrained model\r\nrestormer_tester.deblur_imgs(model,\r\n                             model_path,\r\n                             blur_img_dir,\r\n                             sharp_img_dir,\r\n                             is_checkpoint=True,\r\n                             batch_size=8,\r\n                             window_slicing=False)\r\n\r\n#deblur single image using pretrained model\r\nrestormer_tester.deblur_single_img(model,\r\n                                   model_path,\r\n                                   blur_img_path,\r\n                                   sharp_img_path,\r\n                                   is_checkpoint=True,\r\n                                   window_slicing=False)\r\n```\r\n\r\nEach method of the RestormerTester object has multiple parameters that can be set accordingly. This can be found in \r\nthe docstring of each method. The example above only illustrates few of the parameters that can be specified. \r\n\r\n### 4. Deblur images with multiple pretrained models\r\n\r\nDblur provides two ways in which you can combine multiple pretrained models to deblur images.\r\n\r\na) First method averages the outputs of the pretrained models provided. The code below shows how to perform this on a \r\nsingle image (can be done for multiple images in a directory as well).\r\n\r\n```python\r\nfrom dblur.testers.mscnn import MSCNNTester\r\nfrom dblur.testers.stack_dmphn import StackDMPHNTester\r\nfrom dblur.multi_modal_deblur import multi_modal_deblur\r\n\r\nmscnn_tester = MSCNNTester()\r\nmodel1 = mscnn_tester.get_model()\r\n\r\ndmphn_tester = StackDMPHNTester()\r\nmodel2 = dmphn_tester.get_model(num_of_stacks=1)\r\n\r\nmulti_modal_deblur(models=[model1, model2], \r\n                   model_names=[\"MSCNN\", \"StackDMPHN\"],\r\n                   model_paths=[model_path1, model_path2],\r\n                   blur_img_path=blur_img_path,\r\n                   sharp_img_path=sharp_img_path,\r\n                   is_checkpoint=[True, True], \r\n                   window_slicing=True, \r\n                   window_size=256, \r\n                   overlap_size=0)\r\n```\r\n\r\nb) The second method selects the output with the lowest(i.e. the best) Brisque index. Brisque is an index used to access\r\nthe quality of an image. For more details regarding Brisque, refer to \r\n[this](https://live.ece.utexas.edu/publications/2012/TIP%20BRISQUE.pdf). The code below shows how to perform this on a \r\nsingle image (can be done for multiple images in a directory as well).\r\n\r\n```python\r\nfrom dblur.testers.mscnn import MSCNNTester\r\nfrom dblur.testers.stack_dmphn import StackDMPHNTester\r\nfrom dblur.multi_modal_deblur import multi_modal_deblur_by_brisque\r\n\r\nmscnn_tester = MSCNNTester()\r\nmodel1 = mscnn_tester.get_model()\r\n\r\ndmphn_tester = StackDMPHNTester()\r\nmodel2 = dmphn_tester.get_model(num_of_stacks=1)\r\n\r\nmulti_modal_deblur_by_brsique(models=[model1, model2], \r\n                              model_names=[\"MSCNN\", \"StackDMPHN\"],\r\n                              model_paths=[model_path1, model_path2],\r\n                              blur_img_path=blur_img_path,\r\n                              sharp_img_path=sharp_img_path,\r\n                              is_checkpoint=[True, True], \r\n                              window_slicing=True, \r\n                              window_size=256, \r\n                              overlap_size=0)\r\n```\r\n\r\n## Citation\r\nIf you use or extend this work, please consider citing it as below:\r\n\r\n```\r\n@software{Parayil_Shibu_DBlur_An_Image_2023,\r\nauthor = {Parayil Shibu, Jishnu},\r\nmonth = {3},\r\ntitle = {{DBlur: An Image Deblurring Toolkit}},\r\nurl = {https://github.com/Jishnu8/DBlur-An-Image-Deblurring-Toolkit},\r\nversion = {1.0.0},\r\nyear = {2023}\r\n}\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Jishnu8/DBlur-An-Image-Deblurring-Toolkit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dblur",
    "package_url": "https://pypi.org/project/dblur/",
    "platform": null,
    "project_url": "https://pypi.org/project/dblur/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Jishnu8/DBlur-An-Image-Deblurring-Toolkit/issues",
      "Homepage": "https://github.com/Jishnu8/DBlur-An-Image-Deblurring-Toolkit"
    },
    "release_url": "https://pypi.org/project/dblur/1.0.0/",
    "requires_dist": [
      "scipy",
      "numpy",
      "torch",
      "tensorboard",
      "torchmetrics",
      "piq"
    ],
    "requires_python": ">=3.6",
    "summary": "An extensive, highly customisable python package for image deblurring",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17493770,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e7a2ae27b8560bf5383c37a19f01c762f6c836a1fe8e5601d848ffb00f60056",
          "md5": "890b78df70d61af9c935c7c05620abf3",
          "sha256": "90bcac97038b5d64b907d4049732a0025a7ef1f00e68f6946a103cd4cdd56081"
        },
        "downloads": -1,
        "filename": "dblur-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "890b78df70d61af9c935c7c05620abf3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 67104,
        "upload_time": "2023-03-27T04:36:31",
        "upload_time_iso_8601": "2023-03-27T04:36:31.997443Z",
        "url": "https://files.pythonhosted.org/packages/8e/7a/2ae27b8560bf5383c37a19f01c762f6c836a1fe8e5601d848ffb00f60056/dblur-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42be5c7edce5c96dfca92edf18aeb3846add030ade858bf54126d4c8f9855bd6",
          "md5": "b2e34071a8f15b304528d1e88440e11f",
          "sha256": "c134abe3bfbcd6c7fe91b9c21cb78addcf0bd682d6c01b5d6dd4955c5cf2a588"
        },
        "downloads": -1,
        "filename": "dblur-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2e34071a8f15b304528d1e88440e11f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34869,
        "upload_time": "2023-03-27T04:36:35",
        "upload_time_iso_8601": "2023-03-27T04:36:35.044940Z",
        "url": "https://files.pythonhosted.org/packages/42/be/5c7edce5c96dfca92edf18aeb3846add030ade858bf54126d4c8f9855bd6/dblur-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f5dbbdbac3f4be40b3a2962cbf62c655356bd0370a67c9018b114cbf742b4d5",
          "md5": "d53870a64f64860b0d5296d5f8ecf328",
          "sha256": "8a7008d9d74b6ce7d116bb7fc307517d0f403ef87e6a28e10dc6fe8977e1af6e"
        },
        "downloads": -1,
        "filename": "dblur-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d53870a64f64860b0d5296d5f8ecf328",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 76314,
        "upload_time": "2023-03-29T12:45:35",
        "upload_time_iso_8601": "2023-03-29T12:45:35.549960Z",
        "url": "https://files.pythonhosted.org/packages/8f/5d/bbdbac3f4be40b3a2962cbf62c655356bd0370a67c9018b114cbf742b4d5/dblur-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba9f6877d3cad67cfb67aca6ecf7ced4c9f9033b22983c01045a079fc680cf57",
          "md5": "43d23ddf1e9edc2f297cff653a7d26c0",
          "sha256": "4938ee5c373209ccdf3edb790f71283aa409ec037546034ee5d60e4733713298"
        },
        "downloads": -1,
        "filename": "dblur-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "43d23ddf1e9edc2f297cff653a7d26c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44607,
        "upload_time": "2023-03-29T12:45:37",
        "upload_time_iso_8601": "2023-03-29T12:45:37.889375Z",
        "url": "https://files.pythonhosted.org/packages/ba/9f/6877d3cad67cfb67aca6ecf7ced4c9f9033b22983c01045a079fc680cf57/dblur-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f5dbbdbac3f4be40b3a2962cbf62c655356bd0370a67c9018b114cbf742b4d5",
        "md5": "d53870a64f64860b0d5296d5f8ecf328",
        "sha256": "8a7008d9d74b6ce7d116bb7fc307517d0f403ef87e6a28e10dc6fe8977e1af6e"
      },
      "downloads": -1,
      "filename": "dblur-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d53870a64f64860b0d5296d5f8ecf328",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 76314,
      "upload_time": "2023-03-29T12:45:35",
      "upload_time_iso_8601": "2023-03-29T12:45:35.549960Z",
      "url": "https://files.pythonhosted.org/packages/8f/5d/bbdbac3f4be40b3a2962cbf62c655356bd0370a67c9018b114cbf742b4d5/dblur-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba9f6877d3cad67cfb67aca6ecf7ced4c9f9033b22983c01045a079fc680cf57",
        "md5": "43d23ddf1e9edc2f297cff653a7d26c0",
        "sha256": "4938ee5c373209ccdf3edb790f71283aa409ec037546034ee5d60e4733713298"
      },
      "downloads": -1,
      "filename": "dblur-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "43d23ddf1e9edc2f297cff653a7d26c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 44607,
      "upload_time": "2023-03-29T12:45:37",
      "upload_time_iso_8601": "2023-03-29T12:45:37.889375Z",
      "url": "https://files.pythonhosted.org/packages/ba/9f/6877d3cad67cfb67aca6ecf7ced4c9f9033b22983c01045a079fc680cf57/dblur-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}