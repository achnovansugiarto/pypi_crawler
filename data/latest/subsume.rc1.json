{
  "info": {
    "author": "Stephen Macke",
    "author_email": "stephen.macke@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "subsync\n=======\n\n[![](https://github.com/smacke/subsync/workflows/Subsync_CI/badge.svg)](https://github.com/smacke/subsync/actions)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\nLanguage-agnostic automatic synchronization of subtitles with video, so that\nsubtitles are aligned to the correct starting point within the video.\n\nTurn this:                       |  Into this:\n:-------------------------------:|:-------------------------:\n![](https://raw.githubusercontent.com/smacke/subsync/master/tearing-me-apart-wrong.gif)  |  ![](https://raw.githubusercontent.com/smacke/subsync/master/tearing-me-apart-correct.gif)\n\nInstall\n-------\nFirst, make sure ffmpeg is installed. On MacOS, this looks like:\n~~~\nbrew install ffmpeg\n~~~\nNext, grab the script. It should work with both Python 2 and Python 3:\n~~~\npip install git+https://github.com/smacke/subsync@STABLE\n~~~\n\nUsage\n-----\n~~~\nsubsync video.mp4 -i unsynchronized.srt > synchronized.srt\n~~~\n\nor\n\n~~~\nsubsync video.mp4 -i unsynchronized.srt -o synchronized.srt\n~~~\n\nThere may be occasions where you have a correctly synchronized srt file in a\nlanguage you are unfamiliar with, as well as an unsynchronized srt file in your\nnative language. In this case, you can use the correctly synchronized srt file\ndirectly as a reference for synchronization, instead of using the video as the\nreference:\n\n~~~\nsubsync reference.srt -i unsynchronized.srt -o synchronized.srt\n~~~\n\n`subsync` uses the file extension to decide whether to perform voice activity\ndetection on the audio or to directly extract speech from an srt file.\n\nSpeed\n-----\n`subsync` usually finishes in 20 to 30 seconds, depending on the length of the\nvideo. The most expensive step is actually extraction of raw audio. If you\nalready have a correctly synchronized \"reference\" srt file (in which case audio\nextraction can be skipped), `subsync` typically runs in less than a second.\n\nHow It Works\n------------\nThe synchronization algorithm operates in 3 steps:\n1. Discretize video and subtitles by time into 10ms windows.\n2. For each 10ms window, determine whether that window contains speech.  This\n   is trivial to do for subtitles (we just determine whether any subtitle is\n   \"on\" during each time window); for video, use an off-the-shelf voice\n   activity detector (VAD) like\n   the one built into [webrtc](https://webrtc.org/).\n3. Now we have two binary strings: one for the subtitles, and one for the\n   video.  Try to align these strings by matching 0's with 0's and 1's with\n   1's. We score these alignments as (# video 1's matched w/ subtitle 1's) - (#\n   video 1's matched with subtitle 0's).\n\nThe best-scoring alignment from step 3 determines how to offset the subtitles\nin time so that they are properly synced with the video. Because the binary\nstrings are fairly long (millions of digits for video longer than an hour), the\nnaive O(n^2) strategy for scoring all alignments is unacceptable. Instead, we\nuse the fact that \"scoring all alignments\" is a convolution operation and can\nbe implemented with the Fast Fourier Transform (FFT), bringing the complexity\ndown to O(n log n).\n\nLimitations\n-----------\nIn most cases, inconsistencies between video and subtitles occur when starting\nor ending segments present in video are not present in subtitles, or vice versa.\nThis can occur, for example, when a TV episode recap in the subtitles was pruned\nfrom video. Subsync typically works well in these cases, and in my experience\nthis covers >95% of use cases. Handling breaks and splits outside of the beginning\nand ending segments is left to future work (see below).\n\nVLC Integration\n---------------\nTo demonstrate how one might use `subsync` seamlessly with real video software,\nwe developed a prototype integration into the popular\n[VLC](https://www.videolan.org/vlc/index.html) media player, which was demoed\nduring the HackIllinois 2019 project expo. The resulting patch can be found in\nthe file\n[subsync-vlc.patch](https://github.com/smacke/subsync/raw/master/subsync-vlc.patch).\nHere are instructions for how to use it.\n\n1. First clone the 3.0 maintenance branch of VLC and checkout 3.0.6:\n~~~\ngit clone git://git.videolan.org/vlc/vlc-3.0.git\ncd vlc-3.0\ngit checkout 3.0.6\n~~~\n2. Next, apply the patch:\n~~~\nwget https://github.com/smacke/subsync/raw/master/subsync-vlc.patch\ngit apply subsync-vlc.patch\n~~~\n3. Follow the normal instructions on the\n[VideoLAN wiki](https://wiki.videolan.org/VLC_Developers_Corner/)\nfor building VLC from source. *Warning: this is not easy.*\n\nYou should now be able to autosynchronize subtitles using the hotkey `Ctrl+Shift+S`\n(only enabled while subtitles are present).\n\nFuture Work\n-----------\n1. I am currently working to extend the synchronization algorithm to handle\n   splits / breaks in the middle of video not present in subtitles (or vice\n   versa). It will take some time before I have a robust solution (assuming one\n   is possible). See [#10](https://github.com/smacke/subsync/issues/10) for\n   more details.\n\n2. The prototype VLC patch is very experimental -- it was developed under\n   pressure and just barely works. I would love to see this project more\n   robustly integrated with VLC, either directly in the VLC core, or as a\n   plugin.  If you or anyone you know has ideas for how to accomplish this,\n   please let me know!\n\nHistory\n-------\nThe implementation for this project was started during HackIllinois 2019, for\nwhich it received an **_Honorable Mention_** (ranked in the top 5 projects,\nexcluding projects that won company-specific prizes).\n\nCredits\n-------\nThis project would not be possible without the following libraries:\n- [ffmpeg](https://www.ffmpeg.org/) and the [ffmpeg-python](https://github.com/kkroening/ffmpeg-python) wrapper, for extracting raw audio from video\n- VAD from [webrtc](https://webrtc.org/) and the [py-webrtcvad](https://github.com/wiseman/py-webrtcvad) wrapper, for speech detection\n- [srt](https://pypi.org/project/srt/) for operating on [SRT files](https://en.wikipedia.org/wiki/SubRip#SubRip_text_file_format)\n- [numpy](http://www.numpy.org/) and, indirectly, [FFTPACK](https://www.netlib.org/fftpack/), which powers the FFT-based algorithm for fast scoring of alignments between subtitles (or subtitles and video)\n- [sklearn](https://scikit-learn.org/) for its data pipeline API\n- Other excellent Python libraries like [argparse](https://docs.python.org/3/library/argparse.html) and [tqdm](https://tqdm.github.io/), not related to the core functionality, but which enable much better experiences for developers and users.\n\n# License\nCode in this project is [MIT licensed](https://opensource.org/licenses/MIT).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/smacke/subsync",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "subsume",
    "package_url": "https://pypi.org/project/subsume/",
    "platform": "",
    "project_url": "https://pypi.org/project/subsume/",
    "project_urls": {
      "Homepage": "https://github.com/smacke/subsync"
    },
    "release_url": "https://pypi.org/project/subsume/0.2.16/",
    "requires_dist": [
      "argparse",
      "ffmpeg-python",
      "future",
      "numpy (>=1.12.0)",
      "scikit-learn (>=0.20.4)",
      "six",
      "srt (>=3.0.0)",
      "tqdm",
      "webrtcvad"
    ],
    "requires_python": "",
    "summary": "Language-agnostic synchronization of subtitles with video via speech detection.",
    "version": "0.2.16",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6244639,
  "releases": {
    "0.2.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "486e847660fe98c1e274b911b0eab087c72161999d9317c18fa21f75c351dcae",
          "md5": "ba302319c38797c1a9f6be98ba9e5ac9",
          "sha256": "1d3ce71c3de4b89479805cf5cbba3fdd02b517e9314957669cdcaa575e458b27"
        },
        "downloads": -1,
        "filename": "subsume-0.2.16-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba302319c38797c1a9f6be98ba9e5ac9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26644,
        "upload_time": "2019-12-05T01:02:35",
        "upload_time_iso_8601": "2019-12-05T01:02:35.527669Z",
        "url": "https://files.pythonhosted.org/packages/48/6e/847660fe98c1e274b911b0eab087c72161999d9317c18fa21f75c351dcae/subsume-0.2.16-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c97d90602d5a7e52453c55d033c931ed5398bb5d4ab50dd98417eaad874a9f52",
          "md5": "b92f91eb62afb561dd8ffe7dedce660d",
          "sha256": "0b83d8e45e4a9f819f371c7a95681a985863f30e57fddec9897e6725877ba735"
        },
        "downloads": -1,
        "filename": "subsume-0.2.16.tar.gz",
        "has_sig": false,
        "md5_digest": "b92f91eb62afb561dd8ffe7dedce660d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12622,
        "upload_time": "2019-12-05T01:02:37",
        "upload_time_iso_8601": "2019-12-05T01:02:37.767148Z",
        "url": "https://files.pythonhosted.org/packages/c9/7d/90602d5a7e52453c55d033c931ed5398bb5d4ab50dd98417eaad874a9f52/subsume-0.2.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "486e847660fe98c1e274b911b0eab087c72161999d9317c18fa21f75c351dcae",
        "md5": "ba302319c38797c1a9f6be98ba9e5ac9",
        "sha256": "1d3ce71c3de4b89479805cf5cbba3fdd02b517e9314957669cdcaa575e458b27"
      },
      "downloads": -1,
      "filename": "subsume-0.2.16-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ba302319c38797c1a9f6be98ba9e5ac9",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 26644,
      "upload_time": "2019-12-05T01:02:35",
      "upload_time_iso_8601": "2019-12-05T01:02:35.527669Z",
      "url": "https://files.pythonhosted.org/packages/48/6e/847660fe98c1e274b911b0eab087c72161999d9317c18fa21f75c351dcae/subsume-0.2.16-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c97d90602d5a7e52453c55d033c931ed5398bb5d4ab50dd98417eaad874a9f52",
        "md5": "b92f91eb62afb561dd8ffe7dedce660d",
        "sha256": "0b83d8e45e4a9f819f371c7a95681a985863f30e57fddec9897e6725877ba735"
      },
      "downloads": -1,
      "filename": "subsume-0.2.16.tar.gz",
      "has_sig": false,
      "md5_digest": "b92f91eb62afb561dd8ffe7dedce660d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12622,
      "upload_time": "2019-12-05T01:02:37",
      "upload_time_iso_8601": "2019-12-05T01:02:37.767148Z",
      "url": "https://files.pythonhosted.org/packages/c9/7d/90602d5a7e52453c55d033c931ed5398bb5d4ab50dd98417eaad874a9f52/subsume-0.2.16.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}