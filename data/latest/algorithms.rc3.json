{
  "info": {
    "author": "Algorithms Team & Contributors",
    "author_email": "kwk236@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/algorithms.svg)](https://badge.fury.io/py/algorithms)\n[![Open Source Helpers](https://www.codetriage.com/keon/algorithms/badges/users.svg)](https://www.codetriage.com/keon/algorithms)\n[![Build Status](https://travis-ci.org/keon/algorithms.svg?branch=master)](https://travis-ci.org/keon/algorithms)\n[![Coverage Status](https://coveralls.io/repos/github/keon/algorithms/badge.svg?branch=master)](https://coveralls.io/github/keon/algorithms?branch=master)\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/keon/algorithms/master/docs/source/_static/logo/logotype1blue.png\"></p>\n\nPythonic Data Structures and Algorithms\n=========================================\n\nMinimal and clean example implementations of data structures and algorithms in Python 3.\n\n## Contributing\nThanks for your interest in contributing! There are many ways to contribute to this project. [Get started here](CONTRIBUTING.md)\n\n## Tests\n\n### Use unittest\nFor running all tests write down:\n\n    $ python3 -m unittest discover tests\n\nFor running some specific tests you can do this as following (Ex: sort):\n\n    $ python3 -m unittest tests.test_sort\n\n### Use pytest\nFor running all tests write down:\n\n    $ python3 -m pytest tests\n\n## Install\nIf you want to use the API algorithms in your code, it is as simple as:\n\n    $ pip3 install algorithms\n\nYou can test by creating a python file: (Ex: use `merge_sort` in `sort`)\n\n```python3\nfrom algorithms.sort import merge_sort\n\nif __name__ == \"__main__\":\n    my_list = [1, 8, 3, 5, 6]\n    my_list = merge_sort(my_list)\n    print(my_list)\n```\n\n## Uninstall\nIf you want to uninstall algorithms, it is as simple as:\n\n    $ pip3 uninstall -y algorithms\n\n## List of Implementations\n\n- [arrays](algorithms/arrays)\n    - [delete_nth](algorithms/arrays/delete_nth.py)\n    - [flatten](algorithms/arrays/flatten.py)\n    - [garage](algorithms/arrays/garage.py)\n    - [josephus_problem](algorithms/arrays/josephus.py)\n    - [limit](algorithms/arrays/limit.py)\n    - [longest_non_repeat](algorithms/arrays/longest_non_repeat.py/)\n    - [max_ones_index](algorithms/arrays/max_ones_index.py)\n    - [merge_intervals](algorithms/arrays/merge_intervals.py)\n    - [missing_ranges](algorithms/arrays/missing_ranges.py)\n    - [plus_one](algorithms/arrays/plus_one.py)\n    - [rotate](algorithms/arrays/rotate.py)\n    - [summarize_ranges](algorithms/arrays/summarize_ranges.py)\n    - [three_sum](algorithms/arrays/three_sum.py)\n    - [trimmean](algorithms/arrays/trimmean.py)\n    - [top_1](algorithms/arrays/top_1.py)\n    - [two_sum](algorithms/arrays/two_sum.py)\n    - [move_zeros](algorithms/arrays/move_zeros.py)\n    - [n_sum](algorithms/arrays/n_sum.py)\n- [automata](algorithms/automata)\n    - [DFA](algorithms/automata/dfa.py)\n- [backtrack](algorithms/backtrack)\n    - [general_solution.md](algorithms/backtrack/)\n    - [add_operators](algorithms/backtrack/add_operators.py)\n    - [anagram](algorithms/backtrack/anagram.py)\n    - [array_sum_combinations](algorithms/backtrack/array_sum_combinations.py)\n    - [combination_sum](algorithms/backtrack/combination_sum.py)\n    - [factor_combinations](algorithms/backtrack/factor_combinations.py)\n    - [generate_abbreviations](algorithms/backtrack/generate_abbreviations.py)\n    - [generate_parenthesis](algorithms/backtrack/generate_parenthesis.py)\n    - [letter_combination](algorithms/backtrack/letter_combination.py)\n    - [palindrome_partitioning](algorithms/backtrack/palindrome_partitioning.py)\n    - [pattern_match](algorithms/backtrack/pattern_match.py)\n    - [permute](algorithms/backtrack/permute.py)\n    - [permute_unique](algorithms/backtrack/permute_unique.py)\n    - [subsets](algorithms/backtrack/subsets.py)\n    - [subsets_unique](algorithms/backtrack/subsets_unique.py)\n- [bfs](algorithms/bfs)\n    - [maze_search](algorithms/bfs/maze_search.py)\n    - [shortest_distance_from_all_buildings](algorithms/bfs/shortest_distance_from_all_buildings.py)\n    - [word_ladder](algorithms/bfs/word_ladder.py)\n- [bit](algorithms/bit)\n    - [add_bitwise_operator](algorithms/bit/add_bitwise_operator.py)\n    - [bit_operation](algorithms/bit/bit_operation.py)\n    - [bytes_int_conversion](algorithms/bit/bytes_int_conversion.py)\n    - [count_flips_to_convert](algorithms/bit/count_flips_to_convert.py)\n    - [count_ones](algorithms/bit/count_ones.py)\n    - [find_difference](algorithms/bit/find_difference.py)\n    - [find_missing_number](algorithms/bit/find_missing_number.py)\n    - [flip_bit_longest_sequence](algorithms/bit/flip_bit_longest_sequence.py)\n    - [power_of_two](algorithms/bit/power_of_two.py)\n    - [reverse_bits](algorithms/bit/reverse_bits.py)\n    - [single_number](algorithms/bit/single_number.py)\n    - [single_number2](algorithms/bit/single_number2.py)\n    - [single_number3](algorithms/bit/single_number3.py)\n    - [subsets](algorithms/bit/subsets.py)\n    - [swap_pair](algorithms/bit/swap_pair.py)\n    - [has_alternative_bit](algorithms/bit/has_alternative_bit.py)\n    - [insert_bit](algorithms/bit/insert_bit.py)\n    - [remove_bit](algorithms/bit/remove_bit.py)\n    - [binary_gap](algorithms/bit/binary_gap.py)\n- [compression](algorithms/compression)\n    - [huffman_coding](algorithms/compression/huffman_coding.py)\n    - [rle_compression](algorithms/compression/rle_compression.py)\n    - [elias](algorithms/compression/elias.py)\n- [dfs](algorithms/dfs)\n    - [all_factors](algorithms/dfs/all_factors.py)\n    - [count_islands](algorithms/dfs/count_islands.py)\n    - [pacific_atlantic](algorithms/dfs/pacific_atlantic.py)\n    - [sudoku_solver](algorithms/dfs/sudoku_solver.py)\n    - [walls_and_gates](algorithms/dfs/walls_and_gates.py)\n- [distribution](algorithms/distribution)\n    - [histogram](algorithms/distribution/histogram.py)\n- [dp](algorithms/dp)\n    - [buy_sell_stock](algorithms/dp/buy_sell_stock.py)\n    - [climbing_stairs](algorithms/dp/climbing_stairs.py)\n    - [coin_change](algorithms/dp/coin_change.py)\n    - [combination_sum](algorithms/dp/combination_sum.py)\n    - [egg_drop](algorithms/dp/egg_drop.py)\n    - [house_robber](algorithms/dp/house_robber.py)\n    - [int_divide](algorithms/dp/int_divide.py)\n    - [job_scheduling](algorithms/dp/job_scheduling.py)\n    - [knapsack](algorithms/dp/knapsack.py)\n    - [longest_increasing](algorithms/dp/longest_increasing.py)\n    - [matrix_chain_order](algorithms/dp/matrix_chain_order.py)\n    - [max_product_subarray](algorithms/dp/max_product_subarray.py)\n    - [max_subarray](algorithms/dp/max_subarray.py)\n    - [min_cost_path](algorithms/dp/min_cost_path.py)\n    - [num_decodings](algorithms/dp/num_decodings.py)\n    - [regex_matching](algorithms/dp/regex_matching.py)\n    - [rod_cut](algorithms/dp/rod_cut.py)\n    - [word_break](algorithms/dp/word_break.py)\n    - [fibonacci](algorithms/dp/fib.py)\n\t- [hosoya triangle](algorithms/dp/hosoya_triangle.py)\n- [graph](algorithms/graph)\n    - [check_bipartite](algorithms/graph/check_bipartite.py)\n    - [strongly_connected](algorithms/graph/check_digraph_strongly_connected.py)\n    - [clone_graph](algorithms/graph/clone_graph.py)\n    - [cycle_detection](algorithms/graph/cycle_detection.py)\n    - [find_all_cliques](algorithms/graph/find_all_cliques.py)\n    - [find_path](algorithms/graph/find_path.py)\n    - [graph](algorithms/graph/graph.py)\n    - [dijkstra](algorithms/graph/dijkstra.py)\n    - [markov_chain](algorithms/graph/markov_chain.py)\n    - [minimum_spanning_tree](algorithms/graph/minimum_spanning_tree.py)\n    - [satisfiability](algorithms/graph/satisfiability.py)\n    - [minimum_spanning_tree_prims](algorithms/graph/prims_minimum_spanning.py)\n    - [tarjan](algorithms/graph/tarjan.py)\n    - [traversal](algorithms/graph/traversal.py)\n\t  - [maximum_flow](algorithms/graph/maximum_flow.py)\n    - [maximum_flow_bfs](algorithms/graph/maximum_flow_bfs.py)\n    - [maximum_flow_dfs](algorithms/graph/maximum_flow_dfs.py)\n    - [all_pairs_shortest_path](algorithms/graph/all_pairs_shortest_path.py)\n    - [bellman_ford](algorithms/graph/bellman_ford.py)\n    - [Count Connected Components](algorithms/graph/count_connected_number_of_component.py)\n- [heap](algorithms/heap)\n    - [merge_sorted_k_lists](algorithms/heap/merge_sorted_k_lists.py)\n    - [skyline](algorithms/heap/skyline.py)\n    - [sliding_window_max](algorithms/heap/sliding_window_max.py)\n    - [binary_heap](algorithms/heap/binary_heap.py)\n    - [k_closest_points](algorithms/heap/k_closest_points.py)\n- [linkedlist](algorithms/linkedlist)\n    - [add_two_numbers](algorithms/linkedlist/add_two_numbers.py)\n    - [copy_random_pointer](algorithms/linkedlist/copy_random_pointer.py)\n    - [delete_node](algorithms/linkedlist/delete_node.py)\n    - [first_cyclic_node](algorithms/linkedlist/first_cyclic_node.py)\n    - [is_cyclic](algorithms/linkedlist/is_cyclic.py)\n    - [is_palindrome](algorithms/linkedlist/is_palindrome.py)\n    - [kth_to_last](algorithms/linkedlist/kth_to_last.py)\n    - [linkedlist](algorithms/linkedlist/linkedlist.py)\n    - [remove_duplicates](algorithms/linkedlist/remove_duplicates.py)\n    - [reverse](algorithms/linkedlist/reverse.py)\n    - [rotate_list](algorithms/linkedlist/rotate_list.py)\n    - [swap_in_pairs](algorithms/linkedlist/swap_in_pairs.py)\n    - [is_sorted](algorithms/linkedlist/is_sorted.py)\n    - [remove_range](algorithms/linkedlist/remove_range.py)\n- [map](algorithms/map)\n    - [hashtable](algorithms/map/hashtable.py)\n    - [separate_chaining_hashtable](algorithms/map/separate_chaining_hashtable.py)\n    - [longest_common_subsequence](algorithms/map/longest_common_subsequence.py)\n    - [randomized_set](algorithms/map/randomized_set.py)\n    - [valid_sudoku](algorithms/map/valid_sudoku.py)\n    - [word_pattern](algorithms/map/word_pattern.py)\n    - [is_isomorphic](algorithms/map/is_isomorphic.py)\n    - [is_anagram](algorithms/map/is_anagram.py)\n- [maths](algorithms/maths)\n    - [power](algorithms/maths/power.py)\n    - [base_conversion](algorithms/maths/base_conversion.py)\n    - [combination](algorithms/maths/combination.py)\n    - [cosine_similarity](algorithms/maths/cosine_similarity.py)\n    - [decimal_to_binary_ip](algorithms/maths/decimal_to_binary_ip.py)\n    - [euler_totient](algorithms/maths/euler_totient.py)\n    - [extended_gcd](algorithms/maths/extended_gcd.py)\n    - [factorial](algorithms/maths/factorial.py)\n    - [gcd/lcm](algorithms/maths/gcd.py)\n    - [generate_strobogrammtic](algorithms/maths/generate_strobogrammtic.py)\n    - [is_strobogrammatic](algorithms/maths/is_strobogrammatic.py)\n    - [modular_exponential](algorithms/maths/modular_exponential.py)\n    - [next_bigger](algorithms/maths/next_bigger.py)\n    - [next_perfect_square](algorithms/maths/next_perfect_square.py)\n    - [nth_digit](algorithms/maths/nth_digit.py)\n    - [prime_check](algorithms/maths/prime_check.py)\n    - [primes_sieve_of_eratosthenes](algorithms/maths/primes_sieve_of_eratosthenes.py)\n    - [pythagoras](algorithms/maths/pythagoras.py)\n    - [rabin_miller](algorithms/maths/rabin_miller.py)\n    - [rsa](algorithms/maths/rsa.py)\n    - [sqrt_precision_factor](algorithms/maths/sqrt_precision_factor.py)\n    - [summing_digits](algorithms/maths/summing_digits.py)\n    - [hailstone](algorithms/maths/hailstone.py)\n    - [recursive_binomial_coefficient](algorithms/maths/recursive_binomial_coefficient.py)\n    - [find_order](algorithms/maths/find_order_simple.py)\n\t- [find_primitive_root](algorithms/maths/find_primitive_root_simple.py)\n\t- [diffie_hellman_key_exchange](algorithms/maths/diffie_hellman_key_exchange.py)\n- [matrix](algorithms/matrix)\n    - [sudoku_validator](algorithms/matrix/sudoku_validator.py)\n    - [bomb_enemy](algorithms/matrix/bomb_enemy.py)\n    - [copy_transform](algorithms/matrix/copy_transform.py)\n    - [count_paths](algorithms/matrix/count_paths.py)\n    - [matrix_exponentiation](algorithms/matrix/matrix_exponentiation.py)\n    - [matrix_inversion](algorithms/matrix/matrix_inversion.py)\n    - [matrix_multiplication](algorithms/matrix/multiply.py)\n    - [rotate_image](algorithms/matrix/rotate_image.py)\n    - [search_in_sorted_matrix](algorithms/matrix/search_in_sorted_matrix.py)\n    - [sparse_dot_vector](algorithms/matrix/sparse_dot_vector.py)\n    - [sparse_mul](algorithms/matrix/sparse_mul.py)\n    - [spiral_traversal](algorithms/matrix/spiral_traversal.py)\n\t- [crout_matrix_decomposition](algorithms/matrix/crout_matrix_decomposition.py)\n\t- [cholesky_matrix_decomposition](algorithms/matrix/cholesky_matrix_decomposition.py)\n    - [sum_sub_squares](algorithms/matrix/sum_sub_squares.py)\n- [queues](algorithms/queues)\n    - [max_sliding_window](algorithms/queues/max_sliding_window.py)\n    - [moving_average](algorithms/queues/moving_average.py)\n    - [queue](algorithms/queues/queue.py)\n    - [reconstruct_queue](algorithms/queues/reconstruct_queue.py)\n    - [zigzagiterator](algorithms/queues/zigzagiterator.py)\n- [search](algorithms/search)\n    - [binary_search](algorithms/search/binary_search.py)\n    - [first_occurrence](algorithms/search/first_occurrence.py)\n    - [last_occurrence](algorithms/search/last_occurrence.py)\n    - [linear_search](algorithms/search/linear_search.py)\n    - [search_insert](algorithms/search/search_insert.py)\n    - [two_sum](algorithms/search/two_sum.py)\n    - [search_range](algorithms/search/search_range.py)\n    - [find_min_rotate](algorithms/search/find_min_rotate.py)\n    - [search_rotate](algorithms/search/search_rotate.py)\n    - [jump_search](algorithms/search/jump_search.py)\n    - [next_greatest_letter](algorithms/search/next_greatest_letter.py)\n    - [interpolation_search](algorithms/search/interpolation_search.py)\n- [set](algorithms/set)\n    - [randomized_set](algorithms/set/randomized_set.py)\n    - [set_covering](algorithms/set/set_covering.py)\n    - [find_keyboard_row](algorithms/set/find_keyboard_row.py)\n- [sort](algorithms/sort)\n    - [bitonic_sort](algorithms/sort/bitonic_sort.py)\n    - [bogo_sort](algorithms/sort/bogo_sort.py)\n    - [bubble_sort](algorithms/sort/bubble_sort.py)\n    - [bucket_sort](algorithms/sort/bucket_sort.py)\n    - [cocktail_shaker_sort](algorithms/sort/cocktail_shaker_sort.py)\n    - [comb_sort](algorithms/sort/comb_sort.py)\n    - [counting_sort](algorithms/sort/counting_sort.py)\n    - [cycle_sort](algorithms/sort/cycle_sort.py)\n    - [gnome_sort](algorithms/sort/gnome_sort.py)\n    - [heap_sort](algorithms/sort/heap_sort.py)\n    - [insertion_sort](algorithms/sort/insertion_sort.py)\n    - [meeting_rooms](algorithms/sort/meeting_rooms.py)\n    - [merge_sort](algorithms/sort/merge_sort.py)\n    - [pancake_sort](algorithms/sort/pancake_sort.py)\n    - [pigeonhole_sort](algorithms/sort/pigeonhole_sort.py)\n    - [quick_sort](algorithms/sort/quick_sort.py)\n    - [radix_sort](algorithms/sort/radix_sort.py)\n    - [selection_sort](algorithms/sort/selection_sort.py)\n    - [shell_sort](algorithms/sort/shell_sort.py)\n    - [sort_colors](algorithms/sort/sort_colors.py)\n    - [stooge_sort](algorithms/sort/stooge_sort.py)\n    - [top_sort](algorithms/sort/top_sort.py)\n    - [wiggle_sort](algorithms/sort/wiggle_sort.py)\n- [stack](algorithms/stack)\n    - [longest_abs_path](algorithms/stack/longest_abs_path.py)\n    - [simplify_path](algorithms/stack/simplify_path.py)\n    - [stack](algorithms/stack/stack.py)\n    - [valid_parenthesis](algorithms/stack/valid_parenthesis.py)\n    - [stutter](algorithms/stack/stutter.py)\n    - [switch_pairs](algorithms/stack/switch_pairs.py)\n    - [is_consecutive](algorithms/stack/is_consecutive.py)\n    - [remove_min](algorithms/stack/remove_min.py)\n    - [is_sorted](algorithms/stack/is_sorted.py)\n- [strings](algorithms/strings)\n    - [fizzbuzz](algorithms/strings/fizzbuzz.py)\n    - [delete_reoccurring](algorithms/strings/delete_reoccurring.py)\n    - [strip_url_params](algorithms/strings/strip_url_params.py)\n    - [validate_coordinates](algorithms/strings/validate_coordinates.py)\n    - [domain_extractor](algorithms/strings/domain_extractor.py)\n    - [merge_string_checker](algorithms/strings/merge_string_checker.py)\n    - [add_binary](algorithms/strings/add_binary.py)\n    - [breaking_bad](algorithms/strings/breaking_bad.py)\n    - [decode_string](algorithms/strings/decode_string.py)\n    - [encode_decode](algorithms/strings/encode_decode.py)\n    - [group_anagrams](algorithms/strings/group_anagrams.py)\n    - [int_to_roman](algorithms/strings/int_to_roman.py)\n    - [is_palindrome](algorithms/strings/is_palindrome.py)\n    - [license_number](algorithms/strings/license_number.py)\n    - [make_sentence](algorithms/strings/make_sentence.py)\n    - [multiply_strings](algorithms/strings/multiply_strings.py)\n    - [one_edit_distance](algorithms/strings/one_edit_distance.py)\n    - [rabin_karp](algorithms/strings/rabin_karp.py)\n    - [reverse_string](algorithms/strings/reverse_string.py)\n    - [reverse_vowel](algorithms/strings/reverse_vowel.py)\n    - [reverse_words](algorithms/strings/reverse_words.py)\n    - [roman_to_int](algorithms/strings/roman_to_int.py)\n    - [word_squares](algorithms/strings/word_squares.py)\n    - [unique_morse](algorithms/strings/unique_morse.py)\n    - [judge_circle](algorithms/strings/judge_circle.py)\n    - [strong_password](algorithms/strings/strong_password.py)\n    - [caesar_cipher](algorithms/strings/caesar_cipher.py)\n    - [check_pangram](algorithms/strings/check_pangram.py)\n    - [contain_string](algorithms/strings/contain_string.py)\n    - [count_binary_substring](algorithms/strings/count_binary_substring.py)\n    - [repeat_string](algorithms/strings/repeat_string.py)\n    - [min_distance](algorithms/strings/min_distance.py)\n    - [longest_common_prefix](algorithms/strings/longest_common_prefix.py)\n    - [rotate](algorithms/strings/rotate.py)\n    - [first_unique_char](algorithms/strings/first_unique_char.py)\n    - [repeat_substring](algorithms/strings/repeat_substring.py)\n\t  - [atbash_cipher](algorithms/strings/atbash_cipher.py)\n    - [longest_palindromic_substring](algorithms/strings/longest_palindromic_substring.py)\n  \t- [knuth_morris_pratt](algorithms/strings/knuth_morris_pratt.py)\n- [tree](algorithms/tree)\n    - [bst](algorithms/tree/bst)\n        - [array_to_bst](algorithms/tree/bst/array_to_bst.py)\n        - [bst_closest_value](algorithms/tree/bst/bst_closest_value.py)\n        - [BSTIterator](algorithms/tree/bst/BSTIterator.py)\n        - [delete_node](algorithms/tree/bst/delete_node.py)\n        - [is_bst](algorithms/tree/bst/is_bst.py)\n        - [kth_smallest](algorithms/tree/bst/kth_smallest.py)\n        - [lowest_common_ancestor](algorithms/tree/bst/lowest_common_ancestor.py)\n        - [predecessor](algorithms/tree/bst/predecessor.py)\n        - [serialize_deserialize](algorithms/tree/bst/serialize_deserialize.py)\n        - [successor](algorithms/tree/bst/successor.py)\n        - [unique_bst](algorithms/tree/bst/unique_bst.py)\n        - [depth_sum](algorithms/tree/bst/depth_sum.py)\n        - [count_left_node](algorithms/tree/bst/count_left_node.py)\n        - [num_empty](algorithms/tree/bst/num_empty.py)\n        - [height](algorithms/tree/bst/height.py)\n    - [red_black_tree](algorithms/tree/red_black_tree)\n        - [red_black_tree](algorithms/tree/red_black_tree/red_black_tree.py)\n    - [segment_tree](algorithms/tree/segment_tree)\n        - [segment_tree](algorithms/tree/segment_tree/segment_tree.py)\n        - [iterative_segment_tree](algorithms/tree/segment_tree/iterative_segment_tree.py)\n    - [traversal](algorithms/tree/traversal)\n        - [inorder](algorithms/tree/traversal/inorder.py)\n        - [level_order](algorithms/tree/traversal/level_order.py)\n        - [postorder](algorithms/tree/traversal/postorder.py)\n        - [preorder](algorithms/tree/traversal/preorder.py)\n        - [zigzag](algorithms/tree/traversal/zigzag.py)\n    - [trie](algorithms/tree/trie)\n        - [add_and_search](algorithms/tree/trie/add_and_search.py)\n        - [trie](algorithms/tree/trie/trie.py)\n    - [b_tree](algorithms/tree/b_tree.py)\n    - [binary_tree_paths](algorithms/tree/binary_tree_paths.py)\n    - [bin_tree_to_list](algorithms/tree/bin_tree_to_list.py)\n    - [deepest_left](algorithms/tree/deepest_left.py)\n    - [invert_tree](algorithms/tree/invert_tree.py)\n    - [is_balanced](algorithms/tree/is_balanced.py)\n    - [is_subtree](algorithms/tree/is_subtree.py)\n    - [is_symmetric](algorithms/tree/is_symmetric.py)\n    - [longest_consecutive](algorithms/tree/longest_consecutive.py)\n    - [lowest_common_ancestor](algorithms/tree/lowest_common_ancestor.py)\n    - [max_height](algorithms/tree/max_height.py)\n    - [max_path_sum](algorithms/tree/max_path_sum.py)\n    - [min_height](algorithms/tree/min_height.py)\n    - [path_sum](algorithms/tree/path_sum.py)\n    - [path_sum2](algorithms/tree/path_sum2.py)\n    - [pretty_print](algorithms/tree/pretty_print.py)\n    - [same_tree](algorithms/tree/same_tree.py)\n    - [tree](algorithms/tree/tree.py)\n- [unix](algorithms/unix)\n    - [path](algorithms/unix/path/)\n        - [join_with_slash](algorithms/unix/path/join_with_slash.py)\n        - [full_path](algorithms/unix/path/full_path.py)\n        - [split](algorithms/unix/path/split.py)\n        - [simplify_path](algorithms/unix/path/simplify_path.py)\n- [unionfind](algorithms/unionfind)\n    - [count_islands](algorithms/unionfind/count_islands.py)\n\n\n## Contributors\n\nThanks to [all the contributors](https://github.com/keon/algorithms/graphs/contributors)\nwho helped in building the repo.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/keon/algorithms",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "algorithms",
    "package_url": "https://pypi.org/project/algorithms/",
    "platform": "",
    "project_url": "https://pypi.org/project/algorithms/",
    "project_urls": {
      "Homepage": "https://github.com/keon/algorithms"
    },
    "release_url": "https://pypi.org/project/algorithms/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Pythonic Data Structures and Algorithms",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8337044,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62fb18fb2a9b79bac5e59a863baba4f09ac4cfffd3ae527fc2cd97aa59e8437d",
          "md5": "e8f42faec4a8fdbb43fc56da181a0815",
          "sha256": "def0ade2295d0756e4182ac59cdde5afe4e604c10553e3f1ce3999054dd04b72"
        },
        "downloads": -1,
        "filename": "algorithms-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8f42faec4a8fdbb43fc56da181a0815",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 132526,
        "upload_time": "2018-06-06T11:20:50",
        "upload_time_iso_8601": "2018-06-06T11:20:50.405111Z",
        "url": "https://files.pythonhosted.org/packages/62/fb/18fb2a9b79bac5e59a863baba4f09ac4cfffd3ae527fc2cd97aa59e8437d/algorithms-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d8e1324087fcbd34ddbbcba0e68b7bc7b29e9ea318da89db59d4b891471741c",
          "md5": "5cc08bdf2f77a53638d07004e6e631ef",
          "sha256": "bf99d89b6156fa34a9d4d3d39bcc4b211f588e8401640a49e4f68893ba0a5c23"
        },
        "downloads": -1,
        "filename": "algorithms-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5cc08bdf2f77a53638d07004e6e631ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 82967,
        "upload_time": "2018-06-06T11:20:51",
        "upload_time_iso_8601": "2018-06-06T11:20:51.956502Z",
        "url": "https://files.pythonhosted.org/packages/9d/8e/1324087fcbd34ddbbcba0e68b7bc7b29e9ea318da89db59d4b891471741c/algorithms-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cb9aed4e46602c56bc6021e29af5fb543af7bfe52599482ce786e538453c1e5",
          "md5": "4c2361cc5922548804ec2d2282f37930",
          "sha256": "2536c801fda4eb8bd41283be954612945a46225bdbda9306d4be3481d34dc786"
        },
        "downloads": -1,
        "filename": "algorithms-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c2361cc5922548804ec2d2282f37930",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 132528,
        "upload_time": "2018-06-06T11:23:25",
        "upload_time_iso_8601": "2018-06-06T11:23:25.461393Z",
        "url": "https://files.pythonhosted.org/packages/5c/b9/aed4e46602c56bc6021e29af5fb543af7bfe52599482ce786e538453c1e5/algorithms-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8db11836c7c9f49074ae157dd3dfb1dd6b4bef6cb65add48ea29d1f25b80d2d",
          "md5": "0bae4d841aa6ff3477c03663cbe5344d",
          "sha256": "9b329416df45e34b1acca59e427aee6416c60781eea255efcbc569a3b3e01672"
        },
        "downloads": -1,
        "filename": "algorithms-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0bae4d841aa6ff3477c03663cbe5344d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 82960,
        "upload_time": "2018-06-06T11:23:27",
        "upload_time_iso_8601": "2018-06-06T11:23:27.053926Z",
        "url": "https://files.pythonhosted.org/packages/c8/db/11836c7c9f49074ae157dd3dfb1dd6b4bef6cb65add48ea29d1f25b80d2d/algorithms-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31a4a94b159b94d545ab7662b659f94b36f3b469b982fe873a6d956e4ffdc0d5",
          "md5": "9a8431309bc9646ec6dd06b163940373",
          "sha256": "ee76609fdf99dc3c6f130f3923b77fc12e8636957791caa89e06743d524b4e15"
        },
        "downloads": -1,
        "filename": "algorithms-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a8431309bc9646ec6dd06b163940373",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 209155,
        "upload_time": "2020-10-04T14:44:02",
        "upload_time_iso_8601": "2020-10-04T14:44:02.858436Z",
        "url": "https://files.pythonhosted.org/packages/31/a4/a94b159b94d545ab7662b659f94b36f3b469b982fe873a6d956e4ffdc0d5/algorithms-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f2f1b2201adfeb896499f248d932698b18a68d142bcf88840987ee10e08c73a",
          "md5": "58b1658aa110bde9635a642c86702c6c",
          "sha256": "ccd05e13d4ad169b0061028b16b16e7f67e884d237a8bbff13b354ee5d31f34c"
        },
        "downloads": -1,
        "filename": "algorithms-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "58b1658aa110bde9635a642c86702c6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 137840,
        "upload_time": "2020-10-04T14:44:04",
        "upload_time_iso_8601": "2020-10-04T14:44:04.764181Z",
        "url": "https://files.pythonhosted.org/packages/7f/2f/1b2201adfeb896499f248d932698b18a68d142bcf88840987ee10e08c73a/algorithms-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31a4a94b159b94d545ab7662b659f94b36f3b469b982fe873a6d956e4ffdc0d5",
        "md5": "9a8431309bc9646ec6dd06b163940373",
        "sha256": "ee76609fdf99dc3c6f130f3923b77fc12e8636957791caa89e06743d524b4e15"
      },
      "downloads": -1,
      "filename": "algorithms-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a8431309bc9646ec6dd06b163940373",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 209155,
      "upload_time": "2020-10-04T14:44:02",
      "upload_time_iso_8601": "2020-10-04T14:44:02.858436Z",
      "url": "https://files.pythonhosted.org/packages/31/a4/a94b159b94d545ab7662b659f94b36f3b469b982fe873a6d956e4ffdc0d5/algorithms-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f2f1b2201adfeb896499f248d932698b18a68d142bcf88840987ee10e08c73a",
        "md5": "58b1658aa110bde9635a642c86702c6c",
        "sha256": "ccd05e13d4ad169b0061028b16b16e7f67e884d237a8bbff13b354ee5d31f34c"
      },
      "downloads": -1,
      "filename": "algorithms-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "58b1658aa110bde9635a642c86702c6c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 137840,
      "upload_time": "2020-10-04T14:44:04",
      "upload_time_iso_8601": "2020-10-04T14:44:04.764181Z",
      "url": "https://files.pythonhosted.org/packages/7f/2f/1b2201adfeb896499f248d932698b18a68d142bcf88840987ee10e08c73a/algorithms-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}