{
  "info": {
    "author": "Blueink",
    "author_email": "pypi@blueink.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# blueink-client-python\n\nA Python client library for the BlueInk eSignature API.\n\n## Overview\n\nThis README provides a narrative overview of using the Blueink Python client, and\nincludes examples for many common use cases. \n\nAdditional resources that might be useful include:\n\n* Examples in the `examples/` directory of this repository\n* The detailed [Blueink API Documentation](https://blueink.com/r/api-docs/), for\n  details on the data returned by each API call.\n\nFor detailed documentation for each method call, please consult the source code,\nor rely on auto-complete in your favorite editor / IDE. The code is well commented and\nincludes Python type annotations, which most IDEs understand.\n\n\n## Installation\n\nTo install this library, run the following command:\n\n```bash\npip install blueink-client-python\n```\n\n## Basic Usage\n\nRequests to the Blueink API are made via an instance of the `blueink.Client` class. The\n`blueink.Client` needs a Blueink private API key. By default the Client looks for\nthe private key in an environment variable named `BLUEINK_PRIVATE_API_KEY`. \n\n```bash\n# In your shell, or in .bashrc or similar\nexport BLUEINK_PRIVATE_API_KEY=YOUR_PRIVATE_API_KEY_HERE\n```\n\n```python\n# In your python code, create an instance of the blueink Client\nfrom blueink import Client\n\nclient = Client()\n```\n\nSetting the private key via the environment is strongly recommended (to avoid\nthe possiblity of hard-coding your private key in your source code). However, you\ncan also pass the private key when instantiating a Client, like so:\n\n\n```python\nfrom blueink import Client\n\nclient = Client(\"YOUR_PRIVATE_API_KEY\")\n```\n\n### Making API Calls\n\nMaking API calls with a client instance is easy. For example, to retrieve a list of\nBundles, do:\n\n```python\nresponse = client.bundles.list()\n\nbundles = response.data\nfor bundle in bundles:\n  print(bundle.id)\n```\n\nThe Client class follows a RESTful pattern for making API calls, like so: \n`client.[resource].[method]`.\n\nThe supported \"resources\" are:\n * `bundles`\n * `persons`\n * `packets` \n * `templates`\n\n The methods correspond to common REST operations: \n * `list`\n * `retrieve`\n * `create`\n * `update`\n * `delete`.\n\nHowever, note that:\n* Not all resources support all methods. \n* Some resources support one-off methods that are unique to that resource. \n  For example the `bundles` resource allows you to retrieve a list of events on \n  the Bundle by calling `client.bundles.list_events()`.\n\nDetailed documentation for each resource is below.\n\n### Responses\n\nAPI calls return a `NormalizedResponse` instance. The `NormalizedResponse` provides\nthe following attributes.\n\n* **response.data**\n\n  The json data returned via the API call is accessible via the data attribute. The data\n  attribute supports dictionary access and dot-notation access (for convenience and less\n  typing)\n\n  ```python\n  response = client.bundles.retrieve(\"some bundle ID\")\n  \n  bundle_data = response.data\n  print(bundle_data['id'])  # dictionary-style access\n  print(bundle_data.id)     # dot notation access\n  ```\n  \n* **response.request**\n\n  The request that led to this response. Under-the-hood, the Blueink client library\n  uses the [Python Requests Library](https://requests.readthedocs.io/). `response.request`\n  is an instance of `requests.PreparedRequest`.\n\n* **response.original_response**\n\n  Similarly, if you need access to the original response as returned by \n  Python Requests library, it's accessible as `original_response`.\n\n* **response.pagination**\n\n  Most API calls that return a list of data returned paginated results. If so, \n  information about the pagination is included in the `pagination` attribute. \n\n  Pagination Example:\n\n  ```python\n  response = client.persons.list()\n  \n  pagination = response.pagination\n  print(pagination.page_number, ' - current page number')\n  print(pagination.total_pages, ' - total pages')\n  print(pagination.per_page, ' - results per page')\n  print(pagination.total_results, ' - total results')\n  ```\n\nSee [Lists and Pagination](lists-and-pagination) below.\n\n### Lists and Pagination\n\nBlueink API calls that return a list of results are paginated - ie, if there\nare a lot of results, you need to make multiple requests to retrieve all of those \nresults, including a page_number parameter (and optionally a page_size parameter) \nin each request.\n\nThe details of Blueink pagination scheme can be found in the \n[API documentation](/r/api-docs/pagination/):\n\nThis client library provides convenience methods to make looping over\npaginated results easier. Whenever there is a `list()` method available for a resource,\nthere is a corresponding `paged_list()` method available that returns a\n`PaginatedIterator` helper class to make processing the results easier. \n\nYou can mostly ignore the details of how the `PaginatedIterator` works. Instead, here \nis an example of looping over a paginated set of Bundles:\n\n```python\n# Loop over all of the Bundles in your account, and print their IDs\niterator = client.bundles.paged_list()\nfor paged_response in iterator:\n    pg = paged_response.pagination\n    print(f\"Fetched page {pg.page_number} of {pg.total_pages} total pages\")\n\n    for bundle in paged_response.data:\n        print(bundle.id)\n```\n\n## Detailed Guide and Examples\n\n### Bundles\n\n#### Creating Bundles with the BundleHelper\n\nWhen creating a Bundle via the API, you need to pass a lot of data in the \n`bundle.create(...)` request. This library provides a `BundleHelper` class to ease the\nconstruction of that data. \n\nBelow is an example of using `BundleHelper` to create a Bundle with 1 document,\nand 2 signers. In this example, the uploaded document is specified via a URL.\n\n```python\nfrom blueink import BundleHelper, Client, constants\n\n# Create a BundleHelper instance, and initialize some basic settings on the Bundle\nbh = BundleHelper(label=\"Test Bundle 01\",\n                  email_subject=\"Please sign this test bundle\",\n                  email_message=\"Here is a test bundle. Please sign it.\",\n                  is_test=True)\n\n# Add a CC recipient, that will receive a copy of the completed docs\nbh.add_cc(\"bart.simpson@example.com\")\n\n# Add a document to the Bundle by providing a publicly accessible URL where\n# Blueink can download the document to include in the Bundle\ndoc_key = bh.add_document_by_url(\"https://www.irs.gov/pub/irs-pdf/fw9.pdf\")\n\nsigner1_key = bh.add_signer(\n    name=\"Homer Simpson\",\n    email=\"homer.simpson@example.com\",\n)\n\nsigner2_key = bh.add_signer(\n    name=\"Marge Simpson\",\n    email=\"marge.simpson@example.com\",\n)\n\n# Add a field that both signers can edit\nbh.add_field(\n    document_key=doc_key,\n    x=1, y=15, w=60, h=20, p=3,\n    kind=constants.FIELD_KIND.INPUT,\n    label=\"Please enter some text\",\n    editors=[signer1_key, signer2_key]\n)\n\n# Add a signature field for signer1\nbh.add_field(\n    document_key=doc_key,\n    x=1, y=15, w=68, h=30, p=4,\n    kind=constants.FIELD_KIND.ESIGNATURE,\n    label=\"Sign Here\",\n    editors=[signer1_key]\n)\n\nclient = Client()\nresponse = client.bundles.create_from_bundle_helper(bh)\nprint(f\"Status: {response.status}. Created bundle with ID {response.data.id}\")\n```\n\nUsing the `BundleHelper`, you can add files to a Bundle in multiple ways:\n\n```python\nbh = BundleHelper(...)\n\n# Add a document using a path to the file in the local filesystem\ndoc1_key = bh.add_document_by_path(\"/path/to/file/fw4.pdf\", \"application/pdf\")\n\n# Add a document that you have already read into a Python bytearray object\npdf_bytearray = read_a_file_into_a_bytearray()\ndoc2_key = bh.add_document_by_bytearray(pdf_bytearray, \"fw4.pdf\", \"application/pdf\")\n```\n\n\n#### Retrieval\n\nGetting a single bundle is fairly easy. They can be accessed with a single call. To get\nthe additional data (events, files, data), set the related_data flag to True.\n\n```python\nresponse = client.bundles.retrieve(bundle_id, related_data=True)\nbundle = response.data\nbundle_id = bundle.id\n\n# additional data fields (only exist if related_data==True)\nevents = bundle.events\nfiles = bundle.files\ndata = bundle.data\n\n```\n\n#### Listing\n\nListing has several options regarding pagination. You can also choose to append the\nadditional data on each retrieved\nbundle as you can with single fetches. ```client.bundles.paged_list()``` returns an\niterator object that lazy loads\nsubsequent pages. If no parameters are set, it will start at page 0 and have up to 50\nbundles per page.\n\n```python\n# EXAMPLE: Collecting all bundle IDs\nids = []\nfor api_call in client.bundles.paged_list(start_page=1, per_page=5, related_data=True):\n    print(f\"Paged Call: {api_call.data}\")\n    for bundle in api_call.data:\n        ids.append(bundle.id)\n```\n\n### Persons\n\nCreating a person is similar to a creating a Bundle. There is a PersonHelper to help\ncreate a person\n\n```python\nimport json\nfrom copy import deepcopy\nfrom requests.exceptions import HTTPError\nfrom pprint import pprint\n\nfrom blueink.client import Client\nfrom blueink.person_helper import PersonHelper\n\nclient = Client()\n\nph = PersonHelper()\n\n# Try and create a person without setting anything up\n#  this is expected to error\ntry:\n    result = client.persons.create_from_person_helper(ph)\nexcept HTTPError as e:\n    print(e)\n    pprint(e.response.text)\nexcept Exception as e:\n    print(\"Error:\")\n    print(e)\n\n# Make up some metadata to add to the person\nmetadata = {}\nmetadata[\"number\"] = 1\nmetadata[\"string\"] = \"stringy\"\nmetadata[\"dict\"] = {}\nmetadata[\"dict\"][\"number\"] = 2\nmetadata[\"list\"] = []\nmetadata[\"list\"].append(3)\n\n# Set the metadata of the person\nph.set_metadata(metadata)\n\n# Set the persons name\nph.set_name(\"New Name\")\n\n# Add email contacts for the person\nph.add_email(\"test@email.com\")\nph.add_email(\"test2@email.com\")\nph.add_email(\"test3@email.com\")\n\n# Get all of the emails for the person\nall_current_emails = ph.get_emails()\n\n# Remove an email from the list\nall_current_emails.remove(\"test@email.com\")\n\n# Overwrite the existing email list with this new list\n#   Effectively removing test@email.com list\nph.set_emails(all_current_emails)\n\n# Add phone number contact for the person\nph.add_phone(\"5055551212\")\nph.add_phone(\"5055551213\")\nph.add_phone(\"5055551214\")\n\n# Get all of the phone numbers for the person\nall_current_phones = ph.get_phones()\n\n# Remove a phone number from the list\nall_current_phones.pop()\n\n# Overwrite the existing email list with this new list\n#   Effectively removing last phone number\nph.set_phones(all_current_phones)\n\n# Create the person and check the result\ntry:\n    result = client.persons.create_from_person_helper(ph)\n    pprint(f\"Result Create: {result.status}: {result.data}\")\nexcept HTTPError as e:\n    print(e)\n    pprint(e.response.text)\nexcept Exception as e:\n    print(\"Error:\")\n    print(e)\n\n# Change the persons name and call update\nresult.data.name = \"Second Name\"\n\n\"\"\"\n The channels in the response include both email and phone\n  If we want to update with this data we need to remove the ones\n  that are blank\n\"\"\"\nnew_channels = []\nfor channel in result.data.channels:\n    new_channel = deepcopy(channel)\n    for key, value in channel.items():\n        # Remove the key/value pairs that are not valid\n        if not value:\n            new_channel.pop(key)\n    new_channels.append(new_channel)\n\n# Set the channels to the recreated channels without the invalid keys\nresult.data.channels = new_channels\n\ntry:\n    result = client.persons.update(result.data.id, result.data)\n    pprint(f\"Result Update: {result.status}: {result.data}\")\nexcept HTTPError as e:\n    print(e)\n    pprint(e.response.text)\nexcept Exception as e:\n    print(\"Error:\")\n    print(e)\n\n# Retrieve the person\ntry:\n    result = client.persons.retrieve(result.data.id)\n    pprint(f\"Result Retrieve: {result.status}: {result.data}\")\nexcept HTTPError as e:\n    print(e)\n    pprint(e.response.text)\nexcept Exception as e:\n    print(\"Error:\")\n    print(e)\n\n# Perform a partial update to change the name again\nthird_name = {\"name\": \"Third Name\"}\ntry:\n    result = client.persons.partial_update(result.data.id, third_name)\n    pprint(f\"Result Partial Update: {result.status}: {result.data}\")\nexcept HTTPError as e:\n    print(e)\n    pprint(e.response.text)\nexcept Exception as e:\n    print(\"Error:\")\n    print(e)\n\n# Delete the person from your account and check the result\ntry:\n    result = client.persons.delete(result.data.id)\n    pprint(f\"Result Delete: {result.status}: {result.data}\")\nexcept HTTPError as e:\n    print(e)\n    pprint(e.response.text)\nexcept Exception as e:\n    print(\"Error:\")\n    print(e)\n\n\"\"\"\nCreate a person and pass extra arguments\nif using a older version of sdk that doesn't\nsupport certain new API parameters you can add them\nthis way in the person helper\nIf calling another method that just takes a dict\nadd them to the dict directly\n\"\"\"\ntry:\n    ph = PersonHelper(name=\"New Person\")\n    result = client.persons.create_from_person_helper(ph, hidden_person=True)\n    pprint(f\"Result Create With Extra Args: {result.status}: {result.data}\")\n    result = client.persons.delete(result.data.id)\n    pprint(f\"Result Delete: {result.status}: {result.data}\")\nexcept HTTPError as e:\n    print(e)\n    pprint(e.response.text)\nexcept Exception as e:\n    print(\"Error:\")\n    print(e)\n\n\n```\n\n### Packets\n\nPackets can be updated. Reminders may be triggered, and COEs can be retrieve using the\nclient:\n\n```python\n# Retrieve\nclient.packets.retrieve(packet_id)\n\n# Update\nclient.packets.update(packet_id, packet_json)\n\n# Remind\nclient.packets.remind(packet_id)\n\n# Get COE\nclient.packets.retrieve_coe(packet_id)\n```\n\n### Templates\n\nTemplates can be listed (non-paged), listed (paged) or retrieved singly:\n\n```python\n# non paged\ntemplates_list_response = client.templates.list()\n# paged\nfor page in client.templates.paged_list():\n    page.data  # templates in page\n# single\ntemplate_response = client.templates.retrieve(template_id)\n\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blueinkhq/blueink-client-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "blueink-client-python",
    "package_url": "https://pypi.org/project/blueink-client-python/",
    "platform": null,
    "project_url": "https://pypi.org/project/blueink-client-python/",
    "project_urls": {
      "Bug Tracker": "https://github.com/blueinkhq/blueink-client-python/issues",
      "Homepage": "https://github.com/blueinkhq/blueink-client-python"
    },
    "release_url": "https://pypi.org/project/blueink-client-python/0.9.3/",
    "requires_dist": [
      "munch",
      "requests",
      "pydantic",
      "email-validator",
      "1.2 ; extra == 'email-validator_'",
      "munch (>=2.5) ; extra == 'munch'",
      "pydantic (>=1.9) ; extra == 'pydantic'",
      "requests (>=2.27) ; extra == 'requests'"
    ],
    "requires_python": ">=3.8",
    "summary": "Python Client for Blueink eSignature API",
    "version": "0.9.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15087234,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a78cfeca88af7c1d4c4c68c348ec667b3d5989aa2dd83937c2eb6b4a82e1a76",
          "md5": "2496cc985e3bb67ce5a19187770d46ac",
          "sha256": "eaeb3926ddca4c493f178b0bc0eed76a991c08fa4eaff0612b8e8019219e539b"
        },
        "downloads": -1,
        "filename": "blueink_client_python-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2496cc985e3bb67ce5a19187770d46ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17730,
        "upload_time": "2022-09-12T06:01:12",
        "upload_time_iso_8601": "2022-09-12T06:01:12.826202Z",
        "url": "https://files.pythonhosted.org/packages/3a/78/cfeca88af7c1d4c4c68c348ec667b3d5989aa2dd83937c2eb6b4a82e1a76/blueink_client_python-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "870f62365a0a3eb384a36f12f6ae670035874ce4f7e6ac906349f20f7743cd28",
          "md5": "fba9ff44d4976f8c8b55a80c995c11af",
          "sha256": "e89b301e765eb415cf9d11be008940da23cada5e0b908ce0c96e07cb0fac9dab"
        },
        "downloads": -1,
        "filename": "blueink-client-python-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fba9ff44d4976f8c8b55a80c995c11af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18514,
        "upload_time": "2022-09-12T06:01:15",
        "upload_time_iso_8601": "2022-09-12T06:01:15.220836Z",
        "url": "https://files.pythonhosted.org/packages/87/0f/62365a0a3eb384a36f12f6ae670035874ce4f7e6ac906349f20f7743cd28/blueink-client-python-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69da63706db9759828e1575a24a4db0d212fc1d6fde3693e04e699293bbdb3f4",
          "md5": "16ef7cf981a1ebd4914e1352bfb2fa05",
          "sha256": "340115eb14afb7007c9e1620617c7bc6dd0649fb7e0090561c770f2740aa9f44"
        },
        "downloads": -1,
        "filename": "blueink_client_python-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16ef7cf981a1ebd4914e1352bfb2fa05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17710,
        "upload_time": "2022-09-12T07:07:32",
        "upload_time_iso_8601": "2022-09-12T07:07:32.335075Z",
        "url": "https://files.pythonhosted.org/packages/69/da/63706db9759828e1575a24a4db0d212fc1d6fde3693e04e699293bbdb3f4/blueink_client_python-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d07aec79a67538bb52a7093af9ab6e01ee3025e5be1383fa851f1fe0f08c65a3",
          "md5": "ae912c071767e1c07cd23ff5d6181b2c",
          "sha256": "9a6b3aaf8d4b61a25a1b8fada2415a621bff9fa0b96fd9af93ae3f46685604bb"
        },
        "downloads": -1,
        "filename": "blueink-client-python-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae912c071767e1c07cd23ff5d6181b2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18406,
        "upload_time": "2022-09-12T07:07:35",
        "upload_time_iso_8601": "2022-09-12T07:07:35.438446Z",
        "url": "https://files.pythonhosted.org/packages/d0/7a/ec79a67538bb52a7093af9ab6e01ee3025e5be1383fa851f1fe0f08c65a3/blueink-client-python-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8ac94a3215b446009847aea4482c220e4e9b3f78ac55a55b3d999612a5bdd5b",
          "md5": "7a965b2bbcdd6684b87d78ae8df178b5",
          "sha256": "7074ea8ed8faa1bdcee59d0e330b2a43349a8e81b8516215c10c96dad3f2e818"
        },
        "downloads": -1,
        "filename": "blueink_client_python-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a965b2bbcdd6684b87d78ae8df178b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17742,
        "upload_time": "2022-09-12T17:24:22",
        "upload_time_iso_8601": "2022-09-12T17:24:22.442311Z",
        "url": "https://files.pythonhosted.org/packages/d8/ac/94a3215b446009847aea4482c220e4e9b3f78ac55a55b3d999612a5bdd5b/blueink_client_python-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7907cbffc6cc8b334c87dc339738290eeb39f8b83cf6d5ccba0439abdd612e2d",
          "md5": "802131b53873841924709cdfc7c7dc7a",
          "sha256": "b1e1f9968dd1f6904cfa9ffb604df907162f12532ffa977c16b32b0d39218e50"
        },
        "downloads": -1,
        "filename": "blueink-client-python-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "802131b53873841924709cdfc7c7dc7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18462,
        "upload_time": "2022-09-12T17:24:30",
        "upload_time_iso_8601": "2022-09-12T17:24:30.085900Z",
        "url": "https://files.pythonhosted.org/packages/79/07/cbffc6cc8b334c87dc339738290eeb39f8b83cf6d5ccba0439abdd612e2d/blueink-client-python-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fe500a9b601e6bb51c48058d4654d5ed063ae0b6ff7fc89802b6a33ca331bea",
          "md5": "07fe0f3555541e15e9ac5afc00c1ed0c",
          "sha256": "60940658feecddefa7183dbde4aad86ae3b3fb37b446793260d09c867a35cb73"
        },
        "downloads": -1,
        "filename": "blueink_client_python-0.9.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07fe0f3555541e15e9ac5afc00c1ed0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19777,
        "upload_time": "2022-09-14T05:36:04",
        "upload_time_iso_8601": "2022-09-14T05:36:04.855201Z",
        "url": "https://files.pythonhosted.org/packages/9f/e5/00a9b601e6bb51c48058d4654d5ed063ae0b6ff7fc89802b6a33ca331bea/blueink_client_python-0.9.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a2e437883dc7e5b70786678a49488a1fcc32c9919e351da68b79cddc99f6995",
          "md5": "5bfa9b47bb4cc26a80dbc1bb7a9235f7",
          "sha256": "16065847d9091500e045d67ef251c71224bf5a6bc3af32852cc961ba4dd3f795"
        },
        "downloads": -1,
        "filename": "blueink-client-python-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5bfa9b47bb4cc26a80dbc1bb7a9235f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 21877,
        "upload_time": "2022-09-14T05:36:11",
        "upload_time_iso_8601": "2022-09-14T05:36:11.273167Z",
        "url": "https://files.pythonhosted.org/packages/1a/2e/437883dc7e5b70786678a49488a1fcc32c9919e351da68b79cddc99f6995/blueink-client-python-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9fe500a9b601e6bb51c48058d4654d5ed063ae0b6ff7fc89802b6a33ca331bea",
        "md5": "07fe0f3555541e15e9ac5afc00c1ed0c",
        "sha256": "60940658feecddefa7183dbde4aad86ae3b3fb37b446793260d09c867a35cb73"
      },
      "downloads": -1,
      "filename": "blueink_client_python-0.9.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "07fe0f3555541e15e9ac5afc00c1ed0c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 19777,
      "upload_time": "2022-09-14T05:36:04",
      "upload_time_iso_8601": "2022-09-14T05:36:04.855201Z",
      "url": "https://files.pythonhosted.org/packages/9f/e5/00a9b601e6bb51c48058d4654d5ed063ae0b6ff7fc89802b6a33ca331bea/blueink_client_python-0.9.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a2e437883dc7e5b70786678a49488a1fcc32c9919e351da68b79cddc99f6995",
        "md5": "5bfa9b47bb4cc26a80dbc1bb7a9235f7",
        "sha256": "16065847d9091500e045d67ef251c71224bf5a6bc3af32852cc961ba4dd3f795"
      },
      "downloads": -1,
      "filename": "blueink-client-python-0.9.3.tar.gz",
      "has_sig": false,
      "md5_digest": "5bfa9b47bb4cc26a80dbc1bb7a9235f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 21877,
      "upload_time": "2022-09-14T05:36:11",
      "upload_time_iso_8601": "2022-09-14T05:36:11.273167Z",
      "url": "https://files.pythonhosted.org/packages/1a/2e/437883dc7e5b70786678a49488a1fcc32c9919e351da68b79cddc99f6995/blueink-client-python-0.9.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}