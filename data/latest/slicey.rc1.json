{
  "info": {
    "author": "TG-Techie (Jonah Y-M)",
    "author_email": "tgtechie01@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Slicey\n\n---\n\n#### Add Mutating Slices to Python\n\nMutating slices (or \"reference slices\") deal with a subset of a list as if it was its own list. This contrasts python's native \"value slicing\" where slicing a list provides a new list.\n\n### Let's Take a Look\n\n---\n\nStarting with python's normal slicing\n\n```python\nbase = [0, 1, 2, 3, 4]\nslc = base[0:]  # take a slice of the whole list\n# now let's check each element is the same in each list\nassert all(base[i] == slc[i] for i in range(len(base)))\n# if we change the slice (slc) the base won't change\nslc[2] = -1\n# now they should be different\nassert base[2] != slc[2]\n```\n\nHowever, with slicey you can opt into slices that change the base.\n\n```python\nfrom slicey import Slice\n\nbase = [0, 1, 2, 3, 4]\nslc = Slice(base)[0:] # slicey slicing syntax\nassert all(base[i] == slc[i] for i in range(len(base)))\nslc[2] = -1\nassert base[2] == slc[2]\n```\n\nExcluding that slicey slices mutate the base list, they can be used like a normal slice!\n\n```python\nfrom slicey import Slice\n\nbase = [7, 3, 2, 5, 4]\n\nslc = Slice(base)[1:-1]  # grab from 1 through 3 ([3, 2, 5])\nassert [*slc] == [3, 2, 5]\n\nslc[2] = 1\nassert base[3] == 1\n\nslc.sort()\nassert base == [7, 1, 2, 3, 4]\n\n```\n\n### Why\n\n---\n\nDon't get me wrong, I love python! But sometimes... you just want a pointer.\n\nThe initial inspiration for this project was implementing merge sort, in a clear manner. Often merge sort is written with a variety of indices (i, j, k, etc); I can't speak for other but I can't make heads or tails of it. In languages that expose raw pointers, like c, one can mutate subsections of arrays by referencing an item and passing a smaller length to some function.\nIn short, I wanted to write a merge sort I sould read.\n\n### Some Nitty Gritty\n\n---\n\n#### Slicing Slicey Slices ... ( ☉︵ ಠ )?\n\n**slicey is always opt-in.** This means when you slice a slicey slice (an instance of Slice) you'll get an object of whatever slicing the base object would be.\n\nIn the likely case that was non-sense, let's just take a look\n\n```python\nfrom slicey import Slice\n\nbase = [*range(10)]  # a native list\nslc = Slice(base)[1:10]  # a slicey slice\nnatv_sublc = slc[1:-1]  # a native list equal to base[2:9]\nassert type(natv_sublc) == type(base)\nassert natv_sublc == base[2:9]\n```\n\nSometimes it make sense to have a refence slice of a reference slice.\n\n```python\n# continuing from above\n\nslcy_subslc = slc.slice[1:-1]  # an instance of Slice\nassert type(slcy_subslc) is Slice\nassert [*slcy_subslc] == base[2:9]\n# for the generic programmers among us Slices can be subsliced like a list\ngnrl_slc = Slice(slc)[1:-1]\n```\n\n#### Transparent Slice Collapsing\n\nSome steps have been taken to avoid indirection when sub-slicing instances of `Slice`. Taking a sub-slice of a `Slice` is always equivalent to take a slice out of the base object\n\n#### readme todo\n\n- changing base list size not permitted, b/c notifications\n- excluding `.pop()` and other length mutating methods\n- typing and `Sliceable`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TG-Techie/slicey",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "slicey",
    "package_url": "https://pypi.org/project/slicey/",
    "platform": "",
    "project_url": "https://pypi.org/project/slicey/",
    "project_urls": {
      "Homepage": "https://github.com/TG-Techie/slicey"
    },
    "release_url": "https://pypi.org/project/slicey/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Add Mutating Slices to Python",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11438803,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae7db91a936ca76485e5c8cb1c2573b80cc4d87d67410967e0803271481f290b",
          "md5": "4af179550f532de875b47523fbf0f4e9",
          "sha256": "41fd0f185ee971fcf0d302aec80630083128263678edc97657dc81b6cd1ef2ae"
        },
        "downloads": -1,
        "filename": "slicey-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4af179550f532de875b47523fbf0f4e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6433,
        "upload_time": "2021-09-13T16:05:08",
        "upload_time_iso_8601": "2021-09-13T16:05:08.240939Z",
        "url": "https://files.pythonhosted.org/packages/ae/7d/b91a936ca76485e5c8cb1c2573b80cc4d87d67410967e0803271481f290b/slicey-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cec9e9dc454009404238b3d47fba72c13062ae41dbc12a35dc88fad75d4795f",
          "md5": "c9e1bce05c0962764242479f12c4b809",
          "sha256": "7adf036045c810f34e7cd0e4562041ac97bacc55996e1de75d8f87d1819082e0"
        },
        "downloads": -1,
        "filename": "slicey-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c9e1bce05c0962764242479f12c4b809",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5775,
        "upload_time": "2021-09-13T16:05:10",
        "upload_time_iso_8601": "2021-09-13T16:05:10.134790Z",
        "url": "https://files.pythonhosted.org/packages/3c/ec/9e9dc454009404238b3d47fba72c13062ae41dbc12a35dc88fad75d4795f/slicey-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae7db91a936ca76485e5c8cb1c2573b80cc4d87d67410967e0803271481f290b",
        "md5": "4af179550f532de875b47523fbf0f4e9",
        "sha256": "41fd0f185ee971fcf0d302aec80630083128263678edc97657dc81b6cd1ef2ae"
      },
      "downloads": -1,
      "filename": "slicey-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4af179550f532de875b47523fbf0f4e9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6433,
      "upload_time": "2021-09-13T16:05:08",
      "upload_time_iso_8601": "2021-09-13T16:05:08.240939Z",
      "url": "https://files.pythonhosted.org/packages/ae/7d/b91a936ca76485e5c8cb1c2573b80cc4d87d67410967e0803271481f290b/slicey-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3cec9e9dc454009404238b3d47fba72c13062ae41dbc12a35dc88fad75d4795f",
        "md5": "c9e1bce05c0962764242479f12c4b809",
        "sha256": "7adf036045c810f34e7cd0e4562041ac97bacc55996e1de75d8f87d1819082e0"
      },
      "downloads": -1,
      "filename": "slicey-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c9e1bce05c0962764242479f12c4b809",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5775,
      "upload_time": "2021-09-13T16:05:10",
      "upload_time_iso_8601": "2021-09-13T16:05:10.134790Z",
      "url": "https://files.pythonhosted.org/packages/3c/ec/9e9dc454009404238b3d47fba72c13062ae41dbc12a35dc88fad75d4795f/slicey-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}