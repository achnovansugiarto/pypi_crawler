{
  "info": {
    "author": "Edvard Rejthar",
    "author_email": "edvard.rejthar@nic.cz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "# pz\n[![Build Status](https://github.com/CZ-NIC/pz/actions/workflows/run-unittest.yml/badge.svg)](https://github.com/CZ-NIC/pz/actions) \n[![Downloads](https://pepy.tech/badge/pz)](https://pepy.tech/project/pz)\n\nEver wished to use Python in Bash? Would you choose the Python syntax over `sed`, `awk`, ...? Should you exactly know what command would you use in Python, but you end up querying `man` again and again, read further. The utility allows you to *pythonize* the shell: to pipe arbitrary contents through `pz`, loaded with your tiny Python script.\n\n**How? Simply meddle with the `s` variable.** Example: appending '.com' to every line.\n```bash\n$ echo -e \"example\\nwikipedia\" | pz 's += \".com\"'\nexample.com\nwikipedia.com\n```\n\n- [Installation](#installation)\n- [Examples](#examples)\n  * [Extract a substring](#extract-a-substring)\n  * [Prepend to every line in a stream](#prepend-to-every-line-in-a-stream)\n  * [Converting to uppercase](#converting-to-uppercase)\n  * [Reversing lines](#reversing-lines)\n  * [Parsing numbers](#parsing-numbers)\n  * [Find out all URLs in a text](#find-out-all-urls-in-a-text)\n  * [Sum numbers](#sum-numbers)\n  * [Keep unique lines](#keep-unique-lines)\n  * [Counting words](#counting-words)\n  * [Aggregating suffixes in a directory](#aggregating-suffixes-in-a-directory)\n  * [Fetching web content](#fetching-web-content)\n  * [Handling nested quotes](#handling-nested-quotes)\n  * [Computing factorial](#computing-factorial)\n  * [Read CSV](#read-csv)\n  * [Generate random number](#generate-random-number)\n  * [Average a stream value](#average-a-stream-value)\n  * [Multiline statements](#multiline-statements)\n  * [Simple progress bar](#simple-progress-bar)\n- [Docs](#docs)\n  * [Scope variables](#scope-variables)\n    + [`s` – current line](#s--current-line)\n    + [`n` – current line converted to an `int` (or `float`) if possible](#n--current-line-converted-to-an-int-or-float-if-possible)\n    + [`b` – current line as a byte-string](#b--current-line-as-a-byte-string)\n    + [`count` – current line number](#count--current-line-number)\n    + [`text` – whole text, all lines together](#text--whole-text-all-lines-together)\n    + [`lines` – list of lines so far processed](#lines--list-of-lines-so-far-processed)\n    + [`numbers` – list of numbers so far processed](#numbers--list-of-numbers-so-far-processed)\n    + [`skip` line](#skip-line)\n    + [`i`, `S`, `L`, `D`, `C` – other global variables](#i-s-l-d-c--other-global-variables)\n  * [Auto-import](#auto-import)\n  * [Output](#output)\n  * [CLI flags](#cli-flags)\n    + [Command clauses](#command-clauses)\n    + [Input / output](#input--output)\n    + [Regular expressions shortcuts](#regular-expressions-shortcuts)\n    + [Bash completion](#bash-completion)\n\n# Installation\nInstall with a single command from [PyPi](https://pypi.org/project/pz/).\n```bash \npip3 install pz    \n```\n\nOr download and launch the [`pz`](https://raw.githubusercontent.com/CZ-NIC/pz/main/pz) file from here.\n\n# Examples\n\nHow does your data look when pythonized via `pz`? Which Bash programs may the utility substitute?\n\n## Extract a substring\n\nJust use the `[:]` notation.\n\n```bash\necho \"hello world\" | pz s[6:]  # world\n```\n\n<sub>Note that suppressing quotes around the argument may not work (Zsh) or lead to an unexpected behaviour: `touch s1 && echo \"hello\" | pz s[1]` → `Exception: <class 'NameError'>`. Use `echo \"hello\" | pz 's[1]'` instead.</sub>\n\n## Prepend to every line in a stream\n\nWe prepend the length of the line.\n\n```bash\n# let's use the f-string `--format` flag\ntail -f /var/log/syslog | pz -f '{len(s)}: {s}' \n\n# or do it the long way, explicitly setting the `s` variable\ntail -f /var/log/syslog | pz 's = str(len(s)) + \": \" + s'\n```\n\n## Converting to uppercase\n\nReplacing `| tr '[:upper:]' '[:lower:]'`.\n\n```bash\necho \"HELLO\" | pz s.lower  # \"hello\"\n```\n\n## Reversing lines\n\nReplacing `| tac` or `| tail -r` (on some systems only) or `| sed '1!G;h;$!d'` (for cool guys only)\n\n``` bash\n$ echo -e \"1\\n2\\n3\" | pz -E 'lines[::-1]'\n3\n2\n1\n```\n\n## Parsing numbers\n\nReplacing `cut`. Note you can chain multiple `pz` calls. Split by a comma '`,`', then use `n` to access the line converted to a number. \n```bash\necho \"hello,5\" | pz 's.split(\",\")[1]' | pz n+7  # 12\n```\n\n## Find out all URLs in a text\n\nReplacing `sed`. We know that all functions from the `re` library are already included, ex: \"findall\".\n\n```bash\n# either use the `--findall` flag\npz --findall \"(https?://[^\\s]+)\" < file.log\n\n# or expand the full command to which is the `--findall` flag equivalent\npz \"findall(r'(https?://[^\\s]+)', s)\" < file.log\n```\n\nIf chained, you can open all the URLs in the current web browser. Note that the function `webbrowser.open` gets auto-imported from the standard library.\n```bash\npz --findall \"(https?://[^\\s]+)\" < file.log | pz webbrowser.open\n```\n\n## Sum numbers\nReplacing `| awk '{count+=$1} END{print count}'` or `| paste -sd+ | bc`. Just use `sum` in the `--end` clause.\n\n```bash\n# internally changed to --end `s = sum(numbers)`\necho -e \"1\\n2\\n3\\n4\" | pz --end sum  # 10\n```\n\n## Keep unique lines\n\nReplacing `| sort | uniq` makes little sense, but the demonstration gives you the idea. We initialize a set `c` (like a *collection*). When processing a line, `skip` is set to `True` if already seen.  \n\n```bash\n$ echo -e \"1\\n2\\n2\\n3\" | pz \"skip = s in c; c.add(s)\"  --setup \"c=set()\"\n1\n2\n3\n``` \n\nHowever, an advantage over `| sort | uniq` comes when handling a stream. You see unique lines instantly, without waiting a stream to finish. Useful when using with `tail --follow`.\n\nAlternatively, to assure the values are sorted, we can make a use of `--end` flag that produces the output after the processing finished.\n```bash\necho -e \"1\\n2\\n2\\n3\" | pz \"S.add(s)\" --end \"sorted(S)\" -0\n```\n\nNote that we used the variable `S` which is initialized by default to an empty set (hence we do not have to use `--setup` at all) and the flag `-0` to prevent the processing from output (we do not have to use `skip` parameter then).\n\n<sub>(Strictly speaking we could omit `-0` too. If you use the verbose `-v` flag, you would see the command changed to `s = S.add(s)` internally. And since `set.add` produces `None` output, it is the same as if it was skipped.)</sub>\n\nWe can omit `(s)` in the `main` clause and hence get rid of the quotes all together.\n```bash\necho -e \"1\\n2\\n2\\n3\" | pz S.add --end \"sorted(S)\"\n```\n\nNevertheless, the most straightforward approach would involve the `lines` variable, available when using the `--end` clause.\n\n```bash\necho -e \"1\\n2\\n2\\n3\" | pz --end \"sorted(set(lines))\"\n``` \n\n## Counting words\n\nWe split the line to get the words and put them in `S`, a global instance of the `set`. Then, we print the set length to get the number of unique words.\n\n```bash\necho -e \"red green\\nblue red green\" | pz 'S.update(s.split())' --end 'len(S)'  # 3\n```\n\nBut what if we want to get the most common words and the count of its usages? Let's use `C`, a global instance of the `collections.Counter`. We see then the `red` is the most_common word and has been used 2 times.\n```bash\n$ echo -e \"red green\\nblue red green\" | pz 'C.update(s.split())' --end C.most_common\nred\t2\ngreen\t2\nblue\t1\n```\n\n## Aggregating suffixes in a directory\n\nTo get a quick notion about the number of file extensions dwelling on a path, firstly convert file names to the suffixes. Then, feed them to the `collections.Counter` constructor.\n\n```bash\n$ ls\na.txt  b.txt  c.txt  v1.mp4  v2.mp4\n\n$ ls | pz 'Path(s).suffix' | pz --end 'Counter(lines).most_common' \n.txt\t3\n.mp4\t2\n```\n\n## Fetching web content\n\nAccessing internet is easy thanks to the [`requests`](https://requests.readthedocs.io/en/master/) library. Here, we fetch `example.com`, grep it for all lines containing \"href\" and print them out while stripping spaces.\n\n```bash\n$ echo \"http://example.com\" | pz 'requests.get(s).content' | grep href | pz s.strip \n<p><a href=\"https://www.iana.org/domains/example\">More information...</a></p>\n```\n\nTo see how auto-import are resolved, use the verbose mode. (Notice the line `Importing requests`.)\n```bash\n$ echo \"http://example.com\" | pz 'requests.get(s).content' -v | grep href | pz s.strip \nChanging the command clause to: s = requests.get(s).content\nImporting requests\n<p><a href=\"https://www.iana.org/domains/example\">More information...</a></p>\n```\n\n\n## Handling nested quotes\nTo match every line that has a quoted expressions and print out the quoted contents, you may serve yourself of Python triple quotes. In the example below, an apostrophe is used to delimit the `COMMAND` flag. If we used an apostrophe in the text, we would have to slash it. Instead, triple quotes might improve readability.\n```bash\necho -e 'hello \"world\".' | pz 'match(r\"\"\"[^\"]*\"(.*)\".\"\"\", s)' # world\n```\n\nIn that case, even better is to use the `--match` flag to get rid of the quoting as much as possible.\n```bash\necho -e 'hello \"world\".' | pz --match '[^\"]*\"(.*)\"'  # world\n``` \n\n## Computing factorial\n\nTake a look at multiple ways. The simplest is to use the function.\n\n```bash\necho 5 | pz factorial  # 120\n```\n\nWhat happens in the background? `factorial` is available from `math.factorial`. Since it is a callable, we try to put current line as the parameter: `factorial(s)`. Since `s = \"5\"` which means a string, it fails. It then tries to use `factorial(n)` where `n` is current line automatically fetched to a number. That works.\n\nHarder way? Let's use `math.prod` then.\n\n```bash\necho 5 | pz 'prod(i for i in range(1,n+1))'  # 120\n```\n\nWithout any built-in library? Let's just use a for-cycle. Process all numbers from 1 to `n` (which is 5) and multiply to product. Finally, assign `n` to `s` which is output.\n\n```bash\necho 5 | pz 'for c in range(1,n): n*= c ; s = n'   # 120\n```\n\nUsing generator will print a factorial for every number from 1 to `-g`.\n\n```bash\n$ pz factorial -g5\n1\n2\n6\n24\n120\n```\n\n## Read CSV\n\nAs `csv` is one of the auto-imported libraries, we may directly access instantiate the reader object. In the following example, we output the second element of every line either progressively or at once when processing finished. \n\n```bash\n# output line by line\necho '\"a\",\"b1,b2,b3\",\"c\"' | pz \"(x[1] for x in csv.reader([s]))\"  # \"b1,b2,b3\"\n\n# output at the end\necho '\"a\",\"b1,b2,b3\",\"c\"' | pz --end \"(x[1] for x in csv.reader(lines))\"  # \"b1,b2,b3\"   \n````\n\n## Generate random number\n\nFirst, take a look how to stream random numbers to 100 in Bash.\n\n```bash\nwhile :; do echo $((1+$RANDOM%100)); done\n```\n\nNow examine pure Python solution, without having `pz` involved.\n\n```bash\npython3 -c \"while True: from random import randint; print(randint(1,100))\"\n```\n\nUsing `pz`, we relieve the cycle handling and importing burden from the command.\n\n```bash\npz \"randint(1,100)\" --generate=0\n```\n\nLet's generate few random strings of variable length 1 to 30. When generator flag is used without a number, it cycles five times.\n```bash\npz \"''.join(random.choice(string.ascii_letters) for _ in range(randint(1,30)))\" -S \"import string\" -g\n``` \n\n## Average a stream value\n\nLet's have a stream and output the average value.\n\n```bash\n# print out current line `count` and current average `sum/count`\n$ while :; do echo $((1 + $RANDOM % 100)) ; sleep 0.1; done | pz 'sum+=n;s=count, sum/count' --setup \"sum=0\"\n1\t38.0\n2\t67.0\n3\t62.0\n4\t49.75\n\n# print out every 10 000 lines\n# (thanks to `not i % 10000` expression) \n$ while :; do echo $((1 + $RANDOM % 100)) ;  done | pz 'sum+=n;s=sum/count; s = (count,s) if not count % 10000 else \"\"' --setup \"sum=0\"\n10000\t50.9058\n20000\t50.7344\n30000\t50.693466666666666\n40000\t50.5904\n```\n\nHow can this be simplified? Let's use an infinite generator `-g0`. As we know, `n` is given current line number by the generator and `i` is by default implicitly declared to `i=0` so we use it to hold the sum. No setup clause needed. No Bash cycle needed. \n```bash\n$ pz \"i+=randint(1,100); s = (n,i/n) if not n % 10000 else ''\" -g0\n10000\t49.9488\n20000\t50.5399\n30000\t50.39906666666667\n40000\t50.494425\n```\n\n## Multiline statements\n\nShould you need to evaluate a short multiline statement, use standard multiline statements, supported by Bash.\n\n```bash\n$ echo -e \"1\\n2\\n3\" | pz \"if n > 2:\n  s = 'bigger'\nelse:\n  s = 'smaller'\n\"\nsmaller\nbigger\nbigger\n```\n\n## Simple progress bar\n\nSimulate a lengthy processing by generating a long sequence of numbers (as they are not needed, we throw them away by `1>/dev/null`).\nOn every 100th line, we move cursor up (`\\033[1A`), clear line (`\\033[K`) and print to `STDERR` current status.  \n\n```bash\n$ seq 1 100000 | pz 's = f\"\\033[1A\\033[K ... {count} ...\" if count % 100 == 0 else None ' --stderr 1>/dev/null\n ... 100 ...  # replaced by ... 200 ...\n```\n\n# Docs\n\n## Scope variables\n\nIn the script scope, you have access to the following variables:\n\n### `s` – current line\nChange it according to your needs\n```bash\necho 5 | pz 's += \"4\"'  # 54 \n```\n\n### `n` – current line converted to an `int` (or `float`) if possible\n```bash\necho 5 | pz n+2  # 7\necho 5.2 | pz n+2  # 7.2\n```\n\n### `b` – current line as a byte-string\nSometimes the input cannot be converted to str easily. A warning is output, however, you can still operate with raw bytes.\n```bash\necho -e '\\x80 invalid line' | pz s\nCannot parse line correctly: b'\\x80 invalid line'\n� invalid line\n\n# use the `--quiet` flag to suppress the warning, then decode the bytes\necho -e '\\x80 invalid line' | pz 'b.decode(\"cp1250\")' --quiet\n€ invalid line\n```\n\n### `count` – current line number\n```bash\n# display every 1_000nth line\n$ pz -g0 n*3 | pz \"n if not count % 1000 else None\"\n3000\n6000\n9000\n\n# the same, using the `--filter` flag\n$ pz -g0 n*3 | pz -F \"not count % 1000\"\n```\n\n### `text` – whole text, all lines together\nNot available with the `--overflow-safe` flag set nor in the `main` clause unless the `--whole` flag set.\nEx: get character count (an alternative to `| wc -c`).\n```\necho -e \"hello\\nworld\" | pz --end 'len(text)' # 11\n```\n\nWhen used in the `main` clause, an error appears. \n```bash\n$ echo -e \"1\\n2\\n3\" | pz 'len(text)'\nDid not you forget to use --text?\nException: <class 'NameError'> name 'text' is not defined on line: 1\n```\n\nAppending `--whole` helps, but the result is processed for every line.\n```bash\n$ echo -e \"1\\n2\\n3\" | pz 'len(text)' -w \n5\n5\n5\n```\n\nAppending `-1` makes sure the statement gets computed only once. \n```bash\n$ echo -e \"1\\n2\\n3\" | pz 'len(text)' -w1\n5\n```\n\n### `lines` – list of lines so far processed\nNot available with the `--overflow-safe` flag set.  \nEx: returning the last line\n```bash\necho -e \"hello\\nworld\" | pz --end lines[-1]  # \"world\"\n```\n\n### `numbers` – list of numbers so far processed\nNot available with the `--overflow-safe` flag set.  \nEx: show current average of the stream. More specifically, we output tuples: `line count, current line, average`.\n```bash\n$ echo -e \"20\\n40\\n25\\n28\" | pz 's = count, s, sum(numbers)/count'\n1\t20\t20.0\n2\t40\t30.0\n3\t25\t28.333333333333332\n4\t28\t28.25\n```\n\n### `skip` line\nIf set to `True`, current line will not be output. If set to `False` when using the `-0` flag, the line will be output regardless.\n\n### `i`, `S`, `L`, `D`, `C` – other global variables\nSome variables are initialized and ready to be used globally. They are common for all the lines.\n* `i = 0`\n* `S = set()`\n* `L = list()`\n* `D = dict()`\n* `C = Counter()`\n\n<sub>It is true that using uppercase is not conforming the naming convention. However, in these tiny scripts the readability is the chief principle, every character counts.</sub>\n\nUsing a set `S`. In the example, we add every line to the set and end print it out in a sorted manner.\n```bash\n$ echo -e \"2\\n1\\n2\\n3\\n1\" | pz \"S.add(s)\" --end \"sorted(S)\"\n1\n2\n3  \n``` \n\nUsing a list `L`. Append lines that contains a number bigger than one and finally, print their count. As only the final count matters, suppress the line output with the flag `-0`. \n```bash\n$ echo -e \"2\\n1\\n2\\n3\\n1\" | pz \"if n > 1: L.append(s)\" --end \"len(L)\" -0\n3  \n```\n\n## Auto-import\n\n* You can always import libraries you need manually. (Put `import` statement into the command.)\n* Some libraries are ready to be used: `re.* (match, search, findall), math.* (sqrt,...), defaultdict`\n* Some others are auto-imported whenever its use has been detected. In such case, the line is reprocessed.\n    * Functions: `b64decode, b64encode, datetime, (requests).get, glob, iglob, Path, randint, sleep, time, ZipFile`\n    * Modules: `base64, collections, csv, humanize, itertools, jsonpickle, pathlib, random, requests, time, webbrowser, zipfile`\n\nCaveat: When accessed first time, the auto-import makes the row reprocessed. It may influence your global variables. Use verbose output to see if something has been auto-imported. \n```bash\n$ echo -e \"hey\\nbuddy\" | pz 'a+=1; sleep(1); b+=1; s = a,b ' --setup \"a=0;b=0;\" -v\nImporting sleep from time\n2\t1\n3\t2\n```\nAs seen, `a` was incremented 3× times and `b` on twice because we had to process the first line twice in order to auto-import sleep. In the first run, the processing raised an exception because `sleep` was not known. To prevent that, explicitly appending `from time import sleep` to the `--setup` flag would do. \n\n\n\n## Output\n* Explicit assignment: By default, we output the `s`.\n    ```bash\n    echo \"5\" | pz 's = len(s)' # 1\n    ```\n* Single expression: If not set explicitly, we assign the expression to `s` automatically.\n    ```bash\n    echo \"5\" | pz 'len(s)'  # 1 (command internally changed to `s = len(s)`)\n    ```\n* Tuple, generator: If `s` ends up as a tuple, it gets joined by tabs.\n    ```bash\n    $ echo \"5\" | pz 's, len(s)'\n    5\t1 \n    ```\n  \n    Consider piping two lines 'hey' and 'buddy'. We return three elements, original text, reversed text and its length.\n    ```bash\n    $ echo -e \"hey\\nbuddy\" | pz 's,s[::-1],len(s)' \n    hey\tyeh\t3\n    buddy\tyddub\t5\n    ```\n* List: When `s` ends up as a list, its elements are printed to independent lines.\n    ```bash\n    $ echo \"5\" | pz '[s, len(s)]'\n    5\n    1 \n    ```\n* Regular match: All groups are treated as a tuple. If no group used, we print the entire matched string.\n    ```bash\n    # no group → print entire matched string\n    echo \"hello world\" | pz 'search(r\"\\s.*\", s)' # \" world\"\n  \n    # single matched group\n    echo \"hello world\" | pz 'search(r\"\\s(.*)\", s)' # \"world\"\n  \n    # matched groups treated as tuple\n    echo \"hello world\" | pz 'search(r\"(.*)\\s(.*)\", s)'  # \"hello\tworld\"\n    ```\n* Callable: It gets called. Very useful when handling simple function – without the need of explicitly putting parenthesis to call the function, we can omit quoting in Bash (expression `s.lower()` would have had to be quoted.) Use the verbose flag `-v` to inspect the internal change of the command.\n    ```bash\n    # internally changed to `s = s.lower()`\n    echo \"HEllO\" | pz s.lower  # \"hello\"\n      \n    # internally changed to `s = len(s)`\n    echo \"HEllO\" | pz len  # \"5\"\n  \n    # internally changed to `s = base64.b64encode(s.encode('utf-8'))`\n    echo \"HEllO\" | pz b64encode  # \"SEVsbE8=\"\n  \n    # internally changed to `s = math.sqrt(n)`\n    # and then to `s = round(n)`\n    echo \"25\" | pz sqrt | pz round  # \"5\"\n  \n    # internally changed to `s = sum(numbers)`    \n    echo -e \"1\\n2\\n3\\n4\" | pz sum\n    1\n    3\n    6\n    10\n  \n    # internally changed to `' - '.join(lines)`      \n    echo -e \"1\\n2\\n3\\n4\" | pz  --end \"' - '.join\"\n    1 - 2 - 3 - 4\n    ```\n  \n  As you see in the examples, if `TypeError` raised, we try to reprocess the row while adding current line as the argument: \n    * either its basic form `s`\n    * the `numbers` if available\n    * using its numeral representation `n` if available\n    * encoded to bytes `s.encode('utf-8')`\n    \n  In the `--end` clause, we try furthermore the `lines`.  \n\n## CLI flags\n\n* `-v`, `--verbose`: See what happens under the hood. Show automatic imports and internal command modification (attempts to make it callable and prepending `s =` if omitted).  \n    ```bash\n    $ echo -e \"hello\" | pz 'invalid command'\n    Exception: <class 'SyntaxError'> invalid syntax (<string>, line 1) on line: hello\n    $ echo -e \"hello\" | pz 'sleep(1)' --verbose\n    Importing sleep from time\n    ```\n* `-q`, `--quiet`: See errors and values only. Suppress command exceptions.\n  ```bash\n  echo -e \"hello\" | pz 'invalid command' --quiet # empty result\n  ```\n  \n### Command clauses\n* `COMMAND`: The `main` clause, any Python script executed on every line (multiple statements allowed)\n* `-E COMMAND`, `--end COMMAND`: Any Python script, executed after processing. Useful for the final output.\n    The variable `text` is available by default here.\n    ```bash\n    $ echo -e \"1\\n2\\n3\\n4\" | pz --end sum\n    10\n    $ echo -e \"1\\n2\\n3\\n4\" | pz s --end sum\n    1  # output of the `main` clause\n    2\n    3\n    4\n    10  # output of the `end` clause\n    $ echo -e \"1\\n2\\n3\\n4\" | pz sum --end sum\n    1  # output of the `main` clause\n    3\n    6\n    10\n    10  # output of the `end` clause\n    ```\n* `-S COMMAND`, `--setup COMMAND`: Any Python script, executed before processing. Useful for variable initializing.\n    Ex: prepend line numbers by incrementing a variable `count`.\n    ```bash\n    $ echo -e \"row\\nanother row\" | pz 'count+=1;s = f\"{count}: {s}\"'  --setup 'count=0'\n    1: row\n    2: another row\n  \n    # the same using globally available variable `count` instead of using `--setup` and the `--format` flag\n    $ echo -e \"row\\nanother row\" | pz -f '{count}: {s}'\n    ```\n* `-I`, `--insecure`: If set, any Python script in the environment variable `PZ_SETUP` will be executed just before the `--setup` clause. Useful for imports. Since the user might launch an unintended code if an attacker tampers with the variable, we condition its evaluation by this flag for the moment.\n    ```bash\n    $ echo -e \"1\\n2\\n3\" | PZ_SETUP='from hashlib import sha3_256' pz -I 'sha3_256(b).hexdigest'  # equivalent to:\n    $ echo -e \"1\\n2\\n3\" | pz --setup 'from hashlib import sha3_256' 'sha3_256(b).hexdigest'\n    67b176705b46206614219f47a05aee7ae6a3edbe850bbbe214c536b989aea4d2\n    b1b1bd1ed240b1496c81ccf19ceccf2af6fd24fac10ae42023628abbe2687310\n    1bf0b26eb2090599dd68cbb42c86a674cb07ab7adc103ad3ccdf521bb79056b9\n    ```\n* `-F`, `--filter`: Line is piped out unchanged, however only if evaluated to `True`.\n    When piping in numbers to 5, we pass only such bigger than 3.\n    ```bash\n    $ echo -e \"1\\n2\\n3\\n4\\n5\" | pz \"n > 3\"  --filter\n    4\n    5\n    ```\n    The statement is equivalent to using `skip` (and not using `--filter`).\n    ```bash\n    $ echo -e \"1\\n2\\n3\\n4\\n5\" | pz \"skip = not n > 3\"\n    4\n    5\n    ```\n    When not using filter, `s` evaluates to `True` / `False`. By default, `False` or empty values are not output. \n    ```bash\n    $ echo -e \"1\\n2\\n3\\n4\\n5\" | pz \"n > 3\"   \n    True\n    True\n    ```\n* `-f`, `--format`: Main and end clauses are considered f-strings. The clause is inserted in between three-apostrophes `f'''COMMAND'''` internally.\n\n\n### Input / output  \n* `-n NUM` Process only such number of lines. Roughly equivalent to `head -n`.\n* `-1` Process just the first line.\n* `-0` Skip all lines output. (Useful in combination with `--end`.)\n* `--empty` Output even empty lines. (By default skipped.)  \n    Consider shortening the text by 3 last letters. First line `hey` disappears completely then.\n    ```bash\n    $ echo -e \"hey\\nbuddy\" | pz 's[:-3]'\n    bu\n    ```\n    Should we insist on displaying, we see an empty line now.\n    ```bash\n    $ echo -e \"hey\\nbuddy\" | pz 's[:-3]' --empty\n    \n    bu\n    ```\n* `-g [NUM]`, `--generate [NUM]` Generate lines while ignoring the input pipe. Line will correspond to the iteration cycle count (unless having the `--overflow-safe` flag on while having an infinite generator – in that case, lines will equal to '1'). If `NUM` not specified, 5 lines will be produced by default. Putting `NUM == 0` means an infinite generator. If no `main` clause set, the number is piped out. \n  ```bash\n  $ pz -g2\n  1\n  2\n  $ pz 'i=i+5' -g -v\n  Changing the main clause to: s = i=i+5\n  Generating s = 1 .. 5\n  5\n  10\n  15\n  20\n  25\n  ```\n* `--stderr` Print clauses' output to the `STDERR`, while letting the original line piped to the `STDOUT` intact. Useful for generating reports during a long operation. Take a look at the following example, every third line will make `STDERR` to receive a message. \n  ```bash\n  $ pz -g=9 s | pz \"s = 'Processed next few lines' if count % 3 == 0 else None\" --stderr \n  1\n  2\n  3\n  Processed next few lines\n  4\n  5\n  6\n  Processed next few lines\n  7\n  8\n  9\n  Processed next few lines\n  ```\n  \n  Demonstrate different pipes by writing `STDOUT` to a file and leaving `STDERR` in the terminal. \n\n  ```bash\n  $ pz -g=9 s | pz \"s = 'Processed next few lines' if count % 3 == 0 else None\" --stderr > /tmp/example\n  Processed next few lines\n  Processed next few lines\n  Processed next few lines\n  \n  cat /tmp/example\n  1\n  2\n  3\n  ...  \n  ```\n* `--overflow-safe` Prevent `lines`, `numbers`, `text` variables to be available. Useful when handling an infinite input.\n  ```\n  # prevent `text` to be populated by default\n  echo -e  \"1\\n2\\n2\\n3\" | pz --end \"len(text)\" --overflow-safe\n  Did you not forget to use --whole to access `text`?\n  Exception: <class 'NameError'> name 'text' is not defined in the --end clause\n  \n  # force to populate `text` \n  echo -e  \"1\\n2\\n2\\n3\" | pz --end \"len(text)\" --overflow-safe --whole\n  7\n  ```\n\n### Regular expressions shortcuts\n* `--search` Equivalent to `search(COMMAND, s)`\n    ```bash\n    $ echo -e \"hello world\\nanother words\" | pz --search \".*\\s\"\n    hello\n    another\n    ```\n* `--match` Equivalent to `match(COMMAND, s)`\n* `--findall` Equivalent to `findall(COMMAND, s)`\n* `--sub SUBSTITUTION` Equivalent to `sub(COMMAND, SUBSTITUTION, s)`\n    ```bash\n    $ echo -e \"hello world\\nanother words\" | pz \".*\\s\" --sub \":\"\n    :world\n    :words\n    ```\n    \n    Using groups\n    ```bash\n    $ echo -e \"hello world\\nanother words\" | pz \"(.*)\\s\" --sub \"\\1\"\n    helloworld\n    anotherwords\n    ```\n\n### Bash completion\n1. Run: `apt-get install bash-completion jq`\n2. Copy: [extra/pz-autocompletion.bash](./extra/pz-autocompletion.bash) to `/etc/bash_completion.d/`\n3. Restart terminal\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CZ-NIC/pz",
    "keywords": "",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pz",
    "package_url": "https://pypi.org/project/pz/",
    "platform": null,
    "project_url": "https://pypi.org/project/pz/",
    "project_urls": {
      "Homepage": "https://github.com/CZ-NIC/pz"
    },
    "release_url": "https://pypi.org/project/pz/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Ever wished to use the Python syntax to work in Bash? Then pythonize it, piping the contents through your tiny Python script with the `pz` utility!",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13414030,
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fedcdce5fa5c272ece0f65bab469baea3ba416d66f26343fa65d76b94481e6df",
          "md5": "be63d541a0198a1534384a80eb701c43",
          "sha256": "bd4db36bcd15581b1eb02ed9739396581b601e9d565161a81a3ecd9dff5c5f32"
        },
        "downloads": -1,
        "filename": "pz-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "be63d541a0198a1534384a80eb701c43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19080,
        "upload_time": "2020-12-02T18:47:20",
        "upload_time_iso_8601": "2020-12-02T18:47:20.805303Z",
        "url": "https://files.pythonhosted.org/packages/fe/dc/dce5fa5c272ece0f65bab469baea3ba416d66f26343fa65d76b94481e6df/pz-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4a2163b21ad55d4c323cdb5a530c622edd13af017bf472cb653306778b07728",
          "md5": "b4241c5619e1a1827ee9aa599c622c7f",
          "sha256": "42ebca85486391873d179c6a7a2a6357e504a8891335f5bbe0621ea9593fce1d"
        },
        "downloads": -1,
        "filename": "pz-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4241c5619e1a1827ee9aa599c622c7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29678,
        "upload_time": "2021-03-19T16:59:57",
        "upload_time_iso_8601": "2021-03-19T16:59:57.468362Z",
        "url": "https://files.pythonhosted.org/packages/e4/a2/163b21ad55d4c323cdb5a530c622edd13af017bf472cb653306778b07728/pz-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "877a8ebacba109c740187982702783b4d912c387020fe04c6abe35749b2c39b2",
          "md5": "ee0dcc2fa70d44895298db876fd91e4d",
          "sha256": "5142614f9d0ca1afd68efc57bf65218aaa52d093999de647f7268034ce8e2e95"
        },
        "downloads": -1,
        "filename": "pz-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ee0dcc2fa70d44895298db876fd91e4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27360,
        "upload_time": "2021-03-19T16:59:58",
        "upload_time_iso_8601": "2021-03-19T16:59:58.840477Z",
        "url": "https://files.pythonhosted.org/packages/87/7a/8ebacba109c740187982702783b4d912c387020fe04c6abe35749b2c39b2/pz-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8eaac549574f9b0d4190dc3591b7ab616c7a01ceced2458f0093042614acb6a0",
          "md5": "aee3541ec8a24f107205b1dfffe46501",
          "sha256": "af80cad22e1eec459dc7a6c2630e0d10511dc14a929e17b85502f3404807d4dd"
        },
        "downloads": -1,
        "filename": "pz-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aee3541ec8a24f107205b1dfffe46501",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30621,
        "upload_time": "2022-04-05T12:55:05",
        "upload_time_iso_8601": "2022-04-05T12:55:05.997168Z",
        "url": "https://files.pythonhosted.org/packages/8e/aa/c549574f9b0d4190dc3591b7ab616c7a01ceced2458f0093042614acb6a0/pz-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79c32acdf8deb6e7e53a5cb8de22781570c65af5605a18f88dfe35245507c1e5",
          "md5": "972a518c1fedb9762b3d96118e0b49d3",
          "sha256": "c1ba92955a9ef5c95d7c1377b0a27f4cfe8d18f9f1044c6f912011e6d0377ac6"
        },
        "downloads": -1,
        "filename": "pz-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "972a518c1fedb9762b3d96118e0b49d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 39166,
        "upload_time": "2022-04-05T12:55:07",
        "upload_time_iso_8601": "2022-04-05T12:55:07.735266Z",
        "url": "https://files.pythonhosted.org/packages/79/c3/2acdf8deb6e7e53a5cb8de22781570c65af5605a18f88dfe35245507c1e5/pz-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8eaac549574f9b0d4190dc3591b7ab616c7a01ceced2458f0093042614acb6a0",
        "md5": "aee3541ec8a24f107205b1dfffe46501",
        "sha256": "af80cad22e1eec459dc7a6c2630e0d10511dc14a929e17b85502f3404807d4dd"
      },
      "downloads": -1,
      "filename": "pz-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aee3541ec8a24f107205b1dfffe46501",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 30621,
      "upload_time": "2022-04-05T12:55:05",
      "upload_time_iso_8601": "2022-04-05T12:55:05.997168Z",
      "url": "https://files.pythonhosted.org/packages/8e/aa/c549574f9b0d4190dc3591b7ab616c7a01ceced2458f0093042614acb6a0/pz-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79c32acdf8deb6e7e53a5cb8de22781570c65af5605a18f88dfe35245507c1e5",
        "md5": "972a518c1fedb9762b3d96118e0b49d3",
        "sha256": "c1ba92955a9ef5c95d7c1377b0a27f4cfe8d18f9f1044c6f912011e6d0377ac6"
      },
      "downloads": -1,
      "filename": "pz-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "972a518c1fedb9762b3d96118e0b49d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 39166,
      "upload_time": "2022-04-05T12:55:07",
      "upload_time_iso_8601": "2022-04-05T12:55:07.735266Z",
      "url": "https://files.pythonhosted.org/packages/79/c3/2acdf8deb6e7e53a5cb8de22781570c65af5605a18f88dfe35245507c1e5/pz-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}