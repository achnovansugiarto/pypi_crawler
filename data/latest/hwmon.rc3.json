{
  "info": {
    "author": "Guillermo-C-A & Bla6",
    "author_email": "guillcal@ucm.es",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: System",
      "Topic :: System :: Hardware",
      "Topic :: System :: Monitoring"
    ],
    "description": "# Hwmon's Documentation\n\n![](https://github.com/Guillermo-C-A/Hwmon-python/blob/master/HWmon2.png)\n\n**Authors:** bla6 and Guillermo-C-A\n\n**Repository:**\n\n[PyPI url](https://pypi.org/project/hwmon/#description)\n\n# Install Hwmon\n\n```\npip install hwmon\n```\n\n# New data available \n\nNow you can get information about the GPU and the BIOS of your computer. For more information, read how to use the new features in this README \n\n![](https://github.com/Guillermo-C-A/Hwmon-python/blob/master/rd_data/GPU.png)\n\n## Motivations to create Hwmon \n\nHwmon has been created with the intention of replacing Linux libraries and APIs with which to obtain system information without the need to depend on dependencies outside a standard Linux system, i. e. that nothing needs to be installed. \n\nThe only requirements for running Hwmon on a system are: \n\n- The OS is Linux \n- Have python 3 \n\nHwmon is also a library developed expressly by and for Python 3 with functions that are easy to understand and operate, which read and synthesize in the same library all the useful information for monitoring a Linux system that can be found in the /ys, /proc and /dev folders. So only the information that the system itself has recorded will be obtained. \n\n## Why use Hwmon instead of other library? \n\nAs already mentioned, Hwmon does not require any dependencies or programs and is a library created with the standard Python 3 libraries. Which is not the case with other library as they are: \n\n- Pysensors\n- lm-sensors\n- psutil\n\nWhere you need files and programs to be able to work, so if you're missing some of that, it just doesn't work. They are also heavier solutions in terms of file sizes than Hwmon. \n\n## Is it really a viable alternative to lm-sensors? \n\nYes. Hwmon is able to return and print the same information that is obtained when installing and running sensors. \n\n![](https://github.com/Guillermo-C-A/Hwmon-python/blob/master/rd_data/hwmon-vs-sensors.png)\n\nAnd it even prints the information on the screen in a nice and friendly way so that it is more useful and easy to understand. \n\n## What information can I get from Hwmon and where does he get it from? \n\nHwmon is able to extract: \n\n- Information from the sensors available on the computer \n- Processor information \n- System memory information \n- Sent and received packet information \n- USB devices connected to the computer \n- Disks connected to the computer \n\nAll this information is extracted respectively from the following sites: \n\n- /sys/class/hwmon\n- /proc/cpuinfo y /proc/stat\n- /proc/meminfo\n- /proc/net/dev\n- /dev/input/by-id\n- /dev/disk/by-id\n\n## How to use and call the library? \n\n\n```python\nfrom hwmon import Hwmon\n```\n\n# Sensor information \nTo access the sensor subclass, the following statement will be executed: \n\n\n```python\nsensors = Hwmon.HW()\n```\n\nBeing the functions that interest us in this case: data() and print_data() . Let's see an example of each function: \n### Print sensors \nThis function will print all the sensor information of the system in a tabular and nice way. \n\n\n```python\nsensors.print_data()\n```\n\n     amdgpu\n    \t vddgfx 0.862 v\n    \t power1 35.04 w\n    \t fan1 1119 RPM\n    \t edge 33.0 C\n     nct6779\n    \t AUXTIN3 -28.0 C\n    \t in3 3.344 v\n    \t fan3 0 RPM\n    \t in7 3.472 v\n    \t AUXTIN0 -2.5 C\n    \t in12 1.68 v\n    \t in0 0.568 v\n    \t PCH_CPU_TEMP 0.0 C\n    \t SMBUSMASTER 0 32.5 C\n    \t in4 1.84 v\n    \t fan4 0 RPM\n    \t in8 3.264 v\n    \t AUXTIN1 85.0 C\n    \t in13 0.944 v\n    \t in1 0.0 v\n    \t fan1 0 RPM\n    \t PCH_CHIP_CPU_MAX_TEMP 0.0 C\n    \t in5 0.84 v\n    \t SYSTIN 31.0 C\n    \t in10 0.352 v\n    \t fan5 0 RPM\n    \t in9 0.0 v\n    \t AUXTIN2 23.0 C\n    \t in14 1.848 v\n    \t in2 3.344 v\n    \t fan2 1945 RPM\n    \t PCH_CHIP_TEMP 0.0 C\n    \t in6 1.536 v\n    \t CPUTIN 33.0 C\n    \t in11 1.056 v\n     k10temp\n    \t Tdie 32.625 C\n    \t Tctl 32.625 C\n\n\n### Get data\nIn case we are interested in getting the information from the sensors instead of printing it on the screen, we will execute the following sentence: \n\n\n```python\nsensors.data()\n```\n\n\n\n\n    {'amdgpu': {'vddgfx': '0.862 v',\n      'power1': '34.169 w',\n      'fan1': '1120 RPM',\n      'edge': '33.0 C'},\n     'nct6779': {'AUXTIN3': '-28.0 C',\n      'in3': '3.344 v',\n      'fan3': '0 RPM',\n      'in7': '3.472 v',\n      'AUXTIN0': '-2.5 C',\n      'in12': '1.68 v',\n      'in0': '0.568 v',\n      'PCH_CPU_TEMP': '0.0 C',\n      'SMBUSMASTER 0': '32.5 C',\n      'in4': '1.84 v',\n      'fan4': '0 RPM',\n      'in8': '3.264 v',\n      'AUXTIN1': '85.0 C',\n      'in13': '0.944 v',\n      'in1': '0.0 v',\n      'fan1': '0 RPM',\n      'PCH_CHIP_CPU_MAX_TEMP': '0.0 C',\n      'in5': '0.84 v',\n      'SYSTIN': '31.0 C',\n      'in10': '0.352 v',\n      'fan5': '0 RPM',\n      'in9': '0.0 v',\n      'AUXTIN2': '23.0 C',\n      'in14': '1.848 v',\n      'in2': '3.344 v',\n      'fan2': '1945 RPM',\n      'PCH_CHIP_TEMP': '0.0 C',\n      'in6': '1.536 v',\n      'CPUTIN': '33.0 C',\n      'in11': '1.056 v'},\n     'k10temp': {'Tdie': '32.625 C', 'Tctl': '32.625 C'}}\n\n\n\n# Processor information\nTo access the processor subclass, the following sentence will be executed \n\n\n```python\ncpu = Hwmon.CPU()\n```\n\nBeing the functions that interest us in this case: data() and print_data(). Let's see an example of each function:\n### Print information\nThis function will print all the information of the system processor in a tabular and nice way. \n\n\n```python\ncpu.print_data()\n```\n\n     Name AMD Ryzen 5 1400 Quad-Core Processor\n     CPU_usage 14.32\n     cores 4\n     threads 8\n     Average_MHz 1449.3\n\n\n### Get data\nIn case we are interested in obtaining the information from the processor instead of printing it on the screen, we will execute the following sentence: \n\n\n```python\ncpu.data()\n```\n\n\n\n\n    {'Name': 'AMD Ryzen 5 1400 Quad-Core Processor',\n     'CPU_usage': 14.32,\n     'cores': '4',\n     'threads': '8',\n     'Average_MHz': 1719.68}\n\n\n\n# Memory information\nTo access the system memory subclass, the following sentence will be executed: \n\n\n```python\nmemory = Hwmon.MEM()\n```\n\nBeing the functions that interest us in this case: data() and print_data() . Let's see an example of each function: \n### Print information\nThis function will print in a tabular and nice way all the information in the system memory. \n\n\n```python\nmemory.print_data()\n```\n\n     MemTotal 7.768MB\n     MemFree 2.569MB\n     MemAvailable 4.349MB\n     Buffers 156.973KB\n     Cached 1.850MB\n     SwapCached 0B\n     Active 3.608MB\n     Inactive 1.012MB\n     Active(anon) 2.576MB\n     Inactive(anon) 116.551KB\n     Active(file) 1.032MB\n     Inactive(file) 919.520KB\n     Unevictable 32.0B\n     Mlocked 32.0B\n     SwapTotal 2.000MB\n     SwapFree 2.000MB\n     Dirty 960.0B\n     Writeback 0B\n     AnonPages 2.617MB\n     Mapped 683.496KB\n     Shmem 118.547KB\n     KReclaimable 122.035KB\n     Slab 270.754KB\n     SReclaimable 122.035KB\n     SUnreclaim 148.719KB\n     KernelStack 24.109KB\n     PageTables 70.258KB\n     NFS_Unstable 0B\n     Bounce 0B\n     WritebackTmp 0B\n     CommitLimit 5.884MB\n     Committed_AS 11.335MB\n     VmallocTotal 32.000GB\n     VmallocUsed 40.414KB\n     VmallocChunk 0B\n     Percpu 14.250KB\n     HardwareCorrupted 0B\n     AnonHugePages 0B\n     ShmemHugePages 0B\n     ShmemPmdMapped 0B\n     CmaTotal 0B\n     CmaFree 0B\n     HugePages_Total 0B\n     HugePages_Free 0B\n     HugePages_Rsvd 0B\n     HugePages_Surp 0B\n     Hugepagesize 2.000KB\n     Hugetlb 0B\n     DirectMap4k 447.266KB\n     DirectMap2M 6.498MB\n     DirectMap1G 2.000MB\n\n\n### Get data\nIn case we are interested in obtaining the information from memory instead of printing it out on the screen, we will execute the following sentence: \n\n\n```python\nmemory.data()\n```\n\n\n\n\n    {'MemTotal': '7.768MB',\n     'MemFree': '2.569MB',\n     'MemAvailable': '4.349MB',\n     'Buffers': '156.980KB',\n     'Cached': '1.850MB',\n     'SwapCached': '0B',\n     'Active': '3.608MB',\n     'Inactive': '1.012MB',\n     'Active(anon)': '2.576MB',\n     'Inactive(anon)': '116.551KB',\n     'Active(file)': '1.032MB',\n     'Inactive(file)': '919.520KB',\n     'Unevictable': '32.0B',\n     'Mlocked': '32.0B',\n     'SwapTotal': '2.000MB',\n     'SwapFree': '2.000MB',\n     'Dirty': '964.0B',\n     'Writeback': '0B',\n     'AnonPages': '2.616MB',\n     'Mapped': '683.496KB',\n     'Shmem': '118.547KB',\n     'KReclaimable': '122.035KB',\n     'Slab': '270.754KB',\n     'SReclaimable': '122.035KB',\n     'SUnreclaim': '148.719KB',\n     'KernelStack': '24.109KB',\n     'PageTables': '70.258KB',\n     'NFS_Unstable': '0B',\n     'Bounce': '0B',\n     'WritebackTmp': '0B',\n     'CommitLimit': '5.884MB',\n     'Committed_AS': '11.335MB',\n     'VmallocTotal': '32.000GB',\n     'VmallocUsed': '40.414KB',\n     'VmallocChunk': '0B',\n     'Percpu': '14.250KB',\n     'HardwareCorrupted': '0B',\n     'AnonHugePages': '0B',\n     'ShmemHugePages': '0B',\n     'ShmemPmdMapped': '0B',\n     'CmaTotal': '0B',\n     'CmaFree': '0B',\n     'HugePages_Total': '0B',\n     'HugePages_Free': '0B',\n     'HugePages_Rsvd': '0B',\n     'HugePages_Surp': '0B',\n     'Hugepagesize': '2.000KB',\n     'Hugetlb': '0B',\n     'DirectMap4k': '447.266KB',\n     'DirectMap2M': '6.498MB',\n     'DirectMap1G': '2.000MB'}\n\n\n\n# Network information\nTo access the network subclass, the following sentence will be executed: \n\n\n```python\nnet = Hwmon.NET()\n```\n\nBeing the functions that interest us in this case: data() and print_data() . Let's see an example of each function: \n### Print information\nThis function will print in a tabular and nice way all the information of the system network. \n\n\n```python\nnet.print_data()\n```\n\n         lo\n    \t receive\n    \t\t bytes 7593337\n    \t\t packets 14478\n    \t\t errs 0\n    \t\t drop 0\n    \t\t fifo 0\n    \t\t frame 0\n    \t\t compressed 0\n    \t\t multicast 0\n    \t transmit\n    \t\t bytes 14478\n    \t\t packets 0\n    \t\t errs 0\n    \t\t drop 0\n    \t\t fifo 0\n    \t\t colls 0\n    \t\t carrier 0\n     enp37s0\n    \t receive\n    \t\t bytes 1279460566\n    \t\t packets 864808\n    \t\t errs 0\n    \t\t drop 0\n    \t\t fifo 0\n    \t\t frame 0\n    \t\t compressed 0\n    \t\t multicast 507\n    \t transmit\n    \t\t bytes 362337\n    \t\t packets 0\n    \t\t errs 0\n    \t\t drop 0\n    \t\t fifo 0\n    \t\t colls 0\n    \t\t carrier 0\n     docker0\n    \t receive\n    \t\t bytes 0\n    \t\t packets 0\n    \t\t errs 0\n    \t\t drop 0\n    \t\t fifo 0\n    \t\t frame 0\n    \t\t compressed 0\n    \t\t multicast 0\n    \t transmit\n    \t\t bytes 0\n    \t\t packets 0\n    \t\t errs 0\n    \t\t drop 0\n    \t\t fifo 0\n    \t\t colls 0\n    \t\t carrier 0\n\n\n### Get data\nIn case we are interested in getting the information from the network instead of printing it on the screen, we will execute the following sentence: \n\n\n```python\nnet.data()\n```\n    {'    lo': {'receive': {'bytes': 7605359,\n       'packets': 14503,\n       'errs': 0,\n       'drop': 0,\n       'fifo': 0,\n       'frame': 0,\n       'compressed': 0,\n       'multicast': 0},\n      'transmit': {'bytes': 14503,\n       'packets': 0,\n       'errs': 0,\n       'drop': 0,\n       'fifo': 0,\n       'colls': 0,\n       'carrier': 0}},\n     'enp37s0': {'receive': {'bytes': 1279460566,\n       'packets': 864808,\n       'errs': 0,\n       'drop': 0,\n       'fifo': 0,\n       'frame': 0,\n       'compressed': 0,\n       'multicast': 507},\n      'transmit': {'bytes': 362337,\n       'packets': 0,\n       'errs': 0,\n       'drop': 0,\n       'fifo': 0,\n       'colls': 0,\n       'carrier': 0}},\n     'docker0': {'receive': {'bytes': 0,\n       'packets': 0,\n       'errs': 0,\n       'drop': 0,\n       'fifo': 0,\n       'frame': 0,\n       'compressed': 0,\n       'multicast': 0},\n      'transmit': {'bytes': 0,\n       'packets': 0,\n       'errs': 0,\n       'drop': 0,\n       'fifo': 0,\n       'colls': 0,\n       'carrier': 0}}}\n\n\n\n# USB devices information\nTo access the USB subclass, the following sentence will be executed: \n\n\n```python\nusb = Hwmon.USB()\n```\n\nBeing the functions that interest us in this case: data() and print_data() . Let's see an example of each function: \n### Print information\nThis function will print in a tabular and nice way all the information of the USBs in the system. \n\n\n```python\nusb.print_data()\n```\n\n    usb-Logitech_Gaming_Mouse_G300-mouse\n    usb-CHICONY_USB_Keyboard\n    usb-Logitech_Gaming_Mouse_G300\n    usb-Logitech_Gaming_Mouse_G300-if01\n\n\n### Get data\nIn case we are interested in getting the information from the sensors instead of printing it on the screen, we will execute the following sentence: \n\n\n```python\nusb.data()\n```\n    ['usb-Logitech_Gaming_Mouse_G300-mouse',\n     'usb-CHICONY_USB_Keyboard',\n     'usb-Logitech_Gaming_Mouse_G300',\n     'usb-Logitech_Gaming_Mouse_G300-if01']\n\n\n\n# Disks information\nTo access the subclass of the disks, the following sentence will be executed: \n\n\n```python\ndisk = Hwmon.DISK()\n```\n\nBeing the functions that interest us in this case: data() and print_data() . Let's see an example of each function: \n### Print information\nThis function will print in a tabular and nice way all the information of the disks in the system. \n\n\n```python\ndisk.print_data()\n```\n\n    wwn-0x50014ee202380e97\n    ata-WDC_WD3200BEVT-22ZCT0_WD-WXEY08F45384\n    wwn-0x500080dc007530e0\n    ata-TOSHIBA-TL100_27NB51GCKSZU\n    wwn-0x50014ee20b769657\n    ata-WDC_WD20EZRX-22D8PB0_WD-WCC4M1ZJ83JD\n\n\n### Get data\nIn case we are interested in getting the information from the sensors instead of printing it on the screen, we will execute the following sentence: \n\n\n```python\ndisk.data()\n```\n\n    ['wwn-0x500080dc007530e0',\n     'ata-WDC_WD3200BEVT-22ZCT0_WD-WXEY08F45384',\n     'ata-TOSHIBA-TL100_27NB51GCKSZU',\n     'wwn-0x50014ee202380e97',\n     'wwn-0x50014ee20b769657',\n     'ata-WDC_WD20EZRX-22D8PB0_WD-WCC4M1ZJ83JD']\n\n# GPU information \nTo access the GPU subclass, the following statement will be executed: \n\n\n```python\ngpu = Hwmon.GPU()\n```\n\nBeing the functions that interest us in this case: data() and print_data() . Let's see an example of each function: \n### Print information\nThis function will print all the information of the GPU in a tabular and nice way. \n\n\n```python\ngpu.print_data()\n```\n    amdgpudrmfb\n         Resolution 1680x1050p\n         gpu_busy_percent 0 %\n         mem_info_vram_used 361.31MB\n         current_link_width 16\n         mem_info_vis_vram_used 46.77MB\n         mem_info_vis_vram_total 256.00MB\n         current_link_speed 8 GT/s\n         mem_busy_percent 19 %\n         mem_info_gtt_used 52.29MB\n         mem_info_vram_total 8.00GB\n         vbios_version 113-C9403100_101\n         mem_info_gtt_total 5.83GB\n\n### Get data\nIn case we are interested in getting the information from the gpu instead of printing it on the screen, we will execute the following sentence: \n\n```python\ngpu.data()\n```\n    {'amdgpudrmfb':\n    {'Resolution': '1680x1050p',\n    'gpu_busy_percent': '0 %',\n    'mem_info_vram_used': '367.23MB',\n    'current_link_width': '16',\n    'mem_info_vis_vram_used': '46.77MB',\n    'mem_info_vis_vram_total': '256.00MB',\n    'current_link_speed': '8 GT/s',\n    'mem_busy_percent': '19 %',\n    'mem_info_gtt_used': '56.88MB',\n    'mem_info_vram_total': '8.00GB',\n    'vbios_version': '113-C9403100_101',\n    'mem_info_gtt_total': '5.83GB'}}\n\n# BIOS information \nTo access the BIOS subclass, the following statement will be executed: \n\n\n```python\nbios = Hwmon.BIOS()\n```\n\nBeing the functions that interest us in this case: data() and print_data() . Let's see an example of each function: \n### Print information\nThis function will print all the information of the GPU in a tabular and nice way. \n\n\n```python\nbios.print_data()\n```\n    bios_date 12/20/2018\n    bios_version P5.50\n    board_vendor ASRock\n    chassis_type 3\n    bios_vendor American Megatrends Inc.\n    board_asset_tag \n    board_version \n    board_name AB350M-HDV\n\n\n### Get data\nIn case we are interested in getting the information from the gpu instead of printing it on the screen, we will execute the following sentence: \n\n```python\nbios.data()\n```\n    {'bios_date': '12/20/2018',\n    'bios_version': 'P5.50',\n    'board_vendor': 'ASRock',\n    'chassis_type': '3',\n    'bios_vendor': 'American Megatrends Inc.',\n    'board_asset_tag': '',\n    'board_version': '',\n    'board_name': 'AB350M-HDV'}",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/bla6-apm/Hwmon-python/archive/0.9.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Guillermo-C-A/Hwmon-python",
    "keywords": "system_info,hardware_monitor,monitoring,hardware,sensors",
    "license": "gpl-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hwmon",
    "package_url": "https://pypi.org/project/hwmon/",
    "platform": "",
    "project_url": "https://pypi.org/project/hwmon/",
    "project_urls": {
      "Download": "https://github.com/bla6-apm/Hwmon-python/archive/0.9.tar.gz",
      "Homepage": "https://github.com/Guillermo-C-A/Hwmon-python"
    },
    "release_url": "https://pypi.org/project/hwmon/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Hwmon is a collection of Python 3 scripts which are a native Python solution for obtaining information from Linux system sensors.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7425881,
  "releases": {
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25e69ebd286bc1070348ceb08c882c4585c1df9f741ef7cb28394f46adea9002",
          "md5": "7d6b9fe3a95f54a15a02267f57f965b8",
          "sha256": "e86dd55a6cc54677e9dcb27be52a4459f8a2ea3ea095cbdd514b28d84f21542a"
        },
        "downloads": -1,
        "filename": "hwmon-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "7d6b9fe3a95f54a15a02267f57f965b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24978,
        "upload_time": "2020-04-18T13:54:44",
        "upload_time_iso_8601": "2020-04-18T13:54:44.100791Z",
        "url": "https://files.pythonhosted.org/packages/25/e6/9ebd286bc1070348ceb08c882c4585c1df9f741ef7cb28394f46adea9002/hwmon-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73cd556502baa9eb9ee572e2a2848eac5f009d906106c3e2ce7fce42ca2817c0",
          "md5": "a8dd7db208e1883b2d7e9deda44de835",
          "sha256": "d7828af291184dcc495ddef9e5a0b9114143b487f0bc128234a8e0168cee98e8"
        },
        "downloads": -1,
        "filename": "hwmon-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "a8dd7db208e1883b2d7e9deda44de835",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25108,
        "upload_time": "2020-04-18T14:59:07",
        "upload_time_iso_8601": "2020-04-18T14:59:07.538383Z",
        "url": "https://files.pythonhosted.org/packages/73/cd/556502baa9eb9ee572e2a2848eac5f009d906106c3e2ce7fce42ca2817c0/hwmon-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d3cd1f552e63b2c1f4ea462c1f788801f88a64a22f3c59275a8596564abb5fe",
          "md5": "89bd158f68f3aa58fb43e00b865008c3",
          "sha256": "fc55b08e45e8897797b8af2f7bc7acee9fd33941af10fe2ee43b6b31fca2437c"
        },
        "downloads": -1,
        "filename": "hwmon-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "89bd158f68f3aa58fb43e00b865008c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14326,
        "upload_time": "2020-06-08T18:27:28",
        "upload_time_iso_8601": "2020-06-08T18:27:28.801749Z",
        "url": "https://files.pythonhosted.org/packages/3d/3c/d1f552e63b2c1f4ea462c1f788801f88a64a22f3c59275a8596564abb5fe/hwmon-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d3cd1f552e63b2c1f4ea462c1f788801f88a64a22f3c59275a8596564abb5fe",
        "md5": "89bd158f68f3aa58fb43e00b865008c3",
        "sha256": "fc55b08e45e8897797b8af2f7bc7acee9fd33941af10fe2ee43b6b31fca2437c"
      },
      "downloads": -1,
      "filename": "hwmon-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "89bd158f68f3aa58fb43e00b865008c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14326,
      "upload_time": "2020-06-08T18:27:28",
      "upload_time_iso_8601": "2020-06-08T18:27:28.801749Z",
      "url": "https://files.pythonhosted.org/packages/3d/3c/d1f552e63b2c1f4ea462c1f788801f88a64a22f3c59275a8596564abb5fe/hwmon-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}