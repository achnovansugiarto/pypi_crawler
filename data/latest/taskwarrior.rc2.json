{
  "info": {
    "author": "Adam Coddington",
    "author_email": "me@adamcoddington.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities"
    ],
    "description": "# Taskwarrior bindings for Python\n\nInteract with your local taskwarrior task list from Python.\n\nThis is heavily inspired by [@ralphbean](https://github.com/ralphbean)'s [taskw library](https://github.com/ralphbean/taskw) (that I'm also a contributor to), but breaks with many past decisions so as to have a cleaner internal API, a saner method of interacting with Taskwarrior itself, type annotations, and much improved maintainability.\n\n# Installation\n\n```\npip install taskwarrior\n```\n\nYou can also install the in-development version with:\n\n```\n\npip install https://github.com/coddingtonbear/taskwarrior/archive/master.zip\n\n```\n\n# Quickstart\n\n```python\n>>> from taskwarrior import Client\n>>> client = Client()\n>>> tasks = client.filter(status='pending')\n[Task(annotations=None, depends=None, description='Wake up', due=None, end=None, entry=datetime.datetime(2022, 1, 24, 4, 28, 11, tzinfo=tzutc()), id=1, imask=None, mask=None, modified=datetime.datetime(2022, 1, 24, 4, 28, 51, tzinfo=tzutc()), parent=None, project=None, recur=None, scheduled=None, start=None, status='pending', tags=['alarm'], until=None, urgency=0.8, uuid=UUID('a39ea0fa-682a-4815-9556-8b6785ee301c'), wait=None)]\n>>>\n```\n\n# Examples\n\n## Finding Tasks\n\nThe `filter` method is used for finding tasks:\n\n```python\n>>> from taskwarrior import Client\n>>> client = Client()\n>>> client.filter(status='pending')\n[Task(annotations=None, depends=None, description='Wake up', due=None, end=None, entry=datetime.datetime(2023, 1, 24, 4, 28, 11, tzinfo=tzutc()), id=1, imask=None, mask=None, modified=datetime.datetime(2022, 1, 24, 4, 28, 51, tzinfo=tzutc()), parent=None, project=None, recur=None, scheduled=None, start=None, status='pending', tags=['alarm'], until=None, urgency=0.8, uuid=UUID('a39ea0fa-682a-4815-9556-8b6785ee301c'), wait=None)]\n```\n\nIt accepts as parameters any of the following:\n\n- Any number of keyword arguments:\n  - Example of filter keyword arguments include:\n    - `status='pending'`\n    - `description__contains='Some string'`\n    - `due__after='yesterday'`\n  - Double-underscores are transformed into a `.` when sending the filter to Taskwarrior so as to allow you to use filters like `description.contains` or `due.after`.\n- Any number of filter dictionaries:\n  - These work much the same way as keyword arguments described above, but allow you to specify these as raw dictionaries instead.\n- Any number of raw strings:\n  - E.g. for filtering to tasks having only a certain tag, you can provide as a value `+mytag`.\n- Any number of `Q` objects:\n  - You can use `Q` objects to perform complex `or` and `and` queries using exactly the same keyword arguments, filter dictionaries, or string values descrribed above.\n  - See \"Using Q Objects\" below for more information.\n\nEach of these parameters are `and`-ed together should more than one parameter be provided.  If you need to use `or` expressions, see \"Using Q Objects\" below.\n\nIf you are expecting to retrieve just a single task, you can use the `.get` method, too:\n\n```python\n>>> from taskwarrior import Client\n>>> client = Client()\n>>> client.get(uuid=\"a39ea0fa-682a-4815-9556-8b6785ee301c\")\nTask(annotations=None, depends=None, description='Wake up', due=None, end=None, entry=datetime.datetime(2023, 1, 24, 4, 28, 11, tzinfo=tzutc()), id=1, imask=None, mask=None, modified=datetime.datetime(2022, 1, 24, 4, 28, 51, tzinfo=tzutc()), parent=None, project=None, recur=None, scheduled=None, start=None, status='pending', tags=['alarm'], until=None, urgency=0.8, uuid=UUID('a39ea0fa-682a-4815-9556-8b6785ee301c'), wait=None)\n```\n\nif either zero or more than one task is returned from your query, an exception will be raised.\n\n## Retrieving tasks\n\n```python\n>>> from taskwarrior import Client\n>>> client = Client()\n>>> client.get(uuid=\"a39ea0fa-682a-4815-9556-8b6785ee301c\")\nTask(annotations=None, depends=None, description='Wake up', due=None, end=None, entry=datetime.datetime(2023, 1, 24, 4, 28, 11, tzinfo=tzutc()), id=1, imask=None, mask=None, modified=datetime.datetime(2022, 1, 24, 4, 28, 51, tzinfo=tzutc()), parent=None, project=None, recur=None, scheduled=None, start=None, status='pending', tags=['alarm'], until=None, urgency=0.8, uuid=UUID('a39ea0fa-682a-4815-9556-8b6785ee301c'), wait=None)\n```\n\nSee \"Finding Tasks\" for more details -- this allows all of the functionality described there, except that it asserts that only a single task be returned.  Note that you can use any combination of fields you might like for retrieving your single task, but `uuid` and `id` are the ones most likely to be of use to you.\n\n## Counting tasks\n\n```python\n>>> from taskwarrior import Client\n>>> client = Client()\n>>> client.count(status='pending')\n1\n```\n\nThis allows all of the same filtering logic that you can find described in \"Finding tasks\" above; see that section for more details.\n\n## Adding Tasks\n\n```python\n>>> from taskwarrior import Client, Task\n>>> client = Client()\n>>> task = Task(description=\"my new task\")\n>>> client.add(task)\n>>> task.uuid\nUUID('29d06231-525f-4a62-9e9f-dd0f680aaaff')'\n```\n\n## Changing tasks\n\n```python\n>>> from taskwarrior import Client\n>>> import pytz\n>>> client = Client()\n>>> task = client.get(uuid=\"a39ea0fa-682a-4815-9556-8b6785ee301c\")\n>>> task.due = datetime.datetime(2029, 1, 1, 10, 0, tzinfo=pytz.timezone('America/Los_Angeles'))\n>>> client.modify(task)\n```\n\nJust alter the fields on the object directly using native python datatypes and pass your altered object to `modify` and your task will be updated immediately.\n\n\n## Being Flexible\n\n```python\n>>> from taskwarrior import Client\n>>> client = Client(\n        config_filename=\"/path/to/my/taskrc\",\n        config_overrides={\n            \"some\": {\n                \"config\": \"values\",\n            }\n        },\n        task_bin=\"/path/to/bin/task\",\n    )\n```\n\nYou can provide the following parameters when instantiating your client:\n\n- `config_filename`: (Default: `~/.taskrc`) The path of the `taskrc` file to use.\n- `config_overrides`: A dictionary object representing configuration overrides to use when interacting with Taskwarrior.  Nested dictionaries will be encoded into dotted configuration paths using the key name in their parent dictionary.\n- `task_bin`: The path to the `task` binary to use.\n\n# Using Q Objects\n\nQ objects (inspired by [Django's objects of the same name](https://docs.djangoproject.com/en/4.0/topics/db/queries/#s-complex-lookups-with-q-objects) can be used for building complex logical queries for filtering your tasks.\n\nQ objects accept all of the same parameter types described in \"Finding tasks\" above, but can also be `or` or `and`-ed together using `|` or `&`:\n\n```python\n>>> from taskwarrior import Client, Q\n>>> import pytz\n>>> client = Client()\n>>> client.filter(\n        Q(status='pending') | Q(\n            status='waiting',\n            due__before=pytz.timezone('America/Los_Angeles').localize(\n                datetime.datetime.utcnow() + datetime.timedelta(days=7)\n            )\n        )\n    )\n```\n\n# How does this differ from [taskw](https://github.com/ralphbean/taskw)?\n\n- This is a much younger library and may still have bugs.\n- This interacts with Taskwarrior over its `export` and `import` (\"plumbing\") interfaces instead of interacting with its \"porcelain\" interfaces like `modify`.  This makes this library internally a lot simpler and less likely to break as Taskwarrior's command-line API is changed in the future.\n- This has far fewer options and controls.  Mostly: those options and controls are of limited value and high maintenance cost anyway, so it's likely you won't even notice.\n- This has much more sophisticated filtering capabilities.\n- This uses a slightly simpler API for retrieving tasks -- rather than handing you a 2-tuple of values `(id, {data})` this just hands you a data object (or list of them).\n- This uses a third-party library ([Pydantic](https://pydantic-docs.helpmanual.io/)) for data serialization/deserialization so as to remove those responsibilities from the library itself (and hopefully make it somewhat easier to maintain).\n- This supports only modern versions of Taskwarrior.  Specifically: only versions of Taskwarrior newer than 2.5.1 are supported.\n- This supports only currently supported versions of Python.  Specifically: only versions of Python currently receiving security updates are supported -- that means Python 3.7+ at the moment.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/coddingtonbear/taskwarrior",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "taskwarrior",
    "package_url": "https://pypi.org/project/taskwarrior/",
    "platform": "",
    "project_url": "https://pypi.org/project/taskwarrior/",
    "project_urls": {
      "Changelog": "https://github.com/coddingtonbear/taskwarrior/blob/master/CHANGELOG.md",
      "Homepage": "https://github.com/coddingtonbear/taskwarrior",
      "Issue Tracker": "https://github.com/coddingtonbear/taskwarrior/issues"
    },
    "release_url": "https://pypi.org/project/taskwarrior/0.1.2/",
    "requires_dist": [
      "pydantic (<2.0.0,>=1.8.2)",
      "python-dateutil (<3.0.0,>=2.8.2)",
      "pytz",
      "typing-extensions"
    ],
    "requires_python": ">=3.6",
    "summary": "Interact with your local taskwarrior task list from Python.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12677895,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "755b0c0a88ba1cc65c7116de38ff58c0b9665a4dc64ea9454d85d2cf272c53e6",
          "md5": "53aa92847192490c2499249218ff99a8",
          "sha256": "3b6ead81f70ecfbc4cd1aee477106927db606b520c11b16112d6803739733116"
        },
        "downloads": -1,
        "filename": "taskwarrior-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53aa92847192490c2499249218ff99a8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12365,
        "upload_time": "2022-01-24T07:45:44",
        "upload_time_iso_8601": "2022-01-24T07:45:44.803433Z",
        "url": "https://files.pythonhosted.org/packages/75/5b/0c0a88ba1cc65c7116de38ff58c0b9665a4dc64ea9454d85d2cf272c53e6/taskwarrior-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f8f7f5b5969ad1c59f990619976ddc4ddb57bd4f88c2349b656795a6eae79b2",
          "md5": "d6da3a88b6e57278555ed0a31ceb9507",
          "sha256": "6426a5a44f7890106dc6ceda7087fe0bd56810144a5d890e89f9812e20f81fe9"
        },
        "downloads": -1,
        "filename": "taskwarrior-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d6da3a88b6e57278555ed0a31ceb9507",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14279,
        "upload_time": "2022-01-24T07:45:46",
        "upload_time_iso_8601": "2022-01-24T07:45:46.551184Z",
        "url": "https://files.pythonhosted.org/packages/1f/8f/7f5b5969ad1c59f990619976ddc4ddb57bd4f88c2349b656795a6eae79b2/taskwarrior-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a0d2ef2c03403b775daa4314fd5c7206203e86d5fce1ac8e255fd409d850a4e",
          "md5": "de4510bb00124da86387aea3aca53f02",
          "sha256": "7cda0a92e3c136243fdb7dfc67f70f4be0537a42f6030e1682c786a9f70d1240"
        },
        "downloads": -1,
        "filename": "taskwarrior-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de4510bb00124da86387aea3aca53f02",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12426,
        "upload_time": "2022-01-24T16:59:36",
        "upload_time_iso_8601": "2022-01-24T16:59:36.506136Z",
        "url": "https://files.pythonhosted.org/packages/9a/0d/2ef2c03403b775daa4314fd5c7206203e86d5fce1ac8e255fd409d850a4e/taskwarrior-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a31bbbba4188fa699cff7c9a4dc9bee635d7617183af931e5c52b569c9e5658",
          "md5": "19a95a810746f9e37de291fbac958509",
          "sha256": "41b1d8fdfd22a0073690b86965f34eaaddd3fa0e0494020e2dbafc6c8bc96687"
        },
        "downloads": -1,
        "filename": "taskwarrior-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "19a95a810746f9e37de291fbac958509",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14848,
        "upload_time": "2022-01-24T16:59:38",
        "upload_time_iso_8601": "2022-01-24T16:59:38.108996Z",
        "url": "https://files.pythonhosted.org/packages/9a/31/bbbba4188fa699cff7c9a4dc9bee635d7617183af931e5c52b569c9e5658/taskwarrior-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a0d2ef2c03403b775daa4314fd5c7206203e86d5fce1ac8e255fd409d850a4e",
        "md5": "de4510bb00124da86387aea3aca53f02",
        "sha256": "7cda0a92e3c136243fdb7dfc67f70f4be0537a42f6030e1682c786a9f70d1240"
      },
      "downloads": -1,
      "filename": "taskwarrior-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "de4510bb00124da86387aea3aca53f02",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 12426,
      "upload_time": "2022-01-24T16:59:36",
      "upload_time_iso_8601": "2022-01-24T16:59:36.506136Z",
      "url": "https://files.pythonhosted.org/packages/9a/0d/2ef2c03403b775daa4314fd5c7206203e86d5fce1ac8e255fd409d850a4e/taskwarrior-0.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a31bbbba4188fa699cff7c9a4dc9bee635d7617183af931e5c52b569c9e5658",
        "md5": "19a95a810746f9e37de291fbac958509",
        "sha256": "41b1d8fdfd22a0073690b86965f34eaaddd3fa0e0494020e2dbafc6c8bc96687"
      },
      "downloads": -1,
      "filename": "taskwarrior-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "19a95a810746f9e37de291fbac958509",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14848,
      "upload_time": "2022-01-24T16:59:38",
      "upload_time_iso_8601": "2022-01-24T16:59:38.108996Z",
      "url": "https://files.pythonhosted.org/packages/9a/31/bbbba4188fa699cff7c9a4dc9bee635d7617183af931e5c52b569c9e5658/taskwarrior-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}