{
  "info": {
    "author": "Thibaut Guirimand",
    "author_email": "tguirimand@gmx.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "# rulesengine\n\nIs there any developer liking to work with hundreds of chained if/else? If you're one of those this package isn't for you.\n\nA rules engine is a way to structure your code as pipelines. The objective is to create chained modular and reusable rules with a simple structure structure :\n* A `filter`: can I do some stuff?\n* An `action`: I know I can do some stuff so I do it\n\nWith a rules engine you have to think your pipeline has stackable modules to generate easily readable pipelines.\n\n## Example with some potatoes\n\nHere is an example on how to (try to) eat smashed potatoes:\n``` python3\n# How to eat smashed potatoes\nrules = RulesEngine()\nrules.add(GetPotatoes)\nrules.add(CookPotatoes)\nrules.add(EatPotatoes)\nrules.add(SmashPotatoes)\nrules.add(EatSmashedPotatoes)\nrules_output = rules.run()\n\nrules_ouput.get(\"Eaten smashed potatoes portions\")  # Sorry there is nothing\n```\n\nWith a pipeline like this one, you won't eat any smashed potatoes but you'll\nstill have eaten some potatoes (if `GetPotatoes` got you at least one potato).\nLet's see the `SmashPotatoes` rule to understand:\n\n``` python3\nclass SmashPotatoes(Rule):\n    RULE_NAME = \"Smash potatoes\"\n\n    def filter(self, input_data):\n        \"\"\"\n        Can I really smash potatoes?\n        \"\"\"\n        # Get my smashable potatoes\n        smashable_potatoes = input_data.get(\"cooked potatoes\")\n        # Have I any smashable potatoes ?\n        if smashable_potatoes is None or smashable_potatoes < 1:\n            # There isn't any potato to smash. We won't do any thing...\n            return False\n        # YES! We can smash potatoes!!!\n        return True\n\n    def action(self, input_data):\n        \"\"\"\n        Let's smash potatoes because we can\n        \"\"\"\n        # Get you potatoes\n        smashable_potatoes = input_data.get(\"cooked potatoes\")\n        # Do your job (an other RulesEngine?)\n        smashed_potatoes_portions = ...\n\n        input_data.set(\"smashed potatoes portions\", smashed_potatoes_portions)\n        input_data.set(\"cooked potatoes\", 0)\n```\n\nIn this rule if the filter isn't applied, we won't apply the action :\n* No `cooked potatoes` no action and finally no `smashed potatoes portions`\n* At least 1 `cooked potatoes`, the action is performed and we have at least 1\n`smashed potatoes portions`\n\n## Installation\n\n``` bash\npip install rulesengine\n```\n\n## Documentation & Help\n\n### Create a rule\n\n```python3\nfrom rulesengine import Rule\n\nclass MyRule(Rule):\n    RULE_NAME = \"A minimal rule\"\n\n    # An execution order (positive or -1). Rules of same level are executed in their\n    # declaration order. -1 are executed lastly and minimal values are executed firstly\n    RULE_ORDER = -1\n\n    def filter(self, input_data):\n        \"\"\"\n        Test if you can apply your rule, are all variables initialized?\n        \"\"\"\n        return True\n\n    def action(self, input_data):\n        \"\"\"\n        Do some stuff\n        \"\"\"\n```\n\n### Access data\n\nAn object is passed between rules and returned by the `RulesEngine.run()`\nmethod : `RulesData`\n```python3\n# Get an element (return None if not initialized)\nmy_data.get('my element key')\n\n# Set or update an element\nmy_data.set('my element key', something)\n\n# Delete an element (let's free some memory!)\nmy_data.delete('my element key')\n\n# Get previously executed rule\nmy_data.get_previous()\n\n# Set expected next rule\nmy_data.set_expected_next(MyNextRule.RULE_NAME)\n```\n\n### Create pipeline\n\n```python3\nfrom rulesengine import RulesEngine\n\n# Initialize the pipeline\nrules = RulesEngine()\nrules.add(MyRule, forced_order=0)  # Will be executed first\nrules.add(MyRule)  # The same rule again\nrules.add(AnOtherRule, previous_rule=MyNextRule.RULE_NAME)  # Won't match the previous rule condition\nrules.add(AnOtherRule, converter=a_funtion) # Sometime, to reuse rules we need to do extra stuff before the rule\nrules_output = rules.run()\n```\n\nPipelines doesn't have to be run to the end\n\n```python3\nfrom rulesengine import RulesCourse\n\n# Run every runnable rules (default)\nrules = RulesEngine(rules_course=RulesCourse.non_blocking)\n\n# Stop on the first rules's filter returning False\nrules = RulesEngine(rules_course=RulesCourse.block_on_false)\n\n# Stop on the first rules's filter returning True\nrules = RulesEngine(rules_course=RulesCourse.block_on_true)\n\n# Raise an error on the first rules's filter returning False\nrules = RulesEngine(rules_course=RulesCourse.error_on_false)\n```\n\n### Populate the pipeline before execution\n\n```python3\n# At creation\nrules = RulesEngine({\n        \"data_1\": 1,\n        \"data_2\": list(),\n    })\n\n# afterward\nrules.set(key, value)\n```\n\n### Manage errors\n\nThere is only one rulesengine error : `rulesengine.RulesEngineException`\n\n## Contributing\n\nAs an open source project, rulesengine welcomes contributions of all forms (especially culinary but please don't send any potato, the smashing potato workflow will fail).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.guirimand.eu/tguirimand/rulesengine",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rulesengine",
    "package_url": "https://pypi.org/project/rulesengine/",
    "platform": "",
    "project_url": "https://pypi.org/project/rulesengine/",
    "project_urls": {
      "Homepage": "https://gitlab.guirimand.eu/tguirimand/rulesengine"
    },
    "release_url": "https://pypi.org/project/rulesengine/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A rules engine to clarify your pipelines development",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11244787,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a0938cea9bae2fa33c4601b8eb6df7526cf3956ce8a938687b81bd2bd786901",
          "md5": "ec238c9c47baab4a208fa2909dee6898",
          "sha256": "52c19e97c20b96dec081d3491029a3c6ef2486a04274852ae3abb5c45dd3e455"
        },
        "downloads": -1,
        "filename": "rulesengine-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec238c9c47baab4a208fa2909dee6898",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8487,
        "upload_time": "2021-08-05T18:53:51",
        "upload_time_iso_8601": "2021-08-05T18:53:51.404064Z",
        "url": "https://files.pythonhosted.org/packages/0a/09/38cea9bae2fa33c4601b8eb6df7526cf3956ce8a938687b81bd2bd786901/rulesengine-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cefdbe9135be5e2b995b5cf3f75dca2209c004bb96c7dd382f1d160f51df832a",
          "md5": "1de9589cc22f937a3d58e949e316cf12",
          "sha256": "8eb7b3ebb5c20a337978f401fe0c8cbb94825203e28edabe8989d5d6f231f6c5"
        },
        "downloads": -1,
        "filename": "rulesengine-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1de9589cc22f937a3d58e949e316cf12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8855,
        "upload_time": "2021-08-05T18:53:53",
        "upload_time_iso_8601": "2021-08-05T18:53:53.182986Z",
        "url": "https://files.pythonhosted.org/packages/ce/fd/be9135be5e2b995b5cf3f75dca2209c004bb96c7dd382f1d160f51df832a/rulesengine-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2440410c34b2e9cec7e04aca4804fe795f7cdea39b01b3e60f5534ecd850184",
          "md5": "fed73651343dfdbbde34a646efee62bf",
          "sha256": "501a0310f6ee7a1aa9e5df9eab69f6b72316a79fc53c203e256a77fa7c80a45c"
        },
        "downloads": -1,
        "filename": "rulesengine-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fed73651343dfdbbde34a646efee62bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8570,
        "upload_time": "2021-08-22T14:38:26",
        "upload_time_iso_8601": "2021-08-22T14:38:26.337858Z",
        "url": "https://files.pythonhosted.org/packages/d2/44/0410c34b2e9cec7e04aca4804fe795f7cdea39b01b3e60f5534ecd850184/rulesengine-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8925f5bd7da5dfee2e199628c54537235cf6170d78945327ab2e5f9f14f4efc7",
          "md5": "163f58bf03eff8e6f3db5106bcd952dd",
          "sha256": "2a3e801ffef917b323513b3971653b08ed01756e994ae58ddb4c19e33cfb20e2"
        },
        "downloads": -1,
        "filename": "rulesengine-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "163f58bf03eff8e6f3db5106bcd952dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9044,
        "upload_time": "2021-08-22T14:38:28",
        "upload_time_iso_8601": "2021-08-22T14:38:28.142992Z",
        "url": "https://files.pythonhosted.org/packages/89/25/f5bd7da5dfee2e199628c54537235cf6170d78945327ab2e5f9f14f4efc7/rulesengine-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2440410c34b2e9cec7e04aca4804fe795f7cdea39b01b3e60f5534ecd850184",
        "md5": "fed73651343dfdbbde34a646efee62bf",
        "sha256": "501a0310f6ee7a1aa9e5df9eab69f6b72316a79fc53c203e256a77fa7c80a45c"
      },
      "downloads": -1,
      "filename": "rulesengine-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fed73651343dfdbbde34a646efee62bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8570,
      "upload_time": "2021-08-22T14:38:26",
      "upload_time_iso_8601": "2021-08-22T14:38:26.337858Z",
      "url": "https://files.pythonhosted.org/packages/d2/44/0410c34b2e9cec7e04aca4804fe795f7cdea39b01b3e60f5534ecd850184/rulesengine-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8925f5bd7da5dfee2e199628c54537235cf6170d78945327ab2e5f9f14f4efc7",
        "md5": "163f58bf03eff8e6f3db5106bcd952dd",
        "sha256": "2a3e801ffef917b323513b3971653b08ed01756e994ae58ddb4c19e33cfb20e2"
      },
      "downloads": -1,
      "filename": "rulesengine-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "163f58bf03eff8e6f3db5106bcd952dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9044,
      "upload_time": "2021-08-22T14:38:28",
      "upload_time_iso_8601": "2021-08-22T14:38:28.142992Z",
      "url": "https://files.pythonhosted.org/packages/89/25/f5bd7da5dfee2e199628c54537235cf6170d78945327ab2e5f9f14f4efc7/rulesengine-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}