{
  "info": {
    "author": "Thor Whalen",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ps\nCall any available system command from python\n\nTo install:\t```pip install ps```\n\nNote: The package is aspires to be platform-independent but has \nonly been tested with unix-flavored systems.\n\n# Quick Start\n\n`Commands()` will gather all available commands it can find\n(searching through the same `PATH` environment variable that your system does)\nand makes them available for execution. \n\n```\n>>> from ps import Commands\n>>> c = Commands()\n>>> c.echo('hello world')\n'hello world'\n>>> c.ls('-la')\ntotal 6271272\ndrwxr--r--@ 316 Thor.Whalen  staff      10112 Sep 22 14:01 .\ndrwxr-xr-x@  17 Thor.Whalen  staff        544 Mar  8  2022 ..\n...\n```\n\nA `Commands` instance is also a `Mapping`, so you can do things like:\n```python\nlen(c)\n# 3097\nlist(c)\n# ['_2to3',\n#  'Activate_ps1',\n#  'AssetCacheLocatorUtil'\n#  ...\n# ]\n'ls' in c\n# True\n'this_command_does_not_exist' in c\n# False\npy = c.get('python3.9', c.get('python3.8', None))\nc['ls']\n# Command(command='ls')\n```\n\nYou can get help like so:\n\n```\n>>> c.ls.help()\nLS(1)                     BSD General Commands Manual                    LS(1)\n\nNAME\n     ls -- list directory contents\n...\n```\n\nOr just get the help string like so:\n\n```\n>>> help_string = c.ls.help_str()\n```\n\n# More control\n\n`Commands` is just a collection of `Command` instances, which itself is \njust a callable that will run a shell script with you, in a manner \nspecified by the `run` function. \n\nSo let's have a quick look at those three objects to understand \nbetter what powers we have at our disposal.\n\n## run\n\nA parametrizable way to run shell commands.\n\nWorks somewhat like the [subprocess.run](\n<https://docs.python.org/3/library/subprocess.html#subprocess.run>) function.\nbut with different defaults, as well as the additional arguments `on_error` and\n`egress`.\n\n    >>> output = run('pwd')\n    >>> os.path.isdir(output)  # verify that output is indeed a valid directory path\n    True\n\nAlso very important difference with ``subprocess.run``:\nYou don't specify a LIST of tokenized arguments here:\nYou can specify the full (string) command or parts of it as a sequence of strings:\n\n    >>> assert run('echo hello world') == run('echo', 'hello', 'world') == b'hello world'\n\nNote that ``run`` will return ``bytes`` of the output, stripped of extremal\nnewlines. The argument that does the stripping is ``egress``.\nYou can use this argument to do something else with the output.\nFor example, if you want to to cast the output to a ``str``, strip it, then\nprint it, you could specify this in the ``egress``:\n\n    >>> run('echo hello world', egress=lambda x: print(x.decode().strip()))\n    hello world\n\n``run``'s purpose in life is designed to be curried.\nThat is, you can use ``functools.partial`` to make your own specialized\nfunctions that use shell scripts as their backend.\n\n    >>> from functools import partial\n    >>> stripped_str = lambda x: x.decode().strip()\n    >>> pwd = partial(run, 'pwd', egress=stripped_str)\n    >>> ls_la = partial(run, 'ls', '-la', egress=lambda x: print(stripped_str(x)))\n    >>> current_dir = pwd()\n    >>> os.path.isdir(current_dir)\n    True\n    >>> ls_la(current_dir)  # doctest: +SKIP\n    total 56\n    drwxr-xr-x@  7 Thor.Whalen  staff   224 Sep 23 12:12 .\n    drwxr-xr-x@ 11 Thor.Whalen  staff   352 Sep 23 11:33 ..\n    -rw-r--r--@  1 Thor.Whalen  staff    48 Sep 22 12:47 __init__.py\n    -rw-r--r--@  1 Thor.Whalen  staff  4649 Sep 23 11:33 base.py\n    -rw-r--r--@  1 Thor.Whalen  staff   348 Sep 22 12:38 raw.py\n    -rw-r--r--@  1 Thor.Whalen  staff  8980 Sep 23 12:12 util.py\n\n## Command\n\nA `Command` runs a specific shell script for you in a specific manner. \nThe `run` function is the general function to do that, and we saw \nthat you can curry `run` to specify what and how to run.\n`Command` just wraps such a curried `run` function\n(or any compliant run function you provide),\nand specifies what executable (the `command` argument) to actually run.\n\nSo not much over a curried `run`. \n\nBut what it does do as well is set up the ability to do other things \nthat may be specific to the executable you're running, such as \ngiving your (callable) command instance a signature, some docs, or \na help method. \n\n    >>> import os\n    >>> pwd = Command('pwd')\n    >>> os.path.isdir(pwd())\n    True\n    >>> assert pwd.__doc__  # docs exist (and are non-empty)!\n    >>> # To print the docs:\n    >>> pwd.help()  # doctest: +SKIP\n    PWD(1)                    BSD General Commands Manual                   PWD(1)\n\n    NAME\n         pwd -- return working directory name\n\n    SYNOPSIS\n         pwd [-L | -P]\n    ...\n\n## Commands\n\nA collection of commands.\n\nThe general usage is that you can specify a mapping between valid python identifiers\n(alphanumerical strings (and underscores) that don't start with a number) and\nfunctions. If instead of functions you specify a string, a ``factory`` comes\nin play to make a function based on your string.\nBy default, it will consider it as a console command and give you a function that\nruns it.\n\n    >>> import os\n    >>>\n    >>> c = Commands({\n    ...     'current_dir': 'pwd',\n    ...     'sys_listdir': 'ls -l',\n    ...     'listdir': os.listdir,\n    ...     'echo': Command('echo', egress=lambda x: print(x.decode().strip())),\n    ... })\n    >>>\n    >>> list(c)\n    ['current_dir', 'sys_listdir', 'listdir', 'echo']\n    >>> current_folder = c.current_dir()\n    >>> os.path.isdir(current_folder)\n    True\n    >>> b = c.sys_listdir()\n    >>> b[:40]  # doctest: +SKIP\n    b'total 56\\n-rw-r--r--@ 1 Thor.Whalen  staf'\n    >>> a_list_of_filenames = c.listdir()\n    >>> isinstance(a_list_of_filenames, list)\n    True\n    >>> c.echo('hello world')\n    hello world\n\nIf you don't specify any commands, it will gather all executable names it can find in\nyour local system (according to your ``PATH`` environment variable),\nmap those to valid python identifiers if needed, and use that.\n\nImportant: Note that finding executable in the ``PATH`` doesn't mean that it will\nwork, or is safe -- so use with care!\n\n    >>> c = Commands()\n    >>> assert len(c) > 0\n    >>> 'ls' in c\n    True\n\nYou can access the 'ls' command as a key or an attribute\n\n    >>> assert c['ls'] == c.ls\n\nYou can print the ``.help()`` (docs) of any command, or just get the help string:\n\n    >>> man_page = c.ls.help_str()\n\nLet's see if these docs have a few things we expect it to have for ``ls``:\n\n    >>> assert 'BSD General Commands Manual' in man_page\n    >>> assert 'list directory contents' in man_page\n\nLet's see what the output of ``ls`` gives us:\n\n    >>> output = c.ls('-la').decode()  # execute \"ls -la\"\n    >>> assert 'total' in output  # \"ls -l\" output usually starts with \"total\"\n    >>> assert '..' in output  # the \"-a\" flag includes '..' as a file\n\nNote that we needed to decode the output here.\nThat's because by default the output of a command will be captured in bytes.\nIf you want to apply a decoder to (attempt to) convert all outputs into strings,\nyou can specify a ``factory`` that will do this for you automatically.\n\nThe default ``factory`` is ``Command``, which  has a ``run``\nargument that defines how an instruction should be run. \nThe default of ``run`` is ``run_command``, which conveniently has an ``egress`` \nargument where you can specify a function to call on the output. \n\nSo one solution to define a ``Commands`` instance that will (attempt to) output \nstrings systematically is to do this:\n\n    >>> from functools import partial\n    >>> from ps.util import run\n    >>> run_and_cast_to_str = partial(run, egress=bytes.decode)\n    >>> factory = partial(Command, run=run_and_cast_to_str)\n    >>> cc = Commands(factory=factory)\n\nSo now we have:\n\n    >>> output = cc.ls('-la')\n    >>> isinstance(output, str)  # it's already decoded for us!\n    True\n\n# Notes\n\n## Auto docs\n\nTrying to figure out a robust way to get doc strings.\nUnfortunately, `man <command>` and `<command> --help` don't always exist,\nand the former isn't even always correct\n(i.e. linked to the same executable as what `which <command>` says)\n\nSee: https://stackoverflow.com/questions/73814043/universal-help-for-terminal-commands\n\n## Misc references\n\n[Tutorial on options for calling shell commands from python](https://janakiev.com/blog/python-shell-commands/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thorwhalen/ps",
    "keywords": "",
    "license": "apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ps",
    "package_url": "https://pypi.org/project/ps/",
    "platform": "any",
    "project_url": "https://pypi.org/project/ps/",
    "project_urls": {
      "Homepage": "https://github.com/thorwhalen/ps"
    },
    "release_url": "https://pypi.org/project/ps/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Call any available system command from python",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15216834,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67d07f244a3f50d2278360adbc13062175fd2b82d817c9bfb29697c62ecd0236",
          "md5": "7203fdeb6725cfc1fa4bfdc933ea9f65",
          "sha256": "5187a2837a9697d345e424ba0015316b1de221fea3924f6e541a524d89569fc0"
        },
        "downloads": -1,
        "filename": "ps-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7203fdeb6725cfc1fa4bfdc933ea9f65",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6015,
        "upload_time": "2021-01-06T05:18:20",
        "upload_time_iso_8601": "2021-01-06T05:18:20.008614Z",
        "url": "https://files.pythonhosted.org/packages/67/d0/7f244a3f50d2278360adbc13062175fd2b82d817c9bfb29697c62ecd0236/ps-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f9fd3e95fba7122f51302c84276a5a9cdd348cf105056a93b9e0e861c2238a9",
          "md5": "fa895730ffa7d6f98faade640c8c1bb8",
          "sha256": "691ad10767d13aebee6082f4b214bd9630e27a3e80c7138aba745b2cbb53bf26"
        },
        "downloads": -1,
        "filename": "ps-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fa895730ffa7d6f98faade640c8c1bb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1876,
        "upload_time": "2021-01-06T05:18:21",
        "upload_time_iso_8601": "2021-01-06T05:18:21.212738Z",
        "url": "https://files.pythonhosted.org/packages/7f/9f/d3e95fba7122f51302c84276a5a9cdd348cf105056a93b9e0e861c2238a9/ps-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "393f1f16a52f0dcb924e448df01e878a25b7126762a8c66db3dac0f8e1a5e79a",
          "md5": "4f046669d860f8cad20371342c732d72",
          "sha256": "a9fdacd2c82fe261369a355a00d686b72c05efdeae44e6bfd03b0ffa2d61aab6"
        },
        "downloads": -1,
        "filename": "ps-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f046669d860f8cad20371342c732d72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9790,
        "upload_time": "2022-09-22T12:08:54",
        "upload_time_iso_8601": "2022-09-22T12:08:54.462902Z",
        "url": "https://files.pythonhosted.org/packages/39/3f/1f16a52f0dcb924e448df01e878a25b7126762a8c66db3dac0f8e1a5e79a/ps-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79cef90948cf456f8d48c09c4e5d8f50229cc4ed4600e249627a28692bc7692d",
          "md5": "717b3bcbe99052b206f4f74dba325c4e",
          "sha256": "5d6937fe40ef886f205357bf75083c19c005a989a7d7093f6886ab34050210a9"
        },
        "downloads": -1,
        "filename": "ps-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "717b3bcbe99052b206f4f74dba325c4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9010,
        "upload_time": "2022-09-22T12:08:56",
        "upload_time_iso_8601": "2022-09-22T12:08:56.597704Z",
        "url": "https://files.pythonhosted.org/packages/79/ce/f90948cf456f8d48c09c4e5d8f50229cc4ed4600e249627a28692bc7692d/ps-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8990920b509396244bdc26d4b0648afce9e46a314b466f6347c52c3f175320d",
          "md5": "cdc4ec893fafe30f617f668f9df5e7f6",
          "sha256": "745db0f4a4218ce861e1b824a62b7d56dd2b588309fd8be56fee9e36f626e927"
        },
        "downloads": -1,
        "filename": "ps-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cdc4ec893fafe30f617f668f9df5e7f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15844,
        "upload_time": "2022-09-23T11:52:38",
        "upload_time_iso_8601": "2022-09-23T11:52:38.418201Z",
        "url": "https://files.pythonhosted.org/packages/c8/99/0920b509396244bdc26d4b0648afce9e46a314b466f6347c52c3f175320d/ps-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1defa4da3bd025beed6f08d3237ffa41dfe2c1afdeb4cecd0e6725e55a557ba8",
          "md5": "b9ca9475cf6f1f6ec169a6ea4e90a658",
          "sha256": "8586a31bdb31aaf355d9858bec347881f31f2b81f218d94987b87f922aab7e0f"
        },
        "downloads": -1,
        "filename": "ps-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b9ca9475cf6f1f6ec169a6ea4e90a658",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18748,
        "upload_time": "2022-09-23T11:52:40",
        "upload_time_iso_8601": "2022-09-23T11:52:40.463450Z",
        "url": "https://files.pythonhosted.org/packages/1d/ef/a4da3bd025beed6f08d3237ffa41dfe2c1afdeb4cecd0e6725e55a557ba8/ps-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81dce6f1b9be23dcddde47bd47d9b701971ef8ba5a15993142d31c899744324e",
          "md5": "6a0508df94b45197307aa670028e1f78",
          "sha256": "c4179cd76f772886ab6e5b21884023877422cf2eecbbcd92eec2c359b82a5083"
        },
        "downloads": -1,
        "filename": "ps-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a0508df94b45197307aa670028e1f78",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15900,
        "upload_time": "2022-09-23T12:00:31",
        "upload_time_iso_8601": "2022-09-23T12:00:31.172824Z",
        "url": "https://files.pythonhosted.org/packages/81/dc/e6f1b9be23dcddde47bd47d9b701971ef8ba5a15993142d31c899744324e/ps-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6b7fdb439be245664e11684dae9557051c90af20e63123ea2eb70f007a42644",
          "md5": "a01f7b0462fd32700d76aff1e984196b",
          "sha256": "ed268e032b16dae6e56f117f6adea77426d1087464d1ceae3c36631db60957cb"
        },
        "downloads": -1,
        "filename": "ps-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a01f7b0462fd32700d76aff1e984196b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18891,
        "upload_time": "2022-09-23T12:00:33",
        "upload_time_iso_8601": "2022-09-23T12:00:33.783291Z",
        "url": "https://files.pythonhosted.org/packages/d6/b7/fdb439be245664e11684dae9557051c90af20e63123ea2eb70f007a42644/ps-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f34814eaec86029ab4757f2a7a2768eaa0c584c109553b3af3f618368b3a443e",
          "md5": "328ead6653e256d42ee6cb0c06e0a193",
          "sha256": "5c19fcf566efc47524d295ed0e225abb39b9ab1bfde49ec7198a54e31cd548e2"
        },
        "downloads": -1,
        "filename": "ps-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "328ead6653e256d42ee6cb0c06e0a193",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15972,
        "upload_time": "2022-09-26T10:53:29",
        "upload_time_iso_8601": "2022-09-26T10:53:29.930245Z",
        "url": "https://files.pythonhosted.org/packages/f3/48/14eaec86029ab4757f2a7a2768eaa0c584c109553b3af3f618368b3a443e/ps-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90800ece1d03f30e3e5b552feda64e64d519ac5bdfa103ce48132e6ace2013f8",
          "md5": "0c1411e6b90f430cd546a754046f2f9c",
          "sha256": "3039af411b9669c13b36490d5408edfdf6ba0dff764ab863a6f0bcc0377d8a3e"
        },
        "downloads": -1,
        "filename": "ps-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0c1411e6b90f430cd546a754046f2f9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18917,
        "upload_time": "2022-09-26T10:53:36",
        "upload_time_iso_8601": "2022-09-26T10:53:36.783450Z",
        "url": "https://files.pythonhosted.org/packages/90/80/0ece1d03f30e3e5b552feda64e64d519ac5bdfa103ce48132e6ace2013f8/ps-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ecf6306dc309ac7bfae5b9e99329020efc9a63567e31b7027b7c0508991daf2",
          "md5": "817d0992e9b1cb91602130639f82af24",
          "sha256": "e3573fdb5c73c76ae1bac2ad0efdd1a56500fc3243d841595a7358d3b8c371cd"
        },
        "downloads": -1,
        "filename": "ps-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "817d0992e9b1cb91602130639f82af24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15047,
        "upload_time": "2022-09-26T15:43:37",
        "upload_time_iso_8601": "2022-09-26T15:43:37.744487Z",
        "url": "https://files.pythonhosted.org/packages/0e/cf/6306dc309ac7bfae5b9e99329020efc9a63567e31b7027b7c0508991daf2/ps-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ecf6306dc309ac7bfae5b9e99329020efc9a63567e31b7027b7c0508991daf2",
        "md5": "817d0992e9b1cb91602130639f82af24",
        "sha256": "e3573fdb5c73c76ae1bac2ad0efdd1a56500fc3243d841595a7358d3b8c371cd"
      },
      "downloads": -1,
      "filename": "ps-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "817d0992e9b1cb91602130639f82af24",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15047,
      "upload_time": "2022-09-26T15:43:37",
      "upload_time_iso_8601": "2022-09-26T15:43:37.744487Z",
      "url": "https://files.pythonhosted.org/packages/0e/cf/6306dc309ac7bfae5b9e99329020efc9a63567e31b7027b7c0508991daf2/ps-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}