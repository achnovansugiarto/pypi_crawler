{
  "info": {
    "author": "",
    "author_email": "Yuval Jacoby <jacobyyyuval@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Generic Segment Tree\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n![LicenseLink](https://img.shields.io/badge/license-MIT-blue.svg)\n\n\nA generic python3 implementation of segment tree and dual segment tree\ndata structures. The implementation is not only supporting generic inputs but\nalso supports non-commutative functions and non-commutative composition\nof functions.\n\nA segment tree is a data structure useful for storing items in a way\nwhich makes it easy to update individual elements and query for the cumulative\nvalue of applying a certain function to items' segments/intervals.\n\nA dual segment tree is a data structure useful for applying a series of \nfunctions on all items in a segment/interval individually, while also allowing\nto query for specific items.\n\n\n## How to use?\n\n#### Installation\n\nInstall using pip from the command line:\n`pip install seg-tree`\n\n#### Segment Tree\nAs seen below you can use arrays of any type and any binary-associative functions\n(even non-commutative like chars concatenation)\n\n```python\nfrom segment_tree import SegmentTree\n\n# ints with multiplication function\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nst = SegmentTree(items=arr, func=lambda x, y: x * y)\nst.update(item_id=3, new_val=9) # items' values after: [1, 2, 3, 9, 5, 6, 7, 8]\nst.query(left=0, right=2) # 6 (= 1 * 2 * 3)\nst.query(left=2, right=5) # 810 (= 3 * 9 * 5 * 6)\n\n# chars with concatenation function\narr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nst = SegmentTree(items=arr, func=lambda x, y: x + y)\nst.update(item_id=3, new_val='r')  # items' values after: ['a', 'b', 'c', 'r', 'e', 'f', 'g']\nst.query(left=0, right=2)  # \"abc\"\nst.query(left=2, right=5)  # \"cref\"\n```\n\n#### Dual Segment Tree\nAs seen below you can compose any associative series of unary functions\nand use arrays of any type\n\n```python\nfrom segment_tree import DualSegmentTree\n\n# Example with ints array\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nst = DualSegmentTree(arr)\nst.update(left=1, right=3, func=lambda x: x + 5) # items' values after: [1, 7, 8, 9, 5, 6, 7, 8]\nst.update(left=2, right=4, func=lambda x: -x) # items' values after: [1, 7, -8, -9, -5, 6, 7, 8]\nst.query(item_id=0) # 1\nst.query(item_id=3) # -9\n\n# Example with chars array\narr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\ndef concat_r(x): return x + 'r'\nst = DualSegmentTree(items=arr)\nst.update(left=3, right=5, func=concat_r) # items' values after: ['a', 'b', 'c', 'dr', 'er', 'fr', 'g']\nst.query(item_id=1) # \"b\"\nst.query(item_id=4) # \"er\"\n```\n\n\n## API and Time Complexity\nDenote `n` as the total number of elements in the array.\n\n#### Segment Tree\n\n| Function | Description | Time Complexity\n| ------ |---------|----------\n| `SegmentTree(items, func)` | Builds a segment tree from `items` with `func` as cumulative function  | O(n)        \n| `update(item_id, new_val)` | Updates an the content of item in `item_id` to `new_val`| O(log n)\n| `query(left, right)` | Returns the cumulative value of applying `func` to`[left, right]`| O(log n)\n\n\n#### Dual Segment Tree\n\n| Function | Description | Time Complexity\n| ------ |---------|----------\n| `DualSegmentTree(items)` | Builds a dual segment tree from `items` | O(n)        \n| `update(left, right, func)` | Apply `func` to each of the items in `[left, right]` individually| O(log n) Amortized\n| `query(item_id)` | Get the value of item with id=`item_id`| O(log n)\n\n\n## Further Explanation On The Algorithms\nThe segment tree creates an array that simulates a complete binary tree\nin which the leaves are the items of the input array. This tree is composed of\nroughly `2 * n - 1` nodes (in the case where n is not a power of 2, additional dummy\nleaves are added to maintain the complete binary tree structure).\n\nThe tree is taking advantage of the non-leaves nodes to store there values\nwhich will help it to perform actions on segments of the items without going\nall the way down to all of the items.\n\n### (Regular) Segment Tree\n\n**build** - Fill the leaves with the values from the input array and fill the\nrest of the tree applying the provided function on `(left_child, right_child)`.\n\n**update** - The tree updates the relevant leaf and its ancestors all the way\nup to the root.\n\n**query** - Here the idea is to start at the root of the tree and go down\nlooking for the `split_node`. The `split_node` is the lowest node in the tree\nthat all the requested query segment is contained in its dominating segment of leaves.\nAn example of a `split_node` is shown below, where the blue node is the split\nnode for the segment marked in black. \n<br>\n<p align=center>\n<img src=\"https://github.com/jyuv/segment_tree/raw/main/assets/split_node.png?raw=true\">\n</p>\n<br>\n\nFrom the `split_node` the algorithm takes 2 tours - one to each of the children of `split_node`.\nTaking the left tour it goes to the left child of `split_node`. Looking at the\nleft child of `split_node` there are 3 options:\n\n1. The dominating segment of `split_node.left` is contained within the requested \nquery segment. In this, case the tour is ending with `split_node.left.val`.\n<br>\n<p align=center>\n<img src=\"https://github.com/jyuv/segment_tree/raw/main/assets/case_contained.png?raw=true\">\n</p>\n<br>\n\n2. The dominating segment of `split_node.left.left` intersects with the requested\nquery segment. This means that the whole dominating segment of `split_node.left.right`\nis contained within the query segment, so all of its leaves descendants are relevant.\nTherefore `split_node.left.right.val` is memorized aside and the tour continues to \n`split_node.left.left` which will result in some arbitrary value `left_val`. The algorihm\nthan returns `func(left_val, split_node.left.right.val)` as the left tour's result.\n<br>\n<p align=center>\n<img src=\"https://github.com/jyuv/segment_tree/raw/main/assets/case_left_intersects.png?raw=true\">\n</p>\n<br>\n\n3. The dominating segment of `split_node.left.left` **doesn't** intersects with the requested\nquery segment. This means the tour can be continued to `split_node.left.right`\nand return the result of it as the result of the whole left tour.\n<br>\n<p align=center>\n<img src=\"https://github.com/jyuv/segment_tree/raw/main/assets/case_left_not_intersects.png?raw=true\">\n</p>\n<br>\n\nThe right tour is done similarly and it returns `func(left_tour_result, right_tour_result)` \n\nThis whole method maintains narrow routes, not spreading to many allies, which helps\nkeep the time complexity low.\n\n### Dual Segment Tree\n\n**build** - Fill the leaves with the values from the input array and fill the\nrest of the tree with the identity function.\n\n**query** - Start from the relevant leaf and go up to the root composing the\nfunctions on the way one over the others.\n\n**update** - Works similarly to the SegmentTree's query. There is an additional\ntweak here to allow non-commutative series of functions composition (cases where\n`f(g(x)) != g(f(x))`). To achieve this it does as follows: during the update,\non the way down from the root the non-identity it functions it meets on the way are pushed\ndownwards to their children. An illustration of this in a simple case is shown below.\n\n<br>\n<p align=center>\n<img src=\"https://github.com/jyuv/segment_tree/raw/main/assets/giffy.gif?raw=true\">\n</p>\n<br>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "data structure,segment,tree,graphs,interval,range,query",
    "license": "MIT License Copyright (c) 2022 jyuv Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "seg-tree",
    "package_url": "https://pypi.org/project/seg-tree/",
    "platform": null,
    "project_url": "https://pypi.org/project/seg-tree/",
    "project_urls": {
      "Homepage": "https://github.com/jyuv/segment-tree"
    },
    "release_url": "https://pypi.org/project/seg-tree/0.1/",
    "requires_dist": [
      "black ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": ">=3",
    "summary": "A generic segment tree and dual segment tree",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15437154,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5df08331c28ff1eb00f57abcadd76e3c9b0d73c6d4d3df36654aef3924d626d0",
          "md5": "67764626efe1e0695c4e975cc80f1bb4",
          "sha256": "d7a70f27e5aa6df674de74f2bd1bb1d5cb3fadf0f1fbc265176cf11364454d79"
        },
        "downloads": -1,
        "filename": "seg_tree-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67764626efe1e0695c4e975cc80f1bb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 9252,
        "upload_time": "2022-10-17T14:16:51",
        "upload_time_iso_8601": "2022-10-17T14:16:51.745951Z",
        "url": "https://files.pythonhosted.org/packages/5d/f0/8331c28ff1eb00f57abcadd76e3c9b0d73c6d4d3df36654aef3924d626d0/seg_tree-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7d6c9fcb5395eb2356eadbc4d11a840f15100122c5756bbee9a5f73cacc500d",
          "md5": "7980f2d187d9da3d505b8aac19d73d1b",
          "sha256": "f2d6841e9129b56cf025851a11c9c8ff4285b3c03edb373d03102eed07d870f4"
        },
        "downloads": -1,
        "filename": "seg-tree-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7980f2d187d9da3d505b8aac19d73d1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7567,
        "upload_time": "2022-10-17T14:16:53",
        "upload_time_iso_8601": "2022-10-17T14:16:53.477019Z",
        "url": "https://files.pythonhosted.org/packages/a7/d6/c9fcb5395eb2356eadbc4d11a840f15100122c5756bbee9a5f73cacc500d/seg-tree-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5df08331c28ff1eb00f57abcadd76e3c9b0d73c6d4d3df36654aef3924d626d0",
        "md5": "67764626efe1e0695c4e975cc80f1bb4",
        "sha256": "d7a70f27e5aa6df674de74f2bd1bb1d5cb3fadf0f1fbc265176cf11364454d79"
      },
      "downloads": -1,
      "filename": "seg_tree-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67764626efe1e0695c4e975cc80f1bb4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 9252,
      "upload_time": "2022-10-17T14:16:51",
      "upload_time_iso_8601": "2022-10-17T14:16:51.745951Z",
      "url": "https://files.pythonhosted.org/packages/5d/f0/8331c28ff1eb00f57abcadd76e3c9b0d73c6d4d3df36654aef3924d626d0/seg_tree-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7d6c9fcb5395eb2356eadbc4d11a840f15100122c5756bbee9a5f73cacc500d",
        "md5": "7980f2d187d9da3d505b8aac19d73d1b",
        "sha256": "f2d6841e9129b56cf025851a11c9c8ff4285b3c03edb373d03102eed07d870f4"
      },
      "downloads": -1,
      "filename": "seg-tree-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7980f2d187d9da3d505b8aac19d73d1b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 7567,
      "upload_time": "2022-10-17T14:16:53",
      "upload_time_iso_8601": "2022-10-17T14:16:53.477019Z",
      "url": "https://files.pythonhosted.org/packages/a7/d6/c9fcb5395eb2356eadbc4d11a840f15100122c5756bbee9a5f73cacc500d/seg-tree-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}