{
  "info": {
    "author": "RakGyu Song",
    "author_email": "reeoss@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=====================\nI'mport; REST Client\n=====================\n\n.. image:: https://travis-ci.org/james-song/iamport-rest-client-python3.svg?branch=master\n    :target: https://travis-ci.org/james-song/iamport-rest-client-python3\n\n.. image:: https://codecov.io/gh/james-song/iamport-rest-client-python3/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/james-song/iamport-rest-client-python3\n\n\nPython3 사용자를 위한 아임포트 REST API 연동 모듈입니다.\n\n* 이용 중 발생한 문제에 대해 책임지지 않습니다.\n* `Iamport 공식 라이브러리 <https://github.com/iamport/iamport-rest-client-python>`_ 가 관리되지 않아 포크하여 만들었습니다\n\n설치\n=======\n\n.. code-block:: shell\n\n    pip install iamport-rest-client2\n\n\n기능\n======\n1. 결제 정보 찾기\n2. 가격 확인\n3. 취소\n4. 비 인증 결제\n5. 정기 예약 결제\n6. 결제 없이 카드정보 등록\n\n\n사용법\n=======\n\n준비\n------\n\n사용하기 위해 객체를 만듭니다.\n\n.. code-block:: python\n\n    from iamport import Iamport\n\n    # 테스트 용\n    iamport = Iamport(imp_key='{테스트용 키}', imp_secret='{테스트 시크릿}')\n    # 테스트용 키와 시크릿은 tests/conftest.py 파일에 DEFAULT_TEST_IMP_KEY, DEFAULT_TEST_IMP_SECRET를 참고하세요.\n\n    # 실제 상점 정보\n    iamport = Iamport(imp_key='{발급받은 키}', imp_secret='{발급받은 시크릿}')\n\n\n\n찾기\n------\n\n결제를 진행한 상품 아이디나, 전달받은 IMP 아이디를 이용해 결제 정보를 찾습니다.\n\n.. code-block:: python\n\n    # 상품 아이디로 조회\n    response = iamport.find(merchant_uid='{상품 아이디}')\n\n    # I'mport; 아이디로 조회\n    response = iamport.find(imp_uid='{IMP UID}')\n\n\n가격 확인\n----------\n\n실제 제품 가격과 결제된 가격이 같은지 확인합니다.\n\n.. code-block:: python\n\n    # 상품 아이디로 확인\n    iamport.is_paid(product_price, merchant_uid='{상품 아이디}')\n\n    # I'mport; 아이디로 확인\n    iamport.is_paid(product_price, imp_uid='{IMP UID}')\n\n    # 이미 찾은 response 재활용하여 확인\n    iamport.is_paid(product_price, response=response)\n\n\n취소\n------\n\n결제를 취소합니다.\n\n.. code-block:: python\n\n    # 상품 아이디로 취소\n    response = iamport.cancel(u'취소하는 이유', merchant_uid='{상품 아이디}')\n\n    # I'mport; 아이디로 취소\n    response = iamport.cancel(u'취소하는 이유', imp_uid='{IMP UID}')\n\n    # 취소시 오류 예외처리(이미 취소된 결제는 에러가 발생함)\n    try:\n        response = iamport.cancel(u'취소하는 이유', imp_uid='{IMP UID}')\n    except Iamport.ResponseError as e:\n        print e.code\n        print e.message  # 에러난 이유를 알 수 있음\n    except Iamport.HttpError as http_error:\n        print http_error.code\n        print http_error.reason # HTTP not 200 에러난 이유를 알 수 있음\n\n비인증 결제\n-------------\n\n1회성 비인증 결제를 진행합니다.\n\n.. code-block:: python\n\n    # 테스트용 값\n    payload = {\n        'merchant_uid': '00000000',\n        'amount': 5000,\n        'card_number': '4092-0230-1234-1234',\n        'expiry': '2019-03',\n        'birth': '500203',\n        'pwd_2digit': '19'\n    }\n    try:\n        response = iamport.pay_onetime(**payload)\n    except KeyError:\n        # 필수 값이 없을때 에러 처리\n        pass\n    except Iamport.ResponseError as e:\n        # 응답 에러 처리\n        pass\n    except Iamport.HttpError as http_error:\n        # HTTP not 200 응답 에러 처리\n        pass\n\n저장된 빌링키로 재결제합니다.\n\n.. code-block:: python\n\n    # 테스트용 값\n    payload = {\n        'customer_uid': '{고객 아이디}',\n        'merchant_uid': '00000000',\n        'amount': 5000,\n    }\n    try:\n        response = iamport.pay_again(**payload)\n    except KeyError:\n        # 필수 값이 없을때 에러 처리\n        pass\n    except Iamport.ResponseError as e:\n        # 응답 에러 처리\n        pass\n    except Iamport.HttpError as http_error:\n        # HTTP not 200 응답 에러 처리\n        pass\n\n정기 예약 결제\n----------------\n\n정기 결제를 예약합니다.\n\n.. code-block:: python\n\n    # 테스트용 값\n    payload = {\n        'customer_uid': '{고객 아이디}',\n        'schedules': [\n            {\n                'merchant_uid': 'test_merchant_01',\n                # UNIX timestamp\n\t        'schedule_at': 1478150985,\n\t        'amount': 1004\n            },\n            {\n                'merhcant_uid': 'test_merchant_02',\n\t        # UNIX timestamp\n\t        'schedule_at': 1478150985,\n\t        'amount': 5000,\n\t        'name': '{주문명}',\n\t        'buyer_name': '{주문자명}',\n\t        'buyer_email': '{주문자 이메일}',\n\t        'buyer_tel': '{주문자 전화번호}',\n\t        'buyer_addr': '{주문자 주소}',\n\t        'buyer_postcode': '{주문자 우편번호}',\n            },\n        ]\n    }\n    try:\n        reponse = iamport.pay_schedule(**payload)\n    except KeyError:\n        # 필수 값이 없을때 에러 처리\n        pass\n    except Iamport.ResponseError as e:\n        # 응답 에러 처리\n        pass\n    except Iamport.HttpError as http_error:\n        # HTTP not 200 응답 에러 처리\n        pass\n\n정기 결제 예약을 취소합니다.\n\n.. code-block:: python\n\n    # 테스트용 값 (merchant_uid 가 누락되면 customer_uid 에 대한 결제예약정보 일괄취소)\n    payload = {\n        'customer_uid': '{고객 아이디}',\n        'merchant_uid': 'test_merchant_01',\n    }\n    try:\n        response = iamport.pay_unschedule(**payload)\n    except KeyError:\n        # 필수 값이 없을때 에러 처리\n        pass\n    except Iamport.ResponseError as e:\n        # 응답 에러 처리\n        pass\n    except Iamport.HttpError as http_error:\n        # HTTP not 200 응답 에러 처리\n        pass\n\n결제 사전 검증\n----------------\n\n결제될 내역에 대한 사전정보를 등록합니다\n\n.. code-block:: python\n\n    # 테스트용 값\n    amount = 12000\n    mid = 'merchant_test'\n    try:\n        response = iamport.prepare(amount=amount, merchant_uid=mid)\n    except Iamport.ResponseError as e:\n        # 응답 에러 처리\n        pass\n    except Iamport.HttpError as http_error:\n        # HTTP not 200 응답 에러 처리\n        pass\n\n등록된 사전정보를 확인합니다\n\n.. code-block:: python\n\n    # 테스트용 값\n    amount = 12000\n    mid = 'merchant_test'\n    try:\n        result = iamport.prepare_validate(merchant_uid=mid, amount=amount)\n    except Iamport.ResponseError as e:\n        # 응답 에러 처리\n        pass\n    except Iamport.HttpError as http_error:\n        # HTTP not 200 응답 에러 처리\n        pass\n\n\n카드정보 등록\n----------------\n\n결제 없이 카드 정보를 등록합니다\n\n.. code-block:: python\n\n    # 테스트용 값\n    payload = {\n        'customer_uid': '{고객 아이디}',\n        'card_number': '4092-0230-1234-1234',\n        'expiry': '2019-03',\n        'birth': '500203',\n        'pwd_2digit': '19' # 법인일땐 생략 가능\n    }\n    try:\n        response = iamport.customer_create(**payload)\n    except Iamport.ResponseError as e:\n        # 응답 에러 처리\n        pass\n    except Iamport.HttpError as http_error:\n        # HTTP not 200 응답 에러 처리\n        pass\n\n등록된 카드 정보(=빌링키)를 요청합니다\n\n.. code-block:: python\n\n    # 테스트용 값\n    customer_uid = '{고객 아이디}'\n    try:\n        response = iamport.customer_get(customer_uid)\n    except Iamport.ResponseError as e:\n        # 응답 에러 처리\n        pass\n    except Iamport.HttpError as http_error:\n        # HTTP not 200 응답 에러 처리\n        pass\n\n\n구매자의 빌링키 정보를 삭제 합니다\n\n.. code-block:: python\n\n    # 테스트용 값\n    customer_uid = '{고객 아이디}'\n    try:\n        response = iamport.customer_delete(customer_uid)\n    except Iamport.ResponseError as e:\n        # 응답 에러 처리\n        pass\n    except Iamport.HttpError as http_error:\n        # HTTP not 200 응답 에러 처리\n        pass\n\n\n개발환경 및 테스트 설정\n==========================\nmacOS 기준\n\n.. code-block:: bash\n\n    pip install -r requirements.txt\n    pytest\n\n\n할 일\n======\n- 결제 목록 읽기\n- 문서화\n- 기타 등등",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/james-song/iamport-rest-client-python3",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iamport-rest-client2",
    "package_url": "https://pypi.org/project/iamport-rest-client2/",
    "platform": "",
    "project_url": "https://pypi.org/project/iamport-rest-client2/",
    "project_urls": {
      "Homepage": "https://github.com/james-song/iamport-rest-client-python3"
    },
    "release_url": "https://pypi.org/project/iamport-rest-client2/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "REST client for I'mport;(http://www.iamport.kr)",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4290840,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4649df13a9e566ede1b53466e49f482efe40cb4d38deb5bc60cb20bdee7f578d",
          "md5": "b3b977d3d5a7d999e7c88b81b4ab0ebc",
          "sha256": "2ff54c655a9b3f800141ef0bf28a685ed74a85d0e1f19329f06d1b31d1c199b7"
        },
        "downloads": -1,
        "filename": "iamport-rest-client2-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b3b977d3d5a7d999e7c88b81b4ab0ebc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8321,
        "upload_time": "2018-07-12T14:41:57",
        "upload_time_iso_8601": "2018-07-12T14:41:57.791538Z",
        "url": "https://files.pythonhosted.org/packages/46/49/df13a9e566ede1b53466e49f482efe40cb4d38deb5bc60cb20bdee7f578d/iamport-rest-client2-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c987a8ad9b81c5d45c5dfddee391abf13dc45c8711a94b4b5ac318a98f3b668",
          "md5": "241ebab619638d810d29837404e2a167",
          "sha256": "764bb62ec29734848a8d774bdbc8b5a0bb6af825be2a4643a8840a57bb3adba3"
        },
        "downloads": -1,
        "filename": "iamport-rest-client2-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "241ebab619638d810d29837404e2a167",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8720,
        "upload_time": "2018-09-20T00:56:16",
        "upload_time_iso_8601": "2018-09-20T00:56:16.750158Z",
        "url": "https://files.pythonhosted.org/packages/5c/98/7a8ad9b81c5d45c5dfddee391abf13dc45c8711a94b4b5ac318a98f3b668/iamport-rest-client2-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c987a8ad9b81c5d45c5dfddee391abf13dc45c8711a94b4b5ac318a98f3b668",
        "md5": "241ebab619638d810d29837404e2a167",
        "sha256": "764bb62ec29734848a8d774bdbc8b5a0bb6af825be2a4643a8840a57bb3adba3"
      },
      "downloads": -1,
      "filename": "iamport-rest-client2-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "241ebab619638d810d29837404e2a167",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8720,
      "upload_time": "2018-09-20T00:56:16",
      "upload_time_iso_8601": "2018-09-20T00:56:16.750158Z",
      "url": "https://files.pythonhosted.org/packages/5c/98/7a8ad9b81c5d45c5dfddee391abf13dc45c8711a94b4b5ac318a98f3b668/iamport-rest-client2-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}