{
  "info": {
    "author": "Mohammad ABouali",
    "author_email": "maboualidev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![CircleCI](https://circleci.com/gh/maboualidev/TimeAxis.svg?style=svg)](https://circleci.com/gh/maboualidev/TimeAxis)\n[![codecov](https://codecov.io/gh/maboualidev/TimeAxis/branch/master/graph/badge.svg)](https://codecov.io/gh/maboualidev/TimeAxis)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3530859.svg)](https://doi.org/10.5281/zenodo.3530859)\n\n\n\n# TimeAxis\nManages Time Axis and different operations related to time. Main focus is on Earth Science Data.\nThe main goal of this package is to provide a unified mechanism to convert/transform date from \ntime axis to another. For example, if your original data set is on a daily basis, and you want \nto convert it to weekly average, `TimeAxis` package would be handy. This package follows the\nsame concept as in ESMF and SCRIPS. Although these two packages are for spatial coordinate\ninterpolation, `TimeAxis`, obviously, deals with the time dimension of the data. It calculates\na weight matrix stored as sparse matrix. Once you have the weights, any data field could be\nconverted from the original time axis to the provided destination time axis.\n\n# How To Install\n## using pip\nas usual, you could use `pip` installation as follows:\n\n```shell script\npip install timeaxis\n```\n\n# Examples:\n## Daily data averaged to weekly\nIn this example, first we create a daily time-axis of length 14 days, i.e. we just have 14 data points\nalong the time axis:\n\n```python\nfrom_axis = DailyTimeAxisBuilder(\n    start_date=date(2019, 1, 1),\n    n_interval=14\n).build()\n```\n\nNow we create a weekly time-axis of length 3, i.e. the time axis would have three elements with\nspan of 3 weeks:\n\n```python\nto_axis = WeeklyTimeAxisBuilder(\n    start_date=date(2019, 1, 1),\n    n_interval=3\n).build()\n```\n\nnow we create a time axis converter object, as follows:\n\n```python\ntc = TimeAxisConverter(\n    from_time_axis=from_axis, \n    to_time_axis=to_axis\n)\n```\n\nNow we can use `tc` to convert data from the `from_axis` to `to_axis`, as follows:\n\n```python\nto_data = tc.average(from_data)\n```\n\nthe resulting `to_data` is the weekly average of the `from_data`. By default, we are assuming\nthat the first dimension is the time dimension. If the time dimension is not the first dimension,\nyou could define it as the following:\n\n```python\nto_data = tc.average(from_data, time_dimension=n)\n```\n\nwhere `n` is the time dimension.\n\n# Rolling/moving weekly avarage\nYou could easily calculate a rolling or moving average of your data. Here is an example:\n\n```python\nfrom_axis = DailyTimeAxisBuilder(\n    start_date=date(2019, 1, 1),\n    n_interval=14\n).build()\n\nto_axis = RollingWindowTimeAxisBuilder(\n    start_date=date(2019, 1, 1),\n    end_date=date(2019, 1, 15),\n    window_size=7\n).build()\n\ntc = TimeAxisConverter(from_time_axis=from_axis, to_time_axis=to_axis)\n\nto_data = tc.average(from_data)\n```\n\nas you can see, the only difference is the construction og the `to_axis`. In this example,\nwe are building a rolling time axis that starts on `Jan. 1st, 2019` and ends on `Jan. 15th, 2019`\nwith a window size of `7`. Since the base time delta, if not provided, is one day, our window is\none week (`7 * 1day`). However, this is a rolling time axis, meaning that the next element on \ntime axis is shifted only one day. Yes, the intervals in the time-axis overlap each other.\n\n## Daily Averaged to Monthly\n\n```python\n# Daily time axis spanning ten years.\nfrom_axis = DailyTimeAxisBuilder(\n    start_date=date(2010, 1, 1),\n    end_date=date(2020, 1, 1)\n).build()\n\n# Monthly Time Axis spanning 10 years.\nto_axis = MonthlyTimeAxisBuilder(\n    start_year=2010,\n    end_year=2019,\n).build()\n\ntc = TimeAxisConverter(from_time_axis=from_axis, to_time_axis=to_axis)\nmonthly_avg = tc.average(daily_data)\n```\n\nif you do not provide any month, the start month is assumed to be the January and the end month is assumed to be\nthe December. If you want to control that you could pass the `start_month` and/or `end_month` to change this\nbehavior:\n\n```python\nto_axis = MonthlyTimeAxisBuilder(\n    start_year=2010,\n    start_monnth=4,\n    end_year=2019,\n    end_month=10\n).build()\n```\n\n# Authors:\n- Abouali, Mohammad (maboualidev@gmail.com; mabouali@ucar.edu)\n- Banihirwe, Anderson (abanihi@ucar.edu)\n- Long, Matthew (mclong@ucar.edu)\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maboualidev/TimeAxis",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "TimeAxis",
    "package_url": "https://pypi.org/project/TimeAxis/",
    "platform": "",
    "project_url": "https://pypi.org/project/TimeAxis/",
    "project_urls": {
      "Homepage": "https://github.com/maboualidev/TimeAxis"
    },
    "release_url": "https://pypi.org/project/TimeAxis/19.11.7.59750/",
    "requires_dist": [
      "numpy",
      "cftime",
      "scipy",
      "numba"
    ],
    "requires_python": ">=3.7",
    "summary": "",
    "version": "19.11.7.59750",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6096433,
  "releases": {
    "19.11.7.59750": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7bf040c9fc32676f5e0625d0566c49c5d1ebb59ab94d7b8c7af5265190837aa",
          "md5": "80a5e43179372c1ac637173838c0a154",
          "sha256": "b211092b36241a1599e4506a4d43b61ba3195795b86b9d3bb58e47dd852b7c7b"
        },
        "downloads": -1,
        "filename": "TimeAxis-19.11.7.59750-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80a5e43179372c1ac637173838c0a154",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23964,
        "upload_time": "2019-11-07T23:35:57",
        "upload_time_iso_8601": "2019-11-07T23:35:57.389916Z",
        "url": "https://files.pythonhosted.org/packages/c7/bf/040c9fc32676f5e0625d0566c49c5d1ebb59ab94d7b8c7af5265190837aa/TimeAxis-19.11.7.59750-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5e0bf4567a41487c73cacee8fad6675daeda0ec4cdf97b99bdeccc4462234a9",
          "md5": "06297fe62fc32f49a4aa3a72e11ac2d7",
          "sha256": "3657bfb71013dfd30afd14bcb105145687e7ad187d5f00617b085e1c637340eb"
        },
        "downloads": -1,
        "filename": "TimeAxis-19.11.7.59750.tar.gz",
        "has_sig": false,
        "md5_digest": "06297fe62fc32f49a4aa3a72e11ac2d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16124,
        "upload_time": "2019-11-07T23:35:59",
        "upload_time_iso_8601": "2019-11-07T23:35:59.036289Z",
        "url": "https://files.pythonhosted.org/packages/b5/e0/bf4567a41487c73cacee8fad6675daeda0ec4cdf97b99bdeccc4462234a9/TimeAxis-19.11.7.59750.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7bf040c9fc32676f5e0625d0566c49c5d1ebb59ab94d7b8c7af5265190837aa",
        "md5": "80a5e43179372c1ac637173838c0a154",
        "sha256": "b211092b36241a1599e4506a4d43b61ba3195795b86b9d3bb58e47dd852b7c7b"
      },
      "downloads": -1,
      "filename": "TimeAxis-19.11.7.59750-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "80a5e43179372c1ac637173838c0a154",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 23964,
      "upload_time": "2019-11-07T23:35:57",
      "upload_time_iso_8601": "2019-11-07T23:35:57.389916Z",
      "url": "https://files.pythonhosted.org/packages/c7/bf/040c9fc32676f5e0625d0566c49c5d1ebb59ab94d7b8c7af5265190837aa/TimeAxis-19.11.7.59750-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5e0bf4567a41487c73cacee8fad6675daeda0ec4cdf97b99bdeccc4462234a9",
        "md5": "06297fe62fc32f49a4aa3a72e11ac2d7",
        "sha256": "3657bfb71013dfd30afd14bcb105145687e7ad187d5f00617b085e1c637340eb"
      },
      "downloads": -1,
      "filename": "TimeAxis-19.11.7.59750.tar.gz",
      "has_sig": false,
      "md5_digest": "06297fe62fc32f49a4aa3a72e11ac2d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16124,
      "upload_time": "2019-11-07T23:35:59",
      "upload_time_iso_8601": "2019-11-07T23:35:59.036289Z",
      "url": "https://files.pythonhosted.org/packages/b5/e0/bf4567a41487c73cacee8fad6675daeda0ec4cdf97b99bdeccc4462234a9/TimeAxis-19.11.7.59750.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}