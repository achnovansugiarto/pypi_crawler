{
  "info": {
    "author": "Gbitur",
    "author_email": "theemosunrise@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# voltOTG\nPython class to interface with a USB volt meter named voltOTG\n\n\n# Background\nWhile surfing online I spotted a [15$ volt meter](https://pcsensor.com/android-thermometer/mobile-phone-voltmeter-voltotg.html) called \"voltOTG\" from china that connects to a smartphone, I thought it sounded fun and ordered it.\n\nWhen I got it I started playing with it in the android app and saw some potential for use with for example a raspberry pi for logging voltages. So I reversed engineered the usb communications and wrote them up as a python class\n\n\n# How to use\n\n## Basic\n\n### Automatically connect to the voltOTG reader \n```python\nimport voltotg\nreader = voltotg.voltOTG()\nreader.autoConnect()\n```\n\n### Manually connect \n```python\nimport voltotg\nreader = voltotg.voltOTG()\nreader.connectDevice(\"/dev/tt...\")\n```\n\n### Reading and printing the voltage every 10 seconds \n```python\nimport voltotg\nfrom time import sleep\nreader = voltotg.voltOTG()\nreader.autoConnect()\nwhile True:\n  volts = reader.reatVolt()\n  print(volts)\n  sleep(10)\n```\n\n### Execute serial command (basic)\n```python\nimport voltotg\nreader = voltotg.voltOTG()\nreader.autoConnect()\ncommand = \"ReadVersion\"\nreply = reader.bcom(command)\nprint(reply)\n```\n\n### Execute serial command (With empty reply fail-safe*)\n```python\nimport voltotg\nreader = voltotg.voltOTG()\nreader.autoConnect()\ncommand = \"ReadVersion\"\nreply = reader.scom(command)\nprint(reply)\n```\n\n\n## Commands avaivable within voltOTG\n\n\n| voltOTG command | serial command|Explination |\n| -------------   | ------------- | ------------- |\n| scom (command)  | N/A           | Executes a serial command, returns the reply, even if empty |\n| bcom (command)  | N/A           | Executes a serial command, retries if the reply is empty. Returns the reply or error|\n| connectDevice(devicePath) | N/A | Attemps to connect to a specified device |\n| findDevice()   | N/A            | Looks for a voltOTG device by matching the VID:PID | \n| autoConnect()  | N/A            | Runs findDevice() and uses the reply to connectDevice() |\n| getVersion(none,list,version,name) (1) | ReadVersion | Returns the device version, by default it returns just the version |\n| readVolt(none,list,voltage,info,raw) (2) | ReadVolt | Only returns the voltage read by the device by default |\n| readScale(none,list,scale,calib,raw) (3) | ReadScale | Only returns the scale value by default |\n| setScale(float,int) | SetScale:int,float> | Sets the scale value, whatever that is  |\n| readPga() | ReadPga | Returns the PGA, not that I have any idea what it does | \n| setPga(1,2,4,9) | SetPga:int>\" | Sets the PGA, which does something I assume | \n| readMode() | ReadMode | Returns the mode version|\n| setMode(0,1) | SetMode:int> | Sets the mode, if only I had any idea what the modes are|\n\n\n(1): getVersion() will return the version number, getVersion(list=True) will provide both version and name, getVersion(name=True) will return the name only, getVersion(version=True) will do the same as providing no argument\n\n(2):readVolt() will return a voltage reading in mV, readVolt(list=True) will provide more info from the command, readVolt(raw=True) will return the raw reply from the device, readVolt(info=True) returns a weird one-off inside-the-code documentation, readVolt(\"voltage=True\") does the same as no arguments,  \n\n(3) readScale() will return the scale value, readScale(list=True) will return a list of scale and calib, readScale(raw=True) will return the raw reply from the device, readScale(calib=True) will return the calib value, readScale(scale=True) does the same as providing no argument\n\n## Commands on device not in voltOTG\n\nDue to me having no idea how to handle consistant data streams the first 2 commands were not implemented in the package, the last one was simply left out since I thought it was a bad idea to implement an automatic Zero-ing function, not sure if I agree with that anymore though ........\n\n| Command | Explination |\n| -------| -------------- | \n| SetAutoSend:1> | Activates a command that causes the device to send about 1 volt reading per second until it is told to stop |\n| SetAutoSend:0> | Deactivates the AutoSend feature of the device \n| SetZero | Causes the device to take the current reading and set it as the zero point for future reads. \"reader.bcom(\"SetZero\") would run this command  |",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gbit-is/voltOTG",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "voltOTG",
    "package_url": "https://pypi.org/project/voltOTG/",
    "platform": "",
    "project_url": "https://pypi.org/project/voltOTG/",
    "project_urls": {
      "Homepage": "https://github.com/gbit-is/voltOTG"
    },
    "release_url": "https://pypi.org/project/voltOTG/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A package to communicate with the voltOTG usb volt-meter",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6458257,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05355c3badeeff162b79f279bd15f67d8064403ed0bd04fd0b9c86803d0f0402",
          "md5": "b384aa67ba3212841366e51950076d2a",
          "sha256": "ff85c7a61d45746278a30e246644182f9ac5392c28febf9a9e488aae78cccd4e"
        },
        "downloads": -1,
        "filename": "voltOTG-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b384aa67ba3212841366e51950076d2a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8612,
        "upload_time": "2020-01-15T12:08:20",
        "upload_time_iso_8601": "2020-01-15T12:08:20.194779Z",
        "url": "https://files.pythonhosted.org/packages/05/35/5c3badeeff162b79f279bd15f67d8064403ed0bd04fd0b9c86803d0f0402/voltOTG-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64f82b0b87fdbf13ffa51604bb28c68e74806e097c12a15df05660bb9e143091",
          "md5": "32728730ea0a932ff0faf3267c90573b",
          "sha256": "c1543ff3e71f2f0407c53af52cdd5df25cb9995e1fccd8ad0ad03eddb176fa02"
        },
        "downloads": -1,
        "filename": "voltOTG-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "32728730ea0a932ff0faf3267c90573b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4419,
        "upload_time": "2020-01-15T12:08:22",
        "upload_time_iso_8601": "2020-01-15T12:08:22.415168Z",
        "url": "https://files.pythonhosted.org/packages/64/f8/2b0b87fdbf13ffa51604bb28c68e74806e097c12a15df05660bb9e143091/voltOTG-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad91afd81f7f5e92269e4cdab8e62bf6954679b850c3013d2e2085506e4bd3d3",
          "md5": "5aee6f0975a0476926193c7e76ec6b5c",
          "sha256": "8ed594599770146f38f324ff7bba1c69c02a65346412c87f83a48498e6e5faf9"
        },
        "downloads": -1,
        "filename": "voltOTG-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5aee6f0975a0476926193c7e76ec6b5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4425,
        "upload_time": "2020-01-15T12:24:57",
        "upload_time_iso_8601": "2020-01-15T12:24:57.729398Z",
        "url": "https://files.pythonhosted.org/packages/ad/91/afd81f7f5e92269e4cdab8e62bf6954679b850c3013d2e2085506e4bd3d3/voltOTG-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad91afd81f7f5e92269e4cdab8e62bf6954679b850c3013d2e2085506e4bd3d3",
        "md5": "5aee6f0975a0476926193c7e76ec6b5c",
        "sha256": "8ed594599770146f38f324ff7bba1c69c02a65346412c87f83a48498e6e5faf9"
      },
      "downloads": -1,
      "filename": "voltOTG-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5aee6f0975a0476926193c7e76ec6b5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4425,
      "upload_time": "2020-01-15T12:24:57",
      "upload_time_iso_8601": "2020-01-15T12:24:57.729398Z",
      "url": "https://files.pythonhosted.org/packages/ad/91/afd81f7f5e92269e4cdab8e62bf6954679b850c3013d2e2085506e4bd3d3/voltOTG-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}