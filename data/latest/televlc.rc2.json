{
  "info": {
    "author": "Emiliano Romero Carranza",
    "author_email": "romerocarranzaemiliano@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# televlc\n\n\n```go\n                                                      ######                 \n                                                ##################           \n             ###                                ##    #############          \n            #####                               ###################          \n           #######                                       ##########          \n          ********                     ############################  ****** \n         ***********                  ############################# *********\n        ##*********##                ##############################  *********\n       ###############   <-------->  ############                 *************\n      *##############*                #########   *****************************\n     *******************               ######### *****************************\n     *******************                ######## ***************************  \n ####******************####                     *********                    \n########***********#########                    *******************          \n############################                    *************    **          \n############################                     *****************\n                                                      *******\n```\n\nPython library to control [VLC media player](https://www.videolan.org/vlc/index.es.html) via telnet protocol\n\n\n## Installation\n\n```bash\n    ~$ pip install televlc\n```\n\n## Usage\n\n### Creating a vlc instance and interface, then connecting\n\n```python\n    import televlc\n\n    # Initialize the vlc object\n    vlc = televlc.VLC()\n\n    # Open a VLC instance and create the telnet interface\n    vlc.start_telnet_interface()\n\n    # Connect to the telnet interface\n    vlc.connect_to_telnet_interface()\n\n    # Run a command (volume up)\n    vlc.do([\"volup\", \"50\"])\n\n    # Disconnect from telnet interfac\n    vlc.disconnect_from_telnet_interface()\n    # or\n    vlc.do([\"exit\"])\n    # or end VLC instance and telnet interface\n    vlc.do([\"shutdown\"])\n```\n\n### Connecting to an existing vlc instance and interface\n\ncreate the vlc instance and interface in the terminal\n\n```bash\n    ~$ vlc --extraintf --telnet --telnet-password myPassword --telnet-host myHost --telnet-port myPort\n```\n\nconnect via python\n\n```python\n    import televlc\n\n    # Set the interface data\n    PASSWORD = myPassword\n    HOST = myHost\n    PORT = myPort\n\n    # Initialize the vlc object\n    vlc = televlc.VLC(PASSWORD, HOST, PORT)\n\n    # Run a command\n    command = [\"volup\", \"50\"]\n    vlc.do(command)\n\n    # Quit\n    vlc.disconnect_from_telnet_interface()\n```\n\n## Commands\n\n| command | description |\n| --- | --- |\n| add XYZ | add XYZ to playlist |\n| enqueue XYZ | queue XYZ to playlist |\n| playlist | show items currently in playlist |\n| search [string] | search for items in playlist (or reset search) |\n| delete [X] | delete item X in playlist |\n| move [X][Y] | move item X in playlist after Y |\n| sort key | sort the playlist |\n| sd [sd] | show services discovery or toggle |\n| play | play stream |\n| stop | stop stream |\n| next | next playlist item |\n| prev | previous playlist item |\n| goto, gotoitem | goto item at index |\n| repeat [on off] | toggle playlist repeat |\n| loop [on off] | toggle playlist loop |\n| random [on off] | toggle playlist random |\n| clear | clear the playlist |\n| status | current playlist status |\n| title [X] | set/get title in current item |\n| title_n | next title in current item |\n| title_p | previous title in current item |\n| chapter [X] | set/get chapter in current item |\n| chapter_n | next chapter in current item |\n| chapter_p | previous chapter in current item |\n| seek X | seek in seconds, for instance `seek 12' |\n| pause | toggle pause |\n| fastforward | set to maximum rate |\n| rewind | set to minimum rate |\n| faster | faster playing of stream |\n| slower | slower playing of stream |\n| normal | normal playing of stream |\n| rate [playback_rate] | set playback rate to value |\n| frame | play frame by frame |\n| fullscreen, f, F [on off] | toggle fullscreen |\n| info [X] | information about the current stream (or specified id) |\n| stats | show statistical information |\n| get_time | seconds elapsed since stream's beginning |\n| is_playing | 1 if a stream plays, 0 otherwise |\n| get_title  | the title of the current stream |\n| get_length | the length of the current stream |\n| volume [X] | set/get audio volume |\n| volup [X]  | raise audio volume X steps |\n| voldown [X] | lower audio volume X steps |\n| achan [X] | set/get stereo audio output mode |\n| atrack [X] | set/get audio track |\n| vtrack [X] | set/get video track |\n| vratio [X] | set/get video aspect ratio |\n| vcrop, crop [X] | set/get video crop |\n| vzoom, zoom [X] | set/get video zoom |\n| vdeinterlace [X] | set/get video deinterlace |\n| vdeinterlace_mode [X] | set/get video deinterlace mode |\n| snapshot | take video snapshot |\n| strack [X] | set/get subtitle track |\n| vlm | load the VLM |\n| description | describe this module |\n| help, ? [pattern] | a help message |\n| longhelp [pattern] | a longer help message |\n| lock | lock the telnet prompt |\n| logout | exit (if in a socket connection) |\n| quit | quit VLC (or logout if in a socket connection) |\n| shutdown | shutdown VLC |\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RomeroCarranzaEmiliano/televlc",
    "keywords": "Telnet,VLC,Videolan",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "televlc",
    "package_url": "https://pypi.org/project/televlc/",
    "platform": "",
    "project_url": "https://pypi.org/project/televlc/",
    "project_urls": {
      "Homepage": "https://github.com/RomeroCarranzaEmiliano/televlc"
    },
    "release_url": "https://pypi.org/project/televlc/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Control VLC media player via telnet from Python",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9258383,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4413fa1eddc691c1eca08becc579b62b2e92d97576a39918cd0611f39624f567",
          "md5": "710ca45414ec01fe9b8196fc1801119e",
          "sha256": "d5f3f18d11eff414c403aae2f687511ccac061711ab6238ddad333fe7ffc2e0c"
        },
        "downloads": -1,
        "filename": "televlc-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "710ca45414ec01fe9b8196fc1801119e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4136,
        "upload_time": "2021-01-24T22:55:40",
        "upload_time_iso_8601": "2021-01-24T22:55:40.979826Z",
        "url": "https://files.pythonhosted.org/packages/44/13/fa1eddc691c1eca08becc579b62b2e92d97576a39918cd0611f39624f567/televlc-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "530959f3a569e1b4fb7a1184cf56656242906b67550fbb03024a059cd57e59c6",
          "md5": "fb23cc7f45d368bbbb38b1759f044519",
          "sha256": "0f640137c3e55ef8e946f00ff942114719dcc6c4b288091e4e0dc0d5982f11b8"
        },
        "downloads": -1,
        "filename": "televlc-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fb23cc7f45d368bbbb38b1759f044519",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4046,
        "upload_time": "2021-01-24T22:55:42",
        "upload_time_iso_8601": "2021-01-24T22:55:42.392766Z",
        "url": "https://files.pythonhosted.org/packages/53/09/59f3a569e1b4fb7a1184cf56656242906b67550fbb03024a059cd57e59c6/televlc-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e48b85913fd2a2da9164dabc086da522ad404feed0a68d82deaeb95f930460e2",
          "md5": "07ce0904f0d280480c2b76463631ef17",
          "sha256": "f110fdcd4068aaa4b40739972097f3a801fbd35f222248db3eb31d2d6d003c67"
        },
        "downloads": -1,
        "filename": "televlc-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07ce0904f0d280480c2b76463631ef17",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16978,
        "upload_time": "2021-01-28T21:27:28",
        "upload_time_iso_8601": "2021-01-28T21:27:28.393062Z",
        "url": "https://files.pythonhosted.org/packages/e4/8b/85913fd2a2da9164dabc086da522ad404feed0a68d82deaeb95f930460e2/televlc-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e48b85913fd2a2da9164dabc086da522ad404feed0a68d82deaeb95f930460e2",
        "md5": "07ce0904f0d280480c2b76463631ef17",
        "sha256": "f110fdcd4068aaa4b40739972097f3a801fbd35f222248db3eb31d2d6d003c67"
      },
      "downloads": -1,
      "filename": "televlc-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "07ce0904f0d280480c2b76463631ef17",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16978,
      "upload_time": "2021-01-28T21:27:28",
      "upload_time_iso_8601": "2021-01-28T21:27:28.393062Z",
      "url": "https://files.pythonhosted.org/packages/e4/8b/85913fd2a2da9164dabc086da522ad404feed0a68d82deaeb95f930460e2/televlc-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}