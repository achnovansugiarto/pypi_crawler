{
  "info": {
    "author": "Gioele Crispo",
    "author_email": "crispogioele@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Decoripy\ndecoripy provides a well-structured template class for creating Python decorators. It uses inheritance to be efficient \nand simple.\n\n![Python 2.7, 3.4, 3.5, 3.6, 3.7, 3.8](https://img.shields.io/badge/python-%202.7%2C%203.4%2C%203.5%2C%203.6%2C%203.7%2C%203.8-blue.svg)\n[![PyPI version](https://badge.fury.io/py/decoripy.svg)](https://badge.fury.io/py/decoripy)\n[![Build Status](https://travis-ci.org/gioelecrispo/decoripy.svg?branch=master)](https://travis-ci.org/gioelecrispo/decoripy)\n[![codecov](https://codecov.io/gh/gioelecrispo/decoripy/branch/master/graph/badge.svg)](https://codecov.io/gh/gioelecrispo/decoripy)\n\n## Table of contents\n1. Motivation\n2. Usage\n\n## 1. Motivation\nWith decoripy, writing a decorator becomes very easy. It aims to improve the Python language expressiveness by \nenhancing a very powerful Python mechanism.\n\nDecoripy provides a template built upon the basic wrapping of a function, hiding the implementation details, and\nproviding some useful advantages:\n - no distinction between decorator with or without arguments has to be done;\n - a temporal based execution is provided. \n\n### Decorator arguments\nWith decoripy you could create decorator with or without arguments with no pain.\nIn standard Python you should handle the arguments passed to the decorator, because, in this case, the wrapper \nfunction does not take the function as a the first argument.\nSo you could do something like this:\n```python\n@MyDecorator\ndef function_to_decorate(var):\n    pass\n```\nor \n```python\n@MyDecorator(True)\ndef function_to_decorate(var):\n    pass\n```\nor \n```python\n@MyDecorator(timeout=3000, num_retries=3)\ndef function_to_decorate(var):\n    pass\n```\nor \n```python\n@MyDecorator(True, timeout=3000, num_retries=3)\ndef function_to_decorate(var):\n    pass\n```\nand you have not to change your code. \nThe unnamed arguments (```*args```) passed to the decorator can be accessed by using the positional order (For example, \nthe first parameters could be taken in this way: ```first_arg = args[0]```, see Usage).\nThe named arguments (```**kwargs```) passed to the decorator are parsed and can be accessed by their name (For example, \ntimeout could be used in the implementation code in this way: ```self.timeout```, see Usage).\n\n\n### Temporal based execution\nThe decoripy template is built to provide temporal based execution:\n - you could execute a pre-operation **before** the decorated function is executed;\n - you could do some operation **while** the decorated function is executed;\n - you could execute a post-operation **after** the decorated function is executed.\n\nIn this way you can control the execution flow of the decorated function.\n\n### Nested decorator\nYou could nest more decorator. The order respects the writing order, so:\n ```python\nfrom decoripy import AbstractDecorator\n\n\nclass First(AbstractDecorator):\n\n    def do_before(self, *args, **kwargs):\n        print(\"Executing: First do_before\")\n\n    def do(self, *args, **kwargs):\n        print(\"Executing: First do\")\n        return self.function(*args, **kwargs)\n\n    def do_after(self, *args, **kwargs):\n        print(\"Executing: First do_after\")\n\n\nclass Second(AbstractDecorator):\n\n    def do_before(self, *args, **kwargs):\n        print(\"Executing: Second do_before\")\n\n    def do(self, *args, **kwargs):\n        print(\"Executing: Second do\")\n        return self.function(*args, **kwargs)\n\n    def do_after(self, *args, **kwargs):\n        print(\"Executing: Second do_after\")\n\n\n@First(timeout=3000)\n@Second\ndef function_to_decorate(var):\n    print(\"Executing: function -\", var)\n```\n\nResult: \n```bash\nExecuting: First do_before\nExecuting: First do\nExecuting: Second do_before\nExecuting: Second do\nExecuting: function - True\nExecuting: Second do_after\nExecuting: First do_after\n```\n\n```@First.do_before()``` is executed before, then ```@First.do()```; while \nexecuting it, ```@Second.do_before()``` is triggered, then ```@Second.do()```.\nThe last functions to be executed are ```@Second.do_after()``` and \n```@First.do_after()```, as you could expected.\n\n\n## 2. Usage\nIn order to create a new decorator, you have only to write a new class inheriting from the\nabstract class AbstractDecorator, and overriding the following (optional) methods:\n - ```do_before```: if you want to make some operation **before** the function execution. \n You can also return the result of the operation and it is stored in the ```self.before_result``` \n variable. It can be used in the other ```self.do()``` and ```self.do_after()``` \n functions.\n - ```do```: if you want to add some operation **while** executing the function. \n It is mandatory doing the ```self.function(*args, **kwargs)``` call here to trigger the\n decorated function execution. \n You can also return the result of the operation and it is stored in the ```self.execution_result``` \n variable. It can be used in the other and ```self.do_after()``` functions.\n - ```do_after```: if you want to make some operation **after** the function execution. \n You can also return the result of the operation and it is stored in the ```self.after_result``` \n variable. \n\nThe overriding of the three functions is optional. Clearly, no overriding means no\noperations done upon the decorated function.\nSummarizing, you have only to handle the temporal phases you are interested on.\n\nYou can access to the function handler through the ```self.function``` variable. \nThe decorator unnamed parameters can be accessed through the ```self.args``` variable.\nThe decorator named parameters can be accessed through the ```self.kwargs``` varaible or \n\n---\n\nExample 1 - No decorator arguments:\n\n```python\nfrom decoripy import AbstractDecorator\n\n\nclass DecoratorWithoutArguments(AbstractDecorator):\n\n    def do_before(self, *args, **kwargs):\n        print(\"Executing: do_before\")\n        return \"Executed: do_before\"\n\n    def do(self, *args, **kwargs):\n        print(self.before_result, \", Executing: do\")\n        function_result = self.function(*args, **kwargs)\n        return function_result + \", Executed: do\"\n\n    def do_after(self, *args, **kwargs):\n        print(self.execution_result, \", Executing: do_after\")\n        return \"Executed: do_after\"\n\n\n@DecoratorWithoutArguments\ndef function_to_decorate(var1, var2, dict_var1, dict_var2):\n    print(\"Executing: function: \", var1, var2, dict_var1, dict_var2)\n    return \"Executed: function\"\n\n\nfunction_to_decorate(1, \"var2\", dict_var1=[1, 2, 3], dict_var2={\"key\": \"value\"})\n```\n\n---\n\nExample 2 - Decorator arguments\n\n```python\nfrom decoripy import AbstractDecorator\n\n\nclass DecoratorWithParameters(AbstractDecorator):\n\n    def do_before(self, *args, **kwargs):\n        if self.execute_before:\n            print(\"Executing: do_before\")\n            return \"Executed: do_before\"\n\n    def do(self, *args, **kwargs):\n        # Non-existing params -> error!\n        try:\n            if self.execute_do:\n                print(self.before_result, \", Executing: do\")\n                function_result = self.function(*args, **kwargs)\n                return function_result + \", Executed: do\"\n        except AttributeError:\n            self.function(*args, **kwargs)\n\n    def do_after(self, *args, **kwargs):\n        if self.execute_after:\n            print(self.execution_result, \", Executing: do_after\")\n            return \"Executed: do_after\"\n\n\n@DecoratorWithParameters(3, execute_before=False, execute_after=False)\ndef function_to_decorate(var1, var2, dict_var1, dict_var2):\n    print(\"Executing: function: \", var1, var2, dict_var1, dict_var2)\n    return \"Executed: function\"\n\nfunction_to_decorate(1, \"var2\", dict_var1=[1, 2, 3], dict_var2={\"key\": \"value\"})\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gioelecrispo/decoripy.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "decoripy",
    "package_url": "https://pypi.org/project/decoripy/",
    "platform": "",
    "project_url": "https://pypi.org/project/decoripy/",
    "project_urls": {
      "Homepage": "https://github.com/gioelecrispo/decoripy.git"
    },
    "release_url": "https://pypi.org/project/decoripy/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "Decoripy helps you making better decorators.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6190927,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7b4ad2f83fe39c7ed8d83b59c868f89fba86e0d3296a48e2ff3fc9cbaafd068",
          "md5": "7f7b4f068872521bae0ecf260df226b6",
          "sha256": "d80c9460765cfcdc382420e3bf7cfca1ebbf0542e3b6273d7c83eacc3c785003"
        },
        "downloads": -1,
        "filename": "decoripy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f7b4f068872521bae0ecf260df226b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 4345,
        "upload_time": "2019-11-20T21:33:32",
        "upload_time_iso_8601": "2019-11-20T21:33:32.292372Z",
        "url": "https://files.pythonhosted.org/packages/b7/b4/ad2f83fe39c7ed8d83b59c868f89fba86e0d3296a48e2ff3fc9cbaafd068/decoripy-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d408a789457a88674424ae2f4c5517058f4240d295cdbf234c9fff27db567c47",
          "md5": "ea5ce0e79fba827c35430fee3ba8c53d",
          "sha256": "57554d1bde15e5eb23e341e5181394b91f798d2c5911e1364b7f320ce0571525"
        },
        "downloads": -1,
        "filename": "decoripy-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea5ce0e79fba827c35430fee3ba8c53d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 4340,
        "upload_time": "2019-11-20T22:15:20",
        "upload_time_iso_8601": "2019-11-20T22:15:20.297877Z",
        "url": "https://files.pythonhosted.org/packages/d4/08/a789457a88674424ae2f4c5517058f4240d295cdbf234c9fff27db567c47/decoripy-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89880536eeaf4779cc1aefdeffc5c8eafa2a65e80a92e4b99c05ae2ddb1caabb",
          "md5": "51bacb716d55c426a9b59aafb7743655",
          "sha256": "3ba4fbf05f3176fa5694fb1039f9b6aaf88c67e110c3a564b63b93361b9e5b8c"
        },
        "downloads": -1,
        "filename": "decoripy-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "51bacb716d55c426a9b59aafb7743655",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4411,
        "upload_time": "2019-11-20T22:15:21",
        "upload_time_iso_8601": "2019-11-20T22:15:21.970052Z",
        "url": "https://files.pythonhosted.org/packages/89/88/0536eeaf4779cc1aefdeffc5c8eafa2a65e80a92e4b99c05ae2ddb1caabb/decoripy-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ee7fdc09fa92a1823350abebbb95492f419f13b8fd65570f5be551d7072f7e2",
          "md5": "e3a9cc757741e1f79b5feaccc830e607",
          "sha256": "786e93eab39647ee281a85af04726955b6db6b9c4c1478906685d6ad675610a0"
        },
        "downloads": -1,
        "filename": "decoripy-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3a9cc757741e1f79b5feaccc830e607",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 4462,
        "upload_time": "2019-11-21T10:08:10",
        "upload_time_iso_8601": "2019-11-21T10:08:10.260037Z",
        "url": "https://files.pythonhosted.org/packages/7e/e7/fdc09fa92a1823350abebbb95492f419f13b8fd65570f5be551d7072f7e2/decoripy-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b8d3d7f2b607efb362d97f0aa15aef2f18f400023f977c7b93b26cd3fcbd032",
          "md5": "cada0ba2bbca424642bc42496131eb59",
          "sha256": "391bb2073af0da9245f997c33f7fd74670d1385b21d91bcf725e1767920a926d"
        },
        "downloads": -1,
        "filename": "decoripy-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cada0ba2bbca424642bc42496131eb59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 4536,
        "upload_time": "2019-11-21T10:08:11",
        "upload_time_iso_8601": "2019-11-21T10:08:11.968629Z",
        "url": "https://files.pythonhosted.org/packages/4b/8d/3d7f2b607efb362d97f0aa15aef2f18f400023f977c7b93b26cd3fcbd032/decoripy-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9b36e15f53d1d72b9705f5b8e857419055e5f82701fafd40c45c97a95920515",
          "md5": "73bb9bd1240545b7adbefda414eb745f",
          "sha256": "0b2a0a634f105f00b8f3991f82f09d921818b6c2118065a335b96c302f963d0a"
        },
        "downloads": -1,
        "filename": "decoripy-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73bb9bd1240545b7adbefda414eb745f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 5593,
        "upload_time": "2019-11-24T19:40:08",
        "upload_time_iso_8601": "2019-11-24T19:40:08.703067Z",
        "url": "https://files.pythonhosted.org/packages/c9/b3/6e15f53d1d72b9705f5b8e857419055e5f82701fafd40c45c97a95920515/decoripy-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "620a7b20d63f98efdcc4d01359160cea0fa1c8289b1e7e1c1e60151fc409d479",
          "md5": "42de5a44b28ae5896cbe5574ad6a641a",
          "sha256": "80b079193786384a2fd5ce9b492a3b40ae83ecb37b86b2196040e0d40ca430c4"
        },
        "downloads": -1,
        "filename": "decoripy-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "42de5a44b28ae5896cbe5574ad6a641a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 6189,
        "upload_time": "2019-11-24T19:40:10",
        "upload_time_iso_8601": "2019-11-24T19:40:10.387359Z",
        "url": "https://files.pythonhosted.org/packages/62/0a/7b20d63f98efdcc4d01359160cea0fa1c8289b1e7e1c1e60151fc409d479/decoripy-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9b36e15f53d1d72b9705f5b8e857419055e5f82701fafd40c45c97a95920515",
        "md5": "73bb9bd1240545b7adbefda414eb745f",
        "sha256": "0b2a0a634f105f00b8f3991f82f09d921818b6c2118065a335b96c302f963d0a"
      },
      "downloads": -1,
      "filename": "decoripy-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73bb9bd1240545b7adbefda414eb745f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7",
      "size": 5593,
      "upload_time": "2019-11-24T19:40:08",
      "upload_time_iso_8601": "2019-11-24T19:40:08.703067Z",
      "url": "https://files.pythonhosted.org/packages/c9/b3/6e15f53d1d72b9705f5b8e857419055e5f82701fafd40c45c97a95920515/decoripy-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "620a7b20d63f98efdcc4d01359160cea0fa1c8289b1e7e1c1e60151fc409d479",
        "md5": "42de5a44b28ae5896cbe5574ad6a641a",
        "sha256": "80b079193786384a2fd5ce9b492a3b40ae83ecb37b86b2196040e0d40ca430c4"
      },
      "downloads": -1,
      "filename": "decoripy-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "42de5a44b28ae5896cbe5574ad6a641a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 6189,
      "upload_time": "2019-11-24T19:40:10",
      "upload_time_iso_8601": "2019-11-24T19:40:10.387359Z",
      "url": "https://files.pythonhosted.org/packages/62/0a/7b20d63f98efdcc4d01359160cea0fa1c8289b1e7e1c1e60151fc409d479/decoripy-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}