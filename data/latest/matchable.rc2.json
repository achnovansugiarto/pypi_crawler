{
  "info": {
    "author": "Dominik1123",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "[![Tests](https://github.com/Dominik1123/matchable/workflows/Tests/badge.svg)](https://github.com/Dominik1123/matchable/actions?workflow=Tests)\n[![Codecov](https://codecov.io/gh/Dominik1123/matchable/branch/main/graph/badge.svg)](https://codecov.io/gh/Dominik1123/matchable)\n[![PyPI](https://img.shields.io/pypi/v/matchable.svg)](https://pypi.org/project/matchable/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/matchable.svg?style=flat-square)](https://pypi.org/pypi/matchable/)\n\n# matchable\n\nAttribute-based object matching in Python\n\n\n## Installation\n\nFrom [PyPI](https://pypi.org/project/matchable/):\n\n    pip install matchable\n\n\n## Usage\n\n`matchable` is built around two objects, `match` and `Spec`:\n\n* `match` is used to create patterns and link them to user-specified values.\n* `Spec` holds a list of patterns which can be matched against arbitrary objects in order to combine their linked values.\n\nFor example:\n\n    match(object).attr > 0\n\nThis pattern matches any object which has an attribute `attr` that compares greater than `0`.\n\n    match(dict)['key'] == 0\n\nThis pattern matches all dicts (or subclasses thereof) with an item `'key'` which compares equal to `0`.\n\nSuch patterns can be used to create a speficiation via the `Spec` class:\n\n    spec = Spec.from_patterns({\n        match(object).attr > 0: 'foo',\n        match(dict)['key'] == 0: 'bar',\n    })\n\nA spec can be used to match other objects against its patterns and to combine the corresponding values:\n\n    >>> spec.match({'key': 0})\n    'bar'\n    >>> class Test:\n    ...     attr = 1\n    ... \n    >>> spec.match(Test())\n    'foo'\n\nIf no condition matches the given object, an exception is raised:\n\n    >>> spec.match({'key': 5})\n    [...]\n    matchable.exceptions.NoMatchError: No matching conditions found for object {'key': 5}\n\nIf multiple conditions match the given object, their corresponding values are combined (see the paragraph below\nfor what \"to combine\" means in different contexts):\n\n    >>> class Test(dict):\n    ...     attr = 1\n    ... \n    >>> spec.match(Test(key=0))\n    'bar'\n\nHere, for strings, \"to combine\" means to simply select the last seen value\n(for customizing this behavior, see the next section).\nFor dictionaries however the standard behavior is to update their content:\n\n    >>> spec = Spec.from_patterns({\n    ...     match(object).attr > 0: dict(x='foo'),\n    ...     match(dict)['key'] == 0: dict(y='bar'),\n    ... })\n    >>> spec.match(Test(key=0))\n    {'x': 'foo', 'y': 'bar'}\n\nThis is useful for combining multiple partial configurations into one.\n\n\n## Registering custom combinations\n\nThe example of the previous section showed that for strings the \"last seen wins\" strategy\nis chosen for combining two values. Another possibility would be to concatenate values.\nWe can implement this in the following way:\n\n    from matchable.spec import Wrapper, WRAPPER_TYPES\n    \n    class Concatenate(Wrapper):\n        def __or__(self, other):\n            return Concatenate(self.obj + other.obj)\n    \n    WRAPPER_TYPES[str] = Concatenate\n\nBasically we need to supply a custom `Wrapper` class for the corresponding type in `WRAPPER_TYPES`.\nSince individual values are combined via `lhs | rhs` all this wrapper needs to do is implement the\n`__or__` protocol and perform the combination logic there. Here `self.obj` accesses the wrapped object\n(string in this case). It's important to note that the wrapper needs to be registered *before* creating\nthe spec since once the spec is created it won't change the wrapper types of its values.\n\nSo now we can create the spec and match some objects:\n\n    spec = Spec.from_patterns({\n        match(dict)['x'] > 0: 'foo',\n        match(dict)['x'] > 1: 'bar',\n    })\n\n    >>> spec.match({'x': 1})\n    'foo'\n    >>> spec.match({'x': 2})\n    'foobar'\n\n\n## Patterns, Matching and the Class Hierarchy\n\nPatterns can refer to attributes (`match(obj).x`) or items (`match(obj)['x']`) of objects of certain types\nor to the type directly (either `match(tp)` or just `tp`).\n\nDuring matching, if multiple patterns apply, attribute-based patterns take precedence over type-based patterns.\nIn fact the list of all matched patterns is sorted in a way that type-based patterns are placed on the left,\nin the order of the matched object's reversed [MRO](https://docs.python.org/3/glossary.html#term-method-resolution-order),\nfollowed by attribute-based patterns in the order of their appearance during the spec's creation.\nThe corresponding values are then updated from left to right where r.h.s. values update l.h.s. values (i.e. `lhs | rhs`).\nFor example for a list of strings, since they update as \"last seen wins\", the rightmost value would be the result.\nFor a list of sets the equivalent is `s1 | s2 | s3`, i.e. they build a union.\n\nThe `Spec.match` method also supports a `typewise` keyword-argument which can be used to alter the sorting of patterns\nsuch that attribute-based patterns only take precedence over their associated type-based pattern but otherwise the matched\nobject's reverse MRO is respected. I.e. for `typewise=True` a subtype-based pattern takes predence over the attribute-based\npattern of an ancestor, while for `typewise=False` (the default) the opposite is true (since here type-based patterns are\nsorted all the way to the left).\n\nThe following diagram visualizes the class hierarchy as well as the order of precedence for the different matching flavors.\n\n![Diagram](https://raw.githubusercontent.com/Dominik1123/matchable/main/misc/diagram.svg)\n\n\n## Example\n\nSuppose a sequence of objects that should be visualized in some way. These are the objects:\n\n    from dataclasses import dataclass\n\n    @dataclass\n    class Plant:\n        height: float\n\n    @dataclass\n    class Flower(Plant):\n        n_petals: int\n\n    @dataclass\n    class Tree(Plant):\n        pass\n\n    plants = [  # some random numbers\n        Flower(height=4.0, n_petals=5),\n        Flower(height=3.5, n_petals=7),\n        Flower(height=6.8, n_petals=4),\n        Tree(height=104.6),\n        Flower(height=1.8, n_petals=9),\n        Tree(height=187.2),\n        Tree(height=121.9),\n        Flower(height=2.2, n_petals=5),\n    ]\n\nSay we want to visualize these plant objects as rectangles with different styles that represent their attributes.\nWe can do so by creating a spec that represents the various rectangles' configurations (note that if there are\nmultiple matches in the spec, the dicts will be merged into one):\n\n    config = Spec.from_patterns({\n        match(Plant): dict(linestyle='-', linewidth=2, facecolor='none'),\n        match(Flower): dict(edgecolor='orange'),\n        match(Flower).height < 2.0: dict(hatch='/'),\n        match(Flower).n_petals >= 7: dict(facecolor='#ff7f0e33'),\n        match(Tree): dict(edgecolor='green'),\n        match(Tree).height > 160: dict(linestyle='--'),\n    })\n\nThen we can add the Rectangle patches as follows:\n\n    fig, ax = plt.subplots()\n    for i, plant in enumerate(plants):\n        ax.add_patch(Rectangle((i, 0), 0.5, 1, **config.match(plant)))\n\nThis gives us the following plot:\n\n![Example plot](https://raw.githubusercontent.com/Dominik1123/matchable/main/examples/visualize.png)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dominik1123/matchable",
    "keywords": "pattern,matching,pattern matching",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matchable",
    "package_url": "https://pypi.org/project/matchable/",
    "platform": "",
    "project_url": "https://pypi.org/project/matchable/",
    "project_urls": {
      "Homepage": "https://github.com/Dominik1123/matchable",
      "Repository": "https://github.com/Dominik1123/matchable"
    },
    "release_url": "https://pypi.org/project/matchable/0.1.2/",
    "requires_dist": [
      "importlib_metadata (>=1.6.1,<2.0.0); python_version < \"3.8\"",
      "typing_extensions (>=3.7.4,<4.0.0); python_version < \"3.8\""
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Attribute-based object matching",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8464543,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efaa351e6af93adf7621392abee938d25973231c18680be475ebc31a6443aff3",
          "md5": "9a3162db40ea3eb6cfa3c09a826905be",
          "sha256": "59213fb87fd5ae3fd504f670fa27938673c5e4b1d501f6a67e8fa96484401db5"
        },
        "downloads": -1,
        "filename": "matchable-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a3162db40ea3eb6cfa3c09a826905be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9252,
        "upload_time": "2020-10-20T14:06:25",
        "upload_time_iso_8601": "2020-10-20T14:06:25.677014Z",
        "url": "https://files.pythonhosted.org/packages/ef/aa/351e6af93adf7621392abee938d25973231c18680be475ebc31a6443aff3/matchable-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2b14b71533fbd7387cc24be3142dc0217e0009e261ee32f447f7cbf3e7532f8",
          "md5": "14f2aad1f5fba500c4035ec8057d47c0",
          "sha256": "33dd55ff018fa8d3beb4000660b6f344078d820af75ebd8075e84e9e6ef8126d"
        },
        "downloads": -1,
        "filename": "matchable-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "14f2aad1f5fba500c4035ec8057d47c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11373,
        "upload_time": "2020-10-20T14:06:29",
        "upload_time_iso_8601": "2020-10-20T14:06:29.474788Z",
        "url": "https://files.pythonhosted.org/packages/f2/b1/4b71533fbd7387cc24be3142dc0217e0009e261ee32f447f7cbf3e7532f8/matchable-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97140b97074327ba9c59ae3cdbe989eb72a282ada9075e307b19d468750a8b11",
          "md5": "aa3ed101c7ed66ce710f860c8640b4b0",
          "sha256": "509812e99405fc90e87cc4c34ef0e06e574e481b1bfc602fbefa08aa6897385b"
        },
        "downloads": -1,
        "filename": "matchable-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa3ed101c7ed66ce710f860c8640b4b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9340,
        "upload_time": "2020-10-21T09:30:10",
        "upload_time_iso_8601": "2020-10-21T09:30:10.380558Z",
        "url": "https://files.pythonhosted.org/packages/97/14/0b97074327ba9c59ae3cdbe989eb72a282ada9075e307b19d468750a8b11/matchable-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f136d6b3695bf748f6474d6cfd429118010cefe2c821cb1a4db7ad90c8a2904",
          "md5": "e1bc60e514205c19045f815a219dfa18",
          "sha256": "ebf27e62d6dc7f74f797a44f6b629907360649559a6a277c4be0b319e5746916"
        },
        "downloads": -1,
        "filename": "matchable-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e1bc60e514205c19045f815a219dfa18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11397,
        "upload_time": "2020-10-21T09:30:11",
        "upload_time_iso_8601": "2020-10-21T09:30:11.294685Z",
        "url": "https://files.pythonhosted.org/packages/6f/13/6d6b3695bf748f6474d6cfd429118010cefe2c821cb1a4db7ad90c8a2904/matchable-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97140b97074327ba9c59ae3cdbe989eb72a282ada9075e307b19d468750a8b11",
        "md5": "aa3ed101c7ed66ce710f860c8640b4b0",
        "sha256": "509812e99405fc90e87cc4c34ef0e06e574e481b1bfc602fbefa08aa6897385b"
      },
      "downloads": -1,
      "filename": "matchable-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aa3ed101c7ed66ce710f860c8640b4b0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 9340,
      "upload_time": "2020-10-21T09:30:10",
      "upload_time_iso_8601": "2020-10-21T09:30:10.380558Z",
      "url": "https://files.pythonhosted.org/packages/97/14/0b97074327ba9c59ae3cdbe989eb72a282ada9075e307b19d468750a8b11/matchable-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f136d6b3695bf748f6474d6cfd429118010cefe2c821cb1a4db7ad90c8a2904",
        "md5": "e1bc60e514205c19045f815a219dfa18",
        "sha256": "ebf27e62d6dc7f74f797a44f6b629907360649559a6a277c4be0b319e5746916"
      },
      "downloads": -1,
      "filename": "matchable-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e1bc60e514205c19045f815a219dfa18",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 11397,
      "upload_time": "2020-10-21T09:30:11",
      "upload_time_iso_8601": "2020-10-21T09:30:11.294685Z",
      "url": "https://files.pythonhosted.org/packages/6f/13/6d6b3695bf748f6474d6cfd429118010cefe2c821cb1a4db7ad90c8a2904/matchable-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}