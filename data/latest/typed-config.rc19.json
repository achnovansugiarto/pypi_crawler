{
  "info": {
    "author": "Ben Windsor",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development",
      "Typing :: Typed"
    ],
    "description": "[![Build Status](https://travis-ci.org/bwindsor/typed-config.svg?branch=master)](https://travis-ci.org/bwindsor/typed-config)\n[![codecov](https://codecov.io/gh/bwindsor/typed-config/branch/master/graph/badge.svg)](https://codecov.io/gh/bwindsor/typed-config)\n\n# typed-config\nTyped, extensible, dependency free configuration reader for Python projects for multiple config sources and working well in IDEs for great autocomplete performance.\n\n`pip install typed-config`\n\nRequires python 3.6 or above. (Also, needs `typing_extensions` for Python <= 3.7, so not completely dependency free if using old Python).\n\n## Basic usage\n```python\n# my_app/config.py\nfrom typedconfig import Config, key, section\nfrom typedconfig.source import EnvironmentConfigSource\n\n@section('database')\nclass AppConfig(Config):\n    host = key(cast=str)\n    port = key(cast=int)\n    timeout = key(cast=float)\n\nconfig = AppConfig()\nconfig.add_source(EnvironmentConfigSource())\nconfig.read()\n```\n\n```python\n# my_app/main.py\nfrom my_app.config import config\nprint(config.host)\n```\nIn PyCharm, and hopefully other IDEs, it will recognise the datatypes of your configuration and allow you to autocomplete. No more remembering strings to get the right thing out!\n\n## Upgrading from 0.x.x\nThere is one breaking change when moving from `0.x.x` to `1.x.x`. The `key` function now expects all arguments to be keyword arguments. So simply replace any calls like so:\n```python\nkey('section', 'key', True, str, 'default')  # 0.x.x\nkey(section_name='section', key_name='key', required=True, cast=str, default='default')  # 1.x.x\n```\nThe reason for this change is to tie down the return type of `key` properly. Previously, when `required=False` or when `cast=None` the return type would not include the possibility of `None` or `string`. The type checker should now be able to infer the return type based on the values of `required`, `cast` and `default`.\n\n## How it works\nConfiguration is always supplied in a two level structure, so your source configuration can have multiple sections, and each section contains multiple key/value configuration pairs. For example:\n```ini\n[database]\nhost = 127.0.0.1\nport = 2000\n\n[algorithm]\nmax_value = 10\nmin_value = 20\n```\n\nYou then create your configuration hierarchy in code (this can be flat or many levels deep) and supply the matching between strings in your config sources and properties of your configuration classes.\n\nYou provide one or more `ConfigSource`s, from which the config for your application can be read. For example, you might supply an `EnvironmentConfigSource`,  and two `IniFileConfigSource`s. This would make your application first look for a configuration value in environment variables, if not found there it would then look at the first INI file (perhaps a user-specific file), before falling back to the second INI file (perhaps a default configuration shared between all users). If a parameter is still not found and is a required parameter, an error would be thrown.\n\nThere is emphasis on type information being available for everything so that an IDE will autocomplete when trying to use your config across your application.\n\n### Multiple data sources\n```python\nfrom typedconfig import Config, key, section, group_key\nfrom typedconfig.source import EnvironmentConfigSource, IniFileConfigSource\n\n@section('database')\nclass DatabaseConfig(Config):\n    host = key(cast=str)\n    port = key(cast=int)\n    username = key(cast=str)\n    password = key(cast=str)\n\nconfig = DatabaseConfig()\nconfig.add_source(EnvironmentConfigSource(prefix=\"EXAMPLE\"))\nconfig.add_source(IniFileConfigSource(\"config.cfg\"))\n\n# OR provide sources directly to the constructor\nconfig = DatabaseConfig(sources=[\n    EnvironmentConfigSource(prefix=\"EXAMPLE\"),\n    IniFileConfigSource(\"config.cfg\")\n])\n```\n\nSince you don't want to hard code your secret credentials, you might supply them through the environment.\nSo for the above configuration, the environment might look like this:\n```bash\nexport EXAMPLE_DATABASE_USERNAME=my_username\nexport EXAMPLE_DATABASE_PASSWORD=my_very_secret_password\nexport EXAMPLE_DATABASE_PORT=2001\n```\n\nThose values which couldn't be found in the environment would then be read from the INI file, which might look like this:\n```ini\n[database]\nHOST = db1.mydomain.com\nPORT = 2000\n```\n\nNote after this, `config.port` will be equal to `2001` as the value in the environment took priority over the value in the INI file.\n\n### Caching\nWhen config values are first used, they are read. This is lazy evaluation by default so that not everything is read if not necessary.\n\nAfter first use, they are cached in memory so that there should be no further I/O if the config value is used again.\n\nFor fail fast behaviour, and also to stop unexpected latency when a config value is read partway through your application (e.g. your config could be coming across a network), the option is available to read all config values at the start. Just call\n\n`config.read()`\n\nThis will throw an exception if any required config value cannot be found, and will also keep all read config values in memory for next time they are used. If you do not use `read` you will only get the exception when you first try to use the offending config key.\n\n### Hierarchical configuration\nUse `group_key` to represent a \"sub-config\" of a configuration. Set up \"sub-configs\" exactly as demonstrated above, and then create a parent config to compose them in one place.\n```python\nfrom typedconfig import Config, key, section, group_key\nfrom typedconfig.source import EnvironmentConfigSource, IniFileConfigSource\n\n@section('database')\nclass DatabaseConfig(Config):\n    host = key(cast=str)\n    port = key(cast=int)\n\n@section('algorithm')\nclass AlgorithmConfig(Config):\n    max_value = key(cast=float)\n    min_value = key(cast=float)\n\nclass ParentConfig(Config):\n    database = group_key(DatabaseConfig)\n    algorithm = group_key(AlgorithmConfig)\n    description = key(cast=str, section_name=\"general\")\n\nconfig = ParentConfig()\nconfig.add_source(EnvironmentConfigSource(prefix=\"EXAMPLE\"))\nconfig.add_source(IniFileConfigSource(\"config.cfg\"))\nconfig.read()\n```\n\nThe first time the `config.database` or `config.algorithm` is accessed (which in the case above is when `read()` is called), then an instance will be instantiated. Notice that it is the class definition, not an instance of the class, which is passed to the `group_key` function.\n\n### Custom section/key names, optional parameters, default values\nLet's take a look at this:\n```python\nfrom typedconfig import Config, key, section\n\n@section('database')\nclass AppConfig(Config):\n    host1 = key()\n    host2 = key(section_name='database', key_name='HOST2',\n                required=True, cast=str, default=None)\n```\nBoth `host1` and `host2` are legitimate configuration key definitions.\n\n* `section_name` - this name of the section in the configuration source from which this parameter should be read. This can be provided on a key-by-key basis, but if it is left out then the section name supplied by the `@section` decorator is used. If all keys supply a `section_name`, the class decorator is not needed. If both `section_name` and a decorator are provided, the `section_name` argument takes priority.\n* `key_name` - the name of this key in the configuration source from which this parameter is read. If not supplied, some magic uses the object property name as the key name.\n* `required` - default True. If False, and the configuration value can't be found, no error will be thrown and the default value will be used, if provided. If a default not provided, `None` will be used.\n* `cast` - probably the most important option for typing. **If you want autocomplete typing support you must specify this**. It's just a function which takes a string as an input and returns a parsed value. See the casting section for more. If not supplied, the value remains as a string.\n* `default` - only applicable if `required` is false. When `required` is false this value is used if a value cannot be found.\n\n### Types\n```python\nfrom typedconfig import Config, key, section\nfrom typing import List\n\ndef split_str(s: str) -> List[str]:\n    return [x.strip() for x in s.split(\",\")]\n\n@section('database')\nclass AppConfig(Config):\n    host = key()\n    port = key(cast=int)\n    users = key(cast=split_str)\n    zero_based_index = key(cast=lambda x: int(x)-1)\nconfig = AppConfig(sources=[...])\n```\nIn this example we have three ways of casting:\n1. Not casting at all. This defaults to returning a `str`, but your IDE won't know that so if you want type hints use `cast=str`\n2. Casting to an built in type which can take a string input and parse it, for example `int`\n3. Defining a custom function. Your function should take one string input and return one output of any type. To get type hint, just make sure your function has type annotations.\n4. Using a lambda expression. The type inference may or may not work depending on your expression, so if it doesn't just write it as a function with type annotations.\n\n### Validation\nYou can validate what has been supplied by providing a custom `cast` function to a `key`, which validates the configuration value in addition to parsing it.\n\n### Extending configuration using shared ConfigProvider\n\nMultiple application modules may use different configuration schemes while sharing the same configuration source. Analogously, various `Config` classes may provide different view of the same configuration data, sharing the same `ConfigProvider`.\n\n```python\n# app/config.py\nfrom typedconfig.provider import ConfigProvider\nfrom typedconfig.source import EnvironmentConfigSource, IniFileConfigSource\n\nprovider = ConfigProvider()\nprovider.add_source(EnvironmentConfigSource(prefix=\"EXAMPLE\"))\nprovider.add_source(IniFileConfigSource(\"config.cfg\"))\n\n__all__ = [\"provider\"]\n```\n```python\n# app/database/config.py\nfrom typedconfig import Config, key, section\nfrom app.config import provider\n\n@section('database')\nclass DatabaseConfig(Config):\n    host = key(cast=str)\n    port = key(cast=int)\n\ndatabase_config = DatabaseConfig(provider=provider)\n```\n```python\n# app/algorithm/config.py\nfrom typedconfig import Config, key, section\nfrom app.config import provider\n\n@section('algorithm')\nclass AlgorithmConfig(Config):\n    max_value = key(cast=float)\n    min_value = key(cast=float)\n\nalgorithm_config = AlgorithmConfig(provider=provider)\n```\n\nShared configuration provider can be used by plugins, which may need to declare additional configuration sections within the same configuration files as the main application.  Let's assume we have `[database]` section used by main application and `[app_extension]` that provides 3rd party plugin configuration:\n\n```ini\n[database]\nhost = 127.0.0.1\nport = 2000\n\n[app_extension]\napi_key = secret\n```\n\ne.g. `app/config.py` may look like that:\n\n```python\nfrom typedconfig import Config, key, section, group_key\nfrom typedconfig.source import EnvironmentConfigSource, IniFileConfigSource\n\n@section('database')\nclass DatabaseConfig(Config):\n    \"\"\"Database configuration\"\"\"\n    host = key(cast=str)\n    port = key(cast=int)\n\nclass ApplicationConfig(Config):\n    \"\"\"Main configuration object\"\"\"\n    database = group_key(DatabaseConfig)\n\napp_config = ApplicationConfig(sources=[\n    EnvironmentConfigSource(),\n    IniFileConfigSource(\"config.cfg\")\n])\n```\n\nand plugin can read additional sections by using the same configuration provider as main application config.\n\ne.g. `plugin/config.py`:\n```python\nfrom typedconfig import Config, key, section, group_key\n\nfrom app.config import ApplicationConfig, app_config\n\n@section('app_extension')\nclass ExtensionConfig(Config):\n    \"\"\"Extension configuration\"\"\"\n    api_key = key(cast=str)\n\n# ExtendedAppConfig extends ApplicationConfig \n# so original sections are also included\nclass ExtendedAppConfig(ApplicationConfig):\n    \"\"\"Extended main configuration object\"\"\"\n    app_extension = group_key(ExtensionConfig)\n    \n# ExtendedAppConfig uses the same provider as the main app_config\nextended_config = ExtendedAppConfig(provider=app_config.provider)\n```\n```python\nfrom plugin.config import extended_config\n\n# Plugin can access both main and extra sections\nprint(extended_config.app_extension.api_key)\nprint(extended_config.database.host)\n```\n\n### Configuration variables which depend on other configuration variables\nSometimes you may wish to set the value of some configuration variables based on others. You may also wish to validate some variables, for example allowed values may be different depending on the value of another config variable. For this you can add a `post_read_hook`.\n\nThe default implementation of `post_read_hook` returns an empty `dict`. You can override this by implementing your own `post_read_hook` method. It should receive only `self` as an input, and return a `dict`. This `dict` should be a simple mapping from config keys to values. For hierarchical configurations, you can nest the dictionaries. If you provide a `post_read_hook` in both a parent and a child class which both make changes to the same keys (don't do this) then the values returned by the child method will overwrite those by the parent.\n\nThis hook is called whenever you call the `read` method. If you use lazy loading and skip calling the `read` method, you cannot use this hook.\n```python\n# my_app/config.py\nfrom typedconfig import Config, key, group_key, section\nfrom typedconfig.source import EnvironmentConfigSource\n\n@section('child')\nclass ChildConfig(Config):\n    http_port_plus_one = key(cast=int, required=False)\n\n@section('app')\nclass AppConfig(Config):\n    use_https = key(cast=bool)\n    http_port = key(key_name='port', cast=int, required=False)\n    child = group_key(ChildConfig)\n    \n    def post_read_hook(self) -> dict:\n        config_updates = dict()\n        # If the port has not been provided, set it based on the value of use_https\n        if self.http_port is None:\n            config_updates.update(http_port=443 if self.use_https else 80)\n        else:\n            # Modify child config\n            config_updates.update(child=dict(http_port_plus_one=self.http_port + 1))\n            \n        # Validate that the port number has a sensible value\n        # It is recommended to do validation inside the cast method for individual keys, however for dependent keys it can be useful here\n        if self.http_port is not None:\n            if self.use_https:\n                assert self.http_port in [443, 444, 445]\n            else:\n                assert self.http_port in [80, 81, 82]\n\n        return config_updates\n            \nconfig = AppConfig()\nconfig.add_source(EnvironmentConfigSource())\nconfig.read()\n```\n\n## Configuration Sources\nConfiguration sources are how your main `Config` class knows where to get its data from. These are totally extensible so that you can read in your configuration from wherever you like - from a database, from S3, anywhere that you can write code for.\n\nYou supply your configuration source to your config after you've instantiated it, but **before** you try to read any data from it:\n```python\nconfig = AppConfig()\nconfig.add_source(my_first_source)\nconfig.add_source(my_second_source)\nconfig.read()\n```\nOr you can supply the sources directly in the constructor like this:\n```python\nconfig = AppConfig(sources=[my_first_source, my_second_source])\nconfig.read()\n```\n\n\n### Modifying or refreshing configuration after it has been loaded\nIn general it is bad practice to modify configuration at runtime because the configuration for your program should be fixed for the duration of it.  However, there are cases where it may be necessary.\n\nTo completely replace the set of config sources, you can use\n```python\nconfig = AppConfig(sources=[my_first_source, my_second_source])\nconfig.set_sources([my_first_new_source, my_second_new_source])\n```\n\nTo replace a specific config source, for example because a config file has changed and you need to re-read it from disk, you can use `replace_source`:\n```python\nfrom typedconfig.source import IniFileConfigSource\noriginal_source = IniFileConfigSource(\"config.cfg\")\nconfig = AppConfig(sources=[source])\n# Now say you change the contents to config.cfg and need to read it again\nnew_source = IniFileConfigSource(\"config.cfg\")  # re-reads file during construction\nconfig.replace_source(original_source, new_source)\n```\n\n**Important**: if you add or modify the config sources the config has been read, or need to refresh the config for some reason, you'll need to clear any cached values in order to force the config to be fetched from the `ConfigSource`s again. You can do this by\n```python\nconfig.clear_cache()\nconfig.read()          # Read all configuration values again\n```\n\n\n\n### Supplied Config Sources\n#### `EnvironmentConfigSource`\nThis just reads configuration from environment variables.\n```python\nfrom typedconfig.source import EnvironmentConfigSource\nsource = EnvironmentConfigSource(prefix=\"XYZ\")\n# OR just\nsource = EnvironmentConfigSource()\n```\nIt just takes one optional input argument, a prefix. This can be useful to avoid name clashes in environment variables.\n\n* If prefix is provided, environment variables are expected to look like `{PREFIX}_{SECTION}_{KEY}`, for example `export XYZ_DATABASE_PORT=2000`. \n* If no prefix is provided, environment variables should look like `{SECTION}_{KEY}`, for example `export DATABASE_PORT=2000`.\n\n#### `IniFileConfigSource`\nThis reads from an INI file using Python's built in [configparser](https://docs.python.org/3/library/configparser.html). Read the docs for `configparser` for more about the structure of the file.\n```python\nfrom typedconfig.source import IniFileConfigSource\nsource = IniFileConfigSource(\"config.cfg\", encoding='utf-8', must_exist=True)\n```\n\n* The first argument is the filename (absolute or relative to the current working directory).\n* `encoding` is the text encoding of the file. `configparser`'s default is used if not supplied.\n* `must_exist` - default `True`. If the file can't be found, an error will be thrown by default. Setting `must_exist` to be `False` allows the file not to be present, in which case this source will just report that it can't find any configuration values and your `Config` class will move onto looking in the next `ConfigSource`.\n\n#### `IniStringConfigSource`\nThis reads from a string instead of a file\n```python\nfrom typedconfig.source import IniStringConfigSource\nsource = IniStringConfigSource(\"\"\"\n[section_name]\nkey_name=key_value\n\"\"\")\n```\n\n#### `DictConfigSource`\nThe most basic source, entirely in memory, and also useful when writing tests. It is case insensitive.\n```python\nfrom typedconfig.source import DictConfigSource\nsource = DictConfigSource({\n    'database': dict(HOST='db1', PORT='2000'),\n    'algorithm': dict(MAX_VALUE='20', MIN_VALUE='10')\n})\n```\n\nIt expects data type `Dict[str, Dict[str, str]]`, i.e. such that `string_value = d['section_name']['key_name']`. Everything should be provided as string data so that it can be parsed in the same way as if data was coming from a file or elsewhere.\n\nThis is an alternative way of supplying default values instead of using the `default` option when defining your `key`s. Just provide a `DictConfigSource` as the lowest priority source, containing your defaults.\n\n### Writing your own `ConfigSource`s\nAn abstract base class `ConfigSource` is supplied. You should extend it and implement the method `get_config_value` as demonstrated below, which takes a section name and key name, and returns either a `str` config value, or `None` if the value could not be found. It should not error if the value cannot be found, `Config` will throw an error later if it still can't find the value in any of its other available sources. To make it easier for the user try to make your source case insensitive.\n\nHere's an outline of how you might implement a source to read your config from a JSON file, for example. Use the `__init__` method to provide any information your source needs to fetch the data, such as filename, api details, etc. You can do sanity checks in the `__init__` method and throw an error if something is wrong.\n```python\nimport json\nfrom typing import Optional\nfrom typedconfig.source import ConfigSource\n\nclass JsonConfigSource(ConfigSource):\n    def __init__(self, filename: str):\n        # Read data - will raise an exception if problem with file\n        with open(filename, 'r') as f:\n            self.data = json.load(f)\n        # Quick checks on data format\n        assert type(self.data) is dict\n        for k, v in self.data.items():\n            assert type(k) is str\n            assert type(v) is dict\n            for v_k, v_v in v.items():\n                assert type(v_k) is str\n                assert type(v_v) is str\n        # Convert all keys to lowercase\n        self.data = {\n            k.lower(): {\n                v_k.lower(): v_v\n                for v_k, v_v in v.items()\n            }\n            for k, v in self.data.items()\n        }    \n\n    def get_config_value(self, section_name: str, key_name: str) -> Optional[str]:\n        # Extract info from data which we read in during __init__\n        section = self.data.get(section_name.lower(), None)\n        if section is None:\n            return None\n        return section.get(key_name.lower(), None)\n```\n\n### Additional config sources\nIn order to keep `typed-config` dependency free, `ConfigSources` requiring additional dependencies are in separate packages, which also have `typed-config` as a dependency.\n\nThese are listed here:\n\n| pip install name | import name | Description |\n| --- | --- | --- |\n| [typed-config-aws-sources](https://pypi.org/project/typed-config-aws-sources) | `typedconfig_awssource` | Config sources using `boto3` to get config e.g. from S3 or DynamoDB\n\n\n## Cast function library\nThe `typedconfig.casts` module contains helper functions that implement common casting operations. These would generally be passed to the `cast` parameter of the `key()` function\n\n### Casting to an `Enum` type with `enum_cast`\nthe `enum_cast` function converts a string input from a source to an member of an `Enum` type. \n\nFor example:\n```python\nfrom enum import Enum\nfrom typedconfig.casts import enum_cast\nfrom typedconfig import Config, key\n...\nclass ColorEnum(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n...\n\nclass MyConfig(Config):\n    color = key(cast=enum_cast(ColorEnum))\n```\n\nIn this example, if the `ConfigSource` reads the string `\"RED\"`, the value of `color` will be set to `ColorEnum.RED`\n\nNote that the `enum_cast` function is designed to read the *name* of an enum member, not its value (`1`, `2` or `3` in the example above)\n\n### Casting to a `tuple` with `tuple_cast`\nIf the source contains a list of items, `tuple_cast` will parse them as a python tuple, optionally applying a \nbase_cast function to each element. \nThe default behavior is to call strip() on each element and ignore trailing delimiters.\n\nFor example, given the input\n```ini\nnums = 1, 2, 3, 4,\n```\n\nThen you could use\n\n```python\nnums = key(cast=tuple_cast())\n```\nto read the string input and cast it to `(\"1\", \"2\", \"3\", \"4\")`\n\n```python\nkey(cast=tuple_cast(base_cast=int))\n```\nWould cast the input to `(1, 2, 3, 4)`\n\n```python\nkey(cast=tuple_cast(ignore_trailing_delimiter=False))\n```\nWould cast the input to `(\"1\", \"2\", \"3\", \"4\", \"\")`\n\n```python\nkey(cast=tuple_cast(strip=False))\n```\nWould cast the input to `(\"1\", \" 2\", \" 3\", \" 4\")`\n\nFinally, if a delimiter other that \",\" is used - say the input string is `\"1:2:3:4\"` - that can be handled like\n```python\nkey(cast=tuple_cast(delimiter=\":\"))\n```\n\n## Contributing\nIdeas for new features and pull requests are welcome. PRs must come with tests included. This was developed using Python 3.7 but Travis tests run with all versions 3.6-3.9 too.\n\n### Development setup\n1. Clone the git repository\n2. Create a virtual environment `virtualenv venv`\n3. Activate the environment `venv/scripts/activate`\n4. Install development dependencies `pip install -r requirements.txt`\n\n### Code style\nCode style is `black` and this is checked by the CI. To autoformat your code as `black` before committing, just run `black typedconfig test`\n\n### Running tests\n`pytest`\n\nTo run with coverage:\n\n`pytest --cov`\n\n### Making a release\n1. Bump version number in `typedconfig/__version__.py`\n1. Add changes to [CHANGELOG.md](CHANGELOG.md)\n1. Commit your changes and tag with `git tag -a v0.1.0 -m \"Summary of changes\"`\n1. Travis will deploy the release to PyPi for you.\n\n#### Staging release\nIf you want to check how a release will look on PyPi before tagging and making it live, you can do the following:\n1. `pip install twine` if you don't already have it\n1. Bump version number in `typedconfig/__version__.py`\n1. Clear the dist directory `rm -r dist`\n1. `python setup.py sdist bdist_wheel`\n1. `twine check dist/*`\n1. Upload to the test PyPI `twine upload --repository-url https://test.pypi.org/legacy/ dist/*`\n1. Check all looks ok at [https://test.pypi.org/project/typed-config](https://test.pypi.org/project/typed-config)\n1. If all looks good you can git tag and push for deploy to live PyPi\n\nHere is [a good tutorial](https://realpython.com/pypi-publish-python-package) on publishing packages to PyPI.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bwindsor/typed-config",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "typed-config",
    "package_url": "https://pypi.org/project/typed-config/",
    "platform": null,
    "project_url": "https://pypi.org/project/typed-config/",
    "project_urls": {
      "Homepage": "https://github.com/bwindsor/typed-config"
    },
    "release_url": "https://pypi.org/project/typed-config/1.3.2/",
    "requires_dist": [
      "typing-extensions (>=3.10.0) ; python_version < \"3.8.0\""
    ],
    "requires_python": ">=3.6.0",
    "summary": "Typed, extensible, dependency free configuration reader for Python projects for multiple config sources and working well in IDEs for great autocomplete performance.",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16147520,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e39eb05414ce55aa948b425850cb343abacc5c669515757d435aa720d5b19e8c",
          "md5": "b021510b121541dc18ade41159a764eb",
          "sha256": "ad0f1800da5d6968ea0fb5e5caecf64d91860e80aa74aa045099a6228f847dbd"
        },
        "downloads": -1,
        "filename": "typed_config-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b021510b121541dc18ade41159a764eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 11856,
        "upload_time": "2019-03-20T17:56:45",
        "upload_time_iso_8601": "2019-03-20T17:56:45.992692Z",
        "url": "https://files.pythonhosted.org/packages/e3/9e/b05414ce55aa948b425850cb343abacc5c669515757d435aa720d5b19e8c/typed_config-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e37bc2054746a06d41c186361a76d801ed5421ca5c79e775aa9996e458977145",
          "md5": "5ce536175e2df8121fdcb42c6575944a",
          "sha256": "c7460ed1c5a83e7504817c65453624bb5ed366971fdd42beca441e58643baab9"
        },
        "downloads": -1,
        "filename": "typed-config-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5ce536175e2df8121fdcb42c6575944a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 17519,
        "upload_time": "2019-03-20T17:56:47",
        "upload_time_iso_8601": "2019-03-20T17:56:47.987913Z",
        "url": "https://files.pythonhosted.org/packages/e3/7b/c2054746a06d41c186361a76d801ed5421ca5c79e775aa9996e458977145/typed-config-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bb3b4d2af26c4fed3c99c1ad26c2b0d933080392b7eb209217a33fd7588f1e1",
          "md5": "210cff15abc245acb66454a4fbc3cd6d",
          "sha256": "a7beb7243e2e3f41e732583c94a37b82c650f21209384448347e18b2529988aa"
        },
        "downloads": -1,
        "filename": "typed_config-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "210cff15abc245acb66454a4fbc3cd6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 11864,
        "upload_time": "2019-05-09T11:23:35",
        "upload_time_iso_8601": "2019-05-09T11:23:35.494369Z",
        "url": "https://files.pythonhosted.org/packages/5b/b3/b4d2af26c4fed3c99c1ad26c2b0d933080392b7eb209217a33fd7588f1e1/typed_config-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b7490bf73ce5b2cb1e29412b3c8e984bd514ed386cb7633dbfcdd24740d65f1",
          "md5": "343343be9fe4a36bf1ff9ec3d3d14abe",
          "sha256": "71ae2592408776036a6a8ae6d015132ccc3cd58d369c0902953ed35877e9acd0"
        },
        "downloads": -1,
        "filename": "typed-config-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "343343be9fe4a36bf1ff9ec3d3d14abe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 18253,
        "upload_time": "2019-05-09T11:23:36",
        "upload_time_iso_8601": "2019-05-09T11:23:36.665786Z",
        "url": "https://files.pythonhosted.org/packages/6b/74/90bf73ce5b2cb1e29412b3c8e984bd514ed386cb7633dbfcdd24740d65f1/typed-config-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b157f05b88407124da7ebff2f7dff9062d17ff94fffa58ff6d8b689609ef11f",
          "md5": "2a54cfcb8f0a60430c6838c0fa0bc2f1",
          "sha256": "0b32f099029291b81245e05e736a9b98b68d9b370419e0067ca841fb456eccd9"
        },
        "downloads": -1,
        "filename": "typed_config-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a54cfcb8f0a60430c6838c0fa0bc2f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 12444,
        "upload_time": "2020-03-11T11:34:41",
        "upload_time_iso_8601": "2020-03-11T11:34:41.054211Z",
        "url": "https://files.pythonhosted.org/packages/0b/15/7f05b88407124da7ebff2f7dff9062d17ff94fffa58ff6d8b689609ef11f/typed_config-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee40e833b053bf15c635a245105dddd69d6a77e675d955c154ae2aea3c69c254",
          "md5": "12af7e4dd708aaa1f15d5ac239543494",
          "sha256": "1fd5390b12f14df00ab8e07102a263435bee476b72b241d61e6fa252f6250757"
        },
        "downloads": -1,
        "filename": "typed-config-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "12af7e4dd708aaa1f15d5ac239543494",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 18904,
        "upload_time": "2020-03-11T11:34:42",
        "upload_time_iso_8601": "2020-03-11T11:34:42.225002Z",
        "url": "https://files.pythonhosted.org/packages/ee/40/e833b053bf15c635a245105dddd69d6a77e675d955c154ae2aea3c69c254/typed-config-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ec3dfe6d2951ceea5b4fb30340fbff38efefe25ad3ab2d3e414d596abbf48e5",
          "md5": "4d0bc47117e0c275f2b971b007bf2777",
          "sha256": "69aa7c34df80e131d05472e3c578682d801411c4d1bf38ca8116e55a7f2f1bc7"
        },
        "downloads": -1,
        "filename": "typed_config-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d0bc47117e0c275f2b971b007bf2777",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 12340,
        "upload_time": "2020-03-11T12:52:29",
        "upload_time_iso_8601": "2020-03-11T12:52:29.376144Z",
        "url": "https://files.pythonhosted.org/packages/9e/c3/dfe6d2951ceea5b4fb30340fbff38efefe25ad3ab2d3e414d596abbf48e5/typed_config-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fd1eea247cc9ed8a1fcb018005e030e466b769445972d66a16e0c5750e49c7a",
          "md5": "cc10ee5a9e3ea9ba417e340a014de420",
          "sha256": "72dba868b3230ed9cd056b60ae3c07e461b7249e734fded46aeab079cacfe26b"
        },
        "downloads": -1,
        "filename": "typed-config-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cc10ee5a9e3ea9ba417e340a014de420",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 18467,
        "upload_time": "2020-03-11T12:52:31",
        "upload_time_iso_8601": "2020-03-11T12:52:31.082823Z",
        "url": "https://files.pythonhosted.org/packages/8f/d1/eea247cc9ed8a1fcb018005e030e466b769445972d66a16e0c5750e49c7a/typed-config-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f3e9744e6022e62c189f8d4515e73ce3654715f9028a8bee06dc9c7bf7aa76f",
          "md5": "7c52ccf8d597bbea30b31fd3f7c87fc1",
          "sha256": "7d6786b8aaf5151c9569c622360d91928487b58f47143562fe0011b4c32f526d"
        },
        "downloads": -1,
        "filename": "typed_config-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c52ccf8d597bbea30b31fd3f7c87fc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 12467,
        "upload_time": "2021-02-25T11:15:04",
        "upload_time_iso_8601": "2021-02-25T11:15:04.876116Z",
        "url": "https://files.pythonhosted.org/packages/0f/3e/9744e6022e62c189f8d4515e73ce3654715f9028a8bee06dc9c7bf7aa76f/typed_config-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e667695536ed5f3517c71e6f3acfbefb7af2963b990f86907fad5f0a37147c17",
          "md5": "32ff04123c68efd4ab597877561aeb42",
          "sha256": "ea488ffb2b33747ce8b1543ec9c7a4f3e7927622f3fcadaeacfe75974fdc362e"
        },
        "downloads": -1,
        "filename": "typed-config-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "32ff04123c68efd4ab597877561aeb42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 18634,
        "upload_time": "2021-02-25T11:15:06",
        "upload_time_iso_8601": "2021-02-25T11:15:06.703611Z",
        "url": "https://files.pythonhosted.org/packages/e6/67/695536ed5f3517c71e6f3acfbefb7af2963b990f86907fad5f0a37147c17/typed-config-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f7dcb96f89d687660c0ff083b6a4a62d2e8649bcfdcea22f703a95f6134a438",
          "md5": "4f45b53da2ac050fb270c4ea95be9eea",
          "sha256": "ae433e11f512600481c361f3cde8a11861365ff23eccc3dacf0500b6bd2543ac"
        },
        "downloads": -1,
        "filename": "typed_config-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f45b53da2ac050fb270c4ea95be9eea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 12512,
        "upload_time": "2021-02-25T11:35:30",
        "upload_time_iso_8601": "2021-02-25T11:35:30.703335Z",
        "url": "https://files.pythonhosted.org/packages/5f/7d/cb96f89d687660c0ff083b6a4a62d2e8649bcfdcea22f703a95f6134a438/typed_config-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18f0d1eb830969587b41ed5168823f0becb00b8e3aa0c24762b2d65b24002758",
          "md5": "c3cbbf159ddde9a090df38984b017cd3",
          "sha256": "d8ceea03a9bd45039fbf4dba01068382ff8d4292d28ffbaf670b1563d05c33e6"
        },
        "downloads": -1,
        "filename": "typed-config-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c3cbbf159ddde9a090df38984b017cd3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 18698,
        "upload_time": "2021-02-25T11:35:32",
        "upload_time_iso_8601": "2021-02-25T11:35:32.610204Z",
        "url": "https://files.pythonhosted.org/packages/18/f0/d1eb830969587b41ed5168823f0becb00b8e3aa0c24762b2d65b24002758/typed-config-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcb21ba28db3f995283d5d12f27906815f18fc8184a1e0792e74b85ec3484777",
          "md5": "1938ca195ada67cbf9b8d3eccfa2172a",
          "sha256": "0fff194540c458c55a6d7a25c885056e97ace0d1d44b8ffe45ec5e87ef979bca"
        },
        "downloads": -1,
        "filename": "typed_config-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1938ca195ada67cbf9b8d3eccfa2172a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 12116,
        "upload_time": "2021-03-03T18:45:54",
        "upload_time_iso_8601": "2021-03-03T18:45:54.199444Z",
        "url": "https://files.pythonhosted.org/packages/fc/b2/1ba28db3f995283d5d12f27906815f18fc8184a1e0792e74b85ec3484777/typed_config-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c13d80afb154f255c5031fe88424bbd6520ffa204ded241bc7cbfede1f4ae46b",
          "md5": "19a2ffbedf02a7b271830b5d7e361e92",
          "sha256": "b21045c15fedad1bf54104c476b9d0041bf9381cbd95fe7a027a0e04db21123c"
        },
        "downloads": -1,
        "filename": "typed-config-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "19a2ffbedf02a7b271830b5d7e361e92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 13462,
        "upload_time": "2021-03-03T18:45:55",
        "upload_time_iso_8601": "2021-03-03T18:45:55.382196Z",
        "url": "https://files.pythonhosted.org/packages/c1/3d/80afb154f255c5031fe88424bbd6520ffa204ded241bc7cbfede1f4ae46b/typed-config-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fb419725308147575393b96d619fe2a824cba34e738a97398d8981490f0e7ba",
          "md5": "2d2f57cbe800fd3fda77a137e09e154e",
          "sha256": "423a97721a00de9282547fa4589c115f37d60540c62d108dfb8f93641e4d93d3"
        },
        "downloads": -1,
        "filename": "typed_config-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d2f57cbe800fd3fda77a137e09e154e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 13410,
        "upload_time": "2021-03-05T18:01:28",
        "upload_time_iso_8601": "2021-03-05T18:01:28.986805Z",
        "url": "https://files.pythonhosted.org/packages/9f/b4/19725308147575393b96d619fe2a824cba34e738a97398d8981490f0e7ba/typed_config-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30db4f3a91ad0b834f8259b11c6053f3b886bdda1ba5f4935c5cd39ab3d8fca7",
          "md5": "8388e6de9284f10e342dfec7fd3160f0",
          "sha256": "11e6bedfa42b809bee1906b93f780a261976a77910f2012c63fb1a8f6d13176c"
        },
        "downloads": -1,
        "filename": "typed-config-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8388e6de9284f10e342dfec7fd3160f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 20583,
        "upload_time": "2021-03-05T18:01:30",
        "upload_time_iso_8601": "2021-03-05T18:01:30.481541Z",
        "url": "https://files.pythonhosted.org/packages/30/db/4f3a91ad0b834f8259b11c6053f3b886bdda1ba5f4935c5cd39ab3d8fca7/typed-config-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f21b437b5ce3a8030ce93fc0610c03ad90ba684ab2d83268cf3c1655b209e59",
          "md5": "541ca385cb6253b726d42e2e8c2b02b7",
          "sha256": "841a78c351f859e2f751fe686c6e8d276915b10a350871243a176c5d6409486a"
        },
        "downloads": -1,
        "filename": "typed_config-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "541ca385cb6253b726d42e2e8c2b02b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 14068,
        "upload_time": "2021-03-05T18:54:33",
        "upload_time_iso_8601": "2021-03-05T18:54:33.870944Z",
        "url": "https://files.pythonhosted.org/packages/4f/21/b437b5ce3a8030ce93fc0610c03ad90ba684ab2d83268cf3c1655b209e59/typed_config-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb4f7e14a7e46ab68f8fcb5e4126c930f89d5f81a58afce7138702db7d5b12b0",
          "md5": "201a13bc288b19547a4d96b1ad0a13f4",
          "sha256": "49a747f7611b6cf8acb6df40daa6c32f59339251cf2abc7ca00251ef5cc8042e"
        },
        "downloads": -1,
        "filename": "typed-config-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "201a13bc288b19547a4d96b1ad0a13f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 21732,
        "upload_time": "2021-03-05T18:54:35",
        "upload_time_iso_8601": "2021-03-05T18:54:35.050611Z",
        "url": "https://files.pythonhosted.org/packages/cb/4f/7e14a7e46ab68f8fcb5e4126c930f89d5f81a58afce7138702db7d5b12b0/typed-config-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2ba720c5c1a0485822ca38adf7573df75108faeaa1607621294779213243d07",
          "md5": "565b0fe496ca0ab6cb4900e535162950",
          "sha256": "2fe9dc65f1cbb22cf60734f8e5dffc706a9435ce4bd50d30d95a65c35e691e35"
        },
        "downloads": -1,
        "filename": "typed_config-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "565b0fe496ca0ab6cb4900e535162950",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 14192,
        "upload_time": "2021-09-09T09:30:37",
        "upload_time_iso_8601": "2021-09-09T09:30:37.939290Z",
        "url": "https://files.pythonhosted.org/packages/f2/ba/720c5c1a0485822ca38adf7573df75108faeaa1607621294779213243d07/typed_config-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "824b3e609cd80cceccdf208de2333583007b442275973d1acec42d8335be60b0",
          "md5": "7bdda79d26bd36a0351fc06807d56112",
          "sha256": "30a790e490bbb101da9a6fb3f917f5baceb8c5919635bdec31c9d70c96a8449c"
        },
        "downloads": -1,
        "filename": "typed-config-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7bdda79d26bd36a0351fc06807d56112",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 21193,
        "upload_time": "2021-09-09T09:30:39",
        "upload_time_iso_8601": "2021-09-09T09:30:39.500213Z",
        "url": "https://files.pythonhosted.org/packages/82/4b/3e609cd80cceccdf208de2333583007b442275973d1acec42d8335be60b0/typed-config-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d0c1d39ca1ed3124125fa560499c2250a539fe16c70dd09791ec348c7a28a9b",
          "md5": "ad4bd83a33630c960faaab84bb8674d5",
          "sha256": "4ab1d45d4142ca2d924da4ed183839e97690466f699f88d4e32976a9d8a4fddc"
        },
        "downloads": -1,
        "filename": "typed_config-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad4bd83a33630c960faaab84bb8674d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 15315,
        "upload_time": "2021-09-09T09:38:14",
        "upload_time_iso_8601": "2021-09-09T09:38:14.794276Z",
        "url": "https://files.pythonhosted.org/packages/2d/0c/1d39ca1ed3124125fa560499c2250a539fe16c70dd09791ec348c7a28a9b/typed_config-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3bfbd9d64b0ad2ee48015e709e797edd9d006de831900c4989ba97f7ea5e26f",
          "md5": "86aa03128932aa537976e9d6fd8f718d",
          "sha256": "b465f6e0181375d28b7265dbb44d6612b6aa11c918e7786d29d817187478edca"
        },
        "downloads": -1,
        "filename": "typed-config-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "86aa03128932aa537976e9d6fd8f718d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 23495,
        "upload_time": "2021-09-09T09:38:16",
        "upload_time_iso_8601": "2021-09-09T09:38:16.358783Z",
        "url": "https://files.pythonhosted.org/packages/c3/bf/bd9d64b0ad2ee48015e709e797edd9d006de831900c4989ba97f7ea5e26f/typed-config-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "165a0bbde653fbd9904d14dae9e4195a79953d8f5c0ef7ef82f27089ba73d209",
          "md5": "948baabd4cee5a88fbcf604273cc6918",
          "sha256": "677d375c8f4390514a57adeae595b62a515d9ecc179d87ceb7d4149124938663"
        },
        "downloads": -1,
        "filename": "typed_config-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "948baabd4cee5a88fbcf604273cc6918",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 16050,
        "upload_time": "2021-11-03T11:08:36",
        "upload_time_iso_8601": "2021-11-03T11:08:36.060804Z",
        "url": "https://files.pythonhosted.org/packages/16/5a/0bbde653fbd9904d14dae9e4195a79953d8f5c0ef7ef82f27089ba73d209/typed_config-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d01833fa2eee9a0eea43c62910873cfe892dc359179542856b196742dfdb1cb",
          "md5": "3b865645df34e8daba1a1b9c7807cc2c",
          "sha256": "9b8611cc5d300101f9558e74cdbf70aa372e8d458e04612085b25e6a67419ef9"
        },
        "downloads": -1,
        "filename": "typed-config-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b865645df34e8daba1a1b9c7807cc2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 17977,
        "upload_time": "2021-11-03T11:08:37",
        "upload_time_iso_8601": "2021-11-03T11:08:37.663736Z",
        "url": "https://files.pythonhosted.org/packages/8d/01/833fa2eee9a0eea43c62910873cfe892dc359179542856b196742dfdb1cb/typed-config-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4595aa863a671c4bb5eb3188f000aff0d67a1554fd27f8f03f02f8637937b03",
          "md5": "7c50e7f8b62d33b05eebe937761e5c1f",
          "sha256": "d54d790173244c20548c4659a1c9925975632c7e54f462de221e9312318de220"
        },
        "downloads": -1,
        "filename": "typed_config-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c50e7f8b62d33b05eebe937761e5c1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 16051,
        "upload_time": "2021-11-03T12:23:00",
        "upload_time_iso_8601": "2021-11-03T12:23:00.449368Z",
        "url": "https://files.pythonhosted.org/packages/a4/59/5aa863a671c4bb5eb3188f000aff0d67a1554fd27f8f03f02f8637937b03/typed_config-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4a1b71d2a5e3e2092bdc33d1982b67f630cc59efac1d372bf6b374b062cb3a0",
          "md5": "6648adec0f3fc727e92a0ce37f18fe99",
          "sha256": "79a01078263c2947f433285b9816f6788e4c078d42b8e0e407269af182a9b32f"
        },
        "downloads": -1,
        "filename": "typed-config-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6648adec0f3fc727e92a0ce37f18fe99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 24772,
        "upload_time": "2021-11-03T12:23:01",
        "upload_time_iso_8601": "2021-11-03T12:23:01.699195Z",
        "url": "https://files.pythonhosted.org/packages/d4/a1/b71d2a5e3e2092bdc33d1982b67f630cc59efac1d372bf6b374b062cb3a0/typed-config-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abace9d378403082573c75df420aa75ea1f004e50713caf9d5c8b1be6553be4e",
          "md5": "cd60668c1e641831cd9067300011123f",
          "sha256": "a1bb24656643e06dc3831df3f6b154774671d414e594066ec1dfc3fa1e923558"
        },
        "downloads": -1,
        "filename": "typed_config-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd60668c1e641831cd9067300011123f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 16082,
        "upload_time": "2021-11-03T13:14:01",
        "upload_time_iso_8601": "2021-11-03T13:14:01.182836Z",
        "url": "https://files.pythonhosted.org/packages/ab/ac/e9d378403082573c75df420aa75ea1f004e50713caf9d5c8b1be6553be4e/typed_config-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95d81d366d90c55b5957158c7fce2f49ec6b4e3c0a011ca3ec7f6f15f49dd66d",
          "md5": "a5fbc4ca18f4e322a91e8925409dbeca",
          "sha256": "833f29af682998a3a2be1e891ebe9e2cd484da5aa8071102388a39264c9b68dd"
        },
        "downloads": -1,
        "filename": "typed-config-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a5fbc4ca18f4e322a91e8925409dbeca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 18030,
        "upload_time": "2021-11-03T13:14:02",
        "upload_time_iso_8601": "2021-11-03T13:14:02.347630Z",
        "url": "https://files.pythonhosted.org/packages/95/d8/1d366d90c55b5957158c7fce2f49ec6b4e3c0a011ca3ec7f6f15f49dd66d/typed-config-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1a46bd501e88ce2d211ec2c6d963720f6dde045a7276de79a06e71c297034b5",
          "md5": "b89c13092d88881d7019eef98eb02cb1",
          "sha256": "866cb26b8172058fe1aec09a66b1d362f7f6650593e3544b80e18d65fdedee5d"
        },
        "downloads": -1,
        "filename": "typed_config-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b89c13092d88881d7019eef98eb02cb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 16062,
        "upload_time": "2021-11-12T16:18:28",
        "upload_time_iso_8601": "2021-11-12T16:18:28.895029Z",
        "url": "https://files.pythonhosted.org/packages/d1/a4/6bd501e88ce2d211ec2c6d963720f6dde045a7276de79a06e71c297034b5/typed_config-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f578e490fa624a637a8d59ed9b40aa82e87651d53582c533999e4813c771aaf",
          "md5": "44cf992d7cdfe4b4805858cdf70ba00b",
          "sha256": "a3c106f14e84d41057801d50fce8a550446275d80c665e3861868476e5a0d32a"
        },
        "downloads": -1,
        "filename": "typed-config-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "44cf992d7cdfe4b4805858cdf70ba00b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 24781,
        "upload_time": "2021-11-12T16:18:30",
        "upload_time_iso_8601": "2021-11-12T16:18:30.180885Z",
        "url": "https://files.pythonhosted.org/packages/2f/57/8e490fa624a637a8d59ed9b40aa82e87651d53582c533999e4813c771aaf/typed-config-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feaf1c29510313e91ac016a4404a79720bbf32b26ad25b8b02823ecf20b6a1e5",
          "md5": "595501ca0253e68cfa91a811b5e21a75",
          "sha256": "ed536714c4b48cc2fb5f192678ea4eadd5d69d5b122c3c4644e90b4e8c6c1c23"
        },
        "downloads": -1,
        "filename": "typed_config-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "595501ca0253e68cfa91a811b5e21a75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 16186,
        "upload_time": "2022-11-14T19:04:27",
        "upload_time_iso_8601": "2022-11-14T19:04:27.725783Z",
        "url": "https://files.pythonhosted.org/packages/fe/af/1c29510313e91ac016a4404a79720bbf32b26ad25b8b02823ecf20b6a1e5/typed_config-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01d16687c46f709c50bf3ab12749720baa86feca5a48a991a4f10784cba73209",
          "md5": "5353c6f557c6cc0853127e86d36d9a28",
          "sha256": "49ab07bf053c688d9c3298ba2bacbc02ea40727c4ea9b6b3afaf2b952ecb4810"
        },
        "downloads": -1,
        "filename": "typed-config-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5353c6f557c6cc0853127e86d36d9a28",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 24990,
        "upload_time": "2022-11-14T19:04:30",
        "upload_time_iso_8601": "2022-11-14T19:04:30.621860Z",
        "url": "https://files.pythonhosted.org/packages/01/d1/6687c46f709c50bf3ab12749720baa86feca5a48a991a4f10784cba73209/typed-config-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "250ebc719eedbb8c0099203079e89835df048d66d8a17b0836a3420f66432cbf",
          "md5": "ef31de01486a04367919a38c776b64c2",
          "sha256": "1c2518da466b4900bf9f2fdf0bfb740add82d5de4b556cf954aa7a64294af4d1"
        },
        "downloads": -1,
        "filename": "typed_config-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef31de01486a04367919a38c776b64c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 16187,
        "upload_time": "2022-11-14T19:22:29",
        "upload_time_iso_8601": "2022-11-14T19:22:29.939796Z",
        "url": "https://files.pythonhosted.org/packages/25/0e/bc719eedbb8c0099203079e89835df048d66d8a17b0836a3420f66432cbf/typed_config-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb91ce4d4c44b42b72644077a85e8cfdd0c246c667eaffb03dc099bacc9b5de8",
          "md5": "f12d676f8c627f6769f6906e19d7eea6",
          "sha256": "5f66eeddc9d5dcfa572054ecf20d407f3a3b59da5e974b53df974d51a3c44a8d"
        },
        "downloads": -1,
        "filename": "typed-config-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f12d676f8c627f6769f6906e19d7eea6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 25858,
        "upload_time": "2022-11-14T19:22:32",
        "upload_time_iso_8601": "2022-11-14T19:22:32.112969Z",
        "url": "https://files.pythonhosted.org/packages/cb/91/ce4d4c44b42b72644077a85e8cfdd0c246c667eaffb03dc099bacc9b5de8/typed-config-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "381faa61eec3e3bb95a22a2a16eacad297735961766b497f76a060bc0daa4b5b",
          "md5": "169312dad264ef2252834dfe9f7574b8",
          "sha256": "8e831deacacbd70711c207fdc0da8aa0caec257a161f759abdba7a19e492ccd5"
        },
        "downloads": -1,
        "filename": "typed_config-1.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "169312dad264ef2252834dfe9f7574b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 16919,
        "upload_time": "2022-11-28T09:35:44",
        "upload_time_iso_8601": "2022-11-28T09:35:44.073144Z",
        "url": "https://files.pythonhosted.org/packages/38/1f/aa61eec3e3bb95a22a2a16eacad297735961766b497f76a060bc0daa4b5b/typed_config-1.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "673e2ee516c45faa060d025f354e079c15a6e90a554e2325867b82dd97090497",
          "md5": "d97ace4c1b98c24988b409bf678ec532",
          "sha256": "a71293f98bca10e988d48abe995b0fb6279540653d1c4c976394bfad7dfd8a49"
        },
        "downloads": -1,
        "filename": "typed-config-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d97ace4c1b98c24988b409bf678ec532",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 27080,
        "upload_time": "2022-11-28T09:35:46",
        "upload_time_iso_8601": "2022-11-28T09:35:46.061735Z",
        "url": "https://files.pythonhosted.org/packages/67/3e/2ee516c45faa060d025f354e079c15a6e90a554e2325867b82dd97090497/typed-config-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d00241f26cee4b555e98f203db535736be73802d1b700ae5c943a2bd7c2633ad",
          "md5": "c9fc3c57f84dc83e9ebd1159a0c7f8d8",
          "sha256": "fbfb44bcc4ad9178e607e196c735cb0cd95ae79c6f5acc16824e14618f03f2e6"
        },
        "downloads": -1,
        "filename": "typed_config-1.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9fc3c57f84dc83e9ebd1159a0c7f8d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 18126,
        "upload_time": "2022-12-19T09:46:58",
        "upload_time_iso_8601": "2022-12-19T09:46:58.734715Z",
        "url": "https://files.pythonhosted.org/packages/d0/02/41f26cee4b555e98f203db535736be73802d1b700ae5c943a2bd7c2633ad/typed_config-1.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28cffb261335c7511a53986f6f68f258f0ef87078b2d85698ae9b20be924a45b",
          "md5": "74bf7db7c99539ae93f4ed3cc6e84f78",
          "sha256": "bb65dfa017dc423fa061089b2846a1c8bfd232c239f905ae374fabdf3e049aa2"
        },
        "downloads": -1,
        "filename": "typed-config-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "74bf7db7c99539ae93f4ed3cc6e84f78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 28841,
        "upload_time": "2022-12-19T09:47:00",
        "upload_time_iso_8601": "2022-12-19T09:47:00.662938Z",
        "url": "https://files.pythonhosted.org/packages/28/cf/fb261335c7511a53986f6f68f258f0ef87078b2d85698ae9b20be924a45b/typed-config-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d00241f26cee4b555e98f203db535736be73802d1b700ae5c943a2bd7c2633ad",
        "md5": "c9fc3c57f84dc83e9ebd1159a0c7f8d8",
        "sha256": "fbfb44bcc4ad9178e607e196c735cb0cd95ae79c6f5acc16824e14618f03f2e6"
      },
      "downloads": -1,
      "filename": "typed_config-1.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c9fc3c57f84dc83e9ebd1159a0c7f8d8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 18126,
      "upload_time": "2022-12-19T09:46:58",
      "upload_time_iso_8601": "2022-12-19T09:46:58.734715Z",
      "url": "https://files.pythonhosted.org/packages/d0/02/41f26cee4b555e98f203db535736be73802d1b700ae5c943a2bd7c2633ad/typed_config-1.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28cffb261335c7511a53986f6f68f258f0ef87078b2d85698ae9b20be924a45b",
        "md5": "74bf7db7c99539ae93f4ed3cc6e84f78",
        "sha256": "bb65dfa017dc423fa061089b2846a1c8bfd232c239f905ae374fabdf3e049aa2"
      },
      "downloads": -1,
      "filename": "typed-config-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "74bf7db7c99539ae93f4ed3cc6e84f78",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 28841,
      "upload_time": "2022-12-19T09:47:00",
      "upload_time_iso_8601": "2022-12-19T09:47:00.662938Z",
      "url": "https://files.pythonhosted.org/packages/28/cf/fb261335c7511a53986f6f68f258f0ef87078b2d85698ae9b20be924a45b/typed-config-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}