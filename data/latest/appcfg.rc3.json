{
  "info": {
    "author": "bjoluc",
    "author_email": "mail@bjoluc.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries",
      "Typing :: Typed"
    ],
    "description": "# appcfg\n\n[![PyPI version fury.io](https://badge.fury.io/py/appcfg.svg)](https://pypi.python.org/pypi/appcfg/)\n[![Build Status](https://travis-ci.com/bjoluc/appcfg.svg?branch=master)](https://travis-ci.com/bjoluc/appcfg)\n[![codecov](https://codecov.io/gh/bjoluc/appcfg/branch/master/graph/badge.svg)](https://codecov.io/gh/bjoluc/appcfg)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/appcfg.svg)](https://pypi.python.org/pypi/appcfg/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nFlexible hierarchic Python application configuration inspired by [node-config](https://github.com/lorenwest/node-config)\n\n## Motivation\n\nApplications (especially web services) often require certain configuration options to depend on the environment an application runs in (development, testing, production, etc.).\nFor instance, a database address config option may default to a local database server during development, a mock database server during testing, and yet another database server during production.\nIt may also need to be customizable via an environment variable.\n`appcfg` approaches scenarios like this and, similar to [node-config](https://github.com/lorenwest/node-config) for Node.js, allows to specify default configuration options for various environments and optionally override them by custom environment variables.\n\n## Getting Started\n\nLet's start by installing `appcfg` with ```pip install appcfg[yaml]```, or simply ```pip install appcfg``` if you want to use the JSON format instead of YAML for config files.\n\nIn the top-level directory of your application (where the topmost `__init__.py` file is located), create a `config` directory.\nIf your application consists of a single Python file, just locate the `config` directory next to it.\nHere's an example project tree that we will refer to in the rest of this section:\n\n```diff\n ├── myproject\n │   ├── __init__.py\n+│   ├── config\n+|   |   └── ...\n |   ├── anothermodule.py\n │   └── myproject.py\n ├── tests\n │   ├── __init__.py\n │   └── test_myproject.py\n```\n\nWithin the `config` directory, create a `default.yml` file (or `default.json`, if you prefer that).\nThis file will hold your default configuration.\nIn the database example from the previous section, `default.yml` might look like this:\n\n```yaml\ndatabases:\n    mongo:\n        host: localhost\n        port: 27017\n        user: myuser\n        pass: mypassword\nsecrets:\n    mysecret: secret\n```\n\nWithin any module in the `myproject` package, we can now simply access that configuration as a `dict` object:\n\n```python\nfrom appcfg import get_config\n\nconfig = get_config(__name__)\nprint(config[\"databases\"][\"mongo\"][\"host\"])\n```\n\n`__name__` is passed to `get_config` so that it can infer the project root path where the `config` directory is located.\nThis way, `appcfg` can be used independently in multiple projects loaded at the same time, and projects can also retrieve one another's configuration.\nFor instance, in `test_myproject.py`, the configuration of `myproject` could be retrieved with `get_config(\"myproject\")`.\n\n## Environments\n\nLet's add an override config file for production, `production.yml`:\n\n```yaml\ndatabases:\n    mongo:\n        host: mongodb\n```\n\nAnd one for testing, `test.yml`:\n\n```yaml\ndatabases:\n    mongo:\n        host: mock\nsecrets:\n    mysecret: wellknown\n```\n\nBy default, none of these config files will be used.\nHowever, an environment can be specified by setting the `ENV` environment variable (alternatively, `PY_ENV` or `ENVIRONMENT` are also supported).\nIn this case, the configuration options from the corresponding config file will be merged into the ones from `default.yml`.\nIf, for instance, `ENV` is set to `production`, the config dict returned from `get_config()` will contain all the values from `default.yml`, but `config[\"databases\"][\"mongo\"][\"host\"]` will be set to `mongodb` instead of `localhost`.\nSimilarly, with `ENV=test`, `config[\"databases\"][\"mongo\"][\"host\"]` would be `mock` and, `config[\"secret\"][\"mysecret\"]` would be `wellknown`.\nIn case `ENV` is set but no corresponding config file is found, `get_config()` returns the options from the `default` config file.\n\n## Custom Environment Variables\n\nLet's say, we want the database host, user, and password, and the secret to be customizable via additional environment variables.\nThis can be achieved by adding an `env-vars.yml` config file with the following contents:\n\n```yaml\ndatabases:\n    mongo:\n        host: MONGO_HOST\n        user: MONGO_USER\n        pass: MONGO_PASS\nsecrets:\n    mysecret: MY_SECRET\n```\n\nThis way, if one of the specified environment variables is set, it will override the corresponding field's value from any other configuration file.\nOtherwise, that value is left untouched.\nFor instance, setting `MONGO_HOST=myhost` would result in `config[\"databases\"][\"mongo\"][\"host\"]` to be `myhost`, ignoring `localhost` from `default.yml` or `mongodb` from `production.yml`.\nNote that config values set via environment variables are always of type `str`, regardless of the overridden value's type.\n\n## Tips and Tricks\n\n### Environment Specification with pytest\n\nYou may wish to set `ENV=test` during unit tests without manually specifying it for every `pytest` invocation.\n[pytest-env](https://github.com/MobileDynasty/pytest-env) can do the job for you if you specify\n\n```ini\n[pytest]\nenv =\n    ENV=test\n```\n\nin your pytest configuration.\n\n<!-- BEING API DOC -->\n\n## API\n\n\n### get_config\n\nReturns a dict that contains the content of `default.json` or `default.yml` in the `config` directory within the root module's directory, inferred from `module_name`.\n\n\nIf an `ENV`, `PY_ENV`, or `ENVIRONMENT` variable is set (listed in the order of\nprecedence), and a config file with a base name corresponding to that variable's\nvalue is found, the contents of that config file are merged into the default\nconfiguration. Additionally, the environment variables specified in `env-vars.json`\nor `env-vars.yml` override any other configuration when they are set.\n\nIf none of `ENV`, `PY_ENV`, or `ENVIRONMENT` is set, only the `default` config file\nwill be loaded and optionally be overridden by custom environment variables as\nspecified in the `env-vars` config file. The `ENV` values \"dev\" and \"develop\" map to\nthe `development.json` or `development.yml` config file.\n\n**Arguments**:\n\n- `module_name` (`str`): The name of the module (or any of its submodules) for which\n  the configuration should be loaded. `__name__` can be used when `get_config()` is\n  called from the Python project that contains the `config` directory. Note that\n  `appcfg` requires the `config` directory to be a direct child of the top-level\n  package directory, or, if not a package, the directory that contains the specified\n  module.\n\n- `cached` (`bool`): If `True` (the default), the configuration for each `config`\n  directory will only be loaded once and the same dict object will be returned by\n  every subsequent call to `get_config()`.\n\n\n### get_env\n\nIf an `ENV`, `PY_ENV`, or `ENVIRONMENT` (listed in the order of precedence) environment variable is set, return the value of it. Otherwise, return \"default\".\n\n\nSpecial cases:\n  - \"dev\" and \"develop\" are mapped to \"development\"\n\n<!-- END API DOC -->\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bjoluc/appcfg",
    "keywords": "app,application,config,configuration,env,environment,node-config",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "appcfg",
    "package_url": "https://pypi.org/project/appcfg/",
    "platform": "",
    "project_url": "https://pypi.org/project/appcfg/",
    "project_urls": {
      "Documentation": "https://github.com/bjoluc/appcfg#readme",
      "Homepage": "https://github.com/bjoluc/appcfg",
      "Repository": "https://github.com/bjoluc/appcfg"
    },
    "release_url": "https://pypi.org/project/appcfg/1.1.1/",
    "requires_dist": [
      "deepmerge (>=0.1.0,<0.2.0)",
      "pyyaml (>=5.3.1,<6.0.0); extra == \"yaml\""
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Flexible hierarchic Python application configuration",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7416698,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20cd3da3956384393bd6e1eb76102462f369d65bcd3fcb80455d63a2b3f1d32d",
          "md5": "3e2d50a0d4b009c3b6826ee8014b7a2c",
          "sha256": "248010149ead282c06ba95d56845584a3b2c9be59557e9048b60ff4da2a4ce2c"
        },
        "downloads": -1,
        "filename": "appcfg-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e2d50a0d4b009c3b6826ee8014b7a2c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 7570,
        "upload_time": "2020-06-01T15:07:12",
        "upload_time_iso_8601": "2020-06-01T15:07:12.087409Z",
        "url": "https://files.pythonhosted.org/packages/20/cd/3da3956384393bd6e1eb76102462f369d65bcd3fcb80455d63a2b3f1d32d/appcfg-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60b00ec732f914322eb6e08f76666c8c92203c8329fb57954d9c3e752100da80",
          "md5": "093601956a42ae3adcd70702acd904be",
          "sha256": "66d283c4d3de90a4f5c61822e0a38d9fad427b2f5ca8a3a70cbc24e5ee0b5a0c"
        },
        "downloads": -1,
        "filename": "appcfg-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "093601956a42ae3adcd70702acd904be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 7195,
        "upload_time": "2020-06-01T15:07:14",
        "upload_time_iso_8601": "2020-06-01T15:07:14.141116Z",
        "url": "https://files.pythonhosted.org/packages/60/b0/0ec732f914322eb6e08f76666c8c92203c8329fb57954d9c3e752100da80/appcfg-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1fdaf1604e4f654d805fa97fb5841ad0076d81987ceb49500fd13db980dc2c3",
          "md5": "0781fcaf3e852f9c37ba4e9f50e138bd",
          "sha256": "f9ef5fadfdddcdf1dd1e67b51181483833eb34e97f56d72bf8926595996df6a9"
        },
        "downloads": -1,
        "filename": "appcfg-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0781fcaf3e852f9c37ba4e9f50e138bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 7715,
        "upload_time": "2020-06-02T16:47:27",
        "upload_time_iso_8601": "2020-06-02T16:47:27.705525Z",
        "url": "https://files.pythonhosted.org/packages/c1/fd/af1604e4f654d805fa97fb5841ad0076d81987ceb49500fd13db980dc2c3/appcfg-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff7b8090c897aa3f7ccbc8293589ecfddbee1e4ee85806bee2a6d26cd13e8362",
          "md5": "bbcf7c23fc42b5968eea4d5fa1ed4dee",
          "sha256": "512b1052e3182e88d0549a363badaa98cb08802bc68af09627d25aa51588af86"
        },
        "downloads": -1,
        "filename": "appcfg-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bbcf7c23fc42b5968eea4d5fa1ed4dee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 7296,
        "upload_time": "2020-06-02T16:47:28",
        "upload_time_iso_8601": "2020-06-02T16:47:28.635923Z",
        "url": "https://files.pythonhosted.org/packages/ff/7b/8090c897aa3f7ccbc8293589ecfddbee1e4ee85806bee2a6d26cd13e8362/appcfg-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "505542b7ba3c1971c52159462c0df6e2cc8df59e647e3f8a4e3f9338fb8a3d19",
          "md5": "dcb05d13abeec5120afda56cc7bdb478",
          "sha256": "beee561c766efc56d12f169435585b176b51942ce1b847bf7da674f5a94d968d"
        },
        "downloads": -1,
        "filename": "appcfg-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcb05d13abeec5120afda56cc7bdb478",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 7715,
        "upload_time": "2020-06-07T11:41:57",
        "upload_time_iso_8601": "2020-06-07T11:41:57.758582Z",
        "url": "https://files.pythonhosted.org/packages/50/55/42b7ba3c1971c52159462c0df6e2cc8df59e647e3f8a4e3f9338fb8a3d19/appcfg-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f571b4c64ddc6c265232a4665bab2b1cb9e75e245247fabae81391493c5f3ae",
          "md5": "88298cef9a79171e44cb077b6962d2b1",
          "sha256": "e3ab2e719747b78c49e9b2da16c8ce2e6ea9993f54669f1350b00a30f0a2095f"
        },
        "downloads": -1,
        "filename": "appcfg-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "88298cef9a79171e44cb077b6962d2b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 7298,
        "upload_time": "2020-06-07T11:41:58",
        "upload_time_iso_8601": "2020-06-07T11:41:58.871966Z",
        "url": "https://files.pythonhosted.org/packages/8f/57/1b4c64ddc6c265232a4665bab2b1cb9e75e245247fabae81391493c5f3ae/appcfg-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "505542b7ba3c1971c52159462c0df6e2cc8df59e647e3f8a4e3f9338fb8a3d19",
        "md5": "dcb05d13abeec5120afda56cc7bdb478",
        "sha256": "beee561c766efc56d12f169435585b176b51942ce1b847bf7da674f5a94d968d"
      },
      "downloads": -1,
      "filename": "appcfg-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dcb05d13abeec5120afda56cc7bdb478",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 7715,
      "upload_time": "2020-06-07T11:41:57",
      "upload_time_iso_8601": "2020-06-07T11:41:57.758582Z",
      "url": "https://files.pythonhosted.org/packages/50/55/42b7ba3c1971c52159462c0df6e2cc8df59e647e3f8a4e3f9338fb8a3d19/appcfg-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f571b4c64ddc6c265232a4665bab2b1cb9e75e245247fabae81391493c5f3ae",
        "md5": "88298cef9a79171e44cb077b6962d2b1",
        "sha256": "e3ab2e719747b78c49e9b2da16c8ce2e6ea9993f54669f1350b00a30f0a2095f"
      },
      "downloads": -1,
      "filename": "appcfg-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "88298cef9a79171e44cb077b6962d2b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 7298,
      "upload_time": "2020-06-07T11:41:58",
      "upload_time_iso_8601": "2020-06-07T11:41:58.871966Z",
      "url": "https://files.pythonhosted.org/packages/8f/57/1b4c64ddc6c265232a4665bab2b1cb9e75e245247fabae81391493c5f3ae/appcfg-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}