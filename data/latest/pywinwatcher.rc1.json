{
  "info": {
    "author": "Evgeny Drobotun",
    "author_email": "drobotun@xakep.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Win32 (MS Windows)",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Operating system event monitoring package\n=========================================\n\nThis package implements event monitoring with processes, file system, and registry.\n\nInstallation\n\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: bash\n\n    $ pip install pywinwatcher\n\nUsage\n\"\"\"\"\"\n\nProcess event monitoring\n------------------------\n\n.. code-block:: python\n\n    from threading import Thread\n    import keyboard\n    import pythoncom\n    import pywinwatcher\n\n    class Monitor(Thread):\n\n        def __init__(self, action):\n\n            Thread.__init__(self)\n            self._action = action\n\n        def run(self):\n            print('Start monitoring...')\n            #Use pythoncom.CoInitialize when starting monitoring in a thread.\n            pythoncom.CoInitialize()\n            proc_mon = pywinwatcher.ProcessMonitor(self._action)\n            while not keyboard.is_pressed('ctrl+q'):\n                proc_mon.update()\n                print(\n                    proc_mon.timestamp,\n                    proc_mon.event_type,\n                    proc_mon.name,\n                    proc_mon.process_id\n                )\n            pythoncom.CoUninitialize()\n\n    monitor = Monitor('—Åreation')\n    monitor.start()\n\nFile system event monitoring\n----------------------------\n\nExample with FileMonitorAPI class use:\n\n.. code-block:: python\n\n    from threading import Thread\n    import keyboard\n    import pywinwatcher\n\n    class Monitor(Thread):\n\n        def __init__(self, action):\n\n            Thread.__init__(self)\n            self._action = action\n\n        def run(self):\n            print('Start monitoring...')\n            file_mon = pywinwatcher.FileMonitorAPI(Path=r'c:\\\\Windows')\n            while not keyboard.is_pressed('ctrl+q'):\n                file_mon.update()\n                print(\n                    file_mon.timestamp,\n                    file_mon.event_type\n                )\n            pythoncom.CoUninitialize()\n\n    monitor = Monitor()\n    monitor.start()\n\nExample with FileMonitorWMI class use:\n\n.. code-block:: python\n\n    from threading import Thread\n    import keyboard\n    import pythoncom\n    import pywinwatcher\n\n    class Monitor(Thread):\n\n        def __init__(self):\n            Thread.__init__(self)\n\n        def run(self):\n            print('Start monitoring...')\n            #Use pythoncom.CoInitialize when starting monitoring in a thread.\n            pythoncom.CoInitialize()\n            file_mon = pywinwatcher.FileMonitorWMI(\n                Drive=r'e:',\n                Path=r'\\\\Windows\\\\',\n                FileName=r'text',\n                Extension=r'txt'\n            )\n            while not keyboard.is_pressed('ctrl+q'):\n                file_mon.update()\n                print(\n                    file_mon.timestamp,\n                    file_mon.event_type\n                )\n        pythoncom.CoUninitialize()\n\n    monitor = Monitor()\n    monitor.start()\n\nRegistry event monitoring\n-------------------------\n\nExample with RegistryMonitorAPI class use:\n\n.. code-block:: python\n\n    from threading import Thread\n    import keyboard\n    import pywinwatcher\n\n    class Monitor(Thread):\n\n        def __init__(self, action):\n\n            Thread.__init__(self)\n            self._action = action\n\n        def run(self):\n            print('Start monitoring...')\n            reg_mon = pywinwatcher.RegistryMonitorAPI(\n                'UnionChange',\n                Hive='HKEY_LOCAL_MACHINE',\n                KeyPath=r'SOFTWARE'\n            )\n            while not keyboard.is_pressed('ctrl+q'):\n                reg_mon.update()\n                print(\n                    reg_mon.timestamp,\n                    reg_mon.event_type\n                )\n            pythoncom.CoUninitialize()\n\n    monitor = Monitor()\n    monitor.start()\n\nExample with RegistryMonitorWMI class use:\n\n.. code-block:: python\n\n    from threading import Thread\n    import keyboard\n    import pythoncom\n    import pywinwatcher\n\n    class Monitor(Thread):\n\n        def __init__(self):\n            Thread.__init__(self)\n\n        def run(self):\n            print('Start monitoring...')\n            #Use pythoncom.CoInitialize when starting monitoring in a thread.\n            pythoncom.CoInitialize()\n            reg_mon = pywinwatcher.RegistryMonitorWMI(\n                'KeyChange',\n                Hive='HKEY_LOCAL_MACHINE',\n                KeyPath=r'SOFTWARE'\n            )\n            while not keyboard.is_pressed('ctrl+q'):\n                reg_mon.update()\n                print(\n                    reg_mon.timestamp,\n                    reg_mon.event_type\n                )\n        pythoncom.CoUninitialize()\n\n    monitor = Monitor()\n    monitor.start()\n\nLicense\n\"\"\"\"\"\"\"\n\nMIT Copyright (c) 2021 Evgeny Drobotun\n\n\nRelease History\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. rubric:: 0.0.1 (05.05.2021)\n\n- First release of **pywinwatcher**\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/drobotun/pywinwatcher",
    "keywords": "system event",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pywinwatcher",
    "package_url": "https://pypi.org/project/pywinwatcher/",
    "platform": "",
    "project_url": "https://pypi.org/project/pywinwatcher/",
    "project_urls": {
      "Homepage": "https://github.com/drobotun/pywinwatcher"
    },
    "release_url": "https://pypi.org/project/pywinwatcher/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Operating system event monitoring package",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10265203,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ee2296228924f59977140731fdd77650a8792ae5a6a63a4bf1ef90eb8765b47",
          "md5": "7b6817b4f452e76dedd69559e7882015",
          "sha256": "5ff7e3c0152758a0cba5cc000345c87aa50fbf8068e84e76fc2cc0f803eb31e4"
        },
        "downloads": -1,
        "filename": "pywinwatcher-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b6817b4f452e76dedd69559e7882015",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9711,
        "upload_time": "2021-05-05T12:35:47",
        "upload_time_iso_8601": "2021-05-05T12:35:47.994056Z",
        "url": "https://files.pythonhosted.org/packages/7e/e2/296228924f59977140731fdd77650a8792ae5a6a63a4bf1ef90eb8765b47/pywinwatcher-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ee2296228924f59977140731fdd77650a8792ae5a6a63a4bf1ef90eb8765b47",
        "md5": "7b6817b4f452e76dedd69559e7882015",
        "sha256": "5ff7e3c0152758a0cba5cc000345c87aa50fbf8068e84e76fc2cc0f803eb31e4"
      },
      "downloads": -1,
      "filename": "pywinwatcher-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7b6817b4f452e76dedd69559e7882015",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9711,
      "upload_time": "2021-05-05T12:35:47",
      "upload_time_iso_8601": "2021-05-05T12:35:47.994056Z",
      "url": "https://files.pythonhosted.org/packages/7e/e2/296228924f59977140731fdd77650a8792ae5a6a63a4bf1ef90eb8765b47/pywinwatcher-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}