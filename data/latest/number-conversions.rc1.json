{
  "info": {
    "author": "Muremwa",
    "author_email": "danmburu254@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Number Conversion\n=================\n\nThis package allows you to convert a number between any of the 82\nstandard bases described by\n`Wikipedia <https://en.wikipedia.org/wiki/List_of_numeral_systems>`__\nand `here </prep/systems.csv>`__. It provides both commandline options\nand in code options to convert.\n\n| The chosen 360 characters are available\n  `here </prep/numbers_map.csv>`__ along with their unicode indexes.\n| `Use in command line <#in-command-line>`__\n| `Use in python code <#in-python-code>`__\n\n--------------\n\nIn Command Line\n---------------\n\nThere are several ways to use from command line with\n``python -m convert_numbers.*`` command.\n\n.. _a-convert_numbersconvert:\n\na) convert_numbers.convert\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n| This is the simplest one time conversion command. It takes two\n  positional arguments and one optional.\n| a. **number**: The number to be converted.\n| b. **new_base**: Base to convert the number two.\n| c. **current_base**: The base of the number currently. This is an\n  optional argument. If it's not included the base is assumed to be base\n  10/Decimal. The marker is ``--current_base`` or ``-cb``.\n\n::\n\n   python -m convert_numbers.convert number new_base --current_base\n   python -m convert_numbers.convert number new_base -cb\n\n   python -m convert_numbers.convert 12 2 -cb 10\n\n.. _b-convert_numbersloop:\n\nb) convert_numbers.loop\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThis converts the input and waits for more input to convert until it's\nquit. The user types in 3 numbers separated by a space.\n\n::\n\n   number_to_convert base_to_convert_to current_base\n\nIf current_base is not provided base 10 is assumed. Runs until user\ntypes 'q'. For help type 'h'.\n\n::\n\n   python -m convert_numbers.loop\n   Enter 'number new_base current_base': number new_base current_base*\n\n   Enter 'number new_base current_base': 12 2 10*\n   '12' in Decimal (base 10) to Binary (base 2) = '1100'\n   Enter 'number new_base current_base': q\n\n.. _c-convert_numberstable:\n\nc) convert_numbers.table\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n| Takes a list from input and converts it to the new base and returns a\n  nice table as output. Takes 5 arguments, 2 positional and 3 optional.\n| a) **numbers**: A list of numbers to convert separated by comma, no\n  spaces. These numbers must be in the same base.\n| b) **new_base**: Base to convert all the numbers to.\n| c) **current_base**: Current base of all the numbers. This is an\n  optional argument. When ignored, the base is assumed to be 10.The\n  marker is ``--current_base`` or ``-cb``.\n| d) **file**: The file to write the output to. This is an optional\n  argument. When ignored, the output is the console. The marker is\n  ``--file`` or ``-f``\n| e. **in_file**: The file to be treated as input. This is an optional\n  argument. If it is included **numbers** is ignored. So it can be left\n  as 0 or anything, but never blank :( The format for in file is\n  comma-separated numbers (new lines are treated as commas). The marker\n  is ``--in_file`` or ``-if``.\n\n::\n\n   python -m convert_numbers.table 12,13,14 2 -cb=16\n\n      \n   Base 16 to base 2\n   ----------------------------\n   |  Hexadecimal  |  Binary  |\n   ----------------------------\n   |       12      |  10010   |\n   |       13      |  10011   |\n   |       14      |  10100   |\n   ----------------------------\n\nAn example of input file is found\n`here </convert_numbers/table_input.txt>`__.\n\n.. _d-convert_numbersfile:\n\nd) convert_numbers.file\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThis takes input completely from a file and outputs to another file. In\nthe file, the first line is the list of comma-separated numbers to\nconvert, the second is the new base, while the third is the current\nbase, if any otherwise it's base 10. Example input is\n`here </convert_numbers/file_input.txt>`__\n\n::\n\n   python -m convert_numbers.file input_file.txt output_file.txt\n\n   Written to 'out_file.txt'\n\nWrites a csv like file, two columns old number, new number. The first\ntwo rows are informational.\n\n--------------\n\nIn python code\n--------------\n\nSeveral functions are described by the package. They are\n``convert_number``, ``convert_from_base_10``,\n``convert_float_from_base_10``, ``convert_to_base_10`` and\n``convert_float_to_base_10``. To check user input refer to `this\nsection <#utility-functions>`__\n\nMain Functions\n~~~~~~~~~~~~~~\n\nThese, only one, can be used in isolation to convert a number from any\nbase to any other base.\n\n.. _1-convert_number:\n\n1. convert_number\n^^^^^^^^^^^^^^^^^\n\n| Used to convert a number between bases. Takes 3 arguments;\n| a) ``number``: string = The number to be converted in string form.\n| b) ``base_from``: integer = The base of ``number``.\n| c) ``base_to``: integer = The base to convert to. Return a string with\n  the new converted number\n\nUsage\n\n.. code:: python\n\n   from conversions import convert_number\n\n   convert_number('12', 10, 2) # return '1100'\n\nHelper Functions\n~~~~~~~~~~~~~~~~\n\n| They are found in ``conversions.convert`` module. These are used to\n  perform one simple action. These functions can be divided by four\n  categories;\n| 1. Category 1: Converts a number from **base 10** to **any other\n  base**.\n| 2. Category 2: Converts a number from **any base** to **base 10**.\n| 3. Category 3: Converts a number that is a whole number. These\n  functions typically belong to either of the categories above.\n| 4. Category 4: Converts a number that is a floating number. These\n  functions typically belong to either of the categories above.\n| This means that a function can be from two points of view; one, does\n  it convert a **whole number or a floating number**? two does it\n  convert **from or to base 10**? All functions typically belong to two\n  categories.\n\n.. _1-convert_from_base_10:\n\n1. convert_from_base_10\n^^^^^^^^^^^^^^^^^^^^^^^\n\n| Converts a whole number in base 10 to any base. This function is\n  category 1 and category 3. Takes 2 arguments;\n| a) ``decimal``: integer = This is the whole number to be converted.\n| b) ``new_base``: integer = The base to convert to.\n| Return a list ``['converted_digit', new_base]``\n\nUsage\n\n.. code:: python\n\n   from conversions.convert import convert_from_base_10\n\n   result = convert_from_base_10(12, 2) # returns ['1100', 2]\n\n.. _2-convert_float_from_base_10:\n\n2. convert_float_from_base_10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n| Converts a floating number in base 10 to any base. This function is\n  category 1 and category 4. It returns the maximum possible number\n  decimal points. However in case of recurring decimal points, the\n  maximum points is 15. The number has to be less than 1.\n| Returns a list ``['converted_digit', new_base]``\n| Takes two arguments:\n| a) ``floating_decimal``: float = A number less than 1 but greater than\n  0, to be converted.\n| b) ``new_base``: integer = The base to convert the number to.\n\nUsage\n\n.. code:: python\n\n   from conversions.convert import convert_float_from_base_10\n\n   result = convert_float_from_base_10(0.25, 2) # ['0.01', 2]\n\n.. _3-convert_to_base_10:\n\n3. convert_to_base_10\n^^^^^^^^^^^^^^^^^^^^^\n\n| Converts a whole number from any base back to base 10. This function\n  is category 2 and category 3. Returns an integer that is base 10.\n  Takes two arguments:\n| a) ``number``: string = The number to be converted in string form.\n| b) ``current_base``: integer = The base of the number currently.\n| Usage\n\n.. code:: python\n\n   from conversions.convert import convert_to_base_10\n\n   result = convert_to_base_10('1001', 2) # returns 9\n\n.. _4-convert_float_to_base_10:\n\n4. convert_float_to_base_10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n| Converts a floating number from any base back to base 10. This\n  function is category 2 and category 4. It returns a float. Takes two\n  arguments:\n| a) ``number``: string = The string representation of the number to\n  convert. It should be less than 1 but greater than 0.\n| b) ``current_base``: integer = The base of the number currently.\n| Usage\n\n.. code:: python\n\n   from conversions.convert import convert_float_to_base_10\n\n   result = convert_float_to_base_10('0.2', 16) # returns 0.125\n\nUtility functions\n~~~~~~~~~~~~~~~~~\n\n| Since none of these functions care whether the user input is factually\n  correct, e.g., G4 cannot be base 16 or 63 is not a standard base or\n  whether a character is used to represent these numbers, use\n  ``n_utils`` to check. It provides the following functions:\n| a. ``n_utils.ensure_base_is_standard`` - Takes the base, in integer\n  form, and checks whether it's one of the 82 standard ones. Returns\n  ``True`` or ``False``.\n| b. ``n_utils.base_limits`` - Takes the number, in string form, and the\n  base provided, in integer form and checks whether its factually\n  correct. Returns ``True`` or ``False``.\n\nTo check the name of a base given the base, use ``n_utils.base_find``\nwhich takes the base as argument and returns a string of the name of the\nbase.\n\n.. code:: python\n\n   from n_utils import base_find, ensure_base_is_standard, base_limits\n\n\n   ensure_base_is_standard(63) # False\n   ensure_base_is_standard(64) # True\n\n   base_limits('G4', 16) # False\n   base_limits('G4', 20) # True\n\n   base_find(2) # Binary\n   base_find(10) # Decimal\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/muremwa/number-conversions",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "number-conversions",
    "package_url": "https://pypi.org/project/number-conversions/",
    "platform": null,
    "project_url": "https://pypi.org/project/number-conversions/",
    "project_urls": {
      "Homepage": "https://github.com/muremwa/number-conversions"
    },
    "release_url": "https://pypi.org/project/number-conversions/0.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Convert numbers between different bases.",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13968180,
  "releases": {
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1b6474c52810b14ff376fc7a9c802dfc01ef06c1185994da7df330c6b21d716",
          "md5": "8bae2c0d4f50b82ce56d7f3ed54e0166",
          "sha256": "f4bdf3293595562b39e051a62dc9a1928cae92b683af5774c0706bece2cc8683"
        },
        "downloads": -1,
        "filename": "number_conversions-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bae2c0d4f50b82ce56d7f3ed54e0166",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59620,
        "upload_time": "2022-05-29T09:44:11",
        "upload_time_iso_8601": "2022-05-29T09:44:11.513722Z",
        "url": "https://files.pythonhosted.org/packages/c1/b6/474c52810b14ff376fc7a9c802dfc01ef06c1185994da7df330c6b21d716/number_conversions-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73de21df0b1066c14c6bb68f28413ec5d15b8b30f4e57b5bdc30ccddaa5f4271",
          "md5": "b921da25165ebe8d8fc9194aa50f4da9",
          "sha256": "46cc271672331026a49de5e6912d22654c31f6a7ebe3957a60eb5a4a9aa5861c"
        },
        "downloads": -1,
        "filename": "number-conversions-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b921da25165ebe8d8fc9194aa50f4da9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 58207,
        "upload_time": "2022-05-29T09:44:13",
        "upload_time_iso_8601": "2022-05-29T09:44:13.746332Z",
        "url": "https://files.pythonhosted.org/packages/73/de/21df0b1066c14c6bb68f28413ec5d15b8b30f4e57b5bdc30ccddaa5f4271/number-conversions-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1b6474c52810b14ff376fc7a9c802dfc01ef06c1185994da7df330c6b21d716",
        "md5": "8bae2c0d4f50b82ce56d7f3ed54e0166",
        "sha256": "f4bdf3293595562b39e051a62dc9a1928cae92b683af5774c0706bece2cc8683"
      },
      "downloads": -1,
      "filename": "number_conversions-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8bae2c0d4f50b82ce56d7f3ed54e0166",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 59620,
      "upload_time": "2022-05-29T09:44:11",
      "upload_time_iso_8601": "2022-05-29T09:44:11.513722Z",
      "url": "https://files.pythonhosted.org/packages/c1/b6/474c52810b14ff376fc7a9c802dfc01ef06c1185994da7df330c6b21d716/number_conversions-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73de21df0b1066c14c6bb68f28413ec5d15b8b30f4e57b5bdc30ccddaa5f4271",
        "md5": "b921da25165ebe8d8fc9194aa50f4da9",
        "sha256": "46cc271672331026a49de5e6912d22654c31f6a7ebe3957a60eb5a4a9aa5861c"
      },
      "downloads": -1,
      "filename": "number-conversions-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "b921da25165ebe8d8fc9194aa50f4da9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 58207,
      "upload_time": "2022-05-29T09:44:13",
      "upload_time_iso_8601": "2022-05-29T09:44:13.746332Z",
      "url": "https://files.pythonhosted.org/packages/73/de/21df0b1066c14c6bb68f28413ec5d15b8b30f4e57b5bdc30ccddaa5f4271/number-conversions-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}