{
  "info": {
    "author": "Jochen Steimel",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Pyflowsheet Project\n\n## Mission Statement\nThis project is a Python package that is intended to support engineers in creating simple process flow diagrams (PFD) from code, without the need for a complex chart drawing tool or CAD program.\n\nThe main use case is the visualization of flowsheets generated in textual modeling languages / process simulators and to present results in a graphical manner.\n\nThis package is not intended to replace CAD applications or to create printer-ready Process Flow Diagrams: this is a tool for a process engineer to support internal communication and process documentation.\n\n## Project Status\nThis project is very young and in the unstable alpha Phase. The public interface of the API and the function definitions may change with every release. Please treat every release as a change in the Major version, even though the major version will not change to 1 until a stable development pace has been reached.\n\nThe documentation is just being set up, and will be gradually completed as more and more functions stabilize. \n\n**Remark:**\n\n     The routing is done via the Dijkstra algorithm as implemented in the pathfinding library, with a very simple heuristic to discourage turning/staircasing. This may not always work and produce nice-looking streams. If you need more control over the stream routing, pyflowsheet provides a manual override of the corner points of the stream path.\n\n## How to install\n\n```pip install pyflowsheet```\n\nIf you want to install the optional dependency Matplotlib you can instead install the [plots] extra requirement.\n\n```pip install pyflowsheet[plots]```\n\n### Dependencies\n* [svgwrite](https://github.com/mozman/svgwrite) \n* [python-pathfinding package](https://github.com/brean/python-pathfinding)\n* Pillow (optional)\n* Matplotlib (optional)\n* Pandas (optional)\n\n# Examples\n\n## Supported flowsheet elements\n* Stream Flag/Off-page connector\n* Mixer/Splitter\n* Black-Box Operation/Process Step\n* Vessel (horizontal/vertical, internals can be [\"tubes\",\"bed\"])\n* Valve\n* Distillation Column\n* Pump\n* Compressor\n\n![All unit operations](img/unit_operations_example.svg)\n\nThe following annotation objects are available:\n* Callout (simple text element)\n* Figure (requires matplotlib)\n* Table (requires matplotlib)\n\n## Units of measure and the grid\n\nThe flowsheet will be rasterized in a 10 by 10 grid for routing the streams. The user can choose any units/sizes for his unit operations, but some sizes are fixed.\n* Stream arrowheads\n* Grid size\n\nConnectors are always defined using the relative position with regard to the containing unit operation. (0,0) means the connectors will be drawn at the top left corner. \n\nThe default sizes for each unit assume multiples of 20, so that connectors lie exactly on the grid.\n\n## How to draw simple block flow diagrams\nIn this example it is shown how the pyflowsheet package can be used to draw block flow diagrams, an even simpler form of process documentation than PFDs.\n\n```python\nfrom pyflowsheet import Flowsheet, BlackBox, Stream, StreamFlag, Port, SvgContext,VerticalLabelAlignment, HorizontalLabelAlignment\nfrom IPython.core.display import SVG, HTML\n\npfd= Flowsheet(\"V100\",\"Block Flow Diagram\", \"Demo Flowsheet for showing block-flow diagram style\")\n\nSP1=BlackBox(\"Pretreatment\",\"Removal of catalyst poisons\", position=(100,180), size=(80,60))\nSP2=BlackBox(\"Reaction\",\"Catalytic reaction\", position=(240,180), size=(80,60))\nSP3=BlackBox(\"Gas-Recovery\",\"Recycling of unconverted gaseous feedstock\", position=(380,180), size=(80,60))\nSP4=BlackBox(\"Separation\",\"Recycling of solvent\", position=(520,180), size=(80,60))\nSP5=BlackBox(\"Purification\",\"Removal of side product\", position=(660,180), size=(80,60))\n\nFeed= StreamFlag(\"Feed\", \"\", position=(0,190))\nProduct= StreamFlag(\"Product\", \"\", position=(800,190))\nWaste= StreamFlag(\"Waste\", \"\", position=(120,360))\nSideProduct= StreamFlag(\"SideProduct\", \"\", position=(680,360))\n\nsteps=[SP1,SP2,SP3,SP4,SP5]\n\nfor sp in steps:\n    sp.setTextAnchor(HorizontalLabelAlignment.Center,VerticalLabelAlignment.Center,(0,5) )\n\nWaste.rotate(90)\nSideProduct.rotate(90)\n\n#Add additional ports to the process steps for recycles and removal of unwanted components\nSP1.ports[\"Out2\"] = Port(\"Out2\", SP1, (0.5, 1), (0, 1), intent=\"out\")\nSP5.ports[\"Out2\"] = Port(\"Out2\", SP5, (0.5, 1), (0, 1), intent=\"out\")\nSP3.ports[\"Out2\"] = Port(\"Out2\", SP3, (0.5, 0), (0, -1), intent=\"out\")\nSP4.ports[\"Out2\"] = Port(\"Out2\", SP4, (0.5, 1), (0, 1), intent=\"out\")\nSP2.ports[\"In2\"] = Port(\"In2\", SP2, (0.5, 0), (0, -1))\nSP2.ports[\"In3\"] = Port(\"In3\", SP2, (0.5, 1), (0, 1))\n\n#Add all units to the diagram\npfd.addUnits( [Feed,Product,Waste, SideProduct, SP1,SP2, SP3, SP4, SP5] )\n\n#Create stream connectivity\npfd.connect(\"S01\", Feed[\"Out\"], SP1[\"In\"] ) \npfd.connect(\"S02\", SP1[\"Out\"], SP2[\"In\"] ) \npfd.connect(\"S03\", SP2[\"Out\"], SP3[\"In\"] ) \npfd.connect(\"S04\", SP3[\"Out\"], SP4[\"In\"] ) \npfd.connect(\"S05\", SP4[\"Out\"], SP5[\"In\"] ) \npfd.connect(\"S06\", SP5[\"Out\"], Product[\"In\"] ) \npfd.connect(\"S07\", SP1[\"Out2\"], Waste[\"In\"] ) \npfd.connect(\"S08\", SP5[\"Out2\"], SideProduct[\"In\"] ) \npfd.connect(\"S09\", SP3[\"Out2\"], SP2[\"In2\"] ) \npfd.connect(\"S10\", SP4[\"Out2\"], SP2[\"In3\"] ) \n\n#Change the label offset for stream S09 to make it more readable\npfd.streams[\"S09\"].labelOffset=(0,-5)\n\n#Create a rendering context for the flowsheet and display it. pfd.draw(ctx) will also save the file to disc.\nctx= SvgContext(\"img/blockflowprocess.svg\")\nimg = pfd.draw(ctx)\nSVG(img.render(scale=1))\n```\n![block flow diagram demo](img/blockflowprocess.svg)\n\n## A distillation tower with externalized units\nIn the pyflowsheet package, you have the option to draw distillation towers with simplified peripherals (condenser and reboiler) in one icon, or you can define the periphery in more detail with individual unit operations.\n\n```python\nfrom pyflowsheet import Flowsheet, UnitOperation, Distillation, Vessel, BlackBox, Pump, Stream, StreamFlag, Valve,HeatExchanger, Mixer, Splitter, Port, SvgContext\nfrom pyflowsheet.internals import Tubes,RandomPacking\nfrom IPython.core.display import SVG, HTML\nfrom pyflowsheet import VerticalLabelAlignment, HorizontalLabelAlignment\n\npfd= Flowsheet(\"V100-DS10\",\"Complex Distillation\", \"Demo Flowsheet for testing externalized columns peripherals and routing\")\n\nFeed= StreamFlag(\"Feed\", \"Feed\", position=(0,250))\nHX1=HeatExchanger(\"Preheater\",\"Pre-Heater\", position=(160,250))\nTWR1=Distillation(\"Tower\",\"Distillation Tower\", hasCondenser=False, hasReboiler=False,position=(300,120), size=(40,300), internals=[RandomPacking(start=0, end=0.4),RandomPacking(start=0.6, end=1.0)])\nMX1= Mixer(\"MX1\", \"Mixer\", position=(400,450))\nSP1= Splitter(\"SP1\", \"Splitter\", position=(460,450))\nREB=Vessel(\"Reboiler\",\"Falling Film Evaporator\", position=(390,340), size=(40,80),capLength=20,internals=[Tubes(7)] )\nREB.ports[\"Out2\"] = Port(\"Out2\", REB, (0, .25), (-1, 0), intent=\"out\")\nCOND=Vessel(\"Condenser\",\"Condenser\", position=(390,40), size=(40,100), internals=[Tubes()])\nCOND.ports[\"Out2\"] = Port(\"Out2\", COND, (0, 0.15), (-1, 0), intent=\"out\")\n\n\nSP2= Splitter(\"SP2\", \"Reflux-Splitter\", position=(500,130))\nP1= StreamFlag(\"P1\", \"Product 1\", position=(560,120))\nP2= StreamFlag(\"P2\", \"Product 2\", position=(0,400))\nP3= StreamFlag(\"P3\", \"Product 3\", position=(560,0))\n\n#rotate units to resemble the actual plant layout\n\nCOND.rotate(105)\n\nSP2.rotate(90)\nP2.flip(axis=\"horizontal\")\nREB.flip(axis=\"vertical\")\n\npfd.addUnits( [Feed,HX1,TWR1,MX1, SP1, REB,COND,SP2, P1,P2,P3] )\n\npfd.connect(\"S01\", Feed[\"Out\"], HX1[\"TIn\"] ) \npfd.connect(\"S02\", HX1[\"TOut\"], TWR1[\"Feed\"] ) \npfd.connect(\"S04\", TWR1[\"LOut\"], MX1[\"In1\"] ) \npfd.connect(\"S05\", HX1[\"SOut\"], P2[\"In\"] ) \npfd.connect(\"S06\", MX1[\"Out\"], SP1[\"In\"] ) \npfd.connect(\"S08\", SP1[\"Out2\"], REB[\"In\"] ) \npfd.connect(\"S09\", REB[\"Out\"], MX1[\"In2\"] ) \npfd.connect(\"S10\", REB[\"Out2\"], TWR1[\"VIn\"] ) \npfd.connect(\"S11\", TWR1[\"VOut\"], COND[\"In\"] ) \npfd.connect(\"S12\", COND[\"Out\"], SP2[\"In\"] )\npfd.connect(\"S13\", SP2[\"Out2\"], P1[\"In\"] ) \npfd.connect(\"S14\", SP2[\"Out3\"], TWR1[\"RIn\"] ) \npfd.connect(\"S15\", COND[\"Out2\"], P3[\"In\"] )\npfd.connect(\"S07\", SP1[\"Out1\"], HX1[\"SIn\"] ) \n\n#If you do not like the automatic stream layout, you can manually define a sequence of relative steps (relative to last point). The first element is the difference in x direction, the second element is the difference in y. The route starts at the source connector.\n\npfd.streams[\"S07\"].manualRouting=[(14,0),(0,30),(-240,0),(0,-260),(-70,0)] \npfd.streams[\"S05\"].labelOffset=(10,30)\npfd.streams[\"S07\"].labelOffset=(25,10)\npfd.streams[\"S15\"].labelOffset=(10,-10)\npfd.streams[\"S11\"].labelOffset=(10,-10)\n\n#Change the label positions to make them more readable\nTWR1.setTextAnchor(HorizontalLabelAlignment.RightOuter,VerticalLabelAlignment.Center,(10,0) )\nREB.setTextAnchor(HorizontalLabelAlignment.RightOuter,VerticalLabelAlignment.Center,(10,0) )\n\nctx= SvgContext(\"img/externalized_column_with_preheater.svg\")\nimg = pfd.draw(ctx)\nSVG(img.render(width=1280, height=640 ))\n```\n![Externalized column demo](img/externalized_column_with_preheater.svg)\n\n\n## Showing results\nYou can embed matplotlib plots and pandas tables into the SVG graphic with the help of Plot and Table annotations.\n\n**Remark:** If you want to use this feature, you have to install pandas and matplotlib on your system. These are not listed as actual dependencies of pyflowsheet and will not be installed automatically. If those packages are not present on your system, importing the Figure and Table element will warn you about this fact.\n\n```python\nfrom pyflowsheet import Flowsheet, UnitOperation, Distillation, Vessel, BlackBox, Pump, Stream, StreamFlag, Valve,HeatExchanger, SvgContext, Table, Figure, TextElement\nfrom pyflowsheet.internals import Tubes,RandomPacking\nfrom IPython.core.display import SVG, HTML\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n#Turn the interactive plotting option off to prohibit the plot to be shown twice\nplt.ioff()\n\npfd= Flowsheet(\"V100-DS20\",\"Simple Distillation\", \"Demo Flowsheet for testing functionality\")\n\nFeed= StreamFlag(\"Feed\", \"Feed\", position=(0,400))\nHX=Vessel(\"HX\",\"Condenser\", position=(260,200),  size=(40,140), internals=[Tubes()])\nP2= StreamFlag(\"P2\", \"Product 2\", position=(300,000))\n\npfd.addUnits( [Feed,HX,P2] )\npfd.connect(\"S01\", Feed[\"Out\"], HX[\"In\"] ) \npfd.connect(\"S02\", HX[\"Out\"], P2[\"In\"] ) \n\n#Create your pandas dataframe\ndf = pd.DataFrame(np.random.randn(10, 4), columns=list('ABCD'))\n\n#Create a new table object and pass the pandas table as the data argument. It will internally be rendered as a  matplotlib Table\nT1 = Table(\"T1\", \"DemoTable\", data=df, position=(500,100), size=(500,200),figsize=(12,5))\n\n#Create your plot. Pass it to the Figure annotation. Pass the figure object as the fig parameter. It will internally be rendered into a base64 encoded string and embedded into the SVG drawing.\nfig=df.plot(kind=\"line\",figsize=(5,5))\nF1 = Figure(\"Profile\", \"DemoFigure\", fig=plt.gcf(), position=(00,50), size=(250,250))\n\n#You can also create very simple tables on your own by creating callouts. In a real application the numbers would of course come from a real data source (simulation or plant data)\nfor i in range(1,6):\n    pfd.callout(f\"T{i} = {123+5*i} Â°C\", (320,220+15*i) )\n\npfd.addAnnotations([F1,T1])\n\nctx= SvgContext(\"img/plots_and_tables.svg\")\nimg = pfd.draw(ctx)\nSVG(img.render(scale=1))  \n```\n![plots and tables demo](img/plots_and_tables.svg)\n\n# License\nMIT License\n\nCopyright (c) 2020 Jochen Steimel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n# Versioning\n\nThe versioning scheme using in this project is based on Semantic Versioning, but adopts a different approach to handling pre-releases and build metadata.\n\nThe essence of semantic versioning is a 3-part MAJOR.MINOR.MAINTENANCE numbering scheme, where the project author increments:\n\n* MAJOR version when they make incompatible API changes,\n\n* MINOR version when they add functionality in a backwards-compatible manner, and\n\n* MAINTENANCE version when they make backwards-compatible bug fixes.\n\n\n# History\n\n## Version 0.2.2 (31-01-2021)\n\n**New Features**\n* Plate & Frame Heat Exchanger graphics\n* Ports can be shown by setting the showPorts flag of the Flowsheet object to True\n\n**Bugfixes**\n* Removed reference of Manhatten (sic) heuristic from Pathfinder class. This class was renamed in Pathfinder-1.0.1 and caused a fresh install of pyflowsheet to stop running. Also updated setup.py.\n\n## Version 0.2.1 (04-01-2021)\n\n* Version 0.2.0 was not running after restructuring of source files. Restored package by adding all submodules correctly in setup.py\n\n## Version 0.2.0 (03-01-2021)\n\n**New Features**\n* Added an \"Internals\" System. You can now add any instance derived from BaseInternal to the internals list of a unit operation. These internals can represent tubes in a heat exchanger, trays or packing in a column, or special realisations of pumps and compressors. \n\n  **Breaking Change**: It is not possible to define internals by a string anymore.\n```python \nU3=pfd.unit(Vessel(\"Fermenter\",\"Fermenter\", position=(200,190), capLength=20, showCapLines=False, size=(80,140),internals=[Stirrer(type=StirrerType.Anchor), Jacket()] ))\n```\n* Changed how vertical/horizontal vessels work: Now every vessel is vertical by default, but can be rotated either with the rotate(angle) method or by passing the angle as parameter into the constructor.\n```python\nBA11=Vessel(\"DS10-BA11\",\"Horizontal Vessel\", angle=90, position=(560,400), size=(40,100), capLength=20,internals=[CatalystBed()] )\n```\n* Compressor unit operation\n\n**Bugfixes**\n* Multiple calls to .rotate(angle) do not rotate the ports anymore while keeping the unit itself at the same angle.\n* Rotating a unit now influences the area that is blocked for pathfinding.\n\n\n\n## Version 0.1.1 (27-12-2020)\n* Alpha version\n* Basic drawing functions implemented\n* [svgwrite](https://github.com/mozman/svgwrite) backend for vector output\n* Limited library of unit operations\n  * Mixer / Splitter\n  * Heat Exchanger\n  * Vessel (vertical/horizontal)\n  * Distillation Column (optional reboiler and condenser, some internals)\n  * Pump\n  * Stream flag / Feed / Product\n  * Valve\n  * BlackBox Unit Operation (catch all for non-implemented icons)\n* Arbitary Rotation\n* Horizontal Flipping\n* Stream routing via Dykstra algorithm (using the  [python-pathfinding package](https://github.com/brean/python-pathfinding) )\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nukleon84/pyflowsheet",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyflowsheet",
    "package_url": "https://pypi.org/project/pyflowsheet/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/pyflowsheet/",
    "project_urls": {
      "Bug Reports": "http://github.com/nukleon84/pyflowsheet/issues",
      "Homepage": "https://github.com/nukleon84/pyflowsheet",
      "Source": "http://github.com/nukleon84/pyflowsheet/"
    },
    "release_url": "https://pypi.org/project/pyflowsheet/0.2.2/",
    "requires_dist": [
      "svgwrite (>=1.4)",
      "pathfinding (>=1.0.1)",
      "matplotlib ; extra == 'plots'"
    ],
    "requires_python": ">=3.7",
    "summary": "A Python library for creating process flow diagrams (PFD) for process engineering using SVG drawings.",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9277107,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5be82a1396e188320a079379e3c3888e1fe3b5ef253fe5e776a8793a2cb6e618",
          "md5": "7cadc75a30103a249d089fba241bc0d2",
          "sha256": "19b351502dc9ab7a49aff83bf2704b0cc8375f0348f1c8ab47953bac49162d5f"
        },
        "downloads": -1,
        "filename": "pyflowsheet-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cadc75a30103a249d089fba241bc0d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27311,
        "upload_time": "2020-12-27T09:38:10",
        "upload_time_iso_8601": "2020-12-27T09:38:10.993136Z",
        "url": "https://files.pythonhosted.org/packages/5b/e8/2a1396e188320a079379e3c3888e1fe3b5ef253fe5e776a8793a2cb6e618/pyflowsheet-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b9754cc640d75e39e846b28cb2d0f8c825cf7239f5cc8a7e42dfbb4e27a5326",
          "md5": "25246a716d3814244b9a296f5863064a",
          "sha256": "3f13b3ca2779209ab4fd1c645b3108efa29d32783ef8c0279673e075894e60a4"
        },
        "downloads": -1,
        "filename": "pyflowsheet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "25246a716d3814244b9a296f5863064a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23810,
        "upload_time": "2020-12-27T09:38:12",
        "upload_time_iso_8601": "2020-12-27T09:38:12.740717Z",
        "url": "https://files.pythonhosted.org/packages/3b/97/54cc640d75e39e846b28cb2d0f8c825cf7239f5cc8a7e42dfbb4e27a5326/pyflowsheet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81315e36117207a65c1428aa0093735e9de0d6a92378c66ddd7f9b32642cc37c",
          "md5": "7d5178e85077919427bac24cc89be1d3",
          "sha256": "0e0a4dcdf36d3f661098a88859811dfebbf2a5df0c72b3bbe7e9be945f54240c"
        },
        "downloads": -1,
        "filename": "pyflowsheet-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d5178e85077919427bac24cc89be1d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27871,
        "upload_time": "2021-01-03T13:47:11",
        "upload_time_iso_8601": "2021-01-03T13:47:11.565197Z",
        "url": "https://files.pythonhosted.org/packages/81/31/5e36117207a65c1428aa0093735e9de0d6a92378c66ddd7f9b32642cc37c/pyflowsheet-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb5b86452cd3284800ed1e5dd5c8025a1dde45f93ec116ae1822f48e42100093",
          "md5": "cebf21cb44162e97db81cbe15ebca88c",
          "sha256": "c1f0d42fcc8f5fcb5a1a93d21e6257a996ca91de5e4c2dbf57c5bc826c87f7ef"
        },
        "downloads": -1,
        "filename": "pyflowsheet-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cebf21cb44162e97db81cbe15ebca88c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7706,
        "upload_time": "2021-01-03T13:47:13",
        "upload_time_iso_8601": "2021-01-03T13:47:13.504826Z",
        "url": "https://files.pythonhosted.org/packages/cb/5b/86452cd3284800ed1e5dd5c8025a1dde45f93ec116ae1822f48e42100093/pyflowsheet-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "368dec68efdc0443d86bdce4ca832118800585f793b33a6d5897e8bb28094ca2",
          "md5": "eccfe301e0214a2828c0ef06e57e28c1",
          "sha256": "14779b09c2e300a849e9b3b014a9578feb17c18014b131e4206b2ea65b377b7c"
        },
        "downloads": -1,
        "filename": "pyflowsheet-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eccfe301e0214a2828c0ef06e57e28c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 56537,
        "upload_time": "2021-01-04T15:48:48",
        "upload_time_iso_8601": "2021-01-04T15:48:48.645702Z",
        "url": "https://files.pythonhosted.org/packages/36/8d/ec68efdc0443d86bdce4ca832118800585f793b33a6d5897e8bb28094ca2/pyflowsheet-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "743760dfa372b1c8ba1aa1a62f596c1df1b97449c086df05b06868a7f24deeb8",
          "md5": "115fe6ae4801d1c16de5c2024c13d57e",
          "sha256": "c0d876454515db18262267198018929c83f052c752ba411ca7d941353ccbad75"
        },
        "downloads": -1,
        "filename": "pyflowsheet-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "115fe6ae4801d1c16de5c2024c13d57e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27740,
        "upload_time": "2021-01-04T15:48:51",
        "upload_time_iso_8601": "2021-01-04T15:48:51.512681Z",
        "url": "https://files.pythonhosted.org/packages/74/37/60dfa372b1c8ba1aa1a62f596c1df1b97449c086df05b06868a7f24deeb8/pyflowsheet-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7264dc52afd2993215950d79f551523e2084198c636ce1fd1cf0b446ca28389d",
          "md5": "a2eab62bf3c12221abbdc9360e8474da",
          "sha256": "73580ca2fbee5cdb584e0c4019836bb006528c6aeeeca5667f34d2e7cba3c2df"
        },
        "downloads": -1,
        "filename": "pyflowsheet-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2eab62bf3c12221abbdc9360e8474da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 58042,
        "upload_time": "2021-01-31T08:46:44",
        "upload_time_iso_8601": "2021-01-31T08:46:44.698736Z",
        "url": "https://files.pythonhosted.org/packages/72/64/dc52afd2993215950d79f551523e2084198c636ce1fd1cf0b446ca28389d/pyflowsheet-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "794a2adc541d67297a0e4ebd58841141070632e2b827d95215983a69c1dc3f17",
          "md5": "f680ca9a32b514d017f3e28d5bca523d",
          "sha256": "1ec83af82bc919a8c043ba68ab58b46b2715ab455d3d8bc15b44ef2b5460a2df"
        },
        "downloads": -1,
        "filename": "pyflowsheet-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f680ca9a32b514d017f3e28d5bca523d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28754,
        "upload_time": "2021-01-31T08:46:46",
        "upload_time_iso_8601": "2021-01-31T08:46:46.156474Z",
        "url": "https://files.pythonhosted.org/packages/79/4a/2adc541d67297a0e4ebd58841141070632e2b827d95215983a69c1dc3f17/pyflowsheet-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7264dc52afd2993215950d79f551523e2084198c636ce1fd1cf0b446ca28389d",
        "md5": "a2eab62bf3c12221abbdc9360e8474da",
        "sha256": "73580ca2fbee5cdb584e0c4019836bb006528c6aeeeca5667f34d2e7cba3c2df"
      },
      "downloads": -1,
      "filename": "pyflowsheet-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a2eab62bf3c12221abbdc9360e8474da",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 58042,
      "upload_time": "2021-01-31T08:46:44",
      "upload_time_iso_8601": "2021-01-31T08:46:44.698736Z",
      "url": "https://files.pythonhosted.org/packages/72/64/dc52afd2993215950d79f551523e2084198c636ce1fd1cf0b446ca28389d/pyflowsheet-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "794a2adc541d67297a0e4ebd58841141070632e2b827d95215983a69c1dc3f17",
        "md5": "f680ca9a32b514d017f3e28d5bca523d",
        "sha256": "1ec83af82bc919a8c043ba68ab58b46b2715ab455d3d8bc15b44ef2b5460a2df"
      },
      "downloads": -1,
      "filename": "pyflowsheet-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f680ca9a32b514d017f3e28d5bca523d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 28754,
      "upload_time": "2021-01-31T08:46:46",
      "upload_time_iso_8601": "2021-01-31T08:46:46.156474Z",
      "url": "https://files.pythonhosted.org/packages/79/4a/2adc541d67297a0e4ebd58841141070632e2b827d95215983a69c1dc3f17/pyflowsheet-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}