{
  "info": {
    "author": "Albin Stjerna",
    "author_email": "albin.stjerna@cern.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "This is a re-implementation of the Perl script\ncern-get-sso-cookie_.\nas a Python library. As a bonus, a shell client re-implementing (most\nof) the functionality of ``cern-get-sso-cookie``, is also provided.\n\n.. _cern-get-sso-cookie: https://github.com/sashabaranov/cern-get-sso-cookie/\n\nPrerequisites\n-------------\n\nThis package assumes a working Kerberos and OpenSSL setup, but should be\ncompatible with both python 2.7 and 3.\n\n\nUsage\n-----\n\nThe module provides only two functions: ``krb_sign_on`` and\n``cert_sign_on``, used for authentication with Kerberos and certificates\nrespectively. Both take an optional cookiejar (which can be a Requests\n``CookieJar``, or a ``MozillaCookieJar``) which is filled during\noperations. In any event, a cookie jar is also returned by both\nfunctions.\n\nThe returned cookie jar can be used directly as an argument to Requests'\n``cookies``\n\n.. code:: python\n\n          import cern_sso\n          import requests\n\n          my_url = \"https://my-secret-place.cern.ch\"\n\n          cookies = cern_sso.krb_sign_on(my_url)\n\n          # Perform request\n          r1 = requests.get(my_url, cookies=cookies)\n\nIt is assumed that the user running the program is already authenticated\nagainst Kerberos.\n\n\nThis is what the same procedure would look like using SSL certificates:\n\n.. code:: python\n\n          import cern_sso\n          import requests\n\n          my_url = \"https://my-secret-place.cern.ch\"\n          cert_file = \"/home/albin/myCert.pem\"\n          key_file = \"/home/albin/myCert.key\"\n\n          cookies = cern_sso.cert_sign_on(my_url, cert_file=cert_file,\n          key_file=key_file)\n\n          # Perform request\n          r1 = requests.get(my_url, cookies=cookies)\n\n\nCertain limitations apply to the certificate and key files, please see\nthe following section on command-line usage for further information on\nthis.\n\nFor an example of how to use an external CookieJar, see\n``bin/cern-get-sso-cookie.py``.\n\nUsing ``cern-get-sso-cookie.py``\n--------------------------------\n\nJust like ``cern-get-sso-cookie``, the Python implementation will\nauthenticate against a desired URL and returna Mozilla cookie-file\nsuitable for use with Curl or Wget.\n\nFor use with Kerberos, make sure you are authenticated either via\npassword or a keytab:\n\n.. code:: sh\n\n          $ kinit me@CERN.CH\n          <enter password>\n\n\nNow you can perform the authentication:\n\n.. code:: sh\n\n          $ cern-get-sso-cookie.py --url https://cerntraining.service-now.com --kerberos\n          # cookies.txt now contains the relevant session cookies\n          $ curl -L --cookie cookies.txt --cookie-jar cookies.txt -H 'Accept: application/json' \"https://cerntraining.service-now.com/api/now/v1/table/incident\"\n\n\nIn the spirit of the UNIX philosophy, ``cern-get-sso-cookie.py`` outputs\nnothing on success. Please try ``--verbose`` or even ``--debug`` if that is\nnot to your liking!\n\nFor authentication against a SSL certificate (and key), you first need\nto process the certificate files to remove passwords and separate the\nkey and certificate:\n\n.. code:: sh\n\n          $ openssl pkcs12 -clcerts -nokeys -in myCert.p12 -out myCert.pem\n\n          $ openssl pkcs12 -nocerts -in myCert.p12 -out myCert.tmp.key\n\n          $ openssl rsa -in myCert.tmp.key -out myCert.key\n\nIt is assumed that your certificate and key files have the same base\nname and are located in the same folder, and that the key has the file\nending ``.key`` and the certificate ``.pem``. In the example above, the base\nname ``myCert`` was used.\n\nFinally, you can use the certificates to obtain a SSO cookie:\n\n.. code:: sh\n\n          $ cern-get-sso-cookie.py --url https://cerntraining.service-now.com --cert myCert\n\n\nFor further notes on usage, see ``cern-get-sso-cookie.py --help``.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.cern.ch/astjerna/cern-sso-python",
    "keywords": "authentication sso cern",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-cern-sso",
    "package_url": "https://pypi.org/project/python-cern-sso/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-cern-sso/",
    "project_urls": {
      "Homepage": "https://gitlab.cern.ch/astjerna/cern-sso-python"
    },
    "release_url": "https://pypi.org/project/python-cern-sso/1.3.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Cern Single-Single-Sign-On driver",
    "version": "1.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12505183,
  "releases": {
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c11a975214e808bd7ce365e7c5ec591a9161c3b5487c544a012f568b4b5a480",
          "md5": "f379f494e5c15418b9f5c1e9d8149a1e",
          "sha256": "d367445cbcb9af362347530321f2a54430a04b3cd994ca822b19f3a2828991b3"
        },
        "downloads": -1,
        "filename": "python-cern-sso-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f379f494e5c15418b9f5c1e9d8149a1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6722,
        "upload_time": "2022-01-07T15:37:30",
        "upload_time_iso_8601": "2022-01-07T15:37:30.244643Z",
        "url": "https://files.pythonhosted.org/packages/0c/11/a975214e808bd7ce365e7c5ec591a9161c3b5487c544a012f568b4b5a480/python-cern-sso-1.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c11a975214e808bd7ce365e7c5ec591a9161c3b5487c544a012f568b4b5a480",
        "md5": "f379f494e5c15418b9f5c1e9d8149a1e",
        "sha256": "d367445cbcb9af362347530321f2a54430a04b3cd994ca822b19f3a2828991b3"
      },
      "downloads": -1,
      "filename": "python-cern-sso-1.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f379f494e5c15418b9f5c1e9d8149a1e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6722,
      "upload_time": "2022-01-07T15:37:30",
      "upload_time_iso_8601": "2022-01-07T15:37:30.244643Z",
      "url": "https://files.pythonhosted.org/packages/0c/11/a975214e808bd7ce365e7c5ec591a9161c3b5487c544a012f568b4b5a480/python-cern-sso-1.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}