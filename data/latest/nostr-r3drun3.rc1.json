{
  "info": {
    "author": "",
    "author_email": "Jeff Thibault <jdthibault2@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux"
    ],
    "description": "# python-nostr\nA Python library for making [Nostr](https://github.com/nostr-protocol/nostr) clients\n\n## Usage\n**Generate a key**\n```python\nfrom nostr.key import PrivateKey\n\nprivate_key = PrivateKey()\npublic_key = private_key.public_key\nprint(f\"Private key: {private_key.bech32()}\")\nprint(f\"Public key: {public_key.bech32()}\")\n```\n\n**Connect to relays**\n```python\nimport json\nimport ssl\nimport time\nfrom nostr.relay_manager import RelayManager\n\nrelay_manager = RelayManager()\nrelay_manager.add_relay(\"wss://nostr-pub.wellorder.net\")\nrelay_manager.add_relay(\"wss://relay.damus.io\")\nrelay_manager.open_connections({\"cert_reqs\": ssl.CERT_NONE}) # NOTE: This disables ssl certificate verification\ntime.sleep(1.25) # allow the connections to open\n\nwhile relay_manager.message_pool.has_notices():\n  notice_msg = relay_manager.message_pool.get_notice()\n  print(notice_msg.content)\n  \nrelay_manager.close_connections()\n```\n\n**Publish to relays**\n```python\nimport json \nimport ssl\nimport time\nfrom nostr.event import Event\nfrom nostr.relay_manager import RelayManager\nfrom nostr.message_type import ClientMessageType\nfrom nostr.key import PrivateKey\n\nrelay_manager = RelayManager()\nrelay_manager.add_relay(\"wss://nostr-pub.wellorder.net\")\nrelay_manager.add_relay(\"wss://relay.damus.io\")\nrelay_manager.open_connections({\"cert_reqs\": ssl.CERT_NONE}) # NOTE: This disables ssl certificate verification\ntime.sleep(1.25) # allow the connections to open\n\nprivate_key = PrivateKey()\n\nevent = Event(\"Hello Nostr\")\nprivate_key.sign_event(event)\n\nrelay_manager.publish_event(event)\ntime.sleep(1) # allow the messages to send\n\nrelay_manager.close_connections()\n```\n\n**Reply to a note**\n```python\nfrom nostr.event import Event\n\nreply = Event(\n  content=\"Hey, that's a great point!\",\n)\n\n# create 'e' tag reference to the note you're replying to\nreply.add_event_ref(original_note_id)\n\n# create 'p' tag reference to the pubkey you're replying to\nreply.add_pubkey_ref(original_note_author_pubkey)\n\nprivate_key.sign_event(reply)\nrelay_manager.publish_event(reply)\n```\n\n**Send a DM**\n```python\nfrom nostr.event import EncryptedDirectMessage\n\ndm = EncryptedDirectMessage(\n  recipient_pubkey=recipient_pubkey,\n  cleartext_content=\"Secret message!\"\n)\nprivate_key.sign_event(dm)\nrelay_manager.publish_event(dm)\n```\n\n\n**Receive events from relays**\n```python\nimport json\nimport ssl\nimport time\nfrom nostr.filter import Filter, Filters\nfrom nostr.event import Event, EventKind\nfrom nostr.relay_manager import RelayManager\nfrom nostr.message_type import ClientMessageType\n\nfilters = Filters([Filter(authors=[<a nostr pubkey in hex>], kinds=[EventKind.TEXT_NOTE])])\nsubscription_id = <a string to identify a subscription>\nrequest = [ClientMessageType.REQUEST, subscription_id]\nrequest.extend(filters.to_json_array())\n\nrelay_manager = RelayManager()\nrelay_manager.add_relay(\"wss://nostr-pub.wellorder.net\")\nrelay_manager.add_relay(\"wss://relay.damus.io\")\nrelay_manager.add_subscription(subscription_id, filters)\nrelay_manager.open_connections({\"cert_reqs\": ssl.CERT_NONE}) # NOTE: This disables ssl certificate verification\ntime.sleep(1.25) # allow the connections to open\n\nmessage = json.dumps(request)\nrelay_manager.publish_message(message)\ntime.sleep(1) # allow the messages to send\n\nwhile relay_manager.message_pool.has_events():\n  event_msg = relay_manager.message_pool.get_event()\n  print(event_msg.event.content)\n  \nrelay_manager.close_connections()\n```\n\n**NIP-26 delegation**\n```python\nfrom nostr.delegation import Delegation\nfrom nostr.event import EventKind, Event\nfrom nostr.key import PrivateKey\n\n# Load your \"identity\" PK that you'd like to keep safely offline\nidentity_pk = PrivateKey.from_nsec(\"nsec1...\")\n\n# Create a new, disposable PK as the \"delegatee\" that can be \"hot\" in a Nostr client\ndelegatee_pk = PrivateKey()\n\n# the \"identity\" PK will authorize \"delegatee\" to sign TEXT_NOTEs on its behalf for the next month\ndelegation = Delegation(\n    delegator_pubkey=identity_pk.public_key.hex(),\n    delegatee_pubkey=delegatee_pk.public_key.hex(),\n    event_kind=EventKind.TEXT_NOTE,\n    duration_secs=30*24*60*60\n)\n\nidentity_pk.sign_delegation(delegation)\n\nevent = Event(\n    \"Hello, NIP-26!\",\n    tags=[delegation.get_tag()],\n)\ndelegatee_pk.sign_event(event)\n\n# ...normal broadcast steps...\n```\n\nThe resulting delegation tag can be stored as plaintext and reused as-is by the \"delegatee\" PK until the delegation token expires. There is no way to revoke a signed delegation, so current best practice is to keep the expiration time relatively short.\n\nHopefully clients will include an optional field to store the delegation tag. That would allow the \"delegatee\" PK to seamlessly post messages on the \"identity\" key's behalf, while the \"identity\" key stays safely offline in cold storage.\n\n\n## Installation\n```bash\npip install nostr\n```\n\nNote: I wrote this with Python 3.9.5.\n\n## Test Suite\nSee the [Test Suite README](test/README.md)\n\n## Disclaimer\n- This library is in very early development.\n- It might have some bugs.\n- I need to add more tests.\n\nPlease feel free to add issues, add PRs, or provide any feedback!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2022 Jeff Thibault  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nostr-r3drun3",
    "package_url": "https://pypi.org/project/nostr-r3drun3/",
    "platform": null,
    "project_url": "https://pypi.org/project/nostr-r3drun3/",
    "project_urls": {
      "Homepage": "https://github.com/jeffthibault/python-nostr"
    },
    "release_url": "https://pypi.org/project/nostr-r3drun3/0.1.5/",
    "requires_dist": [
      "cffi (>=1.15.0)",
      "cryptography (>=37.0.4)",
      "pycparser (>=2.21)",
      "python-socks (>=2.1.1)",
      "secp256k1 (>=0.14.0)",
      "websocket-client (>=1.3.3)",
      "pytest (>=7.2.0) ; extra == 'test'",
      "pytest-cov[all] ; extra == 'test'"
    ],
    "requires_python": ">3.6.0",
    "summary": "A Python library for making Nostr clients",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16902822,
  "releases": {
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74f58ef8af88044f3801e3679836c978012a5650f14c528383823c067736480c",
          "md5": "4221d4a8d43ed3a392d1c044866b56c9",
          "sha256": "2304aa51aa5b58f84201e77f397342973d399bcd41c75bf094960879db10286b"
        },
        "downloads": -1,
        "filename": "nostr_r3drun3-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4221d4a8d43ed3a392d1c044866b56c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.6.0",
        "size": 17357,
        "upload_time": "2023-02-17T13:21:15",
        "upload_time_iso_8601": "2023-02-17T13:21:15.125605Z",
        "url": "https://files.pythonhosted.org/packages/74/f5/8ef8af88044f3801e3679836c978012a5650f14c528383823c067736480c/nostr_r3drun3-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b230ed1f6e6e32de45f4c9907d85a25800da28182d1b394d8cfde45b5e3e81e8",
          "md5": "3e2ebb5a2df8c18776e53896f05424d6",
          "sha256": "fa0b3984eb3457ca5ec0b1fbe125d372903940c73e51d435bbcf21bee3566dd6"
        },
        "downloads": -1,
        "filename": "nostr-r3drun3-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3e2ebb5a2df8c18776e53896f05424d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.0",
        "size": 20576,
        "upload_time": "2023-02-17T13:21:16",
        "upload_time_iso_8601": "2023-02-17T13:21:16.762968Z",
        "url": "https://files.pythonhosted.org/packages/b2/30/ed1f6e6e32de45f4c9907d85a25800da28182d1b394d8cfde45b5e3e81e8/nostr-r3drun3-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "74f58ef8af88044f3801e3679836c978012a5650f14c528383823c067736480c",
        "md5": "4221d4a8d43ed3a392d1c044866b56c9",
        "sha256": "2304aa51aa5b58f84201e77f397342973d399bcd41c75bf094960879db10286b"
      },
      "downloads": -1,
      "filename": "nostr_r3drun3-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4221d4a8d43ed3a392d1c044866b56c9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">3.6.0",
      "size": 17357,
      "upload_time": "2023-02-17T13:21:15",
      "upload_time_iso_8601": "2023-02-17T13:21:15.125605Z",
      "url": "https://files.pythonhosted.org/packages/74/f5/8ef8af88044f3801e3679836c978012a5650f14c528383823c067736480c/nostr_r3drun3-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b230ed1f6e6e32de45f4c9907d85a25800da28182d1b394d8cfde45b5e3e81e8",
        "md5": "3e2ebb5a2df8c18776e53896f05424d6",
        "sha256": "fa0b3984eb3457ca5ec0b1fbe125d372903940c73e51d435bbcf21bee3566dd6"
      },
      "downloads": -1,
      "filename": "nostr-r3drun3-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "3e2ebb5a2df8c18776e53896f05424d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.6.0",
      "size": 20576,
      "upload_time": "2023-02-17T13:21:16",
      "upload_time_iso_8601": "2023-02-17T13:21:16.762968Z",
      "url": "https://files.pythonhosted.org/packages/b2/30/ed1f6e6e32de45f4c9907d85a25800da28182d1b394d8cfde45b5e3e81e8/nostr-r3drun3-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}