{
  "info": {
    "author": "Marc Albrecht",
    "author_email": "marc.albrecht@free.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# Pygomme \n\n**Premier exemple : utilisation de mesures expérimentales**\n\n\n\n<pre><code>\nimport pygomme as pg\nimport numpy as np  \n\n\"\"\"\nPremier exemple : Type A\n\nCréation d'un objet pygomme.MeasureA à partir de données expérimentales (bidonnées)\nL'utilisateur indique la fonction de distribution qu'il veut utiliser. Celle-ci aura la même moyenne et le même écart-type que les données.\n\"\"\"\nmeasures = [4.534e3,4.524e3,4.555e3,4.566e3,4.514e3,4.508e3,4.535e3,4.507e3,\n            4.534e3,4.574e3,4.576e3,4.535e3,4.584e3,4.594e3,4.524e3,4.556e3,]\n\nre = pg.MeasureA(label=\"R/\\Omega\",       # label utilisé uniquement pour les graphiques\n                title=\"Résistance $R$\",  # idem\n                experimental_data=measures, # listes des mesures (doit être itérables)  \n                distribution=np.random.normal, # fonction de distribution utilisée\n                )\n\nre.histogram(n=int(1e5),    # Nombre de points utilisés pour le graphique\n             file=\"Re-normal.png\", # Nom du fichier graphique créé\n             )\n\n\"\"\"\nUtilisation des mêmes données, mais avec une autre fonction de distribution.\n\"\"\"\nre.distribution = np.random.uniform # fonction de distribution utilisée\n\nre.histogram(n=int(1e6),    # Nombre de points utilisés pour le graphique\n             file=\"Re-uniform.png\", # Nom du fichier graphique créé\n             )\n\n\"\"\"\nMesure de la vitesse du son. Exemple emprunté à M. Champion\n\"\"\"\n\nd = np.array([10, 13, 17, 20, 22, 26, 30, 33, 37, 40 ])*1e-2\ntau = np.array([0.27, 0.38, 0.50, 0.59, 0.66, 0.73, 0.90, 0.96, 1.09, 1.15])*1e-3\n\nc_exp = d/tau\n\nc = pg.MeasureA(label=\"\\\\frac{c}{m/s}\",\n                title=\"Vitesse des ondes sonores\",\n                experimental_data=c_exp,\n                )\n\nprint(f\"La vitesse des ondes est {c} m/s.\")\n\nc.histogram(file=\"Celerite-1.png\")\n\n\"\"\"\nUtilisation d'un second jeux de données.\n\"\"\"\nc.experimental_data = np.array([343.8, 339.2, 343.0, 343.9, \n                                340.5, 335.8, 344.3, 341.0, \n                                346.5, 337.9, 345])\n\nc.histogram(file=\"Celerite-2.png\")\n\nprint(f\"La vitesse des ondes est {c} m/s.\")\n</code></pre>\n\n**Second exemple : Type B et propagation.**\n\n<pre><code>\n#!/usr/bin/env python3\n\"\"\"\nSecond exemple : Type B et propagation.\n\nCréation de plusieurs objets pygomme.MeasureB, avec différentes fonctions de distribution.\nCréation de deux objets pygomme.Propagation pour étudier la propagation des erreurs en utilisant la méthode CdL.\n\"\"\"\nimport pygomme as pg\nimport numpy as np  \n\nr1 = pg.MeasureB(label=\"R_1/\\Omega\",      # label pour les graphiques\n                title=\"Résistance $R_1$\", # idem\n                value=9.8e3,              # valeur moyenne \n                half_width=0.2e3,         # demi-largeur de la distribution\n                distribution=np.random.uniform, # choix d'une distribution uniforme\n                )\n\nr2 = pg.MeasureB(label=\"R_2/\\Omega\", \n                title=\"Résistance $R_2$\",\n                value=15.3e3,       # valeur moyenne\n                scale=0.2e3,        # déviation standard \n                distribution = np.random.normal, # choix d'une loi normale\n                )\n\n# Création des fichiers contenant les courbes\nr1.histogram(gaussian=True, # Affichage d'une gaussienne de même moyenne et écart-type\n             n=int(1e4),  # Nombre de points pour l'histogramme\n             file=\"R1-hist.png\",  # Fichier de sortie\n             )\nr2.histogram(gaussian=True, n=int(1e4), file=\"R2-hist.png\")\n\n# Fonction ancillaire pour l'étude de la propagation des erreurs.\n# Cette fonction doit être vectorisée et être utilisable avec des paramètres\n# de type numpy.ndarray\ndef parallele(ra,rb):\n    r = ra*rb/(ra+rb)\n    return r\n\n# \nrp = pg.Propagation(label=\"R_p/\\Omega\", # Utilisé pour le graphiques\n                    title=\"Résistance $R_p$\", # idem\n                    function=parallele,  # fonction de propagation des erreurs\n                    argument=[r1,r2],   # objets pygomme\n                    n_sim=int(1e5),  # Nombre de points pour la simulation CdL\n                    )\n\n# Tracé d'une figure avec la distribution pour les deux résistances R1 et R2\n# et pour la résistance de l'association parrallèle.\nrp.histogram(file=\"Rp.png\",\n             gaussian=True)\n\n# Les valeurs moyenne et l'écart-type de Rp sont accessibles :\nprint(\"La valeur moyenne de Rp est {:.0f} Ω\".format(rp.average()))\n\nprint(\"L'écart-type de Rp est {:.0f} Ω\".format(rp.deviation()))\n\n# Mais on peut aussi utiliser directement la fonction print() :\nprint(rp)\n\n# La méthode report permet de créer une figure avec l'histogramme\n# de distribution des trois résistances.\nrp.report(file=\"Rp.png\")\n\n#\n# Propagation d'erreurs avec une grandeur de type A et une de type B\n#\nrpp = pg.Propagation(label=\"R_p'/\\Omega\", # Utilisé pour le graphiques\n                    title=\"Résistance $R_p'$\", # idem\n                    function=parallele,  # fonction de propagation des erreurs\n                    argument=[r1,r2],   # objets pygomme\n                    n_sim=int(1e6),  # Nombre de points pour la simulation CdL\n                    )\n\nrpp.report(file=\"Rpp.png\")\nrpp.report_partial(file=\"Rpp-partial.png\")\n\n# On ajoute deux autres résisances.\nr3 = pg.MeasureB(label=\"R_3/\\Omega\",\n                title=\"Résistance $R_3$\",\n                value=12.5e3 ,\n                half_width=0.5e3 ,\n                distribution=np.random.triangular,)\n\nr4 = pg.MeasureB(label = \"R_4/\\Omega\",\n                title=\"Résistance $R_4$\",\n                value = 11.3e3,\n                scale = 0.4e3,\n                distribution = np.random.normal,)\n\n# Association des quatre résistances.\ndef parallele_serie(r1,r2,r3,r4):\n    r = r1*r2/(r1+r2) + r3*r4/(r3+r4)\n    return r\n\nrps = pg.Propagation(label = \"R_{ps}/\\Omega\",\n                    title=\"Résistance $R_{ps}$\",\n                    function=parallele_serie,\n                    argument=[r1,r2,r3,r4],\n                    n_sim=int(1e5))\n\n# Figure avec les histogrammes des cinq résistances.\nrps.report(file=\"Rps.png\")\n\n# Figure qui permet d'évaluer l'influence des différents paramètres.\n# Pour les quatre premières courbes, la simulation CdL est faite en n'utilisant\n# que la distribution d'une des quatre résistances, les autres étant prises égales à\n# leur valeur moyenne.\nrps.report_partial(file=\"Rps-partial.png\")\n\n# Calcul et écriture de l'écart normalisé entre Rp et Rps:\nprint(rps-rp)\n# que l'on utilisera correctement:\nprint(\"L'écart normalisé est {:.2f}\".format(rps-rp))\n\n# Création d'une grandeur de référence :\nr_ref = pg.Reference(label = \"R_{réf}/\\Omega\",\n                     title=\"Résistance $R_{réf}$\",\n                     value=11.8e3)\n\n# Affichage de l'écart normalisé entre Rps et R_ref :\nprint(\"L'écart normalisé est {:.2f}\".format(rps-r_ref))\n\n# Création d'un objet pygomme.Compare qui permet de comparer les \n# histogrammes de deux objets pygomme.\nd = rps // r_ref\nd.report(file=\"D-report.png\",n=int(2e5))\nd.report(file=\"D-report-lr.png\",n=int(2e3))\n\n# Création d'une nouvelle mesure Rt\nrt = pg.MeasureB(label = \"R_t/\\Omega\",\n                title=\"Résistance $R_t$\",\n                value = 11.3e3 ,\n                scale = 0.4e3 ,\n                distribution = np.random.normal,\n                )\n\n# Calcul et écriture de l'écart normalisé entre Rps et Rt:\nprint(rps-rt)\n\n# Création d'un objet pygomme.Compare\nc = rps // rt\n# une syntaxe équivalente : C = pg.Compare(A=Rps,B=Rt)\n# \n# Affichage des histogrammes :\nc.report(file=\"C-report.png\",n=int(2e5))\nc.report(file=\"C-report-lr.png\",n=int(2e3))\n</code></pre>\n\n**Troisième exemple : Utilistation d'un multimètre. **\n\n<pre><code>\n#!/usr/bin/env python3\n\"\"\"\nTroisième exemple : Utilistation d'un multimètre.\n\nLa precision est donnée par le constructeur, avec en général, une contribution absolue (digit) et une contribution relative.\n\"\"\"\n\nimport pygomme as pg\n#import numpy as np  \n\nu = pg.MeasureMultimeter(label=\"U/\\mathrm{V}\",   # pour les graphiques\n                        title=\"Tension mesurée\", # idem\n                        value=5.184,             # valeur lue : 5.184 V \n                        precision_digit=8e-2,    # precision : 0.08 V\n                        precision_relative=5e-3, # precision : 0.5 %\n                        )\n\ni = pg.MeasureMultimeter(label=\"I/\\mathrm{A}\",\n                        title=\"Intensité mesurée\",\n                        value=0.1234,            # Valeur lue : 0.1234 A\n                        precision_digit=10e-3,   # precision : 1 mA\n                        precision_relative=1e-2) # precision : 1 % \n\ndef ohm(u,i) :\n    return u/i\n\nr = pg.Propagation(label=\"R/\\Omega\",\n                title=\"résistance $R$\",\n                function=ohm,\n                argument=(u,i),\n                n_sim = int(1e5))\n\n# Création des graphiques\nr.report(file=\"R-report.png\")\nr.report_partial(file=\"R-report_partial.png\",gaussian=True)\n\n</code></pre>\n\n** Quatrième exemple : focométrie**\n\n<pre><code>\n#!/usr/bin/env python3\n\"\"\"\nFocométrie\n\"\"\"\n\nimport numpy as np  \nimport pygomme as pg\n\nxA = pg.MeasureB(label=\"x_A/m\",\n                title=\"Position de l'objet\",\n                value=0.112,\n                half_width=2e-3,\n                distribution=np.random.uniform,)\n\nxAp = pg.MeasureB(label=\"x_A'/m\",\n                title=\"Position de l'image\",\n                value=1.122,\n                half_width=2e-3,\n                distribution=np.random.uniform,)\n\nxO = pg.MeasureB(label=\"x_O/m\",\n                title=\"Position de la lentille\",\n                value=0.352,\n                half_width=4e-3,\n                distribution=np.random.uniform,)\n\ndef focometrie(xA,xAp,xO):\n    fp = 1/(1/(xAp-xO)-1/(xA-xO))\n    return fp\n\nfp = pg.Propagation(label=\"f'/m\",\n                title=\"Distance focale\",\n                function=focometrie,\n                argument=[xA,xAp,xO],\n                n_sim=int(1e6))  \n\n# Création des graphiques :\nfp.report(file=\"Fp-report.png\")\nfp.report_partial(file=\"Fp-report_partial.png\")\n\n</code></pre>\n\n** Calorimètrie **\n\n<pre><code>\n#!/usr/bin/env python3\n\"\"\"\nCalorimétrie\n\nExemple repris de \nhttps://www.ac-paris.fr/portail/jcms/p2_2334447/ressources-numeriques-mesures-et-incertitudes-bcpst-n1?cid=p1_2333951&portal=piapp1_59010\n\"\"\"\nimport numpy as np  \nimport pygomme as pg\n\nat = 0.1 # Demi-étendue pour les températures T1 et T2\natf = 1 # Demi-étendue pour la température Tf\nam = 0.5 # Demi-étendue pour les masses\n\nt1 = pg.MeasureB(label=\"T_1/°C\",\n                 title=\"Température de l'eau froide\",\n                 value=20.2,\n                 half_width=at,\n                 distribution=np.random.uniform)\n\nt2 = pg.MeasureB(label=\"T_2/°C\",\n                 title=\"Température de l'eau chaude\",\n                 value=47.3,\n                 half_width=at,\n                 distribution=np.random.uniform)\n\ntf = pg.MeasureB(label=\"T_f/°C\",\n                 title=\"Température finale\",\n                 value=31.2,\n                 half_width=atf,\n                 distribution=np.random.triangular)\n\nm1i = pg.MeasureB(label=\"m_{1i}/\\mathrm{g}\",\n                  title=\"Masse du bécher 1 plein\",\n                  value=153,\n                  half_width=am,\n                  distribution=np.random.uniform)\n\nm1f = pg.MeasureB(label=\"m_{1f}/\\mathrm{g}\",\n                  title=\"Masse du bécher 1 vide\",\n                  value=99,\n                  half_width=am,\n                  distribution=np.random.uniform)\n\nm2i = pg.MeasureB(label=\"m_{2i}/\\mathrm{g}\",\n                  title=\"Masse du bécher 2 plein\",\n                  value=176,\n                  half_width=am,\n                  distribution=np.random.uniform)\n\nm2f = pg.MeasureB(label=\"m_{2f}/\\mathrm{g}\",\n                  title=\"Masse du bécher 2 vide\",\n                  value=119,\n                  half_width=am,\n                  distribution=np.random.uniform)\n\ndef capacite(t1,t2,tf,m1i,m1f,m2i,m2f):\n    c = 4.185*((m2i-m2f)*(t2-tf)/(tf-t1)+(m1f-m1i))\n    return c\n\nc_cal = pg.Propagation(label=\"C_{cal}/(J/K)\",\n                       title=\"Capacité thermique du calorimètre\",\n                       function=capacite,\n                       argument=[t1,t2,tf,m1i,m1f,m2i,m2f],\n                       n_sim = int(1e6),\n                       )\n\nc_cal.report(\"Ccal-report.png\")\nc_cal.report_partial(\"Ccal-report_partial.png\")\n\n</code></pre>\n\n** Régression linéaire **\n\n<pre><code>\n#!/usr/bin/env python3\n\"\"\"\nRégression linéaire.\n\nExemple emprunté à Maxime Champion.\n\"\"\"\nimport numpy as np  \nimport pygomme as pg\n\nfrequences = np.array([11.825,10.111,8.210,7.4129,6.8838])*100\nu_frequences = np.array([2.3,1.7,1.1,0.91,0.79])\n\nec = np.array([2.40,1.69,0.91,0.57,0.35])\nu_ec = 0.05\n\nfrequence = pg.MeasureB(label=\"\\\\frac{\\\\nu}{THz}\",\n                        title=\"Fréquence\",\n                        value=frequences,\n                        scale =u_frequences,\n                        distribution = np.random.normal,\n                        )\n\nenergie = pg.MeasureB(label=\"\\\\frac{E_c}{eV}\",\n                      title=\"Énergie cinétique\",\n                      value=ec,\n                      scale=u_ec,\n                      distribution = np.random.normal,\n                      )\n\nlf = pg.LinearFit(x=frequence,\n                  y=energie,\n                  n=int(1e3))\n\nprint(lf)\nprint(lf.a)\nprint(lf.b)\n\nlf.a.label = \"a\"\nlf.a.histogram(file=\"a-hist.png\")\nlf.b.histogram(file=\"b-hist.png\")\nlf.report(file=\"Planck-report.png\")\n\n\"\"\"\nÉtude sans tenir compte de la corrélation entre a et b\n\"\"\"\n\ndef constante_de_planck(a):\n    h = a*1.602e-19*1e-12\n    return h\n\ndef frequence_seuil(a,b):\n    fs = -b/a\n    return fs\n\nh = pg.Propagation(label=\"h/(Js)\",\n                   title=\"Constante de Planck\",\n                   function=constante_de_planck,\n                   argument=(lf.a,),\n                   n_sim=int(1e5))\n\nfs1 = pg.Propagation(label=\"\\\\frac{\\\\nu_1}{THz}\",\n                   title=\"Fréquence seuil sans corrélation\",\n                   function=frequence_seuil,\n                   argument=(lf.a,lf.b),\n                   n_sim=int(1e5))\n\nh.histogram(file=\"h-hist.png\")\nfs1.report(file=\"fs-hist.png\")\n\nprint(f\"La constante de Planck est {h} J/s.\")\nprint(f\"La fréquence seuil est {fs1} THz.\")\n\n\"\"\"\nÉtude en tenant compte de la corrélation entre a et b\n\"\"\"\n\nab = lf.ab\nab.a_label = \"a\"\nab.b_label = \"b\"\nab.scatter(file=\"ab-scatter.png\")\n\nfs_cor = -ab.b/ab.a\n\nfs2 = pg.MeasureA(label=\"\\\\frac{\\\\nu_2}{THz}\",     \n                title=\"avec corrélation\",  \n                experimental_data=fs_cor, \n                distribution=np.random.normal,\n                )\n\nprint(f\"La fréquence seuil est {fs2} THz.\")\n\ncfs = fs1 // fs2\n\ncfs.report(file=\"frequence-seuil-12.png\")\n\n\"\"\"\nÉtude en créant un objet pygomme.correlation\n\"\"\"\n\ndata_a = lf.a.experimental_data\ndata_b = lf.b.experimental_data\n\nab2 = pg.Correlation(labels=[\"$a$\",\"$b$\"],\n                titles=[\"pente\",\"ordonnées à l'origine\"],\n                keys=['a','b'],\n                color=\"gray\",\n                values=[data_a,data_b],)\n\nab2.compute_cov()\n\nprint(ab2.cov)\n\nab2.create_samples(n=int(1e5))\n\n#print(ab2.samples['a'])\n\nab2.scatter(x=ab2.quantity['a'].samples(),\n           y=ab2.quantity['b'].samples(),\n           file=\"ab2-scatter.png\")\n\ndef frequence_seuil(x,y):\n    fs = -y/x\n    return fs\n\nfs3 = pg.Propagation(label=\"\\\\frac{\\\\nu_3}{THz}\",\n                   title=\"Fréquence seuil avec pygomme.correlation\",\n                   function=frequence_seuil,\n                   argument=(ab2.quantity['a'],ab2.quantity['b']),\n                   n_sim=int(1e6))\n\nprint(f\"La fréquence seuil est {fs3} THz.\")\n\ncfs13 = fs1 // fs3\n\ncfs13.report(file=\"frequence-seuil-13.png\")\n\ncfs23 = fs2 // fs3\n\ncfs23.report(file=\"frequence-seuil-23.png\")\n</code></pre>",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygomme",
    "package_url": "https://pypi.org/project/pygomme/",
    "platform": null,
    "project_url": "https://pypi.org/project/pygomme/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pygomme/0.0.8/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A simple package for calculating errors propagation",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13558429,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62c225d992745b63350e446e4f19b73dc4721c65376d03266f5b5792deae5593",
          "md5": "3066f3637cba86418a23738280d6093f",
          "sha256": "bc0ce16aab53e1e40e59a4adc1d8b0f9cc183fe4056504a03a95232cd7c77e47"
        },
        "downloads": -1,
        "filename": "pygomme-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3066f3637cba86418a23738280d6093f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11653,
        "upload_time": "2021-04-13T21:01:30",
        "upload_time_iso_8601": "2021-04-13T21:01:30.190737Z",
        "url": "https://files.pythonhosted.org/packages/62/c2/25d992745b63350e446e4f19b73dc4721c65376d03266f5b5792deae5593/pygomme-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "876359bc97cac4551c7747411c0f93d534ab05841139c1677be9bf18920dbcda",
          "md5": "c7fec1d3bdb83fed413b8fc4ee5edf1a",
          "sha256": "f03a2bfc882f290841e343639983e3816cae75e0dbcbfdc6ab28342aa82bb80d"
        },
        "downloads": -1,
        "filename": "pygomme-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c7fec1d3bdb83fed413b8fc4ee5edf1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16462,
        "upload_time": "2021-04-13T21:01:31",
        "upload_time_iso_8601": "2021-04-13T21:01:31.175919Z",
        "url": "https://files.pythonhosted.org/packages/87/63/59bc97cac4551c7747411c0f93d534ab05841139c1677be9bf18920dbcda/pygomme-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfc92c1c86e95f4fa8e9f37287a7e3c5a283d87c22d57aa8a76e0af67ad1ddd1",
          "md5": "f6893aac218e98f11807a7d6a63ddc25",
          "sha256": "94c700c16e1d3171256ab08250005f5ea455ecadcc41991abc453db75a65642a"
        },
        "downloads": -1,
        "filename": "pygomme-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6893aac218e98f11807a7d6a63ddc25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3592186,
        "upload_time": "2021-04-15T14:01:08",
        "upload_time_iso_8601": "2021-04-15T14:01:08.037159Z",
        "url": "https://files.pythonhosted.org/packages/bf/c9/2c1c86e95f4fa8e9f37287a7e3c5a283d87c22d57aa8a76e0af67ad1ddd1/pygomme-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5bb31fbfb13312790b514a85a90b2a85e44dcf23316fdf8a10284d8bed7325f",
          "md5": "d8ab53331a0143a162ba1d42a5b9b99e",
          "sha256": "a465a9e34807df31fa079187ecdeb9d075cc7326eec7fce668dceb1e690fa1f8"
        },
        "downloads": -1,
        "filename": "pygomme-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d8ab53331a0143a162ba1d42a5b9b99e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3584027,
        "upload_time": "2021-04-15T14:01:10",
        "upload_time_iso_8601": "2021-04-15T14:01:10.365156Z",
        "url": "https://files.pythonhosted.org/packages/f5/bb/31fbfb13312790b514a85a90b2a85e44dcf23316fdf8a10284d8bed7325f/pygomme-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9d89f605e059c38fcd1f9f483ab4199e1c144f92963b52e6c9b16a04f11c2b3",
          "md5": "fb7eb254feb00b731b96cb9e1f76912f",
          "sha256": "3ad079a5c634b7942ac7a5916bfaefbd0085444562769242c494942a04ad936b"
        },
        "downloads": -1,
        "filename": "pygomme-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "fb7eb254feb00b731b96cb9e1f76912f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3583827,
        "upload_time": "2022-04-19T16:07:34",
        "upload_time_iso_8601": "2022-04-19T16:07:34.637446Z",
        "url": "https://files.pythonhosted.org/packages/b9/d8/9f605e059c38fcd1f9f483ab4199e1c144f92963b52e6c9b16a04f11c2b3/pygomme-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9d89f605e059c38fcd1f9f483ab4199e1c144f92963b52e6c9b16a04f11c2b3",
        "md5": "fb7eb254feb00b731b96cb9e1f76912f",
        "sha256": "3ad079a5c634b7942ac7a5916bfaefbd0085444562769242c494942a04ad936b"
      },
      "downloads": -1,
      "filename": "pygomme-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "fb7eb254feb00b731b96cb9e1f76912f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3583827,
      "upload_time": "2022-04-19T16:07:34",
      "upload_time_iso_8601": "2022-04-19T16:07:34.637446Z",
      "url": "https://files.pythonhosted.org/packages/b9/d8/9f605e059c38fcd1f9f483ab4199e1c144f92963b52e6c9b16a04f11c2b3/pygomme-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}