{
  "info": {
    "author": "Alexis Baird",
    "author_email": "alexis.elevator.developer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Elevator Library\n\nThis library provides developers with an `Elevator` class, that allows a physical elevator to\nreceive orders and fulfill them. It has to:\n\n1. Receive orders to pick up passengers (floor orders) and drop them off\n   (internal orders). Orders can come also from the administrator of the elevators that could be\n   received through a web server\n2. Internally create and adapt a strategy to execute these orders\n3. Communicate with the machinery to implement this strategy through motion\n   (go up, go down, open the doors...)\n\nIt has to contend with those constraints:\n\n- Acceleration and deceleration will be instant time to go from one floor to the next will take 3\n  seconds. In future versions these problems will be handled more accurately.\n- Doors stay open for 5 seconds and take 1 second to close\n\n## Contexts\n\nThis class is meant to be used in two contexts:\n\n- **Concrete elevator:** The embarked program that actually runs the physical elevator. The\n  program's `main()` function will:\n    1. Construct an Elevator instance based on configuration specifying the number of floors, the\n       space between each floor, maximum acceptable acceleration force\n    2. Start the instance's internal runtime by calling it's `start()` method in a background\n       process or thread\n    3. Transform signals observed from the different sensors buttons, elevator vertical position etc\n       into requests sent to the `Elevator` instance.\n\n```python\nfrom multiprocessing import Process\nimport multiprocessing as mp\nimport time\nimport random\n\n\ndef press_button(q, floors):\n    \"\"\"\n    Simulates floor buttons being randomly pressed for illustration purposes\n    \"\"\"\n    while True:\n        time.sleep(random.randint(1, 20))\n        q.put(random.randint(0, floors - 1))\n\n\ndef main():\n    # Elevator that serves 5 floors, labelled from 0 to 4 â€” often 0 is referred\n    # to as 'Ground Floor'\n    floors = 5\n    elevator = Elevator(floors)\n    call_queue = mp.Queue()\n\n    elevator_runtime = Process(target=elevator.start)\n    exterior_control = Process(target=press_button, args=(call_queue, floors))\n\n    while True:\n        elevator.pick_up(call_queue.get())\n\n\nif __name__ == main():\n    main()\n```\n\n- **Simulated elevators:** To run a large scale simulations that scales up to many elevators, many\n  buildings, passengers, machinery events. Many instances can be created and launched where these\n  exterior elements will interact with them concurrently.\n\n## Elevator state\n\nThe elevator has several states:\n\n- Moving/Stationary\n- Vertical position:\n    1. `1` for floor 1\n    2. `1.5` when it is between floors 1 and 2\n- Doors opened or closed\n- Cargo weight\n\n## APIs\n\n### Passenger APIs\n\n- `pick_up(floor_number)` the passenger calls this method (method call is interfaced by the floor\n  elevator button) to ask the elevator to pick him or her up. Future versions will allow waiting\n  passengers to select 'up' or 'down'.\n- `drop_off(floor_number)` once the passenger is inside the elevator he selects uses this method (\n  through the internal control panel) to tell the elevator to take him to floor `floor_number`\n- `panic()` when this method is called the elevator goes to the nearest floor below, sends a message\n  to security and or police forces and opens the doors\n\n### Administrator APIs\n\n- `fire_alarm()` the administrator uses this method to engage the fire safety protocol\n- `go_to_floor()` the administrator calls this method to tell the elevator to go to a certain floor\n  if it isn't busy. This can be useful for trying to optimize the elevator's waiting position\n  through heuristics or machine learning for instance\n- `emergency_breaks()` the administrator calls this method to protect passengers from a catastrophic\n  free fall it calls gets called when the elevator is moving, and the weight cargo weight sensor\n  reads zero indicating that the elevator isn't supporting its' own weight anymore\n\n## Parameters\n\n### Floors\n\nThe elevator has a number of floors. If the number of floors is 5, then the elevator goes from floor\n0 (or ground floor) all the way to floor number 4\n\n### Maximum Weight\n\nThis has to be a required argument in the constructor: having a default could be tremendously\ndangerous if it was implemented carelessly\n\n### Minimum Weight\n\nWeight of the elevator when empty, if the scale/weight sensor reads below this number, the elevator\nmight be in free fall\n\n## Safety\n\n### Maximum Weight Check\n\nBefore closing the doors, the elevator has to check that the weight of it's cargo does not exceed\nit's safety limit. Specified during the instance's construction.\n\n### Fire Safety\n\nIf the fire alarm goes off:\n\n- Stationary elevators should open their doors and no longer take instructions\n- Moving elevators should go to the closest floor below, stop and open their doors\n\n### Panic Button\n\nMeant to be hit by one of the passengers if he is being assaulted by another passenger, or is in\ndanger for any other reason inside the elevator. It will:\n\n1. Go to the nearest floor below\n2. Open the doors and send a message to building security or police forces\n\nThese steps will be carried out silently so that the assailant isn't alerted\n\n### Breaks\n\n#### Stationary State\n\nWhen the elevator is stationary the breaks should be on. Especially when the doors are open: if\npassengers are getting in and out, and the cable snaps the result would be catastrophic\n\n#### Free Fall\n\nIf the weight sensor goes below the minimum weight the elevator could be in free fall emergency\nbreaks have to be on\n\n### Door Obstruction\n\nThe elevator has an obstruction sensor, if this sensor is activated doors have to open\n\n## Metrics\n\nElevators will produce logs reporting on their activity. These messages can then be sent to a\nmonitoring service allowing for analytics and machine learning lower downstream\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abaird1992/elevators",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "elevators",
    "package_url": "https://pypi.org/project/elevators/",
    "platform": "",
    "project_url": "https://pypi.org/project/elevators/",
    "project_urls": {
      "Bug Tracker": "https://github.com/abaird1992/elevators/issues",
      "Homepage": "https://github.com/abaird1992/elevators"
    },
    "release_url": "https://pypi.org/project/elevators/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Software for operating elevators and running simulations",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9829893,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9168470f424417b6faa9d5256b7bdb36952990d6048e85d645790f425a3e12d",
          "md5": "e059bdf91a515c9ee9e582ce4c03443d",
          "sha256": "6382a10aee46d42c55729720de63d78816865144054f0bda4a7c944e4e9c39f2"
        },
        "downloads": -1,
        "filename": "elevators-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e059bdf91a515c9ee9e582ce4c03443d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 4492,
        "upload_time": "2021-03-20T16:45:38",
        "upload_time_iso_8601": "2021-03-20T16:45:38.064093Z",
        "url": "https://files.pythonhosted.org/packages/b9/16/8470f424417b6faa9d5256b7bdb36952990d6048e85d645790f425a3e12d/elevators-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60a5c74aae501c2429d5072912abb44092604229d17ea21b040357e9645308f9",
          "md5": "2bb87b70ef8defdfda3ca0f0b5b76102",
          "sha256": "217731cc75fda1f91e6a5412353c98230b5e1c4a48407c71b98ac3a4bd69a492"
        },
        "downloads": -1,
        "filename": "elevators-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2bb87b70ef8defdfda3ca0f0b5b76102",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4424,
        "upload_time": "2021-03-20T16:45:39",
        "upload_time_iso_8601": "2021-03-20T16:45:39.457425Z",
        "url": "https://files.pythonhosted.org/packages/60/a5/c74aae501c2429d5072912abb44092604229d17ea21b040357e9645308f9/elevators-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9168470f424417b6faa9d5256b7bdb36952990d6048e85d645790f425a3e12d",
        "md5": "e059bdf91a515c9ee9e582ce4c03443d",
        "sha256": "6382a10aee46d42c55729720de63d78816865144054f0bda4a7c944e4e9c39f2"
      },
      "downloads": -1,
      "filename": "elevators-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e059bdf91a515c9ee9e582ce4c03443d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 4492,
      "upload_time": "2021-03-20T16:45:38",
      "upload_time_iso_8601": "2021-03-20T16:45:38.064093Z",
      "url": "https://files.pythonhosted.org/packages/b9/16/8470f424417b6faa9d5256b7bdb36952990d6048e85d645790f425a3e12d/elevators-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60a5c74aae501c2429d5072912abb44092604229d17ea21b040357e9645308f9",
        "md5": "2bb87b70ef8defdfda3ca0f0b5b76102",
        "sha256": "217731cc75fda1f91e6a5412353c98230b5e1c4a48407c71b98ac3a4bd69a492"
      },
      "downloads": -1,
      "filename": "elevators-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2bb87b70ef8defdfda3ca0f0b5b76102",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 4424,
      "upload_time": "2021-03-20T16:45:39",
      "upload_time_iso_8601": "2021-03-20T16:45:39.457425Z",
      "url": "https://files.pythonhosted.org/packages/60/a5/c74aae501c2429d5072912abb44092604229d17ea21b040357e9645308f9/elevators-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}