{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Speech recognition client for Vatis API in Python\n\nPython implementation of the client for Vatis's ASR services\n\n# Getting started\n\n## Requirements\n* Python >= 3.6\n\n## Installation\n1. Create a free account on the [Vatis Platform](https://vatis.tech/)\n2. Obtain you're private [API key](https://vatis.tech/account/api-key)\n3. Install Vatis Live ASR client: `pip install \"vatis_asr_client[remote]\"`\n4. Add your private key as environment variable: `VATIS_ASR_CLIENT_API_KEY=<YOUR_API_KEY>`\n5. (Optional) Configure other [environment variables](#environment-variables)\n\n## Usage\n\n##### 1. Create a stream configuration object\n```pythonstub\nfrom vatis.live_asr.config.stream import StreamConfig, Language, SPEED_CONFIGURATION, SampleRate, Channel, \\\n     DEFAULT_CONNECTION_CONFIG\n\nstream_config: StreamConfig = StreamConfig(\n        language=Language.ro_RO,\n        performance_config=SPEED_CONFIGURATION,\n        connection_config=DEFAULT_CONNECTION_CONFIG,\n        sample_rate=SampleRate.RATE_16000,\n        channels=Channel.ONE,\n    )\n``` \n\n##### 2. Create a LiveStream based on your configuration\n```pythonstub\nfrom vatis.live_asr.stream.factory import create_stream\n\nwith create_stream(stream_config, stream_type='BLOCKING') as stream:\n    # ...\n\n```\n\n##### 3. Add a listener for the events of your stream\n```pythonstub\nfrom vatis.live_asr.utils.observer import FormattedLiveStreamObserver\n\nstream.add_observer(FormattedLiveStreamObserver())\n```\n\n##### 4. Create your custom data generator or use any of the predefined ones\n```pythonstub\nfrom vatis.live_asr.utils.generator import file_generator\n\ndata_generator: Generator = file_generator('<your_wav_file_path>', stream_config)\n```\n\n##### 5. Pass the generator to the stream and wait until it finishes\n```pythonstub\nstream.transcribe(data_generator)\n\nstream.wait_for_transcription()\n```\n\n## Examples\n\n##### Stream a file using a stream observer\n```python\nfrom typing import Generator\n\nfrom vatis.live_asr.config.stream import StreamConfig, Language, SPEED_CONFIGURATION, SampleRate, Channel, \\\n    DEFAULT_CONNECTION_CONFIG\nfrom vatis.live_asr.logging import get_logger\nfrom vatis.live_asr.stream.factory import create_stream\nfrom vatis.live_asr.utils.generator import file_generator\nfrom vatis.live_asr.utils.observer import FormattedLiveStreamObserver\n\nlogger = get_logger('main')\n\n\nif __name__ == '__main__':\n    stream_config: StreamConfig = StreamConfig(\n        language=Language.ro_RO,\n        performance_config=SPEED_CONFIGURATION,\n        connection_config=DEFAULT_CONNECTION_CONFIG,\n        sample_rate=SampleRate.RATE_16000,\n        channels=Channel.ONE,\n    )\n\n    with create_stream(stream_config, stream_type='BLOCKING') as stream:\n        stream.add_observer(FormattedLiveStreamObserver())\n\n        data_generator: Generator = file_generator('<your_wav_file_path>', stream_config)\n\n        stream.transcribe(data_generator)\n\n        stream.wait_for_transcription()\n\n```\n\n##### Streaming a file using a generator\n```python\nfrom typing import Generator\n\nfrom vatis.live_asr.config.stream import StreamConfig, Language, SPEED_CONFIGURATION, SampleRate, Channel, \\\n    DEFAULT_CONNECTION_CONFIG\nfrom vatis.live_asr.logging import get_logger\nfrom vatis.live_asr.stream.factory import create_stream\nfrom vatis.live_asr.utils.generator import file_generator\n\nlogger = get_logger('main')\n\n\nif __name__ == '__main__':\n    stream_config: StreamConfig = StreamConfig(\n        language=Language.ro_RO,\n        performance_config=SPEED_CONFIGURATION,\n        connection_config=DEFAULT_CONNECTION_CONFIG,\n        sample_rate=SampleRate.RATE_16000,\n        channels=Channel.ONE,\n    )\n\n    with create_stream(stream_config, stream_type='BLOCKING') as stream:\n        data_generator: Generator = file_generator('<your_wav_file_path>', stream_config)\n\n        stream.transcribe(data_generator)\n\n        for response in stream.create_generator():\n            logger.info(response.transcript)\n\n```\n\n##### Infinite stream from the microphone using stream observers\n```python\nfrom typing import Generator\n\nfrom vatis.live_asr.config.stream import StreamConfig, Language, SPEED_CONFIGURATION, SampleRate, Channel, \\\n    DEFAULT_CONNECTION_CONFIG\nfrom vatis.live_asr.stream.factory import create_stream\nfrom vatis.live_asr.utils.generator import microphone_generator\nfrom vatis.live_asr.utils.observer import FormattedLiveStreamObserver\n\nif __name__ == '__main__':\n    stream_config: StreamConfig = StreamConfig(\n        language=Language.ro_RO,\n        performance_config=SPEED_CONFIGURATION,\n        connection_config=DEFAULT_CONNECTION_CONFIG,\n        sample_rate=SampleRate.RATE_16000,\n        channels=Channel.ONE,\n    )\n\n    with create_stream(stream_config, stream_type='BLOCKING') as stream:\n        stream.add_observer(FormattedLiveStreamObserver())\n\n        data_generator: Generator = microphone_generator(stream_config)\n\n        stream.transcribe(data_generator)\n\n        stream.wait_for_transcription()         \n\n```\n\n##### Stream from the microphone a specified amount of time using generators\n```python\nimport sys\nfrom typing import Generator\n\nfrom vatis.asr_commons.live.headers import FINAL_FRAME_HEADER, FRAME_START_TIME_HEADER, FRAME_END_TIME_HEADER\n\nfrom vatis.live_asr.config.stream import StreamConfig, Language, SPEED_CONFIGURATION, SampleRate, Channel, \\\n    DEFAULT_CONNECTION_CONFIG\nfrom vatis.live_asr.stream.factory import create_stream\nfrom vatis.live_asr.utils.generator import microphone_generator\n\nif __name__ == '__main__':\n    stream_config: StreamConfig = StreamConfig(\n        language=Language.ro_RO,\n        performance_config=SPEED_CONFIGURATION,\n        connection_config=DEFAULT_CONNECTION_CONFIG,\n        sample_rate=SampleRate.RATE_16000,\n        channels=Channel.ONE,\n    )\n\n    out = sys.stdout\n    time_limit: float = 0.5 * 60\n\n    def stop_condition(frame_count: int, starting_time: dict) -> bool:\n        transcribed_time = stream_config.performance_config.frame_len * frame_count\n\n        return transcribed_time >= time_limit\n\n    with create_stream(stream_config, stream_type='BLOCKING') as stream:\n        data_generator: Generator = microphone_generator(stream_config, stop_condition=stop_condition)\n\n        stream.transcribe(data_generator)\n\n        for packet in stream.create_generator():\n            if packet.get_header(FINAL_FRAME_HEADER, default=False):\n                out.write('FINAL  : {0:.2f} -> {1:.2f}: {2}\\n'.format(\n                    packet.get_header(FRAME_START_TIME_HEADER),\n                    packet.get_header(FRAME_END_TIME_HEADER),\n                    packet.transcript\n                ))\n                out.flush()\n            else:\n                out.write('PARTIAL: {0:.2f} -> {1:.2f}: {2}\\r'.format(\n                    packet.get_header(FRAME_START_TIME_HEADER),\n                    packet.get_header(FRAME_END_TIME_HEADER),\n                    packet.transcript\n                ))\n                out.flush()\n\n```\n\n##### Infinite stream from the microphone using stream observers and saving the output to a file\n```pythonstub\nfrom typing import Generator\n\nfrom vatis.live_asr.config.stream import StreamConfig, Language, SPEED_CONFIGURATION, SampleRate, Channel, \\\n    DEFAULT_CONNECTION_CONFIG\nfrom vatis.live_asr.stream.factory import create_stream\nfrom vatis.live_asr.utils.generator import microphone_generator\nfrom vatis.live_asr.utils.observer import FormattedLiveStreamObserver\n\nif __name__ == '__main__':\n    stream_config: StreamConfig = StreamConfig(\n        language=Language.ro_RO,\n        performance_config=SPEED_CONFIGURATION,\n        connection_config=DEFAULT_CONNECTION_CONFIG,\n        sample_rate=SampleRate.RATE_16000,\n        channels=Channel.ONE\n    )\n\n    output_transcription_file: str = 'path/to/your/output_transcription.txt'\n\n    with create_stream(stream_config, stream_type='BLOCKING') as stream:\n        with open(output_transcription_file, 'w') as out:\n            stream.add_observer(FormattedLiveStreamObserver())  # writes the transcript to stdout\n            stream.add_observer(FormattedLiveStreamObserver(out, only_finals=True))  # writes the transcript to the output file\n\n            data_generator: Generator = microphone_generator(stream_config)\n\n            stream.transcribe(data_generator)\n\n            stream.wait_for_transcription()\n\n```\n\n\n## Custom models\n\n* Use a pre-defined model for a specific language\n```pythonstub\nfrom vatis.live_asr.config.stream import StreamConfig, Language, SPEED_CONFIGURATION, SampleRate, Channel, \\\n     DEFAULT_CONNECTION_CONFIG\nfrom vatis.asr_commons.custom_models import ro_RO\n\nstream_config: StreamConfig = StreamConfig(\n        language=Language.ro_RO,\n        performance_config=SPEED_CONFIGURATION,\n        connection_config=DEFAULT_CONNECTION_CONFIG,\n        sample_rate=SampleRate.RATE_16000,\n        channels=Channel.ONE,\n        model=ro_RO.MEDIA\n)\n```\n\n* Use your own custom model. [Contact us](https://vatis.tech/contact) for details about how to build your own custom model.\n```pythonstub\nfrom vatis.live_asr.config.stream import StreamConfig, Language, SPEED_CONFIGURATION, SampleRate, Channel, \\\n     DEFAULT_CONNECTION_CONFIG\n\nstream_config: StreamConfig = StreamConfig(\n        language=Language.ro_RO,\n        performance_config=SPEED_CONFIGURATION,\n        connection_config=DEFAULT_CONNECTION_CONFIG,\n        sample_rate=SampleRate.RATE_16000,\n        channels=Channel.ONE,\n        model='00000000-0000-0000-0000-000000000000'\n)\n```\n\n## Environment variables\n\n| Variable | Type  | Default value | Description |\n| -------- | ----- | ------------- | ----------- |\n|VATIS_ASR_CLIENT_DEBUG | bool | False | Debug flag for more logging|\n|VATIS_ASR_CLIENT_RECONNECTION_ATTEMPTS | int | 6 | Maximum connection attempts to the ASR service|\n|VATIS_ASR_CLIENT_REQUEST_TIMEOUT_SECONDS | float | 15 | Timeout of an attempt to make a request to the server|\n|VATIS_ASR_CLIENT_RECONNECTION_DELAY_SECONDS | float | 5 | Delay between two reconnection attempts|\n|VATIS_ASR_CLIENT_CONNECTION_TIMEOUT_SECONDS | float | 10 | Timeout of a connection attempt|\n|VATIS_ASR_CLIENT_SERVICE_HOST | string | a5111be014375425f9cfe48e23715c8c-6ed9fe3966df7ef3.elb.eu-central-1.amazonaws.com | ASR service host name|\n|VATIS_ASR_CLIENT_SERVICE_PORT | int | 80 | ASR service port number|\n|VATIS_ASR_CLIENT_AUTHENTICATION_PROVIDER_URL | string | https://vatis.tech/api/v1/asr-client/auth | Authentication end-point|\n|VATIS_ASR_CLIENT_API_KEY | string | <mandatory> | Private API key for ASR service access|\n|VATIS_ASR_CLIENT_LOGS_FILE | string | logs/app.logs | Path for storing log files|\n|VATIS_ASR_CLIENT_ENABLE_LOGS_FILE | bool | False | Flag for enabling logs storing inside files|\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://gitlab.com/vatistech/asr-client-python/-/archive/1.2.0/asr-client-python-1.2.0.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/vatistech/asr-client-python",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "VATIS TECH",
    "maintainer_email": "founders@vatis.tech",
    "name": "vatis-asr-client",
    "package_url": "https://pypi.org/project/vatis-asr-client/",
    "platform": "Posix; MacOS X; Windows",
    "project_url": "https://pypi.org/project/vatis-asr-client/",
    "project_urls": {
      "Download": "https://gitlab.com/vatistech/asr-client-python/-/archive/1.2.0/asr-client-python-1.2.0.zip",
      "Homepage": "https://gitlab.com/vatistech/asr-client-python"
    },
    "release_url": "https://pypi.org/project/vatis-asr-client/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python implementation of the client for Vatis's ASR services",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12186110,
  "releases": {
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "324abe0aa7ca4d5da5535d36bd7ac88d75e7c018ff5b58370c03b2b2aa5c4eee",
          "md5": "070fb8b4389388282165287fd8e3cd88",
          "sha256": "4fca11ccba0205d960a00d5fbf513bc12ade304927277f0fb946531cc76e06a6"
        },
        "downloads": -1,
        "filename": "vatis_asr_client-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "070fb8b4389388282165287fd8e3cd88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14983,
        "upload_time": "2021-09-21T10:48:04",
        "upload_time_iso_8601": "2021-09-21T10:48:04.153878Z",
        "url": "https://files.pythonhosted.org/packages/32/4a/be0aa7ca4d5da5535d36bd7ac88d75e7c018ff5b58370c03b2b2aa5c4eee/vatis_asr_client-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd6120c6edaf1f3c1d80fd4be10339b8f17143cf3b42c5268f85a10231229247",
          "md5": "06fd5a91e3b7ee1dd9dfff68a70f98d0",
          "sha256": "8b5ee777b9272a43429d29762dc4ad6ebc2a9489ff71a9e4ea2c4e69c5769197"
        },
        "downloads": -1,
        "filename": "vatis_asr_client-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "06fd5a91e3b7ee1dd9dfff68a70f98d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15049,
        "upload_time": "2021-10-07T20:46:46",
        "upload_time_iso_8601": "2021-10-07T20:46:46.020908Z",
        "url": "https://files.pythonhosted.org/packages/bd/61/20c6edaf1f3c1d80fd4be10339b8f17143cf3b42c5268f85a10231229247/vatis_asr_client-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ac80e10f19231941166fa46bbd57a9762be81cdd724f517f01a358404f7b486",
          "md5": "0546da294fcf8df213dc59078ff380e3",
          "sha256": "ce9b42f8da44bc6ba387f924440d79e63e3653e8ba93bf9021c8c016cf37c7e2"
        },
        "downloads": -1,
        "filename": "vatis_asr_client-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0546da294fcf8df213dc59078ff380e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16476,
        "upload_time": "2021-12-02T07:52:11",
        "upload_time_iso_8601": "2021-12-02T07:52:11.753379Z",
        "url": "https://files.pythonhosted.org/packages/0a/c8/0e10f19231941166fa46bbd57a9762be81cdd724f517f01a358404f7b486/vatis_asr_client-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ac80e10f19231941166fa46bbd57a9762be81cdd724f517f01a358404f7b486",
        "md5": "0546da294fcf8df213dc59078ff380e3",
        "sha256": "ce9b42f8da44bc6ba387f924440d79e63e3653e8ba93bf9021c8c016cf37c7e2"
      },
      "downloads": -1,
      "filename": "vatis_asr_client-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0546da294fcf8df213dc59078ff380e3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16476,
      "upload_time": "2021-12-02T07:52:11",
      "upload_time_iso_8601": "2021-12-02T07:52:11.753379Z",
      "url": "https://files.pythonhosted.org/packages/0a/c8/0e10f19231941166fa46bbd57a9762be81cdd724f517f01a358404f7b486/vatis_asr_client-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}