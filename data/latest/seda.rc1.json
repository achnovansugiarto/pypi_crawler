{
  "info": {
    "author": null,
    "author_email": "Dani <dani@domake.io>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# SEDA\n\n<p align=\"center\">\n    <em>A Python toolkit to build <b>S</b>erverless <b>E</b>vent-<b>D</b>riven <b>A</b>pplications on AWS.</em>\n    <br><em>Documentation: <a href=\"https://seda.domake.io\"><del>https://seda.domake.io</del></a> (pending)</em>\n    <br><em><b>Examples: <a href=\"https://github.com/mongkok/seda/tree/main/templates\">/templates</a></b></em>\n</p>\n<p align=\"center\">\n    <a href=\"https://github.com/mongkok/seda/actions\">\n        <img src=\"https://github.com/mongkok/seda/actions/workflows/test-suite.yml/badge.svg\" alt=\"Test\">\n    </a>\n    <a href=\"https://codecov.io/gh/mongkok/seda\">\n        <img src=\"https://img.shields.io/codecov/c/github/mongkok/seda?color=%2334D058\" alt=\"Coverage\">\n    </a>\n    <a href=\"https://www.codacy.com/gh/mongkok/seda/dashboard\">\n        <img src=\"https://app.codacy.com/project/badge/Grade/x\" alt=\"Codacy\">\n    </a>\n    <a href=\"https://pypi.org/project/seda\">\n        <img src=\"https://img.shields.io/pypi/v/seda\" alt=\"Package version\">\n    </a>\n</p>\n\n## What\n\n- [x] Allows to schedule **periodic** and **one-time** tasks on **EventBridge Scheduler**.\n- [x] Simplifies creating, executing, and managing asynchronous task using SNS messages and Lambda events.\n- [x] Includes `@decorators` in addition to `@app.decorators` for reusable apps.\n- [x] Works well with any framework, interface,  toolkit... see [/templates](https://github.com/mongkok/seda/tree/main/templates).\n- [x] Provides Serverless framework support via [plugin](https://github.com/mongkok/serverless-seda).\n- [ ] Other event sources, e.g. CloudWatch, Kinesis, Dynamodb, SQS, S3...\n- [ ] Easy to read documentation and tests.\n- [ ] SAM templates and CDK support.\n\n## Installation\n\n```sh\npip install seda\n```\n\n## Example\n\n**main.py**:\n\n```py\nfrom datetime import datetime\n\nfrom seda import Seda\n\nseda = Seda()\n\n\n@seda.schedule(\"cron(* * * * ? *)\", args=(\"minutes\",))\nasync def myschedule(timespec: str = \"auto\") -> None:\n    seda.log.info(f\"myschedule: {datetime.now().isoformat(timespec=timespec)}\")\n\n\n@seda.task\nasync def mytask(timespec: str = \"auto\") -> None:\n    seda.log.info(f\"mytask: {datetime.now().isoformat(timespec=timespec)}\")\n```\n**`main.seda`** is an AWS Lambda handler in charge of managing the creation and execution of our tasks.\n\n- **`@schedule`:** creates a new periodic \"schedule\" on EventBridge at deployment time.\n- **`@task`:** creates one-time asynchronous tasks at runtime:\n    - SNS messages: default\n    - Lambda events:  `@task(service=\"lambda\")`\n    - EventBridge one-time schedules: `mytask.at(\"...\")`\n\nFor reusable apps use `@task` and `@schedule` decorators that always points to the currently active `Seda` instance:\n\n**tasks.py**:\n\n```py\nfrom datetime import datetime\n\nfrom seda import task\n\n\n@task\nasync def mytask(timespec: str = \"auto\") -> str:\n    return datetime.now().isoformat(timespec=timespec)\n```\n\n## Tasks\n\n```py\nawait mytask()\n```\n\n- **SNS**: This task is executed asynchronously by sending a message to a previously subscribed SNS topic.\n- **Î»**: A second option is to directly invoke the Lambda function `InvocationType=Event` by adding the *\"service\"* option to the task decorator `@task(service=\"lambda\")`.\n- **test**: For local and test environments the task is executed synchronously by default.\n\n## One-time schedules\n \n```py\nfrom datetime import datetime, timedelta\n\nmytask.at(datetime.now() + timedelta(minutes=5))\n```\n\nThe **`.at(datetime)`** method is equivalent to **`@schedule(\"at(datetime)\")`**.\n\nThese one-time schedules are created under a second EventBridge Schedule Group (group 1 -  N schedules) so after a new deployment we can clean the group of periodic schedules but keeping our one-time schedules.\n\n## `@schedule`\n\n| SEDA / AWS | TYPE | EXAMPLE |\n| ---------- | ---- | ------- |\n| expression<br />[ScheduleExpression](https://docs.aws.amazon.com/scheduler/latest/APIReference/API_CreateSchedule.html#scheduler-CreateSchedule-request-ScheduleExpression) | `str` | - `\"rate(5 minutes)\"`<br />- `\"cron(*/5 * * * ? *)\"`<br />- `\"at(2025-10-26T12:00:00)\"` |\n| args<br />- | `Optional[Sequence]` | `(\"a\", \"b\")` |\n| kwargs<br />- | `Optional[Dict]` | `{\"a\": \"b\"}` |\n| timezone<br />[ScheduleExpressionTimezone](https://docs.aws.amazon.com/scheduler/latest/APIReference/API_CreateSchedule.html#scheduler-CreateSchedule-request-ScheduleExpressionTimezone) | `Optional[str]` | `\"Asia/Saigon\"` |\n| time_window<br />[FlexibleTimeWindow](https://docs.aws.amazon.com/scheduler/latest/APIReference/API_CreateSchedule.html#scheduler-CreateSchedule-request-FlexibleTimeWindow) |`Optional[ScheduleTimeWindow]` | `{\"Mode\": \"FLEXIBLE\", \"MaximumWindowInMinutes\": 15}` |\n| retry_policy<br />[RetryPolicy](https://docs.aws.amazon.com/scheduler/latest/APIReference/API_Target.html#scheduler-Type-Target-RetryPolicy) | `Optional[ScheduleRetryPolicy]` | `{\"MaximumEventAgeInSeconds\": 60, \"MaximumRetryAttempts\": 10}` |\n| start_date<br />[StartDate](https://docs.aws.amazon.com/scheduler/latest/APIReference/API_CreateSchedule.html#scheduler-CreateSchedule-request-StartDate) | `Optional[datetime]` | `datetime.now() + timedelta(minutes=5)` |\n| end_date<br />[EndDate](https://docs.aws.amazon.com/scheduler/latest/APIReference/API_CreateSchedule.html#scheduler-CreateSchedule-request-EndDate) | `Optional[datetime]` | `datetime.now() + timedelta(days=5)` |\n| dead_letter_arn<br />[DeadLetterConfig.Arn](https://docs.aws.amazon.com/scheduler/latest/APIReference/API_Target.html#scheduler-Type-Target-DeadLetterConfig) | `Optional[str]` | `\"arn:aws:sqs:...\"` |\n| kms_key<br />[KmsKeyArn](https://docs.aws.amazon.com/scheduler/latest/APIReference/API_CreateSchedule.html#scheduler-CreateSchedule-request-KmsKeyArn) | `Optional[str]` | `\"arn:aws:kms:...\"` |\n\n## CLI\n\nSEDA CLI provides a list of commands to deploy, remove and debug SEDA resources on an **existing** Lambda function:\n\n```sh\nseda deploy --app main.seda -f myfunction\n```\n\n**Deploy `@schedule`, `@task`:**\n\n- Creates the Schedule Groups for periodic and one-time tasks\n- Creates N periodic schedules\n- Creates SNS topic and a Lambda subscription to this topic\n- Adds related IAM roles and policies\n\nA second deployment removes the periodic task Schedule Group and creates a new one adding the new schedules.\n\nWe can also remove the deployed stack:\n\n```sh\nseda remove --app main.seda -f myfunction\n```\n\n**Remote Function Invocation**\n\nInvoke Python interpreter:\n\n```sh\nseda python 'import sys;print(sys.version)' -f myfunction\n```\n\nRun shell commands:\n\n```sh\nseda shell env -f myfunction\n```\n\n## Serverless Framework\n\nThe plugin [serverless-seda](https://github.com/mongkok/serverless-seda) adds all SEDA CLI commands to Serverless framework CLI:\n\n```sh\nsls seda deploy\n```\n\n## ASGI\n\nSEDA seamlessly integrates with ASGI applications by adding [Mangum](https://github.com/jordaneremieff/mangum) handler to `seda[asgi]`.\n\n```sh\npip install seda[asgi]\n```\n\n**main.py**:\n\n```py\nfrom fastapi import FastAPI\nfrom seda import Seda\n\n\napp = FastAPI()\nseda = Seda(app)\n```\n\n## Default handler\n\nAdd any callable as a handler to process any non-SEDA events:\n\n```py\ndef myhandler(event, context):\n    pass\n\n\nseda = Seda(default_handler=myhandler)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "aws,event-driven,scheduler,serverless",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "seda",
    "package_url": "https://pypi.org/project/seda/",
    "platform": null,
    "project_url": "https://pypi.org/project/seda/",
    "project_urls": {
      "changelog": "https://seda.domake.io/changelog/",
      "documentation": "https://seda.domake.io",
      "homepage": "https://github.com/mongkok/seda",
      "repository": "https://github.com/mongkok/seda"
    },
    "release_url": "https://pypi.org/project/seda/0.0.6/",
    "requires_dist": [
      "anyio>=3.4.0",
      "botocore>=1.29.7",
      "click>=7.0",
      "typing-extensions; python_version < '3.11'",
      "mangum; extra == 'asgi'",
      "markdown-include; extra == 'doc'",
      "mkdocs; extra == 'doc'",
      "mkdocs-material; extra == 'doc'",
      "mkdocstrings[python]; extra == 'doc'",
      "black; extra == 'test'",
      "codecov; extra == 'test'",
      "flake8; extra == 'test'",
      "isort; extra == 'test'",
      "mypy; extra == 'test'",
      "pytest; extra == 'test'",
      "pytest-cov; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "A Python toolkit to build Serverless Event-Driven Applications on AWS.",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16383820,
  "releases": {
    "0.0.6": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "50dae45b09cc912defdded713b097d31c131a249024781d37c13d15324fbdc21",
          "md5": "9b24177c8b1a57509390294ff560718f",
          "sha256": "6b3799f151dd2dc5e7419fca6491160bbd6db04779cc3a7df704a597b99b00c3"
        },
        "downloads": -1,
        "filename": "seda-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b24177c8b1a57509390294ff560718f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23208,
        "upload_time": "2023-01-11T01:49:22",
        "upload_time_iso_8601": "2023-01-11T01:49:22.949320Z",
        "url": "https://files.pythonhosted.org/packages/50/da/e45b09cc912defdded713b097d31c131a249024781d37c13d15324fbdc21/seda-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d989fb9453942300b91dd167999a86d2b808205c32e015805c04c0a5c062a8a7",
          "md5": "c72bf7bb3f53194fd2faafb0fcd85d3a",
          "sha256": "5046d4145491f8f677b6368864beb914e28cd1bb18ce9dfe3f70a1c2d32509d0"
        },
        "downloads": -1,
        "filename": "seda-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c72bf7bb3f53194fd2faafb0fcd85d3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17352,
        "upload_time": "2023-01-11T01:49:19",
        "upload_time_iso_8601": "2023-01-11T01:49:19.227305Z",
        "url": "https://files.pythonhosted.org/packages/d9/89/fb9453942300b91dd167999a86d2b808205c32e015805c04c0a5c062a8a7/seda-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "50dae45b09cc912defdded713b097d31c131a249024781d37c13d15324fbdc21",
        "md5": "9b24177c8b1a57509390294ff560718f",
        "sha256": "6b3799f151dd2dc5e7419fca6491160bbd6db04779cc3a7df704a597b99b00c3"
      },
      "downloads": -1,
      "filename": "seda-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b24177c8b1a57509390294ff560718f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 23208,
      "upload_time": "2023-01-11T01:49:22",
      "upload_time_iso_8601": "2023-01-11T01:49:22.949320Z",
      "url": "https://files.pythonhosted.org/packages/50/da/e45b09cc912defdded713b097d31c131a249024781d37c13d15324fbdc21/seda-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "d989fb9453942300b91dd167999a86d2b808205c32e015805c04c0a5c062a8a7",
        "md5": "c72bf7bb3f53194fd2faafb0fcd85d3a",
        "sha256": "5046d4145491f8f677b6368864beb914e28cd1bb18ce9dfe3f70a1c2d32509d0"
      },
      "downloads": -1,
      "filename": "seda-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "c72bf7bb3f53194fd2faafb0fcd85d3a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17352,
      "upload_time": "2023-01-11T01:49:19",
      "upload_time_iso_8601": "2023-01-11T01:49:19.227305Z",
      "url": "https://files.pythonhosted.org/packages/d9/89/fb9453942300b91dd167999a86d2b808205c32e015805c04c0a5c062a8a7/seda-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}