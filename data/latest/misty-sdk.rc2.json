{
  "info": {
    "author": "Misty Robotics",
    "author_email": "engineering.admin@mistyrobotics.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Python SDK\n\nPython library to work with your Misty robot. Currently in BETA. It is designed to follow the same naming conventions that will show up in the [API Explorer](http://sdk.mistyrobotics.com/api-explorer/index.html).\nThere is a method generator built in to update the built in methods and available events, this works on all current Misty II product versions.\n\n## Requirements\n\npython >= 3.8\n\nrequests>=2.25.1<br>\nwebsocket-client<=0.57.0<br>\nyapf>=0.30.0\n___\n## Updating available commands and events\nAfter installing the requirements, the first thing that should be done is updating the methods and events using the builtin generator.\n```\n# First import the RobotGenerator\nfrom mistyPy.GenerateRobot import RobotGenerator\n\n# Creating a new robot generator will rewrite the RobotCommands.py and Websocket.py \n# files to adjust them to the commands and websockets the robot has available\nRobotGenerator(\"<IP_ADDRESS>\")\n```\n___\n## Running commands\nTo send commands to the robot first we need to initialize the connection to the robot.\n```\n# First import the robot object\nfrom mistyPy.Robot import Robot\n\nif __name__ == \"__main__\":\n    ip_address = \"<IP_ADDRESS>\"\n    # Create an instance of a robot\n    misty = Robot(ip_address)\n```\n\nSending the commands uses the REST API for Misty, so every return from a command will be a response object.\n```\n    current_response = misty.MoveArms(30, 20)\n    print(current_response)\n    print(current_response.status_code)\n    print(current_response.json())\n\n    current_response = misty.GetLogLevel()\n    print(current_response)\n    print(current_response.status_code)\n    print(current_response.json())\n    print(current_response.json()[\"result\"])\n```\nOutput:\n```\n<Response [200]>\n200\n{'result': True, 'status': 'Success'}\n<Response [200]>\n200\n{'result': {'local': 'Debug', 'remote': 'Debug'}, 'status': 'Success'}\n{'local': 'Debug', 'remote': 'Debug'}\n```\n___\n## Events\nSubscribing to events is done through the Robot object. The list of available events are found in the Events class.\n```\nfrom mistyPy.Robot import Robot\nfrom mistyPy.Events import Events\n```\n\nThere are then two ways of interacting with the events. The first is to use a callback function for every new message returned after the successful subscribtion, the second is to reference the event object itself.\nBy default all event registrations are set to trigger once then unregister. To set an event registration to constantly trigger use the `keep_alive` parameter and set it to `True`.\n\nExample: \n\n`misty.RegisterEvent(\"AudioCallbackEvent\", Events.VoiceRecord, callback_function=capture_speech_callback, keep_alive=True)`\n\n### Using a callback function\n```\n# The callback function must only accept one parameter, which will be the event message data\ndef capture_speech_callback(data):\n    print(data[\"message\"])\n\nif __name__ == \"__main__\":\n    try:\n        # First create the robot object\n        ip_address = \"<IP_ADDRESS>\"\n        misty = Robot(ip_address)\n\n        # Register the event, which has a minimum of 2 parameters: the user defined name of the event, and the event type\n        misty.RegisterEvent(\"AudioCallbackEvent\", Events.VoiceRecord, callback_function=capture_speech_callback)\n\n        # Start recording speech to get an event message\n        misty.CaptureSpeechAzure(overwriteExisting=True, requireKeyPhrase=False, captureFile=True, speechRecognitionLanguage=\"en-us\", azureSpeechRegion=\"eastus\", azureSpeechKey=my_speech_key)\n\n        # Use the KeepAlive function to keep running the main python thread until all events are closed, or the script is killed due to an exception\n        misty.KeepAlive()\n\n    except Exception as ex:\n        print(ex)\n    finally:\n        # Unregister events if they aren't all unregistered due to an error\n        misty.UnregisterAllEvents()\n```\nOutput:\n```\n{'errorCode': 0, 'errorMessage': 'Detected end of voice command.', 'filename': 'capture_Dialogue.wav', 'speechRecognitionResult': 'How are you doing?', 'success': True}\nEvent connection has closed for event: AudioCallbackEvent\n```\n\n### Using the Event object\n```\nif __name__ == \"__main__\":\n    try:\n        ip_address = \"<IP_ADDRESS>\"\n        misty = Robot(ip_address)\n\n        # Not including the callback_function parameter\n        audio_callback_event = misty.RegisterEvent(\"AudioCallbackEvent\", Events.VoiceRecord)\n\n        misty.CaptureSpeechAzure(overwriteExisting=True, requireKeyPhrase=False, captureFile=True, speechRecognitionLanguage=\"en-us\", azureSpeechRegion=\"eastus\", azureSpeechKey=my_speech_key)\n\n        # Wait for the event to get some data before printing the message\n        while \"just waiting for data\" in str(audio_callback_event.data):\n            pass\n\n        print(audio_callback_event.data[\"message\"])\n    except Exception as ex:\n        print(ex)\n    finally:\n        misty.UnregisterAllEvents()\n\n```\nOutput:\n```\n{'errorCode': 0, 'errorMessage': 'Detected end of voice command.', 'filename': 'capture_Dialogue.wav', 'speechRecognitionResult': 'What are you doing?', 'success': True}\n```\n\n## Adding event filters\nThere are built in methods for adding filters to the events. By default there are a handful of built in event specific filters. A sample are shown here:\n```\nfrom mistyPy.EventFilters import EventFilters\n\nmisty.RegisterEvent(\"right_arm\", Events.ActuatorPosition, condition=[EventFilters.ActuatorPosition.ArmRight])\n```\n\nThe condition parameter takes a list of filters to apply, so the event conditions can be combined:\n```\nfront_right = misty_robot.RegisterEvent(\"frontright\", Events.TimeOfFlight,\n                                        condition=[EventFilters.TimeOfFlightPosition.FrontRight, \n                                                   EventFilters.TimeOfFlightDistance.MaxDistance(0.150),\n                                                   EventFilters.TimeOfFlightStatus.MaxStatus(102)])\n```\nThere is also a method to build up your own filters that are not built in yet. The following example shows creating an event filter such that the returned voice record event must have an error code of 0 for the event to be triggered\n```\nmisty.RegisterEvent(\"found_speech_result\", Events.VoiceRecord, condition=[EventFilters.event_filter(\"errorCode\", \"=\", 0)])\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.mistyrobotics.com/",
    "keywords": "",
    "license": "apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Misty-SDK",
    "package_url": "https://pypi.org/project/Misty-SDK/",
    "platform": "",
    "project_url": "https://pypi.org/project/Misty-SDK/",
    "project_urls": {
      "Documentation": "https://docs.mistyrobotics.com/",
      "Homepage": "https://www.mistyrobotics.com/",
      "Source": "https://github.com/MistyCommunity/Python-SDK"
    },
    "release_url": "https://pypi.org/project/Misty-SDK/0.1.1/",
    "requires_dist": [
      "requests (>=2.25.1)",
      "websocket-client (<=0.57.0)",
      "yapf (>=0.30.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Python SDK for Misty 2 Robots",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10538541,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6828af3ee7f35ba3becc77985dc882de8e3ee6130500b4c85d6b534c52f985aa",
          "md5": "7e01a0aa0c600fe0c87c5e7a2d693456",
          "sha256": "c716ff8536d13e28d39ef2d1a48ed0e34d097dad8ae8ab196ac9abb30b08ea82"
        },
        "downloads": -1,
        "filename": "Misty_SDK-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e01a0aa0c600fe0c87c5e7a2d693456",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21798,
        "upload_time": "2021-06-01T16:10:32",
        "upload_time_iso_8601": "2021-06-01T16:10:32.658592Z",
        "url": "https://files.pythonhosted.org/packages/68/28/af3ee7f35ba3becc77985dc882de8e3ee6130500b4c85d6b534c52f985aa/Misty_SDK-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df58bccf7b1f2b528538875e80f2f62a16de810af5474924695c24a7f39d8171",
          "md5": "193995a45f200a1dbc4e0e87bc0703ea",
          "sha256": "a757615a30bac76e04d0bd3dd7c423a775491551e0e0f12033c4dd0aa8c0d161"
        },
        "downloads": -1,
        "filename": "Misty_SDK-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "193995a45f200a1dbc4e0e87bc0703ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23944,
        "upload_time": "2021-06-01T16:22:37",
        "upload_time_iso_8601": "2021-06-01T16:22:37.937121Z",
        "url": "https://files.pythonhosted.org/packages/df/58/bccf7b1f2b528538875e80f2f62a16de810af5474924695c24a7f39d8171/Misty_SDK-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df58bccf7b1f2b528538875e80f2f62a16de810af5474924695c24a7f39d8171",
        "md5": "193995a45f200a1dbc4e0e87bc0703ea",
        "sha256": "a757615a30bac76e04d0bd3dd7c423a775491551e0e0f12033c4dd0aa8c0d161"
      },
      "downloads": -1,
      "filename": "Misty_SDK-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "193995a45f200a1dbc4e0e87bc0703ea",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 23944,
      "upload_time": "2021-06-01T16:22:37",
      "upload_time_iso_8601": "2021-06-01T16:22:37.937121Z",
      "url": "https://files.pythonhosted.org/packages/df/58/bccf7b1f2b528538875e80f2f62a16de810af5474924695c24a7f39d8171/Misty_SDK-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}