{
  "info": {
    "author": "Aaron Ciuffo",
    "author_email": "aaron.ciuffo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# QueryLMS Python Library\nQueryLMS manages queries to a Logitech Media Server and associates with a single player. A QueryLMS object can be used to query server or player status information and control an LMS player.\n\nQueryLMS is a rewrite of [LMSQuery](https://github.com/roberteinhaus/lmsquery) and reuses a significant portion of the LMSQuery code.\n\nUsage:\n```\n    import QueryLMS\n    # create the object and try to discover LMS on the local network\n    # try to associate with \"My Player\"\n    my_player = QueryLMS(player_name='My Player')\n    # get now playing tracks\n    my_player.get_now_playing()\n    >>> {'time': 0,\n         'mode': 'stop',\n         'id': 17001,\n         'title': 'We Belong Together',\n         'artist': 'Vampire Weekend feat. Danielle Haim',\n         'coverid': 'c9d646ff',\n         'duration': 190.733,\n         'album_id': '2064',\n         'genre': 'No Genre',\n         'album': 'Father of the Bride',\n         'artwork_url': 'http://192.168.178.9:9000/music/c9d646ff/cover.jpg'}\n\n  # create the object with a defined hostname and port\n  # try to associate with player \"Living Room\"\n  living_room = QueryLMS(host=\"media-server.local\", port=9001, player_name=\"Living Room\")\n\n```\n\n## Changes\n\n**V 0.2**\n\n* add additional keys to `get_now_playing` method\n* return now-playing information for streams \n\nNotes:\n\n* Album artwork is not properly returned for streams\n* Album information may not be returned at all for streams\n\n## API\n\nAll player related calls will raise ValueError if player_id is not set.\n\n```\nclass QueryLMS(builtins.object)\n  QueryLMS(host=None, port=None, player_name=None, player_id=None, scan_timeout=1, handle_requests_exceptions=False, request_timeout=5)\n\n  Class to handle queries for an LMS player\n\n  Each Query LMS object is associated with a single player_id\n\n  If no host and port number are specified, the QueryLMS object will attempt to locate\n  an active LMS Server on the network. If a player_name is specified, the Query\n  object will attempt to find the player_id associated with that name.\n\n  All queries are run against the first located (or specified) \n  server or a single player.\n\n  By default any http requests exceptions encoutered when communicating\n  with the server are raised and should be handled by your program. \n  Suppress and log exceptions with handle_reqests_exceptions=True\n\n  Attributes:\n      host(str): LMS Server hostname or ip address\n      port(int): LMS Server port number\n      player_name(str): Player name\n      player_id(str): unique player id in hex\n      scan_timeout(int): seconds to search local network for an LMS server\n      server_query_url(str): url to use when querying host status\n      server_base_url(str): base url of server: http://host:port/\n      handle_requests_exceptions(bool): True: quietly handle exceptions; False: raise exceptions\n      request_timeout(int): seconds to wait for server to respond\n\n\n  Additional API documentation: https://github.com/elParaguayo/LMS-CLI-Documentation/blob/master/LMS-CLI.md\n\n  Methods defined here:\n\n  __init__(self, host=None, port=None, player_name=None, player_id=None, scan_timeout=1, handle_requests_exceptions=False, request_timeout=5)\n      inits QueryLMS Class with host, port, player_id, player_name and scan_timeout\n\n      Args:\n          host(str): LMS host name or ip address \n          port(int): LMS port number\n          player_name(str): name of player to associate with\n          player_id(str): player_id in hex \n          scan_timeout(int): seconds to search for LMS host\n\n  display(self, line1, line2, duration=5)\n      display line1 and line2 on associated player\n\n      Args:\n          line1(str)\n          line1(str)\n\n  display_all(self, line1, line2, duration=5)\n      display line1 and line2 on all connected players\n\n      Args:\n          line1(str)\n          line1(str)\n\n  get_alarms(self, enabled=True)\n      ???\n\n  get_artist_album(self, artist_id)\n      query associated player for currently playing album artist\n\n      Returns:\n          (str)\n\n  get_artist_count(self)\n      query server for total number of artists\n\n      Returns:\n          (int): count of unique artist ids\n\n  get_artists(self)\n      query server for internal artist id, names\n      Returns:\n          (dict): JSON formatted list of ids and artists\n\n  get_current_album(self)\n      query associated player for currently playing track album\n\n      Returns:\n          (str)\n\n  get_current_artist(self)\n      query associated player for currently playing artist\n\n      Returns:\n          (str)\n\n  get_current_radio_title(self, radio)\n      return title of favorite radio stations\n\n  get_current_song_title(self)\n      query associated player for currently playing track title\n\n      Returns:\n          (str)\n\n  get_current_title(self)\n      query associated player for currently playing track title\n\n      Returns:\n          (str)\n\n  get_favorite_radio(self)\n      return favorited radio stations\n\n  get_next_alarm(self)\n      ???\n\n  get_now_playing(self)\n      query associated player for now playing information including:\n      * album\n      * artist\n      * artwork_url\n      * duration\n      * genre\n      * coverid\n      * id\n      * title\n\n      Returns:\n          dict\n\n  get_player_count(self)\n      query server for total number of connected players\n\n      Returns:\n          (int): count of unique players connected\n\n  get_player_pref(self, pref)\n      ???\n\n  get_players(self)\n      query server for connected player information\n\n      Returns:\n          (dict): JSON formatted list of player information\n\n  get_radios_count(self)\n      query server for total number of saved radio stations\n\n      Returns:\n          (int): count of unique radios connected\n\n  get_server_status(self)\n      query server status in JSON\n\n      Returns:\n          (dict): JSON formatted server status\n\n  get_volume(self)\n      query associated player for volume\n\n      Returns:\n          (str)\n\n  next_song(self)\n      fast forward one track on associated player\n\n      Returns:\n          (dict): {}\n\n  pause(self)\n      pause associated player\n\n      Returns:\n          (dict): {}\n\n  play_album(self, album_id)\n      play an album on associated player\n\n      Args:\n          album_id(int): internal album id\n\n      Returns:\n          (dict): {'count': int} total tracks on album\n\n  play_radio(self, radio)\n      play radio??? on associated player\n\n  previous_song(self)\n      rewind one track on associated player\n\n      Returns:\n          (dict): {}\n\n  query(self, player_id=None, *args)\n      # Basic Query\n      #####################################\n\n  rescan(self)\n      rescan LMS library\n\n      Returns:\n          (dict): {}\n\n  search(self, searchstring, count=9999)\n      query server for searchstring (ignoring case)\n\n      Args:\n          searchstring(str): string to search for\n\n      Returns:\n          (dict): JSON formatted list of all entities containing searchstring\n\n  search_albums(self, searchstring, count=9999)\n      query server for searchstring in album names (ignoring case)\n\n      Args:\n          searchstring(str): string to search tracks for\n\n      Returns:\n          (dict): JSON formatted list of all album entities containing searchstring\n\n  search_contributors(self, searchstring, count=9999)\n      query server for searchstring in contributors names (ignoring case)\n\n      Args:\n          searchstring(str): string to search tracks for\n\n      Returns:\n          (dict): JSON formatted list of all contributors entities containing searchstring\n\n  search_players(self, searchstring, count=9999)\n      query server for searchstring in player names (ignoring case)\n\n      Args:\n          searchstring(str): string to search tracks for\n\n      Returns:\n          (dict): JSON formatted list of all player entities containing searchstring\n\n  search_tracks(self, searchstring, count=9999)\n      query server for searchstring in track names (ignoring case)\n\n      Args:\n          searchstring(str): string to search tracks for\n\n      Returns:\n          (dict): JSON formatted list of all track entities containing searchstring\n\n  set_player_pref(self, pref, value)\n      ???\n\n  set_power(self, power=1)\n      send power command to connected player\n\n  set_power_all(self, power=1)\n\n  set_server(self)\n      set the server details using \"host\" and \"port\"\n\n      If no host and port is specified, queryLMS will search for the \n      first LMS server on the local network segment.\n\n      If the server IP/name or port change it is necessary\n      to run set_server() again to trigger updates of the query urls\n\n      QueryLMS will not detect dynamic changes of player name.\n\n      Use the static method scan_lms() to find host information\n\n      Use the get_players() method to list player names/ids associated with a LMS\n\n      Sets:\n          server_query_url\n          server_base_url\n          player_id (if not already set)\n\n  set_volume(self, volume)\n      set volume on associated player\n\n      Args:\n          volume(int): 0-100\n\n      Returns:\n          (dict): {}\n\n  skip_songs(self, amount=1)\n      skip n tracks on associated player\n\n      Args:\n          amount(int): number of tracks to skip\n\n      Returns:\n          (dict): {}\n\n  ----------------------------------------------------------------------\n  Static methods defined here:\n\n  scan_lms(scan_timeout=None)\n      Search local network for Logitech Media Servers\n\n      Based on netdisco/lms.py by cxlwill - https://github.com/cxlwill\n\n      Args:\n        scan_timeout (int): timeout seconds\n\n      Returns:\n        list: Dictionary of LMS Server IP and listen ports\n\n  ----------------------------------------------------------------------\n  Readonly properties defined here:\n\n  is_playing_remote_stream\n\n  ----------------------------------------------------------------------\n  Data descriptors defined here:\n\n  __dict__\n      dictionary for instance variables (if defined)\n\n  __weakref__\n      list of weak references to the object (if defined)\n\n  host\n      LMS ip address or hostname: (str)\n\n  player_id\n      LMS player unique hexidecimal id (str)\n\n  player_name\n      human readable name of player: (str)\n\n  port\n      LMS server port: (int)\n\n ```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/txoof/querylms",
    "keywords": "graphics e-paper display waveshare",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "QueryLMS",
    "package_url": "https://pypi.org/project/QueryLMS/",
    "platform": null,
    "project_url": "https://pypi.org/project/QueryLMS/",
    "project_urls": {
      "Homepage": "https://github.com/txoof/querylms",
      "Source": "https://github.com/txoof/querylms"
    },
    "release_url": "https://pypi.org/project/QueryLMS/0.2.2.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.7",
    "summary": "QueryLMS creates an simple interface for making queries and issuing commands to Logitech Media Server and associated players",
    "version": "0.2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17273398,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0077b329b88a0db5b1cf2416e5c8005556c44054f481036e32c2c14cf4cfa8bf",
          "md5": "2bcbab9d03a6f57bedc187a99a70121f",
          "sha256": "bea58466bf6c40b035e5560e5373b284a374a886c0f94e2c71bfd2e714a0a555"
        },
        "downloads": -1,
        "filename": "QueryLMS-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bcbab9d03a6f57bedc187a99a70121f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10251,
        "upload_time": "2020-11-27T12:21:12",
        "upload_time_iso_8601": "2020-11-27T12:21:12.706170Z",
        "url": "https://files.pythonhosted.org/packages/00/77/b329b88a0db5b1cf2416e5c8005556c44054f481036e32c2c14cf4cfa8bf/QueryLMS-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c215d5cd29fb94c0a43584ef9e2d7a945c1fa2b4fc3193ee74d33b8ccb5c77d",
          "md5": "490398952fc8cabdacdc0c8c32d6bb85",
          "sha256": "d8672ba0a16cc4d3bc9a279a0ffb826d38723e76779c9e89056904cb4182d034"
        },
        "downloads": -1,
        "filename": "QueryLMS-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "490398952fc8cabdacdc0c8c32d6bb85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10740,
        "upload_time": "2020-11-27T12:21:13",
        "upload_time_iso_8601": "2020-11-27T12:21:13.873175Z",
        "url": "https://files.pythonhosted.org/packages/9c/21/5d5cd29fb94c0a43584ef9e2d7a945c1fa2b4fc3193ee74d33b8ccb5c77d/QueryLMS-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "540c2581d914cb62bf0db11b21773c269e1a69da361b93233dac1f58e123de93",
          "md5": "611c0c70e1dfc3bcbe9fe406befb6d85",
          "sha256": "a94486f39fab6cbe795781ef4cade1c37226d3662005e41e691cd9679cda3264"
        },
        "downloads": -1,
        "filename": "QueryLMS-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "611c0c70e1dfc3bcbe9fe406befb6d85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11350,
        "upload_time": "2023-03-13T15:24:34",
        "upload_time_iso_8601": "2023-03-13T15:24:34.914412Z",
        "url": "https://files.pythonhosted.org/packages/54/0c/2581d914cb62bf0db11b21773c269e1a69da361b93233dac1f58e123de93/QueryLMS-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab994381141d05c84bf4f768d92c6a98a4fcd24018f219297e0149592143d78e",
          "md5": "6079409cf3820790fc3233b47e301f83",
          "sha256": "cd87da70d7202b0d24ced5b0093a33b98f382c500f8c75146620cffd28d1f320"
        },
        "downloads": -1,
        "filename": "QueryLMS-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6079409cf3820790fc3233b47e301f83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13104,
        "upload_time": "2023-03-13T15:24:36",
        "upload_time_iso_8601": "2023-03-13T15:24:36.893328Z",
        "url": "https://files.pythonhosted.org/packages/ab/99/4381141d05c84bf4f768d92c6a98a4fcd24018f219297e0149592143d78e/QueryLMS-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28d85b910c23b2624dc2ca8f4ff5bbd1da533456e28d8988538272cb136ccccf",
          "md5": "04980093eb410a7e1cdf6ea213aed09b",
          "sha256": "90af50d8fccf3d6bed758c20fc96af774c60d8b7969cb3ba9225c58ecde97e54"
        },
        "downloads": -1,
        "filename": "QueryLMS-0.2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04980093eb410a7e1cdf6ea213aed09b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11918,
        "upload_time": "2023-03-13T16:03:59",
        "upload_time_iso_8601": "2023-03-13T16:03:59.499404Z",
        "url": "https://files.pythonhosted.org/packages/28/d8/5b910c23b2624dc2ca8f4ff5bbd1da533456e28d8988538272cb136ccccf/QueryLMS-0.2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0a62239aa622e27daf8cdbad94a9d399415fb8772b5401930f901eb890f006f",
          "md5": "c71b94225d1002f8c5a601098c0e0474",
          "sha256": "1959a64a3f86c7fd0418723643da21d47a8f8d325691e06b72e1d63884d49359"
        },
        "downloads": -1,
        "filename": "QueryLMS-0.2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c71b94225d1002f8c5a601098c0e0474",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13869,
        "upload_time": "2023-03-13T16:04:01",
        "upload_time_iso_8601": "2023-03-13T16:04:01.876328Z",
        "url": "https://files.pythonhosted.org/packages/c0/a6/2239aa622e27daf8cdbad94a9d399415fb8772b5401930f901eb890f006f/QueryLMS-0.2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28d85b910c23b2624dc2ca8f4ff5bbd1da533456e28d8988538272cb136ccccf",
        "md5": "04980093eb410a7e1cdf6ea213aed09b",
        "sha256": "90af50d8fccf3d6bed758c20fc96af774c60d8b7969cb3ba9225c58ecde97e54"
      },
      "downloads": -1,
      "filename": "QueryLMS-0.2.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "04980093eb410a7e1cdf6ea213aed09b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11918,
      "upload_time": "2023-03-13T16:03:59",
      "upload_time_iso_8601": "2023-03-13T16:03:59.499404Z",
      "url": "https://files.pythonhosted.org/packages/28/d8/5b910c23b2624dc2ca8f4ff5bbd1da533456e28d8988538272cb136ccccf/QueryLMS-0.2.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0a62239aa622e27daf8cdbad94a9d399415fb8772b5401930f901eb890f006f",
        "md5": "c71b94225d1002f8c5a601098c0e0474",
        "sha256": "1959a64a3f86c7fd0418723643da21d47a8f8d325691e06b72e1d63884d49359"
      },
      "downloads": -1,
      "filename": "QueryLMS-0.2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c71b94225d1002f8c5a601098c0e0474",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13869,
      "upload_time": "2023-03-13T16:04:01",
      "upload_time_iso_8601": "2023-03-13T16:04:01.876328Z",
      "url": "https://files.pythonhosted.org/packages/c0/a6/2239aa622e27daf8cdbad94a9d399415fb8772b5401930f901eb890f006f/QueryLMS-0.2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}