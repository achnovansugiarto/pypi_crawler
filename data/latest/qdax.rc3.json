{
  "info": {
    "author": "AIRL and InstaDeep Ltd",
    "author_email": "adaptive.intelligent.robotics@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<div align=\"center\">\n<img src=\"docs/img/qdax_logo.png\" alt=\"qdax_logo\" width=\"140\"></img>\n</div>\n\n# QDax: Accelerated Quality-Diversity\n\n[![Documentation Status](https://readthedocs.org/projects/qdax/badge/?version=latest)](https://qdax.readthedocs.io/en/latest/?badge=latest)\n![pytest](https://github.com/adaptive-intelligent-robotics/QDax/actions/workflows/ci.yaml/badge.svg?branch=main)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/adaptive-intelligent-robotics/QDax/blob/main/LICENSE)\n[![codecov](https://codecov.io/gh/adaptive-intelligent-robotics/QDax/branch/feat/add-codecov/graph/badge.svg)](https://codecov.io/gh/adaptive-intelligent-robotics/QDax)\n\n\nQDax is a tool to accelerate Quality-Diversity (QD) and neuro-evolution algorithms through hardware accelerators and massive parallelization. QD algorithms usually take days/weeks to run on large CPU clusters. With QDax, QD algorithms can now be run in minutes! ‚è© ‚è© üïõ\n\nQDax has been developed as a research framework: it is flexible and easy to extend and build on and can be used for any problem setting. Get started with simple example and run a QD algorithm in minutes here! [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/mapelites.ipynb)\n\n- QDax [paper](https://arxiv.org/abs/2202.01258)\n- QDax [documentation](https://qdax.readthedocs.io/en/latest/)\n\n\n## Installation\nQDax is available on PyPI and can be installed with:\n```bash\npip install qdax\n```\nAlternatively, the latest commit of QDax can be installed directly from source with:\n```bash\npip install git+https://github.com/adaptive-intelligent-robotics/QDax.git@main\n```\nInstalling QDax via ```pip``` installs a CPU-only version of JAX by default. To use QDax with NVidia GPUs, you must first install [CUDA, CuDNN, and JAX with GPU support](https://github.com/google/jax#installation).\n\nHowever, we also provide and recommend using either Docker, Singularity or conda environments to use the repository which by default provides GPU support. Detailed steps to do so are available in the [documentation](https://qdax.readthedocs.io/en/latest/installation/).\n\n## Basic API Usage\nFor a full and interactive example to see how QDax works, we recommend starting with the tutorial-style [Colab notebook](./examples/mapelites.ipynb). It is an example of the MAP-Elites algorithm used to evolve a population of controllers on a chosen Brax environment (Walker by default).\n\nHowever, a summary of the main API usage is provided below:\n```python\nimport jax\nimport functools\nfrom qdax.core.map_elites import MAPElites\nfrom qdax.core.containers.mapelites_repertoire import compute_euclidean_centroids\nfrom qdax.tasks.arm import arm_scoring_function\nfrom qdax.core.emitters.mutation_operators import isoline_variation\nfrom qdax.core.emitters.standard_emitters import MixingEmitter\nfrom qdax.utils.metrics import default_qd_metrics\n\nseed = 42\nnum_param_dimensions = 100  # num DoF arm\ninit_batch_size = 100\nbatch_size = 1024\nnum_iterations = 50\ngrid_shape = (100, 100)\nmin_param = 0.0\nmax_param = 1.0\nmin_bd = 0.0\nmax_bd = 1.0\n\n# Init a random key\nrandom_key = jax.random.PRNGKey(seed)\n\n# Init population of controllers\nrandom_key, subkey = jax.random.split(random_key)\ninit_variables = jax.random.uniform(\n    subkey,\n    shape=(init_batch_size, num_param_dimensions),\n    minval=min_param,\n    maxval=max_param,\n)\n\n# Define emitter\nvariation_fn = functools.partial(\n    isoline_variation,\n    iso_sigma=0.05,\n    line_sigma=0.1,\n    minval=min_param,\n    maxval=max_param,\n)\nmixing_emitter = MixingEmitter(\n    mutation_fn=lambda x, y: (x, y),\n    variation_fn=variation_fn,\n    variation_percentage=1.0,\n    batch_size=batch_size,\n)\n\n# Define a metrics function\nmetrics_fn = functools.partial(\n    default_qd_metrics,\n    qd_offset=0.0,\n)\n\n# Instantiate MAP-Elites\nmap_elites = MAPElites(\n    scoring_function=arm_scoring_function,\n    emitter=mixing_emitter,\n    metrics_function=metrics_fn,\n)\n\n# Compute the centroids\ncentroids = compute_euclidean_centroids(\n    grid_shape=grid_shape,\n    minval=min_bd,\n    maxval=max_bd,\n)\n\n# Initializes repertoire and emitter state\nrepertoire, emitter_state, random_key = map_elites.init(init_variables, centroids, random_key)\n\n# Run MAP-Elites loop\nfor i in range(num_iterations):\n    (repertoire, emitter_state, metrics, random_key,) = map_elites.update(\n        repertoire,\n        emitter_state,\n        random_key,\n    )\n\n# Get contents of repertoire\nrepertoire.genotypes, repertoire.fitnesses, repertoire.descriptors\n```\n\n\n## QDax core algorithms\nQDax currently supports the following algorithms:\n\n| Algorithm  | Example |\n| --- | --- |\n| [MAP-Elites](https://arxiv.org/abs/1504.04909) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/mapelites.ipynb) |\n| [CVT MAP-Elites](https://arxiv.org/abs/1610.05729) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/mapelites.ipynb) |\n| [Policy Gradient Assisted MAP-Elites (PGA-ME)](https://hal.archives-ouvertes.fr/hal-03135723v2/file/PGA_MAP_Elites_GECCO.pdf) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/pgame.ipynb) |\n| [QDPG](https://arxiv.org/abs/2006.08505) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/qdpg.ipynb) |\n| [CMA-ME](https://arxiv.org/pdf/1912.02400.pdf) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/cmame.ipynb) |\n| [OMG-MEGA](https://arxiv.org/abs/2106.03894) |  [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/omgmega.ipynb) |\n| [CMA-MEGA](https://arxiv.org/abs/2106.03894) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/cmamega.ipynb) |\n| [Multi-Objective MAP-Elites (MOME)](https://arxiv.org/abs/2202.03057) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/mome.ipynb) |\n| [MAP-Elites Evolution Strategies (MEES)](https://dl.acm.org/doi/pdf/10.1145/3377930.3390217) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/mees.ipynb) |\n\n\n## QDax baseline algorithms\nThe QDax library also provides implementations for some useful baseline algorithms:\n\n| Algorithm  | Example |\n| --- | --- |\n| [DIAYN](https://arxiv.org/abs/1802.06070) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/diayn.ipynb) |\n| [DADS](https://arxiv.org/abs/1907.01657) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/dads.ipynb) |\n| [SMERL](https://arxiv.org/abs/2010.14484) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/smerl.ipynb) |\n| [NSGA2](https://ieeexplore.ieee.org/document/996017) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/nsga2_spea2.ipynb) |\n| [SPEA2](https://www.semanticscholar.org/paper/SPEA2%3A-Improving-the-strength-pareto-evolutionary-Zitzler-Laumanns/b13724cb54ae4171916f3f969d304b9e9752a57f) | [![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/adaptive-intelligent-robotics/QDax/blob/main/examples/nsga2_spea2.ipynb) |\n\n## QDax Tasks\nThe QDax library also provides numerous implementations for several standard Quality-Diversity tasks.\n\nAll those implementations, and their descriptions are provided in the [tasks directory](./qdax/tasks).\n\n## Contributing\nIssues and contributions are welcome. Please refer to the [contribution guide](https://qdax.readthedocs.io/en/latest/guides/CONTRIBUTING/) in the documentation for more details.\n\n## Related Projects\n- [EvoJAX: Hardware-Accelerated Neuroevolution](https://github.com/google/evojax). EvoJAX is a scalable, general purpose, hardware-accelerated neuroevolution toolkit. [Paper](https://arxiv.org/abs/2202.05008)\n- [evosax: JAX-Based Evolution Strategies](https://github.com/RobertTLange/evosax)\n\n## Citing QDax\nIf you use QDax in your research and want to cite it in your work, please use:\n```\n@article{lim2022accelerated,\n  title={Accelerated Quality-Diversity for Robotics through Massive Parallelism},\n  author={Lim, Bryan and Allard, Maxime and Grillotti, Luca and Cully, Antoine},\n  journal={arXiv preprint arXiv:2202.01258},\n  year={2022}\n}\n```\n\n## Contributors\n\nQDax was developed and is maintained by the [Adaptive & Intelligent Robotics Lab (AIRL)](https://www.imperial.ac.uk/adaptive-intelligent-robotics/) and [InstaDeep](https://www.instadeep.com/).\n\n<div align=\"center\">\n<img align=\"center\" src=\"docs/img/AIRL_logo.png\" alt=\"AIRL_Logo\" width=\"220\"/> <img align=\"center\" src=\"docs/img/instadeep_logo.png\" alt=\"InstaDeep_Logo\" width=\"220\"/>\n</div>\n\n<div align=\"center\">\n<a href=\"https://github.com/limbryan\" title=\"Bryan Lim\"><img src=\"https://github.com/limbryan.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/maxiallard\" title=\"Maxime Allard\"><img src=\"https://github.com/maxiallard.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/Lookatator\" title=\"Luca Grilloti\"><img src=\"https://github.com/Lookatator.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/manon-but-yes\" title=\"Manon Flageat\"><img src=\"https://github.com/manon-but-yes.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/Aneoshun\" title=\"Antoine Cully\"><img src=\"https://github.com/Aneoshun.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/felixchalumeau\" title=\"Felix Chalumeau\"><img src=\"https://github.com/felixchalumeau.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/ranzenTom\" title=\"Thomas Pierrot\"><img src=\"https://github.com/ranzenTom.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/Egiob\" title=\"Raphael Boige\"><img src=\"https://github.com/Egiob.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/valentinmace\" title=\"Valentin Mace\"><img src=\"https://github.com/valentinmace.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/GRichard513\" title=\"Guillaume Richard\"><img src=\"https://github.com/GRichard513.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/flajolet\" title=\"Arthur Flajolet\"><img src=\"https://github.com/flajolet.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n<a href=\"https://github.com/remidebette\" title=\"R√©mi Debette\"><img src=\"https://github.com/remidebette.png\" height=\"auto\" width=\"50\" style=\"border-radius:50%\"></a>\n</div>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adaptive-intelligent-robotics/QDax",
    "keywords": "Quality-Diversity,NeuroEvolution,Reinforcement Learning,JAX",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qdax",
    "package_url": "https://pypi.org/project/qdax/",
    "platform": null,
    "project_url": "https://pypi.org/project/qdax/",
    "project_urls": {
      "Homepage": "https://github.com/adaptive-intelligent-robotics/QDax"
    },
    "release_url": "https://pypi.org/project/qdax/0.2.1/",
    "requires_dist": [
      "absl-py (>=1.0.0)",
      "jax (>=0.3.16)",
      "jaxlib (>=0.3.15)",
      "flax (<0.6.2,>=0.6)",
      "brax (>=0.0.15)",
      "gym (>=0.23.1)",
      "numpy (>=1.22.3)",
      "scikit-learn (>=1.0.2)",
      "scipy (>=1.8.0)"
    ],
    "requires_python": "",
    "summary": "A Python Library for Quality-Diversity and NeuroEvolution",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16021030,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1054b37ee36c08cdae1a3bc0633e74112ef8c3c0185f805c718ef706e8cfd8f3",
          "md5": "878377639a72f3aa3876872cbcb4d9e4",
          "sha256": "817303535c159616e48aea9f564dd54149224b7e6ba08eca5c273b09b6fb7ad9"
        },
        "downloads": -1,
        "filename": "qdax-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "878377639a72f3aa3876872cbcb4d9e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 106328,
        "upload_time": "2022-08-09T14:35:35",
        "upload_time_iso_8601": "2022-08-09T14:35:35.793607Z",
        "url": "https://files.pythonhosted.org/packages/10/54/b37ee36c08cdae1a3bc0633e74112ef8c3c0185f805c718ef706e8cfd8f3/qdax-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dca0056f2a098e3685d963eb1c4698aa317b1d5c82ede3b517dbeb239d4defe4",
          "md5": "4a925f40df1798f00ab84cd71610abc6",
          "sha256": "6a98ba1fd3d48c1604319e617bf0e2a832a1357dd367ae0f5c9a9de40d071aae"
        },
        "downloads": -1,
        "filename": "qdax-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4a925f40df1798f00ab84cd71610abc6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75999,
        "upload_time": "2022-08-09T14:35:37",
        "upload_time_iso_8601": "2022-08-09T14:35:37.646286Z",
        "url": "https://files.pythonhosted.org/packages/dc/a0/056f2a098e3685d963eb1c4698aa317b1d5c82ede3b517dbeb239d4defe4/qdax-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a0470ea1bc3eda4c5e1031a78f5df93e1b7f677085f0fffc9a4a0f1094c6814",
          "md5": "3b77886475b66badfd7665f0348b4ff0",
          "sha256": "3ce94cebecc50d93556c283855e0c3928cbfae7f8736d82de601fb2e087fa1b4"
        },
        "downloads": -1,
        "filename": "qdax-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b77886475b66badfd7665f0348b4ff0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 155297,
        "upload_time": "2022-12-01T14:30:41",
        "upload_time_iso_8601": "2022-12-01T14:30:41.323718Z",
        "url": "https://files.pythonhosted.org/packages/7a/04/70ea1bc3eda4c5e1031a78f5df93e1b7f677085f0fffc9a4a0f1094c6814/qdax-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0b1906748969eb25d2057c9c3311b5d565c017adbdfa07fb113bf1f27b7047b",
          "md5": "b32827517c41e00523f5ec8b4f4ae1ef",
          "sha256": "456ce6a621b0fa24dd50b6eda9058eb0f43d401c13c3c3936e6c02471e749143"
        },
        "downloads": -1,
        "filename": "qdax-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b32827517c41e00523f5ec8b4f4ae1ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 108953,
        "upload_time": "2022-12-01T14:30:43",
        "upload_time_iso_8601": "2022-12-01T14:30:43.718032Z",
        "url": "https://files.pythonhosted.org/packages/a0/b1/906748969eb25d2057c9c3311b5d565c017adbdfa07fb113bf1f27b7047b/qdax-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbd13e1031e0b2c53c12774991f4cfb8dc0c00f1e5369b5de1e9a0e5b779be98",
          "md5": "7fd0ac130a4e80ef080e0bfdc2363136",
          "sha256": "d1f7a0fd5e6b591e756594baead286a4241ef82963d813838fae01d57e13b9e9"
        },
        "downloads": -1,
        "filename": "qdax-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fd0ac130a4e80ef080e0bfdc2363136",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 155285,
        "upload_time": "2022-12-07T14:12:19",
        "upload_time_iso_8601": "2022-12-07T14:12:19.942558Z",
        "url": "https://files.pythonhosted.org/packages/bb/d1/3e1031e0b2c53c12774991f4cfb8dc0c00f1e5369b5de1e9a0e5b779be98/qdax-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c05abf25e6acb6ed23ad35a95e89273367ec23ada9e944c534687139b4e4c7c0",
          "md5": "1900112a752386f05e3bb891b9d13844",
          "sha256": "122498b32b6c0f8ef5bf9f3f85f83983eb642732d23a49d75bcdf649ea66f891"
        },
        "downloads": -1,
        "filename": "qdax-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1900112a752386f05e3bb891b9d13844",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 109005,
        "upload_time": "2022-12-07T14:12:21",
        "upload_time_iso_8601": "2022-12-07T14:12:21.781713Z",
        "url": "https://files.pythonhosted.org/packages/c0/5a/bf25e6acb6ed23ad35a95e89273367ec23ada9e944c534687139b4e4c7c0/qdax-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbd13e1031e0b2c53c12774991f4cfb8dc0c00f1e5369b5de1e9a0e5b779be98",
        "md5": "7fd0ac130a4e80ef080e0bfdc2363136",
        "sha256": "d1f7a0fd5e6b591e756594baead286a4241ef82963d813838fae01d57e13b9e9"
      },
      "downloads": -1,
      "filename": "qdax-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7fd0ac130a4e80ef080e0bfdc2363136",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 155285,
      "upload_time": "2022-12-07T14:12:19",
      "upload_time_iso_8601": "2022-12-07T14:12:19.942558Z",
      "url": "https://files.pythonhosted.org/packages/bb/d1/3e1031e0b2c53c12774991f4cfb8dc0c00f1e5369b5de1e9a0e5b779be98/qdax-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c05abf25e6acb6ed23ad35a95e89273367ec23ada9e944c534687139b4e4c7c0",
        "md5": "1900112a752386f05e3bb891b9d13844",
        "sha256": "122498b32b6c0f8ef5bf9f3f85f83983eb642732d23a49d75bcdf649ea66f891"
      },
      "downloads": -1,
      "filename": "qdax-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1900112a752386f05e3bb891b9d13844",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 109005,
      "upload_time": "2022-12-07T14:12:21",
      "upload_time_iso_8601": "2022-12-07T14:12:21.781713Z",
      "url": "https://files.pythonhosted.org/packages/c0/5a/bf25e6acb6ed23ad35a95e89273367ec23ada9e944c534687139b4e4c7c0/qdax-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}