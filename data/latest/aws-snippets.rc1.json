{
  "info": {
    "author": "Ahmad Ferdaus Abd Razak",
    "author_email": "ahmad.ferdaus.abd.razak@ni.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "================\n**aws_snippets**\n================\n\nOverview\n--------\n\nPython3 classes and functions to execute common AWS operations.\n\nUsage Example\n-------------\n\n.. code-block:: BASH\n\n   \"\"\"Read secret string from AWS Secrets Manager.\"\"\"\n   import aws_snippets\n\n   # secret_string = aws_snippets.readsecret('<secret-ID>')\n   secret_string = aws_snippets.readsecret('dkfjh765-sdfsf456-dfgd')\n   print(secret_string)\n\n   # Output: \"I'm Batman!\"\n\nGet Full Functionality List from Docstring\n------------------------------------------\n\nPython Commands:\n\n.. code-block:: BASH\n\n   import aws_snippets\n   help(aws_snippets)\n\nBASH Commands:\n\n.. code-block:: BASH\n\n   python -c 'import aws_snippets; help(aws_snippets)'\n\nOutput\n------\n\n.. code-block:: BASH\n\n   Help on package aws_snippets:\n\n   NAME\n      aws_snippets - Execute AWS operations.\n\n   PACKAGE CONTENTS\n\n\n   CLASSES\n      builtins.object\n         WriteLog\n      \n      class WriteLog(builtins.object)\n      |  WriteLog(text)\n      |  \n      |  Create JSON log object for CloudWatch.\n      |  \n      |  # Import modules.\n      |  import json\n      |  from aws_snippets import WriteLog\n      |  \n      |  # Initiate with empty dictionary.\n      |  logger = WriteLog({})\n      |  \n      |  # Collect entries to log.\n      |  logger.log('<strkey>', '<value>')\n      |  logger.log('<intkey>', <value>)\n      |  logger.log('<boolkey>', <True/False>)\n      |  \n      |  # Print out to CloudWatch as accumulated log.\n      |  print(json.dumps(logger.text))\n      |  \n      |  Methods defined here:\n      |  \n      |  __init__(self, text)\n      |      Initialize log content.\n      |  \n      |  log(self, key, value)\n      |      Update log content.\n      |  \n      |  ----------------------------------------------------------------------\n      |  Data descriptors defined here:\n      |  \n      |  __dict__\n      |      dictionary for instance variables (if defined)\n      |  \n      |  __weakref__\n      |      list of weak references to the object (if defined)\n\n   FUNCTIONS\n      b64encode(cleartext: str, encoding: str = 'latin-1') -> str\n         Encode strings using Base64.\n         \n         return str\n      \n      cfpurge(cf_dist: str, path: str, call_ref: str) -> dict\n         Create Amazon CloudFront cache invalidation.\n         \n         return dict\n      \n      cleantmp(tmppath: str) -> None\n         Clean Lambda /tmp path.\n         \n         return None\n      \n      dynamodbcreatetable(table: str, attrdictls: list, schemadictls: list, kmsid: str, tagdictls: list) -> None\n         Create a table in DynamoDB.\n         \n         return None\n      \n      dynamodbdeleteallitems(table: str) -> None\n         Delete all items from a DynamoDB table.\n         \n         return None\n      \n      dynamodbdeletetable(table: str) -> None\n         Delete a table from DynamoDB.\n         \n         return None\n      \n      dynamodbgetitem(table: str, key: str, value: str) -> dict\n         Get a single item from DynamoDB.\n         \n         return dict\n      \n      dynamodbputitem(table: str, itemdict: dict) -> None\n         Put a single item into DynamoDB.\n         \n         return None\n      \n      dynamodbqueryitems(table: str, key: str, value: str) -> dict\n         Get items based on keyword query from DynamoDB.\n         \n         return dict\n      \n      dynamodbscanallitems(table: str) -> dict\n         Get all items from a table in DynamoDB.\n         \n         return dict\n      \n      dynamodbscanitems(table: str, key: str, value: str, patternexp: dict) -> dict\n         Get all items from a DynamoDB table then filter by expression.\n         \n         return dict\n      \n      dynamodbupdateitem(table: str, keydict: dict, attributedict: dict, valuedict: dict, updateexpression: str) -> dict\n         Update an item in a DynamoDB table.\n         \n         return dict\n      \n      httpget(url: str, headers: dict = {}, encoding: str = 'latin-1') -> dict\n         Make HTTP requests using GET method.\n         \n         return dict\n      \n      httppost(url: str, headers: dict = {}, data: dict = {}, encoding: str = 'latin-1') -> str\n         Make HTTP requests using POST method.\n         \n         return str\n\n      kmsdecrypt(ciphertext: str, kmsid: str) -> str\n         Decrypt strings using AWS KMS.\n         \n         return str\n      \n      kmsencrypt(cleartext: str, kmsid: str) -> str\n         Encrypt strings using AWS KMS.\n         \n         return str\n      \n      randomize(length: int, punctuations: bool = False) -> str\n         Create random strings.\n         \n         return str\n      \n      readsecret(id: str) -> str\n         Read secret values in AWS Secrets Manager.\n         \n         return str\n      \n      sanitizerclean(input: str) -> str\n         Sanitize input items.\n         \n         return str\n      \n      sanitizercleanlist(input: list, pattern: str) -> list\n         Sanitize input list.\n         \n         return list\n      \n      sanitizercleanurl(url: str) -> str\n         Sanitize input URLs.\n         \n         return str\n      \n      sanitizercleanurllist(input: list, pattern: str) -> list\n         Sanitize input list.\n         \n         return list\n      \n      sanitizervalidate(input: str, pattern: str) -> bool\n         Validate input items to RegEx patterns.\n         \n         return bool\n      \n      sanitizervalidatelist(input: list) -> bool\n         Validate input list.\n         \n         return bool\n      \n      sha3512hash(clrtxt: str, condiments: str, encoding: str = 'latin-1') -> str\n         Hash strings using SHA3_512 algorithm.\n         \n         return str\n      \n      snsnotify(topic: str, message: str, subject: str) -> None\n         Send AWS SNS notifications.\n         \n         return None\n      \n      sqsmessage(queue_url: str, message: dict) -> dict\n         Send messages into AWS SQS queues.\n         \n         return dict\n\n   DATA\n      Union = typing.Union\n         Union type; Union[X, Y] means either X or Y.\n         \n         To define a union, use e.g. Union[int, str].  Details:\n         - The arguments must be types and there must be at least one.\n         - None as an argument is a special case and is replaced by\n            type(None).\n         - Unions of unions are flattened, e.g.::\n         \n               Union[Union[int, str], float] == Union[int, str, float]\n         \n         - Unions of a single argument vanish, e.g.::\n         \n               Union[int] == int  # The constructor actually returns int\n         \n         - Redundant arguments are skipped, e.g.::\n         \n               Union[int, str, int] == Union[int, str]\n         \n         - When comparing unions, the argument order is ignored, e.g.::\n         \n               Union[int, str] == Union[str, int]\n         \n         - You cannot subclass or instantiate a union.\n         - You can use Optional[X] as a shorthand for Union[X, None].\n\n   VERSION\n      2021.1.0.0\n\n   FILE\n      /Users/abdahmad/Desktop/aws_snippets/__init__.py\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fer1035/pypi-awssnippets",
    "keywords": "AWS,Python,snippets,operations",
    "license": "GPL-2.0-only",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aws-snippets",
    "package_url": "https://pypi.org/project/aws-snippets/",
    "platform": "",
    "project_url": "https://pypi.org/project/aws-snippets/",
    "project_urls": {
      "Homepage": "https://github.com/fer1035/pypi-awssnippets",
      "Repository": "https://github.com/fer1035/pypi-awssnippets"
    },
    "release_url": "https://pypi.org/project/aws-snippets/2021.1.0.0/",
    "requires_dist": [
      "boto3 (>=1.17.78,<2.0.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Python3 classes and functions to execute common AWS operations.",
    "version": "2021.1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11248369,
  "releases": {
    "2021.1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e21c75684739cd0f2301cc7eb672a3f409067abab9fa8e7c041b6290df9dadb3",
          "md5": "b301a524efaa5d57376ac5cf9b102bc4",
          "sha256": "74aa5cbf99b56cc70ca0432e9a6b47dc19057cb4a4bd5c4375779a9bf88b6560"
        },
        "downloads": -1,
        "filename": "aws_snippets-2021.1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b301a524efaa5d57376ac5cf9b102bc4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 6220,
        "upload_time": "2021-08-23T04:20:09",
        "upload_time_iso_8601": "2021-08-23T04:20:09.979672Z",
        "url": "https://files.pythonhosted.org/packages/e2/1c/75684739cd0f2301cc7eb672a3f409067abab9fa8e7c041b6290df9dadb3/aws_snippets-2021.1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "884776814a7863b89133d0d1398c15c9c036917bb761bcd769fa82a9654b4971",
          "md5": "2b4e374a5a21bcfc13594650b8fa5a87",
          "sha256": "83b603351274733fe41d56753c370ef50d5a910efed1d7a7da097af7ab05e81d"
        },
        "downloads": -1,
        "filename": "aws_snippets-2021.1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2b4e374a5a21bcfc13594650b8fa5a87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 6951,
        "upload_time": "2021-08-23T04:20:11",
        "upload_time_iso_8601": "2021-08-23T04:20:11.263335Z",
        "url": "https://files.pythonhosted.org/packages/88/47/76814a7863b89133d0d1398c15c9c036917bb761bcd769fa82a9654b4971/aws_snippets-2021.1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e21c75684739cd0f2301cc7eb672a3f409067abab9fa8e7c041b6290df9dadb3",
        "md5": "b301a524efaa5d57376ac5cf9b102bc4",
        "sha256": "74aa5cbf99b56cc70ca0432e9a6b47dc19057cb4a4bd5c4375779a9bf88b6560"
      },
      "downloads": -1,
      "filename": "aws_snippets-2021.1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b301a524efaa5d57376ac5cf9b102bc4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 6220,
      "upload_time": "2021-08-23T04:20:09",
      "upload_time_iso_8601": "2021-08-23T04:20:09.979672Z",
      "url": "https://files.pythonhosted.org/packages/e2/1c/75684739cd0f2301cc7eb672a3f409067abab9fa8e7c041b6290df9dadb3/aws_snippets-2021.1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "884776814a7863b89133d0d1398c15c9c036917bb761bcd769fa82a9654b4971",
        "md5": "2b4e374a5a21bcfc13594650b8fa5a87",
        "sha256": "83b603351274733fe41d56753c370ef50d5a910efed1d7a7da097af7ab05e81d"
      },
      "downloads": -1,
      "filename": "aws_snippets-2021.1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2b4e374a5a21bcfc13594650b8fa5a87",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 6951,
      "upload_time": "2021-08-23T04:20:11",
      "upload_time_iso_8601": "2021-08-23T04:20:11.263335Z",
      "url": "https://files.pythonhosted.org/packages/88/47/76814a7863b89133d0d1398c15c9c036917bb761bcd769fa82a9654b4971/aws_snippets-2021.1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}