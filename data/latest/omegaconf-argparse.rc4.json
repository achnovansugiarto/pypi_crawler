{
  "info": {
    "author": "Giorgos Paraskevopoulos",
    "author_email": "georgepar.91@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# omegaconf-argparse\n\nIntegration between Omegaconf and argparse for mixed config file and CLI arguments\n\nFlexible configuration management is important during experimentation, e.g. when training machine learning models.\n\nIdeally, we want both a configuration file to hold more \"stable\" hyperparameter values and the flexibility to\nchange values through command line arguments for rapid experimentation.\n\nThis package provides a barebones solution based on the excellent [OmegaConf](https://github.com/omry/omegaconf) package.\n\nSpecifically, we extend the `OmegaConf` class with a static `from_argparse` method to parse arguments provided using argparse,\nand provide utility functions to merge the default CLI values, YAML configuration file values and user provided CLI arguments.\n\n# Installation\n\nInstall package from PyPi:\n\n```\npip install omegaconf-argparse\n```\n\nThen in your code you can import:\n\n```\nfrom omegacli import OmegaConf, generate_config_template, parse_config\n```\n\n## Usage\n\nLet's start with an example. You have an argparse based script, and you want to move to a more reproducible setup\nbased on configuration files, without losing the flexibility of cli arguments.\n\nIn `examples/mnist.py` we have modified the example MNIST training script from [pytorch repo](https://github.com/pytorch/examples/blob/main/mnist/main.py).\n\nThe diff is:\n\n```diff\n11a12,13\n> from omegacli import generate_config_template, parse_config\n>\n158a161,172\n>     parser.add_argument(\n>         \"--generate-config\",\n>         action=\"store_true\",\n>         default=False,\n>         help=\"Generate example YAML configuration file\",\n>     )\n>     parser.add_argument(\n>         \"--config-path\",\n>         type=str,\n>         default=None,\n>         help=\"Path to configuration file\",\n>     )\n159a174,182\n>\n>     if args.generate_config:\n>         import sys\n>\n>         generate_config_template(parser, args.config)\n>         sys.exit(0)\n>\n>     args = parse_config(parser, args.config)\n```\n\nNote we have added two command line arguments `--generate-config` and `--config-path`.\n\nWhen we run\n\n```bash\npython mnist.py --generate-config --config-path config.yaml\n```\n\nit will create a `config.yaml` file, which can be used from now on:\n\n```yaml\nbatch_size: 64\ntest_batch_size: 1000\nepochs: null\nlr: 1.0\ngamma: 0.7\nno_cuda: false\nno_mps: false\ndry_run: false\nseed: 1\nlog_interval: 10\nsave_model: false\n```\n\nNow if we run:\n\n```\npython mnist.py --config config.yaml\n```\n\nThe script will use the values provided in the `config.yaml` file. If we change the configuration:\n\n```yaml\nlr: 0.1\n```\n\nThe training will use `lr=0.1`.\n\nAt any time we can run a quick experiment (let's say with `gamma=1.0`) and override the config values using the CLI:\n\n```\npython mnist.py --config config.yaml --gamma 1.0\n```\n\nWhen we are confident with our experiments we can set the best hyperparameter values in the configuration file and push to a remote repo for reproducibility.\n\n## How it works\n\nWe provide a high-level utility function `parse_config` that merges a YAML configuration file with an `argparse.ArgumentParser`:\n\n```python\nimport io\nfrom omegacli import parse_config\nmock_config_file = io.StringIO('''\nmodel:\n  hidden: 100\n''')\nparser = argparse.ArgumentParser(\"My cool model\")\nparser.add_argument(\"--hidden\", dest=\"model.hidden\", type=int, default=20)\ncfg = parse_config(parser, mock_config_file)\n>>> {'model': {'hidden': 100}}\ntype(cfg)\n>>> <class 'omegaconf.dictconfig.DictConfig'>\ncfg = parse_config(parser, mock_config_file, args=[\"--hidden\", \"200\"])\n>>> {'model': {'hidden': 200}}\nmock_config_file = io.StringIO('''\nrandom_value: hello\n''')\ncfg = parse_config(parser, mock_config_file)\n>>> {'model': {'hidden': 20}, 'random_value': 'hello'}\n```\n\nYou can also use the patched `OmegaConf` class directly:\n\n```python\nimport argparse\nfrom omegacli import OmegaConf\nparser = argparse.ArgumentParser(\"My cool model\")\nparser.add_argument(\"--hidden\", dest=\"model.hidden\", type=int, default=20)\nuser_provided_args, default_args = OmegaConf.from_argparse(parser, args=[\"--hidden\", \"100\"])\nuser_provided_args\n>>> {'model': {'hidden': 100}}\ndefault_args\n>>> {}\nuser_provided_args, default_args = OmegaConf.from_argparse(parser)\nuser_provided_args\n>>> {}\ndefault_args\n>>> {'model': {'hidden': 20}}\n```\n\n**NOTE**: the `from_argparse` method calls the `parser.parse_args()`.\n\n## Merging of provided values\n\nThe precedence for merging is as follows\n\n- default cli args values < config file values < user provided cli args\n\nE.g.:\n\n- if you don't include a value in your configuration it will take the default value from the argparse arguments\n- if you provide a cli arg (e.g. run the script with --bsz 64) it will override the value in the config file\n\n### Conventions\n\nTo create a nested configuration structure and match with the argparse provided CLI args,\nwe use the `dest` kwarg when adding an argument with `parser.add_argument`.\nSpecifically, we follow the convention that the destination is a string, delimited by `.` to indicate nested structure.\n\nFor example:\n\n```python\nparser.add_argument(\"--hidden\", dest=\"model_hidden\", type=int, default=20)\n```\n\nwill create a top-level element in the configuration:\n\n```python\nuser_provided_args, default_args = OmegaConf.from_argparse(parser, args=[\"--hidden\", \"100\"])\nuser_provided_args\n>>> {'model_hidden': 100}\n```\n\nThis will match with the following entry in the YAML file:\n\n```yaml\nmodel_hidden: 100\n```\n\nThe following:\n\n```python\nparser.add_argument(\"--hidden\", dest=\"model.hidden\", type=int, default=20)\n```\n\nwill create a nested structure in the configuration:\n\n```python\nuser_provided_args, default_args = OmegaConf.from_argparse(parser, args=[\"--hidden\", \"100\"])\nuser_provided_args\n>>> {'model': {'hidden': 100}}\n```\n\nand will match with the following YAML entry:\n\n```yaml\nmodel:\n  hidden: 100\n```\n\nThe parsing is recursive, so you can go as deep as you want.\n\n## Generate a configuration file based on an argument parser\n\nRun:\n\n```python\nfrom omegacli import generate_config_template\ngenerate_config_template(parser, \"example-config.yaml\")\n```\n\nThis will initialize a configuration file, that is consistent with the argument parser.\nYou can use this as a starting point for saving and editing your configuration.\n\n## Similar solutions\n\n- [Hydra](https://hydra.cc/docs/intro/): A more feature-rich, but more complex solution. If you are willing to introduce the dependency you can use it\n- [Pytorch-Lightning](https://pytorch-lightning.readthedocs.io/en/1.6.2/common/lightning_cli.html): PL introduced a similar functionality. You can use it if you are in the PL ecosystem.\n\n## Why create a separate package?\n\n`OmegaConf` plans to remain agnostic to the command line argument parser, therefore we cannot merge this solution upstream. [See related issue](https://github.com/omry/omegaconf/issues/569).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "omegaconf-argparse",
    "package_url": "https://pypi.org/project/omegaconf-argparse/",
    "platform": null,
    "project_url": "https://pypi.org/project/omegaconf-argparse/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/omegaconf-argparse/1.0.1/",
    "requires_dist": [
      "omegaconf (>=2.0.6,<3.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Integration between Omegaconf and argparse for mixed config file and CLI arguments",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15866931,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d96cbf696901daa57700335cef3d6f8a5b1ab080aaaf287d3efdfd1575e2a3e",
          "md5": "fbeca3ca66c06cb000f09a8685996c96",
          "sha256": "3f7d855f559fd463cae1620ed11bb27ce36ab9067f49d0bc2050b767726a9278"
        },
        "downloads": -1,
        "filename": "omegaconf_argparse-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fbeca3ca66c06cb000f09a8685996c96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9068,
        "upload_time": "2022-11-16T18:39:54",
        "upload_time_iso_8601": "2022-11-16T18:39:54.757459Z",
        "url": "https://files.pythonhosted.org/packages/4d/96/cbf696901daa57700335cef3d6f8a5b1ab080aaaf287d3efdfd1575e2a3e/omegaconf_argparse-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b79de49bf7a8e822a6426b51bcc1c77b68909bf5b2d05b42eddff4d8d2e3df26",
          "md5": "dac8d7600b2329267e4478b3b5a6fece",
          "sha256": "fd954f4e7d2aa57f3d40a4d050dcc3a49484aed7034b2fa3396bfa536f86e278"
        },
        "downloads": -1,
        "filename": "omegaconf_argparse-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dac8d7600b2329267e4478b3b5a6fece",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8672,
        "upload_time": "2022-11-16T18:39:56",
        "upload_time_iso_8601": "2022-11-16T18:39:56.145191Z",
        "url": "https://files.pythonhosted.org/packages/b7/9d/e49bf7a8e822a6426b51bcc1c77b68909bf5b2d05b42eddff4d8d2e3df26/omegaconf_argparse-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "904d301bb7a8f2cd24d86c3bb7a008230ea522d2b5d9736bc606f207a52f603d",
          "md5": "04c36d596c31f1bfbd7666cc9e33df38",
          "sha256": "7678ea714522a9d8f7e498b4ca20c521f5d94624449df2ea3d5a405b5c336673"
        },
        "downloads": -1,
        "filename": "omegaconf_argparse-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04c36d596c31f1bfbd7666cc9e33df38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9363,
        "upload_time": "2022-11-23T12:20:09",
        "upload_time_iso_8601": "2022-11-23T12:20:09.566371Z",
        "url": "https://files.pythonhosted.org/packages/90/4d/301bb7a8f2cd24d86c3bb7a008230ea522d2b5d9736bc606f207a52f603d/omegaconf_argparse-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68c4f223dc94cd2fdfdbdd3168e297d61f7b52e74c2c9393ffec6d667cd7ae15",
          "md5": "8fd81a27ad5a67fd1e05ac921900d31f",
          "sha256": "65e6c041a5d0f344a8ea3d48d92d85a7c175b95ee4d2e5f9cf633ea310c1b474"
        },
        "downloads": -1,
        "filename": "omegaconf_argparse-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8fd81a27ad5a67fd1e05ac921900d31f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 9039,
        "upload_time": "2022-11-23T12:20:11",
        "upload_time_iso_8601": "2022-11-23T12:20:11.222716Z",
        "url": "https://files.pythonhosted.org/packages/68/c4/f223dc94cd2fdfdbdd3168e297d61f7b52e74c2c9393ffec6d667cd7ae15/omegaconf_argparse-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e52a245d10f51df1e9c2b4a0acb3e7bf48e940d1501253fe71cf4fa33d009237",
          "md5": "88c3ea6409ddff70c8d7b565ec1c0b44",
          "sha256": "c0333461ce62ceffdb022e207648167d1b56c6a3c9c6ba189aed09943f0bf1bf"
        },
        "downloads": -1,
        "filename": "omegaconf_argparse-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88c3ea6409ddff70c8d7b565ec1c0b44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 10090,
        "upload_time": "2022-11-23T13:10:47",
        "upload_time_iso_8601": "2022-11-23T13:10:47.368951Z",
        "url": "https://files.pythonhosted.org/packages/e5/2a/245d10f51df1e9c2b4a0acb3e7bf48e940d1501253fe71cf4fa33d009237/omegaconf_argparse-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb38a8b81de5082c8d1474297e8436322f2cf468bc5560f8bebe004bd38623fe",
          "md5": "9b3f82108e8b34c89ec5a4466416ea63",
          "sha256": "72f42c7b01a0e839ed564446511567f445dec2dd20d43ff8a51416d6f27cab5a"
        },
        "downloads": -1,
        "filename": "omegaconf_argparse-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9b3f82108e8b34c89ec5a4466416ea63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 10086,
        "upload_time": "2022-11-23T13:10:48",
        "upload_time_iso_8601": "2022-11-23T13:10:48.957424Z",
        "url": "https://files.pythonhosted.org/packages/fb/38/a8b81de5082c8d1474297e8436322f2cf468bc5560f8bebe004bd38623fe/omegaconf_argparse-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ac938438043d76e8fb9163b54c0caf5d605394a5ed24aa774db932f926e038e",
          "md5": "5c1822960009c6cf61cd73d692d9e12d",
          "sha256": "a94e91d28b163fb2c3c4903ad0aa8967c2e8c7e7e52189d8532717bba7169e43"
        },
        "downloads": -1,
        "filename": "omegaconf_argparse-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c1822960009c6cf61cd73d692d9e12d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 10121,
        "upload_time": "2022-11-23T13:19:05",
        "upload_time_iso_8601": "2022-11-23T13:19:05.319643Z",
        "url": "https://files.pythonhosted.org/packages/7a/c9/38438043d76e8fb9163b54c0caf5d605394a5ed24aa774db932f926e038e/omegaconf_argparse-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d8638f24bae74b905f9a83becd11e69158ec728e6c85ebf052f5b9c7f2d9f85",
          "md5": "bff5211caf5d828f52760fad3d7a440f",
          "sha256": "fbed7b0098e45ec3f91f36c015519b548738c584b4c12907c41b5f0d09c4bb19"
        },
        "downloads": -1,
        "filename": "omegaconf_argparse-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bff5211caf5d828f52760fad3d7a440f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 10137,
        "upload_time": "2022-11-23T13:19:07",
        "upload_time_iso_8601": "2022-11-23T13:19:07.133431Z",
        "url": "https://files.pythonhosted.org/packages/1d/86/38f24bae74b905f9a83becd11e69158ec728e6c85ebf052f5b9c7f2d9f85/omegaconf_argparse-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ac938438043d76e8fb9163b54c0caf5d605394a5ed24aa774db932f926e038e",
        "md5": "5c1822960009c6cf61cd73d692d9e12d",
        "sha256": "a94e91d28b163fb2c3c4903ad0aa8967c2e8c7e7e52189d8532717bba7169e43"
      },
      "downloads": -1,
      "filename": "omegaconf_argparse-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c1822960009c6cf61cd73d692d9e12d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 10121,
      "upload_time": "2022-11-23T13:19:05",
      "upload_time_iso_8601": "2022-11-23T13:19:05.319643Z",
      "url": "https://files.pythonhosted.org/packages/7a/c9/38438043d76e8fb9163b54c0caf5d605394a5ed24aa774db932f926e038e/omegaconf_argparse-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d8638f24bae74b905f9a83becd11e69158ec728e6c85ebf052f5b9c7f2d9f85",
        "md5": "bff5211caf5d828f52760fad3d7a440f",
        "sha256": "fbed7b0098e45ec3f91f36c015519b548738c584b4c12907c41b5f0d09c4bb19"
      },
      "downloads": -1,
      "filename": "omegaconf_argparse-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bff5211caf5d828f52760fad3d7a440f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 10137,
      "upload_time": "2022-11-23T13:19:07",
      "upload_time_iso_8601": "2022-11-23T13:19:07.133431Z",
      "url": "https://files.pythonhosted.org/packages/1d/86/38f24bae74b905f9a83becd11e69158ec728e6c85ebf052f5b9c7f2d9f85/omegaconf_argparse-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}