{
  "info": {
    "author": "Neongecko",
    "author_email": "developers@neon.ai",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Neon Solvers\n\nA framework for question answering, provides a unified conversational api for arbitrary data sources\n\n## Creating a plugin\n\nA plugin can define the language it works in, eg, wolfram alpha only accepts english input at the time of this writing\n\nBidirectional translation will be handled behind the scenes for other languages\n\nPlugins are expected to implement the get_xxx methods and leave the user facing equivalents alone\n\n```python\nfrom neon_solvers import AbstractSolver\n\n\nclass MySolver(AbstractSolver):\n    def __init__(self):\n         # set the \"internal\" language, defined by dev, not user\n         # this plugin only accepts and outputs english\n        config={\"lang\": \"en\"}\n        super(MySolver, self).__init__(name=\"MySolver\", priority=100, \n                                       config=config)\n\n    # expected solver methods to be implemented\n    def get_data(self, query, context):\n        \"\"\"\n        query assured to be in self.default_lang\n        return a dict response\n        \"\"\"\n        return {\"error\": \"404 answer not found\"}\n\n    def get_image(self, query, context=None):\n        \"\"\"\n        query assured to be in self.default_lang\n        return path/url to a single image to acompany spoken_answer\n        \"\"\"\n        return \"http://stock.image.jpg\"\n\n    def get_spoken_answer(self, query, context=None):\n        \"\"\"\n        query assured to be in self.default_lang\n        return a single sentence text response\n        \"\"\"\n        return \"The full answer is XXX\"\n\n    def get_expanded_answer(self, query, context=None):\n        \"\"\"\n        query assured to be in self.default_lang\n        return a list of ordered steps to expand the answer, eg, \"tell me more\"\n\n        {\n            \"title\": \"optional\",\n            \"summary\": \"speak this\",\n            \"img\": \"optional/path/or/url\n        }\n        :return:\n        \"\"\"\n        steps = [\n            {\"title\": \"the question\", \"summary\": \"we forgot the question\", \"image\": \"404.jpg\"},\n            {\"title\": \"the answer\", \"summary\": \"but the answer is 42\", \"image\": \"42.jpg\"}\n        ]\n        return steps\n\n```\n\n## Using a plugin\n\nPlugins work with any language as long as you stick to the officially supported wrapper methods\n\n```python\n    # user facing methods, user should only be calling these\n    def search(self, query, context=None, lang=None):\n        \"\"\"\n        cache and auto translate query if needed\n        returns translated response from self.get_data\n        \"\"\"\n\n    def visual_answer(self, query, context=None, lang=None):\n        \"\"\"\n        cache and auto translate query if needed\n        returns image that answers query\n        \"\"\"\n\n    def spoken_answer(self, query, context=None, lang=None):\n        \"\"\"\n        cache and auto translate query if needed\n        returns chunked and translated response from self.get_spoken_answer\n        \"\"\"\n\n    def long_answer(self, query, context=None, lang=None):\n        \"\"\"\n        return a list of ordered steps to expand the answer, eg, \"tell me more\"\n        translated response from self.get_expanded_answer\n        {\n            \"title\": \"optional\",\n            \"summary\": \"speak this\",\n            \"img\": \"optional/path/or/url\n        }\n        :return:\n        \"\"\"\n```\n\n\n# Example Usage  - DuckDuckGo plugin\n\nsingle answer\n\n```python\nfrom neon_solver_ddg_plugin import DDGSolver\n\nd = DDGSolver()\n\nquery = \"who is Isaac Newton\"\n\n# full answer\nans = d.spoken_answer(query)\nprint(ans)\n# Sir Isaac Newton was an English mathematician, physicist, astronomer, alchemist, theologian, and author widely recognised as one of the greatest mathematicians and physicists of all time and among the most influential scientists. He was a key figure in the philosophical revolution known as the Enlightenment. His book Philosophiæ Naturalis Principia Mathematica, first published in 1687, established classical mechanics. Newton also made seminal contributions to optics, and shares credit with German mathematician Gottfried Wilhelm Leibniz for developing infinitesimal calculus. In the Principia, Newton formulated the laws of motion and universal gravitation that formed the dominant scientific viewpoint until it was superseded by the theory of relativity.\n```\n\nchunked answer, for conversational dialogs, ie \"tell me more\"\n\n```python\nfrom neon_solver_ddg_plugin import DDGSolver\n\nd = DDGSolver()\n\nquery = \"who is Isaac Newton\"\n\n# chunked answer\nfor sentence in d.long_answer(query):\n    print(sentence[\"title\"])\n    print(sentence[\"summary\"])\n    print(sentence.get(\"img\"))\n\n    # who is Isaac Newton\n    # Sir Isaac Newton was an English mathematician, physicist, astronomer, alchemist, theologian, and author widely recognised as one of the greatest mathematicians and physicists of all time and among the most influential scientists.\n    # https://duckduckgo.com/i/ea7be744.jpg\n\n    # who is Isaac Newton\n    # He was a key figure in the philosophical revolution known as the Enlightenment.\n    # https://duckduckgo.com/i/ea7be744.jpg\n\n    # who is Isaac Newton\n    # His book Philosophiæ Naturalis Principia Mathematica, first published in 1687, established classical mechanics.\n    # https://duckduckgo.com/i/ea7be744.jpg\n\n    # who is Isaac Newton\n    # Newton also made seminal contributions to optics, and shares credit with German mathematician Gottfried Wilhelm Leibniz for developing infinitesimal calculus.\n    # https://duckduckgo.com/i/ea7be744.jpg\n\n    # who is Isaac Newton\n    # In the Principia, Newton formulated the laws of motion and universal gravitation that formed the dominant scientific viewpoint until it was superseded by the theory of relativity.\n    # https://duckduckgo.com/i/ea7be744.jpg\n  ```  \n\nAuto translation, pass user language in context\n\n```python\nfrom neon_solver_ddg_plugin import DDGSolver\n\nd = DDGSolver()\n\n# bidirectional auto translate by passing lang context\nsentence = d.spoken_answer(\"Quem é Isaac Newton\",\n                           context={\"lang\": \"pt\"})\nprint(sentence)\n# Sir Isaac Newton foi um matemático inglês, físico, astrônomo, alquimista, teólogo e autor amplamente reconhecido como um dos maiores matemáticos e físicos de todos os tempos e entre os cientistas mais influentes. Ele era uma figura chave na revolução filosófica conhecida como o Iluminismo. Seu livro Philosophiæ Naturalis Principia Mathematica, publicado pela primeira vez em 1687, estabeleceu a mecânica clássica. Newton também fez contribuições seminais para a óptica, e compartilha crédito com o matemático alemão Gottfried Wilhelm Leibniz para desenvolver cálculo infinitesimal. No Principia, Newton formulou as leis do movimento e da gravitação universal que formaram o ponto de vista científico dominante até ser superado pela teoria da relatividade\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NeonGeckoCom/neon_solvers",
    "keywords": "",
    "license": "bsd3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neon-solvers",
    "package_url": "https://pypi.org/project/neon-solvers/",
    "platform": null,
    "project_url": "https://pypi.org/project/neon-solvers/",
    "project_urls": {
      "Homepage": "https://github.com/NeonGeckoCom/neon_solvers"
    },
    "release_url": "https://pypi.org/project/neon-solvers/0.0.2a1/",
    "requires_dist": [
      "quebra-frases",
      "json-database",
      "ovos-plugin-manager",
      "neon-lang-plugin-libretranslate"
    ],
    "requires_python": "",
    "summary": "neon question solver plugin framework",
    "version": "0.0.2a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17138014,
  "releases": {
    "0.0.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70280f450d0fbede8d84085676ee8f35ac16691512a42dbb564e16a6453335c1",
          "md5": "e04c313687c28f82f4a65f2781f80d52",
          "sha256": "79b2902d0df42e38525ba1dd99226c72e4c4e7aae97e6075183241d5e8bf7ef7"
        },
        "downloads": -1,
        "filename": "neon_solvers-0.0.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "e04c313687c28f82f4a65f2781f80d52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6248,
        "upload_time": "2022-05-26T16:05:25",
        "upload_time_iso_8601": "2022-05-26T16:05:25.883995Z",
        "url": "https://files.pythonhosted.org/packages/70/28/0f450d0fbede8d84085676ee8f35ac16691512a42dbb564e16a6453335c1/neon_solvers-0.0.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80020d185bcf9162b49dd77aac34e4c986c5dcea0cdb1a4986ffed46bfc737ac",
          "md5": "8c0035e5f588c5b1867529badc14ccf0",
          "sha256": "90167bd45a9791751868044bfa8e8bcb9642fe4a399f81b1e640c1c55c67ccfd"
        },
        "downloads": -1,
        "filename": "neon_solvers-0.0.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "8c0035e5f588c5b1867529badc14ccf0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6285,
        "upload_time": "2022-05-26T16:15:29",
        "upload_time_iso_8601": "2022-05-26T16:15:29.151943Z",
        "url": "https://files.pythonhosted.org/packages/80/02/0d185bcf9162b49dd77aac34e4c986c5dcea0cdb1a4986ffed46bfc737ac/neon_solvers-0.0.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cf298d1e9bb47b9b945c39ed7472af350e2cc4a6eaec272ee9dd9f1e3c2eed3",
          "md5": "28c7552f0087fea94a73117691fc97cb",
          "sha256": "51f99cb443cc53f4141fb44e3fe075bacde6d917a0598cf7feac30a03bada180"
        },
        "downloads": -1,
        "filename": "neon_solvers-0.0.2a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28c7552f0087fea94a73117691fc97cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8626,
        "upload_time": "2022-05-31T21:14:53",
        "upload_time_iso_8601": "2022-05-31T21:14:53.137470Z",
        "url": "https://files.pythonhosted.org/packages/6c/f2/98d1e9bb47b9b945c39ed7472af350e2cc4a6eaec272ee9dd9f1e3c2eed3/neon_solvers-0.0.2a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6cf298d1e9bb47b9b945c39ed7472af350e2cc4a6eaec272ee9dd9f1e3c2eed3",
        "md5": "28c7552f0087fea94a73117691fc97cb",
        "sha256": "51f99cb443cc53f4141fb44e3fe075bacde6d917a0598cf7feac30a03bada180"
      },
      "downloads": -1,
      "filename": "neon_solvers-0.0.2a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "28c7552f0087fea94a73117691fc97cb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8626,
      "upload_time": "2022-05-31T21:14:53",
      "upload_time_iso_8601": "2022-05-31T21:14:53.137470Z",
      "url": "https://files.pythonhosted.org/packages/6c/f2/98d1e9bb47b9b945c39ed7472af350e2cc4a6eaec272ee9dd9f1e3c2eed3/neon_solvers-0.0.2a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}