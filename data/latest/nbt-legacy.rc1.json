{
  "info": {
    "author": "Netherwhal",
    "author_email": "mail@netherwhal.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Games/Entertainment",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==========================\nThe NBT library for Python\n==========================\n\nForewords\n=========\n\nThis is mainly a `Named Binary Tag` parser & writer library.\n\nFrom the initial specification by Markus Persson::\n\n  NBT (Named Binary Tag) is a tag based binary format designed to carry large\n  amounts of binary data with smaller amounts of additional data.\n  An NBT file consists of a single GZIPped Named Tag of type TAG_Compound.\n\nCurrent specification is on the official [Minecraft Wiki](https://minecraft.gamepedia.com/NBT_format).\n\nThis library is very suited to inspect & edit the Minecraft data files. Provided\nexamples demonstrate how to:\n- get player and world statistics,\n- list mobs, chest contents, biomes,\n- draw a simple world map,\n- etc.\n\n.. image:: world.png\n\n*Note: Examples are just here to help using and testing the library.\nDeveloping Minecraft tools is out of the scope of this project.*\n\n\nStatus\n======\n\nThe library supports all the currently known tag types (including the arrays\nof 'Integer' and 'Long'), and the examples work with the McRegion,\npre-\"flattened\" and \"flattened\" Anvil formats.\n\nLast update was tested on Minecraft version **1.13.2**.\n\n\nDependencies\n============\n\nThe library, the tests and the examples are only using the Python core library,\nexcept `curl` for downloading some test reference data and `PIL` (Python\nImaging Library) for the `map` example.\n\nSupported Python releases: 2.7, 3.4 to 3.7\n\n\nUsage\n=====\n\nReading files\n-------------\n\nThe easiest way to read an nbt file is to instantiate an NBTFile object e.g.::\n\n  >>> from nbt import nbt\n  >>> nbtfile = nbt.NBTFile(\"bigtest.nbt\",'rb')\n  >>> nbtfile.name\n  u'Level'\n  >>> nbtfile[\"nested compound test\"].tag_info()\n  TAG_Compound(\"nested compound test\"): 2 Entries\n  >>> for tag in nbtfile[\"nested compound test\"][\"ham\"].tags:\n  ...     print(tag.tag_info())\n  ...\n  TAG_String(\"name\"): Hampus\n  TAG_Float(\"value\"): 0.75\n  >>> [tag.value for tag in nbtfile[\"listTest (long)\"].value]\n  [11, 12, 13, 14, 15]\n\nFiles can also be read from a fileobj (file-like object that contains a compressed\nstream) or a buffer (file-like object that contains an uncompressed stream of NBT\nTags) which can be accomplished thusly::\n\n  >>> from nbt.nbt import *\n  >>> nbtfile = NBTFile(fileobj=previously_opened_file)\n  # or....\n  >>> nbtfile = NBTFile(buffer=net_socket.makefile())\n\n\nWriting files\n-------------\n\nWriting files is easy too! if you have a NBTFile object, simply call it's\nwrite_file() method. If the NBTFile was instantiated with a filename, then\nwrite_file needs no extra arguments. It just works. If however you created a new\nfile object from scratch (or even if you just want to save it somewhere else)\ncall write_file('path\\to\\new\\file.nbt')::\n\n  >>> from nbt import nbt\n  >>> nbtfile = nbt.NBTFile(\"bigtest.nbt\",'rb')\n  >>> nbtfile[\"listTest (compound)\"].tags[0][\"name\"].value = \"Different name\"\n  >>> nbtfile.write_file(\"newnbtfile.nbt\")\n\nIt is also possible to write to a buffer or fileobj using the same keyword args::\n\n  >>> nbtfile.write_file(fileobj = my_file) #compressed\n  >>> nbtfile.write_file(buffer = sock.makefile()) #uncompressed\n\n\nCreating files\n--------------\n\nCreating files is trickier but ultimately should give you no issue, as long as\nyou have read the NBT spec (hint.. it's very short). Also be sure to note that\nthe NBTFile object is actually a TAG_Compound with some wrapper features, so\nyou can use all the standard tag features::\n\n  >>> from nbt.nbt import *\n  >>> nbtfile = NBTFile()\n\n\nFirst, don't forget to name the top level tag::\n\n  >>> nbtfile.name = \"My Top Level Tag\"\n  >>> nbtfile.tags.append(TAG_Float(name=\"My Float Name\", value=3.152987593947))\n  >>> mylist = TAG_List(name=\"TestList\", type=TAG_Long) #type needs to be pre-declared!\n  >>> mylist.tags.append(TAG_Long(100))\n  >>> mylist.tags.extend([TAG_Long(120),TAG_Long(320),TAG_Long(19)])\n  >>> nbtfile.tags.append(mylist)\n  >>> print(nbtfile.pretty_tree())\n  TAG_Compound(\"My Top Level Tag\"): 2 Entries\n  {\n      TAG_Float(\"My Float Name\"): 3.15298759395\n      TAG_List(\"TestList\"): 4 entries of type TAG_Long\n      {\n          TAG_Long: 100\n          TAG_Long: 120\n          TAG_Long: 320\n          TAG_Long: 19\n      }\n  }\n  >>> nbtfile[\"TestList\"].tags.sort(key = lambda tag: tag.value)\n  >>> print(nbtfile.pretty_tree())\n  TAG_Compound(\"My Top Level Tag\"): 2 Entries\n  {\n      TAG_Float(\"My FloatName\"): 3.15298759395\n      TAG_List(\"TestList\"): 4 entries of type TAG_Long\n      {\n          TAG_Long: 19\n          TAG_Long: 100\n          TAG_Long: 120\n          TAG_Long: 320\n       }\n  }\n  >>> nbtfile.write_file(\"mynbt.dat\")\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/Netherwhal/NBT",
    "keywords": "",
    "license": "Copyright (c) 2010-2013 Thomas Woolford and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nbt-legacy",
    "package_url": "https://pypi.org/project/nbt-legacy/",
    "platform": null,
    "project_url": "https://pypi.org/project/nbt-legacy/",
    "project_urls": {
      "Homepage": "http://github.com/Netherwhal/NBT"
    },
    "release_url": "https://pypi.org/project/nbt-legacy/1.5.1/",
    "requires_dist": [
      "mutf8"
    ],
    "requires_python": "",
    "summary": "Named Binary Tag Reader/Writer",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15417074,
  "releases": {
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f8e8c6771f73ac1faf13b5fe6feb9938538f1957be9188371f99a8ec2702f1e",
          "md5": "0e7071fc118c875e684ea9fe07632024",
          "sha256": "9ab6dabb9d2ef575e99e1573bbbb679544a55c2e9ceae34bc954e6307c921f16"
        },
        "downloads": -1,
        "filename": "nbt_legacy-1.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e7071fc118c875e684ea9fe07632024",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25703,
        "upload_time": "2022-10-14T22:10:28",
        "upload_time_iso_8601": "2022-10-14T22:10:28.049439Z",
        "url": "https://files.pythonhosted.org/packages/4f/8e/8c6771f73ac1faf13b5fe6feb9938538f1957be9188371f99a8ec2702f1e/nbt_legacy-1.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d53f9436cffbe48736dd6a47310a4c54eb4fb74df31e2eb70b5d5bde4c0ee19",
          "md5": "52d8f2a3a2bb3bef9fcfc706b1588ff1",
          "sha256": "dba35d6c756480181560e3fdb7b16fde779fe6dcff3f0aa870c37b55d9e15686"
        },
        "downloads": -1,
        "filename": "nbt-legacy-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "52d8f2a3a2bb3bef9fcfc706b1588ff1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 125449,
        "upload_time": "2022-10-14T22:10:30",
        "upload_time_iso_8601": "2022-10-14T22:10:30.507192Z",
        "url": "https://files.pythonhosted.org/packages/2d/53/f9436cffbe48736dd6a47310a4c54eb4fb74df31e2eb70b5d5bde4c0ee19/nbt-legacy-1.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f8e8c6771f73ac1faf13b5fe6feb9938538f1957be9188371f99a8ec2702f1e",
        "md5": "0e7071fc118c875e684ea9fe07632024",
        "sha256": "9ab6dabb9d2ef575e99e1573bbbb679544a55c2e9ceae34bc954e6307c921f16"
      },
      "downloads": -1,
      "filename": "nbt_legacy-1.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0e7071fc118c875e684ea9fe07632024",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25703,
      "upload_time": "2022-10-14T22:10:28",
      "upload_time_iso_8601": "2022-10-14T22:10:28.049439Z",
      "url": "https://files.pythonhosted.org/packages/4f/8e/8c6771f73ac1faf13b5fe6feb9938538f1957be9188371f99a8ec2702f1e/nbt_legacy-1.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d53f9436cffbe48736dd6a47310a4c54eb4fb74df31e2eb70b5d5bde4c0ee19",
        "md5": "52d8f2a3a2bb3bef9fcfc706b1588ff1",
        "sha256": "dba35d6c756480181560e3fdb7b16fde779fe6dcff3f0aa870c37b55d9e15686"
      },
      "downloads": -1,
      "filename": "nbt-legacy-1.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "52d8f2a3a2bb3bef9fcfc706b1588ff1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 125449,
      "upload_time": "2022-10-14T22:10:30",
      "upload_time_iso_8601": "2022-10-14T22:10:30.507192Z",
      "url": "https://files.pythonhosted.org/packages/2d/53/f9436cffbe48736dd6a47310a4c54eb4fb74df31e2eb70b5d5bde4c0ee19/nbt-legacy-1.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}