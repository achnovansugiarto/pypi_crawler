{
  "info": {
    "author": "",
    "author_email": "Sebastian Griesbach <sebastian.griesbach@zoho.eu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Generic-Configuration-Builder\nThis library intends to help separate the setup and execution of experiments. If you need a bunch of different main classes to store the setup of your experiments, then this tiny library can help!\nThe library passes a file format that can be used to set up any kind of class dependencies including all parameters, while also leaving the option to input additional parameters into the setup.\n\n## Installation\n```\npip install generic_configuration_builder\n```\n\n## How to use\nWith a prepared configuration simply call:\n```\nfrom generic_configuration_builder import gcb_build\n\ninstances_dictionary = gcb_build(\"path/to/configuration.ini\")\n```\n\n## Configuration Syntax\nThe .ini file format is used as follows:\n\n```\n[instance_name]\n~Module = module_of.the_class\n~Class = ClassName\nconstructor_argument_1 = 42\nconstructor_argument_2 = \"int, strings, lists, dicts and tuples are supported\"\nconstructor_argument_3 = [1,2,3,4]\nconstructor_argument_4 = (5,6,7,8)\nconstructor_argument_5 = {\"key_1\": \"value_1\",\n                        \"key_2\": \"value_2\"}\n\n[another_instance]\n~MODULE = a_different.module\n~CLASS = DifferentClass\nargument_that_requieres_the_previous_class = *instance_name\nmore_arguments = [\"a\", 2]\n\n[~RETURN]\nRETURN = [instance_name, another_instance]\n```\n\nEach instance has a name that is given in brackets [].\nAfter the name follows the module and the class name of the class that is supposed to be instantiated here, indicated by the keyword `~MODULE` and `~CLASS` keywords.\nThen the arguments that will be passed to the constructor follow with the name of the argument leading, the equal sign and the value follow. The basic python built-in types are supported here. <br>\nPreviously defined instances can be used as arguments to other instances by using a * followed by a previously defined instance name.<br>\nOptionally at the end of the configuration, you may define a `~RETURN` section which specifies which instances will be returned by the `.gcb_build()` function as a dictionary with their instance names as keys and the instances as values. If this section is not defined only the last created instance in the config is returned as a single object.\n\n## Other features\n\n### Placeholder variables\nIf you don't want to fix all parameters in the configuration you can write placeholders in the same way as you use previously defined instances.\n\n```\n[thingy]\n~MODULE = module_of.thingy\n~CLASS = ThingyClass\nargument_i_dont_want_to_define_in_config = *name_of_argument\n...\n```\nThe fill `name_of_argument` with a value pass a keyword argument with the same name to the `gcb_build()` function.\n\n```\nfrom generic_configuration_builder import gcb_build\n\ninstances_dictionary = gcb_build(\"path/to/configuration.ini\", \n                                    name_of_argument = 42)\n```\n\nHere there is no restriction on datatypes. You may pass any object like this.\n\n### Use child objects as arguments\n\nIf you want to pass the child object of some instance to another instance you can do it the same why as you would in python by using dots `.`\n```\n...\n\n[foo]\n~MODULE = foos.module\n~CLASS = FooClass\nargument_that_needs_chield_from previous_instance = *name_of_previous_instance.child\n```\n\nThis works recursively, so you could write `*instance.child.subchild` as well.\n\n### Parsing torch and numpy arrays\n\nIf you have numpy or pytorch installed AND the class you want to instantiate uses type hints in the signature of its `__init__` function, then you may pass an array as arguments in addition to the other data types.\n\n## Examples \nSpecific examples without any other python packages are not very helpful as native python classes usually don't need this kind of construction. \nSo here is a simple example with some made-up classes.\nAssume the existence of `classes.py` in the working directory with the following content:\n```\nclass ChildClass():\n    def __init__(self, some_string: str, some_float: float, another_string: str) -> None:\n        self.some_string = some_string\n        self.some_float = some_float\n        self.combined_string = some_string + str(some_float)\n        self.another_string = another_string\n\nclass ParentClass():\n    def __init__(self, some_int: int, combined_string: str) -> None:\n        self.some_int = some_int\n        self.combined_string = combined_string\n```\n\nAn `example_config.ini` could look like this:\n```\n[child_instance]\n~MODULE = classes\n~CLASS = ChildClass\nsome_string = \"blub\"\nsome_float = 3.141\nanother_string = *another_string\n\n[parent_instance]\n~MODULE = classes\n~CLASS = ParentClass\nsome_int = 25\ncombined_string = *child_instance.combined_string\n\n[~RETURN]\nRETURN = [child_instance, parent_instance, parent_instance.combined_string]\n```\n\nNote that `another_string` is not defined in the config and therefore needs to be passed as an argument to `gcb_build()`.\n\nThis configuration would be built as follows:\n\n```\nfrom generic_configuration_builder import gcb_build\n\ninstances_dict = gcb_build(\"./example_config.ini\", \n                           another_string = \"this is not part ot the config\")\n```\n\nAfter execution `instances_dict` contains a dictionary of the instance:\n```\n{\n    'child_instance': <classes.ChildClass object at 0x7fd91416ea70>,\n    'parent_instance': <classes.ParentClass object at 0x7fd91416ec50>,\n    'parent_instance.combined_string': 'blub3.141'\n}\n```\nWhich now can be used in whatever why these objects are intended to be used.\n\nSome extensive examples using a complex class structure can be found [here](https://github.com/Sebastian-Griesbach/Improving-Policy-Conditioned-Value-Functions/tree/main/experiments).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "config,configuration,dependencies,experiment,parameters,setup",
    "license": "MIT License  Copyright (c) 2022 Sebastian Griesbach  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "generic-configuration-builder",
    "package_url": "https://pypi.org/project/generic-configuration-builder/",
    "platform": null,
    "project_url": "https://pypi.org/project/generic-configuration-builder/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Sebastian-Griesbach/Generic-Configuration-Builder/issues",
      "Homepage": "https://github.com/Sebastian-Griesbach/Generic-Configuration-Builder"
    },
    "release_url": "https://pypi.org/project/generic-configuration-builder/1.0.1/",
    "requires_dist": [
      "configparser"
    ],
    "requires_python": ">=3.7",
    "summary": "A simple library for parsing a configuration file format which is intended to build dependencies and hold parameters - well suited for experimentaton settings in which different experiments use different clases.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17479718,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c6afb66f99a13f4d3c1ee7253737e1756820fbaf66aee7491d4886f782478d3",
          "md5": "341c5e48f69ee539158d694374afae6d",
          "sha256": "ff642ac52d782fe76081a36a8d4b76f3ff77241676edce712902abbe756adc10"
        },
        "downloads": -1,
        "filename": "generic_configuration_builder-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "341c5e48f69ee539158d694374afae6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7718,
        "upload_time": "2023-03-16T15:58:14",
        "upload_time_iso_8601": "2023-03-16T15:58:14.417638Z",
        "url": "https://files.pythonhosted.org/packages/4c/6a/fb66f99a13f4d3c1ee7253737e1756820fbaf66aee7491d4886f782478d3/generic_configuration_builder-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dc57d9bedef433f6f34b2b14ea5e12956560a72088adc0eb357c68ea8234e1a",
          "md5": "435cb53ce1107595bc5c126e4a25a214",
          "sha256": "25e5fefadf4c7f7195498b1c9252afe7533ac0c4376978b90ef77fe6c587c409"
        },
        "downloads": -1,
        "filename": "generic_configuration_builder-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "435cb53ce1107595bc5c126e4a25a214",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7421,
        "upload_time": "2023-03-16T15:58:16",
        "upload_time_iso_8601": "2023-03-16T15:58:16.112075Z",
        "url": "https://files.pythonhosted.org/packages/6d/c5/7d9bedef433f6f34b2b14ea5e12956560a72088adc0eb357c68ea8234e1a/generic_configuration_builder-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f79e08c28850797847f8c4f6cf5941a4cc659d4a26792259aa7ba00e766dd677",
          "md5": "448c1a244710d2940c7975b2ee1032dc",
          "sha256": "278f643cc7290cf9ac86f16a17cc01bf2edc0d7ef858009fbe93f56604758779"
        },
        "downloads": -1,
        "filename": "generic_configuration_builder-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "448c1a244710d2940c7975b2ee1032dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8063,
        "upload_time": "2023-03-28T15:07:12",
        "upload_time_iso_8601": "2023-03-28T15:07:12.206790Z",
        "url": "https://files.pythonhosted.org/packages/f7/9e/08c28850797847f8c4f6cf5941a4cc659d4a26792259aa7ba00e766dd677/generic_configuration_builder-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a33cc2d8f2b70fb931276a2021388b91f0166a72543a66b27f03eb513bab610f",
          "md5": "46bdac9806a7bd18fea2b31b633e35df",
          "sha256": "667abceb2539884c10b9c35e202f7fe7925593fa4b8aec1d42d88e34991c08e2"
        },
        "downloads": -1,
        "filename": "generic_configuration_builder-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "46bdac9806a7bd18fea2b31b633e35df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7760,
        "upload_time": "2023-03-28T15:07:14",
        "upload_time_iso_8601": "2023-03-28T15:07:14.679465Z",
        "url": "https://files.pythonhosted.org/packages/a3/3c/c2d8f2b70fb931276a2021388b91f0166a72543a66b27f03eb513bab610f/generic_configuration_builder-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f79e08c28850797847f8c4f6cf5941a4cc659d4a26792259aa7ba00e766dd677",
        "md5": "448c1a244710d2940c7975b2ee1032dc",
        "sha256": "278f643cc7290cf9ac86f16a17cc01bf2edc0d7ef858009fbe93f56604758779"
      },
      "downloads": -1,
      "filename": "generic_configuration_builder-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "448c1a244710d2940c7975b2ee1032dc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8063,
      "upload_time": "2023-03-28T15:07:12",
      "upload_time_iso_8601": "2023-03-28T15:07:12.206790Z",
      "url": "https://files.pythonhosted.org/packages/f7/9e/08c28850797847f8c4f6cf5941a4cc659d4a26792259aa7ba00e766dd677/generic_configuration_builder-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a33cc2d8f2b70fb931276a2021388b91f0166a72543a66b27f03eb513bab610f",
        "md5": "46bdac9806a7bd18fea2b31b633e35df",
        "sha256": "667abceb2539884c10b9c35e202f7fe7925593fa4b8aec1d42d88e34991c08e2"
      },
      "downloads": -1,
      "filename": "generic_configuration_builder-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "46bdac9806a7bd18fea2b31b633e35df",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7760,
      "upload_time": "2023-03-28T15:07:14",
      "upload_time_iso_8601": "2023-03-28T15:07:14.679465Z",
      "url": "https://files.pythonhosted.org/packages/a3/3c/c2d8f2b70fb931276a2021388b91f0166a72543a66b27f03eb513bab610f/generic_configuration_builder-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}