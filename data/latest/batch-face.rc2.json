{
  "info": {
    "author": "Elliott Zheng",
    "author_email": "admin@hypercube.top",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Batch Face for Modern Research\n\n## ðŸš§Documentation under construction, check tests folder for more details. ðŸš§\n\nThis repo provides the out-of-box face detection and face alignment with batch input support and enables real-time application on CPU.\n\n## Features\n1. Batch input support for faster data processing.\n2. Smart API.\n3. Ultrafast with inference runtime acceleration.\n4. Automatically download pre-trained weights.\n5. Minimal dependencies.\n\n### Requirements\n\n- Linux, Windows or macOS\n- Python 3.5+ (it may work with other versions too)\n- opencv-python\n- PyTorch (>=1.0) \n- ONNX (optional)\n\nWhile not required, for optimal performance it is highly recommended to run the code using a CUDA enabled GPU.\n\n## Install\n\nThe easiest way to install it is using pip:\n\n```bash\npip install git+https://github.com/elliottzheng/batch-face.git@master\n```\nNo extra setup needs, most of the pretrained weights will be downloaded automatically.\n\n## Usage\nYou can clone the repo and run tests like this\n```\npython -m tests.camera\n```\n### Face Detection\n\n##### Detect face and five landmarks on single image\n```python\nimport cv2\nfrom batch_face import RetinaFace\n\ndetector = RetinaFace(gpu_id=0)\nimg = cv2.imread(\"examples/obama.jpg\")\nfaces = detector(img, cv=True) # set cv to False for rgb input, the default value of cv is False\nbox, landmarks, score = faces[0]\n```\n##### Running on CPU/GPU\n\nIn order to specify the device (GPU or CPU) on which the code will run one can explicitly pass the device id.\n```python\nfrom batch_face import RetinaFace\n# 0 means using GPU with id 0 for inference\n# default -1: means using cpu for inference\ndetector = RetinaFace(gpu_id=0) \n```\n|      | GPU(GTX 1080TI,batch size=1) | GPU(GTX 1080TIï¼Œbatch size=750) | CPU(Intel(R) Core(TM) i7-7800X CPU @ 3.50GHz) |\n| ---- | ---------------------------- | ------------------------------- | --------------------------------------------- |\n| FPS  | 44.02405810720893            | 96.64058005582535               | 15.452635835550483                            |\n| SPF  | 0.022714852809906007         | 0.010347620010375976            | 0.0647138786315918                            |\n\n\n##### Batch input for faster detection\n\n**Detector with CUDA process batch input faster than the same amount of single input.** \n\n```python\nimport cv2\nfrom batch_face import RetinaFace\n\ndetector = RetinaFace()\nimg= cv2.imread('examples/obama.jpg')[...,::-1]\nall_faces = detector([img,img]) # return faces list of all images\nbox, landmarks, score = all_faces[0][0]\n```\n\nNote: All the input images must of the same size, for input images with different size, please use `detector.pseudo_batch_detect`.\n\n![](./images/gpu_batch.png)\n\n### Face Alignment\n##### face alignment on single image\n\n```python \nfrom batch_face import drawLandmark_multiple, LandmarkPredictor, RetinaFace\n\npredictor = LandmarkPredictor(0)\ndetector = RetinaFace(0)\n\nimgname = \"examples/obama.jpg\"\nimg = cv2.imread(imgname)\n\nfaces = detector(img, cv=True)\n\nif len(faces) == 0:\n    print(\"NO face is detected!\")\n    exit(-1)\n\n# the first input for the predictor is a list of face boxes. [[x1,y1,x2,y2]]\nresults = predictor(faces, img, from_fd=True) # from_fd=True to convert results from our detection results to simple boxes\n\nfor face, landmarks in zip(faces, results):\n    img = drawLandmark_multiple(img, face[0], landmarks)\n```\n\n\n## References\n\n- Face Detection Network and pretrained model are from [biubug6/Pytorch_Retinaface](https://github.com/biubug6/Pytorch_Retinaface)\n- Face Alignment Network and pretrained model are from [cunjian/pytorch_face_landmark](https://github.com/cunjian/pytorch_face_landmark)\n- Face Reconstruction Network and pretrained model are from [cleardusk/3DDFA](https://github.com/cleardusk/3DDFA)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/elliottzheng/batch-face",
    "keywords": "face-detection pytorch RetinaFace face-alignment",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "batch-face",
    "package_url": "https://pypi.org/project/batch-face/",
    "platform": "",
    "project_url": "https://pypi.org/project/batch-face/",
    "project_urls": {
      "Documentation": "https://github.com/elliottzheng/batch-face",
      "Homepage": "https://github.com/elliottzheng/batch-face",
      "Source": "https://github.com/elliottzheng/batch-face",
      "Tracker": "https://github.com/elliottzheng/batch-face/issues"
    },
    "release_url": "https://pypi.org/project/batch-face/1.3.0/",
    "requires_dist": [
      "numpy",
      "torch",
      "torchvision",
      "opencv-python"
    ],
    "requires_python": "",
    "summary": "Batch Face Preprocessing for Modern Research",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12219751,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ebd03bdab2ae4ba30d190a47e608a1502daaadb6261a467abf5f182375f1ee7",
          "md5": "a60071e4a4c3d25b6dae8deef47a29bf",
          "sha256": "f36e7e69b4be46b7b6ffdc11ce8ec3009065cee9d041d740030840c484820ac5"
        },
        "downloads": -1,
        "filename": "batch_face-1.0.0-py3.8.egg",
        "has_sig": false,
        "md5_digest": "a60071e4a4c3d25b6dae8deef47a29bf",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": null,
        "size": 39126,
        "upload_time": "2020-11-16T10:15:48",
        "upload_time_iso_8601": "2020-11-16T10:15:48.300677Z",
        "url": "https://files.pythonhosted.org/packages/5e/bd/03bdab2ae4ba30d190a47e608a1502daaadb6261a467abf5f182375f1ee7/batch_face-1.0.0-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d560699cb5200a13f56a92127bcbd9467d805308c9dbff8f4f63b22d9d6423b6",
          "md5": "ae8d23005c9cfe5a2f0beef79fa5cff1",
          "sha256": "e0aea7452cacd729b2c9404a172fd00b243043d630cdb81b9e66eb98a38795e7"
        },
        "downloads": -1,
        "filename": "batch_face-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae8d23005c9cfe5a2f0beef79fa5cff1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18299,
        "upload_time": "2020-11-16T10:15:46",
        "upload_time_iso_8601": "2020-11-16T10:15:46.803290Z",
        "url": "https://files.pythonhosted.org/packages/d5/60/699cb5200a13f56a92127bcbd9467d805308c9dbff8f4f63b22d9d6423b6/batch_face-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "670581544bd4be4d9e140774f3821fc5767ba16a60fc6e19bed6d7c2c41d34e2",
          "md5": "474422ccbf3fc9b27ea6cd7a48325881",
          "sha256": "6bd463f9bbcb2436aa5f9fdcbbbccb0c52ae77e48445ff5419c26a3470227b6c"
        },
        "downloads": -1,
        "filename": "batch_face-1.3.0-py3.8.egg",
        "has_sig": false,
        "md5_digest": "474422ccbf3fc9b27ea6cd7a48325881",
        "packagetype": "bdist_egg",
        "python_version": "1.3.0",
        "requires_python": null,
        "size": 30649102,
        "upload_time": "2021-12-06T05:32:16",
        "upload_time_iso_8601": "2021-12-06T05:32:16.229207Z",
        "url": "https://files.pythonhosted.org/packages/67/05/81544bd4be4d9e140774f3821fc5767ba16a60fc6e19bed6d7c2c41d34e2/batch_face-1.3.0-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae57ea33757c129a279da9f065a4ce02e88b4bc78c91700985c7a2aa68e219b0",
          "md5": "726ba719fe6e489bd00212fb161a6c12",
          "sha256": "d5ae3b847182bce275623b52c7b1ff25bf4ea99bd41dd75a73fdaa3a9e9c46a5"
        },
        "downloads": -1,
        "filename": "batch_face-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "726ba719fe6e489bd00212fb161a6c12",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30618955,
        "upload_time": "2021-12-06T05:32:10",
        "upload_time_iso_8601": "2021-12-06T05:32:10.476762Z",
        "url": "https://files.pythonhosted.org/packages/ae/57/ea33757c129a279da9f065a4ce02e88b4bc78c91700985c7a2aa68e219b0/batch_face-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "670581544bd4be4d9e140774f3821fc5767ba16a60fc6e19bed6d7c2c41d34e2",
        "md5": "474422ccbf3fc9b27ea6cd7a48325881",
        "sha256": "6bd463f9bbcb2436aa5f9fdcbbbccb0c52ae77e48445ff5419c26a3470227b6c"
      },
      "downloads": -1,
      "filename": "batch_face-1.3.0-py3.8.egg",
      "has_sig": false,
      "md5_digest": "474422ccbf3fc9b27ea6cd7a48325881",
      "packagetype": "bdist_egg",
      "python_version": "1.3.0",
      "requires_python": null,
      "size": 30649102,
      "upload_time": "2021-12-06T05:32:16",
      "upload_time_iso_8601": "2021-12-06T05:32:16.229207Z",
      "url": "https://files.pythonhosted.org/packages/67/05/81544bd4be4d9e140774f3821fc5767ba16a60fc6e19bed6d7c2c41d34e2/batch_face-1.3.0-py3.8.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae57ea33757c129a279da9f065a4ce02e88b4bc78c91700985c7a2aa68e219b0",
        "md5": "726ba719fe6e489bd00212fb161a6c12",
        "sha256": "d5ae3b847182bce275623b52c7b1ff25bf4ea99bd41dd75a73fdaa3a9e9c46a5"
      },
      "downloads": -1,
      "filename": "batch_face-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "726ba719fe6e489bd00212fb161a6c12",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30618955,
      "upload_time": "2021-12-06T05:32:10",
      "upload_time_iso_8601": "2021-12-06T05:32:10.476762Z",
      "url": "https://files.pythonhosted.org/packages/ae/57/ea33757c129a279da9f065a4ce02e88b4bc78c91700985c7a2aa68e219b0/batch_face-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}