{
  "info": {
    "author": "Joos Kiener",
    "author_email": "joos.kiener@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# RDKit Molecule Slide Generator\n\nRDKit Molecule Slide Generator is a tool for generating an overview image of molecules and their properties for usage in reports, presentations or blogs. An advanced `MolsToGridImage`. It's easier to show than explain.\n\n![example_slide_bzr](https://raw.githubusercontent.com/kienerj/molecule-slide-generator/master/images/example_slide_bzr.png)\n\nThis example uses the first 9 molecules of the `bzr.sdf` in the RDKit distributions data directory and uses Comic Sans MS as font. Activity values are conditionally colored.\n\n### Why should I use it?\n\nTraditional reporting tools could also be used to generate a similar output however the problem with these is that the information especially the chemical structure is then lost as it could only be restored via optical structure recognition. This can be avoided by using commercial tools like ChemDraw but it does not offer any automated way to generated such documents out-of-the-box and you are locked-in.\n\nMolecule Slide Generator can be used in an automated fashion via web application or say a python script in KNIME. The generated images contain all the chemical structures in different formats and the properties inside the images metadata. This data can be extracted again without the need for RDKit (albeit RDKit makes it easier if available). So you get an automated, vendor agnostic solution.\n\nThe images can also be sent by email (tested with gmail) or used in blogs and websites.\n\n### Installation\n\n##### Requirements\n\n- RDKit 2020.09.1 or higher\n- numpy\n- pillow\n\n##### New conda environment\n\nFor installation into a new conda environment, please use the included `environment.yml` file:\n\n```bash\nconda env create -f environment.yml\n```\n\nThis takes care of all dependencies and is the suggested way to try it out.\n\n##### Existing environment\n\nTo install into an existing environment, please ensure the needed requirements are already installed as the install script does not verify all of them.\n\n```bash\npip install molecule-slide-generator\n```\n\n### Features\n\n- Any true type font (.ttf) can be used for the atom labels and text. \n- Set font size of atom labels and text\n- The text can be colored separately for each molecule and property\n- Set bond length of molecule (`fixedBondLength`drawing option)\n- Molecules are rescaled to RDKits default bond length so that all of them have the same size\n- The property can be displayed with or without the properties name\n- Define size of slide (width, height) and number of rows and columns \n- Molecule data and properties are stored in images metadata and can be extracted again\n\n### Example Code\n\nThis is the code used to generate above image on Windows. For Linux you would have to use a different font or install MS Core fonts.\n\n```python\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem,Draw\nfrom molecule_slide_generator import *\n\nsuppl = Chem.SDMolSupplier('tests/bzr21.sdf')\n# first 9 mols\nmols = [x for x in suppl][:9]\n\n# Create properties with coloring\nall_props = []\nfor mol in mols:    \n    AllChem.Compute2DCoords(mol) # remove 3D coords\n    a = float(mol.GetProp('ACTIVITY'))\n    if a > 8.0:\n        color = '#3A662F'\n    elif a < 8.0 and a > 7:\n        color = '#e8860e'\n    else:\n        color = '#b52009'\n    props = [TextProperty('Name', mol.GetProp('_Name')), \n             TextProperty('Activity', a, color=color)]\n    all_props.append(props)\n    \n# Generate the slide\nsg = SlideGenerator(mols_per_row=3, rows=3, font_size=18, font='comicbd', \n                    number_of_properties=2, slide_width=800, slide_height=600)\npng = sg.generate_slide(mols, all_props, 'example_slide.png')\n```\n\nFor font you can either use a named font or a full path to a `.ttf` file. For named fonts the font must be in `C:/Windows/Fonts/` directory for Windows and for Linux in `/usr/share/fonts/truetype`.\n\nThe returned `png` is a simple extension of `bytes` built-in class that can be used as such but is displayed as image in Jupyter notebooks automatically without needing to use `IPython.display` (it just works like with RDKit molecules).\n\n\n### Extracting\n\nData can be extracted either manually or with the provided `DataExtractor` tool.\n\n#### Manually\n\nMolecules and properties can be extracted \"manually\" using the according RDKit functionality:\n\n```python\nmols = Chem.MolsFromPNGString(png)\nDraw.MolsToGridImage(mols,molsPerRow=3)\n```\n\nwhere `png`is a bytes object containing the png data.\n\nFor properties you can see the available data also by using RDKit:\n\n```python\nnprops = Chem.MetadataFromPNGString(png)\nnprops.keys()\ndict_keys(['rdkitPKL rdkit 2020.09.1', 'MOL rdkit 2020.09.1', 'SMILES rdkit 2020.09.1', 'Name', \n           'Activity', 'rdkitPKL1 rdkit 2020.09.1', 'MOL1 rdkit 2020.09.1', 'SMILES1 rdkit 2020.09.1', \n           'Name1', 'Activity1', 'rdkitPKL2 rdkit 2020.09.1', 'MOL2 rdkit 2020.09.1', \n           'SMILES2 rdkit 2020.09.1', 'Name2', 'Activity2', 'rdkitPKL3 rdkit 2020.09.1', \n           'MOL3 rdkit 2020.09.1', 'SMILES3 rdkit 2020.09.1', 'Name3', 'Activity3', \n           'rdkitPKL4 rdkit 2020.09.1', 'MOL4 rdkit 2020.09.1', 'SMILES4 rdkit 2020.09.1', 'Name4', \n           'Activity4', 'rdkitPKL5 rdkit 2020.09.1', 'MOL5 rdkit 2020.09.1', 'SMILES5 rdkit 2020.09.1', \n           'Name5', 'Activity5', 'rdkitPKL6 rdkit 2020.09.1', 'MOL6 rdkit 2020.09.1', \n           'SMILES6 rdkit 2020.09.1', 'Name6', 'Activity6', 'rdkitPKL7 rdkit 2020.09.1', \n           'MOL7 rdkit 2020.09.1', 'SMILES7 rdkit 2020.09.1', 'Name7', 'Activity7', \n           'rdkitPKL8 rdkit 2020.09.1', 'MOL8 rdkit 2020.09.1', 'SMILES8 rdkit 2020.09.1', 'Name8', \n           'Activity8'])\n```\n\nThe system used is that first molecules data is in key with the properties name, eg. \"Activity\" in the example. For each subsequent molecule the index of the molecule in the file is appended. So to get the activity value for the second molecule in the image you would use the key \"Activity1\". Data is returned as bytes and must be converted accordingly.\n\n```python\nfloat(nprops['Activity1'].decode('utf-8'))\n7.7\n```\n\n#### Data Extractor\n\nThe molecules and properties can be extracted again from the images by using `DataExtractor`.\n\n``````python\nextractor = DataExtractor()\ndf = extractor.extract_single(\"images/example_slide_bzr.png\")\n``````\n\nThis will return a `pandas.DataFrame` containing all the molecules and stored properties.\n\n`DataExtractor` can also be called in a loop using multiple calls to `extractor.extract(image)` and finally calling `df = extractor.get_data()` to return the data from multiple images in a single data frame.\n\n#### Extracting from MS Word or PowerPoint\n\nIf you insert the image into an MS Office document, it can get problematic to extract the original image with all the metadata. However looking at the document contents (thanks to Greg for this hint), the original images are present and can be extracted again. For extracting all the molecules in an MS Office document you can use the KNIME component [Extract RDKit Molecules From Office](https://hub.knime.com/kienerj/spaces/Public/latest/Extract%20RDKit%20Molecules%20From%20Office). Alternatively you can manually or programmatically unzip the office document and use `DataExtractor` to iterate over the contained png images.\n\n### Miscellaneous\n\n#### Layout / Parameters\n\nThe default parameters of the slide generator work well with small molecules and a PowerPoint template with an aspect ratio of 16:9 that has a title and subtitle text box, the specific setup I have to use. You will need to play with the parameters to find an good solution for your specific needs. \n\nIf the image is \"too crowed\" then either increase the slide dimension or reduce the number of rows or columns on the slide. To change the size of the molecules, use the `bond_length` parameter. Molecules that do not fit in the defined space will be automatically shrunk down. However this has a limitation on the atom label font size. So some minor shrinking works fine but too much and the labels will be too large. In that case, reduce the `bond_length`.\n\n#### Inner workings\n\nTechnically the generator creates a molecule image using RDKit and a separate image with the text (properties) and merges them. Then all these images get merged together into the final image to which the metadata is appended. For all this \"image manipulation\" `pillow` is used.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kienerj/molecule-slide-generator",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "molecule-slide-generator",
    "package_url": "https://pypi.org/project/molecule-slide-generator/",
    "platform": null,
    "project_url": "https://pypi.org/project/molecule-slide-generator/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kienerj/molecule-slide-generator/issues",
      "Homepage": "https://github.com/kienerj/molecule-slide-generator"
    },
    "release_url": "https://pypi.org/project/molecule-slide-generator/0.2.0/",
    "requires_dist": [
      "numpy",
      "pillow"
    ],
    "requires_python": ">=3.6",
    "summary": "Generate images of molecules and their properties for use in presentations and reports",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14505080,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "366d4266b695d7d954806b6822aba65b53683ec2cbdce1fdeed05d7f468380cc",
          "md5": "f9f903fd03dc9ad72582f82aa7383469",
          "sha256": "1a723cc9c316a808f717ebb845281d4c23f8383fe17008df088b602dde283577"
        },
        "downloads": -1,
        "filename": "molecule_slide_generator-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9f903fd03dc9ad72582f82aa7383469",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12004,
        "upload_time": "2021-03-30T13:32:54",
        "upload_time_iso_8601": "2021-03-30T13:32:54.824682Z",
        "url": "https://files.pythonhosted.org/packages/36/6d/4266b695d7d954806b6822aba65b53683ec2cbdce1fdeed05d7f468380cc/molecule_slide_generator-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "779d5dcbdadd82e16a0d07d14b38a9e485b08bdcaf872519d07a89766a3a954d",
          "md5": "282ee00454ac10688efd53d24fd12734",
          "sha256": "507f9f6e73e6c00c1b85b5558a6e5aa1582cd4b2c9d7e29a3b5add8b6440f0dc"
        },
        "downloads": -1,
        "filename": "molecule-slide_generator-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "282ee00454ac10688efd53d24fd12734",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13235,
        "upload_time": "2021-03-30T13:32:55",
        "upload_time_iso_8601": "2021-03-30T13:32:55.986708Z",
        "url": "https://files.pythonhosted.org/packages/77/9d/5dcbdadd82e16a0d07d14b38a9e485b08bdcaf872519d07a89766a3a954d/molecule-slide_generator-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a6e4f290087bb59af68684326c5487e2aaa0b5420f5f0040fc856123b91e47c",
          "md5": "d2145c0f96252fcfeb13c9a9fa846fc2",
          "sha256": "f898ce0162c81896982631aa5f1874c99b058940cebe4b8fc59330fcda240f7c"
        },
        "downloads": -1,
        "filename": "molecule_slide_generator-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2145c0f96252fcfeb13c9a9fa846fc2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11993,
        "upload_time": "2021-05-12T06:52:27",
        "upload_time_iso_8601": "2021-05-12T06:52:27.040747Z",
        "url": "https://files.pythonhosted.org/packages/8a/6e/4f290087bb59af68684326c5487e2aaa0b5420f5f0040fc856123b91e47c/molecule_slide_generator-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59e3af89906238021d6cb069b594db283f4732231007f83300ec0d694047a1f7",
          "md5": "2ed6b7897ea31f8a0e27483892583b28",
          "sha256": "c88ab137c899ed277b762748b238577d039b591df1598694857bbb6bd739a4e3"
        },
        "downloads": -1,
        "filename": "molecule-slide_generator-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ed6b7897ea31f8a0e27483892583b28",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14113,
        "upload_time": "2021-05-12T06:52:28",
        "upload_time_iso_8601": "2021-05-12T06:52:28.354879Z",
        "url": "https://files.pythonhosted.org/packages/59/e3/af89906238021d6cb069b594db283f4732231007f83300ec0d694047a1f7/molecule-slide_generator-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d72f7ddb8ab79a47f34c26a00d1f7bf54cd032d59f272b36286c267617e44d33",
          "md5": "09906932820f67bb73c6dbd2688fcbd1",
          "sha256": "2487e0f52e74139b7c474e04f833adced1647cdf2ddf437ab617fa015dd7fabf"
        },
        "downloads": -1,
        "filename": "molecule_slide_generator-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09906932820f67bb73c6dbd2688fcbd1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12821,
        "upload_time": "2022-07-21T12:32:08",
        "upload_time_iso_8601": "2022-07-21T12:32:08.617611Z",
        "url": "https://files.pythonhosted.org/packages/d7/2f/7ddb8ab79a47f34c26a00d1f7bf54cd032d59f272b36286c267617e44d33/molecule_slide_generator-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "942a9af1a416e77d8e4aaf653aeb7f950c08645399caae6d4c8354cc24a30fa5",
          "md5": "2413ecaa323dd231334d8fbdb06da253",
          "sha256": "7b550dd8ad2a9eae1d660d8fa30cbf7692bf19e7d00c73a56597762f20d6ff54"
        },
        "downloads": -1,
        "filename": "molecule-slide_generator-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2413ecaa323dd231334d8fbdb06da253",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14719,
        "upload_time": "2022-07-21T12:32:09",
        "upload_time_iso_8601": "2022-07-21T12:32:09.899572Z",
        "url": "https://files.pythonhosted.org/packages/94/2a/9af1a416e77d8e4aaf653aeb7f950c08645399caae6d4c8354cc24a30fa5/molecule-slide_generator-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d72f7ddb8ab79a47f34c26a00d1f7bf54cd032d59f272b36286c267617e44d33",
        "md5": "09906932820f67bb73c6dbd2688fcbd1",
        "sha256": "2487e0f52e74139b7c474e04f833adced1647cdf2ddf437ab617fa015dd7fabf"
      },
      "downloads": -1,
      "filename": "molecule_slide_generator-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "09906932820f67bb73c6dbd2688fcbd1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12821,
      "upload_time": "2022-07-21T12:32:08",
      "upload_time_iso_8601": "2022-07-21T12:32:08.617611Z",
      "url": "https://files.pythonhosted.org/packages/d7/2f/7ddb8ab79a47f34c26a00d1f7bf54cd032d59f272b36286c267617e44d33/molecule_slide_generator-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "942a9af1a416e77d8e4aaf653aeb7f950c08645399caae6d4c8354cc24a30fa5",
        "md5": "2413ecaa323dd231334d8fbdb06da253",
        "sha256": "7b550dd8ad2a9eae1d660d8fa30cbf7692bf19e7d00c73a56597762f20d6ff54"
      },
      "downloads": -1,
      "filename": "molecule-slide_generator-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2413ecaa323dd231334d8fbdb06da253",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14719,
      "upload_time": "2022-07-21T12:32:09",
      "upload_time_iso_8601": "2022-07-21T12:32:09.899572Z",
      "url": "https://files.pythonhosted.org/packages/94/2a/9af1a416e77d8e4aaf653aeb7f950c08645399caae6d4c8354cc24a30fa5/molecule-slide_generator-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}