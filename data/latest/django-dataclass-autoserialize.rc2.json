{
  "info": {
    "author": "Piti Ongmongkolkul",
    "author_email": "o.piti@thegang.tech",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# django-dataclass-autoserialize\n\nAn extension of slightly modified\noxan's [django-dataclass-serialize](https://github.com/oxan/djangorestframework-dataclasses)\n(Temporary hosted [here](https://github.com/piti118/djangorestframework-dataclasses)). Making it much more enjoyable to\nuse with [drf-yasg](https://github.com/axnsan12/drf-yasg).\n\nThe goal of this package is to make the APIView code as succinctly as possible. The main pain point it is trying to solve is\n\n1) Having to define the param class and serialize separately.\n2) Having it nicely integrate with drf-yasg without having to duplicate information.\n\n# Install\n\n```\npip install django-dataclass-autoserialize\n```\n\n# Documentation\n\n## Simple Usage\n\nHere is an example of a typical usage. Pull straight from\n[Example Project](https://github.com/thegangtechnology/django_dataclass_autoserialize_example)\n\n```python\nfrom __future__ import annotations\nfrom django_dataclass_autoserialize import AutoSerialize, swagger_post_schema, swagger_get_schema\nfrom dataclasses import dataclass\n\nfrom rest_framework.request import Request\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\n\n@dataclass\nclass InputParam(AutoSerialize):\n    a: int\n    b: int\n\n    @classmethod\n    def example(cls) -> InputParam:\n        # this is actually optional but it will show up\n        # in swagger doc\n        return cls(a=3, b=2)\n\n\n@dataclass\nclass ComputeResponse(AutoSerialize):\n    msg: str\n    result: int\n\n    @classmethod\n    def example(cls) -> ComputeResponse:\n        return cls(msg='hello world', result=5)\n\n\nclass AddView(APIView):\n\n    @swagger_post_schema(\n        body_type=InputParam,\n        response_types={200: ComputeResponse}\n    )\n    def post(self, request: Request) -> Response:\n        param = InputParam.from_post_request(request)\n        return ComputeResponse(msg='add successfully',\n                               result=param.a + param.b).to_response()\n\n\nclass SubtractView(APIView):\n    @swagger_get_schema(\n        query_type=InputParam,\n        response_types={200: ComputeResponse}\n    )\n    def get(self, request: Request) -> Response:\n        param = InputParam.from_get_request(request)\n        return ComputeResponse(msg='subtract successfully',\n                               result=param.a - param.b).to_response()\n\n```\n\nThen the swagger will shows up like the following\n![swagger example 1](https://github.com/thegangtechnology/django-dataclass-autoserialize/raw/main/images/example1.png)\n![swagger example 2](https://github.com/thegangtechnology/django-dataclass-autoserialize/raw/main/images/example2.png)\n\n## Customization\n\nUnder the hood it uses [djangorestframework-dataclasses](https://github.com/oxan/djangorestframework-dataclasses). So\nall the customization that can be done for dataclass is applied here as well. For example, you can\nadd `serializer_kwargs` like so\n\n```python\n@dataclasses.dataclass\nclass Person:\n    email: str = dataclasses.field(metadata={'serializer_field': fields.EmailField()})\n    age: int = dataclasses.field(metadata={'serializer_kwargs': {'min_value': 0}})\n```\n\n## Validation\n\nThe validation of the object can be done by overiding\n`validate_data(cls, obj)` method. For example\n\n```python\nclass Numbers(AutoSerialize):\n    a: int\n    b: int\n\n    @classmethod\n    def validate_data(cls, obj: Numbers) -> Numbers:\n        from rest_framework.exceptions import ValidationError\n        if obj.a + obj.b > 1000:\n            raise ValidationError('too big')\n        return obj\n```\n\n## Swagger\n\ndrg-yasg integration is done through `swagger_get_schema` and `swagger_get_schema`\ndecorator. See simple example for the usage. keywords other than `query_type/body_type` and `response_types`\nare forwarded to drf-yasg's `swagger_auto_schema`.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thegangtechnology/django-dataclass-autoserialize",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-dataclass-autoserialize",
    "package_url": "https://pypi.org/project/django-dataclass-autoserialize/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-dataclass-autoserialize/",
    "project_urls": {
      "Homepage": "https://github.com/thegangtechnology/django-dataclass-autoserialize"
    },
    "release_url": "https://pypi.org/project/django-dataclass-autoserialize/1.0.1/",
    "requires_dist": [
      "djangorestframework-dataclasses",
      "drf-yasg",
      "mypy ; extra == 'dev'",
      "autopep8 ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11259812,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70224db6bbce467bcc0eaff9f262ae16dcdb50a86776ecade1338282e9ac9424",
          "md5": "0bc1877890bb72602738c06ffbc59a4c",
          "sha256": "bbfcbd3273663a3cfb42009bf2427c1b605ffa28aed407d55a8005c170b72381"
        },
        "downloads": -1,
        "filename": "django_dataclass_autoserialize-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0bc1877890bb72602738c06ffbc59a4c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4923,
        "upload_time": "2021-08-21T14:51:44",
        "upload_time_iso_8601": "2021-08-21T14:51:44.649433Z",
        "url": "https://files.pythonhosted.org/packages/70/22/4db6bbce467bcc0eaff9f262ae16dcdb50a86776ecade1338282e9ac9424/django_dataclass_autoserialize-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1aae548fd73fae07196d8709371cda33f98bedecbf2cec18c888bdaef7a620c3",
          "md5": "804f5e14144b24be2d4e02156b39aa3d",
          "sha256": "4d5cb43fb52dbf2a578c8cc1716578866dce5456d94b1052f7c65553e6031e6f"
        },
        "downloads": -1,
        "filename": "django_dataclass_autoserialize-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "804f5e14144b24be2d4e02156b39aa3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5090,
        "upload_time": "2021-08-23T05:34:19",
        "upload_time_iso_8601": "2021-08-23T05:34:19.369335Z",
        "url": "https://files.pythonhosted.org/packages/1a/ae/548fd73fae07196d8709371cda33f98bedecbf2cec18c888bdaef7a620c3/django_dataclass_autoserialize-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1aae548fd73fae07196d8709371cda33f98bedecbf2cec18c888bdaef7a620c3",
        "md5": "804f5e14144b24be2d4e02156b39aa3d",
        "sha256": "4d5cb43fb52dbf2a578c8cc1716578866dce5456d94b1052f7c65553e6031e6f"
      },
      "downloads": -1,
      "filename": "django_dataclass_autoserialize-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "804f5e14144b24be2d4e02156b39aa3d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5090,
      "upload_time": "2021-08-23T05:34:19",
      "upload_time_iso_8601": "2021-08-23T05:34:19.369335Z",
      "url": "https://files.pythonhosted.org/packages/1a/ae/548fd73fae07196d8709371cda33f98bedecbf2cec18c888bdaef7a620c3/django_dataclass_autoserialize-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}