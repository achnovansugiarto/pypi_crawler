{
  "info": {
    "author": "Adam Sillye",
    "author_email": "adam@berriesand.co",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# PyUbbink package #\n\nThis is an unofficial implementation of the Ubbink Ubiflux Vigor ventillation system Modbus communications.\n\n**Why?** To be able to control these devices from HomeAssistant, or from your computer.\n\n![Vigor](https://www.my-electro.be/image/cache/catalog/products/ventilators/hrv-units/Ubiflux-Vigor-W400-Ubbink-400x400.jpg)\n\n# Hardware prerequisites #\n\n- Ubiflux Vigor W325 or W400 device\n- USB - RS458 dongle\n\n# Hardware setup #\n\nYou have to connect your computer or Pi to the Vigor device with a (preferably) twisted pair of wire. Connect the A, B ports of the dongle to the red Modbus port on the Vigor device, A -> 2, B -> 3. If your dongle has a GND port, connect it to 1. (In my setup, I only use two wires, without GND)\n\nYou do *not* need the Plus PCB to use this package. (Ubbink 0883246 - circuit board 'Plus' for Vigor with WIFI and LAN)\n\n\n# Software Prerequisites #\n\n- Install Python 3, did not checked the actual minimum version, 3.7+ will be fine\n- Install pymodbus:\n  ```pip install pymodbus --upgrade```\n- Install PyUbbink:\n  ```pip install pyubbink```\n- For the dongle - depending on the version you have - you might need a CH341 chip driver. For Windows, search ```CH341SER``` and you will find it. For Pi + HomeAssistant it worked for me without additional driver.\n\n# Usage #\n\n## Creating the pymodbus client ###\nCreate a pymodbus serial client, typically  ```ModbusSerialClient```. Use the device name where you connected. For Windows, simply use the COM port name.\n\n```client = ModbusClient(port='/dev/ttyUSB0', baudrate=19200, stopbits = 1, bytesize = 8, parity = 'N', method=\"rtu\")```\n\nIn the wall unit, you can change the serial speed to other values - make sure you use the same settings.\n\nThe RTU mode is important as Vigor devices use RTU framing.\n\n## Connection ##\nUse the ```connect``` method in the pymodbus client to open the serial port: \n```client.connect()```\n\nWhen connected you can attach the ```pyubbink``` wrapper ```vigor = VigorDevice(client)```\n\nThe default ModBus slave address is ```20```. If you change that on the wall unit you can specify it with the ```unit``` parameter, like ```VigorDevice(client, 42)```\n\nWhen done use ```close```: ```client.close()```\n\n\n## Obtaining device information ##\n\n```get_serial_number()``` returns the serial number as a string.\n\n## Obtaining sensor values ##\n\n| Sensor       | Method    | Unit    |\n|---|---|---|\n| Intake temperature     | ```get_supply_temperature()```     | Celsius |\n| Intake pressure   | ```get_supply_pressure()```   | Pa      |\n| Intake actual airflow  | ```get_supply_airflow_actual()```  | m3/h    |\n| Intake airflow preset  | ```get_supply_airflow_preset()```  | m3/h    |\n| Exhaust temperature    | ```get_extract_temperature()```    | Celsius |\n| Exhaust pressure       | ```get_extract_pressure()```       | Pa      |\n| Exhaust actual airflow | ```get_extract_airflow_actual()``` | m3/h    |\n| Exhaust airflow preset | ```get_extract_airflow_preset()``` | m3/h    |  \n\n## Obtaining statuses ##\n\nHere are some statuses you can query:\n\n| Status   | Method    | Possible values     |\n|---|---|---|\n| Bypass status      | ```get_bypass_status()``` | ```\"opening\"```,```\"closing\"```, ```\"open\"```, ```\"closed\"``` state of the bypass valve,<br>```\"initializing\"``` during boot\n| Filter status      | ```get_filter_status()``` | ```\"normal\"```, ```\"dirty\"```\n| Airflow mode       | ```get_airflow_mode()```  | Wall unit: ```\"wall_unit\"```  in this case the wall unit controls the device<br>Standard presets: ```\"holiday\"```,```\"low\"```,```\"normal\"```,```\"high\"``` the last selected preset set by ```set_airflow_mode()```<br>Custom: ```\"custom\"``` if the last setting was done with ```set_custom_airflow_rate()```\n\n## Actions ##\n\nThe following methods are to change the airflow.\n**If the wall unit is in manual mode, it seems all of these are ignored, and the only manual setting of the wall unit used.** Once you set it back to clock program, the last setting applied by these method will be used.\n\nAlso, it seems, if these settings applied without reasonable delay (>5 secs), the device seems ignoring them.\n\n| Action |  Method     | Parameters      |\n|---|---|---|\n| Revert to wall unit   | ```set_airflow_mode(\"wall_unit\")``` | Use the ```\"wall_unit``` to hand back the control to the wall unit.\n| Choose preset   | ```set_airflow_mode(mode)``` | Selects one of the presets: ```\"holiday\"```,```\"low\"```,```\"normal\"```,```\"high\"``` \n| Custom rate     | ```set_custom_airflow_rate(rate)``` | 0, 50-400, if out of range the value will be adjusted to a valid one. <br>This option is only available for Vigor W400 (according the documentation. I have W400 and it works.)\n\n\n# Full example #\n\n```python\nfrom pymodbus.client.sync import ModbusSerialClient as ModbusClient\nfrom pyubbink import VigorDevice\nimport time\n\nclient = ModbusClient(port='/dev/ttyUSB0', baudrate=19200, stopbits = 1, bytesize = 8, parity = 'N', method=\"rtu\", timeout=60)\nvigor = VigorDevice(client)\n\nclient.connect()\nprint(\"Device serial number:    \" + vigor.get_serial_number())\n\nprint(\"Intake temperature:      \" + str(vigor.get_supply_temperature()) + \" Celsius\")\nprint(\"Intake pressure:    \" + str(vigor.get_supply_pressure()) + \" Pa\")\nprint(\"Intake actual airflow:   \" + str(vigor.get_supply_airflow_actual()) + \" m3/h\")\nprint(\"Intake airflow preset:   \" + str(vigor.get_supply_airflow_preset()) + \" m3/h\")\nprint(\"Exhaust temperature:     \" + str(vigor.get_extract_temperature()) + \" Celsius\")\nprint(\"Exhaust pressure:   \" + str(vigor.get_extract_pressure()) + \" Pa\")\nprint(\"Exhaust actual airflow:  \" + str(vigor.get_extract_airflow_actual()) + \" m3/h\")\nprint(\"Exhaust airflow preset:  \" + str(vigor.get_extract_airflow_preset()) + \" m3/h\")\n\nprint(\"Airflow mode:       \" + vigor.get_airflow_mode())\nprint(\"Bypass status:      \" + vigor.get_bypass_status())\nprint(\"Filter status:      \" + vigor.get_filter_status())\n\n# choose a preset\nvigor.set_airflow_mode(\"low\")\ntime.sleep(60)\n\n# choose a custom rate\nvigor.set_airflow_rate(135)\ntime.sleep(60)\n\n# revert back to wall unit\nvigor.set_airflow_mode(\"wall_unit\")\n\nclient.close()\n```\n\n# References #\n\n## General description ##\n\nhttps://www.ubbink.com/nl-be/ventilatie/woonhuisventilatie/woonhuisventilatie/warmteterugwinunits\n\nhttps://www.ubbink.com/en-gb/ventilation/residential-ventilation/residential-ventilation/ubiflux-mvhr-heat-recovery-units\n\n## Manual ##\n\nInterestingly, only the Dutch version contains the ModBus commands.\nhttps://www.ubbink.com/getmedia/b970e7e8-a20f-4265-82c0-948590c74311/Ubiflux-Vigor-W325-installatiehandleiding-versie-12-2018-NL.PDF\n\nWhen looking at the PDF, pay attention to the hex and decimal values. In the documentation, they are sometimes hex, sometimes decimal.\n\n## Hardware ##\n\n### Dongle ###\nSearch for ```CH340 USB to RS485 485 Converter Adapter Module``` Looks like:\n\n![Black Dongle](https://i.ebayimg.com/images/g/Fw0AAOSw8G1d71s5/s-l640.jpg)\n\nor\n\n![Blue Dongle](https://i.ebayimg.com/images/g/Nx4AAOSwpAhgMkTw/s-l640.jpg)\n\nFor me, this blue one did not work, but I might got a defective one.\n\n### Wall unit ###\n\nUbbink 0888030 - digital control panel Air Control\n\n![Vigor](https://www.my-electro.be/image/cache/catalog/products/ventilators/accessories/UBBINK-0888030-Aircontrol-Brink-klokbediening-Vigor-400x400w.jpeg)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/asillye/pyubbink",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyubbink",
    "package_url": "https://pypi.org/project/pyubbink/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pyubbink/",
    "project_urls": {
      "Homepage": "https://github.com/asillye/pyubbink"
    },
    "release_url": "https://pypi.org/project/pyubbink/0.1/",
    "requires_dist": [
      "pymodbus"
    ],
    "requires_python": "",
    "summary": "Python interface for Ubbink Ubiflux Vigor ventillation",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10520699,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e461d627beecb731114fd3813cf2563008a03299c1399c26ea6c504a489294a",
          "md5": "a9d777b91b4880159f0bc1703f1ccd5f",
          "sha256": "b36a6646737d25e4865b2b45c71f3efaef95be984b0667de2c17744d76f71b85"
        },
        "downloads": -1,
        "filename": "pyubbink-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9d777b91b4880159f0bc1703f1ccd5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7026,
        "upload_time": "2021-05-31T17:49:30",
        "upload_time_iso_8601": "2021-05-31T17:49:30.118310Z",
        "url": "https://files.pythonhosted.org/packages/7e/46/1d627beecb731114fd3813cf2563008a03299c1399c26ea6c504a489294a/pyubbink-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5a32b4761e3a07d145a53c179f152ce685e28cadfe0d4f2d9131cee67bde0f9",
          "md5": "1fb99a439f7bd9d362e01dcee3e2d155",
          "sha256": "9af4bf4fbb187efd5141574af1e49084b715c846a5c71a903ade0631eae6ee8b"
        },
        "downloads": -1,
        "filename": "pyubbink-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1fb99a439f7bd9d362e01dcee3e2d155",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7443,
        "upload_time": "2021-05-31T17:49:31",
        "upload_time_iso_8601": "2021-05-31T17:49:31.510611Z",
        "url": "https://files.pythonhosted.org/packages/f5/a3/2b4761e3a07d145a53c179f152ce685e28cadfe0d4f2d9131cee67bde0f9/pyubbink-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e461d627beecb731114fd3813cf2563008a03299c1399c26ea6c504a489294a",
        "md5": "a9d777b91b4880159f0bc1703f1ccd5f",
        "sha256": "b36a6646737d25e4865b2b45c71f3efaef95be984b0667de2c17744d76f71b85"
      },
      "downloads": -1,
      "filename": "pyubbink-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a9d777b91b4880159f0bc1703f1ccd5f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7026,
      "upload_time": "2021-05-31T17:49:30",
      "upload_time_iso_8601": "2021-05-31T17:49:30.118310Z",
      "url": "https://files.pythonhosted.org/packages/7e/46/1d627beecb731114fd3813cf2563008a03299c1399c26ea6c504a489294a/pyubbink-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5a32b4761e3a07d145a53c179f152ce685e28cadfe0d4f2d9131cee67bde0f9",
        "md5": "1fb99a439f7bd9d362e01dcee3e2d155",
        "sha256": "9af4bf4fbb187efd5141574af1e49084b715c846a5c71a903ade0631eae6ee8b"
      },
      "downloads": -1,
      "filename": "pyubbink-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1fb99a439f7bd9d362e01dcee3e2d155",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7443,
      "upload_time": "2021-05-31T17:49:31",
      "upload_time_iso_8601": "2021-05-31T17:49:31.510611Z",
      "url": "https://files.pythonhosted.org/packages/f5/a3/2b4761e3a07d145a53c179f152ce685e28cadfe0d4f2d9131cee67bde0f9/pyubbink-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}