{
  "info": {
    "author": "Brian Neal",
    "author_email": "bgneal@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Other Audience",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Communications",
      "Topic :: Security",
      "Topic :: Security :: Cryptography",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "=========\nPy-Enigma\n=========\nA historically accurate Enigma Machine library written in Python 3\n------------------------------------------------------------------\n\n:Author: Brian Neal <bgneal@gmail.com>\n:Version: 0.1\n:Date: June 5, 2012\n:Home Page: https://bitbucket.org/bgneal/enigma/\n:License: MIT License (see LICENSE.txt)\n:Documentation: http://py-enigma.readthedocs.org/\n:Support: https://bitbucket.org/bgneal/enigma/issues\n\n\nOverview\n--------\n\n**Py-Enigma** is a Python 3 library for simulating the `Enigma machines`_ used\nby the German armed forces (Wehrmacht) during World War 2. Py-Enigma makes it\npossible to both encrypt and decrypt messages that can be sent to, or received\nfrom, actual Enigma machines used by the German army (Heer), air force\n(Luftwaffe), and navy (Kriegsmarine).\n\nIt is my hope that library will be useful to Enigma enthusiasts, historians, and\nstudents interested in cryptography.\n\nPy-Enigma strives to be Pythonic, easy to use, comes with unit tests, and\ndocumentation.\n\n\nScope\n-----\n\nThe current scope of Py-Enigma is to simulate Wehrmacht Enigma machines.\nSimulation of other Enigmas, such as the various commercial, railroad, foreign,\nand Abwher (Military Intelligence) models may come later if there is enough\ninterest and data available.\n\nCurrently, Py-Enigma can simulate the 3 and 4 rotor Enigma machines used by the\nGerman army, navy, and air force.\n\n\nQuick Example\n-------------\n\nThis example shows how the library can be used to decode a message using the\nprocedure employed by the German army::\n   \n   from enigma.machine import EnigmaMachine\n\n   # setup machine according to specs from a daily key sheet:\n\n   machine = EnigmaMachine.from_key_sheet(\n          rotors='II IV V',\n          reflector='B',\n          ring_settings=[1, 20, 11],\n          plugboard_settings='AV BS CG DL FU HZ IN KM OW RX')\n\n   # set machine initial starting position\n   machine.set_display('WXC')\n\n   # decrypt the message key\n   msg_key = machine.process_text('KCH')\n\n   # decrypt the cipher text with the unencrypted message key\n   machine.set_display(msg_key)\n\n   ciphertext = 'NIBLFMYMLLUFWCASCSSNVHAZ'\n   plaintext = machine.process_text(ciphertext)\n\n   print(plaintext)\n\nThis program prints::\n\n   THEXRUSSIANSXAREXCOMINGX\n\nPy-Enigma also includes a command-line application for processing messages.\nAssuming you have a proper key file that contains the same initial settings as\nthe code above, the above example can be performed on the command-line::\n\n   $ pyenigma.py --key-file=keys.txt --start=WXC --text='KCH'\n   BLA\n   $ pyenigma.py --key-file=keys.txt --start=BLA --text='NIBLFMYMLLUFWCASCSSNVHAZ'\n   THEXRUSSIANSXAREXCOMINGX\n\nThe format of the key file can be found in the documentation.\n\n\nRequirements\n------------\n\nPy-Enigma is written in Python_, specifically Python 3.2. It has no other\nrequirements or dependencies.\n\n\nInstallation\n------------\n\nPy-Enigma is available on the `Python Package Index`_ (PyPI). You can install it\nusing pip_::\n\n   $ pip install py-enigma             # install\n   $ pip install --upgrade py-enigma   # upgrade\n\nYou may also download a tarball or .zip file of the latest code using the \"get\nsource\" link on the `Py-Enigma Bitbucket page`_. Alternatively if you use\nMercurial_, you can clone the repository with the following command::\n\n   $ hg clone https://bitbucket.org/bgneal/enigma\n\nIf you did not use pip, you can install with this command::\n\n   $ python setup.py install\n\n\nDocumentation\n-------------\n\nThe latest documentation is available at `Read the Docs\n<http://readthedocs.org/projects/py-enigma/>`_. There you can `browse the\ndocumentation online <http://readthedocs.org/docs/py-enigma/en/latest/>`_, or\n`download it in a variety of formats\n<http://readthedocs.org/projects/py-enigma/downloads/>`_.\n\nSources for the documentation are also included in Sphinx_ format. If you\ninstall Sphinx you can generate the documentation in several output formats.\n\n\nSupport\n-------\n\nSupport is provided at the `issue tracker`_ at the `Py-Enigma Bitbucket page`_.\nIf you have general questions or comments, please feel free to email me (address\nat the top of this file). \n\nAnd please, if you use Py-Enigma for anything, even if it is just learning,\nplease let me know!\n\n\nAcknowledgements & References\n-----------------------------\n\nThis software would not have been possible without the thorough and detailed\ndescriptions of the Enigma machine on Dirk Rijmenants' incredible `Cipher\nMachines and Cryptology website`_. In particular, his `Technical Details of the\nEnigma Machine`_ page was a gold mine of information.\n\nDirk has also written an `Enigma simulator`_ in Visual Basic. Although I did not\nlook at his source code, I did use his simulator to check the operation of\nPy-Enigma.\n\nI would also like to recommend the photos and video at Dr. Thomas B. Perera's\n`Enigma Museum`_.\n\nAnother good website is `The Enigma and the Bombe`_ by Graham Ellsbury.\n\nA nice video which shows the basic components and operation of the Enigma\nMachine is on YouTube: `Nadia Baker & Enigma demo`_.\n\n\n.. _Enigma machines: http://en.wikipedia.org/wiki/Enigma_machine\n.. _Python: http://www.python.org\n.. _Python Package Index: http://pypi.python.org/pypi/py-enigma/\n.. _pip: http://pip.openplans.org/\n.. _Py-Enigma Bitbucket page: https://bitbucket.org/bgneal/enigma\n.. _Mercurial: http://mercurial.selenic.com/\n.. _Sphinx: http://sphinx.pocoo.org/\n.. _issue tracker: https://bitbucket.org/bgneal/enigma/issues\n.. _Cipher Machines and Cryptology website: http://users.telenet.be/d.rijmenants/index.htm\n.. _Technical Details of the Enigma Machine: http://users.telenet.be/d.rijmenants/en/enigmatech.htm\n.. _Enigma simulator: http://users.telenet.be/d.rijmenants/en/enigmasim.htm\n.. _Enigma Museum: http://w1tp.com/enigma/\n.. _The Enigma and the Bombe: http://www.ellsbury.com/enigmabombe.htm\n.. _Nadia Baker & Enigma demo: http://youtu.be/HBHYAzuVeWc",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/bgneal/enigma/",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "py-enigma",
    "package_url": "https://pypi.org/project/py-enigma/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/py-enigma/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/bgneal/enigma/"
    },
    "release_url": "https://pypi.org/project/py-enigma/0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A historically accurate Enigma machine simulation library.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 705143,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "914e44327ad4a5960de12d86d39e1797f3ab67396a17d82182e8fc1b5ef347e5",
          "md5": "216f3e9ee49aab981f0f6f365ca21729",
          "sha256": "d564ea5e7000e86568b148a0086e6d93e4b36b2d9629bcb48c6014cba68b73f9"
        },
        "downloads": -1,
        "filename": "py-enigma-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "216f3e9ee49aab981f0f6f365ca21729",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36969,
        "upload_time": "2012-06-06T02:29:20",
        "upload_time_iso_8601": "2012-06-06T02:29:20.281125Z",
        "url": "https://files.pythonhosted.org/packages/91/4e/44327ad4a5960de12d86d39e1797f3ab67396a17d82182e8fc1b5ef347e5/py-enigma-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "914e44327ad4a5960de12d86d39e1797f3ab67396a17d82182e8fc1b5ef347e5",
        "md5": "216f3e9ee49aab981f0f6f365ca21729",
        "sha256": "d564ea5e7000e86568b148a0086e6d93e4b36b2d9629bcb48c6014cba68b73f9"
      },
      "downloads": -1,
      "filename": "py-enigma-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "216f3e9ee49aab981f0f6f365ca21729",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36969,
      "upload_time": "2012-06-06T02:29:20",
      "upload_time_iso_8601": "2012-06-06T02:29:20.281125Z",
      "url": "https://files.pythonhosted.org/packages/91/4e/44327ad4a5960de12d86d39e1797f3ab67396a17d82182e8fc1b5ef347e5/py-enigma-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}