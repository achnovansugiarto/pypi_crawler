{
  "info": {
    "author": "Scott C. Lowe",
    "author_email": "scottclowe@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "Pytorch Logit Logic\n===================\n\nA pytorch extension which provides functions and classes for logit-space operators\nequivalent to probabilistic Boolean logic-gates AND, OR, and XNOR for independent probabilities.\n\nThis provides the activation functions used in our paper:\n\n    SC Lowe, R Earle, J d'Eon, T Trappenberg, S Oore (2022). Logical Activation Functions: Logit-space equivalents of Probabilistic Boolean Operators. In *Advances in Neural Information Processing Systems*, volume 36.\n    doi: |nbsp| `10.48550/arxiv.2110.11940 <doi_>`_.\n\n.. _doi: https://www.doi.org/10.48550/arxiv.2110.11940\n\n\nFor your convenience, we provide a copy of this citation in `bibtex`_ format.\n\n.. _bibtex: https://raw.githubusercontent.com/DalhousieAI/pytorch-logit-logic/master/CITATION.bib\n\n\nExample usage:\n\n.. code:: python\n\n    from pytorch_logit_logic import actfun_name2factory\n    from torch import nn\n\n\n    class MLP(nn.Module):\n        \"\"\"\n        A multi-layer perceptron which supports higher-dimensional activations.\n\n        Parameters\n        ----------\n        in_channels : int\n            Number of input channels.\n        out_channels : int\n            Number of output channels.\n        n_layer : int, default=1\n            Number of hidden layers.\n        hidden_width : int, optional\n            Pre-activation width. Default: same as ``in_channels``.\n            Note that the actual pre-act width used may differ by rounding to\n            the nearest integer that is divisible by the activation function's\n            divisor.\n        actfun : str, default=\"ReLU\"\n            Name of activation function to use.\n        actfun_k : int, optional\n            Dimensionality of the activation function. Default is the lowest\n            ``k`` that the activation function supports, i.e. ``1`` for regular\n            1D activation functions like ReLU, and ``2`` for GLU, MaxOut, and\n            NAIL_OR.\n        \"\"\"\n\n        def __init__(\n            self,\n            in_channels,\n            out_channels,\n            n_layer=1,\n            hidden_width=None,\n            actfun=\"ReLU\",\n            actfun_k=None,\n        ):\n            super().__init__()\n\n            # Create a factory that generates objects that perform this activation\n            actfun_factory = actfun_name2factory(actfun, k=actfun_k)\n            # Get the divisor and space reduction factors for this activation\n            # function. The pre-act needs to be divisible by the divisor, and\n            # the activation will change the channel dimension by feature_factor.\n            _actfun = actfun_factory()\n            divisor = getattr(_actfun, \"k\", 1)\n            feature_factor = getattr(_actfun, \"feature_factor\", 1)\n\n            if hidden_width is None:\n                hidden_width = in_channels\n\n            # Ensure the hidden width is divisible by the divisor\n            hidden_width = int(int(round(hidden_width / divisor)) * divisor)\n\n            layers = []\n            n_current = in_channels\n            for i_layer in range(0, n_layer):\n                layer = []\n                layer.append(nn.Linear(n_current, hidden_width))\n                n_current = hidden_width\n                layer.append(actfun_factory())\n                n_current = int(round(n_current * feature_factor))\n                layers.append(nn.Sequential(*layer))\n            self.layers = nn.Sequential(*layers)\n            self.classifier = nn.Linear(n_current, out_channels)\n\n        def forward(self, x):\n            x = self.layers(x)\n            x = self.classifier(x)\n            return x\n\n\n    model = MLP(\n        in_channels=512,\n        out_channels=10,\n        n_layer=2,\n        actfun=\"nail_or\",\n    )\n\n\n\n.. |nbsp| unicode:: 0xA0\n   :trim:\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DalhousieAI/pytorch-logit-logic",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytorch-logit-logic",
    "package_url": "https://pypi.org/project/pytorch-logit-logic/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytorch-logit-logic/",
    "project_urls": {
      "Homepage": "https://github.com/DalhousieAI/pytorch-logit-logic"
    },
    "release_url": "https://pypi.org/project/pytorch-logit-logic/1.0.0/",
    "requires_dist": [
      "torch",
      "black (==22.10.0) ; extra == 'all'",
      "identify (>=1.4.20) ; extra == 'all'",
      "myst-parser ; extra == 'all'",
      "pre-commit ; extra == 'all'",
      "pypandoc (>=1.6.3) ; extra == 'all'",
      "sphinx-autobuild ; extra == 'all'",
      "sphinx (>=3.5.4) ; extra == 'all'",
      "sphinx-book-theme ; extra == 'all'",
      "watchdog (<1.0.0) ; (python_version < \"3.6\") and extra == 'all'",
      "readthedocs-sphinx-search ; (python_version >= \"3.6\") and extra == 'all'",
      "black (==22.10.0) ; extra == 'dev'",
      "identify (>=1.4.20) ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "myst-parser ; extra == 'docs'",
      "pypandoc (>=1.6.3) ; extra == 'docs'",
      "sphinx (>=3.5.4) ; extra == 'docs'",
      "sphinx-autobuild ; extra == 'docs'",
      "sphinx-book-theme ; extra == 'docs'",
      "watchdog (<1.0.0) ; (python_version < \"3.6\") and extra == 'docs'",
      "readthedocs-sphinx-search ; (python_version >= \"3.6\") and extra == 'docs'"
    ],
    "requires_python": ">=3.6",
    "summary": "Logit-space logical activation functions for pytorch",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15931643,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a38ac55c73b36c83d71344e7c56a97ab0b6c6ecf448a905fa29fed087c19836",
          "md5": "f008cc768e6f9359710285ff6118811f",
          "sha256": "bac30deb5342f82a7050682b38c331f3058b654e157e2e62de3ca65bbb3b8595"
        },
        "downloads": -1,
        "filename": "pytorch_logit_logic-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f008cc768e6f9359710285ff6118811f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 8430,
        "upload_time": "2022-11-29T18:43:13",
        "upload_time_iso_8601": "2022-11-29T18:43:13.706832Z",
        "url": "https://files.pythonhosted.org/packages/4a/38/ac55c73b36c83d71344e7c56a97ab0b6c6ecf448a905fa29fed087c19836/pytorch_logit_logic-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11ba1ffeeaeebb05dc1674c0b82a58fdd001e423e75b9a7ff2dc3495c4d018ee",
          "md5": "df7c73b2cb1cc62c459e7e8368be6fe8",
          "sha256": "ba8f210f51bdba556c87f4b4f27877c01be8495d370e0939b57a9acaa453a314"
        },
        "downloads": -1,
        "filename": "pytorch-logit-logic-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "df7c73b2cb1cc62c459e7e8368be6fe8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11719,
        "upload_time": "2022-11-29T18:43:16",
        "upload_time_iso_8601": "2022-11-29T18:43:16.039568Z",
        "url": "https://files.pythonhosted.org/packages/11/ba/1ffeeaeebb05dc1674c0b82a58fdd001e423e75b9a7ff2dc3495c4d018ee/pytorch-logit-logic-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a38ac55c73b36c83d71344e7c56a97ab0b6c6ecf448a905fa29fed087c19836",
        "md5": "f008cc768e6f9359710285ff6118811f",
        "sha256": "bac30deb5342f82a7050682b38c331f3058b654e157e2e62de3ca65bbb3b8595"
      },
      "downloads": -1,
      "filename": "pytorch_logit_logic-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f008cc768e6f9359710285ff6118811f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 8430,
      "upload_time": "2022-11-29T18:43:13",
      "upload_time_iso_8601": "2022-11-29T18:43:13.706832Z",
      "url": "https://files.pythonhosted.org/packages/4a/38/ac55c73b36c83d71344e7c56a97ab0b6c6ecf448a905fa29fed087c19836/pytorch_logit_logic-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11ba1ffeeaeebb05dc1674c0b82a58fdd001e423e75b9a7ff2dc3495c4d018ee",
        "md5": "df7c73b2cb1cc62c459e7e8368be6fe8",
        "sha256": "ba8f210f51bdba556c87f4b4f27877c01be8495d370e0939b57a9acaa453a314"
      },
      "downloads": -1,
      "filename": "pytorch-logit-logic-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "df7c73b2cb1cc62c459e7e8368be6fe8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11719,
      "upload_time": "2022-11-29T18:43:16",
      "upload_time_iso_8601": "2022-11-29T18:43:16.039568Z",
      "url": "https://files.pythonhosted.org/packages/11/ba/1ffeeaeebb05dc1674c0b82a58fdd001e423e75b9a7ff2dc3495c4d018ee/pytorch-logit-logic-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}