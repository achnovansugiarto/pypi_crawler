{
  "info": {
    "author": "Mahmudul Hahan Tonmoy",
    "author_email": "playerandgamertonmoy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)\r\n\r\n\r\n# Toncalculator\r\nIt is a simple calulator for addition, subtraction, multiplication,division, squire, to the power, sqire root, log, factorial, sin, cos, tan, cot, sec, cosec, nCr etc.\r\niThere are many mathmatical conversions.\r\n## How To Use\r\n### Installation:\r\n**Firstly** you need to install the [```Toncalculator```](https://pypi.org/project/Toncalculator/) module by **```pip install Toncalculator```** command.\r\nThen you need to make a `.py` file or open python interpreter. **Finally** you can write you code.\r\n### Example\r\n```python\r\nimport toncalculator\r\n\r\ntoncalculator.add(2,6)\r\n\r\n```\r\n## Codes:\r\n## Addition:\r\n``` add() ``` method is uaed to add two numbers ```add(x,y)``` the function needs two compulsoy parameter. \r\n#### **Example:**\r\n```python\r\nresult(add(1,2))\r\n\r\nOutput: 3\r\n```\r\n## Subtraction:\r\n``` sub() ``` method is used to subtract 1st parameter by 2nd parameter. \r\n#### **Example:** \r\n```python\r\nresult(sub(2,1))\r\n\r\nOutput : 1  \r\n```\r\n## Multiplication:\r\n``` mul() ``` methed is used to multiply two numberas.\r\n#### **Example:** \r\n```python\r\nresult(mul(2,3))\r\n\r\nOutput : 6\r\n```\r\n## Division:\r\n``` div() ``` method is used to divie 1st number by 2nd number.\r\n#### **Example:** \r\n```python\r\nresult(dev(10,2))\r\n\r\nOutput : 5\r\n```\r\n## Squre:\r\n``` square() ``` method is used to squire any numbers ```\r\n#### **Example:** \r\n```python\r\nresult(square(2))\r\n\r\nOutput : 4\r\n```\r\n## To The Power:\r\n``` power() ``` method is used as 2nd parameter to the power of 1st parameter.\r\n#### **Example:** \r\n```python\r\nresult(power(2,4))\r\n\r\nOutput : 16\r\n```\r\n## Square Root:\r\n``` sqroot() ``` method is used to square root a number.\r\n#### **Example:** \r\n```python\r\nresult(sqroot(16))\r\n\r\nOutput : 4    \r\n```\r\n## Log:\r\n``` log() ``` method returns the natural logarithm of a number, or the logarithm of number to base.\r\n### Syntx:\r\n```python\r\nlog(x, base)\r\n```\r\n### Parameter Values\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. Specifies the value to calculate the logarithm for. If the value is 0 or a negative number, it returns a ValueError. If the value is not a number, it returns a TypeError |\r\n| base | Optional. The logarithmic base to use. Default is 'e' |\r\n#### Example:\r\n```python\r\nresult(log(10))\r\n\r\nOutput : 2.302585..............\r\n```\r\n## Factorial:\r\nThe `factorial()` method returns the factorial of a number.\r\n\r\n**Note:** This method only accepts positive integers.\r\n\r\nThe factorial of a number is the sum of the multiplication, of all the whole numbers, from our specified number down to 1. For example, the factorial of 6 would be 6 x 5 x 4 x 3 x 2 x 1 = 720\r\n\r\n### Syntx:\r\n```python\r\nfactorial(x)\r\n```\r\n\r\n### Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. A positive integer. If the number is negative, or not an integer, it returns a ValueError. If the value is not a number, it returns a TypeError |\r\n\r\n#### Example:\r\n```python\r\nresult(factorial(3)):\r\n\r\nOutput : 6\r\n```\r\n\r\n## Sin:\r\n`sin()` method returns the sine of a number.\r\n\r\n**Note:** To find the sine of degrees, it must first be converted into radians with the `degTored()` method (see example below).\r\n\r\n## Syntx:\r\n```python\r\nsin(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. The number to find the sine of. If the value is not a number, it returns a TypeError |\r\n\r\n#### Example:\r\n``` python\r\n# It returns normally sin of 0 redian \r\nresult(sin(0))\r\n# sin() returns the sin of redian.\r\n# degTored() convers dgree to redian \r\nresult(sin(degTored(90)))\r\n\r\nOutput : 0 \r\nOutput : 1\r\n```\r\n\r\n## Cos:\r\n`cos()` method returns the cosine of a number.\r\n\r\n**Note:** To find the cosine of degrees, it must first be converted into radians with the `degTored()` method (see example below).\r\n\r\n## Syntx:\r\n```python\r\ncos(x):\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. The number to find the sine of. If the value is not a number, it returns a TypeError |\r\n\r\n#### Example:\r\n``` python\r\n# It returns normally cosin of 0 redian \r\nresult(cos(0))\r\n# cos() returns the cosin of redian.\r\n# degTored() convers dgree to redian \r\nresult(cos(degTored(180)))\r\n\r\nOutput : 1\r\nOutput : -1\r\n```\r\n\r\n## Tan:\r\n`tan()` method returns the tangent of a number.\r\n\r\n**Note:** To find the tan of degrees, it must first be converted into radians with the `degTored()` method (see example below).\r\n\r\n## Syntx:\r\n```python\r\ntan(x):\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. The number to find the tangent of. If the value is not a number, it returns a TypeError |\r\n\r\n#### Example:\r\n``` python\r\n# It returns normally tangent of 0 redian \r\nresult(tan(0))\r\n# tan() returns the cosin of redian.\r\n# degTored() convers dgree to redian \r\nresult(tan(degTored(10)))\r\n\r\nOutput : 0\r\nOutput : 0.176326......\r\n```\r\n\r\n## Cot:\r\n`cot()` method returns the cotangent of a number.\r\n\r\n**Note:** To find the cotangent of degrees, it must first be converted into radians with the `degTored()` method (see example below).\r\n\r\n## Syntx:\r\n```python\r\ncot(x)\r\n```\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. The number to find the cotangent of. If the value is not a number, it returns a TypeError |\r\n\r\n#### Example:\r\n``` python\r\n# It returns normally cotangent of 0 redian \r\nresult(cot(0))\r\n# cot() returns the cotangent of redian.\r\n# degTored() convers dgree to redian \r\nresult(cot(degTored(10)))\r\n\r\nOutput : Infinity\r\nOutput : 5.6712818196......\r\n```\r\n## Sec: \r\n`sec()` method returns the secant of a number.\r\n\r\n**Note:** To find the secant of degrees, it must first be converted into radians with the `degTored()` method (see example below).\r\n\r\n## Syntx:\r\n```python\r\nsec(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. The number to find the secant of. If the value is not a number, it returns a TypeError |\r\n\r\n#### Example:\r\n``` python\r\n# It returns normally secant of 0 redian \r\nresult(sec(0))\r\n# sec() returns the secant of redian.\r\n# degTored() convers dgree to redian \r\nresult(sec(degTored(180)))\r\n\r\nOutput : 1\r\nOutput : -1\r\n```\r\n\r\n## Cosec: \r\n`cosec()` method returns the secant of a number.\r\n\r\n**Note:** To find the secant of degrees, it must first be converted into radians with the `degTored()` method (see example below).\r\n\r\n## Syntx:\r\n```python\r\nsec(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. The number to find the cosecant of. If the value is not a number, it returns a TypeError |\r\n\r\n\r\n#### Example:\r\n``` python\r\n# It returns normally cosecant of 0 redian \r\nresult(sec(0))\r\n# cosec() returns the cosecant of redian.\r\n# degTored() convers dgree to redian \r\nresult(cosec(degTored(90)))\r\n\r\nOutput : Infinity\r\nOutput : 0\r\n\r\n```\r\n\r\n## nCr:\r\n`nCr()` method returns the nCr.\r\n\r\n**Note:** return the combination is the method of selection of 'r' objects from \r\na set of 'n' objects where the order of selection does not matter.\r\n\r\n## Syntx:\r\n```python\r\nnCr(n,r)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| n | Required. Type integer |\r\n| r | Required. Type integer |\r\n\r\n```python\r\nresult(nCr(9,3))\r\n\r\nOutput : 84\r\n```\r\n# Mathmathical conversion\r\n\r\n## Angle Conversions ##\r\n\r\n## Dgree To Radian\r\n\r\n`degTored()` method returns dgree to radian.\r\n\r\n## Syntx\r\n```python\r\ndegTored(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` dgree |\r\n\r\n## Example\r\n```python \r\nresult(degTored(180))\r\n \r\nOutput : 3.1416   \r\n```\r\n\r\n## Radian To Dgree \r\n\r\n`redTodeg()` method returns radian to dgree.\r\n\r\n## Syntx\r\n```python\r\nredTodeg(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` radian |\r\n\r\n## Example\r\n```python \r\nresult(redTodeg(1))\r\n \r\nOutput : 57.297795\r\n```\r\n\r\n## Dgree To Minute\r\n\r\n`degTomin()` method returns dgree to minute.\r\n\r\n## Syntx\r\n```python\r\ndegTomin(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` dgree |\r\n\r\n## Example\r\n```python\r\nresult(degTomin(1))\r\n\r\nOutput : 60\r\n```\r\n\r\n## Minute to Degree\r\n\r\n`minTodeg()` method returns minute to dgree.\r\n\r\n## Syntx\r\n```python\r\nminTodeg(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` minute |\r\n\r\n## Example\r\n```python\r\nresult(minTodeg(60))\r\n\r\nOutput : 1\r\n```\r\n\r\n## Degree to Second\r\n\r\n`degTosec()` method returns dgree to second.\r\n\r\n## Syntx\r\n```python\r\ndegTosec(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` dgree |\r\n\r\n## Example\r\n```python\r\nresult(degTosec(1))\r\n\r\nOutput : 3600\r\n```\r\n\r\n## Second to Dgree\r\n\r\n`secTomin()` method returns second to dgree.\r\n\r\n## Syntx\r\n```python\r\nsecTodeg(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` second |\r\n\r\n## Example\r\n```python\r\nresult(secTodeg(3600))\r\n\r\nOutput : 1\r\n```\r\n\r\n## Minute to Second\r\n\r\n`minTosec()` method returns minute to second .\r\n\r\n## Syntx\r\n```python\r\nminTosec(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` minute |\r\n\r\n## Example\r\n```python\r\nresult(minTosec(1))\r\n\r\nOutput : 60\r\n```\r\n\r\n## Second To Minute\r\n\r\n`secTomin()` method returns second to minute.\r\n\r\n## Syntx\r\n```python\r\nsecTomin(x)\r\n```\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` second |\r\n\r\n## Example\r\n```python\r\nresult(secTomin(60))\r\n\r\nOutput : 1\r\n```\r\n\r\n\r\n## Length Conversions \r\n\r\n## inches to centimeters\r\n\r\n`inTocm()` method returns inches to centimeters.\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` inches |\r\n\r\n## Example\r\n```python\r\nresult(inTocm(100))\r\n\r\nOutput : 254\r\n```\r\n\r\n## centimeters to inches\r\n\r\n`cmToin()` method returns inches to centimeters.\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` centimeters |\r\n\r\n## Example\r\n```python\r\nresult(inTocm(254))\r\n\r\nOutput : 100\r\n```\r\n\r\n## feet to meters\r\n`ftTom(x)` method returns feet to meters.\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` feet |\r\n\r\n## Example\r\n```python\r\nresult(ftTom(100))\r\n\r\nOutput : 30.48\r\n```\r\n\r\n## feet to meters\r\n`mToft(x)` method returns meters to feet.\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` meters |\r\n\r\n## Example\r\n```python\r\nresult(mToft(1))\r\n\r\nOutput : 3.280839895013123\r\n```\r\n## yard to meter\r\n`mToft(x)` method returns yard to meter.\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x`  yard |\r\n\r\n## Example\r\n```python\r\nresult(ydTom(1))\r\n\r\nOutput : 0.9144\r\n```\r\n\r\n## meter to yard\r\n`mToft(x)` method returns meter to yard.\r\n\r\n## Parameter Values:\r\n| Parameter | Description |\r\n| --- | --- |\r\n| x | Required. `x` means `x` meter |\r\n\r\n## Example\r\n```python\r\nresult(ydTom(1))\r\n\r\nOutput : 1.0936132983377078\r\n```\r\n\r\n```python\r\ndef mileTokm(x):\r\n    #return x mile to kilometre\r\n    return x/0.621367\r\n```\r\n```python\r\ndef kmTomile(x):\r\n    #return x kilometre to mile\r\n    return x*0.621367\r\n```\r\n```python\r\ndef n_mileTom(x):\r\n    #return x notical mile to meter\r\n    return x*1852\r\n```\r\n```python\r\ndef mTon_mile(x):\r\n    #return x meter to notical mile\r\n    return x/1852\r\n```\r\n```python\r\ndef pcTokm(x):\r\n    #return x parsec to kilometre\r\n    return x*3.08567758128E+13\r\n```\r\n```python\r\ndef kmTopc(x):\r\n    #return x kilometre to parsec\r\n    return x/3.08567758128E+13\r\n```\r\n```python\r\n## Area Conversions ##\r\ndef acreTomsq(x):\r\n    #return x acre to squire meter\r\n    return x/0.000247105\r\n```\r\n```python\r\ndef msqToacer(x):\r\n    #return x squire meter to acre \r\n    return x*0.000247105\r\n```\r\n```python\r\n## Volume Conversions ##  \r\ndef galToL(x):\r\n    #return x galon to liter you must select type here US or UK\r\n    if type == \"US\" or \"us\" or \"Us\":\r\n        return x*3.785412\r\n    elif type == \"Uk\" or \"UK\" or \"uk\":\r\n        return x*4.54609\r\n    else:\r\n        if type == None or type == \"\":\r\n            print(\"[-] Error 404 type is empty\")\r\n        else:\r\n            print(\"[-] Error you are not setected US or UK\")\r\n```\r\n```python   \r\ndef LTogal(x):\r\n    #return x liter to galon you must select type here US or UK\r\n    if type == \"US\" or \"us\" or \"Us\":\r\n        return x/3.785412\r\n    elif type == \"Uk\" or \"UK\" or \"uk\":\r\n        return x/4.54609\r\n    else:\r\n        if type == None or type == \"\":\r\n            print(\"[-] Error 404 type is empty\")\r\n        else:\r\n            print(\"[-] Error you are not setected US or UK\")\r\n```\r\n```python    \r\n## Mass Conversions ##\r\ndef ozTog(x):\r\n    #return x ounces to grams\r\n    return x*28.34952 \r\n```\r\n```python\r\ndef gTooz(x):\r\n    #return x grams to ounces   \r\n    return x/28.34952\r\n```\r\n```python\r\ndef lbTokg(x):\r\n    #return x pounds to kilograms\r\n    return x*0.45359237 \r\n```\r\n```python\r\ndef kgTolb(x):\r\n    #return x kilograms to pounds\r\n    return x/0.45359237 \r\n```\r\n```python\r\n## Velocity Conversions ##\r\ndef kmphTomps(x):\r\n    #return x kilometre/hour to meter/second\r\n    m = x*1000\r\n    s = 3600\r\n    return m/s\r\n```\r\n```python\r\ndef mpsTokmph(x):\r\n    #return x meter/second to kilometre/hour\r\n    km = x/1000\r\n    h = 1/3600\r\n    return km/h\r\n```\r\n```python\r\n## Pressure Conversions ##\r\n\r\ndef atmToPa(x):\r\n    #retunrn x atmosphere to pascal\r\n    return x*101325\r\n```\r\n```python\r\ndef PaToatm(x):\r\n    #return x pascal to atmosphere\r\n    return x/101325\r\n```\r\n```python\r\ndef mmHgToPa(x):\r\n    #return x millimetre of mercury to pascal\r\n    return x*133.322365 \r\n```\r\n```python\r\ndef PaTommHg(x):\r\n    #return x pascal to millimetre of mercury\r\n    return x/133.322365 \r\n```\r\n```python\r\n## Energy Conversions ##\r\ndef kgfToJpm(x):\r\n    #return Kilogram-force to Joule/meter \r\n    return x*9.80665 \r\n```\r\n```python\r\ndef JpmTokgf(x):\r\n    #return Joule/meter to Kilogram-force\r\n    return x/9.80665\r\n```\r\n```python\r\ndef JTocal(x):\r\n    #return Joule to Calories\r\n    return x*4.184\r\n```\r\n```python\r\ndef calToJ(x):\r\n    #return Calories to Joule\r\n    return x/4.184\r\n```\r\n```python\r\n## Power Conversions ##\r\ndef hpToKW(x):\r\n    #return Horse Power to kilowatt\r\n    KW = {\r\n        \"mechanical\": x/745.699872,\r\n        \"electrical\" : x/746,\r\n        \"metric\" : x/0.73549875\r\n    }\r\n    return KW\r\n```\r\n```python\r\ndef KWTohp(x):\r\n    #return Horse kilowatt to Power \r\n    hp = {\r\n        \"mechanical\": x/745.699872,\r\n        \"electrical\" : x/746,\r\n        \"metric\" : x/0.73549875\r\n    }\r\n    return hp\r\n```\r\n```python\r\n## Temperature Conversions ##\r\ndef FtoC(f):\r\n    #return fahrenheit to celsius\r\n    return ((f-32)*5)/9\r\n```\r\n```python\r\ndef CtoF(c):\r\n    #return celsius to fahrenheit\r\n    return ((9*c)/5)+32\r\n    \r\n```\r\n\r\n\r\nChange Log\r\n==========\r\n\r\n0.1.0 (20/06/2021)\r\n-Sixth Release\r\n\r\n### Added\r\n\r\n## New\r\n__version__() - method\r\n__info__() - method\r\n\r\n## Physics Math \r\nNew type of calculation of basic physics \r\n\r\n## Moefied \r\ngaltoL() - method\r\nLtogal() - method\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tonmoy-abc/Toncalculator",
    "keywords": "calculator,toncalculator,add,addison,subdivision,log,sin,cos,tan,coat,sce,cosec,a simple calculator,fine calculator,terminal calculator,scitific calculator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Toncalculator",
    "package_url": "https://pypi.org/project/Toncalculator/",
    "platform": "",
    "project_url": "https://pypi.org/project/Toncalculator/",
    "project_urls": {
      "Homepage": "https://github.com/Tonmoy-abc/Toncalculator"
    },
    "release_url": "https://pypi.org/project/Toncalculator/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A basic calculator",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10692897,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d090774fe5ce3996455817ca6b1034edbcb290c206586d23ed9047391722bde",
          "md5": "74166364bd34012ef26fc219d8d1f394",
          "sha256": "0c64c75b2f522647e896829d9cbecd0f7c902d12e23caecf2fb863321a81a8d2"
        },
        "downloads": -1,
        "filename": "Toncalculator-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "74166364bd34012ef26fc219d8d1f394",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4465,
        "upload_time": "2021-05-09T19:22:30",
        "upload_time_iso_8601": "2021-05-09T19:22:30.979682Z",
        "url": "https://files.pythonhosted.org/packages/5d/09/0774fe5ce3996455817ca6b1034edbcb290c206586d23ed9047391722bde/Toncalculator-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f608069e700fead762f85d8d5a9948ba4d8ce6f64beac775b69b43971a7391c6",
          "md5": "330092c4bfaaeba4c7905302935cf958",
          "sha256": "0ceafe387a7d8ef93fdfd5b3566b462886844e452f59163d3762b2b914d1da60"
        },
        "downloads": -1,
        "filename": "Toncalculator-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "330092c4bfaaeba4c7905302935cf958",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4485,
        "upload_time": "2021-05-11T07:17:10",
        "upload_time_iso_8601": "2021-05-11T07:17:10.270239Z",
        "url": "https://files.pythonhosted.org/packages/f6/08/069e700fead762f85d8d5a9948ba4d8ce6f64beac775b69b43971a7391c6/Toncalculator-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adc4dc37e097a20e6a66a1571eb91387b6693a552745d95ca8c557f10d14c178",
          "md5": "58da6a18c82b3ce8802e01caa943ba87",
          "sha256": "d7d13fe2d890696ab1373f74b4111a18ef1e345447ffdc60472a11abc9caaa0e"
        },
        "downloads": -1,
        "filename": "Toncalculator-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58da6a18c82b3ce8802e01caa943ba87",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4293,
        "upload_time": "2021-05-12T04:47:24",
        "upload_time_iso_8601": "2021-05-12T04:47:24.629599Z",
        "url": "https://files.pythonhosted.org/packages/ad/c4/dc37e097a20e6a66a1571eb91387b6693a552745d95ca8c557f10d14c178/Toncalculator-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5308cb628ce529265b7efda30704d0b081a0943de8356e3084e9e9b221f825d5",
          "md5": "3beb21c50777d6999986ee785fa8e11d",
          "sha256": "2d4a975e173a35ed97d16248e8add2876fc671e7472893db7a201b757479e5c2"
        },
        "downloads": -1,
        "filename": "Toncalculator-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3beb21c50777d6999986ee785fa8e11d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4443,
        "upload_time": "2021-05-12T04:47:30",
        "upload_time_iso_8601": "2021-05-12T04:47:30.197665Z",
        "url": "https://files.pythonhosted.org/packages/53/08/cb628ce529265b7efda30704d0b081a0943de8356e3084e9e9b221f825d5/Toncalculator-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "709c8897cd41535bb90ba00258bbce9904fcddfbcad190eec704602a11e68b45",
          "md5": "7a275a2780f95dfe7cb1a4db9696c974",
          "sha256": "ac6a46cdfc75ef724abfe4efb053d384d9ff8f7039cd61f661ad5a95a2d1cee6"
        },
        "downloads": -1,
        "filename": "Toncalculator-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7a275a2780f95dfe7cb1a4db9696c974",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4525,
        "upload_time": "2021-06-05T11:04:42",
        "upload_time_iso_8601": "2021-06-05T11:04:42.443578Z",
        "url": "https://files.pythonhosted.org/packages/70/9c/8897cd41535bb90ba00258bbce9904fcddfbcad190eec704602a11e68b45/Toncalculator-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2280c89c0a8f3c7c6a81ee582b9c015f09ab9b007eb3e4534ef47d5ae283f25",
          "md5": "5d48699f41cd9f525be676c2c793726c",
          "sha256": "089014556e58f7859f51a7966df29d44b2ff3c8ee16d6d9f60931841a8b70873"
        },
        "downloads": -1,
        "filename": "Toncalculator-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5d48699f41cd9f525be676c2c793726c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8245,
        "upload_time": "2021-06-05T14:35:38",
        "upload_time_iso_8601": "2021-06-05T14:35:38.701477Z",
        "url": "https://files.pythonhosted.org/packages/a2/28/0c89c0a8f3c7c6a81ee582b9c015f09ab9b007eb3e4534ef47d5ae283f25/Toncalculator-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02b04123bd47edf141d197570683eb2f72335eba0b368796efa8cf8f08e71368",
          "md5": "e75c0ccc791d40d4106d05e96bf66ef2",
          "sha256": "1c9899cde614733cb43648e88ef8859bfdd694c3048caf2428c9c6db1ddb2562"
        },
        "downloads": -1,
        "filename": "Toncalculator-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e75c0ccc791d40d4106d05e96bf66ef2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8827,
        "upload_time": "2021-06-18T14:51:13",
        "upload_time_iso_8601": "2021-06-18T14:51:13.606330Z",
        "url": "https://files.pythonhosted.org/packages/02/b0/4123bd47edf141d197570683eb2f72335eba0b368796efa8cf8f08e71368/Toncalculator-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0101725309369e1f218af30d6f2877ac7992e3aa20d366ce292be4f542620a49",
          "md5": "485c0ba3c88b8b7ff9b828de27a54f93",
          "sha256": "0a1c3c18af30f647e1013c380b4863f6a3b403d605daf2a5172794054f4f728d"
        },
        "downloads": -1,
        "filename": "Toncalculator-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "485c0ba3c88b8b7ff9b828de27a54f93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8806,
        "upload_time": "2021-06-18T14:56:32",
        "upload_time_iso_8601": "2021-06-18T14:56:32.554557Z",
        "url": "https://files.pythonhosted.org/packages/01/01/725309369e1f218af30d6f2877ac7992e3aa20d366ce292be4f542620a49/Toncalculator-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fe67bf7d9ba48087fef8e49d7dd65b2e475ec1b203f2ed18dc0f0a03ed2dbf4",
          "md5": "c20a25e8a132d605f46735eb3a165144",
          "sha256": "9b75c7d1b22cc894ba9c994888bc15e452b0abc1e2bb0719d7f0d5c88790890d"
        },
        "downloads": -1,
        "filename": "Toncalculator-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "c20a25e8a132d605f46735eb3a165144",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9432,
        "upload_time": "2021-06-18T15:43:53",
        "upload_time_iso_8601": "2021-06-18T15:43:53.141866Z",
        "url": "https://files.pythonhosted.org/packages/6f/e6/7bf7d9ba48087fef8e49d7dd65b2e475ec1b203f2ed18dc0f0a03ed2dbf4/Toncalculator-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3de42fc381c5c8c590d57f823190cf126aac0a1a7cdabf3555f42e87b4888107",
          "md5": "d2b4a845d99242d983a996d627c7981c",
          "sha256": "04932fe3ca0006d2a2ace824b79a110d4c2981d0ccd685e04d0996bb89f0180e"
        },
        "downloads": -1,
        "filename": "Toncalculator-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d2b4a845d99242d983a996d627c7981c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8775,
        "upload_time": "2021-06-20T04:32:23",
        "upload_time_iso_8601": "2021-06-20T04:32:23.057839Z",
        "url": "https://files.pythonhosted.org/packages/3d/e4/2fc381c5c8c590d57f823190cf126aac0a1a7cdabf3555f42e87b4888107/Toncalculator-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3de42fc381c5c8c590d57f823190cf126aac0a1a7cdabf3555f42e87b4888107",
        "md5": "d2b4a845d99242d983a996d627c7981c",
        "sha256": "04932fe3ca0006d2a2ace824b79a110d4c2981d0ccd685e04d0996bb89f0180e"
      },
      "downloads": -1,
      "filename": "Toncalculator-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d2b4a845d99242d983a996d627c7981c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8775,
      "upload_time": "2021-06-20T04:32:23",
      "upload_time_iso_8601": "2021-06-20T04:32:23.057839Z",
      "url": "https://files.pythonhosted.org/packages/3d/e4/2fc381c5c8c590d57f823190cf126aac0a1a7cdabf3555f42e87b4888107/Toncalculator-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}