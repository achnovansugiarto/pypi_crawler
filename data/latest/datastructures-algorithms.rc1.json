{
  "info": {
    "author": "Ayush Singh",
    "author_email": "ayushsingh5941@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3"
    ],
    "description": "This library is created to understand and implement Data Structures and Algorithms in python. \nSince most courses on data structure and algorithm uses programming lanugages such as c and c++ which contains pointers  \nand python does not so to implement data structures and algorithms in python remains quite unintiutive to most of the students.\nThis library is also useful to implement some custom algorithm without worrying about implementation of fundamental data structures\nand run of the mill algorithms.\n____________________________________________________________________________________________________________________________________\nDocumentation\n____________________________________________________________________________________________________________________________________\n\nARRAYS\nArrays implementation here is to mimic static arrays used in c and c++ along with implementation some of the methods are also\navailable such as insertion, deletion, access, update and lenght.\n\n# Creating a list using class Lists\nlist1 = Lists(size=size) \n\n# Inserting 5 elements in array\nlist1.insert(element=3)\nlist1.insert(element=7)\nlist1.insert(element=9)\nlist1.insert(element=2)\nlist1.insert(element=1)\n\n# Inserting an element at specified location\nlist1.insert(element=5, index=2)\n\n# Deleting from index of the array\nlist1.delete(2)\n\n# Deleting from end of the array\nlist1.delete()\n\n# update index \nlist1.update(element=5, index=4)\n\n# accesing a single element\nlist1.access(1)\n\n# accesing all elements\n# accesing a single element\nlist1.access()\n=============================================================================================================================\n\nLINKED LIST\nSince python does not contain pointers implementation of linked list is not trivial hence it confuses students the most.\nHere linked lists is similar to c implementation. It also contains some generic methods for Linked lists such as insertion,\ndeletion, access and length.\n\n# Initializing a linked list\nhead = linkedList()\n\n# Inserting some elements in linked list\nhead.insert(10)\nhead.insert(5)\nhead.insert(6)\n\n# Inserting elements at end of list\nhead.insert(4, -1)\n\n# Displaying all elements of the list\nhead.access()\n\n# Number of elements in the list\nhead.length()\n=============================================================================================================================\n\nQUEUE\nQueue is one of the most basic and important data structure in computer science and its implementation is quite straight forward\nbut time consuming this library intends to cut focus from making queues form scratch instead make algorithms from it.\nIt comes with some most useful methods such as head, tail, enqueue, dequeue and access.\n\n# Initializing a queue\nq = Queue()\n\n# Inserting some elements in queue\nq.enqueue(50)\nq.enqueue(59)\nq.enqueue(41)\nq.enqueue(5)\nq.enqueue(1)\n\n# Deleting an element\nq.dequeue()\n\n# accessing by index\nq.access(2)\n\n# accessing all elements\nq.access()\n\n# Position of head\nq.head()\n\n# Position of tail\nq.tail()\n============================================================================================================================\n\nSTACK\nStack is most famous and widely used data structure and its implementation is easier than queue and even more easy in python.\nThis library poses this data structure too. Happy first in first out. This library contains push, pop, n_elements, top_element.\n\n# Initializing Stack\nstack1 = Stack()\n\n# Inserting elements in stack\nstack1.push(150)\nstack1.push(5)\nstack1.push(8)\nstack1.push(1)\n\n# deleting an element from stack\nstack1.pop()\n\n# Number of elements in stack\nstack1.n_elements()\n\n# Element at top of stack\nstack1.top_element()\n============================================================================================================================\n\nBinary Search Tree\nBinary search tree is one of most complicated data structure to understand and implementat especially in python due to lack of pointers.\nThis package tries to cover all the nuances of BST such as insertion, deletion, max element, min element, height of tree, \ntraversals such as breadth first, depth first including preorder, inorder and postorder traversala and a function to check\nwhether given tree is BST or not.\n\n# Initializing tree\ntree = BinarySearchTree()\n\n# Inserting element at root\nroot = tree.insert(6)\n\n# Inserting elemnts\nroot.insert(12)\nroot.insert(4)\n\n# Maximum value in tree\nroot.max_element()\n\n# Minimun value in tree\nroot.min_element()\n\n# height of tree\nroot.height()\n\n# Bfs traversal\nroot.bfs_traversal([root])\n\n# Pre order depth first traversal\nroot.pre_order_dfs()\n\n# Inorder traversal\nroot.in_order_dfs()\n\n# Post order traversal\nroot.post_order_dfs()\n\n# Checking whether a tree is BST or not\nroot.isBST()\n\n# Deleting value from tree\nroot.delete(8)\n============================================================================================================================\n\nSORTING ALGORITHMS\nCurrently this library contains few sorting algorithms such as insertion sort, bubble sort, merge sort and heap sort. In future\nrevision more will be added.\n\n# Instertion sort\ninsertion_sort(array)\n\n# Bubble sort\nbubble_sort(array)\n\n# Merge sort\nmerge_sort(array)\n\n# Heap sort\nheap_sort(array)\n============================================================================================================================\n\nMore algorithms and data structures in future updates.\n\nChange Log\n==========\n\n0.0.1 (5/04/2021)\n-----------------\nFirst release.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ayushsingh5941",
    "keywords": "Data Structures,Algorithms",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Datastructures-Algorithms",
    "package_url": "https://pypi.org/project/Datastructures-Algorithms/",
    "platform": "",
    "project_url": "https://pypi.org/project/Datastructures-Algorithms/",
    "project_urls": {
      "Homepage": "https://github.com/ayushsingh5941"
    },
    "release_url": "https://pypi.org/project/Datastructures-Algorithms/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Implementation of data structures and algorithms in python",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9976681,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73c46d9708720148f45d5bdca8a238c84d1510f1121350a2b1a4bf7961e69196",
          "md5": "6fdbd474cb7ce887141af495c30075cc",
          "sha256": "3e128f693452193459311870eb7d75212a51af6788ef490275dbd3c3e709ec54"
        },
        "downloads": -1,
        "filename": "Datastructures_Algorithms-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6fdbd474cb7ce887141af495c30075cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7618,
        "upload_time": "2021-04-05T12:19:39",
        "upload_time_iso_8601": "2021-04-05T12:19:39.926642Z",
        "url": "https://files.pythonhosted.org/packages/73/c4/6d9708720148f45d5bdca8a238c84d1510f1121350a2b1a4bf7961e69196/Datastructures_Algorithms-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73c46d9708720148f45d5bdca8a238c84d1510f1121350a2b1a4bf7961e69196",
        "md5": "6fdbd474cb7ce887141af495c30075cc",
        "sha256": "3e128f693452193459311870eb7d75212a51af6788ef490275dbd3c3e709ec54"
      },
      "downloads": -1,
      "filename": "Datastructures_Algorithms-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6fdbd474cb7ce887141af495c30075cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7618,
      "upload_time": "2021-04-05T12:19:39",
      "upload_time_iso_8601": "2021-04-05T12:19:39.926642Z",
      "url": "https://files.pythonhosted.org/packages/73/c4/6d9708720148f45d5bdca8a238c84d1510f1121350a2b1a4bf7961e69196/Datastructures_Algorithms-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}