{
  "info": {
    "author": "Avnish Yadav",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![image](https://user-images.githubusercontent.com/34875169/177150753-b68b0c66-3b15-4ecc-b168-1a77ebc3fc62.png)\n\n\nneuro-ml is a open source library designed to avoid writing duplicate code.\n\nYou can use new model of scikit learn without writing any code.\nModel training can be control by configuration file.\n> # <center>neuro_mf.ModelFactory</center>\n\n>class neuro_mf.ModelFactory(model_config_path:str) [source](https://github.com/avnyadav/neuro_mf/blob/main/neuro_mf/__init__.py#L33)\n\n<hr>\n\nParameters:\n```\nmodel_config_path: location of model.yaml file\n\nHow to generate configuration file\nIt is very simple.\nWe will export sample model config file in config directory\nYou can use below python to export sample configuration file.\n\n```python\nfrom neuro_mf.config import get_sample_model_config_yaml_file\n\nif __name__ == \"__main__\":\n    export_file_path=get_sample_model_config_yaml_file(export_dir=\"config\")\n\n```\nCheck your config folder\nYou will find a file name as \"model.yaml\"\n\ncontent of model.yaml\n\n```yaml\ngrid_search:\n  class: GridSearchCV\n  module: sklearn.model_selection\n  params:\n    cv: 3\n    verbose: 1\nmodel_selection:\n  module_0:\n    class: ModelClassName\n    module: module_of_model\n    params:\n      param_name1: value1\n      param_name2: value2\n    search_param_grid:\n      param_name:\n      - param_value_1\n      - param_value_2\n  \n```\nNow update the content of model.yaml file with below content for testing.\n```\ngrid_search:\n  class: GridSearchCV\n  module: sklearn.model_selection\n  params:\n    cv: 3\n    verbose: 1\nmodel_selection:\n  module_0:\n    class: RandomForestRegressor\n    module: sklearn.ensemble\n    params:\n      n_estimators: 200\n      criterion: squared_error\n    search_param_grid:\n      n_estimators:\n      - 150\n      - 200\n      - 250\n      max_depth:\n      - 2\n      - 5\n      - 6\n  module_1:\n    class: SVR\n    module: sklearn.svm\n    params:\n      kernel: rbf\n    search_param_grid:\n      kernel:\n      - poly\n      - rbf\n```\n\n\n<hr>\nAttributes:\n\n\n``config: dict \nmodel.yaml file will be available as dict in this attribute\n``\n\n`` \ngrid_search_cv_module: str \nModule of grid search cv from sklearn lib sklearn.model_selection\n``\n\n``\ngrid_search_class_name: str\n``\n\n``\ngrid_search_property_data:dict\n``\n\n``\nmodels_initialization_config: dict\n``\n\n``\ninitialized_model_list:\nAll model instance will be available in this attribute once get_initialized_model_list has been invoked on model factory object\n``\n\n``\ngrid_searched_best_model_list\nOnce grid search has been done for all model then every model with their tuned paramter will be available in this attribute\n``\n\nFew of the function return type can be inferred using \nbelow named tuple\n\n```\nInitializedModelDetail = namedtuple(\"InitializedModelDetail\",\n                                    [\"model_serial_number\", \"model\", \"param_grid_search\", \"model_name\"])\n\nGridSearchedBestModel = namedtuple(\"GridSearchedBestModel\", [\"model_serial_number\",\n                                                             \"model\",\n                                                             \"best_model\",\n                                                             \"best_parameters\",\n                                                             \"best_score\",\n                                                             ])\n\nBestModel = namedtuple(\"BestModel\", [\"model_serial_number\",\n                                     \"model\",\n                                     \"best_model\",\n                                     \"best_parameters\",\n                                     \"best_score\", ])\n\n```\n\n<hr>\nMethods:\n\n<table>\n<tr>\n<td>class_for_name(module_name, class_name)</td>\n</tr>\n\n<tr><td>execute_grid_search_operation(self, initialized_model: InitializedModelDetail, input_feature,\n                                      output_feature)</td>\n</tr>\n<tr><td>get_best_model(self, X, y, base_accuracy=0.6) -> BestModel</td>\n</tr>\n<tr><td>get_best_model_from_grid_searched_best_model_list(grid_searched_best_model_list: List[GridSearchedBestModel],\n                                                          base_accuracy=0.6\n                                                          ) -> BestModel</td>\n</tr>\n<tr><td>get_initialized_model_list(self) -> List[InitializedModelDetail]</td>\n</tr>\n\n<tr><td>initiate_best_parameter_search_for_initialized_model(self, initialized_model: InitializedModelDetail,\n                                                             input_feature,\n                                                             output_feature) -> GridSearchedBestModel</td>\n</tr>\n\n<tr><td>initiate_best_parameter_search_for_initialized_models(self,\n                                                              initialized_model_list: List[InitializedModelDetail],\n                                                              input_feature,\n                                                              output_feature) -> List[GridSearchedBestModel]</td>\n</tr>\n\n<tr><td>read_params</td>\n</tr>\n\n<tr><td>update_property_of_class</td>\n</tr>\n</table>\n\n\n\nHow to generate configuration file\nIt is very simple.\nWe will export sample model config file in config directory\nYou can use below python to export sample configuration file.\n\n```python\nfrom neuro_mf.config import get_sample_model_config_yaml_file\n\nif __name__ == \"__main__\":\n    export_file_path=get_sample_model_config_yaml_file(export_dir=\"config\")\n\n```\nCheck your config folder\nYou will find a file name as \"model.yaml\"\n\ncontent of model.yaml\n\n```yaml\ngrid_search:\n  class: GridSearchCV\n  module: sklearn.model_selection\n  params:\n    cv: 3\n    verbose: 1\nmodel_selection:\n  module_0:\n    class: ModelClassName\n    module: module_of_model\n    params:\n      param_name1: value1\n      param_name2: value2\n    search_param_grid:\n      param_name:\n      - param_value_1\n      - param_value_2\n  \n```\n\nNow update the content of model.yaml file with below content for testing.\n```yaml\ngrid_search:\n  class: GridSearchCV\n  module: sklearn.model_selection\n  params:\n    cv: 3\n    verbose: 1\nmodel_selection:\n  module_0:\n    class: RandomForestRegressor\n    module: sklearn.ensemble\n    params:\n      n_estimators: 200\n      criterion: squared_error\n    search_param_grid:\n      n_estimators:\n      - 150\n      - 200\n      - 250\n      max_depth:\n      - 2\n      - 5\n      - 6\n    module_1:\n        class: SVR\n        module: sklearn.svm\n        params:\n          kernel: rbf\n        search_param_grid:\n          kernel:\n          - poly\n          - rbf\n```\nAbove configuration file contains information about two model Random Forest and Support Vector\n\n\n\nget_best_model_function will return best model after comparison\n\n\nNow Let's try to train a RandomForestRegressor\n```python\nimport os\n\nfrom neuro_mf.config import get_sample_model_config_yaml_file\nfrom neuro_mf import ModelFactory\n\nif __name__ == \"__main__\":\n    # export_dir=get_sample_model_config_yaml_file(export_dir=\"config\")\n    export_file_path = os.path.join(\"config\", \"model.yaml\")\n    model_factory = ModelFactory(model_config_path=export_file_path)\n    x = None  # input feature\n    y = None  # target feature\n    best_model = model_factory.get_best_model(x, y, base_accuracy=0.9)\n    print(best_model.best_model)\n    print(f\"best score:{best_model.best_score}\")\n\n\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/avnyadav/model_factory",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neuro-mf",
    "package_url": "https://pypi.org/project/neuro-mf/",
    "platform": null,
    "project_url": "https://pypi.org/project/neuro-mf/",
    "project_urls": {
      "Homepage": "https://github.com/avnyadav/model_factory"
    },
    "release_url": "https://pypi.org/project/neuro-mf/0.0.5/",
    "requires_dist": [
      "PyYAML",
      "scikit-learn"
    ],
    "requires_python": "",
    "summary": "iNeuron Model Factory helps us to generate model training and grid search code automatically based",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14332039,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cb0e7e507a5090c5c1a4c48e84f53fbec81a9ecdd6f0517506b9069a6e0f3f5",
          "md5": "844950192f990025b0c0e121a876ebe3",
          "sha256": "203eba371e90803d3f7e085639fecfd48df57f467fc24d0aba0517044a1ded85"
        },
        "downloads": -1,
        "filename": "neuro_mf-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "844950192f990025b0c0e121a876ebe3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8297,
        "upload_time": "2022-07-04T11:50:10",
        "upload_time_iso_8601": "2022-07-04T11:50:10.775888Z",
        "url": "https://files.pythonhosted.org/packages/9c/b0/e7e507a5090c5c1a4c48e84f53fbec81a9ecdd6f0517506b9069a6e0f3f5/neuro_mf-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb5e6c80f620f99cd7632001fbd0152d0dd9c387043fa9dd5f0ffd69f804064f",
          "md5": "574551591725e35675d407efa3dd668b",
          "sha256": "66a6322788718778fc525d85bbfd459768d59b059529fdd8471080fcc88c0799"
        },
        "downloads": -1,
        "filename": "neuro_mf-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "574551591725e35675d407efa3dd668b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7654,
        "upload_time": "2022-07-04T11:50:13",
        "upload_time_iso_8601": "2022-07-04T11:50:13.448565Z",
        "url": "https://files.pythonhosted.org/packages/fb/5e/6c80f620f99cd7632001fbd0152d0dd9c387043fa9dd5f0ffd69f804064f/neuro_mf-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb55ac1d893baceec5e4e36731ffdfb598e838e4589a4ddb770ad283827d4a78",
          "md5": "723df5164b530503c129ec30744f70e5",
          "sha256": "b765bb29a0152c12e4eef6f1f65217ce5ea46fb9206e5f1efd623d3ac3f0c91e"
        },
        "downloads": -1,
        "filename": "neuro_mf-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "723df5164b530503c129ec30744f70e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9215,
        "upload_time": "2022-07-04T12:36:32",
        "upload_time_iso_8601": "2022-07-04T12:36:32.969597Z",
        "url": "https://files.pythonhosted.org/packages/cb/55/ac1d893baceec5e4e36731ffdfb598e838e4589a4ddb770ad283827d4a78/neuro_mf-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f672a8086e1b7880ce40a6428c42eb7ffdac59470b6c952a7255f02a3c49956a",
          "md5": "03489a6ab8705d56a9b2b33980a504c3",
          "sha256": "f463b4b184e49d4e6fc6d6977fefc717b9655d76e874fc33e4fe6ad43cf3c76a"
        },
        "downloads": -1,
        "filename": "neuro_mf-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "03489a6ab8705d56a9b2b33980a504c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8206,
        "upload_time": "2022-07-04T12:36:34",
        "upload_time_iso_8601": "2022-07-04T12:36:34.088801Z",
        "url": "https://files.pythonhosted.org/packages/f6/72/a8086e1b7880ce40a6428c42eb7ffdac59470b6c952a7255f02a3c49956a/neuro_mf-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3d6927ec7d77acc91b44cac853be2a8933d36c9945346b86af0aefb477fd441",
          "md5": "d26f800d52e8455066057d227446964b",
          "sha256": "cd8f6d2eeb5e2538404e7a81f451315bd5a3c2b9d476cd9040029ddfdea55d03"
        },
        "downloads": -1,
        "filename": "neuro_mf-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d26f800d52e8455066057d227446964b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9224,
        "upload_time": "2022-07-04T12:52:07",
        "upload_time_iso_8601": "2022-07-04T12:52:07.296846Z",
        "url": "https://files.pythonhosted.org/packages/a3/d6/927ec7d77acc91b44cac853be2a8933d36c9945346b86af0aefb477fd441/neuro_mf-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e8b563138b80144c67a7d88626d3164e74b9f61c0ed0f9f13904eb167d94641",
          "md5": "ecc0d9fb56399edb77af2ea8a861df76",
          "sha256": "c72aa8e1e6a133c2f5c334f19ec8671ffe7dd0d779ce66d7c51a5a6e84d8f190"
        },
        "downloads": -1,
        "filename": "neuro_mf-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ecc0d9fb56399edb77af2ea8a861df76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8209,
        "upload_time": "2022-07-04T12:52:08",
        "upload_time_iso_8601": "2022-07-04T12:52:08.402380Z",
        "url": "https://files.pythonhosted.org/packages/7e/8b/563138b80144c67a7d88626d3164e74b9f61c0ed0f9f13904eb167d94641/neuro_mf-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fa90945130e9537336dc6796bd5db87e31ca95bc99f806dfe8315c1d3ef3b2d",
          "md5": "9a95615c361beb5d4b22f4586914bd10",
          "sha256": "8f990693c065b39f286b900426fc61c82c2d9a08b13258ef097df774448d465a"
        },
        "downloads": -1,
        "filename": "neuro_mf-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a95615c361beb5d4b22f4586914bd10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10391,
        "upload_time": "2022-07-04T16:01:28",
        "upload_time_iso_8601": "2022-07-04T16:01:28.480270Z",
        "url": "https://files.pythonhosted.org/packages/4f/a9/0945130e9537336dc6796bd5db87e31ca95bc99f806dfe8315c1d3ef3b2d/neuro_mf-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b32e611f7f8dcc0c3752d7a1f56ef54d571520a84df3d13aab48ed21841024f3",
          "md5": "5e19608617dbb2c05fdf613522be3a41",
          "sha256": "6d0fc99e53f8b1cd93eb54346853f570feec13958ecef177fb025931a3792dc8"
        },
        "downloads": -1,
        "filename": "neuro_mf-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5e19608617dbb2c05fdf613522be3a41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9299,
        "upload_time": "2022-07-04T16:01:30",
        "upload_time_iso_8601": "2022-07-04T16:01:30.053883Z",
        "url": "https://files.pythonhosted.org/packages/b3/2e/611f7f8dcc0c3752d7a1f56ef54d571520a84df3d13aab48ed21841024f3/neuro_mf-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fa90945130e9537336dc6796bd5db87e31ca95bc99f806dfe8315c1d3ef3b2d",
        "md5": "9a95615c361beb5d4b22f4586914bd10",
        "sha256": "8f990693c065b39f286b900426fc61c82c2d9a08b13258ef097df774448d465a"
      },
      "downloads": -1,
      "filename": "neuro_mf-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a95615c361beb5d4b22f4586914bd10",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10391,
      "upload_time": "2022-07-04T16:01:28",
      "upload_time_iso_8601": "2022-07-04T16:01:28.480270Z",
      "url": "https://files.pythonhosted.org/packages/4f/a9/0945130e9537336dc6796bd5db87e31ca95bc99f806dfe8315c1d3ef3b2d/neuro_mf-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b32e611f7f8dcc0c3752d7a1f56ef54d571520a84df3d13aab48ed21841024f3",
        "md5": "5e19608617dbb2c05fdf613522be3a41",
        "sha256": "6d0fc99e53f8b1cd93eb54346853f570feec13958ecef177fb025931a3792dc8"
      },
      "downloads": -1,
      "filename": "neuro_mf-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "5e19608617dbb2c05fdf613522be3a41",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9299,
      "upload_time": "2022-07-04T16:01:30",
      "upload_time_iso_8601": "2022-07-04T16:01:30.053883Z",
      "url": "https://files.pythonhosted.org/packages/b3/2e/611f7f8dcc0c3752d7a1f56ef54d571520a84df3d13aab48ed21841024f3/neuro_mf-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}