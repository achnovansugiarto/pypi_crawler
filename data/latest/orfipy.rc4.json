{
  "info": {
    "author": "Urminder Singh",
    "author_email": "usingh@iastate.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Build Status](https://travis-ci.org/urmi-21/orfipy.svg?branch=master)](https://travis-ci.org/urmi-21/orfipy)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/orfipy)\n[![install with bioconda](https://anaconda.org/bioconda/plncpro/badges/installer/conda.svg)](https://anaconda.org/bioconda/orfipy)\n[![install with bioconda](https://img.shields.io/conda/dn/bioconda/orfipy?label=conda%20downloads&style=flat-square)](https://anaconda.org/bioconda/orfipy)\n![PyPI](https://img.shields.io/pypi/v/orfipy?style=flat-square)\n[![Downloads](https://img.shields.io/pypi/dm/orfipy?color=orange&label=PyPI%20downloads&style=flat-square)](https://pepy.tech/project/orfipy)\n[![publication](https://img.shields.io/badge/publication-Bioinformatics-blue)](https://doi.org/10.1093/bioinformatics/btab090)\n\n# Introduction\norfipy is a tool written in python/cython to extract ORFs in an extremely and fast and flexible manner. \nOther popular ORF searching tools are [OrfM](https://github.com/wwood/OrfM) and [getorf](http://emboss.sourceforge.net/apps/cvs/emboss/apps/getorf.html).\nCompared to OrfM and getorf, orfipy provides the most options to fine tune ORF searches.\norfipy uses multiple CPU cores and is particularly faster for data containing multiple smaller fasta sequences such as de-novo transcriptome assemblies.\nPlease read the [paper here](https://doi.org/10.1093/bioinformatics/btab090).\n\nPlease cite as: Urminder Singh, Eve Syrkin Wurtele, orfipy: a fast and flexible tool for extracting ORFs, Bioinformatics, 2021;, btab090, https://doi.org/10.1093/bioinformatics/btab090\n\n\n## Installation\n\n### Install latest stable version\n```\npip install orfipy\n```\nOr install via conda\n\n```\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n\nconda create -n orfipy -c bioconda orfipy\n```\n\n### Install the development version from source\n\n```\ngit clone https://github.com/urmi-21/orfipy.git\ncd orfipy\npip install .\n```\n\nor use pip\n\n```\npip install git+git://github.com/urmi-21/orfipy.git\n```\n\n## Examples\n\nDetails of `orfipy` algorithm are in the <a href=https://doi.org/10.1093/bioinformatics/btab090> paper. Please go through the <a href=https://github.com/urmi-21/orfipy/tree/master/supplementary_data>SI</a></em> if you are interested to know differences between `orfipy` and other ORF finder tools and how to set `orfipy` parameters to match the output of other tools.\n\nBelow are some usage examples for `orfipy`\n\n\nTo see full list of options use the command:\n\n```\norfipy -h\n```\n\n### Input\n`orfipy` version 0.0.3 and above, supports sequences in Fasta/Fastq format (orfipy uses [pyfastx](https://github.com/lmdu/pyfastx)). Input files can be in .gz format.\n\n**Extract ORF sequences and write ORF sequences in orfs.fa file**\n\n```\norfipy input.fasta --dna orfs.fa --min 10 --max 10000 --procs 4 --table 1 --outdir orfs_out\n```\n\n**Use [standard codon table](https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi?chapter=cgencodes)  but use only ATG as start codon**\n\n```\norfipy input.fa.gz --dna orfs.fa --start ATG\n```\n**Note:** Users can also provide their own translation table, as a .json file, to `orfipy` using `--table` option. Example of json file containing a valid translation table is [here](https://github.com/urmi-21/orfipy/blob/master/scripts/example_user_table.json)\n\n**See available codon tables**\n```\norfipy --show-table\n\n```\n\n**Extract ORFs BED file**\n```\norfipy input.fasta --bed orfs.bed --min 50 --procs 4\nor\norfipy input.fasta --min 50 --procs 4 > orfs.bed \n```\n\n**Extract ORFs BED12 file**\n\n**Note**: Add `--include-stop` for orfipy output to be consistent with Transdecoder.Predict output .bed file. \n\n```\norfipy testseq.fa --min 100 --bed12 of.bed --partial-5 --partial-3 --include-stop\n```\n\n**Extract ORFs peptide sequences using default translation table**\n```\norfipy input.fasta --pep orfs_peptides.fa --min 50 --procs 4\n```\n\n### API\n\nUsers can directly import the ORF search algorithm, written in cython, in their python ecosystem.\n\n```\n>>> import orfipy_core \n>>> seq='ATGCATGACTAGCATCAGCATCAGCAT'\n>>> for start,stop,strand,description in orfipy_core.orfs(seq,minlen=3,maxlen=1000):\n...     print(start,stop,strand,description)\n... \n0 9 + ID=Seq_ORF.1;ORF_type=complete;ORF_len=9;ORF_frame=1;Start:ATG;Stop:TAG\n\n```\n`orfipy_core.orfs` function can take following arguments\n\n- seq: Required input sequence (str)\n- name ['Seq'] Name (str)\n- minlen [0] min length (int)\n- maxlen [1000000] max length (int)\n- strand ['b'] Strand to use, (b)oth, (f)wd or (r)ev (char)\n- starts [['TTG','CTG','ATG']] Start codons to use (list)\n- stops=['TAA','TAG','TGA'] Stop codons to use (list)\n- include_stop [False] Include stop codon in ORF (bool)\n- partial3 [False] Report ORFs without a stop (bool)\n- partial5 [False] Report ORFs without a start (bool)\n- between_stops [False] Report ORFs defined as between stops (bool)\n\n\n\n## Comparison with getorf and OrfM\n\n<p>\n    <img src=\"https://raw.githubusercontent.com/urmi-21/orfipy/master/scripts/comparison.png\" alt>\n    <em>Comparison of orfipy features and performance with getorf and OrfM. Tools were run on different data and ORFs were output to both nucleotide and peptide Fasta files (fasta), only peptide Fasta (peptide) and BED (bed).\n    For details see the <a href=https://doi.org/10.1093/bioinformatics/btab090> publication</a> and <a href=https://doi.org/10.1093/bioinformatics/btab090>SI</a></em>\n</p>\n\n- orfipy is most flexible, particularly faster for data containing multiple smaller fasta sequences such as de-novo transcriptome assemblies or collection of microbial genomes.\n- OrfM is fast (faster for Fastq), uses less memory, but ORF search options are limited\n- getorf is memory efficient but slower, no Fastq support. Provides some flexibility in ORF searches.\n\n## Funding\n\nThis work is funded in part by the National Science Foundation award IOS 1546858, \"Orphan Genes: An Untapped Genetic Reservoir of Novel Traits\". \nThis work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by National Science Foundation grant number \nACI-1548562 (Bridges HPC environment through allocations TG-MCB190098 and TG-MCB200123 awarded from XSEDE and HPC Consortium).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/urmi-21/orfipy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "orfipy",
    "package_url": "https://pypi.org/project/orfipy/",
    "platform": "",
    "project_url": "https://pypi.org/project/orfipy/",
    "project_urls": {
      "Homepage": "https://github.com/urmi-21/orfipy"
    },
    "release_url": "https://pypi.org/project/orfipy/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "orfipy",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10960669,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a49b1db9a0cecee87836977833417daa2ccc8fff47dc24d98b45d5c95874904",
          "md5": "30f045ace08d9f65a019488453c73340",
          "sha256": "74db68843e741aba4e322222807a8f239e34bfd04db2b82d10619e1f403d6bf5"
        },
        "downloads": -1,
        "filename": "orfipy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "30f045ace08d9f65a019488453c73340",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 89831,
        "upload_time": "2020-10-12T20:39:01",
        "upload_time_iso_8601": "2020-10-12T20:39:01.233096Z",
        "url": "https://files.pythonhosted.org/packages/4a/49/b1db9a0cecee87836977833417daa2ccc8fff47dc24d98b45d5c95874904/orfipy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "314c55320f294739d268b5d1e821d28704bafb3ae0b82f4875807d717cc057f8",
          "md5": "13df5f669598ba51a55ba1e6be607c96",
          "sha256": "37e47239e8c8d2553aeae134a6906f8818f303076f64e367a1709e8e8032057a"
        },
        "downloads": -1,
        "filename": "orfipy-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "13df5f669598ba51a55ba1e6be607c96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 91389,
        "upload_time": "2020-11-07T22:44:34",
        "upload_time_iso_8601": "2020-11-07T22:44:34.787805Z",
        "url": "https://files.pythonhosted.org/packages/31/4c/55320f294739d268b5d1e821d28704bafb3ae0b82f4875807d717cc057f8/orfipy-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f67c5113b7762a2716698b0b6209da35a12a76c285b90268da63dadd22064b8",
          "md5": "8ab2775f432054186b70258af186a6b2",
          "sha256": "b1eacc65580c117407ba74a261a5d3c47d42628353e0a84ac51290daf95fc87d"
        },
        "downloads": -1,
        "filename": "orfipy-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8ab2775f432054186b70258af186a6b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 101777,
        "upload_time": "2020-12-30T23:59:38",
        "upload_time_iso_8601": "2020-12-30T23:59:38.756796Z",
        "url": "https://files.pythonhosted.org/packages/8f/67/c5113b7762a2716698b0b6209da35a12a76c285b90268da63dadd22064b8/orfipy-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4724a5587e442b2cf07edd0ccaeb9c08b50c77a4b27c5e7d410ae1424ba620a9",
          "md5": "39aa491dd43c6ce7b1d8b75ea8308ce7",
          "sha256": "b8736e1ab275a7a611d62a9718162988c6393e46f9a9074c690a75254fdcf760"
        },
        "downloads": -1,
        "filename": "orfipy-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "39aa491dd43c6ce7b1d8b75ea8308ce7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 104458,
        "upload_time": "2021-07-20T21:00:30",
        "upload_time_iso_8601": "2021-07-20T21:00:30.229992Z",
        "url": "https://files.pythonhosted.org/packages/47/24/a5587e442b2cf07edd0ccaeb9c08b50c77a4b27c5e7d410ae1424ba620a9/orfipy-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4724a5587e442b2cf07edd0ccaeb9c08b50c77a4b27c5e7d410ae1424ba620a9",
        "md5": "39aa491dd43c6ce7b1d8b75ea8308ce7",
        "sha256": "b8736e1ab275a7a611d62a9718162988c6393e46f9a9074c690a75254fdcf760"
      },
      "downloads": -1,
      "filename": "orfipy-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "39aa491dd43c6ce7b1d8b75ea8308ce7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 104458,
      "upload_time": "2021-07-20T21:00:30",
      "upload_time_iso_8601": "2021-07-20T21:00:30.229992Z",
      "url": "https://files.pythonhosted.org/packages/47/24/a5587e442b2cf07edd0ccaeb9c08b50c77a4b27c5e7d410ae1424ba620a9/orfipy-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}