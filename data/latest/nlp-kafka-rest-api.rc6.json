{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Kafka REST API\n\n## Installation\nIf you are installing from a remote or public repository, run: `pip install kafka-rest-api`.\nIf you are installing from a *wheel* file in the local directory, run: `pip install {filename}.whl`, \nand replace `{filename}` with the name of the *.whl* file.\n\n## Getting Started\nInteractions with a Kafka cluster can be performed on a Producer/Consumer paradigm. As such there are two classes that\ncan be imported and used to publish and subscribe to topics in Kafka: **Producer** and **Consumer**.\n\n## Configuration\nWhen using this package to access Merck API Gateway, you can define the following environment variables:\n- **KAFKA_REST_API_URL**: Target Kafka REST API URL. In alternative, you can pass the argument `kafka_rest_api_url`\nto the Producer and the Consumer constructor.\n- **X_API_KEY**: The authorization token to validate API requests to API Gateway. In alternative, you can pass a dictionary\nwith the format `{\"x-api-key\": \"your-api-key\", \"other-header-key\": \"other-header-value\", etc...}` to the key parameter `auth_headers`\nin both the Producer and the Consumer constructors.\n- **TOPIC_ID**: MSK Topic ID assigned to the user. In alternative, you can pass a string with the topic ID \nto the key argument `topic_id` in both the Producer and the Consumer constructors.\n\n### Producer\n#### Produce json data\nIn the snippet below the topic *pke* is used as example. The pattern for the producer is the following:\n```python\nfrom kafka_rest import Producer\nproducer = Producer()\nnew_keys = producer.produce(messages_to_pke_endpoint, \"pke\")\n```\nPlease note that each message in the list of messages to the target endpoint should correspond to the payload that\nis expected by that endpoint that would otherwise be a JSON object.\n\nFor example, a valid message to the *pke* endpoint is:\n```python\n{\n  \"text\": \"Genome engineering is a powerful tool.\", \n  \"algorithm\": \"TopicRank\", \n  \"n_best\": 10\n}\n```\nTo know which message format you should use for each endpoint, please consult the documentation for NLP API.\n\nThe `Producer.produce` method automatically generates a unique key (UUID) for each message. \nOptionally, you can provide your unique keys as well, passing a list of keys (strings) to the argument `keys`.\n\n#### Produce files\nTo produce files as inputs to a given endpoint, you can use the method `produce_files`. The required arguments\nfor this method are:\n- `files` which consists of a list of absolute or relative paths to the input files;\n- `endpoint` target endpoint (*pdf2text*, for example);\n```python\nfrom kafka_rest import Producer\nproducer = Producer()\nnew_keys = producer.produce_files(files=list_of_files, endpoint=\"pdf2text\")\n```\n\n### Consumer\n#### Pattern 1 - Iterator\nArguably, the most useful way of consuming messages with the Consumer class is as follows:\n```python\nfrom kafka_rest import Consumer\nwith Consumer() as consumer:\n    for data, remaining_keys in consumer.consume(keys):\n        print((data, remaining_keys))\n```\n#### Pattern 2 - Step-by-step instantiation (Chain)\nYou can also opt to do a step-by-step instantiation and have a finer control of each request sent by the Consumer to the NLP API:\n```python\nfrom kafka_rest import Consumer\nconsumer = Consumer()\nconsumer.create()\nconsumer.subscribe()\n# or consumer.create().subscribe().consume(keys)\n\nfor data, remaining_keys in consumer.consume(keys):\n        print((data, remaining_keys))\n\nconsumer.delete()\n```\n#### Pattern 3 - Consume all\nOptionally, the Consumer can just return when all keys were exhausted, i.e.: when all messages were consumed.\nFor that, please use the `consume_all` method.\n```python\nfrom kafka_rest import Consumer\nwith Consumer() as consumer:\n    data = consumer.consume_all(keys)\n```\n\n#### Full example\nProduce files as inputs and consume outputs.\n\n```python\nfrom kafka_rest import Producer, Consumer\n\nproducer = Producer()\nnew_keys = producer.produce_files([\"files/file1.pdf\", \"files/file2.pdf\"], \"pdf2text\")\n\nwith Consumer() as consumer:\n    for data, remaining_keys in enumerate(consumer.consume(new_keys)):\n        if data:\n            print(f\"Data: {data} | Remaining Keys: {remaining_keys}\")\n```\n\nFor more snippets, please check the example in the file `kafka_rest/snippets` in this repo.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "nlp,kafka,rest,proxy",
    "license": "Copyright (c) 2023 Merck KGaA, Darmstadt, Germany  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nlp-kafka-rest-api",
    "package_url": "https://pypi.org/project/nlp-kafka-rest-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/nlp-kafka-rest-api/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/nlp-kafka-rest-api/1.0.0/",
    "requires_dist": [
      "requests",
      "pip-tools ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "This package is a wrapper for REST API requests to Kafka Proxy.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17400600,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c224815fcad3e3ecb61832fa4fb6db4538a630f08a70e4d751fc1cf64413cb9",
          "md5": "6cc5a4d040bf6898e8c9986c40e05204",
          "sha256": "22f279c4f19c8cd70e9f80042ce3469d3b6d5d3fb888ad340a4374164c170a8a"
        },
        "downloads": -1,
        "filename": "nlp_kafka_rest_api-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6cc5a4d040bf6898e8c9986c40e05204",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1281,
        "upload_time": "2023-02-03T11:47:44",
        "upload_time_iso_8601": "2023-02-03T11:47:44.095893Z",
        "url": "https://files.pythonhosted.org/packages/4c/22/4815fcad3e3ecb61832fa4fb6db4538a630f08a70e4d751fc1cf64413cb9/nlp_kafka_rest_api-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22d5dfe9bb60d9084e1d491c180786c9deb2aeac25501841f32a65709bf384ad",
          "md5": "c43a2efd3c1b5810cb9c0572996277ed",
          "sha256": "6f3bea41af116f22a6049d74470c8dedcd5e551cd0a0f1b9b4f66875ac28a8a5"
        },
        "downloads": -1,
        "filename": "nlp-kafka-rest-api-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c43a2efd3c1b5810cb9c0572996277ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6693,
        "upload_time": "2023-02-03T10:39:53",
        "upload_time_iso_8601": "2023-02-03T10:39:53.588728Z",
        "url": "https://files.pythonhosted.org/packages/22/d5/dfe9bb60d9084e1d491c180786c9deb2aeac25501841f32a65709bf384ad/nlp-kafka-rest-api-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1ba8670cf4986d329f805559e615f51cc4232e50394612ee57028176581d4a6",
          "md5": "57eb2f6d03809275631b5687489ba3dc",
          "sha256": "dec0228dfd016f2140da6ffe7f3c3e1db568c96f5b477fdd975cd966c7af4088"
        },
        "downloads": -1,
        "filename": "nlp_kafka_rest_api-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57eb2f6d03809275631b5687489ba3dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11022,
        "upload_time": "2023-03-20T01:32:03",
        "upload_time_iso_8601": "2023-03-20T01:32:03.896923Z",
        "url": "https://files.pythonhosted.org/packages/e1/ba/8670cf4986d329f805559e615f51cc4232e50394612ee57028176581d4a6/nlp_kafka_rest_api-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50cc92c3b4d6d2a05fac8843ec46f5ebe0d38b73795ed86da9712eef0dd44049",
          "md5": "461a63af080a3c83d0ac387260fb6d3a",
          "sha256": "0f42a714db14b378268488af9e13dbcf0784ccf58cde1a127ca6f025f31daa26"
        },
        "downloads": -1,
        "filename": "nlp_kafka_rest_api-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "461a63af080a3c83d0ac387260fb6d3a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8952,
        "upload_time": "2023-02-07T10:52:58",
        "upload_time_iso_8601": "2023-02-07T10:52:58.284700Z",
        "url": "https://files.pythonhosted.org/packages/50/cc/92c3b4d6d2a05fac8843ec46f5ebe0d38b73795ed86da9712eef0dd44049/nlp_kafka_rest_api-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "471ffe149b1c7e1db0c54f852bddd14916985102a1ac84f19318ac20bad078ee",
          "md5": "6d4801e92f1da3b15d1d1d15dd20f59c",
          "sha256": "834d5bc9236943d77de379e794a1c0ec349a7e7f652e3f90a09871eaeb86f84a"
        },
        "downloads": -1,
        "filename": "nlp_kafka_rest_api-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d4801e92f1da3b15d1d1d15dd20f59c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8800,
        "upload_time": "2023-02-07T11:14:33",
        "upload_time_iso_8601": "2023-02-07T11:14:33.991621Z",
        "url": "https://files.pythonhosted.org/packages/47/1f/fe149b1c7e1db0c54f852bddd14916985102a1ac84f19318ac20bad078ee/nlp_kafka_rest_api-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63ce0f36b493d57f8a81b91c18dbcfcc2f7e55d0b64a2f14acc42d7945f95915",
          "md5": "8b0fe23a7e5cf16d719ee1057393f3ac",
          "sha256": "fa43928b3e0ec928b286679135c0c5fc7f87976956d73bff6fb15f6192c90373"
        },
        "downloads": -1,
        "filename": "nlp_kafka_rest_api-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b0fe23a7e5cf16d719ee1057393f3ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8798,
        "upload_time": "2023-02-08T13:51:02",
        "upload_time_iso_8601": "2023-02-08T13:51:02.457045Z",
        "url": "https://files.pythonhosted.org/packages/63/ce/0f36b493d57f8a81b91c18dbcfcc2f7e55d0b64a2f14acc42d7945f95915/nlp_kafka_rest_api-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d56429860f76471739aaf1039a84b6e8dc6ec236513adfc7e508f9501a1da4a2",
          "md5": "7f4d54987214e2cdc4bcf7a42d533679",
          "sha256": "6f1db36b36a5bc103f83f4f48bc78f320405b3a35137a57baea43d228dd0bf8d"
        },
        "downloads": -1,
        "filename": "nlp_kafka_rest_api-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f4d54987214e2cdc4bcf7a42d533679",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9499,
        "upload_time": "2023-03-22T15:42:23",
        "upload_time_iso_8601": "2023-03-22T15:42:23.832754Z",
        "url": "https://files.pythonhosted.org/packages/d5/64/29860f76471739aaf1039a84b6e8dc6ec236513adfc7e508f9501a1da4a2/nlp_kafka_rest_api-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d56429860f76471739aaf1039a84b6e8dc6ec236513adfc7e508f9501a1da4a2",
        "md5": "7f4d54987214e2cdc4bcf7a42d533679",
        "sha256": "6f1db36b36a5bc103f83f4f48bc78f320405b3a35137a57baea43d228dd0bf8d"
      },
      "downloads": -1,
      "filename": "nlp_kafka_rest_api-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7f4d54987214e2cdc4bcf7a42d533679",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9499,
      "upload_time": "2023-03-22T15:42:23",
      "upload_time_iso_8601": "2023-03-22T15:42:23.832754Z",
      "url": "https://files.pythonhosted.org/packages/d5/64/29860f76471739aaf1039a84b6e8dc6ec236513adfc7e508f9501a1da4a2/nlp_kafka_rest_api-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}