{
  "info": {
    "author": "Floris Laporte",
    "author_email": "floris.laporte@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# Python 3D FDTD Simulator\n\n![Docs](https://readthedocs.org/projects/fdtd/badge/?version=latest)\n\nA 3D electromagnetic FDTD simulator written in Python. The FDTD simulator has\nan optional PyTorch backend, enabling FDTD simulations on a GPU.\n\n## Installation\n\nThe `fdtd`-library can be installed with `pip`:\n\n```\npip install fdtd\n```\n\nThe development version can be installed by cloning the repository\n\n```\ngit clone http://github.com/flaport/fdtd\n```\n\nand linking it with pip\n\n```\npip install -e fdtd\n```\n\nDevelopment dependencies can be installed with\n\n```\npip install -e fdtd[dev]\n```\n\n## Dependencies\n\n- python 3.6+\n- numpy\n- scipy\n- matplotlib\n- tqdm\n- pytorch (optional)\n\n## Contributing\n\nAll improvements or additions (for example new objects, sources or detectors) are\nwelcome. Please make a pull-request ðŸ˜Š.\n\n## Documentation\n\nread the documentation here: [https://fdtd.readthedocs.org](https://fdtd.readthedocs.org)\n\n### Imports\n\nThe `fdtd` library is simply imported as follows:\n\n```python\nimport fdtd\n```\n\n### Setting the backend\n\nThe `fdtd` library allows to choose a backend. The `\"numpy\"` backend is the\ndefault one, but there are also several additional PyTorch backends:\n\n- `\"numpy\"` (defaults to float64 arrays)\n- `\"torch\"` (defaults to float64 tensors)\n- `\"torch.float32\"`\n- `\"torch.float64\"`\n- `\"torch.cuda\"` (defaults to float64 tensors)\n- `\"torch.cuda.float32\"`\n- `\"torch.cuda.float64\"`\n\nFor example, this is how to choose the `\"torch\"` backend:\n\n```python\nfdtd.set_backend(\"torch\")\n```\n\nIn general, the `\"numpy\"` backend is preferred for standard CPU calculations\nwith `\"float64\"` precision. In general, `\"float64\"` precision is always\npreferred over `\"float32\"` for FDTD simulations, however, `\"float32\"` might\ngive a significant performance boost.\n\nThe `\"cuda\"` backends are only available for computers with a GPU.\n\n### The FDTD-grid\n\nThe FDTD grid defines the simulation region.\n\n```python\n# signature\nfdtd.Grid(\n    shape: Tuple[Number, Number, Number],\n    grid_spacing: float = 155e-9,\n    permittivity: float = 1.0,\n    permeability: float = 1.0,\n    courant_number: float = None,\n)\n```\n\nA grid is defined by its `shape`, which is just a 3D tuple of `Number`-types\n(integers or floats). If the shape is given in floats, it denotes the width,\nheight and length of the grid in meters. If the shape is given in integers, it\ndenotes the width, height and length of the grid in terms of the\n`grid_spacing`. Internally, these numbers will be translated to three integers:\n`grid.Nx`, `grid.Ny` and `grid.Nz`.\n\nA `grid_spacing` can be given. For stability reasons, it is recommended to\nchoose a grid spacing that is at least 10 times smaller than the _smallest_\nwavelength in the grid. This means that for a grid containing a source with\nwavelength `1550nm` and a material with refractive index of `3.1`, the\nrecommended minimum `grid_spacing` turns out to be `50nm`\n\nFor the `permittivity` and `permeability` floats or arrays with the following\nshapes\n\n- `(grid.Nx, grid.Ny, grid.Nz)`\n- or `(grid.Nx, grid.Ny, grid.Nz, 1)`\n- or `(grid.Nx, grid.Ny, grid.Nz, 3)`\n\nare expected. In the last case, the shape implies the possibility for different\npermittivity for each of the major axes (so-called _uniaxial_ or _biaxial_\nmaterials). Internally, these variables will be converted (for performance\nreasons) to their inverses `grid.inverse_permittivity` array and a\n`grid.inverse_permeability` array of shape `(grid.Nx, grid.Ny, grid.Nz, 3)`. It\nis possible to change those arrays after making the grid.\n\nFinally, the `courant_number` of the grid determines the relation between the\n`time_step` of the simulation and the `grid_spacing` of the grid. If not given,\nit is chosen to be the maximum number allowed by the [Courant-Friedrichs-Lewy\nCondition](https://en.wikipedia.org/wiki/Courantâ€“Friedrichsâ€“Lewy_condition):\n`1` for `1D` simulations, `1/âˆš2` for `2D` simulations and `1/âˆš3` for `3D`\nsimulations (the dimensionality will be derived by the shape of the grid). For\nstability reasons, it is recommended not to change this value.\n\n```python\ngrid = fdtd.Grid(\n    shape = (25e-6, 15e-6, 1), # 25um x 15um x 1 (grid_spacing) --> 2D FDTD\n)\nprint(grid)\n```\n\n    Grid(shape=(161,97,1), grid_spacing=1.55e-07, courant_number=0.70)\n\n### Adding an object to the grid\n\nAn other option to locally change the `permittivity` or `permeability` in the\ngrid is to add an `Object` to the grid.\n\n```python\n# signature\nfdtd.Object(\n    permittivity: Tensorlike,\n    name: str = None\n)\n```\n\nAn object defines a part of the grid with modified update equations, allowing\nto introduce for example absorbing materials or biaxial materials for which\nmixing between the axes are present through `Pockels coefficients` or many\nmore. In this case we'll make an object with a different `permittivity` than\nthe grid it is in.\n\nJust like for the grid, the `Object` expects a `permittivity` to be a floats or\nan array of the following possible shapes\n\n- `(obj.Nx, obj.Ny, obj.Nz)`\n- or `(obj.Nx, obj.Ny, obj.Nz, 1)`\n- or `(obj.Nx, obj.Ny, obj.Nz, 3)`\n\nNote that the values `obj.Nx`, `obj.Ny` and `obj.Nz` are not given to the\nobject constructor. They are in stead derived from its placing in the grid:\n\n```python\ngrid[11:32, 30:84, 0] = fdtd.Object(permittivity=1.7**2, name=\"object\")\n```\n\nSeveral things happen here. First of all, the object is given the space\n`[11:32, 30:84, 0]` in the grid. Because it is given this space, the object's\n`Nx`, `Ny` and `Nz` are automatically set. Furthermore, by supplying a name to\nthe object, this name will become available in the grid:\n\n```python\nprint(grid.object)\n```\n\n        Object(name='object')\n            @ x=11:32, y=30:84, z=0:1\n\nA second object can be added to the grid:\n\n```python\ngrid[13e-6:18e-6, 5e-6:8e-6, 0] = fdtd.Object(permittivity=1.5**2)\n```\n\nHere, a slice with floating point numbers was chosen. These floats will be\nreplaced by integer `Nx`, `Ny` and `Nz` during the registration of the object.\nSince the object did not receive a name, the object won't be available as an\nattribute of the grid. However, it is still available via the `grid.objects`\nlist:\n\n```python\nprint(grid.objects)\n```\n\n    [Object(name='object'), Object(name=None)]\n\nThis list stores all objects (i.e. of type `fdtd.Object`) in the order that\nthey were added to the grid.\n\n### Adding a source to the grid\n\nSimilarly as to adding an object to the grid, an `fdtd.LineSource` can also be\nadded:\n\n```python\n# signature\nfdtd.LineSource(\n    period: Number = 15, # timesteps or seconds\n    amplitude: float = 1.0,\n    phase_shift: float = 0.0,\n    name: str = None,\n)\n```\n\nAnd also just like an `fdtd.Object`, an `fdtd.LineSource` size is defined by its\nplacement on the grid:\n\n```python\ngrid[7.5e-6:8.0e-6, 11.8e-6:13.0e-6, 0] = fdtd.LineSource(\n    period = 1550e-9 / (3e8), name=\"source\"\n)\n```\n\nHowever, it is important to note that in this case a `LineSource` is added to\nthe grid, i.e. the source spans the diagonal of the cube defined by the slices.\nInternally, these slices will be converted into lists to ensure this behavior:\n\n```python\nprint(grid.source)\n```\n\n        LineSource(period=14, amplitude=1.0, phase_shift=0.0, name='source')\n            @ x=[48, ... , 51], y=[76, ... , 83], z=[0, ... , 0]\n\nNote that one could also have supplied lists to index the grid in the first\nplace. This feature could be useful to create a `LineSource` of arbitrary\nshape.\n\n### Adding a detector to the grid\n\n```python\n# signature\nfdtd.LineDetector(\n    name=None\n)\n```\n\nAdding a detector to the grid works the same as adding a source\n\n```python\ngrid[12e-6, :, 0] = fdtd.LineDetector(name=\"detector\")\n```\n\n```python\nprint(grid.detector)\n```\n\n        LineDetector(name='detector')\n            @ x=[77, ... , 77], y=[0, ... , 96], z=[0, ... , 0]\n\n### Adding grid boundaries\n\n```python\n# signature\nfdtd.PML(\n    a: float = 1e-8, # stability factor\n    name: str = None\n)\n```\n\nAlthough, having an object, source and detector to simulate is in principle\nenough to perform an FDTD simulation, One also needs to define a grid boundary\nto prevent the fields to be reflected. One of those boundaries that can be\nadded to the grid is a [Perfectly Matched\nLayer](https://en.wikipedia.org/wiki/Perfectly_matched_layer) or `PML`. These\nare basically absorbing boundaries.\n\n```python\n# x boundaries\ngrid[0:10, :, :] = fdtd.PML(name=\"pml_xlow\")\ngrid[-10:, :, :] = fdtd.PML(name=\"pml_xhigh\")\n\n# y boundaries\ngrid[:, 0:10, :] = fdtd.PML(name=\"pml_ylow\")\ngrid[:, -10:, :] = fdtd.PML(name=\"pml_yhigh\")\n```\n\n### Grid summary\n\nA simple summary of the grid can be shown by printing out the grid:\n\n```python\nprint(grid)\n```\n\n    Grid(shape=(161,97,1), grid_spacing=1.55e-07, courant_number=0.70)\n\n    sources:\n        LineSource(period=14, amplitude=1.0, phase_shift=0.0, name='source')\n            @ x=[48, ... , 51], y=[76, ... , 83], z=[0, ... , 0]\n\n    detectors:\n        LineDetector(name='detector')\n            @ x=[77, ... , 77], y=[0, ... , 96], z=[0, ... , 0]\n\n    boundaries:\n        PML(name='pml_xlow')\n            @ x=0:10, y=:, z=:\n        PML(name='pml_xhigh')\n            @ x=-10:, y=:, z=:\n        PML(name='pml_ylow')\n            @ x=:, y=0:10, z=:\n        PML(name='pml_yhigh')\n            @ x=:, y=-10:, z=:\n\n    objects:\n        Object(name='object')\n            @ x=11:32, y=30:84, z=0:1\n        Object(name=None)\n            @ x=84:116, y=32:52, z=0:1\n\n### Running a simulation\n\nRunning a simulation is as simple as using the `grid.run` method.\n\n```python\ngrid.run(\n    total_time: Number,\n    progress_bar: bool = True\n)\n```\n\nJust like for the lengths in the grid, the `total_time` of the simulation\ncan be specified as an integer (number of `time_steps`) or as a float (in\nseconds).\n\n```python\ngrid.run(total_time=100)\n```\n\n### Grid visualization\n\nLet's visualize the grid. This can be done with the `grid.visualize` method:\n\n```python\n# signature\ngrid.visualize(\n    grid,\n    x=None,\n    y=None,\n    z=None,\n    cmap=\"Blues\",\n    pbcolor=\"C3\",\n    pmlcolor=(0, 0, 0, 0.1),\n    objcolor=(1, 0, 0, 0.1),\n    srccolor=\"C0\",\n    detcolor=\"C2\",\n    show=True,\n)\n```\n\nThis method will by default visualize all objects in the grid, as well as the\nfield intensity at the current `time_step` at a certain `x`, `y` **OR** `z`-plane. By\nsetting `show=False`, one can disable the immediate visualization of the\nmatplotlib image.\n\n```python\ngrid.visualize(z=0)\n```\n\n![png](docs/_static/grid.png)\n\n## Background\n\nAn as quick as possible explanation of the FDTD discretization of the Maxwell\nequations.\n\n### Update Equations\n\nAn electromagnetic FDTD solver solves the time-dependent Maxwell Equations\n\n```python\n    curl(H) = Îµ*Îµ0*dE/dt\n    curl(E) = -Âµ*Âµ0*dH/dt\n```\n\nThese two equations are called _Ampere's Law_ and _Faraday's Law_ respectively.\n\nIn these equations, Îµ and Âµ are the relative permittivity and permeability\ntensors respectively. Îµ0 and Âµ0 are the vacuum permittivity and permeability\nand their square root can be absorbed into E and H respectively, such that `E := âˆšÎµ0*E` and `H := âˆšÂµ0*H`.\n\nDoing this, the Maxwell equations can be written as update equations:\n\n```python\n    E  += c*dt*inv(Îµ)*curl(H)\n    H  -= c*dt*inv(Âµ)*curl(E)\n```\n\nThe electric and magnetic field can then be discretized on a grid with\ninterlaced Yee-coordinates, which in 3D looks like this:\n\n![grid discretization in 3D](docs/_static/yee.svg)\n\nAccording to the Yee discretization algorithm, there are inherently two types\nof fields on the grid: `E`-type fields on integer grid locations and `H`-type\nfields on half-integer grid locations.\n\nThe beauty of these interlaced coordinates is that they enable a very natural\nway of writing the curl of the electric and magnetic fields: the curl of an\nH-type field will be an E-type field and vice versa.\n\nThis way, the curl of E can be written as\n\n```python\n    curl(E)[m,n,p] = (dEz/dy - dEy/dz, dEx/dz - dEz/dx, dEy/dx - dEx/dy)[m,n,p]\n                   =( ((Ez[m,n+1,p]-Ez[m,n,p])/dy - (Ey[m,n,p+1]-Ey[m,n,p])/dz),\n                      ((Ex[m,n,p+1]-Ex[m,n,p])/dz - (Ez[m+1,n,p]-Ez[m,n,p])/dx),\n                      ((Ey[m+1,n,p]-Ey[m,n,p])/dx - (Ex[m,n+1,p]-Ex[m,n,p])/dy) )\n                   =(1/du)*( ((Ez[m,n+1,p]-Ez[m,n,p]) - (Ey[m,n,p+1]-Ey[m,n,p])), [assume dx=dy=dz=du]\n                             ((Ex[m,n,p+1]-Ex[m,n,p]) - (Ez[m+1,n,p]-Ez[m,n,p])),\n                             ((Ey[m+1,n,p]-Ey[m,n,p]) - (Ex[m,n+1,p]-Ex[m,n,p])) )\n\n```\n\nthis can be written efficiently with array slices (note that the factor\n`(1/du)` was left out):\n\n```python\ndef curl_E(E):\n    curl_E = np.zeros(E.shape)\n    curl_E[:,:-1,:,0] += E[:,1:,:,2] - E[:,:-1,:,2]\n    curl_E[:,:,:-1,0] -= E[:,:,1:,1] - E[:,:,:-1,1]\n\n    curl_E[:,:,:-1,1] += E[:,:,1:,0] - E[:,:,:-1,0]\n    curl_E[:-1,:,:,1] -= E[1:,:,:,2] - E[:-1,:,:,2]\n\n    curl_E[:-1,:,:,2] += E[1:,:,:,1] - E[:-1,:,:,1]\n    curl_E[:,:-1,:,2] -= E[:,1:,:,0] - E[:,:-1,:,0]\n    return curl_E\n```\n\nThe curl for H can be obtained in a similar way (note again that the factor\n`(1/du)` was left out):\n\n```python\ndef curl_H(H):\n    curl_H = np.zeros(H.shape)\n\n    curl_H[:,1:,:,0] += H[:,1:,:,2] - H[:,:-1,:,2]\n    curl_H[:,:,1:,0] -= H[:,:,1:,1] - H[:,:,:-1,1]\n\n    curl_H[:,:,1:,1] += H[:,:,1:,0] - H[:,:,:-1,0]\n    curl_H[1:,:,:,1] -= H[1:,:,:,2] - H[:-1,:,:,2]\n\n    curl_H[1:,:,:,2] += H[1:,:,:,1] - H[:-1,:,:,1]\n    curl_H[:,1:,:,2] -= H[:,1:,:,0] - H[:,:-1,:,0]\n    return curl_H\n```\n\nThe update equations can now be rewritten as\n\n```python\n    E  += (c*dt/du)*inv(Îµ)*curl_H\n    H  -= (c*dt/du)*inv(Âµ)*curl_E\n```\n\nThe number `(c*dt/du)` is a dimensionless parameter called the _Courant number_\n`sc`. For stability reasons, the Courant number should always be smaller than\n`1/âˆšD`, with `D` the dimension of the simulation. This can be intuitively be\nunderstood as the condition that information should always travel slower than\nthe speed of light through the grid. In the FDTD method described here,\ninformation can only travel to the neighboring grid cells (through application\nof the curl). It would therefore take `D` time steps to travel over the\ndiagonal of a `D`-dimensional cube (square in `2D`, cube in `3D`), the Courant\ncondition follows then automatically from the fact that the length of this\ndiagonal is `1/âˆšD`.\n\nThis yields the final update equations for the FDTD algorithm:\n\n```python\n    E  += sc*inv(Îµ)*curl_H\n    H  -= sc*inv(Âµ)*curl_E\n```\n\nThis is also how it is implemented:\n\n```python\nclass Grid:\n    # ... [initialization]\n\n    def step(self):\n        self.update_E()\n        self.update_H()\n\n    def update_E(self):\n        self.E += self.courant_number * self.inverse_permittivity * curl_H(self.H)\n\n    def update_H(self):\n        self.H -= self.courant_number * self.inverse_permeability * curl_E(self.E)\n```\n\n### Sources\n\nAmpere's Law can be updated to incorporate a current density:\n\n```python\n    curl(H) = J + Îµ*Îµ0*dE/dt\n```\n\nMaking again the usual substitutions `sc := c*dt/du`, `E := âˆšÎµ0*E` and `H := âˆšÂµ0*H`, the update equations can be modified to include the current density:\n\n```python\n    E += sc*inv(Îµ)*curl_H - dt*inv(Îµ)*J/âˆšÎµ0\n```\n\nMaking one final substitution `Es := -dt*inv(Îµ)*J/âˆšÎµ0` allows us to write this\nin a very clean way:\n\n```python\n    E += sc*inv(Îµ)*curl_H + Es\n```\n\nWhere we defined Es as the _electric field source term_.\n\nIt is often useful to also define a _magnetic field source term_ `Hs`, which would be\nderived from the _magnetic current density_ if it were to exist. In the same way,\nFaraday's update equation can be rewritten as\n\n```python\n    H  -= sc*inv(Âµ)*curl_E + Hs\n```\n\n```python\nclass Source:\n    # ... [initialization]\n    def update_E(self):\n        # electric source function here\n\n    def update_H(self):\n        # magnetic source function here\n\nclass Grid:\n    # ... [initialization]\n    def update_E(self):\n        # ... [electric field update equation]\n        for source in self.sources:\n            source.update_E()\n\n    def update_H(self):\n        # ... [magnetic field update equation]\n        for source in self.sources:\n            source.update_H()\n```\n\n### Lossy Medium\n\nWhen a material has a _electric conductivity_ Ïƒ, a conduction-current will\nensure that the medium is lossy. Ampere's law with a conduction current becomes\n\n```python\n    curl(H) = Ïƒ*E + Îµ*Îµ0*dE/dt\n```\n\nMaking the usual substitutions, this becomes:\n\n```python\n    E(t+dt) - E(t) = sc*inv(Îµ)*curl_H(t+dt/2) - dt*inv(Îµ)*Ïƒ*E(t+dt/2)/Îµ0\n```\n\nThis update equation depends on the electric field on a half-integer time step (a\n_magnetic field time step_). We need to substitute `E(t+dt/2)=(E(t)+E(t+dt))/2` to\ninterpolate the electric field to the correct time step.\n\n```python\n    (1 + 0.5*dt*inv(Îµ)*Ïƒ/âˆšÎµ0)*E(t+dt) = sc*inv(Îµ)*curl_H(t+dt/2) + (1 - 0.5*dt*inv(Îµ)*Ïƒ/Îµ0)*E(t)\n```\n\nWhich, yield the new update equations:\n\n```python\n    f = 0.5*inv(Îµ)*Ïƒ*sc*du/(Îµ0*c)\n    E *= inv(1 + f) * (1 - f)\n    E += inv(1 + f)*sc*inv(Îµ)*curl_H\n```\n\nNote that the more complicated the permittivity tensor Îµ is, the more time\nconsuming this algorithm will be. It is therefore sometimes a nice hack to\ntransfer the absorption to the magnetic domain by introducing a\n(_nonphysical_) magnetic conductivity, because the permeability tensor Âµ is\nusually just equal to one:\n\n```python\n    f = 0.5*inv(Î¼)*Ïƒm*sc*du/(Î¼0*c)\n    H *= inv(1 + f) * (1 - f)\n    H += inv(1 + f)*sc*inv(Âµ)*curl_E\n```\n\n### Energy Density and Poynting Vector\n\nThe electromagnetic energy density can be given by\n\n```python\n    e = (1/2)*Îµ*Îµ0*E**2 + (1/2)*Âµ*Âµ0*H**2\n```\n\nmaking the above substitutions, this becomes in simulation units:\n\n```python\n    e = (1/2)*Îµ*E**2 + (1/2)*Âµ*H**2\n```\n\nThe Poynting vector is given by\n\n```python\n    P = EÃ—H\n```\n\nWhich in simulation units becomes\n\n```python\n    P = c*EÃ—H\n```\n\nThe energy introduced by a source `Es` can be derived from tracking the change\nin energy density\n\n```python\n    de = Îµ*EsÂ·E + (1/2)*Îµ*Es**2\n```\n\nThis could also be derived from Poyntings energy conservation law:\n\n```python\n    de/dt = -grad(S) - JÂ·E\n```\n\nwhere the first term just describes the redistribution of energy in a volume\nand the second term describes the energy introduced by a current density.\n\nNote: although it is unphysical, one could also have introduced a magnetic\nsource. This source would have introduced the following energy:\n\n```python\n    de = Îµ*HsÂ·H + (1/2)*Âµ*Hs**2\n```\n\nSince the Âµ-tensor is usually just equal to one, using a magnetic source term\nis often more efficient.\n\nSimilarly, one can also keep track of the absorbed energy due to an electric\nconductivity in the following way:\n\n```python\n    f = 0.5*inv(Îµ)*Ïƒ*sc*du/(Îµ0*c)\n    Enoabs = E + sc*inv(Îµ)*curl_H\n    E *= inv(1 + f) * (1 - f)\n    E += inv(1 + f)*sc*inv(Îµ)*curl_H\n    dE = Enoabs - E\n    e_abs += Îµ*E*dE + 0.5*Îµ*dE**2\n```\n\nor if we want to keep track of the absorbed energy by magnetic a magnetic\nconductivity:\n\n```python\n    f = 0.5*inv(Î¼)*Ïƒm*sc*du/(Î¼0*c)\n    Hnoabs = E + sc*inv(Âµ)*curl_E\n    H *= inv(1 + f) * (1 - f)\n    H += inv(1 + f)*sc*inv(Âµ)*curl_E\n    dH = Hnoabs - H\n    e_abs += Âµ*H*dH + 0.5*Âµ*dH**2\n```\n\nThe electric term and magnetic term in the energy density are usually of the\nsame size. Therefore, the same amount of energy will be absorbed by introducing\na _magnetic conductivity_ Ïƒm as by introducing a _electric conductivity_ Ïƒ if:\n\n```python\n    inv(Âµ)*Ïƒm/Âµ0 = inv(Îµ)*Ïƒ/Îµ0\n```\n\n### Boundary Conditions\n\n#### Periodic Boundary Conditions\n\nAssuming we want periodic boundary conditions along the `X`-direction, then we\nhave to make sure that the fields at `Xlow` and `Xhigh` are the same. This has\nto be enforced after performing the update equations:\n\nNote that the electric field `E` is dependent on `curl_H`, which means that the\nfirst indices of `E` will not be updated through the update equations. It's\nthose indices that need to be set through the periodic boundary condition.\nConcretely: `E[0]` needs to be set to equal `E[-1]`. For the magnetic field,\nthe inverse is true: `H` is dependent on `curl_E`, which means that its last\nindices will not be set. This has to be done by the boundary condition: `H[-1]`\nneeds to be set equal to `H[0]`:\n\n```python\nclass PeriodicBoundaryX:\n    # ... [initialization]\n    def update_E(self):\n        self.grid.E[0, :, :, :] = self.grid.E[-1, :, :, :]\n\n    def update_H(self):\n        self.grid.H[-1, :, :, :] = self.grid.H[0, :, :, :]\n\nclass Grid:\n    # ... [initialization]\n    def update_E(self):\n        # ... [electric field update equation]\n        # ... [electric field source update equations]\n        for boundary in self.boundaries:\n            boundary.update_E()\n\n    def update_H(self):\n        # ... [magnetic field update equation]\n        # ... [magnetic field source update equations]\n        for boundary in self.boundaries:\n            boundary.update_H()\n```\n\n#### Perfectly Matched Layer\n\na Perfectly Matched Layer (PML) is the state of the art for\nintroducing absorbing boundary conditions in an FDTD grid.\nA PML is an impedance-matched absorbing area in the grid. It turns out that\nfor a impedance-matching condition to hold, the PML can only be absorbing in\na single direction. This is what makes a PML in fact a nonphysical material.\n\nConsider Ampere's law for the `Ez` component, where we use the following substitutions:\n`E := âˆšÎµ0*E`, `H := âˆšÂµ0*H` and `Ïƒ := inv(Îµ)*Ïƒ/Îµ0` are\nalready introduced:\n\n```python\n    Îµ*dEz/dt + Îµ*Ïƒ*Ez = c*dHy/dx - c*dHx/dy\n```\n\nThis becomes in the frequency domain:\n\n```python\n    iÏ‰*Îµ*Ez + Îµ*Ïƒ*Ez = c*dHy/dx - c*dHx/dy\n```\n\nWe can split this equation in a x-propagating wave and a y-propagating wave:\n\n```python\n    iÏ‰*Îµ*Ezx + Îµ*Ïƒx*Ezx = iÏ‰*Îµ*(1 + Ïƒx/iÏ‰)*Ezx = c*dHy/dx\n    iÏ‰*Îµ*Ezy + Îµ*Ïƒy*Ezy = iÏ‰*Îµ*(1 + Ïƒy/iÏ‰)*Ezy = -c*dHx/dy\n```\n\nWe can define the `S`-operators as follows\n\n```python\n    Su = 1 + Ïƒu/iÏ‰          with u in {x, y, z}\n```\n\nIn general, we prefer to add a stability factor `au` and a scaling factor `ku` to `Su`:\n\n```python\n    Su = ku + Ïƒu/(iÏ‰+au)    with u in {x, y, z}\n```\n\nSumming the two equations for `Ez` back together after dividing by the respective `S`-operator gives\n\n```python\n    iÏ‰*Îµ*Ez = (c/Sx)*dHy/dx - (c/Sy)*dHx/dy\n```\n\nConverting this back to the time domain gives\n\n```python\n    Îµ*dEz/dt = c*sx[*]dHy/dx - c*sx[*]dHx/dy\n```\n\nwhere `sx` denotes the inverse Fourier transform of `(1/Sx)` and `[*]` denotes a convolution.\nThe expression for `su` can be proven [after some derivation] to look as follows:\n\n```python\n    su = (1/ku)*Î´(t) + Cu(t)    with u in {x, y, z}\n```\n\nwhere `Î´(t)` denotes the Dirac delta function and `C(t)` an exponentially\ndecaying function given by:\n\n```python\n    Cu(t) = -(Ïƒu/ku**2)*exp(-(au+Ïƒu/ku)*t)     for all t > 0 and u in {x, y, z}\n```\n\nPlugging this in gives:\n\n```python\n    dEz/dt = (c/kx)*inv(Îµ)*dHy/dx - (c/ky)*inv(Îµ)*dHx/dy + c*inv(Îµ)*Cx[*]dHy/dx - c*inv(Îµ)*Cx[*]dHx/dy\n           = (c/kx)*inv(Îµ)*dHy/dx - (c/ky)*inv(Îµ)*dHx/dy + c*inv(Îµ)*Ð¤ez/du      with du=dx=dy=dz\n```\n\nThis can be written as an update equation:\n\n```python\n    Ez += (1/kx)*sc*inv(Îµ)*dHy - (1/ky)*sc*inv(Îµ)*dHx + sc*inv(Îµ)*Ð¤ez\n```\n\nWhere we defined `Ð¤eu` as\n\n```python\n    Ð¤eu = Î¨euv - Î¨ezw           with u, v, w in {x, y, z}\n```\n\nand `Î¨euv` as the convolution updating the component `Eu` by taking the derivative of `Hw` in the `v` direction:\n\n```python\n    Î¨euv = dv*Cv[*]dHw/dv     with u, v, w in {x, y, z}\n```\n\nThis can be rewritten [after some derivation] as an update equation in itself:\n\n```python\n     Î¨euv = bv*Î¨euv + cv*dv*(dHw/dv)\n          = bv*Î¨euv + cv*dHw            with u, v, w in {x, y, z}\n```\n\nWhere the constants `bu` and `cu` are derived to be:\n\n```python\n    bu = exp(-(au + Ïƒu/ku)*dt)              with u in {x, y, z}\n    cu = Ïƒu*(bu - 1)/(Ïƒu*ku + au*ku**2)     with u in {x, y, z}\n```\n\nThe final PML algorithm for the electric field now becomes:\n\n1. Update `Ð¤e=[Ð¤ex, Ð¤ey, Ð¤ez]` by using the update equation for the `Î¨`-components.\n2. Update the electric fields the normal way\n3. Add `Ð¤e` to the electric fields.\n\nor as python code:\n\n```python\nclass PML(Boundary):\n    # ... [initialization]\n    def update_phi_E(self): # update convolution\n        self.psi_Ex *= self.bE\n        self.psi_Ey *= self.bE\n        self.psi_Ez *= self.bE\n\n        c = self.cE\n        Hx = self.grid.H[self.locx]\n        Hy = self.grid.H[self.locy]\n        Hz = self.grid.H[self.locz]\n\n        self.psi_Ex[:, 1:, :, 1] += (Hz[:, 1:, :] - Hz[:, :-1, :]) * c[:, 1:, :, 1]\n        self.psi_Ex[:, :, 1:, 2] += (Hy[:, :, 1:] - Hy[:, :, :-1]) * c[:, :, 1:, 2]\n\n        self.psi_Ey[:, :, 1:, 2] += (Hx[:, :, 1:] - Hx[:, :, :-1]) * c[:, :, 1:, 2]\n        self.psi_Ey[1:, :, :, 0] += (Hz[1:, :, :] - Hz[:-1, :, :]) * c[1:, :, :, 0]\n\n        self.psi_Ez[1:, :, :, 0] += (Hy[1:, :, :] - Hy[:-1, :, :]) * c[1:, :, :, 0]\n        self.psi_Ez[:, 1:, :, 1] += (Hx[:, 1:, :] - Hx[:, :-1, :]) * c[:, 1:, :, 1]\n\n        self.phi_E[..., 0] = self.psi_Ex[..., 1] - self.psi_Ex[..., 2]\n        self.phi_E[..., 1] = self.psi_Ey[..., 2] - self.psi_Ey[..., 0]\n        self.phi_E[..., 2] = self.psi_Ez[..., 0] - self.psi_Ez[..., 1]\n\n    def update_E(self): # update PML located at self.loc\n        self.grid.E[self.loc] += (\n            self.grid.courant_number\n            * self.grid.inverse_permittivity[self.loc]\n            * self.phi_E\n        )\n\nclass Grid:\n    # ... [initialization]\n    def update_E(self):\n        for boundary in self.boundaries:\n            boundary.update_phi_E()\n        # ... [electric field update equation]\n        # ... [electric field source update equations]\n        for boundary in self.boundaries:\n            boundary.update_E()\n```\n\nThe same has to be applied for the magnetic field.\n\nThese update equations for the PML were based on\n[Schneider, Chap. 11](https://www.eecs.wsu.edu/~schneidj/ufdtd).\n\n## Units\n\n<!---\nflaport, if you have the time, I'd appreciate it if you could confirm\nthat I've understood this correctly.\nI'm adding this because I got pretty confused regarding the units;\nif you think it's self-evident, feel free to remove.\n\nIn particular, is the H := âˆšÂµ0*H scaling really applied nowhere in the library?\nCan this be assumed?\n--->\n\nAs a bare FDTD library, this is dimensionally agnostic for any unit system you may choose.\nNo conversion factors are applied within the library API; this is left to the user.\n(The code used to calculate the Courant limit may be a sticking point depending on the time scale involved).\n\nHowever, as noted above (`H := âˆšÂµ0*H`), it is generally good numerical practice to scale all values to\nget the maximum precision from floating-point types.\n\nIn particular, a scaling scheme detailed in [\"Novel architectures for brain-inspired photonic computers\"](https://www.photonics.intec.ugent.be/download/phd_259.pdf), Chapters 4.1.2 and 4.1.6, is highly recommended.\n\nA set of conversion functions to and from reduced units are available for users in conversions.py.\n\n<!---\nOn the other hand, use of this scaling scheme really makes most of the new functions less useful,\nbecause the results don't have physical dimensions by default and have to be scaled by weird\ncoefficients by the user (scale impedance?!?)\n\ngrid.H_scaling_factor = sqrt(mu0) ?\n--->\n\n## Linter\n\nYou can run a linter in the root using `pylint fdtd`.\n\n## License\n\nÂ© Floris laporte - [MIT License](license)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/flaport/fdtd",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fdtd",
    "package_url": "https://pypi.org/project/fdtd/",
    "platform": null,
    "project_url": "https://pypi.org/project/fdtd/",
    "project_urls": {
      "Homepage": "http://github.com/flaport/fdtd"
    },
    "release_url": "https://pypi.org/project/fdtd/0.2.8/",
    "requires_dist": [
      "tqdm",
      "numpy",
      "scipy",
      "matplotlib",
      "black ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "nbstripout ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "ipykernel ; extra == 'dev'",
      "line-profiler ; extra == 'dev'",
      "bump2version ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "build ; extra == 'dev'",
      "sphinx ; extra == 'docs'",
      "nbsphinx ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'"
    ],
    "requires_python": "",
    "summary": "a 3D electromagnetic FDTD simulator written in Python",
    "version": "0.2.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17462118,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba87a2c62e92087cc39b1b694f870a2812577110d3bc1e46bec2c0e6d51f542d",
          "md5": "6c45cd7bb7b96ca76bc78ee7174e556e",
          "sha256": "c865379a6e5e3a993d8af050d4a6355356cd9ce5b150360a079fbd8e31e322fd"
        },
        "downloads": -1,
        "filename": "fdtd-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c45cd7bb7b96ca76bc78ee7174e556e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26546,
        "upload_time": "2019-03-11T19:04:14",
        "upload_time_iso_8601": "2019-03-11T19:04:14.663853Z",
        "url": "https://files.pythonhosted.org/packages/ba/87/a2c62e92087cc39b1b694f870a2812577110d3bc1e46bec2c0e6d51f542d/fdtd-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0095495ce07e2c294c5f7d031215977ba0048a56aa06bb0f67744f0c65c58c95",
          "md5": "5a54ced69cd9bd4b96d05b61f6d0f550",
          "sha256": "398935001570663d969001b291ab4c2e9d256d9c0eb6c0f46aacb2f876f13e9a"
        },
        "downloads": -1,
        "filename": "fdtd-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5a54ced69cd9bd4b96d05b61f6d0f550",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30925,
        "upload_time": "2019-03-11T19:04:17",
        "upload_time_iso_8601": "2019-03-11T19:04:17.134779Z",
        "url": "https://files.pythonhosted.org/packages/00/95/495ce07e2c294c5f7d031215977ba0048a56aa06bb0f67744f0c65c58c95/fdtd-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9f1fd5968fe67686e06955ae0baf014f9f022f620d2fa86c5653b701b009007",
          "md5": "58bc84e1b01a815480655bbbe85f5c6a",
          "sha256": "8f3a365f48901089b3bf47088a5e5374e9f3fcbe9e8f2d32aaecea3094ed2a5a"
        },
        "downloads": -1,
        "filename": "fdtd-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58bc84e1b01a815480655bbbe85f5c6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27690,
        "upload_time": "2020-07-22T13:27:48",
        "upload_time_iso_8601": "2020-07-22T13:27:48.842060Z",
        "url": "https://files.pythonhosted.org/packages/d9/f1/fd5968fe67686e06955ae0baf014f9f022f620d2fa86c5653b701b009007/fdtd-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "063ff67367bd269deeca6db351310930090d5aa51ea750dbd0549321f5d6a51c",
          "md5": "c881b29304132dc88cf2a281602f523a",
          "sha256": "ae1545a9e8789fa18745f0f25e129f7ccf9053759fabbf89c22a9ee0e0643789"
        },
        "downloads": -1,
        "filename": "fdtd-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c881b29304132dc88cf2a281602f523a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31922,
        "upload_time": "2020-07-22T13:27:50",
        "upload_time_iso_8601": "2020-07-22T13:27:50.809850Z",
        "url": "https://files.pythonhosted.org/packages/06/3f/f67367bd269deeca6db351310930090d5aa51ea750dbd0549321f5d6a51c/fdtd-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35b995b39cee268ab210b159daa7025e9bcf1807b4eb010796536eb6bd5e0e6c",
          "md5": "2af8ea35ab747ddeb49b1c80ff7b6b99",
          "sha256": "57afc69d6f6c8b3f4729438f558291c1e981931faaccb56a38cd4ab0b7fdfba9"
        },
        "downloads": -1,
        "filename": "fdtd-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2af8ea35ab747ddeb49b1c80ff7b6b99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28893,
        "upload_time": "2021-04-14T11:27:00",
        "upload_time_iso_8601": "2021-04-14T11:27:00.792103Z",
        "url": "https://files.pythonhosted.org/packages/35/b9/95b39cee268ab210b159daa7025e9bcf1807b4eb010796536eb6bd5e0e6c/fdtd-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bbee953ebf996f5bd3ae51f094b9b2aeeaaadca691c0c79d65b436aec7e9059",
          "md5": "8fde8f979d42406df5ca5ad4b3a68fd2",
          "sha256": "97e7deeae4c770b4d19ed7245c5696fa2953afd330f8b08a9fadc30dc72b4df5"
        },
        "downloads": -1,
        "filename": "fdtd-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8fde8f979d42406df5ca5ad4b3a68fd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34456,
        "upload_time": "2021-04-14T11:27:03",
        "upload_time_iso_8601": "2021-04-14T11:27:03.217029Z",
        "url": "https://files.pythonhosted.org/packages/6b/be/e953ebf996f5bd3ae51f094b9b2aeeaaadca691c0c79d65b436aec7e9059/fdtd-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc1a3e9e1bfb1e76d25caad8c4686aae8436188479cabfb80397e8846baaa801",
          "md5": "0d6d598c921652019ba3391fe66d526b",
          "sha256": "c3e124ae751962b845bcb9467f63d27f13731add823e93e78f9c4ec9cc0e2431"
        },
        "downloads": -1,
        "filename": "fdtd-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d6d598c921652019ba3391fe66d526b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33132,
        "upload_time": "2021-10-03T10:21:51",
        "upload_time_iso_8601": "2021-10-03T10:21:51.846923Z",
        "url": "https://files.pythonhosted.org/packages/bc/1a/3e9e1bfb1e76d25caad8c4686aae8436188479cabfb80397e8846baaa801/fdtd-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b76eb3bd50cd5dbfc49fd38969b988da3b9e1d8bc8cccb594ac881a9503e15ea",
          "md5": "ac2aa9c3b0bd342382395b80541db1a5",
          "sha256": "46d57cbfe80792a8736a3bd8f6040c95b672173a7037e0b80dfc46ffe2a53efc"
        },
        "downloads": -1,
        "filename": "fdtd-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ac2aa9c3b0bd342382395b80541db1a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38748,
        "upload_time": "2021-10-03T10:21:53",
        "upload_time_iso_8601": "2021-10-03T10:21:53.429028Z",
        "url": "https://files.pythonhosted.org/packages/b7/6e/b3bd50cd5dbfc49fd38969b988da3b9e1d8bc8cccb594ac881a9503e15ea/fdtd-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20a09af6cf708c195f2148614ad39c435ead0c23ee3ae9fcf4f61793dc86ba1f",
          "md5": "1cdb09668a1d623bef0979e88b89b82b",
          "sha256": "fe0dd97ea8446170509e69ce99811ec97897a2e5cefcccef6ccda2641511bf71"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cdb09668a1d623bef0979e88b89b82b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43568,
        "upload_time": "2021-10-09T16:30:26",
        "upload_time_iso_8601": "2021-10-09T16:30:26.366660Z",
        "url": "https://files.pythonhosted.org/packages/20/a0/9af6cf708c195f2148614ad39c435ead0c23ee3ae9fcf4f61793dc86ba1f/fdtd-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6134fbfd7bc606985c8a8988525564842b3a8d9db7cdbaad8cb5a9d4ed0d4192",
          "md5": "6d0de45aebe513aa061bd6670508a38c",
          "sha256": "b0357a65aa678995882df9da595f9bfd9959e4031c46808249485c32a4dd89a5"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d0de45aebe513aa061bd6670508a38c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49162,
        "upload_time": "2021-10-09T16:30:28",
        "upload_time_iso_8601": "2021-10-09T16:30:28.426132Z",
        "url": "https://files.pythonhosted.org/packages/61/34/fbfd7bc606985c8a8988525564842b3a8d9db7cdbaad8cb5a9d4ed0d4192/fdtd-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2a9cc19a1e169f68d66da0e05e0418f5982c01612750b81947f3a57c9d41257",
          "md5": "f727a8dd91527b978fee9e869f01839c",
          "sha256": "ad541ce604539c944648989f23cd73322918e8f62e77d2de7e19a016b2a309ee"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f727a8dd91527b978fee9e869f01839c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43672,
        "upload_time": "2021-10-09T16:30:30",
        "upload_time_iso_8601": "2021-10-09T16:30:30.630779Z",
        "url": "https://files.pythonhosted.org/packages/b2/a9/cc19a1e169f68d66da0e05e0418f5982c01612750b81947f3a57c9d41257/fdtd-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fb0f8e0df4dd9e6f90b248afda2d6a0eea14447bd1f73ada11c379be7350a21",
          "md5": "8ac6492d85ec4e85ddb87117119dc639",
          "sha256": "ceeab52c9ec3aa0617c8756300eecb83b9396fa188a3f2a7aab7cd5611b86374"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ac6492d85ec4e85ddb87117119dc639",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49268,
        "upload_time": "2021-10-09T16:30:32",
        "upload_time_iso_8601": "2021-10-09T16:30:32.808884Z",
        "url": "https://files.pythonhosted.org/packages/3f/b0/f8e0df4dd9e6f90b248afda2d6a0eea14447bd1f73ada11c379be7350a21/fdtd-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e02a1c01452934cfaf5ea3bc342a4bd7f886743f3b650764984424a5f62ad9cf",
          "md5": "46b2a929189a3dc3d486e703dcafed42",
          "sha256": "426eba261c49e09fe0f39f865ca32c192d0b54b8f58d5ab1d1d6b2f781b27e88"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46b2a929189a3dc3d486e703dcafed42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44558,
        "upload_time": "2021-10-09T17:01:44",
        "upload_time_iso_8601": "2021-10-09T17:01:44.316914Z",
        "url": "https://files.pythonhosted.org/packages/e0/2a/1c01452934cfaf5ea3bc342a4bd7f886743f3b650764984424a5f62ad9cf/fdtd-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7e84e9fb29c3c807b56fa7700920d1dab8cfe39276bd67e91472ac8974ae932",
          "md5": "537887e763ce42df79a03ae52590f70c",
          "sha256": "6cc4ba21a5c6606016333c556fbe510ff1b8b1fd8711728f05703c3be2b54c8a"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "537887e763ce42df79a03ae52590f70c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49389,
        "upload_time": "2021-10-09T17:01:46",
        "upload_time_iso_8601": "2021-10-09T17:01:46.417963Z",
        "url": "https://files.pythonhosted.org/packages/d7/e8/4e9fb29c3c807b56fa7700920d1dab8cfe39276bd67e91472ac8974ae932/fdtd-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efe059310c7e45a542180f066615aa7203ce6ea2a5cabff439346a18bdc5317b",
          "md5": "1803fc64c5bd380c33e2a2d40a7b17eb",
          "sha256": "2f133f68d30f56907a5e4d795952558b0e662bd09a3c24d775b365e79b5a5c7b"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1803fc64c5bd380c33e2a2d40a7b17eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45129,
        "upload_time": "2022-05-29T05:01:18",
        "upload_time_iso_8601": "2022-05-29T05:01:18.886436Z",
        "url": "https://files.pythonhosted.org/packages/ef/e0/59310c7e45a542180f066615aa7203ce6ea2a5cabff439346a18bdc5317b/fdtd-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f07b9dbcf59607431ead520cf34704d04bd3cf78cd4a42e06f3f6238797287a8",
          "md5": "e2aac35da979257ed98e07a2ec653c9e",
          "sha256": "df118085f9feb0deb516bb8419f29858dde8b1102e2afaf298a15df759f40e84"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e2aac35da979257ed98e07a2ec653c9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50030,
        "upload_time": "2022-05-29T05:01:21",
        "upload_time_iso_8601": "2022-05-29T05:01:21.855807Z",
        "url": "https://files.pythonhosted.org/packages/f0/7b/9dbcf59607431ead520cf34704d04bd3cf78cd4a42e06f3f6238797287a8/fdtd-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "970c0ecc03365e5d100cd6ccc9cf5296224e8764779007ffb41fee3880c5ec1d",
          "md5": "ef34c09111da084d662ecc4ee00985e7",
          "sha256": "5ca954382c6bd0111391d514c1c92f5cf84bd8de99f994a7cda3740cfd3a0607"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef34c09111da084d662ecc4ee00985e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45126,
        "upload_time": "2022-11-21T14:53:57",
        "upload_time_iso_8601": "2022-11-21T14:53:57.904471Z",
        "url": "https://files.pythonhosted.org/packages/97/0c/0ecc03365e5d100cd6ccc9cf5296224e8764779007ffb41fee3880c5ec1d/fdtd-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f0544f21c432c8bc4982ef5aaae4db1945b14545769553e08ccf91f5131bc56",
          "md5": "173d19445848b673eb84c779fff7330d",
          "sha256": "fe62ff248216ed31ca3a3cef59920f3a167e0c458c58911e4751430a2253e72b"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "173d19445848b673eb84c779fff7330d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49939,
        "upload_time": "2022-11-21T14:54:00",
        "upload_time_iso_8601": "2022-11-21T14:54:00.814160Z",
        "url": "https://files.pythonhosted.org/packages/1f/05/44f21c432c8bc4982ef5aaae4db1945b14545769553e08ccf91f5131bc56/fdtd-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c45796cd19e49c0739be5ebbd6a0f544a28db0bf0c34cac3ea0db84a2db73ec",
          "md5": "2eb82d42c31066e1170bc16869d02316",
          "sha256": "b242848a8453a30bb77af2c5ebfe4a359d3d5ef8d0c8aafb3cada6c775c1ff01"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2eb82d42c31066e1170bc16869d02316",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45137,
        "upload_time": "2023-02-02T21:13:20",
        "upload_time_iso_8601": "2023-02-02T21:13:20.035674Z",
        "url": "https://files.pythonhosted.org/packages/3c/45/796cd19e49c0739be5ebbd6a0f544a28db0bf0c34cac3ea0db84a2db73ec/fdtd-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e912cca00d5dde04665a671be543f7bbc3520a1abd5d6c722a63b372a58e78d2",
          "md5": "0836075d1e3d3ee158621c2394bfef59",
          "sha256": "aef37b7347b28dc09afe3e4d573c6ef9f35a6bf191137946fa74b2fb5808d322"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "0836075d1e3d3ee158621c2394bfef59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50033,
        "upload_time": "2023-02-02T21:13:22",
        "upload_time_iso_8601": "2023-02-02T21:13:22.696763Z",
        "url": "https://files.pythonhosted.org/packages/e9/12/cca00d5dde04665a671be543f7bbc3520a1abd5d6c722a63b372a58e78d2/fdtd-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1f8934fe63934f93a42ecc296104ee4732539a5f2d1e9fc8b79893d786446e9",
          "md5": "ddcfde9836c2b510478304e811801005",
          "sha256": "25327967d25549eacfd7b024c6ee8e3bb9c4b80408058d8b01f396200f9f9588"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ddcfde9836c2b510478304e811801005",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45143,
        "upload_time": "2023-03-27T14:34:39",
        "upload_time_iso_8601": "2023-03-27T14:34:39.831349Z",
        "url": "https://files.pythonhosted.org/packages/a1/f8/934fe63934f93a42ecc296104ee4732539a5f2d1e9fc8b79893d786446e9/fdtd-0.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a18f30d42b97869f2aaec3314a8d55d18b88bdd57c6712a116bb3d6f04e734f1",
          "md5": "a2eb374e019099db569b8d2c85bd2f6e",
          "sha256": "e33a4d7f7072dfc18f16854239cf31fe8a2135b02237d07d054e0b7ed320424a"
        },
        "downloads": -1,
        "filename": "fdtd-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a2eb374e019099db569b8d2c85bd2f6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55774,
        "upload_time": "2023-03-27T14:34:42",
        "upload_time_iso_8601": "2023-03-27T14:34:42.982486Z",
        "url": "https://files.pythonhosted.org/packages/a1/8f/30d42b97869f2aaec3314a8d55d18b88bdd57c6712a116bb3d6f04e734f1/fdtd-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1f8934fe63934f93a42ecc296104ee4732539a5f2d1e9fc8b79893d786446e9",
        "md5": "ddcfde9836c2b510478304e811801005",
        "sha256": "25327967d25549eacfd7b024c6ee8e3bb9c4b80408058d8b01f396200f9f9588"
      },
      "downloads": -1,
      "filename": "fdtd-0.2.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ddcfde9836c2b510478304e811801005",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 45143,
      "upload_time": "2023-03-27T14:34:39",
      "upload_time_iso_8601": "2023-03-27T14:34:39.831349Z",
      "url": "https://files.pythonhosted.org/packages/a1/f8/934fe63934f93a42ecc296104ee4732539a5f2d1e9fc8b79893d786446e9/fdtd-0.2.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a18f30d42b97869f2aaec3314a8d55d18b88bdd57c6712a116bb3d6f04e734f1",
        "md5": "a2eb374e019099db569b8d2c85bd2f6e",
        "sha256": "e33a4d7f7072dfc18f16854239cf31fe8a2135b02237d07d054e0b7ed320424a"
      },
      "downloads": -1,
      "filename": "fdtd-0.2.8.tar.gz",
      "has_sig": false,
      "md5_digest": "a2eb374e019099db569b8d2c85bd2f6e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 55774,
      "upload_time": "2023-03-27T14:34:42",
      "upload_time_iso_8601": "2023-03-27T14:34:42.982486Z",
      "url": "https://files.pythonhosted.org/packages/a1/8f/30d42b97869f2aaec3314a8d55d18b88bdd57c6712a116bb3d6f04e734f1/fdtd-0.2.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}