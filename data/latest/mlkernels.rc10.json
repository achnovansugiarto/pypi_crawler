{
  "info": {
    "author": "Wessel Bruinsma",
    "author_email": "wessel.p.bruinsma@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# [MLKernels](http://github.com/wesselb/mlkernels)\n\n[![CI](https://github.com/wesselb/mlkernels/workflows/CI/badge.svg)](https://github.com/wesselb/mlkernels/actions?query=workflow%3ACI)\n[![Coverage Status](https://coveralls.io/repos/github/wesselb/mlkernels/badge.svg?branch=main)](https://coveralls.io/github/wesselb/mlkernels?branch=main)\n[![Latest Docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://wesselb.github.io/mlkernels)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nKernels, the machine learning ones (also, mean functions)\n\nContents:\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [AutoGrad, TensorFlow, PyTorch, or JAX? Your Choice!](#autograd-tensorflow-pytorch-or-jax-your-choice)\n- [Available Kernels](#available-kernels)\n- [Available Means](#available-means)\n- [Compositional Design](#compositional-design)\n- [Displaying Kernels and Means](#displaying-kernels-and-means)\n- [Properties of Kernels and Means](#properties-of-kernels-and-means)\n- [Structured Matrix Types](#structured-matrix-types)\n- [Implementing Your Own Kernel](#implementing-your-own-kernel)\n\nTLDR:\n\n```python\n>>> from mlkernels import EQ, Linear\n\n>>> k1 = 2 * Linear() + 1\n\n>>> k1\n2 * Linear() + 1\n\n>>> k1(np.linspace(0, 1, 3))  # Structured matrices enable efficiency.\n<low-rank matrix: shape=3x3, dtype=float64, rank=2\n left=[[0.  1. ]\n       [0.5 1. ]\n       [1.  1. ]]\n middle=[[2. 0.]\n         [0. 1.]]\n right=[[0.  1. ]\n        [0.5 1. ]\n        [1.  1. ]]>\n\n>>> import lab as B\n\n>>> B.dense(k1(np.linspace(0, 1, 3)))  # Discard structure: get a regular NumPy array.\narray([[1. , 1. , 1. ],\n       [1. , 1.5, 2. ],\n       [1. , 2. , 3. ]])\n\n>>> k2 = 2 + EQ() * Linear()\n\n>>> k2\n2 * 1 + EQ() * Linear()\n\n>>> k2(np.linspace(0, 1, 3))\n<dense matrix: shape=3x3, dtype=float64\n mat=[[2.    2.    2.   ]\n      [2.    2.25  2.441]\n      [2.    2.441 3.   ]]>\n\n>>> B.dense(k1(np.linspace(0, 1, 3)))\narray([[2.        , 2.        , 2.        ],\n       [2.        , 2.25      , 2.44124845],\n       [2.        , 2.44124845, 3.        ]])\n```\n\n## Installation\n\n```\npip install mlkernels\n```\n\nSee also [the instructions here](https://gist.github.com/wesselb/4b44bf87f3789425f96e26c4308d0adc).\n\n## Usage\n\nLet `k` be a kernel, e.g. `k = EQ()`.\n\n*\n    `k(x, y)` constructs the _kernel matrix_ for all pairs of points between `x` and\n    `y`.\n*\n    `k(x)` is shorthand for `k(x, x)`.\n*\n    `k.elwise(x, y)` constructs the _kernel vector_ pairing the points in `x` and \n    `y` element-wise, which will be a _rank-2 column vector_.\n\nExample:\n\n```python\n>>> k = EQ()\n\n>>> k(np.linspace(0, 1, 3))\n<dense matrix: shape=3x3, dtype=float64\n mat=[[1.    0.882 0.607]\n      [0.882 1.    0.882]\n      [0.607 0.882 1.   ]]>\n \n>>> k.elwise(np.linspace(0, 1, 3), 0)\narray([[1.        ],\n       [0.8824969 ],\n       [0.60653066]])\n```\n\nLet `m` be a mean, e.g. `m = TensorProductMean(lambda x: x ** 2)`.\n\n*\n    `m(x)` constructs the _mean vector_ for the points in `x`, which will be a\n    _rank-2 column vector_.\n\nExample:\n\n```python\n>>> m = TensorProductMean(lambda x: x ** 2)\n\n>>> m(np.linspace(0, 1, 3))\narray([[0.  ],\n       [0.25],\n       [1.  ]])\n```\n\nInputs to kernels and means are interpreted in the following way:\n\n*\n    If the input `x` is a _rank-0 tensor_, i.e. a scalar, then `x` refers to a\n    single input location.\n    For example, `0` simply refers to the sole input location `0`.\n\n*\n    If the input `x` is a _rank-1 tensor_, i.e. a vector, then every element of `x` is\n    interpreted as a separate input location.\n    For example, `np.linspace(0, 1, 10)` generates 10 different input locations \n    ranging from `0` to `1`.\n\n*\n    If the input `x` is a _rank-2 tensor_, i.e. a matrix, then every _row_ of `x` is\n    interpreted as a separate input location. In this case inputs are\n    multi-dimensional, and the columns correspond to the various input dimensions.\n    \n*\n    If the input `x` is a _tensor of rank 3 or higher_, then the input is\n    interpreted as a batch of matrices where the matrix dimensions are the\n    two outermost dimensions.\n    \nExample:\n\n```python\n>>> k = EQ()\n\n>>> k(0)  # One scalar input\n<dense matrix: batch=(), shape=(1, 1), dtype=float64\n mat=[[1.]]>\n\n>>> k(np.linspace(0, 1, 3))  # Three single-dimensional inputs\n<dense matrix: batch=(), shape=(3, 3), dtype=float64\n mat=[[1.    0.882 0.607]\n      [0.882 1.    0.882]\n      [0.607 0.882 1.   ]]>\n\n>>> k(np.random.randn(3, 2))  # Three two-dimensional inputs\n<dense matrix: batch=(), shape=(3, 3), dtype=float64\n mat=[[1.    0.606 0.399]\n      [0.606 1.    0.931]\n      [0.399 0.931 1.   ]]>\n\n>>> k(np.random.randn(2, 3, 2))  # A batch of two times three two-dimensional inputs\n<dense matrix: batch=(2,), shape=(3, 3), dtype=float64\n mat=[[[1.    0.15  0.559]\n       [0.15  1.    0.678]\n       [0.559 0.678 1.   ]]\n\n      [[1.    0.891 0.627]\n       [0.891 1.    0.638]\n       [0.627 0.638 1.   ]]]>\n```\n\nFinally, if you are simultaneously computing means and kernel matrices, then speed-ups\nmay be possible.\nTo obtain these speed-ups, use `mean_var` instead of first calling `m(x)` and then\n`k(x)`;\nand use `mean_var_diag` instead of first calling `m(x)` and then `k.elwise(x)`.\n\nExample:\n\n```python\n>>> from mlkernels import mean_var, mean_var_diag\n\n>>> m = TensorProductMean(lambda x: x ** 2)\n\n>>> k = EQ()\n\n>>> x = np.linspace(0, 1, 3)\n\n>>> m(x), k(x)         # Less efficient\n(array([[0.  ],\n        [0.25],\n        [1.  ]]),\n <dense matrix: batch=(), shape=(3, 3), dtype=float64\n  mat=[[1.    0.882 0.607]\n       [0.882 1.    0.882]\n       [0.607 0.882 1.   ]]>)\n\n>>> mean_var(m, k, x)  # More efficient\n(array([[0.  ],\n        [0.25],\n        [1.  ]]),\n <dense matrix: batch=(), shape=(3, 3), dtype=float64\n  mat=[[1.    0.882 0.607]\n       [0.882 1.    0.882]\n       [0.607 0.882 1.   ]]>)\n\n>>> m(x), k.elwise(x)       # Less efficient\n(array([[0.  ],\n        [0.25],\n        [1.  ]]),\n array([[1.],\n        [1.],\n        [1.]]))\n\n>>> mean_var_diag(m, k, x)  # More efficient\n(array([[0.  ],\n        [0.25],\n        [1.  ]]),\n array([[1.],\n        [1.],\n        [1.]]))\n```\n\n    \n## AutoGrad, TensorFlow, PyTorch, or JAX? Your Choice!\n\n```python\nfrom mlkernels.autograd import EQ, Linear\n```\n\n```python\nfrom mlkernels.tensorflow import EQ, Linear\n```\n\n```python\nfrom mlkernels.torch import EQ, Linear\n```\n\n```python\nfrom mlkernels.jax import EQ, Linear\n```\n\n## Available Kernels\n\nSee [here](https://wesselb.github.io/mlkernels/docs/_build/html/readme.html#available-kernels)\nfor a nicely rendered version of the list below.\n\nConstants function as constant kernels.\nBesides that, the following kernels are available:\n\n* `EQ()`, the exponentiated quadratic:\n\n    $$ k(x, y) = \\exp\\left( -\\frac{1}{2}\\|x - y\\|^2 \\right); $$\n \n* `CEQ(alpha)`, the causal exponentiated quadratic:\n\n  $$ k(x, y) = \\left(1 - \\operatorname{erf}\\left( \\frac{\\alpha}{4}\\|x - y\\| \\right)\\right)\\exp\\left( -\\frac{1}{2}\\|x - y\\|^2 \\right); $$\n\n* `RQ(alpha)`, the rational quadratic:\n\n    $$ k(x, y) = \\left( 1 + \\frac{\\|x - y\\|^2}{2 \\alpha} \\right)^{-\\alpha}; $$\n\n* `Matern12()` or `Exp()`, the Matern–1/2 kernel:\n\n    $$ k(x, y) = \\exp\\left( -\\|x - y\\| \\right); $$\n\n* `Matern32()`, the Matern–3/2 kernel:\n\n    $$ k(x, y) = \\left(\n        1 + \\sqrt{3}\\|x - y\\|\n        \\right)\\exp\\left(-\\sqrt{3}\\|x - y\\|\\right); $$\n\n* `Matern52()`, the Matern–5/2 kernel:\n\n    $$ k(x, y) = \\left(\n        1 + \\sqrt{5}\\|x - y\\| + \\frac{5}{3} \\|x - y\\|^2\n       \\right)\\exp\\left(-\\sqrt{3}\\|x - y\\|\\right); $$\n\n* `Linear()`, the linear kernel:\n\n    $$ k(x, y) = \\langle x, y \\rangle; $$\n\n* `Delta(epsilon=1e-6)`, the Kronecker delta kernel:\n\n    $$ k(x, y) = \\begin{cases}\n        1 & \\text{if } \\|x - y\\| < \\varepsilon, \\\\\n        0 & \\text{otherwise};\n       \\end{cases} $$\n       \n* `DecayingKernel(alpha, beta)`:\n\n    $$ k(x, y) = \\frac{\\|\\beta\\|^\\alpha}{\\|x + y + \\beta\\|^\\alpha}; $$\n    \n* `LogKernel()`:\n\n    $$ k(x, y) = \\frac{\\log(1 + \\|x - y\\|)}{\\|x - y\\|}; $$\n\n* `PosteriorKernel(k_ij, k_zi, k_zj, z, K_z)`:\n\n    $$ k(x, y) = k_{ij}(x, y) - k_{iz}(x, z) K_z^{-1} k_{zj}(x, y); $$\n  \n* `SubspaceKernel(k_zi, k_zj, z, A)`:\n  \n    $$ k(x, y) = k_{iz}(x, z) A^{-1} k_{zj}(x, y); $$\n\n* `TensorProductKernel(f)`:\n\n    $$ k(x, y) = f(x)f(y). $$\n\n    Adding or multiplying a `FunctionType` `f` to or with a kernel will\n    automatically translate `f` to `TensorProductKernel(f)`. For example,\n    `f * k` will translate to `TensorProductKernel(f) * k`, and `f + k` will\n    translate to `TensorProductKernel(f) + k`.\n  \n## Available Means\n\nConstants function as constant means.\nBesides that, the following means are available:\n\n* `TensorProductMean(f)`:\n\n    $$ m(x) = f(x). $$\n\n    Adding or multiplying a `FunctionType` `f` to or with a mean will \n    automatically translate `f` to `TensorProductMean(f)`. For example,\n    `f * m` will translate to `TensorProductMean(f) * m`, and `f + m` will \n    translate to `TensorProductMean(f) + m`.\n\n## Compositional Design\n\n*\n    Add and subtract kernels and means.\n\n    Example:\n    \n    ```python\n    >>> EQ() + Matern12()\n    EQ() + Matern12()\n\n    >>> EQ() + EQ()\n    2 * EQ()\n\n    >>> EQ() + 1\n    EQ() + 1\n\n    >>> EQ() + 0\n    EQ()\n\n    >>> EQ() - Matern12()\n    EQ() - Matern12()\n\n    >>> EQ() - EQ()\n    0\n    ```\n\n*\n    Multiply kernels and means.\n    \n    Example:\n\n    ```python\n    >>> EQ() * Matern12()\n    EQ() * Matern12()\n\n    >>> 2 * EQ()\n    2 * EQ()\n\n    >>> 0 * EQ()\n    0\n    ```\n\n*\n    Shift kernels and means.\n\n    Definition:\n    \n    ```python\n    k.shift(c)(x, y) == k(x - c, y - c)\n\n    k.shift(c1, c2)(x, y) == k(x - c1, y - c2)\n    ```\n    \n    Example:\n    \n    ```python\n    >>> Linear().shift(1)\n    Linear() shift 1\n\n    >>> EQ().shift(1, 2)\n    EQ() shift (1, 2)\n    ```\n\n*\n    Stretch kernels and means.\n\n    Definition:\n    \n    ```python\n    k.stretch(c)(x, y) == k(x / c, y / c)\n\n    k.stretch(c1, c2)(x, y) == k(x / c1, y / c2)\n    ```\n  \n    Example:    \n    \n    ```python\n    >>> EQ().stretch(2)\n    EQ() > 2\n\n    >>> EQ().stretch(2, 3)\n    EQ() > (2, 3)\n    ```\n\n*\n    Select particular input dimensions of kernels and means.\n\n    Definition:\n\n    ```python\n    k.select([0])(x, y) == k(x[:, 0], y[:, 0])\n  \n    k.select([0, 1])(x, y) == k(x[:, [0, 1]], y[:, [0, 1]])\n\n    k.select([0], [1])(x, y) == k(x[:, 0], y[:, 1])\n\n    k.select(None, [1])(x, y) == k(x, y[:, 1])\n    ```\n\n    Example:\n\n    ```python\n    >>> EQ().select([0])\n    EQ() : [0]\n  \n    >>> EQ().select([0, 1])\n    EQ() : [0, 1]\n\n    >>> EQ().select([0], [1])\n    EQ() : ([0], [1])\n\n    >>> EQ().select(None, [1])\n    EQ() : (None, [1])\n    ```\n\n*\n    Transform the inputs of kernels and means.\n\n    Definition:\n\n    ```python\n    k.transform(f)(x, y) == k(f(x), f(y))\n\n    k.transform(f1, f2)(x, y) == k(f1(x), f2(y))\n\n    k.transform(None, f)(x, y) == k(x, f(y))\n    ```\n        \n    Example:\n        \n    ```python\n    >>> EQ().transform(f)\n    EQ() transform f\n\n    >>> EQ().transform(f1, f2)\n    EQ() transform (f1, f2)\n\n    >>> EQ().transform(None, f)\n    EQ() transform (None, f)\n    ```\n\n*\n    Numerically, but efficiently, take derivatives of kernels and means.\n    This currently only works in TensorFlow and does not yet support batched\n    inputs.\n\n    Definition:\n\n    ```python\n    k.diff(0)(x, y) == d/d(x[:, 0]) d/d(y[:, 0]) k(x, y)\n\n    k.diff(0, 1)(x, y) == d/d(x[:, 0]) d/d(y[:, 1]) k(x, y)\n\n    k.diff(None, 1)(x, y) == d/d(y[:, 1]) k(x, y)\n    ```\n        \n    Example:\n\n    ```python\n    >>> EQ().diff(0)\n    d(0) EQ()\n\n    >>> EQ().diff(0, 1)\n    d(0, 1) EQ()\n\n    >>> EQ().diff(None, 1)\n    d(None, 1) EQ()\n    ```\n\n*\n    Make kernels periodic. This is not implemented for means.\n\n    Definition:\n\n    ```python\n    k.periodic(2 pi / w)(x, y) == k((sin(w * x), cos(w * x)), (sin(w * y), cos(w * y)))\n    ```\n\n    Example:\n     \n    ```python\n    >>> EQ().periodic(1)\n    EQ() per 1\n    ```\n\n* \n    Reverse the arguments of kernels. This does not apply to means.\n\n    Definition:\n\n    ```python\n    reversed(k)(x, y) == k(y, x)\n    ```\n\n    Example:\n\n    ```python\n    >>> reversed(Linear())\n    Reversed(Linear())\n    ```\n    \n*\n    Extract terms and factors from sums and products respectively.\n    \n    Example:\n    \n    ```python\n    >>> (EQ() + RQ(0.1) + Linear()).term(1)\n    RQ(0.1)\n\n    >>> (2 * EQ() * Linear).factor(0)\n    2\n    ```\n    \n    Kernels and means \"wrapping\" others can be \"unwrapped\" by indexing `k[0]` or `m[0]`.\n     \n    Example:\n    \n    ```python\n    >>> reversed(Linear())\n    Reversed(Linear())\n  \n    >>> reversed(Linear())[0]\n    Linear()\n\n    >>> EQ().periodic(1)\n    EQ() per 1\n\n    >>> EQ().periodic(1)[0]\n    EQ()\n    ```\n\n## Displaying Kernels and Means\n\nKernels and means have a `display` method.\nThe `display` method accepts a callable formatter that will be applied before any value\nis printed.\nThis comes in handy when pretty printing kernels.\n\nExample:\n\n```python\n>>> print((2.12345 * EQ()).display(lambda x: f\"{x:.2f}\"))\n2.12 * EQ()\n```\n\n## Properties of Kernels and Means\n\n*\n    Kernels and means can be equated to check for equality.\n    This will attempt basic algebraic manipulations.\n    If the kernels and means are not equal _or_ equality cannot be proved,\n    then `False` is returned.\n    \n    Example of equating kernels:\n\n    ```python\n    >>>  2 * EQ() == EQ() + EQ()\n    True\n\n    >>> EQ() + Matern12() == Matern12() + EQ()\n    True\n\n    >>> 2 * Matern12() == EQ() + Matern12()\n    False\n\n    >>> EQ() + Matern12() + Linear()  == Linear() + Matern12() + EQ()  # Too hard: cannot prove equality!\n    False\n    ```\n\n\n*\n    The stationarity of a kernel `k` can always be determined by querying\n    `k.stationary`.\n\n    Example of querying the stationarity:\n\n    ```python\n    >>> EQ().stationary\n    True\n\n    >>> (EQ() + Linear()).stationary\n    False\n    ```\n\n## Structured Matrix Types\n\nMLKernels uses [an extension of LAB](https://github.com/wesselb/matrix) to\naccelerate linear algebra with structured linear algebra primitives.\n\nExample:\n\n```python\n>>> import lab as B\n\n>>> k = 2 * Delta()\n\n>>> x = np.linspace(0, 5, 10)\n\n>>> from mlkernels import pairwise\n\n>>> k(x)  # Preserve structure.\n<diagonal matrix: shape=10x10, dtype=float64\n diag=[2. 2. 2. 2. 2. 2. 2. 2. 2. 2.]>\n\n>>> B.dense(k(x))  # Do not preserve structure.\narray([[2., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 2., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 2., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 2., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 2., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 2., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 2., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 2., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 2., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 2.]])\n```\n\nThese structured matrices are compatible with [LAB](https://github.com/wesselb/lab):\nthey know how to efficiently add, multiply, and do other linear algebra operations.\n\n```python\n>>> import lab as B\n\n>>> B.matmul(pairwise(k, x), pairwise(k, x))\n<diagonal matrix: shape=10x10, dtype=float64\n diag=[4. 4. 4. 4. 4. 4. 4. 4. 4. 4.]>\n```\n\nAs in the above example, you can convert structured primitives to regular\nNumPy/TensorFlow/PyTorch/JAX arrays by calling `B.dense`:\n\n```python\n>>> import lab as B\n\n>>> B.dense(B.matmul(pairwise(k, x), pairwise(k, x)))\narray([[4., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 4., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 4., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 4., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 4., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 4., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 4., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 4., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 4., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 4.]])\n```\n\n## Implementing Your Own Kernel\n\nAn example is most helpful:\n\n```python\nimport lab as B\nfrom algebra.util import identical\nfrom matrix import Dense\nfrom plum import dispatch\n\nfrom mlkernels import Kernel, pairwise, elwise\n\n\nclass EQWithLengthScale(Kernel):\n    \"\"\"Exponentiated quadratic kernel with a length scale.\n\n    Args:\n        scale (scalar): Length scale of the kernel.\n    \"\"\"\n\n    def __init__(self, scale):\n        self.scale = scale\n\n    def _compute(self, dists2):\n        # This computes the kernel given squared distances. We use `B` to provide a\n        # backend-agnostic implementation.\n        return B.exp(-0.5 * dists2 / self.scale ** 2)\n\n    def render(self, formatter):\n        # This method determines how the kernel is displayed.\n        return f\"EQWithLengthScale({formatter(self.scale)})\"\n\n    @property\n    def _stationary(self):\n        # This method can be defined to return `True` to indicate that the kernel is\n        # stationary. By default, kernels are assumed to not be stationary.\n        return True\n\n    @dispatch\n    def __eq__(self, other: \"EQWithLengthScale\"):\n        # If `other` is also a `EQWithLengthScale`, then this method checks whether \n        # `self` and `other` can be treated as identical for the purpose of \n        # algebraic simplifications. In this case, `self` and `other` are identical \n        # for the purpose of algebraic simplification if `self.scale` and\n        # `other.scale` are. We use `algebra.util.identical` to check this condition.\n        return identical(self.scale, other.scale)\n\n\n# It remains to implement pairwise and element-wise computation of the kernel.\n\n\n@pairwise.dispatch\ndef pairwise(k: EQWithLengthScale, x: B.Numeric, y: B.Numeric):\n    return Dense(k._compute(B.pw_dists2(x, y)))\n\n\n@elwise.dispatch\ndef elwise(k: EQWithLengthScale, x: B.Numeric, y: B.Numeric):\n    return k._compute(B.ew_dists2(x, y))\n```\n\n```python\n>>> k = EQWithLengthScale(2)\n\n>>> k\nEQWithLengthScale(2)\n\n>>> k == EQWithLengthScale(2)\nTrue\n\n>>> 2 * k == k + EQWithLengthScale(2)\nTrue\n\n>>> k == Linear()\nFalse\n\n>>> k_composite = (2 * k + Linear()) * RQ(2.0)\n\n>>> k_composite\n(2 * EQWithLengthScale(2) + Linear()) * RQ(2.0)\n\n>>> k_composite(np.linspace(0, 1, 3))\n<dense matrix: shape=3x3, dtype=float64\n mat=[[2.    1.717 1.13 ]\n      [1.717 2.25  2.16 ]\n      [1.13  2.16  3.   ]]>\n```\n\nOf course, in practice we do not need to implement variants of kernels which include \nlength scales, because we always adjust the length scale by stretching a base kernel:\n\n```python\n>>> EQ().stretch(2)(np.linspace(0, 1, 3))\n<dense matrix: shape=3x3, dtype=float64\n mat=[[1.    0.969 0.882]\n      [0.969 1.    0.969]\n      [0.882 0.969 1.   ]]>\n\n>>> EQWithLengthScale(2)(np.linspace(0, 1, 3))\n<dense matrix: shape=3x3, dtype=float64\n mat=[[1.    0.969 0.882]\n      [0.969 1.    0.969]\n      [0.882 0.969 1.   ]]>\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wesselb/mlkernels",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlkernels",
    "package_url": "https://pypi.org/project/mlkernels/",
    "platform": null,
    "project_url": "https://pypi.org/project/mlkernels/",
    "project_urls": {
      "Homepage": "https://github.com/wesselb/mlkernels"
    },
    "release_url": "https://pypi.org/project/mlkernels/0.4.0/",
    "requires_dist": [
      "numpy (>=1.16)",
      "algebra (>=1.2)",
      "backends (>=1.4.11)",
      "backends-matrix (>=1.2.1)",
      "plum-dispatch (>=2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Kernels, the machine learning ones",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17178969,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32c834697f04d5d5c6a0ba08d54cae582bdb97152becd6ed34678ee07bcd53e6",
          "md5": "a20905fe2cf014342f28ca184f7cc6f2",
          "sha256": "6f7d57c77c523dfc52241c66beca53376aeb3bba679e71bc3d9932c4b4b9c74c"
        },
        "downloads": -1,
        "filename": "mlkernels-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a20905fe2cf014342f28ca184f7cc6f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20600,
        "upload_time": "2021-02-22T12:23:20",
        "upload_time_iso_8601": "2021-02-22T12:23:20.557175Z",
        "url": "https://files.pythonhosted.org/packages/32/c8/34697f04d5d5c6a0ba08d54cae582bdb97152becd6ed34678ee07bcd53e6/mlkernels-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1d92a7cb86ed4cfee8b72d4cb10a3c71a2e4d5dedbcf51d6e01ab97649058c2",
          "md5": "22b79ac9b9bdad268dd06c7be687135c",
          "sha256": "ea5d4acb56f6e093f67b6b7f5e625bd239f76da749d207c86e501547f6e481dc"
        },
        "downloads": -1,
        "filename": "mlkernels-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "22b79ac9b9bdad268dd06c7be687135c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22287,
        "upload_time": "2021-05-08T21:33:18",
        "upload_time_iso_8601": "2021-05-08T21:33:18.270478Z",
        "url": "https://files.pythonhosted.org/packages/c1/d9/2a7cb86ed4cfee8b72d4cb10a3c71a2e4d5dedbcf51d6e01ab97649058c2/mlkernels-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "049f52ec584d459593186aeebaf6a6b407477f8471abac3a65e68c38de491c28",
          "md5": "3ba5b4266953e343d5c450732abbc816",
          "sha256": "d82e649a1fd95e12486b41b26843bf72d8c58e4740d52e651936e990a8062d56"
        },
        "downloads": -1,
        "filename": "mlkernels-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3ba5b4266953e343d5c450732abbc816",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26084,
        "upload_time": "2021-05-16T14:35:54",
        "upload_time_iso_8601": "2021-05-16T14:35:54.303736Z",
        "url": "https://files.pythonhosted.org/packages/04/9f/52ec584d459593186aeebaf6a6b407477f8471abac3a65e68c38de491c28/mlkernels-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4f35ca9508fb72b82ae4d91f845ad627b7ce7dca31bcb140c9e2c9e8c272be7",
          "md5": "c9e8b7a4f7691c215f19d5f1c0b1f779",
          "sha256": "ffd398a8556900336771921f45e75ce755e99680e9861f49d83041977e95e2b0"
        },
        "downloads": -1,
        "filename": "mlkernels-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c9e8b7a4f7691c215f19d5f1c0b1f779",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33891,
        "upload_time": "2021-10-08T10:44:29",
        "upload_time_iso_8601": "2021-10-08T10:44:29.920889Z",
        "url": "https://files.pythonhosted.org/packages/e4/f3/5ca9508fb72b82ae4d91f845ad627b7ce7dca31bcb140c9e2c9e8c272be7/mlkernels-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "793e005053da8b47b43d401b52c7c4d6d2c944ca3f88ac5f302efdd048cd9aed",
          "md5": "fd28a284a76796edb3245d56548906d3",
          "sha256": "41f98ba9148f818a1d810557df2f399d5868b8f7906e53b02b5a96e90c6a601f"
        },
        "downloads": -1,
        "filename": "mlkernels-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fd28a284a76796edb3245d56548906d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33928,
        "upload_time": "2021-10-08T13:24:44",
        "upload_time_iso_8601": "2021-10-08T13:24:44.468880Z",
        "url": "https://files.pythonhosted.org/packages/79/3e/005053da8b47b43d401b52c7c4d6d2c944ca3f88ac5f302efdd048cd9aed/mlkernels-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "461823a5b8a1bc75412e43821edf211e3a97fea80e101f419783eca8e94c1ab6",
          "md5": "0fb1ede58681b67f3f62a4a18ae100dc",
          "sha256": "bc3284141dac425bea6bcc4394dcc582408babf0433d0ac071700c43ba5956b0"
        },
        "downloads": -1,
        "filename": "mlkernels-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0fb1ede58681b67f3f62a4a18ae100dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33925,
        "upload_time": "2021-10-08T17:14:38",
        "upload_time_iso_8601": "2021-10-08T17:14:38.688986Z",
        "url": "https://files.pythonhosted.org/packages/46/18/23a5b8a1bc75412e43821edf211e3a97fea80e101f419783eca8e94c1ab6/mlkernels-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7e6a126ac1175594e140177afead36d2016fb16108f76635d588dd8cd94f287",
          "md5": "7507b7f0530aacdced335a518da4ad69",
          "sha256": "8e07e6b7400c844d368da7873373dee6599776eb7245046edc98dcdb21212354"
        },
        "downloads": -1,
        "filename": "mlkernels-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7507b7f0530aacdced335a518da4ad69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34449,
        "upload_time": "2021-10-31T22:02:32",
        "upload_time_iso_8601": "2021-10-31T22:02:32.407282Z",
        "url": "https://files.pythonhosted.org/packages/d7/e6/a126ac1175594e140177afead36d2016fb16108f76635d588dd8cd94f287/mlkernels-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "604629556585c44981d399f5f0d9f79d663ae65a57e58a2de876df59ed411a23",
          "md5": "6c561cc78fe3ded98a594ff57a4f970b",
          "sha256": "6b1a95b3fbc3e9bb1c304886bf722b02d42d55d5bf6cec4641db371cdfaf5eb3"
        },
        "downloads": -1,
        "filename": "mlkernels-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6c561cc78fe3ded98a594ff57a4f970b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34563,
        "upload_time": "2022-04-05T22:47:41",
        "upload_time_iso_8601": "2022-04-05T22:47:41.675714Z",
        "url": "https://files.pythonhosted.org/packages/60/46/29556585c44981d399f5f0d9f79d663ae65a57e58a2de876df59ed411a23/mlkernels-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "214440de294a73686b6f72accdf72cc45a581eca5ac510e8d59c27c1b89a058e",
          "md5": "d3ea27158ff5f2b2deee6cc792d268f2",
          "sha256": "82418dac1b7f9f15cc55003c4ea7ca0d17666c2d9af98b8648de3c952a73386d"
        },
        "downloads": -1,
        "filename": "mlkernels-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d3ea27158ff5f2b2deee6cc792d268f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36857,
        "upload_time": "2022-04-15T17:39:13",
        "upload_time_iso_8601": "2022-04-15T17:39:13.203648Z",
        "url": "https://files.pythonhosted.org/packages/21/44/40de294a73686b6f72accdf72cc45a581eca5ac510e8d59c27c1b89a058e/mlkernels-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "910c24f6ba22940a8df5a464063158d7a05a98852419d24520a8ac48bf27724a",
          "md5": "be269baf8a3bbcc20bd2a7da42e2cbbc",
          "sha256": "55ae30644f01b10bfc202c19dcbe890dd36811a26dd74b59c94d29423269ea57"
        },
        "downloads": -1,
        "filename": "mlkernels-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be269baf8a3bbcc20bd2a7da42e2cbbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 55358,
        "upload_time": "2023-03-06T18:01:51",
        "upload_time_iso_8601": "2023-03-06T18:01:51.769513Z",
        "url": "https://files.pythonhosted.org/packages/91/0c/24f6ba22940a8df5a464063158d7a05a98852419d24520a8ac48bf27724a/mlkernels-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9eee123d29f5e8bfb2149d0c680d992aca9a09c8de1065f55a1c30c1de6f8c0",
          "md5": "e7fdc426a8b68cb345e1749a080529b4",
          "sha256": "5ff1db2bea3d17769569e9810c7e8884f02ecb2998b526fefc8b67b1f7400011"
        },
        "downloads": -1,
        "filename": "mlkernels-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e7fdc426a8b68cb345e1749a080529b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37059,
        "upload_time": "2023-03-06T18:01:54",
        "upload_time_iso_8601": "2023-03-06T18:01:54.335504Z",
        "url": "https://files.pythonhosted.org/packages/f9/ee/e123d29f5e8bfb2149d0c680d992aca9a09c8de1065f55a1c30c1de6f8c0/mlkernels-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "910c24f6ba22940a8df5a464063158d7a05a98852419d24520a8ac48bf27724a",
        "md5": "be269baf8a3bbcc20bd2a7da42e2cbbc",
        "sha256": "55ae30644f01b10bfc202c19dcbe890dd36811a26dd74b59c94d29423269ea57"
      },
      "downloads": -1,
      "filename": "mlkernels-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be269baf8a3bbcc20bd2a7da42e2cbbc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 55358,
      "upload_time": "2023-03-06T18:01:51",
      "upload_time_iso_8601": "2023-03-06T18:01:51.769513Z",
      "url": "https://files.pythonhosted.org/packages/91/0c/24f6ba22940a8df5a464063158d7a05a98852419d24520a8ac48bf27724a/mlkernels-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9eee123d29f5e8bfb2149d0c680d992aca9a09c8de1065f55a1c30c1de6f8c0",
        "md5": "e7fdc426a8b68cb345e1749a080529b4",
        "sha256": "5ff1db2bea3d17769569e9810c7e8884f02ecb2998b526fefc8b67b1f7400011"
      },
      "downloads": -1,
      "filename": "mlkernels-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e7fdc426a8b68cb345e1749a080529b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 37059,
      "upload_time": "2023-03-06T18:01:54",
      "upload_time_iso_8601": "2023-03-06T18:01:54.335504Z",
      "url": "https://files.pythonhosted.org/packages/f9/ee/e123d29f5e8bfb2149d0c680d992aca9a09c8de1065f55a1c30c1de6f8c0/mlkernels-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}