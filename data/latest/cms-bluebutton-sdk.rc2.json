{
  "info": {
    "author": "CMS Blue Button 2.0 Team",
    "author_email": "BlueButtonAPI@cms.hhs.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Healthcare Industry",
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Python SDK for Blue Button 2.0 API\nThis Python software development kit (SDK) provides tools and resources for developers integrating with the [CMS Blue Button 2.0 (BB2.0) API](https://bluebutton.cms.gov/developers/).\n\n\n# Table of Contents\n\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Configuration Parameters](#configuration-parameters)\n- [Configuration Methods](#configuration-methods)\n- [Usage](#usage)\n- [Sample App](#sample-app)\n- [About](#about)\n- [License](#license)\n- [Security](#security)\n- [Help and Support](#help)\n\n\n## Prerequisites<a id=\"prerequisites\"></a>\n\nYou'll need a sandbox account and sample access token to access data from the Blue Button 2.0 API.\n\nTo learn how to create a sandbox account and generate a sample access token, see **[Try the API](https://bluebutton.cms.gov/developers/#try-the-api)**.\n\n\n## Installation<a id=\"installation\"></a>\n\n```bash\npip install cms-bluebutton-sdk\n```\n\n## Configuration Parameters<a id=\"configuration-parameters\"></a>\n\nRequired SDK configuration parameters include:\n\n| Parameter     | Value                           | Default |Description                                |\n| ------------- | ------------------------------- |----| --------------------------------------- |\n| `environment` | `SANDBOX` or `PRODUCTION`     |`SANDBOX` | Blue Button 2.0 API environment |\n| `version`       | `1` or `2`                        | `2`  | Blue Button 2.0 version            |\n| `client_id`    | *`your_client_id`*                          | |OAuth2.0 client ID of your app             |\n| `client_secret` | *`your_client_secret`*                           | |OAuth2.0 client secret of your app         |\n| `callback_url`  | *`https://www.example.com/callback`* | |OAuth2.0 callback URL of your app          |\n\n\n### Access Token Refresh on Expire\nSDK FHIR requests check whether the access token is expired before the data endpoint call. By default, an expired token will refresh. To disable token refresh, set `token_refresh_on_expire` to `false`.\n\n### FHIR Requests Retry Settings\n\nRetry is enabled by default for FHIR requests. The folllowing parameters are available for the exponential back off retry algorithm.\n\n| Retry parameter   | Value (default)      | Description                         |\n| ----------------- | -------------------- | -------------------------------- |\n| `backoff_factor`    | `5`                    | Backoff factor in seconds       |\n| `total `            | `3`                    | Max retries                      |\n| `status_forcelist`  | [`500`, `502`, `503`, `504`] | Error response codes to retry on |\n\nThe exponential backoff factor (in seconds) is used to calculate interval between retries using the formula `backoff_factor * (2 ** (i - 1))` where `i` starts from 0.\n\nExample:\n\nA `backoff_factor` of 5 seconds generates the wait intervals: 2.5, 5, 10, ...\n\nTo disable the retry, set `total = 0`\n\n### Environments and Data\n\nThe Blue Button 2.0 API is available in V1 and V2 in a sandbox and production environment.\n\n- Sandbox location: https://sandbox.bluebutton.cms.gov\n- Production location: https://api.bluebutton.cms.gov\n\nVersion data formats:\n\n- V1: FHIR STU3\n- V2: FHIR R4\n\nSample configuration JSON with default version and environment:\n\n```\n{\n  \"client_id\": \"your_client_id\",\n  \"client_secret\": \"your_client_secret\",\n  \"callback_url\": \"https://www.example.com/\",\n}\n\n```\n\nIf needed, you can set your application's target environment and API version.\n\nExample:\n\n```\n{\n  \"client_id\": \"your_client_id\",\n  \"client_secret\": \"your_client_secret\",\n  \"callback_url\": \"https://www.example.com/\",\n  \"version\": \"2\",\n  \"environment\": \"PRODUCTION\"\n}\n\n```\n\n## Configuration Methods<a id=\"configuration-methods\"></a>\nThere are three ways to configure the SDK when instantiating a `BlueButton` class instance.\n\n### Python Dictionary\n    - A dictionary of configuration key:value pairs can be used.\n    - Configuration values can be provided from your own application's configuration method.\n    - Example code:\n      ```python\n      bb = BlueButton({\n               \"environment\": \"PRODUCTION\",\n               \"client_id\": \"your_client_id\",\n               \"client_secret\": \"your_client_secret\",\n               \"callback_url\": \"https://www.example.com/callback\",\n               \"version\": 2,\n               \"retry_settings\": {\n                   \"total\": 3,\n                   \"backoff_factor\": 5,\n                   \"status_forcelist\": [500, 502, 503, 504]\n               }\n            }\n      ```\n### JSON config file\n    - This is using a configuration file that is in a JSON format.\n    - This is stored in a local file.\n    - The default location is in the current working directory with a file name: .bluebutton-config.json\n    - Example code:\n      ```python\n      bb = BlueButton(\"settings/my_bb2_sdk_conf.json\")\n      ```\n    - Example JSON in file:\n      ```json\n      {\n          \"environment\": \"SANDBOX\",\n          \"client_id\": \"your_client_id\",\n          \"client_secret\": \"your_client_secret\",\n          \"callback_url\": \"https://www.example.com/callback\",\n          \"version\": 2,\n          \"retry_settings\": {\n              \"total\": 3,\n              \"backoff_factor\": 5,\n              \"status_forcelist\": [500, 502, 503, 504]\n          }\n      }\n      ```\n\n### YAML config file\n    - This is using a configuration file that is in a YAML format.\n    - This is stored in a local file.\n    - The default location is in the current working directory with a file name: .bluebutton-config.yaml\n    - Example code:\n      ```python\n      bb = BlueButton(\"settings/my_bb2_sdk_conf.yaml\")\n      ```\n    - Example YAML in file:\n      ```yaml\n      environment: \"SANDBOX\"\n      client_id: \"id\"\n      client_secret: \"your_client_secret\"\n      callback_url: \"https://www.example.com/callback\"\n      version: 2\n      ```\n\n## Sample Usage: Obtain Access Grant, Probe Scope, and Access Data<a id=\"usage\"></a>\n\nBelow are code snippets showing the SDK used with Python server and Flask.\n\n```python\nfrom flask import Flask\nfrom flask import redirect, request\nfrom cms_bluebutton import BlueButton, AuthorizationToken\n\n# initialize the app\napp = Flask(__name__)\n\n# Instantiate SDK class instance via conf in file\nbb = BlueButton()\n\n# auth_data is saved for the current user\nauth_data = bb.generate_auth_data()\n\n\"\"\"\nAuthorizationToken holds access grant info:\n  access token, expire in, expire at, token type, scope, refreh token, etc.\nIt is associated with current logged in user in real app.\nCheck SDK python docs for more details.\n\"\"\"\n\nauth_token = None\n\n# Start authorize flow: Response with URL to redirect to Medicare.gov beneficiary login\n@app.route(\"/\", methods=[\"GET\"])\ndef get_auth_url():\n    return bb.generate_authorize_url(auth_data)\n\n\n@app.route('/api/bluebutton/callback/', methods=['GET'])\ndef authorization_callback():\n    request_query = request.args\n    code = request_query.get('code')\n    state = request_query.get('state')\n\n    auth_token = bb.get_authorization_token(auth_data, code, state)\n\n    \"\"\"\n    Now access token obtained.\n\n    Note: During authorization, the beneficiary can grant\n    access to their demographic data and claims data or only claims data.\n\n    Check the scope\n    of the current access token as shown below:\n    \"\"\"\n    scopes = auth_token.scope\n\n    # iterate scope entries here or check if a permission is in the scope\n    if \"patient/Patient.read\" in scopes: \n        # patient info access granted\n\n    \"\"\"\n    1. access token scope where demographic info included:\n    \n    scope: [\n       \"patient/Coverage.read\",\n       \"patient/ExplanationOfBenefit.read\",\n       \"patient/Patient.read\",\n       \"profile\",\n    ]\n    \n    2. access token scope where demagraphic info not included:\n    \n    scope: [\n        \"patient/Coverage.read\",\n        \"patient/ExplanationOfBenefit.read\",\n    ]\n    \"\"\"\n    config = {\n        \"auth_token\": auth_token,\n        \"params\": {},\n        \"url\": \"to be overriden\"\n    }\n\n    result = {}\n\n    # fetch eob, patient, coverage, profile\n    try:\n        eob_data = bb.get_explaination_of_benefit_data(config)\n        result['eob_data'] = eob_data['response'].json()\n        eob_data = eob_data['response'].json()\n        result['eob_data'] = eob_data\n\n        # A FHIR search response can result in a large number of resources. \n        # For example, an EOB search of a beneficiary could return hundreds \n        # of resources. By default, search results are grouped into\n        # pages with 10 resources each. For example, \n        # bb.get_explaination_of_benefit_data(config) returns the\n        # first page of resources as a FHIR bundle with a link section \n        # of page navigation URLs. Pagination link names include \n        # 'first,' 'last,' 'self,' next,' and 'previous.' \n        # To get all the pages, use bb.get_pages(data, config).\n        \n        eob_pages = bb.get_pages(eob_data, config)\n        result['eob_pages'] = eob_pages['pages']\n        auth_token = eob_pages['auth_token']\n\n        pt_data = bb.get_patient_data(config)\n        result['patient_data'] = pt_data['response'].json()\n\n        coverage_data = bb.get_coverage_data(config)\n        result['coverage_data'] = coverage_data['response'].json()\n\n        profile_data = bb.get_profile_data(config)\n        result['profile_data'] = profile_data['response'].json()\n    except Exception as ex:\n        print(ex)\n\n    return result\n\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=3001)\n```\n\n## Sample App<a id=\"sample-app\"></a>\n\nFor a complete Python React sample app, see [CMS Blue Button Python Sample App](https://github.com/CMSgov/bluebutton-sample-client-python-react).\n\n\n## About the Blue Button 2.0 API<a id=\"about\"></a>\n\nThe [Blue Button 2.0 API](https://bluebutton.cms.gov/) provides Medicare enrollee claims data to applications using the [OAuth2.0 authorization flow](https://datatracker.ietf.org/doc/html/rfc6749). We aim to provide a developer-friendly, standards-based API that enables people with Medicare to connect their claims data to the applications, services, and research programs they trust.\n\n## License<a id=\"license\"></a>\nThe CMS Blue Button 2.0 Python SDK is licensed under the Creative Commons Zero v1.0 Universal. For more details, see [License](https://github.com/CMSgov/cms-bb2-python-sdk/blob/main/LICENSE).\n\n## Security<a id=\"security\"></a>\nWe do our best to keep our SDKs up to date with vulnerability patching and security testing, but you are responsible for your own review and testing before implementation.\n\nTo report vulnerabilities, please see the [CMS Vulnerability Disclosure Policy](https://www.cms.gov/vulnerability-disclosure-policy) and follow the directions for reporting. \n\n\n## Help and Support<a id=\"help\"></a>\n\nGot questions? Need help troubleshooting? Want to propose a new feature? Contact the Blue Button 2.0 team and connect with the community in our [Google Group](https://groups.google.com/forum/#!forum/Developer-group-for-cms-blue-button-api).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CMSgov/cms-bb2-python-sdk",
    "keywords": "",
    "license": "CC0 1.0 Universal",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cms-bluebutton-sdk",
    "package_url": "https://pypi.org/project/cms-bluebutton-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/cms-bluebutton-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/CMSgov/cms-bb2-python-sdk"
    },
    "release_url": "https://pypi.org/project/cms-bluebutton-sdk/1.0.1/",
    "requires_dist": [
      "requests (>=2.0)",
      "requests-toolbelt (>=0.9.1)",
      "pyyaml (>=5.0)",
      "pytest (>=6.0) ; extra == 'dev'",
      "requests-mock (>=1.9.3) ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "An SDK used for interacting with the CMS Blue Button 2.0 API",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16176326,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "498673bd88b51df1900b09313659eb132cf70af904d166e3221dd98435a2ebee",
          "md5": "0ba6deb5edab98eff31e46ba27bc1ea0",
          "sha256": "aea271f87d26bcb78482f32c2d36c31934ea6fe94e1a730cba61491e5a4fd28e"
        },
        "downloads": -1,
        "filename": "cms_bluebutton_sdk-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ba6deb5edab98eff31e46ba27bc1ea0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17356,
        "upload_time": "2022-12-19T17:43:15",
        "upload_time_iso_8601": "2022-12-19T17:43:15.833600Z",
        "url": "https://files.pythonhosted.org/packages/49/86/73bd88b51df1900b09313659eb132cf70af904d166e3221dd98435a2ebee/cms_bluebutton_sdk-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28a2342499cebd7423338dbe82eb610781ca4ab6274681dfe17359352fa2be8a",
          "md5": "468b14327ff4f55ecbbc92aaa576e006",
          "sha256": "ca10df618496a08bacf363da856a9d9e7df7b0b25d7823f3837f015721c7564b"
        },
        "downloads": -1,
        "filename": "cms_bluebutton_sdk-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "468b14327ff4f55ecbbc92aaa576e006",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17341,
        "upload_time": "2022-12-21T18:40:58",
        "upload_time_iso_8601": "2022-12-21T18:40:58.783103Z",
        "url": "https://files.pythonhosted.org/packages/28/a2/342499cebd7423338dbe82eb610781ca4ab6274681dfe17359352fa2be8a/cms_bluebutton_sdk-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28a2342499cebd7423338dbe82eb610781ca4ab6274681dfe17359352fa2be8a",
        "md5": "468b14327ff4f55ecbbc92aaa576e006",
        "sha256": "ca10df618496a08bacf363da856a9d9e7df7b0b25d7823f3837f015721c7564b"
      },
      "downloads": -1,
      "filename": "cms_bluebutton_sdk-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "468b14327ff4f55ecbbc92aaa576e006",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17341,
      "upload_time": "2022-12-21T18:40:58",
      "upload_time_iso_8601": "2022-12-21T18:40:58.783103Z",
      "url": "https://files.pythonhosted.org/packages/28/a2/342499cebd7423338dbe82eb610781ca4ab6274681dfe17359352fa2be8a/cms_bluebutton_sdk-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}