{
  "info": {
    "author": "Maxx Tessmer",
    "author_email": "mhtessmer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# chiLife\r\nchiLife (or Ï‡Life) is a python module for modeling non-canonical amino acid side chain ensembles, primarily site \r\ndirected spin labels (SDSLs), and using those ensembles to predict experimental results. The goal of chiLife is to provide a \r\nsimple, flexible and interoperable python interface to protein side chain ensemble modeling, allowing for rapid \r\ndevelopment of custom analysis and modeling pipelines. Simplicity is facilitated by the use of `RotamerEnsemble` and \r\n`SpinLabel` objects with standard interfaces for all supported side chain types, side chain modeling methods and \r\nprotein modeling methods. Flexibility is achieved by allowing users to create and use custom `RotamerEnsemble`s and \r\n`SpinLabel`s as well as custom side chain modeling methods. Interoperability sought by interactions with other \r\nPython-based molecular modeling packages. This enables the use of experimental data, like double electron-electron \r\nresonance (DEER), in other standalone protein modeling applications that allow user defined restraints, such as \r\npyrosetta and NIH-Xplor.\r\n \r\n## Getting Started\r\nStable distributions of chiLife can be installed using `pip`. \r\n```bash\r\npip install chiLife\r\n```\r\n\r\nAlternatively the development version can be installed by downloading and unpacking the GitHub repository, or using \r\n`git clone` followed by a standard python setuptools installation.\r\n```bash\r\ngit clone https://github.com/mtessmer/chiLife.git\r\ncd chiLife\r\npip install -e .   # Install as editable and update using `git pull origin main`\r\n```  \r\n***\r\n## chiLife Module\r\nThe primary feature of chiLife is the `SpinLabel` object, which inherits from the more abstract `RotamerEnsemble` \r\nobject. While this README primarily will refer to `SpinLabel`s, be aware that most properties and functions discussed \r\nare also functional on `RotamerLibrary` objects as well. `SpinLabel`s can be created and \"attached\" to protein models \r\neasily and quickly, allowing for on the fly simulation of distance distributions while modeling, or scriptable \r\nanalysis. Notably, attaching a `SpinLabel` to a protein does not alter the protein in any way, allowing the protein \r\nmodel to retain the native amino acid.\r\n\r\n### Simple rotamer-library based SpinLabel modeling\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport chilife as xl\r\n\r\n# Download protein structure from PDB\r\nMBP = xl.fetch('1omp', save=True)\r\n\r\n# Create Spin lables\r\nSL1 = xl.SpinLabel('R1C', site=20, chain='A', protein=MBP)\r\nSL2 = xl.SpinLabel('R1C', site=238, chain='A', protein=MBP)\r\n\r\n# Calculate distribution\r\nr = np.linspace(0, 100, 256)\r\nP = xl.distance_distribution(SL1, SL2, r=r)\r\n\r\n# Plot distribution\r\nfig, ax = plt.subplots(figsize=(6, 3))\r\nax.plot(r, P)\r\nax.set_yticks([])\r\nax.set_xlabel('Distance ($\\AA$)')\r\nfor spine in ['left', 'top', 'right']:\r\n    ax.spines[spine].set_visible(False)\r\nplt.show()\r\n```\r\n\r\n![MBP L20R1 S238R1](https://github.com/StollLab/chiLife/raw/main/img/L20R1_S238R1_Pr.png)\r\n\r\nThe side chain ensembles can then be saved using a simple `save` function that accepts an arbitrary number of `\r\nRotamerEnsemble`, `SpinLabel`, `MDAnalyisis.Universe` and `MDAnalyiss.AtomGroup` objects. Because \r\n`RotamerEnsemble`/`SpinLabel` objects do not mutate the underlying protein, they are saved as separate multi-state \r\nobjects and can be visualized with applications like pymol. If you do wish to permanently alter the underlying protein\r\nstructure you can use the [`mutate`](#mutating-protein-structures) function described below.\r\n\r\n```\r\n# Save structure\r\nxl.save('MBP_L20R1_S238R1.pdb', SL1, SL2, MBP)\r\n```\r\n\r\n![MBP L20R1 S238R1 Structure](https://github.com/StollLab/chiLife/raw/main/img/L20R1_S238R1_Structure.png)\r\n\r\n\r\n### Mimicking MMM and MTSSLWizard\r\nIn addition to its own features, chiLife offers spin label modeling methods that mimic the popular MMM and MTSSLWizard \r\nmodeling applications.\r\n\r\n```python\r\nimport chilife as xl\r\n\r\nMBP = xl.fetch('1omp')\r\nSLmmm = xl.SpinLabel.from_mmm('R1M', site=238, protein=MBP)\r\nSLWiz = xl.SpinLabel.from_wizard('R1M', site=238, protein=MBP,\r\n                                 to_find=50, to_try=1000,  # Equivalent to 'quick' search, default is 'thorough'   \r\n                                 vdw=3.4, clashes=0,  # MTSSLWizard 'tight' setting, default is 'loose' \r\n                                 )\r\n```\r\n\r\n### Off-rotamer sampling and local repacking \r\nOne of the benefits of chiLife is the variety and customizable nature of spin label modeling methods. This includes \r\nmethods to sample side chain conformations that deviate from canonical dihedral angles and fixed rotamer libraries \r\n(Off-rotamer sampling) and methods to repack a `SpinLabel` and it's neighboring amino acids, and to \r\n\r\n```python\r\nimport chilife as xl\r\n\r\nMBP = xl.fetch('1omp')\r\n\r\n# Create a SpinLabel object using the MTSSLWizard 'Accessible Volume' Approach\r\nSL1 = xl.SpinLabel.from_wizard('R1C', site=20, chain='A', protein=MBP)\r\n\r\n# Create a SpinLabel object by sampling off-rotamer dihedral conformations using the rotamer library as a prior \r\nSL2 = xl.SpinLabel('R1C', site=238, chain='A', sample=2000, protein=MBP)\r\n\r\n# Create a SpinLabel object from a ProEPR.repack trajectory\r\ntraj, de = xl.repack(SL1, SL2, protein=MBP)\r\n```\r\n\r\nThe repack function will perform a Markov chain Monte Carlo sampling repack of the spin labels, `SL1` and `SL2` and \r\nneighboring side chains, returning an `MDAnalysis.Universe` object containing all accepted structures of the MCMC \r\ntrajectory, the energy function changes at each acceptance step and new SpinLabel objects attached to the lowest energy \r\nstructure of the trajectory.\r\n\r\nSpinLabel objects and neighboring side chains can be repacked using off-rotamer sampling by using the `off_rotamer=True`\r\noption. In the event off rotamer sampling is being used for repacking, it is likely that the desired SpinLabel object is \r\nnot the default rotamer ensembles attached to the lowest energy structure, but instead the ensemble of side chains \r\ncreated in the MCMC sampling trajectory. This can be done using the `from_trajectory` class method. \r\n\r\n```python\r\n# Create a SpinLabel object from a xl.repack trajectory with off-rotamer sampling\r\ntraj, de = xl.repack(SL1, SL2, protein=MBP, off_rotamer=True) \r\nSL1 = xl.SpinLabel.from_trajectory(traj, site=238)\r\n```\r\n\r\nOff rotamer sampling can be controlled on a per dihedral basis when repacking with chiLife by passing a list of bools to \r\nthe off_rotamer variable. For example, passing `off_rotamer = [False, False, False, True, True]` will allow for off \r\nrotamer sampling of only &chi;<sub>4</sub> and &chi;<sub>5</sub>.\r\n\r\n\r\n### Mutating protein structures\r\nSometimes you don't want a whole rotamer ensembles, you just want a protein structure mutated at a particular site with \r\nthe most probable spin label conformer. This can be done easily with the `mutate` function.\r\n\r\n```python\r\nimport chilife as xl\r\n\r\nMBP = xl.fetch('1omp')\r\nSL = xl.SpinLabel('R1C', 238, protein=MBP)\r\nMBP_S238R1 = xl.mutate(MBP, SL)\r\nxl.save('MBP_S238R1.pdb', MBP_S238R1)\r\n```\r\n\r\nchiLife can actually mutate several sites at once, and can mutate canonical amino acids as well.\r\n\r\n```python\r\nSL1 = xl.SpinLabel('R1C', 20, protein=MBP)\r\nSL2 = xl.SpinLabel('R1C', 238, protein=MBP)\r\nL284V = xl.RotamerEnsemble('VAL', 284, protein=MBP)\r\n```\r\n\r\n Mtating adjacent sites is best done with the `repack` function to avoid clashes between SpinLabels/RotamerEnsembles. \r\nThis will return a trajectory which can be used to pick the last or lowest energy frame as your mutated protein.\r\n\r\n```python\r\nMBP_L284V_L20R1_S238R1, _, _ = xl.repack(SL1, SL2, L284V, protein=MBP)\r\n```\r\n\r\n### Adding user defined spin labels\r\nSite directed spin labels, and other non-canonical amino acids, are constantly being developed. Additionally, rotamer \r\nlibraries for existing labels continuously undergo incremental improvements or modification to suit particular needs, \r\ne.g. a rotamer library specifically for transmembrane residues. In fact chiLife iteself may be being used to develop \r\nnew and improved, or application specific rotamer libraries. To this end chiLife makes it easy to create user defined \r\nspin labels and custom rotamer libraries. To create a custom rotamer library, all that is needed is (1) a pdb file of \r\nthe spin label (2) A list of the rotatable dihedral bonds, and (3) a list of the atoms where the spin is.\r\n\r\n```python\r\nxl.create_library(name='TRT_1.0',\r\n                  resname='TRT',\r\n                  pdb='test_data/trt.pdb',\r\n                  dihedral_atoms=[['N', 'CA', 'CB', 'SG'],\r\n                                  ['CA', 'CB', 'SG', 'SD'],\r\n                                  ['CB', 'SG', 'SD', 'CAD'],\r\n                                  ['SG', 'SD', 'CAD', 'CAE'],\r\n                                  ['SD', 'CAD', 'CAE', 'OAC']],\r\n                  spin_atoms='CAQ')\r\n```\r\n\r\nThis function will create a portable `TRT_1.0_rotlib.npz` file that can be called specified by the `SpinLabel` \r\nconstructor.\r\n\r\n```python\r\nxl.SpinLabel('TRT', site=238, protein=MBP, rotlib='TRT_1.0', sample=5000)\r\n```\r\n\r\nThus, the file can be easily shared with coworkers, collaborators or with other chiLife users via email or a \r\nforthcoming chiLife rotamer library repository. \r\n\r\n> NOTE: In the above example the `rotlib` keyword is only used for demonstration purposes. chiLife always searches the \r\n> current working directory for rotamer library files first. If there is a `XYZ_rotlib.npz` in the working directory \r\n> and you specify `xl.SpinLabel('XYZ', ...)`, chiLife will assume you want to use the `XYZ_rotlib.npz` rotamer library.\r\n\r\nUser defined labels can be constructed from a single state pdb file or a multi-state PDB file. If constructed from a \r\nsingle state pdb file a list of dihedral angles and weights can be passed via the `dihedrals` and `weigts` keyword\r\narguments. For each set of dihedral angles, chiLife create a rotamer and store the whole library using the specified \r\nname. Alternatively using a multi-state PDB file can add some additional information, such as isomeric heterogenity of \r\nthe rotamer library, which will be maintained by chiLife.\r\n\r\nFor more information on how to use chiLife as a python module, see [examples](#examples/)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/StollLab/chiLife",
    "keywords": "Spin label,EPR,DEER,PELDOR,Side chain",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chilife",
    "package_url": "https://pypi.org/project/chilife/",
    "platform": null,
    "project_url": "https://pypi.org/project/chilife/",
    "project_urls": {
      "Homepage": "https://github.com/StollLab/chiLife",
      "Source": "https://github   .com/StollLab/chiLife"
    },
    "release_url": "https://pypi.org/project/chilife/0.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A package for modeling non-canonical amino acid side chain ensembles.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17017086,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af5efa0c2002b602bc2fb184e5c632ce1eea1a80915f7ec98bc4654855397943",
          "md5": "0d7ef4340e56bc4fefa4e754826b73d0",
          "sha256": "dd967181b7afec549484d7534e708b4bb040107de8a35daa4d00b27b379e8bd8"
        },
        "downloads": -1,
        "filename": "chilife-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0d7ef4340e56bc4fefa4e754826b73d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17721336,
        "upload_time": "2023-02-24T17:42:15",
        "upload_time_iso_8601": "2023-02-24T17:42:15.277839Z",
        "url": "https://files.pythonhosted.org/packages/af/5e/fa0c2002b602bc2fb184e5c632ce1eea1a80915f7ec98bc4654855397943/chilife-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af5efa0c2002b602bc2fb184e5c632ce1eea1a80915f7ec98bc4654855397943",
        "md5": "0d7ef4340e56bc4fefa4e754826b73d0",
        "sha256": "dd967181b7afec549484d7534e708b4bb040107de8a35daa4d00b27b379e8bd8"
      },
      "downloads": -1,
      "filename": "chilife-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0d7ef4340e56bc4fefa4e754826b73d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 17721336,
      "upload_time": "2023-02-24T17:42:15",
      "upload_time_iso_8601": "2023-02-24T17:42:15.277839Z",
      "url": "https://files.pythonhosted.org/packages/af/5e/fa0c2002b602bc2fb184e5c632ce1eea1a80915f7ec98bc4654855397943/chilife-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}