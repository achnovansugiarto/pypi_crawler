{
  "info": {
    "author": "Yuki Chiba",
    "author_email": "yuki-chiba@outlook.jp",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## 使い方\n```python\nfrom tcgshuffle import evaluate\nevaluate(評価したいシャッフル関数, デッキ枚数)\n```\n\n## 出力\n- position_prob_map: 元々i番目にあったカードが、シャッフル後デッキ内のどこに移動した頻度\n- neighbor_prob_map: 元々i番目にあったカードとj番目にあったカードについて、シャッフル後にそれらが隣り合っていた頻度\n- position_badness: position_prob_mapの頻度が、理想頻度(1 / デッキ枚数)とどの程度乖離しているか\n- neighbor_badness: neighbor_prob_map、理想頻度(1 / (デッキ枚数 - 1))とどの程度乖離しているか\n- total_position_badness: 総合評価として、理想頻度を1とした場合にposition_badnessの偏りがどの程度大きいかを示す（もっとも悪い数字をデッキ枚数分取り出し平均したもの）\n- total_neighbor_badness: 総合評価として、理想頻度を1とした場合にneighbor_badnessの偏りがどの程度大きいかを示す（もっとも悪い数字をデッキ枚数分取り出し平均したもの）\n\n## シャッフル関数定義方法\n\n説明準備中...\n\n### basic example 1\n1. ディールシャッフル（6つの束）\n2. ファローシャッフル（5回連続）\n3. ヒンドゥーシャッフル（4回シャカシャカする作業を1回）\n4. ファローシャッフル（5回連続）\n5. ヒンドゥーシャッフル（4回シャカシャカする作業を1回）\n6. カット（3分割）\n```python\nfrom tcgshuffle import Deck, Shuffler, evaluate\ndef shuffle(d: Deck, s: Shuffler) -> Deck:\n    s.deal(d, [6])\n    s.fallow(d, 5, 0.1, 0.1)\n    s.over_hand(d, [4], 0.1)\n    s.fallow(d, 5, 0.1, 0.1)\n    s.over_hand(d, [4], 0.1)\n    s.cut(d, 3, 0.1)\n    return d\n\nposition_prob_map, neighbor_prob_map, position_badness, neighbor_badness, total_position_badness, total_neighbor_badness\\\n    = evaluate(shuffle, 60)\n```\ntotal_position_badness = 0.21536666666666665\ntotal_neighbor_badness = 0.21140000000000003\n\n### basic example 2\n1. ヒンドゥーシャッフル（5回シャカシャカ、4回シャカシャカ、3回シャカシャカ、・・・と21回行う）\n```python\nfrom tcgshuffle import Deck, Shuffler, evaluate\ndef shuffle(d: Deck, s: Shuffler):\n    s.hindu(d, [5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5], 0.4)\n    return d\nposition_prob_map, neighbor_prob_map, position_badness, neighbor_badness, total_position_badness, total_neighbor_badness\\\n    = evaluate(shuffle, 60)\n```\ntotal_position_badness = 0.4182666666666666\ntotal_neighbor_badness = 13.671499999999998\n\n### advanced example 1\n1. ２束に分ける\n2. それぞれの束をファローシャッフル（8回連続）\n3. ２束を合わせる（上に載せるだけ）\n```python\nfrom tcgshuffle import Deck, Shuffler, evaluate\ndef shuffle(d: Deck, s: Shuffler):\n    ds = s.split(d, 2, 0.1)\n    s.super_fallow(ds, 8, 0.1, 0.1)\n    d = s.merge(ds)\n    return d\nposition_prob_map, neighbor_prob_map, position_badness, neighbor_badness, total_position_badness, total_neighbor_badness\\\n    = evaluate(shuffle, 60)\n```\ntotal_position_badness = 1.2804000000000002\ntotal_neighbor_badness = 1.3671999999999995\n\n### advanced example 2\n1. ディールシャッフル（6つの束）\n2. 以下を3回繰り返す\n   1. 束を2つに分ける（元の束 -> [A, B]）\n   2. 各束をさらに3つに分ける（A -> [A1, A2, A3], B -> [B1, B2, B3]）\n   3. A1とB1、A2とB2、A3とB3をそれぞれ合わせる\n   4. A1+B1、A2+B2、A3+B3にそれぞれ、ファローシャッフル（3回連続）\n   5. A1+B1、A2+B2、A3+B3を合わせる\n   6. ヒンドゥーシャッフル（4回シャカシャカする作業を3回実施）\n```python\nfrom tcgshuffle import Deck, Shuffler, evaluate\ndef shuffle(d: Deck, s: Shuffler):\n    s.deal(d, [6])\n    for i in range(3):\n        sp2 = s.split(d, 2)\n        sp6 = s.super_split(sp2, 3)\n        pile1 = s.merge([sp6[0], sp6[3]])\n        pile2 = s.merge([sp6[1], sp6[4]])\n        pile3 = s.merge([sp6[2], sp6[5]])\n        s.fallow(pile1, 3, 0.1, 0.1)\n        s.fallow(pile2, 3, 0.1, 0.1)\n        s.fallow(pile3, 3, 0.1, 0.1)\n        d = s.merge([pile1, pile2, pile3])\n        s.hindu(d, [4, 4, 4], 0.1)\n    return d\nposition_prob_map, neighbor_prob_map, position_badness, neighbor_badness, total_position_badness, total_neighbor_badness\\\n    = evaluate(shuffle, 60)\n```\ntotal_position_badness = 0.23553333333333332\ntotal_neighbor_badness = 0.2083",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tcgshuffle",
    "package_url": "https://pypi.org/project/tcgshuffle/",
    "platform": "",
    "project_url": "https://pypi.org/project/tcgshuffle/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/tcgshuffle/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "card shuffle method scorer.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13034396,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0800a99b5ed795d77e5ad2607c2cf0c3077784680ea2233ddfcf989dc9e6edff",
          "md5": "e893bc70d072c8ae89802c03526c8fc0",
          "sha256": "3a1d0bec08624d9f7073ca8d139a60a4f8e8798b661056bbd0443eb5b44129f9"
        },
        "downloads": -1,
        "filename": "tcgshuffle-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e893bc70d072c8ae89802c03526c8fc0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2764,
        "upload_time": "2022-02-28T15:05:48",
        "upload_time_iso_8601": "2022-02-28T15:05:48.710347Z",
        "url": "https://files.pythonhosted.org/packages/08/00/a99b5ed795d77e5ad2607c2cf0c3077784680ea2233ddfcf989dc9e6edff/tcgshuffle-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5bf2a4248afc8dd3fa3c16fd58133b0776bf688b94469e241e76f287aef5c9c",
          "md5": "199a9f7c5485af2f4e6879b0f1a06995",
          "sha256": "5266c30c46602d8d0f5423bd909b5bea88961061b74ea2f0d35698bbc006b220"
        },
        "downloads": -1,
        "filename": "tcgshuffle-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "199a9f7c5485af2f4e6879b0f1a06995",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5476,
        "upload_time": "2022-02-28T15:07:45",
        "upload_time_iso_8601": "2022-02-28T15:07:45.039876Z",
        "url": "https://files.pythonhosted.org/packages/e5/bf/2a4248afc8dd3fa3c16fd58133b0776bf688b94469e241e76f287aef5c9c/tcgshuffle-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5bf2a4248afc8dd3fa3c16fd58133b0776bf688b94469e241e76f287aef5c9c",
        "md5": "199a9f7c5485af2f4e6879b0f1a06995",
        "sha256": "5266c30c46602d8d0f5423bd909b5bea88961061b74ea2f0d35698bbc006b220"
      },
      "downloads": -1,
      "filename": "tcgshuffle-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "199a9f7c5485af2f4e6879b0f1a06995",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5476,
      "upload_time": "2022-02-28T15:07:45",
      "upload_time_iso_8601": "2022-02-28T15:07:45.039876Z",
      "url": "https://files.pythonhosted.org/packages/e5/bf/2a4248afc8dd3fa3c16fd58133b0776bf688b94469e241e76f287aef5c9c/tcgshuffle-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}