{
  "info": {
    "author": "Chris (Someguy123) @ Privex",
    "author_email": "chris@privex.io",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# NeighGen - BGP Neighbour Config Generator + PeeringDB Query Tool\n\n<center>\n<a href=\"https://i.imgur.com/IW9SRTV.png\" target=\"_blank\">\n<img src=\"https://i.imgur.com/IW9SRTV.png\" width=\"70%\" alt=\"Screenshot of ASINFO command showing the generated tables\"/>\n</a>\n</center>\n\n    \n    +===================================================+\n    |                 Â© 2021 Privex Inc.                |\n    |               https://www.privex.io               |\n    +===================================================+\n    |                                                   |\n    |        NeighGen                                   |\n    |        License: X11/MIT                           |\n    |                                                   |\n    |        Core Developer(s):                         |\n    |                                                   |\n    |          (+)  Chris (@someguy123) [Privex]        |\n    |          (+)  Kale (@kryogenic) [Privex]          |\n    |                                                   |\n    +===================================================+\n    \n    NeighGen - A BGP neighbour config generator written in Python, \n    using PeeringDB's API to discover ASN BGP addresses.\n    Copyright (c) 2021    Privex Inc. ( https://www.privex.io )\n\n\n# Docker Quickstart\n\n```sh\ndocker pull privex/neighgen\n\ndocker run --rm -it privex/neighgen -h\n\ndocker run --rm -it privex/neighgen asinfo -x -F 210083\ndocker run --rm -it privex/neighgen asinfo -x 210083\ndocker run --rm -it privex/neighgen asinfo-raw 210083\ndocker run --rm -it privex/neighgen neigh 210083\ndocker run --rm -it privex/neighgen neigh -o ios 210083\n```\n\nIf you'd like to be able to query PeeringDB locally via a database, you can use the Docker Compose\nenvironment which comes prepared in the Git project.\n\nClone the repo:\n\n```sh\ngit clone https://github.com/Privex/neighgen.git\n```\n\nCopy `dk-config.yaml` for docker-compose to use:\n\n```sh\ncp example.dk-config.yaml dk-config.yaml\n```\n\nThen simply run `docker-compose up -d` , which will build both the neighgen and postgres containers,\nthen start them up in the background.\n\n```sh\ndocker-compose up -d\n```\n\nYou can monitor neighgen's import process via docker's logging:\n\n```sh\ndocker-compose logs -f ngen\n```\n\nOnce it's finished syncing, you should be able to enter the postgres container, and\nmake whatever queries you want:\n\n```sh\ndocker-compose exec postgres psql -U peeringdb peeringdb\n```\n\nPlease be aware that the PeeringDB database generation, is not part of this repo.\n\nThe PeeringDB local DB sync functionality is provided by the `peeringdb` package: https://github.com/peeringdb/peeringdb-py\n\n# Installing\n\n## From PyPi\n\nWe recommend installing the package on the newest version of Python that your OS has available.\n\nMost modern LTS releases at the time, such as Ubuntu 20.04 and Debian 10 - have at LEAST\nPython 3.8 available, while Ubuntu 20.04 has 3.9 available.\n\nFor example, if the newest version of Python on your system is 3.8, then you'd install\nit on Python 3.8 like so:\n\n```sh\npython3.8 -m pip install -U privex-neighgen\n```\n\nIf for some reason, your Python distribution doesn't support the `python3.x -m pip` method of\ncalling Pip, then you can use the classic `pip3` command instead:\n\n```sh\npip3 install -U privex-neighgen\n```\n\n## From Github\n\n```sh\ngit clone https://github.com/Privex/neighgen.git\ncd neighgen\n# Option 1. - Install NeighGen onto your system from the repo\npip3 install -U .\n\n# Option 2. - Create a Pipenv virtualenv, and use the software\n# straight from the project folder:\npip3 install -U pipenv\npipenv install\npipenv install --dev\npipenv shell\n\npython3 -m neighgen -h\npython3 -m neighgen asinfo 210083\n\n```\n\n# Configuration\n\nThe software is primarily configured through a YML config file.\n\nYou can generate a base example config at `~/.ngen.yml` using the following command:\n\n```sh\nneighgen gen_config -o ~/.ngen.yml yml\n```\n\nThe application will search the following locations for the config, in order,\nuntil it finds one that exists. It will only load the first config it finds:\n\n```py\nfrom os import getcwd\nfrom pathlib import Path\nPWD = Path(getcwd()).expanduser().resolve()\n_CONFIG_FILES = [\n    'config.yaml', 'config.yml', 'ngen.yaml', 'ngen.yml',\n    PWD / 'config.yaml', PWD / 'config.yml', PWD / 'ngen.yaml', PWD / 'ngen.yml',\n    '~/.neighgen/config.yaml', '~/.neighgen/config.yml'\n    '~/.ngen/config.yaml', '~/.ngen/config.yml'\n    '~/.ngen.yaml', '~/.ngen.yml'\n    '~/.peeringdb/config.yaml', '~/.peeringdb/config.yml'\n]\n```\n\nThe first files in that list, are scanned within the base folder of the project, i.e. it will look\nfor `config.yaml` / `config.yml` / `ngen.yaml` / `ngen.yml` in the root of the project,\nwhere `LICENSE.txt` , `Dockerfile` , `README.md` and other files are located.\n\nThe second line of files, search within your current working directory, which can be helpful\nif you've installed the application via pip, so that it will use `config.yml` / `ngen.yaml`\nin whatever directory you're currently cd'd into.\n\nYou can also generate an example ENV file, however, you should only use an ENV file / environment args\nif you have a specific reason that the YML file isn't suitable on it's own, e.g. for configuring the\napp from within some form of management system that uses ENV files (e.g. systemd).\n\n```sh\n# This will just output to your terminal. You can use either '-o', or you can\n# pipe the contents to where-ever you want the ENV file to be.\nneighgen gen_config env\n```\n\nThe last type of config which `neighgen` can generate - is a slightly modified version of the standard\nYML config, but pre-configured for use with Docker (esp. with the docker-compose setup).\n\nTo generate the Docker-focused YML config:\n\n```sh\nneighgen gen_config -o dk-config.yaml docker\n```\n\n# Examples\n\n## asinfo\n\nDisplay PeeringDB information for AS210083 (Privex) as pretty printed tables:\n\n    python3 -m neighgen asinfo 210083\n\nDisplay PeeringDB information for AS210083 (Privex) as pretty printed tables,\nand include internet exchange information:\n\n    python3 -m neighgen asinfo -x 210083\n\nDisplay PeeringDB information for AS210083 (Privex) as pretty printed tables,\nand include both internet exchange information, and facility information:\n\n    python3 -m neighgen asinfo -x -F as210083\n\n## asinfo-raw\n\nDisplay PeeringDB info for AS210083 in programmatic form - which by default is JSON:\n\n    python3 -m neighgen asinfo-raw 210083\n\nDisplay PeeringDB info for AS210083 in programmatic form, including both IXP and facility info:\n    \n    python3 -m neighgen asinfo-raw -x -F 210083\n\nDisplay ONLY IXP information from PeeringDB for AS210083 in programmatic form:\n\n    python3 -m neighgen asinfo-raw -OX 210083\n\nDisplay ONLY Facility information from PeeringDB for AS210083 in programmatic form:\n\n    python3 -m neighgen asinfo-raw -OF 210083\n\nDisplay ONLY IXP information from PeeringDB for AS210083 in programmatic form - but as YAML\ninstead of JSON:\n\n    python3 -m neighgen asinfo-raw -OX 210083 yml\n\nDisplay PeeringDB info for AS210083 in programmatic form, including both IXP and facility info,\nbut as XML instead of JSON:\n\n    python3 -m neighgen asinfo-raw -x -F 210083 xml\n\n## neigh\n\nDisplay neighbour configuration for peering with AS210083 at all of their IXPs,\nusing the default OS config format 'nxos' (Cisco NX-OS):\n\n    python3 -m neighgen neigh 210083\n\nDisplay neighbour configuration for peering with AS210083 at only exchanges with 'ams-ix'\nin their name, using the default OS config format 'nxos' (Cisco NX-OS):\n\n    python3 -m neighgen neigh 210083 ams-ix\n\nDisplay neighbour configuration for peering with AS210083 at only exchanges with 'ams-ix'\nin their name, this time we manually specify that we want the config to be formatted\nfor use with 'ios' (Cisco IOS).\n\n    python3 -m neighgen neigh -o ios 210083 ams-ix\n\nSame as previous, but we set the peer-policy for v4 and v6 to blank, which disables\nit from adding peer-policy neighbour commands:\n\n    python3 -m neighgen neigh -p4 '' -p6 '' -o ios 210083 ams-ix\n\nThe network AS13335 peers at several different AMS-IX regions, so to limit the neighbours to\nuse only the IXP called \"AMS-IX\", and not \"AMS-IX Hong Kong\" or \"AMS-IX Caribbean\",\nwe use \"-X\" to enable exact IXP matching (the matching isn't case sensitive though).\nThis ensure it only uses IXP peers on the exchange named \"AMS-IX\" and not their\nother regions.\n\n    python3 -m neighgen neigh -X 13335 ams-ix\n\n# License\n\nThis Python module was created by [Privex Inc. of Belize City](https://www.privex.io), and licensed under the X11/MIT License. See\nthe file [LICENSE](https://github.com/Privex/neighgen/blob/master/LICENSE) for the license text.\n\n**TL;DR; license:**\n\nWe offer no warranty. You can copy it, modify it, use it in projects with a different license, and even in commercial (paid for)\nsoftware.\n\nThe most important rule is - you **MUST** keep the original license text visible (see `LICENSE`) in any copies.\n\n# Screenshots\n\nThe full IMGUR album of screenshots can be found here: https://imgur.com/a/5Z15DSv\n\n<img src=\"https://i.imgur.com/IW9SRTV.png\" width=\"100%\" alt=\"Screenshot of ASINFO command showing the generated tables\" />\n\nScreenshot of `ASINFO` command showing the generated unicode/ascii tables with colour coding.\n\nCommand used:\n\n```sh\npython3 -m neighgen asinfo -x -F 210083\n# Alternative if you have neighgen installed from pip:\nneighgen asinfo -x -F 210083\n```\n\n<img src=\"https://i.imgur.com/rb2lSjE.png\" width=\"100%\" alt=\"Screenshot of ASINFO-RAW command showing outputted JSON\" />\n\nScreenshot of `ASINFO-RAW` command showing outputted JSON which represents the ASN's metadata, including\ntheir IXP's and facilities.\n\nCommand used:\n\n```sh\npython3 -m neighgen asinfo-raw -x -F 210083\n# Alternative if you have neighgen installed from pip:\nneighgen asinfo-raw -x -F 210083\n```\n\n<img src=\"https://i.imgur.com/QGCgbSo.png\" width=\"100%\" alt=\"Screenshot of ASINFO-RAW command in YML output mode\" />\n\nScreenshot of `ASINFO-RAW` command - same as previous example, but with YML output mode instead of JSON.\n\nCommand used:\n\n```sh\npython3 -m neighgen asinfo-raw -x -F 210083 yml\n# Alternative if you have neighgen installed from pip:\nneighgen asinfo-raw -x -F 210083 yml\n```\n\n<img src=\"https://i.imgur.com/L65SXL1.png\" width=\"100%\" alt=\"Screenshot of ASINFO-RAW command in XML output mode\" />\n\nScreenshot of `ASINFO-RAW` command - same as previous example, but with XML output mode instead of JSON.\n\nCommand used:\n\n```sh\npython3 -m neighgen asinfo-raw -x -F 210083 xml\n# Alternative if you have neighgen installed from pip:\nneighgen asinfo-raw -x -F 210083 xml\n```\n\n<img src=\"https://i.imgur.com/KHOsv7P.png\" width=\"100%\" alt=\"Screenshot of NEIGH command, showing both NX-OS and IOS generated config\" />\n\nScreenshot of `NEIGH` command, showing both NX-OS and IOS generated config.\n\nThe generated config can be pasted into the CLI of a Cisco device running NX-OS or IOS.\n\nThere are various CLI arguments and YML config options available to customise the generated\nconfig, such as enabling/disabling peer template/policy/session, or changing the names\nthey refer to.\n\nCommand used:\n\n```sh\npython3 -m neighgen neigh 210083 ams-ix\npython3 -m neighgen neigh -o ios 210083 sthix\n# Alternative if you have neighgen installed from pip:\nneighgen neigh 210083 ams-ix\nneighgen neigh -o ios 210083 sthix\n```\n\n# Thanks for reading!\n\n**If this project has helped you, consider [grabbing a VPS or Dedicated Server from Privex](https://www.privex.io).**\n\n**Prices start at as little as US$0.99/mo (we take cryptocurrency!)**\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Privex/neighgen",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "privex-neighgen",
    "package_url": "https://pypi.org/project/privex-neighgen/",
    "platform": "",
    "project_url": "https://pypi.org/project/privex-neighgen/",
    "project_urls": {
      "Homepage": "https://github.com/Privex/neighgen"
    },
    "release_url": "https://pypi.org/project/privex-neighgen/0.8.0/",
    "requires_dist": [
      "privex-helpers[setuppy] (>=3.0)",
      "privex-loghelper",
      "privex-db",
      "peeringdb (>=1.2.1)",
      "Django",
      "django-peeringdb (>=2.9)",
      "psycopg2",
      "PyYAML",
      "jinja2",
      "rich",
      "dicttoxml",
      "python-dotenv"
    ],
    "requires_python": "",
    "summary": "NeighGen - A BGP neighbour config generator written in Python, using PeeringDB's API to discover ASN BGP addresses",
    "version": "0.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11495367,
  "releases": {
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65c30eed93439eab246591999a1ef269d20238637b6002165914b54290f28706",
          "md5": "5c8e4a10a2224cb57972e2e8da75f1bd",
          "sha256": "750f89c37ac4f6b826a077a17d1ab54cecb7a84cf71ba371bb448339bc02a2ea"
        },
        "downloads": -1,
        "filename": "privex_neighgen-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c8e4a10a2224cb57972e2e8da75f1bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28087,
        "upload_time": "2021-09-20T06:40:15",
        "upload_time_iso_8601": "2021-09-20T06:40:15.565263Z",
        "url": "https://files.pythonhosted.org/packages/65/c3/0eed93439eab246591999a1ef269d20238637b6002165914b54290f28706/privex_neighgen-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "120f209363037c23744897c245672db27b9ed0813e7bff93265fbec4b64f11a9",
          "md5": "bc9ee05962bfa6fdfbb55fe9d899bace",
          "sha256": "934a482d578d83052ab787e59d13c978600e697040192cb3b9d9d6b552f117d7"
        },
        "downloads": -1,
        "filename": "privex_neighgen-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bc9ee05962bfa6fdfbb55fe9d899bace",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26938,
        "upload_time": "2021-09-20T06:40:17",
        "upload_time_iso_8601": "2021-09-20T06:40:17.734521Z",
        "url": "https://files.pythonhosted.org/packages/12/0f/209363037c23744897c245672db27b9ed0813e7bff93265fbec4b64f11a9/privex_neighgen-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65c30eed93439eab246591999a1ef269d20238637b6002165914b54290f28706",
        "md5": "5c8e4a10a2224cb57972e2e8da75f1bd",
        "sha256": "750f89c37ac4f6b826a077a17d1ab54cecb7a84cf71ba371bb448339bc02a2ea"
      },
      "downloads": -1,
      "filename": "privex_neighgen-0.8.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c8e4a10a2224cb57972e2e8da75f1bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28087,
      "upload_time": "2021-09-20T06:40:15",
      "upload_time_iso_8601": "2021-09-20T06:40:15.565263Z",
      "url": "https://files.pythonhosted.org/packages/65/c3/0eed93439eab246591999a1ef269d20238637b6002165914b54290f28706/privex_neighgen-0.8.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "120f209363037c23744897c245672db27b9ed0813e7bff93265fbec4b64f11a9",
        "md5": "bc9ee05962bfa6fdfbb55fe9d899bace",
        "sha256": "934a482d578d83052ab787e59d13c978600e697040192cb3b9d9d6b552f117d7"
      },
      "downloads": -1,
      "filename": "privex_neighgen-0.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bc9ee05962bfa6fdfbb55fe9d899bace",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26938,
      "upload_time": "2021-09-20T06:40:17",
      "upload_time_iso_8601": "2021-09-20T06:40:17.734521Z",
      "url": "https://files.pythonhosted.org/packages/12/0f/209363037c23744897c245672db27b9ed0813e7bff93265fbec4b64f11a9/privex_neighgen-0.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}