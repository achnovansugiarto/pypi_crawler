{
  "info": {
    "author": "Welt",
    "author_email": "xingcy@smail.nju.edu.cn",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PySVM : A NumPy implementation of SVM based on SMO algorithm\n\n实现LIBSVM中的SVM算法，对标sklearn中的SVM模块\n\n- [x] LinearSVC\n- [x] KernelSVC\n- [x] NuSVC\n- [x] LinearSVR\n- [x] KernelSVR\n- [x] NuSVR\n- [x] OneClassSVM\n\n2021.11.05 : 加入了高斯核函数的RFF方法。\n\n2022.01.27 : 通过向量化运算对算法进行提速，加入性能对比。\n\n2022.01.28 : 加入缓存机制，解决大数据下Q矩阵的缓存问题，参考<https://welts.xyz/2022/01/28/cache/>。\n\n2022.01.30 : 删除Solver类，设计针对特定问题的SMO算法。\n\n2022.02.01 : 修改SVR算法中的错误。\n\n2022.05.27 : 重构代码，将SMO算法求解和SVM解耦，更容易解读。\n\n## 主要算法\n\nPython(NumPy)实现SMO算法，也就是\n\n<img src=\"src/formula.png\" alt=\"opt\" style=\"zoom:67%;\" />\n\n和\n\n<img src=\"src/nu-formula.png\" alt=\"opt\" style=\"zoom:67%;\" />\n\n的优化算法，从而实现支持向量机分类、回归以及异常检测。\n\n## Framework\n\n我们实现了线性SVM，核SVM，用于分类，回归和异常检测:\n\n```mermaid\ngraph \n\tPySVM --> LinearSVM\n\tPySVM --> KernelSVM\n\tPySVM --> NuSVM\n\tLinearSVM --> LinearSVC\n\tLinearSVM --> LinearSVR\n\tKernelSVM --> KernelSVC\n\tKernelSVM --> KernelSVR\n\tKernelSVM --> OneClassSVM\n\tNuSVM --> NuSVC\n\tNuSVM --> NuSVR\n```\n\n设计框架：\n\n```mermaid\ngraph BT\n\tcache(LRU Cache) --> Solver\n\tSolver --> LinearSVM\n\tLinearSVM --> KernelSVM\n\tKernel --> KernelSVM\n\tRFF --> Kernel\n\tmc(sklearn.multiclass) --> LinearSVM\n\tmc --> NuSVM\n\tNuSolver --> NuSVM\n\tKernel --> NuSVM\n\tcache --> NuSolver\n```\n\n其中RFF表示随机傅里叶特征，LRU Cache缓存机制用于处理极大数据的场景。\n\n## Install\n\n```bash\npip install pysvm\n```\n\n或源码安装\n\n```bash\ngit clone https://github.com/Kaslanarian/PySVM\ncd PySVM\npython setup.py install\n```\n\n运行一个简单例子\n\n```python\n>>> from sklearn.datasets import load_iris\n>>> from pysvm import LinearSVC\n>>> X, y = load_iris(return_X_y=True)\n>>> X = (X - X.mean(0)) / X.std(0) # 标准化\n>>> clf = LinearSVC().fit(X, y) # 训练模型\n>>> clf.score(X, y) # 准确率\n0.94\n```\n\n## Examples\n\n在[`tests`](./tests)中，有5个例子，分别是：\n\n- [dataset_classify.py](./tests/dataset_classify.py), 使用三种SVM对sklearn自带数据集分类（默认参数、选取20%数据作为测试数据、数据经过标准化）：\n\n    |  Accuracy  |  Iris   |  Wine   | Breast Cancer | Digits  |\n    | :--------: | :-----: | :-----: | :-----------: | :-----: |\n    | Linear SVC | 94.737% | 97.778% |    96.503%    | 95.556% |\n    | Kernel SVC | 97.368% | 97.778% |    96.503%    | 98.222% |\n    |   NuSVC    | 97.368% | 97.778% |    92.308%    | 92.222% |\n\n- [dataset_regression.py](./tests/dataset_regression.py), 使用三种SVM对sklearn自带数据集回归（默认参数、选取20%数据作为测试数据、数据经过标准化）：\n\n    |  R2 score  | Boston | Diabetes |\n    | :--------: | :----: | :------: |\n    | Linear SVR | 0.6570 |  0.4537  |\n    | Kernel SVR | 0.6992 |  0.1756  |\n    |   NuSVR    | 0.6800 |  0.1459  |\n\n- [visual_classify.py](./tests/visual_classify.py)，分别用LinearSVC和KernelSVC对人工构造的二分类数据集进行分类，画出分类结果图像和决策函数值图像：\n  \n  ![visual_classify](./src/visual_classify.png)\n\n- [visual_regression.py](./tests/visual_regression.py)用三种SVR拟合三种不同的数据：线性数据，二次函数和三角函数：\n\n  ![regression](src/visual_regression.png)\n\n- [visual_outlier.py](./tests/visual_outlier.py)用OneClassSVM进行异常检测：\n\n  ![oc_svm](src/oc_svm.png)\n\n## Reference\n\n- Chang, Chih-Chung, and Chih-Jen Lin. \"LIBSVM: a library for support vector machines.\" ACM transactions on intelligent systems and technology (TIST) 2.3 (2011): 1-27.\n- https://github.com/Kaslanarian/libsvm-sc-reading : 阅读LibSVM源码的知识整理与思考.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kaslanarian/PySVM",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "Welt",
    "maintainer_email": "xingcy@smail.nju.edu.cn",
    "name": "pysvm",
    "package_url": "https://pypi.org/project/pysvm/",
    "platform": null,
    "project_url": "https://pypi.org/project/pysvm/",
    "project_urls": {
      "Homepage": "https://github.com/Kaslanarian/PySVM"
    },
    "release_url": "https://pypi.org/project/pysvm/0.2/",
    "requires_dist": [
      "numpy",
      "sklearn"
    ],
    "requires_python": "",
    "summary": "PySVM : A NumPy implementation of SVM based on SMO algorithm",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14513107,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "768d775dd71250ceb69be155a355df4a75a934658f04d885435a28b7cf1decd0",
          "md5": "541fdfa743e1d331571d89307898dd13",
          "sha256": "61868d17170040708b8ea39e57977c586c9e829afb4cb528ad3705fc26db7e3f"
        },
        "downloads": -1,
        "filename": "pysvm-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "541fdfa743e1d331571d89307898dd13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16032,
        "upload_time": "2022-07-22T06:55:21",
        "upload_time_iso_8601": "2022-07-22T06:55:21.920289Z",
        "url": "https://files.pythonhosted.org/packages/76/8d/775dd71250ceb69be155a355df4a75a934658f04d885435a28b7cf1decd0/pysvm-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3be16a69fca3366f9b22c3f8aacfb54c452e0fdbdb651938e75c0eab1208a573",
          "md5": "6f8ccb5ff10c6c9065e51004d1d72d51",
          "sha256": "b21f2740d61923e56d13c6f4621f63363abd30e3ff5c41163d98b71a179028d7"
        },
        "downloads": -1,
        "filename": "pysvm-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6f8ccb5ff10c6c9065e51004d1d72d51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13713,
        "upload_time": "2022-07-22T06:55:24",
        "upload_time_iso_8601": "2022-07-22T06:55:24.274945Z",
        "url": "https://files.pythonhosted.org/packages/3b/e1/6a69fca3366f9b22c3f8aacfb54c452e0fdbdb651938e75c0eab1208a573/pysvm-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "768d775dd71250ceb69be155a355df4a75a934658f04d885435a28b7cf1decd0",
        "md5": "541fdfa743e1d331571d89307898dd13",
        "sha256": "61868d17170040708b8ea39e57977c586c9e829afb4cb528ad3705fc26db7e3f"
      },
      "downloads": -1,
      "filename": "pysvm-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "541fdfa743e1d331571d89307898dd13",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16032,
      "upload_time": "2022-07-22T06:55:21",
      "upload_time_iso_8601": "2022-07-22T06:55:21.920289Z",
      "url": "https://files.pythonhosted.org/packages/76/8d/775dd71250ceb69be155a355df4a75a934658f04d885435a28b7cf1decd0/pysvm-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3be16a69fca3366f9b22c3f8aacfb54c452e0fdbdb651938e75c0eab1208a573",
        "md5": "6f8ccb5ff10c6c9065e51004d1d72d51",
        "sha256": "b21f2740d61923e56d13c6f4621f63363abd30e3ff5c41163d98b71a179028d7"
      },
      "downloads": -1,
      "filename": "pysvm-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6f8ccb5ff10c6c9065e51004d1d72d51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13713,
      "upload_time": "2022-07-22T06:55:24",
      "upload_time_iso_8601": "2022-07-22T06:55:24.274945Z",
      "url": "https://files.pythonhosted.org/packages/3b/e1/6a69fca3366f9b22c3f8aacfb54c452e0fdbdb651938e75c0eab1208a573/pysvm-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}