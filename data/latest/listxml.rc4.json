{
  "info": {
    "author": "",
    "author_email": "Norman Gray <gray@nxg.name>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Text Processing :: Markup :: XML"
    ],
    "description": "Listxml\n=======\n\nListxml is an _unpythonic_ XML wrangler!\n\nVersion: 0.4.1, released 2023 March 22.\n\nPython provides the DOM and ElementTree interfaces for creating an XML\ntree, and serialising it for output.\nThese work well, but can hardly be called lightweight; it can be\nwearisome to programmatically assemble an XML document, and because the\ndocument is assembled from a multitude of method calls, it's easy to\nlose the wood amongst the trees.\n\nThe `listxml` package provides a different way of creating a data\nstructure which can be serialised into XML.  That structure might represent an\n(X)HTML file, or something like an RSS feed.  The structure's easy to generate\nprogrammatically (list comprehensions are your friend!),\nand, because it's compact, you can see more of it on\nthe screen at once.\n\nRather than be clever about fancy syntax, Listxml aims for minimalism\nand a homogeneous representation (pssst: if you think this looks a bit\nlispy, you would not be mistaken).\n\nFor example:\n\n    import listxml\n\n    # l is a list of lists representing elements\n    l = [['p',                       # the element name is a string\n          [['class', 'highlight']],  # attributes are a list of two-element lists\n          \"Hello, world\", 99],       # element content, string or str()-friendly\n         [\"p\", \"& another <para>\"]]  # no attributes, and escaped content\n\n    coll = listxml.Collector()\n    listxml.list_to_collector(l, coll)\n\n    # print the resulting byte content\n    for content in coll:\n        print(content.decode('utf-8'))\n\n    # or use it as an iterator\n    print(b''.join(coll))\n\nAlternatively, use `PrintCollector` as a collector, to send output to stdout\nor another stream (`list_to_stream` does that).\n\nThe intention is that, as long as you don't use the `b'bytestring'`\nescape mechanism mentioned below, it should be impossible to serialise\nan invalid XML file using this package.\n\nFor symmetry, the package also includes a way of turning XML into the\nsort of list it expects (wrapping the expat parser built in to Python):\n\n    # Given a file containing \"<xml>...</xml>\"...\n    l = construct(fn)\n\n\nA fuller example\n----------------\n\nThis example assembles an HTML page body, and drops it into a ‘template’.\n\n    import listxml\n\n    def wrap_body(title, body):\n        \"\"\"Create a standard XHTML document (ie, this is a form of templating)\"\"\"\n        return ['html', [['xmlns', 'http://www.w3.org/1999/xhtml']],\n                ['head',\n                 ['title', title],\n                 ['link', [['rel', 'stylesheet'],\n                           ['type', 'text/css'],\n                           ['href', 'http://example.org/mystyle.css']]]],\n                ['body',\n                 ['h1', title],\n                 *body]]\n\n    # assemble a list of li elements\n    items = [\"First item\", \"Second item\"]\n    ul = [['li', i] for i in items]\n\n    # build up a list of body content elements\n    b = [['p', 'One paragraph'],\n         ['p', \"Another one, with \",\n          ['a', [['href', 'http://example.org/home.html']],\n           \"a link\"]],\n         ['ul', *ul]] # append the ul list to make list contents\n\n    # use the PrintCollector to send this to stdout\n    coll = listxml.PrintCollector()\n    listxml.list_to_collector(wrap_body(\"My XHTML file\", b), coll)\n\n\n\nClasses and functions\n---------------------\n\nThe package defines the following classes and functions.\n\n### Function `list_to_collector(lx, coll)`\n\n  * lx: a list representation of an XML document\n  * coll: a Collector – see below\n\nConvert the input list to XML and send it to the collector.\nSee below for the structure of the input list.\nReturns the input collector.\n\nIn fact, the 'coll' object can be any object with an append() method.\n\n### Function `list_to_stream(lx, stream=None)`\n\n  * lx: a list representation of an XML document\n  * stream: a text stream, such as `sys.stdout`, the object returned\n    from `open()`, or an\n    [`io.StringIO`](https://docs.python.org/3/library/io.html?highlight=io#io.StringIO)\n    object.\n\nAs with list_to_collector, except that the contents are 'collected' to\nstdout.  If the `stream` argument is present, send the output there\ninstead.  This function returns the number of characters written to\nthe stream.\n\n### Class `Collector`\n\nCollect strings or bytes, and return them as a iterator of bytestrings.  The\nCollector object is given to the `list_to_collector` function to\naccumulate the results of the conversion of the list.  The Collector\nobject may subsequently be treated as an iterator, returning a\nsequence of bytestrings.  This may therefore be printed as:\n\n    content = ['div', ['p', \"Hello, world\"], [\"p\", \"Another paragraph\"]]\n\n    coll = listxml.Collector()\n    listxml.list_to_collector(content, coll)\n    for bs in coll:\n        print(bs.decode('utf-8'), end='')\n\nor write it out as a single bytestring:\n\n    with open('output.xml', 'wb') as f:\n        f.write(b''.join(coll))\n\nMethods:\n\n  * append(s): append something to the collector, which can be a string,\n    a bytestring, or anything `str()` can work with.  Returns self.\n  * get_length(): return the length of the contents, in bytes.\n\n### Class `PrintCollector`\n\nA Collector-like object which 'collects’ its output and sends it to a stream.\nThe output is sent to `sys.stdout`, unless an alternative is set with\nthe `set_stream()` method.\n\nThe ‘stream’ must be a text file, such as `sys.stdout`, the stream\nreturned by the `open()` function, or an in-memory object such as\n`io.StringIO`.\n\nThis is not in fact a subclass of Collector, though it has the same\ninterface.\n\n    coll = listxml.PrintCollector()\n    listxml.list_to_collector(content, coll)\n\nKeyword arguments:\n\n  * `stream` : if the object is constructed with `stream=foo`, then\n    that stream is installed as the default stream to which the\n    collector writes, instead of `sys.stdout`.\n  * `file` : the default stream is created as an output file pointing\n    to this file; when called in this way, the object can be used as a\n    Context Manager, or the object's `close()` function can close the\n    collector and stream later.\n\nMethods: as with `Collector`, with some adjustments\n\n  * append(s): append something to the collector, as with `Collector`.  Returns self.\n  * get_length(): returns the number of characters written to the stream.\n  * set_stream(s): set the stream that is written to.\n  * close(): close the output stream, if it is not `sys.stdout`.\n\nThe `PrintCollector` object can also be used as a context manager (in\nwhich case it will usually make sense to include the `file`\nparameter).\n\n    with listxml.PrintCollector(file='myoutput.xml') as coll:\n        listxml.list_to_collector(content, coll)\n\nOr alternatively just use the `list_to_stream` function:\n\n    with open('output.xml', 'w') as f:\n        listxml.list_to_stream(content, f)\n\nTo print to a string:\n\n    s = io.StringIO()\n    with PrintCollector(stream=s) as coll:\n        list_to_collector(['p', \"hello\"], coll)\n        print(s.getvalue())\n\n\n### Function `construct(filename_or_stream, keywords...)`\n\nFor symmetry, there is also a function to turn an XML source into a list.\nGiven a (string) filename or a text stream containing XML,\nthis constructs a list representation of the XML, and returns it.\n\nKeyword arguments:\n\n  * **attributes_as_dict**:\n    If `attributes_as_dict` is False (default) then attributes are\n    `[['name','value'], ...]`; if it is True, then attributes are a dict\n    `{'name': 'value', ...}`.\n  * **omit_empty_attlist**:\n    If `omit_empty_attlist` is False (default)\n    then there is always an attribute element, even when the attribute\n    list is empty (ie, `[]` or `{}`); if it is True, then empty attribute\n    lists are suppressed.\n\nThis reading function is, in this version, not XML Namespace-aware.\nAdding that isn't hard, but it's currently unclear how best to\nrepresent namespaces in a convenient way, when generating the input\nlist for writing.  Thus, at present, `xmlns` attributes in the input\nXML are not interpreted in any special way.\n\nIf the argument is not a file name, it is an input stream, which can\ncome from a file `open()` or via\n[io.StringIO](https://docs.python.org/3/library/io.html), to read from\na string containing XML:\n\n    lx = construct(\"/path/to/file\")\n\n    with open(\"/path/to/file\") as f:\n        lx = construct(f)\n\n    lx = construct(io.StringIO(\"<p>hello</p>\"))\n\n### Function `search_for_path(path, lx, with_element=False)`\n\nA simple path query.  The syntax is a (very small!) subset of the XPath syntax.\n\nThe path argument is\n\n    path      ::= node-spec ( '/' node-spec)*\n    node-spec ::=   element-name\n                  | element-name '[' predicate ']'\n                  | '@' attribute-name\n    predicate ::= '@' attribute-name '=\"' attribute-value '\"'\n    element-name, attribute-name, attribute-value ::= [a-zA-Z0-9_-]+\n\nThe function selects elements and attributes within the list which\nhave parent-child relationships which match the path, and returns a\nlist of all of the matching elements (rather than merely the first\none).\n\nIf the path ends with a `@attname` then the function instead returns a list of\nattribute values.\n\nIf an element is qualified by a predicate, `[@att=\"value\"]`, then it\nmatches only if it has an element `@att` with the given value.\n\nFor example, given the document\n\n    doc = ['div',\n           ['foo', \"p1\"],\n           ['bar', [['a1', 'v1x']], \"p1x\"],\n           ['foo', ['p', ['bar', 'content']]],\n           ['foo', ['bar', \"p2\"]],\n           ['foo', ['bar', ['baz', \"p3\"]]],\n           ['foo', ['bar', [['a1', 'v1']], \"text\", ['p', \"p4\"]]],\n           ['foo', ['bar', [['a1', 'v2'], ['a3', 'v3']], \"p5\"]]]\n\nthe following `path` arguments produce the given results\n\npath                 | search_for_path(path, doc)\n---------------------|--------------\nfoo/bar              |  [['p2'], [['baz', 'p3']], ['text', ['p', 'p4']], ['p5']]\nfoo/bar/@a1          |  ['v1', 'v2']\nfoo/bar[@a1=\"v1\"]    |  [['text', ['p', 'p4']]]\nfoo/bar[@a1=\"v1\"]/p  |  [['p4']]\nfoo/bar[@a1=\"v2\"]/@a3|  ['v3']\n\nIf `with_element` is True, then include the matching element, with\nattributes, rather than only the content.  For example, with the above\ndocument, `search_for_path('foo/bar[@a1=\"v1\"]', doc,\nwith_element=True)` produces `[['bar', {'a1': 'v1'}, 'p4']]` rather\nthan only the content `[['p4']]`.\n\n**Note:** the syntax of this function's path argument changed in v0.4.0.\n\n\n### Function `is_listxml_p(lx)`\n\nReturn true if the argument is a valid listxml representation\nof an element.  See below for the definition.\n\n\nCommon techniques\n-----------------\n\nAssemble a list:\n\n    trs = [['tr', ['td', 'foo']],\n           ['tr', ['td', 'bar']]]\n    table = ['table', *trs]   # wrap an array of elements in a parent element\n\n    doc = ['body',\n           ['p',\n            [['class', 'highlight']],\n            \"Here is table no.\", 1],\n           table,\n           ['p', \"that was \", ['em', \"easy\"]]]\n\n    with open('t.xhtml', 'w') as f:\n        listxml.list_to_stream(doc, stream=f)\n\nPart of the point of this library is that in some circumstances it's\nconvenient to generate list content:\n\n    elements = ['one', 'two']\n    trs = [['tr', ['td', e]] for e in elements]\n\nIn this context, note the difference between\n\n    table1 = ['table', trs]\n\nand\n\n    table2 = ['table', *trs]\n\nThe first produces\n\n    ['table', [['tr', ['td', 'one']], ['tr', ['td', 'two']]]]\n\nwhich is not the structure desired, because this appears to be an attribute `tr`,\nwith value `['td', 'one']` (this won't produce an error, since the\npackage will (successfully) call `str()` on the attribute value).\nIn contrast the second version produces\n\n    ['table', ['tr', ['td', 'one']], ['tr', ['td', 'two']]]\n\nwhich is correct, and which turns into\n\n    <table><tr><td>one</td></tr><tr><td>two</td></tr></table>\n\nAnother possibility would be `table = ['table']; table.extend(trs)`.\n\n\nInput syntax\n------------\n\nThe input list consists of a single `element` representing an XML document, where\n\n    element: [STRING, optional-attributes?, item ...]\n    optional-attributes: [] | [[STRING, stringable], ...] | DICT\n    item: element | stringable | BYTESTRING\n\nwhere `STRING` and `BYTESTRING` are the Python types,\n`DICT` is a (`STRING` -> `stringable`) Python dictionary,\nand `stringable` is either a string,\nor something (other than an `optional-attributes`) which\n[`str()`](https://docs.python.org/3/library/stdtypes.html#str)\ncan turn into a string.\n\nThus:\n\n    ['el', 'foo', 'b&r', ...]                         -- an element <el>foob&amp;r...</el>\n    ['el', [['k1', 'v1'], ['k2', 'v2'], ...]], ...]   -- an element <el k1=\"v1\" k2=\"v2\"...>...</el>\n    ['el', {'k1': 'v1', 'k2': 'v2', ...}, ...]        -- ditto\n\nand the ... may include other such elements.  Items which are\n‘stringable’ are escaped when being printed.  Items which are\nbytestrings are not; thus it's possible to have\n`b'<div>content</div>'` as an item and this will be emitted as-is,\neven if doing so would produce invalid XML.\n\n\nRelease notes\n-------------\n\nRelease 0.4.1:\n\n  * Fixed `.../@att` search path in `search_for_path`.\n\nRelease 0.4.0:\n\n  * The path argument to `search_for_path` changed to be a (small!)\n    subset of the XPath syntax.  This is incompatible with the 0.3.0 syntax.\n\nRelease 0.3.0:\n\n  * PrintCollector can now be used as a context manager.\n  * The order of the arguments to `list_to_collector` has been swapped.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD License (2-clause)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "listxml",
    "package_url": "https://pypi.org/project/listxml/",
    "platform": null,
    "project_url": "https://pypi.org/project/listxml/",
    "project_urls": {
      "repository": "https://heptapod.host/nxg/listxml"
    },
    "release_url": "https://pypi.org/project/listxml/0.4.1/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "An _unpythonic_ XML writer (and reader)!",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17403174,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7325f643e53228e58929661fed80ca0d1e91c5c8c9749317f15d80878348ce0",
          "md5": "d8628d0667fce12e5329d33526b14e73",
          "sha256": "7ce51db36168a44939a3966a79ff616167421f15ede7a8e2580d88683e89a8c8"
        },
        "downloads": -1,
        "filename": "listxml-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8628d0667fce12e5329d33526b14e73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 9489,
        "upload_time": "2022-08-20T13:37:58",
        "upload_time_iso_8601": "2022-08-20T13:37:58.307011Z",
        "url": "https://files.pythonhosted.org/packages/a7/32/5f643e53228e58929661fed80ca0d1e91c5c8c9749317f15d80878348ce0/listxml-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92f34b537f5005461b9032b2495485eea1ba1e1443bb40e8eb720db0eeb1d0b6",
          "md5": "e92a1c096a35c62c461d841bcc90b2bb",
          "sha256": "1594b4bc3c806f72dffa2b9f53d7247478c187263fc91751706eed4b2c921731"
        },
        "downloads": -1,
        "filename": "listxml-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e92a1c096a35c62c461d841bcc90b2bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 7616,
        "upload_time": "2022-08-20T13:37:59",
        "upload_time_iso_8601": "2022-08-20T13:37:59.765682Z",
        "url": "https://files.pythonhosted.org/packages/92/f3/4b537f5005461b9032b2495485eea1ba1e1443bb40e8eb720db0eeb1d0b6/listxml-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f556dd45535ca6a00ca81f341dcc24aa1f24beacbcef4bbcf4ae56c632fbeae3",
          "md5": "a954685989c4a0ee4a0c43a7f0a29219",
          "sha256": "1951999c3848bdb67f8b6eed1dbdaf6ba3ad5da6564b7bc9aa18ce3e54a6ed66"
        },
        "downloads": -1,
        "filename": "listxml-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a954685989c4a0ee4a0c43a7f0a29219",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 11096,
        "upload_time": "2022-09-25T15:05:06",
        "upload_time_iso_8601": "2022-09-25T15:05:06.227910Z",
        "url": "https://files.pythonhosted.org/packages/f5/56/dd45535ca6a00ca81f341dcc24aa1f24beacbcef4bbcf4ae56c632fbeae3/listxml-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f9d3da4c872ba4e03606a1cc7336d97c64216a1a9d6673d4aef66b189e76304",
          "md5": "b0bf2ac3ffdab1f7089f09dd2e4169d6",
          "sha256": "0b2c70318ddef23ef67bd87038c3e2f6d9e19efd0a537c94a179f9c075b3f761"
        },
        "downloads": -1,
        "filename": "listxml-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b0bf2ac3ffdab1f7089f09dd2e4169d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 13812,
        "upload_time": "2022-09-25T15:05:07",
        "upload_time_iso_8601": "2022-09-25T15:05:07.915590Z",
        "url": "https://files.pythonhosted.org/packages/6f/9d/3da4c872ba4e03606a1cc7336d97c64216a1a9d6673d4aef66b189e76304/listxml-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd830ce31b5a5392a341f10f3fc2ed5596440fc6306fde7da5242db2181a2b57",
          "md5": "6bb7a26bcb81f819063f82053ae215ca",
          "sha256": "4606423500b7834d9f803ef6400f1e0037fa5c7f25c3124ea57780eac2c739b8"
        },
        "downloads": -1,
        "filename": "listxml-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bb7a26bcb81f819063f82053ae215ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 12714,
        "upload_time": "2023-03-05T20:51:51",
        "upload_time_iso_8601": "2023-03-05T20:51:51.953575Z",
        "url": "https://files.pythonhosted.org/packages/dd/83/0ce31b5a5392a341f10f3fc2ed5596440fc6306fde7da5242db2181a2b57/listxml-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f646214c09ab228e822ee83a92f495bbe579a165e161efee2d1d197e5ac84e6a",
          "md5": "b096790790ef75f9812d4908fdd9aede",
          "sha256": "0fe2172c61cdfcd99fa562a3abe91b42867f032a5a85f243e3b66286dabbabd3"
        },
        "downloads": -1,
        "filename": "listxml-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b096790790ef75f9812d4908fdd9aede",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 15994,
        "upload_time": "2023-03-05T20:51:53",
        "upload_time_iso_8601": "2023-03-05T20:51:53.268093Z",
        "url": "https://files.pythonhosted.org/packages/f6/46/214c09ab228e822ee83a92f495bbe579a165e161efee2d1d197e5ac84e6a/listxml-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4aaf1224d9dba7d679b6f933cf09595f4b5a984e91d7d4c99e61975ea28a5c4b",
          "md5": "7e90d0236f9c32f515d3b54d69a3f1db",
          "sha256": "52e58ecfd6f53a8ac823c58a215829c274229f8b44a165f4347c564d6b60399b"
        },
        "downloads": -1,
        "filename": "listxml-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e90d0236f9c32f515d3b54d69a3f1db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 12873,
        "upload_time": "2023-03-22T19:18:07",
        "upload_time_iso_8601": "2023-03-22T19:18:07.280372Z",
        "url": "https://files.pythonhosted.org/packages/4a/af/1224d9dba7d679b6f933cf09595f4b5a984e91d7d4c99e61975ea28a5c4b/listxml-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ceabae67613eee8e9dc33840dd6b0a85b121c2189f94e28aaa4a2ac7553c3ed1",
          "md5": "d1a7d8eb8837e306dce6ccc2b94508b1",
          "sha256": "8dec8a9318cc058c403cf5ccaca92faa6d1f7e75bc57d8512fb88f3986bd3ba6"
        },
        "downloads": -1,
        "filename": "listxml-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d1a7d8eb8837e306dce6ccc2b94508b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 16539,
        "upload_time": "2023-03-22T19:18:08",
        "upload_time_iso_8601": "2023-03-22T19:18:08.555704Z",
        "url": "https://files.pythonhosted.org/packages/ce/ab/ae67613eee8e9dc33840dd6b0a85b121c2189f94e28aaa4a2ac7553c3ed1/listxml-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4aaf1224d9dba7d679b6f933cf09595f4b5a984e91d7d4c99e61975ea28a5c4b",
        "md5": "7e90d0236f9c32f515d3b54d69a3f1db",
        "sha256": "52e58ecfd6f53a8ac823c58a215829c274229f8b44a165f4347c564d6b60399b"
      },
      "downloads": -1,
      "filename": "listxml-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7e90d0236f9c32f515d3b54d69a3f1db",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 12873,
      "upload_time": "2023-03-22T19:18:07",
      "upload_time_iso_8601": "2023-03-22T19:18:07.280372Z",
      "url": "https://files.pythonhosted.org/packages/4a/af/1224d9dba7d679b6f933cf09595f4b5a984e91d7d4c99e61975ea28a5c4b/listxml-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ceabae67613eee8e9dc33840dd6b0a85b121c2189f94e28aaa4a2ac7553c3ed1",
        "md5": "d1a7d8eb8837e306dce6ccc2b94508b1",
        "sha256": "8dec8a9318cc058c403cf5ccaca92faa6d1f7e75bc57d8512fb88f3986bd3ba6"
      },
      "downloads": -1,
      "filename": "listxml-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d1a7d8eb8837e306dce6ccc2b94508b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 16539,
      "upload_time": "2023-03-22T19:18:08",
      "upload_time_iso_8601": "2023-03-22T19:18:08.555704Z",
      "url": "https://files.pythonhosted.org/packages/ce/ab/ae67613eee8e9dc33840dd6b0a85b121c2189f94e28aaa4a2ac7553c3ed1/listxml-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}