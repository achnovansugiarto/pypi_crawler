{
  "info": {
    "author": "Antonio Lepore, Biagio Palumbo, Gianluca Sposito",
    "author_email": "antonio.lepore@unina.it, biagio.palumbo@unina.it, gianluca.sposito@unina.it",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Manufacturing",
      "Intended Audience :: Science/Research",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3"
    ],
    "description": "NN4OCMSP \r\n================\r\n\r\nThis repository contains Python code and data of the paper of Lepore, Palumbo and Sposito \r\n*Out-of-control signal interpretation in multiple stream processes using artificial neural networks for passenger railway transportation*.\r\n\r\nThis repository contains the following files:\r\n\r\n-   NN4OCMSP/data contains the HVAC data set\r\n-   NN4OCMSP/dataset.py allows the user to access the HVAC data set from the `NN4OCMSP`package\r\n-   NN4OCMSP/functions.py is the source code of the Python package `NN4OCMSP` \r\n-   NN4OCMSP_tutorial.ipynb is the Jupyter Notebook performing all the analysis shown in\r\n    the Section \"*A real-case study*\" of the paper\r\n\r\nMoreover, in the following Section we provide a tutorial to show how to implement in Python \r\nthe proposed methodology used in the paper to the real-case study.\r\n\r\n# Out-of-control signal interpretation in multiple stream processes using artificial neural networks for passenger railway transportation\r\n\r\n## Introduction\r\n\r\nThis tutorial shows how to implement in Python the proposed methodology to the \r\nreal-case study to diagnose faults in the HVAC systems installed on board of passenger railway vehicles. \r\nThe operational data were acquired and made available by the rail transport company Hitachi \r\nRail STS based in Italy.\r\nHVAC data set contains the data analyzed in the paper and can be loaded by using the function `load_HVAC_data()`. \r\nAlternatively, one can use another data set and apply this methodology to any multiple stream process.\r\n\r\nYou can install the development version of the Python package `NN4MSP` from GitHub with\r\n\r\n``` python\r\npip install git+https://github.com/unina-sfere/NN4OCMSP#egg=NN4OCMSP\r\n```\r\n\r\nYou can install the Python package `NN4OCMSP` using pip\r\n\r\n``` python\r\npip install NN4OCMSP\r\n```\r\n\r\n``` python\r\n\r\n# Import libraries\r\n\r\nimport math \r\nimport pandas as pd\r\nimport numpy as np\r\nimport sklearn\r\nimport keras\r\nfrom keras import Sequential\r\nfrom keras.layers import Dense\r\n\r\nfrom sklearn import preprocessing\r\nfrom sklearn.model_selection import train_test_split\r\n\r\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\n%matplotlib inline\r\nfrom matplotlib.ticker import ScalarFormatter, AutoMinorLocator\r\n\r\nfrom itertools import combinations\r\nimport random as python_random\r\nimport tensorflow as tf\r\n\r\nfrom NN4OCMSP.functions import *\r\nimport NN4OCMSP.dataset\r\n\r\n```\r\n## Real-case study: HVAC systems in passenger railway vehicles \r\n\r\n``` python\r\n\r\n# Import HVAC data \r\n\r\nHVAC_data = NN4OCMSP.dataset.load_HVAC_data()\r\n\r\n```\r\n\r\n### Phase I\r\n\r\n``` python\r\n\r\n# Filter train A for Phase I estimatin\r\n\r\ntrain_1_data = HVAC_data[HVAC_data[\"Vehicle\"] == \"Train_A\"]\r\n\r\n# Select the DeltaT variables \r\ntrain_1_data = train_1_data.iloc[:,-6:]\r\n# Convert pandas dataframe to NumPy array\r\ntrain_1_data = train_1_data.to_numpy()\r\n\r\n```\r\n\r\n``` python\r\n\r\n# MSP\r\n\r\ns = 6 # number of streams corresponding to the number of train coaches\r\nn = 5 # subgroup size\r\n\r\n# Estimate the mean, the process variability and the variability between streams from the Phase I\r\n# data using standard one-way ANOVA techniques \r\n\r\nmu, sigmaA, sigmae = phaseI_estimation(train_1_data)\r\nprint('mean', mu)\r\nprint('standard deviation of the common stream component', sigmaA)\r\nprint('standard deviation of the individual stream component', sigmae)\r\n\r\n```\r\n\r\nmean 0.08 \r\n\r\nstandard deviation of the common stream component 0.85 \r\n\r\nstandard deviation of the individual stream component 0.33 \r\n \r\n``` python\r\n\r\n# Plot the ╬öT signals from the six train coaches\r\n\r\ntrain_1_data = train_1_data.transpose().reshape(-1,n).mean(1).reshape(s,-1).transpose() # Average every 5 rows \r\n\r\n# Plot the ╬öT signals from the six train coaches\r\n\r\nfig = plt.figure(figsize=(12, 8))\r\n\r\nx = np.arange(1, 26 ,1)\r\n\r\na = 0\r\nb = 25\r\n\r\nplt.plot(x,train_1_data[a:b,0], label = 'Coach 1', color='black', ls='-', marker='*')\r\nplt.plot(x,train_1_data[a:b,1], label = 'Coach 2', color='blue', ls='-', marker='.')\r\nplt.plot(x,train_1_data[a:b,2], label = 'Coach 3', color='red', ls='-.', marker= 's')\r\nplt.plot(x,train_1_data[a:b,3], label = 'Coach 4', color='green', ls='-', marker='D')\r\nplt.plot(x,train_1_data[a:b,4], label = 'Coach 5', color='orange', ls='-', marker='+')\r\nplt.plot(x,train_1_data[a:b,5], label = 'Coach 6', color='violet', ls='-', marker='P')\r\n# plt.axhline(0, color=\"red\")\r\nplt.xlabel('Subgroup', fontsize=12)\r\nplt.ylabel('$ \\Delta$T', fontsize=12)\r\nplt.legend(fontsize=10)\r\n\r\nplt.tick_params(axis='both', which='major', size = 7, width = 1 , direction = 'out', labelsize = 10)\r\nplt.xticks(np.arange(1, 26, 1))\r\n\r\nplt.show()\r\n\r\n```\r\n\r\n![](https://github.com/unina-sfere/NN4OCMSP/blob/main/README_Figure/plot_DeltaT_PhaseI_train_A.png)\r\n\r\n\r\n### Neural Network training\r\n\r\n``` python\r\n\r\n# Set the simulation parameters to properly generate the data set to train the Neural Network (NN)\r\n\r\nnum_samples = 10000 # number of samples for each out-of-control (oc) scenario\r\nalpha_sim = 0.05 # Type-I error\r\n\r\n# Generate data\r\nX, y = dataset_generator(s,n,num_samples, mu, sigmaA, sigmae,alpha_sim)\r\n\r\n```\r\n\r\n``` python\r\n\r\n# Train/validation split\r\n\r\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, stratify = y ,random_state=27)\r\n\r\n```\r\n\r\n``` python\r\n\r\n# Data are normalized to have unit variance and zero mean\r\n\r\nscaler = preprocessing.StandardScaler().fit(X_train)\r\nX_train = scaler.transform(X_train)\r\nX_val = scaler.transform(X_val)\r\n\r\n```\r\n\r\n``` python\r\n\r\n# NN definition \r\n\r\nnum_hidden_layer = 2 # Number of hidden layers\r\nhidden_activation_function = ['relu', 'relu'] # activation function in the hidden layers\r\nnumber_hidden_neuron = [20,10] # number of neurons in the hidden layers\r\nnum_output_neuron = s # The output layer consists of ≡¥æá neurons, corresponding to the ≡¥æá possible streams \r\n                      # responsible for the OC signal\r\n    \r\nepochs = 10 # Number of epochs to train the model. An epoch is an iteration over the entire training data\r\nbatch_size = 516 # Number of samples per gradient update\r\n\r\n# NN Training \r\n\r\nclassifier = NN_model(hidden_activation_function, num_hidden_layer,number_hidden_neuron, num_output_neuron) \r\n\r\n# Compiling the neural network\r\n\r\nclassifier.compile(optimizer ='adam', loss='binary_crossentropy', metrics = ['accuracy']) # Configures the model for training\r\n\r\n# Fitting \r\n\r\nhistory = classifier.fit(X_train, y_train, batch_size = batch_size, epochs = epochs, validation_data=(X_val, y_val)) # Trains the model\r\n\r\n```\r\n\r\n### Phase II\r\n\r\n\r\n``` python\r\n\r\ntrain_2_data = HVAC_data[HVAC_data[\"Vehicle\"] == \"Train_B\"] # Filter Vehicle by Train B \r\ntrain_2_data = train_2_data.iloc[0:-2,-6:] # Select the DeltaTemp variables \r\ntrain_2_data = train_2_data.to_numpy() # Convert pandas dataframe to NumPy array\r\ntrain_2_data = train_2_data.transpose().reshape(-1,n).mean(1).reshape(s,-1).transpose() # Average every 5 rows   \r\n\r\n```\r\n\r\n\r\n``` python\r\n\r\n# Plot the ╬öT signals from the six train coaches \r\n\r\nfig = plt.figure(figsize=(12, 6))\r\n\r\nx = np.arange(1,16,1)\r\n\r\na = 8\r\nb = 23\r\n\r\nplt.plot(x,train_2_data[a:b,0], label = 'Coach 1', color='black', ls='-', marker='*')\r\nplt.plot(x,train_2_data[a:b,1], label = 'Coach 2', color='blue', ls='-', marker='.')\r\nplt.plot(x,train_2_data[a:b,2], label = 'Coach 3', color='red', ls='-.', marker= 's')\r\nplt.plot(x,train_2_data[a:b,3], label = 'Coach 4', color='green', ls='-', marker='D')\r\nplt.plot(x,train_2_data[a:b,4], label = 'Coach 5', color='orange', ls='-', marker='+')\r\nplt.plot(x,train_2_data[a:b,5], label = 'Coach 6', color='violet', ls='-', marker='P')\r\nplt.xlabel('Subgroup', fontsize=12)\r\nplt.ylabel('$ \\Delta$T', fontsize=12)\r\nplt.legend(fontsize=10)\r\n\r\nplt.xticks(np.arange(1, 16, 1))\r\nplt.tick_params(axis='both', which='major', size = 7, width = 1 , direction = 'out', labelsize = 10)\r\n\r\nplt.show()\r\n\r\n```\r\n\r\n![](https://github.com/unina-sfere/NN4OCMSP/blob/main/README_Figure/plot_DeltaT_PhaseII_train_B.png)\r\n\r\n\r\n``` python\r\n\r\n# Compute the overall mean and the range for each sample\r\n\r\noverall_mean, sample_range  = range_overall_mean(train_2_data[a:b,])\r\n\r\n```\r\n\r\n\r\n``` python\r\n\r\n# Design and plot of the overall mean and range control charts\r\n\r\nfig_size = (12, 6)\r\nfig_control_chart = plt.figure(figsize=fig_size)\r\nfig_control_chart= control_charts(fig_control_chart, s, n, mu, sigmaA, sigmae, alpha_sim, overall_mean, sample_range)\r\n\r\n```\r\n![](https://github.com/unina-sfere/NN4OCMSP/blob/main/README_Figure/plot_control_charts_train_B.png)\r\n\r\n``` python\r\n\r\n#  Predict the OC stream(s) at the time of the first signal\r\n\r\npred = prediction(train_2_data[a:b,], classifier, scaler, overall_mean, sample_range)\r\n\r\n# The range control chart starts signaling an OC state from sample 9. \r\npred[8]\r\n\r\n```\r\narray([0, 0, 0, 0, 0, 1])\r\n\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/unina-sfere/NN4OCMSP",
    "keywords": "Out-of-control signal interpretation,Artificial neural networks,Multiple stream process,Multi-label classification,Railway HVAC systems",
    "license": "GNU General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "NN4OCMSP",
    "package_url": "https://pypi.org/project/NN4OCMSP/",
    "platform": null,
    "project_url": "https://pypi.org/project/NN4OCMSP/",
    "project_urls": {
      "Homepage": "https://github.com/unina-sfere/NN4OCMSP"
    },
    "release_url": "https://pypi.org/project/NN4OCMSP/1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Neural network out-of-control signal interpretation in multiple stream processes",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15734233,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2805555d119ce810a4e7707cfa4d6d1f77bcc580926998dcfce9e2fbf731126b",
          "md5": "e25c70d957ea1058bd0b89c0fc5d8cb5",
          "sha256": "0df73c8227bf4d29d26986c1eaf02411725c887752cddb88fac4318d3ce905d5"
        },
        "downloads": -1,
        "filename": "NN4OCMSP-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e25c70d957ea1058bd0b89c0fc5d8cb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27651,
        "upload_time": "2022-11-11T10:03:52",
        "upload_time_iso_8601": "2022-11-11T10:03:52.609606Z",
        "url": "https://files.pythonhosted.org/packages/28/05/555d119ce810a4e7707cfa4d6d1f77bcc580926998dcfce9e2fbf731126b/NN4OCMSP-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a5ac8f3350824d3ebbbfff448d48fc741b69cd62f2472f4bfe25f53a0d7eecb",
          "md5": "3bb705ee9069874af7cdadd86bb10640",
          "sha256": "c3b7cbf16ab1c10c68070278ee473fb44c8420aef99333feb2b4ca943e1cadbd"
        },
        "downloads": -1,
        "filename": "NN4OCMSP-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3bb705ee9069874af7cdadd86bb10640",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7695,
        "upload_time": "2022-11-11T10:03:56",
        "upload_time_iso_8601": "2022-11-11T10:03:56.168455Z",
        "url": "https://files.pythonhosted.org/packages/2a/5a/c8f3350824d3ebbbfff448d48fc741b69cd62f2472f4bfe25f53a0d7eecb/NN4OCMSP-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b829867ea89b695965cf7e7d0dacdf57e5555336db89d61c9b552fc4c05dbd74",
          "md5": "c5d7fb552d1860115050632bc23169bc",
          "sha256": "71d1547f032cf7c5c211b587918e0cca969b314f55c3903b0bbbc3b4a8d276ad"
        },
        "downloads": -1,
        "filename": "NN4OCMSP-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5d7fb552d1860115050632bc23169bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27651,
        "upload_time": "2022-11-11T10:23:32",
        "upload_time_iso_8601": "2022-11-11T10:23:32.261584Z",
        "url": "https://files.pythonhosted.org/packages/b8/29/867ea89b695965cf7e7d0dacdf57e5555336db89d61c9b552fc4c05dbd74/NN4OCMSP-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbaf0d1336fd4c4b214ee4fc78d69baf200e0ed7d5ed67c4888970f0111720ed",
          "md5": "5812385001faa04c14acf816fdae5af2",
          "sha256": "023288b4dc1265eb49f80309639592f97d0199bca6fc6f8f9801addf7cc40e4b"
        },
        "downloads": -1,
        "filename": "NN4OCMSP-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5812385001faa04c14acf816fdae5af2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7709,
        "upload_time": "2022-11-11T10:23:34",
        "upload_time_iso_8601": "2022-11-11T10:23:34.300905Z",
        "url": "https://files.pythonhosted.org/packages/db/af/0d1336fd4c4b214ee4fc78d69baf200e0ed7d5ed67c4888970f0111720ed/NN4OCMSP-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "925f5af2dbdbe4aac3469976dde6a63e1128e5abdc5073278179fc0f8e9fd3d3",
          "md5": "7e0f82739e455df8d13131adeb2fcd9d",
          "sha256": "13b647a6225b3cf6298a9e387b4d1f6ab21b08e090f70509771bce28c66c13b2"
        },
        "downloads": -1,
        "filename": "NN4OCMSP-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7e0f82739e455df8d13131adeb2fcd9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19938,
        "upload_time": "2022-10-29T13:35:57",
        "upload_time_iso_8601": "2022-10-29T13:35:57.732289Z",
        "url": "https://files.pythonhosted.org/packages/92/5f/5af2dbdbe4aac3469976dde6a63e1128e5abdc5073278179fc0f8e9fd3d3/NN4OCMSP-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "925f5af2dbdbe4aac3469976dde6a63e1128e5abdc5073278179fc0f8e9fd3d3",
        "md5": "7e0f82739e455df8d13131adeb2fcd9d",
        "sha256": "13b647a6225b3cf6298a9e387b4d1f6ab21b08e090f70509771bce28c66c13b2"
      },
      "downloads": -1,
      "filename": "NN4OCMSP-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "7e0f82739e455df8d13131adeb2fcd9d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19938,
      "upload_time": "2022-10-29T13:35:57",
      "upload_time_iso_8601": "2022-10-29T13:35:57.732289Z",
      "url": "https://files.pythonhosted.org/packages/92/5f/5af2dbdbe4aac3469976dde6a63e1128e5abdc5073278179fc0f8e9fd3d3/NN4OCMSP-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}