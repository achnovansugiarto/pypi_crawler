{
  "info": {
    "author": "Carl Bender",
    "author_email": "bcarl@us.ibm.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# vision-tools\n## IBM MAximo Visual Inspection API Tools\nIBM Maximo Visual Inspection makes computer vision with deep learning more accessible\nto business users. IBM Maximo Visual Inspection includes an intuitive toolset that\nempowers subject matter experts to label, train, and deploy deep learning vision models,\nwithout coding or deep learning expertise. This repo provides a developer client API\nand command line (CLI) for an existing installation. To learn more about IBM Maximo\nVisual Inspection, check out the\n[IBM Marketplace](https://www.ibm.com/us-en/marketplace/ibm-maximo-visual-inspection)\n\nThe IBM Maximo Visual Inspection API tools has two parts; a Python API piece and a\ncommand line (CLI) piece. The CLI piece uses the API piece to communicate with an\nIBM Maximo Visual Inspection server. The CLI is meant to make it easier to do automation\nvia shell scripts while the API is meant to make it easier to do automation scripting\nin Python.\n\nThe goal is that the tools will support all of the endpoints and options available\nfrom the IBM MAximo Visual Inspection ReST API. However, not everything is supported\nat this time.\n\n## Setup\nSetup is performed via `pip install vision-tools`.\n\n## Using the CLI Tool\n### Introduction\nAll of the CLI operations are driven by a single command -- `vision`. This command takes\n a \"_resource_\" on which to operate. Currently supported resources are:\n\n * datasets\n * categories\n * files\n * fkeys\n * fmetadata\n * object-tags\n * object-labels\n * action-tags\n * action-labels\n * dltasks\n * trained-models\n * deployed-models\n * projects\n\nEach of these resources have operations that can be performed on them for creating, listing,\nshowing details, deleting, etc. Each resource will respond with the list of operations it\nsupports when given the `--help` flag (e.g. `vision datasets --help`). To get detailed help\nabout an operation for an entity use `--help` with the operation\n(e.g. `vision datasets list --help`).\n\nNote that flags, resources, and operations can be abbreviated to the point of uniqueness.\nUsing abbreviations is *NOT* recommended in scripts, but can be useful on the command line\nto reduce typing.\n\n### The Basics\nThe `vision` tool has the following usage:\n```\nUsage:  vision [--httpdetail] [--jsonoutput] [--host=<host> | --uri=<serverUri>] [--token=<token>] [--log=<level>] [-?] <resource> [<args>...]\n\nWhere:\n   --httpdetail   Causes HTTP message details to be printed to STDERR\n                  This information can be useful for debugging purposes or\n                  to get the syntax for use with CURL.\n   --jsonoutput   Intended to ease use by scripts, all output to STDOUT is in\n                  JSON format. By default output to STDOUT is more human\n                  friendly\n   --host         Identifies the targeted MVI server. If not\n                  specified here, the VAPI_HOST environment variable is used.\n                  This parameter has been deprecated. It is maintained for \n                  backward compatibility, but will be removed in a future \n                  release of the tools. \n   --uri          Identifies the base URI for the MVI server -- including the\n                  '/api' \"directory\". If not specified, VAPI_BASE_URI\n                  environment variable will be used.\n   --token        The API Key token. If not specified here, the\n                  VAPI_TOKEN environment variable is used.\n   --log          Requests logging at the indicated level. Supported levels are\n                  'error', 'warn', 'info', and 'debug'\n   -?  displays this help message.\n\n   <resource> is required and must be one of:\n      categories     -- work with categories within a dataset\n      datasets       -- work with datasets\n      files          -- work with dataset files (images and/or videos)\n      fkeys          -- work with user file metadata keys\n      fmetadata      -- work with user file metadata key/value pairs\n      object-tags    -- work with object detection tags \n      object-labels  -- work with object detection labels (aka annotations)\n      dltasks        -- work with DL training tasks\n      trained-models -- work with trained models\n      deployed-models -- work with deployed models\n      projects       -- work with projects\n      users          -- work with users\n\n'vision' provides access to Maximo Visual Inspection resources via the ReST API.\nUse 'vision <resource> --help' for more information about operating on a given resource\n```\n\nTwo pieces of information are required -- the base URI of the server (`--uri`) and the\nuser's API Key (`--token`). It is often easier to specify this information via environment\nvariables. The `$VAPI_BASE_URI` variable is used for the server URI and the `$VAPI_TOKEN`\nvariable is used for the API Key.\n\nIf a different port is needed, that port should be included with base URI.\n\n### Quick Start Summary\n#### Using a Standalone Server with \"visual-insights\" URI\n\nAssume that the target server is a Maximo Application Suite environment with MVI available at \n`https://mvi-mas-my-server.your-company.com`. \nAssume that the user has already created an API key via the MVI UI and the value is `API-KEY-FROM-UI`.\n\nPerform the following steps for the easiest use:\n 1. set VAPI_BASE_URI\n 2. set VAPI_TOKEN\n 3. ensure token is set\n\nExample commands...\n```\nexport VAPI_BASE_URI=\"https://mvi-mas-my-server.your-company.com/api\"\nexport VAPI_TOKEN=\"API-KEY-FROM-UI\"\n```\n\n`vision` should now report results from the server; try `vision datasets list --summary`.\nIf something failed, see the \"debugging\" section below.\n\n### International Language Support\n\nWith version 8.2.0 of Maximo Visual Inspection (GA'ed in January 2021), the API can generate\nerror messages in different languages. To get API messages in a language other than English,\nexport the `VAPI_LANGUAGE` environment variable with the desired language. The contents of\nthe `VAPI_LANGUAGE` environment variable are placed in the HTTP `Accept-Language` header\nand only processed by the HTTP service on the server. So, any valid syntax for `Accept-Language`\ncan be set.\n\nFor example, to get API messages in French do:\n```\nexport VAPI_LANGUAGE=fr\n```\n\nAt this time, messages generated directly by the vision tools (e.g. usage messages) are\nnot translated at this time.\n\n## Attributions\nIn addition to the required external Python Packages, this toolset embeds the following:\n\n#### docopt\nThis module is cloned from https://github.com/bazaar-projects/docopt-ng.git. It is a command\nargument parser that takes a usage statement as the parsing definition. It is embedded to\nease install of the toolset and to cleanup some error messages to be more user friendly.\n\n#### bats -- Bash Automated Testing System\nBATS is used to drive the automated testing to the CLI. It is included in the `test`\ndirectory as a zip file containing the 3 repos...\n * https://github.com/sstephenson/bats test/libs/bats<br>\n   The core BATS driver.\n * https://github.com/ztombol/bats-assert test/libs/bats-assert<br>\n   Very nice assertion functions to ease checking and make it more readable\n * https://github.com/ztombol/bats-support test/libs/bats-support<br>\n   Support services for the `bats-assert` repo.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ibm/vision-tools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Vision-Tools",
    "package_url": "https://pypi.org/project/Vision-Tools/",
    "platform": "",
    "project_url": "https://pypi.org/project/Vision-Tools/",
    "project_urls": {
      "Homepage": "https://github.com/ibm/vision-tools"
    },
    "release_url": "https://pypi.org/project/Vision-Tools/0.2.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Tools to interface with an IBM Visual Inspection server's ReST API.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9358933,
  "releases": {
    "0.1.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be0dd0567d7375425bd5b61a890a3f9eb70a612ac701676b8a199c014f4ec711",
          "md5": "d44869f0bd9c5071d6e8d3727a361f01",
          "sha256": "f2001fa47c49c6f12be2ca3517faabf8336435a3eac38a0fade20c7ccff8070b"
        },
        "downloads": -1,
        "filename": "Vision_Tools-0.1.0.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d44869f0bd9c5071d6e8d3727a361f01",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 84342,
        "upload_time": "2020-05-20T20:20:38",
        "upload_time_iso_8601": "2020-05-20T20:20:38.457202Z",
        "url": "https://files.pythonhosted.org/packages/be/0d/d0567d7375425bd5b61a890a3f9eb70a612ac701676b8a199c014f4ec711/Vision_Tools-0.1.0.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08c9fd50d28ca4ff60af76e656b0e224d87b70209e5f4c788fc5181355e7e1b8",
          "md5": "f429dbc96cdb66e15fd341afb692546e",
          "sha256": "9012b8eef43c030c03fe83e86fa8180e0a7c55ad0a0358fa403bbdd2113a208a"
        },
        "downloads": -1,
        "filename": "Vision_Tools-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f429dbc96cdb66e15fd341afb692546e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 89092,
        "upload_time": "2021-02-09T02:10:02",
        "upload_time_iso_8601": "2021-02-09T02:10:02.485901Z",
        "url": "https://files.pythonhosted.org/packages/08/c9/fd50d28ca4ff60af76e656b0e224d87b70209e5f4c788fc5181355e7e1b8/Vision_Tools-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08c9fd50d28ca4ff60af76e656b0e224d87b70209e5f4c788fc5181355e7e1b8",
        "md5": "f429dbc96cdb66e15fd341afb692546e",
        "sha256": "9012b8eef43c030c03fe83e86fa8180e0a7c55ad0a0358fa403bbdd2113a208a"
      },
      "downloads": -1,
      "filename": "Vision_Tools-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f429dbc96cdb66e15fd341afb692546e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 89092,
      "upload_time": "2021-02-09T02:10:02",
      "upload_time_iso_8601": "2021-02-09T02:10:02.485901Z",
      "url": "https://files.pythonhosted.org/packages/08/c9/fd50d28ca4ff60af76e656b0e224d87b70209e5f4c788fc5181355e7e1b8/Vision_Tools-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}