{
  "info": {
    "author": "Joachim Jablon",
    "author_email": "ewjoachim@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pytest-call-checker\n\n[![Deployed to PyPI](https://img.shields.io/pypi/pyversions/pytest-call-checker?logo=pypi&logoColor=white)](https://pypi.org/pypi/pytest-call-checker)\n[![GitHub Repository](https://img.shields.io/github/stars/ewjoachim/pytest-call-checker?logo=github)](https://github.com/ewjoachim/pytest-call-checker/)\n[![Continuous Integration](https://img.shields.io/github/workflow/status/ewjoachim/pytest-call-checker/CI?logo=github)](https://github.com/ewjoachim/pytest-call-checker/actions?workflow=CI)\n[![Coverage](https://raw.githubusercontent.com/ewjoachim/pytest-call-checker/python-coverage-comment-action-data/badge.svg)](https://github.com/ewjoachim/pytest-call-checker/tree/python-coverage-comment-action-data)\n[![MIT License](https://img.shields.io/github/license/ewjoachim/pytest-call-checker?logo=open-source-initiative&logoColor=white)](https://github.com/ewjoachim/pytest-call-checker/blob/main/LICENSE.md)\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/ewjoachim/pytest-call-checker/blob/main/LICENSE/CODE_OF_CONDUCT.md)\n\n\n`pytest-call-checker` is a pytest plugin providing a `checker` fixture\nthat allows creating test doubles with interesting properties.\n\n## Stating the problem\n\nImagine you're writing a library that makes HTTP calls to an API. If you follow\nusual practices of separating I/O from logic, chances are you will use some\nform of dependency injection: the functions you will write will receive a HTTP\nclient object and will route HTTP calls to this object. The idea being that in\nreal context, they will receive a real HTTP client, and in test code, they will\nreceive a fake client that will not actually perform HTTP calls.\n\nThis fake client is a test double. What you'll usually want to check is that:\n\n- The function made exactly as many calls as expected;\n- The arguments of each call are correct.\n\nAdditionally, you want to be able to control the output of each call given the\ninput and/or the order of the call.\n\nThe usual way to do this is with mocks or specialized libs such as\n[requests-mock](https://requests-mock.readthedocs.io/en/latest/),\n[responses](https://github.com/getsentry/responses), etc.\n\nThis library provides another way, that can also work in other contexts: for\nexample, maybe you call subprocesses and you would like to not call them\nin your unit tests.\n\n## The idea\n\nThis library provides a low-level fixture named `checker` that you can use\nas a foundation for your own specialized fixtures.\n\nWhen defining your `checker` fixture, you will tell it what the calls you're\nexpecting look like, and how to create appropriate responses.\n\nIn your tests, you'll register one or more expected calls using\n`checker.register`, each with the corresponding response.\n\nWhen you call the function under test, you'll pass it the `checker` instance.\nEach time the instance is called, we'll check that the call arguments match one\nof the expected calls you registered, and answer with the corresponding response.\n\nAt the end of the test, if all the expected calls were not received, we will\nensure the test fails.\n\nYou'll find concrete examples below.\n\n## Code\n\n### Installation\n\n```console\n$ pip install pytest-call-checker\n```\n\n### Simple usage: Http client\n\nIn this example, we create a test double for `httpx.Client`.\nIn the test, we register a call to the `get` method of the\nclient.\nWe then run our function. We can be sure that:\n- Our function called the get method\n- With the right arguments\n- And nothing else on the client\n- And when it called the method, it received a fake response that looked like\n  what we wanted.\n\n```python\nimport httpx\nimport pytest\n\ndef get_example_text(client: httpx.Client):\n    return client.get(\"https://example.com\").text\n\n@pytest.fixture\ndef http_client(checker):\n    class FakeHttpClient(checker.Checker):\n\n    return checker(checker.Checker(\n        call=httpx.Client.request,\n        response=httpx.Response\n    ))\n\ndef test_get_example_text(http_client):\n    http_client.register.get(\"https://example.com\")(text=\"foo\")\n\n    assert get_example_text(client=http_client) == \"foo\"\n\n```\n\n### More advanced usage: Subprocess\n\n\nIn this example, we create a test double not for an object but for a callable\n(`subprocess.run`). This usage is slightly more advanced because in order to\ninstantiate our response object, `subprocess.CompletedProcess` object, we need\nto know the command `args` that were passed to the `subprocess.run` call. This\ncould be slightly annoying if we needed to repeat the `args` both in the call\nand the `response` so we'll introduce a technique here that will let us keep\nour tests as simple as possible.\n\n\n```python\n\ndef get_date(run: Callable):\n    return run([\"date\"]).stdout\n\n\n@pytest.fixture\ndef subprocess_run(checker):\n    class SubprocessRun(checker.Checker):\n        call = subprocess.run\n\n        def response(self, returncode, stdout=None, stderr=None):\n            # When the response is implemented as a method of a `checker.Checker`\n            # subclass, you can access `self.match`. This lets you construct\n            # the output object using elements from the input kwargs, see\n            # the `args` argument below.\n            return subprocess.CompletedProcess(\n                args=self.match.match_kwargs[\"popenargs\"],\n                returncode=returncode,\n                stdout=stdout,\n                stderr=stderr,\n            )\n\n    return checker(SubprocessRun())\n\n\ndef test_get_date(subprocess_run):\n    subprocess_run.register([\"date\"])(returncode=0, stdout=\"2022-01-01\")\n\n    assert get_date(run=subprocess_run) == \"2022-01-01\"\n\n```\n\nAs you can see, in the code above, there are two ways to create you\n`checker.Checker` instance:\n\n- You can create an instance directly\n- Or subclass `checker.Checker`. In this case, instead of passing `call` and\n  `response` in the constructor, you can also define them as methods.\n\nIn case you go the subclass route, this lets you access additional elements\nthrough `self` if you need it. This is an advanced usage, we'll do our best to\navoid breaking this, but it touches the inner workings of our objects so if you\nreally do complicated things, it might break.\n\nThe most useful attributes of `checker.Checker` that you can access in\n`def reponse(self, ...)` should be:\n\n- `self.match`: The `Match` object that was associated with the response we're\n  building.\n- `self.request_kwargs`: The keyword arguments with which the test double\n  was called\n\n### Other interesting features\n\n#### Matching with functions\n\nSometimes, you can't perform an exact match on the input parameters, but you\nstill want to check some properties in order to perform the match.\n\nIn this case, use a callable instead of the value for the argument you want\nto check.\n\n```python\n\nimport uuid\n\ndef create_object(client: ApiClient) -> ApiResponse:\n    # Create object with a random ID\n    return client.create(id=uuid.uuid4())\n\n\n@pytest.fixture\ndef api_client(checker):\n    class FakeAPIClient(checker.Checker):\n\n    return checker(checker.Checker(\n        call=ApiClient,\n        response=ApiResponse\n    ))\n\n\ndef test_get_date(api_client):\n    def is_uuid(value):\n        return isinstance(value, uuid.UUID)\n\n    api_client.register(id=is_uuid)()\n\n    assert create_object(client=api_client) == ApiResponse()\n\n```\n\n\n#### Allowing calls in different order\n\nBy default, it's expected that the calls will be done in the same order as\nthey were registered. You can actually change that by passing `ordered=False`\nwhen creating the fixture.\n\n```python\n\nimport uuid\n\ndef fetch_objects(client: ApiClient, ids: set[int]) -> set[ApiResponse]:\n    # Because it's in a set, we can't be sure of the call order\n    return {\n        client.get(id=id)\n        for id in ids\n    }\n\n\n@pytest.fixture\ndef api_client(checker):\n    class FakeAPIClient(checker.Checker):\n\n    return checker(checker.Checker(\n        call=ApiClient,\n        response=ApiResponse,\n        ordered=False,\n    ))\n\n\ndef test_get_date(api_client):\n\n    api_client.register(id=1)(id=1)\n    api_client.register(id=2)(id=2)\n\n    responses = fetch_objects(client=api_client, ids={1, 2})\n    assert responses == {ApiResponse(id=1), ApiResponse(id=2)}\n\n```\n\n## Caveats\n\nSome things are not ideal, and could be improved:\n\n- There is no way to mark one call as optional. It's assumed that if the\n  tests are reproducible, then we should always know whether they'll do\n  calls or not.\n- It's probably not possible yet to create test doubles for modules. The usual\n  way of doing dependency injection is through functions or class instances.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ewjoachim/pytest-call-checker",
    "keywords": "pytest",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-call-checker",
    "package_url": "https://pypi.org/project/pytest-call-checker/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-call-checker/",
    "project_urls": {
      "Homepage": "https://github.com/ewjoachim/pytest-call-checker",
      "Repository": "https://github.com/ewjoachim/pytest-call-checker"
    },
    "release_url": "https://pypi.org/project/pytest-call-checker/1.0.6/",
    "requires_dist": [
      "pytest (>=7.1.3,<8.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Small pytest utility to easily create test doubles",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15429692,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59ac952e1d37aaf599fe6676976e424365d3273db062640cd78cb659435781ed",
          "md5": "f18baf8da81d077db7d9c986f40061cf",
          "sha256": "fc0df56200f67ed299ef84bdd69ccab43366431348800b87495832d4b0615b80"
        },
        "downloads": -1,
        "filename": "pytest_call_checker-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f18baf8da81d077db7d9c986f40061cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 6470,
        "upload_time": "2022-10-15T17:33:41",
        "upload_time_iso_8601": "2022-10-15T17:33:41.285277Z",
        "url": "https://files.pythonhosted.org/packages/59/ac/952e1d37aaf599fe6676976e424365d3273db062640cd78cb659435781ed/pytest_call_checker-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6307353ea826bb423ff3e85eaf48b225ee7a849f71229ebacfd98140ab76beda",
          "md5": "c763f64d74f42c9130119d7f8fcd2934",
          "sha256": "99518f36e5ebd4f7314ec03357cb2ab66f64dcb488fed39917960b254d0656c0"
        },
        "downloads": -1,
        "filename": "pytest_call_checker-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c763f64d74f42c9130119d7f8fcd2934",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 7277,
        "upload_time": "2022-10-15T17:33:43",
        "upload_time_iso_8601": "2022-10-15T17:33:43.243974Z",
        "url": "https://files.pythonhosted.org/packages/63/07/353ea826bb423ff3e85eaf48b225ee7a849f71229ebacfd98140ab76beda/pytest_call_checker-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dc6aa51c7c5b5f755836ff34d591e1b5590f19de120b855063e1139d98736e3",
          "md5": "6a713a0b7d48a6c6d871373a59130f68",
          "sha256": "a3883b1f83cf86ebcfcbae445178e2b8915f165bb0eaba5026a4748623df4517"
        },
        "downloads": -1,
        "filename": "pytest_call_checker-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a713a0b7d48a6c6d871373a59130f68",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7604,
        "upload_time": "2022-10-15T17:46:00",
        "upload_time_iso_8601": "2022-10-15T17:46:00.792989Z",
        "url": "https://files.pythonhosted.org/packages/6d/c6/aa51c7c5b5f755836ff34d591e1b5590f19de120b855063e1139d98736e3/pytest_call_checker-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "996425d6df98323542807a5c4359632a98324b541f920084db5d8cdfe636319c",
          "md5": "2e2ff27d08126a6558458546af7c3233",
          "sha256": "9abf6849daf563c0078acb90bd95de298e32778095b473a88f491381782f4edc"
        },
        "downloads": -1,
        "filename": "pytest_call_checker-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2e2ff27d08126a6558458546af7c3233",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8880,
        "upload_time": "2022-10-15T17:46:02",
        "upload_time_iso_8601": "2022-10-15T17:46:02.509203Z",
        "url": "https://files.pythonhosted.org/packages/99/64/25d6df98323542807a5c4359632a98324b541f920084db5d8cdfe636319c/pytest_call_checker-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "519271c30f2908fa9eccf0bb51dd86b4f2edf5f95ff9a10a6e745efb60d6ae04",
          "md5": "00f853c1826fd480b8ae33a5d2353bd7",
          "sha256": "1d0231b59617c7993f6fbb485206f98912c69e888fb77ac727330597146d9cc9"
        },
        "downloads": -1,
        "filename": "pytest_call_checker-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00f853c1826fd480b8ae33a5d2353bd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7606,
        "upload_time": "2022-10-16T08:02:02",
        "upload_time_iso_8601": "2022-10-16T08:02:02.395117Z",
        "url": "https://files.pythonhosted.org/packages/51/92/71c30f2908fa9eccf0bb51dd86b4f2edf5f95ff9a10a6e745efb60d6ae04/pytest_call_checker-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dc318be08c9a068b8d9ea1cd46ab381a222c90bc8c48c57359fc1d1bd8ae02b",
          "md5": "4114c0b5c04468bebb7a33f39992c92a",
          "sha256": "e88f290361e982dfc79e35fc56d35d3d6ddeb3b2d5835236cb66a3cb4f68a6bd"
        },
        "downloads": -1,
        "filename": "pytest_call_checker-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4114c0b5c04468bebb7a33f39992c92a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8855,
        "upload_time": "2022-10-16T08:02:03",
        "upload_time_iso_8601": "2022-10-16T08:02:03.816390Z",
        "url": "https://files.pythonhosted.org/packages/0d/c3/18be08c9a068b8d9ea1cd46ab381a222c90bc8c48c57359fc1d1bd8ae02b/pytest_call_checker-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36d9acc0573fe4451f2609d5ea1a977abb8b09a6c9e10ce522f2a54be97fb01e",
          "md5": "cc7e6ff7afb17b822a32fd6103030d38",
          "sha256": "195fcee0bdeccf70362293a3f614cf9b39eeb1c23d681c57414a93c4ababf665"
        },
        "downloads": -1,
        "filename": "pytest_call_checker-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc7e6ff7afb17b822a32fd6103030d38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7611,
        "upload_time": "2022-10-16T09:14:08",
        "upload_time_iso_8601": "2022-10-16T09:14:08.292458Z",
        "url": "https://files.pythonhosted.org/packages/36/d9/acc0573fe4451f2609d5ea1a977abb8b09a6c9e10ce522f2a54be97fb01e/pytest_call_checker-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22f12cb5a5a1bcfea121b4793f87a3c3d48e3fc230640dfd774395c97f76d494",
          "md5": "cb6fe23cd6aa6fd07c0c7c4689270354",
          "sha256": "25fd858081ae9a9450cdbca18de37bf1dbf24c9a3cef91a8b3058912fdbab59a"
        },
        "downloads": -1,
        "filename": "pytest_call_checker-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cb6fe23cd6aa6fd07c0c7c4689270354",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8866,
        "upload_time": "2022-10-16T09:14:09",
        "upload_time_iso_8601": "2022-10-16T09:14:09.728530Z",
        "url": "https://files.pythonhosted.org/packages/22/f1/2cb5a5a1bcfea121b4793f87a3c3d48e3fc230640dfd774395c97f76d494/pytest_call_checker-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "731706eb427b955e37154db8c45a2b8eecfb6c483454c468eb21b2727e523496",
          "md5": "096b6b6218d1a2cc1c200c1d86555755",
          "sha256": "8f97575726174202f86bab3c6020945fcce9e90dfd4cd1862e9ca11b2bd293ab"
        },
        "downloads": -1,
        "filename": "pytest_call_checker-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "096b6b6218d1a2cc1c200c1d86555755",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7587,
        "upload_time": "2022-10-16T21:10:27",
        "upload_time_iso_8601": "2022-10-16T21:10:27.612173Z",
        "url": "https://files.pythonhosted.org/packages/73/17/06eb427b955e37154db8c45a2b8eecfb6c483454c468eb21b2727e523496/pytest_call_checker-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecd219534dca043c469339f4a1f6711b512847351791ed684c8a637a01a07a3c",
          "md5": "470235de7c21ccb265bb498eb33b3c34",
          "sha256": "db5ab8b4ca421f34249b25b23be477fe91bbd4c8f7baf303286f031ea35d5245"
        },
        "downloads": -1,
        "filename": "pytest_call_checker-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "470235de7c21ccb265bb498eb33b3c34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8833,
        "upload_time": "2022-10-16T21:10:28",
        "upload_time_iso_8601": "2022-10-16T21:10:28.772550Z",
        "url": "https://files.pythonhosted.org/packages/ec/d2/19534dca043c469339f4a1f6711b512847351791ed684c8a637a01a07a3c/pytest_call_checker-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "731706eb427b955e37154db8c45a2b8eecfb6c483454c468eb21b2727e523496",
        "md5": "096b6b6218d1a2cc1c200c1d86555755",
        "sha256": "8f97575726174202f86bab3c6020945fcce9e90dfd4cd1862e9ca11b2bd293ab"
      },
      "downloads": -1,
      "filename": "pytest_call_checker-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "096b6b6218d1a2cc1c200c1d86555755",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 7587,
      "upload_time": "2022-10-16T21:10:27",
      "upload_time_iso_8601": "2022-10-16T21:10:27.612173Z",
      "url": "https://files.pythonhosted.org/packages/73/17/06eb427b955e37154db8c45a2b8eecfb6c483454c468eb21b2727e523496/pytest_call_checker-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecd219534dca043c469339f4a1f6711b512847351791ed684c8a637a01a07a3c",
        "md5": "470235de7c21ccb265bb498eb33b3c34",
        "sha256": "db5ab8b4ca421f34249b25b23be477fe91bbd4c8f7baf303286f031ea35d5245"
      },
      "downloads": -1,
      "filename": "pytest_call_checker-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "470235de7c21ccb265bb498eb33b3c34",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 8833,
      "upload_time": "2022-10-16T21:10:28",
      "upload_time_iso_8601": "2022-10-16T21:10:28.772550Z",
      "url": "https://files.pythonhosted.org/packages/ec/d2/19534dca043c469339f4a1f6711b512847351791ed684c8a637a01a07a3c/pytest_call_checker-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}