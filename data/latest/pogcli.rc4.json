{
  "info": {
    "author": "Stephen Zimmerman",
    "author_email": "sz@galacticicecube.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "[![Build Status](https://travis-ci.org/sz3/pog.svg?branch=master)](https://travis-ci.org/sz3/pog)\n[![Coverage Status](https://coveralls.io/repos/github/sz3/pog/badge.svg?branch=master)](https://coveralls.io/github/sz3/pog?branch=master)\n[![PyPI Version](https://img.shields.io/pypi/v/pogcli.svg)](https://pypi.python.org/pypi/pogcli)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pogcli.svg)](https://pypi.python.org/pypi/pogcli)\n\n## Pretty Ok Gncryption\n\n* File encryption and backups!\n* Uses `nacl.SecretBox` and `zstandard`!\n* Chunks up large files!\n* Can be used to generate encrypted archives locally, or as a backup tool that pushes to cloud storage providers. (`s3`, `b2`, ...tbd)\n* There is a GUI: [pogui](https://github.com/sz3/pogui).\n\nThis tool is built around symmetric encryption -- specifically libsodium's `crypto_secretbox`, which is `XSalsa20+Poly1305`. Doing asymmetric PGP-like things is not in the cards -- but there is an experimental use case using asymmetric crypto that will likely be supported.\n\n* Still in beta!\n* Don't rely on this to keep your government leaks secret!\n\n## Installation\n\nUse `pip`:\n```\npip install pogcli\n```\n\nor from source,\n```\npython setup.py build\npython setup.py install\n```\n\n## Usage\n\n### Credentials\n* Pog does not manage cloud storage credentials -- it asks that you configure your environment with API keys before use.\n\t* To validate s3 credentials:\n\t\t* `awscli ls <bucket_name>`\n\t* To validate b2 credentials:\n\t\t* `b2 ls <bucket_name>`\n\n### Using a password or keyfiles\n1. symmetric keyfile\n\t* any file can be used as a keyfile.\n\t* the contents of the keyfile will be hashed, and that hash will become the cryptographic key\n\t* cryptographic randomness (ex: 1024 bytes from /dev/urandom) is recommended\n2. asymmetric keyfiles\n\t* the `pog-create-keypair` script will generate an \"encrypt\" and \"decrypt\" keypair.\n\t* encrypt is used for creating archives\n\t* decrypt is used for extracting them\n3. Password entry\n\t* if no keyfiles are specified, Pog supports password entry for creating or reading archives\n\n### Creating cloud archives and backups\n\n* Consider an S3 backup:\n\n```\npog /home/user/my_file.txt --keyfile=/home/user/secret.keyfile --save-to=s3://my-bucket --store-absolute-paths\n```\n\nThis does a few things:\n1. `my_file.txt` is encrypted with `secret.keyfile`. If the file is sufficiently large, it is split into multiple pieces during encryption.\n2. The encrypted contents (\"blob\") of `my_file.txt` is saved to the s3 bucket `my-bucket`, under the top-level `data/` subdirectory.\n3. An encrypted \"manifest\" file is created, named according to the time the archive was created. This manifest file acts as an index from filenames (`/home/user/my_file`) to one or more encrypted blobs.\n   a. The `--store-absolute-paths` flag tells the manifest to resolve ambiguous paths with the absolute path (`/home/user/my_file`) instead of the relative path (`my_file`). This can be useful to have when extracting archives or backups.\n4. The manifest file is also saved to `my-bucket` in s3.\n\n----\n\n* Here is another example, with a series of directories:\n\n```\npog /opt/games /opt/apps /opt/music --encryption-keyfile=secret.encrypt --save-to=s3://my-bucket,b2://my-b2-bucket\n```\n\n* This will recursively go through those 3 directories, gathering up all files and saving the encrypted blobs to both s3 and b2.\n\nThe command line help (`pog -h`) shows other useful examples.\n\n### Creating local archives\n\n* It is also possible to use Pog to encrypt a single file.\n\n```\npog /home/myfile.original > outputs.txt\n```\n\n* and to decrypt:\n\n```\npog --decrypt $(cat outputs.txt) > myfile.copy\n```\n\n### Reading archives and backups\n\nFor a given manifest file (`2020-01-23T12:34:56.012345.mfn`), we can download and extract the archive like so:\n\n```\npog --decrypt s3:/my-bucket/2020-01-23T12:34:56.012345.mfn --keyfile=/home/user/secret.keyfile\n```\n\n* The `--decrypt` flag should be specified for read+decrypt -- the default behavior is to write+encrypt.\n* If a `--decryption-keyfile` is provided, `--decrypt` is assumed.\n* If a local manifest file is provided, it is assumed that the data blobs are already downloaded into the working directory.\n\n## Algorithm\n\n* files are compressed with `zstandard`, and split (\"chunked\") into blobs. The default chunk size is 50MB.\n\n* blob contents are encrypted with `crypto_secretbox`. The key is 256 bits, independent *per-blob*, and stored in the blob header.\n\n* the blob header is encrypted in one of 3 ways:\n\t* `crypto_secretbox` with key=sha256(argon2.ID with `time_cost=8, memory_cost=102400, parallelism=8, hash_len=32`)\n\t\t* this is what is used when you get a password prompt\n\t* `crypto_secretbox` with key=sha256(keyfile contents)\n\t\t* this is what the `--keyfile` option does\n\t* `crypto_sealedbox` with an X25519 key pair\n\t\t* this is what `--decryption-keyfile` and `--encryption-keyfile` do\n\t\t* an X25519 key pair can be generated with `pog-create-keypair`.\n\n* the file->blob relationship is stored in an encrypted manifest file (`.mfn`), which also stores file metadata -- e.g. last modified time.\n\t* the `.mfn` can be thought of as the dictionary for the archive.\n\t* blobs *can* be decrypted without the manifest, *IF* the blob order is correct. However, only the file contents are stored in the blobs. The original file name and file metadata will not survive the trip.\n\n* blobs are named by urlsafe base64(sha256(sha256(secret) + sha256(content)). The \"secret\" is derived from the encryption key.\n\t* the goal is to pseudo-randomize the names of the blobs, while still keeping them consistent for backups run with the same key.\n\t* we want to \"leak\" the content hash only to the extent it's necessary to save work on successive backups (e.g. \"I don't need to reupload blob X, it already exists\")\n\t* because we use the content hash for this purpose, we can achieve some amount of file de-duplication.\n\n## Disclaimer\n\nI'm a not a cryptographer, just an engineer with internet access.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sz3/pog",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pogcli",
    "package_url": "https://pypi.org/project/pogcli/",
    "platform": "",
    "project_url": "https://pypi.org/project/pogcli/",
    "project_urls": {
      "Homepage": "https://github.com/sz3/pog"
    },
    "release_url": "https://pypi.org/project/pogcli/0.1.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "File encryption and backup utility",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8002316,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "411e1aed8bdb1aa4a596b4617f4330cc0e8facfcc1e40425cdfbfd5708a87ad5",
          "md5": "4cf5b3d77c66dd2ac15250d00a953ef5",
          "sha256": "42764f9f5bd79bd3d25cc2f8071354d61f3bd6070a8231e11321a1ddc1666eb4"
        },
        "downloads": -1,
        "filename": "pogcli-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4cf5b3d77c66dd2ac15250d00a953ef5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12278,
        "upload_time": "2020-02-11T04:33:16",
        "upload_time_iso_8601": "2020-02-11T04:33:16.044309Z",
        "url": "https://files.pythonhosted.org/packages/41/1e/1aed8bdb1aa4a596b4617f4330cc0e8facfcc1e40425cdfbfd5708a87ad5/pogcli-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdae3dd901f4000d9109b9cd1e8b7d43c3fa9ba16bc59c44139fdd9a3a018831",
          "md5": "4c6d90cde538a036202936f47e7ba419",
          "sha256": "1dbe9cb7ab9604686f636ccdaef130fd0fc377c81f96232e27ba014cbeab0314"
        },
        "downloads": -1,
        "filename": "pogcli-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4c6d90cde538a036202936f47e7ba419",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13083,
        "upload_time": "2020-02-18T05:32:00",
        "upload_time_iso_8601": "2020-02-18T05:32:00.851391Z",
        "url": "https://files.pythonhosted.org/packages/fd/ae/3dd901f4000d9109b9cd1e8b7d43c3fa9ba16bc59c44139fdd9a3a018831/pogcli-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6d8fb4c9cb09a35ff392570ea32c8581e1e658d38fe3d320531d8787da13981",
          "md5": "c0c97ba60f39d7c64d87497b9848c96f",
          "sha256": "a268655ad60f0fe780ce80c41d2adb17a5f6481685c4ab1fcf90554b8bc9a3ed"
        },
        "downloads": -1,
        "filename": "pogcli-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c0c97ba60f39d7c64d87497b9848c96f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14812,
        "upload_time": "2020-02-22T05:13:47",
        "upload_time_iso_8601": "2020-02-22T05:13:47.242045Z",
        "url": "https://files.pythonhosted.org/packages/e6/d8/fb4c9cb09a35ff392570ea32c8581e1e658d38fe3d320531d8787da13981/pogcli-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52f15dbee7b83a8844644b96116d14ef162805fd3107b03f59f83e0a66f90509",
          "md5": "876737617c92f4b6574046361aeb9ab8",
          "sha256": "4f49064018b10772abf80f2ee5ec36b7b215bce7a16a47a38b5df45d8122e971"
        },
        "downloads": -1,
        "filename": "pogcli-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "876737617c92f4b6574046361aeb9ab8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17699,
        "upload_time": "2020-08-20T08:00:36",
        "upload_time_iso_8601": "2020-08-20T08:00:36.819844Z",
        "url": "https://files.pythonhosted.org/packages/52/f1/5dbee7b83a8844644b96116d14ef162805fd3107b03f59f83e0a66f90509/pogcli-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52f15dbee7b83a8844644b96116d14ef162805fd3107b03f59f83e0a66f90509",
        "md5": "876737617c92f4b6574046361aeb9ab8",
        "sha256": "4f49064018b10772abf80f2ee5ec36b7b215bce7a16a47a38b5df45d8122e971"
      },
      "downloads": -1,
      "filename": "pogcli-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "876737617c92f4b6574046361aeb9ab8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17699,
      "upload_time": "2020-08-20T08:00:36",
      "upload_time_iso_8601": "2020-08-20T08:00:36.819844Z",
      "url": "https://files.pythonhosted.org/packages/52/f1/5dbee7b83a8844644b96116d14ef162805fd3107b03f59f83e0a66f90509/pogcli-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}