{
  "info": {
    "author": "Fatih Mete",
    "author_email": "fatihmete@live.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n![st](https://github.com/fatihmete/spreadsheet-tools/blob/master/st/icons/sih.png)\n\n# Spreadsheet Tools\nThis application allows you \n- open, view and edit small to large (more than 1,048,576 rows) Excel and CSV files,\n- merge Excel/CSV file into single file,\n- split Excel/CSV file into equal parts,\n- to create a single data set from multiple excel files in the same template,\n- to create multiple excel files in the same template from a single data set\n- run any python code in Python shell.\n\n# Contents\n- [Installation](https://github.com/fatihmete/spreadsheet-tools#installation)\n- [Usage](https://github.com/fatihmete/spreadsheet-tools#usage)\n\t- [Excel/CSV Viewer](https://github.com/fatihmete/spreadsheet-tools#excelcsv-viewer)\n\t- [Merge Excel/CSV](https://github.com/fatihmete/spreadsheet-tools#merge-excelcsv)\n\t- [Split Excel/CSV](https://github.com/fatihmete/spreadsheet-tools#split-excelcsv)\n\t- [Multiple Excel Reader](https://github.com/fatihmete/spreadsheet-tools#multiple-excel-reader)\n\t- [Multiple Excel Writer](https://github.com/fatihmete/spreadsheet-tools#multiple-excel-writer)\n\t- [Python Shell](https://github.com/fatihmete/spreadsheet-tools#python-shell)\n- [Example usage](https://github.com/fatihmete/spreadsheet-tools#example-usage)\n- [Open Source Licenses](https://github.com/fatihmete/spreadsheet-tools#open-source-licenses)\n- [TODO](https://github.com/fatihmete/spreadsheet-tools#todo)\n\n\n# Installation\n## Python package\n\nInstall package with pip:\n\n`pip install spreadsheet-tools`\n\nin shell run command:\n\n`spreadsheet-tools`\n\n## Windows Users Download Packages\n[Click here](https://github.com/fatihmete/spreadsheet-tools/releases) to download packages.\n\n## Run from code\nClone the repository:\n\n`git clone https://github.com/fatihmete/spreadsheet-tools`\n\nChange directory:\n\n`cd spreadsheet-tools`\n\nBefore running you have to install required packages:\n\n`pip install requirements.txt`\n\nFinally run:\n\n`python st.py`\n\n# Usage\n## Excel/CSV Viewer\n\n![viewer](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/viewer.png)\n\nYou can view and edit Excel/CSV file with this screen. To select Excel/CSV file please click \"...\" button at top right. If you open CSV file, It asks CSV seperator of file from you. You can navigate in data with **Next**, **Prev**, **First** and **Last** button at bottom. Also you can change count of rows will be shown on screen with change values of **Show rows**.\nThis screen allow you filter loaded file with pandas query, drop selected cols and rows, run python code (pandas functions), save result data.\n\n### Query\nYou can write pandas query to filter data. To apply filter press Enter key. It uses python as engine. Below are examples that you can use in the [titanic dataset](https://www.openml.org/d/40945).\n\nFilter only who survived data:\n\n`survived == 1`\n\nFilter who is survived and female data:\n\n`survived == 1 and sex==\"female\"`\n\nFilter who is survived, female and name contains \"Becker\" or \"Wells\":\n\n`survived == 1 and sex==\"female\" and (name.str.contains(\"Becker\") or name.str.contains(\"Wells\"))`\n\nFilter who is survived, female, name contains \"Becker\" or \"Wells\" and pclass + sibsp greater than 2:\n\n`survived == 1 and sex==\"female\" and (name.str.contains(\"Becker\") or name.str.contains(\"Wells\")) and pclass + sibsp > 2`\n\nYou can use any pandas function (e.g. .isna(), isnull()) that is supported in pandas query.\n\n### Drop Cols/Rows\n\nTo drop columns/rows firstly select columns/rows will be removed then press Drop Cols/Rows button at top right. This operations can't be undo so be careful. But It's not affect original data.\n\n### Run Python Code\n\nYou can edit your data with python code. For example you can create new columns with functions (like abs(), min(), max()), fill Nan values (fillna()), split columns with seperator.\nYour limit is your pandas/python knowledge. You can reach your data with predefined **df** variable (Pandas DataFrame) and pandas with predefined **pd** variable.\n\nBelow are examples that you can use in the titanic dataset.\n\nTo create new column that sum of pclass and survived:\n\n`df[\"sum\"] = df[\"pclass\"] + df[\"survived\"]`\n\nCreate last name and first name column using str.split function:\n\n`df[[\"last_name\",\"first_name\"]] = df[\"name\"].str.split(\",\", expand=True)`\n\n`fare` column in the Titanic dataset contains \"?\" for nan values and column type is Object. To fix this:\n\n`df[\"fare\"] = pd.to_numeric(df[\"fare\"], errors=\"coerce\")`\n\nOr you can set new value for \"?\" values in `home.dest` column:\n\n`df[\"home.dest\"] = df[\"home.dest\"].str.replace(\"?\",\"Anywhere\")`\n\nNote: You can't directly edit **df** variable.\n\n### Saving Data\n\nTo save the filtered and edited data, please click the **Save Data** button at the bottom left.\n\n## Merge Excel/CSV\n\nYou can merge more than one Excel/CSV files in single data file. All files will be append one after the other. You can select which files will be read in input files path. It is possible to set *.xlsx, *.csv or mix type. Also you can set csv seperator for input files.\n\n![merger](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/merger.png)\n\n## Split Excel/CSV\n\nYou can split a Excel/CSV file into parts containing the number of lines you want.\n\n![merger](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/splitter.png)\n\nYou can select file that will be splitted with **...** button. After you have to select **Output Files Path** where you new files will be save.\nYou can change format of new files either *.xlsx or *.csv . Row number default set 1000, you can change it. Also you can set input file and out files csv seperator.\n\n## Multiple Excel Reader\n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/reader.png)\n\nYou can create a single data set from multiple excel files in the same template with this screen.\n\n### Adding Sheets\nFirst you have to add sheets in your excel file. \n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/add_new_sheet.png)\n\nPlease write sheet name (be sure it's correct!) then press **Add New Sheet** button. If you want to delete sheet, select related sheet after press **Delete Selected Sheet** button.\n\n### Adding Rules\nTo add new rule please press **Add New Rule** button then select sheet name, set cell and column name.\n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/add_new_rule.png)\n\nWhile reading excel files merw uses this rules. For example, supposing our first rule is \"Sheet1\", \"B1\" and \"NAME\", merw will open Sheet1 of excel file and get \"B1\" cell value. After write this value on \"NAME\" column of output file. There isn't rule limit. If you want to delete rule, select related rule after press **Delete Selected Rule** button.\n\n### Setting Input Files Path and Output File\n\n**Input Files Path** is where your excel files at located. **Output File** can be xlsx or csv format, it is single dataset will be created from excel files at  **Input Files Path**.\n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/run.png)\n\nTo set **Input Files Path** and **Output File**, please press **...** button where right of them.\n\nFinally press **Run Rules** button, it creates single dataset (**Output File**). If file format of your ouput file is *.csv, application asks you csv seperator. You can set any value as seperator.\n\n### Saving and Loading Rules\n\nIf you want to use rules later, you can save rules with **Save Reading Rules** button. To load rules that priorly you saved, press **Load Reading Rules** button and select rules file.\n\n## Multiple Excel Writer\n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/writer.png)\n\nYou can create multiple excel files in the same template from a single data set.\n\n### Adding Sheets\nFirst you have to add sheets in your excel file. \n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/add_new_sheet.png)\n\nPlease write sheet name (be sure it's correct!) then press **Add New Sheet** button. If you want to delete sheet, select related sheet after press **Delete Selected Sheet** button.\n\n### Adding Rules\nTo add new rule please press **Add New Rule** button then select sheet name, set cell and column name.\n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/add_new_rule_writer.png)\n\nWhile writing excel files merw uses this rules. For example, supposing our first rule is \"NAME\", \"Sheet1\", \"B1\", merw will read value in \"NAME\" column of dataset and set B1 cell of Sheet1 of template excel to this value. There isn't rule limit. If you want to delete rule, select related rule after press **Delete Selected Rule** button.\n\n### Setting Input Files Path and Output File\n\n**Output Files Path** is where your new excel files at located. **Input File** can be xlsx or csv format, it is single dataset will be used to create new excel files. **Template File** is template. merw will create copy of this file and fill each copy of file with dataset values.\n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/run_writer.png)\n\nTo set **Output Files Path** ,  **Inut File**, **Template File** please press **...** button where right of them.\n\nFinally press **Run Rules** button, it creates multiple excel files (1.xlsx, 2.xlsx ...) compatible with template file(at **Output Files Path**). If your file format of your dataset is *.csv, application asks you csv seperator. You can set any value as seperator.\n\n### Saving and Loading Rules\n\nIf you want to use rules later, you can save rules with **Save Writing Rules** button. To load rules that priorly you saved, press **Load Writing Rules** button and select rules file.\n\n## Python Shell\n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/code.png)\n\nIf the other functions not enough for you or you want to make different things, you can run python code inside of the application. It offer interactive python shell for you.\nFor example you need to get and save currency values from API:\n\n```\nimport json\nimport pandas as pd\nimport urllib.request\nwith urllib.request.urlopen(\"https://open.exchangerate-api.com/v6/latest\") as response:\n   content = response.read()\ncontent = json.loads(content)\nrates = []\nfor rate, value in content[\"rates\"].items():\n\trates.append([rate, value])\ndf = pd.DataFrame(rates, columns=[\"rate\",\"value\"])\nprint(df.head())\ndf.to_excel(r\"rates.xlsx\", index=False)\n```\n\n# Example usage\n## Create ticket (excel file) for titanic passangers\nFirst [download](https://www.openml.org/d/40945) titanic dataset.\nThen press Multiple Excel Writer button and load [titanic_write.json](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/titanic_write.json) file. I looks below:\n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/titanic_multiple_write_01.PNG)\n\nThen set Output Files Path, Input File (titanic.csv) and Template File ([ticket.xlsx](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/ticket.xlsx)).\nFinally press Run Rules. It can creates copy of ticket.xlsx for every passanger in data set at output location.\n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/titanic_multiple_write_02.PNG)\n\n## Create dateset from titanic tickets\nIn previous example we create ticket.xlsx every passenger of Titanic. To create a dataset from this tickets, we use outputs of previously example. Then press Multiple Excel Writer button and load [titanic_read.json](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/titanic_read.json) file. I looks below:\n\n![text](https://github.com/fatihmete/spreadsheet-tools/blob/master/examples/titanic_multiple_read_01.PNG)\n\nThen set **Input Files Path** (where copies of ticket.xlsx files located) and **Output File**.\nFinally press Run Rules. It can creates a single dataset from titanic tickets.\n\n# Open Source Licenses\n\nThis software uses other software below:\n- Python [licence](https://docs.python.org/3/license.html)\n- Pyqt5 [license](https://github.com/baoboa/pyqt5/blob/master/LICENSE)\n- Pandas [license](https://github.com/pandas-dev/pandas/blob/master/LICENSE)\n- Google Material Icons [license](https://github.com/google/material-design-icons/blob/master/LICENSE/)\n- Qt5 [license](https://doc.qt.io/qt-5/licensing.html)\n- Openpyxl [license](https://github.com/gleeda/openpyxl/blob/master/LICENCE.rst)\n\n# TODO\n- Improve GUI\n- Add *.xls and other open document files support\n- Prebuild package for other OS's\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fatihmete/spreadsheet-tools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spreadsheet-tools",
    "package_url": "https://pypi.org/project/spreadsheet-tools/",
    "platform": "",
    "project_url": "https://pypi.org/project/spreadsheet-tools/",
    "project_urls": {
      "Homepage": "https://github.com/fatihmete/spreadsheet-tools"
    },
    "release_url": "https://pypi.org/project/spreadsheet-tools/0.0.1/",
    "requires_dist": [
      "pandas (>=1.1.0)",
      "openpyxl (>=3.0.5)",
      "PyQt5-sip (>=12.8.1)",
      "PyQt5 (>=5.15.1)",
      "numpy (>=1.19.3)"
    ],
    "requires_python": ">=3.6",
    "summary": "All-in-one spreadsheet tools.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9964926,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "198a5125d6441cc8521c8df33724c0af5ea786753029f2a97f534b2af39d6904",
          "md5": "e1f2c1158c20513a84adf3b5737d1698",
          "sha256": "d3b5487099f68bcdecf034499e3c6d4fe7af1ab5d46b916017376e1e96a184bd"
        },
        "downloads": -1,
        "filename": "spreadsheet_tools-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1f2c1158c20513a84adf3b5737d1698",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 50130,
        "upload_time": "2021-04-03T11:50:32",
        "upload_time_iso_8601": "2021-04-03T11:50:32.148593Z",
        "url": "https://files.pythonhosted.org/packages/19/8a/5125d6441cc8521c8df33724c0af5ea786753029f2a97f534b2af39d6904/spreadsheet_tools-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba80dab53a67f486b5fac328331f0194669e3f205353065cf85c58959102f393",
          "md5": "5c77cd30def7ad29a79f42aac0d96b83",
          "sha256": "1549df399fecdb504e6dbd654c37ff2b821bcef3a3b39e38da9803f2bdfc2f29"
        },
        "downloads": -1,
        "filename": "spreadsheet-tools-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5c77cd30def7ad29a79f42aac0d96b83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30857,
        "upload_time": "2021-04-03T11:50:33",
        "upload_time_iso_8601": "2021-04-03T11:50:33.611280Z",
        "url": "https://files.pythonhosted.org/packages/ba/80/dab53a67f486b5fac328331f0194669e3f205353065cf85c58959102f393/spreadsheet-tools-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "198a5125d6441cc8521c8df33724c0af5ea786753029f2a97f534b2af39d6904",
        "md5": "e1f2c1158c20513a84adf3b5737d1698",
        "sha256": "d3b5487099f68bcdecf034499e3c6d4fe7af1ab5d46b916017376e1e96a184bd"
      },
      "downloads": -1,
      "filename": "spreadsheet_tools-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e1f2c1158c20513a84adf3b5737d1698",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 50130,
      "upload_time": "2021-04-03T11:50:32",
      "upload_time_iso_8601": "2021-04-03T11:50:32.148593Z",
      "url": "https://files.pythonhosted.org/packages/19/8a/5125d6441cc8521c8df33724c0af5ea786753029f2a97f534b2af39d6904/spreadsheet_tools-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba80dab53a67f486b5fac328331f0194669e3f205353065cf85c58959102f393",
        "md5": "5c77cd30def7ad29a79f42aac0d96b83",
        "sha256": "1549df399fecdb504e6dbd654c37ff2b821bcef3a3b39e38da9803f2bdfc2f29"
      },
      "downloads": -1,
      "filename": "spreadsheet-tools-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5c77cd30def7ad29a79f42aac0d96b83",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30857,
      "upload_time": "2021-04-03T11:50:33",
      "upload_time_iso_8601": "2021-04-03T11:50:33.611280Z",
      "url": "https://files.pythonhosted.org/packages/ba/80/dab53a67f486b5fac328331f0194669e3f205353065cf85c58959102f393/spreadsheet-tools-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}