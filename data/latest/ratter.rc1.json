{
  "info": {
    "author": "Fabian Meyer",
    "author_email": "fabian.meyer@ise.fraunhofer.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# ratter\n\n*ratter* is a python tool to calculate the optical response -- most importantly *R*eflection and *T*ransmission -- of a stack of layers of different materials. For this is uses the fresnel formalae and transfer matrix calculations.\n\nIt provides classes to define a stack of materials, while giving all, some or no numeric values. With *ratter* you can calculate the optical properties of this\nstack as numerical values or as functions - formulae or algorithms. With the power of [numpy](https://numpy.org) and [sympy](https://www.sympy.org), *ratter* gives numeric and symbolic calculations as a mixture and allows you to jump between the two freely.\n\nIf you give all values that are necessary to calculate the reflectance of a stack, *ratter* will just calculate and return that value. If you leave numerical values unset and give a symbol instead, for example a *d* as the thickness of an interlayer, *ratter* will return the reflection as a sympy formula with free symbol *d*. This formula can then be turned into an algorithmic function with *d* as an argument. This function will be a numpy function and vectorized, such that it can be applied to an array of *d*'s. This enables fast numeric calculations of the dependencies of the optical properties of a stack from any free parameter.\n\n## Example 1: general symbolic calculations\n\nIn a stack of multiple layers, the two outer layers are considered infinite half-spaces.\n\n```python\nfrom ratter import *\n\n# define three materials\nm1 = Material('1')\nm2 = Material('2')\nm3 = Material('3')\n\n# define three layers\nl1 = Layer('l1', m1)\nl2 = Layer('l2', m2)\nl3 = Layer('l3', m3)\n\n# define the order of the layers\nstack = Layerstack([l1,l2,l3])\n\n# calculate the (complex) reflectance amplitude\nr = stack.reflectance_amplitude().simplify()\n```\n<img src=\"/docs/three_materials_r.png\" width=\"320\"/>\n\n```\nstack.transmittance_amplitude().simplify()\n```\n<img src=\"/docs/three_materials_t.png\" width=\"320\"/>\n\n\n## Example 2: numeric calculation of a double layer coating\n```python\nfrom ratter import *\nfrom sympy import conjugate\n\nwavelength = 600 # length units: nm\n\n# define materials with their refractive index at the wavelength\nSi = Material('Si', refractive_index_value=3.9400+0.019934j)  # Green 2008\nair = Material('air', refractive_index_value=1.00027698) # Ciddor 1996\nSiO2 = Material('SiO2', refractive_index_value=1.4580) # Malitson 1965\nAlOx = Material('Al2O3', refractive_index_value=1.7675) # Malitson and Dodge 1972\n\n# define the layers\nenvironment = Layer('env', air)\ncoating1 = Layer('coat1', SiO2)\ncoating2 = Layer('coat2', AlOx)\nbulk = Layer('bulk', Si)\n\n# define the order of materials\nstack = Layerstack([environment, coating1, coating2, bulk])\n\n# calculate absolute reflectivity R\nr = stack.reflectance_amplitude()\nR = conjugate(r)*r\n\n# substitute symbols with numbers\nR_ = R.subs(LAMBDA_VAC, wavelength)\n\n# create a vectorized numpy function out of symbolic definition\nR_of_coating_thickness = as_function_of(R_, [coating1.thickness_symbol, \n                                             coating2.thickness_symbol])\n```\n**Plot** using the fast vectorized function\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nd1 = np.arange(0,500)\n\nfor d2 in [50,200,500]:\n    reflectivity_values = np.real(R_of_coating_thickness(d1, d2))\n    plt.plot(d1, reflectivity_values, label='{}'.format(d2))\n\nplt.legend(title='$Al_2O_3$ thickness (nm)')\nplt.ylabel('reflectivity')\nplt.xlabel('$SiO_2$ thickness (nm)')\n```\n<img src=\"/docs/example_plot.png\" width=\"320\"/>\n\n\n## Installation\n\n*ratter* is written for Python 3, tested in Python 3.7. It depends on [numpy](https://numpy.org) and [sympy](https://www.sympy.org). To run the tests, you will also need [scipy](https://www.scipy.org) and [tmm](https://pypi.org/project/tmm/).\n\nTo install use `pip`\n\n```pip install ratter```\n\n## Theoretical background\n\nThe theory behind the formulae used by *ratter* are the Fresnel Formulae. *ratter* assumes incoming light as a plane wave, described by its complex field amplitude and phase. The interaction with a material layer leads to a change in phase and amplitude (dependent on the refractive index of the material), which can be expressed as a transfer matrix. The consecutive propagation through the layers can be described as a consecutive application of the matrices. Thus a stack of layers can be described as one single transfer matrix. *ratter* calculates that matrix symbolically using [sympy](https://www.sympy.org).\n\nFor a detailed description, I recommend the explanations of Steven J. Byrnes: [arXiv:1603.02720 [physics.comp-ph]](https://arxiv.org/abs/1603.02720)\n\n## Limitations\n\n* As of now, *ratter* does not support an angle of incidence other than 0, meaning perfectly normal incidence. It does not consider polarization at all.\n* It does not support incoherent light and thus gives unrealistic results for thick layers which do not maintain coherence.\n* The calculation of spatially resolved absorption is also not included.\n\nAll of these above can and hopefully will be implemented in future versions.\n\n## Similar tools\n\nIf it is required to numerically calculate the reflectance, absorption or transmission, other python tools give very complete solutions:\n\n* [tmm](https://pypi.org/project/tmm/)\n* [OpenTMM](https://pypi.org/project/openTMM/)\n* [PyTMM](https://github.com/kitchenknif/PyTMM)\n\n*ratter* is tested to give the same results as [tmm](https://pypi.org/project/tmm/).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fa-me/ratter",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ratter",
    "package_url": "https://pypi.org/project/ratter/",
    "platform": "",
    "project_url": "https://pypi.org/project/ratter/",
    "project_urls": {
      "Homepage": "https://github.com/fa-me/ratter"
    },
    "release_url": "https://pypi.org/project/ratter/0.1.0a0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "calculate coherent reflection, absorption",
    "version": "0.1.0a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7353195,
  "releases": {
    "0.1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f83cc5fd3d4aadb14c2530b6d4b1cc90bfa0e8b0444f0b91cc11166e5700814f",
          "md5": "3339ea5c1899871fbb9f3132d0216876",
          "sha256": "16706b543e7081daea28ac6b039e0857639e3ac6df0a11a9f271eee65b6e7df4"
        },
        "downloads": -1,
        "filename": "ratter-0.1.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "3339ea5c1899871fbb9f3132d0216876",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5940,
        "upload_time": "2020-05-29T14:16:16",
        "upload_time_iso_8601": "2020-05-29T14:16:16.379571Z",
        "url": "https://files.pythonhosted.org/packages/f8/3c/c5fd3d4aadb14c2530b6d4b1cc90bfa0e8b0444f0b91cc11166e5700814f/ratter-0.1.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f83cc5fd3d4aadb14c2530b6d4b1cc90bfa0e8b0444f0b91cc11166e5700814f",
        "md5": "3339ea5c1899871fbb9f3132d0216876",
        "sha256": "16706b543e7081daea28ac6b039e0857639e3ac6df0a11a9f271eee65b6e7df4"
      },
      "downloads": -1,
      "filename": "ratter-0.1.0a0.tar.gz",
      "has_sig": false,
      "md5_digest": "3339ea5c1899871fbb9f3132d0216876",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5940,
      "upload_time": "2020-05-29T14:16:16",
      "upload_time_iso_8601": "2020-05-29T14:16:16.379571Z",
      "url": "https://files.pythonhosted.org/packages/f8/3c/c5fd3d4aadb14c2530b6d4b1cc90bfa0e8b0444f0b91cc11166e5700814f/ratter-0.1.0a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}