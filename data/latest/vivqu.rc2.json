{
  "info": {
    "author": "",
    "author_email": "Ding Yang <yangding19thu@outlook.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Vivqu: easier data analysis and visualization based on pydeequ\n\n## 1. Background\n\nFeature quality is of great important to machine learing model performance, in order to insure the intactness of data that come from multiple upstream data sources, I devised a data quality checking library for post monitoring, which is named **vivqu**. \n\nBased on PyDeequ, it gives data scientists deep insight into the data quality, and enable them to check whichever metrics they are insterested in. It also simplifies the intricate process when using PyDeequ directly and make users able to do the checking job within a few lines of code.\n\nVivqu consists of several parts:\n\n1. QualityChecker: provides simplified interfaces to measure the quality of a dataframe.\n2. DataLoader: provides different ways to load data from multiple sources.\n3. Visualizer: provides visualization for one analysis result or show differences for two or more results.\n\n## 2. Requirement\n\n+ python version >= 3.7\n\n+ pyspark version < 3.1, >= 2.4\n\n+ pydeequ version >= 1.0\n\n+ heatmapz == 0.0.4\n\nIf you don't have a java runtime environment (jre) on your computer, please choose one from [Latest releases | Adoptium](https://adoptium.net/zh-CN/temurin/releases/).\n\n## 3. Installation\n\nThis project has been packaged and uploaded to [vivqu Â· PyPI](https://pypi.org/project/vivqu/).\n\nYou can install vivqu with pip, which will automatically download pyspark, pydeequ and matplotlib with appropriate version.\n\n```bash\npip install vivqu\n```\n\n## 4. Example with Jupyter Notebook\n\nYou can follow this example in a jupyter notebook. Prepare a sample csv file, and let's start!\n\nImport pyspark, pydeequ and vivqu.\n```python\nimport pyspark\nfrom pyspark.sql import SparkSession\nimport pydeequ\nfrom pydeequ.analyzers import *\nimport vivqu\n```\n\nImport matplotlib, change figure format to make it more clear.\n\n```python\nimport matplotlib.pyplot as plt\n# add this command if you want to show chinese character\nplt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\n%matplotlib inline\n# you can choose from png, svg and retina\n%config InlineBackend.figure_format = 'retina'\n```\n\nCreate a spark session locally, you can also use a remote spark session.\n\n```python\nspark_session = (\n    SparkSession.builder\n    .config(\"spark.jars.packages\", pydeequ.deequ_maven_coord)\n    .config(\"spark.jars.excludes\", pydeequ.f2j_maven_coord)\n    .getOrCreate()\n)\n```\n\nImport DataLoader to load data from csv file.\n\n```python\nfrom vivqu.loader import DataLoader\n\nloader = DataLoader(spark_session)\ndf = loader.load_csv(\"transaction_100a.csv\")\ndf.printSchema()\n```\n\n<img src=\"https://raw.githubusercontent.com/yang-d19/Personal/main/Pictures/vivqu/schema.png\" width=\"480\"/>\n\nCreate quality checker by providing it with a spark session.\n\n```python\nfrom vivqu.checker import *\n\nchecker = QualityChecker(spark_session)\n```\n\nAssign default metrics to columns that you are interested, then start analyzing.\n\nAdd column names in string format means that they are analyzed in default way, which contain:\n\n+ `Completeness`,  `CountDistinct`, ` Histogram` for column of ***Category*** type; \n\n+ `Completeness`, ` ApproxQuantiles`, ` Maximum`, `Minimum` for column of ***Numeric*** type.\n\nIf you want to see the start and end date of this data frame, pass the column name of time information to analyze function.\n\n```python\nresult_all_default = checker.analyze(\n    df, [ \n    \"Transaction_reason\",\n    \"Beneficiary_bank_name\",\n    \"Original_amount_USD\",\n    ],\n    \"Datetime_created\"\n)\nresult_all_default\n```\n\n<img src=\"https://raw.githubusercontent.com/yang-d19/Personal/main/Pictures/vivqu/result_all_default.png\" alt=\"analyze-result\" width=\"650\"/>\n\nYou can also add some other metrics and run.\n\n```python\nresult_add_metric = checker.analyze(\n    df, [ \n    \"Original_amount_USD\",\n    Size(),\n    Completeness(\"Beneficiary_bank_name\"),\n    ]\n)\nresult_add_metric\n```\n\n<img src=\"https://raw.githubusercontent.com/yang-d19/Personal/main/Pictures/vivqu/result_add_metric.png\" alt=\"analyze-result\" width=\"500\"/>\n\nTo visualize, you need to specify checker, dataframe, columns and date_column(Optional) parameter in visualize() function.\n\n```python\nfrom vivqu.visualize import *\n\nvisualize(\n    checker, df, [\n    \"Beneficiary_bank_name\",\n    \"Originator_category_code\",\n    \"Original_amount_USD\",\n    ],\n    \"Datetime_created\"\n)\n```\n\n<img src=\"https://raw.githubusercontent.com/yang-d19/Personal/main/Pictures/vivqu/vis_result_all_default.png\" alt=\"visualize-result\" width=\"850\" />\n\nUse diff() function to visualize specific columns between several dataframes.\n\n```python\ndf1 = loader.load_csv(\"transaction_100a.csv\")\ndf2 = loader.load_csv(\"transaction_100b.csv\")\ndf3 = loader.load_csv(\"transaction_100c.csv\")\n\ndiff(\n    checker,\n    [df1, df2], [\n    \"Beneficiary_bank_name\",\n    \"Originator_category_code\",\n    \"Original_amount_USD\",\n    ]\n)\n```\n\n<img src=\"https://raw.githubusercontent.com/yang-d19/Personal/main/Pictures/vivqu/diff_no_date.png\" alt=\"visualize-result\" width=\"580\" />\n\nIf you pass `date_column` parameter to diff(), the start and end date of each data frame will be shown.\n\n```python\ndiff(\n    checker,\n    [df1, df2, df3], [\n    \"Beneficiary_bank_name\",\n    \"Original_amount_USD\",\n    \"Transaction_reason\",\n    ],\n    \"Datetime_created\"\n)\n```\n\n<img src=\"https://raw.githubusercontent.com/yang-d19/Personal/main/Pictures/vivqu/diff-3.png\" alt=\"visualize-result\" width=\"800\" />\n\nYou can use Verifier to set constraints and see. verification result on given dataframe\n\n```python\nverifier = Verifier(checker)\n\nresult = verifier.verify(\n    df1, [\n    (Uniqueness([\"ID\"]), lambda x: x == 1, \"ID has no duplicate\"),\n    (Completeness(\"Booking_Legal_Entity_ID\"), lambda x: x == 1, \n     \t\t\"Booking_Legal_Entity_ID has no null value\"),\n    (Completeness(\"Transaction_reason\"), lambda x: x == 1, \n     \t\t\"Transaction_reason has no null value\"),\n    (Size(), lambda x: x > 50, \"Dataset size is larger than 50\")\n])\n\nprint(result)\n```\n\n```\n[True, True, False, True]\n```\n\nYou can calculate correlation matrix and visualize it.\n\n```python\ncorr_mat_df = checker.corr(\n    df, [\n    \"Original_amount_USD\", \n    \"Original_amount_orig_ccy\", \n    \"Original_Inverse_USD\",\n    \"Normalized_amount_USD\",\n    ]\n)\ncorr_mat_df\n```\n\n<img src=\"https://raw.githubusercontent.com/yang-d19/Personal/main/Pictures/vivqu/corr_mat.png\" alt=\"correlation-matrix\" width=820 />\n\nThe color indicate whether the correlation coefficient is postive or negtive, the size of each square indicate the absolute value of each coefficient.\n\n```python\nvisualize_corr(\n    checker, df, [\n    \"Original_amount_USD\", \n    \"Original_amount_orig_ccy\", \n    \"Original_Inverse_USD\",\n    \"Normalized_amount_USD\",\n    ]\n)\n```\n\n\n\n<img src=\"https://raw.githubusercontent.com/yang-d19/Personal/main/Pictures/vivqu/vis_corr_mat.png\" alt=\"correlation-matrix\" width=400 />\n\n\n\n## 5. Metrics\n\nHere are the detailed explanations and examples of all metrics provided in pydeequ.\n\nReference: https://aws.amazon.com/cn/blogs/big-data/test-data-quality-at-scale-with-deequ/\n\n| Metric | Description | Example |\n| ----   | -----       | ----    |\n|ApproxCountDistinct | Approximate number of distinct value, computed with HyperLogLogPlusPlus sketches. | `ApproxCountDistinct(\"review_id\")` |\n| ApproxQuantile | Approximate quantile of a distribution. | `ApproxQuantile(\"star_rating\", quantile = 0.5)`|\n| ApproxQuantiles | Approximate quantiles of a distribution. | `ApproxQuantiles(\"star_rating\", quantiles = [0.25, 0.5, 0.75])` |\n| Completeness | Fraction of non-null values in a column. | `Completeness(\"review_id\")`|\n| Correlation | Pearson correlation coefficient, measures the linear correlation between two columns. The result is in the range [-1, 1], where 1 means positive linear correlation, -1 means negative linear correlation, and 0 means no correlation.| `Correlation(\"total_votes\", \"star_rating\")`|\n| CountDistinct | Number of distinct values.| `CountDistinct(\"review_id\")`|\n| Distinctness | Fraction of distinct values of a column over the number of all values of a column. Distinct values occur at least once. Example: [a, a, b] contains two distinct values a and b, so distinctness is 2/3. | `Distinctness(\"review_id\")`|\n| Entropy | Entropy is a measure of the level of information contained in an event (value in a column) when considering all possible events (values in a column). It is measured in nats (natural units of information). Entropy is estimated using observed value counts as the negative sum of (value_count/total_count) * log(value_count/total_count). Example: [a, b, b, c, c] has three distinct values with counts [1, 2, 2]. Entropy is then (-1/5\\*log(1/5)-2/5\\*log(2/5)-2/5\\*log(2/5)) = 1.055. | `Entropy(\"star_rating\")`|\n| Maximum | Maximum value. | `Maximum(\"star_rating\")`|\n| Mean | Mean value; null values are excluded. | `Mean(\"star_rating\")`|\n| Minimum | Minimum value. | `Minimum(\"star_rating\")`|\n| MutualInformation | Mutual information describes how much information about one column (one random variable) can be inferred from another column (another random variable). If the two columns are independent, mutual information is zero. If one column is a function of the other column, mutual information is the entropy of the column. Mutual information is symmetric and nonnegative. | `MutualInformation([\"total_votes\", \"star_rating\"])` |\n| Size | Number of rows in a DataFrame. | `Size()`|\n| Sum | Sum of all values of a column.| `Sum(\"total_votes\")`|\n| UniqueValueRatio | Fraction of unique values over the number of all distinct values of a column. Unique values occur exactly once; distinct values occur at least once. Example: [a, a, b] contains one unique value b, and two distinct values a and b, so the unique value ratio is 1/2. | `UniqueValueRatio(\"star_rating\")`|\n| Uniqueness | Fraction of unique values over the number of all values of a column. Unique values occur exactly once. Example: [a, a, b] contains one unique value b, so uniqueness is 1/3. | `Uniqueness(\"star_rating\")`|\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vivqu",
    "package_url": "https://pypi.org/project/vivqu/",
    "platform": null,
    "project_url": "https://pypi.org/project/vivqu/",
    "project_urls": {
      "Repository": "https://gitlab.awx.im/awx-platform/ml-platform/risk-data-quality-check/"
    },
    "release_url": "https://pypi.org/project/vivqu/0.0.6/",
    "requires_dist": [
      "heatmapz",
      "pydeequ",
      "pyspark"
    ],
    "requires_python": ">=3.7",
    "summary": "Easier data analysis and visualization based on pydeequ",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14960955,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "206bfb8affb0962f92f04b9a35fe4526b8cecffb8c3a10fa303acc66ac504956",
          "md5": "00f269dede05b512d5a7461260ad8542",
          "sha256": "0714cae059a248a80cb1b849a241e718ddf272410f34eef1d811693fd62389c0"
        },
        "downloads": -1,
        "filename": "vivqu-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00f269dede05b512d5a7461260ad8542",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2",
        "size": 18627,
        "upload_time": "2022-08-03T03:25:12",
        "upload_time_iso_8601": "2022-08-03T03:25:12.112922Z",
        "url": "https://files.pythonhosted.org/packages/20/6b/fb8affb0962f92f04b9a35fe4526b8cecffb8c3a10fa303acc66ac504956/vivqu-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "308e765f51b439cb3f3f26685263f581d2c204a28bfbe044769240e967999d15",
          "md5": "9f0d284549b0cec9eafaaad9f601eb32",
          "sha256": "f8148d5bfbbc5b79155965cd293e7a5a9c143df2607ac9c3f9ccd130c67c1b38"
        },
        "downloads": -1,
        "filename": "vivqu-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9f0d284549b0cec9eafaaad9f601eb32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2",
        "size": 338086,
        "upload_time": "2022-08-03T03:25:15",
        "upload_time_iso_8601": "2022-08-03T03:25:15.242254Z",
        "url": "https://files.pythonhosted.org/packages/30/8e/765f51b439cb3f3f26685263f581d2c204a28bfbe044769240e967999d15/vivqu-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03c7e2409e7aa6553f0dce15ca97b7f28e24d90eedb98a2357a5bf35dcd1252b",
          "md5": "807b07b57ea73367047d40d939e273da",
          "sha256": "7d0b7d58b9e99cab7a9344e94bff1576880fc5def40e1b2449437b3cb24575e9"
        },
        "downloads": -1,
        "filename": "vivqu-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "807b07b57ea73367047d40d939e273da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24400,
        "upload_time": "2022-09-01T10:15:42",
        "upload_time_iso_8601": "2022-09-01T10:15:42.469466Z",
        "url": "https://files.pythonhosted.org/packages/03/c7/e2409e7aa6553f0dce15ca97b7f28e24d90eedb98a2357a5bf35dcd1252b/vivqu-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dedcd96b0138661521e2d7a01207bd4136397efea7df501aa496f39c9d7ccc0",
          "md5": "b2c9884722bcf1a49be53bcae85a9ec9",
          "sha256": "69b1566d2f6bf980eae4c5b0c42139c928d11a99677d1b75610334748e8cbcca"
        },
        "downloads": -1,
        "filename": "vivqu-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b2c9884722bcf1a49be53bcae85a9ec9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 932414,
        "upload_time": "2022-09-01T10:15:44",
        "upload_time_iso_8601": "2022-09-01T10:15:44.964787Z",
        "url": "https://files.pythonhosted.org/packages/4d/ed/cd96b0138661521e2d7a01207bd4136397efea7df501aa496f39c9d7ccc0/vivqu-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03c7e2409e7aa6553f0dce15ca97b7f28e24d90eedb98a2357a5bf35dcd1252b",
        "md5": "807b07b57ea73367047d40d939e273da",
        "sha256": "7d0b7d58b9e99cab7a9344e94bff1576880fc5def40e1b2449437b3cb24575e9"
      },
      "downloads": -1,
      "filename": "vivqu-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "807b07b57ea73367047d40d939e273da",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 24400,
      "upload_time": "2022-09-01T10:15:42",
      "upload_time_iso_8601": "2022-09-01T10:15:42.469466Z",
      "url": "https://files.pythonhosted.org/packages/03/c7/e2409e7aa6553f0dce15ca97b7f28e24d90eedb98a2357a5bf35dcd1252b/vivqu-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4dedcd96b0138661521e2d7a01207bd4136397efea7df501aa496f39c9d7ccc0",
        "md5": "b2c9884722bcf1a49be53bcae85a9ec9",
        "sha256": "69b1566d2f6bf980eae4c5b0c42139c928d11a99677d1b75610334748e8cbcca"
      },
      "downloads": -1,
      "filename": "vivqu-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "b2c9884722bcf1a49be53bcae85a9ec9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 932414,
      "upload_time": "2022-09-01T10:15:44",
      "upload_time_iso_8601": "2022-09-01T10:15:44.964787Z",
      "url": "https://files.pythonhosted.org/packages/4d/ed/cd96b0138661521e2d7a01207bd4136397efea7df501aa496f39c9d7ccc0/vivqu-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}