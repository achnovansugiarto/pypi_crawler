{
  "info": {
    "author": "stripe-python",
    "author_email": "stripe-python@139.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# KittenScript\n`KittenScript` is a high-level explanatory programming language written in `python3.7`.\n\nBlock in `KittenScript` like `lua`.\n\n# Install\nFirst, you need `python>=3.6` and `pip` or `git`.  \nThen, use `pip` or `git` install it:\n\nUse `pip`:\n```shell\npip install -U KittenScript\n```\n\nUse `git`:\n```shell\ngit clone https://github.com/stripepython/KittenScript/\ncd KittenScript\npip install -r requirements.txt\npython setup.py install\n```\n\nTest if installed well:\n```shell\npython -m KittenScript -v\n```\n\n# Run\nUse `KittenScript/__main__.py`.\n\nUsage: `python -m KittenScript [OPTIONS] FILE`\n\nOptions:    \n```\n-v, --version  Show the version and exit.    \n-i, --ide      Show the IDE in English and exit.    \n-ic, --ide-cn  Show the IDE in Chinese and exit.   \n-s, --stdio    Enter interactive programming.    \n--help         Show this message and exit.    \n```\n\nAnd use `python -m KittenScript FILE` to run file.  \nLike this:\n```shell\npython -m KittenScript test.kst\n```\n\n# Basic grammar\n\n## Arithmeter\n\nSame as all mainstream programming languages:\n\nFor example:\n```python\n1 + 1\n(2 + 3) * 4\n7 + 6 * 5 > 2 == true\n```\n\n## Booleans\nTwo keywords: `true` and `false`.\n\n## Lists\nFor lists, `KittenScript` is the same as Python:\n```python\n[]\n[1, 2, 3]\n[1, \"2\", true]  # Support different types\n[[1, 2, 3], [4, 5, 6]]   # 2D List\n[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]  # 3D List\n# Can wrap\n[\n    \"apple\",\n    \"banana\",\n    \"strawberry\",\n    \"watermelon\"\n]\n```\n\n## Dictionaries(Dict)\nFor dictionaries, `KittenScript` is the same as Python too:\n\n```python \n{}\n{'first': 1, 'second': 2}\n# Can wrap\n{\n    'perfect': 2,\n    'good': 1,\n    'bad': 0\n} \n```\n\n## Strings\nFor strings, `KittenScript` is similar to `python2`.\nYou can use `\"`, `'` or \"`\".\n\n```python\n''\n\"12345\"\n'Hello, World!'\n`\\n`  # Likes \"\\\\n\"\n\n\"Test\\nTest\\t\"\n'\\''\n```\n\n## Variables\n\nUse `var` keyword to define a variable:\n```python\nvar a = 1\nvar b = 0.3 + 9.0\nvar c = var d = [1, 2]\n```\n\nIf you use `CONST_` prefix, it will be a const variable.  \nWhen the const variable is defined in this namespace, you can't redefine it.\n```python\nvar CONST_PI = 3.14\n\nvar CONST_PI = 3.1415926  # Error!\n```\n\nYou can use `+=`, `-=` and things like that too:\n```python \nvar a = 65535\nvar a += 1   # Must define a first!\nvar a >>= 1\n\nvar b ^= 3  # Error: b is not defined\n```\n\n## Flow Of Control\n\n### If-elif-else\n\nOneline(Ternary expression)ï¼š\n```python\nif true then 1  # else null\nif null then 0 else 1   # Ternary expression\nif false then 1 elif 0 then 2 elif null then 3 else 4\n```\n\nMulti-line:\n```python\nif 1 then\n    print(\"1 is true\")\nend\n\nif 0 then\n    print(\"0 is true\")\nelse\n    print(\"0 is false\")\nend\n\nif 0 then\n    print(\"0 is true\")\nelif 1 then\n    print(\"0 is false and 1 is true\")\nelse\n    print(\"0 and 1 are false\")\nend\n\n```\n\n### While-else\nOneline (List comprehension and you cannot use else):\n\n```python\nvar a = 0\nvar arr = while a < 10 var a += 1\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\nAnd multi-line:\n\n```python \nvar a = 0\nwhile a < 10 then\n    print(a)\n    var a += 1\nend\n```\n\n`Else` statement is like Python.  \n\nIt refers to the code to be executed after the normal end of the loop, \nthat is, if the loop is terminated by the `break`, \nthe indented code under else will not be executed.\n\n```python \nvar a = 0\nwhile a < 10 then\n    print(a)\n    var a += 1\n    if a > 5 then break\nelse\n    print(\"Else\")  # will not be executed\nend\n```\n\nYou can use break and continue like other high-level programming languages:\n\n```python \nvar a = -1\nwhile a < 10 then\n    var a += 1\n    if a % 2 == 0 then continue\n    if a > 7 then break\n    print(a)\nend\n```\n\nThis is equivalent to:\n\n```python \nvar a = -1\nwhile a < 10 then\n    var a += 1\n    if a % 2 == 0 then \n        continue\n    end\n    if a > 7 then \n        break\n    end\n    print(a)\nend\n```\n\n### For-else\nIt's like while-else expr.\n\nUsage:\n```python \nfor i = start_value(default is 0) to end_value step step_value(default is 1) then\n    ...\nend\n```\n\nLike this in Python:\n```python \nfor i in range(start_value, end_value, step_value):\n    ...\n```\n\nOneline:\n```python\nvar arr = for i to 5 then i ** 2  # [0, 1, 4, 9, 16]\n```\n\nIf you want to traverse a list, you can write like this:\n```python\nvar arr = [1, 2, 9, 3, 15, -6, 28, 1, 7]\nfor i to len(arr) then\n    print(arr[i])\nend\n```\n\nAnd an example (use `else`) is as follows:\n```python \nvar sentence = ['an', 'apple', 'a', 'day']\nfor i to len(sentence) then\n    if arr[i] == 'banana' then break\nelse\n    print('No bananas!')\n```\n\n### Try-catch-else-finally\nIf you want to catch errors, you can:\n```python\ntry \n    1 / 0\ncatch error, details then\n    ...\nend\n```\n\nOneline (An expression):\n\n```python\ntry 1 / 0 catch error, details then error + ':' + details\n```\n\nAnd multi-line:\n\n```python\ntry \n    1 / 0\ncatch error, details then\n    ...\nelse\n    ...\nfinally\n    ...\nend\n```\n\nThis likes Python.\n\n## Include\nThe keyword `include` is like `c`:\n\n```python\ninclude \"math.kst\"\n```\n\nOr you can:\n```python\ninclude \"math\"\n```\n\nIt can import from `/KittenScript/src/interpreter/lib` or CWD.\n\nUsing `KittenScript` to write modules is easy. You just need write a `KittenScript` program and include it:\n\n```python\n# target.kst\nvar pi = 3.1416\nvar e = 2.71828\n```\n\n```python\n# main.kst\ninclude \"target.kst\"\nprint(pi, e)\n```\n\nAnd you can use `Python3` too. But it's difficult. (Even you can use `c` or `c++`!)\n\n## Functions\nUse `function` or `lambda`.  \nDefault parameters and variable length parameters are temporarily not supported.\n\nOneline:\n```python\nfunction max(a, b) do if a >= b then a else b\nvar max = lambda a, b do if a >= b then a else b\n```\n\nMulti-line:\n```python\nfunction fib(n)\n    if n == 1 then return 1\n    if n == 2 then return 1\n    return fib(n - 1) + fib(n - 2)\nend\n```\n\n`return` is same as all high-level programming languages.\n\n## Namespace\nYou can use `namespace` keyword to create a namespace.\n\nThis is from `heap.kst` from STL:\n\n```python\nnamespace Heap\n    function empty(arr) do len(arr) == 0\n\n    function top(arr)\n        if Heap.empty(arr) then throw \"MathError\", \"empty heap\"\n        return arr[0]\n    end\n\n    function siftup(arr, e, last)\n        var i = last\n        var j = (last - 1) // 2\n        while i > 0 and e < arr[j] then\n            setitem(arr, i, arr[j])\n            var i = j\n            var j = (j - 1) // 2\n        end\n        setitem(arr, i, e)\n    end\n\n    function push(arr, e)\n        append(arr, null)\n        Heap.siftup(arr, e, len(arr) - 1)\n    end\n\n    function siftdown(arr, e, begin, end_)\n        var i = begin\n        var j = begin * 2 + 1\n        while j < end_ then\n            if j + 1 < end_ and arr[j + 1] < arr[j] then var j = j + 1\n            if e < arr[j] then break\n            setitem(arr, i, arr[j])\n            var i = j\n            var j = 2 * j + 1\n        end\n        setitem(arr, i, e)\n    end\n\n    function pop(arr)\n        if Heap.empty(arr) then throw \"MathError\", \"empty heap\"\n        var e0 = arr[0]\n        var e = poplist(arr)\n        if len(arr) > 0 then Heap.siftdown(arr, e, 0, len(arr))\n        return e0\n    end\n\n    function heapify(arr)\n        var end_ = len(arr)\n        for i = end_ // 2 - 1 to -1 step -1 then\n            Heap.siftdown(arr, arr[i], i, end_)\n        end\n    end\nend\n\nusing Heap.*\n\n```\n\nYou can use `using` to use the function.\n\n```python\nusing Heap.heapify   # Only use heapify\nusing Heap.*  # All\n```\n\n# Some Examples\n\n## Fibonacci\n```python\nfunction fib(n)\n    if n == 1 then return 1\n    if n == 2 then return 1\n    return fib(n - 1) + fib(n - 2)\nend\nprint(fib(15))\n```\n\n## Quick Sort\n```python\nfunction _partition(arr, left, right, cmp)\n    var tmp = arr[left]\n    while left < right then\n        while left < right and cmp(tmp, arr[right]) then\n            var right = right - 1\n        end\n        setitem(arr, left, arr[right])\n        while left < right and cmp(arr[left], tmp) then\n            var left = left + 1\n        end\n        setitem(arr, right, arr[left])\n    end    \n    setitem(arr, left, tmp)\n    return left\nend\n\nfunction _quick_sort(arr, left, right, cmp)\n    var mid = _partition(arr, left, right, cmp)\n    _quick_sort(arr, left, mid - 1, cmp)\n    _quick_sort(arr, mid + 1, right, cmp)\nend\n\nfunction qsort(array, cmp) do _quick_sort(array, 0, len(array) - 1, cmp)  # Quick Sort\n```\n\n# Floor Div\n```python\nfunction floor(dividend, divisor)\n    if divisor == 0 then throw \"MathError\", \"division by zero\"\n\n    var rev = false\n    if dividend > 0 then\n        var dividend = -dividend\n  \t    var rev = not rev\n    end\n    if divisor > 0 then\n        var divisor = -divisor\n        var rev = not rev\n    end\n    var candidates = [divisor]\n    \n    while candidates[-1] >= dividend - candidates[-1] then\n        append(candidates, candidates[-1] + candidates[-1])\n    end\n    \n    var ans = 0\n    for i = len(candidates) - 1 to -1 step -1 then\n        if candidates[i] >= dividend then\n            var ans = ans + (1 << i)\n            var dividend = dividend - candidates[i]\n        end\n    end\n    \n    return if rev then -ans else ans\nend\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stripepython/KittenScript/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "stripe-python",
    "maintainer_email": "stripe-python@139.com",
    "name": "KittenScript",
    "package_url": "https://pypi.org/project/KittenScript/",
    "platform": null,
    "project_url": "https://pypi.org/project/KittenScript/",
    "project_urls": {
      "Homepage": "https://github.com/stripepython/KittenScript/"
    },
    "release_url": "https://pypi.org/project/KittenScript/1.2.1/",
    "requires_dist": [
      "click"
    ],
    "requires_python": "",
    "summary": "",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16691565,
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04c50af3e83b23237c0aa7ac46ff886e8c60d0539d1d8b0d9ebb41476e365797",
          "md5": "1f2da9cd6ca0acf4c9eef12a44ec94b6",
          "sha256": "f4da7fd25fde28ee7ca49b050e81e1dba7e8f28011e01e977c16ceed61e0f772"
        },
        "downloads": -1,
        "filename": "KittenScript-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f2da9cd6ca0acf4c9eef12a44ec94b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 47817,
        "upload_time": "2023-01-20T04:08:10",
        "upload_time_iso_8601": "2023-01-20T04:08:10.229494Z",
        "url": "https://files.pythonhosted.org/packages/04/c5/0af3e83b23237c0aa7ac46ff886e8c60d0539d1d8b0d9ebb41476e365797/KittenScript-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9940aa48eab8875e388d5deca363703ee0b1744a47ad1880896413d4b76b26c4",
          "md5": "93ea7bdd6cff4f271deb3fe7be2744c8",
          "sha256": "0b0ed3072b8b2ccab5f29d4638e47c0ff3cb0371701884009f68f7115be58353"
        },
        "downloads": -1,
        "filename": "KittenScript-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "93ea7bdd6cff4f271deb3fe7be2744c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37445,
        "upload_time": "2023-01-20T04:08:13",
        "upload_time_iso_8601": "2023-01-20T04:08:13.135468Z",
        "url": "https://files.pythonhosted.org/packages/99/40/aa48eab8875e388d5deca363703ee0b1744a47ad1880896413d4b76b26c4/KittenScript-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3583c3d7bfeeabeb3f55ec34ef14b459088d8f2ae03ee6c9fb135fe10563799",
          "md5": "2fbf1255454bd5ba9c60b05594440f45",
          "sha256": "a060af5ff6315376e19b3b4d29b94dfaba2085d6e4ca4c62b883e48465c14f30"
        },
        "downloads": -1,
        "filename": "KittenScript-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fbf1255454bd5ba9c60b05594440f45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 48581,
        "upload_time": "2023-02-04T07:11:40",
        "upload_time_iso_8601": "2023-02-04T07:11:40.473417Z",
        "url": "https://files.pythonhosted.org/packages/f3/58/3c3d7bfeeabeb3f55ec34ef14b459088d8f2ae03ee6c9fb135fe10563799/KittenScript-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff17bf8b9935a071816dcec3d19be0dd095354ba08ee49755196f82e154a8089",
          "md5": "084ac76e18a72ce4835dd4ba639c8528",
          "sha256": "875caaccff08f347c6d31fe00013d27d517a28d77d03a7607dfbc2402ed66245"
        },
        "downloads": -1,
        "filename": "KittenScript-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "084ac76e18a72ce4835dd4ba639c8528",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38200,
        "upload_time": "2023-02-04T07:11:42",
        "upload_time_iso_8601": "2023-02-04T07:11:42.614054Z",
        "url": "https://files.pythonhosted.org/packages/ff/17/bf8b9935a071816dcec3d19be0dd095354ba08ee49755196f82e154a8089/KittenScript-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3583c3d7bfeeabeb3f55ec34ef14b459088d8f2ae03ee6c9fb135fe10563799",
        "md5": "2fbf1255454bd5ba9c60b05594440f45",
        "sha256": "a060af5ff6315376e19b3b4d29b94dfaba2085d6e4ca4c62b883e48465c14f30"
      },
      "downloads": -1,
      "filename": "KittenScript-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2fbf1255454bd5ba9c60b05594440f45",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 48581,
      "upload_time": "2023-02-04T07:11:40",
      "upload_time_iso_8601": "2023-02-04T07:11:40.473417Z",
      "url": "https://files.pythonhosted.org/packages/f3/58/3c3d7bfeeabeb3f55ec34ef14b459088d8f2ae03ee6c9fb135fe10563799/KittenScript-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff17bf8b9935a071816dcec3d19be0dd095354ba08ee49755196f82e154a8089",
        "md5": "084ac76e18a72ce4835dd4ba639c8528",
        "sha256": "875caaccff08f347c6d31fe00013d27d517a28d77d03a7607dfbc2402ed66245"
      },
      "downloads": -1,
      "filename": "KittenScript-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "084ac76e18a72ce4835dd4ba639c8528",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38200,
      "upload_time": "2023-02-04T07:11:42",
      "upload_time_iso_8601": "2023-02-04T07:11:42.614054Z",
      "url": "https://files.pythonhosted.org/packages/ff/17/bf8b9935a071816dcec3d19be0dd095354ba08ee49755196f82e154a8089/KittenScript-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}