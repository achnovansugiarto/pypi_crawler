{
  "info": {
    "author": "mandrewcito",
    "author_email": "anbaalo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# SignalR core client\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg?logo=paypal&style=flat-square)](https://www.paypal.me/mandrewcito/1)\n![Pypi](https://img.shields.io/pypi/v/signalrcore.svg)\n[![Downloads](https://pepy.tech/badge/signalrcore/month)](https://pepy.tech/project/signalrcore/month)\n[![Downloads](https://pepy.tech/badge/signalrcore)](https://pepy.tech/project/signalrcore)\n![Issues](https://img.shields.io/github/issues/mandrewcito/signalrcore.svg)\n![Open issues](https://img.shields.io/github/issues-raw/mandrewcito/signalrcore.svg)\n![travis build](https://img.shields.io/travis/mandrewcito/signalrcore.svg)\n![codecov.io](https://codecov.io/github/mandrewcito/signalrcore/coverage.svg?branch=master)\n\n![logo alt](https://raw.githubusercontent.com/mandrewcito/signalrcore/master/docs/img/logo_temp.128.svg.png)\n\n\n# Links \n\n* [Dev to posts with library examples and implementation](https://dev.to/mandrewcito/singlar-core-python-client-58e7)\n\n* [Pypi](https://pypi.org/project/signalrcore/)\n\n* [Wiki - This Doc](https://mandrewcito.github.io/signalrcore/)\n\n# Develop\n\nTest server will be avaiable in [here](https://github.com/mandrewcito/signalrcore-containertestservers) and docker compose is required.\n\n```bash\ngit clone https://github.com/mandrewcito/signalrcore-containertestservers\ncd signalrcore-containertestservers\ndocker-compose up\ncd ../signalrcore\nmake tests\n```\n\n## known issues\n\nIssues related with closing socket inherited from websocket-client library. Due this problems i cant update library to versions higher than websocket-client 0.54.0. \nI'm working for solve it, for now its patched (Error number 1. Raises an exception, and then exception is treated for prevent errors). \nIf i update weboscket library i fall into error number 2, on local machine i cant reproduce it but on travis builds fails (sometimes and randomly :()\n* [1. Closing socket error](https://github.com/slackapi/python-slackclient/issues/171)\n* [2. Random errors closing socket](https://github.com/websocket-client/websocket-client/issues/449)\n\n# A tiny How To\n\n## Connect to a server without auth\n\n```python\nhub_connection = HubConnectionBuilder()\\\n    .with_url(server_url)\\\n    .configure_logging(logging.DEBUG)\\\n    .with_automatic_reconnect({\n        \"type\": \"raw\",\n        \"keep_alive_interval\": 10,\n        \"reconnect_interval\": 5,\n        \"max_attempts\": 5\n    }).build()\n```\n## Connect to a server with auth\n\nlogin_function must provide auth token\n\n```python\nhub_connection = HubConnectionBuilder()\\\n            .with_url(server_url,\n            options={\n                \"access_token_factory\": login_function,\n                \"headers\": {\n                    \"mycustomheader\": \"mycustomheadervalue\"\n                }\n            })\\\n            .configure_logging(logging.DEBUG)\\\n            .with_automatic_reconnect({\n                \"type\": \"raw\",\n                \"keep_alive_interval\": 10,\n                \"reconnect_interval\": 5,\n                \"max_attempts\": 5\n            }).build()\n```\n### Unauthorized erros\nA login function must provide a error control if authorization fails. When connection starts, if authorization fails exception will be propagued.\n\n```python\n    def login(self):\n        response = requests.post(\n            self.login_url,\n            json={\n                \"username\": self.email,\n                \"password\": self.password\n                },verify=False)\n        if response.status_code == 200:\n            return response.json()[\"token\"]\n        raise requests.exceptions.ConnectionError()\n\n    hub_connection.start()   # this code will raise  requests.exceptions.ConnectionError() if auth fails\n```\n## Configure logging\n\n```python\nHubConnectionBuilder()\\\n    .with_url(server_url,\n    .configure_logging(logging.DEBUG)\n    ...\n```\n## Configure socket trace\n```python \nHubConnectionBuilder()\\\n    .with_url(server_url,\n    .configure_logging(logging.DEBUG, socket_trace=True) \n    ... \n ```\n ## Configure your own handler\n ```python\n import logging\nhandler = logging.StreamHandler()\nhandler.setLevel(logging.DEBUG)\nhub_connection = HubConnectionBuilder()\\\n    .with_url(server_url, options={\"verify_ssl\": False}) \\\n    .configure_logging(logging.DEBUG, socket_trace=True, handler=handler)\n    ...\n ```\n## Configuring reconection\nAfter reaching max_attemps an exeption will be thrown and on_disconnect event will be\nfired.\n```python\nhub_connection = HubConnectionBuilder()\\\n    .with_url(server_url)\\\n    ...\n    .build()\n```\n## Configuring aditional headers\n```python\nhub_connection = HubConnectionBuilder()\\\n            .with_url(server_url,\n            options={\n                \"headers\": {\n                    \"mycustomheader\": \"mycustomheadervalue\"\n                }\n            })\n            ...\n            .build()\n```\n## Configuring aditional querystring parameters\n```python\nserver_url =\"http.... /?myquerystringparam=134&foo=bar\"\nconnection = HubConnectionBuilder()\\\n            .with_url(server_url,\n            options={\n            })\\\n            .build()\n```\n## Congfigure skip negotiation\n```python\nhub_connection = HubConnectionBuilder() \\\n        .with_url(\"ws://\"+server_url, options={\n            \"verify_ssl\": False,\n            \"skip_negotiation\": False,\n            \"headers\": {\n            }\n        }) \\\n        .configure_logging(logging.DEBUG, socket_trace=True, handler=handler) \\\n        .build()\n\n```\n## Configuring ping(keep alive)\n\nkeep_alive_interval sets the secconds of ping message\n\n```python\nhub_connection = HubConnectionBuilder()\\\n    .with_url(server_url)\\\n    .configure_logging(logging.DEBUG)\\\n    .with_automatic_reconnect({\n        \"type\": \"raw\",\n        \"keep_alive_interval\": 10,\n        \"reconnect_interval\": 5,\n        \"max_attempts\": 5\n    }).build()\n```\n## Configuring logging\n```python\nhub_connection = HubConnectionBuilder()\\\n    .with_url(server_url)\\\n    .configure_logging(logging.DEBUG)\\\n    .with_automatic_reconnect({\n        \"type\": \"raw\",\n        \"keep_alive_interval\": 10,\n        \"reconnect_interval\": 5,\n        \"max_attempts\": 5\n    }).build()\n```\n\n## Configure messagepack\n\n```python\nfrom signalrcore.protocol.messagepack_protocol import MessagePackHubProtocol\n\nHubConnectionBuilder()\\\n            .with_url(self.server_url, options={\"verify_ssl\":False})\\\n                ... \n            .with_hub_protocol(MessagePackHubProtocol())\\\n                ...\n            .build()\n```\n## Events\n\n### On connect / On disconnect\non_open - fires when connection is openned and ready to send messages\non_close - fires when connection is closed\n```python\nhub_connection.on_open(lambda: print(\"connection opened and handshake received ready to send messages\"))\nhub_connection.on_close(lambda: print(\"connection closed\"))\n\n```\n### On hub error (Hub Exceptions ...)\n```\nhub_connection.on_error(lambda data: print(f\"An exception was thrown closed{data.error}\"))\n```\n### Register an operation \nReceiveMessage - signalr method\nprint - function that has as parameters args of signalr method\n```python\nhub_connection.on(\"ReceiveMessage\", print)\n```\n## Sending messages\nSendMessage - signalr method\nusername, message - parameters of signalrmethod\n```python\n    hub_connection.send(\"SendMessage\", [username, message])\n```\n## Sending messages with callback\nSendMessage - signalr method\nusername, message - parameters of signalrmethod\n```python\n    send_callback_received = threading.Lock()\n    send_callback_received.acquire()\n    self.connection.send(\n        \"SendMessage\", # Method\n        [self.username, self.message], # Params\n        lambda m: send_callback_received.release()) # Callback\n    if not send_callback_received.acquire(timeout=1):\n        raise ValueError(\"CALLBACK NOT RECEIVED\")\n```\n## Requesting streaming (Server to client)\n```python\nhub_connection.stream(\n            \"Counter\",\n            [len(self.items), 500]).subscribe({\n                \"next\": self.on_next,\n                \"complete\": self.on_complete,\n                \"error\": self.on_error\n            })\n```\n## Client side Streaming\n```python\nfrom signalrcore.subject import  Subject\n\nsubject = Subject()\n\n# Start Streaming\nhub_connection.send(\"UploadStream\", subject)\n\n# Each iteration\nsubject.next(str(iteration))\n\n# End streaming\nsubject.complete()\n\n\n\n\n```\n\n# Full Examples\n\nExamples will be avaiable [here](https://github.com/mandrewcito/signalrcore/tree/master/test/examples)\nIt were developed using package from [aspnet core - SignalRChat](https://codeload.github.com/aspnet/Docs/zip/master) \n\n## Chat example\nA mini example could be something like this:\n\n```python\nimport logging\nimport sys\nfrom signalrcore.hub_connection_builder import HubConnectionBuilder\n\n\ndef input_with_default(input_text, default_value):\n    value = input(input_text.format(default_value))\n    return default_value if value is None or value.strip() == \"\" else value\n\n\nserver_url = input_with_default('Enter your server url(default: {0}): ', \"wss://localhost:44376/chatHub\")\nusername = input_with_default('Enter your username (default: {0}): ', \"mandrewcito\")\nhandler = logging.StreamHandler()\nhandler.setLevel(logging.DEBUG)\nhub_connection = HubConnectionBuilder()\\\n    .with_url(server_url, options={\"verify_ssl\": False}) \\\n    .configure_logging(logging.DEBUG, socket_trace=True, handler=handler) \\\n    .with_automatic_reconnect({\n            \"type\": \"interval\",\n            \"keep_alive_interval\": 10,\n            \"intervals\": [1, 3, 5, 6, 7, 87, 3]\n        }).build()\n\nhub_connection.on_open(lambda: print(\"connection opened and handshake received ready to send messages\"))\nhub_connection.on_close(lambda: print(\"connection closed\"))\n\nhub_connection.on(\"ReceiveMessage\", print)\nhub_connection.start()\nmessage = None\n\n# Do login\n\nwhile message != \"exit()\":\n    message = input(\">> \")\n    if message is not None and message != \"\" and message != \"exit()\":\n        hub_connection.send(\"SendMessage\", [username, message])\n\nhub_connection.stop()\n\nsys.exit(0)\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mandrewcito/signalrcore",
    "keywords": "signalr core client 3.1",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "signalrcore-deng",
    "package_url": "https://pypi.org/project/signalrcore-deng/",
    "platform": null,
    "project_url": "https://pypi.org/project/signalrcore-deng/",
    "project_urls": {
      "Homepage": "https://github.com/mandrewcito/signalrcore"
    },
    "release_url": "https://pypi.org/project/signalrcore-deng/0.9.2/",
    "requires_dist": [
      "requests (>=2.22.0)",
      "websocket-client (==1.0.0)",
      "msgpack (==1.0.2)"
    ],
    "requires_python": "",
    "summary": "修改说明：1、fork原库，在原库的基础上修复了一些多线程相关的BUG；2、支持设置网络代码，方便fiddler等软件抓包；（仅项目自用，其余用途建议直接使用原库signalrcore的最新版）",
    "version": "0.9.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14552880,
  "releases": {
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc966ad9f526667061f70a4ce168fd68103e51f0ead1841e7cb16ffaee91e591",
          "md5": "d1193da12cad5633e02ef3300b4e8532",
          "sha256": "a23a67e2520e2bb211cd3ab4bab5d8572fc9529ec672a38ca11242918e18baea"
        },
        "downloads": -1,
        "filename": "signalrcore_deng-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1193da12cad5633e02ef3300b4e8532",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 35673,
        "upload_time": "2022-07-26T12:36:18",
        "upload_time_iso_8601": "2022-07-26T12:36:18.908624Z",
        "url": "https://files.pythonhosted.org/packages/dc/96/6ad9f526667061f70a4ce168fd68103e51f0ead1841e7cb16ffaee91e591/signalrcore_deng-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac8f0894ccf6a9a8525e5cf871b5adc69ffc44cc1820f4e3cb2460fe65fe8c57",
          "md5": "a82300a7fbd1074be55999b75954c452",
          "sha256": "c445c27c3109babf111025ef2c33d40668cbdc663132bf22a76216cd60a82552"
        },
        "downloads": -1,
        "filename": "signalrcore-deng-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a82300a7fbd1074be55999b75954c452",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24827,
        "upload_time": "2022-07-26T12:36:20",
        "upload_time_iso_8601": "2022-07-26T12:36:20.876358Z",
        "url": "https://files.pythonhosted.org/packages/ac/8f/0894ccf6a9a8525e5cf871b5adc69ffc44cc1820f4e3cb2460fe65fe8c57/signalrcore-deng-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc966ad9f526667061f70a4ce168fd68103e51f0ead1841e7cb16ffaee91e591",
        "md5": "d1193da12cad5633e02ef3300b4e8532",
        "sha256": "a23a67e2520e2bb211cd3ab4bab5d8572fc9529ec672a38ca11242918e18baea"
      },
      "downloads": -1,
      "filename": "signalrcore_deng-0.9.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1193da12cad5633e02ef3300b4e8532",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 35673,
      "upload_time": "2022-07-26T12:36:18",
      "upload_time_iso_8601": "2022-07-26T12:36:18.908624Z",
      "url": "https://files.pythonhosted.org/packages/dc/96/6ad9f526667061f70a4ce168fd68103e51f0ead1841e7cb16ffaee91e591/signalrcore_deng-0.9.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac8f0894ccf6a9a8525e5cf871b5adc69ffc44cc1820f4e3cb2460fe65fe8c57",
        "md5": "a82300a7fbd1074be55999b75954c452",
        "sha256": "c445c27c3109babf111025ef2c33d40668cbdc663132bf22a76216cd60a82552"
      },
      "downloads": -1,
      "filename": "signalrcore-deng-0.9.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a82300a7fbd1074be55999b75954c452",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24827,
      "upload_time": "2022-07-26T12:36:20",
      "upload_time_iso_8601": "2022-07-26T12:36:20.876358Z",
      "url": "https://files.pythonhosted.org/packages/ac/8f/0894ccf6a9a8525e5cf871b5adc69ffc44cc1820f4e3cb2460fe65fe8c57/signalrcore-deng-0.9.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}