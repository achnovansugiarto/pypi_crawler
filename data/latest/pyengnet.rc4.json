{
  "info": {
    "author": "Aurelio Lopez-Fernandez",
    "author_email": "alopfer1@upo.es",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "pyEnGNet: optimized reconstruction of gene co-expression networks using multi-GPU\n=================================================================================\n\n**Deployment & Documentation & Stats**\n\n.. image:: https://img.shields.io/badge/pypi-v0.0.3-brightgreen\n   :target: https://pypi.org/project/pyengnet/\n   :alt: PyPI version\n\n\n.. image:: https://readthedocs.org/projects/pyengnet/badge/?version=latest\n   :target: https://pyengnet.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n\n.. image:: https://img.shields.io/github/stars/aureliolfdez/pyengnet.svg\n   :target: https://github.com/aureliolfdez/pyEnGNet/stargazers\n   :alt: GitHub stars\n\n\n.. image:: https://img.shields.io/github/forks/aureliolfdez/pyengnet.svg?color=blue\n   :target: https://github.com/aureliolfdez/pyEnGNet/network\n   :alt: GitHub forks\n\n\n.. image:: https://img.shields.io/badge/license-GPL--3.0%20license-green\n   :target: https://github.com/aureliolfdez/pyEnGNet/blob/main/LICENSE\n   :alt: License\n\n\n----\n\n\nAbstract here\n\n\n**pyengnet** is featured for:\n\n* **Unified APIs, detailed documentation, and interactive examples** available to the community.\n* **Complete coverage** for reconstruction of massive gene co-expression networks.\n* **Optimized models** to generate results in the shortest possible time.\n* **Optimization of a High-Performance Computing (HPC) and Big Data ecosystem**, using `cuda <https://developer.nvidia.com/cuda-zone>`_ and `multiprocess <https://github.com/uqfoundation/multiprocess>`_.\n\n**API Demo**\\ :\n\n.. code-block:: python\n\n\n      import os\n      from pyengnet.File import File\n      from pyengnet.Engnet import Engnet\n\n      if __name__ == \"__main__\":\n         \n         # Load dataset\n         dataset = File.load(path=os.getcwd()+\"/datasets/Spellman.csv\", separator=\",\", nmi_th=0.6, spearman_th=0.7, kendall_th=0.7, readded_th=0.7, hub_th = 3)    \n\n         # Run pyEnGNet on CPUs\n         graphFiltered, infoGraphFiltered, graphComplete, infoGraphComplete = Engnet.process(dataset, saveComplete = True)\n\n         # Run pyEnGNet on GPU devices\n         # graphFiltered, infoGraphFiltered, graphComplete, infoGraphComplete = Engnet.process(dataset, saveComplete = True, numGpus = 2, computeCapability = 61)\n         \n         # Save gene co-expression networks and additional information\n         File.saveFile(path='/home/principalpc/Escritorio/graphComplete.csv',graph=infoGraphComplete) # Full network\n         File.saveFile(path='/home/principalpc/Escritorio/graphFiltered.csv',graph=infoGraphFiltered) # Filtered network\n         \n         # Print gene co-expression networks\n         File.showGraph(graph=graphComplete,title='Complete graph') # Full network\n         File.showGraph(graph=graphFiltered,title=\"Filtered graph\") # Filtered network\n\n\n**Citing pyEnGNet**\\ :\n\n`pyEnGNet paper <#>`_ is published in\n`(under review) <#>`_.\nIf you use pyEnGNet in a scientific publication, we would appreciate citations to the following paper::\n\n   Under review\n\nor::\n\n    Under review\n\n\n**Key Links and Resources**\\ :\n\n* `View the latest codes on Github <https://github.com/aureliolfdez/pyEnGNet>`_\n* `View the documentation & API <https://pyengnet.readthedocs.io/>`_\n* `View all examples <https://github.com/aureliolfdez/pyEnGNet/tree/main/tests/test_integration>`_\n\n----\n\nInstallation\n============\n\nIt is recommended to use **pip** for installation. Please make sure\n**the latest version** is installed, as pyengnet is updated frequently:\n\n.. code-block:: bash\n\n   pip install pyengnet            # normal install\n   pip install --upgrade pyengnet  # or update if needed\n   pip install --pre pyengnet      # or include pre-release version for new features\n\nAlternatively, you could clone and run setup.py file:\n\n.. code-block:: bash\n\n   git clone https://github.com/aureliolfdez/pyEnGNet.git\n   pip install .\n\n**Required Dependencies**\\ :\n\n* Python>=3.10\n* numpy>=1.24.0\n* tqdm>=4.64.0\n* multiprocess>=0.70.14\n* pandas>=1.5.3\n* matplotlib>=3.6.3\n* networkx>=3.0\n* scipy>=1.10.0\n\nAPI Reference\n=============\n\nI/O Management\n^^^^^^^^^^^^^^^^^^^^^^\n\n* **pyengnet.File**\\: Class used to manage file I/O operations and data visualization.\n* **pyengnet.File.load()**\\: Load dataset from a txt or csv file.\n* **pyengnet.File.saveFile()**\\: Save network to file (can be used to store full and/or pruned networks)\n* **pyengnet.File.showGraph()**\\: Display a specific network\n\n----\n\n\nEnsemble\n^^^^^^^^^^^^^^^^^^^\n* **pyengnet.Engnet**\\: Class in charge of controlling the execution of the EnGNet algorithm.\n* **pyengnet.Engnet.process()**\\: Function that runs the EngNet algorithm. Depending on the parameters of this function, the algorithm will be executed in parallel with CPU processors or GPU devices.\n* **pyengnet.Kendall**\\: Kendall measurement is coded in a parallel ecosystem with CPUs.\n* **pyengnet.NMI**\\: NMI measurement is coded in a parallel ecosystem with CPUs.\n* **pyengnet.Spearman**\\: Spearman measurement is coded in a parallel ecosystem with CPUs.\n* **pyengnet.src.correlations**\\: Execution of Kendall, NMI, and Spearman measures under a parallel multi-GPU ecosystem (CUDA). In addition, it detects those pairs of genes that exceed the threshold for major voting.\n\nExamples by Tasks\n=================\n\n\n**All implemented modes** are associated with examples, check\n`\"pyEnGNet examples\" <https://github.com/aureliolfdez/pyEnGNet/tree/main/tests/test_integration>`_\nfor more information.\n\n\n----\n\n\nRun on CPU\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`\"tests/test_integration/test_cpu.py\" <https://github.com/aureliolfdez/pyEnGNet/tree/main/tests/test_integration/test_cpu.py>`_\ndemonstrates the basic API for the generation of co-expression gene networks using CPUs.\n\n#. Load gene co-expression dataset from input file\n\n   .. code-block:: python\n\n      from pyengnet.File import File\n\n      dataset = File.load(path=os.getcwd()+\"/datasets/Spellman.csv\", separator=\",\", nmi_th=0.6, spearman_th=0.7, kendall_th=0.7, readded_th=0.7, hub_th = 3)    \n\n\n#. Run pyEnGNet based on CPUs.\n\n   .. code-block:: python\n\n      from pyengnet.Engnet import Engnet\n\n      graphFiltered, infoGraphFiltered, graphComplete, infoGraphComplete = Engnet.process(dataset, saveComplete = True)\n\n#. Save gene co-expression networks output (optional)\n\n   .. code-block:: python\n      \n      from pyengnet.File import File\n      \n      File.saveFile(path='/home/user/Desktop/graphComplete.csv',graph=infoGraphComplete)\n      File.saveFile(path='/home/user/Desktop/graphFiltered.csv',graph=infoGraphFiltered)\n\n#. Print gene co-expression networks output  (optional)\n\n   .. code-block:: python\n      \n      from pyengnet.File import File\n      \n      File.showGraph(graph=graphComplete,title='Complete graph')\n      File.showGraph(graph=graphFiltered,title=\"Filtered graph\")\n\n\nRun on GPU devices\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`\"tests/test_integration/test_gpu.py\" <https://github.com/aureliolfdez/pyEnGNet/tree/main/tests/test_integration/test_gpu.py>`_\ndemonstrates the basic API for the generation of co-expression gene networks using GPU devices.\n\n#. Load gene co-expression dataset from input file\n\n   .. code-block:: python\n\n      from pyengnet.File import File\n\n      dataset = File.load(path=os.getcwd()+\"/datasets/Spellman.csv\", separator=\",\", nmi_th=0.6, spearman_th=0.7, kendall_th=0.7, readded_th=0.7, hub_th = 3)    \n\n#. Run pyEnGNet based on CPUs.\n\n   .. code-block:: python\n\n      from pyengnet.Engnet import Engnet\n\n      graphFiltered, infoGraphFiltered, graphComplete, infoGraphComplete = Engnet.process(dataset, saveComplete = True, numGpus = 2, computeCapability = 61)\n\n#. Save gene co-expression networks output (optional)\n\n   .. code-block:: python\n      \n      from pyengnet.File import File\n      \n      File.saveFile(path='/home/user/Desktop/graphComplete.csv',graph=infoGraphComplete)\n      File.saveFile(path='/home/user/Desktop/graphFiltered.csv',graph=infoGraphFiltered)\n\n#. Print gene co-expression networks output  (optional)\n\n   .. code-block:: python\n      \n      from pyengnet.File import File\n      \n      File.showGraph(graph=graphComplete,title='Complete graph')\n      File.showGraph(graph=graphFiltered,title=\"Filtered graph\")\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,multiGPU,bioinformatics,gene networks",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyengnet",
    "package_url": "https://pypi.org/project/pyengnet/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyengnet/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyengnet/0.0.3/",
    "requires_dist": [
      "numpy",
      "tqdm",
      "multiprocess",
      "pandas",
      "matplotlib",
      "networkx",
      "scipy"
    ],
    "requires_python": ">=3.9",
    "summary": "pyEnGNet: optimized reconstruction of gene co-expression networks using multi-GPU",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16685818,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0538144d8b0ee0aea8b084479fb3a39aa6dfa3317b15faf613bb8cb3a122660c",
          "md5": "a3a995c3f14f51036780c3ca3aa2c4b3",
          "sha256": "3b07552f6163151523676eeff8af472c957150fa0a1f6dbd56668eb566eb7f85"
        },
        "downloads": -1,
        "filename": "pyengnet-0.0.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "a3a995c3f14f51036780c3ca3aa2c4b3",
        "packagetype": "bdist_egg",
        "python_version": "0.0.0",
        "requires_python": ">=3.10",
        "size": 23554,
        "upload_time": "2023-01-30T17:33:50",
        "upload_time_iso_8601": "2023-01-30T17:33:50.895746Z",
        "url": "https://files.pythonhosted.org/packages/05/38/144d8b0ee0aea8b084479fb3a39aa6dfa3317b15faf613bb8cb3a122660c/pyengnet-0.0.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02cd1541dee5a2a766d579cd3fa4ed15727234bfa2f5eafda8562c29a54ca877",
          "md5": "0615a91f280643e96af4e8e61ae2d5b9",
          "sha256": "e7ec0085a2d28916822e1c57ce8c3e04c675198dc3cbd87f8071af75db06d210"
        },
        "downloads": -1,
        "filename": "pyengnet-0.0.1-py3.9.egg",
        "has_sig": false,
        "md5_digest": "0615a91f280643e96af4e8e61ae2d5b9",
        "packagetype": "bdist_egg",
        "python_version": "0.0.1",
        "requires_python": ">=3.10",
        "size": 23699,
        "upload_time": "2023-01-30T17:56:53",
        "upload_time_iso_8601": "2023-01-30T17:56:53.605099Z",
        "url": "https://files.pythonhosted.org/packages/02/cd/1541dee5a2a766d579cd3fa4ed15727234bfa2f5eafda8562c29a54ca877/pyengnet-0.0.1-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53e822e5b4019e5bab4ce592b38f749bca5a582a60183d814efb344c055169e4",
          "md5": "28452de33568087e80942851846c843d",
          "sha256": "2628fc81d7b5fccdf099634edc893b480d69f102772ff3e2901c66309e4641fa"
        },
        "downloads": -1,
        "filename": "pyengnet-0.0.2-py3.9.egg",
        "has_sig": false,
        "md5_digest": "28452de33568087e80942851846c843d",
        "packagetype": "bdist_egg",
        "python_version": "0.0.2",
        "requires_python": ">=3.10",
        "size": 25853,
        "upload_time": "2023-01-30T18:30:40",
        "upload_time_iso_8601": "2023-01-30T18:30:40.094141Z",
        "url": "https://files.pythonhosted.org/packages/53/e8/22e5b4019e5bab4ce592b38f749bca5a582a60183d814efb344c055169e4/pyengnet-0.0.2-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6be5c899bb35bfeaea9a149f3eb5f4d0ab96cef16d6c11eec5fd38028ff31cf5",
          "md5": "3e4a72657ae47b552c1c01b283b7bb5b",
          "sha256": "43f9ec0a77929918454b725adfb3be1150aa3dfcfc3dd5202e6f34296bbb32dd"
        },
        "downloads": -1,
        "filename": "pyengnet-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e4a72657ae47b552c1c01b283b7bb5b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 25128,
        "upload_time": "2023-01-30T19:05:20",
        "upload_time_iso_8601": "2023-01-30T19:05:20.736076Z",
        "url": "https://files.pythonhosted.org/packages/6b/e5/c899bb35bfeaea9a149f3eb5f4d0ab96cef16d6c11eec5fd38028ff31cf5/pyengnet-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ee1209dd0d79104aa61ace2df35a8c37ba89e385405a46550d2f29ed9008483",
          "md5": "5e97409453f860388a34ec270148fca0",
          "sha256": "9bc5a4f594b5ca9a8dd7cd87c51fd8cda52d1b1f81505c64af430389884055e8"
        },
        "downloads": -1,
        "filename": "pyengnet-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5e97409453f860388a34ec270148fca0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 24488,
        "upload_time": "2023-01-30T19:05:22",
        "upload_time_iso_8601": "2023-01-30T19:05:22.531776Z",
        "url": "https://files.pythonhosted.org/packages/0e/e1/209dd0d79104aa61ace2df35a8c37ba89e385405a46550d2f29ed9008483/pyengnet-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f48b77fcb016ca4b9614d6595062df5c7011afe3fd118418e053ad363b2e0ef2",
          "md5": "11c40fbb84087d2a07a9044f6a86da86",
          "sha256": "eb029f1fd011a887b6284109cd6c90837e21f5cb30058ccedd10d3efcb730d43"
        },
        "downloads": -1,
        "filename": "pyengnet-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11c40fbb84087d2a07a9044f6a86da86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 25076,
        "upload_time": "2023-02-03T18:27:20",
        "upload_time_iso_8601": "2023-02-03T18:27:20.666539Z",
        "url": "https://files.pythonhosted.org/packages/f4/8b/77fcb016ca4b9614d6595062df5c7011afe3fd118418e053ad363b2e0ef2/pyengnet-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5f4dba2cd5cb5bcf9e5a3f2d6f9dd3351877ee01b3dac07e971b53c55c5e0ab",
          "md5": "0ab3c4cb9955d9a73281fb9d3810368d",
          "sha256": "d8f7e9b79334dfdeb33b15beb7408aabf77ebfb4ca7760e67ae5790886b0f89a"
        },
        "downloads": -1,
        "filename": "pyengnet-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0ab3c4cb9955d9a73281fb9d3810368d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 24439,
        "upload_time": "2023-02-03T18:27:22",
        "upload_time_iso_8601": "2023-02-03T18:27:22.753727Z",
        "url": "https://files.pythonhosted.org/packages/f5/f4/dba2cd5cb5bcf9e5a3f2d6f9dd3351877ee01b3dac07e971b53c55c5e0ab/pyengnet-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f48b77fcb016ca4b9614d6595062df5c7011afe3fd118418e053ad363b2e0ef2",
        "md5": "11c40fbb84087d2a07a9044f6a86da86",
        "sha256": "eb029f1fd011a887b6284109cd6c90837e21f5cb30058ccedd10d3efcb730d43"
      },
      "downloads": -1,
      "filename": "pyengnet-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "11c40fbb84087d2a07a9044f6a86da86",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 25076,
      "upload_time": "2023-02-03T18:27:20",
      "upload_time_iso_8601": "2023-02-03T18:27:20.666539Z",
      "url": "https://files.pythonhosted.org/packages/f4/8b/77fcb016ca4b9614d6595062df5c7011afe3fd118418e053ad363b2e0ef2/pyengnet-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5f4dba2cd5cb5bcf9e5a3f2d6f9dd3351877ee01b3dac07e971b53c55c5e0ab",
        "md5": "0ab3c4cb9955d9a73281fb9d3810368d",
        "sha256": "d8f7e9b79334dfdeb33b15beb7408aabf77ebfb4ca7760e67ae5790886b0f89a"
      },
      "downloads": -1,
      "filename": "pyengnet-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0ab3c4cb9955d9a73281fb9d3810368d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 24439,
      "upload_time": "2023-02-03T18:27:22",
      "upload_time_iso_8601": "2023-02-03T18:27:22.753727Z",
      "url": "https://files.pythonhosted.org/packages/f5/f4/dba2cd5cb5bcf9e5a3f2d6f9dd3351877ee01b3dac07e971b53c55c5e0ab/pyengnet-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}