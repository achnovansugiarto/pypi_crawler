{
  "info": {
    "author": "Theron Luhn",
    "author_email": "theron@luhn.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pyramid",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Object Brokering"
    ],
    "description": "# Pyramid Tasks\n\nPyramid and Celery are both fantastic projects that compliment each other well:\nPyramid processes synchronous web requests, while Celery performs asynchronous tasks in the background.\nUnfortunately, due to differences in structure and configuration, it's very difficult to integrate the two together.\nConfiguration, clients, etc. available in Pyramid views may be unavailable in tasks, or may need to be accessed in a different way.\nConfiguration and functionality may have to be duplicated in order to be shared between Pyramid and Celery.\nPyramid Tasks aims to bridge this gap by\n**creating a full Pyramid application in the Celery worker and providing a request object to every task.**\nYou can use the same configuration for Celery that you do Pyramid, including a Paste-style ini file.\nBringing parity to Pyramid and Celery means you can write code for Pyramid and have the code *just work* in Celery.\n\nTo see Pyramid Tasks in action, check out the [sample app](https://github.com/luhn/pyramid-tasks/tree/main/examples/basic/).\n\n## Getting Started\n\nTo use Pyramid Tasks, you should first be familiar with\n[Pyramid](https://docs.pylonsproject.org/projects/pyramid/en/latest/)\nand [Celery](https://docs.celeryproject.org/en/stable/).\n\nYou can install Pyramid Tasks from PyPI:\n\n```sh\npip install pyramid-tasks\n```\n\nInclude Pyramid Tasks in your application using `config.include`, or add it to `pyramid.includes` in your ini file.\n\n```sh\nconfig.include('pyramid_tasks')\n```\n\n## Configuring Celery\n\nWhen you import Pyramid Tasks into your application, a new Celery application is created.\nAll settings prefixed with `celery.` are put into Celery's configuration.\nAs settings from a .ini file are all strings, values are coerced as necessary.\nNested settings are supported by chaining dots, e.g. `celery.broker_transport_options.queue_name_prefix`.\n\nFor example, the following simple `celeryconf.py`:\n\n```python\nbroker_url = 'redis://'\nbroker_transport_options = {\n    'visibility_timeout': 3600,\n}\nresult_backend = 'redis://'\n```\n\nIs equivalent to the following .ini file:\n\n```ini\ncelery.broker_url = redis://\ncelery.broker_transport_options.visibility_timeout = 3600\ncelery.result_backend = redis://\n```\n\n## Running a Worker\n\nIf you're running Pyramid via Paste (i.e. an ini file and possibly `pserve`),\nyou can run a Celery worker using the same ini file.\n\n```sh\ncelery -A pyramid_tasks --ini config.ini\n```\n\nThis will create a Pyramid app via the same process `pserve` does, allowing you to share configuration between the two environments.\n\nYou can also create a Celery app using `config.make_celery_app()`, just like you use `config.make_wsgi_app()`.\nIf you add `app = config.make_celery_app()` to `celery.py` in your project's package, you can invoke `celery -A myproject worker` to boot a worker.\n\nTo see both methods of running a worker in action, take a look at the [sample app](https://github.com/luhn/pyramid-tasks/tree/main/examples/basic/).\n\n## Registering Tasks\n\nTo register a new task, call `config.register_task` with the task function.\nYou can also use the `pyramid_tasks.task` decorator as long as you run a scan (`config.scan()`) on the package, just like Pyramid's `view_config` decorator.\n`register_task` and `@task` take the same arguments as [Celery.task](https://docs.celeryproject.org/en/stable/reference/celery.html#celery.Celery.task).\n\nFor example, a simple Pyramid app with a task might look like the following:\n\n```python\nfrom pyramid.config import Configurator\n\n\ndef add(request, x, y):\n    return x + y\n\n\nwith Configurator() as config:\n    config.register_task(add, name='add')\n```\n\n## Invoking a Task\n\nOnce a task is registered, you can add it to the work queue using `request.defer_task`.\nThis takes the task function or a string of the name of the task as the first argument.\nThe remaining arguments (positional and keyword) will be passed to the task.\nWhen the task is invoked by a Celery worker, a request object will be created and passed as the first argument.\n\nThis request object will share the same configuration as requests in the Pyramid application.\nThis means it will have the same or similar methods, registry, etc.\nHowever, it is not *the* request that invoked the task and properties such as `url`, `GET`, etc. will not be present.\nTo use these values in your task, pass them in as arguments.\n\nLet's take our simple Pyramid app and add a view that invokes the task.\n\n\n```python\nfrom pyramid.config import Configurator\n\n\ndef add_view(context, request):\n    request.defer_task(add, int(request.GET['x']), int(request.GET['y']))\n    return 'OK\\n'\n\n\ndef add(request, x, y):\n    return x + y\n\n\nwith Configurator() as config:\n    config.add_route('root', '/')\n    config.add_view(add_view, route_name='root')\n    config.register_task(add, name='add')\n```\n\nYou can also use `request.defer_task_with_options` to pass options into Celery.\nSee the [Celery docs](https://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.apply_async) for details on what options are available.\nFor example:\n\n```python\ndef add_view(context, request):\n    args = int(request.GET['x']), int(request.GET['y'])\n    request.defer_task_with_options(add, args=args, countdown=5)\n    return 'OK\\n'\n```\n\n\n## Getting Task Results\n\n`request.defer_task` returns a Celery [AsyncResult](https://docs.celeryproject.org/en/stable/_modules/celery/result.html#AsyncResult) object.\nYou can use this object to check if the task has completed (`AsyncResult.ready()`) and to get the return value of the task (`AsyncResult.result`).\nSee the Celery docs for more information.\n\n`AsyncResult` also has an `id` property.\nIf you store this property somewhere, such as a client session, you can use `request.get_task_result(id)` to return a new `AsyncResult` object.\n\n## pyramid_tm Integration\n\n[pyramid_tm](https://docs.pylonsproject.org/projects/pyramid-tm/en/latest/) is the recommended way of adding transaction management to Pyramid.\nFor example, the [Pyramid cookiecutter](https://github.com/Pylons/pyramid-cookiecutter-starter)\nuses `pyramid_tm` and `zope.sqlalchemy` to integrate SQLAlchemy into Pyramid.\n\nPyramid Tasks includes built-in support for pyramid_tm.\nIt can be enabled by including `pyramid_tasks.transaction` in your project.\nThis must be included after Pyramid Tasks, but doesn't need to be included before pyramid_tm.\n\nTo see Pyramid Tasks, pyramid_tm, and SQLAlchemy in action, check out the [SQLAlchemy sample app](https://github.com/luhn/pyramid-tasks/tree/main/examples/sqlalchemy).\n\n## Periodic Tasks\n\nPyramid Tasks supports [Celery Beat](https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html) for running periodic tasks.\nAfter registering a task, use `config.add_periodic_task` to schedule the task.\nThe arguments mirror [Celery.add_periodic_task](https://docs.celeryproject.org/en/stable/reference/celery.html#celery.Celery.add_periodic_task):\n\n```python\nconfig.add_periodic_task(\n    5.0,  # Run every five seconds\n    'mytask',\n    ('foo', 'bar'),  # Position arguments passed to task\n    {'fizz': 'buzz'},  # Keyword arguments passed to task\n)\n```\n\nYou can also use [celery.schedules.crontab](https://docs.celeryproject.org/en/stable/reference/celery.schedules.html#celery.schedules.crontab)\nas the first argument to use crontab-style scheduling.\n\nYou can run the Beat scheduler the same way you run the Celery worker.\n\n```sh\ncelery -A pyramid_tasks beat --ini config.ini\n```\n\nTo see Celery Beat in action, check out the [beat sample app](https://github.com/luhn/pyramid-tasks/tree/main/examples/beat/).\n\n## Extending Tasks:  Task Derivers\n\nTask Derivers are analogous to Pyramid's [View Derivers](https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/hooks.html#view-derivers).\nThey allow you to transform the task before registering it, such as wrapping the task in a transaction or adding metric collection.\n\nA task deriver is a callable that takes two arguments:  A task function and an info object.\nThe deriver should return a task callable.\nThe info object has the following attributes:\n\n* `registry` — The registry for the current Pyramid application.\n* `package` — The package where the configuration statement was found.\n* `name` — The name of the task.\n* `options` — The options passed in to the register task action.\n* `original_func` — The original task function.\n\nYou can register a new task deriver with the `Configurator.add_task_deriver` method.\nThe first argument is the task deriver.\nThe second argument is the name.\nIf omitted, the name of the task deriver function will be used.\nIt also optionally takes `over` and `under` arguments, which work the same as with Pyramid's view deriver.\n\nFor example, here's a simple task deriver that wraps the task in a database transaction:\n\n```python\ndef transaction_deriver(task, info):\n    def wrapped(request, *args, **kwargs):\n        with request.db:\n            task(request, *args, **kwargs)\n\n    return wrapped\n\ndef includeme(config):\n    config.add_task_deriver(transaction_deriver)\n```\n\nYou can pass in options when registering the task to configure your task derivers.\nFor example, here's the same transaction task deriver as above, but now will only wrap the task if the `in_transaction` option is set.\n\n```python\ndef transaction_deriver(task, info):\n    def wrapped(request, *args, **kwargs):\n        with request.db:\n            task(request, *args, **kwargs)\n\n    if info.options.get('in_transaction', False):\n\t\t    return wrapped\n    else:\n        return task\n```\n\nCelery will accept any keyword arguments passed in, so no configuration is necessary to use your own options.\nAll options will be set as attributes on the task object.\n\n## Extending Tasks:  Events\n\nPyramid Task also fires events using Pyramid's [event system](https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/events.html).\nCurrently the only event is `pyramid_task.events.BeforeDeferTask`, which will fire when calling `defer_task` or `defer_task_with_options`.\nThe event contains the following attributes:\n\n* `request` — The current request.\n* `task` — The task being deferred.\n* `args` — The arguments being passed to the task.\n* `kwargs` — The keyword arguments being passed to the task.\n* `options` — The options being passed into `Task.apply_async`.\n\nYou can modify `options` in-place and the changes will be reflected in the `apply_async` call.\n\nFor example, here's an event subscriber that adds the current user ID to the headers.\n\n```python\ndef add_headers(event):\n    headers = event.options.setdefault('headers', {})\n    headers.setdefault('user_id', event.request.authenticated_userid)\n\ndef includeme(config):\n    config.add_subscriber(add_headers, BeforeDeferTask)\n```\n\nThe user ID will now be accessible from `request.current_task.request.user_id`.\n\n## Fork Safety\n\nCelery by default uses a pre-fork worker model,\nmeaning the application will be initialized and then forked to launch the desired number of workers.\nThis can cause issues with some libraries, especially ones utilizing file descriptors such as database connections.\nFor example, [SQLAlchemy requires disposing connections on fork](https://docs.sqlalchemy.org/en/14/core/pooling.html#using-connection-pools-with-multiprocessing-or-os-fork).\nYou can do this by subscribing to the `pyramid_task.events.CeleryWorkerProcessInit` event.\n\n``python\nconfig.add_subscriber(lambda _: engine.pool.recreate(), CeleryWorkerProcessInit)\n```\n\nThe event includes the current [application registry](https://docs.pylonsproject.org/projects/pyramid/en/2.0-branch/api/registry.html) in the `registry` property.\n\n`CeleryWorkerProcessInit` is triggered by Celery's `worker_process_init` signal, so use it in the same situations you would that signal.\n\n## Acknowledgements\n\nPyramid Tasks is heavily inspired by the code of PyPA's [Warehouse](https://github.com/pypa/warehouse/) project.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/luhn/pyramid-tasks/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyramid-tasks",
    "package_url": "https://pypi.org/project/pyramid-tasks/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyramid-tasks/",
    "project_urls": {
      "Homepage": "https://github.com/luhn/pyramid-tasks/"
    },
    "release_url": "https://pypi.org/project/pyramid-tasks/0.3.1/",
    "requires_dist": [
      "celery (<6,>=4)",
      "pyramid (>=1.9)",
      "venusian (>=1.0)",
      "zope.interface (>=3.8.0)",
      "black (~=22.3) ; extra == 'linting'",
      "flake8 (~=4.0.1) ; extra == 'linting'",
      "isort (~=5.10) ; extra == 'linting'",
      "pyramid-tm (~=2.4) ; extra == 'testing'",
      "pytest (~=6.1) ; extra == 'testing'",
      "sqlalchemy (~=1.4.15) ; extra == 'testing'",
      "transaction (~=3.0.1) ; extra == 'testing'",
      "zope.sqlalchemy (~=1.4) ; extra == 'testing'"
    ],
    "requires_python": ">=3.6",
    "summary": "Bring parity to Pyramid and Celery by creating a full Pyramid application in the Celery worker and providing a request object for each task.",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14014663,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8a9e6b54b89b4f5c173b0115179830dd597d7c7f8811450369696e8437cc364",
          "md5": "a5888209deef6e5d668dab31df560578",
          "sha256": "e1db93a1e90dbcd7b932c315d1de9a1b804414919c19c5f57ff5a7b3b6714e5d"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5888209deef6e5d668dab31df560578",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7533,
        "upload_time": "2021-01-06T17:34:27",
        "upload_time_iso_8601": "2021-01-06T17:34:27.557172Z",
        "url": "https://files.pythonhosted.org/packages/f8/a9/e6b54b89b4f5c173b0115179830dd597d7c7f8811450369696e8437cc364/pyramid-tasks-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cf5b502e81c17ad556cedd702ea2e1a0b99fe70b525591761f53928684f93f1",
          "md5": "6496bca5cb2fe825ac7936ddc225937d",
          "sha256": "c29675c286ae52dc0eb7f89cd643a8eda432f15fcfaf09a25fadb9c7fc47a395"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6496bca5cb2fe825ac7936ddc225937d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7800,
        "upload_time": "2021-01-09T07:27:46",
        "upload_time_iso_8601": "2021-01-09T07:27:46.480180Z",
        "url": "https://files.pythonhosted.org/packages/1c/f5/b502e81c17ad556cedd702ea2e1a0b99fe70b525591761f53928684f93f1/pyramid-tasks-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc3268b1bff4017c08cb1b316ee3fb8c4fa22f39c19591a3925f071413c8bef5",
          "md5": "4396ab7814ad0eeb22fe4a91466ac9fd",
          "sha256": "1df43c82e7c38459b8d48544b8c3da9b713e4c77acd7da7f8c1b6686d4dc217c"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4396ab7814ad0eeb22fe4a91466ac9fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9716,
        "upload_time": "2021-01-10T02:07:11",
        "upload_time_iso_8601": "2021-01-10T02:07:11.963006Z",
        "url": "https://files.pythonhosted.org/packages/cc/32/68b1bff4017c08cb1b316ee3fb8c4fa22f39c19591a3925f071413c8bef5/pyramid-tasks-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7155927201bacf8282d756600d4021192acde29e07a05601810e96830843197",
          "md5": "175b0fa2898266b98f88a07180b081b4",
          "sha256": "6dac5e2cd5242ce0319a7804a6936fb26656f5442bef5980a89b834ac0588073"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "175b0fa2898266b98f88a07180b081b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14726,
        "upload_time": "2021-01-11T01:16:07",
        "upload_time_iso_8601": "2021-01-11T01:16:07.942793Z",
        "url": "https://files.pythonhosted.org/packages/a7/15/5927201bacf8282d756600d4021192acde29e07a05601810e96830843197/pyramid-tasks-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe05be1ab5f1737f87a1ce4933b6810cbf50d769f63fe92eeb3e740a15d9bc7f",
          "md5": "48f32a245538d31ff58bbe65dc552677",
          "sha256": "74215d3411286be38272c96931fe8de14932c14bb310c74d1daadb45f82cd2cb"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "48f32a245538d31ff58bbe65dc552677",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14583,
        "upload_time": "2021-01-11T01:29:40",
        "upload_time_iso_8601": "2021-01-11T01:29:40.376137Z",
        "url": "https://files.pythonhosted.org/packages/fe/05/be1ab5f1737f87a1ce4933b6810cbf50d769f63fe92eeb3e740a15d9bc7f/pyramid-tasks-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afd4677753c3e26108c25d55202a3362c297ef76f792c1b6ae50010c76171251",
          "md5": "0d5d8d6b4af85cbdc9319a43a37233f3",
          "sha256": "791a0a1fb6ca19a09af2f8f86d8ff33cdea427c182cdaf8555aa7db61f04076d"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0d5d8d6b4af85cbdc9319a43a37233f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14606,
        "upload_time": "2021-01-15T05:31:56",
        "upload_time_iso_8601": "2021-01-15T05:31:56.076086Z",
        "url": "https://files.pythonhosted.org/packages/af/d4/677753c3e26108c25d55202a3362c297ef76f792c1b6ae50010c76171251/pyramid-tasks-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "831114241adff71d49a1624479e4502ebf971477a554e9bea45a8157d89d529c",
          "md5": "9ec859811810bab6b32deb5066182fb5",
          "sha256": "b17c5e6089c178c9c316f7b5c4e9e0398b1568ddab23144661be93a7e16dc176"
        },
        "downloads": -1,
        "filename": "pyramid_tasks-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ec859811810bab6b32deb5066182fb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13931,
        "upload_time": "2021-05-11T17:13:49",
        "upload_time_iso_8601": "2021-05-11T17:13:49.446861Z",
        "url": "https://files.pythonhosted.org/packages/83/11/14241adff71d49a1624479e4502ebf971477a554e9bea45a8157d89d529c/pyramid_tasks-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a7a97a6d27a33d52306e69099f0d21c4ddea7f0477882bf18f0ab4fefec5baa",
          "md5": "ce6258be90eebe56d310560c0787da10",
          "sha256": "1002d0519ec9af3b401084e224016777606409cd7f08ff0182d67868741f7362"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ce6258be90eebe56d310560c0787da10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14976,
        "upload_time": "2021-05-11T17:13:50",
        "upload_time_iso_8601": "2021-05-11T17:13:50.603105Z",
        "url": "https://files.pythonhosted.org/packages/3a/7a/97a6d27a33d52306e69099f0d21c4ddea7f0477882bf18f0ab4fefec5baa/pyramid-tasks-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "740c9535677d230b67ba64bc346d9309b45ced99544fd3c62409d6a861afbb7c",
          "md5": "8d8cd11f9b96448ab1bd5bda138abde8",
          "sha256": "76073861c8ce29fb7ff3600b68896a483bc3b34ba483cb94d46411ec51f91716"
        },
        "downloads": -1,
        "filename": "pyramid_tasks-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d8cd11f9b96448ab1bd5bda138abde8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16278,
        "upload_time": "2021-09-16T21:15:43",
        "upload_time_iso_8601": "2021-09-16T21:15:43.141458Z",
        "url": "https://files.pythonhosted.org/packages/74/0c/9535677d230b67ba64bc346d9309b45ced99544fd3c62409d6a861afbb7c/pyramid_tasks-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b68ace0109f50c93d4c81ea2fb71c784666d09e3bcad7aa2abfe90e1e250d349",
          "md5": "1a36796b00e1439c92c4e6fc7fa49b0c",
          "sha256": "6888ad8ec018216d207cc37eb60aa48177dffe84530d5f5af592a475a5e3cc21"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a36796b00e1439c92c4e6fc7fa49b0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16849,
        "upload_time": "2021-09-16T21:15:44",
        "upload_time_iso_8601": "2021-09-16T21:15:44.422421Z",
        "url": "https://files.pythonhosted.org/packages/b6/8a/ce0109f50c93d4c81ea2fb71c784666d09e3bcad7aa2abfe90e1e250d349/pyramid-tasks-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4cf33d9ee77afbb012554f880db49f1068b4ee449b4152555460962c21cb07d",
          "md5": "d86fb1b188ce2a264f27f92889c1998d",
          "sha256": "cc7f9d2a11e317d885e9a37291a594c8f139c618772d0328fa6b8ec7828f762c"
        },
        "downloads": -1,
        "filename": "pyramid_tasks-0.3.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d86fb1b188ce2a264f27f92889c1998d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16292,
        "upload_time": "2021-05-31T20:59:00",
        "upload_time_iso_8601": "2021-05-31T20:59:00.954279Z",
        "url": "https://files.pythonhosted.org/packages/a4/cf/33d9ee77afbb012554f880db49f1068b4ee449b4152555460962c21cb07d/pyramid_tasks-0.3.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c16f45af117cfce81539b8549233d0b020605ea6014cf3566012c524c869b072",
          "md5": "5d09c926370603b2ab81880c0bcfbd96",
          "sha256": "498da9c08a2256f3413d25a924f7ae2ebf874e2561121dc29bb019d5591167fc"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.3.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "5d09c926370603b2ab81880c0bcfbd96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16845,
        "upload_time": "2021-05-31T20:59:02",
        "upload_time_iso_8601": "2021-05-31T20:59:02.062787Z",
        "url": "https://files.pythonhosted.org/packages/c1/6f/45af117cfce81539b8549233d0b020605ea6014cf3566012c524c869b072/pyramid-tasks-0.3.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "691272625ffeaed11ebe1fcf7440f942b6d08ee39d31d954d07caa07737242ca",
          "md5": "e80b11d485b6eea64b44020b4cfb088b",
          "sha256": "fb6c99b5e039c507489aaf57301c540e38fc91a8121e38b4e40e32dbf5dc69ee"
        },
        "downloads": -1,
        "filename": "pyramid_tasks-0.3.0a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e80b11d485b6eea64b44020b4cfb088b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16288,
        "upload_time": "2021-06-01T00:27:40",
        "upload_time_iso_8601": "2021-06-01T00:27:40.398951Z",
        "url": "https://files.pythonhosted.org/packages/69/12/72625ffeaed11ebe1fcf7440f942b6d08ee39d31d954d07caa07737242ca/pyramid_tasks-0.3.0a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2750ba506afb8d315b36def1693c8e6b9ac61973bf59643c0301b04e77b80c2c",
          "md5": "ad6d529f5d8e32a281bec584bd6807c4",
          "sha256": "ff39fea5a42a8be28675ac126341f11bdb49ec026659a5697ea747d62ff6201c"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.3.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "ad6d529f5d8e32a281bec584bd6807c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16854,
        "upload_time": "2021-06-01T00:27:41",
        "upload_time_iso_8601": "2021-06-01T00:27:41.639988Z",
        "url": "https://files.pythonhosted.org/packages/27/50/ba506afb8d315b36def1693c8e6b9ac61973bf59643c0301b04e77b80c2c/pyramid-tasks-0.3.0a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2533c9510a14c50c8cd2bd629ad3af83501bce6509545c0371d96078ebe24f0",
          "md5": "5f3bef10cba60a4794a0a326dca8edf5",
          "sha256": "aabaf1089c63bf4da3d55266e2845d07407e76ab22ed83628c5da5f8da2009d7"
        },
        "downloads": -1,
        "filename": "pyramid_tasks-0.3.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f3bef10cba60a4794a0a326dca8edf5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16305,
        "upload_time": "2021-09-15T16:31:49",
        "upload_time_iso_8601": "2021-09-15T16:31:49.186783Z",
        "url": "https://files.pythonhosted.org/packages/f2/53/3c9510a14c50c8cd2bd629ad3af83501bce6509545c0371d96078ebe24f0/pyramid_tasks-0.3.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9aa66ce2925c01c91df4a0941fc98a56de298197c5ae7ee920bde9e957546baf",
          "md5": "8a9b87ac098630839dabff46eed24161",
          "sha256": "d6ad7c2004816ea01ce65aacdc288f4edfde140118992af2dfbb9095c2e2a37f"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.3.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "8a9b87ac098630839dabff46eed24161",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16880,
        "upload_time": "2021-09-15T16:31:50",
        "upload_time_iso_8601": "2021-09-15T16:31:50.858779Z",
        "url": "https://files.pythonhosted.org/packages/9a/a6/6ce2925c01c91df4a0941fc98a56de298197c5ae7ee920bde9e957546baf/pyramid-tasks-0.3.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c50491c7358593c927258a5e8763c5e95c49f2b2982143c71fc08e59b0e80940",
          "md5": "41062b1b0fdf1acfcbf977a28267ea00",
          "sha256": "29bb0fc0732b22b4f625b09ec18a0a79f6b34067185847895d8ae9518495f1db"
        },
        "downloads": -1,
        "filename": "pyramid_tasks-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41062b1b0fdf1acfcbf977a28267ea00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16902,
        "upload_time": "2022-06-02T17:53:36",
        "upload_time_iso_8601": "2022-06-02T17:53:36.840436Z",
        "url": "https://files.pythonhosted.org/packages/c5/04/91c7358593c927258a5e8763c5e95c49f2b2982143c71fc08e59b0e80940/pyramid_tasks-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10d60cc417eae7d25b30e6211aa19c717f85298f5e3a6a5de01c99ba33bc63ef",
          "md5": "2c7fcf8f15a254e8d2895b6cfd14f785",
          "sha256": "ea2d5214f5380fd3ca8fe13b8f6fdd2c72fbb84a230997439a4242a3aded6ab4"
        },
        "downloads": -1,
        "filename": "pyramid-tasks-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2c7fcf8f15a254e8d2895b6cfd14f785",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17808,
        "upload_time": "2022-06-02T17:53:38",
        "upload_time_iso_8601": "2022-06-02T17:53:38.132907Z",
        "url": "https://files.pythonhosted.org/packages/10/d6/0cc417eae7d25b30e6211aa19c717f85298f5e3a6a5de01c99ba33bc63ef/pyramid-tasks-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c50491c7358593c927258a5e8763c5e95c49f2b2982143c71fc08e59b0e80940",
        "md5": "41062b1b0fdf1acfcbf977a28267ea00",
        "sha256": "29bb0fc0732b22b4f625b09ec18a0a79f6b34067185847895d8ae9518495f1db"
      },
      "downloads": -1,
      "filename": "pyramid_tasks-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "41062b1b0fdf1acfcbf977a28267ea00",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16902,
      "upload_time": "2022-06-02T17:53:36",
      "upload_time_iso_8601": "2022-06-02T17:53:36.840436Z",
      "url": "https://files.pythonhosted.org/packages/c5/04/91c7358593c927258a5e8763c5e95c49f2b2982143c71fc08e59b0e80940/pyramid_tasks-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10d60cc417eae7d25b30e6211aa19c717f85298f5e3a6a5de01c99ba33bc63ef",
        "md5": "2c7fcf8f15a254e8d2895b6cfd14f785",
        "sha256": "ea2d5214f5380fd3ca8fe13b8f6fdd2c72fbb84a230997439a4242a3aded6ab4"
      },
      "downloads": -1,
      "filename": "pyramid-tasks-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2c7fcf8f15a254e8d2895b6cfd14f785",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17808,
      "upload_time": "2022-06-02T17:53:38",
      "upload_time_iso_8601": "2022-06-02T17:53:38.132907Z",
      "url": "https://files.pythonhosted.org/packages/10/d6/0cc417eae7d25b30e6211aa19c717f85298f5e3a6a5de01c99ba33bc63ef/pyramid-tasks-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}