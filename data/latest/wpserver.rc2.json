{
  "info": {
    "author": "Christohper Schmidt",
    "author_email": "crschmidt@crschmidt.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "====================\n webprocessingserver \n====================\n\n---------------------------------------\nSimple Python geographic feature server\n---------------------------------------\n\n:Author: crschmidt@metacarta.com\n:Copyright: 2007 Christohper Schmidt.\n:Version: 1.0 \n:Manual group: GIS Utilities\n\nDESCRIPTION\n===========\nWebProcessingServer is a simple Python-based geographic feature server. It\nallows you to transform geographic vector features via a number of different\nprocessing backends.\n\nWebProcessingServer will run under Python CGI, mod_python, or as a standalone\nserver. \n\nWebProcessingServer is released under a license similar to the BSD license.\n\nRUNNING UNDER CGI\n=================\n\n* Extract the code to some web directory (e.g. in /var/www).\n* Permit CGI execution in the WebProcessingServer directory.\n  For example, if WebProcessingServer is to be run with Apache, the\n  following must be added in your Apache configuration,   \n  where /var/www/webprocessingserver is the directory resulting from\n  the code extraction. \n  \n  ::\n\n    <Directory /var/www/webprocessingserver>\n         AddHandler cgi-script .cgi\n         Options +ExecCGI\n    </Directory>\n\nPython Prerequisites\n--------------------\nIn order to use WebProcessingServer, you must have the simplejson module\ninstalled. If you do not, you can add it by doing the following:\n\n  $ wget http://cheeseshop.python.org/packages/source/s/simplejson/simplejson-1.7.1.tar.gz\n  $ tar -zvxf simplejson-1.7.1.tar.gz\n  $ cp -r simplejson-1.7.1/simplejson /var/www/webprocessingserver\n\nNote that these instructions are for Linux systems: the end goal is to extract\nthe simplejson directory from the distribution and put it in the root of your\nWebProcessingServer install.\n\nNon-standard Python Location\n----------------------------\nIf your Python is not at /usr/bin/python on your system, you will need to\nchange the first line of wps.cgi to reference the location of\nyour Python binary. A common example is:\n\n  ::\n\n     #!/usr/local/bin/python\n\nUnder Apache, you might see an error message like:\n\n  ::\n\n    [Wed Mar 14 19:55:30 2007] [error] [client 127.0.0.1] (2)No such file or \n      directory: exec of '/www/wps.cgi' failed\n\nto indicate this problem.\n\nYou can typically locate where Python is installed on your system via the\ncommand 'which python'.\n\nWindows users: If you are using Windows, you should change the first line \nof wps.cgi to read:\n\n  ::\n\n    #!C:/Python/python.exe -u\n\nC:/Python should match the location Python is installed under on your \nsystem. In Python 2.5, this location is C:/Python25 by default.  \n\nRUNNING UNDER MOD_PYTHON\n========================\n\n* Extract the code to some web directory (e.g. /var/www).\n* Add the following to your Apache configuration, under a <Directory> heading:\n  \n  ::\n  \n      AddHandler python-program .py\n      PythonPath sys.path+['/path/to/webprocessingserver']\n      PythonHandler WebProcessingServer.Server\n      PythonOption WebProcessingServerConfig /path/to/webprocessingserver.cfg\n  \n* An example might look like:\n\n  ::\n  \n    <Directory /var/www/webprocessingserver/>\n       AddHandler python-program .py\n       PythonPath sys.path+['/var/www/webprocessingserver']\n       PythonHandler WebProcessingServer.Server \n       PythonOption WebProcessingServerConfig\n                    /var/www/webprocessingserver/webprocessingserver.cfg\n    </Directory>\n  \n* In this example, /var/www/webprocessingserver is the directory resulting from\n  the code extraction. \n* Visit the URL described above, replacing wps.cgi with \n  webprocessingserver.py\n* If you see an empty GeoRSS file you have set up your configuration correctly.\n  Congrats!\n* Note that mod_python has not yet been well tested, and may not work well\n  for all data sources.\n\n \nRUNNING STANDALONE (UNDER WSGI)\n===============================\n\nWebProcessingServer comes with a standalone HTTP server which uses the WSGI\nhandler.  This implementation depends on *Python Paste*, which can be\ndownloaded from:\n  \n  http://cheeseshop.python.org/pypi/Paste\n\nFor versions of Python earlier than 2.5, you will also need to install \nwsgiref:\n\n  http://cheeseshop.python.org/pypi/wsgiref\n\nOnce you have all the prerequisites installed, simply run:\n\n  ::\n  \n    python wps_http_server.py\n\nThis will start a webserver listening on port 8080.\n\n\nRUNNING UNDER FASTCGI\n=====================\n\nWebProcessingServer comes with a fastcgi implementation. In order to use this \nimplementation, you will need to install flup, available from:\n  \n  http://trac.saddi.com/flup\n\nThis implementation also depends on Python Paste, which can be downloaded \nfrom:\n  \n  http://cheeseshop.python.org/pypi/Paste\n\nOnce you have done this, you can configure your fastcgi server to use\nwebprocessingserver.fcgi.\n\nConfiguring FastCGI is beyond the scope of this documentation.\n\nCONFIGURATION\n=============\nWebProcessingServer is configured by a config file, defaulting to\nwebprocessingserver.cfg. \n\nSEE ALSO\n========\n\nhttp://code.google.com/p/webprocessingserver/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://code.google.com/p/webprocessingserver/",
    "keywords": null,
    "license": "Clear BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "WPServer",
    "package_url": "https://pypi.org/project/WPServer/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/WPServer/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://code.google.com/p/webprocessingserver/"
    },
    "release_url": "https://pypi.org/project/WPServer/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "a web mapping transformation library",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 785972,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5ce309b789ed733c88b1fe02346c40fa69d4ea1155095567b368b72849a4e78",
          "md5": "50588fcfbce3230ee99d0e6ecc53187b",
          "sha256": "d51fbf2dafb5b039fea4b48e3f8823950bc2d453c005e30b256ec1563f4a12a2"
        },
        "downloads": -1,
        "filename": "WPServer-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "50588fcfbce3230ee99d0e6ecc53187b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29821,
        "upload_time": "2007-12-23T05:53:57",
        "upload_time_iso_8601": "2007-12-23T05:53:57Z",
        "url": "https://files.pythonhosted.org/packages/e5/ce/309b789ed733c88b1fe02346c40fa69d4ea1155095567b368b72849a4e78/WPServer-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": []
  },
  "urls": [],
  "vulnerabilities": []
}