{
  "info": {
    "author": "Drak Lowell",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<img src=\"https://raw.githubusercontent.com/draklowell/TSL294/main/header.png\">\n\nBased on [DCN](https://github.com/draklowell/DCNLibrary/)\n\n## Setup guide\n### Using PyPi\n#### Linux and MacOS\n```\npip3 install tsl294\n```\n#### Windows\n```\npip install tsl294\n```\n### Using github\n#### Linux and MacOS\n```\ngit clone https://github.com/draklowell/TSL294 && cd TSL294 && python3 setup.py install\n```\n#### Windows\nDownload client and in downloaded folder run\n```\npython setup.py install\n```\n### Dependencies\n1. dcn ( `2.0.0.4.1.2` )\n2. func-timeout ( `4.3.5` )\n## Info\n#### Privacy\nConnection between two nodes is wrapped by `TLSv1.2` ( without certificate verification ), also packets are encrypted with RSA.\n#### High-level protocols conflict\nTo avoid protocol conflicts, we recommend to use `protocol sign`, it is some bytes in begin of packet, that indicate what protocol is using\n#### License\n[Apache License 2.0](LICENSE)\n## Using guide\n#### Packet format\n```\n18 BYTES - DCN Header\n844 BYTES - TSL294 Header:\n    294 BYTES - Source key ( Can be only RSA key )\n    294 BYTES - Destination key ( Can be RSA key or zero bytes - broadcast to all clients)\n    256 BYTES - Signature of encrypted content \n64676 BYTES - Encrypted ( if destination is RSA key ) content\n```\nMax size of content in packet - `64676` ( `pow(2, 16) - 16 - 844` ).\n\n#### Create client\nThere are three arguments - `key`, `friendly_hosts` and `limit_queue`\n\n`key` - client RSA key ( only `2048 bits` size )\n\n`friendly_hosts` - known nodes in format ( example: `(\"1.2.3.4\", 300)` ), also it request official nodes, from official tracker\n\n`limit_queue` - max size of queue ( `-1` - unlimited ), recommended `65536`\n```python\nimport tsl294\nclient = tsl294.client.Client(key = tsl294.crypto.key.Key.random(2048), friendly_hosts = [], limit_queue = -1)\n```\n#### Send packet\nAfter generating packet, client sends it to user with known key. After that, it returns the count of successfully sent copies of the packet and packet hash ( as bytes )\n```python\nimport base64\n\n# Load key from file\nwith open(\"target.pem\", \"rb\") as file:\n    key = tsl294.crypto.key.Key.importKey(file.read())\n\n# Send packet\ncount, hash = client.send(b\"Hello, world!\", key)\nprint(f\"Sended copies of packet: {count}\")\nprint(f\"Packet hash ( base64 encoded ): {base64.b64encode(hash).decode()}\")\n```\nOutput:\n```\nSended copies of packet: 1\nPacket hash ( base64 encoded ): L/78pQALheezMsoc9BTxfheAcNIw7fPQtYHsDBjwDSU=\n```\n#### Receive next packet\nWhen the client gets the new massage from the server, client adds the packet to the queue. When we call `client.accept()`, we get the first element of the queue, and then remove it ( we can limit the queue, while initializing client )\n```python\nimport base64\n\ncontent, key, hash = client.accept() # or client.next() or next(client)\nprint(f\"Content of packet: {content.decode()}\")\nprint(f\"Source of packet: {base64.b64encode(key.getHash()).decode()}\")\nprint(f\"Packet hash ( base64 encoded ): {base64.b64encode(hash).decode()}\")\n```\nOutput:\n```\nContent of packet: Hello, world!\nSource of packet: MEtdj9sSPdM0g00Hk6q1Jjvx72f53Gd4uIkMYWN4Khk=\nPacket hash ( base64 encoded ): L/78pQALheezMsoc9BTxfheAcNIw7fPQtYHsDBjwDSU=\n```\n\n#### Close client\nYou need close client in end of work\n```python\nclient.close()\n```\n\n## Simple app\nNow, we can create a simple app using `DCN-TSLv294`, which allows to convert user's message to uppercase. When server gets new packet from the user, it converts packet content to uppercase and sends it back to the client. Example:\nUser sends `Hello, world!`\nServer returns `HELLO, WORLD!`\n#### Server side\n```python\nfrom tsl294.client import Client\nfrom tsl294 import Key\n\nwith open(\"private.pem\", \"rb\") as file:\n    key = Key.importKey(file.read())\n\nclient = Client(key)\n\ntry:\n    while True:\n        data, key, hash = client.accept()\n        client.send(data.upper(), key)\nexcept KeyboardInterrupt:\n    pass\nclient.close()\n```\nTo close server, just press `Ctrl + C`\n#### Client side\n```python\nfrom tsl294.client import Client\nfrom tsl294 import Key\n\nwith open(\"public.pem\", \"rb\") as file:\n    server_key = Key.importKey(file.read())\n\nmessage = input().encode(\"utf-8\")\n\nclient = Client()\ntry:\n    client.send(message, server_key)\n    data, key, hash = client.accept()\n    while key != server_key.getPublic():\n        data, key, hash = client.accept()\n    \n    print(data.decode(\"utf-8\"))\nexcept KeyboardInterrupt:\n    pass\nclient.close()\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/draklowell/TSL294",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tsl294",
    "package_url": "https://pypi.org/project/tsl294/",
    "platform": "",
    "project_url": "https://pypi.org/project/tsl294/",
    "project_urls": {
      "Homepage": "https://github.com/draklowell/TSL294"
    },
    "release_url": "https://pypi.org/project/tsl294/0.9.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Transport secure layer version 294",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9275023,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "326f6b70346e629375ae3cd3fe386cb8ea14a17ae69b34be6498ec1b29306522",
          "md5": "c90bbf6223963a538d882feba7a15d7d",
          "sha256": "34fdd24d12cba054f1a094f7124d7596ac6507adb43544a4a820934d7edb5422"
        },
        "downloads": -1,
        "filename": "tsl294-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c90bbf6223963a538d882feba7a15d7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7516,
        "upload_time": "2021-01-30T21:19:01",
        "upload_time_iso_8601": "2021-01-30T21:19:01.610752Z",
        "url": "https://files.pythonhosted.org/packages/32/6f/6b70346e629375ae3cd3fe386cb8ea14a17ae69b34be6498ec1b29306522/tsl294-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "326f6b70346e629375ae3cd3fe386cb8ea14a17ae69b34be6498ec1b29306522",
        "md5": "c90bbf6223963a538d882feba7a15d7d",
        "sha256": "34fdd24d12cba054f1a094f7124d7596ac6507adb43544a4a820934d7edb5422"
      },
      "downloads": -1,
      "filename": "tsl294-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c90bbf6223963a538d882feba7a15d7d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7516,
      "upload_time": "2021-01-30T21:19:01",
      "upload_time_iso_8601": "2021-01-30T21:19:01.610752Z",
      "url": "https://files.pythonhosted.org/packages/32/6f/6b70346e629375ae3cd3fe386cb8ea14a17ae69b34be6498ec1b29306522/tsl294-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}