{
  "info": {
    "author": "seawind2012",
    "author_email": "439800108@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# zwpygame\n\n#### 介绍\npygame游戏编程的草蟒汉化版本,带来强大易懂的中文游戏编程体验.\n\n\n\n#### 安装方法\n\n`python -m pip install -U grasspy-pygame\n\n#### 使用说明\n```python\n\n#童年的回忆：掌上赛车游戏\n\n从 随机数 导入 随机整数\n导入 游戏派\n\n游戏派.初始化()\n游戏派.显示.设置标题栏(\"掌上赛车\")\n屏幕尺寸 = (320, 400)\n黑色 = (0, 0, 0)\n白色 = (250, 250, 250)\n蓝色 = (0, 255, 255)\n红色 = (255, 0, 0)\n绿色 = (0, 255, 0)\n橙色 = (255, 128, 64)\n暗绿色 = (0, 64, 0)\n网格宽度 = 20\n网格高度 = 20\n\n#   初始化游戏状态：1/游戏开始界面 2/游戏进行中 3/游戏结束\n状态 = 1\n障碍物列表 = []\n斑马线列表 = []\n得分 = 0\n\n加速度 = 4 \n时钟 = 游戏派.时间.时钟类()\n屏幕 = 游戏派.显示.设置模式(屏幕尺寸, 0, 32)\n类 障碍物类:\n\n    套路 __初始化__(自身):\n\n        自身.通道_x = 随机整数(0,屏幕尺寸[0] + 1)\n        自身.y = 0\n        自身.通道宽度 = 随机整数(4,10) * 网格宽度\n        自身.间距 = 随机整数(10,10) * 网格高度\n        自身.高度 = 随机整数(5,20) / 10 * 网格高度\n        自身.右位置 = (0,0)\n        自身.左位置 = (0,0)\n        自身.颜色 = 橙色\n        自身.底部y = 自身.y + 自身.高度\n\n    套路 下沉(自身):\n        自身.y += 1 * 加速度\n\n    套路 绘制(自身):\n\n        如果 自身.通道_x == 0:\n            自身.右位置 = (自身.通道宽度,自身.y)\n            游戏派.绘画.矩形(屏幕,自身.颜色,游戏派.区块类(自身.右位置,(屏幕尺寸[0]-自身.通道宽度,自身.高度)))\n        或如 自身.通道_x == 屏幕尺寸[0]:\n            自身.左位置 = (0,自身.y)\n            游戏派.绘画.矩形(屏幕,自身.颜色,游戏派.区块类(自身.左位置,(屏幕尺寸[0]-自身.通道宽度,自身.高度)))\n        或如 自身.通道_x + 自身.通道宽度 > 屏幕尺寸[0]:\n            自身.左位置 = (0,自身.y)\n            自身.右位置 = (自身.通道_x,自身.y)\n            游戏派.绘画.矩形(屏幕,自身.颜色,游戏派.区块类(自身.左位置,(自身.通道_x-自身.通道宽度,自身.高度)))\n            游戏派.绘画.矩形(屏幕,自身.颜色,游戏派.区块类(自身.右位置,(屏幕尺寸[0]-自身.通道宽度,自身.高度)))\n        否则:\n            自身.左位置 = (0,自身.y)\n            自身.右位置 = (自身.通道_x + 自身.通道宽度,自身.y)\n            游戏派.绘画.矩形(屏幕,自身.颜色,游戏派.区块类(自身.左位置,(自身.通道_x,自身.高度)))\n            游戏派.绘画.矩形(屏幕,自身.颜色,游戏派.区块类(自身.右位置,(屏幕尺寸[0]-自身.右位置[0],自身.高度)))     \n\n    套路 更新(自身):\n        全局 得分,状态\n        自身.下沉()\n        如果 自身.y == 自身.间距:\n            障碍物列表.追加(障碍物类())\n        如果 自身.y > 屏幕尺寸[1]:\n            删 障碍物列表[0]\n            得分 += 1\n        底部y = 自身.y + 自身.高度\n\n        汽车位置x = 汽车.x\n        汽车位置y = 汽车.y\n        汽车宽度 = 汽车.宽度\n\n        如果 汽车位置y <= 底部y <= 汽车位置y+3*网格高度:\n\n            如果 自身.通道_x == 0:\n                如果 自身.通道_x<= 汽车位置x <= 自身.通道_x+自身.通道宽度-汽车宽度:\n                    无操作\n                否则:\n                    状态 = 3\n            或如 自身.通道_x == 屏幕尺寸[0]:\n                如果 屏幕尺寸[0]-自身.通道宽度<=汽车位置x<=屏幕尺寸[0]-汽车宽度:\n                    无操作\n                否则:\n                    状态 = 3\n            或如 自身.通道_x + 自身.通道宽度 > 320:\n                如果 自身.通道_x - 自身.通道宽度<= 汽车位置x <= 自身.通道_x-汽车宽度:\n                    无操作\n                否则:\n                    状态 = 3\n            否则:\n                如果 自身.通道_x <= 汽车位置x <= 自身.通道_x + 自身.通道宽度 - 汽车宽度:\n                    无操作\n                否则:\n                    状态 = 3\n\n障碍物列表.追加(障碍物类())\n\n类 汽车类():\n    套路 __初始化__(自身):\n        自身.宽度 = 网格宽度 * 3\n        自身.高度 = 网格高度 * 4\n        自身.x = 屏幕尺寸[0] / 2 -(网格宽度 + 网格宽度 / 2)\n        自身.y = 屏幕尺寸[1] - 网格高度 * 4\n        自身.速度 = 5\n        自身.颜色 = 绿色\n\n    套路 左移(自身):\n        自身.x -= 2 * 自身.速度\n        自身.x = 最大值(0,自身.x)\n\n    套路 右移(自身):\n        自身.x += 2* 自身.速度\n        自身.x = 最小值(屏幕尺寸[0] - 网格宽度 * 3,自身.x) \n\n    套路 更新位置(自身):\n        点1 = (自身.x+网格宽度,自身.y)\n        点2 = (自身.x,网格高度+自身.y)\n        点3 = (自身.x+网格宽度,自身.y+网格高度)\n        点4 = (自身.x+网格宽度*2,自身.y+网格高度)\n        点5 = (自身.x+网格宽度,自身.y+网格高度*2)\n        点6 = (自身.x,自身.y+网格高度*3)\n        点7 = (自身.x+网格宽度,自身.y+网格高度*3)\n        点8 = (自身.x+网格宽度*2,自身.y+网格高度*3)\n        点列表 = [点1,点2,点3,点4,点5,点6,点7,点8]\n        返回 点列表\n    \n    套路 绘制(自身,点列表):\n        取 点 于 点列表:\n            游戏派.绘画.矩形(屏幕,自身.颜色,游戏派.区块类(点,(网格宽度,网格高度)))\n\n汽车 = 汽车类()\n\n类 斑马线类():\n\n    套路 __初始化__(自身):\n\n        自身.高度 = 5 * 网格高度\n        自身.宽度 = 3 * 网格高度\n        自身.x,自身.y = (0,0)\n        自身.中间区块x = 屏幕尺寸[0]/2 - 网格宽度/2\n        自身.中间区块y = 自身.y + (网格高度+网格高度/2) \n    \n    套路 绘制(自身):\n        左虚线x = 屏幕尺寸[0]/2 - (网格宽度+网格宽度/2) \n        右虚线x = 屏幕尺寸[0]/2 + (网格宽度+网格宽度/2) \n        虚线高 = 自身.y + 5 * 网格高度\n\n        取 i 于 范围(自身.y,虚线高+1,网格高度 * 2):\n            游戏派.绘画.直线(屏幕,白色,(左虚线x,i),(左虚线x,i+网格高度))\n            游戏派.绘画.直线(屏幕,白色,(右虚线x,i),(右虚线x,i+网格高度))\n\n        中间区块宽度 = 网格宽度\n        中间区块高度 = 网格高度 * 2\n        游戏派.绘画.矩形(屏幕,白色,游戏派.区块类((自身.中间区块x,自身.中间区块y),(中间区块宽度,中间区块高度)))\n\n    套路 更新(自身): \n        自身.y += 1* 加速度\n        自身.中间区块y = 自身.y + (网格高度+网格高度/2)\n        如果 自身.y == 自身.高度:\n            斑马线列表.追加(斑马线类())\n        如果 自身.y > 屏幕尺寸[1]:\n            删 斑马线列表[0]\n\n斑马线列表.追加(斑马线类())\n\n类 游戏主体类():\n\n    套路 检测退出():\n        全局 状态,得分,汽车,障碍物列表\n        取 事件 于 游戏派.事件.获取():\n            如果 事件.类型 == 游戏派.离开:\n                游戏派.卸载()\n                游戏派.退出()\n            如果 事件.类型 == 游戏派.KEYDOWN:\n                如果 事件.键 == 游戏派.K_ESCAPE:\n                    游戏派.卸载()\n                    游戏派.退出()\n                或如 事件.键 == 游戏派.K_SPACE:\n                    如果 状态 == 1:\n                        状态 = 2\n                    或如 状态 == 3:\n                        得分 = 0\n                        障碍物列表 =[]\n                        汽车 = 汽车类()\n                        障碍物列表.追加(障碍物类())\n                        状态 = 2\n\n    套路 开始菜单():\n        字体 = 游戏派.字体.系统字体(\"STLITI\",25)\n        字体表层 = 字体.描绘(\"空格开始,a键向左,d键向右\",真,蓝色)\n        屏幕.贴图(字体表层,(屏幕尺寸[0]/2-字体表层.获取宽度()/2,屏幕尺寸[1]/2-字体表层.获取高度()/2))\n    \n    套路 结束菜单():\n        得分字体 = 游戏派.字体.系统字体(\"STLITI\",30)\n        重启字体 = 游戏派.字体.系统字体(\"STLITI\",30,5)\n        得分字体表层 = 得分字体.描绘(\"成绩:%d\" % 得分, 真, 红色)\n        重启字体表层 = 重启字体.描绘(u\"重新开始\", 真, 红色)\n\n        区块宽度 = 最大值(得分字体表层.获取宽度(),重启字体表层.获取宽度())\n        区块高度 = 得分字体表层.获取高度()+重启字体表层.获取高度()\n\n        区块x = 屏幕尺寸[0]/2-区块宽度 /2\n        区块y = 屏幕尺寸[1]/2-区块高度 /2\n\n        游戏派.绘画.矩形(屏幕,绿色,游戏派.区块类((区块x,区块y),(区块宽度,区块高度)))\n        屏幕.贴图(得分字体表层,(屏幕尺寸[0]/2-得分字体表层.获取宽度()/2,区块y))\n        屏幕.贴图(重启字体表层,(屏幕尺寸[0]/2-重启字体表层.获取宽度()/2,区块y+得分字体表层.获取高度()))\n\n    只要 真:\n        检测退出()\n\n        如果 状态 == 1:\n            开始菜单()\n        如果 状态 == 2:\n            汽车点列表 = 汽车.更新位置()\n            按键 = 游戏派.键盘.获取按键()\n            如果 按键[4]:\n                汽车.左移()\n                汽车点列表 = 汽车.更新位置()\n            或如 按键[7]:\n                汽车.右移()\n                汽车点列表 = 汽车.更新位置()\n \n            屏幕.填充(黑色)\n\n            取 斑马线 于 斑马线列表:\n                斑马线.更新()\n                斑马线.绘制()\n                \n            取 障碍物 于 障碍物列表:\n                障碍物.更新()\n                障碍物.绘制()\n\n            汽车.绘制(汽车点列表)\n        如果 状态 == 3:\n            结束菜单()\n\n        时钟.设置帧率(60)\n        游戏派.显示.更新()\n\n游戏主体类()\n\n\n```\n![avatar](1.png)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/a439800108/zwpygame",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grasspy-pygame",
    "package_url": "https://pypi.org/project/grasspy-pygame/",
    "platform": null,
    "project_url": "https://pypi.org/project/grasspy-pygame/",
    "project_urls": {
      "Bug Tracker": "https://gitee.com/a439800108/zwpygame/issues",
      "Homepage": "https://gitee.com/a439800108/zwpygame"
    },
    "release_url": "https://pypi.org/project/grasspy-pygame/0.2.212/",
    "requires_dist": [
      "pygame"
    ],
    "requires_python": ">=3.10",
    "summary": "Chinsese version of pygame for grasspy",
    "version": "0.2.212",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14181934,
  "releases": {
    "0.2.212": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "572cadcaca4fa54c9b44f811f3aeabcd656117c7d60de248914a3a26afe1fdd4",
          "md5": "d6ad82d93a1d7f44fa41ba623d6b82e6",
          "sha256": "c94faf2ef84ff80aca47af8052ac54248f10a030700a9584429a60006f27a131"
        },
        "downloads": -1,
        "filename": "grasspy_pygame-0.2.212-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6ad82d93a1d7f44fa41ba623d6b82e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 30042,
        "upload_time": "2022-06-20T01:45:43",
        "upload_time_iso_8601": "2022-06-20T01:45:43.731749Z",
        "url": "https://files.pythonhosted.org/packages/57/2c/adcaca4fa54c9b44f811f3aeabcd656117c7d60de248914a3a26afe1fdd4/grasspy_pygame-0.2.212-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d76c10a743304fc7ea51cdf185d3a32c849c107509a8eac4a47410c9665e4a74",
          "md5": "7a6cde0929eb5aabcaa67d6eed55c482",
          "sha256": "73b5f275e4116c6d855969f9f4879bb18c83d70636b1c69df32e6461a4bb01a0"
        },
        "downloads": -1,
        "filename": "grasspy-pygame-0.2.212.tar.gz",
        "has_sig": false,
        "md5_digest": "7a6cde0929eb5aabcaa67d6eed55c482",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 25339,
        "upload_time": "2022-06-20T01:45:46",
        "upload_time_iso_8601": "2022-06-20T01:45:46.954756Z",
        "url": "https://files.pythonhosted.org/packages/d7/6c/10a743304fc7ea51cdf185d3a32c849c107509a8eac4a47410c9665e4a74/grasspy-pygame-0.2.212.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "572cadcaca4fa54c9b44f811f3aeabcd656117c7d60de248914a3a26afe1fdd4",
        "md5": "d6ad82d93a1d7f44fa41ba623d6b82e6",
        "sha256": "c94faf2ef84ff80aca47af8052ac54248f10a030700a9584429a60006f27a131"
      },
      "downloads": -1,
      "filename": "grasspy_pygame-0.2.212-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d6ad82d93a1d7f44fa41ba623d6b82e6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 30042,
      "upload_time": "2022-06-20T01:45:43",
      "upload_time_iso_8601": "2022-06-20T01:45:43.731749Z",
      "url": "https://files.pythonhosted.org/packages/57/2c/adcaca4fa54c9b44f811f3aeabcd656117c7d60de248914a3a26afe1fdd4/grasspy_pygame-0.2.212-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d76c10a743304fc7ea51cdf185d3a32c849c107509a8eac4a47410c9665e4a74",
        "md5": "7a6cde0929eb5aabcaa67d6eed55c482",
        "sha256": "73b5f275e4116c6d855969f9f4879bb18c83d70636b1c69df32e6461a4bb01a0"
      },
      "downloads": -1,
      "filename": "grasspy-pygame-0.2.212.tar.gz",
      "has_sig": false,
      "md5_digest": "7a6cde0929eb5aabcaa67d6eed55c482",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 25339,
      "upload_time": "2022-06-20T01:45:46",
      "upload_time_iso_8601": "2022-06-20T01:45:46.954756Z",
      "url": "https://files.pythonhosted.org/packages/d7/6c/10a743304fc7ea51cdf185d3a32c849c107509a8eac4a47410c9665e4a74/grasspy-pygame-0.2.212.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}