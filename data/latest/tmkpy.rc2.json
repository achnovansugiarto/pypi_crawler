{
  "info": {
    "author": "Scott Hale",
    "author_email": "scott@meedan.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# SWIG Python Bindings for TMK Video Hashing\n\nTMK video hashing is designed to identify whether two video files are duplicates (possibly with different formats, etc.).\nIt measures the similarity of videos in two ways. First a simple cosine distance on vectors of 256 dimensions are used to find possibly close videos.\nThe documentation and whitepaper suggest a good threshold is 0.7.  Then a temporal match kernel (tmk) is used to compute a more accurate similarity measure.\nPlease see the original documentation at: https://github.com/facebook/ThreatExchange/\n\nThis repository provide Python bindings to make it easier to use TMK within Python.\n\n# Installation \n\n## tl;dr\n```\ngit clone https://github.com/meedan/tmkpy\ncd tmkpy\npython setup.py build\npython setup.py install\n\n```\n\n## Longer version\nEnsure swig is installed (`sudo apt install swig`) and then build this extension.\n\n`setup.py` will first build the TMK C++ code per the instructions at tmk/cpp/ (namely run `make` in that directory). This will build a file called `libtmk.a`\n\nIt will then run swig and generate `tmkpy.py` and `tmkpy_wrap.cpp`. It will then compile everything.\nTo install system wide, run `python setup.py install`\n\n# Usage\n\n\n```\nimport tmkpy\n\n#Hash a video\nvid=tmkpy.hashVideo(\"test/chair-19-sd-bar.mp4\",\"/usr/bin/ffmpeg\")\n\n#Write the hash to a file (second argument is a string used in error messages to identify the program and can be anything)\nvid.writeToOutputFile(\"output.tmk\",\"anything_here\")\n\n#Get the 256-dimensional vector that is used to compute level-1 scores. Level-1 scores are the cosine similarity of these vectors.\nl1features=vid.getPureAverageFeature()\n\n#Compute level-2 scores against other tmk files on disk\nimport glob\nhaystack=[f for f in glob.glob(\"test/*.tmk\")]\nscores=tmkpy.query(vid,haystack,1)\nscores=[(x,y) for x,y in zip(haystack,scores)]\nprint(scores)\n```\n\ntmkpy.query(needle,haystack,threads) expects needle to an actual TMK object or the name of a tmkfile. Haystack is a list of tmk filenames. The function computes all level-2 scores and returns them in a list equal to the length of, and in the same order as, haystack.  It does not compute level-1 scores: it just computes all level-2 scores for the files in haystack. If a file is invalid, the score will be -1. There is no need to filter invalid / missing filenames. \n\n# Error handling\n\n`tmkpy.query` generally sollows errors quietly if there is a missing or invlaid filename in haystack. The one excpetion is if you are passing in a string for the needle and a file with that string name does not exist. In this case, `tmkpy.query` will throw an invalid_argument exception. This is raised in Python as a `RuntimeError` and can be handle in the normal Python way. E.g.,\n\n```\ntry:\n\tscores=tmkpy.query(\"invalid-missing-file.tmk\",[\"hs1\",\"hs2\"],1)\nexcept RuntimeError as e:\n\tprint(e)\n```\n\nGenerates\n```\nfopen: No such file or directory\ntmkpy: could not open \"invalid-missing-file.tmk\" for read.\ntmkpy: failed to read needle \"invalid-missing-file.tmk\".\nFailed to read needle from supplied filename\n```\nThe first three lines are written to standard error in C++. The last line is the result of `print(e)` in Python",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/meedan/tmkpy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tmkpy",
    "package_url": "https://pypi.org/project/tmkpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/tmkpy/",
    "project_urls": {
      "Homepage": "https://github.com/meedan/tmkpy"
    },
    "release_url": "https://pypi.org/project/tmkpy/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python bindings for the TMK video similarity library",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11014520,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd95201303ab45f57f3372c92fdd7468b0122f63f6069c08bbf5d68b164faa24",
          "md5": "3f9b2eb38afbff679f3b35a8293c6862",
          "sha256": "b7cb870ade4d73bbe70ee4ce6af0ac8a15a2c3d42d96e936cfca5659cfb9115f"
        },
        "downloads": -1,
        "filename": "tmkpy-0.1-py3.6-linux-x86_64.egg",
        "has_sig": false,
        "md5_digest": "3f9b2eb38afbff679f3b35a8293c6862",
        "packagetype": "bdist_egg",
        "python_version": "0.1",
        "requires_python": null,
        "size": 772402,
        "upload_time": "2021-07-27T10:12:16",
        "upload_time_iso_8601": "2021-07-27T10:12:16.279385Z",
        "url": "https://files.pythonhosted.org/packages/bd/95/201303ab45f57f3372c92fdd7468b0122f63f6069c08bbf5d68b164faa24/tmkpy-0.1-py3.6-linux-x86_64.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31ce919607add418050a7d55cdfdd2aa49606e9022d1451daa87ccc914957521",
          "md5": "0661c9e73d4bd693940d1c1b9c866f66",
          "sha256": "8fb6e2c8fa25ba332b266fd174b894c230db9e0fe596d0d968d64d433d3b9928"
        },
        "downloads": -1,
        "filename": "tmkpy-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0661c9e73d4bd693940d1c1b9c866f66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2789760,
        "upload_time": "2021-07-27T10:12:19",
        "upload_time_iso_8601": "2021-07-27T10:12:19.947153Z",
        "url": "https://files.pythonhosted.org/packages/31/ce/919607add418050a7d55cdfdd2aa49606e9022d1451daa87ccc914957521/tmkpy-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "401381d08d0c8af7555169e866226df46bc2b1d32aedf463a788e083603b155f",
          "md5": "986e040d392fe0382669c64d622d5c54",
          "sha256": "892075b981e00c6ec4f3b4ae65f9e9722a55c85fe2d67ef261f84536f2ca2e8d"
        },
        "downloads": -1,
        "filename": "tmkpy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "986e040d392fe0382669c64d622d5c54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2794651,
        "upload_time": "2021-07-27T10:29:26",
        "upload_time_iso_8601": "2021-07-27T10:29:26.726699Z",
        "url": "https://files.pythonhosted.org/packages/40/13/81d08d0c8af7555169e866226df46bc2b1d32aedf463a788e083603b155f/tmkpy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "401381d08d0c8af7555169e866226df46bc2b1d32aedf463a788e083603b155f",
        "md5": "986e040d392fe0382669c64d622d5c54",
        "sha256": "892075b981e00c6ec4f3b4ae65f9e9722a55c85fe2d67ef261f84536f2ca2e8d"
      },
      "downloads": -1,
      "filename": "tmkpy-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "986e040d392fe0382669c64d622d5c54",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2794651,
      "upload_time": "2021-07-27T10:29:26",
      "upload_time_iso_8601": "2021-07-27T10:29:26.726699Z",
      "url": "https://files.pythonhosted.org/packages/40/13/81d08d0c8af7555169e866226df46bc2b1d32aedf463a788e083603b155f/tmkpy-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}