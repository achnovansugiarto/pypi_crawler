{
  "info": {
    "author": "Sterling Paramore",
    "author_email": "gnilrets@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# dagrules\n\ndagrules is a tool that allows you to write your own dbt dag rules and check\nthat your dbt project is conforming to those rules.\n\n## Overview\n\nWhile the dbt community has established some excellent guidelines for\n[how to structure dbt\nprojects](https://discourse.getdbt.com/t/how-we-structure-our-dbt-projects/355),\nthose conventions are not automatically enforced.  Those\nconventions are simply guidelines, and each team may decide on a\nslightly different set of conventions that work best for their\nparticular set up.  dagrules was developed to allow you to write your\nown conventions in a simple `yaml` document, and have those\nconventions enforced via your CI system.\n\nTo use dagrules, all you need is a dbt project and a `dagrules.yml`\nfile located in the root of the dbt project (e.g.,\n`dbt/dagrules.yml`).  The yaml file should look like (for a more\ncomplete example, see [tests/dagrules.yml](test/dagrules.yml):\n\n````yaml\n---\nversion: '1'\nrules:\n  - name: The name of my rule\n    subject:\n       ... # How to select nodes to check that they satisfy the rules\n    must:\n       ... # Define the rules that must be followed\n  - name: Another one of my rules\n    ...\n````\n\n### Installation and running rules\n\ndagrules can be installed using pip:\n\n````bash\npip install dagrules\n````\n\nAnd then run `dagrules` with the `--check` argument from your dbt project root:\n\n````bash\ndagrules --check\n````\n\ndagrules assumes that it is being executed from the dbt project root and that there is\na `target/manifest.json` file already present (so the dbt project must be compiled\nany time the dag is changed before dagrules can be run).  These defaults can\nbe overridden by setting the `DBT_ROOT` and `DAGRULES_YAML` environment variable to\npoint to other locations.\n\n## Subjects\n\nFor every rule, a subject should be declared that defines how to\nselect nodes of the dbt dag to use for rule validation.  Omitting the\nsubject means that the rule will be applied to every dbt model.\ndagrules currently supports two ways to select subjects: 1) by node\ntype (source, snapshot, model) and 2) by tags.  For example, the\nfollow subject includes all models that are tagged \"staging\":\n\n````yaml\nrules:\n  - name: All staging models must ...\n    subject:\n      type: model\n      tags: staging\n    must:\n      ...\n````\n\n\n## Tag selection\n\nTag selection applies both to `subject` and `must` section of the\ndagrules yaml spec.  Tags can be defined several ways.\n\n**Single string** - Selecting with a single tag can be expressed as a simple string\n\n````yaml\ntags: staging\n````\n\n**List of tags: match any** - A list of tags can also be specified, and\ndagrules will match nodes with **any** of the tags in the list.  The\nexample below will match nodes having either `base` or `intermediate`\ntags.\n\n````yaml\ntags:\n  - base\n  - intermediate\n````\n\n**Include: match all with exclusions** - When you need to select nodes\nthat match **all** tags in a list, and possibly exclude nodes with\nsome tags as well, you can use include/exclude.  The example below\nwill select any nodes that have both \"staging\" and \"finance\" tags, but\nthat don't also have the `base` tag.\n\n````yaml\ntags:\n  include:\n    - staging\n    - finance\n  exclude:\n    - base\n````\n\nThe arguments to `include` and `exclude` can either be a list or single strings.\n\n\n**Combine any/all** - We can also combine **any** and **all** syntaxes\nat once.  The following will select all nodes that are either\n\"non-base staging\", \"core\", or \"mart\" models.:\n\n````yaml\ntags:\n  - include: staging\n    exclude: base\n  - core\n  - mart\n````\n\n## Musts\n\n\"Musts\" define the rules that must be adhered to by the subjects defined in the `subject`\nsection.  Multiple \"musts\" may be included in a rule definition, and all must be\nsatisfied for the rule to pass.\n\n**Match name** - The `match-name` rule requires that each subject adhere to a\nparticular naming pattern.  dagrules currently only supports regular expression matching.\nFor example, the following rule enforces that all snapshot models must be named with\na `snap_` prefix:\n\n````yaml\nrules:\n  - name: Snapshot must be prefixed with snap_\n    subject:\n      type: snapshot\n    must:\n      match-name: /snap_.*/\n````\n\n**Have tags** - The `have-tags-any` rule requires that all selected models must have\none of any of the listed tags.  The following example specifies that all nodes in the dag\nmust have at least one of the tags listed:\n\n````yaml\nrules:\n  - name: All models must be tagged either snapshot, base, staging, intermediate, core, mart\n    # Omit subject to include all nodes\n    must:\n      have-tags-any:\n        - snaphost\n        - base\n        - staging\n        - intermediate\n        - core\n        - mart\n````\n\n**Have parent or child relationship** - The `have-child-relationship`\nand `have-parent-relationship` rules require that the subjects have a\ncertain kind of relationship to either their **immediate** children or\nparents.  The types of relationship can involve:\n  * `cardinality` - The cardinality of the relationship between a subject and its child/parent\n    can either be `one_to_one` or `one_to_many` (default).  If `one_to_one` is selected,\n    that a subject may only have one child/parent.\n  * `required` - Indicates whether a child/parent relationship is required or not.  The default\n    is `True`, meaning that if a relationship is defined, all subject must have at least\n    one child or parent node.  If `False`, then a subject may have 0 children/parents.\n  * `require-tags-any` - Contains a list of tags that the parent/child\n    must have (with syntax defined in the \"Tag selection\" section\n    above).\n  * `require-node-type` - Indicates the node type (source, snapshot, model) that the child/parent\n    must be in order to pass.\n  * `select-tags-any` - Contains a list of tags that restricts the selection of parents/children\n    involved in the rule.\n  * `select-node-type` - Indicates that only the parents/children with the specified node\n    type are to be considered when checking the rule.\n\nFor example,\n\n````yaml\nrules:\n  - name: Snapshots must have 0 or 1 children, which must all be base models\n    subject:\n      type: snapshot\n    must:\n      have-child-relationship:\n        cardinality: one_to_one\n        required: false\n        require-tags-any:\n          - base\n\n  - name: Intermediate models may only depend on non-base staging, core, mart, or other intermediate models\n    subject:\n      tags:\n        include: intermediate\n    must:\n      have-parent-relationship:\n        require-tags-any:\n          - include: staging\n            exclude: base\n          - core\n          - mart\n          - intermediate\n````\n\n\n## Contributing\n\nWe welcome contributors!  Please submit any suggests or pull requests in Github.\n\n### Developer setup\n\nCreate an appropriate python environment.  I like [miniconda](https://conda.io/miniconda.html),\nbut use whatever you like:\n\n    conda create --name dagrules python=3.9\n    conda activate dagrules\n\nThen install pip packages\n\n    pip install pip-tools\n    pip install --ignore-installed -r requirements.txt\n\nrun tests via\n\n    inv test\n\nand the linter via\n\n    inv lint\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gnilrets/dagrules",
    "keywords": "dbt dag",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dagrules",
    "package_url": "https://pypi.org/project/dagrules/",
    "platform": "",
    "project_url": "https://pypi.org/project/dagrules/",
    "project_urls": {
      "Homepage": "https://github.com/gnilrets/dagrules"
    },
    "release_url": "https://pypi.org/project/dagrules/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "dagrules - dbt DAG rule creator and validator",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12467758,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1c2de466574e0cea551e87a1d9f4b2bbb127e3afd241943f3ae8768cb915868",
          "md5": "6075c4fe346e21c9f6fcc60aa0bae1bd",
          "sha256": "3e99bcd08c2fb44a98d2ab4ebef931af6f60e5fcb2c19ae0008ef8844f8f1b52"
        },
        "downloads": -1,
        "filename": "dagrules-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6075c4fe346e21c9f6fcc60aa0bae1bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 12582,
        "upload_time": "2022-01-03T20:20:53",
        "upload_time_iso_8601": "2022-01-03T20:20:53.400909Z",
        "url": "https://files.pythonhosted.org/packages/b1/c2/de466574e0cea551e87a1d9f4b2bbb127e3afd241943f3ae8768cb915868/dagrules-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1c2de466574e0cea551e87a1d9f4b2bbb127e3afd241943f3ae8768cb915868",
        "md5": "6075c4fe346e21c9f6fcc60aa0bae1bd",
        "sha256": "3e99bcd08c2fb44a98d2ab4ebef931af6f60e5fcb2c19ae0008ef8844f8f1b52"
      },
      "downloads": -1,
      "filename": "dagrules-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6075c4fe346e21c9f6fcc60aa0bae1bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 12582,
      "upload_time": "2022-01-03T20:20:53",
      "upload_time_iso_8601": "2022-01-03T20:20:53.400909Z",
      "url": "https://files.pythonhosted.org/packages/b1/c2/de466574e0cea551e87a1d9f4b2bbb127e3afd241943f3ae8768cb915868/dagrules-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}