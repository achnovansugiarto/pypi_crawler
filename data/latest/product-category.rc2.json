{
  "info": {
    "author": "Yang Zhang",
    "author_email": "yang.zhang.ds@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Deep Learning Model for Product Category Prediction\nProduct category prediction model built with:\n- [pytorch](https://github.com/pytorch/pytorch)\n- [huggingface/transformers](https://github.com/huggingface/transformers)\n- [pytorch-lightning](https://github.com/PyTorchLightning/pytorch-lightning) \n\nand trained using [Amazon product data](http://jmcauley.ucsd.edu/data/amazon/). \n\nThis library supports\n- Predicting categories using the pretrained model.\n- Training from scratch, with a transformers model as the starting point.\n- Transfer learning from the pretrained model.\n\n## Pretrained model\nThe pretrained model is trained using product category and title in the metadata [Amazon product data](http://jmcauley.ucsd.edu/data/amazon/). Each product can have multiple categories.\nWe sample 500K products (85% for train; 15% for validation) to train the model, which resulted in ~1900 categories.\nWe use [pytorch-lightning](https://github.com/PyTorchLightning/pytorch-lightning) to train a multilabel classification model with the pretrained `distilbert-base-cased` model from [huggingface/transformers](https://github.com/huggingface/transformers) as the starting point.\nThis library supports \n1. directly using this pretrained model to predict the ~1900 categories from an input product title or description; \n2. using this pretrained model as a starting point to do transfer learning and train a category prediction model on your own categories, as long as you provide training data in the format described below.\n\nYou can also train a model from scratch without using this pretrained model, but instead with a transformers model as the starting point.\n\n### Download Pretrained Model\nDownload the pretrained model to `data` folder:\n```Bash\nwget https://github.com/yang-zhang/product_category/releases/download/v0.0.1/transformer_20210307D3.ckpt -P data\n```\n\n## Installation\n```Bash\npip install product-category\n```\n\n## Predict with Pre-trained Model\n```\npython product_category/predict.py -h\nusage: predict.py [-h] -t TEXT [--trained_model_path TRAINED_MODEL_PATH]\n                  [--i2cat_path I2CAT_PATH] [--tokenizer_name TOKENIZER_NAME]\n                  [--topn TOPN]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t TEXT, --text TEXT  Product info text to predict.\n  --trained_model_path TRAINED_MODEL_PATH\n                        Model used to predict.\n  --i2cat_path I2CAT_PATH\n                        File name for the ordered list of categories. Each\n                        line for one category.\n  --tokenizer_name TOKENIZER_NAME\n                        Tokenizer name.\n  --topn TOPN           Number of top predicted categories to display.\n  ```\n\nFor example:\n```\npython predict.py -t \"Lykmera Famous TikTok Leggings, High Waist Yoga Pants for Women, Booty Bubble Butt Lifting Workout Running Tights\"\n\nSports & Outdoors: 0.997\nSports & Fitness: 0.994\nExercise & Fitness: 0.980\nClothing: 0.961\nYoga: 0.905\n```\n\n## Training Data Format\nTraining data file should be csv with 3 columns: `category` (categories separated by '|'), `title` (str), `is_validation` (0 or 1). Similar to `data/example_data.csv`. \n```\ncategory,title,is_validation\nSports & Outdoors|Outdoor Recreation|Cycling|Clothing|Men|Shorts,Louis Garneau Men's Neo Power Motion Bike Shorts,1\n\"Clothing, Shoes & Jewelry|Novelty & More|Clothing|Novelty\",Nirvana Men's Short Sleeve Many Smiles T-Shirt Shirt,0\nGrocery & Gourmet Food|Snack Foods|Chips & Crisps|Tortilla,Doritos Tapatio Salsa Picante Hot Sauce Flavor Chips 7 5/8 oz Bag (Pack of 1),0\n\"Clothing, Shoes & Jewelry|Women|Shoes|Boots|Synthetic|Synthetic sole|Vegan Friendly\",SODA Womens Dome-H Boot,1\nSports & Outdoors|Outdoor Recreation|Camping & Hiking,Folding Pot Stabilizer,0\n```\n\n## Training\nBelow are a subset of options for `training.py`. \nRun `python train.py -h` to see full help list, which includes more options for [pytorch-lightning](https://github.com/PyTorchLightning/pytorch-lightning) functionalities.\n```\npython train.py -h\nusage: train.py [-h] [--model_name_or_path MODEL_NAME_OR_PATH]\n                [--transfer_learn] [--trained_model_path TRAINED_MODEL_PATH]\n                [--data_file_path DATA_FILE_PATH] [--freeze_bert]\n                [--max_seq_length MAX_SEQ_LENGTH]\n                [--min_products_for_category MIN_PRODUCTS_FOR_CATEGORY]\n                [--train_batch_size TRAIN_BATCH_SIZE]\n                [--val_batch_size VAL_BATCH_SIZE]\n                [--dataloader_num_workers DATALOADER_NUM_WORKERS]\n                [--pin_memory] [--logger [LOGGER]]\n                [--learning_rate LEARNING_RATE] \n\noptional arguments:\n  -h, --help            show this help message and exit\n  --model_name_or_path MODEL_NAME_OR_PATH\n                        Path to pretrained model or model identifier from\n                        huggingface.co/models.\n  --transfer_learn      Wether to use transfer learning based on a pretrained\n                        model.\n  --trained_model_path TRAINED_MODEL_PATH\n                        Model used to predict.\n  --data_file_path DATA_FILE_PATH\n                        Path to training data file. Data file should be csv\n                        with 3 columns: category (categories separated by\n                        '|'),title (str),is_validation (0 or 1). e.g.: Sports\n                        & Outdoors|Outdoor\n                        Recreation|Cycling|Clothing|Men|Shorts,Louis Garneau\n                        Men's Neo Power Motion Bike Shorts,1\n  --freeze_bert         Whether to freeze the pretrained model.\n  --max_seq_length MAX_SEQ_LENGTH\n                        The maximum total input sequence length after\n                        tokenization. Sequences longer than this will be\n                        truncated, sequences shorter will be padded.\n  --min_products_for_category MIN_PRODUCTS_FOR_CATEGORY\n                        Minimum number of products for a category to be\n                        considered in the model.\n  --train_batch_size TRAIN_BATCH_SIZE\n                        How many samples per batch to load for train\n                        dataloader.\n  --val_batch_size VAL_BATCH_SIZE\n                        How many samples per batch to load for validation\n                        dataloader.\n  --dataloader_num_workers DATALOADER_NUM_WORKERS\n                        How many subprocesses to use for data loading. 0 means\n                        that the data will be loaded in the main process.\n  --pin_memory          Wether to use pin_memory in pytorch dataloader. If\n                        True, the data loader will copy Tensors into CUDA\n                        pinned memory before returning them.\n  --learning_rate LEARNING_RATE\n                        Learning Rate\n```\n### Training from Scratch\nTraining from scratch, with a transformers model as the starting point.\n\nFor example:\n```\npython train.py --data_file_path ../data/sample_data.csv\n\n```\n### Transfer Learning from Pre-trained Model\nTransfer learning from the pretrained model.\n\nFor example:\n```\npython train.py --transfer_learn --data_file_path ../data/sample_data.csv\n```\n\n### Useful Pytorch-Lightning Options\nTo run with GPU:\n```\npython train.py --transfer_learn --data_file_path ../data/sample_data.csv --gpus=1\n```\n\nTo train only a classification head with the transformer backbone frozen:\n```\npython train.py --transfer_learn --data_file_path ../data/sample_data.csv --freeze_bert\n```\n\nTo run with GPU, `pin_memory` for dataloader, and limiting maximum training epochs:\n```\npython train.py --transfer_learn --data_file_path ../data/sample_data.csv --gpus=1 --pin_memory --max_epochs=100\n\n```\n\n\n## Note \nThe pretrained model is trained using [Amazon product data](http://jmcauley.ucsd.edu/data/amazon/), which is for research purpose. Therefore, the pretrained model should  also be used for research purposes.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yang-zhang/product_category",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "product-category",
    "package_url": "https://pypi.org/project/product-category/",
    "platform": "",
    "project_url": "https://pypi.org/project/product-category/",
    "project_urls": {
      "Homepage": "https://github.com/yang-zhang/product_category"
    },
    "release_url": "https://pypi.org/project/product-category/0.0.2/",
    "requires_dist": [
      "torch (==1.7.1)",
      "transformers (==4.3.3)",
      "pytorch-lightning (==1.2.1)",
      "scikit-learn (==0.24.1)",
      "black (==20.8b1)",
      "pre-commit (==2.10.1)",
      "pytest ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Predicting product categories.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9736438,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37238fb4d3a547a0b1e8d0d1f419cddd9f80248338c2013eb2106613be3ef8bc",
          "md5": "93291580085a00433481e8c30867ba79",
          "sha256": "f5f886df1c966202ae0f09a7a378bd9abcf8826fbdad74944f58f6a843a48052"
        },
        "downloads": -1,
        "filename": "product_category-0.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93291580085a00433481e8c30867ba79",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 7919,
        "upload_time": "2021-03-10T21:35:09",
        "upload_time_iso_8601": "2021-03-10T21:35:09.983389Z",
        "url": "https://files.pythonhosted.org/packages/37/23/8fb4d3a547a0b1e8d0d1f419cddd9f80248338c2013eb2106613be3ef8bc/product_category-0.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b68a326f6d74fe42eb382d338458790101d08c1f0ffb495fd0429e9400795d51",
          "md5": "c27a780da83b98cfb50cadf0a2b35b17",
          "sha256": "482c3a5026b6041d7b1dd549a1c127b292fe7834f8929f239719f572bfd66f05"
        },
        "downloads": -1,
        "filename": "product_category-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c27a780da83b98cfb50cadf0a2b35b17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7258,
        "upload_time": "2021-03-10T21:35:11",
        "upload_time_iso_8601": "2021-03-10T21:35:11.010098Z",
        "url": "https://files.pythonhosted.org/packages/b6/8a/326f6d74fe42eb382d338458790101d08c1f0ffb495fd0429e9400795d51/product_category-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8d6fcd2966a917fd1db830ff6c96d590045b72aa173656811beddfe3b049068",
          "md5": "f9c6d9fb8522d45301e64580e69b94b3",
          "sha256": "bc25dc1f640108f65ae0e5adffa54a0e51ac42abed3505bfbb3ae134c5e6c879"
        },
        "downloads": -1,
        "filename": "product_category-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9c6d9fb8522d45301e64580e69b94b3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8503,
        "upload_time": "2021-03-11T02:13:11",
        "upload_time_iso_8601": "2021-03-11T02:13:11.272143Z",
        "url": "https://files.pythonhosted.org/packages/a8/d6/fcd2966a917fd1db830ff6c96d590045b72aa173656811beddfe3b049068/product_category-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e0d96d1e6762b0e8dcb03d7f0a5505238a9574089e60586ad2298607595e690",
          "md5": "a8075ab37a50b69aadde05348a94bb02",
          "sha256": "93728d00d53104c44421ea44ed317215af9e197179e762143cc1a5189bac1ce6"
        },
        "downloads": -1,
        "filename": "product_category-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a8075ab37a50b69aadde05348a94bb02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8787,
        "upload_time": "2021-03-11T02:13:12",
        "upload_time_iso_8601": "2021-03-11T02:13:12.456200Z",
        "url": "https://files.pythonhosted.org/packages/5e/0d/96d1e6762b0e8dcb03d7f0a5505238a9574089e60586ad2298607595e690/product_category-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8d6fcd2966a917fd1db830ff6c96d590045b72aa173656811beddfe3b049068",
        "md5": "f9c6d9fb8522d45301e64580e69b94b3",
        "sha256": "bc25dc1f640108f65ae0e5adffa54a0e51ac42abed3505bfbb3ae134c5e6c879"
      },
      "downloads": -1,
      "filename": "product_category-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f9c6d9fb8522d45301e64580e69b94b3",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8503,
      "upload_time": "2021-03-11T02:13:11",
      "upload_time_iso_8601": "2021-03-11T02:13:11.272143Z",
      "url": "https://files.pythonhosted.org/packages/a8/d6/fcd2966a917fd1db830ff6c96d590045b72aa173656811beddfe3b049068/product_category-0.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e0d96d1e6762b0e8dcb03d7f0a5505238a9574089e60586ad2298607595e690",
        "md5": "a8075ab37a50b69aadde05348a94bb02",
        "sha256": "93728d00d53104c44421ea44ed317215af9e197179e762143cc1a5189bac1ce6"
      },
      "downloads": -1,
      "filename": "product_category-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a8075ab37a50b69aadde05348a94bb02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8787,
      "upload_time": "2021-03-11T02:13:12",
      "upload_time_iso_8601": "2021-03-11T02:13:12.456200Z",
      "url": "https://files.pythonhosted.org/packages/5e/0d/96d1e6762b0e8dcb03d7f0a5505238a9574089e60586ad2298607595e690/product_category-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}