{
  "info": {
    "author": "Yuki Igarashi",
    "author_email": "me@bonprosoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# x2webrtc\n[![PyPI](https://img.shields.io/pypi/v/x2webrtc.svg)](https://pypi.org/project/x2webrtc/)\n[![PyPI Supported Python Versions](https://img.shields.io/pypi/pyversions/x2webrtc.svg)](https://pypi.org/project/x2webrtc/)\n[![GitHub license](https://img.shields.io/github/license/bonprosoft/x2webrtc.svg)](https://github.com/bonprosoft/x2webrtc)\n\nx2webrtc is a command-line tool for forwarding an X window as a media track through WebRTC.\nIt is a simple tool; it just grabs screenshots for the window with Xlib and send them via a WebRTC stream, but it can realize the following features:\n\n- You can send an X window through the NAT.\n- A media stream is transported using a secure method. (compared to the standard VNC)\n- You can easily install it by pip.\n- You don't necessarily have admin access to the system.\n\n## Install\n\nNote that Python 3.6+ and X Window System are required to use the tool.\n\n```sh\npip install x2webrtc\n```\n\nThe tool requires `aiortc` to work with WebRTC.\nPlease refer to [the install instruction](https://github.com/aiortc/aiortc#linux) of `aiortc` if you failed to install it automatically.\n\n## Quickstart\n\n**NOTE**:\nCurrently, hand signaling is required to start a WebRTC session.\nI am planning to implement a plug-in system so that a user can customize its signaling method.\n\n1. Start x2webrtc.\n\n    ```sh\n    x2webrtc forward\n    ```\n\n    If `DISPLAY` environment is not set to your environment, pass `--display` argument to specify an X server.\n\n    ```sh\n    x2webrtc forward --display :0\n    ```\n\n2. (tentative) Copy a WebRTC offer.\nYou will see the following message on your terminal:\n\n    ```sh\n    -- Please send this message to the remote party --\n    {\"sdp\": \"...\" , \"type\": \"offer\"}\n    ```\n\n    Please copy the offer json.\n\n3. (tentative) Open [the web viewer](https://bonprosoft.github.io/x2webrtc/online_viewer/) and click `Connect` button.\n4. (tentative) Paste the offer json into `Input Offer` text-area (A) and click `Create Answer` button (B). Then you will get an answer json (C). Copy the json again.\n![](https://raw.githubusercontent.com/bonprosoft/x2webrtc/master/imgs/quick_start_web_client.png)\n5. (tentative) Go back to your terminal. Paste the answer json into the terminal, then press Enter.\n6. Now you will see your screen in the web viewer.\n\n## Usage\n\n```sh\nusage: x2webrtc [-h] [-v] COMMANDS ...\n\nCommands:\n    forward       forward X Window\n    info          show window information of the X server\n\noptional arguments:\n  -h, --help      show this help message and exit\n  -v, --verbose   verbose; can be used up to 3 times to increase verbosity\n```\n\n### x2webrtc forward\n\nForward a specified X window.\n\n```sh\nusage: x2webrtc forward [-h] [--display DISPLAY]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --display DISPLAY  display_name of the X server to connect to (e.g., hostname:1, :1.)\n```\n\n### x2webrtc info\n\nShow information on a specified X server.\n\n```sh\nusage: x2webrtc info [-h] [--display DISPLAY] [--props]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --display DISPLAY  display_name of the X server to connect to (e.g., hostname:1, :1.)\n  --props            show all properties of each window\n```\n\n## Configuration\n\nThe order of preference is the `$X2WEBRTC_CONFIG` environment variable, then `.x2webrtc` file of the working directory, and then `~/.x2webrtc`.\nThe config file must be in the YAML format.\nHere is an example of a configuration file:\n```yaml\nsignaling_plugin: \"path/to/signaling_plugin.py\"  # optional\npeer_connection:                 # optional\n  ice_servers:\n    - url: stun:stun.example.com\n    - url: turn:turn.example.com\n      username: shamiko          # optional\n      credential: momo           # optional\n```\n\nFor more details, please refer to `x2webrtc/config.py`.\n\n## Plugin\n\nYou can customize the signaling method that x2webrtc uses for a WebRTC peer connection by using a plugin.\nHere is an example of a plugin implementation:\n```py\nfrom typing import Type\nfrom aiortc import RTCPeerConnection\nfrom x2webrtc.plugin import SignalingPlugin\n\nclass SomePlugin(SignalingPlugin):\n    async def __call__(self, pc: RTCPeerConnection) -> bool:\n        return True\n\ndef plugin() -> Type[SignalingPlugin]:\n    return SomePlugin\n```\n\nA plugin file must have a `plugin` function that returns a subclass of `SignalingPlugin`.\nThe plugin file is required to specify in a configuration file, as already mentioned in the Configuration section.\n\nFor more details, please refer to `CopyAndPasteSignaling` class located in `x2webrtc/signaling.py`.\n\n## FAQ\n\n### Failed to install PyAV\n`PyAV` uses `AV_CODEC_CAP_HARDWARE` macro in its source code, but it seems to be available in `libavcodec >= 58.0`. Check the version of libavcodec and try again.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bonprosoft/x2webrtc",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "x2webrtc",
    "package_url": "https://pypi.org/project/x2webrtc/",
    "platform": "",
    "project_url": "https://pypi.org/project/x2webrtc/",
    "project_urls": {
      "Homepage": "https://github.com/bonprosoft/x2webrtc"
    },
    "release_url": "https://pypi.org/project/x2webrtc/0.2.0/",
    "requires_dist": [
      "Pillow (<7.1.0,>=7.0.0)",
      "PyYAML (<6.0.0,>=5.0.0)",
      "aiortc (<0.10.0,>=0.9.0)",
      "av (<8.0.0,>=7.0.0)",
      "dacite (<1.3.0,>=1.2.0)",
      "numpy (<1.19.0,>=1.18.0)",
      "python-xlib (<1.0,>=0.26)",
      "dataclasses ; python_version < \"3.7\"",
      "pytest (<6.0.0,>=5.0.0) ; extra == 'test'",
      "pytest-asyncio (<1.0.0,>=0.10.0) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Forward X window through WebRTC as a MediaStream",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6901468,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4a8b59ea7dbef4ef7be573a6200aebdb1a6d0c533f87c0448c5a4e44e41ef19",
          "md5": "6461c569a49f08a1f8e9c075b673765a",
          "sha256": "bbfa6462b2271f9369d0efa00e7ba9d1cdb93f95a5056c71f88698e307f21d04"
        },
        "downloads": -1,
        "filename": "x2webrtc-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6461c569a49f08a1f8e9c075b673765a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11534,
        "upload_time": "2020-03-21T16:29:47",
        "upload_time_iso_8601": "2020-03-21T16:29:47.051962Z",
        "url": "https://files.pythonhosted.org/packages/e4/a8/b59ea7dbef4ef7be573a6200aebdb1a6d0c533f87c0448c5a4e44e41ef19/x2webrtc-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b182907cdfbbd00a641fdc4566d88ca23fca57f5f060e024ad1f8fbe22a3c44",
          "md5": "b73b5995c4e328859fd56b37b630ea26",
          "sha256": "f2643d26551c61963a36c2ab055053dbf9c330bcffa7743d1e221f931491623f"
        },
        "downloads": -1,
        "filename": "x2webrtc-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b73b5995c4e328859fd56b37b630ea26",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14312,
        "upload_time": "2020-03-28T11:25:57",
        "upload_time_iso_8601": "2020-03-28T11:25:57.011402Z",
        "url": "https://files.pythonhosted.org/packages/4b/18/2907cdfbbd00a641fdc4566d88ca23fca57f5f060e024ad1f8fbe22a3c44/x2webrtc-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b182907cdfbbd00a641fdc4566d88ca23fca57f5f060e024ad1f8fbe22a3c44",
        "md5": "b73b5995c4e328859fd56b37b630ea26",
        "sha256": "f2643d26551c61963a36c2ab055053dbf9c330bcffa7743d1e221f931491623f"
      },
      "downloads": -1,
      "filename": "x2webrtc-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b73b5995c4e328859fd56b37b630ea26",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14312,
      "upload_time": "2020-03-28T11:25:57",
      "upload_time_iso_8601": "2020-03-28T11:25:57.011402Z",
      "url": "https://files.pythonhosted.org/packages/4b/18/2907cdfbbd00a641fdc4566d88ca23fca57f5f060e024ad1f8fbe22a3c44/x2webrtc-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}