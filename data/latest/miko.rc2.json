{
  "info": {
    "author": "Anime no Sekai",
    "author_email": "niichannomail@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# `miko` (originally: `zero`)\n\n<img src=\"./assets/miko_icon_rounded.png\" alt=\"miko\" align=\"right\" height=\"220px\">\n\n A new Python documentation style\n\n***See how to use a Python object at a glance!***\n\n<br>\n<br>\n\n[![PyPI version](https://badge.fury.io/py/miko.svg)](https://pypi.org/project/miko/)\n[![Downloads](https://static.pepy.tech/personalized-badge/miko?period=total&units=international_system&left_color=grey&right_color=blue&left_text=Total%20Downloads)](https://pepy.tech/project/miko)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/miko)](https://pypistats.org/packages/miko)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/miko)](https://pypi.org/project/miko/)\n[![PyPI - Status](https://img.shields.io/pypi/status/miko)](https://pypi.org/project/miko/)\n[![GitHub - License](https://img.shields.io/github/license/Animenosekai/miko)](https://github.com/Animenosekai/miko/blob/master/LICENSE)\n[![GitHub top language](https://img.shields.io/github/languages/top/Animenosekai/miko)](https://github.com/Animenosekai/miko)\n[![CodeQL Checks Badge](https://github.com/Animenosekai/miko/workflows/CodeQL%20Python%20Analysis/badge.svg)](https://github.com/Animenosekai/miko/actions?query=workflow%3ACodeQL)\n[![Pytest](https://github.com/Animenosekai/miko/actions/workflows/pytest.yml/badge.svg)](https://github.com/Animenosekai/miko/actions/workflows/pytest.yml)\n![Code Size](https://img.shields.io/github/languages/code-size/Animenosekai/miko)\n![Repo Size](https://img.shields.io/github/repo-size/Animenosekai/miko)\n![Issues](https://img.shields.io/github/issues/Animenosekai/miko)\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.\n\n### Prerequisites\n\n#### Python\n\nYou will need Python 3 to use this module\n\n```bash\n# vermin output\nMinimum required versions: 3.4\nIncompatible versions:     2\n```\n\n## Installing\n\n### Option 1: From PyPI\n\n```bash\npip install --upgrade miko\n```\n\n### Option 2: From Git\n\n```bash\npip install --upgrade git+https://github.com/Animenosekai/miko\n```\n\nYou can check if you successfully installed it by printing out its version:\n\n```bash\n$ python -c \"import miko; print(miko.__version__)\"\n# output:\nmiko v1.0\n```\n\n```bash\n$ miko --version\n# output:\nmiko v1.0\n```\n\n## Purpose\n\nThis new style aims at bringing an ease of use for both humans and computers.\n\nIt also helps me get concise while writing docstrings as I tend to use different styles even within a same file.\n\n## Style\n\nMiko defines a new way of documenting your source code.\n\nYou will here learn the different sections of your documentation string.\n\n### Outline\n\nThe *Miko* way of documenting stuff is by using Markdown in your documentation and following the rules below.\n\n#### Start\n\nWhen you want to document the object, you need to start the docstring with 3 quotation marks, preferably double quotation marks.\n\nYou also need to add a line break and pad the whole documentation to line up with the start of the object name.\n\n> Example: we are using 3 double quotation marks, and we start where the object name starts after a line break.\n\n```python\ndef func():\n    \"\"\"\n    It needs to start here\n\n    Here we continue the documentation string\n^^^^\n(do not use this space)\n    \"\"\"\n    pass\n```\n\n#### End\n\nThe documentation string ends when 3 quotation marks (the same as the beginning ones) are added after the padding.\n\n### Description\n\nAfter starting the documentation string, you can add a description for your object as a normal string.\n\nThere is not much styling or rules to follow since all the content outside any section is considered part of the description.\n\n> Example: We are giving a description of the function at the start, but also at the end.\n\n```python\ndef func():\n    \"\"\"\n    Hello, this is a description.\n\n    Returns\n    ----------\n    bool\n        The result of the function.\n\n    But this is also part of the description.\n    \"\"\"\n```\n\n### Parameters\n\nYou can define what are the different parameters/arguments the callable object is taking.\n\nTo start explaining the different parameters, you need to use the `Parameters` section name, followed by a line-break and at least 3 hyphens.\n\nA single parameter element is defined by a name, followed by some options. And, on a new line, with a left padding, its description.\n\n> Example\n\n```python\ndef func(a, b: int, c = \"\"):\n    \"\"\"\n    Parameters\n    ----------\n    a: bool\n        this is the first argument\n    b: int | float, default = 1.2\n        this is the second argument\n    c: str, optional\n        this is the third argument\n        it can have multiple lines\n    \"\"\"\n```\n\n> Aliases: `Parameters`, `Parameter`, `Params`, `Parm`, `Arguments`, `Argument`, `Args`, `Arg`\n\n#### The options\n\nYou can specify options for each parameter.\n\nThe options are separated from the parameter name using a colon and a space.\n\nEach option is separated by a comma.\n\n- `<type>` : defines the type of the parameter.\n- `optional` : defines a parameter as being optional, without needing to specify its default value. *(useful with keyword arguments for instance)*\n- `default` : defines a parameter as being optional, by giving it a default value.\n- `deprecated` : when a parameter is deprecated.\n\n##### Types\n\nTypes can be defined by giving the element class name or *dot notation* path.\n\n> Example: `str`, `translatepy.language.Language`\n\nYou can specify multiple types using the vertical bar separator.\n\n> Example: `int | float`\n\n##### Default\n\nYou can define a default value using an equal sign.\n\n> Example: `default = 1`, `default=True`\n\n### Returned Value\n\nYou can define what are the values returned by a callable object using the `Returns` section.\n\nEach returning element is explained with the following rules: the type of the value and a description with a left-padding on a new line.\n\n> Example\n\n```python\ndef func():\n    \"\"\"\n    Returns\n    -------\n    int\n        the number returned\n    str\n        if it is a string returned\n    list[int, str]\n        if it's a list of both\n    translatepy.Language\n        using dot notation\n    \"\"\"\n```\n\n> Aliases: `Returns`, `Return`, `Returning`\n\n### Example\n\nYou can give examples of your code, writing them as you would in a Python REPL.\n\n```python\ndef func(a = False):\n    \"\"\"\n    Example\n    -------\n    >>> func()\n    \"It is false\"\n    >>> func(True)\n    \"It is true\"\n    # when using something other than a boolean\n    >>> func(1)\n    2\n    \"\"\"\n```\n\nYou can use `# comments` to explain your example.\n\n> Aliases: `Examples`, `Example`\n\n### Exceptions\n\nYou can inform the users about any exception/error your callable might be raising using the `Raising` section.\n\nLike the `Returns` section, you need to give the name of the exception and then a description of why it would raise this exception and the special attribute the exception might have on a new line, left-padded.\n\n> Example\n\n```python\ndef func():\n    \"\"\"\n    Raises\n    ------\n    ValueError\n        If there is an error with the value\n    \"\"\"\n```\n\n> Aliases: `Raises`, `Raise`, `Raising`, `Exceptions`, `Exception`, `Errors`, `Error`\n\n### Warnings\n\nYou can give warnings to the user using the `Warning` tag.\n\nYou just need to put `Warning`, followed by a colon, a space and the warning itself.\n\n> Example\n\n```python\ndef func():\n    \"\"\"\n    Warning: This is a serious warning\n\n    ...description...\n\n    Warning: Another warning\n    \"\"\"\n```\n\n> Aliases: `Warnings`, `Warning`\n\n<br>\n\n> **Note**  \n> Warnings are part of the description\n\n### Notes\n\nIf you only want to notify the user about something, you can use the `Note` tag.\n\nYou just need to put `Note`, followed by a colon, a space and the note itself.\n\n> Example\n\n```python\ndef func():\n    \"\"\"\n    Note: Yup, that's true\n\n    ...description...\n\n    Note: Another note\n    \"\"\"\n```\n\n> Aliases: `Notes`, `Note`, `See Also`, `Information`\n\n<br>\n\n> **Note**  \n> Notes are part of the description\n\n### Change log\n\nYou can inform the users about how the object got modified over time using the `Changelog` section.\n\nLike the `Returns` section, you need to give the name of the version it got changed on and then a description of how it changed on a new line, left-padded.\n\n> Example\n\n```python\ndef func():\n    \"\"\"\n    Changelog\n    ---------\n    1.4\n        New default string\n    0.6\n        Raises ImportError instead of RuntimeError\n    \"\"\"\n```\n\n> Aliases: `Changelog`, `Changes`\n\n### Deprecation Notice\n\nTo add a deprecation notice to your object, you can add `! DEPRECATED !` at the beginning of the docstring.\n\nIt must be the first thing (aside from whitespace) of the docstring.\n\n> Example: At the very beginning of the docstring\n\n```python\ndef func():\n    \"\"\"! DEPRECATED !\n    This is a cool function.\n\n    Changelog\n    ---------\n    1.5\n        Added a deprecation notice, with the intention of the function being removed on the next major version.\n    \"\"\"\n```\n\n> Example: With a slight variation\n\n```python\ndef func():\n    \"\"\"\n    !DEPRECATED!\n\n    This is a cool function.\n    \"\"\"\n```\n> Aliases: `Deprecated`, `Deprecation`, `Deprecate`, `Deprecation Notice`\n\n### Copyright\n\nYou can add copyright/authors of the code using the `Copyright` section.\n\nLike the `Returns` section, you need to give the name of the author and then a description of what they did on a new line, left-padded. The description could include stuff like the year they worked on the code, what they did, etc.\n\n> Example\n\n```python\ndef func():\n    \"\"\"\n    Copyright\n    ---------\n    Animenosekai\n        The initial author\n    Some other dev\n        A very cool collaborator\n    \"\"\"\n```\n\n> Aliases: `Copyrights`, `Copyright`, `Authors`, `Author`\n\n## Usage\n\n*Here, there will be the Python API Reference.*\n\n### On Python\n\nTwo objects are exposed through the Python API\n\n#### The `Docs` object\n\nYou can use the `Docs` object by passing a docstring and an optional function signature.\n\n> Example\n\n```python\nfrom miko import Docs\n\nparsed = Docs(\n    \"\"\"\n    Hello\n\n    Note: this is a test\n\n    Changelog\n    ---------\n    1.0\n        Adding this docstring\n    \"\"\"\n)\n```\n\n##### Parameters\n\n| Name | Description | Type | Default |\n|------|-------------|------|---------|\n| `docs` | This is the docstring to parse | str | `` |\n| `signature` | The function signature to get the additional parameters from | inspect.Signature | None |\n| `noself` | If you don't want to use the `self` parameter from the signature, useful for class methods | bool | False |\n\n##### Attributes\n\n- **`description`**\n\n> str\n\nThe description of the object in the docstring.\n\n- **`parameters`**\n\n> List[Parameter]\n\nThis contains the different parameters found on the function and on the docstring\n\nThe attribute returns a `List` object with `Parameter` objects.\n\nA `Parameter` object has the following attributes:\n\n| Attribute | Description | Type |\n| --------- | ----------- | ---- |\n| `name` | The name of the parameter | str |\n| `content` | A list of strings, each one being a line of the parameter description | list[str] |\n| `deprecated` | If the parameter is deprecated | bool |\n| `optional` | If the parameter is optional | bool |\n| `default` | The default value for the parameter, if it has any | str, Any |\n| `types` | A list of types the parameter can be | list[str, Any] |\n\n- **`returns`**\n- **`raises`**\n- **`changelog`**\n- **`copyright`**\n\n> List[ListElement]\n\nThey all share the same schema, a `List` object with `ListElement` objects.\n\nA `ListElement` object has the following attributes:\n\n| Attribute | Description | Type |\n| --------- | ----------- | ---- |\n| `name` | The name of the element | str |\n| `content` | A list of strings, each one being a line of the element description | list[str] |\n\n- **`example`**\n\n> Example\n\nThe `example` attribute contains any example code the docstring might contain.\n\n- **`warnings`**\n- **`notes`**\n\n> list[str]\n\nThe `warnings` and `notes` attributes are just a list of warnings or notes it could have find in the description.\n\n- **`deprecated`**\n\n> bool\n\nIf the object is marked as deprecated\n\n##### Methods\n\n- **`dumps`**\n\nThis function lets you dump the documentation string to the cleanest format possible, using all of the information the current `Docs` has.\n\nThe optional `indent` parameter (which defaults to 4), lets you choose the indentation level of the output.\n\nIt returns a string with the output documentation string.\n\n- **`as_dict`**\n\nThe `as_dict` function lets you convert the `Docs` object to a dictionary.\n\nIt takes an optional `camelCase` parameter (which defaults to False), which lets you have a camelCased and JSON friendly dictionary returned.\n\n#### The `Function` object\n\nThe `Function` object lets you get information about a function.\n\nOn top of the docs, it also lets you retrieve easily its source code filename, line number, name, the different local variables, the parameters, the return annotation, and its name.\n\n### Using the CLI\n\n`Miko` also has a CLI, which you can use to get information about a docstring or clean a docstring.\n\n```swift\n🧃❯ miko -h                                                                                                     \nusage: miko [-h] [--version] {info,clean} ...\n\nSee how to use a Python object at a glance!\n\npositional arguments:\n  {info,clean}   Actions\n    info         Retrieve info on the given docstring\n    clean        Clean the docstring\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --version, -v  show program's version number and exit\n```\n\n#### `miko info`\n\nYou can get information about the docstring using `miko info`.\n\n##### Arguments\n\n| Name | Aliases | Description | Type | Default |\n|------|---------|-------------|------|---------|\n| `--text` | `-t` | The docstring to parse | str | `` |\n| `--file` | `-f` | The file to parse | Path(str) | `` |\n| `--indent` | `-i` | The indentation for the JSON result | int | 4 |\n| `--noself` | `` | Ignoring the \"self\" parameter from signatures. (useful for class methods) | (flag) | False |\n\nIt will return information about the given docstring (if `--text` is given) or a list of information about the different docstrings found in the given file (if `--file` is given).\n\nIt prints a JSON string.\n\n#### `miko clean`\n\nYou can clean a docstring using `miko clean`.\n\n##### Arguments\n\n| Name | Aliases | Description | Type | Default |\n|------|---------|-------------|------|---------|\n| `--text` | `-t` | The docstring to clean | str | `` |\n| `--file` | `-f` | The file to clean | Path(str) | `` |\n| `--indent` | `-i` | The indentation for the cleaned result | int | 4 |\n| `--noself` | `` | Ignoring the \"self\" parameter from signatures. (useful for class methods) | (flag) | False |\n| `--output` | `-o` | The file to output the cleaned result to | Path(str) | None |\n\nIt will clean the given docstring (if `--text` is given) or it will return the file with the docstrings cleaned (if `--file` is given).\n\nIt prints the cleaned output.\n\n### Using the VS Code Extension\n\nYou can also use the `Miko` extension for Visual Studio Code.\n\nIt lets you format your files instantly using the command palette.\n\n![VS Code Command Palette](./assets/docs/vscode_command_palette.png)\n\nYou can add the `--noself` flag using the `Noself` setting in the Settings (UI) or the `miko-docs.noself` settings (JSON).\n\n#### Installing the extension\n\nGo to [https://marketplace.visualstudio.com/items?itemName=Animenosekai.miko-docs](https://marketplace.visualstudio.com/items?itemName=Animenosekai.miko-docs) to download the published version from the marketplace.\n\nYou can also use the `.vsix` file to install the extension.\n\nHead to the [extension folder](./formatter/vscode) and download the [`.vsix`](./formatter/vscode/miko-docs-1.0.0.vsix) file.\n\nThen, go to the *Extensions* section in VS Code, click on the three dots and select *Install from VSIX...*\n\n![Install from VSIX](./assets/docs/vscode_install_from_vsix.png)\n\n## Deployment\n\nThis module is currently in development and might contain bugs.\n\nFeel free to use it in production if you feel like it is suitable for your production even if you may encounter issues.\n\n## Contributing\n\nPull requests are welcome. For major changes, please open a discussion first to discuss what you would like to change.\n\nPlease make sure to update the tests as appropriate.\n\n## Authors\n\n- **Anime no Sekai** - *Initial work* - [Animenosekai](https://github.com/Animenosekai)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Animenosekai/miko/archive/v1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Animenosekai/miko",
    "keywords": "python,documentation,miko,docs",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miko",
    "package_url": "https://pypi.org/project/miko/",
    "platform": null,
    "project_url": "https://pypi.org/project/miko/",
    "project_urls": {
      "Download": "https://github.com/Animenosekai/miko/archive/v1.0.tar.gz",
      "Homepage": "https://github.com/Animenosekai/miko"
    },
    "release_url": "https://pypi.org/project/miko/1.0/",
    "requires_dist": [
      "typing ; python_version < \"3.5\""
    ],
    "requires_python": ">=3.4, <4",
    "summary": "See how to use a Python object at a glance!",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14720538,
  "releases": {
    "0.1.dev9021825": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9723a0d9d9d006b4903bbb798c1f7d7549a5f70dac9b7f38a5fc351571d52ade",
          "md5": "4c0f0bcc72efe3594e01380bb7cdd89d",
          "sha256": "6994b7cfc0f70d73b5a2493ea82a3cbbfc1a1c69854051a9e6d1e86ea7a541d2"
        },
        "downloads": -1,
        "filename": "miko-0.1.dev9021825.tar.gz",
        "has_sig": false,
        "md5_digest": "4c0f0bcc72efe3594e01380bb7cdd89d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
        "size": 3115,
        "upload_time": "2018-09-02T10:25:27",
        "upload_time_iso_8601": "2018-09-02T10:25:27.614324Z",
        "url": "https://files.pythonhosted.org/packages/97/23/a0d9d9d006b4903bbb798c1f7d7549a5f70dac9b7f38a5fc351571d52ade/miko-0.1.dev9021825.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3258b9465ef2ff700fab47fb6444e3288b7816903eabc79bdd07eaeb98e4e74b",
          "md5": "0721e3da9954f8ee9fd25c3f50cab0f6",
          "sha256": "7cfa66e8194d099c66fad85d4e98b7aec42d6128bb79f40f45b7e49e1b6baf42"
        },
        "downloads": -1,
        "filename": "miko-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0721e3da9954f8ee9fd25c3f50cab0f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4, <4",
        "size": 22291,
        "upload_time": "2022-08-10T18:40:59",
        "upload_time_iso_8601": "2022-08-10T18:40:59.464591Z",
        "url": "https://files.pythonhosted.org/packages/32/58/b9465ef2ff700fab47fb6444e3288b7816903eabc79bdd07eaeb98e4e74b/miko-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3acd218b6f73cf87cc0d2fe2d19ed4d85d825d6b34f986012e88b20128c4a1c2",
          "md5": "8d8cf03a4a7205d166cf27abadf98a4e",
          "sha256": "4126367ce725061c396b651f3734224280091e688338d19c5050423785dffbc5"
        },
        "downloads": -1,
        "filename": "miko-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d8cf03a4a7205d166cf27abadf98a4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4, <4",
        "size": 25133,
        "upload_time": "2022-08-10T18:41:03",
        "upload_time_iso_8601": "2022-08-10T18:41:03.089437Z",
        "url": "https://files.pythonhosted.org/packages/3a/cd/218b6f73cf87cc0d2fe2d19ed4d85d825d6b34f986012e88b20128c4a1c2/miko-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3258b9465ef2ff700fab47fb6444e3288b7816903eabc79bdd07eaeb98e4e74b",
        "md5": "0721e3da9954f8ee9fd25c3f50cab0f6",
        "sha256": "7cfa66e8194d099c66fad85d4e98b7aec42d6128bb79f40f45b7e49e1b6baf42"
      },
      "downloads": -1,
      "filename": "miko-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0721e3da9954f8ee9fd25c3f50cab0f6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4, <4",
      "size": 22291,
      "upload_time": "2022-08-10T18:40:59",
      "upload_time_iso_8601": "2022-08-10T18:40:59.464591Z",
      "url": "https://files.pythonhosted.org/packages/32/58/b9465ef2ff700fab47fb6444e3288b7816903eabc79bdd07eaeb98e4e74b/miko-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3acd218b6f73cf87cc0d2fe2d19ed4d85d825d6b34f986012e88b20128c4a1c2",
        "md5": "8d8cf03a4a7205d166cf27abadf98a4e",
        "sha256": "4126367ce725061c396b651f3734224280091e688338d19c5050423785dffbc5"
      },
      "downloads": -1,
      "filename": "miko-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8d8cf03a4a7205d166cf27abadf98a4e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4, <4",
      "size": 25133,
      "upload_time": "2022-08-10T18:41:03",
      "upload_time_iso_8601": "2022-08-10T18:41:03.089437Z",
      "url": "https://files.pythonhosted.org/packages/3a/cd/218b6f73cf87cc0d2fe2d19ed4d85d825d6b34f986012e88b20128c4a1c2/miko-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}