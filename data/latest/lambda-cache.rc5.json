{
  "info": {
    "author": "keithrozario",
    "author_email": "keith@keithrozario.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "<h1 align=\"center\"> Lambda Cache </h1>\n<h2 align=\"center\"> Simple Caching for AWS Lambda</h2>\n\n![PackageStatus](https://img.shields.io/static/v1?label=status&message=beta&color=orange?style=flat-square) ![PyPI version](https://img.shields.io/pypi/v/lambda-cache) ![PythonSupport](https://img.shields.io/static/v1?label=python&message=3.6%20|%203.7%20|%203.8&color=blue?style=flat-square&logo=python) ![License: MIT](https://img.shields.io/github/license/keithrozario/lambda-cache) [![Documentation Status](https://readthedocs.org/projects/lambda-cache/badge/?version=latest)](https://lambda-cache.readthedocs.io/en/latest/?badge=latest) [![Documentation Status](https://readthedocs.org/projects/lambda-cache/badge/?version=latest)](https://lambda-cache.readthedocs.io/en/latest/?badge=latest)\n\n![Test](https://github.com/keithrozario/lambda-cache/workflows/Test/badge.svg?branch=release) [![Coverage Status](https://coveralls.io/repos/github/keithrozario/lambda-cache/badge.svg?branch=release)](https://coveralls.io/github/keithrozario/lambda-cache?branch=release) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) \n\n# Introduction\n\n<p align=\"center\"><img src='docs/images/lambda_cache.png'></p>\n\n_lambda-cache_ helps you cache data in your Lambda function **across** invocations. The package utilizes the internal memory of the lambda function's [execution context](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html) to store data across multiple invocations. Doing this:\n\n* Reduces load on back-end systems\n* Reduces the execution time of the lambda\n* Guarantees functions will reference latest data after cache expiry\n* Reduces calls to APIs throttling limits or high charges\n\n_lambda-cache_ prioritizes simplicity over performance and flexibility. \n\n\nThe package is purpose-built for AWS Lambda functions, and currently supports SSM Parameters, Secrets from Secrets Manager and S3 Objects.\n\n\n# Installation\n\nInclude the package in your functions code zip-file using the following:\n\n    $ pip install lambda-cache -t /path/of/function\n\nRefer to [docs](https://lambda-cache.readthedocs.io/en/latest/install/) for how to include into your lambda function.\n\n# Usage\n\nBelow we describe further features of the package. For more info refer to the [user guide](https://lambda-cache.readthedocs.io/en/latest/user_guide/).\n\n<!-- vscode-markdown-toc -->\n* [SSM - Parameter Store](#SSM-ParameterStore)\n\t* [Cache single parameter](#Cachesingleparameter)\n\t* [Change cache expiry](#Changecacheexpiry)\n\t* [Change cache entry settings](#Changecacheentrysettings)\n\t* [Cache multiple parameters](#Cachemultipleparameters)\n\t* [Decorator stacking](#Decoratorstacking)\n\t* [Cache invalidation](#Cacheinvalidation)\n\t* [Return Values](#ReturnValues)\n* [Secrets Manager](#SecretsManager)\n\t* [Cache single secret](#Cachesinglesecret)\n\t* [Change Cache expiry](#ChangeCacheexpiry)\n\t* [Change Cache entry settings](#ChangeCacheentrysettings)\n\t* [Decorator stacking](#Decoratorstacking-1)\n\t* [Cache Invalidation](#CacheInvalidation)\n\t* [Return Values](#ReturnValues-1)\n* [S3](#S3)\n\t* [Cache a single file](#Cacheasinglefile)\n\t* [Change Cache expiry](#ChangeCacheexpiry-1)\n\t* [Check file before download](#Checkfilebeforedownload)\n\n## <a name='SSM-ParameterStore'></a>SSM - Parameter Store\n\n### <a name='Cachesingleparameter'></a>Cache single parameter\n\nTo cache a parameter from ssm, decorate your handler function like so:\n\n```python\nfrom lambda_cache import ssm\n\n@ssm.cache(parameter='/production/app/var')\ndef handler(event, context):\n    var = getattr(context,'var')\n    response = do_something(var)\n    return response\n```\nAll invocations of this function over in the next minute will reference the parameter from the function's internal cache, rather than making a network call to ssm. After one minute has lapsed, the the next invocation will invoke `get_parameter` to refresh the cache. The parameter value will be injected into the `context` object of your lambda handler.\n\n### <a name='Changecacheexpiry'></a>Change cache expiry\n\nThe default `max_age_in_seconds` settings is 60 seconds (1 minute), it defines the maximum age of a parameter that is acceptable to the handler function. Cache entries older than this, will be refreshed. To set a longer cache duration (e.g 5 minutes), change the setting like so:\n\n```python\nfrom lambda_cache import ssm\n\n@ssm.cache(parameter='/production/app/var', max_age_in_seconds=300)\ndef handler(event, context):\n    var = getattr(context,'var')\n    response = do_something(var)\n    return response\n```\n\n_Note: The caching logic runs only at invocation, regardless of how long the function runs. A 15 minute lambda function will not refresh the parameter, unless explicitly refreshed using `get_entry` method. The library is primary interested in caching 'across' invocation rather than 'within' an invocation_\n\n### <a name='Changecacheentrysettings'></a>Change cache entry settings\n\nThe default name of the parameter is the string after the last slash('/') character of its name. This means `/production/app/var` and `test/app/var` both resolve to just `var`. To over-ride this default, use `entry_name` setting like so:\n\n```python\nfrom lambda_cache import ssm\n\n@ssm.cache(parameter='/production/app/var', entry_name='new_var')\ndef handler(event, context):\n    var = getattr(context,'new_var')\n    response = do_something(var)\n    return response\n```\n\n### <a name='Cachemultipleparameters'></a>Cache multiple parameters\n\nTo cache multiple entries at once, pass a list of parameters to the parameter argument. This method groups all the parameter value under one python dictionary, stored in the Lambda Context under the `entry_name`. \n\n_Note: When using this method, `entry_name` is a required parameter, if not present `NoEntryNameError` exception is thrown._\n\n```python\nfrom lambda_cache import ssm\n\n@ssm.cache(parameter=['/app/var1', '/app/var2'], entry_name='parameters')\ndef handler(event, context):\n    var1 = getattr(context,'parameters').get('var1')\n    var2 = getattr(context,'parameters').get('var2')\n    response = do_something(var)\n    return response\n```\n\nUnder the hood, we use the `get_parameters` API call for boto3, which translate to a single network call for multiple parameters. You can group all parameters types in a single call, including `String`, `StringList` and `SecureString`. `StringList` will return as a list, while all other types will return as plain-text strings. The library does not support returning `SecureString` parameters in encrypted form, and will only return plain-text strings regardless of String type.\n\n_Note: for this method to work, ensure you have both `ssm:GetParameter` **and** `ssm:GetParameters` (with the 's' at the end) in your function's permission policy_\n\n### <a name='Decoratorstacking'></a>Decorator stacking\n\nIf you wish to cache multiple parameters with different expiry times, stack the decorators. In this example, `var1` will be refreshed every 30 seconds, `var2` will be refreshed after 60.\n\n```python\n@ssm.cache(parameter='/production/app/var1', max_age_in_seconds=30)\n@ssm.cache(parameter='/production/app/var2', max_age_in_seconds=60)\ndef handler(event, context):\n    var1 = getattr(context,'var1')\n    var2 = getattr(context,'var2')\n    response = do_something(var)\n    return response\n```\n_Note: Decorator stacking performs one API call per decorator, which might result is slower performance_\n\n### <a name='Cacheinvalidation'></a>Cache invalidation\n\nIf you require a fresh value at some point of the code, you can force a refresh using the `ssm.get_entry` function, and setting the `max_age_in_seconds` argument to 0.\n\n```python\nfrom lambda_cache import ssm\n\n@ssm.cache(parameter='/prod/var')\ndef handler(event, context):\n\n    if event.get('refresh'):\n        # refresh parameter\n        var = ssm.get_entry(parameter='/prod/var', max_age_in_seconds=0)\n    else:\n        var = getattr(context,'var')\n    \n    response = do_something(var)\n    return response\n```\n\nYou may also use `ssm.get_entry` to get a parameter entry from anywhere in your functions code.\n\nTo only get parameter once in the lifetime of the function, set `max_age_in_seconds` to some arbitary large number ~36000 (10 hours).\n\n### <a name='ReturnValues'></a>Return Values\n\nCaching supports `String`, `SecureString` and `StringList` parameters with no change required (ensure you have `kms:Decrypt` permission for `SecureString`). For simplicity, `StringList` parameters are automatically converted into list (delimited by comma), while `String` and `SecureString` both return the single string value of the parameter.\n\n## <a name='SecretsManager'></a>Secrets Manager\n\n### <a name='Cachesinglesecret'></a>Cache single secret\n\nSecret support is similar, but uses the `secret.cache` decorator.\n\n```python\nfrom lambda_cache import secret\n\n@secret.cache(name='/prod/db/conn_string')\ndef handler(event, context):\n    conn_string = getattr(context,'conn_string')\n    return context\n```\n\n\n### <a name='ChangeCacheexpiry'></a>Change Cache expiry\n\nThe default `max_age_in_seconds` settings is 60 seconds (1 minute), it defines how long a parameter should be kept in cache before it is refreshed from ssm. To configure longer or shorter times, modify this argument like so:\n\n```python\nfrom lambda_cache import secret\n\n@secret.cache(name='/prod/db/conn_string', max_age_in_seconds=300)\ndef handler(event, context):\n    var = getattr(context,'conn_string')\n    response = do_something(var)\n    return response\n```\n\n_Note: The caching logic runs only at invocation, regardless of how long the function runs. A 15 minute lambda function will not refresh the parameter, unless explicitly refreshed using get_cache_ssm. The library is primary interested in caching 'across' invocation rather than 'within' an invocation_\n\n### <a name='ChangeCacheentrysettings'></a>Change Cache entry settings\n\nThe name of the secret is simply shortened to the string after the last slash('/') character of the secret's name. This means `/prod/db/conn_string` and `/test/db/conn_string` resolve to just `conn_string`. To over-ride this default, use `entry_name`:\n\n```python\nfrom lambda_cache import secret\n\n@secret.cache(name='/prod/db/conn_string', entry_name='new_var')\ndef handler(event, context):\n    var = getattr(context,'new_var')\n    response = do_something(var)\n    return response\n```\n\n### <a name='Decoratorstacking-1'></a>Decorator stacking\n\nIf you wish to cache multiple secrets, you can use decorator stacking.\n\n```python\n@secret.cache(name='/prod/db/conn_string', max_age_in_seconds=30)\n@secret.cache(name='/prod/app/elk_username_password', max_age_in_seconds=60)\ndef handler(event, context):\n    var1 = getattr(context,'conn_string')\n    var2 = getattr(context,'elk_username_password')\n    response = do_something(var)\n    return response\n```\n\n_Note: Decorator stacking performs one API call per decorator, which might result is slower performance._\n\n### <a name='CacheInvalidation'></a>Cache Invalidation\n\nTo invalidate a secret, use the `get_entry`, setting the `max_age_in_seconds=0`.\n```python\nfrom lambda_cache import secret\n\n@secret.cache(name='/prod/db/conn_string')\ndef handler(event, context):\n\n    if event.get('refresh'):\n        var = secret.get_entry(name='/prod/db/conn_string', max_age_in_seconds=0)\n    else:\n        var = getattr(context,'conn_string')\n    response = do_something(var)\n    return response\n```\n\n### <a name='ReturnValues-1'></a>Return Values\n\nSecrets Manager supports both string and binary secrets. For simplicity we will cache the secret in the format it is stored. It is up to the calling application to process the return as Binary or Strings.\n\n## <a name='S3'></a>S3\n\nS3 support is considered _experimental_ for now, but withing the python community we see a lot of folks pull down files from S3 for use in AI/ML models.\n\nFiles downloaded from s3 are automatically stored in the `/tmp` directory of the lambda function. This is the only writable directory within lambda, and has a 512MB of storage space. \n\n### <a name='Cacheasinglefile'></a>Cache a single file\nTo download a file from S3 use the the same decorator pattern:\n\n```python\nfrom lambda_cache import s3\n\n@s3.cache(s3Uri='s3://bucket_name/path/to/object.json')\ndef s3_download_entry_name(event, context):\n\n    # Object from S3 automatically saved to /tmp directory\n    with open(\"/tmp/object.json\") as file_data:\n        status = json.loads(file_data.read())['status']\n\n    return status\n```\n\n### <a name='ChangeCacheexpiry-1'></a>Change Cache expiry\n\nThe default `max_age_in_seconds` settings is 60 seconds (1 minute), it defines how long a file should be kept in `/tmp` before it is refreshed from S3. To configure longer or shorter times, modify this argument like so:\n\n```python\nfrom lambda_cache import s3\n\n@s3.cache(s3Uri='s3://bucket_name/path/to/object.json', max_age_in_seconds=300)\ndef s3_download_entry_name(event, context):\n    with open(\"/tmp/object.json\") as file_data:\n        status = json.loads(file_data.read())['status']\n\n    return status\n```\n\n_Note: The caching logic runs only at invocation, regardless of how long the function runs. A 15 minute lambda function will not refresh the object, unless explicitly refreshed using `s3.get_entry`. The library is primary interested in caching 'across' invocation rather than 'within' an invocation_\n\n### <a name='Checkfilebeforedownload'></a>Check file before download\n\nBy default, _lambda_cache_ will download the file once at cache has expired, however, to save on network bandwidth (and possibly time), we can set the `check_before_download` parameter to True. This will check the age of the object in S3 and download **only** if the object has changed since the last download. \n\n```python\nfrom lambda_cache import s3\n\n@s3.cache(s3Uri='s3://bucket_name/path/to/object.json', max_age_in_seconds=300, check_before_download=True)\ndef s3_download_entry_name(event, context):\n    with open(\"/tmp/object.json\") as file_data:\n        status = json.loads(file_data.read())['status']\n\n    return status\n```\n\n_Note: we use the GetHead object call to verify the objects `last_modified_date`. This simplifies the IAM policy of the function, as it still only requires the `s3:GetObject` permission. However, this is still a GET requests, and will be charged as such, for smaller objects it might be cheaper to just download the object_\n\n# Credit\n\nProject inspired by:\n* [SSM-Cache](https://github.com/alexcasalboni/ssm-cache-python)\n* [middy](https://github.com/middyjs/middy)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/keithrozario/lambda-cache",
    "keywords": "aws,aws_parameter_store,aws_lambda,cache",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lambda-cache",
    "package_url": "https://pypi.org/project/lambda-cache/",
    "platform": "",
    "project_url": "https://pypi.org/project/lambda-cache/",
    "project_urls": {
      "Bug Tracker": "https://github.com/keithrozario/lambda_cache/issues",
      "Docs": "https://lambda-cache.readthedocs.io",
      "Documentation": "https://lambda-cache.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/keithrozario/lambda-cache",
      "Repository": "https://github.com/keithrozario/lambda-cache"
    },
    "release_url": "https://pypi.org/project/lambda-cache/0.8.1/",
    "requires_dist": null,
    "requires_python": ">=3.6.1,<4.0.0",
    "summary": "Python utility for simple caching in AWS Lambda functions",
    "version": "0.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7036393,
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4be66f4f204f9d06960656bcae7a048e573c4302c2988b390750efa44c4b64f",
          "md5": "c11854e0bc50935a72f632becd666445",
          "sha256": "8b774f2dda214d31b4658235b6e45e3e43e856ea52f034df42d9c360c026b204"
        },
        "downloads": -1,
        "filename": "lambda_cache-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c11854e0bc50935a72f632becd666445",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 8432,
        "upload_time": "2020-04-07T14:33:13",
        "upload_time_iso_8601": "2020-04-07T14:33:13.776908Z",
        "url": "https://files.pythonhosted.org/packages/a4/be/66f4f204f9d06960656bcae7a048e573c4302c2988b390750efa44c4b64f/lambda_cache-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "422e0d783a542af0e2d9cbf97b45285c3573ae1fdfbb2f5f9130f869e1ae8575",
          "md5": "2e9b569d076f93a020b3abb18f75b6c5",
          "sha256": "b06189cf7bfaf83ef04fd40458228af0b9d525b8430238d223107980828d38d3"
        },
        "downloads": -1,
        "filename": "lambda-cache-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2e9b569d076f93a020b3abb18f75b6c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 9235,
        "upload_time": "2020-04-07T14:33:11",
        "upload_time_iso_8601": "2020-04-07T14:33:11.616142Z",
        "url": "https://files.pythonhosted.org/packages/42/2e/0d783a542af0e2d9cbf97b45285c3573ae1fdfbb2f5f9130f869e1ae8575/lambda-cache-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb9201d7781fd0cde87a92b1ec665c91b3255c7cc38b27ae2599224d310eef51",
          "md5": "bf81f0d4f5ab200da26047791bca8f0f",
          "sha256": "3c9db83faf520be3fa92add43f5d9d9791c952957f3d7b05803112741db43b0c"
        },
        "downloads": -1,
        "filename": "lambda_cache-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf81f0d4f5ab200da26047791bca8f0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 8375,
        "upload_time": "2020-04-07T15:46:33",
        "upload_time_iso_8601": "2020-04-07T15:46:33.988041Z",
        "url": "https://files.pythonhosted.org/packages/eb/92/01d7781fd0cde87a92b1ec665c91b3255c7cc38b27ae2599224d310eef51/lambda_cache-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61fe55505427684dda35595336c94dd7b7fce723d6522ebf394447200217d9ab",
          "md5": "43edb785d3273e2c85ccf280c20e24b9",
          "sha256": "a86197579bf23bbdaec7241e58496bba87d3efd76a76bb53721b4b6143af60f3"
        },
        "downloads": -1,
        "filename": "lambda-cache-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "43edb785d3273e2c85ccf280c20e24b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 9101,
        "upload_time": "2020-04-07T15:46:32",
        "upload_time_iso_8601": "2020-04-07T15:46:32.835446Z",
        "url": "https://files.pythonhosted.org/packages/61/fe/55505427684dda35595336c94dd7b7fce723d6522ebf394447200217d9ab/lambda-cache-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "438b0118c988a4384e057172299586c07e6ea778ff71c7a8e7583e240c7ce804",
          "md5": "8cc7af8f98773227fe3a552a2eaf6bc6",
          "sha256": "ba9327637d9e49ea9da59d4937d49f676a0644889ed0b2705f347026e9e57597"
        },
        "downloads": -1,
        "filename": "lambda_cache-0.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8cc7af8f98773227fe3a552a2eaf6bc6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 8378,
        "upload_time": "2020-04-07T16:34:11",
        "upload_time_iso_8601": "2020-04-07T16:34:11.047763Z",
        "url": "https://files.pythonhosted.org/packages/43/8b/0118c988a4384e057172299586c07e6ea778ff71c7a8e7583e240c7ce804/lambda_cache-0.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15837e6ed463ad8affe1e4185d6734991c1c343b13c22862f79926b2fdd62c40",
          "md5": "88d3c9762b6d98a501eafe2f158bca4d",
          "sha256": "8dbc072847ea50e15506b778ad4d5dd10446bfb5c30cb115876d0ccb770b5622"
        },
        "downloads": -1,
        "filename": "lambda-cache-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "88d3c9762b6d98a501eafe2f158bca4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 9108,
        "upload_time": "2020-04-07T16:34:10",
        "upload_time_iso_8601": "2020-04-07T16:34:10.138455Z",
        "url": "https://files.pythonhosted.org/packages/15/83/7e6ed463ad8affe1e4185d6734991c1c343b13c22862f79926b2fdd62c40/lambda-cache-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25b79bde206445bed15e550a252a382ef1c9ca475babb50adc14cd972834c505",
          "md5": "f9da0787b5a4d55509aafa4decf85de2",
          "sha256": "cae10bc8c2561db5eeb0b9b90b000f448ffcf47f55b559e13658d4b5ffae3b4f"
        },
        "downloads": -1,
        "filename": "lambda_cache-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9da0787b5a4d55509aafa4decf85de2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 10953,
        "upload_time": "2020-04-13T01:41:57",
        "upload_time_iso_8601": "2020-04-13T01:41:57.996195Z",
        "url": "https://files.pythonhosted.org/packages/25/b7/9bde206445bed15e550a252a382ef1c9ca475babb50adc14cd972834c505/lambda_cache-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2d985ec18ae4613e95ab80972d9b958ad05b0edfad48b88d47fbe752978c900",
          "md5": "f7430ae37c803a0f380b513ebaaed764",
          "sha256": "5c1721a4b5d30cb42a501a732f48348e5007ad643b3c4adce94929aa90490b96"
        },
        "downloads": -1,
        "filename": "lambda-cache-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f7430ae37c803a0f380b513ebaaed764",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 12597,
        "upload_time": "2020-04-13T01:41:56",
        "upload_time_iso_8601": "2020-04-13T01:41:56.730811Z",
        "url": "https://files.pythonhosted.org/packages/c2/d9/85ec18ae4613e95ab80972d9b958ad05b0edfad48b88d47fbe752978c900/lambda-cache-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f3cb64e2a147584485d33070cbfb9696156d80ae0592858ad8676de1c08d33d",
          "md5": "01c63de5829b5f5fdcbd5a5f69325de6",
          "sha256": "27a92c8a7f5829fd65d1661c582c52f55d6d4c95460e4395b87091dd08a4311f"
        },
        "downloads": -1,
        "filename": "lambda_cache-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01c63de5829b5f5fdcbd5a5f69325de6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 11780,
        "upload_time": "2020-04-17T00:33:28",
        "upload_time_iso_8601": "2020-04-17T00:33:28.487362Z",
        "url": "https://files.pythonhosted.org/packages/9f/3c/b64e2a147584485d33070cbfb9696156d80ae0592858ad8676de1c08d33d/lambda_cache-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cb5416098fd145bc09b1325ddb5e3d702ede7cedcf67041c4acd2f550b52409",
          "md5": "f77f9779a218ec7377610e0ab5ed30b7",
          "sha256": "3ccaaccef02ae8e0c09918a8b1a5ec73707a79ee70b2029e2263c1f1a11786d9"
        },
        "downloads": -1,
        "filename": "lambda-cache-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f77f9779a218ec7377610e0ab5ed30b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 14275,
        "upload_time": "2020-04-17T00:33:27",
        "upload_time_iso_8601": "2020-04-17T00:33:27.446827Z",
        "url": "https://files.pythonhosted.org/packages/2c/b5/416098fd145bc09b1325ddb5e3d702ede7cedcf67041c4acd2f550b52409/lambda-cache-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f3cb64e2a147584485d33070cbfb9696156d80ae0592858ad8676de1c08d33d",
        "md5": "01c63de5829b5f5fdcbd5a5f69325de6",
        "sha256": "27a92c8a7f5829fd65d1661c582c52f55d6d4c95460e4395b87091dd08a4311f"
      },
      "downloads": -1,
      "filename": "lambda_cache-0.8.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01c63de5829b5f5fdcbd5a5f69325de6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.1,<4.0.0",
      "size": 11780,
      "upload_time": "2020-04-17T00:33:28",
      "upload_time_iso_8601": "2020-04-17T00:33:28.487362Z",
      "url": "https://files.pythonhosted.org/packages/9f/3c/b64e2a147584485d33070cbfb9696156d80ae0592858ad8676de1c08d33d/lambda_cache-0.8.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2cb5416098fd145bc09b1325ddb5e3d702ede7cedcf67041c4acd2f550b52409",
        "md5": "f77f9779a218ec7377610e0ab5ed30b7",
        "sha256": "3ccaaccef02ae8e0c09918a8b1a5ec73707a79ee70b2029e2263c1f1a11786d9"
      },
      "downloads": -1,
      "filename": "lambda-cache-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f77f9779a218ec7377610e0ab5ed30b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1,<4.0.0",
      "size": 14275,
      "upload_time": "2020-04-17T00:33:27",
      "upload_time_iso_8601": "2020-04-17T00:33:27.446827Z",
      "url": "https://files.pythonhosted.org/packages/2c/b5/416098fd145bc09b1325ddb5e3d702ede7cedcf67041c4acd2f550b52409/lambda-cache-0.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}