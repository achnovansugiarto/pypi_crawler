{
  "info": {
    "author": "Yufu Luo",
    "author_email": "fisherman.luo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "\n************\nPenguinSDK(腾讯内容开放平台SDK)\n************\n\n.. image:: https://travis-ci.org/Luoyufu/penguinSDK.svg?branch=master\n    :target: https://travis-ci.org/Luoyufu/penguinSDK\n\n.. image:: https://codecov.io/gh/Luoyufu/penguinSDK/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/Luoyufu/penguinSDK\n\n.. image:: https://img.shields.io/pypi/v/penguinSDK.svg\n  :target: https://pypi.python.org/pypi/penguinSDK\n\n.. image:: https://img.shields.io/pypi/pyversions/penguinSDK.svg\n  :target: https://pypi.python.org/pypi/penguinSDK\n\n\n`腾讯内容开放平台API <https://open.om.qq.com/resources/resourcesCenter>`_ 的Python SDK。\n\n概述\n========\nPenguinSDK实现了腾讯内容开放平台的全部API：\n\n* 授权/oauth API\n* 第三方服务API\n* 内容网站API\n\nSDK基于声明式API框架 `doclink <https://github.com/Luoyufu/doclink>`_ 实现\n\n使用\n====\n内容网站API\n--------\n* 获取credential(授权凭证)\n.. code-block:: python\n\n    from penguinsdk import Penguin\n\n\n    penguin = Penguin('client_id', 'client_secret')\n    penguin.build_content_site_credential()\n\n    >>> print(penguin.credential)\n    access_token:<access_token>\n    openid:<openid>\n    refresh_token:None\n    client_id:<client_id>\n    expiry:1520766527\n\n* 通过access_token构建credential\n.. code-block:: python\n\n    penguin = Penguin('client_id', 'client_secret')\n    penguin.build_content_site_credential(access_token='access_token')\n\n    >>> print(penguin.credential)\n    access_token:access_token\n    openid:None\n    refresh_token:None\n    client_id:client_id\n    expiry:None\n\n* 调用API\ncredential构建好之后，就可以通过Penguin对象调用内容网站API\n.. code-block:: python\n\n    penguin = Penguin('client_id', 'client_secret')\n    penguin.build_content_site_credential()\n\n    media_info = penguin.media_info()  # 获取自媒体基本信息\n\n    >>> print(media_info)\n    {'nick': '青铜味', 'header': 'http://inews.gtimg.com/newsapp_ls/0/2720632941_200200/0'}\n\n第三方服务\n-----\n\n第三方服务需要通过oauth2协议获取用户许可\n\n* oauth流程：oauth_flow\n\n1. 获取授权页地址\n\n.. code-block:: python\n\n    from penguinsdk import Penguin\n\n    penguin = Penguin('client_id', 'client_secret')\n    oauth2_flow = penguin.oauth2_flow\n    authorization_url = oauth2_flow.get_authorization_url(redirect_uri='redirect_uri', state='state')\n\n    >>> print(authorization_url)\n    'https://auth.om.qq.com/omoauth2/authorize?response_type=code&client_id=client_id&redirect_uri=redirect_uri&state=state'\n\n2. 客户端在上一步的授权地址获得用户授权，将向redirect_uri回调授权码code\n\n3. 通过code交换access_token并获得credential实例。credential中包含access_token, refresh_token, openid, expiry可以保存下来以便后续使用。\n\n.. code-block:: python\n\n    penguin = Penguin('client_id', 'client_secret')\n\n    code = 'auth_code'\n    penguin.build_3rd_party_credential(code)\n\n    >>> print(penguin.credential)\n    access_token:<access_token>\n    openid:<openid>\n    refresh_token:<refresh_token>\n    client_id:<client_id>\n    expiry:1520766527\n\n4. 通过已有授权信息构建credentials\n\n.. code-block:: python\n\n    penguin = Penguin('client_id', 'client_secret')\n    penguin.build_3rd_party_credential(\n        access_token='access_token',\n        refresh_token='refresh_token',\n        openid='openid',\n        expiry=1520766527)\n\n    >>> print(penguin.credential)\n    access_token:'access_token'\n    openid:'openid'\n    refresh_token:'refresh_token'\n    client_id:'client_id'\n    expiry:1520766527\n\n5. 调用API\n\ncredential构建好之后，就可以通过Penguin对象调用第三方服务的API\n\n.. code-block:: python\n\n    penguin = Penguin('client_id', 'client_secret')\n    penguin.build_3rd_party_credential(\n        access_token='access_token',\n        refresh_token='refresh_token',\n        openid='openid',\n        expiry=1520766527)\n\n    penguin.media_info()\n\n    >>> print(media_info)\n    {'nick': '青铜味', 'header': 'http://inews.gtimg.com/newsapp_ls/0/2720632941_200200/0'}\n\nAPI汇总\n=====\n内容网站API\n-------\n\n调用时，penguin将自动传入access_token, 其余参数通过命名参数方式传入\n\n.. code-block:: python\n\n    from doclink import Consumer\n    from ..endpoints import api_content_site as endpoints\n    from .. import utils\n\n    consumer = Consumer(\n        endpoints.base_uri,\n        expected_status_code=200)\n    consumer.resp_hook(utils.preprocess_resp)\n\n\n    @consumer.get(endpoints.media_info)\n    def media_info(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n        </meta>\n        \"\"\"\n        return resp.json_['data']\n\n\n    @consumer.get(endpoints.transaction_info)\n    def transaction_info(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - transaction_id\n        </meta>\n        \"\"\"\n        return resp.json_['data']\n\n\n    @consumer.get(endpoints.article_list)\n    def article_list(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - page\n                    - limit: 10\n        </meta>\n        \"\"\"\n\n\n    @consumer.post(endpoints.publish_live)\n    def publish_live(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - title\n                    - start_time\n                    - end_time\n                    - cover_pic\n                    - rtmp_url\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.post(endpoints.publish_article)\n    def publish_article(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - title\n                    - content\n                    - cover_pic\n                    - apply:\n                        required: False\n                    - original_platform:\n                        required: False\n                    - original_url:\n                        required: False\n                    - original_author:\n                        required: False\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.post(endpoints.publish_video)\n    def publish_video(resp):\n        \"\"\"Upload a video and publish it.\n\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - title\n                    - tags\n                    - cat\n                    - md5\n                    - desc\n                    - apply:\n                        required: False\n                multipart: media\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.post(endpoints.apply_for_video_upload)\n    def apply_for_video_upload(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - size\n                    - md5\n                    - sha\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.post(endpoints.upload_video_chunk)\n    def upload_video_chunk(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - transaction_id\n                    - start_offset: 0\n                file: mediatrunk\n        </meta>\n        \"\"\"\n        return resp.json_['data']\n\n\n    @consumer.post(endpoints.publish_uploaded_video)\n    def publish_uploaded_video(resp):\n        \"\"\"Publish a uploaded video.\n\n        Vid is pointted to the uploaded vidoe.\n\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - title\n                    - tags\n                    - cat\n                    - desc\n                    - apply:\n                        required: False\n                    - vid\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.post(endpoints.upload_video_thumbnail)\n    def upload_video_thumbnail(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - md5\n                    - vid\n                file: media\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.get(endpoints.media_stats)\n    def media_stats(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n        </meta>\n        \"\"\"\n        return resp.json_['data']\n\n\n    @consumer.get(endpoints.media_daily_stats)\n    def media_daily_stats(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - begin_date:\n                        required: False\n                    - end_date:\n                        required: False\n        </meta>\n        \"\"\"\n        return resp.json_['data']\n\n\n    @consumer.get(endpoints.article_stats)\n    def article_stats(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - article_id\n        </meta>\n        \"\"\"\n        return resp.json_['data']\n\n\n    @consumer.get(endpoints.article_daily_stats)\n    def article_daily_stats(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - article_id\n                    - begin_date:\n                        required: False\n                    - end_date:\n                        required: False\n        </meta>\n        \"\"\"\n        return resp.json_['data']\n\n第三方服务API\n--------\n\n调用时，penguin将自动传入access_token和openid, 其余参数通过命名参数方式传入\n\n.. code-block:: python\n\n    from doclink import Consumer\n    from ..endpoints import api_3rd_party as endpoints\n    from .. import utils\n\n    consumer = Consumer(\n        endpoints.base_uri,\n        expected_status_code=200)\n    consumer.resp_hook(utils.preprocess_resp)\n\n\n    @consumer.get(endpoints.media_info)\n    def media_info(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - openid\n        </meta>\n        \"\"\"\n        return resp.json_['data']\n\n\n    @consumer.get(endpoints.transaction_info)\n    def transaction_info(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - openid\n                    - transaction_id\n        </meta>\n        \"\"\"\n        return resp.json_['data']\n\n\n    @consumer.get(endpoints.article_list)\n    def article_list(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - openid\n                    - page\n                    - limit: 10\n        </meta>\n        \"\"\"\n\n\n    @consumer.post(endpoints.publish_live)\n    def publish_live(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - openid\n                    - title\n                    - start_time\n                    - end_time\n                    - cover_pic\n                    - rtmp_url\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.post(endpoints.publish_article)\n    def publish_article(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - openid\n                    - title\n                    - content\n                    - cover_pic\n                    - apply:\n                        required: False\n                    - original_platform:\n                        required: False\n                    - original_url:\n                        required: False\n                    - original_author:\n                        required: False\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.post(endpoints.publish_video)\n    def publish_video(resp):\n        \"\"\"Upload a video and publish it.\n\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - openid\n                    - title\n                    - tags\n                    - cat\n                    - md5\n                    - desc: ''\n                    - apply:\n                        required: False\n                multipart: media\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.post(endpoints.apply_for_video_upload)\n    def apply_for_video_upload(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - openid\n                    - size\n                    - md5\n                    - sha\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.post(endpoints.upload_video_chunk)\n    def upload_video_chunk(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - openid\n                    - transaction_id\n                    - start_offset: 0\n                file: mediatrunk\n        </meta>\n        \"\"\"\n        return resp.json_['data']\n\n\n    @consumer.post(endpoints.publish_uploaded_video)\n    def publish_uploaded_video(resp):\n        \"\"\"Publish a uploaded video.\n\n        Vid is pointted to the uploaded vidoe.\n\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - openid\n                    - title\n                    - tags\n                    - cat\n                    - desc\n                    - apply:\n                        required: False\n                    - vid\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n    @consumer.post(endpoints.upload_video_thumbnail)\n    def upload_video_thumbnail(resp):\n        \"\"\"\n        <meta>\n            args:\n                query:\n                    - access_token\n                    - openid\n                    - md5\n                    - vid\n                file: media\n        </meta>\n        \"\"\"\n        return resp.json_['data']['transaction_id']\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "penguinSDK",
    "package_url": "https://pypi.org/project/penguinSDK/",
    "platform": "",
    "project_url": "https://pypi.org/project/penguinSDK/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/penguinSDK/1.0.2/",
    "requires_dist": [
      "doclink (>=1.0.7)"
    ],
    "requires_python": "",
    "summary": "python sdk to query API from penguin(腾讯内容开放平台)",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3660557,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53db57e60b64844606521ae8f316215747bec6bc0f74717f54ce3d106a4ee235",
          "md5": "02cbf4aa6f1426984bf09bd6a156eb8c",
          "sha256": "c0609e32f34d6a6e9d924ff7bd636a369a132f38642d34c6f3c9a911162d8fd6"
        },
        "downloads": -1,
        "filename": "penguinSDK-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02cbf4aa6f1426984bf09bd6a156eb8c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 21224,
        "upload_time": "2018-03-12T07:05:28",
        "upload_time_iso_8601": "2018-03-12T07:05:28.095136Z",
        "url": "https://files.pythonhosted.org/packages/53/db/57e60b64844606521ae8f316215747bec6bc0f74717f54ce3d106a4ee235/penguinSDK-1.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b590bafaed694c20d962f8595d8505e4262b98b26eb8c620397f02c6b791958",
          "md5": "fab7ffff639224471b8be43c293c5869",
          "sha256": "fdeb9a4ce8514f16323cbac2b927fdfc07201813f7d50cae9d5ce2cf3486cd18"
        },
        "downloads": -1,
        "filename": "penguinSDK-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fab7ffff639224471b8be43c293c5869",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16534,
        "upload_time": "2018-03-12T07:05:29",
        "upload_time_iso_8601": "2018-03-12T07:05:29.746359Z",
        "url": "https://files.pythonhosted.org/packages/2b/59/0bafaed694c20d962f8595d8505e4262b98b26eb8c620397f02c6b791958/penguinSDK-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53db57e60b64844606521ae8f316215747bec6bc0f74717f54ce3d106a4ee235",
        "md5": "02cbf4aa6f1426984bf09bd6a156eb8c",
        "sha256": "c0609e32f34d6a6e9d924ff7bd636a369a132f38642d34c6f3c9a911162d8fd6"
      },
      "downloads": -1,
      "filename": "penguinSDK-1.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "02cbf4aa6f1426984bf09bd6a156eb8c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 21224,
      "upload_time": "2018-03-12T07:05:28",
      "upload_time_iso_8601": "2018-03-12T07:05:28.095136Z",
      "url": "https://files.pythonhosted.org/packages/53/db/57e60b64844606521ae8f316215747bec6bc0f74717f54ce3d106a4ee235/penguinSDK-1.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b590bafaed694c20d962f8595d8505e4262b98b26eb8c620397f02c6b791958",
        "md5": "fab7ffff639224471b8be43c293c5869",
        "sha256": "fdeb9a4ce8514f16323cbac2b927fdfc07201813f7d50cae9d5ce2cf3486cd18"
      },
      "downloads": -1,
      "filename": "penguinSDK-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "fab7ffff639224471b8be43c293c5869",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16534,
      "upload_time": "2018-03-12T07:05:29",
      "upload_time_iso_8601": "2018-03-12T07:05:29.746359Z",
      "url": "https://files.pythonhosted.org/packages/2b/59/0bafaed694c20d962f8595d8505e4262b98b26eb8c620397f02c6b791958/penguinSDK-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}