{
  "info": {
    "author": "Ben Bowers",
    "author_email": "nanobowers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development"
    ],
    "description": "# py2cr.py\n\nA code translator using AST from Python to Crystal. This is basically a\nNodeVisitor with Crystal output. See AST documentation\n(<https://docs.python.org/3/library/ast.html>) for more information.\n\n## Status\n\nCurrently more than 80% of the relevant tests are passing.  See more information below.\n\n## Installation\n\nExecute the following:\n```\npip install py2cr\n```\nor\n```\ngit clone git://github.com/nanobowers/py2cr.git\n```\n\n## Versions\n\n- Python 3.6 .. 3.9\n- Crystal 1.1+\n\n## Dependencies\n\n### Python\n\n```\npip install pyyaml\n\n# Converts to num.cr in crystal-space\npip install numpy\n\n# Probably not needed for much longer since py2 support is going to be removed.\npip install six \n```\n\n### Crystal\n\n* [num.cr](https://github.com/crystal-data/num.cr/) - Preliminary support for translating numpy python code into crystal relies on num.cr.  This requires the latest (master) branch.\n\n## Methodology\n\nIn addition to walking and writing the AST tree and writing a Crystal\nsyntax output, this tool either: \n- Monkey-patches some common Crystal stdlib Structs/Classes in order to emulate the Python equivalent functionality.\n- Calls equivalent Crystal methods to the Python equivalent\n- Calls wrapped Crystal methods that provide Python equivalent functionality\n\n## Usage\n\nGenerally, `py2cr.py somefile.py > somefile.cr`\n\nThere is a Crystal shim/wrapper library in `src/py2cr` (and linked into `lib/py2cr`) that is also referenced in the generated script.  You may need to copy that as needed, though eventually it may be appropriate to convert it to a shard if that is more appropriate.\n\n## Tests\n\n```\n$ ./run_tests.py\n```\nWill run all tests that are supposed to work. If any test fails, its\na bug.  (Currently there are a lot of failing tests!!)\n\n```\n$ ./run_tests.py -a\n```\nWill run all tests including those that are known to fail (currently).\nIt should be understandable from the output.\n\n```\n$ ./run_tests.py basic\n```\nWill run all tests matching *basic*.  Useful because running the entire test-suite can take a while.\n\n```\n$ ./run_tests.py -x or $ ./run_tests.py --no-error\n```\nWill run tests but ignore if an error is raised by the test. This is not\naffecting the error generated by the test files in the tests directory.\n\nFor additional information on flags, run:\n```\n./run_tests.py -h\n```\n\n### Writing new tests\nAdding tests for most new or existing functionality involves adding additional python files at `tests/<subdirectory/<testname>.py`.\n\nThe test-runner scripts will automatically run py2cr to produce a Crystal script, then run both the Python and Crystal scripts, then compare stdout/stderr and check return codes.\n\nFor special test-cases, it is possible to provide a configuration YAML file on a per test basis named `tests/<subdirectory>/<testname>.config.yaml` which overrides defaults for testing.  The following keys/values are supported:\n\n```\nmin_python_version: [int, int] # minimum major/minor version\nmax_python_version: [int, int] # maximum major/minor version\nexpected_exit_status: int      # exit status for py/cr test script\nargument_list: [str, ... str]  # list of strings as extra args for argv\n```\n\n## Typing\n\nSome amount of typing support in Python is translated to Crystal.  Completely untyped Python code in many cases will not be translatable to compilable Crystal.   Rudimentary for python `Optional` and `Union` should convert appropriately to Crystal typing.\n\nSome inference of bare list/dict types can now convert to `[] of X` and `{} of X`, however `set` and `tuple` may not work properly.\n\n## Status\n\nThis is incomplete and many of the tests brought forward from py2rb do not pass.  Some of them may never pass as-is due to significant language / compilation differences (even moreso than Python vs. Ruby)\n\nTo some extent, it will always be incomplete.  The goal is to cover common cases and reduce the additional work to minimum-viable-program.\n\nNumpy tests have been disabled from the default testsuite, but about 1/3rd of them are operational and can be run with `./run_tests.py numpy`\n\n\nAdditional tests have been imported from [py2many](https://github.com/adsharma/py2many).  Many of these do not operate (known to fail), but some have been used to enhance coverage of py2cr. :tada:  Run these with `./run_tests.py py2many`\nIt is possible some of the py2many tests cover pre-existing tests, so some many be pruned out later on.\n\n## Limitations\n\n+ Many Python run-time exceptions are not translatable into Crystal as these issues manifest in Crystal as compile-time errors.\n+ A significant portion of python code is untyped and may not translate properly in places where Crystal demands type information.\n    + e.g. Crystal Lambda function parameters require typing and this is very uncommon in Python, though may be possible with `Callable[]` on the python side.\n+ Python importing is significantly different than Crystal and thus may not ever map well.\n+ Python Unittest does not have an equivalent in Crystal.  With some significant additional work, converting tests into `Spec` format may be possible via https://github.com/jaredbeck/minitest_to_rspec as a guide.\n\n## To-do\n\n+ [x] Remove python2/six dependencies to reduce clutter. Py2 has been end-of-lifed for a while now.\n+ [x] Remove numpy dependencies unless/until a suitable target for Crystal can be identified (targeting num.cr now)\n+ [ ] Add additional Crystal shim methods to translate common python3 stdlib methods.  Consider a mode that just maps to a close Crystal method rather than using a shim-method to reduce the python-ness.\n+ [ ] Refactor the code-base.  Most of it is in the `__init__.py`\n+ [x] Add additional unit-tests\n+ [ ] Multi-thread the test-suite so it can run faster.\n\n## Contribute\n\nFree to submit an issue.   This is very much a work in progress, contributions or constructive feedback is welcome.\n\nIf you'd like to hack on `py2cr`, start by forking the repo on GitHub:\n\nhttps://github.com/nanobowers/py2cr\n\n## Contributing\n\nThe best way to get your changes merged back into core is as follows:\n\n1. Fork it (<https://github.com/nanobowers/py2cr/fork>)\n2. Create a thoughtfully named topic branch to contain your change (`git checkout -b my-new-feature`)\n3. Hack away\n4. Add tests and make sure everything still passes by running `crystal spec`\n5. If you are adding new functionality, document it in the README\n8. If necessary, rebase your commits into logical chunks, without errors\n9. Commit your changes (`git commit -am 'Add some feature'`)\n10. Push to the branch (`git push origin my-new-feature`)\n11. Create a new Pull Request\n\n## License\n\nMIT, see the LICENSE file for exact details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nanobowers/py2cr",
    "keywords": "python crystal",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py2cr",
    "package_url": "https://pypi.org/project/py2cr/",
    "platform": "",
    "project_url": "https://pypi.org/project/py2cr/",
    "project_urls": {
      "Homepage": "https://github.com/nanobowers/py2cr"
    },
    "release_url": "https://pypi.org/project/py2cr/0.1.0/",
    "requires_dist": [
      "numpy",
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "A code translator using AST from Python to Crystal",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12415515,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e796a394e6bcf47cbcdd3b883112d36e1ad00303c9e9775b9b9a78829a2a5ba3",
          "md5": "b130c0b063778fb6e786cf1cc71b212a",
          "sha256": "14a85502ed044d21c279f100b6244b1565dd0a32fabd3fa31e2a34c916516f52"
        },
        "downloads": -1,
        "filename": "py2cr-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b130c0b063778fb6e786cf1cc71b212a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38800,
        "upload_time": "2021-12-27T16:35:09",
        "upload_time_iso_8601": "2021-12-27T16:35:09.481982Z",
        "url": "https://files.pythonhosted.org/packages/e7/96/a394e6bcf47cbcdd3b883112d36e1ad00303c9e9775b9b9a78829a2a5ba3/py2cr-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e796a394e6bcf47cbcdd3b883112d36e1ad00303c9e9775b9b9a78829a2a5ba3",
        "md5": "b130c0b063778fb6e786cf1cc71b212a",
        "sha256": "14a85502ed044d21c279f100b6244b1565dd0a32fabd3fa31e2a34c916516f52"
      },
      "downloads": -1,
      "filename": "py2cr-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b130c0b063778fb6e786cf1cc71b212a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 38800,
      "upload_time": "2021-12-27T16:35:09",
      "upload_time_iso_8601": "2021-12-27T16:35:09.481982Z",
      "url": "https://files.pythonhosted.org/packages/e7/96/a394e6bcf47cbcdd3b883112d36e1ad00303c9e9775b9b9a78829a2a5ba3/py2cr-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}