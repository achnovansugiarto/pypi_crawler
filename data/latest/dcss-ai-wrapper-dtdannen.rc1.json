{
  "info": {
    "author": "Dustin Dannenhauer",
    "author_email": "dannenhauerdustin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Documentation Status](https://readthedocs.org/projects/dcss-ai-wrapper/badge/?version=latest)](https://dcss-ai-wrapper.readthedocs.io/en/latest/?badge=latest)\n\n# AI Wrapper for Dungeon Crawl Stone Soup\n\n![](contribute/docker_web_browser_demo.gif)\n\n(Demo of an agent taking random actions to play DCSS in the browser using the docker container running a DCSS webserver instance)\n\n![](contribute/terminal_demo.gif)\n\n(Demo of an agent taking random actions to play DCSS in the terminal)\n\n# About\n\n**dcss-ai-wrapper** is an API for Dungeon Crawl Stone Soup for Artificial Intelligence research. This effort started with the following paper: \n\n*Dannenhauer, D., Floyd, M., Decker, J., Aha D. W. [Dungeon Crawl Stone Soup as an Evaluation Domain for Artificial Intelligence.](https://arxiv.org/pdf/1902.01769) Workshop on Games and Simulations for Artificial Intelligence. Thirty-Third AAAI Conference on Artificial Intelligence. Honolulu, Hawaii, USA. 2019.*\n\nIf you use this repository in your research, please cite the above paper.\n\nIf you'd like to contribute to the research effort aligned with this project, see [Research Effort](contribute/ResearchEffort.md) and [Roadmap](contribute/Roadmap.md)\n\n# Development Community\n\nJoin the chat at https://gitter.im/dcss-ai-wrapper/community\n\nCheckout the YouTube channel for live coding streams and tutorial videos (more content to come soon): https://www.youtube.com/channel/UCPR_UzIThpHNGEZos1SVmLQ \n\n# Quickstart\n\nClone this repository\n\n\n    git clone https://github.com/dtdannen/dcss-ai-wrapper.git    \n\nCreate a virtualenv and install packages\n\n\n    python3 -m venv .env\n\nOn Linux in the shell:\n\n\n    source .env/bin/activate\n\nOr on Windows from powershell:\n\n    ./Scripts/Activate.ps1\n\nThen to install all packages into this virtualenv:\n\n    pip install -r requirements.txt\n\n\nPull a pre-made docker image with the DCSS webserver installed (if you'd like to create your own docker or install DCSS yourself, see instructions below):\n\n    \n    docker pull dtdannen34/dcss-ai-wrapper\n\nRun the docker and open an interactive shell\n\n\n    docker run -it -p 8080:8080 b3d5cdf181b8\n\n\nNow launch the webserver from within the docker interactive shell by first activate python:\n\n    cd /dcss/crawl/crawl-ref/source/webserver\n    source venv/bin/activate\n\nThen run the webserver:\n\n    cd ..\n    python webserver/server.py\n    \n\nNow you can leave the docker alone, as long as it keeps running agents can connect and play the game.\n\nOpen your browser to http://localhost:8080/ to the DCSS browser interface, which should look like:\n\n\n![](contribute/dcss_browser_screenshot_1.png)\n\n\nClick on the 'Register' button and create an account with the following values:\n\n* Username: midca\n* Password: midca\n* Repeat password: midca\n* *Leave the Email Address field blank*\n\n![](contribute/dcss_browser_screenshot_2.png)\n\nThen click 'Submit'.\n\nBy default you'll be logged in on the browser but it's recommended for you to be logged out so go ahead and click the 'Logout' button.\n\n**Note:** Do not login on the browser yourself, creating the account is so that the agent in the API can connect and play. You will spectate the agent without logging in yourself.\n\n\nNow you can run your agent by running main_webserver.py:\n\n\n    python main_webserver.py\n\nWithin 1-2 seconds you should see the agent show up in the lobby of the web browser, something like this:\n\n![](contribute/dcss_browser_screenshot_3.png)\n\nWait for the agent to get past the character creation menus (there's a strange bug that appears if you spectate too early - this should only take a few seconds), then click on the agent's name, which in this case is 'midca'. You will now be spectating the agent, for example:\n\n![](contribute/dcss_browser_screenshot_4.png)\n\n\nNow you're all set to go with the SimpleRandomAgent being able to play the game! The rest of this README file contains additional details on using the DCSS AI Wrapper.\n\n# Quickest way to use API \n\nExample usage to create your own agent and run it:\n\n```python\nfrom dcss.agent.base import BaseAgent\nfrom dcss.state.game import GameState\nfrom dcss.actions.action import Action\nfrom dcss.websockgame import WebSockGame\nfrom dcss.connection.config import WebserverConfig\n\nimport random\n\nclass MyAgent(BaseAgent):\n\n    def __init__(self):\n        super().__init__()\n        self.gamestate = None\n\n    def get_action(self, gamestate: GameState):\n        self.gamestate = gamestate\n        # get all possible actions\n        actions = Action.get_all_move_commands()\n        # call your planner or policy instead of random: \n        return random.choice(actions)\n\ndef main():\n    my_config = WebserverConfig\n\n    # set game mode to Tutorial #1\n    my_config.game_id = 'tut-web-trunk'\n    my_config.tutorial_number = 1\n\n    # create game\n    game = WebSockGame(config=my_config,\n                      agent_class=MyAgent)\n    game.run()\n```\n\nRecommended next step: install FastDownward planner to run the FastDownwardPlanningAgent. \n\n# Install and run the fastdownward planner \n\n1. Download and compile the [fastdownward planner](http://www.fast-downward.org/ObtainingAndRunningFastDownward) and put it in a folder under dcss-ai-wrapper so the folder structure looks like this:\n\n    `dcss-ai-wrapper/FastDownward/fast-downward.py`\n\n2. Switch the agent in config.py `AIConfig.ai_python_class` to be the `FastDownwardPlanningAgent` agent, like:\n\n    `ai_python_class = 'FastDownwardPlanningAgent'`\n\n3. Run main_webserver.py and it should work. There's a chance that the fastdownward planner will fail to find a plan because of a missing feature of our api. Since the dungeon is procedurally generated, try a few times before troubleshooting fastdownward. If you do need to troubleshoot, start by displaying fastdownward's output. This can be done by removing the `stdout=subprocess.DEVNULL` option when calling FastDownward via subprocess in the FastDownwardPlanningAgent class.\n\n# Building the documentation\n\nMake sure the library is installed or autodoc may complain:\n\n    python\n    >>> import dcss\n\nIf you get a module not found error, install locally, for example:\n\n    cd dcss-ai-wrapper/\n    python -m pip install -e .\n\n#### Option 1:\n\nBuild the api documentation by:\n\n    sphinx-apidoc -f -o docs/api/ src/dcss/\n\nOn windows, use the make.bat script to create the html files:\n\n    .\\docs\\make.bat html\n    \nThen open `docs/_build/html/index.html` in your browser to view the documentation.\n\n##### If getting errors when building docs\n\nTry two things: (1) make clean, like:\n\n    .\\docs\\make.bat clean\n\nand also remove all files in the `docs/api/` folder before doing\n\n    sphinx-apidoc -f -o docs/api/ src/dcss/\n\nand then finally run make to generate the html\n\n    .\\docs\\make.bat html\n\n\n#### Option 2:\n\nUse sphinx-build from the root project directory like:\n\n    sphinx-build  -v -b html docs/ docs/_build\n\n\nIf getting the following error:\n\n    sphinx.errors.ExtensionError: Could not import extension autoapi.extension (exception: No module named 'autoapi')\n    \nthen you may need to install autoapi like:\n\n    pip install sphinx-autoapi\n\n# Installing DCSS from Source on Ubuntu\n\n### Pre-requisites\n\nThis guide has been tested on Ubuntu 18.04 LTS and assumes you have the following installed:\n\n- git | `sudo apt-get install git`\n- python2 | `sudo apt-get install python2.7`\n- pip2  | `sudo apt-get install python-pip`\n- python3 | `sudo apt-get install python3.6`\n- pip3 | `sudo apt-get install python3-pip`\n- A variety of packages required by Dungeon Crawl Stone Soup\n\n    `sudo apt-get install build-essential libncursesw5-dev bison flex liblua5.1-0-dev libsqlite3-dev libz-dev pkg-config python-yaml libsdl2-image-dev libsdl2-mixer-dev libsdl2-dev libfreetype6-dev libpng-dev ttf-dejavu-core`\n\n### Installing Dungeon Crawl Stone Soup\n\nWhile this API is likely to work with the current dcss master branch, it has been tested with the 23.1 version, which\nis the recommended version of crawl to use with this API. We recommend installing a local version of crawl inside this\nproject's folder.\n\n1. Make sure you have cloned this repository (dcss-ai-wrapper)\n    \n2. Grab a copy of the 23.1 version of crawl, by cloning the repo and then resetting to the 23.1 version\n\n   `cd ~/dcss-ai-wrapper/`  (assuming this is the directory where you cloned this project - dcss-ai-wrapper)\n   \n   `git clone https://github.com/crawl/crawl.git`\n   \n   `cd ~/dcss-ai-wrapper/crawl/`\n   \n   `git reset --hard d6e21ad81dcba7f7f8c15336e0e985f070ce85fb`\n   \n   `git submodule update --init`\n\n3. Compile crawl with the following flags\n\n    `cd ~/dcss-ai-wrapper/crawl/crawl-ref/source/`\n    \n    `sudo make install prefix=/usr/local/ WEBTILES=y`\n\n    __Note for installing on Ubuntu 20.04:__\n    \n    If you get an error saying \"/usr/bin/env cannot find python\", then one possible fix is to the do the following (but beware this may change the default python on your system)\n\n    `sudo ln --symbolic /usr/bin/python2.7 /usr/bin/python`\n\n    Note that Python2.7 is needed to compile crawl.\n    \n4. Check that the `crawl/crawl-ref/source/rcs' folder exists, if not create it:\n\n    `mkdir crawl/crawl-ref/source/rcs`\n\n# How to Run a simple agent in the terminal\n\n1. Open a new terminal, cd into dcss-ai-wrapper/ and run:\n\n    First time running the following script may require: `chmod +x start_crawl_terminal_dungeon.sh`\n\n    `./start_crawl_terminal_dungeon.sh`\n\n   Note that nothing will happen until an agent connects.\n   \n   The terminal that runs this command must be a minimum width and height, so try enlarging the terminal if it doesn't work and you are using a small monitor/screen. (Only try changing the width if the next step fails).\n\n2. Open a new terminal, cd into dcss-ai-wrapper/ and run:\n\n    `python3 main.py`\n\t    \n3. You should now be able to watch the agent in the terminal as this script is running, as shown in the demo gif at the top of this readme.\n\n\n## Web browser via Docker Image\n\nThe docker image is the quickest way to get a server up and running so that you can watch the agent play by spectating the game in the browser.\n\nAfter installing docker, do the following:\n\n    docker pull dtdannen34/dcss-ai-wrapper\n    \nThen run the docker in interactive mode:\n\n    docker run -it -p 8080:8080 b3d5cdf181b8\n    \nNow you should be in the command line of the docker container, and you need to run the webserver.\n\nFirst activate python:\n\n    cd /dcss/crawl/crawl-ref/source/webserver\n    source venv/bin/activate\n\nThen run the webserver:\n\n    cd ..\n    python webserver/server.py\n\nAnd now you should be able to open up a browser (I recommend chrome because firefox sometimes as issues with hotkeys that prevent you from interacting with crawl)\n\n    http://localhost:8080/\n    \nThen you need to register two accounts, one for the agent to connect to and another one for you to use for spectating. This is done via the web interface, click the register button and enter a username and password. It's recommend to use *midca* for the username and password for one of the accounts - these are the current default values used in the script that connects the AI to the webserver. You can choose any other username and password you want for the other user. You don't need to fill in the email field. Note that every time you start up the webserver you'll have to re-do this registration step because it's not saved between docker runs.\n\nThe next step is to run the `main_webserver.py` script. After a second, you should see the name *midca* pop up in the browser. If you click on it you should be able to watch the agent play. It's best to watch the agent from the browser that is signed into with the non-midca account (the one for spectating). \n\n\n### Older Instructions for manually setting up webserver\n\nThere is no guarantee that these instructions are still valid - proceed at your own risk :)\n\nThe following steps enable the API to connect to DCSS running on a webserver on the local host, which means you can watch\nyour AI agent play DCSS in the tile version that runs in the web browser.\n\n1. Install requirements to run the webserver version of the game\n\n    `sudo pip2 install tornado==3.0.2`\n    \n    `sudo pip3 install asyncio`\n    \n    `sudo pip3 install websockets`\n\n2. Test that the browser version of the game is working\n\n    `cd ~/dcss-ai-wrapper/crawl/crawl-ref/source/`\n    \n    `python2 webserver/server.py` \n\n     Now open your web browser and go to http://localhost:8080/\n\n     Click register at the top right (not necessary to enter an email).\n\n     Then after logging in, click the leftmost link under \"Play now:\" which is \"DCSS trunk\".\n     You should then go to a menu where you choose your character configuration (i.e. species > background > weapon)\n     Once you proceed through the menus you should find yourself in a newly generated world. If you've reached this\n     step (and can see the tiles) you have successfully installed the game.\n\n# Troubleshooting\n\n  Problem: Errors during compiling\n  Solution: Double check you installed all the packages listed at the\n  beginning that crawl needs. These come from the install instructions\n  for crawl itself.\n\n  Problem: No images showing up and getting errors from the webserver like:\n    'HTTPOutputError: Tried to write X number of bytes but error with content length'\n    \n  Solution: Make sure you are using tornado 3.0 (which may not be the version that installs by default)\n\n# Running the webserver\n----------\n\nNote these instructions may be outdated.\n\n## Start webserver\n\n   `cd crawl_18/crawl/crawl-ref/source/`\n   `python2 webserver/server.py`\n\n## now check to see if its up using a browser at localhost:8080\n\n### If this is the first time you are running this on your machine,\n  you will need to register an account on the webserver (in the\n  browser). Keep track of the username and password, as you will enter\n  this into the code file, which the agent will use to connect to the\n  server.\n\n## In a new terminal, go back to top level dir \n\n## run the test_interface script using python3 (sidenote: installing asyncio\n  on python2.x will initially work but then you get errors when trying\n  to import it)\n\n    `python3 main.py`\n\n# Watching the Agent Play\n\n1. Navigate your browser to localhost:8080\n\n2. You should see a list of agents playing, click on the agent's name to spectate (note, you do not need to log in for this). If you don't see the agent on the list, try refreshing the page.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dtdannen/dcss-ai-wrapper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dcss-ai-wrapper-dtdannen",
    "package_url": "https://pypi.org/project/dcss-ai-wrapper-dtdannen/",
    "platform": "",
    "project_url": "https://pypi.org/project/dcss-ai-wrapper-dtdannen/",
    "project_urls": {
      "Bug Tracker": "https://github.com/dtdannen/dcss-ai-wrapper/issues",
      "Homepage": "https://github.com/dtdannen/dcss-ai-wrapper"
    },
    "release_url": "https://pypi.org/project/dcss-ai-wrapper-dtdannen/0.0.8/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "API for Dungeon Crawl Stone Soup for Artificial Intelligence research.",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10759026,
  "releases": {
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d7bdd1980f863d14ce3f39698af706d3053532bf2f41eea92cb73d5e94526e2",
          "md5": "1ef95240d0d9976068398f83c1803ef1",
          "sha256": "320563d618edaa4c388ae3e1bf18a0d3b90f41ae3e10a1119aa5639d2ec769f0"
        },
        "downloads": -1,
        "filename": "dcss_ai_wrapper_dtdannen-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ef95240d0d9976068398f83c1803ef1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 98412,
        "upload_time": "2021-06-28T02:36:23",
        "upload_time_iso_8601": "2021-06-28T02:36:23.630266Z",
        "url": "https://files.pythonhosted.org/packages/8d/7b/dd1980f863d14ce3f39698af706d3053532bf2f41eea92cb73d5e94526e2/dcss_ai_wrapper_dtdannen-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c246361be1eec9afc177746f005a77480aba34f7cdd123db85cef34a3fbea21f",
          "md5": "bd0189446f5b21c1fff1123db2a64e42",
          "sha256": "04dca9f76f0390437b12cfdede7dc409f0ad4033e5e4da748bf88e4353afb54b"
        },
        "downloads": -1,
        "filename": "dcss-ai-wrapper-dtdannen-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "bd0189446f5b21c1fff1123db2a64e42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 88401,
        "upload_time": "2021-06-28T02:36:24",
        "upload_time_iso_8601": "2021-06-28T02:36:24.755014Z",
        "url": "https://files.pythonhosted.org/packages/c2/46/361be1eec9afc177746f005a77480aba34f7cdd123db85cef34a3fbea21f/dcss-ai-wrapper-dtdannen-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d7bdd1980f863d14ce3f39698af706d3053532bf2f41eea92cb73d5e94526e2",
        "md5": "1ef95240d0d9976068398f83c1803ef1",
        "sha256": "320563d618edaa4c388ae3e1bf18a0d3b90f41ae3e10a1119aa5639d2ec769f0"
      },
      "downloads": -1,
      "filename": "dcss_ai_wrapper_dtdannen-0.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1ef95240d0d9976068398f83c1803ef1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 98412,
      "upload_time": "2021-06-28T02:36:23",
      "upload_time_iso_8601": "2021-06-28T02:36:23.630266Z",
      "url": "https://files.pythonhosted.org/packages/8d/7b/dd1980f863d14ce3f39698af706d3053532bf2f41eea92cb73d5e94526e2/dcss_ai_wrapper_dtdannen-0.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c246361be1eec9afc177746f005a77480aba34f7cdd123db85cef34a3fbea21f",
        "md5": "bd0189446f5b21c1fff1123db2a64e42",
        "sha256": "04dca9f76f0390437b12cfdede7dc409f0ad4033e5e4da748bf88e4353afb54b"
      },
      "downloads": -1,
      "filename": "dcss-ai-wrapper-dtdannen-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "bd0189446f5b21c1fff1123db2a64e42",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 88401,
      "upload_time": "2021-06-28T02:36:24",
      "upload_time_iso_8601": "2021-06-28T02:36:24.755014Z",
      "url": "https://files.pythonhosted.org/packages/c2/46/361be1eec9afc177746f005a77480aba34f7cdd123db85cef34a3fbea21f/dcss-ai-wrapper-dtdannen-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}