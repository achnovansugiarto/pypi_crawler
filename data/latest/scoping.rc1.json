{
  "info": {
    "author": "l74d",
    "author_email": "l.d.code@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Probably the best way to simulate block scopes in Python.\n\nThis is a package, as it says on the tin, to emulate block scoping in Python, \nthe lack of which being a clever design choice yet sometimes a trouble.\n\nIn addition to readability and code organization \n(where your mileage may vary),\nblock scoping in particular helps to have variables garbage collected as soon as possible, which is useful for situations where variables may refer to expensive resources (e.g. GPU arrays).\n\n This package is designed to be as easy to use as possible, with the least mental burden on the user,\n whilst the implementation being necessarily confusing and cryptic due to the tricks used.\n\n## Usage\n\n Other than installing from PyPI the usual way,\nyou can also directly download scoping.py to where your main script is to use the package.\n\nTo start a scoped block (where the variables created in the block is to be deleted after the block) use\n\n    with scoping():\n        ....\n\nWithin a block, you can selectively let a variable leak through to the outer scope (as in the traditional behavior in Python) by passing the name (as a string) to\n\n    scoping.keep()\n\nIf you are only after using the library, \njust consider scoping and scoping.keep as \nsome kind of quasi-keywords rather than real classes/objects.\n\nSee \n\n    from scoping import scoping\n    a = 2\n    with scoping():\n        assert(2 == a)\n        a = 3\n        b = 4\n        scoping.keep('b')\n        assert(3 == a)\n    assert(2 == a)\n    assert(4 == b)\n\nIn the rare case that you would like to reserve the word \"scoping\" for other uses, the class can be renamed arbitrarily using the following trick:\n\n    import scoping\n    class VeryScoped(scoping.scoping): pass\n    del scoping\n\nThen the names \"VeryScoped\" and \"VeryScoped.keep\" can be used instead,\nwhereas the name \"scoping\" can be put to other uses at will.\n\nBlocks can be nested, as well as used in functions (unlike prior art),\nat the price of relying on some CPython specific feature.\n\n## Motivation/Prior Art\n\nSee https://github.com/bskinn/tempvars with a similar idea but not the intended use for general programming, as well as a more mentally demanding interface (IMHO).\n\n## Compatibility\n\nTested with python 3.6/7/8/9 under Linux",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/l74d/scoping",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scoping",
    "package_url": "https://pypi.org/project/scoping/",
    "platform": "",
    "project_url": "https://pypi.org/project/scoping/",
    "project_urls": {
      "Bug Tracker": "https://github.com/l74d/scoping/issues",
      "Homepage": "https://github.com/l74d/scoping"
    },
    "release_url": "https://pypi.org/project/scoping/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Probably the best way to simulate block scopes in Python.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10613137,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9e7d0aa1b1c13acc3a0fe58163139204bfc353c156d20ca6f9db1d2baf09c96",
          "md5": "171a80dde8fa0e904b4d4fff8b1dd967",
          "sha256": "9bf65830b0e43fc34880842503f551021d980699ee1b74c4d60f0611ac88e607"
        },
        "downloads": -1,
        "filename": "scoping-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "171a80dde8fa0e904b4d4fff8b1dd967",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5395,
        "upload_time": "2021-06-10T15:56:42",
        "upload_time_iso_8601": "2021-06-10T15:56:42.292135Z",
        "url": "https://files.pythonhosted.org/packages/b9/e7/d0aa1b1c13acc3a0fe58163139204bfc353c156d20ca6f9db1d2baf09c96/scoping-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9e7d0aa1b1c13acc3a0fe58163139204bfc353c156d20ca6f9db1d2baf09c96",
        "md5": "171a80dde8fa0e904b4d4fff8b1dd967",
        "sha256": "9bf65830b0e43fc34880842503f551021d980699ee1b74c4d60f0611ac88e607"
      },
      "downloads": -1,
      "filename": "scoping-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "171a80dde8fa0e904b4d4fff8b1dd967",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5395,
      "upload_time": "2021-06-10T15:56:42",
      "upload_time_iso_8601": "2021-06-10T15:56:42.292135Z",
      "url": "https://files.pythonhosted.org/packages/b9/e7/d0aa1b1c13acc3a0fe58163139204bfc353c156d20ca6f9db1d2baf09c96/scoping-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}