{
  "info": {
    "author": "IvÃ¡n de Paz Centeno",
    "author_email": "ipazc@unileon.es",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "\n# REMOTE DICT\n\n**RemoteDict** is a Python library intended to host a dictionary in a cloud backend.\nCurrently it is supported Azure Blob Storage.\n\n\n## USAGE - AZURE\n\nGrab a `CONNECTION_STRING` from your azure blob storage, then import the `AzureDictionary` as follows:\n\n```python\n>>> from remotedict.azure import AzureDictionary\n\n>>> remote_dict = AzureDictionary(CONNECTION_STRING, container_name=\"mycontainer\", folder_name=\"myfolder\")\n>>> remote_dict\nAzure Blob Storage. Container: \"mycontainer\"; Folder: \"myfolder\"; Num elements: 0\n\n>>> remote_dict[\"foo\"] = \"bar\"\n>>> remote_dict[\"foo\"]\nbar\n```\n\n`remote_dict` is an object that behaves like a python dictionary. However, it contains extensive functionality useful to dealing with large data and concurrency.\n\n## HOW IT WORKS\n\nOnce `remote_dict` is instantiated, it can be used to store any kind of data:\n```python\nremote_dict['example'] = \"hello\"\nremote_dict['example2'] = b\"binary data of any size\"\nremote_dict['example3'] = 42\nremote_dict['example4'] = {\"this\": {\"is\": b\"a subdictionary\", \"that\": \"holds\", \"any\": True, \"data\": 42}}\nremote_dict['example5'] = [\"even\", \"lists\", \"or\", \"numpy\", \"and\", \"pandas\"]\nremote_dict['example6'] = np.random.randn(10, 3, 1)\nremote_dict['example7'] = pd.DataFrame([1,2,3,4])\n```\n\nIt allows to shorten the assignments and readings in atomic operations:\n\n```python\nremote_dict[[\n    'example',\n    'example2',\n    'example3'\n]] = \"hello\", b\"binary data\", 42\n```\n\nEach entry is stored as an LZ4-compressed binary in a single file inside the specified container and folder during instantiation of `remote_dict`.\nThere are no soft limits in the size a value can have.\n\n## INDEXES\n\nIn **RemoteDict**, there is a concept of *Index* which allows to retrieve all the keys instantly without iterating the backend for elements.\n\nThis index functionality is achieved by using a file as an indexer, ensuring that concurrency can't break it by using cloud leases on the file.\n\nFor this reason, the folder \"Index\" in the cloud container is reserved and handled automatically by **RemoteDict**. \n\nRather than downloading the index file each time an index check is required, the class only checks the `etag` of the file (which is faster than downloading it). If the `etag` does not match the local `etag`, the index is redownloaded ensuring to be always up-to-date.\n\nThe index is a `pd.Series` object that can be accessed as follows:\n\n```python\n>>> remote_dict.index\nexample      example/example\nexample2    example/example2\nexample3    example/example3\nexample4    example/example4\nexample5    example/example5\nexample6    example/example6\nexample7    example/example7\nName: name, dtype: object\n```\n\n## CONCURRENT ACCESS\n\nConcurrent readings are allowed by nature, however, concurrent writes are a bit more complex. `RemoteDict` deals with concurrency by allowing to acquire leases on custom elements.\n\nExample to lock an element:\n\n```python\n>>> remote_dict.lock_item(\"example\", duration=15)  # duration in seconds\n```\n\nOnce the element is locked, no other `remote_dict` (anywhere, even different machines) can lock or write to this item again unless the item is manually unlocked or the duration expires. \nIf another element tries to lock it, `remote_dict` will wait for it to be released (default behaviour) or raise an exception if `wait=False`.\n\nIt can only be written by this object as long as the lease is conceived. \n\nTo unlock the element:\n\n```python\n>>> remote_dict.unlock_item(\"example\") \n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ipazc/remotedict",
    "keywords": "Dictionary remote hosted cloud Azure blobs",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "remotedict",
    "package_url": "https://pypi.org/project/remotedict/",
    "platform": null,
    "project_url": "https://pypi.org/project/remotedict/",
    "project_urls": {
      "Homepage": "http://github.com/ipazc/remotedict"
    },
    "release_url": "https://pypi.org/project/remotedict/0.0.2/",
    "requires_dist": [
      "joblib (>=0.15.1)",
      "lz4 (>=3.1.3)",
      "azure-storage-blob (>=12.8.0)",
      "azure-storage-queue (>=12.3.0)"
    ],
    "requires_python": "",
    "summary": "Remote dictionary backed up by cloud services",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13834421,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a98c184a907b7f9aed013787f9994d2afc64cb54bc48c4146bc889fcd28b9dd7",
          "md5": "e3559a30da71476017046966e6f3363c",
          "sha256": "41b0f178b3c50397c0b0b7ddf6dc3006f2ff647b97e1e9c0eb2dd40507b4b70d"
        },
        "downloads": -1,
        "filename": "remotedict-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3559a30da71476017046966e6f3363c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7314,
        "upload_time": "2021-03-06T01:01:07",
        "upload_time_iso_8601": "2021-03-06T01:01:07.031046Z",
        "url": "https://files.pythonhosted.org/packages/a9/8c/184a907b7f9aed013787f9994d2afc64cb54bc48c4146bc889fcd28b9dd7/remotedict-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3c3e9c282e1bfb3fce18d5106b117c42b4dd07de6171e7b0b6d1cea6d0ebe58",
          "md5": "a6a1c50bd22e5c15785b351a420f4789",
          "sha256": "e95405318ee6d8c91c4f233ba452c5b4fa4a406bdef35398ac989041e7ea82bc"
        },
        "downloads": -1,
        "filename": "remotedict-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6a1c50bd22e5c15785b351a420f4789",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8867,
        "upload_time": "2022-05-16T21:23:40",
        "upload_time_iso_8601": "2022-05-16T21:23:40.410225Z",
        "url": "https://files.pythonhosted.org/packages/c3/c3/e9c282e1bfb3fce18d5106b117c42b4dd07de6171e7b0b6d1cea6d0ebe58/remotedict-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3c3e9c282e1bfb3fce18d5106b117c42b4dd07de6171e7b0b6d1cea6d0ebe58",
        "md5": "a6a1c50bd22e5c15785b351a420f4789",
        "sha256": "e95405318ee6d8c91c4f233ba452c5b4fa4a406bdef35398ac989041e7ea82bc"
      },
      "downloads": -1,
      "filename": "remotedict-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a6a1c50bd22e5c15785b351a420f4789",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8867,
      "upload_time": "2022-05-16T21:23:40",
      "upload_time_iso_8601": "2022-05-16T21:23:40.410225Z",
      "url": "https://files.pythonhosted.org/packages/c3/c3/e9c282e1bfb3fce18d5106b117c42b4dd07de6171e7b0b6d1cea6d0ebe58/remotedict-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}