{
  "info": {
    "author": "",
    "author_email": "Brian Skinn <brian.skinn@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Jupyter",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# jupyter-tempvars: Convenient temporary variable management in Jupyter Notebook\n\n### Most Recent Stable Release:\n\n[![Most recent PyPI release](https://img.shields.io/pypi/v/jupyter-tempvars.svg?logo=pypi)](https://pypi.org/project/jupyter-tempvars)\n\n![Python versions supported](https://img.shields.io/pypi/pyversions/jupyter-tempvars.svg?logo=python)\n\n### Info:\n\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/bskinn/jupyter-tempvars/blob/stable/LICENSE.txt)\n\n[![black formatted](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n**Do you work in Jupyter Notebook?**\n\n**Are your notebooks flaky sometimes, due to leftover/temporary variables?**\n\n`jupyter-tempvars` can help!\n\nNamespace pollution with leftover/temporary variables is a\ncommon challenge of using Jupyter notebooks. It's a downside\nof the power provided by the shared global notebook namespace,\nfor things like exploratory data analysis.\n\nAnd, it can be a pretty big downside. It's quite annoying\nto work for hours to try to figure out what's wrong with a notebook,\nonly to have it suddenly work properly when you restart Jupyter.\nIt's also quite annoying to have a workbook that you *thought*\nwas working correctly, suddely *stop* working once you restart.\nIt can cause even bigger problems if you pass a notebook\non to someone else, and then it doesn't work right for them even\nthough it was working fine for you.\n\n`jupyter-tempvars` is a Jupyter nbextension built on the\n[`tempvars` Python package](https://github.com/bskinn/tempvars)\nthat helps minimize these kinds of problems. Simply decorate code\ncells with metadata tags matching a defined template, and then variables\nthat fit the rules you define will be automatically treated\nas temporary variables. This means that:\n\n 1. Matching variables will be removed from the global namespace before\n    each tagged cell is executed, ensuring that cell isn't contaminated\n    by \"dragged-in\" variables, ***and***\n\n 2. Matching variables will be removed from the global namespace after the cell has\n    finished executing, ensuring that other code cells aren't contaminated by\n    this cell, either.\n\nAs `jupyter-tempvars` is currently configured, any variables removed\nfrom the global namespace before execution of the cell are *restored*\nto the global namespace after execution is finished.\n\n\n## Prerequisites\n\n### Python\n\nI've been developing `jupyter-tempvars` using Python 3.9, but I believe any\nversion of Python 3 that works with the underlying `tempvars` library\n(which should be all actively maintained versions, 3.7+) should work fine.\nIt should work on any platform supported by Jupyter.\n(At some point soon here, I'll be figuring out a test suite to actually\ncheck across platforms and Pythons....)\n\n### Jupyter\n\n`jupyter-tempvars` requires a full instance of [Jupyter Notebook](https://jupyter.org/),\nincluding the Javascript frontend. So far, I've only tested it with vanilla Jupyter,\nbut in theory I think it should work with JupyterHub, Jupyter in Anaconda, etc.\nI would be grateful for feedback from anyone who tries to use it in\nother contexts. I believe it should work with `notebook` versions 4.x and above.\nNote that `jupyter-tempvars` will **NOT** work with JupyterLab!\n\nTo get a basic Jupyter install just `pip install jupyter`.\n\n### `jupyter-contrib-nbextensions`\n\nThe community-developed\n[`jupyter-contrib-nbextensions` package](https://github.com/ipython-contrib/jupyter_contrib_nbextensions)\nis not strictly required in order to use `jupyter-tempvars`, but it's highly recommended.\nIf nothing else, the configurator plugin that adds a `Nbextensions` tab to the\nmain Jupyter interface is really handy. See the install instructions\n[here](https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/install.html).\n\n\n## Installation\n\nThe first step is to install the overall `jupyter-tempvars` package.\nIt's on PyPI, so just:\n\n```\n$ pip install jupyter-tempvars\n```\n\nFrom there, the `jupyter_tempvars` extension needs to be installed into the\nJupyter environment itself. The `juypter-tempvars` project ships with a\nhelper script to simplify the most common case, where the extension is\ninstalled into the user-scope extension registry:\n\n```\n$ jupyter-tempvars install\n```\n\nNow that the extension is installed, it needs to be activated,\neither in the `Nbextensions` Jupyter tab of the configurator:\n\n<kbd><a href=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/enable_extension.gif\"><img src=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/enable_extension.gif\" alt=\"Animation of activing the extension\" width=\"100%\"></a></kbd>\n\nor by running the helper script with the `enable` command:\n\n```\n$ jupyter-tempvars enable\n```\n\nAgain, note that the `jupyter-tempvars` helper script is set up to install the extension\nto the user's Jupyter extension repository (`--user` flag to `jupyter nbextension`).\nIf you wish to install to a different location, you'll need to invoke the necessary\n`jupyter nbextension` commands manually.\n\n\n## Upgrading\n\nUpgrading the extension after it's been installed also has two steps:\n\n```\n$ pip install --upgrade jupyter-tempvars tempvars\n$ jupyter-tempvars install\n```\n\nIt's important to also upgrade `tempvars` whenever you upgrade\n`jupyter-tempvars`, in case the extension needs features\nfrom a newer version of `tempvars`.\n\nIf you pin `jupyter-tempvars` to a specific version using `pip freeze`,\nor with a tool like `poetry` or `pipenv`, you should make sure\nthat the pins for both `tempvars` and `jupyter-tempvars` get updated.\n\n\n## Usage\n\nAs of v0.1, `jupyter-tempvars` supports two filters for identifying\ntemporary variables, a 'starts with' filter and an 'ends with' filter.\nBoth methods use the built-in Jupyter capability to attach metadata to\nindividual notebook cells.\n\nThe first step to use `jupyter-tempvars` is to display the\n`Tags` metadata cell headers, if they're not already visible:\n\n1. Open an `.ipynb` notebook.\n2. In the toolbar, click `View` > `Cell Toolbar` > `Tags`\n\n<kbd><a href=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/show_cell_tags.gif\"><img src=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/show_cell_tags.gif\" alt=\"Animation showing the cell tag headers\" width=\"100%\"></a></kbd>\n\nThen, for each cell you want `jupyter-tempvars` to handle temporary\nvariables, add a tag to that cell with one of the following two formats:\n\n- To treat all variables starting with a given prefix as temporary,\n  use `tempvars-start-{prefix}`\n\n- To treat all variables ending with a given suffix as temporary,\n  use `tempvars-end-{suffix}`\n\nSo, for example, to treat all variables in a cell that start with `t_`\nas temporary variables, tag the cell with `tempvars-start-t_`:\n\n<kbd><a href=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/tempvars_start_demo.gif\"><img src=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/tempvars_start_demo.gif\" alt=\"Animation demonstrating the starts-with tag\" width=\"100%\"></a></kbd>\n\nSimilarly, to treat all variables that end with `_temp` as temporary,\ntag the cell with `tempvars-end-_temp`:\n\n<kbd><a href=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/tempvars_end_demo.gif\"><img src=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/tempvars_end_demo.gif\" alt=\"Animation demonstrating the ends-with tag\" width=\"100%\"></a></kbd>\n\nThe `tempvars-` tags can be used multiple times, and in combination with each other:\n\n<kbd><a href=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/tempvars_multiple_demo.gif\"><img src=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/tempvars_multiple_demo.gif\" alt=\"Animation demonstrating multiple tag use\" width=\"100%\"></a></kbd>\n\nTemporary variables are also cleared from the namespace before executing the tagged cell:\n\n<kbd><a href=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/tempvars_clear_on_start.gif\"><img src=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/tempvars_clear_on_start.gif\" alt=\"Animation demonstrating variable clearing entering a tempvars cell\" width=\"100%\"></a></kbd>\n\nThe traceback in the above example also reveals how `jupyter-tempvars`\nworks under the hood: the cell's code is enclosed with a\n[`tempvars.TempVars`](https://tempvars.readthedocs.io/en/latest/api.html#tempvars.TempVars)\ncontext manager (imported to the notebook namespace as `_TempVars`)\nbefore submission to the kernel for execution. One side effect\nof this implementation is that the result of the last line of the code is not\nechoed to output for tagged cells, and must be explicitly `print`-ed:\n\n<kbd><a href=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/tempvars_print_needed.gif\"><img src=\"https://github.com/bskinn/jupyter-tempvars/raw/v0.1.post1/media/tempvars_print_needed.gif\" alt=\"Animation demonstrating suppression of output\" width=\"100%\"></a></kbd>\n\nAs noted above, `jupyter-tempvars` currently restores pre-existing temporary variables,\ncleared before the start of tagged cell execution, *back* to the global namespace\nafter execution has completed. If it would be valuable to allow the option of\n*not* restoring the pre-existing variables after execution of a tagged cell,\nplease comment [here](https://github.com/bskinn/jupyter-tempvars/issues/21).\nMore generally, bug reports and feature requests of any kind for both\n[`jupyter-tempvars`](https://github.com/bskinn/jupyter-tempvars/issues) and the underlying\n[`tempvars`](https://github.com/bskinn/tempvars/issues) library are always welcome.\n\n\n## Advanced Variable Management via `tempvars`\n\n`jupyter-tempvars` only exposes a subset of the functionality\nprovided by the underlying `tempvars` Python package. If you need\na more powerful temporary variable\nmanagement tool, take a look at the\n[full capabilities](https://tempvars.readthedocs.io/en/latest/usage.html) of `tempvars`.\n\n`jupyter-tempvars` also requires the full Jupyter notebook frontend to function.\nIf you want to manage temporary variables when using a tool that\ninteracts with notebooks outside the context of the Jupyter frontend (e.g.,\n[`nbclient`](https://github.com/jupyter/nbclient) or\n[`nbmake`](https://github.com/treebeardtech/nbmake)),\nyou should consider using `tempvars` directly in your code,\ninstead of `jupyter-tempvars`.\n\n----\n\nAvailable on [PyPI](https://pypi.org/project/jupyter-tempvars).\n\nSource on [GitHub](https://github.com/bskinn/jupyter-tempvars).\nBug reports and feature requests are welcomed at the\n[Issues](https://github.com/bskinn/jupyter-tempvars/issues) page there.\n\nCopyright (c) Brian Skinn 2022\n\nLicense: The MIT License. See\n[LICENSE.txt](https://github.com/bskinn/jupyter-tempvars/blob/main/LICENSE.txt)\nfor full license terms.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bskinn/jupyter-tempvars",
    "keywords": "extension,jupyter,notebook,temporary variables",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jupyter-tempvars",
    "package_url": "https://pypi.org/project/jupyter-tempvars/",
    "platform": "any",
    "project_url": "https://pypi.org/project/jupyter-tempvars/",
    "project_urls": {
      "Changelog": "https://github.com/bskinn/jupyter-tempvars/blob/main/CHANGELOG.md",
      "Docs": "https://jupyter-tempvars.readthedocs.io/en/stable/",
      "Donate": "https://github.com/sponsors/bskinn",
      "Homepage": "https://github.com/bskinn/jupyter-tempvars",
      "Thank": "https://twitter.com/btskinn"
    },
    "release_url": "https://pypi.org/project/jupyter-tempvars/0.1.post1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Jupyter Notebook extension providing per-cell temporary variables",
    "version": "0.1.post1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13484605,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cea8f20ea186aaa066a8751c079d1656c985a55fe01ba66b4fa8bd8bd78ee62c",
          "md5": "7f166a3ae0c77115e0cf5a26452c64b7",
          "sha256": "a6e3da2ece63735c1fb78211ab116fcf5be176f250a702885dea32d15fec65ac"
        },
        "downloads": -1,
        "filename": "jupyter_tempvars-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f166a3ae0c77115e0cf5a26452c64b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11136,
        "upload_time": "2022-04-06T19:15:02",
        "upload_time_iso_8601": "2022-04-06T19:15:02.082666Z",
        "url": "https://files.pythonhosted.org/packages/ce/a8/f20ea186aaa066a8751c079d1656c985a55fe01ba66b4fa8bd8bd78ee62c/jupyter_tempvars-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68115458061953c5537bbeba48f82d4162d3136f079410151cdb14df58a612a0",
          "md5": "4b0e398effec99321da476a5c2fd47af",
          "sha256": "cacf3d9817ac526a0408056635c7e4ccff7094a8c6f6dbde9beed3b22a06666e"
        },
        "downloads": -1,
        "filename": "jupyter-tempvars-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4b0e398effec99321da476a5c2fd47af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14262,
        "upload_time": "2022-04-06T19:15:09",
        "upload_time_iso_8601": "2022-04-06T19:15:09.575929Z",
        "url": "https://files.pythonhosted.org/packages/68/11/5458061953c5537bbeba48f82d4162d3136f079410151cdb14df58a612a0/jupyter-tempvars-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60de36cea11d0f455a0e4bf8e49bc80f565cffe2dfedca91ab1a253e6cba9900",
          "md5": "24a6d7405c6a5e28ff9d10377350a3d9",
          "sha256": "8a1e6991f99d4ad1019e85d5bd13880cd3c57f43991188c4ecd80820389010dd"
        },
        "downloads": -1,
        "filename": "jupyter_tempvars-0.1.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24a6d7405c6a5e28ff9d10377350a3d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9308,
        "upload_time": "2022-03-26T22:02:14",
        "upload_time_iso_8601": "2022-03-26T22:02:14.755533Z",
        "url": "https://files.pythonhosted.org/packages/60/de/36cea11d0f455a0e4bf8e49bc80f565cffe2dfedca91ab1a253e6cba9900/jupyter_tempvars-0.1.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60dad8dfdeede4f45740950303df9a2b1df2f91f4acbfb3e2dc342206be19b4f",
          "md5": "2906afa7d6b46e765c3f3f32cb913019",
          "sha256": "f502ebb8bc3a6b7eb3a9c3e415c71bf38b1c5152a11ce383a5f96008019c5fbc"
        },
        "downloads": -1,
        "filename": "jupyter_tempvars-0.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2906afa7d6b46e765c3f3f32cb913019",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11234,
        "upload_time": "2022-04-12T02:37:45",
        "upload_time_iso_8601": "2022-04-12T02:37:45.957764Z",
        "url": "https://files.pythonhosted.org/packages/60/da/d8dfdeede4f45740950303df9a2b1df2f91f4acbfb3e2dc342206be19b4f/jupyter_tempvars-0.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7171f97988e5024e2e86916542c4904a6d4976c5ef7d6efabdd0bc47ad25aff3",
          "md5": "a45cc3eafeacbd5f17922e34404b3d5e",
          "sha256": "a32af239eee78e83654f794f21ed0a17d99d037b56a6e1e188efd6495f2962ea"
        },
        "downloads": -1,
        "filename": "jupyter-tempvars-0.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "a45cc3eafeacbd5f17922e34404b3d5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14353,
        "upload_time": "2022-04-12T02:37:26",
        "upload_time_iso_8601": "2022-04-12T02:37:26.512921Z",
        "url": "https://files.pythonhosted.org/packages/71/71/f97988e5024e2e86916542c4904a6d4976c5ef7d6efabdd0bc47ad25aff3/jupyter-tempvars-0.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60dad8dfdeede4f45740950303df9a2b1df2f91f4acbfb3e2dc342206be19b4f",
        "md5": "2906afa7d6b46e765c3f3f32cb913019",
        "sha256": "f502ebb8bc3a6b7eb3a9c3e415c71bf38b1c5152a11ce383a5f96008019c5fbc"
      },
      "downloads": -1,
      "filename": "jupyter_tempvars-0.1.post1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2906afa7d6b46e765c3f3f32cb913019",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11234,
      "upload_time": "2022-04-12T02:37:45",
      "upload_time_iso_8601": "2022-04-12T02:37:45.957764Z",
      "url": "https://files.pythonhosted.org/packages/60/da/d8dfdeede4f45740950303df9a2b1df2f91f4acbfb3e2dc342206be19b4f/jupyter_tempvars-0.1.post1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7171f97988e5024e2e86916542c4904a6d4976c5ef7d6efabdd0bc47ad25aff3",
        "md5": "a45cc3eafeacbd5f17922e34404b3d5e",
        "sha256": "a32af239eee78e83654f794f21ed0a17d99d037b56a6e1e188efd6495f2962ea"
      },
      "downloads": -1,
      "filename": "jupyter-tempvars-0.1.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "a45cc3eafeacbd5f17922e34404b3d5e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 14353,
      "upload_time": "2022-04-12T02:37:26",
      "upload_time_iso_8601": "2022-04-12T02:37:26.512921Z",
      "url": "https://files.pythonhosted.org/packages/71/71/f97988e5024e2e86916542c4904a6d4976c5ef7d6efabdd0bc47ad25aff3/jupyter-tempvars-0.1.post1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}