{
  "info": {
    "author": "Hamidreza Sadeghi",
    "author_email": "sadeghi.hamidreza1400@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<!---\nCopyright 2022 Hamidreza Sadeghi. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Large Numbers\n\nIn this repository, a library has been provided that allows you to perform the four basic operations of addition, subtraction, multiplication and division on large and very large numbers. We tried to make this library as fast and efficient as possible.\n\nNote: In this library, powering is not supported yet, but it will be supported in the next versions.\n\n\n\n## Installation\n\nTo install, you can use `pip` as follows.\n<br/>\n\n```\npip install LargeNumbers\n```\n\n<br/>\n\nTo install from the repository, just clone the project, change the path to the corresponding directory and then install lib using `pip`.\n\n<br/>\n\n```\ngit clone https://github.com/HRSadeghi/LargeNumbers.git\n\ncd LargeNumbers\n\npip install .\n```\n\n## Usage\n\nThe easiest way to use this library is as follows,\n<br/>\n\n```python\nfrom LargeNumbers.LargeNumber import LargeNumber, largeNumberFormat\n\na = LargeNumber('125763678041689463179.45761346709461437894')\nb = LargeNumber('-746011541145.47464169741644487000085')\n\n# Negation\nprint(-a)\nprint(-b)\n\n# Addition and Subtraction\nprint(a+b)\nprint(a-b)\nprint(-a+b)\n\n# Multiplication\nprint(a*b)\n\n# Division\nlargeNumberFormat.precision = 100\nlargeNumberFormat.return_fracation = False\n\nprint(a/b)\n\n```\n\n<br/>\n\n\n\n\n<br/>\n\nIn the above code snippet, because the number of digits for the division operation may be very large, so a maximum can be defined for it using `largeNumberFormat.precision`. If the number of digits appearing in the division process is more than the number of digits allocated for `largeNumberFormat.precision`, then a letter `L` appears at the end of the number (this letter has no effect in further calculations).\n\n```python\nfrom LargeNumbers.LargeNumber import LargeNumber, largeNumberFormat\n\nlargeNumberFormat.precision = 2\n\na = LargeNumber('1')\nb = LargeNumber('7')\n\nprint(a/b)\n\n```\n\n\n<br/>\n\nYou can also define one of the numbers as a `string`, `int` or `float`,\n\n```python\nfrom LargeNumbers.LargeNumber import LargeNumber, largeNumberFormat\n\na = LargeNumber('125763678041689463179.45761346709461437894')\nb = '-746011541145.47464169741644487000085'\n\n# Ops\nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(a/b)\n\n\n\na = '125763678041689463179.45761346709461437894'\nb = LargeNumber('-746011541145.47464169741644487000085')\n\n# Ops\nprint()\nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(a/b)\n```\n\n\n<br>\n\nBut if the input is a `string`, you cannot negate it first.\n<br>\n\n```python\n\nfrom LargeNumbers.LargeNumber import LargeNumber, largeNumberFormat\n\na = '125763678041689463179.45761346709461437894'\nb = LargeNumber('-746011541145.47464169741644487000085')\n\nprint(-a+b)\n\n# In this case, you will encounter the following error\n\"\"\"\nTypeError: bad operand type for unary -: 'str'\n\"\"\"\n\n```\n\n<br/>\n\nYou can also give input numbers as fractions,\n\n<br/>\n\n```python\nfrom LargeNumbers.LargeNumber import LargeNumber, largeNumberFormat\n\na = LargeNumber('1/2')\nb = LargeNumber('-3/14')\n\n# Ops (return the result as a fraction)\nlargeNumberFormat.return_fracation = True\n\nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(a/b)\n##\n\n# Ops (return the result as a decimal)\nlargeNumberFormat.precision = 5\nlargeNumberFormat.return_fracation = False\n\nprint()\nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(a/b)\n##\n\n\n```\n\n<br/>\n\nIt is also possible to give numbers as input and get the output as a fraction or non-fraction,\n<br/> \n\n```python\nfrom LargeNumbers.LargeNumber import LargeNumber, largeNumberFormat\n\na = LargeNumber('2.142')\nb = LargeNumber('-3/14')\n\n# Ops (return the result as a fraction)\nlargeNumberFormat.return_fracation = True\n\nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(a/b)\n##\n\na = LargeNumber('1.134')\nb = LargeNumber('-1.57')\n\n# Ops (return the result as a decimal)\nlargeNumberFormat.return_fracation = True\n\nprint()\nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(a/b)\n##\n\n\n```\n\n\n## Recurring decimal (repeating decimal)\nNumbers such as $\\dfrac{1}{3}$, $\\dfrac{1}{7}$ and similar numbers do not have a finite decimal representation. Therefore, we are facing a problem to perform division in these numbers. But these numbers can be shown in periodic form. As a result, $\\dfrac{1}{3}$ can be represented by $0.\\overline{3}$ and $\\dfrac{1}{7}$ by $0.\\overline{142857}$. \n\nHere, the letter R is used to show the beginning of the period. Therefore, we represent a number like $0.\\overline{3}$ with `0.R3`, a number like $0.\\overline{7}$ with `0.R7` and a number like $0.12\\overline{42}$ with `0.12R42`.\n\n\nAccording to this way of representation, we can apply the four operations of addition, subtraction, multiplication and division on the same representation.\n \n\n```python\nfrom LargeNumbers.LargeNumber import LargeNumber, largeNumberFormat\n\nlargeNumberFormat.return_repeating_form = True\nlargeNumberFormat.return_fracation = False\nlargeNumberFormat.precision = 30\n\n\na = LargeNumber('0.R81')\nb = LargeNumber('0.134R1')\n\n# Ops \nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(a/b)\n##\n\n\na = LargeNumber('0.12R81')\nb = LargeNumber('0.665')\n\n# Ops \nprint()\nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(a/b)\n##\n\n\na = LargeNumber('1/7')\nb = LargeNumber('0.665')\n\n# Ops \nprint()\nprint(a+b)\nprint(a-b)\nprint(a*b)\nprint(a/b)\n##\n```\n\n\nIn the above code snippet, `largeNumberFormat.return_repeating_form` specifies whether the number is in recurring (repeating) form or not. If the number of digits in the periodic display exceeds the number of digits dedicated to the `largeNumberFormat.precision`, the number will not be displayed recurringly and an `L` will appear at the end of the number (this letter has no effect in further calculations).\n\n```python\nfrom LargeNumbers.LargeNumber import LargeNumber, largeNumberFormat\n\nlargeNumberFormat.return_repeating_form = True\nlargeNumberFormat.return_fracation = False\nlargeNumberFormat.precision = 6\n\na = LargeNumber('1')\nb = LargeNumber('7')\n\nprint(a/b)\n\nlargeNumberFormat.precision = 5\n\nprint()\nprint(a/b)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HRSadeghi/LargeNumbers.git",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LargeNumbers",
    "package_url": "https://pypi.org/project/LargeNumbers/",
    "platform": null,
    "project_url": "https://pypi.org/project/LargeNumbers/",
    "project_urls": {
      "Homepage": "https://github.com/HRSadeghi/LargeNumbers.git"
    },
    "release_url": "https://pypi.org/project/LargeNumbers/0.1.8/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "In this repository, a library has been provided that allows you to perform the four basic operations of addition, subtraction, multiplication and division on large and very large numbers.",
    "version": "0.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15029400,
  "releases": {
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e83e39b2d8569430e383e99fb7566977c141542b37417ef868a4eeb4473a9dfa",
          "md5": "25bc45743501f0d8991befd62b1ba876",
          "sha256": "ccb22e7e4681bfcbfcd18debe8a18600dff94bdc543f44d995726fdf13c2bb4c"
        },
        "downloads": -1,
        "filename": "LargeNumbers-0.1.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25bc45743501f0d8991befd62b1ba876",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12900,
        "upload_time": "2022-09-08T08:35:59",
        "upload_time_iso_8601": "2022-09-08T08:35:59.196881Z",
        "url": "https://files.pythonhosted.org/packages/e8/3e/39b2d8569430e383e99fb7566977c141542b37417ef868a4eeb4473a9dfa/LargeNumbers-0.1.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58acbfd3d7398965f1baf067879c4d22b2c35de9b381976d0d53df62c3db949e",
          "md5": "2d2c855709a7302371dd0a44a6513360",
          "sha256": "3b5ec636d5478c5e186afb720b709ad3141d830eaa55c2b3ac81e3a4cf628a05"
        },
        "downloads": -1,
        "filename": "LargeNumbers-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "2d2c855709a7302371dd0a44a6513360",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10677,
        "upload_time": "2022-09-08T08:36:00",
        "upload_time_iso_8601": "2022-09-08T08:36:00.760388Z",
        "url": "https://files.pythonhosted.org/packages/58/ac/bfd3d7398965f1baf067879c4d22b2c35de9b381976d0d53df62c3db949e/LargeNumbers-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e83e39b2d8569430e383e99fb7566977c141542b37417ef868a4eeb4473a9dfa",
        "md5": "25bc45743501f0d8991befd62b1ba876",
        "sha256": "ccb22e7e4681bfcbfcd18debe8a18600dff94bdc543f44d995726fdf13c2bb4c"
      },
      "downloads": -1,
      "filename": "LargeNumbers-0.1.8-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "25bc45743501f0d8991befd62b1ba876",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12900,
      "upload_time": "2022-09-08T08:35:59",
      "upload_time_iso_8601": "2022-09-08T08:35:59.196881Z",
      "url": "https://files.pythonhosted.org/packages/e8/3e/39b2d8569430e383e99fb7566977c141542b37417ef868a4eeb4473a9dfa/LargeNumbers-0.1.8-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58acbfd3d7398965f1baf067879c4d22b2c35de9b381976d0d53df62c3db949e",
        "md5": "2d2c855709a7302371dd0a44a6513360",
        "sha256": "3b5ec636d5478c5e186afb720b709ad3141d830eaa55c2b3ac81e3a4cf628a05"
      },
      "downloads": -1,
      "filename": "LargeNumbers-0.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "2d2c855709a7302371dd0a44a6513360",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10677,
      "upload_time": "2022-09-08T08:36:00",
      "upload_time_iso_8601": "2022-09-08T08:36:00.760388Z",
      "url": "https://files.pythonhosted.org/packages/58/ac/bfd3d7398965f1baf067879c4d22b2c35de9b381976d0d53df62c3db949e/LargeNumbers-0.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}