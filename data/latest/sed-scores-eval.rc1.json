{
  "info": {
    "author": "Department of Communications Engineering, Paderborn University",
    "author_email": "sek@nt.upb.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# sed_scores_eval\n\n![GitHub Actions](https://github.com/fgnt/sed_scores_eval/actions/workflows/pytest.yml/badge.svg)\n\nsed_scores_eval is a package for the efficient (threshold-independent)\nevaluation of Sound Event Detection (SED) systems based on the SED system's\nsoft classification scores as described in\n> **Threshold-Independent Evaluation of Sound Event Detection Scores**  \nJ. Ebbers, R. Serizel and R. Haeb-Umbach  \nin Proc. IEEE International Conference on Acoustics, Speech, and Signal Processing (ICASSP) 2022\nhttps://arxiv.org/abs/2201.13148\n\nWith SED systems providing soft classification scores (usually frame-wise),\nperformance can be evaluated at different operating points (OPs) by varying the\ndecision/discrimination threshold used for binarization of the soft scores.\nOther evaluation frameworks evaluate a list of detected sounds\n(list of event labels with corresponding event onset and offset times) for each\ndecision threshold separately.\nTherefore, they can not be used to accurately evaluate performance curves over\nall thresholds (such as Precision-Recall curves and ROC curves) given that\nthere are many thousands (or even millions) of thresholds (as many as there are\nframes in the dataset) that result in a different list of detections.\nPerformance curves can at most be approximated using a limited subset of\nthresholds which, however, may result in inaccurate curves (see Figure below).\nsed_scores_eval, in contrast, efficiently evaluates performance for all\ndecision thresholds jointly (also for sophisticated collar-based and\nintersection-based evaluation criteria, see paper for details). It therefore\nenables the efficient and accurate computation of performance curves such as\nPrecision-Recall Curves and ROC Curves.\n\n![Fig: PSD ROC from example code](https://raw.githubusercontent.com/fgnt/sed_scores_eval/master/notebooks/psd_roc.png)\n\nIf you use this package please cite our paper.\n\n## Supported Evaluation Criteria\n### Intermediate Statistics:\n* Segment-based [[1]](#1): Classifications and targets are defined and\n  evaluated in fixed length segments.\n* Collar-based (a.k.a. event-based) [[1]](#1): Compares if detected event\n  (onset, offset, event_label) matches a ground truth event up to a certain\n  collar on onset and offset.\n* Intersection-based [[2]](#2): Evaluates the intersections of detected and\n  ground truth events (Please also cite [[2]](#2) if you use intersection-based\n  evaluation)\n  \n### Evaluation Metrics / Curves:\n* Precision-Recall (PR) Curve: Precisions for arbitrary decision thresholds\n  plotted over Recalls\n* F-Score Curve: F-Scores plotted over decision thresholds\n* F-Score @ OP: F-Score for a specified decision threshold\n* F-Score @ Best: F-Score for the optimal decision threshold (w.r.t. to the\n  considered dataset)\n* PSD-ROC Curve: effective True Positive Rates (eTPRs) plotted over effective\n  False Positive Rates (eFPRs) as described in [[2]](#2).\n* PSD Score (PSDS): normalized Area under PSD-ROC Curve (until a certain\n  maximum eFPR).\n  \n  (Please also cite [[2]](#2) if you use PSD-ROC and/or PSDS)\n\n\n<a id=\"1\">[1]</a> A. Mesaros, T. Heittola, and T. Virtanen,\n\"Metrics for polyphonic sound event detection\", Applied Sciences,\n2016,\n\n<a id=\"2\">[2]</a> C. Bilen, G. Ferroni, F. Tuveri, J. Azcarreta and S. Krstulovic,\n\"A Framework for the Robust Evaluation of Sound Event Detection\",\nin Proc. IEEE International Conference on Acoustics, Speech, and Signal Processing (ICASSP),\n2020,\narXiv: https://arxiv.org/abs/1910.08440\n## IPython Notebooks\nHave a look at the provided example [notebooks](./notebooks) for usage example\nand for some comparisons/validations w.r.t. reference packages.\n\n## Input Format\n### System's Classification Scores\nThe system's classification scores need to be saved in a dedicated folder with\na tsv score file for each audio file from the evaluation set.\nThe score files have to be named according to the audio file names.\nIf, e.g., the audio file is \"test1.wav\" the score file's name needs to be\n\"test1.tsv\".\nFor each score window (arbitrary and also varying window lengths are allowed\nbut windows need to be non-overlapping and gapless, i.e., the onset time of the\nnext window must be the offset time of the current window) the onset and offset\ntimes of the window (in seconds) must be stated in the first and second column,\nrespectively, followed by classification scores for each event class in a\nseparate column as illustrated in the following example:\n\n|onset|offset|class1  |class2  |class3  |...     |\n|----:|-----:|-------:|-------:|-------:|-------:|\n|0.0  |0.02  |0.010535|0.057549|0.063102|...     |\n|0.02 |0.04  |0.001196|0.167730|0.098838|...     |\n|...  |...   |...     |...     |...     |...     |\n|4.76 |4.78  |0.015128|0.769687|0.087403|...     |\n|4.78 |4.8   |0.002032|0.587578|0.120165|...     |\n|...  |...   |...     |...     |...     |...     |\n|9.98 |10.0  |0.031421|0.089716|0.929873|...     |\n\nAt inference time, when your system outputs a classification score array\n`scores_arr`of shape TxK with T and K being the number of windows and event\nclasses, respectively, you can conveniently write the score file of above\nformat as follows:\n```python\nsed_scores_eval.io.write_sed_scores(\n    scores_arr, '/path/to/score_dir/test1.tsv',\n    timestamps=timestamps, event_classes=event_classes\n)\n```\nwhere `timestamps` must be a 1d list or array of length T+1 providing the\nwindow boundary times and `event_classes` must be a list of length K providing\nthe event class names corresponding to the columns in `scores_arr`.\n\nIn case the output scores of the whole dataset fit into memory, you can also\nprovide a dict of pandas.DataFrames of above format, where dict keys must be\nthe file ids (e.g. \"test1\").\nScore dataframes can be obtained from score arrays analogously to above by\n```python\nscores[\"test1\"] = sed_scores_eval.utils.create_score_dataframe(\n    scores_arr, timestamps=timestamps, event_classes=event_classes\n)\n```\n\n### Ground Truth\nThe ground truth events for the whole dataset must be provided either as a\nfile of the following format\n\n|filename   |onset|offset|event\\_label|\n|----------:|----:|-----:|-----:|\n|test1.wav |3.98 |4.86  |class2|\n|test1.wav |9.05 |10.0  |class3|\n|test2.wav |0.0  |4.07  |class1|\n|test2.wav |0.0  |8.54  |class2|\n|test2.wav |5.43 |7.21  |class1|\n|...        |...  |...   |...   |\n\nor as a dict\n```python\n{\n  \"test1\": [(3.98, 4.86, \"class2\"), (9.05, 10.0, \"class3\")],\n  \"test2\": [(0.0, 4.07, \"class1\"), (0.0, 8.54, \"class2\"), (5.43, 7.21, \"class1\")],\n  ...\n}\n```\nwhich can be obtained from the file by\n```python\nground_truth_dict = sed_scores_eval.io.read_ground_truth_events(ground_truth_file)\n```\n\n### Audio durations\nIf required, you either have to provide the audios' durations (in seconds) as a\nfile of the following format:\n\n|filename |duration|\n|--------:|---:|\n|test1.wav|10.0|\n|test2.wav|9.7 |\n|...      |... |\n\nor as a dict\n```python\n{\n  \"test1\": 10.0,\n  \"test2\": 9.7,\n  ...\n}\n```\nwhich can be obtained from the file by\n```python\ndurations_dict = sed_scores_eval.io.read_audio_durations(durations_file)\n```\n\n## Installation\nInstall package directly\n```bash\n$ pip install git+https://github.com/fgnt/sed_scores_eval.git\n```\nor clone and install (editable)\n```bash\n$ git clone https://github.com/fgnt/sed_scores_eval.git\n$ cd sed_scores_eval\n$ pip install --editable .\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fgnt/sed_scores_eval",
    "keywords": "sound recognition evaluation from classification scores",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sed-scores-eval",
    "package_url": "https://pypi.org/project/sed-scores-eval/",
    "platform": null,
    "project_url": "https://pypi.org/project/sed-scores-eval/",
    "project_urls": {
      "Homepage": "https://github.com/fgnt/sed_scores_eval"
    },
    "release_url": "https://pypi.org/project/sed-scores-eval/0.0.0/",
    "requires_dist": [
      "numpy",
      "pandas",
      "scipy",
      "pathlib",
      "lazy-dataset",
      "einops",
      "sed-eval",
      "check-manifest ; extra == 'dev'",
      "coverage ; extra == 'test'",
      "jupyter ; extra == 'test'",
      "matplotlib ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "(Threshold-Independent) Evaluation of Sound Event Detection Scores",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17010661,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce041b4518b2540ba9f569a457efcbb9348eead9e5bfe3ef2e9c4e848408e2a7",
          "md5": "538274581d9ed6c51b2e9846731de7b4",
          "sha256": "45cd3a7c6e7909beae46df4b73b18bfec2a063788edceaf3eb06e22cdd3d133e"
        },
        "downloads": -1,
        "filename": "sed_scores_eval-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "538274581d9ed6c51b2e9846731de7b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 54964,
        "upload_time": "2023-02-24T12:37:27",
        "upload_time_iso_8601": "2023-02-24T12:37:27.843795Z",
        "url": "https://files.pythonhosted.org/packages/ce/04/1b4518b2540ba9f569a457efcbb9348eead9e5bfe3ef2e9c4e848408e2a7/sed_scores_eval-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2334a7484819652f0235fbbd0861e7c39c548fb57574d55e6c15f5e5f98e1f13",
          "md5": "27e31bfe2f7a288380e74600a72ce2f4",
          "sha256": "87010b32c30a7a153a59b8651afdf7c956341909af216994eebbc5002eb10fd0"
        },
        "downloads": -1,
        "filename": "sed_scores_eval-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "27e31bfe2f7a288380e74600a72ce2f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41597,
        "upload_time": "2023-02-24T12:37:29",
        "upload_time_iso_8601": "2023-02-24T12:37:29.516105Z",
        "url": "https://files.pythonhosted.org/packages/23/34/a7484819652f0235fbbd0861e7c39c548fb57574d55e6c15f5e5f98e1f13/sed_scores_eval-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce041b4518b2540ba9f569a457efcbb9348eead9e5bfe3ef2e9c4e848408e2a7",
        "md5": "538274581d9ed6c51b2e9846731de7b4",
        "sha256": "45cd3a7c6e7909beae46df4b73b18bfec2a063788edceaf3eb06e22cdd3d133e"
      },
      "downloads": -1,
      "filename": "sed_scores_eval-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "538274581d9ed6c51b2e9846731de7b4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 54964,
      "upload_time": "2023-02-24T12:37:27",
      "upload_time_iso_8601": "2023-02-24T12:37:27.843795Z",
      "url": "https://files.pythonhosted.org/packages/ce/04/1b4518b2540ba9f569a457efcbb9348eead9e5bfe3ef2e9c4e848408e2a7/sed_scores_eval-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2334a7484819652f0235fbbd0861e7c39c548fb57574d55e6c15f5e5f98e1f13",
        "md5": "27e31bfe2f7a288380e74600a72ce2f4",
        "sha256": "87010b32c30a7a153a59b8651afdf7c956341909af216994eebbc5002eb10fd0"
      },
      "downloads": -1,
      "filename": "sed_scores_eval-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "27e31bfe2f7a288380e74600a72ce2f4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 41597,
      "upload_time": "2023-02-24T12:37:29",
      "upload_time_iso_8601": "2023-02-24T12:37:29.516105Z",
      "url": "https://files.pythonhosted.org/packages/23/34/a7484819652f0235fbbd0861e7c39c548fb57574d55e6c15f5e5f98e1f13/sed_scores_eval-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}