{
  "info": {
    "author": "Anton Nechaev",
    "author_email": "antonnechaev990@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database :: Front-Ends",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Internet :: WWW/HTTP :: Site Management",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Object Brokering",
      "Topic :: Utilities"
    ],
    "description": "# django-redis-orm\n\n## **Django Redis ORM library that gives redis easy-to-use objects with fields and speeds a development up**\n\nFor one project, I needed to work with redis, but redis-py provides a minimum level of work with redis. I didn't find any Django-like ORM for redis, so I wrote library [python-redis-orm](https://github.com/gh0st-work/python_redis_orm/) ([PyPI](https://pypi.org/project/python-redis-orm/)) and this library is port to Django.\n\n### Working with this library, you are expected:\n\n- Fully works in 2021\n- Django-like architecture\n- Easy adaptation to your needs\n- Adequate informational messages and error messages\n- Built-in RedisRoot class that stores specified models, with:\n    - **redis_instance** setting - your redis connection (from redis-py)\n    - **prefix** setting - prefix of this RedisRoot to be stored in redis\n    - **ignore_deserialization_errors** setting - do not raise errors, while deserealizing data\n    - **save_consistency** setting - show structure-first data\n    - **economy** setting - to not return full data and save some requests (usually, speeds up your app on 80%)\n- 10 built-in types of fields:\n    - **RedisField** - base class for nesting\n    - **RedisString** - string\n    - **RedisNumber** - int or float\n    - **RedisId** - instances IDs\n    - **RedisDateTime** - for work with date and time, via python datetime\n    - **RedisForeignKey** - for links to other redis models\n    - **RedisDjangoForeignKey** - for links to other Django models\n    - **RedisJson** - for data, that can be JSONed\n    - **RedisList** - list\n    - **RedisDict** - dict\n- All fields supports:\n    - Automatically serialization\n    - Automatically deserialization\n    - TTL (Time To Live) setting\n    - Default values\n    - Providing functions to default values\n    - Allow null values setting\n    - Choices\n- Built-in RedisModel class, with:\n    - All fields that you want\n    - TTL (Time To Live), applies if no ttl on field\n- CRUD (Create Read Update Delete), in our variation: save, get, filter, order, update, delete:\n    - `example_instance = ExampleModel(example_field='example_data').save()` - to create an instance and get its data dict\n    - `filtered_example_instances = redis_root.get(ExampleModel, example_field='example_data')` - to get all ExampleModel instances with example_field filter and get its data dict\n    - `ordered_instances = redis_root.order(filtered_example_instances, '-id')` - to get ordered filtered_example_instances by id ('-' for reverse)\n    - `updated_example_instances = redis_root.update(ExampleModel, ordered_instances, example_field='another_example_data')` - to update all ordered_instances example_field with value 'another_example_data' and get its data dict\n    - `redis_root.delete(ExampleModel, updated_example_instances)` - to delete updated_example_instances\n\n\n# Installation\n`pip install django-redis-orm`\n\n[Here is PyPI](https://pypi.org/project/django-redis-orm/)\n\nAdd \"django_redis_orm\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'django_redis_orm',\n    ]\n\n# Usage\n\nAll features:\n\n[full_test.py](https://github.com/gh0st-work/django_redis_orm/blob/master/django_redis_orm/tests/full_test.py)\n```python\nimport datetime\nimport random\nfrom time import sleep\n\n\nfrom python_redis_orm.core import *\n\n\ndef generate_token(chars_count):\n    allowed_chars = 'QWERTYUIOPASDFGHJKLZXCVBNM1234567890'\n    token = f'{\"\".join([random.choice(allowed_chars) for i in range(chars_count)])}'\n    return token\n\n\ndef generate_token_12_chars():\n    return generate_token(12)\n\n\nclass BotSession(RedisModel):\n    session_token = RedisString(default=generate_token_12_chars)\n    created = RedisDateTime(default=datetime.datetime.now)\n\n\nclass TaskChallenge(RedisModel):\n    bot_session = RedisForeignKey(model=BotSession)\n    task_id = RedisNumber(default=0, null=False)\n    status = RedisString(default='in_work', choices={\n        'in_work': 'В работе',\n        'completed': 'Завершён успешно',\n        'completed_frozen_points': 'Завершён успешно, получил поинты в холде',\n        'completed_points': 'Завершён успешно, получил поинты',\n        'completed_decommissioning': 'Завершён успешно, поинты списаны',\n        'failed_bot': 'Зафейлил бот',\n        'failed_task_creator': 'Зафейлил создатель задания',\n    }, null=False)\n    account_checks_count = RedisNumber(default=0)\n    created = RedisDateTime(default=datetime.datetime.now)\n\n\nclass TtlCheckModel(RedisModel):\n    redis_number_with_ttl = RedisNumber(default=0, null=False, ttl=5)\n\n\nclass MetaTtlCheckModel(RedisModel):\n    redis_number = RedisNumber(default=0, null=False)\n\n    class Meta:\n        ttl = 5\n\n\nclass DictCheckModel(RedisModel):\n    redis_dict = RedisDict()\n\n\nclass ListCheckModel(RedisModel):\n    redis_list = RedisList()\n\n\n# class DjangoForeignKeyModel(RedisModel):\n#     foreign_key = RedisDjangoForeignKey(model=Proxy)\n\n\ndef get_redis_instance(connection_pool=None):\n    REDIS_HOST = 'localhost'\n    REDIS_PORT = 6379\n    redis_instance = redis.Redis(\n        decode_responses=True,\n        host=REDIS_HOST,\n        port=REDIS_PORT,\n        db=0,\n        connection_pool=connection_pool\n    )\n    return redis_instance\n\n\ndef clean_db_after_test(redis_instance, prefix):\n    for key in redis_instance.scan_iter(f'{prefix}:*'):\n        redis_instance.delete(key)\n\n\ndef basic_test(redis_instance, prefix):\n    try:\n        redis_root = RedisRoot(\n            prefix=prefix,\n            redis_instance=redis_instance,\n            ignore_deserialization_errors=True\n        )\n        redis_root.register_models([\n            TaskChallenge,\n        ])\n        for i in range(5):\n            TaskChallenge(\n                redis_root=redis_root,\n                status='in_work',\n            ).save()\n        task_challenges_without_keys = redis_root.get(TaskChallenge)\n        task_challenges_with_keys = redis_root.get(TaskChallenge, return_dict=True)\n        have_exception = False\n        if not len(task_challenges_without_keys):\n            have_exception = True\n        if not task_challenges_with_keys:\n            have_exception = True\n        else:\n            if not task_challenges_with_keys.keys():\n                have_exception = True\n            else:\n                if len(list(task_challenges_with_keys.keys())) != len(task_challenges_without_keys):\n                    have_exception = True\n    except BaseException as ex:\n        have_exception = True\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef auto_reg_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    task_challenge_1 = TaskChallenge(\n        redis_root=redis_root,\n        status='in_work',\n    ).save()\n    try:\n        task_challenges = redis_root.get(TaskChallenge)\n        have_exception = False\n    except BaseException as ex:\n        have_exception = True\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef no_redis_instance_test(*args, **kwargs):\n    try:\n        redis_root = RedisRoot(\n            ignore_deserialization_errors=True\n        )\n        task_challenge_1 = TaskChallenge(\n            redis_root=redis_root,\n            status='in_work',\n        )\n        task_challenge_1.save()\n        task_challenges = redis_root.get(TaskChallenge)\n        have_exception = False\n        clean_db_after_test(redis_root.redis_instance, redis_root.prefix)\n    except BaseException as ex:\n        have_exception = True\n    return have_exception\n\n\ndef choices_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    task_challenge_1 = TaskChallenge(\n        redis_root=redis_root,\n        status='bruh',\n    )\n    try:\n        task_challenge_1.save()\n        task_challenges = redis_root.get(TaskChallenge)\n        have_exception = True\n    except BaseException as ex:\n        have_exception = False\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef order_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    for i in range(3):\n        TaskChallenge(\n            redis_root=redis_root\n        ).save()\n    have_exception = True\n    try:\n        task_challenges = redis_root.get(TaskChallenge)\n        first_task_challenge = redis_root.order(task_challenges, 'id')[0]\n        last_task_challenge = redis_root.order(task_challenges, '-id')[0]\n        if first_task_challenge['id'] == 1 and last_task_challenge['id'] == len(task_challenges):\n            have_exception = False\n    except BaseException as ex:\n        pass\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef filter_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    have_exception = True\n    try:\n        same_tokens_count = 2\n        random_tokens_count = 8\n        same_token = generate_token(50)\n        random_tokens = [generate_token(50) for i in range(random_tokens_count)]\n        for i in range(same_tokens_count):\n            BotSession(redis_root, session_token=same_token).save()\n        for random_token in random_tokens:\n            BotSession(redis_root, session_token=random_token).save()\n        task_challenges_with_same_token = redis_root.get(BotSession, session_token=same_token)\n        if len(task_challenges_with_same_token) == same_tokens_count:\n            have_exception = False\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef update_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    have_exception = True\n    try:\n        bot_session_1 = BotSession(redis_root, session_token='123').save()\n        bot_session_1_id = bot_session_1['id']\n        redis_root.update(BotSession, bot_session_1, session_token='234')\n        bot_sessions_filtered = redis_root.get(BotSession, id=bot_session_1_id)\n        if len(bot_sessions_filtered) == 1:\n            bot_session_1_new = bot_sessions_filtered[0]\n            if 'session_token' in bot_session_1_new.keys():\n                if bot_session_1_new['session_token'] == '234':\n                    have_exception = False\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef functions_like_defaults_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    have_exception = False\n    try:\n        bot_session_1 = BotSession(redis_root).save()\n        bot_session_2 = BotSession(redis_root).save()\n        if bot_session_1.session_token == bot_session_2.session_token:\n            have_exception = True\n    except BaseException as ex:\n        pass\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef redis_foreign_key_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    have_exception = True\n    try:\n        bot_session_1 = BotSession(\n            redis_root=redis_root,\n        ).save()\n        task_challenge_1 = TaskChallenge(\n            redis_root=redis_root,\n            bot_session=bot_session_1\n        ).save()\n        bot_sessions = redis_root.get(BotSession)\n        bot_session = redis_root.order(bot_sessions, '-id')[0]\n        task_challenges = redis_root.get(TaskChallenge)\n        task_challenge = redis_root.order(task_challenges, '-id')[0]\n        if type(task_challenge['bot_session']) == dict:\n            if task_challenge['bot_session'] == bot_session:\n                have_exception = False\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\n# def django_foreign_key_test(redis_instance, prefix):\n#     redis_root = RedisRoot(\n#         prefix=prefix,\n#         redis_instance=redis_instance,\n#         ignore_deserialization_errors=True\n#     )\n#     have_exception = True\n#     try:\n#         proxy = Proxy.objects.all()[0]\n#         django_foreign_key_model = DjangoForeignKeyModel(\n#             redis_root=redis_root,\n#             foreign_key=proxy,\n#         ).save()\n#         django_foreign_key_models = redis_root.get(DjangoForeignKeyModel)\n#         django_foreign_key_model = redis_root.order(django_foreign_key_models, '-id')[0]\n#         if django_foreign_key_model['foreign_key'] == proxy:\n#             have_exception = False\n#     except BaseException as ex:\n#         print(ex)\n#     clean_db_after_test(redis_instance, prefix)\n#     return have_exception\n\n\ndef delete_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    have_exception = True\n    try:\n        bot_session_1 = BotSession(\n            redis_root=redis_root,\n        ).save()\n        task_challenge_1 = TaskChallenge(\n            redis_root=redis_root,\n            bot_session=bot_session_1\n        ).save()\n        redis_root.delete(BotSession, bot_session_1)\n        redis_root.delete(TaskChallenge, task_challenge_1)\n        bot_sessions = redis_root.get(BotSession)\n        task_challenges = redis_root.get(TaskChallenge)\n        if len(bot_sessions) == 0 and len(task_challenges) == 0:\n            have_exception = False\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef ttl_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    have_exception = True\n    try:\n        ttl_check_model_1 = TtlCheckModel(\n            redis_root=redis_root,\n        ).save()\n        ttl_check_models = redis_root.get(TtlCheckModel)\n        if len(ttl_check_models):\n            ttl_check_model = ttl_check_models[0]\n            if 'redis_number_with_ttl' in ttl_check_model.keys():\n                sleep(6)\n                ttl_check_models = redis_root.get(TtlCheckModel)\n                if len(ttl_check_models):\n                    ttl_check_model = ttl_check_models[0]\n                    if 'redis_number_with_ttl' not in ttl_check_model.keys():\n                        have_exception = False\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef save_consistency_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True,\n        save_consistency=True,\n    )\n    have_exception = True\n    try:\n        ttl_check_model_1 = TtlCheckModel(\n            redis_root=redis_root,\n        ).save()\n        ttl_check_models = redis_root.get(TtlCheckModel)\n        if len(ttl_check_models):\n            ttl_check_model = ttl_check_models[0]\n            if 'redis_number_with_ttl' in ttl_check_model.keys():\n                sleep(6)\n                ttl_check_models = redis_root.get(TtlCheckModel)\n                if len(ttl_check_models):\n                    ttl_check_model = ttl_check_models[0]\n                    if 'redis_number_with_ttl' in ttl_check_model.keys():  # because consistency is saved\n                        have_exception = False\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef meta_ttl_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True,\n    )\n    have_exception = True\n    try:\n        meta_ttl_check_model_1 = MetaTtlCheckModel(\n            redis_root=redis_root,\n        ).save()\n        meta_ttl_check_models = redis_root.get(MetaTtlCheckModel)\n        if len(meta_ttl_check_models):\n            meta_ttl_check_model = meta_ttl_check_models[0]\n            if 'redis_number' in meta_ttl_check_model.keys():\n                sleep(6)\n                meta_ttl_check_models = redis_root.get(MetaTtlCheckModel)\n                if not len(meta_ttl_check_models):\n                    have_exception = False\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef economy_test(redis_instance, prefix):\n    have_exception = True\n    try:\n\n        redis_root = RedisRoot(\n            prefix=prefix,\n            redis_instance=redis_instance,\n            ignore_deserialization_errors=True,\n            economy=True\n        )\n        started_in_economy = datetime.datetime.now()\n        for i in range(10):\n            task_challenge_1 = TaskChallenge(\n                redis_root=redis_root,\n                status='in_work',\n            ).save()\n            redis_root.update(TaskChallenge, task_challenge_1, account_checks_count=1)\n        ended_in_economy = datetime.datetime.now()\n        economy_time = (ended_in_economy - started_in_economy).total_seconds()\n        clean_db_after_test(redis_instance, prefix)\n\n        redis_root = RedisRoot(\n            prefix=prefix,\n            redis_instance=redis_instance,\n            ignore_deserialization_errors=True,\n            economy=False\n        )\n        started_in_no_economy = datetime.datetime.now()\n        for i in range(10):\n            task_challenge_1 = TaskChallenge(\n                redis_root=redis_root,\n                status='in_work',\n            ).save()\n            redis_root.update(TaskChallenge, task_challenge_1, account_checks_count=1)\n        ended_in_no_economy = datetime.datetime.now()\n        no_economy_time = (ended_in_no_economy - started_in_no_economy).total_seconds()\n        clean_db_after_test(redis_instance, prefix)\n        economy_percent = round((no_economy_time / economy_time - 1) * 100, 2)\n        economy_symbol = ('+' if economy_percent > 0 else '')\n        print(f'Economy gives {economy_symbol}{economy_percent}% efficiency')\n        if economy_symbol == '+':\n            have_exception = False\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef dict_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    have_exception = True\n    try:\n        some_dict = {\n            'age': 19,\n            'weed': True\n        }\n        DictCheckModel(\n            redis_root=redis_root,\n            redis_dict=some_dict\n        ).save()\n        dict_check_model_instance = redis_root.get(DictCheckModel)[0]\n        if 'redis_dict' in dict_check_model_instance.keys():\n            if dict_check_model_instance['redis_dict'] == some_dict:\n                have_exception = False\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef list_test(redis_instance, prefix):\n    redis_root = RedisRoot(\n        prefix=prefix,\n        redis_instance=redis_instance,\n        ignore_deserialization_errors=True\n    )\n    have_exception = True\n    try:\n        some_list = [5, 9, 's', 4.5, False]\n        ListCheckModel(\n            redis_root=redis_root,\n            redis_list=some_list\n        ).save()\n        list_check_model_instance = redis_root.get(ListCheckModel)[0]\n        if 'redis_list' in list_check_model_instance.keys():\n            if list_check_model_instance['redis_list'] == some_list:\n                have_exception = False\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef async_test(redis_instance, prefix):\n    have_exception = True\n    try:\n\n        async def async_task(data_count, use_async=True):\n            redis_roots = []\n            connection_pool = redis.ConnectionPool(host='localhost', port=6379, db=0, decode_responses=True)\n            for i in range(data_count):\n                redis_instance = get_redis_instance(connection_pool)\n                redis_root = RedisRoot(\n                    prefix=prefix,\n                    redis_instance=redis_instance,\n                    ignore_deserialization_errors=True\n                )\n                redis_roots.append(redis_root)\n\n            async def create_list(redis_roots, redis_root_index, list_length):\n                some_list = [random.choice('ABCDEF') for i in range(list_length)]\n                redis_root = redis_roots[redis_root_index]\n                list_check_model_instance = ListCheckModel(\n                    redis_root=redis_root,\n                    redis_list=some_list\n                ).save()\n                return {\n                    'list': some_list,\n                    'id': list_check_model_instance['id']\n                }\n\n            async def get_object_existence(redis_roots, redis_root_index, lists_with_ids):\n                exists = False\n                redis_root = redis_roots[redis_root_index]\n                objects = redis_root.get(ListCheckModel, redis_list=lists_with_ids['list'])\n                if objects:\n                    if len(objects) == 1:\n                        exists = objects[0]['id'] == lists_with_ids['id']\n                return exists\n\n            async def update_list(redis_roots, redis_root_index, lists_with_ids):\n                result = False\n                redis_root = redis_roots[redis_root_index]\n                objects = redis_root.get(ListCheckModel, redis_list=lists_with_ids['list'])\n                if objects:\n                    if len(objects) == 1:\n                        obj = objects[0]\n                        new_list = deepcopy(lists_with_ids['list'])\n                        new_list.append('check_value')\n                        updated_obj = redis_root.update(ListCheckModel, obj, redis_list=new_list)\n                        updated_objects = redis_root.get(ListCheckModel, redis_list=new_list)\n                        if updated_objects:\n                            if len(updated_objects) == 1:\n                                result = updated_objects[0]['id'] == lists_with_ids['id']\n                return result\n\n            async def delete_list(redis_roots, redis_root_index, id):\n                result = False\n                redis_root = redis_roots[redis_root_index]\n                objects = redis_root.get(ListCheckModel, id=id)\n                if objects:\n                    if len(objects) == 1:\n                        obj = objects[0]\n                        redis_root.delete(ListCheckModel, obj)\n                        objects = redis_root.get(ListCheckModel, id=id)\n                        if not objects:\n                            result = True\n                return result\n\n            async def create_lists(lists_count, use_async=True):\n                if use_async:\n                    async_create_lists_tasks = [\n                        create_list(redis_roots, i, i + 100)\n                        for i in range(lists_count)\n                    ]\n                    list_of_lists_with_ids = await asyncio.gather(*async_create_lists_tasks)\n                else:\n                    list_of_lists_with_ids = [\n                        await create_list(redis_roots, i, i + 100)\n                        for i in range(lists_count)\n                    ]\n                return list_of_lists_with_ids\n\n            async def get_objects_existence(list_of_lists_with_ids, use_async=True):\n                if use_async:\n                    async_get_object_by_list_tasks = [\n                        get_object_existence(redis_roots, i, lists_with_ids)\n                        for i, lists_with_ids in enumerate(list_of_lists_with_ids)\n                    ]\n                    list_of_results = await asyncio.gather(*async_get_object_by_list_tasks)\n                else:\n                    list_of_results = [\n                        await get_object_existence(redis_roots, i, lists_with_ids)\n                        for i, lists_with_ids in enumerate(list_of_lists_with_ids)\n                    ]\n                return list_of_results\n\n            async def update_lists(list_of_lists_with_ids, use_async=True):\n                if use_async:\n                    async_update_list_tasks = [\n                        update_list(redis_roots, i, lists_with_ids)\n                        for i, lists_with_ids in enumerate(list_of_lists_with_ids)\n                    ]\n                    list_of_results = await asyncio.gather(*async_update_list_tasks)\n                else:\n                    list_of_results = [\n                        await update_list(redis_roots, i, lists_with_ids)\n                        for i, lists_with_ids in enumerate(list_of_lists_with_ids)\n                    ]\n                return list_of_results\n\n            async def delete_lists(list_of_lists_with_ids, use_async=True):\n                if use_async:\n                    async_delete_list_tasks = [\n                        delete_list(redis_roots, i, lists_with_ids['id'])\n                        for i, lists_with_ids in enumerate(list_of_lists_with_ids)\n                    ]\n                    list_of_results = await asyncio.gather(*async_delete_list_tasks)\n                else:\n                    list_of_results = [\n                        await delete_list(redis_roots, i, lists_with_ids)\n                        for i, lists_with_ids in enumerate(list_of_lists_with_ids)\n                    ]\n                return list_of_results\n\n\n\n            list_of_lists_with_ids = await create_lists(data_count, use_async)\n            list_of_results = await get_objects_existence(list_of_lists_with_ids, use_async)\n            if all(list_of_results):\n                list_of_results = await update_lists(list_of_lists_with_ids, use_async)\n                if all(list_of_results):\n                    list_of_results = await delete_lists(list_of_lists_with_ids, use_async)\n            return all(list_of_results)\n\n        data_count = 10\n        async_started_in = datetime.datetime.now()\n        async_result = asyncio.run(async_task(data_count))\n        async_ended_in = datetime.datetime.now()\n        async_time = (async_ended_in - async_started_in).total_seconds()\n        have_exception = not async_result\n        sync_started_in = datetime.datetime.now()\n        sync_result = asyncio.run(async_task(data_count, False))\n        sync_ended_in = datetime.datetime.now()\n        sync_time = (sync_ended_in - sync_started_in).total_seconds()\n\n        async_percent = round((async_time / sync_time - 1) * 100, 2)\n        async_symbol = ('+' if async_percent > 0 else '')\n        print(f'Async gives {async_symbol}{async_percent}% efficiency')\n\n    except BaseException as ex:\n        print(ex)\n\n    clean_db_after_test(redis_instance, prefix)\n    return have_exception\n\n\ndef run_tests():\n    redis_instance = get_redis_instance()\n    tests = [\n        basic_test,\n        auto_reg_test,\n        no_redis_instance_test,\n        choices_test,\n        order_test,\n        filter_test,\n        functions_like_defaults_test,\n        redis_foreign_key_test,\n        # django_foreign_key_test,\n        update_test,\n        delete_test,\n        ttl_test,\n        save_consistency_test,\n        meta_ttl_test,\n        economy_test,\n        list_test,\n        dict_test,\n        async_test,\n    ]\n    results = []\n    started_in = datetime.datetime.now()\n    print('STARTING TESTS\\n')\n    for i, test in enumerate(tests):\n        print(f'Starting {int(i + 1)} test: {test.__name__.replace(\"_\", \" \")}')\n        test_started_in = datetime.datetime.now()\n        result = not test(redis_instance, test.__name__)\n        test_ended_in = datetime.datetime.now()\n        test_time = (test_ended_in - test_started_in).total_seconds()\n        print(f'{result = } / {test_time}s\\n')\n        results.append(result)\n    ended_in = datetime.datetime.now()\n    time = (ended_in - started_in).total_seconds()\n    success_message = 'SUCCESS' if all(results) else 'FAILED'\n    print('\\n'\n          f'{success_message}!\\n')\n    results_success_count = 0\n    for i, result in enumerate(results):\n        result_message = 'SUCCESS' if result else 'FAILED'\n        print(f'Test {(i + 1)}/{len(results)}: {result_message} ({tests[i].__name__.replace(\"_\", \" \")})')\n        if result:\n            results_success_count += 1\n    print(f'\\n'\n          f'{results_success_count} / {len(results)} tests ran successfully\\n'\n          f'All tests completed in {time}s\\n')\n\n\nif __name__ == '__main__':\n    run_tests()\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gh0st-work/django_redis_orm",
    "keywords": "python,redis,ORM,django,database",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-redis-orm",
    "package_url": "https://pypi.org/project/django-redis-orm/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-redis-orm/",
    "project_urls": {
      "Homepage": "https://github.com/gh0st-work/django_redis_orm",
      "Repository": "https://github.com/gh0st-work/django_redis_orm"
    },
    "release_url": "https://pypi.org/project/django-redis-orm/0.1.1/",
    "requires_dist": [
      "redis (>=3.5.3,<4.0.0)",
      "Django (>=3.0,<4.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Django Redis ORM library that gives redis easy-to-use objects with fields and speeds a development up",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11366737,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20e9a3253deea1697d5307887beb6e9264519eaef2ddd75b465d0bf437fa3efd",
          "md5": "672d9fe305fa7c632907c89407dbed85",
          "sha256": "aead35824dc84ef191c84d93b64a8b1f7f45957f4dd101c4fdf8b1af1e3fcb87"
        },
        "downloads": -1,
        "filename": "django_redis_orm-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "672d9fe305fa7c632907c89407dbed85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 15975,
        "upload_time": "2021-09-03T12:17:39",
        "upload_time_iso_8601": "2021-09-03T12:17:39.213141Z",
        "url": "https://files.pythonhosted.org/packages/20/e9/a3253deea1697d5307887beb6e9264519eaef2ddd75b465d0bf437fa3efd/django_redis_orm-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2af7c0927c2570bebf8436937b415fc6b6aee42353822b7c32a6ce28b4ea1d16",
          "md5": "1a6f51d3332641ae3b3fd8eae532f67d",
          "sha256": "8028c31529e6d311428e22c070e6e91129f38021f9764a1eb5a4e74f85475cb7"
        },
        "downloads": -1,
        "filename": "django-redis-orm-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a6f51d3332641ae3b3fd8eae532f67d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 21814,
        "upload_time": "2021-09-03T12:17:36",
        "upload_time_iso_8601": "2021-09-03T12:17:36.899042Z",
        "url": "https://files.pythonhosted.org/packages/2a/f7/c0927c2570bebf8436937b415fc6b6aee42353822b7c32a6ce28b4ea1d16/django-redis-orm-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0afba9c9e3f0ddc3bdbe9b14aaa6f518ed402656563d217bbc423e376df68e35",
          "md5": "681b132be155e407c2b1e223f087b19d",
          "sha256": "f4affa9bba11469449033e7ffe12abb9763a9a073ccc87819843e173ea043ff7"
        },
        "downloads": -1,
        "filename": "django_redis_orm-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "681b132be155e407c2b1e223f087b19d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 19402,
        "upload_time": "2021-09-04T09:19:11",
        "upload_time_iso_8601": "2021-09-04T09:19:11.272997Z",
        "url": "https://files.pythonhosted.org/packages/0a/fb/a9c9e3f0ddc3bdbe9b14aaa6f518ed402656563d217bbc423e376df68e35/django_redis_orm-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "041851b08b52fe1f323005055ed819b6e408c691be1c76df56e204f63de152af",
          "md5": "976dfdf1fff2ea97bba5bee8aa346c8a",
          "sha256": "c16c500f7ad5493f5ea9397851130aa8226cca1f207b73f0d666048e2ff0cdac"
        },
        "downloads": -1,
        "filename": "django-redis-orm-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "976dfdf1fff2ea97bba5bee8aa346c8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 22140,
        "upload_time": "2021-09-04T09:19:08",
        "upload_time_iso_8601": "2021-09-04T09:19:08.909810Z",
        "url": "https://files.pythonhosted.org/packages/04/18/51b08b52fe1f323005055ed819b6e408c691be1c76df56e204f63de152af/django-redis-orm-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7fbbb9989be473d8a0b64cbb5eb2397b95d0019bcb5efc70acc8b4c02d75361",
          "md5": "9a3d9ec6dbeab96b452aef39731b7fd8",
          "sha256": "b74ee6dc0d751119211528bcaafff76b9d147ce49c6bb431eb28efdfe8cc9b26"
        },
        "downloads": -1,
        "filename": "django_redis_orm-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a3d9ec6dbeab96b452aef39731b7fd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 15972,
        "upload_time": "2021-09-04T09:21:15",
        "upload_time_iso_8601": "2021-09-04T09:21:15.018833Z",
        "url": "https://files.pythonhosted.org/packages/c7/fb/bb9989be473d8a0b64cbb5eb2397b95d0019bcb5efc70acc8b4c02d75361/django_redis_orm-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16be2c8f60ad035a8f16d1437000b2985c851ab7cd4ed41bfd92d7463eebf068",
          "md5": "b2f0f4a5ac2db2eed4c81fd57bfb2772",
          "sha256": "79cb0c2883c23b6768cd6b95e7f673450d518f8e1bf7a02f55b62c612121cb02"
        },
        "downloads": -1,
        "filename": "django-redis-orm-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b2f0f4a5ac2db2eed4c81fd57bfb2772",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 21837,
        "upload_time": "2021-09-04T09:21:13",
        "upload_time_iso_8601": "2021-09-04T09:21:13.062561Z",
        "url": "https://files.pythonhosted.org/packages/16/be/2c8f60ad035a8f16d1437000b2985c851ab7cd4ed41bfd92d7463eebf068/django-redis-orm-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "911cd5e3fabfa7b76b3a1d0e712130fe9a36e2ab7a50d899f2b069fe0557c82f",
          "md5": "1500c2db583a48f72ee84550481ba919",
          "sha256": "1d78e35d5804db7f4b56c24a36cd2ab6e196873f5e73be3ca20cc489c460d6a9"
        },
        "downloads": -1,
        "filename": "django_redis_orm-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1500c2db583a48f72ee84550481ba919",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 16076,
        "upload_time": "2021-09-04T09:46:07",
        "upload_time_iso_8601": "2021-09-04T09:46:07.957256Z",
        "url": "https://files.pythonhosted.org/packages/91/1c/d5e3fabfa7b76b3a1d0e712130fe9a36e2ab7a50d899f2b069fe0557c82f/django_redis_orm-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36d7d39dc3e59258377870fa0c592793f55369b661a2c6f1dd1e46d497be22c5",
          "md5": "dc8b3cb5c5e7636c56c96eb536c1bcd3",
          "sha256": "a469203272f5a2110913fc20b442d681ec7d11e046f2b20bf8f863153114b74a"
        },
        "downloads": -1,
        "filename": "django-redis-orm-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dc8b3cb5c5e7636c56c96eb536c1bcd3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 22014,
        "upload_time": "2021-09-04T09:46:05",
        "upload_time_iso_8601": "2021-09-04T09:46:05.610892Z",
        "url": "https://files.pythonhosted.org/packages/36/d7/d39dc3e59258377870fa0c592793f55369b661a2c6f1dd1e46d497be22c5/django-redis-orm-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5a64ed7005614951dde74216d9d801e9e046ff8bca7cd8ae6187206c9727006",
          "md5": "d767233eca3d67a03a42d1b1df7ba23e",
          "sha256": "57896477539c5246818be8580c0761630a8214e26540af524606c74add8eb17b"
        },
        "downloads": -1,
        "filename": "django_redis_orm-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d767233eca3d67a03a42d1b1df7ba23e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 16826,
        "upload_time": "2021-09-04T21:30:58",
        "upload_time_iso_8601": "2021-09-04T21:30:58.071474Z",
        "url": "https://files.pythonhosted.org/packages/a5/a6/4ed7005614951dde74216d9d801e9e046ff8bca7cd8ae6187206c9727006/django_redis_orm-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e03e93b1c79deb0e42cf12f487994dd4ee0f24e78cb8f8b73ef01b42a6efc72",
          "md5": "4238da6b85c7d90f9b3120465764e8c8",
          "sha256": "41c7d0a1671d11c06a9b521e65ab130d4c9b9b060710a2538b571cf393955549"
        },
        "downloads": -1,
        "filename": "django-redis-orm-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4238da6b85c7d90f9b3120465764e8c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 22731,
        "upload_time": "2021-09-04T21:30:56",
        "upload_time_iso_8601": "2021-09-04T21:30:56.220301Z",
        "url": "https://files.pythonhosted.org/packages/5e/03/e93b1c79deb0e42cf12f487994dd4ee0f24e78cb8f8b73ef01b42a6efc72/django-redis-orm-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "106367a7c299c0b0c9bfe6d8f984492afc3a639bd8b895c69eaf38c65efc91ca",
          "md5": "c9b2b3a6b0a07d8b0a8460c706e5cbc5",
          "sha256": "d6c956320c80745a138a891f9da5ddc562f5f07002626d67ebfeb6c5b7d0d47d"
        },
        "downloads": -1,
        "filename": "django_redis_orm-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9b2b3a6b0a07d8b0a8460c706e5cbc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 16728,
        "upload_time": "2021-09-04T21:42:44",
        "upload_time_iso_8601": "2021-09-04T21:42:44.682934Z",
        "url": "https://files.pythonhosted.org/packages/10/63/67a7c299c0b0c9bfe6d8f984492afc3a639bd8b895c69eaf38c65efc91ca/django_redis_orm-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4a799f98f1ef62cbdafc637b2efdfb4149441d072a5059aa090fb7a4ea1e936",
          "md5": "4811b23a6651f0339ae3ac94b7045fdd",
          "sha256": "d11746a242eba031e259b72655d4cd0bc84e67dbf71318e765780961a2ae1bfa"
        },
        "downloads": -1,
        "filename": "django-redis-orm-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "4811b23a6651f0339ae3ac94b7045fdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 22679,
        "upload_time": "2021-09-04T21:42:42",
        "upload_time_iso_8601": "2021-09-04T21:42:42.414152Z",
        "url": "https://files.pythonhosted.org/packages/d4/a7/99f98f1ef62cbdafc637b2efdfb4149441d072a5059aa090fb7a4ea1e936/django-redis-orm-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebe34dd77c92371eff21c1c75cf0f69e199c5b2d3cfffc224423fb26ac039b72",
          "md5": "90819d2ad3c7371b64864dc96d6cfcdd",
          "sha256": "321d0846ee000e6c96d61d27258fcf10a6b2e07df659778326ea1885c713a63b"
        },
        "downloads": -1,
        "filename": "django_redis_orm-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90819d2ad3c7371b64864dc96d6cfcdd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 17826,
        "upload_time": "2021-09-04T22:15:08",
        "upload_time_iso_8601": "2021-09-04T22:15:08.148549Z",
        "url": "https://files.pythonhosted.org/packages/eb/e3/4dd77c92371eff21c1c75cf0f69e199c5b2d3cfffc224423fb26ac039b72/django_redis_orm-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "892db117407a5b5dcc9da611152910bce7f1cbb7d4d7bd11ef871bcd57446c8a",
          "md5": "0dc3f20ad6ce1387ea84bb6b59c2591d",
          "sha256": "6a5ef84175e2a77c26f04965a8a649d9abdf862f658ce7a925788350ab1ab0bd"
        },
        "downloads": -1,
        "filename": "django-redis-orm-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "0dc3f20ad6ce1387ea84bb6b59c2591d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 23187,
        "upload_time": "2021-09-04T22:15:06",
        "upload_time_iso_8601": "2021-09-04T22:15:06.349147Z",
        "url": "https://files.pythonhosted.org/packages/89/2d/b117407a5b5dcc9da611152910bce7f1cbb7d4d7bd11ef871bcd57446c8a/django-redis-orm-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a9e55b16cd2bc752f3b4151aca7537252d64f13a5eef0780a590ab80a43a949",
          "md5": "0b4e04f895ac25eabc08923f7d23ea00",
          "sha256": "daf51fd5a9444e3af828235017ee78a582d3ae622b2a16036de1fece3c4b11e3"
        },
        "downloads": -1,
        "filename": "django_redis_orm-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b4e04f895ac25eabc08923f7d23ea00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 17814,
        "upload_time": "2021-09-04T22:23:04",
        "upload_time_iso_8601": "2021-09-04T22:23:04.187929Z",
        "url": "https://files.pythonhosted.org/packages/4a/9e/55b16cd2bc752f3b4151aca7537252d64f13a5eef0780a590ab80a43a949/django_redis_orm-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba1d6cb0b80fcfe97b23ae035df90da2031c5ec1601b17b2a227a68cdf91321d",
          "md5": "d1d4f2a13e9115242e370cab8012c74d",
          "sha256": "2569982ef290c22358bc9f1a80ef5f5e8890d616cd993d69dfa47150770b7b58"
        },
        "downloads": -1,
        "filename": "django-redis-orm-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "d1d4f2a13e9115242e370cab8012c74d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 23165,
        "upload_time": "2021-09-04T22:23:01",
        "upload_time_iso_8601": "2021-09-04T22:23:01.842237Z",
        "url": "https://files.pythonhosted.org/packages/ba/1d/6cb0b80fcfe97b23ae035df90da2031c5ec1601b17b2a227a68cdf91321d/django-redis-orm-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b38d6d4f3320e38cab249fe2eadef988834db8cc928e5c43d4cb9e8af9e2e092",
          "md5": "11dbfca545411bfc9bdb037e2cdbf8b6",
          "sha256": "b808150744963c12cee1460a5646f0ce1035084d11a1ce3600d11770d1a8f21f"
        },
        "downloads": -1,
        "filename": "django_redis_orm-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11dbfca545411bfc9bdb037e2cdbf8b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 17814,
        "upload_time": "2021-09-04T22:25:20",
        "upload_time_iso_8601": "2021-09-04T22:25:20.206901Z",
        "url": "https://files.pythonhosted.org/packages/b3/8d/6d4f3320e38cab249fe2eadef988834db8cc928e5c43d4cb9e8af9e2e092/django_redis_orm-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c13e9cd7a12f2fdaad9dcc310bb8e2d80f61f127606ca1bc9cbb342f93931610",
          "md5": "94a880363303b48b23d163919ec724a7",
          "sha256": "e427b7bcedc5a8356169b7da2dd244a2411fa2fddc848b8d0b7bd07423d9bcc0"
        },
        "downloads": -1,
        "filename": "django-redis-orm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "94a880363303b48b23d163919ec724a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 23192,
        "upload_time": "2021-09-04T22:25:17",
        "upload_time_iso_8601": "2021-09-04T22:25:17.962902Z",
        "url": "https://files.pythonhosted.org/packages/c1/3e/9cd7a12f2fdaad9dcc310bb8e2d80f61f127606ca1bc9cbb342f93931610/django-redis-orm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2154469b51988a24e8cfd277f48cab28a5a8833e88a2435ade11ffa14a2b3274",
          "md5": "5609984b3754aad6f499ac4b89076551",
          "sha256": "509c50116e5098405f156b68719ae0f4f003d577ba9c2bf0118b7f55c5b33d67"
        },
        "downloads": -1,
        "filename": "django_redis_orm-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5609984b3754aad6f499ac4b89076551",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 17818,
        "upload_time": "2021-09-04T22:26:51",
        "upload_time_iso_8601": "2021-09-04T22:26:51.796885Z",
        "url": "https://files.pythonhosted.org/packages/21/54/469b51988a24e8cfd277f48cab28a5a8833e88a2435ade11ffa14a2b3274/django_redis_orm-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a247422a8d7e1ac9ad656ba81cad06d58e1dcb2605afadc4a342d9051e439def",
          "md5": "b932ea7c5ef3371d0e81f32887e85b3b",
          "sha256": "e76367c377eba76b5809cbb24ea3e1c6e67be8c451f94d70f664f681c8be2cdf"
        },
        "downloads": -1,
        "filename": "django-redis-orm-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b932ea7c5ef3371d0e81f32887e85b3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 23183,
        "upload_time": "2021-09-04T22:26:49",
        "upload_time_iso_8601": "2021-09-04T22:26:49.353090Z",
        "url": "https://files.pythonhosted.org/packages/a2/47/422a8d7e1ac9ad656ba81cad06d58e1dcb2605afadc4a342d9051e439def/django-redis-orm-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2154469b51988a24e8cfd277f48cab28a5a8833e88a2435ade11ffa14a2b3274",
        "md5": "5609984b3754aad6f499ac4b89076551",
        "sha256": "509c50116e5098405f156b68719ae0f4f003d577ba9c2bf0118b7f55c5b33d67"
      },
      "downloads": -1,
      "filename": "django_redis_orm-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5609984b3754aad6f499ac4b89076551",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 17818,
      "upload_time": "2021-09-04T22:26:51",
      "upload_time_iso_8601": "2021-09-04T22:26:51.796885Z",
      "url": "https://files.pythonhosted.org/packages/21/54/469b51988a24e8cfd277f48cab28a5a8833e88a2435ade11ffa14a2b3274/django_redis_orm-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a247422a8d7e1ac9ad656ba81cad06d58e1dcb2605afadc4a342d9051e439def",
        "md5": "b932ea7c5ef3371d0e81f32887e85b3b",
        "sha256": "e76367c377eba76b5809cbb24ea3e1c6e67be8c451f94d70f664f681c8be2cdf"
      },
      "downloads": -1,
      "filename": "django-redis-orm-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b932ea7c5ef3371d0e81f32887e85b3b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 23183,
      "upload_time": "2021-09-04T22:26:49",
      "upload_time_iso_8601": "2021-09-04T22:26:49.353090Z",
      "url": "https://files.pythonhosted.org/packages/a2/47/422a8d7e1ac9ad656ba81cad06d58e1dcb2605afadc4a342d9051e439def/django-redis-orm-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}