{
  "info": {
    "author": null,
    "author_email": "许灿标 <lcctoor@outlook.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License"
    ],
    "description": "# Project description\n\nThe most elegant MongoDB ORM in history.\n\n# Installation and documentation\n\nInstall：`pip install coolmongo`\n\n[Documentation](https://github.com/lcctoor/lccpy/blob/main/coolmongo/docs/doc.md)\n\n[中文文档](https://github.com/lcctoor/lccpy/blob/main/coolmongo/docs/doc_zh.md)\n\n# Bug submission and feature proposal\n\nYou can contact me through [Github-Issues](https://github.com/lcctoor/lccpy/issues), [WeChat](https://raw.githubusercontent.com/lcctoor/me/main/author/WeChatQR.jpg), [Technology exchange group on WeChat](https://raw.githubusercontent.com/lcctoor/me/main/ExchangeGroup/PythonTecQR.jpg) .\n\n# About the author\n\nAuthor：许灿标\n\nEmail：lcctoor@outlook.com\n\n[Home Page](https://github.com/lcctoor/me/blob/main/home.md) | [WeChat](https://raw.githubusercontent.com/lcctoor/me/main/author/WeChatQR.jpg) | [Python technology exchange group on WeChat](https://raw.githubusercontent.com/lcctoor/me/main/ExchangeGroup/PythonTecQR.jpg)\n\nOpen source projects：[Make Python simpler](https://github.com/lcctoor/lccpy#readme)\n\n# Syntax Preview\n\nImport：\n\n```python\nfrom pymongo import MongoClient\nimport coolmongo as mg\nfrom coolmongo import mc, mup\n```\n\nCreate an ORM:\n\n```python\nmkconn = lambda: MongoClient(host='localhost', port=27017)\n\norm = mg.ORM(mkconn=mkconn)  # account ORM\ndb = orm['city']  # db ORM\nsheet = db['school']  # sheet ORM\n```\n\nAdd data:\n\n```python\nline1 = {'name': 'tony 1', 'age':11, 'lucky_numbers':[1, 2, 3], 'score':{'english':81, 'math':82}}\nline2 = {'name': 'tony 2', 'age':12, 'lucky_numbers':[2, 3, 4], 'score':{'english':82, 'math':83}}\nline3 = {'name': 'tony 3', 'age':13, 'lucky_numbers':[3, 4, 5], 'score':{'english':83, 'math':84}}\nline4 = {'name': 'tony 4', 'age':14, 'lucky_numbers':[4, 5, 6], 'score':{'english':84, 'math':85}}\nline5 = {'name': 'tony 5', 'age':15, 'lucky_numbers':[5, 6, 7], 'score':{'english':85, 'math':86}}\nline6 = {'name': 'tony 6', 'age':16, 'lucky_numbers':[6, 7, 8], 'score':{'english':86, 'math':87}}\n\nr1 = sheet + line1  # Add a row of data\nr2 = sheet + [line2, line3, line4, line5, line6]  # Add multiple rows of data\n```\n\nQuery example:\n\n```python\nsheet[:]  # Query all data\n\nsheet[3]  # Query Article 3 data\n\nsheet[mc.score.english == 85][:]  # Query data with an English score of 85\n\nsheet[mc.age>13][mc.name=='tony 5'][1]  # Query the first data with the age greater than 13 and the name 'tony 5'\n```\n\nModify Example:\n\n```python\nsheet[mc.age>10][2:5] = {\n    'vision': 5.0,\n    'gender': 'male',\n    'like': ['football','basketball','painting','rope skipping'],\n    'lucky_numbers': mup.push(15,16,17),  # Add to list\n    'age': mup.inc(2)  # Increment\n}\n```\n\nDelete example:\n\n```python\n# Delete all data with age>=15\nsheet[mc.age>=15][:] = None\n\n# Delete the second data with age greater than 10 and name containing 'tony'\nsheet[mc.age>10][mc.name == mg.re('tony')][2] = None\n\n# Delete all data\nsheet[:] = None\n```\n\nMember operation:\n\n| **Code**                                   | **Explanation**                                                       |\n| ------------------------------------------------ | --------------------------------------------------------------------------- |\n| mc.grade == mg.isin('junior 2', 'junior 3')      | if the field value is a member of the input value, it matches               |\n| mc.age == mg.notin(10, 30, 45)                   | if the field value is not a member of the input value, it matches           |\n| mc.like == mg.containAll('painting', 'football') | if the field value contains all the elements of the input value, it matches |\n| mc.like == mg.containAny('painting', 'football') | if the field value contains at least one element of the input value         |\n| mc.like == mg.containNo('painting', 'football')  | if the field value does not contain any elements of the input value         |\n\nRegular operation:\n\n| **Code**           |\n| ------------------------ |\n| mc.name == mg.re('tony') |\n\nSet operations between filters:\n\n| Code                                                                        | Explanation    |\n| --------------------------------------------------------------------------- | -------------- |\n| [ mc.age>3 ][ mc.age<100 ]                                                  | intersection   |\n| [ (mc.age==30)&#124; (mc.age>30) &#124; (mc.age<30) &#124; (mc.age==None) ] | union          |\n| [ (mc.age>3) - (mc.age>100) ]                                               | difference set |\n| [ ~(mc.age>100) ]                                                           | complement     |\n\nSlice example:\n\n```python\nsheet[filter]...[filter][1]  # Query the first eligible item\nsheet[filter]...[filter][1] = None  # Delete the eligible Article 1\nsheet[filter]...[filter][1] = {'grade':'junior 1'}  # Modify Article 1 that meets the conditions\n\nsheet[filter]...[filter][3:7]  # Query eligible items 3 to 7\nsheet[filter]...[filter][3:7] = None  # Delete articles 3 to 7 that meet the conditions\nsheet[filter]...[filter][3:7] = {'grade':'junior 1'}  # Modify articles 3 to 7 that meet the conditions\n```\n\nLimit return fields:\n\nOnly the name and age fields are returned:\n\n```python\nsheet[mc.age>11][mc.age<30]['name','age'][:]\n```\n\nList of special operations:\n\n| **Syntax** | **Meaning**                                                        |\n| ---------------- | ------------------------------------------------------------------------ |\n| mup.inc(1)       | Auto-Increment 1                                                         |\n| mup.inc(-1)      | self-reduction 1                                                         |\n| mup.add(1, 2, 3) | adds an element to a list field only if the added element does not exist |\n| ...              | ...                                                                      |\n\nStatistics:\n\n| **Function**      | **Syntax**        |\n| ----------------------- | ----------------------- |\n| Total data              | len( sheet )            |\n| Data volume with age>10 | len( sheet[mc.age>10] ) |\n\norm (account ORM):\n\n| **Function**                | **Syntax** | **Return**            |\n| --------------------------------- | ---------------- | --------------------------- |\n| obtain the names of all libraries | orm.getDbNames() | ['admin', 'config', 'city'] |\n| check whether a library exists.   | 'city'  in  orm  | True                        |\n| delete a library                  | del orm['city']  |                             |\n| delete all libraries except admin | del orm[:]       |                             |\n| number of statistical databases   | len( orm )       | 1                           |\n\ndb (database ORM):\n\n| **Function**             | **Syntax**   | **Return** |\n| ------------------------------ | ------------------ | ---------------- |\n| obtain the names of all sheets | db.getSheetNames() | ['school']       |\n| check whether a sheet exists.  | 'school'  in  db   | True             |\n| delete a sheet                 | del db['school']   |                  |\n| delete all sheets              | del db[:]          |                  |\n| number of statistical sheets   | len( db )          | 0                |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "coolmongo,pymongo,mongodb",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "coolmongo",
    "package_url": "https://pypi.org/project/coolmongo/",
    "platform": null,
    "project_url": "https://pypi.org/project/coolmongo/",
    "project_urls": {
      "Documentation": "https://github.com/lcctoor/lccpy/blob/main/coolmongo/docs/doc.md"
    },
    "release_url": "https://pypi.org/project/coolmongo/1.2/",
    "requires_dist": [
      "pymongo",
      "vtype"
    ],
    "requires_python": null,
    "summary": "The most elegant MongoDB ORM in history",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17510356,
  "releases": {
    "1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "76987f951a6d6b9d2259834eab9ed5fc32d2189c2f3fd68be813674c42ea30f8",
          "md5": "d5444d7941e444c71c6977bce9416bcc",
          "sha256": "b3e6578c9ab14fafd282fc1d36f5abfa99153b145fa22a9860a87c0a2e6f3b5a"
        },
        "downloads": -1,
        "filename": "coolmongo-1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5444d7941e444c71c6977bce9416bcc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11918,
        "upload_time": "2023-03-16T14:46:05",
        "upload_time_iso_8601": "2023-03-16T14:46:05.271185Z",
        "url": "https://files.pythonhosted.org/packages/76/98/7f951a6d6b9d2259834eab9ed5fc32d2189c2f3fd68be813674c42ea30f8/coolmongo-1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "00783fa3455d9c766d59d6fb9ef8941c829c56872f36f90a51a8d9df474ae333",
          "md5": "daff1d1e087776f2b996b9b4dbd1fa1c",
          "sha256": "988122c05a63aaf1eebee3b8e6dc69e99817fa534bde1dc7b722f2e786c850a5"
        },
        "downloads": -1,
        "filename": "coolmongo-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "daff1d1e087776f2b996b9b4dbd1fa1c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17001,
        "upload_time": "2023-03-16T14:46:15",
        "upload_time_iso_8601": "2023-03-16T14:46:15.080730Z",
        "url": "https://files.pythonhosted.org/packages/00/78/3fa3455d9c766d59d6fb9ef8941c829c56872f36f90a51a8d9df474ae333/coolmongo-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "b8810fe3253bcd2901e882a3e8935fcb1c4b6f0f1284fd8e0646342a6cb70f85",
          "md5": "15dee8540c95f8f288d85cbfe5b7071a",
          "sha256": "1ae58c705d64865f78159a121e8dbcd11cc31406fc3afd107064885c3f358746"
        },
        "downloads": -1,
        "filename": "coolmongo-1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15dee8540c95f8f288d85cbfe5b7071a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12012,
        "upload_time": "2023-03-30T12:16:20",
        "upload_time_iso_8601": "2023-03-30T12:16:20.338030Z",
        "url": "https://files.pythonhosted.org/packages/b8/81/0fe3253bcd2901e882a3e8935fcb1c4b6f0f1284fd8e0646342a6cb70f85/coolmongo-1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "fa2f3e6ea5bfba3914455daebc0f2d9aac9055a4834193db26225be895143281",
          "md5": "7aa686dcb110239da233a1065de3b7d2",
          "sha256": "8b8a05e57c15d5af2cf99eb3b48283eaba492358d86994bf933680a2fb543276"
        },
        "downloads": -1,
        "filename": "coolmongo-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7aa686dcb110239da233a1065de3b7d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13336,
        "upload_time": "2023-03-30T12:16:23",
        "upload_time_iso_8601": "2023-03-30T12:16:23.261127Z",
        "url": "https://files.pythonhosted.org/packages/fa/2f/3e6ea5bfba3914455daebc0f2d9aac9055a4834193db26225be895143281/coolmongo-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "b8810fe3253bcd2901e882a3e8935fcb1c4b6f0f1284fd8e0646342a6cb70f85",
        "md5": "15dee8540c95f8f288d85cbfe5b7071a",
        "sha256": "1ae58c705d64865f78159a121e8dbcd11cc31406fc3afd107064885c3f358746"
      },
      "downloads": -1,
      "filename": "coolmongo-1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "15dee8540c95f8f288d85cbfe5b7071a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12012,
      "upload_time": "2023-03-30T12:16:20",
      "upload_time_iso_8601": "2023-03-30T12:16:20.338030Z",
      "url": "https://files.pythonhosted.org/packages/b8/81/0fe3253bcd2901e882a3e8935fcb1c4b6f0f1284fd8e0646342a6cb70f85/coolmongo-1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "fa2f3e6ea5bfba3914455daebc0f2d9aac9055a4834193db26225be895143281",
        "md5": "7aa686dcb110239da233a1065de3b7d2",
        "sha256": "8b8a05e57c15d5af2cf99eb3b48283eaba492358d86994bf933680a2fb543276"
      },
      "downloads": -1,
      "filename": "coolmongo-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7aa686dcb110239da233a1065de3b7d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13336,
      "upload_time": "2023-03-30T12:16:23",
      "upload_time_iso_8601": "2023-03-30T12:16:23.261127Z",
      "url": "https://files.pythonhosted.org/packages/fa/2f/3e6ea5bfba3914455daebc0f2d9aac9055a4834193db26225be895143281/coolmongo-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}