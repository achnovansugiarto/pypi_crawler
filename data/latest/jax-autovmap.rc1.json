{
  "info": {
    "author": "",
    "author_email": "Mathis Gerdes <mathisgerdes@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Tests](https://github.com/mathisgerdes/autovmap/actions/workflows/python-pytest.yml/badge.svg)](https://github.com/mathisgerdes/autovmap/actions/workflows/python-package.yml)\n# Automatically broadcast via JAX vmap\n\nAutomatically broadcast a function that takes inputs of specific ranks to accept any batch dimensions using `jax.vmap`.\nSee the documentation of [JAX](https://github.com/google/jax) for more information about `vmap`.\n\nThis module defines a decorator function which takes as input the base ranks of the arguments of a function.\nThe transformed function takes any broadcastable combination of batched inputs and automatically applies `jax.vmap` as required.\nOne could equivalently apply `vmap` by hand, however the in-axes have to be chosen differently for different inputs. \nThe decorator takes care of this automatically; if the underlying ranks are known, batch dimensions can be inferred.\n\n## Example\n\nConsider the following function which takes numeric arguments with fixed and known ranks as input:\n```python\nimport jax.numpy as jnp\n\ndef foo(s, v, m):  # s - scalar, v - vector, m - matrix\n    return v @ m @ v + s * v.size\n```\nIf we have inputs of appropriate rank, the function can be applied without problem:\n```python\ns = jnp.array(2.0)    # scalar\nv = jnp.ones(3)       # vector\nm = jnp.ones((3, 3))  # matrix\nprint(foo(s, v, m))   # prints 15.0\n```\nAssume now, however, that we have 5 matrices and 5 vectors for which we want to apply the above function as a batch.\nMany numpy functions can take inputs with leading batch dimensions, but here we have an issue because `v @ m @ v` requires `m` to be a matching matrix.\n```python\ns = jnp.array(2.0)\nv = jnp.ones((5, 3))\nm = jnp.ones((5, 3, 3))\nprint(foo(s, v, m))  # throws TypeError\n```\nThere are multiple possible ways we can solve this\n\n- We could try to write the function more carefully, so it can take both single and batch inputs. \n  Or we could always require the first dimension to be a batch index (like often done in convolutional neural networks).\n- Given known inputs, we can transform our function: `jax.jit(foo, (None, 0, 0))`. \n  However, the axes change depending on the inputs. \n  If we want to expose functions that accept batched inputs to the user, we need to have some clear naming scheme (to indicate which arguments are batched).\n\nSometimes, the best solution is one of the above. \nThis module provides another more flexible solution.\nIf the ranks the function *wants* are known, we can derive which arguments have (leading) batch dimensions.\nBased on that, we can apply `jax.vmap` appropriately.\nThat is exactly what the `auto_vmap` wrapper does.\nThanks to `jax.jit`, after the transformed function is JIT-compiled, there is no price to pay for this extra flexibility since it only depends on the statically-known input shapes.\n\nWe can define the more flexible function as follows:\n```python\nfrom jax_autovmap import auto_vmap\n\n@auto_vmap(s=0, v=1, m=2)\ndef foo(s, v, m):\n    return v @ m @ v + s * v.size\n\nprint(foo(s, v, m))  # prints [15. 15. 15. 15. 15.]\n```\nThe ranks can be specified by keyword argument as above, or positionally (in this case `@auto_vmap(0, 1, 2)`).\nThis does not have to be applied to all input arguments.\nThey can either be omitted or, if ranks are given positionally, specified as `None`.\n\nIf the arguments are pytrees (python structures of arrays) and the rank is a single integer, all constituents (leaves) are assumed to have that rank.\nAlternatively, the rank can be a matching pytree, just like the `in_axes` in `jax.vmap`:\n```python\n@auto_vmap({'s'=0, 'v'=1, 'm'=2})\ndef foo(inputs):\n    return inputs['v'] @ inputs['m'] @ inputs['v']\n\nprint(foo(dict(s=s, v=v, m=m)))\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jax-autovmap",
    "package_url": "https://pypi.org/project/jax-autovmap/",
    "platform": null,
    "project_url": "https://pypi.org/project/jax-autovmap/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/jax-autovmap/0.1.0/",
    "requires_dist": [
      "jax (>=0.2.20)",
      "jaxlib (>=0.1.69)",
      "numpy",
      "importlib-metadata ; python_version < \"3.8\""
    ],
    "requires_python": ">=3.7",
    "summary": "Automatically broadcast inputs by dynamically applying jax.vmap",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15755824,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e29726922357958d2342760ba8b3e736ca0e84269c31fcc032714a79a6eee5ae",
          "md5": "3ddfea0c8ae5373c314dc10ef21a71ec",
          "sha256": "97ebb515e2db0af4fb1b31aa4a575891c912ac7e46a1edce7dbe285053819ce3"
        },
        "downloads": -1,
        "filename": "jax_autovmap-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ddfea0c8ae5373c314dc10ef21a71ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6502,
        "upload_time": "2022-11-14T03:09:18",
        "upload_time_iso_8601": "2022-11-14T03:09:18.589386Z",
        "url": "https://files.pythonhosted.org/packages/e2/97/26922357958d2342760ba8b3e736ca0e84269c31fcc032714a79a6eee5ae/jax_autovmap-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2c205f425ca18f815e0ab50e8358612c4d6fe2b2a3294d4f1bf004f0ca58bdd",
          "md5": "f93992801e5ebd33e766afd5a5fb2002",
          "sha256": "61cd5cec39cd0fe9bc7eb77f84bd6cd25c1586137310f321dd5b196d2c9681fc"
        },
        "downloads": -1,
        "filename": "jax_autovmap-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f93992801e5ebd33e766afd5a5fb2002",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6174,
        "upload_time": "2022-11-14T03:09:19",
        "upload_time_iso_8601": "2022-11-14T03:09:19.805311Z",
        "url": "https://files.pythonhosted.org/packages/a2/c2/05f425ca18f815e0ab50e8358612c4d6fe2b2a3294d4f1bf004f0ca58bdd/jax_autovmap-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e29726922357958d2342760ba8b3e736ca0e84269c31fcc032714a79a6eee5ae",
        "md5": "3ddfea0c8ae5373c314dc10ef21a71ec",
        "sha256": "97ebb515e2db0af4fb1b31aa4a575891c912ac7e46a1edce7dbe285053819ce3"
      },
      "downloads": -1,
      "filename": "jax_autovmap-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3ddfea0c8ae5373c314dc10ef21a71ec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6502,
      "upload_time": "2022-11-14T03:09:18",
      "upload_time_iso_8601": "2022-11-14T03:09:18.589386Z",
      "url": "https://files.pythonhosted.org/packages/e2/97/26922357958d2342760ba8b3e736ca0e84269c31fcc032714a79a6eee5ae/jax_autovmap-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2c205f425ca18f815e0ab50e8358612c4d6fe2b2a3294d4f1bf004f0ca58bdd",
        "md5": "f93992801e5ebd33e766afd5a5fb2002",
        "sha256": "61cd5cec39cd0fe9bc7eb77f84bd6cd25c1586137310f321dd5b196d2c9681fc"
      },
      "downloads": -1,
      "filename": "jax_autovmap-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f93992801e5ebd33e766afd5a5fb2002",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6174,
      "upload_time": "2022-11-14T03:09:19",
      "upload_time_iso_8601": "2022-11-14T03:09:19.805311Z",
      "url": "https://files.pythonhosted.org/packages/a2/c2/05f425ca18f815e0ab50e8358612c4d6fe2b2a3294d4f1bf004f0ca58bdd/jax_autovmap-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}