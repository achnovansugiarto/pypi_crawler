{
  "info": {
    "author": "DataStax",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Adelphi tooling\n\n## Introduction\nA tool for interacting with the DataStax [Adelphi](https://github.com/datastax/adelphi) project.  This package provides the \"adelphi\" application which in turn provides the following features:\n\n* Extraction of schemas for one or more keyspaces from a running Apache Cassandra&trade; cluster\n* Optionally anonymizing these schemas\n* Formatting these schemas as CQL statements or as JSON documents\n* Automatic generation of a nosqlbench configuration for an input schema\n* Displaying these formatted schemas on standard out or writing them to the filesystem\n* Automate a workflow for contributing anonymized schemas to the public [Adelphi schema repository](https://github.com/datastax/adelphi-schemas)\n\nThe anonymization process replaces all keyspace names, table names and table column names with a generic identifier.  You can use the \"adelphi\" application to extract, format and display schemas from your Cassandra clusters without contributing these schemas to the Adelphi project, and for this use case anonymization is not required.  Anonymization *is* required anytime you contribute schemas to the Adelphi project.  __All the schemas in our repository are publicly visible so to avoid *any* possible leakage of proprietary information we can only accept schemas which have been anonymized__.\n\nThis package supports Python 2.7.x as well as Python 3.5 through 3.9.\n\n## Installation\nWe recommend using pip for installation:\n\n    pip install adelphi\n\n## Commands\nThe functionality of the \"adelphi\" tool is divided into several different commands.  Details on each command are provided below.\n\n### export-cql\nThis command extracts schemas for the specified keyspaces from a Cassandra instance and then displays the CQL commands necessary to generate them to standard out.  You can optionally specify an output directory, in which case the CQL commands are written to files within that directory, one file for each keyspace.\n\nThe following will display the schemas for the keyspaces \"foo\" and \"bar\" on standard out: \n\n    adelphi --keyspaces=foo,bar export-cql\n\nIf you wish to store the schemas in a directory \"baz\" you could use the following instead:\n\n    adelphi --keyspaces=foo,bar --output-dir=baz export-cql\n\n### export-gemini\nThis command is similar to the \"export-cql\" command.  Schemas are extracted from a Cassandra instance and formatted for use with Scylla's [Gemini](https://github.com/scylladb/gemini) tool.\n\nTo display Gemini-formatted schemas for the keyspaces \"foo\" and \"bar\" use the following:\n\n    adelphi --keyspaces=foo,bar export-gemini\n\nAnd to store these schemas in a directory \"baz\":\n\n    adelphi --keyspaces=foo,bar --output-dir=baz export-gemini\n\n### export-nb\nThis command is also similar to the \"export-cql\" command.  Schemas are extracted from a Cassandra instance and used to generate a [nosqlbench](https://github.com/nosqlbench/nosqlbench) configuration for the database.\n\nTo generate a nosqlbench config for the keyspaces \"foo\" and \"bar\" use the following:\n\n    adelphi --keyspaces=foo,bar export-nb\n\nAnd to store these configs in a directory \"baz\":\n\n    adelphi --keyspaces=foo,bar --output-dir=baz export-nb\n\nThe number of cycles for use in the rampup and main scenarios can be specified by command-specific flags:\n\n    adelphi --keyspaces=foo,bar export-nb --rampup-cycles=10000 --main-cycles=10000\n\nThe command will use the current Cassandra database to generate sequences and/or distributions (as appropriate) in the nosqlbench configuration for a randomly-selected table within the specified keyspace.  Most single-valued CQL data types are supported, although we do not yet have support for any of the following data types:\n\n* Counters\n* Frozen types\n* Collection types (list, map, set)\n* UDTs\n\n### contribute\nThis command automates the workflow of contributing one or more schemas to the Adelphi project.  The [Adelphi schema repository](https://github.com/datastax/adelphi-schemas) is implemented as a Github repository and contributions to this repository take the form of pull requests.  The workflow implemented by this command includes the following steps:\n\n* Fork the Adelphi schema repository into the Github workspace for the specified user\n** If the user has already forked the schema repository that fork will be re-used\n* Create a branch in the forked repository\n* Extract and anonymize schemas from the specified Cassandra instance\n* Add files representing the contents of these schemas to the branch in the forked repsitory\n* Create a pull request on the Adelphi schema repository for the newly-created branch and files\n\nThe syntax for using this command looks very similar to the export commands above.  The following will create a pull request to contribute schemas for the keyspaces \"foo\" and \"bar\" to Adelphi:\n\n    adelphi --keyspaces=foo,bar contribute\n\nAuthentication to Github is performed by way of a [personal access token](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token).  You must create a token for your Github user before you can contribute your schema(s) to Adelphi.  The token can be provided to the command at execution time using a command-line argument but this is discouraged for security reasons.  Instead we recommend using an environment variable, in this case the **ADELPHI_CONTRIBUTE_TOKEN** environment variable.  We discuss using environment variables to pass command-line arguments in more detail below.\n\n## Options\nThe \"adelphi\" application supports several command-line arguments.  The full list of arguments can be accessed via the following:\n\n    adelphi --help\n\nThe output of this command provides a brief summary of each argument:\n\n    $ adelphi --help\n    Usage: adelphi [OPTIONS] COMMAND [ARGS]...\n\n    Options:\n      --hosts TEXT       Comma-separated list of contact points  [default:\n                         127.0.0.1]\n\n      --port INTEGER     Database RPC port  [default: 9042]\n      --username TEXT    Database username\n      --password TEXT    Database password\n      --keyspaces TEXT   Comma-separated list of keyspaces to include. If not\n                         specified all non-system keypaces will be included\n\n      --rf INTEGER       Replication factor to override original setting.\n                         Optional.\n\n      --no-anonymize     Disable schema anonymization\n      --output-dir TEXT  Directory schema files should be written to. If not\n                         specified, it will write to stdout\n\n      --purpose TEXT     Comments on the anticipated purpose of this schema.\n                         Optional.\n\n      --maturity TEXT    The maturity of this schema.  Sample values would include\n                         'alpha', 'beta', 'dev', 'test' or 'prod'.  Optional.\n\n      --help             Show this message and exit.\n\n    Commands:\n      contribute     Contribute schemas to Adelphi\n      export-cql     Export a schema as raw CQL statements\n      export-gemini  Export a schema in a format suitable for use with the the...\n      export-nb      Export a schema in a format suitable for use with the the...\n\nIndividual commands may have their own options and/or help text.  For example the help for the \"contribute\" command is as follows:\n\n    $ adelphi contribute --help\n    Usage: adelphi contribute [OPTIONS]\n\n       Contribute schemas to Adelphi\n\n    Options:\n      --token TEXT  Personal access token for Github user\n      --help        Show this message and exit.\n\n### A quick note on keyspaces\nNone of the commands above *require* you to specify keyspaces for export.  If you do not supply the \"--keyspaces\" argument then *all* keyspaces will be considered for export.  In either case the application will prune system keyspaces before performing the export.\n\nBoth the \"export-gemini\" and \"export-nb\" commands can only operate against a single keyspace.  Therefore these commands must be run against a Cassandra instance containing a single keyspace or the user must leverage the \"--keyspaces\" flag to specify only a single keyspce.  If multiple keyspaces are selected the program will exit with an error message.\n\n### A quick note on anonymization\nThe anonymization process can be explicitly disabled using the \"--no-anonymize\" argument.\n\nNote that since all contributed schemas *must* be anonymized the \"--no-anonymize\" argument cannot be used when contributing schemas to Adelphi.  Supplying this argument when attempting to contribute one or more schemas will cause the application to exit with an error message.\n\n### Parameters via environment variables\nValues for individual arguments can also be specified using corresponding environment variables.  The name of the environment variable to use takes the form \"ADELPHI_ARGUMENT\" where \"ARGUMENT\" is the uppercase name of the argument.  So for example the following is equivalent to the first example in the \"export-cql\" section above:\n\n    export ADELPHI_KEYSPACES=foo,bar\n    adelphi export-cql\n\nTo supply a value for a command-specific parameter use an environment variable of the form \"ADELPHI_COMMAND_ARGUMENT\" where \"COMMAND\" is an the uppercase name of the command and \"ARGUMENT\" the uppercase name of the argument.  As mentioned above this feature becomes quite useful for providing the Github personal access token.  Using the **ADELPHI_CONTRIBUTE_TOKEN** environment variable removes the need to specify any security materials when invoking the application.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/datastax/adelphi",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adelphi",
    "package_url": "https://pypi.org/project/adelphi/",
    "platform": "",
    "project_url": "https://pypi.org/project/adelphi/",
    "project_urls": {
      "Documentation": "https://github.com/datastax/adelphi/blob/master/python/adelphi/README.md",
      "Homepage": "https://github.com/datastax/adelphi",
      "Issues": "https://github.com/datastax/adelphi/issues",
      "Source": "https://github.com/datastax/adelphi"
    },
    "release_url": "https://pypi.org/project/adelphi/0.2.1/",
    "requires_dist": [
      "cassandra-driver (~=3.24)",
      "click (~=7.1)",
      "PyGithub (~=1.45)",
      "PyYAML (~=5.4)",
      "backports.tempfile (~=1.0)"
    ],
    "requires_python": "",
    "summary": "Tooling for Adelphi",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14423461,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0d374bc10b7cf6492c06a54645c660d25e3bbcb9febea8f0fb4662bcc3f6c2e",
          "md5": "8696c970cb932952bd2383eab77d5ed1",
          "sha256": "994c34c256c2dc3a5fab9441227d26c2fc6239fa69384e3ae2446087e746fc4d"
        },
        "downloads": -1,
        "filename": "adelphi-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8696c970cb932952bd2383eab77d5ed1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14950,
        "upload_time": "2020-12-18T06:52:33",
        "upload_time_iso_8601": "2020-12-18T06:52:33.692180Z",
        "url": "https://files.pythonhosted.org/packages/a0/d3/74bc10b7cf6492c06a54645c660d25e3bbcb9febea8f0fb4662bcc3f6c2e/adelphi-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e19697d4eecac878c9406e06feaf2aa97a7d68f7f01f1c70a621bce06526b3c3",
          "md5": "e92f3a25d9e9ccf65000ea20df8503f1",
          "sha256": "5c12374be1ae8e32242164093b4e6eb03919876bf1e3b17d88413c16c44ddc33"
        },
        "downloads": -1,
        "filename": "adelphi-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e92f3a25d9e9ccf65000ea20df8503f1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20620,
        "upload_time": "2021-04-20T15:50:33",
        "upload_time_iso_8601": "2021-04-20T15:50:33.584218Z",
        "url": "https://files.pythonhosted.org/packages/e1/96/97d4eecac878c9406e06feaf2aa97a7d68f7f01f1c70a621bce06526b3c3/adelphi-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fd06bbbb302fd53009297e390a8df1bd64337779f52d206e0f89cc06abb8ef1",
          "md5": "76bd74f1bc351d37663f6d039e57b704",
          "sha256": "0b49f22fe7c51f13207f2af70d3ae05bd008b0b2fe19a81c5a9cda3b758d31cd"
        },
        "downloads": -1,
        "filename": "adelphi-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76bd74f1bc351d37663f6d039e57b704",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20700,
        "upload_time": "2021-05-25T07:18:32",
        "upload_time_iso_8601": "2021-05-25T07:18:32.663293Z",
        "url": "https://files.pythonhosted.org/packages/8f/d0/6bbbb302fd53009297e390a8df1bd64337779f52d206e0f89cc06abb8ef1/adelphi-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8fd06bbbb302fd53009297e390a8df1bd64337779f52d206e0f89cc06abb8ef1",
        "md5": "76bd74f1bc351d37663f6d039e57b704",
        "sha256": "0b49f22fe7c51f13207f2af70d3ae05bd008b0b2fe19a81c5a9cda3b758d31cd"
      },
      "downloads": -1,
      "filename": "adelphi-0.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76bd74f1bc351d37663f6d039e57b704",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 20700,
      "upload_time": "2021-05-25T07:18:32",
      "upload_time_iso_8601": "2021-05-25T07:18:32.663293Z",
      "url": "https://files.pythonhosted.org/packages/8f/d0/6bbbb302fd53009297e390a8df1bd64337779f52d206e0f89cc06abb8ef1/adelphi-0.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}