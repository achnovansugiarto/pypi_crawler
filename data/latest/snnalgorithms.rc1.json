{
  "info": {
    "author": "a-t-0",
    "author_email": "no-email@no-email.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Spiking Neural Network Algorithms\n\n[![Python 3.10][python_badge]](https://www.python.org/downloads/release/python-3106/)\n[![License: AGPL v3][agpl3_badge]](https://www.gnu.org/licenses/agpl-3.0)\n[![Code Style: Black][black_badge]](https://github.com/ambv/black)\n[![Code Coverage][codecov_badge]](https://codecov.io/gh/a-t-0/snnalgorithms)\n\nThis is a library of Spiking Neural Network algorithms (SNNs), along with their\nregular/normal/Neumann implementation. to their default/Neumann implementations.\nThe user can specify an SNN and \"normal\" algorithm which take as input a\nnetworkx graph, and compute some graph property as output. The output of the\nSNN is then compared to the \"normal\" algorithm as \"ground truth\", in terms of:\n\n- Score: How many results the SNN algorithm computed correctly (from a set of input\n  graphs).\n- Runtime\n  In theory, the score should always be 100% for the SNN, as it should be an\n  exact SNN implementation of the ground truth algorithm. This comparison is\n  mainly relevant for the additions of brain adaptation and simulated radiation.\n\nDifferent SNN implementations may use different encoding schemes, such as\nsparse coding, population coding and/or rate coding.\n\n## Parent Repository\n\nThese algorithms can be analysed using\n[this parent repository].\nTogether, these repos can be used to investigate the effectivity of various\n[brain-adaptation] mechanisms applied to these algorithms, in order to increase\ntheir \\[radiation\\] robustness. You can run it on various [backends], as well\nas on a custom LIF-neuron simulator.\n\n## Algorithms\n\nAn overview is included of the implemented SNN algorithms and their\nrespective compatibilities with [brain-adaptation], [radiation] and\n[backends] implementations:\n\n| Algorithm                            | Encoding | Adaptation | Radiation    | Backend                      |\n| ------------------------------------ | -------- | ---------- | ------------ | ---------------------------- |\n| Minimum Dominating Set Approximation | Sparse   | Redundancy | Neuron Death | - networkx LIF<br>- Lava LIF |\n| Some Algorithm Approximation         | Sparse   | Redundancy | Neuron Death | - networkx LIF<br>- Lava LIF |\n|                                      |          |            |              |                              |\n\nretry\n\n| Algorithm          | Encoding | Adaptation | Radiation    | Backend        |\n| ------------------ | -------- | ---------- | ------------ | -------------- |\n| Minimum Dominating | Sparse   | Redundancy | Neuron Death | - networkx LIF |\n| Set Approximation  | Sparse   | Redundancy | Neuron Death | - Lava LIF     |\n| Some Algorithm     | Sparse   | Redundancy | Neuron Death | - networkx LIF |\n|                    |          |            |              |                |\n\n### Minimum Dominating Set Approximation\n\nThis is an implementation of the distributed algorithm presented by Alipour et al.\n\n- *Input*: Non-triangle, planar Networkx graph. (Non triangle means there\n  should not be any 3 nodes that are all connected with each other (forming a\n  triangle)). Planar means that if you lay-out the graph on a piece of paper, no\n  lines intersect (that you can roll it out on a 2D plane).\n- *Output*: A set of nodes that form a dominating set in the graph.\n\n*Description:* The algorithm basically consists of `k` rounds, where you can\nchoose `k` based on how accurate you want the approximation to be, more rounds\n(generally) means more accuracy. At the start each node `i` gets 1 random\nnumber `r_i`. This is kept constant throughout the entire algorithm. Then for\nthe first round:\n\n- Each node `i` computes how many neighbours (degree) `d_i` it has.\n- Then it adds `r_i+d_i=w_i`.\n  In all consecutive rounds:\n- Each node `i` \"computes\" which neighbour has the highest weight `w_j`, and\n  gives that node 1 mark/point. Then each node `i` has some mark/score `m_i`.\n  Next, the weight `w_i=r_i+m_i` is computed (again) and the next round starts.\n  This last round is repeated until `k` rounds are completed. At the end, the\n  nodes with a non-zero mark/score `m_i` are selected to form the dominating set.\n\n<!-- Un-wrapped URL's (Badges and Hyperlinks) -->\n\n[agpl3_badge]: https://img.shields.io/badge/License-AGPL_v3-blue.svg\n[backends]: https://github.com/a-t-0/snnbackends\n[black_badge]: https://img.shields.io/badge/code%20style-black-000000.svg\n[brain-adaptation]: https://github.com/a-t-0/snnadaptation\n[codecov_badge]: https://codecov.io/gh/a-t-0/snn/branch/main/graph/badge.svg\n[python_badge]: https://img.shields.io/badge/python-3.10-blue.svg\n[radiation]: https://github.com/a-t-0/snnradiation\n[this parent repository]: https://github.com/a-t-0/snncompare\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/a-t-0/snnalgorithms",
    "keywords": "",
    "license": "AGPLv3",
    "maintainer": "a-t-0",
    "maintainer_email": "no-email@no-email.org",
    "name": "snnalgorithms",
    "package_url": "https://pypi.org/project/snnalgorithms/",
    "platform": null,
    "project_url": "https://pypi.org/project/snnalgorithms/",
    "project_urls": {
      "Homepage": "https://github.com/a-t-0/snnalgorithms"
    },
    "release_url": "https://pypi.org/project/snnalgorithms/0.0.1/",
    "requires_dist": [
      "jsons (>=1.6.3)",
      "matplotlib (>=3.6.1)",
      "networkx (>=2.8.7)",
      "numpy (>=1.23.4)",
      "pyannotate (>=1.2.0)",
      "pytest-cov (>=4.0.0)",
      "typeguard (>=2.13.3)"
    ],
    "requires_python": ">=3.10",
    "summary": "compares snn algorithms against neumann algorithms",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15685352,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1641d2cda5741ef34d63e5d6af078e8b11b17a92d63eab4d54454fa64c58efb",
          "md5": "35a8605341fdf3f5a00027979d501be6",
          "sha256": "89e280f97b307759b674310f954e28e50ac325c9e96514597e0a60f1be684537"
        },
        "downloads": -1,
        "filename": "snnalgorithms-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35a8605341fdf3f5a00027979d501be6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.10",
        "size": 21202,
        "upload_time": "2022-11-07T14:05:25",
        "upload_time_iso_8601": "2022-11-07T14:05:25.676121Z",
        "url": "https://files.pythonhosted.org/packages/c1/64/1d2cda5741ef34d63e5d6af078e8b11b17a92d63eab4d54454fa64c58efb/snnalgorithms-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5005a95aec7eaa273fc8642e5073afe6f6ac8a7d0e1e8cabbf9840dc12cd6348",
          "md5": "81d7d3611f55a123508bda033b993597",
          "sha256": "e3025b5d39fa1b83ebc96d3cf8851a165f05307a1e04b98b3012a1ded138d3bf"
        },
        "downloads": -1,
        "filename": "snnalgorithms-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "81d7d3611f55a123508bda033b993597",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 21754,
        "upload_time": "2022-11-07T14:05:33",
        "upload_time_iso_8601": "2022-11-07T14:05:33.504306Z",
        "url": "https://files.pythonhosted.org/packages/50/05/a95aec7eaa273fc8642e5073afe6f6ac8a7d0e1e8cabbf9840dc12cd6348/snnalgorithms-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1641d2cda5741ef34d63e5d6af078e8b11b17a92d63eab4d54454fa64c58efb",
        "md5": "35a8605341fdf3f5a00027979d501be6",
        "sha256": "89e280f97b307759b674310f954e28e50ac325c9e96514597e0a60f1be684537"
      },
      "downloads": -1,
      "filename": "snnalgorithms-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35a8605341fdf3f5a00027979d501be6",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.10",
      "size": 21202,
      "upload_time": "2022-11-07T14:05:25",
      "upload_time_iso_8601": "2022-11-07T14:05:25.676121Z",
      "url": "https://files.pythonhosted.org/packages/c1/64/1d2cda5741ef34d63e5d6af078e8b11b17a92d63eab4d54454fa64c58efb/snnalgorithms-0.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5005a95aec7eaa273fc8642e5073afe6f6ac8a7d0e1e8cabbf9840dc12cd6348",
        "md5": "81d7d3611f55a123508bda033b993597",
        "sha256": "e3025b5d39fa1b83ebc96d3cf8851a165f05307a1e04b98b3012a1ded138d3bf"
      },
      "downloads": -1,
      "filename": "snnalgorithms-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "81d7d3611f55a123508bda033b993597",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 21754,
      "upload_time": "2022-11-07T14:05:33",
      "upload_time_iso_8601": "2022-11-07T14:05:33.504306Z",
      "url": "https://files.pythonhosted.org/packages/50/05/a95aec7eaa273fc8642e5073afe6f6ac8a7d0e1e8cabbf9840dc12cd6348/snnalgorithms-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}