{
  "info": {
    "author": "EUROfusion Enabling Research Team ENR-IST-MOD-01 2022",
    "author_email": "rogerio.jorge@tecnico.ulisboa.pt",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "\n# **NEAT**\n**NEar-Axis opTimisation**\n\n![GitHub](https://img.shields.io/github/license/rogeriojorge/neat)\n![GitHub Workflow Status](https://img.shields.io/github/workflow/status/rogeriojorge/NEAT/CI)\n[![Documentation Status](https://readthedocs.org/projects/neat-docs/badge/?version=latest)](https://neat-docs.readthedocs.io/en/latest/?badge=latest)\n[![codecov](https://codecov.io/gh/rogeriojorge/NEAT/branch/main/graph/badge.svg?token=8515A2RQL3)](https://codecov.io/gh/rogeriojorge/NEAT)\n\nNEAT is a python framework that is intended to find optimized stellarator configurations for fast particle confinement using the near-axis expansion formalism.\nThe magnetic field is calculated using the codes [pyQSC](https://github.com/landreman/pyQSC/) and [pyQIC](https://github.com/rogeriojorge/pyQIC/), the particle orbits are traced using the code [gyronimo](https://github.com/prodrigs/gyronimo) (included as a submodule) and the optimization is done using the code [simsopt](https://github.com/hiddenSymmetries/). The benchmarks are made with the [SIMPLE](https://github.com/itpplasma/SIMPLE) and [BEAMS3D](https://github.com/PrincetonUniversity/STELLOPT/tree/develop/BEAMS3D) codes (under construction).\n\nWe show here the standard way to download and install NEAT. For more information, please visit the [documentation](http://neat-docs.readthedocs.io/) present in http://neat-docs.readthedocs.io/.\n\n# Installation\n\nTo install NEAT, you'll need the following libraries\n\n* gsl\n* boost\n* gcc10\n\nand the python packages specified in [requirements.txt](requirements.txt).\nNote that [pyQSC](https://github.com/landreman/pyQSC/) and [pyQIC](https://github.com/rogeriojorge/pyQIC/) should be downloaded and installed locally.\n\n## PyPI\n\nThe simplest installation of NEAT is by running the command\n\n    pip install neatstel\n\nHowever, it doesn't work on every system and the code hosted in PyPI might be outdated.\n\n## From source\n\nTo download, clone NEAT using the following command:\n\n    git clone https://github.com/rogeriojorge/NEAT.git\n\n\nThe python packages necessary to run NEAT are listed in the file [requirements.txt](requirements.txt).\nA simple way of installing them is by running\n\n\n    pip install -r requirements.txt\n\n\nThen, to install NEAT, on its root directory run\n\n\n    pip install -e .\n\n\nIf you do not have permission to install python packages to the\ndefault location, add the ``--user`` flag to ``pip`` so the package\ncan be installed for your user only::\n\n\n    pip install --user -e .\n\n\nTo debug any possible problems that might arise, you may also try to install\nusing the provided ``setup.py`` file\n\n\n    python setup.py install --user\n\n\nDone! Now try running an example.\n\nNote: the python package is called `neatstel`.\n\n## Docker\n\nThis section explains how to build the docker container for NEAT. It can be used to compile gyronimo, install pyQSC, simsopt and compile NEAT in a docker image directly.\n\n### Using Docker Hub\n\nThe easiest way to get simsopt docker image which comes with NEAT and all of its dependencies such as gyronimo and VMEC pre-installed is to use Docker Hub. After installing docker, you can run the simsopt container directly from the simsopt docker image uploaded to Docker Hub.\n\n\n    docker run -it --rm rjorge123/neat\n\n\nThe above command should load the terminal that comes with the NEAT docker container. When you run it first time, the image is downloaded automatically, so be patient. You should now be able to import the module from python:\n\n\n    python3\n    import neat\n\n\n### Build locally\n\nTo build the image locally, instead of downloading from DockerHub, you can use the commands below:\n\n\n1. Build the docker image by running the `docker build` command in the repo root directory:\n\n   docker build -t neat -f docker/Dockerfile.NEAT .\n\nThis process yields an image with roughly 2 GB and may take minute to build.\n\n2. Run the docker image using the `docker run` command including your results folder:\n\n    docker run -it neat\n\n\n3. Done! You are now in an environment with NEAT installed. You can open python and run the examples.\n\n# Usage\n\nFor common uses of NEAT, please check the `examples` folder.\nIt has the three main current uses of NEAT:\n- Trace a single particle orbit (`examples/plot_single_orbit_qs.py`)\n- Trace an ensemble of particles (`examples/calculate_loss_fraction_qs.py`)\n- Optimize a stellarator magnetic field (`examples/optimize_loss_fraction_qs.py`)\n\n# Normalizations\n\nAll units are in SI, except:\n- The mass of the particle, which is in units of the mass of the proton\n- The charge of the particle is normalized to the charge of the proton\n- The energy is in eV\n\nLambda = mu (SI) / Energy (SI) * B (reference SI)\n\n# Profiling\n\n## Profiling Python code\n\nUse the line_profiler python extension.\n\n```pip install line_profiler```\n\nExample [here](https://stackoverflow.com/questions/22328183/python-line-profiler-code-example/43376466#43376466)\n\n## Profiling the C++ extension\n\nThere is a C++ script in the `src/neatpp` directory called `neatpp_profiling.cpp` that has the\nsole purpose of helping find bottlenecks in the C++ implementation. We show here an example of\nhow to profile the code using the tool `gperftools`.\n\n    https://github.com/gperftools/gperftools\n\nOn MacOs, it can be installed via Macports or Homebrew.\nOn Ubuntu, it can be install via ```sudo apt-get install google-perftools```.\n\nFor it to profile the code, the flag `PROFILING` should be `ON` in the `cmake_config_file.json` file.\nAfter compiling NEAT, it will create an executable called `profiling` in the temporary build directory.\nTo profile the code using the `gperftools`, you can run\n\n    CPUPROFILE=profile.out build/path_to_profiling\n\nwhere the output file for the profiling was named `profile.out`.\n\nThe results can be ploted using the following command\n\n    pprof --gv build/path_to_profiling profile.out\n\nOn MacOs, to show the plot, one needs to install `gprof2dot`, `graphivz` and `gv`. On macports, for example, this can be done using\n\n    sudo port install py310-gprof2dot graphivz gv\n\nwhere the python version 3.10 was specified.\n\nIf, instead of plotting, you would like text results, you can run\n\n    prof build/path_to_profiling profile.out\n\n# FAQ\n\n## pybind11 not found by cmake\n\nPlease use the following command to install ```pybind11[global]``` instead of ```pybind11```\n\n\n    pip install \"pybind11[global]\"\n\n\n## How to clean all folders created during installation/execution\n\nTo clean the build folders and all folders not being tracked by GIT, run\n\n    git clean -d -f -x\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rogeriojorge/NEAT",
    "keywords": "plasma physics,plasma,magnetohydrodynamics,mhd,nuclear fusion reactor,fusion,stellarator,vmec,simple,pybind,optimization",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neatstel",
    "package_url": "https://pypi.org/project/neatstel/",
    "platform": null,
    "project_url": "https://pypi.org/project/neatstel/",
    "project_urls": {
      "Homepage": "https://github.com/rogeriojorge/NEAT"
    },
    "release_url": "https://pypi.org/project/neatstel/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Optimization of near-axis magnetic fields",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14067185,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85625ba5e2c59a3aa85852e87cd03b851869e01cec4f73c648a03c91d2363c8d",
          "md5": "479e1335d23bb0aaf9a210564fb8b745",
          "sha256": "6ec24117158f8182cfb027dabd59fb1f5cf913ab1fb4762b0a2c86f32a42f396"
        },
        "downloads": -1,
        "filename": "neatstel-0.0.1-cp38-cp38-macosx_12_0_x86_64.whl",
        "has_sig": false,
        "md5_digest": "479e1335d23bb0aaf9a210564fb8b745",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 178198,
        "upload_time": "2022-04-14T17:42:47",
        "upload_time_iso_8601": "2022-04-14T17:42:47.457262Z",
        "url": "https://files.pythonhosted.org/packages/85/62/5ba5e2c59a3aa85852e87cd03b851869e01cec4f73c648a03c91d2363c8d/neatstel-0.0.1-cp38-cp38-macosx_12_0_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ea8db00ff98652b508bc0614d05153faf1a9f8f77a11565c0978af47e8ad63a",
          "md5": "146ead005cbb087f6298a03589d8f842",
          "sha256": "44126c7c858f35514af6934e2beee009f14727af76fb6e88b21cfde8867ba1c8"
        },
        "downloads": -1,
        "filename": "neatstel-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "146ead005cbb087f6298a03589d8f842",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51752,
        "upload_time": "2022-04-14T15:47:01",
        "upload_time_iso_8601": "2022-04-14T15:47:01.747929Z",
        "url": "https://files.pythonhosted.org/packages/8e/a8/db00ff98652b508bc0614d05153faf1a9f8f77a11565c0978af47e8ad63a/neatstel-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8c7b33ec66e85ae60187b26d3bc26f3710dacaaa849b778e80e53491b1f32b2",
          "md5": "cd22d533db179bbe7d14a919a0056fda",
          "sha256": "7d84e350bdbcee91394f9170bee5f4acb0874a4be653ac062dde1d9b21143159"
        },
        "downloads": -1,
        "filename": "neatstel-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd22d533db179bbe7d14a919a0056fda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 665474,
        "upload_time": "2022-06-08T09:10:28",
        "upload_time_iso_8601": "2022-06-08T09:10:28.210747Z",
        "url": "https://files.pythonhosted.org/packages/f8/c7/b33ec66e85ae60187b26d3bc26f3710dacaaa849b778e80e53491b1f32b2/neatstel-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8c7b33ec66e85ae60187b26d3bc26f3710dacaaa849b778e80e53491b1f32b2",
        "md5": "cd22d533db179bbe7d14a919a0056fda",
        "sha256": "7d84e350bdbcee91394f9170bee5f4acb0874a4be653ac062dde1d9b21143159"
      },
      "downloads": -1,
      "filename": "neatstel-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cd22d533db179bbe7d14a919a0056fda",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 665474,
      "upload_time": "2022-06-08T09:10:28",
      "upload_time_iso_8601": "2022-06-08T09:10:28.210747Z",
      "url": "https://files.pythonhosted.org/packages/f8/c7/b33ec66e85ae60187b26d3bc26f3710dacaaa849b778e80e53491b1f32b2/neatstel-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}