{
  "info": {
    "author": "Tab Atkins-Bittner",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Documentation"
    ],
    "description": "# KDL-py\n\nA handwritten Python 3.7+ implemenation of a parser\nfor the [KDL Document Language](https://kdl.dev),\nfully compliant with KDL 1.0.0.\n\n[KDL](https://kdl.dev) is, as the name suggests, a document language,\nfilling approximately the same niche as JSON/YAML/XML/etc\nto be a simple but powerful language for config files.\nIt combines the best of several of these languages,\nwhile avoiding their pitfalls:\nmore general than JSON and more powerful than XML,\nwhile avoiding the verbosity of XML\nor the explosive complexity of YAML.\n\nkdl-py, in particular, is focused on *ease-of-use*,\nsupporting things like date/times, ip addresses, urls, uuids, regexes, and binary data\ndirectly in your KDL document\n(via powerful but simple tagged values),\nand parsing them into native Python types automatically,\nor doing the reverse and letting you build KDL document trees\nwith these values directly,\nand automatically and safely serializing them into KDL text\nfor later parsing!\n\nYou can customize parsing and serialization further for your application very easily,\nby providing node or value \"converters\"\nto turn plain KDL values or nodes\ninto application-specific types,\nand then turning them back into KDL text automatically\nmerely by adding a `.to_kdl()` method to your classes.\n\n## Installing\n\n```sh\npip install kdl-py\n```\n\nWhen installed, a `kdlreformat` command-line program is also made available,\nwhich can canonicalize a KDL document. See [below](#kdlreformat) for options.\n\n## Using\n\nThe `kdl.parse(str, parseConfig?)` function parses, you guessed it, a string of KDL into a KDL document object:\n\n```py3\nimport kdl\n\n>>> import kdl\n>>> doc = kdl.parse('''\n... node_name \"arg\" {\n...     child_node foo=1 bar=true\n... }\n... ''')\n>>>\n>>> doc\nDocument(\n    nodes=[\n        Node(\n            name='node',\n            args=['arg'],\n            nodes=[\n                Node(\n                    name='child',\n                    props=OrderedDict([\n                        ('foo', 1.0),\n                        ('bar', True)\n                    ])\n                )\n            ]\n        )\n    ]\n)\n```\n\nYou can also create a `kdl.Parser()` object and call its `.parse()` method; `Parser` objects can set up parsing and printing options that'll apply by default. See below for how to configure parsing options.\n\nEither way, you'll get back a `kdl.Document` object, which is fully mutable. By default, untagged KDL values are represented with native Python objects.\n\n```py3\n>>> doc.nodes[0].nodes[0].properties[\"foo\"] = 2\n>>>\n>>> print(doc)\nnode_name \"arg\" {\n        child_node bar=True foo=2\n}\n\n```\n\nStringifying a `kdl.Document` object will produce a valid KDL document back. You can also call `doc.print(printConfig?)` to customize the printing with a `PrintConfig` object, described below.  See below for how to configure printing options.\n\n### Inserting Native Values\n\nkdl-py allows a number of native Python objects to be used directly in KDL documents by default,\nand allows you to customize your own objects for use.\n\nkdl-py automatically recognizes and correctly serializes the following objects:\n\n* `bool`: as untagged `true` or `false`\n* `None`: as untagged `null`\n* `int`, `float`: as untagged decimal number\n* `str`: as untagged string\n* `bytes`: as `(base64)`-tagged string\n* `decimal.Decimal`: as `(decimal)`-tagged string\n* `datetime`, `date`, and `time`: as `(date-time)`, `(date)`, or `(time)`-tagged strings\n* `ipaddress.IPv4Address` and `ipaddress.IPv6Address`: as `(ipv4)` or `(ipv6)`-tagged strings\n* `urllib.parse.ParseResult` (the result of calling `urllib.parse.urlparse()`): as `(url)`-tagged string\n* `uuid.UUID`: as `(uuid)`-tagged string\n* `re.Pattern` (the result of calling `re.compile()`): as `(regex)`-tagged raw string\n\nAll of the tags used above are reserved and predefined by the [KDL specification](https://github.com/kdl-org/kdl/blob/main/SPEC.md#reserved-type-annotations-for-numbers-without-decimals).\n\nIn addition, any value with a `.to_kdl()` method\ncan be used in a kdl-py document.\nThe method will be called when the document is stringified,\nand must return one of the kdl-py types,\nor any of the native types defined above.\n\n(For *parsing* KDL into these native types,\nor your own types,\nsee the `ParseConfig` section, below.)\n\n## Customizing Parsing\n\nParsing can be controlled via a `kdl.ParseConfig` object,\nwhich can be provided in three ways.\nIn order of importance:\n\n1. Passing a `ParseConfig` object to `kdl.parse(str, ParseConfig?)`\n\tor `parser.parse(str, ParseConfig?)`\n\t(if you've constructed a `kdl.Parser`).\n2. Creating a `kdl.Parser(parseConfig?, printConfig?)`,\n\twhich automatically applies it to its `.parse()` method if not overriden.\n3. Fiddling with the `kdl.parsing.defaults` object,\n\twhich is used if nothing else provides a config.\n\nA `ParseConfig` object has the following properties:\n\n* `nativeUntaggedValues: bool = True`\n\n\tControls whether the parser produces native Python objects (`str`, `int`, `float`, `bool`, `None`) when parsing untagged values (those without a `(foo)` prefix), or always produces kdl-py objects (such as `kdl.String`, `kdl.Decimal`, etc).\n\n* `nativeTaggedValues: bool = True`\n\n\tControls whether the parser produces native Python objects\n\twhen parsing *tagged* values,\n\tfor some of [KDL's predefined tags](https://github.com/kdl-org/kdl/blob/main/SPEC.md#reserved-type-annotations-for-numbers-without-decimals):\n\n\t* `i8`, `i16`, `i32`, `i64`, `u8`, `u16`, `u32`, `u64` on numbers:\n\t\tChecks that the value is in the specified range,\n\t\tthen converts it to an `int`.\n\t\t(It will serialize back out as an ordinary untagged number.)\n\t* `f32`, `f64` on numbers:\n\t\tConverts it to a `float`.\n\t\t(It will serialize back out as an ordinary untagged number.)\n\t* `decimal64`, `decimal128` on numbers, and `decimal` on strings:\n\t\tConverts it to a `decimal.Decimal` object.\n\t\t(Always reserializes to a `(decimal)`-tagged string.)\n\t* `date-time`, `date`, `time` on strings:\n\t\tConverts to a `datetime`, `time`, or `date` object.\n\t* `ipv4`, `ipv6` on strings:\n\t\tConverts it to an `ipaddress.IPv4Address` or `ipaddress.IPv6Address` object.\n\t* `url` on strings:\n\t\tConverts it to a `urllib.parse.ParseResult` tuple.\n\t* `uuid` on strings:\n\t\tConverts it to a `uuid.UUID` object.\n\t* `regex` on strings:\n\t\tConverts it to a `re.Pattern` object.\n\t\t(It will serialize back out as a raw string.)\n\t* `base64` on strings:\n\t\tConverts it to a `bytes` object.\n\n\n* `valueConverters: Dict[str, Callable] = {}`\n\n\tA dictionary of tag->converter functions,\n\tletting you parse tagged values\n\t(like `(date)\"2021-01-01\"`)\n\tinto whatever types you'd like.\n\n\tWhenever a value is encountered with the given tag,\n\tyour converter will be called with two arguments:\n\tthe fully-constructed kdl-py object,\n\tand a `ParseFragment` object giving you access\n\tto the precise characters parsed from the document.\n\tWhatever you return will be inserted into the document instead.\n\n\t(Note that this does *not* specialize on value type;\n\ta converter set to handle, say, a \"base6\" tag,\n\tintending it to be used on numbers like `(base6)123450`,\n\twill get called for `(base6)\"a string\"` too.\n\tIf you intend to only handle specific types of values,\n\tmake sure to check the value's type\n\tand return it unchanged if you don't intend to handle it.)\n\n\tYou can produce KDL values\n\t(such as parsing `(hex)\"0x12.e5\"` into a `kdl.Decimal`,\n\tsince KDL doesn't support fractional hex values),\n\tor into any other type.\n\tIf you return a non-KDL type,\n\tyou probably want to ensure it has a `.to_kdl()` method\n\t(or is one of the supported built-in types),\n\tso it can be serialized back into a KDL document.\n\n* `nodeConverters: Dict[NodeKey, Callable] = {}`\n\n\tSimilar to `valueConverters`,\n\texcept the converters here are called on `kdl.Node`s.\n\n\tThe keys for the map are [`NodeKey`s](#NodeKey), as well,\n\tbecause both the node name *and* tag are valuable to key off of.\n\n\n### ParseFragment\n\n`kdl.ParseFragment` is passed to your custom converters,\nspecified in `kdl.ParseConfig.tags`,\ngiving you direct access to the input characters\nbefore any additional processing was done on them.\nThis is useful, for example,\nto handle numeric types\nthat might have lost precision in the normal parse.\n\nIt exposes a `.fragment` property,\ncontaining the raw text of the value\n(after the tag, if any).\n\nIt also exposes a `.error(str)` method,\nwhich takes a custom error message\nand returns a `kdl.ParseError`\nwith the `ParseFragment`'s location already built in,\nready for you to `raise`.\nThis should be used if your conversion fails for any reason,\nso your errors look the same as native parse errors.\n\n## Customizing Printing\n\nLike parsing, printing a kdl-py `Document` back to a KDL string can be controlled by a `kdl.PrintConfig` object,\nwhich can be provided in three ways.\nIn order of importance:\n\n1. Passing a `PrintConfig` object to `doc.print(PrintConfig?)`.\n2. Setting `doc.printConfig` to a `PrintConfig`.\n\t(This is done automatically for any documents produced by a `Parser`,\n\tif you pass the `printConfig` option to the constructor.)\n3. Fiddling with the `kdl.printing.defaults` object,\n\twhich is used if nothing else provides a config.\n\nA `PrintConfig` object has the following properties:\n\n* `indent: str = \"\\t\"`\n\n\tThe string used for each indent level.\n\tDefaults to tabs,\n\tbut can be set to a sequence of spaces if desired\n\t(or anything else).\n\n* `semicolons: bool = False`\n\n\tWhether or not nodes are ended with semicolons.\n\t(The printer always ends nodes with a newline anyway,\n\tso this is purely a stylistic choice.)\n\n* `printNullArgs: bool = True`\n\n\tWhen `False`, automatically skips over any \"null\"/`None` arguments.\n\tThis will corrupt documents that use the \"null\" keyword intentionally,\n\tbut can be useful if you'd prefer to use a `None` value\n\tas a signal that the argument has been removed.\n\n* `printNullProps: bool = True`\n\n\tIdentical to `printNullArgs`,\n\tbut applies to properties rather than arguments.\n\n* `respectStringType: bool = True`\n\n\tWhen `True`, the printer will output strings as the same type they were in the input,\n\teither raw (`r#\"foo\"#`) or normal (`\"foo\"`).\n\tWhen `False`, the printer always outputs normal strings.\n\n\tNote that this only has an effect on `kdl.String` and `kdl.RawString` objects;\n\tif the document contains Python `str` objects,\n\tthey will always output as normal strings.\n\n* `respectRadix: bool = True`\n\n\tSimilar to `respectStringType`,\n\twhen `True` the printer will output numbers as the radix they were in the input,\n\tlike `0x1b` for hex numbers.\n\tWhen `False`, the printer always outputs decimal numbers.\n\n\tAgain, this only has an effect on kdl-py objects;\n\tnative Python numbers are printed as normal for Python.\n\n* `exponent: str = \"e\"`\n\n\tWhat character to use for the exponent part of decimal numbers,\n\twhen printed with scientific notation.\n\tShould only be set to \"e\" or \"E\".\n\n\tLike the previous options, this only has an effect on kdl-py objects;\n\tnative Python numbers are printed as normal for Python.\n\n## Full API Reference\n\n* `kdl.parse(str, config: kdl.ParseConfig?) -> kdl.Document`\n* `kdl.Parser(parseConfig: kdl.ParseConfig?, printConfig: kdl.PrintConfig?)`\n\t* `parser.parse(str, config: kdl.ParseConfig?) -> kdl.Document`\n\t* `parser.print(config: kdl.PrintConfig?) -> str`\n* `kdl.Document(nodes: list[kdl.Node]?, printConfig: kdl.PrintConfig?)`\n\t* `doc.print(PrintConfig?) -> str`\n\t* `doc[NodeKey] -> Node` returns the first child node matching the [`NodeKey`](#NodeKey). Raises a `KeyError` if nothing matches the `NodeKey`, similar to a `dict`.\n\t* `doc.get(NodeKey, default: T = None) -> kdl.Node | T` returns the first child node matching the [`NodeKey`](#NodeKey). Returns the default value if nothing matches.\n\t* `doc.getAll(NodeKey) -> Iterable[kdl.Node]` returns all child nodes matching the [`NodeKey`](#NodeKey)\n* `kdl.Node(name: str, tag: str?, args: list[Any]?, props: dict[str, Any]?, nodes: list[kdl.Node]?)`\n\t* `node[NodeKey] -> Node` returns the first child node matching the [`NodeKey`](#NodeKey). Raises a `KeyError` if nothing matches the `NodeKey`, similar to a `dict`.\n\t* `node.get(NodeKey, default: T = None) -> kdl.Node | T` returns the first child node matching the [`NodeKey`](#NodeKey). Returns the default value if nothing matches.\n\t* `node.getAll(NodeKey) -> Iterable[kdl.Node]` returns all child nodes matching the [`NodeKey`](#NodeKey)\n\n* `kdl.Binary(value: int, tag: str?)`\n* `kdl.Octal(value: int, tag: str?)`\n* `kdl.Decimal(mantissa: int|float, exponent: int?, tag: str?)`\n\t* `dec.value`: readonly, `mantissa * (10**exponent)`\n* `kdl.Hex(value: int, tag: str?)`\n* `kdl.Bool(value: bool, tag: str?)`\n* `kdl.Null(tag: str?)`\n\t* `null.value`: readonly, always `None`\n* `kdl.RawString(value: str, tag: str?)`\n* `kdl.String(value: str, tag: str?)`\n* `kdl.ExactValue(chars: str, tag: str?)` †\n* `kdl.Value`, `kdl.Numberish`, `kdl.Stringish` ‡\n* `kdl.ParseConfig(...)` see above for options\n\t* `kdl.parsing.defaults`: default `ParseConfig`\n* `kdl.PrintConfig(...)` see above for options\n\t* `kdl.printing.defaults`: default `PrintConfig`\n* `kdl.ParseError`: thrown for all parsing errors\n\t* `error.msg: str`: hopefully informative\n\t* `error.line: int`: 1-indexed\n\t* `error.col: int`: 1-indexed\n* `ParseFragment`: passed to converter functions\n\t* `pf.fragment`: slice from the source string\n\t* `pf.error(msg: str)` returns a `kdl.ParseError` with error location set properly already\n\n† Not produced by the parser.\nCan be returned by a user's `.to_kdl()` method\nif they want to produce a value *precisely* in a particular syntax,\nin a way that the built-in kdl-py classes don't.\n\n‡ Not produced by the parser.\nThese are abstract base classes to help in type testing:\n`Value` matches all eight value classes,\n`Numberish` matches all four numeric value classes,\nand `Stringish` matches both string value classes.\n\n### `NodeKey`\n\n\tA few data structures and functions take a `NodeKey`\n\tto match against a node.\n\n\tFormally, `NodeKey` is `Union[str, Tuple[Optional[str], Optional[str]]]`;\n\tthat is,\n\teither a string,\n\tor a tuple of optional strings.\n\n\tIf it's a `str`,\n\tthen it matches any node whose **name** is that value,\n\tregardless of the tag.\n\n\tIf it's a tuple,\n\tthen it matches any node whose tag is the first value\n\t(including `None` to match nodes without a tag),\n\tand whose name is the second value\n\t(where `None` matches any node, regardless of name).\n\n\tThat is, the possible variants are:\n\n\t* `\"nodename\"`: matches nodes with that name, regardless of tag.\n\t* `(\"tagname\", None)`: matches nodes with that tag, regardless of name.\n\t* `(\"tagname\", \"nodename\")`: matches nodes with that tag and name.\n\t* `(None, None)`: matches nodes with no tag, regardless of name.\n\t* `(None, \"nodename\")`: matches nodes with **no tag**, and that name.\n\n\n\n\n## `kdlreformat`\n\nThe `kdlreformat` command-line program is installed by default\nwhen you install this module from pypi.\nIt can also be run manually from the `kdlreformat.py` file\nat the root of this repository\n(or from the `kdl.cli.cli()` function)\n\n```\nusage: kdlreformat [-h] [--indent INDENT] [--semicolons] [--radix]\n                   [--no-radix] [--raw-strings] [--no-raw-strings]\n                   [--exponent EXPONENT]\n                   [infile] [outfile]\n\nKDL parser/printer, letting you easily reformat KDL files into a canonical\nrepresentation.\n\npositional arguments:\n  infile\n  outfile\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --indent INDENT      How many spaces for each level of indent. -1 indicates\n                       to indent with tabs.\n  --semicolons         Whether to end nodes with semicolons or not.\n  --radix              Output numeric values in the radix used by the input.\n                       (0x1a outputs as 0x1a)\n  --no-radix           Convert all numeric arguments to decimal. (0x1a outputs\n                       as 26)\n  --raw-strings        Output string values in the string type used by the\n                       input.\n  --no-raw-strings     Convert all string arguments into plain strings.\n  --exponent EXPONENT  What character to use ('e' or 'E') for indicating\n                       exponents on scinot numbers.\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tabatkins/kdlpy/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kdl-py",
    "package_url": "https://pypi.org/project/kdl-py/",
    "platform": "",
    "project_url": "https://pypi.org/project/kdl-py/",
    "project_urls": {
      "Homepage": "https://github.com/tabatkins/kdlpy/"
    },
    "release_url": "https://pypi.org/project/kdl-py/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A parser for the KDL language.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12160150,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de111b473dcfb45526829f9dcf0049741bab4570da698a6aa4c0bd6f908adef4",
          "md5": "5d861085518cae855856b79b35a82e26",
          "sha256": "38ce59e456ec9b0ea36666769fcf5939921719535b6f74b517c46a556ea6dcac"
        },
        "downloads": -1,
        "filename": "kdl_py-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d861085518cae855856b79b35a82e26",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18616,
        "upload_time": "2021-10-08T18:38:28",
        "upload_time_iso_8601": "2021-10-08T18:38:28.845206Z",
        "url": "https://files.pythonhosted.org/packages/de/11/1b473dcfb45526829f9dcf0049741bab4570da698a6aa4c0bd6f908adef4/kdl_py-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef13412c769dcc7a6fc7636d29892adf230446bb1a17869178b014f491af1188",
          "md5": "c43b4762f80df8ff0875f54bc96c0f17",
          "sha256": "04acbd5b98d85bdb0e5151d77bbf75e309c30c197ed50a75ebb8d7b660f71803"
        },
        "downloads": -1,
        "filename": "kdl-py-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c43b4762f80df8ff0875f54bc96c0f17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21601,
        "upload_time": "2021-10-08T18:38:31",
        "upload_time_iso_8601": "2021-10-08T18:38:31.501097Z",
        "url": "https://files.pythonhosted.org/packages/ef/13/412c769dcc7a6fc7636d29892adf230446bb1a17869178b014f491af1188/kdl-py-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "514e8ba332615f23a9a7d3a3141de21800bf92971e1b2f812edd729d0879652b",
          "md5": "8116995230641ec77cdeca32e8f78d84",
          "sha256": "ad85964144303aa00b6ae3c11b8811cd7c1a6bb13393581bf50388d302fef6e4"
        },
        "downloads": -1,
        "filename": "kdl_py-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8116995230641ec77cdeca32e8f78d84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18612,
        "upload_time": "2021-10-08T18:40:17",
        "upload_time_iso_8601": "2021-10-08T18:40:17.468880Z",
        "url": "https://files.pythonhosted.org/packages/51/4e/8ba332615f23a9a7d3a3141de21800bf92971e1b2f812edd729d0879652b/kdl_py-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cbda69cbf4b0fbf42650ed03eb917271eb0804ca7d2246db5e426db8072d8d2",
          "md5": "9bb9d9f94a5a76ac2e86af9099b40c68",
          "sha256": "e7c9aa9574dca8efcf5fd8a07b6351380a1ece27ed742234784b19c7c7b6ae35"
        },
        "downloads": -1,
        "filename": "kdl-py-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9bb9d9f94a5a76ac2e86af9099b40c68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21595,
        "upload_time": "2021-10-08T18:40:19",
        "upload_time_iso_8601": "2021-10-08T18:40:19.968830Z",
        "url": "https://files.pythonhosted.org/packages/8c/bd/a69cbf4b0fbf42650ed03eb917271eb0804ca7d2246db5e426db8072d8d2/kdl-py-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3eae0320a8550ba95e802aa74cc7dc50c0fcecbc92ebca41423485a2e9088d04",
          "md5": "a646aefa5872cfaf27867ca1cf9374be",
          "sha256": "5de4a7351b7260ef498c3b77d24ea76fae3938877580ba1859803f76acca8137"
        },
        "downloads": -1,
        "filename": "kdl_py-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a646aefa5872cfaf27867ca1cf9374be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18896,
        "upload_time": "2021-10-08T19:46:14",
        "upload_time_iso_8601": "2021-10-08T19:46:14.016885Z",
        "url": "https://files.pythonhosted.org/packages/3e/ae/0320a8550ba95e802aa74cc7dc50c0fcecbc92ebca41423485a2e9088d04/kdl_py-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d21d2870247145813394a1586733ee2ebbc6280b7a29e5c8f0bf2ed22b75dedd",
          "md5": "64dc5295285afd2b5103f8cce7a184cc",
          "sha256": "44b89f253923a7ee9536ed61ab63ed9d4da9c1ed987f34ccd39af7477fdc6ef0"
        },
        "downloads": -1,
        "filename": "kdl-py-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "64dc5295285afd2b5103f8cce7a184cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22319,
        "upload_time": "2021-10-08T19:46:17",
        "upload_time_iso_8601": "2021-10-08T19:46:17.088229Z",
        "url": "https://files.pythonhosted.org/packages/d2/1d/2870247145813394a1586733ee2ebbc6280b7a29e5c8f0bf2ed22b75dedd/kdl-py-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa75c9cdbe2499a176a03ad7e9bddfc0d4e7d331c6a80e2fe3ae64a8b4531005",
          "md5": "056cf6286adda3ae77ceda98a0e5a10a",
          "sha256": "e0f40e8378c6bcc97f5db30c018654ac0ad862c09d6b33a6a4c443c02196c630"
        },
        "downloads": -1,
        "filename": "kdl_py-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "056cf6286adda3ae77ceda98a0e5a10a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18893,
        "upload_time": "2021-10-08T20:22:22",
        "upload_time_iso_8601": "2021-10-08T20:22:22.688882Z",
        "url": "https://files.pythonhosted.org/packages/aa/75/c9cdbe2499a176a03ad7e9bddfc0d4e7d331c6a80e2fe3ae64a8b4531005/kdl_py-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ade73fdae6be811c5f7b18424d067caf35467af24c9d81737cb4b1ea6fd1e446",
          "md5": "7e4b07308cb25398f0aebb4266ff0f69",
          "sha256": "5fede391c479ca57ff8a912604c7e3a6ca11a8c812d0a8b30452f5e276e36c93"
        },
        "downloads": -1,
        "filename": "kdl-py-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7e4b07308cb25398f0aebb4266ff0f69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22306,
        "upload_time": "2021-10-08T20:22:25",
        "upload_time_iso_8601": "2021-10-08T20:22:25.457508Z",
        "url": "https://files.pythonhosted.org/packages/ad/e7/3fdae6be811c5f7b18424d067caf35467af24c9d81737cb4b1ea6fd1e446/kdl-py-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbb3abb685895dea8ef76297cef19744dacd672e8646cbe8d6f09910e38ae6be",
          "md5": "a70cfe11b10084ecac54e9b0198cbfb9",
          "sha256": "6c25960ccd01a5e4f445084512b8287d1fad9dc1f091df8a5194fb1cfcd0f935"
        },
        "downloads": -1,
        "filename": "kdl_py-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a70cfe11b10084ecac54e9b0198cbfb9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18917,
        "upload_time": "2021-10-09T13:23:15",
        "upload_time_iso_8601": "2021-10-09T13:23:15.438789Z",
        "url": "https://files.pythonhosted.org/packages/bb/b3/abb685895dea8ef76297cef19744dacd672e8646cbe8d6f09910e38ae6be/kdl_py-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe7748349e201d8251c65ceb845a47664573db1e1f9581d66874ae502e093194",
          "md5": "078812c4206bfb441782c7477e8bc373",
          "sha256": "e5caa173dddd3a96e5196b872b86b7b9417fe2fce6d6596ff06dab267f75f59a"
        },
        "downloads": -1,
        "filename": "kdl-py-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "078812c4206bfb441782c7477e8bc373",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22351,
        "upload_time": "2021-10-09T13:23:17",
        "upload_time_iso_8601": "2021-10-09T13:23:17.124243Z",
        "url": "https://files.pythonhosted.org/packages/fe/77/48349e201d8251c65ceb845a47664573db1e1f9581d66874ae502e093194/kdl-py-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b06be6cb01948f91d1aa3e5e69e5a7ead5b8791336f857ba3e3cae42c3cfe83",
          "md5": "5c468c18bbe399770227a5e2c2889780",
          "sha256": "01b84b9ced1f0bd56dc76dc458acd419a6b54561dcd5e8a4f0766b724df65082"
        },
        "downloads": -1,
        "filename": "kdl_py-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c468c18bbe399770227a5e2c2889780",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18924,
        "upload_time": "2021-10-29T23:06:36",
        "upload_time_iso_8601": "2021-10-29T23:06:36.354941Z",
        "url": "https://files.pythonhosted.org/packages/8b/06/be6cb01948f91d1aa3e5e69e5a7ead5b8791336f857ba3e3cae42c3cfe83/kdl_py-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b422a42670e14fbc6f31c6e2d1447d2ef20b9651fc3ef946531ec1f8019ba7f1",
          "md5": "30efbad0aa58fefc53bff37657df7148",
          "sha256": "51c041bba3d2d1a45ef2f952fec972cb813593426517d1d4bde79cd62b9e1e85"
        },
        "downloads": -1,
        "filename": "kdl-py-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "30efbad0aa58fefc53bff37657df7148",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22355,
        "upload_time": "2021-10-29T23:06:37",
        "upload_time_iso_8601": "2021-10-29T23:06:37.443778Z",
        "url": "https://files.pythonhosted.org/packages/b4/22/a42670e14fbc6f31c6e2d1447d2ef20b9651fc3ef946531ec1f8019ba7f1/kdl-py-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca5c9dc5a345742de1ff05817166ccc4eb69ddf759040ac21346083b2063e577",
          "md5": "da45b374e4ee4ecdaf5b77ffee2e5427",
          "sha256": "ab4a97a107dddc76dedc74ad402e58b56366280913de4c7da9d79e29308677fa"
        },
        "downloads": -1,
        "filename": "kdl_py-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da45b374e4ee4ecdaf5b77ffee2e5427",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19733,
        "upload_time": "2021-11-29T23:51:57",
        "upload_time_iso_8601": "2021-11-29T23:51:57.584985Z",
        "url": "https://files.pythonhosted.org/packages/ca/5c/9dc5a345742de1ff05817166ccc4eb69ddf759040ac21346083b2063e577/kdl_py-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7401a112476a42a13048fb1cd5a1c63947c0fd85c0b46dac7368fce992dec96",
          "md5": "3b4440c18713f3054c06a8d4589d163b",
          "sha256": "9faf3ba7c4c5fde8cbc2ce337008377adfe6d71f029c26b5eff7175d8d570f82"
        },
        "downloads": -1,
        "filename": "kdl-py-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b4440c18713f3054c06a8d4589d163b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23674,
        "upload_time": "2021-11-29T23:51:58",
        "upload_time_iso_8601": "2021-11-29T23:51:58.856150Z",
        "url": "https://files.pythonhosted.org/packages/a7/40/1a112476a42a13048fb1cd5a1c63947c0fd85c0b46dac7368fce992dec96/kdl-py-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca5c9dc5a345742de1ff05817166ccc4eb69ddf759040ac21346083b2063e577",
        "md5": "da45b374e4ee4ecdaf5b77ffee2e5427",
        "sha256": "ab4a97a107dddc76dedc74ad402e58b56366280913de4c7da9d79e29308677fa"
      },
      "downloads": -1,
      "filename": "kdl_py-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "da45b374e4ee4ecdaf5b77ffee2e5427",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 19733,
      "upload_time": "2021-11-29T23:51:57",
      "upload_time_iso_8601": "2021-11-29T23:51:57.584985Z",
      "url": "https://files.pythonhosted.org/packages/ca/5c/9dc5a345742de1ff05817166ccc4eb69ddf759040ac21346083b2063e577/kdl_py-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7401a112476a42a13048fb1cd5a1c63947c0fd85c0b46dac7368fce992dec96",
        "md5": "3b4440c18713f3054c06a8d4589d163b",
        "sha256": "9faf3ba7c4c5fde8cbc2ce337008377adfe6d71f029c26b5eff7175d8d570f82"
      },
      "downloads": -1,
      "filename": "kdl-py-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3b4440c18713f3054c06a8d4589d163b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 23674,
      "upload_time": "2021-11-29T23:51:58",
      "upload_time_iso_8601": "2021-11-29T23:51:58.856150Z",
      "url": "https://files.pythonhosted.org/packages/a7/40/1a112476a42a13048fb1cd5a1c63947c0fd85c0b46dac7368fce992dec96/kdl-py-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}