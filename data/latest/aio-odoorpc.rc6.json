{
  "info": {
    "author": "mbello",
    "author_email": "mbello@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# aio-odoorpc: an async Odoo RPC client\n\nThis package builds upon the lower-level [aio-odoorpc-base](https://github.com/mbello/aio-odoorpc-base) \nadding a AsyncOdooRPC/OdooRPC class as a thin layer that makes for a friendlier interface.\n\nAsyncOdooRPC is asynchronous code, OdooRPC is synchronous.\n\nThis package does not intend to implement all the functionality of other odoo rpc modules\nlike ERPpeek and odoorpc. This is meant to be simpler but equally easy to work with without\ntrying to be too smart. One of the motivations of this package was to have an alternative to odoorpc\nwhich started getting in my way. For instance, just instantiating a new object in odoorpc may result\nin a roundtrip to the remote Odoo server. These unnecessary RPC calls quickly add up and it becomes\ntoo difficult to develop fast software. Also, odoorpc offers no asynchronous interface which\nis a huge lost opportunity for code that spends a lot of time waiting on blocking network calls.\n\n## Why use this instead of aio-odoorpc-base\n\nWith this interface you can instantiate an object once and then make simpler invocations to remote\nmethods like `login, read, search, search_read and search_count`. With aio-odoorpc-base, you get only\nthe lower level `execute_kw` call and must pass a long list of parameters on every invocation.\n\nAlso, aio-odoorpc let's you simulate behavior of odoorpc by instantiating the AsyncOdooRPC class with\na `default_model_name` so then all method calls do not need to pass a `model_name`. In this way, you can\neasily replace the usage of odoorpc with this object (I know because I migrated a lot of code away \nfrom odoorpc). Of course, if you are migrating from odoorpc you should take the opportunity to\nmigrate to async code as well.\n\n## Limitations\n\nRight now there are built-in helper functions only for getting info out (read, search, search_read,\nsearch_count), nothing to help creating new records or updating field values. Those are coming soon.\n\n## Things to know about this module:\n- Asyncio is a python3 thing, so no python2 support;\n\n- Type hints are used everywhere;\n\n- This package uses jsonrpc only (no xmlrpc);\n\n- You need to manage the http client yourself. Code is tested with requests (sync),\n  httpx (sync and async) and aiohttp (async). See 'Usage' for examples;\n\n- I am willing to take patches and to add other contributors to this project. Feel free to get in touch,\n  the github page is the best place to interact with the project and the project's author;\n  \n- The synchronous version of the code is generated automatically from the asynchronous code, so at\n  least for now the effort to maintain both is minimal. Both versions are unit tested.\n\n## Things to know about Odoo's API:\n- The `login()` call is really only a lookup of the uid (an int) of the user given a\n  database, username and password. If you are using this RPC client over and over in your code,\n  maybe even calling from a stateless cloud service, you should consider finding out the user id (uid)\n  of the user and pass the uid instead of the username to the constructor of AsyncOdooRPC. This way, \n  you do not need to call the `login()` method after instantiating the class, saving a RPC call;\n\n- The uid mentioned above is not a session-like id. It is really only the database id of the user\n  and it never expires. There is really no 'login' step required to access the Odoo RPC API if you\n  know the uid from the beginning;\n\n- You will need the url of your Odoo's jsonrpc endpoint. Usually, you will just need to add 'jsonrpc' to\n  your odoo url. Example: Odoo web GUI on 'https://acme.odoo.com', JSONRPC will be on 'https://acme.odoo.com/jsonrpc'. \n  However, you may alternatively use one of the three helper methods offered by aio-odoorpc-base.helpers \n  to build the correct url:\n\n```python\ndef build_odoo_base_url(*, host: str, port: Optional[int] = None, ssl: bool = True, base_url: str = '') -> str:\n    ...\n\ndef build_odoo_jsonrpc_endpoint_url(*, host: str, port: Optional[int] = None, ssl: bool = True,\n                                    base_url: str = '', custom_odoo_jsonrpc_suffix: Optional[str] = None) -> str:\n    ...\n\ndef odoo_base_url2jsonrpc_endpoint(odoo_base_url: str = '', custom_odoo_jsonrpc_suffix: Optional[str] = None) -> str:\n    ...\n```\n   To import them use\n```\nfrom aio_odoorpc_base.helpers import build_odoo_base_url, build_odoo_jsonrpc_endpoint_url, odoo_base_url2jsonrpc_endpoint\n```\n   Examples:\n```python\nbuild_odoo_base_url(host='acme.odoo.com', base_url='testing')\n>>>> https://acme.odoo.com/testing\nbuild_odoo_jsonrpc_endpoint_url(host='acme.odoo.com', base_url='testing')\n>>>> https://acme.odoo.com/testing/jsonrpc\nodoo_base_url2jsonrpc_endpoint('https://acme.odoo.com/testing')\n>>>> https://acme.odoo.com/testing/jsonrpc\n```\n\n# Usage\n\n#### Note: check the tests folder for more examples\n\nI will omit the event_loop logic I assume that if you want an async module you already have\nthat sorted out yourself or through a framework like FastAPI.\nAll examples below could also be called using the synchronous OdooRPC object, but without the\n'await' syntax.\n\n```python\nfrom aio_odoorpc import AsyncOdooRPC\nimport httpx\n\n# If the http_client you are using does not support a 'base_url' parameter like\n# httpx does, you will need to pass the 'url_jsonrpc_endpoint' parameter when\n# instantiating the AsyncOdooRPC object.\nasync with httpx.AsyncClient(base_url='https://acme.odoo.com/jsonrpc') as session:\n    odoo = AsyncOdooRPC(database='acme_db', username_or_uid='demo',\n                        password='demo', http_client=session)\n    await odoo.login()\n\n    try:\n        # A default model name has not been set a instantiation time so we should\n        # pass the model_name on every invocation. Here it should throw an exception.\n        await odoo.read()\n    except RuntimeError:\n        pass\n    else:\n        assert False, 'Expected an exception to be raised'\n    \n    # Now with model_name set it should work. Not passing a list of ids\n    # turns the read call into a search_read call with an empty domain (so it matches all)\n    # A missing 'fields' parameter means 'fetch all fields'.\n    # Hence this call is very expensive, it fetches all fields for all\n    # 'sale.order' records\n    all_orders_all_fields = await odoo.read(model_name='sale.order')\n    \n    # creates a copy of odoo obj setting default_model_name to 'sale.order'\n    sale_order = odoo.new_for_model('sale.order')\n    \n    # now we do not need to pass model_name and it works!\n    all_orders_all_fields2 = await sale_order.read()\n\n    large_orders = sale_order.search_read(domain=[['amount_total', '>', 10000]],\n                                          fields=['partner_id', 'amount_total', 'date_order'])\n```\n\n# Object instantiation\n\n**The AsyncOdooRPC/OdooRPC object takes these parameters:**\n- **database**: string, required. The name of the odoo database\n- **username_or_id**: string or int, required. If you pass username (a string), an invocation of the\n  method 'login()' will be required to fetch the uid (an int). The uid is what is really needed, \n  if you know both username and uid pass the uid and avoid a login() call which costs a roundtrip\n  to the Odoo server;\n- **password**: string, required. The user's password. Unfortunately, Odoo's jsonrpc API requires the\n  password to be sent on every call. There is no session or token mechanism available as an alternative\n  authentication method.\n- **http_client**: an http client, optional. If an http client is not set, you will need to pass the\n  http_client parameter on every method invocation (when available). Some http clients (e.g. httpx) \n  let you create a session setting the appropriate url as in\n  `async with httpx.AsyncClient(base_url='https://acme.odoo.com/jsonrpc as session`\n  if you do that on a supporting client, you do not need to pass url, it is already set on the\n  http_client. Otherwise, you will need to pass `url_jsonrpc_endpoint` to the constructor.\n- **url_jsonrpc_endpoint**: string, optional. The url for your Odoo's server jsonrpc endpoint. You should\n  always pass it unless your http_client already knows to which url it should point to.\n  You may use aio-odoorpc-base helper methods `build_odoo_base_url, build_odoo_jsonrpc_endpoint_url,\n  odoo_base_url2jsonrpc_endpoint` that were described earlier in this README to build this url.\n  In short, the jsonrpc endpoint is your odoo instance's base url with a 'jsonrpc' suffix:\n  https://acme.odoo.com/jsonrpc\n- **default_model_name**: str, optional. This parameter sets the default model_name for all method\n  invocations that take an optional method_name parameter. If you set 'model_name' on a method\n  invocation it will override this default and follow your order. When you have an instance of\n  AsyncOdooRPC/OdooRPC you can create a copy with a different default method_name calling the\n  method new_for_model('sale.order.line'). You can use this style to mimic odoorpc's way where\n  you can call search, read, search_read on a specific model. \n```python\nodoo = AsyncOdooRPC(...)\nsale_order = odoo.new_for_model('sale.order')\nsale_order_line = odoo.new_for_model('sale.order.line')\npartner = sale_order.new_for_model('partner')\n```\n  Just remember that new_for_method is nothing special, it only sets a default model name on a\n  copy of an instance. Making copies of copies is perfectly ok. \n\n# Dependencies\n\nThis package depends on [aio-odoorpc-base](https://github.com/mbello/aio-odoorpc-base) which has no dependency itself.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mbello/aio-odoorpc",
    "keywords": "odoorpc,asyncio,jsonrpc,odoo,ERPpeek",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aio-odoorpc",
    "package_url": "https://pypi.org/project/aio-odoorpc/",
    "platform": "",
    "project_url": "https://pypi.org/project/aio-odoorpc/",
    "project_urls": {
      "Homepage": "https://github.com/mbello/aio-odoorpc",
      "Repository": "https://github.com/mbello/aio-odoorpc"
    },
    "release_url": "https://pypi.org/project/aio-odoorpc/2.0.0/",
    "requires_dist": [
      "aio-odoorpc-base (>=3.0.4)"
    ],
    "requires_python": ">=3.6",
    "summary": "Fast, simple Odoo RPC client with both synchronous and an asynchronous API",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9946978,
  "releases": {
    "1.3.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ff9d907af6217c70c2575c83da233166cacae4b24b7da8c98f655869b578268",
          "md5": "88d4c6082282c98dd122e92a6fb1a36c",
          "sha256": "aaba38785c17e8dc4d1c428b43d3ee6fa48486b8efde94cb3c7caedda174215a"
        },
        "downloads": -1,
        "filename": "aio_odoorpc-1.3.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88d4c6082282c98dd122e92a6fb1a36c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 9235,
        "upload_time": "2020-01-28T23:43:47",
        "upload_time_iso_8601": "2020-01-28T23:43:47.386115Z",
        "url": "https://files.pythonhosted.org/packages/1f/f9/d907af6217c70c2575c83da233166cacae4b24b7da8c98f655869b578268/aio_odoorpc-1.3.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "490b8e26b59b17582fe832d2a63e60dc11edf74e3244040fb42589b16abd63b9",
          "md5": "6e604e1bdacd2b2c6c340ff828eb81bf",
          "sha256": "54e67f7bcc395c34004fecb5a63ac6bd617bc3926caafd361d1996844050177b"
        },
        "downloads": -1,
        "filename": "aio-odoorpc-1.3.12.tar.gz",
        "has_sig": false,
        "md5_digest": "6e604e1bdacd2b2c6c340ff828eb81bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 11404,
        "upload_time": "2020-01-28T23:43:45",
        "upload_time_iso_8601": "2020-01-28T23:43:45.401239Z",
        "url": "https://files.pythonhosted.org/packages/49/0b/8e26b59b17582fe832d2a63e60dc11edf74e3244040fb42589b16abd63b9/aio-odoorpc-1.3.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a007739becb0760ff9266c95906dc4b6a51a29fccc6af18ff6d5b4cc647e3bab",
          "md5": "6b47ec44cc6a0742e0f6ac1dd24666b1",
          "sha256": "06bfcff63a50277e6efd4868348427ef1fd3f11cac193411e43099d414bc212a"
        },
        "downloads": -1,
        "filename": "aio_odoorpc-1.3.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b47ec44cc6a0742e0f6ac1dd24666b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 9240,
        "upload_time": "2020-02-18T18:21:50",
        "upload_time_iso_8601": "2020-02-18T18:21:50.129760Z",
        "url": "https://files.pythonhosted.org/packages/a0/07/739becb0760ff9266c95906dc4b6a51a29fccc6af18ff6d5b4cc647e3bab/aio_odoorpc-1.3.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe6f7df2692a7136d89ed595c7920023a39c2bcea20443ac84c12e577a1fe087",
          "md5": "c29b8528534aefc57c81efb9957fa7cf",
          "sha256": "d5672b639d0ab3c1e50d1cd28fe034b1994743d1b574e84bbd71389135393615"
        },
        "downloads": -1,
        "filename": "aio-odoorpc-1.3.13.tar.gz",
        "has_sig": false,
        "md5_digest": "c29b8528534aefc57c81efb9957fa7cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 11393,
        "upload_time": "2020-02-18T18:21:48",
        "upload_time_iso_8601": "2020-02-18T18:21:48.082344Z",
        "url": "https://files.pythonhosted.org/packages/fe/6f/7df2692a7136d89ed595c7920023a39c2bcea20443ac84c12e577a1fe087/aio-odoorpc-1.3.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64174bd635a1a3f4bb1e2a07dc8fc4dc7f9f05027430cdfe4fe1072ab96149da",
          "md5": "21211b736afd6b7cd1861dba00643b0e",
          "sha256": "b1baab790ad4af202a81e4ebea387c4c81202a519794ab4efc94c5832b08b576"
        },
        "downloads": -1,
        "filename": "aio_odoorpc-1.3.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21211b736afd6b7cd1861dba00643b0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 9239,
        "upload_time": "2020-03-05T16:17:04",
        "upload_time_iso_8601": "2020-03-05T16:17:04.922334Z",
        "url": "https://files.pythonhosted.org/packages/64/17/4bd635a1a3f4bb1e2a07dc8fc4dc7f9f05027430cdfe4fe1072ab96149da/aio_odoorpc-1.3.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe62bad31af7a9336493e4d2130c225218a124e71ff89f3c28d993bbeda2e8c9",
          "md5": "a89c5e175682a1d9d75560ba83ba28e7",
          "sha256": "5f93698891b748ece9942dda3524ec79c967e888f884bdbdccfc78eb4491df82"
        },
        "downloads": -1,
        "filename": "aio-odoorpc-1.3.14.tar.gz",
        "has_sig": false,
        "md5_digest": "a89c5e175682a1d9d75560ba83ba28e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 11405,
        "upload_time": "2020-03-05T16:17:03",
        "upload_time_iso_8601": "2020-03-05T16:17:03.110081Z",
        "url": "https://files.pythonhosted.org/packages/fe/62/bad31af7a9336493e4d2130c225218a124e71ff89f3c28d993bbeda2e8c9/aio-odoorpc-1.3.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29706d55415b2d46356cf6e0564cb2caa39da622dd5d1b97d06c6f1a010219e5",
          "md5": "3698c18a781351726ddccd5e3986235f",
          "sha256": "cde2e3cea3b0ce3b4801801ac9b2ce45c878e51e53bda3049fe95f2bef3fd517"
        },
        "downloads": -1,
        "filename": "aio_odoorpc-1.3.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3698c18a781351726ddccd5e3986235f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 9241,
        "upload_time": "2020-03-05T16:25:57",
        "upload_time_iso_8601": "2020-03-05T16:25:57.819485Z",
        "url": "https://files.pythonhosted.org/packages/29/70/6d55415b2d46356cf6e0564cb2caa39da622dd5d1b97d06c6f1a010219e5/aio_odoorpc-1.3.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea38a10bae50f49b4759db83f31a8d2664eb3c9ae0dbf1f4d533c72f6a6a4c92",
          "md5": "90de2b024c89267fcdac079509fb991e",
          "sha256": "47bc2ae4e3214964a3f0336e90c054badcb868384726b8d5feefb81c574edb43"
        },
        "downloads": -1,
        "filename": "aio-odoorpc-1.3.15.tar.gz",
        "has_sig": false,
        "md5_digest": "90de2b024c89267fcdac079509fb991e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 11398,
        "upload_time": "2020-03-05T16:25:56",
        "upload_time_iso_8601": "2020-03-05T16:25:56.125506Z",
        "url": "https://files.pythonhosted.org/packages/ea/38/a10bae50f49b4759db83f31a8d2664eb3c9ae0dbf1f4d533c72f6a6a4c92/aio-odoorpc-1.3.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef428196ede797cf2fa805df882d83342e6015716b86c5aebc101a3f5a6a9e63",
          "md5": "e4bd601bc70f0e6da811790ea7ee159b",
          "sha256": "471b66ac16e43456f30b32a28dcdbe137cb666ad8e112e0fb7b9357304bbbded"
        },
        "downloads": -1,
        "filename": "aio_odoorpc-1.3.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4bd601bc70f0e6da811790ea7ee159b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 12001,
        "upload_time": "2020-03-09T17:55:31",
        "upload_time_iso_8601": "2020-03-09T17:55:31.282785Z",
        "url": "https://files.pythonhosted.org/packages/ef/42/8196ede797cf2fa805df882d83342e6015716b86c5aebc101a3f5a6a9e63/aio_odoorpc-1.3.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d88e299cdffef74bbafeaa775ddee70d1db2755b3ea416093396349f0805955b",
          "md5": "46da77950511889df10e61315c37c8a1",
          "sha256": "b0e07193524cdfcbafa63800f8d7a51b88da3557030d68c5466afac5bc8678b7"
        },
        "downloads": -1,
        "filename": "aio-odoorpc-1.3.16.tar.gz",
        "has_sig": false,
        "md5_digest": "46da77950511889df10e61315c37c8a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 14129,
        "upload_time": "2020-03-09T17:55:29",
        "upload_time_iso_8601": "2020-03-09T17:55:29.858781Z",
        "url": "https://files.pythonhosted.org/packages/d8/8e/299cdffef74bbafeaa775ddee70d1db2755b3ea416093396349f0805955b/aio-odoorpc-1.3.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "686365561581d90a5505c51e27d77cc75cc9d3f78362e73607598dac14722206",
          "md5": "71d21bfe04fb9e8960e627077b7c4a51",
          "sha256": "db9cb912a24119ecefdba1fadfa97924d6c704d46250cdff80b4f69d9947a33c"
        },
        "downloads": -1,
        "filename": "aio_odoorpc-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71d21bfe04fb9e8960e627077b7c4a51",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10915,
        "upload_time": "2021-04-01T13:44:44",
        "upload_time_iso_8601": "2021-04-01T13:44:44.039499Z",
        "url": "https://files.pythonhosted.org/packages/68/63/65561581d90a5505c51e27d77cc75cc9d3f78362e73607598dac14722206/aio_odoorpc-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a791551bf6cf336f0ed1cc4d686e43c2b30f38becc5036b4ce7db6ec7080a1f",
          "md5": "a5f0e95ec050049fb7c33476eac4b67a",
          "sha256": "ff0e052852fb59244582810ebe1d79e72cddffe28076e1a3e1844e2e646a01d8"
        },
        "downloads": -1,
        "filename": "aio-odoorpc-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5f0e95ec050049fb7c33476eac4b67a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12715,
        "upload_time": "2021-04-01T13:44:40",
        "upload_time_iso_8601": "2021-04-01T13:44:40.739301Z",
        "url": "https://files.pythonhosted.org/packages/4a/79/1551bf6cf336f0ed1cc4d686e43c2b30f38becc5036b4ce7db6ec7080a1f/aio-odoorpc-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "686365561581d90a5505c51e27d77cc75cc9d3f78362e73607598dac14722206",
        "md5": "71d21bfe04fb9e8960e627077b7c4a51",
        "sha256": "db9cb912a24119ecefdba1fadfa97924d6c704d46250cdff80b4f69d9947a33c"
      },
      "downloads": -1,
      "filename": "aio_odoorpc-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "71d21bfe04fb9e8960e627077b7c4a51",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10915,
      "upload_time": "2021-04-01T13:44:44",
      "upload_time_iso_8601": "2021-04-01T13:44:44.039499Z",
      "url": "https://files.pythonhosted.org/packages/68/63/65561581d90a5505c51e27d77cc75cc9d3f78362e73607598dac14722206/aio_odoorpc-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a791551bf6cf336f0ed1cc4d686e43c2b30f38becc5036b4ce7db6ec7080a1f",
        "md5": "a5f0e95ec050049fb7c33476eac4b67a",
        "sha256": "ff0e052852fb59244582810ebe1d79e72cddffe28076e1a3e1844e2e646a01d8"
      },
      "downloads": -1,
      "filename": "aio-odoorpc-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a5f0e95ec050049fb7c33476eac4b67a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12715,
      "upload_time": "2021-04-01T13:44:40",
      "upload_time_iso_8601": "2021-04-01T13:44:40.739301Z",
      "url": "https://files.pythonhosted.org/packages/4a/79/1551bf6cf336f0ed1cc4d686e43c2b30f38becc5036b4ce7db6ec7080a1f/aio-odoorpc-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}