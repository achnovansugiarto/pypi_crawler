{
  "info": {
    "author": "OpenWISP",
    "author_email": "support@openwisp.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: System :: Networking"
    ],
    "description": "=============\nopenwisp-ipam\n=============\n\n.. image:: https://github.com/openwisp/openwisp-ipam/actions/workflows/ci.yml/badge.svg?branch=master\n  :target: https://github.com/openwisp/openwisp-ipam/actions/workflows/ci.yml?query=workflow%3AOpenWISP+Ipam+CI+Build%22\n  :alt: CI Build status\n\n.. image:: https://coveralls.io/repos/openwisp/openwisp-ipam/badge.svg\n  :target: https://coveralls.io/r/openwisp/openwisp-ipam\n  :alt: Coverage\n\n.. image:: https://img.shields.io/pypi/v/openwisp-ipam\n  :target: https://pypi.org/project/openwisp-ipam\n  :alt: PyPI\n\n.. image:: https://img.shields.io/librariesio/release/github/openwisp/openwisp-ipam\n  :target: https://libraries.io/github/openwisp/openwisp-ipam#dependencies\n  :alt: Dependency monitoring\n\n.. image:: https://github.com/openwisp/openwisp-ipam/raw/master/docs/subnet_demo.gif\n  :alt: Feature Highlights\n\n.. contents:: **Table of Contents**:\n   :backlinks: none\n   :depth: 2\n\nAvailable Features\n******************\n\n* IPv4 and IPv6 IP address management\n* IPv4 and IPv6 Subnet management\n* Automatic free space display for all subnets\n* Visual display for a specific subnet\n* IP request module\n* REST API for CRUD operations and main features\n* Possibility to search for an IP or subnet\n* CSV Import and Export of subnets and their IPs\n\nProject Goals\n*************\n\n* provide basic features of IP Address management as a reusable django app\n* integrate this module in the rest of the OpenWISP ecosystem\n* allow standalone usage (without the rest of OpenWISP)\n* provide ways to extended the core features in order to create derivatives\n\nDependencies\n************\n\n* Python 3.7 or higher\n* Django 3.0 or higher\n* Django REST Framework (for the REST API)\n* openwisp-users\n* swapper\n\nInstall stable version\n**********************\n\n.. code-block:: shell\n\n    pip install openwisp-ipam\n\nInstall development version\n***************************\n\nInstall tarball:\n\n.. code-block:: shell\n\n    pip install https://github.com/openwisp/openwisp-ipam/tarball/master\n\nAlternatively you can install via pip using git:\n\n.. code-block:: shell\n\n    pip install -e git+git://github.com/openwisp/openwisp-ipam#egg=openwisp-ipam\n\nInstallation for development\n****************************\n\nInstall ``openwisp-ipam`` for development using following commands:\n\n.. code-block:: shell\n\n    git clone https://github.com/openwisp/openwisp-ipam.git\n    cd openwisp-ipam\n    pip install -e .\n    pip install -r requirements-test.txt\n\nLaunch the development sever:\n\n.. code-block:: shell\n\n    cd tests/\n    ./manage.py migrate\n    ./manage.py createsuperuser\n    ./manage.py runserver\n\nYou can access the admin interface at `http://127.0.0.1:8000/admin/`.\n\nRun Tests\n=========\n\nInstall test requirements:\n\n.. code-block:: shell\n\n    pip install -r requirements-test.txt\n\nThen run the test suite:\n\n.. code-block:: shell\n\n    # options \"--keepdb\" & \"--parallel\" are optional but\n    # improve time required for running tests.\n    ./runtests.py --keepdb --parallel\n    # Run tests for the sample_app\n    SAMPLE_APP=1 ./runtests.py --keepdb --parallel\n\nVisual Display of subnets\n*************************\n\nopenwisp-ipam provides a graphical representation of a subnet which shows the available free space under any subnet.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-ipam/master/docs/visual-display.png\n\nREST API\n********\n\nLive documentation\n==================\n\n.. image:: https://github.com/openwisp/openwisp-ipam/raw/master/docs/api-docs.png\n\nA general live API documentation (following the OpenAPI specification) is available at ``/api/v1/docs/``.\n\nBrowsable web interface\n=======================\n\n.. image:: https://github.com/openwisp/openwisp-ipam/raw/master/docs/api-ui.png\n\nAdditionally, opening any of the endpoints `listed below <#list-of-endpoints>`_\ndirectly in the browser will show the `browsable API interface of Django-REST-Framework\n<https://www.django-rest-framework.org/topics/browsable-api/>`_,\nwhich makes it even easier to find out the details of each endpoint.\n\nAuthentication\n==============\n\nSee openwisp-users: `authenticating with the user token\n<https://github.com/openwisp/openwisp-users#authenticating-with-the-user-token>`_.\n\nWhen browsing the API via the `Live documentation <#live-documentation>`_\nor the `Browsable web page <#browsable-web-interface>`_, you can also use\nthe session authentication by logging in the django admin.\n\nPagination\n==========\n\nAll *list* endpoints support the ``page_size`` parameter that allows paginating\nthe results in conjunction with the ``page`` parameter.\n\n.. code-block:: text\n\n    GET /api/v1/<api endpoint url>/?page_size=10\n    GET /api/v1/<api endpoint url>/?page_size=10&page=2\n\nList of endpoints\n=================\n\nSince the detailed explanation is contained in the `Live documentation <#live-documentation>`_\nand in the `Browsable web page <#browsable-web-interface>`_ of each endpoint,\nhere we'll provide just a list of the available endpoints,\nfor further information please open the URL of the endpoint in your browser.\n\nAPI Throttling\n==============\n\nTo override the default API throttling settings, add the following to your ``settings.py`` file:\n\n.. code-block:: python\n\n    REST_FRAMEWORK = {\n        'DEFAULT_THROTTLE_RATES': {\n            'ipam': '100/hour',\n        }\n    }\n\nThe rate descriptions used in ``DEFAULT_THROTTLE_RATES`` may include\n``second``, ``minute``, ``hour`` or ``day`` as the throttle period.\n\nGet Next Available IP\n=====================\n\nA model method to fetch the next available IP address under a specific subnet. This method can also be accessed via a REST API: `openwisp_ipam/base/models.py <https://github.com/openwisp/openwisp-ipam/tree/master/tests/openwisp2/openwisp_ipam/base/models.py#L80>`_\n\nGET\n---\n\nReturns the next available IP address under a subnet.\n\n.. code-block:: text\n\n    /api/v1/ipam/subnet/<subnet_id>/get-next-available-ip/\n\nRequest IP\n^^^^^^^^^^\n\nA model method to create and fetch the next available IP address record under a subnet.\n\nPOST\n----\n\nCreates a record for next available IP address and returns JSON data of that record.\n\n.. code-block:: text\n\n    POST /api/v1/ipam/subnet/<subnet_id>/request-ip/\n\n===========    ========================================\nParam          Description\n===========    ========================================\ndescription    Optional description for the IP address\n===========    ========================================\n\nResponse\n^^^^^^^^\n\n.. code-block:: json\n\n\n    {\n        \"ip_address\": \"ip_address\",\n        \"subnet\": \"subnet_uuid\",\n        \"description\": \"optional description\"\n    }\n\n\nIpAddress-Subnet List and Create View\n=====================================\n\nAn api endpoint to retrieve or create IP addresses under a specific subnet.\n\nGET\n---\n\nReturns the list of IP addresses under a particular subnet.\n\n.. code-block:: text\n\n    /api/v1/ipam/subnet/<subnet_id>/ip-address/\n\nPOST\n----\n\nCreate a new ``IP Address``.\n\n.. code-block:: text\n\n    /api/v1/ipam/subnet/<subnet_id>/ip-address/\n\n===========    ========================================\nParam          Description\n===========    ========================================\nip_address     IPv6/IPv4 address value\nsubnet         Subnet UUID\ndescription    Optional description for the IP address\n===========    ========================================\n\nSubnet List/Create View\n=======================\n\nAn api endpoint to create or retrieve the list of subnet instances.\n\nGET\n---\n\nReturns the list of ``Subnet`` instances.\n\n.. code-block:: text\n\n    /api/v1/ipam/subnet/\n\nPOST\n----\n\nCreate a new ``Subnet``.\n\n.. code-block:: text\n\n    /api/v1/ipam/subnet/\n\n=============    ========================================\nParam            Description\n=============    ========================================\nsubnet           Subnet value in CIDR format\nmaster_subnet    Master Subnet UUID\ndescription      Optional description for the IP address\n=============    ========================================\n\nSubnet View\n===========\n\nAn api endpoint for retrieving, updating or deleting a subnet instance.\n\nGET\n---\n\nGet details of a ``Subnet`` instance\n\n.. code-block:: text\n\n    /api/v1/ipam/subnet/<subnet-id>/\n\nDELETE\n------\n\nDelete a ``Subnet`` instance\n\n.. code-block:: text\n\n    /api/v1/ipam/subnet/<subnet-id>/\n\nPUT\n---\n\nUpdate details of a ``Subnet`` instance.\n\n.. code-block:: text\n\n    /api/v1/ipam/subnet/<subnet-id>/\n\n=============    ========================================\nParam            Description\n=============    ========================================\nsubnet           Subnet value in CIDR format\nmaster_subnet    Master Subnet UUID\ndescription      Optional description for the IP address\n=============    ========================================\n\nIP Address View\n===============\n\nAn api endpoint for retrieving, updating or deleting a IP address instance.\n\nGET\n---\n\nGet details of an ``IP address`` instance.\n\n.. code-block:: text\n\n    /api/v1/ipam/ip-address/<ip_address-id>/\n\nDELETE\n------\n\nDelete an ``IP address`` instance.\n\n.. code-block:: text\n\n    /api/v1/ipam/ip-address/<ip_address-id>/\n\nPUT\n---\n\nUpdate details of an ``IP address`` instance.\n\n.. code-block:: text\n\n    /api/v1/ipam/ip-address/<ip_address-id>/\n\n===========    ========================================\nParam          Description\n===========    ========================================\nip_address     IPv6/IPv4 value\nsubnet         Subnet UUID\ndescription    Optional description for the IP address\n===========    ========================================\n\nExport Subnet View\n==================\n\nView to export subnet data.\n\nPOST\n----\n\n.. code-block:: text\n\n    /api/v1/ipam/subnet/<subnet-id>/export/\n\nImport Subnet View\n==================\n\nView to import subnet data.\n\nPOST\n----\n\n.. code-block:: text\n\n    /api/v1/ipam/import-subnet/\n\n\nExporting and Importing Subnet\n==============================\n\nOne can easily import and export `Subnet` data and it's Ip Addresses using `openwisp-ipam`.\nThis works for both IPv4 and IPv6 types of networks.\n\nExporting\n---------\n\nData can be exported via the admin interface or by using a management command. The exported data is in `.csv` file format.\n\nFrom management command\n^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: shell\n\n    ./manage.py export_subnet <subnet value>\n\nThis would export the subnet if it exists on the database.\n\nFrom admin interface\n^^^^^^^^^^^^^^^^^^^^\n\nData can be exported from the admin interface by just clicking on the export button on the subnet's admin change view.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-ipam/master/docs/export.png\n\nImporting\n---------\n\nData can be imported via the admin interface or by using a management command.\nThe imported data file can be in `.csv` and `.xlsx` format. While importing\ndata for ip addresses, the system checks if the subnet specified in the import file exists or not.\nIf the subnet does not exists it will be created while importing data.\n\nFrom management command\n^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: shell\n\n    ./manage.py import_subnet --file=<file path>\n\nFrom admin interface\n^^^^^^^^^^^^^^^^^^^^\n\nData can be imported from the admin interface by just clicking on the import button on the subnet view.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-ipam/master/docs/import.png\n\nCSV file format\n===============\n\nFollow the following structure while creating `csv` file to import data.\n\n.. code-block:: text\n\n    Subnet Name\n    Subnet Value\n    Organization Slug\n\n    ip_address,description\n    <ip-address>,<optional-description>\n    <ip-address>,<optional-description>\n    <ip-address>,<optional-description>\n\nSetup (integrate in an existing Django project)\n***********************************************\n\nThe ``settings.py`` of your project should contain the following:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # openwisp2 modules\n        'openwisp_users',\n        'openwisp_ipam',\n        # admin\n        'django.contrib.admin',\n        # rest framework\n        'rest_framework',\n        'drf_yasg',\n    ]\n\n    AUTH_USER_MODEL = 'openwisp_users.User'\n\nAdd the URLs to your main ``urls.py``:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from django.urls import include, path\n    from openwisp_users.api.urls import get_api_urls as get_users_api_urls\n\n    urlpatterns = [\n        # admin URLs\n        path('admin/', admin.site.urls),\n        # IPAM API\n        path('', include('openwisp_ipam.urls')),\n        # OpenAPI docs\n        path('api/v1/', include('openwisp_utils.api.urls')),\n        # Bearer Authentication API URL\n        path('api/v1/', include((get_users_api_urls(), 'users'), namespace='users')),\n    ]\n\n\nThen run:\n\n.. code-block:: shell\n\n    ./manage.py migrate\n\nExtending openwisp-ipam\n***********************\n\nOne of the core values of the OpenWISP project is `Software Reusability <http://openwisp.io/docs/general/values.html#software-reusability-means-long-term-sustainability>`_,\nfor this reason *openwisp-ipam* provides a set of base classes\nwhich can be imported, extended and reused to create derivative apps.\n\nIn order to implement your custom version of *openwisp-ipam*,\nyou need to perform the steps described in this section.\n\nWhen in doubt, the code in the `test project <https://github.com/openwisp/openwisp-ipam/tree/master/tests/openwisp2/>`_ and\nthe `sample app <https://github.com/openwisp/openwisp-ipam/tree/master/tests/openwisp2/sample_ipam/>`_\nwill serve you as source of truth:\njust replicate and adapt that code to get a basic derivative of\n*openwisp-ipam* working.\n\nIf you want to add new users fields, please follow the `tutorial to extend the\nopenwisp-users <https://github.com/openwisp/openwisp-users/#extend-openwisp-users>`_.\nAs an example, we have extended *openwisp-users* to *sample_users* app and\nadded a field ``social_security_number`` in the `sample_users/models.py\n<https://github.com/openwisp/openwisp-ipam/blob/master/tests/openwisp2/sample_users/models.py>`_.\n\n**Premise**: if you plan on using a customized version of this module,\nwe suggest to start with it since the beginning, because migrating your data\nfrom the default module to your extended version may be time consuming.\n\n1. Initialize your custom module\n================================\n\nThe first thing you need to do is to create a new django app which will\ncontain your custom version of *openwisp-ipam*.\n\nA django app is nothing more than a\n`python package <https://docs.python.org/3/tutorial/modules.html#packages>`_\n(a directory of python scripts), in the following examples we'll call this django app\n``myipam``, but you can name it how you want::\n\n    django-admin startapp myipam\n\nKeep in mind that the command mentioned above must be called from a directory\nwhich is available in your `PYTHON_PATH <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH>`_\nso that you can then import the result into your project.\n\nNow you need to add ``myipam`` to ``INSTALLED_APPS`` in your ``settings.py``,\nensuring also that ``openwisp_ipam`` has been removed:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # ... other apps ...\n        'openwisp_utils.admin_theme',\n        # all-auth\n        'django.contrib.sites',\n        'allauth',\n        'allauth.account',\n        'allauth.socialaccount',\n        # openwisp2 modules\n        'openwisp_users',\n        # 'myipam',   <-- replace without your app-name here\n        # admin\n        'django.contrib.admin',\n        # rest framework\n        'rest_framework',\n        # Other dependencies\n        'reversion',\n    ]\n\nFor more information about how to work with django projects and django apps,\nplease refer to the `django documentation <https://docs.djangoproject.com/en/dev/intro/tutorial01/>`_.\n\n2. Install ``openwisp-ipam``\n============================\n\nInstall (and add to the requirement of your project) openwisp-ipam::\n\n    pip install openwisp-ipam\n\n3. Add ``EXTENDED_APPS``\n========================\n\nAdd the following to your ``settings.py``:\n\n.. code-block:: python\n\n    EXTENDED_APPS = ('openwisp_ipam',)\n\n4. Add ``openwisp_utils.staticfiles.DependencyFinder``\n======================================================\n\nAdd ``openwisp_utils.staticfiles.DependencyFinder`` to\n``STATICFILES_FINDERS`` in your ``settings.py``:\n\n.. code-block:: python\n\n    STATICFILES_FINDERS = [\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n        'openwisp_utils.staticfiles.DependencyFinder',\n    ]\n\n5. Add ``openwisp_utils.loaders.DependencyLoader``\n==================================================\n\nAdd ``openwisp_utils.loaders.DependencyLoader`` to ``TEMPLATES``\nin your ``settings.py``, but ensure it comes before\n``django.template.loaders.app_directories.Loader``:\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'OPTIONS': {\n                'loaders': [\n                    'django.template.loaders.filesystem.Loader',\n                    'openwisp_utils.loaders.DependencyLoader',\n                    'django.template.loaders.app_directories.Loader',\n                ],\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                ],\n            },\n        }\n    ]\n\n6. Inherit the AppConfig class\n==============================\n\nPlease refer to the following files in the sample app of the test project:\n\n- `sample_ipam/__init__.py <https://github.com/openwisp/openwisp-ipam/tree/master/tests/openwisp2/sample_ipam/__init__.py>`_.\n- `sample_ipam/apps.py <https://github.com/openwisp/openwisp-ipam/tree/master/tests/openwisp2/sample_ipam/apps.py>`_.\n\nYou have to replicate and adapt that code in your project.\n\nFor more information regarding the concept of ``AppConfig`` please refer to\nthe `\"Applications\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/applications/>`_.\n\n7. Create your custom models\n============================\n\nFor the purpose of showing an example, we added a simple \"details\" field to the\n`models of the sample app in the test project <https://github.com/openwisp/openwisp-ipam/tree/master/tests/openwisp2/sample_ipam/models.py>`_.\n\nYou can add fields in a similar way in your ``models.py`` file.\n\n**Note**: for doubts regarding how to use, extend or develop models please refer to\nthe `\"Models\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/db/models/>`_.\n\n8. Add swapper configurations\n=============================\n\nOnce you have created the models, add the following to your ``settings.py``:\n\n.. code-block:: python\n\n    # Setting models for swapper module\n    OPENWISP_IPAM_IPADDRESS_MODEL = 'myipam.IpAddress'\n    OPENWISP_IPAM_SUBNET_MODEL = 'myipam.Subnet'\n\nSubstitute ``myipam`` with the name you chose in step 1.\n\n9. Create database migrations\n=============================\n\nCreate and apply database migrations::\n\n    ./manage.py makemigrations\n    ./manage.py migrate\n\nFor more information, refer to the\n`\"Migrations\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/migrations/>`_.\n\n\n10. Create the admin\n====================\n\nRefer to the `admin.py file of the sample app <https://github.com/openwisp/openwisp-ipam/tree/master/tests/openwisp2/sample_ipam/admin.py>`_.\n\nTo introduce changes to the admin, you can do it in two main ways which are described below.\n\n**Note**: for more information regarding how the django admin works, or how it can be customized,\nplease refer to `\"The django admin site\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/contrib/admin/>`_.\n\n1. Monkey patching\n------------------\n\nIf the changes you need to add are relatively small, you can resort to monkey patching.\n\nFor example:\n\n.. code-block:: python\n\n    from openwisp_ipam.admin import IpAddressAdmin, SubnetAdmin\n\n    SubnetAdmin.app_label = 'sample_ipam'\n\n\n2. Inheriting admin classes\n---------------------------\n\nIf you need to introduce significant changes and/or you don't want to resort to\nmonkey patching, you can proceed as follows:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from openwisp_ipam.admin import (\n        IpAddressAdmin as BaseIpAddressAdmin,\n        SubnetAdmin as BaseSubnetAdmin,\n    )\n    from swapper import load_model\n\n    IpAddress = load_model('openwisp_ipam', 'IpAddress')\n    Subnet = load_model('openwisp_ipam', 'Subnet')\n\n    admin.site.unregister(IpAddress)\n    admin.site.unregister(Subnet)\n\n    @admin.register(IpAddress)\n    class IpAddressAdmin(BaseIpAddressAdmin):\n        # add your changes here\n\n    @admin.register(Subnet)\n    class SubnetAdmin(BaseSubnetAdmin):\n        app_label = 'myipam'\n        # add your changes here\n\nSubstitute ``myipam`` with the name you chose in step 1.\n\n11. Create root URL configuration\n=================================\n\n.. code-block:: python\n\n    from .sample_ipam import views as api_views\n    from openwisp_ipam.urls import get_urls\n\n    urlpatterns = [\n        # ... other urls in your project ...\n        # openwisp-ipam urls\n        # path('', include(get_urls(api_views))) <-- Use only when changing API views (dicussed below)\n        path('', include('openwisp_ipam.urls')),\n    ]\n\nFor more information about URL configuration in django, please refer to the\n`\"URL dispatcher\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/http/urls/>`_.\n\n12. Import the automated tests\n==============================\n\nWhen developing a custom application based on this module, it's a good\nidea to import and run the base tests too, so that you can be sure the changes\nyou're introducing are not breaking some of the existing features of *openwisp-ipam*.\n\nIn case you need to add breaking changes, you can overwrite the tests defined\nin the base classes to test your own behavior.\n\nSee the `tests of the sample app <https://github.com/openwisp/openwisp-ipam/tree/master/tests/openwisp2/sample_ipam/tests.py>`_\nto find out how to do this.\n\nYou can then run tests with::\n\n    # the --parallel flag is optional\n    ./manage.py test --parallel myipam\n\nSubstitute ``myipam`` with the name you chose in step 1.\n\nFor more information about automated tests in django, please refer to\n`\"Testing in Django\" <https://docs.djangoproject.com/en/dev/topics/testing/>`_.\n\nOther base classes that can be inherited and extended\n=====================================================\n\nThe following steps are not required and are intended for more advanced customization.\n\n1. Extending the API Views\n--------------------------\n\nThe API view classes can be extended into other django applications as well. Note\nthat it is not required for extending openwisp-ipam to your app and this change\nis required only if you plan to make changes to the API views.\n\nCreate a view file as done in `views.py <https://github.com/openwisp/openwisp-ipam/tree/master/tests/openwisp2/sample_ipam/views.py>`_.\n\nFor more information about django views, please refer to the `views section in the django documentation <https://docs.djangoproject.com/en/dev/topics/http/views/>`_.\n\nContributing\n************\n\nPlease refer to the `OpenWISP contributing guidelines <http://openwisp.io/docs/developer/contributing.html>`_.\n\n`Support channels <http://openwisp.org/support.html>`_ |\n`Issue Tracker <https://github.com/openwisp/openwisp-ipam/issues>`_ |\n`License <https://github.com/openwisp/openwisp-ipam/blob/master/LICENSE>`_\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/openwisp/openwisp-ipam/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/openwisp/openwisp-ipam",
    "keywords": "django,freeradius,networking,openwisp",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openwisp-ipam",
    "package_url": "https://pypi.org/project/openwisp-ipam/",
    "platform": "Platform Independent",
    "project_url": "https://pypi.org/project/openwisp-ipam/",
    "project_urls": {
      "Download": "https://github.com/openwisp/openwisp-ipam/releases",
      "Homepage": "https://github.com/openwisp/openwisp-ipam"
    },
    "release_url": "https://pypi.org/project/openwisp-ipam/1.0/",
    "requires_dist": [
      "openwisp-users (~=1.0.0)",
      "openwisp-utils[rest] (~=1.0.1)",
      "django (<4.1.0,>=3.0.0)",
      "openpyxl (~=3.0.9)",
      "django-reversion (~=4.0.1)"
    ],
    "requires_python": "",
    "summary": "IP address space administration module of OpenWISP.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13655850,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c5e00cb6316f106395ad566704e8c6430a367f241ad984ccd952b4646af4f6f",
          "md5": "8164e245337baac0631b54ffc5a08bf6",
          "sha256": "aa4f6c020db344b6c7ebc3a6fb216d9d3cf5c787cf33f9d58c19593fe2d6605d"
        },
        "downloads": -1,
        "filename": "openwisp_ipam-0.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "8164e245337baac0631b54ffc5a08bf6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 38916,
        "upload_time": "2020-05-28T01:30:12",
        "upload_time_iso_8601": "2020-05-28T01:30:12.462231Z",
        "url": "https://files.pythonhosted.org/packages/7c/5e/00cb6316f106395ad566704e8c6430a367f241ad984ccd952b4646af4f6f/openwisp_ipam-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02aa262908f4dbac15b65dd568db01dfe892ee54b69084a989ac0a22baa60ab1",
          "md5": "6f320699ee997aeb9e90f7797e06cae3",
          "sha256": "1627797d73a009b51d17f4cd6cde183f4b17ff118b7c0a7137feed5c765f4da0"
        },
        "downloads": -1,
        "filename": "openwisp-ipam-0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "6f320699ee997aeb9e90f7797e06cae3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32964,
        "upload_time": "2020-05-28T01:30:16",
        "upload_time_iso_8601": "2020-05-28T01:30:16.656006Z",
        "url": "https://files.pythonhosted.org/packages/02/aa/262908f4dbac15b65dd568db01dfe892ee54b69084a989ac0a22baa60ab1/openwisp-ipam-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2defbc620ebf4f8c02c4f56b365c71ef8f41750659e0a739dbc5ade278f92cf4",
          "md5": "80736e17cd9d6e79e5bdbde737220447",
          "sha256": "a6f7c0d5fd2f3b3a8077fe0629645d69a1a6d445c93f77e391fa75034174c07b"
        },
        "downloads": -1,
        "filename": "openwisp_ipam-0.1.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "80736e17cd9d6e79e5bdbde737220447",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 31447,
        "upload_time": "2020-09-04T03:42:54",
        "upload_time_iso_8601": "2020-09-04T03:42:54.856089Z",
        "url": "https://files.pythonhosted.org/packages/2d/ef/bc620ebf4f8c02c4f56b365c71ef8f41750659e0a739dbc5ade278f92cf4/openwisp_ipam-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe413e6302325d4c7f5b48f557846b92165d16593776f70862bfbfa6ec2be41f",
          "md5": "282714cb66962d0f5d5d696813896c2d",
          "sha256": "5664091aa472d01e03574e45da1fdd0d58c45708b5088cadc45c7b85d60df6dd"
        },
        "downloads": -1,
        "filename": "openwisp-ipam-0.1.1.tar.gz",
        "has_sig": true,
        "md5_digest": "282714cb66962d0f5d5d696813896c2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35363,
        "upload_time": "2020-09-04T03:42:57",
        "upload_time_iso_8601": "2020-09-04T03:42:57.154671Z",
        "url": "https://files.pythonhosted.org/packages/fe/41/3e6302325d4c7f5b48f557846b92165d16593776f70862bfbfa6ec2be41f/openwisp-ipam-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f7537a075b56b1de11d26a517e710f4348dd3a5ce7e95785c0a453e436d44b8",
          "md5": "6e22a19497f6215d8d1ddbd785fcb34b",
          "sha256": "7280c9c4215a64106b59fc90c2ec7314e231d0154c8c2ae90c54f72787b3aa07"
        },
        "downloads": -1,
        "filename": "openwisp_ipam-0.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "6e22a19497f6215d8d1ddbd785fcb34b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 891054,
        "upload_time": "2020-10-16T21:58:40",
        "upload_time_iso_8601": "2020-10-16T21:58:40.754429Z",
        "url": "https://files.pythonhosted.org/packages/8f/75/37a075b56b1de11d26a517e710f4348dd3a5ce7e95785c0a453e436d44b8/openwisp_ipam-0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc24a9a11e315e35e1f96db6ff2430b0ade5edcbb3166fb85c4bcc8e834201ca",
          "md5": "f063bb80653c67e83ae906ae59a13c21",
          "sha256": "155c598db8088a890c416e0a86cabe9da139360d04571865fa17e8aa0ca6fbb4"
        },
        "downloads": -1,
        "filename": "openwisp-ipam-0.2.tar.gz",
        "has_sig": true,
        "md5_digest": "f063bb80653c67e83ae906ae59a13c21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 886936,
        "upload_time": "2020-10-16T21:58:57",
        "upload_time_iso_8601": "2020-10-16T21:58:57.439510Z",
        "url": "https://files.pythonhosted.org/packages/dc/24/a9a11e315e35e1f96db6ff2430b0ade5edcbb3166fb85c4bcc8e834201ca/openwisp-ipam-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c2a9531123f9864829cd48372b4a16c74419fc87d8c321a07d402372eac6cee",
          "md5": "2c407e220de06d44bd21ef45055b4ed5",
          "sha256": "16985135ed195c0a422644064d8c6e210e2120ac0b1f2d1128bb5f866e91a351"
        },
        "downloads": -1,
        "filename": "openwisp_ipam-1.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "2c407e220de06d44bd21ef45055b4ed5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 903257,
        "upload_time": "2022-04-28T17:21:53",
        "upload_time_iso_8601": "2022-04-28T17:21:53.803921Z",
        "url": "https://files.pythonhosted.org/packages/3c/2a/9531123f9864829cd48372b4a16c74419fc87d8c321a07d402372eac6cee/openwisp_ipam-1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db4e3cbce3cca0664027e66b83dc95cd448aa138f39c457ed025a0df5d5fb9fb",
          "md5": "10dcb44654a6ff65edd91b9f9aa1a388",
          "sha256": "2badb699658191c1bc2f31d75ea1196211d23207e7472a9b4ed7254e9b132951"
        },
        "downloads": -1,
        "filename": "openwisp-ipam-1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "10dcb44654a6ff65edd91b9f9aa1a388",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 898535,
        "upload_time": "2022-04-28T17:21:57",
        "upload_time_iso_8601": "2022-04-28T17:21:57.943788Z",
        "url": "https://files.pythonhosted.org/packages/db/4e/3cbce3cca0664027e66b83dc95cd448aa138f39c457ed025a0df5d5fb9fb/openwisp-ipam-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c2a9531123f9864829cd48372b4a16c74419fc87d8c321a07d402372eac6cee",
        "md5": "2c407e220de06d44bd21ef45055b4ed5",
        "sha256": "16985135ed195c0a422644064d8c6e210e2120ac0b1f2d1128bb5f866e91a351"
      },
      "downloads": -1,
      "filename": "openwisp_ipam-1.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "2c407e220de06d44bd21ef45055b4ed5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 903257,
      "upload_time": "2022-04-28T17:21:53",
      "upload_time_iso_8601": "2022-04-28T17:21:53.803921Z",
      "url": "https://files.pythonhosted.org/packages/3c/2a/9531123f9864829cd48372b4a16c74419fc87d8c321a07d402372eac6cee/openwisp_ipam-1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db4e3cbce3cca0664027e66b83dc95cd448aa138f39c457ed025a0df5d5fb9fb",
        "md5": "10dcb44654a6ff65edd91b9f9aa1a388",
        "sha256": "2badb699658191c1bc2f31d75ea1196211d23207e7472a9b4ed7254e9b132951"
      },
      "downloads": -1,
      "filename": "openwisp-ipam-1.0.tar.gz",
      "has_sig": true,
      "md5_digest": "10dcb44654a6ff65edd91b9f9aa1a388",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 898535,
      "upload_time": "2022-04-28T17:21:57",
      "upload_time_iso_8601": "2022-04-28T17:21:57.943788Z",
      "url": "https://files.pythonhosted.org/packages/db/4e/3cbce3cca0664027e66b83dc95cd448aa138f39c457ed025a0df5d5fb9fb/openwisp-ipam-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}