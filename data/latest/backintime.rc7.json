{
  "info": {
    "author": "Akim Mukhtarov",
    "author_email": "akim.int80h@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# backintime 1.6.3\r\n✨ Tool for testing trading strategies on historical data ✨    \r\nSuch testing does not guarantee the same results in real trading, but it gives a rough estimate of a strategy's success.\r\nThe smaller timeframe is used, the more accurate the results will be.\r\n\r\n> Note: Margin trading is not supported as for now. Expected in 2.x releases.\r\n\r\n\r\n## Features\r\n- Use CSV or Binance API as a data source\r\n- The same data can be represented in various timeframes  \r\n    (few short candles is used to represent longer one)\r\n- Market, Limit, Take Profit, Take Profit Limit, Stop Loss, Stop Loss Limit orders management\r\n- Builtin indicators. See [list](#indicators).\r\n- Trading statistics (win rate, profit/loss, avg. profit, etc.) with FIFO, LIFO or AVCO Profit/Loss estimation algorithms\r\n- Export orders, trades and statistics to csv\r\n\r\n\r\n## Indicators\r\n- MA - Moving Average\r\n- EMA - Exponential Moving Average\r\n- MACD - Moving Average Convergence Divergence\r\n- BBANDS - Bollinger Bands\r\n- RSI - Relative Strength Index\r\n- ATR - Average True Range\r\n- ADX - Average Directional Movement Index\r\n- DMI - Directional Movement Indicator\r\n- PIVOT - Pivot Points (Traditional, Fibonacci or Classic)\r\n\r\n\r\n## Installation\r\n```sh\r\npython3 -m pip install backintime\r\n```\r\n\r\n\r\n## How to use\r\n\r\nSample with MACD strategy is provided below. The strategy buys when the MACD line crosses from below to above the signal line, (i.e. histogram becomes non-zero), and sells when MACD line crosses from above to below the signal line. Note that this strategy results in a high losses and only provided as a reference. Generally no one uses only one indicator in a trading strategy. \r\n```py\r\nfrom datetime import datetime\r\nfrom backintime import TradingStrategy, run_backtest\r\nfrom backintime.trading_strategy import TradingStrategy\r\nfrom backintime.timeframes import Timeframes as tf\r\nfrom backintime.indicator_params import MACD\r\nfrom backintime.data.binance import BinanceCandlesFactory\r\n\r\n\r\nclass MacdStrategy(TradingStrategy): # (1)\r\n    title = \"Sample MACD Strategy\"\r\n    indicators = { MACD(tf.H1) }\t# (2)\r\n\r\n    def tick(self):\t# (3)\r\n        macd = self.analyser.macd(tf.H1)\r\n        if not self.position and macd.crossover_up():\r\n            self.buy()\t# (4)\r\n        elif self.position and macd.crossover_down():\r\n            self.sell()\t# (5)\r\n\r\n\r\nfeed = BinanceCandlesFactory('BTCUSDT', tf.M15)\t# (6)\r\nsince = datetime.fromisoformat(\"2020-01-01 00:00+00:00\")\r\nuntil = datetime.fromisoformat(\"2021-01-01 00:00+00:00\")\r\n\r\nresult = run_backtest(MacdStrategy, feed,\r\n                      10_000, since, until, \r\n                      maker_fee='0.005', taker_fee='0.005')\r\nprint(result)\r\nprint(result.get_stats('FIFO'))\r\nresult.export()\r\n```\r\nTo implement a strategy, you need to create a class derived from `TradingStrategy` (1), specify which indicators is used (2) and provide algorithm implementation in `tick` method (3). \r\nWhen the corresponding conditions are met, the strategy calls `buy` (4) or `sell` (5) methods, which are aliases for Market order submission.\r\nHere the backtesting is done with candlesticks from Binance API on 15 minutes timeframe (6). However, consider using CSV file instead for better performance.\r\n\r\n---\r\n\r\nThe following sample with \"SMA resistance breakout\" strategy demonstrates more \r\nadvanced features: Limit orders, Take Profit and Stop Loss. \r\nThe strategy buys when the last close crosses from below to above SMA line and \r\nsells at Take Profit or Stop Loss levels. MACD and DMI signals are used as filters.\r\n```py\r\nimport typing as t\r\nfrom datetime import datetime\r\nfrom decimal import Decimal\r\nfrom backintime import TradingStrategy, run_backtest\r\nfrom backintime.timeframes import Timeframes as tf\r\nfrom backintime.data.binance import BinanceCandlesFactory\r\nfrom backintime.indicator_params import SMA, MACD, DMI, PIVOT\r\nfrom backintime.analyser.indicators.dmi import DMIResultSequence\r\nfrom backintime.analyser.indicators.macd import MacdResultSequence\r\nfrom backintime.broker import TakeProfitOptions, StopLossOptions\r\n\r\n\r\ndef macd_hist_up(macd: MacdResultSequence) -> bool:\r\n    \"\"\"True, if MACD hist > 0.\"\"\"\r\n    return macd[-1].hist > 0\r\n\r\n\r\ndef dmi_buy_signal(dmi: DMIResultSequence) -> bool:\r\n    \"\"\"True, if +DI > -DI.\"\"\"\r\n    return dmi.positive_di[-1] > dmi.negative_di[-1]\r\n\r\n\r\nclass SmaResistanceBreakout(TradingStrategy):\r\n    title = \"SMA resistance breakout\"\r\n    candle_timeframes = { tf.M15 }\r\n    indicators = {\r\n        SMA(tf.M15, 55),\r\n        MACD(tf.M15),\r\n        DMI(tf.M15, 14),\r\n        PIVOT(tf.D1, 15)\r\n    }\r\n\r\n    def __init__(self, broker, analyser, candles):\r\n        self.prev_close: t.Optional[Decimal] = None\r\n        self.curr_close: t.Optional[Decimal] = None\r\n        super().__init__(broker, analyser, candles)\r\n\r\n    def tick(self):\r\n        self.prev_close = self.curr_close\r\n        self.curr_close = self.candles.get(tf.M15).close\r\n        sma = self.analyser.sma(tf.M15, period=55)[-1]\r\n        sma_crossover_up = self.curr_close > sma and \\\r\n                           self.prev_close and self.prev_close <= sma\r\n\r\n        if self.broker.max_fiat_for_maker and sma_crossover_up and \\\r\n                macd_hist_up(self.analyser.macd(tf.M15)) and \\\r\n                dmi_buy_signal(self.analyser.dmi(tf.M15, 14)):\r\n            # Calculate buy price: current SMA + 0.2%\r\n            limit_price = Decimal(sma) * Decimal('1.002')\r\n            # Set up TP at PIVOT' R2 level\r\n            pivot = self.analyser.pivot(tf.D1, 15)\r\n            take_profit_trigger = pivot[-1].r2\r\n            take_profit = TakeProfitOptions(percentage_amount=Decimal('100.00'),\r\n                                            trigger_price=take_profit_trigger)\r\n            # Set up SL at current close price - 5%\r\n            stop_loss_trigger = self.candles.get(tf.M15).close * Decimal('0.95')\r\n            stop_loss = StopLossOptions(percentage_amount=Decimal('100.00'), \r\n                                        trigger_price=stop_loss_trigger)\r\n            # Submit limit buy with TP & SL\r\n            self.limit_buy(order_price=limit_price,\r\n                           amount=self.broker.max_fiat_for_maker,\r\n                           take_profit=take_profit,\r\n                           stop_loss=stop_loss)\r\n\r\n\r\nfeed = BinanceCandlesFactory('BTCUSDT', tf.M15)\r\nsince = datetime.fromisoformat(\"2020-03-01 00:00+00:00\")\r\nuntil = datetime.fromisoformat(\"2021-05-01 00:00+00:00\")\r\n\r\nresult = run_backtest(SmaResistanceBreakout, feed, \r\n                      10_000, since, until, \r\n                      maker_fee='0.005', taker_fee='0.005')\r\n\r\nprint(result)\r\nprint(result.get_stats('FIFO'))\r\nprint(result.get_stats('LIFO'))\r\nprint(result.get_stats('AVCO'))\r\nresult.export()\r\n\r\n```\r\n\r\n## Core concepts\r\n\r\n#### Backtesting\r\n\r\nBacktesting is done in `run_backtest` function, which basically initializes required objects, \r\nprefetches market data if needed and runs the similar loop:\r\n\r\n```py\r\nfor candle in candles:\r\n    broker.update(candle)   # Review whether orders can be executed\r\n    analyser.update(candle) # Store data for indicators calculation\r\n    candles.update(candle)  # Update candles on required timeframes\r\n    strategy.tick()         # Trading strategy logic here\r\n```\r\n\r\n\r\n#### TradingStrategy\r\n\r\nBase class for trading strategies. \r\nStrategy must provide algorithm implementation in `tick` method, which runs each time a new candle closes.\r\n\r\n\r\n#### Broker\r\n\r\nBroker provides orders management in a simulated market environment. \r\nThe broker executes/activates orders whose conditions fits the market. \r\nSupports Market, Limit, Take Profit, Take Profit Limit, Stop Loss, Stop Loss Limit orders.\r\nOrder execution policy of builtin broker:\r\n\r\n- **Market orders**: \r\n    All market orders will be executed \r\n    when a new candle closes.\r\n    The price of execution is the candle's OPEN price.\r\n\r\n- **Limit orders**: \r\n\tLimit order will be executed at the limit price or better:\r\n    lower or equal price for BUY orders and higher or equal price \r\n    for SELL orders.\r\n    First, the `order_price` of each order will be compared to\r\n    the OPEN price of a new candle:\r\n    ```\r\n    BUY orders will be executed if `order_price` >= OPEN. \r\n    SELL orders will be executed if `order_price` <= OPEN.\r\n   \t```\r\n    Then, remaining BUYs will be compared to LOW,\r\n    and remaining SELLs - to HIGH.\r\n    Fill price is the first price that matched limit price.\r\n\r\n- **Take Profit/Stop Loss orders**:  \r\n\tTP/SL orders will be activated if the `trigger_price` is\r\n    within the price bounds of a candle.\r\n    This check is performed in two steps:\r\n    ```    \r\n\t1) For each order: activate if trigger_price == OPEN\r\n    2) For each order: activate if LOW <= trigger_price <= HIGH\r\n    ``` \r\n    When a TP/SL order is triggered, it will be treated\r\n    as a market or limit order, depending on whether\r\n \t`order_price` is set for the order.\r\n\r\nLimit, Take Profit and Stop Loss orders are reviewed\r\nin the order of their submission (oldest first).\r\n\r\n\r\n\r\n#### Analyser\r\n\r\nIndicators calculation. See [list](#indicators) of supported indicators.\r\n\r\n\r\n#### Candles\r\n\r\nProvides the last candle representation for various timeframes.\r\nIt is useful for checking properties of a candle on one timeframe (H1, for example), while having data on another (for instance, M1).\r\n\r\n\r\n#### DataProvider\r\n\r\nProvides candles in historical order.\r\n`DataProvider` is an iterable object that can be created for specific date range (since, until); \r\nYields OHLCV candle during iteration.\r\n\r\n\r\n#### BacktestingResult\r\n\r\nProvides export to CSV and stats such as Win Rate, Profit/Loss, Average Profit, Best/Worst deal, etc.\r\nSupports estimation in FIFO (First-In-First-Out), LIFO (Last-In-First-Out) or AVCO (Average Cost) algorithms.\r\nThe algorithm name specifies the order in which BUYs must be considered to estimate profit or loss.\r\n  \r\nAll these algorithms produce the same result if SELL order always follows only one BUY.\r\n\r\n\r\n#### Prefetching\r\n\r\nIndicators require a certain amount of data to get a correct result. For example, to calculate the SMA (simple moving average) with a period of 9, 9 values are required. \r\nSo, the strategy will get the wrong result of the SMA indicator, until all 9 candles are accumulated.  \r\n\r\nIn order for the strategy to get the correct values right from the start, prefetching of market data is used. You can configure this behavior by choosing from the following options and passing it as `prefetch_option` argument to the `run_backtest` function:\r\n- **PREFETCH_UNTIL** (default) - prefetch the required amount of data until `since` date; the amount of data required is calculated automatically. In this case, the strategy backtesting will be started from the `since` date. This option is convenient when market data is requested from the exchange API, because situations when the exchange does not have enough historical data are quite rare. \r\n\r\n- **PREFETCH_SINCE** - prefetch the required amount of data from `since` date; the amount of data required for this is calculated automatically. In this case, the strategy backtesting will be launched starting from the dynamically calculated date. This option may be useful when working with a CSV file when you are not sure if it contains enough data before the `since` date. \r\n\r\n- **PREFETCH_NONE** - Do not prefetch data.  \r\n\r\nWhere `since` date is the value of the argument `since` passed to the `run_backtest` function. \r\n\r\n\r\n## Some thoughts\r\n\r\nI plan to add support for margin trading (will allow testing of short and leveraged strategies) \r\nand implement backtesting as an event based system using a queue for communication \r\n(will allow running backtesting on distributed systems).\r\n\r\n\r\n## Docs\r\n\r\nThere is no documentation yet because the code is unstable (but works). As for now, you can browse sources or type `help` in REPL. \r\n\r\n\r\n## License\r\n\r\nMIT\r\n\r\n\r\n## Author\r\n\r\n Akim Mukhtarov [@akim_int80h]\r\n\r\n\r\n[@akim_int80h]: <https://t.me/akim_int80h>\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/akim-mukhtarov/backintime",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "backintime",
    "package_url": "https://pypi.org/project/backintime/",
    "platform": null,
    "project_url": "https://pypi.org/project/backintime/",
    "project_urls": {
      "Homepage": "https://github.com/akim-mukhtarov/backintime"
    },
    "release_url": "https://pypi.org/project/backintime/1.6.3/",
    "requires_dist": [
      "certifi (==2021.10.8)",
      "charset-normalizer (==2.0.12)",
      "idna (==3.3)",
      "numpy (==1.22.2)",
      "pandas (==1.4.1)",
      "python-dateutil (==2.8.2)",
      "pytz (==2021.3)",
      "requests (==2.27.1)",
      "six (==1.16.0)",
      "ta (==0.9.0)",
      "urllib3 (==1.26.8)"
    ],
    "requires_python": "",
    "summary": "Tool for testing trading strategies on historical data",
    "version": "1.6.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16650276,
  "releases": {
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b9d53f5b2d42170b83c7bb0abcf188cd886555ced277349bb52c8aa9e47bdb2",
          "md5": "23289685e978263f16ccd93aec4ac69b",
          "sha256": "f7a668e9cc9cc89b7228355be36372c04c3ef5f83d02d2ad59f1e462eed41a01"
        },
        "downloads": -1,
        "filename": "backintime-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23289685e978263f16ccd93aec4ac69b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5631,
        "upload_time": "2022-02-23T17:06:42",
        "upload_time_iso_8601": "2022-02-23T17:06:42.701127Z",
        "url": "https://files.pythonhosted.org/packages/6b/9d/53f5b2d42170b83c7bb0abcf188cd886555ced277349bb52c8aa9e47bdb2/backintime-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd0c5c03d91c58e87205bab3bd42711fae7ae64663f92e9776bfc0932348e019",
          "md5": "5c009a691bd05e302c10e438e2c5f883",
          "sha256": "a3c4ca2181ede5fd7a414a7571d5b1ca28c2c7bf3cb49b5a9ac831d8344acc8a"
        },
        "downloads": -1,
        "filename": "backintime-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5c009a691bd05e302c10e438e2c5f883",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5169,
        "upload_time": "2022-02-23T17:06:44",
        "upload_time_iso_8601": "2022-02-23T17:06:44.431447Z",
        "url": "https://files.pythonhosted.org/packages/cd/0c/5c03d91c58e87205bab3bd42711fae7ae64663f92e9776bfc0932348e019/backintime-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71c1246445926ee3c6c65a089407c14231e775ff063996e3a99ddeca1b96b3cd",
          "md5": "b3ada78fa3103911b33330dcbdaca1d2",
          "sha256": "5ada290b752a5b32c06bf9db1a59f074c958bfb686b8299e1f8468b7fe908c5d"
        },
        "downloads": -1,
        "filename": "backintime-0.6.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3ada78fa3103911b33330dcbdaca1d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30207,
        "upload_time": "2022-02-24T11:59:01",
        "upload_time_iso_8601": "2022-02-24T11:59:01.786100Z",
        "url": "https://files.pythonhosted.org/packages/71/c1/246445926ee3c6c65a089407c14231e775ff063996e3a99ddeca1b96b3cd/backintime-0.6.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49c6505a6fc00a32c9172376cb2b78bf7002f7ab8b8454c510729acfbb7b7508",
          "md5": "f01b9d6ace8a0ab6d4ce14c64639467a",
          "sha256": "6ecc6d59f8aa872c14cd40281c9768ddb8b422ae6f5b66fc89c63e5ff781bbd5"
        },
        "downloads": -1,
        "filename": "backintime-0.6.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f01b9d6ace8a0ab6d4ce14c64639467a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18730,
        "upload_time": "2022-02-24T11:59:02",
        "upload_time_iso_8601": "2022-02-24T11:59:02.963194Z",
        "url": "https://files.pythonhosted.org/packages/49/c6/505a6fc00a32c9172376cb2b78bf7002f7ab8b8454c510729acfbb7b7508/backintime-0.6.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22d43b345bebc77e583c7902dde4a14ff6dcccabcd443494d077d5b78339218a",
          "md5": "26b2a531f89c31e3e0f7160dc87f4384",
          "sha256": "27d6d1531c199d3fd8b885eb20e9f39a781315f72efba8ee06c9945b6c6a0c4c"
        },
        "downloads": -1,
        "filename": "backintime-0.6.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26b2a531f89c31e3e0f7160dc87f4384",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31447,
        "upload_time": "2022-02-24T12:19:27",
        "upload_time_iso_8601": "2022-02-24T12:19:27.438855Z",
        "url": "https://files.pythonhosted.org/packages/22/d4/3b345bebc77e583c7902dde4a14ff6dcccabcd443494d077d5b78339218a/backintime-0.6.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab939db2c2533e34ab086c27c164df7b33b8e270409e3e46979e0e6b24e32dbe",
          "md5": "1ce44d4598aac3aa45f916a45c0194ce",
          "sha256": "5440a86ea816d75cf9e5a410c57bd862c949a66fcab5a59b226bd04e5365694f"
        },
        "downloads": -1,
        "filename": "backintime-0.6.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1ce44d4598aac3aa45f916a45c0194ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19999,
        "upload_time": "2022-02-24T12:19:28",
        "upload_time_iso_8601": "2022-02-24T12:19:28.602351Z",
        "url": "https://files.pythonhosted.org/packages/ab/93/9db2c2533e34ab086c27c164df7b33b8e270409e3e46979e0e6b24e32dbe/backintime-0.6.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "800b0adb70e0c59d70ad24c589a59a0c0dfcd0f23db300cc8213a9061fc3b896",
          "md5": "6f9268fef373fba00db0519453f6014c",
          "sha256": "835cbfd49560a7cfb584b3c59104275744ec3a6f3280d8969205dc99862681e9"
        },
        "downloads": -1,
        "filename": "backintime-1.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f9268fef373fba00db0519453f6014c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32458,
        "upload_time": "2022-03-08T18:34:17",
        "upload_time_iso_8601": "2022-03-08T18:34:17.781011Z",
        "url": "https://files.pythonhosted.org/packages/80/0b/0adb70e0c59d70ad24c589a59a0c0dfcd0f23db300cc8213a9061fc3b896/backintime-1.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5724f243d415aadb57216c614dd88453cad9dbe11831ed9565295d56e1d33dce",
          "md5": "758ece27f667555fa6e0b332900a74ad",
          "sha256": "76dcb19576b902ddd089644de7a2188754b6526d6cae7f6c61f89477aae76e1f"
        },
        "downloads": -1,
        "filename": "backintime-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "758ece27f667555fa6e0b332900a74ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20514,
        "upload_time": "2022-03-08T18:34:19",
        "upload_time_iso_8601": "2022-03-08T18:34:19.716590Z",
        "url": "https://files.pythonhosted.org/packages/57/24/f243d415aadb57216c614dd88453cad9dbe11831ed9565295d56e1d33dce/backintime-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8b9cf2aeb3f199f57b853e6eb472afc0a0ae49c57ba92f7c72fcf75ad1915a5",
          "md5": "7607ef9e6eac96a33fccca62dae584d5",
          "sha256": "35b1bb3e52028619ff98c89a982d659f1f1ad326850749a91b5e707de37baec6"
        },
        "downloads": -1,
        "filename": "backintime-1.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7607ef9e6eac96a33fccca62dae584d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32455,
        "upload_time": "2022-03-08T18:44:29",
        "upload_time_iso_8601": "2022-03-08T18:44:29.993293Z",
        "url": "https://files.pythonhosted.org/packages/b8/b9/cf2aeb3f199f57b853e6eb472afc0a0ae49c57ba92f7c72fcf75ad1915a5/backintime-1.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "562a66b001bfb2e249d3fffbda8a18a92b58751412711fd06ff9e74ea050cb26",
          "md5": "d6baeb9f7e1b78c8eaaaca68d881dbb2",
          "sha256": "978a1c6016cb147f4dea162fd880f62dbcc9856e4e25e3fb09c4c0c09a9f8f2c"
        },
        "downloads": -1,
        "filename": "backintime-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d6baeb9f7e1b78c8eaaaca68d881dbb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20511,
        "upload_time": "2022-03-08T18:44:31",
        "upload_time_iso_8601": "2022-03-08T18:44:31.294812Z",
        "url": "https://files.pythonhosted.org/packages/56/2a/66b001bfb2e249d3fffbda8a18a92b58751412711fd06ff9e74ea050cb26/backintime-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "662c4ca0d98aff9e4ecff0c298e7a55f6dc4d62c8445be5691d75d4e862ff4d4",
          "md5": "d2e9fdc096d23ec96af51a9e6cd5bbf9",
          "sha256": "ce003552b6f4a784a9aeb0409c8736de8ad024ed67abffcd1c719a7e1dba5d56"
        },
        "downloads": -1,
        "filename": "backintime-1.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2e9fdc096d23ec96af51a9e6cd5bbf9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32365,
        "upload_time": "2022-03-10T12:18:39",
        "upload_time_iso_8601": "2022-03-10T12:18:39.555574Z",
        "url": "https://files.pythonhosted.org/packages/66/2c/4ca0d98aff9e4ecff0c298e7a55f6dc4d62c8445be5691d75d4e862ff4d4/backintime-1.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa872d30444b7224ab0ced448045328105d7975c8a302c008cbbc18ddaa3e3ad",
          "md5": "a4442864e4cc43fd8036259c7685bbb8",
          "sha256": "dbccc9a98839419063fe9357ecb0446fe862ce6a70734cc419f23166b2af4397"
        },
        "downloads": -1,
        "filename": "backintime-1.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a4442864e4cc43fd8036259c7685bbb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20428,
        "upload_time": "2022-03-10T12:18:41",
        "upload_time_iso_8601": "2022-03-10T12:18:41.317754Z",
        "url": "https://files.pythonhosted.org/packages/aa/87/2d30444b7224ab0ced448045328105d7975c8a302c008cbbc18ddaa3e3ad/backintime-1.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b3e3cdd15ef0334a27d9fa6f80b73a118879b4c17ba3a2d2a7ca1aa5cc41cc7",
          "md5": "48d62e121ba9a7f072d9bb4501c4c098",
          "sha256": "093ab89f472a5c8e221325d14bd1edba90bcc6ed2ce3706bae59b033ce0e8a66"
        },
        "downloads": -1,
        "filename": "backintime-1.6.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48d62e121ba9a7f072d9bb4501c4c098",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 54255,
        "upload_time": "2023-02-01T12:27:33",
        "upload_time_iso_8601": "2023-02-01T12:27:33.836169Z",
        "url": "https://files.pythonhosted.org/packages/0b/3e/3cdd15ef0334a27d9fa6f80b73a118879b4c17ba3a2d2a7ca1aa5cc41cc7/backintime-1.6.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aee29a29a1cccc8371baf057f85c536b4c74882425e2054df54d7c95caab9c68",
          "md5": "1cd97d186836822a66a50617f6252bdf",
          "sha256": "fae95616b1f9d039ad9ead29e2f7bcdd1de5ef10b639d699c5bdf97d309565fa"
        },
        "downloads": -1,
        "filename": "backintime-1.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1cd97d186836822a66a50617f6252bdf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43088,
        "upload_time": "2023-02-01T12:27:35",
        "upload_time_iso_8601": "2023-02-01T12:27:35.473570Z",
        "url": "https://files.pythonhosted.org/packages/ae/e2/9a29a1cccc8371baf057f85c536b4c74882425e2054df54d7c95caab9c68/backintime-1.6.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b3e3cdd15ef0334a27d9fa6f80b73a118879b4c17ba3a2d2a7ca1aa5cc41cc7",
        "md5": "48d62e121ba9a7f072d9bb4501c4c098",
        "sha256": "093ab89f472a5c8e221325d14bd1edba90bcc6ed2ce3706bae59b033ce0e8a66"
      },
      "downloads": -1,
      "filename": "backintime-1.6.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "48d62e121ba9a7f072d9bb4501c4c098",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 54255,
      "upload_time": "2023-02-01T12:27:33",
      "upload_time_iso_8601": "2023-02-01T12:27:33.836169Z",
      "url": "https://files.pythonhosted.org/packages/0b/3e/3cdd15ef0334a27d9fa6f80b73a118879b4c17ba3a2d2a7ca1aa5cc41cc7/backintime-1.6.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aee29a29a1cccc8371baf057f85c536b4c74882425e2054df54d7c95caab9c68",
        "md5": "1cd97d186836822a66a50617f6252bdf",
        "sha256": "fae95616b1f9d039ad9ead29e2f7bcdd1de5ef10b639d699c5bdf97d309565fa"
      },
      "downloads": -1,
      "filename": "backintime-1.6.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1cd97d186836822a66a50617f6252bdf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 43088,
      "upload_time": "2023-02-01T12:27:35",
      "upload_time_iso_8601": "2023-02-01T12:27:35.473570Z",
      "url": "https://files.pythonhosted.org/packages/ae/e2/9a29a1cccc8371baf057f85c536b4c74882425e2054df54d7c95caab9c68/backintime-1.6.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}