{
  "info": {
    "author": "Peter Detzner",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# FiwareObjectConverter (FOC)\n\nThis is a simple implementation to serialize Python2- and -3-Objects into a [Fiware-Entity](https://www.fiware.org/wp-content/uploads/2016/12/2_FIWARE-NGSI-Managing-Context-Information-at-large-scale.pdf) and back. The generated JSON-Strings can be POSTed to their API.\n\nThere is also the posibillity to ignore the Metadata while parsing back to the (specified) Python-Object.\n\nFor more Information about Fiwire-Orion visit the following [website](https://fiware-orion.readthedocs.io/en/master/)\n\n## Fiware Entity\n```python\nEntity consits of\n    - Id\n    - Type\n    - has n Attributes:\n        - Name\n        - Type\n        - Value\n        has n-Metadata:\n            - Name\n            - Type\n            - Value\n```\n\n## Usage\nLet's create a class which contains a unicode-string in Python via: \n```python\nclass FooBar(object):\n    def __init__(self):\n        self.myStr = u'Hi!'\n```\n\n### Object 2 FiwareEntity\nThis class can be simply serialized to Json with:\n```python\nfrom objectFiwareConverter import ObjectFiwareConverter\n\njson = ObjectFiwareConverter.obj2Fiware(FooBar(), ind=4)\n# indent is set to 4 for readability\n\n```\n\nThe `str` `json` contains the following\n\n```json\n{\n    \"myStr\": {\n        \"type\": \"string\",\n        \"value\": \"Hi!\",\n        \"metadata\": {\n            \"python\": {\n                \"type\": \"dataType\",\n                \"value\": \"unicode\"\n            }\n        }\n    },\n    \"type\": \"FooBar\",\n    \"id\": \"FooBarbc86c90d-6cca-41c3-878e-cbb58908056c\"\n}\n```\nThis is a simple class for demonstration. The Data-Structure can be arbitrary complex.\n\nThe `\"type\"`- and `\"id\"`-values can be set manually. To do so, just add `self.type = \"YOUR_TYPE\"` and/or `self.id = \"YOUR_ID\"` to `FooBar`.\n\nYou also have the option to not set the `id` and `value`. Just do the following:\n\n```python\njson = ObjectFiwareConverter.obj2Fiware(FooBar(), ind=4, showIdValue=False)\n```\nwhich would just create: \n\n```json\n{\n    \"myStr\": {\n        \"type\": \"string\",\n        \"value\": \"Hi!\",\n        \"metadata\": {\n            \"python\": {\n                \"type\": \"dataType\",\n                \"value\": \"unicode\"\n            }\n        }\n    }\n}\n```\n(E.g.: This `json`-string can be PATCHed to the `v2-Api` of the [Context-Broker](https://fiware-orion.readthedocs.io/en/master/user/walkthrough_apiv2/#update-entity))\n\n### FiwareEntity 2 Object\nA (Representation-) Class is needed to convert it back. Let's set a Class and then parse the JSON-Object into it:\n\n```python \nclass MyVeryOwnFooBar(object): \n    def __init__(self):\n        self.myStr = u' ' # Set Unicode DataType\n\nmvofb = MyVeryOwnFooBar()\nObjectFiwareConverter.fiware2Obj(json, mvofb) # the json from above\nprint mvofb.myStr # prints \"Hi!\"\n```\nMissing variables which are defined by the JSON-String are ignored if not set in the class. If variables are defined which are not specified in the JSON-String then those variables are not touched.\n\n\n\n## Further Information\n#### Fiware Entity Information (Type/ID)\n```\ntype = ClassName\nid = ClassName + Universally Unique Identifier (UUID)\n```\nThe `id` consist of the Class-Name `+` a random generated `uuid` by [uuid4()](https://docs.python.org/2/library/uuid.html) and the type is simply the Class-Name. Also: All Objects, which are converted back from json may contain an `id` and `type` Attribute. They can be accessed with `getattr`, if\n\n#### Ignoring MetaData/Additional MetaData and excluding MetaDAta\nTo ignore the metadata, do the following:\n```python \nmvofb = MyVeryOwnFooBar()\nObjectFiwareConverter.fiware2Obj(json, mvofb, useMetaData=False) # the json from above\n```\nThe conversion between a Python-Object and a JSON-String is not bidirectional by ignoring the `metadata`. \nBy ignoring the `metadata` some Python-DataTypes are \"converted into a simple type\":\n```text \nComplex, Tuple --> List\nUnicode        --> String\n```\n\nNOTE: Python3's strings are already unicode by default, so here nothing is changed. Additionally `long`-types no longer exists. Those are then set as `int`\n\n---\nNOTE:\nThe above example will throw an `TypeError`, because the class `MyVeryOwnFooBar` awaits an `unicode` but would be overwritten with a string, because the `metadata` is ignored. This behaviour can be turned off with the following: \n```python \nmvofb = MyVeryOwnFooBar()\nObjectFiwareConverter.fiware2Obj(json, mvofb, useMetaData=False, ignoreWrongDataType=True) # the json from above\n```\n\n\n---\nIt is also possible to give a Data-Type-Object-Structure while converting to json. Simply create a `dict` containing the concrete Data-Type for Data and the additional Information will be added into the Metadata.\n\nExample:\n```python \nclass AFooBar(object): \n    def __init__(self):\n        self.x = 32.123\n        self.y = 42.123\n\nmyData = dict(y='float32', x='float32')\njson = ObjectFiwareConverter.obj2Fiware(AFooBar(), ind=4, dataTypeDict=myData)\n\n```\nwolud result to:\n```json\n{\n    \"y\": {\n        \"type\": \"number\", \n        \"value\": 42.123, \n        \"metadata\": {\n            \"python\": {\n                \"type\": \"dataType\", \n                \"value\": \"float\"\n            }, \n            \"dataType\": {\n                \"type\": \"dataType\", \n                \"value\": \"float32\"\n            }\n        }\n    }, \n    \"x\": {\n        \"type\": \"number\", \n        \"value\": 32.123, \n        \"metadata\": {\n            \"python\": {\n                \"type\": \"dataType\", \n                \"value\": \"float\"\n            }, \n            \"dataType\": {\n                \"type\": \"dataType\", \n                \"value\": \"float32\"\n            }\n        }\n    }, \n    \"type\": \"AFooBar\", \n    \"id\": \"AFooBar703e581d-3068-4b62-bfa3-c713707e6929\"\n}\n\n```\n---\nTo exclude the `python`-metadata, while creating the `json`. You can use `ignorePythonMetaData=True` as here:\n```python\njson = ObjectFiwareConverter.obj2Fiware(FooBar(), ind=4, ignorePythonMetaData=True) # json fron above\n```\nThis creates simply the following `json`:\n\n```json\n{\n    \"myStr\": {\n        \"type\": \"string\",\n        \"value\": \"Hi!\"\n        },\n    \"type\": \"FooBar\",\n    \"id\": \"FooBarbc86c90d-6cca-41c3-878e-cbb58908056c\"\n}\n```\n\n\n---\n\n\nAt last, if you simply cannot create a class which contains the needed values (or everything is dynamically), just use the `setAttr`- Parameter.\n\n\n```python\nclass SomeTempObject(object):\n    pass\n\nsto = SomeTempObject()\nObjectFiwareConverter.fiware2Obj(json, sto, setAttr=True) # The json from above\n```\n\nThe Values are added via `setattr` and can be accesed by `getattr`:\n```python\nprint getattr(sto, 'myStr') # --> would print Hi!\n```\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iml130/FiwareObjectConverter",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fiwareobjectconverter",
    "package_url": "https://pypi.org/project/fiwareobjectconverter/",
    "platform": "",
    "project_url": "https://pypi.org/project/fiwareobjectconverter/",
    "project_urls": {
      "Homepage": "https://github.com/iml130/FiwareObjectConverter"
    },
    "release_url": "https://pypi.org/project/fiwareobjectconverter/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Serialize Python2- and -3-Objects into a Fiware-Entity (NGSIv2) and back",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8155308,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2dc0f36286a8640e38a679b4e42875c452c6aafc3f41de2652096d4e0eda84c",
          "md5": "3e7635762a8b58871044b9ce86e73f84",
          "sha256": "dc312da188a8947b570c089383078165b4946c03d3584b4f43286db75e34ca3a"
        },
        "downloads": -1,
        "filename": "fiwareobjectconverter-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e7635762a8b58871044b9ce86e73f84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25826,
        "upload_time": "2020-09-10T14:52:34",
        "upload_time_iso_8601": "2020-09-10T14:52:34.438024Z",
        "url": "https://files.pythonhosted.org/packages/a2/dc/0f36286a8640e38a679b4e42875c452c6aafc3f41de2652096d4e0eda84c/fiwareobjectconverter-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2dc0f36286a8640e38a679b4e42875c452c6aafc3f41de2652096d4e0eda84c",
        "md5": "3e7635762a8b58871044b9ce86e73f84",
        "sha256": "dc312da188a8947b570c089383078165b4946c03d3584b4f43286db75e34ca3a"
      },
      "downloads": -1,
      "filename": "fiwareobjectconverter-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e7635762a8b58871044b9ce86e73f84",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 25826,
      "upload_time": "2020-09-10T14:52:34",
      "upload_time_iso_8601": "2020-09-10T14:52:34.438024Z",
      "url": "https://files.pythonhosted.org/packages/a2/dc/0f36286a8640e38a679b4e42875c452c6aafc3f41de2652096d4e0eda84c/fiwareobjectconverter-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}