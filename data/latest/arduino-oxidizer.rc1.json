{
  "info": {
    "author": "loxygen",
    "author_email": "me@loxygen.dev",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Rust",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "# oxidizer (arduino-oxidizer)\n\n<a name=\"english-version\" />\n<a href=\"#japanese-version\"><b>日本語版が使用できます ／ Japanese version is avaialble</b></a>\n\nA python tool to build Rust project for Arduino and write it.\n\n## Installation\n\n### Requirements\n\n- `python3`\n- `pip`\n- `cargo`\n- A rust project configurated to build for Arduino, or an elf file to write\n  - If you need to make a project for it, a template [loxygenK/arduino-on-rust_template](https://github.com/loxygenK/arduino-on-rust_template) is available.\n- `avrdude`\n\n### Installation\n\nYou can install oxidizer with`pip`\n\n```bash\npip install arduino-oxidizer\n```\n\nNote: The package's name to install is **`arduino-oxidizer`**, not `oxidizer`. \n\n## How to use\n\n### Build and write a Cargo project configured for Arduino\n\nOxidizer builds the project using `cargo`, and write to Arduino. The target ELF file is searched based on `cargo.toml`.\n\n```bash\noxidizer <Serial port to write>\n```\n\n#### example\n\n```\n$ cd /path/to/cargo/projects/root\n$ oxidizer /dev/ttyUSB0\n[i] Building 'some-nice-project' ...\n[i] >> cargo build\n    Updating crates.io index\n    Finished dev [unoptimized + debuginfo] target(s) in 2.30s\n[v] Building succeeded! Writing to Arduino...\n[i] >> avrdude -C/etc/avrdude.conf -patmega328p -carduino -P/dev/ttyUSB0 -Uflash:w:target/avr-atmega\n328p/debug/some-nice-project.elf:e\n\navrdude: AVR device initialized and ready to accept instructions\n\nReading | ################################################## | 100% 0.00s\n\n/* ...... */\n\navrdude: 4982 bytes of flash verified\n\navrdude: safemode: Fuses OK (E:00, H:00, L:00)\n\navrdude done.  Thank you.\n\n[v] All works done!\n```\n\n### Build and write in release mode\n\nRun with the option `--release` (`-r`) , to build in release mode.\n\n```\n$ cd /path/to/cargo/projects/root\n$ oxidizer /dev/ttyUSB0 -r\n[i] Building 'some-nice-project' in release mode...\n[i] >> cargo build --release\n    Updating crates.io index\n    Finished release [optimized] target(s) in 2.42s\n\n/* ...... */\n\navrdude done.  Thank you.\n\n[✓] All works done!\n```\n\n### Write your own ELF file\n\nRun with the option `--skip-cargo` (`-s`) and `--elf-path` (`-e`) , to skip building a cargo project, and write your own ELF file to Arduino.\n\n```\n$ oxidizer --skip-cargo --elf-path my_own_elf_file.elf /dev/ttyUSB0\n[i] >> avrdude -C/etc/avrdude.conf -patmega328p -carduino -P/dev/ttyUSB0 -Uflash:w:my_own_elf_file.elf:e\n\navrdude: AVR device initialized and ready to accept instructions\n\n/* ...... */\n\navrdude done.  Thank you.\n\n[✓] All works done!\n```\n\n## Other options\n\nVarious options is available:\n\n```\n$ oxidizer --help\nusage: oxidizer [-h] [--release] [--cargo-option [Option [Option ...]]]\n                [--avrdude-option [Option [Option ...]]] [--avrdude-override] [--avrdude-quite]\n                [--skip-cargo] [--elf-path ELF_PATH] [--no-color]\n                target\n\nA building helper for the Rust project for Arduino.\n\npositional arguments:\n  target                Specify the serial port to write.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --release, -r         Let cargo build in release mode\n  --cargo-option [Option [Option ...]], -c [Option [Option ...]]\n                        Pass options to cargo. Type without '-'!\n  --avrdude-option [Option [Option ...]], -a [Option [Option ...]]\n                        Pass options to avrdude. Type without '-'!\n  --avrdude-override, -A\n                        override avrdude's option. Use with '-a'\n  --avrdude-quite, -q   Use -q option when avrdude.\n  --skip-cargo, -s      Skip building using cargo.\n  --elf-path ELF_PATH, -e ELF_PATH\n                        Specify ELF file's path. Use target/avr-\n                        atmega328p/{debug,release}/{package_name}.elf as default.\n  --no-color            Disable color output.\n```\n\n| Option               | Abbreviation | Arguments                                               | Description                                                  |\n| -------------------- | ------------ | ------------------------------------------------------- | ------------------------------------------------------------ |\n| `--release`          | `-r`         | Nothing                                                 | Build the cargo project in release mode.<br />Cannot be used with `--skip-cargo`. |\n| `--cargo-option`     | `-c`         | Options to pass to cargo<br />(enumerate without`-`)    | Run cargo with additional options.                           |\n| `--avrdude-option`   | `-a`         | Options to pass to avrdude<br /> (enumerate without`-`) | Run avrdude with additional options.                         |\n| `--avrdude-override` | `-A`         | Nothing                                                 | Replace the default options to pass to avrdude with the options specified in `--avrdude-option`. |\n| `--skip-cargo`       | `-s`         | Nothing                                                 | Skip building a cargo project. Use with`--elf-path`.         |\n| `--elf-path`         | `-e`         | The ELF file to write                                   | Specify the ELF file's path to write.                        |\n| `--no-color`         | Nothing      | Nothing                                                 | Print logs without ASCII espace sequences.                   |\n\n---\n\n\n\n# oxidizer (arduino-oxidizer)\n\n<a name=\"japanese-version\" />\n<a href=\"#english-version\"><b>English version is available ／ 英語版が利用できます</b></a>\n\nPythonで作成された、Rustで書かれたArduinoプロジェクトをビルド・書き込むためのツールです。\n\n## インストール\n\n### 必要なもの\n\n- `python3`\n- `pip`\n- `cargo`\n- Arduino用にビルドできるように構成されたRustのプロジェクト\n  または書き込みたいelfファイル\n  - よろしければ [loxygenK/arduino-on-rust_template](https://github.com/loxygenK/arduino-on-rust_template) をどうぞ（ダイマ）\n- `avrdude`\n\n### インストール\n\n`pip`でインストールできます:\n\n```bash\npip install arduino-oxidizer\n```\n\n注意: インストールするパッケージ名は`oxidizer`ではなく**`arduino-oxidizer`**です。 \n\n## 使い方\n\n### Arduino用に構成されたCargoプロジェクトをビルド・書き込み\n\noxidizerは、`cargo`を用いてビルドを行い、`avrdude`を用いてArduinoへ書き込みを行います。\n書き込むELFファイルは`Cargo.toml`から読み込んだプロジェクト名を元に検索されます。\n\n```bash\noxidizer <書き込み先のシリアルポート>\n```\n\n#### 例\n\n```\n$ cd /path/to/cargo/projects/root\n$ oxidizer /dev/ttyUSB0\n[i] Building 'some-nice-project' ...\n[i] >> cargo build\n    Updating crates.io index\n    Finished dev [unoptimized + debuginfo] target(s) in 2.30s\n[v] Building succeeded! Writing to Arduino...\n[i] >> avrdude -C/etc/avrdude.conf -patmega328p -carduino -P/dev/ttyUSB0 -Uflash:w:target/avr-atmega\n328p/debug/some-nice-project.elf:e\n\navrdude: AVR device initialized and ready to accept instructions\n\nReading | ################################################## | 100% 0.00s\n\n/* ...... */\n\navrdude: 4982 bytes of flash verified\n\navrdude: safemode: Fuses OK (E:00, H:00, L:00)\n\navrdude done.  Thank you.\n\n[v] All works done!\n```\n\n### Cargoプロジェクトをリリースモードでビルド・書き込み\n\n`--release`（`-r`）をつけて実行すると、リリースモードでビルドされます。\n\n```\n$ cd /path/to/cargo/projects/root\n$ oxidizer /dev/ttyUSB0 -r\n[i] Building 'some-nice-project' in release mode...\n[i] >> cargo build --release\n    Updating crates.io index\n    Finished release [optimized] target(s) in 2.42s\n\n/* ...... */\n\navrdude done.  Thank you.\n\n[✓] All works done!\n```\n\n### 自作のELFファイルを書き込む\n\n`--skip-cargo`（`-s`）と`--elf-path`（`-e`）を指定して実行すると、Cargoプロジェクトのビルドをスキップし、自作のELFファイルを書き込むことができます。\n\n```\n$ oxidizer --skip-cargo --elf-path my_own_elf_file.elf /dev/ttyUSB0\n[i] >> avrdude -C/etc/avrdude.conf -patmega328p -carduino -P/dev/ttyUSB0 -Uflash:w:my_own_elf_file.elf:e\n\navrdude: AVR device initialized and ready to accept instructions\n\n/* ...... */\n\navrdude done.  Thank you.\n\n[✓] All works done!\n```\n\n## 他のオプション\n\n様々なオプションを利用できます:\n\n```\n$ oxidizer --help\nusage: oxidizer [-h] [--release] [--cargo-option [Option [Option ...]]]\n                [--avrdude-option [Option [Option ...]]] [--avrdude-override] [--avrdude-quite]\n                [--skip-cargo] [--elf-path ELF_PATH] [--no-color]\n                target\n\nA building helper for the Rust project for Arduino.\n\npositional arguments:\n  target                Specify the serial port to write.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --release, -r         Let cargo build in release mode\n  --cargo-option [Option [Option ...]], -c [Option [Option ...]]\n                        Pass options to cargo. Type without '-'!\n  --avrdude-option [Option [Option ...]], -a [Option [Option ...]]\n                        Pass options to avrdude. Type without '-'!\n  --avrdude-override, -A\n                        override avrdude's option. Use with '-a'\n  --avrdude-quite, -q   Use -q option when avrdude.\n  --skip-cargo, -s      Skip building using cargo.\n  --elf-path ELF_PATH, -e ELF_PATH\n                        Specify ELF file's path. Use target/avr-\n                        atmega328p/{debug,release}/{package_name}.elf as default.\n  --no-color            Disable color output.\n```\n\n| オプション           | 省略形 | 引数                                   | 説明                                                         |\n| -------------------- | ------ | -------------------------------------- | ------------------------------------------------------------ |\n| `--release`          | `-r`   | なし                                   | Cargoプロジェクトをリリースモードでビルドします。<br />`--skip-cargo`と同時に指定することはできません。 |\n| `--cargo-option`     | `-c`   | Cargoに渡すオプション(`-`なしで列挙)   | Cargoでビルドする際に、追加でオプションをつけて実行します。  |\n| `--avrdude-option`   | `-a`   | avrdudeに渡すオプション(`-`なしで列挙) | avrdudeでビルドする際に、追加でオプションをつけて実行します。 |\n| `--avrdude-override` | `-A`   | なし                                   | avrdudeでビルドする際、規定のコマンドを`--avrdude-option`で指定されたものに置き換えます。 |\n| `--skip-cargo`       | `-s`   | なし                                   | Cargoでのビルドをスキップします。<br />`--elf-path`と一緒に使用します。 |\n| `--elf-path`         | `-e`   | Arduinoに書き込むELFファイルへのパス   | 書き込むELFファイルのパスを指定します。                      |\n| `--no-color`         | なし   | なし                                   | ASCIIエスケープシーケンスなしで出力を行います。              |\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/loxygenK/oxidizer",
    "keywords": "",
    "license": "MIT",
    "maintainer": "loxygen",
    "maintainer_email": "me@loxygen.dev",
    "name": "arduino-oxidizer",
    "package_url": "https://pypi.org/project/arduino-oxidizer/",
    "platform": "",
    "project_url": "https://pypi.org/project/arduino-oxidizer/",
    "project_urls": {
      "Homepage": "https://github.com/loxygenK/oxidizer"
    },
    "release_url": "https://pypi.org/project/arduino-oxidizer/1.0.0/",
    "requires_dist": [
      "toml (~=0.10)",
      "pyserial (~=3.5)"
    ],
    "requires_python": "",
    "summary": "A python tool to build Rust project for Arduino and write it.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8773363,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30d9e4d99986f4711b273341afe84b324b92b428d00e88fc5b8081e717024d1f",
          "md5": "ca9b56a1fda946e0b6072c4e2497b9f7",
          "sha256": "99d729e9a6f9f64e898fa929d9f5bf9d95129f3613698984f9a6f345d4f4feb9"
        },
        "downloads": -1,
        "filename": "arduino_oxidizer-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca9b56a1fda946e0b6072c4e2497b9f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7641,
        "upload_time": "2020-11-29T14:18:41",
        "upload_time_iso_8601": "2020-11-29T14:18:41.371272Z",
        "url": "https://files.pythonhosted.org/packages/30/d9/e4d99986f4711b273341afe84b324b92b428d00e88fc5b8081e717024d1f/arduino_oxidizer-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5a32215caa5187f228b744b84a258dae862097b01cee698160057d11808626d",
          "md5": "67cea87d988c389e2432cae856fd3df9",
          "sha256": "280aecb78836b1b9649fc9501dee5ce9a73a4f819cc415dae8792436566134b7"
        },
        "downloads": -1,
        "filename": "arduino-oxidizer-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "67cea87d988c389e2432cae856fd3df9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7635,
        "upload_time": "2020-11-29T14:18:42",
        "upload_time_iso_8601": "2020-11-29T14:18:42.921182Z",
        "url": "https://files.pythonhosted.org/packages/a5/a3/2215caa5187f228b744b84a258dae862097b01cee698160057d11808626d/arduino-oxidizer-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30d9e4d99986f4711b273341afe84b324b92b428d00e88fc5b8081e717024d1f",
        "md5": "ca9b56a1fda946e0b6072c4e2497b9f7",
        "sha256": "99d729e9a6f9f64e898fa929d9f5bf9d95129f3613698984f9a6f345d4f4feb9"
      },
      "downloads": -1,
      "filename": "arduino_oxidizer-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca9b56a1fda946e0b6072c4e2497b9f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7641,
      "upload_time": "2020-11-29T14:18:41",
      "upload_time_iso_8601": "2020-11-29T14:18:41.371272Z",
      "url": "https://files.pythonhosted.org/packages/30/d9/e4d99986f4711b273341afe84b324b92b428d00e88fc5b8081e717024d1f/arduino_oxidizer-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5a32215caa5187f228b744b84a258dae862097b01cee698160057d11808626d",
        "md5": "67cea87d988c389e2432cae856fd3df9",
        "sha256": "280aecb78836b1b9649fc9501dee5ce9a73a4f819cc415dae8792436566134b7"
      },
      "downloads": -1,
      "filename": "arduino-oxidizer-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "67cea87d988c389e2432cae856fd3df9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7635,
      "upload_time": "2020-11-29T14:18:42",
      "upload_time_iso_8601": "2020-11-29T14:18:42.921182Z",
      "url": "https://files.pythonhosted.org/packages/a5/a3/2215caa5187f228b744b84a258dae862097b01cee698160057d11808626d/arduino-oxidizer-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}