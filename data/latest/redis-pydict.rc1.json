{
  "info": {
    "author": "Narasimha Prasanna HN",
    "author_email": "narasimhaprasannahn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# redis-pydict\nA python dictionary that uses Redis as in-memory storage backend to facilitate distributed computing applications development. This library is a small wrapper around Redis that provides dictionary that acts as a drop-in replacement for python dict, but stores data in Redis instead of local program memor, thus key-value pairs written into the python dictionary can be used by other programs that are connected to the same Redis instance / cluster anywhere over the network. The library also provides wrapper around Redis Pub-Sub using which processes can publish and wait for events when new keys are added to the dictionary.\n\n### Installation\n1. From source:\n```\ngit clone git@github.com:Narasimha1997/redis-pydict.git\ncd redis-pydict\npip3 install -e .\n```\n\n2. From PIP\n```\npip3 install redis-pydict\n```\n\n### Usage\n1. Creating the instance of RedisPyDict\n```python\nfrom redis_pydict import PyRedisDict\n\nredis_dict = PyRedisDict(\n    host='localhost',     # redis host\n    port=6379,            # redis port\n    db=0,                 # redis db (0-15)\n    password=None,        # password if using password auth\n    namespace=\"\",         # namespace: this is the key prefix, every key inserted into the dict will be prefixed with this namespace string when inserting into Redis, this provides some degree of isolation between namespaces\n    custom=None  # use a custom connection, pass a Redis/Redis cluster connection object manually, parameters like `host`, `port`, `db` and `password` will be ignored if this is not None\n)\n```\n\n2. Supported functions:\n`PyRedisDict` is a replacement for dict, and it supports most of the dictionary methods:\n```\n>>> dir(redis_dict)\n['__class__', '__contains__', '__delattr__', '__delitem__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_iter_internal', '_iter_items', '_scan_iter', 'clear', 'enable_publish', 'get', 'items', 'items_matching', 'iter_matching', 'key_namespace', 'keys', 'notification_id', 'redis', 'set_notification_id', 'set_notification_mode', 'subscribe_to_key_events', 'to_dict', 'update', 'values']\n```\n\n3. Publish and subscribe to key set events\n`PyRedisDict` can also send key set events when enabled, by default it is not enabled. You can enable it by calling `set_notification_mode(true)` and `set_notification_id(unique_id)`. Every instance of `PyRedisDict` should be set to a unqiue ID to help diffreniciating with each of them. Here is an example\n\nOn the sender side:\n\n```python\n# enable notifications\nredis_dict.set_notification_mode(true)\n\n# set a unique id\nredis_dict.set_notification_id('myprocess1')\n\n# now this operation will also publish an event which can be captured by subscribers\nredis_dict['key'] = \"Hello\"\n```\n\nOn receiver side:\n```python\n# this will listen for key set events for key 'key' in the given namespace\nfor (key, notification_id, value) in redis_dict.subscribe_to_key_events(pattern=\"key\"):\n    print(key, notification_id, value)\n\n# optionally you can also use a regex pattern, this example listen for all key events matching pattern key*\nfor (key, notification_id, value) in redis_dict.subscribe_to_key_events(pattern=\"key*\"):\n    print(key, notification_id, value)\n```\n\n### Examples:\n1. Basic set and get\n```python\ndef test_basic_get_set():\n   d = PyRedisDict(namespace=\"mykeyspace\")\n\n   d.clear()\n   d['none'] = None\n   d['int'] = 10\n   d['float'] = 20.131\n   d['array'] = [10, 20, 30]\n   d['hashmap'] = {'name': 'prasanna', 'meta': {'age': 24, 'hobbies': ['gaming']}}\n\n   # assert values\n   assert d['int'] == 10\n   assert d['float'] == 20.131\n   assert d['array'] == [10, 20, 30]\n   assert (d['hashmap']['name'] == 'prasanna') and (d['hashmap']['meta']['age'] == 24)\n   assert (d['none'] == None)\n\n   d.clear()\n```\n\n2. Custom objects\n```\ndef test_custom_class_get_set():\n   d = PyRedisDict(namespace=\"mykeyspace\")\n\n   d.clear()\n   d['obj'] = CustomClass()\n\n   assert d['obj'].add() == (10 + 20 + 30)\n   d.clear()\n```\n**Note**: `PyRedisDict` uses `cPickle` for custom objects.\n\n3. Iterations\n```python\ndef test_iterations():\n\n   d = PyRedisDict(namespace=\"mykeyspace2\")\n   d.clear()\n   d['mykey_none'] = None\n   d['mykey_int'] = 10\n   d['mykey_float'] = 20.131\n   d['array'] = [10, 20, 30]\n   d['hashmap'] = {'name': 'prasanna', 'meta': {'age': 24, 'hobbies': ['gaming']}}\n\n   # assert values\n   assert len(d) == 5\n   assert len(d.items()) == 5\n\n   # find by prefix\n   assert len(d.items_matching('mykey*')) == 3\n   d.clear()\n```\n\n4. Key deletion\n```python\ndef test_deletion():\n\n   d = PyRedisDict(namespace=\"mykeyspace3\")\n\n   d.clear()\n   d['x1'] = CustomClass()\n   d['x2'] = CustomClass()\n   d['x3'] = CustomClass()\n   d['x4'] = CustomClass()\n   d['x4'] = CustomClass()\n\n   assert 'x1' in d\n   del d['x1']\n\n   assert 'x1' not in d\n\n   d.clear()\n   assert len(d) == 0\n```\n\n5. Converting to/from dict\n```python\ndef test_conversions():\n   d = PyRedisDict(namespace=\"mykeyspace\")\n\n   d.clear()\n\n   d['mykey_none'] = None\n   d['mykey_int'] = 10\n   d['mykey_float'] = 20.131\n   d['array'] = [10, 20, 30]\n   d['hashmap'] = {'name': 'prasanna', 'meta': {'age': 24, 'hobbies': ['gaming']}}\n\n   assert len(d.to_dict()) == 5\n\n   normal_dict = {\"mykey_1\": 10, \"mykey_2\": 20, \"mykey_3\": \"hello\", \"array\": [50, 60, 70]}\n   d.update(normal_dict)\n\n   assert len(d) == (5 + 3) # another key is duplicate (array)\n   assert d['array'] == [50, 60, 70]\n   d.clear()\n```\n\n### Running tests\nThis project uses `pytest` for testing. Instal pytest and run `pytest` to validate tests, make sure you set-up Redis locally to test the process.\n\n### Contributions\nFeel free to try this library, suggest changes, raise issues, send PRs.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Narasimha1997/redis-pydict",
    "keywords": "python redis distributed-computing dict software-dev",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "redis-pydict",
    "package_url": "https://pypi.org/project/redis-pydict/",
    "platform": null,
    "project_url": "https://pypi.org/project/redis-pydict/",
    "project_urls": {
      "Homepage": "https://github.com/Narasimha1997/redis-pydict"
    },
    "release_url": "https://pypi.org/project/redis-pydict/0.0.1/",
    "requires_dist": [
      "redis"
    ],
    "requires_python": "",
    "summary": "A python dictionary that uses Redis as in-memory storage backend to facilitate distributed computing applications development.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14389046,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feb8ee190ecd2ad483d48b0cd3af148e38f9634e25cfc690a7bba3088170ca39",
          "md5": "9031f68ad0be2b42ae3bb8f6c2a970cd",
          "sha256": "b6ecadcfcbbdd8ba50d2f1dd2ab9cc81b864799fce4bcb5af576513bb11acce8"
        },
        "downloads": -1,
        "filename": "redis_pydict-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9031f68ad0be2b42ae3bb8f6c2a970cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5902,
        "upload_time": "2022-07-10T08:48:06",
        "upload_time_iso_8601": "2022-07-10T08:48:06.079455Z",
        "url": "https://files.pythonhosted.org/packages/fe/b8/ee190ecd2ad483d48b0cd3af148e38f9634e25cfc690a7bba3088170ca39/redis_pydict-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "feb8ee190ecd2ad483d48b0cd3af148e38f9634e25cfc690a7bba3088170ca39",
        "md5": "9031f68ad0be2b42ae3bb8f6c2a970cd",
        "sha256": "b6ecadcfcbbdd8ba50d2f1dd2ab9cc81b864799fce4bcb5af576513bb11acce8"
      },
      "downloads": -1,
      "filename": "redis_pydict-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9031f68ad0be2b42ae3bb8f6c2a970cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5902,
      "upload_time": "2022-07-10T08:48:06",
      "upload_time_iso_8601": "2022-07-10T08:48:06.079455Z",
      "url": "https://files.pythonhosted.org/packages/fe/b8/ee190ecd2ad483d48b0cd3af148e38f9634e25cfc690a7bba3088170ca39/redis_pydict-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}