{
  "info": {
    "author": "JSON Typedef Contributors",
    "author_email": "friends@jsontypedef.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# jtd: JSON Validation for Python\n\n[![PyPI](https://img.shields.io/pypi/v/jtd)](https://pypi.org/project/jtd)\n\n`jtd` is a Python implementation of [JSON Type Definition][jtd], a schema\nlanguage for JSON. `jtd` primarily gives you two things:\n\n1. Validating input data against JSON Typedef schemas.\n2. A Python representation of JSON Typedef schemas.\n\nWith this package, you can add JSON Typedef-powered validation to your\napplication, or you can build your own tooling on top of JSON Type Definition.\n\n## Installation\n\nYou can install this package with `pip`:\n\n```bash\npip install jtd\n```\n\n## Documentation\n\nDetailed API documentation is available online at:\n\nhttps://jtd.readthedocs.io\n\nFor more high-level documentation about JSON Typedef in general, or JSON Typedef\nin combination with Python in particular, see:\n\n* [The JSON Typedef Website][jtd]\n* [\"Validating JSON in Python with JSON Typedef\"][jtd-py-validation]\n\n## Basic Usage\n\n> For a more detailed tutorial and guidance on how to integrate `jtd` in your\n> application, see [\"Validating JSON in Python with JSON\n> Typedef\"][jtd-py-validation] in the JSON Typedef docs.\n\nHere's an example of how you can use this package to validate JSON data against\na JSON Typedef schema:\n\n```python\nimport jtd\n\nschema = jtd.Schema.from_dict({\n    'properties': {\n        'name': { 'type': 'string' },\n        'age': { 'type': 'uint32' },\n        'phones': {\n            'elements': {\n                'type': 'string'\n            }\n        }\n    }\n})\n\n# jtd.validate returns an array of validation errors. If there were no problems\n# with the input, it returns an empty array.\n\n# Outputs: []\nprint(jtd.validate(schema=schema, instance={\n  'name': 'John Doe',\n  'age': 43,\n  'phones': ['+44 1234567', '+44 2345678'],\n}))\n\n# This next input has three problems with it:\n#\n# 1. It's missing \"name\", which is a required property.\n# 2. \"age\" is a string, but it should be an integer.\n# 3. \"phones[1]\" is a number, but it should be a string.\n#\n# Each of those errors corresponds to one of the errors returned by validate.\n\n# Outputs:\n#\n# [\n#   ValidationError(\n#     instance_path=[], schema_path=['properties', 'name']\n#   ),\n#   ValidationError(\n#     instance_path=['age'], schema_path=['properties', 'age', 'type']\n#   ),\n#   ValidationError(\n#     instance_path=['phones', '1'], schema_path=['properties', 'phones', 'elements', 'type']\n#   ),\n# ]\nprint(jtd.validate(schema=schema, instance={\n  'age': \"43\",\n  'phones': [\"+44 1234567\", 442345678],\n}))\n```\n\n## Advanced Usage: Limiting Errors Returned\n\nBy default, `jtd.validate` returns every error it finds. If you just care about\nwhether there are any errors at all, or if you can't show more than some number\nof errors, then you can get better performance out of `jtd.validate` using the\n`max_errors` option.\n\nFor example, taking the same example from before, but limiting it to 1 error, we\nget:\n\n```python\n# Outputs:\n#\n# [ValidationError(instance_path=[], schema_path=['properties', 'name'])]\noptions = jtd.ValidationOptions(max_errors=1)\nprint(jtd.validate(schema=schema, options=options, instance={\n  'age': '43',\n  'phones': ['+44 1234567', 442345678],\n}))\n```\n\n## Advanced Usage: Handling Untrusted Schemas\n\nIf you want to run `jtd` against a schema that you don't trust, then you should:\n\n1. Ensure the schema is well-formed, using the `validate()` method on\n   `jtd.Schema`. That will check things like making sure all `ref`s have\n   corresponding definitions.\n\n2. Call `jtd.validate` with the `max_depth` option. JSON Typedef lets you write\n   recursive schemas -- if you're evaluating against untrusted schemas, you\n   might go into an infinite loop when evaluating against a malicious input,\n   such as this one:\n\n   ```json\n   {\n     \"ref\": \"loop\",\n     \"definitions\": {\n       \"loop\": {\n         \"ref\": \"loop\"\n       }\n     }\n   }\n   ```\n\n   The `max_depth` option tells `jtd.validate` how many `ref`s to follow\n   recursively before giving up and throwing `jtd.MaxDepthExceededError`.\n\nHere's an example of how you can use `jtd` to evaluate data against an untrusted\nschema:\n\n```python\nimport jtd\n\n# validate_untrusted returns true if `data` satisfies `schema`, and false if it\n# does not. Throws an error if `schema` is invalid, or if validation goes in an\n# infinite loop.\ndef validate_untrusted(schema, data):\n    schema.validate()\n\n    # You should tune max_depth to be high enough that most legitimate schemas\n    # evaluate without errors, but low enough that an attacker cannot cause a\n    # denial of service attack.\n    options = jtd.ValidationOptions(max_depth=32)\n    return len(jtd.validate(schema=schema, instance=data, options=options)) == 0\n}\n\n# Returns true\nvalidate_untrusted(jtd.Schema.from_dict({ 'type': 'string' }), 'foo')\n\n# Returns false\nvalidate_untrusted(jtd.Schema.from_dict({ 'type': 'string' }), None)\n\n# Throws \"invalid schema\"\nvalidate_untrusted(jtd.Schema.from_dict({ 'type': 'nonsense' }), 'foo')\n\n# Throws an instance of jtd.MaxDepthExceededError\nvalidate_untrusted({\n  \"ref\": \"loop\",\n  \"definitions\": {\n    \"loop\": {\n      \"ref\": \"loop\"\n    }\n  }\n}, None)\n```\n\n[jtd]: https://jsontypedef.com\n[jtd-py-validation]: https://jsontypedef.com/docs/python/validation",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jsontypedef/json-typedef-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jtd",
    "package_url": "https://pypi.org/project/jtd/",
    "platform": "",
    "project_url": "https://pypi.org/project/jtd/",
    "project_urls": {
      "Homepage": "https://github.com/jsontypedef/json-typedef-python"
    },
    "release_url": "https://pypi.org/project/jtd/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Python implementation of JSON Type Definition",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8238113,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f227d4bb60effd04d59041e5fc1c69efaefc96eecd309e22735134d272229b5b",
          "md5": "6f3ac1aeb46b3930adede1e54b14e107",
          "sha256": "87b27e4519c145c7a1b751352abe49cb361f5c2cfa314291841733424707c506"
        },
        "downloads": -1,
        "filename": "jtd-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f3ac1aeb46b3930adede1e54b14e107",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6781,
        "upload_time": "2020-07-10T23:58:16",
        "upload_time_iso_8601": "2020-07-10T23:58:16.595650Z",
        "url": "https://files.pythonhosted.org/packages/f2/27/d4bb60effd04d59041e5fc1c69efaefc96eecd309e22735134d272229b5b/jtd-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41ba0d4b0235783a3060ce14c262f6d270cbdc8fc59ed925309580ab5b6d8df5",
          "md5": "1cff291e29da045742a65dbae6d3be4a",
          "sha256": "37b990519be8eb15e27fef1a24fa7d98dc66f3e81fbf502f13353820035fe02f"
        },
        "downloads": -1,
        "filename": "jtd-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1cff291e29da045742a65dbae6d3be4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4528,
        "upload_time": "2020-07-10T23:58:19",
        "upload_time_iso_8601": "2020-07-10T23:58:19.795969Z",
        "url": "https://files.pythonhosted.org/packages/41/ba/0d4b0235783a3060ce14c262f6d270cbdc8fc59ed925309580ab5b6d8df5/jtd-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd9c760d7f364ce496f53534c06fb3edb160c6233f83346247df1da9e91f0fb8",
          "md5": "a6f98b076355ee8fc672994197f04aa5",
          "sha256": "1a49e426d4dddff7d3c1ae8b547b544ad9a6f25e47839e61ae941d786ba1bcb1"
        },
        "downloads": -1,
        "filename": "jtd-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a6f98b076355ee8fc672994197f04aa5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11051,
        "upload_time": "2020-09-18T18:43:51",
        "upload_time_iso_8601": "2020-09-18T18:43:51.586518Z",
        "url": "https://files.pythonhosted.org/packages/bd/9c/760d7f364ce496f53534c06fb3edb160c6233f83346247df1da9e91f0fb8/jtd-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05eead8b9b899025761abdec2d10a69ae16fe7d3a8f239b23d841fc1e4b80414",
          "md5": "1b547710d3256e12795d64cda937d6b3",
          "sha256": "12abb97806644c14e74ceed2e875efdaee72620769bb0529e9c584a99e8d48ab"
        },
        "downloads": -1,
        "filename": "jtd-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b547710d3256e12795d64cda937d6b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10801,
        "upload_time": "2020-09-21T21:08:50",
        "upload_time_iso_8601": "2020-09-21T21:08:50.822922Z",
        "url": "https://files.pythonhosted.org/packages/05/ee/ad8b9b899025761abdec2d10a69ae16fe7d3a8f239b23d841fc1e4b80414/jtd-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05eead8b9b899025761abdec2d10a69ae16fe7d3a8f239b23d841fc1e4b80414",
        "md5": "1b547710d3256e12795d64cda937d6b3",
        "sha256": "12abb97806644c14e74ceed2e875efdaee72620769bb0529e9c584a99e8d48ab"
      },
      "downloads": -1,
      "filename": "jtd-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1b547710d3256e12795d64cda937d6b3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10801,
      "upload_time": "2020-09-21T21:08:50",
      "upload_time_iso_8601": "2020-09-21T21:08:50.822922Z",
      "url": "https://files.pythonhosted.org/packages/05/ee/ad8b9b899025761abdec2d10a69ae16fe7d3a8f239b23d841fc1e4b80414/jtd-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}