{
  "info": {
    "author": "Hovhannes Dabaghyan",
    "author_email": "hovhannes.dabaghyan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Rate limiter with distributed execution support\n=================================================\n\n`nekkar` is a tool for limiting requests to particular service or to particular endpoint of the service.\n> The original idea was to create a rate limiter for HTTP APIs. But some kind of wrapper was needed to distinguish the endpoints and in current implementation it uses functions/callables.\n\n> You wrap something in a function and give it a name/identifier with a decorator. All functions with the same name/identifier will share the rate limit.\n\n> You can use it without making HTTP requests, and control the function calls rate limits. Though, I don't know any useful use cases for it.\n\n#### Typical use cases for this tool\n\n- Scheduled process which does lot of requests in the background.\n\n#### Use cases when this tool should be used carefully\n\n- When user is waiting for a response from the server, and this tool locks the process and is waiting for a window to not exceed rate limits.\n\n\n##### Original use case\n\nThere were a process which was processing data in batches, for each record it was doing requests to a third party service(call it Service-S) by HTTP.\nThough it was easy to track the rate at which the process sends requests to the Service-S and control it, it was naive and not scalable.\nNaive - because, if for some reason there were another process which works with the Service-S then there could be rate limit violation.\nNot scalable - because, if there where another instance that runs similar process then there could be rate limit violation.\n\n\n### Prerequisites\n- You should have cache installed and accessible from all clients/executors.\n\n\n## Installation\n```bash\n$ pip install nekkar\n```\n\n## Usage\nWrap function and set rate limit to 100.\n```python\nfrom nekkar.core.limiter import Nekkar\nfrom nekkar.core.cache import MemcachedCache\n\n\n# Create a cache object by providing address and port of the cache.\ncache = MemcachedCache(\"localhost\", 11211)\nlimiter = Nekkar(cache=cache)\n\n\n@limiter(name=\"some_id\", rate_limit=100)\ndef do_something():\n    \"\"\"Do some request or useful stuff.\"\"\"\n\n```\n\n\nLets say rate limit works per endpoint, despite of request method.\nFor example if rate limit for endpoint '**/a**' it 100, and for endpoint '**/b**' rate limit it is 250.\nThen code which controls the rate limit could be similar to following:\n```python\nimport requests\n\nfrom nekkar.core.limiter import Nekkar\nfrom nekkar.core.cache import MemcachedCache\n\n\ncache = MemcachedCache(\"localhost\", 11211)\nlimiter = Nekkar(cache=cache)\n\n\n@limiter(name=\"some_id_a\", rate_limit=100)\ndef update_a(data):\n    return requests.patch(\"http://localhost:8000/a\", json=data, timeout=0.1)\n\n\n# name=\"some_id_a\" identifies that update_a and get_a will share the same rate limit.\n@limiter(name=\"some_id_a\", rate_limit=100)\ndef get_a():\n    return requests.get(\"http://localhost:8000/a\", timeout=0.1)\n\n\n# get_b will not share rate limit with others because it has another name/identifier.\n@limiter(name=\"another_id_b\", rate_limit=250)\ndef get_b(data):\n    return requests.patch(\"http://localhost:8000/b\", json=data, timeout=0.1)\n\n\nfor i in range(100):\n    get_a()\n```\n\n\n#### Cache configuration\nAny cache could be used for this tool until it implements the `nekkar.core.cache.BaseCache` interface.\n`MemcachedCache` is already implemented, but you can derive a class from BaseCache and implement similar for your desired cache.\n\n**Important**: BaseCache.add() - method should set the key value only if the value is not already set, otherwise rate limiter will not work properly. To validate this you can add a test case similar to nekkar/tests/integration/test_cache.\n\n\n#### How does it work and why do you need a cache?\nThe system tracks two \"tables\". One for storing when the callables was called, and another for locking the access to the first table records.\n\n![Alt text](assets/crt_crt_lock.png?raw=true \"CRT and CRT-Lock\")\n\nThe storage that will be used to store table information should have two main characteristics.\n- It should be accessible from different instances, for scalability.\n- It should have \"test-and-set\" operation, to avoid race conditions.\n\nAs cache provides those two characteristics - it fits for the purpose. Also caches are quire fast.\nAlthough, any storage could be used if it supports the main two requirements.\n\n##### How the rate limit is controlled\nWhen a callable is being called the system(wrapper function) starts trying to acquire a lock for a CRT record(with corresponding name/id).\n\nWhen it successfully acquires the lock, it reads the record from CRT table and checks whether there is a \"window\" for a call.\n(We say that there is a window for a call if executing the callable will not exceed the rate limit.)\n\nIf there is a window, then CRT record is updated and saved. CRT lock is released and the function/callable finally executes.\n\nIf there is no window, then CRT record is leaved unchanged. CRT lock is released and the system starts trying to acquire the lock again after a random sleep time.\n\n\n#### Examples\nExample 1:\n2 processes.\nEach doing 50 calls.\nRate limit - 60.\nInterval - None/Not specified.\nEach call takes 100ms approximately.\n![Alt text](assets/concurrent_2_50_60_None.png?raw=true \"CRT and CRT-Lock\")\n\nExample 2:\n2 processes.\nEach doing 50 calls.\nRate limit - 60.\nInterval - 0.\nEach call takes 100ms approximately.\n![Alt text](assets/concurrent_2_50_60_0.png?raw=true \"CRT and CRT-Lock\")\n\nExample 3:\n3 processes.\nEach doing 50 calls.\nRate limit - 600.\nInterval - None/Not specified.\nEach call takes 100ms approximately.\n![Alt text](assets/concurrent_3_50_600_None.png?raw=true \"CRT and CRT-Lock\")\n\nExample 4:\n3 processes.\nEach doing 50 calls.\nRate limit - 600.\nInterval - 0.\nEach call takes 100ms approximately.\n![Alt text](assets/concurrent_3_50_600_0.png?raw=true \"CRT and CRT-Lock\")\n\n\n#### Known issues\n- Complicated interface\n- Possible side effects for two functions with the same name/identifier and different rate limits.\n- Bad randomisation, non-fair resource distribution.\n- Needs cache for processes. On a single instance there could be a another storage rather than a cache.\n- Needs cache even for threads. It could be done without cache.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hovodab/nekkar",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nekkar",
    "package_url": "https://pypi.org/project/nekkar/",
    "platform": "",
    "project_url": "https://pypi.org/project/nekkar/",
    "project_urls": {
      "Bug Tracker": "https://github.com/hovodab/nekkar/issues",
      "Homepage": "https://github.com/hovodab/nekkar"
    },
    "release_url": "https://pypi.org/project/nekkar/0.0.1/",
    "requires_dist": [
      "pymemcache (==3.5.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Rate limiter",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12424218,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f499f1f2da15b1d54588fd4b7895d5cac7e9d9193ae087988411b93b365f0afb",
          "md5": "c976a056a818bc829d4b6a40c9da567c",
          "sha256": "61ac3ae4e3fe57109d0f134fc468d39676f85fe04839fe7e4adeff0a63fc4b13"
        },
        "downloads": -1,
        "filename": "nekkar-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c976a056a818bc829d4b6a40c9da567c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14584,
        "upload_time": "2021-12-28T17:22:21",
        "upload_time_iso_8601": "2021-12-28T17:22:21.462033Z",
        "url": "https://files.pythonhosted.org/packages/f4/99/f1f2da15b1d54588fd4b7895d5cac7e9d9193ae087988411b93b365f0afb/nekkar-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea4040bebbf8efecfe1ef2e95a88e5027c1196791d76b3d9726751b416eddd05",
          "md5": "ac1065df9e3a7661a6ce5a538c115588",
          "sha256": "1706601e6f8146622de4c6e2487321d94981c469705cc9efd708e3ff625925bf"
        },
        "downloads": -1,
        "filename": "nekkar-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac1065df9e3a7661a6ce5a538c115588",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 83141,
        "upload_time": "2021-12-28T17:22:23",
        "upload_time_iso_8601": "2021-12-28T17:22:23.379514Z",
        "url": "https://files.pythonhosted.org/packages/ea/40/40bebbf8efecfe1ef2e95a88e5027c1196791d76b3d9726751b416eddd05/nekkar-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f499f1f2da15b1d54588fd4b7895d5cac7e9d9193ae087988411b93b365f0afb",
        "md5": "c976a056a818bc829d4b6a40c9da567c",
        "sha256": "61ac3ae4e3fe57109d0f134fc468d39676f85fe04839fe7e4adeff0a63fc4b13"
      },
      "downloads": -1,
      "filename": "nekkar-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c976a056a818bc829d4b6a40c9da567c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14584,
      "upload_time": "2021-12-28T17:22:21",
      "upload_time_iso_8601": "2021-12-28T17:22:21.462033Z",
      "url": "https://files.pythonhosted.org/packages/f4/99/f1f2da15b1d54588fd4b7895d5cac7e9d9193ae087988411b93b365f0afb/nekkar-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea4040bebbf8efecfe1ef2e95a88e5027c1196791d76b3d9726751b416eddd05",
        "md5": "ac1065df9e3a7661a6ce5a538c115588",
        "sha256": "1706601e6f8146622de4c6e2487321d94981c469705cc9efd708e3ff625925bf"
      },
      "downloads": -1,
      "filename": "nekkar-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ac1065df9e3a7661a6ce5a538c115588",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 83141,
      "upload_time": "2021-12-28T17:22:23",
      "upload_time_iso_8601": "2021-12-28T17:22:23.379514Z",
      "url": "https://files.pythonhosted.org/packages/ea/40/40bebbf8efecfe1ef2e95a88e5027c1196791d76b3d9726751b416eddd05/nekkar-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}