{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Numba Namespace Extension\n\nThe idea of this package is to facilitate the creation of compiled numba extensions **without** \nmodifying the original code implementation. The recommended approach is to use python namespaces so that\nwe can have the compiled version of the main package with the same access pattern. This looks like the following:\n\n* Have the original package in a namespace module called `my_package`:\n\n```commandline\n$ pip install -e my_package\n```\n\n```python\nfrom my_package.utils import my_function\n```\n\n```text\nSimple main package configuration using `my_package` namespace.\n├── setup.py\n├── README.md\n└── src\n    └──my_package\n        └── utils.py\n```\n\n* Create a compiled version of the functions of the original package, in an independent python package using the same\n`my_pacakge` namespace.\n\n```commandline\n$ pip install -e my_package_compiled\n```\n\n```python\nfrom my_package.compiled.utils import my_function\n```\n\n```text\nSimple compiled package configuration using `my_package` namespace.\n├── setup.py\n├── README.md\n├── registry.json\n└── src\n    └──my_package\n        └── compiled\n            └── __init__.py\n```\n\nBy following the namespace suggestion, you can keep your original code in the `my_package` library and have an extra\nindependent python package with the compiled version but sharing the same access point (namespace).\n\nShared configuration between `my_package` and `my_package_compiled`:\n* They both use a `my_package` namespace. In practice, this means that there's no `__init__.py` on under the\n`my_package` directory.\n* They are probably using the `setuptools.find_namespace_packages` function in the `setup.py` file.\n\nDifferences between the `my_package` and `my_package_compiled` implementations:\n* The `my_package_compiled` library depends on already having the `my_pacakge` library installed.\n* The `registry.json` file contains the information needed for the numba compiler (for each function).\n* The `my_package_compiled` does not has custom-made code; only the compiled version of the functions defined in the\n`registry.json` file.\n\n\n**What are python namespace packages?** In short, namespace modules are like regular python modules but\nwithout the `__init__.py` file. This allows you to share the same \"module name\" among different packages.\nConsider the following example:\n\n* Shared namespace: `my_package`\n* Package 1 (`package-1`): Implement hello world in english\n* Package 2 (`package-2`): Implement hello world in spanish\n\n**Package 1**: contains a `hello_world.py` python submodule within the `my_package` namespace.\n\n``` \nREADME.md\nsetup.py\nsrc/\n    my_package/\n        hello_world.py\n```\n\n**Package 2**: contains a `hola_mundo.py` python submodule within the `my_package` namespace.\n\n``` \nREADME.md\nsetup.py\nsrc/\n    my_package/\n        hola_mundo.py\n```\n\n**Expected behavior**: you can install each package independently. Nonetheless, they will share a common namespace. \nTake a look at a complete working implementation [here](https://github.com/RHDZMOTA/python-namespace-example).\n\nLearn more about namespace packages:\n* In this [twitter thread](https://twitter.com/RHDZMOTA/status/1456338113983299584).\n* From the [documentation](https://packaging.python.org/guides/packaging-namespace-packages/).\n\n## Installation\n\nYou can install this package via `pip` by running:\n\n```commandline\n$ pip install numba_namespace_extension\n```\n\nAlternatively, for development installation, clone this repo and run:\n\n```commandline\n$ pip install -e .\n```\n\n## Usage\n\nThe suggested usage is to create a python package with a matching namespace to the library with the original code.\nYou can do this by manually creating the new package or leveraging our cookiecutter template with a minimal\npython namespace package setup.\n\nInstall cookiecutter (i.e., `pip install cookiecutter`) and execute the template:\n\n**(Option 1)** Referencing Github:\n\n```commandline\ncookiecutter https://github.com/RHDZMOTA/numba-namespace-extension.git\n```\n\n**(Option 2)** Or locally if you have this repo already cloned:\n\n```commandline\ncookiecutter path/to/repo\n```\n\nYou can now start registering functions in the `registry.json` file. For each function, provide the following:\n* `module (str)`: the module name where the original function is located.\n* `function_name (str)`: the original function name.\n* `signature`: the numba type signature (read more this [here](https://numba.pydata.org/numba-doc/dev/reference/types.html)).\n\nCompilation is done when installing your package. You can install it locally by running:\n* Replace `path/to/my_package` with the full or relative path to your package (i.e., directory where the `setup.py` is located).\n\n```commandline\npip install -e path/to/my_package\n```\n\nKey components:\n* The `Registry` class is basically a wrapper over the [Numba AOT](https://numba.pydata.org/numba-doc/dev/user/pycc.html)\n  implementation that allows us to define source functions on the configuration file (i.e., `registry.json`)\n* Use the `from_json` static method to create a `Registry` instance referencing the json config file.\n* Once you have an instance, run the `ext_modules` and pass the result to the `ext_modules` argument from the `setup` function.\n* Consider that all the modules referenced by the `registry.json` file MUST be available in the installation runtime.\n\nExample of minimal `setup.py` file:\n\n```python\nfrom setuptools import setup, find_namespace_packages\nfrom numba_namespace_extension.registry import Registry\n\nsetup(\n    name=\"<package-name>\",\n    version=\"0.1.0\",\n    packages=find_namespace_packages(where=\"src\"),\n    package_dir={\n        \"\": \"src\"\n    },\n    ext_modules=Registry.from_json(\"registry.json\").ext_modules()\n)\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "numba-namespace-extension",
    "package_url": "https://pypi.org/project/numba-namespace-extension/",
    "platform": "",
    "project_url": "https://pypi.org/project/numba-namespace-extension/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/numba-namespace-extension/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Easily create compiled namespace Numba extensions.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11957146,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17f3d0502bde2de8773fc117910813b0fe2651bd4954f0bbf53e9bfd4c99bf84",
          "md5": "25da2e0f0d38ff26f0c6bc8afc07ad4b",
          "sha256": "e01b22f0b292dadfc00d758224f86e6819c1bbac1876dbb5f9c8c828d7c09e2a"
        },
        "downloads": -1,
        "filename": "numba_namespace_extension-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "25da2e0f0d38ff26f0c6bc8afc07ad4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5012,
        "upload_time": "2021-11-08T04:45:42",
        "upload_time_iso_8601": "2021-11-08T04:45:42.736891Z",
        "url": "https://files.pythonhosted.org/packages/17/f3/d0502bde2de8773fc117910813b0fe2651bd4954f0bbf53e9bfd4c99bf84/numba_namespace_extension-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17f3d0502bde2de8773fc117910813b0fe2651bd4954f0bbf53e9bfd4c99bf84",
        "md5": "25da2e0f0d38ff26f0c6bc8afc07ad4b",
        "sha256": "e01b22f0b292dadfc00d758224f86e6819c1bbac1876dbb5f9c8c828d7c09e2a"
      },
      "downloads": -1,
      "filename": "numba_namespace_extension-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "25da2e0f0d38ff26f0c6bc8afc07ad4b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5012,
      "upload_time": "2021-11-08T04:45:42",
      "upload_time_iso_8601": "2021-11-08T04:45:42.736891Z",
      "url": "https://files.pythonhosted.org/packages/17/f3/d0502bde2de8773fc117910813b0fe2651bd4954f0bbf53e9bfd4c99bf84/numba_namespace_extension-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}