{
  "info": {
    "author": "Chase Brewer",
    "author_email": "chasebrewsky@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# ScryWarden\n\nScryWarden is a framework for detecting anomalies in general datasets through the use of behavioral models. The library provides simple interfaces to design behavioral profiles, to pull messages from datasets, and to report on found anomalies. Its also engineered to horizontally scale as needed for larger datasets.\n\nIt aims to be an accessible anomaly detection method that doesn't require any advanced knowledge on the topic while also allowing those with relevant knowledge to extend it for their needs.\n\n## Getting Started\n\nScrywarden requires python 3.6 or greater.\n\nThe first thing to do is install the application through pip.\n\n```commandline\n$ pip install scrywarden\n```\n\nThis will install a CLI command in your path called `scrywarden`. Try it out by typing `scrywarden --help`.\n\n```\n$ scrywarden --help\nUsage: scrywarden [OPTIONS] COMMAND [ARGS]...\n\n  Detects anomalies in datasets using behavioral modeling.\n\nOptions:\n  -c, --config TEXT  Path to the config file to use.  [default:\n                     scrywarden.yml]\n\n  --help             Show this message and exit.\n\nCommands:\n  collect      Collect messages to populate behavioral profiles.\n  investigate  Investigate current anomalies to find malicious activity.\n```\n\nThe application depends on PostgreSQL as a database backend. If you use docker, the following docker compose configuration will setup an instance matching the default configurations of the application.\n\n```yaml\nversion: \"3.2\"\n\nservices:\n  postgres:\n    image: \"postgres\"\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_PASSWORD: \"scrywarden\"\n      POSTGRES_USER: \"scrywarden\"\n      POSTGRES_DB: \"scrywarden\"\n```\n\nThe application is controlled through a configuration file. By default, it looks in your current directory for a file named `scrywarden.yml`. The following is an example of a valid configuration file;\n\n```yaml\ndatabase:\n  host: \"localhost\"\n  port: 5432\n  name: \"scrywarden\"\n  user: \"scrywarden\"\n  password: \"scrywarden\"\n\ntransports:\n  heartbeat:\n    class: \"scrywarden.transport.heartbeat.MixedHeartbeatTransport\"\n\nprofiles:\n  example:\n    class: \"scrywarden.profile.example.ExampleProfile\"\n    collector:\n      class: \"scrywarden.profile.collectors.TimeRangeCollector\"\n    analyzer:\n      class: \"scrywarden.profile.analyzers.ExponentialDecayAnalyzer\"\n\nshippers:\n  csv:\n    class: \"scrywarden.shipper.csv.CSVShipper\"\n\npipeline:\n  queue_size: 500\n  timeout: 10\n```\n\nLets break down what each sections does.\n\n### Database Connection\n\n```yaml\ndatabase:\n  host: \"localhost\"\n  port: 5432\n  name: \"scrywarden\"\n  user: \"scrywarden\"\n  password: \"scrywarden\"\n```\n\nThis section configures the connection to the PostgreSQL database. These are the default settings when starting scrywarden. Change these to match your database setup if necessary. These can be omitted if the database settings match the defaults.\n\n### Transports\n\n```yaml\ntransports:\n  heartbeat:\n    class: \"scrywarden.transport.heartbeat.MixedHeartbeatTransport\"\n```\n\nTransports are one or more classes that are responsible for pulling data from datasets so they can be read by the application. The transports transform the dataset into a series of JSON messages. Each transport is named by its key in the config. This one is named `heartbeat`.\n\nThe `class` field defines which python class to use for this transport. This one is using in the builtin `MixedHeartbeatTransport` class. This class sends a series of test messages at a set interval. It defaults to sending the following JSON messages every 5 seconds:\n\n```json\n{\"person\": \"George\", \"greeting\": \"hello\"}\n{\"person\": \"Ben\", \"greeting\": \"howdy\"}\n{\"person\": \"Susan\", \"greeting\": \"salutations\"}\n```\n\nThe interval and messages can both be configured by the following setup:\n\n```yaml\ntransports:\n  heartbeat:\n    class: \"scrywarden.transport.heartbeat.MixedHeartbeatTransport\"\n    config:\n      interval: 5\n      data:\n      - '{\"person\": \"George\", \"greeting\": \"Whats up?\"}'\n      - '{\"person\": \"Melvin\", \"greeting\": \"Cool\"}'\n```\n\nOther transports can be configured the same way by setting config values in the `config` field.\n\n### Profile\n\n```yaml\nprofiles:\n  example:\n    class: \"scrywarden.profile.example.ExampleProfile\"\n    collector:\n      class: \"scrywarden.profile.collectors.TimeRangeCollector\"\n    analyzer:\n      class: \"scrywarden.profile.analyzers.ExponentialDecayAnalyzer\"\n```\n\nThis section defines how a behavioral profile detects anomalies. Lets break down the individual parts of this config.\n\n#### Behavioral Profile\n\n```yaml\nprofiles:\n  example:\n    class: \"scrywarden.profile.example.ExampleProfile\"\n```\n\nThis imports a profile named `example` using the class `scrywarden.profile.example.ExampleProfile`. This is a built in example profile that combines well with the default heartbeat transports.\n\n```python\nfrom scrywarden.profile import fields, Profile, reporters\nfrom scrywarden.transport.message import Message\n\n\nclass ExampleProfile(Profile):\n    greeting = fields.Single('greeting', reporter=reporters.Mandatory())\n\n    def matches(self, message: Message) -> bool:\n        \"\"\"Determines if the message matches the profile.\"\"\"\n        return 'greeting' in message\n\n    def get_actor(self, message: Message) -> str:\n        \"\"\"Pulls the actor name from the message.\"\"\"\n        return message.get('person')\n```\n\nThis behavioral profile outlines a couple of things.\n\nThe `matches` method determines if a particular message from a transport matches the behavioral profile. This checks to see if the `greeting` field is in the message. If this profile receives the message `{\"person\": \"George\", \"greeting\": \"hello\"}` then it would match, but if it was `{\"person\": \"George\"}` then it would be skipped.\n\nThe `get_actor` pulls out the actor name of the message. Actors are unique identifiers to build behavioral profiles for. In this example, it's pulling out the person who is associated with the greeting. If it receives `{\"person\": \"George\", \"greeting\": \"hello\"}` then the actor name would be `\"George\"`.\n\nThe class attribute `greeting` defines a feature of the profile that keeps track of the values in the `greeting` field of the each message. For example, if the message `{\"person\": \"George\", \"greeting\": \"hello\"}` is received, then it tracks it on the backend as:\n\n| actor  | field    | value   | count |\n|--------|----------|---------|-------|\n| George | greeting | \"hello\" | 1     |\n\nIf it receives the same value again, it increments this count.\n\n| actor  | field    | value   | count |\n|--------|----------|---------|-------|\n| George | greeting | \"hello\" | 2     |\n\nIf another value comes across, such as `{\"person\": \"George\", \"greeting\": \"howdy\"}` then it tracks it as a separate feature.\n\n| actor  | field    | value   | count |\n|--------|----------|---------|-------|\n| George | greeting | \"hello\" | 2     |\n| George | greeting | \"howdy\" | 1     |\n\nThese features are used to calculate the anomaly scores of each incoming message. How these scores are calculated is dictated by the `reporter` defined on the field. The `greeting` field is calculated by the `Mandatory` reporter. This reporter checks the likelihood of the feature value compared to the average of all the other features. So if it received `{\"person\": \"George\", \"greeting\": \"hello\"}` then it would receive an anomaly score of 0 because the count 2 is higher than the total average of 1.5. If it received a new value like `{\"person\": \"George\", \"greeting\": \"What's up?\"}` it would receive an anomaly score of 1 because it's never seen it before.\n\nAnomaly scores are always between 0 and 1, with values closer to 1 being more anomalous. These anomaly scores are stored to be analyzed later for malicious activity.\n\n#### Collector\n\n```yaml\nprofiles:\n  example:\n    ...\n    collector:\n      class: \"scrywarden.profile.collectors.TimeRangeCollector\"\n```\n\nThis associates the collector `scrywarden.profile.collectors.TimeRangeCollector` class to the `example` profile. The collector determines how anomalies related to the profile are fetched for analysis.\n\nThe given collector selects anomalies to analyze over a given time range. By default, it looks at anomalies in periods of one minute chunks. This can be configured with the following configuration:\n\n```yaml\nprofiles:\n  example:\n    ...\n    collector:\n      class: \"scrywarden.profile.collectors.TimeRangeCollector\"\n      config:\n        seconds: 30\n```\n\nNow it will pull anomalies in 30 second chunks.\n\n#### Analyzer\n\n```yaml\nprofiles:\n  example:\n    ...\n    analyzer:\n      class: \"scrywarden.profile.analyzers.ExponentialDecayAnalyzer\"\n```\n\nThis associates the analyzer `scrywarden.profile.analyzers.ExponentialDecayAnalyzer` class to the `example` profile. The analyzer determines if any anomalies collected from the collector are malicious. This analyzer tries to detect large groups of messages with higher anomaly scores while filtering out smaller groups.\n\n### Shippers\n\n```yaml\nshippers:\n  csv:\n    class: \"scrywarden.shipper.csv.CSVShipper\"\n```\n\nShippers are classes responsible for handling the malicious anomalies found by the analyzers. This one saves the malicious anomalies to a CSV file. By default, it saves it to a file called `alerts.csv` in the current directory. This can be set by modifying the config.\n\n```yaml\nshippers:\n  csv:\n    class: \"scrywarden.shipper.csv.CSVShipper\"\n    config:\n      filename: 'anomalies.csv'\n```\n\nNow it will save them in a file called `anomalies.csv` in the current directory.\n\n### Pipeline\n\n```yaml\npipeline:\n  queue_size: 500\n  timeout: 10\n```\n\nThe pipeline is responsible for passing the messages from the transports to the behavioral profiles. By default it will process messages either when the queue is filled with 500 messages or if 10 seconds have passed since the first message was put in the queue. These can be configured to be different here.\n\n### Start Collecting\n\nWith the previous config, messages can start to be collected from the heartbeat transport to the example profile. This is done by running `scrywarden collect`.\n\n```commandline\n$ scrywarden collect\nINFO Pipeline starting\nINFO Sending heartbeat message {'person': 'George', 'greeting': 'hello'}\nINFO Sending heartbeat message {'person': 'Ben', 'greeting': 'howdy'}\nINFO Sending heartbeat message {'person': 'Susan', 'greeting': 'salutations'}\nINFO Sending heartbeat message {'person': 'George', 'greeting': 'hello'}\nINFO Sending heartbeat message {'person': 'Ben', 'greeting': 'howdy'}\nINFO Sending heartbeat message {'person': 'Susan', 'greeting': 'salutations'}\nINFO Processing 6 messages\nINFO 6 messages identified between 1 profiles in 0.01 seconds\nINFO 3 actors upserted in 0.01 seconds\nINFO 3 actors fetched in 0.01 seconds\nINFO 0 features fetched in 0.00 seconds\nINFO 6 values processed between 1 profiles in 0.08 seconds\nINFO 3 features updated in 0.01 seconds\nINFO 3 features fetched in 0.00 seconds\nINFO 3 messages upserted in 0.01 seconds\nINFO 3 events created in 0.00 seconds\nINFO 3 event anomalies created in 0.00 seconds\nINFO Pipeline process took 0.18 seconds\n```\n\nYou can see from the logs that the heartbeat went off twice in the 10 second timeout it takes for the pipeline to process messages. After that timeout, it passes the message to the profiles for processing. It does the following steps:\n\n* Identifies and saves the three actors George, Ben, and Susan.\n* Pulls the values for each message and checks to see if any matching features exist.\n* Generates anomaly scores for the given message values.\n* Generates 3 events with 1 associated anomaly each.\n\nNotice how it only generates 3 events instead of 6. This is because after the first loop, the previous features are already recorded, so seeing them again is not anomalous.\n\nLet's run the next step to see how these events are rated based on anomalies.\n\n### Start investigating\n\nSince we now have anomalies in the database, we can analyze them to check for malicious behavior. This is done by running `scrywarden investigate`.\n\n```commandline\n$ scrywarden investigate\nINFO Creating initial investigation\nINFO Fetching events between 2020-12-04 00:30:45.318094 and 2020-12-04 00:31:45.318094\nINFO 3 anomalies collected in 0.12 seconds\nINFO 3 events assigned to investigation 1 in 0.00 seconds\nINFO 3 malicious anomalies found in 0.02 seconds\nINFO Investigation completed in 0.20 seconds\nINFO Writing 3 anomalies to 'alerts.csv'\n```\n\nAfter checking the CSV, the following is found:\n\n|event_id|message_id                          |actor_id|created_at                |anomaly_id|field_id|score|\n|--------|------------------------------------|--------|--------------------------|----------|--------|-----|\n|1       |adb85c93-eced-44ba-b4e6-05cae3a98e3e|1       |2020-12-04 00:30:45.318473|1         |1       |1.0  |\n|2       |0f015287-3920-4eb5-969a-37b4f65233f8|2       |2020-12-04 00:30:45.318613|2         |1       |1.0  |\n|3       |0f015287-3920-4eb5-969a-37b4f65233f8|3       |2020-12-04 00:30:45.318613|3         |1       |1.0  |\n\nThe analyzer found that three anomalies were found to be malicious out of three.\n\n## Documentation\n\nFurther documentation is coming soon.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chasebrewsky/scrywarden",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scrywarden",
    "package_url": "https://pypi.org/project/scrywarden/",
    "platform": "",
    "project_url": "https://pypi.org/project/scrywarden/",
    "project_urls": {
      "Homepage": "https://github.com/chasebrewsky/scrywarden"
    },
    "release_url": "https://pypi.org/project/scrywarden/0.1.1/",
    "requires_dist": [
      "click (==7.1.*)",
      "orjson (==3.4.*)",
      "PyYAML (==5.3.*)",
      "pandas (==1.1.*)",
      "psycopg2 (==2.8.*)",
      "SQLAlchemy (==1.3.*)"
    ],
    "requires_python": ">=3.6",
    "summary": "Detect anomalies in datasets using behavioral modeling",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8874233,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0f46cfe55f327d7fea6dfdd1315cc3152f84fb12460719cef2780c516859a7b",
          "md5": "6c9b2c8ef3ae684de958de2f67be3176",
          "sha256": "815a6b10eda5318167c94b9fb7340f4ebaa91b67bbcab6855bf5fd131bfc9138"
        },
        "downloads": -1,
        "filename": "scrywarden-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c9b2c8ef3ae684de958de2f67be3176",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59344,
        "upload_time": "2020-12-04T06:52:22",
        "upload_time_iso_8601": "2020-12-04T06:52:22.516947Z",
        "url": "https://files.pythonhosted.org/packages/c0/f4/6cfe55f327d7fea6dfdd1315cc3152f84fb12460719cef2780c516859a7b/scrywarden-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67fa75b1ea4bb8440706a90169d39cf39c98997f7d565f7058517f1bd144d6e6",
          "md5": "bc84e29e1108c20b79903732721cd3e1",
          "sha256": "40d4d7fd2ec7a6b5e31281957af63eda64150321a3827d3f874bd0c2b7c30e85"
        },
        "downloads": -1,
        "filename": "scrywarden-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bc84e29e1108c20b79903732721cd3e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47837,
        "upload_time": "2020-12-04T06:52:23",
        "upload_time_iso_8601": "2020-12-04T06:52:23.772327Z",
        "url": "https://files.pythonhosted.org/packages/67/fa/75b1ea4bb8440706a90169d39cf39c98997f7d565f7058517f1bd144d6e6/scrywarden-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0b6f23f2f5163b0dcad090310fb53fb4f4a64c3f88f38b4ee2f185bdd1ce5d8",
          "md5": "afc2419f10d810cc2081f3c12c9300ff",
          "sha256": "2288ef34ec1dab176187c923250261e34a850581dd0ce16900963f8da63d6a1b"
        },
        "downloads": -1,
        "filename": "scrywarden-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afc2419f10d810cc2081f3c12c9300ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59392,
        "upload_time": "2020-12-11T05:41:21",
        "upload_time_iso_8601": "2020-12-11T05:41:21.298658Z",
        "url": "https://files.pythonhosted.org/packages/a0/b6/f23f2f5163b0dcad090310fb53fb4f4a64c3f88f38b4ee2f185bdd1ce5d8/scrywarden-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b1abf859da44f1828555a05fee81bdabac17ab8d0ce9e76a035d31e105c0315",
          "md5": "ae46300a4189bf7bc0736c23ea7e0b09",
          "sha256": "40db6fa2e976de4a075314b6b6412afad48793a07607c765cf4bddb50a0348f3"
        },
        "downloads": -1,
        "filename": "scrywarden-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae46300a4189bf7bc0736c23ea7e0b09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47985,
        "upload_time": "2020-12-11T05:41:22",
        "upload_time_iso_8601": "2020-12-11T05:41:22.579892Z",
        "url": "https://files.pythonhosted.org/packages/3b/1a/bf859da44f1828555a05fee81bdabac17ab8d0ce9e76a035d31e105c0315/scrywarden-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0b6f23f2f5163b0dcad090310fb53fb4f4a64c3f88f38b4ee2f185bdd1ce5d8",
        "md5": "afc2419f10d810cc2081f3c12c9300ff",
        "sha256": "2288ef34ec1dab176187c923250261e34a850581dd0ce16900963f8da63d6a1b"
      },
      "downloads": -1,
      "filename": "scrywarden-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "afc2419f10d810cc2081f3c12c9300ff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 59392,
      "upload_time": "2020-12-11T05:41:21",
      "upload_time_iso_8601": "2020-12-11T05:41:21.298658Z",
      "url": "https://files.pythonhosted.org/packages/a0/b6/f23f2f5163b0dcad090310fb53fb4f4a64c3f88f38b4ee2f185bdd1ce5d8/scrywarden-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b1abf859da44f1828555a05fee81bdabac17ab8d0ce9e76a035d31e105c0315",
        "md5": "ae46300a4189bf7bc0736c23ea7e0b09",
        "sha256": "40db6fa2e976de4a075314b6b6412afad48793a07607c765cf4bddb50a0348f3"
      },
      "downloads": -1,
      "filename": "scrywarden-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ae46300a4189bf7bc0736c23ea7e0b09",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 47985,
      "upload_time": "2020-12-11T05:41:22",
      "upload_time_iso_8601": "2020-12-11T05:41:22.579892Z",
      "url": "https://files.pythonhosted.org/packages/3b/1a/bf859da44f1828555a05fee81bdabac17ab8d0ce9e76a035d31e105c0315/scrywarden-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}