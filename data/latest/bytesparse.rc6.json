{
  "info": {
    "author": "",
    "author_email": "Andrea Zoppi <texzk@email.it>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
      "Topic :: Software Development",
      "Topic :: Software Development :: Embedded Systems",
      "Topic :: Utilities"
    ],
    "description": "********\nOverview\n********\n\n.. start-badges\n\n.. list-table::\n    :stub-columns: 1\n\n    * - docs\n      - |docs|\n    * - tests\n      - | |gh_actions|\n        | |codecov|\n    * - package\n      - | |version| |wheel|\n        | |supported-versions|\n        | |supported-implementations|\n\n.. |docs| image:: https://readthedocs.org/projects/bytesparse/badge/?style=flat\n    :target: https://readthedocs.org/projects/bytesparse\n    :alt: Documentation Status\n\n.. |gh_actions| image:: https://github.com/TexZK/bytesparse/workflows/CI/badge.svg\n    :alt: GitHub Actions Status\n    :target: https://github.com/TexZK/bytesparse\n\n.. |codecov| image:: https://codecov.io/gh/TexZK/bytesparse/branch/main/graphs/badge.svg?branch=main\n    :alt: Coverage Status\n    :target: https://codecov.io/github/TexZK/bytesparse\n\n.. |version| image:: https://img.shields.io/pypi/v/bytesparse.svg\n    :alt: PyPI Package latest release\n    :target: https://pypi.org/project/bytesparse/\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/bytesparse.svg\n    :alt: PyPI Wheel\n    :target: https://pypi.org/project/bytesparse/\n\n.. |supported-versions| image:: https://img.shields.io/pypi/pyversions/bytesparse.svg\n    :alt: Supported versions\n    :target: https://pypi.org/project/bytesparse/\n\n.. |supported-implementations| image:: https://img.shields.io/pypi/implementation/bytesparse.svg\n    :alt: Supported implementations\n    :target: https://pypi.org/project/bytesparse/\n\n.. end-badges\n\n\nLibrary to handle sparse bytes within a virtual memory space.\n\n* Free software: BSD 2-Clause License\n\n\nObjectives\n==========\n\nThis library aims to provide utilities to work with a `virtual memory`, which\nconsists of a virtual addressing space where sparse `chunks` of data can be\nstored.\n\nIn order to be easy to use, its interface should be close to that of a\n``bytearray``, which is the closest pythonic way to store dynamic data.\nThe main downside of a ``bytearray`` is that it requires a contiguous data\nallocation starting from address 0. This is not good when sparse data have to\nbe stored, such as when emulating the addressing space of a generic\nmicrocontroller.\n\nThe main idea is to provide a ``bytearray``-like class with the possibility to\ninternally hold the sparse `blocks` of data.\nA `block` is ideally a tuple ``(start, data)`` where `start` is the start\naddress and `data` is the container of data items (e.g. ``bytearray``).\nThe length of the block is ``len(data)``.\nThose blocks are usually not overlapping nor contiguous, and sorted by start\naddress.\n\n\nPython implementation\n=====================\n\nThis library provides a pure Python implementation, for maximum compatibility.\n\nIts implementation should be correct and robust, whilst trying to be as fast\nas common sense suggests. This means that the code should be reasonably\noptimized for general use, while still providing features that are less likely\nto be used, yet compatible with the existing Python API (e.g. ``bytearray`` or\n``dict``).\n\nThe Python implementation can also leverage the capabilities of its powerful\n``int`` type, so that a virtually infinite addressing space can be used,\neven with negative addresses!\n\nData chunks are stored as common mutable ``bytearray`` objects, whose size is\nlimited by the Python engine (i.e. that of ``size_t``).\n\nThe ``bytesparse`` package provides the following virtual memory types:\n\n* ``bytesparse.Memory``, a generic virtual memory with infinite address range.\n* ``bytesparse.bytesparse``, a subclass behaving more like ``bytearray``.\n\nAll the implementations inherit the behavior of\n``collections.abc.MutableSequence`` and ``collections.abc.MutableMapping``.\nPlease refer to `the collections.abc reference manual\n<https://docs.python.org/3/library/collections.abc.html>`_ for more information\nabout the interface API methods and capabilities.\n\n\nCython implementation\n=====================\n\nThe library also provides an experimental `Cython` implementation. It tries to\nmimic the same algorithms of the Python implementation, while leveraging the\nspeedup of compiled `C` code.\n\nPlease refer to the ``cbytesparse`` Python package for more details.\n\n\nExamples\n========\n\nHere's a quick usage example of ``bytesparse`` objects:\n\n>>> from bytesparse import Memory\n>>> from bytesparse import bytesparse\n>>> # ----------------------------------------------------------------\n>>> m = bytesparse(b'Hello, World!')  # creates from bytes\n>>> len(m)  # total length\n13\n>>> str(m)  # string representation, with bounds and data blocks\n\"<[[0, b'Hello, World!']]>\"\n>>> bytes(m)  # exports as bytes\nb'Hello, World!'\n>>> m.to_bytes()  # exports the whole range as bytes\nb'Hello, World!'\n>>> # ----------------------------------------------------------------\n>>> m.extend(b'!!')  # more emphasis!!!\n>>> bytes(m)\nb'Hello, World!!!'\n>>> # ----------------------------------------------------------------\n>>> i = m.index(b',')  # gets the address of the comma\n>>> m[:i] = b'Ciao'  # replaces 'Hello' with 'Ciao'\n>>> bytes(m)\nb'Ciao, World!!!'\n>>> # ----------------------------------------------------------------\n>>> i = m.index(b',')  # gets the address of the comma\n>>> m.insert(i, b'ne')  # inserts 'ne' to make 'Ciaone' (\"big ciao\")\n>>> bytes(m)\nb'Ciaone, World!!!'\n>>> # ----------------------------------------------------------------\n>>> i = m.index(b',')  # gets the address of the comma\n>>> m[(i - 2):i] = b' ciao'  # makes 'Ciaone' --> 'Ciao ciao'\n>>> bytes(m)\nb'Ciao ciao, World!!!'\n>>> # ----------------------------------------------------------------\n>>> m.pop()  # less emphasis --> 33 == ord('!')\n33\n>>> bytes(m)\nb'Ciao ciao, World!!'\n>>> # ----------------------------------------------------------------\n>>> del m[m.index(b'l')]  # makes 'World' --> 'Word'\n>>> bytes(m)\nb'Ciao ciao, Word!!'\n>>> # ----------------------------------------------------------------\n>>> m.popitem()  # less emphasis --> pops 33 (== '!') at address 16\n(16, 33)\n>>> bytes(m)\nb'Ciao ciao, Word!'\n>>> # ----------------------------------------------------------------\n>>> m.remove(b' ciao')  # self-explanatory\n>>> bytes(m)\nb'Ciao, Word!'\n>>> # ----------------------------------------------------------------\n>>> i = m.index(b',')  # gets the address of the comma\n>>> m.clear(start=i, endex=(i + 2))  # makes empty space between the words\n>>> m.to_blocks()  # exports as data block list\n[[0, b'Ciao'], [6, b'Word!']]\n>>> m.contiguous  # multiple data blocks (emptiness inbetween)\nFalse\n>>> m.content_parts  # two data blocks\n2\n>>> m.content_size  # excluding emptiness\n9\n>>> len(m)  # including emptiness\n11\n>>> # ----------------------------------------------------------------\n>>> m.flood(pattern=b'.')  # replaces emptiness with dots\n>>> bytes(m)\nb'Ciao..Word!'\n>>> m[-2]  # 100 == ord('d')\n100\n>>> # ----------------------------------------------------------------\n>>> m.peek(-2)  # 100 == ord('d')\n100\n>>> m.poke(-2, b'k')  # makes 'Word' --> 'Work'\n>>> bytes(m)\nb'Ciao..Work!'\n>>> # ----------------------------------------------------------------\n>>> m.crop(start=m.index(b'W'))  # keeps 'Work!'\n>>> m.to_blocks()\n[[6, b'Work!']]\n>>> m.span  # address range of the whole memory\n(6, 11)\n>>> m.start, m.endex  # same as above\n(6, 11)\n>>> # ----------------------------------------------------------------\n>>> m.bound_span = (2, 10)  # sets memory address bounds\n>>> str(m)\n\"<2, [[6, b'Work']], 10>\"\n>>> m.to_blocks()\n[[6, b'Work']]\n>>> # ----------------------------------------------------------------\n>>> m.shift(-6)  # shifts to the left; NOTE: address bounds will cut 2 bytes!\n>>> m.to_blocks()\n[[2, b'rk']]\n>>> str(m)\n\"<2, [[2, b'rk']], 10>\"\n>>> # ----------------------------------------------------------------\n>>> a = bytesparse(b'Ma')\n>>> a.write(0, m)  # writes [2, b'rk'] --> 'Mark'\n>>> a.to_blocks()\n[[0, b'Mark']]\n>>> # ----------------------------------------------------------------\n>>> b = Memory.from_bytes(b'ing', offset=4)\n>>> b.to_blocks()\n[[4, b'ing']]\n>>> # ----------------------------------------------------------------\n>>> a.write(0, b)  # writes [4, b'ing'] --> 'Marking'\n>>> a.to_blocks()\n[[0, b'Marking']]\n>>> # ----------------------------------------------------------------\n>>> a.reserve(4, 2)  # inserts 2 empty bytes after 'Mark'\n>>> a.to_blocks()\n[[0, b'Mark'], [6, b'ing']]\n>>> # ----------------------------------------------------------------\n>>> a.write(4, b'et')  # --> 'Marketing'\n>>> a.to_blocks()\n[[0, b'Marketing']]\n>>> # ----------------------------------------------------------------\n>>> a.fill(1, -1, b'*')  # fills asterisks between the first and last letters\n>>> a.to_blocks()\n[[0, b'M*******g']]\n>>> # ----------------------------------------------------------------\n>>> v = a.view(1, -1)  # creates a memory view spanning the asterisks\n>>> v[::2] = b'1234'  # replaces even asterisks with numbers\n>>> a.to_blocks()\n[[0, b'M1*2*3*4g']]\n>>> a.count(b'*')  # counts all the asterisks\n3\n>>> v.release()  # release memory view\n>>> # ----------------------------------------------------------------\n>>> c = a.copy()  # creates a (deep) copy\n>>> c == a\nTrue\n>>> c is a\nFalse\n>>> # ----------------------------------------------------------------\n>>> del a[a.index(b'*')::2]  # deletes every other byte from the first asterisk\n>>> a.to_blocks()\n[[0, b'M1234']]\n>>> # ----------------------------------------------------------------\n>>> a.shift(3)  # moves away from the trivial 0 index\n>>> a.to_blocks()\n[[3, b'M1234']]\n>>> list(a.keys())\n[3, 4, 5, 6, 7]\n>>> list(a.values())\n[77, 49, 50, 51, 52]\n>>> list(a.items())\n[(3, 77), (4, 49), (5, 50), (6, 51), (7, 52)]\n>>> # ----------------------------------------------------------------\n>>> c.to_blocks()  # reminder\n[[0, b'M1*2*3*4g']]\n>>> c[2::2] = None  # clears (empties) every other byte from the first asterisk\n>>> c.to_blocks()\n[[0, b'M1'], [3, b'2'], [5, b'3'], [7, b'4']]\n>>> list(c.intervals())  # lists all the block ranges\n[(0, 2), (3, 4), (5, 6), (7, 8)]\n>>> list(c.gaps())  # lists all the empty ranges\n[(None, 0), (2, 3), (4, 5), (6, 7), (8, None)]\n>>> # ----------------------------------------------------------------\n>>> c.flood(pattern=b'xy')  # fills empty spaces\n>>> c.to_blocks()\n[[0, b'M1x2x3x4']]\n>>> # ----------------------------------------------------------------\n>>> t = c.cut(c.index(b'1'), c.index(b'3'))  # cuts an inner slice\n>>> t.to_blocks()\n[[1, b'1x2x']]\n>>> c.to_blocks()\n[[0, b'M'], [5, b'3x4']]\n>>> t.bound_span  # address bounds of the slice (automatically activated)\n(1, 5)\n>>> # ----------------------------------------------------------------\n>>> k = bytesparse.from_blocks([[4, b'ABC'], [9, b'xy']], start=2, endex=15)  # bounded\n>>> str(k)  # shows summary\n\"<2, [[4, b'ABC'], [9, b'xy']], 15>\"\n>>> k.bound_span  # defined at creation\n(2, 15)\n>>> k.span  # superseded by bounds\n(2, 15)\n>>> k.content_span  # actual content span (min/max addresses)\n(4, 11)\n>>> len(k)  # superseded by bounds\n13\n>>> k.content_size  # actual content size\n5\n>>> # ----------------------------------------------------------------\n>>> k.flood(pattern=b'.')  # floods between span\n>>> k.to_blocks()\n[[2, b'..ABC..xy....']]\n\n\nBackground\n==========\n\nThis library started as a spin-off of ``hexrec.blocks.Memory``.\nThat is based on a simple Python implementation using immutable objects (i.e.\n``tuple`` and ``bytes``). While good enough to handle common hexadecimal files,\nit is totally unsuited for dynamic/interactive environments, such as emulators,\nIDEs, data editors, and so on.\nInstead, ``bytesparse`` should be more flexible and faster, hopefully\nsuitable for generic usage.\n\nWhile developing the Python implementation, why not also jump on the Cython\nbandwagon, which permits even faster algorithms? Moreover, Cython itself is\nan interesting intermediate language, which brings to the speed of C, whilst\nbeing close enough to Python for the like.\n\nToo bad, one great downside is that debugging Cython-compiled code is quite an\nhassle -- that is why I debugged it in a crude way I cannot even mention, and\nthe reason why there must be dozens of bugs hidden around there, despite the\ntest suite :-) Moreover, the Cython implementation is still experimental, with\nsome features yet to be polished (e.g. reference counting).\n\n\nDocumentation\n=============\n\nFor the full documentation, please refer to:\n\nhttps://bytesparse.readthedocs.io/\n\n\nInstallation\n============\n\nFrom PyPI (might not be the latest version found on *github*):\n\n.. code-block:: sh\n\n    $ pip install bytesparse\n\nFrom the source code root directory:\n\n.. code-block:: sh\n\n    $ pip install .\n\n\nDevelopment\n===========\n\nTo run the all the tests:\n\n.. code-block:: sh\n\n    $ pip install tox\n    $ tox\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD-2-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bytesparse",
    "package_url": "https://pypi.org/project/bytesparse/",
    "platform": null,
    "project_url": "https://pypi.org/project/bytesparse/",
    "project_urls": {
      "documentation": "https://bytesparse.readthedocs.io",
      "source": "https://github.com/TexZK/bytesparse",
      "tracker": "https://github.com/TexZK/bytesparse/issues"
    },
    "release_url": "https://pypi.org/project/bytesparse/0.0.6/",
    "requires_dist": [
      "pytest ; extra == 'testing'"
    ],
    "requires_python": ">=3.7",
    "summary": "Library to handle sparse bytes within a virtual memory space",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16914345,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cdae74db19e0f4797b43f250000f27c1d350617b3c7e53ffbc73745b89a29ad",
          "md5": "efa609c02ec3d28d220f1fde2c60af6f",
          "sha256": "f02f92745952dd673990cc87681fba4391a520c19cf798e41d4a58299d1141d3"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "efa609c02ec3d28d220f1fde2c60af6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 952222,
        "upload_time": "2021-04-04T16:00:43",
        "upload_time_iso_8601": "2021-04-04T16:00:43.384074Z",
        "url": "https://files.pythonhosted.org/packages/2c/da/e74db19e0f4797b43f250000f27c1d350617b3c7e53ffbc73745b89a29ad/bytesparse-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ecbe8544fbb5f1a899747833887dfc3422f4ded647c564e4fc1b99aa7162249",
          "md5": "1035f06fe171e6d70c1c09b7ad9b6684",
          "sha256": "95bcbbff30c0192e45dcc2b42b60084cc910499ed5c3b4b0396bd1e5f498124e"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1035f06fe171e6d70c1c09b7ad9b6684",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23736,
        "upload_time": "2021-12-27T17:43:10",
        "upload_time_iso_8601": "2021-12-27T17:43:10.461266Z",
        "url": "https://files.pythonhosted.org/packages/5e/cb/e8544fbb5f1a899747833887dfc3422f4ded647c564e4fc1b99aa7162249/bytesparse-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfb1e80805833a7e6972be32676807ec93f13c350b653ea0d1cf8038bd594ffc",
          "md5": "5d512bb9aaeb1c674c5833774d20bb5a",
          "sha256": "f38c6af9c470334a0474cc5c264b393fdacecb5c3020b1ccfea726eb37152754"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5d512bb9aaeb1c674c5833774d20bb5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43470,
        "upload_time": "2021-12-27T17:43:12",
        "upload_time_iso_8601": "2021-12-27T17:43:12.419591Z",
        "url": "https://files.pythonhosted.org/packages/cf/b1/e80805833a7e6972be32676807ec93f13c350b653ea0d1cf8038bd594ffc/bytesparse-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c74a73733ce991d8e73d2946aef09de1794c91d9f3a131fff599a2e377640b2f",
          "md5": "1d3fa41d437b9d52154481f7a9ab14c4",
          "sha256": "00efc1901b8d243424cb50e506af78a935105e732066d80beaffbfdf8e099164"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d3fa41d437b9d52154481f7a9ab14c4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24857,
        "upload_time": "2022-01-03T15:51:45",
        "upload_time_iso_8601": "2022-01-03T15:51:45.095297Z",
        "url": "https://files.pythonhosted.org/packages/c7/4a/73733ce991d8e73d2946aef09de1794c91d9f3a131fff599a2e377640b2f/bytesparse-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a75f8c0af1b3eb24b3fb428d8cdcf059f2a7e2950c957f124ae5dcf34e5b122b",
          "md5": "77c9592c120be9cce6b5ea18bb4874b8",
          "sha256": "e2c0403083cf4bbddd1dc013b92d67b04060cb772a77b7dc6e85a677a573a6a7"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "77c9592c120be9cce6b5ea18bb4874b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45888,
        "upload_time": "2022-01-03T15:51:47",
        "upload_time_iso_8601": "2022-01-03T15:51:47.141299Z",
        "url": "https://files.pythonhosted.org/packages/a7/5f/8c0af1b3eb24b3fb428d8cdcf059f2a7e2950c957f124ae5dcf34e5b122b/bytesparse-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "692b7197ec00b1e40d7ce909991b30bd35a0de17ef2af05e0e1671d8d0744e61",
          "md5": "66e91405b3eb9d94ac8d344f07d1e5e8",
          "sha256": "6bee3603d869c69724964dcbd847a6f1c621c6d9fbf35e3135cdd2e34b903bc7"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66e91405b3eb9d94ac8d344f07d1e5e8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 33972,
        "upload_time": "2022-01-08T23:29:19",
        "upload_time_iso_8601": "2022-01-08T23:29:19.053330Z",
        "url": "https://files.pythonhosted.org/packages/69/2b/7197ec00b1e40d7ce909991b30bd35a0de17ef2af05e0e1671d8d0744e61/bytesparse-0.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a526fde074c3c1dee8f3e2642c9ff83928da50c8ca87239cd2e66531751a4b9e",
          "md5": "d65af67493a2540f8105e799f09d384c",
          "sha256": "0ea079e7a1f57d8ed74dabb8ce46cf46c149ba96493814bec82684f0744df0bf"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d65af67493a2540f8105e799f09d384c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 57944,
        "upload_time": "2022-01-08T23:29:20",
        "upload_time_iso_8601": "2022-01-08T23:29:20.733841Z",
        "url": "https://files.pythonhosted.org/packages/a5/26/fde074c3c1dee8f3e2642c9ff83928da50c8ca87239cd2e66531751a4b9e/bytesparse-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "712b8ca8b38263b5afe8960453949de927423c7d30d72d553af2dc4137d7e561",
          "md5": "f62563d988c0683304f72f706ba20b94",
          "sha256": "98760fdf707c18e18bc0e20df5ad001048b057a0b325b3ee53cc8e5a0c5c2cf4"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f62563d988c0683304f72f706ba20b94",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 37278,
        "upload_time": "2022-02-22T20:55:49",
        "upload_time_iso_8601": "2022-02-22T20:55:49.057566Z",
        "url": "https://files.pythonhosted.org/packages/71/2b/8ca8b38263b5afe8960453949de927423c7d30d72d553af2dc4137d7e561/bytesparse-0.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64f807ea8266e2884a954c23f430a9ae2def9bcfc49f68b370396fa2dd5843b1",
          "md5": "45a5fda87526b66b36df330fe0e7b60b",
          "sha256": "26ec68e691ff7a212404dedd5a7d539ae38389a1f9209fe728c929534dfe0d6c"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "45a5fda87526b66b36df330fe0e7b60b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65980,
        "upload_time": "2022-02-22T20:55:51",
        "upload_time_iso_8601": "2022-02-22T20:55:51.105082Z",
        "url": "https://files.pythonhosted.org/packages/64/f8/07ea8266e2884a954c23f430a9ae2def9bcfc49f68b370396fa2dd5843b1/bytesparse-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f767c7f891ae923e48962e68bbd30896a4db07f38f4cb134400fe74dc290f2c9",
          "md5": "fcce894eda7cba3cdb842132c499ae30",
          "sha256": "c8907d368242b97e8cadab9929096665f6abb0acb18acc1500166254670f2252"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fcce894eda7cba3cdb842132c499ae30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 41468,
        "upload_time": "2023-02-18T12:09:41",
        "upload_time_iso_8601": "2023-02-18T12:09:41.537266Z",
        "url": "https://files.pythonhosted.org/packages/f7/67/c7f891ae923e48962e68bbd30896a4db07f38f4cb134400fe74dc290f2c9/bytesparse-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a972f47566d31cadcd0b400fd006942852e3cc8af08dccdc622474fd8fc7071",
          "md5": "70c84677dcd63e483a1ed3a6d52efe1a",
          "sha256": "f039e27164347c09d97e2ffd094c593fc40fe1f1fd4f2e6a405639d60a754b4c"
        },
        "downloads": -1,
        "filename": "bytesparse-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "70c84677dcd63e483a1ed3a6d52efe1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 74335,
        "upload_time": "2023-02-18T12:09:44",
        "upload_time_iso_8601": "2023-02-18T12:09:44.879166Z",
        "url": "https://files.pythonhosted.org/packages/3a/97/2f47566d31cadcd0b400fd006942852e3cc8af08dccdc622474fd8fc7071/bytesparse-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f767c7f891ae923e48962e68bbd30896a4db07f38f4cb134400fe74dc290f2c9",
        "md5": "fcce894eda7cba3cdb842132c499ae30",
        "sha256": "c8907d368242b97e8cadab9929096665f6abb0acb18acc1500166254670f2252"
      },
      "downloads": -1,
      "filename": "bytesparse-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fcce894eda7cba3cdb842132c499ae30",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 41468,
      "upload_time": "2023-02-18T12:09:41",
      "upload_time_iso_8601": "2023-02-18T12:09:41.537266Z",
      "url": "https://files.pythonhosted.org/packages/f7/67/c7f891ae923e48962e68bbd30896a4db07f38f4cb134400fe74dc290f2c9/bytesparse-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a972f47566d31cadcd0b400fd006942852e3cc8af08dccdc622474fd8fc7071",
        "md5": "70c84677dcd63e483a1ed3a6d52efe1a",
        "sha256": "f039e27164347c09d97e2ffd094c593fc40fe1f1fd4f2e6a405639d60a754b4c"
      },
      "downloads": -1,
      "filename": "bytesparse-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "70c84677dcd63e483a1ed3a6d52efe1a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 74335,
      "upload_time": "2023-02-18T12:09:44",
      "upload_time_iso_8601": "2023-02-18T12:09:44.879166Z",
      "url": "https://files.pythonhosted.org/packages/3a/97/2f47566d31cadcd0b400fd006942852e3cc8af08dccdc622474fd8fc7071/bytesparse-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}