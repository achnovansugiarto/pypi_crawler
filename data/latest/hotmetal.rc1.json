{
  "info": {
    "author": "Jamie Matthews",
    "author_email": "jamie@mtth.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# hotmetal\n\n**A tiny HTML generator**\n\n## Installation\n\nInstall from PyPI\n\n    pip install hotmetal\n\n## What is hotmetal?\n\n`hotmetal` is a tiny library that lets you generate HTML directly from Python primitive data structures without using any sort of text-based template language. It is an alternative to [Jinja](https://jinja.palletsprojects.com/), [Django templates](https://docs.djangoproject.com/en/4.0/topics/templates/), etc. It is loosely inspired by ideas from [React](https://reactjs.org/), [Mithril](https://mithril.js.org/vnodes.html) and other JavaScript libraries. It is also similar to [Hyperpython](https://github.com/ejplatform/hyperpython), but it's even simpler. It attempts to stay as close as possible to [the HTML spec](https://html.spec.whatwg.org/).\n\n## How does it work?\n\nFirst, read [a quick introduction to HTML](https://html.spec.whatwg.org/#a-quick-introduction-to-html). Go on, it's important.\n\nAn HTML document represents a tree of nodes. Each node (called an \"element\") consists of exactly three things: a **tag name** (such as `div`, `p` or `title`), a collection of **attributes** (a mapping of keys to values) and a list of **children** (other elements or text nested inside the node).\n\nSo: that's a **tag name** (a string), **attributes** (a mapping), and **children** (a list).\n\nThe simplest way to represent that structure in Python is a tuple of three elements:\n\n```python\n(\"\", {}, [])\n```\n\nHere's an example of an anchor element (a link) with a text node inside it:\n\n```python\nlink_element = (\"a\", {\"href\": \"somewhere.html\"}, [\"click me!\"])\n```\n\nHere's an example of a full HTML document (note that the `DOCTYPE` is missing, we'll come back to that later):\n\n```python\ndocument = (\n    \"html\",\n    {\"lang\": \"en\"},\n    [\n        (\"head\", {}, [(\"title\", {}, [\"Sample page\"])]),\n        (\n            \"body\",\n            {},\n            [\n                (\"h1\", {}, [\"Sample page\"]),\n                (\n                    \"p\",\n                    {},\n                    [\"This is a \", (\"a\", {\"href\": \"demo.html\"}, [\"simple\"]), \" sample\"],\n                ),\n            ],\n        ),\n    ],\n)\n```\n\nOnce we've created a structure like this, we can use `hotmetal` to _render_ it into a string:\n\n```pycon\n>>> from hotmetal import render\n>>> print(render(document, indent=2))\n<html lang=\"en\">\n  <head>\n    <title>\n      Sample page\n    </title>\n  </head>\n  <body>\n    <h1>\n      Sample page\n    </h1>\n    <p>\n      This is a\n      <a href=\"demo.html\">\n        simple\n      </a>\n       sample\n    </p>\n  </body>\n</html>\n```\n\nIn essence, _that's it_. That's all that `hotmetal` does.\n\n## Components\n\nBut this all looks pretty fiddly, right? If you always needed to painstakingly assemble a huge tree of nested tuples to render every page on your web app, that would be annoyingly verbose and difficult to read.\n\nSo here's the clever bit: instead, **write functions with meaningful names that return element nodes, and build your web app with those**. Let's call these functions that return nodes _components_ (if you're familiar with React you might see where this is going).\n\n```python\ndef menu_item(href, text):\n    return (\"li\", {}, [(\"a\", {\"href\": href}, [text])])\n\n\ndef menu(items):\n    return (\"ul\", {}, [menu_item(href, text) for href, text in items])\n\n\nmenu_node = menu(\n    [\n        (\"/home/\", \"Home\"),\n        (\"/blog/\", \"Blog\"),\n    ]\n)\n```\n\n... and so on, right down to the `<html>`.\n\nFor a good explanation of some useful patterns to use when composing markup in this way, have a read of the React docs on [Composition vs Inheritance](https://reactjs.org/docs/composition-vs-inheritance.html). The concepts should be directly transferable.\n\n## Fragments\n\nEarlier, we brushed over the fact that the example we used was missing its `DOCTYPE`. That's because the root of an HTML document is really two things: the `<html>` element itself, and before it [the `DOCTYPE` preamble](https://html.spec.whatwg.org/#the-doctype). We can express this structure in `hotmetal` by using a _fragment_. Again, the [same concept exists in React](https://reactjs.org/docs/fragments.html), but the syntax is simpler in `hotmetal`. Just use a node with an empty tag name and attributes:\n\n```python\nfrom hotmetal import safe\n\n\ndocument = (\n    \"\",\n    {},\n    [\n        safe(\"<!DOCTYPE html>\"),\n        (\n            \"html\",\n            {\"lang\": \"en\"},\n            [...],  # head, body etc\n        ),\n    ],\n)\n```\n\nWhen rendering, `hotmetal` will \"optimise away\" the empty node, leaving only the two consecutive child nodes. This is also often useful during component composition: you might create a component that accepts a single child node as an argument, but you can still pass it a list of multiple nodes by wrapping them in a fragment.\n\nBut what's that `safe` thing about?\n\n## Escaping\n\nYou have to be careful when generating HTML. If any part of your markup or text content can be supplied by a user (which is common in web applications), you may be vulnerable to cross-site scripting (XSS) attacks. The Django docs have [a good explanation of why this is important](https://docs.djangoproject.com/en/4.0/ref/templates/language/#automatic-html-escaping-1).\n\nBy default, `hotmetal` escapes _every_ string it renders using the same approach as Python's built-in [`html.escape`](https://docs.python.org/3/library/html.html#html.escape) functionality. So you can add user-generated content to your documents without worrying.\n\nIf you want to add some raw markup that you _know_ is safe (some hand-crafted HTML, or the rendered output of another templating system that already escapes unsafe content) then you can wrap those strings in the `safe` function. See the above section for an example.\n\n## Context\n\nThe [React docs on context](https://reactjs.org/docs/context.html) say:\n\n> Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n\nExactly the same concept exists in `hotmetal`, but again the implementation is a little simpler.\n\nIf you're familiar with the concept of context in Django or Jinja templates, this is _not quite the same thing_. In those languages, context is the _only_ way to pass variables into a template. In `hotmetal` there's no need to do this: you can just create component functions that accept arguments:\n\n```python\ndef header(title):\n    return (\"h1\", {}, [title])\n```\n\nSo where would you use context? Just like in React:\n\n> Context is primarily used when some data needs to be accessible by many components at different nesting levels. Apply it sparingly because it makes component reuse more difficult.\n\nA good example might be if you need to access the `request` object or the currently logged in user somewhere deep in your component tree, but you don't want to explicitly pass it down through the component hierarchy from the root.\n\nTo use context in `hotmetal`, you pass a dictionary to the `render` function:\n\n```python\nrender(some_node, context={\"logged_in_user_email\": \"hello@example.com\"})\n```\n\nTo access the context from inside the tree, replace any node in the tree with a _callable_ (a named function or a lambda) that returns that node. During rendering, `hotmetal` will call your function, passing the `context` dictionary as its single argument.\n\n```python\ndef current_user_panel():\n    return lambda context: (\n        \"p\",\n        {},\n        [f\"Hello, {context['logged_in_user_email']}\"],\n    )\n```\n\n## Indentation control\n\nThe `render` function takes an `indent` argument, which is a integer used to control how many spaces are used as indentation in the generated HTML. The default is 0, meaning the entire HTML string will be returned on a single line. You may wish to use (say) `indent=2` for development, and `indent=0` for production (essentially minifying your HTML).\n\n## Generating class names\n\nA function is provided that can be used to generate strings of class names based on various arguments. This is closely based on the [classnames](https://github.com/JedWatson/classnames/) JavaScript library.\n\n```python\nfrom hotmetal.utils.classnames import classnames\n\n\ndef header(title):\n    title_is_green = title.lower() == \"green\"\n    return (\"h1\", {\"class\": classnames(\"title\", {\"green\": title_is_green})}, [title])\n```\n\n## Testing tools\n\nWhen writing tests for components, it's often useful to be able to search through a tree to find particular nodes and make assertions about them. To help with this, `hotmetal` provides a `find` function, which takes an iterable of nodes and a predicate callable, and returns a generator that yields nodes that match the predicate (using depth-first pre-order traversal of the nodes, much like the browser's [`querySelectorAll`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll) function).\n\nFor example, given the following component:\n\n```python\ndef header(title):\n    return (\"div\", {\"class\": \"header\"}, [(\"h1\", {}, [title])])\n```\n\nYou could write a test something like this:\n\n```python\nfrom hotmetal.utils.find import find\nfrom unittest import TestCase\n\n\nclass HeaderTestCase(TestCase):\n    def test_title_appears_correctly_inside_h1(self):\n        node = header(\"hello world\")\n        h1_elements = list(\n            find([node], lambda node: isinstance(node, tuple) and node[0] == \"h1\")\n        )\n        self.assertEqual(len(h1_elements), 1)\n        h1 = h1_elements[0]\n        children = node[2]\n        self.assertEqual(children, [\"hello world\"])\n```\n\nHere, a `lambda` is being used to match against each node in the tree, which returns `True` or `False` depending on whether that node should be included in the results. When writing the predicate, remember that the `node` argument may be a tree node (a tuple), or a text node (a string), or a function (for nodes that require `context`, see above).\n\nAs an alternative to writing the `predicate` function yourself, a selection of functions are provided that address common requirements for finding nodes. The `find` line in the above example can be rewritten like this:\n\n```python\nh1_elements = list(find([node], tag_is(\"h1\")))\n```\n\nA full list of these predicate functions is below:\n\n### `hotmetal.utils.find.tag_is(tag)`\n\nReturns a predicate function that matches nodes by tag name: `find(nodes, tag_is(\"h1\"))`\n\n### `hotmetal.utils.find.id_is(id)`\n\nReturns a predicate function that matches nodes by the value of the ID attribute: `find(nodes, id_is(\"header\"))`\n\n### `hotmetal.utils.find.has_class(cls)`\n\nReturns a predicate function that matches nodes by a particular class name within the `class` attribute: `find(nodes, has_class(\"someclass\"))`\n\n### `hotmetal.utils.find.has_attr(attr)`\n\nReturns a predicate function that matches nodes that have the given attribute, with any value: `find(nodes, has_attr(\"href\"))`\n\n### `hotmetal.utils.find.has_attr_with_value(attr, value)`\n\nReturns a predicate function that matches nodes that have the given attribute, and also the value of that attribute is equal to the given value: `find(nodes, has_attr_with_value(\"type\", \"hidden\"))`\n\n### `hotmetal.utils.find.attr_value_matches(attr, predicate)`\n\nReturns a predicate function that matches nodes that have the given attribute, and the value of that attribute matches the given predicate function: `find(nodes, attr_value_matches(\"class\", lambda value: \"background-\" in value))`\n\n### `hotmetal.utils.find.text_contains(text)`\n\nReturns a predicate function that matches text nodes (strings) that contain the given text: `find(nodes, text_contains(\"hello world\"))`\n\n### `hotmetal.utils.find.any_immediate_child_matches(predicate)`\n\nReturns a predicate function that matches nodes with at least one direct child node that matches the given predicate: `find(nodes, any_immediate_child_matches(text_contains(\"hello world\")))`\n\n### `hotmetal.utils.find.or_(*predicates)`\n\nGiven multiple predicate functions, returns a predicate function that matches nodes that match any of the predicates: `find(nodes, or_(tag_is(\"h1\"), id_is(\"title\")))`\n\n### `hotmetal.utils.find.and_(*predicates)`\n\nGiven multiple predicate functions, returns a predicate function that matches nodes that match all of the predicates: `find(nodes, and_(tag_is(\"input\"), has_attr_with_value(\"type\", \"text\")))`\n\n### `hotmetal.utils.find.not_(predicate)`\n\nInverts a predicate function: `find(nodes, and_(tag_is(\"input\"), not_(has_attr_with_value(\"type\", \"hidden\")))`\n\n### `hotmetal.utils.find.TAG`\n### `hotmetal.utils.find.ATTRS`\n### `hotmetal.utils.find.CHILDREN`\n\nThese three constants are simply the indices into a node for each component. They enhance readability: instead of `children = node[2]` you can say `children = node[CHILDREN]`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/j4mie/hotmetal",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hotmetal",
    "package_url": "https://pypi.org/project/hotmetal/",
    "platform": null,
    "project_url": "https://pypi.org/project/hotmetal/",
    "project_urls": {
      "Changelog": "https://github.com/j4mie/hotmetal/releases",
      "Homepage": "https://github.com/j4mie/hotmetal",
      "Issues": "https://github.com/j4mie/hotmetal/issues"
    },
    "release_url": "https://pypi.org/project/hotmetal/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16476876,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dc703f4411fa3363a27156172046d7a62aecc6b967cca033e6063d306529fcd",
          "md5": "39d741c4ef9a716527a1d811420af699",
          "sha256": "2bc022a054c463c73ce68afc6b27c34968fdd3d038bbe71204a057859b7b55b5"
        },
        "downloads": -1,
        "filename": "hotmetal-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39d741c4ef9a716527a1d811420af699",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8960,
        "upload_time": "2023-01-18T21:28:08",
        "upload_time_iso_8601": "2023-01-18T21:28:08.331764Z",
        "url": "https://files.pythonhosted.org/packages/6d/c7/03f4411fa3363a27156172046d7a62aecc6b967cca033e6063d306529fcd/hotmetal-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57145d8948d83c2cd1795f9f3129e81ca688041c67f105bce090633ff6c73ccb",
          "md5": "25a04a76005a96e7d17238dbafa3a778",
          "sha256": "a84539fe04ff5289e5c584e1a7310a91e2f35181128d817643bd591434501316"
        },
        "downloads": -1,
        "filename": "hotmetal-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "25a04a76005a96e7d17238dbafa3a778",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10725,
        "upload_time": "2023-01-18T21:28:10",
        "upload_time_iso_8601": "2023-01-18T21:28:10.113158Z",
        "url": "https://files.pythonhosted.org/packages/57/14/5d8948d83c2cd1795f9f3129e81ca688041c67f105bce090633ff6c73ccb/hotmetal-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6dc703f4411fa3363a27156172046d7a62aecc6b967cca033e6063d306529fcd",
        "md5": "39d741c4ef9a716527a1d811420af699",
        "sha256": "2bc022a054c463c73ce68afc6b27c34968fdd3d038bbe71204a057859b7b55b5"
      },
      "downloads": -1,
      "filename": "hotmetal-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "39d741c4ef9a716527a1d811420af699",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8960,
      "upload_time": "2023-01-18T21:28:08",
      "upload_time_iso_8601": "2023-01-18T21:28:08.331764Z",
      "url": "https://files.pythonhosted.org/packages/6d/c7/03f4411fa3363a27156172046d7a62aecc6b967cca033e6063d306529fcd/hotmetal-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57145d8948d83c2cd1795f9f3129e81ca688041c67f105bce090633ff6c73ccb",
        "md5": "25a04a76005a96e7d17238dbafa3a778",
        "sha256": "a84539fe04ff5289e5c584e1a7310a91e2f35181128d817643bd591434501316"
      },
      "downloads": -1,
      "filename": "hotmetal-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "25a04a76005a96e7d17238dbafa3a778",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10725,
      "upload_time": "2023-01-18T21:28:10",
      "upload_time_iso_8601": "2023-01-18T21:28:10.113158Z",
      "url": "https://files.pythonhosted.org/packages/57/14/5d8948d83c2cd1795f9f3129e81ca688041c67f105bce090633ff6c73ccb/hotmetal-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}