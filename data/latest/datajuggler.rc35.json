{
  "info": {
    "author": "Goichi (Iisaka) Yukawa",
    "author_email": "iisaka51@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![](https://img.shields.io/pypi/pyversions/datajuggler.svg?color=blue&logo=python&logoColor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/v/datajuggler.svg?color=blue&logo=pypi&logoColor=white)](https://pypi.org/project/datajuggler/)\n[![](https://pepy.tech/badge/datajuggler/month)](https://pepy.tech/project/datajuggler)\n[![](https://img.shields.io/github/stars/iisaka51/datajuggler?logo=github)](https://github.com/iisaka51/datajuggler/)\n[![](https://img.shields.io/pypi/l/datajuggler.svg?color=blue)](https://github.com/iisaka51/datajuggler/blob/master/LICENSE.txt)\n\n<p align=\"center\" style=\"margin-bottom: 0px !important;\">\n  <img width=\"400\" src=\"https://user-images.githubusercontent.com/9247573/198170177-cbfb7cd3-a0c5-4d66-a944-27888e153351.png\" align=\"center\">\n  <!--\n  https://github.com/iisaka51/datajuggler/blob/main/datajuggler_logo.png\" alt=\"Datajuggler logo\" align=\"center\">\n  -->\n</p>\n<p align=\"center\" style=\"margin-bottom: 0px !important;\">\n<sub><sub>source: www.irasutoya.com</sub></sub>\n</p>\n\n# DataJuggler\n\nThis library provides utility classes and helper functions for data processing.\nThis is spin-off project from [scrapinghelper](https://github.com/iisaka51/scrapinghelper).\nThis project is inspired by follow great projects.\n\n - [python-benedict](https://github.com/fabiocaccamo/python-benedict)\n - [munch](https://github.com/Infinidat/munch)\n - [adict](https://github.com/mewwts/addict).\n - [serialize](https://github.com/hgrecco/serialize)\n\n\n## Features\n\n - 100% backward-compatible, you can safely wrap existing dictionaries and list.\n - Keypath list-index support (also negative) using the standard [n] suffix.\n - aDict support dot-notation access to value of dictionaries.\n - aDict support immutable and hashable of dictiinary.\n - uDict support Keylist and Keypath which are pointing to valaues of dictionaries.\n - uDict and many helper functions parse methods to retrieve data as needed.\n - iList support immutable and hashable of list.\n - iList support hold attributes using aDict.\n - serializer support 17 different formats:\n   - bson, dill, json, msgpack, phpserialize, pickle, serpent, yaml\n   - json:cusom, yaml:cusom, msgpack:custom, toml, xml\n   - querystring, ini, csv, cloudpickle,\n   - base64(support encrypt/decrypt)\n\n## classes\n\n - class BaseDict\n   Factory class for custom dictionary.\n - class IODict\n   Factory class for IO serializable dictionary.\n - class aDict\n   Allow to access using dot notation for dictionary.\n - class Keypath and Keylist\n   type and manage for keypath and Keylist\n - class uDict\n   Allow to access using keypath and keylist.\n - class iList\n   Allow hashable and immutable list. when call freeze().\n - class StrCase\n   Convert case for object(s).\n - class TypeValidator\n   drop in replace for isinstance() for convinient.\n - class ValueValidator\n   validator for value.\n - class AbstractSerializer\n   factory class for custom serializer\n - class AbstractClassSerializer\n   factory class for custom class serializer\n\nutilities for string manupulate helper functions.\n\n -  `replace_values()` - Replace objects for object(s).\n -  `omit_values()` - Omit values for object(s).\n -  `rename_duplicates()` - Rename duplicated strings to append a number at the end.\n -  `split_chunks()` - Split iterable object into chunks.\n -  `urange()` - Return an object that produces a sequence of integes.\n -  `copy_docstring` - Copying the docstring of function onto another function by name\n\nif pandas installed, follows functions are enabled.\notherwise raise NotImplementedError when function call it.\n\n -  `add_df()` - Add data into DataFrame.\n -  `df_compare()` - Check DataFrame is equals.\n\n## Installation\n\n - Run `pip install datajuggler`\n\n or set required modules.\n\n - `pip install \"datajuggler[database]\"`\n - `pip install \"datajuggler[requests]\"`\n - `pip install \"datajuggler[yaml]\"`\n\n and/or if you want to enable all serialzier.\n\n - `pip install \"datajuggler[serializer]\"`\n\n...etc.\n\n## Getting Started\n\n### aDict\n\naDict allow to access using dot notation for values of dictionary.\nand support freeze/unfreeze object.\n  validator for value.\n\n```python\nIn [1]: from datajuggler import aDict, uDict, iList\n\nIn [2]: data = { 'one': { 'two': { 'three': { 'four': 4 }}}}\n\nIn [3]: a = aDict(data)\n\nIn [4]: a.one.two.three.four\nOut[4]: 4\n\nIn [5]: a.one.two.three.four = 3\n\nIn [6]: a.one.two.three.four\nOut[6]: 3\n\nIn [7]: a.freeze()\n\nIn [8]: hash(a)\nOut[8]: 2318099281826460897\n\nIn [9]: try:\n   ...:     a.one.two.three.four=10\n   ...: except AttributeError as e:\n   ...:     print(e)\n   ...:\naDict frozen object cannot be modified.\n\nIn [10]: a.unfreeze()\n\nIn [11]: a.one.two.three.four = 10\n\nIn [12]: try:\n    ...:     hash(a)\n    ...: except AttributeError as e:\n    ...:     print(e)\n    ...:\nunhashable not frozen object.\n\nIn [13]:\n```\n\n### uDict\n\nuDict is utilized class support keylist and keypath accessing to values.\n\n```python\nIn [1]: from datajuggler import uDict, Keylist, Keypath\n\nIn [2]: data = { \"a\": 1,\n   ...:          \"b\": { \"c\": { \"x\": 2, \"y\": 3, },\n   ...:                 \"d\": { \"x\": 4, \"y\": 5, },\n   ...:                 \"e\": [ { \"x\": 1, \"y\": -1, \"z\": [101, 102, 103], },\n   ...:                        { \"x\": 2, \"y\": -2, \"z\": [201, 202, 203], },\n   ...:                        { \"x\": 3, \"y\": -3, \"z\": [301, 302, 303], },\n   ...:                      ],\n   ...:               },\n   ...:       }\n\nIn [3]: d = uDict(data)\n\nIn [4]: d['a']\nOut[4]: 1\n\nIn [5]: d[Keylist(['b', 'e[1]', 'z[2]'])]\nOut[5]: 203\n\nIn [6]: d[Keypath('b.e[1].z[2]')]\nOut[6]: 203\n\nIn [7]:\n```\n\n### iList\n\niList is universal object with list and aDict.\n\n```python\nIn [1]: from datajuggler import iList\n\nIn [2]: l = iList()\n   ...: assert l == []\n\nIn [3]: l = iList([1,2,3])\n   ...: assert l == [1,2,3]\n\nIn [4]: l = iList()\n   ...: try:\n   ...:     l[0] = 1\n   ...: except IndexError as e:\n   ...:     print(e)\n   ...:\nlist assignment index out of range\n\nIn [5]: l = iList([1])\n   ...: l[0] = 10\n\nIn [6]: l1 = iList([1,2,3,4,5])\n   ...: l2 = iList([1,2,3,4,5])\n\nIn [7]: assert l1 == l2\n\nIn [8]: l1 = iList([1,2,3,4,5])\n   ...: l2 = list([1,2,3,4,5])\n\nIn [9]: assert l1 == l2\n\nIn [10]: l1 = iList([5,4,3,2,1])\n    ...: l2 = list([1,2,3,4,5])\n    ...: assert l1 != l2\n\nIn [11]: l1 = iList([1, 2, 3])\n\nIn [12]: try:\n    ...:     hash(l1)\n    ...: except AttributeError as e:\n    ...:     print(e)\n    ...:\nunhashable not frozen object.\n\nIn [13]: l1.freeze()\n\nIn [14]: hash(l1)\nOut[14]: 7029740037309777799\n\nIn [15]: try:\n    ...:     l1[0] = 10\n    ...: except AttributeError as e:\n    ...:     print(e)\n    ...:\niList frozen object cannot be modified.\n\nIn [16]: l1.unfreeze()\n\nIn [17]: l1[0] = 10\n\nIn [18]: l = iList([1,2,3])\n\nIn [19]: l.Hello='Python'\n\nIn [20]: l.Hello\nOut[20]: 'Python'\n\nIn [21]: l == [1,2,3]\nOut[21]: True\n\nIn [22]: l.get_attrs()\nOut[22]: {'Hello': 'Python'}\n\nIn [23]:\n```\n\n## class BaseDict\n\nBaseDict is internal base class for custom dictionary.\nthis class has follows methods.\n\n - `update(*args, **kwargs)`\n - `get(key: Hashable, default=None))`\n - `setdefault(key: Hashable, default=None)`\n - `fromkeys(sequence, values, inplace=False)`\n - `fromvalues(sequence, base=1, prefix=None, format=\"{:02}\",inplace=False)`\n - `fromlists(keys: Sequence, values: Sequence, inplace=False)`\n - `to_dict(obj)`\n - `from_dict(obj, factory=None, inplace=False)`\n\n\n### fromkeys()\n\nCreate a new dictionary with keys from iterable and values set to value.\nIf set `True` to `inplace`, perform operation in-place.\n\n\n```python\nIn [1]: from datajuggler.core import BaseDict\n\nIn [2]: data = [ 'January', 'February', 'March', 'April' ]\n\nIn [3]: BaseDict().fromkeys(data,2)\nOut[3]: BaseDict({'January': 2, 'February': 2, 'March': 2, 'April': 2})\n\nIn [4]: d = BaseDict()\n\nIn [5]: d.fromkeys(data, 2, inplace=True)\n\nIn [6]: d\nOut[6]: BaseDict({'January': 2, 'February': 2, 'March': 2, 'April': 2})\n\nIn [7]:\n```\n\n### fromvalues()\n\nCreate a new dictionary from list of values.\nkeys automaticaly generate as interger or str.\n`base` is the starting number.\nif set 'name' to `prefix`, keys will be use 'name01'...\nand if set \"{:03}\" to `format`, keys will \"name_001\".\nSo, set '' to `prefix`, key as str from interger.\nIf set `True` to `inplace`, perform operation in-place.\n\n```python\nIn [7]: BaseDict().fromvalues(data)\nOut[7]: BaseDict({1: 'January', 2: 'February', 3: 'March', 4: 'April'})\n\nIn [8]: BaseDict().fromvalues(data, base=0)\nOut[8]: BaseDict({0: 'January', 1: 'February', 2: 'March', 3: 'April'})\n\nIn [9]: BaseDict().fromvalues(data, base=100)\nOut[9]: BaseDict({100: 'January', 101: 'February', 102: 'March', 103: 'April'})\n\nIn [10]: BaseDict().fromvalues(data, prefix='key_')\nOut[10]: BaseDict({'key_1': 'January', 'key_2': 'February', 'key_3': 'March', 'key_4': 'April'})\n\nIn [11]: d = BaseDict()\n\nIn [12]: d.fromvalues(data, inplace=True)\n\nIn [13]: d\nOut[13]: BaseDict({1: 'January', 2: 'February', 3: 'March', 4: 'April'})\n\nIn [14]:\n```\n\n### fromlists()\n\nCreate a new dictionary from two list as keys and values.\nOnly the number of elements in the shorter of the two lists is processed.\nIf set `True` to `inplace`, perform operation in-place.\n\n\n```python\nIn [14]: keys = [ 'January', 'February', 'March', 'April' ]\n\nIn [15]: values = [ 1, 2, 3, 4 ]\n\nIn [16]: BaseDict().fromlists(keys, values)\nOut[16]: BaseDict({'January': 1, 'February': 2, 'March': 3, 'April': 4})\n\nIn [17]: d = BaseDict()\n\nIn [18]: d.fromlists(keys, values, inplace=True)\n\nIn [19]: d\nOut[19]: BaseDict({'January': 1, 'February': 2, 'March': 3, 'April': 4})\n\nIn [20]:\n```\n\n\n## class IODict\n\nthis class support serialize method.\n\n  - Base64, CSV, INI, JSON, YAML, TOML, XML, query_strings, plist\n\nif not installed PyYAML and/or toml and call from_yaml(), from_tomo(),\nwill raise NotImpelementedError.\n\nIODict is subclass of BaseDict.\n\n - `from_base64(cls, s, subformat=\"json\", encoding=\"utf-8\", **kwargs)`\n - `from_csv(cls, s, columns=None, columns_row=True, **kwargs)`\n - `from_ini(cls, s, **kwargs)`\n - `from_json(self, s, **kwargs)`\n - `from_pickle(cls, s, **kwargs)`\n - `from_plist(cls, s, **kwargs)`\n - `from_query_string(cls, s, **kwargs)`\n - `from_toml(cls, s, **kwargs)`\n - `from_xml(cls, s, **kwargs)`\n - `from_yaml(cls, s, **kwargs)`\n - `from_serializer(cls, s, format, **kwargs)`\n\n - `to_base64(cls, s, subformat=\"json\", encoding=\"utf-8\", **kwargs)`\n - `to_csv(cls, s, columns=None, columns_row=True, **kwargs)`\n - `to_ini(cls, s, **kwargs)`\n - `to_json(self, s, **kwargs)`\n - `to_pickle(cls, s, **kwargs)`\n - `to_plist(cls, s, **kwargs)`\n - `to_query_string(cls, s, **kwargs)`\n - `to_toml(cls, s, **kwargs)`\n - `to_xml(cls, s, **kwargs)`\n - `to_yaml(cls, s, **kwargs)`\n - `to_serializer(cls, s, format, **kwargs)`\n\n\n## Serialization\n\ndatajuggler keep compatibitily for [Serialize](https://github.com/hgrecco/serialize).\nand more easy add customaize serializer and class serializer.\n\ndatajuggler detect following serialization library, and it is automaticaly enable.\n\n - cloudpickle\n - bson\n - dill\n - msgpack\n - serpent\n - phpserialize\n - PyYAML\n - xmllibtodict\n\n```python\nIn [1]: from datajuggler import serializer as io\n\nIn [2]: import decimal\n\nIn [3]: import datetime\n\nIn [4]: data = {\n   ...:   'a': 1,\n   ...:   'b': decimal.Decimal('2'),\n   ...:   'c': datetime.datetime(2020, 5, 24, 8, 20),\n   ...:   'd': datetime.date(1962, 1, 13),\n   ...:   'e': datetime.time(11, 12, 13),\n   ...:   'f': [1, 2, 3, decimal.Decimal('4')]\n   ...:   }\n\nIn [5]: io.dumps(data, format='json')\nOut[5]: b'{\"a\": 1, \"b\": {\"__class_name__\": \"<class \\'decimal.Decimal\\'>\", \"__dumped_obj__\": {\"__type__\": \"Decimal\", \"value\": \"2\"}}, \"c\": {\"__class_name__\": \"<class \\'datetime.datetime\\'>\", \"__dumped_obj__\": {\"__type__\": \"datetime\", \"value\": [2020, 5, 24, 8, 20, 0]}}, \"d\": {\"__class_name__\": \"<class \\'datetime.date\\'>\", \"__dumped_obj__\": {\"__type__\": \"date\", \"value\": [1962, 1, 13]}}, \"e\": {\"__class_name__\": \"<class \\'datetime.time\\'>\", \"__dumped_obj__\": {\"__type__\": \"time\", \"value\": [11, 12, 13]}}, \"f\": [1, 2, 3, {\"__class_name__\": \"<class \\'decimal.Decimal\\'>\", \"__dumped_obj__\": {\"__type__\": \"Decimal\", \"value\": \"4\"}}]}'\n\nIn [6]: io.dumps(data, format='msgpack')\nOut[6]: b\"\\x86\\xa1a\\x01\\xa1b\\x82\\xae__class_name__\\xb9<class 'decimal.Decimal'>\\xae__dumped_obj__\\x82\\xa8__type__\\xa7Decimal\\xa5value\\xa12\\xa1c\\x82\\xae__class_name__\\xbb<class 'datetime.datetime'>\\xae__dumped_obj__\\x82\\xa8__type__\\xa8datetime\\xa5value\\x96\\xcd\\x07\\xe4\\x05\\x18\\x08\\x14\\x00\\xa1d\\x82\\xae__class_name__\\xb7<class 'datetime.date'>\\xae__dumped_obj__\\x82\\xa8__type__\\xa4date\\xa5value\\x93\\xcd\\x07\\xaa\\x01\\r\\xa1e\\x82\\xae__class_name__\\xb7<class 'datetime.time'>\\xae__dumped_obj__\\x82\\xa8__type__\\xa4time\\xa5value\\x93\\x0b\\x0c\\r\\xa1f\\x94\\x01\\x02\\x03\\x82\\xae__class_name__\\xb9<class 'decimal.Decimal'>\\xae__dumped_obj__\\x82\\xa8__type__\\xa7Decimal\\xa5value\\xa14\"\n\nIn [7]: io.dumps(data, format='pickle')\nOut[7]: b\"\\x80\\x04\\x95\\xa8\\x01\\x00\\x00\\x00\\x00\\x00\\x00}\\x94(\\x8c\\x01a\\x94K\\x01\\x8c\\x01b\\x94\\x8c\\x08builtins\\x94\\x8c\\x07getattr\\x94\\x93\\x94\\x8c'datajuggler.serializer.class_serializer\\x94\\x8c\\x16DecimalClassSerializer\\x94\\x93\\x94)\\x81\\x94\\x8c\\x06decode\\x94\\x86\\x94R\\x94}\\x94(\\x8c\\x08__type__\\x94\\x8c\\x07Decimal\\x94\\x8c\\x05value\\x94\\x8c\\x012\\x94u\\x85\\x94R\\x94\\x8c\\x01c\\x94h\\x05h\\x06\\x8c\\x17DatetimeClassSerializer\\x94\\x93\\x94)\\x81\\x94h\\n\\x86\\x94R\\x94}\\x94(h\\x0e\\x8c\\x08datetime\\x94h\\x10]\\x94(M\\xe4\\x07K\\x05K\\x18K\\x08K\\x14K\\x00eu\\x85\\x94R\\x94\\x8c\\x01d\\x94h\\x05h\\x06\\x8c\\x13DateClassSerializer\\x94\\x93\\x94)\\x81\\x94h\\n\\x86\\x94R\\x94}\\x94(h\\x0e\\x8c\\x04date\\x94h\\x10]\\x94(M\\xaa\\x07K\\x01K\\reu\\x85\\x94R\\x94\\x8c\\x01e\\x94h\\x05h\\x06\\x8c\\x13TimeClassSerializer\\x94\\x93\\x94)\\x81\\x94h\\n\\x86\\x94R\\x94}\\x94(h\\x0e\\x8c\\x04time\\x94h\\x10]\\x94(K\\x0bK\\x0cK\\reu\\x85\\x94R\\x94\\x8c\\x01f\\x94]\\x94(K\\x01K\\x02K\\x03h\\x0c}\\x94(h\\x0eh\\x0fh\\x10\\x8c\\x014\\x94u\\x85\\x94R\\x94eu.\"\n\nIn [8]: io.dumps(data, format='yaml')\nOut[8]: b\"a: 1\\nb: !!python/object/apply:decimal.Decimal\\n- '2'\\nc: 2020-05-24 08:20:00\\nd: 1962-01-13\\ne: !!python/object/apply:datetime.time\\n- !!binary |\\n  CwwNAAAA\\nf:\\n- 1\\n- 2\\n- 3\\n- !!python/object/apply:decimal.Decimal\\n  - '4'\\n\"\n\nIn [9]: s = io.dumps(data, format='yaml')\n\nIn [10]: io.loads(s, format='yaml')\nOut[10]:\n{'a': 1,\n 'b': Decimal('2'),\n 'c': datetime.datetime(2020, 5, 24, 8, 20),\n 'd': datetime.date(1962, 1, 13),\n 'e': datetime.time(11, 12, 13),\n 'f': [1, 2, 3, Decimal('4')]}\n\nIn [11]:\n```\n\n### Custom Serializer\n\nfollowing exmaple is cloudpickle of datajuggler.\n\n```python\nfrom datajuggler.serializer.abstract import (\n    AbstractSerializer, register_serializer\n)\n\ntry:\n    import cloudpickle\n    cloudpickle_enable = True\nexcept ImportError:  # pragma: no cover\n    cloudpickle_enable = False\n    cloudpickle = AbstractSerializer()\n\nclass CloudpickleSerializer(AbstractSerializer):\n    def __init__(self):\n        super().__init__(format='cloudpickle',\n                         extension=['pickle', 'cpickle'],\n                         package='cloudpickle',\n                         enable=cloudpickle_enable,\n                         overwrite=True)\n\n    def loads(self, s, **kwargs):\n        data = cloudpickle.loads(s, **kwargs)\n        return data\n\n    def dumps(self, d, **kwargs):\n        data = cloudpickle.dumps(d, **kwargs)\n        return data\n\nregister_serializer(CloudpickleSerializer)\n```\n\n\n### class Seriailizer\n\nin case of datetime.dateitime, see follows code.\n\n```python\nimport datetime\nfrom datajuggler.serializer.abstract import (\n    AbstractClassSerializer, register_serializer\n)\nfrom datajuggler.validator import TypeValidator as _type\n\nclass DatetimeClassSerializer(io.AbstractClassSerializer):\n    def __init__(self, cls=datetime.datetime):\n        super().__init__(cls)\n\n    def encode(self, obj):\n        if _type.is_datetime(obj):\n            return {\n                \"__type__\": \"datetime\",\n                \"value\": [\n                     obj.year,\n                     obj.month,\n                     obj.day,\n                     obj.hour,\n                     obj.minute,\n                     obj.second,\n                    ],\n                }\n        else:\n            super().encode(obj)\n\n    def decode(self, obj):\n        v = obj.get(\"__type__\")\n        if v == \"datetime\":\n            return datetime.datetime(*obj[\"value\"])\n\n        self.raise_error(obj)\n\nregister_serializer(DatetimeClassSerializer)\n```\n\n\nand provide helper functions.\n\n - `get_format_by_path(path)`\n - `get_serializer_by_format(format)`\n - `get_serializers_extensions()`\n - `autodetect_format(s)`\n - `validate_file(s)`\n - `is_url(s)`\n - `is_dsn(s)`\n - `read_contents(s)`\n - `read_database(s)`\n - `read_url(url, **options)`\n - `read_file(filepath, encording=\"utf-8\", **options)`\n - `write_file(filepath, content, encording=\"utf-8\", **options)`\n\n### read_contents()\n\nread contets from filepath.\nif [requests](https://github.com/psf/requests) installed and filepath is starts with 'http://' or 'https://', read contents from URL.\nif [dataset](https://dataset.readthedocs.io/en/latest/) installed and filepath is starts with\n'sqlite://' or 'mysql://', 'postgresql://' read contents form DATABASE.\n\n```python\nIn [1]:  from datajuggler import serializer as io\n\nIn [2]: io.read_contents('sqlite:///users.sqlite#users')\nOut[2]:\n[{'id': 1, 'name': 'David Coverdale', 'age': 71, 'belongs': 'Whitesnake'},\n {'id': 2, 'name': 'Neal Schon ', 'age': 68, 'belongs': 'Journey'},\n {'id': 3, 'name': 'Tom Scholz', 'age': 75, 'belongs': 'Boston'},\n {'id': 4, 'name': 'David Gilmour', 'age': 75, 'belongs': 'Pink Floyd'},\n {'id': 5, 'name': 'Ann Wilson', 'age': 71, 'belongs': 'Heart'},\n {'id': 6, 'name': 'Nacy Wilson', 'age': 67, 'belongs': 'Heart'}]\n\nIn [3]: from datajuggler import aDict\n\nIn [4]: class User(aDict):\n   ...:     pass\n   ...:\n\nIn [5]: users = io.read_contents('sqlite:///users.sqlite#users',row_type=User)\n\nIn [6]: users[0].name\nOut[6]: 'David Coverdale'\n\nIn [7]: del users\n\nIn [8]: users = aDict('sqlite:///users.sqlite#users')._values\n\nIn [9]: users\nOut[9]:\n[aDict({'id': 1, 'name': 'David Coverdale', 'age': 71, 'belongs': 'Whitesnake'}),\n aDict({'id': 2, 'name': 'Neal Schon ', 'age': 68, 'belongs': 'Journey'}),\n aDict({'id': 3, 'name': 'Tom Scholz', 'age': 75, 'belongs': 'Boston'}),\n aDict({'id': 4, 'name': 'David Gilmour', 'age': 75, 'belongs': 'Pink Floyd'}),\n aDict({'id': 5, 'name': 'Ann Wilson', 'age': 71, 'belongs': 'Heart'}),\n aDict({'id': 6, 'name': 'Nacy Wilson', 'age': 67, 'belongs': 'Heart'})]\n\nIn [10]:\n```\n\nif you want filtering data, pass to kwargs as follows.\n\n```python\nIn [1]: from datajuggler import serializer as io\n\nIn [2]: io.read_contents('sqlite:///users.sqlite#users')\nOut[2]:\n[{'id': 1, 'name': 'David Coverdale', 'age': 71, 'belongs': 'Whitesnake'},\n {'id': 2, 'name': 'Neal Schon ', 'age': 68, 'belongs': 'Journey'},\n {'id': 3, 'name': 'Tom Scholz', 'age': 75, 'belongs': 'Boston'},\n {'id': 4, 'name': 'David Gilmour', 'age': 75, 'belongs': 'Pink Floyd'},\n {'id': 5, 'name': 'Ann Wilson', 'age': 71, 'belongs': 'Heart'},\n {'id': 6, 'name': 'Nacy Wilson', 'age': 67, 'belongs': 'Heart'}]\n\nIn [3]: io.read_contents('sqlite:///users.sqlite#users', id={'==': 2})\nOut[3]: [{'id': 2, 'name': 'Neal Schon ', 'age': 68, 'belongs': 'Journey'}]\n\nIn [4]: io.read_contents('sqlite:///users.sqlite#users', id={'>=': 3})\nOut[4]:\n[{'id': 3, 'name': 'Tom Scholz', 'age': 75, 'belongs': 'Boston'},\n {'id': 4, 'name': 'David Gilmour', 'age': 75, 'belongs': 'Pink Floyd'},\n {'id': 5, 'name': 'Ann Wilson', 'age': 71, 'belongs': 'Heart'},\n {'id': 6, 'name': 'Nacy Wilson', 'age': 67, 'belongs': 'Heart'}]\n\nIn [5]: io.read_contents('sqlite:///users.sqlite#users', id={'between': [2,4]})\nOut[5]:\n[{'id': 2, 'name': 'Neal Schon ', 'age': 68, 'belongs': 'Journey'},\n {'id': 3, 'name': 'Tom Scholz', 'age': 75, 'belongs': 'Boston'},\n {'id': 4, 'name': 'David Gilmour', 'age': 75, 'belongs': 'Pink Floyd'}]\n\nIn [6]: io.read_contents('sqlite:///users.sqlite#users', name={'like': '%WILSON'\n   ...: })\nOut[6]:\n[{'id': 5, 'name': 'Ann Wilson', 'age': 71, 'belongs': 'Heart'},\n {'id': 6, 'name': 'Nacy Wilson', 'age': 67, 'belongs': 'Heart'}]\n\nIn [7]:\n```\n\nand pass to `row_type` parameter as followings.\n\n```python\nIn [17]: d = io.read_contents('sqlite:///users.sqlite#users', row_type=aDict)\n\nIn [18]: users = list(d)\n\nIn [19]: users[0]\nOut[19]: aDict({'id': 1, 'name': 'David Coverdale', 'age': 71, 'belongs': 'Whitesnake'})\n\nIn [20]: users[0].name\nOut[20]: 'David Coverdale'\n\nIn [21]:\n```\n\nSee also: [dataset document](https://dataset.readthedocs.io/en/latest/)\n\ncurrently, not support write_database().\n\n\n### base64 and subformat.\n\nbase64 serializer accept subformat.\nif pass 'base64,json' to `format`,  recognaized as 'format, subformat'.\n\n - dumps: if set 'subformat', first encoding subformat then encoding base64\n - loads: if set 'subformat', first decoding base64 then decoding subformat\n\n\n```pytho\nIn [2]: from datajuggler import serializer as io\n\nIn [3]: import datetime\n\nIn [4]: import decimal\n\nIn [5]: data = {'a': 1,\n   ...:   'b': decimal.Decimal('2'),\n   ...:   'c': datetime.datetime(2020, 5, 24, 8, 20),\n   ...:   'd': datetime.date(1962, 1, 13),\n   ...:   'e': datetime.time(11, 12, 13),\n   ...:   'f': [1, 2, 3, decimal.Decimal('4')]}\n\nIn [6]: io.dumps(data, format='base64,yaml:custom')\nOut[6]: b'YTogMQpiOiAhPHRhZzpnaXRodWIuY29tL2lpc2FrYTUxL2RhdGFqdWdnbGVyLDIwMjI6cHl0aG9uL2RhdGFqdWdnbGVyPgogIF9fY2xhc3NfbmFtZV9fOiA8Y2xhc3MgJ2RlY2ltYWwuRGVjaW1hbCc+CiAgX19kdW1wZWRfb2JqX186CiAgICBfX3R5cGVfXzogRGVjaW1hbAogICAgdmFsdWU6ICcyJwpjOiAhPHRhZzpnaXRodWIuY29tL2lpc2FrYTUxL2RhdGFqdWdnbGVyLDIwMjI6cHl0aG9uL2RhdGFqdWdnbGVyPgogIF9fY2xhc3NfbmFtZV9fOiA8Y2xhc3MgJ2RhdGV0aW1lLmRhdGV0aW1lJz4KICBfX2R1bXBlZF9vYmpfXzoKICAgIF9fdHlwZV9fOiBkYXRldGltZQogICAgdmFsdWU6CiAgICAtIDIwMjAKICAgIC0gNQogICAgLSAyNAogICAgLSA4CiAgICAtIDIwCiAgICAtIDAKZDogITx0YWc6Z2l0aHViLmNvbS9paXNha2E1MS9kYXRhanVnZ2xlciwyMDIyOnB5dGhvbi9kYXRhanVnZ2xlcj4KICBfX2NsYXNzX25hbWVfXzogPGNsYXNzICdkYXRldGltZS5kYXRlJz4KICBfX2R1bXBlZF9vYmpfXzoKICAgIF9fdHlwZV9fOiBkYXRlCiAgICB2YWx1ZToKICAgIC0gMTk2MgogICAgLSAxCiAgICAtIDEzCmU6ICE8dGFnOmdpdGh1Yi5jb20vaWlzYWthNTEvZGF0YWp1Z2dsZXIsMjAyMjpweXRob24vZGF0YWp1Z2dsZXI+CiAgX19jbGFzc19uYW1lX186IDxjbGFzcyAnZGF0ZXRpbWUudGltZSc+CiAgX19kdW1wZWRfb2JqX186CiAgICBfX3R5cGVfXzogdGltZQogICAgdmFsdWU6CiAgICAtIDExCiAgICAtIDEyCiAgICAtIDEzCmY6Ci0gMQotIDIKLSAzCi0gITx0YWc6Z2l0aHViLmNvbS9paXNha2E1MS9kYXRhanVnZ2xlciwyMDIyOnB5dGhvbi9kYXRhanVnZ2xlcj4KICBfX2NsYXNzX25hbWVfXzogPGNsYXNzICdkZWNpbWFsLkRlY2ltYWwnPgogIF9fZHVtcGVkX29ial9fOgogICAgX190eXBlX186IERlY2ltYWwKICAgIHZhbHVlOiAnNCcK'\n\nIn [7]: s = io.dumps(data, format='base64,yaml:custom')\n\nIn [8]: io.loads(s, format='base64,yaml:custom')\nOut[8]:\n{'a': 1,\n 'b': Decimal('2'),\n 'c': datetime.datetime(2020, 5, 24, 8, 20),\n 'd': datetime.date(1962, 1, 13),\n 'e': datetime.time(11, 12, 13),\n 'f': [1, 2, 3, Decimal('4')]}\n\nIn [9]: io.loads(s, format='base64')\nOut[9]: b\"a: 1\\nb: !<tag:github.com/iisaka51/datajuggler,2022:python/datajuggler>\\n  __class_name__: <class 'decimal.Decimal'>\\n  __dumped_obj__:\\n    __type__: Decimal\\n    value: '2'\\nc: !<tag:github.com/iisaka51/datajuggler,2022:python/datajuggler>\\n  __class_name__: <class 'datetime.datetime'>\\n  __dumped_obj__:\\n    __type__: datetime\\n    value:\\n    - 2020\\n    - 5\\n    - 24\\n    - 8\\n    - 20\\n    - 0\\nd: !<tag:github.com/iisaka51/datajuggler,2022:python/datajuggler>\\n  __class_name__: <class 'datetime.date'>\\n  __dumped_obj__:\\n    __type__: date\\n    value:\\n    - 1962\\n    - 1\\n    - 13\\ne: !<tag:github.com/iisaka51/datajuggler,2022:python/datajuggler>\\n  __class_name__: <class 'datetime.time'>\\n  __dumped_obj__:\\n    __type__: time\\n    value:\\n    - 11\\n    - 12\\n    - 13\\nf:\\n- 1\\n- 2\\n- 3\\n- !<tag:github.com/iisaka51/datajuggler,2022:python/datajuggler>\\n  __class_name__: <class 'decimal.Decimal'>\\n  __dumped_obj__:\\n    __type__: Decimal\\n    value: '4'\\n\"\n\nIn [10]:\n```\n\n### base64 and encrypt/decrypt.\nbase64 serializer accept password.\nIf set 'password', perform operation encrypt/decrypt for dumps()/loads().\n\n - dumps()\n   - raw_data -> subformat encode -> encrypt -> base64 encode\n - loads()\n   - base64 decode -> decrypt -> subformat decode -> raw_data\n\n\n```python\nIn [5]: from datajuggler import serializer as io\n\nIn [6]: data = { 'January': 1, 'February': 2, 'March': 3, 'April': 4 }\n\nIn [7]: s = io.dumps(data, format='base64, json')\n\nIn [8]: io.loads(s, format='base64, json')\nOut[8]: {'January': 1, 'February': 2, 'March': 3, 'April': 4}\n\nIn [9]: s = io.dumps(data, format='base64, json', password='python123')\n\nIn [10]: io.loads(s, format='base64, json', password='python123')\nOut[10]: {'January': 1, 'February': 2, 'March': 3, 'April': 4}\n\nIn [11]: s\nOut[11]: b'ra3xLVfJAfeEH3MTZ0FBQUFBQmpXZTl1WU1VU1Q2bDhWTG5iWF9oMEgtMjB2d1BNWUFhX2Y2cTZkcmgwZkFPQzhjV3Q2amY2QjlVbGFHODYzbUtYaHZPNjQ0N0J5OUY4R1oxSFBaVjV0VVFqY0tfbzgzVXBzQ2lCdWVORGpyMkhqVEhLRVMwNkxvbm5LbU5VZmlCWDR3QUlxekN6dGVYX2VwcUdWUHpvLVFwcXhBPT0='\n\nIn [12]: import base64\n\nIn [13]: base64.b64decode(s)\nOut[13]: b'\\xad\\xad\\xf1-W\\xc9\\x01\\xf7\\x84\\x1fs\\x13gAAAAABjWe9uYMUST6l8VLnbX_h0H-20vwPMYAa_f6q6drh0fAOC8cWt6jf6B9UlaG863mKXhvO6447By9F8GZ1HPZV5tUQjcK_o83UpsCiBueNDjr2HjTHKES06LonnKmNUfiBX4wAIqzCzteX_epqGVPzo-QpqxA=='\n\nIn [14]: io.loads(s, format='base64')\nOut[14]: b'\\xad\\xad\\xf1-W\\xc9\\x01\\xf7\\x84\\x1fs\\x13gAAAAABjWe9uYMUST6l8VLnbX_h0H-20vwPMYAa_f6q6drh0fAOC8cWt6jf6B9UlaG863mKXhvO6447By9F8GZ1HPZV5tUQjcK_o83UpsCiBueNDjr2HjTHKES06LonnKmNUfiBX4wAIqzCzteX_epqGVPzo-QpqxA=='\n\nIn [15]: io.loads(s, format='base64', password='python123')\nOut[15]: b'{\"January\": 1, \"February\": 2, \"March\": 3, \"April\": 4}'\n\nIn [16]:\n```\n\n\n## class aDict\n\nAllow to access using dot notation for dictionary.\nThis class is inspired by [munch](https://github.com/Infinidat/munch).\naDict is subclass of BaseDict.\n\nThis class is inspired by [munch](https://github.com/Infinidat/munch) and [adict](https://github.com/mewwts/addict).\n\n```python\nIn [1]: from datajuggler import aDict\n\nIn [2]: d = aDict()\n\nIn [3]: d.python = 'great'\n\nIn [4]: d\nOut[4]: aDict({'python': 'great'})\n\nIn [5]: d['python']\nOut[5]: 'great'\n\nIn [6]: data = {'one': {'two': {'three': {'four': 4 }}}}\n\nIn [7]: d = aDict(data)\n\nIn [8]: d\nOut[8]: aDict({'one': aDict({'two': aDict({'three': aDict({'four': 4})})})})\n\nIn [9]: d.one.two.three.four\nOut[9]: 4\n\nIn [10]:\n```\n\naDict support hashable and immutable dictionary.\n\n - `freeze()` - freeze object for immutable.\n - `unfreeze()` - unfreeze object\n\nbuilt-in function `hash()` acceptfrozen object.\nSo, frozen aDict object is able to set as key to dictionary.\n\n```python\nIn [1]: from datajuggler import aDict\n\nIn [2]: d = aDict({'one': {'two': {'three': {'four': 4 }}}})\n\nIn [3]: d\nOut[3]: aDict({'one': aDict({'two': aDict({'three': aDict({'four': 4})})})})\n\nIn [4]: d.one.two.three.four = 1\n\nIn [5]: d.freeze()\n\nIn [6]: try:\n   ...:     d.one.two.three.four = 2\n   ...: except AttributeError as e:\n   ...:     print(e)\n   ...:\naDict frozen object cannot be modified.\n\nIn [7]: d.unfreeze()\n\nIn [8]: d.one.two.three.four = 2\n\nIn [9]:\n```\n\n\n## class Keypath and Keylist\n\nThis is utility class for uDict and manage for keypath and Keylist\n\n```python\ndata = { \"a\": 1,\n         \"b\": { \"c\": { \"x\": 2, \"y\": 3, },\n                \"d\": { \"x\": 4, \"y\": 5, },\n                \"e\": [ { \"x\": 1, \"y\": -1, \"z\": [101, 201, 301], },\n                       { \"x\": 2, \"y\": -2, \"z\": [102, 202, 302], },\n                       { \"x\": 3, \"y\": -3, \"z\": [103, 203, 303], },\n                     ],\n              },\n      }\n```\nKeylist(['b','e[1]', 'z[0]']) point to value `102`.\nKeypath(['b.e[1].z[0]']) point to value `102`.\n\nindexes of list should be integer or str([index]).\n\n```python\nIn [7]: Keylist(['b', 'e[1]', 'z[0]'])\nOut[7]: Keylist(['b', 'e', 1, 'z', 0])\n```\n\n### methods for Keylist class\n\n - `keylistss(d: dict)`\n - `to_keypath(d: dict)`\n - `list2path(keylist)`\n - `value()`\n - `validate(keylist)`\n\n### methods for Keypath class\n - `keypaths(d: dict)`\n - `to_keylist(keypath)`\n - `path2list(keypath)`\n - `value()`\n - `validate(keypath)`\n\n### keylists()\n\nkeylists() suppport list of key as keys.\n\n - `keylists(obj, indexes=False)`\n\n```python\nIn [1]: from datajuggler import keylists\n   ...:\n   ...: data = { \"a\": 1,\n   ...:          \"b\": { \"c\": { \"x\": 2, \"y\": 3, },\n   ...:                 \"d\": { \"x\": 4, \"y\": 5, },\n   ...:               },\n   ...:         }\n   ...:\n   ...: expect = [ [\"a\"],\n   ...:            [\"b\"],\n   ...:            [\"b\", \"c\"],\n   ...:            [\"b\", \"c\", \"x\"],\n   ...:            [\"b\", \"c\", \"y\"],\n   ...:            [\"b\", \"d\"],\n   ...:            [\"b\", \"d\", \"x\"],\n   ...:            [\"b\", \"d\", \"y\"],\n   ...:        ]\n   ...: result = keylists(data)\n   ...: assert result == expect\n\nIn [2]: data = { 1: { 1: 1, },\n   ...:          2: { 2: 1, },\n   ...:          3: { None: 1, },\n   ...:        }\n   ...: expect = [[1], [1, 1], [2], [2, 2], [3], [3, None]]\n   ...: result = keylists(data)\n   ...: assert result == expect\n\n   ...:                        { \"x\": 2, \"y\": -2, \"z\": [2, 3, 4], },\n   ...:                        { \"x\": 3, \"y\": -3, \"z\": [3, 4, 5], },\n   ...:                      ],\n   ...:               },\n   ...:        }\n   ...: expect = [\n   ...:     [\"a\"],\n   ...:     [\"b\"],\n   ...:     [\"b\", \"c\"],\n   ...:     [\"b\", \"c\", \"x\"],\n   ...:     [\"b\", \"c\", \"y\"],\n   ...:     [\"b\", \"d\"],\n   ...:     [\"b\", \"d\", \"x\"],\n   ...:     [\"b\", \"d\", \"y\"],\n   ...:     [\"b\", \"e\"],\n   ...:     [\"b\", \"e[0]\"],\n   ...:     [\"b\", \"e[0]\", \"x\"],\n   ...:     [\"b\", \"e[0]\", \"y\"],\n   ...:     [\"b\", \"e[0]\", \"z\"],\n   ...:     [\"b\", \"e[0]\", \"z[0]\"],\n   ...:     [\"b\", \"e[0]\", \"z[1]\"],\n   ...:     [\"b\", \"e[0]\", \"z[2]\"],\n   ...:     [\"b\", \"e[1]\"],\n   ...:     [\"b\", \"e[1]\", \"x\"],\n   ...:     [\"b\", \"e[1]\", \"y\"],\n   ...:     [\"b\", \"e[1]\", \"z\"],\n   ...:     [\"b\", \"e[1]\", \"z[0]\"],\n   ...:     [\"b\", \"e[1]\", \"z[1]\"],\n   ...:     [\"b\", \"e[1]\", \"z[2]\"],\n   ...:     [\"b\", \"e[2]\"],\n   ...:     [\"b\", \"e[2]\", \"x\"],\n   ...:     [\"b\", \"e[2]\", \"y\"],\n   ...:     [\"b\", \"e[2]\", \"z\"],\n   ...:     [\"b\", \"e[2]\", \"z[0]\"],\n   ...:     [\"b\", \"e[2]\", \"z[1]\"],\n   ...:     [\"b\", \"e[2]\", \"z[2]\"],\n   ...: ]\n   ...: result  = keylists(data, indexes=True)\n   ...: result.sort()\n   ...: assert result == expect\n\nIn [4]: data = { \"a\": { \"b\": [\n   ...:                    [1, 2],\n   ...:                    [3, 4, 5],\n   ...:                    [ { \"x\": 1, \"y\": -1, }, ],\n   ...:                  ],\n   ...:               },\n   ...:        }\n   ...: expect = [ [\"a\"],\n   ...:            [\"a\", \"b\"],\n   ...:            [\"a\", \"b[0]\"],\n   ...:            [\"a\", \"b[0][0]\"],\n   ...:            [\"a\", \"b[0][1]\"],\n   ...:            [\"a\", \"b[1]\"],\n   ...:            [\"a\", \"b[1][0]\"],\n   ...:            [\"a\", \"b[1][1]\"],\n   ...:            [\"a\", \"b[1][2]\"],\n   ...:            [\"a\", \"b[2]\"],\n   ...:            [\"a\", \"b[2][0]\"],\n   ...:            [\"a\", \"b[2][0]\", \"x\"],\n   ...:            [\"a\", \"b[2][0]\", \"y\"],\n   ...:         ]\n   ...: result = keylists(data, indexes=True)\n   ...: result.sort()\n   ...: assert result == expect\n\nIn [5]: data = { \"a\": 1,\n   ...:          \"b\": { \"c\": { \"x\": 2, \"y\": 3, },\n   ...:                 \"d\": { \"x\": 4, \"y\": 5, },\n   ...:                 \"e\": [ { \"x\": 1, \"y\": -1, \"z\": [1, 2, 3], },\n   ...:                        { \"x\": 2, \"y\": -2, \"z\": [2, 3, 4], },\n   ...:                        { \"x\": 3, \"y\": -3, \"z\": [3, 4, 5], },\n   ...:                      ],\n   ...:               },\n   ...:       }\n   ...: expect = [ [\"a\"],\n   ...:            [\"b\"],\n   ...:            [\"b\", \"c\"],\n   ...:            [\"b\", \"c\", \"x\"],\n   ...:            [\"b\", \"c\", \"y\"],\n   ...:            [\"b\", \"d\"],\n   ...:            [\"b\", \"d\", \"x\"],\n   ...:            [\"b\", \"d\", \"y\"],\n   ...:            [\"b\", \"e\"],\n   ...:        ]\n   ...: result = keylists(data, indexes=False)\n   ...: result.sort()\n   ...: assert result == expect\n\nIn [6]:\n```\n\n### keypaths()\n\nKeypath support attribute-styple access to value (dot-notation by default).\n\n - `keypaths(obj, separator, indexes=False)`\n\n```python\nIn [1]: from datajuggler import keypaths\n   ...:\n   ...: data = { \"a\": 1,\n   ...:          \"b\": { \"c\": { \"x\": 2, \"y\": 3 },\n   ...:                 \"d\": { \"x\": 4, \"y\": 5 },\n   ...:          },\n   ...: }\n   ...: expect = [ \"a\",\n   ...:            \"b\",\n   ...:            \"b.c\",\n   ...:            \"b.c.x\",\n   ...:            \"b.c.y\",\n   ...:            \"b.d\",\n   ...:            \"b.d.x\",\n   ...:            \"b.d.y\",\n   ...:       ]\n   ...:\n   ...: result = keypaths(data)\n   ...: assert result == expect\n\nIn [2]: data = { \"a\": 1,\n   ...:          \"b\": { \"c\": { \"x\": 2, \"y\": 3 },\n   ...:          \"d\": { \"x\": 4, \"y\": 5 },\n   ...:     },\n   ...: }\n   ...: expect = [ \"a\",\n   ...:            \"b\",\n   ...:            \"b c\",\n   ...:            \"b c x\",\n   ...:            \"b c y\",\n   ...:            \"b d\",\n   ...:            \"b d x\",\n   ...:            \"b d y\",\n   ...:       ]\n   ...: result = keypaths(data, separator=\" \")\n   ...: assert result == expect\n\nIn [3]: data = { 1: { 1: 1 }, 2: { 2: 1 }, 3: { 3: 1 } }\n   ...: expect = ['1', '1.1', '2', '2.2', '3', '3.3']\n   ...: result = keypaths(data)\n   ...: assert result == expect\n\nIn [4]: data = { \"a\": 1,\n   ...:          \"b\": { \"c\": { \"x\": 2, \"y\": 3, },\n   ...:                 \"d\": { \"x\": 4, \"y\": 5, },\n   ...:                 \"e\": [ { \"x\": 1, \"y\": -1, \"z\": [1, 2, 3], },\n   ...:                        { \"x\": 2, \"y\": -2, \"z\": [2, 3, 4], },\n   ...:                        { \"x\": 3, \"y\": -3, \"z\": [3, 4, 5], },\n   ...:                 ],\n   ...:             },\n   ...:         }\n   ...: expect = [ \"a\",\n   ...:            \"b\",\n   ...:            \"b.c\", \"b.c.x\", \"b.c.y\", \"b.d\", \"b.d.x\", \"b.d.y\", \"b.e\",\n   ...:            \"b.e[0]\", \"b.e[0].x\", \"b.e[0].y\", \"b.e[0].z\",\n   ...:            \"b.e[0].z[0]\", \"b.e[0].z[1]\", \"b.e[0].z[2]\",\n   ...:            \"b.e[1]\", \"b.e[1].x\", \"b.e[1].y\", \"b.e[1].z\",\n   ...:            \"b.e[1].z[0]\", \"b.e[1].z[1]\", \"b.e[1].z[2]\",\n   ...:            \"b.e[2]\", \"b.e[2].x\", \"b.e[2].y\", \"b.e[2].z\",\n   ...:            \"b.e[2].z[0]\", \"b.e[2].z[1]\", \"b.e[2].z[2]\",\n   ...:     ]\n   ...:\n   ...: result = keypaths(data, indexes=True)\n   ...: assert result == expect\n\nIn [5]: data = { \"a\": 1,\n   ...:          \"b\": {\n   ...:             \"c\": { \"x\": 2, \"y\": 3, },\n   ...:             \"d\": { \"x\": 4, \"y\": 5, },\n   ...:             \"e\": [ { \"x\": 1, \"y\": -1, \"z\": [1, 2, 3], },\n   ...:                    { \"x\": 2, \"y\": -2, \"z\": [2, 3, 4], },\n   ...:                    { \"x\": 3, \"y\": -3, \"z\": [3, 4, 5], },\n   ...:                  ],\n   ...:             },\n   ...:         }\n   ...: expect = [ \"a\",\n   ...:            \"b\",\n   ...:            \"b.c\",\n   ...:            \"b.c.x\",\n   ...:            \"b.c.y\",\n   ...:            \"b.d\",\n   ...:            \"b.d.x\",\n   ...:            \"b.d.y\",\n   ...:            \"b.e\",\n   ...:        ]\n   ...: result = keypaths(data, indexes=False)\n   ...: assert result == expect\n\nIn [6]: data  = { \"a\": { \"b\": [ [1, 2],\n   ...:                         [3, 4, 5],\n   ...:                         [ { \"x\": 1, \"y\": -1, }, ],\n   ...:                   ],\n   ...:             },\n   ...:      }\n   ...: expect = [ \"a\",\n   ...:            \"a.b\",\n   ...:            \"a.b[0]\",\n   ...:            \"a.b[0][0]\",\n   ...:            \"a.b[0][1]\",\n   ...:            \"a.b[1]\",\n   ...:            \"a.b[1][0]\",\n   ...:            \"a.b[1][1]\",\n   ...:            \"a.b[1][2]\",\n   ...:            \"a.b[2]\",\n   ...:            \"a.b[2][0]\",\n   ...:            \"a.b[2][0].x\",\n   ...:            \"a.b[2][0].y\",\n   ...: ]\n   ...: result = keypaths(data, indexes=True)\n   ...: assert result == expect\n\nIn [7]:\n```\n\n### list2path() and path2list()\nConvert from/to keylists and keypaths.\n\n```python\nIn [1]: from datajuggler import Keylist, Keypath\n   ...:\n   ...: data = ['x', 'y', 'z']\n   ...: expect = ['x.y.z']\n   ...:\n   ...: result = Keylist.list2path(data)\n   ...: assert result == expect\n\nIn [2]: expect = ['x_y_z']\n   ...: result = Keylist.list2path(data, separator='_')\n   ...: assert result == expect\n\nIn [3]: data = [['x', 'y', 'z'], ['a', 'b', 'c']]\n   ...: expect = ['x.y.z', 'a.b.c']\n   ...: result = Keylist.list2path(data)\n   ...: assert result == expect\n\nIn [4]: data = 'x.y.z'\n   ...: expect = ['x', 'y', 'z']\n   ...: result = Keypath.path2list(data)\n   ...: assert result == expect\n\nIn [5]: data = 'x_y_z'\n   ...: expect = ['x', 'y', 'z']\n   ...: result = Keypath.path2list(data, separator='_')\n   ...: assert result == expect\n\nIn [6]: data = ['x.y.z', 'a.b.c']\n   ...: expect = [['x', 'y', 'z'], ['a', 'b', 'c']]\n   ...: result = Keypath.path2list(data)\n   ...: assert result == expect\n\nIn [7]:\n```\n\n## class uDict\nuDict is utilized dictionary which is subclass of IODict.\nThis class is inspired by [python-benedict](https://github.com/fabiocaccamo/python-benedict).\nuDict support keypath and keylist.\n\nuDict has following  methods.\n\n - `clean(d1: dict, strings=True, collections=True,\n          inplace=False, factory=dict)`\n - `clone(d1: dict, empty=False, memo=None)`\n - `compare(d1: dict, d2: dict, keys=None, thrown_error=False)`\n - `counts(pattern, d=None, count_for\"key\", wild=False, verbatim=False)`\n - `filter(predicate, d=None, factory=dict)`\n - `get_keys(d=None, output_as=None)`\n - `get_values(keys, d=None)`\n - `groupby(seq, key, factory=dict)`\n - `invert(d=None, flat=False, inplace=False, factory=dict)`\n - `keylists(d=None, indexes=False)`\n - `keypaths(d=None, indexes=False, separator=\".\")`\n - `map(func, d=None, map_for=None, inplace=False, factory=dict)`\n - `merge(other, d=None, overwrite=False, inplace=False, factory=dict)`\n - `move(key_src, key_dest, d=None, overwrite=False, inplace=False, factory=dict)`\n - `nest(items, key, patrent_key, children_key)`\n - `rename(key, key_new, d=None, case_name=None, overwrite=False,\n           inplace=False, factory=dict)`\n - `remove(keys, d=None, inplace=False, factory=dict)`\n - `subset(keys, d=None, default=None, use_keypath=False,\n           separator=\".\", inplace=False, factory=dict)`\n - `find(keys, d=None, default=None, first_one=True, factory=dict)`\n - `search(query, d=None, search_for=\"key\", exact=False, ignore_case=False)`\n - `sort(d=None, sort_by=\"key\", reverse=False, inplace=False, factory=dict)`\n - `swap(key1, key2, d=None, inplace=False, factory=dict)`\n - `flatten(d=None, separator=\".\", inplace=False, factory=dict)`\n - `unflatten(d=None, default=None, separator=\".\", inplace=False, factory=dict)`\n - `traverse(callback, d=None, parents=[], *args, **kwargs)`\n - `unique(d=None)`\n - `get_items(loc, value, d=None, func=None,\n                   separator='.',inplace=False,  factory=dict)`\n - `pop_items(loc, value, d=None, func=None,\n                   separator='.',inplace=False,  factory=dict)`\n - `del_items(loc, value, d=None, func=None,\n                   separator='.',inplace=False,  factory=dict)`\n - `set_items(loc, value, d=None, func=None,\n                   separator='.',inplace=False,  factory=dict)`\n\nhelper functions are defined in datajuggler.dicthelper for normal dict objects.\n\n - `d_clean()`\n - `d_clone()`\n - `d_compare()`\n - `d_counts()`\n - `d_filter()`\n - `d_groupby()`\n - `d_invert()`\n - `d_map()`\n - `d_merge()`\n - `d_move()`\n - `d_rename()`\n - `d_remove()`\n - `d_nest()`\n - `d_subset()`\n - `d_find()`\n - `d_sort()`\n - `d_search()`\n - `d_swap()`\n - `d_flatten()`\n - `d_unflatten()`\n - `d_traverse()`\n - `d_unique()`\n - `get_keys()`\n - `get_values()`\n - `get_items()`\n - `pop_items()`\n - `del_items()`\n - `set_items()`\n\n### clean() and d_clean()\n\n```python\ndef clean(self,\n        obj: Optional[dict]=None,\n        strings=True,\n        collections=True,\n        inplace: bool=False,\n        factory: Optional[Type[dict]]=None,\n    ):\n```\n\n```python\ndef d_clean(\n        obj: dict,\n        strings=True,\n        collections=True,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ):\n```\n\nClean the current dict instance removing all empty values:\n\n    None, '', {}, [], ().\n\nIf strings or collections (dict, list, set, tuple) flags are False,\nrelated empty values will not be deleted.\n\n\n```python\nIn [1]: from datajuggler import aDict\n   ...: from datajuggler.dicthelper import d_clean\n   ...:\n   ...: data = {\n   ...:     \"a\": {},\n   ...:     \"b\": {\"x\": 1},\n   ...:     \"c\": [],\n   ...:     \"d\": [0, 1],\n   ...:     \"e\": 0.0,\n   ...:     \"f\": \"\",\n   ...:     \"g\": None,\n   ...:     \"h\": \"0\",\n   ...: }\n   ...:\n   ...: expect = {\n   ...:     \"b\": {\"x\": 1},\n   ...:     \"d\": [0, 1],\n   ...:     \"e\": 0.0,\n   ...:     \"h\": \"0\",\n   ...: }\n   ...:\n   ...: result = d_clean(data)\n   ...: assert result == expect\n\nIn [2]: expect = {\n   ...:     \"a\": {},\n   ...:     \"b\": {\"x\": 1},\n   ...:     \"c\": [],\n   ...:     \"d\": [0, 1],\n   ...:     \"e\": 0.0,\n   ...:     \"h\": \"0\",\n   ...: }\n   ...:\n   ...: result = d_clean(data, collections=False)\n   ...: assert result == expect\n\nIn [3]: expect = {\n   ...:     \"b\": {\"x\": 1},\n   ...:     \"d\": [0, 1],\n   ...:     \"e\": 0.0,\n   ...:     \"f\": \"\",\n   ...:     \"h\": \"0\",\n   ...: }\n   ...:\n   ...: result = d_clean(data, strings=False)\n   ...: assert result == expect\n\nIn [4]: expect = aDict({\n   ...:             \"b\": {\"x\": 1},\n   ...:             \"d\": [0, 1],\n   ...:             \"e\": 0.0,\n   ...:             \"h\": \"0\",\n   ...:          })\n   ...:\n   ...: result = d_clean(data, factory=aDict)\n   ...: assert result == expect\n\nIn [5]: expect = {\n   ...:     \"b\": {\"x\": 1},\n   ...:     \"d\": [0, 1],\n   ...:     \"e\": 0.0,\n   ...:     \"h\": \"0\",\n   ...: }\n   ...:\n   ...: d_clean(data, inplace=True)\n   ...: assert data == expect\n\nIn [6]:\n```\n\n### clone() and d_clone()\n\n```python\ndef clone(self,\n        obj: Optional[dict]=None,\n        empty: bool=False,\n        memo: Optional[dict]=None,\n        factory: Optional[Type[dict]]=None,\n    ):\n```\n\n```python\ndef d_clone(\n        obj: dict,\n        empty: bool=False,\n        memo: Optional[dict]=None,\n    ):\n```\n\nReturn a clone (deepcopy) of the dict.\n\n```python\nIn [1]: from datajuggler.dicthelper import d_clone\n   ...:\n   ...: data = { \"a\": { \"b\": { \"c\": 1, }, }, }\n   ...:\n   ...: result = d_clone(data)\n   ...: assert isinstance(result, dict) == True\n   ...: assert result == data\n\nIn [2]: result[\"a\"][\"b\"][\"c\"] = 2\n   ...:\n   ...: assert result[\"a\"][\"b\"][\"c\"] == 2\n   ...: assert data[\"a\"][\"b\"][\"c\"] == 1\n\nIn [3]: data = { \"a\": { \"b\": { \"c\": 1, }, }, }\n   ...: result = d_clone(data, empty=True)\n   ...: assert isinstance(result, dict) == True\n   ...: assert result == {}\n\nIn [4]:\n```\n\n### compare() and d_compare()\n\n```python\ndef compare(self,\n    d1: dict,\n    d2: Optional[dict]=None,\n    *,\n    keys: Optional[Union[Hashable,list]]=None,\n    keylist: bool=False,\n    keypath: bool=False,\n    thrown_error: bool=False,\n    ):\n```\n\n```pythob\ndef d_compare(\n        d1: dict,\n        d2: dict,\n        *,\n        keys: Optional[Union[Hashable,list, Keylist, Keypath]]=None,\n        keylist: bool=False,\n        keypath: bool=False,\n        thrown_error: bool=False,\n    ):\n```\n\nCompare tow dictionary with keys and return `True` when equal found values.\notherwise return `False`.\n\nif not set second dictionary, use self object.\nif not set keys, just compare two dictionaries,\nif pass `thrown_error=True`, raise ValueError when not equal found values.\nif passs `keylist=True`, keylist accept for key.\nif passs `keypath=True`, keypath accept for key.\n\n```python\nIn [1]: from datajuggler import aDict, Keylist, Keypath\n   ...: from datajuggler.dicthelper import d_compare\n   ...:\n   ...: d1 = {}\n   ...: d2 = {}\n   ...: result = d_compare(d1, d2)\n   ...: assert result == True\n\nIn [2]: d1 = {1: 1}\n   ...: d2 = {1: 1}\n   ...: result = d_compare(d1, d2)\n   ...: assert result == True\n\nIn [3]: d1 = {'1': 'one'}\n   ...: d2 = {'1': 'one'}\n   ...: result = d_compare(d1, d2)\n   ...: assert result == True\n\nIn [4]: d1 = {'1': 'one'}\n   ...: d2 = {'1':  2}\n   ...: result = d_compare(d1, d2)\n   ...: assert result == False\n\nIn [5]: d1 = { \"a\": 1, \"b\": [1,2,3] }\n   ...: d2 = { \"a\": 1, \"b\": [1,2,3] }\n   ...: result = d_compare(d1, d2)\n   ...: assert result == True\n\nIn [6]: d1 = { \"a\": 1,\n   ...:        \"b\": 2,\n   ...:        \"c\": {\n   ...:             \"d\": {\n   ...:                 \"e\": 3,\n   ...:                 \"f\": 4,\n   ...:                 \"g\": { \"h\": 5, },\n   ...:             }\n   ...:          },\n   ...:       }\n   ...: d2 = { \"a\": 1,\n   ...:        \"b\": 2,\n   ...:        \"c\": {\n   ...:             \"d\": {\n   ...:                 \"e\": 3,\n   ...:                 \"f\": 4,\n   ...:                 \"g\": { \"h\": 5, },\n   ...:             }\n   ...:          },\n   ...:       }\n   ...: result = d_compare(d1, d2)\n   ...: assert result == True\n\nIn [7]: d1 = { \"a\": 1,\n   ...:        \"b\": 2,\n   ...:        \"c\": {\n   ...:             \"d\": {\n   ...:                 \"e\": 3,\n   ...:                 \"f\": 4,\n   ...:                 \"g\": { \"h\": 5, },\n   ...:             }\n   ...:          },\n   ...:       }\n   ...: d2 = { \"a\": 1,\n   ...:        \"b\": 2,\n   ...:        \"c\": {\n   ...:             \"d\": {\n   ...:                 \"e\": 13,\n   ...:                 \"f\": 14,\n   ...:                 \"g\": { \"h\": 5, },\n   ...:             }\n   ...:          },\n   ...:       }\n   ...: result = d_compare(d1, d2, keys='b')\n   ...: assert result == True\n\nIn [8]: d1 = { \"a\": 1,\n   ...:        \"b\": 2,\n   ...:        \"c\": {\n   ...:             \"d\": {\n   ...:                 \"e\": 3,\n   ...:                 \"f\": 4,\n   ...:                 \"g\": { \"h\": 5, },\n   ...:             }\n   ...:          },\n   ...:       }\n   ...: d2 = { \"a\": 1,\n   ...:        \"b\": 2,\n   ...:        \"c\": {\n   ...:             \"d\": {\n   ...:                 \"e\": 13,\n   ...:                 \"f\": 14,\n   ...:                 \"g\": { \"h\": 5, },\n   ...:             }\n   ...:          },\n   ...:       }\n   ...: result = d_compare(d1, d2, keys='d')\n   ...: assert result == False\n\nIn [9]: d1 = { \"a\": 1,\n   ...:        \"b\": 2,\n   ...:        \"c\": {\n   ...:             \"d\": {\n   ...:                 \"e\": 3,\n   ...:                 \"f\": 4,\n   ...:                 \"g\": { \"h\": 5, },\n   ...:             }\n   ...:          },\n   ...:       }\n   ...: d2 = { \"a\": 1,\n   ...:        \"b\": 2,\n   ...:        \"c\": {\n   ...:             \"d\": {\n   ...:                 \"e\": 13,\n   ...:                 \"f\": 14,\n   ...:                 \"g\": { \"h\": 5, },\n   ...:             }\n   ...:          },\n   ...:       }\n   ...: result = d_compare(d1, d2, keys=Keylist(['c', 'd', 'g']))\n   ...: assert result == True\n\nIn [10]: d1 = { \"a\": 1,\n    ...:        \"b\": 2,\n    ...:        \"c\": {\n    ...:             \"d\": {\n    ...:                 \"e\": 3,\n    ...:                 \"f\": 4,\n    ...:                 \"g\": { \"h\": 5, },\n    ...:             }\n    ...:          },\n    ...:       }\n    ...: d2 = { \"a\": 1,\n    ...:        \"b\": 2,\n    ...:        \"c\": {\n    ...:             \"d\": {\n    ...:                 \"e\": 13,\n    ...:                 \"f\": 14,\n    ...:                 \"g\": { \"h\": 5, },\n    ...:             }\n    ...:          },\n    ...:       }\n    ...: result = d_compare(d1, d2, keys=Keypath('c.d.g'))\n    ...: assert result == True\n\nIn [11]:\n```\n\n### counts() and d_counts()\n\n```python\ndef counts(self,\n        pattern: Union[Pattern, Hashable, Sequence],\n        obj: Optional[dict]=None,\n        count_for: DictItemType=DictItem.KEY,\n        wild: bool=False,\n        verbatim: bool=False,\n    ) ->Union[int, dict]:\n```\n\n```python\ndef d_counts(\n        obj: dict,\n        pattern: Union[Hashable, Pattern, Sequence],\n        count_for: DictItemType=DictItem.KEY,\n        wild: bool=False,\n        verbatim: bool=False,\n    ) ->Union[int, dict]:\n```\nCounts of keys or values.\n`count_for` accept \"key\" and \"value\".\nif pass `wild=True`, match substr and ignore_case.\nif pass `verbatim=True`, counts as it is.\n\n\n```python\nIn [1]: from datajuggler.dicthelper import d_counts\n   ...:\n   ...: data = {'x': {'y': {'z': [{'aA': 'v11', 'b': 'v12', 'c': 'v13'},\n   ...:                           {'aA': 'v21', 'b': 'v22', 'c': 'v23'}]} }}\n   ...: d_counts(data, 'aA')\nOut[1]: 2\n\nIn [2]: d_counts(data, 'aA', count_for='key')\nOut[2]: 2\n\nIn [3]: d_counts(data, 'aa', count_for='key')\nOut[3]: 0\n\nIn [4]: d_counts(data, 'aa', count_for='key', wild=True)\nOut[4]: 2\n\nIn [5]: d_counts(data, ['aA', 'b'])\nOut[5]: defaultdict(int, {'aA': 2, 'b': 2})\n\nIn [6]: d_counts(data, ['aA', 'b'], wild=True)\nOut[6]: defaultdict(int, {'aA': 2, 'b': 2})\n\nIn [7]: d_counts(data, ['a', 'b'], wild=True, verbatim=True)\nOut[7]: defaultdict(int, {'aA': 2, 'b': 2})\n\nIn [8]: d_counts(data, 'v11', count_for='value')\nOut[8]: {'v11': 1}\n\nIn [9]: d_counts(data, 'v1', count_for='value', wild=True)\nOut[9]: {'v1': 3}\n\nIn [10]: d_counts(data, 'v1', count_for='value', wild=True, verbatim=True)\nOut[10]: {'v11': 1, 'v12': 1, 'v13': 1}\n\nIn [11]: data = {'x': {'y': {'z': [{'aA': 100, 'b': 101, 'c': 103},\n    ...:                           {'aA': 100, 'b': 101, 'c': 103}]} }}\n    ...: d_counts(data, 100, count_for='value')\nOut[11]: {100: 2}\n\nIn [12]:\n```\n\n### filter() and d_filter()\n\n```python\ndef filter(self,\n        predicate: Callable,\n        obj: Optional[dict]=None,\n        factory: Optional[Type[dict]]=None,\n    ):\n```\n\n```python\ndef d_filter(\n        predicate: Callable,\n        obj: dict,\n        factory: Type[dict]=dict,\n    ):\n```\n\nCreate a new dictionary with filter items in dictionary by item.\n\nPredicate function receives key, value arguments\nand should return a bool value.\nIf set `factory`, create instance of factory class.\nIf set `True` to `inplace`, perform operation in-place.\n\n```python\nIn [1]: from datajuggler import uDict,  aDict\n   ...: from datajuggler.dicthelper import d_filter\n   ...:\n   ...:\n   ...: is_janfeb = lambda x, y: x.endswith('ary')\n   ...: data = { 'January': 1, 'February': 2, 'March': 3, 'April': 4 }\n   ...:\n   ...: d_filter(is_janfeb, data)\nOut[1]: {'January': 1, 'February': 2}\n\nIn [2]: d_filter(is_janfeb, data, factory=uDict)\nOut[2]: uDict({'January': 1, 'February': 2})\n\nIn [3]: is_even = lambda x, y: y % 2 == 0\n   ...: d_filter(is_even, data)\nOut[3]: {'February': 2, 'April': 4}\n\nIn [4]:\n```\n\n### groupby() and d_groupby()\n\n```python\ndef groupby( self,\n        seq: list,\n        key: Hashable,\n        factory: Optional[Type[dict]]=None,\n    ) -> dict:\n```\n\n```python\ndef d_groupby(\n        seq: list,\n        key: Hashable,\n        factory: Type[dict]=dict,\n    ) -> dict:\n```\n\nA groupby operation involves some combination of splitting the object, applying a function, and combining the results. This can be used to group large amounts of data and compute operations on these groups.\n\n```python\nIn [1]: from datajuggler import uDict,  aDict\n   ...: from datajuggler.dicthelper import d_groupby\n   ...:\n   ...: data = [\n   ...:     {\"id\": 1, \"name\": \"John\"},\n   ...:     {\"id\": 2, \"name\": \"Paul\"},\n   ...:     {\"id\": 3, \"name\": \"David\"},\n   ...:     {\"id\": 4, \"name\": \"Freddie\"},\n   ...:     {\"id\": 3, \"name\": \"Jack\"},\n   ...:     {\"id\": 1, \"name\": \"Eddie\"},\n   ...:     {\"id\": 3, \"name\": \"Bob\"},\n   ...:     {\"id\": 4, \"name\": \"Maichael\"},\n   ...:     {\"id\": 1, \"name\": \"Edward\"},\n   ...: ]\n   ...: expect = ( \"{1: [{'id': 1, 'name': 'John'}, \"\n   ...:                 \"{'id': 1, 'name': 'Eddie'}, \"\n   ...:                 \"{'id': 1, 'name': 'Edward'}], \"\n   ...:             \"2: [{'id': 2, 'name': 'Paul'}], \"\n   ...:             \"3: [{'id': 3, 'name': 'David'}, \"\n   ...:                 \"{'id': 3, 'name': 'Jack'}, \"\n   ...:                 \"{'id': 3, 'name': 'Bob'}], \"\n   ...:             \"4: [{'id': 4, 'name': 'Freddie'}, \"\n   ...:                 \"{'id': 4, 'name': 'Maichael'}]}\" )\n   ...: result = d_groupby(data, \"id\")\n   ...: assert result.__repr__() == expect\n\n```\n\n### invert() and d_invert()\n\n```python\ndef invert( self,\n        obj: Optional[dict]=None,\n        flat: bool=False,\n        inplace: bool=False,\n        factory: Optional[Type[dict]]=None,\n    ) ->dict:\n```\n\n\n```python\ndef d_invert(\n        obj: dict,\n        flat: bool=False,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ) ->dict:\n```\n\nReturn an inverted dict where values become keys and keys become values.\nSince multiple keys could have the same value, each value will be a list of keys.\nIf pass `flat=True` each value will be a single value.\n(use this only if values are unique).\n\n```python\nIn [1]: from datajuggler import aDict\n   ...: from datajuggler.dicthelper import d_invert\n   ...:\n   ...:\n   ...: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n   ...: expect = {1: ['a'], 2: ['b'], 3: ['c'], 4: ['d'], 5: ['e']}\n   ...: result = d_invert(data)\n   ...: assert result == expect\n\nIn [2]: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n   ...: expect = {1: ['a'], 2: ['b'], 3: ['c'], 4: ['d'], 5: ['e']}\n   ...: d_invert(data, inplace=True)\n   ...: assert data == expect\n\nIn [3]: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n   ...: expect = aDict({1: ['a'], 2: ['b'], 3: ['c'], 4: ['d'], 5: ['e']})\n   ...: result = d_invert(data, factory=aDict)\n   ...: assert result == expect\n\nIn [4]: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n   ...: expect = { 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\"}\n   ...: result = d_invert(data, flat=True)\n   ...: assert result == expect\n\nIn [5]: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n   ...: expect = { 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\"}\n   ...: d_invert(data, flat=True, inplace=True)\n   ...: assert data == expect\n\nIn [6]: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n   ...: expect = aDict({ 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\"})\n   ...: result = d_invert(data, flat=True, factory=aDict)\n   ...: assert result == expect\n\nIn [7]:\n```\n\n### map() and d_map()\n\n```python\ndef map(self,\n        func: Callable,\n        obj: Optional[dict]=None,\n        map_for: Optional[DictItemType]=None,\n        inplace: bool=False,\n        factory: Optional[Type[dict]]=None,\n    ) ->dict:\n```\n\n```python\ndef d_map(\n        func: Callable,\n        obj: dict,\n        map_for: Optional[DictItemType]=None,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ) ->dict:\n```\nCreate a new dictionary with apply function to keys/value of dictionary.\nif pass `map_for=None`  apply function to key and value. (default)\nif pass `map_for=\"key\"`  apply function to key.\nif pass `map_for=\"value\"`  apply function to value.\nIf set `factory`, create instance of factory class.\nIf set `True` to `inplace`, perform operation in-place.\n\n```python\nIn [1]: from datajuggler import uDict,  aDict\n   ...: from datajuggler.dicthelper import d_map\n   ...:\n   ...:\n   ...: data = { 'January': 1, 'February': 2, 'March': 3, 'April': 4 }\n   ...: expect = { 1: 'January', 2: 'February', 3: 'March', 4: 'April' }\n   ...: result = d_map(reversed, data)\n   ...: assert result == expect\n\nIn [2]: expect = uDict({ 1: 'January', 2: 'February', 3: 'March', 4: 'April' })\n   ...: result = d_map(reversed, data, factory=uDict)\n   ...: assert result == expect\n   ...:\n\nIn [3]: expect = { 1: 'January', 2: 'February', 3: 'March', 4: 'April' }\n   ...: result = d_map(reversed, data, inplace=True)\n   ...: assert data == expect\n\nIn [4]: data = { 'January': 1, 'February': 2, 'March': 3, 'April': 4 }\n   ...: expect = uDict({ 'JANUARY': 1, 'FEBRUARY': 2, 'MARCH': 3, 'APRIL': 4 })\n   ...: result = d_map(str.upper, data, map_for=\"key\")\n   ...: assert result == expect\n\nIn [5]: data = { 'Jack': [10, 11, 12], 'John': [8, 15, 3] }\n   ...: expect = { 'Jack': 33, 'John': 26 }\n   ...: result = d_map(sum, data, map_for=\"value\")\n   ...: assert result == expect\n\nIn [6]:\n```\n\n### merge() and d_merger()\n\n```python\ndef merge(self,\n        others: list,\n        obj: Optional[dict]=None,\n        overwrite: bool=True,\n        concat: bool=False,\n        inplace: bool=False,\n        factory: Optional[Type[dict]]=None,\n    ) ->dict:\n```\n\n```python\ndef d_merge(\n        obj: dict,\n        others: Union[dict, list, tuple],\n        overwrite: bool=True,\n        concat: bool=False,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ) ->dict:\n```\n\nMerge one or more dictionary objects into obj.\nSub-dictionaries keys will be merged toghether.\nIf pass `overwrite=False`, existing values will not be overwritten.\nIf pass `concat=True`, list values will be concatenated toghether.\nIf set `factory`, create instance of factory class.\nIf set `True` to `inplace`, perform operation in-place.\n\n```python\nIn [1]: from datajuggler import aDict\n   ...: from datajuggler.dicthelper import d_merge\n   ...:\n   ...:\n   ...: d1 = { \"a\": 1, \"b\": 1, }\n   ...: d2 = { \"b\": 2, \"c\": 3, }\n   ...: expect = { \"a\": 1, \"b\": 2, \"c\": 3, }\n   ...: d_merge(d1, d2)\nOut[1]: {'a': 1, 'b': 2, 'c': 3}\n\nIn [2]: d_merge(d1, d2, factory=aDict)\nOut[2]: aDict({'a': 1, 'b': 2, 'c': 3})\n\nIn [3]: d_merge(d1, d2, inplace=True)\n\nIn [4]: d1\nOut[4]: {'a': 1, 'b': 2, 'c': 3}\n\nIn [5]: d1 = {\n   ...:     \"a\": [0, 1, 2],\n   ...:     \"b\": [5, 6, 7],\n   ...:     \"c\": [],\n   ...:     \"d\": [],\n   ...: }\n   ...: d2 = {\n   ...:     \"a\": [3, 4, 5],\n   ...:     \"b\": [8, 9, 0],\n   ...:     \"c\": [-1],\n   ...: }\n   ...: expect = {\n   ...:     \"a\": [3, 4, 5],\n   ...:     \"b\": [8, 9, 0],\n   ...:     \"c\": [-1],\n   ...:     \"d\": [],\n   ...: }\n\nIn [6]: d_merge(d1, d2)\nOut[6]: {'a': [3, 4, 5], 'b': [8, 9, 0], 'c': [-1], 'd': []}\n\nIn [7]: d_merge(d1, d2, concat=True)\nOut[7]: {'a': [0, 1, 2, 3, 4, 5], 'b': [5, 6, 7, 8, 9, 0], 'c': [-1], 'd': []}\n\nIn [8]: d1 = { \"a\": 1, \"b\": 1, }\n   ...: d2 = { \"b\": 2, \"c\": 3, \"d\": 3, }\n   ...: d3 = { \"d\": 5, \"e\": 5, }\n   ...: d4 = { \"d\": 4, \"f\": 6, }\n\nIn [9]: d_merge(d1, [d2, d3, d4])\nOut[9]: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\nIn [10]: d_merge(d1, (d2, d3, d4))\nOut[10]: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\nIn [11]: d1 = {\n    ...:     \"a\": 1,\n    ...:     \"b\": {\n    ...:         \"c\": { \"x\": 2, \"y\": 3, },\n    ...:         \"d\": { \"x\": 4, \"y\": 5, },\n    ...:         \"e\": { \"x\": 6, \"y\": 7, },\n    ...:     },\n    ...: }\n    ...: d2 = {\n    ...:     \"a\": 0,\n    ...:     \"b\": {\n    ...:         \"c\": 1,\n    ...:         \"d\": { \"y\": 1, \"z\": 2, },\n    ...:         \"e\": {\n    ...:             \"f\": { \"x\": 2, \"y\": 3, },\n    ...:             \"g\": { \"x\": 4, \"y\": 5, },\n    ...:         },\n    ...:     },\n    ...: }\n\nIn [12]: d_merge(d1, d2)\nOut[12]:\n{'a': 0,\n 'b': {'c': 1,\n  'd': {'x': 4, 'y': 1, 'z': 2},\n  'e': {'x': 6, 'y': 7, 'f': {'x': 2, 'y': 3}, 'g': {'x': 4, 'y': 5}}}}\n\nIn [13]:  d_merge(d1, d2, overwrite=False)\nOut[13]:\n{'a': 1,\n 'b': {'c': 1,\n  'd': {'x': 4, 'y': 1, 'z': 2},\n  'e': {'x': 6, 'y': 7, 'f': {'x': 2, 'y': 3}, 'g': {'x': 4, 'y': 5}}}}\n\nIn [14]:\n```\n\n### move() and d_move()\n\n```python\ndef move(self,\n        key_src: Union[str, list],\n        key_dest: Union[str, list],\n        obj: Optional[dict]=None,\n        *,\n        keep_order: bool=False,\n        overwrite: bool=True,\n        inplace: bool=False,\n        factory: Optional[Type[dict]]=None,\n    ) ->dict:\n```\n\n```python\ndef d_move(\n        obj: dict,\n        key_src: Union[str, list, dict],\n        key_dest: Optional[Union[str, list]]=None,\n        *,\n        overwrite: bool=True,\n        keep_order: bool=False,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ) ->dict:\n```\n\nCreate new dictionary which Move an item from key_src to key_dst.\nIt can be used to rename a key.\nIf key_dst exists and pass `overwrite=True`, its value will be overwritten.\nif pass `keep_order=True`, keep ordered of dictionary. (may be slow).\nIf set `factory`, create instance of factory class.\nIf set `True` to `inplace`, perform operation in-place.\n\n```python\nIn [1]: from datajuggler import aDict\n   ...: from datajuggler.dicthelper import d_move\n   ...:\n   ...: data = {\n   ...:     \"a\": { \"x\": 1, \"y\": 1, },\n   ...:     \"b\": { \"x\": 2, \"y\": 2, },\n   ...:     \"c\": { \"x\": 3, \"y\": 3, },\n   ...: }\n\nIn [2]: d_move(data, \"a\", \"a\")\nOut[2]: {'a': {'x': 1, 'y': 1}, 'b': {'x': 2, 'y': 2}, 'c': {'x': 3, 'y': 3}}\n\nIn [3]: d_move(data, \"a\", \"d\")\nOut[3]: {'b': {'x': 2, 'y': 2}, 'c': {'x': 3, 'y': 3}, 'd': {'x': 1, 'y': 1}}\n\nIn [4]: d_move(data, \"a\", \"d\", overwrite=False)\nOut[4]: {'b': {'x': 2, 'y': 2}, 'c': {'x': 3, 'y': 3}, 'd': {'x': 1, 'y': 1}}\n\nIn [5]: d_move(data, \"a\", \"d\", keep_order=True)\nOut[5]: {'d': {'x': 1, 'y': 1}, 'b': {'x': 2, 'y': 2}, 'c': {'x': 3, 'y': 3}}\n\nIn [6]: d_move(data, \"a\", \"d\", factory=aDict)\nOut[6]: aDict({'b': {'x': 2, 'y': 2}, 'c': {'x': 3, 'y': 3}, 'd': {'x': 1, 'y': 1}})\n\nIn [7]: d_move(data, \"a\", \"d\", inplace=True)\n\nIn [8]: data\nOut[8]: {'b': {'x': 2, 'y': 2}, 'c': {'x': 3, 'y': 3}, 'd': {'x': 1, 'y': 1}}\n\nIn [9]:\n```\n\n\n### rename() and d_rename()\n\n```python\ndef rename(self,\n        key: Union[Hashable,dict],\n        key_new: Optional[Hashable]=None,\n        obj: Optional[dict]=None,\n        case_name: Optional[str]=None,\n        *,\n        overwrite: bool=False,\n        keep_order: bool=False,\n        inplace: bool=False,\n        factory: Optional[Type[dict]]=None,\n    ) ->dict:\n```\n\n```python\ndef d_rename(\n        obj: dict,\n        key: Union[Hashable,dict, list],\n        key_new: Optional[Hashable]=None,\n        case_name: Optional[str]=None,\n        *,\n        overwrite: bool=False,\n        keep_order: bool=False,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ) ->dict:\n```\n\nCreate the new dictionary which is chnaged the key to key_new.\nif key as dictionary {key: key_new}, change key using mapping dictionary.\nIf key_dst exists and pass `overwrite=True`, its value will be overwritten.\nif pass `keep_order=True`, keep ordered of dictionary. (may be slow).\nIf set `factory`, create instance of factory class.\nIf set `True` to `inplace`, perform operation in-place.\n\n```python\nIn [1]: from datajuggler import  aDict\n   ...: from datajuggler.dicthelper import d_rename\n   ...:\n   ...: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": None, }\n\nIn [2]: d_rename(data, \"a\", \"a\")\nOut[2]: {'a': 1, 'b': 2, 'c': 3, 'd': None}\n\nIn [3]: d_rename(data, \"a\", \"A\")\nOut[3]: {'b': 2, 'c': 3, 'd': None, 'A': 1}\n\nIn [4]: d_rename(data, \"a\", \"A\", keep_order=True)\nOut[4]: {'A': 1, 'b': 2, 'c': 3, 'd': None}\n\nIn [5]: try:\n   ...:     result = d_rename(data, \"a\", \"b\")\n   ...: except KeyError as e:\n   ...:     print(e)\n   ...:\n\"Invalid key: 'b', key already in dict and 'overwrite' is disabled.\"\n\nIn [6]: d_rename(data, \"a\", \"b\", overwrite=True)\nOut[6]: {'b': 1, 'c': 3, 'd': None}\n\nIn [7]: d_rename(data, {'a': 'A', 'b': 'B'})\nOut[7]: {'c': 3, 'd': None, 'A': 1, 'B': 2}\n\nIn [8]: d_rename(data, \"b\", \"B\", inplace=True)\n\nIn [9]: data\nOut[9]: {'a': 1, 'c': 3, 'd': None, 'B': 2}\n\nIn [10]: data = { \"First Name\": 'jack', 'Last Name': 'bauwer' }\n\nIn [11]: d_rename(data, \"First Name\", case_name='snake')\nOut[11]: {'Last Name': 'bauwer', 'first_name': 'jack'}\n\nIn [12]: keys = list(data.keys())\n    ...: d_rename(data, keys, case_name='snake')\nOut[12]: {'first_name': 'jack', 'last_name': 'bauwer'}\n\nIn [13]: d_rename(data, keys, case_name='camel')\nOut[13]: {'firstName': 'jack', 'lastName': 'bauwer'}\n\nIn [14]:\n```\n\n\n### remove() and d_remove()\n\n```python\ndef remove(self,\n        keys: Union[list, Hashable],\n        obj: Optional[dict]=None,\n        *,\n        inplace: bool=False,\n        factory: Optional[Type[dict]]=None,\n    ):\n```\n\n```python\ndef d_remove(\n        obj: dict,\n        keys: Union[list, tuple, Hashable],\n        *,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ):\n```\n\nCreate new dictionary which Remove multiple keys from the dict.\nIt is possible to pass a single key or more keys (as list or *args).\n\n```python\nIn [1]: from datajuggler import aDict\n   ...: from datajuggler.dicthelper import d_remove\n   ...:\n   ...: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, }\n\nIn [2]: d_remove(data, \"c\")\nOut[2]: {'a': 1, 'b': 2, 'd': 4, 'e': 5}\n\nIn [3]: d_remove(data, [\"c\", \"d\", \"e\"])\nOut[3]: {'a': 1, 'b': 2}\n\nIn [4]: d_remove(data, (\"c\", \"d\", \"e\"))\nOut[4]: {'a': 1, 'b': 2}\n\nIn [5]: d_remove(data, \"c\", factory=aDict)\nOut[5]: aDict({'a': 1, 'b': 2, 'd': 4, 'e': 5})\n\nIn [6]: d_remove(data, \"c\", inplace=True)\n\nIn [7]: data\nOut[7]: {'a': 1, 'b': 2, 'd': 4, 'e': 5}\n\nIn [8]:\n```\n\n### nest() and d_nest()\n\n\n```python\ndef d_nest(\n    items: tuple,\n    id_key: Union[str, list],\n    parent_id_key: Union[str, list],\n    children_key: Union[str, list],\n    ) -> list:\n```\n\nNest a list of dicts at the given key and return a new nested list\nusing the specified keys to establish the correct items hierarchy.\n\n```python\nIn [1]: from datajuggler.dicthelper import d_nest\n   ...:\n   ...: data = [\n   ...:     {\"id\": 1, \"parent_id\": None, \"name\": \"John\"},\n   ...:     {\"id\": 2, \"parent_id\": 1, \"name\": \"Frank\"},\n   ...:     {\"id\": 3, \"parent_id\": 2, \"name\": \"Tony\"},\n   ...:     {\"id\": 4, \"parent_id\": 3, \"name\": \"Jimmy\"},\n   ...:     {\"id\": 5, \"parent_id\": 1, \"name\": \"Sam\"},\n   ...:     {\"id\": 6, \"parent_id\": 3, \"name\": \"Charles\"},\n   ...:     {\"id\": 7, \"parent_id\": 2, \"name\": \"Bob\"},\n   ...:     {\"id\": 8, \"parent_id\": 3, \"name\": \"Paul\"},\n   ...:     {\"id\": 9, \"parent_id\": None, \"name\": \"Michael\"},\n   ...: ]\n\nIn [2]: d_nest(data, \"id\", \"parent_id\", \"children\")\nOut[2]:\n[{'id': 1,\n  'parent_id': None,\n  'name': 'John',\n  'children': [{'id': 2,\n    'parent_id': 1,\n    'name': 'Frank',\n    'children': [{'id': 3,\n      'parent_id': 2,\n      'name': 'Tony',\n      'children': [{'id': 4, 'parent_id': 3, 'name': 'Jimmy', 'children': []},\n       {'id': 6, 'parent_id': 3, 'name': 'Charles', 'children': []},\n       {'id': 8, 'parent_id': 3, 'name': 'Paul', 'children': []}]},\n     {'id': 7, 'parent_id': 2, 'name': 'Bob', 'children': []}]},\n   {'id': 5, 'parent_id': 1, 'name': 'Sam', 'children': []}]},\n {'id': 9, 'parent_id': None, 'name': 'Michael', 'children': []}]\n\nIn [3]: try:\n   ...:     result = d_nest(data, \"id\", \"id\", \"children\")\n   ...: except ValueError as e:\n   ...:     print(e)\n   ...:\nkeys should be different.\n\nIn [4]: try:\n   ...:     result = d_nest(data, \"id\", \"parent_id\", \"id\")\n   ...: except ValueError as e:\n   ...:     print(e)\n   ...:\nkeys should be different.\n\nIn [5]: try:\n   ...:     d_nest(data, \"id\", \"parent_id\", \"parent_id\")\n   ...: except ValueError as e:\n   ...:     print(e)\n   ...:\nkeys should be different.\n\nIn [6]: data = [\n   ...:     [{\"id\": 1, \"parent_id\": None, \"name\": \"John\"}],\n   ...:     [{\"id\": 2, \"parent_id\": 1, \"name\": \"Frank\"}],\n   ...: ]\n\nIn [7]: try:\n   ...:     d_nest(data, \"id\", \"parent_id\", \"children\")\n   ...: except ValueError as e:\n   ...:     print(e)\n   ...:\nelement should be a dict.\n\nIn [8]:\n```\n\n\n### subset() and d_subset()\n\n```python\ndef d_subset(\n        obj: dict,\n        keys: Union[str, list, tuple, Hashable],\n        *,\n        default: Optional[Any]=None,\n        use_keypath: bool=False,\n        separator: str=Default_Keypath_Separator,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ):\n```\n\nReturn a dict subset for the given keys.\nIt is possible to pass a single key or more keys (as list or *args).\n\n\n```python\nIn [1]: from datajuggler import aDict\n   ...: from datajuggler.dicthelper import d_subset\n   ...:\n   ...:\n   ...: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n\nIn [2]: d_subset(data, 'b')\nOut[2]: {'b': 2}\n\nIn [3]: d_subset(data, ['b', 'd'])\nOut[3]: {'b': 2, 'd': 4}\n\nIn [4]: d_subset(data, ('b', 'd'))\nOut[4]: {'b': 2, 'd': 4}\n\nIn [5]: d_subset(data, ('b', 'd'), factory=aDict)\nOut[5]: aDict({'b': 2, 'd': 4})\n\nIn [6]: d_subset(data, ('b', 'd'), inplace=True)\n\nIn [7]: data\nOut[7]: {'b': 2, 'd': 4}\n\nIn [8]: data = { \"a\": 1,\n   ...:          \"b\": { \"c\": { \"x\": 2, \"y\": 3 },\n   ...:                 \"d\": { \"x\": 4, \"y\": 5 },\n   ...:          },\n   ...: }\n\nIn [9]: d_subset(data, keys='z', default={})\nOut[9]: {'z': {}}\n\nIn [10]: try:\n    ...:     d_subset(data, keys='x', default={})\n    ...: except KeyError as e:\n    ...:     print(e)\n    ...:\n\"Multiple keys founded.'x'\"\n\nIn [11]: d_subset(data, keys='x', default={}, use_keypath=True)\nOut[11]: {'b.c.x': 2, 'b.d.x': 4}\n\nIn [12]: d_subset(data, keys='c')\nOut[12]: {'c': {'x': 2, 'y': 3}}\n\nIn [13]: d_subset(data, keys=['c', 'd'])\nOut[13]: {'c': {'x': 2, 'y': 3}, 'd': {'x': 4, 'y': 5}}\n\nIn [14]: d_subset(data, keys=['c', 'd'], use_keypath=True)\nOut[14]: {'b.c': {'x': 2, 'y': 3}, 'b.d': {'x': 4, 'y': 5}}\n\nIn [15]: d_subset(data, keys=['c', 'd'],use_keypath=True, separator=' ')\nOut[15]: {'b c': {'x': 2, 'y': 3}, 'b d': {'x': 4, 'y': 5}}\n\nIn [16]:\n```\n\n### find() and d_find()\n\n```python\ndef d_find(\n        obj: dict,\n        keys: Union[list,Hashable],\n        default: Optional[Any]=None,\n        first_one: bool=True,\n        factory: Type[dict]=dict,\n    ) -> Union[Any, dict]:\n```\nReturn the match searching for the given keys.\nif pass `first_one=True`, return first matches.\nIf no result found, default value is returned.\n\n\n```python\nIn [1]: from datajuggler.dicthelper import d_find\n   ...:\n   ...: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": None, }\n\nIn [2]: d_find(data, \"b\", 0)\nOut[2]: 2\n\nIn [3]: d_find(data, \"e\", 0)\nOut[3]: 0\n\nIn [4]: d_find(data, [\"x\", \"y\", \"b\", \"z\"], 5)\nOut[4]: 2\n\nIn [5]: d_find(data, [\"a\", \"x\", \"b\", \"y\"], 5)\nOut[5]: 1\n\nIn [6]: d_find(data, [\"x\", \"y\", \"z\"], 5)\nOut[6]: 5\n\nIn [7]: d_find(data, [\"x\", \"y\", \"z\"], \"missing\")\nOut[7]: 'missing'\n\nIn [8]: d_find(data, [\"x\", \"y\", \"z\"])\n\nIn [9]: d_find(data, [\"a\", \"b\", \"c\"], first_one=True)\nOut[9]: 1\n\nIn [10]: d_find(data, [\"a\", \"b\", \"c\"], first_one=False)\nOut[10]: {'a': 1, 'b': 2, 'c': 3}\n\nIn [11]:\n```\n\n\n### sort() and d_sort()\n\n```python\ndef d_sort(\n        obj: dict,\n        sort_by: DictItemType=DictItem.KEY,\n        reverse: bool=False,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ):\n```\n\nCreate new dictiionary which is sorted by keys/values.\n`sort_by` accept \"key\" and \"value\". default is  \"key\".\nIf pass `reverse=True`,  the list will be reversed.\nIf set `factory`, create instance of factory class.\nIf set `True` to `inplace`, perform operation in-place.\n\n```python\nIn [1]: from datajuggler import aDict\n   ...: from datajuggler.dicthelper import d_sort\n   ...:\n   ...: data = {\n   ...:     \"a\": 8,\n   ...:     \"c\": 6,\n   ...:     \"e\": 4,\n   ...:     \"g\": 2,\n   ...:     \"b\": 7,\n   ...:     \"d\": 5,\n   ...:     \"f\": 3,\n   ...:     \"h\": 1,\n   ...: }\n\nIn [2]: d_sort(data)\nOut[2]: {'h': 1, 'g': 2, 'f': 3, 'e': 4, 'd': 5, 'c': 6, 'b': 7, 'a': 8}\n\nIn [3]: d_sort(data, reverse=True)\nOut[3]: {'a': 8, 'b': 7, 'c': 6, 'd': 5, 'e': 4, 'f': 3, 'g': 2, 'h': 1}\n\nIn [4]: d_sort(data, sort_by=\"value\")\nOut[4]: {'a': 8, 'b': 7, 'c': 6, 'd': 5, 'e': 4, 'f': 3, 'g': 2, 'h': 1}\n\nIn [5]: d_sort(data, factory=aDict)\nOut[5]: aDict({'h': 1, 'g': 2, 'f': 3, 'e': 4, 'd': 5, 'c': 6, 'b': 7, 'a': 8})\n\nIn [6]: d_sort(data, inplace=True)\n\nIn [7]: data\nOut[7]: {'h': 1, 'g': 2, 'f': 3, 'e': 4, 'd': 5, 'c': 6, 'b': 7, 'a': 8}\n\nIn [8]:\n```\n\n\n### search() and d_search()\n\n```python\ndef d_search(\n        obj: dict,\n        query: Pattern,\n        search_for: DictItemType=DictItem.KEY,\n        exact: bool=False,\n        ignore_case: bool=False,\n        use_keypath: bool=True,\n    ):\n```\n\nSearch and return a list of items matching the given query.\n\n```python\nIn [1]: from datajuggler.dicthelper import d_search\n   ...:\n   ...: data =  {\n   ...:     \"a\": \"January\",\n   ...:     \"b\": \"january!\",\n   ...:     \"c\": {\n   ...:         \"d\": True,\n   ...:         \"e\": \" january february \",\n   ...:         \"f\": {\n   ...:             \"g\": ['January', 'February', 'March', 'April' ],\n   ...:             \"january\": 12345,\n   ...:             \"February\": True,\n   ...:         },\n   ...:     },\n   ...:     \"x\": \"Peter Piper picked a peck of pickled peppers.\",\n   ...:     \"y\": { \"x\": { \"y\": 5, \"z\": 6, }, },\n   ...:     \"January February\": \"march\",\n   ...: }\n\nIn [2]: d_search(data, \"jarnuary\", search_for=\"value\")\nOut[2]: {}\n\nIn [3]: d_search(data, \"january\", search_for=\"value\", ignore_case=True)\nOut[3]: {'a': 'January', 'b': 'january!', 'c.f.g.0': 'January'}\n\nIn [4]: d_search(data, \"january\", search_for=\"value\", exact=True)\nOut[4]: {}\n\nIn [5]: d_search(data, \"january\", search_for=\"value\", ignore_case=True)\nOut[5]:\n{Keypath(\"a\"): 'January',\n Keypath(\"b\"): 'january!',\n Keypath(\"c.f.g[0]\"): 'January'}\n\nIn [6]: d_search(data, \"january\", search_for=\"value\",\n   ...:          ignore_case=True, use_keypath=False)\nOut[6]: {'a': 'January', 'b': 'january!', 'c.f.g[0]': 'January'}\n\nIn [7]:\n```\n\n### swap() and d_swap()\n\n```python\ndef d_swap(\n        obj: dict,\n        key1: Hashable,\n        key2: Hashable,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ) ->Optional[dict]:\n```\n\nSwap items values at the given keys.\n\n\n```python\nIn [1]: from datajuggler import aDict\n   ...: from datajuggler.dicthelper import d_swap\n   ...:\n   ...: data = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": None, }\n\nIn [2]: d_swap(data, \"a\", \"b\")\nOut[2]: {'a': 2, 'b': 1, 'c': 3, 'd': None}\n\nIn [3]: d_swap(data, \"a\", \"a\")\nOut[3]: {'a': 1, 'b': 2, 'c': 3, 'd': None}\n\nIn [4]: d_swap(data, \"a\", \"b\", factory=aDict)\nOut[4]: aDict({'a': 2, 'b': 1, 'c': 3, 'd': None})\n\nIn [5]: d_swap(data, \"a\", \"b\", inplace=True)\n\nIn [6]: data\nOut[6]: {'a': 2, 'b': 1, 'c': 3, 'd': None}\n\nIn [7]:\n```\n\n### flatten() and d_flatten()\n\n```python\ndef d_flatten(\n        obj: dict,\n        separator: str=Default_Keypath_Separator,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ) -> dict:\n```\n\nReturn a new flattened dict using the given separator to join nested\n\n```python\nIn [1]: from datajuggler import aDict\n   ...: from datajuggler.dicthelper import d_flatten, d_unflatten\n   ...:\n   ...: data = { \"a\": 1,\n   ...:          \"b\": 2,\n   ...:          \"c\": {\n   ...:             \"d\": {\n   ...:                 \"e\": 3,\n   ...:                 \"f\": 4,\n   ...:                  \"g\": { \"h\": 5, },\n   ...:             }\n   ...:          },\n   ...:       }\n\nIn [2]: d_flatten(data)\nOut[2]: {'a': 1, 'b': 2, 'c.d.e': 3, 'c.d.f': 4, 'c.d.g.h': 5}\n\nIn [3]: d_flatten(data, separator=\"_\")\nOut[3]: {'a': 1, 'b': 2, 'c_d_e': 3, 'c_d_f': 4, 'c_d_g_h': 5}\n\nIn [4]: d_flatten(data, factory=aDict)\nOut[4]: aDict({'a': 1, 'b': 2, 'c.d.e': 3, 'c.d.f': 4, 'c.d.g.h': 5})\n\nIn [5]: d_flatten(data, inplace=True)\n\nIn [6]: data\nOut[6]: {'a': 1, 'b': 2, 'c.d.e': 3, 'c.d.f': 4, 'c.d.g.h': 5}\n\nIn [7]:\n```\n\n### unflatten() and d_unflatten()\n\n```python\n\ndef d_unflatten(\n        obj: dict,\n        default: Optional[Any]=None,\n        separator: str=Default_Keypath_Separator,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ) -> dict:\n```\n\nReturn a new unflattened dict using the given separator to join nested dict keys to flatten keypaths.\n\n\n```python\nIn [1]: from datajuggler import aDict\n   ...: from datajuggler.dicthelper import d_flatten, d_unflatten\n   ...:\n   ...: data = {\n   ...:     \"a\": 1,\n   ...:     \"b\": 2,\n   ...:     \"c.d.e\": 3,\n   ...:     \"c.d.f\": 4,\n   ...:     \"c.d.g.h\": 5,\n   ...: }\n\nIn [2]: d_unflatten(data)\nOut[2]: {'a': 1, 'b': 2, 'c': {'d': {'e': 3, 'f': 4, 'g': {'h': 5}}}}\n\nIn [3]: data = {\n   ...:     \"a\": 1,\n   ...:     \"b\": 2,\n   ...:     \"c_d_e\": 3,\n   ...:     \"c_d_f\": 4,\n   ...:     \"c_d_g_h\": 5,\n   ...: }\n\nIn [4]: d_unflatten(data, separator=\"_\")\nOut[4]: {'a': 1, 'b': 2, 'c': {'d': {'e': 3, 'f': 4, 'g': {'h': 5}}}}\n\nIn [5]: d_unflatten(data, separator=\"_\", inplace=True)\n\nIn [6]: data\nOut[6]: {'a': 1, 'b': 2, 'c': {'d': {'e': 3, 'f': 4, 'g': {'h': 5}}}}\n\nIn [7]:\n```\n\n### traverse() and d_traverse()\n\n```python\nef d_traverse(\n        obj: Union[dict, list, tuple],\n        callback: Callable,\n        parents: list=[],\n        *args: Any,\n        **kwargs: Any,\n    ):\n```\nTraverse dict or list and apply callback function.\ncallback function will be called as follows.\n\n  - `callback(obj, key, value, *args, parents=parents, **kwargs)`\n  - `callback(obj, index, value, *args, parents=parents, **kwargs)`\n\n`parantes` can pass to Keylist().\n\n  - Keylist(parents)`\n\n```python\nIn [1]: from datajuggler.dicthelper import d_traverse\n   ...:\n   ...:\n   ...: data = { \"a\": { \"x\": 2, \"y\": 3, \"z\": { \"ok\": 5, }, },\n   ...:          \"b\": { \"x\": 7, \"y\": 11, \"z\": { \"ok\": 13, }, },\n   ...:          \"c\": { \"x\": 17, \"y\": 19, \"z\": { \"ok\": 23, }, },\n   ...:        }\n\nIn [2]: def func(obj, key, val, *args, **kwargs):\n   ...:     if not isinstance(val, dict):\n   ...:         obj[key] = val + 1\n   ...:\n   ...: d_traverse(data, func)\n\nIn [3]: data\nOut[3]:\n{'a': {'x': 3, 'y': 4, 'z': {'ok': 6}},\n 'b': {'x': 8, 'y': 12, 'z': {'ok': 14}},\n 'c': {'x': 18, 'y': 20, 'z': {'ok': 24}}}\n\nIn [4]: from datajuggler import Keylists\n   ...: paths=[]\n   ...: def func(obj, key, val, *args, parents, **kwargs):\n   ...:     global paths\n   ...:     if not isinstance(val, dict):\n   ...:         obj[key] = val + 1\n   ...:         paths.append(Keylist(parents).to_keypath())\n   ...:\n   ...: d_traverse(data, func)\n\nIn [5]: data\nOut[5]:\n{'a': {'x': 4, 'y': 5, 'z': {'ok': 7}},\n 'b': {'x': 9, 'y': 13, 'z': {'ok': 15}},\n 'c': {'x': 19, 'y': 21, 'z': {'ok': 25}}}\n\nIn [6]: data = [ 100, [200, [300, 310], 210], 110]\n   ...:\n   ...: def func(obj, index, val, *args, parents, **kwargs):\n   ...:     if not isinstance(val, list):\n   ...:         obj[index] = val + 1000\n   ...:\n   ...: d_traverse(data, func)\n\nIn [7]: data\nOut[7]: [1100, [1200, [1300, 1310], 1210], 1110]\n\nIn [8]: paths = []\n   ...: def func(obj, index, val, parents, *args, **kwargs):\n   ...:     global paths\n   ...:     index_paths = [ str(x) for x in parents ]\n   ...:     paths.append( ' '.join(index_paths))\n   ...:\n   ...: d_traverse(data, func)\n\nIn [9]: data\nOut[9]: [1100, [1200, [1300, 1310], 1210], 1110]\n\nIn [10]: data = [ 100, [200, [300, 310], 210], 110]\n\nIn [11]: paths = []\n    ...: def func(obj, index, val, parents, *args, **kwargs):\n    ...:     global paths\n    ...:     index_paths = [ str(x) for x in parents ]\n    ...:     paths.append( ' '.join(index_paths))\n    ...:\n    ...: d_traverse(data, func)\n\nIn [12]: data\nOut[12]: [100, [200, [300, 310], 210], 110]\n\nIn [13]: data = { \"a\": { \"x\": [ 100, 200], \"y\": 3, \"z\": { \"ok\": 5, }, },\n    ...:          \"b\": { \"x\": [ 110, 210], \"y\": 11, \"z\": { \"ok\": 13, }, },\n    ...:          \"c\": { \"x\": [ 120, 220], \"y\": 19, \"z\": { \"ok\": 13, }, },\n    ...:        }\n    ...:\n    ...: paths = []\n    ...: def func(obj, key, val, parents, *args, **kwargs):\n    ...:     global paths\n    ...:     if not isinstance(val, dict) and not isinstance(val, list):\n    ...:         obj[key] = val + 1\n    ...:\n    ...: d_traverse(data, func)\n\nIn [14]: data\nOut[14]:\n{'a': {'x': [101, 201], 'y': 4, 'z': {'ok': 6}},\n 'b': {'x': [111, 211], 'y': 12, 'z': {'ok': 14}},\n 'c': {'x': [121, 221], 'y': 20, 'z': {'ok': 14}}}\n\nIn [15]: aths = []\n    ...: def func(obj, key, val, parents, *args, **kwargs):\n    ...:     global paths\n    ...:     if not isinstance(val, dict) and  not isinstance(val, list):\n    ...:         obj[key] = val + 1\n    ...:         index_paths = [ str(x) for x in parents ]\n    ...:         paths.append( ' '.join(index_paths))\n    ...:\n    ...: d_traverse(data, func)\n\nIn [16]: data\nOut[16]:\n{'a': {'x': [102, 202], 'y': 5, 'z': {'ok': 7}},\n 'b': {'x': [112, 212], 'y': 13, 'z': {'ok': 15}},\n 'c': {'x': [122, 222], 'y': 21, 'z': {'ok': 15}}}\n\nIn [17]:\n```\n\n\n### unique() and d_unique()\n\n```python\ndef d_unique(\n        obj: dict,\n    ) -> list:\n```\n\nReturn unique values from dict.\n\n```python\nIn [1]: from datajuggler.dicthelper import  d_unique\n   ...:\n   ...: data = { \"a\": { \"x\": 1, \"y\": 1, },\n   ...:          \"b\": { \"x\": 2, \"y\": 2, },\n   ...:          \"c\": { \"x\": 1, \"y\": 1, },\n   ...:          \"d\": { \"x\": 1, },\n   ...:          \"e\": { \"x\": 1, \"y\": 1, \"z\": 1, },\n   ...:          \"f\": { \"x\": 2, \"y\": 2, },\n   ...: }\n\nIn [2]: d_unique(data)\nOut[2]: [{'x': 1, 'y': 1}, {'x': 2, 'y': 2}, {'x': 1}, {'x': 1, 'y': 1, 'z': 1}]\n\nIn [3]:\n```\n\n### get_keys()\n\n```python\ndef get_keys(\n        obj: Optional[dict]=None,\n        indexes: bool=False,\n        *,\n        output_as: Optional[DictKey]=None,\n        separator: str=Default_Keypath_Separator,\n    ) -> list:\n```\nGet all keys from dictionary as a List\nThis function is able to process on nested dictionary.\n`output_as` accept \"keylist\" and \"keypath\".\n\n```python\nIn [1]: from datajuggler.dicthelper import get_keys\n\nIn [2]: data = { \"a\": 1,\n   ...:                  \"b\": { \"c\": { \"x\": 2, \"y\": 3, },\n   ...:                         \"d\": { \"x\": 4, \"y\": 5, },\n   ...:                       },\n   ...:                 }\n\nIn [3]: get_keys(data)\nOut[3]: ['a', 'b', 'c', 'x', 'y', 'd', 'x', 'y']\n\nIn [4]: get_keys(data, output_as=\"keylist\")\nOut[4]:\n[['a'],\n ['b'],\n ['b', 'c'],\n ['b', 'c', 'x'],\n ['b', 'c', 'y'],\n ['b', 'd'],\n ['b', 'd', 'x'],\n ['b', 'd', 'y']]\n\nIn [5]: get_keys(data, output_as=\"keypath\")\nOut[5]: ['a', 'b', 'b.c', 'b.c.x', 'b.c.y', 'b.d', 'b.d.x', 'b.d.y']\n\nIn [6]: get_keys(data, output_as=\"keypath\", separator='_')\nOut[6]: ['a', 'b', 'b_c', 'b_c_x', 'b_c_y', 'b_d', 'b_d_x', 'b_d_y']\n\nIn [7]:\n```\n\n### get_values()\n\n```python\ndef get_values(\n        obj: Union[dict, Sequence],\n        keys: Union[Hashable, Keylist, Keypath],\n    ) -> Any:\n```\n\nGet the value of key in the objet(s).\n`obj` : dict, dict[dict], dict[list], list[dict]\nreturn value, list, dict.\n\n\n```python\nIn [1]: from datajuggler import uDict, Keypath, Keylist\n   ...: from datajuggler.dicthelper import get_values\n\nIn [2]: data = { \"a\": 1,\n   ...:          \"b\": { \"c\": { \"x\": 2, \"y\": 3, },\n   ...:                 \"d\": { \"x\": 4, \"y\": 5, },\n   ...:                 \"e\": [ { \"x\": 1, \"y\": -1, \"z\": [1, 2, 3], },\n   ...:                        { \"x\": 2, \"y\": -2, \"z\": [2, 3, 4], },\n   ...:                        { \"x\": 3, \"y\": -3, \"z\": [3, 4, 5], },\n   ...:                      ],\n   ...:               },\n   ...:       }\n   ...:\n\nIn [3]: get_values(data, 'a')\nOut[3]: 1\n\nIn [4]: get_values(data, ('b', 'c'))\nOut[4]: {'x': 2, 'y': 3}\n\nIn [5]: get_values(data, Keylist(['b', 'c']))\nOut[5]: {'x': 2, 'y': 3}\n\nIn [6]: get_values(data, Keylist(['b', 'e[1]', 'z[2]']))\nOut[6]: 4\n\nIn [7]: get_values(data, Keypath('b.c'))\nOut[7]: {'x': 2, 'y': 3}\n\nIn [8]: get_values(data, Keypath('b.e[1].z[2]'))\nOut[8]: 4\n\nIn [9]: d = uDict(data)\n\nIn [10]: d['a']\nOut[10]: 1\n\nIn [11]: d[('b', 'c')]\nOut[11]: uDict({'x': 2, 'y': 3})\n\nIn [12]: d[Keylist(['b', 'c'])]\nOut[12]: uDict({'x': 2, 'y': 3})\n\nIn [13]: d[Keylist(['b', 'e[1]', 'z[2]'])]\nOut[13]: 4\n\nIn [14]: d[Keypath('b.c')]\nOut[14]: uDict({'x': 2, 'y': 3})\n\nIn [15]: d[Keypath('b.e[1].z[2]')]\nOut[15]: 4\n\nIn [16]:\n```\n\n\n### keylists()\n```python\ndef keylists(\n        obj: Any,\n        indexes: bool=False,\n    ) -> list:\n```\n\nkeylist is the list of key as keys from dict/list.\n\nthis function is just calling Keylist.keylists()\n\n### keypaths()\n\n```python\ndef keypaths(\n        obj: dict,\n        indexes: bool=False,\n        separator: str=Default_Keypath_Separator,\n    ) -> str:\n```\nKeypath is the string for  attribute-sytle access to value.\n(dot-notation by default).\n\nthis function is just calling Keypath.keypaths()\n\n\n\n\n### get_items()\n\n```python\ndef get_items(\n        obj: dict,\n        loc: Hashable,\n        value: Any,\n        func: Optional[Callable]=None,\n        *,\n        separator: str=Default_Keypath_Separator,\n        factory: Type[dict]=dict,\n    ):\n```\nCreate new dictionary with new key value pair as d[key]=val.\nIf set `True` to `inplace`, perform operation in-place.\notherwise, not modify the initial dictionary.\n\n```python\nIn [1]: from datajuggler import uDict, Keypath, Keylist\n   ...: from datajuggler.dicthelper import get_items\n\nIn [2]: get_items({}, 'a', 1)\nOut[2]: {'a': 1}\n\nIn [3]: data = { 'a': 1, 'b': 2}\n   ...: get_items(data, 'a', 3)\nOut[3]: {'a': 3, 'b': 2}\n\nIn [4]: data = { 'a': 1, 'b': [{'c': 11, 'd': 12 },\n   ...:                        {'c': 22, 'd': 22 }] }\n   ...:\n   ...: get_items(data, 'b', 2)\nOut[4]: {'a': 1, 'b': 2}\n\nIn [5]: data = { 'a': 1, 'b': [{'c': 11, 'd': 12 },\n   ...:                        {'c': 22, 'd': 22 }] }\n   ...:\n   ...: get_items(data, 'c', 4)\nOut[5]: {'a': 1, 'b': [{'c': 11, 'd': 12}, {'c': 22, 'd': 22}], 'c': 4}\n\nIn [6]: data = { 'a': 1, 'b': [{'c': 11, 'd': 12 },\n   ...:                        {'c': 22, 'd': 22 }] }\n   ...:\n   ...: get_items(data, ('b','c'), 4)\nOut[6]: {'a': 1, 'b': {'c': 4}}\n\nIn [7]: data = { 'a': 1, 'b': [{'c': 11, 'd': 12 },\n   ...:                        {'c': 22, 'd': 22 }] }\n   ...:\n   ...: get_items(data, Keylist('b','c'), 4)\nOut[7]: {'a': 1, 'b': 4}\n\nIn [8]: data = { 'a': 1, 'b': [{'c': 11, 'd': 12 },\n   ...:                        {'c': 22, 'd': 22 }] }\n   ...:\n   ...: get_items(data, Keypath('b.c'), 4)\nOut[8]: {'a': 1, 'b': {'c': 4}}\n\nIn [9]: d = uDict(data)\n\nIn [10]: d\nOut[10]: uDict({'a': 1, 'b': [{'c': 11, 'd': 12}, {'c': 22, 'd': 22}]})\n\nIn [11]: d.get_items('a', 3)\nOut[11]: uDict({'a': 3, 'b': [{'c': 11, 'd': 12}, {'c': 22, 'd': 22}]})\n\nIn [12]: d.get_items('c', 4)\nOut[12]: uDict({'a': 1, 'b': [{'c': 11, 'd': 12}, {'c': 22, 'd': 22}], 'c': 4})\n\nIn [13]: d.get_items('b', 2)\nOut[13]: uDict({'a': 1, 'b': 2})\n\nIn [14]: d.get_items(('b','c'), 4)\nOut[14]: uDict({'a': 1, 'b': uDict({'c': 4})})\n\nIn [15]: d.get_items(Keylist('b','c'), 4)\nOut[15]: uDict({'a': 1, 'b': 4})\n\nIn [16]: d.get_items(Keypath('b.c'), 4)\nOut[16]: uDict({'a': 1, 'b': uDict({'c': 4})})\n\nIn [17]:\n```\n\n###  pop_items()\n\n```python\nef pop_items(\n        obj: dict,\n        loc: Hashable,\n        value: Optional[Any]=None,\n        func: Optional[Callable]=None,\n        *,\n        separator: str=Default_Keypath_Separator,\n        factory: Type[dict]=dict,\n    ):\n```\nCreate new dictionary with new key value pair as d[key]=val.\nIf set `True` to `inplace`, perform operation in-place.\notherwise, not modify the initial dictionary.\n\n\n### del_items()\n\n```python\ndef del_items(\n        obj: dict,\n        loc: Union[Hashable, list, tuple],\n        *.\n        separator: str=Default_Keypath_Separator,\n        inplace: bool=False,\n        factory: Type[dict]=dict,\n    ):\n```\nCreate new dicttionary with the given key(s) removed.\nNew dictionary has d[key] deleted for each supplied key.\nIf set `True` to `inplace`, perform operation in-place.\notherwise, not modify the initial dictionary.\n\n### set_items()\n\n```python\ndef set_items(\n        obj: Union[dict, Sequence],\n        loc: Union[str, Sequence],\n        value: Any,\n        func: Optional[Callable]=None,\n        separator: str=Default_Keypath_Separator,\n        factory: Type[dict]=dict,\n    ):\n```\n\nCreate new dict with new, potentially nested, key value pair.\n\n\n## class iList\n\n`iList` class support immutable and hashable for list.\n\n - `freeze()` change status of object in frozen.\n - `unfreeze()` unfreeze for object.\n\nif call `freeze()`, following method will raise AttiributeError.\n\n - `__hash__()`\n - `__radd__()`\n - `__rand__()`\n - `__ior__()`\n - `__isub__()`\n - `__setitem__()`\n - `__reversed__()`\n - `append()`\n - `reverse()`\n - `clear()`\n - `expand()`\n - `pop()`\n - `remove()`\n - `sort()`\n\nand add new helper mehtods.\n\n - `copy(freeze: bool=False)`\n - `clone(empty: bool=False)`\n - `find(val)`\n - `without(items)`\n - `replace(old, new)`\n\n\n\n\n### copy()\n\n```python\n    def copy(self, freeze: bool=False):\n```\nCreaate the new list that is copied this list.\nthis method could not copy self.attrs..\nif pass `freeze=True`, return frozen list object.\n\n```python\nIn [1]: from datajuggler import iList\n\nIn [2]: l1 = iList([1,2,3])\n   ...: l1.Hello = 'Python'\n   ...: l2 = l1.copy()\n   ...: assert l2 == l1\n\nIn [3]: l2.get_attrs()\nOut[3]: {}\n\nIn [4]: l1 = iList([1])\n   ...: l2 = l1.copy(freeze=True)\n   ...: hash(l2)\nOut[4]: -4714387948668998104\n\nIn [5]:\n```\n\n\n### clone()\n\n```python\n    def clone(self, empty: bool=False):\n```\nCreaate the new list that is cloned this list.\nthis method copy self.attrs.\nif pass `empty=True`, keep self.attrs but list will be cleared.\n\n```python\nIn [5]: l1 = iList([1,2,3])\n   ...: l1.Hello = 'Python'\n   ...: l2 = l1.clone()\n   ...: assert l2 == l1\n\nIn [6]: l2.get_attrs()\nOut[6]: {'Hello': 'Python'}\n\nIn [7]: l3 = l1.clone(empty=True)\n\nIn [8]: l3\nOut[8]: iList([])\n\nIn [9]: l3.get_attrs()\nOut[9]: {'Hello': 'Python'}\n\nIn [10]:\n```\n\n### without()\n\n```python\n   def without(self, *items):\n```\n\nCreate new list without items and return iterable.\n\n```python\nIn [13]: l1 = iList([1,2,3,4,5,6,7,8,9])\n\nIn [14]: l1.without([2,4,6,8])\nOut[14]: [1, 3, 5, 7, 9]\n\nIn [15]: l1\nOut[15]: iList([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [16]:\n```\n\n### find()\n\n```python\n    def find(self,\n            val: Union[Any, list, tuple],\n        ) -> list:\n```\nReturn the list of index that found val in list.\notherwise return None\n\n```python\nIn [2]: l1 = iList([1,2,3,4,5,6,7,8,9])\n\nIn [3]: l1.find(2)\nOut[3]: [1]\n\nIn [4]: l1.find([2,4,6,8])\nOut[4]: [1, 3, 5, 7]\n\nIn [5]:\n```\n\n### replace()\n\n```python\n    def replace(self,\n            old: Any,\n            new: Any,\n            func: Optional[Callable]=None,\n        ) ->list:\n```\n\nReturn a new list that has new instead of old.\nif old is not found, it will raise an ItemNotFountError.\ncallback function will be called as follows.\n\n - `func(index, old, new)`\n\n```python\nIn [1]: from datajuggler import iList\n\nIn [2]: l1 = iList([1,2,3,1,2,3])\n\nIn [3]: l1.replace(3, 5)\nOut[3]: [1, 2, 5, 1, 2, 5]\n\nIn [4]: def func(index, old, new):\n   ...:     if index > 3:\n   ...:         return new\n   ...:     else:\n   ...:         return old\n   ...:\n\nIn [5]: l1 = iList([1,2,3,1,2,3])\n\nIn [6]: l1.replace(3, 5, func)\nOut[6]: [1, 2, 3, 1, 2, 5]\n\nIn [7]:\n```\n\n\n## class TypeValidator\n\nTypeValidator class has following classmethods.\nusing TypeValidator not necessary including typing module.\n\n - `is_bool(cls, obj: Any)`\n - `is_collection(cls, obj: Any)`\n - `is_callable(cls, obj: Any)`\n - `is_datetime(cls, obj: Any)`\n - `is_decimal(cls, obj: Any)`\n - `is_dict(cls, obj: Any)`\n - `is_dict_or_other(cls, obj: Any, other: Any)`\n - `is_dict_and_not_other(cls, obj: Any, other: Any)`\n - `is_dict_keys(cls, obj: Any)`\n - `is_dict_values(cls, obj: Any)`\n - `is_dict_items(cls, obj: Any)`\n - `is_dict_or_list(cls, obj: Any)`\n - `is_dict_or_list_or_tuple(cls, obj: Any)`\n - `is_float(cls, obj: Any)`\n - `is_function(cls, obj: Any)`\n - `is_hashable(cls, obj: Any)`\n - `is_integer(cls, obj: Any)`\n - `is_integer_or_float(cls, obj: Any)`\n - `is_iterable(cls, obj: Any)`\n - `is_json_serializable(cls, obj: Any)`\n - `is_keylist(cls, obj: Any)`\n - `is_keypath(cls, obj: Any)`\n - `is_keylist_or_keypath(cls, obj: Any)`\n - `is_list(cls, obj: Any)`\n - `is_list_not_empty(cls, obj: Any)`\n - `is_list_or_tuple(cls, obj: Any)`\n - `is_list_of_keylists(cls, obj: Any)`\n - `is_list_of_keypaths(cls, obj: Any)`\n - `is_mapping(cls, obj: Any)`\n - `is_match(cls, obj: Any)`\n - `is_none(cls, obj: Any)`\n - `is_not_none(cls, obj: Any)`\n - `is_pattern(cls, obj: Any)`\n - `is_regex(cls, obj: Any)`\n - `is_same_as(cls, obj: Any, other: Any)`\n - `is_sequence(cls, obj: Any)`\n - `is_set(cls, obj: Any)`\n - `is_set_not_empty(cls, obj: Any)`\n - `is_str(cls, obj: Any)`\n - `is_str_not_empty(cls, obj: Any)`\n - `is_tuple(cls, obj: Any)`\n - `is_tuple_not_empty(cls, obj: Any)`\n - `is_uuid(cls, obj: Any)`\n - `is_str_alnum(cls, obj: Any)`\n - `is_str_alpha(cls, obj: Any)`\n - `is_str_financial_number(cls, obj: Any)`\n - `is_str_emoji(cls, obj: Any)`\n - `is_truthy(cls, value: Any)\n - `is_bytes(cls, obj: Any)`\n - `is_bytes_not_empty(cls, obj: Any)`\n - `is_made_by_pydantic(cls, obj: Any)`\n - `is_made_by_dataclass(cls, obj: Any)`\n - `is_made_by_namedtuple(cls, obj: Any)`\n - `is_made_by_typing_namedtuple(cls, obj: Any)`\n - `is_made_by_collections_namedtuple(cls, obj: Any)`\n\nUsing TypeValidator class no need to include typing module compare with objects.\n\ni.e.:\n```python\nIn [1]: from datajuggler.validator import TypeValidator as _type\n\nIn [2]: data = { \"a\": 1,\n   ...:                  \"b\": { \"c\": { \"x\": 2, \"y\": 3, },\n   ...:                         \"d\": { \"x\": 4, \"y\": 5, },\n   ...:                       },\n   ...:                 }\n\nIn [3]: keys = data.keys()\n\nIn [4]: keys\nOut[4]: dict_keys(['a', 'b'])\n\nIn [5]: _type.is_dict_keys(keys)\nOut[5]: True\n\nIn [6]:\n```\n\n## class ValueValidator\n\n - `is_md5(cls, value: Any):\n - `is_sha1(cls, value: Any):\n - `is_sha224(cls, value: Any):\n - `is_sha256(cls, value: Any):\n - `is_sha512(cls, value: Any):\n - `is_financial_number(cls, value: Any):\n - `is_valid_checkdigit(cls, value: Any, num_digits=None, weights=None):\n - `is_uuid(cls, value: Any):\n - `is_truthy(cls, value: Any)\n - `is_length(cls, value: Any, min=None, max=None, thrown_error=False)\n - `is_between(cls, value: Any, min=None, max=None, thrown_error=False)\n\n```python\nIn [1]: from datajuggler.validator import ValueValidator as _value\n\nIn [2]: import hashlib\n\nIn [3]: data = 'datajuggler'\n\nIn [4]: hash_str = hashlib.md5(data.encode()).hexdigest()\n   ...: assert _value.is_md5(hash_str) == True\n   ...: assert _value.is_md5(data) == False\n\nIn [5]: hash_str = hashlib.sha1(data.encode()).hexdigest()\n   ...: assert _value.is_sha1(hash_str) == True\n   ...: assert _value.is_sha1(data) == False\n\nIn [6]: hash_str = hashlib.sha224(data.encode()).hexdigest()\n   ...: assert _value.is_sha224(hash_str) == True\n   ...: assert _value.is_sha224(data) == False\n\nIn [7]: hash_str = hashlib.sha256(data.encode()).hexdigest()\n   ...: assert _value.is_sha256(hash_str) == True\n   ...: assert _value.is_sha256(data) == False\n\nIn [8]: hash_str = hashlib.sha512(data.encode()).hexdigest()\n   ...: assert _value.is_sha512(hash_str) == True\n   ...: assert _value.is_sha512(data) == False\n\nIn [9]: assert _value.is_between(10, 2, 10) == True\n   ...: assert _value.is_between(10, 2, 20) == True\n   ...: assert _value.is_between(10, None, 20) == True\n   ...: assert _value.is_between(10, None, None) == False\n   ...: assert _value.is_between(10, 1, None) == True\n   ...: assert _value.is_between(10, -1, None) == True\n   ...: assert _value.is_between(10, 10, None) == True\n\nIn [10]: data = 'datajuggler'\n    ...: assert _value.is_length(data, 2, 10) == False\n    ...: assert _value.is_length(data, 2, 11) == True\n    ...: assert _value.is_length(data, None, 11) == True\n    ...: assert _value.is_length(data, None, None) == False\n    ...: assert _value.is_length(data, 1, None) == True\n    ...: assert _value.is_length(data, -1, None) == False\n    ...: assert _value.is_length(data, 11, None) == True\n    ...:\n\nIn [11]: data = list([1,2,3,4,5,6,7,8,9,10,11])\n    ...: assert _value.is_length(data, 2, 10) == False\n    ...: assert _value.is_length(data, 2, 11) == True\n    ...: assert _value.is_length(data, None, 11) == True\n    ...: assert _value.is_length(data, None, None) == False\n    ...: assert _value.is_length(data, 1, None) == True\n    ...: assert _value.is_length(data, -1, None) == False\n    ...: assert _value.is_length(data, 11, None) == True\n\nIn [12]: data = range(11)\n    ...: assert _value.is_length(data, 2, 10) == False\n    ...: assert _value.is_length(data, 2, 11) == True\n    ...: assert _value.is_length(data, None, 11) == True\n    ...: assert _value.is_length(data, None, None) == False\n    ...: assert _value.is_length(data, 1, None) == True\n    ...: assert _value.is_length(data, -1, None) == False\n    ...: assert _value.is_length(data, 11, None) == True\n\nIn [13]: import uuis\n    ...: data = uuid.uuid4()\n    ...: assert _value.is_uuid(data) == True\n    ...: assert _value.is_uuid('datajuggler') == False\n\nIn [14]: assert _value.is_financial_number('1') == True\n    ...: assert _value.is_financial_number('12') == True\n    ...: assert _value.is_financial_number('123') == True\n    ...: assert _value.is_financial_number('1,234') == True\n    ...: assert _value.is_financial_number('-1,234') == True\n    ...: assert _value.is_financial_number('-1234') == True\n    ...: assert _value.is_financial_number('0.12') == True\n    ...: assert _value.is_financial_number('.12') == True\n    ...: assert _value.is_financial_number('12.') == True\n\nIn [15]: assert _value.is_valid_checkdigit(261009) == True\n   ...: assert _value.is_valid_checkdigit(261008) == False\n   ...: assert _value.is_valid_checkdigit(26100, 5) == True\n   ...: assert _value.is_valid_checkdigit(1100, 5) == True\n\nIn [16]: assert _value.is_valid_checkdigit('261009') == True\n   ...: assert _value.is_valid_checkdigit('261008') == False\n   ...: assert _value.is_valid_checkdigit('26100', 5) == True\n   ...: assert _value.is_valid_checkdigit('1100', 5) == True\n\nIn [17]: assert _value.is_valid_checkdigit(261009,\n   ...:                           weights=[6,5,4,3,2]) == True\n   ...: assert _value.is_valid_checkdigit('261009',\n   ...:                           weights=[6,5,4,3,2]) == True\n\nIn [18]:\n```\n\n\n## class StrCase\n\n`strCase` class support convert case.\n\n - `convert_case(case)`\n - `show_supported_case()`\n\n```python\nIn [1]: from datajuggler import StrCase\n\nIn [2]: c = StrCase('The sky is the limits')\n\nIn [3]: c.show_supported_case()\nOut[4]:\n{'case': 'sample',\n 'snake': 'convert_case',\n 'kebab': 'convert-case',\n 'camel': 'convertCase',\n 'pascal': 'ConvertCase',\n 'const': 'CONVERT_CASE',\n 'sentence': 'Convert case',\n 'title': 'Convert Case',\n 'lower': 'convert case',\n 'upper': 'CONVERT CASE'}\n\nIn [4]: c.convert_case('snake')\nOut[4]: 'the_sky_is_the_limits'\n\nIn [5]: c.convert_case('camel')\nOut[5]: 'theSkyIsTheLimits'\n\n```\n\n`StrCase` class accept str, list, dict objects for inputs.\n\n```python\nIn [8]: data = \"The sky is the limit\"\n   ...: expect = 'the-sky-is-the-limit'\n   ...: s = StrCase(data)\n   ...: assert s.convert_case('kebab') == expect\n\nIn [9]: data = \"The sky is the limit\"\n   ...: expect = 'theSkyIsTheLimit'\n   ...: s = StrCase(data)\n   ...: assert s.convert_case(case='camel') == expect\n\nIn [10]: data = [\"Good luck\", \"The sky is the limit\" ]\n    ...: expect = [\"good_luck\", \"the_sky_is_the_limit\"]\n    ...: s = StrCase(data)\n    ...: assert s.convert_case() == expect\n\nIn [11]: data = {1: \"Good luck\", 2: \"The sky is the limit\" }\n    ...: expect = {1: \"good_luck\", 2: \"the_sky_is_the_limit\" }\n    ...: s = StrCase(data)\n    ...: assert s.convert_case() == expect\n\nIn [12]: data = {\"Good luck\": 1, \"The sky is the limit\": 2 }\n    ...: expect = {\"good_luck\": 1, \"the_sky_is_the_limit\": 2 }\n    ...: s = StrCase(data)\n    ...: assert s.convert_case(replace_for='key') == expect\n\nIn [13]:\n```\n\n`StrCase` class support nested objects.\n\n```python\nIn [13]: data = [\"Good luck\", \"The sky is the limit\",\n    ...:         {1: \"Good luck\", 2: \"The sky is the limit\" } ]\n    ...: expect = [\"good_luck\", \"the_sky_is_the_limit\",\n    ...:         {1: \"good_luck\", 2: \"the_sky_is_the_limit\" } ]\n    ...: s = StrCase(data)\n    ...: assert s.convert_case() == expect\n\nIn [14]:\n```\n\n### split_chunks()\n\nReturn split into even chunk_size elements.\n\n```python\nIn [1]: from datajuggler import split_chunks\n   ...:\n   ...: data = [11,12,13,14, 21,22,23, 31,32,33]\n   ...: expect = [[11,12,13, 14], [21,22,23,31], [32,33, None, None ]]\n   ...: result = list(split_chunks(data,4))\n   ...: assert result == expect\n\nIn [2]: data = [11,12,13,14, 21,22,23, 31,32,33]\n   ...: expect = [[11,12,13, 14], [21,22,23,31], [32,33] ]\n   ...: result = list(split_chunks(data,4, fill_na=False))\n   ...: assert result == expect\n\nIn [3]: data = [11,12,13,14, 21,22,23,31,32,33]\n   ...: expect = [[11,12,13, 14], [21,22,23,31], [32,33, -1, -1] ]\n   ...: result = list(split_chunks(data,4, na_value=-1))\n   ...: assert result == expect\n\nIn [4]:\n```\n\nif pass tuple as input. return list of tuple for chunk data.\n\n```python\nIn [4]: data = (11,12,13,21,22,23,31,32,33)\n   ...: expect = [(11,12,13), (21,22,23), (31,32,33)]\n   ...: result = list(split_chunks(data,3))\n   ...: assert result == expect\n\nIn [5]:\n```\n\nif pass dict objects as input. return list of dict for chunk data.\n`fill_na` and `na_value` is always ignored.\n\n```python\nIn [5]: data = { 'January': 1, 'February': 2, 'March': 3, 'April': 4 }\n   ...: expect = [{ 'January': 1, 'February': 2, 'March': 3},\n   ...:           { 'April': 4 } ]\n   ...: result = list(split_chunks(data,3))\n   ...: assert result == expect\n\nIn [6]: data = { 'January': 1, 'February': 2, 'March': 3, 'April': 4 }\n   ...: expect = [{ 'January': 1, 'February': 2, 'March': 3},\n   ...:           { 'April': 4 } ]\n   ...: result = list(split_chunks(data,3, fill_na=True))\n   ...: assert result == expect\n\nIn [7]: data = { 'January': 1, 'February': 2, 'March': 3, 'April': 4 }\n   ...: expect = [{ 'January': 1, 'February': 2, 'March': 3},\n   ...:           { 'April': 4 } ]\n   ...: result = list(split_chunks(data,3, na_value=None))\n\nIn [8]:\n```\n\nif pass str objects as input. return list of str for chunk data.\n`fill_na` and `na_value` is always ignored.\n\n```python\nIn [8]: data = \"Peter Piper picked a peck of pickled peppers.\"\n   ...: expect = [ \"Peter Piper picked a\",\n   ...:            \" peck of pickled pep\",\n   ...:            \"pers.\" ]\n   ...: result = list(split_chunks(data,20))\n   ...: assert result == expect\n\nIn [9]: data = \"Peter Piper picked a peck of pickled peppers.\"\n   ...: expect = [ \"Peter Piper picked a\",\n   ...:            \" peck of pickled pep\",\n   ...:            \"pers.\" ]\n   ...: result = list(split_chunks(data,20, fill_na=True, na_value=None))\n   ...: assert result == expect\n\nIn [10]:\n```\n\n### urange()\n\n`urange()` is almost same as `range()`\n\n```\nIn [1]: from datajuggler import urange\n   ...:\n   ...: expect = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   ...: result = list(urange(10))\n   ...: assert result == expect\n\nIn [2]: expect = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n   ...: result = list(urange(1, 10))\n   ...: assert result == expect\n\nIn [3]: expect = [1, 3, 5, 7, 9]\n   ...: result = list(urange(1, 10, 2))\n   ...: assert result == expect\n\nIn [4]: expect = [10, 8, 6, 4, 2]\n   ...: result = list(urange(10, 1, -2))\n   ...: assert result == expect\n\nIn [5]: expect = [10, 9, 8, 7, 6, 5, 4, 3, 2]\n   ...: result = list(urange(10, 1))\n   ...: assert result == expect\n\nIn [6]:\n```\n\n`urange()` support callable as step.\n\n```python\nIn [6]: def  gen_step(val):\n   ...:     return (val * 3)\n   ...:\n   ...: expect = [1, 4, 16]\n   ...: result = list(urange(1, 20, gen_step))\n   ...: assert result == expect\n\nIn [7]:\n```\n\n### rename_duplicate()\n\nRename duplicate string for list or values of dict.\n\n```python\nIn [1]: from datajuggler import rename_duplicates\n   ...:\n   ...: data = [\"Apple\", \"Apple\", \"Banana\", \"Maple\" ]\n   ...: expect = [\"Apple\", \"Apple_01\", \"Banana\", \"Maple\" ]\n   ...: result = rename_duplicates(data)\n   ...: assert result == expect\n\nIn [2]: data = [\"Apple\", \"Apple\", \"Banana\", \"Maple\" ]\n   ...: expect = [\"Apple\", \"Apple__01\", \"Banana\", \"Maple\" ]\n   ...: result = rename_duplicates(data, separator='__')\n   ...: assert result == expect\n\nIn [3]: data = [\"Apple\", \"Apple\", \"Banana\", \"Maple\" ]\n   ...: expect = [\"Apple\", \"Apple_001\", \"Banana\", \"Maple\" ]\n   ...: result = rename_duplicates(data, format=\"{:03}\")\n   ...: assert result == expect\n\nIn [4]: data = [\"Apple\", [\"Apple\", \"Apple\", \"Banana\", \"Maple\" ]]\n   ...: expect = [\"Apple\", [\"Apple\", \"Apple_01\", \"Banana\", \"Maple\" ]]\n   ...: result = rename_duplicates(data)\n   ...: assert result == expect\n\nIn [5]:\n```\n\n### df_compare()\n\n```python\nIn [1]: from datajuggler import df_compare\n   ...:\n   ...: d1 = pd.DataFrame([ ['Kyoto', 35.0117,135.452],\n   ...:                     ['Osaka', 34.4138,135.3808]],\n   ...:                   columns=['cityName', 'latitude', 'longitude'])\n   ...: d2 = pd.DataFrame([ ['Kyoto', 35.0117,135.452],\n   ...:                     ['Osaka', 34.4138,135.3808]],\n   ...:                   columns=['cityName', 'latitude', 'longitude'])\n   ...: assert ( df_compare(d1, d2) == 0 )\n\nIn [2]: d1 = pd.DataFrame([ ['26100', 35.0117,135.452],\n   ...:                     ['27100', 34.4138,135.3808]],\n   ...:                   columns=['cityCode', 'latitude', 'longitude'])\n   ...: d2 = pd.DataFrame([ ['Kyoto', 35.0117,135.452],\n   ...:                     ['Osaka', 34.4138,135.3808]],\n   ...:                   columns=['cityName', 'latitude', 'longitude'])\n   ...: assert ( df_compare(d1, d2) != 0 )\n\nIn [3]:\n```\n\n### omit_values()\n\nOmit values from objects.\n\n```python\nIn [1]: from datajuggler import omit_values\n   ...:\n   ...: data = ['January', 'February', 'March', 'April' ]\n   ...: omits = ['February', 'April']\n   ...: expect = ['January', '', 'March', '' ]\n   ...: result = omit_values(data, omits)\n   ...: assert result == expect\n\nIn [2]: data = ['January', 'February', 'March', 'April' ]\n   ...: omits = ['february', 'april']\n   ...: expect = ['January', '', 'March', '' ]\n   ...: result = omit_values(data, omits, ignore_case=True)\n   ...: assert result == expect\n\nIn [3]: data = ['January', 'February', 'March', 'April' ]\n   ...: omits = ['February', 'April']\n   ...: expect = ['January', 'March' ]\n   ...: result = omit_values(data, omits, drop=True)\n   ...: assert result == expect\n\nIn [4]: data = \"JanuaryFebruaryMarchApril\"\n   ...: omits = ['February', 'April']\n   ...: expect = \"JanuaryMarch\"\n   ...: result = omit_values(data, omits)\n   ...: assert result == expect\n\nIn [5]:\n```\n\n### replace_values()\n\nReplace values for objects.\nmutltidispatch functions as follows.\n\n - replace_values( data: str, old, new, ignore_case)\n - replace_values( values: list, replace: dict, *,\n        ignore_case: bool=False, inplace: bool=False, **kwargs: Any )\n - replace_values( values: dict, replace: dict, *,\n        ignore_case: bool=False, inplace: bool=False,\n        replace_for: ReplaceForType = ReplaceFor.VALUE )\n    ReplaceFor.KEY and ReplaceFor.VALUE are defined 'key' and 'value'.\n - replace_values( values: list, replace_from: list, replace_to: str, *,\n        ignore_case: bool=False, inplace: bool=False, **kwargs: Any)\n - replace_values( values: str, replace_from: list, replace_to: Hashable, *,\n        ignore_case: bool=False, **kwargs: Any)\n\n - replace_values( values: str, replace: dict, *,\n        ignore_case: bool=False, **kwargs: Any)\n\n```python\nIn [1]: from datajuggler import replace_values\n   ...:\n   ...: data = \"JanuaryFebruaryMarchApril\"\n   ...: old = [ 'March', 'April' ]\n   ...: replace_to = \"\"\n   ...: expect = \"JanuaryFebruary\"\n   ...: result = replace_values( data, old, replace_to )\n   ...: assert result == expect\n\nIn [2]: data = \"JanuaryFebruaryMarchApril\"\n   ...: replace = { 'March': '3', 'April': '4' }\n   ...: expect = \"JanuaryFebruary34\"\n   ...: result = replace_values( data, replace )\n   ...: assert result == expect\n   ...:\n\nIn [3]: data = \"JanuaryFebruaryMarchApril\"\n   ...: replace = { 'March': 3, 'April': 4 }\n   ...: expect = \"JanuaryFebruary34\"\n   ...: result = replace_values( data, replace )\n   ...: assert result == expect\n\nIn [4]: data = ['January', 'February', 'March', 'April' ]\n   ...: replace = { 'March': '3', 'April': '4' }\n   ...: expect = ['January', 'February', '3', '4' ]\n   ...: result = replace_values( data, replace )\n   ...: assert result == expect\n\nIn [5]: def convert_func(matchobj):\n   ...:     map = {'January': '1',\n   ...:            'February': '2' }\n   ...:     return map[matchobj.group(0)]\n   ...:\n   ...: data = ['January', 'February', 'March', 'April',\n   ...:         'May', 'June', 'July', 'August',\n   ...:         'September', 'October', 'November', 'December']\n   ...:\n   ...: replace = { '.*ary': convert_func, '.*ber': 'BER' }\n   ...:\n   ...: expect = ['1', '2', 'March', 'April',\n   ...:         'May', 'June', 'July', 'August',\n   ...:         'BER', 'BER', 'BER', 'BER']\n   ...: result = replace_values( data, replace)\n   ...: assert result == expect\n\nIn [6]: data = ['January', 'February', 'March', 'April']\n   ...: replace = {'march': '3', 'april': '4' }\n   ...:\n   ...: expect = ['January', 'February', '3', '4' ]\n   ...: result = replace_values( data, replace, ignore_case=True)\n   ...: assert result == expect\n\nIn [7]: data = ['January', 'February', 'March', 'April']\n   ...: replace = {'march': '3', 'april': '4' }\n   ...: expect = ['January', 'February', '3', '4' ]\n   ...: replace_values( data, replace, ignore_case=True, inplace=True)\n   ...: assert data == expect\n\nIn [8]: data = { 1: 'January', 2: 'February', 3: 'March', 4: 'April' }\n   ...: replace = { 'March': 3, 'April': 4 }\n   ...: expect = { 1: 'January', 2: 'February', 3: 3, 4: 4 }\n   ...: result = replace_values( data, replace )\n   ...: assert result == expect\n\nIn [9]: data = { 1: 'January', 2: 'February', 3: 'March', 4: 'April' }\n   ...: replace = { 'March': 3, 'April': 4 }\n   ...: expect = { 1: 'January', 2: 'February', 3: 3, 4: 4 }\n   ...: result = replace_values( data, replace, replace_for='value' )\n   ...: assert result == expect\n\nIn [10]: data = { 1: 'January', 2: 'February', 3: 'March', 4: 'April' }\n    ...: replace = { 'march': 3, 'april': 4 }\n    ...: expect = { 1: 'January', 2: 'February', 3: 3, 4: 4 }\n    ...: result = replace_values( data, replace, ignore_case=True )\n    ...: assert result == expect\n\nIn [11]: data = { 1: 'January', 2: 'February', 3: 'March', 4: 'April' }\n    ...: replace = { 'march': 3, 'april': 4 }\n    ...: expect = { 1: 'January', 2: 'February', 3: 3, 4: 4 }\n    ...: replace_values( data, replace, ignore_case=True, inplace=True )\n    ...: assert data == expect\n\nIn [12]: data = { 1: 'one', 2: 'two', 3: 'three', 4: 'four' }\n    ...: replace = {1: 'one',  2: 'two', 3: 'three'}\n    ...: expect = { 'one': 'one', 'two': 'two', 'three': 'three', 4: 'four' }\n    ...: result = replace_values( data, replace, replace_for='key')\n    ...: assert result == expect\n\nIn [13]: data = { 1: 'one', 2: 'two', 3: 'three', 4: 'four' }\n    ...: replace = {'one': 1, 'two': [2, 'two'], 'three': { 3: 'three'}}\n    ...: expect = { 1: 1, 2: [2, 'two'] , 3: {3: 'three'}, 4: 'four' }\n    ...: result = replace_values( data, replace )\n    ...: assert result == expect\n\nIn [14]:\n```\n\n\n## copy_docstring()\n\nCopying the docstring of function onto another function by name\nThe following is an example of a method definition in uDict.\n\n```python\nfrom datajuggler.strings import copy_docstring\nfrom datajuggler import dicthelper as d\n# ...\nclass uDic(IODict):\n    # ...\n    @copy_docstring(d.d_counts)\n    def counts(self,\n            pattern: Union[Pattern, Hashable, Sequence],\n            obj: Optional[dict]=None,\n            *,\n            count_for: DictItemType=DictItem.KEY,\n            wild: bool=False,\n            verbatim: bool=False,\n        ) ->Union[int, dict]:\n        \"\"\"If obj is omitted, self is used.  \"\"\"\n\n        obj = obj if obj or obj == {} else self\n        return d.d_counts(obj, pattern, count_for=count_for,\n                        wild=wild, verbatim=verbatim)\n```\n\n\n```python\nIn [3]: from datajuggler import dicthelper as d\n\nIn [4]: print(d.d_counts.__doc__)\nCounts of keys or values\n       if pass `wild=True`, match substr and ignore_case.\n       if pass `verbatim=True`, counts as it is.\n\nIn [5]: from datajuggler import uDict\n\nIn [6]: print(uDict.counts.__doc__)\nCounts of keys or values\n       if pass `wild=True`, match substr and ignore_case.\n       if pass `verbatim=True`, counts as it is.\n    If obj is omitted, self is used.\n\nIn [7]\n```\n\n## KNOWN PROBLEMS\n\ndatajuggler is not support followings issues.\n\n - out-of-core processing.\n - multi-threaded data processing.\n\nIf you are working with huge datasets, try using [datatable](https://github.com/h2oai/datatable).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iisaka51/datajuggler",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "datajuggler",
    "package_url": "https://pypi.org/project/datajuggler/",
    "platform": null,
    "project_url": "https://pypi.org/project/datajuggler/",
    "project_urls": {
      "Homepage": "https://github.com/iisaka51/datajuggler"
    },
    "release_url": "https://pypi.org/project/datajuggler/0.5.5/",
    "requires_dist": [
      "multimethod (>=1.8)",
      "Serialize (>=0.2.1)",
      "cryptography (>=36.0.0)",
      "bson (>=0.3.5.1) ; extra == 'bson'",
      "cloudpickle (>=2.2.0) ; extra == 'cloudpack'",
      "dataset (>=1.5.0) ; extra == 'database'",
      "dill (>=0.5.10) ; extra == 'dill'",
      "emoji (==2.1.0) ; extra == 'emoji'",
      "msgpack (>=1.0.4) ; extra == 'msgpack'",
      "pandas (>=1.4.0) ; extra == 'pandas'",
      "phpserialize (>=1.3) ; extra == 'phpserialize'",
      "requests (>=2.27.0) ; extra == 'requests'",
      "bson (>=0.3.5.1) ; extra == 'serializer'",
      "dill (>=6.0) ; extra == 'serializer'",
      "PyYAML (>=6.0) ; extra == 'serializer'",
      "msgpack (>-1.0.4) ; extra == 'serializer'",
      "phpserialize (>=1.3) ; extra == 'serializer'",
      "serpent (>=1.4.1) ; extra == 'serializer'",
      "toml (>=0.10.2) ; extra == 'serializer'",
      "xmltodict (>=0.13.0) ; extra == 'serializer'",
      "cloudpickle (>=2.2.0) ; extra == 'serializer'",
      "serpent (>=1.4.1) ; extra == 'serpent'",
      "toml (>=0.10.2) ; extra == 'toml'",
      "xmltodict (>=0.13.0) ; extra == 'xml'",
      "PyYAML (>=6.0) ; extra == 'yaml'"
    ],
    "requires_python": "",
    "summary": "Utility for data juggling.",
    "version": "0.5.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15963354,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5a363c96d80f3e0c3172e6eb85f5695788cefeb9264513dd3ccb30f166d4cfc",
          "md5": "2d5e2bf034272cd23227b51e017b58a4",
          "sha256": "5b4a0b6cd9d4a44d07c00db20a96bf0b49b8b44263b37b8fc19a3b678642057a"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d5e2bf034272cd23227b51e017b58a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16984,
        "upload_time": "2022-09-01T06:19:03",
        "upload_time_iso_8601": "2022-09-01T06:19:03.484333Z",
        "url": "https://files.pythonhosted.org/packages/b5/a3/63c96d80f3e0c3172e6eb85f5695788cefeb9264513dd3ccb30f166d4cfc/datajuggler-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34c02b9c0bb6a864fae5cbf16d4d4ddb59b15b7e64148c13b51552b4add28d6f",
          "md5": "34f7ad63e80e3b04d05d21d0be25018b",
          "sha256": "220c8642dd79eb9a6f32d7a16c358a6f339da8f65ea2650d5b541e861c28924f"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "34f7ad63e80e3b04d05d21d0be25018b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26124,
        "upload_time": "2022-09-01T06:19:07",
        "upload_time_iso_8601": "2022-09-01T06:19:07.572174Z",
        "url": "https://files.pythonhosted.org/packages/34/c0/2b9c0bb6a864fae5cbf16d4d4ddb59b15b7e64148c13b51552b4add28d6f/datajuggler-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cc939682501e924f4c8e7f1432458c15f81aade9a1148f878307cb3ae1edeab",
          "md5": "7459570ae14d91d9bdc6d5f3513e6f08",
          "sha256": "2e582d1628beadf3aaea75e62579ca1200c2f46b9e403bac21b564ffab1a2e1d"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7459570ae14d91d9bdc6d5f3513e6f08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17218,
        "upload_time": "2022-09-01T06:49:57",
        "upload_time_iso_8601": "2022-09-01T06:49:57.656196Z",
        "url": "https://files.pythonhosted.org/packages/2c/c9/39682501e924f4c8e7f1432458c15f81aade9a1148f878307cb3ae1edeab/datajuggler-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aaf8ddabaf91eb403c1e369e127a7060ac2bd5da1dcdbce8a4a938cbb7e1b3ee",
          "md5": "88f8911e80420b8e376c414d137a5b07",
          "sha256": "547a4eb9d571960f2e068a4d1659dcd0bbb1bfb49fa451f7f4f0699ab6e621c0"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "88f8911e80420b8e376c414d137a5b07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26678,
        "upload_time": "2022-09-01T06:50:02",
        "upload_time_iso_8601": "2022-09-01T06:50:02.374143Z",
        "url": "https://files.pythonhosted.org/packages/aa/f8/ddabaf91eb403c1e369e127a7060ac2bd5da1dcdbce8a4a938cbb7e1b3ee/datajuggler-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "becfe9c5570b9407d78afcea1a1021df4e13e87b135cce06bd03666d8ddc24d4",
          "md5": "6f1bd8e0b9be1fb0a0d6b6ec6cc8e251",
          "sha256": "1a75db45927558a178ac7579d19738344b3dd4962ea731a9f7ac05d458a82f74"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f1bd8e0b9be1fb0a0d6b6ec6cc8e251",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17497,
        "upload_time": "2022-09-01T23:59:15",
        "upload_time_iso_8601": "2022-09-01T23:59:15.048398Z",
        "url": "https://files.pythonhosted.org/packages/be/cf/e9c5570b9407d78afcea1a1021df4e13e87b135cce06bd03666d8ddc24d4/datajuggler-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b31ee842254d938684713ff470963e9715926186c58c544918c5004c2dd68420",
          "md5": "c1719f1dcda297ed803d53c10ccd7b18",
          "sha256": "fa03229f6fe443424cb9b17e6133c2a7fd57565502a5801ce8824f5935d4799e"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c1719f1dcda297ed803d53c10ccd7b18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27380,
        "upload_time": "2022-09-01T23:59:19",
        "upload_time_iso_8601": "2022-09-01T23:59:19.073282Z",
        "url": "https://files.pythonhosted.org/packages/b3/1e/e842254d938684713ff470963e9715926186c58c544918c5004c2dd68420/datajuggler-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e312cf401a8a59a8cbb2a1170e3061026340e4963f62b6c36ad1c803b6b0b815",
          "md5": "91e335f418c839cdc4386305676ef5bc",
          "sha256": "d12fa4aeb8dfce20836693748e3259f2643c13b611dcfc49147f555c6a9f1ff6"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91e335f418c839cdc4386305676ef5bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17742,
        "upload_time": "2022-09-02T02:25:51",
        "upload_time_iso_8601": "2022-09-02T02:25:51.234293Z",
        "url": "https://files.pythonhosted.org/packages/e3/12/cf401a8a59a8cbb2a1170e3061026340e4963f62b6c36ad1c803b6b0b815/datajuggler-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dbe9bdfe7c9e1fc138b4b1528d9f8316dd9f3e9a9e5a49f25957d200e5cfd5a",
          "md5": "94026fe8c6e99eaac448319ba5af216b",
          "sha256": "07e6218a703038ce6d55e9579397b5ecd97f6b39d43055e86431243f5210bc65"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "94026fe8c6e99eaac448319ba5af216b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28709,
        "upload_time": "2022-09-02T02:25:55",
        "upload_time_iso_8601": "2022-09-02T02:25:55.538617Z",
        "url": "https://files.pythonhosted.org/packages/6d/be/9bdfe7c9e1fc138b4b1528d9f8316dd9f3e9a9e5a49f25957d200e5cfd5a/datajuggler-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2437aef49c6fb817e898fe47985c9ff4f62fbe8ce1df569b8a99b7ba2d010ee",
          "md5": "8f5daf0abb2f6fc6d5364327c631f906",
          "sha256": "91e5637bc9ba8ae844b1b8d31027ca7be4f2776a0810458bd4356949f84d9e49"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f5daf0abb2f6fc6d5364327c631f906",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18690,
        "upload_time": "2022-09-02T05:05:36",
        "upload_time_iso_8601": "2022-09-02T05:05:36.505539Z",
        "url": "https://files.pythonhosted.org/packages/f2/43/7aef49c6fb817e898fe47985c9ff4f62fbe8ce1df569b8a99b7ba2d010ee/datajuggler-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6889a2d6850105c654af4a1087c0d93bc5d7dd398cc688ac7b7ac0da80d2cd0",
          "md5": "3af2e8ac3e81f46d4752b52a79e1e7df",
          "sha256": "1f07322db6522031c6972840beb987e1de6ebdfbf3b8b14392fab185ffe8049e"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3af2e8ac3e81f46d4752b52a79e1e7df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30931,
        "upload_time": "2022-09-02T05:05:40",
        "upload_time_iso_8601": "2022-09-02T05:05:40.425237Z",
        "url": "https://files.pythonhosted.org/packages/b6/88/9a2d6850105c654af4a1087c0d93bc5d7dd398cc688ac7b7ac0da80d2cd0/datajuggler-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a58871f9d556c86f70052a87380099a2daa10d49884a1a8014a37534c55a0af",
          "md5": "658e44eb0b24b823bb35d3096667a79e",
          "sha256": "bc20f64d067269678f87ba1df9973304c94809808617e387681b0f808ade0bd4"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "658e44eb0b24b823bb35d3096667a79e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23837,
        "upload_time": "2022-09-07T03:25:48",
        "upload_time_iso_8601": "2022-09-07T03:25:48.385403Z",
        "url": "https://files.pythonhosted.org/packages/0a/58/871f9d556c86f70052a87380099a2daa10d49884a1a8014a37534c55a0af/datajuggler-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8fa60f214cda418a8b449a36ed8d046bbf369469f40f23eb927148b4822757d",
          "md5": "02b76e7db70ca475918e07845890db34",
          "sha256": "f2b499dad9e475f9716ff43697ddc226cd66349951fa4269143cb8007fc78ee8"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "02b76e7db70ca475918e07845890db34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39497,
        "upload_time": "2022-09-07T03:25:53",
        "upload_time_iso_8601": "2022-09-07T03:25:53.036823Z",
        "url": "https://files.pythonhosted.org/packages/c8/fa/60f214cda418a8b449a36ed8d046bbf369469f40f23eb927148b4822757d/datajuggler-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8777157a153eacb358c63aa7372d6cba9fa0579136d1a43ff816d2ba221df481",
          "md5": "74e5216a751c3b3c24dd818de770abba",
          "sha256": "f17ec05292e28e4ecb2313ecaaa973f65ff681c33724f2e1a76bd029316578ca"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74e5216a751c3b3c24dd818de770abba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23906,
        "upload_time": "2022-09-08T03:37:18",
        "upload_time_iso_8601": "2022-09-08T03:37:18.623548Z",
        "url": "https://files.pythonhosted.org/packages/87/77/157a153eacb358c63aa7372d6cba9fa0579136d1a43ff816d2ba221df481/datajuggler-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c846574b2bb3d98c99fd59b3e5af70678ab2bc53b4e9e93951a7d917a30fec9",
          "md5": "35be6affefc8b7b110f46c9e53f4ca06",
          "sha256": "ecf37d6fd9ad08e7445c01a52ae0ffeb4af703b0e996a981f57c97ba3e04abe8"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "35be6affefc8b7b110f46c9e53f4ca06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39827,
        "upload_time": "2022-09-08T03:37:23",
        "upload_time_iso_8601": "2022-09-08T03:37:23.293832Z",
        "url": "https://files.pythonhosted.org/packages/8c/84/6574b2bb3d98c99fd59b3e5af70678ab2bc53b4e9e93951a7d917a30fec9/datajuggler-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "261541801e9625c726b30308e5643e8c799da2716dcb799e245dd942ccbfbbf9",
          "md5": "dad5ac6b7c7109f91550e8f37009f664",
          "sha256": "2424bd3a38682c4823967db624ad74f43475af81160ac556d7e0813c2cf05240"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dad5ac6b7c7109f91550e8f37009f664",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24911,
        "upload_time": "2022-09-08T05:38:35",
        "upload_time_iso_8601": "2022-09-08T05:38:35.141618Z",
        "url": "https://files.pythonhosted.org/packages/26/15/41801e9625c726b30308e5643e8c799da2716dcb799e245dd942ccbfbbf9/datajuggler-0.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "569fa9a1f43fe9bdecb34d2ec983af1f1e79085447abc56d58df02e6d14d0a0c",
          "md5": "73959d81112b3e8661b3a3c90e4684fd",
          "sha256": "d5ea956b2713d87975623066bb4301451c4688f1baf1d23a7df7271164dcb93c"
        },
        "downloads": -1,
        "filename": "datajuggler-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "73959d81112b3e8661b3a3c90e4684fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41197,
        "upload_time": "2022-09-08T05:38:40",
        "upload_time_iso_8601": "2022-09-08T05:38:40.223457Z",
        "url": "https://files.pythonhosted.org/packages/56/9f/a9a1f43fe9bdecb34d2ec983af1f1e79085447abc56d58df02e6d14d0a0c/datajuggler-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "157ddd1b24429a3d315dcfe4c70f6489843e7f8bab70f8577e9fe564359c6c99",
          "md5": "aee0015b172574cf9a8d8c633e125641",
          "sha256": "4645f6802310196b788658b336f9a21d46a7c4153dc0521c536fc4fe93906ee4"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aee0015b172574cf9a8d8c633e125641",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56937,
        "upload_time": "2022-10-06T02:26:56",
        "upload_time_iso_8601": "2022-10-06T02:26:56.564243Z",
        "url": "https://files.pythonhosted.org/packages/15/7d/dd1b24429a3d315dcfe4c70f6489843e7f8bab70f8577e9fe564359c6c99/datajuggler-0.3.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d3eb7be04019d9423f14453487a2f3b235cba1cefa0c227e9ca656e81e36f39",
          "md5": "9e7c747e35f4d84f70a890f6fa4141d5",
          "sha256": "e54e41bfe95bcaf3013469619a786f17e4315e51a888bc6ccb28b542de4eb53d"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "9e7c747e35f4d84f70a890f6fa4141d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 85037,
        "upload_time": "2022-10-06T02:27:02",
        "upload_time_iso_8601": "2022-10-06T02:27:02.353835Z",
        "url": "https://files.pythonhosted.org/packages/5d/3e/b7be04019d9423f14453487a2f3b235cba1cefa0c227e9ca656e81e36f39/datajuggler-0.3.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af2eecbee805c766d0c2ecb7350888d9c61bcb8f508d4c9e72bcc4a3c8a5c866",
          "md5": "5d489123f9641de41fdf23ead4677c21",
          "sha256": "fd2181012f458e324d622391659b3715a79a73bf2d0e114f0dd35d2efadb3eda"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d489123f9641de41fdf23ead4677c21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 57771,
        "upload_time": "2022-10-06T05:14:03",
        "upload_time_iso_8601": "2022-10-06T05:14:03.085742Z",
        "url": "https://files.pythonhosted.org/packages/af/2e/ecbee805c766d0c2ecb7350888d9c61bcb8f508d4c9e72bcc4a3c8a5c866/datajuggler-0.3.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5a873a281de4859393e670a36619f666fbb2a9c47ac6a29be29b5a6c20a1151",
          "md5": "955bbf3360b7689a8dcf35f1a5b1a5ac",
          "sha256": "b0d31fd5696fd1895c56976277a5fb85eb97b06209520a7156d311964c4e824f"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.11.tar.gz",
        "has_sig": false,
        "md5_digest": "955bbf3360b7689a8dcf35f1a5b1a5ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 86542,
        "upload_time": "2022-10-06T05:14:10",
        "upload_time_iso_8601": "2022-10-06T05:14:10.261772Z",
        "url": "https://files.pythonhosted.org/packages/d5/a8/73a281de4859393e670a36619f666fbb2a9c47ac6a29be29b5a6c20a1151/datajuggler-0.3.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff1300314d1c68b468b52b16f6fe07c95c7f0dbf1f837fd878df357919fcc33b",
          "md5": "08a0d12e0a5c53e03369db442725e357",
          "sha256": "f030f8776e043b45c215d5615ba1637a97c051fc77513dbfc8aaf2b54415d34c"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08a0d12e0a5c53e03369db442725e357",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58215,
        "upload_time": "2022-10-07T00:15:41",
        "upload_time_iso_8601": "2022-10-07T00:15:41.554477Z",
        "url": "https://files.pythonhosted.org/packages/ff/13/00314d1c68b468b52b16f6fe07c95c7f0dbf1f837fd878df357919fcc33b/datajuggler-0.3.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "929f31ba9a3ee0d54a3fb89d234f6649099af4740971f8f732ff780bfbd93cc4",
          "md5": "0bc0c71f9df694d18d93206c1c52b08c",
          "sha256": "1fa2d6d39697165efff9a462ce67064a785a4160377bbc9eaf487b61b500414f"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.12.tar.gz",
        "has_sig": false,
        "md5_digest": "0bc0c71f9df694d18d93206c1c52b08c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87458,
        "upload_time": "2022-10-07T00:15:49",
        "upload_time_iso_8601": "2022-10-07T00:15:49.951162Z",
        "url": "https://files.pythonhosted.org/packages/92/9f/31ba9a3ee0d54a3fb89d234f6649099af4740971f8f732ff780bfbd93cc4/datajuggler-0.3.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58e4076d087360871f87fc9d3d6bf3684092c33fcd29e2d53022b39cab8b81a8",
          "md5": "a80af3b6887f2f421de93769368dcc4e",
          "sha256": "895389dd36bfac19a7e68f0eaf1a5b50491106359182c3a8e1abc71185b9c2d9"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a80af3b6887f2f421de93769368dcc4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58420,
        "upload_time": "2022-10-07T06:35:50",
        "upload_time_iso_8601": "2022-10-07T06:35:50.242865Z",
        "url": "https://files.pythonhosted.org/packages/58/e4/076d087360871f87fc9d3d6bf3684092c33fcd29e2d53022b39cab8b81a8/datajuggler-0.3.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31e9f05932f10774b15403bd48cec933ccf65d8b9c5b8dbfeaaa467b2e323286",
          "md5": "3682664fc765a7fd64d7dce20bc6af28",
          "sha256": "75c25452a55f2f7c8d2a732c6559aa30afda7e4192649bae255b9eb66b21f2b5"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.14.tar.gz",
        "has_sig": false,
        "md5_digest": "3682664fc765a7fd64d7dce20bc6af28",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87916,
        "upload_time": "2022-10-07T06:35:57",
        "upload_time_iso_8601": "2022-10-07T06:35:57.543875Z",
        "url": "https://files.pythonhosted.org/packages/31/e9/f05932f10774b15403bd48cec933ccf65d8b9c5b8dbfeaaa467b2e323286/datajuggler-0.3.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d601441086ac10ec45c3f8d3eabd5f57d9f4c36891ab1101e18cb4d5e4531987",
          "md5": "191601414fbe5ad12ded9eb192787776",
          "sha256": "407df5e416985da5a76674612a4b5f063f1a692e2c583aa9ec09b178ff8a475d"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "191601414fbe5ad12ded9eb192787776",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58464,
        "upload_time": "2022-10-11T00:07:58",
        "upload_time_iso_8601": "2022-10-11T00:07:58.780610Z",
        "url": "https://files.pythonhosted.org/packages/d6/01/441086ac10ec45c3f8d3eabd5f57d9f4c36891ab1101e18cb4d5e4531987/datajuggler-0.3.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c205d1a46fb52cee6d674a5f45267853083e8808e525e265023605e5e313381",
          "md5": "757bfbaf54767dab5eacbaf8786c598f",
          "sha256": "02c565c4a5eec8e9fdad617e5894731e2466571d2399271c0d7d04299e4d14df"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.16.tar.gz",
        "has_sig": false,
        "md5_digest": "757bfbaf54767dab5eacbaf8786c598f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87968,
        "upload_time": "2022-10-11T00:08:05",
        "upload_time_iso_8601": "2022-10-11T00:08:05.195459Z",
        "url": "https://files.pythonhosted.org/packages/6c/20/5d1a46fb52cee6d674a5f45267853083e8808e525e265023605e5e313381/datajuggler-0.3.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebd76a42eb558d4ddce58c4f701d5dda348fde7c3246fe9338d9902d4011e17a",
          "md5": "6ea68087332e13e1d709e41af072d0fa",
          "sha256": "8c6bdfe86ac90f569d4a0d5398107fc9c93559250d214047c4e3310d115cd19a"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ea68087332e13e1d709e41af072d0fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58404,
        "upload_time": "2022-10-11T02:31:00",
        "upload_time_iso_8601": "2022-10-11T02:31:00.888857Z",
        "url": "https://files.pythonhosted.org/packages/eb/d7/6a42eb558d4ddce58c4f701d5dda348fde7c3246fe9338d9902d4011e17a/datajuggler-0.3.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5963dfa361234da92b51efaaa44bcaf5e1714f85cda7a7d7055b889cca8a8d95",
          "md5": "935ce80511c5f4854ee78194fdd04e48",
          "sha256": "653e3237675e28a5601d3623ba2229419ca0dd29aad74cbaed8542d1d07c8d20"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.18.tar.gz",
        "has_sig": false,
        "md5_digest": "935ce80511c5f4854ee78194fdd04e48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87922,
        "upload_time": "2022-10-11T02:31:07",
        "upload_time_iso_8601": "2022-10-11T02:31:07.749061Z",
        "url": "https://files.pythonhosted.org/packages/59/63/dfa361234da92b51efaaa44bcaf5e1714f85cda7a7d7055b889cca8a8d95/datajuggler-0.3.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47c04739cfb2febfc595af2f1c7a924893c4d349f87d2d0c1cde21ae2f9ef0db",
          "md5": "9dd89c91e959273f19acec2016518769",
          "sha256": "8e468350d5c04610b89a9511ed6ae2a867a7277a9492d692f8d20e17abfe2fa2"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9dd89c91e959273f19acec2016518769",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58382,
        "upload_time": "2022-10-11T03:05:50",
        "upload_time_iso_8601": "2022-10-11T03:05:50.288926Z",
        "url": "https://files.pythonhosted.org/packages/47/c0/4739cfb2febfc595af2f1c7a924893c4d349f87d2d0c1cde21ae2f9ef0db/datajuggler-0.3.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd7eb564ce3bd6f4bcfd127037454459f4ce24762a48f45677c396338828fd2e",
          "md5": "69e4891f77b07bc999ea7b1050122ada",
          "sha256": "c72c9fc69eb3faad0679b82cf3fdc77a561a105c96a2381c9ac302b932bfb156"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.19.tar.gz",
        "has_sig": false,
        "md5_digest": "69e4891f77b07bc999ea7b1050122ada",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87897,
        "upload_time": "2022-10-11T03:05:56",
        "upload_time_iso_8601": "2022-10-11T03:05:56.440689Z",
        "url": "https://files.pythonhosted.org/packages/fd/7e/b564ce3bd6f4bcfd127037454459f4ce24762a48f45677c396338828fd2e/datajuggler-0.3.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b2ae7f3e724da35b8af2a4c43ea0bb86d1b23a8ab5ae8df857e61a1db55aa69",
          "md5": "d22eaac52a68e1fbafc3c98e1c529b72",
          "sha256": "d674bae2a76444fcc26d528204d10e3a87439ef656ba18db64c7af46ccb1d137"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d22eaac52a68e1fbafc3c98e1c529b72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 55802,
        "upload_time": "2022-10-03T05:44:30",
        "upload_time_iso_8601": "2022-10-03T05:44:30.605412Z",
        "url": "https://files.pythonhosted.org/packages/0b/2a/e7f3e724da35b8af2a4c43ea0bb86d1b23a8ab5ae8df857e61a1db55aa69/datajuggler-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a426fcfa7b8819d7d407d4ca6202831e5e1d8a7565921dbd01ad13d9da00aa85",
          "md5": "c1a8ced43c1fdfb676fbbf46b2c413c3",
          "sha256": "6165cc146ad8c05f24879e8daee75a55a46747252e1d7fa06d4c71bbc91c19e8"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c1a8ced43c1fdfb676fbbf46b2c413c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 83268,
        "upload_time": "2022-10-03T05:44:36",
        "upload_time_iso_8601": "2022-10-03T05:44:36.245975Z",
        "url": "https://files.pythonhosted.org/packages/a4/26/fcfa7b8819d7d407d4ca6202831e5e1d8a7565921dbd01ad13d9da00aa85/datajuggler-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad289d74a1a5db8040e39593b71453699d7c2a2115b0114a14273a6bfad58bb5",
          "md5": "50306ca956efd3fde95545e85ecdc21d",
          "sha256": "6e52f484fada4c305156b89c0cead58035d2069a79eabd162c026950c1274c46"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.20-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50306ca956efd3fde95545e85ecdc21d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58370,
        "upload_time": "2022-10-19T00:31:29",
        "upload_time_iso_8601": "2022-10-19T00:31:29.738660Z",
        "url": "https://files.pythonhosted.org/packages/ad/28/9d74a1a5db8040e39593b71453699d7c2a2115b0114a14273a6bfad58bb5/datajuggler-0.3.20-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da72a0eac9ff376984c8b7cbeb2dfc08de0f202d52066133a60adf79d0b39dbc",
          "md5": "6a739c3bf5b2f8ccd65617be708ca2f7",
          "sha256": "0307aedd915b8b6a3975cf3afcbaf4cd0110a68538c7428f0fbab37160ae9948"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.20.tar.gz",
        "has_sig": false,
        "md5_digest": "6a739c3bf5b2f8ccd65617be708ca2f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87779,
        "upload_time": "2022-10-19T00:31:36",
        "upload_time_iso_8601": "2022-10-19T00:31:36.563452Z",
        "url": "https://files.pythonhosted.org/packages/da/72/a0eac9ff376984c8b7cbeb2dfc08de0f202d52066133a60adf79d0b39dbc/datajuggler-0.3.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3029d3696d37acfde2d08fea92b6806171693b2e72e7178395b04b8b05327794",
          "md5": "cdb5613342cb8a67f3d21c7ee6868f55",
          "sha256": "96672055ea270cf6c1b70b9dfa1b56e09ada9844fdc355830096709a75971744"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cdb5613342cb8a67f3d21c7ee6868f55",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56451,
        "upload_time": "2022-10-04T01:12:57",
        "upload_time_iso_8601": "2022-10-04T01:12:57.287989Z",
        "url": "https://files.pythonhosted.org/packages/30/29/d3696d37acfde2d08fea92b6806171693b2e72e7178395b04b8b05327794/datajuggler-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb618e58e47191b6612aa29db979e625daf6cd3d0c357e0862b6d7dc0b614908",
          "md5": "4afd8cfcd4c5e95227277e752bf4455c",
          "sha256": "5d45ba537386f4435e6cb320affbfc9ea5cdf5aeffd7be23fe14187a84e27f9b"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4afd8cfcd4c5e95227277e752bf4455c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 84829,
        "upload_time": "2022-10-04T01:13:03",
        "upload_time_iso_8601": "2022-10-04T01:13:03.456697Z",
        "url": "https://files.pythonhosted.org/packages/fb/61/8e58e47191b6612aa29db979e625daf6cd3d0c357e0862b6d7dc0b614908/datajuggler-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c4cea4dd969ced25f8b00515007d61e9c871d58e0c52996e0aa16335503d5e6",
          "md5": "70a5aef924962e7883780f1bd8304189",
          "sha256": "e91801039c25c4354112aa65e8c08228b68946536160a5314c9a6b490ca307ce"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70a5aef924962e7883780f1bd8304189",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56382,
        "upload_time": "2022-10-05T04:10:54",
        "upload_time_iso_8601": "2022-10-05T04:10:54.058082Z",
        "url": "https://files.pythonhosted.org/packages/7c/4c/ea4dd969ced25f8b00515007d61e9c871d58e0c52996e0aa16335503d5e6/datajuggler-0.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2dd573813c6a414e07aa5df9613ef1a3c7fc68398c4cc9ed9dcadf248c823fc",
          "md5": "06e06ad13447312b4b24d9820fc98c81",
          "sha256": "a4096d07940c1b40411b4a2b795a444d75e6b8d9962bcc212bb4155baa28a8d2"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "06e06ad13447312b4b24d9820fc98c81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 83995,
        "upload_time": "2022-10-05T04:11:01",
        "upload_time_iso_8601": "2022-10-05T04:11:01.024957Z",
        "url": "https://files.pythonhosted.org/packages/a2/dd/573813c6a414e07aa5df9613ef1a3c7fc68398c4cc9ed9dcadf248c823fc/datajuggler-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2320f2893e021a26ed8a2b77f2e84d84baf1420dd84fd60395d4df1d32c7158c",
          "md5": "6391a8cd4c01ae622174987691c2feaf",
          "sha256": "01f22bfccf464c312b5d715deb3faed09151c9e0a249bfabb5ec2f88499bacbc"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6391a8cd4c01ae622174987691c2feaf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56548,
        "upload_time": "2022-10-05T23:24:33",
        "upload_time_iso_8601": "2022-10-05T23:24:33.014248Z",
        "url": "https://files.pythonhosted.org/packages/23/20/f2893e021a26ed8a2b77f2e84d84baf1420dd84fd60395d4df1d32c7158c/datajuggler-0.3.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fafb9ba947a4f420eb1580abfe7e11e76b9534835086333957a0f4e7b1f0ae97",
          "md5": "7e491e114139619099bd92503aaa12ce",
          "sha256": "0b4859fba215594538f07e0838e168ad6877d2ee149d2fe6c1b12bbbdb002e42"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "7e491e114139619099bd92503aaa12ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 84451,
        "upload_time": "2022-10-05T23:24:39",
        "upload_time_iso_8601": "2022-10-05T23:24:39.662366Z",
        "url": "https://files.pythonhosted.org/packages/fa/fb/9ba947a4f420eb1580abfe7e11e76b9534835086333957a0f4e7b1f0ae97/datajuggler-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a260098aef97ff8a1b39e4975aff11960163087ed67c18ab7167efe85b7b1c2",
          "md5": "4d22d271aecf6c48e6454c1a80c4aafa",
          "sha256": "fa7321764f4afabae59177ff717cd2dd375b5ad932077b7c23b2940a3cfda6af"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d22d271aecf6c48e6454c1a80c4aafa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56509,
        "upload_time": "2022-10-06T00:11:16",
        "upload_time_iso_8601": "2022-10-06T00:11:16.844461Z",
        "url": "https://files.pythonhosted.org/packages/3a/26/0098aef97ff8a1b39e4975aff11960163087ed67c18ab7167efe85b7b1c2/datajuggler-0.3.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5d245932c697934fc66498e14cd705a89966446f1c173f206a4d68b9b66e323",
          "md5": "64de5fdb1b765f5f91919d250fe14eca",
          "sha256": "422e1891317ad9d86fce7873ab95e1ca73c922924a4aa71e843ad1709cc697f2"
        },
        "downloads": -1,
        "filename": "datajuggler-0.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "64de5fdb1b765f5f91919d250fe14eca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 84447,
        "upload_time": "2022-10-06T00:11:24",
        "upload_time_iso_8601": "2022-10-06T00:11:24.331376Z",
        "url": "https://files.pythonhosted.org/packages/e5/d2/45932c697934fc66498e14cd705a89966446f1c173f206a4d68b9b66e323/datajuggler-0.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b32b697f0e5dd897b8b9ab7a434bce506b5ba198f174fc8ae365228a48f788a",
          "md5": "24887f06d4501072148e29e08f292292",
          "sha256": "05bb5ffad2363c022ed31f9132ef275c00367f75af4df67b37937f057b9b63fc"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24887f06d4501072148e29e08f292292",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 64497,
        "upload_time": "2022-10-19T01:04:52",
        "upload_time_iso_8601": "2022-10-19T01:04:52.665302Z",
        "url": "https://files.pythonhosted.org/packages/6b/32/b697f0e5dd897b8b9ab7a434bce506b5ba198f174fc8ae365228a48f788a/datajuggler-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8e194c833c5e6ce974bffa0b33b79ca35d7d9d7ac8d06da2796ca14247bc614",
          "md5": "08a126fc05c62cdf1bda897938dd581a",
          "sha256": "e5cee598112fe279db66e6e807ae17d9997942b7c37f944c4fc140faafabd73e"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "08a126fc05c62cdf1bda897938dd581a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 97205,
        "upload_time": "2022-10-19T01:04:58",
        "upload_time_iso_8601": "2022-10-19T01:04:58.912369Z",
        "url": "https://files.pythonhosted.org/packages/b8/e1/94c833c5e6ce974bffa0b33b79ca35d7d9d7ac8d06da2796ca14247bc614/datajuggler-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "435fd5ff8b9513a0b6557cc78341ad69b86338395710db529db916a342d9208a",
          "md5": "91571e063aab26edff5a0a52ec5ee088",
          "sha256": "dc191f5d6dae58e92f73ad0a437aff7630c9628f088a568c3e44a5834f11e17f"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91571e063aab26edff5a0a52ec5ee088",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 66763,
        "upload_time": "2022-10-24T06:33:50",
        "upload_time_iso_8601": "2022-10-24T06:33:50.123736Z",
        "url": "https://files.pythonhosted.org/packages/43/5f/d5ff8b9513a0b6557cc78341ad69b86338395710db529db916a342d9208a/datajuggler-0.4.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7812a22b90ba69ca71b31ef9d5e85810f5d4c24e2332fc5ddb5a3e417251b61b",
          "md5": "2738dccf63d18fd0ab83ada397b4bdeb",
          "sha256": "375edd2cb1842f7e3204c36ce0cd1cb6b78268c31afeec9d577f55fcb599a212"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.10.tar.gz",
        "has_sig": false,
        "md5_digest": "2738dccf63d18fd0ab83ada397b4bdeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 98273,
        "upload_time": "2022-10-24T06:33:55",
        "upload_time_iso_8601": "2022-10-24T06:33:55.959223Z",
        "url": "https://files.pythonhosted.org/packages/78/12/a22b90ba69ca71b31ef9d5e85810f5d4c24e2332fc5ddb5a3e417251b61b/datajuggler-0.4.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.10.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91fdb8997dea44e558648561d958199de1517bcd3f2b5f0b5a8efa6c8d848930",
          "md5": "6dea8e62cb6591883a6aa8c103e06990",
          "sha256": "08c7761ea33c193215d8605fb4c39f3a23d4d85882531663a3a53d6d6c6f65d4"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.10.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6dea8e62cb6591883a6aa8c103e06990",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 67578,
        "upload_time": "2022-10-27T04:49:56",
        "upload_time_iso_8601": "2022-10-27T04:49:56.033729Z",
        "url": "https://files.pythonhosted.org/packages/91/fd/b8997dea44e558648561d958199de1517bcd3f2b5f0b5a8efa6c8d848930/datajuggler-0.4.10.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e4c8e08a4ad6e6c7442bab225fde4b09cdf2b20e8665ecd83566538adf01057",
          "md5": "d8141bbaa116083de64c49a60c53a00a",
          "sha256": "95079a635fc4a6b9f14abe9a0e357e753a5005aaa220c7f6aecebe677d57b521"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.10.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d8141bbaa116083de64c49a60c53a00a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 100613,
        "upload_time": "2022-10-27T04:50:03",
        "upload_time_iso_8601": "2022-10-27T04:50:03.244338Z",
        "url": "https://files.pythonhosted.org/packages/1e/4c/8e08a4ad6e6c7442bab225fde4b09cdf2b20e8665ecd83566538adf01057/datajuggler-0.4.10.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2da42f77ba78c23df5073d8f549e68994ceb79e4a71bdb9e45d331708604fc63",
          "md5": "2b5a5a46083ad9995780c49e0b8f4b75",
          "sha256": "df07d7927e78e02e8443171f528230fe377a48718c47b1c0d17b1456efd57901"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b5a5a46083ad9995780c49e0b8f4b75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 64553,
        "upload_time": "2022-10-19T02:26:49",
        "upload_time_iso_8601": "2022-10-19T02:26:49.039057Z",
        "url": "https://files.pythonhosted.org/packages/2d/a4/2f77ba78c23df5073d8f549e68994ceb79e4a71bdb9e45d331708604fc63/datajuggler-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "233fef4593e931697b7b96a648550bc8d0ef1e1f7a3d355c3236d1c0353f26b6",
          "md5": "ac1f668c98b952328a392e0876de8dd2",
          "sha256": "3188011e1d4135a135136f1c00c808d37118a1c75763cdada362f3ad3a14d8ed"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ac1f668c98b952328a392e0876de8dd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 97255,
        "upload_time": "2022-10-19T02:26:54",
        "upload_time_iso_8601": "2022-10-19T02:26:54.975827Z",
        "url": "https://files.pythonhosted.org/packages/23/3f/ef4593e931697b7b96a648550bc8d0ef1e1f7a3d355c3236d1c0353f26b6/datajuggler-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b548281722f742d2b47b889efa4a3bfc9e585d4be2e4e5d1f1b7d54b046ddf21",
          "md5": "6055b5fa734cf83e2091128c85b3e797",
          "sha256": "5f4bc6c446e9505267826cdc346674c2e2e79456d0f2a376f4312622884766ff"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6055b5fa734cf83e2091128c85b3e797",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 65219,
        "upload_time": "2022-10-20T00:29:35",
        "upload_time_iso_8601": "2022-10-20T00:29:35.926567Z",
        "url": "https://files.pythonhosted.org/packages/b5/48/281722f742d2b47b889efa4a3bfc9e585d4be2e4e5d1f1b7d54b046ddf21/datajuggler-0.4.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeb89fc0f8142e7a2c52658bfb075df0faf4caaaa2d202f5b94792de94d7211e",
          "md5": "87f11f818c43d1d510704fcf9b82e87d",
          "sha256": "d5d84fdfc3b3222e1242e779bf2375a1e1a8b20fb89d13b8dbd4ccc8a718a65c"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "87f11f818c43d1d510704fcf9b82e87d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 97641,
        "upload_time": "2022-10-20T00:29:42",
        "upload_time_iso_8601": "2022-10-20T00:29:42.970551Z",
        "url": "https://files.pythonhosted.org/packages/ae/b8/9fc0f8142e7a2c52658bfb075df0faf4caaaa2d202f5b94792de94d7211e/datajuggler-0.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c28b0d6bec96a5f7d22353158a9ddfd9f9b1e13cf939a47872377ff453ae0fd9",
          "md5": "cf14fcd4eace36c1b40ff4637cb42790",
          "sha256": "c9734948632e27dd03dc3949a1358716580bc7f8824567b18360fedd5fa8d8ea"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf14fcd4eace36c1b40ff4637cb42790",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 66068,
        "upload_time": "2022-10-21T02:23:48",
        "upload_time_iso_8601": "2022-10-21T02:23:48.805447Z",
        "url": "https://files.pythonhosted.org/packages/c2/8b/0d6bec96a5f7d22353158a9ddfd9f9b1e13cf939a47872377ff453ae0fd9/datajuggler-0.4.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1d3b2a630ade30db24b29b2a904013128c18842bc7f7bac5093785c825a5c8e",
          "md5": "e6f4283d307aeaada9e4c23d08490927",
          "sha256": "48e0f529f04cd5cab50785aee6fde4cb92b1620341789f97b672cf891a5a3108"
        },
        "downloads": -1,
        "filename": "datajuggler-0.4.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e6f4283d307aeaada9e4c23d08490927",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 97632,
        "upload_time": "2022-10-21T02:23:57",
        "upload_time_iso_8601": "2022-10-21T02:23:57.781267Z",
        "url": "https://files.pythonhosted.org/packages/a1/d3/b2a630ade30db24b29b2a904013128c18842bc7f7bac5093785c825a5c8e/datajuggler-0.4.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74fc2329659311c08ffc36878323bb00f18dfcf2689c10cf6d6f17dfe3f0c33c",
          "md5": "6d93080fa59983d948543b5b2fc727f5",
          "sha256": "f1fec1b127988d70a16b2b301048efd0f36b3ab2906252edda9e63b134f68d7c"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d93080fa59983d948543b5b2fc727f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 69132,
        "upload_time": "2022-10-28T04:08:10",
        "upload_time_iso_8601": "2022-10-28T04:08:10.882121Z",
        "url": "https://files.pythonhosted.org/packages/74/fc/2329659311c08ffc36878323bb00f18dfcf2689c10cf6d6f17dfe3f0c33c/datajuggler-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a121f209b2fc9108b3a07d2fc589500884d532342f7c3b91ef3ae272d3cfc5bc",
          "md5": "3a16c57eadbe662a4d29b8d1eb396832",
          "sha256": "789a02a779d96b31922a705239fd90ed9b605429a6f48b1c4c430dddec19dcdb"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3a16c57eadbe662a4d29b8d1eb396832",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 103299,
        "upload_time": "2022-10-28T04:08:18",
        "upload_time_iso_8601": "2022-10-28T04:08:18.139669Z",
        "url": "https://files.pythonhosted.org/packages/a1/21/f209b2fc9108b3a07d2fc589500884d532342f7c3b91ef3ae272d3cfc5bc/datajuggler-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa6cf281d5079456a9eeb3cc1a297cfbca9fe76aee1159025aa0be8cd3361983",
          "md5": "8a66398bbb2b338796d28dc267cb0260",
          "sha256": "93737461b1dd9e3295a37f082fecec5f345ab0c4a190935b775e1d5fa28ae074"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a66398bbb2b338796d28dc267cb0260",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70910,
        "upload_time": "2022-10-29T00:29:35",
        "upload_time_iso_8601": "2022-10-29T00:29:35.923219Z",
        "url": "https://files.pythonhosted.org/packages/aa/6c/f281d5079456a9eeb3cc1a297cfbca9fe76aee1159025aa0be8cd3361983/datajuggler-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "173f1287559d95a84031a28617ba02811c612c7aa4ee9809c37eb3488a8e0b82",
          "md5": "ab24244c98b7b5ef777207cff750f354",
          "sha256": "d542f60231c5c67ea48f296dac8bf6e21269b2b7f4fa3e6b7da396c9c037e4de"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ab24244c98b7b5ef777207cff750f354",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 105844,
        "upload_time": "2022-10-29T00:29:45",
        "upload_time_iso_8601": "2022-10-29T00:29:45.032067Z",
        "url": "https://files.pythonhosted.org/packages/17/3f/1287559d95a84031a28617ba02811c612c7aa4ee9809c37eb3488a8e0b82/datajuggler-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8e869d3d92e17306be6946220c96f0188e7c429bc3631e6a195960cd32bf1c5",
          "md5": "dccd57614e1f4d1bce77a98c829949bc",
          "sha256": "68e663d47d78043ac673292fa4534ae12a8d66e8f5266d64806d13e7d65c3002"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dccd57614e1f4d1bce77a98c829949bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70902,
        "upload_time": "2022-11-29T05:53:54",
        "upload_time_iso_8601": "2022-11-29T05:53:54.251084Z",
        "url": "https://files.pythonhosted.org/packages/c8/e8/69d3d92e17306be6946220c96f0188e7c429bc3631e6a195960cd32bf1c5/datajuggler-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a429e75b712a2494eca4a5b8d47985ddc277182e0e11a26b786cbb725c34632",
          "md5": "53d1e99415c465c87941e27213747b9b",
          "sha256": "b1c96a46cd2eb6a213b8091f1bf839ff1a80920296c56187a20db16ebb40cf48"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "53d1e99415c465c87941e27213747b9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 105868,
        "upload_time": "2022-11-29T05:54:00",
        "upload_time_iso_8601": "2022-11-29T05:54:00.501297Z",
        "url": "https://files.pythonhosted.org/packages/2a/42/9e75b712a2494eca4a5b8d47985ddc277182e0e11a26b786cbb725c34632/datajuggler-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05fdcf7ec817bcda8b7166c93b089d88d2fadf424e31ca4a7b893e24f1199638",
          "md5": "fa659c32baae2b315f428874067c2d99",
          "sha256": "f732336e80d9eabf8e957b1306e426868ac807b9aef28274e3c423c107e98339"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa659c32baae2b315f428874067c2d99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70951,
        "upload_time": "2022-11-29T22:41:57",
        "upload_time_iso_8601": "2022-11-29T22:41:57.888183Z",
        "url": "https://files.pythonhosted.org/packages/05/fd/cf7ec817bcda8b7166c93b089d88d2fadf424e31ca4a7b893e24f1199638/datajuggler-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bb4f6dd98977852bd3062235515574c1df5add04db41370d74ad605af62273e",
          "md5": "4a5efd5f49569911d4375b004bde15fa",
          "sha256": "fa9d59673c5c0c89e0303d6d559b287090f5b540d99563ea9edd9e6d6126926e"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4a5efd5f49569911d4375b004bde15fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 105900,
        "upload_time": "2022-11-29T22:42:07",
        "upload_time_iso_8601": "2022-11-29T22:42:07.369740Z",
        "url": "https://files.pythonhosted.org/packages/5b/b4/f6dd98977852bd3062235515574c1df5add04db41370d74ad605af62273e/datajuggler-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf15c7723ae922b121527b634b77a256452d8c1f23816d2ccdfe0c08c0ea3085",
          "md5": "c472bdea04df1de862db3d5cc38595d9",
          "sha256": "5ad06e6e6a566a91bb21bddea5e4a5d037852efee035d9bb7287a744a23a7de6"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c472bdea04df1de862db3d5cc38595d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70975,
        "upload_time": "2022-11-29T22:50:00",
        "upload_time_iso_8601": "2022-11-29T22:50:00.585563Z",
        "url": "https://files.pythonhosted.org/packages/cf/15/c7723ae922b121527b634b77a256452d8c1f23816d2ccdfe0c08c0ea3085/datajuggler-0.5.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c990f7c2d18deb298dfab365676cc979af4a8a12b3991ba706cd2af7fc85e0a",
          "md5": "1a4bbea9a8a46bb6b794bcd0987dcca1",
          "sha256": "fe5a20566133329f601766da105a5945fe11abd9ee19581df61c38cfd4529d53"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a4bbea9a8a46bb6b794bcd0987dcca1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 105915,
        "upload_time": "2022-11-29T22:50:07",
        "upload_time_iso_8601": "2022-11-29T22:50:07.561969Z",
        "url": "https://files.pythonhosted.org/packages/6c/99/0f7c2d18deb298dfab365676cc979af4a8a12b3991ba706cd2af7fc85e0a/datajuggler-0.5.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "525b9044d860d6f000f275dd1d6dc4df6738d45f1746fb9127c10ea3a1bd11d9",
          "md5": "f83a1c17d87d5052b5cbed94c5d15ced",
          "sha256": "886383a68c746d1046c16fc8811942ee88c50ba8fcb0821981f8da9455e6c5c3"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f83a1c17d87d5052b5cbed94c5d15ced",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70998,
        "upload_time": "2022-12-01T02:19:51",
        "upload_time_iso_8601": "2022-12-01T02:19:51.450078Z",
        "url": "https://files.pythonhosted.org/packages/52/5b/9044d860d6f000f275dd1d6dc4df6738d45f1746fb9127c10ea3a1bd11d9/datajuggler-0.5.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e0adcb04ff6c9987a6fbb61d38ad532488a1132ae2dc46d62036383762c5805",
          "md5": "cba1de3fe3ef6a5dc75c81919c99aa0b",
          "sha256": "30ccef14014459698877902d616e297d63ec18dd67088b3dc73b30c26ffc9847"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cba1de3fe3ef6a5dc75c81919c99aa0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 105925,
        "upload_time": "2022-12-01T02:19:59",
        "upload_time_iso_8601": "2022-12-01T02:19:59.012881Z",
        "url": "https://files.pythonhosted.org/packages/6e/0a/dcb04ff6c9987a6fbb61d38ad532488a1132ae2dc46d62036383762c5805/datajuggler-0.5.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "975c7ae4c4071f9ca831f9af52b85364550a286b93c25a548c2673377c287e63",
          "md5": "d990e8a71fb13cf582078a8ad936219a",
          "sha256": "ee2b1fcb235e0f23b8857dbfafa456b25b828a00f69140e22c0845bbd42d0899"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d990e8a71fb13cf582078a8ad936219a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 71001,
        "upload_time": "2022-12-01T04:17:38",
        "upload_time_iso_8601": "2022-12-01T04:17:38.927129Z",
        "url": "https://files.pythonhosted.org/packages/97/5c/7ae4c4071f9ca831f9af52b85364550a286b93c25a548c2673377c287e63/datajuggler-0.5.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96cb0bb3140fa746bd3fa842971f4b99345afaebd4a0175bd7d26e4e504aa1d6",
          "md5": "8c2dc93101391261d8610b77bcb6c2e1",
          "sha256": "298fc0187e576e5fa922e47c55a9fb6c0b21f1c6b205fed048a8cfee06f2d8db"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8c2dc93101391261d8610b77bcb6c2e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 105923,
        "upload_time": "2022-12-01T04:17:46",
        "upload_time_iso_8601": "2022-12-01T04:17:46.071034Z",
        "url": "https://files.pythonhosted.org/packages/96/cb/0bb3140fa746bd3fa842971f4b99345afaebd4a0175bd7d26e4e504aa1d6/datajuggler-0.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23364863ad4e55e119d74e79b184247e2b66246a891eca866a8dc76d5fee3cfd",
          "md5": "545672f5b6973d64250b7164026fda19",
          "sha256": "9311895f94d4a417734584a9a6647183c8675bc04ad423430c27a1544f9cd689"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "545672f5b6973d64250b7164026fda19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70990,
        "upload_time": "2022-12-02T00:33:22",
        "upload_time_iso_8601": "2022-12-02T00:33:22.654850Z",
        "url": "https://files.pythonhosted.org/packages/23/36/4863ad4e55e119d74e79b184247e2b66246a891eca866a8dc76d5fee3cfd/datajuggler-0.5.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0349a6d9cb3b8ccffd4c02003323b5879042874875fec2140da0211f246b64c9",
          "md5": "95821e6a53738a9dea021141b622182d",
          "sha256": "65a1bcdd9f0fa78ffc6460a2cae59567a75ca28eb3f4805fb7beaf2e70e957b9"
        },
        "downloads": -1,
        "filename": "datajuggler-0.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "95821e6a53738a9dea021141b622182d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 105926,
        "upload_time": "2022-12-02T00:33:32",
        "upload_time_iso_8601": "2022-12-02T00:33:32.940846Z",
        "url": "https://files.pythonhosted.org/packages/03/49/a6d9cb3b8ccffd4c02003323b5879042874875fec2140da0211f246b64c9/datajuggler-0.5.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23364863ad4e55e119d74e79b184247e2b66246a891eca866a8dc76d5fee3cfd",
        "md5": "545672f5b6973d64250b7164026fda19",
        "sha256": "9311895f94d4a417734584a9a6647183c8675bc04ad423430c27a1544f9cd689"
      },
      "downloads": -1,
      "filename": "datajuggler-0.5.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "545672f5b6973d64250b7164026fda19",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 70990,
      "upload_time": "2022-12-02T00:33:22",
      "upload_time_iso_8601": "2022-12-02T00:33:22.654850Z",
      "url": "https://files.pythonhosted.org/packages/23/36/4863ad4e55e119d74e79b184247e2b66246a891eca866a8dc76d5fee3cfd/datajuggler-0.5.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0349a6d9cb3b8ccffd4c02003323b5879042874875fec2140da0211f246b64c9",
        "md5": "95821e6a53738a9dea021141b622182d",
        "sha256": "65a1bcdd9f0fa78ffc6460a2cae59567a75ca28eb3f4805fb7beaf2e70e957b9"
      },
      "downloads": -1,
      "filename": "datajuggler-0.5.5.tar.gz",
      "has_sig": false,
      "md5_digest": "95821e6a53738a9dea021141b622182d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 105926,
      "upload_time": "2022-12-02T00:33:32",
      "upload_time_iso_8601": "2022-12-02T00:33:32.940846Z",
      "url": "https://files.pythonhosted.org/packages/03/49/a6d9cb3b8ccffd4c02003323b5879042874875fec2140da0211f246b64c9/datajuggler-0.5.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}