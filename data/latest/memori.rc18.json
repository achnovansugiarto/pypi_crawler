{
  "info": {
    "author": "",
    "author_email": "Andrew Van <vanandrew@wustl.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# memori\n[![CircleCI](https://circleci.com/gh/vanandrew/memori/tree/main.svg?style=svg)](https://circleci.com/gh/vanandrew/memori/tree/main)\n[![Python package](https://github.com/vanandrew/memori/actions/workflows/python-package.yml/badge.svg?branch=main)](https://github.com/vanandrew/memori/actions/workflows/python-package.yml)\n[![codecov](https://codecov.io/gh/vanandrew/memori/branch/main/graph/badge.svg?token=DSVJMHTVLE)](https://codecov.io/gh/vanandrew/memori)\n\nA python library for creating memoized data and code for neuroimaging pipelines\n\n## Table of Contents\n\n1. [Installation](#installation)\n2. [Command-Line Usage](#command-line-usage)\n    1. [`memori`](#memori)\n    2. [`pathman`](#pathman)\n3. [Python Usage](#python-usage)\n    1. [The `Stage` Object](#the-stage-object)\n    2. [The `Pipeline` Object](#the-pipeline-object)\n    3. [Stage Aliases and Complex Pipelines](#stage-aliases-and-complex-pipelines)\n    4. [Hashing external functions](#hashing-external-functions)\n    5. [Path Management](#path-management)\n\n## Installation\n\nTo install, use `pip`:\n```\npip install memori\n```\n## Command-Line Usage\n\n`memori` can be used to memoize the running of command-line scripts. It is designed\nto check the inputs and sha256 integrity of the calling script and determines whether the running of that calling script should be run or not. It accomplishes\nthis through 3 checks:\n\n1. Check against the stored cache that input arguments are all the same.\n2. Check that the sha256 hash of the calling script (and dependents) are the same.\n3. (Optional) Check that the desired outputs match the hashes stored in the cache.\n\nIf at least one of these conditions is not met, `memori` will re-run the script.\n\n### memori\n\nThe main command-line script to use `memori` is simply called `memori` on the command-line:\n\n```bash\nmemori -h [any command/script here]\n```\n\nThe above command will let you view the help of the memori script.\n\nTo call memori on a script simply add `memori` before the command you want\nto call. For example:\n\n```bash\n# wrapping echo in memori\nmemori echo \"this echo command has been wrapped in memori\"\n```\n\nThis will call the `echo` command with `memori`. To cache the running of the\ncommand, you need to specify the `-d/--hash_output` flag:\n\n```bash\n# same command but with cached run\nmemori -d /path/to/cache echo 1\n# the first call will print 1\nmemori -d /path/to/cache echo 1\n# running this a second time will not print anything to the screen\n# since the inputs/command is the same, so execution is skipped!\n```\n\nSince memori determines if a calling script has changed through hashing, you\nmay want to determine script execution if the calling script depends on another\nscript. This can occur if calling script 1 calls script 2 and changes are made\nto script 2. This can be accomplished through the `-c/--dependents` flag.\n\n```bash\n# script execution of script1.sh is now sensitive to changes in script2.sh\nmemori -c script2.sh -d /path/to/cache script1.sh arg0 arg1...\n```\n\nIf we are expecting certain files to be written from a calling script,\nwe can inform `memori` of their existence through the `-o/--outputs` flag.\n`memori` will re-run the calling script if the files are missing/modified.\n\n```bash\nmemori -o /path/to/an/expected/output -d /path/to/cache script.sh arg0 arg1...\n```\n\nThe `-k/--kill` flag can be used to kill the parent process, if the calling\nscript returns an error code. This can be useful to halt a parent script if\nexecution has failed.\n\nUse the `--verbose` flag for under the hood logging info!\n\n### pathman\n\n`pathman` is a script that allows for the convenient management of file\npath manipulations.\n\n```bash\npathman -h\n```\n\nTo view the full help.\n\n###\n\n## Python Usage\n\n`memori` uses a directed acyclic graph (DAG) approach to constructing pipelines.\nNodes of the the graph represent a \"logical unit of processing\" (up to the user\nto define) that can be encomposed in a function. The edges of the\ngraph transfers data between these nodes to create a pipeline.\nTo represent this `memori` employs the use of the `Stage` and `Pipeline` objects.\n\n### The `Stage` object\n\nA `Stage` is a wrapper around a python function and is the conceptual equivalent\nof a node of our graph. A `Stage` object can take input/output from/to other `Stage`\nobjects, but can also be run in isolation. Here is an example of a `Stage` wrapped\naround a python function:\n\n```python\n# our example function\ndef test_function(a, b, c):\n    # Do some stuff\n    d = a + b\n    e = b + c\n    \n    # and return stuff\n    return d, e\n```\n\nWe can wrap this function in a `Stage` object and run it:\n```python\nfrom memori import Stage\n\n# any values a function returns need to be labeled with the `stage_outputs` parameter\nmy_test_stage = Stage(test_function, stage_outputs=[\"d\", \"e\"])\n\n# we can run this stage with the run method and store the results\nresult = my_test_stage.run(1, 2, 3)\n# result will return a dictionary containing: {\"d\": 3, \"e\": 5}\n\n# running it again with different parameters\nresult = my_test_stage.run(2, 3, 4)\n# result will return a dictionary containing: {\"d\": 5, \"e\": 7}\n```\n\nNow lets write a 2nd function that can take input from our `test_function`. Note that \nthe input arguments for this function should match the key names of the stage outputs \nfor the `test_function`.\n\n```python\n# new test function with input arguments matching previous stage\n# function stage_output names\ndef test_function2(d, e):\n    return d + e\n\n# and wrap this in a Stage\nmy_test_stage2 = Stage(test_function2, stage_outputs=[\"f\"])\n\n# to run this we just merely need to **results (kwarg unpacking) to pass information\n# from my_test_stage to my_test_stage2\nresult2 = my_test_stage2.run(**results)\n# result2 will return a dictionary containing: {\"f\": 12}\n\n# or running the entire pipeline from the beginning\nresult2 = my_test_stage2.run(**my_test_stage.run(1, 2, 3))\n# result2 will return a dictionary containing: {\"f\": 8}\n\n# The previous two lines is the equivalent to running\ntest_function2(**test_function(1, 2, 3))\n```\n\nWe can create static values in our `Stage` object that ignores inputs from other stages \nthat are passed into the `run` method.\n\n```python3\n# Stage will take the same params as test_function\n# and use them as static values\nmy_test_stage = Stage(\n    test_function,\n    stage_outputs=[\"d\", \"e\"],\n    a=1,\n    b=2,\n    c=3\n)\n\n# when we run the stage, we will see that it does not change with the input (2, 3, 4)\nresult = my_test_stage.run(2, 3, 4)\n# result will return a dictionary containing: {\"d\": 3, \"e\": 5}\n# if static values weren't used this should return {\"d\": 5, \"e\": 7}\n```\n\nNow we know how to wrap the functions we write into a `Stage` object, but what benefit \ndoes this provide? The main feature of `memori` is to `memoize` the inputs to each \nstage and recall the outputs if they are the same. This can enable long running \nfunctions to be skipped if the results are going to be the same!\n\n```python\n# To enable memoization feature, we need to add the hash_output \n# parameter when constructing a Stage object. hash_output is \n# just some directory to where the memoization files can be \n# written to.\nmy_test_stage = Stage(test_function, stage_output=[\"d\", \"e\"], hash_output=\"/test/directory\")\n\n# run the stage\nmy_test_stage.run(1, 2, 3)\n```\nThis will write 3 files: `test_function.inputs`, `test_function.stage`, and \n`test_function.outputs` at the location: /test/directory\nThese 3 files record the important states of the Stage for memoization, after it has\nbeen run.\n\nThe `.stage` file contains information about the function that was run.\nIt contains some rudimentary static analysis to check whether and code\nwrapped by a Stage has changed in a way that will affect the result. If it has \ndetected this, it will rerun the stage. Note that this file contains binary data\nis mostly non-human readable (unlike the `.inputs` and `.outputs` files).\n\nThe `.inputs` and `.outputs` files contain information about the inputs and outputs of the stage. These files are simply JSON files and upon opening them in a text editor you should see the following:\n\n`test_function.inputs`\n```json\n{\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n}\n```\n\n`test_function.outputs`\n```json\n{\n    \"d\": 3,\n    \"e\": 5\n}\n```\n\n`memori` checks the `.inputs` file on each run to determine if the stage needs to be run (assuming it has also passed the `.stage` file check). If the stage is skipped, the `.outputs` file is used to load the results into the stage.\n\nBy default, `memori` uses the name of the function as the name for the hash files. If you\nwould like to use a different name for these files, you can set the name of the Stage object with\nthe `stage_name` parameter in the constructor:\n\n```python\n# Stage with a custom stage name\nStage(...\n    stage_name=\"my_stage_name\"\n...)\n```\n\nWhen passing path/file strings between `Stage` objects, `memori` has a special behavior: if it\ndetermines the string to be a valid file on the disk, it will hash it with the SHA256\nalgorithm. For files, this gives memoization results that can reflect changes in data integrity:\n\n```python\n# now we specify the input and output to be files on the disk\nfile0 = \"/Some/file/path\"\nfile1 = \"/Some/second/file/path\"\n\n# define our simple test_function that outputs a file path\ndef test_function3(f0):\n    # always return file1\n    return file1\n\n# Now we wrap it in a stage\nmy_test_stage3 = Stage(test_function3, stage_outputs=[\"file1\"], hash_output=\"/test/directory\")\n\n# and run the stage with file0 as the input\nresults3 = my_test_stage3.run(file0)\n```\nNow if you examine the `test_function3.inputs` and `test_function3.outputs` you will see the following:\n\n`test_function3.inputs`\n```json\n{\n    \"file0\": {\n        \"file\": \"/Some/file/path\",\n        \"hash\": \"f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b\"\n    }\n}\n```\n\n`test_function3.outputs`\n```json\n{\n    \"file1\": {\n        \"file\": \"/Some/second/file/path\",\n        \"hash\": \"f91c3b6b3ec826aca3dfaf46d47a32cc627d2ba92e2d63d945fbd98b87b2b002\"\n    }\n}\n```\n\nAs shown above `memori` replaces a valid file path with a dictionary entry containing the `\"file\"` and `\"hash\"` keys. Valid files are compared by hash values rather than path/filename ensuring data integrity.\n\n> **NOTE**: Since `\"file\"` and `\"hash\"` are keywords used to hash valid files. These are reserved keywords that should NOT be used when returning an output from a stage using a dictionary. Doing so could lead to catastrophic results!\n\n> **CAUTION**: `memori` uses JSON to memoize and pass information \n> between `Stage` objects. This means that the inputs/outputs of your function MUST be JSON\n> serializable or you will get a serialization error. You can\n> also get data conversion effects if you don't use the proper\n> data types. For example, python always converts a Tuple to a\n> List when serializing a dictionary to JSON. This will lead to\n> hash check fail each time you run the Stage! Since whenever memori loads the stage\n> output data from the `.outputs` file, the Tuple in the code will never match against \n> list it was converted to in the JSON. So take care to\n> use only JSON compatible data types (This means None, integers, floats, \n> strings, bools, lists, and dictionaries are the only valid\n> input/output data types in `memori`). \n>\n> For data that is not JSON serializable, the typical workaround is to save it to a file\n> and pass the file location between the `Stage` objects. This also allows you to take\n> advantage of the SHA256 file hashing features of `memori`.\n\n### The `Pipeline` object\n\nWhat happens when you have more complex pipelines? Maybe you have a `Stage`\nthat needs to provide input to two different `Stage` objects.\n\nThis is where the `Pipeline` object comes in. A `Pipeline` is a collection of Stage\nobjects with their input/output connections defined. A `Pipeline` object represents\nthe conceptual DAG that was mentioned above.\n\n```python\nfrom memori import Stage, Pipeline\n\n# create some stages (see the last section on Stages for details)\nstage0 = Stage(some params go here...)\nstage1 = Stage(some params go here...)\nstage2 = Stage(some params go here...)\nstage3 = Stage(some params go here...)\n\n# Now we create a Pipeline object, a pipeline takes a definition list during construction\n# the definition list is a list of tuples specifying the connection between stages\n#\n# The \"start\" keyword is a special instruction that the Pipeline object can read\n# it specifies that a particular stage has not precedent Stage and should be a Stage\n# that is run first in the Pipeline.\np = Pipeline([\n    (\"start\", stage0),  # stage0 takes no input from other stages, so it should run first\n    (stage0, stage1),  # stage0 passes it's output to stage1\n    (stage0, stage2),  # and also to stage2\n    ((stage1, stage2), stage3)  # stage3 needs inputs from stage1 and stage2, so we use a\n                                # special tuple-in-tuple so that it can get outputs from both\n                                # NOTE: if stage1 and stage2 have stage_outputs with the same\n                                # name, the last stage (right-most) stage will have precedence\n                                # for it's output\n])\n\n# we can run the Pipeline with the run method, and get it's result\nresult = p.run(some input parameters here...)\n```\n\nRunning the pipeline has the effect of invoking the run method \nof each `Stage` object individually, and passing the result of the stage onto the\nnext stage as defined by the `Pipeline` definition passed in during `Pipeline`\ninitialization.\n\n## Stage Aliases and Complex Pipelines\n\nWhen building a complicated pipleine, sometimes the functions that you write\nwill have input argument names that are different from the `stage_output` names\nthat you have defined in a `Stage`. Consider the following example:\n\n```python\ndef test_function(a, b):\n    return a + b\n\ndef test_function2(c):\n    # this might represent some complicated processing\n    c += 1\n    return c\n\ndef test_function3(d):\n    # this might be another function with some more complocated processing\n    d += 2\n    return d \n```\n\nNow let's say I want to pass the result of `test_function` to both `test_function2` and\n`test_function3`. This presents an issue because `test_function2` and `test_function3` have\ndifferent input argument names. So if I define the `stage_output` of the wrapped `test_function`\nto be `stage_outputs=[\"c\"]` this won't work for `test_function3` and if I define it to be\n`stage_outputs=[\"d\"]` it won't work for `test_function2`.\n\nOne way of solving this issue would be to rewrite the `test_function2` and `test_function3`\nfunctions to have the same argument name, this may not always be possible (particularly when\nwrapping a function call from a third-party library). Another option would be to wrap the\ncall of either `test_function2` or `test_function3` to take in the same input. For example:\n\n```python3\n# this is necessary hashing external function calls\n# more about the hashable wrapper in the next section\nfrom memori import hashable\n\n# we wrap the call of test_function3\ndef test_function3_mod(c):\n    return hashable(test_function3)(c)\n```\n\nNow when we create the `Stage` for each function, `test_function2` and `test_function3_mod` now have the same input argument names and can take in input from `test_function`.\n\nWhile this solution works (and indeed this was how it used to be done), `memori` provides a more \nconvienent solution through Stage aliases. Aliases can map the name of one of the stage outputs to \nanother name. When creating a `Stage` object, you can define this through the `aliases` parameter.\n\n```python\n# We wrap test_function in a Stage, and specify an alias from d -> c\ntest_stage = Stage(test_function, stage_outputs=[\"c\"], aliases=[\"d\": \"c\"])\n\n# Now I can construct stages around test_function2 and test_function3 without\n# writing extra code\ntest_stage2 = Stage(test_function2, stage_outputs=[\"e\"])\ntest_stage3 = Stage(test_function3, stage_outputs=[\"f\"])\n\n# now definte the pipeline\nmy_pipeline = Pipeline(\n    [\n        (\"start\", test_stage),\n        (test_stage, test_stage2),\n        (test_stage, test_stage3), # because we mapped d -> c, memori know where to pass the result to\n    ]\n)\n```\n\nStage aliases reduces the need for extra boilerplate code, and adding on an extra\nstage the feeds from `test_stage` is as simple as adding another alias.\n\n## Hashing external functions\n\nIn the last section, we saw the use of the hashable wrapper when trying to wrap a\nfunction call in another function. But what does it actually do? Consider the\nfollowing example:\n\n```python\ndef test_function(a, b)\n    c = a + b\n    d = test_function2(c)\n    return d\n\ndef test_function2(c)\n    return c + 1\n\nstage0 = Stage(test_function, stage_outputs=[\"d\"], hash_output=\"test\")\nresult = stage0.run(1, 2)\n# this will return the result {\"d\": 4}\n```\n\nNow, what if we change the code of test_function to:\n\n```python\n# change up test_function!\ndef test_function(a, b)\n    c = a + b + 1\n    d = test_function2(c)\n    return d\n```\n\nRebuilding the stage on this function and invoking the `run` method it will cause the\n`.stage` hash to mismatch (since the function signature is different with the added\n`+ 1` in the code), and the function will rerun instead of loading from cache\n(this should return the result `{\"d\": 5}`).\n\nSo the function hashing feature of memori works! but what happens when we modify\n`test_function2` and rerun our stage.\n\n```python\n# will memori see this change?\ndef test_function2(c):\n    return c + 2\n```\n\nRerunning the stage with the updated `test_function2`, you will see that after invoking\n`run`, the `Stage` object simply loads the result from the `.output` file and ignores\nthe difference in the updated `test_function2` (this will still return `{\"d\": 5}` rather\nthan `{\"d\": 6}`.\n\nThis occurs because `memori` function hashing only occurs one call deep. Meaning that\nonly the instructions of the wrapped callable are the only thing that is hashed. Function calls inside a function are simply recorded as constants, meaning that only\nthe name `test_function2` is memoized, not the actual instructions!\n\nTo correct this issue, `memori` provides the `hashable` wrapper. This wrapper marks \na function so that memori knows to try and hash it.\n\n```python\n# wrap test_funtion2 in hashable\ndef test_function(a, b)\n    c = a + b + 1\n    d = hashable(test_function2)(c)\n    return d\n```\n\nAlternatively, you can add the hashable wrapper a decorator.\n\n```python\n# this is the same as calling hashable(test_function2)\n# but makes everything transparent\n@hashable\ndef test_function2(c)\n    return c + 1\n```\n\nThis allows you to simply call `test_function2` without worrying about calling\nthe hashable wrapper each time.\n\n## Path Management\n\n`memori` also provides a path management utility called `PathManager`. It\nis useful for manipulating file paths as well as suffixes and extensions.\nIf is derived from a `Path` object from the [pathlib](https://docs.python.org/3/library/pathlib.html) library, and so can use any of the\nparent methods as well.\n\nHere are a few useful examples:\n\n```python\nfrom memori import PathManager as PathMan\n\n# a string to a path I want PathManager to manage\nmy_file_path_pm = PathMan(\"/my/path/to/a/file.ext.ext2\")\n\n# get only the file prefix\nprefix = my_file_path_pm.get_prefix()\n# prefix contains \"file\"\n\n# get the path and file prefix\npath_and_prefix = my_file_path_pm.get_path_and_prefix()\n# path_and_prefix contains \"/my/path/to/a/file\"\n\n# change path of the file, keeping the filename the same\nrepathed = my_file_path_pm.repath(\"/new/path\")\n# repathed contains \"/new/path/file.ext.ext2\"\n\n# append a suffix (following the BIDS standard, suffixes should always have _)\nsuffixed = my_file_path_pm.append_suffix(\"_newsuffix\")\n# suffixed contains \"/my/path/to/a/file_newsuffix.ext.ext2\"\n\n# replace last suffix\nreplaced = suffixed.replace_suffix(\"_newsuffix2\")\n# replaced contains \"/my/path/to/a/file_newsuffix2.ext.ext2\"\n\n# delete last suffix\ndeleted = replaced.delete_suffix()\n# deleted contains \"/my/path/to/a/file.ext.ext2\"\n\n# methods can be chained together\nchained = my_file_path_pm.repath(\"/new\").append_suffix(\"_test\").get_path_and_prefix()\n# chained contains /new/file_test\n\n# return as a string\nmy_file_path = my_file_path_pm.path\n# /new/file_test\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "neuroimaging,pipeline,memoization",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memori",
    "package_url": "https://pypi.org/project/memori/",
    "platform": null,
    "project_url": "https://pypi.org/project/memori/",
    "project_urls": {
      "github": "https://github.com/vanandrew/memori"
    },
    "release_url": "https://pypi.org/project/memori/0.3.5/",
    "requires_dist": [
      "black (>=22.3.0) ; extra == 'dev'",
      "coverage[toml] (>=5.5) ; extra == 'dev'",
      "pytest (>=6.2.5) ; extra == 'dev'",
      "pytest-pycodestyle (>=2.2.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "A python library for creating memoized data and code for neuroimaging pipelines",
    "version": "0.3.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16104370,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d87543237bd3862cd3f19ccbeb26bbe649639163aa6bad608510284bbc0e16a1",
          "md5": "883e21d3de0e8d7e95441d5b868c8f9c",
          "sha256": "1ee5841bb483a1122ec60baeb6f79bc63e34114ab357438f068e034ad30e2dce"
        },
        "downloads": -1,
        "filename": "memori-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "883e21d3de0e8d7e95441d5b868c8f9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12446,
        "upload_time": "2022-02-10T10:45:09",
        "upload_time_iso_8601": "2022-02-10T10:45:09.327541Z",
        "url": "https://files.pythonhosted.org/packages/d8/75/43237bd3862cd3f19ccbeb26bbe649639163aa6bad608510284bbc0e16a1/memori-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "352089987243e6d3d82ede924ab36b12c0242f70348615c5414b89b455c7add7",
          "md5": "c1dc0d78eee1bcab1dc986fc930820c5",
          "sha256": "67d31bb6cd6d454d56365edb30d57fe667e567359629ea6309f2030373aa0b08"
        },
        "downloads": -1,
        "filename": "memori-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1dc0d78eee1bcab1dc986fc930820c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16690,
        "upload_time": "2022-02-10T21:11:32",
        "upload_time_iso_8601": "2022-02-10T21:11:32.547242Z",
        "url": "https://files.pythonhosted.org/packages/35/20/89987243e6d3d82ede924ab36b12c0242f70348615c5414b89b455c7add7/memori-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed24cfc36618c60311f389290d4d4901d4bf0702407e45eb68d5fb82ac334ea3",
          "md5": "498817c19e25b5410e41906aa468e457",
          "sha256": "51b1fc8b3875eec50d1853eed8d3260e60b75cbe1cff529d95ce80e9217be437"
        },
        "downloads": -1,
        "filename": "memori-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "498817c19e25b5410e41906aa468e457",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17901,
        "upload_time": "2022-02-10T21:11:33",
        "upload_time_iso_8601": "2022-02-10T21:11:33.676455Z",
        "url": "https://files.pythonhosted.org/packages/ed/24/cfc36618c60311f389290d4d4901d4bf0702407e45eb68d5fb82ac334ea3/memori-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d385e342fbc0a61002ff938c6463f220d8d90885d5918de3bee8584def533ca6",
          "md5": "0b3ee9aa12068df57d4d253b67ca07ea",
          "sha256": "741e7a5bebad95f7aaa27f7302e4b9c15972a4020750ed46122a39f41f7b7f5d"
        },
        "downloads": -1,
        "filename": "memori-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b3ee9aa12068df57d4d253b67ca07ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16755,
        "upload_time": "2022-02-11T04:49:15",
        "upload_time_iso_8601": "2022-02-11T04:49:15.571813Z",
        "url": "https://files.pythonhosted.org/packages/d3/85/e342fbc0a61002ff938c6463f220d8d90885d5918de3bee8584def533ca6/memori-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb414a12cba89d9c26b515f1342ed3d57daf2f11f9f5446cd881f5c06dc68c96",
          "md5": "b30195f37a1e18ebcc6f47d9558b0ac9",
          "sha256": "6728ec5e11b270341402e580280224c7225381dc76a200e268fdb5e39f1dabdc"
        },
        "downloads": -1,
        "filename": "memori-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b30195f37a1e18ebcc6f47d9558b0ac9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17963,
        "upload_time": "2022-02-11T04:49:16",
        "upload_time_iso_8601": "2022-02-11T04:49:16.801145Z",
        "url": "https://files.pythonhosted.org/packages/cb/41/4a12cba89d9c26b515f1342ed3d57daf2f11f9f5446cd881f5c06dc68c96/memori-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fed67b47deff47fbb36e2162f4f34bd078c41dfcca42dd96656397b17c99b80d",
          "md5": "688d8acfb7520b910976c9c9ad6d429a",
          "sha256": "e1d443a0bd00d7311cf18ae2fad078ab70c5c0aa3db1af4eac6605b9d6599843"
        },
        "downloads": -1,
        "filename": "memori-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "688d8acfb7520b910976c9c9ad6d429a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17141,
        "upload_time": "2022-02-11T23:31:49",
        "upload_time_iso_8601": "2022-02-11T23:31:49.446395Z",
        "url": "https://files.pythonhosted.org/packages/fe/d6/7b47deff47fbb36e2162f4f34bd078c41dfcca42dd96656397b17c99b80d/memori-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0848c4bd44146fa9bfeef9625eb63b360dac115fcd33c4041a8fbb513ad4be0d",
          "md5": "b1a6b75a84f1e185cffc14f351268838",
          "sha256": "d580dc901785a7d1d658861f3370b868990d6de551b637f1a5d9f46a80bd9fd0"
        },
        "downloads": -1,
        "filename": "memori-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b1a6b75a84f1e185cffc14f351268838",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18323,
        "upload_time": "2022-02-11T23:31:50",
        "upload_time_iso_8601": "2022-02-11T23:31:50.703939Z",
        "url": "https://files.pythonhosted.org/packages/08/48/c4bd44146fa9bfeef9625eb63b360dac115fcd33c4041a8fbb513ad4be0d/memori-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bafea3392a71f7e829e5afc0e7c0ea58e2ec7aa87a56acd8ddb9dcfb16f7dce1",
          "md5": "e0f5e196bc8b6ede25170894bdc20606",
          "sha256": "c1406c2b7de2ab587d8a1deb0d8b1ba703ddd723ecbed15b62676de013452cf5"
        },
        "downloads": -1,
        "filename": "memori-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0f5e196bc8b6ede25170894bdc20606",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17251,
        "upload_time": "2022-03-09T21:03:15",
        "upload_time_iso_8601": "2022-03-09T21:03:15.368704Z",
        "url": "https://files.pythonhosted.org/packages/ba/fe/a3392a71f7e829e5afc0e7c0ea58e2ec7aa87a56acd8ddb9dcfb16f7dce1/memori-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef60a8523d321f8e77b2c7cfc13998740ff022275d14bce97785b9f6e1a30a02",
          "md5": "1e03927514b811cfa42a65d30cdd66ed",
          "sha256": "6a9b5717e7c47faa296efb85578af600ffe82a90163fd39408ffde872d2a3258"
        },
        "downloads": -1,
        "filename": "memori-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1e03927514b811cfa42a65d30cdd66ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18429,
        "upload_time": "2022-03-09T21:03:17",
        "upload_time_iso_8601": "2022-03-09T21:03:17.041263Z",
        "url": "https://files.pythonhosted.org/packages/ef/60/a8523d321f8e77b2c7cfc13998740ff022275d14bce97785b9f6e1a30a02/memori-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afade719ccacc4cb6cb38794a51e8b05854cef50fda596d7476ce14a3e455b5b",
          "md5": "002481a4548103844471b78c8eaae89e",
          "sha256": "605c22c253d9fd09f5bcfeb7b9c4f646a0a2fea1ef40fb38e44ceb4bc15ebee3"
        },
        "downloads": -1,
        "filename": "memori-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "002481a4548103844471b78c8eaae89e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17137,
        "upload_time": "2022-04-19T06:04:35",
        "upload_time_iso_8601": "2022-04-19T06:04:35.469756Z",
        "url": "https://files.pythonhosted.org/packages/af/ad/e719ccacc4cb6cb38794a51e8b05854cef50fda596d7476ce14a3e455b5b/memori-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd2a7fc9a3293ffc3b66af333f99e05c01a16c6e716c0d6ceb4bbef9b7783fc4",
          "md5": "48d491b2f56999a4bb446513e0a100ea",
          "sha256": "2c9357fa299a32fccd72948cead4b201f6135ea0f68cbe72a72579539c582ef6"
        },
        "downloads": -1,
        "filename": "memori-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "48d491b2f56999a4bb446513e0a100ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18371,
        "upload_time": "2022-04-19T06:04:36",
        "upload_time_iso_8601": "2022-04-19T06:04:36.662315Z",
        "url": "https://files.pythonhosted.org/packages/fd/2a/7fc9a3293ffc3b66af333f99e05c01a16c6e716c0d6ceb4bbef9b7783fc4/memori-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de1d19321be9b523ffed12d9fd4113ffca706ae432254ea99495c482f5481650",
          "md5": "324a3a80f7786595ffe4708b15eb15c3",
          "sha256": "9868a1e6fa86a302be77410a7c400a9236e05972ee9a31488f0420e3ee757eda"
        },
        "downloads": -1,
        "filename": "memori-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "324a3a80f7786595ffe4708b15eb15c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17219,
        "upload_time": "2022-06-20T00:35:36",
        "upload_time_iso_8601": "2022-06-20T00:35:36.517039Z",
        "url": "https://files.pythonhosted.org/packages/de/1d/19321be9b523ffed12d9fd4113ffca706ae432254ea99495c482f5481650/memori-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "527c4d5af07fedbab65917da3b05e19ef12b066161041d39257523f8f469422c",
          "md5": "370ff715a2fecb63f399aecde4b27710",
          "sha256": "2f8a698fc50a2c548b1502e513e717ea91a516b6ecb087808557810a97d9810d"
        },
        "downloads": -1,
        "filename": "memori-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "370ff715a2fecb63f399aecde4b27710",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18611,
        "upload_time": "2022-06-20T00:35:37",
        "upload_time_iso_8601": "2022-06-20T00:35:37.757002Z",
        "url": "https://files.pythonhosted.org/packages/52/7c/4d5af07fedbab65917da3b05e19ef12b066161041d39257523f8f469422c/memori-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c240984c4e38ddaee40c9da1a5c77580fe4aebfc9964ff931e0ddbbffcc1a30",
          "md5": "51e1813b47c2c446ebf887218dd24a72",
          "sha256": "68cab38c931df1fd29fa978d969b92e995a27b096be7d6fe49eeaa9983073f46"
        },
        "downloads": -1,
        "filename": "memori-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51e1813b47c2c446ebf887218dd24a72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17525,
        "upload_time": "2022-06-28T19:26:08",
        "upload_time_iso_8601": "2022-06-28T19:26:08.811588Z",
        "url": "https://files.pythonhosted.org/packages/3c/24/0984c4e38ddaee40c9da1a5c77580fe4aebfc9964ff931e0ddbbffcc1a30/memori-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a8a32a256a8b6aa62afb3e3b2fedd78b48772e9558bc6d7a3455dedf35ab388",
          "md5": "51ac3052130ad928928f25c6af56ff29",
          "sha256": "978f79e3b9d50430932bcf2ce68f756aa7223354cf8ebd66ca416485995b7230"
        },
        "downloads": -1,
        "filename": "memori-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "51ac3052130ad928928f25c6af56ff29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18905,
        "upload_time": "2022-06-28T19:26:10",
        "upload_time_iso_8601": "2022-06-28T19:26:10.273150Z",
        "url": "https://files.pythonhosted.org/packages/9a/8a/32a256a8b6aa62afb3e3b2fedd78b48772e9558bc6d7a3455dedf35ab388/memori-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f906593316076442a619fe8e87807b2da70bbe6728ac12d3d285994bf741c1a2",
          "md5": "fcf1d5a44313f3d50787c5d975c955e5",
          "sha256": "74c987da6ac163c445a2a224a42256f98e202142a33ed9cc9d710c95a6201665"
        },
        "downloads": -1,
        "filename": "memori-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fcf1d5a44313f3d50787c5d975c955e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17639,
        "upload_time": "2022-06-28T22:06:57",
        "upload_time_iso_8601": "2022-06-28T22:06:57.974221Z",
        "url": "https://files.pythonhosted.org/packages/f9/06/593316076442a619fe8e87807b2da70bbe6728ac12d3d285994bf741c1a2/memori-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30c711196bdc66e8b678f179e1201ff2b29fd8c36b0a915cbd20f86120c32d87",
          "md5": "8c4d8c2a0cc9e4ef0626879148ee87d2",
          "sha256": "ea1cba7c375f1eea99bff39eded3e6bf6ca9649fa57ffe25a3c3a90ebef5b62f"
        },
        "downloads": -1,
        "filename": "memori-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "8c4d8c2a0cc9e4ef0626879148ee87d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19033,
        "upload_time": "2022-06-28T22:06:59",
        "upload_time_iso_8601": "2022-06-28T22:06:59.628186Z",
        "url": "https://files.pythonhosted.org/packages/30/c7/11196bdc66e8b678f179e1201ff2b29fd8c36b0a915cbd20f86120c32d87/memori-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c33c7876e22362ccf54f256666b567b427098b0a96ce4078a9a8e95683f6580b",
          "md5": "c1e0ec71a5932e73269733630528b9b2",
          "sha256": "4d4f9353b32c6fe2257bebb24c0d565fe07054fe4fc2e9c20e457bc40fb74c2f"
        },
        "downloads": -1,
        "filename": "memori-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1e0ec71a5932e73269733630528b9b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17771,
        "upload_time": "2022-07-26T16:44:04",
        "upload_time_iso_8601": "2022-07-26T16:44:04.097833Z",
        "url": "https://files.pythonhosted.org/packages/c3/3c/7876e22362ccf54f256666b567b427098b0a96ce4078a9a8e95683f6580b/memori-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b00f5587ba8a7b2a5bd0bd6b7324426bf2a812a0ab10f277094dd7045e079796",
          "md5": "af01b17343bb61507886ff2f264c308f",
          "sha256": "8a490686811f471d0a246b023ab976d8ad74b83b63b8604b3563d80f34f00789"
        },
        "downloads": -1,
        "filename": "memori-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "af01b17343bb61507886ff2f264c308f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19150,
        "upload_time": "2022-07-26T16:44:05",
        "upload_time_iso_8601": "2022-07-26T16:44:05.464902Z",
        "url": "https://files.pythonhosted.org/packages/b0/0f/5587ba8a7b2a5bd0bd6b7324426bf2a812a0ab10f277094dd7045e079796/memori-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7294120a363c63b3ddd7085ede7fe4c796ad064335a66ef59a7f7b6fba6b50f0",
          "md5": "14736e03078230973972c2256d934f4b",
          "sha256": "be3963315890f3d1cb29b9dec0716865f40e9b163680e42dc1a7d51360535ecb"
        },
        "downloads": -1,
        "filename": "memori-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14736e03078230973972c2256d934f4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17818,
        "upload_time": "2022-07-26T17:56:52",
        "upload_time_iso_8601": "2022-07-26T17:56:52.202532Z",
        "url": "https://files.pythonhosted.org/packages/72/94/120a363c63b3ddd7085ede7fe4c796ad064335a66ef59a7f7b6fba6b50f0/memori-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b855d221170d53e409880533d7e69d67b6d26d7f9ebdde5e9b00f2f9aee7a62",
          "md5": "3f59f002e2ddb17b10445cc4f10890c7",
          "sha256": "fa3e2521e71044f59d0d0649c97e55672caac6c9b015c0b0301aa8c1eca81629"
        },
        "downloads": -1,
        "filename": "memori-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3f59f002e2ddb17b10445cc4f10890c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19178,
        "upload_time": "2022-07-26T17:56:53",
        "upload_time_iso_8601": "2022-07-26T17:56:53.291184Z",
        "url": "https://files.pythonhosted.org/packages/5b/85/5d221170d53e409880533d7e69d67b6d26d7f9ebdde5e9b00f2f9aee7a62/memori-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0f90eeac7889d8edb115e90cc395628e80762ea13b4a98c88ebe6b792b42b8d",
          "md5": "3413fdf31ffccf9d8cf903f21617e56e",
          "sha256": "eb2adb864ad569cbe6c09fcb3d77935a0524e0c9c525d087b00d9c7e7da98bdf"
        },
        "downloads": -1,
        "filename": "memori-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3413fdf31ffccf9d8cf903f21617e56e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22518,
        "upload_time": "2022-08-10T12:29:01",
        "upload_time_iso_8601": "2022-08-10T12:29:01.198089Z",
        "url": "https://files.pythonhosted.org/packages/f0/f9/0eeac7889d8edb115e90cc395628e80762ea13b4a98c88ebe6b792b42b8d/memori-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d923cbcd837e0c76a068fb6ee7373a440cf4af0ef1936eb8c4380f730123b415",
          "md5": "cea4b964cfa0a1eb0cdc813e384bd490",
          "sha256": "14b764608d786a42028e4e6a163a9012a657115c47a2b2cfad4e5f15f619e291"
        },
        "downloads": -1,
        "filename": "memori-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cea4b964cfa0a1eb0cdc813e384bd490",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27416,
        "upload_time": "2022-08-10T12:29:02",
        "upload_time_iso_8601": "2022-08-10T12:29:02.821410Z",
        "url": "https://files.pythonhosted.org/packages/d9/23/cbcd837e0c76a068fb6ee7373a440cf4af0ef1936eb8c4380f730123b415/memori-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51ea5733e7729929e05b6efaab10bfb90c8b2ad4194a2f95e5ddd67499e2a423",
          "md5": "9dee7ab7c1a3c04f08d2e2a484e1fe41",
          "sha256": "a7e623bfc77e13d2ca7af33a2fdbf8231f50d37a2491833de60f185322959b78"
        },
        "downloads": -1,
        "filename": "memori-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9dee7ab7c1a3c04f08d2e2a484e1fe41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25687,
        "upload_time": "2022-11-29T08:53:44",
        "upload_time_iso_8601": "2022-11-29T08:53:44.666879Z",
        "url": "https://files.pythonhosted.org/packages/51/ea/5733e7729929e05b6efaab10bfb90c8b2ad4194a2f95e5ddd67499e2a423/memori-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fc1905ea283aa3135ae482c3cbd21a730322505b9407030211fa0d739bdbcba",
          "md5": "212d3520193a3502955e0419d8763b80",
          "sha256": "ea95789b4fbf1a0e44c06c6a6aac28573beb44ee15ab3d562cbb5a4f3a5a7827"
        },
        "downloads": -1,
        "filename": "memori-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "212d3520193a3502955e0419d8763b80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29981,
        "upload_time": "2022-11-29T08:53:46",
        "upload_time_iso_8601": "2022-11-29T08:53:46.335611Z",
        "url": "https://files.pythonhosted.org/packages/5f/c1/905ea283aa3135ae482c3cbd21a730322505b9407030211fa0d739bdbcba/memori-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0609f97e2954cf878cfa8b3e53340cf3c7c174c408a629a036abfff4d41343f",
          "md5": "44c26a4cad66e88f43ecc39245c5aaf1",
          "sha256": "488f508b9ec75ddc2d7cf06016a53266439cb994589ffb8ae136b7932f624552"
        },
        "downloads": -1,
        "filename": "memori-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44c26a4cad66e88f43ecc39245c5aaf1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27564,
        "upload_time": "2022-11-29T20:50:14",
        "upload_time_iso_8601": "2022-11-29T20:50:14.141632Z",
        "url": "https://files.pythonhosted.org/packages/e0/60/9f97e2954cf878cfa8b3e53340cf3c7c174c408a629a036abfff4d41343f/memori-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "799f0b51be5e7976cf5e94c41cb75142c3666b178d81f8c595e5cce2d24cc68c",
          "md5": "590781cc0c8f65ea4824edebcc49cc01",
          "sha256": "8a8931a2162dc8998d4d157dd13f5798f80085046b426925ecb5f5d251b7bb12"
        },
        "downloads": -1,
        "filename": "memori-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "590781cc0c8f65ea4824edebcc49cc01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31439,
        "upload_time": "2022-11-29T20:50:15",
        "upload_time_iso_8601": "2022-11-29T20:50:15.547005Z",
        "url": "https://files.pythonhosted.org/packages/79/9f/0b51be5e7976cf5e94c41cb75142c3666b178d81f8c595e5cce2d24cc68c/memori-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "745c65312000e7b3464bf2384ee0def90e8316793b5490e55b80f589f6357a39",
          "md5": "0a37c0e0e6d1e642525aa31717f9705e",
          "sha256": "fadc8ddd79e5534ed465d565cf4806d65c67838502b6d3d9030f645bb9a27aa5"
        },
        "downloads": -1,
        "filename": "memori-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a37c0e0e6d1e642525aa31717f9705e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27642,
        "upload_time": "2022-11-29T20:58:13",
        "upload_time_iso_8601": "2022-11-29T20:58:13.313202Z",
        "url": "https://files.pythonhosted.org/packages/74/5c/65312000e7b3464bf2384ee0def90e8316793b5490e55b80f589f6357a39/memori-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a443d4c97fe4bf81c8a2ba254372dfcbb1d5e96d38bc67da847c3b16cd61ae98",
          "md5": "637a4d3a0259becfcc6f4e3553d65da3",
          "sha256": "ab9d4d0dd1e7bc881afc0d2990245255a9b5a404306bf2a34e143560b17ecad7"
        },
        "downloads": -1,
        "filename": "memori-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "637a4d3a0259becfcc6f4e3553d65da3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31506,
        "upload_time": "2022-11-29T20:58:15",
        "upload_time_iso_8601": "2022-11-29T20:58:15.592737Z",
        "url": "https://files.pythonhosted.org/packages/a4/43/d4c97fe4bf81c8a2ba254372dfcbb1d5e96d38bc67da847c3b16cd61ae98/memori-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bbe9cc4092095bcfa9d498f21ecfcbe171ce752ac8b6613a51dba6e0da83d59",
          "md5": "33e30d1e4195f783cdf658388c7f7f75",
          "sha256": "3be9407563c203c1af389263537eb63512c62a5d2dc322fbf2610254810d76f2"
        },
        "downloads": -1,
        "filename": "memori-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33e30d1e4195f783cdf658388c7f7f75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28556,
        "upload_time": "2022-11-29T22:16:03",
        "upload_time_iso_8601": "2022-11-29T22:16:03.670913Z",
        "url": "https://files.pythonhosted.org/packages/0b/be/9cc4092095bcfa9d498f21ecfcbe171ce752ac8b6613a51dba6e0da83d59/memori-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f995c3c646075824ab7e49e5b8669c5aafc971c0f7c0e42af7106bd71ed04787",
          "md5": "86e10640e18629403dcdd481b6c62688",
          "sha256": "8dae74a96eab2ff2b93f71d1083cf9aa2ebaa8e892c9e552f80ff6791de1d886"
        },
        "downloads": -1,
        "filename": "memori-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "86e10640e18629403dcdd481b6c62688",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33436,
        "upload_time": "2022-11-29T22:16:05",
        "upload_time_iso_8601": "2022-11-29T22:16:05.179980Z",
        "url": "https://files.pythonhosted.org/packages/f9/95/c3c646075824ab7e49e5b8669c5aafc971c0f7c0e42af7106bd71ed04787/memori-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a407a03d600e0a6cc75f30001acacf68d0c396b8c1aa99effd036b33ecd3770a",
          "md5": "909f8dcbd45198fe22ff0c46bc8bc357",
          "sha256": "0247db20477cc37dc9f4c444b2e0fd01e5181ab1d7d575d535da72857b810323"
        },
        "downloads": -1,
        "filename": "memori-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "909f8dcbd45198fe22ff0c46bc8bc357",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29024,
        "upload_time": "2022-12-14T20:30:33",
        "upload_time_iso_8601": "2022-12-14T20:30:33.425280Z",
        "url": "https://files.pythonhosted.org/packages/a4/07/a03d600e0a6cc75f30001acacf68d0c396b8c1aa99effd036b33ecd3770a/memori-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25466faa24cbd8f503b999351e9d012630e88051c92a959e981dcb90ddb2f06b",
          "md5": "1488f46ba476bf81cc3a194cb1cda161",
          "sha256": "dcaad7d83f0be484ae2bfef8fd08f5960c9c3a274853b8ea9a061a2d33897a59"
        },
        "downloads": -1,
        "filename": "memori-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1488f46ba476bf81cc3a194cb1cda161",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33855,
        "upload_time": "2022-12-14T20:30:35",
        "upload_time_iso_8601": "2022-12-14T20:30:35.232496Z",
        "url": "https://files.pythonhosted.org/packages/25/46/6faa24cbd8f503b999351e9d012630e88051c92a959e981dcb90ddb2f06b/memori-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbdeed91f1352af11f3d5427f908a1acbc5c6792141cdd50fcc7fee2bea8d425",
          "md5": "4395e97cfaac6a221a9ba14e3c88faa1",
          "sha256": "37ef5f4fc2fe7c5065e1410ba94071bf96ef3018adf30a5e367ae4528696918d"
        },
        "downloads": -1,
        "filename": "memori-0.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4395e97cfaac6a221a9ba14e3c88faa1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29025,
        "upload_time": "2022-12-14T20:35:55",
        "upload_time_iso_8601": "2022-12-14T20:35:55.725710Z",
        "url": "https://files.pythonhosted.org/packages/fb/de/ed91f1352af11f3d5427f908a1acbc5c6792141cdd50fcc7fee2bea8d425/memori-0.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f34a5736efbdb36e9c10b2242b3a814d950fcf193ee359b51d396a3a1ba563e",
          "md5": "338a2cf74265d228eeef318029addba1",
          "sha256": "dd44081ade6a9e185920527251e1dd95d19e58904891201c681de7c3e995fd61"
        },
        "downloads": -1,
        "filename": "memori-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "338a2cf74265d228eeef318029addba1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33864,
        "upload_time": "2022-12-14T20:35:57",
        "upload_time_iso_8601": "2022-12-14T20:35:57.440487Z",
        "url": "https://files.pythonhosted.org/packages/5f/34/a5736efbdb36e9c10b2242b3a814d950fcf193ee359b51d396a3a1ba563e/memori-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbdeed91f1352af11f3d5427f908a1acbc5c6792141cdd50fcc7fee2bea8d425",
        "md5": "4395e97cfaac6a221a9ba14e3c88faa1",
        "sha256": "37ef5f4fc2fe7c5065e1410ba94071bf96ef3018adf30a5e367ae4528696918d"
      },
      "downloads": -1,
      "filename": "memori-0.3.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4395e97cfaac6a221a9ba14e3c88faa1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 29025,
      "upload_time": "2022-12-14T20:35:55",
      "upload_time_iso_8601": "2022-12-14T20:35:55.725710Z",
      "url": "https://files.pythonhosted.org/packages/fb/de/ed91f1352af11f3d5427f908a1acbc5c6792141cdd50fcc7fee2bea8d425/memori-0.3.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f34a5736efbdb36e9c10b2242b3a814d950fcf193ee359b51d396a3a1ba563e",
        "md5": "338a2cf74265d228eeef318029addba1",
        "sha256": "dd44081ade6a9e185920527251e1dd95d19e58904891201c681de7c3e995fd61"
      },
      "downloads": -1,
      "filename": "memori-0.3.5.tar.gz",
      "has_sig": false,
      "md5_digest": "338a2cf74265d228eeef318029addba1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 33864,
      "upload_time": "2022-12-14T20:35:57",
      "upload_time_iso_8601": "2022-12-14T20:35:57.440487Z",
      "url": "https://files.pythonhosted.org/packages/5f/34/a5736efbdb36e9c10b2242b3a814d950fcf193ee359b51d396a3a1ba563e/memori-0.3.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}