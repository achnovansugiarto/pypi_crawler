{
  "info": {
    "author": "Bruno Grande",
    "author_email": "bruno.grande@sagebase.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "# fs-synapse\n\n<!--\n[![ReadTheDocs](https://readthedocs.org/projects/fs-synapse/badge/?version=latest)](https://sage-bionetworks-workflows.github.io/fs-synapse/)\n[![PyPI-Server](https://img.shields.io/pypi/v/fs-synapse.svg)](https://pypi.org/project/fs-synapse/)\n[![codecov](https://codecov.io/gh/Sage-Bionetworks-Workflows/fs-synapse/branch/main/graph/badge.svg?token=OCC4MOUG5P)](https://codecov.io/gh/Sage-Bionetworks-Workflows/fs-synapse)\n[![Project generated with PyScaffold](https://img.shields.io/badge/-PyScaffold-005CA0?logo=pyscaffold)](#pyscaffold)\n-->\n\n> A Synapse implementation of the [PyFileSystem2](http://docs.pyfilesystem.org/) interface.\n\n`fs-synapse` allows us to leverage the [PyFileSystem API](https://docs.pyfilesystem.org/en/latest/interface.html) to interface with Synapse files, folders, and projects. By learning this API, you can write code that is agnostic to where your files are physically located. This is achieved by referring to Synapse entities using URLs. Commented examples are included below, but more details can be found [here](https://docs.pyfilesystem.org/en/latest/openers.html).\n\n```\nsyn://syn50545516               # Synapse project\n\nsyn://syn50557597               # Folder in the above Synapse project\nsyn://syn50545516/syn50557597   # Same folder, but using a full path\nsyn://syn50545516/TestSubDir    # Same folder, but referenced by name\n\nsyn://syn50555279               # File in the above Synapse project\nsyn://syn50545516/syn50555279   # Same file, but using a full path\nsyn://syn50545516/test.txt      # Same file, but referenced by name\n\nsyn://syn50545516/ExploratoryTests/report.json      # Nested file\n```\n\n## Benefits\n\nThere are several benefits to using the `fs-synapse` API over `synapseclient`.\n\n```python\nfrom fs import open_fs\n\nfs = open_fs(\"syn://\")\n```\n\n### Interact with Synapse using a Pythonic interface\n\nThis [guide](https://docs.pyfilesystem.org/en/latest/guide.html) provides several code examples for various use cases.\n\n```python\nfile_url = \"syn://syn50555279\"\n\nwith fs.open(file_url, \"a\") as fp:\n    fp.write(\"Appending some text to a Synapse file\")\n```\n\n### Access to several convenience functions\n\nThe full list of available functions are listed [here](https://docs.pyfilesystem.org/en/latest/interface.html).\n\n```python\nfolder_url = \"syn://syn50696438\"\n\nfs.makedirs(f\"{folder_url}/creating/nested/folders/with/one/operation\")\n```\n\n### Refer to Synapse files and folders by name\n\nYou don't have to track as many Synapse IDs. You only need to care about the top-level projects or folders and refer to subfolders and files by name.\n\n```python\nproject_url = \"syn://syn50545516\"\n\ndata_url = f\"{project_url}/data/raw.csv\"\noutput_url = f\"{project_url}/outputs/processed.csv\"\n\nwith fs.open(data_url, \"r\") as data_fp, fs.open(output_url, \"a\") as output_fp:\n    results = number_cruncher(data)\n    output.write(results)\n```\n\n### Write Synapse-agnostic code\n\nUnfortunately, every time you use `synapseclient` for file and folder operations, you are hard-coding a dependency on Synapse into your project. Leveraging `fs-synapse` helps avoid this hard dependency and makes your code more portable to other file backends (_e.g._ S3). You can swap for any other file system by using their URL scheme (_e.g._ `s3://`). Here's [an index](https://www.pyfilesystem.org/page/index-of-filesystems/) of available file systems that you can swap for.\n\n### Rely on code covered by integration tests\n\nSo you don't have to write the Synapse integration tests yourself! These tests tend to be slow, so delegating that responsibilty to an externally managed package like `fs-synapse` keeps your test suite fast and focused on what you care about.\n\nIn your test code, you can use `mem://` or `temp://` URLs for faster I/O instead of storing and retrieving files on Synapse ([MemoryFS](https://docs.pyfilesystem.org/en/latest/reference/memoryfs.html) and [TempFS](https://docs.pyfilesystem.org/en/latest/reference/tempfs.html)).\n\n```python\ndef test_some_feature_of_your_code():\n    output_url = \"mem://report.json\"\n    cruncher = NumberCruncher()\n    cruncher.save(output_url)\n    assert cruncher.fs.exists(output_url)\n```\n\n# PyScaffold\n\nThis project has been set up using PyScaffold 4.3. For details and usage\ninformation on PyScaffold see https://pyscaffold.org/.\n\n```console\nputup --name fs-synapse --markdown --github-actions --pre-commit --license Apache-2.0 fs-synapse\n```\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sage-Bionetworks/fs-synapse",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fs-synapse",
    "package_url": "https://pypi.org/project/fs-synapse/",
    "platform": "any",
    "project_url": "https://pypi.org/project/fs-synapse/",
    "project_urls": {
      "Homepage": "https://github.com/sage-Bionetworks/fs-synapse",
      "Source": "https://github.com/sage-Bionetworks/fs-synapse"
    },
    "release_url": "https://pypi.org/project/fs-synapse/1.0.0/",
    "requires_dist": [
      "fs (~=2.4)",
      "synapseclient (~=2.7)",
      "pre-commit (~=2.0) ; extra == 'dev'",
      "tox (~=3.0) ; extra == 'dev'",
      "sphinx-rtd-theme (~=1.0) ; extra == 'dev'",
      "black (~=22.0) ; extra == 'dev'",
      "flake8 (~=5.0) ; extra == 'dev'",
      "isort (~=5.0) ; extra == 'dev'",
      "mypy (~=0.9) ; extra == 'dev'",
      "flake8-pyproject (~=1.0) ; extra == 'dev'",
      "sphinx-autodoc-typehints (~=1.21) ; extra == 'dev'",
      "interrogate (~=1.5) ; extra == 'dev'",
      "setuptools (~=65.0) ; extra == 'testing'",
      "pytest (~=7.0) ; extra == 'testing'",
      "pytest-cov (~=4.0) ; extra == 'testing'",
      "pytest-mock (~=3.0) ; extra == 'testing'",
      "hypothesis (~=4.0) ; extra == 'testing'",
      "nbmake (~=1.3) ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "summary": "A Synapse implementation of the PyFileSystem2 interface",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16611768,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "642dca63305d619ce0834d1883f35428ce2558175772332fd2ee0f91bcb59831",
          "md5": "a180498001874d415ffafc4bf7852470",
          "sha256": "1c8fb5b1da3220d21d13a6e48642d8b75a913a9b4779b99d6de9fc6074167898"
        },
        "downloads": -1,
        "filename": "fs_synapse-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a180498001874d415ffafc4bf7852470",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17417,
        "upload_time": "2023-01-29T20:55:07",
        "upload_time_iso_8601": "2023-01-29T20:55:07.474097Z",
        "url": "https://files.pythonhosted.org/packages/64/2d/ca63305d619ce0834d1883f35428ce2558175772332fd2ee0f91bcb59831/fs_synapse-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8596f832e6d76f27557f06039936f52259e3357f95b528b7c7de766fccf2eb0",
          "md5": "f3a47c832ba5e118ddc204516047a69b",
          "sha256": "8d95badbd14a052eac06875bcefec4570d336bbe318f0aa7878c469a70dfd35f"
        },
        "downloads": -1,
        "filename": "fs-synapse-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f3a47c832ba5e118ddc204516047a69b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 75455,
        "upload_time": "2023-01-29T20:55:09",
        "upload_time_iso_8601": "2023-01-29T20:55:09.266233Z",
        "url": "https://files.pythonhosted.org/packages/c8/59/6f832e6d76f27557f06039936f52259e3357f95b528b7c7de766fccf2eb0/fs-synapse-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "642dca63305d619ce0834d1883f35428ce2558175772332fd2ee0f91bcb59831",
        "md5": "a180498001874d415ffafc4bf7852470",
        "sha256": "1c8fb5b1da3220d21d13a6e48642d8b75a913a9b4779b99d6de9fc6074167898"
      },
      "downloads": -1,
      "filename": "fs_synapse-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a180498001874d415ffafc4bf7852470",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 17417,
      "upload_time": "2023-01-29T20:55:07",
      "upload_time_iso_8601": "2023-01-29T20:55:07.474097Z",
      "url": "https://files.pythonhosted.org/packages/64/2d/ca63305d619ce0834d1883f35428ce2558175772332fd2ee0f91bcb59831/fs_synapse-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8596f832e6d76f27557f06039936f52259e3357f95b528b7c7de766fccf2eb0",
        "md5": "f3a47c832ba5e118ddc204516047a69b",
        "sha256": "8d95badbd14a052eac06875bcefec4570d336bbe318f0aa7878c469a70dfd35f"
      },
      "downloads": -1,
      "filename": "fs-synapse-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f3a47c832ba5e118ddc204516047a69b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 75455,
      "upload_time": "2023-01-29T20:55:09",
      "upload_time_iso_8601": "2023-01-29T20:55:09.266233Z",
      "url": "https://files.pythonhosted.org/packages/c8/59/6f832e6d76f27557f06039936f52259e3357f95b528b7c7de766fccf2eb0/fs-synapse-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}