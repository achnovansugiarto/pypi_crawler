{
  "info": {
    "author": "Huayu Yang",
    "author_email": "huayumochi@google.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "\n# Python Proto Converter\nThe Python Proto Converter converts between protos in Python. Proto conversion is often needed when converting between Database Access Object (DAO) and API proto.\n\n### Install\npip install python-proto-converter\n\n### Run the example\n1. Build the proto (assuming in exmaple/ directory)\n   protoc -I=. --python_out=. ./example_proto.proto\n\n2. execute\n   python3 ./converter_example.py\n\n### Features\n\n*   A base class that auto-converts fields with the same name and type.\n*   Custom convert functions can be implemented to handle fields conversion.\n*   Fields can be disabled during auto-converting.\n*   Unhandled fields assertion during class instantiation.\n\n### Example\n\n#### Basic usage\n\nLet's start with a simple example, suppose you want to convert from one similar\nproto to another. For this example, these are the MatchaMilkTea to\nGreenTeaMilkTea protos.\n\n```proto\nmessage MatchaMilkTea {\n  string name = 1;\n  float price = 2;\n  string seller = 3;\n}\n```\n\n```proto\nmessage GreenTeaMilkTea {\n  string name = 1;\n  int64 price = 2;\n  string seller = 3;\n}\n```\n\nThe `name` and `seller` fields can be auto-converted, since the type and the\nfield name are identical. However, we probably don't want to copy the name of\nMatchaMilkTea to GreenTeaMilkTea. To disable auto-convert on the `name` field,\nwe mark it ignored and provide our custom function for the `name` field.\n\nThe `price` field has different types (float vs int64), therefore it can't be\nauto-converted. Leaving it unhandled will trigger an exception when creating the\nproto converter. Similar to the `name` field, we can create a custom method to\nconvert the `price` field.\n\n```python\nfrom google3.alkali.contrib.certified.python.proto import converter\n\n...\n\nclass MatchaToGreenTeaConverter(converter.ProtoConverter):\n  def __init__(self):\n    super(MatchaToGreenTeaConverter, self).__init__(\n        pb_class_from=matcha_milk_tea_pb2.MatchaMilkTea,\n        pb_class_to=green_tea_milk_tea_pb2.GreenTeaMilkTea,\n        field_names_to_ignore=[\"name\"])\n\n  @converter.convert_field(field_names=[\"price\"])\n  def price_convert_function(self, src_proto, dest_proto):\n    dest_proto.price = int(src_proto.price)\n\n  @converter.convert_field(field_names=[\"name\"])\n  def name_convert_function(self, src_proto, dest_proto):\n    dest_proto.name = \"GreenTeaMilkTea\"\n```\n\nOr you can combine them in the same method since these fields are simple:\n\n```python\n@converter.convert_field(field_names=[\"price\", \"name\"])\ndef price_name_convert_function(self, src_proto, dest_proto):\n  dest_proto.price = int(src_proto.price)\n  dest_proto.name = \"GreenTeaMilkTea\"\n```\n\nNow you can create the converter in code and use it:\n\n```python\n...\nmatcha_to_green_tea_converter = MatchaToGreenTeaConverter()\ngreen_tea_milk_tea_proto = matcha_to_green_tea_converter.convert(matcha_milk_tea_proto)\n...\n```\n\n#### Nested protos\n\nLet's make this example a bit more complicated by adding some fields.\n\n```proto\nenum Flavor {\n  GREEN_TEA = 0;\n  MATCHA = 1;\n  BERRY = 2;\n  SPICY = 3;\n}\n\nmessage MilkTea {\n  string name = 1;\n  float price = 2;\n  Flavor flavor = 3;\n}\n```\n\n```proto\nmessage MatchaMilkTea {\n  MilkTea milk_tea = 1;\n  int64 sugar = 2;\n  repeated string shops = 3;\n  string matcha_provider = 4;\n  map<string, int64> ingredients = 5;\n  map<string, string> ingredients_calorie_map = 6;\n  repeated string cup_sizes = 7;\n}\n```\n\n```proto\nmessage GreenTeaMilkTea {\n  MilkTea milk_tea = 1;\n  float sugar = 2;\n  repeated string shops = 3;\n  string green_tea_provider = 4;\n  map<string, int64> ingredients = 5;\n  map<string, int32> ingredients_calorie_map = 6;\n  repeated int64 cup_sizes = 7;\n}\n```\n\nMost of the fields are identical and can be auto-converted, except:\n\n*   float sugar and int64 sugar;\n*   string green_tea_provider;\n*   string matcha_provider;\n*   ingredients_calorie_map;\n*   cup_sizes;\n\nYou can create a new MatchaToGreenTeaConverter class that inherits ProtoConverter\nto convert from MatchaMilkTea to GreenTeaMilkTea:\n\n```python\nfrom google3.alkali.contrib.certified.python.proto import converter\n\n...\n\nclass MatchaToGreenTeaConverter(converter.ProtoConverter):\n  def __init__(self):\n    super(MatchaToGreenTeaConverter, self).__init__(\n        pb_class_from=matcha_milk_tea_pb2.MatchaMilkTea,\n        pb_class_to=green_tea_milk_tea_pb2.GreenTeaMilkTea,\n        field_names_to_ignore=[\"ingredients_calorie_map\", \"cup_sizes\"])\n\n  @converter.convert_field(field_names=[\"sugar\"])\n  def sugar_convert_function(self, src_proto, dest_proto):\n    dest_proto.sugar = int(src_proto.sugar)\n\n  @converter.convert_field(field_names=[\"matcha_provider\"])\n  def provider_convert_function(self, src_proto, dest_proto):\n    dest_proto.green_tea_provider = src_proto.matcha_provider\n```\n\n*   `pb_class_from` and `pb_class_to` are the constructors of the protos.\n*   pb_class_from.Fields in `field_names_to_ignore` will be ignored during\n    auto-conversion and when validating that all fields have been handled. In\n    the example, `ingredients_calorie_map` and `cup_sizes` are ignored during\n    conversion.\n*   `@converter.convert_field` decorates a custom conversion function. In this\n    example, we have two functions to convert the `sugar` field and the\n    `matcha_provider` field.\n*   All fields that can't be auto-converted from the source proto must either be\n    handled by custom conversion functions or listed in `field_names_to_ignore`.\n\n#### Oneof fields\n\nOneof fields can be tricky and error-prone, therefore it is required to\nexplicitly handle or ignore all the fields in oneofs.\n\n```proto\nmessage MochiFlavor {\n  string flavor = 1;\n}\n\nmessage Mochi {\n  oneof price {\n    string price_str = 1;\n    float price_float = 2;\n  }\n  oneof flavor {\n    Flavor flavor_enum = 3;\n    MochiFlavor flavor_proto = 4;\n  }\n  int64 calorie = 5;\n}\n```\n\n```proto\nmessage TaroMochi {\n  float price_float = 1;\n  MochiFlavor flavor_proto = 2;\n  int64 calorie = 3;\n}\n```\n\n```python\nproto_converter = converter.ProtoConverter(\n        pb_class_from=mochi_pb2.Mochi,\n        pb_class_to=mochi_pb2.Taromochi,\n        field_names_to_ignore=[\"flavor_enum\", \"price_str\"])\nsrc_proto = mochi_pb2.Mochi(\n        price_float=3.14,\n        flavor_proto=mochi_pb2.MochiFlavor(flavor=\"taro\"),\n        calorie=100)\n\ndest_proto = proto_converter.convert(src_proto=src_proto)\n```\n\nIn the above example, even though `flavor_enum` and `price_str` fields are not\nused, ProtoConverter will still raise an exception if these fields are not\nignored.\n\n#### Any fields\n\n`Proto` to `Any` and `Any` to `Any` are converted automatically as long as the\nfield name matches.\n\n```proto\nmessage AnyMochiBox {\n  string name = 1;\n  google.protobuf.Any mochi = 2;\n}\n\nmessage TaroMochiBox {\n  string name = 1;\n  TaroMochi mochi = 2;\n}\n```\n\nIn the example below, ProtoConverter auto-converts a TaroMochi field to a Any\nfield.\n\n```python\ntaro_mochi = mochi_pb2.TaroMochi(price_float=3.14,\nflavor_proto=mochi_pb2.MochiFlavor(flavor=\"taro\"), calorie=100)\nproto_converter = converter.ProtoConverter(\npb_class_from=mochi_pb2.TaroMochiBox, pb_class_to=mochi_pb2.AnyMochiBox)\n\nsrc_proto = mochi_pb2.TaroMochiBox(name=\"TaroMochiBox\", mochi=taro_mochi)\n\ndest_proto = proto_converter.convert(src_proto=src_proto)\n```\n\nSimilarily, ProtoConverter auto-converts Proto Any field to Any field.\n\n```python\ntaro_mochi = mochi_pb2.TaroMochi(\n        price_float=3.14,\n        flavor_proto=mochi_pb2.MochiFlavor(flavor=\"taro\"),\n        calorie=100)\ntaromochi_any_proto = any_pb2.Any()\ntaromochi_any_proto.Pack(taro_mochi)\nproto_converter = converter.ProtoConverter(\n    pb_class_from=mochi_pb2.AnyMochiBox, pb_class_to=mochi_pb2.AnyMochiBox)\nsrc_proto = mochi_pb2.AnyMochiBox(\n    name=\"TaroMochiBox\", mochi=taromochi_any_proto)\n\ndest_proto = proto_converter.convert(src_proto=src_proto)\n```\n\nRepeated `Any` field and Map `Any` field are also supported.\n\n```proto\nmessage AnyMochiBoxes {\n  string name = 1;\n  repeated google.protobuf.Any mochi = 2;\n}\n\nmessage TaroMochiBoxes {\n  string name = 1;\n  repeated TaroMochi mochi = 2;\n}\n\nmessage MochiGiftPackage {\n  string name = 1;\n  map<string, google.protobuf.Any> mochi = 2;\n}\n\nmessage TaroMochiGiftPackage {\n  string name = 1;\n  map<string, google.protobuf.Any> mochi = 2;\n}\n```\n\nThe examples below demonstrate the auto-conversion for repeated fields and Map\nfields with Any proto.\n\n```python\nproto_converter = converter.ProtoConverter(\n        pb_class_from=mochi_pb2.TaroMochiBoxes,\n        pb_class_to=mochi_pb2.AnyMochiBoxes)\nsrc_proto = mochi_pb2.TaroMochiBoxes(name=\"TaroMochiBoxes\",\n                                     mochi=[taro_mochi, taro_mochi])\ndest_proto = proto_converter.convert(src_proto=src_proto)\n```\n\n```python\nproto_converter = converter.ProtoConverter(\n        pb_class_from=mochi_pb2.TaroMochiGiftPackage,\n        pb_class_to=mochi_pb2.AnyMochiGiftPackage)\nsrc_proto = mochi_pb2.TaroMochiGiftPackage(\n    name=\"TaroMochiBoxes\",\n    mochi={\"taro_mochi\": taro_mochi})\ndest_proto = proto_converter.convert(src_proto=src_proto)\n```\n\nWe decided not to support `Any` field to `Proto` field auto conversion to make\nit less error-pone, since the `Any` field can contain any type and cause runtime\nfailures. However, it is very easy to add a custom method to handle `Any` field.\n\n```python\nclass MochiConverter(converter.ProtoConverter):\n\n  @converter.convert_field(field_names=[\"mochi\"])\n  def mochi_field_convert_function(self, src_proto, dest_proto):\n    src_proto.mochi.Unpack(dest_proto.mochi)\n\n...\n\ntaro_mochi = mochi_pb2.TaroMochi(\n        price_float=3.14,\n        flavor_proto=mochi_pb2.MochiFlavor(flavor=\"taro\"),\n        calorie=100)\ntaromochi_any_proto = any_pb2.Any()\ntaromochi_any_proto.Pack(taro_mochi)\nproto_converter = MochiConverter(pb_class_from=mochi_pb2.AnyMochiBox,\n                                 pb_class_to=mochi_pb2.TaroMochiBox)\nsrc_proto = mochi_pb2.AnyMochiBox(\n        name=\"TaroMochiBox\", mochi=_pack_to_any_proto(taro_mochi))\n\ndest_proto = proto_converter.convert(src_proto=src_proto)\n```\n\nRepeated `Any` field to repeated `Proto` field\n\n```python\nclass RepeatedMochiConverter(converter.ProtoConverter):\n\n  @converter.convert_field(field_names=[\"mochi\"])\n  def mochi_field_convert_function(self, src_proto, dest_proto):\n    for field in src_proto.mochi:\n      proto_object = mochi_pb2.TaroMochi()\n      field.Unpack(proto_object)\n      dest_proto.mochi.append(proto_object)\n```\n\nMap `Any` field to Map `Proto` field\n\n```python\nclass MapMochiConverter(converter.ProtoConverter):\n\n  @converter.convert_field(field_names=[\"mochi\"])\n  def mochi_field_convert_function(self, src_proto, dest_proto):\n    for key, field in src_proto.mochi.items():\n      proto_object = mochi_pb2.TaroMochi()\n      field.Unpack(proto_object)\n      dest_proto.mochi[key].CopyFrom(proto_object)\n```\n\n#### Nested conversion\n\nNested conversion is supported if the source proto and destination proto\ncontains the same proto type (like the above example),\nwhile auto-conversion won't work if the nested protos are of different type.\n\nHowever, it's very easy to support this case with a custom method. We think it's\ncleaner to create separate converters as you will see in the below example.\n\n```proto\nmessage TaroMochi {\n  float price_float = 1;\n  MochiFlavor flavor_proto = 2;\n  int64 calorie = 3;\n}\n\nmessage CocoMochi {\n  float price_float = 1;\n  MochiFlavor flavor_proto = 2;\n  int64 calorie = 3;\n}\n\nmessage TaroMochiBox {\n  string name = 1;\n  TaroMochi mochi = 2;\n}\n\nmessage CocoMochiBox {\n  string name = 1;\n  CocoMochi mochi = 2;\n}\n```\n\n```python\nclass NestedMochiBoxConverter(converter.ProtoConverter):\n  taro_to_coco_converter: converter.ProtoConverter = None\n\n  def __init__(self):\n    super(RecursiveMochiBoxConverter, self).__init__(\n        pb_class_from=mochi_pb2.TaroMochiBox,\n        pb_class_to=mochi_pb2.CocoMochiBox\n    )\n    self.taro_to_coco_converter = converter.ProtoConverter(\n        pb_class_from=mochi_pb2.TaroMochi, pb_class_to=mochi_pb2.CocoMochi)\n\n  @converter.convert_field(field_names=[\"mochi\"])\n  def mochi_field_convert_function(self, src_proto, dest_proto):\n    dest_proto.mochi.CopyFrom(\n      self.taro_to_coco_converter.convert(src_proto.mochi))\n\n...\n\nproto_converter = NestedMochiBoxConverter()\ndest_proto = proto_converter.convert(src_proto)\n```\n\nWith the additional ProtoConverter between TaroMochi and CocoMochi, it's very\neasy to update the conversion once the TaroMochi or CocoMochi proto changes.\n\nFor nested array protos, we need to iterate through each element and append the\nconversion result to the destination proto:\n\n```proto\nmessage CocoMochiBoxes {\n  string name = 1;\n  repeated CocoMochi mochi = 2;\n}\n\nmessage TaroMochiBoxes {\n  string name = 1;\n  repeated TaroMochi mochi = 2;\n}\n```\n\n```python\n@converter.convert_field(field_names=[\"mochi\"])\ndef mochi_field_convert_function(self, src_proto, dest_proto):\n  for mochi in src_proto.mochi:\n    dest_proto.mochi.append(self.taro_to_coco_converter.convert(mochi))\n```\n\n## Contributing\n\nSee [`CONTRIBUTING.md`](CONTRIBUTING.md) for details.\n\n## License\n\nApache 2.0; see [`LICENSE`](LICENSE) for details.\n\n## Disclaimer\n\nThis project is not an official Google project. It is not supported by\nGoogle and Google specifically disclaims all warranties as to its quality,\nmerchantability, or fitness for a particular purpose.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/google/python-proto-converter",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-proto-converter",
    "package_url": "https://pypi.org/project/python-proto-converter/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-proto-converter/",
    "project_urls": {
      "Homepage": "https://github.com/google/python-proto-converter"
    },
    "release_url": "https://pypi.org/project/python-proto-converter/1.0.1/",
    "requires_dist": [
      "protobuf (>=3.6.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Library to converter between protos",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11400235,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a76ec01ed84a08c0de61d07a713d5523d7f330aaaf8f0a0324d7cb1730dba0e",
          "md5": "97a2454c845234a59904d098f4f10652",
          "sha256": "57e0b70749df1a5be40398ef443ee14f19634eef3fcd9ff5f8a79dd20fee39b5"
        },
        "downloads": -1,
        "filename": "python_proto_converter-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97a2454c845234a59904d098f4f10652",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12855,
        "upload_time": "2021-08-27T16:40:58",
        "upload_time_iso_8601": "2021-08-27T16:40:58.317302Z",
        "url": "https://files.pythonhosted.org/packages/2a/76/ec01ed84a08c0de61d07a713d5523d7f330aaaf8f0a0324d7cb1730dba0e/python_proto_converter-1.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "old version"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ca50a1c5e702b57c22753d2a7baebb085a74a0225d36c6cc3c186567af7e635",
          "md5": "d8a2f629877501671e2584a346ee5d53",
          "sha256": "a9f5597e48181d2a733016542dda04cb9e0088d396408a1578782d3b0fba6864"
        },
        "downloads": -1,
        "filename": "python-proto-converter-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8a2f629877501671e2584a346ee5d53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12033,
        "upload_time": "2021-08-27T16:41:00",
        "upload_time_iso_8601": "2021-08-27T16:41:00.949576Z",
        "url": "https://files.pythonhosted.org/packages/8c/a5/0a1c5e702b57c22753d2a7baebb085a74a0225d36c6cc3c186567af7e635/python-proto-converter-1.0.tar.gz",
        "yanked": true,
        "yanked_reason": "old version"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41d670e4ae09e2d247ca0649a28d5dfd66b906463d369299c4aabad35655e793",
          "md5": "d1b568191354de9b6477211cd94ffbf6",
          "sha256": "dadc4f8ab50bdd0cfd981c79516a46c8deadaf57f4520125b47f4d2e427f7b0e"
        },
        "downloads": -1,
        "filename": "python_proto_converter-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1b568191354de9b6477211cd94ffbf6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12874,
        "upload_time": "2021-09-08T21:43:51",
        "upload_time_iso_8601": "2021-09-08T21:43:51.986783Z",
        "url": "https://files.pythonhosted.org/packages/41/d6/70e4ae09e2d247ca0649a28d5dfd66b906463d369299c4aabad35655e793/python_proto_converter-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d5c8425a57544f1b77ad24081a6728cff3bb8771fe35e9a1cf2a8d1acc5a3d3",
          "md5": "41953eb566e7b7b14ffc3067395bd491",
          "sha256": "8b181e786083b2c5bd5074383a2d1fdd2fc4d4431e067d83516334d3e0b709b1"
        },
        "downloads": -1,
        "filename": "python-proto-converter-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "41953eb566e7b7b14ffc3067395bd491",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12035,
        "upload_time": "2021-09-08T21:43:53",
        "upload_time_iso_8601": "2021-09-08T21:43:53.901357Z",
        "url": "https://files.pythonhosted.org/packages/7d/5c/8425a57544f1b77ad24081a6728cff3bb8771fe35e9a1cf2a8d1acc5a3d3/python-proto-converter-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41d670e4ae09e2d247ca0649a28d5dfd66b906463d369299c4aabad35655e793",
        "md5": "d1b568191354de9b6477211cd94ffbf6",
        "sha256": "dadc4f8ab50bdd0cfd981c79516a46c8deadaf57f4520125b47f4d2e427f7b0e"
      },
      "downloads": -1,
      "filename": "python_proto_converter-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1b568191354de9b6477211cd94ffbf6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12874,
      "upload_time": "2021-09-08T21:43:51",
      "upload_time_iso_8601": "2021-09-08T21:43:51.986783Z",
      "url": "https://files.pythonhosted.org/packages/41/d6/70e4ae09e2d247ca0649a28d5dfd66b906463d369299c4aabad35655e793/python_proto_converter-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d5c8425a57544f1b77ad24081a6728cff3bb8771fe35e9a1cf2a8d1acc5a3d3",
        "md5": "41953eb566e7b7b14ffc3067395bd491",
        "sha256": "8b181e786083b2c5bd5074383a2d1fdd2fc4d4431e067d83516334d3e0b709b1"
      },
      "downloads": -1,
      "filename": "python-proto-converter-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "41953eb566e7b7b14ffc3067395bd491",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12035,
      "upload_time": "2021-09-08T21:43:53",
      "upload_time_iso_8601": "2021-09-08T21:43:53.901357Z",
      "url": "https://files.pythonhosted.org/packages/7d/5c/8425a57544f1b77ad24081a6728cff3bb8771fe35e9a1cf2a8d1acc5a3d3/python-proto-converter-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}