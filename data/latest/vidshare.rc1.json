{
  "info": {
    "author": "A.Jagan karthick",
    "author_email": "<jagankarthick2@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "this is a package that is used to stream camera, audio, screenshare data via network\n\nexamples:-\n\n    server.py\n        from vidshare import StreamingServer\n        import threading\n\n        server = StreamingServer(\"localhost\", 5000) #set your ip and port on server\n\n        thread = threading.Thread(target = server.start_server) #thread to start server\n        thread.start() #start the thread\n\n        while True:\n            input_ = input('Enter Quit To Exit : ')\n            if input_ == 'quit' or input_ == 'exit':\n                server.stop_server() #to stop the server\n                break\n\n    audio client example:-\n    client1.py\n        from vidshare import AudiostreamClient\n        import threading\n\n        server = AudiostreamClient(\"localhost\", 8000) #ip and port to connect to the server\n\n        thread = threading.Thread(target = server.connect_client) #thread to connect to the server\n        thread.start() #start the thread\n\n        while True:\n            input_ = input('Enter Quit To Exit : ')\n            if input_ == 'quit' or input_ == 'exit':\n                server.close_connection() #to close the connection to the server\n                break\n\n    client2.py\n        from vidshare import AudiostreamClient\n        import threading\n\n        server = AudiostreamClient(\"localhost\", 8000) #ip and port to connect to the server\n\n        thread = threading.Thread(target = server.connect_client) #thread to connect to the server\n        thread.start() #start the thread\n\n        while True:\n            input_ = input('Enter Quit To Exit : ')\n            if input_ == 'quit' or input_ == 'exit':\n                server.close_connection() #to close the connection with the server\n                break\n\n    screenshare streaming example:-\n\n    client1.py\n        from vidshare import Screenshareclient\n        import threading\n\n        server = Screenshareclient(\"localhost\", 8000, quit_key = \"q\") #ip and port to connect to the server and quit_key which is used to quit the cv2 window\n\n        thread = threading.Thread(target = server.connect_client) #thread to connect to the server\n        thread.start() #start the thread\n\n        while True:\n            input_ = input('Enter Quit To Exit : ')\n            if input_ == 'quit' or input_ == 'exit':\n                server.close_connection() #to close the connection to the server\n                break\n\n    client2.py\n        from vidshare import Screenshareclient\n        import threading\n\n        server = Screenshareclient(\"localhost\", 8000, quit_key = \"q\") #ip and port to connect to the server and quit_key which is used to quit the cv2 window\n\n        thread = threading.Thread(target = server.connect_client) #thread to connect to the server\n        thread.start() #start the thread\n\n        while True:\n            input_ = input('Enter Quit To Exit : ')\n            if input_ == 'quit' or input_ == 'exit':\n                server.close_connection() #to close the connection to the server\n                break\n\n    camera client example:-\n\n    client1.py\n        from vidshare import CamerastreamClient\n        import threading\n\n        server = CamerastreamClient(\"localhost\", 8000, camera = 0) #ip and port to connect to the server and camera to define camera number default is 0\n\n        thread = threading.Thread(target = server.connect_client) #thread to connect to the server\n        thread.start() #start the thread\n\n        while True:\n            input_ = input('Enter Quit To Exit : ')\n            if input_ == 'quit' or input_ == 'exit':\n                server.close_connection() #to close the connection to the server\n                break\n\n    client2.py\n        from vidshare import CamerastreamClient\n        import threading\n\n        server = CamerastreamClient(\"localhost\", 8000, camera = 0) #ip and port to connect to the server and camera to define camera number default is 0\n\n        thread = threading.Thread(target = server.connect_client) #thread to connect to the server\n        thread.start() #start the thread\n\n        while True:\n            input_ = input('Enter Quit To Exit : ')\n            if input_ == 'quit' or input_ == 'exit':\n                server.close_connection() #to close the connection to the server\n                break\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,video,stream,video stream,camera stream,sockets",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vidshare",
    "package_url": "https://pypi.org/project/vidshare/",
    "platform": "",
    "project_url": "https://pypi.org/project/vidshare/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/vidshare/1.1.1/",
    "requires_dist": [
      "opencv-python",
      "Pillow",
      "pyaudio",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Streaming video and audio and screenshare data via networks",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10307845,
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a860500564674e15bcc6d9340a0816ad03dd62791a7892c7e5be38d19e3e913",
          "md5": "5a23c63579c3a153e9b44651fbba49ce",
          "sha256": "d80c2ebff4da0f5b8b9b152ef2537150b4d441661aad8522a0bedd0f73465515"
        },
        "downloads": -1,
        "filename": "vidshare-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a23c63579c3a153e9b44651fbba49ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4021,
        "upload_time": "2021-05-10T12:41:03",
        "upload_time_iso_8601": "2021-05-10T12:41:03.092821Z",
        "url": "https://files.pythonhosted.org/packages/2a/86/0500564674e15bcc6d9340a0816ad03dd62791a7892c7e5be38d19e3e913/vidshare-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b2c8ac618e8b7bd5833ecae092ab3cd4c87daa820404658702e0d2bafdbd8fc",
          "md5": "0fda8e139723b0fee0f4d84d3afea298",
          "sha256": "1d75b554009283ecdfbe66b6cd950da06ec869a9020ec4420a2f1d7e4162f477"
        },
        "downloads": -1,
        "filename": "vidshare-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0fda8e139723b0fee0f4d84d3afea298",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4146,
        "upload_time": "2021-05-10T12:41:04",
        "upload_time_iso_8601": "2021-05-10T12:41:04.631221Z",
        "url": "https://files.pythonhosted.org/packages/5b/2c/8ac618e8b7bd5833ecae092ab3cd4c87daa820404658702e0d2bafdbd8fc/vidshare-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a860500564674e15bcc6d9340a0816ad03dd62791a7892c7e5be38d19e3e913",
        "md5": "5a23c63579c3a153e9b44651fbba49ce",
        "sha256": "d80c2ebff4da0f5b8b9b152ef2537150b4d441661aad8522a0bedd0f73465515"
      },
      "downloads": -1,
      "filename": "vidshare-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a23c63579c3a153e9b44651fbba49ce",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4021,
      "upload_time": "2021-05-10T12:41:03",
      "upload_time_iso_8601": "2021-05-10T12:41:03.092821Z",
      "url": "https://files.pythonhosted.org/packages/2a/86/0500564674e15bcc6d9340a0816ad03dd62791a7892c7e5be38d19e3e913/vidshare-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b2c8ac618e8b7bd5833ecae092ab3cd4c87daa820404658702e0d2bafdbd8fc",
        "md5": "0fda8e139723b0fee0f4d84d3afea298",
        "sha256": "1d75b554009283ecdfbe66b6cd950da06ec869a9020ec4420a2f1d7e4162f477"
      },
      "downloads": -1,
      "filename": "vidshare-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0fda8e139723b0fee0f4d84d3afea298",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4146,
      "upload_time": "2021-05-10T12:41:04",
      "upload_time_iso_8601": "2021-05-10T12:41:04.631221Z",
      "url": "https://files.pythonhosted.org/packages/5b/2c/8ac618e8b7bd5833ecae092ab3cd4c87daa820404658702e0d2bafdbd8fc/vidshare-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}