{
  "info": {
    "author": "Janis Maczijewski",
    "author_email": "Janis.Maczijewski@rwth-aachen.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Yet Another Multi-Phase Trajectory Optimization Framework\n\nYAMTOF provides a simple and convenient interface for writing multi-phase optimal control problems.  \nIts features include: \n\n* Direct collocation using splines\n* h-method mesh refinement (not automatic, triggered by the user)\n* Transcription to a standard nonlinear optimization problem\n* Tried and tested default solver configuration\n* Interpolation of the resulting states, inputs and additional outputs\n\nSee [/yamtof/examples](https://github.com/janismac/yamtof/tree/master/yamtof/examples) for usage examples.\n\n# Dependencies\n\n* Python 3.7\n* [CasADi](https://web.casadi.org/) with its included IPOPT and MUMPS solvers.\n\n# Example ([Brachistochrone](https://en.wikipedia.org/wiki/Brachistochrone_curve))\n\n```python\nfrom yamtof.mocp import MultiPhaseOptimalControlProblem\nfrom casadi import cos, sin, pi, sqrt, linspace, fabs, mmax, DM\n\nmocp = MultiPhaseOptimalControlProblem()\nstart = lambda a: mocp.start(a)\nend   = lambda a: mocp.end(a)\nphase_name = 'phaseA'\nduration = mocp.create_phase(phase_name, init=0.01, n_intervals=1)\n\n# Add time-dependent variables\nx            = mocp.add_trajectory(phase_name, 'x')\ny            = mocp.add_trajectory(phase_name, 'y')\nspeed        = mocp.add_trajectory(phase_name, 'speed', init=1.0)\npath_angle   = mocp.add_trajectory(phase_name, 'path_angle')\nangular_rate = mocp.add_trajectory(phase_name, 'angular_rate', init=0.4)\n\n# Slack variables for final state soft constraints\nslack_final_x = mocp.add_variable('slack_final_x', init=10.0)\nslack_final_y = mocp.add_variable('slack_final_y', init=10.0)\nmocp.add_constraint(slack_final_x > 0)\nmocp.add_constraint(slack_final_y > 0)\n\nparam_final_x   = mocp.add_parameter('param_final_x', init=(1.5 * pi + 1.0))\nparam_initial_y = mocp.add_parameter('param_initial_y', init=1.0)\n\n# Dynamics: Ball rolling on a ramp with a controllable slope angle\nmocp.set_derivative(x, speed * cos(path_angle))\nmocp.set_derivative(y, speed * sin(path_angle))\nmocp.set_derivative(speed,    -sin(path_angle))\nmocp.set_derivative(path_angle,   angular_rate)\n\n# Hard initial constraints\nmocp.add_constraint(start(x)     == 0)\nmocp.add_constraint(start(y)     == param_initial_y)\nmocp.add_constraint(start(speed) == 0)\n\n# Soft final constraints\nmocp.add_constraint(end(x) < param_final_x + slack_final_x)\nmocp.add_constraint(end(x) > param_final_x - slack_final_x)\nmocp.add_constraint(end(y) <  slack_final_y)\nmocp.add_constraint(end(y) > -slack_final_y)\n\n# Disallow multiple rotations\nmocp.add_path_constraint(path_angle > -pi)\nmocp.add_path_constraint(path_angle < pi)\n\n# Positive phase duration\nmocp.add_constraint(duration > 0.01)\n\n# Minimize time and distance to target\nmocp.add_objective(100 * slack_final_x)\nmocp.add_objective(100 * slack_final_y)\nmocp.add_objective(duration)\n\n# Add mechanical energy output, to demonstrate output evaluation\nmocp.add_path_output('energy', y + 0.5*speed**2)\n\n### Problem done, solve it\nmocp.solve()\nmocp.phases[phase_name].change_time_resolution(8) # Refine mesh and solve again\nmocp.solve()\n\n# Interpolate result and compare with analytic solution\ntau_grid = linspace(0.0,1.0,801)\nt_grid = tau_grid * mocp.get_value(duration)\nresult_interpolated = mocp.phases[phase_name].interpolate(tau_grid)\n\nanalytic_solution = dict()\nanalytic_solution['x']          = t_grid - sin(t_grid)\nanalytic_solution['y']          = cos(t_grid)\nanalytic_solution['speed']      = sqrt(2.0 - 2.0 * cos(t_grid))\nanalytic_solution['path_angle'] = (t_grid - pi)/2\nanalytic_solution_duration = 1.5 * pi\n\nprint('error duration:     ', mmax(fabs(mocp.get_value(duration) - analytic_solution_duration)))\nprint('error energy:       ', mmax(fabs(DM(result_interpolated['outputs']['energy']) - 1.0)))\nfor trajectory_name in analytic_solution:\n    errors = result_interpolated['trajectories'][trajectory_name] - analytic_solution[trajectory_name]\n    print(('error ' + trajectory_name + ':                  ')[:20], mmax(fabs(errors)))\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/janismac/yamtof/archive/v0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/janismac/yamtof",
    "keywords": "",
    "license": "apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yamtof",
    "package_url": "https://pypi.org/project/yamtof/",
    "platform": "",
    "project_url": "https://pypi.org/project/yamtof/",
    "project_urls": {
      "Download": "https://github.com/janismac/yamtof/archive/v0.1.tar.gz",
      "Homepage": "https://github.com/janismac/yamtof"
    },
    "release_url": "https://pypi.org/project/yamtof/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Yamtof provides a simple and convenient interface for writing multi-phase optimal control problems.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8003844,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5230cfeeb666cb9189f048271e91b0e0f8cf77d8512e6ff42e160d26da6a0458",
          "md5": "ff832cc69505c0a80ee88f359290de97",
          "sha256": "a700ad2c482871691b9620c4d45cf1b5cd77da5efbff2e7851651e43f7496c47"
        },
        "downloads": -1,
        "filename": "yamtof-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff832cc69505c0a80ee88f359290de97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31479,
        "upload_time": "2020-08-20T11:20:38",
        "upload_time_iso_8601": "2020-08-20T11:20:38.607184Z",
        "url": "https://files.pythonhosted.org/packages/52/30/cfeeb666cb9189f048271e91b0e0f8cf77d8512e6ff42e160d26da6a0458/yamtof-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5230cfeeb666cb9189f048271e91b0e0f8cf77d8512e6ff42e160d26da6a0458",
        "md5": "ff832cc69505c0a80ee88f359290de97",
        "sha256": "a700ad2c482871691b9620c4d45cf1b5cd77da5efbff2e7851651e43f7496c47"
      },
      "downloads": -1,
      "filename": "yamtof-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ff832cc69505c0a80ee88f359290de97",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31479,
      "upload_time": "2020-08-20T11:20:38",
      "upload_time_iso_8601": "2020-08-20T11:20:38.607184Z",
      "url": "https://files.pythonhosted.org/packages/52/30/cfeeb666cb9189f048271e91b0e0f8cf77d8512e6ff42e160d26da6a0458/yamtof-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}