{
  "info": {
    "author": "Matthew Baugh",
    "author_email": "Matthew Baugh <matthew.baugh17@imperial.ac.uk>",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PIE-torch: Poisson Image Editing in Pytorch\n\nFast, n-dimensional Poisson image editing.\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/matt-baugh/pytorch-poisson-image-editing/blob/master/examples.ipynb)\n\n2 implementations, including:\n - using Green Function Convolution, as described in [Fast and Optimal Laplacian Solver for Gradient-Domain Image Editing using Green Function Convolution](https://arxiv.org/abs/1902.00176)\n - using a Discrete Sine Transform, following [OpenCV's implementation](https://github.com/opencv/opencv/blob/3f4ffe7844cead4e406bfb0067e9dae2ff9247f3/modules/photo/src/seamless_cloning_impl.cpp#L323)\n\nRecommendations:\n - For blending images with consistent boundaries, use `blend`, the Green Function Convolution implementation. \n - For images with inconsistent boundaries, use `blend_dst_numpy`.\n\nMain interface:\n - `blend`: primary entrypoint, blends source image into target image at specified coordinates.\n - `blend_dst_numpy`: entrypoint for DST-based blending (currently only available in NumPy).\n - `CachedPoissonBlender`: calls `blend` but caches the Green function, so should be faster if you're repeatedly\nblending source patches of equal size, as you will only need to construct the Green function once.\n - `blend_numpy`: A NumPy implementation of `blend`.\n   - `blend_wide[_numpy]`: Wrappers of `blend` methods which allow for blending over entire image to more smoothly integrate the source region.\n   \nWhy use it?\n - It's faster than any available alternative (OpenCV's `seamlessClone`, or manual solvers using iterative methods).\n - It's flexible, working on n-dimensional images, with no explicit limitations on data types\n   (unlike `seamlessClone`, which only operates on 8-bit 3-channel images).\n - You using it makes me feel like I'm contributing to the world.\n\n## Installation\n\n### Using pip\n\n... coming soon ...\n\n### Manually\nClone PIE-torch repository and install the package locally:\n\n```bash\ngit clone https://github.com/matt-baugh/pytorch-poisson-image-editing.git\npip install -e ./pytorch-poisson-image-editing\n```\n\nYou can check the installation by running the tests:\n\n```bash\ncd pytorch-poisson-image-editing/test\npytest\n```\n\n## Usage\n\nExample of blending normal images using mixed gradients:\n```python\nfrom pietorch import blend\n\ntarget : torch.Tensor = ... # 3 x N x M image to be blended into\nsource : torch.Tensor = ... # 3 x H x W image to be blended\nmask : torch.Tensor = ... # H x W mask of which pixels from source to be included\ncorner : torch.Tensor = ... # [y, x] coordinate of location in target for source to be blended\n\nresult = blend(target, source, mask, corner, True, channels_dim=0)\n```\n\nA wide variety of full examples are given in [the examples notebook](https://github.com/matt-baugh/pytorch-poisson-image-editing/blob/master/examples.ipynb).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matt-baugh/pytorch-poisson-image-editing",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pie-torch",
    "package_url": "https://pypi.org/project/pie-torch/",
    "platform": null,
    "project_url": "https://pypi.org/project/pie-torch/",
    "project_urls": {
      "Homepage": "https://github.com/matt-baugh/pytorch-poisson-image-editing"
    },
    "release_url": "https://pypi.org/project/pie-torch/0.0.1/",
    "requires_dist": [
      "torch (>=1.7)",
      "scipy (>=1.4)",
      "numpy"
    ],
    "requires_python": ">=3.8",
    "summary": "N-dimensional Poisson image editing implemented with Pytorch and NumPy",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15267025,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd1de4ce47da8559d771cdb8fc32a3371df1d53461c982f8214ab2e5a0b09aad",
          "md5": "946449098417723ca5d63e6908a90d5f",
          "sha256": "aaa3a44e31a3c2109a06074c6a3a2222c91f829d6f3927a8e912f2549ea83ddd"
        },
        "downloads": -1,
        "filename": "pie_torch-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "946449098417723ca5d63e6908a90d5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10555,
        "upload_time": "2022-09-30T12:07:21",
        "upload_time_iso_8601": "2022-09-30T12:07:21.764605Z",
        "url": "https://files.pythonhosted.org/packages/cd/1d/e4ce47da8559d771cdb8fc32a3371df1d53461c982f8214ab2e5a0b09aad/pie_torch-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7ea5351f7e45144f13d462f27623a22419ec9c161ca6576da59aab5de1edc69",
          "md5": "3e46c23057cf0d89b5adf7e4b3783cd6",
          "sha256": "87b5a5945b0ef7b6f08587ea24313ea0ae6e73878ad1ca2b141daec72781e644"
        },
        "downloads": -1,
        "filename": "pie-torch-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3e46c23057cf0d89b5adf7e4b3783cd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8616,
        "upload_time": "2022-09-30T12:07:23",
        "upload_time_iso_8601": "2022-09-30T12:07:23.083948Z",
        "url": "https://files.pythonhosted.org/packages/a7/ea/5351f7e45144f13d462f27623a22419ec9c161ca6576da59aab5de1edc69/pie-torch-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd1de4ce47da8559d771cdb8fc32a3371df1d53461c982f8214ab2e5a0b09aad",
        "md5": "946449098417723ca5d63e6908a90d5f",
        "sha256": "aaa3a44e31a3c2109a06074c6a3a2222c91f829d6f3927a8e912f2549ea83ddd"
      },
      "downloads": -1,
      "filename": "pie_torch-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "946449098417723ca5d63e6908a90d5f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 10555,
      "upload_time": "2022-09-30T12:07:21",
      "upload_time_iso_8601": "2022-09-30T12:07:21.764605Z",
      "url": "https://files.pythonhosted.org/packages/cd/1d/e4ce47da8559d771cdb8fc32a3371df1d53461c982f8214ab2e5a0b09aad/pie_torch-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7ea5351f7e45144f13d462f27623a22419ec9c161ca6576da59aab5de1edc69",
        "md5": "3e46c23057cf0d89b5adf7e4b3783cd6",
        "sha256": "87b5a5945b0ef7b6f08587ea24313ea0ae6e73878ad1ca2b141daec72781e644"
      },
      "downloads": -1,
      "filename": "pie-torch-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3e46c23057cf0d89b5adf7e4b3783cd6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8616,
      "upload_time": "2022-09-30T12:07:23",
      "upload_time_iso_8601": "2022-09-30T12:07:23.083948Z",
      "url": "https://files.pythonhosted.org/packages/a7/ea/5351f7e45144f13d462f27623a22419ec9c161ca6576da59aab5de1edc69/pie-torch-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}