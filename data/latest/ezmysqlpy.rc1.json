{
  "info": {
    "author": "",
    "author_email": "Sahan Lakshitha <sahanlksk@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Database"
    ],
    "description": "\n\nezmysqlpy is a python package that intended to make it easy to perform most common\nMySQL database operations without writing SQL queries.\n\n## Installation\n\nEasiest way to install ```ezmysqlpy``` is by using [pip](https://pip.pypa.io/en/stable/).\n```bash\npip install ezmysqlpy\n```\n\n## Usage\n\n```python\n# Import the class \nfrom ezmysqlpy import MySQLPy\n\n# Creating an instance\nsqlpy = MySQLPy(\n    host=\"your_database_host\",\n    user=\"username\",\n    pwd=\"password\",\n)\n```\nJust by creating an instance of tha ```MySQLPy``` class you can perform some sql\nqueries that does not require access to the database tables.\n\n###\n#### Getting a list of all the databases stored in the server.\n```python\nall_dbs = sqlpy.get_all_dbs() \n```\n\n###\n#### Checking the existance of a database.\nTo check if a database exists or not, use ```db_exists(database_name)``` method:\n```python\nif sqlpy.db_exists(\"database_name\"):\n    print(\"Database exists\")\nelse:\n    print(\"Database does not exists\")\n```\n\n###\n#### Creating a database.\nTo create a database use ```create_db('database_name')``` method:\n```python\nsqlpy.create_db(\"database_name\")\n```\n\n###\n#### Deleting a database.\nTo delete a database use ```delete_db('database_name')``` method:\n```python\nsqlpy.delete_db(\"database_name\")\n```\n\n###\n#### Accessing database tables.\nTo execute any kind of database table related queries, you should first select \na database using ```select_db(database_name)``` method:\n```python\nsqlpy.select_db(\"database_name\")\n```\nYou may change the current database using this method anywhere in your code.\nSo if you are handling more than one database in your programme, make sure you\nuse this method in appropriate locations to avoid getting errors or unnecessary \nmodificatios to the data.\n\n###\n#### Getting a list of all the tables.\n```get_all_tbs()``` method returns a list of all table names stored in the \ncurrently selected database:\n```python\n# Select your database\nsqlpy.select_db('database_name')\n\n# Print all the tables\nfor db in sqlpy.get_all_tbs():\n    print(db)\n```\n\n###\n#### Checking table existance.\nuse ```tb_exists(table_name)``` method to check if the specified table exists\nor not:\n\n```python\n# If table exists return True, otherwise False\nif sqlpy.tb_exists('table_name'):\n    print(\"Table exists\")\nelse:\n    print(\"Table does not exists\")\n```\n\n###\n#### Clear all the records from a table.\nUse clear_tb(table_name) to clear all the records from a table. This does not \ndelete the table from the database but clear all the data from the table:\n\n```python\nsqlpy.clear_tb('table_name')\n```\n###\n#### Delete a table.\n```python\nsqlpy.delete_tb('table_name')\n```\n###\n#### Creating a table.\nTo create a table, use ```create_tb(table_name, cols, primary_key)``` method along \nwith it's 2 required parameters and 1 optional parameter.\n\nSecond paramater accepts a dictionary, the key as the TABLE NAME and the value \nas the DATATYPE(MAX_LENGTH). Optional third parameter accepts a column name as a\nstring for the primary key.\n\n```python\n# Table columns.\ncols = {\n    'Name': 'varchar(255)',\n    \"Age\": \"int(10)\"\n}\n\n# Creating a table called 'friends'. \nsqlpy.create_tb('friends', cols, 'name')\n\n```\n\n###\n#### Getting a list of table columns.\n```python\n# To get a list of column names of a table called 'friends'.\ncols = sqlpy.get_tb_cols('friends')\n```\n###\n#### Create a new record.\nUse ```add_record(table, values_as_a_list)``` method to add a new record into a \ntable. You can add only one record at once. When passing values, make sure you \nare passing corresponding values to the table columns.\n\n```python\n# Adding a single record at a time\nsqlpy.add_record('friends', [\"Sahan\", 23])\n\n# Adding multiple records.\nvalues = [\n    [\"Pasindu\", 23],\n    [\"Tharindu\", 12],\n    [\"Sandun\", 18],\n]\nfor value in values:\n    sqlpy.add_record('friends', value)\n```\n###\n#### Updating records.\nUse ```update_tb(table, column, value, condition)``` to update an existing table\nrecord. \n\n```column``` specifies the name of the column that you are going\nto update. \n\n```value``` specifies the new value for the selected column.\n\n```conditions``` specifies the conditions as a string, to be matched to select\nonly the appropriate records. For example: ```name=\"mark\" and age=25```\n\n```python\n# Change the age into 45 that name equals to \"pasindu\"\nsqlpy.update_tb('friends', 'age', 45, 'name=\"pasindu\"')\n```\n###\n#### Selecting all the records.\nTo select all the records from a table use ```select_all(table, sort_by, limit, offset)```\nmethod.\n\nOptional ```sort_by``` is a dictionary as ```{column_name: ASC or DESC}```.\n\nOptional ```limit``` is an integer to specify, how many results should be returned.\n\nOptional ```offset``` parameter specify from which position the results should be taken.\n\n```python\n# Select all the records of the table: friends\nall_results = sqlpy.select_all('friends')\n\n# output: A list of all the table records.\n```\n\n###\n#### Select only filtered data from a table.\nIf you want to select only some specific columns, use \n```select_filtered(table, cols, conditions, limit, offset)``` method.\n\n```cols```: A list of column names.\n\n```conditions```: A string of conditions to filter the results.\n\nOptional ```limit``` and ```offset``` parmeters are also available to help you get\nthe desired records.\n\n```python\nfitlered = sqlpy.select_filtered(\n    table=\"friends\",\n    conditions=\"name='Sandun'\",\n    limit=1, # Get only one result\n    offset=2, # Starting from second record\n)\n\nfor record in filtered:\n    print(record)\n```\n\n###\n#### Deleting records.\nTo delete a record from a table use ```delete_records(table_name, conditions)``` method.\nIf you didn't specify the conditions, this method will not work.\n```python\nsqlpy.delete_records(\"friends\", \"name='Tharindu' and age=12\")\n```\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what \nyou would like to change.\n\n\n## License\nThis project is licensed under the [MIT License]('https://github.com/sahan').",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ezmysqlpy",
    "package_url": "https://pypi.org/project/ezmysqlpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/ezmysqlpy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/sahanLK/ezmysqlpy/issues",
      "Homepage": "https://github.com/sahanLK/ezmysqlpy"
    },
    "release_url": "https://pypi.org/project/ezmysqlpy/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A package that simplifies most common MySQL database operations.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14455133,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff919f234ea2c579e557adaa6e4ffbe257a6679dc5f0894315bbec5a2ece2224",
          "md5": "c5b1e68a73365728e88eef4e19f3a26e",
          "sha256": "1139d7cb817df0f1c4b3ddc4d6777e265593ab47bd78e2aa281e30134f03efaf"
        },
        "downloads": -1,
        "filename": "ezmysqlpy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5b1e68a73365728e88eef4e19f3a26e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7518,
        "upload_time": "2022-07-16T16:43:14",
        "upload_time_iso_8601": "2022-07-16T16:43:14.280296Z",
        "url": "https://files.pythonhosted.org/packages/ff/91/9f234ea2c579e557adaa6e4ffbe257a6679dc5f0894315bbec5a2ece2224/ezmysqlpy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eae0a36a5ea330bc3f5a0ee3b997a9a06d2e917a79f2fb78caa6f2bf0988d903",
          "md5": "986e03fed67024331cb0feb6fb0ec655",
          "sha256": "44db9f400e9566f7f85aac969094a77ed1a98d4d44b3d0a104cc5015e5ad8809"
        },
        "downloads": -1,
        "filename": "ezmysqlpy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "986e03fed67024331cb0feb6fb0ec655",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8704,
        "upload_time": "2022-07-16T16:43:17",
        "upload_time_iso_8601": "2022-07-16T16:43:17.525356Z",
        "url": "https://files.pythonhosted.org/packages/ea/e0/a36a5ea330bc3f5a0ee3b997a9a06d2e917a79f2fb78caa6f2bf0988d903/ezmysqlpy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff919f234ea2c579e557adaa6e4ffbe257a6679dc5f0894315bbec5a2ece2224",
        "md5": "c5b1e68a73365728e88eef4e19f3a26e",
        "sha256": "1139d7cb817df0f1c4b3ddc4d6777e265593ab47bd78e2aa281e30134f03efaf"
      },
      "downloads": -1,
      "filename": "ezmysqlpy-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c5b1e68a73365728e88eef4e19f3a26e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 7518,
      "upload_time": "2022-07-16T16:43:14",
      "upload_time_iso_8601": "2022-07-16T16:43:14.280296Z",
      "url": "https://files.pythonhosted.org/packages/ff/91/9f234ea2c579e557adaa6e4ffbe257a6679dc5f0894315bbec5a2ece2224/ezmysqlpy-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eae0a36a5ea330bc3f5a0ee3b997a9a06d2e917a79f2fb78caa6f2bf0988d903",
        "md5": "986e03fed67024331cb0feb6fb0ec655",
        "sha256": "44db9f400e9566f7f85aac969094a77ed1a98d4d44b3d0a104cc5015e5ad8809"
      },
      "downloads": -1,
      "filename": "ezmysqlpy-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "986e03fed67024331cb0feb6fb0ec655",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 8704,
      "upload_time": "2022-07-16T16:43:17",
      "upload_time_iso_8601": "2022-07-16T16:43:17.525356Z",
      "url": "https://files.pythonhosted.org/packages/ea/e0/a36a5ea330bc3f5a0ee3b997a9a06d2e917a79f2fb78caa6f2bf0988d903/ezmysqlpy-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}