{
  "info": {
    "author": "",
    "author_email": "\"Julie Orjuela (DIADE-IRD)\" <julie.orjuela@ird.fr>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: R",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": ".. image:: ./ikiss/logo_ikiss.png\n   :width: 400\n   :alt: ikiss Logo\n   :align: center\n\n\n|PythonVersions| |SnakemakeVersions| |Singularity|\n\n.. contents:: Table of Contents\n    :depth: 2\n\n\n**Homepage:** https://forge.ird.fr/diade/iKISS\n\nAbout iKISS \n===============\n\n**iKISS (Kmer Inference sSelection)** is a snakemake pipeline able to decompose reads into kmers and extract kmers under selection. \n\niKISS uses KmersGWAS https://github.com/voichek/kmersGWAS, pcadapt https://cran.r-project.org/web/packages/pcadapt/readme/README.html and lfmm https://bcm-uga.github.io/lfmm/articles/lfmm to select genomics regions under selection.\n\n1. Install dependencies and clone iKISS\n=============================================\n\nCheck dependencies for iKISS : python and singularity\n\nInstall  singularity and python3 in your local machine OR use module load to add singularity and python3 in your environment if you are working in a cluster :\n\n.. code-block:: bash\n\n   module load system/python/3.8.12\n   module load system/singularity/3.6.0\n\n\niKISS is NOW available as a PyPI package (recommended)\n\n.. code-block:: bash\n\n   python3 -m pip install ikiss\n\n\nOR you can also install iKISS from git repository\n\n.. code-block:: bash\n\n   python3 -m pip install ikiss@git+https://forge.ird.fr/diade/iKISS.git \n   \n   #OR\n   \n   git clone https://forge.ird.fr/diade/iKISS.git \n   cd iKISS\n   python3 -m pip install .\n\n\n1.1 Installing in cluster mode\n-------------------------------\n\nInstall iKISS in cluster mode using **singularity** container from ikiss_utilities https://itrop.ird.fr/ikiss_utilities/\n\n.. code-block:: bash\n\n   ikiss install_cluster --help\n   ikiss install_cluster --scheduler slurm --env singularity\n   \n\n1.2 Installing in local mode \n----------------------------\n\n.. code-block:: bash\n\n   ikiss install_local --help\n   ikiss install_local\n\n\n2. Running a datatest\n=============================================\n\nRunning test with a datatest from iKISS_utilities in a repertory TEST\n\n.. code-block:: bash\n\n   ikiss test_install --help\n   ikiss test_install -d TEST\n\n\n2.1 In CLUSTER mode\n-------------------\n\nLaunching suggested command line done by iKISS, in CLUSTER mode : \n\nPlease run command line 'ikiss create_cluster_config' before the first run and modify theads, ram, node and computer ressources. \niKISS do a copy of cluster_config.yaml file into your home \"/home/$USER/.config/ikiss/cluster_config.yaml\"\n\n   \n.. code-block:: bash\n\n   ikiss run_cluster --help\n   ikiss create_cluster_config\n\nIf singularity was selected in installation of iKISS, it could be needed to give argument --singularity-args \\\"--bind $HOME\\\" to Snakemake, by using :\n\n.. code-block:: bash\n\n   ikiss run_cluster --help\n   ikiss run_cluster -c TEST/data_test_config.yaml --singularity-args \"--bind $HOME\"\n   # @IFB\n   ikiss run_cluster -c TEST/data_test_config.yaml --singularity-args \"--bind /shared:/shared\"\n\n\n**Important Note** : In i-Trop cluster, run iKISS using ONLY a node, data has to be in \"/scratch\" of chosen node. Use `nodelist : nodeX` parametter inside of cluster_config.yaml file.\n\n\n2.2 In LOCAL mode\n-----------------\n\nlaunching suggested command line done by iKISS, in LOCAL mode: \n\n.. code-block:: bash\n\n   ikiss run_local --help\n   ikiss run_local -t 8 -c TEST/data_test_config.yaml --singularity-args \"--bind $HOME\"\n\nIn local mode, its possible to allocate threads to some rules using `--set-threads` snakemake argument such as\n\n.. code-block:: bash\n\n    ikiss run_local -t 8 -c TEST/data_test_config.yaml --set-threads kmers_gwas_per_sample=4 mapping_kmers=2 filter_bam=2 kmer_position_from_bam=4 pcadapt=2 extract_kmers_from_bed=2\n\n\n3. Running your data\n========================\n\n\n3.1. Adapt config.yaml\n------------------------\n\nBefore to run iKISS, adapt `config.yaml` by using : \n\n.. code-block:: bash\n\n   ikiss create_config\n\n\nAdapt `config.yaml` file with path to fastq files (FASTQ) and outfile (OUTPUT) in the `DATA` section. \n\n.. code-block:: yaml\n\n   DATA:\n      FASTQ: './DATATEST/fastq'\n      OUTPUT: './OUTPUT-KISS/'\n\n:warning if yours reads are ilumina paired, you need rename reads SAMPLE_R1.fastq.gz and SAMPLE_R2.fastq.gz. For single reads use SAMPLE_R1.fastq.gz\n\niKISS uses compressed ans decompressed fastq files.\n\n\n3.1.1 WORKFLOW section\n-----------------------\n\nParameter iKISS steps using the section WORKFLOW and parameter it with the PARAMS sections.\n\nIn WORKFLOW section:\n\n   KMERS_GWAS step has to be activated by default. \n\n   PCADAPT, LFMM, MAPPING or ASSEMBLY are optional. Active or deactivate these steps using true or false.\n\n\n**KMERS_GWAS** convert reads in kmers, filter them and create a format ready to use in population genomics!\n\n**PCADAPT** detects genetic markers (kmers here ^^) involved in biological adaptation and provides outlier detection based on Principal Component Analysis (PCA).\n\n**LFMM** is used by iKISS for testing correlations between kmers and environmental data.\n\n**MAPPING** can optionally be used to align kmers to a genomic reference (if it is available ! ).\n\n**ASSEMBLY** can optionally assembly significant kmers obtained by pcadapt or lfmm\n\n.. code-block:: yaml\n\n   WORKFLOW:\n      KMERS_MODULE : true\n      PCADAPT : true\n      LFMM : true\n      MAPPING: true\n      ASSEMBLY: true\n\n3.1.2 PARAMS section\n--------------------\n\nIn the PARAMS section, tools parameters can be modified and adapted.\n\n\n=> 1. KMERS_MODULE\n-------------------\n\nKMERS_GWAS module decompose reads into kmers and create a binary table of presence/absence of kmers. This table can be filter to use only most informative kmers into the populations. PLINK format outfiles are obtained in this module.\n\n.. code-block:: yaml\n\n   PARAMS:\n      KMERS_MODULE:\n         KMER_SIZE : 31\n         MAC : 2\n         P : 0.2\n         MAF : 0.05\n         B : 1000000 # nb kmers in each bed file\n         SPLIT_LIST_SIZE : 100000\n         MIN_LIST_SIZE : 50000\n\n\n**KMER_SIZE** is the length of kmers (should be between 15-31)\n\n**MAC** is the minor allele count (min allowed appearance of a kmer) \n\n**P** is the minimum percent of appearance in each strand form\n\n**MAF** is the minimum allele frequency\n\n**B** is the number of kmers in each bed file\n\n**SPLIT_LIST_SIZE** is the nb of kmers by bed file\n\n**MIN_LIST_SIZE** indicates the minimal number of kmers allowed in the smaller bed file after splitting\n\n\n=> 2. PCADAPT\n--------------\n\nPCADAPT detects kmers involved in biological adaptation and provides outlier detection based on Principal Component Analysis (PCA)\n\n.. code-block:: yaml\n\n   PARAMS:        \n      PCADAPT:\n         K : 2\n         SAMPLES: \"samples.txt\"\n         CORRECTION: 'FDR'\n         ALPHA : 0.05\n\n\n**K** : number K of principal components\n\n**SAMPLES** : you need to generate a *samples.txt* file.  This file contains two columns (tab delimitations) : accession_id and phenotype_value. It will be used by PCADAPT.\n\n   **accession_id** : contains exactly same name of samples in FASTQ. \n\n   **phenotype_value** (int): contains sample group (wild=1, cultivated=2 for example)\n\n.. code-block:: bash\n\n   accession_id\tphenotype_value\n   Clone12\t2\n   Clone14\t2\n   Clone16\t2\n   Clone20\t2\n   Clone2\t1\n   Clone4\t1\n   Clone8\t1\n\n**CORRECTION**: kmers outliers are obtained using a correction of BONFERONNI, BH or FDR model.\n\n**ALPHA**: modify the alpha cutoff for outlier detection\n\n\n=> 3. LFMM\n----------\n\nLFMM is used by iKISS for testing correlations between kmers and environmental data.\n\n.. code-block:: yaml\n\n   PARAMS:\n      LFMM:\n         K : 2\n         PHENOTYPE_FILE: \"pheno.txt\"\n         PHENOTYPE_PCA_ANALYSIS : false\n         CORRECTION: 'BH'\n         ALPHA : 0.05\n\n\n**K** are the latent factors used in LFMM association analyses \n\n**PHENOTYPE_FILE**: an phenotype file is obligatory in LFMM analysis. You can give to iKISS PCA results, climate variables, etc.\n\nA PCA can reveal some 'structure' in the genotype data and it could help you to fix K parameter.\n\n**PHENOTYPE_PCA_ANALYSIS** \n\n   * If **PHENOTYPE_PCA_ANALYSIS** is true, iKISS automatically run PCA using the file given by user in the PHENOTYPE_FILE key. This PHENOTYPE_FILE can be a PCA result for example.\n\n   * If **PHENOTYPE_PCA_ANALYSIS** is false, iKISS use directly the PHENOTYPE_FILE as 'phenotype' to LFMM analysis. Kmers are used as 'genotype' data. \n\n**CORRECTION**: kmers outliers are obtained using a correction of BONFERONNI, BH or FDR model.\n\n**ALPHA**: modify the alpha cutoff for outlier detection\n\n\n=> 4. MAPPING\n-------------\n\nMAPPING section in PARAMS can optionally be used to align kmers to a genomic reference. It could give a idea of selected regions in a genome. \n\n.. code-block:: yaml\n\n   PARAMS:\n      MAPPING:\n         REF: \"reference.fasta\"\n         MODE : bwa-aln\n         INDEX_OPTIONS: \"\"\n         OPTIONS : \"-n 0.04\"\n\n\nUse a reference file in the **REF** section. \n\nParametter **MODE** using  *bwa-aln* or *bwa-mem2* \n\nSet up the **INDEX_OPTIONS** according to the MODE you have chosen.\n\n   If *bwa-mem2* leaf empty\n   \n   If *bwa-aln* \"-a bwtsw\" or \"\" \n\nSet options according of chosen mapper in the **OPTIONS** key. \n\n   If *bwa-mem2* default parameters -A 1 -B 4;\n   \n   If *bwa-aln* -n 0.04\n\n=> 5. ASSEMBLY\n---------------\n\nASSEMBLY section in PARAMS can optionally be used to assembly significant kmers obtained by pcadapt or/and lfmm.\n\nContigs are assembled by iKISS using  mergeTags from dekupl package https://github.com/Transipedia/dekupl-mergeTags.\n\nChose minimal overlap size \"OVERLAP_SIZE\" allowed to assembly kmers.\n\nFeel free to filter contigs by size \"FILTER_CONTIG_SIZE\".\n\nAssembled contigs could be used by blastn against a database, you can also try to annotate them!\n\n.. code-block:: yaml\n\n   PARAMS:\n      ASSEMBLY:\n         OVERLAP_SIZE : 15\n         FILTER_CONTIG_SIZE : 100\n\n\n3.2. Adapt cluster_config.yaml\n-------------------------------\n\n\nIf you will run ikiss in cluster, adapt `cluster_config.yaml` :  \n\n.. code-block:: bash\n\n   ikiss edit_cluster_config\n\nInside `cluster_config.yaml`, adapt partition to your favorite cluster and change memory and cpu number in by `__default__` key or in rules you need :\n\n.. code-block:: bash\n\n   __default__:\n      cpus-per-task : 4\n      mem-per-cpu : 10G\n      partition : \"normal\"\n      nodelist: node19\n      output : 'slurm_logs/stdout/{rule}/{wildcards}.o'\n      error : 'slurm_logs/error/{rule}/{wildcards}.e'\n      job-name : '{rule}.{wildcards}'\n      \n   kmers_gwas_per_sample:\n      cpus-per-task : 4\n      mem-per-cpu : 10G\n\n\nRULES  \n-----\n\nHere you can quickly find iKISS snakemake rules list : \n\n.. code-block:: bash\n\n   rule kmers_gwas_per_sample *\n   rule kmers_to_use\n   rule kmers_table\n   rule extract_kmers_from_bed\n   rule index_ref\n   rule mapping_kmers\n   rule filter_bam *\n   rule kmer_position_from_bam *\n   rule merge_kmer_position\n   rule pcadapt * \n   rule merge_pcadapt\n   rule outliers_pcadapt_position\n   rule get_pca_from_phenotype\n   rule lfmm * \n   rule merge_lfmm\n   rule outliers_lfmm_position\n   rule mergetags_lfmm\n   rule mergetags_pcadapt\n   rule report_ikiss\n   rule html_ikiss\n\n* rules with a `*` can be parallelised.\n\n\n4. Running iKISS\n================\n\nRun iKISS by `ikiss run_local` or `ikiss run_cluster` as explained in \"Running a datatest\" section.\n\n\n\n5. iKISS output\n================\n\nThis is a overwiew of iKISS output directory:\n\n.. code-block:: bash\n\n      OUTPUT-KISS/\n      ├── 1.KMERS_MODULE\n      │   ├── Clone1\n      │   │   ├── Clone1_files.txt\n      │   │   ├── Clone1_kmc3_all.kmc_pre\n      │   │   ├── Clone1_kmc3_all.kmc_suf\n      │   │   ├── Clone1_kmc3_canon.kmc_pre\n      │   │   ├── Clone1_kmc3_canon.kmc_suf\n      │   │   ├── Clone1_kmers_with_strand\n      │   ├── Clone2\n      │   └── CloneX\n      ├── 2.KMERS_TABLE\n      │   ├── kmers_table.names\n      │   ├── kmers_table.table\n      │   ├── kmers_to_use\n      │   ├── kmers_to_use.no_pass_kmers\n      │   ├── kmers_to_use.shareness\n      │   ├── kmers_to_use.stats.both\n      │   ├── kmers_to_use.stats.only_canonical\n      │   ├── kmers_to_use.stats.only_non_canonical\n      ├── 3.TABLE2BED\n      │   ├── output_file.0.bed\n      │   ├── output_file.0.bim\n      │   └── output_file.0.fam\n      ├── 4.EXTRACT_FASTQ\n      │   └── output_file.0.fastq.gz\n      ├── 5.RANGES\n      │   └── output_file.0\n      │       ├── 1.txt\n      │       ├── 2.txt\n      │       ├── 3.txt\n      │       ├── 4.txt\n      │       └── 5.txt\n      ├── 6.LFMM\n      │   ├── output_file.0_1_lfmm_outliers.csv\n      │   ├── output_file.0_1_lfmm.rplot.pdf\n      │   ├── output_file.0_2_lfmm_outliers.csv\n      │   ├── output_file.0_2_lfmm.rplot.pdf\n      │   ├── output_file.0_3_lfmm_outliers.csv\n      │   ├── output_file.0_3_lfmm.rplot.pdf\n      │   ├── output_file.0_4_lfmm_outliers.csv\n      │   ├── output_file.0_4_lfmm.rplot.pdf\n      │   ├── output_file.0_5_lfmm_outliers.csv\n      │   └── output_file.0_5_lfmm.rplot.pdf\n      ├── 6.PCADAPT\n      │   ├── output_file.0_1_BH0.05.pcadapt_outliers.csv\n      │   ├── output_file.0_1_BH0.05.pcadapt_pvalues.csv\n      │   ├── output_file.0_1_BH0.05.pcadapt.rplot.pdf\n      │   ├── output_file.0_1_BH0.05.pcadapt_scores.csv \n      │   ├ ...   \n      ├── 7.MERGED_LFMM\n      │   └── merged_lfmm_pvalues.csv\n      ├── 7.MERGED_PCADAPT\n      │   ├── merged_pcadapt_outliers.csv\n      │   └── merged_pcadapt_pvalues.csv\n      ├── 8.MAPPING\n      │   ├── output_file.0_vs_reference.bam\n      │   ├── output_file.0_vs_reference_F4MQ10.bam\n      │   ├── output_file.0_vs_reference_sorted.bam\n      │   ├── output_file.0_vs_reference_sorted.bam.stats\n      │   └── REF\n      ├── 9.KMERPOSITION\n      │   └── output_file.0_vs_reference_KMERPOSITION.txt\n      ├── 10.MERGE_KMERPOSITION\n      │   ├── kmer_position_merged.txt\n      ├── 11.OUTLIERS_LFMM_POSITION\n      │   └── outliers_with_position.csv\n      ├── 11.OUTLIERS_PCADAPT_POSITION\n      │   └── outliers_with_position.csv\n      ├── 12.ASSEMBLY_OUTLIER_PCADAPT\n      │   └── outliers_pcadapt_mergetags.fasta\n      ├── 12.ASSEMBLY_OUTLIER_LFMM\n      │   └── outliers_lfmm_mergetags.fasta\n      ├── BENCHMARK\n      ├── LOGS\n      └── config_corrected.yaml\n\nNote : we recommended to remove 1.KMER_GWAS repertory after analysis.\n\n\nAuthors\n========\n\nJulie Orjuela (IRD)\n\nYves Vigouroux (IRD)\n\n\nLicense\n=======\n\nLicensed under MIT.\n\nIntellectual property belongs to IRD and authors.\n\niKISS uses recycled code from the culebrONT project of SouthGreen platform https://culebront-pipeline.readthedocs.io/en/latest/.\niKISS uses SnakEcdysis package https://snakecdysis.readthedocs.io/en/latest/package.html to perform installation and execution in local and cluster mode.\n\n.. |PythonVersions| image:: https://img.shields.io/badge/python-3.7%2B-blue\n   :target: https://www.python.org/downloads\n.. |SnakemakeVersions| image:: https://img.shields.io/badge/snakemake-≥5.10.0-brightgreen.svg?style=flat\n   :target: https://snakemake.readthedocs.io\n.. |Singularity| image:: https://img.shields.io/badge/singularity-≥3.3.0-7E4C74.svg\n   :target: https://sylabs.io/docs/\n.. |readthedocs| image:: https://pbs.twimg.com/media/E5oBxcRXoAEBSp1.png\n   :target: https://culebront-pipeline.readthedocs.io/en/latest/\n   :width: 400px\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "snakemake,kmers,selection,diversity",
    "license": "MIT License  Copyright (c) 2022 DIADE IRD / Julie Orjuela, Yves Vigouroux  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ikiss",
    "package_url": "https://pypi.org/project/ikiss/",
    "platform": null,
    "project_url": "https://pypi.org/project/ikiss/",
    "project_urls": {
      "Bug Tracker": "https://forge.ird.fr/diade/iKISS/-/issues",
      "Documentation": "https://forge.ird.fr/diade/iKISS/-/blob/master/README.rst",
      "Downloads": "https://forge.ird.fr/diade/iKISS/-/releases/",
      "Homepage": "https://forge.ird.fr/diade/iKISS.git",
      "Source Code": "https://forge.ird.fr/diade/iKISS.git",
      "repository": "https://forge.ird.fr/diade/iKISS.git"
    },
    "release_url": "https://pypi.org/project/ikiss/1.3.0/",
    "requires_dist": [
      "PyYAML",
      "pandas",
      "matplotlib",
      "tabulate",
      "ipython",
      "biopython",
      "numpy",
      "argparse",
      "snakemake",
      "tqdm",
      "click (>=8.0.3)",
      "cookiecutter",
      "snakecdysis",
      "sphinx ; extra == 'docs'",
      "sphinx-click ; extra == 'docs'",
      "sphinx-copybutton ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "tox ; extra == 'docs'"
    ],
    "requires_python": ">=3.8",
    "summary": "iKISS is a pipeline to detect kmers under selection.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17087412,
  "releases": {
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "421b603b2ca21be38fa40758e81d6f675ee20efba6b4af3b8fec513885c451bb",
          "md5": "a4b8d8ae2aa61002e1b0eea683a6b4a1",
          "sha256": "2fcea63cf08f6e8826a55c6bf8729c7ffa04a4f56d1e6d8905448350675e1a4b"
        },
        "downloads": -1,
        "filename": "ikiss-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4b8d8ae2aa61002e1b0eea683a6b4a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 141731,
        "upload_time": "2023-02-28T11:58:54",
        "upload_time_iso_8601": "2023-02-28T11:58:54.354036Z",
        "url": "https://files.pythonhosted.org/packages/42/1b/603b2ca21be38fa40758e81d6f675ee20efba6b4af3b8fec513885c451bb/ikiss-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "945c2715293d96ca363ec4fd8c95f5b3e3880a9fd4fb4a7677048532d25ad6ee",
          "md5": "71f213c6ef931eb4982e51220eb60f45",
          "sha256": "5dfc87530137e0f0629cab1ec54255f5bf448d7d71c9c169c619de21bd228ea1"
        },
        "downloads": -1,
        "filename": "ikiss-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "71f213c6ef931eb4982e51220eb60f45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 136856,
        "upload_time": "2023-02-28T11:58:57",
        "upload_time_iso_8601": "2023-02-28T11:58:57.599479Z",
        "url": "https://files.pythonhosted.org/packages/94/5c/2715293d96ca363ec4fd8c95f5b3e3880a9fd4fb4a7677048532d25ad6ee/ikiss-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "421b603b2ca21be38fa40758e81d6f675ee20efba6b4af3b8fec513885c451bb",
        "md5": "a4b8d8ae2aa61002e1b0eea683a6b4a1",
        "sha256": "2fcea63cf08f6e8826a55c6bf8729c7ffa04a4f56d1e6d8905448350675e1a4b"
      },
      "downloads": -1,
      "filename": "ikiss-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a4b8d8ae2aa61002e1b0eea683a6b4a1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 141731,
      "upload_time": "2023-02-28T11:58:54",
      "upload_time_iso_8601": "2023-02-28T11:58:54.354036Z",
      "url": "https://files.pythonhosted.org/packages/42/1b/603b2ca21be38fa40758e81d6f675ee20efba6b4af3b8fec513885c451bb/ikiss-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "945c2715293d96ca363ec4fd8c95f5b3e3880a9fd4fb4a7677048532d25ad6ee",
        "md5": "71f213c6ef931eb4982e51220eb60f45",
        "sha256": "5dfc87530137e0f0629cab1ec54255f5bf448d7d71c9c169c619de21bd228ea1"
      },
      "downloads": -1,
      "filename": "ikiss-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "71f213c6ef931eb4982e51220eb60f45",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 136856,
      "upload_time": "2023-02-28T11:58:57",
      "upload_time_iso_8601": "2023-02-28T11:58:57.599479Z",
      "url": "https://files.pythonhosted.org/packages/94/5c/2715293d96ca363ec4fd8c95f5b3e3880a9fd4fb4a7677048532d25ad6ee/ikiss-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}