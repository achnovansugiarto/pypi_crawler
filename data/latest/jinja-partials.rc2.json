{
  "info": {
    "author": "Michael Kennedy",
    "author_email": "michael@talkpython.fm",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Jinja Partials\n\nSimple reuse of partial HTML page templates in the Jinja template language for Python web frameworks.\n(There is also a [Pyramid/Chameleon version here](https://github.com/mikeckennedy/chameleon_partials).)\n\n## Overview\n\nWhen building real-world web apps with Flask + Jinja2, it's easy to end up with repeated HTML fragments.\nJust like organizing code for reuse, it would be ideal to reuse smaller sections of HTML template code.\nThat's what this library is all about.\n\n## Example\n\nThis project comes with a sample flask application (see the `example` folder). This app displays videos\nthat can be played on YouTube. The image, subtitle of author and view count are reused throughout the\napp. Here's a visual:\n\n![](https://raw.githubusercontent.com/mikeckennedy/jinja_partials/main/readme_resources/reused-html-visual.png)\n\nCheck out the [**demo / example application**](https://github.com/mikeckennedy/jinja_partials/tree/main/example) \nto see it in action. \n\n## Installation\n\nIt's just `pip install jinja-partials` and you're all set with this pure Python package.\n\n## Usage\n\nUsing the library is incredible easy. The first step is to register the partial method with Jinja and Flask.\nDo this once at app startup:\n\n```python\nimport flask\nimport jinja_partials\n\napp = flask.Flask(__name__)\n\njinja_partials.register_extensions(app)\n# ...\n```\n\nYou can also use this library in your FastAPI (or Starlette) project!\n```python\nfrom fastapi.templating import Jinja2Templates\n# or `from starlette.templating import Jinja2Templates`\n\nimport jinja_partials\n\ntemplates = Jinja2Templates(\"tests/test_templates\")\n\njinja_partials.register_starlette_extensions(templates)\n# ...\n```\n\nNext, you define your main HTML (Jinja2) templates as usual. Then \ndefine your partial templates. I recommend locating and naming them accordingly:\n\n```\n├── templates\n│   ├── home\n│   │   ├── index.html\n│   │   └── listing.html\n│   └── shared\n│       ├── _layout.html\n│       └── partials\n│           ├── video_image.html\n│           └── video_square.html\n```\n\nNotice the `partials` subfolder in the `templates/shared` folder.\n\nThe templates are just HTML fragments. Here is a stand-alone one for the YouTube thumbnail from\nthe example app:\n\n```html\n<img src=\"https://img.youtube.com/vi/{{ video.id }}/maxresdefault.jpg\"\n     class=\"img img-responsive {{ ' '.join(classes) }}\"\n     alt=\"{{ video.title }}\"\n     title=\"{{ video.title }}\">\n```\n\nNotice that an object called `video` and list of classes are passed in as the model.\n\nTemplates can also be nested. Here is the whole single video fragment with the image as well as other info\nlinking out to YouTube:\n\n```html\n<div>\n    <a href=\"https://www.youtube.com/watch?v={{ video.id }}\" target=\"_blank\">\n        {{ render_partial('shared/partials/video_image.html', video=video) }}\n    </a>\n    <a href=\"https://www.youtube.com/watch?v={{ video.id }}\" target=\"_blank\"\n       class=\"author\">{{ video.author }}</a>\n    <div class=\"views\">{{ \"{:,}\".format(video.views) }} views</div>\n</div>\n```\n\nNow you see the `render_partial()` method. It takes the subpath into the templates folder and\nany model data passed in as keyword arguments.\n\nWe can finally generate the list of video blocks as follows:\n\n```html\n{% for v in videos %}\n\n    <div class=\"col-md-3 video\">\n        {{ render_partial('shared/partials/video_square.html', video=v) }}\n    </div>\n\n{% endfor %}\n```\n\nThis time, we reframe each item in the list from the outer template (called `v`) as the `video` model\nin the inner HTML section.\n\n\n## Why not just use `include` or `macro` from Jinja?\n\nThe short answer is they are nearly the same, but both fall short in different ways. \nFor a more detailed response, see the discussion on [**issue #1**](https://github.com/mikeckennedy/jinja_partials/issues/1)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mikeckennedy/jinja_partials",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jinja-partials",
    "package_url": "https://pypi.org/project/jinja-partials/",
    "platform": "",
    "project_url": "https://pypi.org/project/jinja-partials/",
    "project_urls": {
      "Homepage": "https://github.com/mikeckennedy/jinja_partials"
    },
    "release_url": "https://pypi.org/project/jinja-partials/0.1.1/",
    "requires_dist": [
      "jinja2"
    ],
    "requires_python": "",
    "summary": "Simple reuse of partial HTML page templates in the Jinja template language for Python web frameworks.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12308615,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f69612891f0e3f28f658ca95433ce36cafe831efd2978b1a47f038cbb4d5d58",
          "md5": "636f5fd951209c13e2fe6e9a91fa20ec",
          "sha256": "d5ec915d09fdcb4f79e72aa3c185dcc76458324f011d1cb3bdaed69290c142d2"
        },
        "downloads": -1,
        "filename": "jinja_partials-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "636f5fd951209c13e2fe6e9a91fa20ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4127,
        "upload_time": "2021-07-26T21:29:56",
        "upload_time_iso_8601": "2021-07-26T21:29:56.156983Z",
        "url": "https://files.pythonhosted.org/packages/6f/69/612891f0e3f28f658ca95433ce36cafe831efd2978b1a47f038cbb4d5d58/jinja_partials-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cf82be19a6ee1d3895576c22fb25c42673072ea1a5eda779e4be1af914d45c7",
          "md5": "587be467390e0d01444698edcd80082f",
          "sha256": "c927e0dd51cb299c41c96bd200e01be299f860466fc2d6bb6a67861acb08b498"
        },
        "downloads": -1,
        "filename": "jinja_partials-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "587be467390e0d01444698edcd80082f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4635,
        "upload_time": "2021-12-15T05:48:57",
        "upload_time_iso_8601": "2021-12-15T05:48:57.854600Z",
        "url": "https://files.pythonhosted.org/packages/8c/f8/2be19a6ee1d3895576c22fb25c42673072ea1a5eda779e4be1af914d45c7/jinja_partials-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f03021850ec17f6be1c2549b98a33ba1e90cff3697e1c111e7ed5c2b375cee33",
          "md5": "d122668e46490606d7b975663b85d71c",
          "sha256": "7afea85362f48c49b32c2134612edf52e5f3d5af6f2038fcdb758c53a50ee7af"
        },
        "downloads": -1,
        "filename": "jinja_partials-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d122668e46490606d7b975663b85d71c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4681,
        "upload_time": "2021-12-15T05:48:59",
        "upload_time_iso_8601": "2021-12-15T05:48:59.321193Z",
        "url": "https://files.pythonhosted.org/packages/f0/30/21850ec17f6be1c2549b98a33ba1e90cff3697e1c111e7ed5c2b375cee33/jinja_partials-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8cf82be19a6ee1d3895576c22fb25c42673072ea1a5eda779e4be1af914d45c7",
        "md5": "587be467390e0d01444698edcd80082f",
        "sha256": "c927e0dd51cb299c41c96bd200e01be299f860466fc2d6bb6a67861acb08b498"
      },
      "downloads": -1,
      "filename": "jinja_partials-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "587be467390e0d01444698edcd80082f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4635,
      "upload_time": "2021-12-15T05:48:57",
      "upload_time_iso_8601": "2021-12-15T05:48:57.854600Z",
      "url": "https://files.pythonhosted.org/packages/8c/f8/2be19a6ee1d3895576c22fb25c42673072ea1a5eda779e4be1af914d45c7/jinja_partials-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f03021850ec17f6be1c2549b98a33ba1e90cff3697e1c111e7ed5c2b375cee33",
        "md5": "d122668e46490606d7b975663b85d71c",
        "sha256": "7afea85362f48c49b32c2134612edf52e5f3d5af6f2038fcdb758c53a50ee7af"
      },
      "downloads": -1,
      "filename": "jinja_partials-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d122668e46490606d7b975663b85d71c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4681,
      "upload_time": "2021-12-15T05:48:59",
      "upload_time_iso_8601": "2021-12-15T05:48:59.321193Z",
      "url": "https://files.pythonhosted.org/packages/f0/30/21850ec17f6be1c2549b98a33ba1e90cff3697e1c111e7ed5c2b375cee33/jinja_partials-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}