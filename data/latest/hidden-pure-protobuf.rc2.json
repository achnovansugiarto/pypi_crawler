{
  "info": {
    "author": "Hidden Author",
    "author_email": "empty@temp.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# `pure-protobuf`\n\n[![Build Status](https://github.com/eigenein/protobuf/workflows/check/badge.svg)](https://github.com/eigenein/protobuf/actions)\n[![Coverage Status](https://coveralls.io/repos/github/eigenein/protobuf/badge.svg?branch=master)](https://coveralls.io/github/eigenein/protobuf?branch=master)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/pure-protobuf.svg)](https://pypistats.org/packages/pure-protobuf)\n[![PyPI – Version](https://img.shields.io/pypi/v/pure-protobuf.svg)](https://pypi.org/project/pure-protobuf/#history)\n[![PyPI – Python](https://img.shields.io/pypi/pyversions/pure-protobuf.svg)](https://pypi.org/project/pure-protobuf/#files)\n[![License](https://img.shields.io/pypi/l/pure-protobuf.svg)](https://github.com/eigenein/protobuf/blob/master/LICENSE)\n\nThis guide describes how to use `pure-protobuf` to structure your data. It tries to follow [the standard developer guide](https://developers.google.com/protocol-buffers/docs/proto3). It also assumes that you're familiar with Protocol Buffers.\n\n### Defining a message type\n\nLet's look at [the simple example](https://developers.google.com/protocol-buffers/docs/proto3#simple). Here's how it looks like in `proto3` syntax:\n\n```proto\nsyntax = \"proto3\";\n\nmessage SearchRequest {\n  string query = 1;\n  int32 page_number = 2;\n  int32 result_per_page = 3;\n}\n```\n\nAnd this is how you define it with `pure-protobuf`:\n\n```python\nfrom dataclasses import dataclass\n\nfrom pure_protobuf.dataclasses_ import field, message\nfrom pure_protobuf.types import int32\n\n\n@message\n@dataclass\nclass SearchRequest:\n    query: str = field(1, default='')\n    page_number: int32 = field(2, default=int32(0))\n    result_per_page: int32 = field(3, default=int32(0))\n   \n\nassert SearchRequest(\n    query='hello',\n    page_number=int32(1),\n    result_per_page=int32(10),\n).dumps() == b'\\x0A\\x05hello\\x10\\x01\\x18\\x0A'\n```\n\nKeep in mind that `@message` decorator **must** stay on top of [`@dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass).\n\n### Serializing\n\nEach class wrapped with `@message` gets two methods attached:\n- `dumps() -> bytes` to serialize message into a byte string\n- `dump(io: IO)` to serialize message into a file-like object\n\n### Deserializing\n\nEach classes wrapped with `@message` gets two class methods attached:\n- `loads(bytes_: bytes) -> TMessage` to deserialize a message from a byte string\n- `load(io: IO) -> TMessage` to deserialize a message from a file-like object\n\nThese methods are also available as standalone functions in `pure_protobuf.dataclasses_`:\n- `load(cls: Type[T], io: IO) -> T`\n- `loads(cls: Type[T], bytes_: bytes) -> T`\n\n### Specifying field types\n\nIn `pure-protobuf` types are specified with [type hints](https://www.python.org/dev/peps/pep-0484/). Native Python `float`, `str`, `bytes` and `bool` types are supported. Since other Protocol Buffers types don't exist as native Python types, the package uses [`NewType`](https://docs.python.org/3/library/typing.html#newtype) to define them. They're available via `pure_protobuf.types` and named in the same way.\n\n### Assigning field numbers\n\nField numbers are provided via the `metadata` parameter of the [`field`](https://docs.python.org/3/library/dataclasses.html#dataclasses.field) function: `field(..., metadata={'number': number})`. However, to improve readability and save some characters, `pure-protobuf` provides a helper function `pure_protobuf.dataclasses_.field` which accepts field number as the first positional parameter and just passes it to the standard `field` function.\n\n### Specifying field rules\n\n[`typing.List`](https://docs.python.org/3/library/typing.html#typing.List) and [`typing.Iterable`](https://docs.python.org/3/library/typing.html#typing.Iterable) annotations are automatically converted to [repeated fields](https://developers.google.com/protocol-buffers/docs/proto3#specifying-field-rules). Repeated fields of scalar numeric types use packed encoding by default:\n\n```python\nfrom dataclasses import dataclass\nfrom typing import List\n\nfrom pure_protobuf.dataclasses_ import field, message\nfrom pure_protobuf.types import int32\n\n\n@message\n@dataclass\nclass Message:\n    foo: List[int32] = field(1, default_factory=list)\n```\n\nIn case, unpacked encoding is explicitly wanted, the `packed`-argument of `field` can be used as in:\n\n```python\nfrom dataclasses import dataclass\nfrom typing import List\n\nfrom pure_protobuf.dataclasses_ import field, message\nfrom pure_protobuf.types import int32\n\n@message\n@dataclass\nclass Message:\n    foo: List[int32] = field(1, default_factory=list, packed=False)\n```\n\nIt's also possible to wrap a field type with [`typing.Optional`](https://docs.python.org/3/library/typing.html#typing.Optional). If `None` is assigned to an `Optional` field, then the field will be skipped during serialization.\n\n### Default values\n\nIn `pure-protobuf` it's developer's responsibility to take care of default values. If encoded message does not contain a particular element, the corresponding field stays unassigned. It means that the standard `default` and `default_factory` parameters of the `field` function work as usual:\n\n```python\nfrom dataclasses import dataclass\nfrom typing import Optional\n\nfrom pure_protobuf.dataclasses_ import field, message\nfrom pure_protobuf.types import int32\n\n\n@message\n@dataclass\nclass Foo:\n    bar: int32 = field(1, default=42)\n    qux: Optional[int32] = field(2, default=None)\n\n\nassert Foo().dumps() == b'\\x08\\x2A'\nassert Foo.loads(b'') == Foo(bar=42)\n```\n\nIn fact, the pattern `qux: Optional[int32] = field(2, default=None)` is so common that there's a convenience function `optional_field` to define an `Optional` field with `None` value by default:\n\n```python\nfrom dataclasses import dataclass\nfrom typing import Optional\n\nfrom pure_protobuf.dataclasses_ import optional_field, message\nfrom pure_protobuf.types import int32\n\n\n@message\n@dataclass\nclass Foo:\n    qux: Optional[int32] = optional_field(2)\n\n\nassert Foo().dumps() == b''\nassert Foo.loads(b'') == Foo(qux=None)\n```\n\n### Enumerations\n\nSubclasses of the standard [`IntEnum`](https://docs.python.org/3/library/enum.html#intenum) class are supported:\n\n```python\nfrom dataclasses import dataclass\nfrom enum import IntEnum\n\nfrom pure_protobuf.dataclasses_ import field, message\n\n\nclass TestEnum(IntEnum):\n    BAR = 1\n\n\n@message\n@dataclass\nclass Test:\n    foo: TestEnum = field(1)\n\n\nassert Test(foo=TestEnum.BAR).dumps() == b'\\x08\\x01'\nassert Test.loads(b'\\x08\\x01') == Test(foo=TestEnum.BAR)\n```\n\n### Using other message types\n\nEmbedded messages are defined the same way as normal dataclasses:\n\n```python\nfrom dataclasses import dataclass\n\nfrom pure_protobuf.dataclasses_ import field, message\nfrom pure_protobuf.types import int32\n\n\n@message\n@dataclass\nclass Test1:\n    a: int32 = field(1, default=0)\n\n\n@message\n@dataclass\nclass Test3:\n    c: Test1 = field(3, default_factory=Test1)\n\n\nassert Test3(c=Test1(a=int32(150))).dumps() == b'\\x1A\\x03\\x08\\x96\\x01'\n```\n\n### Well-known message types\n\n`pure_protobuf.google` also provides built-in definitions for the following [well-known message types](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf):\n\n| Annotation   | `pure_protobuf.types.google` | `.proto`    |\n| ------------ | ---------------------------- | ----------- |\n| `datetime`   | `Timestamp`                  | `Timestamp` |\n| `timedelta`  | `Duration`                   | `Duration`  |\n| `typing.Any` | `Any_`                       | `Any`       |\n\nThey're handled automatically, you have nothing to do but use them normally in type hints:\n\n```python\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import Optional\n\nfrom pure_protobuf.dataclasses_ import field, message\n\n\n@message\n@dataclass\nclass Test:\n    timestamp: Optional[datetime] = field(1, default=None)\n```\n\n#### [`Any`](https://developers.google.com/protocol-buffers/docs/proto3#any)\n\nSince `pure-protobuf` is not able to download or parse `.proto` definitions, it provides a limited implementation of the [`Any`](https://developers.google.com/protocol-buffers/docs/proto3#any) message type. That is, you still have to define all message classes in the usual way. Then, `pure-protobuf` will be able to import and instantiate an encoded value:\n\n```python\nfrom dataclasses import dataclass\nfrom typing import Any, Optional\n\nfrom pure_protobuf.dataclasses_ import field, message\nfrom pure_protobuf.types.google import Timestamp\n\n\n@message\n@dataclass\nclass Message:\n    value: Optional[Any] = field(1)\n\n\n# Here `Timestamp` is used just as an example, in principle any importable user type works.\nmessage = Message(value=Timestamp(seconds=42))\nassert Message.loads(message.dumps()) == message\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eigenein/protobuf",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hidden-pure-protobuf",
    "package_url": "https://pypi.org/project/hidden-pure-protobuf/",
    "platform": null,
    "project_url": "https://pypi.org/project/hidden-pure-protobuf/",
    "project_urls": {
      "Changelog": "https://github.com/eigenein/protobuf/blob/master/CHANGELOG.md",
      "Homepage": "https://github.com/eigenein/protobuf"
    },
    "release_url": "https://pypi.org/project/hidden-pure-protobuf/0.2/",
    "requires_dist": [
      "flake8 ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "coveralls ; extra == 'dev'",
      "build ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "pytest-benchmark ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "[Stolen copy of https://pypi.org/project/pure-protobuf/] Implementation of Protocol Buffers with dataclass-based schemaʼs",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13794244,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4be4511d91f7ff356d802a16ef006b575664287781dc1e9e8779b86b4412a0cd",
          "md5": "98f29a6e365eace888211ae7c5c410ca",
          "sha256": "754ee3968e039103f40d6be75e9fcd2c8d39c26351daa8dc3494630868872d28"
        },
        "downloads": -1,
        "filename": "hidden_pure_protobuf-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98f29a6e365eace888211ae7c5c410ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15509,
        "upload_time": "2022-05-12T12:53:49",
        "upload_time_iso_8601": "2022-05-12T12:53:49.951073Z",
        "url": "https://files.pythonhosted.org/packages/4b/e4/511d91f7ff356d802a16ef006b575664287781dc1e9e8779b86b4412a0cd/hidden_pure_protobuf-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ea967a1504558c846ddac5a5dfb8160fcc866c81bb9d1588bedda925eccf13e",
          "md5": "925dd3d5f9093aa89d97a6dd822c481d",
          "sha256": "4231f02aa75b2d10883102e04590f59c4e38dd42bc837ca20d7fbf6f3cfdb055"
        },
        "downloads": -1,
        "filename": "hidden-pure-protobuf-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "925dd3d5f9093aa89d97a6dd822c481d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12361,
        "upload_time": "2022-05-12T12:53:52",
        "upload_time_iso_8601": "2022-05-12T12:53:52.092841Z",
        "url": "https://files.pythonhosted.org/packages/3e/a9/67a1504558c846ddac5a5dfb8160fcc866c81bb9d1588bedda925eccf13e/hidden-pure-protobuf-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68e56390e82ce0a592e0fe5a0cb4924ecd1229482f5214e650fafc0d29b3ed1d",
          "md5": "f94ccee3b0cbf43f41f720b6cb0006df",
          "sha256": "a974f589715e25777c036aa77ea0fc243f801e03d0c261de71c8301bdabe7ef0"
        },
        "downloads": -1,
        "filename": "hidden_pure_protobuf-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f94ccee3b0cbf43f41f720b6cb0006df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17341,
        "upload_time": "2022-05-12T13:00:54",
        "upload_time_iso_8601": "2022-05-12T13:00:54.528025Z",
        "url": "https://files.pythonhosted.org/packages/68/e5/6390e82ce0a592e0fe5a0cb4924ecd1229482f5214e650fafc0d29b3ed1d/hidden_pure_protobuf-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd49f11ea798254a8584f9a2cc3891338b0f645b4e744a04c75e22e116682fa7",
          "md5": "19a358b70b966815bb1f56bf3ea864d3",
          "sha256": "ccee3efb201a2d10a856567911dccc8767eb73241c16f44817a7c10660a0d23c"
        },
        "downloads": -1,
        "filename": "hidden-pure-protobuf-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "19a358b70b966815bb1f56bf3ea864d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13919,
        "upload_time": "2022-05-12T13:00:56",
        "upload_time_iso_8601": "2022-05-12T13:00:56.351423Z",
        "url": "https://files.pythonhosted.org/packages/dd/49/f11ea798254a8584f9a2cc3891338b0f645b4e744a04c75e22e116682fa7/hidden-pure-protobuf-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68e56390e82ce0a592e0fe5a0cb4924ecd1229482f5214e650fafc0d29b3ed1d",
        "md5": "f94ccee3b0cbf43f41f720b6cb0006df",
        "sha256": "a974f589715e25777c036aa77ea0fc243f801e03d0c261de71c8301bdabe7ef0"
      },
      "downloads": -1,
      "filename": "hidden_pure_protobuf-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f94ccee3b0cbf43f41f720b6cb0006df",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17341,
      "upload_time": "2022-05-12T13:00:54",
      "upload_time_iso_8601": "2022-05-12T13:00:54.528025Z",
      "url": "https://files.pythonhosted.org/packages/68/e5/6390e82ce0a592e0fe5a0cb4924ecd1229482f5214e650fafc0d29b3ed1d/hidden_pure_protobuf-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd49f11ea798254a8584f9a2cc3891338b0f645b4e744a04c75e22e116682fa7",
        "md5": "19a358b70b966815bb1f56bf3ea864d3",
        "sha256": "ccee3efb201a2d10a856567911dccc8767eb73241c16f44817a7c10660a0d23c"
      },
      "downloads": -1,
      "filename": "hidden-pure-protobuf-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "19a358b70b966815bb1f56bf3ea864d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13919,
      "upload_time": "2022-05-12T13:00:56",
      "upload_time_iso_8601": "2022-05-12T13:00:56.351423Z",
      "url": "https://files.pythonhosted.org/packages/dd/49/f11ea798254a8584f9a2cc3891338b0f645b4e744a04c75e22e116682fa7/hidden-pure-protobuf-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}