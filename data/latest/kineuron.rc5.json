{
  "info": {
    "author": "Alejandro Martínez-Valencia",
    "author_email": "al.martinez.valencia@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "# Dynamics of Neuromuscular Transmission Reproduced by Calcium-Dependent and Reversible Serial Transitions in the Vesicle Fusion Complex\n\n## KiNeuron: Python implementation of the kinetic model of neuromuscular transmission dynamics.\n\n![](https://img.shields.io/static/v1?label=python&message=3.6%20|%203.7%20|%203.8%20|%203.9%20|%203.10&color=informational)\n[![](https://img.shields.io/static/v1?label=pypi%20package&message=v0.1.3&color=%2334D058)](https://pypi.org/project/kineuron/)\n![](https://img.shields.io/static/v1?label=test&message=passed&color=%2334D058)\n[![](https://img.shields.io/static/v1?label=DOI&message=10.3389/fnsyn.2021.785361&color=informational)](https://doi.org/10.3389/fnsyn.2021.785361)\n\nKiNeuron is an open-source implementation of our mechanistic kinetic model of neuromuscular transmission based on sequential maturation transitions in the molecular fusion complex.\n\nKiNeuron is:\n\n- **Simple** -- It is possible to simulate an alternative kinetic model with a few lines of code. This way, you can focus on the key parts of the problem that really matter.\n- **Flexible** -- It is possible to customise the kinetic model by adjusting the number of transition states, the kinetic transitions between states, as well as the rate constants. Further, KiNeuron allows the addition of a stimulation protocol.\n\n---\n\n- **Source Code**: <a href=\"https://github.com/alexini-mv/kinetic-neurotransmission\" target=\"_blank\">https://github.com/alexini-mv/kinetic-neurotransmission</a>\n- **Bug reports**: <a href=\"https://github.com/alexini-mv/kinetic-neurotransmission/issues\" target=\"_blank\">https://github.com/alexini-mv/kinetic-neurotransmission/issues</a>\n- **Citing in your work**: https://doi.org/10.3389/fnsyn.2021.785361\n\n---\n\n## Requirements\n\nKiNeuron requires:\n\n- python >= 3.6\n- graphviz >= 0.19.1\n- matplotlib >= 3.3.4\n- numpy >= 1.19.5\n- pandas >= 1.1.5\n- tqdm >= 4.62.3\n\nTo use the graph display functions of the model, it is necessary to install Graphviz backend for your OS as described in following [documentation](https://graphviz.org/download/).\n\n## Installation\n\nThere are two ways to install KiNeuron:\n\n1. Via PyPI repository (recommended):\n\n   - In your local workspace, create a new Python Virtual Environment with [venv](https://docs.python.org/3/library/venv.html) or [conda](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html).\n   - Install KiNeuron as follow:\n\n   ```console\n   $ python -m pip install -U kineuron\n   ```\n\n   - All dependencies are downloaded and installed. To verify that it has been installed correctly, you can check the following output:\n\n   ```console\n   $ python -c \"import kineuron; print(kineuron.__version__)\"\n   '0.1.3'\n   ```\n\n2. Via GitHub:\n\n   - Clone this project [repository](https://github.com/alexini-mv/kinetic-neurotransmission) to your local workspace.\n   - Create a new Python Virtual Environment with [venv](https://docs.python.org/3/library/venv.html) or [conda](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html).\n   - Install the required libraries from the file `requeriments.txt` into your virtual environment as follow:\n\n   ```console\n   $ python -m pip install -r requeriments.txt\n   ```\n\nYou are ready to use KiNeuron.\n\n## Usage Example\n\n### Creating a Model\n\nCreate a file `main.py` and import the following classes:\n\n```python\nfrom kineuron import (KineticModel, RateConstant, Solver, Stimulation,\n                      Transition, TransitionState)\n```\n\nThen, instantiate the model objects as follows:\n\n```python\nmodel = KineticModel(name='my-model', vesicles=100)\n\ndocked = TransitionState(name='Docked')\nfusion = TransitionState(name='Fusion')\n\nalpha = RateConstant(name=\"α\", value=0.3, calcium_dependent=True)\nbeta = RateConstant(name=\"β\", value=15)\n\ntransition1 = Transition(name='Transition 1',\n                 rate_constant=alpha,\n                 origin=\"Docked\",\n                 destination=\"Fusion\")\ntransition2 = Transition(name='Transition 2',\n                 rate_constant=beta,\n                 origin=\"Fusion\",\n                 destination=\"Docked\")\n```\n\nAdd all objects to the model as follow:\n\n```python\nmodel.add_transition_states([docked, fusion])\nmodel.add_transitions([transition1, transition2])\n```\n\nFinally, initialize the model:\n\n```python\nmodel.init()\n```\n\nLikewise, a stimulation protocol should be defined (if the experiment expects it) as follows:\n\n```python\nprotocol = Stimulation(\n     conditional_stimuli=5,\n     period=0.03,\n     time_start_stimulation=0.1,\n     tau_stimulus=0.0013,\n     time_wait_test=0.2,\n     intensity_stimulus=100.0,\n     type_stimulus='exponential_decay',\n     name=\"Custom Stimulation Protocol\")\n```\n\nThe following lines show the time profile of the stimulation protocol:\n\n```python\nimport numpy as np\n\nt = np.arange(0, 0.5, 0.0001)\nprotocol.plot(t)\n```\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/alexini-mv/kinetic-neurotransmission/main/docs/_static/protocol.png\" alt=\"Stimulation protocol\">\n</p>\n\n### Model Information (Optional)\n\nThe general model information can be obtained as follows:\n\n```python\nmodel.get_info()\n```\n\nand run the file main.py:\n\n```console\n$ python main.py\n\n==============  MODEL INFORMATION  ===============\nMODEL NAME:                   my-model\nTOTAL VESICLES:               100\nRESTING STATE:                False\n\nTRANSITION STATES             VESICLES\n- Docked:                     100\n- Fusion:                     0\n--------------------------------------------------\nNAME TRANSITION:              Transition 1\nRATE CONSTANT NAME:           α\nRATE CONSTANT VALUE:          0.3 s⁻¹\nCALCIUM-DEPENDENT:            True\nORIGIN:                       Docked\nDESTINATION:                  Fusion\n--------------------------------------------------\nNAME TRANSITION:              Transition 2\nRATE CONSTANT NAME:           β\nRATE CONSTANT VALUE:          15 s⁻¹\nCALCIUM-DEPENDENT:            False\nORIGIN:                       Fusion\nDESTINATION:                  Docked\n==================================================\n```\n\nThe following lines allow you to visualize the graph of the model:\n\n```python\ngraph = model.get_graph()\ngraph.view()\n```\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/alexini-mv/kinetic-neurotransmission/main/docs/_static/graph_model.png\" alt=\"Graph Model\">\n</p>\n\n### Run It\n\nThe Solver object that simulates the time evolution of the model must be instantiated. Here, we use an implementation of the [Gillespie Stochastic Algorithm (1977)](https://doi.org/10.1021/j100540a008).\n\n```python\nexperiment = Solver(model=model, stimulation=protocol)\n```\n\nBefore initiating the simulation, make sure to obtain the _**resting state**_ of the model, from which all repetitions of the experiment are starting. This is achieved as follows:\n\n```python\nexperiment.resting_state()\n```\n\nWith the following lines the experiment is ran. The results can be obtained and saved in a `.csv` file for further analysis.\n\n```python\nexperiment.run(repeat=1)\nresults = experiment.get_results(mean=True)\nresults.to_csv(\"results.csv\", index=True)\n```\n\nFinally, the `main.py` file should be executed to perform the complete simulation:\n\n```console\n$ python main.py\n```\n\n## Changelog\n\n- 0.1.3\n  - Fixed bug compatibility typing with python <= 3.8 versions.\n- 0.1.2\n  - Added an option to include the individual events of the transitions in the results.\n  - A quantitative criterion was added to find the resting state automatically.\n  - Added the ability to include an external custom function when instantiating the Stimulation object.\n- 0.1.1\n  - Added a progress bar when simulations are running.\n  - Fixed compatibility with pandas >=1.3.0 versions.\n  - Simplification of adding objects to the model. It is not necessary to\n    explicitly declare `KineticModel.add_rate_constants()` method.\n  - Added a _AssertionError_ if the model is not initialized.\n  - Bug fixed in the number of vesicles when calling two or more times `KineticModel.init()`\n    method.\n- 0.1.0\n  - Stable version released.\n- 0.0.1\n  - Work in progress.\n\n## Contributing\n\n- If you are interested in contributing to the project, please follow these guidelines:\n\n  1.  Fork it (https://github.com/alexini-mv/kinetic-neurotransmission).\n  2.  Create your feature branch:\n\n  ```console\n  $ git checkout -b feature/fooBar\n  ```\n\n  3.  Commit your changes:\n\n  ```console\n  $ git commit -am 'Add some fooBar'\n  ```\n\n  4.  Push to the branch:\n\n  ```console\n  $ git push origin feature/fooBar\n  ```\n\n  5.  Create a new Pull Request.\n\n- If you want to report a bug, please create a new issue [here](https://github.com/alexini-mv/kinetic-neurotransmission/issues) describing the error as clearly as possible.\n\n## Correspondence\n\nAuthor: Alejandro Martínez-Valencia <a href=\"https://github.com/alexini-mv\" target=\"_blank\"><img src=\"https://cdn-icons-png.flaticon.com/512/25/25231.png\" width=\"23\"></a>\n<a href=\"https://twitter.com/alexinimv\" target=\"_blank\"><img src=\"https://img.icons8.com/fluency/96/000000/twitter-squared.png\" width=\"25\"></a> <a href=\"https://www.linkedin.com/in/amartinezvalencia/\" target=\"_blank\"><img src=\"https://cdn-icons-png.flaticon.com/512/174/174857.png\" width=\"22\"></a>\n\nEmail: al.martinez.valencia@gmail.com\n\n## Citation\n\nIf you use our code for your research or scientific publication, we kindly ask you to refer to our work as follows:\n\n- Martínez-Valencia A., Ramírez-Santiago G. and De-Miguel F.F. (2022) _Dynamics of Neuromuscular Transmission Reproduced by Calcium-Dependent and Reversible Serial Transitions in the Vesicle Fusion Complex_. Front. Synaptic Neurosci. 13:785361. DOI: [10.3389/fnsyn.2021.785361](https://doi.org/10.3389/fnsyn.2021.785361)\n\n## License\n\nDistributed under the GNU General Public License. See `LICENSE` for more information.\n\n## Interesting Links\n\n- Perkel, Jeffrey M. (2022) _How to fix your scientific coding errors_. Nature 602, 172-173. DOI: [10.1038/d41586-022-00217-0](https://doi.org/10.1038/d41586-022-00217-0).\n- **Pylint**, a tool that checks for errors in Python code. [Tutorials and documentation](https://pylint.pycqa.org/en/latest/index.html).\n- **Autopep8**, a package automatically formats Python code to conform to the PEP 8 style guide. [Documentation](https://github.com/hhatto/autopep8).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alexini-mv/kinetic-neurotransmission",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kineuron",
    "package_url": "https://pypi.org/project/kineuron/",
    "platform": "",
    "project_url": "https://pypi.org/project/kineuron/",
    "project_urls": {
      "Bug Tracker": "https://github.com/alexini-mv/kinetic-neurotransmission/issues",
      "Homepage": "https://github.com/alexini-mv/kinetic-neurotransmission",
      "Source": "https://github.com/alexini-mv/kinetic-neurotransmission"
    },
    "release_url": "https://pypi.org/project/kineuron/0.1.3/",
    "requires_dist": [
      "graphviz (>=0.19.1)",
      "matplotlib (>=3.3.4)",
      "numpy (>=1.19.5)",
      "pandas (>=1.1.5)",
      "tqdm (>=4.62.3)"
    ],
    "requires_python": ">=3.6",
    "summary": "Python implementation of the kinetic model of neuromuscular transmission dynamics.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13030505,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c2e099c23c3284cb0c74bfb9d930a9452a71157fb33ea534ca8bb7b379fb193",
          "md5": "cf6726f7160414df6b28b922ddc555ee",
          "sha256": "a8b84d7770328c435da8fede59900010263d6e4e2b8d7f32d42933ef781b5131"
        },
        "downloads": -1,
        "filename": "kineuron-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf6726f7160414df6b28b922ddc555ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27239,
        "upload_time": "2022-02-14T06:28:27",
        "upload_time_iso_8601": "2022-02-14T06:28:27.386685Z",
        "url": "https://files.pythonhosted.org/packages/1c/2e/099c23c3284cb0c74bfb9d930a9452a71157fb33ea534ca8bb7b379fb193/kineuron-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f19efbe027c6c8cbbb7e1c24dd7c953766270bd04c3ffcae5ebff35245603e4c",
          "md5": "69992afd410fc4b07377b31860a7ae06",
          "sha256": "a87f6078990c846585464f2d8d96850d34b56b5f42dbb9e8bb64861c1398f42f"
        },
        "downloads": -1,
        "filename": "kineuron-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "69992afd410fc4b07377b31860a7ae06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27389,
        "upload_time": "2022-02-14T06:28:28",
        "upload_time_iso_8601": "2022-02-14T06:28:28.899646Z",
        "url": "https://files.pythonhosted.org/packages/f1/9e/fbe027c6c8cbbb7e1c24dd7c953766270bd04c3ffcae5ebff35245603e4c/kineuron-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb236eafdeee7b233f309a7c6cb897fa860a4d1f5536a042c6245d05ad93e118",
          "md5": "87031b0e295193f6687bd516f1a187b6",
          "sha256": "28efed431462db09b0f3e45ddf251efd37193d713361b6f43cb9c1bf16a004b7"
        },
        "downloads": -1,
        "filename": "kineuron-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87031b0e295193f6687bd516f1a187b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27463,
        "upload_time": "2022-02-18T03:17:17",
        "upload_time_iso_8601": "2022-02-18T03:17:17.720145Z",
        "url": "https://files.pythonhosted.org/packages/fb/23/6eafdeee7b233f309a7c6cb897fa860a4d1f5536a042c6245d05ad93e118/kineuron-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d5c9f414d253ae0657a115735c0595ec987f20ada940d6199c3ad049b408574",
          "md5": "bdbe7057e5dd4a7d9e981f3fc70cd3ca",
          "sha256": "756e518c9e1edbe52794dd6175c33b0176c580b7442e9afe00d828482a6c9e75"
        },
        "downloads": -1,
        "filename": "kineuron-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bdbe7057e5dd4a7d9e981f3fc70cd3ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27828,
        "upload_time": "2022-02-18T03:17:20",
        "upload_time_iso_8601": "2022-02-18T03:17:20.167711Z",
        "url": "https://files.pythonhosted.org/packages/5d/5c/9f414d253ae0657a115735c0595ec987f20ada940d6199c3ad049b408574/kineuron-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdc30a08be527164d733bdfa76114261d34e463d92773340cf67e04aa7ff48e6",
          "md5": "d450823efd982dafd24e255a85569fe9",
          "sha256": "c10124bf8ffef46ec214103052868afbf2ed7d1cb08fb7f33f8de0617ad6eac5"
        },
        "downloads": -1,
        "filename": "kineuron-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d450823efd982dafd24e255a85569fe9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27923,
        "upload_time": "2022-02-22T10:12:11",
        "upload_time_iso_8601": "2022-02-22T10:12:11.545459Z",
        "url": "https://files.pythonhosted.org/packages/bd/c3/0a08be527164d733bdfa76114261d34e463d92773340cf67e04aa7ff48e6/kineuron-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8692a6616ff1d33a6930a1245a2353a676cf9a6824360e4c18c467ee2c743286",
          "md5": "b7eb3d7c3dcf5be1c1780eaa48dc31d0",
          "sha256": "af98ddb528f5bb8112ec7e9b4db40e153362a0ac7db7a9fc305fef4b0366264a"
        },
        "downloads": -1,
        "filename": "kineuron-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b7eb3d7c3dcf5be1c1780eaa48dc31d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28400,
        "upload_time": "2022-02-22T10:12:13",
        "upload_time_iso_8601": "2022-02-22T10:12:13.694475Z",
        "url": "https://files.pythonhosted.org/packages/86/92/a6616ff1d33a6930a1245a2353a676cf9a6824360e4c18c467ee2c743286/kineuron-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d0da256271df816b09474ec047c9505e16cb243a072093d0e4559af7bc8d746",
          "md5": "fc6e687c84f4c756ce4797be0501bb4d",
          "sha256": "4567ab597d99a5dda165f956415717daba5e8e8e299245125bcf09580d23b5ca"
        },
        "downloads": -1,
        "filename": "kineuron-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc6e687c84f4c756ce4797be0501bb4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29514,
        "upload_time": "2022-02-27T11:24:17",
        "upload_time_iso_8601": "2022-02-27T11:24:17.182918Z",
        "url": "https://files.pythonhosted.org/packages/5d/0d/a256271df816b09474ec047c9505e16cb243a072093d0e4559af7bc8d746/kineuron-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c164e6cfb4fab2d025dc16f8904152d5533b71e43ada40dea39680738958163e",
          "md5": "23c0a6004e8858477422eea880c9fe3d",
          "sha256": "74dcb2a0f3710dc289f5d17179befddf0765bb0ce666d377d9ec366930ad81dc"
        },
        "downloads": -1,
        "filename": "kineuron-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "23c0a6004e8858477422eea880c9fe3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30101,
        "upload_time": "2022-02-27T11:24:19",
        "upload_time_iso_8601": "2022-02-27T11:24:19.390783Z",
        "url": "https://files.pythonhosted.org/packages/c1/64/e6cfb4fab2d025dc16f8904152d5533b71e43ada40dea39680738958163e/kineuron-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0707b7b5362eec4797fca4aae720b38a2d4bd67fc8df978f9b2b03378aa57e2",
          "md5": "7345bbad6eceb535407ad47f7179c0bb",
          "sha256": "fd305206175b2d6386d929c0d5729e0097dfad9927d55b468621c64a2bc87651"
        },
        "downloads": -1,
        "filename": "kineuron-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7345bbad6eceb535407ad47f7179c0bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29714,
        "upload_time": "2022-02-28T06:10:14",
        "upload_time_iso_8601": "2022-02-28T06:10:14.606409Z",
        "url": "https://files.pythonhosted.org/packages/a0/70/7b7b5362eec4797fca4aae720b38a2d4bd67fc8df978f9b2b03378aa57e2/kineuron-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d78fbd2eee18c5fde48128ac89aee12854dc7f118d04a1f7e4d8d27f0d9bbfbe",
          "md5": "49763c04448f894d590043e7b4e96bb3",
          "sha256": "2d436db2c214dab146bc1a0c2971adf31acb9d7da06c4c217f8ad9432185d6e3"
        },
        "downloads": -1,
        "filename": "kineuron-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "49763c04448f894d590043e7b4e96bb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30373,
        "upload_time": "2022-02-28T06:10:16",
        "upload_time_iso_8601": "2022-02-28T06:10:16.792546Z",
        "url": "https://files.pythonhosted.org/packages/d7/8f/bd2eee18c5fde48128ac89aee12854dc7f118d04a1f7e4d8d27f0d9bbfbe/kineuron-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0707b7b5362eec4797fca4aae720b38a2d4bd67fc8df978f9b2b03378aa57e2",
        "md5": "7345bbad6eceb535407ad47f7179c0bb",
        "sha256": "fd305206175b2d6386d929c0d5729e0097dfad9927d55b468621c64a2bc87651"
      },
      "downloads": -1,
      "filename": "kineuron-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7345bbad6eceb535407ad47f7179c0bb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 29714,
      "upload_time": "2022-02-28T06:10:14",
      "upload_time_iso_8601": "2022-02-28T06:10:14.606409Z",
      "url": "https://files.pythonhosted.org/packages/a0/70/7b7b5362eec4797fca4aae720b38a2d4bd67fc8df978f9b2b03378aa57e2/kineuron-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d78fbd2eee18c5fde48128ac89aee12854dc7f118d04a1f7e4d8d27f0d9bbfbe",
        "md5": "49763c04448f894d590043e7b4e96bb3",
        "sha256": "2d436db2c214dab146bc1a0c2971adf31acb9d7da06c4c217f8ad9432185d6e3"
      },
      "downloads": -1,
      "filename": "kineuron-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "49763c04448f894d590043e7b4e96bb3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30373,
      "upload_time": "2022-02-28T06:10:16",
      "upload_time_iso_8601": "2022-02-28T06:10:16.792546Z",
      "url": "https://files.pythonhosted.org/packages/d7/8f/bd2eee18c5fde48128ac89aee12854dc7f118d04a1f7e4d8d27f0d9bbfbe/kineuron-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}