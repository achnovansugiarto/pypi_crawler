{
  "info": {
    "author": "Klaudia Adamowicz",
    "author_email": "klaudia.adamowicz@uni-hamburg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<p align=\"center\">\n<img alt=\"ProHarMeD Logo\" src=\"https://github.com/symbod/proharmed/blob/main/Logo.png?raw=true\" width=\"500\" />\n</p>\n\n# ProHarMeD - Proteomic Meta-Study Harmonization, Mechanotyping and Drug Repurposing Prediction\n\n##Introduction\n<span style=\"color:red\">**TODO**</span>\n\nThis repository comprises four main harmonization functionalities:\n- filter protein IDs\n- remap gene names\n- reduce gene names\n- map orthologs\n\nAdditionally, it offers following meta anylsis functionalities:\n- intersection anaysis\n- disease mechanism mining and drug repurposing\n\nA detailed tutorial with example data on how to use the mqhandler python package can be found [here](https://github.com/symbod/MaxQuantHandler/blob/main/tutorial.ipynb).\n\n## Installation\n\n```shell\npip install mqhandler\n```\n\n## 1. Filter Protein IDs\n\nFor a protein assignment using MaxQuant, Fasta files are required. Since MaxQuant can also be used to run several data collectively, \nit can also happen that results are provided with protein IDs of several organisms.\n\nThis method makes it possible to check the protein IDs for their organism by directly accessing the Uniprot database, and to \nremove incorrectly assigned IDs. Additionally, decoy (REV_) and contaminants (CON_) IDs and/or unreviewed protein IDs can be removed.\n\nOne might be interested to know how many IDs were filtered out, in total and per row. Therefore, with this call, you can generate 2 data frames that display this information as a table.\n\nIn addition to the information as a table, it can also be displayed directly as plots with a simple call.\n\n\n#### 1.1 Imports\n```python\nimport pandas as pd\nfrom proharmed import filter_ids as fi\nfrom proharmed.mq_utils.runner_utils import find_delimiter\n```\n#### 1.2 Load Your Data\n```python\n# load data into a dataframe with automated delimiter finder\ndata = pd.read_table(file, sep=find_delimiter(<file>)).fillna(\"\")\n```\n#### 1.3 Set Preferences\n```python\n# mandatory\nprotein_column = \"Protein IDs\" # Name of column with protein IDs\n\n# optional\norganism = \"rat\" # Specify organism the IDs should match to\nrev_con = False # Bool to indicate if protein IDs from decoy (REV__) and contaminants (CON__) should be kept\nreviewed = False # Bool to indicate if newly retrieved protein IDS should be reduced to reviewed ones\nkeep_empty = False # Bool to indicate if empty ID cells should be kept or deleted\nres_column = None # Name of column for filer protein IDs results. If None, the protein_column will be overridden\n```\n#### 1.4 Run filter_protein_ids\n```python\nfi_data, fi_log_dict = fi.filter_protein_ids(data = data, protein_column = protein_column, \n                                             organism = organism, rev_con = rev_con, keep_empty = keep_empty, \n                                             reviewed = reviewed, res_column = res_column)\n```\n\n#### 1.5 Inspect Logging\n```python\nfrom proharmed.mq_utils import plotting as pt\npt.create_overview_plot(fi_log_dict[\"Overview_Log\"], out_dir = out_dir)\npt.create_filter_detailed_plot(fi_log_dict[\"Detailed_Log\"], organism = organism, \n                               reviewed = reviewed, decoy = rev_con, out_dir = out_dir)\n```\n\n\n## 2. Remap Gene Names\n\nBesides protein IDs, gene names are also taken out of the respective Fasta files and mapped. These are needed for easier naming in plots and in analytical procedures such as enrichment analysis. Unfortunately, Fasta files are not always complete in terms of gene names.\n\nThis method makes it possible to retrieve the assigned gene names based on the protein IDs with direct access to the Uniprot database and to fill the empty entries in the user file or even replace existing entries. There are multiple possible modes for which names should be taken.\n\nHere, too, it is possible to subsequently obtain information on how many gene names were found for how many rows.\n\n#### 2.1 Imports\n```python\nimport pandas as pd\nfrom proharmed import remap_genenames as rmg\nfrom proharmed.mq_utils.runner_utils import find_delimiter\n```\n#### 2.2 Load Your Data\n```python\n# load data into a dataframe with automated delimiter finder\ndata = pd.read_table(file, sep=find_delimiter(<file>)).fillna(\"\")\n```\n#### 2.3 Set Preferences\n```python\n# mandatory\nmode = \"uniprot_primary\" # Mode of refilling. See below for more infos.\nprotein_column = \"Protein IDs\" # Name of column with protein IDs\n\n# optional\ngene_column = \"Gene names\" # Name of column with gene names\nskip_filled = False # Bool to indicate if already filled gene names should be skipped\norganism = \"rat\" # Specify organism the IDs should match to\nfasta = None # Path of Fasta file when mode all or fasta\nkeep_empty = False # Bool to indicate if empty gene names cells should be kept or deleted\nres_column = None # Name of column for remap gene names results. If None, the gene_column will be overridden\n```\nModes of refilling:\n- all: use primarily fasta infos and additionally uniprot infos\n- fasta: use information extracted from fasta headers\n- uniprot: use mapping information from uniprot and use all gene names\n- uniprot_primary: use mapping information from uniprot and only all primary gene names\n- uniprot_one: use mapping information from uniprot and only use most frequent single gene name\n\n#### 2.4 Run remap_genenames\n```python\nrmg_data, rmg_log_dict = rmg.remap_genenames(data = data, mode=mode, protein_column = protein_column,\n                                            gene_column = gene_column, skip_filled = skip_filled, organism = organism, \n                                             fasta = fasta, keep_empty = keep_empty, res_column = res_column)\n```\n\n## 3. Reduce Gene Names\nA well-known problem with gene symbols is that they are not unique and slight changes in spelling can lead to problems. Often there are different gene symbols for the same gene in UniProt. Depending on which protein IDs you used to get the gene symbol, you can get multiple gene symbols for the same gene by using the previous remap function.\n\nThis method makes it possible to reduce the gene symbols to a common gene symbol using different features and databases, thus preventing redundancy. There are multiple possible modes for which names should be taken.\n\nHere, too, it is possible to subsequently obtain information on how many gene names were reduced for how many rows. This can also be displayed as a plot with a simple call.\n\n#### 3.1 Imports\n```python\nimport pandas as pd\nfrom proharmed import reduce_genenames as rdg\nfrom proharmed.mq_utils.runner_utils import find_delimiter\n```\n\n#### 3.2 Load Your Data\n```python\n# load data into a dataframe with automated delimiter finder\ndata = pd.read_table(file, sep=find_delimiter(<file>)).fillna(\"\")\n```\n\n#### 3.3 Set Preferences\n```python\n# mandatory\nmode = \"ensembl\" # Mode of reduction. See below for more infos-\ngene_column = \"Gene names\" # Name of column with gene names\norganism = \"rat\" # Specify organism the IDs should match to\n\n# optional\nres_column = False # Name of column of reduced gene names results. If None, the gene_column will be overridden\nkeep_empty = False # Bool to indicate if empty reduced gene names cells should be kept or deleted\nHGNC_mode = None # Mode on how to reduce the gene names using HGNC (mostfrequent, all)\n```\n\nModes of reduction:\n - ensembl: use gProfiler to reduce gene names to those having an Ensembl ID\n - HGNC: use HGNC database to reduce gene names to those having an entry in HGNC (only for human)\n - mygeneinfo: Use mygeneinfo database to reduce gene names to those having an entry in mygeneinfo\n - enrichment: Use gProfiler to reduce gene names to those having a functional annotation\n \n\n#### 3.4 Run reduce_genenames\n```python\nrdg_data, rdg_log_dict = rdg.reduce_genenames(data = rmg_data, mode = mode, gene_column = gene_column, \n                                              organism = organism, res_column = res_column, keep_empty = keep_empty,\n                                             HGNC_mode = HGNC_mode)\n```\n\n#### 3.5 Inspect Logging\n```python\nfrom proharmed.mq_utils import plotting as pt\npt.create_overview_plot(rdg_log_dict[\"Overview_Log\"], out_dir = out_dir)\npt.create_reduced_detailed_plot(rdg_log_dict[\"Detailed_Log\"], out_dir = out_dir)\n```\n\n\n\n## 4. Get Orthologs\n\nSuppose you want to compare data between organisms, for example if you want to do a review across several species, you come across a known problem. Gene names differ between species, making it necessary to map all IDs to a selected organism through an ortholog mapping.\n\nUsing the commonly used gProfiler, this method simply maps the gene names from the current organism to the target organism.\n\nUnfortunately, depending on the original and target organism, there are more or less cases where no orthologous gene could be found. For a simplified overview of how many cases this was the case, this method can be used to obtain this information.\n\nAs with the previous tasks, the log information can be displayed in plots.\n\n\n#### 3.1 Imports\n```python\nimport pandas as pd\nfrom proharmed import map_orthologs as mo\nfrom proharmed.mq_utils.runner_utils import find_delimiter\n```\n\n#### 3.2 Load Your Data\n```python\n# load data into a dataframe with automated delimiter finder\ndata = pd.read_table(file, sep=find_delimiter(<file>)).fillna(\"\")\n```\n\n#### 3.3 Set Preferences\n```python\n# mandatory\ngene_column = \"Gene names\" # Name of column with gene names\nsource_organism = \"rat\" # Specify organism the IDs match to\ntar_organism = \"human\" # Specify organism the IDs should me mapped to\n\n# optional\nkeep_empty = False # Bool to indicate if empty ortholog gene names cells should be kept or deleted\nres_column = None # Name of column of orthologs gene names results. If None, the gene_column will be overridden```\n```\n\n#### 3.4 Run map_orthologs\n```python\nmo_data, mo_log_dict = mo.map_orthologs(data = data, gene_column = gene_column, organism = source_organism,\n                                           tar_organism = tar_organism, keep_empty = keep_empty, \n                                            res_column = res_column)\n```\n\n#### 3.5 Inspect Logging\n```python\nfrom proharmed.mq_utils import plotting as pt\npt.create_overview_plot(mo_log_dict[\"Overview_Log\"], out_dir = out_dir)\npt.create_ortholog_detailed_plot(mo_log_dict[\"Detailed_Log\"], organism = organism, out_dir = out_dir)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/proharmed/",
    "keywords": "",
    "license": "LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "proharmed",
    "package_url": "https://pypi.org/project/proharmed/",
    "platform": null,
    "project_url": "https://pypi.org/project/proharmed/",
    "project_urls": {
      "Homepage": "http://pypi.python.org/pypi/proharmed/"
    },
    "release_url": "https://pypi.org/project/proharmed/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Collection of scripts for ProHarMeD",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16703030,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03eae39d50227bf4b771106d914439958e9fe18c39d908b833f33c35114f3788",
          "md5": "374f3c08c7550ca190ca196993fc4c8c",
          "sha256": "7eb3f581e0abc862d7954d64f0252f5af63c9d65cc6fa53b06cfd7b748bbc2e2"
        },
        "downloads": -1,
        "filename": "proharmed-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "374f3c08c7550ca190ca196993fc4c8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33952,
        "upload_time": "2023-02-02T09:15:54",
        "upload_time_iso_8601": "2023-02-02T09:15:54.243075Z",
        "url": "https://files.pythonhosted.org/packages/03/ea/e39d50227bf4b771106d914439958e9fe18c39d908b833f33c35114f3788/proharmed-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "317bc08f15aaaf0257f995656b782fb206db54873eada9b1eba60852f82682bb",
          "md5": "273e6a360f4ebdcefa1ec9ad4fd7f752",
          "sha256": "e1756a06d4c38929b4c5bcb3995053012e76be8385cd124a4b50bc8a504d5947"
        },
        "downloads": -1,
        "filename": "proharmed-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "273e6a360f4ebdcefa1ec9ad4fd7f752",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33977,
        "upload_time": "2023-02-03T15:20:43",
        "upload_time_iso_8601": "2023-02-03T15:20:43.268788Z",
        "url": "https://files.pythonhosted.org/packages/31/7b/c08f15aaaf0257f995656b782fb206db54873eada9b1eba60852f82682bb/proharmed-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2b9cdc693103318326a80d95dbd09e9568d84fb8b3dd289cfca201875feb948",
          "md5": "9b98390504dc79170a3a5b367ba3837e",
          "sha256": "76441c3ba63b8a26d34c12eedb182438263853e8498c313b117b5c1fd7fd3df6"
        },
        "downloads": -1,
        "filename": "proharmed-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9b98390504dc79170a3a5b367ba3837e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33987,
        "upload_time": "2023-02-03T15:33:01",
        "upload_time_iso_8601": "2023-02-03T15:33:01.064076Z",
        "url": "https://files.pythonhosted.org/packages/b2/b9/cdc693103318326a80d95dbd09e9568d84fb8b3dd289cfca201875feb948/proharmed-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebcb1283c029b9e9d84388a320d08a31a1762aa602e9440369332e33af5e9557",
          "md5": "cef506b163aa2ea826d982e5a2731e26",
          "sha256": "8200737be2a12cd21d42dc443021bd4a895c00229d6c3141239938673df9263e"
        },
        "downloads": -1,
        "filename": "proharmed-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cef506b163aa2ea826d982e5a2731e26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34014,
        "upload_time": "2023-02-05T18:58:03",
        "upload_time_iso_8601": "2023-02-05T18:58:03.075577Z",
        "url": "https://files.pythonhosted.org/packages/eb/cb/1283c029b9e9d84388a320d08a31a1762aa602e9440369332e33af5e9557/proharmed-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ebcb1283c029b9e9d84388a320d08a31a1762aa602e9440369332e33af5e9557",
        "md5": "cef506b163aa2ea826d982e5a2731e26",
        "sha256": "8200737be2a12cd21d42dc443021bd4a895c00229d6c3141239938673df9263e"
      },
      "downloads": -1,
      "filename": "proharmed-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "cef506b163aa2ea826d982e5a2731e26",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 34014,
      "upload_time": "2023-02-05T18:58:03",
      "upload_time_iso_8601": "2023-02-05T18:58:03.075577Z",
      "url": "https://files.pythonhosted.org/packages/eb/cb/1283c029b9e9d84388a320d08a31a1762aa602e9440369332e33af5e9557/proharmed-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}