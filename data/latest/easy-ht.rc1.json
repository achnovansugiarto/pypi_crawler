{
  "info": {
    "author": "Angelica Lo Duca",
    "author_email": "angelica.loduca@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# Easy Hypothesis Test\n\nA Python package for easy Hypothesis Tests\n## Authors\n\n- [@alod83](https://www.github.com/alod83)\n\n  \n## Installation\n\nInstall my-project with npm\n\n```bash\n  pip install easy-ht\n```\n\n## Requirements\n\n* scipy\n* statsmodels\n* jupyter-lab (optional)\n    \n## Usage/Examples\n\nFor examples, check the folder examples, containing some Jupyter Notebooks to get started.\n\n  \n## Documentation\n\nThe easy_ht package contains a basic class, called `HypothesisTest`.\n\n### HypothesisTest\n\nA class used to calculate Hypothesis Tests, including both one sample and two sample tests.\n\n\n**Methods**\n\n* **check_normality(self,alpha = 0.05)** Check if samples are follow a normal distribution, using the Shapiro test.\n* **check_correlation(self, alpha = 0.05)**\n        Check if samples are correlated. It can be used only in two samples tests.\n* **check_randomness(self, alpha = 0.05, cutoff='mean')**\n        Check if the sample has been built in a random way.\n* **compare_means(self, value = None, alpha = 0.05, n = 50)**\n        In one sample test, compare the sample to an expected value. In two samples test, compare the mean of the two samples.\n* **compare_distributions(self, alpha = 0.05, cdf = None, args=(), freq = False)**\n        In one sample test, compare the sample to a distribution. In two samples tests, compare the distributions of the two samples.\n\n#### __init__(self,x, y = None, verbose = False, alpha = 0.05):\n**Parameters**\n* **x : array_like**\nthe (first) sample to be analysed\n       \n*  **y : array_like, optional**\nthe second sample to be analysed\n\n* **verbose : bool, optional, default = False**\nenable debug messages\n\n* **alpha : float, optional, default = 0.05****\nthe significance level\n\n#### check_normality(self,alpha = 0.05)\nCheck if samples follow a normal distribution, according to the Shapiro test. \nIn case of two samples, check if both the samples follow a normal distribution.\n\n**Parameters**\n\n* **alpha : float, optional, default = 0.05**\nthe significance level\n\n**Returns**\n\n* bool\n\nTrue, if the sample of both the samples follow a normal distribution. False, otherwise.\n\n### check_correlation(self, alpha = 0.05)\nCheck if samples are correlated. If samples follow a normal distribution, the Pearson Correlation Coefficient is used, otherwise the Spearman Rank Correlation is used. \nThis is a simple test, which does not return the statistics. Correlation is calculated only on the basis of p-value.\n\n**Parameters**\n\n* **alpha : float, optional, default = 0.05**\nthe significance level\n\n**Returns**\n* bool or None\n\nTrue, if samples are correlated, False otherwise. \nNone is returned in the case that the second sample has not been set.\n\n### check_randomness(self, alpha = 0.05, cutoff='mean'):\nCheck if the sample has been generated in a random way.\n    \n**Parameters**\n\n* **alpha : float, optional, default = 0.05**\nthe significance level\n\n* **cutoff : {'mean', 'median'} or number, optional, default = 'mean'**\nthe cutoff to split the data into large and small values.\n\n**Returns**\n* bool\n\nTrue, if the sample has been generated in a random way. False, otherwise.\n\n### compare_means(self, value = None, alpha = 0.05, n = 50)\nCompare the sample mean to a theoretical value, or compare samples means. \nIf samples follow a normal distribution, the t-test is used if the number of samples is less than n.\nThe z-test, otherwise. If the samples are not normal, the Wilcoxon test is used.\n        \n**Parameters**\n\n* **value : float, optional**\nthe theoretical value to be compared, in case of one sample\n\n* **alpha : float, optional, default = 0.05**\nthe significance level\n* **n : int, optional, default = 50**\na number used to discriminate if a sample is small or big. \nif sample size <= n, t-test is used, otherwise z-test is used.  \n\n**Returns**\n* bool\nTrue, if the sample means is similar to the theoretical value or the two samples means are similar. \nFalse, otherwise.\n  \n### compare_distributions(self, alpha = 0.05, cdf = None, args=(), freq = False):\nCompare the sample distribution to a given cdf (cumulative distribution function), if one sample is provided.\nThe Kolmogorov-Smirnov Test is used.\nCompare the samples distribution, if two samples are provided. \nIn this case, the Chi Square test is used.\n\n**Parameters**\n* **alpha : float, optional, default = 0.05**\nthe significance level\n\n* **cdf : str, array_like or callable**\nif array_like, it is an array of observations of random variables, and the two-sample test is performed. \nIf a callable, that callable is used to calculate the cdf. \nIf a string, it should be the name of a distribution in scipy.stats, which will be used as the cdf function. \n        \n* **args : tuple, sequence, optional**\ndistribution parameters, used cdf is string or callables.\n\n* **freq : bool, optional, default = False**\nspecify if the sample is an array of frequencies. \nThis is used to discriminate if using the Chi Square Test or Kolmogorov-Smirnov Test.\n        \n**Returns**\n\n* bool or None\nTrue, if the sample follows the specified distribution or the two samples follow the same distribution. \nFalse, otherwise. If error, return None.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alod83/easy-ht",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easy-ht",
    "package_url": "https://pypi.org/project/easy-ht/",
    "platform": "",
    "project_url": "https://pypi.org/project/easy-ht/",
    "project_urls": {
      "Bug Tracker": "https://github.com/alod83/easy-ht/issues",
      "Homepage": "https://github.com/alod83/easy-ht"
    },
    "release_url": "https://pypi.org/project/easy-ht/0.0.1/",
    "requires_dist": [
      "scipy",
      "statsmodels (>=0.10)"
    ],
    "requires_python": ">=3.6",
    "summary": "A Python package for easy Hypothesis Tests",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11216317,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b54eda8fa0043c39d5c485c4bd0e237d6a02cf48ccf5521a0ef62f25272565c4",
          "md5": "bb0211cd63e442144cf3056c3a6743fa",
          "sha256": "f6c048bc8451d93b574cab1d7c44bc0e19b180378df0d3524c7932880ca02875"
        },
        "downloads": -1,
        "filename": "easy_ht-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb0211cd63e442144cf3056c3a6743fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3646,
        "upload_time": "2021-08-18T22:58:11",
        "upload_time_iso_8601": "2021-08-18T22:58:11.163306Z",
        "url": "https://files.pythonhosted.org/packages/b5/4e/da8fa0043c39d5c485c4bd0e237d6a02cf48ccf5521a0ef62f25272565c4/easy_ht-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55cc85e83f8d8fb202c802132312e284c56b8c3dc6bf57db39ad200382bc52aa",
          "md5": "dc8c77145a6a64c852307d0493a69311",
          "sha256": "9258dcd4e6bbb6f1ed8d74960a569749de47acf944cbf0cf983c99ff5c70c513"
        },
        "downloads": -1,
        "filename": "easy-ht-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dc8c77145a6a64c852307d0493a69311",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3724,
        "upload_time": "2021-08-18T22:58:12",
        "upload_time_iso_8601": "2021-08-18T22:58:12.638373Z",
        "url": "https://files.pythonhosted.org/packages/55/cc/85e83f8d8fb202c802132312e284c56b8c3dc6bf57db39ad200382bc52aa/easy-ht-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b54eda8fa0043c39d5c485c4bd0e237d6a02cf48ccf5521a0ef62f25272565c4",
        "md5": "bb0211cd63e442144cf3056c3a6743fa",
        "sha256": "f6c048bc8451d93b574cab1d7c44bc0e19b180378df0d3524c7932880ca02875"
      },
      "downloads": -1,
      "filename": "easy_ht-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb0211cd63e442144cf3056c3a6743fa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3646,
      "upload_time": "2021-08-18T22:58:11",
      "upload_time_iso_8601": "2021-08-18T22:58:11.163306Z",
      "url": "https://files.pythonhosted.org/packages/b5/4e/da8fa0043c39d5c485c4bd0e237d6a02cf48ccf5521a0ef62f25272565c4/easy_ht-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55cc85e83f8d8fb202c802132312e284c56b8c3dc6bf57db39ad200382bc52aa",
        "md5": "dc8c77145a6a64c852307d0493a69311",
        "sha256": "9258dcd4e6bbb6f1ed8d74960a569749de47acf944cbf0cf983c99ff5c70c513"
      },
      "downloads": -1,
      "filename": "easy-ht-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dc8c77145a6a64c852307d0493a69311",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3724,
      "upload_time": "2021-08-18T22:58:12",
      "upload_time_iso_8601": "2021-08-18T22:58:12.638373Z",
      "url": "https://files.pythonhosted.org/packages/55/cc/85e83f8d8fb202c802132312e284c56b8c3dc6bf57db39ad200382bc52aa/easy-ht-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}