{
  "info": {
    "author": "Viraj Neji",
    "author_email": "unanneji@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Welcome in Neji!\n===================\n\n\n\n\n> **Note: (For Cloud Storage)**\n\n> - We can not give assurance about security due to hoster's policies.\n> - This is package mainly used to upload your file into online world.\n> - This will help you to send the your file in directory into online world.\n> - This package uses the some extra site in order to cloud store.\n> - Transfer will be secured.\n\n### Features\n\n- Cloud storage for free by this module.\n- Create Graphical user interface by this module. (Combine web technology and python usage)\n\n# Help\n```python\n\"\"\"\n    Run this code for more detailed information\n\"\"\"\nfrom neji import Help\nal = Help()\nal.author()\nal.version()\nal.example()\nal.CloudStorage()\nal.Frame()\nal.OpenPort()\nal.PortGui()\n```\nHere you will get help with example.\n\n\n# Example\n```python\n#####################################################\n################    Example     #####################\n#####################################################\n\"\"\" imported module\"\"\"\nfrom neji import PortGui,OpenPort\nfrom flask import Flask\napp = Flask(__name__)\n\n\"\"\"checking open random port\"\"\"\na = OpenPort().FindOpenPort()\n\n@app.route(\"/\")\ndef al():\n    return \"<title>\"+str(a)+\"</title>Hello World\"\n\n# Launch window when server is started, kill server when window killed\nPortGui(port=a,width=100,frequency=2).AsyncRun()\n# Running asynchronus-ly\n\n# start sever\napp.run(port=a,debug=True)\n\n\n'''\nFor django like or any localserver, you can use this logic:\n1. import respective module\n2. start infinite loop too run (don't consider indentation)\n    while True:\n        a = OpenPort().AnyPortExist(host_=\"localhost\",port_=8080,silent_=False)\n        if a:\n            break\n    PortGui(port=a).AsyncRun()\n3. when port get existed, Window will launch\n4. server will killed by this module itself for security\n5. NOTE :: Giving port number is essential. (start from :5000,max limit of port : 65,535)\n'''\n```\nTitle of opened software will determined by title tag.\nIcon of software determined by Favicon icon.\n\n\n\n# Cloud storage\n```python\n##############################################\n############  CloudStorage   #################\n##############################################\n\n\na = CloudStorage(file_path,silent=False)\n# file_path             ==> Give local file path which you want to upload\n# If silent             ==> True -> Does not print anything related it\n\n# # Total method available : 1\n    # 1. upload()\n\"\"\"\nignore indentation\neg.1 -> upload()\n\n    a = CloudStorage(\"C:\\\\Users\\\\Viraj...\\\\longhorn.tt\")\n    print(a.upload())\n\n        >> https://...\n        # return link\n        \"\"\"\n```\nGive valid file path, It will upload. (Ingnore indentation)\n\n\n# PortGui\n```python\n\n####################################################\n###############   PortGui        ###################\n####################################################\n\n\na = PortGui(host=\"localhost\",port=8080,fullscreen=False,width=600,height=400,maximized=False,silent=False,frequency=1)\n# host                  ==> Give host name -> str\n# port                  ==> Give port name -> int\n# fullscreen            ==> If you want fullscreen, Make this true -> Boolean\n# width                 ==> Give width number -> int\n# height                ==> Give height number -> int\n# maximized             ==> If you want maximized, Make this true -> Boolean\n# silent                ==> If you want silent, Make this true -> Boolean\n# frequency             ==> frequecy of check port in second -> float\n\n\"\"\"\n# # Total method available : 2\n    # 1. SyncRun()\n    # 2. AsyncRun()\n\neg.1 -> SyncRun()\n\n    a = PortGui(port=13131).SyncRun()\n    # This function use is not recommanded\n    # This means synchronus run which blocks your code\n\n\n\neg.2 -> AsyncRun()\n\n    a = PortGui(port=13131).AsyncRun()\n    # This function use is recommanded\n    # This means Asynchronus run which won't blocks your code\n    # Window will launch\n    # Server will kill after closing window\"\"\"\n```\n\n\n# Frame\n```python\n\n#################################################\n################    Frame       #################\n#################################################\n\n\na = Frame()\n\"\"\"\n# # Total method available : 1\n    # 1. ChromeHunter()\n\neg.1  -> ChromeHunter()\n\n    a = Frame().ChromeHunter()\n    print(a)\n\n        >> L:\\...\\chrome.exe -> str\n        # return chrome path\"\"\"\n```\n\n\n\n# OpenPort\n```python\n###############################################\n################    OpenPort     ##############\n###############################################\n\na = OpenPort(host='localhost',start_port_number=5500,end_port_number=65000,silent=False)\n# host                  ==> Give host name\n# start_port_number     ==> Give number from which you want to start port\n# end_port_number       ==> Give number from which you want to end (max. limit : \"65,535\")\n\n\"\"\"\n# Total methods available : 3\n    # 1. AnyPortExist(host_=\"localhost\",port_=8080,silent_=False)\n    # 2. FindOpenPort()\n    # 3. QuiteServer()\n\neg.1    -> AnyPortExist(host_=\"localhost\",port_=8080,silent_=False)\n\n    a = OpenPort().AnyPortExist(host_=\"localhost\",port_=8080,silent_=False)\n    print(a)\n    # if a -> True -> Port is using; else reverse\n    # If silent -> True -> Does not print anything related it\n\n\neg.2    -> FindOpenPort()\n    a = OpenPort().FindOpenPort()\n    print(a)\n    # This will give port which is open, randomly selected\n\n\neg.3    -> QuiteServer()\n    a = OpenPort().QuiteServer()\n    # This will quite server\"\"\"\n```\n\n\n\n\n## Code Contributing\nPull requests, we are welcome. For major changes, please open an issue first to discuss what you would like to change. \nContact us to improvement this package on:\n**unanneji@gmail.com** \n\nyour are welcome to our improvement.\nPlease make sure to update tests as appropriate.\n\n\n## License\nDeveloped by **Viraj Basavaraj Neji**\n\nContact on: unanneji@gmail.com (We will try.)\n\n**MIT**\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neji",
    "package_url": "https://pypi.org/project/neji/",
    "platform": "",
    "project_url": "https://pypi.org/project/neji/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/neji/0.0.1.0/",
    "requires_dist": [
      "requests",
      "whichcraft"
    ],
    "requires_python": "",
    "summary": "Cloud Storage and GUI Framework",
    "version": "0.0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8641322,
  "releases": {
    "0.0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22b05b1213686f348e1930ab9f28befe3d08cd5c7c452959409befe66bb93594",
          "md5": "e9a40a97d23528153f0f0a11ee6b3ed4",
          "sha256": "b9fa780dcb4aaaa9ab35867315d47ce42830b5e09c07d4203bc8fb11049f5d63"
        },
        "downloads": -1,
        "filename": "neji-0.0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9a40a97d23528153f0f0a11ee6b3ed4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2547,
        "upload_time": "2020-01-23T17:22:31",
        "upload_time_iso_8601": "2020-01-23T17:22:31.778764Z",
        "url": "https://files.pythonhosted.org/packages/22/b0/5b1213686f348e1930ab9f28befe3d08cd5c7c452959409befe66bb93594/neji-0.0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95aa681a0fd0ff5117327b6e8a2af54e7b04e68fc2601cb832a4c9e83990718d",
          "md5": "a4045eb7a076e0e3d9159743d380bf8d",
          "sha256": "8df29a62a9d358a3955e59e53e485b187766118046e2ef704e5e0d9e1935545a"
        },
        "downloads": -1,
        "filename": "neji-0.0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4045eb7a076e0e3d9159743d380bf8d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7893,
        "upload_time": "2020-11-12T12:22:59",
        "upload_time_iso_8601": "2020-11-12T12:22:59.803773Z",
        "url": "https://files.pythonhosted.org/packages/95/aa/681a0fd0ff5117327b6e8a2af54e7b04e68fc2601cb832a4c9e83990718d/neji-0.0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f0c36b742255163f0571ba79128146ab49cfab4b81d3c7002f47f85d5ad9712",
          "md5": "af8fb6e2897ea150bb39ff445a017495",
          "sha256": "a2152f2f385bbf2e66cf66f2d9afd0f647b8c7801cf6e677aeda2e7fa819e7e8"
        },
        "downloads": -1,
        "filename": "neji-0.0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "af8fb6e2897ea150bb39ff445a017495",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6299,
        "upload_time": "2020-11-12T12:23:01",
        "upload_time_iso_8601": "2020-11-12T12:23:01.772771Z",
        "url": "https://files.pythonhosted.org/packages/4f/0c/36b742255163f0571ba79128146ab49cfab4b81d3c7002f47f85d5ad9712/neji-0.0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95aa681a0fd0ff5117327b6e8a2af54e7b04e68fc2601cb832a4c9e83990718d",
        "md5": "a4045eb7a076e0e3d9159743d380bf8d",
        "sha256": "8df29a62a9d358a3955e59e53e485b187766118046e2ef704e5e0d9e1935545a"
      },
      "downloads": -1,
      "filename": "neji-0.0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a4045eb7a076e0e3d9159743d380bf8d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7893,
      "upload_time": "2020-11-12T12:22:59",
      "upload_time_iso_8601": "2020-11-12T12:22:59.803773Z",
      "url": "https://files.pythonhosted.org/packages/95/aa/681a0fd0ff5117327b6e8a2af54e7b04e68fc2601cb832a4c9e83990718d/neji-0.0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f0c36b742255163f0571ba79128146ab49cfab4b81d3c7002f47f85d5ad9712",
        "md5": "af8fb6e2897ea150bb39ff445a017495",
        "sha256": "a2152f2f385bbf2e66cf66f2d9afd0f647b8c7801cf6e677aeda2e7fa819e7e8"
      },
      "downloads": -1,
      "filename": "neji-0.0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "af8fb6e2897ea150bb39ff445a017495",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6299,
      "upload_time": "2020-11-12T12:23:01",
      "upload_time_iso_8601": "2020-11-12T12:23:01.772771Z",
      "url": "https://files.pythonhosted.org/packages/4f/0c/36b742255163f0571ba79128146ab49cfab4b81d3c7002f47f85d5ad9712/neji-0.0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}