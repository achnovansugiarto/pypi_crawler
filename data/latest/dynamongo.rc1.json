{
  "info": {
    "author": "Musyoka Morris",
    "author_email": "musyokamorris@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "********************************************\ndynamongo: Pythonic DynamoDB models\n********************************************\n\n**dynamongo** is Python ORM/framework-agnostic library for DynamoDB.\nIt is highly inspired by the PyMongo project.\nThis documentation attempts to explain everything you need to know to use dynamongo.\n\n.. code-block:: python\n\n    import datetime\n    from dynamongo import Model, Connection\n    from dynamongo import IntField, StringField, ListField, EmailField, DateTimeField\n\n    # This only need be called once. Alternatively, it can be set using env variables\n    Connection.set_config(\n        access_key_id='<KEY>',\n        secret_access_key='<SECRET>',\n        table_prefix='test-'\n    )\n\n\n    class User(Model):\n        __table__ = 'users'\n        __hash_key__ = 'email'\n\n        email = EmailField(required=True)\n        name = StringField(required=True)\n        year_of_birth = IntField(max_value=2018, min_value=1900)\n        cities_visited = ListField(StringField)\n        created_at = DateTimeField(default=datetime.datetime.now)\n\n\n    # store data to DynamoDB\n    john = User.save_one({\n        'email': 'johndoe@gmail.com',\n        'name': 'John Doe',\n        'year_of_birth': 1990,\n        'cities_visited': ['Nairobi', 'New York']\n    })\n\n    # year_of_birth, cities_visited & created_at are all optional\n    jane = User.save_one({\n        'email': 'jane@gmail.com',\n        'name': 'Jane Doe'\n    })\n\n    # Access attribute values\n    print(john.name)\n\n    # Fetch data from dynamoDB\n    user = User.get_one(User.email == 'johndoe@gmail.com')\n    print(user.to_dict())\n\n\nIn short, dynamongo models can be used to easily:\n\n- **validate** input data\n- **save** serialized data to DynamoDB\n- **read** and deserialize data from DynamoDB\n- **delete** items from DynamoDB\n- **update** data in DynamoDB\n\n\nGet It Now\n==========\n\n::\n\n    $ pip install dynamongo\n\n\nDocumentation\n=============\n\nFull documentation is available at http://dynamongo.readthedocs.io/ .\n\nRequirements\n============\n\n- Python >= 3.5",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/musyoka-morris/dynamongo",
    "keywords": "aws,dynamo,dynamodb,ormserialization,deserialization,validation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynamongo",
    "package_url": "https://pypi.org/project/dynamongo/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynamongo/",
    "project_urls": {
      "Homepage": "https://github.com/musyoka-morris/dynamongo"
    },
    "release_url": "https://pypi.org/project/dynamongo/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A lightweight library for interacting with AWS dynamoDB in a pythonic way,inspired by pymongo",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4105615,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ea771c0a7b8e4bf20acb953e9cf282f62bbb627e06f1cf9360e07a3970db7a8",
          "md5": "aad7d8ab4c8994ddd325f7297a8a2266",
          "sha256": "e6edb535a52ff816c16124a342ca583741f25fdbf5b0a560067d82dda9fe3e03"
        },
        "downloads": -1,
        "filename": "dynamongo-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aad7d8ab4c8994ddd325f7297a8a2266",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31197,
        "upload_time": "2018-07-26T17:40:24",
        "upload_time_iso_8601": "2018-07-26T17:40:24.562784Z",
        "url": "https://files.pythonhosted.org/packages/5e/a7/71c0a7b8e4bf20acb953e9cf282f62bbb627e06f1cf9360e07a3970db7a8/dynamongo-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ea771c0a7b8e4bf20acb953e9cf282f62bbb627e06f1cf9360e07a3970db7a8",
        "md5": "aad7d8ab4c8994ddd325f7297a8a2266",
        "sha256": "e6edb535a52ff816c16124a342ca583741f25fdbf5b0a560067d82dda9fe3e03"
      },
      "downloads": -1,
      "filename": "dynamongo-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "aad7d8ab4c8994ddd325f7297a8a2266",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31197,
      "upload_time": "2018-07-26T17:40:24",
      "upload_time_iso_8601": "2018-07-26T17:40:24.562784Z",
      "url": "https://files.pythonhosted.org/packages/5e/a7/71c0a7b8e4bf20acb953e9cf282f62bbb627e06f1cf9360e07a3970db7a8/dynamongo-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}