{
  "info": {
    "author": "liuyancong",
    "author_email": "lyc456789@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "safe_redis_lock\n~~~~~~~~~~~~~~~\n\n项目描述\n\n-  一个单机版的redis分布式锁( A single redis distributed lock)\n-  项目使用set命令来加锁\n-  使用lua脚本来释放锁以保证原子性\n-  注意事项,传入的redis连接池需要必须参数一样,同一个redis数据库\n-  当block=False的时候如果没有获得锁则返回一个AcquireFailException异常\n-  acquire方法返回True时候则说明获得锁成功\n\n使用方法一\n\n-  装饰器使用方法\n\n-  新建一个RedisLock对象.使用RedisLock的lock装饰器来装饰需要保证原子性的函数\n\n-  注意该函数不能是阻塞的\n\n-  .. code:: python\n\n      import threading\n      import redis\n\n      from safe_redis_lock import RedisLock\n      pool = redis.ConnectionPool(host='127.0.0.1', port=6379, password='lyc', db=0)\n\n      conn = redis.Redis(connection_pool=pool)\n\n      conn.set('producer', 10000)\n      redis_lock_ = RedisLock(lock_timeout=5, pool=pool, block=True)\n\n\n      @redis_lock_.lock\n      def consumer_pp(conn):\n          num = int(conn.get('producer'))\n          if num == 0:\n              return True\n          else:\n              print(f'we consumer one left --> {num}')\n              conn.set('producer', num - 1)\n\n\n      def consumer():\n          pool = redis.ConnectionPool(host='127.0.0.1', port=6379, password='lyc', db=0)\n          while True:\n              conn = redis.Redis(connection_pool=pool)\n              if consumer_pp(conn):\n                  break\n\n\n      def consumer_thread():\n          from threading import Thread\n          for i in range(20):\n              Thread(target=consumer).start()\n\n\n      consumer_thread()\n\n使用方法二:\n\n-\n\n.. code:: python\n\n   from safe_redis_lock import RedisLock,AcquireFailException\n\n   import redis\n   import threading\n   import os\n   pool = redis.ConnectionPool(host='127.0.0.1', port=6379, password='lyc', db=0)\n\n   conn = redis.Redis(connection_pool=pool)\n\n   conn.set('producer', 10000)\n   redis_lock_ = RedisLock(lock_timeout=5, pool=pool, block=True)\n\n\n   def consumer_pp(conn):\n       num = int(conn.get('producer'))\n       if num == 0:\n           return True\n       else:\n           print(f'we consumer one left --> {num}')\n           conn.set('producer', num - 1)\n\n\n   def consumer():\n       pool = redis.ConnectionPool(host='127.0.0.1', port=6379, password='lyc', db=0)\n       while True:\n           conn = redis.Redis(connection_pool=pool)\n           value = f'{threading.current_thread().ident}-{os.getpid()}'\n           get_lock = False\n           try:\n               get_lock = redis_lock_.acquire(value = value)\n               if get_lock:\n                   if consumer_pp(conn):\n                       break\n           except AcquireFailException:\n               print('can not get the lock')\n           finally:\n               if get_lock:\n                   redis_lock_.release(value)\n\n\n   def consumer_thread():\n       from threading import Thread\n       for i in range(20):\n           Thread(target=consumer).start()\n\n\n   consumer_thread()\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "safe_redis_lock",
    "package_url": "https://pypi.org/project/safe_redis_lock/",
    "platform": "",
    "project_url": "https://pypi.org/project/safe_redis_lock/",
    "project_urls": {
      "Homepage": "https://gitee.com"
    },
    "release_url": "https://pypi.org/project/safe_redis_lock/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "a safe redis lock in Single node Redis",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6928565,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "685b37f23c8537cbba196b3aa33bbd1b692e91435e12ec364aae8798bfe5bfe0",
          "md5": "41c733239f12c8b0238c1cb82c77bcb4",
          "sha256": "ed9b6545a0ea25762b48ef5a8f9848bd31221f140374aa6441828920c239453a"
        },
        "downloads": -1,
        "filename": "safe_redis_lock-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "41c733239f12c8b0238c1cb82c77bcb4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3246,
        "upload_time": "2020-04-01T15:41:54",
        "upload_time_iso_8601": "2020-04-01T15:41:54.233543Z",
        "url": "https://files.pythonhosted.org/packages/68/5b/37f23c8537cbba196b3aa33bbd1b692e91435e12ec364aae8798bfe5bfe0/safe_redis_lock-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "685b37f23c8537cbba196b3aa33bbd1b692e91435e12ec364aae8798bfe5bfe0",
        "md5": "41c733239f12c8b0238c1cb82c77bcb4",
        "sha256": "ed9b6545a0ea25762b48ef5a8f9848bd31221f140374aa6441828920c239453a"
      },
      "downloads": -1,
      "filename": "safe_redis_lock-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "41c733239f12c8b0238c1cb82c77bcb4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3246,
      "upload_time": "2020-04-01T15:41:54",
      "upload_time_iso_8601": "2020-04-01T15:41:54.233543Z",
      "url": "https://files.pythonhosted.org/packages/68/5b/37f23c8537cbba196b3aa33bbd1b692e91435e12ec364aae8798bfe5bfe0/safe_redis_lock-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}