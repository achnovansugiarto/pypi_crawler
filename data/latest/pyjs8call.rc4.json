{
  "info": {
    "author": "Simply Equipped LLC",
    "author_email": "howard@simplyequipped.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![pypi version](https://img.shields.io/pypi/v/pyjs8call?color=blue&label=pypi%20version)](https://pypi.org/project/pyjs8call) &nbsp;&nbsp;&nbsp;\n[![pypi downloads](https://img.shields.io/pypi/dw/pyjs8call?color=blue&label=pypi%20downloads)](https://pypi.org/project/pyjs8call) &nbsp;&nbsp;&nbsp;\n[![github license](https://img.shields.io/github/license/simplyequipped/pyjs8call?color=blue)](https://github.com/simplyequipped/pyjs8call/blob/main/LICENSE)\n\nA Python package for interfacing with the JS8Call API.\n\n&nbsp;\n\n### Documentation\n\nSee the official [pyjs8call documentation](https://simplyequipped.github.io/pyjs8call).\n\nSee a basic example in the *example.py* file at the top level of the repo.\n\n&nbsp;  \n\n### Cross-Platform Support\n\nAll functionality is supported on all major platforms as of version 0.2.0. Running the JS8Call application headless is only supported on Linux operating systems due to the *xvfb* requirement. *xvfb* does not function correctly on Manjaro (at least on the PineBook Pro) even though it can be installed.\n\n| OS&nbsp;Platform                          | Hardware&nbsp;Platform                              | Process&nbsp;Management | Headless&nbsp;Application |\n| :---                                      | :---                                                | :---                    | :---                      |\n| Ubuntu&nbsp;20.04&nbsp;LTS                | AMD&nbsp;Ryzen&nbsp;5 &nbsp;(Zen 3)                 | Supported               | Supported                 |\n| Raspberry&nbsp;Pi&nbsp;OS&nbsp;Buster     | Raspberry&nbsp;Pi&nbsp;3B+                          | Supported               | Supported                 |\n| Raspberry&nbsp;Pi&nbsp;OS&nbsp;Bullseye   | Raspberry&nbsp;Pi&nbsp;4B                           | Supported               | Supported                 |\n| Manjaro&nbsp;ARM                          | Pine64&nbsp;PineBook&nbsp;Pro                       | Supported               | Not&nbsp;Supported        |\n| Windows&nbsp;10                           | MS&nbsp;Surface&nbsp;Pro&nbsp;X&nbsp;(SQ2&nbsp;ARM) | Supported               | Not&nbsp;Supported        |\n| Windows&nbsp;11                           | MS&nbsp;Surface&nbsp;Pro&nbsp;9&nbsp;(i5&nbsp;x86)  | Supported               | Not&nbsp;Supported        |\n| MacOS&nbsp;Big&nbsp;Sur&nbsp;(11.3.1)     | Apple&nbsp;MacBook&nbsp;Pro&nbsp;2019               | Supported               | Not&nbsp;Supported        |\n\n&nbsp;\n\n### Installation\n\n1. Install applications\n    \n    a. Install JS8Call\n    \n    See the [JS8Call downloads](http://files.js8call.com/latest.html) page for OS-specific packages as well as source files. If you are compiling from source for Linux be sure to read the INSTALL file at the top level of the JS8Call repo.\n    \n    On Raspberry Pi OS:\n    ```\n    wget http://files.js8call.com/2.2.0/js8call_2.2.0_armhf.deb\n    sudo dpkg -i js8call_2.2.0_armhf.deb\n    ```\n\n    **NOTE:** When installing JS8Call on Windows be sure to select the option to add JS8Call to the PATH variable during the installation process. This will allow *pyjs8call* to locate the JS8Call executable.\n\n    **NOTE:** When installing JS8Call on MacOS be sure to read the readme file included in the dmg image for information on the fix for the JS8Call shared memory error. The following directory must also be added to the PATH variable to allow *pyjs8call* to locate the JS8Call executable: /Applications/js8call.app/Contents/MacOS\n    \n    **NOTE:** When using a QRPLabs QDX tranceiver on Linux consider masking the ModemManager service to prevent CAT control dropouts. See [this post from QRPLabs](https://groups.io/g/QRPLabs/topic/87048220#74634) for more information.\n    \n    &nbsp;\n\n    b. Install xvfb if running headless (not supported on Windows or MacOS)\n    \n    On Debian systems:\n    ```\n    sudo apt install xvfb\n    ```\n\n2. Install pyjs8call using pip3 (or pip, if python3 is the default on your system)\n    \n    ```\n    pip3 install pyjs8call\n    ```\n\n    This will also install *psutil* for cross platform process management.\n\n3. Launch JS8Call to configure audio and CAT interface settings as needed. Launching the application and exiting normally will also initilize the configuration file, which is required by *pyjs8call*.\n\n&nbsp;\n\n### Modules\n\nSome setup (i.e. setting callback functions) is required to use certain module features. Most modules are initialized automatically by pyjs8call.client.\n\n**Client** (pyjs8call.client)\n\nThe main JS8Call API interface. Includes many functions for reading and writting settings as well as sending various types of messages.\n\n**JS8Call** (pyjs8call.js8call)\n\nManages TCP socket communication with the JS8Call application.\n\n**Application Monitor** (pyjs8call.appmonitor)\n\nManages the start and stop of the JS8Call application, as well as the restarting of the application if closed. \n\n**Configuration Handler** (pyjs8call.confighandler)\n\nReads from and writes to the JS8Call.ini config file to change virtually any setting, including creating and activating configuration profiles. **Specific knowledge of configuration file options is required. Configuring options incorrectly may cause the JS8Call application to not run.**\n\n**Spot Monitor** (pyjs8call.spotmonitor)\n\nMonitors recent station spots. Spot data can be queried for various uses, and spot callbacks can be set for all heard stations and/or for specific stations.\n\n**Window Monitor** (pyjs8call.windowmonitor)\n\nMonitors the next rx/tx window transition. JS8Call API messages associated with incoming and outgoing messages are used to determine the start or end of a window, and the modem speed setting is used to determine the duration of the window. Notification of a window transition is handled via callback function.\n\n**Offset Monitor** (pyjs8call.offsetmonitor)\n\nManages JS8Call offset frequency based on activity in the pass band. The offset frequency is automatically moved to an unsed portion of the pass band if a recently heard signal overlaps with the current offset. Signal bandwidth is calculated based on the modem speed of each heard signal. Only decoded signal data is available from the JS8Call API so other QRM cannot be handled.\n\n**Outgoing Monitor** (pyjs8call.outgoingmonitor)\n\nMonitors JS8Call outgoing message text. Notification of a message status change is handled via callback function.\n\n**Heartbeat Networking** (pyjs8call.hbnetwork)\n\nSends a heartbeat message in the heartbeat sub-band on a time interval.\n\n**Time Monitor** (pyjs8call.timemonitor)\n\nMonitors a group, station, or all activity for time drift data and synchronizes local time drift. Enable automatic synchronization to the specified source on a time interval. Synchronizes to the @TIME group by default.\n\nTime master functionality is also implemented which sends outgoing messages on a time interval that other stations can use to synchronize their time drift. Targets the @TIME group by default.\n\n**Inbox Monitor** (pyjs8call.inboxmonitor)\n\nMonitors the local inbox. Notification of new messages is handled via callback function.\n\n**Idle Monitor** (pyjs8call.idlemonitor)\n\nMonitors the JS8Call application process run time and restarts the application perodically (when there is no outgoing activity) to avoid the JS8Call idle timeout. This is useful when running the JS8Call application headless.\n\n&nbsp;  \n\n### Examples\n\nBasic usage:\n```\nimport pyjs8call\n\n# use default host, port (127.0.0.1:2442)\njs8call = pyjs8call.Client()\njs8call.start()\n\n# set frequency and offset\nfreq = js8call.settings.set_freq(7078000)\noffset = js8call.settings.set_offset(1500)\nprint('Frequency: ' + str(freq))\nprint('Offset: ' + str(offset))\n\n# get inbox messages via JS8Call API\ninbox = js8call.get_inbox_messages()\nfor message in inbox:\n    print(message)\n\n# send a directed message\njs8call.send_directed_message('N0GQ', 'Thanks for your work on js8net')\n\n# see who is hearing who in the last hour\njs8call.hearing()\n\n# get a list of spot messages from a specific station\njs8call.spots.filter(origin = 'OH8STN')\n\n# get a list of spot messages sent to a specific group\njs8call.spots.filter(destination = '@AMRRON')\n\n# get a list of spot messages within 1000 km\n# (or miles, depending on JS8Call settings)\njs8call.spots.filter(distance = 1000)\n\n# get a list of spot messages in the last 15 minutes\nmax_age = 15 * 60 # convert minutes to seconds\njs8call.spots.filter(age = max_age)\n```\n\nUsing the spot monitor:\n```\nimport pyjs8call\n\n# callback function for all new spots\ndef new_spots(spots):\n    for spot in spots:\n        print('Spotted ' + spot.origin + ' with a ' + str(spot.snr) + 'dB SNR')\n    \n# callback function for watched station spots\ndef station_spotted(spot):\n    print(spot.origin + ' spotted!')\n\n# callback function for watched group spots\ndef group_spotted(spot):\n    print(spot.destination + ' spotted!')\n    \njs8call = pyjs8call.Client()\n# set spot monitor callback\njs8call.callback.spots = new_spots\n# set station watcher callback\njs8call.callback.station_spot = station_spotted\n# set group watcher callback\njs8call.callback.group_spot = group_spotted\njs8call.start()\n\n# watch multiple stations\njs8call.spots.add_station_watch('N0GQ')\njs8call.spots.add_station_watch('K6ARK')\n\n# remove a station watcher, no hard feelings Adam :)\njs8call.spots.remove_station_watch('K6ARK')\n\n# watch a group\njs8call.spots.add_group_watch('@AMRRON')\n```\n\nUsing the inbox monitor:\n```\nimport pyjs8call\n\n# callback function for new inbox message\ndef new_inbox_msg(msgs):\n    for msg in msgs:\n        print('New inbox message from ' + msg['origin'])\n\njs8call = pyjs8call.Client()\n# set inbox monitor callback\njs8call.callback.inbox = new_inbox_msg\njs8call.start()\n\n# enable local inbox monitoring and periodic remote inbox message query\njs8call.inbox.enable_monitoring()\n```\n\nUsing the outgoing message monitor:\n```\nimport pyjs8call\n\n# callback function for message status change\ndef tx_status(msg):\n    print('Message ' + msg.id + ' status: ' + msg.status)\n    \njs8call = pyjs8call.Client()\n# set outgoing monitor callback\njs8call.callback.outgoing = tx_status\njs8call.start()\n\n# monitor directed message tx automatically (default)\njs8call.send_directed_message('OH8STN', 'Thanks for the great content')\n\n# monitor outgoing message manually\njs8call.monitor_outgoing = False\nmsg = js8call.send_directed_message('KT7RUN', 'Thanks for the great content')\njs8call.outgoing.monitor(msg)\n```\n\nUsing heartbeat networking:\n```\nimport pyjs8call\n\njs8call = pyjs8call.Client()\njs8call.start()\n\n# use default 10 minute interval\njs8call.heartbeat.enable_networking()\n```\n\nSet config file settings:\n```\nimport pyjs8call\n\njs8call = pyjs8call.Client()\n# set config file settings before starting\njs8call.settings.enable_heartbeat_acknowledgements()\njs8call.settings.enable_reporting()\njs8call.settings.set_speed('normal')\njs8call.start()\n```\n\nUtilize grid distance and bearing:\n```\nimport pyjs8call\n\njs8call = pyjs8call.Client()\njs8call.start()\n\n# use built-in spot distance filters\nregional_stations = [spot.origin for spot in js8call.spots.filter(distance = 500)]\n\n# access message attributes directly\n# this requires the message to contain grid square data\nlast_heartbeat = js8call.spots.filter(destination='@HB')[-1]\ndistance = last_heartbeat.distance\nbearing = last_heartbeat.bearing\n\n# manually calculate distance and bearing from local station\ndistance, bearing = js8call.grid_distance('FM16')\n\n# manually calculate distance and bearing between grid squares\ndistance, bearing = js8call.grid_distance('FM16fq', 'EM19ub')\n```\n\n&nbsp;\n\n### Acknowledgements\n\nInspired by [js8net](https://github.com/jfrancis42/js8net) by N0GQ<br>\n[JS8Call](http://js8call.com) by KN4CRD\n\n&nbsp;\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/simplyequipped/pyjs8call",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyjs8call",
    "package_url": "https://pypi.org/project/pyjs8call/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyjs8call/",
    "project_urls": {
      "Homepage": "https://github.com/simplyequipped/pyjs8call"
    },
    "release_url": "https://pypi.org/project/pyjs8call/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python package for interfacing with the JS8Call API",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17403738,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5d292c167c456d009a3e173897c3835039ed1b728202157c145172348b895a4",
          "md5": "bdd6247e622f68cbb3a03fe87ec1a508",
          "sha256": "a56592694068af5f2a403bed5bc24c8ee197b25942e44568fcd55ce8dd5b79fc"
        },
        "downloads": -1,
        "filename": "pyjs8call-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bdd6247e622f68cbb3a03fe87ec1a508",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29571,
        "upload_time": "2022-12-28T23:25:10",
        "upload_time_iso_8601": "2022-12-28T23:25:10.952687Z",
        "url": "https://files.pythonhosted.org/packages/d5/d2/92c167c456d009a3e173897c3835039ed1b728202157c145172348b895a4/pyjs8call-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ade6c476f5ce6af1dda8e2a0c92c16ae978d1c820ed60cb5837a19f2a320fb66",
          "md5": "e9ceb6c55a15f3a096c1068922c21fbf",
          "sha256": "5cbf0660d01c549ff392cd814234ec6eca0dad95e7eb2c23b81fa79791c20828"
        },
        "downloads": -1,
        "filename": "pyjs8call-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e9ceb6c55a15f3a096c1068922c21fbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44031,
        "upload_time": "2023-01-27T00:15:17",
        "upload_time_iso_8601": "2023-01-27T00:15:17.520317Z",
        "url": "https://files.pythonhosted.org/packages/ad/e6/c476f5ce6af1dda8e2a0c92c16ae978d1c820ed60cb5837a19f2a320fb66/pyjs8call-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53c6db355e44fc953973bad42c58e6f6d00f48f371f3c77d8ce2e4d3a6dacd83",
          "md5": "43f5673e4c063f4e5c4cfa0dfd73a3fb",
          "sha256": "087257844177e4c6db06f783f65512545acfd01e624e718de3398d611ac058f3"
        },
        "downloads": -1,
        "filename": "pyjs8call-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "43f5673e4c063f4e5c4cfa0dfd73a3fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48841,
        "upload_time": "2023-02-11T22:13:26",
        "upload_time_iso_8601": "2023-02-11T22:13:26.180115Z",
        "url": "https://files.pythonhosted.org/packages/53/c6/db355e44fc953973bad42c58e6f6d00f48f371f3c77d8ce2e4d3a6dacd83/pyjs8call-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9c5da7e02246176da031a5e5f2b7187009957cdc5262e286d712a903a22cb1a",
          "md5": "37852f3622bf65b7395a5564bb51ef74",
          "sha256": "1948bfe6c73a3a35d20d407d62a519d17144664b47b703b66c8c8a0cc18fd5e5"
        },
        "downloads": -1,
        "filename": "pyjs8call-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "37852f3622bf65b7395a5564bb51ef74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 52169,
        "upload_time": "2023-03-22T20:12:57",
        "upload_time_iso_8601": "2023-03-22T20:12:57.303569Z",
        "url": "https://files.pythonhosted.org/packages/a9/c5/da7e02246176da031a5e5f2b7187009957cdc5262e286d712a903a22cb1a/pyjs8call-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a9c5da7e02246176da031a5e5f2b7187009957cdc5262e286d712a903a22cb1a",
        "md5": "37852f3622bf65b7395a5564bb51ef74",
        "sha256": "1948bfe6c73a3a35d20d407d62a519d17144664b47b703b66c8c8a0cc18fd5e5"
      },
      "downloads": -1,
      "filename": "pyjs8call-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "37852f3622bf65b7395a5564bb51ef74",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 52169,
      "upload_time": "2023-03-22T20:12:57",
      "upload_time_iso_8601": "2023-03-22T20:12:57.303569Z",
      "url": "https://files.pythonhosted.org/packages/a9/c5/da7e02246176da031a5e5f2b7187009957cdc5262e286d712a903a22cb1a/pyjs8call-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}