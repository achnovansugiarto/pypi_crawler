{
  "info": {
    "author": "",
    "author_email": "Sascha Mücke <sascha.muecke@tu-dortmund.de>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# `seleqt` - Quantum Feature Selection\n\nThis package contains a minimal implementation of the Quantum Feature Selection (QFS) algorithm described in [Mücke et al., 2023](https://link.springer.com/article/10.1007/s42484-023-00099-z).\nGiven a labeled dataset, this package provides methods to\n\n* discretize the data\n* compute redundancy and importance values based on mutual information\n* generate feature selection QUBO instances for a given α\n* find an α such that a FS QUBO has exactly k bits in its minimizing binary vector\n\n\n# Installation\n\nThis package can be installed directly via `pip` from the PyPi repository:\n```\npip3 install seleqt\n```\n\n\n# Usage\n\nData and labels must be given as `numpy` arrays:\nThe data `x` must have shape `(n, d)`, where `n` is the number of samples/observations and `d` is the number of features.\nThe labels `y` must have shape `(n,)`.\nBoth `x` and `y` must be **discrete**, i.e., their type must be a subtype of integer.\nOptimally, their values should correspond to indices (`0`,`1`,...,`B-1`) of a finite number of bins `B`.\n\n```python\nfrom seleqt import *\n```\n\n## Discretizing\n\nThis package provides a method `discretize` that takes real-valued data and discretizes it by computing bins and returning the corresponding bin indices.\nIts parameters are\n* `x`: Input data\n* `bins`: Number of bins (default 10)\n* `method`: Method to compute bin edges, must be either `\"equal\"` or `\"quantile\"`.\n    For `\"equal\"`, the value range is divided into `bins` equally sized bins.\n    For `\"quantile\"`, the b/`bins`-quantiles for b in 0,...,`bins` are computed and used as bin edges. Default is `\"equal\"`.\n* `share_bins`: Boolean that indicates if the bins should be computed over all values together vs. all columns separately. Default is `True`.\n\n```python\nx_ = discretize(x, bins=20, method='quantile')\n```\n\n\n## Redundancy and Importance\n\nThe methods `redundancy()` and `importance()` compute what their names suggest.\nAs inputs, `redundancy()` expects just `x`, and `importance()` expects both `x` and `y`.\nAll inputs must be discrete.\nThe result of `redundancy()` is a `numpy` array of shape `(d, d)`, and `importance()` returns a shape `(d,)` array.\n\n```python\nred = redundancy(x_)\nimp = importance(x_, y)\n```\n\n\n## Create QUBO Instance\n\nGiven redundancy and importance, the method `feature_selection_qubo()` creates a QUBO parameter matrix according to Eq. 18 in the paper.\nIt takes the following arguments:\n* `redundancy`: `numpy.ndarray` of shape `(d, d)` containing pairwise redundancy between the features\n* `importance`: `numpy.ndarray` of shape `(d,)` containing importance for each feature\n* `alpha`: float between 0 and 1; weighting of importance against redundancy. Corresponds to α in Eq. 18.\n* `importance_threshold`: non-negative float; minimal meaningful importance value. Corresponds to ε in Eq. 18.\n* `threshold_penalty`: non-negative float; penalty value swapped in for importance when it is below `importance_threshold`. Corresponds to μ in Eq. 18. Default is the \n\nThe return value is a `numpy.ndarray` of shape `(d, d)` containing the QUBO parameters as an upper-triangular matrix.\n\n```python\nQ = feature_selection_qubo(red, imp, alpha=0.7)\n```\n\n\n## Perform QFS Algorithm\n\nTo perform Alg. 1 from the paper, you can use `qfs()`, which takes the following arguments:\n* `redundancy` and `importance`: Same as for `feature_selection_qubo()`\n* `k`: int, with 0 < `k` < `d`; target number of features to select.\n* `importance_threshold` and `threshold_penalty`: Same as for `feature_selection_qubo()`\n* `precision_limit`: non-negative float; smallest allowed search interval for binary search. Default is `1e-8`.\n* `qubo_solver`: Callable function that takes a `(d, d)` QUBO parameter matrix and outputs a binary vector `x` that minimizes `x @ Q @ x`.\nCorresponds to the QUBO oracle used in Alg. 1.\n\nThe result in a tuple `(alpha, min_x)` containing the optimal α value and the minimizing binary vector, which has `k` ones.\n\nThe following example uses the light-weight package [`qubolite`](https://github.com/smuecke/qubolite) to implement the QUBO oracle.\nNote that the brute-force solver is only feasible for dimensions up to about 30.\n\n```python\nfrom qubolite         import qubo\nfrom qubolite.solving import brute_force\n\ndef brute_force_solver(q):\n    return brute_force(qubo(q))\n\nalpha, min_x = qfs(red, imp, 5, qubo_solver=brute_force_solver)\n```\n\n# Citation\n\nIf you use this package in your scientific work, please cite the following article:\n\n```\nMücke, S., Heese, R., Müller, S. et al. Feature selection on quantum computers. Quantum Mach. Intell. 5, 11 (2023). https://doi.org/10.1007/s42484-023-00099-z\n```\n\nBibtex:\n```\n@article{muecke2023,\n    title={Feature selection on quantum computers},\n    author={M{\\\"u}cke, Sascha and Heese, Raoul and M{\\\"u}ller, Sabine and Wolter, Moritz and Piatkowski, Nico},\n    journal={Quantum Machine Intelligence},\n    volume={5},\n    number={1},\n    pages={11},\n    year={2023},\n    publisher={Springer},\n    doi={10.1007/s42484-023-00099-z}\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "seleqt",
    "package_url": "https://pypi.org/project/seleqt/",
    "platform": null,
    "project_url": "https://pypi.org/project/seleqt/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/seleqt/1.0/",
    "requires_dist": [
      "numpy (>=1.23.5)"
    ],
    "requires_python": ">=3.8",
    "summary": "Quantum Feature Seletion (QFS) algorithm",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17317340,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bb76ca73b400599a1557fed603ea996a7b8d41cfd7581409940195ba0c1ef5c",
          "md5": "f5415d83b2c23d727a67e3fe0e0322a2",
          "sha256": "da5c5bfd681530ad8a4da2104973e84e2944f5301a33c923c19204dd6543cf1d"
        },
        "downloads": -1,
        "filename": "seleqt-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5415d83b2c23d727a67e3fe0e0322a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6413,
        "upload_time": "2023-03-16T10:41:20",
        "upload_time_iso_8601": "2023-03-16T10:41:20.196012Z",
        "url": "https://files.pythonhosted.org/packages/3b/b7/6ca73b400599a1557fed603ea996a7b8d41cfd7581409940195ba0c1ef5c/seleqt-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9057ce17c0da186e566eb44c8a4f0b8a757fbef8d23973c372376ba84d4661a0",
          "md5": "a43eea80ac3a5655cf910508f223fdc8",
          "sha256": "37144d5d0b3f3e934d0043f213fbf78e4781d327b4ee00ee226ea5e861a3929a"
        },
        "downloads": -1,
        "filename": "seleqt-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a43eea80ac3a5655cf910508f223fdc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 5857,
        "upload_time": "2023-03-16T10:41:22",
        "upload_time_iso_8601": "2023-03-16T10:41:22.602058Z",
        "url": "https://files.pythonhosted.org/packages/90/57/ce17c0da186e566eb44c8a4f0b8a757fbef8d23973c372376ba84d4661a0/seleqt-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bb76ca73b400599a1557fed603ea996a7b8d41cfd7581409940195ba0c1ef5c",
        "md5": "f5415d83b2c23d727a67e3fe0e0322a2",
        "sha256": "da5c5bfd681530ad8a4da2104973e84e2944f5301a33c923c19204dd6543cf1d"
      },
      "downloads": -1,
      "filename": "seleqt-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5415d83b2c23d727a67e3fe0e0322a2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 6413,
      "upload_time": "2023-03-16T10:41:20",
      "upload_time_iso_8601": "2023-03-16T10:41:20.196012Z",
      "url": "https://files.pythonhosted.org/packages/3b/b7/6ca73b400599a1557fed603ea996a7b8d41cfd7581409940195ba0c1ef5c/seleqt-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9057ce17c0da186e566eb44c8a4f0b8a757fbef8d23973c372376ba84d4661a0",
        "md5": "a43eea80ac3a5655cf910508f223fdc8",
        "sha256": "37144d5d0b3f3e934d0043f213fbf78e4781d327b4ee00ee226ea5e861a3929a"
      },
      "downloads": -1,
      "filename": "seleqt-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a43eea80ac3a5655cf910508f223fdc8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 5857,
      "upload_time": "2023-03-16T10:41:22",
      "upload_time_iso_8601": "2023-03-16T10:41:22.602058Z",
      "url": "https://files.pythonhosted.org/packages/90/57/ce17c0da186e566eb44c8a4f0b8a757fbef8d23973c372376ba84d4661a0/seleqt-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}