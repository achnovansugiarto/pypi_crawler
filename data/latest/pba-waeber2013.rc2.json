{
  "info": {
    "author": "Kale Kundert",
    "author_email": "kale@thekunderts.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "****************\nPBA [Waeber2013]\n****************\n\n.. image:: https://img.shields.io/pypi/v/pba_waeber2013.svg\n   :alt: Last release\n   :target: https://pypi.python.org/pypi/pba_waeber2013\n\n.. image:: https://img.shields.io/pypi/pyversions/pba_waeber2013.svg\n   :alt: Python version\n   :target: https://pypi.python.org/pypi/pba_waeber2013\n\n.. image:: \n   https://img.shields.io/github/workflow/status/kalekundert/pba_waeber2013/Test%20and%20release/master\n   :alt: Test status\n   :target: https://github.com/kalekundert/pba_waeber2013/actions\n\n.. image:: https://img.shields.io/coveralls/kalekundert/pba_waeber2013.svg\n   :alt: Test coverage\n   :target: https://coveralls.io/github/kalekundert/pba_waeber2013?branch=master\n\n.. image:: https://img.shields.io/github/last-commit/kalekundert/pba_waeber2013?logo=github\n   :alt: Last commit\n   :target: https://github.com/kalekundert/pba_waeber2013\n\nThis is an implementation of the probabilistic bisection algorithm (PBA) \ndescribed by Rolf Waeber in his 2013 PhD thesis.  PBA is a 1D stochastic \nroot-finding algorithm.  This means that it is meant to find the point where a \nnoisy function (i.e. a function that may return different values each time its \nevaluated at the same point) crosses the x-axis.  More precisely, given *g(x) = \nf(x) + ε(x)*, the goal is to find *x* such that *E[g(x)] = 0*, where \n*f(x)* is the function we are interested in, *ε* is a normally \ndistributed noise function with median 0, *g(x)* is the only way we can \nobserve *f(x)*, and *E[g(x)]* is the expected value of \n*g(x)*. \n\nThis algorithm works by repeatedly evaluating the noisy function at a single \n*x* until the probability that we know the true sign of *f(x)* \nexceeds a specified threshold.  This information is used to build a Bayesian \nposterior distribution describing the location of the root.  The next point to \nevaluate is then chosen from this distribution.  There are two features that \nmake this algorithm unique:\n\n1. It provides a true confidence interval in addition to the root itself.\n\n2. It places very little restraints on the form of the noise function.\n\nHowever, there are some caveats to be aware of:\n\n1. In my experience, the algorithm rarely converges.  This is due to the fact \n   that the confidence intervals only narrow as new x-coordinates are sampled, \n   but the closer the algorithm gets to the root, the more time it spends \n   sampling each x-coordinate.  That said, the algorithm seems to find the root \n   very accurately even when it doesn't converge.\n\n2. The algorithm isn't very numerically stable.  The posterior distribution is \n   represented using two arrays: one for the bin edges and one for the bin \n   heights.  As the algorithm progresses, the bins near the root get very thin \n   and very tall, which leads to loss-of-precision and overflow issues.  My \n   only advice on how to avoid these problems is to limit the number of \n   iterations.  It might also help to increase the *p_c* parameter.\n\nNote that I myself only have a rudimentary understanding of the math behind \nthis algorithm.  This implementation is based on scripts I received from the \nauthors, and I tried to test my code as well as possible to convince myself \nthat it's doing the right thing, but I'm outside my comfort zone here.\n\nInstallation\n============\nInstall from PyPI::\n\n  $ pip install pba_waeber2013\n\nUsage\n=====\nThis module provides a single public function::\n\n  >>> from pba_waeber2013 import pba_waeber2013\n  >>> pba_waeber2013(\n  ...         f, a, b, *\n  ...         tol=None,\n  ...         rtol=None,\n  ...         alpha=0.05,\n  ...         p_c=0.65,\n  ...         maxiter=1000,\n  ...         check_bounds=False,\n  ...         slope=None,\n  ...         args=None,\n  ...         kwargs=None,\n  ... )\n\nBelow are brief descriptions of the parameters:\n\n*f*\n  The stochastic function of interest.  This function can take any number of \n  arguments (see *args* and *kwargs*), but the first should be the *x* \n  coordinate to evaluate the function at.\n\n*a b*\n  The lower and upper bounds, respectively, on where the root can occur.  There \n  must be exactly one root in this interval.\n\n*tol*\n  How narrow the confidence interval needs to be in order for the algorithm to \n  be converged.  Note that if neither *tol* nor *rtol* are specified, the \n  algorithm will just run for the maximum number of iterations.\n\n*rtol*\n  Similar to *tol*, but multiplied by the estimated root.\n\n*alpha*\n  A parameter controlling the width of the confidence intervals.  Specifically, \n  the confidence level is given by *1 − alpha*.  In other words, for 95% \n  confidence intervals, set *alpha* to 0.05.\n\n*p_c*\n  Repeatedly evaluate the function at each *x* coordinate until we can reject \n  the null hypothesis that *f(x) = 0* with probability *p_c*.  At that point, \n  the sign of *f(x)* will be taken as whichever sign we observed most often.\n\n*maxiter*\n  The maximum number of function calls to make.\n\n*check_bounds*\n  Evaluate the function at the bounds *a* and *b* before starting the \n  bisection.  This achieves two things.  First, it checks that the bounds have \n  different signs.  If this is not the case, then there are either 0 or >1 \n  roots in the interval, and so this algorithm is not applicable.  Second, it \n  determines the slope of the function.  If the bounds are not checked, the \n  *slope* parameter must be manually specified.\n\n*slope*\n  +1 if the function is increasing (i.e. negative before the root and positive \n  after) or -1 if the function is decreasing.  A slope must be given unless \n  *check_bounds* is True (in which case it will be calculated internally).\n\n*args*\n  Any extra arguments to pass to the function on each evaluation.\n\n*kwargs*\n  Any extra keyword arguments to pass to the function on each evaluation.\n  \nThe return value is an object with the following attributes:\n\n*x*\n  The location of the root.\n\n*x_obs*\n  All of the *x* coordinates where the function was evaluated.\n\n*f_obs*\n  The result of evaluating the function at each of the above *x* coordinates.\n\n*x_post*\n  The bin edges of the posterior distribution.\n\n*log_p_post*\n  The natural logarithms of the bin heights of the posterior distribution.  \n  Logarithms are used to avoid multiplication overflows.\n\n*ci*\n  The confidence interval evaluated independently after a sign is determined \n  for each coordinate.  Note that these intervals can grow and shrink over \n  time.  See [Waeber2013] §3.3 for more information.\n\n*ci_seq*\n  The sequential confidence interval.  Unlike the *ci* intervals, these are \n  guaranteed to never expand.  For that reason, these are the intervals used to \n  check for convergence.\n\n*converged*\n  True if the algorithm terminated because the confidence interval grew \n  narrower than the given tolerance, False if the algorithm terminated because \n  it reached the maximum number of iterations.\n\nReferences\n==========\n- Waeber R. (2013) \"Probabilistic bisection search for stochastic \n  root-finding.\"\n\n- Frazier PI, Henderson SG, Waeber R (2016) \"Probabilistic bisection converges \n  almost as quickly as stochastic approximation\", arXiv:1612.03964\n\n- Robbins H and Siegmund D. (1974) \"The expected sample size of some tests of \n  power one\", The Annals of Statistics, 2(3), pp. 415–436.  \n  doi:10.1214/aos/1176342704.\n  \n  \n\n  \n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kalekundert/pba_waeber2013",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pba-waeber2013",
    "package_url": "https://pypi.org/project/pba-waeber2013/",
    "platform": "",
    "project_url": "https://pypi.org/project/pba-waeber2013/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kalekundert/pba_waeber2013/issues",
      "Continuous Integration": "https://github.com/kalekundert/pba_waeber2013/actions",
      "Documentation": "https://pba_waeber2013.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/kalekundert/pba_waeber2013",
      "Test Coverage": "https://coveralls.io/github/kalekundert/pba_waeber2013",
      "Version Control": "https://github.com/kalekundert/pba_waeber2013"
    },
    "release_url": "https://pypi.org/project/pba-waeber2013/0.1.0/",
    "requires_dist": [
      "numpy",
      "sphinx ; extra == \"doc\"",
      "sphinx_rtd_theme ; extra == \"doc\"",
      "autoclasstoc ; extra == \"doc\"",
      "pytest ; extra == \"test\"",
      "pytest-cov ; extra == \"test\"",
      "parametrize_from_file ; extra == \"test\"",
      "coveralls ; extra == \"test\""
    ],
    "requires_python": "~=3.7",
    "summary": "Implementation of the stochastic root-finding algorithm described by",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12843688,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a22a61e34c75d8ceee8eba2b07b10936900dd9deda41c6f7eec30354fa52f502",
          "md5": "101c3fe75289d0c4f9a38b434d31be5c",
          "sha256": "d98e78a3416b3d8154c3fbfcf3fe8692557db3961d82bf829594798693fa592c"
        },
        "downloads": -1,
        "filename": "pba_waeber2013-0.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "101c3fe75289d0c4f9a38b434d31be5c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "~=3.6",
        "size": 8352,
        "upload_time": "2022-02-08T21:16:55",
        "upload_time_iso_8601": "2022-02-08T21:16:55.676846Z",
        "url": "https://files.pythonhosted.org/packages/a2/2a/61e34c75d8ceee8eba2b07b10936900dd9deda41c6f7eec30354fa52f502/pba_waeber2013-0.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "113f5fdbd5b692c1e972d9c4acd27d62d08bbfbceaccfbad13f062bfdc938b63",
          "md5": "a404468a9c5f2df2d17041772e6fe978",
          "sha256": "9e3ca7c5a8ccdd193e339b403a3105bb1293e58b1b0685c541c0b892e104198d"
        },
        "downloads": -1,
        "filename": "pba_waeber2013-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a404468a9c5f2df2d17041772e6fe978",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 13165,
        "upload_time": "2022-02-08T21:16:58",
        "upload_time_iso_8601": "2022-02-08T21:16:58.070601Z",
        "url": "https://files.pythonhosted.org/packages/11/3f/5fdbd5b692c1e972d9c4acd27d62d08bbfbceaccfbad13f062bfdc938b63/pba_waeber2013-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1399ab673df030cd9e57b23797b6ef51e1ad67e58f40d7d84a6b571ecdab4169",
          "md5": "bdf15ad6d67bf3255c49a0f367041856",
          "sha256": "020e94007c722b79171c3d3add3e86faba9e3e7e434b0ffb89984d40852f6388"
        },
        "downloads": -1,
        "filename": "pba_waeber2013-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bdf15ad6d67bf3255c49a0f367041856",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "~=3.7",
        "size": 8359,
        "upload_time": "2022-02-09T22:19:49",
        "upload_time_iso_8601": "2022-02-09T22:19:49.968701Z",
        "url": "https://files.pythonhosted.org/packages/13/99/ab673df030cd9e57b23797b6ef51e1ad67e58f40d7d84a6b571ecdab4169/pba_waeber2013-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95209ed46b10b10d347a55b2dd68e6fcc3185738dc695a6f85d2b971f98a4ca1",
          "md5": "b9e2d03d4a56b396ae591b84b5630340",
          "sha256": "ea71a2a8dce439417f4d6cfefe556fbcb1f1317f7b48530e4664abe58b431809"
        },
        "downloads": -1,
        "filename": "pba_waeber2013-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b9e2d03d4a56b396ae591b84b5630340",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 16179,
        "upload_time": "2022-02-09T22:19:51",
        "upload_time_iso_8601": "2022-02-09T22:19:51.085465Z",
        "url": "https://files.pythonhosted.org/packages/95/20/9ed46b10b10d347a55b2dd68e6fcc3185738dc695a6f85d2b971f98a4ca1/pba_waeber2013-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1399ab673df030cd9e57b23797b6ef51e1ad67e58f40d7d84a6b571ecdab4169",
        "md5": "bdf15ad6d67bf3255c49a0f367041856",
        "sha256": "020e94007c722b79171c3d3add3e86faba9e3e7e434b0ffb89984d40852f6388"
      },
      "downloads": -1,
      "filename": "pba_waeber2013-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bdf15ad6d67bf3255c49a0f367041856",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": "~=3.7",
      "size": 8359,
      "upload_time": "2022-02-09T22:19:49",
      "upload_time_iso_8601": "2022-02-09T22:19:49.968701Z",
      "url": "https://files.pythonhosted.org/packages/13/99/ab673df030cd9e57b23797b6ef51e1ad67e58f40d7d84a6b571ecdab4169/pba_waeber2013-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95209ed46b10b10d347a55b2dd68e6fcc3185738dc695a6f85d2b971f98a4ca1",
        "md5": "b9e2d03d4a56b396ae591b84b5630340",
        "sha256": "ea71a2a8dce439417f4d6cfefe556fbcb1f1317f7b48530e4664abe58b431809"
      },
      "downloads": -1,
      "filename": "pba_waeber2013-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b9e2d03d4a56b396ae591b84b5630340",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.7",
      "size": 16179,
      "upload_time": "2022-02-09T22:19:51",
      "upload_time_iso_8601": "2022-02-09T22:19:51.085465Z",
      "url": "https://files.pythonhosted.org/packages/95/20/9ed46b10b10d347a55b2dd68e6fcc3185738dc695a6f85d2b971f98a4ca1/pba_waeber2013-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}