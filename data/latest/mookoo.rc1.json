{
  "info": {
    "author": "GaoRongxin",
    "author_email": "rongxin.gao@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# MooKoo\n\nMooKoo是一个基于Python的Mock http server\n\n## 安装\n\n### 使用pip安装\n\n``` bash\npip install mookoo\nmookoo mock1 && cd mock1 && python mock.py\n# 在浏览器中访问 http://localhost:7928/hello\n```\n\n### 手工安装\n\n``` bash\nmkdir mock1; cd mock1\ngit clone https://github.com/gaorx/mookoo.git && rm -rf mookoo/.git\nvim mock.py\n```\n\n## 起步\n\n在`mock1`目录中，编辑`mock.py`\n\n``` python\nfrom mookoo import *\nGET('/hello').json({\"message\": \"Hello MooKoo!\"})\nrun()\n```\n\n然后在shell中执行\n\n``` bash\npython mock.py\n# 也可以设定端口\n# python mock.py -p 9928\n```\n\n然后在浏览器中就访问`http://localhost:7928/hello`，就可以看到\n\n``` json\n{\"message\": \"Hello Mookoo\"}\n```\n\n也可以访问`http://localhost:7928/+mookoo`查看此帮助文件\n\n\n\n## 进阶\n\n### 动态加载文件\n\n在`mock1`目录中，创建`hello.json`，然后编辑它，然后使用下面的代码动态加载\n\n``` python\nGET('/hello').load_json('hello.json')\n```\n\n### 修改`Status`和`Header`\n\n``` python\n# 定制Status\nGET('/404').html('<h1>Not found</h1>', status=404)\n\n# 加入Header\nGET('/custom_header').text(\"Press F12\", header={\"My-Header\": \"HeaderContent\"})\n\n# 修改content_type\nGET('/custom_content_type').text(\"<h1>Press F12</h1>\", content_type='text/html')\n```\n\n### 动态响应\n\n``` python\n@GET('/dynamic/<sub>')\ndef _dynamic(sub):\n\tresponse.content_type = 'text/plain'\n    return \"Sub path is %s, query_string is '%s'\" % (sub, request.query_string)\n```\n\n### 静态文件\n\n将一张在`mock1`目录中复制一张图片`hello.jpg`\n\n``` python\nGET('/image').static_file('hello.jpg')\n```\n\n### 静态目录\n\n``` python\n@mookoo.GET('/static/<filename:path>')\ndef _static_dir(filename):\n    return mookoo.static_file(os.path.join('static_dir', filename))\n```\n\n### 动态JSON\n\n在`mock1`目录中，创建`hello.json.py`，内容为:\n\n``` python\nJSON = {\n\t\"message\": \"Python json\",\n    \"query_string\": request.query_string,\n}\n```\n\n然后使用下面的代码加载:\n\n``` python\nGET('/dynamic_json').load_json('hello.json.py')\n```\n\n### Helpers\n\n可以使用`mookoo.helper`注册共享函数，然后在动态JSON中可以使用`helpers`来使用这些函数。例如在`mock.py`中：\n\n``` python\n@helper\ndef helper1():\n\treturn \"Helper1\"\n\n@helper()\ndef helper2():\n\treturn \"Helper2\"\n\n@helper('helper3')\ndef the_name_is_not_helper3():\n\treturn \"Helper3\"\n\nGET('/dynamic_json').load_json('hello.json.py')\n```\n\n在`hello.json.py`中\n\n``` python\nJSON = {\n\t\"message\": \"Python json\",\n    \"query_string\": request.query_string,\n    \"helper1\": helpers.helper1(),\n    \"helper2\": helpers.helper2(),\n    \"helper3\": helpers.helper3(),\n}\n```\n\n### 重定向\n\n``` python\nGET('/redirect').redirect('https://github.com/gaorx/mookoo')\n```\n\n### 代理\n\n``` python\nGET('/http_rfc').proxy('https://tools.ietf.org/rfc/rfc2616.txt')\n```\n\n注意: Proxy只会使用转发源Header中的Status和Content-Type，其余Header不转发。\n\n\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gaorx/mookoo/",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mookoo",
    "package_url": "https://pypi.org/project/mookoo/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mookoo/",
    "project_urls": {
      "Homepage": "https://github.com/gaorx/mookoo/"
    },
    "release_url": "https://pypi.org/project/mookoo/0.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Mock HTTP server",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2057235,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0e2db6c04ae6dcb30599e5d1a080136ed015cc9495657a10c47ed6eb12df48a",
          "md5": "76ede2f9312c2801740b8b7c8c9f1bb8",
          "sha256": "36cce15c4708d36bd5df218e76f8ee7abfdc24d41ef3ce040f56f37c1f5be430"
        },
        "downloads": -1,
        "filename": "mookoo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "76ede2f9312c2801740b8b7c8c9f1bb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50546,
        "upload_time": "2016-04-11T07:28:47",
        "upload_time_iso_8601": "2016-04-11T07:28:47.770426Z",
        "url": "https://files.pythonhosted.org/packages/c0/e2/db6c04ae6dcb30599e5d1a080136ed015cc9495657a10c47ed6eb12df48a/mookoo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0e2db6c04ae6dcb30599e5d1a080136ed015cc9495657a10c47ed6eb12df48a",
        "md5": "76ede2f9312c2801740b8b7c8c9f1bb8",
        "sha256": "36cce15c4708d36bd5df218e76f8ee7abfdc24d41ef3ce040f56f37c1f5be430"
      },
      "downloads": -1,
      "filename": "mookoo-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "76ede2f9312c2801740b8b7c8c9f1bb8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 50546,
      "upload_time": "2016-04-11T07:28:47",
      "upload_time_iso_8601": "2016-04-11T07:28:47.770426Z",
      "url": "https://files.pythonhosted.org/packages/c0/e2/db6c04ae6dcb30599e5d1a080136ed015cc9495657a10c47ed6eb12df48a/mookoo-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}