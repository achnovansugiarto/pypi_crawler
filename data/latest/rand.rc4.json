{
  "info": {
    "author": "kororo",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "rand\n====\n\n[![Travis (.org)](https://img.shields.io/travis/kororo/rand)](https://pypi.python.org/project/rand/)\n[![Coverage Status](https://coveralls.io/repos/github/kororo/rand/badge.svg?branch=master)](https://coveralls.io/github/kororo/rand?branch=master)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson.mit-license.org/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/rand.svg)](https://pypi.python.org/project/rand/)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/rand)](https://pypi.python.org/project/rand/)\n\n---\n\nRandom generated String from regex pattern\n\n# WARNING\n\nThe library **rand** is still in working-in-progress. It is subject to high possibility of API changes. Would appreciate feedback, suggestions or help.\n\n# Why?\n\nThere are lot of existing projects similar to **rand**, they are powerful and have similar goals and results. However most of them are old projects/non-maintained and non-MIT licenses.\n\nThis is a good opportunity for **rand** to be the library to help generate random data for any projects and gather all other existing libraries to be the main driver.\n\n\n# Install\n\nUse pip or clone this repository and execute the setup.py file.\n\n```shell script\n$ pip install rand\n```\n\n# Usages\n\nBasic usage **rand** examples\n\n```python\n# import module\nfrom rand import Rand\n\n# initialise object\nrnd = Rand()\n\n# generate pattern literal\nrnd.gen('koro') # ['koro']\nrnd.gen('28') # ['28']\nrnd.gen('a-z') # ['a-z']\n\n# generate pattern any\nrnd.gen('.') # any char in string.printable\n\n# generate pattern branch\nrnd.gen('ko|ro') # either ['ko'] or ['ro']\nrnd.gen('ko|ro|ro') # either ['ko'] or ['ro']\n\n# generate pattern in\nrnd.gen('[kororo]') # either ['k'] or ['o'] or ['r']\nrnd.gen('k[o]r[o]r[o]') # ['kororo']\n\n# generate pattern repeat\nrnd.gen('r{2,8}') # char r in length between 2 to 8 times\n\n# generate pattern range\nrnd.gen('[a-z]') # char between a to z\n\n# generate pattern subpattern\nrnd.gen('(ro)') # ['ro']\n```\n\nProviders\n---------\n\nThe library **rand** at core only provide random generators based on regex. Providers are built to allow extensions for rand.\n\n## Built-in Providers\n\nThere are a few built-in providers inside **rand**\n\n### EN Provider\n\nThis library covers most usage around English requirements.\n\n```python\nfrom rand import Rand\n\n\nrnd = Rand()\nrnd.gen('(:en_vocal:)') # char either a, i, u, e, o\n```\n\n### Dataset Provider\n\nThis library helps on getting data from dataset such as Python object or Database with [peewee](https://github.com/coleifer/peewee).\n\n```python\nfrom rand import Rand\nfrom rand.providers.ds import RandDatasetBaseProvider, ListDatasetTarget\n\n\n# example using dict of list\ndb = {'names': ['test1', 'test1'], 'cities': ['test2', 'test2']}\nds = RandDatasetBaseProvider(prefix='ds', target=ListDatasetTarget(db=db))\nrnd = Rand()\nrnd.register_provider(ds)\nrnd.gen('(:ds_get:)', ['names'])  # ['test1']\nrnd.gen('(:ds_get:)', ['cities']) # ['test2']\n# or, magic getattr\nrnd.gen('(:ds_get_names:)-(:ds_get_cities:)') # ['test1-test2']\n\n# example of database using peewee\nfrom peewee import Proxy\nfrom playhouse.sqlite_ext import CSqliteExtDatabase\nfrom rand.providers.ds import RandDatasetBaseProvider, DBDatasetTarget\ndb = Proxy()\n# ensure to have table with name \"names\", contains column at least (id, name)\ndb.initialize(CSqliteExtDatabase(':memory:', bloomfilter=True))\nds = RandDatasetBaseProvider(prefix='ds', target=DBDatasetTarget(db=db))\nrnd = Rand()\nrnd.register_provider(ds)\nrnd.gen('(:ds_get:)', ['names']) # ['test']\ndb.close()\n```\n\n## Integration Providers\n\nThe library *rand* also has integration with existing projects such as Faker. Ensure you have faker library installed.\n\n### [Faker](https://github.com/joke2k/faker)\n\nThere is super basic integration with Faker for now, soon will be more implemented.\n\n```shell script\n# ensure you have Faker installed\npip install Faker\n```\n\n```python\nfrom rand import Rand\n\n\nrnd = Rand()\nrnd.gen('(:faker_hexify:)') # abc\n```\n\n## Custom Parse\n\nExtending rand is simple, there are register_parse and register_provider, both of this has special level of customisation.\n\n### Simple Register Parse\n\nThis is example of creating custom parse in simple way.\n\n```python\nfrom rand import Rand\n\n# init rand class\nrnd = Rand()\n\n# the definition\ndef parse_test1(pattern, opts=None):\n    return 'test1'\n\n# the registration\nrnd.register_parse(name='test1', fn=parse_test1)\n# test it\nrnd.gen('(:test1:)')\n```\n\n### Decorator Wrapper Register Parse\n\nThis is faster way with decorator pattern to register custom parse.\n\n```python\nfrom rand import Rand\n\n# init rand class\nrnd = Rand()\n\n# the definition\n@rnd.register_parse_wrapper(name='test1')\ndef parse_test1(pattern, opts=None):\n    return 'test1'\n\n# test it\nrnd.gen('(:test1:)')\n```\n\n## Custom Providers\n\nCustom provider is upper level customisation in **rand**, it behaves quite differently than custom parse  \n\n### Simple Register Provider\n\nBelow is sample code on how to integrate an existing class definition (TestProxy) to Rand.\n\n```python\nfrom rand.providers.base import RandBaseProvider\nfrom rand import Rand\n\nclass TestProvider(RandBaseProvider):\n    def _parse_fn(self, pattern, opts=None):\n        return 'test'\n\n    def parse(self, name: str, pattern: any, opts: dict):\n        # name always start with _parse_[PREFIX], normalise first\n        parsed_name = self.get_parse_name(name)\n        if parsed_name:\n            return self._parse_fn(pattern, opts)\n        return None\n\n# init rand class\nrnd = Rand()\nrnd.register_provider(TestProvider(prefix='test_fn'))\nassert rnd.gen('(:test_fn:)') == 'test'\n```\n\n```python\nfrom rand import Rand\nfrom rand.providers.base import RandProxyBaseProvider\n\n# class definition\nclass TestProxy:\n    # simple function definition to return args values\n    def target(self, arg1='def1', arg2='def2'):\n        return '%s-%s' % (arg1, arg2)\n\n# init rand class\nrnd = Rand()\n\n# create proxy provider helper and register to rand\ntest_proxy = RandProxyBaseProvider(prefix='test', target=TestProxy())\nrnd.register_provider(test_proxy)\n\n# test\nprint(rnd.gen('(:test_target:)')) # ['def1-def2']\nprint(rnd.gen('(:test_target:)', ['ok1'])) # ['ok1-def2']\nprint(rnd.gen('(:test_target:)', ['ok1', 'ok2'])) # ['ok1-def2']\nprint(rnd.gen('(:test_target:)', [['ok1', 'ok2']])) # ['ok1-ok2']\nprint(rnd.gen('(:test_target:)', [['ok1', 'ok2'], 'ok3'])) # ['ok1-ok2']\nprint(rnd.gen('(:test_target:)', [{'arg1': 'ok1'}])) # ['ok1-def2']\nprint(rnd.gen('(:test_target:)', [{'arg1': 'ok1', 'arg2': 'ok2'}])) # ['ok1-ok2']\n```\n\n### Decorator Wrapper Register Provider\n\nThis is faster way with decorator pattern to register custom provider.\n\n```python\nfrom rand import Rand\n\n# init rand class\nrnd = Rand()\n\n@rnd.register_provider_fn_wrapper(prefix='test2')\ndef parse_test2(pattern, opts=None):\n    return 'test2'\n\nprint(rnd.gen('(:test2:)'))  # 'test2'\n```\n\n## Different Between Custom Parser and Provider\n\nThe way **rand** works, register_parse taps into the core of **rand**, following the token from sre_parse, when the definition is returned,\nit is possible to return sre_parse token with existing token name or custom token which points to the custom definition.\n\n```python\nfrom rand import Rand\n\n# init rand class\nrnd = Rand()\n\n@rnd.register_parse_wrapper(name='test1')\ndef parse_test1(pattern, opts=None):\n    return 'test1'\n\n\n@rnd.register_parse_wrapper(name='test2')\ndef parse_test2(pattern, opts=None):\n    return rnd.sre_parse_compile_parse('(:test1:)')\n\n\nprint(rnd.gen('(:test2:)'))  # 'test1'\n```\n\n\n\n\n\n\n# Test\n\nRun test by installing packages and run tox\n\n```shell script\n$ pip install poetry tox\n$ tox\n$ tox -e py36 -- tests/test_ds.py\n```\n\nFor hot-reload development coding\n```shell script\n$ npm i -g nodemon\n$ nodemon -w rand --exec python -c \"from rand import Rand\"\n```\n\n# Help?\n\nAny feedback, suggestions and integration with 3rd-party libraries can be added using PR or create issues if needed helps. \n\n# Similar Projects\n\nList of projects similar to **rand**:\n- [exrex](https://github.com/asciimoo/exrex): Irregular methods on regular expressions\n- [xeger](https://github.com/crdoconnor/xeger): Library to generate random strings from regular expressions\n- [strgen](https://github.com/paul-wolf/strgen): A Python module for a template language that generates randomized data\n\n# Acknowdlge Projects\n\nList of projects that **rand** depends on:\n- [peewee](https://github.com/coleifer/peewee): a small, expressive orm -- supports postgresql, mysql and sqlite\n- [pytest](https://github.com/pytest-dev/pytest/): The pytest framework makes it easy to write small tests, yet scales to support complex functional testing\n- [coverage](https://github.com/nedbat/coveragepy): Code coverage measurement for Python\n- [pytest-cov](https://github.com/pytest-dev/pytest-cov): Coverage plugin for pytest\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kororo/rand",
    "keywords": "random,generator,string,regex",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rand",
    "package_url": "https://pypi.org/project/rand/",
    "platform": "",
    "project_url": "https://pypi.org/project/rand/",
    "project_urls": {
      "Homepage": "https://github.com/kororo/rand",
      "Repository": "https://github.com/kororo/rand"
    },
    "release_url": "https://pypi.org/project/rand/0.3.0/",
    "requires_dist": [
      "pytest-cov (>=2.0,<3.0)",
      "peewee (>=3.13.3,<4.0.0)",
      "requests (>=2.23.0,<3.0.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Generate String from regex pattern",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7204223,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "692c7e7306239be12ae40a2efcf598a7548b082b3eedef353bc097580ccc2f83",
          "md5": "b462c287e927e8d5dc1baa918a63ad56",
          "sha256": "7a9cded37cbb3ad39e6b85c08b5ca77ee35f5ad5124f6a4f813ba1ecd914f026"
        },
        "downloads": -1,
        "filename": "rand-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b462c287e927e8d5dc1baa918a63ad56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 3074,
        "upload_time": "2020-04-09T11:14:23",
        "upload_time_iso_8601": "2020-04-09T11:14:23.028010Z",
        "url": "https://files.pythonhosted.org/packages/69/2c/7e7306239be12ae40a2efcf598a7548b082b3eedef353bc097580ccc2f83/rand-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "868e57c908a5d2a33a11d4d8f1652a23190ba3d4ee40f60d1001324f73bf69a5",
          "md5": "ef36db52eec4b1e259c45c6c1df57dbf",
          "sha256": "cd102d5211ad9eeb50ebab306d8cc2e4e813650661ea006cf98d3c88b62f3f6a"
        },
        "downloads": -1,
        "filename": "rand-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef36db52eec4b1e259c45c6c1df57dbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 2690,
        "upload_time": "2020-04-09T11:14:25",
        "upload_time_iso_8601": "2020-04-09T11:14:25.386353Z",
        "url": "https://files.pythonhosted.org/packages/86/8e/57c908a5d2a33a11d4d8f1652a23190ba3d4ee40f60d1001324f73bf69a5/rand-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f07ec5058048449f16472b23d50921225cb7913c74cbc38fe5e56b9b822bbd8",
          "md5": "f20df6a0e0060ce29c4f1fc763072743",
          "sha256": "7247207c0c973c5505483105e4bc35db9de32a3db56bc77b4cef3e5db92fbfff"
        },
        "downloads": -1,
        "filename": "rand-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f20df6a0e0060ce29c4f1fc763072743",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 7656,
        "upload_time": "2020-04-12T03:43:21",
        "upload_time_iso_8601": "2020-04-12T03:43:21.058504Z",
        "url": "https://files.pythonhosted.org/packages/3f/07/ec5058048449f16472b23d50921225cb7913c74cbc38fe5e56b9b822bbd8/rand-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a089a3bd9f80bc1c8e97373d51b9c2324b2512406bdd6faca4f83a3db1b2f7d",
          "md5": "6e1aacc120d5437a9b4ec341a17d890a",
          "sha256": "53b96d98a0ec02325e24c36db9d165f562015a0783324ba2c2f9f4897e51c1f5"
        },
        "downloads": -1,
        "filename": "rand-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6e1aacc120d5437a9b4ec341a17d890a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 7139,
        "upload_time": "2020-04-12T03:43:22",
        "upload_time_iso_8601": "2020-04-12T03:43:22.793072Z",
        "url": "https://files.pythonhosted.org/packages/0a/08/9a3bd9f80bc1c8e97373d51b9c2324b2512406bdd6faca4f83a3db1b2f7d/rand-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd423ac3ac5c659425071d7486b4277bcec61760f772b95033d1eace65e8723e",
          "md5": "e886aeb000d8c2f56da154dd56b49642",
          "sha256": "f912aa47408fb0331714f7d0e67296f0ba5671952cbcbeb68b95cb282ac4cb93"
        },
        "downloads": -1,
        "filename": "rand-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e886aeb000d8c2f56da154dd56b49642",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 10614,
        "upload_time": "2020-05-01T04:15:38",
        "upload_time_iso_8601": "2020-05-01T04:15:38.183020Z",
        "url": "https://files.pythonhosted.org/packages/bd/42/3ac3ac5c659425071d7486b4277bcec61760f772b95033d1eace65e8723e/rand-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ae5c21a9eb8d6f82c19d5ae48d2e87dbd86673312ffa30b0c861553ce0ce335",
          "md5": "e9b68fc6c9f3f4317261279f48acc660",
          "sha256": "d8405a26ed6a1e53b58e299f5df879d182377b54a06bdb7b9eb890240b06374a"
        },
        "downloads": -1,
        "filename": "rand-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e9b68fc6c9f3f4317261279f48acc660",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 11640,
        "upload_time": "2020-05-01T04:15:40",
        "upload_time_iso_8601": "2020-05-01T04:15:40.030591Z",
        "url": "https://files.pythonhosted.org/packages/7a/e5/c21a9eb8d6f82c19d5ae48d2e87dbd86673312ffa30b0c861553ce0ce335/rand-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c975a3be8178774e475eab96b7836126cecb07b811cb12a64b6b1f29b0395916",
          "md5": "800aa9c5790d98e2bcf972ed6f438114",
          "sha256": "6c0a46e2bdef2fb1b569ccf8ef3014d5c3aea5bc0092fd2d1b625f58d61390d7"
        },
        "downloads": -1,
        "filename": "rand-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "800aa9c5790d98e2bcf972ed6f438114",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 13107,
        "upload_time": "2020-05-09T15:40:35",
        "upload_time_iso_8601": "2020-05-09T15:40:35.312742Z",
        "url": "https://files.pythonhosted.org/packages/c9/75/a3be8178774e475eab96b7836126cecb07b811cb12a64b6b1f29b0395916/rand-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33d012efa7230445849141029623bf64fcb7cc15f3462332b8be654d0e2be38f",
          "md5": "a6ccc928ba9b7fb0a6a0cbe37da669be",
          "sha256": "8c7dcdebf5ddd0088893bdf850ea62275e337a44e702927405168031c9d7ee91"
        },
        "downloads": -1,
        "filename": "rand-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a6ccc928ba9b7fb0a6a0cbe37da669be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 14068,
        "upload_time": "2020-05-09T15:40:37",
        "upload_time_iso_8601": "2020-05-09T15:40:37.164898Z",
        "url": "https://files.pythonhosted.org/packages/33/d0/12efa7230445849141029623bf64fcb7cc15f3462332b8be654d0e2be38f/rand-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c975a3be8178774e475eab96b7836126cecb07b811cb12a64b6b1f29b0395916",
        "md5": "800aa9c5790d98e2bcf972ed6f438114",
        "sha256": "6c0a46e2bdef2fb1b569ccf8ef3014d5c3aea5bc0092fd2d1b625f58d61390d7"
      },
      "downloads": -1,
      "filename": "rand-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "800aa9c5790d98e2bcf972ed6f438114",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 13107,
      "upload_time": "2020-05-09T15:40:35",
      "upload_time_iso_8601": "2020-05-09T15:40:35.312742Z",
      "url": "https://files.pythonhosted.org/packages/c9/75/a3be8178774e475eab96b7836126cecb07b811cb12a64b6b1f29b0395916/rand-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33d012efa7230445849141029623bf64fcb7cc15f3462332b8be654d0e2be38f",
        "md5": "a6ccc928ba9b7fb0a6a0cbe37da669be",
        "sha256": "8c7dcdebf5ddd0088893bdf850ea62275e337a44e702927405168031c9d7ee91"
      },
      "downloads": -1,
      "filename": "rand-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a6ccc928ba9b7fb0a6a0cbe37da669be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 14068,
      "upload_time": "2020-05-09T15:40:37",
      "upload_time_iso_8601": "2020-05-09T15:40:37.164898Z",
      "url": "https://files.pythonhosted.org/packages/33/d0/12efa7230445849141029623bf64fcb7cc15f3462332b8be654d0e2be38f/rand-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}