{
  "info": {
    "author": "Matthew Egan Odendahl",
    "author_email": "hissp03.gilch@xoxy.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Lisp",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Compilers",
      "Topic :: Software Development :: Interpreters",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Pre-processors"
    ],
    "description": "<!--\nCopyright 2019, 2020, 2021, 2022 Matthew Egan Odendahl\nSPDX-License-Identifier: Apache-2.0\n-->\n[![Gitter](https://badges.gitter.im/hissp-lang/community.svg)](https://gitter.im/hissp-lang/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Documentation Status](https://readthedocs.org/projects/hissp/badge/?version=latest)](https://hissp.readthedocs.io/en/latest/?badge=latest)\n[![codecov](https://codecov.io/gh/gilch/hissp/branch/master/graph/badge.svg)](https://codecov.io/gh/gilch/hissp)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n<!-- Hidden doctest requires basic macros for REPL-consistent behavior.\n#> (operator..setitem (globals) '_macro_ (types..SimpleNamespace : :** (vars hissp.basic.._macro_)))\n>>> __import__('operator').setitem(\n...   globals(),\n...   '_macro_',\n...   __import__('types').SimpleNamespace(\n...     **vars(\n...         __import__('hissp.basic',fromlist='?')._macro_)))\n\n-->\n![Hissp](https://raw.githubusercontent.com/gilch/hissp/master/docs/hissp.svg)\n\nIt's Python with a *Lissp*.\n\nHissp is a modular Lisp implementation that compiles to a functional subset of\nPython—Syntactic macro metaprogramming with full access to the Python ecosystem!\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n**Table of Contents**\n\n- [Installation](#installation)\n- [Show Me Code!](#show-me-code)\n    - [Readerless Mode](#readerless-mode)\n    - [Lissp](#lissp)\n    - [Hebigo](#hebigo)\n- [Features and Design](#features-and-design)\n    - [Radical Extensibility](#radical-extensibility)\n    - [Minimal implementation](#minimal-implementation)\n    - [Interoperability](#interoperability)\n    - [Useful error messages](#useful-error-messages)\n    - [Syntax compatible with Emacs' `lisp-mode` and Parlinter](#syntax-compatible-with-emacs-lisp-mode-and-parlinter)\n    - [Standalone output](#standalone-output)\n    - [REPL](#repl)\n    - [Same-module macro helpers](#same-module-macro-helpers)\n    - [Modularity](#modularity)\n\n<!-- markdown-toc end -->\n\n# Installation\n\nHissp requires Python 3.8+.\n\nInstall the latest PyPI release with\n```\npython -m pip install -U hissp\n```\nOr install the bleeding-edge version directly from GitHub with\n```\npython -m pip install -U git+https://github.com/gilch/hissp\n```\n\n# Show Me Code!\n\n## Readerless Mode\nHissp is a *metaprogramming* language composed of Python data structured into trees of tuples,\n```python\n>>> hissp_code = (\n... ('lambda',('name',),\n...  ('print',('quote','Hello'),'name',),)\n... )\n\n```\nwhich are compiled to Python code,\n```python\n>>> from hissp.compiler import readerless\n>>> python_code = readerless(hissp_code)\n>>> print(python_code)\n(lambda name:\n  print(\n    'Hello',\n    name))\n\n```\nand evaluated by Python.\n```python\n>>> eval(python_code)('World')\nHello World\n\n```\n\n## Lissp\n\nThe Hissp data-structure language can be written directly in Python using the \"readerless mode\" demonstrated above,\nor it can be read in from a lightweight textual language called *Lissp* that represents the Hissp.\n```python\n>>> lissp_code = \"\"\"\n... (lambda (name)\n...   (print 'Hello name))\n... \"\"\"\n\n```\nAs you can see, this results in exactly the same Hissp code as the previous example.\n```python\n>>> from hissp.reader import Lissp\n>>> next(Lissp().reads(lissp_code))\n('lambda', ('name',), ('print', ('quote', 'Hello'), 'name'))\n>>> _ == hissp_code\nTrue\n\n```\n\nHissp comes with a basic REPL (read-eval-print loop, or interactive command-line interface)\nwhich compiles Hissp (read from Lissp) to Python and passes that to the Python REPL for execution.\n\nLissp can also be read from ``.lissp`` files,\nwhich compile to Python modules.\n\nHere's one definition from the basic macros:\n```Lisp\n(defmacro attach (target : :* args)\n  \"Attaches the named variables as attributes of the target.\n\n  Positional arguments use the same name as the variable.\n  Names after the ``:`` are identifier-value pairs.\n  \"\n  (let (iargs (iter args)\n        $target `$#target)\n    (let (args (itertools..takewhile (lambda (a)\n                                       (operator..ne a ':))\n                                     iargs))\n      `(let (,$target ,target)\n         ,@(map (lambda (arg)\n                  `(setattr ,$target ',arg ,arg))\n                args)\n         ,@(map (lambda (kw)\n                  `(setattr ,$target ',kw ,(next iargs)))\n                iargs)\n         ,$target))))\n```\nIf you've never used a Lisp before, don't let this scare you.\nYou should be able to read this much after completing the\n[tutorials](https://hissp.readthedocs.io/).\n\n## Hebigo\n\nHissp is modular, and the reader included for Lissp is not the only one.\nHere's a native unit test class from the separate\n[Hebigo](https://github.com/gilch/hebigo) prototype,\na Hissp reader and macro suite implementing a language designed to resemble Python:\n```python\nclass: TestOr: TestCase\n  def: .test_null: self\n    self.assertEqual: () or:\n  def: .test_one: self x\n    :@ given: st.from_type: type\n    self.assertIs: x or: x\n  def: .test_two: self x y\n    :@ given:\n      st.from_type: type\n      st.from_type: type\n    self.assertIs: (x or y) or: x y\n  def: .test_shortcut: self\n    or: 1 (0/0)\n    or: 0 1 (0/0)\n    or: 1 (0/0) (0/0)\n  def: .test_three: self x y z\n    :@ given:\n      st.from_type: type\n      st.from_type: type\n      st.from_type: type\n    self.assertIs: (x or y or z) or: x y z\n```\n\nThe same Hissp macros work in readerless mode, Lissp, and Hebigo, and can be written in any of these.\nGiven Hebigo's macros, the class above could be written in the equivalent way in Lissp:\n\n```Lisp\n(class_ (TestOr TestCase)\n  (def_ (.test_null self)\n    (self.assertEqual () (or_)))\n  (def_ (.test_one self x)\n    :@ (given (st.from_type type))\n    (self.assertIs x (or_ x)))\n  (def_ (.test_two self x y)\n    :@ (given (st.from_type type)\n              (st.from_type type))\n    (self.assertIs .#\"x or y\" (or_ x y)))\n  (def_ (.test_shortcut self)\n    (or_ 1 .#\"0/0\")\n    (or_ 0 1 .#\"0/0\")\n    (or_ 1 .#\"0/0\" .#\"0/0\"))\n  (def_ (.test_three self x y z)\n    :@ (given (st.from_type type)\n              (st.from_type type)\n              (st.from_type type))\n    (self.assertIs .#\"x or y or z\" (or_ x y z))))\n```\n\nHebigo looks very different from Lissp, but they are both Hissp!\nIf you quote this Hebigo code and print it out,\nyou get Hissp code, just like you would with Lissp.\n\nIn Hebigo's REPL, that looks like\n```\nIn [1]: pprint..pp:quote:class: TestOr: TestCase\n   ...:   def: .test_null: self\n   ...:     self.assertEqual: () or:\n   ...:   def: .test_one: self x\n   ...:     :@ given: st.from_type: type\n   ...:     self.assertIs: x or: x\n   ...:   def: .test_two: self x y\n   ...:     :@ given:\n   ...:       st.from_type: type\n   ...:       st.from_type: type\n   ...:     self.assertIs: (x or y) or: x y\n   ...:   def: .test_shortcut: self\n   ...:     or: 1 (0/0)\n   ...:     or: 0 1 (0/0)\n   ...:     or: 1 (0/0) (0/0)\n   ...:   def: .test_three: self x y z\n   ...:     :@ given:\n   ...:       st.from_type: type\n   ...:       st.from_type: type\n   ...:       st.from_type: type\n   ...:     self.assertIs: (x or y or z) or: x y z\n   ...: \n('hebi.basic.._macro_.class_',\n ('TestOr', 'TestCase'),\n ('hebi.basic.._macro_.def_',\n  ('.test_null', 'self'),\n  ('self.assertEqual', '()', ('hebi.basic.._macro_.or_',))),\n ('hebi.basic.._macro_.def_',\n  ('.test_one', 'self', 'x'),\n  ':@',\n  ('given', ('st.from_type', 'type')),\n  ('self.assertIs', 'x', ('hebi.basic.._macro_.or_', 'x'))),\n ('hebi.basic.._macro_.def_',\n  ('.test_two', 'self', 'x', 'y'),\n  ':@',\n  ('given', ('st.from_type', 'type'), ('st.from_type', 'type')),\n  ('self.assertIs', '((x or y))', ('hebi.basic.._macro_.or_', 'x', 'y'))),\n ('hebi.basic.._macro_.def_',\n  ('.test_shortcut', 'self'),\n  ('hebi.basic.._macro_.or_', 1, '((0/0))'),\n  ('hebi.basic.._macro_.or_', 0, 1, '((0/0))'),\n  ('hebi.basic.._macro_.or_', 1, '((0/0))', '((0/0))')),\n ('hebi.basic.._macro_.def_',\n  ('.test_three', 'self', 'x', 'y', 'z'),\n  ':@',\n  ('given',\n   ('st.from_type', 'type'),\n   ('st.from_type', 'type'),\n   ('st.from_type', 'type')),\n  ('self.assertIs',\n   '((x or y or z))',\n   ('hebi.basic.._macro_.or_', 'x', 'y', 'z'))))\n```\n\nWant more examples? See the [Hissp documentation](https://hissp.readthedocs.io/) for the quickstart and tutorials.\n\n# Features and Design\n\n## Radical Extensibility\n\nPython is already a really nice language, so why do we need Hissp?\n\n> *Any sufficiently complicated C or Fortran program contains an ad hoc,\ninformally-specified, bug-ridden, slow implementation of half of Common Lisp.*  \n— Greenspun's Tenth Rule\n\nIf the only programming languages you've tried are those designed to feel familiar to C programmers,\nyou might think they're all the same.\n\nI assure you, they are not.\n\nWhile any Turing-complete language has equivalent theoretical power,\nthey are not equally *expressive*.\nThey can be higher or lower level.\nYou already know this.\nIt's why you don't write assembly language when you can avoid it.\nIt's not that assembly isn't powerful enough to do everything Python can.\nUltimately, the machine only understands machine code.\nThe best programming languages have some kind of expressive superpower.\nFeatures that lesser languages lack.\n\nLisp's superpower is *metaprogramming*,\nand it's the power to copy the others.\nIt's not that Python can't do metaprogramming at all.\n(Python is Turing complete, after all.)\nYou can already do all of this in Python,\nand more easily than in lower languages.\nBut it's too difficult (compared to Lisp),\nso it's done rarely and by specialists.\nThe use of `exec()` is frowned upon.\nIt's easy enough to understand, but hard to get right.\nPython Abstract Syntax Tree (AST)\nmanipulation is a somewhat more reliable technique,\nbut not for the faint of heart.\nPython AST is not simple, because Python isn't.\n\nPython really is a great language to work with.\n\"Executable pseudocode\" is not far off.\nBut it is too complex to be good at metaprogramming.\nBy stripping Python down to a minimal subset,\nand encoding that subset as data structures rather than text,\nHissp makes metaprogramming as easy as\nthe kind of data manipulation you already do every day.\nOn its own, meta-power doesn't seem that impressive.\nBut the powers you can make with it can be.\nThose who've mastered metaprogramming wonder how they ever got along without it.\n\nActively developed languages keep accumulating features,\nPython included.\nOften they're helpful, but sometimes it's a misstep.\nThe more complex a language gets,\nthe more difficult it becomes to master.\n\nHissp takes the opposite approach: extensibility through simplicity.\nMajor features that would require a new language version in lower languages\ncan be a library in a Lisp.\nIt's how Clojure got Goroutines like Go and logic programming like Prolog,\nwithout changing the core language at all.\nThe Lissp reader and Hissp compiler are both extensible with macros.\n\nIt's not just about getting other superpowers from other languages,\nbut all the minor powers you can make yourself along the way.\nYou're not going to campaign for a new Python language feature\nand wait six months for another release\njust for something that might be nice to have for you special problem at the moment.\nBut in Hissp you can totally have that.\nYou can program the language itself to fit your problem domain.\n\nOnce your Python project is \"sufficiently complicated\",\nyou'll start hacking in new language features just to cope.\nAnd it will be hard,\nbecause you'll be using a language too low-level for your needs,\neven if it's a relatively high-level language like Python.\n\nLisp is as high level as it gets.\nYou're going to need it.\nWhy settle for anything less?\n\n## Minimal implementation\nHissp serves as a modular component for other projects.\nThe language and its implementation are meant to be small and comprehensible\nby a single individual.\n\nThe Hissp compiler should include what it needs to achieve its goals,\nbut no more. Bloat is not allowed.\nA goal of Hissp is to be as small as reasonably possible, but no smaller.\nWe're not code golfing here; readability still counts.\nBut this project has *limited scope*.\nHissp's powerful macro system means that additions to the compiler are\nrarely needed.\nFeature creep belongs in external libraries,\nnot in the compiler proper.\n\nHissp compiles to an unpythonic *functional subset* of Python.\nThis subset has a direct and easy-to-understand correspondence to the Hissp code,\nwhich makes it straightforward to debug, once you understand Hissp.\nBut it is definitely not meant to be idiomatic Python.\nThat would require a much more complex compiler,\nbecause idiomatic Python is not simple.\n\nHissp's basic macros are meant to be just enough to bootstrap native unit tests\nand demonstrate the macro system.\nThey may suffice for small embedded Hissp projects,\nbut you will probably want a more comprehensive macro suite for general use.\n\nCurrently, that means using [Hebigo](https://github.com/gilch/hebigo),\nwhich has macro equivalents of most Python statements.\n\nThe Hebigo project includes an alternative indentation-based Hissp reader,\nbut the macros are written in readerless mode and are also compatible with the\nS-expression \"Lissp\" reader bundled with Hissp.\n\n## Interoperability\nWhy base a Lisp on Python when there are already lots of other Lisps?\n\nPython has a rich selection of libraries for a variety of domains\nand Hissp can mostly use them as easily as the standard library.\nThis gives Hissp a massive advantage over other Lisps with less selection.\nIf you don't care to work with the Python ecosystem,\nperhaps Hissp is not the Lisp for you.\n\nNote that the Hissp compiler is written in Python 3.8.\n(Supporting older versions is not a goal,\nbecause that would complicate the compiler.\nThis may limit the available libraries.)\nBut because the compiler's target functional Python subset is so small,\nthe compiled output can usually run on Python 3.5 without too much difficulty.\nWatch out for positional-only arguments (new to 3.8)\nand changes to the standard library.\nRunning on versions even older than 3.5 is not recommended,\nbut may likewise be possible if you carefully avoid using newer Python features.\n\nPython code can also import and use packages written in Hissp,\nbecause they compile to Python.\n\n## Useful error messages\nOne of Python's best features.\nAny errors that prevent compilation should be easy to find.\n\n## Syntax compatible with Emacs' `lisp-mode` and Parlinter\nA language is not very usable without tools.\nHissp's basic reader syntax (Lissp) should work with Emacs.\n\n## Standalone output\nThis is part of Hissp's commitment to modularity.\n\nOne can, of course, write Hissp code that depends on any Python library.\nBut the compiler does not depend on emitting calls out to any special\nHissp helper functions to work.\nYou do not need Hissp installed to run the final compiled Python output,\nonly Python itself.\n\nHissp includes some very basic Lisp macros to get you started.\nTheir expansions have no external requirements either.\n\nLibraries built on Hissp need not have this restriction.\n\n## REPL\nA Lisp tradition, and Hissp is no exception.\nEven though it's a compiled language,\nHissp has an interactive command-line interface like Python does.\nThe REPL displays the compiled Python and evaluates it.\nPrinted values use the normal Python reprs.\n(Translating those to back to Lissp is not a goal.\nLissp is not the only Hissp reader.)\n\n## Same-module macro helpers\nFunctions are generally preferable to macros when functions can do the job.\nThey're more reusable and composable.\nTherefore, it makes sense for macros to delegate to functions where possible.\nBut such a macro should work in the same module.\nThis requires incremental compilation and evaluation of forms in Lissp modules,\nlike the REPL.\n\n## Modularity\nThe Hissp language is made of tuples (and atoms), not text.\nThe S-expression reader included with the project (Lissp) is just a convenient\nway to write them.\nIt's possible to write Hissp in \"readerless mode\"\nby writing these tuples in Python.\n\nBatteries are not included because Python already has them.\nHissp's standard library is Python's.\nThere are only two special forms: ``quote`` and ``lambda``.\nHissp does include a few basic macros and reader macros,\njust enough to write native unit tests,\nbut you are not obligated to use them when writing Hissp.\n\nIt's possible for an external project to provide an alternative\nreader with different syntax, as long as the output is Hissp code.\nOne example of this is [Hebigo](https://github.com/gilch/hebigo),\nwhich has a more Python-like indentation-based syntax.\n\nBecause Hissp produces standalone output, it's not locked into any one Lisp paradigm.\nIt could work with a Clojure-like, Scheme-like, or Common-Lisp-like, etc.,\nreader, function, and macro libraries.\n\nIt is a goal of the project to allow a more Clojure-like reader and\na complete function/macro library.\nBut while this informs the design of the compiler,\nit is beyond the scope of Hissp proper,\nand does not belong in the Hissp repository.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gilch/hissp",
    "keywords": "lisp macro metaprogramming compiler interpreter DSL AST transpiler emacs clojure scheme language minimal REPL metaprogramming macros extensible s-expressions code-generation no-dependencies quasiquote backquote syntax-quote template Hissp Lissp",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hissp",
    "package_url": "https://pypi.org/project/hissp/",
    "platform": "",
    "project_url": "https://pypi.org/project/hissp/",
    "project_urls": {
      "Homepage": "https://github.com/gilch/hissp"
    },
    "release_url": "https://pypi.org/project/hissp/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "It's Python with a Lissp.",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12835739,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db0ff6f467b8ffeb8562984cf761d8dcd23e6957604a628a18a9aedd157ed3ba",
          "md5": "8e474a886104db67ac5fcac6be6ddfd3",
          "sha256": "58b440da3588d2f3e792eda93acd5dbc540b0999f088219854ea1736ee6cf957"
        },
        "downloads": -1,
        "filename": "hissp-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8e474a886104db67ac5fcac6be6ddfd3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 54885,
        "upload_time": "2019-06-29T21:28:26",
        "upload_time_iso_8601": "2019-06-29T21:28:26.002762Z",
        "url": "https://files.pythonhosted.org/packages/db/0f/f6f467b8ffeb8562984cf761d8dcd23e6957604a628a18a9aedd157ed3ba/hissp-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f4e67b12c8941983fb0fe79b461803c332066c47619631386e49ca91dd0a0cf",
          "md5": "a34ac3d766b2dceec68bf4647c5082cf",
          "sha256": "dcd77285ecf2d05b534f5b6b08c3ad87363badd0ca3f15bfb03f2583813bda7a"
        },
        "downloads": -1,
        "filename": "hissp-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a34ac3d766b2dceec68bf4647c5082cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 39377,
        "upload_time": "2021-01-17T05:09:48",
        "upload_time_iso_8601": "2021-01-17T05:09:48.080599Z",
        "url": "https://files.pythonhosted.org/packages/5f/4e/67b12c8941983fb0fe79b461803c332066c47619631386e49ca91dd0a0cf/hissp-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71be6b8059f7e1fed97755c2f4895398d72ecb4c63ead1320308c8479c2eb23d",
          "md5": "a88cf6ad2ff9d097ec78a660de1c6ca7",
          "sha256": "dd5b940acfe24f3d9cafe04f0e6a43a03182a5886c54661168b3f14f0ead0ffb"
        },
        "downloads": -1,
        "filename": "hissp-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a88cf6ad2ff9d097ec78a660de1c6ca7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 42664,
        "upload_time": "2022-02-09T06:53:04",
        "upload_time_iso_8601": "2022-02-09T06:53:04.997821Z",
        "url": "https://files.pythonhosted.org/packages/71/be/6b8059f7e1fed97755c2f4895398d72ecb4c63ead1320308c8479c2eb23d/hissp-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71be6b8059f7e1fed97755c2f4895398d72ecb4c63ead1320308c8479c2eb23d",
        "md5": "a88cf6ad2ff9d097ec78a660de1c6ca7",
        "sha256": "dd5b940acfe24f3d9cafe04f0e6a43a03182a5886c54661168b3f14f0ead0ffb"
      },
      "downloads": -1,
      "filename": "hissp-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a88cf6ad2ff9d097ec78a660de1c6ca7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 42664,
      "upload_time": "2022-02-09T06:53:04",
      "upload_time_iso_8601": "2022-02-09T06:53:04.997821Z",
      "url": "https://files.pythonhosted.org/packages/71/be/6b8059f7e1fed97755c2f4895398d72ecb4c63ead1320308c8479c2eb23d/hissp-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}