{
  "info": {
    "author": "IlliaBoloto",
    "author_email": "ils.boloto96@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Office/Business :: Financial",
      "Topic :: Software Development"
    ],
    "description": "# plutus_backtest\r\n\r\n[![PyPI](https://img.shields.io/pypi/v/plutus-backtest)](https://pypi.org/project/plutus-backtest/)\r\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/oanda-backtest)](https://pypi.org/project/plutus-backtest/)\r\n[![Downloads](https://pepy.tech/badge/plutus-backtest)](https://pepy.tech/project/plutus-backtest)\r\n\r\n## Description:\r\nThis project has been performed for the purpose of local backtests of financial strategies. The package contains various indicators and tools \r\nallowing users obtaining exact results of their strategies over a certain period of time. The users are also able to pick \r\nendless amount of trading instruments and set criteria such as long or short positioning. Beside that optional stop loss and take profit\r\nsignals are available not only as general limit level for entire portfolio but can be also applied for each instrument individually.\r\nAnother optional tool available is weights factor distribution which is oriented to assign weights according to the provided values. \r\nIn addition, the package allows to create full html report containing varius graphs and indicators.\r\n\r\n<br />\r\n\r\nTickers for analysis are available on [Yahoo Finance page](https://finance.yahoo.com/).\r\n\r\n## Installation: \r\n* Dependency: **pandas**, **numpy**, **plotly**, **yfinance**, **dash**, **tabulate**\r\n* Install from pypi:\r\n```\r\npip install plutus_backtest\r\n```\r\n* Verified in Python:\r\n\r\n```python\r\nfrom plutus.backtest import execution\r\n```\r\n\r\n## Examples: \r\n\r\nFunction \"execution\" contains below parameters:<br />\r\n```\r\nasset: str or list or series\r\n   Instruments taken into the consideration for the backtest.\r\no_day: list of str or timestamps or series\r\n   Day/Days of the position opening.\r\nc_day: list of str or timestamps or series\r\n   Day/Days of the position closing.\r\nweights_factor: list of int or float or array-like or series default None\r\n   Optional list of factors which will be considered to define the weights for taken companies. By default\r\n   all weights are distributed equally, however if the list of factors provided the backtest will maximize\r\n   the weights towards the one with max weight factor. Negative weight factor will be considered as short selling.\r\ntake_profit: list of float or int or series default None\r\n   List of values determining the level till a particular stock shall be traded.\r\nstop_loss: list of float or int or series default None\r\n   List of values determining the level till a particular stock shall be traded.\r\nbenchmark: str default None\r\n   A benchmark ticker for comparison with portfolio performance\r\nprice_period_relation: str default 'O-C'\r\n   Instruct what part of the trading day a position shall be opened,\r\n   and what part of trading day it shall be closed.\r\n   Possible relations:\r\n   O-C / Open to Close prices\r\n   C-O / Close to Open prices\r\n   C-C / Close to Close prices\r\n   O-O / Open to Open prices\r\n   \"Open\" - the price at which a security first trades upon the opening of an exchange on a trading day.\r\n   \"Close\" - value of the last transacted price in a security before the market officially closes.\r\nfull_report: bool, optional, default False\r\n   Generates full report in your browser.\r\nmajor_sample: int or None, optional, default 10\r\n   Based on duration of the trading period as well as weights factor of the asset.\r\n   In order to make understandable visualisation in full report graphs such as weights changes and\r\n   weights distribution, major sample is used which will focus to provide info regarding main provided\r\n   assets. Can be changed to any int. If value is None the backtest will consider all assets as major\r\n   ones.\r\n```\r\n\r\n<br />\r\n\r\nA short and fast way to run a single backtest would be:\r\n\r\n<br />\r\n\r\n```python\r\nfrom plutus.backtest import execution\r\n\r\nbt = execution(asset=[\"AAPL\", \"BTC-USD\", \"GC=F\"], o_day=[\"2021-08-01\", \"2021-08-03\", \"2021-09-05\"],\r\n               c_day=[\"2021-09-01\", \"2021-10-04\", \"2022-03-12\"])\r\n\r\n```\r\n\r\n<br />\r\n\r\nAs a result a statistical table as well as graphical representation of the portfolio accumulated return will appear.\r\n\r\n<br />\r\n\r\n![1](https://user-images.githubusercontent.com/83161286/180781862-55642708-02da-4d65-8d9d-2aa9743ed4cb.png)\r\n\r\n\r\n<br />\r\n\r\nIn order to access dataframe with portfolio daily changes and weights distribution, use:\r\n\r\n<br />\r\n\r\n```python\r\nfrom plutus.backtest import execution\r\n\r\nbt, portfolio_daily_changes, portfolio_weights = execution(asset=[\"AAPL\", \"TWTR\", \"GC=F\"], \r\n                                                  o_day=[\"2021-08-01\", \"2021-08-03\", \"2021-09-05\"],\r\n                                                  c_day=[\"2021-09-01\", \"2021-10-04\", \"2022-03-12\"])\r\n\r\nportfolio_daily_changes.head()\r\n```\r\n<br />\r\n\r\nThe result will appear as following (all values are in %):\r\n\r\n<br />\r\n\r\n![port fin head](https://user-images.githubusercontent.com/83161286/178458212-9cd51033-707c-476c-a9ed-94c35255bb69.png)\r\n\r\n<br />\r\n\r\nIf the user would like to compare performance of of the portfolio with any other instrument a parameter \"benchmark\" shall be called:\r\n\r\n<br />\r\n\r\n```python\r\nfrom plutus.backtest import execution\r\n\r\nbt = execution(asset=[\"AAPL\", \"TWTR\", \"FB\"], o_day=[\"2021-08-01\", \"2021-08-03\", \"2021-09-05\"],\r\n               c_day=[\"2021-09-01\", \"2021-10-04\", \"2022-03-12\"], benchmark= ['^GSPC'])\r\n\r\n```\r\n<br />\r\n\r\nAbove example will additionaly plot a S&P 500 index performance (accumulated return from same period as the portfolio) [grey line] on the accumulated graph:\r\n\r\n<br />\r\n\r\n![2](https://user-images.githubusercontent.com/83161286/180781931-4cc4db55-0932-4f34-9854-abf0ea3af8ab.png)\r\n\r\n<br />\r\n\r\n\"Full report\" is an optional parameter which allows users users to observe additional graphs frames and indicators:\r\n\r\n<br />\r\n\r\n```python\r\nfrom plutus.backtest import execution\r\n\r\nbt = execution(asset=[\"AAPL\", \"F\", \"MS\"], \r\n              o_day=[\"2020-08-01\", \"2020-07-15\", \"2020-08-20\"],\r\n              c_day=[\"2021-09-01\", \"2021-09-01\", \"2021-09-15\"], full_report = True)\r\n\r\n\r\n```\r\n<br />\r\n\r\nAbove script will generate a link to Dash app with report: \r\n\r\n<br />\r\n\r\n![image](https://user-images.githubusercontent.com/83119547/175771957-67729f53-ef8e-43a1-b712-af079c401b1d.png)\r\n\r\n<br />\r\n\r\nBy clicking it, and it will redirect to a new tab.\r\n\r\n<br />\r\n\r\n![127 0 0 1_8050_ (6)](https://user-images.githubusercontent.com/83161286/180781981-ccd2e0ee-5a11-4e24-b871-35723b16a9ab.png)\r\n\r\n<br />\r\n\r\nIf the user didn't specify weights of particular assets in the portfolio (using **weights_factor** parameter), % allocation will be distributed equally (in selected period of time) and shown in the last plot called **Weights rebalancing**.\r\n\r\n<br />\r\n\r\n![127 0 0 1_8050_ (7)](https://user-images.githubusercontent.com/83161286/180782027-47f81c54-820f-40a7-8517-5369c421ed43.png)\r\n\r\n<br />\r\n\r\n```python\r\nfrom plutus.backtest import execution\r\n\r\nbt = execution(asset=[\"AAPL\", \"F\", \"MS\"],\r\n              o_day=[\"2020-08-01\", \"2020-07-15\", \"2020-08-20\"],\r\n              c_day=[\"2021-09-01\", \"2021-09-01\", \"2021-09-15\"],\r\n              weights_factor = [50, 40, 10], full_report = True)\r\n\r\n```\r\n\r\n<br />\r\n\r\nIn case of specifying % of portfolio allocation for each asset (AAPL = 50%, F = 40%, MS = 10% from above example) above plots will be adjusted.\r\nExample of Weights distribution plot:\r\n\r\n<br />\r\n\r\n![127 0 0 1_8050_ (8)](https://user-images.githubusercontent.com/83161286/180782082-dc5b9c44-2929-4485-a2b1-ab8774e5de5f.png)\r\n\r\n<br />\r\n\r\nNo need to include weights that will sum up to 100% (but it is recommended). Code calculates % based on **value / total of absolute values**. For example:\r\n\r\n<br />\r\n\r\n```python\r\nfrom plutus.backtest import execution\r\n\r\nbt = execution(asset=[\"AAPL\", \"F\", \"MS\"],\r\n              o_day=[\"2020-08-01\", \"2020-07-15\", \"2020-08-20\"],\r\n              c_day=[\"2021-09-01\", \"2021-09-01\", \"2021-09-15\"],\r\n              weights_factor = [35, 140, -21], full_report = True)\r\n```\r\n\r\n<br />\r\n\r\nweights_factor total is 196 [35 + 140 + 21]. <br />\r\nAAPL: 35 / 196 = ~17%<br />\r\nF: 140 / 196 = ~71.4%<br />\r\nMS: |21| / 196 = ~10.7%\r\n\r\nKeep in mind that weights factor with \"-\" sign will indicate short selling for a particular asset\r\n\r\n<br />\r\n\r\n![127 0 0 1_8050_ (9)](https://user-images.githubusercontent.com/83161286/180782138-ac83e459-34dd-4919-bb99-fa0e30a6c3d4.png)\r\n\r\n<br />\r\n\r\nMore complex approach would be assigning weights factor/stop loss/ take profit indicators:\r\n\r\n<br />\r\n\r\n```python\r\nfrom plutus.backtest import execution\r\n\r\nbt = execution(asset = [\"AAPL\", \"BTC-USD\",\"GC=F\"], \r\n              o_day = [\"2021-08-01\", \"2021-07-15\", \"2021-08-20\"],\r\n              c_day = [\"2021-09-01\", \"2021-09-01\",\"2021-09-15\"], \r\n              weights_factor = [10, -5, 35], \r\n              stop_loss = [0.8, 0.9, 0.95], \r\n              take_profit = [1.1, 1.2, 1.05], full_report = True)\r\n\r\n```\r\n\r\n<br />\r\n\r\nIn this case the weights will not be distributed equally. \"AAPL\"  will have 20% of the total portofolio BTC-USD - 10% and \r\n\"GC=F\" will have 70%. The negative sign in the weights factor will mean short selling, therefore first \"AAPL\" and \"GC=F\" instruments are in long position and \r\n\"BTC-USD\" is in the short.\r\n\r\n<br />\r\n\r\nStop loss and take profit shall be interpreted as \"AAPL\" has 20% of stop loss and 10% of take profit, \"BTC-USD\" has 10% of stop loss and 20% of take profit, \"GC=F\" 5% of stop loss and 5% of take profit. As result accumulative graph will look as:\r\n\r\n<br />\r\n\r\n![127 0 0 1_8050_ (10)](https://user-images.githubusercontent.com/83161286/180782181-02157e75-b9f2-4828-8724-0443066620e7.png)\r\n\r\n<br />\r\n\r\nIn the moment when one of the securities reaching its stop loss or take profit, the trade will be automatically stopped and the weights will be reassigned respectively to the left assets.\r\n\r\n<br />\r\n\r\nIn case of users need to test one instrument but several times with different timelines, the package will interpret it as:\r\n\r\n<br />\r\n\r\n```python\r\nfrom plutus.backtest import execution\r\n\r\nbt, portfolio_daily_changes, pprtfolio_weights = execution(asset = [\"AMZN\", \"AMZN\",\"AMZN\"], \r\n              o_day = [\"2021-08-01\", \"2021-09-01\", \"2021-10-01\"],\r\n              c_day = [\"2021-08-15\", \"2021-09-15\",\"2021-10-15\"])\r\n\r\n\r\n```\r\n\r\n<br />\r\n\r\n![multiindex](https://user-images.githubusercontent.com/83161286/178458263-d0d4253a-5358-4876-862f-995fc8aaf134.png)\r\n\r\n<br />\r\n\r\nEach time when one asset is repeating the backtest will unite it under one comon ticker name, the same corrections will happen on the graphs. \r\nIt's worth to mention that due to data limitation the code uses close price for the analysis of the securities. \r\n\r\n<br />\r\n\r\n\r\n\r\n## Support:\r\nPlease [open an issue](https://github.com/witmul/backt/issues/new) for support.<br />\r\nWith additional questions please reachout to autors directly:\r\n- [witmul](mailto:witalijmulawa@gmail.com)\r\n- [IlliaBoloto](mailto:ils.boloto96@gmail.com)\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/witmul/plutus_backtest",
    "keywords": "backtest python stock portfolio trade daytrading finance downside risk management accumulation return profit loss optimization asset security currency crypto futures derivatives test",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lopata",
    "package_url": "https://pypi.org/project/lopata/",
    "platform": null,
    "project_url": "https://pypi.org/project/lopata/",
    "project_urls": {
      "Homepage": "https://github.com/witmul/plutus_backtest"
    },
    "release_url": "https://pypi.org/project/lopata/0.3.3/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "plutus is a python package     for backtesting investment decisions using Python 3.6 and above.",
    "version": "0.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14598169,
  "releases": {
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "896c3856be30cbcf31f75b798f3a570383d0d0ab6182f1dea6fbe2246033cd48",
          "md5": "99c43237625cb11fd97b3b2629f0cad0",
          "sha256": "94de9ac13e40d4d6b8269e4198db8e6403a3dc6a2649caf160e97cb7d5de54df"
        },
        "downloads": -1,
        "filename": "lopata-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "99c43237625cb11fd97b3b2629f0cad0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 18892,
        "upload_time": "2022-07-30T11:19:20",
        "upload_time_iso_8601": "2022-07-30T11:19:20.290628Z",
        "url": "https://files.pythonhosted.org/packages/89/6c/3856be30cbcf31f75b798f3a570383d0d0ab6182f1dea6fbe2246033cd48/lopata-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "896c3856be30cbcf31f75b798f3a570383d0d0ab6182f1dea6fbe2246033cd48",
        "md5": "99c43237625cb11fd97b3b2629f0cad0",
        "sha256": "94de9ac13e40d4d6b8269e4198db8e6403a3dc6a2649caf160e97cb7d5de54df"
      },
      "downloads": -1,
      "filename": "lopata-0.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "99c43237625cb11fd97b3b2629f0cad0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 18892,
      "upload_time": "2022-07-30T11:19:20",
      "upload_time_iso_8601": "2022-07-30T11:19:20.290628Z",
      "url": "https://files.pythonhosted.org/packages/89/6c/3856be30cbcf31f75b798f3a570383d0d0ab6182f1dea6fbe2246033cd48/lopata-0.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}