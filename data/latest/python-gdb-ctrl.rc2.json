{
  "info": {
    "author": "Di Paola Martin",
    "author_email": "use-github-issues@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Debuggers"
    ],
    "description": "Python GDB Controller\n=====================\n\n``python-gdb-ctrl`` is a thin interface on top of\n`GDB <https://sourceware.org/gdb/>`__, the debugger of the GNU Project.\n\nIt will let you to spawn and control the debugger from a Python console\nor program.\n\n``python-gdb-ctrl`` has two use modes: asynchronous and synchronous.\n\nThe former is intended to be used by another application, the latter is\nmore a toy-example but handy while experimenting from a Python console.\n\n``GDBCtrl`` - Asynchronous interface\n------------------------------------\n\nThe class ``GDBCtrl`` is suitable from integrating ``python-gdb-ctrl``\nand the debugger with an UI or other event-based software.\n\nIt has the basic primitives: - ``spawn``: to run the debugger -\n``shutdown``: to quit or kill the debugger - ``send``: to send GDB\ncommands - ``recv``: to receive GDB records\n\nAll of them are *coroutines* that can be integrated in an ``asyncio``\nloop.\n\n    Note: due limitations in one of the dependencies of\n    ``python-gdb-ctrl`` all the primitives except ``recv`` may block as\n    they are not full asynchronous.\n\n``SyncGDBCtrl`` - Synchronous interface\n---------------------------------------\n\nWhile ``GDBCtrl`` is the class that you should use in a program, it is\nmuch easier to play interactively with ``SyncGDBCtrl``.\n\n.. code:: python\n\n    >>> from gdb_ctrl import SyncGDBCtrl\n    >>> gdb = SyncGDBCtrl(force_styling=None)\n\nThe ``spawn`` and ``shutdown`` methods now are normal methods (they are\nnot coroutines)\n\n.. code:: python\n\n    >>> gdb.spawn()\n\nThe same applies for ``send`` and ``recv``\n\n.. code:: python\n\n    >>> gdb.send('file example/glad')\n    '<token>'\n\nHowever a synchronous ``recv`` is tricky because GDB may return several\nrecords for a given ``send`` so you need to know beforehand how many\ntimes you need to call ``recv``:\n\n.. code:: python\n\n    >>> gdb.recv()\n    {'type': 'Log', 'value': 'file example/glad\\n'}\n\n    >>> gdb.recv()\n    {'type': 'Console', 'value': 'Reading symbols from example/glad...'}\n\n    >>> gdb.recv()\n    {'type': 'Console', 'value': 'done.\\n'}\n\n    >>> gdb.recv()      # byexample: +paste\n    {'class': 'done', 'token': <token>, 'type': 'Result'}\n\n    >>> gdb.recv()\n    '(gdb)'\n\nNotice how the ``send`` returned a ``<token>``: you can use this to pair\nthe command with its result.\n\nUnfortunately this works only for the results, other GDB responses will\nnot have this token so you cannot know if the ``Log`` response above is\nthe product of the execution of ``file example/glad`` or it is the\nproduct of other command.\n\nUsing the synchronous ``recv`` is annoying: you need to know how many\nresponses you will receive.\n\n``SyncGDBCtrl`` is mostly for interactive session so it provides handy\n``execute`` method to send a command and receive the records in one shot\ntaking care of retrieving all the responses.\n\nThis is specially useful for certain commands that they do more than one\nthing.\n\nThe ``start`` command is an example of this:\n\n.. code:: python\n\n    >>> gdb.execute('start')\n    Temporary breakpoint 1 <...>: file glad.c, line 52.\n    Notify:\n    {'bkpt': {'addr': '<...>',\n              'disp': 'del',\n              'enabled': 'y',\n              'file': 'glad.c',\n              'fullname': '<...>/example/glad.c',\n              'func': 'main',\n              'line': '52',\n              <...>\n              'times': '0',\n              'type': 'breakpoint'}}\n    Starting program: /home/user/proj/python-gdb-ctrl/example/glad\n    <...>\n    Running\n    Exec: {'thread-id': 'all'}\n    <...>\n    Notify:\n    {'bkpts': [{'addr': '<...>',\n                'disp': 'del',\n                'enabled': 'y',\n                'file': 'glad.c',\n                'fullname': '<...>/example/glad.c',\n                'func': 'main',\n                'line': '52',\n                'number': '1',\n                'original-location': 'main',\n                'thread-groups': ['i1'],\n                'times': '1',\n                'type': 'breakpoint'}]}\n    <...>\n    Temporary breakpoint 1, main (argc=1, argv=0x<...>) at glad.c:52\n    52          pthread_create(&th, NULL, release_neurotoxins, NULL);\n    Exec:\n    {'bkptno': '1',\n     <...>\n     'reason': 'breakpoint-hit',\n     'stopped-threads': 'all',\n     'thread-id': '1'}\n    <...>\n\nThat's a lot! When GDB executes ``start``, it sets a temporal breakpoint\nin the ``main`` function, it runs the binary and it notifies us when the\nbreakpoint is hit and the program is stopped.\n\nThat generates a lot of messages (in fact I omitted several ones).\n\nFor convenience, ``execute()`` will print what it receives so you don't\nneed to parse anything.\n\nIf you want to use ``SyncGDBCtrl`` programmatically you can but I would\nrecommend against it and use ``GDBCtrl`` instead.\n\nA pythonic interface\n~~~~~~~~~~~~~~~~~~~~\n\nBesides ``execute()``, ``SyncGDBCtrl`` can be *extended* with several\nmethods that will call a GDB command in a *pythonic* way:\n\n.. code:: python\n\n    >>> gdb.extend_interface_with_gdb_commands()\n\nNow instead of calling ``execute('list')`` you can call ``list``\ndirectly.\n\n.. code:: python\n\n    >>> gdb.list()\n    47          return 0;\n    48      }\n    49\n    50      int main(int argc, char *argv[]) {\n    51          pthread_t th;\n    52          pthread_create(&th, NULL, release_neurotoxins, NULL);\n    53\n    54          int cores[CORES] = {1};\n    55\n    56          for (int i = 1; i < argc; ++i) {\n    Done\n\nThe beauty of this is that you can request the documentation from a\nPython shell:\n\n.. code:: python\n\n    >>> print(gdb.list.__doc__)\n    <...>\n    List specified function or line.\n    With no argument, lists ten more lines after or around previous listing.\n    \"list -\" lists the ten lines before a previous ten-line listing.\n    One argument specifies a line, and ten lines are listed around that line.\n    Two arguments with comma between specify starting and ending lines to list.\n    Lines can be specified in these ways:\n      LINENUM, to list around that line in current file,\n      FILE:LINENUM, to list around that line in that file,\n      FUNCTION, to list around beginning of that function,\n      FILE:FUNCTION, to distinguish among like-named static functions.\n      *ADDRESS, to list around the line containing that address.\n    With two args, if one is empty, it stands for ten lines away from\n    the other arg.\n    <...>\n\n    Note: GDB commands that have an invalid name for Python will be\n    prefixed with a ``z``\n\nFinally, don't forget to shutdown the debugger:\n\n.. code:: python\n\n    >>> gdb.shutdown()                  # byexample: +pass -skip\n\nInstall\n-------\n\nJust run:\n\n::\n\n    $ pip install python-gdb-ctrl         # byexample: +pass\n\nYou will find the ``python-gdb-ctrl`` package at\n`PyPI <https://pypi.python.org/pypi/python-gdb-ctrl>`__\n\nHacking/Contributing\n--------------------\n\nGo ahead! Clone the repository, do a small fix/enhancement, run\n``make deps-dev`` to install the development dependencies including the\ntest engine `byexample <https://byexamples.github.io>`__, then run\n``make test`` to ensure that everything is working as expected and\nfinally propose your Pull Request!\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bad-address.github.io",
    "keywords": "debugger gdb",
    "license": "GNU LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-gdb-ctrl",
    "package_url": "https://pypi.org/project/python-gdb-ctrl/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-gdb-ctrl/",
    "project_urls": {
      "Homepage": "https://bad-address.github.io"
    },
    "release_url": "https://pypi.org/project/python-gdb-ctrl/1.0.1/",
    "requires_dist": [
      "blessings",
      "python-gdb-mi"
    ],
    "requires_python": ">=3.5",
    "summary": "A thin layer on top of GDB to control it programatically.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7803715,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f879f1968423b9d24bc0a13ec7c861e0c3a7bb4ecf56f469e50731c1ea41856",
          "md5": "6578e070bb021d66a2d852d6b68f0aa3",
          "sha256": "abc8e65da8ee5ae3bca2d4ba07d781c426d2b89d7e92a4eb100e0c21d888e890"
        },
        "downloads": -1,
        "filename": "python_gdb_ctrl-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6578e070bb021d66a2d852d6b68f0aa3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16211,
        "upload_time": "2020-07-26T20:43:29",
        "upload_time_iso_8601": "2020-07-26T20:43:29.002781Z",
        "url": "https://files.pythonhosted.org/packages/0f/87/9f1968423b9d24bc0a13ec7c861e0c3a7bb4ecf56f469e50731c1ea41856/python_gdb_ctrl-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ae2eae639f54e06ad16e69f5fc343e848aa8c15393af555d63f032f29f50d9e",
          "md5": "c9d4750604bfe4305549a61c8bb63b18",
          "sha256": "b01b3fb6bc6e8842e9a2971456d84102231f19a814c0ed571c1182163c6f0487"
        },
        "downloads": -1,
        "filename": "python-gdb-ctrl-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c9d4750604bfe4305549a61c8bb63b18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13206,
        "upload_time": "2020-07-26T20:43:41",
        "upload_time_iso_8601": "2020-07-26T20:43:41.615093Z",
        "url": "https://files.pythonhosted.org/packages/3a/e2/eae639f54e06ad16e69f5fc343e848aa8c15393af555d63f032f29f50d9e/python-gdb-ctrl-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b64a2434eaa83b53c6cf48e8e04734eafaaeb973796a6d3e60e2382ff5a2edda",
          "md5": "92fe5ad7f22fa9d3a449ba1bc6597d73",
          "sha256": "ba5ab14054e39a8dc393ef4aa909b8366649c1241b3a453518f360d070a245b5"
        },
        "downloads": -1,
        "filename": "python_gdb_ctrl-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92fe5ad7f22fa9d3a449ba1bc6597d73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16227,
        "upload_time": "2020-07-28T01:56:09",
        "upload_time_iso_8601": "2020-07-28T01:56:09.762854Z",
        "url": "https://files.pythonhosted.org/packages/b6/4a/2434eaa83b53c6cf48e8e04734eafaaeb973796a6d3e60e2382ff5a2edda/python_gdb_ctrl-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97b050442ec96154be6a44213525fdb8e67efe8d924fb4f7b135df6b6595d308",
          "md5": "0e227e886397ebc7d59fce2d89d40ac0",
          "sha256": "ea66f9e72c2be0c8625454f6693915bdad6003c9fbd2ff369fb15dd97a057639"
        },
        "downloads": -1,
        "filename": "python-gdb-ctrl-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e227e886397ebc7d59fce2d89d40ac0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13221,
        "upload_time": "2020-07-28T01:56:11",
        "upload_time_iso_8601": "2020-07-28T01:56:11.537865Z",
        "url": "https://files.pythonhosted.org/packages/97/b0/50442ec96154be6a44213525fdb8e67efe8d924fb4f7b135df6b6595d308/python-gdb-ctrl-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b64a2434eaa83b53c6cf48e8e04734eafaaeb973796a6d3e60e2382ff5a2edda",
        "md5": "92fe5ad7f22fa9d3a449ba1bc6597d73",
        "sha256": "ba5ab14054e39a8dc393ef4aa909b8366649c1241b3a453518f360d070a245b5"
      },
      "downloads": -1,
      "filename": "python_gdb_ctrl-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "92fe5ad7f22fa9d3a449ba1bc6597d73",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 16227,
      "upload_time": "2020-07-28T01:56:09",
      "upload_time_iso_8601": "2020-07-28T01:56:09.762854Z",
      "url": "https://files.pythonhosted.org/packages/b6/4a/2434eaa83b53c6cf48e8e04734eafaaeb973796a6d3e60e2382ff5a2edda/python_gdb_ctrl-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97b050442ec96154be6a44213525fdb8e67efe8d924fb4f7b135df6b6595d308",
        "md5": "0e227e886397ebc7d59fce2d89d40ac0",
        "sha256": "ea66f9e72c2be0c8625454f6693915bdad6003c9fbd2ff369fb15dd97a057639"
      },
      "downloads": -1,
      "filename": "python-gdb-ctrl-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0e227e886397ebc7d59fce2d89d40ac0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 13221,
      "upload_time": "2020-07-28T01:56:11",
      "upload_time_iso_8601": "2020-07-28T01:56:11.537865Z",
      "url": "https://files.pythonhosted.org/packages/97/b0/50442ec96154be6a44213525fdb8e67efe8d924fb4f7b135df6b6595d308/python-gdb-ctrl-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}