{
  "info": {
    "author": "Anton Ovsyannikov",
    "author_email": "anton.ovsyannikov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: AsyncIO",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyMotyc\n\nStatically typed asynchronous MongoDB collections with [Pydantic](https://pydantic-docs.helpmanual.io/) models and [Motor](https://motor.readthedocs.io/) engine.\n\nMotyc stands for **MO**ngodb **TY**ped **C**ollections, and also is diminutive for the word 'motocycle' in Russian, \nwhich, of course, also has a motor!\n\nMain idea of the library is to use Pydantic models to statically type MongoDB collections \nto automate parsing documents from collection to models instances (and vise versa) and also\nenable static type checking for saved and retrieved objects, which brings handy IDE support \nfor attributes access etc.\n\n## Documentation\n\nSee [README.md on GitHub](https://github.com/AntonOvsyannikov/pymotyc).\n\n## Example\n\n```python\nimport asyncio\n\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom pydantic import BaseModel\n\nimport pymotyc\n\n\nclass Employee(BaseModel):\n    name: str\n    age: int\n\n\nclass Warehouse:\n    employees: pymotyc.Collection[Employee]\n\n\nasync def main():\n    motor = AsyncIOMotorClient(\"mongodb://127.0.0.1:27017\")\n    await pymotyc.Engine().bind(motor=motor, databases=[Warehouse])\n\n    await Warehouse.employees.collection.drop()\n\n    vasya = await Warehouse.employees.save(Employee(name='Vasya Pupkin', age=42)) \n    # IDE already knows there, that vasya is of Employee type\n\n    assert isinstance(vasya, Employee) \n\n    employees = await Warehouse.employees.find()\n    assert employees == [Employee(name='Vasya Pupkin', age=42)]\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\n\n## Features\n\n\n- Declarative MongoDB databases with statically typed (by Pydantic models) collections \n  with `save`, `find`, `find_one`, `update`, `delete_one` built-in methods and a bunch of utility methods \n  to deal with raw Motor collections.\n\n\n- One collection can be typed with Discriminated Union to hold different documents corresponded \n  to several models. Retrieved documents will be converted to correct model classes instances\n  thanks to Pydantic.\n\n\n- Automation of routine procedures for collections management, like indexes creation.\n\n\n- Flexible identity management of documents in the collection:\n    * MongoDB's `_id` field injection to model, even if it has no one (detached id),\n    * id field of type `bson.ObjectId` (with `alias='_id'`, limitation of Pydantic), which represents MongoDB's _id field \n      (the model should be properly configured or inherited from `pymotyc.WithId` trait),\n    * auto-generation of identity with callable provided (uuid in str representation by default, actually this is the most convenient method),\n    * client-managed identity field, index is created to guaranty identity uniques. \n\n\n- `pymotyc.MotycModel` base class (and `pymotyc.WithId` trait) to hold relation of the model instance with\n  collection it was retrieved from, this allows to modify model instance and call `save` directly on \n  instance itself.\n\n\n- Direct access to Motor's collection, which allows to rely on original MongoDB API and then use typed\n  collection utility methods to parse retrieved documents to model instances.\n\n### Experimental\n\nAnother part of PyMotyc is so-called *refactorable queries*. The idea is when you type the query like\n\n```python\nawait collection.find({'foo': 'bar'})\n```\n\nyou have no relation between key 'foo' in the dict and model's (with which collection is typed) field `foo`,\nso when you rename field IDE have no idea, in which queries this field is used.\n\nPyMotyc allows to use model's fields as keys in queries in built-in typed collection methods.\n\nTo enable this feature one should use `inject_motyc_fields=True` in `Engine.bind` method, \nso query in example above can be re-written like this:\n\n```python\n    ...\n    await pymotyc.Engine().bind(motor=motor, databases=[Warehouse], inject_motyc_fields=True)\n    ...\n    employees = await Warehouse.employees.find({Employee.age: 42})\n    assert employees == [Employee(name='Vasya Pupkin', age=42)]\n```\n\nNow one can rename model's field `age` with refactor feature of the IDE and IDE automatically \nwill rename keys in correspondent queries! Also, one can click on `age` field and see all usages in queries. \n\nFor this feature PyMotyc uses dirty trick, that's why feature should be considered as experimental. \n\nUsing the fact, that Pydantic already initialized all its internal structures during model class creation, \nPyMotyc replaces model's class attributes with `pymotyc.MotycField` class instances, which holds \nall necessary field's info like name alias etc, and then parses queries, searching for MotycField in them.\n\nPyMotyc also have simple query builder. One can use `MotycField`s in logical expressions, as well as use\nmethods like `regexp` directly on them. This will form MotycQuery as result, which then will be converted\nto MongoDB query by PyMotyc. To use models fields with injected `MotycField`s in logical expression\nthey should be cast to `MotycField` explicitly to calm down the IDE. One can use `pymotyc.M` helper for this.\n\n```python\n    employees = await Warehouse.employees.find(M(Employee.name).regex('Vasya') & M(Employee.age) == 42)\n    assert employees == [Employee(name='Vasya Pupkin', age=42)]\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AntonOvsyannikov/pymotyc",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymotyc",
    "package_url": "https://pypi.org/project/pymotyc/",
    "platform": "",
    "project_url": "https://pypi.org/project/pymotyc/",
    "project_urls": {
      "Bug Tracker": "https://github.com/AntonOvsyannikov/pymotyc/issues",
      "Homepage": "https://github.com/AntonOvsyannikov/pymotyc"
    },
    "release_url": "https://pypi.org/project/pymotyc/0.9.0/",
    "requires_dist": [
      "pydantic (>=1.7)",
      "motor (>=2.4)",
      "typing-inspect (>=0.6)"
    ],
    "requires_python": ">=3.7",
    "summary": "Statically typed asynchronous MongoDB collections with Pydantic models and Motor engine.",
    "version": "0.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10373210,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42d2cb55a46102c96e48c7f4320ebc77d0127f6589e24c5b9bdcf37073f65b0a",
          "md5": "66abccd5c8a2131ea007e04038fb14d6",
          "sha256": "62c1fe0d04ccbbe33551b4f0b0fee0c2fcdfe8bcbcd1a4d22fbb8cdafcdd8931"
        },
        "downloads": -1,
        "filename": "pymotyc-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66abccd5c8a2131ea007e04038fb14d6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14614,
        "upload_time": "2021-05-16T21:52:20",
        "upload_time_iso_8601": "2021-05-16T21:52:20.206423Z",
        "url": "https://files.pythonhosted.org/packages/42/d2/cb55a46102c96e48c7f4320ebc77d0127f6589e24c5b9bdcf37073f65b0a/pymotyc-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b10d5f929b720b5b49054ad5ba02667f633a6788ef536530f5eda089311fef2",
          "md5": "320fd60586d9b6e84f23258dfdb9ebe5",
          "sha256": "f0f0c28a70be049f618a3c967f35c74c7badf140eec02cae63c50d903bfd06eb"
        },
        "downloads": -1,
        "filename": "pymotyc-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "320fd60586d9b6e84f23258dfdb9ebe5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15604,
        "upload_time": "2021-05-16T21:52:21",
        "upload_time_iso_8601": "2021-05-16T21:52:21.374494Z",
        "url": "https://files.pythonhosted.org/packages/3b/10/d5f929b720b5b49054ad5ba02667f633a6788ef536530f5eda089311fef2/pymotyc-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42d2cb55a46102c96e48c7f4320ebc77d0127f6589e24c5b9bdcf37073f65b0a",
        "md5": "66abccd5c8a2131ea007e04038fb14d6",
        "sha256": "62c1fe0d04ccbbe33551b4f0b0fee0c2fcdfe8bcbcd1a4d22fbb8cdafcdd8931"
      },
      "downloads": -1,
      "filename": "pymotyc-0.9.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66abccd5c8a2131ea007e04038fb14d6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 14614,
      "upload_time": "2021-05-16T21:52:20",
      "upload_time_iso_8601": "2021-05-16T21:52:20.206423Z",
      "url": "https://files.pythonhosted.org/packages/42/d2/cb55a46102c96e48c7f4320ebc77d0127f6589e24c5b9bdcf37073f65b0a/pymotyc-0.9.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b10d5f929b720b5b49054ad5ba02667f633a6788ef536530f5eda089311fef2",
        "md5": "320fd60586d9b6e84f23258dfdb9ebe5",
        "sha256": "f0f0c28a70be049f618a3c967f35c74c7badf140eec02cae63c50d903bfd06eb"
      },
      "downloads": -1,
      "filename": "pymotyc-0.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "320fd60586d9b6e84f23258dfdb9ebe5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15604,
      "upload_time": "2021-05-16T21:52:21",
      "upload_time_iso_8601": "2021-05-16T21:52:21.374494Z",
      "url": "https://files.pythonhosted.org/packages/3b/10/d5f929b720b5b49054ad5ba02667f633a6788ef536530f5eda089311fef2/pymotyc-0.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}