{
  "info": {
    "author": "Bryan Yang / Dogukan Celik",
    "author_email": "dogukan@btslabs.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "ksql-python\n===========\n\nA python wrapper for the KSQL REST API. Easily interact with the KSQL REST API using this library.\n\nSupported KSQLDB version: 0.10.1+\nSupported Python version: 3.5+\n\n.. image:: https://travis-ci.org/bryanyang0528/ksql-python.svg?branch=master\n  :target: https://travis-ci.org/bryanyang0528/ksql-python\n\n.. image:: https://codecov.io/gh/bryanyang0528/ksql-python/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/bryanyang0528/ksql-python\n\n.. image:: https://pepy.tech/badge/ksql\n  :target: https://pepy.tech/project/ksql\n\n.. image:: https://pepy.tech/badge/ksql/month\n  :target: https://pepy.tech/project/ksql/month\n  \n.. image:: https://img.shields.io/badge/license-MIT-yellow.svg\n  :target: https://github.com/bryanyang0528/ksql-python/blob/master/LICENSE  \n  \nInstallation\n------------\n\n.. code:: bash\n\n    pip install ksql\n\nOr\n\n.. code:: bash\n\n    git clone https://github.com/bryanyang0528/ksql-python\n    cd ksql-python\n    python setup.py install\n\nGetting Started\n---------------\n\nSetup for KSQL\n~~~~~~~~~~~~~~~\n\nThis is the GITHUB page of KSQL. https://github.com/confluentinc/ksql\n\nIf you have installed open source Confluent CLI (e.g. by installing Confluent Open Source or Enterprise Platform), you can start KSQL and its dependencies with one single command:\n\n.. code:: bash\n\n    confluent start ksql-server\n\nSetup for ksql-python API\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Setup for the KSQL API:\n\n.. code:: python\n\n    from ksql import KSQLAPI\n    client = KSQLAPI('http://ksql-server:8088')\n\n- Setup for KSQl API with logging enabled:\n\n.. code:: python\n\n    import logging\n    from ksql import KSQLAPI\n    logging.basicConfig(level=logging.DEBUG)\n    client = KSQLAPI('http://ksql-server:8088')\n\n- Setup for KSQL API with Basic Authentication\n\n.. code:: python\n\n    from ksql import KSQLAPI\n    client = KSQLAPI('http://ksql-server:8088', api_key=\"your_key\", secret=\"your_secret\")\n\nOptions\n~~~~~~~\n\n+---------------+-----------+------------+--------------------------------------------------------------+\n| Option        | Type      | Required   | Description                                                  |\n+===============+===========+============+==============================================================+\n| ``url``       | string    | yes        | Your ksql-server url. Example: ``http://ksql-server:8080``   |\n+---------------+-----------+------------+--------------------------------------------------------------+\n| ``timeout``   | integer   | no         | Timout for Requests. Default: ``5``                          |\n+---------------+-----------+------------+--------------------------------------------------------------+\n| ``api_key``   | string    | no         | API Key to use on the requests                               |\n+---------------+-----------+------------+--------------------------------------------------------------+\n| ``secret``    | string    | no         | Secret to use on the requests                                |\n+---------------+-----------+------------+--------------------------------------------------------------+\n\nMain Methods\n~~~~~~~~~~~~\n\nksql\n^^^^\n\nThis method can be used for some KSQL features which are not supported via other specific methods like ``query``, ``create_stream`` or ``create_stream_as``.\nThe following example shows how to execute the ``show tables`` statement:\n\n.. code:: python\n\n    client.ksql('show tables')\n\n-  Example Response ``[{'tables': {'statementText': 'show tables;', 'tables': []}}]``\n\nquery\n^^^^^\n\nIt will execute sql query and keep listening streaming data.\n\n.. code:: python\n\n    client.query('select * from table1')\n\nThis command returns a generator. It can be printed e.g. by reading its values via `next(query)` or a for loop. Here is a complete example:\n\n.. code:: python\n    \n  from ksql import KSQLAPI\n  client = KSQLAPI('http://localhost:8088')\n  query = client.query('select * from table1')\n  for item in query: print(item)\n\n-  Example Response\n\n   ::\n\n       {\"row\":{\"columns\":[1512787743388,\"key1\",1,2,3]},\"errorMessage\":null}\n       {\"row\":{\"columns\":[1512787753200,\"key1\",1,2,3]},\"errorMessage\":null}\n       {\"row\":{\"columns\":[1512787753488,\"key1\",1,2,3]},\"errorMessage\":null}\n       {\"row\":{\"columns\":[1512787753888,\"key1\",1,2,3]},\"errorMessage\":null}\n\nQuery with HTTP/2\n^^^^^^^^^^^^^^^^^\nExecute queries with the new ``/query-stream`` endpoint. Documented `here <https://docs.ksqldb.io/en/latest/developer-guide/ksqldb-rest-api/streaming-endpoint/#executing-pull-or-push-queries>`_\n\nTo execute a sql query use the same syntax as the regular query, with the additional ``use_http2=True`` parameter.\n\n.. code:: python\n\n    client.query('select * from table1', use_http2=True)\n\nA generator is returned with the following example response\n\n   ::\n\n       {\"queryId\":\"44d8413c-0018-423d-b58f-3f2064b9a312\",\"columnNames\":[\"ORDER_ID\",\"TOTAL_AMOUNT\",\"CUSTOMER_NAME\"],\"columnTypes\":[\"INTEGER\",\"DOUBLE\",\"STRING\"]}\n       [3,43.0,\"Palo Alto\"]\n       [3,43.0,\"Palo Alto\"]\n       [3,43.0,\"Palo Alto\"]\n\nTo terminate the query above use the ``close_query`` call.\nProvide the ``queryId`` returned from the ``query`` call.\n\n.. code:: python\n\n    client.close_query(\"44d8413c-0018-423d-b58f-3f2064b9a312\")\n\nInsert rows into a Stream with HTTP/2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUses the new ``/inserts-stream`` endpoint. See `documentation <https://docs.ksqldb.io/en/0.10.0-ksqldb/developer-guide/ksqldb-rest-api/streaming-endpoint/#inserting-rows-into-an-existing-stream>`_\n\n.. code:: python\n\n    rows = [\n            {\"ORDER_ID\": 1, \"TOTAL_AMOUNT\": 23.5, \"CUSTOMER_NAME\": \"abc\"},\n            {\"ORDER_ID\": 2, \"TOTAL_AMOUNT\": 3.7, \"CUSTOMER_NAME\": \"xyz\"}\n        ]\n\n    results = self.api_client.inserts_stream(\"my_stream_name\", rows)\n\nAn array of object will be returned on success, with the status of each row inserted.\n\n\nSimplified API\n~~~~~~~~~~~~~~\n\ncreate_stream/ create_table\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    client.create_stream(table_name=table_name,\n                         columns_type=columns_type,\n                         topic=topic,\n                         value_format=value_format)\n\nOptions\n^^^^^^^\n\n+-----------------+-----------+----------+--------------------------------------------------------------+\n| Option          | Type      | Required | Description                                                  |\n+=================+===========+==========+==============================================================+\n| ``table_name``  | string    | yes      | name of stream/table                                         |\n+-----------------+-----------+----------+--------------------------------------------------------------+\n| ``columns_type``| list      | yes      | ex:``['viewtime bigint','userid varchar','pageid varchar']`` |\n+-----------------+-----------+----------+--------------------------------------------------------------+\n| ``topic``       | string    | yes      | Kafka topic                                                  |\n+-----------------+-----------+----------+--------------------------------------------------------------+\n| ``value_format``| string    | no       | ``JSON`` (Default) or ``DELIMITED`` or ``AVRO``              |\n+-----------------+-----------+----------+--------------------------------------------------------------+\n| ``key``         | string    | for Table| Key (used for JOINs)                                         |\n+-----------------+-----------+----------+--------------------------------------------------------------+\n\n\n-  Responses\n\n:If create table/stream succeed:\n  return True\n\n:If failed:\n  raise a CreateError(respose_from_ksql_server)\n\ncreate_stream_as\n^^^^^^^^^^^^^^^^\n\na simplified api for creating stream as select\n\n.. code:: python\n\n    client.create_stream_as(table_name=table_name,\n                            select_columns=select_columns,\n                            src_table=src_table,\n                            kafka_topic=kafka_topic,\n                            value_format=value_format,\n                            conditions=conditions,\n                            partition_by=partition_by,\n                            **kwargs)\n\n\n.. code:: sql\n\n  CREATE STREAM <table_name>\n  [WITH ( kafka_topic=<kafka_topic>, value_format=<value_format>, property_name=expression ... )]\n  AS SELECT  <select_columns>\n  FROM <src_table>\n  [WHERE <conditions>]\n  PARTITION BY <partition_by>];\n\nOptions\n^^^^^^^\n\n+-------------------+-----------+----------+--------------------------------------------------------------+\n| Option            | Type      | Required | Description                                                  |\n+===================+===========+==========+==============================================================+\n| ``table_name``    | string    | yes      | name of stream/table                                         |\n+-------------------+-----------+----------+--------------------------------------------------------------+\n| ``select_columns``| list      | yes      | you can select ``[*]`` or ``['columnA', 'columnB']``         |\n+-------------------+-----------+----------+--------------------------------------------------------------+\n| ``src_table``     | string    | yes      | name of source table                                         |\n+-------------------+-----------+----------+--------------------------------------------------------------+\n| ``kafka_topic``   | string    | no       | The name of the Kafka topic of this new stream(table).       |\n+-------------------+-----------+----------+--------------------------------------------------------------+\n| ``value_format``  | string    | no       | ``DELIMITED``, ``JSON``(Default) or ``AVRO``                 |\n+-------------------+-----------+----------+--------------------------------------------------------------+\n| ``conditions``    | string    | no       | The conditions in the where clause.                          |\n+-------------------+-----------+----------+--------------------------------------------------------------+\n| ``partition_by``  | string    | no       | Data will be distributed across partitions by this column.   |\n+-------------------+-----------+----------+--------------------------------------------------------------+\n| ``kwargs``        | pair      | no       | please provide ``key=value`` pairs. Please see more options. |\n+-------------------+-----------+----------+--------------------------------------------------------------+\n\nKSQL JOINs\n~~~~~~~~~~~~~~\n\nKSQL JOINs between Streams and Tables are not supported yet via explicit methods, but you can use the ``ksql`` method for this like the following:\n\n.. code:: python\n\n    client.ksql(\"CREATE STREAM join_per_user WITH (VALUE_FORMAT='AVRO', KAFKA_TOPIC='join_per_user') AS SELECT Time, Amount FROM source c INNER JOIN users u on c.user = u.userid WHERE u.USERID = 1\")\n\nFileUpload\n~~~~~~~~~~~~~~\n\nupload\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\nRun commands from a .ksql file. Can only support ksql commands and not streaming queries.\n\n.. code:: python\n\n     from ksql.upload import FileUpload\n     pointer = FileUpload('http://ksql-server:8080')\n     pointer.upload('rules.ksql')\n\n\nOptions\n^^^^^^^\n\n+-----------------+-----------+----------+--------------------------------------------------------------+\n| Option          | Type      | Required | Description                                                  |\n+=================+===========+==========+==============================================================+\n| ``ksqlfile``    | string    | yes      | name of file containing the rules                            |\n+-----------------+-----------+----------+--------------------------------------------------------------+\n\n\n-  Responses\n\n:If ksql-commands succesfully executed:\n  return (List of server response for all commands)\n\n:If failed:\n  raise the appropriate error\n\nMore Options\n^^^^^^^^^^^^\n\nThere are more properties (partitions, replicas, etc...) in the official document.\n\n`KSQL Syntax Reference <https://github.com/confluentinc/ksql/blob/0.1.x/docs/syntax-reference.md#syntax-reference>`_\n\n-  Responses\n\n:If create table/stream succeed:\n  return True\n\n:If failed:\n  raise a CreatError(respose_from_ksql_server)\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bryanyang0528/ksql-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pykSQL",
    "package_url": "https://pypi.org/project/pykSQL/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pykSQL/",
    "project_urls": {
      "Homepage": "https://github.com/bryanyang0528/ksql-python"
    },
    "release_url": "https://pypi.org/project/pykSQL/0.11.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python wrapper for the KSQL REST API",
    "version": "0.11.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14056686,
  "releases": {
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c63554907113f35c9895449f6afb2dc175573df83a3eedc4b1f50f18f8e0f6d",
          "md5": "5f8b4e0ae77bc5c30201e94af777fcf3",
          "sha256": "83f617178adb40907207754836726a7be8fadc71650bdb848df82a274eb0e9f3"
        },
        "downloads": -1,
        "filename": "pykSQL-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5f8b4e0ae77bc5c30201e94af777fcf3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15483,
        "upload_time": "2022-06-07T12:20:18",
        "upload_time_iso_8601": "2022-06-07T12:20:18.325770Z",
        "url": "https://files.pythonhosted.org/packages/9c/63/554907113f35c9895449f6afb2dc175573df83a3eedc4b1f50f18f8e0f6d/pykSQL-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c63554907113f35c9895449f6afb2dc175573df83a3eedc4b1f50f18f8e0f6d",
        "md5": "5f8b4e0ae77bc5c30201e94af777fcf3",
        "sha256": "83f617178adb40907207754836726a7be8fadc71650bdb848df82a274eb0e9f3"
      },
      "downloads": -1,
      "filename": "pykSQL-0.11.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5f8b4e0ae77bc5c30201e94af777fcf3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15483,
      "upload_time": "2022-06-07T12:20:18",
      "upload_time_iso_8601": "2022-06-07T12:20:18.325770Z",
      "url": "https://files.pythonhosted.org/packages/9c/63/554907113f35c9895449f6afb2dc175573df83a3eedc4b1f50f18f8e0f6d/pykSQL-0.11.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}