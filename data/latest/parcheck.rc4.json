{
  "info": {
    "author": "Agwave",
    "author_email": "agwave@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# python 参数检查器：parcheck\n\n**这是一个让你大幅提高检查效率的好工具**\n\n## 1 一句话介绍\n\n**parcheck** 是一个**轻量级**的、**简单**的、**易于使用**的参数检查工具\n\n## 2 parcheck 带来的好处\n\n假设我们有一个函数或者接口，它的输入样例比较复杂，比如像下面这样\n\n```python\n{\n  \"名字\": \"大壮\",\n  \"年龄\": 18,\n  \"爱好\": [\n    \"羽毛球\",\n    \"足球\"\n  ],\n  \"职业经历\": [\n    {\n      \"时间\": \"2022\",\n      \"公司\": \"google\",\n      \"职位\": \"数据分析\",\n      \"项目\": [\n        {\n          \"项目名\": \"图数据分析\",\n          \"项目介绍\": \"对图数据进行分析\",\n          \"项目时长（月）\": 12\n        }\n      ]\n    },\n    {\n      \"时间\": \"2021\",\n      \"公司\": \"facebook\",\n      \"职位\": \"数据开发\",\n      \"项目\": [\n        {\n          \"项目名\": \"流数据分析推荐\",\n          \"项目介绍\": \"通过实时分析数据进行相关推荐\",\n          \"项目时长（月）\": 6\n        }\n      ]\n    }\n  ]\n}\n```\n\n假设我们需要\n\n**检查每一个键是否存在**，比如 \"名字\"、\"年龄\"、\"职业经历\" 等是否存在（包括 \"职业经历\" 的信息检查）\n\n**检查每一个键对应的值的数据类型是否正确**，比如 \"名字\" 对应的值是不是 \"字符串\"，\"职业经历\" 对应的值是不是我们期望的格式等\n\n如果纯手写检查，无疑是很**浪费时间**且**无聊**的，但是如果使用 **parcheck**，我们就只需要几行代码便可实现检查\n\n```python\nimport parcheck\n\nsample = \"{参数样例}\"\ndata = \"{待检查的参数}\"\n\npattern = parcheck.pattern(sample)  # 生成校验模板\nresult = parcheck.check(data, pattern)  # 根据校验模板对新来的参数进行检查，返回检查结果\n```\n\n## 3 使用场景举例：web 接口数据参数检查\n\n很多时候，web 接口通过 json 的方式进行传参。\n\n将 json 转成 python 数据类型后，我们常常需要检查数据的基本格式是否正确，以方便后续处理。\n\n尤其是对于提供给外部使用的接口，往往都需要非常**严格检查**。\n\n但是有时候，传递的数据可能层层嵌套，非常复杂，如果是手动一个个写代码去检查，是非常耗时的。\n\n这个时候就可以用到 **parcheck**，**parcheck** 可以帮助我们进行非常便捷的检查。\n\n## 4 一个简单的检查示例\n\n```python\nimport parcheck\n\ndata = {\n    \"name\": \"Tony\",\n    \"age\": 22\n}\n\n# 可以手写期望的检查模板：是个 dict，且有 \"name\", \"age\" 两个键，\"name\" 键对应的值是 str，\"age\" 键对应的值是 str\npattern = {\n    \"struct\": \"dict\",\n    \"elements\": {\n        \"name\": \"str\",\n        \"age\": \"str\"\n    }\n}\n\nreport = parcheck.check(data, pattern)  # 根据检查模板进行检查，返回检查报告\nprint(report)  # 打印检查结果\n```\n\n打印结果：\n\n```json\n{'result': False, 'message': \"'22' 不是 'str' 类型\"}\n```\n\n可以看到，parcheck 检查出来参数中 \"age\" 对应的键不是字符串类型\n\n## 5 parcheck 的优势\n\n① 完善的检查失败的错误提示，方便找到参数错误之处\n\n② 参数检查非常方便，一行代码进行参数检查\n\n## 6 核心 API\n\nparcheck 非常容易使用，它只有**两个**核心的 API。\n\n一个用来进行**参数检查**\n\n一个用来**自动化生成参数检查模板**\n\n### 6.1 parcheck.check\n\n使用 **parcheck.check** 进行参数检查，它有两个参数 param 和 pattern\n\n其中，**param** 是待检查的参数，**pattern** 是我们事先准备好的检查模板\n\n### 6.2 parcheck.pattern\n\n使用 **parcheck.pattern** 自动生成检查模板，它有一个参数 param\n\n其中，**param** 是一个参数样例\n\n这个接口会根据这个参数样例**自动生成**对应的检查模板\n\n## 7 推荐使用方法\n\n① 先使用样例数据生成检查模板 pattern\n\n② 如果有更细节的需求，可以调整生成的 pattern，存到模板配置中\n\n③ 使用 parcheck 和模板配置进行检查\n\n## 8 下载方法\n\n```shell\npip install parcheck\n```\n\n## 9 其他\n\n\n项目地址：https://github.com/Agwave/parcheck.git\n\n目前项目完成初版，项目文档见项目 **docs** 目录，更多使用例子见 **bin** 目录中的 **example** 相关文件\n\n欢迎使用\n\n版本初次发布，肯定有不足和需要完善的点，欢迎提问题\n\n之前没有找到类似的方便的工具，所以开个头，欢迎**一起参与贡献代码和完善功能**\n\n\n\n# 附：简单文档\n\n## 1 校验示例\n\n```python\nimport parcheck\n\ndata = {\n    \"name\": \"Tony\",\n    \"age\": 22\n}\n\n# 可以手写期望的检查模板：是个 dict，且有 \"name\", \"age\" 两个键，\"name\" 键对应的值是 str，\"age\" 键对应的值是 str\npattern = {\n    \"struct\": \"dict\",\n    \"elements\": {\n        \"name\": \"str\",\n        \"age\": \"str\"\n    }\n}\n\nreport = parcheck.check(data, pattern)  # 根据检查模板进行检查，返回检查报告\nprint(report)  # 打印检查结果\n```\n\n## 2 pattern 模板类型\n\npattern 支持的模板类型有\n\n| 模板结构类型 |          备注          |\n| :----------: | :--------------------: |\n|    \"dict\"    | 对应 python 中的 dict  |\n|    \"list\"    | 对应 python 中的 list  |\n|    \"set\"     |  对应 python 中的 set  |\n|    \"str\"     |  对应 python 中的 set  |\n|    \"int\"     |  对应 python 中的 int  |\n|   \"float\"    | 对应 python 中的 float |\n|    \"bool\"    | 对应 python 中的 bool  |\n\n### 2.1 dict 模板类型\n\n#### 2.1.1 dict 结构\n\n```python\n{\n    \"struct\": \"dict\",\n    \"strict\": True,\n    \"elements\": {\n        \"key1\": \"{pattern}\",\n        \"key2\": \"{pattern}\"\n    },\n    \"elements_optional\": {\n        \"key3\": \"{pattern}\"\n    }\n}\n```\n\n其中 \"struct\" 字段为 \"dict\" 指明是 dict 模板类型\n\n\"strict\" 字段指明是否允许未知字段的存在，为 True 表示不允许有未知的字段存在，为 False 表示允许。未指定时默认为 False\n\n\"elements\" 字段指明**必要的键值信息**\n\n\"elements_optional\" 字段指明**可选的键值信息**，注意该字段只能在 \"strict\" 为 True 时生效，因为 \"strict\" 为 False 时任意键名都是可选的。一般情况让 \"strict\" 为 True 然后使用 \"elements_optional\" 放宽键值是推荐的模板\n\n#### 2.1.2 dict 示例\n\n期望参数示例：\n\n```python\n{\n    \"name\": \"Tony\",\n    \"age: 18,\n    \"gender\": \"male\"\n}\n```\n\n如果我们希望 \"name\", \"age\", \"gender\" **三个 key 都存在**，并且\n\nname 对应的 value 的类型是 str，\"age\" 对应的 value 类型是 int，\"gender\" 对应的 value 类型是 str，\n\n那么检查体的内容如下：\n\n```python\n{\n    \"struct\": \"dict\",\n    \"strict\": True,\n    \"elements\": {\n        \"name\": \"str\",\n        \"age\": \"int\",\n        \"gender\": \"str\"\n    }\n}\n```\n\n#### 2.1.3 dict 可选参数\n\n如果 \"gender\" key 是可选的 key，那么检查体的内容如下：\n\n```python\n{\n    \"struct\": \"dict\",\n    \"strict\": True,\n    \"elements\": {\n        \"name\": \"str\",\n        \"age\": \"int\"\n    },\n    \"elements_optional\": {\n        \"gender\": \"str\"\n    }\n}\n```\n\n#### 2.1.4 dict 多种值类型\n\n如果 \"age\" key 既可以是整型，又可以是字符串，那么检查体的内容如下：\n\n```python\n{\n    \"struct\": \"dict\",\n    \"strict\": True,\n    \"elements\": {\n        \"name\": \"str\",\n        \"age\": [\"int\", \"str\"],\n        \"gender\": \"str\"\n    }\n}\n```\n\n#### 2.1.5 dict 值允许 None\n\n如果 \"gender\" key 既可以是字符串，又可以是 None，那么检查体的内容如下：\n\n```python\n{\n    \"struct\": \"dict\",\n    \"strict\": True,\n    \"elements\": {\n        \"name\": \"str\",\n        \"age\": \"str\",\n        \"gender\": [\"str\", \"None\"]\n    }\n}\n```\n\n### 2.2 list 模板类型\n\n#### 2.2.1 list 结构\n\n```python\n{\n    \"struct\": \"list\",\n    \"strict\": True,\n    \"elements\": \"{pattern}\"\n}\n```\n\n#### 2.2.2 list 示例\n\n期望参数示例：\n\n```python\n[\"Tony\", \"Tom\", \"Bob\", \"Lisa\"]\n```\n\n我们希望列表里的元素类型是 str，那么检查体的内容如下：\n\n```python\n{\n    \"struct\": \"list\",\n\t\"strict\": True\n    \"elements\": \"str\"\n}\n```\n\n#### 2.2.3 list 允许多种值类型\n\n如果允许 list 中有 str 和 int，那么检查体的内容如下：\n\n```python\n{\n    \"struct\": \"list\",\n    \"strict\": True\n    \"elements\": [\"str\", \"int\"]\n}\n```\n\n#### 2.2.4 list 值允许 None\n\n如果允许 list 中有 None，那么检查体的内容如下\n\n```python\n{\n    \"struct\": \"list\",\n    \"strict\": True\n    \"elements\": [\"str\", \"None\"]\n}\n```\n\n### 2.3 set 模板类型\n\n#### 2.3.1 set 基本结构\n\n```python\n{\n    \"struct\": \"set\",\n    \"strict\": True,\n    \"elements\": \"{pattern}\"\n}\n```\n\n#### 2.3.2 set 示例\n\n期望参数示例：\n\n```python\n{\"Tony\", \"Tom\", \"Bob\", \"Lisa\"}\n```\n\n我们希望列表里的元素类型是 str，那么检查体的内容如下\n\n```python\n{\n    \"struct\": \"set\",\n  \t\"strict\": True,\n    \"elements\": \"str\"\n}\n```\n\n#### 2.3.3 set 允许多种值类型\n\n如果允许 set 中有 str 和 int，那么检查体的内容如下：\n\n```python\n{\n    \"struct\": \"set\",\n    \"strict\": True,\n    \"elements\": [\"str\", \"int\"]\n}\n```\n\n#### 2.3.4 set 值允许 None\n\n如果允许 set 中有 None，那么检查体的内容如下\n\n```python\n{\n    \"struct\": \"set\",\n    \"strict\": True,\n    \"elements\": [\"str\", \"None\"]\n}\n```\n\n### 2.4 str int float bool 模板类型\n\n这几个结构比较简单，这边直接列出\n\n```python\n{\n    \"struct\": \"str\"\n}\n```\n\n```python\n{\n    \"struct\": \"int\"\n}\n```\n\n```python\n{\n    \"struct\": \"float\"\n}\n```\n\n```python\n{\n    \"struct\": \"bool\"\n}\n```\n\n需要注意的是，之所以把 str int float bool 也都拉出来可以做成结构类型，是为了更细粒度的检查，比如说，检查字符串是否是空串\n\n事实上，以下两种写法是等价的\n\n```python\n\"str\"\n```\n\n```python\n{\n    \"struct\": \"str\"\n}\n```\n\n## 3 pattern 结构类型的嵌套\n\n如果 dict 结构中的元素是 list 怎么办。假设我们的数据是这样的：\n\n```python\n{\n    \"name\": \"Tony\",\n    \"work\": {\n        \"company\": \"Google\",\n        \"occupation\": \"software engineer\"\n    }\n}\n```\n\n上面示例中 \"work\" 这个键的值是一个 dict，这样的数据对应的 pattern 是\n\n```python\n{\n    \"struct\": \"dict\",\n    \"elements\": {\n        \"name\": \"str\",\n        \"work\": {\n            \"struct\": \"dict\",\n            \"elements\": {\n                \"company\": \"str\",\n                \"occupation\": \"str\"\n            }\n        }\n    }\n}\n```\n\n可以看到，在 elements 中 \"work\" 键对应的值也是一个 dict 类型的结构\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Agwave/parcheck.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parcheck",
    "package_url": "https://pypi.org/project/parcheck/",
    "platform": null,
    "project_url": "https://pypi.org/project/parcheck/",
    "project_urls": {
      "Homepage": "https://github.com/Agwave/parcheck.git"
    },
    "release_url": "https://pypi.org/project/parcheck/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A lightweight, minimalist, easy-to-use python toolkit",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15816804,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f253f8d964b0aa6a05ba41e5c9751e71b75885f9c5f4b8e069029727fc804e33",
          "md5": "850095ff457e7eab2125424e60bd9a3c",
          "sha256": "1c3d7191f6cc72700eff2232d0e8fc935bd50680e7be59ca994e578d3f30ce52"
        },
        "downloads": -1,
        "filename": "parcheck-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "850095ff457e7eab2125424e60bd9a3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 1061,
        "upload_time": "2022-11-05T13:45:08",
        "upload_time_iso_8601": "2022-11-05T13:45:08.056864Z",
        "url": "https://files.pythonhosted.org/packages/f2/53/f8d964b0aa6a05ba41e5c9751e71b75885f9c5f4b8e069029727fc804e33/parcheck-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c7b6c1cee7c1a3878bf3b988ab042c07928bc7ef5bbe46759a5885066368ae1",
          "md5": "3c122a3abe2a6aa7f0a8862517e062ce",
          "sha256": "7a15f58f0d6fdef651928e75e2b767f2019811feb6917257473eaab3ba07bb8b"
        },
        "downloads": -1,
        "filename": "parcheck-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c122a3abe2a6aa7f0a8862517e062ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 930,
        "upload_time": "2022-11-05T13:45:09",
        "upload_time_iso_8601": "2022-11-05T13:45:09.587329Z",
        "url": "https://files.pythonhosted.org/packages/5c/7b/6c1cee7c1a3878bf3b988ab042c07928bc7ef5bbe46759a5885066368ae1/parcheck-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf21418e70de8184fb884f92369a0a3519b0656243a23fcdc25ce688748e4868",
          "md5": "520e1f4b370e62c9239ee54fe613fd0b",
          "sha256": "1b8d75b2e80faa09962ecb8b60fabcf4af0f6ea80875fcb1f2e1be0f90fa50dd"
        },
        "downloads": -1,
        "filename": "parcheck-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "520e1f4b370e62c9239ee54fe613fd0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 1429,
        "upload_time": "2022-11-05T14:29:25",
        "upload_time_iso_8601": "2022-11-05T14:29:25.123629Z",
        "url": "https://files.pythonhosted.org/packages/bf/21/418e70de8184fb884f92369a0a3519b0656243a23fcdc25ce688748e4868/parcheck-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "501445d409573735a837ffbd1a472b5331462f07a303442ca435fbc47bcdcbb7",
          "md5": "755e460acbdff9adbd003946a6eea5dc",
          "sha256": "a33c01a1a8255b1705b7cafb1aae700c15ae7fa3d2262a220f8f347668daaaa8"
        },
        "downloads": -1,
        "filename": "parcheck-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "755e460acbdff9adbd003946a6eea5dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 1194,
        "upload_time": "2022-11-05T14:29:26",
        "upload_time_iso_8601": "2022-11-05T14:29:26.724157Z",
        "url": "https://files.pythonhosted.org/packages/50/14/45d409573735a837ffbd1a472b5331462f07a303442ca435fbc47bcdcbb7/parcheck-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a32bf3b65ce8459391c8b3f1d170b6e956275dd37600213ec733c23b148ce60",
          "md5": "08554953ea8eeac675975e358c392f31",
          "sha256": "9e9174d22fcf8ce173bb58be34339d4f25daf4f8d86cf0b7673ea72657b2a6f2"
        },
        "downloads": -1,
        "filename": "parcheck-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08554953ea8eeac675975e358c392f31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 9031,
        "upload_time": "2022-11-18T15:50:49",
        "upload_time_iso_8601": "2022-11-18T15:50:49.820697Z",
        "url": "https://files.pythonhosted.org/packages/3a/32/bf3b65ce8459391c8b3f1d170b6e956275dd37600213ec733c23b148ce60/parcheck-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4435a880478a4cf4eb26b7fde02bb1d34f9acc36f2e8cebb98f77e8dd1c606e8",
          "md5": "51144fb3f7f3ce1a4ddbbc890abaf3c3",
          "sha256": "2ef4b71fbed8b8f753e277f07963831c423a7b38fe3823b5ce445dc7deaf79e3"
        },
        "downloads": -1,
        "filename": "parcheck-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "51144fb3f7f3ce1a4ddbbc890abaf3c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 12124,
        "upload_time": "2022-11-18T15:50:52",
        "upload_time_iso_8601": "2022-11-18T15:50:52.430202Z",
        "url": "https://files.pythonhosted.org/packages/44/35/a880478a4cf4eb26b7fde02bb1d34f9acc36f2e8cebb98f77e8dd1c606e8/parcheck-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8cb9a2a28b37c4c9f8b8dbaef36b1191f07bc2f3f186fce104f4c663bbaae03",
          "md5": "ef35784f2fe5e2e10856167ba43ab1e1",
          "sha256": "ea3d44d816bccc2a5a04a2223d5fb8fe67e0f49c67c921d4861e78c36fcf980a"
        },
        "downloads": -1,
        "filename": "parcheck-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef35784f2fe5e2e10856167ba43ab1e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 9026,
        "upload_time": "2022-11-18T16:10:10",
        "upload_time_iso_8601": "2022-11-18T16:10:10.818040Z",
        "url": "https://files.pythonhosted.org/packages/f8/cb/9a2a28b37c4c9f8b8dbaef36b1191f07bc2f3f186fce104f4c663bbaae03/parcheck-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4602cc7839361ace28b7798641125d2038cb5f6d714331de09b2137c3323e2c",
          "md5": "c2b4fab43a071ca078e4e21e88aeab9f",
          "sha256": "e9705bc67316a3981d3aaf9ccb1cd1617c938bceeca76c30ec16a5de01d83ad9"
        },
        "downloads": -1,
        "filename": "parcheck-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c2b4fab43a071ca078e4e21e88aeab9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 12128,
        "upload_time": "2022-11-18T16:10:13",
        "upload_time_iso_8601": "2022-11-18T16:10:13.393639Z",
        "url": "https://files.pythonhosted.org/packages/b4/60/2cc7839361ace28b7798641125d2038cb5f6d714331de09b2137c3323e2c/parcheck-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8cb9a2a28b37c4c9f8b8dbaef36b1191f07bc2f3f186fce104f4c663bbaae03",
        "md5": "ef35784f2fe5e2e10856167ba43ab1e1",
        "sha256": "ea3d44d816bccc2a5a04a2223d5fb8fe67e0f49c67c921d4861e78c36fcf980a"
      },
      "downloads": -1,
      "filename": "parcheck-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ef35784f2fe5e2e10856167ba43ab1e1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 9026,
      "upload_time": "2022-11-18T16:10:10",
      "upload_time_iso_8601": "2022-11-18T16:10:10.818040Z",
      "url": "https://files.pythonhosted.org/packages/f8/cb/9a2a28b37c4c9f8b8dbaef36b1191f07bc2f3f186fce104f4c663bbaae03/parcheck-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4602cc7839361ace28b7798641125d2038cb5f6d714331de09b2137c3323e2c",
        "md5": "c2b4fab43a071ca078e4e21e88aeab9f",
        "sha256": "e9705bc67316a3981d3aaf9ccb1cd1617c938bceeca76c30ec16a5de01d83ad9"
      },
      "downloads": -1,
      "filename": "parcheck-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c2b4fab43a071ca078e4e21e88aeab9f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 12128,
      "upload_time": "2022-11-18T16:10:13",
      "upload_time_iso_8601": "2022-11-18T16:10:13.393639Z",
      "url": "https://files.pythonhosted.org/packages/b4/60/2cc7839361ace28b7798641125d2038cb5f6d714331de09b2137c3323e2c/parcheck-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}