{
  "info": {
    "author": "Emmanouil (Manios) Krasanakis",
    "author_email": "maniospas@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# yamlres\n\n*Retrieving algorithm component combinations from online (or local) yaml resources.*\n\nThis project extends the *yaml* prototype with web-based resource fields\nand creates a declarative algorithm interface. This can help share algorithms\nbased on existing *Python* libraries via a continuous deployment pipeline\nwhere you only update web resources. Thus, algorithm declarations are\nare separated from the update cycles of building components.\n\n**Development:** Emmanouil (Manios) Krasanakis<br>\n**Dependencies:** `pyyaml`,`wget`\n\n## Loading yaml from the web\n`yamlres` parses normal *yaml* files, but also goes through their fields\nin search of strings with containing the *.yaml* file extension and recursively\nreplaces such fields from files. Recursive loading throws an exception.\nYou can reference online web resources to automatically download and parse.\n\nFor example, you can download and load an online *yaml* resource with \nthe following code:\n\n```python\nfrom yamlres import Loader\n\nresource = \"https://raw.githubusercontent.com/maniospas/yamlres/main/examples/ppr.yaml\"\nspecs = Loader().load(resource)\n```\n\nYou can also access fields within yaml file dicts as if they were loaded objects.\nFor example, you can access the *import* field of the above file by loading:\n\n```python\nprint(Loader().load(resource+\".import\"))\n# {'pg': 'pygrank'}\n```\n\n<details>\n    <summary>Resource accessing within yaml</summary>\nLet's see now how accessing a resource can look like from within \na different yaml file. This example will create a variation\nof examples/ppr.yaml (you could also use the respective URL\nin place of that file name) that references parts of the latter:\n\n```yaml\nimport: examples/ppr.yaml.import\nassign:\n    ranker:\n      method: pg.HeatKernel\n      args: 3\n    posteriors: examples/ppr.yaml.assign.posteriors\nreturn: posteriors\n```\n\n</details>\n\n<details>\n  <summary>Resource cache</summary>\nThe above will automatically create a res/ folder at your working \ndirectory and places downloaded resources in there.\nCalling the same resources multiple times will now download them again.\nTo set a different path to store resources and update them on each run, \nyou can call:\n\n```python\nspecs = Loader(path=\"yourpath/\", update=True).load(...)\n```\n</details>\n\n## Algorithms from yaml definitions\n`yamlres` lets you share definitions of algorithmic pipelines in *yaml* \nformat. These should be appropriate dictionaries and can be loaded in \nthe form of runnable methods with appropriate keyword arguments per:\n\n```python\nfrom pyyaml import Runner\n\nalgorithm = Runner().init(specs)\nprint(algorithm(kwarg1=..., kwarg2=...))\n```\n\nThe following dictionary fields are allowed in algorithm definitions:\n\n**definitions**\nPlace any *yaml* anchor definitions here. No additional processing\ntakes place for these .\n\n**import**\nThis is a dictionary from aliases to respective libraries. You can use methods\nof imported libraries in your definitions. For example, the expression\n`import libraryname as lib` is converted to `yamlres` format to the following\nsnippet and lets you reference methods with the pattern *lib.methodname* :\n\n```yaml\nimport:\n  lib: libraryname\n```\n\n<details>\n  <summary>Dependency safety</summary>\nRunning defined algorithms is safe in that it runs only on dependencies that\nend users have declared. To fully constraint runs on a predefined set of \ndependencies, you can pass these as a list argument to the runner,\nfor example as in the following snippet:\n\n```python\nalgorithm = Runner(trust=[\"pygrank\"]).init(specs)\n```\n\n</details>\n\n**assign**\nThis is a dictionary of value assignments. If the assignment\nis a dictionary and it has a *method* field, then the respective\nmethod is called based on the optional *args* and *kwargs* fields. For\nexample, to call a method and assign the returned value to a\nvariable, you can call:\n\n```yaml\nassign:\n  variablename:\n    method: methodname\n    args: [arg1, arg2]\n    kwargs:\n      argname1: argvalue1\n      argname2: argvalue2\n```\n\nVariables can be used as inputs to other method calls or be returned\nat the end. You can also directly define method calls within\narguments or keyword arguments, though you won't be able to \nprogrammatically override those afterwards.\n\n<details>\n    <summary>Functional pipeline</summary>\nYou can define a functional pipeline by calling the namesake method,\nof the yaml.functional module. This starts from an input and calls\neach consequent methods\n\n```yaml\nimport:\n  func: yamlres.functional\nassign:\n  output:\n    method: func.pipeline\n    args:\n      - input\n      - methodname\n      - method: MethodBuilder1\n      - method: MethodBuilder2\n```\n</details>\n\n\n<details>\n    <summary>Method builders</summary>\nYou can define a method builder by calling the namesake method,\nof the yaml.functional module. This starts from a method and\narguments to override, and fills in the required ones later.\nMostly this is used to generate the equivalents of\nlambda expressions for methods that require other methods \nas inputs:\n\n```yaml\nimport:\n  func: yamlres.functional\nassign:\n  methodvariation:\n    method: func.builder\n    args: basemethod\n    kwargs: \n      kwarg1: value1\n      kwarg2: value2\n  output:\n    method: func.pipeline\n    args:\n      - input\n      - methodvariation  # will call basemethod(input, kwarg1=value1, kwarg2=value2)\n      - method: MethodBuilder1\n      - method: MethodBuilder2\n```\n</details>\n\n\n<details>\n  <summary>Programmatically overriding values</summary>\nAny arguments you provide to runners override any internal\ndefinitions. For example, you can run the examples/ppr.yaml\nfile with value alpha=0.9 with the following code snippet:\n\n```python\nfrom yamlres import Loader, Runner\n\nresource = \"https://raw.githubusercontent.com/maniospas/yamlres/main/examples/ppr.yaml\"\nspecs = Loader().load(resource)\nalgorithm = Runner().init(specs)\nprint(algorithm(priors=..., alpha=0.9))\n```\n\n</details>\n\n**return**\nThis declares either a single value or a dicitionary of values\nto return when your defined algorithm is run.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maniospas/yamlres",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yamlres",
    "package_url": "https://pypi.org/project/yamlres/",
    "platform": null,
    "project_url": "https://pypi.org/project/yamlres/",
    "project_urls": {
      "Homepage": "https://github.com/maniospas/yamlres"
    },
    "release_url": "https://pypi.org/project/yamlres/0.1.2/",
    "requires_dist": [
      "pyyaml",
      "wget"
    ],
    "requires_python": "",
    "summary": "A yaml-based declarative programming interface",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17063488,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "beea47ede6ecb27d1a0c601fb4b05a50b9575428bee9a1caebd30b8fbb6960b0",
          "md5": "8b2c49db2abbea236a31b424f3070fda",
          "sha256": "6b6c7a0b073479e8b42e9f6609240f171a0cdadcf6fbd09e4dcccbbd37194b1d"
        },
        "downloads": -1,
        "filename": "yamlres-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b2c49db2abbea236a31b424f3070fda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5284,
        "upload_time": "2023-02-10T15:16:38",
        "upload_time_iso_8601": "2023-02-10T15:16:38.919614Z",
        "url": "https://files.pythonhosted.org/packages/be/ea/47ede6ecb27d1a0c601fb4b05a50b9575428bee9a1caebd30b8fbb6960b0/yamlres-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b56311ee16ea0f450915e450759bd625e3c3744f4ac64e421142cc7367fa784",
          "md5": "45fe795462e9f644c60f6fea1a1b7b74",
          "sha256": "d74271c10e8aa6cd2fb5b375fbebfd30562cb33bbfcfe51a6dff56bc806e7b30"
        },
        "downloads": -1,
        "filename": "yamlres-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45fe795462e9f644c60f6fea1a1b7b74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5333,
        "upload_time": "2023-02-10T16:48:41",
        "upload_time_iso_8601": "2023-02-10T16:48:41.687407Z",
        "url": "https://files.pythonhosted.org/packages/4b/56/311ee16ea0f450915e450759bd625e3c3744f4ac64e421142cc7367fa784/yamlres-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c20a57e94f8ba8f35076734ccd70f21222fa018f30f8df36b8da4edf078340d5",
          "md5": "7ee86dfacdac5c67f354e50026872814",
          "sha256": "52ecc040ad8041bb4d3f1d3c1a15eb497e34fb37c3d976c04de55e96b4711df1"
        },
        "downloads": -1,
        "filename": "yamlres-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ee86dfacdac5c67f354e50026872814",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5758,
        "upload_time": "2023-02-11T11:45:38",
        "upload_time_iso_8601": "2023-02-11T11:45:38.384265Z",
        "url": "https://files.pythonhosted.org/packages/c2/0a/57e94f8ba8f35076734ccd70f21222fa018f30f8df36b8da4edf078340d5/yamlres-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa2335c2fc87eaa8eea864c6953a03cf4f7274b504544b80bea084c304c32f99",
          "md5": "17a40fa6dd2f34fc1d6b42200b5ce942",
          "sha256": "b0ce5664bdaed47e1bef19599b4ae091f7c075e9e0e253a6d12ece3481476fe9"
        },
        "downloads": -1,
        "filename": "yamlres-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17a40fa6dd2f34fc1d6b42200b5ce942",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5915,
        "upload_time": "2023-02-27T12:32:59",
        "upload_time_iso_8601": "2023-02-27T12:32:59.593493Z",
        "url": "https://files.pythonhosted.org/packages/fa/23/35c2fc87eaa8eea864c6953a03cf4f7274b504544b80bea084c304c32f99/yamlres-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa2335c2fc87eaa8eea864c6953a03cf4f7274b504544b80bea084c304c32f99",
        "md5": "17a40fa6dd2f34fc1d6b42200b5ce942",
        "sha256": "b0ce5664bdaed47e1bef19599b4ae091f7c075e9e0e253a6d12ece3481476fe9"
      },
      "downloads": -1,
      "filename": "yamlres-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "17a40fa6dd2f34fc1d6b42200b5ce942",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5915,
      "upload_time": "2023-02-27T12:32:59",
      "upload_time_iso_8601": "2023-02-27T12:32:59.593493Z",
      "url": "https://files.pythonhosted.org/packages/fa/23/35c2fc87eaa8eea864c6953a03cf4f7274b504544b80bea084c304c32f99/yamlres-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}