{
  "info": {
    "author": "",
    "author_email": "Dimitrios Ieronymakis <ieronymakis.dim@protonmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Discrete Algebraic Reconstruction Technique (DART)\nDART is an iterative reconstruction algorithm for discrete tomography. The original publication in <a href=\"#original_publication\">[1]</a> was used as reference to create this library.\nWhat this repository consists of, is an implementation of the DART algorithm together with a framework to generate phantoms and measurements, to test the algorithm itself.<br/>\nThe DART algorithm alternates between continuous and discrete reconstruction steps. For the continuous step, many reconstruction algorithms were implemented with **astra-toolbox**. Publications relevant to this library can be found in <a href=\"#astra_1\">[2]</a>, <a href=\"#astra_2\">[3]</a> and <a href=\"#astra_3\">[4]</a>. For the original publication of SART, which is the main reconstruction algorithm presented in the original DART publication, you can refer to <a href=\"#SART\">[5]</a>.\n\n\n<!-- TABLE OF CONTENTS -->\n<details id=\"test\">\n  <summary>Table of Contents</summary>\n  <ul>\n    <li><a href=\"#prerequisites\">Prerequisites</a></li>\n    <li><a href=\"#usage\">Usage</a></li>\n    <ul>\n        <li><a href=\"#generating-phantoms\">Generationg phantoms</a></li>\n        <li><a href=\"#generating-projections\">Generating projections</a></li>\n        <li><a href=\"#dart-and-substeps\">DART & substeps</a></li>\n        <li><a href=\"#algebraic-reconstruction-algorithms\">Algebraic Reconstruction Algorithms</a></li>\n    </ul>\n    <li><a href=\"#examples-and-results\">Examples & Results</a></li>\n    <li><a href=\"#issues\">Issues</a></li>\n    <li><a href=\"#references\">References</a></li>\n  </ul>\n</details>\n\n\n## Prerequisites\nAn environment with `Python 3` >= 3.6 is required to use this library with the `astra-toolbox` installed.\nAstra-toolbox can be installed with anaconda with thwe following command:\n```python\nconda install -c astra-toolbox astra-toolbox\n```\nOr you can follow the instructions available <a href=\"https://www.astra-toolbox.com/\">here</a>.\n\nTo install the DART pip package run the following command:\n```python\npip install DART-OhGreat\n```\n\n## Usage\nTo run DART, data *(in the form of phantoms)* and measurements *(in the form of projections)* need to be artificially constructed. \nTherefore, three main wrappers have been created around the code to solve the following tasks:\n- phantom creation\n- projection and measurements acquisition\n- running DART reconstruction algorithm\n\nUsage of the package for each of this tasks is described in detail in the following sections. \n\nIf instead of using the pip package you chose to clone the repository, you need to add `src.` before every import as such:\n```python\nfrom src.phantoms.creator import create_phantoms\n```\n\n### Generating phantoms\n\n#### Semilunar phantoms\nTo generate semilunar like phantoms you can use the `create_phantoms` function. It can be imported from `phantoms.creator.py` and used as below:\n```python\nfrom phantoms.creator import create_phantoms\nphantom_list = create_phantoms(phantoms=\"semilunars\",img_size=512, gray_values=[255, 200, 150], n=3, overlap=False, seed=None, img_name=\"dir/to/save/filename\")\n``` \nParameters:\n- `phantoms`: (string), name of the phantom family. Shoud be one between \"semilunars\", \"aliens\", \"clouds\", \"paws\".\n- `img_size`: should be an integer of value 256 or 512 and represents the size of the phantoms to generate.\n- `gray_values`: list of three integers between 0 and 255 representing the intensities to use for the various phantom layers.\n- `n`: integer representing the number of phantoms to generate.\n- `overlap`: defines wether the shape layers should overlap between them.\n- `seed`: integer to be passed to have reproducible results.\n- `img_name`: string defining the path and filename to use.\n                The filename should not have the extension, \n                it will be created as a png by default.\n\nOutput:\n- python list of phantoms. (Phantoms as numpy arrays of type np.uint8)\n\n### Generating projections\n\n#### From 2D phantoms\nTo generate measurements in the form of 1D projections, the function `project_from_2D` has been created. You can import it and use it with the following commands:\n\n```python\nfrom projections.project import project_from_2D\nproj_id, sino_id, sinogram = project_from_2D(phantom_id, vol_geom, n_projections, detector_spacing, apply_noise=False, save_dir=None, use_gpu=False)\n```\nParameters:\n- `phantom_id`: Phantom as astra-toolbox object.\n- `vol_geom`: geometry of the output image. Used to define the number of detectors as the first dimension of the vol_geom.\n- `n_projections`: is an integer value representing the number of projections as the number of angles to make measurements from.\n- `detector_spacing`: defines the size of the pixel.\n- `angles`: angles to use for the measurements. (np.array, should be created as a np.linspace of values)\n- `noise_factor`: factor that adds Poisson distributed noise to the image, when defined. \n- `save_dir`: string representing the directory to save png images that represent the measurements. Images won't be saved if this parameter is not set.\n- `use_gpu`: creates a projector that can use GPU  \n\nOutput:\n- The function will return `proj_id`, `sino_id` and `sinogram`. The first is a reference to the astra toolbox projector object, the second is a reference to the astra toolkit sinogram object and the former is the sinograms' actual measurements.\n\n#### From 3D phantoms\n***to be added***\n\n\n### DART and substeps\nAll the steps required to run the DART algorithm have been broken down and can be used separately. A detailed desctiption for the usage of all the functions  available in the library will follow in this section.\n \n#### DART algorithm\nDART can be used in the following way:\n```python\nfrom algorithms.DART import *\n# create DART instance\ndart = DART(gray_levels=[0, 40, 150], p=0.85, rec_shape=img.shape,\n            proj_geom=proj_geom, projector_id=projector_id,\n            sinogram=sinogram)\n# run DART algorithm\nrec = dart.run(iters=10, rec_alg=\"SART_CUDA\", rec_iter= 1000)\n\n```\nInstance parameters:\n- `gray_levels`: gray levels known *a priori* used in the segmentation step. (list)\n- `p`: probability of a pixel to not be sampled as a free pixel. (float)\n- `rec_shape`: shape of the volume to create as output. (tuple)\n- `proj_geom`: astra-toolbox projection geometry used for the measurements.\n- `projector_id`: reference to the astra toolbox projector used to make the projections. (Can be created with the **project_from_2D** fucntion described above)\n- `sinogram`: sinorgam of measurements. (np.array) (Can be created with the **project_from_2D** fucntion described above)\n\nRun parameters:\n- `iters`: number of DART iteration to perform. (int)\n- `p`: as above, can be used to run multiple experiments without reistanciating DART.\n- `gray_levels`:same as above.\n- `rec_alg`: algebraic reconstruction algorithm to use: can be 'SART', 'SIRT' or 'FBP'. To run the GPU implementations just add '_CUDA' to the algorithn name (e.g. 'SART_CUDA').\n- `rec_iter`: number of reconstruction subrutine iterations to run.\n\nOutput:\n- (np.array), returns the reconstructed image.\n\n### Segmentation\nThe method `segment` can be used to segment an image at the defined gray values, once DART has been instanced as defined above.\n```python\nnew_gray_vals = [0, 130, 240]\ndart.gray_values = new_gray_vals\n# function to update gray values thresholds\ndart.update_gray_thresholds()\nsegmented_img = dart.segment(img)\n```\nParameters:\n- `img`: is the grayscale input phantom to segment as a 2D numpy matrix.\n- `gray_levels` : array of gray levels to compute the thresholds for the segmentation from.\n\nOutput:\n- returns the segmented image. (np.array)\n\n### Pixel neighborhood\nTo calculate the indexes of neighbours of a specific pixel, you can use the method `pixel_neighborhood` as below:\n```python\nneighbours = dart.pixel_neighborhood(img_shape, x, y)\n```\nParameters:\n- `img_shape` : is the shape of the reconstructed image.\n- `x,y`: are the coordinates of the pixel to calculate the neighbours for.\n\nOutput:\n- The method returns a list with all the indexes of the neighbours.\n\n### Boundary pixels\nTo calculate the boundary pixels of the phantom image, the method `boundary_pixels` takes as input the reconstructed image and calculates the boundary pixels with the help of the `pixel_neighborhood` method described above. You can use it as follows, after having created a DART instance:\n```python\nb_pixels = dart.boundary_pixels(img):\n```\nParameters:\n- `img`: (2D np.array), image to calculate boundary pixels for.\n\nOutput:\n- (np.array), mask of boundary pixels.\n\n### Free pixels\nTo calculate the free pixels, the following method is available:\n```python\nfree_pixels = dart.free_pixels()\n```\nThe method takes into consideration the **p** value defined in the DART instance to calculate the free pixels.\n\nOutput:\n- The output `free_pixels` is a binary 2D np.array, where the True values represent the free pixels.\n\n## Algebraic Reconstruction Algorithms\nFor the continous reconstruction step of DART, various algorithms have been implemented with the ASTRA-toolbox. Specifically, **SART**, **SIRT** and **FBP** are available for experimentation. You can call the functions detatched from DART as below:\n\nThe following example demostrates how to use SART:\n```python\nfrom algorithms.SART import *\nsart_res_id, sart_res = SART(vol_geom, vol_data, projector_id, sino_id, iters, use_gpu=True)\n```\nSIRT and FBP can be used similarly to the SART example above. \n\nParameters:\n- `vol_geom`: represents the volume geometry for the output.\n- `vol_data`: starting values to use for the reconstructed image.\n- `projector_id`: specifies the projector to use for the measurements.\n- `sino_id`: is the sinogram id of the projections.\n- `iters`: number of dart iterations to run.\n- `use_gpu`: set to True to run Astra on GPU. You also need to use a gpu capable projector.\n\nOutput:\n- The algorithm will return `sart_res_id` which is the astra-toolbox reference to the reconstructed phantom, and `sart_res`, a numpy array with the actual values of the reconstructed phantom.  \n\n## Examples and Results\nExamples on how to use the repository are available in the notebook examples under the `notebook_examples` directory. To run experiments on various algorithms and measurement configurations you can check the examples in the `experiment_scripts` directory.\n\n## Issues\nIf you encounter any problems while using the framework you can notify us by opening an issue here: https://github.com/OhGreat/DART_python/issues\n\n## References\n<div id=\"original_publication\">\n[1].<br/>\nBatenburg, Kees & Sijbers, Jan. (2011). DART: A Practical Reconstruction Algorithm for Discrete Tomography. IEEE transactions on image processing : a publication of the IEEE Signal Processing Society. 20. 2542-53. 10.1109/TIP.2011.2131661, <a href=\"https://ieeexplore.ieee.org/document/5738333\">https://ieeexplore.ieee.org/document/5738333</a>\n</div>\n\n<br/>\n<div id=\"astra_1\">\n[2].<br/>\nW. van Aarle, W. J. Palenstijn, J. Cant, E. Janssens, F. Bleichrodt, A. Dabravolski, J. De Beenhouwer, K. J. Batenburg, and J. Sijbers, “Fast and Flexible X-ray Tomography Using the ASTRA Toolbox”, Optics Express, 24(22), 25129-25147, (2016),\n <a href=\"http://dx.doi.org/10.1364/OE.24.025129\">http://dx.doi.org/10.1364/OE.24.025129</a>\n</div>\n\n<br/>\n<div id=\"astra_2\">\n[3].<br/>\nW. van Aarle, W. J. Palenstijn, J. De Beenhouwer, T. Altantzis, S. Bals, K. J. Batenburg, and J. Sijbers, “The ASTRA Toolbox: A platform for advanced algorithm development in electron tomography”, Ultramicroscopy, 157, 35–47, (2015), <a href=\"http://dx.doi.org/10.1016/j.ultramic.2015.05.002\">http://dx.doi.org/10.1016/j.ultramic.2015.05.002</a>\n</div>\n\n<br/>\n<div id=\"astra_3\">\n[4].<br/>\nW. J. Palenstijn, K. J. Batenburg, and J. Sijbers, “Performance improvements for iterative electron tomography reconstruction using graphics processing units (GPUs)”, Journal of Structural Biology, vol. 176, issue 2, pp. 250-253, 2011, <a href=\"http://dx.doi.org/10.1016/j.jsb.2011.07.017\">http://dx.doi.org/10.1016/j.jsb.2011.07.017</a>\n</div>\n\n<br/>\n<div id=\"SART\">\n[5].<br/>\nYu, Hengyong & Wang, Ge. (2010). SART-Type Image Reconstruction from a Limited Number of Projections with the Sparsity Constraint. International journal of biomedical imaging. 2010. 934847. 10.1155/2010/934847. <a href=\"https://www.hindawi.com/journals/ijbi/2010/934847/\">https://www.hindawi.com/journals/ijbi/2010/934847/</a>\n </div>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DART-OhGreat",
    "package_url": "https://pypi.org/project/DART-OhGreat/",
    "platform": null,
    "project_url": "https://pypi.org/project/DART-OhGreat/",
    "project_urls": {
      "Bug Tracker": "https://github.com/OhGreat/DART_python/issues",
      "Homepage": "https://github.com/OhGreat/DART_python"
    },
    "release_url": "https://pypi.org/project/DART-OhGreat/0.0.5/",
    "requires_dist": [
      "numpy (>=1.22.0)",
      "matplotlib (>=3.5.0)",
      "Pillow (>=9.1.1)",
      "scipy (>=1.8.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "A python implementation of the DART algorithm.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14341105,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf56bc6a93600581fb5cd9bda01533f7858dc0d87f13141e51d01719733eccc9",
          "md5": "1a60c8c311881dcc6c892a0860628778",
          "sha256": "ef8d5ac7016cb85e2c04219ff158711a5742552bb8b186d39dce9622014e1505"
        },
        "downloads": -1,
        "filename": "DART_OhGreat-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a60c8c311881dcc6c892a0860628778",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6403,
        "upload_time": "2022-06-15T10:03:07",
        "upload_time_iso_8601": "2022-06-15T10:03:07.944406Z",
        "url": "https://files.pythonhosted.org/packages/cf/56/bc6a93600581fb5cd9bda01533f7858dc0d87f13141e51d01719733eccc9/DART_OhGreat-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ab6763de1851ed1a5d14fbab93759edc6018363523b189795f29f4319827cfd",
          "md5": "3f6d4cc15c7d51a9a991347e3644eb96",
          "sha256": "d2f4b597d29bbbd4e2413f6d3f4932fd97395f998b1e16009cbae7677d48cd7b"
        },
        "downloads": -1,
        "filename": "DART-OhGreat-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3f6d4cc15c7d51a9a991347e3644eb96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 6949,
        "upload_time": "2022-06-15T10:03:10",
        "upload_time_iso_8601": "2022-06-15T10:03:10.376793Z",
        "url": "https://files.pythonhosted.org/packages/5a/b6/763de1851ed1a5d14fbab93759edc6018363523b189795f29f4319827cfd/DART-OhGreat-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "002934527afbaf4b263e0e9728f7d03713849a3cdf148cc2c61e51728f23c70f",
          "md5": "7bcf40b427ff49d7ddf37e3e0a7882a8",
          "sha256": "b9c7ccbb4e3a0eea5f5fc97dff44be80380c5b2da60b5490146107dd01e8d95f"
        },
        "downloads": -1,
        "filename": "DART_OhGreat-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bcf40b427ff49d7ddf37e3e0a7882a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14234,
        "upload_time": "2022-06-15T10:18:09",
        "upload_time_iso_8601": "2022-06-15T10:18:09.182305Z",
        "url": "https://files.pythonhosted.org/packages/00/29/34527afbaf4b263e0e9728f7d03713849a3cdf148cc2c61e51728f23c70f/DART_OhGreat-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78ec15d1d5b9c54e098604ad85e5ec2def919c3517288bb8574767fe5d040b56",
          "md5": "2826736d5087c58c48cb6f3a4e56f709",
          "sha256": "06bd77f98ebeb8a5c0e734d0a6e87a248374f4e2fb8e7b5fdaf4b6dc411d88c0"
        },
        "downloads": -1,
        "filename": "DART-OhGreat-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2826736d5087c58c48cb6f3a4e56f709",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12340,
        "upload_time": "2022-06-15T10:18:11",
        "upload_time_iso_8601": "2022-06-15T10:18:11.510452Z",
        "url": "https://files.pythonhosted.org/packages/78/ec/15d1d5b9c54e098604ad85e5ec2def919c3517288bb8574767fe5d040b56/DART-OhGreat-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a42949f62be46c604bb572643d27a6c14464309fdd13d3cc14bd6a938713325d",
          "md5": "c904feb9c828cf4eaa0e479b627c4389",
          "sha256": "2d691f6aadd5e866407e1c4a7de183bd431c4c78b922caa6ae7b3f5d5e4c73bf"
        },
        "downloads": -1,
        "filename": "DART_OhGreat-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c904feb9c828cf4eaa0e479b627c4389",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14283,
        "upload_time": "2022-06-15T10:39:21",
        "upload_time_iso_8601": "2022-06-15T10:39:21.417344Z",
        "url": "https://files.pythonhosted.org/packages/a4/29/49f62be46c604bb572643d27a6c14464309fdd13d3cc14bd6a938713325d/DART_OhGreat-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80a1515fe7b5d0f27fe35499967beefa8a4fd9699f381805e7a76059804b6764",
          "md5": "17f73fbff9495b90bf0cb54addea40e1",
          "sha256": "518917b3ef9382ec594f058fe6c513824b411c4625eb898eba3914c0347af6ea"
        },
        "downloads": -1,
        "filename": "DART-OhGreat-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "17f73fbff9495b90bf0cb54addea40e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12440,
        "upload_time": "2022-06-15T10:39:23",
        "upload_time_iso_8601": "2022-06-15T10:39:23.773126Z",
        "url": "https://files.pythonhosted.org/packages/80/a1/515fe7b5d0f27fe35499967beefa8a4fd9699f381805e7a76059804b6764/DART-OhGreat-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30e41cc016b4e1b438ad17ef58441d67830af4314e0098835b612f2f87188326",
          "md5": "3619c58868720617d669498a40f98879",
          "sha256": "39a3e443fe3e20b7b0e4ce8d96d8888db2d70a40dde1acb1da09be8399d0481b"
        },
        "downloads": -1,
        "filename": "DART_OhGreat-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3619c58868720617d669498a40f98879",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15917,
        "upload_time": "2022-06-15T11:10:33",
        "upload_time_iso_8601": "2022-06-15T11:10:33.080614Z",
        "url": "https://files.pythonhosted.org/packages/30/e4/1cc016b4e1b438ad17ef58441d67830af4314e0098835b612f2f87188326/DART_OhGreat-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64035290bce6cd7a875a5c955f307b6e824dd09186cfedbc493cdcbe293cedd9",
          "md5": "e081834d882def8aca9842a0bacb7acb",
          "sha256": "f37e16f9f01b209c3f79fa4f7bd8c384adc4be59b2a98d4c33777362dd520d50"
        },
        "downloads": -1,
        "filename": "DART-OhGreat-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e081834d882def8aca9842a0bacb7acb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13867,
        "upload_time": "2022-06-15T11:10:35",
        "upload_time_iso_8601": "2022-06-15T11:10:35.453113Z",
        "url": "https://files.pythonhosted.org/packages/64/03/5290bce6cd7a875a5c955f307b6e824dd09186cfedbc493cdcbe293cedd9/DART-OhGreat-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69eacffb607613a66caa228a20e24891a0821ede485303952294869e371b7e1d",
          "md5": "9659dd94974128743b45046b6a0bf36a",
          "sha256": "bca3c3aaef9612029e29c580979ef72f28331545047e70122c0b5789071847b7"
        },
        "downloads": -1,
        "filename": "DART_OhGreat-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9659dd94974128743b45046b6a0bf36a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16199,
        "upload_time": "2022-07-05T14:35:13",
        "upload_time_iso_8601": "2022-07-05T14:35:13.636915Z",
        "url": "https://files.pythonhosted.org/packages/69/ea/cffb607613a66caa228a20e24891a0821ede485303952294869e371b7e1d/DART_OhGreat-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a247e9a728f282292ec54c9bfda792c4635b7dafae9936f01db85ae80c5f27e3",
          "md5": "12ca7eeb155f50ee9fe60da88d69b7c0",
          "sha256": "28f0772cf664e1b5d2a2ffb71a13600ab6a1167b98f142457d2f55447a7ff583"
        },
        "downloads": -1,
        "filename": "DART-OhGreat-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "12ca7eeb155f50ee9fe60da88d69b7c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13766,
        "upload_time": "2022-07-05T14:35:15",
        "upload_time_iso_8601": "2022-07-05T14:35:15.564111Z",
        "url": "https://files.pythonhosted.org/packages/a2/47/e9a728f282292ec54c9bfda792c4635b7dafae9936f01db85ae80c5f27e3/DART-OhGreat-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69eacffb607613a66caa228a20e24891a0821ede485303952294869e371b7e1d",
        "md5": "9659dd94974128743b45046b6a0bf36a",
        "sha256": "bca3c3aaef9612029e29c580979ef72f28331545047e70122c0b5789071847b7"
      },
      "downloads": -1,
      "filename": "DART_OhGreat-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9659dd94974128743b45046b6a0bf36a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 16199,
      "upload_time": "2022-07-05T14:35:13",
      "upload_time_iso_8601": "2022-07-05T14:35:13.636915Z",
      "url": "https://files.pythonhosted.org/packages/69/ea/cffb607613a66caa228a20e24891a0821ede485303952294869e371b7e1d/DART_OhGreat-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a247e9a728f282292ec54c9bfda792c4635b7dafae9936f01db85ae80c5f27e3",
        "md5": "12ca7eeb155f50ee9fe60da88d69b7c0",
        "sha256": "28f0772cf664e1b5d2a2ffb71a13600ab6a1167b98f142457d2f55447a7ff583"
      },
      "downloads": -1,
      "filename": "DART-OhGreat-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "12ca7eeb155f50ee9fe60da88d69b7c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 13766,
      "upload_time": "2022-07-05T14:35:15",
      "upload_time_iso_8601": "2022-07-05T14:35:15.564111Z",
      "url": "https://files.pythonhosted.org/packages/a2/47/e9a728f282292ec54c9bfda792c4635b7dafae9936f01db85ae80c5f27e3/DART-OhGreat-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}