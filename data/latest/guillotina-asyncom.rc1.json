{
  "info": {
    "author": "Jordi Collell",
    "author_email": "jordic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "## guillotina_asyncom\n\nPOC of integrating a new Content-type DBFolder\n\n- A DBFolder represents a table on postgres\n  with a related sqlalchemy model\n\n### Benefits\n\n- Use guillotina permission system\n- Use guillotina framework.\n- Lookup views on a context (a sqlalchemy object)\n- Integrate with the guillotina gmi interface\n\n## Howto use\n\n1. Create your regular sqlalchemy model, like, import your Base,\n   from guillotina_asyncom.db\n\n```python\nfrom guillotina_asyncom.db import Base\nimport sqlalchemy as sa\n\n@implementer(IModel)\nclass Model(Base):\n    __tablename__ = \"extras\"\n\n    pk = sa.Column(sa.Integer, primary_key=True)\n    value = sa.Column(sa.JSONB)\n\n```\n\nAdd an object whenever you want of your guillotina content tree:\n\n```\nPOST /db/guillotina/\n{\n    \"@type\": \"DBFolder\",\n    \"id\", : \"dbmodel\",\n    \"model\": \"Model\"\n}\n```\n\nFrom here, we can just use the guillotina API with our new endpoint.\n\nPOST /db/guillotina/dbmodel/\n{\n\"value\": {\"prop\", \"value\"}\n}\n\nGET /db/guillotina/dbmodel/@search\nGET /db/guillotina/dbmodel/{pk}\nDELETE /db/guillotina/dbmodel/{pk}\nPATCH /db/guillotina/dbmodel/{pk}\n\nThought it should work registering services for instances...\n\nPOST /db/guillotina/dbmodel/{pk}/@requeue\n\n- Cool feature: It integrates with guillotina_react :)\n\n## IDEAS and TODOS\n\n- It's not hard to build a generic model explorer from here.\n  All registered models on sqlalchemy live on Base.metadata...\n  just build a small traversal around\n\n- Generate the expected schema for every new type,\n  perhaps on the /db/guillotina/dbmodel/@schema\n  taking it from declarative sqlalchemy models\n\n- Integrate the permission system on rows... Just implement an acl\n  jsonb column in your models. (Setting the ownership, or whatever you want..)\n\n- The event system is still not implemented, perhaps could be implemented\n  but with some new events. (If we do with the actuals we will mess with the\n  catalog)\n\n- Implement a rich @search model (on the end we can just translate,\n  the actual implementations to sqlalchemy querys). Also implement pagger,\n  and the rest. This will make this fit so well with guillotina_react.\n\n\n\n...\n\nYou are seeing a truncated changelog.\n\nYou can read the `changelog file <https://github.com/plone/guillotina/blob/master/CHANGELOG.rst>`_\nfor a complete list.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jordic/guillotina_asyncom",
    "keywords": "asyncio,REST,Framework,transactional,asgi,postgresql,sqlalchemy",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "guillotina-asyncom",
    "package_url": "https://pypi.org/project/guillotina-asyncom/",
    "platform": "",
    "project_url": "https://pypi.org/project/guillotina-asyncom/",
    "project_urls": {
      "Homepage": "https://github.com/jordic/guillotina_asyncom"
    },
    "release_url": "https://pypi.org/project/guillotina-asyncom/0a1/",
    "requires_dist": [
      "guillotina",
      "asyncom (>=0.3.1)",
      "pytest (>=3.8.0<=5.0.0) ; extra == 'test'",
      "docker ; extra == 'test'",
      "backoff ; extra == 'test'",
      "psycopg2-binary ; extra == 'test'",
      "pytest-asyncio (>=0.10.0) ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "coverage (>=4.0.3) ; extra == 'test'",
      "pytest-docker-fixtures ; extra == 'test'",
      "pytest-rerunfailures (<=7.0) ; extra == 'test'",
      "async-asgi-testclient (~=1.2.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.7.0",
    "summary": "Guillotina Postgresql integration",
    "version": "0a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6477336,
  "releases": {
    "0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6378b877f51166bfd923b312cc6c29bf85b4f4903d3c11463845986587bbdd45",
          "md5": "2c213229bc315f8e746f8f2073b57047",
          "sha256": "f600b9c08eadf7049958b6c65171adf2f6472fd7cb849a5923f5ea38e4be4c98"
        },
        "downloads": -1,
        "filename": "guillotina_asyncom-0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c213229bc315f8e746f8f2073b57047",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 12610,
        "upload_time": "2020-01-18T08:18:01",
        "upload_time_iso_8601": "2020-01-18T08:18:01.030670Z",
        "url": "https://files.pythonhosted.org/packages/63/78/b877f51166bfd923b312cc6c29bf85b4f4903d3c11463845986587bbdd45/guillotina_asyncom-0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ca0175196f9049ada62502b86b3529a75aa0387de4b46780a9c19f9728e08bd",
          "md5": "c0e422c3630da552da0e55cc3e584f3f",
          "sha256": "446bf075e6fbf74fa93fbaa0ede2fed41104f0f80cfbb41e810fc2f152f3dfff"
        },
        "downloads": -1,
        "filename": "guillotina_asyncom-0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "c0e422c3630da552da0e55cc3e584f3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 9592,
        "upload_time": "2020-01-18T08:18:04",
        "upload_time_iso_8601": "2020-01-18T08:18:04.201021Z",
        "url": "https://files.pythonhosted.org/packages/9c/a0/175196f9049ada62502b86b3529a75aa0387de4b46780a9c19f9728e08bd/guillotina_asyncom-0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6378b877f51166bfd923b312cc6c29bf85b4f4903d3c11463845986587bbdd45",
        "md5": "2c213229bc315f8e746f8f2073b57047",
        "sha256": "f600b9c08eadf7049958b6c65171adf2f6472fd7cb849a5923f5ea38e4be4c98"
      },
      "downloads": -1,
      "filename": "guillotina_asyncom-0a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2c213229bc315f8e746f8f2073b57047",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 12610,
      "upload_time": "2020-01-18T08:18:01",
      "upload_time_iso_8601": "2020-01-18T08:18:01.030670Z",
      "url": "https://files.pythonhosted.org/packages/63/78/b877f51166bfd923b312cc6c29bf85b4f4903d3c11463845986587bbdd45/guillotina_asyncom-0a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ca0175196f9049ada62502b86b3529a75aa0387de4b46780a9c19f9728e08bd",
        "md5": "c0e422c3630da552da0e55cc3e584f3f",
        "sha256": "446bf075e6fbf74fa93fbaa0ede2fed41104f0f80cfbb41e810fc2f152f3dfff"
      },
      "downloads": -1,
      "filename": "guillotina_asyncom-0a1.tar.gz",
      "has_sig": false,
      "md5_digest": "c0e422c3630da552da0e55cc3e584f3f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 9592,
      "upload_time": "2020-01-18T08:18:04",
      "upload_time_iso_8601": "2020-01-18T08:18:04.201021Z",
      "url": "https://files.pythonhosted.org/packages/9c/a0/175196f9049ada62502b86b3529a75aa0387de4b46780a9c19f9728e08bd/guillotina_asyncom-0a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}