{
  "info": {
    "author": "Jakiw Pidstrigach and Benjamin Boys",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "diffusionjax\n============\n[![CI](https://github.com/bb515/diffusionjax/actions/workflows/CI.yml/badge.svg)](https://github.com/bb515/diffusionjax/actions/workflows/CI.yml)\n[![Coverage Status](https://coveralls.io/repos/github/bb515/diffusionjax/badge.svg?branch=master)](https://coveralls.io/github/bb515/diffusionjax?branch=master)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\ndiffusionjax is a simple, accessible introduction to diffusion models, also known as score-based generative models (SGMs). It is implemented in Python via the autodiff framework, [JAX](https://github.com/google/jax). In particular, diffusionjax uses the [Flax](https://github.com/google/flax) library for the neural network approximator of the score.\n\nBased off the [Jupyter notebook](https://jakiw.com/sgm_intro) by Jakiw Pidstrigach, a tutorial on the theoretical and implementation aspects of diffusion models.\n\nThe development of diffusionjax has been supported by The Alan Turing Institute through the Theory and Methods Challenge Fortnights event \"Accelerating generative models and nonconvex optimisation\", which took place on 6-10 June 2022 and 5-9 Sep 2022 at The Alan Turing Institute headquarters.\n\nContents:\n\n- [Installation](#installation)\n- [Examples](#examples)\n    - [Introduction to diffusion models](#introduction-to-diffusion-models)\n- [Does haves](#does-haves)\n- [Doesn't haves](#doesn't-haves)\n- [References](#references)\n- [Acknowledgements](#acknowledgements)\n\n## Installation\nThe package requires Python 3.8+. `pip install diffusionjax` or for developers,\n- Clone the repository `git clone git@github.com:bb515/diffusionjax.git`\n- Install using pip `pip install -e .` from the root directory of the repository (see the `setup.py` for the requirements that this command installs).\n\n## Examples\n\n### Introduction to diffusion models\n- Run the example by typing `python examples/example.py` on the command line from the root directory of the repository.\n```python\n>>> num_epochs = 4000\n>>> rng = random.PRNGKey(2023)\n>>> rng, step_rng = random.split(rng, 2)\n>>> num_samples = 8\n>>> samples = sample_circle(num_samples)\n>>> N = samples.shape[1]\n>>> plot_samples(samples=samples, index=(0, 1), fname=\"samples\", lims=((-3, 3), (-3, 3)))\n```\n![Prediction](readme_samples.png)\n```python\n# Get sde model\n>>> sde = OU()\n>>>\n>>> def log_hat_pt(x, t):\n>>>     \"\"\"\n>>>     Empirical distribution score.\n>>>\n>>>     Args:\n>>>     x: One location in $\\mathbb{R}^2$\n>>>     t: time\n>>>     Returns:\n>>>     The empirical log density, as described in the Jupyter notebook\n>>>     .. math::\n>>>         \\hat{p}_{t}(x)\n>>>     \"\"\"\n>>>     mean, std = sde.marginal_prob(samples, t)\n>>>     potentials = jnp.sum(-(x - mean)**2 / (2 * std**2), axis=1)\n>>>     return logsumexp(potentials, axis=0, b=1/num_samples)\n>>>\n>>> # Get a jax grad function, which can be batched with vmap\n>>> nabla_log_hat_pt = jit(vmap(grad(log_hat_pt), in_axes=(0, 0), out_axes=(0)))\n>>>\n>>> # Running the reverse SDE with the empirical drift\n>>> plot_score(score=nabla_log_hat_pt, t=0.01, area_min=-3, area_max=3, fname=\"empirical score\")\n```\n![Prediction](readme_empirical_score.png)\n```python\n>>> sampler = get_sampler(EulerMaruyama(sde.reverse(nabla_log_hat_pt)))\n>>> q_samples = sampler(rng, n_samples=5000, shape=(N,))\n>>> plot_heatmap(samples=q_samples[:, [0, 1]], area_min=-3, area_max=3, fname=\"heatmap empirical score\")\n```\n![Prediction](readme_heatmap_empirical_score.png)\n```python\n>>> # What happens when I perturb the score with a constant?\n>>> perturbed_score = lambda x, t: nabla_log_hat_pt(x, t) + 1\n>>> rng, step_rng = random.split(rng)\n>>> sampler = get_sampler(EulerMaruyama(sde.reverse(perturbed_score)))\n>>> q_samples = sampler(rng, n_samples=5000, shape=(N,))\n>>> plot_heatmap(samples=q_samples[:, [0, 1]], area_min=-3, area_max=3, fname=\"heatmap bounded perturbation\")\n```\n![Prediction](readme_heatmap_bounded_perturbation.png)\n```python\n>>> # Neural network training via score matching\n>>> batch_size=16\n>>> score_model = MLP()\n>>> # Initialize parameters\n>>> params = score_model.init(step_rng, jnp.zeros((batch_size, N)), jnp.ones((batch_size,)))\n>>> # Initialize optimizer\n>>> opt_state = optimizer.init(params)\n>>> # Get loss function\n>>> solver = EulerMaruyama(sde)\n>>> loss = get_loss(\n>>>     sde, solver, score_model, score_scaling=True, likelihood_weighting=False)\n>>> # Train with score matching\n>>> score_model, params, opt_state, mean_losses = retrain_nn(\n>>>     update_step=update_step,\n>>>     num_epochs=num_epochs,\n>>>     step_rng=step_rng,\n>>>     samples=samples,\n>>>     score_model=score_model,\n>>>     params=params,\n>>>     opt_state=opt_state,\n>>>     loss=loss,\n>>>     batch_size=batch_size)\n>>> # Get trained score\n>>> trained_score = get_score(sde, score_model, params, score_scaling=True)\n>>> plot_score(score=trained_score, t=0.01, area_min=-3, area_max=3, fname=\"trained score\")\n```\n![Prediction](readme_trained_score.png)\n```python\n>>> solver = EulerMaruyama(sde.reverse(trained_score))\n>>> sampler = get_sampler(solver, stack_samples=False)\n>>> q_samples = sampler(rng, n_samples=1000, shape=(N,))\n>>> plot_heatmap(samples=q_samples[:, [0, 1]], area_min=-3, area_max=3, fname=\"heatmap trained score\")\n```\n![Prediction](readme_heatmap_trained_score.png)\n```python\n>>> inpainter = get_inpainter(solver, stack_samples=False)\n>>> data = jnp.array([-0.5, 0.0])\n>>> mask = jnp.array([1, 0])\n>>> data = jnp.tile(data, (64, 1))\n>>> mask = jnp.tile(mask, (64, 1))\n>>> q_samples = inpainter(rng, data, mask)\n>>> plot_heatmap(samples=q_samples[:, [0, 1]], area_min=-3, area_max=3, fname=\"heatmap inpainted\")\n```\n![Prediction](readme_heatmap_inpainted.png)\n\n## Does haves\n- Training scores on (possibly, image) data and sampling from the generative model. Also inverse problems, such as inpainting.\n- Not many lines of code.\n- Easy to use, extendable. Get started with the example, provided.\n\n## Doesn't haves\n- Geometry other than Euclidean space, such as Riemannian manifolds.\n- Diffusion in a latent space.\n- Augmented with critically-damped Langevin diffusion.\n\n## References\nAlgorithms in this package were ported from pre-existing code. In particular, the code was ported from the following papers and repositories:\n\nThe [official implementation](https://github.com/yang-song/score_sde) for the paper [Score-Based Generative Modeling through Stochastic Differential Equations](https://openreview.net/forum?id=PxTIG12RRHS) by [Yang Song](https://yang-song.github.io), [Jascha Sohl-Dickstein](http://www.sohldickstein.com/), [Diederik P. Kingma](http://dpkingma.com/), [Abhishek Kumar](http://users.umiacs.umd.edu/~abhishek/), [Stefano Ermon](https://cs.stanford.edu/~ermon/), and [Ben Poole](https://cs.stanford.edu/~poole/)\n\n## Acknowledgements\nThank you to [nPlan](https://www.nplan.io/), who are supporting this project.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bb515/diffusionjax",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "diffusionjax",
    "package_url": "https://pypi.org/project/diffusionjax/",
    "platform": null,
    "project_url": "https://pypi.org/project/diffusionjax/",
    "project_urls": {
      "Homepage": "https://github.com/bb515/diffusionjax"
    },
    "release_url": "https://pypi.org/project/diffusionjax/0.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "diffusionjax is a simple and accessible diffusion models package in JAX",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17371109,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fde46b6379461a851734d09c79f7310fbbbd2ab8f1b17aee51308d0df3fcc4ce",
          "md5": "dc75bb0d9738f3aaa41602bb33c15b76",
          "sha256": "ae9407583f51b9601e645c7aed128c99c57403eda3999d75a7a93b5db50af764"
        },
        "downloads": -1,
        "filename": "diffusionjax-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc75bb0d9738f3aaa41602bb33c15b76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 200717,
        "upload_time": "2023-01-24T08:53:22",
        "upload_time_iso_8601": "2023-01-24T08:53:22.127506Z",
        "url": "https://files.pythonhosted.org/packages/fd/e4/6b6379461a851734d09c79f7310fbbbd2ab8f1b17aee51308d0df3fcc4ce/diffusionjax-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9d272fd9dad028297fb5fcb6b26ebd95a8dde045a34c17982b69b1ecb83dd9a",
          "md5": "550419a77a3b4e41cc273d27d52417c5",
          "sha256": "8fa29a239126bef8d3c74f97e75db15f6839df7fe30544e6a538116e09e64d47"
        },
        "downloads": -1,
        "filename": "diffusionjax-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "550419a77a3b4e41cc273d27d52417c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 201475,
        "upload_time": "2023-01-24T09:15:35",
        "upload_time_iso_8601": "2023-01-24T09:15:35.523147Z",
        "url": "https://files.pythonhosted.org/packages/b9/d2/72fd9dad028297fb5fcb6b26ebd95a8dde045a34c17982b69b1ecb83dd9a/diffusionjax-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb2259eb8e06865b47be5a4aac6d243131537b69dd77a8c5658ffdb78dac3708",
          "md5": "53dc3ffc9b0e35681ad4188b9da6e54d",
          "sha256": "a67e27d39ac4be09f570b282e85deb4bfe79362e92279cb3e6ec4b94b6235d5c"
        },
        "downloads": -1,
        "filename": "diffusionjax-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "53dc3ffc9b0e35681ad4188b9da6e54d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 201716,
        "upload_time": "2023-02-24T15:31:37",
        "upload_time_iso_8601": "2023-02-24T15:31:37.776031Z",
        "url": "https://files.pythonhosted.org/packages/eb/22/59eb8e06865b47be5a4aac6d243131537b69dd77a8c5658ffdb78dac3708/diffusionjax-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b126d8de7d0631c90b84485232ab802a1dea22d873974e99a2ade4ab6d0c2735",
          "md5": "64c84567105060f5978ced4c385bf542",
          "sha256": "9d7c372ab34aad2f3acb8b7b1bb122a9361567d301cefa357143bfe514b61c37"
        },
        "downloads": -1,
        "filename": "diffusionjax-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "64c84567105060f5978ced4c385bf542",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 201458,
        "upload_time": "2023-01-24T09:30:54",
        "upload_time_iso_8601": "2023-01-24T09:30:54.694045Z",
        "url": "https://files.pythonhosted.org/packages/b1/26/d8de7d0631c90b84485232ab802a1dea22d873974e99a2ade4ab6d0c2735/diffusionjax-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c2b79f83c563b172beeebff80616eb247a3dacd5b858cc797177f58c9ccc6ce",
          "md5": "d5d4f6b74851c952557fb01b1e749b81",
          "sha256": "af1c2743bd4bc0ecdec069b79e937cfd8ef6cac87bf133d18c98900557531722"
        },
        "downloads": -1,
        "filename": "diffusionjax-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d5d4f6b74851c952557fb01b1e749b81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 209615,
        "upload_time": "2023-03-04T07:32:56",
        "upload_time_iso_8601": "2023-03-04T07:32:56.396045Z",
        "url": "https://files.pythonhosted.org/packages/1c/2b/79f83c563b172beeebff80616eb247a3dacd5b858cc797177f58c9ccc6ce/diffusionjax-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d2dec07fd0c15088ad15f592921053103806b2141e341581691fc1dc3779bf5",
          "md5": "7ff01c319afd4d15976b7a9aceab6d56",
          "sha256": "edc4bed519032435f0806dd45aecd8c8d3f66e9e97d5514ce17d84e1141f1623"
        },
        "downloads": -1,
        "filename": "diffusionjax-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7ff01c319afd4d15976b7a9aceab6d56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 209649,
        "upload_time": "2023-03-16T11:58:15",
        "upload_time_iso_8601": "2023-03-16T11:58:15.131876Z",
        "url": "https://files.pythonhosted.org/packages/5d/2d/ec07fd0c15088ad15f592921053103806b2141e341581691fc1dc3779bf5/diffusionjax-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36211643fe886832150ecf2b3454c2fd4863b80f5f2cd6ee13d360312bfc87b7",
          "md5": "d0ad3f5313799778149e1c60afcb7037",
          "sha256": "a36a899f6c8c10b71e6c1a540c85fb32b5382370ff333cbf1e1541801f6b8600"
        },
        "downloads": -1,
        "filename": "diffusionjax-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d0ad3f5313799778149e1c60afcb7037",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 213324,
        "upload_time": "2023-03-21T00:04:29",
        "upload_time_iso_8601": "2023-03-21T00:04:29.960276Z",
        "url": "https://files.pythonhosted.org/packages/36/21/1643fe886832150ecf2b3454c2fd4863b80f5f2cd6ee13d360312bfc87b7/diffusionjax-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36211643fe886832150ecf2b3454c2fd4863b80f5f2cd6ee13d360312bfc87b7",
        "md5": "d0ad3f5313799778149e1c60afcb7037",
        "sha256": "a36a899f6c8c10b71e6c1a540c85fb32b5382370ff333cbf1e1541801f6b8600"
      },
      "downloads": -1,
      "filename": "diffusionjax-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "d0ad3f5313799778149e1c60afcb7037",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 213324,
      "upload_time": "2023-03-21T00:04:29",
      "upload_time_iso_8601": "2023-03-21T00:04:29.960276Z",
      "url": "https://files.pythonhosted.org/packages/36/21/1643fe886832150ecf2b3454c2fd4863b80f5f2cd6ee13d360312bfc87b7/diffusionjax-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}