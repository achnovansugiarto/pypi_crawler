{
  "info": {
    "author": "Gian",
    "author_email": "30044863+gripep@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Django Rest Framework RFC7807 Exceptions\n\n## What is this?\n\nA library for [Django Rest Framework](https://www.django-rest-framework.org/) returning consistent and easy-to-parse error messages.\n\nThis library was built with [RFC7807](https://tools.ietf.org/html/rfc7807) guidelines in mind, but with a small twist: it defines a \"problem detail\" as a `list` but it still serves as a way to include errors in a predictable and easy-to-parse format for any API consumer.\n\nThis library was designed to be used by anyone, therefore all of the advanced RFC7807 \"problem detail\" components are optional.\nErrors, on the other hand, are always formatted with RFC7807 keywords and DRF exception data.\n\n**N.B.**\n\n**This is still in the works, and the ability to raise RFC7870-like errors will be added in the near future.**\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Exception Handler](#exception-handler)\n  - [Example JSON Error Responses](#example-json-error-responses)\n  - [Settings](#settings)\n    - [CAMELIZE](#camelize)\n    - [EXTRA_HANDLERS](#extra_handlers)\n    - [FIELDS_SEPARATOR](#fields_separator)\n- [Testing](#testing)\n- [Support](#support)\n- [Contributing](#contributing)\n\n## Installation\n\nInstall using the command line:\n\n```\npip install drf-rfc7807-exceptions\n```\n\n## Usage\n\n### Exception Handler\n\nAdd `EXCEPTION_HANDLER` in your `REST_FRAMEWORK` settings of your Django project settings file:\n\n```python\nREST_FRAMEWORK = {\n    # ...\n    \"EXCEPTION_HANDLER\": \"drf_rfc7807_exceptions.exception_handler\",\n}\n```\n\n### Example JSON Error Responses\n\n#### Field validation errors\n\n```json\n{\n    \"title\": \"Error message.\",\n    \"invalid_params\": [\n        {\n            \"name\": \"field_name\",\n            \"reason\": [\n                \"error\",\n                ...\n            ]\n        },\n        ...\n    ]\n}\n```\n\n#### Non-fields validation errors\n\n```json\n{\n  \"title\": \"Error message.\",\n  \"detail\": [\n    \"error\",\n    ...\n  ]\n}\n```\n\n#### Other bad requests with no detail\n\n```json\n{\n  \"title\": \"Error message.\"\n}\n```\n\n#### RFC7807 errors\n\n_Coming soon..._\n\n## Settings\n\nDefault available settings:\n\n```python\nDRF_RFC7807_EXCEPTIONS = {\n    \"CAMELIZE\": False,\n    \"EXTRA_HANDLERS\": [],\n    \"FIELDS_SEPARATOR\": \".\",\n}\n```\n\n- #### CAMELIZE\n\nCamel case support for Django Rest Framework exceptions JSON error responses.\n\nIf `CAMELIZE` is set to `True`:\n\n```json\n{\n  \"title\": \"Error message.\",\n  \"invalidParams\": [\n    {\n      \"name\": \"fieldName\",\n      \"reason\": [\n        \"error\",\n        ...\n      ]\n    }\n    ...\n  ]\n}\n```\n\n- #### EXTRA_HANDLERS\n\nSupport for exceptions that differ from the standard structure of the Django Rest Framework.\n\nFor instance, you may want to specify you own exception:\n\n```python\nclass AuthenticationFailed(exceptions.AuthenticationFailed):\n    def __init__(self, detail=None, code=None):\n        \"\"\"\n        Builds a detail dictionary for the error to give more information\n        to API users.\n        \"\"\"\n        detail_dict = {\"detail\": self.default_detail, \"code\": self.default_code}\n\n        if isinstance(detail, dict):\n            detail_dict.update(detail)\n        elif detail is not None:\n            detail_dict[\"detail\"] = detail\n\n        if code is not None:\n            detail_dict[\"code\"] = code\n\n        super().__init__(detail_dict)\n```\n\nUse exception in code:\n\n```python\ndef my_func():\n    raise AuthenticationFailed(\n        {\n            \"detail\": _(\"Error message.\"),\n            \"messages\": [\n                {\n                    \"metadata\": \"metadata_data\",\n                    \"type\": \"type_name\",\n                    \"message\": \"error message\",\n                }\n            ],\n        }\n    )\n```\n\nThis will result in:\n\n```python\nAuthenticationFailed(\n    {\n        \"detail\": \"Error message.\",\n        \"messages\": [\n            {\n                \"metadata\": \"metadata_data\",\n                \"type\": \"type_name\",\n                \"message\": \"error message\",\n            }\n        ],\n    }\n)\n```\n\nYou can handle this by creating a `handlers.py` file and specifying an handler for your use case:\n\n```python\ndef handle_exc_custom_authentication_failed(exc):\n    from path.to.my.exceptions import AuthenticationFailed\n\n    if isinstance(exc, AuthenticationFailed):\n        try:\n            exc.detail = exc.detail[\"messages\"][0][\"message\"]\n        except (KeyError, IndexError):\n            exc.detail = exc.detail[\"detail\"]\n\n    return exc\n```\n\nThen add it to the `EXTRA_HANDLERS` list in this package settings:\n\n```python\nDRF_RFC7807_EXCEPTIONS = {\n    \"EXTRA_HANDLERS\": [\n        \"path.to.my.handlers.handle_exc_custom_authentication_failed\",\n        # ...\n    ]\n}\n```\n\n- #### FIELDS_SEPARATOR\n\nSupport for nested dicts containing multiple fields to be flattened.\n\nIf `FIELDS_SEPARATOR` is set to `.`:\n\n```python\n{\n    \"field1\": {\n        \"field2\": \"value\"\n    }\n}\n```\n\nWill result in:\n\n```python\n{\n    \"field1.field2\": \"value\"\n}\n```\n\n## Testing\n\n### Using tox (recommended)\n\n```\ntox\n```\n\n### Using poetry\n\n##### Install dependencies:\n\n```\nmake install\n```\n\nor\n\n```\npoetry install -v\n```\n\n##### Run tests:\n\n```\nmake test\n```\n\nor\n\n```\npoetry run pytest test_project\n```\n\n## Support\n\nPlease [open an issue](https://github.com/gripep/drf-rfc7807-exceptions/issues/new).\n\n## Contributing\n\nPlease use the [Github Flow](https://guides.github.com/introduction/flow/). In a nutshell, create a branch, commit your code, and open a pull request.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gripep/drf-rfc7807-exceptions",
    "keywords": "python,django,django rest framework,drf,error handling,errors,exceptions",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-rfc7807-exceptions",
    "package_url": "https://pypi.org/project/drf-rfc7807-exceptions/",
    "platform": null,
    "project_url": "https://pypi.org/project/drf-rfc7807-exceptions/",
    "project_urls": {
      "Documentation": "https://github.com/gripep/drf-rfc7807-exceptions/blob/master/README.md",
      "Homepage": "https://github.com/gripep/drf-rfc7807-exceptions",
      "Repository": "https://github.com/gripep/drf-rfc7807-exceptions"
    },
    "release_url": "https://pypi.org/project/drf-rfc7807-exceptions/0.1.0/",
    "requires_dist": [
      "Django (>=2.2)",
      "djangorestframework (>=3.0)"
    ],
    "requires_python": ">=3.8.1,<4.0",
    "summary": "A library for Django Rest Framework returning consistent and easy-to-parse error messages inspired by RFC7807 guidelines.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17165247,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b385cd88e92c871b16789012c027f492242982c7f416d6c469ca34da8c516e05",
          "md5": "4bf5502f7c6ed199997bc9231dd3ff02",
          "sha256": "c9367cdb4aad31cee2d82dc7e84c09ff3ef1ca2aa3709f429426c9b710c3d238"
        },
        "downloads": -1,
        "filename": "drf_rfc7807_exceptions-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4bf5502f7c6ed199997bc9231dd3ff02",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1,<4.0",
        "size": 8873,
        "upload_time": "2023-03-05T16:36:32",
        "upload_time_iso_8601": "2023-03-05T16:36:32.857570Z",
        "url": "https://files.pythonhosted.org/packages/b3/85/cd88e92c871b16789012c027f492242982c7f416d6c469ca34da8c516e05/drf_rfc7807_exceptions-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9d9867df607ed433df39ed9620d978ba8c726a0a6675986186396531e9b8b46",
          "md5": "02715b8105d370c3a3cc64ad2701011b",
          "sha256": "f8a9ee07610019d556f36b08e504686bcc286737c66f419659e6aa8700116c9b"
        },
        "downloads": -1,
        "filename": "drf_rfc7807_exceptions-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "02715b8105d370c3a3cc64ad2701011b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1,<4.0",
        "size": 7846,
        "upload_time": "2023-03-05T16:36:34",
        "upload_time_iso_8601": "2023-03-05T16:36:34.420919Z",
        "url": "https://files.pythonhosted.org/packages/f9/d9/867df607ed433df39ed9620d978ba8c726a0a6675986186396531e9b8b46/drf_rfc7807_exceptions-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b385cd88e92c871b16789012c027f492242982c7f416d6c469ca34da8c516e05",
        "md5": "4bf5502f7c6ed199997bc9231dd3ff02",
        "sha256": "c9367cdb4aad31cee2d82dc7e84c09ff3ef1ca2aa3709f429426c9b710c3d238"
      },
      "downloads": -1,
      "filename": "drf_rfc7807_exceptions-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4bf5502f7c6ed199997bc9231dd3ff02",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.1,<4.0",
      "size": 8873,
      "upload_time": "2023-03-05T16:36:32",
      "upload_time_iso_8601": "2023-03-05T16:36:32.857570Z",
      "url": "https://files.pythonhosted.org/packages/b3/85/cd88e92c871b16789012c027f492242982c7f416d6c469ca34da8c516e05/drf_rfc7807_exceptions-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9d9867df607ed433df39ed9620d978ba8c726a0a6675986186396531e9b8b46",
        "md5": "02715b8105d370c3a3cc64ad2701011b",
        "sha256": "f8a9ee07610019d556f36b08e504686bcc286737c66f419659e6aa8700116c9b"
      },
      "downloads": -1,
      "filename": "drf_rfc7807_exceptions-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "02715b8105d370c3a3cc64ad2701011b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.1,<4.0",
      "size": 7846,
      "upload_time": "2023-03-05T16:36:34",
      "upload_time_iso_8601": "2023-03-05T16:36:34.420919Z",
      "url": "https://files.pythonhosted.org/packages/f9/d9/867df607ed433df39ed9620d978ba8c726a0a6675986186396531e9b8b46/drf_rfc7807_exceptions-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}