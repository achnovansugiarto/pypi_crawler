{
  "info": {
    "author": "Suvo Banik",
    "author_email": "Suvo Banik <sbanik2@uic.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n\n<a name=\"readme-top\"></a>\n\n\n![Release][release-shield]\n[![License][license-shield]][license-url]\n![Commit][commit-shield]\n![Size][size-shield]\n[![Doi][DOI-shield]][DOI-url]\n<!-- ![Downloads][download-shield] -->\n\n\n\n\n# CASTING \n\n<p align=\"justify\"> A Continuous Action Space Tree search for INverse desiGn (CASTING) Framework and Materials Discovery</p>\n\n\n## Table of Contents\n- [Introduction](#Introduction)\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Running the code](#running-the-code)\n- [Optimization of Gold nanocluster](#optimization-of-Gold-nanocluster)\n- [Carbon metastable polymorphs](#carbon-metastable-polymorphs)\n- [Citation](#citation)\n- [License](#license)\n\n\n\n\n\n## Introduction\n\nA pseudocode implementation of CASTING framework ([Paper](https://doi.org/10.48550/arXiv.2212.12106)) for optimization of atomic nanoclusters only. This code uses MCTS (Monte Carlo Tree Search) as base optimizer.<br/> \n<p align=\"justify\">&emsp;&emsp;&emsp;&emsp;Fast and accurate prediction of optimal crystal structure, topology, and microstructures is important for accelerating the design and discovery of new materials. Material properties are strongly correlated to the underlying structure and topology – inverse design is emerging as a powerful tool to discover new and increasingly complex materials that meet targeted functionalities. CASTING provides a unified framework for fast, scalable and accurate prediction & design of materials.</p>\n\n\n<p align=\"center\"> <a href=\"url\"><img src=\"https://github.com/sbanik2/CASTING/blob/main/figs/MCTS.png?raw=true\" align=\"center\" height=\"500\" width=\"600\" ></a> </p>\n\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Prerequisites\nThis package requires:\n- [scipy](https://scipy.org/)\n- [LAMMPS](https://www.lammps.org/)\n- [pymatgen](https://pymatgen.org/)\n- [pandas](https://pandas.pydata.org/)\n- [numpy](https://numpy.org/)\n- [networkx](https://networkx.org/)\n- [ase](https://wiki.fysik.dtu.dk/ase/#)\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Installation\n\n### Manual Installation\n[Install the anaconda package](https://docs.anaconda.com/anaconda/install/). Then, \n```\nconda env create --name CASTING\nconda activate CASTING\ngit clone https://github.com/sbanik2/CASTING.git\npip install -r requirements.txt\npython setup.py install\n```\n\n### Installation with pypi\n\n```\npip install CASTING\n\n```\n***The package requires python lammps binding to run. First, lammps package needs to be downloaded from [LAMMPS download](https://www.lammps.org/download.html) and compiled. The instructions on python integration can be found here [LAMMPS-Python](https://docs.lammps.org/Python_install.html).\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n### Running the code\n<p align=\"justify\"> First, all the parameters crystal (constrains), LAMMPS parameters (pair style, pair coefficient etc.) and the perturbation parameter need to be set.  The composition is given for e.g., a Au<2>Al<3> as \"composition\":{\"Au\":2,\"Al:3\"}. In a file (for e.g., RunOpt.py) we define, </p>\n\n\n``` python\nfrom CASTING.utilis import r_datafame,get_lattice\nfrom CASTING.MCTS import MCTS\nfrom CASTING.clusterfun import createRandomData\nfrom CASTING.lammpsEvaluate import LammpsEvaluator\nfrom CASTING.perturb import perturbate\n\n\n# In[6]:\n\nimport random\nimport numpy as np\n\nseed = 12\n\nrandom.seed(seed)\nnp.random.seed(seed)\n\n\n\n# In[9]:\n\n\nr_min = {\"Au-Au\":2}       # minimum allowed interatomic distance\nr_max = {\"Au-Au\":4}      # maximum allowed interatomic distance\nbox_dim = 50                  # box dimension \n\n#--------crystal constrains-----------\n\nconstrains = {\n    \"composition\":{\"Au\":1},\n    \"atoms\":13,\n    \"r_min\":r_datafame(r_min),\n    \"r_max\":r_datafame(r_max),\n    \"lattice\":get_lattice(box_dim),  \n    }\n\n\n\n\n#-------------perturbation------------\n\n\npt = {\n    'max_mutation': 0.05,  # mutation  in fraction of  box length\n}\n\n\n\n#-----------------lammps parameters-------------------\n\nlammps_par = {\n    'constrains':constrains,\n    'pair_style': \"pair_style eam\",\n    'pair_coeff': \"pair_coeff * * Au.eam\"   # Provide full path of potential file here\n}\n    \n```\n\nOnce the parameters are set, the evaluator (LAMMPS calculator) & the perturbator is to be initialized and a structure for root node is created.\n\n ``` python\n\nrootdata = createRandomData(constrains,multiplier= 10)\n\nperturb = perturbate(**pt). perturb\nevaluator = LammpsEvaluator(**lammps_par).evaluate \n\n```\n\nFinally, Call MCTS with all the hyperparameters added. Details of individual hyperparameters for the optimizer can be found here [Paper](https://doi.org/10.48550/arXiv.2212.12106).\n        \n ``` python\n        \nMCTS(\n    rootdata,\n    perturb ,\n    evaluator,\n    niterations=2000,\n    headexpand=10,\n    nexpand=3,\n    nsimulate=3,\n    nplayouts=10,\n    exploreconstant=1,\n    maxdepth=12,\n    a=0,\n    selected_node=0,\n)\n        \n```\n\nRun the code \n\n```\npython RunOpt.py \n```\n\nThe optimization produces a \"dumpfile.dat\" output containing all the crystal parameters and the energy values as the output. To extract the structures in either 'poscar' or 'cif' format, one can use the  'StructureWriter' module.\n\n ``` python\n \nfrom CASTING.writer import StructureWriter\n\nnum_to_write = 10 # number of stuctures to extract\nwriter = StructureWriter(\n                         \"dumpfile.dat\",\n                          outpath=\"structures\",\n                          objfile=\"energy.dat\",\n                          file_format=\"poscar\" # \"poscar\" or \"cif\"\n                          ) \nwriter.write( num_to_write, sort=True) # sort to arrange in increasing order of energy\n \n \n ```\nThis will extract 'num_to_write' number of structures in ascending order of objective. \n\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Optimization of Gold nanocluster\n\nAn example optimization of Gold (Au) nanocluster is given in \"example\" directory. We have used CASTING to optimize the already known global minima (Sutton-Chen) of 13 atom Au nanocluster (Icosahedral structure).  Details on additional examples can be found in [Paper](https://doi.org/10.48550/arXiv.2212.12106).\n\n<p align=\"center\"> <a href=\"url\"><img src=\"https://github.com/sbanik2/CASTING/blob/main/figs/sutton_chen.gif\" align=\"center\" height=\"200\" width=\"200\" ></a> </p>\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Carbon metastable polymorphs\n\nWe have also used CASTING to sample metastable polymorphs of Carbon(C). All the structures are then further relaxed with DFT. The unique polymorphs and their corresponding DFT energies have been provided in “C_polymorphs” directory.\n\n<p align=\"center\"> <a href=\"url\"><img src=\"https://github.com/sbanik2/CASTING/blob/main/figs/MetastableC.png\" align=\"center\" height=\"400\" width=\"500\" ></a> </p>\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>  \n\n## Citation\n```\n@article{banik2022continuous,\n  title={A Continuous Action Space Tree search for INverse desiGn (CASTING) Framework for Materials Discovery},\n  author={Banik, Suvo and Loefller, Troy and Manna, Sukriti and Srinivasan, Srilok and Darancet, Pierre and Chan, Henry and Hexemer, Alexander and Sankaranarayanan, Subramanian KRS},\n  journal={arXiv preprint arXiv:2212.12106},\n  year={2022}\n}\n```\n    \n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n        \n## License\nCASTING is distributed under MIT License. See `LICENSE` for details.\n    \n    \n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>  \n    \n<!--LINKS -->\n\n\n[release-shield]: https://img.shields.io/github/v/release/sbanik2/CASTING\n[license-shield]: https://img.shields.io/github/license/sbanik2/CASTING\n[license-url]: https://github.com/sbanik2/CASTING/blob/main/LICENSE\n[download-shield]: https://img.shields.io/github/downloads/sbanik2/CASTING/total\n[commit-shield]:https://img.shields.io/github/last-commit/sbanik2/CASTING\n[size-shield]: https://img.shields.io/github/languages/code-size/sbanik2/CASTING\n[DOI-shield]: https://img.shields.io/badge/DOI-doi.org/10.48550/arXiv.2212.12106-red\n[DOI-url]: https://doi.org/10.48550/arXiv.2212.12106\n    \n    \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sbanik2/CASTING",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CASTING",
    "package_url": "https://pypi.org/project/CASTING/",
    "platform": null,
    "project_url": "https://pypi.org/project/CASTING/",
    "project_urls": {
      "Homepage": "https://github.com/sbanik2/CASTING"
    },
    "release_url": "https://pypi.org/project/CASTING/0.1.1/",
    "requires_dist": [
      "ase (>=3.21.1)",
      "networkx (>=2.0)",
      "numpy (>=1.23.1)",
      "pandas (>=1.4.3)",
      "pymatgen (>=2022.7.25)",
      "scipy (>=1.8.0)",
      "tqdm (>=4.64.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "A continuous action space tree search for inverse design (CASTING)",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16467960,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efb737a8e4eb0738e563c2a35fe22ef6b55b3505a62db39ffba69374834caa34",
          "md5": "1153c4ce92a4ad977f1ac44bf5a948b9",
          "sha256": "2e1b51d6a3a8b4d0879666baea8e1f6ebc5c7318f41860c1a04d1fb4569804a4"
        },
        "downloads": -1,
        "filename": "CASTING-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1153c4ce92a4ad977f1ac44bf5a948b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18904,
        "upload_time": "2023-01-18T05:26:56",
        "upload_time_iso_8601": "2023-01-18T05:26:56.770568Z",
        "url": "https://files.pythonhosted.org/packages/ef/b7/37a8e4eb0738e563c2a35fe22ef6b55b3505a62db39ffba69374834caa34/CASTING-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54bc350a614b185fa7e93b3f3f6f8122a7ef6cb9d8e1659ac2e4d8adf20b25b7",
          "md5": "b8c1531673bc6c3c4c75b3f4ecd21ab0",
          "sha256": "ae305f72e124fc293fa72e658d4f81d0b206af8f96b71ed393402de3f572e012"
        },
        "downloads": -1,
        "filename": "CASTING-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b8c1531673bc6c3c4c75b3f4ecd21ab0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11112,
        "upload_time": "2023-01-18T05:26:59",
        "upload_time_iso_8601": "2023-01-18T05:26:59.098424Z",
        "url": "https://files.pythonhosted.org/packages/54/bc/350a614b185fa7e93b3f3f6f8122a7ef6cb9d8e1659ac2e4d8adf20b25b7/CASTING-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efb737a8e4eb0738e563c2a35fe22ef6b55b3505a62db39ffba69374834caa34",
        "md5": "1153c4ce92a4ad977f1ac44bf5a948b9",
        "sha256": "2e1b51d6a3a8b4d0879666baea8e1f6ebc5c7318f41860c1a04d1fb4569804a4"
      },
      "downloads": -1,
      "filename": "CASTING-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1153c4ce92a4ad977f1ac44bf5a948b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18904,
      "upload_time": "2023-01-18T05:26:56",
      "upload_time_iso_8601": "2023-01-18T05:26:56.770568Z",
      "url": "https://files.pythonhosted.org/packages/ef/b7/37a8e4eb0738e563c2a35fe22ef6b55b3505a62db39ffba69374834caa34/CASTING-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54bc350a614b185fa7e93b3f3f6f8122a7ef6cb9d8e1659ac2e4d8adf20b25b7",
        "md5": "b8c1531673bc6c3c4c75b3f4ecd21ab0",
        "sha256": "ae305f72e124fc293fa72e658d4f81d0b206af8f96b71ed393402de3f572e012"
      },
      "downloads": -1,
      "filename": "CASTING-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b8c1531673bc6c3c4c75b3f4ecd21ab0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11112,
      "upload_time": "2023-01-18T05:26:59",
      "upload_time_iso_8601": "2023-01-18T05:26:59.098424Z",
      "url": "https://files.pythonhosted.org/packages/54/bc/350a614b185fa7e93b3f3f6f8122a7ef6cb9d8e1659ac2e4d8adf20b25b7/CASTING-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}