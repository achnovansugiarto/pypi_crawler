{
  "info": {
    "author": "Shashank Kumbhare",
    "author_email": "shashankkumbhare8@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# Traffic Light Classification\n\n### A computer vision project to classify traffic light signals as either red, yellow or green.\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/ShashankKumbhare/traffic-light-classifier/main/auxil/images/all_lights.png\"  width=\"400\"></p>\n\n## Table of Contents\n\n- [**Project Overview**](#Project-Overview)\n- [**Data Description**](#Data-Description)\n- [**Methodology**](#Methodology)\n- [**Results**](#Results)\n- [**Python package `traffic_light_classifier`**](#python-package-traffic_light_classifier)\n- [**Package Usage**](#Package-Usage)\n\n---\n\n## Project Overview\n\n- Traffic light classification plays an important role in Advanced Driver Assist as well as self-driving vehicle systems which ensures timely and appropriate reaction to traffic lights in cross sections.  \n- In this project, a robust probabilistic approach based classifier has been implemented from scratch to classify traffic light signal's status using computer vision and machine learning techniques.\n- Several data cleaning steps, features extraction and a probabilistic metric has been utilized.\n- The classifier has been validated on a testing dataset with a **accuracy of 99.66 %**.\n- All training stages and prediction stages has been throughly visualized & analyzed and thus improvised.\n- The methodology utilized in this project can be generalized and applied to many other computer vision applications.\n- The project presentation notebook is [Notebook Traffic_Light_Classifier](https://github.com/ShashankKumbhare/traffic-light-classifier/blob/main/Traffic_Light_Classifier.ipynb).\n- The implemented Python package code is [traffic_light_classifier](https://github.com/ShashankKumbhare/traffic-light-classifier/tree/main/traffic_light_classifier).\n\n---\n\n## Data Description\n\nThis traffic light dataset consists of 1484 number of color images in 3 categories - red, yellow, and green. As with most human-sourced data, the data is not evenly distributed among the types. There are:\n\n- 904 red traffic light images\n- 536 green traffic light images\n- 44 yellow traffic light images\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/ShashankKumbhare/traffic-light-classifier/main/auxil/images/data_examples.png\"  width=\"600\"></p>\n\nNote: All images come from this [MIT self-driving car course](https://selfdrivingcars.mit.edu/) and are licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/).\n\n- Each image is a numpy array of shape (n_row, n_col, 3) i.e each image has a 3 channels (RGB - red, green, blue color space) where n_col and n_row is the height and the width of the image.\n- Each image gives information about its colors of the pixels and their location.\n- The RGB color space of the images can be converted to HSV color space channels (hue, saturation, value) i.e. the information about the hue, saturation and brightness of the pixels of the images.\n\n---\n\n## Methodology\n\n### Feature extraction from the dataset\nThe features are in the form of either rgb values or hsv values of the pixels of the image and their locations.\n- Some feature extracted:\n  - Average hsv image for red images, yellow images & green images.\n  - 1D range of high saturation along width and along height for each image.\n  - 1D range of high brightness along width and along height for each image..\n  - 2D Region of high saturation for each image.\n  - 2D Region of high brightness for each image.\n  - Location of light for each image.\n  - Extraction of average red light hues, average yellow light hues, average green light hues from each image.\n  - Average s (saturation) of light located.\n  - Average v (bright) of light located.\n  - etc.\n\n### The classifier's training stages:\n1. Get average image for red, yellow and green training images.\n2. Get region of high saturation in average red, yellow & green images to narrow down the search window for individual images to look for the red, yellow, and green lights.\n3. Crop all training images at their respective color's average image's high saturation region.\n4. Locate lights in all images by using high saturation and high brightness regions.\n5. Crop images at their respective light's position\n6. Get average image of red light, yellow light & average green light to see the distribution of hue, saturation and brightness in red lights, yeellow light, and green lights.\n7. Get distribtution of hues, saturations and brightnesses of red lights, average yellow lights & green lights.\n8. Optimize classifier's metric's parameters for red, yellow and green lights.\n9. Predict & get accuracy of training dataset for classifier's optimized parameters.\n\n### Probabilities calculations and prediction.\n\n#### <span style=\"color:skyblue\"> Hues extraction </span>\n\nFor a single image, the classifier extracts the following hues from the 3 regions:\n1. Model's red    hues from the light located in model's red    light region.\n2. Model's yellow hues from the light located in model's yellow light region.\n3. Model's green  hues from the light located in model's green  light region.\n\n#### <span style=\"color:red\"> Probabilistic model </span>\n\nThis classifier classifies an input image either red, yellow or green based on *probabilities*.\n\nFor a single input image, 3 lights will be located in the 3 regions (i.e. red, yellow and green light regions). Then the classifier calculates **3 probabilities**:\n1. Probability of image being red\n2. Probability of image being yellow\n3. Probability of image being green\n\nAnd propobilities are calculated by,\n- $Probability\\ of\\ image\\ being\\ red    = \\dfrac {strength_{red}}    {strength_{red} + strength_{yellow} + strength_{green}}$\n- $Probability\\ of\\ image\\ being\\ yellow = \\dfrac {strength_{yellow}} {strength_{red} + strength_{yellow} + strength_{green}}$\n- $Probability\\ of\\ image\\ being\\ green  = \\dfrac {strength_{green}}  {strength_{red} + strength_{yellow} + strength_{green}}$\n\n  where,  \n  - $strength_{red}    = \\mu_{saturation_{red}}^a    \\times \\mu_{brightness_{red}}^b$\n  - $strength_{yellow} = \\mu_{saturation_{yellow}}^a \\times \\mu_{brightness_{yellow}}^b$\n  - $strength_{green}  = \\mu_{saturation_{green}}^a  \\times \\mu_{brightness_{green}}^b$\n  \n  and,  \n    - $\\mu_{saturation_{red}}$   : mean saturation of the light located in model's red    light region\n    - $\\mu_{brightness_{red}}$   : mean brightness of the light located in model's red    light region\n    - $\\mu_{saturation_{yellow}}$: mean saturation of the light located in model's yellow light region\n    - $\\mu_{brightness_{yellow}}$: mean brightness of the light located in model's yellow light region\n    - $\\mu_{saturation_{green}}$ : mean saturation of the light located in model's green  light region\n    - $\\mu_{brightness_{green}}$ : mean brightness of the light located in model's green  light region\n    - $a$ & $b$     : model's parameters\n\nDetailed analysis and visualization of each stage has been given in [Notebook Traffic_Light_Classifier](https://github.com/ShashankKumbhare/traffic-light-classifier/blob/main/Traffic_Light_Classifier.ipynb).\n\n---\n\n## Results\n\n- A custom made Python package `traffic_light_classifier` has been implemented for this project.\n- All training stages and prediction stages has been throughly visualized & analyzed and thus improvised.\n- The classifier has been validated on a testing dataset with a accuracy of 99.66 %.\n- The project results and package usage have been clearly demonstrated in the [Notebook Traffic_Light_Classifier](https://github.com/ShashankKumbhare/traffic-light-classifier/blob/main/Traffic_Light_Classifier.ipynb).\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/ShashankKumbhare/traffic-light-classifier/main/auxil/images/analysis_ex.png\"  width=\"600\"></p>\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/ShashankKumbhare/traffic-light-classifier/main/auxil/images/predict_ex.png\"  width=\"400\"></p>\n\n---\n\n## Python package `traffic_light_classifier`\n\n- This project utilizes a custom-made package `traffic_light_classifier` which contains a classifier, plotting & feature extraction functionalities, and datasets for the project.\n- Libraries used: `OpenCV-Python`, `scipy`, `matplotlib`, `numpy`.\n- This library offers tools which enables to analyze and visualize the entire training and prediction process stages.\n\n---\n\n### Installation\n\n``` python \n# Install package from PyPI >>\n!pip install traffic_light_classifier\n# or\n# Install package from GitHub >>\n!pip install git+https://github.com/ShashankKumbhare/traffic-light-classifier.git#egg=traffic-light-classifier\n```\n\n---\n\n## Package Usage\n\n#### Import package `traffic_light_classifier`\n``` python \n# Import package `traffic_light_classifier` >>\nimport traffic_light_classifier as tlc\n```\n\n#### Create an instance of class Model\n``` python\n# Create an instance of class Model provided in the package\nmodel = tlc.Model()\n```\n\n#### Train model\n``` python\n# Call `compile` method of model object to train the model\n# Note: Use parameter `show_analysis = True` to see the detailed process of the training/compiling stages.\nmodel.compile()\nmodel.compile(show_analysis = True)\n```\n\n#### Predict image\n``` python\n# Get a random red image from the test dataset provided in the package\nimport random\nimage_red = random.choice( tlc.datasets.train.images_std.red )\ntlc.plots.plot_images(image_red)\n# Note: Use parameter `show_probabilities = True` to see the classification probabilities.\n#       Use parameter `show_analysis = True` to see the detailed process of the prediction stages.\nlabel_predicted = model.predict( image_red )\nlabel_predicted = model.predict( image_red, show_probabilities = True )\nlabel_predicted = model.predict( image_red, show_analysis = True )\n\n# For yellow and green test images\nimage_yellow = random.choice( tlc.datasets.train.images_std.yellow )\nimage_green  = random.choice( tlc.datasets.train.images_std.green )\nlabel_predicted = model.predict( image_yellow, show_analysis = True )\nlabel_predicted = model.predict( image_green,  show_analysis = True )\n```\n\n#### Predicting an entire dataset\n``` python \n# Use `predict_dataset()` method to predict an entire dataset >>\nimages_std = tlc.datasets.test.images_std.all\nlabels_std = tlc.datasets.test.labels_std    # optional\naccuracy   = model.predict_dataset(images_std, labels_std)\nprint(accuracy)\n```\n\n#### Analyzing & visualizing compilation/training process\nAn ardent user might want to see what is happening in the compiling/training process. He might also want to revisit or play with them.\n``` python \n# After compilation/training, all the compilation stages are stored in `model.compilation` attribute >>\n# To access them:\n\n# Compilation-Stage 1: Average image for red, yellow and green training images\nimage1 = model.compilation.stg1_image_avg.red\nimage2 = model.compilation.stg1_image_avg.yellow\nimage3 = model.compilation.stg1_image_avg.green\ntlc.plots.plot_images([image1, image2, image3])\ntlc.plots.plot_channels(image1, \"hsv\")\ntlc.plots.plot_channels(image2, \"hsv\")\ntlc.plots.plot_channels(image3, \"hsv\")\n\n# Compilation-Stage 2a: Region of high saturation in average red, yellow & green images\nprint(model.compilation.stg2a_region_high_s.red)\nprint(model.compilation.stg2a_region_high_s.yellow)\nprint(model.compilation.stg2a_region_high_s.green)\n\n# Compilation-Stage 2b: Masked average images at their respective high saturation region\nimage1 = model.compilation.stg2b_image_avg_masked_region_high_s.red\nimage2 = model.compilation.stg2b_image_avg_masked_region_high_s.yellow\nimage3 = model.compilation.stg2b_image_avg_masked_region_high_s.green\ntlc.plots.plot_images([image1, image2, image3])\ntlc.plots.plot_channels(image1, \"hsv\")\ntlc.plots.plot_channels(image2, \"hsv\")\ntlc.plots.plot_channels(image3, \"hsv\")\n\n# Compilation-Stage 3: Cropped average images at high saturation region\nimages1 = model.compilation.stg3_dataset_images_cropped_high_s_region.red[0:10]\nimages2 = model.compilation.stg3_dataset_images_cropped_high_s_region.yellow[0:10]\nimages3 = model.compilation.stg3_dataset_images_cropped_high_s_region.green[0:10]\ntlc.plots.plot_images(images1)\ntlc.plots.plot_images(images2)\ntlc.plots.plot_images(images3)\n\n# Compilation-Stage 4: Locations of lights in all training images\nprint(model.compilation.stg4_locations_light.red[0:5])\nprint(model.compilation.stg4_locations_light.yellow[0:5])\nprint(model.compilation.stg4_locations_light.green[0:5])\n\n# Compilation-Stage 5: Cropped images at their respective light's position\nimages1 = model.compilation.stg5_dataset_images_light.red[0:10]\nimages2 = model.compilation.stg5_dataset_images_light.yellow[0:10]\nimages3 = model.compilation.stg5_dataset_images_light.green[0:10]\ntlc.plots.plot_images(images1)\ntlc.plots.plot_images(images2)\ntlc.plots.plot_images(images3)\n\n# Compilation-Stage 6: Average image of red lights, yellow lights & green lights\nimage1 = model.compilation.stg6_image_light_avg.red\nimage2 = model.compilation.stg6_image_light_avg.yellow\nimage3 = model.compilation.stg6_image_light_avg.green\ntlc.plots.plot_images([image1, image2, image3])\ntlc.plots.plot_channels(image1, \"hsv\")\ntlc.plots.plot_channels(image2, \"hsv\")\ntlc.plots.plot_channels(image3, \"hsv\")\n\n# Compilation-Stage 7: Hues, saturations and brightnesses of average red light, average yellow light & average green light\nprint(model.compilation.stg7a_hue_avg_light.red.mu)\nprint(model.compilation.stg7a_hue_avg_light.red.sigma)\nprint(model.compilation.stg7a_hue_avg_light.red.dist)\n\nprint(model.compilation.stg7b_sat_avg_light.red.mu)\nprint(model.compilation.stg7b_sat_avg_light.red.sigma)\nprint(model.compilation.stg7b_sat_avg_light.red.dist)\n\nprint(model.compilation.stg7c_brt_avg_light.red.mu)\nprint(model.compilation.stg7c_brt_avg_light.red.sigma)\nprint(model.compilation.stg7c_brt_avg_light.red.dist)\n\n# Compilation-Stage 8: Optimized parameters  a & b for maximum accuracy\nprint(model.compilation.stg8_params_optimised)\n\n# Compilation-Stage 9: Prediction analysis & accuracy of training dataset for classifier's optimized parameters\nprint( dir(model.compilation.stg9a_dataset_train_analysis.green[0]) )\nprint( dir(model.compilation.stg9a_dataset_train_analysis.green[0]) )\nprint( dir(model.compilation.stg9b_misclassified.green[0]) )\nprint( f\"Accuracy red     = {model.compilation.stg9c_accuracy_train.red}\" )\nprint( f\"Accuracy yellow  = {model.compilation.stg9c_accuracy_train.yellow}\" )\nprint( f\"Accuracy green   = {model.compilation.stg9c_accuracy_train.yellow}\" )\nprint( f\"Accuracy overall = {model.compilation.stg9c_accuracy_train.all}\" )\n```\n\n#### Analyzing & visualizing prediction process\nAn ardent user might want to see what is happening behind the prediction process. Analyzing misclassified images might give user the understanding of the flaws of the classifier model and help improve the algorithm.\n``` python \nimport random\nimage_red = random.choice( tlc.datasets.train.images_std.red )\ntlc.plots.plot_images(image_red)\nlabel_predicted = model.predict( image_red )\n# After prediction, all the compilation stages are stored in `model.prediction` attribute >> \n# To access them:\n# Compilation-Stage 1: Croped image at model's optimal high saturation region for red, yellow, green light's position\nimage1 = model.prediction.stg1_image_high_s_region.red\nimage2 = model.prediction.stg1_image_high_s_region.yellow\nimage3 = model.prediction.stg1_image_high_s_region.green\ntlc.plots.plot_images([image1, image2, image3])\ntlc.plots.plot_channels(image1, \"hsv\")\ntlc.plots.plot_channels(image2, \"hsv\")\ntlc.plots.plot_channels(image3, \"hsv\")\n\n# Compilation-Stage 2: Located lights in model's optimal regions of red, yellow, green lights\nmodel.prediction.stg2_locations_light.red\nprint(model.prediction.stg2_locations_light.red)\nprint(model.prediction.stg2_locations_light.yellow)\nprint(model.prediction.stg2_locations_light.green)\n\n# Compilation-Stage 3: Cropped lights\nimage1 = model.prediction.stg3_image_light.red\nimage2 = model.prediction.stg3_image_light.yellow\nimage3 = model.prediction.stg3_image_light.green\ntlc.plots.plot_images([image1, image2, image3])\ntlc.plots.plot_channels(image1, \"hsv\")\ntlc.plots.plot_channels(image2, \"hsv\")\ntlc.plots.plot_channels(image3, \"hsv\")\n\n# Compilation-Stage 4: Extracted model's red, yellow, green light's colors from the respective cropped parts of the input image\nimage1 = model.prediction.stg4_image_colors_extracted.red\nimage2 = model.prediction.stg4_image_colors_extracted.yellow\nimage3 = model.prediction.stg4_image_colors_extracted.green\ntlc.plots.plot_channels(image1, \"hsv\")\ntlc.plots.plot_channels(image2, \"hsv\")\ntlc.plots.plot_channels(image3, \"hsv\")\n\n# Compilation-Stage 5: Distribution of hues extracted from the model's red, yellow & green light region\nprint(model.prediction.stg5a_hue_input_light.red.mu)\nprint(model.prediction.stg5a_hue_input_light.red.sigma)\nprint(model.prediction.stg5a_hue_input_light.red.dist)\n\nprint(model.prediction.stg5a_hue_input_light.yellow.mu)\nprint(model.prediction.stg5a_hue_input_light.yellow.sigma)\nprint(model.prediction.stg5a_hue_input_light.yellow.dist)\n\nprint(model.prediction.stg5a_hue_input_light.green.mu)\nprint(model.prediction.stg5a_hue_input_light.green.sigma)\nprint(model.prediction.stg5a_hue_input_light.green.dist)\n    # Similarly for saturation and brightness\n\n# Compilation-Stage 6: Probabilities of image being red, yellow and green\nprint( model.prediction.stg6_probabilities.image_being_red )\nprint( model.prediction.stg6_probabilities.image_being_yellow )\nprint( model.prediction.stg6_probabilities.image_being_green )\n\n# Compilation-Stage 7: Predicted label\nprint( model.prediction.stg7_label_predicted )\nprint( model.prediction.stg7_label_predicted_str )\n```\nThe package usage have been clearly demonstrated in the [Notebook Traffic_Light_Classifier](https://github.com/ShashankKumbhare/traffic-light-classifier/blob/main/Traffic_Light_Classifier.ipynb).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ShashankKumbhare/traffic-light-classifier",
    "keywords": "python,opencv,computer vision,ML,machine learning,traffic-light-classifier,self driving cars,AI,artificial intelligence",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "traffic-light-classifier",
    "package_url": "https://pypi.org/project/traffic-light-classifier/",
    "platform": null,
    "project_url": "https://pypi.org/project/traffic-light-classifier/",
    "project_urls": {
      "Homepage": "https://github.com/ShashankKumbhare/traffic-light-classifier"
    },
    "release_url": "https://pypi.org/project/traffic-light-classifier/1.0.2/",
    "requires_dist": [
      "opencv-python",
      "numpy",
      "matplotlib",
      "scipy",
      "IPython"
    ],
    "requires_python": "",
    "summary": "A computer vision & probabilistic approach based traffic light classifier.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15700724,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5f4be6888409ff33970f55ad28cb911bed26c4734ef3aca4bbeb2e91a049ee1",
          "md5": "163b6d0b8bd4738e72801bdf56dbcc99",
          "sha256": "c84bf2e3343ca00fd1fb15a6cdbd95314215c514777e90fa964eed81b450fb4b"
        },
        "downloads": -1,
        "filename": "traffic_light_classifier-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "163b6d0b8bd4738e72801bdf56dbcc99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4345558,
        "upload_time": "2022-11-08T15:47:41",
        "upload_time_iso_8601": "2022-11-08T15:47:41.415614Z",
        "url": "https://files.pythonhosted.org/packages/a5/f4/be6888409ff33970f55ad28cb911bed26c4734ef3aca4bbeb2e91a049ee1/traffic_light_classifier-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98ae338ec9200ca811c3a7e0338ccc8ad9e74102377cae44704d44c0ddb11b54",
          "md5": "1cdf9637ca8b4191b8637b15190f95c8",
          "sha256": "d243735240748728640b99d4b8d010d571b30f58a56588a2e1effe66d37974bc"
        },
        "downloads": -1,
        "filename": "traffic_light_classifier-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1cdf9637ca8b4191b8637b15190f95c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3336574,
        "upload_time": "2022-10-19T21:02:02",
        "upload_time_iso_8601": "2022-10-19T21:02:02.733548Z",
        "url": "https://files.pythonhosted.org/packages/98/ae/338ec9200ca811c3a7e0338ccc8ad9e74102377cae44704d44c0ddb11b54/traffic_light_classifier-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "faec59083b1c4e50a3602f08b1145652becd85cfac4476a57cf80296b205c220",
          "md5": "7cebaec95667148d0abba4274970782a",
          "sha256": "958d0d60c5d5369f005369f9d136c57544c99b115266fbde0a56b0128093eed1"
        },
        "downloads": -1,
        "filename": "traffic_light_classifier-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cebaec95667148d0abba4274970782a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4345557,
        "upload_time": "2022-11-08T15:50:02",
        "upload_time_iso_8601": "2022-11-08T15:50:02.792271Z",
        "url": "https://files.pythonhosted.org/packages/fa/ec/59083b1c4e50a3602f08b1145652becd85cfac4476a57cf80296b205c220/traffic_light_classifier-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f90757121785be13c3a6d92b325acc416056be78a14f4786c344a7208dc2ffc",
          "md5": "f6c3f0e4c379bb445fffd28bae406b5f",
          "sha256": "4df8fa27e97a1e1e39e1100f20eeebcfcfbbcaca16d8570f2a0ebda0102b2f58"
        },
        "downloads": -1,
        "filename": "traffic_light_classifier-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6c3f0e4c379bb445fffd28bae406b5f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3336752,
        "upload_time": "2022-11-08T15:50:06",
        "upload_time_iso_8601": "2022-11-08T15:50:06.688767Z",
        "url": "https://files.pythonhosted.org/packages/6f/90/757121785be13c3a6d92b325acc416056be78a14f4786c344a7208dc2ffc/traffic_light_classifier-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44c9721c5b4e701ec712fba366ec7d5151693d1758fe8b379dd71dcc5a6d29f4",
          "md5": "f084a93b3767a109c55a02c7b35586f2",
          "sha256": "28f1494d790e1b4d61ea85eb1b88e2a061586adcb4eebf47b9826b089471b80f"
        },
        "downloads": -1,
        "filename": "traffic_light_classifier-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f084a93b3767a109c55a02c7b35586f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4345603,
        "upload_time": "2022-11-08T16:21:21",
        "upload_time_iso_8601": "2022-11-08T16:21:21.264670Z",
        "url": "https://files.pythonhosted.org/packages/44/c9/721c5b4e701ec712fba366ec7d5151693d1758fe8b379dd71dcc5a6d29f4/traffic_light_classifier-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4980b5ca64cc2d24397222e0d8cd52343b5ae31f918722e50d38c65898963529",
          "md5": "1d7a31b64dbe1c84cfd98a197064a670",
          "sha256": "ae8ad6440638c02a1b0f7da2e7627f68012345eb9c280084a81cecfd5eac8450"
        },
        "downloads": -1,
        "filename": "traffic_light_classifier-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1d7a31b64dbe1c84cfd98a197064a670",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3336770,
        "upload_time": "2022-11-08T16:21:24",
        "upload_time_iso_8601": "2022-11-08T16:21:24.212697Z",
        "url": "https://files.pythonhosted.org/packages/49/80/b5ca64cc2d24397222e0d8cd52343b5ae31f918722e50d38c65898963529/traffic_light_classifier-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "44c9721c5b4e701ec712fba366ec7d5151693d1758fe8b379dd71dcc5a6d29f4",
        "md5": "f084a93b3767a109c55a02c7b35586f2",
        "sha256": "28f1494d790e1b4d61ea85eb1b88e2a061586adcb4eebf47b9826b089471b80f"
      },
      "downloads": -1,
      "filename": "traffic_light_classifier-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f084a93b3767a109c55a02c7b35586f2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4345603,
      "upload_time": "2022-11-08T16:21:21",
      "upload_time_iso_8601": "2022-11-08T16:21:21.264670Z",
      "url": "https://files.pythonhosted.org/packages/44/c9/721c5b4e701ec712fba366ec7d5151693d1758fe8b379dd71dcc5a6d29f4/traffic_light_classifier-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4980b5ca64cc2d24397222e0d8cd52343b5ae31f918722e50d38c65898963529",
        "md5": "1d7a31b64dbe1c84cfd98a197064a670",
        "sha256": "ae8ad6440638c02a1b0f7da2e7627f68012345eb9c280084a81cecfd5eac8450"
      },
      "downloads": -1,
      "filename": "traffic_light_classifier-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1d7a31b64dbe1c84cfd98a197064a670",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3336770,
      "upload_time": "2022-11-08T16:21:24",
      "upload_time_iso_8601": "2022-11-08T16:21:24.212697Z",
      "url": "https://files.pythonhosted.org/packages/49/80/b5ca64cc2d24397222e0d8cd52343b5ae31f918722e50d38c65898963529/traffic_light_classifier-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}