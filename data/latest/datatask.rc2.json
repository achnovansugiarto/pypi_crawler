{
  "info": {
    "author": "Andrei Lapets",
    "author_email": "a@lapets.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "========\ndatatask\n========\n\nGeneral-purpose data structure and representation format for tasks (stand-alone or part of a larger data workflow) that involve multiple data resources.\n\n|pypi| |readthedocs| |actions| |coveralls|\n\n.. |pypi| image:: https://badge.fury.io/py/datatask.svg\n   :target: https://badge.fury.io/py/datatask\n   :alt: PyPI version and link.\n\n.. |readthedocs| image:: https://readthedocs.org/projects/datatask/badge/?version=latest\n   :target: https://datatask.readthedocs.io/en/latest/?badge=latest\n   :alt: Read the Docs documentation status.\n\n.. |actions| image:: https://github.com/nthparty/datatask/workflows/lint-test-cover-docs/badge.svg\n   :target: https://github.com/nthparty/datatask/actions/workflows/lint-test-cover-docs.yml\n   :alt: GitHub Actions status.\n\n.. |coveralls| image:: https://coveralls.io/repos/github/nthparty/datatask/badge.svg?branch=main\n   :target: https://coveralls.io/github/nthparty/datatask?branch=main\n   :alt: Coveralls test coverage summary.\n\nPurpose\n-------\nThis library provides a data structure and format for representing individual tasks or steps (within a larger data workflow) that involve one or more resources containing tabular data. Data resource paths and URIs can be associated with more concise resource names (called *references*), and these references can then be used to specify task inputs and outputs (including their schemas). This library is *not* intended to act or to be used as a query language, though a collection of individual tasks may constitute (or may be included within) a larger query or data workflow graph.\n\nInstallation and Usage\n----------------------\nThis library is available as a `package on PyPI <https://pypi.org/project/datatask>`__::\n\n    python -m pip install datatask\n\nThe library can be imported in the usual ways::\n\n    import datatask\n    from datatask import *\n\nExamples\n^^^^^^^^\nThis library makes it possible to define the input and output data resources involved in a data task::\n\n    >>> from datatask import datatask\n    >>> dt = datatask({\"inputs\": [\"transactions.csv\"], \"outputs\": [\"report.csv\"]})\n\n.. |datatask| replace:: ``datatask``\n.. _datatask: https://datatask.readthedocs.io/en/0.3.0/_source/datatask.html#datatask.datatask.datatask\n\n.. |dict| replace:: ``dict``\n.. _dict: https://docs.python.org/3/library/stdtypes.html#dict\n\nThe |datatask|_ class is derived from |dict|_, making conversion to JSON straightforward (using either the built-in `json <https://docs.python.org/3/library/json.html>`__ library or the wrapper methods presented below)::\n\n    >>> dt.to_json()\n    '{\"inputs\": [\"transactions.csv\"], \"outputs\": [\"report.csv\"]}'\n    >>> datatask.from_json(\n    ...     '{\"inputs\": [\"transactions.csv\"], \"outputs\": [\"report.csv\"]}'\n    ... )\n    {'inputs': ['transactions.csv'], 'outputs': ['report.csv']}\n\nTypically, a data resource is a string consisting of a file path or a URI::\n\n    >>> dt = datatask({\n    ...    \"inputs\": [\n    ...        \"https://example.com/inventory.csv\",\n    ...        \"https://example.com/transactions.csv\"\n    ...    ],\n    ...    \"outputs\": [\n    ...        \"/home/user/report.csv\"\n    ...    ]\n    ... })\n\nIt is also possible to specify concise names, or **references**, for data resources. These references can then be used to specify input and output data resources::\n\n    >>> dt = datatask({\n    ...    \"resources\": {\n    ...        \"inv\": \"https://example.com/inventory.csv\",\n    ...        \"rep\": \"/home/user/report.csv\"\n    ...    },\n    ...    \"inputs\": [\"inv\"],\n    ...    \"outputs\": [\"rep\"]\n    ... })\n\nEach output data resource can be associated with its schema (which must be a list of dictionaries). In the example below, the task indicates that the output data resource's schema has two columns (the first and second columns found in the ``inv`` input data resource)::\n\n    >>> dt = datatask({\n    ...    \"resources\": {\n    ...        \"inv\": \"https://example.com/inventory.csv\",\n    ...        \"rep\": \"/home/user/report.csv\"\n    ...    },\n    ...    \"inputs\": [\"inv\"],\n    ...    \"outputs\": {\"rep\": [{\"inv\": 0}, {\"inv\": 1}]}\n    ... })\n\nIt is also possible to specify the schema (an ordered list of column names) of an input data resource, and then to reference individual columns in the input data resource using that schema::\n\n    >>> dt = datatask({\n    ...    \"resources\": {\n    ...        \"inv\": \"https://example.com/data.csv\",\n    ...        \"rep\": \"/home/user/report.csv\"\n    ...    },\n    ...    \"inputs\": {\"inv\": [\"item\", \"quantity\", \"price\"]},\n    ...    \"outputs\": {\"rep\": [{\"inv\": \"item\"}, {\"inv\": \"quantity\"}]}\n    ... })\n\nWithin both ``inputs`` and ``outputs`` entries, each reference can be associated with a **specification** rather than a schema. This specification can optionally contain the schema. The below instance is semantically equivalent to the example immediately above::\n\n    >>> dt = datatask({\n    ...    \"inputs\": {\n    ...        \"https://example.com/inventory.csv\": {\n    ...            \"schema\": [\"item\", \"quantity\", \"price\"]\n    ...        }\n    ...    },\n    ...    \"outputs\": {\n    ...        \"/home/user/report.csv\": {\n    ...            \"schema\": [\n    ...                {\"https://example.com/inventory.csv\": \"item\"},\n    ...                {\"https://example.com/inventory.csv\": \"quantity\"}\n    ...            ]\n    ...        }\n    ...    }\n    ... })\n\nA specification can also optionally contain a ``header`` attribute associated with a boolean value. This can be used to indicate whether a data resource has a header row. If a ``header`` attribute is not present, it is by default assumed that the data resource has no header row::\n\n    >>> dt = datatask({\n    ...    \"inputs\": {\n    ...        \"https://example.com/inventory.csv\": {\n    ...            \"schema\": [\"item\", \"quantity\", \"price\"],\n    ...            \"header\": True\n    ...        }\n    ...    },\n    ...    \"outputs\": {\n    ...        \"/home/user/report.csv\": {\n    ...            \"schema\": [\n    ...                {\"https://example.com/inventory.csv\": \"item\"},\n    ...                {\"https://example.com/inventory.csv\": \"quantity\"}\n    ...            ],\n    ...            \"header\": False\n    ...        }\n    ...    }\n    ... })\n\nRecommendations\n^^^^^^^^^^^^^^^\nThis subsection presents recommended patterns for a few common task types. These recommendations are not enforced by the library.\n\nEspecially in larger instances or in instances that may be automatically processed (*e.g.*, to perform expansion of references into their corresponding data resource paths or URIs), it may be useful to explicitly distinguish reference strings using a special character::\n\n    >>> dt = datatask({\n    ...    \"resources\": {\n    ...        \"@inv\": \"https://example.com/inventory.csv\",\n    ...        \"@rep\": \"/home/user/report.csv\"\n    ...    },\n    ...    \"inputs\": {\"@inv\": [\"item\", \"quantity\", \"price\"]},\n    ...    \"outputs\": {\"@rep\": [{\"@inv\": \"item\"}, {\"@inv\": \"quantity\"}]}\n    ... })\n\nTo specify the column names within an output schema, nested dictionaries of the form ``{\"column_name\": ... }`` can be used::\n\n    >>> dt = datatask({\n    ...    \"resources\": {\n    ...        \"@inv\": \"https://example.com/data.csv\",\n    ...        \"@rep\": \"/home/user/report.csv\"\n    ...    },\n    ...    \"inputs\": {\"@inv\": [\"item\", \"quantity\", \"price\"]},\n    ...    \"outputs\": {\n    ...        \"@rep\": {\n    ...            \"schema\": [\n    ...                {\"product\": {\"@inv\": \"item\"}},\n    ...                {\"remaining\": {\"@inv\": \"quantity\"}}\n    ...            ],\n    ...            \"header\": True\n    ...        }\n    ...    }\n    ... })\n\nTo indicate that the values of a particular column in an output schema are computed by applying an operator to one or more column values from an input data resource, nested dictionaries of the form ``{\"$operation_name\": ... }`` can be used::\n\n    >>> dt = datatask({\n    ...    \"resources\": {\n    ...        \"@inv\": \"https://example.com/data.csv\",\n    ...        \"@rep\": \"/home/user/report.csv\"\n    ...    },\n    ...    \"inputs\": {\"@inv\": [\"item\", \"quantity\", \"price\"]},\n    ...    \"outputs\": {\n    ...        \"@rep\": {\n    ...            \"schema\": [\n    ...                {\"item\": {\"@inv\": \"item\"}},\n    ...                {\"cost\": {\"$mul\": [{\"@inv\": \"quantity\"}, {\"@inv\": \"price\"}]}},\n    ...            ],\n    ...            \"header\": True\n    ...        }\n    ...    }\n    ... })\n\nDevelopment\n-----------\nAll installation and development dependencies are fully specified in ``pyproject.toml``. The ``project.optional-dependencies`` object is used to `specify optional requirements <https://peps.python.org/pep-0621>`__ for various development tasks. This makes it possible to specify additional options (such as ``docs``, ``lint``, and so on) when performing installation using `pip <https://pypi.org/project/pip>`__::\n\n    python -m pip install .[docs,lint]\n\nDocumentation\n^^^^^^^^^^^^^\nThe documentation can be generated automatically from the source files using `Sphinx <https://www.sphinx-doc.org>`__::\n\n    python -m pip install .[docs]\n    cd docs\n    sphinx-apidoc -f -E --templatedir=_templates -o _source .. && make html\n\nTesting and Conventions\n^^^^^^^^^^^^^^^^^^^^^^^\nAll unit tests are executed and their coverage is measured when using `pytest <https://docs.pytest.org>`__ (see the ``pyproject.toml`` file for configuration details)::\n\n    python -m pip install .[test]\n    python -m pytest\n\nAlternatively, all unit tests are included in the module itself and can be executed using `doctest <https://docs.python.org/3/library/doctest.html>`__::\n\n    python src/datatask/datatask.py -v\n\nStyle conventions are enforced using `Pylint <https://pylint.pycqa.org>`__::\n\n    python -m pip install .[lint]\n    python -m pylint src/datatask\n\nContributions\n^^^^^^^^^^^^^\nIn order to contribute to the source code, open an issue or submit a pull request on the `GitHub page <https://github.com/nthparty/datatask>`__ for this library.\n\nVersioning\n^^^^^^^^^^\nThe version number format for this library and the changes to the library associated with version number increments conform with `Semantic Versioning 2.0.0 <https://semver.org/#semantic-versioning-200>`__.\n\nPublishing\n^^^^^^^^^^\nThis library can be published as a `package on PyPI <https://pypi.org/project/datatask>`__ by a package maintainer. First, install the dependencies required for packaging and publishing::\n\n    python -m pip install .[publish]\n\nEnsure that the correct version number appears in ``pyproject.toml``, and that any links in this README document to the Read the Docs documentation of this package (or its dependencies) have appropriate version numbers. Also ensure that the Read the Docs project for this library has an `automation rule <https://docs.readthedocs.io/en/stable/automation-rules.html>`__ that activates and sets as the default all tagged versions. Create and push a tag for this version (replacing ``?.?.?`` with the version number)::\n\n    git tag ?.?.?\n    git push origin ?.?.?\n\nRemove any old build/distribution files. Then, package the source into a distribution archive::\n\n    rm -rf build dist src/*.egg-info\n    python -m build --sdist --wheel .\n\nFinally, upload the package distribution archive to `PyPI <https://pypi.org>`__::\n\n    python -m twine upload dist/*\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "datatask",
    "package_url": "https://pypi.org/project/datatask/",
    "platform": null,
    "project_url": "https://pypi.org/project/datatask/",
    "project_urls": {
      "Documentation": "https://datatask.readthedocs.io",
      "Repository": "https://github.com/nthparty/datatask"
    },
    "release_url": "https://pypi.org/project/datatask/0.3.0/",
    "requires_dist": [
      "coveralls (~=3.3.1) ; extra == 'coveralls'",
      "toml (~=0.10.2) ; extra == 'docs'",
      "sphinx (~=4.2.0) ; extra == 'docs'",
      "sphinx-rtd-theme (~=1.0.0) ; extra == 'docs'",
      "pylint (~=2.14.0) ; extra == 'lint'",
      "build (~=0.8) ; extra == 'publish'",
      "twine (~=4.0) ; extra == 'publish'",
      "pytest (~=7.0) ; extra == 'test'",
      "pytest-cov (~=3.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "General-purpose data structure and representation format for tasks (stand-alone or part of a larger data workflow) that involve multiple data resources.",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14684867,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1fd3122674bddbd3ec38958ef275d97df2bba56df298398df720c2670f91071",
          "md5": "829a2980b3c140406e5d3e596bc48d06",
          "sha256": "9a51293202e3ad4a6461a09fc78a6a1c98e81f4a4a75307a8b1f2b731d88a725"
        },
        "downloads": -1,
        "filename": "datatask-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "829a2980b3c140406e5d3e596bc48d06",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8084,
        "upload_time": "2022-03-26T06:17:11",
        "upload_time_iso_8601": "2022-03-26T06:17:11.289764Z",
        "url": "https://files.pythonhosted.org/packages/b1/fd/3122674bddbd3ec38958ef275d97df2bba56df298398df720c2670f91071/datatask-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "915a1802c5e0c43fc6a31d7ef3ff1696f72867ce50985e0eade3b66d0a2c1f3a",
          "md5": "e9646cd5f9cc813adb0522932ccf49ee",
          "sha256": "c45bba9a743d384c01e60acafeafe023ecf8d60eb041c0cc9c8981bae802e8e9"
        },
        "downloads": -1,
        "filename": "datatask-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e9646cd5f9cc813adb0522932ccf49ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10204,
        "upload_time": "2022-03-26T06:17:13",
        "upload_time_iso_8601": "2022-03-26T06:17:13.536069Z",
        "url": "https://files.pythonhosted.org/packages/91/5a/1802c5e0c43fc6a31d7ef3ff1696f72867ce50985e0eade3b66d0a2c1f3a/datatask-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ded8fc342e1ca2a199f3ed1974a3c04a1f93b8ae003a71ef0d02a7429c0f414",
          "md5": "5da1c8be7bdcbedda1cc5784b98cfe83",
          "sha256": "da3fbb36ea0f58bc79cc2580e8f7e6ecda66ad059397026eafa73000f8d559ce"
        },
        "downloads": -1,
        "filename": "datatask-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5da1c8be7bdcbedda1cc5784b98cfe83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8693,
        "upload_time": "2022-08-08T05:36:57",
        "upload_time_iso_8601": "2022-08-08T05:36:57.658303Z",
        "url": "https://files.pythonhosted.org/packages/5d/ed/8fc342e1ca2a199f3ed1974a3c04a1f93b8ae003a71ef0d02a7429c0f414/datatask-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa544f4b12598a3a1e9cfe91887e55f7816756135ff80664de704ddc1a8b9e35",
          "md5": "ec0ff6968649a4df1930e867003ef17c",
          "sha256": "66af1b069f7611754a9d267c3abf73ef794258b2241ba4fea4436615efeb9e8e"
        },
        "downloads": -1,
        "filename": "datatask-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ec0ff6968649a4df1930e867003ef17c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11484,
        "upload_time": "2022-08-08T05:36:58",
        "upload_time_iso_8601": "2022-08-08T05:36:58.983641Z",
        "url": "https://files.pythonhosted.org/packages/fa/54/4f4b12598a3a1e9cfe91887e55f7816756135ff80664de704ddc1a8b9e35/datatask-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ded8fc342e1ca2a199f3ed1974a3c04a1f93b8ae003a71ef0d02a7429c0f414",
        "md5": "5da1c8be7bdcbedda1cc5784b98cfe83",
        "sha256": "da3fbb36ea0f58bc79cc2580e8f7e6ecda66ad059397026eafa73000f8d559ce"
      },
      "downloads": -1,
      "filename": "datatask-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5da1c8be7bdcbedda1cc5784b98cfe83",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8693,
      "upload_time": "2022-08-08T05:36:57",
      "upload_time_iso_8601": "2022-08-08T05:36:57.658303Z",
      "url": "https://files.pythonhosted.org/packages/5d/ed/8fc342e1ca2a199f3ed1974a3c04a1f93b8ae003a71ef0d02a7429c0f414/datatask-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa544f4b12598a3a1e9cfe91887e55f7816756135ff80664de704ddc1a8b9e35",
        "md5": "ec0ff6968649a4df1930e867003ef17c",
        "sha256": "66af1b069f7611754a9d267c3abf73ef794258b2241ba4fea4436615efeb9e8e"
      },
      "downloads": -1,
      "filename": "datatask-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ec0ff6968649a4df1930e867003ef17c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11484,
      "upload_time": "2022-08-08T05:36:58",
      "upload_time_iso_8601": "2022-08-08T05:36:58.983641Z",
      "url": "https://files.pythonhosted.org/packages/fa/54/4f4b12598a3a1e9cfe91887e55f7816756135ff80664de704ddc1a8b9e35/datatask-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}