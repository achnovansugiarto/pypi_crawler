{
  "info": {
    "author": "Soledad Villar",
    "author_email": "soledad.villar@nyu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# scGeneFit\n\nPython code for genetic marker selection using linear programming.\n\nThe algorithm is described in https://www.biorxiv.org/content/10.1101/599654v1\n\nDependencies: numpy, matplotlib, scipy, sklearn. \n\nExamples and source code: https://github.com/solevillar/scGeneFit-python \n\nThe package main function is scGeneFit.functions.get_markers() \n\nget_markers(data, labels, num_markers, method='centers', epsilon=1, sampling_rate=1, n_neighbors=3, max_constraints=1000, redundancy=0.01, verbose=True)\n\n\n- data: Nxd numpy array with point coordinates, N: number of points, d: dimension\n- labels: list with labels (N labels, one per point)\n- num_markers: target number of markers to select (num_markers<d)\n- method: 'centers', 'pairwise', or 'pairwise_centers'\n    - 'centers' considers constraints that require that two consecutive classes have their empirical centers separated after projection to the selected markers. According to our numerical experiments is the least general but most efficient and stable set of constraints.\n    - 'pairwise' considers constraints that require that points from different classes are separated by a minimal distance after projection to the selected markers. Since all pairwise constraints would typically make the problem computationally too expensive, the constraints are sampled (sampling_rate) and capped (n_neighbors, max_constraints). \n    - 'pairwise_centers' after projection to the selected markers every point is required to lie closest to its empirical center than every other class center (sampling and capping also apply here).  \n- epsilon: constraints will be of the form expr>Delta, where Delta is chosen to be epsilon times the norm of the smallest constraint (default 1)\n**This is the most important parameter in this problem, it determines the scale of the constraints, the rest the rest of the parameters only determine the size of the LP to adapt to limited computational resources. We include a function that finds the optimal value of epsilon given a classifier and a training/test set. We provide an example of the optimization in scGeneFit_functional_groups.ipynb**\n- sampling_rate: (if method=='pairwise' or 'pairwise_centers') selects constraints from a random sample of proportion sampling_rate (default 1)\n- n_neighbors: (if method=='pairwise') chooses the constraints from n_neighbors nearest neighbors (default 3)\n- max_constraints: maximum number of constraints to consider (default 1000)\n- redundancy: (if method=='centers') in this case not all pairwise constraints are considered but just between centers of consecutive labels plus a random fraction of constraints given by redundancy. If redundancy==1 all constraints between pairs of centers are considered\n- verbose: whether it prints information like size of the LP or elapsed time (default True)\n\n\n\n```python\nfrom scGeneFit.functions import *\n\n%matplotlib inline\nimport numpy as np\nnp.random.seed(0) \n```\n\n\n```python\n\n```\n\n#### Auxiliary functions\n\n\n```python\nfrom sklearn.neighbors import NearestCentroid\nclf=NearestCentroid()\n\ndef performance(X_train, y_train, X_test, y_test, clf):\n    clf.fit(X_train, y_train)\n    return clf.score(X_test, y_test)\n```\n\n# CITEseq example\n\nData included in package, from \n\n[1] Marlon Stoeckius, Christoph Hafemeister, William Stephenson, Brian Houck-Loomis, Pratip K Chattopadhyay, Harold Swerdlow, Rahul Satija, and Peter Smibert. \nSimultaneous epitope and transcriptome measurement insingle cells. Nature Methods, 14(9):865, 2017.\n\n\n```python\n#load data from files\n[data, labels, names]= load_example_data(\"CITEseq\")\nN,d=data.shape\n```\n\n## Use of scGeneFit (center based constraints)\n\n\n```python\nnum_markers=25\nmethod='centers'\nredundancy=0.25\n\nmarkers= get_markers(data, labels, num_markers, method=method, redundancy=redundancy)\n\naccuracy=performance(data, labels, data, labels, clf)\naccuracy_markers=performance(data[:,markers], labels, data[:,markers], labels, clf)\n\nprint(\"Accuracy (whole data,\", d, \" markers): \", accuracy)\nprint(\"Accuracy (selected\", num_markers, \"markers)\", accuracy_markers)\n```\n\n    Solving a linear program with 500 variables and 45 constraints\n    Time elapsed: 0.3295409679412842 seconds\n    Accuracy (whole data, 500  markers):  0.8660786816757572\n    Accuracy (selected 25 markers) 0.7863525588952072\n\n\n\n```python\n#TSNE plot\na=plot_marker_selection(data, markers, names)\n```\n\n    Computing TSNE embedding\n    Elapsed time: 117.06255102157593 seconds\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_11_1.png)\n\n\n## Use of scGeneFit (pairwise distance constraints)\n\n\n```python\nnum_markers=25\nmethod='pairwise'\nsampling_rate=0.1 #use 10 percent of the data to generate constraints\nn_neighbors=3 #3 constraints per point\nepsilon=1 #Delta is 10*norm of the smallest constraint\nmax_constraints=1000 #use at most 1000 constraints (for efficiency)\n\nmarkers= get_markers(data, labels, num_markers, method=method, sampling_rate=sampling_rate,\n                     n_neighbors=n_neighbors, epsilon=epsilon, max_constraints=max_constraints)\n\naccuracy=performance(data, labels, data, labels, clf)\naccuracy_markers=performance(data[:,markers], labels, data[:,markers], labels, clf)\n\nprint(\"Accuracy (whole data,\", d, \" markers): \", accuracy)\nprint(\"Accuracy (selected\", num_markers, \"markers)\", accuracy_markers)\n```\n\n    Solving a linear program with 500 variables and 1000 constraints\n    Time elapsed: 6.737841844558716 seconds\n    Accuracy (whole data, 500  markers):  0.8660786816757572\n    Accuracy (selected 25 markers) 0.7710340025530927\n\n\n\n```python\n#TSNE plot\na=plot_marker_selection(data, markers, names)\n```\n\n    Computing TSNE embedding\n    Elapsed time: 118.96086025238037 seconds\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_14_1.png)\n\n\n## Use of scGeneFit (pairwise center based constraints)\n\n\n```python\nnum_markers=25\nmethod='pairwise_centers'\nsampling_rate=0.1 #use 10 percent of the data to generate constraints\nn_neighbors=0 #neighbors are not used for the center constraints \nepsilon=10 #Delta is 10*norm of the smallest constraint\nmax_constraints=1000 #use at most 5000 constraints (for efficiency)\n\nmarkers= get_markers(data, labels, num_markers, method=method, \n                     sampling_rate=sampling_rate, n_neighbors=n_neighbors, epsilon=epsilon, \n                     max_constraints=max_constraints)\n\naccuracy=performance(data, labels, data, labels, clf)\naccuracy_markers=performance(data[:,markers], labels, data[:,markers], labels, clf)\n\nprint(\"Accuracy (whole data,\", d, \" markers): \", accuracy)\nprint(\"Accuracy (selected\", num_markers, \"markers)\", accuracy_markers)\n```\n\n    Solving a linear program with 500 variables and 1000 constraints\n    Time elapsed: 4.070271015167236 seconds\n    Accuracy (whole data, 500  markers):  0.8660786816757572\n    Accuracy (selected 25 markers) 0.7864686085644655\n\n\n\n```python\n#TSNE plot\na=plot_marker_selection(data, markers, names)\n```\n\n    Computing TSNE embedding\n    Elapsed time: 118.61988186836243 seconds\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_17_1.png)\n\n\n## One vs all markers\n\n\n```python\nmarkers2=one_vs_all_selection(data,labels)\n\naccuracy=performance(data, labels, data, labels, clf)\naccuracy_markers=performance(data[:,markers2], labels, data[:,markers2], labels, clf)\n\nprint(\"Accuracy (whole data,\", d, \" markers): \", accuracy)\nprint(\"Accuracy (selected\", num_markers, \"markers)\", accuracy_markers)\n```\n\n    Accuracy (whole data, 500  markers):  0.8660786816757572\n    Accuracy (selected 25 markers) 0.7537426018335848\n\n\n\n```python\na=plot_marker_selection(data, markers2, names)\n```\n\n    Computing TSNE embedding\n    Elapsed time: 115.60354685783386 seconds\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_20_1.png)\n\n\n# Zeisel example\nZeisel data included in package, from\n\n[2] Amit Zeisel, Ana B Munoz-Manchado, Simone Codeluppi, Peter Lonnerberg, Gioele La Manno, Anna Jureus, Sueli Marques, Hermany Munguba, Liqun He, Christer Betsholtz, et al. \nCell types in the mouse cortex and hippocampus revealed by single-cell RNA-seq. Science, 347(6226):1138â€“1142, 2015.\n\nThis example exhibits a hierarchical clustering structure. We use the function get_markers_hierarchy that takes the hierarchical structure into consideration to select the constraints.\n\n\n\n```python\n#load data from file\n[data, labels, names]=load_example_data(\"zeisel\")\nN,d=data.shape\n```\n\n## Use of scGeneFit (center based constraints)\n\n\n```python\nnum_markers=25\nmethod='centers'\nredundancy=0.1\n\nmarkers= get_markers_hierarchy(data, labels, num_markers, method=method, redundancy=redundancy)\n\naccuracy=performance(data, labels[0], data, labels[0], clf)\naccuracy_markers=performance(data[:,markers], labels[0], data[:,markers], labels[0], clf)\n\nprint(\"Accuracy (whole data,\", d, \" markers): \", accuracy)\nprint(\"Accuracy (selected\", num_markers, \"markers)\", accuracy_markers)\n\n```\n\n    Solving a linear program with 4000 variables and 96 constraints\n    Time elapsed: 67.69524931907654 seconds\n    Accuracy (whole data, 4000  markers):  0.8745424292845257\n    Accuracy (selected 25 markers) 0.8861896838602329\n\n\n\n```python\n#TSNE plot\na=plot_marker_selection(data, markers, names[0])\n```\n\n    Computing TSNE embedding\n    Elapsed time: 71.29064297676086 seconds\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_25_1.png)\n\n\n## Use of scGeneFit (pairwise distance constraints)\n\n\n```python\nnum_markers=25\nmethod='pairwise'\nsampling_rate=0.05 #use 5 percent of the data to generate constraints\nn_neighbors=3 #3 constraints per point\nepsilon=10 #Delta is 10*norm of the smallest constraint\nmax_constraints=500 #use at most 500 constraints (for efficiency)\nuse_centers=False #constraints given by pairwise distances\n\nmarkers= get_markers_hierarchy(data, labels, num_markers, method=method, \n                     sampling_rate=sampling_rate, n_neighbors=n_neighbors, epsilon=epsilon)\n\naccuracy=performance(data, labels[0], data, labels[0], clf)\naccuracy_markers=performance(data[:,markers], labels[0], data[:,markers], labels[0], clf)\n\nprint(\"Accuracy (whole data,\", d, \" markers): \", accuracy)\nprint(\"Accuracy (selected\", num_markers, \"markers)\", accuracy_markers)\n\n```\n\n    Solving a linear program with 4000 variables and 1000 constraints\n    Time elapsed: 40.95984506607056 seconds\n    Accuracy (whole data, 4000  markers):  0.8745424292845257\n    Accuracy (selected 25 markers) 0.8435940099833611\n\n\n\n```python\n\n```\n\n## Use of scGeneFit (pairwise center based constraints)\n\n\n```python\nnum_markers=25\nmethod='pairwise_centers'\nsampling_rate=0.05 #use 5 percent of the data to generate constraints\nn_neighbors=0 #neighbors are not used for the center constraints\nepsilon=10 #Delta is 10*norm of the smallest constraint\nmax_constraints=500 #use at most 500 constraints (for efficiency)\nuse_centers=True #constraints given by pairwise distances\n\nmarkers = get_markers_hierarchy(data, labels, num_markers, method=method, \n                     sampling_rate=sampling_rate, n_neighbors=n_neighbors, epsilon=epsilon)\n\naccuracy=performance(data, labels[0], data, labels[0], clf)\naccuracy_markers=performance(data[:,markers], labels[0], data[:,markers], labels[0], clf)\n\nprint(\"Accuracy (whole data,\", d, \" markers): \", accuracy)\nprint(\"Accuracy (selected\", num_markers, \"markers)\", accuracy_markers)\n```\n\n    Solving a linear program with 4000 variables and 1000 constraints\n    Time elapsed: 168.19283509254456 seconds\n    Accuracy (whole data, 4000  markers):  0.8745424292845257\n    Accuracy (selected 25 markers) 0.9237936772046589\n\n\n\n```python\n#TSNE plot\na=plot_marker_selection(data, markers, names[0])\n```\n\n    Computing TSNE embedding\n    Elapsed time: 69.88537192344666 seconds\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_31_1.png)\n\n\n\n```python\n\n```\n\n### Example from second level of the hierarchy\n\n\n```python\nfor name in set(names[0]):\n    idx=[s for s in range(len(names[0])) if names[0][s]==name]\n    aux=plot_marker_selection(data[idx], markers, [names[1][s] for s in idx])\n```\n\n    Computing TSNE embedding\n    Elapsed time: 8.925884008407593 seconds\n    Computing TSNE embedding\n    Elapsed time: 1.5634911060333252 seconds\n    Computing TSNE embedding\n    Elapsed time: 0.638862133026123 seconds\n    Computing TSNE embedding\n    Elapsed time: 7.366800785064697 seconds\n    Computing TSNE embedding\n    Elapsed time: 1.0175950527191162 seconds\n    Computing TSNE embedding\n    Elapsed time: 2.3961689472198486 seconds\n    Computing TSNE embedding\n    Elapsed time: 1.0149860382080078 seconds\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_34_1.png)\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_34_2.png)\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_34_3.png)\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_34_4.png)\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_34_5.png)\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_34_6.png)\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_34_7.png)\n\n\n\n```python\n\n```\n\n## One vs all markers\n\n\n```python\nmarkers2=one_vs_all_selection(data,labels[0])\n\naccuracy=performance(data, labels[0], data, labels[0], clf)\naccuracy_markers=performance(data[:,markers2], labels[0], data[:,markers2], labels[0], clf)\n\nprint(\"Accuracy (whole data,\", d, \" markers): \", accuracy)\nprint(\"Accuracy (selected\", num_markers, \"markers)\", accuracy_markers)\n```\n\n    Accuracy (whole data, 4000  markers):  0.8745424292845257\n    Accuracy (selected 25 markers) 0.8569051580698835\n\n\n\n```python\na=plot_marker_selection(data, markers2, names[0])\n```\n\n    Computing TSNE embedding\n    Elapsed time: 69.53578591346741 seconds\n\n\n\n![png](https://raw.githubusercontent.com/solevillar/scGeneFit-python/master/imgs/output_38_1.png)\n\n\n\n```python\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/solevillar/scGeneFit-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scGeneFit",
    "package_url": "https://pypi.org/project/scGeneFit/",
    "platform": "",
    "project_url": "https://pypi.org/project/scGeneFit/",
    "project_urls": {
      "Homepage": "https://github.com/solevillar/scGeneFit-python"
    },
    "release_url": "https://pypi.org/project/scGeneFit/1.0.2/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "scipy",
      "sklearn"
    ],
    "requires_python": ">=3.6",
    "summary": "Genetic marker selection with linear programming",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7501911,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aea54dd05a468df1eda13f162f2d235e3343fd9525558a2cb6fc57d2c578e61a",
          "md5": "72bae7757f529ea1acfeb5123517a752",
          "sha256": "5cb6326dc6a6378988e29aeecb50ed8eeefcfe5b5139dec22f69a759d5d1770a"
        },
        "downloads": -1,
        "filename": "scGeneFit-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72bae7757f529ea1acfeb5123517a752",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13237837,
        "upload_time": "2020-06-13T20:00:18",
        "upload_time_iso_8601": "2020-06-13T20:00:18.928048Z",
        "url": "https://files.pythonhosted.org/packages/ae/a5/4dd05a468df1eda13f162f2d235e3343fd9525558a2cb6fc57d2c578e61a/scGeneFit-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0289f87698273d163cc6b110206dbf242d83c71751a597b499dacdfb3120b482",
          "md5": "15b4b3646475836e5094df3ff3017569",
          "sha256": "45bf76ace24973bf1db1a603a9a2b132b0e7d59bfe32f7d26b12a9bda9c1c9f5"
        },
        "downloads": -1,
        "filename": "scGeneFit-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15b4b3646475836e5094df3ff3017569",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13237729,
        "upload_time": "2020-06-13T19:16:31",
        "upload_time_iso_8601": "2020-06-13T19:16:31.128413Z",
        "url": "https://files.pythonhosted.org/packages/02/89/f87698273d163cc6b110206dbf242d83c71751a597b499dacdfb3120b482/scGeneFit-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bb18ce0ffa7a55fd7730f14cf956e009662707ce5da4af559b9cb1dda9dae47",
          "md5": "901576c25572c66e70e272b6337f7dcf",
          "sha256": "a59c3d18847766272e8dc3851320de7e557773f86464263872c8be20637200b3"
        },
        "downloads": -1,
        "filename": "scGeneFit-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "901576c25572c66e70e272b6337f7dcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13240146,
        "upload_time": "2020-06-13T19:17:09",
        "upload_time_iso_8601": "2020-06-13T19:17:09.303855Z",
        "url": "https://files.pythonhosted.org/packages/9b/b1/8ce0ffa7a55fd7730f14cf956e009662707ce5da4af559b9cb1dda9dae47/scGeneFit-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82ce9c22721c4fa3177bcb811877f1d73bd9e560c1f26e2f94972b312a6b214b",
          "md5": "3ad7e8aa79e878a70990ebe5e2ed620f",
          "sha256": "eb9ae79e9a9f3341e8181b16f35b580c029b4c0969a219076ab124258bb32a56"
        },
        "downloads": -1,
        "filename": "scGeneFit-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ad7e8aa79e878a70990ebe5e2ed620f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13237835,
        "upload_time": "2020-06-13T20:03:27",
        "upload_time_iso_8601": "2020-06-13T20:03:27.073898Z",
        "url": "https://files.pythonhosted.org/packages/82/ce/9c22721c4fa3177bcb811877f1d73bd9e560c1f26e2f94972b312a6b214b/scGeneFit-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4830db20116fa7fb8e10721ba381c7f169c745a12d7c83e10d88e40d92024622",
          "md5": "7676d3246f7e3226d51eeb1af179f28c",
          "sha256": "23fecea82f0ff176d023126325f680624967ed7854373f763adf978002e0572c"
        },
        "downloads": -1,
        "filename": "scGeneFit-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7676d3246f7e3226d51eeb1af179f28c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13240412,
        "upload_time": "2020-06-13T20:03:39",
        "upload_time_iso_8601": "2020-06-13T20:03:39.366026Z",
        "url": "https://files.pythonhosted.org/packages/48/30/db20116fa7fb8e10721ba381c7f169c745a12d7c83e10d88e40d92024622/scGeneFit-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6420f82e81339f43e2ee8b18d3ab0daf39fe47bcb984efaba8f9ca0e9c5481e8",
          "md5": "1d93a952a6e70ea399016e75dcdbec6c",
          "sha256": "f5a2d64183caa59a105b3eeb228d524881c57d687afa8871ff207fc54461f723"
        },
        "downloads": -1,
        "filename": "scGeneFit-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d93a952a6e70ea399016e75dcdbec6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13237849,
        "upload_time": "2020-06-18T00:13:42",
        "upload_time_iso_8601": "2020-06-18T00:13:42.558096Z",
        "url": "https://files.pythonhosted.org/packages/64/20/f82e81339f43e2ee8b18d3ab0daf39fe47bcb984efaba8f9ca0e9c5481e8/scGeneFit-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf3a75c955db47b5d2497e5aa5ddec8d45a9cc9a25d5923ab60d92e58f9838c5",
          "md5": "76619aab3c4d3e6207b6a132e40f0682",
          "sha256": "0912def5dfef0a5dbc8fce054acb7c7331c303f0b02f36007ff7b8b8da847132"
        },
        "downloads": -1,
        "filename": "scGeneFit-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "76619aab3c4d3e6207b6a132e40f0682",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13240432,
        "upload_time": "2020-06-18T00:14:04",
        "upload_time_iso_8601": "2020-06-18T00:14:04.082121Z",
        "url": "https://files.pythonhosted.org/packages/bf/3a/75c955db47b5d2497e5aa5ddec8d45a9cc9a25d5923ab60d92e58f9838c5/scGeneFit-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6420f82e81339f43e2ee8b18d3ab0daf39fe47bcb984efaba8f9ca0e9c5481e8",
        "md5": "1d93a952a6e70ea399016e75dcdbec6c",
        "sha256": "f5a2d64183caa59a105b3eeb228d524881c57d687afa8871ff207fc54461f723"
      },
      "downloads": -1,
      "filename": "scGeneFit-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1d93a952a6e70ea399016e75dcdbec6c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13237849,
      "upload_time": "2020-06-18T00:13:42",
      "upload_time_iso_8601": "2020-06-18T00:13:42.558096Z",
      "url": "https://files.pythonhosted.org/packages/64/20/f82e81339f43e2ee8b18d3ab0daf39fe47bcb984efaba8f9ca0e9c5481e8/scGeneFit-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf3a75c955db47b5d2497e5aa5ddec8d45a9cc9a25d5923ab60d92e58f9838c5",
        "md5": "76619aab3c4d3e6207b6a132e40f0682",
        "sha256": "0912def5dfef0a5dbc8fce054acb7c7331c303f0b02f36007ff7b8b8da847132"
      },
      "downloads": -1,
      "filename": "scGeneFit-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "76619aab3c4d3e6207b6a132e40f0682",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13240432,
      "upload_time": "2020-06-18T00:14:04",
      "upload_time_iso_8601": "2020-06-18T00:14:04.082121Z",
      "url": "https://files.pythonhosted.org/packages/bf/3a/75c955db47b5d2497e5aa5ddec8d45a9cc9a25d5923ab60d92e58f9838c5/scGeneFit-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}