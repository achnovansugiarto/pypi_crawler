{
  "info": {
    "author": "Materials Cloud team",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# tools-barebone\n\n[![Actions Status](https://github.com/materialscloud-org/tools-barebone/workflows/Continuous%20integration/badge.svg)](https://github.com/materialscloud-org/tools-barebone/actions)\n\n\n`tools-barebone` is a framework to develop and deploy small web applications,\nimplemented in Python using Flask Jinja2 templates.\n\nIt can be used as a starting point to develop new tools for the\n[Materials Cloud Tools section](https://www.materialscloud.org/work/tools/options).\n\nIt provides:\n\n- A common layout used for every tool in Materials cloud\n- The Materials Cloud theme\n- Common API endpoints\n- Common widgets, e.g., file upload functionality for crystal structures\n- Web server settings\n- Scripts to deploy the tool in a docker container\n\n## Prerequisites\n\n- [docker](https://www.docker.com/) >= v18.09\n\n## How to use a tools-barebone framework\n\nThe `tools-barebone` framework provides basic templates, that can be extended to develop\na new tool for Materials Cloud.\n\nHere we briefly explain how the `tools-barebone` template (shown\non the left side of the figure below) can be extended to develop a new tool called `custom-tool`\n(shown on the right side).\n\n|                                            Tools barebone template                                             |                                               New tool template                                               |\n| :------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------: |\n| ![](https://github.com/materialscloud-org/tools-barebone/blob/master/misc/screenshots/tools-barebone.png) | ![](https://github.com/materialscloud-org/tools-barebone/blob/master/misc/screenshots/tools-example.png) |\n\n### 1. Get the most recent `tools-barebone` docker image from DockerHub\n\nBrowse to the [Tags page on DockerHub for materialscloud/tools-barebone](https://hub.docker.com/repository/docker/materialscloud/tools-barebone/tags?page=1) and find the most recent tagged version (in the form `X.Y.Z`, e.g. 1.0.0). You can also use the `latest` tag, but we strongly suggest that you use a pinned version, rather than latest: this will ensure that your tool will continue to work also if future, incompatible versions are released.\n\nThen, run the following command to get the image:\n```\ndocker pull materialscloud/tools-barebone\n```\n\nYou can try to see if everything works by running a container from this image, e.g. by running\n```\ndocker run -p 8090:80 materialscloud/tools-barebone:latest\n```\nand then connecting to http://localhost:8090 with your browser.\n\nYou should see a website similar to the image on the left above.\n\nIf you want, you can also install the tools-barebone package (use the same version as the one you picked above) using\n```\npip install tools-barebone==X.Y.Z\n```\n\nThis is not technically required, but it is useful e.g. if your editor has inspection capabilities and needs to see the package, or if you are using a linter.\n\n### 2. New tool: `custom-tool`\n\nTo write the new tool called `custom-tool`, create a new directory `custom-tool`. Let us first create the minimum set of files required\nin this new tool:\n\n```(bash)\nmkdir custom-tool\ncd custom-tool\n\n# create configuration file\ntouch config.yaml\n\n# create Dockerfile file\ntouch Dockerfile\n\n# create file for python requirements\ntouch requirements.txt\n\n# create the folder in which you will put the\n# python code for the backend\nmkdir compute\ntouch compute/__init__.py\n\n# create user templates folder\nmkdir user_templates\ncd user_templates\ntouch ack.html                              # add acknowledgement text here\ntouch about.html                            # add information about this tool here\ntouch how_to_cite.html                      # add tool citation here\ntouch additional_content.html               # additional functionality if any, otherwise empty file\n\n```\n\n### 3. Configuration settings\n\nThe `config.yaml` file contains the configuration details used in this new tool like window title,\npage title, list of html templates, etc. Update the `config.yaml` file and add HTML templates\nthat will be shown in the section about the tool, for tool citation text and for the acknowledgements.\n\nAs an example of the most common variables to be set in the `config.yaml` file, we provide here an example\nhere below:\n\n```(bash)\nwindow_title: \"Materials Cloud Tools: an example app\"\npage_title: \"A simple tool example\"\n\nabout_section_title: \"About this new tool\"\n\n# If True, a structure selection block will be shown and it will provide a common set of parsers.\n# In this case, you will have to provide an endpoint\n# `/compute/process_structure/` to process the results\n# as shown later.\nuse_upload_structure_block: True\n\n# If you have an upload block and want to have some parsers first, you can specify their internal\n# name as a list. Those from the list will be shown first (NOTE! if the name is unknown, it is ignored).\n# All the remaining ones, if any, are shown afterwards in a default order.\nupload_structure_block_order: ['cif-pymatgen', 'xsf-ase']\n\ntemplates:\n  how_to_cite: \"how_to_cite.html\"\n  about: \"about.html\"\n  select_content: \"visualizer_select_example.html\" # what to show in the selection page (below the upload structure block, if present)\n  upload_structure_additional_content: \"upload_structure_additional_content.html\" # if the upload structure block is present, you can add additional content right above the 'submit' button, if you want (e.g. a disclaimer, terms of use, ...)\n\n# Add here more sections to the accordion shown on the top of the selection page\nadditional_accordion_entries:\n#  - header: \"What is this?\"\n#    template_page: what_is.html\n  - header: \"Acknowledgements\"\n    template_page: ack.html\n```\n\n### 4. Create the Dockerfile\n\nOnce the files are ready, we can write a `Dockerfile` that extends the `tools-barebone` image (with the tag you have chosen earlier),\nto build and run the docker container for `custom-tool`.\n\nThe snippet below shows a minimal\n`Dockerfile` file that achieves this goal. You can create such a file inside `custom-tool/Dockerfile`.\nThe commands that you need and that are specific to `custom-tool` can be added at the bottom of the file.\nRemember to replace the `LABEL` string.\n\n````\nFROM materialscloud/tools-barebone:X.Y.Z\n\nLABEL maintainer=\"Developer Name <developer.email@xxx.yy>\"\n\n# Python requirements\nCOPY ./requirements.txt /home/app/code/requirements.txt\n# Run this as sudo to replace the version of pip\n\nRUN pip3 install -U 'pip>=10' setuptools wheel\n# install packages as normal user (app, provided by passenger)\n\nUSER app\nWORKDIR /home/app/code\n# Install pinned versions of packages\nRUN pip3 install --user -r requirements.txt\n# Go back to root.\n# Also, it should remain as user root for startup\nUSER root\n\n# Copy various files: configuration, user templates, the actual python code, ...\nCOPY ./config.yaml /home/app/code/webservice/static/config.yaml\nCOPY ./user_templates/ /home/app/code/webservice/templates/user_templates/\nCOPY ./compute/ /home/app/code/webservice/compute/\n\n# If you put any static file (CSS, JS, images),\n#create this folder and put them here\n# COPY ./user_static/ /home/app/code/webservice/user_static/\n\n###\n# Copy any additional files needed into /home/app/code/webservice/\n###\n\n# Set proper permissions on files just copied\nRUN chown -R app:app /home/app/code/webservice/\n````\n\n### 5. Test it!\n\nYou can now build the Docker image, and then launch the container as follows.\n\nFirst, go in the top folder of your tool, where the `Dockerfile` sits. Then, run this command:\n\n```(bash)\ndocker build -t custom-tools . && docker run -p 8091:80 --rm --name=custom-tools-instance custom-tools\n```\n\nYou can now connect to http://localhost:8091 and check if your results starts to look like the right panel of the images above, and it contains the text that you were expecting.\n\n### 6. Fine tune the text\nBefore looking into the backend python logic, you can now fine-tune the templates that you have written before. Change the `config.yaml` and the various templates. Then, run again the docker build+run commands of the previous sections, and refresh your browser until you are happy with the results.\n\n### 7. Backend implementation\nNow it is time to work on the python backend implementation.\n\n`tools-barebone` uses the [Flask](https://flask.palletsprojects.com/) framework, so you might want to look into its documentation to discover all advanced features. Here we describe only how to make a minimal working tool.\n\nYou will put the code in the `compute` folder you created before. You can add any number of python files in it, and load them using\n```\nfrom compute.XXX import YYY\n```\n(the `compute` folder will be in the python path).\n\nYou will need however to have some minimal content in the `compute/__init__.py` file.\n\nIn particular, you will need at least to define a `blueprint` as follows:\n```python\nimport flask\n\nblueprint = flask.Blueprint(\"compute\", __name__, url_prefix=\"/compute\")\n```\n\nYou can then add your views.\nIf you are using the structure upload block (see comments in the description of the `config.yaml` section), you will need to define at least a `/compute/process_structure/` endpoint. Here is a minimal working example, that you can use as a starting point. Note that here we are going to use the parsing functionality provided directly by the `tools-barebone` package.\n\n```python\nfrom tools_barebone.structure_importers import get_structure_tuple, UnknownFormatError\nimport io\n\n@blueprint.route(\"/process_structure/\", methods=[\"POST\"])\ndef process_structure():\n    \"\"\"Example view to process a crystal structure.\"\"\"\n\n    # check if the post request has the file part, otherwise redirect to first page\n    if \"structurefile\" not in flask.request.files:\n        # This will redirect the user to the selection page, that is called `input_data` in tools-barebone\n        return flask.redirect(flask.url_for(\"input_data\"))\n\n    # Get structure, file format, file content, and form data (needed for additional information, e.g. cell in the case of a XYZ file)\n    structurefile = flask.request.files[\"structurefile\"]\n    fileformat = flask.request.form.get(\"fileformat\", \"unknown\")\n    filecontent = structurefile.read().decode(\"utf-8\")\n    fileobject = io.StringIO(str(filecontent))\n    form_data = dict(flask.request.form)\n\n    # Use\n    try:\n        structure_tuple = get_structure_tuple(\n            fileobject, fileformat, extra_data=form_data\n        )\n    except UnknownFormatError:\n        # You can use the flask.flash functionality to send a message\n        # back to the structure selection page; this\n        # will be shown in a red box on the top\n        flask.flash(\"Unknown format '{}'\".format(fileformat))\n        return flask.redirect(flask.url_for(\"input_data\"))\n    except Exception:\n        # Let's deal properly with any exception, to avoid to get a 500 error.\n        # Feel free to do better error management here,\n        # or to pass additional information via flask.flash\n        flask.flash(\n            \"I tried my best, but I wasn't able to load your \"\n            \"file in format '{}'...\".format(fileformat)\n        )\n        return flask.redirect(flask.url_for(\"input_data\"))\n    # If we are here, the file was retrieved.\n    # It will contain a tuple of length three, with:\n    # - the 3x3 unit cell (in angstrom)\n    # - a Nx3 list of atomic coordinates (in fractional coordinates)\n    # - a list of integer atomic numbers of length N\n\n    # As an example, we just create a string representation of the JSON\n    # and send it back to the user, to be rendered in a form\n    import json\n    data_for_template = {\n        \"structure_json\": json.dumps(\n            {\n                \"cell\": structure_tuple[0],\n                \"atoms\": structure_tuple[1],\n                \"numbers\": structure_tuple[2],\n            },\n            indent=2,\n            sort_keys=True,\n        )\n    }\n    return flask.render_template(\"user_templates/custom-tool.html\", **data_for_template)\n```\nIn order to make it work, the last step is to create a `user_templates/custom-tool.html` file, e.g. with the following minimal content:\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <!-- Add CSS, JS, ... here, e.g, these from tools-barebone;  -->\n    <link href=\"../../static/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../../static/css/jquery-ui.1.12.1.min.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../../static/css/visualizer_base.min.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../../static/css/visualizer_input.min.css\"/>\n    <script src=\"../../static/js/jquery-3.1.0.min.js\"></script>\n    <script src=\"../../static/js/jquery-ui.1.12.1.min.js\"></script>\n\n    <!-- If you add things in a user_static folder, you will be able to access it via ../../user_static/xxx -->\n\n    <title>Custom-tools example return page</title>\n\n    <!-- Keep this, it's needed to make the tool embeddable in an iframe; it's provided by tools-barebone -->\n    <script src=\"../../static/js/iframeResizer.contentWindow.min.js\"></script>\n</head>\n\n<body>\n<div id='container'>\n    <div id='maintitle'>\n        <h1 style=\"text-align: center;\">Tools-example return page</h1>\n    </div>\n\n    <h2>Successfully parsed structure tuple</h2>\n    <p>\n        <code id='structureJson'>\n{{structure_json}}\n        </code>\n    </p>\n</div>\n\n<!-- Important: leave this tag as the *very last* in your page, just before the end of the body -->\n<!-- It is needed to properly detect the size of the iframe -->\n<div style =\"position: relative\" data-iframe-height></div>\n</body>\n</html>\n```\n\nYou can now build and run again the container, and you should see the parsed results, in JSON form, in the page once you upload a structure.\n\n### 8. Additional views\nYou can now continue adding views to your application, inside the blueprint. Check the Flask documentation for more information. Here, we just show an example to create a view for some Terms of use.\n\n- First create a `user_views` folder in the top folder of your application, and create a file `termsofuse.html` inside it. Complete it with the full HTML code that you want to send to the user. Rembember also to add the correct `COPY` line to the `Dockerfile`.\n\n- Then, create the Flask view for it, in the `compute/__init__.py` file:\n```python\nimport os\n\nVIEW_FOLDER = os.path.join(\n    os.path.dirname(os.path.realpath(__file__)), os.pardir, \"user_views\"\n)\n\n@blueprint.route(\"/termsofuse/\")\ndef termsofuse():\n    \"\"\"\n    View for the terms of use\n    \"\"\"\n    return flask.send_from_directory(VIEW_FOLDER, \"termsofuse.html\")\n```\n\nThe page will be accessible under the url `/compute/termsofuse/`.\n\nFinally, if e.g. you want to show a link to it in the Structure Upload block, right before the Submit button, you can add the following line in the `templates` dictionary:\n```yaml\ntemplates:\n  # ...\n  upload_structure_additional_content: \"upload_structure_additional_content.html\"\n```\nand create a file `upload_structure_additional_content.html` in the `user_templates` folder, e.g. with the following content:\n```html\n<div class='row' style=\"text-align:center\">\n    <p class='small'>By continuing, you agree with the <a href=\"../compute/termsofuse/\" target=\"_blank\">terms of use</a> of this service.</p>\n</div>\n```\n\n## Some examples\n\nAn example based on `tools-barebone`, with additional Python backend functionality, is provided in the\n[tools-example](https://github.com/materialscloud-org/tools-example) tool.\n\nFor a more advanced tool, you can also check out the [tools-seekpath](https://github.com/materialscloud-org/tools-seekpath) tool or the [tools-phonon-dispersion](https://github.com/materialscloud-org/tools-phonon-dispersion), for instance.\n\nHere you can see also an example of how the python code in the backend is implemented (check the implementation of the API endpoints inside the `compute` subfolder).\nYou can also get inspiration for the setup of tests with pytest, of continuous integration with GitHub actions, on how to setup pre-commit hooks, etc.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/materialscloud-org/tools-barebone/archive/v1.3.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/materialscloud-org/tools-barebone",
    "keywords": "tool,web tool,Materials Cloud",
    "license": "The MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tools-barebone",
    "package_url": "https://pypi.org/project/tools-barebone/",
    "platform": "",
    "project_url": "https://pypi.org/project/tools-barebone/",
    "project_urls": {
      "Download": "https://github.com/materialscloud-org/tools-barebone/archive/v1.3.0.tar.gz",
      "Homepage": "http://github.com/materialscloud-org/tools-barebone"
    },
    "release_url": "https://pypi.org/project/tools-barebone/1.3.0/",
    "requires_dist": [
      "Flask (>=1)",
      "numpy (>=1.16)",
      "pyyaml (>=5.3.1)",
      "ase (>=3.21.1)",
      "qe-tools (>=2.0.0rc2)",
      "pymatgen (>=2019.7.2)",
      "pre-commit (==2.4.0) ; extra == 'dev'",
      "pylint (==2.4.4) ; extra == 'dev'",
      "prospector (==1.2.0) ; extra == 'dev'",
      "pytest (==5.3.5) ; extra == 'dev'",
      "pytest-selenium (==2.0.1) ; extra == 'dev'",
      "pytest-regressions (==2.0.0) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A base scaffolding to create online web tools",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12121275,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93390b8ba58a589853129849a04e44b679c573c78901fc6a3ebcf2647e1af636",
          "md5": "1a93152479025ef88322bb66811d91f8",
          "sha256": "ebc74f7cf09c501621aede7ef94e3d86f6dd748a6db2521d3467df96a2070234"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a93152479025ef88322bb66811d91f8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12854,
        "upload_time": "2020-05-17T12:45:02",
        "upload_time_iso_8601": "2020-05-17T12:45:02.110316Z",
        "url": "https://files.pythonhosted.org/packages/93/39/0b8ba58a589853129849a04e44b679c573c78901fc6a3ebcf2647e1af636/tools_barebone-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "523d5c40f79d765a53a44d7eb81832ef97eade0f96d07beff1cb2a740da372c3",
          "md5": "ecb6e5f49ef6876e7a1c6799a7178bc9",
          "sha256": "89c843879a375ec6a2fdc4ccfa1f5c2bf9fa50d57d5583d80181114bc6eb3c18"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ecb6e5f49ef6876e7a1c6799a7178bc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17064,
        "upload_time": "2020-05-17T12:45:04",
        "upload_time_iso_8601": "2020-05-17T12:45:04.499659Z",
        "url": "https://files.pythonhosted.org/packages/52/3d/5c40f79d765a53a44d7eb81832ef97eade0f96d07beff1cb2a740da372c3/tools_barebone-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc2ed756c297e403ee5612496ff2f084987c0ab0efa6df42fc7b10dcccce2936",
          "md5": "c1b3d5e9795d2a5850f661ff509fdb3d",
          "sha256": "a514d603cf919384ce4e31c6d51a4098ab342da633c4f8519d232431304b5177"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1b3d5e9795d2a5850f661ff509fdb3d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13020,
        "upload_time": "2020-11-05T19:56:04",
        "upload_time_iso_8601": "2020-11-05T19:56:04.045554Z",
        "url": "https://files.pythonhosted.org/packages/bc/2e/d756c297e403ee5612496ff2f084987c0ab0efa6df42fc7b10dcccce2936/tools_barebone-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db617d4c09a8ee1bd490e7d095c441453391f1e6e9e0322f7f2f13823321b90d",
          "md5": "3421ed35fce066957fb1ecd80356347b",
          "sha256": "52c5e936ec4e00f9929dd05bb2b10f9443404cd096a094601978f675b6c6f58f"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3421ed35fce066957fb1ecd80356347b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 690247,
        "upload_time": "2020-11-05T19:56:09",
        "upload_time_iso_8601": "2020-11-05T19:56:09.584698Z",
        "url": "https://files.pythonhosted.org/packages/db/61/7d4c09a8ee1bd490e7d095c441453391f1e6e9e0322f7f2f13823321b90d/tools_barebone-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d908e53e671000ec5c044c2c0a08af92faecf07756d55a39084150431417524",
          "md5": "6ef98b74c8fdbce1449507a6304ae6cb",
          "sha256": "fefd552f7898782fcd7648cfa995a789a51017e543dd9c400f11e6f31e09e8c2"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ef98b74c8fdbce1449507a6304ae6cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13058,
        "upload_time": "2021-04-13T15:39:59",
        "upload_time_iso_8601": "2021-04-13T15:39:59.684584Z",
        "url": "https://files.pythonhosted.org/packages/7d/90/8e53e671000ec5c044c2c0a08af92faecf07756d55a39084150431417524/tools_barebone-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a668e36bbd0139cc69af221ac534cdb43e003d47c15f8697e7bb34f711475879",
          "md5": "f01653616a1996cdeb0ce5a52d7d4214",
          "sha256": "f49a46c5dd467bae6088858e97816be62f59316e007f19a0e59e4d5b105eb014"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f01653616a1996cdeb0ce5a52d7d4214",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19116,
        "upload_time": "2021-04-13T15:40:01",
        "upload_time_iso_8601": "2021-04-13T15:40:01.442782Z",
        "url": "https://files.pythonhosted.org/packages/a6/68/e36bbd0139cc69af221ac534cdb43e003d47c15f8697e7bb34f711475879/tools_barebone-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93fa69e2f34fb6d6e6c54a4111336bb2bde08cf788b68e82b1655486e338272a",
          "md5": "8d83f8715997afd7d64cc071dc726e74",
          "sha256": "6389ae3a1487f0896319e57be2f8fbae33ab652ed5e421bab8d6eec3a0d4d681"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d83f8715997afd7d64cc071dc726e74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13064,
        "upload_time": "2021-05-04T07:46:56",
        "upload_time_iso_8601": "2021-05-04T07:46:56.444469Z",
        "url": "https://files.pythonhosted.org/packages/93/fa/69e2f34fb6d6e6c54a4111336bb2bde08cf788b68e82b1655486e338272a/tools_barebone-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d988f2312236ea6eecb72cceeb544e937aaef0becd34b5c2cc0eee3c0c7fdf2",
          "md5": "836b9f2a5fb51b71a64f4dbe760c48ec",
          "sha256": "8000033842f76340e16203df5dc6d1ed27f3df50a687476095ffb54f7061177c"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "836b9f2a5fb51b71a64f4dbe760c48ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19122,
        "upload_time": "2021-05-04T07:46:57",
        "upload_time_iso_8601": "2021-05-04T07:46:57.900219Z",
        "url": "https://files.pythonhosted.org/packages/8d/98/8f2312236ea6eecb72cceeb544e937aaef0becd34b5c2cc0eee3c0c7fdf2/tools_barebone-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75a9e45c4c027643bfb10306e61609f33cdda3f4c2e0a4692fa4b95fda2076cf",
          "md5": "8ac1de1ba8068e77602c224a15755e3b",
          "sha256": "63bdc9dfb5de79c6a83b988081e4071ea70a5d362c12cea93131468d3eb359d3"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ac1de1ba8068e77602c224a15755e3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13064,
        "upload_time": "2021-05-31T12:40:52",
        "upload_time_iso_8601": "2021-05-31T12:40:52.989182Z",
        "url": "https://files.pythonhosted.org/packages/75/a9/e45c4c027643bfb10306e61609f33cdda3f4c2e0a4692fa4b95fda2076cf/tools_barebone-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ca85aca772ce43bca0baefb8535c6d4a73222221cde85f6d631a6afa0f86d2e",
          "md5": "5745ebef3c378d684d5a1f288615fc33",
          "sha256": "c1131f80de056021a46e40848a5d64a6e80a33bc4796c799a292e2ab7b927e2b"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5745ebef3c378d684d5a1f288615fc33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19138,
        "upload_time": "2021-05-31T12:40:54",
        "upload_time_iso_8601": "2021-05-31T12:40:54.666024Z",
        "url": "https://files.pythonhosted.org/packages/2c/a8/5aca772ce43bca0baefb8535c6d4a73222221cde85f6d631a6afa0f86d2e/tools_barebone-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "300515de9daebc533ab37145682f1e2ca1ef6058aadef5a4cbb2f89d8334f012",
          "md5": "da107a03e125e1d258497e0b59c9bd8a",
          "sha256": "45aeaec415fe231f44a0c037a7bd3a39929495db7694aba88c24cf616a6f185c"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da107a03e125e1d258497e0b59c9bd8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13061,
        "upload_time": "2021-10-12T08:59:07",
        "upload_time_iso_8601": "2021-10-12T08:59:07.097052Z",
        "url": "https://files.pythonhosted.org/packages/30/05/15de9daebc533ab37145682f1e2ca1ef6058aadef5a4cbb2f89d8334f012/tools_barebone-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "235993dd052af523e0c19b2c226502279bcc0403bf89fd9b22a38ffd56b889fd",
          "md5": "dc917afe6c1568c681504e5b59f2daff",
          "sha256": "f4ad268dc51134778f9c249acb84eb3ecae13df7c2c93ca0b2dfbbde1b7c2e7b"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc917afe6c1568c681504e5b59f2daff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19132,
        "upload_time": "2021-10-12T08:59:08",
        "upload_time_iso_8601": "2021-10-12T08:59:08.406545Z",
        "url": "https://files.pythonhosted.org/packages/23/59/93dd052af523e0c19b2c226502279bcc0403bf89fd9b22a38ffd56b889fd/tools_barebone-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ac1384a91095b59137e56e09ea81ee7fc5466e8b3a1b7ebe8f750aa4438bcd1",
          "md5": "aa8d3c81cbe8e3f033a68e65e469d305",
          "sha256": "e5dc66b9df2570a197fff60f0944f965fc189593f6068912c70a056f66f61fb8"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa8d3c81cbe8e3f033a68e65e469d305",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13168,
        "upload_time": "2021-11-25T09:47:20",
        "upload_time_iso_8601": "2021-11-25T09:47:20.346809Z",
        "url": "https://files.pythonhosted.org/packages/6a/c1/384a91095b59137e56e09ea81ee7fc5466e8b3a1b7ebe8f750aa4438bcd1/tools_barebone-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fec3cd0733c100d21ede9c912e16d0110b9c8aa9af272961bd55bcbf2ae49e0",
          "md5": "b8b2ce68154e5a2f85444312582e1e2f",
          "sha256": "14b1ac83cec54f210e096223190202bbe11e325c6ae9ea9837f6d5a45d9beff2"
        },
        "downloads": -1,
        "filename": "tools_barebone-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b8b2ce68154e5a2f85444312582e1e2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19231,
        "upload_time": "2021-11-25T09:47:22",
        "upload_time_iso_8601": "2021-11-25T09:47:22.404883Z",
        "url": "https://files.pythonhosted.org/packages/3f/ec/3cd0733c100d21ede9c912e16d0110b9c8aa9af272961bd55bcbf2ae49e0/tools_barebone-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ac1384a91095b59137e56e09ea81ee7fc5466e8b3a1b7ebe8f750aa4438bcd1",
        "md5": "aa8d3c81cbe8e3f033a68e65e469d305",
        "sha256": "e5dc66b9df2570a197fff60f0944f965fc189593f6068912c70a056f66f61fb8"
      },
      "downloads": -1,
      "filename": "tools_barebone-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aa8d3c81cbe8e3f033a68e65e469d305",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13168,
      "upload_time": "2021-11-25T09:47:20",
      "upload_time_iso_8601": "2021-11-25T09:47:20.346809Z",
      "url": "https://files.pythonhosted.org/packages/6a/c1/384a91095b59137e56e09ea81ee7fc5466e8b3a1b7ebe8f750aa4438bcd1/tools_barebone-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fec3cd0733c100d21ede9c912e16d0110b9c8aa9af272961bd55bcbf2ae49e0",
        "md5": "b8b2ce68154e5a2f85444312582e1e2f",
        "sha256": "14b1ac83cec54f210e096223190202bbe11e325c6ae9ea9837f6d5a45d9beff2"
      },
      "downloads": -1,
      "filename": "tools_barebone-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b8b2ce68154e5a2f85444312582e1e2f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19231,
      "upload_time": "2021-11-25T09:47:22",
      "upload_time_iso_8601": "2021-11-25T09:47:22.404883Z",
      "url": "https://files.pythonhosted.org/packages/3f/ec/3cd0733c100d21ede9c912e16d0110b9c8aa9af272961bd55bcbf2ae49e0/tools_barebone-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}