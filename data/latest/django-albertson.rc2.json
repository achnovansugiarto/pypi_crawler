{
  "info": {
    "author": "Sean O'Connor",
    "author_email": "sean@focuslab.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "================\ndjango-albertson\n================\n\nHomepage:  https://github.com/FocusLab/django-albertson\n\nIntegration library for Django and `Albertson <https://github.com/FocusLab/Albertson>`_.\n\n---\nUse\n---\n\nDjangoSettingsMixin\n===================\n\n`dj_albertson.mixins.DjangoSettingsMixin`\n\nThis mixin provides automatic loading of default settings for a CounterPool\nfrom the django settings module.\n\nBelow is an example use::\n\n    from albertson import CounterPool\n    from dj_albertson.mixins import DjangoSettingsMixin\n\n    class MyCounter(DjangoSettingsMixin, CounterPool):\n        '''\n        That's it, your done!\n        '''\n\nOnce you've added this mixin to your counter pool classes, the following\nsettings will be used:\n\nALBERTSON_AWS_ACCESS_KEY\n    The AWS access key id that will be used to access DynamoDB.  This is the\n    setting that will be used if both `AWS_ACCESS_KEY_ID` and\n    `ALBERTSON_AWS_ACCESS_KEY` are provided.\n\nALBERTSON_AWS_SECRET_KEY\n    The AWS secet key that will be used to access DynamoDB.  This is the\n    setting that will be used if both `AWS_SECRET_ACCESS_KEY` and\n    `ALBERTSON_AWS_SECRET_KEY` are provided.\n\nAWS_ACCESS_KEY_ID\n    A more generic form of `ALBERTSON_AWS_ACCESS_KEY`\n\nAWS_SECRET_ACCESS_KEY\n    A more generic form of `ALBERTSON_AWS_SECRET_KEY`\n\nALBERTSON_DEFAULT_READ_UNITS\n    The default read throughput that will be set on newly created tables.\n\n    **default:** 3\n\nALBERTSON_DEFAULT_WRITE_UNITS\n    The default write throughput that will be set on newly created tables.\n\n    **default:** 5\n\nALBERTSON_AUTO_CREATE_TABLE\n    A flag to control how Albertson should behave when it tries to use a\n    table that doesn't exist.  If set to `True`, Albertson will create a new\n    table.  If set to `False`, Albertson will allow the underlying boto\n    exception to bubble up through the stack.\n\n    **default:** True",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FocusLab/django-albertson",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-albertson",
    "package_url": "https://pypi.org/project/django-albertson/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-albertson/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/FocusLab/django-albertson"
    },
    "release_url": "https://pypi.org/project/django-albertson/0.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Integration library for Django and Albertson.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 789080,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5f8839be0f3dc8069220c5310cf8920e7787c3fb90d07a86d2b21dc7758a415",
          "md5": "c23a0b6ead278fb4f7245a5080c01053",
          "sha256": "1eeb088b67a7d6a4476fcebf58ccc67e316fb8fc90d828ac42f1338174c2f278"
        },
        "downloads": -1,
        "filename": "django-albertson-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c23a0b6ead278fb4f7245a5080c01053",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2527,
        "upload_time": "2012-02-21T05:26:40",
        "upload_time_iso_8601": "2012-02-21T05:26:40.830178Z",
        "url": "https://files.pythonhosted.org/packages/c5/f8/839be0f3dc8069220c5310cf8920e7787c3fb90d07a86d2b21dc7758a415/django-albertson-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2e827bcb75a03101dbe59659071263914a6c67aa1d0d8b66dce813e5522db05",
          "md5": "77d438d356ef56b5a4d3d687cbf725dc",
          "sha256": "ec7820c2f1e56af49578473f7c8819ec4f73fa5fad56b0cf45088991f302c024"
        },
        "downloads": -1,
        "filename": "django-albertson-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "77d438d356ef56b5a4d3d687cbf725dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3594,
        "upload_time": "2012-02-21T18:09:46",
        "upload_time_iso_8601": "2012-02-21T18:09:46.402649Z",
        "url": "https://files.pythonhosted.org/packages/f2/e8/27bcb75a03101dbe59659071263914a6c67aa1d0d8b66dce813e5522db05/django-albertson-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2e827bcb75a03101dbe59659071263914a6c67aa1d0d8b66dce813e5522db05",
        "md5": "77d438d356ef56b5a4d3d687cbf725dc",
        "sha256": "ec7820c2f1e56af49578473f7c8819ec4f73fa5fad56b0cf45088991f302c024"
      },
      "downloads": -1,
      "filename": "django-albertson-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "77d438d356ef56b5a4d3d687cbf725dc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3594,
      "upload_time": "2012-02-21T18:09:46",
      "upload_time_iso_8601": "2012-02-21T18:09:46.402649Z",
      "url": "https://files.pythonhosted.org/packages/f2/e8/27bcb75a03101dbe59659071263914a6c67aa1d0d8b66dce813e5522db05/django-albertson-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}