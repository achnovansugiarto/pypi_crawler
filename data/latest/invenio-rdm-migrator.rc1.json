{
  "info": {
    "author": "CERN",
    "author_email": "info@inveniosoftware.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha"
    ],
    "description": "..\n    Copyright (C) 2022 CERN.\n\n\n    Invenio-RDM-Migrator is free software; you can redistribute it and/or\n    modify it under the terms of the MIT License; see LICENSE file for more\n    details.\n\n=====================\n Invenio-RDM-Migrator\n=====================\n\n.. image:: https://github.com/inveniosoftware/invenio-rdm-migrator/workflows/CI/badge.svg\n        :target: https://github.com/inveniosoftware/invenio-rdm-migrator/actions?query=workflow%3ACI+branch%3Amaster\n\n.. image:: https://img.shields.io/github/tag/inveniosoftware/invenio-rdm-migrator.svg\n        :target: https://github.com/inveniosoftware/invenio-rdm-migrator/releases\n\n.. image:: https://img.shields.io/pypi/dm/invenio-rdm-migrator.svg\n        :target: https://pypi.python.org/pypi/invenio-rdm-migrator\n\n.. image:: https://img.shields.io/github/license/inveniosoftware/invenio-rdm-migrator.svg\n        :target: https://github.com/inveniosoftware/invenio-rdm-migrator/blob/master/LICENSE\n\nDataCite-based data model for Invenio.\n\n\nDevelopment\n===========\n\nInstall\n-------\n\nMake sure that you have `libpq-dev` installed in your system. See\n`psycopg installation instructions <https://www.psycopg.org/install/>`_\nfor more information.\n\nChoose a version of search and database, then run:\n\n.. code-block:: console\n\n    pip install -e .\n\n\nTests\n-----\n\n.. code-block:: console\n\n    ./run-tests.sh\n\nHow to run it\n=============\n\nTo run the migration you need:\n\n- A running InvenioRDM instance.\n- If your data contains references to other records (e.g. vocabularies),\n  then it is also required to run the setup step.\n\n.. code-block:: console\n\n    invenio-cli services setup --force --no-demo-data\n\n- Install Invenio-RDM-Migrator, any other dependencies must be handled\n  in the Pipfile of your instance.\n\n.. code-block:: console\n\n    $ pip install invenio-rdm-migrator\n\n- Create/edit the configuration file on your instance, for example\n  `streams.yaml`:\n\n.. code-block:: yaml\n\n    records:\n        extract:\n            filename: /path/to/records.json\n        load:\n            db_uri: postgresql+psycopg2://inveniordm:inveniordm@localhost:5432/inveniordm\n            tmp_dir: /tmp/migrator\n\n\n- You will need to create a small python script\n  putting together the different blocks of the ETL. You can find an eample\n  at `my-site/site/my_site/migrator/__main__.py`.\n\n.. code-block:: python\n\n    from invenio_rdm_migrator.streams import StreamDefinition\n    from invenio_rdm_migrator.streams.records import RDMRecordCopyLoad\n\n    if __name__ == \"__main__\":\n        RecordStreamDefinition = StreamDefinition(\n            name=\"records\",\n            extract_cls=JSONLExtract,\n            transform_cls=ZenodoToRDMRecordTransform,\n            load_cls=RDMRecordCopyLoad,\n        )\n\n        runner = Runner(\n            stream_definitions=[\n                RecordStreamDefinition,\n            ],\n            config_filepath=\"path/to/your/streams.yaml\",\n        )\n        runner.run()\n\n- Finally, you can execute the above code. Since it is in the `__main__` file\n  of the python package, you can run it as a module:\n\n.. code-block:: console\n\n    $ python -m my_site.migrator\n\n- Once the migration has completed, in your instance you can reindex the data.\n  For example, for users and records it would look like:\n\n.. code-block:: console\n\n    $ invenio-cli pyshell\n\n    In [1]: from invenio_access.permissions import system_identity\n    In [2]: from invenio_rdm_records.proxies import current_rdm_records_service\n    In [3]: from invenio_users_resources.proxies import current_users_service\n\n    In [4]: current_users_service.rebuild_index(identity=system_identity)\n    In [5]: current_rdm_records_service.rebuild_index(identity=system_identity)\n\nImplement your {Extract/Transform/Load}\n=======================================\n\nThere are for packages in this module `extract`, `transform`, `load`, and\n`streams`. The first three correspond to the three steps of an ETL process.\nThe `streams` package contains the logic to run the process and different\nstream-specific implementations of ETL classes (e.g. `records`).\n\nExtract\n-------\n\nThe extract is the first part of the data processing stream. It's\nfunctionality is quite simple: return an iterator (e.g. of records), where each\nyielded value is a dictionary. Note that the data in this step is _transformed_\nto an extent, but only in format (e.g. JSON, XML), not in content. For example,\nto implement a `XMLExtract` class:\n\n.. code-block:: python\n\n    class XMLExtract(Extract):\n    ...\n\n        def run(self):\n            with open(\"file.xml\") as file:\n                for entry in file:\n                    yield xml.loads(entry)\n\nTransform\n---------\n\nThe transformer is in charge of modifying the content to suit, in this case,\nthe InvenioRDM data model (e.g. for records) so it can be imported in the DB.\nIt will loop through the entries (i.e. the iterator returned by the extract\nclass), transform and yield (e.g. the record). Diving more in the example of\na record:\n\nTo transform something to an RDM record, you need to implement\n`streams/records/transform.py:RDMRecordTransform`. For each record it will\nyield what is considered a semantically \"full\" record: the record itself,\nits parent, its draft in case it exists and the files related them.\n\n.. code-block:: python\n\n    {\n        \"record\": self._record(entry),\n        \"draft\": self._draft(entry),\n        \"parent\": self._parent(entry),\n        \"record_files\": self._record_files(entry),\n        \"draft_files\": self._draft_files(entry),\n    }\n\nThis means that you will need to implement the functions for each key. Note\nthat, only `_record` and `_parent` should return content, the others can return\n`None`. In this case we will need to re-think which methods should be\n`abstractmethod` and which ones be defaulted to `None/{}/some other default` in\nthe base. You can find an example implementation at\n`zenodo-rdm/site/zenodo_rdm/migrator/transform.py:ZenodoToRDMRecordTransform`.\n\nSome of these functions can themselves use a `transform/base:Entry`\ntransformer. An _entry_ transformer is a one layer deeper abstraction, to\nprovide an interface with the methods needed to generate valid data for part of\nthe `Transform` class. In the record example, you can implement\n`transform.base:RDMRecordEntry`, which can be used in the\n`RDMRecordTransform._record` function mentioned in the code snippet above. Note\nthat implementing this interface will produce valid _data_ for a record.\nHowever, the _metadata_ is not interfaced. It is an open question how much we\nshould define these interfaces and avoid duplicating already existing\nMarshmallow schemas.\n\nAt this point you might be wondering \"Why not Marshmallow then?\". The answer is\n\"separation of responsibilities, performance and simplicity\". The later lays\nwith the fact that most of the data transformation is custom, so we would end\nup with a schema full of `Method` fields, which does not differ much from what\nwe have but would have an impact on performance (Marshmallow is slow...).\nRegarding the responsibilities part, validating - mostly referential, like\nvocabularies - can only be done on _load_ where RDM instance knowledge/appctx\nis available.\n\nNote that no validation (not even structural) is done (at the moment) in this\nstep.\n\nLoad\n----\n\nThe final step to have the records available in the RDM instance is to load\nthem. The available `load/postgresql:PostgreSQLCopyLoad` will carry out 2 steps:\n\n- 1. Prepare the data, writing one DB row per line in a csv file:\n\n.. code-block:: console\n\n    $ /path/to/data/tables1668697280.943311\n        |\n        | - pidstore_pid.csv\n        | - rdm_parents_metadata.csv\n        | - rdm_records_metadata.csv\n        | - rdm_versions_state.csv\n\n2. Perform the actual loading, using `COPY`. Inserting all rows at once is more\n   efficient than performing one `INSERT` per row.\n\nInternally what is happening is that the `prepare` function makes use of\n`TableGenerator` implementations and then yields the list of csv files.\nSo the `load` only iterates through the filenames, not the actual entries.\n\nA `TableGenerator` will, for each value in the received iterator, yield one\nor more rows (lines to be written to the a csv file). For example for a record\nit will yield: recid, DOI and OAI (PersistentIdentifiers), record and parent\nmetadata, etc.\n\nNotes\n=====\n\n**Shared cache between streams**\n\nDuring a migration run, there is a need to share information across different streams,\ne.g populate communities before records and keep the map between community slug names\nand autogenerated community ids, or at the same stream across different `TableGenerator`\ninstances, e.g on records stream we keep the \"seen\" parent ids so we can update the\ninformation of the parent for different record versions.\nFor that reason, we pass a cache dict, that can change in the future in a type of\npersistent storage e.g redis, in each `stream.load` step so streams can populate/consume\nthe cache.\nThe cache for each stream can also be populated in each stream configuration like below\nin your `streams.yaml`:\n\n.. code-block:: yaml\n\n    records:\n        extract:\n            filename: /path/to/records.json\n        load:\n            cache:\n                communities:\n                    community_slug: <community_id>\n            db_uri: postgresql+psycopg2://inveniordm:inveniordm@localhost:5432/inveniordm\n            tmp_dir: /tmp/migrator\n\nWhen the runner will instantiate each stream will merge the existing state of the cache\nwith whatever is provided in the stream configuration. That means, that the stream\nconfiguration takes precedence and can override the whole cache before the stream runs!\nAny cache state that exists before is overridden for the rest of the migration run.\n\n**Infrastructure**\n\nWhile now we are chaining the iterator from one step into the other in the\nstreams, the idea is that all three steps will pull/push to/from queues so\nthey can be deployed in different parts of the system (e.g. the load part\nin the worker nodes).\n\n**Others**\n\n- Using generators instead of lists, allows us to iterate through the data\n  only once and perform the E-T-L steps on them. Instead of loop for E, loop\n  for T, loop for L. In addition, this allows us to have the csv files open\n  during the writing and closing them at the end (open/close is an expensive\n  op when done 3M times).\n\n..\n    Copyright (C) 2022 CERN.\n\n\n    Invenio-RDM-Migrator is free software; you can redistribute it and/or\n    modify it under the terms of the MIT License; see LICENSE file for more\n    details.\n\nChanges\n=======\n\nVersion 1.0.0\n\n- Initial public release.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/inveniosoftware/invenio-rdm-migrator",
    "keywords": "invenio rdm migration",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "invenio-rdm-migrator",
    "package_url": "https://pypi.org/project/invenio-rdm-migrator/",
    "platform": "any",
    "project_url": "https://pypi.org/project/invenio-rdm-migrator/",
    "project_urls": {
      "Homepage": "https://github.com/inveniosoftware/invenio-rdm-migrator"
    },
    "release_url": "https://pypi.org/project/invenio-rdm-migrator/1.0.0a2/",
    "requires_dist": [
      "invenio-records[postgresql] (>=2.0.1)",
      "psycopg (>=3.1.4)",
      "PyYAML (>=5.4.1)",
      "check-manifest (>=0.25) ; extra == 'tests'",
      "coverage (<5.0.0,>=4.0) ; extra == 'tests'",
      "isort (>=4.3) ; extra == 'tests'",
      "pydocstyle (>=2.0.0) ; extra == 'tests'",
      "pytest (>=4.6.1) ; extra == 'tests'",
      "pytest-black (>=0.3.0) ; extra == 'tests'",
      "pytest-cov (>=2.5.1) ; extra == 'tests'",
      "pytest-isort (>=3.1.0) ; extra == 'tests'",
      "pytest-pep8 (>=1.0.6) ; extra == 'tests'",
      "pytest-pycodestyle (>=2.3.1) ; extra == 'tests'",
      "pytest-pydocstyle (>=2.3.1) ; extra == 'tests'",
      "sphinx (>=4.5.0) ; extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "InvenioRDM module for data migration.",
    "version": "1.0.0a2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17364711,
  "releases": {
    "1.0.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34f52b2dfb6f3a68ec74f186e19e059d4af234936729ede94276e0bddea2b819",
          "md5": "f5f95c1a18ac4cc47fbf2e242f6b4ed5",
          "sha256": "234287e314fbfc8adc46e42a98e2e1523d9887acf8674736b58fa22e097a5914"
        },
        "downloads": -1,
        "filename": "invenio_rdm_migrator-1.0.0a2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5f95c1a18ac4cc47fbf2e242f6b4ed5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 28208,
        "upload_time": "2023-03-20T14:38:08",
        "upload_time_iso_8601": "2023-03-20T14:38:08.464502Z",
        "url": "https://files.pythonhosted.org/packages/34/f5/2b2dfb6f3a68ec74f186e19e059d4af234936729ede94276e0bddea2b819/invenio_rdm_migrator-1.0.0a2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e97fa623d2f3a757d84c82868ada335e70bd905bd6daec332aa9e29fb3b04b46",
          "md5": "7c69a60750af1f893b6b95c4b5a6d536",
          "sha256": "59454351581ee201d9e711ad6c0b0d08ec143b0244c6d901562c297568c9b8d0"
        },
        "downloads": -1,
        "filename": "invenio-rdm-migrator-1.0.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "7c69a60750af1f893b6b95c4b5a6d536",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30395,
        "upload_time": "2023-03-20T14:38:10",
        "upload_time_iso_8601": "2023-03-20T14:38:10.099594Z",
        "url": "https://files.pythonhosted.org/packages/e9/7f/a623d2f3a757d84c82868ada335e70bd905bd6daec332aa9e29fb3b04b46/invenio-rdm-migrator-1.0.0a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34f52b2dfb6f3a68ec74f186e19e059d4af234936729ede94276e0bddea2b819",
        "md5": "f5f95c1a18ac4cc47fbf2e242f6b4ed5",
        "sha256": "234287e314fbfc8adc46e42a98e2e1523d9887acf8674736b58fa22e097a5914"
      },
      "downloads": -1,
      "filename": "invenio_rdm_migrator-1.0.0a2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5f95c1a18ac4cc47fbf2e242f6b4ed5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 28208,
      "upload_time": "2023-03-20T14:38:08",
      "upload_time_iso_8601": "2023-03-20T14:38:08.464502Z",
      "url": "https://files.pythonhosted.org/packages/34/f5/2b2dfb6f3a68ec74f186e19e059d4af234936729ede94276e0bddea2b819/invenio_rdm_migrator-1.0.0a2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e97fa623d2f3a757d84c82868ada335e70bd905bd6daec332aa9e29fb3b04b46",
        "md5": "7c69a60750af1f893b6b95c4b5a6d536",
        "sha256": "59454351581ee201d9e711ad6c0b0d08ec143b0244c6d901562c297568c9b8d0"
      },
      "downloads": -1,
      "filename": "invenio-rdm-migrator-1.0.0a2.tar.gz",
      "has_sig": false,
      "md5_digest": "7c69a60750af1f893b6b95c4b5a6d536",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 30395,
      "upload_time": "2023-03-20T14:38:10",
      "upload_time_iso_8601": "2023-03-20T14:38:10.099594Z",
      "url": "https://files.pythonhosted.org/packages/e9/7f/a623d2f3a757d84c82868ada335e70bd905bd6daec332aa9e29fb3b04b46/invenio-rdm-migrator-1.0.0a2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}