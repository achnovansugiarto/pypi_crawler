{
  "info": {
    "author": "",
    "author_email": "Phidata Team <awsdp@phidata.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## AWS Data Platform\n\nThis repo contains the code for building a data platform on AWS.\n\nWe enable 2 data environments:\n\n1. dev: A development env running on docker\n2. prd: A production env running on aws + k8s\n\n## Setup\n\n1. Create + activate a virtual env:\n\n```sh\npython3 -m venv ~/.venvs/dpenv\nsource ~/.venvs/dpenv/bin/activate\n```\n\n2. Install + init `phidata`:\n\n```sh\npip install phidata\nphi init\n```\n\n> from the `data-platform` dir:\n\n3. Setup workspace:\n\n```sh\nphi ws setup\n```\n\n4. Copy `workspace/example_secrets` to `workspace/secrets`:\n\n```sh\ncp -r workspace/example_secrets workspace/secrets\n```\n\n5. Deploy dev containers to docker using:\n\n```sh\nphi ws up\n```\n\n`phi` will create the following resources:\n\n- Container: `dev-pg-dp-container`\n- Network: `dp`\n\nOptional: If something fails, try running again with debug logs:\n\n```sh\nphi ws up -d\n```\n\nOptional: Create `.env` file:\n\n```sh\ncp example.env .env\n```\n\n## Using the dev environment\n\nThe [workspace/dev](workspace/dev) directory contains the code for the dev resources. The [workspace/settings.py](workspace/settings.py) file can be used to enable the open-source applications like:\n\n1. Postgres App: for storing dev data (runs 1 container)\n2. Airflow App: for running dags & pipelines (runs 5 containers)\n3. Superset App: for visualizing dev data (runs 4 containers)\n\nUpdate the [workspace/settings.py](workspace/settings.py) file and run:\n\n```sh\nphi ws up\n```\n\nTIP: The `phi ws ...` commands use `--env dev` and `--config docker` by default. Set in the `workspace/config.py` file.\n\nRunning `phi ws up` is equivalent to running `phi ws up --env dev --config docker`\n\n### Run Airflow\n\n1. Set `airflow_enabled = True` in [workspace/settings.py](workspace/settings.py) and run `phi ws up`\n2. Check out the airflow webserver running in the `airflow-ws-container`:\n\n- url: `http://localhost:8310/`\n- user: `admin`\n- pass: `admin`\n\n### Superset webserver\n\n1. Set `superset_enabled = True` in [workspace/settings.py](workspace/settings.py) and run `phi ws up`\n2. Check out the superset webserver running in the `superset-ws-container`:\n\n- url: `http://localhost:8410/`\n- user: `admin`\n- pass: `admin`\n\n### Format + lint workspace\n\nFormat with `black` & lint with `mypy` using:\n\n```sh\n./scripts/format.sh\n```\n\nIf you need to install packages, run:\n\n```sh\npip install black mypy\n```\n\n### Upgrading phidata version\n\n> activate virtualenv: `source ~/.venvs/dpenv/bin/activate`\n\n1. Upgrade phidata:\n\n```sh\npip install phidata --upgrade\n```\n\n2. Rebuild local images & recreate containers:\n\n```sh\nCACHE=f phi ws up --env dev --config docker\n```\n\n### Optional: Install workspace locally\n\nInstall the workspace & python packages locally in your virtual env using:\n\n```sh\n./scripts/install.sh\n```\n\nThis will:\n\n1. Install python packages from `requirements.txt`\n2. Install python project in `--editable` mode\n3. Install `requirements-airflow.txt` without dependencies for code completion\n\nThis enables:\n\n1. Running `black` & `mypy` locally\n2. Running workflows locally\n3. Editor auto-completion\n\n### Add python packages\n\nFollowing [PEP-631](https://peps.python.org/pep-0631/), we should add dependencies to the [pyproject.toml](pyproject.toml) file.\n\nTo add a new package:\n\n1. Add the module to the [pyproject.toml](pyproject.toml) file.\n2. Run: `./scripts/upgrade.sh`. This script updates the `requirements.txt` file.\n3. _Optional: Run: `./scripts/install.sh` to install the new dependencies in a local virtual env._\n4. Run `CACHE=f phi ws up` to recreate images + containers\n\n### Adding airflow providers\n\nAirflow requirements are stored in the [workspace/dev/airflow_resources/requirements-airflow.txt](/workspace/dev//airflow_resources/requirements-airflow.txt) file.\n\nTo add new airflow providers:\n\n1. Add the module to the [workspace/dev/airflow_resources/requirements-airflow.txt](/workspace/dev/airflow_resources/requirements-airflow.txt) file.\n2. _Optional: Run: `./scripts/install.sh` to install the new dependencies in a local virtual env._\n3. Run `CACHE=f phi ws up --name airflow` to recreate images + containers\n\n### To force recreate all images & containers, use the `CACHE` env variable\n\n```sh\nCACHE=false phi ws up \\\n  --env dev \\\n  --config docker \\\n  --type image|container \\\n  --name airflow|superset|pg \\\n  --app airflow|superset\n```\n\n### Shut down workspace\n\n```sh\nphi ws down\n```\n\n### Restart all resources\n\n```sh\nphi ws restart\n```\n\n### Restart all containers\n\n```sh\nphi ws restart --type container\n```\n\n### Restart traefik app\n\n```sh\nphi ws restart --app traefik\n```\n\n### Restart airflow app\n\n```sh\nphi ws restart --app airflow\n```\n\n### Add environment/secret variables to your apps\n\nThe containers read env using the `env_file` and secrets using the `secrets_file` params.\nThese files are stored in the [workspace/env](workspace/env) or [workspace/secrets](workspace/secrets) directories.\n\n#### Airflow\n\nTo add env variables to your airflow containers:\n\n1. Update the [workspace/env/dev_airflow_env.yml](workspace/env/dev_airflow_env.yml) file.\n2. Restart all airflow containers using: `phi ws restart --name airflow --type container`\n\nTo add secret variables to your airflow containers:\n\n1. Update the [workspace/secrets/dev_airflow_secrets.yml](workspace/secrets/dev_airflow_secrets.yml) file.\n2. Restart all airflow containers using: `phi ws restart --name airflow --type container`\n\n### Test a DAG\n\n```sh\n# ssh into airflow-worker | airflow-ws\ndocker exec -it airflow-ws-container zsh\ndocker exec -it airflow-worker-container zsh\n\n# Test run the DAGs using module name\npython -m workflow.dir.file\n\n# Test run the DAG file\npython /mnt/workspaces/data-platform/workflow/dir/file.py\n\n# List DAGs\nairflow dags list\n\n# List tasks in DAG\nairflow tasks list \\\n  -S /mnt/workspaces/data-platform/workflow/dir/file.py \\\n  -t dag_name\n\n# Test airflow task\nairflow tasks test dag_name task_name 2022-07-01\n```\n\n### Recreate everything\n\nNotes:\n\n- Use `data-platform` as the working directory\n- Deactivate existing venv using `deactivate` if needed\n\n```sh\necho \"*- Deleting venv\"\nrm -rf ~/.venvs/dpenv\n\necho \"*- Deleting af-db-dp-volume volume\"\ndocker volume rm af-db-dp-volume\n\necho \"*- Recreating venv\"\npython3 -m venv ~/.venvs/dpenv\nsource ~/.venvs/dpenv/bin/activate\n\necho \"*- Install phi\"\npip install phidata\nphi init\n\necho \"*- Setup + deploying workspace\"\nphi ws setup\nCACHE=f phi ws up\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "awsdp",
    "package_url": "https://pypi.org/project/awsdp/",
    "platform": null,
    "project_url": "https://pypi.org/project/awsdp/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/awsdp/0.1.0/",
    "requires_dist": [
      "awswrangler",
      "boto3",
      "duckdb",
      "ipython",
      "pandas",
      "papermill",
      "phidata (>=0.2.15)",
      "pyarrow",
      "requests",
      "sqlalchemy",
      "tiingo",
      "black[jupyter] ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "psycopg2-binary ; extra == 'dev'",
      "types-requests ; extra == 'dev'"
    ],
    "requires_python": ">3.7",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15302681,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a0bbf164f0780739c173ec875f903f5a22ea7fb7a6d0db52d8bb4462cfdb5d4",
          "md5": "8396d135055fa8e445077ba180f7a006",
          "sha256": "112eef8359f94e61a61e5673f80617469bce6b2cef1b87ef63745a577a285b81"
        },
        "downloads": -1,
        "filename": "awsdp-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8396d135055fa8e445077ba180f7a006",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.7",
        "size": 5880,
        "upload_time": "2022-10-04T13:42:20",
        "upload_time_iso_8601": "2022-10-04T13:42:20.437212Z",
        "url": "https://files.pythonhosted.org/packages/7a/0b/bf164f0780739c173ec875f903f5a22ea7fb7a6d0db52d8bb4462cfdb5d4/awsdp-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6291865705c4c2be2fd4b0c65abda33eb35d70143b3a8f374c5738b60abf8bab",
          "md5": "df6503c77c1085e456874115d2f5d1ed",
          "sha256": "ebd618bf78e389095266f695d46e9268a617a5cf79aff06dd003c0ce373bc8d2"
        },
        "downloads": -1,
        "filename": "awsdp-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "df6503c77c1085e456874115d2f5d1ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.7",
        "size": 5306,
        "upload_time": "2022-10-04T13:42:21",
        "upload_time_iso_8601": "2022-10-04T13:42:21.959525Z",
        "url": "https://files.pythonhosted.org/packages/62/91/865705c4c2be2fd4b0c65abda33eb35d70143b3a8f374c5738b60abf8bab/awsdp-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a0bbf164f0780739c173ec875f903f5a22ea7fb7a6d0db52d8bb4462cfdb5d4",
        "md5": "8396d135055fa8e445077ba180f7a006",
        "sha256": "112eef8359f94e61a61e5673f80617469bce6b2cef1b87ef63745a577a285b81"
      },
      "downloads": -1,
      "filename": "awsdp-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8396d135055fa8e445077ba180f7a006",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">3.7",
      "size": 5880,
      "upload_time": "2022-10-04T13:42:20",
      "upload_time_iso_8601": "2022-10-04T13:42:20.437212Z",
      "url": "https://files.pythonhosted.org/packages/7a/0b/bf164f0780739c173ec875f903f5a22ea7fb7a6d0db52d8bb4462cfdb5d4/awsdp-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6291865705c4c2be2fd4b0c65abda33eb35d70143b3a8f374c5738b60abf8bab",
        "md5": "df6503c77c1085e456874115d2f5d1ed",
        "sha256": "ebd618bf78e389095266f695d46e9268a617a5cf79aff06dd003c0ce373bc8d2"
      },
      "downloads": -1,
      "filename": "awsdp-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "df6503c77c1085e456874115d2f5d1ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.7",
      "size": 5306,
      "upload_time": "2022-10-04T13:42:21",
      "upload_time_iso_8601": "2022-10-04T13:42:21.959525Z",
      "url": "https://files.pythonhosted.org/packages/62/91/865705c4c2be2fd4b0c65abda33eb35d70143b3a8f374c5738b60abf8bab/awsdp-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}