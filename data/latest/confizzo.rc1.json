{
  "info": {
    "author": "John Aven",
    "author_email": "accelerators@hashmapinc.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgitlab.com%2Fhashmapinc%2Fctso%2Futilities%2Fconfizzo.svg?type=shield)](https://app.fossa.com/projects/git%2Bgitlab.com%2Fhashmapinc%2Fctso%2Futilities%2Fconfizzo?ref=badge_shield)\n[![codecov](https://codecov.io/gl/hashmapinc:ctso:utilities/confizzo/branch/%5Cx646576656c6f706d656e74/graph/badge.svg?token=ITYIXT92BE)](https://codecov.io/gl/hashmapinc:ctso:utilities/confizzo)\n# confizzo\n\nconfizzo is a configuration management library. It is designed to contain many versions of configuration managed approaches into a single API.\n\n## Multi-file Configurations\n\nMultifile configurations, in confizzo terms, are configurations which are partitioned into multiple files. One assumption is that when one configuration contains configuration information of another entity, that that configuration is then stored in a separate configuration file and referenced by type corresponds to filename and the name of the configuration in the file.\n\n### Specifications\n\nHere the configuration is parsed into one or more files. When a configuration has a dependency on another object - via composition - the configuration for such \nobjects will be stored in separate files. ALl objects of similar type - save the entry point objects, will be stored in files denoted by name the kind of class \n(via vase class) for which they will configure. In the 'main.yml' - the entrypoint configuration - the configurations will be \n\n````yaml\nobject:\n  type: class_type\n  conf: SOME CONFIGURATION DICTIONARY\n  _dependencies_:\n    - List of dependency descriptions\n````\n\nThe list of dependency descriptions will have objects as follows\n```yaml\n  var_name: NAME OF THE VARIABLE (COMPOSED OBJECT) THIS CONFIGURATION WILL BELONG TO\n  name: NAME OF CONFIGURATION FROM THE CONF_TYPE LOCATION\n  conf_type: IDENTIFIES THE KIND OF CONFIGURATION - WHERE THEY WILL BE STORED.\n```\n\nThe \\_dependencies\\_ section is used to\n1. Help populate the configuration repository\n1. Used to identify the references to the Class that can be dynamically injected and to reference the right configuration\n\nThe pattern aimed to be used here is to\n1. Create an object from it's configuration (non-injectable objects)\n1. From \\_dependencies\\_ find the Class that will be constructed and the name (as a passable conf value) of the key used to reference that objects configuration.\n\n### Examples\nAssume that we have an application called data_mover. Then for this application, running in local mode, the configuration will be stored at .data_mover at the $HOME path.\n\nmain.yml\n```yaml\nversion: 1\n\nsystem_1:\n  type: ClassA\n  conf:\n    param_1: something\n    param_2: other\n  _dependencies_:\n    - var_name: db_conn\n      name: dev_pg\n      conf_type: database\n```\n\ndatabase.yaml\n```yaml\nversion: 1\n\ndev_pg:\n  obj_type: PostgresDB\n  user: user\n  password: password\n  host: 10.0.0.7\n  database: root\n```\n\nThe usage patter would be something like this:\nmain.py\n```python\nfrom providah.factories.package_factory import PackageFactory\nfrom confizzo.multifile.config_manager import ConfigManager\nfrom confizzo.multifile.parser import Parser\n\ndef main():\n    ConfigManager.config_root = '~/.data_mover/config.yml'\n    \n    conf_key = 'ClassA' \n    config = Parser.get(conf_key)\n    obj_type = config.pop('type')\n\n    system_1 = PackageFactory.create(key=obj_type, **{'conf_key': conf_key})\n    system_1.run()\n```\n\nsystem_1.py\n```python\nfrom providah.factories.package_factory import PackageFactory\nfrom confizzo.multifile.parser import Parser\n\n\nclass System1:\n    def __init__(self, conf_key: str):\n        self.__config = Parser.get(conf_key)\n        \n        dependencies = self.__config['_dependencies_']\n        conf_for_db_conn_ref = [dep for dep in dependencies if dep['var_name'] == 'db_conn']\n        self.__db_conn = PackageFactory.create(key=Parser.get(conf_for_db_conn_ref['type']), \n                                               **{'conf_key': conf_for_db_conn_ref['name']})\n\n    def run(self):\n        self.__db_conn.execute('SELECT 1')\n\n```\n\npostgres_db.py\n```python\nfrom confizzo.multifile.parser import Parser\n\n\nclass PostgresDB:\n    \n    def __init__(self, conf_key: str):\n        # Configuration contains secrets, so we don't want to expose this except when executing a query.\n        self.__config_name = conf_key \n\n    def execute(self, query: str) -> None:\n        conf = Parser.get(self.__config_name)['conf']\n        conn = self.__get_connection(conf)\n\n        conn.cursor.execute(query)\n        conn.close()\n\n    def __get_connection(self, conf: str) -> Connection:\n        pass\n```\n\n## TODO\nThere are a number of feature that could be added\n1. Simpler reference of dependencies from configuration using library and avoiding bespoke solution and \n1. Additional filtering when referencing configurations\n1. Additional configuration that ties to providah package (maybe)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/hashmapinc/oss/confizzo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "confizzo",
    "package_url": "https://pypi.org/project/confizzo/",
    "platform": "",
    "project_url": "https://pypi.org/project/confizzo/",
    "project_urls": {
      "Homepage": "https://gitlab.com/hashmapinc/oss/confizzo"
    },
    "release_url": "https://pypi.org/project/confizzo/0.1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "DO NOT USE - This is a beta package",
    "version": "0.1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7922530,
  "releases": {
    "0.1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3256bac683101b30a012195854e1b0b2a2b6c10472f959982fe70720f7f1175",
          "md5": "ac77e6d9b7cdab2844c05b21b7488b20",
          "sha256": "5ae7612bf6f29fd101c6d2cf76e302fee3b6df981742cb4af58deb65643f73d4"
        },
        "downloads": -1,
        "filename": "confizzo-0.1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ac77e6d9b7cdab2844c05b21b7488b20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5922,
        "upload_time": "2020-08-10T04:18:29",
        "upload_time_iso_8601": "2020-08-10T04:18:29.138686Z",
        "url": "https://files.pythonhosted.org/packages/c3/25/6bac683101b30a012195854e1b0b2a2b6c10472f959982fe70720f7f1175/confizzo-0.1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3256bac683101b30a012195854e1b0b2a2b6c10472f959982fe70720f7f1175",
        "md5": "ac77e6d9b7cdab2844c05b21b7488b20",
        "sha256": "5ae7612bf6f29fd101c6d2cf76e302fee3b6df981742cb4af58deb65643f73d4"
      },
      "downloads": -1,
      "filename": "confizzo-0.1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ac77e6d9b7cdab2844c05b21b7488b20",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5922,
      "upload_time": "2020-08-10T04:18:29",
      "upload_time_iso_8601": "2020-08-10T04:18:29.138686Z",
      "url": "https://files.pythonhosted.org/packages/c3/25/6bac683101b30a012195854e1b0b2a2b6c10472f959982fe70720f7f1175/confizzo-0.1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}