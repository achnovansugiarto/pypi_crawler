{
  "info": {
    "author": "Artem Romanukov",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Django Nearly-SOLID framework\n\n## Введение\n\nDjango-NS-framework - это надстройка над Django, предоставляющая ряд паттернов для упрощенного построения хорошей\nархитектуры приложения.\n\nВам следует использовать это, если имеются претензии к высокой связанности кода в **Django REST framework** как его альтернативу.\n\n## Основные принципы\n\n### Отделение логики от данных\n\nЕсть несколько вариантов того, где разместить логику нашего приложения на Django. Документация Django говорит, что\nнаиболее разумным вариантом будет положить бизнес-логику в модель. Однако этот подход имеет минусы. Основной -\nперемешивание\nданных и логики.\n\nПри использовании Django-NS мы рекомендуем выделять отдельные классы для логики и отдельные - для данных.\n\n#### Плохой пример:\n\n```python\n# models.py\nfrom django.db import models\n\n\nclass Order(models.Model):\n    ...  # декларация данных заказа\n\n    @staticmethod\n    def pay_for_order(order_id: int, some_data: dict) -> 'Order':\n        \"\"\"Какая-то бизнес-логика\"\"\"\n\n```\n\n#### Хороший пример:\n\n```python\n# models.py\nfrom django.db import models\n\n\nclass Order(models.Model):\n    ...  # декларация данных заказа\n\n\n# services.py\nclass OrdersService:\n    def pay_for_order(self, order_id: int, some_data: dict) -> Order:\n        \"\"\"Какая-то бизнес-логика\"\"\"\n\n```\n\n### Слои абстракции\n\nСлой абстракции - это способ сокрытия деталей реализации функционала.\n\nОбычно в веб-приложении мы можем выделить три слоя абстракции:\n\n- Слой базы данных (Database layer) - слой, на котором происходит сохранение/изменение данных в хранилище.\n  Ничего не знает о других слоях\n- Слой бизнес-логики (Business logic layer) - слой с деталями реализации бизнес-логики.\n  Знает о слое БД (оперирует django-моделями), ничего не знает об адаптерах/интерфейсах.\n- Слой адаптеров (Adapters layer) - слой с деталями реализации не-бизнесовой части логики.\n  Знает о бизнес-логике и БД.\n\nОбщение между слоями происходит с помощью интерфейсов. Таким образом, чтобы слой бизнес-логики смог обратиться в адаптер\n(например отправить имэйл), ему нужно знать только про интерфейс, но не про реализацию адаптера. Интерфейс при этом\nбудет лежать на том же слое, где используется, а его реализация - слоем выше. Чтобы подставить имплементацию интерфейса\nнеобходимо использовать механизм подстановки зависимостей (dependency injection).\n\n## Dependency injection\n\nВ упрощенном виде вы можете рассматривать подстановку зависимостей как словарь, ключи которого - интерфейсы, а\nзначения - их имплементации. Механизм DI дает возможность подставить имплементацию интерфейса.\n\nОтдельно мы декларируем контейнер, в котором сопоставляем интерфейсы к их имплементации. Контейнеры как правило\nсоотносятся с конфигурациями запуска. В зависимости от контейнера имплементации одних и тех же интерфейсов могут быть\nразными.\n\nК примеру, если мы хотим запускать несколько разных API (в микросервисах очень частая потребность), то для одного из\nAPI сервис будет дефолтной имплементации с бизнес-логикой, а для другого - нагенерированной имплементацией, построенной\nна сетевых запросах на вызов этого метода из первого API.\n\n#### Пример использования DI:\n\nДопустим, имеем интерфейс:\n```python\n# shop/image_storage.py\nfrom abc import ABC, abstractmethod\n\n\nclass IImageStorage(ABC):\n    @abstractmethod\n    def upload_image(self, file: bytes) -> str:\n        \"\"\"\n        Метод, загружающий файл в хранилище\n        :returns: ID файла в хранилище\n        \"\"\"\n```\n\nИ его имплементацию:\n```python\n# adapters/image_storage.py\nclass DepotImageStorage(IImageStorage):\n    def upload_image(self, file: bytes) -> str:\n        \"\"\"\n        Реализация, построенная на специфичной для задачи библиотеке\n        \"\"\"\n\n```\n\nДекларируем контейнер:\n\n```python\n# shop/container.py\nfrom adapters.image_storage import FileSystemImageStorage\nfrom ns.di.abc import Container\nfrom shop.image_storage import IImageStorage\n\n\nclass ShopContainer(Container):\n    images_storage: IImageStorage = FileSystemImageStorage()\n\n\n```\n\nИ используем в сервисе:\n\n```python\n# shop/services.py\nfrom typing import IO\n\nfrom ns.di import depends\n\n\nclass ShopService:\n    image_storage: IImageStorage = depends(IImageStorage)\n\n    def set_product_image(self, product_id: int, file: IO):\n        # Какая-то логика обработки товара\n        file_id = self.image_storage.upload_image(file.read())  # Вызовется метод DepotImageStorage.upload_image\n        print(isinstance(self.image_storage, DepotImageStorage))\n        # Напечатает True, но так делать не нужно - этот слой не должен импортировать и использовать имплементацию\n\n```\n\n## Работа с данными\n\nМы предполагаем, что данные могут быть следующих видов:\n\n- Все стандартные типы Python\n- Django-модели\n- Pydantic-модели\n- Датаклассы\n- Enum\n\nВсе сложные структуры данных (не стандартные типы) будем называть **сущностями (entities)**.\n\nДля pydantic-моделей и датаклассов предполагается использовать файл `entities.py`. Для Enum'ов - `enums.py`\n\nПри этом использовать pydantic нужно только в том случае, если предполагается валидация сущностей. Если вы хотите просто\nзадекларировать сущность, используйте dataclass.\n\n## Обработка ошибок\n\nДля исключений используются наследники класса `ns.errors.Error`.\nВ нем используются коды ошибок, декларирующиеся отдельно как string enum.\n\n## Пользователи\n\nDjango предоставляет стандартный пакет `django.contrib.auth`, реализующий базовую модель данных для пользователя и\nметод для авторизации пользователя.\n\nКогда мы пишем код, обычно мы привыкли получать данные пользователя в `View` из обьекта `HttpRequest`:\n\n```python\nfrom django.views import View\nfrom django.http import HttpRequest\n\n\nclass SomeView(View):\n    def get(self, request: HttpRequest):\n        user = request.user  # Обычно мы делаем так\n\n```\n\nНо View - это обработчик HTTP-запросов. Так это специфичная для транспорта часть приложения,\nмы не хотим писать тут бизнес-логику. Вместо этого логику мы пишем в сервисах.\n\n### Использование юзеров в сервисах\n\nТ.к. передача в каждый отдельный метод сервиса авторизованного юзера - это шаблонный код, есть возможность\nиспользовать юзеров из переменных контекста. Для этого:\n\nПодключите middleware для аутентификации из NS вместо стандартного:\n\n```python\n# settings.py\nMIDDLEWARE = [\n    ...,\n    'ns.auth.middleware.AuthenticationMiddleware',  # вместо 'django.contrib.auth.middleware.AuthenticationMiddleware'\n    ...,\n]\n```\n\nИспользуйте предоставленную переменную контекста в коде сервиса:\n\n```python\nfrom ns.auth.contextvars import authorized_user\n\n\nclass Service(...):\n    def get_order(self, order_id: int) -> 'Order':\n        user = authorized_user.get()\n        # Логика с использованием юзера\n```\n\nХотя ничего не мешает вам использовать `authorized_user` внутри адаптеров, все же, мы не рекомендуем этого делать -\nлогика, связанная с пользователем - часть бизнес-логики и предпочтительнее ей находиться именно в сервисах.\n\n### Проверка авторизации\n\nДля того, чтобы не дать неавторизованному пользователю вызвать определенный метод, вы можете использовать декоратор\n`auth_required`. Тогда, если пользователь на аутентифицирован, будет выброшена ошибка авторизации.\n\n```python\nfrom ns.auth.decorators import auth_required\nfrom ns.auth.contextvars import authorized_user\n\n\nclass Service(...):\n    @auth_required\n    def get_order(self, order_id: int) -> 'Order':\n        user = authorized_user.get()\n        # Логика с использованием юзера\n```\n\n\n## AutoAPI\n\nТак как методы сервисов - это по сути методы бизнес-логики, часто бывает удобно сгенерировать из них API\nдля вызова их из других сервисов, находящихся в других процессах, либо вообще с фронтенда на JavaScript.\n\nЧтобы приложение корректно сгенерировало API, унаследуйте ваш Django Application от\n`ns.autoapi.apps.AutoApiConfig`:\n```python\nfrom ns.autoapi.apps import AutoApiConfig\n\n\nclass ShopConfig(AutoApiConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'shop'\n```\n\nИ добавьте следующий код в ваш корневой `urls.py`:\n```python\nfrom ns.autoapi.urls import urlpatterns as autoapi_urlpatterns\n\n\nurlpatterns = [\n    ...  # Какие-то URLs\n] + autoapi_urlpatterns\n```\n\nВаше API будет доступно при запуске через обычный runserver:\n```shell\npython manage.py runserver\n```\n\n### Сервисы\n\nВы можете задать свойство `AutoApiConfig.services_apps` (список строк с названиями django-приложений) ии приложения\nчтобы указать, из каких django-приложений вы хотите импортировать сервисы. По умолчанию импортируются только сервисы\nтекущего приложения. \n\n\n### Сущности\n\nАналогично со свойством `AutoApiConfig.entities_apps`\n\n### Explorer\n\nДля удобства тестирования сгенерированного API NS предоставляет свой аналог Swagger. При запуске приложения собирается\nинформация об используемых сервисах и сущностях, а затем передается в веб-интерфейс с документацией и возможностью\nпротестировать API.\n\nЧтобы запустить explorer, введите из консоли:\n```shell\npython manage.py runapiexplorer <app_name>\n```\n\nгде `app_name` - название django-приложения, наследника `AutoApiConfig`\n\n### Генерация JavaScript\n\nДля более удобного использования сгенерированного API вы можете сгенерировать javascript-файл с логикой запросов,\nкод которого будет повторять структуру API.\n\n```shell\npython manage.py generateapijs <app_name> <out_file_name>\n```\n\nгде `app_name` - название django-приложения, наследника `AutoApiConfig`\\\n    `out_file_name` - путь до итогового файла. например: '../js/shop-service.js'\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/romanukov/django-nearly-solid",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-nearly-solid",
    "package_url": "https://pypi.org/project/django-nearly-solid/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-nearly-solid/",
    "project_urls": {
      "Homepage": "https://github.com/romanukov/django-nearly-solid"
    },
    "release_url": "https://pypi.org/project/django-nearly-solid/0.3.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15301024,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a750b6e3696ca13f061b6975503bf6beb71d85c8e1d0351ddcd426d15bc309e",
          "md5": "a9e2bb350f46e0f45b70672bbe8a2cbf",
          "sha256": "072a07e1651bfa5f25f48247dc8ca52bf5e2b5651604a55fb45357ae7668f4b2"
        },
        "downloads": -1,
        "filename": "django-nearly-solid-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a9e2bb350f46e0f45b70672bbe8a2cbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15219,
        "upload_time": "2022-09-26T13:02:37",
        "upload_time_iso_8601": "2022-09-26T13:02:37.058971Z",
        "url": "https://files.pythonhosted.org/packages/4a/75/0b6e3696ca13f061b6975503bf6beb71d85c8e1d0351ddcd426d15bc309e/django-nearly-solid-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c70ef29626e9cb7dd19174c3c475593bf5ddeb5e2d1f73aef4a78e34366a3ec3",
          "md5": "377e567cdf5645fff6fcd5ddefc4605f",
          "sha256": "27e46d37b5e86c7569639d8be3a89eb7168f3d65217021e7c61ae4a30c754b5d"
        },
        "downloads": -1,
        "filename": "django-nearly-solid-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "377e567cdf5645fff6fcd5ddefc4605f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20086,
        "upload_time": "2022-09-26T13:11:49",
        "upload_time_iso_8601": "2022-09-26T13:11:49.522643Z",
        "url": "https://files.pythonhosted.org/packages/c7/0e/f29626e9cb7dd19174c3c475593bf5ddeb5e2d1f73aef4a78e34366a3ec3/django-nearly-solid-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c009309404a9e9fc70cb9d6606093ad3893195b87f1f655bfd6da00439e73977",
          "md5": "a495913c8ba7e646d4b361160892f927",
          "sha256": "312a6108b0abd020cef319f865f47275175b1667f484a59a222b115e24f88bc7"
        },
        "downloads": -1,
        "filename": "django-nearly-solid-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a495913c8ba7e646d4b361160892f927",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20108,
        "upload_time": "2022-09-27T07:16:10",
        "upload_time_iso_8601": "2022-09-27T07:16:10.846861Z",
        "url": "https://files.pythonhosted.org/packages/c0/09/309404a9e9fc70cb9d6606093ad3893195b87f1f655bfd6da00439e73977/django-nearly-solid-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e9a5c0024bb7102fe056a3728d57ecbc2e0b40b002d996b701d119045c05c2c",
          "md5": "bf74b02d68176bc3d62c394643013773",
          "sha256": "2a1bfca3e1e169f054fdb8b099a609fb8b424d953616317df9d0b186dfb3633b"
        },
        "downloads": -1,
        "filename": "django-nearly-solid-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bf74b02d68176bc3d62c394643013773",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20628,
        "upload_time": "2022-10-04T10:38:19",
        "upload_time_iso_8601": "2022-10-04T10:38:19.026475Z",
        "url": "https://files.pythonhosted.org/packages/0e/9a/5c0024bb7102fe056a3728d57ecbc2e0b40b002d996b701d119045c05c2c/django-nearly-solid-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e9a5c0024bb7102fe056a3728d57ecbc2e0b40b002d996b701d119045c05c2c",
        "md5": "bf74b02d68176bc3d62c394643013773",
        "sha256": "2a1bfca3e1e169f054fdb8b099a609fb8b424d953616317df9d0b186dfb3633b"
      },
      "downloads": -1,
      "filename": "django-nearly-solid-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bf74b02d68176bc3d62c394643013773",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20628,
      "upload_time": "2022-10-04T10:38:19",
      "upload_time_iso_8601": "2022-10-04T10:38:19.026475Z",
      "url": "https://files.pythonhosted.org/packages/0e/9a/5c0024bb7102fe056a3728d57ecbc2e0b40b002d996b701d119045c05c2c/django-nearly-solid-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}