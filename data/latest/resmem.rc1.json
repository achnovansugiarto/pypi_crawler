{
  "info": {
    "author": "CoÃ«n D. Needell",
    "author_email": "coen@needell.co",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ResMem\n\nThis is a package that wraps [ResMem](https://coen.needell.co/project/memnet/). This is a residual neural network that \nestimates the memorability of an image, on a scale of 0 to 1.\n\n## How to Use\nTo install from PyPI:\n```shell\npip install resmem\n```\n\nThe package contains two objects, ResMem itself, and a preprocessing transformer function built on torchvision.\n```python\nfrom resmem import ResMem, transformer\n\nmodel = ResMem(pretrained=True)\n\n```\nThe `transformer` is designed to be used with pillow.\n\n```python\nfrom PIL import Image\n\nimg = Image.open('./path/to/image') # This loads your image into memory\nimg = img.convert('RGB') \n# This will convert your image into RGB, for instance if it's a PNG (RGBA) or if it's black and white.\n\nmodel.eval()\n# Set the model to inference mode.\n\nimage_x = transformer(img)\n# Run the preprocessing function\n\nprediction = model(image_x.view(-1, 3, 227, 227))\n# For a single image, the image must be reshaped into a batch\n# with size 1.\n# Get your prediction!\n```\n\nFor more advanced usage, see the `sample.py` file in this repository.\n\n## Description of the Model\n\nHistorically, the next big advancement in using neural networks after AlexNet, the basis for MemNet, was ResNet. This allowed for convolutional neural networks to be built deeper, with more layers, without the gradient exploding or vanishing. Knowing that, let's try to include this in our model. What we will do is take a pre-trained ResNet, that is the whole thing, not just the convolutional features, and add it as an input feature for our regression step. The code for this is [here.](https://www.coeneedell.com/appendix/memnet_extras/#resmem)\n\n![ResMem Diagram](ResMem.jpg)\n\nFor the following discussion, while ResMem is initialized to a pre-trained optimum, I have allowed it to retrain for our problem. The thought is that given a larger set of parameters the final model *should* be more generalizable. Using weights and biases, we can run a hyperparameter sweep.\n\n![ResMem Testing](resnetsweep.png)\n\nHere we can see much higher peaks, reaching into the range of 0.66-0.67! All of these runs were both trained and validated on a dataset that was constructed from both MemCat and LaMem databases.\n\n## Github Instructions\n\nIf you want to fiddle around with the raw github sourcecode, go right ahead. But be aware that we use git lfs for the \nmodel storage. You'll have to install the package at https://git-lfs.github.com/ and then run:\n```shell\ngit lfs install\ngit lfs pull\n```\nto get access to the full model. Also note that the `tests.py` file that's included with this repository references a \ndatabase that we, at this time, do not have permission to distribute, so consider that test file to be a guide rather \nthan a hard-and-fast test.\n\n## Citation\n\n```\n@inproceedings{ResMem2021,\ntitle = {Embracing New Techniques in Deep Learning for Predicting Image Memorability},\nauthor = {Needell, Coen D. and Bainbridge, Wilma A.},\nbooktitle = {Proceedings of the Vision Sciences Society, 2021},\nyear = {2021},\npublisher = {ARVO Journals},\nurl = {https://www.coeneedell.com/publication/vss2021/vss2021.pdf}\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Brain-Bridge-Lab/resmem",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "resmem",
    "package_url": "https://pypi.org/project/resmem/",
    "platform": null,
    "project_url": "https://pypi.org/project/resmem/",
    "project_urls": {
      "Homepage": "https://github.com/Brain-Bridge-Lab/resmem"
    },
    "release_url": "https://pypi.org/project/resmem/1.1.6/",
    "requires_dist": [
      "torch",
      "torchvision"
    ],
    "requires_python": ">=3.6",
    "summary": "A package that wraps the ResMem pytorch model.",
    "version": "1.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14781482,
  "releases": {
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "032d4f163c5ff98d1557191ff3d09d2ca843f7b9a75d8939a7cbb14670d2a4ac",
          "md5": "a426ec1635737b959a2c746cb51ce681",
          "sha256": "2ed9d656280761215cde8f94a58197cdca523ccacb36fbd949edbea7a62c5572"
        },
        "downloads": -1,
        "filename": "resmem-1.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a426ec1635737b959a2c746cb51ce681",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 489123294,
        "upload_time": "2022-08-16T18:52:09",
        "upload_time_iso_8601": "2022-08-16T18:52:09.140422Z",
        "url": "https://files.pythonhosted.org/packages/03/2d/4f163c5ff98d1557191ff3d09d2ca843f7b9a75d8939a7cbb14670d2a4ac/resmem-1.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f503a07080aafc86098c706da98a5da2a0144ea591b8876cc80e1cec66b125aa",
          "md5": "3b9183103e6a2b58e208430ca71b79b0",
          "sha256": "405caf20b05e2bf86c5d06cad7523f255f07f1f1e161ae9c440fcad2ffd68c04"
        },
        "downloads": -1,
        "filename": "resmem-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "3b9183103e6a2b58e208430ca71b79b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 489125267,
        "upload_time": "2022-08-16T18:52:52",
        "upload_time_iso_8601": "2022-08-16T18:52:52.646537Z",
        "url": "https://files.pythonhosted.org/packages/f5/03/a07080aafc86098c706da98a5da2a0144ea591b8876cc80e1cec66b125aa/resmem-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "032d4f163c5ff98d1557191ff3d09d2ca843f7b9a75d8939a7cbb14670d2a4ac",
        "md5": "a426ec1635737b959a2c746cb51ce681",
        "sha256": "2ed9d656280761215cde8f94a58197cdca523ccacb36fbd949edbea7a62c5572"
      },
      "downloads": -1,
      "filename": "resmem-1.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a426ec1635737b959a2c746cb51ce681",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 489123294,
      "upload_time": "2022-08-16T18:52:09",
      "upload_time_iso_8601": "2022-08-16T18:52:09.140422Z",
      "url": "https://files.pythonhosted.org/packages/03/2d/4f163c5ff98d1557191ff3d09d2ca843f7b9a75d8939a7cbb14670d2a4ac/resmem-1.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f503a07080aafc86098c706da98a5da2a0144ea591b8876cc80e1cec66b125aa",
        "md5": "3b9183103e6a2b58e208430ca71b79b0",
        "sha256": "405caf20b05e2bf86c5d06cad7523f255f07f1f1e161ae9c440fcad2ffd68c04"
      },
      "downloads": -1,
      "filename": "resmem-1.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "3b9183103e6a2b58e208430ca71b79b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 489125267,
      "upload_time": "2022-08-16T18:52:52",
      "upload_time_iso_8601": "2022-08-16T18:52:52.646537Z",
      "url": "https://files.pythonhosted.org/packages/f5/03/a07080aafc86098c706da98a5da2a0144ea591b8876cc80e1cec66b125aa/resmem-1.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}