{
  "info": {
    "author": "Gregor von Laszewski",
    "author_email": "laszewski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Romeo Tensorflow Installation\n\n## Getting an account on juliet\n\nPlease get a futuresystems.org account and upload the public key of your\nmachine to the portal. If you have issues please e-mail\n`help@futuresystems.org`. Please note that you must have a basic\nunderstanding of ssh as this is a requirement to log in on any computer\nthese days. If you do not, please read up on `ssh`, `ssh-keygen`,\n`ssh-add`, `ssh keycahin`.\n\nTest your access while logging into `juliet.futuersystems.org`\nPlease note that the account creation takes one business day.\n\n## Request to be added to the GPU allowed users\n\nPlease send mail to the GPU allowed users by sending a mail to  \n`help@futuresystems.org` with your `futuresystems` username.\nSuch as\n\n    Please add me to the Romeo users allowed to use GPU's\n\n    username: <PUT YOUR USERNAME HERE>\n    reservation: lijguo_11\n\n## Install cloudmesh\n\nTo easily access `romeo`, you can use either cloudmesh or manage it via\nbashrc files, or just do it by hand. The latter option is discouraged as\nyou may need to do it several times, and it takes a considerable effort\nto activate, for example, a `jupyterlab` notebook. We recommend that you\nhave python 3.8 or newer installed on your computer. And use the 64-bit\nversion. Please download it from python.org. Note that the default\nversion for windows is 32-bit, which does not work, so locate the 64-bit\nversion.\n\n```bash\n$ pip install cloudmesh-installer\n$ cloudmesh-installer install iu\n$ cms help\n```\n\nAfter you did the `cms help` command, you need to add the `iu:` block to\nyour cloudmesh.yaml file.\n\n```\ncloudmesh:\n  ...\n  iu:\n    user: gvonlasz\n    host: r-003\n    gpu: 0\n    port: 5888\n    reservation: lijguo_11\n```\n\nYou will need to modify the values for user to your futuresystems\nusername. The host, gpu, and port number will be given to you by the\nperson that you will be working with on Romeo.\n\nPlease note that when others use the same port number this will not\nwork, so make sure you use a port number that is unique. If you find\nconflicts, please negotiate with the other users.\n\nFor class use your use of GPU's will be especially regulated and you  \nneed to coordinate with your classmates the usage. Research projects  \ntypically have priorities and could mean that the access to romeo is  \nlimited. In these cases we recommend that you use colab if possible.\n\n\n## One line command to start Jupyter lab\n\nIn a terminal execute\n\n```bash\n$ cms iu lab\n```\n\nThis command will call a number of cloudmesh commands to allocate a\nreservation on romeo, start port forwarding, start jupyterlab and view\nthe jupyter lab in a browser. It opens 2 additional terminals for the\nallocation and port forwarding. To kill all of it, please remove all the\nwindows created by the command and call in your terminal\n\n```bash\n$ cms iu kill\n```\n\n## Subcommands for more controll\n\nThe one ine command is implemented using a number of subcommands.\nThey are explained next. If the one line command works, please use that,  \notherwise try to use the subcommands.\n\n### Using cloudmesh to access romeo jupyterlab notebooks\n\nIn a terminal execute\n\n```bash\n$ cms iu allocate\n```\n\nThis gives you an interactive allocation in which you can start\n`jupyterlab` in the background. Next start in a new terminal\n`jupyterlab` with\n\n```bash\n$ cms iu lab\n```\n\nTo connect to it open in a new terminal a port that forwards to the\njupyterlab instance:\n\n```bash\n$ cms iu port\n```\n\nFinally, you can say in a terminal on your local machine:\n\n```bash\n$ cms iu view\n```\n\nIf you can to kill the jupyterlab, please use:\n\n```bash\n$ cms iu kill\n```\n\nand start new. Close the windows and start over.\n\nFor improvement suggestions, look at the source code  \nand propose changes via pull requests.\n\n\n\n\n## Installation via bashrc scripts\n\nThis installation is significantly more involved but works for Windows\nmachines using gitbash. For all others, we do recommend that you use the\ncloudmesh installation\n\n### Quickstart\n\nThis quickstart assumes you have done all the steps discussed throughout\nthe document (this includes setting up your bashrc files, and installing\ntensorflow). We include it here so you have an easy way to remember once\nyou have set up your environment how to start a notebook.\n\nOnce you have set up the environment as discussed previously, you need 3 terminals\n\n* terminal 1: ```r-allocate```\n* terminal 2: ```r-jupyter```\n* terminal 3: ```r-port file:// ....``` # copy the line from terminal 2 with the file://\n* browser: copy the url with local host in it in your browser\n\nYou will see the jupyter notebook\n\n\n### Account\n\n* Make sure you get a futuresystems account on\n  <https://futuresystems.org>. You will have to declare a project you\n  work on with us. Often this is created by the faculty member,\n  not the students.\n* Make sure you have created an ssh key with `ssh-keygen` in a\n  shell. On Windows use gitbash and install it the default way on your\n  machine. Linux and macOS have the ssh commands build in\n* Upload the public key in `~/.ssh/id_rsa.pub` into the public key\n  field whne going to your futuresystems account and edit it. The\n  account information link is placed on the bottom of the page\n* Now you have to wait a while till your key gets populated to juliet\n  and romeo. This is a process done automatically every 10 minutes, but\n  a system administrator has to activate your account which requires\n  sending a help ticket\n\n### Setup\n\nThe setup is a bit complex, follow the instructions carefully. We assume\nyou use bash, zsh, or gitbash (in case of Windows). Other shells are not\ndiscussed here.\n\n### Host machine setup\n\nPlace the following in your .bashrc, or .zprofile or .pash_profile\n(depends on your computer):\n\n```\n# ##############################################\n# BEGIN ROMEO SETUP\n# ##############################################\n# chose your own favourite port and host \nJPORT=\"9100\"\nJHOST=\"r-003\"\nJLOG=\"${HOME}/log-juliet-jupyter.txt\"\nJMOUNT=\"${HOME}/DESKTOP\"\nJUSER=\"<Your FutureSystems User Name on Juliet>\"\nJULIET=\"${JUSER}@juliet.futuresystems.org\"\n# its in dir juliet, please create it first\n\n# FUNTIONS\nfunction r-port {\n    RPORT=`grep \"file:\" ${JLOG}`\n    ssh -L ${JPORT}:r-003:${JPORT} -i ${RPORT} ${JULIET}\n}\n\nfunction r-open {\n    RHTML=`grep \"127.\" ${JLOG} | tail -1 | sed 's/or //g'`\n    echo\n    echo ${RHTML}\n    echo\n    /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome \"${RHTML}\"\n}\n\nalias r-allocate='ssh ${JULIET} \"salloc -p romeo --reservation=lijguo_11\"'\nalias r-install='ssh -t ${JULIET} \"ssh r-003 \\\"curl -Ls http://cloudmesh.github.io/get/romeo/tf | sh\\\"\"'\nalias romeo='ssh -t ${JULIET} \"ssh ${JHOST}\"'\n\nalias r='ssh -t ${JULIET} \"ssh ${JHOST}\"'\nalias j='ssh ${JULIET}'\n\nfunction r-start-jupyter {\n    echo \"pkill -u ${JUSER} jupyter-lab; ~/ENV3/bin/jupyter-lab --port ${JPORT} --ip 0.0.0.0 --no-browser\" | ssh ${JULIET} \"ssh ${JHOST}\"\n}\n\nalias r-ps='echo \"ps -aux| fgrep ${JUSER}\" | ssh ${JULIET} \"ssh ${JHOST}\"'\nalias r-kill='echo \"echo; hostname; echo; pkill -u ${JUSER} jupyter-lab\" | ssh ${JULIET} \"ssh ${JHOST}\"'\n\nfunction r-jupyter {\n    rm -f ${JLOG}\n    r-start-jupyter 2>&1 | tee ${JLOG}\n}\n\nalias j-mount=\"cd ${JMOUNT}; sshfs ${JULIET}:shared ${JULIET} -o auto_cache ; cd ${JMOUNT}/${JULIET}\"\nalias j-umount=\"cd ${JMOUNT}; umount ${JULIET}\"\n\nalias p-mount=\"cd ${HOME}; sshfs ${JULIET}:ENV3 RPYTHON -o auto_cache\"\nalias p-umount=\"cd ${HOME}; umount RPYTHON\"\n\n# ##############################################\n# END ROMEO SETUP\n# ##############################################\n```\n\n\nThis provides the following commands to you\n\n* `r-allocate`\n\n  to get an allocation, call once. When you close the window the\n  allocation is terminated and none of the commands will work well\n\n* `r-install`\n\n  Tensorflow software stack installation in your home dir on romeo ~/ENV3\n\n  You have to do this only once\n\n* `r`\n\n  This logs you into romeo\n\n* `j`\n\n  This logs you into juliet\n\n* `r-ps`\n\n  This dos a ps on romeo\n\n* `r-kill`\n\n  This kills all jupyter processes on romeo\n\n* `r-jupyter`\n\n  This starts a jupyter lab notebook\n\n  To use it you need to call in a new window after you copy the line with\n  file:// in it\n\n  ```r-port file://....```\n\n  This will establish a connection to the notebook\n\n  Next, you can pates and copy the line with http:// and local host into\n  your browser\n\n### Setup `.bashrc` on juliet\n\nOn juliet you must include the following in your bashrc file\n\n```\nif ! [ \"$HOSTNAME\" = j-login1 ]; then\n    VCUDA=10.1\n    VCUDNN=v7.6.5\n\n    VMODULE=10.1-${VCUDNN}\n    module load cuda/${VCUDA}\n    module load cudnn/${VMODULE}\n    export CUDNN_INCLUDE_DIR=/opt/cudnn-${VCUDA}-linux-x64-${VCUDNN}/cuda/include/\n    export CUDNN_LIB_DIR=/opt/cudnn-${VCUDA}-linux-x64-${VCUDNN}/cuda/lib64/\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-${VCUDA}/extras/CUPTI/lib64\n\nfi\n\n\n\n```\n\n### SSHFS\n\nSometimes it is beneficial to use your local browsers to access files\non romeo. We do this at this time just via juliet and enable sharing\nwith sshfs. This tool is available for many OSes, and you need to install\nit before using it.\n\nGregor has placed the following additional lines in hos. bashrc file on\nhis local computer:\n\n```\nalias j-mount=\"cd ${HOME}/Desktop; sshfs juliet:shared juliet -o auto_cache ; cd ${HOME}/Desktop/juliet\"\nalias j-umount=\"cd ${HOME}/Desktop; umount juliet\"\n\n```\n\nOnce you say j-mount it mounts the dir juliet:~/share to a local\ndirectory ~/Desktop/juliet. As the files on juliet are shared with romeo\nthey are also available there.\n\nIn the terminal you simply can say\n\n```j-mount``` for mount and\n```j-unmount`` for ummounting.\n\n\n\n\n\n### Using Romeo\n\nTo login you can now say\n\n```bash\nr\n```\n\n### Check GPU Availability\n\nTo check the availability of the GPU's say\n\n```bash\nnvidia-smi\n```\n\n### Test Script\n\nTo test if this all works, please copy the following into a notebook  \nand execute\n\n```python\nimport os\nimport warnings\nimport tensorflow as tf\nimport logging\n\nwith warnings.catch_warnings():\n    warnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nlogging.getLogger('tensorflow').setLevel(logging.FATAL)\n\nos.environ[\"TF_CPP_MIN_LOG_LEVEL\"] = \"2\"\n\nif tf.test.is_gpu_available():\n    print(\"------------------------------\")\n    print(\"GPU AVAILABLE\")\n    names = tf.test.gpu_device_name()\n    print(\"------------------------------\")\n    print(\"GPU Device Names\")\n    print(names)\n\n```\n\nThe output of the code looks like\n\n```\n---\nGPU AVAILABLE\n------------------------------\nGPU Device Names\n/device:GPU:0\n```\n\n### GPU Test Code\n\nThis test code may run for a long time, so you may want to interrupt\nit after a while. It will put some load on the CUDA Cards and if you\nuse `nvidia-smi` you will see the load reported.\n\n```\ngit clone git@github.com:vibhatha/mpi4tf.git\npip3 install mpi4tf\ncd mpi4tf\npython3 examples/model_parallel/model_parallel_v2.py\n```\n\nA convenient way to watch the changing load is to use in another\nterminal to use the watch command\n\n```bash\n$ watch -n 5 nvidia-smi\n```\n\nThis will repeat the monitor every 5 seconds. Please make sure you\nkill this program and do not run it continuously as the `nvidia-smi`\nprogram creates unnecessary load if not absolutely needed\n\n\n### Extended GPU Setup On Romeo for Pytorch\n\nUsing Pytorch to do distributed training with MPI backend is\ndocumented here\n\n* <https://github.com/vibhatha/PytorchExamples>\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cloudmesh/cloudmesh-iu",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cloudmesh-iu",
    "package_url": "https://pypi.org/project/cloudmesh-iu/",
    "platform": "",
    "project_url": "https://pypi.org/project/cloudmesh-iu/",
    "project_urls": {
      "Homepage": "https://github.com/cloudmesh/cloudmesh-iu"
    },
    "release_url": "https://pypi.org/project/cloudmesh-iu/4.1.2/",
    "requires_dist": [
      "cloudmesh-configuration",
      "cloudmesh-cmd5",
      "cloudmesh-gui"
    ],
    "requires_python": "",
    "summary": "A command called iu and foo for the cloudmesh shell",
    "version": "4.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7667712,
  "releases": {
    "4.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "557fd0fdf6b674e912f60c48c95a81b188cd9d63ff694c09cc56cf74c4656680",
          "md5": "03c28eae0bf8df90214cd810073595b3",
          "sha256": "399700cf9e1f8000ce585c65f3134cb909df3cc5e1783f041f29bf6d6cc727e3"
        },
        "downloads": -1,
        "filename": "cloudmesh_iu-4.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03c28eae0bf8df90214cd810073595b3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 6362,
        "upload_time": "2019-09-07T14:28:37",
        "upload_time_iso_8601": "2019-09-07T14:28:37.111010Z",
        "url": "https://files.pythonhosted.org/packages/55/7f/d0fdf6b674e912f60c48c95a81b188cd9d63ff694c09cc56cf74c4656680/cloudmesh_iu-4.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce3b595326617fdf8e52b81de8fecf0db91d47f477c1883e22580aab8a6bfcb6",
          "md5": "9c20e74aa7624d8d24f1d97b4b2c8eea",
          "sha256": "374b8d2a4edd23d110977a29beb6956ceeff902ca4e721f9e8ceb0314c168e90"
        },
        "downloads": -1,
        "filename": "cloudmesh-iu-4.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9c20e74aa7624d8d24f1d97b4b2c8eea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4774,
        "upload_time": "2019-09-07T14:28:39",
        "upload_time_iso_8601": "2019-09-07T14:28:39.942702Z",
        "url": "https://files.pythonhosted.org/packages/ce/3b/595326617fdf8e52b81de8fecf0db91d47f477c1883e22580aab8a6bfcb6/cloudmesh-iu-4.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d410d8d5086fead6304de9a3cf2483cbd4dcb57774ae372783853ab2f8bc4609",
          "md5": "aec10ad982c6bb2f82539f05eecaa862",
          "sha256": "dfd8fb254705e902a918b7d7808e4a25810d4866cbff266e49c97f8b799f4a62"
        },
        "downloads": -1,
        "filename": "cloudmesh_iu-4.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aec10ad982c6bb2f82539f05eecaa862",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12431,
        "upload_time": "2020-07-09T17:51:32",
        "upload_time_iso_8601": "2020-07-09T17:51:32.185868Z",
        "url": "https://files.pythonhosted.org/packages/d4/10/d8d5086fead6304de9a3cf2483cbd4dcb57774ae372783853ab2f8bc4609/cloudmesh_iu-4.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bb0c5ff0e561395eb51d95ec9ac64324d717eecf572c5f142e522a5648ab1d7",
          "md5": "3bea692fe14ac130d30aea97c399fe1b",
          "sha256": "d5a3015ac6607ecbc401540e43d67f3013d11d444ad5d04f6453a9ba9d935118"
        },
        "downloads": -1,
        "filename": "cloudmesh-iu-4.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3bea692fe14ac130d30aea97c399fe1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17388,
        "upload_time": "2020-07-09T17:51:33",
        "upload_time_iso_8601": "2020-07-09T17:51:33.357933Z",
        "url": "https://files.pythonhosted.org/packages/5b/b0/c5ff0e561395eb51d95ec9ac64324d717eecf572c5f142e522a5648ab1d7/cloudmesh-iu-4.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d410d8d5086fead6304de9a3cf2483cbd4dcb57774ae372783853ab2f8bc4609",
        "md5": "aec10ad982c6bb2f82539f05eecaa862",
        "sha256": "dfd8fb254705e902a918b7d7808e4a25810d4866cbff266e49c97f8b799f4a62"
      },
      "downloads": -1,
      "filename": "cloudmesh_iu-4.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aec10ad982c6bb2f82539f05eecaa862",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12431,
      "upload_time": "2020-07-09T17:51:32",
      "upload_time_iso_8601": "2020-07-09T17:51:32.185868Z",
      "url": "https://files.pythonhosted.org/packages/d4/10/d8d5086fead6304de9a3cf2483cbd4dcb57774ae372783853ab2f8bc4609/cloudmesh_iu-4.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5bb0c5ff0e561395eb51d95ec9ac64324d717eecf572c5f142e522a5648ab1d7",
        "md5": "3bea692fe14ac130d30aea97c399fe1b",
        "sha256": "d5a3015ac6607ecbc401540e43d67f3013d11d444ad5d04f6453a9ba9d935118"
      },
      "downloads": -1,
      "filename": "cloudmesh-iu-4.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3bea692fe14ac130d30aea97c399fe1b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17388,
      "upload_time": "2020-07-09T17:51:33",
      "upload_time_iso_8601": "2020-07-09T17:51:33.357933Z",
      "url": "https://files.pythonhosted.org/packages/5b/b0/c5ff0e561395eb51d95ec9ac64324d717eecf572c5f142e522a5648ab1d7/cloudmesh-iu-4.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}