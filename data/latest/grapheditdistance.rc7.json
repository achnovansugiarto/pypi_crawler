{
  "info": {
    "author": "José Manuel Gómez Soriano",
    "author_email": "jmgomez.soriano@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# graph-edit-distance\nA set of edit distance edition methods based on graphs.\nThese methods allow to calculate the edition cost of an entity (for example a word or text),\namong a big quantity of terms with less computational cost than the usual methods.\n\nAt the moment, only normal and weighted Levenshtein algorithm are developed,\nbut it is very easy to add new algorithms thanks to the project structure.\n\n# Install\n\n```bash\npip install grapheditdistance\n```\n\n# How to use\n\nAlthough you can use all type of sequences of objects, which are hashable and comparable, with the class\n_Graph_, we are going to use the class _TextGraph_ specially suited for text entities.\nYou can create an edit distance graph with this command:\n\n```python\nfrom grapheditdistance import TextGraph\n\ng = TextGraph()\n```\n\nAnd next to add entities by two different methods: _add()__ to add just one entity,\nand _index()_ to add multiple entities at once.\n\n```python\n# Adding entities individually\ng.add('hi')\ng.add('hello')\n# Adding a sequence of entities\ng.index(['bye', 'goodbye', 'point of sale', 'pointing'])\n```\n\nFinally, you can calculate the edition distance of a new word against all those previously added terms:\n\n```python\n# Search the term with spelling mistakes \"Poimt of sales\"\nresults = g.search('Poimt of sales'.lower(), threshold=0.8, nbest=0)\n# It should return\n[(\n    'point of sale',\n    2.0,\n    '[(None), (None), (None), (replace[m -> n], 1), (None), (None), (None), (None), (None), (None), \\\n    (None), (None), (None), (insert[s], 1), (Final)]'\n)]\n```\nWhere the first element of the tuple is the preprocessed entity, the second is the found entity, \nthe third is the edition distance weight, and the last the list of edition operation applied to change the \npreprocessed query for obtaining the previously indexed one.\nThis method will only return the entities which edition distance is less\nthan the given threshold of 0.8 respect to the length of the original entity. That means, if the original entity\nhas 15 character, the maximum number of errors is 3 (len(entity) * (1 - threshold)). You can limit the number of best\nresults with the parameter _nbest_, 0 for no limit.\n\nIf you want an case insentive algorith, you can use _str.lower()_ or _str.upper(). to preprocess both,\nthe indexed entities and the searched entity. For example:\n\n```python\nfrom grapheditdistance import TextGraph\n\nTERMS = ['hello', 'bye', 'goodbye', 'point of sale', 'pointing']\n\n# This is the same as the default parameter\ng = TextGraph()\ng.index([t.lower() for t in TERMS])\n# Change the preprocess method\nresults = g.search('Poimt of sales'.lower(), threshold=0.8, nbest=0)\nprint(results)\n\n# To use upper case instead lower case\ng = TextGraph()\ng.index([t.upper() for t in TERMS])\n# Change the preprocess method\nresults = g.search('Poimt of sales'.upper(), threshold=0.8, nbest=0)\nprint(results)\n\n# Do not use any entity preprocess\ng = TextGraph()\ng.index(TERMS)\n# Change the preprocess method\nresults = g.search('Poimt of sales', threshold=0.75, nbest=0, )\nprint(results)\n```\n\n# Changing the edit distance algorithm\n\nYou can easily to change the edit distance algorithm by the parameter _distance_.\nFor example, instead of using the basic Levenshtein algorithm, you can use the weighted one, which that, \nyou can define different weights for specific operation with given entity elements:\n\n```python\nfrom grapheditdistance import TextGraph\nfrom grapheditdistance.distances import WeightedLevenshtein\n\nTERMS = ['hello', 'bye', 'goodbye', 'point of sale', 'pointing']\n\nlev = WeightedLevenshtein()\nlev.add_insert_cost(' ', 0.1)\nlev.add_delete_cost(' ', 0.1)\nlev.add_replace_cost(' ', '-', 0.1)\nlev.add_replace_cost('-', ' ', 0.1)\ntree = TextGraph(distance=lev)\ntree.index([t.lower()  for t in TERMS])\nresults = tree.search('Poi ntof-sales'.lower(), nbest=1)\nprint(results)\n```\n\n# Defining your own edit distance algorithm\n\nIn order to define you own algorithm, you only need to create a class from the super class _EditDistance_.\nFor example:\n\n```python\nfrom grapheditdistance.graph import BaseGraph\nfrom grapheditdistance.operators import Operator\nfrom grapheditdistance.distances import EditDistance\nfrom typing import List, Sequence, Hashable\n\nclass MyEditDistanceAlgorithm(EditDistance):\n    def max_cost(self) -> float:\n        \"\"\"\n        :return: The maximum cost.\n        \"\"\"\n        float_value = ...\n        return float_value # The maximum possible cost.\n\n    def costs(self,\n              pos: int,\n              entity: Sequence[Hashable],\n              graph: BaseGraph,\n              curr_node: int,\n              next_node: int,\n              operators: List[Operator]) -> List[Operator]:\n        list_operators = ...\n        return list_operators  # A new list of operators to arrive to next node. \n```\n\nWhere _pos_ is the current position of the entity that we are evaluating; _entity_ is the entity to compare with,\nthe _graph_ with all the system entities to compare against; _curr_node_ is the current node in the graph;\n_next_node_ is the next node we want to jump;\n_operators_ are the list of operators to arrive to the current node.\n\nThe result should be the new operators to explore. For example, if to pass from node X to node Y we need to\nremove the character A, or to add the character B, or replace A by B, we need to return a list of three operators:\n[_DeleteOperator(A)_, _InsertOperator(B)_, _ReplaceOperator(A, B)_]. You can also add the operator _NoneOperator()_ to\nindicate that passing from node X to Y does not require any costly operation, or _FinalOperator()_ to indicate that\nwe have already achieved the final node.\n\nThe available operators are in the package _grapheditdistance.operator_, however, you can define your own operators\nby inheriting from the class _grapheditdistance.operator.Operator_.\n\n# Other examples of use\n\nAt the moment, we have shown text edit distance examples. But, this algorithm can be used with other elements.\n\n## Phonetic symbols\n\nYou can use this algorithm with phonetic distance problems. For example:\n\n```python\nfrom grapheditdistance import Graph\nfrom grapheditdistance.distances import WeightedLevenshtein\n\n# I use Graph() instead TextGraph() but with WeightedLevenshtein\nlev = WeightedLevenshtein()\nlev.add_replace_cost(\"ɛ\", \"ˈɛ\", 0.1)\nlev.add_replace_cost(\"ˈʊ\", \"ʊ\", 0.1)\nlev.add_replace_cost(\"aɪ\", \"ˈaɪ\", 0.1)\ng = Graph(distance=lev)\ng.add([\"h\", \"ˈɛ\", \"l\", \"əʊ\"])\ng.add([\"h\", \"ɛ\", \"l\", \"ə\", \"ʊ\"])\ng.add([\"ɡ\", \"ˈʊ\", \"d\", \"b\", \"ˈaɪ\"])\ng.add([\"p\", \"ˈɔɪ\", \"n\", \"t\", \" \", \"ɒ\", \"v\", \" \", \"s\", \"e\", \"ɪ\", \"l\"])\ng.add([\"p\", \"ˈɔɪ\", \"n\", \"t\", \"ɪ\", \"ŋ\"])\n\n# Search a variant of \"hello\"\nterm = [\"h\", \"ɛ\", \"l\", \"əʊ\"]\nprint(g.search(term))\n# Prints: [(['h', 'ɛ', 'l', 'əʊ'], ['h', 'ˈɛ', 'l', 'əʊ'], 0.1, [(None), (replace[ɛ -> ˈɛ], 0.1), (None), (None), (Final)])]\n```\n\n## Word level\n\nYou can also use this algorithm to use in a sequence of words instead of characters. For example,\nwe can search if an entity exists giving very low cost value to add or remove stopwords:\n\n```python\nfrom grapheditdistance.distances import WeightedLevenshtein\nfrom grapheditdistance import Graph\n\nlev = WeightedLevenshtein()\nlev.add_delete_cost('of', 0.1)\nlev.add_insert_cost('of', 0.1)\ng = Graph(distance=lev)\ng.add(['point', 'of', 'sales'])\ng.add(['pointing'])\ng.add(['reception', 'desk'])\nprint(g.search(['point', 'sales']))\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jmgomezsoriano/graph-edit-distance",
    "keywords": "",
    "license": "LGPL2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grapheditdistance",
    "package_url": "https://pypi.org/project/grapheditdistance/",
    "platform": null,
    "project_url": "https://pypi.org/project/grapheditdistance/",
    "project_urls": {
      "Homepage": "https://github.com/jmgomezsoriano/graph-edit-distance"
    },
    "release_url": "https://pypi.org/project/grapheditdistance/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A edit distance edition based on graphs.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14167247,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "095794556d40150c2bd0a96a6740ca10eeef4bc1846102def019df5b8ebf18f3",
          "md5": "dbece52515ac9633737a72fdb8d16279",
          "sha256": "acccfd056cdbe040b348b57e43ebe0e4531c0514ed5f1dfa1a0ccd7f55995c4b"
        },
        "downloads": -1,
        "filename": "grapheditdistance-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dbece52515ac9633737a72fdb8d16279",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15629,
        "upload_time": "2022-05-20T14:54:44",
        "upload_time_iso_8601": "2022-05-20T14:54:44.148916Z",
        "url": "https://files.pythonhosted.org/packages/09/57/94556d40150c2bd0a96a6740ca10eeef4bc1846102def019df5b8ebf18f3/grapheditdistance-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f05c46a4fb8b234e15dc8bf4da05294073f17fe5b12681ecd83c021b2e103fa",
          "md5": "67d8c8e05379764ed1e830fe5f70d4ad",
          "sha256": "b5e587af7c9225be432f7eba33061b75112511bf499158266e47499acb0af7f4"
        },
        "downloads": -1,
        "filename": "grapheditdistance-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "67d8c8e05379764ed1e830fe5f70d4ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22239,
        "upload_time": "2022-06-13T17:47:24",
        "upload_time_iso_8601": "2022-06-13T17:47:24.898788Z",
        "url": "https://files.pythonhosted.org/packages/9f/05/c46a4fb8b234e15dc8bf4da05294073f17fe5b12681ecd83c021b2e103fa/grapheditdistance-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b54a6df96180a6c9252854d769f2ea6f2b3e2153fcc70bba1d459b2dbdb56b7c",
          "md5": "e40f1ac7917d54f7b55b8acd1b534407",
          "sha256": "4f80ee1458cdc29519639906abb8e13222f4fea3469daa5b15201f8ccab59a56"
        },
        "downloads": -1,
        "filename": "grapheditdistance-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e40f1ac7917d54f7b55b8acd1b534407",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22453,
        "upload_time": "2022-06-14T13:38:48",
        "upload_time_iso_8601": "2022-06-14T13:38:48.923472Z",
        "url": "https://files.pythonhosted.org/packages/b5/4a/6df96180a6c9252854d769f2ea6f2b3e2153fcc70bba1d459b2dbdb56b7c/grapheditdistance-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ef848066bb27ec20bf8f3d594406305ddd38c6ce0f2f2ea56197fa536c7df7a",
          "md5": "f8d0163ce272a7f173103b315f11cdec",
          "sha256": "3f913e96c0a12857ba6b110f103bc1815cfe4451d025445bef40444107be5003"
        },
        "downloads": -1,
        "filename": "grapheditdistance-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f8d0163ce272a7f173103b315f11cdec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22467,
        "upload_time": "2022-06-14T17:35:39",
        "upload_time_iso_8601": "2022-06-14T17:35:39.003470Z",
        "url": "https://files.pythonhosted.org/packages/8e/f8/48066bb27ec20bf8f3d594406305ddd38c6ce0f2f2ea56197fa536c7df7a/grapheditdistance-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "213854eb4c185815265bc65fad7ec6face436cfb6b4d247cd5c1d0b775305bda",
          "md5": "837e779303191218c920fda46d6e3454",
          "sha256": "c1b6382311323733a83f1617912244fcf823935b4d655a7674c5d93e6e49fb2d"
        },
        "downloads": -1,
        "filename": "grapheditdistance-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "837e779303191218c920fda46d6e3454",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23366,
        "upload_time": "2022-06-15T15:52:30",
        "upload_time_iso_8601": "2022-06-15T15:52:30.051580Z",
        "url": "https://files.pythonhosted.org/packages/21/38/54eb4c185815265bc65fad7ec6face436cfb6b4d247cd5c1d0b775305bda/grapheditdistance-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "161a30204011e5080e28681ac5341d7edf8b497453a6526f198666cc43cefba8",
          "md5": "2c3bbd627550d235ff925a0e828299aa",
          "sha256": "6f5351130182041ba1b8ddbc872bf0c0f2565e6c555ffc624e3b931e2c2608c4"
        },
        "downloads": -1,
        "filename": "grapheditdistance-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2c3bbd627550d235ff925a0e828299aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26195,
        "upload_time": "2022-06-17T13:29:11",
        "upload_time_iso_8601": "2022-06-17T13:29:11.350118Z",
        "url": "https://files.pythonhosted.org/packages/16/1a/30204011e5080e28681ac5341d7edf8b497453a6526f198666cc43cefba8/grapheditdistance-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b85e3d131fd04954f97b06b669b5eb6413a020a6ba7bb42c5a26b66d730c3e31",
          "md5": "7e333ab135b244af8e3922e8f1747171",
          "sha256": "942762bdddbc2f50712cf52d747bf2ee3251bea511e20fbdc727918345108cc2"
        },
        "downloads": -1,
        "filename": "grapheditdistance-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e333ab135b244af8e3922e8f1747171",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26281,
        "upload_time": "2022-06-17T21:12:38",
        "upload_time_iso_8601": "2022-06-17T21:12:38.071842Z",
        "url": "https://files.pythonhosted.org/packages/b8/5e/3d131fd04954f97b06b669b5eb6413a020a6ba7bb42c5a26b66d730c3e31/grapheditdistance-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b85e3d131fd04954f97b06b669b5eb6413a020a6ba7bb42c5a26b66d730c3e31",
        "md5": "7e333ab135b244af8e3922e8f1747171",
        "sha256": "942762bdddbc2f50712cf52d747bf2ee3251bea511e20fbdc727918345108cc2"
      },
      "downloads": -1,
      "filename": "grapheditdistance-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7e333ab135b244af8e3922e8f1747171",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 26281,
      "upload_time": "2022-06-17T21:12:38",
      "upload_time_iso_8601": "2022-06-17T21:12:38.071842Z",
      "url": "https://files.pythonhosted.org/packages/b8/5e/3d131fd04954f97b06b669b5eb6413a020a6ba7bb42c5a26b66d730c3e31/grapheditdistance-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}