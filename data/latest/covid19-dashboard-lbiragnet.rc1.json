{
  "info": {
    "author": "Luc Biragnet",
    "author_email": "lucbiragnet@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Welcome to the Covid-19 Dashboard Documentation!\n\n\n\n# Introduction\n\nThis Covid Dashboard Application was developped as part of my coursework for programming. It displays current coronavirus data, such as the number of infections in the past 7 days, the number of hospital cases, etc., as well as up to date news articles from various sources.\n\nThe application is built using Python, and uses Flask to run on a local server. It uses live data from the uk-covid19 API, and NewsAPI for news articles.\n\n\n\n# Prerequisites\n\n\nThe application requires a version of Python that is at least 3.8.0 or above. \n\nCertain packages / modules are also required to be installed:\n * os\n * sched\n * time\n * datetime\n * requests\n * csv\n * json\n * logging\n\nThese can be installed via pip in the command line: ` $ pip install <package> `\n\n\n\n# Installation\n\n\nYou can download the application directly from GitHub, at https://github.com/lbiragnet/covid_dashboard_lbiragnet by clicking \"Download ZIP\" and then extracting the files to the application of your choice.\n\nThe application is also available as a Python package on PyPi. It can be installed using pip in the command line:\n\n``` $ pip install covid19_dashboard_lucbiragnet ```\n\n\n# Getting Started\n\n\n## Configuring the application\n\nOnce the application has been installed, it needs to be configured using your chosen location and API key. These are necessary to extract the correct data from the uk-covid19 api, and to provide access to the news api. You can register for an API key on https://newsapi.org/. This will usually look like a long sequence of different characters. Do not share your API key, as this might lead to you losing access to the news API.\n\nIf you have download the application from GitHub, navigate to the application folder named `covid19_dashboard_lbiragnet` and head over to `\\src\\config` and open `config.json`. This will open the application configuration file.\n\nIf installed using pip, the configuration file will most likely be under a different directory.\n\nEnter your API key in quotation marks in the `API key` section.\n\nThe configuration file can be edited for covid data to correspond to the location of your choice: to do this, enter the name of your chosen city in quotation marks in the `location` section, which is set to `Exeter` by default. The `location type` section can also be modified. The full list of valid metrics for this section can be found in the uk-covid19 api documentation at https://coronavirus.data.gov.uk/details/developers-guide/main-api#methods-get. The `Output Format` section defines which data is requested to the uk-covid19 API. Note that modifying this section will require the source code to be changed in order to process the data accordingly.\n\n\n## Running the application\n\nOnce the application has been configured with your API key and the location of your choice, navigate to the src folder via the command line. To run the application, type:\n\n```$ python -m main```\n\nThe application will be run on a local server, and will be accessible in your browser at the address: http://127.0.0.1:5000/index.\n\nThe dashboard contains an updates section (on the left), a covid data section (in the center), and a news articles section (on the right). The bottom section also allows you to schedule updates for covid data and/or news articles.\n\nNote that the dashboard will retain full functionality as long as it is being run. Exiting or interrupting the command line when the application is running will stop the execution. Any scheduled updates will be deleted.\n\n\n## Covid Data\n\nThe Dashboard provides up-to-date covid data, including the following metrics:\n * The local 7-day infection rate\n * The national 7-day infection rate\n * The national number of hospital cases\n * The national number of cumulative deaths\n\nThese metrics can be modified in the configuration file, but it will also be necessary to change the source code in order to process different metrics, as well as the html code for the dashboard to correctly label the different data.\n\n\n## Scheduling updates\n\nThe dashboard allows you to schedule updates to the covid data and news articles. If no updates have been scheduled, the left side of the dashboard will appear empty. To schedule an update, first enter the name of your update in the designated area. Then, enter the time at which you wish the update to occur in the designated area. You are then able to check three different options:\n * Update Covid data (updates the covid data using the uk covid-19 API)\n * Update news articles (updates the news articles using the newsAPI)\n * Repeat update (repeats the update every 24 hours)\n\nScheduled updates will then be displayed in the left section of the dashboard, and will be labelled using the name given to them by the user.\n\nChecking certain options will schedule the relevant update (covid data or news articles) at the given time, and will repeat every 24 hours if \"Repeat\" is checked. Checking both the \"Update Covid data\" and \"Update news articles\" options will schedule a separate double update (covid data and news articles), which can be repeated. Hence there are three types of updates: covid data updates, news articles updates and double updates. Note that scheduling an update of a certain type at the same time as another of the same type will fail. When scheduling a double update, this applies if an update of any kind has already been scheduled at the same time.\n\n\n## Repeating updates\n\nIf an update has been scheduled as a repeated update, the dashboard will schedule a (repeat) update with the same name as the initial update, 24 hours after the inital update is completed. Note that the dashboard will only generate a single repeated update: this avoids an infinite number of updates from being displayed on the dashboard. However, the repeated update will also repeat itself 24 hours later.\n\n\n## Cancelling updates\n\nUpdates shown in the updates section can be cancelled by clicking the dismiss button. For repeated updates, both the update and its repetition will need to be cancelled in order for the \"repetition\" cycle to be cancelled\n\n\n## Deleting news articles\n\nThe dashboard displays a list of 7 news articles on its right section, each of which contains a title and relevant content. The articles can be individually deleted by clicking the dismiss button. This will add a new article to the list, and this process can be repeated as many times as the number of articles received from the newsAPI (which is very large) if these are not updated, giving the user the possibility to consult multiple articles.\n\n\n## Exiting the application\n\nThe application can be exited by terminating it in the command line (Ctrl + C for Windows), or by closing the command line.\n\n\n\n# Testing\n\nThe application comes with a variety of tests designed to verify that the different modules are functioning correctly. Hence the `tests` folder within the application folder contains tests for multiple functions included in the application modules. The tests are grouped within modules, each containing test functions of one particular module.\n\nRunning the tests requires the `pytest` module, which can be installed using pip. To run the tests, open the command line navigate to the `src` folder within the `covid19-dashboard-lbiragnet` folder:\n\n``` $ cd <path to the application folder>\\covid19-dashboard-lbiragnet\\src ```\n\nThen type:\n\n``` $ python -m pytest ```\n\nAfter a few seconds, the tests will have completed and pytest will return a detailed report describing their outcomes and the potential errors which were encountered.\n\n\n\n# Developer Documentation\n\nThe source code contains 4 Python modules:\n * main.py\n * covid_data_handler.py\n * covid_news_handling.py\n * time_calculations.py\n\nThe source code also includes:\n * A configuration file `config.json` \n * A logging file `app.log`\n * A sample csv data file `nation_2021-10-28.csv`\n * Data files stored in the `datafiles` folder\n * An html template `index.html`\n * A PNG image stored in `\\static\\images`\n * Test files stored in `\\tests`\n * The `__init__.py` file used to package the source code\n\n\n## main module\n\n\nNAME\n\n    main - Main application module\n\nDESCRIPTION\n\n    This module runs a COVID-19 Dashboard application.\n    It contains the main logic of the application.\n    It also defines functions to schedule and remove updates, and add and remove news articles.\n\nFUNCTIONS\n\n    add_news() -> list\n        Adds a news article to the dashboard when one is deleted by the user\n\n        The function goes through the news articles list pulled from the news API.\n        If an article has not been deleted by the user and is not currently displayed,\n        the function then adds it to the list of articles displayed on the dashboard.\n\n    index() -> None\n        Returns the html template as an interactive dashboard on a local server\n\n        The function is triggered when the user accesses the application\n        Updates schedulers are set to run.\n        The function requests arguments from the url when the user interacts with the dashboard.\n        The function schedule/cancels updates and adds/removes articles when prompted by the user.\n        The function returns the html template with data from the APIs at http://127.0.0.1:5000/index\n\n    remove_update(update: dict) -> list\n        Removes an update that is deleted by the user from the list of updates\n\n        The function checks if an update deleted by the user is in the list of updates.\n        If it is in the list, the update is removed from the list.\n        Arguments:\n        | update -- dictionary containing details about an update (an item of the updates list)\n\n    schedule_data_update(data_update_name: str, data_update_time: str, data_update_repeat: str) -> list\n        Schedules a covid data update at a given time\n\n        The function calculates the epoch time of the update given by the user.\n        If there isn't already a covid data update scheduled at the same time,\n        The planned update is added to the updates list and dictionary,\n        And a scheduled event is added to the covid data updates scheduler.\n        The function returns both the updates list and the covid data updates list.\n        Arguments:\n        | data_update_name -- the name of the update given by the user\n        | data_update_time -- the time of the update given by the user\n        | data_update_repeat -- set to \"repeat\" if the update is to be repeated\n\n    schedule_double_updates(update_name: str, update_time: str, update_repeat: str) -> list\n        Schedules a double (news and covid data) update at a given time\n\n        The function calculates the epoch time of the update given by the user.\n        If there isn't already a double update scheduled at the same time,\n        The planned update is added to the updates list and dictionary,\n        And a scheduled event is added to the double updates scheduler.\n        The function returns both the updates list and the double updates list.\n        Arguments:\n        | update_name -- the name of the update given by the user\n        | update_time -- the time of the update given by the user\n        | update_repeat -- set to \"repeat\" if the update is to be repeated\n\n    schedule_news_update(news_update_name: str, news_update_time: str, news_update_repeat: str) -> list\n        Schedules a news update at a given time\n\n        The function calculates the epoch time of the update given by the user.\n        If there isn't already a news update scheduled at the same time,\n        The planned update is added to the updates list and dictionary,\n        And a scheduled event is added to the news updates scheduler.\n        The function returns both the updates list and the news updates list.\n        Arguments:\n        | news_update_name -- the name of the update given by the user\n        | news_update_time -- the time of the update given by the user\n        | news_update_repeat -- set to \"repeat\" if the update is to be repeated\n\n    update_covid_data()\n        Updates covid data\n\n        The function requests updated data from the covid-19 API.\n        Variables containing the current covid data are redefined to update the data.\n\n    update_data_and_news() -> None\n        Combines the update_covid_data and update_news_articles functions into one function\n\n    update_news_articles() -> list\n        Updates news articles\n\n        The function requests updated news articles from the news API.\n        The news variable displaying the articles is redefined to update the articles.\n\nDATA\n\n    CANCELED_DATA_UPDATES = []\n\n    CANCELED_DOUBLE_UPDATES = []\n\n    CANCELED_NEWS_UPDATES = []\n\n    DATA_UPDATE_SCHEDULER = <sched.scheduler object>\n\n    DOUBLE_UPDATE_SCHEDULER = <sched.scheduler object>\n\n    NEWS_UPDATE_SCHEDULER = <sched.scheduler object>\n\n    SCHEDULED_DATA_UPDATES = []\n\n    SCHEDULED_DOUBLE_UPDATES = []\n\n    SCHEDULED_NEWS_UPDATES = []\n\n    UPDATES_DICT = {}\n\n    UPDATES_LIST = []\n\n    app = <Flask 'main'>\n\n    request = <LocalProxy unbound>\n\n\n## covid_data_handler module\n\nNAME\n\n    covid_data_handler - This module handles the covid data section of the dashboard\n\nFUNCTIONS\n\n    covid_API_request(location: str = 'Exeter', location_type: str = 'ltla') -> <module 'json' from 'C:\\\\Users\\\\luc biragnet\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\json\\\\__init__.py'>\n        Retrieve live covid data from the uk covid-19 API\n\n        The function requests data from the covid-19 API using the given arguments\n        The response is returned in the json format\n        Arguments:\n        | location -- the location given by the user\n        | location_type -- the location type given by the user\n\n    get_covid_data() -> <module 'json' from 'C:\\\\Users\\\\luc biragnet\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\json\\\\__init__.py'>\n        Retrieve live covid data from the uk covid-19 API\n\n        The function requests data from the covid-19 API the filters and structure arguments.\n        These can be modified by the user from the configuration file.\n        The function makes a request for local data and another for national data.\n        Both responses are then returned in the json format.\n\n    parse_csv_data(csv_filename: str) -> list\n        Return the data from the csv file as a list\n\n        csv_filename is a csv file\n        The function turns the data from this file into a list\n        Each item of the list is a list, the first of which specifies how the data is formatted.\n        Each further item corresponds to a particular day (following the most recent order)\n\n    process_covid_csv_data(covid_csv_data: list) -> int\n        Process the parsed covid csv data to return basic data to the user\n\n        The function returns the number of cases in the past 7 days,\n        The number of hospital cases, and the number of cumulative deaths\n        Arguments:\n        | covid_csv_data -- list containing the covid data as would be returned by parse_csv_data\n\n    process_live_covid_data(local_data: dict, national_data: dict) -> int\n        Process live covid data to return basic data to the user\n\n        The function calculates the number of local cases in the past 7 days.\n        The function calculates the number of national cases in the past 7 days.\n        The function retrieves the most recent number of nationwide hospital cases.\n        The function retrieves the most recent number of nationwide cumulative deaths.\n        The function returns these numbers.\n        Arguments:\n        | local_data -- local data in json format as returned by the get_covid_data function\n        | national_data -- national data in json format as returned by the get_covid_data function\n\n    schedule_covid_updates(update_interval: str, update_name: str)\n        Schedule a covid data update\n        The function creates a scheduler object.\n        An event is added at a given time interval, to update the data.\n        The function returns the name of the update, and the time interval at which it is scheduled\n        Arguments:\n        | update_interval -- the interval time of the update as given by the user\n        | update_name -- the name of the scheduled update as given by the user\n\n    update_data() -> <module 'json' from 'C:\\\\Users\\\\luc biragnet\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\json\\\\__init__.py'>\n        Update covid data for a scheduled update\n\n        The function uses the covid_API_request function to update the data.\n\nDATA\n\n    CONFIG_DATA = {'Covid Data Configuration': {'Location': 'Exeter', 'Loc...\n\n    COVID_DATA_FILTERS = ['areaType=ltla', 'areaName=Exeter']\n\n    OUTPUT_FORMAT = {'areaCode': 'areaCode', 'areaName': 'areaName', 'cumC...\n\n    config_file = <_io.TextIOWrapper name='./config/config.json' mode='r' ...\n\n\n## covid_news_handling module\n\nNAME\n\n    covid_news_handling - This module handles the news articles section of the dashboard\n\nFUNCTIONS\n\n    news_API_request(covid_terms: str = 'Covid COVID-19 coronavirus') -> dict\n        Request news articles from the news api in the json format\n\n        The covid_terms argument is formatted for the API request: <term> OR <term> OR <term>...\n        The function requests news articles whose titles include relevant terms as given in the argument\n        The articles are sorted by popularity and are at most from the previous day\n        The response is returned in the json format.\n        Arguments:\n        | covid_terms -- terms to look for in article titles when retrieving articles from the API\n\n    select_articles(news_dict_list: dict) -> list\n        Select a limited number of articles which have not been deleted by the user\n\n        The function returns a list of 7 articles from the API response returned by news_API_request\n        It is also executed when the page is refreshed, allowing the removal of deleted articles.\n        Arguments:\n        | news_dict_list -- list of dictionaries (news articles), as returned by news_API_request\n\n    update_news(article) -> list\n        Updates news articles\n\n        The function adds a news article to the list of current articles\n        The list of updated articles is returned.\n\nDATA\n\n    API_KEY = ''\n\n    CONFIG_NEWS = {'Covid Data Configuration': {'Location': 'Exeter', 'Loc...\n\n    config_file = <_io.TextIOWrapper name='./config/config.json' mode='r' ...\n\n    news_articles = []\n\n\n## time_calculations module\n\n\nNAME\n\n    time_calculations - This module includes functions used for calculations including time\n\nFUNCTIONS\n\n    calc_update_epoch_interval(update_time_hhmm: str) -> float\n        Calculate interval between current epoch time and update epoch time\n\n    calc_update_interval(update_time_hhmm: str) -> int\n        Calculates interval in seconds between current time and scheduled time for an update\n\n    current_time_hhmm() -> str\n        Returns local time in the HH:MM format\n\n    hhmm_to_seconds(hhmm: str) -> int\n        Converts time in the HH:MM format to seconds\n\n    hours_to_minutes(hours: str) -> int\n        Converts hours to minutes\n\n    minutes_to_seconds(minutes: str) -> int\n        Converts minutes to seconds\n\n\n\n# Details\n\n\n## Authors\n\n * Luc Biragnet (Python)\n * Matt Collison (HTML/Flask template)\n\n\n## License\n\nCopyright (c) [2021] [Luc Biragnet]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n## Acknowledgements\n\nI would like to thank Matt Collison for his guidance and help throughout the project!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lbiragnet/covid_dashboard_lbiragnet",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "covid19-dashboard-lbiragnet",
    "package_url": "https://pypi.org/project/covid19-dashboard-lbiragnet/",
    "platform": "",
    "project_url": "https://pypi.org/project/covid19-dashboard-lbiragnet/",
    "project_urls": {
      "Homepage": "https://github.com/lbiragnet/covid_dashboard_lbiragnet"
    },
    "release_url": "https://pypi.org/project/covid19-dashboard-lbiragnet/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Covid-19 dashboard with access to live data and news articles",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12254772,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ace4415830c03f23145984064566fdb2a23300cda7f9b0bfe20fe9f45352764",
          "md5": "772757afe7fc285f30661cc544e691bd",
          "sha256": "4242b68e460adfc60c584ef5d4eca248863aae6d3519a4ddaad1c52e7d21a010"
        },
        "downloads": -1,
        "filename": "covid19_dashboard_lbiragnet-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "772757afe7fc285f30661cc544e691bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8462,
        "upload_time": "2021-12-09T11:37:45",
        "upload_time_iso_8601": "2021-12-09T11:37:45.888643Z",
        "url": "https://files.pythonhosted.org/packages/0a/ce/4415830c03f23145984064566fdb2a23300cda7f9b0bfe20fe9f45352764/covid19_dashboard_lbiragnet-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "105b9eeb706160dcc72273cad7b596a90ed20d39abca67b14601ea3b5adb02d6",
          "md5": "c9e93c9f7fab568d9170c6c6b8daed80",
          "sha256": "456abd0f51ab1399857d52e0cc8137553dc5f7a828937bd665e86dad71fce4bb"
        },
        "downloads": -1,
        "filename": "covid19_dashboard_lbiragnet-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c9e93c9f7fab568d9170c6c6b8daed80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8428,
        "upload_time": "2021-12-09T11:37:47",
        "upload_time_iso_8601": "2021-12-09T11:37:47.225486Z",
        "url": "https://files.pythonhosted.org/packages/10/5b/9eeb706160dcc72273cad7b596a90ed20d39abca67b14601ea3b5adb02d6/covid19_dashboard_lbiragnet-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ace4415830c03f23145984064566fdb2a23300cda7f9b0bfe20fe9f45352764",
        "md5": "772757afe7fc285f30661cc544e691bd",
        "sha256": "4242b68e460adfc60c584ef5d4eca248863aae6d3519a4ddaad1c52e7d21a010"
      },
      "downloads": -1,
      "filename": "covid19_dashboard_lbiragnet-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "772757afe7fc285f30661cc544e691bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 8462,
      "upload_time": "2021-12-09T11:37:45",
      "upload_time_iso_8601": "2021-12-09T11:37:45.888643Z",
      "url": "https://files.pythonhosted.org/packages/0a/ce/4415830c03f23145984064566fdb2a23300cda7f9b0bfe20fe9f45352764/covid19_dashboard_lbiragnet-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "105b9eeb706160dcc72273cad7b596a90ed20d39abca67b14601ea3b5adb02d6",
        "md5": "c9e93c9f7fab568d9170c6c6b8daed80",
        "sha256": "456abd0f51ab1399857d52e0cc8137553dc5f7a828937bd665e86dad71fce4bb"
      },
      "downloads": -1,
      "filename": "covid19_dashboard_lbiragnet-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c9e93c9f7fab568d9170c6c6b8daed80",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8428,
      "upload_time": "2021-12-09T11:37:47",
      "upload_time_iso_8601": "2021-12-09T11:37:47.225486Z",
      "url": "https://files.pythonhosted.org/packages/10/5b/9eeb706160dcc72273cad7b596a90ed20d39abca67b14601ea3b5adb02d6/covid19_dashboard_lbiragnet-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}