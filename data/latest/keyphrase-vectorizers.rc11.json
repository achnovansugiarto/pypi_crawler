{
  "info": {
    "author": "Tim Schopf",
    "author_email": "tim.schopf@t-online.de.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "[![PyPI - Python](https://img.shields.io/badge/python-%3E%3D3.7-blue)](https://pypi.org/project/keyphrase-vectorizers/)\n[![License](https://img.shields.io/badge/License-BSD_3--Clause-green.svg)](https://github.com/TimSchopf/Keyphrase_Vectorizers/blob/master/LICENSE)\n[![PyPI - PyPi](https://img.shields.io/pypi/v/keyphrase-vectorizers.svg)](https://pypi.org/project/keyphrase-vectorizers/)\n[![Build](https://img.shields.io/github/actions/workflow/status/TimSchopf/KeyphraseVectorizers/testing.yml?branch=master)](https://pypi.org/project/keyphrase-vectorizers/)\n[![Documentation Status](https://readthedocs.org/projects/keyphrase-vectorizers/badge/?version=latest)](https://keyphrase-vectorizers.readthedocs.io/en/latest/?badge=latest)\n[![DOI:10.5220/0011546600003335](https://zenodo.org/badge/DOI/10.5220/0011546600003335.svg)](https://doi.org/10.5220/0011546600003335)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patternrank-leveraging-pretrained-language/keyphrase-extraction-on-inspec)](https://paperswithcode.com/sota/keyphrase-extraction-on-inspec?p=patternrank-leveraging-pretrained-language)\n\nKeyphraseVectorizers\n===================== \n\n**This package was developed during the writing of our PatternRank paper. You can check out the paper [here](https://arxiv.org/abs/2210.05245). When using KeyphraseVectorizers or PatternRank in academic papers and theses, please use the [BibTeX entry below](#citation-information).**\n\nSet of vectorizers that extract keyphrases with part-of-speech patterns from a collection of text documents and convert\nthem into a document-keyphrase matrix. A document-keyphrase matrix is a mathematical matrix that describes the frequency\nof keyphrases that occur in a collection of documents. The matrix rows indicate the text documents and columns indicate\nthe unique keyphrases.\n\nThe package contains wrappers of the\n[sklearn.feature_extraction.text.CountVectorizer](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html?highlight=countvectorizer#sklearn.feature_extraction.text.CountVectorizer \"scikit-learn CountVectorizer\")\nand\n[sklearn.feature_extraction.text.TfidfVectorizer](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html#sklearn.feature_extraction.text.TfidfVectorizer \"scikit-learn TfidfVectorizer\")\nclasses. Instead of using n-gram tokens of a pre-defined range, these classes extract keyphrases from text documents\nusing part-of-speech tags to compute document-keyphrase matrices.\n\nCorresponding medium posts can be found [here](https://towardsdatascience.com/enhancing-keybert-keyword-extraction-results-with-keyphrasevectorizers-3796fa93f4db \"Keyphrase Extraction with BERT Transformers and Noun Phrases\") and [here](https://towardsdatascience.com/unsupervised-keyphrase-extraction-with-patternrank-28ec3ca737f0 \"Unsupervised Keyphrase Extraction with PatternRank\").\n\nBenefits\n--------\n\n* Extract grammatically accurate keyphases based on their part-of-speech tags.\n* No need to specify n-gram ranges.\n* Get document-keyphrase matrices.\n* Multiple language support.\n* User-defined part-of-speech patterns for keyphrase extraction possible.\n\n<a name=\"toc\"/></a>\n\nTable of Contents\n-----------------\n\n<!--ts-->\n\n1. [How does it work?](#how-does-it-work)\n2. [Installation](#installation)\n3. [Usage](#usage)\n   1. [KeyphraseCountVectorizer](#keyphrasecountvectorizer)\n      1. [English language](#english-language)\n      2. [Other languages](#other-languages)\n   2. [KeyphraseTfidfVectorizer](#keyphrasetfidfvectorizer)\n   3. [Reuse a spaCy Language object](#reuse-a-spacy-language-object)\n   4. [Custom POS-tagger](#custom-pos-tagger)\n   5. [PatternRank: Keyphrase extraction with KeyphraseVectorizers and KeyBERT](#patternrank-keyphrase-extraction-with-keyphrasevectorizers-and-keybert)\n   6. [Topic modeling with BERTopic and KeyphraseVectorizers](#topic-modeling-with-bertopic-and-keyphrasevectorizers)\n4. [Citation information](#citation-information)\n\n<!--te-->\n\n<a name=\"#how-does-it-work\"/></a>\n\nHow does it work?\n-----------------\n\nFirst, the document texts are annotated with [spaCy](https://spacy.io \"spaCy homepage\") part-of-speech tags. A list of\nall possible spaCy part-of-speech tags for different languages is\nlinked [here](https://github.com/explosion/spaCy/blob/master/spacy/glossary.py \"spaCy POS tags\"). The annotation\nrequires passing the [spaCy pipeline](https://spacy.io/models \"available spaCy pipelines\") of the corresponding language\nto the vectorizer with the `spacy_pipeline` parameter.\n\nSecond, words are extracted from the document texts whose part-of-speech tags match the regex pattern defined in\nthe `pos_pattern`\nparameter. The keyphrases are a list of unique words extracted from text documents by this method.\n\nFinally, the vectorizers calculate document-keyphrase matrices.\n\n<a name=\"#installation\"/></a>\n\nInstallation\n------------\n\n```\npip install keyphrase-vectorizers\n```\n\n<a name=\"#usage\"/></a>\n\nUsage\n-----\nFor detailed information visit\nthe [API Guide](https://keyphrase-vectorizers.readthedocs.io/en/latest/index.html \"Keyphrase_Vectorizers API Guide\").\n\n<a name=\"#keyphrasecountvectorizer\"/></a>\n\n### KeyphraseCountVectorizer\n\n[Back to Table of Contents](#toc)\n\n<a name=\"#english-language\"/></a>\n\n#### English language\n\n```python\nfrom keyphrase_vectorizers import KeyphraseCountVectorizer\n\ndocs = [\"\"\"Supervised learning is the machine learning task of learning a function that\n         maps an input to an output based on example input-output pairs. It infers a\n         function from labeled training data consisting of a set of training examples.\n         In supervised learning, each example is a pair consisting of an input object\n         (typically a vector) and a desired output value (also called the supervisory signal). \n         A supervised learning algorithm analyzes the training data and produces an inferred function, \n         which can be used for mapping new examples. An optimal scenario will allow for the \n         algorithm to correctly determine the class labels for unseen instances. This requires \n         the learning algorithm to generalize from the training data to unseen situations in a \n         'reasonable' way (see inductive bias).\"\"\", \n             \n        \"\"\"Keywords are defined as phrases that capture the main topics discussed in a document. \n        As they offer a brief yet precise summary of document content, they can be utilized for various applications. \n        In an information retrieval environment, they serve as an indication of document relevance for users, as the list \n        of keywords can quickly help to determine whether a given document is relevant to their interest. \n        As keywords reflect a document's main topics, they can be utilized to classify documents into groups \n        by measuring the overlap between the keywords assigned to them. Keywords are also used proactively \n        in information retrieval.\"\"\"]\n        \n# Init default vectorizer.\nvectorizer = KeyphraseCountVectorizer()\n\n# Print parameters\nprint(vectorizer.get_params())\n>>> {'binary': False, 'dtype': <class 'numpy.int64'>, 'lowercase': True, 'max_df': None, 'min_df': None, 'pos_pattern': '<J.*>*<N.*>+', 'spacy_exclude': None, 'spacy_pipeline': 'en_core_web_sm', 'stop_words': 'english', 'workers': 1}\n```\n\nBy default, the vectorizer is initialized for the English language. That means, an English `spacy_pipeline` is\nspecified, English `stop_words` are removed, and the `pos_pattern` extracts keywords that have 0 or more adjectives,\nfollowed by 1 or more nouns using the English spaCy part-of-speech tags.\n\n```python\n# After initializing the vectorizer, it can be fitted\n# to learn the keyphrases from the text documents.\nvectorizer.fit(docs)\n```\n\n```python\n# After learning the keyphrases, they can be returned.\nkeyphrases = vectorizer.get_feature_names_out()\n\nprint(keyphrases)\n>>> ['users' 'main topics' 'learning algorithm' 'overlap' 'documents' 'output'\n 'keywords' 'precise summary' 'new examples' 'training data' 'input'\n 'document content' 'training examples' 'unseen instances'\n 'optimal scenario' 'document' 'task' 'supervised learning algorithm'\n 'example' 'interest' 'function' 'example input' 'various applications'\n 'unseen situations' 'phrases' 'indication' 'inductive bias'\n 'supervisory signal' 'document relevance' 'information retrieval' 'set'\n 'input object' 'groups' 'output value' 'list' 'learning' 'output pairs'\n 'pair' 'class labels' 'supervised learning' 'machine'\n 'information retrieval environment' 'algorithm' 'vector' 'way']\n```\n\n```python\n# After fitting, the vectorizer can transform the documents \n# to a document-keyphrase matrix.\n# Matrix rows indicate the documents and columns indicate the unique keyphrases.\n# Each cell represents the count.\ndocument_keyphrase_matrix = vectorizer.transform(docs).toarray()\n\nprint(document_keyphrase_matrix)\n>>> [[0 0 2 0 0 3 0 0 1 3 3 0 1 1 1 0 1 1 2 0 3 1 0 1 0 0 1 1 0 0 1 1 0 1 0 6\n  1 1 1 3 1 0 3 1 1]\n [1 2 0 1 1 0 5 1 0 0 0 1 0 0 0 5 0 0 0 1 0 0 1 0 1 1 0 0 1 2 0 0 1 0 1 0\n  0 0 0 0 0 1 0 0 0]]\n```\n\n```python\n# Fit and transform can also be executed in one step, \n# which is more efficient. \ndocument_keyphrase_matrix = vectorizer.fit_transform(docs).toarray()\n\nprint(document_keyphrase_matrix)\n>>> [[0 0 2 0 0 3 0 0 1 3 3 0 1 1 1 0 1 1 2 0 3 1 0 1 0 0 1 1 0 0 1 1 0 1 0 6\n  1 1 1 3 1 0 3 1 1]\n [1 2 0 1 1 0 5 1 0 0 0 1 0 0 0 5 0 0 0 1 0 0 1 0 1 1 0 0 1 2 0 0 1 0 1 0\n  0 0 0 0 0 1 0 0 0]]\n```\n\n<a name=\"#other-languages\"/></a>\n\n#### Other languages\n\n[Back to Table of Contents](#toc)\n\n```python\ngerman_docs = [\"\"\"Goethe stammte aus einer angesehenen bürgerlichen Familie. \n                Sein Großvater mütterlicherseits war als Stadtschultheiß höchster Justizbeamter der Stadt Frankfurt, \n                sein Vater Doktor der Rechte und Kaiserlicher Rat. Er und seine Schwester Cornelia erfuhren eine aufwendige \n                Ausbildung durch Hauslehrer. Dem Wunsch seines Vaters folgend, studierte Goethe in Leipzig und Straßburg \n                Rechtswissenschaft und war danach als Advokat in Wetzlar und Frankfurt tätig. \n                Gleichzeitig folgte er seiner Neigung zur Dichtkunst.\"\"\",\n              \n               \"\"\"Friedrich Schiller wurde als zweites Kind des Offiziers, Wundarztes und Leiters der Hofgärtnerei in \n               Marbach am Neckar Johann Kaspar Schiller und dessen Ehefrau Elisabetha Dorothea Schiller, geb. Kodweiß, \n               die Tochter eines Wirtes und Bäckers war, 1759 in Marbach am Neckar geboren\n               \"\"\"]\n# Init vectorizer for the german language\nvectorizer = KeyphraseCountVectorizer(spacy_pipeline='de_core_news_sm', pos_pattern='<ADJ.*>*<N.*>+', stop_words='german')\n```\n\nThe German `spacy_pipeline` is specified and German `stop_words` are removed. Because the German spaCy part-of-speech\ntags differ from the English ones, the `pos_pattern` parameter is also customized. The regex pattern `<ADJ.*>*<N.*>+`\nextracts keywords that have 0 or more adjectives, followed by 1 or more nouns using the German spaCy part-of-speech\ntags.\n\n<a name=\"#keyphrasetfidfvectorizer\"/></a>\n\n### KeyphraseTfidfVectorizer\n\n[Back to Table of Contents](#toc)\n\nThe `KeyphraseTfidfVectorizer` has the same function calls and features as the `KeyphraseCountVectorizer`. The only\ndifference is, that document-keyphrase matrix cells represent tf or tf-idf values, depending on the parameter settings,\ninstead of counts.\n\n```python\nfrom keyphrase_vectorizers import KeyphraseTfidfVectorizer\n\ndocs = [\"\"\"Supervised learning is the machine learning task of learning a function that\n         maps an input to an output based on example input-output pairs. It infers a\n         function from labeled training data consisting of a set of training examples.\n         In supervised learning, each example is a pair consisting of an input object\n         (typically a vector) and a desired output value (also called the supervisory signal). \n         A supervised learning algorithm analyzes the training data and produces an inferred function, \n         which can be used for mapping new examples. An optimal scenario will allow for the \n         algorithm to correctly determine the class labels for unseen instances. This requires \n         the learning algorithm to generalize from the training data to unseen situations in a \n         'reasonable' way (see inductive bias).\"\"\", \n             \n        \"\"\"Keywords are defined as phrases that capture the main topics discussed in a document. \n        As they offer a brief yet precise summary of document content, they can be utilized for various applications. \n        In an information retrieval environment, they serve as an indication of document relevance for users, as the list \n        of keywords can quickly help to determine whether a given document is relevant to their interest. \n        As keywords reflect a document's main topics, they can be utilized to classify documents into groups \n        by measuring the overlap between the keywords assigned to them. Keywords are also used proactively \n        in information retrieval.\"\"\"]\n        \n# Init default vectorizer for the English language that computes tf-idf values\nvectorizer = KeyphraseTfidfVectorizer()\n\n# Print parameters\nprint(vectorizer.get_params())\n>>> {'binary': False, 'dtype': <class 'numpy.float64'>, 'lowercase': True, 'max_df': None, 'min_df': None, 'norm': 'l2', 'pos_pattern': '<J.*>*<N.*>+', 'smooth_idf': True, 'spacy_pipeline': 'en_core_web_sm', 'stop_words': 'english', 'sublinear_tf': False, 'use_idf': True, 'workers': 1}\n```\n\nTo calculate tf values instead, set `use_idf=False`.\n\n```python\n# Fit and transform to document-keyphrase matrix.\ndocument_keyphrase_matrix = vectorizer.fit_transform(docs).toarray()\n\nprint(document_keyphrase_matrix)\n>>> [[0.         0.         0.09245003 0.09245003 0.09245003 0.09245003\n  0.2773501  0.09245003 0.2773501  0.2773501  0.09245003 0.\n  0.         0.09245003 0.         0.2773501  0.09245003 0.09245003\n  0.         0.09245003 0.09245003 0.09245003 0.09245003 0.09245003\n  0.5547002  0.         0.         0.09245003 0.09245003 0.\n  0.2773501  0.18490007 0.09245003 0.         0.2773501  0.\n  0.         0.09245003 0.         0.09245003 0.         0.\n  0.         0.18490007 0.        ]\n [0.11867817 0.11867817 0.         0.         0.         0.\n  0.         0.         0.         0.         0.         0.11867817\n  0.11867817 0.         0.11867817 0.         0.         0.\n  0.11867817 0.         0.         0.         0.         0.\n  0.         0.11867817 0.23735633 0.         0.         0.11867817\n  0.         0.         0.         0.23735633 0.         0.11867817\n  0.11867817 0.         0.59339083 0.         0.11867817 0.11867817\n  0.11867817 0.         0.59339083]]\n```\n\n```python\n# Return keyphrases\nkeyphrases = vectorizer.get_feature_names_out()\n\nprint(keyphrases)\n>>> ['various applications' 'list' 'task' 'supervisory signal'\n 'inductive bias' 'supervised learning algorithm' 'supervised learning'\n 'example input' 'input' 'algorithm' 'set' 'precise summary' 'documents'\n 'input object' 'interest' 'function' 'class labels' 'machine'\n 'document content' 'output pairs' 'new examples' 'unseen situations'\n 'vector' 'output value' 'learning' 'document relevance' 'main topics'\n 'pair' 'training examples' 'information retrieval environment'\n 'training data' 'example' 'optimal scenario' 'information retrieval'\n 'output' 'groups' 'indication' 'unseen instances' 'keywords' 'way'\n 'phrases' 'overlap' 'users' 'learning algorithm' 'document']\n```\n\n<a name=\"#reuse-a-spacy-language-object\"/></a>\n\n### Reuse a spaCy Language object\n\n[Back to Table of Contents](#toc)\n\nKeyphraseVectorizers loads a `spacy.Language` object for every `KeyphraseVectorizer` object.\nWhen using multiple `KeyphraseVectorizer` objects, it is more efficient to load the `spacy.Language` object beforehand and pass it as the `spacy_pipeline` argument.\n\n```python\nimport spacy\nfrom keyphrase_vectorizers import KeyphraseCountVectorizer, KeyphraseTfidfVectorizer\n\ndocs = [\"\"\"Supervised learning is the machine learning task of learning a function that\n         maps an input to an output based on example input-output pairs. It infers a\n         function from labeled training data consisting of a set of training examples.\n         In supervised learning, each example is a pair consisting of an input object\n         (typically a vector) and a desired output value (also called the supervisory signal). \n         A supervised learning algorithm analyzes the training data and produces an inferred function, \n         which can be used for mapping new examples. An optimal scenario will allow for the \n         algorithm to correctly determine the class labels for unseen instances. This requires \n         the learning algorithm to generalize from the training data to unseen situations in a \n         'reasonable' way (see inductive bias).\"\"\", \n             \n        \"\"\"Keywords are defined as phrases that capture the main topics discussed in a document. \n        As they offer a brief yet precise summary of document content, they can be utilized for various applications. \n        In an information retrieval environment, they serve as an indication of document relevance for users, as the list \n        of keywords can quickly help to determine whether a given document is relevant to their interest. \n        As keywords reflect a document's main topics, they can be utilized to classify documents into groups \n        by measuring the overlap between the keywords assigned to them. Keywords are also used proactively \n        in information retrieval.\"\"\"]\n\nnlp = spacy.load(\"en_core_web_sm\")\n\nvectorizer1 = KeyphraseCountVectorizer(spacy_pipeline=nlp)\nvectorizer2 = KeyphraseTfidfVectorizer(spacy_pipeline=nlp)\n\n# the following calls use the nlp object\nvectorizer1.fit(docs)\nvectorizer2.fit(docs)\n```\n\n<a name=\"##custom-pos-tagger\"/></a>\n\n### Custom POS-tagger\n\n[Back to Table of Contents](#toc)\n\nTo use a different part-of-speech tagger than the ones provided by spaCy, a custom POS-tagger function can be defined and passed to the KeyphraseVectorizers via the `custom_pos_tagger` parameter. This parameter expects a callable function which in turn needs to expect a list of strings in a 'raw_documents' parameter and has to return a list of (word token, POS-tag) tuples. If this parameter is not None, the custom tagger function is used to tag words with parts-of-speech, while the spaCy pipeline is ignored.\n\n#### Example using [flair](https://github.com/flairNLP/flair \"flair GitHub\"):\n\nFlair can be installed via `pip install flair`.\n\n```python\nfrom typing import List\nimport flair\nfrom flair.models import SequenceTagger\nfrom flair.tokenization import SegtokSentenceSplitter\n\n\ndocs = [\"\"\"Supervised learning is the machine learning task of learning a function that\n         maps an input to an output based on example input-output pairs. It infers a\n         function from labeled training data consisting of a set of training examples.\n         In supervised learning, each example is a pair consisting of an input object\n         (typically a vector) and a desired output value (also called the supervisory signal). \n         A supervised learning algorithm analyzes the training data and produces an inferred function, \n         which can be used for mapping new examples. An optimal scenario will allow for the \n         algorithm to correctly determine the class labels for unseen instances. This requires \n         the learning algorithm to generalize from the training data to unseen situations in a \n         'reasonable' way (see inductive bias).\"\"\", \n             \n        \"\"\"Keywords are defined as phrases that capture the main topics discussed in a document. \n        As they offer a brief yet precise summary of document content, they can be utilized for various applications. \n        In an information retrieval environment, they serve as an indication of document relevance for users, as the list \n        of keywords can quickly help to determine whether a given document is relevant to their interest. \n        As keywords reflect a document's main topics, they can be utilized to classify documents into groups \n        by measuring the overlap between the keywords assigned to them. Keywords are also used proactively \n        in information retrieval.\"\"\"]\n\n# define flair POS-tagger and splitter\ntagger = SequenceTagger.load('pos')\nsplitter = SegtokSentenceSplitter()\n\n# define custom POS-tagger function using flair\ndef custom_pos_tagger(raw_documents: List[str], tagger: flair.models.SequenceTagger = tagger, splitter: flair.tokenization.SegtokSentenceSplitter = splitter)->List[tuple]:\n    \"\"\"\n    Important: \n\n    The mandatory 'raw_documents' parameter can NOT be named differently and has to expect a list of strings. \n    Any other parameter of the custom POS-tagger function can be arbitrarily defined, depending on the respective use case. \n    Furthermore the function has to return a list of (word token, POS-tag) tuples.\n    \"\"\" \n    # split texts into sentences\n    sentences = []\n    for doc in raw_documents:\n        sentences.extend(splitter.split(doc))\n\n    # predict POS tags\n    tagger.predict(sentences)\n\n    # iterate through sentences to get word tokens and predicted POS-tags\n    pos_tags = []\n    words = []\n    for sentence in sentences:\n        pos_tags.extend([label.value for label in sentence.get_labels('pos')])\n        words.extend([word.text for word in sentence])\n    \n    return list(zip(words, pos_tags))\n\n\n# check that the custom POS-tagger function returns a list of (word token, POS-tag) tuples\nprint(custom_pos_tagger(raw_documents=docs))\n\n>>> [('Supervised', 'VBN'), ('learning', 'NN'), ('is', 'VBZ'), ('the', 'DT'), ('machine', 'NN'), ('learning', 'VBG'), ('task', 'NN'), ('of', 'IN'), ('learning', 'VBG'), ('a', 'DT'), ('function', 'NN'), ('that', 'WDT'), ('maps', 'VBZ'), ('an', 'DT'), ('input', 'NN'), ('to', 'IN'), ('an', 'DT'), ('output', 'NN'), ('based', 'VBN'), ('on', 'IN'), ('example', 'NN'), ('input-output', 'NN'), ('pairs', 'NNS'), ('.', '.'), ('It', 'PRP'), ('infers', 'VBZ'), ('a', 'DT'), ('function', 'NN'), ('from', 'IN'), ('labeled', 'VBN'), ('training', 'NN'), ('data', 'NNS'), ('consisting', 'VBG'), ('of', 'IN'), ('a', 'DT'), ('set', 'NN'), ('of', 'IN'), ('training', 'NN'), ('examples', 'NNS'), ('.', '.'), ('In', 'IN'), ('supervised', 'JJ'), ('learning', 'NN'), (',', ','), ('each', 'DT'), ('example', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('pair', 'NN'), ('consisting', 'VBG'), ('of', 'IN'), ('an', 'DT'), ('input', 'NN'), ('object', 'NN'), ('(', ':'), ('typically', 'RB'), ('a', 'DT'), ('vector', 'NN'), (')', ','), ('and', 'CC'), ('a', 'DT'), ('desired', 'VBN'), ('output', 'NN'), ('value', 'NN'), ('(', ','), ('also', 'RB'), ('called', 'VBN'), ('the', 'DT'), ('supervisory', 'JJ'), ('signal', 'NN'), (')', '-RRB-'), ('.', '.'), ('A', 'DT'), ('supervised', 'JJ'), ('learning', 'NN'), ('algorithm', 'NN'), ('analyzes', 'VBZ'), ('the', 'DT'), ('training', 'NN'), ('data', 'NNS'), ('and', 'CC'), ('produces', 'VBZ'), ('an', 'DT'), ('inferred', 'JJ'), ('function', 'NN'), (',', ','), ('which', 'WDT'), ('can', 'MD'), ('be', 'VB'), ('used', 'VBN'), ('for', 'IN'), ('mapping', 'VBG'), ('new', 'JJ'), ('examples', 'NNS'), ('.', '.'), ('An', 'DT'), ('optimal', 'JJ'), ('scenario', 'NN'), ('will', 'MD'), ('allow', 'VB'), ('for', 'IN'), ('the', 'DT'), ('algorithm', 'NN'), ('to', 'TO'), ('correctly', 'RB'), ('determine', 'VB'), ('the', 'DT'), ('class', 'NN'), ('labels', 'NNS'), ('for', 'IN'), ('unseen', 'JJ'), ('instances', 'NNS'), ('.', '.'), ('This', 'DT'), ('requires', 'VBZ'), ('the', 'DT'), ('learning', 'NN'), ('algorithm', 'NN'), ('to', 'TO'), ('generalize', 'VB'), ('from', 'IN'), ('the', 'DT'), ('training', 'NN'), ('data', 'NNS'), ('to', 'IN'), ('unseen', 'JJ'), ('situations', 'NNS'), ('in', 'IN'), ('a', 'DT'), (\"'\", '``'), ('reasonable', 'JJ'), (\"'\", \"''\"), ('way', 'NN'), ('(', ','), ('see', 'VB'), ('inductive', 'JJ'), ('bias', 'NN'), (')', '-RRB-'), ('.', '.'), ('Keywords', 'NNS'), ('are', 'VBP'), ('defined', 'VBN'), ('as', 'IN'), ('phrases', 'NNS'), ('that', 'WDT'), ('capture', 'VBP'), ('the', 'DT'), ('main', 'JJ'), ('topics', 'NNS'), ('discussed', 'VBN'), ('in', 'IN'), ('a', 'DT'), ('document', 'NN'), ('.', '.'), ('As', 'IN'), ('they', 'PRP'), ('offer', 'VBP'), ('a', 'DT'), ('brief', 'JJ'), ('yet', 'CC'), ('precise', 'JJ'), ('summary', 'NN'), ('of', 'IN'), ('document', 'NN'), ('content', 'NN'), (',', ','), ('they', 'PRP'), ('can', 'MD'), ('be', 'VB'), ('utilized', 'VBN'), ('for', 'IN'), ('various', 'JJ'), ('applications', 'NNS'), ('.', '.'), ('In', 'IN'), ('an', 'DT'), ('information', 'NN'), ('retrieval', 'NN'), ('environment', 'NN'), (',', ','), ('they', 'PRP'), ('serve', 'VBP'), ('as', 'IN'), ('an', 'DT'), ('indication', 'NN'), ('of', 'IN'), ('document', 'NN'), ('relevance', 'NN'), ('for', 'IN'), ('users', 'NNS'), (',', ','), ('as', 'IN'), ('the', 'DT'), ('list', 'NN'), ('of', 'IN'), ('keywords', 'NNS'), ('can', 'MD'), ('quickly', 'RB'), ('help', 'VB'), ('to', 'TO'), ('determine', 'VB'), ('whether', 'IN'), ('a', 'DT'), ('given', 'VBN'), ('document', 'NN'), ('is', 'VBZ'), ('relevant', 'JJ'), ('to', 'IN'), ('their', 'PRP$'), ('interest', 'NN'), ('.', '.'), ('As', 'IN'), ('keywords', 'NNS'), ('reflect', 'VBP'), ('a', 'DT'), ('document', 'NN'), (\"'s\", 'POS'), ('main', 'JJ'), ('topics', 'NNS'), (',', ','), ('they', 'PRP'), ('can', 'MD'), ('be', 'VB'), ('utilized', 'VBN'), ('to', 'TO'), ('classify', 'VB'), ('documents', 'NNS'), ('into', 'IN'), ('groups', 'NNS'), ('by', 'IN'), ('measuring', 'VBG'), ('the', 'DT'), ('overlap', 'NN'), ('between', 'IN'), ('the', 'DT'), ('keywords', 'NNS'), ('assigned', 'VBN'), ('to', 'IN'), ('them', 'PRP'), ('.', '.'), ('Keywords', 'NNS'), ('are', 'VBP'), ('also', 'RB'), ('used', 'VBN'), ('proactively', 'RB'), ('in', 'IN'), ('information', 'NN'), ('retrieval', 'NN'), ('.', '.')]\n```\n\nAfter the custom POS-tagger function is defined, it can be passed to KeyphraseVectorizers via the `custom_pos_tagger` parameter.\n\n```python\nfrom keyphrase_vectorizers import KeyphraseCountVectorizer\n\n# use custom POS-tagger with KeyphraseVectorizers\nvectorizer = KeyphraseCountVectorizer(custom_pos_tagger=custom_pos_tagger)\nvectorizer.fit(docs)\nkeyphrases = vectorizer.get_feature_names_out()\nprint(keyphrases)\n\n>>>['output value' 'information retrieval' 'algorithm' 'vector' 'groups'\n 'main topics' 'task' 'precise summary' 'supervised learning'\n 'inductive bias' 'information retrieval environment'\n 'supervised learning algorithm' 'function' 'input' 'pair'\n 'document relevance' 'learning' 'class labels' 'new examples' 'keywords'\n 'list' 'machine' 'training data' 'unseen situations' 'phrases' 'output'\n 'optimal scenario' 'document' 'training examples' 'documents' 'interest'\n 'indication' 'learning algorithm' 'inferred function'\n 'various applications' 'example' 'set' 'unseen instances'\n 'example input-output pairs' 'way' 'users' 'input object'\n 'supervisory signal' 'overlap' 'document content']\n```\n\n<a name=\"#patternrank-keyphrase-extraction-with-keyphrasevectorizers-and-keybert\"/></a>\n\n### [PatternRank:](https://arxiv.org/abs/2210.05245) Keyphrase extraction with KeyphraseVectorizers and [KeyBERT](https://github.com/MaartenGr/KeyBERT \"KeyBERT repository\")\n\n[Back to Table of Contents](#toc)\n\nUsing the keyphrase vectorizers together with KeyBERT for keyphrase extraction results in the [PatternRank](https://arxiv.org/abs/2210.05245) approach. PatternRank can extract grammatically correct keyphrases that are most similar to a document. Thereby, the vectorizer first extracts candidate keyphrases from the text documents, which are subsequently ranked by KeyBERT based on their document similarity. The top-n most similar keyphrases can then be\nconsidered as document keywords.\n\nThe advantage of using KeyphraseVectorizers in addition to KeyBERT is that it allows users to get grammatically correct\nkeyphrases instead of simple n-grams of pre-defined lengths. In KeyBERT, users can specify the `keyphrase_ngram_range`\nto define the length of the retrieved keyphrases. However, this raises two issues. First, users usually do not know the\noptimal n-gram range and therefore have to spend some time experimenting until they find a suitable n-gram range.\nSecond, even after finding a good n-gram range, the returned keyphrases are sometimes still grammatically not quite\ncorrect or are slightly off-key. Unfortunately, this limits the quality of the returned keyphrases.\n\nTo adress this issue, we can use the vectorizers of this package to first extract candidate keyphrases that consist of\nzero or more adjectives, followed by one or multiple nouns in a pre-processing step instead of simple n-grams. [TextRank](https://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf), [SingleRank](https://aclanthology.org/C08-1122.pdf), and [EmbedRank](https://aclanthology.org/K18-1022.pdf) already successfully used this noun phrase approach for keyphrase extraction. The extracted candidate keyphrases are subsequently passed to KeyBERT for embedding generation and similarity calculation. To use both packages for keyphrase extraction, we need to\npass KeyBERT a keyphrase vectorizer with the `vectorizer` parameter. Since the length of keyphrases now depends on\npart-of-speech tags, there is no need to define an n-gram length anymore.\n\n#### Example:\n\nKeyBERT can be installed via `pip install keybert`.\n\n```python\nfrom keyphrase_vectorizers import KeyphraseCountVectorizer\nfrom keybert import KeyBERT\n\ndocs = [\"\"\"Supervised learning is the machine learning task of learning a function that\n         maps an input to an output based on example input-output pairs. It infers a\n         function from labeled training data consisting of a set of training examples.\n         In supervised learning, each example is a pair consisting of an input object\n         (typically a vector) and a desired output value (also called the supervisory signal). \n         A supervised learning algorithm analyzes the training data and produces an inferred function, \n         which can be used for mapping new examples. An optimal scenario will allow for the \n         algorithm to correctly determine the class labels for unseen instances. This requires \n         the learning algorithm to generalize from the training data to unseen situations in a \n         'reasonable' way (see inductive bias).\"\"\", \n             \n        \"\"\"Keywords are defined as phrases that capture the main topics discussed in a document. \n        As they offer a brief yet precise summary of document content, they can be utilized for various applications. \n        In an information retrieval environment, they serve as an indication of document relevance for users, as the list \n        of keywords can quickly help to determine whether a given document is relevant to their interest. \n        As keywords reflect a document's main topics, they can be utilized to classify documents into groups \n        by measuring the overlap between the keywords assigned to them. Keywords are also used proactively \n        in information retrieval.\"\"\"]\n\nkw_model = KeyBERT()\n```\n\nInstead of deciding on a suitable n-gram range which could be e.g.(1,2)...\n\n```python\n>>> kw_model.extract_keywords(docs=docs, keyphrase_ngram_range=(1,2))\n[[('labeled training', 0.6013),\n  ('examples supervised', 0.6112),\n  ('signal supervised', 0.6152),\n  ('supervised', 0.6676),\n  ('supervised learning', 0.6779)],\n [('keywords assigned', 0.6354),\n  ('keywords used', 0.6373),\n  ('list keywords', 0.6375),\n  ('keywords quickly', 0.6376),\n  ('keywords defined', 0.6997)]]\n```\n\nwe can now just let the keyphrase vectorizer decide on suitable keyphrases, without limitations to a maximum or minimum\nn-gram range. We only have to pass a keyphrase vectorizer as parameter to KeyBERT:\n\n```python\n>>> kw_model.extract_keywords(docs=docs, vectorizer=KeyphraseCountVectorizer())\n[[('learning', 0.4813), \n  ('training data', 0.5271), \n  ('learning algorithm', 0.5632), \n  ('supervised learning', 0.6779), \n  ('supervised learning algorithm', 0.6992)], \n [('document content', 0.3988), \n  ('information retrieval environment', 0.5166), \n  ('information retrieval', 0.5792), \n  ('keywords', 0.6046), \n  ('document relevance', 0.633)]]\n```\n\nThis allows us to make sure that we do not cut off important words caused by defining our n-gram range too short. For\nexample, we would not have found the keyphrase \"supervised learning algorithm\" with `keyphrase_ngram_range=(1,2)`.\nFurthermore, we avoid to get keyphrases that are slightly off-key like \"labeled training\", \"signal supervised\" or\n\"keywords quickly\".\n\nFor more tips on how to use the KeyphraseVectorizers together with KeyBERT, visit [this guide](https://maartengr.github.io/KeyBERT/guides/countvectorizer.html#keyphrasevectorizers \"KeyBERT rCountVectorizer Guide\").\n\n<a name=\"#topic-modeling-with-bertopic-and-keyphrasevectorizers\"/></a>\n\n### Topic modeling with [BERTopic](https://github.com/MaartenGr/BERTopic \"BERTopic repository\") and KeyphraseVectorizers\n\n[Back to Table of Contents](#toc)\n\nSimilar to the application with KeyBERT, the keyphrase vectorizers can be used to obtain grammatically correct keyphrases as\ndescriptions for topics instead of simple n-grams. This allows us to make sure that we do not cut off important topic\ndescription keyphrases by defining our n-gram range too short. Moreover, we don't need to clean stopwords upfront, can\nget more precise topic models and avoid to get topic description keyphrases that are slightly off-key.\n\n#### Example:\n\nBERTopic can be installed via `pip install bertopic`.\n\n```python\nfrom keyphrase_vectorizers import KeyphraseCountVectorizer\nfrom bertopic import BERTopic\nfrom sklearn.datasets import fetch_20newsgroups\n\n# load text documents\ndocs = fetch_20newsgroups(subset='all',  remove=('headers', 'footers', 'quotes'))['data']\n# only use subset of the data \ndocs = docs[:5000]\n\n# train topic model with KeyphraseCountVectorizer\nkeyphrase_topic_model = BERTopic(vectorizer_model=KeyphraseCountVectorizer())\nkeyphrase_topics, keyphrase_probs = keyphrase_topic_model.fit_transform(docs)\n\n# get topics\n>>> keyphrase_topic_model.topics\n{-1: [('file', 0.007265527630674131),\n  ('one', 0.007055454904474792),\n  ('use', 0.00633563957153475),\n  ('program', 0.006053271092949018),\n  ('get', 0.006011060091056076),\n  ('people', 0.005729309058970368),\n  ('know', 0.005635951168273583),\n  ('like', 0.0055692449802916015),\n  ('time', 0.00527028825803415),\n  ('us', 0.00525564504880084)],\n 0: [('game', 0.024134589719090525),\n  ('team', 0.021852806383170772),\n  ('players', 0.01749406934044139),\n  ('games', 0.014397938026886745),\n  ('hockey', 0.013932342023677305),\n  ('win', 0.013706115572901401),\n  ('year', 0.013297593024390321),\n  ('play', 0.012533185558169046),\n  ('baseball', 0.012412743802062559),\n  ('season', 0.011602725885164318)],\n 1: [('patients', 0.022600352291162015),\n  ('msg', 0.02023877371575874),\n  ('doctor', 0.018816282737587457),\n  ('medical', 0.018614407917995103),\n  ('treatment', 0.0165028251400717),\n  ('food', 0.01604980195180696),\n  ('candida', 0.015255961242066143),\n  ('disease', 0.015115496310099693),\n  ('pain', 0.014129703072484495),\n  ('hiv', 0.012884503220341102)],\n 2: [('key', 0.028851633177510126),\n  ('encryption', 0.024375137861044675),\n  ('clipper', 0.023565947302544528),\n  ('privacy', 0.019258719348097385),\n  ('security', 0.018983682856076434),\n  ('chip', 0.018822199098878365),\n  ('keys', 0.016060139239615384),\n  ('internet', 0.01450486904722165),\n  ('encrypted', 0.013194373119964168),\n  ('government', 0.01303978311708837)],\n  ...\n```\n\nThe same topics look a bit different when no keyphrase vectorizer is used:\n\n```python\nfrom bertopic import BERTopic\nfrom sklearn.datasets import fetch_20newsgroups\n\n# load text documents\ndocs = fetch_20newsgroups(subset='all',  remove=('headers', 'footers', 'quotes'))['data']\n# only use subset of the data \ndocs = docs[:5000]\n\n# train topic model without KeyphraseCountVectorizer\ntopic_model = BERTopic()\ntopics, probs = topic_model.fit_transform(docs)\n\n# get topics\n>>> topic_model.topics\n{-1: [('the', 0.012864641020408933),\n  ('to', 0.01187920529994724),\n  ('and', 0.011431498631699856),\n  ('of', 0.01099851927541331),\n  ('is', 0.010995478673036962),\n  ('in', 0.009908233622158523),\n  ('for', 0.009903667215879675),\n  ('that', 0.009619596716087699),\n  ('it', 0.009578499681829809),\n  ('you', 0.0095328846440753)],\n 0: [('game', 0.013949166096523719),\n  ('team', 0.012458483177116456),\n  ('he', 0.012354733462693834),\n  ('the', 0.01119583508278812),\n  ('10', 0.010190243555226108),\n  ('in', 0.0101436249231417),\n  ('players', 0.009682212470082758),\n  ('to', 0.00933700544705287),\n  ('was', 0.009172402203816335),\n  ('and', 0.008653375901739337)],\n 1: [('of', 0.012771267188340924),\n  ('to', 0.012581337590513296),\n  ('is', 0.012554884458779008),\n  ('patients', 0.011983273578628046),\n  ('and', 0.011863499662237566),\n  ('that', 0.011616113472989725),\n  ('it', 0.011581944987387165),\n  ('the', 0.011475148304229873),\n  ('in', 0.011395485985801054),\n  ('msg', 0.010715000656335596)],\n 2: [('key', 0.01725282988290282),\n  ('the', 0.014634841495851404),\n  ('be', 0.014429762197907552),\n  ('encryption', 0.013530733999898166),\n  ('to', 0.013443159534369817),\n  ('clipper', 0.01296614319927958),\n  ('of', 0.012164734232650158),\n  ('is', 0.012128295958613464),\n  ('and', 0.011972763728732667),\n  ('chip', 0.010785744492767285)],\n ...\n```\n### Citation information\n\n[Back to Table of Contents](#toc)\n\nWhen citing KeyphraseVectorizers or PatternRank in academic papers and theses, please use this BibTeX entry:\n``` \n@conference{schopf_etal_kdir22,\nauthor={Tim Schopf and Simon Klimek and Florian Matthes},\ntitle={PatternRank: Leveraging Pretrained Language Models and Part of Speech for Unsupervised Keyphrase Extraction},\nbooktitle={Proceedings of the 14th International Joint Conference on Knowledge Discovery, Knowledge Engineering and Knowledge Management - KDIR},\nyear={2022},\npages={243-248},\npublisher={SciTePress},\norganization={INSTICC},\ndoi={10.5220/0011546600003335},\nisbn={978-989-758-614-9},\nissn={2184-3228},\n}\n``` \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TimSchopf/KeyphraseVectorizers",
    "keywords": "",
    "license": "BSD 3-Clause \"New\" or \"Revised\" License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keyphrase-vectorizers",
    "package_url": "https://pypi.org/project/keyphrase-vectorizers/",
    "platform": null,
    "project_url": "https://pypi.org/project/keyphrase-vectorizers/",
    "project_urls": {
      "Homepage": "https://github.com/TimSchopf/KeyphraseVectorizers"
    },
    "release_url": "https://pypi.org/project/keyphrase-vectorizers/0.0.11/",
    "requires_dist": [
      "numpy (>=1.18.5)",
      "spacy (>=3.0.1)",
      "spacy-transformers (>=1.1.6)",
      "nltk (>=3.6.1)",
      "scikit-learn (>=1.0)",
      "scipy (>=1.7.3)",
      "psutil (>=5.8.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Set of vectorizers that extract keyphrases with part-of-speech patterns from a collection of text documents and convert them into a document-keyphrase matrix.",
    "version": "0.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16196230,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8553cd3e857a9993210669ce622c86694593a5f385e943df2f0ca9962d05a92c",
          "md5": "6f24a734ba89cc6fb54eded739798d95",
          "sha256": "91565fb6cd527db6b5c990b5bbc6b4bbb67a8480c00894a3c076dcc047f0585f"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f24a734ba89cc6fb54eded739798d95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15845,
        "upload_time": "2022-01-25T22:25:19",
        "upload_time_iso_8601": "2022-01-25T22:25:19.933928Z",
        "url": "https://files.pythonhosted.org/packages/85/53/cd3e857a9993210669ce622c86694593a5f385e943df2f0ca9962d05a92c/keyphrase_vectorizers-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93a11e87e2b8d1edf47d04c28413c9bc46382023d452386feb86c36f0101e28d",
          "md5": "c86a66ffceed96ddccbf200dcf02e0f7",
          "sha256": "aaacde81476a73087d217b467d4d14aff1fef23bcfd3c3c3c2543686ce81739b"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c86a66ffceed96ddccbf200dcf02e0f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17968,
        "upload_time": "2022-01-25T22:25:21",
        "upload_time_iso_8601": "2022-01-25T22:25:21.831897Z",
        "url": "https://files.pythonhosted.org/packages/93/a1/1e87e2b8d1edf47d04c28413c9bc46382023d452386feb86c36f0101e28d/keyphrase_vectorizers-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98909e6b3680b227c772fcc2b207dce36ca3a3bb4c700282a62b95c2a58a1d35",
          "md5": "52758e7e3b3857a910cbab0d9e1018b9",
          "sha256": "d2452c2037297d39ce47724f9d3844b0db75b0b3d180a62dd9a8eb786ea1a9b4"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52758e7e3b3857a910cbab0d9e1018b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28530,
        "upload_time": "2022-06-19T13:58:48",
        "upload_time_iso_8601": "2022-06-19T13:58:48.923533Z",
        "url": "https://files.pythonhosted.org/packages/98/90/9e6b3680b227c772fcc2b207dce36ca3a3bb4c700282a62b95c2a58a1d35/keyphrase_vectorizers-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01c737feab372b03248785c33b260645e1b9e5116d800f5b4ede9dde163d07fe",
          "md5": "821544f1b8d2b1b996e7093d24fd06f9",
          "sha256": "1902d1c833ee1136b1a8c1a6bbedd67fb368a167a6e3f44b2dabbadb30085d21"
        },
        "downloads": -1,
        "filename": "keyphrase-vectorizers-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "821544f1b8d2b1b996e7093d24fd06f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 39702,
        "upload_time": "2022-06-19T13:58:51",
        "upload_time_iso_8601": "2022-06-19T13:58:51.132736Z",
        "url": "https://files.pythonhosted.org/packages/01/c7/37feab372b03248785c33b260645e1b9e5116d800f5b4ede9dde163d07fe/keyphrase-vectorizers-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fc6db80015c38ee156e978fbbb32f05b6a19ef0d99f7387f646c3d9ac4e093a",
          "md5": "b3e3629f3ef972c15b707a22d57031e4",
          "sha256": "92f2efb16786de395ae66df2a8e95646f0cd97ff7cd89189d8c4e460aa85cb14"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3e3629f3ef972c15b707a22d57031e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29708,
        "upload_time": "2022-12-23T10:49:20",
        "upload_time_iso_8601": "2022-12-23T10:49:20.029387Z",
        "url": "https://files.pythonhosted.org/packages/2f/c6/db80015c38ee156e978fbbb32f05b6a19ef0d99f7387f646c3d9ac4e093a/keyphrase_vectorizers-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9046f7a3116e387afee91e54aaa068b36932d62d616b3e55e8be2e9e0cac4ecd",
          "md5": "549cbe8466388a28e9990d8a470ae61a",
          "sha256": "b9472a68d4e3410f46d417b346267ffc321f54f08caf8d922e3cce5c55bc6162"
        },
        "downloads": -1,
        "filename": "keyphrase-vectorizers-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "549cbe8466388a28e9990d8a470ae61a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 43110,
        "upload_time": "2022-12-23T10:49:22",
        "upload_time_iso_8601": "2022-12-23T10:49:22.304983Z",
        "url": "https://files.pythonhosted.org/packages/90/46/f7a3116e387afee91e54aaa068b36932d62d616b3e55e8be2e9e0cac4ecd/keyphrase-vectorizers-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "530583ffd73091cfeb937cb66a4766a735a0d701004e5b026c046031af6163c6",
          "md5": "3f203c73dfc33d274c8c6b4675d7cfee",
          "sha256": "f87632627a455ca617daf42f83b3b1a0439e3bfd8bf68792a7501cac05750948"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f203c73dfc33d274c8c6b4675d7cfee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15944,
        "upload_time": "2022-01-27T08:09:30",
        "upload_time_iso_8601": "2022-01-27T08:09:30.051552Z",
        "url": "https://files.pythonhosted.org/packages/53/05/83ffd73091cfeb937cb66a4766a735a0d701004e5b026c046031af6163c6/keyphrase_vectorizers-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c179ade39815ac4b4e93efd04f1c37f121767f248dcb0274dc12737c7e5cbd2e",
          "md5": "f33958c8ee8aa5dcf31b3f83faec993c",
          "sha256": "43deb48ae5fdbcbdfb3245aeca0857c92405d00dca0e6747112ec510fd911bee"
        },
        "downloads": -1,
        "filename": "keyphrase-vectorizers-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f33958c8ee8aa5dcf31b3f83faec993c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18155,
        "upload_time": "2022-01-27T08:09:31",
        "upload_time_iso_8601": "2022-01-27T08:09:31.762896Z",
        "url": "https://files.pythonhosted.org/packages/c1/79/ade39815ac4b4e93efd04f1c37f121767f248dcb0274dc12737c7e5cbd2e/keyphrase-vectorizers-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c9ea9bbdefaff948e37f72903c1ef9000f80548e0784e26ee4b2538f27b1249",
          "md5": "dc21345869c9dfcdeccd47d2d23a5afd",
          "sha256": "c7454f10f747ed79e4ce9a5840bdb8f30e73cc801a201ec3fbb812aeb2fd50b9"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc21345869c9dfcdeccd47d2d23a5afd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16398,
        "upload_time": "2022-02-01T16:02:46",
        "upload_time_iso_8601": "2022-02-01T16:02:46.278952Z",
        "url": "https://files.pythonhosted.org/packages/3c/9e/a9bbdefaff948e37f72903c1ef9000f80548e0784e26ee4b2538f27b1249/keyphrase_vectorizers-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b84a29ad817d4983569520228203900d7a2865ae6eb4e9bd8b75d21c2b1606c4",
          "md5": "15aeeb2b3d14eb24e55dc8ac8b46cd2c",
          "sha256": "0d0e91686e7f1de70d6c6fb31ea9514b1805da1d0b8c3e2ccac84328be29cc28"
        },
        "downloads": -1,
        "filename": "keyphrase-vectorizers-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "15aeeb2b3d14eb24e55dc8ac8b46cd2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18615,
        "upload_time": "2022-02-01T16:02:48",
        "upload_time_iso_8601": "2022-02-01T16:02:48.011860Z",
        "url": "https://files.pythonhosted.org/packages/b8/4a/29ad817d4983569520228203900d7a2865ae6eb4e9bd8b75d21c2b1606c4/keyphrase-vectorizers-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a82f3e711c129e95dffa4764210bbd47b57c19ffe5013033c71d491892e67ba3",
          "md5": "bf820e011db99cc48488b2efee7a3a82",
          "sha256": "14c151533f85f28d728392c78267352d341b9d0f9a8aa79df2d7bbc17d51ca48"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf820e011db99cc48488b2efee7a3a82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17286,
        "upload_time": "2022-02-03T16:16:12",
        "upload_time_iso_8601": "2022-02-03T16:16:12.334681Z",
        "url": "https://files.pythonhosted.org/packages/a8/2f/3e711c129e95dffa4764210bbd47b57c19ffe5013033c71d491892e67ba3/keyphrase_vectorizers-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ffcccc11df5f5369d371eb224cfa8488eaa12fcd1b700976e1648187eccb3ed",
          "md5": "7759d1093bc1c63965c0ebb72b5acb60",
          "sha256": "b00c16bbb134626bc6c2c0990b1f9678bfbc8e64e4005c88eef3eda3292d1c33"
        },
        "downloads": -1,
        "filename": "keyphrase-vectorizers-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7759d1093bc1c63965c0ebb72b5acb60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19006,
        "upload_time": "2022-02-03T16:16:13",
        "upload_time_iso_8601": "2022-02-03T16:16:13.905204Z",
        "url": "https://files.pythonhosted.org/packages/5f/fc/ccc11df5f5369d371eb224cfa8488eaa12fcd1b700976e1648187eccb3ed/keyphrase-vectorizers-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1ad657964083c956a1b77c868d38d08b0fefb4e770641b685fbf6feb917756f",
          "md5": "9330064ad37746cc2612be7f3ca0d3f7",
          "sha256": "72922c27e6c10ab077ad30dec83bce73e0207c41b1ef2681e8fb5feb0ff4d2b5"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9330064ad37746cc2612be7f3ca0d3f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20832,
        "upload_time": "2022-02-06T10:01:10",
        "upload_time_iso_8601": "2022-02-06T10:01:10.554269Z",
        "url": "https://files.pythonhosted.org/packages/d1/ad/657964083c956a1b77c868d38d08b0fefb4e770641b685fbf6feb917756f/keyphrase_vectorizers-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d245d136a244ec57e8e546d7e6c95af10d6227abbafc65d6293d6e1563d20e5",
          "md5": "5357a567156ed8d1b1c6e4070babc43e",
          "sha256": "d84f0a4494ea55c39100b8e21d35ddd3d4c48bf2b565d3463e1c2814aaf775c0"
        },
        "downloads": -1,
        "filename": "keyphrase-vectorizers-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5357a567156ed8d1b1c6e4070babc43e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24220,
        "upload_time": "2022-02-06T10:01:12",
        "upload_time_iso_8601": "2022-02-06T10:01:12.019690Z",
        "url": "https://files.pythonhosted.org/packages/6d/24/5d136a244ec57e8e546d7e6c95af10d6227abbafc65d6293d6e1563d20e5/keyphrase-vectorizers-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0811a42779574d548ca2dfa029c0fd06415b667faff3cea1fd08cfddc3bb9dfd",
          "md5": "a3e61dddc17b0613d9f13ddc9790d900",
          "sha256": "69185942a3c2054f887312edd2461f8aecf6f19f7e7a056eac1a959094ad84ea"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3e61dddc17b0613d9f13ddc9790d900",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 21239,
        "upload_time": "2022-02-12T14:45:51",
        "upload_time_iso_8601": "2022-02-12T14:45:51.827134Z",
        "url": "https://files.pythonhosted.org/packages/08/11/a42779574d548ca2dfa029c0fd06415b667faff3cea1fd08cfddc3bb9dfd/keyphrase_vectorizers-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4646ea0351275a99ec5cff9b3f3a43547e8792d9c0d20d7daa8a43ea1360dd2f",
          "md5": "144ea3bfb03f71c74f2ce4d597ff8f8a",
          "sha256": "3f6a8dbde409dc54eebb186dcdc185c1f7533f230f7b22cfa2281d36488acd9a"
        },
        "downloads": -1,
        "filename": "keyphrase-vectorizers-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "144ea3bfb03f71c74f2ce4d597ff8f8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24357,
        "upload_time": "2022-02-12T14:45:53",
        "upload_time_iso_8601": "2022-02-12T14:45:53.481784Z",
        "url": "https://files.pythonhosted.org/packages/46/46/ea0351275a99ec5cff9b3f3a43547e8792d9c0d20d7daa8a43ea1360dd2f/keyphrase-vectorizers-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2349698b1d76527de8c94fa66fcdca8c407ab86588f512f98f525983eb943ed",
          "md5": "1d2ddc093f2556e65f64a54429ce4b21",
          "sha256": "530888fa7430e5b52020e039c18f1bb6e12bd0d9c0e501700d2c5f63c506eb7a"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d2ddc093f2556e65f64a54429ce4b21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24781,
        "upload_time": "2022-02-14T16:09:48",
        "upload_time_iso_8601": "2022-02-14T16:09:48.780889Z",
        "url": "https://files.pythonhosted.org/packages/f2/34/9698b1d76527de8c94fa66fcdca8c407ab86588f512f98f525983eb943ed/keyphrase_vectorizers-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f72cfc38028550fe3f9e9b17e9afabaaa54990f60ebb7aeff878ee234b47b559",
          "md5": "6d913149aba77f2ce631efa0c9b134d2",
          "sha256": "3afabd353d2228f6359684b867ab39e2b1fc5671a3f4a2160da9e507de1c4866"
        },
        "downloads": -1,
        "filename": "keyphrase-vectorizers-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "6d913149aba77f2ce631efa0c9b134d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27652,
        "upload_time": "2022-02-14T16:09:50",
        "upload_time_iso_8601": "2022-02-14T16:09:50.615877Z",
        "url": "https://files.pythonhosted.org/packages/f7/2c/fc38028550fe3f9e9b17e9afabaaa54990f60ebb7aeff878ee234b47b559/keyphrase-vectorizers-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "493b35dbc539ad7ba0487ff7996b404d954e034306cbdfa5a13b4a711ff6378c",
          "md5": "72c81945d3153b6b2b2524a84671e743",
          "sha256": "ab6f87794ec77823c59ce90f48fc1b37f1a1507d4d112b48b2d2b8a9cb50ebf4"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72c81945d3153b6b2b2524a84671e743",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24939,
        "upload_time": "2022-05-16T15:12:42",
        "upload_time_iso_8601": "2022-05-16T15:12:42.981831Z",
        "url": "https://files.pythonhosted.org/packages/49/3b/35dbc539ad7ba0487ff7996b404d954e034306cbdfa5a13b4a711ff6378c/keyphrase_vectorizers-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d0e5f45221a319a39da07d0522370ffeb188ecf62d265de45939b95f84b4cc7",
          "md5": "6ef757af277b84d0c4688b75a0aab47c",
          "sha256": "2d8c6368774a0acea4ef607f27f79e3eae4420c11345b68da77ef6c3fc357821"
        },
        "downloads": -1,
        "filename": "keyphrase-vectorizers-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "6ef757af277b84d0c4688b75a0aab47c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27407,
        "upload_time": "2022-05-16T15:12:44",
        "upload_time_iso_8601": "2022-05-16T15:12:44.897279Z",
        "url": "https://files.pythonhosted.org/packages/5d/0e/5f45221a319a39da07d0522370ffeb188ecf62d265de45939b95f84b4cc7/keyphrase-vectorizers-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa111a1cc016ccc1e22d80f10a6a57c6299d19af099652c30d807918810ab0ca",
          "md5": "3e1a1510abcebbd338a17d245202a526",
          "sha256": "b420271f4b89f5982a643fe2a8628087b41c56947ec48566eb82d436e44f46bd"
        },
        "downloads": -1,
        "filename": "keyphrase_vectorizers-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e1a1510abcebbd338a17d245202a526",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24921,
        "upload_time": "2022-06-18T19:16:12",
        "upload_time_iso_8601": "2022-06-18T19:16:12.191369Z",
        "url": "https://files.pythonhosted.org/packages/fa/11/1a1cc016ccc1e22d80f10a6a57c6299d19af099652c30d807918810ab0ca/keyphrase_vectorizers-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bf3e15c6aaadb0a93a2a46362c88d0f222847333b6d0c346a3828112e30931a",
          "md5": "a64a3939e0650c9ccffdbb608596d167",
          "sha256": "1241a53411072e02610bd75b60df62b8acc420deb04c7c8a346e8a3bb4984b2a"
        },
        "downloads": -1,
        "filename": "keyphrase-vectorizers-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "a64a3939e0650c9ccffdbb608596d167",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27464,
        "upload_time": "2022-06-18T19:16:14",
        "upload_time_iso_8601": "2022-06-18T19:16:14.020899Z",
        "url": "https://files.pythonhosted.org/packages/2b/f3/e15c6aaadb0a93a2a46362c88d0f222847333b6d0c346a3828112e30931a/keyphrase-vectorizers-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2fc6db80015c38ee156e978fbbb32f05b6a19ef0d99f7387f646c3d9ac4e093a",
        "md5": "b3e3629f3ef972c15b707a22d57031e4",
        "sha256": "92f2efb16786de395ae66df2a8e95646f0cd97ff7cd89189d8c4e460aa85cb14"
      },
      "downloads": -1,
      "filename": "keyphrase_vectorizers-0.0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3e3629f3ef972c15b707a22d57031e4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 29708,
      "upload_time": "2022-12-23T10:49:20",
      "upload_time_iso_8601": "2022-12-23T10:49:20.029387Z",
      "url": "https://files.pythonhosted.org/packages/2f/c6/db80015c38ee156e978fbbb32f05b6a19ef0d99f7387f646c3d9ac4e093a/keyphrase_vectorizers-0.0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9046f7a3116e387afee91e54aaa068b36932d62d616b3e55e8be2e9e0cac4ecd",
        "md5": "549cbe8466388a28e9990d8a470ae61a",
        "sha256": "b9472a68d4e3410f46d417b346267ffc321f54f08caf8d922e3cce5c55bc6162"
      },
      "downloads": -1,
      "filename": "keyphrase-vectorizers-0.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "549cbe8466388a28e9990d8a470ae61a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 43110,
      "upload_time": "2022-12-23T10:49:22",
      "upload_time_iso_8601": "2022-12-23T10:49:22.304983Z",
      "url": "https://files.pythonhosted.org/packages/90/46/f7a3116e387afee91e54aaa068b36932d62d616b3e55e8be2e9e0cac4ecd/keyphrase-vectorizers-0.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}