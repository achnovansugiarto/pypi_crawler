{
  "info": {
    "author": "Niels Cautaerts",
    "author_email": "nielscautaerts@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# Explicitor\n\nRust-like explicit errors for typed Python.\n\n## Why this exists\n\nExceptions suck in many statically typed programming languages.\nFrom a function signature it is usually impossible to know whether the function can throw an error.\nThe Rust programming language solves this problem quite elegantly with the [Result enum](https://doc.rust-lang.org/std/result/enum.Result.html), which allows you to use the type checker to reason about correct error handling.\nAn additional benefit is that error handling is much more elegant than `try ... except` clauses.\n\nThe goal of this package is to emulate in Python the Rust way of dealing with errors.\nThe implementation is *heavily* inspired by the contents of [this blogpost](https://jellis18.github.io/post/2021-12-13-python-exceptions-rust-go/) by [Justin Ellis](https://github.com/jellis18).\nThe philosophy is that instead of raising exceptions, exceptions are returned wrapped in an `Err` class, which is a variant of the `Result` type.\nHence, a function that can get into an error state returns a `Result` which can be clearly indicated in a function signature.\nThis can be valuable when one uses static type analysis tools like [mypy](https://www.mypy-lang.org/).\n\n## Installation\n\n```bash \npip install explicitor\n```\n\n\n## How to use it\n\nThere are 3 types defined: `Ok`, `Err` which are the two variants of `Result`.\n\nInstead of defining a function that can raise an exception, for example:\n\n```python \ndef function(x: int) -> int:\n    if x < 10:\n        raise ValueError(\"too small\")\n    return x + 1\n```\n\nyou would define your function as\n\n```python \nfrom explicitor import Ok, Err, Result\n\n\ndef function(x: int) -> Result[int, ValueError]:\n    if x < 10:\n        return Err(ValueError(\"too small\"))\n    return Ok(x + 1)\n```\n\nTo deal with the error, there's a number of methods implemented on `Err` and `Ok`:\n\n```python \nresult_1 = function(20)  # should be an Ok\nresult_2 = function(5)  # should be an Err\n\n\n# unwrap: returns the wrapped value of an Ok or raises the error contained by an Err\nassert result_1.unwrap() == 21\ntry:\n    result_2.unwrap()\nexcept ValueError as e:\n    assert str(e) == \"too small\"\n\n\n# expect: same as unwrap, but raises a custom exception with custom message\nassert result_1.expect(\"bla\") == 21\ntry:\n    result_2.expect(\"bla\")\nexcept Exception as e:\n    assert str(e) == \"bla\"\n\n\n# is_ok and is_err: checks what variant it is and returns a boolean\nassert result_1.is_ok()\nassert result_2.is_err()\n\n\n# unwrap_or: if Ok, unwrap, if Err, return the value supplied\nassert result_1.unwrap_or(2) == 21\nassert result_2.unwrap_or(2) == 2\n\n\n# unwrap_or_else: if Ok, unwrap, if Err, apply a function to the wrapped error and return it\nassert result_1.unwrap_or_else(lambda x: str(x)) == 21\nassert result_2.unwrap_or_else(lambda x: str(x)) == \"too small\"\n\n\n# unwrap_err: the opposite of unwrap, raise an exception if Ok, return the wrapped Exception if Err\ntry:\n    result_1.unwrap_err()\nexcept Exception as e:\n    assert str(e) == \"Unexpected Ok(21)\"\nassert str(result_2.unwrap_err()) == \"too small\"\n\n\n# expect_err: the opposite of expect, raise an exception with custom message if Ok, return the wrapped Exception if Err\ntry:\n    result_1.expect_err(\"custom message\")\nexcept Exception as e:\n    assert str(e) == \"custom message\"\nassert str(result_2.expect_err(\"custom message\")) == \"too small\"\n\n\n# map: apply a function to the wrapped value in Ok, do nothing if Err\nassert result_1.map(lambda x: x + 1) == Ok(22)\nassert result_2.map(lambda x: x + 1) == Err(ValueError(\"too small\"))\n```\n\nFinally, in Python 3.10+, it's possible to use Rust-like `match` statements for dealing with the errors:\n\n```python \nmatch function(20):\n    case Ok(v): print(\"The value is\", v)\n    case Err(e): print(\"The error is\", str(e))\n```\n\nSuppose a function does raise exceptions, it is possible to use the `unraise` decorator to catch these exceptions and return them wrapped in an `Err` instead.\nIf no exception is raised, the decorator wraps the output of the function in an `Ok`.\n\n```python \nfrom typing import Callable\nfrom explicitor import unraise\n\n\ndef function(x: int) -> int:\n    if x < 10:\n        raise ValueError(\"too small\")\n    return x + 1\n\n\nsafe_func: Callable[[int], Result[int, ValueError]] = unraise(function)\n```\n\n## What does not work\nIn Rust, there is the handy `?` operator, which allows you to quickly return an `Err` from a function or continue if the result is an `Ok`.\nIn Python, the equivalent might be:\n\n```python\nresult: Result = function()\n\nif result.is_err():\n    return result\n\n...\n```\n\nThere are also a lot of additional methods available on Rust's `Ok` and `Err` which are thus far not implemented, particularly their translations to `Option`.\n\nPersonal experimentation has shown that mypy may not always deal with these types or the `match` expression as expected, certainly I would not consider them as safe as the Rust equivalents.\nIf you know how to improve the implementation so that it works better with mypy, and/or makes the behavior more Rust-like, feel free to make a PR.\n\n\n## Contributing\n1. Fork and clone the repo\n2. Create a virtual environment\n3. `poetry install`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/din14970/explicitor",
    "keywords": "typing,error handling,rust",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "explicitor",
    "package_url": "https://pypi.org/project/explicitor/",
    "platform": null,
    "project_url": "https://pypi.org/project/explicitor/",
    "project_urls": {
      "Homepage": "https://github.com/din14970/explicitor",
      "Repository": "https://github.com/din14970/explicitor"
    },
    "release_url": "https://pypi.org/project/explicitor/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.10,<4.0",
    "summary": "Rust-like explicit error handling for typed Python",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17130360,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51df7b3920b8ced4bdc107b0027e0c34d970a128e73b2c3b4f9ce754bf9f516f",
          "md5": "ee6f982f547fa0f12586554baa70a959",
          "sha256": "d23d5d8c53fed0c817e069c5e10084ba48128977bbea4a258e7a773f54e05287"
        },
        "downloads": -1,
        "filename": "explicitor-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee6f982f547fa0f12586554baa70a959",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 5784,
        "upload_time": "2023-03-02T16:40:59",
        "upload_time_iso_8601": "2023-03-02T16:40:59.644985Z",
        "url": "https://files.pythonhosted.org/packages/51/df/7b3920b8ced4bdc107b0027e0c34d970a128e73b2c3b4f9ce754bf9f516f/explicitor-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03351f44f54295e2c6312a2d9b632bf8a9f3d9aad570c0398827e0be6a6ddf9f",
          "md5": "26079cadbd673f0f0011dd6fc394889d",
          "sha256": "342b0c4a3d50bcc48dd6d33f6599733cb7638db6475cb155827c655a7a3a6ea3"
        },
        "downloads": -1,
        "filename": "explicitor-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "26079cadbd673f0f0011dd6fc394889d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 5652,
        "upload_time": "2023-03-02T16:41:00",
        "upload_time_iso_8601": "2023-03-02T16:41:00.989043Z",
        "url": "https://files.pythonhosted.org/packages/03/35/1f44f54295e2c6312a2d9b632bf8a9f3d9aad570c0398827e0be6a6ddf9f/explicitor-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51df7b3920b8ced4bdc107b0027e0c34d970a128e73b2c3b4f9ce754bf9f516f",
        "md5": "ee6f982f547fa0f12586554baa70a959",
        "sha256": "d23d5d8c53fed0c817e069c5e10084ba48128977bbea4a258e7a773f54e05287"
      },
      "downloads": -1,
      "filename": "explicitor-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ee6f982f547fa0f12586554baa70a959",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 5784,
      "upload_time": "2023-03-02T16:40:59",
      "upload_time_iso_8601": "2023-03-02T16:40:59.644985Z",
      "url": "https://files.pythonhosted.org/packages/51/df/7b3920b8ced4bdc107b0027e0c34d970a128e73b2c3b4f9ce754bf9f516f/explicitor-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03351f44f54295e2c6312a2d9b632bf8a9f3d9aad570c0398827e0be6a6ddf9f",
        "md5": "26079cadbd673f0f0011dd6fc394889d",
        "sha256": "342b0c4a3d50bcc48dd6d33f6599733cb7638db6475cb155827c655a7a3a6ea3"
      },
      "downloads": -1,
      "filename": "explicitor-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "26079cadbd673f0f0011dd6fc394889d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 5652,
      "upload_time": "2023-03-02T16:41:00",
      "upload_time_iso_8601": "2023-03-02T16:41:00.989043Z",
      "url": "https://files.pythonhosted.org/packages/03/35/1f44f54295e2c6312a2d9b632bf8a9f3d9aad570c0398827e0be6a6ddf9f/explicitor-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}