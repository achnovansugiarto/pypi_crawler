{
  "info": {
    "author": "Demetry Pascal",
    "author_email": "qtckpuhdsa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Discrete Hill Climbing\n\n[![PyPI\nversion](https://badge.fury.io/py/DiscreteHillClimbing.svg)](https://pypi.org/project/DiscreteHillClimbing/)\n[![Downloads](https://pepy.tech/badge/DiscreteHillClimbing)](https://pepy.tech/project/DiscreteHillClimbing)\n[![Downloads](https://pepy.tech/badge/DiscreteHillClimbing/month)](https://pepy.tech/project/DiscreteHillClimbing)\n[![Downloads](https://pepy.tech/badge/DiscreteHillClimbing/week)](https://pepy.tech/project/DiscreteHillClimbing)\n\nThis is the implementation of Hill Climbing algorithm for discrete tasks.\n\n```\npip install DiscreteHillClimbing\n```\n\n- [Discrete Hill Climbing](#discrete-hill-climbing)\n  - [About](#about)\n  - [Why Hill Climbing?](#why-hill-climbing)\n  - [Pseudocode](#pseudocode)\n  - [Working process](#working-process)\n  - [Parameters](#parameters)\n  - [Examples](#examples)\n    - [Own random search counts](#own-random-search-counts)\n    - [Different greedy steps](#different-greedy-steps)\n\n## About\n\n[Hill Climbing](https://en.wikipedia.org/wiki/Hill_climbing) (*coordinate minimization*) is the most simple algorithm for discrete tasks a lot (one simpler is only getting best from fully random). In discrete tasks each predictor can have it's value from finite set, therefore we can check all values of predictor (variable) or some not small random part of it and do optimization by one predictor. After that we can optimize by another predictor and so on. Also we can try to find better solution using 1, 2, 3, ... predictors and choose only the best configuration. \n\nThere is a highly variety of ways to realize **hill climbing**, so I tried to make just simple and universal implementation. Assuredly, it can be better to create your (faster)implementation depends on specific of ur own task, but this package is a good flexible choice for start.\n\n## Why Hill Climbing?\n\nHill Climbing is the perfect baseline when u start to seek solution. It really helps and it really can get u very good result using just 50-200 function evaluations.\n\n## Pseudocode\n\nSee the main idea of my implementation in this pseudocode:\n\n```c\nbest solution <- start_solution\nbest value <- func(start_solution)\n\nwhile functions evaluates_count < max_function_evals:\n    predictors <- get greedy_step random predictors (variables)\n    for each predictor from predictors:\n        choose random_counts_by_predictors values from available values of this predictor\n        for each chosen value:\n            replace predictor value with chosen\n            evaluate function\n        remember best result as result of this predictor\n    select best predictor with its best configuration\n    replace values in solution\n    it is new best solution \n```\n\n## Working process\n\n**Load packages**:\n```python\nimport numpy as np\nfrom DiscreteHillClimbing import Hill_Climbing_descent\n```\n\n**Determine optimized function**:\n```python\ndef func(array: np.ndarray) -> float:\n    return (np.sum(array) + np.sum(array**2))/(1 + array[0]*array[1])\n```\n\n**Determine available sets for each predictor**:\n```python\navailable_predictors_values = [\n    np.array([10, 20, 35, 50]),\n    np.array([-5, 3, -43, 0, 80]),\n    np.arange(40, 500),\n    np.linspace(1, 100, num = 70),\n    np.array([65, 32, 112]),\n    np.array([1, 2, 3, 0, 9, 8]),\n    np.array([1, 11, 111, 123, 43]),\n    np.array([8, 9, 0, 5, 4, 3]),\n    np.array([-1000, -500, 500, 1000])\n]\n```\n\n**Create solution**:\n```python\nsolution, value = Hill_Climbing_descent(function = func,\n    available_predictors_values = available_predictors_values,\n    random_counts_by_predictors = 4,\n    greedy_step = 1,\n    start_solution = None,\n    max_function_evals = 1000,\n    maximize = False,\n    seed = 1)\n\nprint(solution)\nprint(value)\n\n# [  10.           -5.          493.           98.56521739  112.    9.          123.            9.         1000.        ]\n# -26174.972801975237\n```\n\n## Parameters\n\n* `function` : func np.array->float/int; callable optimized function uses numpy 1D-array as argument.\n* `available_predictors_values` : int sequence\n        a list of available values for each predictor (each dimention of argument).\n* `random_counts_by_predictors` : int or int sequence, optional\n        how many random choices should it use for each variable? Use list/numpy array for select option for each predictor (or int -- one number for each predictor). The default is 3.\n* `greedy_step` : int, optional\n        it choices better solution after climbing by greedy_step predictors. The default is 1.\n* `start_solution` : None or int sequence, optional\n        point when the algorithm starts. The default is None -- random start solution\n* `max_function_evals` : int, optional\n        max count of function evaluations. The default is 1000.\n* `maximize` : bool, optional\n        maximize the function? (minimize by default). The default is False.\n\n* `seed` : int or None. Random seed (None if doesn't matter). The default is None\n\n**Returns**: tuple contained best solution and best function value.\n\n## Examples\n\n### Own random search counts\n\nU can set your different `random_counts_by_predictors` value for each predictor. For example, if the predictor available set contains only 3-5 values, it's better to check all of them; but if there are 100+ values, it will be better to check 20-40 of them, not 5. See example:\n\n```python\nimport numpy as np\nfrom DiscreteHillClimbing import Hill_Climbing_descent\n\n\ndef func(array):\n    return (np.sum(array) + np.sum(array**2))/(1 + array[0]*array[1])\n\n\navailable_predictors_values = [\n    np.array([10, 20, 35, 50]),\n    np.array([-5, 3, -43, 0, 80]),\n    np.arange(40, 500),\n    np.linspace(1, 100, num = 70),\n    np.array([65, 32, 112]),\n    np.array([1, 2, 3, 0, 9, 8]),\n    np.array([1, 11, 111, 123, 43]),\n    np.array([8, 9, 0, 5, 4, 3]),\n    np.array([-1000, -500, 500, 1000])\n]\n\n\nsolution, value = Hill_Climbing_descent(function = func,\n    available_predictors_values = available_predictors_values,\n    random_counts_by_predictors = [4, 5, 2, 20, 20, 3, 6, 6, 4],\n    greedy_step = 1,\n    start_solution = None,\n    max_function_evals = 1000,\n    maximize = False,\n    seed = 1)\n\nprint(solution)\nprint(value)\n\n# [  10.   -5.  494.  100.  112.    9.  123.    9. 1000.]\n# -26200.979591836734\n```\n\n### Different greedy steps\n\nParameter `greedy_step` can be important in some tasks. It can be better to use `greedy_step = 2` or `greedy_step = 3` instead of default `greedy_step = 1`. And it's not good choice to use big `greedy_step` if we cannot afford to evaluate optimized function many times.\n\n```python\nimport numpy as np\nfrom DiscreteHillClimbing import Hill_Climbing_descent\n\n\ndef func(array):\n    return (np.sum(array) + np.sum(np.abs(array)))/(1 + array[0]*array[1])-array[3]*array[4]*(25-array[5])\n\n\navailable_predictors_values = [\n    np.array([10, 20, 35, 50]),\n    np.array([-5, 3, -43, 0, 80]),\n    np.arange(40, 500),\n    np.linspace(1, 100, num = 70),\n    np.array([65, 32, 112]),\n    np.array([1, 2, 3, 0, 9, 8]),\n    np.array([1, 11, 111, 123, 43]),\n    np.array([8, 9, 0, 5, 4, 3]),\n    np.array([-1000, -500, 500, 1000])\n]\n\n\nseeds = np.arange(100)\n\ngreedys = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nresults = np.empty(len(greedys))\n\nfor i, g in enumerate(greedys):\n    vals = []\n    for s in seeds:\n        _, value = Hill_Climbing_descent(function = func,\n            available_predictors_values = available_predictors_values,\n            random_counts_by_predictors = [4, 5, 2, 20, 20, 3, 6, 6, 4],\n            greedy_step = g,\n            start_solution = [v[0] for v in available_predictors_values],\n            max_function_evals = 100,\n            maximize = True,\n            seed = s)\n        vals.append(value)\n    \n    results[i] = np.mean(vals)\n\nimport pandas as pd\n\nprint(pd.DataFrame({'greedy_step': greedys, 'result': results}).sort_values(['result'], ascending=False))\n\n#    greedy_step       result\n# 1            2  1634.172483\n# 0            1  1571.038514\n# 2            3  1424.222610\n# 3            4  1320.051325\n# 4            5  1073.783527\n# 5            6   847.873058\n# 6            7   362.113555\n# 7            8    24.729801\n# 8            9  -114.200000\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PasaOpasen/DiscreteHillClimbing",
    "keywords": "solve,optimization,problem,fast,combinatorial,easy,discrete",
    "license": "",
    "maintainer": "Demetry Pascal",
    "maintainer_email": "",
    "name": "DiscreteHillClimbing",
    "package_url": "https://pypi.org/project/DiscreteHillClimbing/",
    "platform": null,
    "project_url": "https://pypi.org/project/DiscreteHillClimbing/",
    "project_urls": {
      "Homepage": "https://github.com/PasaOpasen/DiscreteHillClimbing"
    },
    "release_url": "https://pypi.org/project/DiscreteHillClimbing/1.1.0/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "An easy python implementation of Hill Climbing algorithm for tasks with discrete variables",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13457266,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec9649f5b15789c77d6eb5c12f28cc791835e228316c8d47405272b1001222bb",
          "md5": "83dd7a75505949aff61d1ce17d9cfa7d",
          "sha256": "f936d934cc83d0fdf692d99b130c29539997db63e328ed6f45c9b53b8139ab24"
        },
        "downloads": -1,
        "filename": "DiscreteHillClimbing-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83dd7a75505949aff61d1ce17d9cfa7d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6768,
        "upload_time": "2020-12-05T10:49:38",
        "upload_time_iso_8601": "2020-12-05T10:49:38.602596Z",
        "url": "https://files.pythonhosted.org/packages/ec/96/49f5b15789c77d6eb5c12f28cc791835e228316c8d47405272b1001222bb/DiscreteHillClimbing-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44fe66fd75f031817c776e880070e60ff9ad3b96bc2858875e89edebde1b6917",
          "md5": "3c5ea015af99ac64a4bbf87d8abaae81",
          "sha256": "a4ffc203e74826aa6489639fd556b77031f157ea9f167d42b6fa56868cb8220a"
        },
        "downloads": -1,
        "filename": "DiscreteHillClimbing-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c5ea015af99ac64a4bbf87d8abaae81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5400,
        "upload_time": "2020-12-05T10:49:40",
        "upload_time_iso_8601": "2020-12-05T10:49:40.164935Z",
        "url": "https://files.pythonhosted.org/packages/44/fe/66fd75f031817c776e880070e60ff9ad3b96bc2858875e89edebde1b6917/DiscreteHillClimbing-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5da624d5fafc22de251ac7e448e12912a65aec5df9ded621c3f7a1a9cc8fb348",
          "md5": "66f4d2c582f4b8cbac927bf2c990f15e",
          "sha256": "ea1384f3e916c150829b9f7dd88e6839d9304d6223fb8cdcc34e8540644feafb"
        },
        "downloads": -1,
        "filename": "DiscreteHillClimbing-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66f4d2c582f4b8cbac927bf2c990f15e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6826,
        "upload_time": "2020-12-07T16:36:04",
        "upload_time_iso_8601": "2020-12-07T16:36:04.958644Z",
        "url": "https://files.pythonhosted.org/packages/5d/a6/24d5fafc22de251ac7e448e12912a65aec5df9ded621c3f7a1a9cc8fb348/DiscreteHillClimbing-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cd416f9cc392b48389b59ff3cbacc06878c1c58daf4e46149d4258df0837bd7",
          "md5": "de0ef2cb43d3b2f2e220e2c5799867c5",
          "sha256": "82890481dd1a99cf76446014d532e18826e3912093e48c5907db04629cfd95bb"
        },
        "downloads": -1,
        "filename": "DiscreteHillClimbing-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "de0ef2cb43d3b2f2e220e2c5799867c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5472,
        "upload_time": "2020-12-07T16:36:07",
        "upload_time_iso_8601": "2020-12-07T16:36:07.350937Z",
        "url": "https://files.pythonhosted.org/packages/8c/d4/16f9cc392b48389b59ff3cbacc06878c1c58daf4e46149d4258df0837bd7/DiscreteHillClimbing-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eae65dfc1111684da2688589ae5c7ccdf5e123152c72489adc90024d6d9487ed",
          "md5": "e912fdc03ed2fa9cf754d74fa0d67065",
          "sha256": "33dd24b563445e31c80a7c032bca2a5ec854b2fa45f7536c123deb3ba5088f9b"
        },
        "downloads": -1,
        "filename": "DiscreteHillClimbing-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e912fdc03ed2fa9cf754d74fa0d67065",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6833,
        "upload_time": "2020-12-07T16:42:01",
        "upload_time_iso_8601": "2020-12-07T16:42:01.860569Z",
        "url": "https://files.pythonhosted.org/packages/ea/e6/5dfc1111684da2688589ae5c7ccdf5e123152c72489adc90024d6d9487ed/DiscreteHillClimbing-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c8a48dd607eb0485dc5b413c949794db738386b7000d7bb023c86f4a494a478",
          "md5": "d957904c873d0978073a45aed4b7ffdd",
          "sha256": "5dab4b000015e7a6d3ab8d8ac6e4d5a589c5a0b49e3b9960433ffe1820f71ba8"
        },
        "downloads": -1,
        "filename": "DiscreteHillClimbing-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d957904c873d0978073a45aed4b7ffdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5471,
        "upload_time": "2020-12-07T16:42:03",
        "upload_time_iso_8601": "2020-12-07T16:42:03.514346Z",
        "url": "https://files.pythonhosted.org/packages/6c/8a/48dd607eb0485dc5b413c949794db738386b7000d7bb023c86f4a494a478/DiscreteHillClimbing-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9964c9219932d8d4b8665d4b1ef6f818ae546cc026607760c05f8f12c2fc43dc",
          "md5": "6a2f243b9b8611324389feacb3df25c1",
          "sha256": "bc0cfdbb141aab2201be916687d97c1980247d7a4a38c781cf2345ee3b9a0bee"
        },
        "downloads": -1,
        "filename": "DiscreteHillClimbing-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a2f243b9b8611324389feacb3df25c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9104,
        "upload_time": "2022-04-08T19:16:06",
        "upload_time_iso_8601": "2022-04-08T19:16:06.268053Z",
        "url": "https://files.pythonhosted.org/packages/99/64/c9219932d8d4b8665d4b1ef6f818ae546cc026607760c05f8f12c2fc43dc/DiscreteHillClimbing-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b012d1f0dbb609e21ece787b199443223469efdb76adeec77907d6cabc12b86",
          "md5": "f17253d529648fcbb0a64468244c271c",
          "sha256": "f68f3af74d4a3c5b5aa42fb251b3662dc07df1f6f1a3028e535e990fff21e208"
        },
        "downloads": -1,
        "filename": "DiscreteHillClimbing-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f17253d529648fcbb0a64468244c271c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6514,
        "upload_time": "2022-04-08T19:16:08",
        "upload_time_iso_8601": "2022-04-08T19:16:08.286718Z",
        "url": "https://files.pythonhosted.org/packages/8b/01/2d1f0dbb609e21ece787b199443223469efdb76adeec77907d6cabc12b86/DiscreteHillClimbing-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9964c9219932d8d4b8665d4b1ef6f818ae546cc026607760c05f8f12c2fc43dc",
        "md5": "6a2f243b9b8611324389feacb3df25c1",
        "sha256": "bc0cfdbb141aab2201be916687d97c1980247d7a4a38c781cf2345ee3b9a0bee"
      },
      "downloads": -1,
      "filename": "DiscreteHillClimbing-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6a2f243b9b8611324389feacb3df25c1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9104,
      "upload_time": "2022-04-08T19:16:06",
      "upload_time_iso_8601": "2022-04-08T19:16:06.268053Z",
      "url": "https://files.pythonhosted.org/packages/99/64/c9219932d8d4b8665d4b1ef6f818ae546cc026607760c05f8f12c2fc43dc/DiscreteHillClimbing-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b012d1f0dbb609e21ece787b199443223469efdb76adeec77907d6cabc12b86",
        "md5": "f17253d529648fcbb0a64468244c271c",
        "sha256": "f68f3af74d4a3c5b5aa42fb251b3662dc07df1f6f1a3028e535e990fff21e208"
      },
      "downloads": -1,
      "filename": "DiscreteHillClimbing-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f17253d529648fcbb0a64468244c271c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6514,
      "upload_time": "2022-04-08T19:16:08",
      "upload_time_iso_8601": "2022-04-08T19:16:08.286718Z",
      "url": "https://files.pythonhosted.org/packages/8b/01/2d1f0dbb609e21ece787b199443223469efdb76adeec77907d6cabc12b86/DiscreteHillClimbing-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}