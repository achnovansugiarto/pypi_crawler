{
  "info": {
    "author": "Bruce Merry",
    "author_email": "bmerry@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: AsyncIO",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Topic :: Software Development :: Testing :: Mocking"
    ],
    "description": "# A solipsist event loop\n\nasync-solipsism provide a Python asyncio event loop that does not interact with\nthe outside world at all. This is ideal for writing unit tests that intend to\nmock out real-world interactions. It makes for tests that are reliable\n(unaffected by network outages), reproducible (not affected by random timing\neffects) and portable (run the same everywhere).\n\n## Features\n\n### Clock\n\nA very handy feature is that time runs infinitely fast! What's more, time\nadvances only when explicitly waiting. For example, this code will print out\ntwo times that are exactly 60s apart, and will take negligible real time to\nrun:\n\n```python\nprint(loop.time())\nawait asyncio.sleep(60)\nprint(loop.time())\n```\n\nThis also provides a handy way to ensure that all pending callbacks have a\nchance to run: just sleep for a second.\n\nThe simulated clock has microsecond resolution, independent of whatever\nresolution the system clock has. This helps ensure that tests behave the same\nacross operating systems.\n\nSometimes buggy code or a buggy test will await an event that will never\nhappen. For example, it might wait for data to arrive on a socket, but forget\nto insert data into the other end. If async-solipsism detects that it will\nnever wake up again, it will raise a `SleepForeverError` rather than leaving\nyour test to hang.\n\n### Sockets\n\nWhile real sockets cannot be used, async-solipsism provides mock sockets that\nimplement just enough functionality to be used with the event loop. Sockets\nare obtained by calling `async_solipsism.socketpair()`, which returns two\nsockets that are connected to each other. They can then be used with event\nloop functions like `sock_sendall` or `create_connection`.\n\nBecause the socket implementation is minimal, you may run into cases where\nthe internals of asyncio try to call methods that aren't implemented. Pull\nrequests are welcome.\n\nEach direction of flow implements a buffer that holds data written to the one\nsocket but not yet received by the other. If this buffer fills up, write calls\nwill raise `BlockingIOError`, just like a real non-blocking socket. This can\nbe used to test that your protocol properly handles flow control. The size of\nthese buffers can be changed with the optional `capacity` argument to\n`socketpair`.\n\n### Streams\n\nAs a convenience, it is possible to open two pairs of streams that are\nconnected to each other, with\n\n```\n((reader1, writer1), (reader2, writer2)) = await async_solipsism.stream_pairs()\n```\n\nAnything written to `writer1` will be received by `reader2`, and anything\nwritten to `writer2` will be received by `reader1`.\n\n### Servers\n\nIt is also possible to use the asyncio functions for starting servers and\nconnecting to them. You can supply any host name and port, even if they're not\nactually associated with the machine! For example,\n\n```python\nserver = await asyncio.start_server(callback, 'test.invalid', 1234)\nreader, writer = await asyncio.open_connection('test.invalid', 1234)\n```\n\nwill start a server, then open a client connection to it. The `reader` and\n`writer` represent the client end of the connection, and the `callback` will\nbe given the server end of the connection.\n\nThe host and port are associated with the event loop, and are remembered until\nthe server is closed. Attempting to connect after closing the server, or to an\naddress that hasn't been registered, will raise a `ConnectionRefusedError`.\n\nIf you don't want the bother of picking non-colliding ports, you can pass a\nport number of 0, and async-solipsism will bind the first port number above\n60000 that is unused.\n\n### Integration with pytest-asyncio\n\nasync-solipsism and pytest-asyncio complement each other well: just write a\ncustom `event_loop` fixture in your test file or `conftest.py` and it will\noverride the default provided by pytest-asyncio:\n\n```python\n@pytest.fixture\ndef event_loop():\n    loop = async_solipsism.EventLoop()\n    yield loop\n    loop.close()\n```\n\n### Integration with pytest-aiohttp\n\nA little extra work is required to work with aiohttp's test utilities, but it\nis possible. The example below requires at least aiohttp 3.8.0.\n\n```python\nimport async_solipsism\nimport pytest\nfrom aiohttp import web, test_utils\n\n\n@pytest.fixture\ndef event_loop():\n    loop = async_solipsism.EventLoop()\n    yield loop\n    loop.close()\n\n\ndef socket_factory(host, port, family):\n    return async_solipsism.ListenSocket((host, port))\n\n\nasync def test_integration():\n    app = web.Application()\n    async with test_utils.TestServer(app, socket_factory=socket_factory) as server:\n        async with test_utils.TestClient(server) as client:\n            resp = await client.post(\"/hey\", json={})\n            assert resp.status == 404\n```\n\nNote that this relies on pytest-asyncio (in auto mode) and does not use\npytest-aiohttp. The fixtures provided by the latter do not support overriding\nthe socket factory, although it may be possible to do by monkeypatching. In\npractice you will probably want to define your own fixtures for the client\nand server.\n\n## Limitations\n\nThe requirement to have no interaction with the outside world naturally\nimposes some restrictions. Other restrictions exist purely because I haven't\ngotten around to figuring out what a fake version should look like and\nimplementing it. The following are all unsupported:\n\n- `call_soon_threadsafe`, except when called from the thread running the\n  event loop (it just forwards to `call_soon`). Multithreading is\n  fundamentally incompatible with the fast-forward clock.\n- `getaddrinfo` and `getnameinfo`\n- `connect_read_pipe` and `connect_write_pipe`\n- signal handlers\n- subprocesses\n- TLS/SSL\n- datagrams (UDP)\n- UNIX domain sockets\n- any Windows-specific features\n\n`run_in_executor` is supported, but it blocks the event loop while the task\nruns in the executor. This works fine for short-running tasks like reading\nsome data from a file, but is not suitable if the task is a long-running one\nsuch as a sidecar server.\n\nCalling functions that are not supported will generally raise\n`SolipsismError`.\n\n## Changelog\n\n### 0.5\n\n- Map port 0 to an unused port.\n\n### 0.4\n\n- Allow `call_soon_threadsafe` from the same thread.\n- Don't warn when `SO_KEEPALIVE` is set on a socket.\n- Update instructions for use with aiohttp.\n- Add a pyproject.toml.\n\n### 0.3\n\n- Fix `start_server` with an explicit socket.\n- Update README with an example of aiohttp integration.\n\n### 0.2\n\n- Numerous fixes to make the fake sockets behave more like real ones.\n- Sockets now return IPv6 addresses from `getsockname`.\n- Implement `setsockopt`.\n- Introduce `SolipsismWarning` base class for warnings.\n\n### 0.1\n\nFirst release.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bmerry/async-solipsism",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "async-solipsism",
    "package_url": "https://pypi.org/project/async-solipsism/",
    "platform": null,
    "project_url": "https://pypi.org/project/async-solipsism/",
    "project_urls": {
      "Homepage": "https://github.com/bmerry/async-solipsism"
    },
    "release_url": "https://pypi.org/project/async-solipsism/0.5/",
    "requires_dist": [
      "pytest ; extra == 'test'",
      "pytest-asyncio ; extra == 'test'",
      "pytest-mock ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Asyncio event loop that doesn't interact with the outside world",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13876152,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1abdce89315ae09b9a5547b68bfed7340b0b2d27b6b6c175885fdf89732ab2b",
          "md5": "85107340f921cd39f8e5e068475255b3",
          "sha256": "74c5798fe2e5608b99492c3612e0e0ac7d0aa381a880bfc6a9b333517e9e9a9d"
        },
        "downloads": -1,
        "filename": "async_solipsism-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85107340f921cd39f8e5e068475255b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23330,
        "upload_time": "2020-08-01T11:28:52",
        "upload_time_iso_8601": "2020-08-01T11:28:52.274779Z",
        "url": "https://files.pythonhosted.org/packages/e1/ab/dce89315ae09b9a5547b68bfed7340b0b2d27b6b6c175885fdf89732ab2b/async_solipsism-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a96f3036adb02fec5702a2826cfaa996869226965bb122304cc2d0897279cc1",
          "md5": "66463afcef431912edc9376d2da6730d",
          "sha256": "baa0aebcc7c4fe5ec43dec781e2ef6d28334c8539fe4a19536a540ccf7e1219c"
        },
        "downloads": -1,
        "filename": "async_solipsism-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66463afcef431912edc9376d2da6730d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23958,
        "upload_time": "2020-08-09T12:05:37",
        "upload_time_iso_8601": "2020-08-09T12:05:37.436817Z",
        "url": "https://files.pythonhosted.org/packages/2a/96/f3036adb02fec5702a2826cfaa996869226965bb122304cc2d0897279cc1/async_solipsism-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39c131e680cf372d9bc1c6ec9a99f86d148347a3afd7f92ac2017659469ef09a",
          "md5": "e48aea56ee3807b75cbbef31699ddb72",
          "sha256": "46fb8720c04b729d0bf52398c984dc65ae3e81d9476c70e79f0d3ab9ab01fe85"
        },
        "downloads": -1,
        "filename": "async_solipsism-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e48aea56ee3807b75cbbef31699ddb72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24441,
        "upload_time": "2021-07-02T19:23:30",
        "upload_time_iso_8601": "2021-07-02T19:23:30.512180Z",
        "url": "https://files.pythonhosted.org/packages/39/c1/31e680cf372d9bc1c6ec9a99f86d148347a3afd7f92ac2017659469ef09a/async_solipsism-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df5fa5ea191b47b823bc9004d2031787fa7383c1bd0c5d62eba552409a4b18e5",
          "md5": "945f6413ab6e9d3cc39ef4d496e26dde",
          "sha256": "b3c4d382dd179f9545f3cfdc2088c776f4ce7a4fbc8e0713a636c83f81312a9b"
        },
        "downloads": -1,
        "filename": "async_solipsism-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "945f6413ab6e9d3cc39ef4d496e26dde",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24681,
        "upload_time": "2022-05-19T07:26:08",
        "upload_time_iso_8601": "2022-05-19T07:26:08.484550Z",
        "url": "https://files.pythonhosted.org/packages/df/5f/a5ea191b47b823bc9004d2031787fa7383c1bd0c5d62eba552409a4b18e5/async_solipsism-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a302b82a00d64c85485e50ff17b5867b957b75dde176fc512a149053f013afa",
          "md5": "423cf74cd90546bccd2f8d39590f7f1a",
          "sha256": "174242160a17bd3781aad10be0727c888b6526a340d348b693579f422f902f76"
        },
        "downloads": -1,
        "filename": "async-solipsism-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "423cf74cd90546bccd2f8d39590f7f1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26761,
        "upload_time": "2022-05-19T07:26:10",
        "upload_time_iso_8601": "2022-05-19T07:26:10.136222Z",
        "url": "https://files.pythonhosted.org/packages/5a/30/2b82a00d64c85485e50ff17b5867b957b75dde176fc512a149053f013afa/async-solipsism-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7df779741f60d537dd33473f98a6b2c6deeb4b70cecdc84aa9193863d945c045",
          "md5": "eadc4e27292883ececdb85cf23cb45e2",
          "sha256": "281905d69ce7c30677c27e66503e5c0316433ec3b3285fa7da8f6badb6d52477"
        },
        "downloads": -1,
        "filename": "async_solipsism-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eadc4e27292883ececdb85cf23cb45e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24751,
        "upload_time": "2022-05-20T09:33:18",
        "upload_time_iso_8601": "2022-05-20T09:33:18.642611Z",
        "url": "https://files.pythonhosted.org/packages/7d/f7/79741f60d537dd33473f98a6b2c6deeb4b70cecdc84aa9193863d945c045/async_solipsism-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1700b5d6e1a2240e9e1572246b5f203e1a7573e3f738d70fcf63160e9ac4434f",
          "md5": "44b487bece168062aff0f9a0d6f2e9b9",
          "sha256": "a0d82f212b97d5ad73e253ad76d305196744c51412ece30c851401ac55ea63da"
        },
        "downloads": -1,
        "filename": "async-solipsism-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "44b487bece168062aff0f9a0d6f2e9b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26887,
        "upload_time": "2022-05-20T09:33:20",
        "upload_time_iso_8601": "2022-05-20T09:33:20.190105Z",
        "url": "https://files.pythonhosted.org/packages/17/00/b5d6e1a2240e9e1572246b5f203e1a7573e3f738d70fcf63160e9ac4434f/async-solipsism-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7df779741f60d537dd33473f98a6b2c6deeb4b70cecdc84aa9193863d945c045",
        "md5": "eadc4e27292883ececdb85cf23cb45e2",
        "sha256": "281905d69ce7c30677c27e66503e5c0316433ec3b3285fa7da8f6badb6d52477"
      },
      "downloads": -1,
      "filename": "async_solipsism-0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eadc4e27292883ececdb85cf23cb45e2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24751,
      "upload_time": "2022-05-20T09:33:18",
      "upload_time_iso_8601": "2022-05-20T09:33:18.642611Z",
      "url": "https://files.pythonhosted.org/packages/7d/f7/79741f60d537dd33473f98a6b2c6deeb4b70cecdc84aa9193863d945c045/async_solipsism-0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1700b5d6e1a2240e9e1572246b5f203e1a7573e3f738d70fcf63160e9ac4434f",
        "md5": "44b487bece168062aff0f9a0d6f2e9b9",
        "sha256": "a0d82f212b97d5ad73e253ad76d305196744c51412ece30c851401ac55ea63da"
      },
      "downloads": -1,
      "filename": "async-solipsism-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "44b487bece168062aff0f9a0d6f2e9b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26887,
      "upload_time": "2022-05-20T09:33:20",
      "upload_time_iso_8601": "2022-05-20T09:33:20.190105Z",
      "url": "https://files.pythonhosted.org/packages/17/00/b5d6e1a2240e9e1572246b5f203e1a7573e3f738d70fcf63160e9ac4434f/async-solipsism-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}