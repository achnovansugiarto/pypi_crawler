{
  "info": {
    "author": "Neurotechnology Group TU Berlin",
    "author_email": "bbcpy@tu-berlin.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# BBCpy\r\n\r\n[![Build Status](https://github.com/bbcpy/bbcpy/blob/2354d48ec0beb8aaa31b87ef3943428419f04c4a/.github/test-coverage.svg)](https://travis-ci.com/pulyaevskiy/test-coverage)\r\n![Coverage](https://github.com/bbcpy/bbcpy/blob/2354d48ec0beb8aaa31b87ef3943428419f04c4a/.github/docstr-coverage.svg)\r\n\r\n\r\nWrite everything that is needed to be known to develop within this project into this readme. \r\nThis serves as a reminder to ourselves but also to facilitate collaboration. \r\n\r\nDon't hesitate too long to write what you find or know. If its wrong it still helps to progress from there. \r\nIf someone else knows better that is good for the project. \r\nTry to describe also some 'easy' things that can be googled but not the very basic python stuff. \r\nIt's always good to document why we did certain things in certain ways.\r\n\r\n## Basic Structure\r\n\r\nThere are different specific datatypes for each application. These come with a number of methods and are derived from \r\nnumpys np.ndarray. This makes them compatible with scikit-learn, pytorch and other toolboxes.\r\n\r\n### Data structure and Indexing\r\nThe data structure is similar to scikit-learn. The first dimension is the epochs, the second the channels and the last \r\nthe time domain.\r\n\r\nIndexing also works with strings to direclty work with units or channel names e.g..\r\n```\r\n#select all but some (here exclude all frontal and fronto-central) channels:\r\nprint(imagVPaw['~F*'].shape)\r\n#can also be combined - selecting all frontal channels except for 7 and 8s e.g.:\r\nprint(imagVPaw[['F?', '~*7', '~*8']].shape)\r\nprint(imagVPaw[['F?,~*7,~*8']].chans)\r\n#adding advanced slicing with units - e.g. 2s to 5s in steps of 100ms:\r\nprint(imagVPaw['~F*', '2s:5s:100ms'].shape)\r\n#you may also select single time points:\r\nprint(imagVPaw[:, '2s,5s,100ms'].shape)\r\n#the same can be separated in a list:\r\nprint(imagVPaw[:, ['2s', '5s', '100ms']].shape)\r\n\r\ncnt_bp = imagVPaw.lfilter(band)\r\nepo_bp = cnt_bp.epochs(ival)\r\n\r\n#also works on epoched data, also with comma separation, each taken individually\r\nprint(epo_bp[:, ['C?,~*3,~*4', 'FC*,~*3,~*4']].chans)\r\n```\r\n\r\n\r\n### Functions\r\nThe *bbcpy.function* libraries consists of different submodules that are named by their specification. Everything here \r\ncan be directly used within our scikit-learn compatible *bbcpy.pipeline*.\r\n\r\nEverything in *bbcpy.functions* that starts with a capital letter (*bbcpy.spatial.CSP* e.g.) is directly implemented as \r\na transformer and needs to be fitted (*.fit()*) before being applied (*.transform()*).\r\n\r\nIt is easy to import other functions into the toolbox using *bbcpy.functions.base.ImportFunc*. You can also directly use\r\nnumpy compatible functions in the pipeline but that does not guarantee that the indivudal datatype is not lost and\r\n(standard) parameters are not straightforwardly implemented.\r\n\r\n*pipeline = bbcpy.pipeline.make_pipeline(np.mean)* calculates the mean over all dimensions, while\r\n*pipeline = bbcpy.pipeline.make_pipeline(bbcpy.functions.base.ImportFunc(np.mean, axis=-1, outClass='same'))* makes it \r\nwork in the time domain and keeps the class.\r\n\r\nYou can also import a function to be used on data directly:\r\nmean = bbcpy.functions.base.ImportFunc(np.mean, axis=-1, outClass='same')\r\nmean(data)\r\n\r\n\r\n## Demo.py\r\nThere is a demo.py, which you can use to test some basic functionalities/play around etc.\r\n\r\n## Development\r\n\r\nThis project defines specific requirement versions. To minimize version conflicts with already installed libraries \r\nyou should either set up a virtual environment or use a docker container for development.\r\nIn case you use an IDE (like PyCharm) you might need to configure it to use the virtual environment as-well.\r\n\r\nIn case your installed `python --version` differs from the required 3.10 the docker approach may be appropriate.\r\n\r\nDaniel does not like that. We want a toolbox that rather works everywhere. \r\nHe thinks we should only specify a minimum version.\r\nAlso some of the selcted versions did lead to errors.\r\n\r\n### Package Structure\r\nThe folder structure of the project is inline with the necessities of a package. There needs to be a folder named after \r\nthe project in order to be importable using `import bbpy.whatever` etc.\r\nWithin the bbcpy folder the actual code should go. The submodules are organized in subfolders. \r\nThe structure is sofar just a suggestion and debatable (best via github issues etc). \r\nRefactoring works like a charm with pycharm.\r\n\r\nEvery folder that has an `__init__.py` can basically be imported. \r\nThe file can be empty but then nothing is imported by `import bbcpy` only the folder can be searched and imported \r\nby `from bbcpy import types` e.g..\r\n\r\n### Virtual Environment\r\n\r\nPython 3 supports virtual environments natively with the [venv module](https://docs.python.org/3/tutorial/venv.html).\r\n\r\nThe following commands create the virtual environment `.venv` and install all dependencies defined in \r\n`requirements.txt`. The virtual environment needs to be active in the terminal you work with. \r\nUse `source .venv/bin/activate` to activate it in the bash shell or `.venv\\Scripts\\activate.bat` on Windows. \r\nMore information can be found [here](https://docs.python.org/3/tutorial/venv.html).\r\n\r\n*Note: `python` may refer to version 2 on your system, in that case use `python3` in the commands instead.*\r\n\r\nExample for Linux with bash shell:\r\n```sh\r\n# create virtual environment \"venv\"\r\npython -m venv .venv\r\n# activate environment\r\nsource .venv/bin/activate\r\n# install dependencies\r\npip install -r requirements.txt\r\n```\r\n\r\n\r\n\r\n### Docker DEPRECATED\r\n \r\nWARNING THIS DOCKER DOC IS DEPRECATED COPIED FROM AN OLD PROJECT. NEEDS TO BE UPDATED AS SOON AS WE'VE SET UP THE GIT  \r\n\r\nThe docker container contains python 3.8 and all dependencies from the `requirements.txt` at the time of building and is\r\nbased on a modern ubuntu image.  \r\nTo download from or publish to the container registry you need to log in first with your tu gitlab account. \r\nIn case you have 2FA enabled you need to use a \r\n[personal access token](https://git.tu-berlin.de/help/user/profile/personal_access_tokens.md) instead of your password. \r\nThe scopes `read_registry` and `write_registry` should suffice.\r\n\r\nThe following command creates and starts the container named `bci-dev` and mounts the current directory inside.\r\n\r\n```sh\r\n# login if you have not already\r\ndocker login git.tu-berlin.de:5000\r\n# run container and access it's terminal\r\ndocker run -it --name bci-dev -v \"$(pwd)\":/home git.tu-berlin.de:5000/roydick1.0/bcifntd2020ws:dev\r\n```\r\n\r\nYou can work and edit files normally and may test and execute from the command line within the container.  \r\nThe python executable is `python3`.\r\n\r\nIf you need other dependencies you can simply use `apt` or `pip` to install them inside the container or edit the \r\n`requirements.txt` and build your own image with the `Dockerfile`.\r\n\r\n### Testing\r\n\r\nCurrently, a badly copied and not working unit_testing with nose is implemented. \r\nIf you run\r\n```sh \r\npy setup.py test\r\n```\r\nIt complains to be deprecated and to rather use tox:\r\n>WARNING: Testing via this command is deprecated and will be removed in a future version. Users looking for a generic test entry point independent of test runner are encouraged to use tox.\r\n\r\nTo run nose alone, just type:\r\n```sh\r\n#install nose first (see https://python-packaging.readthedocs.io/en/latest/testing.html)\r\npip install nose\r\n#then run tests \r\nnosetests\r\n```\r\nThe tests should go into the `bbcpy/tests` directory.\r\n\r\n### Building Wheels to use with pip\r\n\r\nCurrently and old-fashioned installation using setuptools is implemented which gives the following waring: \r\n> >SetuptoolsDeprecationWarning: setuptools.installer is deprecated. Requirements should be satisfied by a PEP 517 installer.\r\n\r\nIn order to build wheels with pip, first run the setup.py and build the package (/build):\r\n```sh   \r\npy setup.py build \r\n```\r\nIn the setup.py all the settings for the installation etc are given. \r\nThis includes descriptions and info that will be contained on pypi. Please update. \r\nAlso the version number is initialized, here.\r\n\r\nAfter that, use build to construct the wheels distribution (/dist):\r\n```sh\r\n#if you haven't so far, install build\r\npy -m pip install --upgrade build     \r\n#then run it\r\npy -m build\r\n```\r\nand then finally upload the wheel to pypi:\r\n```sh\r\n#if you haven't so far, install twine\r\npip install twine\r\n#and then run it to upload to pypi\r\npy -m twine upload --repository pypi dist/* \r\n```\r\nFinally, the new version is uploaded and can be installed anywhere by\r\n```sh\r\npip install bbcpy\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bbcpy/bbcpy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bbcpy",
    "package_url": "https://pypi.org/project/bbcpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/bbcpy/",
    "project_urls": {
      "Homepage": "https://github.com/bbcpy/bbcpy"
    },
    "release_url": "https://pypi.org/project/bbcpy/0.1.1/",
    "requires_dist": [
      "scikit-learn",
      "pyriemann",
      "numpy",
      "scipy",
      "matplotlib",
      "pytest ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "A novel Python BCI toolbox",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16768984,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d5c6230eacdf2f43212ef1af893a7bf91e8ffe339002c67b1d920a11af62a55",
          "md5": "dc1fd0e75b8731f315b6fc702293d379",
          "sha256": "cb1398d15ec35f0b9170f2e11fd60a4f97bf684e3e9d12255d95d36ac9e34178"
        },
        "downloads": -1,
        "filename": "bbcpy-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc1fd0e75b8731f315b6fc702293d379",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5001,
        "upload_time": "2022-02-08T19:09:56",
        "upload_time_iso_8601": "2022-02-08T19:09:56.422515Z",
        "url": "https://files.pythonhosted.org/packages/5d/5c/6230eacdf2f43212ef1af893a7bf91e8ffe339002c67b1d920a11af62a55/bbcpy-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1c19c87f414dc853185af3bff5da82a137b2f9bb0e086d7abb2361a5fb4c4cd",
          "md5": "92ec67e838ac51317d93a41051839467",
          "sha256": "490192910475a9f2cee2742a44cd3a1449a57d4dfdb714f7ccf17f4cab604620"
        },
        "downloads": -1,
        "filename": "bbcpy-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "92ec67e838ac51317d93a41051839467",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5458,
        "upload_time": "2022-02-08T19:09:58",
        "upload_time_iso_8601": "2022-02-08T19:09:58.024802Z",
        "url": "https://files.pythonhosted.org/packages/a1/c1/9c87f414dc853185af3bff5da82a137b2f9bb0e086d7abb2361a5fb4c4cd/bbcpy-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d492006ee8f68bae306ec8ae9784ec6dcce008070366d7964e87653705ac3ae1",
          "md5": "9177425199ffc6ccf121cb19feb2823c",
          "sha256": "a10fdfc503d89dbe068921211b80cecd2dad46fa506af2753c1a2bbff1c63558"
        },
        "downloads": -1,
        "filename": "bbcpy-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9177425199ffc6ccf121cb19feb2823c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60183,
        "upload_time": "2023-02-09T14:17:37",
        "upload_time_iso_8601": "2023-02-09T14:17:37.137226Z",
        "url": "https://files.pythonhosted.org/packages/d4/92/006ee8f68bae306ec8ae9784ec6dcce008070366d7964e87653705ac3ae1/bbcpy-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c778e1046fc9c04d44c3732a2f29247180b8eb0752890684e296eeb80751f8d7",
          "md5": "bad224e8f4d6bdd77985dac08ba0ae12",
          "sha256": "a4c1d78706c5a90b01c3849b6073aad783817c7f5aa3ffde5a2accedf74427e5"
        },
        "downloads": -1,
        "filename": "bbcpy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bad224e8f4d6bdd77985dac08ba0ae12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51747,
        "upload_time": "2023-02-09T14:17:38",
        "upload_time_iso_8601": "2023-02-09T14:17:38.693120Z",
        "url": "https://files.pythonhosted.org/packages/c7/78/e1046fc9c04d44c3732a2f29247180b8eb0752890684e296eeb80751f8d7/bbcpy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d492006ee8f68bae306ec8ae9784ec6dcce008070366d7964e87653705ac3ae1",
        "md5": "9177425199ffc6ccf121cb19feb2823c",
        "sha256": "a10fdfc503d89dbe068921211b80cecd2dad46fa506af2753c1a2bbff1c63558"
      },
      "downloads": -1,
      "filename": "bbcpy-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9177425199ffc6ccf121cb19feb2823c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 60183,
      "upload_time": "2023-02-09T14:17:37",
      "upload_time_iso_8601": "2023-02-09T14:17:37.137226Z",
      "url": "https://files.pythonhosted.org/packages/d4/92/006ee8f68bae306ec8ae9784ec6dcce008070366d7964e87653705ac3ae1/bbcpy-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c778e1046fc9c04d44c3732a2f29247180b8eb0752890684e296eeb80751f8d7",
        "md5": "bad224e8f4d6bdd77985dac08ba0ae12",
        "sha256": "a4c1d78706c5a90b01c3849b6073aad783817c7f5aa3ffde5a2accedf74427e5"
      },
      "downloads": -1,
      "filename": "bbcpy-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bad224e8f4d6bdd77985dac08ba0ae12",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 51747,
      "upload_time": "2023-02-09T14:17:38",
      "upload_time_iso_8601": "2023-02-09T14:17:38.693120Z",
      "url": "https://files.pythonhosted.org/packages/c7/78/e1046fc9c04d44c3732a2f29247180b8eb0752890684e296eeb80751f8d7/bbcpy-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}