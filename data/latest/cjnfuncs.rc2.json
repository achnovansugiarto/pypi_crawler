{
  "info": {
    "author": "",
    "author_email": "Chris Nelson <github@cjnaz.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# cjnfuncs - A collection of core functions for script writing\n\nLogging, Configuration files, Email, Lock files, Deploying tool script template files, ...  \n\n- A package template using cjnfuncs is available at https://github.com/cjnaz/tool_template, which \nis the basis of PyPI posted tools such as:\n  - [lanmonitor](https://pypi.org/project/lanmonitor/)\n  - [wanstatus](https://pypi.org/project/wanstatus/)\n  - [routermonitor](https://pypi.org/project/routermonitor/)\n\n- Developed and tested on Python 3.6.8, and supported on all higher Python versions.\n- Developed on Linux, supported also on Windows (tested on Windows 10).\n- In this documentation, \"tool script\" refers to a Python project that imports and uses cjnfuncs.  \nSome may be simple scripts, and others may themselves be installed packages.\n\n\n## Classes and functions\n- [setuplogging](#setuplogging)\n- [set_toolname](#set_toolname)\n- [mungePath](#mungePath)\n- [deploy_files](#deploy_files)\n- [config_item](#config_item)\n- [loadconfig](#loadconfig)\n- [getcfg](#getcfg)\n- [timevalue](#timevalue)\n- [retime](#retime)\n- [requestlock](#requestlock)\n- [releaselock](#releaselock)\n- [snd_notif](#snd_notif)\n- [snd_email](#snd_email)\n\n<br/>\n\n<a id=\"setuplogging\"></a>\n\n---\n\n# setuplogging (call_logfile=None, call_logfile_wins=False, config_logfile=None) - Set up the root logger\n\nLogging may be directed to the console (stdout), or to a file.  Each time setuplogging()\nis called the current/active log file (or console) may be reassigned.\n\nsetuplogging() works standalone or in conjunction with loadconfig().\nIf a loaded config file has a `LogFile` parameter then loadconfig() passes it thru\n`config_logfile`.  loadconfig() also passes along any `call_logfile` and `call_logfile_wins`\nthat were passed to loadconfig() from the tool script.  This mechanism allows the tool script\nto override any config `LogFile`, such as for directing output to the console for a tool script's \ninteractive use, eg:\n    `setuplogging (call_logfile=None, call_logfile_wins=True, config_logfile='some_logfile.txt')`\n\n    \n### Parameters\n`call_logfile`\n- Potential log file passed from the tool script.  Selected by `call_logfile_wins = True`.\ncall_logfile may be an absolute path or relative to the tool.log_dir_base directory.  \n`None` specifies the console.\n\n`call_logfile_wins`\n- If True, the `call_logfile` is selected.  If False, the `config_logfile` is selected.\n\n`config_logfile`\n- Potential log file passed from loadconfig() if there is a `LogFile` param in the \nloaded config.  Selected by `call_logfile_wins = False`.\nconfig_logfile may be absolute path or relative to the tool.log_dir_base directory.  \n`None` specifies the console.\n\n\n### Returns\n- NoneType\n    \n<br/>\n\n<a id=\"set_toolname\"></a>\n\n---\n\n# Class set_toolname (toolname) - Set target directories for config and data storage\n\nset_toolname() centralizes and establishes a set of base directory path variables for use in\nthe tool script.  It looks for existing directories, based on the specified toolname, in\nthe site-wide (system-wide) and then user-specific locations.  Specifically, site-wide \nconfig and/or data directories are looked for at (eg) `/etc/xdg/cjnfuncs_testenv` and/or \n`/usr/share/cjnfuncs_testenv`.  If site-wide directories are not \nfound then user-specific is assumed.  No directories are created.\n\n\n### Parameter\n`toolname`\n- Name of the tool, type str()\n\n\n### Returns\n- Handle to the `set_toolname()` instance\n\n\n### Member function\n`stats()`\n- Returns a str() listing of the available attributes of the instance\n\n\n### Behaviors, rules, and _variances from the XDG spec and/or the appdirs package_\n- set_toolname() uses the \n[appdirs package](https://pypi.org/project/appdirs/), which is a close implementation of the\n[XDG basedir specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html).\n\n- The `user` and `site`-prefixed attributes are as defined by the XDG spec and/or the appdirs package.  The \nnon-such-prefixed attributes are resolved based on the existing user or site environment, and are the attributes\nthat generally should be used within tool scripts.\n\n- For a `user` setup, the `.log_dir_base` is initially set to the `.user_data_dir` (variance from XDG spec).\nIf a config file is subsequently\nloaded then the `.log_dir_base` is changed to the `.user_config_dir`.  (Not changed for a `site` setup.)\nThus, for a `user` setup, logging is done to the default configuration directory.  This is a \nstyle variance, and can be reset in the tool script by reassigning: `tool.log_dir_base = tool.user_log_dir` (or any\nother directory) before calling loadconfig() or setuplogging().\n(The XDG spec says logging goes to the `.user_state_dir`, while appdirs sets it to the `.user_cache_dir/log`.)\n\n- The `.log_dir`, `.log_file`, and `.log_full_path` attributes are set by calls to setuplogging() or loadconfig(),\nand are initially set to `None` by set_toolname().\n\n- For a `site` setup, the `.site_data_dir` is set to `/usr/share/toolname`.  The XDG spec states that \nthe `.cache_dir` and `.state_dir` should be in the root user tree; however, set_toolname() sets these two \nalso to the `.site_data_dir`.\n\n\n### Examples\nGiven:\n```\ntool = set_toolname(\"cjnfuncs_testenv\")\nprint (tool.stats())\n```\n\nExample stats() for a user-specific setup:\n```\n    Stats for set_toolname <wanstatus>:\n    .toolname         :  wanstatus\n    .main_module      :  <module 'wanstatus.wanstatus' from '/<path-to-venv>/lib/python3.9/site-packages/wanstatus/wanstatus.py'>\n    .user_config_dir  :  /home/me/.config/wanstatus\n    .user_data_dir    :  /home/me/.local/share/wanstatus\n    .user_state_dir   :  /home/me/.local/state/wanstatus\n    .user_cache_dir   :  /home/me/.cache/wanstatus\n    .user_log_dir     :  /home/me/.cache/wanstatus/log\n    .site_config_dir  :  /etc/xdg/wanstatus\n    .site_data_dir    :  /usr/share/wanstatus\n    Based on found user or site dirs:\n    .env_defined      :  user\n    .config_dir       :  /home/me/.config/wanstatus\n    .data_dir         :  /home/me/.local/share/wanstatus\n    .state_dir        :  /home/me/.local/state/wanstatus\n    .cache_dir        :  /home/me/.cache/wanstatus\n    .log_dir_base     :  /home/me/.local/share/wanstatus\n    .log_dir          :  None\n    .log_file         :  None\n    .log_full_path    :  None\n```\n    \nExample stats() for a site setup (.site_config_dir and/or .site_data_dir exist):\n```\n    Stats for set_toolname <wanstatus>:\n    .toolname         :  wanstatus\n    .main_module      :  <module 'wanstatus.wanstatus' from '/<path-to-venv>/lib/python3.9/site-packages/wanstatus/wanstatus.py'>\n    .user_config_dir  :  /root/.config/wanstatus\n    .user_data_dir    :  /root/.local/share/wanstatus\n    .user_state_dir   :  /root/.local/state/wanstatus\n    .user_cache_dir   :  /root/.cache/wanstatus\n    .user_log_dir     :  /root/.cache/wanstatus/log\n    .site_config_dir  :  /etc/xdg/wanstatus\n    .site_data_dir    :  /usr/share/wanstatus\n    Based on found user or site dirs:\n    .env_defined      :  site\n    .config_dir       :  /etc/xdg/wanstatus\n    .data_dir         :  /usr/share/wanstatus\n    .state_dir        :  /usr/share/wanstatus\n    .cache_dir        :  /usr/share/wanstatus\n    .log_dir_base     :  /usr/share/wanstatus\n    .log_dir          :  None\n    .log_file         :  None\n    .log_full_path    :  None\n```\n    \n<br/>\n\n<a id=\"mungePath\"></a>\n\n---\n\n# Class mungePath (in_path=\"\", base_path=\"\", mkdir=False) - A clean interface for dealing with filesystem paths\n\n`mungePath()` is based on pathlib, producing Path type attributes and status booleans which may be used with all\npathlib.Path methods, such as .open().  `mungePath()` accepts paths in two parts - the tool script specific\nportion `in_path` and a `base_path` (prepended if `in_path` is relative), and returns an instance that may \nbe cleanly used in the tool script code.\nUser (~user/) and environment vars ($HOME/) are supported and expanded.\n\n\n### Parameters\n`in_path`\n- An absolute or relative path to a file or directory, such as `mydir/myfile.txt`.  \n\n`base_path`\n- An absolute or relative path to a file or directory, such as `~/.config/mytool`, prepended to `in_path` if\n`in_path` is a relative path.\n\n`mkdir`\n- Force-make a full directory path.  `in_path` / `base_path` is understood to be to a directory.\n\n\n### Returns\n- Handle to `mungePath()` instance\n\n\n### Instance attributes\n```\n    .full_path      Path        The full expanduser/expandvars path to a file or directory (may not exist)\n    .parent         Path        The directory above the .full_path\n    .name           str         Just the name.suffix of the .full_path\n    .is_absolute    Boolean     True if the .full_path starts from the filesystem root (isn't a relative path) \n    .is_relative    Boolean     Not .is_absolute\n    .exists         Boolean     True if the .full_path item (file or dir) actually exists\n    .is_file        Boolean     True if the .full_path item exists and is a file\n    .is_dir         Boolean     True if the .full_path item exists and is a directory\n```\n\n### Member functions\n- mungePath.stats() - Return a str() listing all stats for the object\n- mungePath.refresh_stats() - Update the boolean state attributes for the object. Returns the object\nso that it may be used directly/immediately in the code.\n\n\n### Behaviors and rules\n- If `in_path` is a relative path (eg, `mydir/myfile.txt`) portion then the `base_path` is prepended.  \n- If both `in_path` and `base_path` are relative then the combined path will also be relative, usually to\nthe tool script directory (generally not useful).\n- If `in_path` is an absolute path (eg, `/tmp/mydir/myfile.txt`) then the `base_path` is ignored.\n- `in_path` and `base_path` may be type str(), Path(), or PurePath().\n- Symlinks are followed (not resolved).\n- User and environment vars are expanded, eg `~/.config` >> `/home/me/.config`, as does `$HOME/.config`.\n- The `.parent` is the directory containing (above) the `.full_path`.  If the object `.is_file` then `.parent` is the\ndirectory containing the file.  If the object `.is_dir` then the `.full_path` includes the end-point directory, and \n`.parent` is the directory above the end-point directory.\n- When using `mkdir=True` the combined `in_path` / `base_path` is understood to be a directory path (not\nto a file), and will be created if it does not already exist. (Uses pathlib.Path.mkdir()).  A FileExistsError \nis raised if you attempt to mkdir on top of an existing file.\n- See [GitHub repo](https://github.com/cjnaz/cjnfuncs) /tests/demo-mungePath.py for numerous application examples.\n\n\n### Example\n```\nGiven:\n    tool = set_toolname(\"mytool\")\n    xx = mungePath (\"mysubdir/file.txt\", tool.data_dir)\n    mungePath (xx.parent, mkdir=True)\n    if not xx.exists:\n        with xx.full_path.open('w') as outfile:\n            file_contents = outfile.write(\"Hello\")\n    print (xx.refresh_stats().stats())      # Refresh needed else prints stats from when xx was created (before file.txt was created)\n\nWhat gets printed:\n    .full_path    :  /home/me/.local/share/mytool/mysubdir/file.txt\n    .parent       :  /home/me/.local/share/mytool/mysubdir\n    .name         :  file.txt\n    .is_absolute  :  True\n    .is_relative  :  False\n    .exists       :  True\n    .is_dir       :  False\n    .is_file      :  True\n```\n        \n<br/>\n\n<a id=\"deploy_files\"></a>\n\n---\n\n# deploy_files (files_list, overwrite=False, missing_ok=False) - Install initial tool script files in user or site space\n\n`deploy_files()` is used to install initial setup files (and directory trees) from the module to the user \nor site config and data directories. Suggested usage is with the CLI `--setup-user` or `--setup-site` switches.\nDistribution files and directory trees are hosted in `<module_root>/deployment_files/`.\n\n`deploy_files()` accepts a list of dictionaries to be pushed to user or site space. \nIf deployment fails then execution aborts.  This functions is intended for interactive use.\n\n\n### Parameters\n`files_list`\n- A list of dictionaries, each specifying a `source` file or directory tree to be copied to a `target_dir`.\n  - `source` - Either an individual file or directory tree within and relative to `<module_root>/deployment_files/`.\n    No wildcard support.\n  - `target_dir` - A directory target for the pushed `source`.  It is expanded for user and environment vars, \n    and supports these substitutions (per set_toolname()):\n    - USER_CONFIG_DIR, USER_DATA_DIR, USER_STATE_DIR, USER_CACHE_DIR\n    - SITE_CONFIG_DIR, SITE_DATA_DIR\n    - Also absolute paths\n  - `file_stat` - Permissions set on each created file (default 0o664)\n  - `dir_stat` - Permissions set on each created directory (if not already existing, default 0o775)\n\n`overwrite`\n- If overwrite=False (default) then only missing files will be copied.  If overwrite=True then all files will be overwritten \nif they exist - data may be lost!\n\n`missing_ok`\n- If missing_ok=True then a missing source file or directory is tolerated (non-fatal).  This feature is used for testing.\n\n\n### Returns\n- NoneType\n\n\n### Example\n```\n    deploy_files( [\n        { \"source\": \"creds_test\", \"target_dir\": \"USER_CONFIG_DIR/example\", \"file_stat\": 0o600, \"dir_stat\": 0o707},\n        { \"source\": \"test_dir\",   \"target_dir\": \"USER_DATA_DIR\",           \"file_stat\": 0o633, \"dir_stat\": 0o770},\n        ...\n        ], overwrite=True )\n```\n\nThe first line will push the `<module_root>/deployment_files/creds_test` file to `~/.config/mytool/example/creds_test`.\nThe toolname `mytool` was set by a prior call to `set_toolname(\"mytool\")`, in this example.\nThe directories `~/.config/mytool/` and `~/.config/mytool/example` will have permissions 0o707 and files will have\npermission 0o600.\nDirectory and file owner:group settings will be user:user, or root:root if called under sudo.\n\nThe second line pushes a directory (with possible subdirectories) to `~/.local/share/mytool/`.\nThe target_dir may specify a subdirectory, such as `\"target_dir\": \"USER_DATA_DIR/mydirs\"`.\nAny _new directories_ in the  `target_dir` path will be created with the `dir_stat` permissions,\nand files will be created with the `file_stat` permissions.\n    \n<br/>\n\n<a id=\"config_item\"></a>\n\n---\n\n# Class config_item (config_file, remap_logdirbase=True) - Create a configuration instance for use with loadconfig()\n\nSeveral attributes are kept for use by the tool script, including the name, path, and the timestamp\nof the config file (timestamp once loaded).  \n\nThe config file may be loaded and reloaded with successive calls to loadconfig().\n\n\n### Parameters\n`config_file`\n- Path to the configuration file, relative to the `tool.config_dir` directory, or an absolute path.\n\n`remap_logdirbase` (default True)\n- If `remap_logdirbase=True` and the tool script is running in user mode (not site mode) \nthen the `tool.log_dir_base` will be remapped to `tool.user_config_dir`.\n\n\n### Returns\n- Handle to the `config_item()` instance\n- Raises a `ConfigError` if the specified config file is not found\n\n\n### Member functions\n- config_item.stats() - Return a str() listing all stats for the instance, plus the `tool.log_dir_base` value.\n- config_item.load_config() - Load the config file to the `cfg` dictionary.  See below.\n\n\n### Behaviors and rules\n- More than one `config_item()` may be created and loaded.  This allows for configuration data to be partitioned \nas desired.  All configs are loaded to the `cfg` dictionary.  Also see the loadconfig `import` feature.\n- Initially in _user_ mode, after the `set_toolname()` call, `tool.log_dir_base` \n(the log directory) is set to the `tool.user_data_dir`.\nOnce `config_item()` is called the `tool.log_dir_base` is _remapped_ to \n`tool.user_config_dir`.  This is the author's style preference (centralize user files, and \nreduce spreading files around the file system).\nTo disable this remap, in the `config_item()` call set `remap_logdirbase=False`.\nThis remapping is not done in site mode.\n- A different log base directory may be set by user code by setting `tool.log_dir_base` to a different path after \nthe `set_toolname()` call and before the `loadconfig()` call, for example `tool.log_dir_base = \"/var/log\"` may \nbe desireable in site mode.\n\n\n### Example\n```\nGiven\n    tool = set_toolname(\"testcfg\")\n    print (f\"tool.log_dir_base : {tool.log_dir_base}\")\n    config = config_item(\"demo_config.cfg\", remap_logdirbase=True)\n    print (config.stats())\n    config.loadconfig()\n    print (config.stats())\n\nOutput\n    tool.log_dir_base : /home/me/.local/share/testcfg\n\n    Stats for config file <demo_config.cfg>:\n    .config_file        :  demo_config.cfg\n    .config_dir         :  /home/me/.config/testcfg\n    .config_full_path   :  /home/me/.config/testcfg/demo_config.cfg\n    .config_timestamp   :  0\n    tool.log_dir_base   :  /home/me/.config/testcfg\n\n    Stats for config file <demo_config.cfg>:\n    .config_file        :  demo_config.cfg\n    .config_dir         :  /home/me/.config/testcfg\n    .config_full_path   :  /home/me/.config/testcfg/demo_config.cfg\n    .config_timestamp   :  1675529660.7154639\n    tool.log_dir_base   :  /home/me/.config/testcfg\n```\n    \n<br/>\n\n<a id=\"loadconfig\"></a>\n\n---\n\n# loadconfig () (config_item class member function) - Load a configuration file into the cfg dictionary\n```\nloadconfig(\n    ldcfg_ll            = DEFAULT_LOGGING_LEVEL,\n    call_logfile        = None,\n    call_logfile_wins   = False,\n    flush_on_reload     = False,\n    force_flush_reload  = False,\n    isimport            = False,\n    tolerate_missing    = False)        \n```\nloadconfig() is a member function of the `config_item()` class.  Create a `config_item()` instance\nand then invoke `loadconfig()` on that instance. Config file parameters are loaded to the `cfg` \ndictionary, and can be accessed directly or via `getcfg()`.\n\n`loadconfig()` initializes the root logger for logging either to 1) the `LogFile` specified in\nthe loaded config file, 2) the `call_logfile` in the `loadconfig()` call, or 3) the console.\n`loadconfig()` supports dynamic reloading of config files, hierarchy of config data via the `import`\nfeature, and intermittent loss of access to the config file.\n    \n\n### Parameters\n`ldcfg_ll` (default 30/WARNING)\n- Logging level used within `loadconfig()` code for debugging loadconfig() itself\n\n`call_logfile` (default None)\n- A relative or absolute path to a log file\n\n`call_logfile_wins` (default False)\n- If True, the `call_logfile` overrides any `LogFile` in the config file\n\n`flush_on_reload` (default False)\n- If the config file will be reloaded (due to a changed timestamp) then clean out `cfg` first\n\n`force_flush_reload` (default False)\n- Forces cfg to be cleaned out and the config file to be reloaded, regardless of whether the\nconfig file timestamp has changed\n\n`isimport` (default False)\n- Internally set True when handling imports.  Not used by tool script calls.\n\n`tolerate_missing` (default False)\n- Used in a tool script service loop, return `-1` rather than raising `ConfigError` if the config file is inaccessible\n\n\n### Returns\n- `1` if the config files WAS reloaded\n- `0` if the config file was NOT reloaded\n- If the config file cannot be accessed\n  - If tolerate_missing == False (default), then raises `ConfigError`\n  - If tolerate_missing == True, then returns `-1`\n- A ConfigError is raised if there are parsing issues\n- A ConfigError is also raised if an imported config file cannot be loaded (non-existent)\n\n\n### Behaviors and rules\n- See `getcfg()`, below, for accessing loaded config data. `cfg` is a global dictionary which may be\n  directly accessed as well.\n- The format of a config file is param=value pairs (with no section or default as in the Python \n  configparser module).  Separating the param and value may be whitespace, `=` or `:`.\n- **Native int, bool, and str support** - Integer values in the config file are stored as integers in \n  the cfg dictionary, True and False values (case insensitive) are stored as booleans, and \n  all other entries are stored as strings.  This avoids most explicit type casting clutter in the tool script.\n- **Logging setup** - `loadconfig()` calls `setuplogging()`.  The `logging` handle is available for\n  import by other modules (`from cjnfuncs.cjnfuncs import logging`).  By default, logging will go to the\n  console (stdout) filtered at the WARNING/30 level. Don't call `setuplogging()` directly if using loadconfig.\n- **Logging level control** - Optional `LogLevel` in the config file will set the logging level after\n  the config file has been loaded.  If LogLevel is not specified in the config file, then \n  the logging level is set to the Python default logging level, 30/WARNING.\n  The tool script code may also manually/explicitly set the logging level - _after_ the initial `loadconifig()` call -\n  and this value will be retained over later calls to loadconfig, thus allowing for a command line `--verbose`\n  switch feature.  Note that logging done _within_ loadconfig() code is always done at the `ldcfg_ll` level.\n- **Log file options** - Where to log has two separate fields:  `call_logifle` in the call to loadconfig(), and \n  `LogFile` in the loaded config file, with `call_logfile_wins` selecting which is used.  This mechanism allows for\n  a command line `--log-file` switch to override a _default_ log file defined in the config file.  If the selected \n  logging location is `None` then output goes to the console (stdout).\n\n  call_logfile_wins | call_logfile | Config LogFile | Results\n  --|--|--|--\n  False (default) | ignored | None (default) | Console\n  False (default) | ignored | file_path | To the config LogFile\n  True | None (default) | ignored | Console\n  True | file_path | ignored | To the call_logfile\n\n- **Logging format** - cjnfuncs has default format strings for console and file logging.\n  These defaults may be overridden by defining `ConsoleLogFormat` and/or `FileLogFormat`\n  in the config file.\n\n- **Import nested config files** - loadconfig() supports `Import` (case insensitive). The imported file path\nis relative to the `tool.config_dir` if not an absolute path.\nThe specified file is imported as if the params were in the main config file.  Nested imports are allowed. \nA prime usage of `import` is to place email server credentials in your home directory with user-only readability,\nthen import them in the tool script config file as such: `import ~/creds_SMTP`.  \n\n- **Config reload if changed, `flush_on_reload`, and `force_flush_reload`** - loadconfig() may be called \nperiodically by the tool script, such as in a service loop.\nIf the config file timestamp is unchanged then loadconfig() immediately returns `0`. \nIf the timestamp has changed then the config file will be reloaded, and `1` is returned to indicate to \nthe tool script to do any post-config-load operations. \n  - If `flush_on_reload=True` (default False) then the `cfg`\n  dictionary will be cleaned/purged before the config file is reloaded. If `flush_on_reload=False` then the config\n  file will be reloaded on top of the existing `cfg` dictionary contents (if a param was deleted in the config\n  file it will still exist in `cfg` after the reload). [lanmonitor](https://github.com/cjnaz/lanmonitor) uses these\n  features.\n  - `force_flush_reload=True` (default False) forces both a clear/flush of the `cfg` dictionary and then a fresh\n  reload of the config file. \n  - **Note** that if using threading then a thread should be paused while the config file \n  is being reloaded with `flush_on_reload=True` or `force_flush_reload=True` since the params will disappear briefly.\n  - Changes to imported files are not tracked for changes.\n\n- **Tolerating intermittent config file access** - When implementing a service loop, if `tolerate_missing=True` \n(default False) then loadconfig() will return `-1` if the config file cannot be accessed, informing the \ntool script of the problem for appropriate handling. If `tolerate_missing=False` then loadconfig() will raise\na ConfigError if the config file cannot be accessed.\n\n- **Comparison to Python's configparser module** - configparser contains many customizable features. \nHere are a few key comparisons:\n\n  Feature | loadconfig | Python configparser\n  ---|---|---\n  Native types | int, bool (true/false case insensitive), str | str only, requires explicit type casting via getter functions\n  Reload on config file change | built-in | not built-in\n  Import sub-config files | Yes | No\n  Section support | No | Yes\n  Default support | No | Yes\n  Fallback support | Yes (getcfg default) | Yes\n  Whitespace in params | No | Yes\n  Case sensitive params | Yes (always) | Default No, customizable\n  Param/value delimiter | whitespace, ':', or '=' | ':' or '=', customizable\n  Param only (no value) | No | Yes\n  Multi-line values | No | Yes\n  Comment prefix | '#' fixed, thus can't be part of the param or value | '#' or ';', customizable\n  Interpolation | No | Yes\n  Mapping Protocol Access | No | Yes\n  Save to file | No | Yes\n        \n<br/>\n\n<a id=\"getcfg\"></a>\n\n---\n\n# getcfg (param, default=None) - Get a param from the cfg dictionary.\n\nReturns the value of param from the cfg dictionary.  Equivalent to just referencing cfg[]\nbut with handling if the item does not exist.\n\nNOTE: `getcfg()` is almost equivalent to `cfg.get()`, except that `getcfg()` does not default to `None`.\nRather, `getcfg()` raises a ConfigError if the param does not exist and no `default` is specified.\nThis can lead to cleaner tool script code.  Either access method may be used, along with `x = cfg[\"param\"]`.\n\n\n### Parameters\n`param`\n- String name of param to be fetched from cfg\n\n`default` (default None)\n- if provided, is returned if `param` does not exist in cfg\n\n\n### Returns\n- param value (cfg[param]), if param is in cfg\n- `default` value if param not in cfg and `default` value provided\n- raises ConfigError if param does not exist in cfg and no `default` provided.\n    \n<br/>\n\n<a id=\"timevalue\"></a>\n\n---\n\n# Class timevalue (orig_val) - Convert time value strings of various resolutions to seconds\n\n`timevalue()` provides a convenience mechanism for working with time values and time/datetime calculations.\ntimevalues are generally an integer value with an attached single character time resolution, such as \"5m\".\nSupported timevalue units are 's'econds, 'm'inutes, 'h'ours, 'd'ays, and 'w'eeks, and are case insensitive. \n`timevalue()` also accepts integer and float values, which are interpreted as seconds resolution. Also see retime().\n\n\n### Parameters\n`orig_val`\n- The original, passed-in value of type str, int, or float\n\n\n### Returns\n- Handle to instance\n- Raises ValueError if given an unsupported time unit suffix.\n\n\n### Instance attributes\n- `.orig_val` - orig_val value passed in, type str (converted to str if int or float passed in)\n- `.seconds` - time value in seconds resolution, type float, useful for time calculations\n- `.unit_char` - the single character suffix unit of the `orig_val` value.  's' for int and float orig_val values.\n- `.unit_str` - the long-form units of the `orig_val` value useful for printing/logging (\"secs\", \"mins\", \"hours\", \"days\", or \"weeks\")\n\n\n### Member functions\n- timevalue.stats() - Return a str() listing all attributes of the instance\n\n\n### Example\n```\nGiven\n    xx = timevalue(\"1m\")\n    print (xx.stats())\n    print (f\"Sleep <{xx.seconds}> seconds\")\n    time.sleep(xx.seconds)\n\nOutput:\n    .orig_val   :  1m       <class 'str'>\n    .seconds    :  60.0     <class 'float'>\n    .unit char  :  m        <class 'str'>\n    .unit_str   :  mins     <class 'str'>\n    Sleep <60.0> seconds\n```\n        \n<br/>\n\n<a id=\"retime\"></a>\n\n---\n\n# retime (time_sec, unitC) - Convert time value in seconds to unitC resolution\n\n`retime()` translates a value is resolution seconds into a new target resolution\n\n\n### Parameters\n`time_sec`\n- Time value in resolution seconds, type int or float.\n\n`unitC`\n- Target time resolution: \"s\", \"m\", \"h\", \"d\", or \"w\" (case insensitive)\n\n\n### Returns\n- `time_sec` value scaled for the specified `unitC`, type float\n- Raises ValueError if not given an int or float value for `time_sec`, or given an unsupported \n  unitC time unit suffix.\n\n\n### Example\n```\nGiven\n    xx = timevalue(\"210H\")\n    print (f\"{xx.orig_val} = {xx.seconds} seconds = {retime(xx.seconds, 'W')} weeks\")\n\nOutput\n    210H = 756000.0 seconds = 1.25 weeks\n```\n    \n<br/>\n\n<a id=\"requestlock\"></a>\n\n---\n\n# requestlock (caller, lockfile, timeout=5) - Lock file request\n\nFor tool scripts that may take a long time to run and are run by CRON, the possibility exists that \na job is still running when CRON wants to run it again, which may create a real mess.\nThis lock file mechanism is used in https://github.com/cjnaz/rclonesync-V2, as an example.\n\n`requestlock()` places a file to indicate that the current process is busy.\nOther processes then attempt to `requestlock()` the same `lockfile` before doing an operation\nthat would conflict with the process that set the lock.\n\nThe `lockfile` is written with `caller` information that indicates which tool script set the lock, and when.\nMultiple lock files may be used simultaneously by specifying unique `lockfile` names.\n\n\n### Parameters\n`caller`\n- Info written to the lock file and displayed in any error messages\n\n`lockfile` (default /tmp/\\<toolname>_LOCK)\n- Lock file name, relative to the system tempfile.gettempdir(), or absolute path\n\n`timeout` (default 5s)\n- Time in seconds to wait for the lockfile to be removed by another process before returning with a `-1` result.\n  `timeout` may be an int, float or timevalue string (eg, '5s').\n\n\n### Returns\n- `0` on successfully creating the `lockfile`\n- `-1` if failed to create the `lockfile` (either file already exists or no write access).\n  A WARNING level message is also logged.\n    \n<br/>\n\n<a id=\"releaselock\"></a>\n\n---\n\n# releaselock (lockfile) - Release a lock file\n\nAny code can release a lock, even if that code didn't request the lock.\nGenerally, only the requester should issue the releaselock.\nA common use is with a tool script that runs periodically by CRON, but may take a long time to complete.  Using \nfile locks ensures that the tool script does not run if the prior run has not completed.\n\n\n### Parameters\n`lockfile` (default /tmp/\\<toolname>_LOCK)\n- Lock file name, relative to the system tempfile.gettempdir(), or absolute path\n\n\n### Returns\n- `0` on successfully `lockfile` release (lock file deleted)\n- `-1` if failed to delete the `lockfile`, or the `lockfile` does not exist.  A WARNING level message is also logged.\n    \n<br/>\n\n<a id=\"snd_notif\"></a>\n\n---\n\n# snd_notif (subj=\"Notification message, msg=\"\", to=\"NotifList\", log=False) - Send a text message using info from the config file\n\nIntended for use of your mobile provider's email-to-text bridge email address, eg, \n5405551212@vzwtxt.com for Verizon, but any eamil address will work.\n\nThe `to` string may be the name of a confg param (who's value is one or more email addresses, default \n\"NotifList\"), or a string with one or more email addresses. Using a config param name allows for customizing the\n`to` addresses without having to edit the code.\n\nThe messages to send is passed in the `msg` parameter as a text string.\n\n    \n### Parameters\n`subj` (default \"Notification message\")\n- Text message subject field\n\n`msg` (default \"\")\n- Text message body\n\n`to` (default \"NotifList\")\n- To whom to send the message. `to` may be either an explicit string list of email addresses\n(whitespace or comma separated) or a config param name (also listing one\nor more whitespace or comma separated email addresses).  If the `to` parameter does not\ncontain an '@' it is assumed to be a config param.\n\n`log` (default False)\n- If True, logs that the message was sent at the WARNING level. If False, logs \nat the DEBUG level. Useful for eliminating separate logging messages in the tool script code.\nThe `subj` field is part of the log message.\n\n\n### cfg dictionary params\n`NotifList` (optional)\n- string list of email addresses (whitespace or comma separated).  \nDefining `NotifList` in the config is only required if any call to `snd_notif()` uses this\ndefault `to` parameter value.\n\n`DontNotif` (default False)\n- If True, notification messages are not sent. Useful for debug. All email and notification\nmessages are also blocked if `DontEmail` is True.\n\n\n### Returns\n- NoneType\n- Raises SndEmailError on error\n\n\n### Behaviors and rules\n- `snd_notif()` uses `snd_email()` to send the message. See `snd_email()` for related setup.\n    \n<br/>\n\n<a id=\"snd_email\"></a>\n\n---\n\n# snd_email (subj, to, body=None, filename=None, htmlfile=None, log=False)) - Send an email message using info from the config file\n\nThe `to` string may be the name of a confg param (who's value is one or more email addresses),\nor a string with one or more email addresses. Using a config param name allows for customizing the\n`to` addresses without having to edit the code.\n\nWhat to send may be a `body` string, the text contents of `filename`, or the HTML-formatted contents\nof `htmlfile`, in this order of precendent.\n\n    \n### Parameters\n`subj`\n- Email subject text\n\n`to`\n- To whom to send the message. `to` may be either an explicit string list of email addresses\n(whitespace or comma separated) or a config param name (also listing one\nor more whitespace or comma separated email addresses).  If the `to` parameter does not\ncontain an '@' it is assumed to be a config param.\n\n`body` (default None)\n- A string message to be sent\n\n`filename` (default None)\n- A str or Path to the file to be sent, relative to the `tool.cache_dir`, or an absolute path.\n\n`htmlfile` (default None)\n- A str or Path to the html formatted file to be sent, relative to the `tool.cache_dir`, or an absolute path.\n\n`log` (default False)\n- If True, logs that the message was sent at the WARNING level. If False, logs \nat the DEBUG level. Useful for eliminating separate logging messages in the tool script code.\nThe `subj` field is part of the log message.\n\n\n### cfg dictionary params\n`EmailFrom`\n- An email address, such as `me@myserver.com`\n\n`EmailServer`\n- The SMTP server name, such as `mail.myserver.com`\n\n`EmailServerPort`\n- The SMTP server port (one of `P25`, `P465`, `P587`, or `P587TLS`)\n\n`EmailUser`\n- Username for `EmailServer` login, if required by the server\n\n`EmailPass`\n- Password for `EmailServer` login, if required by the server\n\n`DontEmail` (default False)\n- If True, messages are not sent. Useful for debug. Also blocks `snd_notif()` messages.\n\n`EmailVerbose` (default False)\n- If True, detailed transactions with the SMTP server are sent to stdout. Useful for debug.\n\n\n### Returns\n- NoneType\n- Raises SndEmailError on error\n\n\n### Behaviors and rules\n- One of `body`, `filename`, or `htmlfile` must be specified. Looked for in this order, and the first \nfound is used.\n- EmailServerPort must be one of the following:\n  - P25:  SMTP to port 25 without any encryption\n  - P465: SMTP_SSL to port 465\n  - P587: SMTP to port 587 without any encryption\n  - P587TLS:  SMTP to port 587 and with TLS encryption\n- It is recommneded (not required) that the email server params be placed in a user-read-only\nfile in the user's home directory, such as `~/creds_SMTP`, and imported by the main config file.\nSome email servers require that the `EmailFrom` address be of the same domain as the server, \nso it may be practical to bundle `EmailFrom` with the server specifics.  Place all of these in \n`~/creds_SMTP`:\n  - `EmailFrom`, `EmailServer`, `EmailServerPort`, `EmailUser`, and `EmailPass`\n- `snd_email()` does not support multi-part MIME (an html send wont have a plain text part).\n- Checking the validity of email addresses is very basic... an email address must contain an '@'.\n    ` `\n---\n# Revision history\n- 2.0.1 230222 - deploy_files() fix for files from package\n- 2.0 230208 - Refactored and converted to installed package.  Renamed funcs3 to cjnfuncs.\n- ...\n- 0.1 180524 - New.  First github posting\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2019 Chris Nelson  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cjnfuncs",
    "package_url": "https://pypi.org/project/cjnfuncs/",
    "platform": null,
    "project_url": "https://pypi.org/project/cjnfuncs/",
    "project_urls": {
      "repository": "https://github.com/cjnaz/cjnfuncs"
    },
    "release_url": "https://pypi.org/project/cjnfuncs/2.0.1/",
    "requires_dist": [
      "requests",
      "appdirs (>=1.4)",
      "importlib-resources"
    ],
    "requires_python": ">=3.6",
    "summary": "A collection of core functions for tool script writing",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16981241,
  "releases": {
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34be81a5377252f562b2f9e172e20798080eb70283b86dc9f5f7dcc26dad84e8",
          "md5": "682e60b90dbcf1da23c82a03c4466243",
          "sha256": "08fb444e8a6372d3903c74db60741bf9447a181f19dfb2c839ba1721ce1ce152"
        },
        "downloads": -1,
        "filename": "cjnfuncs-2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "682e60b90dbcf1da23c82a03c4466243",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31045,
        "upload_time": "2023-02-19T15:41:29",
        "upload_time_iso_8601": "2023-02-19T15:41:29.743861Z",
        "url": "https://files.pythonhosted.org/packages/34/be/81a5377252f562b2f9e172e20798080eb70283b86dc9f5f7dcc26dad84e8/cjnfuncs-2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b97e91d426d027a18e69676e02f0d07f0b2875a1cb8e1e9136c52345de2cd2c2",
          "md5": "3b8616c86f2b171a7c8e4a91c9647546",
          "sha256": "982bfa68c7ef12d36ae44b732bbe183df694e9377aca8074bb22a15ef0cac878"
        },
        "downloads": -1,
        "filename": "cjnfuncs-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b8616c86f2b171a7c8e4a91c9647546",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 50881,
        "upload_time": "2023-02-19T15:41:32",
        "upload_time_iso_8601": "2023-02-19T15:41:32.451445Z",
        "url": "https://files.pythonhosted.org/packages/b9/7e/91d426d027a18e69676e02f0d07f0b2875a1cb8e1e9136c52345de2cd2c2/cjnfuncs-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "168219ecc61d994870a7fa0193622bfc888b3d47d87742f29d43ac80e9515d1a",
          "md5": "7351c84e57e9b78effb8f754dcf3dcbb",
          "sha256": "0f5c499e2057b6a5d028c588d445812ff42dfda1e71caff6e51d6cbcdbbbb0ff"
        },
        "downloads": -1,
        "filename": "cjnfuncs-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7351c84e57e9b78effb8f754dcf3dcbb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31610,
        "upload_time": "2023-02-22T18:36:44",
        "upload_time_iso_8601": "2023-02-22T18:36:44.450999Z",
        "url": "https://files.pythonhosted.org/packages/16/82/19ecc61d994870a7fa0193622bfc888b3d47d87742f29d43ac80e9515d1a/cjnfuncs-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "320ea1c8f92b2452d85972db63537d901f4ee6e1378bee1f9a47112914895878",
          "md5": "c39884d8c3a0bc03177c8f61a5f0c366",
          "sha256": "180b400a5cc74cc7da13cb5dc09b42b1c9b8e3e7ff1aace1b3bde942790fab23"
        },
        "downloads": -1,
        "filename": "cjnfuncs-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c39884d8c3a0bc03177c8f61a5f0c366",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 52437,
        "upload_time": "2023-02-22T18:36:46",
        "upload_time_iso_8601": "2023-02-22T18:36:46.026355Z",
        "url": "https://files.pythonhosted.org/packages/32/0e/a1c8f92b2452d85972db63537d901f4ee6e1378bee1f9a47112914895878/cjnfuncs-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "168219ecc61d994870a7fa0193622bfc888b3d47d87742f29d43ac80e9515d1a",
        "md5": "7351c84e57e9b78effb8f754dcf3dcbb",
        "sha256": "0f5c499e2057b6a5d028c588d445812ff42dfda1e71caff6e51d6cbcdbbbb0ff"
      },
      "downloads": -1,
      "filename": "cjnfuncs-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7351c84e57e9b78effb8f754dcf3dcbb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 31610,
      "upload_time": "2023-02-22T18:36:44",
      "upload_time_iso_8601": "2023-02-22T18:36:44.450999Z",
      "url": "https://files.pythonhosted.org/packages/16/82/19ecc61d994870a7fa0193622bfc888b3d47d87742f29d43ac80e9515d1a/cjnfuncs-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "320ea1c8f92b2452d85972db63537d901f4ee6e1378bee1f9a47112914895878",
        "md5": "c39884d8c3a0bc03177c8f61a5f0c366",
        "sha256": "180b400a5cc74cc7da13cb5dc09b42b1c9b8e3e7ff1aace1b3bde942790fab23"
      },
      "downloads": -1,
      "filename": "cjnfuncs-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c39884d8c3a0bc03177c8f61a5f0c366",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 52437,
      "upload_time": "2023-02-22T18:36:46",
      "upload_time_iso_8601": "2023-02-22T18:36:46.026355Z",
      "url": "https://files.pythonhosted.org/packages/32/0e/a1c8f92b2452d85972db63537d901f4ee6e1378bee1f9a47112914895878/cjnfuncs-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}