{
  "info": {
    "author": "Price Hiller",
    "author_email": "philler3138@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "```yaml\nAuthor: Price Hiller\nContributors:\n    - Jacob B. Sanders\nDescription: A python library for emitting and reading events asynchronously.\nType: Library\nLicense: BSD 3-Clause License\nCopyright: 2021, Price Hiller\n```\n\n# Async Events\n\nA(n) OOP asynchronous Python library capable of emitting custom events based on string matching.\n\n## Table Of Contents\n\n- [Async Events](#async-events)\n    - [Table Of Contents](#table-of-contents)\n    - [Installation](#installation)\n    - [Usage](#usage)\n        - [Basic Usage](#basic-usage)\n        - [Advanced Usage](#advanced-usage)\n            - [Event Types](#event-types)\n            - [Custom Event Listeners](#custom-event-listeners)\n\n## Installation\n- From pip\n```bash\npython3 -m pip install avents\n```\n\n## Installation from Source ##\n\n```bash\npython[3] setup.py install\n```\n\n## Usage\n\n### Basic Usage\n\nUsing the `listen` decorator you can define a function to listen for an event like so and attach a parser for the events:\n```python\nfrom avents import listen # the listener that matches for a string via `listen(\"some string\")`\nfrom avents import Event # an event object defining a name of the event and the event content\nfrom avents import parse # the parser required to emit events via `await parse(Event(\"some event\", \"event content\")\n\n# The listener\n@listen(\"event\", \"another event\") # A listener can listen to multiple events\nasync def example_event_function(event: Event):\n    print(f\"Received event: \\\"{event.name}\\\", with content: \\\"{event.content}\\\"\")\n\n# The parser\nasync def parser():\n    # The actual parsing of an event below\n    await parse(Event(name=\"event\", content=\"example event content\"))\n    await parse(Event(name=\"another event\", content=\"another event for the same handler\"))\n```\n\nA full, runnable, example:\n\n```python\nimport asyncio # Required to run the application\n\n# avents imports\nfrom avents import listen # the listener that matches for a string via `listen(\"some string\")`\nfrom avents import Event # an event object defining a name of the event and the event content\nfrom avents import parse # the parser required to emit events via `await parse(Event(\"some event\", \"event content\")\n\n# The listener\n@listen(\"event\")\nasync def your_event(event: Event):\n    print(f\"Received event: \\\"{event.name}\\\", with content: \\\"{event.content}\\\"\")\n\nasync def main():\n    # The actual parsing of an event below\n    await parse(Event(name=\"event\", content=\"this is some event content\"))\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n### Advanced Usage\n#### Event Types\nInstead of using raw strings in the `listen` decorator, for larger projects it may become much more practical to use a\nclass container of events to listen for.\n\nAvents provides a base event type class to inherit from, that being `BaseEventType` which is an enum object.\n\nTo define event type enums inherit from the said base class:\n\n```python\nfrom avents import BaseEventType\n\nclass CustomEventType(BaseEventType):\n    SOME_EVENT: str = \"an event\"\n```\n\nThis can then be used in conjunction with the `listen` decorator to maintain consistency throughout a larger project\nlike so:\n\n```python\nfrom avents import BaseEventType\nfrom avents import listen\nfrom avents import Event\n\nclass CustomEventType(BaseEventType):\n    SOME_EVENT: str = \"an event\"\n\n@listen(CustomEventType.SOME_EVENT)\nasync def some_event(event: Event):\n    print(event)\n```\n\n#### Custom Event Listeners\nIn the scenario in which you may want to parse a base event and then pass it to further sub event parsing creating a \ncustom event listener can save quite the headache.\n\nIn a basic use case we only used the `EventListener` as provided to us by avents which is exposed by `listen` and \n`parse` in more simplistic use cases.\n\nWith the custom listener inheriting the base `EventListener` exposes custom listening:\n\n```python\nfrom avents import EventListener\n\nclass CustomEventListener(EventListener):\n    ...\n```\n\nOr you can include a constructor as well:\n\n```python\nfrom avents import EventListener\n\nclass CustomEventListener(EventListener):\n\n    def __init__(self):\n        super().__init__()\n```\n\nOnce a custom event listener has been created the `listen` and `parse` methods are immediately available:\n\n```python\nfrom avents import EventListener\nfrom avents import Event\n\nclass CustomEventListener(EventListener):\n    ...\n\nasync def example_event_emitter():\n    for i in range(2):\n        await CustomEventListener.parse(Event(name=str(i), content=i))\n\n@CustomEventListener.listen(\"0\", \"1\", \"2\") # Listen() can take multiple events to listen for\nasync def listen_for_one(event: Event):\n    print(event)\n```\n\nIt can be extended further by incorporating the `EventListener` class as the base event handler in the following\npattern:\n\n```python\nfrom avents import EventListener\nfrom avents import Event\n\nclass CustomEventListener(EventListener):\n    ...\n\nasync def example_event_emitter():\n    for i in range(2):\n        await EventListener.parse(Event(name=str(i), content=i))\n\n@EventListener.listen(\"0\")      \nasync def base_event_handler(event: Event):\n    await CustomEventListener.parse(Event(name=event.content + 1, \n                                          content=\"We incremented to generate a design pattern\")\n                                    )\n\n@CustomEventListener.listen(\"1\")\nasync def listen_for_one(event: Event):\n    print(event)\n```\n\nNotice that we use the base `EventListener` for the initial parsing of an emitted event by `example_event_emitter`\nwhich will then be passed to the `base_event_handler` when an event of name `0` is emitted which then does subparsing\nfor the `CustomEventListener` class.\n\nThis can be extended to create entire command structures or other such hierarchical structures.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.cloud-technology.io/Open-Source/async-events",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "avents",
    "package_url": "https://pypi.org/project/avents/",
    "platform": "",
    "project_url": "https://pypi.org/project/avents/",
    "project_urls": {
      "Documentation": "https://gitlab.cloud-technology.io/Open-Source/async-events/docs/",
      "Homepage": "https://gitlab.cloud-technology.io/Open-Source/async-events",
      "Tracker": "https://gitlab.cloud-technology.io/Open-Source/async-events/issues/"
    },
    "release_url": "https://pypi.org/project/avents/0.8.1/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "An asynchronous event library",
    "version": "0.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10195352,
  "releases": {
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ee408c462ce73ecfccc5042d8a11b8abbc07cc8cf5bce3be7140cbc75fe94b3",
          "md5": "78686c0850d308c1185f8cf7f5a0480a",
          "sha256": "194d4e91b2873478f5c0a9990f187c0f9a3abe16d64d7c1db5b3d7a22f757c97"
        },
        "downloads": -1,
        "filename": "avents-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78686c0850d308c1185f8cf7f5a0480a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 7047,
        "upload_time": "2021-04-26T01:54:08",
        "upload_time_iso_8601": "2021-04-26T01:54:08.041284Z",
        "url": "https://files.pythonhosted.org/packages/1e/e4/08c462ce73ecfccc5042d8a11b8abbc07cc8cf5bce3be7140cbc75fe94b3/avents-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87f959d60cb7e7b04f9695b4947d1cdbbb5ae5ac2339b36b426af41b0c46737f",
          "md5": "fc66748e19322a1e57dbe2f43686b3e4",
          "sha256": "4f3422306fe4c7a677b903d1e560764fd030f3882d6131a1e09793ef693d4b98"
        },
        "downloads": -1,
        "filename": "avents-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fc66748e19322a1e57dbe2f43686b3e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 7408,
        "upload_time": "2021-04-26T01:54:09",
        "upload_time_iso_8601": "2021-04-26T01:54:09.690827Z",
        "url": "https://files.pythonhosted.org/packages/87/f9/59d60cb7e7b04f9695b4947d1cdbbb5ae5ac2339b36b426af41b0c46737f/avents-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2ef01d80d4711950c5b1155ca8d443f14b2f8e87634cb6cdc6f96700880ee84",
          "md5": "28f0651a2c2a5e677743e13f9ff4b6a4",
          "sha256": "3b41863b4edc77058e7bc6cb53c559ec8f36ee410d13d57695f23ac193d15607"
        },
        "downloads": -1,
        "filename": "avents-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28f0651a2c2a5e677743e13f9ff4b6a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 7046,
        "upload_time": "2021-04-28T12:02:21",
        "upload_time_iso_8601": "2021-04-28T12:02:21.956088Z",
        "url": "https://files.pythonhosted.org/packages/a2/ef/01d80d4711950c5b1155ca8d443f14b2f8e87634cb6cdc6f96700880ee84/avents-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a06773dd4f9f1c654085c81ebcaa0eaf29e7ae27531cfd4a4a3ba5e54cff1c52",
          "md5": "20a6c76de473cfbf6e72e30be5d1c729",
          "sha256": "9fce4a8f0017b04705bf23ceeda2011fa1a134efc30e8e4889cd94c2516b20e8"
        },
        "downloads": -1,
        "filename": "avents-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "20a6c76de473cfbf6e72e30be5d1c729",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 7400,
        "upload_time": "2021-04-28T12:02:23",
        "upload_time_iso_8601": "2021-04-28T12:02:23.144001Z",
        "url": "https://files.pythonhosted.org/packages/a0/67/73dd4f9f1c654085c81ebcaa0eaf29e7ae27531cfd4a4a3ba5e54cff1c52/avents-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2ef01d80d4711950c5b1155ca8d443f14b2f8e87634cb6cdc6f96700880ee84",
        "md5": "28f0651a2c2a5e677743e13f9ff4b6a4",
        "sha256": "3b41863b4edc77058e7bc6cb53c559ec8f36ee410d13d57695f23ac193d15607"
      },
      "downloads": -1,
      "filename": "avents-0.8.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "28f0651a2c2a5e677743e13f9ff4b6a4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 7046,
      "upload_time": "2021-04-28T12:02:21",
      "upload_time_iso_8601": "2021-04-28T12:02:21.956088Z",
      "url": "https://files.pythonhosted.org/packages/a2/ef/01d80d4711950c5b1155ca8d443f14b2f8e87634cb6cdc6f96700880ee84/avents-0.8.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a06773dd4f9f1c654085c81ebcaa0eaf29e7ae27531cfd4a4a3ba5e54cff1c52",
        "md5": "20a6c76de473cfbf6e72e30be5d1c729",
        "sha256": "9fce4a8f0017b04705bf23ceeda2011fa1a134efc30e8e4889cd94c2516b20e8"
      },
      "downloads": -1,
      "filename": "avents-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "20a6c76de473cfbf6e72e30be5d1c729",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 7400,
      "upload_time": "2021-04-28T12:02:23",
      "upload_time_iso_8601": "2021-04-28T12:02:23.144001Z",
      "url": "https://files.pythonhosted.org/packages/a0/67/73dd4f9f1c654085c81ebcaa0eaf29e7ae27531cfd4a4a3ba5e54cff1c52/avents-0.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}