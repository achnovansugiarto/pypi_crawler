{
  "info": {
    "author": "Flus Flas",
    "author_email": "aflusflas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "pythrottle\n==========\n\n|pypi version| |python versions| |pipeline status| |coverage report| |docs|\n\n.. |pipeline status| image:: https://travis-ci.com/flusflas/pythrottle.svg?branch=master\n   :target: https://travis-ci.com/github/flusflas/pythrottle\n.. |coverage report| image:: https://codecov.io/gh/flusflas/pythrottle/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/flusflas/pythrottle\n.. |python versions| image:: https://img.shields.io/pypi/pyversions/pythrottle.svg\n   :target: https://pypi.org/project/pythrottle/\n.. |pypi version| image:: https://img.shields.io/pypi/v/pythrottle.svg\n   :target: https://pypi.org/project/pythrottle/\n.. |docs| image:: https://readthedocs.org/projects/pythrottle/badge/?version=latest\n   :target: https://pythrottle.readthedocs.io/en/latest/\n\nThis project offers some convenient tools for throttling and controlling\nthe execution timing of functions or iterative blocks of Python code.\n\nKey Features\n------------\n\n-  Simple and time-accurate loop iterations.\n-  Support for synchronous and asynchronous programming.\n-  Rate limiting consecutive function calls.\n-  Rate measurement for loops.\n\nInstallation\n------------\n\n.. code:: console\n\n    $ pip install pythrottle\n\nGetting started\n---------------\n\nThrottle\n~~~~~~~~\n\nA basic use for throttling the execution of a code block is using\n``Throttle.loop()`` (or ``Throttle.aloop()`` for asynchronous mode).\nThis will allow execution of the code every ``1 / rate`` seconds:\n\n.. code:: python\n\n    from throttle import Throttle\n\n    rate = 2.0     # Target rate\n    t = Throttle(interval=(1 / rate))\n\n    for i in t.loop():\n        # Do something\n        print(f\"Iteration {i}\")\n\nThe next example code records a 15-seconds video file from the default\nvideo source at an accurate frame rate of 24 fps using\n`OpenCV <https://opencv-python-tutroals.readthedocs.io/en/latest/>`__.\n\n.. code:: python\n\n    import cv2\n    from throttle import Throttle\n\n    rate = 24.0             # Target frame rate\n    cap = cv2.VideoCapture(0)\n    out = cv2.VideoWriter('output.avi', cv2.VideoWriter_fourcc(*'XVID'),\n                          rate, (640, 480))\n\n    t = Throttle(interval=(1 / rate))\n\n    for _ in t.loop(duration=15.0):\n        ret, frame = cap.read()    # Frame capture\n        out.write(frame)           # Save frame to output file\n\n        # Display the resulting frame\n        cv2.imshow('frame', frame)\n        if cv2.waitKey(1) & 0xFF == ord('q'):\n            break\n\nIf you simply\n`sleep() <https://docs.python.org/3/library/time.html?highlight=time%20sleep#time.sleep>`__\nfor ``1 / 24`` seconds between frame capture, there would be a\ndifference between the capture rate and the output video rate because of\nthe time required for frame capture. If you also add image processing\n(motion detection, text overlay...), the delay could cause the output to\nbe completely out of sync.\n\nThrottle decorators\n~~~~~~~~~~~~~~~~~~~\n\nYou can also use ``throttle.throttle()`` and ``throttle.athrottle()``\ndecorators to limit the number of calls to a function. In the next\nexample, the function ``hello()`` is decorated to rate-limit the\n``/throttled`` endpoint, using a\n`Flask <https://palletsprojects.com/p/flask/>`__ server. Only 2 requests\nwill be served every 5 seconds.\n\n.. code:: python\n\n    from flask import Flask\n    from throttle import throttle\n\n    app = Flask(__name__)\n\n    @app.route(\"/throttled\")\n    @throttle(limit=2, interval=5, on_fail=(\"Limit reached :(\", 429))\n    def hello():\n        return \"Hi, Throttle!\"\n\n    if __name__ == '__main__':\n        app.run()\n\nDecorators can be nested to create more complex throttling rules.\n\nRate Meter\n~~~~~~~~~~\n\n``RateMeter`` class is useful for measuring the rate of an iterative\ncode taking into account only the last few seconds, so the measured\nvalue is kept updated.\n\nThe next code block prints the execution rate of a loop that starts\nlooping at 10 ips (iterations per second) and decreases up to 5 ips. In\neach iteration, the rate is displayed and updated taking into account\nthe iterations history of the last 2 seconds.\n\n.. code:: python\n\n    import time\n    from rate_meter import RateMeter\n\n    rate_meter = RateMeter(interval=2.0)\n\n    for i in range(100):\n        rate_meter.update()\n        measured_rate = rate_meter.rate()\n        print(f\"Rate: {rate_meter.rate()}\")\n        time.sleep(0.1 + i * 0.001)\n\nLicense\n-------\n\nDistributed under the terms of the `MIT License <LICENSE>`__.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/flusflas/pythrottle",
    "keywords": "throttle,throttling,time,timing,rate",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pythrottle",
    "package_url": "https://pypi.org/project/pythrottle/",
    "platform": "",
    "project_url": "https://pypi.org/project/pythrottle/",
    "project_urls": {
      "Homepage": "https://github.com/flusflas/pythrottle"
    },
    "release_url": "https://pypi.org/project/pythrottle/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Set of tools for throttling and controlling the execution timing of Python code.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6952399,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0d3b86fe30a1c7d9a9c6ebb70c92407366aee055e46f8400ac7da3d6ec084a1",
          "md5": "a668757e492f3990fec9354f4ede5ac7",
          "sha256": "e3cd287fbc529317f0ff2c5edf685d921f9b323fb9fbc5ff67bd2c631ae5403c"
        },
        "downloads": -1,
        "filename": "pythrottle-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a668757e492f3990fec9354f4ede5ac7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6213,
        "upload_time": "2020-04-04T18:32:24",
        "upload_time_iso_8601": "2020-04-04T18:32:24.952967Z",
        "url": "https://files.pythonhosted.org/packages/c0/d3/b86fe30a1c7d9a9c6ebb70c92407366aee055e46f8400ac7da3d6ec084a1/pythrottle-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88c731e408b6ed0d84dfb8c91cc93f9cca52b2589e5380d45197a57d04cdb25e",
          "md5": "f7eeacb0fe64bc9aa0e3d12d91cb81f1",
          "sha256": "29e073aa0581141b986977bf9d6c859523293f3a6a06691568dc285205120594"
        },
        "downloads": -1,
        "filename": "pythrottle-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f7eeacb0fe64bc9aa0e3d12d91cb81f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6313,
        "upload_time": "2020-04-04T19:39:00",
        "upload_time_iso_8601": "2020-04-04T19:39:00.857309Z",
        "url": "https://files.pythonhosted.org/packages/88/c7/31e408b6ed0d84dfb8c91cc93f9cca52b2589e5380d45197a57d04cdb25e/pythrottle-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88c731e408b6ed0d84dfb8c91cc93f9cca52b2589e5380d45197a57d04cdb25e",
        "md5": "f7eeacb0fe64bc9aa0e3d12d91cb81f1",
        "sha256": "29e073aa0581141b986977bf9d6c859523293f3a6a06691568dc285205120594"
      },
      "downloads": -1,
      "filename": "pythrottle-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f7eeacb0fe64bc9aa0e3d12d91cb81f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6313,
      "upload_time": "2020-04-04T19:39:00",
      "upload_time_iso_8601": "2020-04-04T19:39:00.857309Z",
      "url": "https://files.pythonhosted.org/packages/88/c7/31e408b6ed0d84dfb8c91cc93f9cca52b2589e5380d45197a57d04cdb25e/pythrottle-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}