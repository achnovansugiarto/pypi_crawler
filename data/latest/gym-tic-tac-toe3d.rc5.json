{
  "info": {
    "author": "Brandon Morgan",
    "author_email": "morganscottbrandon@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# gym-tic-tac-toe3D\n-------------------\nOpenAI Gym Environment for a Two-Player 3D Tic-Tac-Toe.\nGithub Link: https://github.com/OUStudent/gym_tic_tac_toe3D\n\n# Requirements\n----------------\n- gym\n- Numpy\n- Matplotlib\n\n# Install\n----------------------\n```python\npip install gym-tic-tac-toe3D\n```\n# How it Works\nTic Tac Toe is usually played on a 3x3 grid where the objective is for one player to line up their tokens in a straight \nline of three. This is an extremely easy and trivial game; however, one can extend the difficulty by stacking 3x3 layers \nto create a 3x3x3 cube. Now the objective is to line up three tokens in any of the directions. \n\nHere are three example games where the action was randomly generated:\n\n![Game 1](ex1.gif)\n\n![Game 2](ex2.gif)\n\n![Game 3](ex3.gif)\n\n# How to Use\n\nThe environment is a Two-Player Game, where Blue denotes Player 1 and Red denotes Player 2. The `state` and `action`  \ncontains all 27 possible positions, 9 for the first layer, 9 for the second, and 9 for the third.\n\nThe input has three possible integer values for eac position, -1 for opponent, 0 for empty, and 1 for current player. \nNote that no matter whom the Player is, these values holds true. The `reward` is a two value list where the first index \nrepresents the reward for Player 1 and the second for Player 2. The `reward` value should only be used after the game is \ncompleted. Players are rewarded for wins and receive extra points for how fast they win; while players are penalized for \nlosing and how fast they lost. In addition, because Player 1 has such a great advantage over Player 2 due to playing first,\nthey are penalized greater if they lose to Player 2 than if Player 2 lost to Player 1; in addition, Player 2 is rewarded\ngreater than Player 1 if they win than if Player 1 won against Player 2. Here are the current rewards:\n\n| Turns Taken  | Player 1 Win:  | P1 Reward  | P2 Penalize  | Player 2 Win:  | P1 Penalize | P2 Reward |\n|---|---|---|---|---|---|---|\n| <= 3  | 1   |  20 | -10  | 2  | -20|     40 |\n| <=5  |  1 |  18 |  -9 |  2 |   -18 | 36  |\n| <=7  |  1 |  16 |  -8 |  2 |   -16 |  32 |\n| <=9  |  1 |  14 | -7  |  2 |  -14  |  28 |\n| Else  | 1  | 10  |  -5 | 2  |  -10  |  20 |\n\nFor example, after a game where Player 1 has won within three turns, Player 1 is rewarded 20 points while Player 2 penalized\n10 points. On the other hand, if Player 2 won within 7 turns then Player 1 is penalized 16 points while Player 2 is \nrewarded 32 points. \n\nHere is an example on how to create the environment with random agents:\n\n```python\nimport gym\nimport gym_tic_tac_toe3D\nimport matplotlib.pyplot as plt\n\nenv = gym.make(\"tic_tac_toe3D-v0\")\n\ngames = 3  # best of three\nplayer1_reward = 0\nplayer2_reward = 0\nfor i in range(0, games):\n    state = env.reset()\n    done = False\n    player = 1\n    while not done:\n        env.render(player=player)\n        plt.pause(0.5)\n        while True:\n            action = env.action_space.sample()\n            # Need to check if action is available in state space\n            if state[action] == 0:\n                break\n\n        state, reward, done, info = env.step(action, player=player)\n        # switch players\n        if player == 1:\n            player = 2\n        else:\n            player = 1\n    # final render after completion of game to see final move\n    env.render(player=player)\n    plt.pause(1)\n    player1_reward += reward[0]\n    player2_reward += reward[1]\n```\n\nHere is another example between two agents named `p1` and `p2`:\n\n```python\nimport gym\nimport gym_tic_tac_toe3D\nimport matplotlib.pyplot as plt\n\ndef play(p1, p2, show=False, num_games=3):\n    env = gym.make(\"tic_tac_toe3D-v0\")\n    player1_reward = 0\n    player2_reward = 0\n    for i in range(0, num_games):\n        state = env.reset()\n        done = False\n        player = 1\n        while not done:\n            if show:\n                env.render(player=player)\n                plt.pause(0.5)\n            if player == 1:\n                move = p1.predict(state)  # returns softmax of prob's for all 27 possible actions\n            else:\n                move = p2.predict(state)  # returns softmax of prob's for all 27 possible actions\n            # get action states that are emtpy\n            viable_moves = np.where(state == 0)[0].tolist()\n            # find the empty action with the largest probability\n            action = viable_moves[np.argmax(move[0][viable_moves])]\n            \n            state, reward, done, info = env.step(action, player=player)\n            # switch players\n            if player == 1:\n                player = 2\n            else:\n                player = 1\n        if show:\n            env.render(player=player)\n            plt.pause(1)\n        player1_reward += reward[0]\n        player2_reward += reward[1]\n    return player1_reward, player2_reward\n```\n\n# Custom Rewards\n\nIf the default rewarding scheme described above does not suite your likings, there is an option to create custom\nrewarding. The rewards available for changing are only for the turn slots described above, meaning `[3,5,7,9,else]` for \nrewarding or penalizing players 1 and 2. Here is an example:\n\nSuppose I want the following rewarding scheme:\n\n| Turns Taken  | Player 1 Win:  | P1 Reward  | P2 Penalize  | Player 2 Win:  | P1 Penalize | P2 Reward |\n|---|---|---|---|---|---|---|\n| <= 3  | 1   |  20 | -2  | 2  | -20|     40 |\n| <=5  |  1 |  18 |  -4 |  2 |   -16 | 30  |\n| <=7  |  1 |  12 |  -6 |  2 |   -12 |  20 |\n| <=9  |  1 |  8 | -8  |  2 |  -10  |  10 |\n| Else  | 1  | 5  |  -10 | 2  |  -10  |  10 |\n\nThen this is how to create it:\n\n```python\nimport gym\nimport gym_tic_tac_toe3D\n\ncust_p1_win = [20, 18, 12, 8, 5]\ncust_p2_win = [40, 30, 20, 10, 10]\ncust_p1_lose = [-20, -16, -12, -10, -10]\ncust_p2_lose = [-2, -4, -6, -8, -10]\n\nenv = gym.make(\"tic_tac_toe3D-v0\")\nenv.custom_rewards(reward_p1=cust_p1_win, reward_p2=cust_p2_win,\n                   pen_p1=cust_p1_lose, pen_p2=cust_p2_lose)\n# do other stuff\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gym-tic-tac-toe3D",
    "package_url": "https://pypi.org/project/gym-tic-tac-toe3D/",
    "platform": "",
    "project_url": "https://pypi.org/project/gym-tic-tac-toe3D/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/gym-tic-tac-toe3D/0.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Gym Environment for 3D Tic Tac Toe",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11040395,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dea41346db44e9216f05f0c9811335b6d135a29036a2bac9a57645656f01e08a",
          "md5": "e2067b06426a9850c3adeb28a864df5b",
          "sha256": "5e2942a4209d23bd7737ee86bec93cf7f3517dad0e2335204b68496f47dd377f"
        },
        "downloads": -1,
        "filename": "gym_tic_tac_toe3D-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e2067b06426a9850c3adeb28a864df5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 894,
        "upload_time": "2021-07-27T20:53:51",
        "upload_time_iso_8601": "2021-07-27T20:53:51.667172Z",
        "url": "https://files.pythonhosted.org/packages/de/a4/1346db44e9216f05f0c9811335b6d135a29036a2bac9a57645656f01e08a/gym_tic_tac_toe3D-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b8f4d7bc0646f8a646076d0162a521e821403aafa44936e2443adef93ffa370",
          "md5": "340bf60e6172c9db506509c67ce2ea56",
          "sha256": "12c70f8bb9f362fa7d55ac5bd55ad9d44438670ee6702ea2df0efd638f2ba0b3"
        },
        "downloads": -1,
        "filename": "gym_tic_tac_toe3D-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "340bf60e6172c9db506509c67ce2ea56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2525,
        "upload_time": "2021-07-27T22:28:47",
        "upload_time_iso_8601": "2021-07-27T22:28:47.653124Z",
        "url": "https://files.pythonhosted.org/packages/0b/8f/4d7bc0646f8a646076d0162a521e821403aafa44936e2443adef93ffa370/gym_tic_tac_toe3D-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "329886bd2a633835945e8bee9435f1d145000f74c13b4a30a1743f66dbb95c9e",
          "md5": "5e2d31f89d81eac6609b879038ee2cc3",
          "sha256": "01f7c66267e5046c3603efb93f569fcd7c87c4e45ab2c443208c7ec2a9da835e"
        },
        "downloads": -1,
        "filename": "gym_tic_tac_toe3D-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5e2d31f89d81eac6609b879038ee2cc3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3355,
        "upload_time": "2021-07-29T14:32:55",
        "upload_time_iso_8601": "2021-07-29T14:32:55.451149Z",
        "url": "https://files.pythonhosted.org/packages/32/98/86bd2a633835945e8bee9435f1d145000f74c13b4a30a1743f66dbb95c9e/gym_tic_tac_toe3D-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb15e1a1a8767b6db41b37aa3978987d2a5d2ae84932646291fdd20e39f3caf5",
          "md5": "3d5e34eafbb1b460b7966e3b8480e03d",
          "sha256": "cddb87edd190855240ac01f070cb8f1c53a02ea1f07ce93570066c28f4b40d20"
        },
        "downloads": -1,
        "filename": "gym_tic_tac_toe3D-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3d5e34eafbb1b460b7966e3b8480e03d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3343,
        "upload_time": "2021-07-29T14:51:54",
        "upload_time_iso_8601": "2021-07-29T14:51:54.366172Z",
        "url": "https://files.pythonhosted.org/packages/fb/15/e1a1a8767b6db41b37aa3978987d2a5d2ae84932646291fdd20e39f3caf5/gym_tic_tac_toe3D-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5ace57e892e12ae9e4725b72d1e65263fa0370cf21e90d242c8add5508770f7",
          "md5": "c6480d82cd4cd07a0f2ae057da838c25",
          "sha256": "0e492ace436071cdc8b39dedb64d114a08cf66fcb0a3d3b49b2fe7c5f62535b4"
        },
        "downloads": -1,
        "filename": "gym_tic_tac_toe3D-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c6480d82cd4cd07a0f2ae057da838c25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3860,
        "upload_time": "2021-07-29T15:06:51",
        "upload_time_iso_8601": "2021-07-29T15:06:51.381143Z",
        "url": "https://files.pythonhosted.org/packages/e5/ac/e57e892e12ae9e4725b72d1e65263fa0370cf21e90d242c8add5508770f7/gym_tic_tac_toe3D-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5ace57e892e12ae9e4725b72d1e65263fa0370cf21e90d242c8add5508770f7",
        "md5": "c6480d82cd4cd07a0f2ae057da838c25",
        "sha256": "0e492ace436071cdc8b39dedb64d114a08cf66fcb0a3d3b49b2fe7c5f62535b4"
      },
      "downloads": -1,
      "filename": "gym_tic_tac_toe3D-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "c6480d82cd4cd07a0f2ae057da838c25",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3860,
      "upload_time": "2021-07-29T15:06:51",
      "upload_time_iso_8601": "2021-07-29T15:06:51.381143Z",
      "url": "https://files.pythonhosted.org/packages/e5/ac/e57e892e12ae9e4725b72d1e65263fa0370cf21e90d242c8add5508770f7/gym_tic_tac_toe3D-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}