{
  "info": {
    "author": "Airspot S.r.l.",
    "author_email": "info@airspot.tech",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Django signals cloudevents\n==========================\n\nThis apps allow you to produce `Clouevents <https://cloudevents.io/>`_ starting from your models signals sending them to a configurable url (sink).\n\nThis app is mainly intended to transform a Django instance into a Knative source, through a `SinkBinding <https://knative.dev/docs/eventing/sources/sinkbinding/>`_ or a `ContainerSource <https://knative.dev/docs/eventing/sources/containersource/>`_.\n\nFor more information visit the `Knative eventing documentation <https://knative.dev/docs/eventing/>`_\n\nQuick start\n-----------\n\n1. Add \"django_signals_cloudevents\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'django_signals_cloudevents',\n    ]\n\n2. Register your models like this::\n\n    from django_signals_cloudevents import send_cloudevent\n\n    post_save.connect(send_cloudevent, sender=YourModel)\n\n3. [Optional] Override cloudevents handling:\n\n    As said previously, by default this app is configured to be used with a SinkBinding and get sink url from the environment variable K_SINK, that indicates to which url events will be dispatched, and the source name from K_SOURCE.\n    It is possible to override the chosen env variable in your project settings, here is the default configuration::\n\n        CLOUDEVENTS_ENV = {\n\n            \"SINK_VAR\": \"K_SINK\",\n\n            \"SOURCE_VAR\": \"K_SOURCE\"\n        }\n\n    Let's see how it works.\n\n    Taking up the `Django tutorial <https://docs.djangoproject.com/en/3.1/intro/tutorial02/>`_ we suppose we have defined the following models:\n\n    ::\n\n        class Question(models.Model):\n            question_text = models.CharField(max_length=200)\n            pub_date = models.DateTimeField('date published')\n\n\n        class Choice(models.Model):\n            question = models.ForeignKey(Question, on_delete=models.CASCADE)\n            choice_text = models.CharField(max_length=200)\n            votes = models.IntegerField(default=0)\n\n    After that we define a service to deploy a Django app in the cluster.\n\n    ::\n\n        apiVersion: serving.knative.dev/v1alpha1\n        kind: Service\n        metadata:\n          name: django-orm\n          labels:\n            app: django-orm\n        spec:\n          template:\n            metadata:\n              annotations:\n                autoscaling.knative.dev/minScale: \"1\"\n              labels:\n                app: django-orm\n            spec:\n              containers:\n                - name: django-orm\n                  image: gcr.io/krules-dev-254113/django_orm\n                  imagePullPolicy: Always\n                  ports:\n                    - containerPort: 8080\n\n    Then we sink the service with a broker using a SinkBinding\n\n    ::\n\n        apiVersion: sources.knative.dev/v1alpha2\n        kind: SinkBinding\n        metadata:\n          name: django-orm-binding\n        spec:\n          subject:\n            apiVersion: serving.knative.dev/v1alpha1\n            kind: Service\n            selector:\n              matchLabels:\n                app: django-orm\n          sink:\n            ref:\n              apiVersion: eventing.knative.dev/v1\n              kind: Broker\n              name: default\n\n    SinkBinding will set in env **K_SOURCE**, the service name, and **K_SINK**, the url of resource defined in sink.ref, in this example the Broker default.\n\n    After saving a Question an event like this will be sent to the **default** broker:\n\n    ::\n\n        ☁️  cloudevents.Event\n        Validation: valid\n        Context Attributes,\n          specversion: 1.0\n          type: django.orm.post_save\n          source: django-orm\n          subject: DCE:polls.question/22\n          id: a9b0a310-c7cd-4054-b112-93eb1b398686\n          time: 2020-12-01T09:43:34.6461Z\n          datacontenttype: application/json\n        Extensions,\n          datacontenttype: application/json\n          djangoapp: polls\n          djangomodel: question\n          knativearrivaltime: 2020-12-01T09:43:34.793013561Z\n          knativehistory: default-kne-trigger-kn-channel.crd-cm-deployment-demo.svc.cluster.local\n          originid: a9b0a310-c7cd-4054-b112-93eb1b398686\n        Data,\n          {\n            \"data\": {\n              \"id\": \"22\",\n              \"question_text\": \"How are you?\",\n              \"pub_date\": \"2020-12-01T09:43\"\n            },\n            \"signal_kwargs\": {\n              \"created\": true,\n              \"update_fields\": null,\n              \"raw\": false,\n              \"using\": \"default\"\n            },\n            \"db_table\": \"polls_question\"\n          }\n\n    However could be necessary to override the default handler.\n    Suppose you need to deploy Django application outside the cluster and send events to it through an external message broker, like Google Pub/Sub.\n    It is possible to define a different handler for cloudevents dispatching.\n    It could be both a callable, which expect event as unique argument, or its import string:\n\n    ::\n\n        from google.cloud import pubsub_v1\n        import os\n        import json\n        import logging\n\n        logger = logging.getLogger(__name__)\n         # ...\n\n        def pubsub_handler(event):\n\n            publisher = pubsub_v1.PublisherClient()\n            topic_path = publisher.topic_path(os.environ.get(\"PROJECT_ID\"), os.environ.get(\"TOPIC_ID\"))\n            data = json.dumps(event.Data()).encode(\"utf-8\")\n            event_info = event.Properties()\n            event_info.update(event_info.pop(\"extensions\"))\n            attrs = {\n                \"ce-extensions\": json.dumps(event.Extensions()).encode('utf-8'),\n                \"ce-source\": event.Source(),\n                \"ce-id\": event.EventId(),\n                \"ce-time\": event.EventTime(),\n                \"ce-type\": event.EventType()\n            }\n            future = publisher.publish(topic_path, data=data, **attrs)\n            logger.info(future.result())\n\n    ::\n\n        # callable defined in settings\n\n        CLOUDEVENTS_HANDLER = pubsub_handler\n\n        # callable defined in a module\n\n        CLOUDEVENTS_HANDLER = \"my_module.pubsub_handler\"",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/airspot-dev/django-signals-cloudevents",
    "keywords": "cloudevents knative eventing krules",
    "license": "BSD-3-Clause  # Example license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-signals-cloudevents",
    "package_url": "https://pypi.org/project/django-signals-cloudevents/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-signals-cloudevents/",
    "project_urls": {
      "Homepage": "https://github.com/airspot-dev/django-signals-cloudevents"
    },
    "release_url": "https://pypi.org/project/django-signals-cloudevents/0.1.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "App to produce Cloudevents from Django model signals",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9421151,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a3152edbee25c7659470708995b8a92e1990558378639f65d704c1a9d7b78e1",
          "md5": "066c788fcbd0d3649cf8e186a6fe5557",
          "sha256": "a7ce6a031cfc51db4fe39b3fda55dd8dc411e91c810cedd2a614834a56e67676"
        },
        "downloads": -1,
        "filename": "django-signals-cloudevents-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "066c788fcbd0d3649cf8e186a6fe5557",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6049,
        "upload_time": "2020-10-07T12:23:49",
        "upload_time_iso_8601": "2020-10-07T12:23:49.990780Z",
        "url": "https://files.pythonhosted.org/packages/3a/31/52edbee25c7659470708995b8a92e1990558378639f65d704c1a9d7b78e1/django-signals-cloudevents-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feb4d8b69313b43c0fdd5cdf1e9c88d110d3ef6e09d9ba0f8f37b876b965ae1e",
          "md5": "12098666f084e20c0dcca9ed1960f38d",
          "sha256": "efb25b3c7b4f9b96c052dc29bccecee115b8c3421a8bc7424a937e887e174cac"
        },
        "downloads": -1,
        "filename": "django-signals-cloudevents-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "12098666f084e20c0dcca9ed1960f38d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8955,
        "upload_time": "2020-10-07T12:41:25",
        "upload_time_iso_8601": "2020-10-07T12:41:25.884798Z",
        "url": "https://files.pythonhosted.org/packages/fe/b4/d8b69313b43c0fdd5cdf1e9c88d110d3ef6e09d9ba0f8f37b876b965ae1e/django-signals-cloudevents-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50aeaaa4001e15fdfda99013b67d31a33f2a9c2bab20e480ea2eddc4b4df0998",
          "md5": "5b8f0530051a618b002934f449d44624",
          "sha256": "b76b818de190c42fd03069d68d2264b583ffd38c6eb74166e150f441c2d8efa1"
        },
        "downloads": -1,
        "filename": "django-signals-cloudevents-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5b8f0530051a618b002934f449d44624",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8816,
        "upload_time": "2020-10-21T09:15:00",
        "upload_time_iso_8601": "2020-10-21T09:15:00.632983Z",
        "url": "https://files.pythonhosted.org/packages/50/ae/aaa4001e15fdfda99013b67d31a33f2a9c2bab20e480ea2eddc4b4df0998/django-signals-cloudevents-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d6532d400505b05c9957ec038b716c8ab4bc0ca9040d09879b374bb3990ef8e",
          "md5": "7c5826de972e2ff85af8ee80991237e1",
          "sha256": "d9062442c5e8e39e4a0f372e0f81e421a9793c9d6812bcb675469af252babfff"
        },
        "downloads": -1,
        "filename": "django-signals-cloudevents-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7c5826de972e2ff85af8ee80991237e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12222,
        "upload_time": "2021-01-05T10:13:45",
        "upload_time_iso_8601": "2021-01-05T10:13:45.008571Z",
        "url": "https://files.pythonhosted.org/packages/6d/65/32d400505b05c9957ec038b716c8ab4bc0ca9040d09879b374bb3990ef8e/django-signals-cloudevents-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81d7cef31843673f561171fb13847a8ae03764159e1a456a359d9918d8b9879d",
          "md5": "dca66307f830bf5b40bd19eb16ee32e9",
          "sha256": "47ba000a6772d0f4d95ff902a5e9775b444e647bb6652f7683cb0a0e4e47b17c"
        },
        "downloads": -1,
        "filename": "django-signals-cloudevents-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dca66307f830bf5b40bd19eb16ee32e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12215,
        "upload_time": "2021-02-15T11:24:19",
        "upload_time_iso_8601": "2021-02-15T11:24:19.063199Z",
        "url": "https://files.pythonhosted.org/packages/81/d7/cef31843673f561171fb13847a8ae03764159e1a456a359d9918d8b9879d/django-signals-cloudevents-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81d7cef31843673f561171fb13847a8ae03764159e1a456a359d9918d8b9879d",
        "md5": "dca66307f830bf5b40bd19eb16ee32e9",
        "sha256": "47ba000a6772d0f4d95ff902a5e9775b444e647bb6652f7683cb0a0e4e47b17c"
      },
      "downloads": -1,
      "filename": "django-signals-cloudevents-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "dca66307f830bf5b40bd19eb16ee32e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12215,
      "upload_time": "2021-02-15T11:24:19",
      "upload_time_iso_8601": "2021-02-15T11:24:19.063199Z",
      "url": "https://files.pythonhosted.org/packages/81/d7/cef31843673f561171fb13847a8ae03764159e1a456a359d9918d8b9879d/django-signals-cloudevents-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}