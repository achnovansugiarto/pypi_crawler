{
  "info": {
    "author": "Robert Nowotny",
    "author_email": "bitranox@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "lib_shopware6_api\n=================\n\n\nVersion v2.0.2.3 as of 2022-06-30 see `Changelog`_\n\n|build_badge| |license| |jupyter| |pypi| |pypi-downloads| |black|\n\n|codecov| |better_code| |cc_maintain| |cc_issues| |cc_coverage| |snyk|\n\n\n\n.. |build_badge| image:: https://github.com/bitranox/lib_shopware6_api/actions/workflows/python-package.yml/badge.svg\n   :target: https://github.com/bitranox/lib_shopware6_api/actions/workflows/python-package.yml\n\n\n.. |license| image:: https://img.shields.io/github/license/webcomics/pywine.svg\n   :target: http://en.wikipedia.org/wiki/MIT_License\n\n.. |jupyter| image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/bitranox/lib_shopware6_api/master?filepath=lib_shopware6_api.ipynb\n\n.. for the pypi status link note the dashes, not the underscore !\n.. |pypi| image:: https://img.shields.io/pypi/status/lib-shopware6-api?label=PyPI%20Package\n   :target: https://badge.fury.io/py/lib_shopware6_api\n\n.. |codecov| image:: https://img.shields.io/codecov/c/github/bitranox/lib_shopware6_api\n   :target: https://codecov.io/gh/bitranox/lib_shopware6_api\n\n.. |better_code| image:: https://bettercodehub.com/edge/badge/bitranox/lib_shopware6_api?branch=master\n   :target: https://bettercodehub.com/results/bitranox/lib_shopware6_api\n\n.. |cc_maintain| image:: https://img.shields.io/codeclimate/maintainability-percentage/bitranox/lib_shopware6_api?label=CC%20maintainability\n   :target: https://codeclimate.com/github/bitranox/lib_shopware6_api/maintainability\n   :alt: Maintainability\n\n.. |cc_issues| image:: https://img.shields.io/codeclimate/issues/bitranox/lib_shopware6_api?label=CC%20issues\n   :target: https://codeclimate.com/github/bitranox/lib_shopware6_api/maintainability\n   :alt: Maintainability\n\n.. |cc_coverage| image:: https://img.shields.io/codeclimate/coverage/bitranox/lib_shopware6_api?label=CC%20coverage\n   :target: https://codeclimate.com/github/bitranox/lib_shopware6_api/test_coverage\n   :alt: Code Coverage\n\n.. |snyk| image:: https://img.shields.io/snyk/vulnerabilities/github/bitranox/lib_shopware6_api\n   :target: https://snyk.io/test/github/bitranox/lib_shopware6_api\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n\n.. |pypi-downloads| image:: https://img.shields.io/pypi/dm/lib-shopware6-api\n   :target: https://pypi.org/project/lib-shopware6-api/\n   :alt: PyPI - Downloads\n\nshopware6 higher level API client, based on `lib_shopware_api_base <https://github.com/bitranox/lib_shopware6_api_base>`_\n\nthis might be a good example for Your own API Client Functions - to be further extended\n\n----\n\nautomated tests, Travis Matrix, Documentation, Badges, etc. are managed with `PizzaCutter <https://github\n.com/bitranox/PizzaCutter>`_ (cookiecutter on steroids)\n\nPython version required: 3.6.0 or newer\n\ntested on recent linux with python 3.6, 3.7, 3.8, 3.9, 3.10, pypy-3.8 - architectures: amd64\n\n`100% code coverage <https://codecov.io/gh/bitranox/lib_shopware6_api>`_, flake8 style checking ,mypy static type checking ,\n\n----\n\n- `Try it Online`_\n- `Usage`_\n- `Usage from Commandline`_\n- `Installation and Upgrade`_\n- `Requirements`_\n- `Acknowledgements`_\n- `Contribute`_\n- `Report Issues <https://github.com/bitranox/lib_shopware6_api/blob/master/ISSUE_TEMPLATE.md>`_\n- `Pull Request <https://github.com/bitranox/lib_shopware6_api/blob/master/PULL_REQUEST_TEMPLATE.md>`_\n- `Code of Conduct <https://github.com/bitranox/lib_shopware6_api/blob/master/CODE_OF_CONDUCT.md>`_\n- `License`_\n- `Changelog`_\n\n----\n\nTry it Online\n-------------\n\nYou might try it right away in Jupyter Notebook by using the \"launch binder\" badge, or click `here <https://mybinder.org/v2/gh/{{rst_include.\nrepository_slug}}/master?filepath=lib_shopware6_api.ipynb>`_\n\nUsage\n-----------\n\nOverview\n========\n\n- `API`_\n- `Currency`_\n- `DeliveryTime`_\n- `Media`_\n- `Product`_\n- `Tax`_\n- `Unit`_\n\n-------------------\n\nAPI\n===\nback to `Overview`_\n\n.. code-block:: python\n\n    class Shopware6API(object):\n        def __init__(self, config: Optional[ConfShopware6ApiBase] = None, use_docker_test_container: bool = False) -> None:\n            \"\"\"\n            :param config, type ConfShopware6ApiBase\n            :param use_docker_test_container: if to use the docker test container\n\n            >>> my_api=Shopware6API()\n            >>> my_api_currency=my_api.currency\n            >>> my_api_delivery_time=my_api.delivery_time\n            >>> my_api_media=my_api.media\n            >>> my_api_product=my_api.product\n            >>> my_api_tax=my_api.tax\n            >>> my_api_unit=my_api.unit\n\n            \"\"\"\n\nCurrency\n========\nback to `Overview`_\n\n.. code-block:: python\n\n    class Currency(object):\n        def __init__(\n            self, admin_client: Optional[Shopware6AdminAPIClientBase] = None, config: Optional[ConfShopware6ApiBase] = None, use_docker_test_container: bool = False\n        ) -> None:\n            \"\"\"\n            >>> # Setup\n            >>> my_api = Currency()\n            \"\"\"\n\n.. code-block:: python\n\n        @lru_cache(maxsize=None)\n        def get_currency_id_by_iso_code(self, currency_iso_code: str = \"EUR\") -> str:\n            \"\"\"\n            :param currency_iso_code: the currency iso code, like 'EUR', 'CHF', ...\n            :returns: the id of the currency record\n\n            >>> # Setup\n            >>> my_api = Currency()\n\n            >>> # test get currency id\n            >>> my_currency_id = my_api.get_currency_id_by_iso_code('EUR')\n            >>> assert 32 == len(my_currency_id)\n\n            >>> # test not existing (int)\n            >>> my_api.get_currency_id_by_iso_code(currency_iso_code='not_existing')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: currency record with isoCode \"not_existing\" not found\n\n            >>> # Test clear Cache - the Cache has to be cleared if currencies are inserted or deleted\n            >>> my_api.get_currency_id_by_iso_code.cache_clear()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def get_currencies(self, payload: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all currency records - filters and so on can be set in the payload\n            we read paginated (in junks of 100 items) - this is done automatically by function base_client.request_get_paginated()\n\n            :parameters\n                payload, to set filters etc.\n\n            :returns\n                l_dict_data,\n\n\n            sample payload :\n                page and limit will be overridden by function base_client.request_get_paginated() and will be ignored\n\n            >>> # Setup\n            >>> my_api = Currency()\n            >>> my_l_dict_data = my_api.get_currencies()\n            \"\"\"\n\nDeliveryTime\n============\nback to `Overview`_\n\n.. code-block:: python\n\n    class DeliveryTime(object):\n        def __init__(\n            self, admin_client: Optional[Shopware6AdminAPIClientBase] = None, config: Optional[ConfShopware6ApiBase] = None, use_docker_test_container: bool = False\n        ) -> None:\n            \"\"\"\n            :param admin_client:\n            :param config:\n            :param use_docker_test_container:\n\n            >>> # Setup\n            >>> my_api = DeliveryTime()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def cache_clear_delivery_time(self) -> None:\n            \"\"\"\n            Cache of some functions has to be cleared if delivery_time records are inserted or deleted\n\n            >>> # Setup\n            >>> my_api = DeliveryTime()\n            >>> # Test\n            >>> my_api.cache_clear_delivery_time()\n\n            \"\"\"\n\n.. code-block:: python\n\n        @lru_cache(maxsize=None)\n        def get_delivery_times(self, payload: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all delivery-time records - filters and so on can be set in the payload\n            we read paginated (in junks of 100 items) - this is done automatically by function base_client.request_get_paginated()\n\n            :parameters\n                payload, to set filters etc.\n\n            :returns\n                l_dict_data,\n\n\n            sample payload :\n                page and limit will be overridden by function base_client.request_get_paginated() and will be ignored\n\n            >>> # Setup\n            >>> my_api = DeliveryTime()\n            >>> my_l_dict_data = my_api.get_delivery_times()\n            \"\"\"\n\n.. code-block:: python\n\n        def search_delivery_times(self, payload: PayLoad = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            search delivery-time records\n\n            >>> # Setup\n            >>> my_api = DeliveryTime()\n\n            >>> # insert article\n            >>> ignore = my_api.search_delivery_times()\n\n            \"\"\"\n\n.. code-block:: python\n\n        @lru_cache(maxsize=None)\n        def get_delivery_times_sorted_by_min_days(self) -> List[Dict[str, Any]]:\n            \"\"\"\n            returns a list of 'id' and 'name' of delivery_times, sorted by minimal time\n            the key 'position' starts with 10, 20 ....\n            :returns : [{'name': '...', 'id': '...', 'position': 10}, ...]\n\n            >>> # Setup\n            >>> my_api = DeliveryTime()\n\n            >>> # Test\n            >>> my_api.get_delivery_times_sorted_by_min_days()\n            [{'name': '...', 'id': '...', 'position': 10}, ...]\n\n            \"\"\"\n\nMedia\n=====\nback to `Overview`_\n\n.. code-block:: python\n\n    class Media(object):\n        def __init__(\n            self, admin_client: Optional[Shopware6AdminAPIClientBase] = None, config: Optional[ConfShopware6ApiBase] = None, use_docker_test_container: bool = False\n        ) -> None:\n            \"\"\"\n            >>> # Setup\n            >>> my_api = Media()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def cache_clear_media(self) -> None:\n            \"\"\"\n            Cache of some functions has to be cleared if media is inserted or deleted\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> # test\n            >>> my_api.cache_clear_media()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def cache_clear_media_folder(self) -> None:\n            \"\"\"\n            Cache of some functions has to be cleared if media_folders are inserted or deleted\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> # test\n            >>> my_api.cache_clear_media_folder()\n\n            \"\"\"\n\n.. code-block:: python\n\n        @staticmethod\n        def calc_media_filename_from_product_number(\n            product_number: Union[int, str],\n            position: int,\n            url: str,\n        ) -> str:\n            \"\"\"\n            media_filenamescan only exist once - so we build the filename from product_number, position, and extension of the url\n\n            :param product_number:\n            :param position:\n            :param url:             we take the extension from here\n            :return:\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # Test\n            >>> my_api.calc_media_filename_from_product_number(product_number=123456789, position=1, url='something.jpg')\n            '123456789_1.jpg'\n            >>> my_api.calc_media_filename_from_product_number(product_number='test_get_media_filename_from_product_number', position=1, url='something.jpg')\n            'test_get_media_filename_from_product_number_1.jpg'\n            \"\"\"\n\n.. code-block:: python\n\n        @staticmethod\n        def calc_new_media_id(media_filename: PathMedia) -> str:\n            \"\"\"\n            calculates a new media_id (to insert) from media_filename.\n            since a media_filename (with extension) must only exist once in shopware6,\n            we can calculate the is from that name.\n\n            :param media_filename: filename (or url) with extension\n            :return:\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # Test\n            >>> my_new_media_id = my_api.calc_new_media_id(media_filename='123.jpg')\n            >>> assert 32 == len(my_new_media_id)\n\n            >>> # Test no extension\n            >>> my_new_media_id = my_api.calc_new_media_id(media_filename='123')\n            Traceback (most recent call last):\n                ...\n            ValueError: media_filename \"123\" must have an extension\n            \"\"\"\n\n.. code-block:: python\n\n        def calc_path_media_folder_from_product_number(self, product_number: Union[int, str]) -> str:\n            \"\"\"\n            get the path of the complete media folder for a given product_number.\n            the directory structure will be created as follows :\n            'xxxx...' the md5-hash buil out of the product number\n\n            conf_path_media_folder_root/xx/xx/xx/xxxxxxxxxxxxxxxxxxxxxxxxxx\n\n            that gives us 16.7 Million directories, in order to spread products evenly in folders (sharding).\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # test\n            >>> my_api.calc_path_media_folder_from_product_number(product_number=456789)\n            '/Product Media/api_imported/e3/5c/f7/b66449df565f93c607d5a81d09'\n\n            >>> # test2\n            >>> my_api.calc_path_media_folder_from_product_number(product_number='123456789abcdefg')\n            '/Product Media/api_imported/94/08/f8/da307c543595e92ded30cf4193'\n\n            \"\"\"\n\n.. code-block:: python\n\n        def delete_media_by_id(self, media_id: str) -> None:\n            \"\"\"\n            :param media_id: the media_id\n            :return:\n\n\n            >>> # Setup\n            >>> import time\n            >>> my_api = Media()\n            >>> my_media_folder_id = my_api.upsert_media_folders_by_path('/Product Media/test_delete_media_by_id')\n            >>> # insert two medias\n            >>> ignore1 = my_api.insert_media(media_folder_id=my_media_folder_id, url='https://pics.rotek.at/test/test001/bilder/test001_01_1280.jpg')\n            >>> ignore2 = my_api.insert_media(media_folder_id=my_media_folder_id, url='https://pics.rotek.at/test/test001/bilder/test001_02_1280.jpg')\n\n            >>> # Test delete\n            >>> my_api.delete_media_by_id(media_id=my_api.get_media_id_by_media_filename(media_filename='test001_01_1280.jpg'))  # noqa\n            >>> my_api.delete_media_by_id(media_id=my_api.get_media_id_by_media_filename(media_filename='test001_02_1280.jpg'))  # noqa\n\n            >>> # teardown\n            >>> my_api.delete_media_folder_by_path('/Product Media/test_delete_media_by_id', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def delete_media_folder(self, media_folder_id: Optional[str], force: bool = False) -> None:\n            \"\"\"\n            delete a media folder. on force, also containing media is deleted\n            DANGER - API DELETES FOLDERS RUTHLESS - including Subfolders and pictures\n\n            :param media_folder_id: the folder to delete\n            :param force: if True, delete even if there are Subfolders or Media in that folder\n            :return:    None\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # insert Folder\n            >>> my_media_folder_id = my_api.upsert_media_folders_by_path('/Product Media/test_delete_media_folder')\n            >>> assert True == my_api.is_media_folder_existing_by_path('/Product Media/test_delete_media_folder')\n\n            >>> # delete the inserted Folder\n            >>> my_api.delete_media_folder(media_folder_id=my_media_folder_id)\n            >>> assert False == my_api.is_media_folder_existing_by_path('/Product Media/test_delete_media_folder')\n\n            >>> # insert Folder with subfolder\n            >>> my_media_sub_folder_id = my_api.upsert_media_folders_by_path('/Product Media/test_delete_media_folder/subfolder')\n            >>> assert True == my_api.is_media_folder_existing_by_path('/Product Media/test_delete_media_folder/subfolder')\n\n            >>> # can not delete non-empty Folder\n            >>> my_media_folder_id = my_api.get_media_folder_id_by_path('/Product Media/test_delete_media_folder')\n            >>> my_api.delete_media_folder(media_folder_id=my_media_folder_id)\n            Traceback (most recent call last):\n                ...\n            OSError: media_folder_id \"...\" is not empty\n\n            >>> # force-delete non-empty Folder\n            >>> my_api.delete_media_folder(media_folder_id=my_media_folder_id, force=True)\n            >>> assert False == my_api.is_media_folder_existing_by_path('/Product Media/test_delete_media_folder')\n\n            >>> # try to delete Root Folder\n            >>> my_api.delete_media_folder(media_folder_id=None)\n            Traceback (most recent call last):\n                ...\n            OSError: the root folder can not be deleted\n\n            \"\"\"\n\n.. code-block:: python\n\n        def delete_media_folder_by_path(self, path_media_folder: PathMediaFolder, force: bool = False) -> None:\n            \"\"\"\n            delete a media folder by path\n            DANGER - API DELETES FOLDERS RUTHLESS - including Subfolders and pictures\n\n            :param path_media_folder: like '/Product Media/a000/000/001\n            :param force: if True, delete even if there are Subfolders or Media in that folder\n            :return:    None\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> ignore = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_delete_media_folder_by_path/subfolder1/subfolder2/subfolder3')\n\n            >>> # Test delete Empty Folder\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/test_delete_media_folder_by_path/subfolder1/subfolder2/subfolder3')\n\n            >>> # Test delete Empty Folder without force\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/test_delete_media_folder_by_path/subfolder1')\n            Traceback (most recent call last):\n                ...\n            OSError: media_folder \"/Product Media/test_delete_media_folder_by_path/subfolder1\" is not empty\n\n            >>> # Test delete Folder with force\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/test_delete_media_folder_by_path', force=True)\n            >>> assert False == my_api.is_media_folder_existing_by_path(path_media_folder='/Product Media/test_delete_media_folder_by_path')\n\n            \"\"\"\n\n.. code-block:: python\n\n        @lru_cache(maxsize=None)\n        def get_media_folder_configuration_id_from_media_folder_name(self, media_folder_name: str = \"Product Media\", parent_id: Optional[str] = None) -> str:\n            \"\"\"\n            get the configuration_id of a media folder. this configuration_id can be passed to child folders,\n            in order to inherit the configuration from the parent folder\n\n            Parameter :\n                media_folder_name: the name of the parent folder, like 'Product Media'\n                parent_id        : the parent id of the Folder\n\n            :returns: the configuration id\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # test get 'Product Media' id\n            >>> my_folder_configuration_id = my_api.get_media_folder_configuration_id_from_media_folder_name()\n            >>> assert 32 == len(my_folder_configuration_id)\n\n            >>> # test not existing (int)\n            >>> my_api.get_media_folder_configuration_id_from_media_folder_name(media_folder_name='not_existing')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: media folder with name \"not_existing\" not found\n\n            >>> # Test clear Cache -the Cache has to be cleared if media_folders are inserted or deleted\n            >>> my_api.get_media_folder_configuration_id_from_media_folder_name.cache_clear()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def get_media_folder_configurations(self, payload: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all media_folder_configurations - filters and so on can be set in the payload\n            we read paginated (in junks of 100 items) - this is done automatically by function base_client.request_get_paginated()\n\n            :parameters\n                payload, to set filters etc.\n\n            :returns\n                l_dict_data,\n\n            sample payload :\n                page and limit will be overridden by function base_client.request_get_paginated() and will be ignored\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> my_l_dict_data = my_api.get_media_folder_configurations()\n            \"\"\"\n\n.. code-block:: python\n\n        @lru_cache(maxsize=None)\n        def get_media_folder_id(self, name: str, parent_id: Optional[str]) -> str:\n            \"\"\"\n            get the id of a media folder\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # Test get existing Folder\n            >>> assert my_api.get_media_folder_id(name='Product Media', parent_id=None)  # noqa\n\n            >>> # Test get non-existing Folder\n            >>> my_api.get_media_folder_id(name='not-existing', parent_id=None)  # noqa\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: media_folder, name: \"not-existing\", parent_id: \"None\" not found\n\n            >>> # Test clear Cache -the Cache has to be cleared if media_folders are inserted or deleted\n            >>> my_api.get_media_folder_id.cache_clear()\n\n            \"\"\"\n\n.. code-block:: python\n\n        @lru_cache(maxsize=None)\n        def get_media_folder_id_by_path(self, path_media_folder: PathMediaFolder) -> Optional[str]:\n            \"\"\"\n            get the id of a media folder\n            :param path_media_folder: path - for instance /Product Media/a000/000/001\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> my_folder_id = my_api.upsert_media_folders_by_path('/Product Media/test_get_media_folder_id_by_path/999/999')\n\n            >>> # Test Existing\n            >>> assert my_folder_id == my_api.get_media_folder_id_by_path('/Product Media/test_get_media_folder_id_by_path/999/999')\n\n            >>> # Test Invalid\n            >>> my_api.get_media_folder_id_by_path('not-existing-folder')\n            Traceback (most recent call last):\n                ...\n            OSError: media_folder path \"not-existing-folder\" is invalid, it must be absolute\n\n            >>> # Test Not Existing\n            >>> my_api.get_media_folder_id_by_path('/not-existing-folder')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: media_folder path \"/not-existing-folder\" not found\n\n            >>> # Test clear Cache -the Cache has to be cleared if media_folders are inserted or deleted\n            >>> my_api.get_media_folder_id_by_path.cache_clear()\n\n            >>> # Teardown\n            >>> my_api.delete_media_folder_by_path('/Product Media/test_get_media_folder_id_by_path', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def get_media_folders(self, payload: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all media_folder - filters and so on can be set in the payload\n            we read paginated (in junks of 100 items) - this is done automatically by function base_client.request_get_paginated()\n\n            :parameters\n                payload, to set filters etc.\n\n            :returns\n                l_dict_data,\n\n            sample payload :\n                page and limit will be overridden by function base_client.request_get_paginated() and will be ignored\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> my_l_dict_data = my_api.get_media_folders()\n            \"\"\"\n\n.. code-block:: python\n\n        def get_media_id_by_media_filename(self, media_filename: PathMedia) -> str:\n            \"\"\"\n            gets the media_id from media_folder_id and media_filename\n            this can only work if the picture is already uploaded !\n            :param media_filename:  the filename (with extension) as string, like 'test001_01_1280.jpg', or the url link that ends with '.../test001_01_1280.jpg'\n            :return:\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> my_media_folder_id = my_api.upsert_media_folders_by_path('/Product Media/test_get_media_id/999/999')\n            >>> my_media_id = my_api.insert_media(media_folder_id=my_media_folder_id, url='https://pics.rotek.at/test/test001/bilder/test001_07_1280.jpg')\n\n            >>> # test existing Folder, existing Media\n            >>> my_media_filename = 'test001_07_1280.jpg'\n            >>> assert my_media_id == my_api.get_media_id_by_media_filename(media_filename=my_media_filename)\n\n            >>> # test non-existing Media\n            >>> my_media_filename = 'bat013_77_7777.jpg'\n            >>> my_api.get_media_id_by_media_filename(media_filename=my_media_filename)\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: media_filename: \"bat013_77_7777.jpg\" not found\n\n            >>> # Teardown\n            >>> my_api.delete_media_folder_by_path(path_media_folder = '/Product Media/test_get_media_id', force=True)\n            \"\"\"\n\n.. code-block:: python\n\n        def get_medias(self, payload: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all media records - filters and so on can be set in the payload\n            we read paginated (in junks of 100 items) - this is done automatically by function base_client.request_get_paginated()\n\n            :parameters\n                payload, to set filters etc.\n\n            :returns\n                l_dict_data,\n\n\n            sample payload :\n                page and limit will be overridden by function base_client.request_get_paginated() and will be ignored\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> my_l_dict_data = my_api.get_medias()\n            \"\"\"\n\n.. code-block:: python\n\n        def insert_media(\n            self,\n            media_folder_id: Union[str, None],\n            url: str,\n            media_alt_txt: Union[str, None] = None,\n            media_title: Union[str, None] = None,\n            media_filename: Optional[PathMedia] = None,\n            upload_media: bool = True,\n        ) -> str:\n            \"\"\"\n            creates a single \"media record\" and uploads the media from the url - the media filename is taken from the url if not provided\n            note that the same media_filename must not exist twice in the shop, even if on different media folders !\n\n            this should only be used if You upload the media indipendently from products -\n            otherwise You should use associations to update the product with one request - see :\n            https://shopware.stoplight.io/docs/admin-api/ZG9jOjEyNjI1Mzkw-media-handling\n            https://shopware.stoplight.io/docs/admin-api/ZG9jOjEyMzA4NTUw-associationsundefined\n\n            if upload_media == False, You can only rely on the returned media_id to find the inserted record -\n                all other fields are \"None\" so the api functions is_media_existing, etc. will not work !\n                You need to store the media_id and upload the media to complete the record.\n\n            :param media_folder_id:     id des folders\n            :param url:                 url des files zum hochladen\n            :param media_alt_txt:       optional, 'alt'\n            :param media_title:         optional, 'title'\n            :param media_filename:      optional, the filename (with extension) as string, like 'test001_01_1280.jpg', otherwise taken from url\n            :param upload_media         if to upload the media\n            :return: the new Media ID\n\n            see : https://shopware.stoplight.io/docs/admin-api/c2NoOjE0MzUxMjU3-media\n            see : https://shopware.stoplight.io/docs/admin-api/ZG9jOjEyNjI1Mzkw-media-handling\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> my_media_folder_id = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_insert_media')\n\n            >>> # insert media\n            >>> ignore = my_api.insert_media(media_folder_id=my_media_folder_id, url='https://pics.rotek.at/test/test001/bilder/test001_07_1280.jpg',\n            ...     media_filename = 'test001_07_1280.jpg')\n\n            >>> # insert media, without stating filename\n            >>> ignore = my_api.insert_media(media_folder_id=my_media_folder_id, url='https://pics.rotek.at/test/test001/bilder/test001_08_1280.jpg')\n\n            >>> # cleanup\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/test_insert_media', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def insert_media_by_path(self, path_media: PathMedia, url: str, media_alt_txt: Union[str, None] = None, media_title: Union[str, None] = None) -> str:\n            \"\"\"\n            Inserts a Media by Path, and upload the media from the url.\n            note that the same media_filename must not exist twice in the shop, even if on different media folders !\n\n            this should only be used if You upload the media indipendently from products -\n            otherwise You should use associations to update the product with one request - see :\n            https://shopware.stoplight.io/docs/admin-api/ZG9jOjEyNjI1Mzkw-media-handling\n            https://shopware.stoplight.io/docs/admin-api/ZG9jOjEyMzA4NTUw-associationsundefined\n\n            since associations will only be upserted but not deleted we make following approach :\n            - delete the product_media relations for a product\n            -\n\n            :param path_media: '/Product Media/a000/123/456/000123456_01_1280.jpg'\n            :param url:  url='https://pics.rotek.at/test/test003/bilder/test003_01_1280.jpg'\n            :param media_alt_txt:   optional\n            :param media_title:     optional\n            :return: the new media id\n\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # insert media\n            >>> ignore = my_api.insert_media_by_path(path_media='/Product Media/insert_media_by_path/test001_07_1280.jpg',\n            ...     url='https://pics.rotek.at/test/test001/bilder/test001_07_1280.jpg')\n\n            >>> # insert media, without stating filename\n            >>> ignore = my_api.insert_media_by_path(path_media='/Product Media/insert_media_by_path/test001_08_1280.jpg',\n            ...     url='https://pics.rotek.at/test/test001/bilder/test001_07_1280.jpg')\n\n            >>> # cleanup\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/insert_media_by_path', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def insert_media_folder_by_name_and_parent_id(self, name: str, parent_id: Optional[str], configuration_id: Optional[str] = None) -> None:\n            \"\"\"\n            insert a media folder\n\n            :param name:             the name of the folder\n            :param parent_id:        the id of the parent folder\n            :param configuration_id: the folder configuration id. taken from parent folder if none\n            :return: None\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # insert Folder\n            >>> id_root = my_api.get_media_folder_id(name='Product Media', parent_id=None)  # noqa\n            >>> my_api.insert_media_folder_by_name_and_parent_id(name='test_insert_media_folder_by_name_and_parent_id', parent_id=id_root)\n            >>> assert True == my_api.is_media_folder_existing_by_path('/Product Media/test_insert_media_folder_by_name_and_parent_id')\n\n            >>> # delete the inserted Folder\n            >>> my_api.delete_media_folder_by_path('/Product Media/test_insert_media_folder_by_name_and_parent_id')\n\n            \"\"\"\n\n.. code-block:: python\n\n        def is_media_existing(self, media_filename: str) -> bool:\n            \"\"\"\n            True if the media ID exists -\n            the media_id is read from the filename or the filename of the url. filename needs to have extension for the media mime type\n\n            :param media_filename: filename or url of the media (if the filename is the same like the name in the url)\n            :return:\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # insert media\n            >>> ignore01 = my_api.insert_media_by_path(path_media='/Product Media/test_is_media_existing/is_media_existing_01.jpg', \\\n                    url='https://pics.rotek.at/test/test001/bilder/test001_05_1280.jpg')\n\n            >>> # test check exist\n            >>> assert True == my_api.is_media_existing(media_filename='https://pics.rotek.at/test/test001/bilder/is_media_existing_01.jpg')\n            >>> assert True == my_api.is_media_existing(media_filename='is_media_existing_01.jpg')\n\n            >>> # test check not exist\n            >>> assert False == my_api.is_media_existing(media_filename='does_not_exist.jpg')\n\n            >>> # test no extension\n            >>> my_api.is_media_existing(media_filename='no_extension')\n            Traceback (most recent call last):\n                ...\n            ValueError: media \"no_extension\" does not have an extension\n\n            >>> # cleanup\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/test_is_media_existing', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def is_media_existing_by_media_id(self, media_id: str) -> bool:\n            \"\"\"\n            :param media_id:\n            :return:\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> my_media_id = my_api.insert_media_by_path(path_media='/Product Media/test_is_media_existing_by_media_id/is_media_existing_by_media_id.jpg', \\\n                    url='https://pics.rotek.at/test/test001/bilder/test001_05_1280.jpg')\n\n            >>> # Test Existing\n            >>> assert True == my_api.is_media_existing_by_media_id(my_media_id)\n\n            >>> # Test not Existing\n            >>> assert False == my_api.is_media_existing_by_media_id('0123456789')\n\n            >>> # TearDown\n            >>> my_api.delete_media_folder_by_path('/Product Media/test_is_media_existing_by_media_id', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def is_media_folder_containing_subfolders(self, media_folder_id: Optional[str]) -> bool:\n            \"\"\"\n            :returns True if there is a subfolder in the media folder\n            :param media_folder_id:\n            :return:\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> ignore = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_is_media_folder_containing_subfolders')\n\n            >>> # Test subfolder existing\n            >>> my_media_folder_id=my_api.get_media_folder_id_by_path(path_media_folder='/')\n            >>> assert True == my_api.is_media_folder_containing_subfolders(media_folder_id=my_media_folder_id)\n\n            >>> # test no Subfolder\n            >>> my_media_folder_id=my_api.get_media_folder_id_by_path(path_media_folder='/Product Media/test_is_media_folder_containing_subfolders')\n            >>> assert False == my_api.is_media_folder_containing_subfolders(media_folder_id=my_media_folder_id)\n\n            >>> # test Media Folder not existing\n            >>> my_api.is_media_folder_containing_subfolders(media_folder_id='0123456789')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: media_folder id \"0123456789\" not found\n\n            >>> # teardown\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/test_is_media_folder_containing_subfolders')\n\n            \"\"\"\n\n.. code-block:: python\n\n        def is_media_folder_empty(self, media_folder_id: Optional[str]) -> bool:\n            \"\"\"\n            true if the media_folder does not contain any media files or subfolders\n            :param media_folder_id:\n            :return:\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> ignore1 = my_api.insert_media_by_path(path_media='/Product Media/test_is_media_folder_empty_with_media/test003_01_1280.jpg',\n            ...     url='https://pics.rotek.at/test/test003/bilder/test003_01_1280.jpg')\n            >>> ignore2 = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_is_media_folder_empty_with_subfolder/subfolder')\n            >>> ignore3 = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_is_media_folder_empty_empty')\n\n            >>> # test no subfolder, media files existing\n            >>> my_media_folder_id=my_api.get_media_folder_id_by_path(path_media_folder='/Product Media/test_is_media_folder_empty_with_media')\n            >>> assert False == my_api.is_media_folder_containing_subfolders(media_folder_id=my_media_folder_id)\n\n            >>> # Test subfolder existing, no media files\n            >>> my_media_folder_id=my_api.get_media_folder_id_by_path(path_media_folder='/Product Media/test_is_media_folder_empty_with_subfolder')\n            >>> assert False == my_api.is_media_folder_empty(media_folder_id=my_media_folder_id)\n\n            >>> # Test no subfolder, no media files existing\n            >>> my_media_folder_id=my_api.get_media_folder_id_by_path(path_media_folder='/Product Media/test_is_media_folder_empty_empty')\n            >>> assert True == my_api.is_media_folder_empty(media_folder_id=my_media_folder_id)\n\n            >>> # Test Folder not existing\n            >>> my_api.is_media_folder_containing_subfolders(media_folder_id='0123456789')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: media_folder id \"0123456789\" not found\n\n            >>> # Teardown\n            >>> my_api.delete_media_folder_by_path('/Product Media/test_is_media_folder_empty_with_media', force=True)\n            >>> my_api.delete_media_folder_by_path('/Product Media/test_is_media_folder_empty_with_subfolder', force=True)\n            >>> my_api.delete_media_folder_by_path('/Product Media/test_is_media_folder_empty_empty', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def is_media_folder_empty_by_path(self, path_media_folder: PathMediaFolder) -> bool:\n            \"\"\"\n            true if the media_folder does not contain any media files or subfolders\n            :param path_media_folder: like '/Product Media/a000/000/001\n            :return:\n\n                    >>> # Setup\n            >>> my_api = Media()\n            >>> ignore1 = my_api.insert_media_by_path(path_media='/Product Media/test_is_media_folder_empty_by_path_with_media/test003_01_1280.jpg',\n            ...     url='https://pics.rotek.at/test/test003/bilder/test003_01_1280.jpg')\n            >>> ignore2 = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_is_media_folder_empty_by_path_with_subfolder/subfolder')\n            >>> ignore3 = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_is_media_folder_empty_by_path_empty')\n\n            >>> # Test no subfolder, media files existing\n            >>> assert False == my_api.is_media_folder_empty_by_path(path_media_folder='/Product Media/test_is_media_folder_empty_by_path_with_media')\n\n            >>> # Test subfolder existing, no media files\n            >>> assert False == my_api.is_media_folder_empty_by_path(path_media_folder='/Product Media/test_is_media_folder_empty_by_path_with_subfolder')\n\n            >>> # Test no subfolder, no media files existing\n            >>> assert True == my_api.is_media_folder_empty_by_path(path_media_folder='/Product Media/test_is_media_folder_empty_by_path_empty')\n\n            >>> # test Folder not existing\n            >>> my_api.is_media_folder_containing_subfolders(media_folder_id='0123456789')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: media_folder id \"0123456789\" not found\n\n            >>> # Teardown\n            >>> my_api.delete_media_folder_by_path('/Product Media/test_is_media_folder_empty_by_path_with_media', force=True)\n            >>> my_api.delete_media_folder_by_path('/Product Media/test_is_media_folder_empty_by_path_with_subfolder', force=True)\n            >>> my_api.delete_media_folder_by_path('/Product Media/test_is_media_folder_empty_by_path_empty', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def is_media_folder_existing(self, media_folder_id: Optional[str]) -> bool:\n            \"\"\"\n            True if the folder exists, False if it does not exist\n            :param media_folder_id:\n            :return:\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # Test media_folder existing\n            >>> my_media_folder_id=my_api.get_media_folder_id_by_path(path_media_folder='/Product Media')\n            >>> assert True == my_api.is_media_folder_existing(media_folder_id=my_media_folder_id)\n\n            >>> # Test media_folder not existing\n            >>> assert False == my_api.is_media_folder_existing(media_folder_id='0123456789')\n            \"\"\"\n\n.. code-block:: python\n\n        def is_media_folder_existing_by_path(self, path_media_folder: PathMediaFolder) -> bool:\n            \"\"\"\n            True if the folder exists, False if it does not exist\n            :param path_media_folder: like '/Product Media/a000/000/001\n            :return:\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # Test media_folder existing\n            >>> assert True == my_api.is_media_folder_existing_by_path(path_media_folder='/Product Media')\n\n            >>> # Test media_folder not existing\n            >>> assert False == my_api.is_media_folder_existing_by_path(path_media_folder='/test_is_media_folder_existing_by_path/sub1/sub2')\n\n            \"\"\"\n\n.. code-block:: python\n\n        def is_media_in_media_folder(self, media_folder_id: Optional[str]) -> bool:\n            \"\"\"\n            :returns True if there is some media files in the media folder\n            :param media_folder_id:\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> ignore01 = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_is_media_in_media_folder_no_media')\n            >>> ignore02 = my_api.insert_media_by_path(path_media='/Product Media/test_is_media_in_media_folder_with_media/test001_07_1280.jpg',\n            ...     url='https://pics.rotek.at/test/test001/bilder/test001_07_1280.jpg')\n\n\n            >>> # Test no Media in Folder\n            >>> my_media_folder_id = my_api.get_media_folder_id_by_path('/Product Media/test_is_media_in_media_folder_no_media')\n            >>> assert False == my_api.is_media_in_media_folder(media_folder_id = my_media_folder_id)\n            >>> # Test Media in Folder\n            >>> my_media_folder_id = my_api.get_media_folder_id_by_path('/Product Media/test_is_media_in_media_folder_with_media')\n            >>> assert True == my_api.is_media_in_media_folder(media_folder_id = my_media_folder_id)\n            >>> # Test Folder not existing\n            >>> my_api.is_media_in_media_folder(media_folder_id = '01234567890')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: media_folder id \"01234567890\" not found\n\n            >>> # Teardown\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/test_is_media_in_media_folder_no_media', force=True)\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/test_is_media_in_media_folder_with_media', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def search_media_folders(self, payload: PayLoad = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all the media folders\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # test\n            >>> my_l_data_dict = my_api.search_media_folders()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def search_medias(self, payload: PayLoad = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all the media\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # insert article\n            >>> ignore = my_api.search_medias()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def update_media(\n            self,\n            media_folder_id: Union[str, None],\n            url: str,\n            media_alt_txt: Union[str, None] = None,\n            media_title: Union[str, None] = None,\n            media_filename: Optional[PathMedia] = None,\n            upload_media: bool = True,\n        ) -> str:\n            \"\"\"\n            find the media record by media_filename and media_folder_id,\n            update Media \"mediaFolderId\", \"alt\" and \"title\"\n            upload the image from url.\n            if no \"media_filename\" is provided, the media filename is taken from the url.\n\n            :param media_folder_id:     folder id\n            :param url:                 url of the file to upload\n            :param media_alt_txt:       'alt'\n            :param media_title:         'title'\n            :param media_filename:      the filename (with extension) as string, like 'test001_01_1280.jpg'\n            :param upload_media:        if to upload the media\n            :return: the media_id\n\n            see : https://shopware.stoplight.io/docs/admin-api/c2NoOjE0MzUxMjU3-media\n            see : https://shopware.stoplight.io/docs/admin-api/ZG9jOjEyNjI1Mzkw-media-handling\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> my_media_folder_id = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_update_media')\n\n            >>> # insert media\n            >>> ignore01 = my_api.insert_media(media_folder_id=my_media_folder_id, url='https://pics.rotek.at/test/test001/bilder/test001_09_1280.jpg',\n            ...     media_filename = 'test001_09_1280.jpg')\n\n            >>> # update media, with url different from filename\n            >>> ignore02 = my_api.update_media(media_folder_id=my_media_folder_id, url='https://pics.rotek.at/test/test003/bilder/test003_01_1280.jpg',\n            ...     media_filename = 'test001_09_1280.jpg')\n\n            >>> # cleanup\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/test_update_media', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def upload_media_from_url(self, media_id: str, url: str, filename_suffix: str, filename_stem: str) -> None:\n            \"\"\"\n            uploads the media to an existing media_id\n            note that the same media_filename must not exist twice in the shop, even if on different media folders !\n            :param media_id:        the media id\n            :param url:             the url to upload the media from\n            :param filename_suffix: the extension, like \"jpg\"\n            :param filename_stem:   the filename (without extension)\n            :return:\n            \"\"\"\n\n.. code-block:: python\n\n        def upsert_media(\n            self,\n            product_number: Union[int, str],\n            position: int,\n            url: str,\n            media_alt: Union[str, None] = None,\n            media_title: Union[str, None] = None,\n            upload_media: bool = True,\n        ) -> str:\n            \"\"\"\n            Insert or updates the Media and its folder. On insert, the media_id is calculated from product_number\n            media folders are created as needed\n\n            if upload_media == False, You can only rely on the returned media_id to find the inserted record -\n                all other fields are \"None\" so the api functions is_media_existing, etc. will not work !\n                You need to store the media_id and upload the media to complete the record.\n\n            :param product_number: 9 digit rotek artikelnummer\n            :param position: the position when sorting pictures\n            :param url:\n            :param media_alt:\n            :param media_title:\n            :param upload_media:\n            :return: the new, or updated media_id\n\n            >>> # Setup\n            >>> my_api = Media()\n            >>> my_api.conf_path_media_folder_root = '/Product Media/api_test_upsert_product_media'\n            >>> my_url='https://pics.rotek.at/test/test001/bilder/test001_03_1280.jpg'\n            >>> my_product_number = '997997997'\n            >>> my_media_filename = my_api.calc_media_filename_from_product_number(\n            ...     product_number=my_product_number, position=1, url=my_url)\n\n            >>> # Test media is not existing now\n            >>> assert False == my_api.is_media_existing(media_filename=my_media_filename)\n\n            >>> # Test media upsert (insert)\n            >>> ignore01 = my_api.upsert_media(product_number=my_product_number, position=1, url=my_url)\n            >>> assert True == my_api.is_media_existing(media_filename=my_media_filename)\n\n            >>> # Test media upsert (update)\n            >>> ignore02 = my_api.upsert_media(product_number=my_product_number, position=1, url=my_url)\n            >>> assert True == my_api.is_media_existing(media_filename=my_media_filename)\n            >>> assert ignore01 == ignore02\n\n            >>> # cleanup\n            >>> my_api.delete_media_folder_by_path(my_api.conf_path_media_folder_root, force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def upsert_media_folders_by_path(self, path_media_folder: PathMediaFolder, configuration_id: Optional[str] = None) -> Optional[str]:\n            \"\"\"\n            upsert media folders - including the parents, exist is ok\n\n            :param path_media_folder: like '/Product Media/a000/000/001\n            :param configuration_id: the folder configuration id. taken from parent folder if none\n            :return: the id of the last created folder\n\n            >>> # Setup\n            >>> my_api = Media()\n\n            >>> # Test\n            >>> discard = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_insert_media_folder_by_path/subfolder1/subfolder2')\n            >>> assert True == my_api.is_media_folder_existing_by_path(path_media_folder='/Product Media/test_insert_media_folder_by_path/subfolder1/subfolder2')\n\n            >>> # test Exist = Ok\n            >>> discard = my_api.upsert_media_folders_by_path(path_media_folder='/Product Media/test_insert_media_folder_by_path/subfolder1/subfolder2')\n            >>> assert True == my_api.is_media_folder_existing_by_path(path_media_folder='/Product Media/test_insert_media_folder_by_path/subfolder1/subfolder2')\n\n            >>> # Teardown\n            >>> my_api.delete_media_folder_by_path(path_media_folder='/Product Media/test_insert_media_folder_by_path', force=True)\n\n            \"\"\"\n\nProduct\n=======\nback to `Overview`_\n\n.. code-block:: python\n\n    @attrs.define\n    class ProductPicture:\n        \"\"\"\n        dataclass to upsert a picture\n        \"\"\"\n\n.. code-block:: python\n\n    class Product(object):\n        def __init__(\n            self, admin_client: Optional[Shopware6AdminAPIClientBase] = None, config: Optional[ConfShopware6ApiBase] = None, use_docker_test_container: bool = False\n        ) -> None:\n            \"\"\"\n            :param admin_client:\n            :param config:\n            :param use_docker_test_container:\n\n            >>> # Setup\n            >>> my_api = Product()\n\n            \"\"\"\n\n.. code-block:: python\n\n        @staticmethod\n        def calc_new_product_id(product_number: Union[int, str]) -> str:\n            \"\"\"\n            :param product_number:\n            :return: the new id\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> # Test\n            >>> my_new_product_id = my_api.calc_new_product_id(product_number='123')\n            >>> my_new_product_id2 = my_api.calc_new_product_id(product_number='1234')\n            >>> assert 32 == len(my_new_product_id)\n            >>> assert my_new_product_id != my_new_product_id2\n\n            \"\"\"\n\n.. code-block:: python\n\n        @staticmethod\n        def calc_new_product_media_id(product_id: str, position: int) -> str:\n            \"\"\"\n            the new product_media_id is calculated from product_id and position\n\n            :param product_id:\n            :param position:\n            :return:\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> # Test\n            >>> my_new_product_media_id = my_api.calc_new_product_media_id(product_id='123', position=0)\n            >>> my_new_product_media_id2 = my_api.calc_new_product_media_id(product_id='123', position=1)\n            >>> assert 32 == len(my_new_product_media_id)\n            >>> assert my_new_product_media_id != my_new_product_media_id2\n\n            \"\"\"\n\n.. code-block:: python\n\n        def cache_clear_product(self) -> None:\n            \"\"\"\n            Cache of some functions has to be cleared if articles are inserted or deleted\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> # Test\n            >>> my_api.cache_clear_product()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def delete_product_by_id(self, product_id: str) -> None:\n            \"\"\"\n            :param product_id:\n            :return:\n\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> my_article_id = my_api.insert_product(name='rn-doctest-article', product_number='test_delete_article_by_id_001', price_brutto=Decimal(0), stock=0)\n\n            >>> # delete_article\n            >>> my_api.delete_product_by_id(product_id=my_article_id)\n\n            \"\"\"\n\n.. code-block:: python\n\n        @lru_cache(maxsize=None)\n        def get_product_id_by_product_number(self, product_number: Union[int, str]) -> str:\n            \"\"\"\n            :param product_number:\n            :return:\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> my_payload = dal.Criteria(limit=1, page=1)\n            >>> first_article = my_api._admin_client.request_get(request_url=\"product\", payload=my_payload)[\"data\"][0]\n            >>> my_article_id = first_article['id']\n            >>> my_article_product_number = first_article['productNumber']\n\n            >>> # Test get article_id\n            >>> assert my_article_id == my_api.get_product_id_by_product_number(product_number=my_article_product_number)\n\n            >>> # test not existing (int)\n            >>> my_api.get_product_id_by_product_number(product_number='get_article_id_by_product_number9999_not_existing')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: article with productNumber(mysql_artikelnummer) \"...\" not found\n\n            >>> # test not existing (str)\n            >>> my_api.get_product_id_by_product_number(product_number='not_existing')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: article with productNumber(mysql_artikelnummer) \"not_existing\" not found\n\n            >>> # Test clear Cache - the Cache has to be cleared if products are inserted or deleted\n            >>> my_api.get_product_id_by_product_number.cache_clear()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def delete_product_media_relation_by_id(self, product_media_id: str) -> None:\n            \"\"\"\n            delete product-media relation - but not the media itself.\n\n            :param product_media_id:\n            :return:\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> my_api.media.conf_path_media_folder_root = '/Product Media/api_test_delete_product_media_by_id'\n            >>> product_number = 'test_delete_product_media_by_id'\n            >>> my_url='https://pics.rotek.at/test/test001/bilder/test001_01_1280.jpg'\n            >>> my_position = 10\n\n            >>> my_product_id = my_api.insert_product(name='rn-doctest-article', product_number=product_number, price_brutto=Decimal(0), stock=0)\n            >>> my_media_id = my_api.media.upsert_media(product_number=product_number, position=my_position, url=my_url)\n            >>> my_product_media_id = my_api.insert_product_media_relation(product_id=my_product_id, media_id=my_media_id, position=my_position)\n\n            >>> # Test\n            >>> assert True == my_api.is_media_used_in_product_media(media_id=my_media_id)\n            >>> my_api.delete_product_media_relation_by_id(product_media_id=my_product_media_id)\n            >>> assert False == my_api.is_media_used_in_product_media(media_id=my_media_id)\n\n            >>> # Teardown\n            >>> my_api.delete_product_by_id(product_id=my_product_id)\n            >>> my_api.media.delete_media_folder_by_path(my_api.media.conf_path_media_folder_root, force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def delete_product_media_relations_by_product_number(self, product_number: Union[int, str]) -> None:\n            \"\"\"\n            Delete all product_media relations of a product , but not the media itself,\n            because there will be a reorg which deletes unused pictures.\n            it does not change the cover picture\n\n            It is neccessary to delete the product_media_relations before updating them, because otherwise\n            deletion of pictures on the source database would not be propagated.\n\n            If someone need to update the product pictures very frequently on a huge amount of products,\n            there might be more efficient (but much more complicated) methods.\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> my_api.media.conf_path_media_folder_root = '/Product Media/api_test_delete_product_picture_relations'\n            >>> my_product_number = 'api_test_delete_product_picture_relations'\n            >>> my_url='https://pics.rotek.at/test/test001/bilder/test001_01_1280.jpg'\n\n\n            >>> my_product_id = my_api.insert_product(name='test_del_prod_media_rel_by_prod_number_001', product_number=my_product_number, \\\n                    price_brutto=Decimal(0), stock=0)\n\n            >>> my_position = 10\n            >>> my_media_id_10 = my_api.media.upsert_media(product_number=my_product_number, position=my_position, url=my_url)\n            >>> my_product_media_id_10 = my_api.insert_product_media_relation(product_id=my_product_id, media_id=my_media_id_10, position=my_position)\n\n            >>> my_position = 20\n            >>> my_media_id_20 = my_api.media.upsert_media(product_number=my_product_number, position=my_position, url=my_url)\n            >>> my_product_media_id_20 = my_api.insert_product_media_relation(product_id=my_product_id, media_id=my_media_id_20, position=my_position)\n\n            >>> # Test delete product_media_relations\n            >>> assert True == my_api.is_media_used_in_product_media(media_id=my_media_id_10)\n            >>> assert True == my_api.is_media_used_in_product_media(media_id=my_media_id_20)\n            >>> my_api.delete_product_media_relations_by_product_number(product_number=my_product_number)\n            >>> assert False == my_api.is_media_used_in_product_media(media_id=my_media_id_10)\n            >>> assert False == my_api.is_media_used_in_product_media(media_id=my_media_id_20)\n\n            >>> # Test delete product_media_relations - product not existing is ok\n            >>> my_api.delete_product_by_id(product_id=my_product_id)\n            >>> my_api.delete_product_media_relations_by_product_number(product_number=my_product_number)\n\n            >>> # Teardown\n            >>> my_api.media.delete_media_folder_by_path(my_api.media.conf_path_media_folder_root, force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def get_product_medias(self, payload: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all product_media - filters and so on can be set in the payload\n            we read paginated (in junks of 100 items) - this is done automatically by function base_client.request_get_paginated()\n\n            :parameters\n                payload, to set filters etc.\n\n            :returns\n                l_dict_data,\n\n            sample payload :\n                page and limit will be overridden by function base_client.request_get_paginated() and will be ignored\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> my_l_dict_data = my_api.get_product_medias()\n            \"\"\"\n\n.. code-block:: python\n\n        def get_products(self, payload: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all articles back - filters and so on can be set in the payload\n            we read paginated (in junks of 100 items) - this is done automatically by function base_client.request_get_paginated()\n\n            :parameters\n                payload, to set filters etc.\n\n            :returns\n                l_dict_data,\n\n\n            sample payload :\n                page and limit will be overridden by function base_client.request_get_paginated() and will be ignored\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> dict_data = my_api.get_products()\n            >>> assert len(dict_data) > 5\n\n            \"\"\"\n\n.. code-block:: python\n\n        def insert_product(\n            self,\n            name: str,\n            product_number: Union[int, str],\n            stock: int = 0,\n            price_brutto: Decimal = Decimal(\"0.00\"),\n            price_netto: Decimal = Decimal(\"0.00\"),\n            tax_name: str = \"Standard rate\",\n            currency_iso_code: str = \"EUR\",\n            linked: bool = True,\n        ) -> str:\n            \"\"\"\n            see : https://shopware.stoplight.io/docs/admin-api/ZG9jOjEyMzA4NTUy-product-data#simple-payload\n\n            :param name:                        'Stromerzeuger GD4-1A-6000-5EBZ'\n            :param product_number:              productNumber, mysql_artikelnummer\n            :param stock:                       Anzahl auf Lager (?)\n            :param tax_name:                    default tax record ('Standard rate')\n            :param price_brutto:                this price is displayed to customers who see gross prices in the shop\n            :param price_netto:                 this price is shown to customers who see net prices in the shop\n                                                if the price_netto is 0.00 it will be calculated from brutto price with the\n                                                tax rate of the 'tax_name' stated\n            :param currency_iso_code:           the currency isoCode like 'EUR', 'CHF', ...\n            :param linked:                      this is a flag for the administration. If it is set to true,\n                                                the gross or net counterpart is calculated when a price is entered in the administration.\n\n            :return: the new product id\n\n            >>> # Setup\n            >>> my_api = Product()\n\n            >>> # insert article\n            >>> my_new_product_id = my_api.insert_product(name='test_insert_product001', product_number='test_insert_article_by_product_number_999',\n            ...                                           price_brutto=Decimal(100), stock=0)\n            >>> assert 32 == len(my_new_product_id)\n\n            >>> # Teardown\n            >>> my_api.delete_product_by_id(product_id=my_new_product_id)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def upsert_product_payload(self, product_number: Union[int, str], payload: Dict[str, Any]) -> str:\n\n.. code-block:: python\n\n        def insert_product_media_relation(self, product_id: str, media_id: str, position: int) -> str:\n            \"\"\"\n            inserts a single product_media Relation.\n            the new product_media_relation_id is calculated from product_id and position\n            this should only be used if You uploaded the media indipendently from products -\n            otherwise You should use associations to update the product with one request - see :\n            https://shopware.stoplight.io/docs/admin-api/ZG9jOjEyNjI1Mzkw-media-handling\n            https://shopware.stoplight.io/docs/admin-api/ZG9jOjEyMzA4NTUw-associationsundefined\n\n            :param product_id:\n            :param media_id:\n            :param position: 0-based\n            :return: the new product_media_relation_id\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> my_new_product_id = my_api.insert_product(name='rn-doctest-article', product_number='test_insert_product_media_999')\n            >>> my_new_media_id = my_api.media.insert_media_by_path( \\\n                    path_media='/Product Media/test_insert_product_media_999/test_insert_product_media_999_01_1280.jpg', \\\n                    url='https://pics.rotek.at/test/test001/bilder/test001_07_1280.jpg')\n\n            >>> # Test\n            >>> my_new_product_media_id = my_api.insert_product_media_relation(product_id=my_new_product_id, media_id=my_new_media_id, position=0)\n            >>> # Assert Media is used in product_media\n            >>> assert True == my_api.is_media_used_in_product_media(media_id=my_new_media_id)\n\n            >>> # Test delete Product, cascading delete to product_media\n            >>> my_api.delete_product_by_id(product_id=my_new_product_id)\n            >>> assert False == my_api.is_media_used_in_product_media(media_id=my_new_media_id)\n\n            >>> # Teardown\n            >>> my_api.media.delete_media_folder_by_path(path_media_folder = '/Product Media/test_insert_product_media_999/', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def is_media_used_in_product_media(self, media_id: str) -> bool:\n            \"\"\"\n            :returns True if the media is used in a product\n            :param media_id:\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> my_new_product_id = my_api.insert_product(name='rn-doctest-article', product_number='test_is_media_used_in_product_media_999')\n            >>> my_new_media_id = my_api.media.insert_media_by_path(\n            ...     path_media='/Product Media/test_is_media_used_in_product_media_999/test_is_media_used_in_product_media_999_01_1280.jpg',\n            ...     url='https://pics.rotek.at/test/test001/bilder/test001_07_1280.jpg')\n\n            >>> # Test\n            >>> my_new_product_media_id = my_api.insert_product_media_relation(product_id=my_new_product_id, media_id=my_new_media_id, position=0)\n            >>> # Assert Media is used in product_media\n            >>> assert True == my_api.is_media_used_in_product_media(media_id=my_new_media_id)\n\n            >>> # Test delete Product, cascading delete to product_media\n            >>> my_api.delete_product_by_id(product_id=my_new_product_id)\n            >>> assert False == my_api.is_media_used_in_product_media(media_id=my_new_media_id)\n\n            >>> # Teardown\n            >>> my_api.media.delete_media_folder_by_path(path_media_folder = '/Product Media/test_is_media_used_in_product_media_999', force=True)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def is_product_number_existing(self, product_number: Union[int, str]) -> bool:\n            \"\"\"\n            :param product_number:\n            :return:\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> my_new_product_id = my_api.insert_product(name='test_is_product_number_existing', product_number='is_product_number_existing_999')\n\n            >>> # Test\n            >>> assert True == my_api.is_product_number_existing(product_number = 'is_product_number_existing_999')\n            >>> assert False == my_api.is_product_number_existing(product_number = 'product_number_does_not_exist')\n\n            >>> # Teardown\n            >>> my_api.delete_product_by_id(product_id=my_new_product_id)\n\n            \"\"\"\n\n.. code-block:: python\n\n        def search_product_medias(self, payload: PayLoad = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            search product_media\n\n            >>> # Setup\n            >>> my_api = Product()\n\n            >>> # insert article\n            >>> ignore = my_api.search_product_medias()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def upsert_product_pictures(self, product_number: Union[int, str], l_product_pictures: List[ProductPicture]) -> None:\n            \"\"\"\n            upsert product pictures and cover picture. The first picture (by Position Number) is automatically the cover picture\n\n            :parameter product_number\n            :parameter l_product_pictures  list of Pictures\n\n            >>> # Setup\n            >>> my_api = Product()\n            >>> my_api.media.conf_path_media_folder_root = '/Product Media/api_test_upsert_product_pictures'\n            >>> my_product_number = 'test_upsert_product_pictures'\n\n            >>> my_product_id = my_api.insert_product(name='test_upsert_product_pictures', product_number=my_product_number, price_brutto=Decimal(0), stock=0)\n\n            >>> my_pictures=list()\n            >>> my_pictures.append(ProductPicture(position=20, url='https://pics.rotek.at/test/test001/bilder/test001_02_1280.jpg', media_alt='', media_title=''))\n            >>> my_pictures.append(ProductPicture(position=30, url='https://pics.rotek.at/test/test001/bilder/test001_03_1280.jpg', media_alt='', media_title=''))\n            >>> my_pictures.append(ProductPicture(position=40, url='https://pics.rotek.at/test/test001/bilder/test001_04_1280.jpg', media_alt='', media_title=''))\n            >>> my_pictures.append(ProductPicture(position=50, url='https://pics.rotek.at/test/test001/bilder/test001_05_1280.jpg', media_alt='', media_title=''))\n            >>> my_pictures.append(ProductPicture(position=10, url='https://pics.rotek.at/test/test001/bilder/test001_01_1280.jpg', media_alt='', media_title=''))\n\n            >>> # Test\n            >>> my_api.upsert_product_pictures(product_number=my_product_number, l_product_pictures=my_pictures)\n\n            >>> # Teardown\n            >>> my_api.delete_product_media_relations_by_product_number(product_number=my_product_number)\n            >>> my_api.delete_product_by_id(product_id=my_product_id)\n            >>> my_api.media.delete_media_folder_by_path(my_api.media.conf_path_media_folder_root, force=True)\n\n            \"\"\"\n\nTax\n===\nback to `Overview`_\n\n.. code-block:: python\n\n    class Tax(object):\n        def __init__(\n            self, admin_client: Optional[Shopware6AdminAPIClientBase] = None, config: Optional[ConfShopware6ApiBase] = None, use_docker_test_container: bool = False\n        ) -> None:\n            \"\"\"\n            :param admin_client:\n            :param config:\n            :param use_docker_test_container:\n\n            >>> # Setup\n            >>> my_api = Tax()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def cache_clear_tax(self) -> None:\n            \"\"\"\n            Cache of some functions has to be cleared if tax is inserted or deleted\n\n            >>> # Setup\n            >>> my_api = Tax()\n            >>> # test\n            >>> my_api.cache_clear_tax()\n\n            \"\"\"\n\n.. code-block:: python\n\n        @lru_cache(maxsize=None)\n        def get_tax_id_by_name(self, tax_name: str = \"Standard rate\") -> str:\n            \"\"\"\n            :param tax_name: the name of the tax record, like 'Standard rate', 'Reduced rate', 'Reduced Rate2'\n            :returns: the id of the tax record\n\n            >>> # Setup\n            >>> my_api = Tax()\n\n            >>> # test get 'Standard rate' id\n            >>> my_tax_id = my_api.get_tax_id_by_name()\n            >>> assert 32 == len(my_tax_id)\n\n            >>> # test not existing (int)\n            >>> my_api.get_tax_id_by_name(tax_name='not_existing')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: tax record with name \"not_existing\" not found\n\n            >>> # Test clear Cache -the Cache has to be cleared if tax records are inserted or deleted\n            >>> my_api.get_tax_id_by_name.cache_clear()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def get_taxes(self, payload: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all tax records - filters and so on can be set in the payload\n            we read paginated (in junks of 100 items) - this is done automatically by function base_client.request_get_paginated()\n\n            :parameters\n                payload, to set filters etc.\n\n            :returns\n                l_dict_data,\n\n\n            sample payload :\n                page and limit will be overridden by function base_client.request_get_paginated() and will be ignored\n\n            >>> # Setup\n            >>> my_api = Tax()\n            >>> my_l_dict_data = my_api.get_taxes()\n            \"\"\"\n\n.. code-block:: python\n\n        @lru_cache(maxsize=None)\n        def get_tax_rate_by_name(self, tax_name: str = \"Standard rate\") -> Decimal:\n            \"\"\"\n            :param tax_name: the name of the tax record, like 'Standard rate', 'Reduced rate', 'Reduced Rate2'\n            :returns: the percent , like Decimal('19.00')\n\n            >>> # Setup\n            >>> my_api = Tax()\n\n            >>> # test get 'Standard rate' percentage\n            >>> my_tax_rate = my_api.get_tax_rate_by_name()\n            >>> assert Decimal('19.00') == my_tax_rate\n\n            >>> # test not existing (int)\n            >>> my_api.get_tax_rate_by_name(tax_name='not_existing')\n            Traceback (most recent call last):\n                ...\n            FileNotFoundError: tax record with name \"not_existing\" not found\n\n            >>> # Test clear Cache -the Cache has to be cleared if tax records are inserted or deleted\n            >>> my_api.get_tax_id_by_name.cache_clear()\n\n            \"\"\"\n\nUnit\n========\nback to `Overview`_\n\n.. code-block:: python\n\n    class Unit(object):\n        def __init__(\n            self, admin_client: Optional[Shopware6AdminAPIClientBase] = None, config: Optional[ConfShopware6ApiBase] = None, use_docker_test_container: bool = False\n        ) -> None:\n            \"\"\"\n            :param admin_client:\n            :param config:\n            :param use_docker_test_container:\n\n            >>> # Setup\n            >>> my_api = Unit()\n\n            \"\"\"\n\n.. code-block:: python\n\n        def cache_clear_unit(self) -> None:\n            \"\"\"\n            Cache of some functions has to be cleared if unit records are inserted or deleted\n\n            >>> # Setup\n            >>> my_api = Unit()\n            >>> # Test\n            >>> my_api.cache_clear_unit()\n\n            \"\"\"\n\n.. code-block:: python\n\n        @lru_cache(maxsize=None)\n        def get_units(self, payload: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            get all delivery-time records - filters and so on can be set in the payload\n            we read paginated (in junks of 100 items) - this is done automatically by function base_client.request_get_paginated()\n\n            :parameters\n                payload, to set filters etc.\n\n            :returns\n                l_dict_data,\n\n\n            sample payload :\n                page and limit will be overridden by function base_client.request_get_paginated() and will be ignored\n\n            >>> # Setup\n            >>> my_api = Unit()\n\n            >>> # Test\n            >>> my_l_dict_data = my_api.get_units()\n            \"\"\"\n\n.. code-block:: python\n\n        def search_units(self, payload: PayLoad = None) -> List[Dict[str, Any]]:\n            \"\"\"\n            search delivery-time records\n\n            >>> # Setup\n            >>> my_api = Unit()\n\n            >>> # Test\n            >>> ignore = my_api.search_units()\n\n            \"\"\"\n\nUsage from Commandline\n------------------------\n\n.. code-block::\n\n   Usage: lib_shopware6_api [OPTIONS] COMMAND [ARGS]...\n\n     use the shopware 6 api\n\n   Options:\n     --version                     Show the version and exit.\n     --traceback / --no-traceback  return traceback information on cli\n     -h, --help                    Show this message and exit.\n\n   Commands:\n     info  get program informations\n\nInstallation and Upgrade\n------------------------\n\n- Before You start, its highly recommended to update pip and setup tools:\n\n\n.. code-block::\n\n    python -m pip --upgrade pip\n    python -m pip --upgrade setuptools\n\n- to install the latest release from PyPi via pip (recommended):\n\n.. code-block::\n\n    python -m pip install --upgrade lib_shopware6_api\n\n- to install the latest version from github via pip:\n\n\n.. code-block::\n\n    python -m pip install --upgrade git+https://github.com/bitranox/lib_shopware6_api.git\n\n\n- include it into Your requirements.txt:\n\n.. code-block::\n\n    # Insert following line in Your requirements.txt:\n    # for the latest Release on pypi:\n    lib_shopware6_api\n\n    # for the latest development version :\n    lib_shopware6_api @ git+https://github.com/bitranox/lib_shopware6_api.git\n\n    # to install and upgrade all modules mentioned in requirements.txt:\n    python -m pip install --upgrade -r /<path>/requirements.txt\n\n\n- to install the latest development version from source code:\n\n.. code-block::\n\n    # cd ~\n    $ git clone https://github.com/bitranox/lib_shopware6_api.git\n    $ cd lib_shopware6_api\n    python setup.py install\n\n- via makefile:\n  makefiles are a very convenient way to install. Here we can do much more,\n  like installing virtual environments, clean caches and so on.\n\n.. code-block:: shell\n\n    # from Your shell's homedirectory:\n    $ git clone https://github.com/bitranox/lib_shopware6_api.git\n    $ cd lib_shopware6_api\n\n    # to run the tests:\n    $ make test\n\n    # to install the package\n    $ make install\n\n    # to clean the package\n    $ make clean\n\n    # uninstall the package\n    $ make uninstall\n\nRequirements\n------------\nfollowing modules will be automatically installed :\n\n.. code-block:: bash\n\n    ## Project Requirements\n    attrs>=21.3.0\n    click\n    cli_exit_tools\n    lib_detect_testenv\n    lib_shopware6_api_base\n\nAcknowledgements\n----------------\n\n- special thanks to \"uncle bob\" Robert C. Martin, especially for his books on \"clean code\" and \"clean architecture\"\n\nContribute\n----------\n\nI would love for you to fork and send me pull request for this project.\n- `please Contribute <https://github.com/bitranox/lib_shopware6_api/blob/master/CONTRIBUTING.md>`_\n\nLicense\n-------\n\nThis software is licensed under the `MIT license <http://en.wikipedia.org/wiki/MIT_License>`_\n\n---\n\nChangelog\n=========\n\n- new MAJOR version for incompatible API changes,\n- new MINOR version for added functionality in a backwards compatible manner\n- new PATCH version for backwards compatible bug fixes\n\nv2.0.2.3\n---------\n2022-06-30: specify correct \"attr\" version in requirements\n\nv2.0.2.2\n---------\n2022-06-02: update to github actions checkout@v3 and setup-python@v3\n\nv2.0.2.1\n--------\n2022-06-01: update github actions test matrix\n\nv2.0.2\n--------\n2022-03-29: remedy mypy Untyped decorator makes function \"cli_info\" untyped\n\nv2.0.1\n--------\n2022-01-19: update documentation, enhance coverage\n\nv2.0.0\n--------\n2022-01-19: add function is_product_number_existing, add Unit functions, changed some method names\n\nv1.0.2\n--------\n2022-01-18: clean requirements.txt\n\nv1.0.1\n--------\n2022-01-18: Documentation update, make PyPi package\n\nv1.0.0\n--------\n2022-01-17: Initial Release\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bitranox/lib_shopware6_api",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lib-shopware6-api",
    "package_url": "https://pypi.org/project/lib-shopware6-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/lib-shopware6-api/",
    "project_urls": {
      "Homepage": "https://github.com/bitranox/lib_shopware6_api"
    },
    "release_url": "https://pypi.org/project/lib-shopware6-api/2.0.2.3/",
    "requires_dist": [
      "attrs (>=21.3.0)",
      "click",
      "cli-exit-tools",
      "lib-detect-testenv",
      "lib-shopware6-api-base"
    ],
    "requires_python": ">=3.6.0",
    "summary": "use the shopware 6 api",
    "version": "2.0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14290339,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53f3629362262ff56efae0f8117c5bd50bf78f801f0c614d072a3ddf1d6cd8b8",
          "md5": "871dc684904cb27f925b08f9204991e9",
          "sha256": "e0fac39dec3d9c1484a6ce97194e2bc34e62d57b6c1c7ca94935a96bec910fc2"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.0-py3.10.egg",
        "has_sig": false,
        "md5_digest": "871dc684904cb27f925b08f9204991e9",
        "packagetype": "bdist_egg",
        "python_version": "1.0.0",
        "requires_python": ">=3.6.0",
        "size": 59457,
        "upload_time": "2022-01-18T11:59:46",
        "upload_time_iso_8601": "2022-01-18T11:59:46.464377Z",
        "url": "https://files.pythonhosted.org/packages/53/f3/629362262ff56efae0f8117c5bd50bf78f801f0c614d072a3ddf1d6cd8b8/lib_shopware6_api-1.0.0-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80af1cf60a0a472a1f5859f6d2a8c9250e827ec5b84fbe188ea2529d5bbd297f",
          "md5": "c2c60ade8f1ff44edd9b7ae0a824e6c1",
          "sha256": "ad404fe1ccd47ac9df7fc967b503f4e240b418ab6f933d1bff93ab3a06db8fa1"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.0-py3.6.egg",
        "has_sig": false,
        "md5_digest": "c2c60ade8f1ff44edd9b7ae0a824e6c1",
        "packagetype": "bdist_egg",
        "python_version": "1.0.0",
        "requires_python": ">=3.6.0",
        "size": 59091,
        "upload_time": "2022-01-18T11:58:49",
        "upload_time_iso_8601": "2022-01-18T11:58:49.976324Z",
        "url": "https://files.pythonhosted.org/packages/80/af/1cf60a0a472a1f5859f6d2a8c9250e827ec5b84fbe188ea2529d5bbd297f/lib_shopware6_api-1.0.0-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e26594d28b550ddf9a49561c428d0f03cc61299b780826890023d444ef898279",
          "md5": "4f81a70e102dab778c1feb284827af4a",
          "sha256": "4c699aa006421d36963c226884ce79510603d0bb467f6988527e6d32e7ced788"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "4f81a70e102dab778c1feb284827af4a",
        "packagetype": "bdist_egg",
        "python_version": "1.0.0",
        "requires_python": ">=3.6.0",
        "size": 59210,
        "upload_time": "2022-01-18T11:58:53",
        "upload_time_iso_8601": "2022-01-18T11:58:53.094151Z",
        "url": "https://files.pythonhosted.org/packages/e2/65/94d28b550ddf9a49561c428d0f03cc61299b780826890023d444ef898279/lib_shopware6_api-1.0.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43bff5109e0970aaa0ed9ed9a875bda765309855e584cd70f19963dea3ea58eb",
          "md5": "9070f09d20dd15bb94b732dab6129cfc",
          "sha256": "40876b9d3f4caf4905a99345d0ca5058f8e4e9d9e1b331536a6787f055bdd977"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.0-py3.8.egg",
        "has_sig": false,
        "md5_digest": "9070f09d20dd15bb94b732dab6129cfc",
        "packagetype": "bdist_egg",
        "python_version": "1.0.0",
        "requires_python": ">=3.6.0",
        "size": 59328,
        "upload_time": "2022-01-18T11:58:18",
        "upload_time_iso_8601": "2022-01-18T11:58:18.208561Z",
        "url": "https://files.pythonhosted.org/packages/43/bf/f5109e0970aaa0ed9ed9a875bda765309855e584cd70f19963dea3ea58eb/lib_shopware6_api-1.0.0-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edd5947589c9b060572ae62d5d5f87986e947ea9549dcfce34d718d6c75be3cf",
          "md5": "429a777c745f575983b42a1844b43c4e",
          "sha256": "62ddfb51083e4391f56d7a23a3284e5aaf03db91a5b03533b1dde33c01eb2298"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "429a777c745f575983b42a1844b43c4e",
        "packagetype": "bdist_egg",
        "python_version": "1.0.0",
        "requires_python": ">=3.6.0",
        "size": 59276,
        "upload_time": "2022-01-18T11:58:43",
        "upload_time_iso_8601": "2022-01-18T11:58:43.736056Z",
        "url": "https://files.pythonhosted.org/packages/ed/d5/947589c9b060572ae62d5d5f87986e947ea9549dcfce34d718d6c75be3cf/lib_shopware6_api-1.0.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b528abd71d46810fb3c7b933303237eede483c747598412752a990f992c037a1",
          "md5": "5a0df67dc1bfb76d9a5ebf78b064c61c",
          "sha256": "1ec33871814e9c0b806fd20e172149eb0fd71455521070971576334f1d402ea7"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a0df67dc1bfb76d9a5ebf78b064c61c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 33557,
        "upload_time": "2022-01-18T11:58:14",
        "upload_time_iso_8601": "2022-01-18T11:58:14.572392Z",
        "url": "https://files.pythonhosted.org/packages/b5/28/abd71d46810fb3c7b933303237eede483c747598412752a990f992c037a1/lib_shopware6_api-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91e52d5fb8b89bc7937a498b6afa8d7bfe08f9f343bf850e8a1becb9f6d41c72",
          "md5": "639fe0d9770d75ca320abd0dac0894db",
          "sha256": "6a1a56d9cd42e3b02119823607fcb904fa19bd484767e6b3d424146ae316935d"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "639fe0d9770d75ca320abd0dac0894db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 49614,
        "upload_time": "2022-01-18T11:58:21",
        "upload_time_iso_8601": "2022-01-18T11:58:21.092078Z",
        "url": "https://files.pythonhosted.org/packages/91/e5/2d5fb8b89bc7937a498b6afa8d7bfe08f9f343bf850e8a1becb9f6d41c72/lib_shopware6_api-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95c1db86b5d9cda189e32505686db454152dfd7e4176aa63bf34f9ff2d29409f",
          "md5": "f4718276ddefb8efb4cccbedd08df920",
          "sha256": "1aa86a2e7f159cdf9f472b2e5ceb20ba7da51638571c1999d519443ca6418ea5"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.2-py3.10.egg",
        "has_sig": false,
        "md5_digest": "f4718276ddefb8efb4cccbedd08df920",
        "packagetype": "bdist_egg",
        "python_version": "1.0.2",
        "requires_python": ">=3.6.0",
        "size": 59540,
        "upload_time": "2022-01-18T14:08:45",
        "upload_time_iso_8601": "2022-01-18T14:08:45.953817Z",
        "url": "https://files.pythonhosted.org/packages/95/c1/db86b5d9cda189e32505686db454152dfd7e4176aa63bf34f9ff2d29409f/lib_shopware6_api-1.0.2-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2ca5af8c4ab0bc96665dfb8ca7121ba0cb1b7e749a735bc74a6ba245509c61b",
          "md5": "350d82ab0cd5d01e8cefa11a6d4486fc",
          "sha256": "c2c18b53c6c362b4d6d689a1a1b011beeb13651cbed1e00fc418ec0fbe0d2268"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.2-py3.6.egg",
        "has_sig": false,
        "md5_digest": "350d82ab0cd5d01e8cefa11a6d4486fc",
        "packagetype": "bdist_egg",
        "python_version": "1.0.2",
        "requires_python": ">=3.6.0",
        "size": 59172,
        "upload_time": "2022-01-18T14:07:47",
        "upload_time_iso_8601": "2022-01-18T14:07:47.934301Z",
        "url": "https://files.pythonhosted.org/packages/a2/ca/5af8c4ab0bc96665dfb8ca7121ba0cb1b7e749a735bc74a6ba245509c61b/lib_shopware6_api-1.0.2-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "918dcd6fd94c8d033ea8942b6498ac551c821bf4113b39a59bfc5876866f13ab",
          "md5": "e26a6923c9337f3280b3b14581d71be4",
          "sha256": "9314001b2082daf7b825cd56d3670ab1231a4dc14b4a73c7ebc454882d57b228"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.2-py3.7.egg",
        "has_sig": false,
        "md5_digest": "e26a6923c9337f3280b3b14581d71be4",
        "packagetype": "bdist_egg",
        "python_version": "1.0.2",
        "requires_python": ">=3.6.0",
        "size": 59285,
        "upload_time": "2022-01-18T14:06:46",
        "upload_time_iso_8601": "2022-01-18T14:06:46.405408Z",
        "url": "https://files.pythonhosted.org/packages/91/8d/cd6fd94c8d033ea8942b6498ac551c821bf4113b39a59bfc5876866f13ab/lib_shopware6_api-1.0.2-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fae3f2e4613f14132f54216c0dfa7cb14b2f1084ccaec94b317ecfefae433eb",
          "md5": "4dec44bf60dadf27fceaa53441c1e41b",
          "sha256": "94d40d0fca4cc396a69f933178e410ffd254c03b5e0eb6a0faafd80ef6ba0ab1"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.2-py3.8.egg",
        "has_sig": false,
        "md5_digest": "4dec44bf60dadf27fceaa53441c1e41b",
        "packagetype": "bdist_egg",
        "python_version": "1.0.2",
        "requires_python": ">=3.6.0",
        "size": 59413,
        "upload_time": "2022-01-18T14:07:34",
        "upload_time_iso_8601": "2022-01-18T14:07:34.589530Z",
        "url": "https://files.pythonhosted.org/packages/7f/ae/3f2e4613f14132f54216c0dfa7cb14b2f1084ccaec94b317ecfefae433eb/lib_shopware6_api-1.0.2-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "345170d2e394bc654e3762afa9cb07b98783c2ad1cc432418ec8902ae1b36065",
          "md5": "da143529aa008a9b460286d777c26b78",
          "sha256": "02618fcca1fdd1f8314c678ed0c100d89e6160497d5be3170614654ee7da5685"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.2-py3.9.egg",
        "has_sig": false,
        "md5_digest": "da143529aa008a9b460286d777c26b78",
        "packagetype": "bdist_egg",
        "python_version": "1.0.2",
        "requires_python": ">=3.6.0",
        "size": 59362,
        "upload_time": "2022-01-18T14:06:28",
        "upload_time_iso_8601": "2022-01-18T14:06:28.193527Z",
        "url": "https://files.pythonhosted.org/packages/34/51/70d2e394bc654e3762afa9cb07b98783c2ad1cc432418ec8902ae1b36065/lib_shopware6_api-1.0.2-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "971996e7f304d606218343ba2eb636a81d67fba1e52e10fa7d606567ff15b4de",
          "md5": "ae0a0d4f43955b17d45d42fb24ce684d",
          "sha256": "cd5521339d4fb3409ee1c4dab59ed4d33199ddf2dc555efe2380e36db14dafd7"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae0a0d4f43955b17d45d42fb24ce684d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 33635,
        "upload_time": "2022-01-18T14:06:25",
        "upload_time_iso_8601": "2022-01-18T14:06:25.804281Z",
        "url": "https://files.pythonhosted.org/packages/97/19/96e7f304d606218343ba2eb636a81d67fba1e52e10fa7d606567ff15b4de/lib_shopware6_api-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "320fdad66750d143bf57e0fc00dcbed7871b2069ec0ee494203f8ff51c8467bc",
          "md5": "f0a3b0b5fdb15752576cd95a90eb4738",
          "sha256": "88048babc72d3327d6b488f2b93df3d76e133ddae0ee87fea8e5e8259a7f2a16"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f0a3b0b5fdb15752576cd95a90eb4738",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 49869,
        "upload_time": "2022-01-18T14:06:30",
        "upload_time_iso_8601": "2022-01-18T14:06:30.353125Z",
        "url": "https://files.pythonhosted.org/packages/32/0f/dad66750d143bf57e0fc00dcbed7871b2069ec0ee494203f8ff51c8467bc/lib_shopware6_api-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fd481755f473491bc9fc30073b013e93a00fbb266853c49eaa41ad9056ea8b4",
          "md5": "1a11ff99443a7e9c1b85e23a6e1e0317",
          "sha256": "fbf0664f8b2c1ae7ff6d09a5ba8ef29ee1243c32c9e4d0909d18762b832ea8f4"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.0-py3.6.egg",
        "has_sig": false,
        "md5_digest": "1a11ff99443a7e9c1b85e23a6e1e0317",
        "packagetype": "bdist_egg",
        "python_version": "2.0.0",
        "requires_python": ">=3.6.0",
        "size": 62101,
        "upload_time": "2022-01-19T23:11:10",
        "upload_time_iso_8601": "2022-01-19T23:11:10.726192Z",
        "url": "https://files.pythonhosted.org/packages/1f/d4/81755f473491bc9fc30073b013e93a00fbb266853c49eaa41ad9056ea8b4/lib_shopware6_api-2.0.0-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f1b81825cdeae767f549d95e70cb63ac1523c322c099f880d904d7bf4d6eb4b",
          "md5": "3578b02357914e41d3e7c308be3b87de",
          "sha256": "699e9f1c4c49fe5bdfb26fe8e75ddf0dc617f94dbaf4fdd529abb0419f786d5d"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "3578b02357914e41d3e7c308be3b87de",
        "packagetype": "bdist_egg",
        "python_version": "2.0.0",
        "requires_python": ">=3.6.0",
        "size": 62213,
        "upload_time": "2022-01-19T23:10:50",
        "upload_time_iso_8601": "2022-01-19T23:10:50.767479Z",
        "url": "https://files.pythonhosted.org/packages/7f/1b/81825cdeae767f549d95e70cb63ac1523c322c099f880d904d7bf4d6eb4b/lib_shopware6_api-2.0.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "327a0a2dc574d6203053eb9053580ad37b200a317c32216cb19ec77d9f6288da",
          "md5": "f712271356ca5e5a145d0ddf7af70e33",
          "sha256": "a64ee755a4e0aba4e3ed9ec091d7e35abeb73bc236ae93501930732eb5c961be"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.0-py3.8.egg",
        "has_sig": false,
        "md5_digest": "f712271356ca5e5a145d0ddf7af70e33",
        "packagetype": "bdist_egg",
        "python_version": "2.0.0",
        "requires_python": ">=3.6.0",
        "size": 62361,
        "upload_time": "2022-01-19T23:11:03",
        "upload_time_iso_8601": "2022-01-19T23:11:03.936460Z",
        "url": "https://files.pythonhosted.org/packages/32/7a/0a2dc574d6203053eb9053580ad37b200a317c32216cb19ec77d9f6288da/lib_shopware6_api-2.0.0-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc728e895dde5f78bfb7bf57bb388fe377c4d5043bf4551cff830ee017fb3adb",
          "md5": "a6a927b75322544a867db00a0770f603",
          "sha256": "46ed1b6b8dd489191e4442ce5c969ac0ef6906533f797cc78a2e606d815c72bc"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "a6a927b75322544a867db00a0770f603",
        "packagetype": "bdist_egg",
        "python_version": "2.0.0",
        "requires_python": ">=3.6.0",
        "size": 62286,
        "upload_time": "2022-01-19T23:11:01",
        "upload_time_iso_8601": "2022-01-19T23:11:01.866705Z",
        "url": "https://files.pythonhosted.org/packages/fc/72/8e895dde5f78bfb7bf57bb388fe377c4d5043bf4551cff830ee017fb3adb/lib_shopware6_api-2.0.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "551d44068c0f6f51ce45b82a89b186a486163de06590d09ff88d449da921c910",
          "md5": "bee17a41e0abf4ecbc1ed782a96cf90a",
          "sha256": "9b208043357ecb26dbf00f3099cc1eb288021e5897bead32295115e316cfb213"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bee17a41e0abf4ecbc1ed782a96cf90a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 34961,
        "upload_time": "2022-01-19T23:10:48",
        "upload_time_iso_8601": "2022-01-19T23:10:48.296744Z",
        "url": "https://files.pythonhosted.org/packages/55/1d/44068c0f6f51ce45b82a89b186a486163de06590d09ff88d449da921c910/lib_shopware6_api-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "175149d091a63c1f83a682f02afbd20bb6bb0600e6288eceae45d11672d199ad",
          "md5": "2c14b71fb2c7e59db279ee33f22f290d",
          "sha256": "8580258bf17d9d8941c580440ba365ccb098889cd707b3c7d468eb44378539b3"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2c14b71fb2c7e59db279ee33f22f290d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 50159,
        "upload_time": "2022-01-19T23:10:53",
        "upload_time_iso_8601": "2022-01-19T23:10:53.111129Z",
        "url": "https://files.pythonhosted.org/packages/17/51/49d091a63c1f83a682f02afbd20bb6bb0600e6288eceae45d11672d199ad/lib_shopware6_api-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a65eda6d23537f36dcf32ebae5e7c8812867f16b8d998ccb70dd57afbc25ffaf",
          "md5": "4ad1b5b0e25600249b19cceed42dd517",
          "sha256": "4a442d8b6d7587188665c6dc05dee0e91b6b7954770502262704892041cec9b5"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.1-py3.10.egg",
        "has_sig": false,
        "md5_digest": "4ad1b5b0e25600249b19cceed42dd517",
        "packagetype": "bdist_egg",
        "python_version": "2.0.1",
        "requires_python": ">=3.6.0",
        "size": 62611,
        "upload_time": "2022-01-20T00:26:31",
        "upload_time_iso_8601": "2022-01-20T00:26:31.117732Z",
        "url": "https://files.pythonhosted.org/packages/a6/5e/da6d23537f36dcf32ebae5e7c8812867f16b8d998ccb70dd57afbc25ffaf/lib_shopware6_api-2.0.1-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2be07c2d956d85c69498c7d71fa16544db36bd5ba3ba869d7e685d4d120b4925",
          "md5": "de911a5ae4fe24d499106e163c351e5a",
          "sha256": "7398bc7868b6551e91003da26447fb6124bfd5f2d408bb1816d058ab605adab0"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.1-py3.6.egg",
        "has_sig": false,
        "md5_digest": "de911a5ae4fe24d499106e163c351e5a",
        "packagetype": "bdist_egg",
        "python_version": "2.0.1",
        "requires_python": ">=3.6.0",
        "size": 62230,
        "upload_time": "2022-01-20T00:24:36",
        "upload_time_iso_8601": "2022-01-20T00:24:36.504629Z",
        "url": "https://files.pythonhosted.org/packages/2b/e0/7c2d956d85c69498c7d71fa16544db36bd5ba3ba869d7e685d4d120b4925/lib_shopware6_api-2.0.1-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c94cb63ccc37d4c342c7a17aa55a5ca26eeec995b3770ffda061a9d0f297fabc",
          "md5": "5c5d07c2af0d5e76eae6e1920d48e650",
          "sha256": "f1ff3be43a5d5c76298385344914221b41b9882918f2e5bb43b231f11f8587f6"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.1-py3.7.egg",
        "has_sig": false,
        "md5_digest": "5c5d07c2af0d5e76eae6e1920d48e650",
        "packagetype": "bdist_egg",
        "python_version": "2.0.1",
        "requires_python": ">=3.6.0",
        "size": 62346,
        "upload_time": "2022-01-20T00:24:29",
        "upload_time_iso_8601": "2022-01-20T00:24:29.915104Z",
        "url": "https://files.pythonhosted.org/packages/c9/4c/b63ccc37d4c342c7a17aa55a5ca26eeec995b3770ffda061a9d0f297fabc/lib_shopware6_api-2.0.1-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "105d618e09f380316600fb404ec56d11c04548007cb4989d8c96fe0a11d4a912",
          "md5": "5623d69c35ad5e1eaa9001aab1926f67",
          "sha256": "08625e96abadf11b204b59b1814e7efab421732ab35ccf9599612dbc67e155f8"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.1-py3.8.egg",
        "has_sig": false,
        "md5_digest": "5623d69c35ad5e1eaa9001aab1926f67",
        "packagetype": "bdist_egg",
        "python_version": "2.0.1",
        "requires_python": ">=3.6.0",
        "size": 62489,
        "upload_time": "2022-01-20T00:25:20",
        "upload_time_iso_8601": "2022-01-20T00:25:20.149806Z",
        "url": "https://files.pythonhosted.org/packages/10/5d/618e09f380316600fb404ec56d11c04548007cb4989d8c96fe0a11d4a912/lib_shopware6_api-2.0.1-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef1ce552ad99cb2a57f0d5a2bd2d81ce00ce9b3b7589beb7c362aca5cbcb5030",
          "md5": "72beefee9edd2bf2ad125d4d6d951f70",
          "sha256": "361ae2d5c95aae3a48b8284f0c7fa8e0a4159697da0ffe65b4ec56c3368609f2"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.1-py3.9.egg",
        "has_sig": false,
        "md5_digest": "72beefee9edd2bf2ad125d4d6d951f70",
        "packagetype": "bdist_egg",
        "python_version": "2.0.1",
        "requires_python": ">=3.6.0",
        "size": 62414,
        "upload_time": "2022-01-20T00:24:36",
        "upload_time_iso_8601": "2022-01-20T00:24:36.834670Z",
        "url": "https://files.pythonhosted.org/packages/ef/1c/e552ad99cb2a57f0d5a2bd2d81ce00ce9b3b7589beb7c362aca5cbcb5030/lib_shopware6_api-2.0.1-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdd4f28c9a5666b1991d7471b8b19b69e0f5e71520413423b7e3f2307c7a2c4d",
          "md5": "cf346d1a45cf5c7b37a487c4d2b0938f",
          "sha256": "fb82020d2270b12194279490da318d92c0d1d54c9d07e54404225374fd54a7f1"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf346d1a45cf5c7b37a487c4d2b0938f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35065,
        "upload_time": "2022-01-20T00:24:27",
        "upload_time_iso_8601": "2022-01-20T00:24:27.760909Z",
        "url": "https://files.pythonhosted.org/packages/fd/d4/f28c9a5666b1991d7471b8b19b69e0f5e71520413423b7e3f2307c7a2c4d/lib_shopware6_api-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc86fbd8a523570580210c8c9a939447980a9cb434549e1600cbcac8fd0c4908",
          "md5": "ee99d0c0ae05858d7c9b032e00a507ca",
          "sha256": "4b0d2272a28228fb76f3f61e0645ca623f4276155e06c484f9e363ba3ad8e832"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ee99d0c0ae05858d7c9b032e00a507ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 50393,
        "upload_time": "2022-01-20T00:24:32",
        "upload_time_iso_8601": "2022-01-20T00:24:32.000482Z",
        "url": "https://files.pythonhosted.org/packages/cc/86/fbd8a523570580210c8c9a939447980a9cb434549e1600cbcac8fd0c4908/lib_shopware6_api-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b36df8be524ff8642da04ec8204f91bba9edf5c2e31c56562e8419e19469e68",
          "md5": "34e9e1d00387c9e11274c55b5b8e0792",
          "sha256": "5ba67fe90c7fd4bcebf612b43cb7a59828a03bc2a4f7ad8222cafe0bb00edcbf"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2-py3.10.egg",
        "has_sig": false,
        "md5_digest": "34e9e1d00387c9e11274c55b5b8e0792",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2",
        "requires_python": ">=3.6.0",
        "size": 62666,
        "upload_time": "2022-03-29T10:09:59",
        "upload_time_iso_8601": "2022-03-29T10:09:59.656792Z",
        "url": "https://files.pythonhosted.org/packages/1b/36/df8be524ff8642da04ec8204f91bba9edf5c2e31c56562e8419e19469e68/lib_shopware6_api-2.0.2-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ba72c25e95c4211d821c5ca294707706b148972e3b573c7603aba952a351736",
          "md5": "8190036611b3b12df68c43009226985b",
          "sha256": "8e24c141d42ae36657ca8cc00dab26de641705ec4b7d85f3e922b6ae96acd5ed"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2-py3.6.egg",
        "has_sig": false,
        "md5_digest": "8190036611b3b12df68c43009226985b",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2",
        "requires_python": ">=3.6.0",
        "size": 62284,
        "upload_time": "2022-03-29T10:08:29",
        "upload_time_iso_8601": "2022-03-29T10:08:29.033298Z",
        "url": "https://files.pythonhosted.org/packages/1b/a7/2c25e95c4211d821c5ca294707706b148972e3b573c7603aba952a351736/lib_shopware6_api-2.0.2-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33fd3f252727145e4e79b64950e4c51a2990a3e349246f2ca1457cafdc229aa9",
          "md5": "f342cdbba65b16eb8a313049909f5e9c",
          "sha256": "eb7620aa4d2ff95e1bc5bd95f6223f67608370fb6b4911b7b283d3e04a1adbb6"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2-py3.7.egg",
        "has_sig": false,
        "md5_digest": "f342cdbba65b16eb8a313049909f5e9c",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2",
        "requires_python": ">=3.6.0",
        "size": 62401,
        "upload_time": "2022-03-29T10:07:55",
        "upload_time_iso_8601": "2022-03-29T10:07:55.732597Z",
        "url": "https://files.pythonhosted.org/packages/33/fd/3f252727145e4e79b64950e4c51a2990a3e349246f2ca1457cafdc229aa9/lib_shopware6_api-2.0.2-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3aa0024705b3cfa5e247b897c7dc9e26d9e0464aef614b2f288b1b1b15396089",
          "md5": "4e6e7e66d673959d79f892e98b6c34b7",
          "sha256": "00a2d575dc497497d406a54a936cee3a70b0dda7c551c5d7ff1ad6497a8113c5"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2-py3.8.egg",
        "has_sig": false,
        "md5_digest": "4e6e7e66d673959d79f892e98b6c34b7",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2",
        "requires_python": ">=3.6.0",
        "size": 62513,
        "upload_time": "2022-03-29T10:09:14",
        "upload_time_iso_8601": "2022-03-29T10:09:14.486738Z",
        "url": "https://files.pythonhosted.org/packages/3a/a0/024705b3cfa5e247b897c7dc9e26d9e0464aef614b2f288b1b1b15396089/lib_shopware6_api-2.0.2-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "531cb9c2cb53dd97f5f040ff91bf0375bcb1f362e213e4e224cb065c8061b19c",
          "md5": "83f8886e80d1bbac431c71f227b5d1f3",
          "sha256": "e3af8409fe08916da820ff4803c7cb682a450164e3d8b8f76752ac72952639d1"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2-py3.9.egg",
        "has_sig": false,
        "md5_digest": "83f8886e80d1bbac431c71f227b5d1f3",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2",
        "requires_python": ">=3.6.0",
        "size": 62465,
        "upload_time": "2022-03-29T10:08:19",
        "upload_time_iso_8601": "2022-03-29T10:08:19.920919Z",
        "url": "https://files.pythonhosted.org/packages/53/1c/b9c2cb53dd97f5f040ff91bf0375bcb1f362e213e4e224cb065c8061b19c/lib_shopware6_api-2.0.2-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff112e824dbd69a64ed35f400c905aaea4dc74c190a1af4848b62d3124b0f56e",
          "md5": "544e37b13a32c6195f9677a6e0b3a7fb",
          "sha256": "b750983c99a72a26a440d7c8b30e6c166449cd2c5bf9b9a84ca6d27cf2f142ed"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "544e37b13a32c6195f9677a6e0b3a7fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35111,
        "upload_time": "2022-03-29T10:07:52",
        "upload_time_iso_8601": "2022-03-29T10:07:52.786082Z",
        "url": "https://files.pythonhosted.org/packages/ff/11/2e824dbd69a64ed35f400c905aaea4dc74c190a1af4848b62d3124b0f56e/lib_shopware6_api-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf999aef5cc6d5a019d68e2d463c8d6f171ab078d0d49330bdd4a6b71c474fcc",
          "md5": "d3baebc351510c9b97d26b595a655243",
          "sha256": "d6fde679175500fe0ed424c1275a4effc99b401b52ed7cac4fb9ab2e600d1fc5"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d3baebc351510c9b97d26b595a655243",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 50564,
        "upload_time": "2022-03-29T10:07:59",
        "upload_time_iso_8601": "2022-03-29T10:07:59.162248Z",
        "url": "https://files.pythonhosted.org/packages/cf/99/9aef5cc6d5a019d68e2d463c8d6f171ab078d0d49330bdd4a6b71c474fcc/lib_shopware6_api-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ddb08cdceb273fc9c3f46c2e92f6e16b7713b78974d14c6c1f62680c9085f49",
          "md5": "cdf792ce30033891688b682ce0f02d62",
          "sha256": "90cd19fb64ad274d6324e0a5f8dc725452df16ebb9bd4f278789b8966285167a"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.1-py3.10.egg",
        "has_sig": false,
        "md5_digest": "cdf792ce30033891688b682ce0f02d62",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.1",
        "requires_python": ">=3.6.0",
        "size": 62649,
        "upload_time": "2022-06-01T18:55:27",
        "upload_time_iso_8601": "2022-06-01T18:55:27.682428Z",
        "url": "https://files.pythonhosted.org/packages/9d/db/08cdceb273fc9c3f46c2e92f6e16b7713b78974d14c6c1f62680c9085f49/lib_shopware6_api-2.0.2.1-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70f156e683d7c7589bfcd01e86c3e28007bc90f0d6707d62b38745fd8c7d6bde",
          "md5": "1be4c3f11e18eaca13afaa05df82ac2b",
          "sha256": "4f4e3c114d311954bd792537a6756a2fce9d4dc77c3979bf0139fe0446ce3385"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.1-py3.6.egg",
        "has_sig": false,
        "md5_digest": "1be4c3f11e18eaca13afaa05df82ac2b",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.1",
        "requires_python": ">=3.6.0",
        "size": 62316,
        "upload_time": "2022-06-01T18:53:04",
        "upload_time_iso_8601": "2022-06-01T18:53:04.520278Z",
        "url": "https://files.pythonhosted.org/packages/70/f1/56e683d7c7589bfcd01e86c3e28007bc90f0d6707d62b38745fd8c7d6bde/lib_shopware6_api-2.0.2.1-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bea8c12281ecf98da2e270baff4d3e38615103309f7e54792c066b8d04922a3",
          "md5": "ad11a533e0ad264ce14ee5a08869b782",
          "sha256": "c6f6c7d6c9f86822cf593b737bce3d9e529e6a2760c54090b6248fc51811ce6e"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.1-py3.7.egg",
        "has_sig": false,
        "md5_digest": "ad11a533e0ad264ce14ee5a08869b782",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.1",
        "requires_python": ">=3.6.0",
        "size": 62414,
        "upload_time": "2022-06-01T18:53:19",
        "upload_time_iso_8601": "2022-06-01T18:53:19.138939Z",
        "url": "https://files.pythonhosted.org/packages/1b/ea/8c12281ecf98da2e270baff4d3e38615103309f7e54792c066b8d04922a3/lib_shopware6_api-2.0.2.1-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "471955533b809c6488e021fb5bbb762109ef0ab77dfc0d48f24e6e64e0cecca5",
          "md5": "8098bb4f81d8d466c0a0d81fd1618bd3",
          "sha256": "41e48ab3001967da880408e6f5c58ddc1fed96325c9feb29d302039c4ddce9eb"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.1-py3.8.egg",
        "has_sig": false,
        "md5_digest": "8098bb4f81d8d466c0a0d81fd1618bd3",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.1",
        "requires_python": ">=3.6.0",
        "size": 62539,
        "upload_time": "2022-06-01T18:53:48",
        "upload_time_iso_8601": "2022-06-01T18:53:48.545997Z",
        "url": "https://files.pythonhosted.org/packages/47/19/55533b809c6488e021fb5bbb762109ef0ab77dfc0d48f24e6e64e0cecca5/lib_shopware6_api-2.0.2.1-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc7803c264f0c9f1511816ad6179a7f43d776bc3433026639249b11a5637da0d",
          "md5": "72603b0c7c79da344a30cd0dd6451148",
          "sha256": "0f11b104dabba286bf9dc1b14a8b15317df91f553ec23fc116d747a4926519e1"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.1-py3.9.egg",
        "has_sig": false,
        "md5_digest": "72603b0c7c79da344a30cd0dd6451148",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.1",
        "requires_python": ">=3.6.0",
        "size": 62481,
        "upload_time": "2022-06-01T18:53:00",
        "upload_time_iso_8601": "2022-06-01T18:53:00.698040Z",
        "url": "https://files.pythonhosted.org/packages/fc/78/03c264f0c9f1511816ad6179a7f43d776bc3433026639249b11a5637da0d/lib_shopware6_api-2.0.2.1-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc43a6e40aed5514fc5bbe59ed1ee2de0123ac0a1c837710f1be1d17c46dccc2",
          "md5": "407015438c86943e101c0ed7ff8e594f",
          "sha256": "9a60f5675799f3a37f6ba7b2e072f01060f2080c64178f2f4bd255f87765fbe1"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "407015438c86943e101c0ed7ff8e594f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35136,
        "upload_time": "2022-06-01T18:52:58",
        "upload_time_iso_8601": "2022-06-01T18:52:58.065737Z",
        "url": "https://files.pythonhosted.org/packages/dc/43/a6e40aed5514fc5bbe59ed1ee2de0123ac0a1c837710f1be1d17c46dccc2/lib_shopware6_api-2.0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79c9790166968bce2eee403648a8b147bdeb56648752196a381e8f867306f7c5",
          "md5": "354f04f9c5cdfa9cf39f012f8c59a121",
          "sha256": "5db9d82ee46871af340694fa3548c15c95979fe5a64057d1d9d24cd382c07acc"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "354f04f9c5cdfa9cf39f012f8c59a121",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 51459,
        "upload_time": "2022-06-01T18:53:03",
        "upload_time_iso_8601": "2022-06-01T18:53:03.528316Z",
        "url": "https://files.pythonhosted.org/packages/79/c9/790166968bce2eee403648a8b147bdeb56648752196a381e8f867306f7c5/lib_shopware6_api-2.0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b1aefd5b0041fde582ba39b330b724aad41e211833703ec914c6f0005aad2bb",
          "md5": "7b50acacb6c155d94fb2ca67f5675f4b",
          "sha256": "7eb7488f3ac683d90d4150d0d1c28b78278087fcc9a91bee1739fb86ee070546"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.2-py3.10.egg",
        "has_sig": false,
        "md5_digest": "7b50acacb6c155d94fb2ca67f5675f4b",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.2",
        "requires_python": ">=3.6.0",
        "size": 62667,
        "upload_time": "2022-06-02T09:14:10",
        "upload_time_iso_8601": "2022-06-02T09:14:10.345305Z",
        "url": "https://files.pythonhosted.org/packages/4b/1a/efd5b0041fde582ba39b330b724aad41e211833703ec914c6f0005aad2bb/lib_shopware6_api-2.0.2.2-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "594b19304c509cf18ad9e9a853817ffb358589b18768871eac5d4f412a60a348",
          "md5": "bcb0fb2a0cf9e05886e5d4ac6217d2de",
          "sha256": "35838ab422c7b9367f973b29f98da4e3a94b73b6eef08b88758f2ec86d3a0ec6"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.2-py3.6.egg",
        "has_sig": false,
        "md5_digest": "bcb0fb2a0cf9e05886e5d4ac6217d2de",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.2",
        "requires_python": ">=3.6.0",
        "size": 62333,
        "upload_time": "2022-06-02T09:12:54",
        "upload_time_iso_8601": "2022-06-02T09:12:54.714127Z",
        "url": "https://files.pythonhosted.org/packages/59/4b/19304c509cf18ad9e9a853817ffb358589b18768871eac5d4f412a60a348/lib_shopware6_api-2.0.2.2-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b574f874b96728c18d1719f6c6dc8fbd00da67dded5680a215ce300506a2b09c",
          "md5": "3dbef13654b8fd1ae7cffd2619574dc0",
          "sha256": "ca3222255405d9275e26efb610377621ad564b56a9ab276721279d3686104c87"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.2-py3.7.egg",
        "has_sig": false,
        "md5_digest": "3dbef13654b8fd1ae7cffd2619574dc0",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.2",
        "requires_python": ">=3.6.0",
        "size": 62425,
        "upload_time": "2022-06-02T09:12:59",
        "upload_time_iso_8601": "2022-06-02T09:12:59.527083Z",
        "url": "https://files.pythonhosted.org/packages/b5/74/f874b96728c18d1719f6c6dc8fbd00da67dded5680a215ce300506a2b09c/lib_shopware6_api-2.0.2.2-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "968924cb3552a0487785bca65a5ae28e68907cb11c4f81df6386a28941930828",
          "md5": "0cf4e92484fa38e3efd17fb0d9e2e647",
          "sha256": "591feb83d96fd0ec6d308f45f5a08706a84ee73e8344618a430a652a61fc2b8d"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.2-py3.8.egg",
        "has_sig": false,
        "md5_digest": "0cf4e92484fa38e3efd17fb0d9e2e647",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.2",
        "requires_python": ">=3.6.0",
        "size": 62568,
        "upload_time": "2022-06-02T09:12:02",
        "upload_time_iso_8601": "2022-06-02T09:12:02.895411Z",
        "url": "https://files.pythonhosted.org/packages/96/89/24cb3552a0487785bca65a5ae28e68907cb11c4f81df6386a28941930828/lib_shopware6_api-2.0.2.2-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8159427ee5ec89df0a2565ff14617567ba5eaed048016f36d85c7a58a11e64ef",
          "md5": "169a5ba3685da9beec059669086fd733",
          "sha256": "e0980f569bd33ac771f2799f47f6f57e25901380641a5b45638fa025a1c36d58"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.2-py3.9.egg",
        "has_sig": false,
        "md5_digest": "169a5ba3685da9beec059669086fd733",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.2",
        "requires_python": ">=3.6.0",
        "size": 62501,
        "upload_time": "2022-06-02T09:11:54",
        "upload_time_iso_8601": "2022-06-02T09:11:54.016048Z",
        "url": "https://files.pythonhosted.org/packages/81/59/427ee5ec89df0a2565ff14617567ba5eaed048016f36d85c7a58a11e64ef/lib_shopware6_api-2.0.2.2-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f152cbc440e40ce170a94dc10b2d21ad1c8b60a77333bd16ed0d9ed44712c009",
          "md5": "037f2ae13017222616d5f0ec561a80b7",
          "sha256": "5b2688b51700577d9a21d7d03217d4af139dcbb8c4dc99ef7ec776d07ba796ca"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "037f2ae13017222616d5f0ec561a80b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35163,
        "upload_time": "2022-06-02T09:11:51",
        "upload_time_iso_8601": "2022-06-02T09:11:51.639556Z",
        "url": "https://files.pythonhosted.org/packages/f1/52/cbc440e40ce170a94dc10b2d21ad1c8b60a77333bd16ed0d9ed44712c009/lib_shopware6_api-2.0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26e9e08f1cfc723a8145fd21464c95735c074aa0e132fac731feb6c32ead181b",
          "md5": "cd2114ece85562ee79a1c36c135a78a7",
          "sha256": "d0afd9b54010d9e49a6fb5b1244c216ee075c42985eba9ba09363f883cf2c972"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cd2114ece85562ee79a1c36c135a78a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 51577,
        "upload_time": "2022-06-02T09:11:56",
        "upload_time_iso_8601": "2022-06-02T09:11:56.078926Z",
        "url": "https://files.pythonhosted.org/packages/26/e9/e08f1cfc723a8145fd21464c95735c074aa0e132fac731feb6c32ead181b/lib_shopware6_api-2.0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54dc574b24de261a64b8ab13ae136583fd0c3548a2ceed4625b3bb688d01898f",
          "md5": "1d58a9b7475e009f700e4a2d5b2a3ae2",
          "sha256": "fb634f96d71fb2cbbf70e63cc2b4e8378f8d9e6eba542a3b6340fb0d46201362"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.3-py3.10.egg",
        "has_sig": false,
        "md5_digest": "1d58a9b7475e009f700e4a2d5b2a3ae2",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.3",
        "requires_python": ">=3.6.0",
        "size": 62725,
        "upload_time": "2022-06-29T23:26:06",
        "upload_time_iso_8601": "2022-06-29T23:26:06.310102Z",
        "url": "https://files.pythonhosted.org/packages/54/dc/574b24de261a64b8ab13ae136583fd0c3548a2ceed4625b3bb688d01898f/lib_shopware6_api-2.0.2.3-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc481b7bb1c1c167fa3a463b5de61c9aa036e0fb856c9517fd2caa6627c7ba8c",
          "md5": "cdee21fd1c7be4a679dc0cb0d4e69b0f",
          "sha256": "20e614a0a14a13d51764427abe3283b111a1fd24d4a3deb98e7987f9a029c005"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.3-py3.6.egg",
        "has_sig": false,
        "md5_digest": "cdee21fd1c7be4a679dc0cb0d4e69b0f",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.3",
        "requires_python": ">=3.6.0",
        "size": 62396,
        "upload_time": "2022-06-29T23:23:46",
        "upload_time_iso_8601": "2022-06-29T23:23:46.621770Z",
        "url": "https://files.pythonhosted.org/packages/dc/48/1b7bb1c1c167fa3a463b5de61c9aa036e0fb856c9517fd2caa6627c7ba8c/lib_shopware6_api-2.0.2.3-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5df5a15a7324aa801665397205ef7dabab785d930d92767560e336e11d1f5bf",
          "md5": "f8b49a50fc39da434909b861dcc37320",
          "sha256": "3b2e2a53e3bbe485445501e43ebc0fc8a2c045b7f72fc91a9c1547ad930e3e81"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.3-py3.7.egg",
        "has_sig": false,
        "md5_digest": "f8b49a50fc39da434909b861dcc37320",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.3",
        "requires_python": ">=3.6.0",
        "size": 62485,
        "upload_time": "2022-06-29T23:23:27",
        "upload_time_iso_8601": "2022-06-29T23:23:27.236917Z",
        "url": "https://files.pythonhosted.org/packages/b5/df/5a15a7324aa801665397205ef7dabab785d930d92767560e336e11d1f5bf/lib_shopware6_api-2.0.2.3-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "001a585cc4b6b0dde235689f93f0cce44a735c191978808de3e6cf170e0e8a1c",
          "md5": "81533151422631b54b07a155374256d9",
          "sha256": "c722642d22857a708428a7c37fd5a8bc838d759efc1ca8844ab9f9462ea92582"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.3-py3.8.egg",
        "has_sig": false,
        "md5_digest": "81533151422631b54b07a155374256d9",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.3",
        "requires_python": ">=3.6.0",
        "size": 62627,
        "upload_time": "2022-06-29T23:23:52",
        "upload_time_iso_8601": "2022-06-29T23:23:52.095751Z",
        "url": "https://files.pythonhosted.org/packages/00/1a/585cc4b6b0dde235689f93f0cce44a735c191978808de3e6cf170e0e8a1c/lib_shopware6_api-2.0.2.3-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b80e184e00a7da6b165a0d58167e43637120a98e3d41b330e02849251c67be6b",
          "md5": "d2e6dd998e71a6f13dc2bd851f881cc5",
          "sha256": "f17b800a36b7fe4e58bf6ff1f7c215465b819ffec68b28e2f8e341143c1b5912"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.3-py3.9.egg",
        "has_sig": false,
        "md5_digest": "d2e6dd998e71a6f13dc2bd851f881cc5",
        "packagetype": "bdist_egg",
        "python_version": "2.0.2.3",
        "requires_python": ">=3.6.0",
        "size": 62552,
        "upload_time": "2022-06-29T23:23:16",
        "upload_time_iso_8601": "2022-06-29T23:23:16.333748Z",
        "url": "https://files.pythonhosted.org/packages/b8/0e/184e00a7da6b165a0d58167e43637120a98e3d41b330e02849251c67be6b/lib_shopware6_api-2.0.2.3-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f25e758b3f7f45661642e2495180a6df996e379a576bfe32df184c22522d4601",
          "md5": "697920dba20de0ee07a70141cfc05412",
          "sha256": "715f67ef2802006cb066f88da21439d3916618c672d50d7f121a702fd2cd1025"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "697920dba20de0ee07a70141cfc05412",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35209,
        "upload_time": "2022-06-29T23:23:14",
        "upload_time_iso_8601": "2022-06-29T23:23:14.033757Z",
        "url": "https://files.pythonhosted.org/packages/f2/5e/758b3f7f45661642e2495180a6df996e379a576bfe32df184c22522d4601/lib_shopware6_api-2.0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f1723c742cb57b5d000d77b9cdee42bf9a331d66d7c1aaf76a7d4eb5e470a20",
          "md5": "8d2ae59f6c5184932be47bba7aafd04f",
          "sha256": "1afc4909a9e1e20edc2fc92149444424b650fd596f3b91002ae045ad6c852213"
        },
        "downloads": -1,
        "filename": "lib_shopware6_api-2.0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8d2ae59f6c5184932be47bba7aafd04f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 51694,
        "upload_time": "2022-06-29T23:23:18",
        "upload_time_iso_8601": "2022-06-29T23:23:18.637085Z",
        "url": "https://files.pythonhosted.org/packages/2f/17/23c742cb57b5d000d77b9cdee42bf9a331d66d7c1aaf76a7d4eb5e470a20/lib_shopware6_api-2.0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54dc574b24de261a64b8ab13ae136583fd0c3548a2ceed4625b3bb688d01898f",
        "md5": "1d58a9b7475e009f700e4a2d5b2a3ae2",
        "sha256": "fb634f96d71fb2cbbf70e63cc2b4e8378f8d9e6eba542a3b6340fb0d46201362"
      },
      "downloads": -1,
      "filename": "lib_shopware6_api-2.0.2.3-py3.10.egg",
      "has_sig": false,
      "md5_digest": "1d58a9b7475e009f700e4a2d5b2a3ae2",
      "packagetype": "bdist_egg",
      "python_version": "2.0.2.3",
      "requires_python": ">=3.6.0",
      "size": 62725,
      "upload_time": "2022-06-29T23:26:06",
      "upload_time_iso_8601": "2022-06-29T23:26:06.310102Z",
      "url": "https://files.pythonhosted.org/packages/54/dc/574b24de261a64b8ab13ae136583fd0c3548a2ceed4625b3bb688d01898f/lib_shopware6_api-2.0.2.3-py3.10.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc481b7bb1c1c167fa3a463b5de61c9aa036e0fb856c9517fd2caa6627c7ba8c",
        "md5": "cdee21fd1c7be4a679dc0cb0d4e69b0f",
        "sha256": "20e614a0a14a13d51764427abe3283b111a1fd24d4a3deb98e7987f9a029c005"
      },
      "downloads": -1,
      "filename": "lib_shopware6_api-2.0.2.3-py3.6.egg",
      "has_sig": false,
      "md5_digest": "cdee21fd1c7be4a679dc0cb0d4e69b0f",
      "packagetype": "bdist_egg",
      "python_version": "2.0.2.3",
      "requires_python": ">=3.6.0",
      "size": 62396,
      "upload_time": "2022-06-29T23:23:46",
      "upload_time_iso_8601": "2022-06-29T23:23:46.621770Z",
      "url": "https://files.pythonhosted.org/packages/dc/48/1b7bb1c1c167fa3a463b5de61c9aa036e0fb856c9517fd2caa6627c7ba8c/lib_shopware6_api-2.0.2.3-py3.6.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5df5a15a7324aa801665397205ef7dabab785d930d92767560e336e11d1f5bf",
        "md5": "f8b49a50fc39da434909b861dcc37320",
        "sha256": "3b2e2a53e3bbe485445501e43ebc0fc8a2c045b7f72fc91a9c1547ad930e3e81"
      },
      "downloads": -1,
      "filename": "lib_shopware6_api-2.0.2.3-py3.7.egg",
      "has_sig": false,
      "md5_digest": "f8b49a50fc39da434909b861dcc37320",
      "packagetype": "bdist_egg",
      "python_version": "2.0.2.3",
      "requires_python": ">=3.6.0",
      "size": 62485,
      "upload_time": "2022-06-29T23:23:27",
      "upload_time_iso_8601": "2022-06-29T23:23:27.236917Z",
      "url": "https://files.pythonhosted.org/packages/b5/df/5a15a7324aa801665397205ef7dabab785d930d92767560e336e11d1f5bf/lib_shopware6_api-2.0.2.3-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "001a585cc4b6b0dde235689f93f0cce44a735c191978808de3e6cf170e0e8a1c",
        "md5": "81533151422631b54b07a155374256d9",
        "sha256": "c722642d22857a708428a7c37fd5a8bc838d759efc1ca8844ab9f9462ea92582"
      },
      "downloads": -1,
      "filename": "lib_shopware6_api-2.0.2.3-py3.8.egg",
      "has_sig": false,
      "md5_digest": "81533151422631b54b07a155374256d9",
      "packagetype": "bdist_egg",
      "python_version": "2.0.2.3",
      "requires_python": ">=3.6.0",
      "size": 62627,
      "upload_time": "2022-06-29T23:23:52",
      "upload_time_iso_8601": "2022-06-29T23:23:52.095751Z",
      "url": "https://files.pythonhosted.org/packages/00/1a/585cc4b6b0dde235689f93f0cce44a735c191978808de3e6cf170e0e8a1c/lib_shopware6_api-2.0.2.3-py3.8.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b80e184e00a7da6b165a0d58167e43637120a98e3d41b330e02849251c67be6b",
        "md5": "d2e6dd998e71a6f13dc2bd851f881cc5",
        "sha256": "f17b800a36b7fe4e58bf6ff1f7c215465b819ffec68b28e2f8e341143c1b5912"
      },
      "downloads": -1,
      "filename": "lib_shopware6_api-2.0.2.3-py3.9.egg",
      "has_sig": false,
      "md5_digest": "d2e6dd998e71a6f13dc2bd851f881cc5",
      "packagetype": "bdist_egg",
      "python_version": "2.0.2.3",
      "requires_python": ">=3.6.0",
      "size": 62552,
      "upload_time": "2022-06-29T23:23:16",
      "upload_time_iso_8601": "2022-06-29T23:23:16.333748Z",
      "url": "https://files.pythonhosted.org/packages/b8/0e/184e00a7da6b165a0d58167e43637120a98e3d41b330e02849251c67be6b/lib_shopware6_api-2.0.2.3-py3.9.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f25e758b3f7f45661642e2495180a6df996e379a576bfe32df184c22522d4601",
        "md5": "697920dba20de0ee07a70141cfc05412",
        "sha256": "715f67ef2802006cb066f88da21439d3916618c672d50d7f121a702fd2cd1025"
      },
      "downloads": -1,
      "filename": "lib_shopware6_api-2.0.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "697920dba20de0ee07a70141cfc05412",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 35209,
      "upload_time": "2022-06-29T23:23:14",
      "upload_time_iso_8601": "2022-06-29T23:23:14.033757Z",
      "url": "https://files.pythonhosted.org/packages/f2/5e/758b3f7f45661642e2495180a6df996e379a576bfe32df184c22522d4601/lib_shopware6_api-2.0.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f1723c742cb57b5d000d77b9cdee42bf9a331d66d7c1aaf76a7d4eb5e470a20",
        "md5": "8d2ae59f6c5184932be47bba7aafd04f",
        "sha256": "1afc4909a9e1e20edc2fc92149444424b650fd596f3b91002ae045ad6c852213"
      },
      "downloads": -1,
      "filename": "lib_shopware6_api-2.0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8d2ae59f6c5184932be47bba7aafd04f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 51694,
      "upload_time": "2022-06-29T23:23:18",
      "upload_time_iso_8601": "2022-06-29T23:23:18.637085Z",
      "url": "https://files.pythonhosted.org/packages/2f/17/23c742cb57b5d000d77b9cdee42bf9a331d66d7c1aaf76a7d4eb5e470a20/lib_shopware6_api-2.0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}