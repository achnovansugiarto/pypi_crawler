{
  "info": {
    "author": "Marc Demers",
    "author_email": "demers.marc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation",
      "Topic :: Office/Business :: Financial",
      "Topic :: Office/Business :: Financial :: Investment",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# py_vollib_vectorized\n\n\n## Introduction\n\nThe `py_vollib_vectorized` package makes pricing thousands of option contracts and calculating greeks fast and effortless.\nIt is built on top of the `py_vollib` library.\nUpon import, it will automatically patch the corresponding `py_vollib` functions so as to support vectorization.\nInputs can then be passed as floats, tuples, lists, `numpy.array`, or `pandas.Series`.\nAutomatic broadcasting is performed on the inputs.\n\nOn top of vectorization, modifications to py_vollib include additional `numba` speedups; as such, `numba` is required.\nThese speedups make `py_vollib_vectorized` the fastest library for pricing option contracts.\n\nSee the [documentation](https://py-vollib-vectorized.readthedocs.io/en/latest) for more details.\n\n## Installation\n\n    pip install py_vollib_vectorized\n\n## Requirements\n\n* Written for Python 3.5+\n* Requires py_vollib, numba, numpy, pandas, scipy\n\n## Code samples\n\nThe library can be used in two ways.\nUpon import, it monkey-patches (i.e. replaces) the corresponding functions in `py_vollib`.\n\nAs a more versatile alternative, users that would prefer to work with a dedicated option pricing API can make use of the utility functions provided by the library.\n\n#### Patching `py_vollib`\n\n```python\n# The usual py_vollib syntax\n\nimport numpy as np\nimport pandas as pd\n\nimport py_vollib.black_scholes\nflag = 'c'  # 'c' for call, 'p' for put\nS = 100  # Underlying asset price\nK = 90  # Strike\nt = 0.5  # (Annualized) time-to-expiration\nr = 0.01  # Interest free rate\niv = 0.2  # Implied Volatility\n\noption_price = py_vollib.black_scholes.black_scholes(flag, S, K, t, r, iv)  # 12.111581435\n\n# This library keeps the same syntax, but you can pass as input any iterable of values.\n# This includes list, tuple, numpy.array, pd.Series, pd.DataFrame (with only a single column).\n# Note that you must pass a value for each contract as *no broadcasting* is done on the inputs.\n\n\n# Patch the original py_vollib library by importing py_vollib_vectorized\nimport py_vollib_vectorized  # The same functions now accept vectors as input!\n\n# Note that the input arguments are broadcasted.\n# You can specify ints, floats, tuples, lists, numpy arrays or Series.\n\nflag = ['c', 'p']  # 'c' for call, 'p' for put\nS = (100, 100)  # Underlying asset prices\nK = [90]  # Strikes\nt = pd.Series([0.5, 0.6])  # (Annualized) times-to-expiration\nr = np.array([0.01])  # Interest free rates\niv = 0.2  # Implied Volatilities\n\noption_price = py_vollib.black_scholes.black_scholes(flag, S, K, t, r, iv, return_as='array')  \n# array([12.11158143,  2.02418536])\n```\n\n#### Utility functions\nWe also define other utility functions to get all contract prices, implied volatilities, and greeks in a single call.\n\n```python\nimport pandas as pd\nfrom py_vollib_vectorized import price_dataframe, get_all_greeks\n\n# Using the data above, we can calculate all contracts greeks in a single call\ngreeks = get_all_greeks(flag, S, K, t, r, iv, model='black_scholes', return_as='dict')\n\n#   {'delta': array([ 0.80263679, -0.21293214]),\n#    'gamma': array([0.0196385, 0.01875498]),\n#    'theta': array([-0.01263557, -0.00964498]),\n#    'rho': array([0.34073321, -0.13994668]),\n#    'vega': array([0.19626478, 0.22493816])}\n\n# We can also price a dataframe easily by specifying a dataframe and the corresponding columns\n\ndf = pd.DataFrame()\ndf['Flag'] = ['c', 'p']\ndf['S'] = 95\ndf['K'] = [100, 90]\ndf['T'] = 0.2\ndf['R'] = 0.2\ndf['IV'] = 0.2\nresult = price_dataframe(df, flag_col='Flag', underlying_price_col='S', strike_col='K', annualized_tte_col='T',\n                     riskfree_rate_col='R', sigma_col='IV', model='black_scholes', inplace=False)\n#   Price       delta       gamma       theta       rho        vega\n#   2.895588    0.467506    0.046795    -0.045900   0.083035   0.168926\n#   0.611094    -0.136447   0.025739    -0.005335   -0.027151  0.092838\n\n```\n\nSee the [documentation](https//py-vollib-vectorized.readthedocs.io/en/latest) for more details.\n\n## Benchmarking\n\nCompared to looping through contracts or to using built-in pandas functionality, this library is very memory efficient and scales fast and well to a large number of contracts.\n\n![Performance of the py_vollib_vectorized libary](docs/_static/benchmark.png \"Benchmark\")\n\n\n## Acknowledgements\n\nThis library optimizes the `py_vollib` codebase, itself built upon Peter JÃ¤ckel's *Let's be rational* methodology.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marcdemers/py_vollib_vectorized",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-vollib-vectorized",
    "package_url": "https://pypi.org/project/py-vollib-vectorized/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-vollib-vectorized/",
    "project_urls": {
      "Homepage": "https://github.com/marcdemers/py_vollib_vectorized"
    },
    "release_url": "https://pypi.org/project/py-vollib-vectorized/0.1.1/",
    "requires_dist": [
      "py-vollib (>=1.0.1)",
      "numba (>=0.51.0)",
      "py-lets-be-rational",
      "numpy",
      "pandas",
      "scipy"
    ],
    "requires_python": "",
    "summary": "A fast, vectorized approach to calculating Implied Volatility and Greeks using the Black, Black-Scholes and Black-Scholes-Merton pricing.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9563380,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "548583f6d0066e2db13797ae37c98c302ffcbf7b87c826cb43cdec60d8c60877",
          "md5": "be449cd922c4877b4e101b9445a080c9",
          "sha256": "2ae443cc0ede11f56171a37e78e1104a4bb5e482f61831e1fa4b754215e61a10"
        },
        "downloads": -1,
        "filename": "py_vollib_vectorized-0.1-py3.7.egg",
        "has_sig": false,
        "md5_digest": "be449cd922c4877b4e101b9445a080c9",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": null,
        "size": 62101,
        "upload_time": "2021-02-28T20:20:05",
        "upload_time_iso_8601": "2021-02-28T20:20:05.939973Z",
        "url": "https://files.pythonhosted.org/packages/54/85/83f6d0066e2db13797ae37c98c302ffcbf7b87c826cb43cdec60d8c60877/py_vollib_vectorized-0.1-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c128c9f882d42f33da859b1db34424b30d4b593f5a31cff7b829400fe529c42",
          "md5": "f092960956a10aceba273ab3e6a51e79",
          "sha256": "36fc3dc6641102476045003dd327e7e63469cd3e992e49ee4a3c57e22ad5dd4d"
        },
        "downloads": -1,
        "filename": "py_vollib_vectorized-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f092960956a10aceba273ab3e6a51e79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26434,
        "upload_time": "2020-12-17T02:45:34",
        "upload_time_iso_8601": "2020-12-17T02:45:34.387040Z",
        "url": "https://files.pythonhosted.org/packages/5c/12/8c9f882d42f33da859b1db34424b30d4b593f5a31cff7b829400fe529c42/py_vollib_vectorized-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0e657012148e9d899505ac1d99abe5ce0d22ff8c233c462a9c57b9c6388683a",
          "md5": "60c2fb9e617be8d5c7ae69e90dddd033",
          "sha256": "a8ebd2079dd52fd9cfef5a9a7afe83f8876d54218abc711990fd97d125b3e1d9"
        },
        "downloads": -1,
        "filename": "py_vollib_vectorized-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60c2fb9e617be8d5c7ae69e90dddd033",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30453,
        "upload_time": "2021-02-28T20:20:03",
        "upload_time_iso_8601": "2021-02-28T20:20:03.097652Z",
        "url": "https://files.pythonhosted.org/packages/e0/e6/57012148e9d899505ac1d99abe5ce0d22ff8c233c462a9c57b9c6388683a/py_vollib_vectorized-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e0bf29a131bf3a46a0413fad1729ec39d21f7be98f3f58de9833b735e806a65",
          "md5": "9bb0609532db2845b202095e1ced7411",
          "sha256": "5d10d2eb94d462ae4a0edabe33c38d9fec47e8f432b48d63ae34cddd73b8d1a8"
        },
        "downloads": -1,
        "filename": "py_vollib_vectorized-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9bb0609532db2845b202095e1ced7411",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26653,
        "upload_time": "2021-02-28T20:20:04",
        "upload_time_iso_8601": "2021-02-28T20:20:04.569994Z",
        "url": "https://files.pythonhosted.org/packages/6e/0b/f29a131bf3a46a0413fad1729ec39d21f7be98f3f58de9833b735e806a65/py_vollib_vectorized-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0e657012148e9d899505ac1d99abe5ce0d22ff8c233c462a9c57b9c6388683a",
        "md5": "60c2fb9e617be8d5c7ae69e90dddd033",
        "sha256": "a8ebd2079dd52fd9cfef5a9a7afe83f8876d54218abc711990fd97d125b3e1d9"
      },
      "downloads": -1,
      "filename": "py_vollib_vectorized-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "60c2fb9e617be8d5c7ae69e90dddd033",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30453,
      "upload_time": "2021-02-28T20:20:03",
      "upload_time_iso_8601": "2021-02-28T20:20:03.097652Z",
      "url": "https://files.pythonhosted.org/packages/e0/e6/57012148e9d899505ac1d99abe5ce0d22ff8c233c462a9c57b9c6388683a/py_vollib_vectorized-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e0bf29a131bf3a46a0413fad1729ec39d21f7be98f3f58de9833b735e806a65",
        "md5": "9bb0609532db2845b202095e1ced7411",
        "sha256": "5d10d2eb94d462ae4a0edabe33c38d9fec47e8f432b48d63ae34cddd73b8d1a8"
      },
      "downloads": -1,
      "filename": "py_vollib_vectorized-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9bb0609532db2845b202095e1ced7411",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26653,
      "upload_time": "2021-02-28T20:20:04",
      "upload_time_iso_8601": "2021-02-28T20:20:04.569994Z",
      "url": "https://files.pythonhosted.org/packages/6e/0b/f29a131bf3a46a0413fad1729ec39d21f7be98f3f58de9833b735e806a65/py_vollib_vectorized-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}