{
  "info": {
    "author": "Michael Hacker",
    "author_email": "mh@superbox.one",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![license-url](https://img.shields.io/npm/l/make-coverage-badge.svg)](https://opensource.org/licenses/MIT)\n![coverage-badge](https://raw.githubusercontent.com/mh-superbox/unipi-control/main/coverage.svg)\n![Python 3.8](https://img.shields.io/badge/python-3.8-blue.svg)\n![Python 3.9](https://img.shields.io/badge/python-3.9-blue.svg)\n![Python 3.10](https://img.shields.io/badge/python-3.10-blue.svg)\n\n### Support me if you like this project ðŸ˜€\n\nI want to extend the code to support Unipi extensions modules.\nThe necessary hardware is also required for this.\n\n[![\"Buy Me A Coffee\"](https://www.buymeacoffee.com/assets/img/custom_images/yellow_img.png)](https://www.buymeacoffee.com/mhacker)\n\n# Unipi Control\n\nControl Unipi I/O directly with MQTT commands and without [Evok](https://github.com/UniPiTechnology/evok). Unipi Control use Modbus for fast access to the I/O and provide MQTT topics for reading and writing the circuits. Optionally you can enable the Home Assistant MQTT discovery for binary sensors, sensors, switches and covers.\n\n## Supported hardware\n\n* Unipi Neuron L203\n* External Modbus RTU devices\n  * [Eastron SDM120M](https://www.eastroneurope.com/products/view/sdm120modbus)\n\nIf you have an Unipi device, that is not supported, then contact me.\n\n## Getting Started\n\n**Requirements:**\n\n* Unipi Neuron Kernel Module and Unipi tools\n  * Use the officially APT mirror (https://repo.unipi.technology/debian/) from Unipi Technology\n  * Or compile it\n    * https://github.com/UniPiTechnology/unipi-kernel\n    * https://github.com/UniPiTechnology/unipi-tools\n* Python 3.8\n\nInstall **Unipi Control** with `pip`.\n\n```shell\n$ python -m venv /opt/.venv\n$ /opt/.venv/bin/pip install unipi-control\n```\n\nCopy the [config files](src/unipi_control/config/etc) to your `/etc` directory and start the systemd service:\n\n```shell\n$ systemctl enable unipi-control.service\n$ systemctl start unipi-control.service\n```\n\n## Configuration\n\nYou can set the client settings in the `/etc/unipi/control.yaml`.\n\n### Device\n\n| Key    | Value                                                                                                                                                               |\n|--------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `name` | The device name for the subscribe and publish topics. Default is the hostname. This name must be unique. This is important if multiple Unipi devices are available. |\n\n```yaml\n# control.yaml\ndevice_info:\n  name: Unipi\n```\n\n### MQTT\n\n| Key                  | Value                                                                                                                                                                                                                  |\n|----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `host`               | The hostname or IP address of the remote broker: Default is `localhost`.                                                                                                                                               |\n| `port`               | The network port of the server host to connect to. Defaults is `1883`.                                                                                                                                                 |\n| `keepalive`          | Maximum period in seconds allowed between communications with the broker. If no other messages are being exchanged, this controls the rate at which the client will send ping messages to the broker. Default is `15`. |\n| `retry_limit`        | Number of attempts to connect to the MQTT broker. Default to `30` (Disable with `False`).                                                                                                                              |\n| `reconnect_interval` | Time between connection attempts. Default is `10`.                                                                                                                                                                     |\n\n```yaml\n# control.yaml\nmqtt:\n  host: localhost\n  port: 1883\n  connection:\n    keepalive: 15\n    retry_limit: 30\n    reconnect_interval: 10\n```\n\n### Modbus\n\n| Key                       | Value                                               |\n|---------------------------|-----------------------------------------------------|\n| `baud_rate`               | The baud rate for modbus RTU. Default is `2400`.    |\n| `parity`                  | The parity for modbus RTU. Default is `N`.          |\n| `unit`                    | A list of all modbus RTU devices.                   |\n| `unit` Â» `unit`          | The unique modbus RTU unit ID.                       |\n| `unit` Â» `device_name`    | Custom device name. Used for the Home Assistant UI. |\n| `unit` Â» `suggested_area` | Used as entity area in Home Assistant.              |\n\n```yaml\n# control.yaml\nmodbus:\n  baud_rate: 9600\n  parity: N\n  units:\n    - unit: 1\n      device_name: Eastron SDM120M\n      identifier: Eastron_SDM120M\n      suggested_area: Workspace\n```\n\n### Home Assistant\n\n| Key                | Value                                                           |\n|--------------------|-----------------------------------------------------------------|\n| `enabled`          | Enable Home Assistant MQTT Discovery. Default is `true`.        |\n| `discovery_prefix` | The prefix for the discovery topic. Default is `homeassistant`. |\n\n```yaml\n# control.yaml\nhomeassistant:\n  enabled: true\n  discovery_prefix: homeassistant\n```\n\n### Features\n\nIt's possible to give the features friendly names. This names will be used for switches and binary sensors and sensors in Home Assistant.\n\n| Key                   | Value                                                                                                                                                      |            |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `object_id`           | Used as entity ID in Home Assistant.                                                                                                                       | optionally |\n| `friendly_name`       | Used as entity name in Home Assistant.                                                                                                                     | optionally |\n| `icon`                | Used as icon in Home Assistant. Any icon from [materialdesignicons.com](https://materialdesignicons.com). Prefix name with mdi:, ie `mdi:home`.            | optionally |\n| `device_class`        | Used for [Device Class](https://www.home-assistant.io/docs/configuration/customizing-devices/#device-class) in Home Assistant.                             | optionally |\n| `state_class`         | Used for [State Class](https://developers.home-assistant.io/docs/core/entity/sensor/#available-state-classes) in Home Assistant. Thid is only for sensors. | optionally |\n| `unit_of_measurement` | Used as measurement unit in Home Assistant. Only for sensors.                                                                                              | optionally |\n| `suggested_area`      | Used as entity area in Home Assistant.                                                                                                                     | optionally |\n| `invert_state`        | Invert the `ON`/`OFF` state. Default is `false`. Only for binary sensors.                                                                                  | optionally |\n\n```yaml\n# control.yaml\nfeatures:\n  di_3_02:\n    object_id: workspace_switch_up\n    friendly_name: Workspace - Switch up\n    suggested_area: Workspace\n  di_3_03:\n    object_id: workspace_switch_down\n    friendly_name: Workspace - Switch down\n    suggested_area: Workspace\n  active_power_1:\n    object_id: workspace_active_power\n    friendly_name: Workspace - Active Power\n    suggested_area: Workspace\n    device_class: power\n    state_class: measurement\n    unit_of_measurement: W\n```\n\n### Covers\n\n**Warning:** Driving both signals up and down at the same time can damage the motor. There are a couple of checks to prevent such situation. Use this software at your own risk! I do not take any responsibility for it!\n\nThe Home Assistant Discovery for the covers is optionally. Covers can be control with MQTT topics without Home Assistant.\n\n| Key                | Value                                                                                                                                      |            |\n|--------------------|--------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `object_id`        | Used as entity ID in Home Assistant.                                                                                                       |            |\n| `friendly_name`    | Used as entity name in Home Assistant.                                                                                                     | optionally |\n| `suggested_area`   | Used as entity area in Home Assistant.                                                                                                     | optionally |\n| `device_class`     | Device class can be \"blind\", \"roller_shutter\", or \"garage_door\".                                                                           | optionally |\n| `cover_run_time`   | Define the time (in seconds) it takes for the cover to fully open or close.                                                                |            |\n| `tilt_change_time` | Define the time (in seconds) that the tilt changes from fully open to fully closed state. Tilt is only available for device class \"blind\". | optionally |\n| `cover_up`         | Output circuit name from a relay or digital output.                                                                                        |            |\n| `cover_down`       | Output circuit name from a relay or digital output.                                                                                        |            |\n\n```yaml\n# control.yaml\ncovers:\n  - id: workspace_1\n    friendly_name: \"Workspace - Blind 1\"\n    suggested_area: \"Workspace\"\n    device_class: \"blind\"\n    cover_run_time: 35.5\n    tilt_change_time: 1.5\n    cover_up: ro_3_03\n    cover_down: ro_3_02\n```\n\n#### Calibration\n\nThe covers save its cover and tilt position in a temporary file each time a stop command is executed. If the Unipi Control is interrupted, and a command (open/closing) is currently being executed, or the system is restarted, the calibration mode is enabled.\nWhen the Unipi Control starts in calibration mode, the cover fully open and disable calibration mode. This is required for the correct cover and tilt position.\n\n### Logging\n\n| Key     | Value                                                                  |\n|---------|------------------------------------------------------------------------|\n| `level` | Set level to `debug`, `info`, `warning` or `error`. Default is `info`. |\n\n```yaml\n# control.yaml\nlogging:\n  level: info\n```\n\n## Usage\n\nAvailable MQTT topics:\n\n### Features\n\n#### Unipi Neuron\n\n| Topic                                         | Response/Request | Description                                                                                          |\n|-----------------------------------------------|------------------|------------------------------------------------------------------------------------------------------|\n| `[device_name]/relay/ro_[1-9]_[0-9][0-9]/get` | `ON` or `OFF`    | Get a string with the value `ON` or `OFF` from this topic.                                           |\n| `[device_name]/relay/do_[1-9]_[0-9][0-9]/get` | `ON` or `OFF`    | Get a string with the value `ON` or `OFF` from this topic.                                           |\n| `[device_name]/input/di_[1-9]_[0-9][0-9]/get` | `ON` or `OFF`    | Get a string with the value `ON` or `OFF` from this topic.                                           |\n| `[device_name]/relay/ro_[1-9]_[0-9][0-9]/set` | `ON` or `OFF`    | Send a string with the value `ON` or `OFF` to this topic. This enable or disable the selected relay. |\n| `[device_name]/relay/do_[1-9]_[0-9][0-9]/set` | `ON` or `OFF`    | Send a string with the value `ON` or `OFF` to this topic. This enable or disable the selected relay. |\n\n#### Eastron SDM120M\n\n| Topic                                                              | Unit  |\n|--------------------------------------------------------------------|-------|\n| `[device_name]/meter/voltage_[unit]/get`                           | V     |\n| `[device_name]/meter/current[unit]/get`                            | A     |\n| `[device_name]/meter/current_demand[unit]/get`                     | A     |\n| `[device_name]/meter/maximum_current_demand[unit]/get`             | A     |\n| `[device_name]/meter/active_power[unit]/get`                       | W     |\n| `[device_name]/meter/total_system_power_demand[unit]/get`          | W     |\n| `[device_name]/meter/maximum_total_system_power_demand[unit]/get`  | W     |\n| `[device_name]/meter/import_system_power_demand[unit]/get`         | W     |\n| `[device_name]/meter/maximum_import_system_power_demand[unit]/get` | W     |\n| `[device_name]/meter/export_system_power_demand[unit]/get`         | W     |\n| `[device_name]/meter/maximum_export_system_power_demand[unit]/get` | W     |\n| `[device_name]/meter/apparent_power[unit]/get`                     | VA    |\n| `[device_name]/meter/reactive_power[unit]/get`                     | var   |\n| `[device_name]/meter/frequency[unit]/get`                          | Hz    |\n| `[device_name]/meter/import_active_energy[unit]/get`               | kWh   |\n| `[device_name]/meter/export_active_energy[unit]/get`               | kWh   |\n| `[device_name]/meter/total_active_energy[unit]/get`                | kWh   |\n| `[device_name]/meter/import_reactive_energy[unit]/get`             | kvarh |\n| `[device_name]/meter/export_reactive_energy[unit]/get`             | kvarh |\n| `[device_name]/meter/total_reactive_energy[unit]/get`              | kvarh |\n| `[device_name]/meter/power_factor[unit]/get`                       |       |\n| `[device_name]/meter/phase_angle[unit]/get`                        |       |\n\n### Covers\n\n| Topic                                                  | Response/Request                                    | Description                                                          |\n|--------------------------------------------------------|-----------------------------------------------------|----------------------------------------------------------------------|\n| `[device_name]/[object_id]/cover/[device_class]/state` | `open`, `opening`, `closing`, `closed` or `stopped` | Get the cover state.                                                 |\n| `[device_name]/[object_id]/cover/[device_class]/set`          | `OPEN`, `CLOSE` or `STOP`                    | Send a string to control the cover.                                  |\n| `[device_name]/[object_id]/cover/[device_class]/position`     | `0` to `100`                                 | Get the cover position. `100` is fully open and `0` is fully closed. |\n| `[device_name]/[object_id]/cover/[device_class]/position/set` | `0` to `100`                                 | Send an integer to set the cover position.                           |\n| `[device_name]/[object_id]/cover/[device_class]/tilt`         | `0` to `100`                                 | Get the tilt position. `100` is fully open and `0` is fully closed.  |\n| `[device_name]/[object_id]/cover/[device_class]/tilt/set`     | `0` to `100`                                 | Send an integer to set the cover position.                           |\n\n## Development\n\nFor development, you must clone the git repository and install **Unipi Control** with `pipenv`.\n\n```shell\n$ git clone https://github.com/mh-superbox/unipi-control.git\n$ cd unipi-control\n~/unipi-control$ pipenv install --deploy --dev \n~/unipi-control$ pipenv run pip install -e .\n```\n\nCopy the config files to your `/etc` directory.\nNow you can start unipi-control with `pipenv run unipi-control`.\n\n## Extras\n\nI have written a Home Assistant blueprint automation to control covers with binary sensors. Take a look in the [extras](extras) directory.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mh-superbox/unipi-control",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unipi-control",
    "package_url": "https://pypi.org/project/unipi-control/",
    "platform": null,
    "project_url": "https://pypi.org/project/unipi-control/",
    "project_urls": {
      "Homepage": "https://github.com/mh-superbox/unipi-control"
    },
    "release_url": "https://pypi.org/project/unipi-control/2023.6/",
    "requires_dist": [
      "pymodbus[serial] (~=3.2.0)",
      "superbox-utils[mqtt] (~=2023.3)"
    ],
    "requires_python": ">=3.8",
    "summary": "Control Unipi I/O directly with MQTT commands and without Evok.",
    "version": "2023.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17358003,
  "releases": {
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7eb8030ce47c3a593b4085aecca8f7e5d096104c522c9b9fb0b319c2b59fbc8",
          "md5": "e3fe68678da4100d4231fa64b0c0013e",
          "sha256": "7790bff5c1e2e34efb23c22a2d3d1f2e6c745776479ea76dffa0bf90e862a5b2"
        },
        "downloads": -1,
        "filename": "unipi_control-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3fe68678da4100d4231fa64b0c0013e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 39085,
        "upload_time": "2022-10-09T08:07:32",
        "upload_time_iso_8601": "2022-10-09T08:07:32.743019Z",
        "url": "https://files.pythonhosted.org/packages/e7/eb/8030ce47c3a593b4085aecca8f7e5d096104c522c9b9fb0b319c2b59fbc8/unipi_control-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae8833480de070fe9be5f576be394a257616713a4311b6b78854cd81581554bb",
          "md5": "12adf792306f6444568ab0dd8cf5af32",
          "sha256": "d569186c3d2b1892dcbce524c495d4a2816428398658cfebdf500b0392d5d219"
        },
        "downloads": -1,
        "filename": "unipi-control-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "12adf792306f6444568ab0dd8cf5af32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 27453,
        "upload_time": "2022-10-09T08:07:34",
        "upload_time_iso_8601": "2022-10-09T08:07:34.032858Z",
        "url": "https://files.pythonhosted.org/packages/ae/88/33480de070fe9be5f576be394a257616713a4311b6b78854cd81581554bb/unipi-control-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c14c390385a535c675f1ae0a5c186fb3e3ebcca5a6af79db74e1394578d67f39",
          "md5": "6bd2c4a91fc74bd017a1082b3f2d1a23",
          "sha256": "0c596a81e65b8ae95754e703b241a7881bb1fa95ef0bbdb4e3f8d2da96040015"
        },
        "downloads": -1,
        "filename": "unipi_control-2023.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bd2c4a91fc74bd017a1082b3f2d1a23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 37610,
        "upload_time": "2023-03-19T20:57:38",
        "upload_time_iso_8601": "2023-03-19T20:57:38.866073Z",
        "url": "https://files.pythonhosted.org/packages/c1/4c/390385a535c675f1ae0a5c186fb3e3ebcca5a6af79db74e1394578d67f39/unipi_control-2023.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2b4483e2b497d2d21546d1a6a64df2db5a3dd52714c5007b2c861be5d3a06b1",
          "md5": "cfc011df73000c9c44b4bd99d162ce88",
          "sha256": "05ab240230a8d82fedbab39a01c9832fff535975255654bb8dba2a77967cd57f"
        },
        "downloads": -1,
        "filename": "unipi-control-2023.6.tar.gz",
        "has_sig": false,
        "md5_digest": "cfc011df73000c9c44b4bd99d162ce88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 31907,
        "upload_time": "2023-03-19T20:57:40",
        "upload_time_iso_8601": "2023-03-19T20:57:40.643053Z",
        "url": "https://files.pythonhosted.org/packages/a2/b4/483e2b497d2d21546d1a6a64df2db5a3dd52714c5007b2c861be5d3a06b1/unipi-control-2023.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c14c390385a535c675f1ae0a5c186fb3e3ebcca5a6af79db74e1394578d67f39",
        "md5": "6bd2c4a91fc74bd017a1082b3f2d1a23",
        "sha256": "0c596a81e65b8ae95754e703b241a7881bb1fa95ef0bbdb4e3f8d2da96040015"
      },
      "downloads": -1,
      "filename": "unipi_control-2023.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6bd2c4a91fc74bd017a1082b3f2d1a23",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 37610,
      "upload_time": "2023-03-19T20:57:38",
      "upload_time_iso_8601": "2023-03-19T20:57:38.866073Z",
      "url": "https://files.pythonhosted.org/packages/c1/4c/390385a535c675f1ae0a5c186fb3e3ebcca5a6af79db74e1394578d67f39/unipi_control-2023.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2b4483e2b497d2d21546d1a6a64df2db5a3dd52714c5007b2c861be5d3a06b1",
        "md5": "cfc011df73000c9c44b4bd99d162ce88",
        "sha256": "05ab240230a8d82fedbab39a01c9832fff535975255654bb8dba2a77967cd57f"
      },
      "downloads": -1,
      "filename": "unipi-control-2023.6.tar.gz",
      "has_sig": false,
      "md5_digest": "cfc011df73000c9c44b4bd99d162ce88",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 31907,
      "upload_time": "2023-03-19T20:57:40",
      "upload_time_iso_8601": "2023-03-19T20:57:40.643053Z",
      "url": "https://files.pythonhosted.org/packages/a2/b4/483e2b497d2d21546d1a6a64df2db5a3dd52714c5007b2c861be5d3a06b1/unipi-control-2023.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}