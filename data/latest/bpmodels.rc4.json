{
  "info": {
    "author": "Pku-Nip-Lab",
    "author_email": "adaduo@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# BrainPy-Models\n\n[![LICENSE](https://anaconda.org/brainpy/brainpy/badges/license.svg)](https://github.com/PKU-NIP-Lab/BrainPy-Models)    [![Documentation](https://readthedocs.org/projects/brainpy/badge/?version=latest)](https://brainpy-models.readthedocs.io/en/latest/)     [![Conda](https://anaconda.org/brainpy/bpmodels/badges/version.svg)](https://anaconda.org/brainpy/bpmodels) \n\n**Note**: *We welcome your contributions for model implementations.*\n\n\n\n`BrainPy-Models` is a repository accompany with [BrainPy](https://github.com/PKU-NIP-Lab/BrainPy), which is a framework for spiking neural network simulation. With BrainPy, we implements the most canonical and effective neuron models and synapse models, and show them in `BrainPy-Models`.\n\nHere, users can directly import our models into your network, and also can learn examples of how to use BrainPy from [Documentations](https://brainpy-models.readthedocs.io/en/latest/).\n\nWe provide the following models:\n\n\n| Neuron models                                                | Synapse models                                               | Learning rules                                               | Networks                                                     |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [Leaky integrate-and-fire model](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_LIF.html) | [Alpha Synapse](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_alpha.html) | [STDP](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.learning_rules.get_STDP1.html) | [Continuous attractor network](https://brainpy-models.readthedocs.io/en/latest/examples/networks/CANN.html) |\n| [Hodgkin-Huxley model](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_HH.html) | [AMPA](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_AMPA1.html) / [NMDA](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_NMDA.html) | [BCM rule](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.learning_rules.get_BCM.html) | [E/I balance network](https://brainpy-models.readthedocs.io/en/latest/examples/networks/EI_balanced_network.html) |\n| [Izhikevich model](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_Izhikevich.html) | [GABA_A](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_GABAa1.html) / [GABA_B](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_GABAb1.html) | [Oja\\'s rule](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.learning_rules.get_Oja.html) | [gamma oscillations](https://brainpy-models.readthedocs.io/en/latest/examples/networks/Gamma_oscillations.html) |\n| [Morris--Lecar model](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_MorrisLecar.html) | [Exponential Decay Synapse](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_exponential.html) |                                                              |                                                              |\n| [Generalized integrate-and-fire](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_GeneralizedIF.html) | [Difference of Two Exponentials](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_two_exponentials.html) |                                                              |                                                              |\n| [Exponential integrate-and-fire](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_ExpIF.html) | [Short-term plasticity](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_STP.html) |                                                              |                                                              |\n| [Quadratic integrate-and-fire](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_QuaIF.html) | [Gap junction](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_gap_junction.html) |                                                              |                                                              |\n| [adaptive Exponential IF](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_AdExIF.html) | [Voltage jump](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_voltage_jump.html) |                                                              |                                                              |\n| [adaptive Quadratic IF](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_AdQuaIF.html) |                                                              |                                                              |                                                              |\n| [Hindmarsh--Rose model](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_HindmarshRose.html) |                                                              |                                                              |                                                              |\n| [Wilson-Cowan model](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_WilsonCowan.html) |                                                              |                                                              |                                                              |\n## Installation\n\nInstall from source code:\n\n    python setup.py install\n\nInstall ``BrainPy-Models`` using ``conda``:\n\n    conda install bpmodels -c brainpy \n\nInstall `BrainPy-Models` using `pip`:\n\n    pip install bpmodels\n\nThe following packages need to be installed to use `BrainPy-Models`:\n\n-   Python >= 3.7\n-   Matplotlib >= 2.0\n-   brainpy-simulator >= 0.3.0\n\n## Quick Start\n\nThe use of `bpmodels` is very convenient, let\\'s take an example of the implementation of the E-I balanced network.\n\nWe start by importing the `brainpy` and `bpmodels` packages and set profile.\n\n```python\nimport brainpy as bp\nimport bpmodels\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# set profile\nbp.profile.set(jit=True, device='cpu',\n               numerical_method='exponential')\n```\n\nThe E-I balanced network is based on leaky Integrate-and-Fire (LIF) neurons connecting with single exponential decay synapses. As showed in the table above, `bpmodels` provides pre-defined LIF neuron model and exponential synapse model, so we can use [`bpmodels.neurons.get_LIF`](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.neurons.get_LIF.html#bpmodels.neurons.get_LIF) and [`bpmodels.synapses.get_exponential`](https://brainpy-models.readthedocs.io/en/latest/apis/_autosummary/bpmodels.synapses.get_exponential.html) to get the pre-defined models.\n\n```python\nV_rest = -52.\nV_reset = -60.\nV_th = -50.\n\nneu = bpmodels.neurons.get_LIF(V_rest=V_rest, V_reset = V_reset, V_th=V_th, noise=0., mode='scalar')\n\nsyn = bpmodels.synapses.get_exponential(tau_decay = 2., mode='scalar')\n```\n\n\n```python\n# build network\nnum_exc = 500\nnum_inh = 500\nprob = 0.1\n\nJE = 1 / np.sqrt(prob * num_exc)\nJI = 1 / np.sqrt(prob * num_inh)\n\ngroup = bp.NeuGroup(neu, geometry=num_exc + num_inh, monitors=['spike'])\n\ngroup.ST['V'] = np.random.random(num_exc + num_inh) * (V_th - V_rest) + V_rest\n\nexc_conn = bp.SynConn(syn,\n                      pre_group=group[:num_exc],\n                      post_group=group,\n                      conn=bp.connect.FixedProb(prob=prob))\nexc_conn.ST['w'] = JE\n\ninh_conn = bp.SynConn(syn,\n                      pre_group=group[num_exc:],\n                      post_group=group,\n                      conn=bp.connect.FixedProb(prob=prob))\nexc_conn.ST['w'] = -JI\n\nnet = bp.Network(group, exc_conn, inh_conn)\nnet.run(duration=500., inputs=(group, 'ST.input', 3.))\n\n# visualization\nfig, gs = bp.visualize.get_figure(4, 1, 2, 10)\n\nfig.add_subplot(gs[:3, 0])\nbp.visualize.raster_plot(net.ts, group.mon.spike, xlim=(50, 450))\n\nfig.add_subplot(gs[3, 0])\nrates = bp.measure.firing_rate(group.mon.spike, 5.)\nplt.plot(net.ts, rates)\nplt.xlim(50, 450)\nplt.show()\n```\n\nThen you would expect to see the following output:\n\n![image](docs/images/EI_balanced.png)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PKU-NIP-Lab/BrainPy-Models",
    "keywords": "computational neuroscience",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bpmodels",
    "package_url": "https://pypi.org/project/bpmodels/",
    "platform": "",
    "project_url": "https://pypi.org/project/bpmodels/",
    "project_urls": {
      "Homepage": "https://github.com/PKU-NIP-Lab/BrainPy-Models"
    },
    "release_url": "https://pypi.org/project/bpmodels/0.2.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "BrainPy-Models: An example package accompany with BrainPy.",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9307250,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9a6e4abfa7323cf5cefa3c0edfe437dc2d1bc6234f9220e56d14903f57bada5",
          "md5": "1a30d8c40d5c599d132a791c3a28ea1f",
          "sha256": "47509945398f7a50da0630a9b6cbf04ffb7e6a90a41ac372ed72505a9ac6aa20"
        },
        "downloads": -1,
        "filename": "bpmodels-0.1.0-py3.8.egg",
        "has_sig": false,
        "md5_digest": "1a30d8c40d5c599d132a791c3a28ea1f",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": ">=3.5",
        "size": 108739,
        "upload_time": "2020-12-18T02:22:11",
        "upload_time_iso_8601": "2020-12-18T02:22:11.396836Z",
        "url": "https://files.pythonhosted.org/packages/b9/a6/e4abfa7323cf5cefa3c0edfe437dc2d1bc6234f9220e56d14903f57bada5/bpmodels-0.1.0-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3eb293089dccc113340a855c850d5ab7d8345cbdef64033eb207d577bd464ee6",
          "md5": "a9ce5fca7077a45aacdeafb51e973bc4",
          "sha256": "a2df7b1cc2be79b67c7b9b8cd5dca66cc2bf9ea73187b0e7bc4b491beeebe84b"
        },
        "downloads": -1,
        "filename": "bpmodels-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a9ce5fca7077a45aacdeafb51e973bc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 11921,
        "upload_time": "2020-11-07T14:07:42",
        "upload_time_iso_8601": "2020-11-07T14:07:42.340376Z",
        "url": "https://files.pythonhosted.org/packages/3e/b2/93089dccc113340a855c850d5ab7d8345cbdef64033eb207d577bd464ee6/bpmodels-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "703e66f726bff5e22bbf33fec35d94472463eec69c7261042dfd46c5ec734185",
          "md5": "a49632e32173425afc6f3a67cb3df327",
          "sha256": "96197db02611b8be64a4020826a483be31674a5341c41f0e4d268bf68e1bb606"
        },
        "downloads": -1,
        "filename": "bpmodels-0.2.1-py3.7.egg",
        "has_sig": false,
        "md5_digest": "a49632e32173425afc6f3a67cb3df327",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.7",
        "size": 135077,
        "upload_time": "2021-01-04T01:48:34",
        "upload_time_iso_8601": "2021-01-04T01:48:34.985276Z",
        "url": "https://files.pythonhosted.org/packages/70/3e/66f726bff5e22bbf33fec35d94472463eec69c7261042dfd46c5ec734185/bpmodels-0.2.1-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6458047878fb77914545a70566cdf6bd55f9b6bd399925199332e5e230a60f62",
          "md5": "9744621153121a0d6e4c68e00943a836",
          "sha256": "53cd2e861f815ea9a70e546046b3173508335b06691dd8c80a1ef0e9c46a6bce"
        },
        "downloads": -1,
        "filename": "bpmodels-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9744621153121a0d6e4c68e00943a836",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10938537,
        "upload_time": "2021-01-04T01:49:00",
        "upload_time_iso_8601": "2021-01-04T01:49:00.556955Z",
        "url": "https://files.pythonhosted.org/packages/64/58/047878fb77914545a70566cdf6bd55f9b6bd399925199332e5e230a60f62/bpmodels-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4867db9a1967777574b475d6ed8984b4103c36130f74a22df348a87d16cbae55",
          "md5": "a1c4dc70a87f58a815d546f261abb048",
          "sha256": "abd01d55d57d44b2019e71f4d651558863f82516424d3707e7a9fa26dbdf80bd"
        },
        "downloads": -1,
        "filename": "bpmodels-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a1c4dc70a87f58a815d546f261abb048",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 43210,
        "upload_time": "2021-01-13T13:06:28",
        "upload_time_iso_8601": "2021-01-13T13:06:28.673362Z",
        "url": "https://files.pythonhosted.org/packages/48/67/db9a1967777574b475d6ed8984b4103c36130f74a22df348a87d16cbae55/bpmodels-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8059bbd90c3578d8d92eb63f8adcc77a8220f8b15e6b99c73cda840f7a5f771",
          "md5": "1c7b0149d38e0a2e643acb8a6595d0b9",
          "sha256": "db6d9d73ff2d9e93c510fa0bc7430fa21dde05c7eed85674e820f7a9b991ff58"
        },
        "downloads": -1,
        "filename": "bpmodels-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1c7b0149d38e0a2e643acb8a6595d0b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 43212,
        "upload_time": "2021-02-03T15:46:53",
        "upload_time_iso_8601": "2021-02-03T15:46:53.081941Z",
        "url": "https://files.pythonhosted.org/packages/b8/05/9bbd90c3578d8d92eb63f8adcc77a8220f8b15e6b99c73cda840f7a5f771/bpmodels-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8059bbd90c3578d8d92eb63f8adcc77a8220f8b15e6b99c73cda840f7a5f771",
        "md5": "1c7b0149d38e0a2e643acb8a6595d0b9",
        "sha256": "db6d9d73ff2d9e93c510fa0bc7430fa21dde05c7eed85674e820f7a9b991ff58"
      },
      "downloads": -1,
      "filename": "bpmodels-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1c7b0149d38e0a2e643acb8a6595d0b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 43212,
      "upload_time": "2021-02-03T15:46:53",
      "upload_time_iso_8601": "2021-02-03T15:46:53.081941Z",
      "url": "https://files.pythonhosted.org/packages/b8/05/9bbd90c3578d8d92eb63f8adcc77a8220f8b15e6b99c73cda840f7a5f771/bpmodels-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}