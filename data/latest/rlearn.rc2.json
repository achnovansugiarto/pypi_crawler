{
  "info": {
    "author": "MorvanZhou",
    "author_email": "morvanzhou@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# Reinforcement learning Algorithms\n\n- On-Policy\n  - A2C: Actor-Critic\n  - PPO: Proximal Policy Optimization\n- Off-Policy\n  - DQN: Deep Q Networks\n  - DuelingDQN: Dueling DQN\n  - DDPG: Deep Deterministic Policy Gradients\n  - TD3: Twin Delayed DDPG\n  - SAC: Soft Actor Critic\n\n# Usage\n\n## Classical way\n\n```python\nimport gymnasium\nfrom tensorflow import keras\n\nimport rlearn\n\n# define an environment\nenv = gymnasium.make('CartPole-v1', render_mode=\"human\")\n\n# set reinforcement learning trainer\ntrainer = rlearn.DQNTrainer()\ntrainer.set_replay_buffer(max_size=1000)\ntrainer.set_model_encoder(\n  q=keras.Sequential([\n    keras.layers.InputLayer(4),  # state has dimension of 4\n    keras.layers.Dense(32),\n    keras.layers.ReLU(),\n  ]),\n  action_num=env.action_space.n\n)\n\n# training loop\nfor _ in range(100):\n  s, _ = env.reset()\n  for _ in range(200):\n    a = trainer.predict(s)\n    s_, r, done, _, _ = env.step(a)\n    trainer.store_transition(s, a, r, s_, done)\n    trainer.train_batch()\n    s = s_\n    if done:\n      break\n```\n\nset training hyper parameters\n\n```python\nimport rlearn\n\ntrainer = rlearn.DQNTrainer()\ntrainer.set_params(\n  learning_rate=0.01,\n  batch_size=32,\n  gamma=0.9,\n  replace_ratio=1.,\n  replace_step=0,\n  min_epsilon=0.1,\n  epsilon_decay=1e-3,\n)\n```\n\n## Parallel training\n\n### experience parallel\n\nStart a remote buffer:\n\n```python\nfrom rlearn import distributed\n\ndistributed.experience.start_replay_buffer_server(\n  port=50051,\n)\n```\n\nStart actors:\n\n```python\nfrom rlearn import distributed\nimport gymnasium\n\n\nclass CartPole(rlearn.EnvWrapper):\n  def __init__(self, render_mode=\"human\"):\n    self.env = gymnasium.make('CartPole-v1', render_mode=render_mode)\n\n  def reset(self):\n    s, _ = self.env.reset()\n    return s\n\n  def step(self, a):\n    s_, _, done, _, _ = self.env.step(a)\n    r = -1 if done else 0\n    return s_, r, done\n\n\ndistributed.experience.start_actor_server(\n  port=50052,\n  remote_buffer_address=\"localhost:50051\",\n  env=CartPole(),\n)\n```\n\nStart a learner:\n\n```python\nimport rlearn\nfrom tensorflow import keras\n\ntrainer = rlearn.trainer.DQNTrainer()\ntrainer.set_model_encoder(\n  q=keras.Sequential([\n    keras.layers.InputLayer(4),\n    keras.layers.Dense(32),\n    keras.layers.ReLU(),\n  ]),\n  action_num=2\n)\ntrainer.set_params(\n  learning_rate=0.01,\n  batch_size=32,\n  replace_step=15,\n)\ntrainer.set_action_transformer(rlearn.transformer.DiscreteAction([0, 1]))\nlearner = rlearn.distributed.experience.Learner(\n  trainer=trainer,\n  remote_buffer_address=\"localhost:50051\",\n  actors_address=[\"localhost:50052\", ],\n  actor_buffer_size=10,\n  remote_buffer_size=1000,\n  remote_buffer_type=\"RandomReplayBuffer\",\n)\nlearner.run(max_train_time=100, max_ep_step=-1)\n```\n\n### gradient parallel\n\nStart a parameter server\n\n```python\nimport rlearn\n\ntrainer = rlearn.trainer.DQNTrainer()\ntrainer.set_model_encoder(\n  q=keras.Sequential([\n    keras.layers.InputLayer(4),\n    keras.layers.Dense(20),\n    keras.layers.ReLU(),\n  ]),\n  action_num=2\n)\ntrainer.set_params(\n  learning_rate=0.001,\n  batch_size=32,\n  replace_step=100,\n)\ntrainer.set_action_transformer(rlearn.transformer.DiscreteAction([0, 1]))\n\nrlearn.distributed.gradient.start_param_server(\n  port=50051,\n  trainer=trainer,\n  sync_step=5,\n  worker_buffer_type=\"RandomReplayBuffer\",\n  worker_buffer_size=3000,\n  max_train_time=60,\n  # debug=True,\n)\n```\n\nStart workers\n\n```python\nimport gymnasium\nimport rlearn\n\n\nclass CartPole(rlearn.EnvWrapper):\n  def __init__(self, render_mode=\"human\"):\n    self.env = gymnasium.make('CartPole-v1', render_mode=render_mode)\n\n  def reset(self):\n    s, _ = self.env.reset()\n    return s\n\n  def step(self, a):\n    s_, _, done, _, _ = self.env.step(a)\n    r = -1 if done else 0\n    return s_, r, done\n\n\nrlearn.distributed.gradient.worker.run(\n  env=CartPole(),\n  params_server_address=\"localhost:50051\",\n  name=\"worker1\",\n  # debug=True,\n)\n```\n\n## Save and reload\n\nSave entire model\n\n```python\nimport rlearn\nfrom tensorflow import keras\nimport numpy as np\n\n# define and save a model\ntrainer = rlearn.DQNTrainer()\ntrainer.set_model_encoder(\n  keras.Sequential([\n    keras.layers.InputLayer(2),\n    keras.layers.Dense(32),\n  ]), action_num=3)\npath = \"tmp_model0\"\ntrainer.save_model(path)\n\n# reload directory from path\nm = rlearn.load_model(path)\naction = m.predict(np.random.random((2,)))\n```\n\nSave model parameters and reload to a new trainer or new model.\n\n```python\nimport rlearn\nfrom tensorflow import keras\nimport numpy as np\n\n# define and save a model\ntrainer = rlearn.DQNTrainer()\ntrainer.set_model_encoder(\n  keras.Sequential([\n    keras.layers.InputLayer(2),\n    keras.layers.Dense(32),\n  ]), action_num=3)\npath = \"tmp_model_weights0\"\ntrainer.save_model_weights(path)\n\n# trainer load parameters from path\ntrainer2 = rlearn.DQNTrainer()\ntrainer2.set_model_encoder(\n  keras.Sequential([\n    keras.layers.InputLayer(2),\n    keras.layers.Dense(32),\n  ]), action_num=3)\ntrainer2.load_model_weights(path)\naction = trainer2.predict(np.random.random((2,)))\n\n# model load parameters\nm = rlearn.DQN()\nm.set_encoder(encoder=keras.Sequential([\n  keras.layers.InputLayer(2),\n  keras.layers.Dense(32),\n]), action_num=3)\naction = m.predict(np.random.random((2,)))\n```\n\n# Install\n\n```shell\ngit clone https://git.woa.com/TIPE/rlearn.git\ncd rlearn\n\n# apple m1 silicon should use conda command:\nconda install -c apple tensorflow-deps\n########\n\npython3 setup.py install\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.woa.com/TIPE/rlearn",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rlearn",
    "package_url": "https://pypi.org/project/rlearn/",
    "platform": null,
    "project_url": "https://pypi.org/project/rlearn/",
    "project_urls": {
      "Bug Tracker": "https://git.woa.com/TIPE/rlearn/issues",
      "Homepage": "https://git.woa.com/TIPE/rlearn",
      "Source": "https://git.woa.com/TIPE/rlearn"
    },
    "release_url": "https://pypi.org/project/rlearn/0.0.4/",
    "requires_dist": [
      "tensorflow-probability (<0.18.0,>=0.17.0)",
      "tensorflow (<2.10,>=2.9.2) ; python_version >= \"3.8\" and platform_system == \"Darwin\" and platform_machine != \"arm64\"",
      "tensorflow-macos (<2.10,==2.9.2) ; python_version >= \"3.8\" and platform_system == \"Darwin\" and platform_machine == \"arm64\"",
      "tensorflow-metal (==0.5.0) ; python_version >= \"3.8\" and platform_system == \"Darwin\" and platform_machine == \"arm64\"",
      "tensorflow-probability (<0.18.0,==0.17.0) ; python_version >= \"3.8\" and platform_system == \"Darwin\" and platform_machine == \"arm64\"",
      "tensorflow (<2.10,>=2.9.2) ; python_version >= \"3.8\" and platform_system == \"Linux\"",
      "tensorflow (<2.10,>=2.9.2) ; python_version >= \"3.8\" and platform_system == \"Windows\"",
      "tox (==3.24.3) ; extra == 'build'",
      "tox-conda ; extra == 'build'",
      "build ; extra == 'build'",
      "twine ; extra == 'build'",
      "pylint ; extra == 'build'",
      "grpcio-tools (>=1.42.0) ; (python_version >= \"3.8\") and extra == 'build'",
      "grpcio-tools (>=1.42.0) ; (python_version >= \"3.8\" and platform_system == \"Darwin\" and platform_machine == \"arm64\") and extra == 'build'",
      "pygame (>=2.1.0) ; extra == 'envs'",
      "gymnasium[classic_control] (>=0.27.1) ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "reinforcement learning algorithms in python",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16972219,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32411aeb8be03bd190a069f07e5918984547c6560b6286dcd2a26ec7a2a7aa8a",
          "md5": "47fda56dff3ad80614d358b41f0349d5",
          "sha256": "a50f6507048dc6ee101c544eee420e849db8fc5e4bfcd2d70cd335f19bec63ac"
        },
        "downloads": -1,
        "filename": "rlearn-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47fda56dff3ad80614d358b41f0349d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 32437,
        "upload_time": "2023-01-04T07:29:53",
        "upload_time_iso_8601": "2023-01-04T07:29:53.459537Z",
        "url": "https://files.pythonhosted.org/packages/32/41/1aeb8be03bd190a069f07e5918984547c6560b6286dcd2a26ec7a2a7aa8a/rlearn-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea51679827b7943911ea93b6b92b8ef5467de7d3cc919866895f237f9de9c902",
          "md5": "058514559ace2995aee58b7513912cf9",
          "sha256": "af09b7c76afeb334d9b5f9a75f2f0592b5fd1b0de05bb3a3fffdee162a59bfca"
        },
        "downloads": -1,
        "filename": "rlearn-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "058514559ace2995aee58b7513912cf9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21961,
        "upload_time": "2023-01-04T07:29:55",
        "upload_time_iso_8601": "2023-01-04T07:29:55.613717Z",
        "url": "https://files.pythonhosted.org/packages/ea/51/679827b7943911ea93b6b92b8ef5467de7d3cc919866895f237f9de9c902/rlearn-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbafa481e3e244073feade21c36255ceba4ab0ec3427e885836db6ce3192bc73",
          "md5": "b8da126acf041909fe931000338c21c4",
          "sha256": "e606b212c5c46b256558ba5bb1ffc982796c0fade7206c886abd258b8e534ba3"
        },
        "downloads": -1,
        "filename": "rlearn-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8da126acf041909fe931000338c21c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 73172,
        "upload_time": "2023-02-22T06:39:24",
        "upload_time_iso_8601": "2023-02-22T06:39:24.786578Z",
        "url": "https://files.pythonhosted.org/packages/cb/af/a481e3e244073feade21c36255ceba4ab0ec3427e885836db6ce3192bc73/rlearn-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f460343381e8a5665d5db8ec3bc736edd5625c9c5e933425b77910c256049de",
          "md5": "fbdbc063cef474dbad1204a31172d0b0",
          "sha256": "d492d71cf904e2fb8b1231af22e8440b1b320a5130add91f83514b062e79ebfa"
        },
        "downloads": -1,
        "filename": "rlearn-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fbdbc063cef474dbad1204a31172d0b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 59781,
        "upload_time": "2023-02-22T06:39:27",
        "upload_time_iso_8601": "2023-02-22T06:39:27.982843Z",
        "url": "https://files.pythonhosted.org/packages/6f/46/0343381e8a5665d5db8ec3bc736edd5625c9c5e933425b77910c256049de/rlearn-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbafa481e3e244073feade21c36255ceba4ab0ec3427e885836db6ce3192bc73",
        "md5": "b8da126acf041909fe931000338c21c4",
        "sha256": "e606b212c5c46b256558ba5bb1ffc982796c0fade7206c886abd258b8e534ba3"
      },
      "downloads": -1,
      "filename": "rlearn-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b8da126acf041909fe931000338c21c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 73172,
      "upload_time": "2023-02-22T06:39:24",
      "upload_time_iso_8601": "2023-02-22T06:39:24.786578Z",
      "url": "https://files.pythonhosted.org/packages/cb/af/a481e3e244073feade21c36255ceba4ab0ec3427e885836db6ce3192bc73/rlearn-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f460343381e8a5665d5db8ec3bc736edd5625c9c5e933425b77910c256049de",
        "md5": "fbdbc063cef474dbad1204a31172d0b0",
        "sha256": "d492d71cf904e2fb8b1231af22e8440b1b320a5130add91f83514b062e79ebfa"
      },
      "downloads": -1,
      "filename": "rlearn-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "fbdbc063cef474dbad1204a31172d0b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 59781,
      "upload_time": "2023-02-22T06:39:27",
      "upload_time_iso_8601": "2023-02-22T06:39:27.982843Z",
      "url": "https://files.pythonhosted.org/packages/6f/46/0343381e8a5665d5db8ec3bc736edd5625c9c5e933425b77910c256049de/rlearn-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}