{
  "info": {
    "author": "Matteo Paltenghi",
    "author_email": "mattepalte@live.it",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Colored Tokens Visualizer\n\nA python library to color your code tokens based on certain vector of weights.\n\nIt supports both **Python** and **Java** source code, see these example:\n\n\n\n# Quick Start\n\nOnce you have the two JSON files: `example_java.json` and `example_python.json` you can simply use this code to create the colored version of your tokens, using your weights.\n\n```python\nfrom codeattention.source_code import SourceCode\nfrom codeattention.tokenizer import PythonTokenizer\n\n# read your snippet\npython_code = \"\"\"def hello_python():\n    print(\"Hello World!\")\"\"\"\n\n# prepare the tokenized code in a file of the right format (read below)\npt = PythonTokenizer()\npt.tokenize(python_code)\npt.save_tokens(\"example_python.json\")\n\n# inject your own application-specific weights (random here)\nimport random\nfrom random import randint\nrandom.seed(42)\nweights = []\nfor i in range(len(pt.tokens)):\n    weights.append(randint(1, 10))\n\n# plot\npython_sc = SourceCode(\"example_python.json\")\nfig, ax = python_sc.show_with_weights(weights=weights)\nprint(weights)\n```\nOutput:\n```python\n[2, 1, 5, 4, 4, 3, 2, 9, 2, 10]\n```\n![Demo Python](demo_python.png)\n\n\n\n## Python Input Format\n\nWith Python we might want to separate a long identifier with underscores in separate tokens. That is why we have the fields `si` and `d`.\n\n```python\ndef hello_python():\n    print(\"Hello World!\")\n```\n\nYou will need to prepare your input like this JSON: `example_python.json`:\n```json\n[\n    {\n        \"t\": \"def\",\n        \"i\": 0,\n        \"l\": 1,\n        \"c\": 0\n    },\n    {\n        \"t\": \"hello\",\n        \"i\": 1,\n        \"l\": 1,\n        \"c\": 4,\n        \"si\": 0,\n        \"d\": 2\n    },\n    {\n        \"t\": \"python\",\n        \"i\": 1,\n        \"l\": 1,\n        \"c\": 10,\n        \"si\": 1,\n        \"d\": 2\n    },\n    {\n        \"t\": \"(\",\n        \"i\": 2,\n        \"l\": 1,\n        \"c\": 16\n    },\n    ...\n]\n```\n\nHere the identifier `hello_world` is split in two, and for the two parts you need to use the same `i` field, and use an incremental `si` (subindex) field. Both should have a `d` (dimension) field to keep track of how many token the original identifier had.\n\n\n\n## Java Input Format\n\nGiven some Java code:\n\n```Java\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\nYou can create a JSON file which contains information on the tokens you are going to color. For the given snippets you will have to provide the following JSON file: `example_java.json`\n\n```json\n[\n    [\n    {\n        \"t\": \"class\",\n        \"i\": 0,\n        \"l\": 1,\n        \"c\": 1\n    },\n    {\n        \"t\": \"HelloWorld\",\n        \"i\": 1,\n        \"l\": 1,\n        \"c\": 7\n    },\n    {\n        \"t\": \"{\",\n        \"i\": 2,\n        \"l\": 1,\n        \"c\": 18\n    },\n    {\n        \"t\": \"public\",\n        \"i\": 3,\n        \"l\": 2,\n        \"c\": 5\n    },\n    {\n        \"t\": \"static\",\n        \"i\": 4,\n        \"l\": 2,\n        \"c\": 12\n    },\n    ...\n]\n```\nNote that there are no meaningless tokens, such as whitespace, new lines, tab, etc.\n\n**Warning:** If you use our tool to prepare the JSON file, remember that the `JavaTokenizer` removes comments while `PythonTokenizer` keeps them. Implement your own tokenizer if you want a different behavior.\n\nWhich is a list of element, each representing one token. A token contains the following fields:\n- `t` key contains the string representation of the token,\n- `i` key contains the major index position of the token,\n- `l` key contains the line number of the token,\n- `c` key contains the column number of the token.\n- `si` key contains the minor index position (si = subindex),\n- `d` key contains the number of other tokens sharing the same\nindex\n\n### Example of java output.\n![Demo Java](demo_java.png)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MattePalte/codeattention",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "code-attention-visualizer",
    "package_url": "https://pypi.org/project/code-attention-visualizer/",
    "platform": null,
    "project_url": "https://pypi.org/project/code-attention-visualizer/",
    "project_urls": {
      "Homepage": "https://github.com/MattePalte/codeattention"
    },
    "release_url": "https://pypi.org/project/code-attention-visualizer/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Visualizer for human attention over source code tokens.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14721450,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f11930a9df7de85befe648676106ac1fc322b1cd18f0f861c633f547bff05ea2",
          "md5": "67033c62e4dcc5802236664eb8ddd289",
          "sha256": "79ad156a5d1c0fc9f5baa4f17c34c08502a43a1927e73e6d075982cbb0f50db8"
        },
        "downloads": -1,
        "filename": "code-attention-visualizer-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "67033c62e4dcc5802236664eb8ddd289",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 192684,
        "upload_time": "2022-04-21T14:22:02",
        "upload_time_iso_8601": "2022-04-21T14:22:02.387973Z",
        "url": "https://files.pythonhosted.org/packages/f1/19/30a9df7de85befe648676106ac1fc322b1cd18f0f861c633f547bff05ea2/code-attention-visualizer-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d189a11b586fea90d249b9d60561537cc97c918e984707f16de3378f84948c15",
          "md5": "0f62c06af2d6c7e9209922cec06991ff",
          "sha256": "4099d1a8a66f408e0d2ba90ffeaa6c6f70cc568ee07a9844b396d36759099187"
        },
        "downloads": -1,
        "filename": "code-attention-visualizer-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0f62c06af2d6c7e9209922cec06991ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 194151,
        "upload_time": "2022-04-29T20:33:06",
        "upload_time_iso_8601": "2022-04-29T20:33:06.938690Z",
        "url": "https://files.pythonhosted.org/packages/d1/89/a11b586fea90d249b9d60561537cc97c918e984707f16de3378f84948c15/code-attention-visualizer-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52231c85846c9a2036183ccaf420026b939dd08440f8d0b304bd27b3864c21c4",
          "md5": "66969d3877a3937ecab745033d169dd6",
          "sha256": "f5c9634297f7ca3f90a985cb985b9b3bacb480cc213bd205b2100eb59c650f06"
        },
        "downloads": -1,
        "filename": "code-attention-visualizer-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "66969d3877a3937ecab745033d169dd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 194128,
        "upload_time": "2022-07-21T13:23:31",
        "upload_time_iso_8601": "2022-07-21T13:23:31.334355Z",
        "url": "https://files.pythonhosted.org/packages/52/23/1c85846c9a2036183ccaf420026b939dd08440f8d0b304bd27b3864c21c4/code-attention-visualizer-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc39a80a6123fd0fc1bd0e028afbbb6d70c17c782bb4b6ec143eea8d81e0f6a5",
          "md5": "fc302a5b831d136338b7ff5fe41e0751",
          "sha256": "896b94560e7a53e0ad0779a5125e77c34329a8ce9f00fa57df03f1ab7ee1a482"
        },
        "downloads": -1,
        "filename": "code-attention-visualizer-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fc302a5b831d136338b7ff5fe41e0751",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 194157,
        "upload_time": "2022-08-10T20:37:44",
        "upload_time_iso_8601": "2022-08-10T20:37:44.636617Z",
        "url": "https://files.pythonhosted.org/packages/bc/39/a80a6123fd0fc1bd0e028afbbb6d70c17c782bb4b6ec143eea8d81e0f6a5/code-attention-visualizer-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc39a80a6123fd0fc1bd0e028afbbb6d70c17c782bb4b6ec143eea8d81e0f6a5",
        "md5": "fc302a5b831d136338b7ff5fe41e0751",
        "sha256": "896b94560e7a53e0ad0779a5125e77c34329a8ce9f00fa57df03f1ab7ee1a482"
      },
      "downloads": -1,
      "filename": "code-attention-visualizer-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "fc302a5b831d136338b7ff5fe41e0751",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 194157,
      "upload_time": "2022-08-10T20:37:44",
      "upload_time_iso_8601": "2022-08-10T20:37:44.636617Z",
      "url": "https://files.pythonhosted.org/packages/bc/39/a80a6123fd0fc1bd0e028afbbb6d70c17c782bb4b6ec143eea8d81e0f6a5/code-attention-visualizer-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}