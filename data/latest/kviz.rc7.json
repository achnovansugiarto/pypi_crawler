{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Kviz\n\n![PyPI](https://img.shields.io/pypi/v/kviz)\n[![License](http://img.shields.io/:license-apache-blue.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)\n![kviz CI](https://github.com/gallettilance/kviz/workflows/kviz%20CI/badge.svg)\n\nVisualization library for Keras Neural Networks\n\n```\n    pip3 install kviz\n```\n\n## Requirements\n\nOn Fedora\n\n```\n    sudo dnf install python3-devel graphviz graphviz-devel\n```\n\nOn Ubuntu\n\n```\n    sudo apt-get install graphviz graphviz-dev\n```\n\n## Examples\n\n### Architecture Visualization\n\nYou can visualize the architecture of your keras model as such:\n\n```python\n    model = keras.models.Sequential()\n    model.add(layers.Dense(2, input_dim=2))\n    model.add(layers.Dense(1, activation=\"sigmoid\"))\n    model.compile(loss=\"binary_crossentropy\")\n\n    dg = DenseGraph(model)\n    dg.render()\n```\n\nProduces the following graph:\n\n<p align=\"center\">\n    <img src=\"https://github.com/gallettilance/kviz/blob/master/examples/base_model.png?raw=true\"/>\n</p>\n\n### Learning Animation\n\nYou can visualize the learned decision boundary of your model as such:\n\n```python\n    model = keras.models.Sequential()\n    model.add(layers.Dense(2, input_dim=2, activation='relu'))\n    model.add(layers.Dense(1, activation='sigmoid'))\n    model.compile(loss=\"binary_crossentropy\")\n\n    # Generate data that looks like 2 concentric circles\n    t, _ = datasets.make_blobs(n_samples=200, centers=[[0, 0]], cluster_std=1, random_state=1)\n    X = np.array(list(filter(lambda x: x[0]**2 + x[1]**2 < 1 or x[0]**2 + x[1]**2 > 1.5, t)))\n    Y = np.array([1 if x[0]**2 + x[1]**2 >= 1 else 0 for x in X])\n\n    dg = DenseGraph(model)\n    dg.animate_learning(X, Y, snap_freq=20, duration=300, batch_size=4, epochs=1000, verbose=0)\n```\n\nWhich produces the following GIF:\n\n<p align=\"center\">\n    <img src=\"https://github.com/gallettilance/kviz/blob/master/examples/circle_relu_model.gif?raw=true\"/>\n</p>\n\nWe can try different activation functions, network architectures, etc. to see what works\nbest. For example, from looking at the GIF we can see that the neural net is trying to\nlearn a decision boundary that is a combination of two straight lines. Clearly this is\nnot going to work for a circular decision boundary. We could expect to better approximate\nthis circular decision boundary if we had more straight lines to combine. We could\ntry changing the number of neurons in the hidden layer to 3 or more (to learn higher\ndimensional features). This produces the following (for 4 hidden neurons):\n\n<p align=\"center\">\n    <img src=\"https://github.com/gallettilance/kviz/blob/master/examples/circle_relu_4d_model.gif?raw=true\"/>\n</p>\n\nInstead, we can try changing the activation in the hidden layer to a `custom_activation`\nfunction that is non-linear and matches our intuition of what circles are:\n\n```python\n    def custom_activation(x):\n        return x**2\n\n    model = keras.models.Sequential()\n    model.add(layers.Dense(2, input_dim=2, activation=custom_activation))\n    model.add(layers.Dense(1, activation='sigmoid'))\n    model.compile(loss=\"binary_crossentropy\")\n```\n\nwhich produces:\n\n<p align=\"center\">\n    <img src=\"https://github.com/gallettilance/kviz/blob/master/examples/circle_square_model.gif?raw=true\"/>\n</p>\n\n\n### Node Activation Visualization\n\nYou can visualize which nodes activate in the network as a function of a set of inputs.\n\n#### XOR Function\n\n```python\n    model = keras.models.Sequential()\n    model.add(layers.Dense(2, input_dim=2, activation='sigmoid'))\n    model.add(layers.Dense(1, activation='sigmoid'))\n    model.compile(loss=\"binary_crossentropy\")\n\n    X = np.array([\n        [0,0],\n        [0,1],\n        [1,0],\n        [1,1]])\n    Y = np.array([x[0]^x[1] for x in X]) # Xor function\n\n    history = model.fit(X, Y, batch_size=4, epochs=1000, verbose=0)\n\n    dg = DenseGraph(model)\n    dg.animate_activations(X)\n```\n\nProduces the following decision boundary (visualized using `matplotlib`):\n\n<p align=\"center\">\n    <img src=\"https://github.com/gallettilance/kviz/blob/master/examples/xor_model.png?raw=true\">\n</p>\n\nAnd the following GIF:\n\n<p align=\"center\">\n    <img src=\"https://github.com/gallettilance/kviz/blob/master/examples/xor_model.gif?raw=true\"/>\n</p>\n\nThe darker the node the higher the activation is at that node.\n\n#### Linear Decisions Boundary\n\n```python\n    import sklearn.datasets as datasets\n\n    model = keras.models.Sequential()\n    model.add(layers.Dense(3, input_dim=2, activation=ACTIVATION))\n    model.add(layers.Dense(1, activation=ACTIVATION))\n    model.compile(loss=\"binary_crossentropy\")\n\n    centers = [[.5, .5]]\n    t, _ = datasets.make_blobs(n_samples=50, centers=centers, cluster_std=.1)\n    X = np.array(t)\n    Y = np.array([1 if x[0] - x[1] >= 0 else 0 for x in X])\n\n    history = model.fit(X, Y)\n\n    dg = DenseGraph(model)\n    dg.animate_activations(X, duration=.3)\n```\n\nProduces the following decision boundary (visualized using `matplotlib`):\n\n<p align=\"center\">\n    <img src=\"https://github.com/gallettilance/kviz/blob/master/examples/line_model.png?raw=true\">\n</p>\n\nAnd the following GIF:\n\n<p align=\"center\">\n    <img src=\"https://github.com/gallettilance/kviz/blob/master/examples/line_model.gif?raw=true\"/>\n</p>\n\nAt a glance you can see that the activations of the middle hidden node\nresults in predictions of class 0 while the activation of the left-most\nand right-most hiddent nodes result in predictions of class 1.\n\n### Guidance On Graph Customization\n\nYou can modify the node activation graph. The node activation graph\nconsists of a pyplot graph and a networkx graph. You can change the\ncolor and marker of the points in the pyplot graph, and attributes like \nthe color and shape of each node in the networkx graph.\n\nFor the pyplot graph, you can use parameters `x_color` and `x_marker` when\ncalling `render` to change the colors and shapes of the points.\n\nFor the networkx graph, first, you need to use the `get_graph` method to get\nthe networkx graph from `DenseGraph`. Then, you can modify the graph as needed.\nOne possible way is to loop through the nodes of the graph and use \n`set_node_attributes` and `set_edge_attributes` from `networkx`. Finally, you \ncan use the `set_graph` method to pass the modified graph to `DenseGraph` and \ncall `render` to get the visualization.\n\nThe index of each node is defined as\na string, which equals the index of the layer (starts from 0) plus \"_\" plus the index of\nthe node in that layer (starts from 0). For example, the index \"0_0\" means the\nfirst node (\"0\") in the first layer (\"0\").\n\nWe provide a function called `unique_index` with which you can conveniently\nget the index of a certain node. The input to this function is the sequence of the\nlayer with the node (starts from 0), and the sequence of the node in the layer (also\nstarts from 0). We suggest you use this function instead of explicitly computing\nthe index, because in the future we may update the way we represent a node.\n\nThe index of an edge is a tuple consisting\nof 2 nodes that are connected by it. The node in the upper layer usually comes\nfirst. For example, (\"0_0\", \"1_0\") is the index of an edge that connects node\n\"0_0\" and node \"1_0\".\n\nBelow is an example using the XOR function: (assume we already had a keras model; you can get\none using the codes above)\n\n```python\n    from networkx import set_node_attributes, set_edge_attributes\n    from kviz.helper_functions import unique_index\n    \n    # \"model\" is already a trained keras model.\n    dg = DenseGraph(model)\n    \n    # Get the networkx graph.\n    the_graph = dg.get_graph()\n    \n    # Loop through the graph by looping through the model.\n    for l in range(len(model.layers)):  # get number of layers\n        layer = model.layers[l]\n        for n in range(0, layer.input_shape[1]):  # get number of nodes in that layer\n            set_node_attributes(the_graph, {\n                unique_index(l, n): {\n                    'shape': \"diamond\",\n                    'color': \"#00ff00\",\n                    'label': \"\"\n                }\n            })\n    \n            # Here, set the attributes for nodes in the output layer, which is the last\n            # layer of this model.\n            for h in range(0, layer.output_shape[1]):\n                if l == len(model.layers) - 1:  # check if the layer is the last layer\n                    set_node_attributes(the_graph, {\n                        unique_index(l + 1, h): {\n                            'shape': \"square\",\n                            'color': \"#ff0000\",\n                            'label': \"\"\n                        }\n                    })\n                # Now set the attributes of edges.\n                # The index of an edge is an tuple consisting of the indexes of \n                # the 2 nodes that are connected by it.\n                set_edge_attributes(the_graph, {\n                    (unique_index(l ,n), unique_index(l + 1, h)): {\n                        'color': \"#0000ff\"\n                    }\n                })\n    \n    # Pass the modified network graph to DenseGraph. \n    dg.set_graph(the_graph)\n    \n    # Get the visualization & set the color and marker in the pyplot graph.\n    dg.animate_activations(X, x_color=\"#FF0000\", x_marker=\"^\")\n```\n\nOf course, you do not need to loop through the model if you already know the\nnumber of layers and number of nodes in each layer. You can directly set the \nattributes of every node by its index using `set_node_attributes`\nand `set_edge_attributes`.\n\nBelow is the code example. It will give the same result as the codes above.\n\n```python\n    from networkx import set_node_attributes, set_edge_attributes\n    from kviz.helper_functions import unique_index\n\n    dg = DenseGraph(model)\n\n    the_graph = dg.get_graph()\n\n    # the input layer has a shape of 2, same as the inner dense layer\n    # set the input nodes first\n    l = 0\n    for n in range(2):  # a shape of 2\n        set_node_attributes(the_graph, {\n            unique_index(l, n): {\n                'shape': \"diamond\",\n                'color': \"#00ff00\",\n                'label': \"\"\n            }\n        })\n\n    # set the inner dense layer then. In this case, there is only 1 inner dense layer.\n    l = 1\n    for n in range(2):  # a shape of 2\n        set_node_attributes(the_graph, {\n            unique_index(l, n): {\n                'shape': \"diamond\",\n                'color': \"#00ff00\",\n                'label': \"\"\n            }\n        })\n\n    # set the output dense layer, which has a shape of 1\n    l = 2\n    set_node_attributes(the_graph, {\n        unique_index(l, 0): {\n            'shape': \"square\",\n            'color': \"#ff0000\",\n            'label': \"\"\n        }\n    })\n\n    # finally set all the edges:\n    # here we have a graph of 3 layers\n    # the first 2 layers have a shape of 2, while the last layer has a shape of 1\n    # a total of 2 * 2 + 2 * 1 = 6 edges\n    # for convenience, all edges are listed below\n    edge_ids = [(unique_index(0 ,0), unique_index(1, 0)), (unique_index(0, 1), unique_index(1, 0)),\n                (unique_index(0, 0), unique_index(1, 1)), (unique_index(0, 1), unique_index(1, 1)),\n                (unique_index(1, 0), unique_index(2, 0)), (unique_index(1, 1), unique_index(2, 0))]\n    \n    for edge_id in edge_ids:\n        set_edge_attributes(the_graph, {\n            edge_id: {\n                'color': \"#0000ff\"\n            }\n        })\n\n    dg.set_graph(the_graph)\n    dg.animate_activations(X, x_color=\"#FF0000\", x_marker=\"^\")\n```\n\nThe result is:\n\n<p align=\"center\">\n    <img src=\"https://github.com/gallettilance/kviz/blob/master/examples/dense_input_xor_customized_stacked.gif?raw=true\"/>\n</p>\n\n## Release\n\nBump the release version in the `setup.py` file, then run:\n\n```\n    make clean\n    make build\n    make release\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kviz",
    "package_url": "https://pypi.org/project/kviz/",
    "platform": "",
    "project_url": "https://pypi.org/project/kviz/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/kviz/0.0.7/",
    "requires_dist": [
      "tensorflow",
      "networkx",
      "pygraphviz",
      "matplotlib",
      "imageio",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "testfixtures ; extra == 'test'"
    ],
    "requires_python": ">=3.9, <4",
    "summary": "A Library for visualizing keras neural networks",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11928146,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47f1f30a788cc4fa89530892b9247e963910f849c3b3e110f17e3f6f72f3a78e",
          "md5": "0df38c2a38f343e829058d3b9bf37119",
          "sha256": "dbd346bd221c7314e676286650217da974cdc81626c9fd9620086b3710af7c06"
        },
        "downloads": -1,
        "filename": "kviz-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0df38c2a38f343e829058d3b9bf37119",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 10600,
        "upload_time": "2021-03-26T20:15:58",
        "upload_time_iso_8601": "2021-03-26T20:15:58.724425Z",
        "url": "https://files.pythonhosted.org/packages/47/f1/f30a788cc4fa89530892b9247e963910f849c3b3e110f17e3f6f72f3a78e/kviz-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95f5dfb3bdeafa31c69023bc8dd68d4c6febfbcb604a74bfe4be38a4351dcb0d",
          "md5": "ad936f461792762482d5cfed22e60d59",
          "sha256": "81a369952516f57ac28f45bef2fea2797f3ab31c288da73e90cd69e73df55a01"
        },
        "downloads": -1,
        "filename": "kviz-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ad936f461792762482d5cfed22e60d59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 7172,
        "upload_time": "2021-03-26T20:16:00",
        "upload_time_iso_8601": "2021-03-26T20:16:00.240440Z",
        "url": "https://files.pythonhosted.org/packages/95/f5/dfb3bdeafa31c69023bc8dd68d4c6febfbcb604a74bfe4be38a4351dcb0d/kviz-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21c856224252bd4ec96fa229900eb347a13b94d0e31ab6544bb9ab6f4a701c1c",
          "md5": "eb1de533a307926bfb8331d02a8db31e",
          "sha256": "c9be9a48566ded1499e602d4b908f9ea8e7e7502e41cbace197925dcc1f0000e"
        },
        "downloads": -1,
        "filename": "kviz-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb1de533a307926bfb8331d02a8db31e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <4",
        "size": 10649,
        "upload_time": "2021-03-26T20:34:14",
        "upload_time_iso_8601": "2021-03-26T20:34:14.090781Z",
        "url": "https://files.pythonhosted.org/packages/21/c8/56224252bd4ec96fa229900eb347a13b94d0e31ab6544bb9ab6f4a701c1c/kviz-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1534be0e4418e2be1841d712f9acfd3461f9e0a1152025dd966b910f67c4709",
          "md5": "58de4e782c94e23f9de989b377ecf3f2",
          "sha256": "55f30231cb296fc6eb667a98d28c72ee1cb5984933aa36b3bd14b2f65c2eab97"
        },
        "downloads": -1,
        "filename": "kviz-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "58de4e782c94e23f9de989b377ecf3f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <4",
        "size": 7211,
        "upload_time": "2021-03-26T20:34:15",
        "upload_time_iso_8601": "2021-03-26T20:34:15.833319Z",
        "url": "https://files.pythonhosted.org/packages/a1/53/4be0e4418e2be1841d712f9acfd3461f9e0a1152025dd966b910f67c4709/kviz-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2608c05d177a3f0f925af9807befc4a661c0f35376285c6a5239accfe4532075",
          "md5": "ff9ef25d7825fe0f098e2aca69c03719",
          "sha256": "3f03fec4c90c878de35e9358984a054cf9ea415cf695f5afabb2c496642ace94"
        },
        "downloads": -1,
        "filename": "kviz-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff9ef25d7825fe0f098e2aca69c03719",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <4",
        "size": 10709,
        "upload_time": "2021-03-29T17:09:48",
        "upload_time_iso_8601": "2021-03-29T17:09:48.607094Z",
        "url": "https://files.pythonhosted.org/packages/26/08/c05d177a3f0f925af9807befc4a661c0f35376285c6a5239accfe4532075/kviz-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f052bbc9fdbaaac7a23508d360b81ee736480298878feffbdf2e20ece5c84f6",
          "md5": "6bfba115ae6522f1da6ffd040014d349",
          "sha256": "2688e5047aa2cdbe06aa1f18eb676cf0bdcb704a240acc6fd20041cc2cadbe63"
        },
        "downloads": -1,
        "filename": "kviz-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6bfba115ae6522f1da6ffd040014d349",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <4",
        "size": 7348,
        "upload_time": "2021-03-29T17:09:50",
        "upload_time_iso_8601": "2021-03-29T17:09:50.212963Z",
        "url": "https://files.pythonhosted.org/packages/2f/05/2bbc9fdbaaac7a23508d360b81ee736480298878feffbdf2e20ece5c84f6/kviz-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fd7350a5b33556eae1c09bcb865f4cb441447618343cdb95bf469f1ddacabbc",
          "md5": "7fe0b710b27e986155e43fa67da1f827",
          "sha256": "8632771efc840d14af9e3384ed2a9572553d8d5ea4fdc6c7896dd891ee4b2fd7"
        },
        "downloads": -1,
        "filename": "kviz-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fe0b710b27e986155e43fa67da1f827",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <4",
        "size": 10730,
        "upload_time": "2021-03-29T17:54:42",
        "upload_time_iso_8601": "2021-03-29T17:54:42.765088Z",
        "url": "https://files.pythonhosted.org/packages/0f/d7/350a5b33556eae1c09bcb865f4cb441447618343cdb95bf469f1ddacabbc/kviz-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "641108104de82f1a708e6c8d5526a08ce06dd221fa2fde9b624dac51ed3348d5",
          "md5": "3d1d0dc24dc4956f0e361984d1921dda",
          "sha256": "bde887432c8eb07392e7ca7996d075b8c56af06a3d9ab3e8331e620735b209d0"
        },
        "downloads": -1,
        "filename": "kviz-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3d1d0dc24dc4956f0e361984d1921dda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <4",
        "size": 7382,
        "upload_time": "2021-03-29T17:54:44",
        "upload_time_iso_8601": "2021-03-29T17:54:44.176511Z",
        "url": "https://files.pythonhosted.org/packages/64/11/08104de82f1a708e6c8d5526a08ce06dd221fa2fde9b624dac51ed3348d5/kviz-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33769a29adb39c1c61aa85f97693ce792367c854e02596105a335ff719b17ff8",
          "md5": "a38a48cb0ab4e6be3eca017de613283c",
          "sha256": "ef39375aae49731699fa8eeff6985b78ad174525c93e92c2d69acfee8fd2db55"
        },
        "downloads": -1,
        "filename": "kviz-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a38a48cb0ab4e6be3eca017de613283c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <4",
        "size": 13904,
        "upload_time": "2021-10-14T21:02:28",
        "upload_time_iso_8601": "2021-10-14T21:02:28.276884Z",
        "url": "https://files.pythonhosted.org/packages/33/76/9a29adb39c1c61aa85f97693ce792367c854e02596105a335ff719b17ff8/kviz-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e9caaee69e167202ff4d73032cb4cd1b2c39b0e1031414666d42a915376e6af",
          "md5": "f1787c0d5992c5fd952afae885148191",
          "sha256": "ae307d5f4e7780da6e5ba81bb81d57197df2e5b2c6e61ad35b71ac5aab9eeda1"
        },
        "downloads": -1,
        "filename": "kviz-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f1787c0d5992c5fd952afae885148191",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <4",
        "size": 16110,
        "upload_time": "2021-10-14T21:02:31",
        "upload_time_iso_8601": "2021-10-14T21:02:31.714673Z",
        "url": "https://files.pythonhosted.org/packages/4e/9c/aaee69e167202ff4d73032cb4cd1b2c39b0e1031414666d42a915376e6af/kviz-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a44d6e7bd49360695a165cb4fc1591f93934636042c8a9ca1e6704040818d804",
          "md5": "94185e2dfabdbe5a67b1294c6d493ede",
          "sha256": "982c28ff90fa16b90e3f61d25b435ef8c800664410d1cb2d94d6a419f025af1a"
        },
        "downloads": -1,
        "filename": "kviz-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94185e2dfabdbe5a67b1294c6d493ede",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <4",
        "size": 13958,
        "upload_time": "2021-11-02T16:19:31",
        "upload_time_iso_8601": "2021-11-02T16:19:31.635076Z",
        "url": "https://files.pythonhosted.org/packages/a4/4d/6e7bd49360695a165cb4fc1591f93934636042c8a9ca1e6704040818d804/kviz-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a24711b54c35ce99d252dee64a6411af1ece81c7d0930cc69d9ad81adc668ed3",
          "md5": "ce9eaf443f2be4c1595705e9d32b0122",
          "sha256": "94bf570ef75a542a822574d6eee6d20f2f32ee0d3dddbc49f29920bf3647d2bb"
        },
        "downloads": -1,
        "filename": "kviz-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ce9eaf443f2be4c1595705e9d32b0122",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <4",
        "size": 16198,
        "upload_time": "2021-11-02T16:19:33",
        "upload_time_iso_8601": "2021-11-02T16:19:33.189953Z",
        "url": "https://files.pythonhosted.org/packages/a2/47/11b54c35ce99d252dee64a6411af1ece81c7d0930cc69d9ad81adc668ed3/kviz-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b867576463be8bfa002e3283a81778ad6b860b5a06fd59204ac021c20d690f6",
          "md5": "5f3d7c921e25b55b4005ab1d53cf8d8f",
          "sha256": "a7663cd0bde2cd068bd7cb08f3cf274d45ca75915773e44159515474ac0d2838"
        },
        "downloads": -1,
        "filename": "kviz-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f3d7c921e25b55b4005ab1d53cf8d8f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <4",
        "size": 13956,
        "upload_time": "2021-11-04T17:41:21",
        "upload_time_iso_8601": "2021-11-04T17:41:21.537596Z",
        "url": "https://files.pythonhosted.org/packages/9b/86/7576463be8bfa002e3283a81778ad6b860b5a06fd59204ac021c20d690f6/kviz-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d6c3ff2f60e40690acaaeb76d318316f5704457e67688c46d86f1108b1cc010",
          "md5": "345ffb9481eb3f5a889560c1f9ffd537",
          "sha256": "deaf40aeb380d344a00a0214974a14407a769b424d88888f2282550ecd66997d"
        },
        "downloads": -1,
        "filename": "kviz-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "345ffb9481eb3f5a889560c1f9ffd537",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <4",
        "size": 16188,
        "upload_time": "2021-11-04T17:41:23",
        "upload_time_iso_8601": "2021-11-04T17:41:23.349260Z",
        "url": "https://files.pythonhosted.org/packages/0d/6c/3ff2f60e40690acaaeb76d318316f5704457e67688c46d86f1108b1cc010/kviz-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b867576463be8bfa002e3283a81778ad6b860b5a06fd59204ac021c20d690f6",
        "md5": "5f3d7c921e25b55b4005ab1d53cf8d8f",
        "sha256": "a7663cd0bde2cd068bd7cb08f3cf274d45ca75915773e44159515474ac0d2838"
      },
      "downloads": -1,
      "filename": "kviz-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f3d7c921e25b55b4005ab1d53cf8d8f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9, <4",
      "size": 13956,
      "upload_time": "2021-11-04T17:41:21",
      "upload_time_iso_8601": "2021-11-04T17:41:21.537596Z",
      "url": "https://files.pythonhosted.org/packages/9b/86/7576463be8bfa002e3283a81778ad6b860b5a06fd59204ac021c20d690f6/kviz-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d6c3ff2f60e40690acaaeb76d318316f5704457e67688c46d86f1108b1cc010",
        "md5": "345ffb9481eb3f5a889560c1f9ffd537",
        "sha256": "deaf40aeb380d344a00a0214974a14407a769b424d88888f2282550ecd66997d"
      },
      "downloads": -1,
      "filename": "kviz-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "345ffb9481eb3f5a889560c1f9ffd537",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9, <4",
      "size": 16188,
      "upload_time": "2021-11-04T17:41:23",
      "upload_time_iso_8601": "2021-11-04T17:41:23.349260Z",
      "url": "https://files.pythonhosted.org/packages/0d/6c/3ff2f60e40690acaaeb76d318316f5704457e67688c46d86f1108b1cc010/kviz-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}