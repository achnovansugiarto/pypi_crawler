{
  "info": {
    "author": "Rafael Lima, Edgar Medina",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "import aindapy\nimport random\nimport time\nimport json\nimport datetime\n\nfrom numpy.core.numeric import _correlate_dispatcher\n\n# import logging\n# import http.client as http_client\n# http_client.HTTPConnection.debuglevel = 1\n# logging.basicConfig()\n# logging.getLogger().setLevel(logging.DEBUG)\n# requests_log = logging.getLogger(\"requests.packages.urllib3\")\n# requests_log.setLevel(logging.DEBUG)\n# requests_log.propagate = True\n\naindapy.config(logLevel=1)\n\nauth = aindapy.Auth(\n    apiUrl='https://aindaanalytics.com/ainda/api/',\n    userName='asdfasdfasdfsdfsdf',\n    passWord='asdfasdfsdf'\n)\n\n\n# The datasource now accepts only the ids, so pls check what is the correct id for it. \n# Demo WareHouse                  dataWareHouseId=7, dataSourceId=20\n# Ainda Packaging Line WareHouse  dataWareHouseId=8, dataSourceId=22\n\ndataSource = aindapy.DataSource(\n    auth=auth,\n    dataWareHouseId=7,\n    dataSourceId=20\n)\n\n\n# Generate Data for graphics that are not timeseries\n\ndata = aindapy.Data(auth=auth, dataSource=dataSource, bufferSize=1000)\n\n# Generate Data Sample for pie\ndata.deleteDataKeys([\n    'basicdemo/pie1',\n    'basicdemo/pie2',\n    'basicdemo/bar1',\n    'basicdemo/bar2',\n    'basicdemo/bar10Columns',\n    'basicdemo/bar50Columns',\n    'basicdemo/scaleline250points',\n    'basicdemo/scaleline500points'\n])\ndata.addToBuffer('basicdemo/pie1', random.randint(50, 150), 'Ilha 1')\ndata.addToBuffer('basicdemo/pie1', random.randint(70, 180), 'Ilha 2')\ndata.addToBuffer('basicdemo/pie1', random.randint(10, 75), 'Ilha 3')\ndata.addToBuffer('basicdemo/pie1', random.randint(25, 45), 'Ilha 4')\n\ndata.addToBuffer('basicdemo/pie2', random.randint(50, 150), 'Ilha 1')\ndata.addToBuffer('basicdemo/pie2', random.randint(70, 180), 'Ilha 2')\ndata.addToBuffer('basicdemo/pie2', random.randint(10, 75), 'Ilha 3')\ndata.addToBuffer('basicdemo/pie2', random.randint(25, 45), 'Ilha 4')\ndata.addToBuffer('basicdemo/pie2', random.randint(25, 45), 'Ilha 4')\ndata.addToBuffer('basicdemo/pie2', random.randint(25, 45), 'Ilha 4')\ndata.addToBuffer('basicdemo/pie2', random.randint(25, 45), 'Ilha 4')\n\n\n# Generate Data Sample for one bar graphic with 10 columns\nfor step in range(10):\n    data.addToBuffer('basicdemo/bar10Columns', random.randint(50, 150), step)\n\n\n# Generate Data Sample for one bar graphic with 50 columns\nfor step in range(50):\n    data.addToBuffer('basicdemo/bar50Columns', random.randint(50, 150), step)\n\n\n# Generate Data Sample for line\nfor step in range(250):\n    data.addToBuffer('basicdemo/scaleline250points',\n                     random.randint(50, 150), step)\n\n\nfor step in range(500):\n    data.addToBuffer('basicdemo/scaleline500points',\n                     random.randint(50, 150), step)\n\ndata.commit()\n\n\n\n# Generate data for one timeseries datatag. This data we can not deleted what was added before\n# If the tag do not exist, the code create this tag inside our system.\nstag1 = aindapy.SensorTag(auth=auth, dataSource=dataSource, channel='1', datatag='XRND1', tag='Random Value 1', tag_unit='KG', tag_updaterate=1000)\nstag2 = aindapy.SensorTag(auth=auth, dataSource=dataSource, channel='1', datatag='XRND2', tag='Random Value 2', tag_unit='KG', tag_updaterate=1000)\n\ntdata = aindapy.DataTimeSeries(auth=auth, dataSource=dataSource, bufferSize=1000)\nfor step in range(10000):\n    tdata.addToBuffer(sensorTag=stag1, timeStamp=datetime.datetime.now(), value=random.randint(45,90))\n\n    # if you do not pass timestamp, we will generate internaly\n    tdata.addToBuffer(sensorTag=stag2, value=random.randint(45,90))\n\n\ntdata.commit()\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/xsensors/aindapy",
    "keywords": "aindapy,ainda,aindavision.com,aindaanalytics.com",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aindapy",
    "package_url": "https://pypi.org/project/aindapy/",
    "platform": "",
    "project_url": "https://pypi.org/project/aindapy/",
    "project_urls": {
      "Bug Reports": "https://bitbucket.org/xsensors/aindapy/issues",
      "Homepage": "https://bitbucket.org/xsensors/aindapy",
      "Source": "https://bitbucket.org/xsensors/aindapy/"
    },
    "release_url": "https://pypi.org/project/aindapy/0.0.14/",
    "requires_dist": [
      "requests",
      "Pillow",
      "check-manifest ; extra == 'dev'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Ainda Package made for python lovers. This is inteded to be used on ainda private cloud",
    "version": "0.0.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10686198,
  "releases": {
    "0.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e9fb2c9820f0e28a20b955476d3ab3686bad3220fd14698b3502cf1f2c8c478",
          "md5": "1b0a84527a12a166e3c028a61ca11f20",
          "sha256": "b502296942f86ac8915130c0d04409fd4dd00e6b3cd76e33df52c753fa4c528a"
        },
        "downloads": -1,
        "filename": "aindapy-0.0.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b0a84527a12a166e3c028a61ca11f20",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 9124,
        "upload_time": "2021-06-18T17:18:05",
        "upload_time_iso_8601": "2021-06-18T17:18:05.176573Z",
        "url": "https://files.pythonhosted.org/packages/3e/9f/b2c9820f0e28a20b955476d3ab3686bad3220fd14698b3502cf1f2c8c478/aindapy-0.0.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e9fb2c9820f0e28a20b955476d3ab3686bad3220fd14698b3502cf1f2c8c478",
        "md5": "1b0a84527a12a166e3c028a61ca11f20",
        "sha256": "b502296942f86ac8915130c0d04409fd4dd00e6b3cd76e33df52c753fa4c528a"
      },
      "downloads": -1,
      "filename": "aindapy-0.0.14-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b0a84527a12a166e3c028a61ca11f20",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 9124,
      "upload_time": "2021-06-18T17:18:05",
      "upload_time_iso_8601": "2021-06-18T17:18:05.176573Z",
      "url": "https://files.pythonhosted.org/packages/3e/9f/b2c9820f0e28a20b955476d3ab3686bad3220fd14698b3502cf1f2c8c478/aindapy-0.0.14-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}