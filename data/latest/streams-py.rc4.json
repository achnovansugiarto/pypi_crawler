{
  "info": {
    "author": "Stefan Garlonta",
    "author_email": "stefan@pickwicksoft.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python Stream API\n\n[![DeepSource](https://deepsource.io/gh/PickwickSoft/pystreamapi.svg/?label=active+issues&show_trend=true&token=7lV9pH1U-N1oId03M-XKZL5B)](https://deepsource.io/gh/PickwickSoft/pystreamapi/?ref=repository-badge)\n[![Tests](https://github.com/PickwickSoft/pystreamapi/actions/workflows/unittests.yml/badge.svg)](https://github.com/PickwickSoft/pystreamapi/actions/workflows/unittests.yml)\n[![Pylint](https://github.com/PickwickSoft/pystreamapi/actions/workflows/pylint.yml/badge.svg)](https://github.com/PickwickSoft/pystreamapi/actions/workflows/pylint.yml)\n\nPyStreamAPI is a stream library for Python inspired by the Java Stream API and implements almost exact the same method names and functionality as Java Stream API!\n\nPyStreamAPI uses lazy execution and offers sequential as well as parallel streams.\n\n***Now you might think: Why another library? There are so many!***\n\nHere are a few of the advantages this implementation has:\n\n- Sequential as well as parallel version\n\n- Lazy execution\n\n- High speed\n\n- 100% test coverage\n\n- Pythonic implementation\n\n- Clean and easy to read code\n\n**Here a small example:**\n\n```python\nfrom pystreamapi import Stream\n\nStream.parallel_of([\" \", '3', None, \"2\", 1, \"\"]) \\\n    .filter(lambda x: x is not None) \\\n    .map(str) \\\n    .map(lambda x: x.strip()) \\\n    .filter(lambda x: len(x) > 0) \\\n    .map(int) \\\n    .sorted() \\\n    .for_each(print) # Output: 1 2 3\n```\n\nThe same code in Java:\n\n```java\nObject[] words = { \" \", '3', null, \"2\", 1, \"\" };\nArrays.stream( words )\n      .filter( Objects::nonNull )\n      .map( Objects::toString )\n      .map( String::trim )\n      .filter( s -> ! s.isEmpty() )\n      .map( Integer::parseInt )\n      .sorted()\n      .forEach( System.out::println );  // Output: 1 2 3\n```\n\n## What is a Stream?\n\nA stream is a pipeline, in which elements from an Iterable are computed on demand.\nIt is similar to SQL queries and is used to manipulate data. \n\nE.g. Get the second-highest salary of Employee\n\n```sql\nSelect distinct Salary from Employee e1 \nwhere 2=Select count(distinct Salary) \nfrom Employee e2 where e1.salary<=e2.salary;\n```\n\nNow the same thing in Python\n\n```python\nemployees = [...] # A list with employee objects\nStream.of(employees) \\\n    .map(lambda x: x.salary) \\\n    .sorted() \\\n    .reversed() \\\n    .to_list()[1] # Returns the second-highest salary\n```\n\n`pystreamapi.Stream` represents a stream on which one or more operations can be performed. Stream operations are either intermediate or terminal.\n\nThe terminal operations return a result of a specific type, and intermediate operations return the stream itself, so we can chain multiple methods together to perform the operation in multiple steps.\n\n*Again the example from above:*\n\n```python\nStream.of(employees) \\ # Create a BaseStream object\n    .map(lambda x: x.salary) \\ # Intermediate Operation\n    .sorted() \\ # Intermediate Operation\n    .reversed() \\ # Intermediate Operation\n    .to_list()[1] # Terminal Operation\n```\n\nOperations can be performed on a stream in parallel or sequentially. When parallel, it is called parallel stream else it is a sequential stream.\n\nBased on the above points, a stream is:\n\n- Not a data structure\n- Not offering indexed access\n- Designed for lambdas\n- Easy to aggregate as lists or tuples/sets\n- Parallelizable\n- Processing lazy\n\n## Get started: Installation\n\nTo start using PyStreamAPI just install the module with this command:\n\n```bash\npip install streams.py  \n```\n\nAfterwards you can import it with:\n\n```python\nfrom pystreamapi import Stream\n```\n\n:tada: PyStreamAPI is now ready to process your data\n\n## Build a new Stream\n\nThere are a few factory methods that create new Streams.\n\n```python\nStream.of([1, 2, 3]) # Can return a sequential or a parallel stream\n```\n\nUsing the `of()` method will let the implementation decide which `Stream` to use.\n\n> **Note** \n> \n> Currently, it returns always a `SequentialStream`\n\n---\n\n```python\nStream.parallel_of([1, 2, 3]) # Returns a parallel stream\n```\n\n---\n\n```python\nStream.sequential_of([1, 2, 3]) # Returns a sequential stream\n```\n\n---\n\n```python\nStream.of_noneable([1, 2, 3]) # Can return a sequential or a parallel stream\n```\n\nIf the source is `None`, you get an empty `Stream`\n\n---\n\n```python\nStream.iterate(0, lambda n: n + 2)\n```\n\nCreates a Stream of an infinite Iterator like 0, 2, 4, 6, 8, 10, 12, 14...\n\n> **Note**\n> Do not forget to limit the stream with `.limit()`\n\n---\n\n```python\nStream.concat(Stream.of([1, 2]), Stream.of([3, 4])) \n# Like Stream.of([1, 2, 3, 4])\n```\n\nCreates a new Stream from multiple Streams. Order doesn't change\n\n## API Documentation\n\n### Intermediate Operations\n\n#### `filter()` : Restrict the Stream\n\nReturns a stream consisting of the elements of this stream that match the given predicate.\n\n```python\nStream.of([1, 2, 3, None]) \\\n    .filter(lambda x: x is not None) \\\n    .for_each(print) # 1 2 3\n```\n\n#### `map()` : Convert the elements in the Stream\n\nReturns a stream consisting of the results of applying the given function to the elements of this stream.\n\n```python\nStream.of([1, \"2\", 3.0, None]) \\\n    .map(str) \\\n    .to_list() # [\"1\", \"2\", \"3.0\", \"None\"]\n```\n\n#### `map_to_int()` : Convert the elements in the Stream to an Integer\n\nReturns a stream consisting of the results of applying the `int()` function to the elements of this stream. Note that this method is not none safe.\n\n```python\nStream.of([1, \"2\", 3.0]) \\\n    .map_to_int() \\\n    .to_list() # [1, 2, 3]\n```\n\n#### `map_to_str()` : Convert the elements in the Stream to a String\n\nReturns a stream consisting of the results of applying the `str()` function to the elements of this stream.\n\n```python\nStream.of([1, 2, 3]) \\\n    .map_to_str() \\\n    .to_list() # [\"1\", \"2\", \"3\"]\n```\n\n#### `flat_map()` : Streams in Streams\n\nReturns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.\n\n```python\nStream.of([1, 2, 3]) \\\n    .flat_map(lambda x: self.stream([x, x])) \\\n    .to_list() # [1, 1, 2, 2, 3, 3]\n```\n\n#### `distinct()` : Remove duplicates\n\nReturns a stream consisting of the distinct elements of this stream.\n\n```python\nStream.of([1, 1, 2, 3]) \\\n    .distinct() \\\n    .to_list() # [1, 2, 3]\n```\n\n#### `sorted()` : Sort Stream\n\nReturns a stream consisting of the elements of this stream, sorted according to natural order or comparator.\n\n```python\nStream.of([2, 9, 1])\n    .sorted()\n    .to_list()  # [1, 2, 9]\n```\n\nHere is an example with a custom comparator:\n\n```python\nStream.of([\"a\", \"cc\", \"bbb\"])\n    .sorted(lambda x, y: len(y) - len(x))\n    .to_list()  # ['bbb', 'cc', 'a']\n```\n\n#### `reversed()` : Reverse Stream\n\nReturns a stream consisting of the elements of this stream in reverse order.\n\n```python\nStream.of([1, 2, 3])\n    .reversed()\n    .to_list()  # [3, 2, 1]\n```\n\n#### `peek()` : View intermediate results\n\nReturns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream.\n\n```python\nStream.of([2, 1, 3]) \\\n    .sorted() \\\n    .peek(print) \\ # 1, 2, 3\n    .reversed() \\\n    .for_each(print) # 3, 2, 1\n```\n\n#### `limit()` : Limit the Stream to a certain number of elements\n\nReturns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length.\n\n```python\nStream.of([1, 2, 3]) \\\n    .limit(2) \\\n    .to_list() # [1, 2]\n```\n\n#### `skip()` : Skip the first n elements of the Stream\n\nReturns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream.\n\n```python\nStream.of([1, 2, 3]) \\\n    .skip(2) \\\n    .to_list() # [3]\n```\n\n#### `take_while()` : Take elements while the predicate is true\n\nReturns, if this stream is ordered, a stream consisting of the longest prefix of elements taken from this stream that match the given predicate.\n\n```python\nStream.of([1, 2, 3]) \\\n    .take_while(lambda x: x < 3) \\\n    .to_list() # [1, 2]\n```\n\n#### `drop_while()` : Drop elements while the predicate is true\n\nReturns, if this stream is ordered, a stream consisting of the remaining elements of this stream after dropping the longest prefix of elements that match the given predicate.\n\n```python\nStream.of([1, 2, 3]) \\\n    .drop_while(lambda x: x < 3) \\\n    .to_list() # [3]\n```\n\n### Terminal Operations\n\nThese operations will trigger the pipeline's execution\n\n#### `all_match()` : Check if all elements match a predicate\n\nReturns whether all elements of this stream match the provided predicate.\n\n```python\nStream.of([1, 2, 3]) \\\n    .all_match(lambda x: x > 0) # True\n```\n\n#### `any_match()` : Check if any element matches a predicate\n\nReturns whether any elements of this stream match the provided predicate.\n\n```python\nStream.of([1, 2, 3]) \\\n    .any_match(lambda x: x < 0) # False\n```\n\n#### `none_match()` : Check if no element matches a predicate\n\nReturns whether no elements of this stream match the provided predicate.\n\n```python\nStream.of([1, 2, 3]) \\\n    .none_match(lambda x: x < 0) # True\n```\n\n#### `count()` : Count the number of elements in the Stream\n\nReturns the number of elements in this stream.\n\n```python\nStream.of([1, 2, 3]) \\\n    .count() # 3\n```\n\n#### `min()` : Find the minimum element in the Stream\n\nReturns the minimum element of this stream\n\n```python\nStream.of([1, 2, 3]) \\\n    .min() # 1\n```\n\n#### `max()` : Find the maximum element in the Stream\n\nReturns the maximum element of this stream\n\n```python\nStream.of([1, 2, 3]) \\\n    .max() # 3\n```\n\n#### `reduce()` : Reduce the Stream to a single value\n\nReturns the result of reducing the elements of this stream to a single value using the provided reducer.\n\n```python\nStream.of([1, 2, 3]) \\\n    .reduce(lambda x, y: x + y) # 6\n```\n\n#### `for_each()` : Perform an action for each element in the Stream\n\nPerforms the provided action for each element of this stream.\n\n```python\nStream.of([1, 2, 3]) \\\n    .for_each(print) # 1 2 3\n```\n\n#### `to_list()` : Convert the Stream to a List\n\nReturns a list containing the elements of this stream.\n\n```python\nStream.of([1, 2, 3]) \\\n    .to_list() # [1, 2, 3]\n```\n\n#### `to_set()` : Convert the Stream to a Set\n\nReturns a set containing the elements of this stream.\n\n```python\nStream.of([1, 2, 3]) \\\n    .to_set() # {1, 2, 3}\n```\n\n#### `to_tuple()` : Convert the Stream to a Tuple\n\nReturns a tuple containing the elements of this stream.\n\n```python\nStream.of([1, 2, 3]) \\\n    .to_tuple() # (1, 2, 3)\n```\n\n#### `find_first()` : Find the first element in the Stream\n\nReturns an Optional describing the first element of this stream, or an empty Optional if the stream is empty.\n\n```python\nStream.of([1, 2, 3]) \\\n    .find_first() # Optional[1]\n```\n\n#### `find_any()` : Find an element in the Stream\n\nReturns an Optional describing an arbitrary element of this stream, or an empty Optional if the stream is empty.\n\n```python\nStream.of([1, 2, 3]) \\\n    .find_any() # Optional[1]\n```\n\n## Complex Examples\n\n#### Get all numbers from list of different types. Use parallelization.\n\n```python\nStream.parallel_of([\" \", '3', None, \"2\", 1, \"\"]) \\\n    .filter(lambda x: x is not None) \\\n    .map(str) \\\n    .map(lambda x: x.strip()) \\\n    .filter(lambda x: len(x) > 0) \\\n    .map(int) \\\n    .sorted()\\\n    .for_each(print) # 1 2 3\n```\n\n#### Generate a Stream of 10 Fibonacci numbers\n\n```python\ndef fib():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nStream.of(fib()) \\\n    .limit(10) \\\n    .for_each(print) # 0 1 1 2 3 5 8 13 21 34\n```\n\n## Performance\n\nNote that parallel Streams are not always faster than sequential Streams. Especially when the number of elements is small, we can expect sequential Streams to be faster.\n\n## Bug Reports\n\nBug reports can be submitted in GitHub's [issue tracker](https://github.com/PickwickSoft/pystreamapi/issues).\n\n## Contributing\n\nContributions are welcome! Please submit a pull request or open an issue.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PickwickSoft/pystreamapi",
    "keywords": "streams,parallel,data",
    "license": "GPL-3.0 license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "streams.py",
    "package_url": "https://pypi.org/project/streams.py/",
    "platform": null,
    "project_url": "https://pypi.org/project/streams.py/",
    "project_urls": {
      "Homepage": "https://github.com/PickwickSoft/pystreamapi"
    },
    "release_url": "https://pypi.org/project/streams.py/0.1.3/",
    "requires_dist": [
      "optional.py (>=1.3.2)",
      "joblib (~=1.2.0)",
      "parameterized (~=0.8.1) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A stream library for Python inspired by Java Stream API",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16009846,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "330a71e442f9c271af99639e6b57f44f08b580df59866160b242f52772e22521",
          "md5": "faaf69970be0f4438595fb7266e78fe5",
          "sha256": "0459ec73786f9e7101198e034acb9cfa6858c7fa38638b895998abb407c36769"
        },
        "downloads": -1,
        "filename": "streams.py-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "faaf69970be0f4438595fb7266e78fe5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28558,
        "upload_time": "2022-08-10T08:57:39",
        "upload_time_iso_8601": "2022-08-10T08:57:39.389184Z",
        "url": "https://files.pythonhosted.org/packages/33/0a/71e442f9c271af99639e6b57f44f08b580df59866160b242f52772e22521/streams.py-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e0f889c7e08f9a3381db0c542e9ccecdf3e88cf72262e7ed66b9dbf2f1d4057",
          "md5": "f17af325eeb8f5951f8ffb1258ae4fb9",
          "sha256": "0e45da78ee21d2fba5f925a0b06e5259960a25005a4a8dd13d147500d9c9a729"
        },
        "downloads": -1,
        "filename": "streams.py-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f17af325eeb8f5951f8ffb1258ae4fb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26900,
        "upload_time": "2022-08-10T08:57:41",
        "upload_time_iso_8601": "2022-08-10T08:57:41.074500Z",
        "url": "https://files.pythonhosted.org/packages/2e/0f/889c7e08f9a3381db0c542e9ccecdf3e88cf72262e7ed66b9dbf2f1d4057/streams.py-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b99e63d239b3d2955b06cdebdb3b9f95c5a84208d036c59d4cca9a82f7f83e66",
          "md5": "b428783522666bf30a4c40196727081f",
          "sha256": "58b79212278b39f1d3f3a2a4efef764b8a32c5135ab81316ece8b53c4485ad1a"
        },
        "downloads": -1,
        "filename": "streams.py-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b428783522666bf30a4c40196727081f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24517,
        "upload_time": "2022-08-10T11:58:20",
        "upload_time_iso_8601": "2022-08-10T11:58:20.514227Z",
        "url": "https://files.pythonhosted.org/packages/b9/9e/63d239b3d2955b06cdebdb3b9f95c5a84208d036c59d4cca9a82f7f83e66/streams.py-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ff76f8bc833a69f76e94040a7027fb7b92bb11eddcb12774561f26f2587bee2",
          "md5": "b43cdb875403e8d34b59a19ac4fc3a5e",
          "sha256": "014e0212ed0b576abb7a0c228e0072ec37684588ea4c27750e350f641a6ac270"
        },
        "downloads": -1,
        "filename": "streams.py-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b43cdb875403e8d34b59a19ac4fc3a5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24627,
        "upload_time": "2022-08-10T11:58:22",
        "upload_time_iso_8601": "2022-08-10T11:58:22.179078Z",
        "url": "https://files.pythonhosted.org/packages/4f/f7/6f8bc833a69f76e94040a7027fb7b92bb11eddcb12774561f26f2587bee2/streams.py-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "468fa9e080c731162839aaadb08393de911d560dbfe3f272851b66ae5829daff",
          "md5": "d5e1732a9bd8f4d97b994b2a3b83da0f",
          "sha256": "dc36047e8b19cbc6a120d6505bf109a3095b1ca9ef55c6878772fa03b16cd5f0"
        },
        "downloads": -1,
        "filename": "streams.py-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5e1732a9bd8f4d97b994b2a3b83da0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24600,
        "upload_time": "2022-08-11T12:11:10",
        "upload_time_iso_8601": "2022-08-11T12:11:10.521941Z",
        "url": "https://files.pythonhosted.org/packages/46/8f/a9e080c731162839aaadb08393de911d560dbfe3f272851b66ae5829daff/streams.py-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca8bf72572b3a1dcac7dd4f153ac59d72838c5c7fbaf9ba2f59eb95c60ad3405",
          "md5": "67435c72bcd64274d0b8a5b35d043b42",
          "sha256": "d69115cc24284daf42a96b0296fea9657c7bea20cb65a9dda2c56a59f70a034b"
        },
        "downloads": -1,
        "filename": "streams.py-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "67435c72bcd64274d0b8a5b35d043b42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24696,
        "upload_time": "2022-08-11T12:11:12",
        "upload_time_iso_8601": "2022-08-11T12:11:12.025947Z",
        "url": "https://files.pythonhosted.org/packages/ca/8b/f72572b3a1dcac7dd4f153ac59d72838c5c7fbaf9ba2f59eb95c60ad3405/streams.py-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a41104c9fc7a48ab0a129ed69abc28b1485f0d0bfaba4ace1e0adfd0798a7ea4",
          "md5": "b7e4674bc90487c494962a757f2ab138",
          "sha256": "edfe179d1347dceb28eb097955dfc6ad2be13c3f565fb76ffd1e6510115b6795"
        },
        "downloads": -1,
        "filename": "streams.py-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7e4674bc90487c494962a757f2ab138",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24663,
        "upload_time": "2022-12-06T16:07:42",
        "upload_time_iso_8601": "2022-12-06T16:07:42.939292Z",
        "url": "https://files.pythonhosted.org/packages/a4/11/04c9fc7a48ab0a129ed69abc28b1485f0d0bfaba4ace1e0adfd0798a7ea4/streams.py-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "150afe79231d3a79fdc689c759882eea66c91dcea2447953a7f7808fe60b5779",
          "md5": "2faa3c06039327681794fda5863a7473",
          "sha256": "607ef704ceb7a8d0debeeecc910870c7b9a4abeb79231b55d80e7da33e921c86"
        },
        "downloads": -1,
        "filename": "streams.py-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2faa3c06039327681794fda5863a7473",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24835,
        "upload_time": "2022-12-06T16:07:44",
        "upload_time_iso_8601": "2022-12-06T16:07:44.621855Z",
        "url": "https://files.pythonhosted.org/packages/15/0a/fe79231d3a79fdc689c759882eea66c91dcea2447953a7f7808fe60b5779/streams.py-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a41104c9fc7a48ab0a129ed69abc28b1485f0d0bfaba4ace1e0adfd0798a7ea4",
        "md5": "b7e4674bc90487c494962a757f2ab138",
        "sha256": "edfe179d1347dceb28eb097955dfc6ad2be13c3f565fb76ffd1e6510115b6795"
      },
      "downloads": -1,
      "filename": "streams.py-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b7e4674bc90487c494962a757f2ab138",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24663,
      "upload_time": "2022-12-06T16:07:42",
      "upload_time_iso_8601": "2022-12-06T16:07:42.939292Z",
      "url": "https://files.pythonhosted.org/packages/a4/11/04c9fc7a48ab0a129ed69abc28b1485f0d0bfaba4ace1e0adfd0798a7ea4/streams.py-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "150afe79231d3a79fdc689c759882eea66c91dcea2447953a7f7808fe60b5779",
        "md5": "2faa3c06039327681794fda5863a7473",
        "sha256": "607ef704ceb7a8d0debeeecc910870c7b9a4abeb79231b55d80e7da33e921c86"
      },
      "downloads": -1,
      "filename": "streams.py-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2faa3c06039327681794fda5863a7473",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24835,
      "upload_time": "2022-12-06T16:07:44",
      "upload_time_iso_8601": "2022-12-06T16:07:44.621855Z",
      "url": "https://files.pythonhosted.org/packages/15/0a/fe79231d3a79fdc689c759882eea66c91dcea2447953a7f7808fe60b5779/streams.py-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}