{
  "info": {
    "author": "Yukihiko Shinoda",
    "author_email": "yuk.hik.future@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Multimedia :: Graphics",
      "Topic :: System :: Archiving",
      "Topic :: System :: Archiving :: Backup",
      "Typing :: Typed"
    ],
    "description": "# Parallel Media Downloader\n\n[![Test](https://github.com/yukihiko-shinoda/parallel-media-downloader/workflows/Test/badge.svg)](https://github.com/yukihiko-shinoda/parallel-media-downloader/actions?query=workflow%3ATest)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/d8aa182721f860764d4d/test_coverage)](https://codeclimate.com/github/yukihiko-shinoda/parallel-media-downloader/test_coverage)\n[![Maintainability](https://api.codeclimate.com/v1/badges/d8aa182721f860764d4d/maintainability)](https://codeclimate.com/github/yukihiko-shinoda/parallel-media-downloader/maintainability)\n[![Code Climate technical debt](https://img.shields.io/codeclimate/tech-debt/yukihiko-shinoda/parallel-media-downloader)](https://codeclimate.com/github/yukihiko-shinoda/parallel-media-downloader)\n[![Updates](https://pyup.io/repos/github/yukihiko-shinoda/parallel-media-downloader/shield.svg)](https://pyup.io/repos/github/yukihiko-shinoda/parallel-media-downloader/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/parallelmediadownloader)](https://pypi.org/project/parallelmediadownloader/)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/parallelmediadownloader)](https://pypi.org/project/parallelmediadownloader/)\n[![Twitter URL](https://img.shields.io/twitter/url?style=social&url=https%3A%2F%2Fgithub.com%2Fyukihiko-shinoda%2Fparallel-media-downloader)](http://twitter.com/share?text=Parallel%20Media%20Downloader&url=https://pypi.org/project/parallelmediadownloader/&hashtags=python)\n\nHelps you to download media file in parallel without async / await syntax.\n\n## Feature\n\nThis project helps you to download media files in parallel without async / await syntax.\n\n## Installation\n\n```console\npip install parallelmediadownloader\n```\n\n## Usage\n\nMinimum example:\n\n```python\nfrom datetime import datetime\n\nfrom parallelmediadownloader.media_download_coroutine import DownloadOrder\nfrom parallelmediadownloader.media_file import SaveOrder\nfrom parallelmediadownloader.parallel_media_downloader import ParallelMediaDownloader\n\npath_directory_download = \"path/directory/download\"\ncreated_date_time = datetime.now()\nlist_download_order = [\n    DownloadOrder(\n        \"https://example.com/test01.png\",\n        SaveOrder(\n            path_directory_download,\n            \"test01.png\",\n            created_date_time,\n        ),\n    ),\n    DownloadOrder(\n        \"https://example.com/test02.png\",\n        SaveOrder(\n            path_directory_download,\n            \"test02.png\",\n            created_date_time,\n        ),\n    ),\n    DownloadOrder(\n        \"https://example.com/test03.png\",\n        SaveOrder(\n            path_directory_download,\n            \"test03.png\",\n            created_date_time,\n        ),\n    ),\n]\nlist_media_download_result = ParallelMediaDownloader.execute(list_download_order)\n```\n\n## API\n\n### ParallelMediaDownloader.execute\n\n```python\nclass ParallelMediaDownloader:\n    \"\"\"API of parallel media downloading.\"\"\"\n\n    @staticmethod\n    def execute(\n        list_download_order: Iterable[DownloadOrder],\n        *,\n        limit: int = 5,\n        media_filter: Optional[MediaFilter] = None,\n        allow_http_status: List[int] = None\n    ) -> List[MediaDownloadResult]:\n```\n\n#### list_download_order: Iterable[DownloadOrder]\n\nList of `DownloadOrder`. Method will download them in parallel.\n\n#### limit: int = 5\n\nLimit number of parallel processes.\n\n#### media_filter: Optional[MediaFilter] = None\n\nFilter extends `MediaFilter` to remove downloaded media file depending on file or content of media.\n`NotImageFilter` will be help to understand its roll:\n\n```python\nclass NotImageFilter(MediaFilter):\n    def _filter(self, media_file: MediaFile) -> bool:\n        return not str(media_file.path_file).lower().endswith((\".png\", \".jpg\", \".jpeg\", \".gif\"))\n```\n\n#### allow_http_status: List[int] = None\n\nBy default, ParallelMediaDownloader.execute will check HTTP status code by [Response.raise_for_status](https://requests.readthedocs.io/en/master/_modules/requests/models/#Response.raise_for_status) and whole process will stop.\nWhen HTTP status applies allow_http_status, process will continue.\nThen, `MediaDownloadResult.media_file` will be `None`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yukihiko-shinoda/parallel-media-downloader",
    "keywords": "parallel media download downloader image jpg jpeg png gif aiohttp",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parallelmediadownloader",
    "package_url": "https://pypi.org/project/parallelmediadownloader/",
    "platform": "",
    "project_url": "https://pypi.org/project/parallelmediadownloader/",
    "project_urls": {
      "Homepage": "https://github.com/yukihiko-shinoda/parallel-media-downloader"
    },
    "release_url": "https://pypi.org/project/parallelmediadownloader/0.1.0/",
    "requires_dist": [
      "aiohttp"
    ],
    "requires_python": ">=3.7",
    "summary": "This project helps you to download media file.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7978868,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6d2080725b19a7e14cf0615cdfaaaa6f39a181d12c2acba109665b899222309",
          "md5": "bf5c1d6e3be7fe380b3209ebb1f168e5",
          "sha256": "154dc9f0ccbeb75794874d2224bc0a26218ecb4ca7885e75d2799e3a2afeb40c"
        },
        "downloads": -1,
        "filename": "parallelmediadownloader-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf5c1d6e3be7fe380b3209ebb1f168e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5891,
        "upload_time": "2019-08-13T14:03:48",
        "upload_time_iso_8601": "2019-08-13T14:03:48.703360Z",
        "url": "https://files.pythonhosted.org/packages/b6/d2/080725b19a7e14cf0615cdfaaaa6f39a181d12c2acba109665b899222309/parallelmediadownloader-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22f570aec0556e2c4604a99178b982acecdf10ff23c2b1ec2db38ccc11107396",
          "md5": "1ea920ed89ad4a6c00baab006b7da7c3",
          "sha256": "831b584d82c8166a0baf00a791269f34c8db5ced464e31b26895f3cf44232d16"
        },
        "downloads": -1,
        "filename": "parallelmediadownloader-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ea920ed89ad4a6c00baab006b7da7c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3058,
        "upload_time": "2019-08-13T14:03:51",
        "upload_time_iso_8601": "2019-08-13T14:03:51.017646Z",
        "url": "https://files.pythonhosted.org/packages/22/f5/70aec0556e2c4604a99178b982acecdf10ff23c2b1ec2db38ccc11107396/parallelmediadownloader-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50d04bd29bc713fd2d18e60668114ac9b7b4e00bca5eb608f7bed01511359afa",
          "md5": "61c5533792ac1eb5be1e81492335d2a9",
          "sha256": "8476af79645dd18db002983579db6ac18a897ba4a4f3ade249140481db5c265f"
        },
        "downloads": -1,
        "filename": "parallelmediadownloader-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61c5533792ac1eb5be1e81492335d2a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6109,
        "upload_time": "2019-11-05T06:14:32",
        "upload_time_iso_8601": "2019-11-05T06:14:32.063334Z",
        "url": "https://files.pythonhosted.org/packages/50/d0/4bd29bc713fd2d18e60668114ac9b7b4e00bca5eb608f7bed01511359afa/parallelmediadownloader-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e428c1a861867cd0e4c1fb568f7cebcc63b64913aaf091b1f76f0fdfdb9fd16f",
          "md5": "3d8b95ded3789724a416098298050068",
          "sha256": "5a262a296467f8833827b7f7f76072cc08e21839b2503f909a4d0a6c238e1ae6"
        },
        "downloads": -1,
        "filename": "parallelmediadownloader-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3d8b95ded3789724a416098298050068",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3586,
        "upload_time": "2019-11-05T06:14:33",
        "upload_time_iso_8601": "2019-11-05T06:14:33.703955Z",
        "url": "https://files.pythonhosted.org/packages/e4/28/c1a861867cd0e4c1fb568f7cebcc63b64913aaf091b1f76f0fdfdb9fd16f/parallelmediadownloader-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "241923fff3b682bf796a869bfb18b3f09ee879425778a3b2655718fd6d41133c",
          "md5": "5086fb72f165234c522b2d15b16a3ffe",
          "sha256": "4290bebd6930346f7663602165bd2fecb8719ded54207134a48fcc6921c3a660"
        },
        "downloads": -1,
        "filename": "parallelmediadownloader-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5086fb72f165234c522b2d15b16a3ffe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14654,
        "upload_time": "2020-08-17T11:44:52",
        "upload_time_iso_8601": "2020-08-17T11:44:52.046992Z",
        "url": "https://files.pythonhosted.org/packages/24/19/23fff3b682bf796a869bfb18b3f09ee879425778a3b2655718fd6d41133c/parallelmediadownloader-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eae3c2c7084b3e6cfe21b55ecfdea40e0d587c8e8cd28032b0229f4c36c724c1",
          "md5": "fa0943684a1b02e51e4a4ddebd06e65f",
          "sha256": "14556e824c7700cc003aae0e4be524e74fb10503dc3ed6edc96eacfb0a39ad23"
        },
        "downloads": -1,
        "filename": "parallelmediadownloader-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fa0943684a1b02e51e4a4ddebd06e65f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11309,
        "upload_time": "2020-08-17T11:44:53",
        "upload_time_iso_8601": "2020-08-17T11:44:53.037852Z",
        "url": "https://files.pythonhosted.org/packages/ea/e3/c2c7084b3e6cfe21b55ecfdea40e0d587c8e8cd28032b0229f4c36c724c1/parallelmediadownloader-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "241923fff3b682bf796a869bfb18b3f09ee879425778a3b2655718fd6d41133c",
        "md5": "5086fb72f165234c522b2d15b16a3ffe",
        "sha256": "4290bebd6930346f7663602165bd2fecb8719ded54207134a48fcc6921c3a660"
      },
      "downloads": -1,
      "filename": "parallelmediadownloader-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5086fb72f165234c522b2d15b16a3ffe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 14654,
      "upload_time": "2020-08-17T11:44:52",
      "upload_time_iso_8601": "2020-08-17T11:44:52.046992Z",
      "url": "https://files.pythonhosted.org/packages/24/19/23fff3b682bf796a869bfb18b3f09ee879425778a3b2655718fd6d41133c/parallelmediadownloader-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eae3c2c7084b3e6cfe21b55ecfdea40e0d587c8e8cd28032b0229f4c36c724c1",
        "md5": "fa0943684a1b02e51e4a4ddebd06e65f",
        "sha256": "14556e824c7700cc003aae0e4be524e74fb10503dc3ed6edc96eacfb0a39ad23"
      },
      "downloads": -1,
      "filename": "parallelmediadownloader-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fa0943684a1b02e51e4a4ddebd06e65f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11309,
      "upload_time": "2020-08-17T11:44:53",
      "upload_time_iso_8601": "2020-08-17T11:44:53.037852Z",
      "url": "https://files.pythonhosted.org/packages/ea/e3/c2c7084b3e6cfe21b55ecfdea40e0d587c8e8cd28032b0229f4c36c724c1/parallelmediadownloader-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}