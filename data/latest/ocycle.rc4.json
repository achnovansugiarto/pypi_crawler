{
  "info": {
    "author": "Bea Steers",
    "author_email": "bea.steers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ocycle\nStream buffering and event triggering for unbalanced frame sizes. Data goes in with a certain frame size and comes out with a different size.\n\nIt supports:\n - **threaded/multiprocessing callbacks** (in addition to serial execution)\n    - a process/thread pool is created that callbacks are sent to.\n - **always available, recycled buffers**\n    - when a buffer is passed to an asynchronous callback, a new one is created to be written to while the other is being used.\n    - once the callback function is done, it is added back to the stack, ready to be reused.\n - **temporal sampling** - you can pass a function or scalar which will define how long to wait to start writing again after emitting a callback.\n    - So for example, if you wanted 50% coverage, you could pass `sampler=size / fs` which will wait for `size / fs` seconds before writing again.\n\n## Example\n\n```python\nimport ocycle\n\n# this is some random data that represents our\n# incoming data buffer\nSOME_DATA = 'asdfghjkl;'\n\n# how full should the buffer be before emitting data\nCONSUME_SIZE = 29\n\n# a data consumer\ndef create_consumer(size):\n    # this is called when the buffer reaches/exceeds size.\n    def callback(value, t0):\n        assert len(value) >= CONSUME_SIZE\n        print('Emitting:', t0, value)\n\n    return ocycle.BufferEmit(callback, size)\n\nbuff = create_consumer(CONSUME_SIZE)\n\n# a generator then writes to the buffer.\n# once it is full enough it will call `callback(buff, t0)`\nwhile True:\n    print('Writing to buffer:', SOME_DATA)\n    buff.write(SOME_DATA)\n```\n\n## Example Use Case\n### Audio Processing\nYou want to stream audio from a microphone and perform multiple independent tasks on that stream. Each of these feature extractors have a different audio chunk size required.\n\nSay you want to:\n - extract SPL (every 0.5s)\n - write encrypted flac files (every 10s)\n - run a tensorflow model (every 2s)\n\nInstead of collecting the data with a single chunk size and then manually tracking and spawning a new process every time each individual buffer fills up, `BufferEmit` will handle all of that for you.\n\n## Usage\n\n### Callback\n\nYou need to pass in a callback function, `callback`, which will be called once the buffer exceeds size `size`. This will receive the filled buffer and the\ntimestamp of when the first buffer frame arrived.\n\nYou can also pass an additional callback `on_done` which will be called back on the main process and is useful if you need to store a result from the callback on some object in memory.\n\n### Execution Method\n\nYou can choose how your callback is executed:\n - `mode='serial'`: the callback will be run in the executing thread/process\n - `mode='thread'`: the callback will be run in a new thread\n - `mode='process'`: the callback will be run in a new process\n\nYou can pass e.g. `npool=10` to use a 10 thread/process worker pool.\n\n### Value Type\n##### Value Type\nBy default, the callback will receive a `bytes` and timestamp object. If you pass `asbuffer=True`, it will\npass `io.BytesIO` without calling `buff.getvalue()`.\n\n##### Clipping\nBy default, the callback will receive the entire buffer after the buffer has exceeded `size`. This is useful if you don't want to clip partial messages, but this also means that `len(buff) >= size`. If you pass `clip=True`, it will return buff in exact chunks of size `size`.\n\n### Sampler\n\nIn some cases, you may not want all of the data and you just want to take some subsample over time.\n\nFor example, say your machine learning model is not quite real time. You've tried really hard, but you can only get it down to 1.7x. You can define a sampler which will say after you emit a buffer, wait `x` seconds before you start writing to the buffer again. So you could set `sampler=1.0` and it will pause for 1 second before it begins writing to the buffer again.\n\nA sampler can also be any callable that needs no arguments and returns an int/float. This is useful if you want to implement stochastic/dynamic sampling strategies. For example, you could set:\n\n `sampler=lambda: (np.random.randn() * 1.3 + 4)`\n\nwhich will delay using a normal distribution of mean 4 and std dev of 1.3.\n\n\n## Configuration Examples\nThis shows more of the different configurations that `BufferEmit` can exist as.\n\nTODO: it would be more illustrative with different buffer sizes.... idk what I was thinking lol\n\n```python\nimport time\nimport ocycle\n\n# build a list of receivers\n\nbuffers = []\nSIZE = 15\n\ndef on_emit(label): # callback\n    return lambda buff, t0: print(\n        label, buff.getvalue(), t0)\n\n# default operation\nbuffers.append(ocycle.BufferEmit(\n    on_emit('default'), size=SIZE))\n\n# execute the callback in a thread\nbuffers.append(ocycle.BufferEmit(\n    on_emit('im in a thread!'),\n    size=SIZE, mode='thread'))\n\n# the callback for multiprocessing must be pickleable\ndef on_process_emit(buff, t0): # callback\n    x = buff.getvalue()\n    print('Im in a process!', x, t0)\n    return x[::-1]\n\n# execute the callback in a separate process\n# execute `on_done` in the main process\nbuffers.append(ocycle.BufferEmit(\n    on_process_emit,\n    on_done=lambda res:\n        print('The process returned:', res),\n    size=SIZE, mode='process'))\n\n# send data to each receiver\n\ndef generate_data(length=4, n=1):\n    for _ in range(n):\n        for i in range(10):\n            yield str(i).encode('utf-8') * length\n\nfor x in generate_data(4):\n    print('writing', x)\n    for b in buffers:\n        b.write(x)\n    time.sleep(1)\n```\n\nOutputs:\n```\nwriting b'0000'\nwriting b'1111'\nwriting b'2222'\nwriting b'3333'\ndefault b'0000111122223333' 1585253921.2961438\nim in a thread! b'0000111122223333' 1585253921.296198\ngets value, not buffer object b'0000111122223333' 1585253921.2967098\nvalue clipped to size b'000011112222333' 1585253921.296758\nIm in a process! b'0000111122223333' 1585253921.296656\nThe process returned: b'3333222211110000'\nwriting b'4444'\nwriting b'5555'\nwriting b'6666'\nwriting b'7777'\ndefault b'4444555566667777' 1585253924.3013031\nim in a thread! b'4444555566667777' 1585253924.3013911\ngets value, not buffer object b'4444555566667777' 1585253924.3263922\nvalue clipped to size b'344445555666677' 1585253924.326594\nIm in a process! b'4444555566667777' 1585253924.301939\nThe process returned: b'7777666655554444'\nwriting b'8888'\nwriting b'9999'\nwriting b'0000'\nwriting b'1111'\ndefault b'8888999900001111' 1585253928.3309472\nim in a thread! b'8888999900001111' 1585253928.331071\ngets value, not buffer object b'8888999900001111' 1585253928.3323038\nvalue clipped to size b'778888999900001' 1585253928.33305\nIm in a process! b'8888999900001111' 1585253928.332133\nThe process returned: b'1111000099998888'\nwriting b'2222'\nwriting b'3333'\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/beasteers/ocycle",
    "keywords": "buffer callback io bytes bytesio unequal uneven frame size thread multiprocessing",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ocycle",
    "package_url": "https://pypi.org/project/ocycle/",
    "platform": "",
    "project_url": "https://pypi.org/project/ocycle/",
    "project_urls": {
      "Homepage": "https://github.com/beasteers/ocycle"
    },
    "release_url": "https://pypi.org/project/ocycle/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Stream buffering and event triggering for unbalanced frame sizes.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7244987,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6edc98423a477b8a115ba3dd6da1a67d7eb72a6bf6d5ff8eccc686eaf14e9c24",
          "md5": "b291a57caa2003ed31efeb18527f5485",
          "sha256": "a5e2b70bf8557500ab54a4bc44212c64a2131c2cd9716991421356f2f856e144"
        },
        "downloads": -1,
        "filename": "ocycle-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b291a57caa2003ed31efeb18527f5485",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3962,
        "upload_time": "2020-03-26T12:38:48",
        "upload_time_iso_8601": "2020-03-26T12:38:48.481123Z",
        "url": "https://files.pythonhosted.org/packages/6e/dc/98423a477b8a115ba3dd6da1a67d7eb72a6bf6d5ff8eccc686eaf14e9c24/ocycle-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "475456827261c8fcba06d8455a53ccb83be89ceb63a29e8d92d129a52050b3cf",
          "md5": "38bc7d80d7b107633b0fa66dad1eddd0",
          "sha256": "d3a9b9c9833811acd6328ce31dd57def46b166061aedb9c042f77b90426e307d"
        },
        "downloads": -1,
        "filename": "ocycle-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "38bc7d80d7b107633b0fa66dad1eddd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8394,
        "upload_time": "2020-04-08T21:34:57",
        "upload_time_iso_8601": "2020-04-08T21:34:57.130805Z",
        "url": "https://files.pythonhosted.org/packages/47/54/56827261c8fcba06d8455a53ccb83be89ceb63a29e8d92d129a52050b3cf/ocycle-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d78a5b59fcf0e83a9a273180f14b61765bd1e07227c9a9c5cd36342571d59019",
          "md5": "b52bd74ead51d6922a04b44ed9950ab5",
          "sha256": "2331759a92978458dc322249bdde76ed9019fcef269cc94ad60832c8fa7e661b"
        },
        "downloads": -1,
        "filename": "ocycle-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b52bd74ead51d6922a04b44ed9950ab5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6901,
        "upload_time": "2020-04-18T00:40:07",
        "upload_time_iso_8601": "2020-04-18T00:40:07.634592Z",
        "url": "https://files.pythonhosted.org/packages/d7/8a/5b59fcf0e83a9a273180f14b61765bd1e07227c9a9c5cd36342571d59019/ocycle-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1bd11e642cdcf0a85792ea1262f5fca373e3295b6afc57b71cbd1644358b932",
          "md5": "0f1a3fb1cd06504ffbb2389c1e483dbf",
          "sha256": "a7d9b5712f2b3f67934ce15b8409d23aef4e513b26e55844d3a5eaa106c659f3"
        },
        "downloads": -1,
        "filename": "ocycle-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0f1a3fb1cd06504ffbb2389c1e483dbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8924,
        "upload_time": "2020-05-15T00:48:09",
        "upload_time_iso_8601": "2020-05-15T00:48:09.607638Z",
        "url": "https://files.pythonhosted.org/packages/c1/bd/11e642cdcf0a85792ea1262f5fca373e3295b6afc57b71cbd1644358b932/ocycle-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1bd11e642cdcf0a85792ea1262f5fca373e3295b6afc57b71cbd1644358b932",
        "md5": "0f1a3fb1cd06504ffbb2389c1e483dbf",
        "sha256": "a7d9b5712f2b3f67934ce15b8409d23aef4e513b26e55844d3a5eaa106c659f3"
      },
      "downloads": -1,
      "filename": "ocycle-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0f1a3fb1cd06504ffbb2389c1e483dbf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8924,
      "upload_time": "2020-05-15T00:48:09",
      "upload_time_iso_8601": "2020-05-15T00:48:09.607638Z",
      "url": "https://files.pythonhosted.org/packages/c1/bd/11e642cdcf0a85792ea1262f5fca373e3295b6afc57b71cbd1644358b932/ocycle-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}