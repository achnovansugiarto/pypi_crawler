{
  "info": {
    "author": "Bill Rao",
    "author_email": "billrao@me.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# flask-boiler\n\n[![Build Status](https://travis-ci.com/billyrrr/flask-boiler.svg?branch=master)](https://travis-ci.com/billyrrr/flask-boiler)\n[![Coverage Status](https://coveralls.io/repos/github/billyrrr/flask-boiler/badge.svg?branch=master)](https://coveralls.io/github/billyrrr/flask-boiler?branch=master)\n[![Documentation Status](https://readthedocs.org/projects/flask-boiler/badge/?version=latest)](https://flask-boiler.readthedocs.io/en/latest/?badge=latest)\n\n\"boiler\": **B**ackend-**O**riginated **I**nstantly-**L**oaded **E**ntity **R**epository \n\nNOTE: \nThis package is not profiled or checked for memory usage. It is \nrecommended that you use Kubernetes to increase fault tolerance. \n\nFlask-boiler manages your application state with Firestore. \nYou can create view models that aggregates underlying data \nsources and store them immediately and permanently in Firestore. \nAs a result, your front end development will be as easy as \nusing Firestore. Flask-boiler is comparable to Spring Web Reactive. \n\nDemo: \n\nWhen you change the attendance status of one of the participants \nin the meeting, all other participants receive an updated version \nof the list of people attending the meeting. \n\n![Untitled_2](https://user-images.githubusercontent.com/24789156/71137341-be0e1000-2242-11ea-98cb-53ad237cac43.gif)\n\nSome reasons that you may want to use this framework or architectual\npractice:\n- You want to build a reactive system and not just a reactive view. \n- You want to build a scalable app that is native to distributed \n    systems. \n- You want a framework with a higher level of abstraction, so you can \n    exchange components such as transportation protocols \n- You want your code to be readable and clear and written mostly \n    in python, while maintaining compatibility to different APIs. \n- You have constantly-shifting requirements, and want to have \n    the flexibility to migrate different layers, for example, \n    switch from REST API to WebSocket to serve a resource. \n\nThis framework is at ***beta testing stage***. \nAPI is not guaranteed and ***may*** change. \n\nDocumentations: [readthedocs](https://flask-boiler.readthedocs.io/)\n\nQuickstart: [Quickstart](https://flask-boiler.readthedocs.io/en/latest/quickstart_link.html)\n\nAPI Documentations: [API Docs](https://flask-boiler.readthedocs.io/en/latest/apidoc/flask_boiler.html)\n\nExample of a Project using flask-boiler: [gravitate-backend](https://github.com/billyrrr/gravitate-backend)\n\n[Related Technologies](https://medium.baqend.com/real-time-databases-explained-why-meteor-rethinkdb-parse-and-firebase-dont-scale-822ff87d2f87)\n\n## Ideal Usage\n\nboiler will compile your python code into flink jobs, web servers, \nand more to be run on a kubernetes engine (not currently implemented).  \n\n![Ideal Usage](docs/distributed.png)\n\n## Connectors supported \n\nImplemented: \n- REST API (Flask and Flasgger)\n- GraphQL (Starlette)\n- Firestore\n- Firebase Functions\n- JsonRPC (flask-jsonrpc)\n- Leancloud Engine\n- WebSocket (flask socketio)\n\nTo be supported: \n- Flink Table API\n- Kafka\n\n## Design Pattern  \nflask-boiler abstracts to MVVM (Model-View-ViewModel), where, \n1. Model consists of a transactional database or datastore, and \nlives in back end. \n2. ViewModel consists of a distributed state consists of Model and \n    aggregator. It is the main part of boiler. For client-read, \n    it receives the streams coming in from the Model layer, and \n    output them as a View to the View layer. For client-write, \n    it receives the change streams from View \n    layer, and operate on Model layer to persist the change. \n    ViewModel lives in the back end, and may be operated as \n    boiler python code, or compiled as flink jobs in the case of \n    big data application (to be implemented). \n3. View is the presentational layer for the back end. It serves \n    1NF normalized data that are readable to the front end \n    without further aggregation. Client reads and writes to View. \n    View should be ephemeral, and can be rebuilt from ViewModel.  \n    View may be a remote system, eg. firestore or leancloud. \n\n## Installation\nIn your project directory, \n\n```\npip install flask-boiler\n```\n\nSee more in [Quickstart](https://flask-boiler.readthedocs.io/en/latest/quickstart_link.html). \n\n<!--## Usage-->\n\n<!--### Business Properties Binding-->\n<!--You can bind a view model to its business properties (underlying domain model).-->\n<!--See `examples/binding_example.py`. (Currently breaking)-->\n\n<!--```python-->\n\n<!--vm: Luggages = Luggages.new(vm_ref)-->\n\n<!--vm.bind_to(key=id_a, obj_type=\"LuggageItem\", doc_id=id_a)-->\n<!--vm.bind_to(key=id_b, obj_type=\"LuggageItem\", doc_id=id_b)-->\n<!--vm.register_listener()-->\n\n<!--```-->\n\n### State Management\n\nYou can combine information gathered in domain models and serve them in Firestore, so \nthat front end can read all data required from a single document or collection, \nwithout client-side queries and excessive server roundtrip time. \n\nThere is a medium [article](https://medium.com/resolvejs/resolve-redux-backend-ebcfc79bbbea) \n that explains a similar architecture called \"reSolve\" architecture. \n\nSee ```examples/meeting_room/view_models``` on how to use flask-boiler \nto expose a \"view model\" in firestore that can be queried directly \nby front end without aggregation.  \n\n### Processor Modes\n\n`flask-boiler` is essentially a framework for source-sink operations: \n\n```\nSource(s) -> Processor -> Sink(s)\n```\n\nTake query as an example,  \n\n- Boiler\n- NoSQL\n- Flink\n    - staticmethods: converts to UDF\n    - classmethods: converts to operators and aggregator's \n    \n\n### Declare View Model\n\n```python\nclass CityView(ViewModel):\n\n    name = attrs.bproperty()\n    country = attrs.bproperty()\n\n    @classmethod\n    def new(cls, snapshot):\n        store = CityStore()\n        store.add_snapshot(\"city\", dm_cls=City, snapshot=snapshot)\n        store.refresh()\n        return cls(store=store)\n\n    @name.getter\n    def name(self):\n        return self.store.city.city_name\n\n    @country.getter\n    def country(self):\n        return self.store.city.country\n\n    @property\n    def doc_ref(self):\n        return CTX.db.document(f\"cityView/{self.store.city.doc_id}\")\n```\n\n### Document View\n\n``` python\n\nclass MeetingSessionGet(Mediator):\n\n    from flask_boiler import source, sink\n\n    source = source.domain_model(Meeting)\n    sink = sink.firestore()  # TODO: check variable resolution order\n\n    @source.triggers.on_update\n    @source.triggers.on_create\n    def materialize_meeting_session(self, obj):\n        meeting = obj\n        assert isinstance(meeting, Meeting)\n\n        def notify(obj):\n            for ref in obj._view_refs:\n                self.sink.emit(reference=ref, snapshot=obj.to_snapshot())\n\n        _ = MeetingSession.get(\n            doc_id=meeting.doc_id,\n            once=False,\n            f_notify=notify\n        )\n        # mediator.notify(obj=obj)\n\n    @classmethod\n    def start(cls):\n        cls.source.start()\n\n```\n\n### WebSocket View \n\n```python\n\nclass Demo(WsMediator):\n    pass\n\nmediator = Demo(view_model_cls=rainbow_vm,\n                mutation_cls=None,\n                namespace=\"/palette\")\n\nio = flask_socketio.SocketIO(app=app)\n\nio.on_namespace(mediator)\n\n```\n\n### Create Flask View\nYou can use a RestMediator to create a REST API. OpenAPI3 docs will be \nautomatically generated in ```<site_url>/apidocs``` when you run ```_ = Swagger(app)```. \n\n```python\napp = Flask(__name__)\n\nclass MeetingSessionRest(Mediator):\n\n    # from flask_boiler import source, sink\n\n    view_model_cls = MeetingSessionC\n\n    rest = RestViewModelSource()\n\n    @rest.route('/<doc_id>', methods=('GET',))\n    def materialize_meeting_session(self, doc_id):\n\n        meeting = Meeting.get(doc_id=doc_id)\n\n        def notify(obj):\n            d = obj.to_snapshot().to_dict()\n            content = jsonify(d)\n            self.rest.emit(content)\n\n        _ = MeetingSessionC.get(\n            doc_id=meeting.doc_id,\n            once=False,\n            f_notify=notify\n        )\n\n    # @rest.route('/', methods=('GET',))\n    # def list_meeting_ids(self):\n    #     return [meeting.to_snapshot().to_dict() for meeting in Meeting.all()]\n\n    @classmethod\n    def start(cls, app):\n        cls.rest.start(app)\n\nswagger = Swagger(app)\n\napp.run(debug=True)\n```\n\n(currently under implementation) \n\n## Object Lifecycle\n\n### Once\n\nObject created with ```cls.new``` -> \nObject exported with ```obj.to_view_dict```. \n\n### Multi\n\nObject created when a new domain model is created in database -> \nObject changed when underlying datasource changes -> \nObject calls ```self.notify``` \n\n## Typical ViewMediator Use Cases \n\nData flow direction is described as Source -> Sink. \n\"Read\" describes the flow of data where front end would find data in Sink useful. \n\"Write\" describes the flow of data where the Sink is the single source \nof truth. \n\n### Rest \n\nRead: Request -> Response \\\nWrite: Request -> Document\n\n1. Front end sends HTTP request to Server  \n2. Server queries datastore\n3. Server returns response\n\n### Query\n\nRead: Document -> Document \\\nWrite: Document -> Document\n\n1. Datastore triggers update function \n2. Server rebuilds ViewModel that may be changed as a result \n3. Server saves newly built ViewModel to datastore \n\n### Query+Task\n\nRead: Document -> Document \\\nWrite: Document -> Document\n\n1. Datastore triggers update function for document `d` at time `t`\n2. Server starts a transaction\n3. Server sets write_option to only allow commit if documents are last updated at time `t` (still under design)\n3. Server builds ViewModel with transaction \n5. Server saves ViewModel with transaction\n7. Server marks document `d` as processed (remove document or update a field)\n7. Server retries up to MAX_RETRIES from step 2 if precondition failed \n\n### WebSocket\n\nRead: Document -> WebSocket Event \\\nWrite: WebSocket Event -> Document\n\n1. Front end subscribes to a ViewModel by sending a WebSocket event to server \n2. Server attaches listener to the result of the query\n3. Every time the result of the query is changed and consistent:\n    1. Server rebuilds ViewModel that may be changed as a result \n    2. Server publishes newly built ViewModel\n4. Front end ends the session\n5. Document listeners are released \n\n### Document\n\nRead: Document -> Document \\\nWrite: Document -> Document\n\n### Comparisons \n\n|                 \t| Rest \t            | Query \t     | Query+Task                   | WebSocket \t    | Document |\n|-----------------\t|------         \t|-------\t|------------\t|-----------\t|----------\t|\n| Guarantees      \t|    ≤1   (At-Most-Once)         \t| ≥ 1 (At-Least-Once)          |  =1[^1] (Exactly-Once)    |   ≤1   (At-Most-Once)  \t|       ≥ 1 (At-Least-Once) \t|\n| Idempotence      \t| If Implemented    | No            | Yes, with transaction[^1]    \t| If Implemented  \t| No    |\n| Designed For      | Stateless Lambda  |  Stateful Container   | Stateless Lambda      | Stateless Lambda  | Stateful Container |\n| Latency         \t| Higher            | Higher \t|   Higher     |  Lower           \t|     Higher     \t|\n| Throughput      \t| Higher when Scaled| Lower[^2]       \t| Lower          \t|   Higher when Scaled\t|   Lower[^2]      \t|\n| Stateful        \t| No   \t            | If Implemented    | If Implemented   \t| Yes        \t| Yes         \t|\n| Reactive        \t| No   \t        | Yes    | Yes   \t| Yes        \t| Yes         \t|\n\n<!---\nGaurantees\n| Back Pressure   \t|      \t|       \t|            \t|           \t|          \t|\nLatency\nThroughput\n| Fault Tolerance \t|      \t|       \t|            \t|           \t|          \t|\nStateful\n-->\n\n[^1]:  A message may be received and processed by multiple consumer, but only one \nconsumer can successfully commit change and mark the event as processed. \n[^2]:  Scalability is limited by the number of listeners you can attach to the datastore. \n\n## Advantages\n\n### Decoupled Domain Model and View Model\nUsing Firebase Firestore sometimes require duplicated fields\nacross several documents in order to both query the data and\ndisplay them properly in front end. Flask-boiler solves this\nproblem by decoupling domain model and view model. View model\nare generated and refreshed automatically as domain model\nchanges. This means that you will only have to write business\nlogics on the domain model without worrying about how the data\nwill be displayed. This also means that the View Models can\nbe displayed directly in front end, while supporting\nreal-time features of Firebase Firestore.\n\n### One-step Configuration\nRather than configuring the network and different certificate\nsettings for your database and other cloud services. All you\nhave to do is to enable related services on Google Cloud\nConsole, and add your certificate. Flask-boiler configures\nall the services you need, and expose them as a singleton\nContext object across the project.\n\n### Redundancy\nSince all View Models are persisted in Firebase Firestore.\nEven if your App Instance is offline, the users can still\naccess a view of the data from Firebase Firestore. Every\nView is also a Flask View, so you can also access the data\nwith auto-generated REST API, in case Firebase Firestore is\nnot viable.\n\n### Added Safety\nBy separating business data from documents that are accessible\nto the front end, you have more control over which data is\ndisplayed depending on the user's role.\n\n### One-step Documentation\nAll ViewModels have automatically generated documentations\n(provided by Flasgger). This helps AGILE teams keep their\ndocumentations and actual code in sync.\n\n### Fully-extendable\nWhen you need better performance or relational database\nsupport, you can always refactor a specific layer by\nadding modules such as `flask-sqlalchemy`.\n\n\n## Comparisons \n\n### GraphQL\n\nIn GraphQL, the fields are evaluated with each query, but \nflask-boiler evaluates the fields if and only if the \nunderlying data source changes. This leads to faster \nread for data that has not changed for a while. Also, \nthe data source is expected to be consistent, as the \nfield evaluation are triggered after all changes made in \none transaction to firestore is read. \n\nGraphQL, however, lets front-end customize the return. You \nmust define the exact structure you want to return in flask-boiler. \nThis nevertheless has its advantage as most documentations \nof the request and response can be done the same way as REST API. \n\n### REST API / Flask\n\nREST API does not cache or store the response. When \na view model is evaluated by flask-boiler, the response \nis stored in firestore forever until update or manual removal. \n\nFlask-boiler controls role-based access with security rules \nintegrated with Firestore. REST API usually controls these \naccess with a JWT token. \n\n### Redux\n\nRedux is implemented mostly in front end. Flask-boiler targets \nback end and is more scalable, since all data are communicated \nwith Firestore, a infinitely scalable NoSQL datastore. \n\nFlask-boiler is declarative, and Redux is imperative. \nThe design pattern of REDUX requires you to write functional programming \nin domain models, but flask-boiler favors a different approach: \nViewModel reads and calculates data from domain models \nand exposes the attribute as a property getter. (When writing \nto DomainModel, the view model changes domain model and \nexposes the operation as a property setter). \nNevertheless, you can still add function callbacks that are \ntriggered after a domain model is updated, but this \nmay introduce concurrency issues and is not perfectly supported \ndue to the design tradeoff in flask-boiler. \n\n\n### Architecture Diagram: \n\n![Architecture Diagram](https://user-images.githubusercontent.com/24789156/70380617-06e4d100-18f3-11ea-9111-4398ed0e865c.png)\n\n## Contributing\nPull requests are welcome. \n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/billyrrr/flask-boiler",
    "keywords": "firebase,firestore,ORM,flasgger,flask,backend,nosql,reactive,framework",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-boiler",
    "package_url": "https://pypi.org/project/flask-boiler/",
    "platform": "",
    "project_url": "https://pypi.org/project/flask-boiler/",
    "project_urls": {
      "Homepage": "https://github.com/billyrrr/flask-boiler"
    },
    "release_url": "https://pypi.org/project/flask-boiler/0.0.2.dev19/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Build reactive back end with ease",
    "version": "0.0.2.dev19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8177304,
  "releases": {
    "0.0.1a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcbaffda972c17ff141fdcec70b0cb5da6a148cfee629873b3cf1b932f5c7f5c",
          "md5": "b3988a82f11209870696dd78037538fe",
          "sha256": "9129ae8690c723047dd9f48d0082fdf1d7567d7e995dec2a2ea8759650489b9f"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.1a2.tar.gz",
        "has_sig": false,
        "md5_digest": "b3988a82f11209870696dd78037538fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22494,
        "upload_time": "2019-09-01T20:14:55",
        "upload_time_iso_8601": "2019-09-01T20:14:55.841864Z",
        "url": "https://files.pythonhosted.org/packages/fc/ba/ffda972c17ff141fdcec70b0cb5da6a148cfee629873b3cf1b932f5c7f5c/flask_boiler-0.0.1a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc41eb93dbfa2ce76c7137a17147b1b2e8ccc08ee35fa4f080ccfb4ac87ec843",
          "md5": "0a92f2d5d2dd2d7d7ec799e174451d83",
          "sha256": "c434bc3d165924556428fd530dfa0ead3af825b91312f13dd1255cb06d38fe83"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.1a3.tar.gz",
        "has_sig": false,
        "md5_digest": "0a92f2d5d2dd2d7d7ec799e174451d83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22813,
        "upload_time": "2019-09-01T22:17:15",
        "upload_time_iso_8601": "2019-09-01T22:17:15.896155Z",
        "url": "https://files.pythonhosted.org/packages/fc/41/eb93dbfa2ce76c7137a17147b1b2e8ccc08ee35fa4f080ccfb4ac87ec843/flask_boiler-0.0.1a3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2582c82795f050a56561fd49be64de2c94e62c9079ff9aaf242d6b8eb1a13445",
          "md5": "0ea572012f30ca5607d06338210e84ef",
          "sha256": "bdfe7825cb4a202cf7b1947c6f13fdcc871caa060d5ec9e183bdfec261d962a7"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.1a4.tar.gz",
        "has_sig": false,
        "md5_digest": "0ea572012f30ca5607d06338210e84ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22816,
        "upload_time": "2019-09-01T22:28:50",
        "upload_time_iso_8601": "2019-09-01T22:28:50.323641Z",
        "url": "https://files.pythonhosted.org/packages/25/82/c82795f050a56561fd49be64de2c94e62c9079ff9aaf242d6b8eb1a13445/flask_boiler-0.0.1a4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64af76c201a31e001ba15c976dbb3d62c1a16cfb2921fed87e2cd64461b8b85b",
          "md5": "7a757b3c4e7512bbbffa56c974430052",
          "sha256": "1988963bd3244ae0acb3f1406fd7514b29d53109da02579419589b3970c995f1"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.1b1.tar.gz",
        "has_sig": false,
        "md5_digest": "7a757b3c4e7512bbbffa56c974430052",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55618,
        "upload_time": "2020-01-09T19:33:39",
        "upload_time_iso_8601": "2020-01-09T19:33:39.599991Z",
        "url": "https://files.pythonhosted.org/packages/64/af/76c201a31e001ba15c976dbb3d62c1a16cfb2921fed87e2cd64461b8b85b/flask_boiler-0.0.1b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c82bbf31e1892ec4ec9ec73ad95b7c4bd8e7b79d8b38eb8b72c926bddc64bf5b",
          "md5": "218576a18a93aefb0d3835a01d84a41f",
          "sha256": "5d8e14f59d361b30db430b27b393753ccc2192395b2b44d54ee5765eb17c0d51"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.1b2.tar.gz",
        "has_sig": false,
        "md5_digest": "218576a18a93aefb0d3835a01d84a41f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 57090,
        "upload_time": "2020-03-11T20:17:13",
        "upload_time_iso_8601": "2020-03-11T20:17:13.738437Z",
        "url": "https://files.pythonhosted.org/packages/c8/2b/bf31e1892ec4ec9ec73ad95b7c4bd8e7b79d8b38eb8b72c926bddc64bf5b/flask_boiler-0.0.1b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ad936f613edfbe3b3c352374f874c173a77e9dae1b841bc1e7e887174f81ff8",
          "md5": "abe9eb8866700538a5d801c7debf342c",
          "sha256": "c987144f4e076077986997c3ef689368c2432d15c91e5ed6261148602d93682e"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.1b3.tar.gz",
        "has_sig": false,
        "md5_digest": "abe9eb8866700538a5d801c7debf342c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 58249,
        "upload_time": "2020-03-13T20:50:22",
        "upload_time_iso_8601": "2020-03-13T20:50:22.917946Z",
        "url": "https://files.pythonhosted.org/packages/3a/d9/36f613edfbe3b3c352374f874c173a77e9dae1b841bc1e7e887174f81ff8/flask_boiler-0.0.1b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1b7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20e6954dbf4d6cd287e77a404abb3ad3093c4b033275777c010de48c1938fafa",
          "md5": "fda5e5294367ec254f53d16bae8aefae",
          "sha256": "70244992b673e65c539777cf06d01654e6a10f8f304827ba1fd4cd0da26ea9fb"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.1b7.tar.gz",
        "has_sig": false,
        "md5_digest": "fda5e5294367ec254f53d16bae8aefae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 67189,
        "upload_time": "2020-04-17T04:17:28",
        "upload_time_iso_8601": "2020-04-17T04:17:28.015985Z",
        "url": "https://files.pythonhosted.org/packages/20/e6/954dbf4d6cd287e77a404abb3ad3093c4b033275777c010de48c1938fafa/flask_boiler-0.0.1b7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2f66e2f184d1eaa521505f925cbb6168b8e3cf2dcea13080127470ecb87a972",
          "md5": "3c19d191f577f30b66b82d33735e35b1",
          "sha256": "afdaad022698f88c93697d86acade79149dd953a21d769b220519fb7bef54d20"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "3c19d191f577f30b66b82d33735e35b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 119338,
        "upload_time": "2020-07-27T18:11:29",
        "upload_time_iso_8601": "2020-07-27T18:11:29.448276Z",
        "url": "https://files.pythonhosted.org/packages/d2/f6/6e2f184d1eaa521505f925cbb6168b8e3cf2dcea13080127470ecb87a972/flask_boiler-0.0.2.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55fc3fabd054f870bcd5d338c2015a036a5379502f45736cfbb2e24c6e657355",
          "md5": "1cfe3ce7e1f4f31ed9506d860ef963d7",
          "sha256": "ae999e5468ab47940d7f26af5668ca38a647ef20938cbd22920d96a4c3f31018"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev10.tar.gz",
        "has_sig": false,
        "md5_digest": "1cfe3ce7e1f4f31ed9506d860ef963d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121874,
        "upload_time": "2020-08-03T15:27:34",
        "upload_time_iso_8601": "2020-08-03T15:27:34.385902Z",
        "url": "https://files.pythonhosted.org/packages/55/fc/3fabd054f870bcd5d338c2015a036a5379502f45736cfbb2e24c6e657355/flask_boiler-0.0.2.dev10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdcc4c8235c20463ec74f9b3f6e0ee6ac8222b7e96828cccce02aed518723cab",
          "md5": "dcfad98d5f5e6f5cb9935ef15eced0e1",
          "sha256": "f00ff837b4a63c505d4febbdec3c5083760339ffa894d40d21215d975245cdc1"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev11.tar.gz",
        "has_sig": false,
        "md5_digest": "dcfad98d5f5e6f5cb9935ef15eced0e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121888,
        "upload_time": "2020-08-03T15:32:30",
        "upload_time_iso_8601": "2020-08-03T15:32:30.232067Z",
        "url": "https://files.pythonhosted.org/packages/fd/cc/4c8235c20463ec74f9b3f6e0ee6ac8222b7e96828cccce02aed518723cab/flask_boiler-0.0.2.dev11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4d2dd302d99734e9b8bbab732e912d07b0b97ff3749d4e6f4de38516c31a833",
          "md5": "ba2f8b47da04b13ef577d5353ec17729",
          "sha256": "e28c98734460acb0404d3f3b5ef89133f757cc78272df6975a42572b7a24708c"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev12.tar.gz",
        "has_sig": false,
        "md5_digest": "ba2f8b47da04b13ef577d5353ec17729",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121891,
        "upload_time": "2020-08-03T15:38:52",
        "upload_time_iso_8601": "2020-08-03T15:38:52.351417Z",
        "url": "https://files.pythonhosted.org/packages/e4/d2/dd302d99734e9b8bbab732e912d07b0b97ff3749d4e6f4de38516c31a833/flask_boiler-0.0.2.dev12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0131b17d30fdd6c644ca4ce68237a4d616a588f189020c447dc1a301958125b3",
          "md5": "76d76cc5c881c4a5afd73295f8c19b20",
          "sha256": "4f88bba5b94c377279803a960122c0eac14f2efc57a01dab1311d8f43a520dcc"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev15.tar.gz",
        "has_sig": false,
        "md5_digest": "76d76cc5c881c4a5afd73295f8c19b20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121891,
        "upload_time": "2020-08-03T15:53:43",
        "upload_time_iso_8601": "2020-08-03T15:53:43.812546Z",
        "url": "https://files.pythonhosted.org/packages/01/31/b17d30fdd6c644ca4ce68237a4d616a588f189020c447dc1a301958125b3/flask_boiler-0.0.2.dev15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a3fa0174051b47250efa2ea12213885aa3ba1bf946c3855d4607ce0b0a05ff1",
          "md5": "9b6552adcde1175ebc9029e800ec6b5b",
          "sha256": "14bc1587bc6ee2b67f69d3dfce8f06dbb269205f72c6b71054c896562bb8ce9e"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev17.tar.gz",
        "has_sig": false,
        "md5_digest": "9b6552adcde1175ebc9029e800ec6b5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121908,
        "upload_time": "2020-08-03T17:06:15",
        "upload_time_iso_8601": "2020-08-03T17:06:15.595594Z",
        "url": "https://files.pythonhosted.org/packages/9a/3f/a0174051b47250efa2ea12213885aa3ba1bf946c3855d4607ce0b0a05ff1/flask_boiler-0.0.2.dev17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee9b8e854062a49486e12d4d4578cc1d3a598901af56a5cd913e0a125170d1d3",
          "md5": "6ec4ae31057d5e27af53ad4258994dcf",
          "sha256": "da688cae0e2e2bbaeabf7aad816abe6cea27612a473002574132a2b54860499c"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev18.tar.gz",
        "has_sig": false,
        "md5_digest": "6ec4ae31057d5e27af53ad4258994dcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121918,
        "upload_time": "2020-08-03T18:25:26",
        "upload_time_iso_8601": "2020-08-03T18:25:26.702946Z",
        "url": "https://files.pythonhosted.org/packages/ee/9b/8e854062a49486e12d4d4578cc1d3a598901af56a5cd913e0a125170d1d3/flask_boiler-0.0.2.dev18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ab27497dfa1f1b7b03f71be031ba74ea1fffd5921ee835d6036137586140667",
          "md5": "4d4f1f5896ae85b6f7a49f71535f7157",
          "sha256": "b39d18cdc116e4f92dbfa3986c121c4c2f18c4352acb509ee8cc7608ba015323"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev19.tar.gz",
        "has_sig": false,
        "md5_digest": "4d4f1f5896ae85b6f7a49f71535f7157",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 149043,
        "upload_time": "2020-09-13T22:36:44",
        "upload_time_iso_8601": "2020-09-13T22:36:44.314381Z",
        "url": "https://files.pythonhosted.org/packages/0a/b2/7497dfa1f1b7b03f71be031ba74ea1fffd5921ee835d6036137586140667/flask_boiler-0.0.2.dev19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88428b958f1d2072a87248daac9ebfd778e88e614238ae027f26fcd54de5e971",
          "md5": "ee6272d9ea466f1056e0c9e78e6c3d2a",
          "sha256": "ef3c60c9dea04b91e9f613e1c2c727a2b59ffb0db9a8ad71479613b46172f258"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "ee6272d9ea466f1056e0c9e78e6c3d2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 119984,
        "upload_time": "2020-07-27T22:59:22",
        "upload_time_iso_8601": "2020-07-27T22:59:22.794116Z",
        "url": "https://files.pythonhosted.org/packages/88/42/8b958f1d2072a87248daac9ebfd778e88e614238ae027f26fcd54de5e971/flask_boiler-0.0.2.dev2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7538ec24d50afac9c061d05aa24698a54f34e6b5c1f843d09c82b4bd6c55cc36",
          "md5": "e75b2c6e498753a18ac4e46667fc70ae",
          "sha256": "07c33e11e4a634eb43b71d15b23b056d5054a6ec14558e9fed5dbf83b8248cdf"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev3.tar.gz",
        "has_sig": false,
        "md5_digest": "e75b2c6e498753a18ac4e46667fc70ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 120931,
        "upload_time": "2020-07-29T06:28:26",
        "upload_time_iso_8601": "2020-07-29T06:28:26.710218Z",
        "url": "https://files.pythonhosted.org/packages/75/38/ec24d50afac9c061d05aa24698a54f34e6b5c1f843d09c82b4bd6c55cc36/flask_boiler-0.0.2.dev3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "074e9067df9626d603800d2a808df88e9c76c1f02ea924ecba5b47eced44202d",
          "md5": "c593a2926afce816ac6505418c48591e",
          "sha256": "29ac452fc895b871f81425b2c5492a06fd3cd521147c3f3bfb283e1c2c38c631"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev5.tar.gz",
        "has_sig": false,
        "md5_digest": "c593a2926afce816ac6505418c48591e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121857,
        "upload_time": "2020-08-01T16:11:05",
        "upload_time_iso_8601": "2020-08-01T16:11:05.982661Z",
        "url": "https://files.pythonhosted.org/packages/07/4e/9067df9626d603800d2a808df88e9c76c1f02ea924ecba5b47eced44202d/flask_boiler-0.0.2.dev5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87d623e81948ec545ca6be7112391a666c1db6cb0b3a57e3ba2fbbaff9a58802",
          "md5": "baa176789c3cd4ba70313eb96a2023e4",
          "sha256": "14b0fe57c662fd4b8a27a1edddf8890db5f3683c55d226769ebdefb032747aa8"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev7.tar.gz",
        "has_sig": false,
        "md5_digest": "baa176789c3cd4ba70313eb96a2023e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121853,
        "upload_time": "2020-08-01T16:37:14",
        "upload_time_iso_8601": "2020-08-01T16:37:14.810780Z",
        "url": "https://files.pythonhosted.org/packages/87/d6/23e81948ec545ca6be7112391a666c1db6cb0b3a57e3ba2fbbaff9a58802/flask_boiler-0.0.2.dev7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "836810bcc8b15c4050ebc4f0052bad6f7bed02c19a4a376be66152d97a00a7c0",
          "md5": "34c5002047cccddc2bfb767fd62fbc0d",
          "sha256": "c4d1e7f5b58c71cd83877487c109c3051b506f6b236f4e74b7e2259905abbeed"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev8.tar.gz",
        "has_sig": false,
        "md5_digest": "34c5002047cccddc2bfb767fd62fbc0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121880,
        "upload_time": "2020-08-01T16:48:14",
        "upload_time_iso_8601": "2020-08-01T16:48:14.247164Z",
        "url": "https://files.pythonhosted.org/packages/83/68/10bcc8b15c4050ebc4f0052bad6f7bed02c19a4a376be66152d97a00a7c0/flask_boiler-0.0.2.dev8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68726da9efb183e9f7a6ba3d51f22d1eef34b1182c10a84e962a74fe5d0f8b0c",
          "md5": "c69fe3dd83d068615b2be0be302cbfb9",
          "sha256": "2988981a59ac3b6dcb35c2ccfc64fc42e7d7c5de482c7c8e702ff20fa33675c6"
        },
        "downloads": -1,
        "filename": "flask_boiler-0.0.2.dev9.tar.gz",
        "has_sig": false,
        "md5_digest": "c69fe3dd83d068615b2be0be302cbfb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121885,
        "upload_time": "2020-08-01T17:14:18",
        "upload_time_iso_8601": "2020-08-01T17:14:18.592848Z",
        "url": "https://files.pythonhosted.org/packages/68/72/6da9efb183e9f7a6ba3d51f22d1eef34b1182c10a84e962a74fe5d0f8b0c/flask_boiler-0.0.2.dev9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ab27497dfa1f1b7b03f71be031ba74ea1fffd5921ee835d6036137586140667",
        "md5": "4d4f1f5896ae85b6f7a49f71535f7157",
        "sha256": "b39d18cdc116e4f92dbfa3986c121c4c2f18c4352acb509ee8cc7608ba015323"
      },
      "downloads": -1,
      "filename": "flask_boiler-0.0.2.dev19.tar.gz",
      "has_sig": false,
      "md5_digest": "4d4f1f5896ae85b6f7a49f71535f7157",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 149043,
      "upload_time": "2020-09-13T22:36:44",
      "upload_time_iso_8601": "2020-09-13T22:36:44.314381Z",
      "url": "https://files.pythonhosted.org/packages/0a/b2/7497dfa1f1b7b03f71be031ba74ea1fffd5921ee835d6036137586140667/flask_boiler-0.0.2.dev19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}