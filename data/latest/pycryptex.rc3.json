{
  "info": {
    "author": "mas2020",
    "author_email": "andrea.genovesi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyCryptex\n\nThis project can be used as:\n\n- CLI application for encryption and decryption\n- a package to import in your personal project to create an encryption/decryption app\n\nFor the CLI functionality it uses `click` package and for the encryption the amazing `pycryptodome` package.\n\n## Install application\n\nTo use `pycryptex` you need to have python3 and pip3 installed. Depending on you platform the procedure to install python can change.\nTry this on your terminal:\n```shell script\npython3 -V\n```\nIf you do not get an answer the best place to to start is looking into the official documentation [here](https://www.python.org/downloads/).\n\nThen, when you have at least Python >= 3.6 and pip3 installed, simply type:\n```shell script\npython3 -m pip install pycryptex\n```\nIf you are on linux you could have this warning:\n```\nWARNING: The script pycryptex is installed in '/home/<YOUR-HOME>/.local/bin' which is not on PATH.\n```\nIt means that if you type `pycryptex` you get a not found error.\nTo solve, simply add the path to your PATH, for example, edit .bashrc in your $HOME folder as (suppose your HOME == vagrant):\n```\n# Add local python bin script to my PATH:\nexport PATH=$PATH:/home/vagrant/.local/bin\n```\nif you do not use BASH as a shell, search the same src file for your shell and edit in a similar way.\nThen execute, in case of BASH:\n```\nsource $HOME/.bashrc\n# and then type\npycryptex\n```\nIt should work now and for all the future updates!\n\n### Fast start\n\nIf you want encrypt and decrypt files and folders easily and you do not want spend time to create your own encryption keys, you can let\nPyCryptex do the job for you (to use your own keys or understanding better the behaviour of the application refers to the rest of the documentation):\n```shell script\npycryptex create-keys\n``` \nanswer 'yes' and decide if protect the private key with a password (it's your security choice).\nPyCryptex will create the standard key in your *$HOME/.pycryptex* folder.\n\n***IMPORTANT***: you will use your public key (pycryptex_key.pub) for encrypt and you private key (pycryptex_key) for decrypt. Do not leave the keys in the same place, secure you private key as best as you can, as you do with your private HOME keys ;-)!\n\nAt this point you can simply encrypt a file or a folder using:\n```shell script\npycryptex encrypt <FILE-OR-FOLDER>\n```\neverytime you need to know the options behind a command digit:\n```shell script\npycryptex <command> --help\n```\nTo decrypt a file or a folder type:\n```shell script\npycryptex decrypt <FILE-OR-FOLDER>\n```\nThat's it for the PyCryptex in a `nutshell`. Go ahead with the lecture to figure out how to make the most of the application.\n\n#### Decryption with a pager\nPager option behaviour is changed in version `0.5.0`. Now it is possible to use `decryption` also for reading a file without saving the clear file on the system (if it is not needed).\nActually the pager is enabled only for the command `decrypt` and not for the command `decrypt-aes`.\nSo, for example if you decrypt without option:\n```shell script\npycryptex decrypt <FILE-OR-FOLDER>\n```\nPyCryptex will save the decrypted file on the file system, instead if you type:\n```shell script\npycryptex decrypt <FILE-OR-FOLDER> --pager\n```\nPyCryptex will decrypt the file in memory and redirect it on the standard input of the pager set in your configuration file.\nStarting from `0.5.0` version is also changed the default pager in favour of 'less' instead of 'vim'.\nYou can change it to use your favourite pager (simply create the configuration file `pycryptex create-config` then edit it),\nsome examples are:\n- `code -` to use Visual Studio Code (to enable the command `code` see the Microsoft site)\n- `sublime -` to use with sublime (in case you do not have it on the executable in PATH, see on the official documentation to solve the issue)\n- `vim -` to use vim\n- `nano -` to use nano (starting from version 2.2)\n\n***Happy Encryption!!!***\n\n### Using application\n\nYou can get help with:\n````shell script\npycryptex --help\n````\n\nPyCryptex encryption works with symmetric or asymmetric algorithms based on the arguments passed.\nTo the standard encryption/decryption ``pycryptex`` uses RSA keys pair. In particular, it encrypts using the public key of the user and decrypts\nusing the private key. For better performance ``pycryptex`` behind the scene uses the AES algorithm.\nThe RSA keys are used to encrypt and decrypt the random key generated and stored as header to the file.\nIn this way the performance are definitely better on a large file (a 256 bit AES random key is used).\n\n\nThe default keys name:\n- pycryptex_key: for the private key\n- pycryptex_key.pub: for the public key\nThe folder where **`pycryptex`** searches for the key is your $HOME/.pycryptex. If you prefer to use your own\nkeys you can pass them directly as an argument to the encrypt and decrypt method.\n\nAn alternative, starting from version 0.4.0, could be save the path of the keys in the pycryptex confi file.\n\n**PyCryptex determines the RSA keys to use** for the `encrypt` and `decrypt` methods, follow these rules:\n\n- if the option --privkey or --pubkey is specified, it loads the corresponding file\n- if no option key is specified:\n    - if is present privkey or pubkey field in *$HOME/.pycryptex/pycryptex.toml* it loads the corresponding file\n    - loads pycryptex_key as private key and pycryptex_key.pub located in *$HOME/.pycryptex* directory\n\nThese rules are not valid when you use `encrypt-aes` and `decrypt-aes` commands that always ask for a console password.\n\n### Configuration file\n\nPyCryptex reads a configuration file located in your $HOME/.pycryptex folder named **pycryptex.toml**.\nThe file has the following syntax (reported are the default file):\n```toml\n[config]\n# path to the pager application where to see decrypted file\npager = \"vim\"\n# default private key for RSA decryption\nprivate-key = \"\"\n# default public key for RSA encryption\npublic-key = \"\"\n# (default false) true/false to secure delete files (if activated deletion of files becomes slower)\nsecure-deletion = false\n# number of passes for secure deletion. Means how many times PyCryptex write random data into the file.\n# greater is the number you adopt, major security you introduce but deletion becomes slower.\nsecure-deletion-passes = 1\n```\n\n#### Secure file deletion\nStarting from `0.5.0` it is possible to set the config key `secure-deletion` = true. Doing this, the clear file/s, \nafter the encryption, will be removed safely. It's possible to configure how many passes to run to mix up the file content\nbefore deleting it.\n\n### List of all commands\n\nTo an explanation of all the option of a specific command take a look directly at:\n```shell script\npycryptex encrypt --help\n```\n\nFollow the list of commands:\n- `encrypt`: to encrypt a single file or a folder (including sub folders).\n- `decrypt`: to decrypt a single file a single file or a folder (including sub folders).\n- `create-keys`: to create a public key and private key pair.\n- `create-config`: to create the default config file under $HOME/.pycryptex/pycryptex.toml\n- `show-config`: to show the configuration file if present into the $HOME/.pycryptex folder\n- `encrypt-aes`: to encrypt a single file or a folder (including sub folders) using AES algorithm.\n- `decrypt-aes`: to decrypt a single file a single file or a folder (including sub folders) using AES algorithm.\n\n### Some examples\nSome basic example usages are:\n````shell script\n# to encrypt passing a key\npycryptex encrypt --pubkey test/id_rsa.pub test/secrets.txt\n\n# to encrypt using the pycryptex_key.pub in $HOME/.pycryptex folder\npycryptex encrypt test/secret.txt\n\n# to encrypt using the pycryptex_key.pub in $HOME/.pycryptex folder maintaining the original file\npycryptex encrypt test/secret.txt --keep\n\n# decrypt the file\npycryptex --verbose decrypt --privkey test/id_rsa test/secrets.txt.pycpx\n\n# decrypt using your own private key and open the pager\npycryptex --verbose decrypt --privkey test/id_rsa -p test/secrets.txt.pycpx\n\n# decrypt and open the pager (loading keys from $HOME/.pycryptex)\npycryptex decrypt -p test/secrets.txt.pycpx\n\n# to create private/public key pairs\npycryptex create-keys\n````\nTo combine decrypt + read and modify a file + encrypt again you can use something as:\n```shell script\npycryptex decrypt --privkey <YOUR-PATH-TO-PRIVATE-KEY> <FILE.pycypx> \\\n&& vim <FILE> && \\\npycryptex encrypt --pubkey <YOUR-PATH-TO-PUBLIC-KEY> <FILE>\n```\nBy this way, you can change the clear content also using the right pager, as vim for example.\nIn case your keys are in your `pycryptex` HOME folder or set into the `pycryptex.toml` file, you can omit to pass them.\nIf you need only read an encrypted file content use simple the --pager option as described before.\n\n### Shell auto completion for pycryptex\nPyCryptex commands, options and arguments can be added to your favourite shell for the auto completion.\nAfter you have installed the application follow the instructions choosing the shell you have.\n\n#### `bash` configuration\nIf your favourite shell is **`bash`** then type:\n```shell script\ncd <YOUR-FOLDER>\n# type this command\n_PYCRYPTEX_COMPLETE=source_bash pycryptex > pycryptex.sh\n```\nnow you that have the file `pycryptex.sh` open you $HOME/.bashrc file and add this content:\n```shell script\nvim $HOME/.bashrc\nsource /PATH-TO-PYCRYPTEX-SCRIPT/pycryptex.sh\n```\n\n#### `zsh` configuration\nIf your favourite shell is **`zsh`** then type:\n```shell script\ncd <YOUR-FOLDER>\n# type this command\n_PYCRYPTEX_COMPLETE=source_zsh pycryptex > pycryptex.sh\n```\nnow you that have the file `pycryptex.sh` open you $HOME/.zshrc file and add this content:\n```shell script\nvim $HOME/.zshrc\nsource /PATH-TO-PYCRYPTEX-SCRIPT/pycryptex.sh\n```\n\n#### `fish` configuration\nIf your favourite shell is **`fish`** then type:\n```shell script\n_PYCRYPTEX_COMPLETE=source_fish pycryptex > ~/.config/fish/completions/pycryptex-complete.fish\n```\n\n## Configuration for developers\n\nIf you want to contribute to that project, after cloning the repo type:\n```shell script\ngit clone https://github.com/mas2020-python/pycryptex.git\ncd pycryptex\npython3 -m venv venv\nsource venv/bin/activate\npython3 -m pip install --upgrade pip\npip install --upgrade setuptools\npip install -r requirements.txt\npython3 -m pip install pytest wheel twine\n\n# (optional) to test type\npython3 -m Crypto.SelfTest\n```\n\nIf you need to create a new key pair you can use ssh-keygen. In such case type:\n```shell script\nssh-keygen -t rsa -b 4096 -C \"<your-user>@<your-domain>\"\n```\n\nTo install the executable package type:\n````shell script\npip3 install --editable .\n````\n\nTo install from PyPi test (other dependencies packages from official PyPi) type:\n````shell script\npip3 install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple pycryptex==<VERSION>\n````\n\nTo test the application type:\n```shell script\npytest\n```\n\nTo deploy on PyPi test:\n```shell script\npython3 setup.py check\npython3 setup.py bdist_wheel sdist\ntwine upload dist/* --repository testpypi\n```\nYou need to have the credentials or token from the owner of the project on PyPi.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mas2020-python/pycryptex",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycryptex",
    "package_url": "https://pypi.org/project/pycryptex/",
    "platform": "",
    "project_url": "https://pypi.org/project/pycryptex/",
    "project_urls": {
      "Homepage": "https://github.com/mas2020-python/pycryptex"
    },
    "release_url": "https://pypi.org/project/pycryptex/0.5.0/",
    "requires_dist": [
      "click (==7.1.2)",
      "pycryptodome (==3.9.8)",
      "toml (==0.10.1)",
      "tqdm (==4.50.2)"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Python CLI application to easily encrypt and decrypt file and folders. Easy and fast for the lovers of the CLI.",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8643648,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3022e2ac307690f573ed67e55b4aa0c9cd6e612ecf2255b1f45c042b1a0758d7",
          "md5": "96f740c1620be1dade43914a9afe3278",
          "sha256": "3fc51116e9733cd98a604d37787968461a0f175f91ee57ce855aee5bdc81724b"
        },
        "downloads": -1,
        "filename": "pycryptex-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96f740c1620be1dade43914a9afe3278",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9128,
        "upload_time": "2020-10-21T15:25:44",
        "upload_time_iso_8601": "2020-10-21T15:25:44.594792Z",
        "url": "https://files.pythonhosted.org/packages/30/22/e2ac307690f573ed67e55b4aa0c9cd6e612ecf2255b1f45c042b1a0758d7/pycryptex-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "888af3e913d151c594e4b04c3860762a79fa926dc1917ad880b1632f85eb585b",
          "md5": "2f240c512f048e5baa0d2129f8c66827",
          "sha256": "c3c0472da5a08c01dedbe2c807cf6e8b5d5746341e89c2175da9b2f38b577ac6"
        },
        "downloads": -1,
        "filename": "pycryptex-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2f240c512f048e5baa0d2129f8c66827",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7070,
        "upload_time": "2020-10-21T15:25:48",
        "upload_time_iso_8601": "2020-10-21T15:25:48.738961Z",
        "url": "https://files.pythonhosted.org/packages/88/8a/f3e913d151c594e4b04c3860762a79fa926dc1917ad880b1632f85eb585b/pycryptex-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f67ca0a478b803b565e93fabf495702982ca5d9f7792cc466f3b6fca87a008b",
          "md5": "7325298dcce95a1b6d274a4be1d40ce7",
          "sha256": "4884d4dd6c9ce5e626fc9c5b86294baa665685e67790ed8b45a2705d0f6361e5"
        },
        "downloads": -1,
        "filename": "pycryptex-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7325298dcce95a1b6d274a4be1d40ce7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 14270,
        "upload_time": "2020-10-30T16:21:22",
        "upload_time_iso_8601": "2020-10-30T16:21:22.811547Z",
        "url": "https://files.pythonhosted.org/packages/6f/67/ca0a478b803b565e93fabf495702982ca5d9f7792cc466f3b6fca87a008b/pycryptex-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a157d46548925c381f1b09fa5f0452a58b5b82f0b4247b5f7ad25ada12e41139",
          "md5": "faeb26a837d8769ad6cfdf3e4f754097",
          "sha256": "29da0aba38f58faeb41a5b59b6bb9a2303d3696ebec4dd46ed3eae1119d7afdc"
        },
        "downloads": -1,
        "filename": "pycryptex-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "faeb26a837d8769ad6cfdf3e4f754097",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 14118,
        "upload_time": "2020-10-30T16:21:23",
        "upload_time_iso_8601": "2020-10-30T16:21:23.954867Z",
        "url": "https://files.pythonhosted.org/packages/a1/57/d46548925c381f1b09fa5f0452a58b5b82f0b4247b5f7ad25ada12e41139/pycryptex-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3e128961a256d1a07b208a244d81d5c369b0db541838e3ce3eda694abd686cc",
          "md5": "48c4b7352bd9d01f78f61ee46175b9bf",
          "sha256": "09b0ba2592ff3c7f1b67cc556a421a9d6777e3a6323de2301e32a022cc4a5bd6"
        },
        "downloads": -1,
        "filename": "pycryptex-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48c4b7352bd9d01f78f61ee46175b9bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 16513,
        "upload_time": "2020-11-12T17:38:15",
        "upload_time_iso_8601": "2020-11-12T17:38:15.807244Z",
        "url": "https://files.pythonhosted.org/packages/a3/e1/28961a256d1a07b208a244d81d5c369b0db541838e3ce3eda694abd686cc/pycryptex-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea5be2b0410f26c36fc9a931f34f3696c5b6cd98572b43129740cf1616262dc5",
          "md5": "ac48c6bbd7b729cddc055a1cf1ec4757",
          "sha256": "1af69c0ac94dd3d96aadcb81eb659a14476a6f87b23cd95062a665e01f5db0ce"
        },
        "downloads": -1,
        "filename": "pycryptex-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ac48c6bbd7b729cddc055a1cf1ec4757",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 17898,
        "upload_time": "2020-11-12T17:38:16",
        "upload_time_iso_8601": "2020-11-12T17:38:16.908752Z",
        "url": "https://files.pythonhosted.org/packages/ea/5b/e2b0410f26c36fc9a931f34f3696c5b6cd98572b43129740cf1616262dc5/pycryptex-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3e128961a256d1a07b208a244d81d5c369b0db541838e3ce3eda694abd686cc",
        "md5": "48c4b7352bd9d01f78f61ee46175b9bf",
        "sha256": "09b0ba2592ff3c7f1b67cc556a421a9d6777e3a6323de2301e32a022cc4a5bd6"
      },
      "downloads": -1,
      "filename": "pycryptex-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "48c4b7352bd9d01f78f61ee46175b9bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 16513,
      "upload_time": "2020-11-12T17:38:15",
      "upload_time_iso_8601": "2020-11-12T17:38:15.807244Z",
      "url": "https://files.pythonhosted.org/packages/a3/e1/28961a256d1a07b208a244d81d5c369b0db541838e3ce3eda694abd686cc/pycryptex-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea5be2b0410f26c36fc9a931f34f3696c5b6cd98572b43129740cf1616262dc5",
        "md5": "ac48c6bbd7b729cddc055a1cf1ec4757",
        "sha256": "1af69c0ac94dd3d96aadcb81eb659a14476a6f87b23cd95062a665e01f5db0ce"
      },
      "downloads": -1,
      "filename": "pycryptex-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ac48c6bbd7b729cddc055a1cf1ec4757",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 17898,
      "upload_time": "2020-11-12T17:38:16",
      "upload_time_iso_8601": "2020-11-12T17:38:16.908752Z",
      "url": "https://files.pythonhosted.org/packages/ea/5b/e2b0410f26c36fc9a931f34f3696c5b6cd98572b43129740cf1616262dc5/pycryptex-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}