{
  "info": {
    "author": "kerim khemrev",
    "author_email": "tierracolada@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Code Generators"
    ],
    "description": "# cppguts\r\nIf your project depends on some external C/C++ projects and \r\nyou want to make some changes in external functions/methods \r\nand then copy/paste these changes automatically - this package may help you. \r\n\r\nThere are two tools:\r\n1) `editcpp` used to edit source code;\r\n2) `dumpcpp` used to print some information about C/C++ translation units\r\n\r\nWe will discuss `editcpp` as it is the objective tool.\r\n\r\n**`editcpp` doesn't work with templates.**\r\n\r\n## The idea behind `editcpp` tool\r\n`editcpp` uses `libclang` to find function/method definition start/end lines in text file (`.c`, `.h`, `.hpp`, `.cpp` or whatever C/C++ extension). `libclang` parses each `dest.cpp` and `src.cpp` and everything that is\r\nincluded by `#include` preprocessor directives. Then `editcpp` tool\r\nselects all functions and methods defined in `dest.cpp` and `src.cpp` \r\n(it assumes that you know where old and new function/method definition resides) and tries to find matching functions/methods. After that `editcpp` copies function/method definition from `src.cpp` and pastes it to the `dest.cpp` while deleting old funcion/method definition.\r\n\r\n<ins>To find common function `editcpp` checks:</ins>\r\n* are they both _definitions?_\r\n* are they both _const?_\r\n* are they both _static?_\r\n* are they both _vitual?_\r\n* are they both _functions?_\r\n* are they both _methods?_\r\n* do they both have the same name?\r\n* do they both have the same return type and arg types?\r\n* do they both have the same semantic parent (classname)? (for methods only)\r\n\r\n## Notes\r\n\r\n* you are free to pass any clang argument after `editcpp` otions but don't pass file without flag to clang (as we usually do when using clang)\r\n* if you parse files that includes non standard headers then you probably need to pass `-I<include_dir>` flag to clang to include directories;\r\n* if you parse `C++` files then it may be necessary to pass `-std=c++03` (or higher) flag to inform clang that the file is `C++`;\r\n* if your new function/method definition uses external types then\r\nthese types must be preliminary declared (not necessary to define them);\r\n\r\nRemember that after `editcpp` finds common functions/methods\r\nit will simply copy selected text lines from one file to another\r\n\r\n## Example\r\noriginal function/method definition file **dest.h**:\r\n ```cpp\r\n#include <iostream>\r\n\r\n// helper class that is used by the target class `Src`\r\nclass SrcPrivate {\r\npublic:\r\n  SrcPrivate(){};\r\n\r\n  void add(int v){\r\n    val += v;\r\n  }\r\n\r\n  void substract(int v){\r\n    val -= v;\r\n  }\r\n\r\nprivate:\r\n  int val;\r\n}\r\n\r\n// target class\r\nclass Src {\r\n  // method defined inside the class\r\n  void add(SrcPrivate p, int v){\r\n    p.add(v);\r\n  }\r\n\r\n// method defined outside the class\r\n  void substract(SrcPrivate p, int v);\r\n\r\n// we won't tuch this method\r\n  void untouched_print(int v){\r\n    std::cout << \"The value is:\\t\" << v << std::endl;\r\n  }\r\n}\r\n\r\nvoid Src::substract(SrcPrivate p, int v){\r\n  p.substract(v);\r\n}\r\n\r\n// simple function\r\nvoid foo(int &v){\r\n  v--;\r\n}\r\n\r\nnamespace ns {\r\n  // function in namespace\r\n  void bar(int &v){\r\n    v++;\r\n  }\r\n}\r\n```\r\n\r\nnew function/method definition file **src.h**:\r\n```cpp\r\nclass SrcPrivate;   // declare helper type\r\n\r\n// target class\r\nclass Src {\r\n  // NEW method definition inside class\r\n  void add(SrcPrivate p, int v){\r\n\r\n    p.add(v) + 10;\r\n\r\n  }\r\n\r\n  // NEW method definition ouside class\r\n  void substract(SrcPrivate p, int v);\r\n}\r\n\r\nvoid Src::substract(SrcPrivate p, int v){\r\n  p.substract(v) - 10;\r\n}\r\n\r\n// NEW simple function definition \r\nvoid foo(int &v){\r\n  v -= 10;\r\n}\r\n\r\n// NEW function definition in namespace\r\nnamespace ns {\r\n  void bar(int &v){\r\n    v += 10;\r\n  }\r\n}\r\n```\r\nRun: \r\n\r\n`editcpp --src-file=src.h --dest-file=dest.h --oldfile-keep -std=c++03`\r\n\r\nThe `-std=c++03` tells the clang to parse the files as C++. Also you may need to use any other clang flags like `-I` to include directories that are required by the files.\r\n\r\n`--oldfile-keep` (default) is used to keep the original file (it will be renamed by adding `_OLD_N` suffix). Otherwise use `--oldfile-delete` to delete the original file.\r\n\r\nAnother option is to run the test (though the test deletes all the generated files so you better take a look in `/tests` dir):\r\n\r\n`python -m unittest cppguts.tests.test_cppguts`\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/tierra-colada/cppguts/archive/refs/tags/v1.0.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tierra-colada/cppguts",
    "keywords": "c cpp c-parser cpp-parser c-editor cpp-editor c-generator cpp-generator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cppguts",
    "package_url": "https://pypi.org/project/cppguts/",
    "platform": "",
    "project_url": "https://pypi.org/project/cppguts/",
    "project_urls": {
      "Download": "https://github.com/tierra-colada/cppguts/archive/refs/tags/v1.0.2.tar.gz",
      "Homepage": "https://github.com/tierra-colada/cppguts"
    },
    "release_url": "https://pypi.org/project/cppguts/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Tool aimed at C/C++ source code correction that allows to automatically find and copy/paste new function definition",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11606981,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7e516f2668313242a45294bbfc487be0528b9d3cb9f0d2b16d52258093a0c1e",
          "md5": "00facc32b02cd29c9377c51d57cd40ea",
          "sha256": "176bcc15fe8139e263b24fbcb17ac42cc9e44a3ac1e81a7063058d489f66ae85"
        },
        "downloads": -1,
        "filename": "cppguts-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "00facc32b02cd29c9377c51d57cd40ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 8499,
        "upload_time": "2021-09-20T16:58:24",
        "upload_time_iso_8601": "2021-09-20T16:58:24.672687Z",
        "url": "https://files.pythonhosted.org/packages/a7/e5/16f2668313242a45294bbfc487be0528b9d3cb9f0d2b16d52258093a0c1e/cppguts-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e07f6436ef2027d27ce32da8754c2968b3f7c591f65a1204457fc974e53c8b2",
          "md5": "cfd3200742db1fe9aadebc018ef49986",
          "sha256": "6c970c0d33553cedf7d2ff03e8fb08e614c39d70a77d4108b12bfbe41390aaba"
        },
        "downloads": -1,
        "filename": "cppguts-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cfd3200742db1fe9aadebc018ef49986",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 8690,
        "upload_time": "2021-09-20T17:39:50",
        "upload_time_iso_8601": "2021-09-20T17:39:50.745380Z",
        "url": "https://files.pythonhosted.org/packages/2e/07/f6436ef2027d27ce32da8754c2968b3f7c591f65a1204457fc974e53c8b2/cppguts-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e6afefc8560fbd1cc9ccc74f6a3dbdf0385647135772d1937c4b526adfb4cbe",
          "md5": "c982be0bf497cbf6cccdb6dad4a238e1",
          "sha256": "164a8ea71d338f3a6ac0d5c3a73e55a1fb7490e29fa94fa6436c5a601154bbfe"
        },
        "downloads": -1,
        "filename": "cppguts-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c982be0bf497cbf6cccdb6dad4a238e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 8777,
        "upload_time": "2021-09-21T01:35:47",
        "upload_time_iso_8601": "2021-09-21T01:35:47.446275Z",
        "url": "https://files.pythonhosted.org/packages/8e/6a/fefc8560fbd1cc9ccc74f6a3dbdf0385647135772d1937c4b526adfb4cbe/cppguts-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f079c0934542294273a19c09e9d90d942c7a619e1bc5d022ef5e6fd1d7d8d7c",
          "md5": "56efd3d43f4fdb8bc19b341a95d77984",
          "sha256": "5abd2ded6cf24e0393577631ca127397feb3db4d48a6da31781de7482c9daa14"
        },
        "downloads": -1,
        "filename": "cppguts-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "56efd3d43f4fdb8bc19b341a95d77984",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 8872,
        "upload_time": "2021-10-01T19:36:36",
        "upload_time_iso_8601": "2021-10-01T19:36:36.564237Z",
        "url": "https://files.pythonhosted.org/packages/4f/07/9c0934542294273a19c09e9d90d942c7a619e1bc5d022ef5e6fd1d7d8d7c/cppguts-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f079c0934542294273a19c09e9d90d942c7a619e1bc5d022ef5e6fd1d7d8d7c",
        "md5": "56efd3d43f4fdb8bc19b341a95d77984",
        "sha256": "5abd2ded6cf24e0393577631ca127397feb3db4d48a6da31781de7482c9daa14"
      },
      "downloads": -1,
      "filename": "cppguts-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "56efd3d43f4fdb8bc19b341a95d77984",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 8872,
      "upload_time": "2021-10-01T19:36:36",
      "upload_time_iso_8601": "2021-10-01T19:36:36.564237Z",
      "url": "https://files.pythonhosted.org/packages/4f/07/9c0934542294273a19c09e9d90d942c7a619e1bc5d022ef5e6fd1d7d8d7c/cppguts-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}