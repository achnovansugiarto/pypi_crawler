{
  "info": {
    "author": "Javier Guignard",
    "author_email": "kaajavi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Utilities"
    ],
    "description": "Django ShowMeQueries\n====================\n\n|version| |license|\n\nMaintained by `Platzi Team <https://platzi.com>`_\n\nThis project is a fork from `django-querycount <https://github.com/bradmontgomery/django-querycount>`_, this project\ngives you a middleware that prints statics of DB query in Django's runserver\nconsole output.\n\n|screenshot_old|\n\n|screenshot|\n\n\nInstallation\n------------\n\n    pip install django-showmequeries\n\nJust add ``querycount.middleware.QueryCountMiddleware`` to your\n``MIDDLEWARE``.\n\nNotice that django-showmequeries is hard coded to work only in DEBUG mode set to true\n\nSettings\n--------\n\nThere are two possible settings for this app: The first defines threshold\nvalues used to color output, while the second allows you customize requests\nthat will be ignored by the middleware.  The default settings are::\n\n    QUERYCOUNT = {\n        'THRESHOLDS': {\n            'MEDIUM': 50,\n            'HIGH': 200,\n            'MIN_TIME_TO_LOG':0,\n            'MIN_QUERY_COUNT_TO_LOG':0\n        },\n        'IGNORE_REQUEST_PATTERNS': [],\n        'IGNORE_SQL_PATTERNS': [],\n        'DISPLAY_DUPLICATES': None,\n        'RESPONSE_HEADER': 'X-DjangoQueryCount-Count'\n        'MAX_TIME_TO_CHECK_SLOWER': 0.1,\n    }\n\n\nThe ``QUERYCOUNT['THRESHOLDS']`` settings will determine how many queries are\ninterpreted as high or medium (and the color-coded output). In previous versions\nof this app, this settings was called ``QUERYCOUNT_THRESHOLDS`` and that setting\nis still supported.\n\nThe ``QUERYCOUNT['IGNORE_REQUEST_PATTERNS']`` setting allows you to define a list of\nregexp patterns that get applied to each request's path. If there is a match,\nthe middleware will not be applied to that request. For example, the following\nsetting would bypass the querycount middleware for all requests to the admin::\n\n    QUERYCOUNT = {\n        'IGNORE_REQUEST_PATTERNS': [r'^/admin/']\n    }\n\nThe ``QUERYCOUNT['IGNORE_SQL_PATTERNS']`` setting allows you to define a list of\nregexp patterns that ignored to statistic sql query count. For example, the following\nsetting would bypass the querycount middleware for django-silk sql query::\n\n    QUERYCOUNT = {\n        'IGNORE_SQL_PATTERNS': [r'silk_']\n    }\n\nThe ``QUERYCOUNT['RESPONSE_HEADER']`` setting allows you to define a custom response\nheader that contains the total number of queries executed. To disable this header, \nthe supply ``None`` as the value::\n\n    QUERYCOUNT = {\n        'RESPONSE_HEADER': None\n    }\n\nThe ``QUERYCOUNT['DISPLAY_DUPLICATES']`` setting allows you\nto control how the most common duplicate queries are displayed. If the setting\nis ``None`` (the default), duplicate queries are not displayed. Otherwise, this\nshould be an integer. For example, the following setting would always print the\n5 most duplicated queries::\n\n    QUERYCOUNT = {\n        'DISPLAY_DUPLICATES': 5,\n    }\n\n\nThe ``QUERYCOUNT['MAX_TIME_TO_CHECK_SLOWER']`` setting allows you\nto control what is a slower query. For example, the following setting would print the slower query,\nif the query is slower than 50ms::\n\n    QUERYCOUNT = {\n        'MAX_TIME_TO_CHECK_SLOWER': 0.05,\n    }\n\n\nLicense\n-------\n\nThis code is distributed under the terms of the MIT license.\n\nTesting\n-------\n\nRun `python manage.py test querycount` to run the tests. Note that this will\nmodify your settings so that your project is in DEBUG mode for the duration\nof the `querycount` tests.\n\n(side-note: this project needs better tests; for the moment, there are only\nsmoke tests that set up the middleware and call two simple test views).\n\n\nContributing\n------------\n\nBug fixes and new features are welcome! Fork this project and send a Pull Request\nto have your work included. Be sure to add yourself to ``AUTHORS.rst``.\n\n\n.. |version| image:: http://img.shields.io/pypi/v/django-querycount.svg?style=flat-square\n    :alt: Current Release\n    :target: https://pypi.python.org/pypi/django-querycount/\n\n.. |license| image:: http://img.shields.io/pypi/l/django-querycount.svg?style=flat-square\n    :alt: License\n    :target: https://pypi.python.org/pypi/django-querycount/\n\n.. |screenshot| image:: screenshot.png\n    :alt: django-showmequeries in action\n\n.. |screenshot_old| image:: screenshot_old.png\n    :alt: django-querycount in action\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kaajavi/django-showmequeries",
    "keywords": "django querycount queries database performance",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-showmequeries",
    "package_url": "https://pypi.org/project/django-showmequeries/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-showmequeries/",
    "project_urls": {
      "Homepage": "https://github.com/kaajavi/django-showmequeries"
    },
    "release_url": "https://pypi.org/project/django-showmequeries/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Middleware that Prints statics of DB queries to the runserver console.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12852829,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd67cab6b49d4c41cb01109f404335f382625626c1d7fa30bd4bfc42427d691d",
          "md5": "129b4e2d9b2d8a57e91d023e3e051686",
          "sha256": "7321a912c5dc918f8d1731632b8d8c24a4988f01ec56776cad7f00f76f43f04b"
        },
        "downloads": -1,
        "filename": "django-showmequeries-0.1.0-new.tar.gz",
        "has_sig": false,
        "md5_digest": "129b4e2d9b2d8a57e91d023e3e051686",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7092,
        "upload_time": "2022-02-10T17:39:15",
        "upload_time_iso_8601": "2022-02-10T17:39:15.771213Z",
        "url": "https://files.pythonhosted.org/packages/dd/67/cab6b49d4c41cb01109f404335f382625626c1d7fa30bd4bfc42427d691d/django-showmequeries-0.1.0-new.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd67cab6b49d4c41cb01109f404335f382625626c1d7fa30bd4bfc42427d691d",
        "md5": "129b4e2d9b2d8a57e91d023e3e051686",
        "sha256": "7321a912c5dc918f8d1731632b8d8c24a4988f01ec56776cad7f00f76f43f04b"
      },
      "downloads": -1,
      "filename": "django-showmequeries-0.1.0-new.tar.gz",
      "has_sig": false,
      "md5_digest": "129b4e2d9b2d8a57e91d023e3e051686",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7092,
      "upload_time": "2022-02-10T17:39:15",
      "upload_time_iso_8601": "2022-02-10T17:39:15.771213Z",
      "url": "https://files.pythonhosted.org/packages/dd/67/cab6b49d4c41cb01109f404335f382625626c1d7fa30bd4bfc42427d691d/django-showmequeries-0.1.0-new.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}