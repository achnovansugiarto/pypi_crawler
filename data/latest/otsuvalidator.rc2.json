{
  "info": {
    "author": "Otsuhachi",
    "author_email": "agequodagis.tufuiegoeris@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "- [概要](#概要)\r\n  - [インストール](#インストール)\r\n  - [モジュール](#モジュール)\r\n  - [継承規則](#継承規則)\r\n  - [実行例-バリデータ](#実行例-バリデータ)\r\n  - [コンバータの変換](#コンバータの変換)\r\n    - [実行例-コンバータ](#実行例-コンバータ)\r\n\r\n# 概要\r\n\r\nこのライブラリは値の正常性を検証するバリデータ群と、検証前に型変換を試みるコンバータ群です。  \r\nディスクリプタとして使用することで属性に不正な値が代入されるのを防止します。  \r\nまた、単独で使用することも可能です。  \r\n\r\nこのライブラリは以下の環境で作成されています。  \r\n`Windows10(64bit)`, `Python3.8.10`  \r\n\r\n## インストール\r\n\r\nインストール\r\n\r\n`pip install otsuvalidator`\r\n\r\nアップデート\r\n\r\n`pip install -U otsuvalidator`\r\n\r\nアンインストール\r\n\r\n`pip uninstall otsuvalidator`\r\n\r\n## モジュール\r\n\r\nモジュールは以下の3つが存在します。\r\n\r\nモジュール名|概要\r\n:--:|--\r\n[bases](#basesモジュールのクラス)|バリデータ、コンバータの基底クラスが定義されいる<br>自作のバリデータを定義するときに使用できる\r\n[validators](#validatorsモジュールのクラス)|バリデータが定義されている\r\n[converters](#convertersモジュールのクラス)|コンバータが定義されている\r\n\r\n\r\nomit in toc\r\n<!-- omit in toc -->\r\n### basesモジュールのクラス\r\n\r\n`Validator`と表記されている部分に関しては、バリデータ、コンバータ両方を指します。\r\n\r\nクラス|概要\r\n:--:|:--\r\nValidator|すべてのバリデータ、コンバータの基底クラス\r\nVContainer|コンテナ用のバリデータの基底クラス<br>中身が可変なクラスのバリデータを定義するときに使用する\r\nConverter|コンバータの基底クラス<br>セキュアさが重視される場面では使用しない\r\nCNoneable|`Validator`既定のバリデーションに加え、`None`を許可する<br>変換の可否は以下の2点に依存する<br>-渡した`Validator`がコンバータか否か<br>-所属する`VContainer`の`allow_convert`オプション\r\nCNumerical|数値型用コンバータの基底クラス<br>`value`に対し、`int`変換、`float`変換を試みるメソッドが定義されている<br>`complex`は想定されていない\r\n\r\n<!-- omit in toc -->\r\n### validatorsモジュールのクラス\r\n\r\nスーパークラスの表記がないものは`Validator`を継承しています。\r\n\r\nクラス|スーパークラス|概要|期待する型\r\n:--:|:--:|:--|:--:\r\nVBool||真偽値オブジェクトか|bool\r\nVChoice||選択肢の中から1つが選択されているか|Any\r\nVNumber||適切な数値か|int,flaot\r\nVFloat|VNumber|適切な浮動小数点数か|flaot\r\nVInt|VNumber|適切な整数か|int\r\nVPath||適切なパスか|pathlib.Path\r\nVString||適切な文字列か|str\r\nVRegex|VString|正規表現にマッチする適切な文字列か|str\r\nVDict|VContainer|適切な辞書か|dict\r\nVList|VContainer|適切なリストか|list\r\nVTuple|VContaner|適切なタプルか|tuple\r\nVTimedelta||適切な経過時間型か|datetime.timedelta\r\n\r\n<!-- omit in toc -->\r\n### convertersモジュールのクラス\r\n\r\nスーパークラスにコンバータが記載されていないクラスは`Converter`を継承しています。\r\n\r\nクラス|スーパークラス|概要\r\n:--:|:--:|:--\r\nCBool|VBool,Converter|一般に**Yes/Noとして解釈できる値**に対し、bool変換を試み、検証を行う<br>`bool(value)`では`True`になるものが`False`になったり例外が発生したりする\r\nCNumber|VNumber, CNumerical|`int`,`float`型への変換を試み、検証を行う\r\nCFloat|VFloat, CNumerical|`float`型への変換を試み、検証を行う\r\nCInt|VInt, CNumerical|`int`型への変換を試み、検証を行う\r\nCPath|VPath, Converter|`Path`型への変換を試み、検証を行う\r\nCString|VString, Converter|`str`型への変換を試み、検証を行う\r\nCTimedelta|VTimedelta, Converter|`datetime.timedelta`型への変換を試み、検証を行う\r\n\r\n## 継承規則\r\n\r\nきちんと動作するバリデータ、コンバータを定義するための規則です。  \r\n`CNoneable`は**継承しないでください。**\r\n\r\n<!-- no toc -->\r\n-   [Validator継承規則](#validator継承規則)\r\n-   [VContainer継承規則](#vcontainer継承規則)\r\n-   [Converter継承規則](#converter継承規則)\r\n\r\n<!-- omit in toc -->\r\n### Validator継承規則\r\n\r\n規則|概要|理由\r\n:--:|:--|:--\r\n命名|クラス名は`V{検証したいクラス名}`とする|管理のしやすさ\r\n継承|`Validator`を継承する|\r\n定義|`validate`メソッドを定義し、検証が通った場合には`value`を返す|拡張してコンバータを定義するときに必要\r\n変換|`value`の型を変換しない|変換と検証を行う場合はコンバータを使用する\r\n\r\n<!-- omit in toc -->\r\n### VContainer継承規則\r\n\r\n規則|概要|理由|\r\n:--:|:--|:--\r\n命名|クラス名は`V<検証したいクラス名>`とする|管理のしやすさ<br>本質的にはValidatorと変わらないので規則もそのまま適用\r\n継承|`VContainer`を継承する|\r\n定義|`validate`メソッドを定義し、検証が通った場合には`value`を返す<br>変換を許可する場合、`TEMPLATE`が`Validator`以外の場合など細かな違いを設定する必要がある|コンテナそのものの検証と中身の検証が必要\r\n変換|`value`の型を変換しない<br>`value`の各要素`v`に対してはオプション次第|`TEMPLATE`にコンバータを渡している場合、禁止されていない限り変換を行うのが自然なため\r\n\r\n<!-- omit in toc -->\r\n### Converter継承規則\r\n\r\n`CNumerical`についてもここに従ってください。\r\n\r\n規則|概要|理由\r\n:--:|:--|:--\r\n命名|クラス名は`C<変換検証したいクラス名>`とする|一目で変換を行うクラスと認識するため\r\n継承|`(検証したいクラスのバリデータ,コンバータ)`を継承する|`検証したいクラスのバリデータ.validate`メソッドを`validate`メソッド内で呼び出すため\r\n定義|`validate`メソッドを定義し、変換検証が通った場合には変換された`value`を返す<br>`super_validate`メソッドを定義し、`検証したいクラス.validate`メソッドを行えるようにする|VContainerなど、変換を許可したくない状況では`super_validate`を使用するため\r\n変換|`validate`メソッド内で変換を試みる<br>`super_validate`メソッドでは変換しない|定義で書いた通り無変換が必要になる場面もあるため\r\n\r\n## 実行例-バリデータ\r\n\r\n<!-- omit in toc -->\r\n### バリデータの実行例\r\n\r\nバリデータをディスクリプタとして使用している`Student`クラスを試しに使用します。\r\n<!-- omit in toc -->\r\n#### バリデータの実行例目次\r\n\r\n<!-- no toc -->\r\n- [前提コード](#バリデータ実行例-前提コード)\r\n- [nameの操作](#バリデータ実行例-nameの操作)\r\n- [ageの操作](#バリデータ実行例-ageの操作)\r\n- [genderの操作](#バリデータ実行例-genderの操作)\r\n- [gradesの操作](#バリデータ実行例-gradesの操作)\r\n- [hobbyの操作](#バリデータ実行例-hobbyの操作)\r\n- [addressの操作](#バリデータ実行例-addressの操作)\r\n- [成功](#バリデータ実行例-成功)\r\n\r\n<!-- omit in toc -->\r\n#### バリデータ実行例-前提コード\r\n\r\n[目次](#バリデータの実行例目次)に戻る\r\n\r\n説明は以下の条件を満たした環境で実行されることを想定しています。\r\n\r\n1. Python3.8以上がインストールされたWindows\r\n2. 本ライブラリがインストールされている\r\n3. 以下の`test.py`ファイルを生成し、`py -i test.py`、または`対話モード`で以下のコードが入力されている\r\n\r\n```python\r\n# test.py\r\nfrom otsuvalidator import (CNoneable, VChoice, VDict, VInt, VList, VRegex, VString)\r\n\r\n\r\nclass Student:\r\n    name = VString(1, 50, checker=str.istitle)  # 1文字以上50文字以下, str.istitleがTrueになる文字列\r\n    age = VInt(0, 150)  # 0以上150以下の整数\r\n    gender = VChoice('male', 'female', 'others')  # (male, female, others)のいずれか\r\n    grades = VDict(\r\n        # 以下の構造を持つ辞書, キー欠落不可, アクセス時に再検証を行わない\r\n        {\r\n            'Japanese':\r\n            VInt(0, 100),  # 0以上100以下の整数\r\n            'Social Studies':\r\n            VInt(0, 100),\r\n            'Math':\r\n            VDict(\r\n                # 以下のキーを持つ辞書, キー欠落可, アクセス時に再検証を行う\r\n                {\r\n                    'Math1': VInt(0, 100),\r\n                    'Math2': VInt(0, 100)\r\n                },\r\n                allow_missing_key=True,\r\n                monitoring_overwrite=True,\r\n            )\r\n        },\r\n        allow_missing_key=False,\r\n        monitoring_overwrite=False,\r\n    )\r\n    # 1文字以上の文字列だけのリスト Noneで無回答可 要素数は無制限\r\n    hobby = CNoneable(VList(VString(1)))\r\n    # [郵便番号, 都道府県, 市町村群]のリスト Noneで無回答可\r\n    address = CNoneable(VList([VRegex('^\\\\d{3}-?\\\\d{4}$'), VRegex('(?!.*\\\\d.*)'), VRegex('(?!.*\\\\d.*)')]))\r\n\r\n    def show_profile(self):\r\n        name = self.name\r\n        age = self.age\r\n        gender = self.gender\r\n        grades = self.grades\r\n        japanese = grades['Japanese']\r\n        social = grades['Social Studies']\r\n        math = grades['Math']\r\n        hobby = self.hobby\r\n        address = self.address\r\n        profiles = ('名前', '年齢', '性別', '国語', '社会', '数学', '趣味', '住所')\r\n        profile_values = (name, age, gender, japanese, social, math, hobby, address)\r\n        for title, value in zip(profiles, profile_values):\r\n            print(f'{title}: {value}')\r\n\r\n\r\notsuhachi = Student()\r\n```\r\n\r\n<!-- omit in toc -->\r\n#### バリデータ実行例-nameの操作\r\n\r\n[目次](#バリデータの実行例目次)に戻る\r\n\r\n`otsuhachi.name`を操作します。  \r\n`Student`の`name`属性は`VString(1, checker=str.istitle)`によって検証されます。\r\n\r\n```python\r\n\r\n# 失敗 (型が異なる)\r\n>>> otsuhachi.name = 28\r\nTraceback (most recent call last):\r\n...\r\nTypeError: 属性'name'はstr型である必要があります。(28: int)\r\n\r\n# 失敗 (最低文字数を満たしていない)\r\n>>> otsuhachi.name = ''\r\nTraceback (most recent call last):\r\n...\r\nValueError: 属性'name'は1文字以上である必要があります。('': str)\r\n\r\n# 失敗 (最大文字数を超過している)\r\n>>> otsuhachi.name = 'A' + ('a' * 100)\r\nTraceback (most recent call last):\r\n...\r\nValueError: 属性'name'は50文字以下である必要があります。('Aaaaaaaaa...aaaaaaaaa': str)\r\n\r\n# 失敗 (checkerがTrueを返さない)\r\n>>> otsuhachi.name = 'otsuhachi'\r\nTraceback (most recent call last):\r\n...\r\nValueError: 属性'name'は指定した形式に対応している必要があります。<method 'istitle' of 'str' objects>。('otsuhachi': str)\r\n\r\n# 成功\r\n>>> otsuhachi.name = 'Otsuhachi'\r\n>>> otsuhachi.name\r\n'Otsuhachi'\r\n```\r\n\r\n<!-- omit in toc -->\r\n#### バリデータ実行例-ageの操作\r\n\r\n[目次](#バリデータの実行例目次)に戻る\r\n\r\n`otsuhachi.age`を操作します。  \r\n`Student`の`age`属性は`VInt(0)`によって検証されます。\r\n\r\n```python\r\n\r\n#失敗 (型が異なる)\r\n>>> otsuhachi.age = 28.8\r\nTraceback (most recent call last):\r\n...\r\nTypeError: 属性'age'はint型である必要があります。(28.8: float)\r\n\r\n# 失敗 (最小値未満)\r\n>>> otsuhachi.age = -1\r\n...\r\nValueError: 属性'age'は0より小さい値を設定することはできません。(-1: int)\r\n\r\n# 失敗 (最大値超過)\r\n>>> otsuhachi.age = 280\r\nTraceback (most recent call last):\r\n...\r\nValueError: 属性'age'は150より大きい値を設定することはできません。(280: int)\r\n\r\n# 成功\r\n>>> otsuhachi.age = 28\r\n>>> otsuhachi.age\r\n28\r\n```\r\n\r\n<!-- omit in toc -->\r\n#### バリデータ実行例-genderの操作\r\n\r\n[目次](#バリデータの実行例目次)に戻る\r\n\r\n`otsuhachi.gender`を操作します。  \r\n`Student`の`gender`属性は`VChoice('male', 'female', 'others')`によって検証されます。\r\n\r\n\r\n```python\r\n\r\n# 失敗 (選択肢にない値)\r\n>>> otsuhachi.gender = None\r\nTraceback (most recent call last):\r\n...\r\nValueError: 属性'gender'は{'male', 'others', 'female'}のいずれかである必要があります。(None: NoneType)\r\n\r\n# 失敗 (選択肢にない値)\r\n>>> otsuhachi.gender = 'mal'\r\nTraceback (most recent call last):\r\n...\r\nValueError: 属性'gender'は{'male', 'others', 'female'}のいずれかである必要があります。('mal': str)\r\n\r\n# 成功\r\n>>> otsuhachi.gender = 'others'\r\n>>> otsuhachi.gender\r\n'others'\r\n>>> otsuhachi.gender = 'female'\r\n>>> otsuhachi.gender\r\n'female'\r\n>>> otsuhachi.gender = 'male'\r\n>>> otsuhachi.gender\r\n'male'\r\n```\r\n\r\n<!-- omit in toc -->\r\n#### バリデータ実行例-gradesの操作\r\n\r\n[目次](#バリデータの実行例目次)に戻る\r\n\r\n<!-- no toc -->\r\n- [gradesの概要](#gradesの概要)\r\n- [gradesの基本的な失敗と成功の例](#gradesの基本的な失敗と成功の例)\r\n- [gradesで起こりえる不正](#gradesで起こりえる不正)\r\n- [gradesで起こりえる不正の防止](#gradesで起こりえる不正の防止)\r\n\r\n`otsuhachi.garades`を操作します。  \r\n`Student`の`grades`は以下のように定義されたバリデータによって検証されます。\r\n\r\n```python\r\n\r\nVDict(\r\n    {\r\n        'Japanese': VInt(0, 100),\r\n        'Social Studies': VInt(0, 100),\r\n        'Math': VDict(\r\n            {\r\n                'Math1': VInt(0, 100),\r\n                'Math2': VInt(0, 100)\r\n            },\r\n            allow_missing_key=True,\r\n            monitoring_overwrite=True,\r\n        )\r\n    },\r\n    allow_missing_key=False,\r\n    monitoring_overwrite=False,\r\n)\r\n```\r\n\r\n<!-- omit in toc -->\r\n##### gradesの概要\r\n\r\n\r\n分解して考えてみます。\r\n\r\n- gradesが持つべきキーは(`Japanese`, `Social Studies`, `Math`)の3つ\r\n   - `Japanese`と`Social Studies`は`0～100`の整数値\r\n   - `Math`は(`Math1`, `Math2`)のキーを持つ辞書\r\n      - `Math1`と`Math2`は`0～100`の整数値\r\n      - `allow_missing_key`が`True`なのでキーを持たない辞書でも可\r\n      - `monitoring_overwrite`は`True`でも実質無関係\r\n- `allow_missing_key`が`False`なので、キーすべてが含まれている必要がある\r\n- `monitoring_overwrite`が`False`なので`otsuhachi.grades`をしても再検証が行われない\r\n\r\n以上のような設定のバリデータになっています。\r\n\r\n<!-- omit in toc -->\r\n##### gradesの基本的な失敗と成功の例\r\n\r\n```python\r\n\r\n# 失敗 (型が異なる)\r\n>>> otsuhachi.grades = ['Japanese', 'Social Studies', 'Math']\r\nTraceback (most recent call last):\r\n...\r\nTypeError: 属性'grades'はdict型である必要があります。(['Japanese', 'Social Studies', 'Math']: list)\r\n\r\n# 失敗 (必須キーの欠落)\r\n>>> otsuhachi.grades = {'Japanese': 68}\r\nTraceback (most recent call last):\r\n...\r\nValueError: 属性'grades'は以下のキーを設定する必要があります。({'Math', 'Social Studies'})。({'Japanese': 68}: dict)\r\n\r\n# 失敗 (不正な値)\r\n>>> otsuhachi.grades = {'Japanese': 68, 'Social Studies': 28, 'Math': 66}\r\nTraceback (most recent call last):\r\n...\r\nTypeError: dict型である必要があります。(66: int)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n...\r\nTypeError: キー'Math'は不正な値です。(66: int)\r\n\r\n# 失敗 (不正な値: 入れ子構造)\r\n>>> otsuhachi.grades = {'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 2.8}}\r\nTraceback (most recent call last):\r\n...\r\nTypeError: int型である必要があります。(2.8: float)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n...\r\nTypeError: キー'Math1'は不正な値です。(2.8: float)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n...\r\nTypeError: キー'Math'は不正な値です。({'Math1': 2.8}: dict)\r\n\r\n# 失敗 (未定義のキー)\r\n>>> otsuhachi.grades = {'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66}, 'Science': 70}\r\nTraceback (most recent call last):\r\n...\r\nValueError: 属性'grades'は以下のキーを設定することはできません。({'Science'})。({'Japanese...ence': 70}: dict)\r\n\r\n# 成功\r\n>>> otsuhachi.grades = {'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66, 'Math2': 56}}\r\n>>> otsuhachi.grades\r\n{'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66, 'Math2': 56}}\r\n\r\n# Math内はキー欠落可\r\n>>> otsuhachi.grades = {'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66}}\r\n>>> otsuhachi.grades\r\n{'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66}}\r\n```\r\n\r\n<!-- omit in toc -->\r\n##### gradesで起こりえる不正\r\n\r\nこの設定では書き換えに対して無力です。  \r\n`otsuhachi.grades`が呼び出されたとき限定で検証が行われるので、以下のような操作では不正が行えます。\r\n\r\n```python\r\n\r\n# 正常な形式でgradesをセット\r\n>>> otsuhachi.grades = {'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66, 'Math2': 56}}\r\n>>> otsuhachi.grades\r\n{'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66, 'Math2': 56}}\r\n\r\n# grades['Math']を66にする\r\n>>> otsuhachi.grades['Math'] = 66\r\n>>> otsuhachi.grades\r\n{'Japanese': 68, 'Social Studies': 28, 'Math': 66}\r\n```\r\n\r\n<!-- omit in toc -->\r\n##### gradesで起こりえる不正の防止\r\n\r\n不正の防止には主に2つの手段があります。\r\n\r\n1. バリデータをクラス外で定義し、必要に応じて検証を行う\r\n2. `monitoring_overwrite`を`True`にする\r\n\r\n1.の方法では手間が掛かりますが、不要な時に検証されることがないので比較的高速な動作が期待されます。  \r\nまた`monitoring_overwrite`は`False`でなければ2の方法と変わりありません。  \r\n\r\n2.の方法では`otsuhachi.grades`が呼ばれるたびに検証されるので手軽です。  \r\n\r\nどちらも書き換えは許してしまいますが、最終的に値を利用するタイミングでは検証が行われます。\r\n\r\n```python\r\n\r\n# 1の方法\r\nGRADES_VALIDATOR = VDict(\r\n    {\r\n        'Japanese': VInt(0, 100),\r\n        'Social Studies': VInt(0, 100),\r\n        'Math': VDict(\r\n            {\r\n                'Math1': VInt(0, 100),\r\n                'Math2': VInt(0, 100)\r\n            },\r\n            allow_missing_key=True,\r\n            monitoring_overwrite=True,\r\n        )\r\n    },\r\n    allow_missing_key=False,\r\n    monitoring_overwrite=False,\r\n)\r\n\r\nclass Student:\r\n    # ...部分は前提コード通りです。\r\n    ...\r\n    grades = GRADES_VALIDATOR\r\n    ...\r\n\r\n# 値のセット\r\notsuhachi = Student()\r\notsuhachi.grades = {'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66, 'Math2': 56}}\r\n>>> otsuhachi.grades\r\n{'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66, 'Math2': 56}}\r\n\r\n# 不正な書き換え\r\n>>> otsuhachi.grades['Math'] = 66\r\n>>> otsuhachi.grades\r\n{'Japanese': 68, 'Social Studies': 28, 'Math': 66}\r\n\r\n# 不正が困る場面\r\n>>> GRADES_VALIDATOR.validate(otsuhachi.grades)\r\nTraceback (most recent call last):\r\n...\r\nTypeError: dict型である必要があります。(66: int)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n...\r\nTypeError: キー'Math'は不正な値です。(66: int)\r\n\r\n```\r\n\r\n```python\r\n\r\n# 2の方法\r\nclass Student:\r\n    # ...部分は前提コード通りです。\r\n    ...\r\n    grades = VDict(\r\n        ...\r\n        monitoring_overwrite=True,\r\n    )\r\n    ...\r\n    \r\n# 値のセット\r\notsuhachi = Student()\r\n>>> otsuhachi.grades = {'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66, 'Math2': 56}}\r\n>>> otsuhachi.grades\r\n{'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66, 'Math2': 56}}\r\n\r\n# 不正な書き換え\r\n>>> otsuhachi.grades['Math'] = 66\r\n>>> otsuhachi.grades\r\nTraceback (most recent call last):\r\n...\r\nTypeError: dict型である必要があります。(66: int)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n...\r\nTypeError: キー'Math'は不正な値です。(66: int)\r\n```\r\n\r\n<!-- omit in toc -->\r\n#### バリデータ実行例-hobbyの操作\r\n\r\n[目次](#バリデータの実行例目次)に戻る\r\n\r\n`otsuhachi.hobby`を操作します。  \r\n`Student`の`hobby`属性は`CNoneable(VList(VString(1)))`によって検証されます。\r\n\r\n`CNoneable`はバリデータに`None`を許可するクラスです。  \r\n今回は`otsuhachi.hobby`が`None`または`VList(VString(1))`の条件を満たす時に検証を通過します。\r\n\r\n```python\r\n\r\n# 失敗 (CNoneableはNoneを許可するだけで、初期値をNoneにはしない)\r\n>>> otsuhachi.hobby\r\nTraceback (most recent call last):\r\n...\r\nAttributeError: 'Student' object has no attribute '_hobby'\r\n\r\n# 失敗 (不正な値)\r\n>>> otsuhachi.hobby = 1\r\nTraceback (most recent call last):\r\n...\r\nTypeError: list型である必要があります。(1: int)\r\n\r\n# 失敗 (リスト内の値が不正)\r\n>>> otsuhachi.hobby = [1]\r\nTraceback (most recent call last):\r\n...\r\nTypeError: str型である必要があります。(1: int)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n...\r\nTypeError: インデックス0は不正な値です。(1: int)\r\n\r\n# 成功\r\n>>> otsuhachi.hobby = None\r\n>>> print(otsuhachi.hobby)\r\nNone\r\n\r\n# 成功\r\n>>> otsuhachi.hobby = ['PC', 'game']\r\n>>> otsuhachi.hobby\r\n['PC', 'game']\r\n\r\n# 失敗 (不正な値を追加後に参照)\r\n>>> otsuhachi.hobby.append(1)\r\n>>> otsuhachi.hobby\r\nTraceback (most recent call last):\r\n...\r\nTypeError: str型である必要があります。(1: int)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n...\r\nTypeError: インデックス2は不正な値です。(1: int)\r\n```\r\n\r\n\r\n<!-- omit in toc -->\r\n#### バリデータ実行例-addressの操作\r\n\r\n[目次](#バリデータの実行例目次)に戻る\r\n\r\n`otsuhachi.address`を操作します。  \r\n`Student`の`address`属性は`CNoneable(VList([VRegex('^\\\\d{3}-?\\\\d{4}$'), VRegex('(?!.*\\\\d.*)')`によって検証されます。  \r\n基本的な失敗例、成功例は[hobby](#バリデータ実行例-hobbyの操作)を参照してください。  \r\n`address`属性の特殊な点は`VList`の`TEMPLATE`が`list型`である点です。  \r\n\r\n`value[i]`が`TEMPLATE[i]`でそれぞれ検証されます。\r\n\r\n```python\r\n\r\n# 失敗 (要素数が足りていない)\r\n>>> otsuhachi.address = []\r\nTraceback (most recent call last):\r\n...\r\nValueError: あと3個設定する必要があります。([]: list)\r\n\r\n# 失敗 (要素数が多い)\r\n>>> otsuhachi.address = ['', '', '', '']\r\nTraceback (most recent call last):\r\n...\r\nValueError: あと1個減らす必要があります。(['', '', '', '']: list)\r\n\r\n# 失敗 (不正な値)\r\n>>> otsuhachi.address = ['0000000000', 'Otsu Prefecture2', 'OtsuCity']\r\nTraceback (most recent call last):\r\n...\r\nValueError: 正規表現'^\\\\d{3}-?\\\\d{4}$'に対応している必要があります。('0000000000': str)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n...\r\nValueError: インデックス0は不正な値です。('0000000000': str)\r\n\r\n# 失敗 (不正な値)\r\n>>> otsuhachi.address = ['282-2828', 'Otsu Prefecture2', 'OtsuCity']\r\nTraceback (most recent call last):\r\n...\r\nValueError: 正規表現'(?!.*\\\\d.*)'に対応している必要があります。('Otsu Prefecture2': str)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n...\r\nValueError: インデックス1は不正な値です。('Otsu Prefecture2': str)\r\n\r\n\r\n# 成功\r\n>>> otsuhachi.address = ['282-2828', 'Otsu Prefecture', 'OtsuCity']\r\n>>> otsuhachi.address\r\n['282-2828', 'Otsu Prefecture', 'OtsuCity']\r\n```\r\n\r\n<!-- omit in toc -->\r\n#### バリデータ実行例-成功\r\n\r\n[目次](#バリデータの実行例目次)に戻る\r\n\r\nすべてのバリデータでの検証が終われば、設計通りにクラスが動作します。\r\n\r\n```python\r\n\r\n>>> otsuhachi.name = 'Otsuhachi'\r\n>>> otsuhachi.age = 28\r\n>>> otsuhachi.gender = 'male'\r\n>>> otsuhachi.grades = {'Japanese': 68, 'Social Studies': 28, 'Math': {'Math1': 66, 'Math2': 56}}\r\n>>> otsuhachi.hobby = ['PC', 'game']\r\n>>> otsuhachi.address = ['282-2828', 'Otsu Prefecture', 'OtsuCity']\r\n>>> otsuhachi.show_profile()\r\n名前: Otsuhachi\r\n年齢: 28\r\n性別: male\r\n国語: 68\r\n社会: 28\r\n数学: {'Math1': 66, 'Math2': 56}\r\n趣味: ['PC', 'game']\r\n住所: ['282-2828', 'Otsu Prefecture', 'OtsuCity']\r\n```\r\n\r\n## コンバータの変換\r\n\r\n基本的にコンバータは`C<対象の型名>`で、`<対象の型>(value)`で変換できるかどうかを試すのが基本になります。  \r\nたとえば`CString`ならば`str(value)`を試みてから検証を行います。\r\nしかし、コンバータによってはその基本に従わないものがあります。  \r\n`CInt`は、`int(value)`できなかった場合に`int(float(value))`を試します(`CFloat`はその逆の動作です)。  \r\nこれはまだ理解しやすい変換ですが、以下の2つのコンバータは若干特殊な挙動の変換を行います。  \r\nこれは`json`ファイルや`標準入力`などで受け取った場合の変換処理を容易に行うためです。\r\n\r\n<!-- omit in toc -->\r\n### CTimedelta\r\n\r\nこのコンバータは`str`, `dict`, `list`, `tuple`いずれかの型である場合に`Timedelta`型に変換を試みます。  \r\n変換に必要な形式は以下の通りです。\r\n\r\n型|形式\r\n:--|:--\r\nstr|`(<日>( )day(s, ))<時>:<分>:<秒>(.<ミリ秒>)`<br>`()`で囲まれた部分の有無は任意<br>要は`str(<timedeltaインスタンス>)`で変換された後の形式(厳密には日と時間の間の空白を問わないなど若干異なる)\r\ndict|`timedelta(**value)`でインスタンスを生成できる形式\r\nlist, tuple|`timedelta(*value)`でインスタンスを生成できる形式\r\n\r\n<!-- omit in toc -->\r\n### CBool\r\n\r\nこのコンバータは以下の標準定義の項目を`bool`に変換します。  \r\nまた、自分で`True`になる値、`False`になる値を設定することも可能です。  \r\nさらに、`f(value)`が真偽値を返す関数`f`のタプルを渡して判定することも可能です。\r\n\r\n以下が標準定義の真偽値対応表です。\r\n`str`型は`value.lower()`されたあとで判定されるので、大文字小文字を問いません。\r\n\r\n型|True|False\r\n:--:|:--:|:--:\r\nbool|True|False\r\nstr|'true', 'yes', 'y', '1'|'false', 'no', 'n', '0'\r\nint|1|0\r\nfloat|1.0|0.0\r\n\r\n### 実行例-コンバータ\r\n\r\n\r\n```python\r\n\r\nfrom datetime import timedelta\r\nfrom typing import cast\r\n\r\nfrom otsuvalidator import CBool, CTimedelta\r\n\r\n\r\nclass SampleClass:\r\n    bool_dflt: bool = cast(bool, CBool())\r\n    bool_user: bool = cast(bool, CBool(true_data=('はい', ), false_data=('いいえ', )))\r\n    td_timedelta: timedelta = cast(timedelta, CTimedelta())\r\n    td_str: timedelta = cast(timedelta, CTimedelta())\r\n    td_tuple: timedelta = cast(timedelta, CTimedelta())\r\n    td_dict: timedelta = cast(timedelta, CTimedelta())\r\n\r\n    def show(self):\r\n        keys = (\r\n            'bool_dflt',\r\n            'bool_user',\r\n            'td_timedelta',\r\n            'td_str',\r\n            'td_tuple',\r\n            'td_dict',\r\n        )\r\n        for k in keys:\r\n            v = getattr(self, k)\r\n            print(f'{k}: {v}({type(v).__name__})')\r\n\r\n\r\ns = SampleClass()\r\ntd = timedelta(days=1, seconds=2, microseconds=3, milliseconds=4, minutes=5, hours=6, weeks=7)\r\n# s.bool_dflt = 'はい'  # Error\r\n\r\n# 一般にYes/Noとして解釈されるものはboolに変換\r\ns.bool_dflt = 'yes'\r\n\r\n# ユーザ定義のTrueなのでTrueになる\r\ns.bool_user = 'はい'\r\n\r\n# 無変換でtimedelta\r\ns.td_timedelta = td\r\n\r\n# 特定形式の文字列をtimedeltaに変換\r\ns.td_str = '50 days, 0:0:1'\r\n\r\n# 特定形式のタプル、リストをtimedeltaに変換\r\ns.td_tuple = (1, 2, 3, 4, 5, 7)\r\n\r\n# 特定形式の辞書をtimedeltaに変換\r\ns.td_dict = {'seconds': 2, 'microseconds': 3, 'milliseconds': 4, 'minutes': 5, 'hours': 6}\r\n\r\n# 属性名: str(属性)(属性の型)を出力\r\ns.show()\r\n```\r\n\r\n```console\r\n\r\nbool_dflt: True(bool)\r\nbool_user: True(bool)\r\ntd_timedelta: 50 days, 6:05:02.004003(timedelta)\r\ntd_str: 50 days, 0:00:01(timedelta)\r\ntd_tuple: 1 day, 7:05:02.004003(timedelta)\r\ntd_dict: 6:05:02.004003(timedelta)\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Otsuhachi/OtsuValidator",
    "keywords": "Python validator descriptor converter",
    "license": "MIT License  Copyright (c) 2021 Otsuhachi  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "otsuvalidator",
    "package_url": "https://pypi.org/project/otsuvalidator/",
    "platform": null,
    "project_url": "https://pypi.org/project/otsuvalidator/",
    "project_urls": {
      "Homepage": "https://github.com/Otsuhachi/OtsuValidator"
    },
    "release_url": "https://pypi.org/project/otsuvalidator/2.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "単体でもディスクリプタとしても使用できるバリデータライブラリ",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16418158,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d71ec682f78218ce8d960ddd0f999be8857deb71e7d95e84e31cdbc07253c8b3",
          "md5": "22bbc12cf06243d9e5e584d55818608a",
          "sha256": "ff418322314f5af44e3ed645a32ac2a643b6ea5f9f9df7d8e55ab4fc2291591e"
        },
        "downloads": -1,
        "filename": "otsuvalidator-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22bbc12cf06243d9e5e584d55818608a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20074,
        "upload_time": "2023-01-13T13:55:58",
        "upload_time_iso_8601": "2023-01-13T13:55:58.723651Z",
        "url": "https://files.pythonhosted.org/packages/d7/1e/c682f78218ce8d960ddd0f999be8857deb71e7d95e84e31cdbc07253c8b3/otsuvalidator-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "116b5d159dbbd49de59bd92c9ecb5de6f478ca7485b1c7d764c597962690736d",
          "md5": "a554bcd08a0f0cb5fc01eef803fee41a",
          "sha256": "f2992dadea42c4fe126729ae86a24dc8b77c33eec352797871efa8989cc2c956"
        },
        "downloads": -1,
        "filename": "otsuvalidator-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a554bcd08a0f0cb5fc01eef803fee41a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25515,
        "upload_time": "2023-01-13T13:56:00",
        "upload_time_iso_8601": "2023-01-13T13:56:00.499878Z",
        "url": "https://files.pythonhosted.org/packages/11/6b/5d159dbbd49de59bd92c9ecb5de6f478ca7485b1c7d764c597962690736d/otsuvalidator-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e86af3580a0eca5c3472d4cc977ac25533137215b98f4777bc2b18a4196f12a0",
          "md5": "7599870dff7aa911530c4a047ecbde36",
          "sha256": "1be10270236e7637b5d98e0da33dd357e2db066509f821421a31ec0d026b1e48"
        },
        "downloads": -1,
        "filename": "otsuvalidator-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7599870dff7aa911530c4a047ecbde36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19729,
        "upload_time": "2023-01-13T14:10:36",
        "upload_time_iso_8601": "2023-01-13T14:10:36.729511Z",
        "url": "https://files.pythonhosted.org/packages/e8/6a/f3580a0eca5c3472d4cc977ac25533137215b98f4777bc2b18a4196f12a0/otsuvalidator-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80f9d9f6305829e0153afd4cba320fed242e003c6c422dfaf9b3287eff2b00bb",
          "md5": "4313d051b206ff1b494dbcff287cdb4b",
          "sha256": "dd68c43bd5e2f831b558de998bb68ae3df9534ce464f48def6c961f7846b2524"
        },
        "downloads": -1,
        "filename": "otsuvalidator-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4313d051b206ff1b494dbcff287cdb4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 24780,
        "upload_time": "2023-01-13T14:10:38",
        "upload_time_iso_8601": "2023-01-13T14:10:38.758643Z",
        "url": "https://files.pythonhosted.org/packages/80/f9/d9f6305829e0153afd4cba320fed242e003c6c422dfaf9b3287eff2b00bb/otsuvalidator-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e86af3580a0eca5c3472d4cc977ac25533137215b98f4777bc2b18a4196f12a0",
        "md5": "7599870dff7aa911530c4a047ecbde36",
        "sha256": "1be10270236e7637b5d98e0da33dd357e2db066509f821421a31ec0d026b1e48"
      },
      "downloads": -1,
      "filename": "otsuvalidator-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7599870dff7aa911530c4a047ecbde36",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 19729,
      "upload_time": "2023-01-13T14:10:36",
      "upload_time_iso_8601": "2023-01-13T14:10:36.729511Z",
      "url": "https://files.pythonhosted.org/packages/e8/6a/f3580a0eca5c3472d4cc977ac25533137215b98f4777bc2b18a4196f12a0/otsuvalidator-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "80f9d9f6305829e0153afd4cba320fed242e003c6c422dfaf9b3287eff2b00bb",
        "md5": "4313d051b206ff1b494dbcff287cdb4b",
        "sha256": "dd68c43bd5e2f831b558de998bb68ae3df9534ce464f48def6c961f7846b2524"
      },
      "downloads": -1,
      "filename": "otsuvalidator-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4313d051b206ff1b494dbcff287cdb4b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 24780,
      "upload_time": "2023-01-13T14:10:38",
      "upload_time_iso_8601": "2023-01-13T14:10:38.758643Z",
      "url": "https://files.pythonhosted.org/packages/80/f9/d9f6305829e0153afd4cba320fed242e003c6c422dfaf9b3287eff2b00bb/otsuvalidator-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}