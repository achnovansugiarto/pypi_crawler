{
  "info": {
    "author": "Peter Kiss",
    "author_email": "peter.kiss@linuxadm.hu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "# Redis-Streams \n\nThis package builds on [Redis Streams](https://redis.io/topics/streams-intro) and provides an easy to use interface for batch collection and processing. Simplifies the consumer group and consumers management.\nDesigned for a highly available, scalable and distributed environment, it thus offers, in addition to the main functionality, monitoring and scaling capabilities. \n\nThe main idea is that Redis Streams supports several message producers. The messages  then organized into consumer groups where multiple consumers can collect a batch of items, process them and acknowledge the successfully processed ones.\nIf processing fails, the message has not been acknowledged will be part of the next batch. In case of consumer failure the monitor component will re-assign the related messages to a healthy consumer this way messages don't get lost.\nOptional scaling component monitors incoming/processed message rate and suggests consumer scale if necessary\n\n## Installation\n\nLatest version:\n```\npip3 install redis-streams\n```\n\n## Components\nOverview of the components\n![Redis Streams](https://tgrall.github.io/assets/images/redis-streams-101-img-1-2968c7ae8874c27aa176d161aa05a1d1.png \"Redis Stream\")\n*Image source: [tgrall.github.io](https://tgrall.github.io/blog/2019/09/02/getting-with-redis-streams-and-java)*\n\n### Provider\nAs its name suggests, this component is responsible for providing the messages in the stream. Redis supports multiple providers.\n#### Example code\n```python\nredis_conn = Redis()\nsample_data = {\"message\": \"stuff goes here\"}\nredis_conn.xadd(name=STREAM, fields=sample_data)\n```\n### Consumer\nThe consumer registers in the consumer group and start fetching for available messages. Once a preconfigured batch size is reached, it gives back the list of items to the caller which then can acknowledge this way remove from the Stream the message.\nThe consumer implementation returns after the preconfigured maximum weight time, even if the lot is not full. This way the items won't wait long in the stream\n#### Example code\n```python\n# It is crucial to enable \"decode_response\" feature of Redis\nredis_conn = Redis(decode_responses=True)\nconsumer = Consumer(\n        redis_conn=redis_conn,\n        stream=STREAM,\n        consumer_group=GROUP,\n        batch_size=10,\n        max_wait_time_ms=30000\n    )\nwhile True:\n    messages = consumer.get_items()\n    total_no_of_messages = len(messages)\n    for i, item in enumerate(messages):\n        print(f\"Pocessing {i}/{total_no_of_messages} message:{item}\")\n        process_message(item=item)\n        consumer.remove_item_from_stream(item_id=item.msgid)\n```\n### Monitor\nPeriodically check the activity of the consumers warns if they are idle  - not fetching message from the Stream for longer than the preconfigured inactivity threshold or have more assigned messages than the batch size. Automatic or on-demand cleanup are also supported.\n#### Example code\n```python\nmonitor = Monitor(\n    redis_conn=Redis(),\n    stream=STREAM,\n    consumer_group=GROUP,\n    batch_size=10,   # batch size has to be tha same as for consumers \n)\nmonitor.collect_monitoring_data(auto_cleanup=True)\nmonitor.print_monitoring_data()\n```\nOutput\n```\n+-------------------------+-------------+-----------------+----------------------------------+\n|             Consumer id |   Idle time |   Pending items | Status                           |\n+=========================+=============+=================+==================================+\n| b'29102140026848155456' |         923 |               7 | OK                               |\n+-------------------------+-------------+-----------------+----------------------------------+\n| b'29104139791624517440' |      294191 |               5 | WARNING - idle for long time     |\n+-------------------------+-------------+-----------------+----------------------------------+\n| b'29144140168467982144' |      361502 |               8 | WARNING - idle for long time     |\n+-------------------------+-------------+-----------------+----------------------------------+\n| b'29304140033034540864' |        8658 |              11 | WARNING - too many pending items |\n+-------------------------+-------------+-----------------+----------------------------------+\n| b'29312139940580673344' |       11734 |              58 | WARNING - too many pending items |\n+-------------------------+-------------+-----------------+----------------------------------+\n| b'29314139867734665024' |       14216 |               1 | OK                               |\n+-------------------------+-------------+-----------------+----------------------------------+\n```\n### Scaler\nBy checking the number of messages waiting to be assigned and the number of pending items, utilization ratio can be calculated. Once this rate crosses a lower (scale in) or higher (scale out) the code will give a suggestion of scale in / out. \n#### Example code\n```python\nscaler = Scaler(\n    redis_conn=Redis(decode_responses=True),\n    stream=STREAM,\n    consumer_group=GROUP\n)\nscaler.collect_metrics()\nrate, suggestion = scaler.get_scale_decision(\n    scale_out_rate=60, scale_in_rate=20\n)\nprint(\n    f\"Consumers should be {suggestion} as stream length \"\n    f\"({scaler.stream_lenght}) / pending ({scaler.stream_pending}) \"\n    f\"rate is {rate}%\"\n)\n```\nOutput\n```\nConsumers should be IN as stream length (11) / pending (83) rate is 13.253%\nConsumers should be NO_SCALE as stream length (18) / pending (79) rate is 22.7848%\n\n```\n## License\n This project is licensed under the terms of the GPL3.0.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KissPeter/redis-streams/",
    "keywords": "",
    "license": "GNU General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "redis-streams",
    "package_url": "https://pypi.org/project/redis-streams/",
    "platform": null,
    "project_url": "https://pypi.org/project/redis-streams/",
    "project_urls": {
      "Changes": "https://github.com/KissPeter/redis-streams//releases",
      "Code": "https://github.com/KissPeter/redis-streams",
      "Documentation": "https://github.com/KissPeter/redis-streams",
      "Homepage": "https://github.com/KissPeter/redis-streams/",
      "Issue tracker": "https://github.com/KissPeter/redis-streams//issues"
    },
    "release_url": "https://pypi.org/project/redis-streams/0.2.0/",
    "requires_dist": [
      "redis",
      "tabulate"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Redis Streams client implementation for high availability usage including consumer, monitor and scaler implementation",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16476307,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96c44593d0fb61a8ed9064770d45c9814944170d4ebc1349465b1dfd3ad682a9",
          "md5": "5df8b6c66ff9a6f5ae894315a5c124ca",
          "sha256": "2b8ca541bc118595b7390a81045819fa5767236d7eed798c0ab3403688f84765"
        },
        "downloads": -1,
        "filename": "redis_streams-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5df8b6c66ff9a6f5ae894315a5c124ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 23465,
        "upload_time": "2022-02-05T20:07:05",
        "upload_time_iso_8601": "2022-02-05T20:07:05.081562Z",
        "url": "https://files.pythonhosted.org/packages/96/c4/4593d0fb61a8ed9064770d45c9814944170d4ebc1349465b1dfd3ad682a9/redis_streams-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5a15903dd7fff3d713de6bac400300baf9297de518486934e481137d41d0868",
          "md5": "5644179054e7f605ef7857c258741072",
          "sha256": "02a1aed7a1cfcf1ed09f6173c457083b76184ad27d260b53bbfc3fe422a51249"
        },
        "downloads": -1,
        "filename": "redis-streams-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5644179054e7f605ef7857c258741072",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 21574,
        "upload_time": "2022-02-05T20:07:06",
        "upload_time_iso_8601": "2022-02-05T20:07:06.882756Z",
        "url": "https://files.pythonhosted.org/packages/d5/a1/5903dd7fff3d713de6bac400300baf9297de518486934e481137d41d0868/redis-streams-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfa359550d48edbf6e28114ea09ae81dc398ac5c43fd4ddf08edc8e41660baa7",
          "md5": "d1ba039d1312e92485c47e0593b3c9bb",
          "sha256": "448f06fd8dbad131b479022fce3e19403e0cb5adb0a28a33a0798a2ff7bc24eb"
        },
        "downloads": -1,
        "filename": "redis_streams-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1ba039d1312e92485c47e0593b3c9bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 23475,
        "upload_time": "2023-01-18T20:28:30",
        "upload_time_iso_8601": "2023-01-18T20:28:30.686365Z",
        "url": "https://files.pythonhosted.org/packages/df/a3/59550d48edbf6e28114ea09ae81dc398ac5c43fd4ddf08edc8e41660baa7/redis_streams-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "365cf2be040d9ebaabd98c5be4ff0c824785f2293b4c14eb43d8294dcce3f12d",
          "md5": "0fec316daaaf2e3da8cb4e673ebc4fb1",
          "sha256": "953c3f8208ad7e09bdf38a5391199695b7d7aba3ac5f9495c713e59c8888f3a9"
        },
        "downloads": -1,
        "filename": "redis-streams-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0fec316daaaf2e3da8cb4e673ebc4fb1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 21656,
        "upload_time": "2023-01-18T20:28:32",
        "upload_time_iso_8601": "2023-01-18T20:28:32.396752Z",
        "url": "https://files.pythonhosted.org/packages/36/5c/f2be040d9ebaabd98c5be4ff0c824785f2293b4c14eb43d8294dcce3f12d/redis-streams-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dfa359550d48edbf6e28114ea09ae81dc398ac5c43fd4ddf08edc8e41660baa7",
        "md5": "d1ba039d1312e92485c47e0593b3c9bb",
        "sha256": "448f06fd8dbad131b479022fce3e19403e0cb5adb0a28a33a0798a2ff7bc24eb"
      },
      "downloads": -1,
      "filename": "redis_streams-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1ba039d1312e92485c47e0593b3c9bb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 23475,
      "upload_time": "2023-01-18T20:28:30",
      "upload_time_iso_8601": "2023-01-18T20:28:30.686365Z",
      "url": "https://files.pythonhosted.org/packages/df/a3/59550d48edbf6e28114ea09ae81dc398ac5c43fd4ddf08edc8e41660baa7/redis_streams-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "365cf2be040d9ebaabd98c5be4ff0c824785f2293b4c14eb43d8294dcce3f12d",
        "md5": "0fec316daaaf2e3da8cb4e673ebc4fb1",
        "sha256": "953c3f8208ad7e09bdf38a5391199695b7d7aba3ac5f9495c713e59c8888f3a9"
      },
      "downloads": -1,
      "filename": "redis-streams-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0fec316daaaf2e3da8cb4e673ebc4fb1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 21656,
      "upload_time": "2023-01-18T20:28:32",
      "upload_time_iso_8601": "2023-01-18T20:28:32.396752Z",
      "url": "https://files.pythonhosted.org/packages/36/5c/f2be040d9ebaabd98c5be4ff0c824785f2293b4c14eb43d8294dcce3f12d/redis-streams-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}