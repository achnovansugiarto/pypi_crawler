{
  "info": {
    "author": "Rafsan Mazumder",
    "author_email": "rafsan.mazumder@bytedance.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: SQL",
      "Topic :: Database",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# ByteHouse SQLAlchemy Connector\n## Introduction\nByteHouse SQLAlchemy connector is ByteHouse dialect for `SQLAlchemy`, which is the Python SQL toolkit and object \nrelational mapper enabling application developers the full power and flexibility of SQL. The connector is built on \ntop of ByteHouse python driver which follows Python DB API 2.0 specification. The connector supports both SQLAlchemy \nCore and SQLAlchemy ORM APIs. \n## Requirements\nPython v3.6 or higher\n## Installation from PyPI\nThe latest release version can be installed from here:\n```commandline\npip install bytehouse-sqlalchemy\n```\n## Installation from github\nThe current development version can be installed from here:\n```commandline\npip install git+https://github.com/bytehouse-cloud/bytehouse-sqlalchemy@master#egg=bytehouse-driver\n```\n## Creating ByteHouse Account\nYou need to create a ByteHouse account in order to use Python Driver. You can simply create a free account with \nthe process mentioned in our official website documentation: https://docs.bytehouse.cloud/en/docs/quick-start <br/>\n\nYou can also create ByteHouse account through Volcano Engine by ByteDance: https://www.volcengine.com/product/bytehouse-cloud\n## SQLAlchemy APIs\nSQLAlchemy has two distinct APIs, one building on top of the other. These APIs are `Core` and `ORM`. \n### SQLAlchemy Core\nSQLAlchemy Core APIs manage connectivity to a database, interact with database queries and results & manage programmatic\nconstruction of SQL statements. \n#### Engine Configuration\n`Engine` is the starting point of any SQLAlchemy application. `Engine` refers to a `Dialect` and `Connection Pool`, where \n`Dialect` is a `Python` object that represents information and methods that allow database operations to proceed on a \nparticular kind of database backend and a particular kind of Python driver for that database.  <br/><br/>\nThe engine and its underlying connection pool do not establish the first actual DBAPI connection until the \n`Engine.connect()` method is called, or an operation which is dependent on this method such as `Engine.execute()` is \ninvoked. In this way, `Engine` and `Pool` can be said to have lazy initialization behaviour.\n##### ByteHouse Regions\nCurrently, the driver supports the following region names across different cloud providers. Alternatively, if you know\nthe host address of ByteHouse server, you can directly use host address & omit region name. \n<table>\n    <tr>\n        <td>Region Name</td>\n        <td>Target Server</td>\n    </tr>\n    <tr>\n        <td>AP-SOUTHEAST-1</td>\n        <td>gateway.aws-ap-southeast-1.bytehouse.cloud:19000</td>\n    </tr>\n    <tr>\n        <td>VOLCANO-CN-NORTH-1</td>\n        <td>bytehouse-cn-beijing.volces.com:19000</td>\n    </tr>\n</table>\n\n##### Construction from ByteHouse URI\n###### Region & Password Format\n*Required parameters:* `region` `account` `user` `password`\n```python\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"bytehouse:///?region={}&account={}&user={}&password={}&database={}\".\n    format($REGION, $ACCOUNT, $USER, $PASSWORD, $DATABASE))\n```\n###### Host Address & Password Format\n*Required parameters:* `host` `port` `account` `user` `password`\n```python\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"bytehouse://{}:{}/?account={}&user={}&password={}&database={}\".\n    format($HOST, $PORT, $ACCOUNT, $USER, $PASSWORD, $DATABASE))\n```\n> For API Key authentication, user is always 'bytehouse'\n###### Region & API Key Format\n*Required parameters:* `region` `password`\n```python\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"bytehouse:///?region={}&user=bytehouse&password={}&database={}\".\n    format($REGION, $API_KEY, $DATABASE))\n```\n###### Host Address & API Key Format\n*Required parameters:* `host` `port` `password`\n```python\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"bytehouse://{}:{}/?user=bytehouse&password={}&database={}\".\n    format($HOST, $PORT, $API_KEY, $DATABASE))\n```\n##### Programmatic Construction\n```python\nfrom sqlalchemy.engine import URL\n\nuri = URL.create(\n    \"bytehouse\",\n    username=\"bytehouse\",\n    password=\"{}\".format($API_KEY),\n    host=\"{}\".format($HOST),\n    port=\"{}\".format($PORT),\n    database=\"{}\".format($DATABASE),\n)\nengine = create_engine(uri)\n```\n#### Working with Connections\nThe most basic function of the `Engine` is to provide access to a `Connection`, which can execute SQL statements. \nTo execute a textual statement to the database looks like:\n```python\nfrom sqlalchemy import text\n\nwith engine.connect() as connection:\n    result = connection.execute(text(\"SELECT 1\"))\n    for row in result:\n        print(row[0])\n```\nThe object returned here is known as the `CursorResult`, which refers to a DBAPI cursor. The DBAPI cursor will be \nclosed by the `CursorResult` when all of its result rows are exhausted. When the `Connection` is closed at the end of \nthe with block, the referenced DBAPI connection is released to the connection pool. \n#### Working with Transactions\nThe `Connection` object provides a `Connection.begin()` method which returns a `Transaction` object. The transaction is \ncommitted when the block completes. If an exception is raised, the transaction would be rolled back, and the exception \nwould be propagated outwards. \n```python\nwith engine.connect() as connection:\n    with connection.begin():\n        connection.execute(user_table.insert(), {\"user_id\": 7, \"user_name\": \"Jane\"})\n        connection.execute(user_table.insert(), {\"user_id\": 8, \"user_name\": \"Adam\"})\n```\n#### Database MetaData\n`MetaData` is a container object that keeps together different entities or features of a database. \n```python\nfrom sqlalchemy import MetaData\n\nmetadata_obj = MetaData()\n```\n#### Table Definition : Constructor Style\n`Table` class would represent a table where two primary arguments are the table name and the `MetaData` object which \nit will be associated with. The remaining positional arguments are Column objects describing each `Column` and engine\n(`CnchMergeTree`) definition.\n```python\nfrom sqlalchemy import Table, Column, Integer, String, func\nfrom bytehouse_sqlalchemy import engines\n\nuser_table = Table(  \n    \"user\",  \n    metadata,  \n    Column(\"user_id\", Integer, primary_key=True),  \n    Column(\"user_name\", String(16), nullable=False),  \n    engines.CnchMergeTree(  \n        order_by=func.tuple()  \n    )  \n)\n```\n#### Creating and Dropping Tables\nThe general way of creating all tables is to execute the `create_all()` method on the `MetaData` object. This method will \nfirst check the existence of each individual table, and if not found, then execute `CREATE` statements for all tables. \nSimilarly, for dropping all tables, we can execute the `drop_all()` method on the MetaData object. Creating and dropping\nindividual tables can be done via the `create()` and `drop()` methods. \n```python\nfrom sqlalchemy import Table, Column, Integer, String, func, MetaData\nfrom bytehouse_sqlalchemy import engines\n\nmetadata_obj = MetaData()\nuser_table = Table(  \n    \"user\",  \n    metadata,  \n    Column(\"user_id\", Integer, primary_key=True),  \n    Column(\"user_name\", String(16), nullable=False),  \n    engines.CnchMergeTree(  \n        order_by=func.tuple()  \n    )  \n)\nmetadata_obj.create_all(engine)\nmetadata_obj.drop_all(engine)\n```\n#### Insertion and Selection\n`Table.insert()` can be used to insert rows into the table, whereas `Table.select()` would fetch the result rows from the server.\n```python\nwith engine.connect() as connection:\n    connection.execute(user_table.insert(), {\"user_id\": 7, \"user_name\": \"Jane\"})\n    result_set = connection.execute(user_table.select())\n```\n### SQLAlchemy ORM\nSQLAlchemy ORM is built on top of SQLAlchemy Core which provides object relational mapping capabilities that allows \nusers to define Python classes mapped to database tables. It extends the Core SQL expression language to allow \nSQL queries to be composed and invoked in user defined objects. \n#### Create Engine\nThe `Engine` is a factory class that will create and maintain database connections for us, where connections are held \ninside of a Connection Pool for fast reuse. The details regarding the `Engine` are described at the beginning of this doc. \n```python\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"bytehouse:///?region={}&account={}&user={}&password={}&database={}\".\n    format($REGION, $ACCOUNT, $USER, $PASSWORD, $DATABASE))\n```\n#### Declarative Mapping\nThe `Declarative Mapping` defines a base class using the `declarative_base()` function, which returns a new base class \nfrom which new classes to be mapped may inherit from. A mapped class typically refers to a single particular database \ntable, the name of which is indicated by using the `__tablename__` class level attribute.\n```python\nfrom sqlalchemy import Column, Integer, String, func, MetaData\nfrom sqlalchemy.orm import declarative_base\nfrom bytehouse_sqlalchemy import engines\n\nmetadata = MetaData(bind=engine)\nBase = declarative_base(metadata=metadata)\n\nclass User(Base):  \n    __tablename__ = \"user_account\"  \n    id = Column(Integer, primary_key=True)  \n    name = Column(String(30))  \n    fullname = Column(String)  \n  \n    __table_args__ = (  \n        engines.CnchMergeTree(  \n            order_by=func.tuple()  \n        ),  \n    )\n```\n#### Table Creation\nUsing table metadata and engine, we can generate DDL schema & execute in ByteHouse at once using \n`Table.__table__.create()` method. \n```python\nUser.__table__.create()\n```\n#### Session and Object Persist\nWe can create objects of previously defined classes and pass them to the database using an object called `Session`, \nwhich uses the `Engine` to interact with the database. The `Session.add_all()` is used to add multiple objects at once, \nand the `Session.commit()` method would flush any pending changes to the database.\n```python\nfrom sqlalchemy.orm import Session\n\nwith Session(engine) as session:\n        spongebob = User(  \n            id=1,  \n            name=\"spongebob\",  \n            fullname=\"Spongebob Squarepants\"  \n        )  \n        sandy = User(  \n            id=2,  \n            name=\"sandy\",  \n            fullname=\"Sandy Cheeks\"  \n        )\n        session.add_all([spongebob, sandy])  \n        session.commit()\n```\n#### SELECT statement\nWe can use the `select()` method to create a new `Select` object, which can then be invoked using a `Session` object. \nOptionally, we can also use the `Select.where()` method to filter out the results.\n```python\nfrom sqlalchemy import select\n\nsession = Session(engine)\n\nstmt = select(User).where(User.name.in_([\"spongebob\", \"sandy\"]))\nfor user in session.scalars(stmt):  \n    print(user.name)\n```\n## Local Development\nChange `setup.cfg` file to include your connection credentials. For running tests locally, follow these steps:\n```commandline\npython testsrequire.py && pip install .\npython -m pytest tests/\n```\n## License\nThis project is distributed under the terms of the MIT license: http://www.opensource.org/licenses/mit-license.php\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bytehouse-cloud/bytehouse-sqlalchemy",
    "keywords": "ByteHouse db database cloud analytics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bytehouse-sqlalchemy",
    "package_url": "https://pypi.org/project/bytehouse-sqlalchemy/",
    "platform": null,
    "project_url": "https://pypi.org/project/bytehouse-sqlalchemy/",
    "project_urls": {
      "Changes": "https://github.com/bytehouse-cloud/bytehouse-sqlalchemy/blob/master/CHANGELOG.md",
      "Documentation": "https://github.com/bytehouse-cloud/bytehouse-sqlalchemy",
      "Homepage": "https://github.com/bytehouse-cloud/bytehouse-sqlalchemy"
    },
    "release_url": "https://pypi.org/project/bytehouse-sqlalchemy/1.0.2/",
    "requires_dist": [
      "bytehouse-driver (==1.0.2)",
      "sqlalchemy (<1.5,>=1.4)",
      "requests"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "ByteHouse SQLAlchemy Dialect",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17428827,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9714dc11bdb04d14df7beb50c43950ad08e4acbad02dd2f5497050fcc9446c1",
          "md5": "0e340dc58b3fdadecf25ba8ff5888215",
          "sha256": "87ea0121b11b5ed89034766ea4d0870c6d8ee70360988034f006d6ea2d68586e"
        },
        "downloads": -1,
        "filename": "bytehouse_sqlalchemy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e340dc58b3fdadecf25ba8ff5888215",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 70386,
        "upload_time": "2023-02-20T04:27:40",
        "upload_time_iso_8601": "2023-02-20T04:27:40.561889Z",
        "url": "https://files.pythonhosted.org/packages/d9/71/4dc11bdb04d14df7beb50c43950ad08e4acbad02dd2f5497050fcc9446c1/bytehouse_sqlalchemy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c09537e91550d2e991e543b0712a9bfb686b8bc9a625b4814423e5400f60c38",
          "md5": "feb0b01a6082d18dd48a346dd02b7401",
          "sha256": "59f3b46658f79a2a141d6b199106c7394f6617a23ea33526fd5e738ce0423b06"
        },
        "downloads": -1,
        "filename": "bytehouse_sqlalchemy-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "feb0b01a6082d18dd48a346dd02b7401",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 70399,
        "upload_time": "2023-03-07T07:21:16",
        "upload_time_iso_8601": "2023-03-07T07:21:16.891501Z",
        "url": "https://files.pythonhosted.org/packages/7c/09/537e91550d2e991e543b0712a9bfb686b8bc9a625b4814423e5400f60c38/bytehouse_sqlalchemy-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f57c8786524dc6694619ccc21bf796a1c5de3d128c81b3e53fdcd1f851048430",
          "md5": "fe2e1660f023c95fb34f66712286fcd2",
          "sha256": "30c5b0988d990add4b474a1e13e1ef2554890894ae18e4904e0f190635e16466"
        },
        "downloads": -1,
        "filename": "bytehouse-sqlalchemy-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fe2e1660f023c95fb34f66712286fcd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 44028,
        "upload_time": "2023-03-07T07:21:20",
        "upload_time_iso_8601": "2023-03-07T07:21:20.036170Z",
        "url": "https://files.pythonhosted.org/packages/f5/7c/8786524dc6694619ccc21bf796a1c5de3d128c81b3e53fdcd1f851048430/bytehouse-sqlalchemy-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0d1b6c10f9cecc90def2a41d6f79285eff68c261c8295ee75132a714ee8d012",
          "md5": "51f0f06c09fdb57f3b8865b577cea1c9",
          "sha256": "73ddb64e14624c5dabfb8b4bace01c64cf272740aff82a2349d260ecbbed3696"
        },
        "downloads": -1,
        "filename": "bytehouse_sqlalchemy-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51f0f06c09fdb57f3b8865b577cea1c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 70400,
        "upload_time": "2023-03-24T09:06:09",
        "upload_time_iso_8601": "2023-03-24T09:06:09.638286Z",
        "url": "https://files.pythonhosted.org/packages/b0/d1/b6c10f9cecc90def2a41d6f79285eff68c261c8295ee75132a714ee8d012/bytehouse_sqlalchemy-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2cb54b633dc1a36e9ae14300c95ec5eee87432e42d0fcde8e604b30e792b66d",
          "md5": "eb38dda33740f23ada7b39578f22e614",
          "sha256": "ccab92f77d434af985e47ffcdadbcdda996c43e38b0a208d99d2ed9a564a67db"
        },
        "downloads": -1,
        "filename": "bytehouse-sqlalchemy-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "eb38dda33740f23ada7b39578f22e614",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 44026,
        "upload_time": "2023-03-24T09:06:12",
        "upload_time_iso_8601": "2023-03-24T09:06:12.641563Z",
        "url": "https://files.pythonhosted.org/packages/e2/cb/54b633dc1a36e9ae14300c95ec5eee87432e42d0fcde8e604b30e792b66d/bytehouse-sqlalchemy-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0d1b6c10f9cecc90def2a41d6f79285eff68c261c8295ee75132a714ee8d012",
        "md5": "51f0f06c09fdb57f3b8865b577cea1c9",
        "sha256": "73ddb64e14624c5dabfb8b4bace01c64cf272740aff82a2349d260ecbbed3696"
      },
      "downloads": -1,
      "filename": "bytehouse_sqlalchemy-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "51f0f06c09fdb57f3b8865b577cea1c9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 70400,
      "upload_time": "2023-03-24T09:06:09",
      "upload_time_iso_8601": "2023-03-24T09:06:09.638286Z",
      "url": "https://files.pythonhosted.org/packages/b0/d1/b6c10f9cecc90def2a41d6f79285eff68c261c8295ee75132a714ee8d012/bytehouse_sqlalchemy-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2cb54b633dc1a36e9ae14300c95ec5eee87432e42d0fcde8e604b30e792b66d",
        "md5": "eb38dda33740f23ada7b39578f22e614",
        "sha256": "ccab92f77d434af985e47ffcdadbcdda996c43e38b0a208d99d2ed9a564a67db"
      },
      "downloads": -1,
      "filename": "bytehouse-sqlalchemy-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "eb38dda33740f23ada7b39578f22e614",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 44026,
      "upload_time": "2023-03-24T09:06:12",
      "upload_time_iso_8601": "2023-03-24T09:06:12.641563Z",
      "url": "https://files.pythonhosted.org/packages/e2/cb/54b633dc1a36e9ae14300c95ec5eee87432e42d0fcde8e604b30e792b66d/bytehouse-sqlalchemy-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}