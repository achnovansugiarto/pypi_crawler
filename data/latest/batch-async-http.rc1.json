{
  "info": {
    "author": "Jacob Miesner",
    "author_email": "miesner.jacob@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# batch-async-http\n\nThis tool was designed to make batch async requests via http very simple! All you need to do is attach a decorator to your http request function and the rest is handled for you.\n\nBehind the scenes your input is turned into a generator with batches of your specified size, and mapped asynchronously to your http request function!\n\nSee the source for this project here:\n<https://https://github.com/MiesnerJacob/batch_async_http>.\n\n## How to install:\n\n```\npip install batch-async-http\n```\n\n## Usage\n\nA typical function to make http requests to a REST API may look something like this:\n\n```python\nimport requests\n\ndef call_api(example_input: list):\n\n        # URL to call\n        url = 'http://xx.xxx.xxx.xx/example_endpoint/'\n\n        # Input to API\n        params = {\n            \"raw\": example_input,\n        }\n\n        # API calls\n        r = requests.post(url, json=params)\n        response = r.json()\n        \n        return response\n```\n\nA typical async function to make http requests to a REST API may look something like this:\n\n```python\nimport httpx\n\nasync def call_api(example_input: list):\n\n        # URL to call\n        url = 'http://xx.xxx.xxx.xx/example_endpoint/'\n\n        # Input to API\n        params = {\n            \"raw\": example_input,\n        }\n\n        # Concurrent API calls\n        async with httpx.AsyncClient(timeout=None) as client:\n            r = await client.post(url, json=params)\n        response = r.json()\n        \n        return response\n```\n\nThe power of batching your async requests is now just as easy as applying a simple decorator to your async function:\n\n```python\nimport httpx\nfrom batch_async_http import batch_async\n\n@batch_async(size=8)\nasync def call_api(example_input: list):\n\n        # URL to call\n        url = 'http://xx.xxx.xxx.xx/example_endpoint/'\n\n        # Input to API\n        params = {\n            \"raw\": example_input,\n        }\n\n        # Concurrent API calls\n        async with httpx.AsyncClient(timeout=None) as client:\n            r = await client.post(url, json=params)\n        response = r.json()\n        \n        return response\n```\n\nEnjoy your increased efficiency with minimal effort!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://https://github.com/MiesnerJacob/batch_async_http",
    "keywords": "async,batch,http,requests",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "batch-async-http",
    "package_url": "https://pypi.org/project/batch-async-http/",
    "platform": "",
    "project_url": "https://pypi.org/project/batch-async-http/",
    "project_urls": {
      "Homepage": "https://https://github.com/MiesnerJacob/batch_async_http"
    },
    "release_url": "https://pypi.org/project/batch-async-http/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Decorator for async batch calling via http requests",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12443036,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dccb862e3fb48e5ca5f899ccea95d59c4ca8b8001e2786860c3b4cf3ffcf280",
          "md5": "7a400d971729fc03c29e04fd2274c1a4",
          "sha256": "e215fe45d6200d7767b7d6909fabc33866886d9d62d3966a215dd238a1aa3b61"
        },
        "downloads": -1,
        "filename": "batch_async_http-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7a400d971729fc03c29e04fd2274c1a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2907,
        "upload_time": "2021-12-30T20:30:00",
        "upload_time_iso_8601": "2021-12-30T20:30:00.991683Z",
        "url": "https://files.pythonhosted.org/packages/6d/cc/b862e3fb48e5ca5f899ccea95d59c4ca8b8001e2786860c3b4cf3ffcf280/batch_async_http-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6dccb862e3fb48e5ca5f899ccea95d59c4ca8b8001e2786860c3b4cf3ffcf280",
        "md5": "7a400d971729fc03c29e04fd2274c1a4",
        "sha256": "e215fe45d6200d7767b7d6909fabc33866886d9d62d3966a215dd238a1aa3b61"
      },
      "downloads": -1,
      "filename": "batch_async_http-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7a400d971729fc03c29e04fd2274c1a4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 2907,
      "upload_time": "2021-12-30T20:30:00",
      "upload_time_iso_8601": "2021-12-30T20:30:00.991683Z",
      "url": "https://files.pythonhosted.org/packages/6d/cc/b862e3fb48e5ca5f899ccea95d59c4ca8b8001e2786860c3b4cf3ffcf280/batch_async_http-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}