{
  "info": {
    "author": "jaseg",
    "author_email": "gerbonara@jaseg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Manufacturing",
      "Intended Audience :: Religion",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Natural Language :: English",
      "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
      "Topic :: Utilities"
    ],
    "description": "Gerbolyze high-fidelity SVG/PNG/JPG to PCB converter\n====================================================\n\n.. note::\n\n    The command-line usage and SVG template format of gerbolyze changed between v2.0 and v3.0. You can find details on\n    the new format below under command_line_usage_\n\nGerbolyze renders SVG vector and PNG/JPG raster images into existing gerber PCB manufacturing files. \nVector data from SVG files is rendered losslessly *without* an intermediate rasterization/revectorization step.\nStill, gerbolyze supports (almost) the full SVG 1.1 spec including complex, self-intersecting paths with holes,\npatterns, dashes and transformations.\n\nRaster images can either be vectorized through contour tracing (like gerbolyze v1.0 did) or they can be embedded using\nhigh-resolution grayscale emulation while (mostly) guaranteeing trace/space design rules.\n\nTry gerbolyze online at https://tsugi.kokoroyukuma.de/gerboweb\n\n.. figure:: https://gitlab.com/gerbolyze/gerbolyze/-/raw/v3.0.11/pics/pcbway_sample_02_small.jpg\n  :width: 800px\n\n  Drawing by `トーコ Toko <https://twitter.com/fluffy2038/status/1317231121269104640>`__ converted using Gerbolyze and printed at PCBWay.\n\n\nTooling for PCB art is quite limited in both open source and closed source ecosystems. Something as simple as putting a\npretty picture on a PCB can be an extremely tedious task. Depending on the PCB tool used, various arcane incantations\nmay be necessary and even modestly complex images will slow down most PCB tools to a crawl.\n\nGerbolyze solves this problem in a toolchain-agnostic way by directly vectorizing SVG vector and PNG or JPG bitmap files\nonto existing gerber layers. Gerbolyze processes any spec-compliant SVG and \"gerbolyzes\" SVG vector data into a Gerber\nspec-compliant form. Gerbolyze has been tested against both the leading open-source KiCAD toolchain and the\nindustry-standard Altium Designer. Gerbolyze is written with performance in mind and will happily vectorize tens of\nthousands of primitives, generating tens of megabytes of gerber code without crapping itself. With gerbolyze you can\nfinally be confident that your PCB fab's toolchain will fall over before yours does if you overdo it with the high-poly\nanime silkscreen.\n\nGerbolyze is based on gerbonara_.\n\n.. image:: https://gitlab.com/gerbolyze/gerbolyze/-/raw/v3.0.11/pics/process-overview.png\n  :width: 800px\n\n.. contents::\n\nTl;dr: Produce high-quality artistic PCBs in three easy steps!\n--------------------------------------------------------------\n\nGerbolyze works in three steps.\n\n1. Generate a scale-accurate template of the finished PCB from your CAD tool's gerber output:\n   \n   .. code::\n        \n       $ gerbolyze template --top template_top.svg [--bottom template_bottom.svg] my_gerber_dir\n\n2. Load the resulting template image Inkscape_ or another SVG editing program. Put your artwork on the appropriate SVG\n   layer. Dark colors become filled gerber primitives, bright colors become unfilled primitives. You can directly put\n   raster images (PNG/JPG) into this SVG as well, just position and scale them like everything else. SVG clips work for\n   images, too. Masks are not supported.\n\n3. Vectorize the edited SVG template image drectly into the PCB's gerber files:\n\n   .. code::\n\n        $ gerbolyze paste --top template_top_edited.svg [--bottom ...] my_gerber_dir output_gerber_dir\n\nQuick Start Installation (Any Platform)\n---------------------------------------\n\n.. code-block:: shell\n\n    python -m pip install --user gerbolyze\n\nTo uninstall, run \n\n.. code-block:: shell\n\n    python -m pip uninstall gerbolyze gerbonara resvg-wasi svg-flatten-wasi\n\nTo update, run\n\n.. code-block:: shell\n\n    python -m pip install --user --upgrade --upgrade-strategy eager gerbolyze\n\nSpeeding up gerbolyze using natively-built binaries\n---------------------------------------------------\n\nThis will install gerbolyze's binary dependency resvg and gerbolyze's svg-flatten utility as pre-built cross-platform\nWASM binaries. When you first run gerbolyze, it will take some time (~30s) to link these binaries for your system. The\noutput is cached, so any future run is going to be fast.\n\nWASM is slower than natively-built binaries. To speed up gerbolyze, you can natively build its two binary dependencies:\n\n1. Install resvg natively using rust's cargo package manager: ``cargo install resvg``\n2. Install gerbolyze's svg-flatten utility natively. You can get pre-built binaries from gerbolyze's gitlab CI jobs `at\n   this link <https://gitlab.com/gerbolyze/gerbolyze/-/pipelines?scope=tags&page=1>`__ by clicking the three dots on the\n   right next to the version you want. These pre-built binaries should work on any x86_64 linux since they are\n   statically linked. You can also build svg-flatten yourself by running ``make`` inside the ``svg-flatten`` folder from\n   a gerbolyze checkout.\n\nGerbolyze will pick up these binaries when installed in your ``$PATH``. resvg is also picked up when it is installed by\ncargo in your home's ``~/.cargo``, even if it's not in your ``$PATH``. You can override the resvg, usvg or svg-flatten\nbinary that gerbolyze uses by giving it the absoulute path to a binary in the ``$RESVG``, ``$USVG`` and ``$SVG_FLATTEN``\nenvironment variables.\n\n\nBuild from source (any distro)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: shell\n\n    git clone --recurse-submodules https://git.jaseg.de/gerbolyze.git\n    cd gerbolyze\n\n    python3 -m venv\n    source venv/bin/activate\n    python3 setup.py install\n\nFeatures\n--------\n\nInput on the left, output on the right.\n\n.. image:: https://gitlab.com/gerbolyze/gerbolyze/-/raw/v3.0.11/pics/test_svg_readme_composited.png\n  :width: 800px\n\n* Almost full SVG 1.1 static spec coverage (!)\n\n  * Paths with beziers, self-intersections and holes\n  * Strokes, even with dashes and markers\n  * Pattern fills and strokes\n  * Transformations and nested groups\n  * Proper text rendering with support for complex text layout (e.g. Arabic)\n  * <image> elements via either built-in vectorizer or built-in halftone processor\n  * (some) CSS\n\n* Writes Gerber, SVG or KiCAD S-Expression (``.kicad_mod``) formats\n* Can export from top/bottom SVGs to a whole gerber layer stack at once with filename autodetection\n* Can export SVGs to ``.kicad_mod`` files like svg2mod (but with full SVG support)\n* Beziers flattening with configurable tolerance using actual math!\n* Polygon intersection removal\n* Polygon hole removal (!)\n* Optionally vector-compositing of output: convert black/white/transparent image to black/transparent image\n* Renders SVG templates from input gerbers for accurate and easy scaling and positioning of artwork\n* layer masking with offset (e.g. all silk within 1mm of soldermask)\n* Can read gerbers from zip files\n* Limited SVG support for board outline layers (no fill/region support)\n* Dashed lines supported on board outline layers\n\nGerbolyze is the end-to-end \"paste this svg into these gerbers\" command that handles all layers on both board sides at\nonce.  The heavy-duty computer geometry logic of gerbolyze is handled by the svg-flatten utility (``svg-flatten``\ndirectory).  svg-flatten reads an SVG file and renders it into a variety of output formats. svg-flatten can be used like\na variant of the popular svg2mod that supports all of SVG and handles arbitrary input ``<path>`` elements.\n\nAlgorithm Overview\n------------------\n\nThis is the algorithm gerbolyze uses to process a stack of gerbers.\n\n* Map input files to semantic layers by their filenames\n* For each layer:\n\n  * load input gerber\n  * Pass mask layers through ``gerbv`` for conversion to SVG\n  * Pass mask layers SVG through ``svg-flatten --dilate``\n  * Pass input SVG through ``svg-flatten --only-groups [layer]`` \n  * Overlay input gerber, mask and input svg\n  * Write result to output gerber\n\nThis is the algorithm svg-flatten uses to process an SVG.\n\n* pass input SVG through usvg_\n* iterate depth-first through resulting SVG.\n\n  * for groups: apply transforms and clip and recurse\n  * for images: Vectorize using selected vectorizer\n  * for paths:\n\n    * flatten path using Cairo\n    * remove self-intersections using Clipper\n    * if stroke is set: process dash, then offset using Clipper\n    * apply pattern fills\n    * clip to clip-path\n    * remove holes using Clipper\n\n* for KiCAD S-Expression export: vector-composite results using CavalierContours: subtract each clear output primitive\n  from all previous dark output primitives\n\nWeb interface\n-------------\n\nYou can try gerbolyze online at https://tsugi.kokoroyukuma.de/gerboweb\n\nThe web interface does not expose all of gerbolyze's bells and whistles, but it allows you to simply paste a single SVG\nfile on a board to try out gerbolyze. Upload your design on the web interface, then download the template for either the\ntop or bottom side, and put your artwork on the appropriate layer of that template using Inkscape_. Finally, upload the\nmodified template and let gerbolyze process your design.\n\nCommand-line usage\n------------------\n.. _command_line_usage:\n\nGenerate SVG template from Gerber files:\n\n.. code-block:: shell\n\n    gerbolyze template [options] [--top|--bottom] input_dir_or.zip output.svg\n\nRender design from an SVG made with the template above into a set of gerber files:\n\n.. code-block:: shell\n\n    gerbolyze paste [options] artwork.svg input_dir_or.zip output_dir_or.zip\n\nUse svg-flatten to convert an SVG file into Gerber or flattened SVG:\n\n.. code-block:: shell\n\n    svg-flatten [options] --format [gerber|svg] [input_file.svg] [output_file]\n\nUse svg-flatten to convert an SVG file into the given layer of a KiCAD S-Expression (``.kicad_mod``) file:\n\n.. code-block:: shell\n\n    svg-flatten [options] --format kicad --sexp-layer F.SilkS --sexp-mod-name My_Module [input_file.svg] [output_file]\n\nUse svg-flatten to convert an SVG file into a ``.kicad_mod`` with SVG layers fed into separate KiCAD layers based on\ntheir IDs like the popular ``svg2mod`` is doing:\n\nNote:\n    Right now, the input SVG's layers must have *ids* that match up KiCAD's s-exp layer names. Note that when you name\n    a layer in Inkscape that only sets a ``name`` attribute, but does not change the ID. In order to change the ID in\n    Inkscape, you have to use Inkscape's \"object properties\" context menu function.\n\n    Also note that svg-flatten expects the layer names KiCAD uses in their S-Expression format. These are *different* to\n    the layer names KiCAD exposes in the UI (even though most of them match up!).\n\n    For your convenience, there is an SVG template with all the right layer names and IDs located next to this README.\n\n.. code-block:: shell\n\n    svg-flatten [options] --format kicad --sexp-mod-name My_Module [input_file.svg] [output_file]\n\n``gerbolyze template``\n~~~~~~~~~~~~~~~~~~~~~~\n\nUsage: ``gerbolyze template [OPTIONS] INPUT``\n\nGenerate SVG template for gerbolyze paste from gerber files.\n\nINPUT may be a gerber file, directory of gerber files or zip file with gerber files. The output file contains a preview\nimage of the input gerbers to allow you to position your artwork, as well as prepared Inkscape layers corresponding to\neach gerber layer. Simply place your artwork in this SVG template using Inkscape. Starting in v3.0, gerbolyze\nautomatically keeps track of which board side (top or bottom) is contained in an SVG template.\n\nOptions:\n********\n``--top | --bottom``\n    Output top or bottom side template. This affects both the preview image and the prepared Inkscape layers.\n\n``--vector | --raster``\n    Embed preview renders into output file as SVG vector graphics instead of rendering them to PNG bitmaps. The\n    resulting preview may slow down your SVG editor.\n\n``--raster-dpi FLOAT``\n    DPI for rastering preview\n\n``--bbox TEXT``\n    Output file bounding box. Format: \"w,h\" to force [w] mm by [h] mm output canvas OR \"x,y,w,h\" to force [w] mm by [h]\n    mm output canvas with its bottom left corner at the given input gerber coördinates.\n\n\n``gerbolyze paste``\n~~~~~~~~~~~~~~~~~~~\n(see `below <vectorization_>`__)\n\nUsage: ``gerbolyze paste [OPTIONS] INPUT_GERBERS OVERLAY_SVG OUTPUT_GERBERS``\n\nRender vector data and raster images from SVG file into gerbers. The SVG input file can be generated using ``gerbolyze\ntemplate`` and contains the name and board side of each layer. Note that for board outline layers, handling slightly\ndiffers from other layers as PCB fabs do not support filled Gerber regions on these layers.\n\nOptions:\n********\n\n``--bbox TEXT``\n    Output file bounding box. Format: \"w,h\" to force [w] mm by [h] mm output canvas OR \"x,y,w,h\" to force [w] mm by [h]\n    mm output canvas with its bottom left corner at the given input gerber coördinates. This **must match the ``--bbox`` value given to\n    template**!\n\n``--subtract TEXT``\n    Use user subtraction script from argument (see `below <subtraction_script_>`_)\n\n``--no-subtract``\n    Disable subtraction (see `below <subtraction_script_>`_)\n\n``--dilate FLOAT``\n    Default dilation for subtraction operations in mm (see `below <subtraction_script_>`_)\n\n``--trace-space FLOAT``\n    Passed through to svg-flatten, see `below <svg_flatten_>`__.\n\n``--vectorizer TEXT``\n    Passed through to svg-flatten, see `its description below <svg_flatten_>`__. Also have a look at `the examples below <vectorization_>`_.\n\n``--vectorizer-map TEXT``\n    Passed through to svg-flatten, see `below <svg_flatten_>`__.\n\n``--exclude-groups TEXT``\n    Passed through to svg-flatten, see `below <svg_flatten_>`__.\n\n\n.. _outline_layers:\n\nOutline layers\n**************\n\nOutline layers require special handling since PCB fabs do not support filled G36/G37 polygons on these layers. The main\ndifference between normal layers and outline layers is how strokes are handled. On outline layers, strokes are\ntranslated to normal Gerber draw commands (D01, D02 etc.) with an aperture set to the stroke's width instead of tracing\nthem to G36/G37 filled regions. This means that on outline layers, SVG end caps and line join types do not work: All\nlines are redered with round joins and end caps.\n\nOne exception from this are patterns, which work as expected for both fills and strokes with full support for joins and\nend caps.\n\nDashed strokes are supported on outline layers and can be used to make easy mouse bites.\n\n.. _subtraction_script:\n\nSubtraction scripts\n*******************\n\n.. image:: https://gitlab.com/gerbolyze/gerbolyze/-/raw/v3.0.11/pics/subtract_example.png\n  :width: 800px\n\nSubtraction scripts tell ``gerbolyze paste`` to remove an area around certain input layers to from an overlay layer.\nWhen a input layer is given in the subtraction script, gerbolyze will dilate (extend outwards) everything on this input\nlayer and remove it from the target overlay layer. By default, Gerbolyze subtracts the mask layer from the silk layer to\nmake sure there are no silk primitives that overlap bare copper, and subtracts each input layer from its corresponding\noverlay to make sure the two do not overlap. In the picture above you can see both at work: The overlay contains\nhalftone primitives all over the place. The subtraction script has cut out an area around all pads (mask layer) and all\nexisting silkscreen. You can turn off this behavior by passing ``--no-subtract`` or pass your own \"script\".\n\nThe syntax of these scripts is:\n\n.. code-block::\n\n    {target layer} -= {source layer} {dilation} [; ...]\n\nThe target layer must be ``out.{layer name}`` and the source layer ``in.{layer name}``. The layer names are gerbolyze's\ninternal layer names, i.e.: ``paste, silk, mask, copper, outline, drill``\n\nThe dilation value is optional, but can be a float with a leading ``+`` or ``-``. If given, before subtraction the\nsource layer's features will be extended by that many mm. If not given, the dilation defaults to the value given by\n``--dilate`` if given or 0.1 mm otherwise. To disable dilation, simply pass ``+0`` here.\n\nMultiple commands can be separated by semicolons ``;`` or line breaks.\n\nThe default subtraction script is:\n\n.. code-block::\n\n    out.silk -= in.mask\n    out.silk -= in.silk+0.5\n    out.mask -= in.mask+0.5\n    out.copper -= in.copper+0.5\n\n.. _svg_flatten:\n\n``svg-flatten``\n~~~~~~~~~~~~~~~\n\nUsage: ``svg-flatten [OPTIONS]... [INPUT_FILE] [OUTPUT_FILE]``\n\nSpecify ``-`` for stdin/stdout.\n\nOptions:\n********\n\n``-h, --help``\n    Print help and exit\n\n``-v, --version``\n    Print version and exit\n\n``-o, --format``\n    Output format. Supported: gerber, gerber-outline (for board outline layers), svg, s-exp (KiCAD S-Expression)\n\n``-p, --precision``\n    Number of decimal places use for exported coordinates (gerber: 1-9, SVG: >=0). Note that not all gerber viewers are\n    happy with too many digits. 5 or 6 is a reasonable choice.\n\n``--clear-color``\n    SVG color to use in SVG output for \"clear\" areas (default: white)\n\n``--dark-color``\n    SVG color to use in SVG output for \"dark\" areas (default: black)\n\n``-f, --flip-gerber-polarity``\n    Flip polarity of all output gerber primitives for --format gerber.\n\n``-d, --trace-space``\n    Minimum feature size of elements in vectorized graphics (trace/space) in mm. Default: 0.1mm.\n\n``--no-header``\n    Do not export output format header/footer, only export the primitives themselves\n\n``--flatten``\n    Flatten output so it only consists of non-overlapping white polygons. This perform composition at the vector level.\n    Potentially slow. This defaults to on when using KiCAD S-Exp export because KiCAD does not know polarity or colors.\n\n``--no-flatten``\n    Disable automatic flattening for KiCAD S-Exp export\n\n``--dilate``\n    Dilate output gerber primitives by this amount in mm. Used for masking out other layers.\n\n``-g, --only-groups``\n    Comma-separated list of group IDs to export.\n\n``-b, --vectorizer``\n    Vectorizer to use for bitmap images. One of poisson-disc (default), hex-grid, square-grid, binary-contours,\n    dev-null. Have a look at `the examples below <vectorization_>`_.\n\n``--vectorizer-map``\n    Map from image element id to vectorizer. Overrides --vectorizer.  Format: id1=vectorizer,id2=vectorizer,...\n\n    You can use this to set a certain vectorizer for specific images, e.g. if you want to use both halftone\n    vectorization and contour tracing in the same SVG. Note that you can set an ``<image>`` element's SVG ID from within\n    Inkscape though the context menu's Object Properties tool.\n\n``--force-svg``\n    Force SVG input irrespective of file name\n\n``--force-png``\n    Force bitmap graphics input irrespective of file name\n\n``-s, --size``\n    Bitmap mode only: Physical size of output image in mm. Format: 12.34x56.78\n\n``--sexp-mod-name``\n    Module name for KiCAD S-Exp output. This is a mandatory argument if using S-Exp output.\n\n``--sexp-layer``\n    Layer for KiCAD S-Exp output. Defaults to auto-detect layers from SVG layer/top-level group IDs. If given, SVG\n    groups and layers are completely ignored and everything is simply vectorized into this layer, though you cna still\n    use ``-g`` for group selection.\n\n``-a, --preserve-aspect-ratio``\n    Bitmap mode only: Preserve aspect ratio of image. Allowed values are meet, slice. Can also parse full SVG\n    preserveAspectRatio syntax.\n\n``--no-usvg``\n    Do not preprocess input using usvg (do not use unless you know *exactly* what you're doing)\n\n``--usvg-dpi``\n    Passed through to usvg's --dpi, in case the input file has different ideas of DPI than usvg has.\n\n``--scale``\n    Scale input svg lengths by this factor (-o gerber only).\n\n``-e, --exclude-groups``\n    Comma-separated list of group IDs to exclude from export. Takes precedence over --only-groups.\n\n.. _vectorization:\n\nGerbolyze image vectorization\n-----------------------------\n\nGerbolyze has two built-in strategies to translate pixel images into vector images. One is its built-in halftone\nprocessor that tries to approximate grayscale. The other is its built-in binary vectorizer that traces contours in\nblack-and-white images. Below are examples for the four options.\n\nThe vectorizers can be used in isolation through ``svg-flatten`` with either an SVG input that contains an image or a\nPNG/JPG input.\n\nThe vectorizer can be controlled globally using the ``--vectorizer`` flag in both ``gerbolyze`` and ``svg-flatten``. It\ncan also be set on a per-image basis in both using ``--vectorizer-map [image svg id]=[option][\",\" ...]``.\n\n.. for f in vec_*.png; convert -background white -gravity center $f -resize 500x500 -extent 500x500 (basename -s .png $f)-square.png; end\n.. for vec in hexgrid square poisson contours; convert vec_\"$vec\"_whole-square.png vec_\"$vec\"_detail-square.png -background transparent -splice 25x0+0+0 +append -chop 25x0+0+0 vec_\"$vec\"_composited.png; end\n\n``--vectorizer poisson-disc`` (the default) \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://gitlab.com/gerbolyze/gerbolyze/-/raw/v3.0.11/pics/vec_poisson_composited.png\n  :width: 800px\n\n``--vectorizer hex-grid``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://gitlab.com/gerbolyze/gerbolyze/-/raw/v3.0.11/pics/vec_hexgrid_composited.png\n  :width: 800px\n\n``--vectorizer square-grid``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://gitlab.com/gerbolyze/gerbolyze/-/raw/v3.0.11/pics/vec_square_composited.png\n  :width: 800px\n\n``--vectorizer binary-contours``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://gitlab.com/gerbolyze/gerbolyze/-/raw/v3.0.11/pics/vec_contours_composited.png\n  :width: 800px\n\nThe binary contours vectorizer requires a black-and-white binary input image. As you can see, like every bitmap tracer\nit will produce some artifacts. For artistic input this is usually not too bad as long as the input data is\nhigh-resolution. Antialiased edges in the input image are not only OK, they may even help with an accurate\nvectorization.\n\nGIMP halftone preprocessing guide\n---------------------------------\n\nGerbolyze has its own built-in halftone processor, but you can also use the high-quality \"newsprint\" filter built into\nGIMP_ instead if you like. This section will guide you through this. The PNG you get out of this can then be fed into\ngerbolyze using ``--vectorizer binary-contours``.\n\n1 Import your desired artwork\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThough anime or manga pictures are highly recommended, you can use any image including photographs. Be careful to select\na picture with comparatively low detail that remains recognizable at very low resolution. While working on a screen this\nis hard to vizualize, but the grain resulting from the low resolution of a PCB's silkscreen is quite coarse.\n\n.. image:: screenshots/02import02.png\n  :width: 800px\n\n2 Convert the image to grayscale\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: screenshots/06grayscale.png\n  :width: 800px\n\n3 Fine-tune the image's contrast\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo look well on the PCB, contrast is critical. If your source image is in color, you may have lost some contrast during\ngrayscale conversion. Now is the time to retouch that using the GIMP's color curve tool.\n\nWhen using the GIMP's newsprint filter, bright grays close to white and dark grays close to black will cause very small\ndots that might be beyond your PCB manufacturer's maximum resolution. To control this case, add small steps at the ends\nof the grayscale value curve as shown (exaggerated) in the picture below. These steps saturate very bright grays to\nwhite and very dark grays to black while preserving the values in the middle.\n\n.. image:: screenshots/08curve_cut.png\n  :width: 800px\n\n4 Retouch details\n~~~~~~~~~~~~~~~~~\n\nTherer might be small details that don't look right yet, such as the image's background color or small highlights that\nmerge into the background now. You can manually change the color of any detail now using the GIMP's flood-fill tool.\n\nIf you don't want the image's background to show up on the final PCB at all, just make it black.\n\nParticularly on low-resolution source images it may make sense to apply a blur with a radius similar to the following\nnewsprint filter's cell size (10px) to smooth out the dot pattern generated by the newsprint filter.\n\n.. image:: screenshots/09retouch.png\n  :width: 800px\n\nIn the following example, I retouched the highlights in the hair of the character in the picture to make them completely\nwhite instead of light-gray, so they still stand out nicely in the finished picture.\n\n.. image:: screenshots/10retouched.png\n  :width: 800px\n\n5 Run the newsprint filter\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNow, run the GIMP's newsprint filter, under filters, distorts, newsprint.\n\nThe first important settings is the spot size, which should be larger than your PCB's minimum detail size (about 10px\nwith ``gerbolyze render`` default settings for good-quality silkscreen). In general the cheap and fast standard option of chinese PCB houses will require a larger detail size, but when you order specialty options like large size, 4-layer or non-green color along with a longer turnaround time you'll get much better-quality silk screen.\n\nThe second important setting is oversampling, which should be set to four or slightly higher. This improves the result\nof the edge reconstruction of ``gerbolyze vectorize``.\n\n.. image:: screenshots/11newsprint.png\n  :width: 800px\n\nThe following are examples on the detail resulting from the newsprint filter.\n\n.. image:: screenshots/12newsprint.png\n  :width: 800px\n\n6 Export the image for use with ``gerbolyze vectorize``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSimply export the image as a PNG file. Below are some pictures of the output ``gerbolyze vectorize`` produced for this\nexample.\n\n.. image:: screenshots/14result_cut.png\n  :width: 800px\n\n.. image:: screenshots/15result_cut.png\n  :width: 800px\n\nManufacturing Considerations\n----------------------------\n\nThe main consideration when designing artwork for PCB processes is the processes' trace/space design rule. The two\nthings you can do here is one, to be creative with graphical parts of the design and avoid extremely narrow lines,\nwedges or other thin features that will not come out well. Number two is to keep detail in raster images several times\nlarger than the manufacturing processes native capability. For example, to target a trace/space design rule of 100 µm,\nthe smallest detail in embedded raster graphics should not be much below 1mm.\n\nGerbolyze's halftone vectorizers have built-in support for trace/space design rules. While they can still produce small\nartifacts that violate these rules, their output should be close enough to satifsy board houses and close enough for the\nresult to look good. The way gerbolyze does this is to clip the halftone cell's values to zero whenevery they get too\nsmall, and to forcefully split or merge two neighboring cells when they get too close. While this process introduces\nslight steps at the top and bottom of grayscale response, for most inputs these are not noticeable.\n\nOn the other hand, for SVG vector elements as well as for traced raster images, Gerbolyze cannot help with these design\nrules. There is no heuristic that would allow Gerbolyze to non-destructively \"fix\" a design here, so all that's on the\nroadmap here is to eventually include a gerber-level design rule checker.\n\nAs far as board houses go, I have made good experiences with the popular Chinese board houses. In my experience, JLC\nwill just produce whatever you send them with little fucks being given about design rule adherence or validity of the\ninput gerbers. This is great if you just want artistic circuit boards without much of a hassle, and you don't care if\nthey come out exactly as you imagined. The worst I've had happen was when an older version of gerbolyze generated\npolygons with holes assuming standard fill-rule processing. The in the board house's online gerber viewer things looked\nfine, and neither did they complain during file review. However, the resulting boards looked completely wrong because\nall the dark halftones were missing.\n\nPCBWay on the other hand has a much more rigurous file review process. They <em>will</em> complain when you throw\nillegal garbage gerbers at them, and they will helpfully guide you through your design rule violations. In this way you\nget much more of a professional service from them and for designs that have to be functional their higher level of\nscrutiny definitely is a good thing. For the design you saw in the first picture in this article, I ended up begging\nthem to just plot my files if it doesn't physically break their machines and to their credit, while they seemed unhappy\nabout it they did it and the result looks absolutely stunning.\n\nPCBWay is a bit more expensive on their lowest-end offering than JLC, but I found that for anything else (large boards,\nmulti-layer, gold plating etc.) their prices match. PCBWay offers a much broader range of manufacturing options such as\nflexible circuit boards, multi-layer boards, thick or thin substrates and high-temperature substrates.\n\nWhen in doubt about how your design is going to come out on the board, do not hesitate to contact your board house. Most\nof the end customer-facing online PCB services have a number of different factories that do a number of different\nfabrication processes for them depending on order parameters. Places like PCBWay have exceptional quality control and\ngood customer service, but that is mostly focused on the technical aspects of the PCB. If you rely on visual aspects\nlike silkscreen uniformity or solder mask color that is a strong no concern to everyone else in the electronics\nindustry, you may find significant variations between manufacturers or even between orders with the same manufacturer\nand you may encounter challenges communicating your requirements.\n\nLimitations\n-----------\n\nSVG raster features\n~~~~~~~~~~~~~~~~~~~\n\nCurrently, SVG masks and filters are not supported. Though SVG is marketed as a \"vector graphics format\", these two\nfeatures are really raster primitives that all SVG viewers perform at the pixel level after rasterization. Since\nsupporting these would likely not end up looking like what you want, it is not a planned feature. If you need masks or\nfilters, simply export the relevant parts of the SVG as a PNG then include that in your template.\n\nGerber pass-through\n~~~~~~~~~~~~~~~~~~~\n\nSince gerbolyze has to composite your input gerbers with its own output, it has to fully parse and re-serialize them.\ngerbolyze gerbonara_ for all its gerber parsing needs. Thus, gerbonara will interpret your gerbers and output will be in\ngerbonara's gerber \"dialect\". If you find a corner case where this does not work and the output looks wrong, please file\na bug report with an example file on the gerbonara_ bug tracker. *Always* check the output files for errors before\nsubmitting them to production.\n\nGerbolyze is provided without any warranty, but still please open an issue or `send me an email\n<mailto:gerbolyze@jaseg.de>`__ if you find any errors or inconsistencies. \n\nTrace/Space design rule adherence\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhile the grayscale halftone vectorizers do a reasonable job adhering to a given trace/space design rule, they can still\nproduce small parts of output that violate it. For the contour vectorizer as well as for all SVG primitives, you are\nresponsible for adhering to design rules yourself as there is no algorithm that gerboyze could use to \"fix\" its input.\n\nA design rule checker is planned as a future addition to gerbolyze, but is not yet part of it. If in doubt, talk to your\nfab and consider doing a test run of your design before ordering assembled boards ;)\n\nGallery\n-------\n\n.. image:: https://gitlab.com/gerbolyze/gerbolyze/-/raw/v3.0.11/pics/sample3.jpg\n  :width: 400px\n\nFor a demonstration of ``gerbolyze convert``, check out the `Gerbolyze Protoboard Index`_, where you can download gerber\nfiles for over 7.000 SMD and THT protoboard layouts.\n\nLicensing\n---------\n\nThis tool is licensed under the rather radical AGPLv3 license. Briefly, this means that you have to provide users of a\nwebapp using this tool in the backend with this tool's source.\n\nI get that some people have issues with the AGPL. In case this license prevents you from using this software, please\nsend me `an email <mailto:agpl.sucks@jaseg.de>`__ and I can grant you an exception. I want this software to be useful to as\nmany people as possible and I wouldn't want the license to be a hurdle to anyone. OTOH I see a danger of some cheap\nboard house just integrating a fork into their webpage without providing their changes back upstream, and I want to\navoid that so the default license is still AGPL.\n\n.. _usvg: https://github.com/RazrFalcon/resvg\n.. _Inkscape: https://inkscape.org/\n.. _pcb-tools: https://github.com/curtacircuitos/pcb-tools\n.. _pcb-tools-extension: https://github.com/opiopan/pcb-tools-extension\n.. _GIMP: https://gimp.org/\n.. _gerbonara: https://gitlab.com/gerbolyze/gerbonara\n.. _`Gerbolyze Protoboard Index`: https://dyna.kokoroyukuma.de/protos/\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jaseg/gerbolyze",
    "keywords": "",
    "license": "AGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gerbolyze",
    "package_url": "https://pypi.org/project/gerbolyze/",
    "platform": null,
    "project_url": "https://pypi.org/project/gerbolyze/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jaseg/gerbolyze/issues",
      "Homepage": "https://github.com/jaseg/gerbolyze",
      "Source Code": "https://git.jaseg.de/gerbolyze"
    },
    "release_url": "https://pypi.org/project/gerbolyze/3.0.11/",
    "requires_dist": [
      "gerbonara",
      "numpy",
      "python-slugify",
      "lxml",
      "click",
      "resvg-wasi (>=0.23.0)",
      "svg-flatten-wasi[resvg-wasi]"
    ],
    "requires_python": "",
    "summary": "A high-resolution image-to-PCB converter. Gerbolyze plots SVG, PNG and JPG onto existing gerber files. It handles almost the full SVG spec and deals with text, path outlines, patterns, arbitrary paths with self-intersections and holes, etc. fully automatically. It can vectorize raster images both by contour tracing and by grayscale dithering. All processing is done at the vector level without intermediate conversions to raster images accurately preserving the input.",
    "version": "3.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14397860,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10a45c9f0ecce8ff2e84d0d6ef4e696e523697fce9343afab69abf2c7d706452",
          "md5": "1407c55e8037cff80940a735a1198715",
          "sha256": "d6c7b5572ca70fe2febd882c816fbab6cbf88d47bb4dd827acedf9a5fb999dcc"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1407c55e8037cff80940a735a1198715",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9135,
        "upload_time": "2018-07-08T10:51:25",
        "upload_time_iso_8601": "2018-07-08T10:51:25.847893Z",
        "url": "https://files.pythonhosted.org/packages/10/a4/5c9f0ecce8ff2e84d0d6ef4e696e523697fce9343afab69abf2c7d706452/gerbolyze-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfa0ca63fa529221b7e1cff74406efde98859aeb9bc2f783faf550571e9189ce",
          "md5": "cfd16fa829c5e276ddcabc1aa32a0f93",
          "sha256": "51a342030d528da5911834c81b05c9d87212cc748ec4557edae190febf7ef023"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "cfd16fa829c5e276ddcabc1aa32a0f93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9747,
        "upload_time": "2019-03-25T17:16:16",
        "upload_time_iso_8601": "2019-03-25T17:16:16.826353Z",
        "url": "https://files.pythonhosted.org/packages/df/a0/ca63fa529221b7e1cff74406efde98859aeb9bc2f783faf550571e9189ce/gerbolyze-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "066b548da11f880c8fc862743f941e80fe74fd76d03fbcd919b6b997fa5e5a37",
          "md5": "83e35ce62b6b550b35c1e4880da12697",
          "sha256": "fd09685a96c88a751a3442b43b50439a62615ac453965d1562afcd0e9af81c77"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "83e35ce62b6b550b35c1e4880da12697",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9774,
        "upload_time": "2019-11-18T14:34:12",
        "upload_time_iso_8601": "2019-11-18T14:34:12.861686Z",
        "url": "https://files.pythonhosted.org/packages/06/6b/548da11f880c8fc862743f941e80fe74fd76d03fbcd919b6b997fa5e5a37/gerbolyze-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d33cc0f528fb439909e393d63d36023cd21cf37a5859cdba86fb62c93f9970d0",
          "md5": "d5dde64b1f9dfa398ced390e38c59259",
          "sha256": "524d410707c22161098d32e521a04e3894ffa57596a9a8f88f4a49cef7606f41"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "d5dde64b1f9dfa398ced390e38c59259",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9776,
        "upload_time": "2020-03-03T20:51:50",
        "upload_time_iso_8601": "2020-03-03T20:51:50.590591Z",
        "url": "https://files.pythonhosted.org/packages/d3/3c/c0f528fb439909e393d63d36023cd21cf37a5859cdba86fb62c93f9970d0/gerbolyze-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51051a3be1ceb5155d3d57e152b8c96b2ab4ad81ed07a739806d60fd17d65831",
          "md5": "a1c6fc1f370d5370f450f253ffd07a52",
          "sha256": "6f93a5afa0b0ca16a745924e5c3663aa50569296b661a8c4fb69c0de1f2124e4"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a1c6fc1f370d5370f450f253ffd07a52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9637,
        "upload_time": "2018-07-08T10:54:10",
        "upload_time_iso_8601": "2018-07-08T10:54:10.431393Z",
        "url": "https://files.pythonhosted.org/packages/51/05/1a3be1ceb5155d3d57e152b8c96b2ab4ad81ed07a739806d60fd17d65831/gerbolyze-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3908a93667fb5c0c043568ad7bf1ff461de1a47993a37c42756a35da84cd6a9c",
          "md5": "f2ce70ff8e65c6dbfd635c8d6cfd5301",
          "sha256": "80c6e356d817df3cae847e4d3ddede8a086a983601f3e83091ae3dcd0c4f85a3"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f2ce70ff8e65c6dbfd635c8d6cfd5301",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6687569,
        "upload_time": "2018-07-08T10:55:51",
        "upload_time_iso_8601": "2018-07-08T10:55:51.165667Z",
        "url": "https://files.pythonhosted.org/packages/39/08/a93667fb5c0c043568ad7bf1ff461de1a47993a37c42756a35da84cd6a9c/gerbolyze-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc174b3a17cfb2fd03898542b0ae6fba6206f4aee24a1b9c4c7639bb38c164e6",
          "md5": "e681d330bb9a832d7be98d1dbb639aa4",
          "sha256": "e90e9710bb28454f13603a6c86cd91245e48fc8db2219f2a4aac45d15c11e3b8"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e681d330bb9a832d7be98d1dbb639aa4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6687676,
        "upload_time": "2018-07-08T11:00:21",
        "upload_time_iso_8601": "2018-07-08T11:00:21.858720Z",
        "url": "https://files.pythonhosted.org/packages/dc/17/4b3a17cfb2fd03898542b0ae6fba6206f4aee24a1b9c4c7639bb38c164e6/gerbolyze-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c87c4cd9c78c3238f6de15dadb9e6aac7346c2b4d63c1d52d57644b320024ca2",
          "md5": "5e482f584effee4b9a41aaedea3d9006",
          "sha256": "e082aa60e0330e03beb731a5d85d9e36c2369a34aeb773efe94bfe1ced454442"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5e482f584effee4b9a41aaedea3d9006",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6687585,
        "upload_time": "2018-07-08T11:01:09",
        "upload_time_iso_8601": "2018-07-08T11:01:09.787871Z",
        "url": "https://files.pythonhosted.org/packages/c8/7c/4cd9c78c3238f6de15dadb9e6aac7346c2b4d63c1d52d57644b320024ca2/gerbolyze-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8f360ce9ddc06bff007325c4b2594d719d2f08c0e9f5bfaa3a2c13d1e6e62d9",
          "md5": "bc3efcc589f8919907c459502cdba779",
          "sha256": "bd73735e6537ea2c40995da3978fcea7cefc16e404804636b1fda9fcf385fe85"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "bc3efcc589f8919907c459502cdba779",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9669,
        "upload_time": "2018-07-08T11:02:19",
        "upload_time_iso_8601": "2018-07-08T11:02:19.981337Z",
        "url": "https://files.pythonhosted.org/packages/c8/f3/60ce9ddc06bff007325c4b2594d719d2f08c0e9f5bfaa3a2c13d1e6e62d9/gerbolyze-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0193a89f6c9192108099976990006055f5707462548e190c7b1d6c4dd4bf1e75",
          "md5": "e390f3ab6b812d4d82743592087ad0fa",
          "sha256": "d720cb359f765242b223373cc86a5d3126e81fbfe910be77bf9f12b40f945f03"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e390f3ab6b812d4d82743592087ad0fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9669,
        "upload_time": "2018-07-08T11:11:28",
        "upload_time_iso_8601": "2018-07-08T11:11:28.363803Z",
        "url": "https://files.pythonhosted.org/packages/01/93/a89f6c9192108099976990006055f5707462548e190c7b1d6c4dd4bf1e75/gerbolyze-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af4a2c87be0110aa7db2275fa398f0c77ebb0ac0696fb22e3ff46ffb4d71b68b",
          "md5": "26b72a3d76d6c8096a0c2b79781f6191",
          "sha256": "94e03e7db9263f015df03ee80b3992311c605e39557ebc486db2d3027506aedc"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "26b72a3d76d6c8096a0c2b79781f6191",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9674,
        "upload_time": "2019-02-03T05:47:18",
        "upload_time_iso_8601": "2019-02-03T05:47:18.382329Z",
        "url": "https://files.pythonhosted.org/packages/af/4a/2c87be0110aa7db2275fa398f0c77ebb0ac0696fb22e3ff46ffb4d71b68b/gerbolyze-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1327ae8c06fa5388e976ba06bea79c77741b23e51adb088b9183640c96da5e1",
          "md5": "e0bfd2d803307218d65cd02298461785",
          "sha256": "e0228c5963080ec6da24439d9c837517da0cc448c75c0edef8b08cdf8774e9d2"
        },
        "downloads": -1,
        "filename": "gerbolyze-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "e0bfd2d803307218d65cd02298461785",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9747,
        "upload_time": "2019-03-25T17:13:15",
        "upload_time_iso_8601": "2019-03-25T17:13:15.016666Z",
        "url": "https://files.pythonhosted.org/packages/d1/32/7ae8c06fa5388e976ba06bea79c77741b23e51adb088b9183640c96da5e1/gerbolyze-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36e96874790d1738ce38a815a12580f4b81cf910695c5faa7eaba1dd0fbe47e4",
          "md5": "8601cff46e52c8facf82159124f96dfb",
          "sha256": "22e05523a928a57a73c9baea3ad4c663945806f6331e982841ab0361d9b8a408"
        },
        "downloads": -1,
        "filename": "gerbolyze-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8601cff46e52c8facf82159124f96dfb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 186145,
        "upload_time": "2021-02-06T18:16:41",
        "upload_time_iso_8601": "2021-02-06T18:16:41.978143Z",
        "url": "https://files.pythonhosted.org/packages/36/e9/6874790d1738ce38a815a12580f4b81cf910695c5faa7eaba1dd0fbe47e4/gerbolyze-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5672f06211322d03a2a7be90f0022037903f31829e6820eee696336d327fcfe1",
          "md5": "ea7d7ac9cbb188a1a6db115a62f18848",
          "sha256": "e063384d8921028471982e05f46e873f4ada69927904d6953e6f551a7808bd3c"
        },
        "downloads": -1,
        "filename": "gerbolyze-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ea7d7ac9cbb188a1a6db115a62f18848",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 412516,
        "upload_time": "2021-02-06T18:19:01",
        "upload_time_iso_8601": "2021-02-06T18:19:01.408755Z",
        "url": "https://files.pythonhosted.org/packages/56/72/f06211322d03a2a7be90f0022037903f31829e6820eee696336d327fcfe1/gerbolyze-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5834b07a424e8db326845d938a177f4b64c4fc22881314bce917f8daa34a0f66",
          "md5": "54fa40a0b8f8c1b233c001ecf6cd6d86",
          "sha256": "47492e1bf442e753bb33bac8e37d2f04d947d852ad5e5dac521edd0883562a68"
        },
        "downloads": -1,
        "filename": "gerbolyze-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "54fa40a0b8f8c1b233c001ecf6cd6d86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 412559,
        "upload_time": "2021-02-06T18:28:12",
        "upload_time_iso_8601": "2021-02-06T18:28:12.801939Z",
        "url": "https://files.pythonhosted.org/packages/58/34/b07a424e8db326845d938a177f4b64c4fc22881314bce917f8daa34a0f66/gerbolyze-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85cb374957dfcaa7c39b5591fc4da7ebed7d64ce9dcef7610e55d43ceeeb5836",
          "md5": "57c2fd36f43a327a0521da479ccd3085",
          "sha256": "cf1b651a48db919894ddcea11975774d83034d4e1d9da2c3cb2b8e9891b25d58"
        },
        "downloads": -1,
        "filename": "gerbolyze-2.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "57c2fd36f43a327a0521da479ccd3085",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 427067,
        "upload_time": "2021-02-07T12:20:18",
        "upload_time_iso_8601": "2021-02-07T12:20:18.724267Z",
        "url": "https://files.pythonhosted.org/packages/85/cb/374957dfcaa7c39b5591fc4da7ebed7d64ce9dcef7610e55d43ceeeb5836/gerbolyze-2.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9621ad399ac0bef3be36cc51c2dcbf2eae6e592c445e4075f1dd62599e6e85e4",
          "md5": "85edd0b3cb7008e43ef7d4880b5fb283",
          "sha256": "592a73b9cbc73681afd5f59aad6cce927939b6d9a3c3a07b7897a44b9fe6ffe6"
        },
        "downloads": -1,
        "filename": "gerbolyze-2.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "85edd0b3cb7008e43ef7d4880b5fb283",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 429981,
        "upload_time": "2021-02-14T11:15:59",
        "upload_time_iso_8601": "2021-02-14T11:15:59.049933Z",
        "url": "https://files.pythonhosted.org/packages/96/21/ad399ac0bef3be36cc51c2dcbf2eae6e592c445e4075f1dd62599e6e85e4/gerbolyze-2.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d798f885a2a3a4427f770ab77e930e4359e3794d8fb4fae6f8f378771a4ca7df",
          "md5": "3ae0006913e2dfa21726d7596cff0175",
          "sha256": "1c65149cb5b1c35a3eb26129d5e57b46dcaafcd44c8e64ad4853c1a251244312"
        },
        "downloads": -1,
        "filename": "gerbolyze-2.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "3ae0006913e2dfa21726d7596cff0175",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 430431,
        "upload_time": "2021-02-17T18:00:44",
        "upload_time_iso_8601": "2021-02-17T18:00:44.626473Z",
        "url": "https://files.pythonhosted.org/packages/d7/98/f885a2a3a4427f770ab77e930e4359e3794d8fb4fae6f8f378771a4ca7df/gerbolyze-2.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b93dceb20f6c2b9c50fa3559662b09b175fac71461167cf45dc25469e0dd335",
          "md5": "da0af4ef88ff33882b7c1372cd885871",
          "sha256": "6dbd2c5f4c8101c09df0358edbc59fc5e96a7f59c266da8f757e91ba95345b24"
        },
        "downloads": -1,
        "filename": "gerbolyze-2.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "da0af4ef88ff33882b7c1372cd885871",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 432915,
        "upload_time": "2021-04-05T12:02:53",
        "upload_time_iso_8601": "2021-04-05T12:02:53.991628Z",
        "url": "https://files.pythonhosted.org/packages/3b/93/dceb20f6c2b9c50fa3559662b09b175fac71461167cf45dc25469e0dd335/gerbolyze-2.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9978b40665a61ec3e021efe84639a4644ecb51f3adaac678f68d291b68cb72b9",
          "md5": "290e79a4f8eaa5ce339c0deaf6de1663",
          "sha256": "fbf29fdfbd701555e44f73fc3ead2fc8cf3b020d02abcd373c3a6d021d6b8288"
        },
        "downloads": -1,
        "filename": "gerbolyze-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "290e79a4f8eaa5ce339c0deaf6de1663",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 437142,
        "upload_time": "2021-04-25T16:50:24",
        "upload_time_iso_8601": "2021-04-25T16:50:24.855027Z",
        "url": "https://files.pythonhosted.org/packages/99/78/b40665a61ec3e021efe84639a4644ecb51f3adaac678f68d291b68cb72b9/gerbolyze-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "941a14aa2645563c27593c89b9a3e7a7d9677abb28d271fadbd536f390e29814",
          "md5": "56d0a58e3fe0c989a351ff5968ddb173",
          "sha256": "0079b491e21d9f6e77dd4799f757138ea8bcb74b5b9decd92c4c65e1614ad1fb"
        },
        "downloads": -1,
        "filename": "gerbolyze-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "56d0a58e3fe0c989a351ff5968ddb173",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 437242,
        "upload_time": "2021-05-24T18:55:54",
        "upload_time_iso_8601": "2021-05-24T18:55:54.594237Z",
        "url": "https://files.pythonhosted.org/packages/94/1a/14aa2645563c27593c89b9a3e7a7d9677abb28d271fadbd536f390e29814/gerbolyze-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "866c94147d2e792fc14ea9c7c7c8ac71e27b98e51f3c27bd50f8fc52eb4b64ce",
          "md5": "6463df2b4d44a664a0fe3791c648b468",
          "sha256": "ff3749e2a391310c30883e5c3ad6b3bfd9c0de7cb42dc04c3fa5190014af9ab9"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6463df2b4d44a664a0fe3791c648b468",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32000,
        "upload_time": "2022-06-12T10:48:26",
        "upload_time_iso_8601": "2022-06-12T10:48:26.657266Z",
        "url": "https://files.pythonhosted.org/packages/86/6c/94147d2e792fc14ea9c7c7c8ac71e27b98e51f3c27bd50f8fc52eb4b64ce/gerbolyze-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "652c3803cb5d8b93c4792ecc40da27a00e34e4eca5e879b2ed97372ae009efe2",
          "md5": "b6d4a24a5de356be2c6030fe8e2f837c",
          "sha256": "72039af03fe1aeea4fb30a442191b9da673f8ce344f6152037e36c661cc95d01"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6d4a24a5de356be2c6030fe8e2f837c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31998,
        "upload_time": "2022-06-12T12:51:10",
        "upload_time_iso_8601": "2022-06-12T12:51:10.876124Z",
        "url": "https://files.pythonhosted.org/packages/65/2c/3803cb5d8b93c4792ecc40da27a00e34e4eca5e879b2ed97372ae009efe2/gerbolyze-3.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaaf4416aa8a4813b856e5411711dbfa98498d5b088083a992595dd7e634d468",
          "md5": "681ea6cbc16feeec719e1115b6f9aae9",
          "sha256": "efd53cdd68cbda24a92322e383642666004010ceaf040d790b6b8fa5f98801cd"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "681ea6cbc16feeec719e1115b6f9aae9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38641,
        "upload_time": "2022-06-24T11:30:13",
        "upload_time_iso_8601": "2022-06-24T11:30:13.773101Z",
        "url": "https://files.pythonhosted.org/packages/ea/af/4416aa8a4813b856e5411711dbfa98498d5b088083a992595dd7e634d468/gerbolyze-3.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c167ffb8735bb71d5f3c2da896536281999d3d823b8237b2b7a37ecaa2768068",
          "md5": "f80403a6d4c5e8673039c653379574b1",
          "sha256": "68b207fe2e6538b294953ea6c3fb1fa8846359a5d74b390a895592ae3bb13c1d"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "f80403a6d4c5e8673039c653379574b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62096,
        "upload_time": "2022-06-24T11:30:16",
        "upload_time_iso_8601": "2022-06-24T11:30:16.144884Z",
        "url": "https://files.pythonhosted.org/packages/c1/67/ffb8735bb71d5f3c2da896536281999d3d823b8237b2b7a37ecaa2768068/gerbolyze-3.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ab15b95b487688f1155ffcfc70cf4e0d35c3c64633ce61a0594430195b38a29",
          "md5": "fc82b6a85321e98faf190b1884d832e2",
          "sha256": "81d9fe7be8a67ffce3a0ce0150d4722b2a77c3962e35e48f8256a070f02ff972"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc82b6a85321e98faf190b1884d832e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39462,
        "upload_time": "2022-07-11T10:41:47",
        "upload_time_iso_8601": "2022-07-11T10:41:47.537486Z",
        "url": "https://files.pythonhosted.org/packages/3a/b1/5b95b487688f1155ffcfc70cf4e0d35c3c64633ce61a0594430195b38a29/gerbolyze-3.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2142b404c46f43724a6652f591bef786378c3c66e3687802f27cb40db46d8c1",
          "md5": "912ec364907c75777132490fef0618dd",
          "sha256": "06301568531730d948096f9e336c0be11c0d58ed83d84fefa6074ed68c21fd68"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "912ec364907c75777132490fef0618dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63634,
        "upload_time": "2022-07-11T10:41:50",
        "upload_time_iso_8601": "2022-07-11T10:41:50.772413Z",
        "url": "https://files.pythonhosted.org/packages/b2/14/2b404c46f43724a6652f591bef786378c3c66e3687802f27cb40db46d8c1/gerbolyze-3.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b8c55c3377d5e17107f2987e9ef1b87abc4c41d2b08b5e349e9d1a816c67ed3",
          "md5": "2004d0f8cef324e682f0e65997e3d4bb",
          "sha256": "3bc83321959bdb7ee1d230497addc7257b59e38e7995534c65ad93b91cbfa83a"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2004d0f8cef324e682f0e65997e3d4bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31237,
        "upload_time": "2022-06-12T13:49:56",
        "upload_time_iso_8601": "2022-06-12T13:49:56.154420Z",
        "url": "https://files.pythonhosted.org/packages/1b/8c/55c3377d5e17107f2987e9ef1b87abc4c41d2b08b5e349e9d1a816c67ed3/gerbolyze-3.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ec22430732f2db4b12e7b4f62c4370d7006e2aea37e1bf7d073ddc8cd8c6bee",
          "md5": "b13240a0455c9697a406636ff0f15e56",
          "sha256": "6512587f56ba13333c2c0671512ad48036f0ea9daafdff3f92ef1175d43e23f2"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b13240a0455c9697a406636ff0f15e56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31635,
        "upload_time": "2022-06-13T21:51:44",
        "upload_time_iso_8601": "2022-06-13T21:51:44.514583Z",
        "url": "https://files.pythonhosted.org/packages/6e/c2/2430732f2db4b12e7b4f62c4370d7006e2aea37e1bf7d073ddc8cd8c6bee/gerbolyze-3.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f9089f84c7056fc7c18debcf617e170809508cd4ab7d16f3492e4ee2074124b",
          "md5": "3e0eda8b7f08a48b3a2da9e0c20af4af",
          "sha256": "4540d2e9a02c8bc3e874762f49555ba86e18ca0613e8c190d41e5feb291dc27d"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3e0eda8b7f08a48b3a2da9e0c20af4af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54189,
        "upload_time": "2022-06-13T21:51:47",
        "upload_time_iso_8601": "2022-06-13T21:51:47.021358Z",
        "url": "https://files.pythonhosted.org/packages/0f/90/89f84c7056fc7c18debcf617e170809508cd4ab7d16f3492e4ee2074124b/gerbolyze-3.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c33717dabe3ec23b42ab43ff7a0ed222203bbaebf4565631ed025e099d1f8539",
          "md5": "795e4caa67aa7984733cbd29136032f6",
          "sha256": "4e52092696fe76066ab8bd45789a6b2634691c379968b55101f868a5ae40168e"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "795e4caa67aa7984733cbd29136032f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38307,
        "upload_time": "2022-06-21T14:31:35",
        "upload_time_iso_8601": "2022-06-21T14:31:35.505826Z",
        "url": "https://files.pythonhosted.org/packages/c3/37/17dabe3ec23b42ab43ff7a0ed222203bbaebf4565631ed025e099d1f8539/gerbolyze-3.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44760ddb5de753586d93ecd92cc2c45da9bbc2940150859295feb6d3a47711a4",
          "md5": "286e877fc70acea767a3a6be65dd5093",
          "sha256": "fb5425d4a44a0aefeb2419ab597d3b4e56f46a9dcbffe4160eec9a19bd082b72"
        },
        "downloads": -1,
        "filename": "gerbolyze-3.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "286e877fc70acea767a3a6be65dd5093",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61788,
        "upload_time": "2022-06-21T14:31:38",
        "upload_time_iso_8601": "2022-06-21T14:31:38.179896Z",
        "url": "https://files.pythonhosted.org/packages/44/76/0ddb5de753586d93ecd92cc2c45da9bbc2940150859295feb6d3a47711a4/gerbolyze-3.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ab15b95b487688f1155ffcfc70cf4e0d35c3c64633ce61a0594430195b38a29",
        "md5": "fc82b6a85321e98faf190b1884d832e2",
        "sha256": "81d9fe7be8a67ffce3a0ce0150d4722b2a77c3962e35e48f8256a070f02ff972"
      },
      "downloads": -1,
      "filename": "gerbolyze-3.0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fc82b6a85321e98faf190b1884d832e2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 39462,
      "upload_time": "2022-07-11T10:41:47",
      "upload_time_iso_8601": "2022-07-11T10:41:47.537486Z",
      "url": "https://files.pythonhosted.org/packages/3a/b1/5b95b487688f1155ffcfc70cf4e0d35c3c64633ce61a0594430195b38a29/gerbolyze-3.0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2142b404c46f43724a6652f591bef786378c3c66e3687802f27cb40db46d8c1",
        "md5": "912ec364907c75777132490fef0618dd",
        "sha256": "06301568531730d948096f9e336c0be11c0d58ed83d84fefa6074ed68c21fd68"
      },
      "downloads": -1,
      "filename": "gerbolyze-3.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "912ec364907c75777132490fef0618dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 63634,
      "upload_time": "2022-07-11T10:41:50",
      "upload_time_iso_8601": "2022-07-11T10:41:50.772413Z",
      "url": "https://files.pythonhosted.org/packages/b2/14/2b404c46f43724a6652f591bef786378c3c66e3687802f27cb40db46d8c1/gerbolyze-3.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}