{
  "info": {
    "author": "LinkML Developers",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Semantic-DSL\n\nFor rapid development of semantically-backed Domain-Specific Languages (DSLs),\n\n## Installation\n\n```bash\npip install semdsl\n```\n\n## Usage\n\nTo illustrate the usage of semdsl, we will create a simple [LinkML](https://linkml.io) schema \nfor part of the [Clue board game](https://en.wikipedia.org/wiki/Cluedo), in particular for\nrepresenting a hypothesis about who committed the misdeed, where, and with what.\n\nWe will *annotate* the schema with *grammar hints*, that can be used to generate the grammar for the DSL.\n\n\n```yaml\n\n```python\n>>> schema = \"\"\"\n... id: https://example.org/clue\n... name: clue\n... imports:\n...   - https://w3id.org/linkml/types\n... classes:\n...   ClueHypothesis:\n...     attributes:\n...       person:   # e.g. Colonel Mustard\n...         annotations:\n...           grammar.main: \"WORD WORD\"\n...       location: # e.g. Kitchen\n...         annotations:\n...           grammar.main: \"WORD\"\n...       weapon:   # e.g. Candlestick\n...         annotations:\n...           grammar.main: \"WORD\"\n...     annotations:\n...       grammar.main: >-\n...         \"<\" person \"in the\" location \"with the\" weapon \">\" \n... \"\"\"\n\n```\n\nThe idea is to be able to represent hypotheses using strings like `<Colonel Mustard in the Kitchen with the Candlestick>`.\n\nWe can then use the `DSLEngine` class to load the schema and generate a grammar:\n\n```python\n>>> from semdsl import DSLEngine\n>>> engine = DSLEngine()\n>>> engine.load_schema(schema)\n>>> print(engine.lark_serialization)\nfrom lark import Lark\n...\nclass_clue_hypothesis : \"<\" person \"in the\" location \"with the\" weapon \">\"\nperson : WORD WORD\nlocation : WORD\nweapon : WORD\n...\n\n```\n\nThe default is Lark syntax.\n\nYou can then use the generated grammar to parse serializations into pydantic objects that are schema conformant:\n\n```python\n>>> obj = engine.parse_as_object('<Colonel Mustard in the Kitchen with the Candlestick>')\n>>> print(obj.location)\nKitchen\n>>> print(obj.json())\n   {\"person\": \"Colonel Mustard\", \"location\": \"Kitchen\", \"weapon\": \"Candlestick\"}\n\n```\n\n## Auto-assigning production rules\n\nIn the previous example we saw how we could *annotate* an existing schema with grammar rules\n\nHowever, we can also *generate* grammar rules from the schema itself.\n\nThis is done by using the `grammar.main` annotation on a class, and then using the `grammar.auto` annotation on the attributes of that class. For example:\n\n```python\n>>> schema = \"\"\"\n... id: https://example.org/clue\n... name: clue\n... imports:\n...   - https://w3id.org/linkml/types\n... classes:\n...   ClueHypothesis:\n...     attributes:\n...       person:   # e.g. Colonel Mustard\n...       location: # e.g. Kitchen\n...       weapon:   # e.g. Candlestick\n... \"\"\"\n\n```\n\nnow we will create a new engine and load the schema, and generate a de-novo \"functional-style\" grammar:\n\n```python\n>>> engine = DSLEngine() ## create new DSLEngine\n>>> engine.load_schema(schema)\n>>> print(engine.lark_serialization)\nfrom lark import Lark\n...\nclass_clue_hypothesis : \"ClueHypothesis(\" slot_clue_hypothesis__person? slot_clue_hypothesis__location? slot_clue_hypothesis__weapon? \")\"\nslot_clue_hypothesis__person : \"person=\" TYPE_STRING\nslot_clue_hypothesis__location : \"location=\" TYPE_STRING\nslot_clue_hypothesis__weapon : \"weapon=\" TYPE_STRING\n...\n\n```\n\nYou can then use the generated grammar to parse strings into objects:\n\n```python\n>>> obj = engine.parse_as_object('ClueHypothesis(person=\"Colonel Mustard\" location=\"Kitchen\" weapon=\"Candlestick\")')\n>>> print(obj.location)\nKitchen\n\n```\n\n## Adding additional semantics\n\nYou can use the following metamodel element:\n\n- [class_uri](https://w3id.prg/linkml/class_uri) \n- [slot_uri](https://w3id.prg/linkml/slot_uri) \n\nto assign URIs to classes and slots in your schema, which can be used in RDF serialization.\n\nHere we extend our Clue schema, adding classes for the ranges of the slots in the main class:\n\n```python\n>>> schema = \"\"\"\n... id: https://example.org/clue\n... name: clue\n... prefixes:\n...   linkml: https://w3id.org/linkml/\n...   clue: https://example.org/clue/\n...   schema: http://schema.org/\n...   prov: http://www.w3.org/ns/prov#\n...   dbpedia: http://dbpedia.org/ontology/\n... imports:\n...   - linkml:types\n... classes:\n...   NamedThing:\n...     class_uri: schema:Thing\n...     attributes:\n...       id:\n...         identifier: true\n...       range: uriorcurie\n...   Person:\n...     class_uri: schema:Person\n...     is_a: NamedThing\n...   Location:\n...     class_uri: schema:Location\n...     is_a: NamedThing\n...   Weapon:\n...     class_uri: dbpedia:Weapon\n...     is_a: NamedThing\n...   ClueHypothesis:\n...     class_uri: prov:Action\n...     tree_root: true\n...     attributes:\n...       person:   # e.g. Colonel Mustard\n...         slot_uri: prov:wasAssociatedWith\n...         range: Person\n...         annotations:\n...           grammar.main: TYPE_URIORCURIE\n...       location: # e.g. Kitchen\n...         slot_uri: prov:atLocation\n...         range: Location\n...         annotations:\n...           grammar.main: TYPE_URIORCURIE\n...       weapon:   # e.g. Candlestick\n...         slot_uri: prov:used\n...         range: Weapon\n...         annotations:\n...           grammar.main: TYPE_URIORCURIE\n...     annotations:\n...       grammar.main: >-\n...         \"<\" person \"in the\" location \"with the\" weapon \">\"\n... \"\"\"\n\n```\n\nNow parse and export to a file. This time the input string uses CURIEs to represent the different things\nin the Clue hypothesis.\n\n```python\n>>> engine = DSLEngine()\n>>> engine.load_schema(schema)\n>>> obj = engine.parse_as_object(\"< clue:ColonelMustard in the clue:Kitchen with the clue:Candlestick >\")\n>>> import yaml\n>>> with open(\"tests/output/clue-output.yaml\", \"w\", encoding=\"utf-8\") as f:\n...     yaml.dump(obj.dict(), f)\n\n```\n\nFrom here we can use LinkML to convert to an RDF serialization:\n\n```bash\ncd clue-output.yaml\nlinkml-convert clue-output -s clue_model.yaml -t ttl\n````\n\nResults:\n\n```turtle\n@prefix clue: <https://example.org/clue/> .\n@prefix prov: <http://www.w3.org/ns/prov#> .\n\n[] a prov:Action ;\n    prov:atLocation clue:Kitchen ;\n    prov:used clue:Candlestick ;\n    prov:wasAssociatedWith clue:ColonelMustard .\n```\n\n## Command Line Interface\n\n```\nsemdsl --help\n```\n\n## Limitations\n\n### Restricted to Lark grammars\n\nCurrently, semdsl only supports Lark grammars. The framework is designed to allow extensibility, e.g. to ANTLR,\nbut this is currently unsupported.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD-3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "semdsl",
    "package_url": "https://pypi.org/project/semdsl/",
    "platform": null,
    "project_url": "https://pypi.org/project/semdsl/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/semdsl/0.0.1rc1/",
    "requires_dist": [
      "lark (>=1.1.5,<2.0.0)",
      "linkml-runtime (>=1.5.0)",
      "inflection (>=0.5.1,<0.6.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "semdsl",
    "version": "0.0.1rc1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17513310,
  "releases": {
    "0.0.1rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31d0d8bbbd4beed259063c729213e02ec053313b36a124c5330941ec0b674955",
          "md5": "9a9c97738b02e3a4ab178195a22647d1",
          "sha256": "e1c9ddd482a702a7ac54adef15fcfe301825a02fd43d036aed2c96a34141c0e8"
        },
        "downloads": -1,
        "filename": "semdsl-0.0.1rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a9c97738b02e3a4ab178195a22647d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 19855,
        "upload_time": "2023-03-30T16:06:05",
        "upload_time_iso_8601": "2023-03-30T16:06:05.100983Z",
        "url": "https://files.pythonhosted.org/packages/31/d0/d8bbbd4beed259063c729213e02ec053313b36a124c5330941ec0b674955/semdsl-0.0.1rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a0aaebca01345b205692f695e51ba4beac04c2972f804101b4f5af8f3b4f5ed",
          "md5": "925c2acfaa5207949e4badae32cd5002",
          "sha256": "632180978d2f3bdf1cfba53952dc52dba935422632b0810f510b4bc60de8fd89"
        },
        "downloads": -1,
        "filename": "semdsl-0.0.1rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "925c2acfaa5207949e4badae32cd5002",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16783,
        "upload_time": "2023-03-30T16:06:07",
        "upload_time_iso_8601": "2023-03-30T16:06:07.608394Z",
        "url": "https://files.pythonhosted.org/packages/8a/0a/aebca01345b205692f695e51ba4beac04c2972f804101b4f5af8f3b4f5ed/semdsl-0.0.1rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31d0d8bbbd4beed259063c729213e02ec053313b36a124c5330941ec0b674955",
        "md5": "9a9c97738b02e3a4ab178195a22647d1",
        "sha256": "e1c9ddd482a702a7ac54adef15fcfe301825a02fd43d036aed2c96a34141c0e8"
      },
      "downloads": -1,
      "filename": "semdsl-0.0.1rc1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a9c97738b02e3a4ab178195a22647d1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 19855,
      "upload_time": "2023-03-30T16:06:05",
      "upload_time_iso_8601": "2023-03-30T16:06:05.100983Z",
      "url": "https://files.pythonhosted.org/packages/31/d0/d8bbbd4beed259063c729213e02ec053313b36a124c5330941ec0b674955/semdsl-0.0.1rc1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a0aaebca01345b205692f695e51ba4beac04c2972f804101b4f5af8f3b4f5ed",
        "md5": "925c2acfaa5207949e4badae32cd5002",
        "sha256": "632180978d2f3bdf1cfba53952dc52dba935422632b0810f510b4bc60de8fd89"
      },
      "downloads": -1,
      "filename": "semdsl-0.0.1rc1.tar.gz",
      "has_sig": false,
      "md5_digest": "925c2acfaa5207949e4badae32cd5002",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 16783,
      "upload_time": "2023-03-30T16:06:07",
      "upload_time_iso_8601": "2023-03-30T16:06:07.608394Z",
      "url": "https://files.pythonhosted.org/packages/8a/0a/aebca01345b205692f695e51ba4beac04c2972f804101b4f5af8f3b4f5ed/semdsl-0.0.1rc1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}