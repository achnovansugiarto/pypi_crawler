{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Chatblade\n## A CLI Swiss Army Knife for ChatGPT\n\nChatblade is a versatile command-line interface (CLI) tool designed to interact with OpenAI's ChatGPT. It accepts piped input, arguments, or both, and allows you to save common prompt preambles for quick usage. Additionally, Chatblade provides utility methods to extract JSON or Markdown from ChatGPT responses.\n\n**Note**: You'll need to set up your OpenAI API key to use Chatblade.\n\nYou can do that by either passing `--openai-api-key KEY` or by setting an env variable `OPENAI_API_KEY` (recommended). The examples below all assume an env variable is set.\n\n## Install\n\n### Latest and greatest\n\nTo stay up to date with the current main branch you can:\n- check out the project, and run `pip install .`\n- or `pip install 'chatblade @ git+https://github.com/npiv/chatblade'`\n\n### Via pypi\n\nThe last released version can be installed with `pip install chatblade --upgrade`\n\n### via Brew tap (slow...)\n\nOffical Homebrew acceptance is pending, in the meantime you can use this brew tap: \n```\nbrew tap npiv/chatblade\nbrew install chatblade\n```\n\n## Documentation\n\n### Making queries\n\n#### A new conversation\n\nYou can begin any query by just typing. eg\n\n```bash\nchatblade how can I extract a still frame from a video at 22:01 with ffmpeg\n```\n<img width=\"650\" alt=\"image\" src=\"https://user-images.githubusercontent.com/452020/226869260-1dcd4faf-521c-466b-998a-fd5cfdc5b3c7.png\">\n\n\n\n#### viewing the last conversation\n\nif you would like to view the last conversation just call it back with `-l`\n\n```bash\nchatblade -l\n```\n\n#### Continue the last conversation\n\nTo continue the conversation and ask for a change within the context, you can again use `-l` but with a query.\n\n```bash\nchatblade -l can we make a gif instead from 00:22:01 to 00:22:04\n```\n\n#### Picking between gpt-3.5 and 4\n\nBy default gpt-3.5 is used, you can switch at any point to 4 by using `-c 4`\n\n#### Chatting interactively\n\nIf you would prefer to chat interactively instead just use `chatblade -i`.\n\n#### Show streaming text (experimental)\n\nYou can also stream the responses, just like in the webui. At the end of the stream it will format the result. This can be combined in an interactive session \n\n```chatblade -s -i```\n\nhttps://user-images.githubusercontent.com/452020/226891636-54d12df2-528f-4365-a4f3-e51cb025773c.mov\n\n\n### Formatting the results\n\nResponses are parsed and if chatblade thinks its markdown it will be presented as such, to get syntax highlighting. But sometimes this may not be what you want, as it removes new lines, or because you are only interested in extracting a part of the result to pipe to another command.\n\nIn that case you have 2 options:\n- `-r` for raw, which just prints the text exactly as ChatGPT returned it, and doesn't pass it through markdown.\n- `-e` for extract, which will try to detect what was returned (either a code block or json) and extract only that part. If neither of those are found it does the same as `-r`\n\nBoth options can be used either with a new query, e.g. \n\n```bash\nchatblade -e write me a python boilerplate script that starts a server and prints hello world > main.py\n```\n\nor with the last result (json in this example)\n```bash\nchatblade -l -e | jq\n```\n\n### Piping content into chatblade\n\nIf we have long prompts we don't want to type everytime, or just want to provide context for our query we can pipe into chatblade.\n\ne.g.\n\n```bash\ncurl https://news.ycombinator.com/rss | chatblade given the above rss can you show me the top 3 articles about AI and their links -c 4\n```\n\nThe piped input is placed above the query and sent to ChatGPT. \n\n<img src=\"assets/example3.png\">\n\nor \n\n```bash\nchatblade what does this script do < script.sh\n```\n\nWhat gets sent to ChatGPT over the wire is:\n\n```\npiped input\n-------\nquery\n```\n\n### Checking token count and estimated costs\n\nIf you want to check the approximate cost and token usage of a previous query, you can use the `-t` flag for \"tokens.\"\n\nWe could do this when passing in a lot of context like in the example above for instance.\n\n```bash\ncurl https://news.ycombinator.com/rss | chatblade given the above rss can you show me the top 3 articles about AI and their links -t\n```\n\n<img width=\"650\" alt=\"image\" src=\"https://user-images.githubusercontent.com/452020/226874588-28c53f53-1d19-4ce3-b7ec-b01c2f7cf75a.png\">\n\nThis won't perform any action over the wire, and just calculates the tokens locally.\n\n### Make custom prompts\n\nWe can also save commonly used prompts. Any file we place under ~/.config/chatblade/ will be picked up by the command.\n\nSo for example, given the following file `~/.config/chatblade/etymology`, which contains:\n\n```\nI want you to act as a professional Etymologist and Quiz Generator. You have a deep knowledge of etymology and will be provided with a word. \nThe goal is to create cards that quiz on both the etymology and finding the word by its definition.\n\nThe following is what a perfect answer would look like for the word \"disparage\":\n\n[{\n  \"question\": \"A verb used to indicate the act of speaking about someone or something in a negative or belittling way.<br/> <i>E.g He would often _______ his coworkers behind their backs.</i>\",\n  \"answer\": \"disparage\"\n},\n{\n  \"question\": \"What is the etymological root of the word disparage?\",\n  \"answer\": \"From the Old French word <i>'desparagier'</i>, meaning 'marry someone of unequal rank', which comes from <i>'des-'</i> (dis-) and <i>'parage'</i> (equal rank)\"\n}]\n\nYou will return answers in JSON only. Answer truthfully and if you don't know then say so. Keep questions as close as possible to the\nprovided examples. Make sure to include an example in the definition question. Use HTML within the strings to nicely format your answers.\n\nIf multiple words are provided, create questions and answers for each of them in one list. \n\nOnly answer in JSON, don't provide any more text. Valid JSON uses \"\" quotes to wrap its items.\n```\n\nWe can now run a command and refer to this prompt with `-p etymology`:\n\n```bash\nchatblade -p etymology gregarious\n```\n\n<img src=\"assets/example5.png\">\n\nAnd since we asked for JSON, we can pipe our result to something else, e.g.:\n\n```bash\nchatblade -l -e > toanki\n```\n\n### Help\n\n```\nusage: Chatblade [-h] [-l] [-p P] [--openai-api-key KEY] [--temperature T] [-c {3.5,4}] [-i] [-s] [-e] [-r] [-t] [query ...]\n\na CLI Swiss Army Knife for ChatGPT\n\npositional arguments:\n  query                 Query to send to chat GPT\n\noptions:\n  -h, --help            show this help message and exit\n  -l, --last            display the last result. If a query is given the conversation is continued\n  -p P, --prompt-file P\n                        prompt name - will load the prompt at ~/.config/chatblade/P\n  --openai-api-key KEY  the OpenAI API key can also be set as env variable OPENAI_API_KEY\n  --temperature T       temperature (openai setting)\n  -c {3.5,4}, --chat-gpt {3.5,4}\n                        chat GPT model\n  -i, --interactive     start an interactive chat session. This will implicitly continue the conversation\n  -s, --stream          Stream the incoming text to the terminal\n  -e, --extract         extract content from response if possible (either json or code block)\n  -r, --raw             print the last response as pure text, don't pretty print or format\n  -t, --tokens          display what *would* be sent, how many tokens, and estimated costs\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/npiv/chatblade",
    "keywords": "chatblade chatgpt cli python",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chatblade",
    "package_url": "https://pypi.org/project/chatblade/",
    "platform": null,
    "project_url": "https://pypi.org/project/chatblade/",
    "project_urls": {
      "Documentation": "https://github.com/npiv/chatblade",
      "Homepage": "https://github.com/npiv/chatblade"
    },
    "release_url": "https://pypi.org/project/chatblade/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "CLI Swiss Army Knife for ChatGPT",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17427479,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a85175ee0fbbe05adb7632e5ac535ccb45a6f767d9922ee287b7beb66496d93",
          "md5": "de21f870534706ac5761e09c15de92b4",
          "sha256": "e0090c2cafe700b7ba5e9b4e8d9fa8f7cef2985d658a30a6d94fad2f354e5ee1"
        },
        "downloads": -1,
        "filename": "chatblade-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "de21f870534706ac5761e09c15de92b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18448,
        "upload_time": "2023-03-20T16:45:57",
        "upload_time_iso_8601": "2023-03-20T16:45:57.753504Z",
        "url": "https://files.pythonhosted.org/packages/4a/85/175ee0fbbe05adb7632e5ac535ccb45a6f767d9922ee287b7beb66496d93/chatblade-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a6fa41492a85ff870ce7f922ce5a93a5c3ab9cc8ff618649ae04e583e58c251",
          "md5": "4053c7847cba8fd4d68ffb652b3d3798",
          "sha256": "a880db55045b2cc051ce7c09b290a93f83a6f91f9ab6a7909f27a2a34d7ffc91"
        },
        "downloads": -1,
        "filename": "chatblade-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4053c7847cba8fd4d68ffb652b3d3798",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19515,
        "upload_time": "2023-03-21T12:47:13",
        "upload_time_iso_8601": "2023-03-21T12:47:13.831198Z",
        "url": "https://files.pythonhosted.org/packages/3a/6f/a41492a85ff870ce7f922ce5a93a5c3ab9cc8ff618649ae04e583e58c251/chatblade-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dc6d3ab2986387806b1fa01e2e8751ed97532a316a8a32c1e50869086016519",
          "md5": "361172d12ee3a71b4f9e55ec0e0161e9",
          "sha256": "19a6e38eb83b57f94db4c17f9efbc0202c752e4b4b3db1ac0eecfbe304e37a66"
        },
        "downloads": -1,
        "filename": "chatblade-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "361172d12ee3a71b4f9e55ec0e0161e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21578,
        "upload_time": "2023-03-22T17:14:04",
        "upload_time_iso_8601": "2023-03-22T17:14:04.970688Z",
        "url": "https://files.pythonhosted.org/packages/8d/c6/d3ab2986387806b1fa01e2e8751ed97532a316a8a32c1e50869086016519/chatblade-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d2471ef00408129ba9e115b95e1f896fbeea5abc447bc3d696e009c2b31dbc7",
          "md5": "679ddac2fc9f424736f20334bfc8bef7",
          "sha256": "1f9e98e3e5209f9d29b07d6716a73fb61f1e27e5330c0d63ee2c64e3c155b913"
        },
        "downloads": -1,
        "filename": "chatblade-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "679ddac2fc9f424736f20334bfc8bef7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24626,
        "upload_time": "2023-03-24T06:51:46",
        "upload_time_iso_8601": "2023-03-24T06:51:46.559573Z",
        "url": "https://files.pythonhosted.org/packages/8d/24/71ef00408129ba9e115b95e1f896fbeea5abc447bc3d696e009c2b31dbc7/chatblade-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d2471ef00408129ba9e115b95e1f896fbeea5abc447bc3d696e009c2b31dbc7",
        "md5": "679ddac2fc9f424736f20334bfc8bef7",
        "sha256": "1f9e98e3e5209f9d29b07d6716a73fb61f1e27e5330c0d63ee2c64e3c155b913"
      },
      "downloads": -1,
      "filename": "chatblade-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "679ddac2fc9f424736f20334bfc8bef7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24626,
      "upload_time": "2023-03-24T06:51:46",
      "upload_time_iso_8601": "2023-03-24T06:51:46.559573Z",
      "url": "https://files.pythonhosted.org/packages/8d/24/71ef00408129ba9e115b95e1f896fbeea5abc447bc3d696e009c2b31dbc7/chatblade-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}