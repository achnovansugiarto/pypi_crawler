{
  "info": {
    "author": "Roy Segall",
    "author_email": "roy@segall.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Tivol\n\n[![Build Status](https://travis-ci.org/RoySegall/django-tivol.svg?branch=master)](https://travis-ci.org/RoySegall/django-tivol)\n\nWelcome to `Tivol`. You probably wonder to your self \"what's this Django\napp do?\". Let's start with a scenario: you created your Django site, or\na backend with REST framework and you start to insert data which you\nwork with. After a while two things came up:\n1. Someone new joined your team and the new guy has no data to work with\n2. You set up a CI with selenium and you need to run e2e tests which\nmeans you need to create data during the tests\n\nThere are more scenarios but all of them comes to the same point - you\nneed real life data.\n\nThis is where `tivol` come handy, you can keep data in source files and\ninsert them to the DB thus allow you to work on dummy content without\nany problem.\n\nWe'll cover up later on how to develop features in your project with a\nDOD (Data Oriented Development) approach but first, let's see how to\nintegrated your Django project with `Tivol`.\n\n## Setup\nFirst, we need to register the map. We can do this by adding it to the\ninstalled app list:\n```\nINSTALLED_APPS = [\n    ...\n    'tivol',\n]\n```\n\nAfter that, we'll need to register a \"Migration entry point\". Migration\nentry point tells to the tivol package the migration handlers we create.\nThe migration handlers will eventually take data from a source file, or\na folder, and will insert them to the DB.\n\nFirst, you'll need to create an entry point class:\n\n```python\nfrom tivol.base_classes.entry_point import EntryPoint\n\n\nclass CustomEntryPoint(EntryPoint):\n\n    def register_migrations(self):\n        pass\n```\n\nIt's recommended to create a folder, i.e `tivol_migration`, and holds\nthere the data and the migrations handlers (which will be covered later\non).\n\nAfter we created out custom entry point, you'll need to register it like\nthat:\n\n```python\nTIVOL_ENTRY_POINT = 'path.to.the.CustomEntryPoint'\n```\n\n## Migrate content\nAfter registering the entry point, we need to introduce our data files\nto the `Tivol` application. There are two steps for this process. This\nprocess will repeat it self each time you want to add more content\nmigrations.\n\n### Register migration handlers\nFirst, we need register the migration handler. Remember the entry point\nyou created earlier? Awesome, go there. You can register the migration\nhandler by using the method `add_migration_handler`. It suppose to look\nlike this:\n\n```python\nfrom dummyapp.tivol_migrations.animals_migration import AnimalMigration\nfrom dummyapp.tivol_migrations.companies_migration import CompanyMigration\nfrom tivol.base_classes.entry_point import EntryPoint\n\n\nclass CustomEntryPoint(EntryPoint):\n\n    def register_migrations(self):\n        self.add_migration_handler(AnimalMigration)\n        self.add_migration_handler(CompanyMigration)\n```\n\nNotice that we only register the class reference and not instantiating\nit.\n\nThe class we're referencing will provide information for `Tivol` about\nthe migration: where is the source of our data, which source mapper will\nhandle the data and much more. It's also provides for us `migration life\ncycle hooks` - before content migration, after content migration end\nmuch more. We'll discuss it in the future.\n\n### How to write a migration source\nWell... there is no actual rule except for one thing: each row,\ncollection of values we want to import, must have an ID. This used for\nnot importing the same data twice and to have to ability to rollback the\nmigrated content from the DB. For more examples - have a look [here](https://github.com/RoySegall/tivol-dummy-app/tree/master/tivol_migrations/source_files)\n\n### Writing source mapper\nSource mapper is something that take data from one place and then return\na list dictionaries which then can be inserted to the DB using Django's\nORM (but this part is not your responsibility). Let's look on the Yaml\nsource mapper, since it's the smallest one:\n\n```python\nclass YamlMapper(BaseMapper):\n\n    def process_single(self, file):\n        return yaml.load(file, Loader=yaml.FullLoader)\n```\n\nThe only logic that relate for processing data from a place and return\nit is the `process_single` method. That method will be invoke in case of\na single file or a directory. No need to worry about how we opened the\nfile, that someone else's problem, just keep in mind that the method\nreceives a file object need to return a list of dictionaries which\nrepresent the rows in the file.\n\n### Writing migration handler\nThis is where the magic happens. We going to inspect the class we\nregistered as a migration handler. Let's look first on the code:\n\n```python\nclass AnimalMigrations(MigrationHandlerBase):\n\n    def init_metadata(self):\n        self.id = 'animal'\n        self.name = 'Animal migration'\n        self.description = 'Migrating animals into the system'\n\n        csv_mapper = CsvMapper()\n        csv_mapper.set_destination_file(path=os.path.join(os.getcwd(), 'dummyapp', 'tivol_migrations', 'source_files', 'animals.csv'))\n        self.add_source_mapper(csv_mapper)\n\n        self.set_model_target(Animal)\n```\n\nThe migration handler extends from the `MigrationHandlerBase`. For the\nbasic migration workflow we need to use the `init_metadata`, as you\nalready saw, and there's a couple of code section that we need to\ndiscuss about:\n\n```python\nself.id = 'animal'\nself.name = 'Animal migration'\nself.description = 'Migrating animals into the system'\n```\nIn this part we described the migration and what's it going to do.\nPlease notice that's there's an ID property. That property will help us\ntrack which migration handler migrated which content. You should keep it\nand in plural format. On the other hand... it's really that important so\nyou can write there any string you'ld like to(Emoji have not been tested\nyet)\n\n```python\ncsv_mapper = CsvMapper()\ncsv_mapper.set_destination_file(path=os.path.join(os.getcwd(), 'dummyapp', 'tivol_migrations', 'source_files', 'animals.csv'))\nself.add_source_mapper(csv_mapper)\n```\n\nIn this part we created an instance of the `CsvMapper`, specified the\npath of the CSV file and registered it. `Tivol` need this one so we\ncould get data from the file(s) and insert them to the DB.\n\nThe last is the, `self.set_model_target(Animal)` which tells `Tivol`\nwhat is the DB model object. Again, don't pass the instantiated object\nbut the reference to the object.\n\n### Alter source data\nThere are couple of ways to alter source data. But first - why? Well,\nwe can have a lot of reasons: changing a date string to a date object,\nsplit a string into a list of other models in the DB and reference it to\nthe DB records which going to be inserted ino the DB. There could be\nvarious ways:\n\n#### Process plugins\nFirst, let's look how to register a plugin. We'll take an example of\ntwo plugins. In the `init_metadata` method we'll add the next section:\n\n```python\nself.fields_plugins = {\n    'name': [UppercasePlugin],\n    'founded_at': [{'plugin': DatePlugin, 'extra_info': {'format': '%B %d, %Y'}}]\n}\n```\n\nThe `fields_plugins` property is a key-value which goes by the rules\nthat the key is the property from the source, and the field in the DB,\nand the value is a list of plugins which will take the data from the\nsource file and apply logic that transform it to something else.\n\nThe value is a list of referenced classes, like the `name` or maybe a\nlist of dictionaries which describe what's the plugin that will be\ninvoke, in this case the `plugin` key in the dictionary, and the\n`extra_info` is a dictionary which will be passed as dictionary to the\nprocess method in the plugin which in our case will be the format of the\nstring that represent a date.\n\nNow, let's look at a plugin - the date process plugin:\n\n```python\nclass DatePlugin(PluginBase):\n    \"\"\"\n    Getting a string and transform it to a string.\n    \"\"\"\n\n    def process(self, value, extra_info=None):\n        return datetime.strptime(value, extra_info['format'])\n```\n\nThe plugin is pretty easy to understand - the `value` argument is the\nvalue from the source file and the `extra_info` argument represent a\nlist of values, such as the format date.\n\n#### Reference basing on migrated records\nFor example, we need to migrate directors and movies. We also need to keep a \nrelationship between a movie and the director of that movie. Let's look on two \nCSV files:\n\ndirectors.csv:\n\n```csv\nid,name\ndirector_1,Michael Benjamin Bay\ndirector_2,Martin Scorsese\n```\n\nNow, how should movies.csv look like? like that:\n\n```csv\nid,name,director\nmovie_1,The Wolf of Wall Street,director_2\nmovie_2,The Wolf of Wall Street,director_2\nmovie_3,The Departed,director_2\nmovie_4,Pearl Harbor,director_1\nmovie_5,Transformers,director_1\nmovie_5,Transformers 2: Revenge of the Fallen,director_1\n```\n\nThe next part is to set the reference plugin like this:\n\n```python\nself.fields_plugins = {\n    'director': [{'plugin': ReferencePlugin, 'extra_info': {'model': Director}}],\n}\n```\n\nHow the magic works? Tivol keeps track of the ID from the source files, \nCSV, JSON or DB records, and know what is the ID of the record in the DB after \nthe migration process completed. The reference plugin returns the object as \nDjango's ORM expect it to be.\n\n#### Migration life cycle hooks\nTBD\n\n### Database migration\n\nWe can pull data from other databases. For now, MySQL but more will be\navailable in the future. Migrations which relies on data from files are\npretty easy to set up - tell the mapper where the file store and the\nmapper will do the heavy lifting. But how data from other databases can\nbe migrated easily without a lot of hustle? Well, Django already has a\nnice DB layer which we can use. Let's see how this will work.\n\nFirst, we need set the DB connection. In your `settings.py`, or\n`local_settings.py`, you'll need to add connections to the DB. Django's\ndocumentation has a lot of information for that but you can have a look\non the next example:\n\n```\nDATABASES = {\n    'default': {\n        # ...\n    },\n    'other_site': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'django_migration',\n        'USER': 'root',\n        'PASSWORD': 'root',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    }\n}\n```\n\nAfter we set up the connection, let's see how to connect the mapper. In\nthe `init_metadata` method we need to configure the mapper like this:\n\n```pyton\n        mysql_mapper = SqlMapper()\n        mysql_mapper.set_connection('other_site')\n        mysql_mapper.set_table('tags')\n```\n\nThose three lines did a lot for us: initialised the `SqlMapper`\ninstance. The `mysql_mapper.set_connection('other_site')` told to the\nmapper which connection to use and the `mysql_mapper.set_table('tags')`\ntold the mapper from which table in another DB we need to pull the DB.\n\n## Tivol CLI commands\nLet's go over some CLI commands we get out of the box:\n\n### Migrate content\nSo you create content and now you to import it in? No problem. Just hit:\n```bash\npython manage.py migrate_content\n```\n\nYou'll get something like this:\n```cli\nStart to migrate\n 1/2 [■■■■■■■■■■■■■■--------------]  50% Animal migration: 7 migrated, 0 skipped\n 2/2 [■■■■■■■■■■■■■■■■■■■■■■■■■■■■] 100% Company migration: 5 migrated, 0 skipped\nMigrated\n```\n\n### Get migration information\nYou can get information about the migration we have in the system:\n\n```bash\npython3.6 manage.py migrations_info\n```\n\nThis will return a table which look like this:\n\n| Migration name    | Number of items   | Number of migrated items  |\n| :-------------    |:-------------     | :-----                    |\n| Animal migration  | 7                 | 7                         |\n| Company migration | 6                 | 5                         |\n\n### Rollback migration\nThere's could be a couple of reasons for rolling back the data: someone\nchanged the values of the migrated values and things not working\nproperly or just you want to clean you DB from the dummy content.\n\nType the next command:\n```bash\npython3.6 manage.py migrations_rollback\n```\n\nYou'll see a nice progress bar how the procedure going:\n```cli\nAre you sure you want to remove any migrated data? (yes/no) [yes]\nStarting to rollback migration. Collecting migrated rows\n  1/13 [■■--------------------------]   7% Removing Animal:1\n  2/13 [■■■■------------------------]  15% Removing Animal:2\n  3/13 [■■■■■■----------------------]  23% Removing Animal:3\n  4/13 [■■■■■■■■--------------------]  30% Removing Animal:4\n  5/13 [■■■■■■■■■■------------------]  38% Removing Animal:5\n  6/13 [■■■■■■■■■■■■----------------]  46% Removing Animal:6\n  7/13 [■■■■■■■■■■■■■■■-------------]  53% Removing Animal:7\n  8/13 [■■■■■■■■■■■■■■■■■-----------]  61% Removing Company:1\n  9/13 [■■■■■■■■■■■■■■■■■■■---------]  69% Removing Company:2\n 10/13 [■■■■■■■■■■■■■■■■■■■■■-------]  76% Removing Company:3\n 11/13 [■■■■■■■■■■■■■■■■■■■■■■■-----]  84% Removing Company:4\n 12/13 [■■■■■■■■■■■■■■■■■■■■■■■■■---]  92% Removing Company:5\n 13/13 [■■■■■■■■■■■■■■■■■■■■■■■■■■■■] 100% Removing Company:6\n```\n\n## Extra info\nIf you want to look at some examples or some blog post look the next\nlist:\n* [Dummy app](https://github.com/RoySegall/tivol-dummy-app) - holds\nexamples for the feature `Tivol` has to offer\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RoySegall/tivol",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-tivol",
    "package_url": "https://pypi.org/project/django-tivol/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-tivol/",
    "project_urls": {
      "Homepage": "https://github.com/RoySegall/tivol"
    },
    "release_url": "https://pypi.org/project/django-tivol/0.0.1/",
    "requires_dist": [
      "PyYAML (==5.3)",
      "clikit (==0.4.1)",
      "requests (==2.22.0)"
    ],
    "requires_python": "",
    "summary": "Migrating (dummy) content into a Django site",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6593104,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86e20b20b375b48aadb28efaaa8488d8e3dee1c646c1f48d8dda4ec9e3694c37",
          "md5": "66cc244217afb5edbbc3e4c9b2b46724",
          "sha256": "23fc61526c2bfd98bf09e9211053403f66dcb26df3b9a567dae62668b03c863c"
        },
        "downloads": -1,
        "filename": "django_tivol-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66cc244217afb5edbbc3e4c9b2b46724",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25401,
        "upload_time": "2020-02-08T09:13:55",
        "upload_time_iso_8601": "2020-02-08T09:13:55.765109Z",
        "url": "https://files.pythonhosted.org/packages/86/e2/0b20b375b48aadb28efaaa8488d8e3dee1c646c1f48d8dda4ec9e3694c37/django_tivol-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a8e3daf6b6eedf5b54a4b0eafef3fdf2ec4fc051b6af79829db51d59f13408c",
          "md5": "12bf82f19a330c4f28778a415d5c6de0",
          "sha256": "e557f9808293f921957c664714cf26ebbede54eec7efbe3c38194bb7bf3d6441"
        },
        "downloads": -1,
        "filename": "django-tivol-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "12bf82f19a330c4f28778a415d5c6de0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20278,
        "upload_time": "2020-02-08T09:13:58",
        "upload_time_iso_8601": "2020-02-08T09:13:58.860459Z",
        "url": "https://files.pythonhosted.org/packages/7a/8e/3daf6b6eedf5b54a4b0eafef3fdf2ec4fc051b6af79829db51d59f13408c/django-tivol-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08c3553bb9081999be4f3e3bb20224986fcaec8ffcc67dc8178f6b05b7ee15b9",
          "md5": "73dbe098aada18809c6cdb8ddccbb343",
          "sha256": "74b4ffbe3fb747f406d56d5119729a0175ec00e7e965d658daf50513711a65fc"
        },
        "downloads": -1,
        "filename": "django-tivol-0.0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "73dbe098aada18809c6cdb8ddccbb343",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17622,
        "upload_time": "2020-02-08T09:23:05",
        "upload_time_iso_8601": "2020-02-08T09:23:05.885346Z",
        "url": "https://files.pythonhosted.org/packages/08/c3/553bb9081999be4f3e3bb20224986fcaec8ffcc67dc8178f6b05b7ee15b9/django-tivol-0.0.1.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86e20b20b375b48aadb28efaaa8488d8e3dee1c646c1f48d8dda4ec9e3694c37",
        "md5": "66cc244217afb5edbbc3e4c9b2b46724",
        "sha256": "23fc61526c2bfd98bf09e9211053403f66dcb26df3b9a567dae62668b03c863c"
      },
      "downloads": -1,
      "filename": "django_tivol-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66cc244217afb5edbbc3e4c9b2b46724",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25401,
      "upload_time": "2020-02-08T09:13:55",
      "upload_time_iso_8601": "2020-02-08T09:13:55.765109Z",
      "url": "https://files.pythonhosted.org/packages/86/e2/0b20b375b48aadb28efaaa8488d8e3dee1c646c1f48d8dda4ec9e3694c37/django_tivol-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a8e3daf6b6eedf5b54a4b0eafef3fdf2ec4fc051b6af79829db51d59f13408c",
        "md5": "12bf82f19a330c4f28778a415d5c6de0",
        "sha256": "e557f9808293f921957c664714cf26ebbede54eec7efbe3c38194bb7bf3d6441"
      },
      "downloads": -1,
      "filename": "django-tivol-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "12bf82f19a330c4f28778a415d5c6de0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20278,
      "upload_time": "2020-02-08T09:13:58",
      "upload_time_iso_8601": "2020-02-08T09:13:58.860459Z",
      "url": "https://files.pythonhosted.org/packages/7a/8e/3daf6b6eedf5b54a4b0eafef3fdf2ec4fc051b6af79829db51d59f13408c/django-tivol-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}