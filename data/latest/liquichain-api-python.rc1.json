{
  "info": {
    "author": "Liquichain",
    "author_email": "contact@liquichain.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Office/Business :: Financial"
    ],
    "description": "<p align=\"center\">\n  <img src=\"https://docs.liquichain.io/media/python-api/logo_python_liquichain.png\" width=\"128\" height=\"128\"/>\n</p>\n<h1 align=\"center\">Liquichain API client for Python</h1>\n\n<img src=\"https://docs.liquichain.io/media/python-api/editor-1.png\" />\n\nAccepting Licoin, Paypal, online payments without fixed monthly costs or any punishing registration procedures. Just use the Liquichain API to receive payments directly on your website or easily refund transactions to your customers.\n\n[![PyPI version](https://badge.fury.io/py/liquichain-api-python.svg)](http://badge.fury.io/py/liquichain-api-python)\n[![Build Status](https://travis-ci.com/liquichain/liquichain-api-python.svg?branch=master)](https://travis-ci.org/liquichain/liquichain-api-python)\n\n## Requirements ##\nTo use the Liquichain API client, the following things are required:\n\n+ Get yourself a free [Liquichain account](https://account.liquichain.io/). No sign up costs.\n+ Create a new [Website profile](https://account.liquichain.io/dashboard/settings/profiles) to generate API keys and setup your webhook.\n+ Now you're ready to use the Liquichain API client in test mode.\n+ Follow [a few steps](https://account.liquichain.io/dashboard/?modal=onboarding) to enable payment methods in live mode, and let us handle the rest.\n+ Python >= 3.6\n+ Up-to-date OpenSSL (or other SSL/TLS toolkit)\n+ Liquichain API client for Python has a dependency on [Requests](http://docs.python-requests.org/en/master/) and [Requests-OAuthlib](https://requests-oauthlib.readthedocs.io/en/latest/)\n\n## Installation ##\n\nBy far the easiest way to install the Liquichain API client is to install it with [pip](https://pip.pypa.io). The command below will install the latest released version of the client.\n```\n$ pip install liquichain-api-python\n```\nYou may also git checkout or [download all the files](https://github.com/liquichain/liquichain-api-python/archive/master.zip), and include the Liquichain API client manually.\n\nCreate and activate a Python >= 3.6 virtual environment (inside a git checkout or downloaded archive).\n\n```\n$ cd liquichain-api-python\n$ python -m venv .venv\n$ source .venv/bin/activate\n```\n\nInstall the additional requirements for the examples, then install the Liquichain API client itself.\n```\n$ pip install flask\n$ pip install -e .\n```\n\nRun the examples.\n```\nexport LIQUICHAIN_API_KEY=test_YourApiKey\n$ python examples/app.py\n```\n\n## How to receive payments ##\n\nTo successfully receive a payment, these steps should be implemented:\n\n1. Use the Liquichain API client to create a payment with the requested amount, tocken symbol (LIC for licoin), description and optionally, a payment method. It is important to specify a unique redirect URL where the customer is supposed to return to after the payment is completed.\n\n2. Immediately after the payment is completed, our platform will send an asynchronous request to the configured webhook to allow the payment details to be retrieved, so you know when exactly to start processing the customer's order.\n\n3. The customer returns, and should be satisfied to see that the order was paid and is now being processed.\n\nFind our full documentation online on [docs.liquichain.io](https://docs.liquichain.io).\n\n## Getting started ##\n\nImporting the Liquichain API Client\n```python\nfrom liquichain.api.client import Client\n``` \nInitializing the Liquichain API client, and setting your API key\n\n```python\nliquichain_client = Client()\nliquichain_client.set_api_key('test_dHar4XY7LxsDOtmnkVtjNVWXLSlXsM')\n``` \n\nCreating a new payment.\n\n```python\npayment = liquichain_client.payments.create({\n    'amount': {\n        'currency': 'LIC',\n        'value': '0.00000001' \n    },\n    'description': 'My first API payment',\n    'redirectUrl': 'https://webshop.example.org/order/12345/',\n    'webhookUrl': 'https://webshop.example.org/liquichain-webhook/',\n})\n```\n_After creation, the payment id is available in the `payment.id` property. You should store this id with your order._\n\nAfter storing the payment id you can send the customer to the checkout using the `payment.checkout_url`.  \n\nFor a payment create example, see [Example 1 - New Payment](https://github.com/liquichain/liquichain-api-python/blob/master/examples/01-new-payment.py).\n\nIn general, request body parameters for an API endpoint should be added to a dictionary and provided as the first argument (or `data` keyword argument). Query string parameters can be provided as keyword arguments.\n\n## Retrieving payments ##\nWe can use the `payment.id` to retrieve a payment and check if the payment `isPaid`.\n\n```python\npayment = liquichain_client.payments.get(payment.id)\n\nif payment.is_paid():\n    print('Payment received.')\n```\n\nOr retrieve a collection of payments.\n\n```python\npayments = liquichain_client.payments.list()\n```\n\nFor an extensive example of listing payments with the details and status, see [Example 5 - Payments History](https://github.com/liquichain/liquichain-api-python/blob/master/examples/05-payments-history.py).\n\n## Payment webhook ##\n\nWhen the status of a payment changes the `webhookUrl` we specified in the creation of the payment will be called.  \nThere we can use the `id` from our POST parameters to check te status and act upon that, see [Example 2 - Webhook verification](https://github.com/liquichain/liquichain-api-python/blob/master/examples/02-webhook-verification.py).\n\n\n## Multicurrency (paying with tokens) ##\nPayments using liquichain tokens is now supported.\nA full list of available tokens can be found [in our documentation](https://docs.liquichain.io/guides/multicurrency).\n\n```python\npayment = liquichain_client.payments.create({\n    'amount': {\n        'currency': 'TOK', \n        'value': '10.00'\n    },\n    'description': 'Order #12345',\n    'redirectUrl': 'https://webshop.example.org/order/12345/',\n    'webhookUrl': 'https://webshop.example.org/liquichain-webhook/',\n})\n```\n_After the customer completes the payment, the `payment.settlement_amount` will contain the amount + currency that will be settled on your account._\n\n### Refunding payments ###\n\nThe API also supports refunding payments. Note that there is no confirmation and that all refunds are immediate and\ndefinitive. Refunds are only supported for Licoin. Other types of payments cannot be refunded through our API at the moment.\n\n```python\npayment = liquichain_client.payments.get(payment.id)\n\n# Refund â‚¬ 2 of this payment\nrefund = liquichain_client.refunds.on(payment).create({\n    'amount': {\n        'currency': 'LCN',\n        'value': '0.0000000001'\n    }\n})\n```\n\nFor a working example, see [Example 11 - Refund payment](https://github.com/liquichain/liquichain-api-python/blob/master/examples/11-refund-payment.py).\n\n## Oauth2 ##\n\nAt https://docs.liquichain.io/oauth/getting-started the oauth process is explained. Please read this first.\n\nOauth authentication process redirects back to your application. Therefore you should expose your local web server (the examples) as public urls. A webservice like [ngrok.com](https://ngrok.com/) can help you with that. Make sure to set REDIRECT_URI accordingly.\n\nRun the oauth2 examples:\n\n```\nFLASK_APP=examples/oauth/app.py \\\nCLIENT_ID=your_client_id \\\nCLIENT_SECRET=your_client_secret \\\nREDIRECT_URI=https://your_domain.tld/callback \\\nflask run\n```\n\nThe Authorize endpoint is the endpoint on the Liquichain web site where the merchant logs in, and grants authorization to your client application. E.g. when the merchant clicks on the Connect with Liquichain button, you should redirect the merchant to the Authorize endpoint.\n\nThe resource owner can then grant the authorization to your client application for the scopes you have requested.\n\nLiquichain will then redirect the resource owner back to the `redirect_uri` you have specified. The redirect_uri will be appended with a code parameter, which will contain the auth token. At the redirect_uri, you should extract that token, and use it to request a regular oauth token.\n\n### Initializing via oauth2 ###\n\nYou should implement the `get_token` and `set_token` methods yourself. They should retrieve and store the oauth token that is sent from Liquichain somewhere in your application (f.i. in the database).\n\nThe token data is a python dict.\n\nThese are example methods, you should use a storage method that fits your application.\n\n```python\n\ndef get_token():\n    \"\"\"\n    :return: token (dict) or None\n    \"\"\"\n    if os.path.exists('token.json'):\n        with open('token.json', 'r') as file:\n            return json.loads(file.read())\n\n\ndef set_token(token):\n    \"\"\"\n    :param token: token (dict)\n    :return: None\n    \"\"\"\n    with open('token.json', 'w') as file:\n        file.write(json.dumps(token))\n\n\nliquichain_client = Client()\nis_authorized, authorization_url = liquichain_client.setup_oauth(\n    client_id,\n    client_secret,\n    redirect_uri,\n    scope,\n    get_token(),\n    set_token,\n)\n# When \"is_authorized\" is False, you need to redirect the user to the authorization_url.\n\n# After the user confirmed she is redirected back to your redirect_uri.\n# The view on this uri should call setup_oauth_authorization_response(), with authorization_response as parameter.\n# This is the full callback URL (string)\n\nliquichain.setup_oauth_authorization_response(authorization_response)\n\n# The token will be stored via your `set_token` method for future use. Expired tokens will be refreshed by the client automatically.\n\n# Now You can query the API:\n\nliquichain.organizations.get('me')\n```\n\n## API documentation ##\nIf you wish to learn more about our API, please visit the [Liquichain Developer Portal](https://www.liquichain.io/en/developers). API Documentation is available in English.\n\n## Want to help us make our API client even better? ##\n\nWant to help us make our API client even better? We take [pull requests](https://github.com/liquichain/liquichain-api-python/pulls?utf8=%E2%9C%93&q=is%3Apr).\n\n## License ##\n[BSD (Berkeley Software Distribution) License](https://opensource.org/licenses/bsd-license.php).\nCopyright (c) 2014-2020, [Mollie B.V.](https://www.mollie.com) whose original source code comes from\n\n## Support ##\nContact: [liquichain.io](https://liquichain.io) \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/liquichain/Liquichain-api-python",
    "keywords": "liquichain,blockchain,cryptocurrency,payment,service,direct debit,refunds,payments,gateway",
    "license": "BSD",
    "maintainer": "Manaty SARL",
    "maintainer_email": "contact@manaty.net",
    "name": "liquichain-api-python",
    "package_url": "https://pypi.org/project/liquichain-api-python/",
    "platform": "",
    "project_url": "https://pypi.org/project/liquichain-api-python/",
    "project_urls": {
      "Homepage": "https://github.com/liquichain/Liquichain-api-python"
    },
    "release_url": "https://pypi.org/project/liquichain-api-python/0.1.1/",
    "requires_dist": [
      "requests",
      "urllib3",
      "requests-oauthlib"
    ],
    "requires_python": "",
    "summary": "Liquichain API client for Python",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11228041,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61b79280f9e86beb4503699c5710c09889be855ae7c85c2c859c1d46975ae834",
          "md5": "958cfa3a74f4cfd635f3daff75d22b09",
          "sha256": "9a1505140add1b0d3bf4a93c18cafd3013f8b7c28a482982178b730fb0265523"
        },
        "downloads": -1,
        "filename": "liquichain_api_python-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "958cfa3a74f4cfd635f3daff75d22b09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43896,
        "upload_time": "2021-08-20T01:50:39",
        "upload_time_iso_8601": "2021-08-20T01:50:39.119149Z",
        "url": "https://files.pythonhosted.org/packages/61/b7/9280f9e86beb4503699c5710c09889be855ae7c85c2c859c1d46975ae834/liquichain_api_python-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "020c6097aee704818df6f8a64b71e25cc05cb4ec00a0326d7f4f074cefa698f0",
          "md5": "b739eb737ea287a1f199b05c9137ec60",
          "sha256": "95803ab3b4b9e081f981038f77f4e66fe5678b71a3ad61e0c3fe20c36997f2c8"
        },
        "downloads": -1,
        "filename": "liquichain-api-python-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b739eb737ea287a1f199b05c9137ec60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27608,
        "upload_time": "2021-08-20T01:50:42",
        "upload_time_iso_8601": "2021-08-20T01:50:42.083041Z",
        "url": "https://files.pythonhosted.org/packages/02/0c/6097aee704818df6f8a64b71e25cc05cb4ec00a0326d7f4f074cefa698f0/liquichain-api-python-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61b79280f9e86beb4503699c5710c09889be855ae7c85c2c859c1d46975ae834",
        "md5": "958cfa3a74f4cfd635f3daff75d22b09",
        "sha256": "9a1505140add1b0d3bf4a93c18cafd3013f8b7c28a482982178b730fb0265523"
      },
      "downloads": -1,
      "filename": "liquichain_api_python-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "958cfa3a74f4cfd635f3daff75d22b09",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 43896,
      "upload_time": "2021-08-20T01:50:39",
      "upload_time_iso_8601": "2021-08-20T01:50:39.119149Z",
      "url": "https://files.pythonhosted.org/packages/61/b7/9280f9e86beb4503699c5710c09889be855ae7c85c2c859c1d46975ae834/liquichain_api_python-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "020c6097aee704818df6f8a64b71e25cc05cb4ec00a0326d7f4f074cefa698f0",
        "md5": "b739eb737ea287a1f199b05c9137ec60",
        "sha256": "95803ab3b4b9e081f981038f77f4e66fe5678b71a3ad61e0c3fe20c36997f2c8"
      },
      "downloads": -1,
      "filename": "liquichain-api-python-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b739eb737ea287a1f199b05c9137ec60",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27608,
      "upload_time": "2021-08-20T01:50:42",
      "upload_time_iso_8601": "2021-08-20T01:50:42.083041Z",
      "url": "https://files.pythonhosted.org/packages/02/0c/6097aee704818df6f8a64b71e25cc05cb4ec00a0326d7f4f074cefa698f0/liquichain-api-python-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}