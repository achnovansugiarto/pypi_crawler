{
  "info": {
    "author": "François Konschelle, Unité IAM, CHU-Bordeaux, France",
    "author_email": "via.issue@only.please",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Text Processing"
    ],
    "description": "\n# SubstitutionString\n\nTools to manipulate a string in a reversible (without loss of information) and versatile way. Allows to insert, delete, substitute any portion of a main string into a new string, while keeping the modification in memory, in an efficient memory saving process.\n\nSuch procedures are usefull for \n - cleaning (also called normalizing) a text for Natural Language Processing (NLP)\n - de-noising (also called filtering) signal for digital signal treatment (or NLP, since a digital signal is a signal having value in an alphabet)\n - comparing texts, for Version Control System (though comparison algorithms are not efficient yet)\n - compressing datas for Delta Compression storage (though compression of list of Substitution objects are not efficient yet)\n \nThis package aims at staying at an atomic level: the elaborated filters / normalizers / cleaners will be developped in further packages.\n\n## Description and example\n\n`substitutionstring` package aims at cleaning / modifying / normalizing / filtering some strings without loss of information, using its `SusbtitutionString` object. To achieve that, the `Substitution` object is proposed as a generalization of both insertion and deletion procedures. In fact, to insert a sub-string at a given position and to delete a part of a string are often thought as the basic modifications a string can undergo. In practice, defining a `Substitution` with the three parameters `start`, `end` and `string`, and defining its application onto a string `s` as substitutiing `Substitution.string` from `s[start:end]` permits to generalize insert (having `start==end` attributes) and delete (having empty `string` attribute of the `Substitution` object) into a single object. In addition, the `Substitution` object that revert the modified string is easy to construct, and is still a `Substitution`. So a unique object is sufficient to transform any string into an other one.\n\nThe construction of the `Substitution` object is described in details in the documentation. For a basic example and usage of the reversible string normalizer, one can just use the machinery implemented into the `SubstitutionString` class. \n\nLet us suppose that one has a noisy channel (containing letters inside a sequence of numbers for easiness) `0123nnnn45nn90123`. One can clean this string using the `sub` method of the REGEX package `re` in Python. Then one would got the clean string `0123459123` in our case. Now, what would happen if we would like to recover the initial message that has been transformed into the sequence `34` ? The filtering process we applied destroyed the information. This basic problem was at the root of this project, leading to the `SubstitutionString` object. The detail of the construction can be found in the documentation. For the moment, let us see how `SubstitutionString` can be used.\n\n```python3\nfrom substitutionstring import SubstitutionString\n\nstring = '0123nnnn45nn90123'\nsubstring = SubstitutionString(string=string)\n\nsubstring.sub(r'\\D','') # substitute all non-digits by an empty space. Any REGEX is accepted.\n# # returns '01234590123'\n\nrestored_sequence = substring.restore(3,5) # revert to the intial string\nrestored_sequence\n# # returns the tuple ('0123nnnn45nn90123', 3, 9)\n\nstring[restored_sequence[1]:restored_sequence[2]]\n# # returns '3nnnn4'\n```\n\nWe recovered the initial sequence that corresponds to the interesting one once cleaning procedure has been applied, simply using the `restore` method. Note that the initial string is in fact reconstructed from the sequence of substitution (`sub` method) that we have applied. \n\nSuch a construction is of particular importance in the field of information retrieval. For instance, suppose we have a medical text (or any string a human has produced by hand) containing non-normalized information. Suppose also we can normalize this information using fancy methods of substitution inside the text (indeed, any transformation of a text consists in applying several `Substitution` in a raw). Now we have the structured information, but we are usually unable to tell the clinical staff what was their intentions publishing this information. With the `restore` method, one can easilly tell what was the state of the message priori to any normalization, that finally came out structured from the normalization procedure.\n\nNote that `sub` method accepts any REGEX, using the `re` module of Python, see https://docs.python.org/3/library/re.html for more details.\n\nThere are more fancy methods that can be used with the `SubstitutionString` class.\n\n```python3\nfrom substitutionstring import SubstitutionString\n\nstring = 'test of a string'\nsubstring = SubstitutionString(string=string)\n\nsubstring.insert(5,'new insert ') \n# insert string 'new insert ' at position 5 of the previous one\n# # 'test new insert of a string'\n\nsubstring.substitute(9,15,'substitution') \n# delete the previous string in the range [9:15] and \n# substitute the string 'substitution'\n# # 'test new substitution of a string'\n\nsubstring.delete(9,21) # delete the previous string from range [9:21]\n# # 'test new  of a string'\n\nsubstring.sub(r'\\s{2,}',' ') \n# substitute all spaces larger than 2 by a single one. Any REGEX is accepted.\n# # 'test new of a string'\n\nsubstring.sequence \n# list of Substitution objects that are collected into a SubstitutionSequence\n# # SubstitutionSequence(4 Substitutions)\n# one can think of a SubstitutionSequence as a list of Substitution\nfor substitution in substring.sequence:\n    print(substitution)\n# # returns\n# Substitution(start=5, end=16, string=``)\n# Substitution(start=9, end=21, string=`insert`)\n# Substitution(start=9, end=9, string=`substitution`)\n# Substitution(start=8, end=9, string=`  `)\n\n# what is recorded is the inverse Substitution at each step. \n# For instance, to revert the insertion of 'new_insert ' (or length 11) from\n# position 5 (the first invert applied), one has to delete the string from\n# position 5 to 16 in the new modified string.\n\nsubstring.revert() # revert the previous step\n# # 'test new  of a string'\n\nlen(substring) # length of the pipeline list\n# # 3\n\nsubstring.revert(len(substring)) # revert to the intial string\n# # 'test of a string'\n```\n\nOne sees that the `Substitution` are applied one at a time, and that the `start` and `end` positions are related to the state of the string at this time.\n\n*Note :* one should not apply several transformations in a raw (as e.g. `cleaner.insert(...).delete(...)`), since the `substitute`, `insert`, `delete` and `sub` transformations all return a string.\n \n## Dependency of the package\n\n`substitutionstring` only requires packages from the standard Python library : `re` and `difflib` (for comparison with the algorithm of longest common substring, that is still in exploratory mode at the moment).\n\n## Installation\n\nThe simplest way to install this package into your local Pyton library is by calling the Python Package Installer (pip) from the official depository : \n\n```bash\npip install substitutionstring\n```\n\nAn alternative way to install this package is to clone it from its original Git depository: \n\n```bash\ngit clone https://framagit.org/nlp/substitutionstring\n```\n\nand then install the repository on top of your local Python library, using e.g. PythonPackageInstaler (pip)\n\n```bash\npip install .\n```\n\n(eventually change for the correct version name). Then call the different packages as (adapt eventually the names of the classes you want to use)\n\n```python\nfrom substitutionstring import Substitution, SubstitutionString, SubstitutionSequence\n```\n\nin your favorite Python console, and follow subsequent documentations, present in the `documentation` folder of the depository, or online at https://nlp.frama.io/substitutionstring/.\n\n## About us\n \nPackage developped for Natural Language Processing at IAM : Unité d'Informatique et d'Archivistique Médicale, Service d'Informatique Médicale, Pôle de Santé Publique, Centre Hospitalo-Universitaire (CHU) de Bordeaux, France.\n\nYou are kindly encouraged to raise issues and submit merge requests in order to discuss with the authors of this package, and to suggest any kind of modifications.\n\nLast version : August, 5 2021\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://framagit.org/nlp/substitutionstring",
    "keywords": "",
    "license": "GNU GENERAL PUBLIC LICENSE v.3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "substitutionstring",
    "package_url": "https://pypi.org/project/substitutionstring/",
    "platform": "",
    "project_url": "https://pypi.org/project/substitutionstring/",
    "project_urls": {
      "Homepage": "https://framagit.org/nlp/substitutionstring"
    },
    "release_url": "https://pypi.org/project/substitutionstring/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Manipulate substitution of string, as for instance deletion and insertion, without loss of information, and allow some algebra of the underneath Substitution object. Can be usefull for any manipulation of string, as version control system, natural language processing, or string comparison in a general sense. The simplest way of using this package is throw the SubstitutionString object, which handles the machinery of the Substitution applied to a given string.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11100709,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4b548ae2dde0786900e55f59442c8d7df39db423a26511896bd1ff8166d1356",
          "md5": "9f1c9b9ab6b27a8b3ef67f37d74a1cd7",
          "sha256": "c4339590dea50fb344f2bec16bb1d291206707b9ab84b19ff460ca34fdbf10c7"
        },
        "downloads": -1,
        "filename": "substitutionstring-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f1c9b9ab6b27a8b3ef67f37d74a1cd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36842,
        "upload_time": "2021-08-05T13:50:21",
        "upload_time_iso_8601": "2021-08-05T13:50:21.738790Z",
        "url": "https://files.pythonhosted.org/packages/b4/b5/48ae2dde0786900e55f59442c8d7df39db423a26511896bd1ff8166d1356/substitutionstring-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7b5ab0159dbb1a173d80df3baf309e8499863e28d568940d5162a1df00f17b6",
          "md5": "e7ea429197859ea856d017d1510553bd",
          "sha256": "4e68e8564deded7b4fafb5048df0b62199050393e8e1d096316510fd7515406d"
        },
        "downloads": -1,
        "filename": "substitutionstring-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e7ea429197859ea856d017d1510553bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34380,
        "upload_time": "2021-08-05T13:50:23",
        "upload_time_iso_8601": "2021-08-05T13:50:23.256793Z",
        "url": "https://files.pythonhosted.org/packages/a7/b5/ab0159dbb1a173d80df3baf309e8499863e28d568940d5162a1df00f17b6/substitutionstring-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4b548ae2dde0786900e55f59442c8d7df39db423a26511896bd1ff8166d1356",
        "md5": "9f1c9b9ab6b27a8b3ef67f37d74a1cd7",
        "sha256": "c4339590dea50fb344f2bec16bb1d291206707b9ab84b19ff460ca34fdbf10c7"
      },
      "downloads": -1,
      "filename": "substitutionstring-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f1c9b9ab6b27a8b3ef67f37d74a1cd7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 36842,
      "upload_time": "2021-08-05T13:50:21",
      "upload_time_iso_8601": "2021-08-05T13:50:21.738790Z",
      "url": "https://files.pythonhosted.org/packages/b4/b5/48ae2dde0786900e55f59442c8d7df39db423a26511896bd1ff8166d1356/substitutionstring-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7b5ab0159dbb1a173d80df3baf309e8499863e28d568940d5162a1df00f17b6",
        "md5": "e7ea429197859ea856d017d1510553bd",
        "sha256": "4e68e8564deded7b4fafb5048df0b62199050393e8e1d096316510fd7515406d"
      },
      "downloads": -1,
      "filename": "substitutionstring-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e7ea429197859ea856d017d1510553bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 34380,
      "upload_time": "2021-08-05T13:50:23",
      "upload_time_iso_8601": "2021-08-05T13:50:23.256793Z",
      "url": "https://files.pythonhosted.org/packages/a7/b5/ab0159dbb1a173d80df3baf309e8499863e28d568940d5162a1df00f17b6/substitutionstring-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}