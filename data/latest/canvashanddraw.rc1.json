{
  "info": {
    "author": "Carlos A.",
    "author_email": "caralla@upv.es",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Multimedia :: Graphics :: Viewers",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Utilities"
    ],
    "description": "# Canvas Hand Draw\nThis is a utility to draw a set of points and to generate an image as if it was hand drawn by a human.\n\nThe need of having this component comes from an IA application, where a drawing is captured from a hand device (i.e. tablet or smartphone), and then the image is classified using a Neural Network. The points are captured to show the drawing to a human, who makes the initial classification to train the NN.\n\nThe effect is shown in the next image:\n\n![Osito](img/osito.gif)\n\nAnd using the same input data, it is possible to obtain different resolutions, colors, etc. by varying the settings:\n\n![Osito 128](img/osito.128.gif)\n![Osito 128 pen size 4](img/osito.128.4.gif)\n\n> Most of the code of this library is a port to python of library [canvashanddraw](https://github.com/dealfonso/canvashanddraw).\n\n**Technical facts**\n- Includes tools to optimize the number of points, by skipping those that are too near to the line described by the adjacents points.\n- It is possible to simulate the drawing dynamics by considering that the distance between the points is related to the speed of drawing. In that case, the faster a line is, the thinner it will be drawn, to simulate a ball pen.\n\n## Installing\n\n### Using pip\n\nThe easier method to install `canvashanddraw` is using pip:\n\n```console\npip install canvashanddraw\n```\n\n### From sources\n\nThe alternate method is to clone the repo, install the dependencies and install by hand\n\n```console\n$ git clone https://github.com/dealfonso/pycanvashanddraw\n$ cd pycanvashanddraw\n$ pip install pillow imageio aggdraw\n$ python setup.py install\n```\n\n### Dependencies\n\nThe dependencies from `canvashanddraw` are installed when installing from pip, but you can also install them by hand:\n\n```console\npip install pillow imageio aggdraw\n```\n\n**WARNING:** `canvashanddraw` depends on [`aggdraw`](https://github.com/pytroll/aggdraw) library, which is also in pip (so it is automatically installed when installing from pip). The problem is that at the time of writing this text, the current version of that library does not produce the best results. Instead, my advise is to remove the version installed using pip and to install the latest `aggdraw` by hand:\n\n```console\n$ pip uninstall aggdraw\n...\n$ mkdir -p ./tmp\n$ cd ./tmp\n$ git clone https://github.com/pytroll/aggdraw\n$ cd aggdraw\n$ python setup.py build_ext -i\n$ python setup.py install\n```\n\n## Using\n\nCanvas Hand Draw is conceived both as a command line utility and a library so that you can include it in your application.\n\n###Â Command Line Utility\n\nIf you have a set of points in a json file (e.g. file \"five.json\")\n\n**five.json**\n\n```json\n[{\"x\": 211.33, \"y\": 130}, {\"x\": 210, \"y\": 130}, {\"x\": 199.33, \"y\": 130}, {\"x\": 177.66, \"y\": 130}, {\"x\": 154.33, \"y\": 130}, {\"x\": 135.33, \"y\": 130.66}, {\"x\": 124.33, \"y\": 132.33}, {\"x\": 120, \"y\": 133}, {\"x\": 118.66, \"y\": 133.33}, {\"x\": 118.66, \"y\": 133.66}, {\"x\": 118.66, \"y\": 134}, {\"x\": 118.66, \"y\": 138.66}, {\"x\": 118.66, \"y\": 144.33}, {\"x\": 118.33, \"y\": 159.33}, {\"x\": 116.66, \"y\": 176.66}, {\"x\": 114.66, \"y\": 191.33}, {\"x\": 113.33, \"y\": 201.33}, {\"x\": 112.66, \"y\": 206.33}, {\"x\": 112.33, \"y\": 208.33}, {\"x\": 112.33, \"y\": 209.33}, {\"x\": 112.33, \"y\": 210}, {\"x\": 113, \"y\": 209.66}, {\"x\": 118, \"y\": 208.66}, {\"x\": 131.33, \"y\": 205.66}, {\"x\": 150.66, \"y\": 202.33}, {\"x\": 171, \"y\": 200.33}, {\"x\": 186.66, \"y\": 200}, {\"x\": 197.33, \"y\": 200.66}, {\"x\": 205.33, \"y\": 203.66}, {\"x\": 210.33, \"y\": 207.33}, {\"x\": 213, \"y\": 212}, {\"x\": 213.66, \"y\": 219.66}, {\"x\": 212, \"y\": 230.33}, {\"x\": 208.33, \"y\": 241}, {\"x\": 202.66, \"y\": 251}, {\"x\": 195.66, \"y\": 260.66}, {\"x\": 183.33, \"y\": 272.33}, {\"x\": 173, \"y\": 279.66}, {\"x\": 165.33, \"y\": 283.33}, {\"x\": 150, \"y\": 289}, {\"x\": 137, \"y\": 292.33}, {\"x\": 127.66, \"y\": 294.66}, {\"x\": 122, \"y\": 295.66}, {\"x\": 119.33, \"y\": 296}, {\"x\": 119, \"y\": 296}]\n```\n\nYou can run the next command line:\n\n```console\n$ canvashanddraw -i five.json -o five.png -w 64\n```\n\nTo get the next drawing:\n\n![Five](img/five.png)\n\n### In your application\n\nHaving the same file `five.json`, you can use the next piece of code\n\n```python\nfrom canvashanddraw.points import Points\nfrom canvashanddraw.drawhelper import DrawHelper, Options\nimport json\n\npoints = json.load(open('five.json'))\npoints = Points(points)\nhelper = DrawHelper(points, Options(canvasSize = 64, canvasMargin = 4, lineWidth = 4, lineColor = \"#f00\"))\nhelper.draw().save('five-red.png')\n```\n\nTo generate the next drawing:\n\n![Five Red](img/five-red.png)\n\n## Defining the points\n\nThe points used to draw are defined in user-scale and they are later scaled to the target output.\n\nMoreover, a single draw may consist of multiple drawings. In such case, the array of points used to define the drawing should include a `null` or an empty point (e.g. `[]`) to separate the drawings:\n\n```json\n[{\"x\": 211.33, \"y\": 130}, {\"x\": 210, \"y\": 130}, {\"x\": 199.33, \"y\": 130}, {\"x\": 177.66, \"y\": 130}, null, {\"x\": 135.33, \"y\": 130.66}, {\"x\": 124.33, \"y\": 132.33}, {\"x\": 120, \"y\": 133}, {\"x\": 118.66, \"y\": 133.33}, {\"x\": 118.66, \"y\": 133.66}, [], {\"x\": 165.33, \"y\": 283.33}, {\"x\": 150, \"y\": 289}, {\"x\": 137, \"y\": 292.33}, {\"x\": 127.66, \"y\": 294.66}, {\"x\": 122, \"y\": 295.66}, {\"x\": 119.33, \"y\": 296}, {\"x\": 119, \"y\": 296}]\n```\n\n## Options\n\nThere are multiple options to customize your results: the line width, the target resolution, the color, etc.\n\nIf using the CLI app, you are invited to use option `--help` to get the information about the different options.\n\nWhen using the library, please check class `canvashanddraw.drawhelper.Options`:\n\n```python\nclass Options:\n    \"\"\"A class to represent the options for drawing\"\"\"\n    canvasSize = 64\n    canvasMargin = 4\n    lineWidth = 4\n    lineColor = '#000000'\n    drawDynamics = True\n    antiAliasing = True\n    keepAspectRatio = True\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dealfonso/pycanvashanddraw",
    "keywords": "vector,canvas,hand drawing,drawing",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "canvashanddraw",
    "package_url": "https://pypi.org/project/canvashanddraw/",
    "platform": null,
    "project_url": "https://pypi.org/project/canvashanddraw/",
    "project_urls": {
      "Homepage": "https://github.com/dealfonso/pycanvashanddraw"
    },
    "release_url": "https://pypi.org/project/canvashanddraw/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A package to draw a set of points in a canvas, and save it as a image or an animation as if it was drawn by a hand",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14599433,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1c445b77ed2da977bad9c07f218375ab7a0f246988b29a48d21140e57f5e6f7",
          "md5": "15f8365e38c12e3df4fd7b7a61affef7",
          "sha256": "9ff6579db5eb462e76c1979792f04c55642e3c59c8106501bbabd976d2039262"
        },
        "downloads": -1,
        "filename": "canvashanddraw-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "15f8365e38c12e3df4fd7b7a61affef7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16775,
        "upload_time": "2022-07-30T15:18:52",
        "upload_time_iso_8601": "2022-07-30T15:18:52.593850Z",
        "url": "https://files.pythonhosted.org/packages/e1/c4/45b77ed2da977bad9c07f218375ab7a0f246988b29a48d21140e57f5e6f7/canvashanddraw-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1c445b77ed2da977bad9c07f218375ab7a0f246988b29a48d21140e57f5e6f7",
        "md5": "15f8365e38c12e3df4fd7b7a61affef7",
        "sha256": "9ff6579db5eb462e76c1979792f04c55642e3c59c8106501bbabd976d2039262"
      },
      "downloads": -1,
      "filename": "canvashanddraw-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "15f8365e38c12e3df4fd7b7a61affef7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16775,
      "upload_time": "2022-07-30T15:18:52",
      "upload_time_iso_8601": "2022-07-30T15:18:52.593850Z",
      "url": "https://files.pythonhosted.org/packages/e1/c4/45b77ed2da977bad9c07f218375ab7a0f246988b29a48d21140e57f5e6f7/canvashanddraw-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}