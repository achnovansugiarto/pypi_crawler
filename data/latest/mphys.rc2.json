{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MPhys\n[![Unit Tests and Docs](https://github.com/OpenMDAO/mphys/actions/workflows/unit_tests_and_docs.yml/badge.svg)](https://github.com/OpenMDAO/mphys/actions/workflows/unit_tests_and_docs.yml)\n\nMPhys is a package that standardizes high-fidelity multiphysics problems in OpenMDAO.\nMPhys eases the problem set up, provides straightforward extension to new disciplines, and has a library of OpenMDAO groups for multidisciplinary problems addressed by its standard.\n\nWhile MPhys does provide these conventions, it is not absolutely necessary to follow these guidelines in order to solve these types of problems with OpenMDAO given its very general coupling capability.\nHowever, by following the MPhys conventions, the usage of OpenMDAO for multiphysics analysis will be modular across developer groups.\nThis eases technology transfer and collaboration in this area of research.\nThe standardization strives for modularity of multiphysics problems with large parallel physics codes.\n\n## Install\nTo install the latest release version of mphys:\n```bash\npip install mphys\n```\n\nFor developers, clone the mphys repository then in the root directory do:\n```bash\npip install -e .\n```\n\n## Documentation\nOnline documentation is available at [https://openmdao.github.io/mphys/](https://openmdao.github.io/mphys/).\n\n### Building the Docs\nThe documentation includes N2 diagrams from the unit tests. Before building the docs, go into `tests/unit_tests` and run `python -m unittest`.\nThen go into the `docs` directory and run `make html`.\n\n# Solvers compatible with mphys\nOpen-source codes with builders and components compatible with mphys:\n\n| Code                                                       | Analysis Type                  | Notes                                                                                              |\n|------------------------------------------------------------|--------------------------------|----------------------------------------------------------------------------------------------------|\n|[ADflow](https://github.com/mdolab/adflow)                  | Aerodynamics                   | Structured multi-block and overset CFD.                                                            |\n|[DAfoam](https://github.com/mdolab/dafoam)                  | Aerodynamics                   | Discrete Adjoint with OpenFOAM.                                                                    |\n|[MELD](https://github.com/smdogroup/funtofem)               | Load and Displacement Transfer | Point cloud based transfer scheme. Part of the FUNtoFEM package.                                   |\n|[pyCycle](https://github.com/OpenMDAO/pyCycle)              | Propulsion                     | Thermodynamic cycle modeling library for engines.                                                  |\n|[pyGeo](https://github.com/mdolab/pygeo)                    | Geometric Parameterization     | Wrapper for ESP, OpenVSP, and a free-form deformation parameterization.                            |\n|[TACS](https://github.com/smdogroup/tacs)                   | Structures                     | Parallel Finite Element Analysis.                                                                  |\n\n# Examples\nAs noted their README.md files, some of the examples use codes that are not widely available;\nhowever, they are still included in order to provide more illustrations of how mphys can be used.\n\n# For developers\n\n## Telecons\n\nMPhys development is discussed in biweekly telecons that occur Mondays at 11AM Eastern Time.\nIf you would like to participate, contact Kevin Jacobson (kevin.e.jacobson@nasa.gov).\n\n## Signed Commits\nThe mphys `main` branch requires verified commits. See the instructions on how to sign commits [here](https://openmdao.org/newdocs/versions/latest/other_useful_docs/developer_docs/signing_commits.html).\n\n## Tests\nThe test are written to use the testflo framework because it allows us to run tests with multiple cores.\nTo run the tests you will need to install testflo.\n\n### Integration Tests\nThe integration tests check the interaction of mphys with several solvers.\nThese python packages are required to run them:\n```\nadflow\ntacs\nfuntofem\ntestflo\nparamerized\n```\nand these input files. They can be obtained by running `get-input-files.sh`\n```\nwingbox.bdf\nwing_vol_L1.cgns\nwing_vol_L2.cgns\nwing_vol_L3.cgns\nffd.xyz\n```\n\nto run the tests execute in the root directory\n```bash\ntestflo -v tests\n```\n\n# Software Assurance Plan\n\nMPhys has been deemed as Class-E software, according to the [7120.5D Specification](https://www.nasa.gov/pdf/423715main_NPR_7120-5_HB_FINAL-02-25-10.pdf).\nTo maintain software quality and assure functionality, MPhys includes a unit and integration test suite.\nBefore any pull requests are merged, all of those tests must pass.\nThe tests are run as part of a continuous integration system, automatically upon pull request submission.\n\nWe require all commits to be signed to ensure that we know the \"identity\" (at least that the commit is actually coming from the account it claims to be).\nUnsigned commits will not be accepted.\n\nThe Bandit static analysis tool is run on the codebase to check for any \"simple\" security issues.\nThis checks for basic vulnerabilities like having API keys, user names, or passwords in the repository.\nBandit is run manually on the repository before any major releases are made.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mphys",
    "package_url": "https://pypi.org/project/mphys/",
    "platform": null,
    "project_url": "https://pypi.org/project/mphys/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mphys/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Components and related code for multiphysics problems in OpenMDAO",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16755916,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b06291b08e21a2bdebafcf07d14ad76f7d5ca3685cf645bd10fcbe259cc28fd3",
          "md5": "78a583fffc49f7b1eb961db3896c5de0",
          "sha256": "17efaa541a1a5f691e2afc9d9b2a4afd0681ab2077de0bde73802733a86792e2"
        },
        "downloads": -1,
        "filename": "mphys-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "78a583fffc49f7b1eb961db3896c5de0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13927,
        "upload_time": "2022-06-14T16:49:48",
        "upload_time_iso_8601": "2022-06-14T16:49:48.645608Z",
        "url": "https://files.pythonhosted.org/packages/b0/62/91b08e21a2bdebafcf07d14ad76f7d5ca3685cf645bd10fcbe259cc28fd3/mphys-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80d3c594e75865319624d5518577634210305c8ae8b5a8db5157f366728a630c",
          "md5": "f185f11218f77e92d2e131fce4f9c853",
          "sha256": "c43e5aec845f335e222cca429c35a944aa11c352879375994f687bbbfaab1854"
        },
        "downloads": -1,
        "filename": "mphys-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f185f11218f77e92d2e131fce4f9c853",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17987,
        "upload_time": "2023-02-08T20:09:20",
        "upload_time_iso_8601": "2023-02-08T20:09:20.230026Z",
        "url": "https://files.pythonhosted.org/packages/80/d3/c594e75865319624d5518577634210305c8ae8b5a8db5157f366728a630c/mphys-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "80d3c594e75865319624d5518577634210305c8ae8b5a8db5157f366728a630c",
        "md5": "f185f11218f77e92d2e131fce4f9c853",
        "sha256": "c43e5aec845f335e222cca429c35a944aa11c352879375994f687bbbfaab1854"
      },
      "downloads": -1,
      "filename": "mphys-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f185f11218f77e92d2e131fce4f9c853",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17987,
      "upload_time": "2023-02-08T20:09:20",
      "upload_time_iso_8601": "2023-02-08T20:09:20.230026Z",
      "url": "https://files.pythonhosted.org/packages/80/d3/c594e75865319624d5518577634210305c8ae8b5a8db5157f366728a630c/mphys-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}