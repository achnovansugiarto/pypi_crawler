{
  "info": {
    "author": "Daiki Katsuragawa",
    "author_email": "daikikatsuragawa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# df4loop\n\ndf4loop supports general purpose processes that requires a combination of both pandas.DataFrame and loop. Specifically, the mission of df4loop is to \"speed up processing\" and \"make complex code intuitive\" at low installation costs.\n\n## Installation\n\n```sh\npip install df4loop\n```\n\n## Usage\n\nThe following DataFrame is defined to assist users envision the use of df4loop.\n\n```py\nimport pandas as pd\n\nsample_dict = {\n    \"column_1\": [100, 200, 300, 400, 500],\n    \"column_2\": [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    \"column_3\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n}\ndf = pd.DataFrame.from_dict(sample_dict)\ndf\n```\n\n|     |column_1|column_2|column_3|\n|----:|-------:|--------|--------|\n|    0|     100|A       |a       |\n|    1|     200|B       |b       |\n|    2|     300|C       |c       |\n|    3|     400|D       |d       |\n|    4|     500|E       |e       |\n\n### DFIterator\n\nDFIterator helps developers writing the following code. This is code written using pandas.DataFrame.iterrows for the purpose of referencing a value by row.\n\n```py\nfor index, row in df.iterrows():\n    tmp = row[\"column_1\"]\n```\n\nDFIterator reproduces this process and speeds it up. Actually, DataFrame and its row pandas.Series are converted to lists and dictionaries to speed up. However, the usage is almost the same.\n\n```py\nfrom df4loop import DFIterator\n\ndf_iterator = DFIterator(df)\nfor index, row in df_iterator.iterrows():\n    tmp = row[\"column_1\"]\n```\n\nIf you do not need to output the index, set `return_indexes=False`.\n\n```py\nfrom df4loop import DFIterator\n\ndf_iterator = DFIterator(df)\nfor row in df_iterator.iterrows(return_indexes=False):\n    tmp = row[\"column_1\"]\n```\n\n### DFGenerator\n\nDFGenerator supports the generation of DataFrame with rows set by loops. Adding rows to the DataFrame in a loop will take a long time to process. The secret to speeding up is to organize rows in a list or dictionary and then make them pandas.DataFrame at once. DFGenerator supports this process for intuitive implementation.\n\nThe following code is an example of selecting the dict type as the row.\n\n```py\nfrom df4loop import DFGenerator\n\n# It is not necessary to specify columns.\ndf_generator = DFGenerator(columns=df.columns.values.tolist())\nfor _, row in df.iterrows():\n    tmp_row = {\n        \"column_1\": row[\"column_1\"],\n        \"column_2\": row[\"column_2\"],\n        \"column_3\": row[\"column_3\"],\n    }\n    df_generator.append(tmp_row)\nnew_df = df_generator.generate_df()\n```\n\nThe following code is an example of selecting the list type as the row. columns must be specified during initialization.\n\n```py\nfrom df4loop import DFGenerator\n\ndf_generator = DFGenerator(columns=df.columns.values.tolist())\nfor _, row in df.iterrows():\n    tmp_row = [\n        row[\"column_1\"],\n        row[\"column_2\"],\n        row[\"column_3\"],\n    ]\n    df_generator.append(tmp_row)\nnew_df = df_generator.generate_df()\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/daikikatsuragawa/df4loop",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "df4loop",
    "package_url": "https://pypi.org/project/df4loop/",
    "platform": "",
    "project_url": "https://pypi.org/project/df4loop/",
    "project_urls": {
      "Homepage": "https://github.com/daikikatsuragawa/df4loop"
    },
    "release_url": "https://pypi.org/project/df4loop/0.1.0/",
    "requires_dist": [
      "pandas (>=1.0.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "df4loop supports general purpose processe that requires a combination of both pandas.DataFrame and loop.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10334156,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66b61668008b91b396c23fe526ab5d6a0534c776b8df77f0e13949babb6e38a8",
          "md5": "b44d559ad9ef69111dd51ed48f3eb51d",
          "sha256": "a7840f6f89acd555869f63daf1db19446b9689e6ecebdf0f5f0e43c936c4d0e3"
        },
        "downloads": -1,
        "filename": "df4loop-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b44d559ad9ef69111dd51ed48f3eb51d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8012,
        "upload_time": "2021-05-12T14:25:28",
        "upload_time_iso_8601": "2021-05-12T14:25:28.131029Z",
        "url": "https://files.pythonhosted.org/packages/66/b6/1668008b91b396c23fe526ab5d6a0534c776b8df77f0e13949babb6e38a8/df4loop-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2feae9402f2b8cbdc7c810fed8fe61f7d551fe87d75562c6992cbf0cee04e7fb",
          "md5": "cbec06440acb00bbb0cb882290282cdc",
          "sha256": "108eb3d469d7c5222c96ee5e56d8a1c0166e7c3a16bb2aa394932487d3402d19"
        },
        "downloads": -1,
        "filename": "df4loop-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cbec06440acb00bbb0cb882290282cdc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7484,
        "upload_time": "2021-05-12T14:25:29",
        "upload_time_iso_8601": "2021-05-12T14:25:29.675577Z",
        "url": "https://files.pythonhosted.org/packages/2f/ea/e9402f2b8cbdc7c810fed8fe61f7d551fe87d75562c6992cbf0cee04e7fb/df4loop-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66b61668008b91b396c23fe526ab5d6a0534c776b8df77f0e13949babb6e38a8",
        "md5": "b44d559ad9ef69111dd51ed48f3eb51d",
        "sha256": "a7840f6f89acd555869f63daf1db19446b9689e6ecebdf0f5f0e43c936c4d0e3"
      },
      "downloads": -1,
      "filename": "df4loop-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b44d559ad9ef69111dd51ed48f3eb51d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8012,
      "upload_time": "2021-05-12T14:25:28",
      "upload_time_iso_8601": "2021-05-12T14:25:28.131029Z",
      "url": "https://files.pythonhosted.org/packages/66/b6/1668008b91b396c23fe526ab5d6a0534c776b8df77f0e13949babb6e38a8/df4loop-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2feae9402f2b8cbdc7c810fed8fe61f7d551fe87d75562c6992cbf0cee04e7fb",
        "md5": "cbec06440acb00bbb0cb882290282cdc",
        "sha256": "108eb3d469d7c5222c96ee5e56d8a1c0166e7c3a16bb2aa394932487d3402d19"
      },
      "downloads": -1,
      "filename": "df4loop-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cbec06440acb00bbb0cb882290282cdc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7484,
      "upload_time": "2021-05-12T14:25:29",
      "upload_time_iso_8601": "2021-05-12T14:25:29.675577Z",
      "url": "https://files.pythonhosted.org/packages/2f/ea/e9402f2b8cbdc7c810fed8fe61f7d551fe87d75562c6992cbf0cee04e7fb/df4loop-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}