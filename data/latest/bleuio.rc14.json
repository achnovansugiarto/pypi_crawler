{
  "info": {
    "author": "Smart Sensor Devices",
    "author_email": "smartzenzor@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## Python library v1.2.0 for BleuIO\n\n### Supports BleuIO v.2.2.1 or later\n\n> NOTE: Does not support 2.2.0 or earlier version of BleuIO firmware\n\n### Instructions\n\n- Install the library by running:\n\n```shell\npip install bleuio\n```\n\n- In the python file import:\n\n```python\n from bleuio_lib.bleuio_funcs import BleuIO\n```\n\n- Here is an example on how to get started:\n\n```python\n# (C) 2023 Smart Sensor Devices AB\n\nimport time\nfrom datetime import datetime\nfrom bleuio_funcs import BleuIO\n\n# Description\n# This is an example script that showcase how to get started with the BleuIO library for Python.\n# It will show how to setup callback functions for scan results and events.\n# How to send a command and what responses you get and how you can handle them.\n# How to start and stop a scan.\n# How to start and stop advertising.\n# How to check the BLE Status of the dongle.\n\n\n# Creating a callback function for scan results. For this example we just prints out the result.\n# Here you can add your code to parse the data.\ndef my_scan_callback(scan_input):\n    print(\"\\n\\nmy_evt_callback: \" + str(scan_input))\n\n\n# Creating a callback function for events. For this example we add a timestamp and just prints out the event.\n# Here you can add your code to parse the data.\ndef my_evt_callback(evt_input):\n    cbTime = datetime.now()\n    currentTime = cbTime.strftime(\"%H:%M:%S\")\n    print(\"\\n\\n[\" + str(currentTime) + \"] my_evt_callback: \" + str(evt_input))\n\n\n# Start\n\n# Initiates the dongle. If port param is left as 'auto' it will auto-detect if BleuIO dongle is connected.\n# :param port: str\n# :param baud: int\n# :param timeout: int\n# :param debug: bool\n# Auto-Detect dongle\nmy_dongle = BleuIO()\n\n# Specific COM port (Win) 'COMX'\n# my_dongle = BleuIo(port='COM7')\n\n# Specific COM port (Linux) 'dev/tty.xxxxx...'\n# my_dongle = BleuIo(port='/dev/tty.123546877')\n\n# Specific COM port (Mac) 'dev/cu.xxxx...'\n# my_dongle = BleuIo(port='/dev/cu.123546877')\n\n\n# Registers the callback functions we created earlier.\nmy_dongle.register_evt_cb(my_evt_callback)\nmy_dongle.register_scan_cb(my_scan_callback)\n\nprint(\"Welcome to Test BleuIO Python Library!\\n\\n\")\n\n# Here we send a simple AT Command. All commands will return a BleuIORESP obj.\n# The object have 4 attributes:\n# Cmd: Contains the command data.\n# Ack: Contains the acknowledge data.\n# Rsp: Contains the response data.\n# End: Contains the end data.\nat_exemple = my_dongle.at()\n# The attributes are in JSON format. Here we we print the different attributes.\nprint(at_exemple.Cmd)\nprint(at_exemple.Ack)\nprint(\n    at_exemple.Rsp\n)  # Not every ccommand has a Response message, AT for example doesn't so this will return an empty list\nprint(at_exemple.End)\n\nprint(\"\\n--\\n\")\n\n# We can try with the ATI command, it has information in the Response message.\n# An AT command can have several response messages so it will return a list of JSON objects\nati_exemple = my_dongle.ati()\nprint(ati_exemple.Cmd)\nprint(ati_exemple.Ack)\nprint(ati_exemple.Rsp)\nprint(ati_exemple.End)\n\nprint(\"\\n--\\n\")\n\n# If we only want to see if the was successful we can do like this:\nprint(\"Err: \" + str(ati_exemple.Ack[\"err\"]))\n# or\nprint(\"errMsg: \" + str(ati_exemple.Ack[\"errMsg\"]))\n\n# Here is an example on how to scan.\n# First we need to put the dongle in Central or Dual Gap Role\nmy_dongle.at_dual()\n\n# Now we start scanning\nresp = my_dongle.at_gapscan()\nprint(resp.Cmd)\nprint(resp.Ack)\nprint(resp.Rsp)\nprint(resp.End)\n\n# We can either send in a timeout as a parameter for the at_gapscan() command or stop the scan when we're done.\n# Here we just set a three second sleep then stop scan.\n# Notice that all the scan data will be printed by our my_scan_callback() function.\ntime.sleep(3)\nprint(\"stop scan\")\nmy_dongle.stop_scan()\n\nprint(\"\\n--\\n\")\n\n# The BLEStatus class can help you keep track of if you are currently advertising for example.\n# \"\"\"A class used to handle BLE Statuses\n\n# :attr isScanning: Keeps track on if dongle is currently scanning.\n# :attr isConnected: Keeps track on if dongle is currently connected.\n# :attr isAdvertising: Keeps track on if dongle is currently advertising.\n# :attr isSPSStreamOn: Keeps track on if dongle is currently in SPS stream mode.\n# :attr role: Keeps track of the dongle's current GAP Role.\n# \"\"\"\n\nprint(\"isScanning: \" + str(my_dongle.status.isScanning))\nprint(\"isConnected: \" + str(my_dongle.status.isConnected))\nprint(\"isAdvertising: \" + str(my_dongle.status.isAdvertising))\nprint(\"isSPSStreamOn: \" + str(my_dongle.status.isSPSStreamOn))\nprint(\"role: \" + str(my_dongle.status.role))\n\nprint(\"\\n--\\n\")\n\n# If we start advertising and check isAdvertising we will see that is changes to True.\nresp = my_dongle.at_advstart()\nprint(resp.Cmd)\nprint(resp.Ack)\nprint(resp.Rsp)\nprint(resp.End)\n\nprint(\"\\nisAdvertising: \" + str(my_dongle.status.isAdvertising))\n\nprint(\"\\n--\\n\")\n\n# Here we stop the advertising.\nresp = my_dongle.at_advstop()\nprint(resp.Cmd)\nprint(resp.Ack)\nprint(resp.Rsp)\nprint(resp.End)\n\nprint(\"\\nisAdvertising: \" + str(my_dongle.status.isAdvertising))\n\n```\n\n## Functions\n\n```python\nclass BleuIo(object):\n    def __init__(self, port='auto', baud=57600, timeout=1, debug=False):\n        \"\"\"\n        Initiates the dongle. If port param is left as 'auto' it will auto-detect if bleuio dongle is connected.        :param port: str\n        :param baud: int\n        :param timeout: int\n        :param debug: bool\n        \"\"\"\n\n    def register_scan_cb(self, callback):\n        \"\"\"Registers callback function for recieving scan results.\n\n        :param callback: Function with a data parameter. Function will be called for every scan result.\n        :type callback : hex str\n        :returns: Scan results.\n        :rtype: str\n        \"\"\"\n\n    def register_evt_cb(self, callback):\n        \"\"\"Registers callback function for recieving events.\n\n        :param callback: Function with a data parameter. Function will be called for every event.\n        :type callback : hex str\n        :returns: Event results.\n        :rtype: str\n        \"\"\"\n\n    def unregister_scan_cb(self):\n        \"\"\"Unregister the callback function for recieving scan results.\"\"\"\n\n    def unregister_evt_cb(self):\n        \"\"\"Unregister the callback function for recieving events.\"\"\"\n\n    def stop_scan(self):\n        \"\"\"Stops any type of scan.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def stop_sps(self):\n        \"\"\"Stops SPS Stream-mode.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at(self):\n        \"\"\"Basic AT-Command.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def ata(self, isOn):\n        \"\"\"Shows/hides ascii values from notification/indication/read responses.\n\n        :param isOn: True=On, False=Off\n        :type isOn : bool\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def atasps(self, isOn):\n        \"\"\"Toggle between ascii (Off) and hex responses (On) received from SPS.\n\n        :param isOn: True=On, False=Off\n        :type isOn : bool\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def atds(self, isOn):\n        \"\"\"Turns auto discovery of services when connecting on/off.\n\n        :param isOn: (boolean) True=On, False=Off\n        :type isOn : bool\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def ate(self, isOn):\n        \"\"\"Turns Echo on/off.\n\n        :param isOn: (boolean) True=On, False=Off\n        :type isOn : bool\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def ati(self):\n        \"\"\"Device information query.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def atr(self):\n        \"\"\"Trigger platform reset.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_advdata(self, advdata=\"\"):\n        \"\"\"Sets or queries the advertising data.\n\n        :param: Sets advertising data. If left empty it will query what advdata is set. Format: xx:xx:xx:xx:xx.. (max 31 bytes)\n        :type advdata: hex str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_advdatai(self, advdata):\n        \"\"\"Sets advertising data in a way that lets it be used as an iBeacon.\n        Format = (UUID)(MAJOR)(MINOR)(TX)\n        Example: at_advdatai(\"5f2dd896-b886-4549-ae01-e41acd7a354a0203010400\")\n\n        :param: Sets advertising data in iBeacon format. If left empty it will query what advdata is set\n        :type advdata: hex str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_advstart(self, conn_type=\"\", intv_min=\"\", intv_max=\"\", timer=\"\"):\n        \"\"\"Starts advertising with default settings if no params.\n        With params: Starts advertising with <conn_type><intv_min><intv_max><timer>.\n\n        :param: Starts advertising with default settings.\n        :type conn_type: str\n        :type intv_min: str\n        :type intv_max: str\n        :type timer: str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_advstop(self):\n        \"\"\"Stops advertising.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_advresp(self, respData=\"\"):\n        \"\"\"Sets or queries scan response data. Data must be provided as hex string.\n\n        :param: Sets scan response data. If left empty it will query what advdata is set. Format: xx:xx:xx:xx:xx.. (max 31 bytes)\n        :type respData: hex str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_cancel_connect(self):\n        \"\"\"While in Central Mode, cancels any ongoing connection attempts.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_central(self):\n        \"\"\"Sets the device Bluetooth role to central role.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_clearnoti(self, handle):\n        \"\"\"Disables notification for selected characteristic.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_clearindi(self, handle):\n        \"\"\"Disables indication for selected characteristic.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_client(self):\n        \"\"\"Sets the device role towards the targeted connection to client. Only in dual role.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_divicename(self, name=\"\"):\n        \"\"\"Gets or sets the device name.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_dis(self):\n        \"\"\"Shows the DIS Service info and if the DIS info is locked in or can be changed.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_dual(self):\n        \"\"\"Sets the device Bluetooth role to dual role.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_enter_passkey(self, passkey):\n        \"\"\"Respond to Passkey request. When faced with this message: BLE_EVT_GAP_PASSKEY_REQUEST use this command to enter\n        the 6-digit passkey to continue the pairing request.\n\n        :param passkey: str: six-digit number string \"XXXXXX\"\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_findscandata(self, scandata, timeout=0):\n        \"\"\"Scans for all advertising/response data which contains the search params.\n\n        :param scandata: Hex string to filter the advertising/scan response data. Can be left blank to scan for everything. Format XXXX..\n        :type scandata: str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_frssi(self, rssi):\n        \"\"\"Filters scan results, showing only results with <max_rssi> value or lower.\n\n        :param rssi: RSSI value. Must be negative. eg. -67\n        :type rssi: str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gapaddrtype(self, addr_type=\"\"):\n        \"\"\"Change device Address Type or queries device Address Type.\n\n        :param addr_type: Range: 1-5. If left blank queries current Address Type.\n        :type addr_type: int\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gapconnect(\n        self,\n        addr,\n        intv_min=\"\",\n        intv_max=\"\",\n        slave_latency=\"\",\n        sup_timeout=\"\",\n    ):\n        \"\"\"Initiates a connection with a specific slave device. [<addr_type>]<address>=<intv_min>:<intv_max>:<slave_latency>:<sup_timeout>\n\n        :param addr: hex str format: [X]XX:XX:XX:XX:XX:XX\n        :param intv_min: str\n        :param intv_max: str\n        :param slave_latency: str\n        :param sup_timeout: str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gapdisconnect(self):\n        \"\"\"Disconnects from a peer Bluetooth device.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gapdisconnectall(self):\n        \"\"\"Disconnects from all peer Bluetooth devices.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gapiocap(self, io_cap=\"\"):\n        \"\"\"Sets or queries what input and output capabilities the device has. Parameter is number between 0 to 4.\n\n        :param io_cap: str: number\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gappair(self, bond=False):\n        \"\"\"Starts a pairing (bond=False) or bonding procedure (bond=True).\n\n        :param bond: boolean\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gapunpair(self, addr_to_unpair=\"\"):\n        \"\"\"Unpair paired devices if no parameters else unpair specific device. This will also remove the device bond data\n        from BLE storage.\n        Usable both when device is connected and when not.\n\n        :param addr_to_unpair: hex str format: [X]XX:XX:XX:XX:XX:XX\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gapscan(self, timeout=0):\n        \"\"\"Starts a Bluetooth device scan with or without timer set in seconds.\n\n        :param: if left empty it will scan indefinitely\n        :param timeout: int (time in seconds)\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gapstatus(self):\n        \"\"\"Reports the Bluetooth role.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gattcread(self, uuid):\n        \"\"\"Read attribute of remote GATT server.\n\n        :param uuid: hex str format: XXXX\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gattcwrite(self, uuid, data):\n        \"\"\"Write attribute to remote GATT server in ASCII.\n\n        :param uuid: hex str format: XXXX\n        :param data: str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gattcwriteb(self, uuid, data):\n        \"\"\"Write attribute to remote GATT server in Hex.\n\n        :param uuid: hex str format: XXXX\n        :param data: hex str format: XXXXXXX..\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gattcwritewr(self, uuid, data):\n        \"\"\"Write, without response, attribute to remote GATT server in ASCII.\n\n        :param uuid: hex str format: XXXX\n        :param data: str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_gattcwritewrb(self, uuid, data):\n        \"\"\"Write, without response, attribute to remote GATT server in Hex.\n\n        :param uuid: hex str format: XXXX\n        :param data: hex str format: XXXXXXX..\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_get_conn(self):\n        \"\"\"Gets a list of currently connected devices along with their mac addresses and conn_idx.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_get_mac(self):\n        \"\"\"Returns MAC address of the BleuIO device.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_get_services(self):\n        \"\"\"Discovers all services of a peripheral and their descriptors and characteristics.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_get_servicesonly(self):\n        \"\"\"Discovers a peripherals services.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_get_service_details(self, uuid):\n        \"\"\"Discovers all characteristics and descriptors of a selected service.\n\n        :param uuid: hex str format: XXXX\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_indi(self):\n        \"\"\"Show list of set indication handles.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_noti(self):\n        \"\"\"Show list of set notification handles.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_numcompa(self, auto_accept=\"2\"):\n        \"\"\"Used for accepting a numeric comparison authentication request (no params) or enabling/disabling auto-accepting\n        numeric comparisons. auto_accept=\"0\" = off, auto_accept=\"1\" = on.\n\n        :param auto_accept: str format: \"0\" or \"1\"\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_peripheral(self):\n        \"\"\"Sets the device Bluetooth role to peripheral.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_scantarget(self, addr):\n        \"\"\"Scan a target device. Displaying it's advertising and response data as it updates.\n\n        :param addr: hex str format: \"xx:xx:xx:xx:xx:xx\"\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_sec_lvl(self, sec_lvl=\"\"):\n        \"\"\"Sets or queries (no params) what minimum security level will be used when connected to other devices.\n\n        :param sec_lvl:  str: string number between 0 and 4\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_server(self):\n        \"\"\"Sets the device role towards the targeted connection to server. Only in dual role.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_setdis(self, manuf, model_num, serial_num, hw_rev, fw_rev, sw_rev):\n        \"\"\"Sets the DIS Service info.\n\n        :param manuf: str\n        :param model_num: str\n        :param serial_num: str\n        :param hw_rev: str\n        :param fw_rev: str\n        :param sw_rev: str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_set_noti(self, handle):\n        \"\"\"Enable notification for selected characteristic.\n\n        :param handle: hex str format: \"xxxx\"\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_set_indi(self, handle):\n        \"\"\"Enable indication for selected characteristic.\n\n        :param handle: hex str format: \"xxxx\"\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_set_passkey(self, passkey=\"\"):\n        \"\"\"Setting or quering set passkey (no params) for passkey authentication.\n\n        :param passkey: hex str format: \"xxxxxx\"\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_show_rssi(self, show_rssi=True):\n        \"\"\"Shows/hides RSSI in AT+FINDSCANDATA and AT+SCANTARGET scans.\n\n        :param show_rssi: bool\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_spssend(self, data=\"\"):\n        \"\"\"Send a message or data via the SPS profile.\n        Without parameters it opens a stream for continiously sending data.\n\n        :param: if left empty it will open Streaming mode\n        :type data: str or None\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def at_target_conn(self, conn_idx=\"\"):\n        \"\"\"Set or quering the connection index which is the targeted connection.\n\n        :param conn_idx: connection index, format: xxxx\n        :type conn_idx : hex str\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects.\n        :rtype: obj BleuIORESP\n        \"\"\"\n\n    def help(self):\n        \"\"\"Shows all AT-Commands.\n\n        :returns: Object with 4 object properties: Cmd, Ack, Rsp and End. Each property contains a JSON object, except for Rsp which contains a list of JSON objects. except for Rsp which contains a list of JSON objects.\n        :rtype obj BleuIORESP\n        \"\"\"\n\n```\n\n#Enjoy!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://smart-sensor-devices-ab.github.io/ssd005-manual/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bleuio",
    "package_url": "https://pypi.org/project/bleuio/",
    "platform": null,
    "project_url": "https://pypi.org/project/bleuio/",
    "project_urls": {
      "Homepage": "https://smart-sensor-devices-ab.github.io/ssd005-manual/"
    },
    "release_url": "https://pypi.org/project/bleuio/1.2.0/",
    "requires_dist": [
      "pyserial"
    ],
    "requires_python": ">=3.5",
    "summary": "Library for using the bleuio dongle.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17227297,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1735e65cdcbdad54018a05b823332975e258fa32efdda1dfd28713a1d18ca5bb",
          "md5": "cb319dec421cce45d4aa3f908acc1019",
          "sha256": "25820a2f3dac0a14e8be5f96ebc12e0b8b9b2c00f77a6ff4b30f3cfa26c7402e"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb319dec421cce45d4aa3f908acc1019",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8382,
        "upload_time": "2021-01-12T14:16:50",
        "upload_time_iso_8601": "2021-01-12T14:16:50.847679Z",
        "url": "https://files.pythonhosted.org/packages/17/35/e65cdcbdad54018a05b823332975e258fa32efdda1dfd28713a1d18ca5bb/bleuio-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e8f25862e5a8fbc03b4b0654f6cbb7a5fd30da79cd6a4a4c2ad16d1e62e044c",
          "md5": "324c74245fd7d8bc146413121ac2473d",
          "sha256": "10b40fb4a1bd4721ae522b1ec98efaf64b11f0afbb2e4e59d91688587131f479"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "324c74245fd7d8bc146413121ac2473d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6675,
        "upload_time": "2020-11-10T13:07:06",
        "upload_time_iso_8601": "2020-11-10T13:07:06.629291Z",
        "url": "https://files.pythonhosted.org/packages/7e/8f/25862e5a8fbc03b4b0654f6cbb7a5fd30da79cd6a4a4c2ad16d1e62e044c/bleuio-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "528807b9e4ddc811289c0c6b6763b0da6622330ee9b6e75fea259ff3a9c48bc1",
          "md5": "ae1c430e0573b6b5fea7684e45b0d7bc",
          "sha256": "bf86052f83034dea39f6e1bff970b71895f6b6343904f4ac6563b417d74ea4a6"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae1c430e0573b6b5fea7684e45b0d7bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8385,
        "upload_time": "2021-01-12T14:16:52",
        "upload_time_iso_8601": "2021-01-12T14:16:52.001475Z",
        "url": "https://files.pythonhosted.org/packages/52/88/07b9e4ddc811289c0c6b6763b0da6622330ee9b6e75fea259ff3a9c48bc1/bleuio-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "944dd561429e812636a0bc29f29141c5a780b073076553b2d16a73fadd162a89",
          "md5": "609a71bbe866e728e9834d416770557a",
          "sha256": "26669a7539c88429e59d7ad42de46fa9238f929ee877f114701c2bc3af197e9e"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "609a71bbe866e728e9834d416770557a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7518,
        "upload_time": "2020-11-10T13:39:41",
        "upload_time_iso_8601": "2020-11-10T13:39:41.369246Z",
        "url": "https://files.pythonhosted.org/packages/94/4d/d561429e812636a0bc29f29141c5a780b073076553b2d16a73fadd162a89/bleuio-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08a5eb8a2c2cdf94c9a1b7899078cb2251e4898cda358ffb2469482f109ad880",
          "md5": "4a4115ae03ae7f41d973cad93d090615",
          "sha256": "0fc0311f2c526be57035da41a034bd694362b3f3045c32997440689930945a4a"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a4115ae03ae7f41d973cad93d090615",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10371,
        "upload_time": "2021-01-12T14:16:53",
        "upload_time_iso_8601": "2021-01-12T14:16:53.506825Z",
        "url": "https://files.pythonhosted.org/packages/08/a5/eb8a2c2cdf94c9a1b7899078cb2251e4898cda358ffb2469482f109ad880/bleuio-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f59323f204a7f0fdd63b51af9a44d2f80ec9ba8054354376f5b20a5f16ca3b6b",
          "md5": "391c0582eaf32dbf3e774eb3260509e2",
          "sha256": "91047a9c5eed759b27d8fd7732e38cef918017865d9643bd804a420825505b7d"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "391c0582eaf32dbf3e774eb3260509e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8349,
        "upload_time": "2020-11-10T14:20:28",
        "upload_time_iso_8601": "2020-11-10T14:20:28.901975Z",
        "url": "https://files.pythonhosted.org/packages/f5/93/23f204a7f0fdd63b51af9a44d2f80ec9ba8054354376f5b20a5f16ca3b6b/bleuio-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38d1c611e8cff104f107e033a2633de6f3019af6fb024528d8ba3b6f661d2d9b",
          "md5": "135929668bb68d65e1bcd533a16315b5",
          "sha256": "363bb45af0ab6f8d5fa9b532c112588f759e2facd80a9337f977d48741d010cd"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "135929668bb68d65e1bcd533a16315b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10380,
        "upload_time": "2021-01-12T14:16:55",
        "upload_time_iso_8601": "2021-01-12T14:16:55.239062Z",
        "url": "https://files.pythonhosted.org/packages/38/d1/c611e8cff104f107e033a2633de6f3019af6fb024528d8ba3b6f661d2d9b/bleuio-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "562e5fc0ad579b262185046c8882f597eaf7ed428a641237733163e694e03a38",
          "md5": "33f5f5363d204f51739d964ccf00f5c8",
          "sha256": "5acb5c9bc8d036218844205d03c58a81ee75618db13021a01b6a31eb38f142b8"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "33f5f5363d204f51739d964ccf00f5c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8359,
        "upload_time": "2020-11-13T12:11:07",
        "upload_time_iso_8601": "2020-11-13T12:11:07.985407Z",
        "url": "https://files.pythonhosted.org/packages/56/2e/5fc0ad579b262185046c8882f597eaf7ed428a641237733163e694e03a38/bleuio-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74244cd6c62348fe07531d1209e82b134e9384c0479d4010d830279a7969467a",
          "md5": "72ab846eab5262446df312abc1ca9e98",
          "sha256": "4b176b03c531aa79be618730af77e348e73bae50a0c8f31ce4f68733ac4b94fe"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72ab846eab5262446df312abc1ca9e98",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10427,
        "upload_time": "2021-01-12T14:16:56",
        "upload_time_iso_8601": "2021-01-12T14:16:56.366794Z",
        "url": "https://files.pythonhosted.org/packages/74/24/4cd6c62348fe07531d1209e82b134e9384c0479d4010d830279a7969467a/bleuio-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cf0f777d6ee671192395507d3ab2dce2d817bdbd6cd7bddf4c2645f6caf2df8",
          "md5": "b992f04f56b80b8ab1bce0f4028267cb",
          "sha256": "0b73429a9ed11d5ee016d7cf73085b515184a45241d5522089aef5a47a238c69"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b992f04f56b80b8ab1bce0f4028267cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8387,
        "upload_time": "2020-12-07T16:22:39",
        "upload_time_iso_8601": "2020-12-07T16:22:39.444556Z",
        "url": "https://files.pythonhosted.org/packages/7c/f0/f777d6ee671192395507d3ab2dce2d817bdbd6cd7bddf4c2645f6caf2df8/bleuio-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1996591e14a51b30016679c7ab55a09b171a7f2b642158766b8ec88b0bb2d89e",
          "md5": "0e813e2136fcae73a0de192cb64199b2",
          "sha256": "11c08233649982949a5dd6683009c36f26b9bafabaf45fb612b57afcaa6c8dc6"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e813e2136fcae73a0de192cb64199b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10539,
        "upload_time": "2021-01-12T14:16:57",
        "upload_time_iso_8601": "2021-01-12T14:16:57.860039Z",
        "url": "https://files.pythonhosted.org/packages/19/96/591e14a51b30016679c7ab55a09b171a7f2b642158766b8ec88b0bb2d89e/bleuio-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "070382c38129d250d676e0be5d8fda9b4e4e93fe1cf6ee2574978bb7925f5443",
          "md5": "d34079675c471fabcdd5bd38c3d5bef1",
          "sha256": "90aea5a9817dd350b06efb55882a6c66416a994d8b5c6ecf55335a9fab853d59"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d34079675c471fabcdd5bd38c3d5bef1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10678,
        "upload_time": "2022-02-18T16:12:27",
        "upload_time_iso_8601": "2022-02-18T16:12:27.808368Z",
        "url": "https://files.pythonhosted.org/packages/07/03/82c38129d250d676e0be5d8fda9b4e4e93fe1cf6ee2574978bb7925f5443/bleuio-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c06f143bb8a1c147c1596c4f62378d2f63809b87a287d7682cf45518875825f4",
          "md5": "ebb72ce7ab3a43a49e5a0b3d04ea8339",
          "sha256": "b430f87f973395f2cb8d0fea30bfbee606b65a8ccb9853043f050427fa4b7cb9"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ebb72ce7ab3a43a49e5a0b3d04ea8339",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8643,
        "upload_time": "2021-02-12T11:36:22",
        "upload_time_iso_8601": "2021-02-12T11:36:22.890838Z",
        "url": "https://files.pythonhosted.org/packages/c0/6f/143bb8a1c147c1596c4f62378d2f63809b87a287d7682cf45518875825f4/bleuio-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f816ea769b3e02abedb42133d9179555dd901c64c68fde191b33e4898fd6fe21",
          "md5": "aa8d08b2efaf16e535f52c481cfcc275",
          "sha256": "e819b472d9aa104f431eb909b54696e4c6e51d3a02cd25cb249b61a0b2f5fe48"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa8d08b2efaf16e535f52c481cfcc275",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12860,
        "upload_time": "2022-02-18T16:12:29",
        "upload_time_iso_8601": "2022-02-18T16:12:29.156924Z",
        "url": "https://files.pythonhosted.org/packages/f8/16/ea769b3e02abedb42133d9179555dd901c64c68fde191b33e4898fd6fe21/bleuio-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b18aede046d8f6021c19d7045e72c69548b24c9e948e54a8f26a6b80a88da993",
          "md5": "5d032155a53431b32415232c80c6eafa",
          "sha256": "43a052e7cb492359a4c5c7795978efab246f6f237bdf4abf15bd435dbaf5ae2b"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "5d032155a53431b32415232c80c6eafa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11244,
        "upload_time": "2021-03-09T09:12:43",
        "upload_time_iso_8601": "2021-03-09T09:12:43.782219Z",
        "url": "https://files.pythonhosted.org/packages/b1/8a/ede046d8f6021c19d7045e72c69548b24c9e948e54a8f26a6b80a88da993/bleuio-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3673f811a5c2adee20a8654306807f27bc9e9a563d63bd372aff8e22ab4d9dd",
          "md5": "2fabe3daf4b77d5624eeece982166058",
          "sha256": "28988560afe7627aabc64d06d539e4d25066343dd20c69422d5b458240645450"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fabe3daf4b77d5624eeece982166058",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13585,
        "upload_time": "2022-02-18T16:12:30",
        "upload_time_iso_8601": "2022-02-18T16:12:30.461112Z",
        "url": "https://files.pythonhosted.org/packages/b3/67/3f811a5c2adee20a8654306807f27bc9e9a563d63bd372aff8e22ab4d9dd/bleuio-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e73304cf4c9fcd4a1c622b145ea4a7585deb899df0e333e0e92daf6c4867818b",
          "md5": "f32df170566d0af1317176fefa07262e",
          "sha256": "d2031b282432f20e1a1c982e2b43bd0a432c7c6bc475bbbcd001b819e8ca5a91"
        },
        "downloads": -1,
        "filename": "bleuio-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "f32df170566d0af1317176fefa07262e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12033,
        "upload_time": "2021-03-26T12:55:00",
        "upload_time_iso_8601": "2021-03-26T12:55:00.152996Z",
        "url": "https://files.pythonhosted.org/packages/e7/33/04cf4c9fcd4a1c622b145ea4a7585deb899df0e333e0e92daf6c4867818b/bleuio-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9420718183a6a14fa251927f1e041d9e4fff4e92681fdfe4a0ec73014f286261",
          "md5": "a2681423a992403f981667496874415d",
          "sha256": "f8c6e5223977b32402dcdef57ecbc47a756a9c1a1acf569cf659edaccc3f523c"
        },
        "downloads": -1,
        "filename": "bleuio-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2681423a992403f981667496874415d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 13595,
        "upload_time": "2022-02-18T16:12:31",
        "upload_time_iso_8601": "2022-02-18T16:12:31.792866Z",
        "url": "https://files.pythonhosted.org/packages/94/20/718183a6a14fa251927f1e041d9e4fff4e92681fdfe4a0ec73014f286261/bleuio-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b359646eb68bf0cbb31cde40e28ca8a8b2a59ea89c66ef1467676d498cb3c1b",
          "md5": "612b6eb3bdb1e2b294b30fb43f331030",
          "sha256": "4bff26c4f73d333b86dcb096baf7452314232ec13267bf9eb7ad15140d0bda98"
        },
        "downloads": -1,
        "filename": "bleuio-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "612b6eb3bdb1e2b294b30fb43f331030",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 12068,
        "upload_time": "2021-03-31T08:05:19",
        "upload_time_iso_8601": "2021-03-31T08:05:19.656177Z",
        "url": "https://files.pythonhosted.org/packages/4b/35/9646eb68bf0cbb31cde40e28ca8a8b2a59ea89c66ef1467676d498cb3c1b/bleuio-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a08fe2ddd59e2a02c401b61bc6ce59e836beb7922c69d197afd713bbece263d4",
          "md5": "2c2b41f6d1a2512c6bcf1b08dfa458ed",
          "sha256": "c5fa1bba51bbf40bfbd6d13c90164cd6b1533f8711d9f9f7f06ab4609e980337"
        },
        "downloads": -1,
        "filename": "bleuio-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c2b41f6d1a2512c6bcf1b08dfa458ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 15054,
        "upload_time": "2022-02-18T16:12:33",
        "upload_time_iso_8601": "2022-02-18T16:12:33.153755Z",
        "url": "https://files.pythonhosted.org/packages/a0/8f/e2ddd59e2a02c401b61bc6ce59e836beb7922c69d197afd713bbece263d4/bleuio-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40b55969b10970b3f7dc144446553f27be2374376cb77849818f36298f5ba251",
          "md5": "7a29ec3d7a54f3b7247f2203220c501e",
          "sha256": "f5ad97abfdbbffa6d4369fab56b6838d58f3ccf3d0fb3e9d515da22cba7317ca"
        },
        "downloads": -1,
        "filename": "bleuio-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7a29ec3d7a54f3b7247f2203220c501e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14515,
        "upload_time": "2021-06-08T13:56:58",
        "upload_time_iso_8601": "2021-06-08T13:56:58.374804Z",
        "url": "https://files.pythonhosted.org/packages/40/b5/5969b10970b3f7dc144446553f27be2374376cb77849818f36298f5ba251/bleuio-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "255cee171fb12eec7327636d1021789e196d016226213322f2a811cca00f949e",
          "md5": "6e8249a7c4df667cf326309c1510a024",
          "sha256": "8846b9695442e41ca0a53b4cb27fb4e8822e585af3c080380b9fbd5fdfdf89f0"
        },
        "downloads": -1,
        "filename": "bleuio-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e8249a7c4df667cf326309c1510a024",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 15233,
        "upload_time": "2022-02-18T16:12:34",
        "upload_time_iso_8601": "2022-02-18T16:12:34.484335Z",
        "url": "https://files.pythonhosted.org/packages/25/5c/ee171fb12eec7327636d1021789e196d016226213322f2a811cca00f949e/bleuio-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8db8c82294ebe91cffe0b64cbc26ba63fb5e894896a7f01f72c3355d2079ac12",
          "md5": "d801ef5791144b64b26829eb7ee514b2",
          "sha256": "2ef6eedf3baa2ee38057b1071c41452999c62a97442dbb3b1ef2240d4d77a604"
        },
        "downloads": -1,
        "filename": "bleuio-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d801ef5791144b64b26829eb7ee514b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14753,
        "upload_time": "2021-07-01T12:57:01",
        "upload_time_iso_8601": "2021-07-01T12:57:01.297062Z",
        "url": "https://files.pythonhosted.org/packages/8d/b8/c82294ebe91cffe0b64cbc26ba63fb5e894896a7f01f72c3355d2079ac12/bleuio-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5564ec84f6774c96574b94407a6afcab03456252d10afc59bbd5302365ed466",
          "md5": "867c33eb7970c420ab99dc85ed2ac7a7",
          "sha256": "8b79c9db3cd41b251a03fc36b6da01465971fb98a9c0b7410cfd2611b23f734d"
        },
        "downloads": -1,
        "filename": "bleuio-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "867c33eb7970c420ab99dc85ed2ac7a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16885,
        "upload_time": "2022-02-18T16:12:35",
        "upload_time_iso_8601": "2022-02-18T16:12:35.914894Z",
        "url": "https://files.pythonhosted.org/packages/d5/56/4ec84f6774c96574b94407a6afcab03456252d10afc59bbd5302365ed466/bleuio-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc195f65a46084497a4045f72465c567e62cfa7a5a50b528bee717458b0d8e65",
          "md5": "9385017f9ef85cd5ba690a9b94fbec86",
          "sha256": "1d3969bd05e7b1ffdf293281e95af9ab557e235e0cc8fe3facc4a834db6a3929"
        },
        "downloads": -1,
        "filename": "bleuio-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9385017f9ef85cd5ba690a9b94fbec86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 18486,
        "upload_time": "2023-03-09T17:26:42",
        "upload_time_iso_8601": "2023-03-09T17:26:42.817266Z",
        "url": "https://files.pythonhosted.org/packages/cc/19/5f65a46084497a4045f72465c567e62cfa7a5a50b528bee717458b0d8e65/bleuio-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc195f65a46084497a4045f72465c567e62cfa7a5a50b528bee717458b0d8e65",
        "md5": "9385017f9ef85cd5ba690a9b94fbec86",
        "sha256": "1d3969bd05e7b1ffdf293281e95af9ab557e235e0cc8fe3facc4a834db6a3929"
      },
      "downloads": -1,
      "filename": "bleuio-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9385017f9ef85cd5ba690a9b94fbec86",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 18486,
      "upload_time": "2023-03-09T17:26:42",
      "upload_time_iso_8601": "2023-03-09T17:26:42.817266Z",
      "url": "https://files.pythonhosted.org/packages/cc/19/5f65a46084497a4045f72465c567e62cfa7a5a50b528bee717458b0d8e65/bleuio-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}