{
  "info": {
    "author": "Gregoire Cattan",
    "author_email": "gcattan@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pyRiemann-qiskit\n\nLitterature on quantum computing suggests it may offer an advantage as compared\nwith classical computing in terms of computational time and outcomes, such as\nfor pattern recognition or when using limited training sets [1, 2].\n\nA ubiquitous library on quantum computing is Qiskit [3].\nQiskit is an IBM library distributed under Apache 2.0 which provides both\nquantum algorithms and backends. A backend can be either your local machine\nor a remote machine, which one can emulates or be a quantum machine.\nQiskit abstraction over the type of machine you want to use, make designing\nquantum algorithm seamless.\n\nQiskit implements a quantum version of support vector\n-like classifiers, known as quantum-enhanced support vector classifier (QSVC)\nand varitional quantum classifier (VQC) [4]. These classifiers likely offer\nan advantage over classical SVM in situations where the classification task\nis complex. Task complexity is raised by the encoding of the data into a\nquantum state, the number of available data and the quality of the data. An initial \nstudy is available in [5], and it can be downloaded from [here](doc/Presentations/QuantumERPClassification.pdf).\nAlthough there is no study on this topic at the time of writting,\nthis could be an interesting research direction to investigate BCI illiteracy.\n\npyRiemann-qiskit implements a wrapper around QSVC and VQC, to use quantum\nclassification with Riemannian geometry. A use case would be to use vectorized\ncovariance matrices in the TangentSpace as an input for these classifiers,\nenabling a possible sandbox for researchers and engineers in the field.\n\nThe remaining details some of the quantum drawbacks and will guide you through installation.\nFull documentation, including API description, is available at <https://pyriemann-qiskit.readthedocs.io/>.\nThe repository also includes a [wiki](https://github.com/pyRiemann/pyRiemann-qiskit/wiki) where you can find additional information.\n\n## Quantum drawbacks\n\n- Limitation of the feature dimension\n\n    The number of qubits (and therefore the feature dimension) is limited to:\n    - 24 on a local quantum simulator, and up to:\n    - 5000 on a remote quantum simulator;\n    - 5 on free real quantum computers, and up to:\n    - 65 on exploratory quantum computers (not available for public use).\n\n- Time complexity\n\n    A higher number of trials or dimension increases time to completion of the quantum algorithm, especially when running on a local machine. This is why the number of trials is limited in the examples we provided. However, you should avoid such practices in your own analysis. \n    \n    Although these aspects are less important in a remote backend, it may happen that the quantum algorithm is queued depending on the number of concurrent users.\n\n    For all these aspects, the use of pyRiemann-qiskit should be limited to offline analysis only.\n    \n## References\n\n[1] A. Blance and M. Spannowsky,\n    ‘Quantum machine learning for particle physics using a variational quantum classifier’,\n    J. High Energ. Phys., vol. 2021, no. 2, p. 212, Feb. 2021,\n    doi: 10.1007/JHEP02(2021)212.\n\n[2] P. Rebentrost, M. Mohseni, and S. Lloyd,\n   ‘Quantum Support Vector Machine for Big Data Classification’,\n    Phys. Rev. Lett., vol. 113, no. 13, p. 130503, Sep. 2014,\n    doi: 10.1103/PhysRevLett.113.130503.\n\n[3] H. Abraham et al., Qiskit: An Open-source Framework for Quantum Computing.\n    Zenodo, 2019. doi: 10.5281/zenodo.2562110.\n\n[4] V. Havlíček et al.,\n    ‘Supervised learning with quantum-enhanced feature spaces’,\n    Nature, vol. 567, no. 7747, pp. 209–212, Mar. 2019,\n    doi: 10.1038/s41586-019-0980-2.\n\t\n[5] G. Cattan, A. Andreev,\n    First steps to the classification of ERPs using quantum computation,\n\tNTB Berlin 2022 - International Forum on Neural Engineering & Brain Technologies, May 2022, Berlin, Germany,\n\thal: https://hal.archives-ouvertes.fr/hal-03672246/\n\n\n## Installation\n\n_We recommend the use of [Anaconda](https://www.anaconda.com/) to manage python environements._ \n\n`pyRiemann-qiskit` currently supports Windows, Mac and Linux OS with Python 3.7, 3.8 and 3.9.\n\nAs there is no stable version, you should clone this repository\nand install the package on your local machine using the `setup.py` script\n\n```\npython setup.py develop\n```\n\nTo check the installation, open a python shell and type:\n\n```\nimport pyriemann_qiskit\n```\n\nTo run a specific example on your local machine, you should install first dependencies for the documentation:\n\n```\npip install .[docs]\n```\n\nThen you can run the python example of your choice like:\n\n```\npython examples\\ERP\\classify_P300_bi.py\n```\n\n### Installation with docker\n\nWe also offer the possibility to set up the dev environment within docker.\nTo this end, we recommand to use `vscode` with the `Remote Containers` extension\nfrom Microsoft. \n\nOnce the installation is successful, just open the project in `vscode` and enter `F1`.\nIn the search bar that opens, type `Rebuild and Reopen Container`.\n\nWait for the container to build, and open a python shell within the container.\nThen ensure everything went smoothly by typing:\n\n```\nimport pyriemann_qiskit\n```\n\n## Contributor Guidelines\n\nEveryone is welcomed to contribute to this repository. There are two types of contributions:\n\n- [Raise an issue](https://github.com/pyRiemann/pyRiemann-qiskit/issues/new) on the repository.\nIssues can be either a bug report or an enhancement proposal. Note that it is necessary to register on\nGitHub before. There is no special template which is expected but, if you raise a defect please  provide as much details as possible.\n\n- [Raise a pull request](https://github.com/pyRiemann/pyRiemann-qiskit/compare). Fork the repository and work on your own branch. Then raise a pull request with your branch against master. As much as possible, we ask you to:\n    - avoid merging master into your branch. Always prefer git rebase.\n    - always provide full documentation of public method.\n\nCode contribution (pull request) can be either on core functionalities, documentation or automation.\n\n- The core functionalies are based on `Python`, [pyRiemann](https://github.com/pyRiemann/pyRiemann), [Qiskit ML](https://github.com/Qiskit/qiskit-machine-learning) and follow the best practice from [scikit-learn](https://scikit-learn.org/stable/index.html). We use `flake8` for code formatting. `flake8` is installed with the testing dependencies (see below) or can be installed directly from `pip`:\n\n    ```\n    pip install flake8\n    ```\n\n    To execute `flake8`, just type `flake8` from the root repository, and correct all errors related to your changes.\n\n- The documentation is based on [Sphinx](https://www.sphinx-doc.org/en/master/).\n- Automation is based on `GitHub Action` and `pytest`. It consists in two automated workflows for running the example and the tests. To run the tests on your local machine, you should first install the dependencies for testing:\n\n    ```\n    pip install .[tests]\n    ```\n\n    and then type `pytest` from the root repository. You can also specify a file like:\n\n    ```\n    pytest tests/test_classification.py \n    ```\n\n    Workflows are automatically triggered when you push a commit. However, the worflow for example execution is only triggered when you modify one of the examples or the documentation as the execution take a lot of time. You can enable [Github Actions](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository) in your fork to see the result of the CI pipeline. Results are also indicated at the end of your pull request when raised. However note, that workflows in the pull request need approval from the maintainers before being executed.\n\n# Troubleshooting\n\n## Version of pyRiemann not updated\nThere is a known issue when you install `pyRiemann-qiskit` in an environement where there is already `pyRiemann` installed. In such case, the `pyRiemann` version is not updated. Therefore before installing or updating `pyRiemann-qiskit`, we recommend to install `pyRiemann` as it follows:\n\n```\npip uninstall pyriemann\npip install pyriemann@git+https://github.com/pyRiemann/pyRiemann#egg=pyriemann\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pyriemann-qiskit.readthedocs.io",
    "keywords": "",
    "license": "BSD (3-clause)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyriemann-qiskit",
    "package_url": "https://pypi.org/project/pyriemann-qiskit/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pyriemann-qiskit/",
    "project_urls": {
      "Documentation": "https://pyriemann.readthedocs.io",
      "Homepage": "https://pyriemann-qiskit.readthedocs.io",
      "Source": "https://github.com/pyRiemann/pyRiemann-qiskit",
      "Tracker": "https://github.com/pyRiemann/pyRiemann-qiskit/issues/"
    },
    "release_url": "https://pypi.org/project/pyriemann-qiskit/0.0.3/",
    "requires_dist": [
      "cython",
      "pyriemann (==0.3)",
      "qiskit-machine-learning (==0.5.0)",
      "qiskit-ibmq-provider (==0.19.2)",
      "qiskit-optimization (==0.4.0)",
      "cvxpy (==1.2.3)",
      "scipy (==1.7.3)",
      "docplex (>=2.21.207)",
      "firebase-admin (==6.0.1)",
      "tqdm",
      "sphinx-gallery ; extra == 'docs'",
      "sphinx-bootstrap-theme ; extra == 'docs'",
      "numpydoc ; extra == 'docs'",
      "mne ; extra == 'docs'",
      "seaborn ; extra == 'docs'",
      "moabb (>=0.4.6) ; extra == 'docs'",
      "pytest ; extra == 'tests'",
      "seaborn ; extra == 'tests'",
      "flake8 ; extra == 'tests'",
      "mne ; extra == 'tests'",
      "pooch ; extra == 'tests'",
      "tqdm ; extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "Qiskit wrapper for pyRiemann",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16538700,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4707e30dab30f998dd19d7d45e8914588dc76d28306be1f612abcdfa1dda944",
          "md5": "50f1e1fdea3664c1d631242e86c2fa7e",
          "sha256": "5c859aa3880ddaa67f67d481951967cd451d0a2d16e4a6ff97dbd4cba396c5ab"
        },
        "downloads": -1,
        "filename": "pyriemann_qiskit-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50f1e1fdea3664c1d631242e86c2fa7e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 24818,
        "upload_time": "2023-01-23T21:53:46",
        "upload_time_iso_8601": "2023-01-23T21:53:46.067542Z",
        "url": "https://files.pythonhosted.org/packages/a4/70/7e30dab30f998dd19d7d45e8914588dc76d28306be1f612abcdfa1dda944/pyriemann_qiskit-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b1a699034df8ca2c01a04d178fb15bb37bce421a64cc222ab4b517ec7fe163f",
          "md5": "f03936b10b910ab4af60045d091c0202",
          "sha256": "715813a00ac0e4b3ce7b15c1732a335ff4646b499687905eb3f49c91a7ef7941"
        },
        "downloads": -1,
        "filename": "pyriemann-qiskit-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f03936b10b910ab4af60045d091c0202",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24710,
        "upload_time": "2023-01-23T21:53:48",
        "upload_time_iso_8601": "2023-01-23T21:53:48.076080Z",
        "url": "https://files.pythonhosted.org/packages/9b/1a/699034df8ca2c01a04d178fb15bb37bce421a64cc222ab4b517ec7fe163f/pyriemann-qiskit-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4707e30dab30f998dd19d7d45e8914588dc76d28306be1f612abcdfa1dda944",
        "md5": "50f1e1fdea3664c1d631242e86c2fa7e",
        "sha256": "5c859aa3880ddaa67f67d481951967cd451d0a2d16e4a6ff97dbd4cba396c5ab"
      },
      "downloads": -1,
      "filename": "pyriemann_qiskit-0.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "50f1e1fdea3664c1d631242e86c2fa7e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 24818,
      "upload_time": "2023-01-23T21:53:46",
      "upload_time_iso_8601": "2023-01-23T21:53:46.067542Z",
      "url": "https://files.pythonhosted.org/packages/a4/70/7e30dab30f998dd19d7d45e8914588dc76d28306be1f612abcdfa1dda944/pyriemann_qiskit-0.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b1a699034df8ca2c01a04d178fb15bb37bce421a64cc222ab4b517ec7fe163f",
        "md5": "f03936b10b910ab4af60045d091c0202",
        "sha256": "715813a00ac0e4b3ce7b15c1732a335ff4646b499687905eb3f49c91a7ef7941"
      },
      "downloads": -1,
      "filename": "pyriemann-qiskit-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f03936b10b910ab4af60045d091c0202",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 24710,
      "upload_time": "2023-01-23T21:53:48",
      "upload_time_iso_8601": "2023-01-23T21:53:48.076080Z",
      "url": "https://files.pythonhosted.org/packages/9b/1a/699034df8ca2c01a04d178fb15bb37bce421a64cc222ab4b517ec7fe163f/pyriemann-qiskit-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}