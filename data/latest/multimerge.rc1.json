{
  "info": {
    "author": "Dennis Sweeney",
    "author_email": "sweeney.dennis650@osu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Multimerge\n\nMultimerge is a Python package that implements an algorithm for lazily\ncombining several sorted iterables into one longer sorted iterator. It\nis a drop-in replacement for `heapq.merge` in the Python standard\nlibrary.\n\n## The API (from `heapq.merge()`)\n\n```Python\ndef merge(*iterables, key=None, reverse=False):\n    '''Merge multiple sorted inputs into a single sorted output.\n\n    Similar to sorted(itertools.chain(*iterables)) but returns a generator,\n    does not pull the data into memory all at once, and assumes that each of\n    the input streams is already sorted (smallest to largest).\n\n    >>> list(merge([1,3,5,7], [0,2,4,8], [5,10,15,20], [], [25]))\n    [0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 15, 20, 25]\n\n    If *key* is not None, applies a key function to each element to determine\n    its sort order.\n\n    >>> list(merge(['dog', 'horse'], ['cat', 'fish', 'kangaroo'], key=len))\n    ['dog', 'cat', 'fish', 'horse', 'kangaroo']\n\n    '''\n    ...\n```\n\n## Comparing the Algorithms\n\n### `heapq.merge()`\n\nThe standard-library implementation of `merge`, as its location suggests,\ninvolves maintaining a heap (priority queue) data structure. In this\nalgorithm, each node of the heap stores both a unique item from an\niterator as well as the index of the iterator from which the item came.\nThis is how sort stability is maintained. At each step of the `merge`,\nthe root of the heap is yielded, then a new item from that root's source\niterator is found, which then replaces the root with a call to `heapreplace`.\n\n### `multimerge.merge()`\n\nMultimerge uses a different data structure: a linked binary tree known \nas a [\"tournament tree of winners\"](https://en.wikipedia.org/wiki/K-way_merge_algorithm#cite_ref-knuth98_3-0). It works as follows:\n\n* Each leaf node remembers a particular iterator, as well as the most\n  recent item yielded from that iterator.\n\n* Each non-leaf node stores the highest-priority value among all of its\n  descendent leaves' values, as well as which leaf that highest-priority\n  value came from.\n\n* At a typical step of the process, the root of the tree stored the\n  highest-priority value that was just yielded. To replace it, look\n  at the root's stored reference to the leaf of the item most recently\n  yielded. We will replace this leaf's value with a new value from its\n  iterator. Finally, to restore the invariant about descendent values,\n  we need to re-evaluate several \"games of the tournament\"; at each\n  ancestor of the leaf, re-evaluate which of its two children should\n  have the higher priority, then acquire that child's value and leaf\n  references. When this is complete, the value at the root is the\n  highest-priority, and can be yielded next.\n\n* When sorting values not by direct comparison but by some key function,\n  it is cheaper to only bring the keys up the tree, keeping the values\n  stored only at the leaves.\n\n* When a leaf's iterator is exhausted, it can be deleted so that its\n  sibling can be promoted, shrinking the data structure as the problem\n  reduces and maintaining the invariant that each non-leaf\n  node has exactly two children.\n\n\n## Benefits of `multimerge.merge()`\n\n* There are fewer comparisons required on average, especially in the\n  case where the input data has long runs where one particular\n  iterator should \"win\".\n\n* In the heap model, during a heapreplace call, the `(it_index, key, value)`\n  tuples are compared lexicographically. This involves identifying\n  the first place where two tuples differ, which will require evaluating\n  `key1 == key2`, followed then by evaluating `key1 < key2`. This is not\n  necessary in `multimerge.merge()`'s tournament tree approach, since\n  the order of the input iterators part of the tree structure, so\n  sort stability comes naturally.\n\nBoth of the above are demonstrated below:\n\n```Python\nclass Int(int):\n    lt = eq = 0\n    def __lt__(self, other):\n        __class__.lt += 1\n        return int.__lt__(self, other)\n\n    def __eq__(self, other):\n        __class__.eq += 1\n        return int.__eq__(self, other)\n\ndef comparisons(mergefunc, iterables):\n    Int.lt = Int.eq = 0\n    for _ in mergefunc(*iterables):\n        pass\n    return Int.lt, Int.eq\n\nno_overlap = [\n    # (0..999), (1_000..1_999), (2_000..2_999), ...\n    list(map(Int, range(x, x+1_000)))\n    for x in range(0, 16_000, 1_000)\n]\n\ninterleaved = [\n    # (0,16,32,...), (1,17,33,...), (2,18,34,...), ...\n    list(map(Int, range(x, 16_000, 16)))\n    for x in range(16)\n]\n\ndef test_merge_func(mergefunc):\n    print(\"No overlap: {:,} lt; {:,} eq\".format(\n        *comparisons(mergefunc, no_overlap)))\n    print(\"Interleaved: {:,} lt; {:,} eq\".format(\n        *comparisons(mergefunc, interleaved)))\n\nif __name__ == \"__main__\":\n    import heapq\n    print(\"======= heapq.merge ======\")\n    test_merge_func(heapq.merge)\n    print()\n\n    import multimerge\n    print(\"==== multimerge.merge ====\")\n    test_merge_func(multimerge.merge)\n    print()\n\n```\n\nResult:\n```\n======= heapq.merge ======\nNo overlap: 65,004 lt; 65,004 eq\nInterleaved: 64,004 lt; 64,004 eq\n\n==== multimerge.merge ====\nNo overlap: 32,000 lt; 0 eq\nInterleaved: 63,968 lt; 0 eq\n\n```\n\n\n* These theoretical improvements, coupled with a fast C implementation,\n  make multimerge up to 5 times faster than heapq for basic benchmarks:\n\n```\npy -m pyperf timeit -s \"from random import random; from collections import deque; from heapq import merge;  iters = [sorted(random() for j in range(10_000)) for i in range(20)]\" \"deque(merge(*iters), maxlen=0)\"\n\n    Mean +- std dev: 80.8 ms +- 5.6 ms\n\npy -m pyperf timeit -s \"from random import random; from collections import deque; from multimerge import merge;  iters = [sorted(random() for j in range(10_000)) for i in range(20)]\" \"deque(merge(*iters), maxlen=0)\"\n\n    Mean +- std dev: 17.1 ms +- 1.4 ms\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sweeneyde/multimerge",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "multimerge",
    "package_url": "https://pypi.org/project/multimerge/",
    "platform": "",
    "project_url": "https://pypi.org/project/multimerge/",
    "project_urls": {
      "Homepage": "https://github.com/sweeneyde/multimerge"
    },
    "release_url": "https://pypi.org/project/multimerge/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A faster multi-way merge algorithm interchangeable with heapq.merge",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7999937,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ba95d01a3871fd95b170bc5741a58c9d9cbe7f74d7ca9fbcd40ccf9dfedc312",
          "md5": "34a1db348cd8b676c68b45a88672ddbf",
          "sha256": "a4b70a45d23b6e7b7adbc41d9460483f7691b597c9149e5189980e73fbd8fff4"
        },
        "downloads": -1,
        "filename": "multimerge-0.1-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "34a1db348cd8b676c68b45a88672ddbf",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 12328,
        "upload_time": "2020-08-19T22:46:52",
        "upload_time_iso_8601": "2020-08-19T22:46:52.853760Z",
        "url": "https://files.pythonhosted.org/packages/9b/a9/5d01a3871fd95b170bc5741a58c9d9cbe7f74d7ca9fbcd40ccf9dfedc312/multimerge-0.1-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fd6331af7ec7cead190bf9c1a4e7eaed9aecc91b82f1dfb740ae4fb42a82acb",
          "md5": "27e5b84ab8a802f2acb6f61f3dbe3a11",
          "sha256": "e05b400315481b2c34ead7d25e309e5d9009b8c24f8a0715c4e82cc6e403d5f6"
        },
        "downloads": -1,
        "filename": "multimerge-0.1-py3.10-win32.egg",
        "has_sig": false,
        "md5_digest": "27e5b84ab8a802f2acb6f61f3dbe3a11",
        "packagetype": "bdist_egg",
        "python_version": "3.10",
        "requires_python": null,
        "size": 11295,
        "upload_time": "2020-08-19T22:46:55",
        "upload_time_iso_8601": "2020-08-19T22:46:55.138788Z",
        "url": "https://files.pythonhosted.org/packages/1f/d6/331af7ec7cead190bf9c1a4e7eaed9aecc91b82f1dfb740ae4fb42a82acb/multimerge-0.1-py3.10-win32.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7081419446c2f3c89b0670fd97b25c786b46886aa1a5ed6a574c57d82af11aae",
          "md5": "3c30f938bfd2245bbf20aad4e76dc27f",
          "sha256": "bc36a03f225441286c729d886b3cea684e278680e933d4bb617399a25837506f"
        },
        "downloads": -1,
        "filename": "multimerge-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3c30f938bfd2245bbf20aad4e76dc27f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8230,
        "upload_time": "2020-08-19T22:46:56",
        "upload_time_iso_8601": "2020-08-19T22:46:56.088850Z",
        "url": "https://files.pythonhosted.org/packages/70/81/419446c2f3c89b0670fd97b25c786b46886aa1a5ed6a574c57d82af11aae/multimerge-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ba95d01a3871fd95b170bc5741a58c9d9cbe7f74d7ca9fbcd40ccf9dfedc312",
        "md5": "34a1db348cd8b676c68b45a88672ddbf",
        "sha256": "a4b70a45d23b6e7b7adbc41d9460483f7691b597c9149e5189980e73fbd8fff4"
      },
      "downloads": -1,
      "filename": "multimerge-0.1-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "34a1db348cd8b676c68b45a88672ddbf",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 12328,
      "upload_time": "2020-08-19T22:46:52",
      "upload_time_iso_8601": "2020-08-19T22:46:52.853760Z",
      "url": "https://files.pythonhosted.org/packages/9b/a9/5d01a3871fd95b170bc5741a58c9d9cbe7f74d7ca9fbcd40ccf9dfedc312/multimerge-0.1-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1fd6331af7ec7cead190bf9c1a4e7eaed9aecc91b82f1dfb740ae4fb42a82acb",
        "md5": "27e5b84ab8a802f2acb6f61f3dbe3a11",
        "sha256": "e05b400315481b2c34ead7d25e309e5d9009b8c24f8a0715c4e82cc6e403d5f6"
      },
      "downloads": -1,
      "filename": "multimerge-0.1-py3.10-win32.egg",
      "has_sig": false,
      "md5_digest": "27e5b84ab8a802f2acb6f61f3dbe3a11",
      "packagetype": "bdist_egg",
      "python_version": "3.10",
      "requires_python": null,
      "size": 11295,
      "upload_time": "2020-08-19T22:46:55",
      "upload_time_iso_8601": "2020-08-19T22:46:55.138788Z",
      "url": "https://files.pythonhosted.org/packages/1f/d6/331af7ec7cead190bf9c1a4e7eaed9aecc91b82f1dfb740ae4fb42a82acb/multimerge-0.1-py3.10-win32.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7081419446c2f3c89b0670fd97b25c786b46886aa1a5ed6a574c57d82af11aae",
        "md5": "3c30f938bfd2245bbf20aad4e76dc27f",
        "sha256": "bc36a03f225441286c729d886b3cea684e278680e933d4bb617399a25837506f"
      },
      "downloads": -1,
      "filename": "multimerge-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3c30f938bfd2245bbf20aad4e76dc27f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8230,
      "upload_time": "2020-08-19T22:46:56",
      "upload_time_iso_8601": "2020-08-19T22:46:56.088850Z",
      "url": "https://files.pythonhosted.org/packages/70/81/419446c2f3c89b0670fd97b25c786b46886aa1a5ed6a574c57d82af11aae/multimerge-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}