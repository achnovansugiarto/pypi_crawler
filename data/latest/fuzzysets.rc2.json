{
  "info": {
    "author": "Stiliyan Dragnev",
    "author_email": "stiliyan_dragnev@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Table of Contents\n * [Triangular fuzzy numbers](#triangular-fuzzy-numbers)\n * [Fuzzy sets](#fuzzy-sets)\n * [Plotting](#plotting)\n\n# fuzzysets\n**fuzzysets** is a simple Python package that is well suited for interactive experiments with fundamental concepts in fuzzy set theory.  \n\n# Installation\nThe package is available on [PYPI](https://pypi.org/project/fuzzysets/0.0.1/) and can be installed with pip:  \n`pip install fuzzysets`  \n\n# Notation\nIn the following sections, code snippets will be highlighted `like this`. Examples involving a read-evaluate-print loop will show both the Python statement, which will be preceded by a `>>>` prompt, and its output, if any.  \n\n<a name=\"triangular-fuzzy-numbers\"></a>\n## Triangular fuzzy numbers\nOne of the concepts implemented by **fuzzysets** is a triangular fuzzy number (TFN), represented with the *TriangularFuzzyNumber* class.  \n\nEach TFN can be uniquely represented as a 3-tuple of real numbers (left, peak, right) (l, n and r below) where:\n\n - peak is the number whose membership degree is 1, that is, the number being modeled\n - left (< peak) and right (> peak) determine the fuzzy number's membership function:\n    - mu(x) = 0, x âˆˆ (-inf, l) U (r, +inf)\n    - mu(x) = (x - l) / (n - l), l <= x <= n\n    - mu(x) = (r - x) / (r - n), n <= x <= r\n\nThe TriangularFuzzyNumber class offers a more complex abstraction than that.  \n\nWe first need to import the **fuzzysets** package:  \n`>>> import fuzzysets as fs`  \n\nThe class is available through an alias - TFN. The default value of the class is 0:  \n`>>> fs.TFN()`  \n`TriangularFuzzyNumber(l=-1.0, n=0.0, r=1.0)`  \n\nAs you can see, the *left* and *right* properties are offset by 1 by default. We could create a TFN that models any number like this: \n`>>> fs.TFN(11.5)`  \n`TriangularFuzzyNumber(l=10.5, n=11.5, r=12.5)`  \n\nIt is also possible to set one or both of the other properties:  \n`>>> fs.TFN(10, r=12.8)`  \n`TriangularFuzzyNumber(l=9.0, n=10.0, r=12.8)`  \n\n`>>> fs.TFN(10.6, 8, 12)`  \n`TriangularFuzzyNumber(l=8.0, n=10.6, r=12.0)`  \n\nSince the order of the arguments may seem a bit odd, a TFN can also be created from a tuple:  \n`>>> tfn = fs.TFN.from_tuple((0, 1, 2.5))`  \n`>>> tfn`  \n`TriangularFuzzyNumber(l=0.0, n=1.0, r=2.5)`  \n\nWe can call the membership function of the TFN like this:  \n`>>> tfn.mu(-1)`  \n`0`  \n`>>> tfn.mu(0.5)`  \n`0.5`  \n`>>> tfn.mu(1)`  \n`1.0`  \n`>>> tfn.mu(2.)`  \n`0.3333333333333333`  \n\nArithmetic operations on TFNs can be done with the corresponding operators:  \n`>>> n = tfn.from_tuple((1, 2, 4))`  \n`>>> m = tfn.from_tuple((2, 4, 6))`  \n`>>> n + m`  \n`TriangularFuzzyNumber(l=3.0, n=6.0, r=10.0)`  \n`>>> n - m`  \n`TriangularFuzzyNumber(l=-5.0, n=-2.0, r=2.0)`  \n`>>> n * m`  \n`TriangularFuzzyNumber(l=2.0, n=8.0, r=24.0)`  \n`>>> n / m`  \n`TriangularFuzzyNumber(l=0.16666666666666666, n=0.5, r=2.0)`  \n`>>> -n`  \n`TriangularFuzzyNumber(l=-4.0, n=-2.0, r=-1.0)`  \n\nThere are also predicates for (proper) subset and equality tests:  \n`>>> fs.TFN.from_tuple((1.2, 2, 4)) < fs.TFN.from_tuple((1, 2, 4))`  \n`True`  \n`>>> n <= n`  \n`True`  \n`>>> m > m`  \n`False`  \n`>>> fs.TFN.from_tuple((1, 2, 3)) >= fs.TFN.from_tuple((1, 2.1, 3))`  \n`False`  \n`>>> n == n`  \n`True`  \n`>>> n != m`  \n`True`  \n\nWe can also obtain the alpha cut of a TFN:  \n`>>> n`  \n`TriangularFuzzyNumber(l=1.0, n=2.0, r=4.0)`  \n`>>> n.alpha_cut`  \n`AlphaCut(1.0 + alpha * 1.0, 4.0 + alpha * -2.0)`  \n\nIt can be converted to a more user-friendly string than the one above and can compute the interval for a fixed alpha:  \n`>>> cut = n.alpha_cut`  \n`>>> str(cut)`  \n`'[1.0 + alpha * 1.0, 4.0 + alpha * -2.0]'`  \n`>>> cut.for_alpha(0.5)`  \n`(1.5, 3.0)`  \n\nTFNs are also hashable which means that we can store them in sets or use them as mapping keys:  \n`>>> {fs.TFN(i) for i in range(2)}`  \n`{TriangularFuzzyNumber(l=0.0, n=1.0, r=2.0), TriangularFuzzyNumber(l=-1.0, n=0.0, r=1.0)}`  \n`>>> mapping = {fs.TFN(): \"zero\", fs.TFN(1): \"one\"}`  \n`>>> mapping`  \n`{TriangularFuzzyNumber(l=-1.0, n=0.0, r=1.0): 'zero', TriangularFuzzyNumber(l=0.0, n=1.0, r=2.0): 'one'}`  \n\nWe can also obtain the basic attributes of a TFN:  \n`>>> n`  \n`TriangularFuzzyNumber(l=1.0, n=2.0, r=4.0)`  \n`>>> n.left`  \n`1.0`  \n`>>> n.peak`  \n`2.0`  \n`>>> n.right`  \n`4.0`  \n\nTFNs are also iterable, their attributes are yielded in order from left to right. This means that we can unpack them just like tuples: \n`>>> a, b, c = n`  \n`>>> a`  \n`1.0`  \n`>>> b`  \n`2.0`  \n`>>> c`  \n`4.0`  \n\n<a name=\"fuzzy-sets\"></a>\n## Fuzzy sets\nAnother concept implemented in **fuzzysets** is a fuzzy set! But first, lets start with their domains.  \n\n### Domains\nThere are two types of domains - ones for finite and continuous membership functions. Let's start with finite ones.  \n\nThey are represented with the *FiniteDomain* class. It can be created from any iterable of hashable items, like a list of string or numeric values:  \n`>>> fs.FiniteDomain([\"a\", \"b\", \"c\"])`  \n`FiniteDomain({'b', 'c', 'a'})`  \n\nAs you can see, it is not ordered. It is iterable, however, and each time you iterate it, you get its elements in the exact same order. We can iterate it in a `for` loop of create a list from it:  \n`>>> domain = fs.FiniteDomain([\"a\", \"b\", \"c\"])`  \n`>>> list(domain)`  \n`['b', 'c', 'a']`  \n\nWe can also check whether a value is within it or whether it is equal to another domain:  \n`>>> \"d\" in domain`  \n`False`  \n`>>> \"z\" not in domain`  \n`True`  \n`>>> fs.FiniteDomain([\"a\"]) == fs.FiniteDomain([\"c\"])`  \n`False`  \n\nContinuous domains are very similar, but they represent a range of real numbers: [start, end]. Since a domain may need to be iterated, we would need to approximate the iteration with a finitely small step:  \n`>>> fs.ContinuousDomain(0.0, 1.0)`   \n`ContinuousDomain(start=0.0, end=1.0, step=0.1)`  \n\nAs you can see the step defaults to 0.1, but we can pick it too:  \n`>>> domain = fs.ContinuousDomain(0.0, 1.0, 0.2)`  \n`>>> domain`  \n`ContinuousDomain(start=0.0, end=1.0, step=0.2)`  \n\nAgain, we can iterate a domain, check whether something is within it and check whether it is equal to another domain (the equality test does not consider the step):  \n`>>> list(domain)`  \n`[0.0, 0.2, 0.4, 0.6000000000000001, 0.8, 1.0]`  \n`>>> -1 in domain`  \n`False`  \n`>>> fs.ContinuousDomain(1., 2., 0.0001) == fs.ContinuousDomain(1., 2., 0.1)`  \n`True`  \n\n### Sets\nWith domains out of the way, we can finally look at fuzzy sets. Let's start with finite ones again.  \n\nFinite fuzzy sets are represented by the *FiniteFuzzySet* class, it can be created from any mapping whose keys are the elements of the set and whose values are their corresponding membership degrees:  \n`>>> s = fs.FiniteFuzzySet({\"a\": 0.0, \"b\": 0.5, \"c\": 1.0})`  \n`>>> s`  \n`FiniteFuzzySet(FiniteDomain({'b', 'c', 'a'}))`  \n\nWe can convert the set into a string in the commonly used format:  \n`>>> str(s)`  \n`'b/0.50 + c/1.00 + a/0.00'`  \n\nWe can also obtain the membership degree of an element, defaulting to 0 for elements which are not part of the domain:  \n`>>> s.mu(\"b\")`  \n`0.5`  \n`>>> s.mu(\"z\")`  \n`0.0`  \n\nWe can obtain the set's domain:  \n`>>> s.domain`  \n`FiniteDomain({'b', 'c', 'a'})`  \n\nIts range is also available but as a generator so, unless we want to iterate it, we have to convert it to a collection (like a list):  \n`>>> list(s.range)`  \n`[0.5, 1.0, 0.0]`  \n`>>> for d in s.range: print(d)`   \n`0.5`  \n`1.0`  \n`0.0`  \n\nWe can also iterate over the domain elements and their degrees at the same time by iterating the set itself:  \n`>>> for x, d in s: print(x, d)`  \n`b 0.5`  \n`c 1.0`  \n`a 0.0`  \n\nFuzzy sets also have properties for core, support, cross over points and height (the first three return immutable sets):  \n`>>> str(s)`  \n`'b/0.50 + c/1.00 + a/0.00'`  \n`>>> s.core`  \n`frozenset({'c'})`  \n`>>> s.support`  \n`frozenset({'b', 'c'})`  \n`>>> s.cross_over_points`  \n`frozenset({'b'})`\n`>>> s.height`  \n`1.0`  \n\nThe alpha cut method of fuzzy sets returns a (mutable) set:  \n`>>> s.alpha_cut(0.4)`  \n`{'b', 'c'}`  \n\nThere are also predicates for (proper) subset and equality tests:  \n`>>> fs.FiniteFuzzySet({\"a\": 0.1, \"b\": 0.2}) < fs.FiniteFuzzySet({\"a\": 0.1, \"b\": 0.3})`  \n`True`  \n`>>> fs.FiniteFuzzySet({\"a\": 0.1, \"b\": 0.2}) >= fs.FiniteFuzzySet({\"a\": 0.1})`  \n`False`  \n`>>> s == s`  \n`True`  \n`>>> fs.FiniteFuzzySet({\"a\": 0.1, \"b\": 0.2}) != fs.FiniteFuzzySet({\"a\": 0.1, \"b\": 0.3})`  \n`True`  \n`>>> fs.FiniteFuzzySet({\"a\": 0.1, \"b\": 0.2}) == fs.FiniteFuzzySet({\"a\": 0.1})`  \n`False`  \n\nWe can also obtain the t-norm, s-norm and complement of fuzzy sets. This is possible via invoking methods like this:  \n`a.t_norm(b)`  \n`b.s_norm(c)`  \n`c.complement()`  \n\nIt is also possible to do this via a function, these are equivalent:  \n`fs.t_norm(a, b)` and `a.t_norm(b)`  \n`fs.s_norm(a, b)` and `a.s_norm(b)`  \n`fs.complement(c)` and `c.complement`  \n\nLet's take a look at a few examples:\n`>>> a = fs.FiniteFuzzySet({\"a\": 0, \"b\": 0.5, \"c\": 1.})`  \n`>>> b = fs.FiniteFuzzySet({\"a\": 0.1, \"b\": 0.4, \"c\": 0.7})`\n`>>> t_norm = fs.t_norm(a, b)`  \n`>>> str(t_norm)`  \n`'a/0.00 + b/0.40 + c/0.70'`  \n`>>> s_norm = fs.s_norm(a, b)`  \n`>>> str(s_norm)`  \n`'a/0.10 + b/0.50 + c/1.00'`  \n`>>> complement = fs.complement(a)`  \n`>>> str(complement)`  \n`'a/1.00 + b/0.50 + c/0.00'`  \n\nAs you can see, these default to min, max and *1 - x* but we can pick the norm too. We can pass in any callable to do the point-wise operations. For example, we can define a function or pass in an anonymous function:  \n`>>> str(a)`  \n`'b/0.50 + c/1.00 + a/0.00'`  \n`>>> str(b)`  \n`'b/0.40 + c/0.70 + a/0.10'`  \n`>>> s_norm = fs.s_norm(a, b, lambda x, y: x * y)`  \n`>>> str(s_norm)`  \n`'a/0.00 + b/0.20 + c/0.70'`  \n`>>> def probabilistic_t_norm(a, b):`  \n`        >>> return a + b - a * b`  \n`>>> t_norm = fs.t_norm(a, b, probabilistic_t_norm)`  \n`>>> str(t_norm)`  \n`'a/0.10 + b/0.70 + c/1.00'`  \n\nWe can do that with methods too:  \n`>>> str(a.complement(lambda x: 1.0 - x))`  \n`'a/1.00 + b/0.50 + c/0.00'`  \n\nAnother method that is also available as a function is the one for alpha cuts:  \n`>>> fs.alpha_cut(a, alpha=0.1)`  \n`{'b', 'c'}`  \n\nThe other type of available fuzzy sets is that of fuzzy sets whose domains are intervals of real numbers. These are represented by the *ContinuousFuzzySet* class.  \n\nIn order to create such a set, we need to specify its domain and supply a callable that computes the membership degree whenever given a number in the domain. Again, this callable can be a function or an anonymous function:  \n`>>> domain = fs.ContinuousDomain(1.0, 5.0, step=0.5)`  \n`>>> s = fs.ContinuousFuzzySet(domain, mu=lambda x: 1.0 / x)`  \n`>>> s`  \n`ContinuousFuzzySet(ContinuousDomain(start=1.0, end=5.0, step=0.5))`  \n`>>> str(s)`  \n`'1.0/1.00 + 1.5/0.67 + 2.0/0.50 + 2.5/0.40 + 3.0/0.33 + 3.5/0.29 + 4.0/0.25 + 4.5/0.22 + 5.0/0.20'`  \n\nEverything else is just like with finite fuzzy sets. The only thing to note is that whenever we're operating on two continuous fuzzy sets with the same domain but with different steps, then the smaller of the two steps is used:  \n`>>> s.mu(0.5)`  \n`0.0`  \n`>>> s.mu(1)`  \n`1.0`  \n`>>> s.domain`  \n`ContinuousDomain(start=1.0, end=5.0, step=0.5)`  \n`>>> set(s.range)`  \n`{0.6666666666666666, 1.0, 0.3333333333333333, 0.5, 0.4, 0.2857142857142857, 0.25, 0.2222222222222222, 0.2}`  \n`>>> s.core`  \n`frozenset({1.0})`  \n`>>> s.alpha_cut(0.65)`  \n`{1.0, 1.5}`  \n`>>> s.domain`  \n`ContinuousDomain(start=1.0, end=5.0, step=0.5)`  \n`>>> s == fs.ContinuousFuzzySet(fs.ContinuousDomain(1.0, 5.0, step=0.1), mu=lambda x: 1.0 / x)`  \n`True`  \n`>>> s < s`  \n`False`  \n`>>> s >= s`  \n`True`  \n`>>> fs.t_norm(s, s) == s`  \n`True`  \n`>>> fs.s_norm(s, s) == s`  \n`True`  \n\n<a name=\"plotting\"></a>\n## Plotting\nThe things discussed above wouldn't be of much use if there was not any way to plot fuzzy sets. That's why **fuzzysets** provides a few functions for plotting fuzzy sets and results of operations on them.\n\nThe first one is *plot_fuzzy_set* which plots a finite or continuous fuzzy set:  \n\n`>>> finite_set = fs.FiniteFuzzySet({\"a\": 0.3, \"b\": 0.37, \"c\": 0.86, \"d\": 0.4})`  \n\n`>>> fs.plot_fuzzy_set(finite_set)`  \n![finite_set](docs/finite_fuzzy_set.png)  \n\nWe can also set the title, x label or y label (as well as all of them):  \n`>>> continuous_set = fs.ContinuousFuzzySet(fs.ContinuousDomain(1., 6.), mu=lambda x: 1 / (x ** 2))`  \n`>>> fs.plot_fuzzy_set(continuous_set, title=\"Very young kid\", x_label=\"Years\")`  \n![continuous_set](docs/continuous_fuzzy_set.png)  \n\nThe next plotting function is *plot_fuzzy_set_operations* which takes two fuzzy sets with equal domains and plots their complements, t-norm and s-norm:  \n`>>> young_kid = fs.ContinuousFuzzySet(fs.ContinuousDomain(1., 6.), mu=lambda x: 1 / (x ** 2))`  \n`>>> speaking_ability = fs.ContinuousFuzzySet(young_kid.domain, mu=lambda x: x / 10.0)`  \n`>>> fs.plot_fuzzy_set_operations(young_kid, speaking_ability)`  ![operations](docs/operations.png)  \n\nAs you can, see the default names given to sets are not very informative but we can change them. We can also change the point-wise norms, just like with calls to `t_norm` and `s_norm`:  \n`>>> fs.plot_fuzzy_set_operations(`  \n `        young_kid,`  \n`        speaking_ability,`  \n`        a_name=\"Young kid\",`  \n`        b_name=\"Speaking ability\",`  \n`        t_norm=lambda x, y: x * y,`  \n`        s_norm=lambda x, y: x + y - x * y,`  \n`        comp=lambda x: 1.0 - x`  \n`)`  \n<img src=\"docs/named_operations.png\" alt=\"named_operations\" style=\"zoom:150%;\" />  \n\nWe can also plot TFNs, this is done via the *plot_tfn* function:  \n`>>> around_two = fs.TFN(2)`  \n`>>> fs.plot_tfn(around_two, name=\"Around 2\")`  \n![TFN](docs/TFN.png)  \nThe `name` argument which we set to `\"Around 2\"` above is optional, if we omit it, it will default to `\"A\"`.  \n\nThe last function is *plot_tfn_operations* which reads two TFNs as input and plots the results of their addition, subtraction, multiplication and division. The two TFNs' domains are subsets of [1, 10] and the TFNs are named 'A' and 'B' by default, but we can change any or all of these:  \n`>>> fs.plot_tfn_operations(first_name=\"S\", second_name=\"T\", x_lim=(2.0, 11.0))`  \n\nFirst we have to click to start the definition of the first TFN:  \n![click_prompt](docs/click_prompt.png)  \n\nThen we pick the corners of the TFN with mouse clicks:  \n![selecting_corners](docs/selecting_corners.png)  \n\nWe need to confirm we are happy with the defined TFN:  \n![confirmation_prompt](docs/confirmation_prompt.png)  \n\nThen we have to click to start the definition of the second TFN:  \n![second_click_prompt](docs/second_click_prompt.png)  \n\nFinally, after confirming we are happy with the second TFN, we are shown the two TFNs and the results of the operations:   \n![TFNs](docs/TFNs.png)  \n![TFN_plots](docs/TFN_plots.png)  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/StiliyanDr/fuzzy-sets",
    "keywords": "fuzzy,set,number",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fuzzysets",
    "package_url": "https://pypi.org/project/fuzzysets/",
    "platform": "",
    "project_url": "https://pypi.org/project/fuzzysets/",
    "project_urls": {
      "Homepage": "https://github.com/StiliyanDr/fuzzy-sets"
    },
    "release_url": "https://pypi.org/project/fuzzysets/0.0.2/",
    "requires_dist": [
      "numpy",
      "matplotlib"
    ],
    "requires_python": ">=3.6",
    "summary": "A package for interactive experiments with fuzzy set theory concepts.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9464574,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc54749c50d83d95513922c406f26b8083a8fcf3889469a3217462df2d1e30a0",
          "md5": "6a536639d02d0d69d6842b75d64fe6de",
          "sha256": "4200c11ff521a7bca5234a1f2601a3148744e2830e598344f460401ec3354927"
        },
        "downloads": -1,
        "filename": "fuzzysets-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a536639d02d0d69d6842b75d64fe6de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17611,
        "upload_time": "2021-02-18T21:32:08",
        "upload_time_iso_8601": "2021-02-18T21:32:08.185351Z",
        "url": "https://files.pythonhosted.org/packages/dc/54/749c50d83d95513922c406f26b8083a8fcf3889469a3217462df2d1e30a0/fuzzysets-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "075e3b68d5a9963b9d0e34a1831d00c125503347c60896735d8dbce4f5d54d7b",
          "md5": "aade36bd4518eab79e05b8822ff4a2ae",
          "sha256": "2b7cbf41f72ea4860149a240efbc8cbaeab5b2cc881742174896473f42e4c48a"
        },
        "downloads": -1,
        "filename": "fuzzysets-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aade36bd4518eab79e05b8822ff4a2ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14891,
        "upload_time": "2021-02-18T21:32:09",
        "upload_time_iso_8601": "2021-02-18T21:32:09.490156Z",
        "url": "https://files.pythonhosted.org/packages/07/5e/3b68d5a9963b9d0e34a1831d00c125503347c60896735d8dbce4f5d54d7b/fuzzysets-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4f3bbeb61635f9f1369fdce96851579dcb3ad2de9af601d254afd1f86623b00",
          "md5": "cc2a028d907e68d8413947ea9a8f68f9",
          "sha256": "3fabd612cd2b220b04e0d1133e5f22900a36a505defc4bffeb5314be7c974f4b"
        },
        "downloads": -1,
        "filename": "fuzzysets-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc2a028d907e68d8413947ea9a8f68f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17696,
        "upload_time": "2021-02-19T10:44:03",
        "upload_time_iso_8601": "2021-02-19T10:44:03.381077Z",
        "url": "https://files.pythonhosted.org/packages/a4/f3/bbeb61635f9f1369fdce96851579dcb3ad2de9af601d254afd1f86623b00/fuzzysets-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46f468a9cbf218f95eb00c19e8d0c15e3c252fcfad8207335ce0cc523e8f654c",
          "md5": "446db2b33fc296b7cb9c9f8186228be9",
          "sha256": "27520a01097b440a846df0aa5e0153b72e4561f44350206758000f5033d65275"
        },
        "downloads": -1,
        "filename": "fuzzysets-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "446db2b33fc296b7cb9c9f8186228be9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15021,
        "upload_time": "2021-02-19T10:44:04",
        "upload_time_iso_8601": "2021-02-19T10:44:04.561049Z",
        "url": "https://files.pythonhosted.org/packages/46/f4/68a9cbf218f95eb00c19e8d0c15e3c252fcfad8207335ce0cc523e8f654c/fuzzysets-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4f3bbeb61635f9f1369fdce96851579dcb3ad2de9af601d254afd1f86623b00",
        "md5": "cc2a028d907e68d8413947ea9a8f68f9",
        "sha256": "3fabd612cd2b220b04e0d1133e5f22900a36a505defc4bffeb5314be7c974f4b"
      },
      "downloads": -1,
      "filename": "fuzzysets-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cc2a028d907e68d8413947ea9a8f68f9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17696,
      "upload_time": "2021-02-19T10:44:03",
      "upload_time_iso_8601": "2021-02-19T10:44:03.381077Z",
      "url": "https://files.pythonhosted.org/packages/a4/f3/bbeb61635f9f1369fdce96851579dcb3ad2de9af601d254afd1f86623b00/fuzzysets-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46f468a9cbf218f95eb00c19e8d0c15e3c252fcfad8207335ce0cc523e8f654c",
        "md5": "446db2b33fc296b7cb9c9f8186228be9",
        "sha256": "27520a01097b440a846df0aa5e0153b72e4561f44350206758000f5033d65275"
      },
      "downloads": -1,
      "filename": "fuzzysets-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "446db2b33fc296b7cb9c9f8186228be9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15021,
      "upload_time": "2021-02-19T10:44:04",
      "upload_time_iso_8601": "2021-02-19T10:44:04.561049Z",
      "url": "https://files.pythonhosted.org/packages/46/f4/68a9cbf218f95eb00c19e8d0c15e3c252fcfad8207335ce0cc523e8f654c/fuzzysets-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}