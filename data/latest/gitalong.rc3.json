{
  "info": {
    "author": "Douglas Lassance",
    "author_email": "douglassance@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# gitalong\n\n[![PyPI version](https://badge.fury.io/py/gitalong.svg)](https://badge.fury.io/py/gitalong)\n[![Documentation Status](https://readthedocs.org/projects/gitalong/badge/?version=latest)](https://gitalong.readthedocs.io/en/latest)\n[![codecov](https://codecov.io/gh/douglaslassance/gitalong/branch/main/graph/badge.svg?token=5267NA3EQQ)](https://codecov.io/gh/douglaslassance/gitalong)\n\nGitalong is a tool for Git repositories that seek to prevent conflicts between files when working with a team.\nIt uses hooks and a dedicated repository to communicate local changes across all clones of a given remote.\nIn turns this information can be leveraged by integrations to prevent modifying file that are already changed elsewhere.\n\n## Pre-requisites\n\n-   [Python >=3.7](https://www.python.org/downloads/)\n-   [Git >=2.35.1](https://git-scm.com/downloads)\n\n## Installation\n\n```\npip install gitalong\n```\n\n## Usage\n\n### Shell\n\n```shell\n# Creating a dummy project repository and its clone in current working directory.\ngit init --bare project.git\ngit clone project.git project\n\n# Creating a repository that Gitalong will use to store and share local changes.\n# You would normally host this somewhere like GitHub so your entire team has access to it.\ngit init --bare store.git\n\n# Setting up Gitalong in your project repository.\n# This will clone the store repository in an ignored `.gitalong` folder.\n# It will also start tracking a `.gitalong.json` configuration file.\ngitalong -C project setup store.git --modify-permissions --tracked-extensions .jpg,.gif,.png --track-uncommitted --update-gitignore --update-hooks\n\n# Creating some files.\ntouch project/uncommitted.png\ntouch project/local.gif\ntouch project/remote.jpg\ntouch project/untracked.txt\n\n# Spreading them across branches.\ngit -C project add untracked.txt\ngit -C project commit -m \"Add untracked.txt\"\ngit -C project add remote.jpg\ngit -C project commit -m \"Add remote.jpg\"\ngit -C project push\ngit -C project reset --hard HEAD^\ngit -C project add local.gif\ngit -C project commit -m \"Add local.gif\"\n\n# Updating tracked commits with current local changes.\n# Because we specified `track_uncommitted`. Uncommitted changes will be stored as sha-less commit.\n# Update permissions of all files based on track commits.\n# Because `modify_permssions` was passed this will update all permissions of tracked files.\n# Permission updates currently comes at high performance cost and is not recommended.\ngitalong -C project update\n\n# Checking the status for the files we created.\n# Each status will show <spread> <filename> <commit> <local-branches> <remote-branches> <host> <author>.\n# Spread flags represent where the commit live.\n# It will be displayed in the following order:\n# <local-uncommitted><local-active-branch><local-other-branch><remote-matching-branch><remote-other-branch><clone-other-branch><clone-matching-branch><clone-uncomitted>\n# A `+` sign means is true, while a `-` sign means false or unknown.\ngitalong -C project status uncommited.jpg local.gif remote.jpg untracked.txt\n\n# If you installed with `--modify-permissions` this will try to make the files writable.\n# The command will return and error code of 1 if one ore more of the files cannot be made writable.\ngitalong -C project claim uncommited.jpg local.gif remote.jpg untracked.txt\n```\n\n### Python\n\n```python\nimport os\nimport tempfile\nimport logging\n\nfrom git.repo import Repo\nfrom gitalong import Repository, RepositoryNotSetup, CommitSpread\n\n\ndef test_example():\n    \"\"\"Testing example code featured in README.md.\"\"\"\n    dirname = tempfile.mkdtemp()\n    logging.info(dirname)\n\n    # Creating a dummy project repository and its clone in temp directory.\n    project = Repo.init(path=os.path.join(dirname, \"project.git\"), bare=True)\n    project_clone = project.clone(os.path.join(dirname, \"project\"))\n\n    try:\n        # This will raise as we never setup that repository with Gitalong.\n        repository = Repository(project_clone.working_dir)\n\n    except RepositoryNotSetup:\n\n        # Creating a repository that Gitalong will use to store and share local changes.\n        # You would normally host this somewhere like GitHub so your entire team has\n        # access to it.\n        store = Repo.init(path=os.path.join(dirname, \"store.git\"), bare=True)\n\n        # Setting up Gitalong in your project repository.\n        # This will clone the registry repository in an ignored `.gitalong` folder.\n        # It will also start tracking a `.gitalong.json` configuration file.\n        repository = Repository.setup(\n            store_repository=store.working_dir,\n            managed_repository=project_clone.working_dir,\n            modify_permissions=True,\n            tracked_extensions=[\".jpg\", \".gif\", \".png\"],\n            track_uncommitted=True,\n            update_gitignore=True,\n            # Skipping hook update for the test.\n            update_hooks=False,\n        )\n\n    # Creating some files.\n    open(os.path.join(project_clone.working_dir, \"uncommitted.png\"), \"w\").close()\n    open(os.path.join(project_clone.working_dir, \"local.gif\"), \"w\").close()\n    open(os.path.join(project_clone.working_dir, \"remote.jpg\"), \"w\").close()\n    open(os.path.join(project_clone.working_dir, \"untracked.txt\"), \"w\").close()\n\n    # Spreading them across branches.\n    project_clone.index.add(\"untracked.txt\")\n    project_clone.index.commit(message=\"Add untracked.txt\")\n    project_clone.index.add(\"remote.jpg\")\n    project_clone.index.commit(message=\"Add remote.jpg\")\n    project_clone.remote().push()\n    project_clone.git.reset(\"--hard\", \"HEAD^\")\n    project_clone.index.add(\"local.gif\")\n    project_clone.index.commit(message=\"Add local.gif\")\n\n    # Updating tracked commits with current local changes. Because we specified\n    # `track_uncommitted`. Uncommitted changes will be stored as sha-less commit.\n    repository.update_tracked_commits()\n\n    # Update permissions of all files based on track commits. Because\n    # `modify_permssions` was passed this will update all permissions of tracked files.\n    # Permission updates currently comes at high performance cost and is not\n    # recommended.\n    locally_changed_files = repository.locally_changed_files\n    for filename in repository.files:\n        repository.update_file_permissions(filename, locally_changed_files)\n\n    # Now we'll get the last commit for our files.\n    # This could return a dummy commit representing uncommitted changes.\n    uncommitted_last_commit = repository.get_file_last_commit(\"uncommitted.png\")\n    local_last_commit = repository.get_file_last_commit(\"local.gif\")\n    remote_last_commit = repository.get_file_last_commit(\"remote.jpg\")\n    untracked_last_commit = repository.get_file_last_commit(\"untracked.txt\")\n\n    # Getting the commit spreads.\n    # Spread flags represent where the commit live.\n    uncommitted_spread = repository.get_commit_spread(uncommitted_last_commit)\n    local_spread = repository.get_commit_spread(local_last_commit)\n    remote_spread = repository.get_commit_spread(remote_last_commit)\n    untracked_spread = repository.get_commit_spread(untracked_last_commit)\n\n    assert uncommitted_spread == CommitSpread.MINE_UNCOMMITTED\n    assert local_spread == CommitSpread.MINE_ACTIVE_BRANCH\n    assert remote_spread == CommitSpread.REMOTE_MATCHING_BRANCH\n    assert untracked_spread == (\n        CommitSpread.REMOTE_MATCHING_BRANCH | CommitSpread.MINE_ACTIVE_BRANCH\n    )\n\n    # Trying to make the files writable.\n    assert bool(repository.make_file_writable(\"uncommitted.png\")) is False\n    assert bool(repository.make_file_writable(\"local.gif\")) is False\n    assert bool(repository.make_file_writable(\"remote.jpg\")) is True\n    assert bool(repository.make_file_writable(\"untracked.txt\")) is False\n\n\nif __name__ == \"__main__\":\n    test_example()\n\n```\n\n# Development\n\nThis projects requires the following:\n\n-   [Python >=3.7](https://www.python.org/downloads/)\n-   [virtualenwrapper](https://pypi.org/project/virtualenvwrapper/) (macOS/Linux)\n-   [virtualenwrapper-win](https://pypi.org/project/virtualenvwrapper-win/) (Windows)\n\nMake sure your `WORKON_HOME` environment variable is set on Windows, and create a `gitalong` virtual environment with `mkvirtualenv`.\nBuild systems for installing requirements and running tests are on board of the SublimeText project.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/douglaslassance/gitalong-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gitalong",
    "package_url": "https://pypi.org/project/gitalong/",
    "platform": null,
    "project_url": "https://pypi.org/project/gitalong/",
    "project_urls": {
      "Homepage": "https://github.com/douglaslassance/gitalong-python"
    },
    "release_url": "https://pypi.org/project/gitalong/0.1.0.dev5/",
    "requires_dist": [
      "click (~=8.0)",
      "GitPython (~=3.1)",
      "dictdiffer (~=0.9)",
      "black ; extra == 'ci'",
      "click (~=8.0) ; extra == 'ci'",
      "flake8-print (~=3.1) ; extra == 'ci'",
      "flake8 (~=3.9) ; extra == 'ci'",
      "pep8-naming (~=0.11) ; extra == 'ci'",
      "Pillow (~=8.4) ; extra == 'ci'",
      "pylint (~=2.9) ; extra == 'ci'",
      "pytest-cov (~=2.12) ; extra == 'ci'",
      "pytest-html (~=2.1) ; extra == 'ci'",
      "pytest-pep8 (~=1.0) ; extra == 'ci'",
      "pytest-profiling (~=1.7) ; extra == 'ci'",
      "sphinx-markdown-tables (~=0.0) ; extra == 'ci'",
      "sphinx-rtd-theme (~=0.5) ; extra == 'ci'",
      "sphinxcontrib-apidoc (~=0.3) ; extra == 'ci'",
      "Sphinx (~=4.5) ; extra == 'ci'"
    ],
    "requires_python": "",
    "summary": "Git without conflicts.",
    "version": "0.1.0.dev5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13353823,
  "releases": {
    "0.1.0.dev3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ef5d6b3fd4e38815ca7bd2d2c0c61fec1406d55063bdf48ce63e985da761976",
          "md5": "8833794103cd42970fece9f31844434e",
          "sha256": "5b63996efcaf11b133e771f9069891b6aa2656459c96a5c5aeb55226a78198e2"
        },
        "downloads": -1,
        "filename": "gitalong-0.1.0.dev3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8833794103cd42970fece9f31844434e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17539,
        "upload_time": "2022-03-29T07:58:12",
        "upload_time_iso_8601": "2022-03-29T07:58:12.704614Z",
        "url": "https://files.pythonhosted.org/packages/6e/f5/d6b3fd4e38815ca7bd2d2c0c61fec1406d55063bdf48ce63e985da761976/gitalong-0.1.0.dev3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fe7d393efbbcfd9f764debad3b140a1e98dce06ad32d60ba3f3dd24c85c6cdd",
          "md5": "965e7e937b2b7db4b4bbad68ea663284",
          "sha256": "7f2d8a25944989ac25dfab39c47945c864d50c25263a35490496684126897efb"
        },
        "downloads": -1,
        "filename": "gitalong-0.1.0.dev3.tar.gz",
        "has_sig": false,
        "md5_digest": "965e7e937b2b7db4b4bbad68ea663284",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17506,
        "upload_time": "2022-03-29T07:58:14",
        "upload_time_iso_8601": "2022-03-29T07:58:14.311313Z",
        "url": "https://files.pythonhosted.org/packages/8f/e7/d393efbbcfd9f764debad3b140a1e98dce06ad32d60ba3f3dd24c85c6cdd/gitalong-0.1.0.dev3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.dev4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a33866ef5507ad1b506db6626a22fb5e475919e667a920c88ea8b231b7ae0ffa",
          "md5": "16189dd9798028c461e06e1ac4283baa",
          "sha256": "7c23105c6c94b97ecf1af238ded8b2a8ec2d1237d6b6a4f6269f46e6731ba032"
        },
        "downloads": -1,
        "filename": "gitalong-0.1.0.dev4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16189dd9798028c461e06e1ac4283baa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17527,
        "upload_time": "2022-03-29T09:01:45",
        "upload_time_iso_8601": "2022-03-29T09:01:45.340571Z",
        "url": "https://files.pythonhosted.org/packages/a3/38/66ef5507ad1b506db6626a22fb5e475919e667a920c88ea8b231b7ae0ffa/gitalong-0.1.0.dev4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ad682baf26585a05d9cbcae8b964d73651d6b11f8ecac57a46dbec79786c500",
          "md5": "4570bdd7ad31782479f73786301f0987",
          "sha256": "2bf247830a36e9f07b1ca7515add989f4039aa5dd02f42a0af0a2c643392340e"
        },
        "downloads": -1,
        "filename": "gitalong-0.1.0.dev4.tar.gz",
        "has_sig": false,
        "md5_digest": "4570bdd7ad31782479f73786301f0987",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17509,
        "upload_time": "2022-03-29T09:01:46",
        "upload_time_iso_8601": "2022-03-29T09:01:46.807462Z",
        "url": "https://files.pythonhosted.org/packages/7a/d6/82baf26585a05d9cbcae8b964d73651d6b11f8ecac57a46dbec79786c500/gitalong-0.1.0.dev4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.dev5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64a4731de2c9ae0fc55e22faaf869ff0465a22999858de66c99e0dd0ee0974e1",
          "md5": "7871b130d4512d55822a7d5409e6f755",
          "sha256": "81237d00a1e2c57f2e52676eb3e47d45c854c132a001b87884740838c52cd430"
        },
        "downloads": -1,
        "filename": "gitalong-0.1.0.dev5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7871b130d4512d55822a7d5409e6f755",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17545,
        "upload_time": "2022-03-31T02:03:11",
        "upload_time_iso_8601": "2022-03-31T02:03:11.992874Z",
        "url": "https://files.pythonhosted.org/packages/64/a4/731de2c9ae0fc55e22faaf869ff0465a22999858de66c99e0dd0ee0974e1/gitalong-0.1.0.dev5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4dc09f545b04b5c26cf947794e7c680287d692fca3239818a6be740b215aa19",
          "md5": "0ed3a37a8c94e831d47202203dc92f77",
          "sha256": "f4c0bb9d30175cefdcab462e7a7f6f7924ef2339fcdd8700d8b3ee12dedb0e7c"
        },
        "downloads": -1,
        "filename": "gitalong-0.1.0.dev5.tar.gz",
        "has_sig": false,
        "md5_digest": "0ed3a37a8c94e831d47202203dc92f77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17557,
        "upload_time": "2022-03-31T02:03:13",
        "upload_time_iso_8601": "2022-03-31T02:03:13.861544Z",
        "url": "https://files.pythonhosted.org/packages/b4/dc/09f545b04b5c26cf947794e7c680287d692fca3239818a6be740b215aa19/gitalong-0.1.0.dev5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64a4731de2c9ae0fc55e22faaf869ff0465a22999858de66c99e0dd0ee0974e1",
        "md5": "7871b130d4512d55822a7d5409e6f755",
        "sha256": "81237d00a1e2c57f2e52676eb3e47d45c854c132a001b87884740838c52cd430"
      },
      "downloads": -1,
      "filename": "gitalong-0.1.0.dev5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7871b130d4512d55822a7d5409e6f755",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17545,
      "upload_time": "2022-03-31T02:03:11",
      "upload_time_iso_8601": "2022-03-31T02:03:11.992874Z",
      "url": "https://files.pythonhosted.org/packages/64/a4/731de2c9ae0fc55e22faaf869ff0465a22999858de66c99e0dd0ee0974e1/gitalong-0.1.0.dev5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4dc09f545b04b5c26cf947794e7c680287d692fca3239818a6be740b215aa19",
        "md5": "0ed3a37a8c94e831d47202203dc92f77",
        "sha256": "f4c0bb9d30175cefdcab462e7a7f6f7924ef2339fcdd8700d8b3ee12dedb0e7c"
      },
      "downloads": -1,
      "filename": "gitalong-0.1.0.dev5.tar.gz",
      "has_sig": false,
      "md5_digest": "0ed3a37a8c94e831d47202203dc92f77",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17557,
      "upload_time": "2022-03-31T02:03:13",
      "upload_time_iso_8601": "2022-03-31T02:03:13.861544Z",
      "url": "https://files.pythonhosted.org/packages/b4/dc/09f545b04b5c26cf947794e7c680287d692fca3239818a6be740b215aa19/gitalong-0.1.0.dev5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}