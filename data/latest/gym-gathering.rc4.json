{
  "info": {
    "author": "Matthias Konitzny",
    "author_email": "konitzny@ibr.cs.tu-bs.de",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<img src=\"docs/images/corridor_episode.gif\" align=\"right\" width=\"35%\"/>\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# Gym Gathering\n\nPython package providing [OpenAI-gym](https://github.com/openai/gym) - compatible environments which simulate multiple variants of the particle gathering task.\n\n# Getting started\n\n### Particle Gathering\nThe particle gathering task is a problem where particles - which are randomly distributed in a maze-like environment - should be gathered at a single goal position (or target area) using only global control inputs.\nThis means that particles cannot be moved individually and instead all particles are moved into the same direction at the same time. \nWe can think of the particles as magnetic dust in a maze, surrounded by powerful electronic magnets.\n\nThis problem becomes interesting in scenarios where a certain payload should be brought to a target by very small agents that do not have enough volume to store the energy for their own movements. \nAn example would be the transport of very small particles inside the human body (e.g. for cancer treatment).\n\n### Installation\nInstallation requires Python 3.7+ and can be either done using the `pip` package or directly from source. \n\n#### Install from pip\nInstall the gym-gathering package using `pip`:\n```\npip install gym-gathering\n```\n\n#### Install from source\nTo install the package directly from source, you can simply clone it and then run a local installation process using pip:\n```\ngit clone https://github.com/NeoExtended/gym-gathering.git\ncd gym-gathering\npip install -e .\n```\n\nInstalling the package from source also includes a [script](run_env_as_player.py) which lets you play the environments yourself using the arrow keys.\n\n#### Basic Usage\nThe following is a very basic usage example, demonstrating the typical gym interaction loop.\nThe available environments are discussed [here](https://github.com/NeoExtended/gym-gathering#environment-naming).\n\n```python\nimport gym\nimport gym_gathering  # This is needed to register the environments\n\nenv = gym.make(\"CorridorAlgorithmicFixedPCFixedGoal-v0\")\nobservation, info = env.reset(seed=42, return_info=True)\ndone = False\ntotal_reward = 0\nlength = 0\n\nwhile not done:\n    action = env.action_space.sample()  # Replace the random sample by your agent\n    observation, reward, done, info = env.step(action)\n    total_reward += reward\n    length += 1\n    # env.render() # optionally render the environment\n    \nenv.close()\nprint(f\"Total reward: {total_reward}, episode length: {length}\")\n```\n\n# Simulation Environment\nThis package adds a series of named environments.\nEach environment simulates a different variation of the particle gathering problem.\nThe environments can be further customized - especially the reward function and the observations can be either selected from a number of existing choices, or even custom-built.\nEpisodes for every environment will be automatically truncated after 2000 steps of interaction.\n\n## Properties\n\n### Mazes\nThis package includes environments based on five different mazes:\n\n![Mazes](docs/images/Instances.png)\n\nParticles can move through the light blue areas and get blocked by the dark blue areas.\nEach maze has a default goal area (marked by a red circle).\n\nAdditionally, mazes with vessel-like structure can be randomly generated.\nThe generation is based on rapidly exploring random trees (RRTs) which creates vessel-like structures.\nTwo different environments with randomized mazes can be selected:\n1. `RandomRRT`: For every episode a new maze is generated. The goal position will be randomly selected from the set of free pixels.\n2. `StagesRRT`: Mazes work like levels in a video game. The agent will only see in the first maze (called stage) until it successfully solves it. Then the environment advances to the next stage. If the agent fails to complete the episode before it gets truncated, the environment returns to stage 0. Goal positions will be randomly selected for each new episode. \n\n### Particle Physics\nEnvironments can currently have three different \"physical\" models which control how particles behave.\n\n#### Algorithmic particles\nThe *algorithmic* particle model, allows particles to directly change their positions.\nThis means that in every step, each particle which is not blocked by a wall will move exactly one pixel into the given direction.\nIf two particles enter the same pixel they will merge and never split up again.\n\n#### Fuzzy particles\nThe *fuzzy* particle model, behaves similar to the algorithmic particle model, but introduces randomized errors to the particle control.\nAt each step and for each particle there is a chance to move into a random direction and particles may ignore the given action.\nParticles which have previously merged will still stick together and not split up again.\n\n#### Physical particles\nThe *physical* particle model, simulates basic physical particle behavior. \nParticles are accelerated into the given direction and change their positions depending on their current speed.\nParticles also are affected by drag, and we account for inter-particle collision if more than 3 particles enter the same pixel.\nIn the physical model, particles also have a randomized weight and therefore may split up again, even if they previously entered the same pixel.\n\n### Goal Positions\nFor each maze we provide a fixed default goal position. \nAdditionally, goal positions can be set to random, which results in a new goal position for each episode.\nIf you want to manually set a goal position, you can pass the coordinates of the goal using the `goal` parameter.\n\n### Number of particles\nParticles are randomly distributed over each possible empty location of the selected maze.\nBy default, 256 randomly generated particles are created at the start of each episode.\nThe number of particles can be controlled by the `n_particles` parameter, which can be set to a range by passing a tuple, or to `filled` to create a completely filled maze.\n\n### Environment Naming\nDepending on the desired behavior of the environment, this package creates a number of pre-defined named environments which follow a nomenclature:\n\n```\n[Maze][PhysicsType][ParticleCount][GoalType]-v0\n\nExamples:\nCorridorAlgorithmicFixedPCFixedGoal-v0\nBrainPhysicalRandomPCRandomGoal-v0\n```\n\nThe possible values are listed below:\n\n| Parameter     | Description                                          | Possible Values                                                                  | \n|---------------|------------------------------------------------------|----------------------------------------------------------------------------------|\n| Maze          | Controls the type of the maze.                       | `Corridor`, `Capillary`, `Brain`, `Coronary`, `Vessel`, `StagesRRT`, `RandomRRT` |\n| PhysicsType   | Controls the type of the environment physics.        | `Algorithmic`, `Physical`, `Fuzzy`                                               |\n| ParticleCount | Controls the number of randomly generated particles. | `FixedPC`, `RandomPC`, `FilledPC`                                                |\n| GoalType      | Controls the selection of the goal position.         | `FixedGoal`, `RandomGoal`                                                        |\n\n## Interaction\nFor the particle gathering task, specific observations and rewards are not strictly enforced.\nIf you find a better way to encode the environment information, or to provide feedback to the RL agent, we highly encourage doing so.\nHowever, this package contains a number of default observations and a reward generation toolkit to make it easy to experiment with the environments.\n\n### Observations\nBy default, observations are encoded as a single-channel image which has the size of the selected maze.\nThe image represents a binary encoding of the position of each particle (positions containing particles will have a value of 255). \n\nEnvironments with random goal positions will add a second image channel, encoding the position of the goal using a circle with a dot at the center.\nAdditionally, environments which also randomize the shape of the maze will provide a third image channel which contains the shape of the current maze.\n\n### Rewards\nBy default, rewards are generated from the change in two metrics: \n1. The maximum distance any particle is away from the goal position\n2. The average distance of any particle to the goal position\n\nBoth metrics are scaled to be approximately in the interval [0, 1] to have an equal influence.\nAdditionally, the agent receives a small time-penalty at each step.\n\n### Actions\nParticles can be moved into one of eight directions:\n\n| Action | Direction  |\n|--------|------------|\n| 0      | East       |\n| 1      | South-East |\n| 2      | South      |\n| 3      | South-West |\n| 4      | West       |\n| 5      | North-West |\n| 6      | North      |\n| 7      | North-East |\n\n# Reference\n\n### Parameters\nIf you want to further customize the environment you can pass `kwargs` to `gym.make()` when creating the environment.\nBelow is a list of parameters which change the default behavior of the environment:\n\n\n| Parameter            | Description                                                                                                                                                 | Default Value | Possible Values                                                                                                                                                               | \n|----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `goal`               | Center of the target location (may be random).                                                                                                              |               | `Tuple[int, int]`, `None`                                                                                                                                                     |\n| `goal_range`         | Size of the target location.                                                                                                                                | 10            | `int`                                                                                                                                                                         |\n| `n_particles`        | Number of particles. Pass `filled` for a completely filled maze.                                                                                            | 256           | `int`, `Tuple[int, int]`, `filled`, `random`                                                                                                                                  |\n| `allow_diagonal`     | Allows or disallows the use of diagonal particle movements.                                                                                                 | True          | `bool`                                                                                                                                                                        |\n| `reward_type`        | Pass a class of the type `RewardGenerator` which gets called after every step to calculate the reward. Also accepts names of pre-defined reward generators. | `continuous`  |                                                                                                                                                                               |\n| `reward_kwargs`      | Additional arguments which should be passed to the reward generator                                                                                         |               |                                                                                                                                                                               |\n| `step_type`          | Pass a class of the type `StepModifier` to control how particles move. Also accepts names of pre-defined step-generators.                                   | `simple`      | `simple` for algorithmic particles and `physical` for physical particles                                                                                                      |\n| `step_kwargs`        | Additional arguments which should be passed to the step modifier                                                                                            |               |                                                                                                                                                                               |\n| `observation_type`   | Pass a class of the type `ObservationGenerator` to generate observations after each step. Also accepts names of pre-defined observation-generators.         | `simple`      | `simple` for a single-channel image, `multichannel` for a generator which encodes information into separate channels, `real-world` for distorted single-channel observations. |\n | `observation_kwargs` | Additional arguments which should be passed to the observation generator                                                                                    |               |                                                                                                                                                                               |\n \n### Functions\nUsually the environment should be fully-parameterized at the beginning of the training process. \nHowever, in a few cases, it might be necessary to change parameters during training. \nTo update any value of the member objects (e.g. the observation generator), you can use the function `set_value(obj, parameter_name, value)`.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NeoExtended/gym-gathering",
    "keywords": "reinforcement-learning machine-learning gym environment python data-science particle-gathering gathering particles algorithms",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gym-gathering",
    "package_url": "https://pypi.org/project/gym-gathering/",
    "platform": null,
    "project_url": "https://pypi.org/project/gym-gathering/",
    "project_urls": {
      "Homepage": "https://github.com/NeoExtended/gym-gathering"
    },
    "release_url": "https://pypi.org/project/gym-gathering/1.0.4/",
    "requires_dist": [
      "gym",
      "numpy",
      "scipy",
      "opencv-python",
      "keyboard ; extra == 'keyboard'"
    ],
    "requires_python": ">=3.7",
    "summary": "A gym-compatible reinforcement learning environment which simulates various particle gathering problems",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13952679,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c481acedd133362a0d28ce332ba2fff9c84d10f619bf95feda8bb2236978403b",
          "md5": "5518b168b7b05acc40815c62de866359",
          "sha256": "60bd16c33feb8067147faedc061a6fe2c2a9ab3bae325a6cb1582f23af974030"
        },
        "downloads": -1,
        "filename": "gym_gathering-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5518b168b7b05acc40815c62de866359",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 41574,
        "upload_time": "2022-03-15T15:18:25",
        "upload_time_iso_8601": "2022-03-15T15:18:25.452380Z",
        "url": "https://files.pythonhosted.org/packages/c4/81/acedd133362a0d28ce332ba2fff9c84d10f619bf95feda8bb2236978403b/gym_gathering-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "843e04dfbe72fa87d4bfb8a280ba8136923847223f082e07bd88891f55f9e8c1",
          "md5": "9af02c96e7cda4c91fad152c7cf33fdd",
          "sha256": "2dd07850272058b7fed92b44784670bdfa7f01881b45d2b5fb392d79adb0ee03"
        },
        "downloads": -1,
        "filename": "gym_gathering-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9af02c96e7cda4c91fad152c7cf33fdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 38162,
        "upload_time": "2022-03-15T15:18:26",
        "upload_time_iso_8601": "2022-03-15T15:18:26.734998Z",
        "url": "https://files.pythonhosted.org/packages/84/3e/04dfbe72fa87d4bfb8a280ba8136923847223f082e07bd88891f55f9e8c1/gym_gathering-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7afe21e88d5ef0c254760a9a9ef08ef7de8db0d119303e4a9e7ad90e76459846",
          "md5": "cb25e7bf45ef7958c0da8a1fe39cf311",
          "sha256": "3ca1499950ed4f926b8082cbe1dfe630b5644d9e711e86054ed4144bbc5b48a8"
        },
        "downloads": -1,
        "filename": "gym_gathering-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb25e7bf45ef7958c0da8a1fe39cf311",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 41584,
        "upload_time": "2022-03-15T15:27:08",
        "upload_time_iso_8601": "2022-03-15T15:27:08.364842Z",
        "url": "https://files.pythonhosted.org/packages/7a/fe/21e88d5ef0c254760a9a9ef08ef7de8db0d119303e4a9e7ad90e76459846/gym_gathering-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "037630c21b882b0e5ee883da1bcd857f3a930ca65fc45ee44fe5edf4bbdae978",
          "md5": "232dd69c6a6ae68f47db37ae015ab00c",
          "sha256": "2868df8dfc1f1324cd59474192f2b215b31a9b9810df6ed8b0a7aec0b1378393"
        },
        "downloads": -1,
        "filename": "gym_gathering-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "232dd69c6a6ae68f47db37ae015ab00c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 38243,
        "upload_time": "2022-03-15T15:27:10",
        "upload_time_iso_8601": "2022-03-15T15:27:10.126988Z",
        "url": "https://files.pythonhosted.org/packages/03/76/30c21b882b0e5ee883da1bcd857f3a930ca65fc45ee44fe5edf4bbdae978/gym_gathering-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be1aadc9330b2dadd2927c1b7e912f527b1609deebb97bbb390eb3fdd6d563ce",
          "md5": "19eeb18b6512f18a968c8255049f7fac",
          "sha256": "04f987047cb0d71f3410ce24ebbbc9b255c9f4e327ded097ed0f36d56bf2c67d"
        },
        "downloads": -1,
        "filename": "gym_gathering-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19eeb18b6512f18a968c8255049f7fac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 42101,
        "upload_time": "2022-03-15T17:06:56",
        "upload_time_iso_8601": "2022-03-15T17:06:56.853036Z",
        "url": "https://files.pythonhosted.org/packages/be/1a/adc9330b2dadd2927c1b7e912f527b1609deebb97bbb390eb3fdd6d563ce/gym_gathering-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e916ab8cc03852f2a68f44f63dc9258bc163f0b969adb181f8069769b1bc196",
          "md5": "989074265c91689f61fc8ae31ccb056a",
          "sha256": "849332587e5ce36438a2fceb03acac7ca06440a0666f74c2f840bab386fe4d8e"
        },
        "downloads": -1,
        "filename": "gym_gathering-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "989074265c91689f61fc8ae31ccb056a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 39198,
        "upload_time": "2022-03-15T17:06:58",
        "upload_time_iso_8601": "2022-03-15T17:06:58.638936Z",
        "url": "https://files.pythonhosted.org/packages/3e/91/6ab8cc03852f2a68f44f63dc9258bc163f0b969adb181f8069769b1bc196/gym_gathering-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9635a442d1377fcb3b552b77063e675f103f355d430acc9f82cd99b074984bf",
          "md5": "5b0d38945a0161000e3baa4b2b7c1ef9",
          "sha256": "c22ea09f7a7acfc279e5c18953177e8f77e5c99325973ff77d546528a4fb3613"
        },
        "downloads": -1,
        "filename": "gym_gathering-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b0d38945a0161000e3baa4b2b7c1ef9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 42584,
        "upload_time": "2022-05-27T07:54:22",
        "upload_time_iso_8601": "2022-05-27T07:54:22.247824Z",
        "url": "https://files.pythonhosted.org/packages/e9/63/5a442d1377fcb3b552b77063e675f103f355d430acc9f82cd99b074984bf/gym_gathering-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c9e34e7a7f0dbc4720e8781b1bf595b85673d52f329665135f8efe4d93adc25",
          "md5": "2196f6c5037624dc6758a88482110923",
          "sha256": "ac41649c56dbd144777a64ed8d906f76e2607b0f69981169a188b48b9608d605"
        },
        "downloads": -1,
        "filename": "gym_gathering-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2196f6c5037624dc6758a88482110923",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 39775,
        "upload_time": "2022-05-27T07:54:24",
        "upload_time_iso_8601": "2022-05-27T07:54:24.059009Z",
        "url": "https://files.pythonhosted.org/packages/8c/9e/34e7a7f0dbc4720e8781b1bf595b85673d52f329665135f8efe4d93adc25/gym_gathering-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9635a442d1377fcb3b552b77063e675f103f355d430acc9f82cd99b074984bf",
        "md5": "5b0d38945a0161000e3baa4b2b7c1ef9",
        "sha256": "c22ea09f7a7acfc279e5c18953177e8f77e5c99325973ff77d546528a4fb3613"
      },
      "downloads": -1,
      "filename": "gym_gathering-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5b0d38945a0161000e3baa4b2b7c1ef9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 42584,
      "upload_time": "2022-05-27T07:54:22",
      "upload_time_iso_8601": "2022-05-27T07:54:22.247824Z",
      "url": "https://files.pythonhosted.org/packages/e9/63/5a442d1377fcb3b552b77063e675f103f355d430acc9f82cd99b074984bf/gym_gathering-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c9e34e7a7f0dbc4720e8781b1bf595b85673d52f329665135f8efe4d93adc25",
        "md5": "2196f6c5037624dc6758a88482110923",
        "sha256": "ac41649c56dbd144777a64ed8d906f76e2607b0f69981169a188b48b9608d605"
      },
      "downloads": -1,
      "filename": "gym_gathering-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "2196f6c5037624dc6758a88482110923",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 39775,
      "upload_time": "2022-05-27T07:54:24",
      "upload_time_iso_8601": "2022-05-27T07:54:24.059009Z",
      "url": "https://files.pythonhosted.org/packages/8c/9e/34e7a7f0dbc4720e8781b1bf595b85673d52f329665135f8efe4d93adc25/gym_gathering-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}