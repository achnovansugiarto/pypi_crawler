{
  "info": {
    "author": "Martin Strohalm",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Utilities"
    ],
    "description": "#  Gress - Naïve Progress Bar\n\nWhat should be the amateur version of *progress* - a ***gress***? The *gress* library provide highly customizable\ntext-based progress monitor for *Python*. The inspiration for this library came from the original work of\n[Nilton Volpato](https://github.com/NiltonVolpato/python-progressbar), but it was recreated from scratch to make it\neasier to set up and use.\n\n```python\nimport time\nimport gress\n\n# init herd\nsheeps = 100\n\n# init bar\nbar = gress.Bar(\"Counting: {count} of {maximum} ({percent}%) {bar} {speed}/s | {timer} | ETA {autoeta}\", maximum=sheeps)\nbar.start()\n\n# count the sheeps\nsleep = 0.1\nfor i in range(sheeps):\n    time.sleep(sleep)\n    \n    # increment progress\n    bar += 1\n    \n    # count slower while sleeping (50 sheeps and more)\n    if bar.current == sheeps / 2:\n        bar.write(\"{time} I should sleep now, so I'm counting slower!\")\n        sleep *= 2\n\n# finish and make final report\nbar.finish(\"{time} All {count} sheeps counted in {autotimer} with the average rate of {speed}/s.\")\n\n\n# output during processing\n# 2022-10-01 21:12:13.565873 I should sleep now, so I'm counting slower!\n# Counting: 77 of 100 (77%) ████████████████████------ 4.95/s | 00:00:10 | ETA 4s\n\n# output after processing\n# 2022-10-01 21:12:13.565873 I should sleep now, so I'm counting slower!\n# 2022-10-01 21:12:23.478325 All 100 sheeps counted in 15s with the average rate of 6.47/s.\n```\n\n\n## Progress Bar\n\nThe easiest way to monitor progress is to initialize the **Bar** object with a custom template, using predefined\nwidgets and continuously increase its value (see the example above). Although this should cover most of the use cases,\nthere are many ways to go deeper to customize the main progress bar or individual widgets.\n\n    widgets: (Widget,) or str\n        Collection of widgets to display on each update. The widget can be one of\n        the many predefined widgets, simple string to show or any class derived from\n        the Widget base. The widgets can also be provided using a template, where\n        the widgets are specified by a name in curly brackets\n        (e.g. 'Processed: {count} ETA: {eta}').\n    \n    minimum: int\n        Minimum progress value or count.\n    \n    maximum: int\n        Maximum progress value or count.\n    \n    size: int\n        Number of characters available to display the progress.\n    \n    refresh: float\n        Minimum number of seconds between individual updates to be displayed.\n    \n    keep: int or float\n        Absolute or relative number of last updates to keep for adaptive widgets like ETA\n        or speed. If value is grater than 1 it is considered as absolute, otherwise it is\n        relative to maximum value. The widgets are calculating progress from last\n        measurements instead of overall progress.\n    \n    output: any\n        Custom output to which all the progress and messages are writen. This must support\n        'write' and 'flush' method calls.\n\n\n### Widgets initialization\n\n**By template** - This is probably the most convenient method of widgets initialization. It is based on\nrecognizing predefined or registered widgets by their unique tags within a single template string. The widgets are\nspecified using the **{tag}** syntax.\n\n```python\nbar = gress.Bar(\"Counting: {count} of {maximum} sheeps. Ready in {autoeta}.\", maximum=100)\n```\n\n**By widgets** - If none of the predefined widgets suits your needs, custom instances can be provided directly.\n\n```python\nbar = gress.Bar(\n    \"Counting: \",\n    gress.Property(\"current\", \"{:03}\"), \" of \", gress.Property(\"maximum\"),\n    \" sheeps. Ready in \",\n    gress.ETA(\"{s}s\"),\n    \".\",\n    maximum=100)\n```\n\n**By combination** - Any template can be combined with custom widgets instances.\n\n```python\nbar = gress.Bar(\"Counting: \", gress.Property(\"current\", \"{:03}\"), \" of {maximum} sheeps. Ready in {autoeta}.\", maximum=100)\n```\n\n**By custom widgets within template** - Custom widgets instances can also be registered under unique tag and used\ndirectly within a template.\n\n```python\nbar = gress.Bar(\"Counting: {mycount} of {maximum} sheeps. Ready in {autoeta}.\", maximum=100)\nbar.register(\"mycount\", gress.Property(\"current\", \"{:03}\"))\n```\n\n\n### Updating the progress\nDepending on particular situation, different types of progress update may be useful. Upon every update the bar decides\nwhether the displayed progress should be refreshed or not. This can be influenced by the **refresh** argument of the bar itself.\n\n```python\n# by increment\nstep = 10\nfor i in range(0, 100, step):\n    do_something()\n    bar += step\n\n# by relative increase\nstep = 10\nfor i in range(0, 100, step):\n    do_something()\n    bar.increase(step)\n\n# by absolute value\nstep = 10\nfor i in range(0, 100, step):\n    do_something()\n    bar.update((i+1)*step)\n```\n\n### Messaging during the progress\nAny message can be writen during processing using the bar **.write()** method. It can be as simple as a single string or\nas complex as a combination of multiple widgets. Depending on the **permanent** argument, the message can be displayed\npermanently of removed later by next progress update.\n\n```python\nbar.write(\"{time} I should sleep now, so I'm counting slower!\")\n```\n\n### Finishing the progress\nTo inform the bar that the progress has finished just call the **finish()** method. This stops the elapsed time to be\nincrease any further and prints the final state of the progress. This behavior can be modified by providing custom\nwidgets to be displayed and writen permanently.\n\n```python\nbar.finish(\"{time} All {count} sheeps counted in {autotimer} with the average rate of {speed}/s.\")\n```\n\n## Available Widgets\nThere are multiple widgets types available covering various aspects of processing from simple count or animated progress\nbar up to estimated time of the process to finish. As mentioned above, they can be used as custom instances with\nspecific settings or many of the predefined widgets can be used directly within a template string.\n\n\n### Property widget\nThe Property widget displays specified progress value using given formatting template. Optionally, if unit prefixes are\nprovided, the value is scaled automatically and corresponding unit prefix is added (e.g. 1500 vs. 1.50 k). There are\npredefined prefixes available like *PREFIXES* - typically used for data scaling. Note that the power multiplier can be\nspecified as well (e.g. 1024 for data).\n\n    name: str\n        Name of the progress bar property to show. (E.g. \"current\", \"minimum\", \"maximum\".)\n    \n    template: str\n        Custom template to be used to format the property value (e.g. \"{:.2f}\").\n    \n    prefixes: (str,) or None\n        Units prefix for each power (e.g. gress.PREFIXES).\n    \n    step: int\n        Multiplier of the power (e.g. 1000 or 1024).\n\n#### Predefined prefix sequences\n- **PREFIXES** = (\"\", \"k\", \"M\",  \"G\",  \"T\",  \"P\",  \"E\",  \"Z\",  \"Y\")\n\n#### Predefined simple property widgets\n- **{current}** : Property(name=\"current\", template=None)\n- **{minimum}** : Property(name=\"minimum\", template=None)\n- **{maximum}** : Property(name=\"maximum\", template=None)\n- **{min}** : Property(name=\"minimum\", template=None)\n- **{max}** : Property(name=\"maximum\", template=None)\n- **{count}** : Property(name=\"current\", template=\"{:.0f}\")\n- **{percent}** : Property(name=\"percent\", template=\"{:.0f}\")\n\n#### Predefined scaled property widgets\n- **{data}** : Property(name=\"current\", template=\"{:.2f}\", prefixes=PREFIXES, step=1024)\n- **{dataminimum}** : Property(name=\"minimum\", template=\"{:.2f}\", prefixes=PREFIXES, step=1024)\n- **{datamaximum}** : Property(name=\"maximum\", template=\"{:.2f}\", prefixes=PREFIXES, step=1024)\n- **{datamin}** : Property(name=\"minimum\", template=\"{:.2f}\", prefixes=PREFIXES, step=1024)\n- **{datamax}** : Property(name=\"maximum\", template=\"{:.2f}\", prefixes=PREFIXES, step=1024)\n- **{sci}** : Property(name=\"current\", template=\"{:.2f}\", prefixes=PREFIXES, step=1000)\n- **{sciminimum}** : Property(name=\"minimum\", template=\"{:.2f}\", prefixes=PREFIXES, step=1000)\n- **{scimaximum}** : Property(name=\"maximum\", template=\"{:.2f}\", prefixes=PREFIXES, step=1000)\n- **{scimin}** : Property(name=\"minimum\", template=\"{:.2f}\", prefixes=PREFIXES, step=1000)\n- **{scimax}** : Property(name=\"maximum\", template=\"{:.2f}\", prefixes=PREFIXES, step=1000)\n\n\n### Time widget\nThe Time widget displays current time according to specified template, which should follow the standard datetime\nnotation (e.g. \"%Y-%m-%d %H:%M:%S\").\n\n    template: str or None\n        Custom template to be used to format the time. The template should use standard\n        datetime notation (e.g. \"%Y-%m-%d %H:%M:%S\"). If set to None, full time is shown.\n\n#### Predefined time widgets\n- **{Time}** : Time()\n\n\n### Timer widget\nThe Timer widget displays current progress elapsed time, according to specified template or formatted automatically as\nneeded. The template can use \"dhms\" characters to format individual parts (e.g. \"{m:02}:{s:02}\"). Optionally, the time\nunits can be displayed if automatic formatting is used.\n\n    template: str or None\n        Custom template to be used to format the time. The template can use \"dhms\" characters\n        to format individual parts (e.g. \"{m:02}:{s:02}\"). If set to None, remaining time is\n        formatted automatically.\n    \n    units: bool\n        If se to True and no template is provided, remaining time is shown with units.\n\n#### Predefined time templates\n- **TIME_ABS** = \"%Y-%m-%d %H:%M:%S\"\n- **TIME_DHMS** = \"{d}:{h:02}:{m:02}:{s:02}\"\n- **TIME_HMS** = \"{h:02}:{m:02}:{s:02}\"\n- **TIME_MS** = \"{m:02}:{s:02}\"\n- **TIME_S** = \"{s}\"\n- **TIME_DHMS_U** = \"{d}d {h}h {m}m {s}s\"\n- **TIME_HMS_U** = \"{h}h {m}m {s}s\"\n- **TIME_MS_U** = \"{m}m {s}s\"\n- **TIME_S_U** = \"{s}s\"\n\n#### Predefined timer widgets\n- **{timer}** : Timer(template=TIME_HMS)\n- **{autotimer}** : Timer(template=None, units=True)\n\n\n### ETA widget\nThe ETA widget displays current progress estimated time of finish, according to specified template or formatted\nautomatically as needed. If absolute time should be displayed, the template should use the standard datetime notation\n(e.g. \"%Y-%m-%d %H:%M:%S\"). For remaining time the template can use \"dhms\" characters to format individual parts\n(e.g. \"{m:02}:{s:02}\"). Optionally, the time units can be displayed if automatic formatting is used.\n\nThe time is by default calculated using several latest progress updates, unless the adaptive parameter is set to False.\nIn such case the whole elapsed time and progress is used.\n\n    template: str or None\n        Custom template to be used to format the time. For absolute ETA the template\n        should use the standard datetime notation (e.g. \"%Y-%m-%d %H:%M:%S\"). For relative\n        ETA the template can use \"dhms\" characters to format individual parts\n        (e.g. \"{m:02}:{s:02}\"). If set to None, remaining time is formatted automatically.\n    \n    units: bool\n        If se to True and no template is provided, remaining time is shown with units.\n    \n    absolute: bool\n        If set to True, remaining time is shown as the absolute time of expected finish,\n        otherwise the remaining time is shown.\n    \n    adaptive: bool\n        If set to True, the speed is calculated from last N updates only, otherwise\n        the whole progress is used. Number of updates depends on the progress bar settings.\n\n#### Predefined ETA widgets\n- **{eta}** : ETA(template=TIME_HMS, absolute=False, adaptive=True)\n- **{autoeta}** : ETA(template=None, units=True, absolute=False, adaptive=True)\n- **{abseta\"}** : ETA(template=TIME_ABS, absolute=True, adaptive=True)\n\n\n### Speed widget\nThe Speed widgets displays current progress speed, according to specified template. Optionally, if unit prefixes are\nprovided, the value is scaled automatically and corresponding unit prefix is added (e.g. 1.5 MBps). There are predefined\nprefixes available like *PREFIXES* - typically used for data scaling. Note that the power multiplier can be specified\nas well (e.g. 1024 for data).\n\nThe speed is by default calculated using several latest progress updates, unless the adaptive parameter is set to False.\nIn such case the whole elapsed time and progress is used.\n\n    template: str\n        Custom template to be used to format the speed value.\n    \n    prefixes: (str,) or None\n        Units prefix for each power (e.g. gress.PREFIXES).\n    \n    step: int\n        Multiplier of the power (e.g. 1000 or 1024).\n    \n    adaptive: bool\n        If set to True, the speed is calculated from last N updates only, otherwise\n        the whole progress is used. Number of updates depends on the progress bar settings.\n\n#### Predefined speed widgets\n- **{speed}** : Speed(template=\"{:.2f}\", prefixes=None, adaptive=True)\n- **{bps}** : Speed(template=\"{:.2f}\", prefixes=PREFIXES, step=1024, adaptive=True)\n- **{dataspeed}** : Speed(template=\"{:.2f}\", prefixes=PREFIXES, step=1024, adaptive=True)\n- **{scispeed}** : Speed(template=\"{:.2f}\", prefixes=PREFIXES, step=1000, adaptive=True)\n\n\n### Gauge widget\nThe Gauge widget displays current progress as a proportionally filled bar. The characters used can be fully customized\nto achieve desired look. If the size is not specified, it fills all available space automatically. In case the parent\nprogress does not specify the maximum value, the marker character just bounces back a forth instead of filling the bar.\n\n    marker: str\n        Character used to show current progress (e.g. \"=\").\n    \n    left: str\n        Character used for the left edge (e.g. \"[\").\n    \n    right: str\n        Character used for the right edge (e.g. \"]\").\n    \n    fill: str\n        Character used to fill remaining space (e.g. \"-\").\n    \n    tip: str\n        Character used for the progress tip (e.g. \">\").\n    \n    size: int or None\n        Desired length of the gauge. If set to None, whole available space will be used.\n\n#### Predefined gauge widgets\n- **{gauge}** : Gauge(marker=\"|\", left=\"|\", right=\"|\", fill=\"-\", tip=\"\")\n- **{bar}** : Gauge(marker=\"█\", left=\"\", right=\"\", fill=\"-\", tip=\"\")\n\n\n### Spin widget\nThe Spin widget displays current progress as animated character. It is defined by a sequence of characters to use, each\nupdate displays the next available character. By setting the widget as relative, available characters are mapped to\ncover the whole progress range, otherwise the widget circles through them.\n\n    markers: str\n        Individual characters to animate (e.g. \"→↘↓↙←↖↑↗\" or simply grass.ARROW).\n    \n    fin: str\n        Final character after process finished. If not specified, the last character\n        of given markers is used.\n    \n    relative: bool\n        If set to True, characters are distributed equally across full progress.\n        If set to False, next character is used for every update.\n\n#### Predefined spin sequences\n- **ARROW** = \"→↘↓↙←↖↑↗\"\n- **CIRCLE** = \" .oO\"\n- **DOTS** = \" ⡀⡄⡆⡇⣇⣧⣷⣿\"\n- **FADE** = \" ░▒▓█\"\n- **HBAR** = \" ▏▎▍▌▋▊▉█\"\n- **LINE** = \"⎽⎼⎻⎺⎻⎼\"\n- **MOON** = \"◑◒◐◓\"\n- **PIE** = \"○◔◑◕●\"\n- **PIXEL** = \"⣾⣷⣯⣟⡿⢿⣻⣽\"\n- **SNAKE** = \" ▖▌▛█\"\n- **STAR** = \"-\\\\|/\"\n- **VBAR** = \" ▁▂▃▄▅▆▇█\"\n\n#### Predefined spin widgets (cycling)\n\n- **{arrow}** : Spin(markers=ARROW, fin=\"↑\", relative=False)\n- **{circle}** : Spin(markers=CIRCLE, relative=False)\n- **{dots}** : Spin(markers=DOTS, relative=False)\n- **{fade}** : Spin(markers=FADE, relative=False)\n- **{hbar}** : Spin(markers=HBAR, relative=False)\n- **{line}** : Spin(markers=LINE, relative=False)\n- **{moon}** : Spin(markers=MOON, relative=False)\n- **{pie}** : Spin(markers=PIE, relative=False)\n- **{pixel}** : Spin(markers=PIXEL, fin=\"⣿\", relative=False)\n- **{snake}** : Spin(markers=SNAKE, relative=False)\n- **{spin}** : Spin(markers=STAR, fin=\"|\", relative=False)\n- **{star}** : Spin(markers=STAR, fin=\"|\", relative=False)\n- **{vbar}** : Spin(markers=VBAR, relative=False)\n\n#### Predefined spin widgets (relative)\n\n- **{reldots}** : Spin(markers=DOTS, relative=True)\n- **{relfade}** : Spin(markers=FADE, relative=True)\n- **{relhbar}** : Spin(markers=HBAR, relative=True)\n- **{relpie}** : Spin(markers=PIE, relative=True)\n- **{relsnake}** : Spin(markers=SNAKE, relative=True)\n- **{relvbar}** : Spin(markers=BAR, relative=True)\n\n\n### Variable widget\nThe Variable widget provides a special type of widgets to displays custom variables within the progress bar. The\nvariable is typically specified as a lambda function with no input parameters, returning the final formatted custom\nvalue.\n\n    callback: callable\n        Custom function to be used to retrieve and format the custom value.\n\n## Disclaimer\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\nwarranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xxao/gress",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gress",
    "package_url": "https://pypi.org/project/gress/",
    "platform": null,
    "project_url": "https://pypi.org/project/gress/",
    "project_urls": {
      "Homepage": "https://github.com/xxao/gress"
    },
    "release_url": "https://pypi.org/project/gress/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Gress - Naive progress monitor",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15401676,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae097d5ea056aaf88ec774214eeaf5fa70c9f605bcb26057618fa501c70391f8",
          "md5": "6d3648b1040d5fcb219ac0863a42eb32",
          "sha256": "e427dc767812b22f3589a7461e6a535334931c7fa5ffb1eeeb903ca0255f0213"
        },
        "downloads": -1,
        "filename": "gress-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d3648b1040d5fcb219ac0863a42eb32",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17134,
        "upload_time": "2022-10-07T18:48:47",
        "upload_time_iso_8601": "2022-10-07T18:48:47.969294Z",
        "url": "https://files.pythonhosted.org/packages/ae/09/7d5ea056aaf88ec774214eeaf5fa70c9f605bcb26057618fa501c70391f8/gress-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b348efd7a1c2dc57adbdb6afa381eb1188a6a82c6929f9f5bde773fc44119e1",
          "md5": "ae9c10a775f7dc637f67a9a9c0ab0d17",
          "sha256": "419eb5b4907e56e877480a512fd41066badcc1609d769269ad0740aeea950e90"
        },
        "downloads": -1,
        "filename": "gress-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae9c10a775f7dc637f67a9a9c0ab0d17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19801,
        "upload_time": "2022-10-07T18:48:49",
        "upload_time_iso_8601": "2022-10-07T18:48:49.590387Z",
        "url": "https://files.pythonhosted.org/packages/1b/34/8efd7a1c2dc57adbdb6afa381eb1188a6a82c6929f9f5bde773fc44119e1/gress-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac76786bb02c8b07cce4d1cc8f4652a081964b9aee4bd5649eb45e4b6f580257",
          "md5": "5b5faa7b6e9ccc8746c847eb8fe92a02",
          "sha256": "9a99c1f0591aeadf3a148f1ef5d829f52bf326865a5553b573a0758048103a19"
        },
        "downloads": -1,
        "filename": "gress-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b5faa7b6e9ccc8746c847eb8fe92a02",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17250,
        "upload_time": "2022-10-13T18:18:14",
        "upload_time_iso_8601": "2022-10-13T18:18:14.231276Z",
        "url": "https://files.pythonhosted.org/packages/ac/76/786bb02c8b07cce4d1cc8f4652a081964b9aee4bd5649eb45e4b6f580257/gress-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "910844c09315a3e183fec67290ab9c07310a30abe8ba8c40273baf872cb09bf5",
          "md5": "619933845716e65472b920c676b35501",
          "sha256": "9d3cc1cadecb4afa8e0e6d0b0979a88f52ddb4346d02081901da0a3bc2811849"
        },
        "downloads": -1,
        "filename": "gress-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "619933845716e65472b920c676b35501",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18709,
        "upload_time": "2022-10-13T18:18:15",
        "upload_time_iso_8601": "2022-10-13T18:18:15.646506Z",
        "url": "https://files.pythonhosted.org/packages/91/08/44c09315a3e183fec67290ab9c07310a30abe8ba8c40273baf872cb09bf5/gress-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac76786bb02c8b07cce4d1cc8f4652a081964b9aee4bd5649eb45e4b6f580257",
        "md5": "5b5faa7b6e9ccc8746c847eb8fe92a02",
        "sha256": "9a99c1f0591aeadf3a148f1ef5d829f52bf326865a5553b573a0758048103a19"
      },
      "downloads": -1,
      "filename": "gress-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5b5faa7b6e9ccc8746c847eb8fe92a02",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17250,
      "upload_time": "2022-10-13T18:18:14",
      "upload_time_iso_8601": "2022-10-13T18:18:14.231276Z",
      "url": "https://files.pythonhosted.org/packages/ac/76/786bb02c8b07cce4d1cc8f4652a081964b9aee4bd5649eb45e4b6f580257/gress-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "910844c09315a3e183fec67290ab9c07310a30abe8ba8c40273baf872cb09bf5",
        "md5": "619933845716e65472b920c676b35501",
        "sha256": "9d3cc1cadecb4afa8e0e6d0b0979a88f52ddb4346d02081901da0a3bc2811849"
      },
      "downloads": -1,
      "filename": "gress-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "619933845716e65472b920c676b35501",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18709,
      "upload_time": "2022-10-13T18:18:15",
      "upload_time_iso_8601": "2022-10-13T18:18:15.646506Z",
      "url": "https://files.pythonhosted.org/packages/91/08/44c09315a3e183fec67290ab9c07310a30abe8ba8c40273baf872cb09bf5/gress-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}