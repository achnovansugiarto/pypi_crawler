{
  "info": {
    "author": null,
    "author_email": "Wolfgang Langner <tds333@mailbox.org>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: System :: Logging"
    ],
    "description": "# Plainlog\n\n[![PyPI - Version](https://img.shields.io/pypi/v/plainlog.svg)](https://pypi.org/project/plainlog)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/plainlog.svg)](https://pypi.org/project/plainlog)\n\n-----\n\n**Table of Contents**\n\n- [Installation](#installation)\n- [License](#license)\n\n## Installation\n\n```console\npip install plainlog\n```\n\n## Idea\n\nMain goal is to be a plain easy to use logging library.\nSimple, small, easy to use, easy to understand, fast.\n\nBecause of this there is a clean separation between the logger and the core.\nEverything related about the logger is for normal developer using logging and simply want to emit log messages.\nTo the logger core the handlers are attached and the configuration of the logging system.\nIf you are to lazy for long configuration settings simply use the provided log profiles.\nConfiguration can be done with some environment variables or in the code.\n\n### What is the difference to other logging libraries?\n\nPlainlog wants to be simple and fast. It should work the same way in async and sync code.\nBecause of this there is a clean separation between a logger and the core. This separation is done with a thread safe queue.\nThis guaranties also that everything is not blocking your code, so you simply can use the logger in an async context,\nwithout having the methods to be async.\nWith this concept you normally also have not to care about performance. In the hot path of the logger everything is fast\nand minimal. Then put the log record (a simple dict) into the queue and the core handles the rest in an extra thread, not blocking anything.\nYou can log lot of messages in debug level and the performance of your code is not affected.\n\nAlso the concept of preprocessors and processors is special. A preprocessor runs in the context of the logger, a processor in the context of the core.\nSo you can enrich log record information in the context of the call or later in the context of processing.\n\nFor easy usage and configuration a list of profiles is provided that can simply be selected and used.\nThis ads documented (pre)-processors and handlers and everything is ready to be used.\n\nFor every class, method or function I care what it does. Normally I think twice about it and implement it in three different ways to come to a final\n\"plain\" solution.\n\n\n### What is from other libraries?\n\nFrom structlog the idea of processors are taken. But simplyfied and separated. In plainlog it is a simple list of preprocessors and processors\nand they are executed in order. No wraping and complicated parameter handling.\nAlso the formating for development log output is inspired from structlog. The logger has the feature to `bind` and `unbind` extra variables.\n\nFrom logure the concept of a logger and core is taken. But with cleaner separation.\nThe separation is seen with configuration, in plainlog it is done on the core and not mixed up with the logger.\nAlso the separation in handling log records is done with a queue and extra thread in the core.\nThe logger has the feature to add something to the `context` or use the `contextualize` context manager.\n\nFrom logbook the idea for the fingerscrossed handler was taken.\n\nFrom twisted logging, the idea a record is simply a dictionary. Nothing more, nothing special.\n\nFrom the Python standard library the log levels (numbers and names) are taken. Even if you add your own there, plainlog\ntakes them and adds them internally. But plainlog does not invent own log levels or add some more. (as loguru does)\n\nThe concept of handlers and formatters is also there. But everything simplified. A handler can have a formatter but this is\nup to the user of the library.\n\nIn contrast to all other libraries, the interface is plain and simple. Not to much methods to remember. Simple and easy configuration.\nBut powerfull enough to handle everyones logging needs.\n\n### In short\n\n- Logging is done at the logger level, also preprocessing. Configuration with handlers and processors on the core level.\n- Clean separation, the logger is fast and pushes to a queue where the core handles the records in an extra thread. It does not block.\n- You can use the same interface for sync and async code. Simply call the log function.\n- There is no hierarchy as in standard logging. Therer are loggers and they share one core.\n- Everything is fully configurable and can be as minimal as possible. The amount of preprocessors, processors and handlers are under control\n  of the developer.\n- There is only one global minimal log level and it is tied to the minimal log level needed for the handlers. You don't have to care or set it.\n- It is really fast. Only the minimal stuff is done in the hot path of the code. Everything else is done in the core in an extra thread.\n- Handlers, formatters, preprocessors, processors all use a simple call interface. They must be callable and get the log record dictionary.\n- Profiles are there for simple configuration. For developer, cloud json logging, or records in a file.\n- Working with the library should be fun and increase productivity.\n\n### Why I created it?\n\nAfter I have seen and used a lot of diffent log libraries I cam to loguru. Powerfull and easy to use, but with some hard corners.\nI use a lot of async frameworks and code. But most of them don't really care to handle logging in a right way. Standard logging asumes\nyou hopefully add not a blocking handler. But even stdout or stderr is blocking. So there is the way to write a logging library that have\nasync methods. But than you have to provide async and sync stuff with different names. Dual interfaces are not nice.\nFinally for logging is is enough if you guaranty that a sync call is not blocking. This can be done with doing the blocking stuff in an extra thread.\nThere was no library out there with this feature. So I decided to write my own, learning from others, stealing good features from them.\nThan implement everything as simple as possible. Finally also not saying it is the fastest library out there and after a few lines writing this will\nonly be the case if I have rewritten something in C for performance reasons. (read in lot of docu)\nIt is fast from the beginning on by simply doing only the minimal stuff in the hot path of your code where you execute `logger.debug(...)` or another\nlogger method. It is much faster than standard library logger and also faster in the sense of not blocking your code than all other Python logging\nlibraries.\n\n\n## License\n\n`plainlog` is distributed under the terms of any of the following licenses:\n\n- [Apache-2.0](https://spdx.org/licenses/Apache-2.0.html)\n- [MIT](https://spdx.org/licenses/MIT.html)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "plainlog",
    "package_url": "https://pypi.org/project/plainlog/",
    "platform": null,
    "project_url": "https://pypi.org/project/plainlog/",
    "project_urls": {
      "Documentation": "https://github.com/tds333/plainlog#readme",
      "Issues": "https://github.com/tds333/plainlog/issues",
      "Source": "https://github.com/tds333/plainlog"
    },
    "release_url": "https://pypi.org/project/plainlog/0.1.1/",
    "requires_dist": [
      "pytest; extra == 'dev'",
      "pytest-cov; extra == 'dev'",
      "rich; extra == 'dev'",
      "rich; extra == 'rich'"
    ],
    "requires_python": ">=3.8",
    "summary": "Logging made simple and easy.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17048469,
  "releases": {
    "0.1.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "b9aedd9b346f770a5eb7c4b877d31494cb82b8f9e05c5e601bd188636b842a9f",
          "md5": "2fe49bec093fdac3c96eebaae30c81fb",
          "sha256": "0e9acc25d12d4c58515d355319fe92b0fff8d5a4e2732a6ae9ff808b2e0ec5e9"
        },
        "downloads": -1,
        "filename": "plainlog-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fe49bec093fdac3c96eebaae30c81fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 27497,
        "upload_time": "2023-02-26T14:19:34",
        "upload_time_iso_8601": "2023-02-26T14:19:34.899772Z",
        "url": "https://files.pythonhosted.org/packages/b9/ae/dd9b346f770a5eb7c4b877d31494cb82b8f9e05c5e601bd188636b842a9f/plainlog-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "cfe209a98900ce1b8bdde20b3ce7c225460d0c748796f27989a8663edf03dd6e",
          "md5": "b30e27017614596da164414bd8792b33",
          "sha256": "4f0aad69f313ee76920f2fd8310a33a42674f7028bc8c5bc5ba6dcf044a4147e"
        },
        "downloads": -1,
        "filename": "plainlog-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b30e27017614596da164414bd8792b33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 33822,
        "upload_time": "2023-02-26T14:19:32",
        "upload_time_iso_8601": "2023-02-26T14:19:32.224774Z",
        "url": "https://files.pythonhosted.org/packages/cf/e2/09a98900ce1b8bdde20b3ce7c225460d0c748796f27989a8663edf03dd6e/plainlog-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "b9aedd9b346f770a5eb7c4b877d31494cb82b8f9e05c5e601bd188636b842a9f",
        "md5": "2fe49bec093fdac3c96eebaae30c81fb",
        "sha256": "0e9acc25d12d4c58515d355319fe92b0fff8d5a4e2732a6ae9ff808b2e0ec5e9"
      },
      "downloads": -1,
      "filename": "plainlog-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2fe49bec093fdac3c96eebaae30c81fb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 27497,
      "upload_time": "2023-02-26T14:19:34",
      "upload_time_iso_8601": "2023-02-26T14:19:34.899772Z",
      "url": "https://files.pythonhosted.org/packages/b9/ae/dd9b346f770a5eb7c4b877d31494cb82b8f9e05c5e601bd188636b842a9f/plainlog-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "cfe209a98900ce1b8bdde20b3ce7c225460d0c748796f27989a8663edf03dd6e",
        "md5": "b30e27017614596da164414bd8792b33",
        "sha256": "4f0aad69f313ee76920f2fd8310a33a42674f7028bc8c5bc5ba6dcf044a4147e"
      },
      "downloads": -1,
      "filename": "plainlog-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b30e27017614596da164414bd8792b33",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 33822,
      "upload_time": "2023-02-26T14:19:32",
      "upload_time_iso_8601": "2023-02-26T14:19:32.224774Z",
      "url": "https://files.pythonhosted.org/packages/cf/e2/09a98900ce1b8bdde20b3ce7c225460d0c748796f27989a8663edf03dd6e/plainlog-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}