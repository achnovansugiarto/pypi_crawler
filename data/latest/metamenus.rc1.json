{
  "info": {
    "author": "E.A. Tacao",
    "author_email": "mailto@tacao.com.br",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Introduction\n\nThis package was forked by [Humberto A. Sanchez II](https://hsanchezii.wordpress.com) \ninto GitHub for the purpose of source control and publishing \nto [PyPi](https://pypi.org).  I also updated the formatting to quiet the PEP 8 warnings \ngiven by PyCharm.  Additionally, I reorganized the packages for maintainability.\nThis has the effect of changing the imports for the MenuBarEx and MenuEx but does\nnot alter the functionality.  In order to more explicitly document what used to be\ncalled `custfunc` I created a type named `CustomMethods` so that the API user knows \nthat this is a dictionary\n\n# Developer Documents\n\nOn the [wiki](https://github.com/hasii2011/metamenus/wiki/Developers)\n\n# Overview\n\nmetamenus: classes that aim to simplify the use of menus in wxPython\n\nWritten by E. A. Tacao <mailto@tacao.com.br>, (C) 2005... 2020\n\n- `MenuBarEx` is a wx.MenuBar derived class for wxPython; \n- `MenuEx`    is a wx.Menu derived class for wxPython.\n\nSome features:\n\n- Menus are created based on the indentation of items on a list. (See\n  'Usage' below.)\n\n- Each menu item will trigger a method on the parent. The methods names may\n  be explicitly defined on the constructor, generated automatically or both.\n\n- Allows the developer to enable or disable a menu item or an entire menu given\n  its label.\n\n- Supplies EVT_BEFOREMENU and EVT_AFTERMENU, events that are triggered \n  right before and after, respectively, the triggering of a EVT_MENU-bound \n  method on selection of some menu item.\n\n- If your app is already i18n'd, menu items may be translated on the fly.\n  All you need to do is to write somewhere a .mo file containing the menu\n  translations.\n\n## CustomMethods Type\nThis new type is defined as follows:\n\n```python\nfrom typing import Dict\nfrom typing import NewType\n\nMenuName   = NewType('MenuName', str)\nMethodName = NewType('MethodName', str)\n\nCustomMethods = NewType('CustomMethods', Dict[MenuName, MethodName])\n\n```\n## MenuEx Usage:\n\nThe MenuEx usage is similar to MenuBarEx (please see below), except that it\nhas an optional kwarg named show_title (boolean; controls whether the menu\ntitle will be shown; may be platform-dependent):\n\n`MenuEx(self, menus, \n    margin=wx.DEFAULT, \n    show_title=True, \n    font=wx.NullFont, \n    CustomMethods=CustomMethods({}), \n    i18n=True, \n    style=0)`\n\n## MenuBarEx Usage:\n\nIn order to put a MenuBarEx inside a frame it is enough to do this:\n\n     MenuBarEx(self, menus)\n\nor you can also use some few optional keyword arguments:\n     \n`MenuBarEx(self, \n    menus, \n    margin=wx.DEFAULT, \n    font=wx.NullFont,\n    customMethods=CustomMethods({}), \n    i18n=True, \n    style=0)`\n\n  Arguments:\n    - self:  The frame in question.\n\n    - menus: A python list of 'menus', which are python lists of\n             'menu items'. Each 'menu item' is a python list that needs \n             to be in one of the following formats:\n    \n              [label]\n              or [label, args]\n              or [label, kwargs]\n              or [label, args, kwargs]\n              or [label, kwargs, args]  (but please don't do this one as several\n              bits may be harmed during the process).\n    \n      . label: (string) The text for the menu item.\n    \n               Leading whitespaces at the beginning of a label are used to\n               compute the indentation level of the item, which in turn is\n               used to determine the grouping of items. MenuBarEx \n               determines one indentation level for every group of two \n               whitespaces.\n    \n               If you want this item to be a sub-item, increase its\n               indentation. Top-level items must have no indentation.\n    \n               Separators are items labeled with a \"-\" and may not have \n               args and kwargs.\n    \n               Menu breaks (please see the wx.MenuItem.Break docs) are \n               items labeled with a \"/\" and may not have args and kwargs.\n    \n               Accelerators are handled as usual; please\n               refer to the wxPython docs for wx.Menu.Append for more \n               information about them.\n    \n      . args: (tuple) (helpString, wxItemKind)\n    \n               - helpString is an optional help string that will be shown \n                 on the parent's status bar. If you don't pass it, no help \n                 string for this item will appear on the statusbar.\n    \n               - wxItemKind may be one of wx.ITEM_CHECK, \"check\",\n                 wx.ITEM_RADIO or \"radio\". It is also optional; if you don't \n                 pass one, a default wx.ITEM_NORMAL will be used.\n    \n               Note that if you have to pass only one argument, you can do\n               either:\n    \n                   args=(\"\", wxItemKind)\n                or args=(helpString,)\n                or helpString\n                or wxItemKind\n                or (helpString)\n                or (wxItemKind)\n    \n                When you pass only one item, Metamenus will check if the\n                thing passed can be translated as an item kind (either\n                wx.RADIO, \"radio\", etc.) or not, and so will try to guess\n                what to do with the thing. So that if you want a status bar\n                showing something that could be translated as an item kind,\n                say, \"radio\", you'll have to pass both arguments:\n                (\"radio\",).\n\n\n       . kwargs: (dict) wxBitmap bmpChecked, wxBitmap bmpUnchecked,\n                        wxBitmap bmp,\n                        wxFont font, int width,\n                        wxColour fgcolour, wxColour bgcolour\n    \n               These options access wx.MenuItem methods in order to change\n               its appearance, and might not be present on all platforms.\n               They are internally handled as follows:\n    \n                 key:                              item method:\n    \n                 \"bmpChecked\" and \"bmpUnchecked\" : SetBitmaps\n                 \"bmpChecked\" or \"bmp\"           : SetBitmap\n                 \"font\"                          : SetFont\n                 \"margin\",                       : SetMarginWidth\n                 \"fgColour\",                     : SetTextColour\n                 \"bgColour\",                     : SetBackgroundColour\n    \n               The \"bmp\", \"bmp\" and \"bmpUnchecked\" options accept a bitmap \n               or a callable that returns a bitmap when called. This is \n               useful if you created your bitmaps with encode_bitmaps.py \n               and want to pass something like \n               {\"bmpChecked\": my_images.getSmilesBitmap} since maybe the wx.App\n               may not be created yet.\n    \n               Please refer to the wxPython docs for wx.MenuItem for more\n               information about the item methods.\n    \n    - margin:   (int) a value that will be used to do a SetMargin() for \n                each menubar item. Please refer to the wxPython docs for\n                wx.MenuItem.SetMargin for more information about this.\n    \n    - font:     (wx.Font) a value that will be used to do a SetFont() for\n                each menu item. Please refer to the wxPython docs for\n                wx.MenuItem.SetFont for more information about this.\n    \n    - customMethods: (dict) allows one to define explicitly what will be the\n                parent's method called on a menu event.\n    \n                By default, all parent's methods have to start with \"OnMB_\"\n                (for menubars) or \"OnM_\" (for menus) plus the full menu\n                'path'. For a 'Save' menu item inside a 'File' top menu, \n                e.g:\n    \n                    def OnMB_FileSave(self):\n                        self.file.save()\n    \n                However, the custfunc arg allows you to pass a dict of\n    \n                    {menupath: method, menupath: method, ...}\n    \n                so that if you want your File > Save menu triggering a\n                'onSave' method instead, you may pass\n    \n                    {\"FileSave\": \"onSave\"}\n                 or {\"FileSave\": self.onSave}\n    \n                as custom method entry. This way, your parent's method should look \n                like this instead:\n    \n                    def onSave(self):\n                        self.file.save()\n    \n                You do not have to put all menu items inside customMethods \n                dictionary. The menupaths not found there will still trigger automatically\n                an OnMB_/OnM_-prefixed method.\n    \n    - i18n:     (bool) Controls whether you want the items to be translated\n                or not. Default is True. For more info on i18n, please see\n                'More about i18n' below.\n    \n    - style:    Please refer to the wxPython docs for wx.MenuBar/wx.Menu \n                for more information about this.\n\n## The public methods:\n\n  The 'menu_string' arg on some of the public methods is a string that\n  refers to a menu item. For a File > Save menu, e. g., it may be\n  \"OnMB_FileSave\", \"FileSave\" or the string you passed via the custfunc\n  parameter (i. e., if you passed {\"FileSave\": \"onSave\"} as custfunc, the\n  string may also be \"onSave\").\n\n  The 'menu_string_list' arg on some of the public methods is a python list\n  of 'menu_string' strings described above. Please refer to the methods\n  themselves for more details.\n\n\nMore about i18n:\n  If you want to get your menu items automatically translated, you'll need\n  to:\n\n  1. Create a directory named 'locale' under your app's directory, and \n     under the 'locale', create subdirectories named after the canonical \n     names of the languages you're going to use (e. g., 'pt_BR', 'es_ES', \n     etc.)\n\n  2. Inside each of the subdirectories, write a gettext compiled catalog \n     file (e. g., \"my_messages.mo\") containing all of the menu labels \n     translated to the language represented by the subdirectory.\n\n  4. The language can be changed on the fly. Whenever you want to change \n     the menu language, execute these lines somewhere in your app:\n\n       l = wx.Locale(wx.LANGUAGE_PORTUGUESE_BRAZILIAN)\n       l.AddCatalogLookupPathPrefix(\"locale\")\n       l.AddCatalog(\"my_messages.mo\")\n       self.my_menu.UpdateMenus()\n\n  Unless you want your menus showing up in pt_BR, replace the\n  wx.LANGUAGE_PORTUGUESE_BRAZILIAN above by the proper language identifier.\n  For a list of supported identifiers please see the wxPython docs, under \n  the 'Constants\\Language identifiers' section.\n\n  Some items may show up in the selected language even though you didn't\n  create a .mo file for the translations. That's because wxPython looks for\n  them in the wxstd.mo file placed somewhere under the wxPython folders, and\n  maybe wxPython already uses some of the strings you are using.\n\n  Note that if you're to distribute a standalone app the wxPython localization\n  files may not be present, so it's a good idea to include a specific .mo file\n  in your package. On the other hand, if by any reason you _don't_ want the \n  menu items to be translated, you may pass a i18n=False kwarg to the \n  constructor.\n\n  You can use metamenus itself directly from a command line to help on\n  creating a gettext-parseable file based on the menus you wrote. For more\n  info about this, please see the docs for the _mmprep class below.\n\n  For more info about i18n, .mo files and gettext, please see\n  <http://wiki.wxpython.org/index.cgi/Internationalization>.\n\n## Menu bar example:\n\n    a = [[\"File\"],\n         [\"  New\",          \"Creates a new file\"],\n         [\"  Save\"],\n         [\"  -\"],\n         [\"  Preview\",      \"Preview Document\",\n                            {\"bmpChecked\": images.getSmilesBitmap(),\n                             \"fgColour\": wx.RED}],\n         [\"  -\"],\n         [\"  Exit\"]]\n    \n    b = [[\"Edit\"],\n         [\"  Cut\"],\n         [\"  Copy\"],\n         [\"    Foo\",         \"check\"],\n         [\"    Bar\",         \"check\"],\n         [\"  Paste\"]]\n    \n    myMenuBar = MenuBarEx(self, [a, b])\n\n## Context menu example:\n\n    a = [[\"Edit\"],          # A 'top-level' (0-indent) item is used as title;\n         [\"  Cut\"],\n         [\"  Copy\"],\n         [\"    Foo\",        \"radio\"],\n         [\"    Bar\",        \"radio\"],\n         [\"  Paste\"]]\n    \n    myContextMenu = MenuEx(self, a)\n\n\nIf you don't want to show the title for the context menu:\n\n   myContextMenu = MenuEx(self, a, show_title=False)\n\n(Please note that menu titles may be platform dependent).\n\nA very default 'File' menu example:\n\n       [\n        ['&File'],\n        ['  &New\\tCtrl+N'],\n        ['  &Open...\\tCtrl+O'],\n        ['  &Save\\tCtrl+S'],\n        ['  Save &As...\\tCtrl+Shift+S'],\n        ['  -'],\n        ['  Publis&h\\tCtrl+Shift+P'],\n        ['  -'],\n        ['  &Close\\tCtrl+W'],\n        ['  C&lose All'],\n        ['  -'],\n        ['  E&xit\\tAlt+X']\n       ]\n\n# Known Issues:\n\n- Phoenix keeps accelerators active even for disabled top menus.\n    (for 4.0.7p2 gtk2 on Linux)\n\n# About:\n\nmetamenus is licensed under the BSD-3-Clause License.\n\nThis code should meet the wxPython Coding Guidelines\n<http://www.wxpython.org/codeguidelines.php> and the wxPython Style Guide\n<http://wiki.wxpython.org/index.cgi/wxPython_20Style_20Guide>.\n\n## Note: \ntacao does not maintain this fork.  I think I have to keep the following text to comply with the\nBSD-3 license.\n\nFor all kind of problems, requests, enhancements, bug reports, etc,\nplease drop me an e-mail.\n\nFor updates please visit <https://www.tacao.com.br>.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hasii2011/metamenus",
    "keywords": "",
    "license": "",
    "maintainer": "Humberto Sanchez II",
    "maintainer_email": "humberto.a.sanchez.ii@gmail.com",
    "name": "metamenus",
    "package_url": "https://pypi.org/project/metamenus/",
    "platform": "",
    "project_url": "https://pypi.org/project/metamenus/",
    "project_urls": {
      "Homepage": "https://github.com/hasii2011/metamenus"
    },
    "release_url": "https://pypi.org/project/metamenus/0.14.4/",
    "requires_dist": [
      "wxPython",
      "click"
    ],
    "requires_python": "",
    "summary": "Declarative Menu Maker for wxPython",
    "version": "0.14.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12085404,
  "releases": {
    "0.14.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee3e8ee1bdd2f08794ed50206d6b6b270629c8e0cb2db6dd53bb69ef758b23a2",
          "md5": "dca5e1124fca6f06a1f8953e222cb00f",
          "sha256": "a13956b9a0277d5274c38459411a92b6fe110c73004673b77cd4b24ff03beae4"
        },
        "downloads": -1,
        "filename": "metamenus-0.14.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dca5e1124fca6f06a1f8953e222cb00f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23793,
        "upload_time": "2021-11-21T20:17:05",
        "upload_time_iso_8601": "2021-11-21T20:17:05.239839Z",
        "url": "https://files.pythonhosted.org/packages/ee/3e/8ee1bdd2f08794ed50206d6b6b270629c8e0cb2db6dd53bb69ef758b23a2/metamenus-0.14.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "badf79aca3af679d8f481d6b3254d2ca5ed6520b6f93759fc48bd5b16f84111e",
          "md5": "1be5334805ff5f2e0c0cfa9bd31b1ea3",
          "sha256": "1f93dfc82b6510f6840b3e13021d2325fffc8fe9564e51602b0ce732130f92e5"
        },
        "downloads": -1,
        "filename": "metamenus-0.14.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1be5334805ff5f2e0c0cfa9bd31b1ea3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23250,
        "upload_time": "2021-11-21T20:17:07",
        "upload_time_iso_8601": "2021-11-21T20:17:07.116057Z",
        "url": "https://files.pythonhosted.org/packages/ba/df/79aca3af679d8f481d6b3254d2ca5ed6520b6f93759fc48bd5b16f84111e/metamenus-0.14.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee3e8ee1bdd2f08794ed50206d6b6b270629c8e0cb2db6dd53bb69ef758b23a2",
        "md5": "dca5e1124fca6f06a1f8953e222cb00f",
        "sha256": "a13956b9a0277d5274c38459411a92b6fe110c73004673b77cd4b24ff03beae4"
      },
      "downloads": -1,
      "filename": "metamenus-0.14.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dca5e1124fca6f06a1f8953e222cb00f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23793,
      "upload_time": "2021-11-21T20:17:05",
      "upload_time_iso_8601": "2021-11-21T20:17:05.239839Z",
      "url": "https://files.pythonhosted.org/packages/ee/3e/8ee1bdd2f08794ed50206d6b6b270629c8e0cb2db6dd53bb69ef758b23a2/metamenus-0.14.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "badf79aca3af679d8f481d6b3254d2ca5ed6520b6f93759fc48bd5b16f84111e",
        "md5": "1be5334805ff5f2e0c0cfa9bd31b1ea3",
        "sha256": "1f93dfc82b6510f6840b3e13021d2325fffc8fe9564e51602b0ce732130f92e5"
      },
      "downloads": -1,
      "filename": "metamenus-0.14.4.tar.gz",
      "has_sig": false,
      "md5_digest": "1be5334805ff5f2e0c0cfa9bd31b1ea3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23250,
      "upload_time": "2021-11-21T20:17:07",
      "upload_time_iso_8601": "2021-11-21T20:17:07.116057Z",
      "url": "https://files.pythonhosted.org/packages/ba/df/79aca3af679d8f481d6b3254d2ca5ed6520b6f93759fc48bd5b16f84111e/metamenus-0.14.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}