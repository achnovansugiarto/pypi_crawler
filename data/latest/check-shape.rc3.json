{
  "info": {
    "author": "Stratis Markou",
    "author_email": "stratismar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Check shape\n\nTL;DR: This tool helps prevent bugs by checking shapes in-line, and making code more readable.\n\n## Shape errors\n\nA surprising amount of time in machine learning is spent on squashing shape-related bugs. There's two kinds of bugs:\n* **Runtime shape errors**: These are annoying and can take up quite a bit of debugging time, but are not nearly as dangerous as broadcasting bugs.\n* **Unindended broadcasting bugs**: These can be silent unexpected behaviours, which happen due to the broadcasting behaviour of the library in use.\n\nI've found that one thing which goes a long way to prevent/solve this issues is putting shapes in the docstrings or with in-line comments, such as\n```\ndef foo(bar1, bar2):\n    \"\"\"\n    Does foo on bar1 and bar2.\n\n    Arguments:\n        bar1 : np.array, shape (B, D, 2)\n        bar2 : np.array, shape (B, 5, D)\n    \"\"\"\n\n    # Do an einsum, blip shape (B, 2, 5)\n    blip = np.einsum('bdi, bjd -> bij', bar1, bar2)\n```\nPutting these shapes in is useful because it reduces the mental workload of remembering them, and improves readability. But **commented shapes are never enforced and could become stale**. When you read these docstrings/comments, you might **assume they are enforced**, when in fact they are not, causing unexpected broadcasting and weird errors. One way to enforce this is to use assertions, such as\n```\ndef foo(bar1, bar2):\n    \"\"\"\n    Does foo on bar1 and bar2.\n\n    Arguments:\n        bar1 : np.array, shape (B, D, 2)\n        bar2 : np.array, shape (B, 5, D)\n    \"\"\"\n\n    # Check that bar1 and bar2 are correctly shaped\n    assert bar1.shape[0] == bar2.shape[0]\n    assert bar1.shape[1] == bar2.shape[2]\n\n    # Optionally, could also check the other dimensions\n    assert bar1.shape[2] == 2 and bar2.shape[1] == 5\n\n    # Do an einsum, blip shape (B, 2, 5)\n    blip = np.einsum('bdi, bjd -> bij', bar1, bar2)\n```\nThis does the job. It enforces the assumed shapes, and reduces the chance of a broadcasting error. But it can become very wordy and quite ugly when you start making more elaborate assertions, and can incur a mental load when reading code. Here's how to do the same thing with check_shape\n```\ndef foo(bar1, bar2):\n    \"\"\"\n    Does foo on bar1 and bar2.\n\n    Arguments:\n        bar1 : np.array, shape (B, D, 2)\n        bar2 : np.array, shape (B, 5, D)\n    \"\"\"\n\n    # Check shapes are compatible\n    check_shape([bar1, bar2], [('B', 'D', 2), ('B', 5, 'D')])\n\n    # Do an einsum, blip shape (B, 2, 5)\n    blip = np.einsum('bdi, bjd -> bij', bar1, bar2)\n```\nWhich (in my opinion) is more readable. The `check_shape` will raise a `ShapeError` whenever the arrays don't match the shapes given. Now you have a line of code which is both a shape-checking assertion, and also an inline comment -- which won't go stale!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stratisMarkou/check-shape",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "check-shape",
    "package_url": "https://pypi.org/project/check-shape/",
    "platform": "",
    "project_url": "https://pypi.org/project/check-shape/",
    "project_urls": {
      "Bug Tracker": "https://github.com/stratisMarkou/check-shape/issues",
      "Homepage": "https://github.com/stratisMarkou/check-shape"
    },
    "release_url": "https://pypi.org/project/check-shape/0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A shape checking tool for arrays and tensors",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11665612,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76446ecda18065df2154de5f4bbe585d660ce05fb53ce67d9f8c349f3fb4301e",
          "md5": "fcbe8b9e31325ea402689d22711fd7e9",
          "sha256": "9d1f9bb2c41d8301b49eec80dd82c5440281d3891bb919aa200e0c91effb2b23"
        },
        "downloads": -1,
        "filename": "check_shape-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fcbe8b9e31325ea402689d22711fd7e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3132,
        "upload_time": "2021-10-08T10:58:27",
        "upload_time_iso_8601": "2021-10-08T10:58:27.572987Z",
        "url": "https://files.pythonhosted.org/packages/76/44/6ecda18065df2154de5f4bbe585d660ce05fb53ce67d9f8c349f3fb4301e/check_shape-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f97714bc572e5f03ba54413abb13fea4d9356ffca431060b7d8d348080cc82b7",
          "md5": "ce0060de14fad8198e1067a164671fd9",
          "sha256": "8839be0c9ccc5933bb7528f5e239e5c49f79f13d599f8f6e39427651c7a3bb16"
        },
        "downloads": -1,
        "filename": "check-shape-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce0060de14fad8198e1067a164671fd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2921,
        "upload_time": "2021-10-08T10:58:30",
        "upload_time_iso_8601": "2021-10-08T10:58:30.480891Z",
        "url": "https://files.pythonhosted.org/packages/f9/77/14bc572e5f03ba54413abb13fea4d9356ffca431060b7d8d348080cc82b7/check-shape-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca67657bc0ce97ad29756ec86781e6fa3ad75e75b5e9e903f78eddc915dee745",
          "md5": "cd2c42a17c4655126fbcc97feac6ce41",
          "sha256": "a319590ffcf13923439a7da976575203f1bcabf2e1e3bdb5cc3c499986c2ccfa"
        },
        "downloads": -1,
        "filename": "check_shape-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd2c42a17c4655126fbcc97feac6ce41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4695,
        "upload_time": "2021-10-08T11:22:00",
        "upload_time_iso_8601": "2021-10-08T11:22:00.083598Z",
        "url": "https://files.pythonhosted.org/packages/ca/67/657bc0ce97ad29756ec86781e6fa3ad75e75b5e9e903f78eddc915dee745/check_shape-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b109c2d0e6e75f3431b434b52a80465aa3035dbb184e495be1e34f71cbebccd",
          "md5": "b07d01f6e46b826600cf9e8338dc01fe",
          "sha256": "bb50e1a670f35954cbe7b0c706fcaa8486b42c9b6e962e66438af6cd4a9aa3f3"
        },
        "downloads": -1,
        "filename": "check_shape-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b07d01f6e46b826600cf9e8338dc01fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4682,
        "upload_time": "2021-10-08T13:07:37",
        "upload_time_iso_8601": "2021-10-08T13:07:37.820100Z",
        "url": "https://files.pythonhosted.org/packages/4b/10/9c2d0e6e75f3431b434b52a80465aa3035dbb184e495be1e34f71cbebccd/check_shape-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b109c2d0e6e75f3431b434b52a80465aa3035dbb184e495be1e34f71cbebccd",
        "md5": "b07d01f6e46b826600cf9e8338dc01fe",
        "sha256": "bb50e1a670f35954cbe7b0c706fcaa8486b42c9b6e962e66438af6cd4a9aa3f3"
      },
      "downloads": -1,
      "filename": "check_shape-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b07d01f6e46b826600cf9e8338dc01fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4682,
      "upload_time": "2021-10-08T13:07:37",
      "upload_time_iso_8601": "2021-10-08T13:07:37.820100Z",
      "url": "https://files.pythonhosted.org/packages/4b/10/9c2d0e6e75f3431b434b52a80465aa3035dbb184e495be1e34f71cbebccd/check_shape-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}