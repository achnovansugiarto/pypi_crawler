{
  "info": {
    "author": "Fran√ßois Wautier",
    "author_email": "francois@wautier.eu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# aioxiaomi\n\naioxiaomi is a Python 3/asyncio library to control Xiaomi Yeelight LED lightbulbs over your LAN.\n\n[![PyPI version fury.io](https://badge.fury.io/py/aioyeelight.svg)](https://pypi.python.org/pypi/aioiotprov)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson.mit-licen)\n[![GITHUB-BADGE](https://github.com/frawau/aioyeelight/workflows/black/badge.svg)](https://github.com/psf/black)\n\n# Installation\n\nWe are on PyPi so\n\n     pip3 install aioxiaomi\nor\n     python3 -m pip install aioyeelight\n\n\n# Encryption Key\n\nTHis library uses the MIHome binary protocol as described by [OpenMiHome](https://github.com/OpenMiHome/mihome-binary-protocol)\nThis means you must acquire the envryption key that is generated during provisioning.\n\nThe easiest way is to provision the bulbs with [aioiotprov](https://github.com/frawau/aioiotprov).\n\n# How to use\n\nEssentially, you create an object with at least 2 methods:\n\n    - register\n    - unregister\n\nYou then use start_yeelight_discovery, to search for light bulbs with a callback that will create and .activate() any new bulb.\nUpon connection with the bulb, it will register itself with the parent. All the method communicating with the bulb\ncan be passed a callback function to react to the bulb response. The callback should take 1 parameters:\n\n    - the response message\n\nCheckout __main__.py to see how it works.\n\n\nIn essence, the test program is this\n\n    tokenlist = { <mac>: <secret token>}\n    class bulbs():\n    \"\"\" A simple class with a register and  unregister methods\n    \"\"\"\n        def __init__(self):\n            self.bulbs=[]\n            self.pending_bulbs = []\n\n        def register(self,bulb):\n            self.bulbs.append(bulb)\n            try:\n                self.pending_bulbs.remove(bulb)\n            except:\n                pass\n\n        def unregister(self,bulb):\n            idx=0\n            for x in list([ y.bulb_id for y in self.bulbs]):\n                if x == bulb.bulb_id:\n                    del(self.bulbs[idx])\n                    break\n                idx+=1\n\n        def new_bulb(self, info):\n            if \"light\" in info[\"name\"] and info[\"mac\"] in tokenlist:\n                newbulb = aiox.YeelightBulb(\n                    aio.get_event_loop(),\n                    tokenlist[info[\"mac\"]],\n                    info[\"address\"],\n                    info[\"mac\"],\n                    self,\n                    )\n            found = False\n            for x in self.bulbs:\n                if x.bulb_id == newbulb.bulb_id:\n                    found = True\n                    break\n            if not found:\n                for x in self.pending_bulbs:\n                    if x.bulb_id == newbulb.bulb_id:\n                        found = True\n                        break\n            if not found:\n                newbulb.activate()\n            else:\n                del(newbulb)\n\n\n    def readin():\n    \"\"\"Reading from stdin and displaying menu\"\"\"\n\n        selection = sys.stdin.readline().strip(\"\\n\")\n        DoSomething()\n\n    MyBulbs= bulbs()\n    loop = aio.get_event_loop()\n    zc, browser = aiox.start_yeelight_discovery(MyBulbs.new_bulb)\n    try:\n        loop.add_reader(sys.stdin,readin)\n        loop.run_forever()\n    except:\n        pass\n    finally:\n        browser.cancel()\n        loop.run_until_complete(zc.close())\n        MyBulbs.close()\n        loop.remove_reader(sys.stdin)\n        loop.close()\n\n\nOther things worth noting:\n\n- Discovery is done using [aiozeroconf](https://github.com/frawau/aiozeroconf)\n\n- Yeelights allows only about 1 command per second per connection. To counter that,one can start more than one connection to a bulb. There is a limit of 4 connections per bulb, but given that there can only be 144 command per minute per bulb, only 2 connections can be handled without starting to overload the bulb. Use .set_connection(x) before activate to set the number of connections\n\n- aioyeelight ensure that there is at most 1 command per second per connection. To do so it keeps a buffer of messages and pace the sending (using round-robin if there is more then one connection). The buffer can thus become quite big.\n\n- aioyeelight will ping a bulb with a 'hello' message. This appears to be necessary for the bulb to keep responding.\n\n- I only have \"Color\" model, so I could not test with other types of bulbs\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/frawau/aioyeelight",
    "keywords": "yeelight,light,automation,xiaomi",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aioyeelight",
    "package_url": "https://pypi.org/project/aioyeelight/",
    "platform": "",
    "project_url": "https://pypi.org/project/aioyeelight/",
    "project_urls": {
      "Homepage": "http://github.com/frawau/aioyeelight"
    },
    "release_url": "https://pypi.org/project/aioyeelight/0.1.0/",
    "requires_dist": [
      "aiozeroconf",
      "cryptography"
    ],
    "requires_python": "",
    "summary": "API for local communication with Yeelight devices over a LAN with asyncio.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8607362,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34f18384a6f4aa06ac6427a91656b5f628779979949cd8a4b63e75afbd281327",
          "md5": "f836f94cc9946df2d49a7f8049b4f405",
          "sha256": "69d3ea02a55b877b5d8910437c1b899bda06010c08f31c79e25413b177ca83ce"
        },
        "downloads": -1,
        "filename": "aioyeelight-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f836f94cc9946df2d49a7f8049b4f405",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21191,
        "upload_time": "2020-11-08T12:07:32",
        "upload_time_iso_8601": "2020-11-08T12:07:32.386862Z",
        "url": "https://files.pythonhosted.org/packages/34/f1/8384a6f4aa06ac6427a91656b5f628779979949cd8a4b63e75afbd281327/aioyeelight-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "970dffc45bcffd28470c550e437396b3d327168a55878520833034255e8a1c00",
          "md5": "655db264c675cfca986ce57692477034",
          "sha256": "142ff75df2fa7baf342c9607d427fdcfc689142b00c67eb0897e278b73ce6774"
        },
        "downloads": -1,
        "filename": "aioyeelight-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "655db264c675cfca986ce57692477034",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20659,
        "upload_time": "2020-11-08T12:07:45",
        "upload_time_iso_8601": "2020-11-08T12:07:45.563352Z",
        "url": "https://files.pythonhosted.org/packages/97/0d/ffc45bcffd28470c550e437396b3d327168a55878520833034255e8a1c00/aioyeelight-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34f18384a6f4aa06ac6427a91656b5f628779979949cd8a4b63e75afbd281327",
        "md5": "f836f94cc9946df2d49a7f8049b4f405",
        "sha256": "69d3ea02a55b877b5d8910437c1b899bda06010c08f31c79e25413b177ca83ce"
      },
      "downloads": -1,
      "filename": "aioyeelight-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f836f94cc9946df2d49a7f8049b4f405",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21191,
      "upload_time": "2020-11-08T12:07:32",
      "upload_time_iso_8601": "2020-11-08T12:07:32.386862Z",
      "url": "https://files.pythonhosted.org/packages/34/f1/8384a6f4aa06ac6427a91656b5f628779979949cd8a4b63e75afbd281327/aioyeelight-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "970dffc45bcffd28470c550e437396b3d327168a55878520833034255e8a1c00",
        "md5": "655db264c675cfca986ce57692477034",
        "sha256": "142ff75df2fa7baf342c9607d427fdcfc689142b00c67eb0897e278b73ce6774"
      },
      "downloads": -1,
      "filename": "aioyeelight-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "655db264c675cfca986ce57692477034",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20659,
      "upload_time": "2020-11-08T12:07:45",
      "upload_time_iso_8601": "2020-11-08T12:07:45.563352Z",
      "url": "https://files.pythonhosted.org/packages/97/0d/ffc45bcffd28470c550e437396b3d327168a55878520833034255e8a1c00/aioyeelight-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}