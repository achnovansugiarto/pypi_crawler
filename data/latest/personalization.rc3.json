{
  "info": {
    "author": "Rauan Akylzhanov",
    "author_email": "akylzhanov.r@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "personalization\n_________________\nAn end-to-end demo machine learning pipeline to provide an artifact for a real-time inference service\n# Aim\nWe want to create a machine learning training code which satisfies the following properties that given\ndata can train the model and save it to artifact\n# Solution\nOur implementation of the package 'personalization'\nWe choose to use Polars to read data, it is roughly 2-3 times faster than Pandas and supports nice API for \naggregations and features creation.\nFor the model part, we decided to take lightGBM  due to ts speed, small size (model artifact size up to 50 Mb on 300 million rows of search data) and explainability. The user should choose lightGBM parameters carefully.\nWe tested an example lightgbm params in notebooks/train.ipynb.\n# Offline evaluation\nThe offline evaluation has been done in notebooks/train.ipynb, we can see significant increase in NDCG levels across venues with our model against the baseline.\n# CICD: code style and PyPI\nThe code is checked with pre-commit configs, tested and published in Github Actions, current coverage is around 80 percent.\n\nThe inference service code can be found here https://github.com/ra312/model-server\n# How to run\n1. Obtain sessions.csv and venues.csv and move them to the root folder\n2. Install personalization\n```console\n    python -m pip instal personalization\n```\n3. Run the following command in shell to train pipeline and get artifact:\n   \n```console\npython3 -m personalization \\\n    --sessions-bucket-path sessions.csv \\\n    --venues-bucket-path venues.csv \\\n    --objective lambdarank \\\n    --num_leaves 100 \\\n    --min_sum_hessian_in_leaf 10 \\\n    --metric ndcg --ndcg_eval_at 10 20 \\\n    --learning_rate 0.8 \\\n    --force_row_wise True \\\n    --num_iterations 10 \\\n    --trained-model-path trained_model.joblib\n```\n\n# TODO\nNext steps:\n1. Scalability(e.g. use Flyte)\n2. Data: add support to ingest sessions and venues data from a database\n3. Versioning: add MLFlow integration\n\n[![PyPI version](https://badge.fury.io/py/personalization.svg)](http://badge.fury.io/py/personalization)\n[![Test Status](https://github.com/ra312/personalization/workflows/Test/badge.svg?branch=develop)](https://github.com/ra312/personalization/actions?query=workflow%3ATest)\n[![CI Status](https://github.com/ra312/personalization/workflows/Lint/badge.svg?branch=develop)](https://github.com/ra312/personalization/actions?query=workflow%3ALint)\n[![codecov](https://codecov.io/gh/ra312/personalization/branch/main/graph/badge.svg)](https://codecov.io/gh/ra312/personalization)\n[![Join the chat at https://gitter.im/ra312/personalization](https://badges.gitter.im/ra312/personalization.svg)](https://gitter.im/ra312/personalization?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://pypi.python.org/pypi/personalization/)\n[![Downloads](https://pepy.tech/badge/personalization)](https://pepy.tech/project/personalization)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://timothycrosley.github.io/isort/)\n[![CI](https://github.com/ra312/personalization/actions/workflows/action.yml/badge.svg)](https://github.com/ra312/personalization/actions/workflows/action.yml)\n_________________\n\n## Development\n\n* Clone this repository\n* Requirements:\n  * [Poetry](https://python-poetry.org/)\n  * Python 3.8.1+\n* Create a virtual environment and install the dependencies\n\n```sh\npoetry install\n```\n\n* Activate the virtual environment\n\n```sh\npoetry shell\n```\n\n### Testing\n\n```sh\npytest\n```\n\n### Pre-commit\n\nPre-commit hooks run all the auto-formatters (e.g. `black`, `isort`), linters (e.g. `mypy`, `flake8`), and other quality\n checks to make sure the changeset is in good shape before a commit/push happens.\n\nYou can install the hooks with (runs for each commit):\n\n```sh\npre-commit install\n```\n\nOr if you want them to run only for each push:\n\n```sh\npre-commit install -t pre-push\n```\n\nOr if you want e.g. want to run all checks manually for all files:\n\n```sh\npre-commit run --all-files\n```\n\n---\n\nThis project was generated using the [wolt-python-package-cookiecutter](https://github.com/woltapp/wolt-python-package-cookiecutter) template.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "personalization",
    "package_url": "https://pypi.org/project/personalization/",
    "platform": null,
    "project_url": "https://pypi.org/project/personalization/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/personalization/0.1.1/",
    "requires_dist": [
      "lightgbm (>=3.3.5,<4.0.0)",
      "pandas (>=1.5.3,<2.0.0)",
      "polars (>=0.16.6,<0.17.0)",
      "pyarrow (>=11.0.0,<12.0.0)",
      "scikit-learn (>=1.2.1,<2.0.0)",
      "twine (>=4.0.2,<5.0.0)"
    ],
    "requires_python": ">=3.8.1,<4.0",
    "summary": "An end-to-end machine learning pipeline to train ml model and deploy it to realtime inference endpoint",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17462454,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2c6cab69407b3cf1e97cbaa4d5f9bd760b7babe7911b50afde91918f9523c1c",
          "md5": "740ed517088abc9050ca5285065ea30c",
          "sha256": "d4f21d3ea90e4ec97038db2efd7595eec764bc163b3b82b85267924e86002975"
        },
        "downloads": -1,
        "filename": "personalization-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "740ed517088abc9050ca5285065ea30c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1,<4.0",
        "size": 12952,
        "upload_time": "2023-02-22T14:32:43",
        "upload_time_iso_8601": "2023-02-22T14:32:43.520609Z",
        "url": "https://files.pythonhosted.org/packages/c2/c6/cab69407b3cf1e97cbaa4d5f9bd760b7babe7911b50afde91918f9523c1c/personalization-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dde687510decc13e080cf60ecfe45604b46a5dd83f79952656afe092ba31d914",
          "md5": "79a9c2cd1b9bccf68926c8d79678f5a5",
          "sha256": "01aee6b58f4ceb098ef043bdc60cc60bb37998eff159ce62c0b531c70ad60973"
        },
        "downloads": -1,
        "filename": "personalization-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79a9c2cd1b9bccf68926c8d79678f5a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1,<4.0",
        "size": 14245,
        "upload_time": "2023-02-23T10:50:31",
        "upload_time_iso_8601": "2023-02-23T10:50:31.603197Z",
        "url": "https://files.pythonhosted.org/packages/dd/e6/87510decc13e080cf60ecfe45604b46a5dd83f79952656afe092ba31d914/personalization-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b280a539d6f4366f0d027607ccc952bd8ebdc9413f9d01725124201b4f203c4",
          "md5": "cce882d2dad2a0bd35ff1be36aa1bc74",
          "sha256": "e109e5abe2111fd89cb1001d7327fcb832b277cdfc7ffbd284ba5b069962275e"
        },
        "downloads": -1,
        "filename": "personalization-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cce882d2dad2a0bd35ff1be36aa1bc74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1,<4.0",
        "size": 13028,
        "upload_time": "2023-03-27T14:57:06",
        "upload_time_iso_8601": "2023-03-27T14:57:06.782992Z",
        "url": "https://files.pythonhosted.org/packages/7b/28/0a539d6f4366f0d027607ccc952bd8ebdc9413f9d01725124201b4f203c4/personalization-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b280a539d6f4366f0d027607ccc952bd8ebdc9413f9d01725124201b4f203c4",
        "md5": "cce882d2dad2a0bd35ff1be36aa1bc74",
        "sha256": "e109e5abe2111fd89cb1001d7327fcb832b277cdfc7ffbd284ba5b069962275e"
      },
      "downloads": -1,
      "filename": "personalization-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cce882d2dad2a0bd35ff1be36aa1bc74",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.1,<4.0",
      "size": 13028,
      "upload_time": "2023-03-27T14:57:06",
      "upload_time_iso_8601": "2023-03-27T14:57:06.782992Z",
      "url": "https://files.pythonhosted.org/packages/7b/28/0a539d6f4366f0d027607ccc952bd8ebdc9413f9d01725124201b4f203c4/personalization-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}