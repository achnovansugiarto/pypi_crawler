{
  "info": {
    "author": "MARL",
    "author_email": "brian.mcfee@nyu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "# autopool\nAdaptive pooling operators for Multiple Instance Learning ([documentation](http://autopool.readthedocs.io/)).\n\n[![PyPI](https://img.shields.io/pypi/v/autopool.svg)](https://pypi.python.org/pypi/autopool)\n[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://opensource.org/licenses/MIT)\n[![Documentation Status](https://readthedocs.org/projects/autopool/badge/?version=latest)](http://autopool.readthedocs.io/en/latest/?badge=latest)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/autopool.svg)]()\n\n\nAutoPool is an adaptive (trainable) pooling operator which smoothly interpolates between common pooling operators, such\nas min-, max-, or average-pooling, automatically adapting to the characteristics of the data.\n\nAutoPool can be readily applied to any differentiable model for time-series label prediction. AutoPool is presented in the following paper, where it is evaluated in conjunction with convolutional neural networks for Sound Event Detection:\n\n[Adaptive pooling operators for weakly labeled sound event detection](http://www.justinsalamon.com/uploads/4/3/9/4/4394963/mcfee_autopool_taslp_2018.pdf)<br/>\nBrian Mcfee, Justin Salamon, and Juan Pablo Bello<br/>\nIEEE Transactions on Audio, Speech and Language Processing, In press, 2018.\n\nInstallation\n------------\n\nTo install the keras-based implementation:\n```\npython -m pip install autopool[keras]\n```\nFor the tensorflow implementation:\n```\npython -m pip install autopool[tf]\n```\n\nDefinition\n----------\nAutoPool extends softmax-weighted pooling by adding a trainable parameter α to be learned jointly with all other trainable  model parameters:\n\n<img src=\"https://user-images.githubusercontent.com/3009670/43347985-d3bcc072-91c5-11e8-8074-f9b064d7f5a3.png\" width=\"500px\">\n\nHere, `p(Y|x)` denotes the prediction for an *instance* `x`, and `X` denotes a set (bag) of instances.  The aggregated prediction `P(Y|X)` is a weighted average of the instance-level predictions.\nNote that when α = 0 this reduces to an unweighted mean; when α = 1 this simplifies to soft-max pooling; and when α → ∞ this approaches the max operator. Hence the name: AutoPool.\n\nUsage\n-----\nAutoPool is implemented as a [keras](https://keras.io/) layer, so using it is as straightforward as using any standard Keras pooling layer, for example:\n\n```\nfrom autpool.keras import AutoPool1D\nbag_pred = AutoPool1D(axis=1)(instance_pred)\n```\n\nFurther details and examples are provided in the [documentation](http://autopool.readthedocs.io/).\n\n\nConstrained and Regularized AutoPool\n------------------------------------\nIn the [paper](http://www.justinsalamon.com/uploads/4/3/9/4/4394963/mcfee_autopool_taslp_2018.pdf) we show there can be benefits to either constraining the range α can take, or, alternatively, applying l2 regularization on α; this results in constrained AutoPool (CAP) and regularized AutoPool (RAP) respectively. Since AutoPool is implemented as a [keras](https://keras.io/) layer, CAP and RAP can be can be achieved through the layer's optional arugments:\n\nCAP with non-negative α:\n```python\nbag_pred = AutoPool1D(axis=1, kernel_constraint=keras.constraints.non_neg())(instance_pred)\n```\n\nCAP with α norm-constrained to some value `alpha_max`:\n```python\nbag_pred = AutoPool1D(axis=1, kernel_constraint=keras.constraints.max_norm(alpha_max, axis=0))(instance_pred)\n```\nHeuristics for determining sensible values of `alpha_max` are given in the paper (section III.E).\n\nRAP with l2 regularized α:\n```python\nbag_pred = AutoPool1D(axis=1, kernel_regularizer=keras.regularizers.l2(l=1e-4))(instance_pred)\n```\n\nCAP and RAP can be combined, of course, by applying both a kernel constraint and a kernel regularizer.\n\nIf using the tensorflow-based implementation, all of the above will also work, except that `keras` should be replaced by `tensorflow.keras` (or `tf.keras`), e.g.:\n```python\nimport tensorflow as tf\nfrom autopool.tf import AutoPool1D\nbag_pred = AutoPool1D(axis=1, kernel_regularizer=tf.keras.regularizers.l2(l=1e-4))(instance_pred)\n```\n\nMulti-label\n-----------\nAutoPool directly generalizes to multi-label settings, in which multiple class labels may be applied to each instance x (for example \"car\" and \"siren\" may both be present in an instance). In this setting, a separate auto-pooling operator is applied to each class. Rather than a single parameter α, there is a vector of parameters α_c where c indexes the output vocabulary. This allows a jointly trained model to adapt the pooling strategies independently for each category. Please see the [paper](http://www.justinsalamon.com/uploads/4/3/9/4/4394963/mcfee_autopool_taslp_2018.pdf) for further details.\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marl/autopool",
    "keywords": "",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "autopool",
    "package_url": "https://pypi.org/project/autopool/",
    "platform": null,
    "project_url": "https://pypi.org/project/autopool/",
    "project_urls": {
      "Download": "https://github.com/marl/autopool/releases",
      "Homepage": "https://github.com/marl/autopool",
      "Source": "https://github.com/marl/autopool"
    },
    "release_url": "https://pypi.org/project/autopool/0.2.0/",
    "requires_dist": [
      "keras (>=2.2) ; extra == 'all'",
      "tensorflow (>=2.0) ; extra == 'all'",
      "numpydoc ; extra == 'docs'",
      "sphinx ; extra == 'docs'",
      "sphinx-gallery ; extra == 'docs'",
      "keras (>=2.2) ; extra == 'keras'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "keras (>=2.2) ; extra == 'tests'",
      "tensorflow (>=2.0) ; extra == 'tests'",
      "tensorflow (>=2.0) ; extra == 'tf'"
    ],
    "requires_python": ">=3.6",
    "summary": "Adaptive pooling operators for multiple instance learning",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13582470,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8015d749324bc19edc4ed2ff45e424d4e2722c75b35e9c5efae46fc246da8923",
          "md5": "77e18fac2f5e7dac05fa54dc5e29089a",
          "sha256": "bd6771b4eaa6fc444361a749c883c2e3c372e360fc053f5e841d7146a12936ef"
        },
        "downloads": -1,
        "filename": "autopool-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77e18fac2f5e7dac05fa54dc5e29089a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3844,
        "upload_time": "2018-07-27T21:36:57",
        "upload_time_iso_8601": "2018-07-27T21:36:57.398374Z",
        "url": "https://files.pythonhosted.org/packages/80/15/d749324bc19edc4ed2ff45e424d4e2722c75b35e9c5efae46fc246da8923/autopool-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02e896fad1700e09193353886fc65436c14366653021d0d74f23a4423ab83c87",
          "md5": "4e70368c9a117e84e6b1b384839a81d9",
          "sha256": "cb9545092aba5fb4f386d669813c5fb3f18ee363e175394a872b18510e2ce5b2"
        },
        "downloads": -1,
        "filename": "autopool-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4e70368c9a117e84e6b1b384839a81d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3273,
        "upload_time": "2018-07-27T21:36:58",
        "upload_time_iso_8601": "2018-07-27T21:36:58.636271Z",
        "url": "https://files.pythonhosted.org/packages/02/e8/96fad1700e09193353886fc65436c14366653021d0d74f23a4423ab83c87/autopool-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d306cf725d015799b7ef077ff9d2bb1c9670e161332d049cf4d6fc2d48f540fb",
          "md5": "efaac6e663c6241ac9fe9323b59cff9b",
          "sha256": "c7e915d5784cfa274d034f10451326e40e9c94b952908686b291af8aa61c7dca"
        },
        "downloads": -1,
        "filename": "autopool-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "efaac6e663c6241ac9fe9323b59cff9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7106,
        "upload_time": "2022-04-21T18:31:28",
        "upload_time_iso_8601": "2022-04-21T18:31:28.456953Z",
        "url": "https://files.pythonhosted.org/packages/d3/06/cf725d015799b7ef077ff9d2bb1c9670e161332d049cf4d6fc2d48f540fb/autopool-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a726be62cd9ac4d454e78b2f1fa378d3e1a43d98485cc01ae7ca3ac102fdcef9",
          "md5": "3a243397f5fddb29f6d4b2bde2ab8395",
          "sha256": "e30b5f78a70f0d577570e03dcbbda030889f3a2d63ecdb8200b72184dd48d7cc"
        },
        "downloads": -1,
        "filename": "autopool-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3a243397f5fddb29f6d4b2bde2ab8395",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5536,
        "upload_time": "2022-04-21T18:31:29",
        "upload_time_iso_8601": "2022-04-21T18:31:29.897628Z",
        "url": "https://files.pythonhosted.org/packages/a7/26/be62cd9ac4d454e78b2f1fa378d3e1a43d98485cc01ae7ca3ac102fdcef9/autopool-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d306cf725d015799b7ef077ff9d2bb1c9670e161332d049cf4d6fc2d48f540fb",
        "md5": "efaac6e663c6241ac9fe9323b59cff9b",
        "sha256": "c7e915d5784cfa274d034f10451326e40e9c94b952908686b291af8aa61c7dca"
      },
      "downloads": -1,
      "filename": "autopool-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efaac6e663c6241ac9fe9323b59cff9b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7106,
      "upload_time": "2022-04-21T18:31:28",
      "upload_time_iso_8601": "2022-04-21T18:31:28.456953Z",
      "url": "https://files.pythonhosted.org/packages/d3/06/cf725d015799b7ef077ff9d2bb1c9670e161332d049cf4d6fc2d48f540fb/autopool-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a726be62cd9ac4d454e78b2f1fa378d3e1a43d98485cc01ae7ca3ac102fdcef9",
        "md5": "3a243397f5fddb29f6d4b2bde2ab8395",
        "sha256": "e30b5f78a70f0d577570e03dcbbda030889f3a2d63ecdb8200b72184dd48d7cc"
      },
      "downloads": -1,
      "filename": "autopool-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3a243397f5fddb29f6d4b2bde2ab8395",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5536,
      "upload_time": "2022-04-21T18:31:29",
      "upload_time_iso_8601": "2022-04-21T18:31:29.897628Z",
      "url": "https://files.pythonhosted.org/packages/a7/26/be62cd9ac4d454e78b2f1fa378d3e1a43d98485cc01ae7ca3ac102fdcef9/autopool-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}