{
  "info": {
    "author": "clkr",
    "author_email": "clkrv1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "**Information Systems Security Project**\n\n**Cihat Emre Ã‡eliker, 20160808028**\n***\n\n# Hider [![Build Status](https://www.travis-ci.com/cihatceliker/hider.svg?branch=main)](https://www.travis-ci.com/cihatceliker/hider)\n\n`\"Steganography is the practice of concealing a message within another message or a physical object.\"`\n\nHider is a package that is capable of hiding text or images in an image using bit manipulation techniques and random number generators to make unbreakable encryptions.\n\n***\n## Installation\n```\npip install hider\n```\n\n***\n## Method\nThere are a couple of different encoding options. All options require a key that is the same for both parties:\n\n1. Smaller image or images in a bigger image:\n    1. Calculate the volume of the bigger image. The product of the three dimensions.\n    2. Resize the images that will be hidden to a specified size. This is a hyperparameter defined in the `hp.py` file.\n    3. Divide the volume of the bigger image to the volume of a smaller image and determine how many small images can fit in the bigger one. This number is the maximum number of small images that can be hidden. It will be used when decoding.\n    4. Flatten all the images and randomly generate indexes for all images that will be hidden, in a way that no hidden image will overlap.\n    5. Put the smaller images into the randomly generated indexes. Let's say:\n        - A value of the bigger image represented in a byte is:\n            - P1 = 0110 1010\n        - A value of the smaller image represented in a byte is:\n            - P2 = 1011 0001\n        - To combine these two values, simply, the smaller image's most significant 4 bits will be the combined image's least significant 4 bits. So the resulting value is:\n            - P3 = 0110 1011\n            - First 4 bits are the bigger image's most significant bits and the last 4 bits are the smaller image's most significant bits.\n        - For all the generated indexes for the smaller image, these steps are done and the smaller image is hidden in the bigger one. If the hidden data is not needed to be at the highest quality as possible, a way more secure way would be to combine these two bytes using 6 bits from the bigger image and only 2 bits from the smaller one.\n    6. Return the bigger image with hidden images in it, after reshaping it to the original size.\n    * To extract the hidden images from a bigger image, the steps are reversed.\n        - The same key is used to generate indexes.\n        - Both parties don't need to communicate the number of hidden images. The decoder will find the maximum number of possible hidden images, will generate indexes, and will return all found images. For example, if there are 4 hidden images and the maximum number of hidden images is 8, the decoder will return 8 images. The first 4 are the hidden ones, the rest is just noise.\n\n2. Text in image:\n    1. Add padding to the text to make it the same size as the max possible text size that is defined in the `hp.py` file.\n    2. Convert the text to an array of 1's and 0's.\n    3. Generate random indexes using the key.\n    4. Flatten the image.\n    5. Convert the least significant bits of the flattened image's chosen indexes to the bits of the text.\n    6. Add salt to randomly chosen indexes to prevent someone with the original data to extract the shuffled bits of the hidden text.\n    7. Return the image that has text hidden in it after removing the padding.\n    - To decode it, steps are reversed, the key directly gives the indexes of bits of the hidden text.\n\n***\n## Results\n\n`Without using the random number generators, any data that is hidden can easily be extracted if someone knows where to look. However, hiding the data using randomness, makes it impossible(chances are really low, but not 0) to crack even if someone has the original data. Any hidden data is just noise without the right key. It's surprising to see how much data can be hidden into an image with just some minor tweaks to bytes.`\n***\n## Experiments\n\n* ### Image in image\n\nFor the experiments, 4 important images will be hidden in a cover image.\n```python\nfrom PIL import Image\nfrom hider.core import image_in_image\n\nimage_fn = [\"figs/cover_image.jpg\", \n            \"figs/hidden1.jpg\", \"figs/hidden2.png\", \n            \"figs/hidden3.jpg\", \"figs/hidden4.png\"]\nimages = [Image.open(image) for image in image_fn]\n\n# encoding\nimage_with_hidden_images = image_in_image(*images, key=1)\n\n# decoding\nhidden_images = image_in_image(image_with_hidden_images, key=1)\n```\n\nNow let's see the difference. Which one is the original?\n\n<img src=\"figs/r4_original_and_combined.png\" width=\"800\" height=\"400\">\n\nThe bottom one is the original and the upper one is the image with hidden images in it. A little bit of difference can be seen in the color of the sky.\n***\nNow let's see the hidden images extracted from the cover image.\n\n<img src=\"figs/r4_outputs.png\" width=\"1200\" height=\"240\">\n\nWhen decoding the image, the decoder doesn't know the number of hidden images in the given image, so it will extract all it can. This is the reason for the last one on the right.\n\nThe experiments on top are done using the default value for the `ratio` parameter, 4. This parameter chooses the number of bits taken from the cover image. More ratio means higher quality for cover and lowers for hidden images and vice versa. \n\nNow let's try different ratios.\n\n***\nFor ratio 2, we keep 2 bits from the cover and 6 bits from the hidden images.\n\n<img src=\"figs/r2_original_and_combined.png\" width=\"800\" height=\"400\">\n\nNow the difference in the cover image is much more obvious and the hidden images have a bit higher quality, 2 bits per value.\n\n<img src=\"figs/r2_outputs.png\" width=\"1200\" height=\"240\">\n\n***\n\nFor ratio 6, we keep 6 bits from the cover and 2 bits from the hidden images.\n\n<img src=\"figs/r6_original_and_combined.png\" width=\"800\" height=\"400\">\n\nNow the difference in the cover image is almost impossible to tell with the human eye and the hidden images have much lower quality, 2 bits per value.\n\n<img src=\"figs/r6_outputs.png\" width=\"1200\" height=\"240\">\n\n***\n\nThe value of the ratio should be as high as possible for as much invisibility as possible.\n\n\n\n* ### Text in image\n\n\nAn example code to hide text in an image.\n```python\nfrom PIL import Image\nfrom hider.core import text_in_image\n\nimage = Image.open(\"figs/cover_image.jpg\")\n\ntext = \"\"\"Lorem Ipsum is ......... istic words etc.\"\"\"\n\n# encoding\nimage_with_text_in_it = text_in_image(image, key=1, text=text)\n\n# decoding\nhidden_text = text_in_image(image_with_text_in_it, key=1)\n```\n\nSince hiding text in an image requires only changing a bit, the resulting image is impossible to differentiate from the original one, therefore we'll not show it here.\n\n***\n### Note:\n* To be able to transfer an image with data hidden in it without a loss of information, use `png` file format, most of the other formats(`jpg`, `jpeg`, etc.) are lossy.\n* The images can easily be saved using `image.save(\"[filename].png\")`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cihatceliker/hider",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hider",
    "package_url": "https://pypi.org/project/hider/",
    "platform": "",
    "project_url": "https://pypi.org/project/hider/",
    "project_urls": {
      "Bug Tracker": "https://github.com/cihatceliker/hider/issues",
      "Homepage": "https://github.com/cihatceliker/hider"
    },
    "release_url": "https://pypi.org/project/hider/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Image steganography package.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10286988,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ea48fbe13ade870fe8355fabf6084cf1140577fb54fc6a7144cdbb2daa3251b",
          "md5": "4d525ff0a48c7eed37267011b2b7269e",
          "sha256": "ba7593793dde812001f3a2e2b735bb6eb651c17cfe941253aaf0c2fbe68518a4"
        },
        "downloads": -1,
        "filename": "hider-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d525ff0a48c7eed37267011b2b7269e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5448,
        "upload_time": "2021-05-05T13:05:48",
        "upload_time_iso_8601": "2021-05-05T13:05:48.238659Z",
        "url": "https://files.pythonhosted.org/packages/2e/a4/8fbe13ade870fe8355fabf6084cf1140577fb54fc6a7144cdbb2daa3251b/hider-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce648c939808ee1a1811641903f8e1fae44c0b64c5dbf20ed08e949ec4d29ffe",
          "md5": "9eca411490f46d61676a881e6762b1e9",
          "sha256": "440e694f1ba309cfeec61aa6d85833e4b879ba2300b8ac4b12e37fb0fafe4180"
        },
        "downloads": -1,
        "filename": "hider-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9eca411490f46d61676a881e6762b1e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5131,
        "upload_time": "2021-05-05T13:05:49",
        "upload_time_iso_8601": "2021-05-05T13:05:49.474780Z",
        "url": "https://files.pythonhosted.org/packages/ce/64/8c939808ee1a1811641903f8e1fae44c0b64c5dbf20ed08e949ec4d29ffe/hider-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b48d12c90648f2be4a77fcf81dc543f599344f2823036ef5345fbcbf106aa80",
          "md5": "6d5db3c0427dbdea9cd80a39ea6d14e4",
          "sha256": "f62ec5681986e7a902952c1d36c7b6258a2697c1e59e041dcad6183ef41cae59"
        },
        "downloads": -1,
        "filename": "hider-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d5db3c0427dbdea9cd80a39ea6d14e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10278,
        "upload_time": "2021-05-06T12:49:50",
        "upload_time_iso_8601": "2021-05-06T12:49:50.715502Z",
        "url": "https://files.pythonhosted.org/packages/9b/48/d12c90648f2be4a77fcf81dc543f599344f2823036ef5345fbcbf106aa80/hider-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee9fe5caf7bd1dca891cda82e382b9ecf1baf8ab9259a182dd1ed79370ab73d5",
          "md5": "a56d44c13518fd8cb1a316bc7da11c94",
          "sha256": "ce2225f2126c37dde46275553054f959ec27b396360a364dc0d71ffd308cea25"
        },
        "downloads": -1,
        "filename": "hider-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a56d44c13518fd8cb1a316bc7da11c94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11310,
        "upload_time": "2021-05-06T12:49:52",
        "upload_time_iso_8601": "2021-05-06T12:49:52.787479Z",
        "url": "https://files.pythonhosted.org/packages/ee/9f/e5caf7bd1dca891cda82e382b9ecf1baf8ab9259a182dd1ed79370ab73d5/hider-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aed230999c0cccc7e9d04c84421c8351e2a8912681c96f1c2bcdb187626bba22",
          "md5": "d510f5283d6b20713373a08bddfe9de8",
          "sha256": "4c28bfbb8843beac5631c2afcedac38f69d731b1e8155cf2d469a7e2ea5ff1b5"
        },
        "downloads": -1,
        "filename": "hider-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d510f5283d6b20713373a08bddfe9de8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10348,
        "upload_time": "2021-05-07T13:39:29",
        "upload_time_iso_8601": "2021-05-07T13:39:29.530784Z",
        "url": "https://files.pythonhosted.org/packages/ae/d2/30999c0cccc7e9d04c84421c8351e2a8912681c96f1c2bcdb187626bba22/hider-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac299508dbb320e1a451ce9bb53d82dcd05c5b82532d765cc90cce9697099c83",
          "md5": "5d2feb578211f5a90bf99918fc1a8e91",
          "sha256": "990b59da9ca8848857316a72fa4966f398e8fca7e1b51d866dd907dbb91bf0d4"
        },
        "downloads": -1,
        "filename": "hider-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5d2feb578211f5a90bf99918fc1a8e91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11474,
        "upload_time": "2021-05-07T13:39:32",
        "upload_time_iso_8601": "2021-05-07T13:39:32.378783Z",
        "url": "https://files.pythonhosted.org/packages/ac/29/9508dbb320e1a451ce9bb53d82dcd05c5b82532d765cc90cce9697099c83/hider-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aed230999c0cccc7e9d04c84421c8351e2a8912681c96f1c2bcdb187626bba22",
        "md5": "d510f5283d6b20713373a08bddfe9de8",
        "sha256": "4c28bfbb8843beac5631c2afcedac38f69d731b1e8155cf2d469a7e2ea5ff1b5"
      },
      "downloads": -1,
      "filename": "hider-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d510f5283d6b20713373a08bddfe9de8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10348,
      "upload_time": "2021-05-07T13:39:29",
      "upload_time_iso_8601": "2021-05-07T13:39:29.530784Z",
      "url": "https://files.pythonhosted.org/packages/ae/d2/30999c0cccc7e9d04c84421c8351e2a8912681c96f1c2bcdb187626bba22/hider-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac299508dbb320e1a451ce9bb53d82dcd05c5b82532d765cc90cce9697099c83",
        "md5": "5d2feb578211f5a90bf99918fc1a8e91",
        "sha256": "990b59da9ca8848857316a72fa4966f398e8fca7e1b51d866dd907dbb91bf0d4"
      },
      "downloads": -1,
      "filename": "hider-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5d2feb578211f5a90bf99918fc1a8e91",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11474,
      "upload_time": "2021-05-07T13:39:32",
      "upload_time_iso_8601": "2021-05-07T13:39:32.378783Z",
      "url": "https://files.pythonhosted.org/packages/ac/29/9508dbb320e1a451ce9bb53d82dcd05c5b82532d765cc90cce9697099c83/hider-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}