{
  "info": {
    "author": "zhijian.yang",
    "author_email": "zhijianyang@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Surreal-GAN\nSurreal-GAN is a semi-supervised representation learning method that is designed to identify disease-related heterogeneity among the patient group.  Surreal-GAN parses complex disease-related imaging patterns into low dimensional representation indices (r-indices), with each dimension indicating the severity of one relatively homogeneous imaging pattern.\n\nThe key point of the Surreal-GAN model is modeling disease as a continuous process and learning infinite transformation directions from CN to PT, with each direction capturing a specific combination of patterns and severity. The idea is realized by learning one transformation function, f, which takes both normal data and a continuous latent variable as inputs and output synthesized-PT data whose distribution is indistinguishable from that of real PT data. (As shown in the schematic diagram) Several different regularizations were introduced to further guide the transformation function. An inverse function g, jointly trained with f, is used for deriving R-indices after the training process.\n\n![image info](./datasets/SURREAL-GAN.png)\n\n## License\nCopyright (c) 2016 University of Pennsylvania. All rights reserved. See[ https://www.cbica.upenn.edu/sbia/software/license.html](https://www.cbica.upenn.edu/sbia/software/license.html)\n\n## Installation\nWe highly recommend the users to install **Anaconda3** on their machine. After installing Anaconda3, Smile-GAN can be used following this procedure:\n\nWe recommend the users to use the Conda virtual environment:\n\n```bash\n$ conda create --name surrealgan python=3.8\n```\nActivate the virtual environment\n\n```bash\n$ conda activate surrealgan\n```\n\nInstall SurrealGAN from PyPi:\n\n```bash\n$ pip install SurrealGAN\n```\n\n\n\n## Input structure\nThe main function of SurrealGAN basically takes two panda dataframes as data inputs, **data** and **covariate** (optional). Columns with names *'participant_id'* and *'diagnosis'* must exist in both dataframes. Some conventions for the group label/diagnosis: -1 represents healthy control (CN) and 1 represents patient (PT); categorical variables, such as sex, should be encoded to numbers: Female for 0 and Male for 1, for example. \n\nExample for **data**:\n\n```bash\nparticipant_id    diagnosis    ROI1    ROI2 ...\nsubject-1\t    -1         325.4   603.4\nsubject-2            1         260.5   580.3\nsubject-3           -1         326.5   623.4\nsubject-4            1         301.7   590.5\nsubject-5            1\t       293.1   595.1\nsubject-6            1         287.8   608.9\n```\nExample for **covariate**\n\n```bash\nparticipant_id    diagnosis    age    sex ...\nsubject-1\t    -1         57.3   0\nsubject-2 \t     1         43.5   1\nsubject-3           -1         53.8   1\nsubject-4            1         56.0   0\nsubject-5            1\t       60.0   1\nsubject-6            1         62.5   0\n```\n\n## Example\nWe offer a toy dataset in the folder of SurrealGAN/dataset.\n\n```bash\nimport pandas as pd\nfrom SurrealGAN.Surreal_GAN_representation_learning import repetitive_representation_learning\n\ntrain_data = pd.read_csv('train_roi.csv')\ncovariate = pd.read_csv('train_cov.csv')\n\noutput_dir = \"PATH_OUTPUT_DIR\"\nnpattern = 3\nfinal_saving_epoch = 25000\nmax_epoch = 26000\n\n## two important hyperparamters\nlam = 0.2\ngamma = 6\n```\n\nThere are some hyper parameters need to be set by the user:\n\n***batch\\_size***: Size of the batch for each training epoch. (Default to be 100) It is **necessary** to be reset to 1/8 - 1/10 of the PT sample size.\n\n***lam***: coefficient controlling the relative importance of cluster\\_loss in training objective function. (Default to be 0.2) It is **necessary** to try different ***lam*** values between 0.05 and 0.6 and use results that give the highest **pattern-agr-index** and **pattern-diff-agr-index** as returned in the output file.\n\n***gamma***: coefficient controlling the relative importance of change\\_loss in training objective function. (Default to be 6). It is **necessary** to try different ***gamma*** values between 0.5 and 8 and use results that give the highest **pattern-agr-index** and **pattern-diff-agr-index** as returned in the output file.\n\n***saving\\_freq***: the frequency (epochs) at which the model will be saved during the training process (Default to be 1000). One of the saved models will be determined optimal and used for deriving final results after the training procedure.\n\n\n```bash\t\t\t\t    \nrepetition_number = 20  # number of repetitions (at least 5 repetition\\\n\t   is need to give the most reliable and reproducible result)\ndata_fraction = 1 # fraction of data used in each repetition\nrepetitive_representation_learning(train_data, npattern, repetition_number, data_fraction, final_saving_epoch, max_epoch, output_dir, \\\n\t\tlr = 0.0008, batchsize=120, verbose=False, lipschitz_k=0.5, covariate= None, start_repetition=0, lam=lam, gamma = gamma)\n```\n\n**repetitive\\_representation\\_learning** is the **main** function for representation learning via Surreal-GAN. It performs the representation learning process repetitively with a pre-defined number of repetitions. Each repetition will save models in a subfolder called \"repetition_i\", in which the model will be saved every ***saving\\_freq*** epochs before the final\\_saving\\_epoch while saving criteria are satisfied. The function will automatically choose the optimal saving epochs via **pattern-agr-index** and **pattern-diff-agr-index** (explained below) among results. \n\nAfter determining the optimal saving epoch, the repetition which has the highest agreements (measured by the sum of **pattern-agr-index** and **pattern-diff-agr-index**) with all other repetitions will be used to derive the final R-indices. Given the randomness in training procedure, it is necessary to run **at least 10 repetitions** to derive a reliable and reproducible result. \n\nSince the repetition training process may take a long training time on a normal desktop computer, the function enables early stop and later resumption. Users can set ***stop\\_repetition*** to be an early stopping point and ***start\\_repetition*** to be the starting repetition index. This will also enable the user to run several repetitions in parallel.\n\nThe function automatically saves a csv file with clustering results and returns the same dataframe. The dataframe also includes the **path to the final selected model** (the model used for deriving final R-indices), average **pattern-agr-index** and **pattern-diff-agr-index** across all repetitively derived results, as well as **selected model pattern-agr-index** and **selected model pattern-diff-agr-index**.\n\n**Two evaluation metrics used for measuring agreements between results and selecting the optimal model:**\n\n* **pattern-agr-index**: With M dimensional R-indices derived by two different models defined as r<sup>1</sup> and r<sup>2</sup>, **pattern-agr-index** is defined as the average of M concordance indices for all dimensions, C(r<sup>1</sup><sub>i</sub>, r<sup>2</sup><sub>i</sub>).\n\n* **pattern-diff-agr-index**: With M dimensional R-indices derived by two different models defined as r<sup>1</sup> and r<sup>2</sup>, **pattern-diff-agr-index** is defined as the average of M(M-1)/2 concordance indices for differences among all dimensions, C(r<sup>1</sup><sub>i</sub>-r<sup>1</sup><sub>j</sub>, r<sup>2</sup><sub>i</sub>-r<sup>2</sup><sub>j</sub>).\n\n```\t\t\t\t\t    \nmodel_dir = 'PATH_TO_SAVED_MODEL' #the path to the final selected model (the one returned by function \"repetitive_representation_learning\")\nr_indices = apply_saved_model(model_dir, train_data, covariate=None)\n```\n**apply\\_saved\\_model** is a function used for deriving representation (R-indices) for **new patient data** using a previously saved model. Input data and covariate (optional) should be panda dataframe with the same format shown before. Only PT data, for which the users want to derive R-indices, need to be provided with diagnoses set to be 1. PT data can be any samples inside or outside of the training set. ***The function returns R-indices of PT data following the order of PT in the provided dataframe.***\n\n\n## Citation\nIf you use this package for research, please cite the following paper:\n\n\n```bash\n@inproceedings{yang2022surrealgan,\ntitle={Surreal-{GAN}:Semi-Supervised Representation Learning via {GAN} for uncovering heterogeneous disease-related imaging patterns},\nauthor={Zhijian Yang and Junhao Wen and Christos Davatzikos},\nbooktitle={International Conference on Learning Representations},\nyear={2022},\nurl={https://openreview.net/forum?id=nf3A0WZsXS5}\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zhijian-yang/SurrealGAN",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SurrealGAN",
    "package_url": "https://pypi.org/project/SurrealGAN/",
    "platform": null,
    "project_url": "https://pypi.org/project/SurrealGAN/",
    "project_urls": {
      "Homepage": "https://github.com/zhijian-yang/SurrealGAN"
    },
    "release_url": "https://pypi.org/project/SurrealGAN/0.0.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python implementation of Surreal-GAN for semisupervised representation learning",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16123740,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7738b74c6eafaedb6c61c0f76075e8eb0def8dadc5b51b70bd1e6d456167c41",
          "md5": "57ee73d2e9b3dfa79ab4ba233a2ecc3d",
          "sha256": "3f9ddc34d358d2409d16088baa680d427369484e2a9d323a3bbab4f4733eb322"
        },
        "downloads": -1,
        "filename": "SurrealGAN-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57ee73d2e9b3dfa79ab4ba233a2ecc3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17126,
        "upload_time": "2022-07-02T03:32:20",
        "upload_time_iso_8601": "2022-07-02T03:32:20.631846Z",
        "url": "https://files.pythonhosted.org/packages/e7/73/8b74c6eafaedb6c61c0f76075e8eb0def8dadc5b51b70bd1e6d456167c41/SurrealGAN-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91a578e9d81018a19a8e45d571376dc589ab6f92a5b5f5b890dd9805a4e938bb",
          "md5": "c951bd9832ddb21fe890311a584b2c80",
          "sha256": "72092a4ddbc6424c82c66d895851f66468af9aec299f67e4b5615a3ad9962773"
        },
        "downloads": -1,
        "filename": "SurrealGAN-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c951bd9832ddb21fe890311a584b2c80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17728,
        "upload_time": "2022-07-02T03:32:22",
        "upload_time_iso_8601": "2022-07-02T03:32:22.760210Z",
        "url": "https://files.pythonhosted.org/packages/91/a5/78e9d81018a19a8e45d571376dc589ab6f92a5b5f5b890dd9805a4e938bb/SurrealGAN-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adf0131307dccfb394d5f1dddc55988969408d2f3bb561aa382fd5fa498acc55",
          "md5": "bfcd501b9420288097673851b0c41883",
          "sha256": "c0f1536d562488a3bfd1ea4ef3f9a5b51a094fc0b798a22fa6879cba2a43cfaf"
        },
        "downloads": -1,
        "filename": "SurrealGAN-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bfcd501b9420288097673851b0c41883",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17125,
        "upload_time": "2022-07-02T03:35:48",
        "upload_time_iso_8601": "2022-07-02T03:35:48.360544Z",
        "url": "https://files.pythonhosted.org/packages/ad/f0/131307dccfb394d5f1dddc55988969408d2f3bb561aa382fd5fa498acc55/SurrealGAN-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2867d2bf2f87d35feb70204178851412b69b507a46c8ee6325bf5eba8779fa8",
          "md5": "edceb3c9cc0175aad01148528f187d5c",
          "sha256": "7cf4dbbda502fcba72574d49485bfa47a84042195a6daf1d8c2d710421bc5456"
        },
        "downloads": -1,
        "filename": "SurrealGAN-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "edceb3c9cc0175aad01148528f187d5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17721,
        "upload_time": "2022-07-02T03:35:50",
        "upload_time_iso_8601": "2022-07-02T03:35:50.021109Z",
        "url": "https://files.pythonhosted.org/packages/a2/86/7d2bf2f87d35feb70204178851412b69b507a46c8ee6325bf5eba8779fa8/SurrealGAN-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b70ccfa20464a9370da93208542590eeb273bf496ae1687055d23b05d8e45e26",
          "md5": "637e4272b74530f062d3046965398055",
          "sha256": "f71435df55dc9302a7cfdb4706b4bed1a6fd8bb6b5f47d0439478694a868ef5d"
        },
        "downloads": -1,
        "filename": "SurrealGAN-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "637e4272b74530f062d3046965398055",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17732,
        "upload_time": "2022-07-05T14:02:00",
        "upload_time_iso_8601": "2022-07-05T14:02:00.367547Z",
        "url": "https://files.pythonhosted.org/packages/b7/0c/cfa20464a9370da93208542590eeb273bf496ae1687055d23b05d8e45e26/SurrealGAN-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12a5c4d23f90a8f5b1b13ce48f190f6ee7f1eb87da27cd1132072f4d6eb9fe53",
          "md5": "02b42dd4018444614be6c7e388fe09c4",
          "sha256": "ac0bde45a0e0a72f7c9f9319d1c2dc22d6a0d245c4e6ae91f442b68a82fa6690"
        },
        "downloads": -1,
        "filename": "SurrealGAN-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "02b42dd4018444614be6c7e388fe09c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18074,
        "upload_time": "2022-12-02T02:40:07",
        "upload_time_iso_8601": "2022-12-02T02:40:07.848453Z",
        "url": "https://files.pythonhosted.org/packages/12/a5/c4d23f90a8f5b1b13ce48f190f6ee7f1eb87da27cd1132072f4d6eb9fe53/SurrealGAN-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96f3a6159607ae9759622a86d51631d1abebe321cc704a05d7e6e5a047cd3002",
          "md5": "dcef2af1472a0adca1c399ddbe222b8e",
          "sha256": "66f3defb3d319fc2e0f1ecabf7a8949ff0ba3ae3c88b167163a5b5c242a9004f"
        },
        "downloads": -1,
        "filename": "SurrealGAN-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "dcef2af1472a0adca1c399ddbe222b8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17111,
        "upload_time": "2022-12-16T02:43:01",
        "upload_time_iso_8601": "2022-12-16T02:43:01.749827Z",
        "url": "https://files.pythonhosted.org/packages/96/f3/a6159607ae9759622a86d51631d1abebe321cc704a05d7e6e5a047cd3002/SurrealGAN-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afcd294c247d82bdfa877a79e3a69e6ae96ed6c8ebcd0ce7e639f7918778f327",
          "md5": "29eee0299c3bafcf3003dcb5f4ecb9b6",
          "sha256": "0b2165c2a2ce55b6abb55e122476bea5cbf7616dc8d546e323740b630923a536"
        },
        "downloads": -1,
        "filename": "SurrealGAN-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "29eee0299c3bafcf3003dcb5f4ecb9b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17145,
        "upload_time": "2022-12-16T09:04:05",
        "upload_time_iso_8601": "2022-12-16T09:04:05.983924Z",
        "url": "https://files.pythonhosted.org/packages/af/cd/294c247d82bdfa877a79e3a69e6ae96ed6c8ebcd0ce7e639f7918778f327/SurrealGAN-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "afcd294c247d82bdfa877a79e3a69e6ae96ed6c8ebcd0ce7e639f7918778f327",
        "md5": "29eee0299c3bafcf3003dcb5f4ecb9b6",
        "sha256": "0b2165c2a2ce55b6abb55e122476bea5cbf7616dc8d546e323740b630923a536"
      },
      "downloads": -1,
      "filename": "SurrealGAN-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "29eee0299c3bafcf3003dcb5f4ecb9b6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17145,
      "upload_time": "2022-12-16T09:04:05",
      "upload_time_iso_8601": "2022-12-16T09:04:05.983924Z",
      "url": "https://files.pythonhosted.org/packages/af/cd/294c247d82bdfa877a79e3a69e6ae96ed6c8ebcd0ce7e639f7918778f327/SurrealGAN-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}