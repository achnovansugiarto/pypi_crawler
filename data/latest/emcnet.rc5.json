{
  "info": {
    "author": "J. M. Fife",
    "author_email": "jmfife@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# EMCNet\nEnergy Monitoring and Control Network\nEMCNet is a Cloud-Edge IoT infrastructure that is flexible, configurable, and tolerant to communication loss.\n\nThis package contains the core central components of EMCNet.  Most of this code\nis\n1. intended to run on a central server within the EMCNet HQ LAN (or in the cloud in the future \n   if/when scalability becomes an issue), or\n2. provide epcnet-specific utilities to device, edge, or gateway packages\n\nOther packages such as `bigbird` contain the files that run at the device, edge, \nor gateway-level but are compatible with EMCNet.\n\n![EMCNet Diagram](docs/img/emcnet_diagram.png)\n\n## Installation\n\n### Hardware\n\nEMCNet is being designed to accommodate many different site configurations,\neach with a different site ID, but the first use case is that of a camper van with a lithium battery and\nsolar generator.  The first test site ID `bigbird`.\n\nTo measure current and voltage, we need some hardware.  In the case of the first EMCNet\ntest site, BigBird, the needed hardware is an INA226 chip and a serial USB connection to a Victron MPPT \nsolar/battery charge controller.  A shematic of BigBird elecrical system is as follows:\n\n![EMCNet Diagram](docs/img/BigBird-Electrical-System-II.png)\n\nThe main part of the electrical system of BigBird is pictured below, along with a view of the\ncontrol panel.\n\n![EMCNet Diagram](docs/img/photo_electrical_system.png)\n\n![EMCNet Diagram](docs/img/photo_electrical_panel.png)\n\n\nFor the INA226, BigBird uses a module that can be purchased \nfrom Amazon [here](https://www.amazon.com/gp/product/B07PMNQ2DQ).  I followed \n[this](https://github.com/MarioAriasGa/raspberry-pi-ina226) guide to\nget it working.\n\n### Software - Raspberry Pi\n\nFirst, set up the RPi with one of the Raspian OS distros.  There are many online tutorials for this.\nI usually:\n1. Install Raspian Lite to the SD card using the Raspberry Pi Imager for MacOS\n2. Add the empty file \"ssh\" to the root (boot) directory on the SD card (you can use TextEdit)\n3. Insert the SD card into the Raspberry Pi\n4. Install a USB newtork dongle into the pi and connect it directly to your router.  Alternately, insert the\n   SD card into another computer, and create `wpa_supplicant.conf` file in the root directory of it.\n   Then, insert it into the Pi.\n5. Boot the Pi\n6. From your PC, `ssh pi@raspberrypi.local` and log in with the default password `raspberry`\n7. Update the OS\n    ```\n    sudo apt-get update\n    sudo apt-get dist-upgrade\n    ```\n7. Change the account password for user `pi` using the command `passwd`\n8. Add a user account for yourself and add yourself to the important groups:\n    ```\n    sudo adduser <your username>\n    sudo usermod newuser_name -a -G pi,adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,spi,i2c,gpio\n    ```\n9. If you like, you can change the `sudoers` file so members of the `sudo` group can do `sudo` without re-entering \ntheir password each time. \nRun `sudo visudo` and make sure the line `%sudo   ALL=(ALL:ALL) NOPASSWD:ALL` appears.\n10. Run `raspi-config` and make the following changes:\n    1. In Network Options, set localization and log onto the local wifi network\n    2. In Network Options, change the hostname if you like\n    3. In Interfacing Options, turn on SSH and I2C\n11. It is also recommended to make sure the HDMI port is turned off - it is not needed in the BigBird application.\n    ```\n    sudo /opt/vc/bin/tvservice -o\n    ```\n12. Reboot - `sudo reboot`\n13. SSH wirelessly and edit the `wpa-supplicant.conf` file to add other wireless networks:\n    ```\n    ssh <your username>@<new hostname>.local\n    sudo nano /etc/wpa_supplicant/wpa_supplicant.conf\n    ```\n    After, the `wpa_supplicant.conf` file should look something like this:\n    ```\n    ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n    update_config=1\n    country=US\n    autoscan=periodic:10\n    \n    network={\n            ssid=\"CasaFife\"\n            psk=\"<password1>\" \n    }\n    \n    network={\n            ssid=\"DENBend\"\n            psk=\"<password2>\"\n    }\n    \n    network={\n            ssid=\"Fife's Pixel\"\n            psk=\"<password3>\"\n    }\n\n    network={\n            ssid=\"MikeEnelXBigBird\"\n            psk=\"<password4>\"\n    }\n    ```\n\nDuring the process above, be sure to remember the new password for user `pi` to something you will remember.  \nAnd you may want to create\na new account and use that for most of your work.  That way, if things go wrong (I have accidentally lost `sudo` \nprivileges for example) you can go back to the pi account and recover more quickly by creating a new account \nfrom there.\n\nPython 3 comes pre-installed on Raspian.  But for running BigBird on a Raspberry Pi, there are some dependencies:\n```\nsudo apt-get install -y python3-pip python3-dev libatlas3-base\nsudo apt-get install -y mosquitto mosquitto-clients\n```\n\nInstalling `mosquitto` as above is fine but versions prior to 1.6.9 have a bug that prevents the\nproper caching of messages and persistence when communications over a bridge is lost.  To build and\ninstall a newer version of `mosquitto`, follow \n[this](https://github.com/bapowell/bapowell.github.io/wiki/Mosquitto-Build-Notes-(Linux)) guide.\nexcept:\n1. Dont worry about installing websockets\n2. Download the latest source from https://mosquitto.org/download/\n3. Also install `libcjson` with `sudo apt install libcjson1 libcjson-dev` \n4. Alsi install `systemd` dev library with `sudo apt-get install libsystemd-dev`\n5. In the `config.mk` file, set WITH_TLS:=no, WITH_TLS_PSK:=no, WITH_SRV:=no, and WITH_SYSTEMD:=yes\n6. `make`\n7. Copy files\n   ```\n   cd src\n   sudo cp mosquitto /usr/sbin\n   \n   ```\n8. Change permissions on the PID file location:\n    ```\n    sudo mkdir -m 755 /var/run/mosquitto\n    sudo chown mosquitto /var/run/mosquitto\n    ``` \n9. Create a new /etc/mosquitto/mosquitto.conf:\n    ```\n    listener 1883\n    protocol mqtt\n    pid_file /var/run/mosquitto/mosquitto.pid\n    include_dir /etc/mosquitto/conf.d\n    ```\n10. Make sure the service file /lib/systemd/system/mosquitto.service is something like this, \n    noting the dynamic addition of the mosquitto directory on startup:\n    ```\n    [Unit]\n    Description=Mosquitto MQTT v3.1/v3.1.1 Broker\n    Documentation=http://mosquitto.org/documentation/\n    After=network-online.target\n    Wants=network-online.target\n    \n    [Service]\n    Type=notify\n    NotifyAccess=main\n    ExecStart=/usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf\n    ExecStartPre=/bin/mkdir -m 740 -p /var/run/mosquitto\n    ExecStartPre=/bin/chown mosquitto: /var/run/mosquitto\n    Restart=on-failure\n    \n    [Install]\n    WantedBy=multi-user.target\n    ```\n11. Remove the old persistence database if it exists: `sudo rm /var/lib/mosquitto/mosquitto.db`\n12. Enable the service with `sudo systemctl enable mosquitto.service`\n\nActivate the `mosquitto` mqtt server on the \"gateway\" which is also the same RPi we are using for data collection and \nrun it in verbose mode to test it:\n```\nsudo systemctl enable mosquitto.service\nmosquitto -v\nmosquitto_sub -t \"testtopic\"\nmosquitto_pub -t \"testtopic\" -m \"test message\"\n```\n\nNext, we want to set up the server MQTT broker.  First, set up a password file\nfollowing [this](http://www.steves-internet-guide.com/mqtt-username-password-example/) link.\n(NOTE, however, if we are using a mosquitto broker built from source that does not include TLS, then\nDO NOT ENCRYPT THE PASSWORD FILE ON THE SERVER.) \nThen, round out the mosquitto config file in `/etc/mosquitto/conf.d`:\n```\nlistener 1883\nprotocol mqtt\npid_file /var/run/mosquitto/mosquitto.pid\ninclude_dir /etc/mosquitto/conf.d\n\n# require password to access server broker\nallow_anonymous false\npassword_file /etc/mosquitto/mosquitto_pw_encrypted.txt       \n\n# log to syslog\nlog_dest syslog\nlog_facility 0\nlog_timestamp false\n```\n\nNext, we want to set up the site MQTT broker.\nTo do this, create a mew mosquitto config file in `/etc/mosquitto/conf.d` with the following content:\n```\npersistence true\npersistence_location /var/lib/mosquitto/\n\nconnection bridge-to-emcnet\naddress jmfife.com:1883\ntopic emcnet/intervaldata/# out 2\ntopic emcnet/devicedata/# out 0\nremote_username <here, use the user id you set up for the emcnet server broker>\nremote_password <here, use the password you set up for the emcnet server broker>\n\nmax_inflight_messages 1\nmax_queued_messages 6000\nautosave_interval 300\n\n# log to syslog\nlog_dest syslog\nlog_facility 0\nlog_timestamp false\n```\nOr, copy the file in the repo named `mosquitto_site.conf` to the directory `/etc/mosquitto/conf.d`.\nBe careful that none of the values in `mosquitto_site.conf` have already been set in `/etc/mosquitto/mosquitto.conf`\nwhich is read first when mosquitto starts. \nIf parameters are already set, and your config file tries to set them again, `mosquitto.service` will not \nstart correctly. Check the service is started with `systemctl status mosquitto.service`.  If it is stopped or there \nis an error, check logs with `journalctl -u mosquitto.service`.\n\nWe still need to make the site computer automatically start the right processes during boot.\nBut see below for setting up autostart of the necessary processes on a linux computer with systemd.\n\n#### User\n\nIf you are just using bigbird, follow these directions to install it.\nMake a projects directory and install Bigbird directly from the GitHub repo:\n```\nmkdir ~/projects\ncd ~/projects\ngit clone git@github.com:jmfife/rpi-ina226.git\ncd vedirect\npython3 -m pip install -e .\npython3 -m pip install git+https://github.com/jmfife/bigbird\"\n```\nThe package `vedirect-jmfife` should also install automatically.\n\n#### Developer\n\nIf you are helping to develop bigbird, follow these directions.\n\nFirst set up password-less access via SSH.  Follow this script to create SSH RSA keys: \nhttps://www.raspberrypi.org/documentation/remote-access/ssh/passwordless.md\nIf you already have a key generated on your PC, just use:\n```\nssh-copy-id <USERNAME>@<IP-ADDRESS>\n```\nAlso log into GitHub, go to settings, and copy and paste your public keys (in `~/.ssh/id_rsa.pub`) from both\nthe RPi and your PC.\n\nSet up `git`:\n```\nsudo apt-get install git\ngit config --global user.name \"<your name>\"\ngit config --global user.email \"<your email address>\"\ngit config --global core.editor nano\n```\nThen you can clone the `bigbird` and `vedirect-jmfife` project to the RPi and install it as an editable package:\n```\nmkdir ~/projects\ncd ~/projects\ngit clone git@github.com:jmfife/rpi-ina226.git\ncd vedirect\npython3 -m pip install -e .\ncd ..\ngit clone git@github.com:jmfife/vedirect.git\ncd vedirect\npython3 -m pip install -e .\ncd ..\ngit clone git@github.com:jmfife/bigbird.git\ncd bigbird\npython3 -m pip install -e .\n```\n\nYou may also want to install some other developer-oriented packages.  For example:\n```\nsudo apt install emacs\n```\n\nAnd you may want to set up rsub to edit files on the RPi from Sublime Text 3 on MacOS by following this \n[LINK](https://www.pkshiu.com/loft/2016/12/remote-file-editing-on-the-raspberry-pi-using-sublime-text-3-and-iterm).\n\nSet auto-start as services with systemd.  Follow [THIS GUIDE](https://github.com/torfsen/python-systemd-tutorial).\nThe .service files are included in the distro so you can, in short:\n``` \ncp emcnet/service/*.service ~/.config/systemd/user\nsystemctl --user enable emcnet_dashboard\nsystemctl --user start emcnet_dashboard\nsystemctl --user enable emcnet_device_ina226\nsystemctl --user start emcnet_device_ina226\nsystemctl --user enable emcnet_device_vmppt\nsystemctl --user start emcnet_device_vmppt\nsystemctl --user enable emcnet_site_data_processor\nsystemctl --user start emcnet_site_data_processor\n```\nOr, for the server:\n``` \ncp emcnet/service/*.service ~/.config/systemd/user\nsystemctl --user enable emcnet_dashboard\nsystemctl --user start emcnet_dashboard\nsystemctl --user enable emcnet_server_data_store\nsystemctl --user start emcnet_server_data_store\n```\nThen, importantly, the command to make the services start when the system boots \n(even though you are not logged in) is:\n```\nsudo loginctl enable-linger $USER\n```\nYou can list unit files with:\n```\nsystemctl --user list-unit-files\n```\nAnd you can disable unit files with `systemctl --user disable <unit>`.\nAnd you can restart unit files wthat have changed with `systemctl --user restart <unit>`\nTo reload all units after they have changed: `systemctl --user daemon-reload` but the services need\nto be stopped first.\n\nFor viewing log files, use `journalctl --user-unit <unit name>`.  For example:\n```\njournalctl --user-unit emcnet_server_data_store.service -f\n```\n\n## EMCNet Configuration\n\nThe command line utilities in `emcnet` can be configured in 3 different ways:\n \n1. With environment variables\n   \n2. Using a `config.env` file in the path $EMCNETDIR which will over-ride (1)\n\n3. Using command line options which will override (2)\n\nThe recommended installation process utilizes the `config.env` file:\n\n1. Create a folder in `<a user home directory>/emcnet`.  This will be where EMCNet will keep all of\n   its files.\n   \n2. In the site's .bashrc or equivalent, create the environment variable EMCNETDIR and set it equal to the\n   path the directory you just created. For example:\n   ```\n   export EMCNETDIR=/home/jmfife/emcnet\n   ```\n3. In `EMCNETDIR` create a `config.env` file.  Within it, at a minimum, if its a site, set `SITE_ID` to the \n   name of the site. For example:\n   ```\n   # Unique site identifier (string)\n   # Not used by server\n   SITE_ID=bb8\n   \n   # Address of MQTT broker\n   MQTT_BROKER_ADDRESS=localhost\n   \n   # MQTT broker port\n   MQTT_BROKER_PORT=1883\n   \n   # Loging level from one of [DEBUG, INFO, WARNING, ERROR, CRITICAL]\n   LOG_LEVEL=INFO\n   \n   # Number of intervals per hour to be accumulated by the Interval Manager\n   # Not used by server\n   INTERVALS_PER_HOUR=4\n   \n   # Number of time-series records to plot in the web dashboard\n   MAX_PLOT_RECORDS=672\n   \n   # Credentials for remote broker (server)\n    REMOTEBROKERID=<here, use the user id you set up for the emcnet server broker>\n    REMOTESERVERPW=<here, use the password you set up for the emcnet server broker>\n   ```\n\n## Example\n\n### Set up Raspberry Pi in BigBird\n\nFor connecting the existing Pi Zero in bigbird, if there is no connected WiFi, remove the SIM card and create two files in the root directory:  one blank one named 'ssh' and one 'wpa_supplicant.conf' file with the following contents:\n\n```\n    ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n    update_config=1\n    country=US\n    autoscan=periodic:10\n    \n    network={\n            ssid=\"<SSID>\"\n            psk=\"<password>\" \n    }\n```\n\nThen, reboot and you should see it connected by going to the router page and checking the list of connected devices.  Then, from a mac connected to the same network, you should be able to ssh into the RPi Zero with\n\n```\nssh bigbird.local\n```\n\nIf you don't have access to the router web page, you can try using nmap.  For example, see https://all3dp.com/2/find-raspberry-pi-on-network/#:~:text=Open%20a%20command%20line%20or,re%20using%20Raspberry%20Pi%20OS.\n\nOnce the Pi Zero is connecte, it should be publishing a dashboard visible on the mac at http://bigbird.local:8050/emcnet/bigbird\n\n### Debugging\n\n#### Logs\n\nFirst `ssh` into bigbird's Pi Zero.\n\nOne option for increasing the logging is to set the `LOG_LEVEL` environment variable in config.env in the directory `~/emcnet'.\n\nAnother option is to edit the systemd unit files in `~/.config/systemd/user`.  For example, you can edit `emcnet_device_ina226.service` and add `--loglevel=DEBUG` in the option list of the call to `device_data_publisher`.\n\nReboot.\n\nFor reading logs, you can use something like:\n\n```\njournalctl --user-unit emcnet_device_ina226.service\n```\n\n### Installing influxdb\n\n#### In native environment\n\nFollow https://docs.influxdata.com/influxdb/v2.5/install/\n\nFor MacOS:\n\n```\nbrew update \nbrew install influxdb\nbrew install influxdb-cli\n```\n\nCreate a configuration for each database you want to connect to.\n\n```\ninflux config create --config-name influxdbcloud \\\n    --host-url https://europe-west1-1.gcp.cloud2.influxdata.com \\\n    --org jmfife@gmail.com \\\n    --token FcSL3TvxLBanhkZFw1GdT7f3SnNaiCHeU4idhIEXOQX6KE0Omz670NTH85J-z_Qlw0-26tkRPmeXrEZW_Jr4iA== \\\n    --active\n```\n\nNote that the `influx config create -o` parameter must be the organization NAME, not ID.\n\nBut for some reason, even when this config is active, you must continuously re-enter the token on the command line.  \nYou can avoid re-entering the API token by setting the environment variable `INFLUX_TOKEN=<your all-access API token>`.  For example:\n\n```\njmfife@mse-6:~/projects/emcnet$ export INFLUX_HOST=https://europe-west1-1.gcp.cloud2.influxdata.com\njmfife@mse-6:~/projects/emcnet$ export INFLUX_TOKEN=FcSL3TvxLBanhkZFw1GdT7f3SnNaiCHeU4idhIEXOQX6KE0Omz670NTH85J-z_Qlw0-26tkRPmeXrEZW_Jr4iA==\njmfife@mse-6:~/projects/emcnet$ export INFLUX_ORG=jmfife@gmail.com\n\njmfife@mse-6:~/projects/emcnet$ influx bucket list\nID\t\t\tName\t\tRetention\tShard group duration\tOrganization ID\t\tSchema Type\na0cb9f17ee606c13\t_monitoring\t168h0m0s\tn/a\t\t\t9aea191806c5168c\timplicit\nd1c4a94317a90cb1\t_tasks\t\t72h0m0s\t\tn/a\t\t\t9aea191806c5168c\timplicit\n82ab5a630f3633ff\ttest\t\t720h0m0s\tn/a\t\t\t9aea191806c5168c\timplicit\n```\n\n#### A Great InfluxDB IOT Example\n\nFollow https://www.influxdata.com/blog/influxdb-iot-edge-historian/ except there seems to be an issue with the way the options are represented in the example.  So use the short notation and replace all of the existing dashes in the copy-paste with normal dashes:\n\n```\n$ influx config create -a -n \"edge\" -u \"https://localhost:8086\" -o \"flyinion\" -t \"teydRew_qE4Z00uqRPFcuYoS-XERvv0Qd4aXSgqaciR-gBS_MBms8IGlNRk5wOrfMlpYXbJrVS7XpFHNp6wmNw==\"\n```\n\nSimilarly for the Telegraf config:\n\n```\n$ telegraf --config ./telegraf.conf\n```\n\nSimilarly for the cloud config:\n\n```\n$ influx config create -a -n \"cloud\" -o \"jmfife@gmail.com\" -u \"http://europe-west1-1.gcp.cloud2.influxdata.com\" -t \"Ybth0xrDDZLM7mH3X1_EAX2Wr8ilq_IJFLYd87kFOJ2fwrV_KgXnAvuclKGhzvk5ONB30B4oDMuIn5cNIHuHTw==\"\n```\n\nLocal (edge) InfluxDB event \"aggregate\" that aggregates high speed data and stores it locally in \"northbound\" bucket:\n\n```\nimport \"influxdata/influxdb/tasks\"\nimport \"influxdata/influxdb/secrets\"\n\noption task = {name: \"aggregate_local\", every: 1m}\n\nfrom(bucket: \"devices\")\n    |> range(start: tasks.lastSuccess(orTime: -1h))\n    |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n    |> to(bucket: \"northbound\")\n```\n\nAnd finally, a Local (edge) InfluxDB event \"sync_northbound\" that synchronizes northbound bucket with cloud InfluxDB:\n\n```\nimport \"influxdata/influxdb/tasks\"\nimport \"influxdata/influxdb/secrets\"\n\noption task = { \n  name: \"sync_northbound\",\n  every: 5m,\n  offset: 0s\n}\n\ncloud_host = secrets.get(key: \"cloud_host\")\ncloud_org = secrets.get(key: \"cloud_org\")\ncloud_token = secrets.get(key: \"cloud_token\")\n\nfrom(bucket: \"northbound\")\n    |> range(start: tasks.lastSuccess(orTime: -1h))\n    |> set(key: \"edge_id\", value: \"001\")\n    |> to(host: cloud_host, org: cloud_org, token: cloud_token, bucket: \"edge_devices\")\n```\n\nTokens: \n\ntest token for edge docker influxdb (jmfife's token (cloned...)) : `teydRew_qE4Z00uqRPFcuYoS-XERvv0Qd4aXSgqaciR-gBS_MBms8IGlNRk5wOrfMlpYXbJrVS7XpFHNp6wmNw==`\n\ntest token on influxdb cloud\n`Ybth0xrDDZLM7mH3X1_EAX2Wr8ilq_IJFLYd87kFOJ2fwrV_KgXnAvuclKGhzvk5ONB30B4oDMuIn5cNIHuHTw==`\n\nSecond clound token (needed to access new bucket device_data):\n`RQVnjw2fgf0gCXsb0W9drJA6rlW2jIIRP1rZAx2hqvRMPw-tmAD__Pk0MOmGUzlB4NsgRRt738HdLjDxYQdFIw==`\n\n# InfluxDB Branch - Setting Up\n\n## BigBird Setup\n\nBurn a new \"lite\" OS image to an SD card by downloading and installing the RPI imager:  https://www.raspberrypi.com/software/.  In the imager app, be sure to go to settings before burning the image and set up user IDs, WiFi, etc.\n\nSSH into bigbird and run `raspi-config` and ensure the following settings:\n    1. In Network Options, set localization and log onto the local wifi network\n    2. In Network Options, change the hostname if you like\n    3. In Interfacing Options, turn on SSH and I2C\n\n```\nsudo /opt/vc/bin/tvservice -o\n```\n\nReboot - `sudo reboot`\n    \nInstall InfluxDB 2.6 and set it up.  Follow https://portal.influxdata.com/downloads/\n\n```\n$ cd Downloads\n$ wget -q https://repos.influxdata.com/influxdb.key\n$ echo '23a1c8836f0afc5ed24e0486339d7cc8f6790b83886c4c96995b88a061c5bb5d influxdb.key' | sha256sum -c && cat influxdb.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdb.gpg > /dev/null\n$ echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdb.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list\n$ sudo apt-get update\n$ sudo apt-get install influxdb2\n$ sudo systemctl unmask influxdb\n$ sudo systemctl enable influxdb\n$ sudo service influxdb start\n```\n\nNow, influxdb should start on boot.\n\nGo to http://bigbird.local:8086/ and set up user credentials.  Set Org to \"flyinion.\"  Be sure to save the API access token so you don't need to create another one.\n\nInstall Mosquitto:\n\n```\n$ sudo apt-get install -y mosquitto mosquitto-clients\n$ sudo systemctl unmask mosquitto.service\n$ sudo systemctl enable mosquitto.service\n```\n\nPrereqeuisites:\n\n```\n$ sudo apt install git python3-pip\n```\n\nCreate a new SSH public key and save it to Github:\n\n```\n$ ssh-keygen\n$ more ~/.ssh/id_rsa.pu\n```\n\n<!-- Install WiringPi:\n\n```\n$ mkdir ~/projects\n$ cd ~/projects\n$ git clone https://github.com/WiringPi/WiringPi.git\n$ cd WiringPi\n$ ./build\n``` -->\n\nNow load the custom software we will be running on the Pi.  \n\n```\n$ sudo apt install python3-pip\n$ sudo python3 -m pip install --upgrade pip\n$ cd ~/projects\n$ git clone git@github.com:jmfife/emcnet.git\n$ sudo mkdir /etc/emcnet\n$ sudo cp emcnet/config_example.env /etc/emcnet/config.env\n$ sudo cp emcnet/services/* /lib/systemd/system/\n$ sudo python3 -m pip install emcnet --upgrade emcnet\n```\n\nCreate a configuration for accessing the cloud database from the influx command line:\n```\n$ influx config create -a -n \"cloud\" -o \"jmfife@gmail.com\" -u \"http://europe-west1-1.gcp.cloud2.influxdata.com\" -t Ybth0xrDDZLM7mH3X1_EAX2Wr8ilq_IJFLYd87kFOJ2fwrV_KgXnAvuclKGhzvk5ONB30B4oDMuIn5cNIHuHTw==\n```\n\nGo to the edge instance of InfluxDB at http://bigbird.local:8086/ and create a new all-access token.  Copy and save it, and put it in the following command:\n```\n$ influx config create -a -n \"edge\" -u \"http://localhost:8086\" -o \"flyinion\" -t PlbtNY3Lvm_PVPrYW6UUbc3PqIPH9r8wiZwpGBnotzFxb6Js8_f28p1bb0ZUhJYgxT4v4c9ws1Hh7cIEEC82NQ==\n```\n\nLoad the edge InfluxDB template in the emcnet/influxdb folder:\n\n```\n$ cd ~/projects/emcnet/influxdb\n$ influx apply -f edge_template.yml\n```\n\nEdit the emcnet configuration file and put the same token in there, along with the site name:\n```\n$ sudo nano /etc/emcnet/config.env\n```\n\nExit nano with ^O and ^W.\n\nSet the InfluxDB edge instance's secret key values to access the cloud, and to set the site name:\n\n```\n$ influx secret update --key cloud_host --value \"https://europe-west1-1.gcp.cloud2.influxdata.com\"\n$ influx secret update --key cloud_org --value \"jmfife@gmail.com\"\n$ influx secret update --key cloud_token --value \"Ybth0xrDDZLM7mH3X1_EAX2Wr8ilq_IJFLYd87kFOJ2fwrV_KgXnAvuclKGhzvk5ONB30B4oDMuIn5cNIHuHTw==\"\n$ influx secret update --key site --value \"bigbird\"\n```\n\nNOTE ABOVE, the cloud host url must have https://..., but the edge host must be http://....\n\nActivate the device services:\n\n```\n$ cd ~/projects/emcnet\n$ sudo cp service/*.service /lib/systemd/system/\n$ sudo systemctl unmask emcnet_device_vmppt\n$ sudo systemctl enable emcnet_device_vmppt\n$ sudo systemctl start emcnet_device_vmppt\n$ sudo systemctl unmask emcnet_device_ina226\n$ sudo systemctl enable emcnet_device_ina226\n$ sudo systemctl start emcnet_recorder\n$ sudo systemctl unmask emcnet_recorder\n$ sudo systemctl enable emcnet_recorder\n$ sudo systemctl start emcnet_recorder\n```\n\nReboot the raspberry pi and you should be good to go.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "emcnet",
    "package_url": "https://pypi.org/project/emcnet/",
    "platform": null,
    "project_url": "https://pypi.org/project/emcnet/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/emcnet/1.4.1/",
    "requires_dist": [
      "pandas (>=1.2.3)",
      "python-dotenv (>=0.15.0)",
      "codetiming (>=1.3.0)",
      "influxdb-client[ciso]",
      "paho-mqtt",
      "python-dotenv",
      "fieldday",
      "vedirect-jmfife",
      "smbus2",
      "fifeutil",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "Infrastructure for recording and dashboarding distributed device data with intermittent connectivity",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16701925,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25035023babf54fde1a51466fb904a2bee1a859c297be3ec0a77782c8984079a",
          "md5": "5245993511fe73f9a6f6f42984225181",
          "sha256": "f0066102eb7214b148db88701bb68c182c7f9d737fde8a0a5f170e727f070fdb"
        },
        "downloads": -1,
        "filename": "emcnet-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5245993511fe73f9a6f6f42984225181",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 73193,
        "upload_time": "2023-01-03T20:37:18",
        "upload_time_iso_8601": "2023-01-03T20:37:18.215621Z",
        "url": "https://files.pythonhosted.org/packages/25/03/5023babf54fde1a51466fb904a2bee1a859c297be3ec0a77782c8984079a/emcnet-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dda6eeeb7be7d6850a783196b39c49c1870ee5cd91dc4569f65fff84855d400",
          "md5": "18f35863ee3d382e26ee8b29873c93d4",
          "sha256": "35116d87e5f3f2fb41049143db9ecd38f186e50c980841a7aa90f4be100835e2"
        },
        "downloads": -1,
        "filename": "emcnet-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "18f35863ee3d382e26ee8b29873c93d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 2289543,
        "upload_time": "2023-01-03T20:37:24",
        "upload_time_iso_8601": "2023-01-03T20:37:24.306052Z",
        "url": "https://files.pythonhosted.org/packages/5d/da/6eeeb7be7d6850a783196b39c49c1870ee5cd91dc4569f65fff84855d400/emcnet-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6c860c4a49d20d49e1a7fa222910e6f601ab3efe1edb82775278d3e6b7b8c03",
          "md5": "14886066592ae0b3a079181c93b677a7",
          "sha256": "d38ee6a2792361ae3951ce551ec5aa07c791589ce75fa37b44c449ec2ec0875c"
        },
        "downloads": -1,
        "filename": "emcnet-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14886066592ae0b3a079181c93b677a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 82207,
        "upload_time": "2023-01-22T20:08:41",
        "upload_time_iso_8601": "2023-01-22T20:08:41.771074Z",
        "url": "https://files.pythonhosted.org/packages/f6/c8/60c4a49d20d49e1a7fa222910e6f601ab3efe1edb82775278d3e6b7b8c03/emcnet-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d1a24730191fad586dc635c13ce23c9e784cfb21ec4a9461eebc43e47ce5bb7",
          "md5": "26c3f19fc8bb9510f4296250e2e737fd",
          "sha256": "47ef314bc88015e0708321b43e04ebcb3dbbac0f94d4bbaabf89af9320e710fd"
        },
        "downloads": -1,
        "filename": "emcnet-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "26c3f19fc8bb9510f4296250e2e737fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 2294695,
        "upload_time": "2023-01-22T20:08:46",
        "upload_time_iso_8601": "2023-01-22T20:08:46.296565Z",
        "url": "https://files.pythonhosted.org/packages/4d/1a/24730191fad586dc635c13ce23c9e784cfb21ec4a9461eebc43e47ce5bb7/emcnet-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a529532613556aff6b0ec24c4c46d0adb8cd96c4937aa80c03b8e073896e16fc",
          "md5": "ef5e64823d07dc01876187d4c1f4bd7e",
          "sha256": "a121e23f06156759ece12893e9b728ea7700d074656f2dfe50d80a7ff5d9753d"
        },
        "downloads": -1,
        "filename": "emcnet-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef5e64823d07dc01876187d4c1f4bd7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 82210,
        "upload_time": "2023-01-22T21:19:01",
        "upload_time_iso_8601": "2023-01-22T21:19:01.284556Z",
        "url": "https://files.pythonhosted.org/packages/a5/29/532613556aff6b0ec24c4c46d0adb8cd96c4937aa80c03b8e073896e16fc/emcnet-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dccc81594bc992ef2d0aafe175f078b0e158c815e16ca624cfc7b85e85463ea1",
          "md5": "d3d327dba9c45475432ff11d274f1cbc",
          "sha256": "43a4977f22503cc20ffa0bee29caa947620229dec8d73c1d11b0bccd3abd0e29"
        },
        "downloads": -1,
        "filename": "emcnet-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d3d327dba9c45475432ff11d274f1cbc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 2294784,
        "upload_time": "2023-01-22T21:19:05",
        "upload_time_iso_8601": "2023-01-22T21:19:05.010101Z",
        "url": "https://files.pythonhosted.org/packages/dc/cc/81594bc992ef2d0aafe175f078b0e158c815e16ca624cfc7b85e85463ea1/emcnet-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2df749b84b07f7be2a0c280235497d8276d9215c0cfef03d3a2a9e4509955e68",
          "md5": "b1fcd10cc3672e4dfd01575586aa5c15",
          "sha256": "22105da97677413ee6064dcdec06a9ba5d231b0916995ef9c461500100a9cf9b"
        },
        "downloads": -1,
        "filename": "emcnet-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1fcd10cc3672e4dfd01575586aa5c15",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 91981,
        "upload_time": "2023-02-05T16:25:35",
        "upload_time_iso_8601": "2023-02-05T16:25:35.702290Z",
        "url": "https://files.pythonhosted.org/packages/2d/f7/49b84b07f7be2a0c280235497d8276d9215c0cfef03d3a2a9e4509955e68/emcnet-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "838044978800b38d451ec139d3fcaea59580b0a5457083af147d8144e5b4906b",
          "md5": "2273af639c945e365c404984b4175ccd",
          "sha256": "ccfb6ebad485a81b2e80bf27bbe81edf6c57b7e890c3f386c8009d2a0d932d4b"
        },
        "downloads": -1,
        "filename": "emcnet-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2273af639c945e365c404984b4175ccd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 2292555,
        "upload_time": "2023-02-05T16:25:48",
        "upload_time_iso_8601": "2023-02-05T16:25:48.940541Z",
        "url": "https://files.pythonhosted.org/packages/83/80/44978800b38d451ec139d3fcaea59580b0a5457083af147d8144e5b4906b/emcnet-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3834fd175d3f95af5774149f997f95f429527db950e9e18beceede1509d7c320",
          "md5": "ec8380f9cc4bcaa93c4436ccb5405648",
          "sha256": "3cad0cd5b5339d663fcaf210fe7329483794e01c1f0e076641e49098cf24f462"
        },
        "downloads": -1,
        "filename": "emcnet-1.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec8380f9cc4bcaa93c4436ccb5405648",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 91967,
        "upload_time": "2023-02-05T16:34:22",
        "upload_time_iso_8601": "2023-02-05T16:34:22.201861Z",
        "url": "https://files.pythonhosted.org/packages/38/34/fd175d3f95af5774149f997f95f429527db950e9e18beceede1509d7c320/emcnet-1.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29515a69fbdad542f0f95f9225e7ba73c1b88138cdfa433cbe395d92e630b852",
          "md5": "33ce701bd51643b68236041ea2cc6b0d",
          "sha256": "8a00ae72ec716729193f985f91723b30877d2847eac09df9310a9b2fd662abeb"
        },
        "downloads": -1,
        "filename": "emcnet-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "33ce701bd51643b68236041ea2cc6b0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 2292578,
        "upload_time": "2023-02-05T16:34:33",
        "upload_time_iso_8601": "2023-02-05T16:34:33.417383Z",
        "url": "https://files.pythonhosted.org/packages/29/51/5a69fbdad542f0f95f9225e7ba73c1b88138cdfa433cbe395d92e630b852/emcnet-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3834fd175d3f95af5774149f997f95f429527db950e9e18beceede1509d7c320",
        "md5": "ec8380f9cc4bcaa93c4436ccb5405648",
        "sha256": "3cad0cd5b5339d663fcaf210fe7329483794e01c1f0e076641e49098cf24f462"
      },
      "downloads": -1,
      "filename": "emcnet-1.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ec8380f9cc4bcaa93c4436ccb5405648",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 91967,
      "upload_time": "2023-02-05T16:34:22",
      "upload_time_iso_8601": "2023-02-05T16:34:22.201861Z",
      "url": "https://files.pythonhosted.org/packages/38/34/fd175d3f95af5774149f997f95f429527db950e9e18beceede1509d7c320/emcnet-1.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29515a69fbdad542f0f95f9225e7ba73c1b88138cdfa433cbe395d92e630b852",
        "md5": "33ce701bd51643b68236041ea2cc6b0d",
        "sha256": "8a00ae72ec716729193f985f91723b30877d2847eac09df9310a9b2fd662abeb"
      },
      "downloads": -1,
      "filename": "emcnet-1.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "33ce701bd51643b68236041ea2cc6b0d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 2292578,
      "upload_time": "2023-02-05T16:34:33",
      "upload_time_iso_8601": "2023-02-05T16:34:33.417383Z",
      "url": "https://files.pythonhosted.org/packages/29/51/5a69fbdad542f0f95f9225e7ba73c1b88138cdfa433cbe395d92e630b852/emcnet-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}