{
  "info": {
    "author": "",
    "author_email": "Vivien Richter <vivien-richter@outlook.de>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Topic :: Internet",
      "Topic :: Multimedia :: Graphics :: Capture",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Virtual Motion Capture (VMC) protocol package for Python\n[![License: AGPL-3.0-or-later](https://img.shields.io/badge/%E2%9A%96%EF%B8%8F-AGPL%203.0%20or%20later-green)](https://www.gnu.org/licenses/agpl.html)\n[![State: Stable](https://img.shields.io/badge/State-Stable-green.svg)](https://codeberg.org/vivi90/python-vmc/issues)\n[![Pylint: 10.0/10](https://img.shields.io/badge/Pylint-10.0/10-green.svg)](https://pylint.pycqa.org)\n[![pipeline status](https://ci.codeberg.org/api/badges/vivi90/python-vmcp/status.svg)](https://ci.codeberg.org/vivi90/python-vmcp)\n[![Downloads](https://static.pepy.tech/personalized-badge/vmcp?period=month&units=international_system&left_color=grey&right_color=blue&left_text=Downloads)](https://pepy.tech/project/vmcp)\n\nThe [VMC protocol](https://protocol.vmc.info/english) is used for \nrealtime Motion Capture transmission and based on \nthe [Open Sound Control (OSC) protcol](https://opensoundcontrol.stanford.edu).\nThis [Python](https://www.python.org) module is an \nhighly modular implementation of it's most basic features.\n\n[![Structure](https://www.plantuml.com/plantuml/png/bLHDRzim3BtxLn3DOIcsP8Tz78AYA5PWjsB0EknKe60aDXOgIuf4fmYA_FVHjk8edI-zXNpaUwGUdPl46BbjR9MUZGiOiO4rgkTDzAtJobiVWIEw910vBgfqCF3zMnMa63S4kqO5cA4rYjQs9NYj08xOCaJFNiZWzI1fvvbWxPbz0_xfXAxWrZj6unAWjO0xD1RNbXxStxjR63aYMMJI3wwXb8G-mPEFaCXfupRBKfRtGLAJeXbxhoHAkr6WaH64WTAP7kt8SPhKozXxzOQkJs1IQad3Ul_WZ5E-wTRAwv-Fy8GADKtEC88h-EaZ4AOzjC8WuWBcsUS-iF4ExQNGZXjTBSRcwb1LFI_x8AIzxokuPtGQhNSabDr2C7ynNFkMuSfS7tklFfjhuIrFPkcJWXawDjkMNch3m-KeYod1h_lRFWBuw0Ev-UNmMqL2fiVESOflaf4KcTqf7TjJc_M9-k1GlfYgqJcoWr0Mlk-fSqfQEwbCSoZAVcUnKs6aZKbCyL58jHt74AHrKrWcF8mhtmsc7jT6hQDaXg0xECPDZZ1ksgPp9_VBOubFYt6eCPMtaJYljLXS7tKg6EjBas4MILU7qkZHhPLqR5iJAGa2fWa-Cd1D_T-627IrglP64SnHmgx89KPhmV2719g2L95JXf8Smt_Ni3pop73ROeFHkE4vZ6EACY31HVvwbp-6qZ_oC1U02Oguj5XOluRzbvxbbCRqs9-tzJx8z_8MKxxXEXBgD07ADcVWrDUMLRlt2XOLuTeAlWUKmfhYyRsM5PHpYpjdaqsXnMoJS35TlW9nl2pBzjv8t3Rs7m00)](https://www.plantuml.com/plantuml/uml/bLHDRzim3BtxLn3DOIcsP8Tz78AYA5PWjsB0EknKe60aDXOgIuf4fmYA_FVHjk8edI-zXNpaUwGUdPl46BbjR9MUZGiOiO4rgkTDzAtJobiVWIEw910vBgfqCF3zMnMa63S4kqO5cA4rYjQs9NYj08xOCaJFNiZWzI1fvvbWxPbz0_xfXAxWrZj6unAWjO0xD1RNbXxStxjR63aYMMJI3wwXb8G-mPEFaCXfupRBKfRtGLAJeXbxhoHAkr6WaH64WTAP7kt8SPhKozXxzOQkJs1IQad3Ul_WZ5E-wTRAwv-Fy8GADKtEC88h-EaZ4AOzjC8WuWBcsUS-iF4ExQNGZXjTBSRcwb1LFI_x8AIzxokuPtGQhNSabDr2C7ynNFkMuSfS7tklFfjhuIrFPkcJWXawDjkMNch3m-KeYod1h_lRFWBuw0Ev-UNmMqL2fiVESOflaf4KcTqf7TjJc_M9-k1GlfYgqJcoWr0Mlk-fSqfQEwbCSoZAVcUnKs6aZKbCyL58jHt74AHrKrWcF8mhtmsc7jT6hQDaXg0xECPDZZ1ksgPp9_VBOubFYt6eCPMtaJYljLXS7tKg6EjBas4MILU7qkZHhPLqR5iJAGa2fWa-Cd1D_T-627IrglP64SnHmgx89KPhmV2719g2L95JXf8Smt_Ni3pop73ROeFHkE4vZ6EACY31HVvwbp-6qZ_oC1U02Oguj5XOluRzbvxbbCRqs9-tzJx8z_8MKxxXEXBgD07ADcVWrDUMLRlt2XOLuTeAlWUKmfhYyRsM5PHpYpjdaqsXnMoJS35TlW9nl2pBzjv8t3Rs7m00)\n\n## Features\n### VMC protocol\n - [Root transform](https://vivi90.codeberg.page/python-vmcp/vmcp/protocol.html#root_transform) *(Supported specs: v2.0.0, v2.1.0)*\n - [Bone transform](https://vivi90.codeberg.page/python-vmcp/vmcp/protocol.html#bone_transform)\n - [Device transform](https://vivi90.codeberg.page/python-vmcp/vmcp/protocol.html#device_transform) *(Supported specs: v2.2.0, v2.3.0)*\n - [Blendshapes](https://vivi90.codeberg.page/python-vmcp/vmcp/protocol.html#blendshape)\n - [State changes](https://vivi90.codeberg.page/python-vmcp/vmcp/protocol.html#state) *(Supported specs: v1.0.0, v2.5.0, v2.7.0)*\n - [Relative time](https://vivi90.codeberg.page/python-vmcp/vmcp/protocol.html#time)\n\nand it's [receiving events](https://vivi90.codeberg.page/python-vmcp/vmcp/events.html).\n### OSC protocol\n - Multiple independent sender- and receiver-channels\n - TimeTag support\n### Specials\n - Independent usage of the VMC and OSC protocol layers possible.\n - Backend agnostic (feel free to replace [`osc4py3`](https://pypi.org/project/osc4py3) with something else).\n\n## Installation\n - If you [only want to use the VMC protocol layer](#vmc-protocol-layer-only), \nyou can simply install it via `pip install vmcp` (**without OSC**).\n - If you want it ready-to-use including OSC, install it with the dependencies \n of [your choosen backend](#currently-available-backends). \n For example for `vmcp.osc.backend.osc4py3.as_comthreads` \n you install it via `pip install vmcp[osc4py3]` (**recommended**)\n\n## Usage\nYou may find the following sections in the documentation helpful:\n - [vmcp.protocol](https://vivi90.codeberg.page/python-vmcp/vmcp/protocol.html)\n - [vmcp.typing](https://vivi90.codeberg.page/python-vmcp/vmcp/typing.html)\n - [vmcp.events](https://vivi90.codeberg.page/python-vmcp/vmcp/events.html)\n - [vmcp.facades](https://vivi90.codeberg.page/python-vmcp/vmcp/facades.html)\n - [vmcp.osc](https://vivi90.codeberg.page/python-vmcp/vmcp/osc.html)\n### Virtual Motion Capture (VMC) protocol\n#### [Basic VMCP example](https://codeberg.org/vivi90/python-vmcp/src/branch/main/examples/vmcp_basic.py)\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# SPDX-License-Identifier: AGPL-3.0-or-later\n\n\"\"\"Basic VMC protocol example.\"\"\"\n\nfrom math import radians\n# OSC\nfrom vmcp.osc import OSC\nfrom vmcp.osc.typing import Message\nfrom vmcp.osc.backend.osc4py3 import as_comthreads as backend\n# VMC protocol layer\nfrom vmcp.events import (\n    Event,\n    RootTransformEvent,\n    BoneTransformEvent,\n    BlendShapeEvent,\n    BlendShapeApplyEvent,\n    DeviceTransformEvent,\n    StateEvent,\n    RelativeTimeEvent\n)\nfrom vmcp.typing import (\n    CoordinateVector,\n    Quaternion,\n    Bone,\n    DeviceType,\n    BlendShapeKey as AbstractBlendShapeKey,\n    ModelState,\n    Timestamp\n)\nfrom vmcp.protocol import (\n    root_transform,\n    bone_transform,\n    device_transform,\n    blendshape,\n    blendshape_apply,\n    state,\n    time\n)\n# Facades for easy usage (optional)\nfrom vmcp.facades import on_receive\n\n\n# Required, if blend shapes are used.\nclass BlendShapeKey(AbstractBlendShapeKey):\n    \"\"\"Example model blend shape keys.\n\n    Depends on the used avatar model.\n\n    \"\"\"\n\n    # Eye blink\n    EYES_BLINK_R = \"Blink_R\"\n    # Face expressions\n    FACE_FUN = \"Fun\"\n\n\nLISTENING = True\n\n\ndef received(event: Event):\n    \"\"\"Receive transmission.\"\"\"\n    print(event)\n    if isinstance(event, DeviceTransformEvent):\n        print(event.device_type)\n        print(event.is_local)\n    if isinstance(event, RelativeTimeEvent):\n        global LISTENING  # pylint: disable=global-statement\n        LISTENING = False\n\n\ntry:\n    osc = OSC(backend)\n    with osc.open():\n        # Receiver\n        in1 = osc.create_receiver(\"127.0.0.1\", 39539, \"receiver1\").open()\n        on_receive(in1, RootTransformEvent, received)\n        on_receive(in1, BoneTransformEvent, received)\n        on_receive(in1, DeviceTransformEvent, received)\n        on_receive(in1, BlendShapeEvent, received)\n        on_receive(in1, BlendShapeApplyEvent, received)\n        on_receive(in1, StateEvent, received)\n        on_receive(in1, RelativeTimeEvent, received)\n        # Sender\n        osc.create_sender(\"127.0.0.1\", 39539, \"sender1\").open().send(\n            (\n                Message(*root_transform(\n                    CoordinateVector(.5, .2, .5),\n                    Quaternion.identity()\n                )),\n                Message(*bone_transform(\n                    Bone.LEFT_UPPER_LEG,\n                    CoordinateVector.identity(),\n                    Quaternion.from_euler(0, 0, radians(-45))\n                )),\n                Message(*bone_transform(\n                    Bone.RIGHT_LOWER_ARM,\n                    CoordinateVector.identity(),\n                    Quaternion(0, 0, 0.3826834323650898, 0.9238795325112867)\n                )),\n                Message(*device_transform(\n                    DeviceType.HMD,\n                    \"Head\",\n                    CoordinateVector.identity(),\n                    Quaternion.identity()\n                )),\n                Message(*blendshape(\n                    BlendShapeKey.FACE_FUN,\n                    1.0\n                )),\n                Message(*blendshape(\n                    BlendShapeKey.EYES_BLINK_R,\n                    1.0\n                )),\n                Message(*blendshape_apply()),\n                Message(*state(ModelState.LOADED)),\n                Message(*time(Timestamp()))\n            )\n        )\n        # Processing\n        while LISTENING:\n            osc.run()\nexcept KeyboardInterrupt:\n    print(\"Canceled.\")\nfinally:\n    osc.close()\n```\n### Only Open Sound Control (OSC) protocol\nYou are free use use the OSC protocol directly.\n#### [Basic OSC example](https://codeberg.org/vivi90/python-vmcp/src/branch/main/examples/osc_basic.py)\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# SPDX-License-Identifier: AGPL-3.0-or-later\n\n\"\"\"Basic OSC protocol example.\"\"\"\n\nfrom typing import Any\nfrom vmcp.osc import OSC\nfrom vmcp.osc.typing import Message\nfrom vmcp.osc.backend.osc4py3 import as_comthreads as backend\n\nLISTENING: bool = True\n\n\ndef received(*args: Any):\n    \"\"\"Receive transmission.\"\"\"\n    global LISTENING  # pylint: disable=global-statement\n    print(args)\n    LISTENING = False\n\n\ntry:\n    osc = OSC(backend)\n    with osc.open():\n        # Receiver channel\n        in1 = osc.create_receiver(\"127.0.0.1\", 39539, \"receiver1\")\n        in1.register_handler(\"/test/one\", received)\n        in1.open()\n        # Sender channel\n        out1 = osc.create_sender(\"127.0.0.1\", 39539, \"sender1\").open()\n        out1.send(Message(\"/test/one\", \",sif\", [\"first\", 672, 8.871]))\n        # Additional sender channel\n        osc.create_sender(\"127.0.0.1\", 39540, \"sender2\").open().send(\n            (\n                Message(\"/test/one\", \",sif\", [\"second\", 672, 8.871]),\n                Message(\"/test/two\", \",sif\", [\"third\", 234, 2.513])\n            )\n        )\n        # Processing\n        while LISTENING:\n            osc.run()\nexcept KeyboardInterrupt:\n    print(\"Cancheled.\")\nfinally:\n    osc.close()\n```\n### VMC protocol layer only\nIf you are only want to use the VMC protocol layer \nwithout the underlying OSC stuff.\n#### [VMCP only example](https://codeberg.org/vivi90/python-vmcp/src/branch/main/examples/vmcp_layer_only.py)\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# SPDX-License-Identifier: AGPL-3.0-or-later\n\n\"\"\"VMCP protocol layer only example.\"\"\"\n\nfrom vmcp.typing import (\n    CoordinateVector,\n    Quaternion\n)\nfrom vmcp.protocol import root_transform\nfrom vmcp.events import (\n    Event,\n    RootTransformEvent\n)\n\n\ndef received(event: Event):\n    \"\"\"Receive transmission.\"\"\"\n    print(repr(event))\n\n\nposition = CoordinateVector(1.0, 2.0, 3.0)\nrotation = Quaternion.identity()\n\nprint(\n    root_transform(\n        position,\n        rotation\n    )\n)\nreceived(\n    RootTransformEvent.from_message_data(\n        \"example\",\n        RootTransformEvent.ADDRESS_PATTERN,\n        (\n            \"root\",\n            position.x, position.y, position.z,\n            rotation.x, rotation.y, rotation.z, rotation.w\n        )\n    )\n)\n```\nIn this case it's **NOT required** to install any backend dependencies.\n### Additional examples\n#### [Basic OSC with logging](https://codeberg.org/vivi90/python-vmcp/src/branch/main/examples/osc_basic_logging.py)\n#### [Basic OSC with custom receiving parameters](https://codeberg.org/vivi90/python-vmcp/src/branch/main/examples/osc_basic_custom_parameters.py) (Backend dependant)\n#### [Basic OSC with TimeTag's](https://codeberg.org/vivi90/python-vmcp/src/branch/main/examples/osc_basic_time_tags.py) (Backend dependant)\n\n## Currently available backends\n### `vmcp.osc.backend.osc4py3.as_eventloop`\nYou need to call [`OSC.run()`](https://vivi90.codeberg.page/python-vmcp/vmcp/osc.html#OSC.run) to process message sending and receiving.\nDepending on the amount of traffic, multiple calls may be required.\n#### Dependencies\n - [`osc4py3`](https://pypi.org/project/osc4py3)\n#### Install\n`pip install vmcp[osc4py3]`\n### `vmcp.osc.backend.osc4py3.as_comthreads`\nOnly message receiving requires [`OSC.run()`](https://vivi90.codeberg.page/python-vmcp/vmcp/osc.html#OSC.run) calls.\nSending runs in separate threads.\nThis backend might be your choice to avoid race conditions inside your application.\n#### Dependencies\n - [`osc4py3`](https://pypi.org/project/osc4py3)\n#### Install\n`pip install vmcp[osc4py3]`\n### `vmcp.osc.backend.osc4py3.as_allthreads`\nYou don't need to call [`OSC.run()`](https://vivi90.codeberg.page/python-vmcp/vmcp/osc.html#OSC.run), but it doesn't harm.\nEverything runs in separate threads.\n#### Dependencies\n - [`osc4py3`](https://pypi.org/project/osc4py3)\n#### Install\n`pip install vmcp[osc4py3]`\n\n## Known bugs\n - If you want to use the `vmcp.osc.backend.osc4py3.as_comthreads` backend, \n then you need to downgrade `osc4py3` \n to version `1.0.3` (`pip install osc4py3==1.0.3`).\n - If you want to use logging with any `vmcp.osc.backend.osc4py3.*` backend, \n then you need to use `osc4py3` version `1.0.4` or higher.\n\n## Contribution\n 1. Install [Git LFS](https://git-lfs.github.com) and [(Mini)conda](https://docs.conda.io/en/latest/miniconda.html)\n 2. Make sure, that `conda` is available for git (for example run `echo \". /c/tools/miniconda3/etc/profile.d/conda.sh\" >> ~/.profile` in GitBash for Windows).\n 2. Prepare LFS by issuing the command `git lfs install` once.\n 3. Fork and clone this repository.\n 4. Install git hooks by issuing the command `git config core.hooksPath .githooks`.\n 5. Create conda environment and activate it:\n    ```\n    conda create -n vmcp python=3.10\n    conda activate vmcp\n    ```\n 6. Install the package in editable mode with all tools: `pip install -e \".[osc4py3,dev]\"`\n 7. If you finished your work, uninstall it by: `python setup.py develop -u`\n 8. You can delete your conda environment by: `conda remove -n vmcp --all`\n\n## TODO\n - Add more VMC protocol commands.\n - Add abstract application patterns for `Assistant`, `Performer` and `Marionette`.\n - Add [`VRM`](https://vrm.dev/en) model parser.\n - Add more OSC backends.\n## Project state meanings\n * **Unstable:** Still an *possibly* broken draft or breaking issues are known.\n * **Refactoring:** Structural and technical changes have currently priority.\n * **Stable:** Everything seems working as expected.\n * **Fixes only:** The project is maintained at the minimum level to apply at least fixes.\n * **Takeover:** The project is currently being taked over by another team and will possibly move.\n * **Not maintained:** The project is not maintained any more (ready to take over).\n\n*Feature requests are welcomed all the time, of course! ;-)*\n\n\n## License\nThis project is free under the terms of the AGPL 3.0 (or later) license. \nFor more details please see the LICENSE file or: [GNU](https://www.gnu.org/licenses/agpl.html)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "VMC,protocol,MR,VR,XR,AR",
    "license": "AGPL-3.0-or-later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vmcp",
    "package_url": "https://pypi.org/project/vmcp/",
    "platform": null,
    "project_url": "https://pypi.org/project/vmcp/",
    "project_urls": {
      "documentation": "https://vivi90.codeberg.page/python-vmcp",
      "homepage": "https://codeberg.org/vivi90/python-vmcp",
      "repository": "https://codeberg.org/vivi90/python-vmcp",
      "tracker": "https://codeberg.org/vivi90/python-vmcp/issues"
    },
    "release_url": "https://pypi.org/project/vmcp/1.0.6/",
    "requires_dist": [
      "pylint ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "bandit ; extra == 'dev'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "pydocstyle ; extra == 'dev'",
      "pdoc ; extra == 'docu'",
      "setuptools-scm ; extra == 'docu'",
      "osc4py3 (<1.0.4,>=1.0.1) ; extra == 'osc4py3'",
      "pylint ; extra == 'tests'",
      "mypy ; extra == 'tests'",
      "pytest ; extra == 'tests'",
      "bandit ; extra == 'tests'"
    ],
    "requires_python": ">=3.10",
    "summary": "Virtual Motion Capture protocol package",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14836490,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "898c9a416f7f517c656241f663de3fcdeed39bf5a61c1ae2c7a09004e3af7bd6",
          "md5": "59f334029172f7d306264e5fcf2fe81c",
          "sha256": "a617bf5a4902d4bbbd2d5d3f8d1742b248703aa3229f7d4bd332c0d4ecdb8e5c"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59f334029172f7d306264e5fcf2fe81c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 48500,
        "upload_time": "2022-08-12T14:47:25",
        "upload_time_iso_8601": "2022-08-12T14:47:25.482344Z",
        "url": "https://files.pythonhosted.org/packages/89/8c/9a416f7f517c656241f663de3fcdeed39bf5a61c1ae2c7a09004e3af7bd6/vmcp-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8422ad454ee1be497ff1880cbbc627c417c07907b5331f71009b195792f5cad7",
          "md5": "945b8d712a5315401a6307ecb8a7a87e",
          "sha256": "5fecdebd96c28379f378d7a381effcdfc96a7a2e79f7820d1d3bc7865734ed32"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "945b8d712a5315401a6307ecb8a7a87e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 63025,
        "upload_time": "2022-08-12T14:47:27",
        "upload_time_iso_8601": "2022-08-12T14:47:27.429946Z",
        "url": "https://files.pythonhosted.org/packages/84/22/ad454ee1be497ff1880cbbc627c417c07907b5331f71009b195792f5cad7/vmcp-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "490b4f63cae77897f4f2af0adffadcfc74065796cb82f784d08add9a48362182",
          "md5": "957f39fdcf76c3c6695c047488a852c1",
          "sha256": "8a468d031b272072aafd204937d05a1a387b803814cd011910c02520ebf11a50"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "957f39fdcf76c3c6695c047488a852c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 48499,
        "upload_time": "2022-08-12T14:58:39",
        "upload_time_iso_8601": "2022-08-12T14:58:39.740510Z",
        "url": "https://files.pythonhosted.org/packages/49/0b/4f63cae77897f4f2af0adffadcfc74065796cb82f784d08add9a48362182/vmcp-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c683a87e966ac77c6e7f1a6971b7b86d441c8c86063fa67f03fc8b7282c92aa",
          "md5": "f2340c33abfd4b609d59d1cf00271f36",
          "sha256": "537ee0be5d2493ba793f9ad141c139d88bd887a2086d3d87a2d68d52638b3b2f"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f2340c33abfd4b609d59d1cf00271f36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 63046,
        "upload_time": "2022-08-12T14:58:41",
        "upload_time_iso_8601": "2022-08-12T14:58:41.965041Z",
        "url": "https://files.pythonhosted.org/packages/7c/68/3a87e966ac77c6e7f1a6971b7b86d441c8c86063fa67f03fc8b7282c92aa/vmcp-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccc4bd2abf6cacdc17030ea9a7c723c7a6c16770a2d8beeb2fd3c9feb31654e2",
          "md5": "f929384ead60e7652b70b72765e87d79",
          "sha256": "2a0c122885c62320efd1388c99ee1fddf72199e254bde1666b557567951a7736"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f929384ead60e7652b70b72765e87d79",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 36430,
        "upload_time": "2022-08-12T15:11:40",
        "upload_time_iso_8601": "2022-08-12T15:11:40.670506Z",
        "url": "https://files.pythonhosted.org/packages/cc/c4/bd2abf6cacdc17030ea9a7c723c7a6c16770a2d8beeb2fd3c9feb31654e2/vmcp-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5859bc2f1dd622fc924d63c579d40b6d594dbdb9d760867ebab91ad7ed085aaa",
          "md5": "26ddf371d888f752da918ae255f2cbdd",
          "sha256": "bc99e5a931f56b42984e895d4019983f32dd9d834d1ed490a1143b23ec012eff"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "26ddf371d888f752da918ae255f2cbdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 39375,
        "upload_time": "2022-08-12T15:11:42",
        "upload_time_iso_8601": "2022-08-12T15:11:42.387617Z",
        "url": "https://files.pythonhosted.org/packages/58/59/bc2f1dd622fc924d63c579d40b6d594dbdb9d760867ebab91ad7ed085aaa/vmcp-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2647528d7c8f5256182ba9051ab0064b2599fe486cd5fea1ec3809c6b7a10838",
          "md5": "ba2a157d312aecc1c2c1626b0b5b14a6",
          "sha256": "24211dea18965e1448a0248fb0a741bc9d77dbdaa467698a342740e16ffedda1"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba2a157d312aecc1c2c1626b0b5b14a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 36812,
        "upload_time": "2022-08-13T11:27:18",
        "upload_time_iso_8601": "2022-08-13T11:27:18.508537Z",
        "url": "https://files.pythonhosted.org/packages/26/47/528d7c8f5256182ba9051ab0064b2599fe486cd5fea1ec3809c6b7a10838/vmcp-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6a9bd360fc30ef5754d834723c0cf096518500a829aa94aeeb23672a0c9a645",
          "md5": "57bf0e314954d90923e96ebf531570d9",
          "sha256": "44f38703b786d3885d51c860b44209bb27b3e02a3b86110f943f68ef3d5df713"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "57bf0e314954d90923e96ebf531570d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 40145,
        "upload_time": "2022-08-13T11:27:20",
        "upload_time_iso_8601": "2022-08-13T11:27:20.264896Z",
        "url": "https://files.pythonhosted.org/packages/b6/a9/bd360fc30ef5754d834723c0cf096518500a829aa94aeeb23672a0c9a645/vmcp-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15df3f83d1716efa70e44c41d4b3d184aede48826183960efc1b8c882d90f77b",
          "md5": "b21fc487dcc13ed5bc0b6472c3fd09aa",
          "sha256": "a9ed48bc6e08e392bbab9b1d85488b72ef79972f212c95d23284f0f005e8c5cd"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b21fc487dcc13ed5bc0b6472c3fd09aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 36802,
        "upload_time": "2022-08-13T12:59:52",
        "upload_time_iso_8601": "2022-08-13T12:59:52.170725Z",
        "url": "https://files.pythonhosted.org/packages/15/df/3f83d1716efa70e44c41d4b3d184aede48826183960efc1b8c882d90f77b/vmcp-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f91ff002acfe803876edfc8f5f5c990b92221faa6f5d035defc2e2a11587539f",
          "md5": "364abfc0af36ae67f60d11e8565804ad",
          "sha256": "137634710ea89ae8a277fa900f6d446be4a951cca04d226531bdcbb0ae427b04"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "364abfc0af36ae67f60d11e8565804ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 40097,
        "upload_time": "2022-08-13T12:59:53",
        "upload_time_iso_8601": "2022-08-13T12:59:53.990258Z",
        "url": "https://files.pythonhosted.org/packages/f9/1f/f002acfe803876edfc8f5f5c990b92221faa6f5d035defc2e2a11587539f/vmcp-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "983e2a16120d3e1615211c935f6258e5e267d03247a9bd144516e2d5c8808c30",
          "md5": "93f2d26539d5fcb82d7f2eef564386f3",
          "sha256": "c191864e28ea761da4a233dfc4a812f869f88bb01641471a9934170d45f1d92f"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93f2d26539d5fcb82d7f2eef564386f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 36684,
        "upload_time": "2022-08-15T15:45:37",
        "upload_time_iso_8601": "2022-08-15T15:45:37.407299Z",
        "url": "https://files.pythonhosted.org/packages/98/3e/2a16120d3e1615211c935f6258e5e267d03247a9bd144516e2d5c8808c30/vmcp-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b574cacf312daf0f186dc46afb0103718aba49f9387ca64452735d156132c0b4",
          "md5": "5b2a4b258370e817313028df6b0cc2a7",
          "sha256": "754924a93d395d80b4530677aa9cadb7695213c31578d2648369d1d1c098151c"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5b2a4b258370e817313028df6b0cc2a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 40004,
        "upload_time": "2022-08-15T15:45:39",
        "upload_time_iso_8601": "2022-08-15T15:45:39.324756Z",
        "url": "https://files.pythonhosted.org/packages/b5/74/cacf312daf0f186dc46afb0103718aba49f9387ca64452735d156132c0b4/vmcp-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32d1ec5e8970ffa0fd35d680fa52973493e8979fa7be7b8650553a2cdb98ff6b",
          "md5": "6aa693de66da89041c3a5eef5b4df4ea",
          "sha256": "12afa227d4deac00085c3b00e963ce623b209707f9108af298d1fddf78406991"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6aa693de66da89041c3a5eef5b4df4ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 36892,
        "upload_time": "2022-08-22T13:48:27",
        "upload_time_iso_8601": "2022-08-22T13:48:27.224520Z",
        "url": "https://files.pythonhosted.org/packages/32/d1/ec5e8970ffa0fd35d680fa52973493e8979fa7be7b8650553a2cdb98ff6b/vmcp-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4c795df148164834b2be2d92c597235314da4debe4f8236fd5ff39553db6016",
          "md5": "2f48d8bd98dfa175942d60b30002d5ab",
          "sha256": "b134beb0faf88c7a1bc3b981519398076f3a0e2d33f69e71758097071dde678d"
        },
        "downloads": -1,
        "filename": "vmcp-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2f48d8bd98dfa175942d60b30002d5ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 40406,
        "upload_time": "2022-08-22T13:48:29",
        "upload_time_iso_8601": "2022-08-22T13:48:29.015984Z",
        "url": "https://files.pythonhosted.org/packages/e4/c7/95df148164834b2be2d92c597235314da4debe4f8236fd5ff39553db6016/vmcp-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32d1ec5e8970ffa0fd35d680fa52973493e8979fa7be7b8650553a2cdb98ff6b",
        "md5": "6aa693de66da89041c3a5eef5b4df4ea",
        "sha256": "12afa227d4deac00085c3b00e963ce623b209707f9108af298d1fddf78406991"
      },
      "downloads": -1,
      "filename": "vmcp-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6aa693de66da89041c3a5eef5b4df4ea",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 36892,
      "upload_time": "2022-08-22T13:48:27",
      "upload_time_iso_8601": "2022-08-22T13:48:27.224520Z",
      "url": "https://files.pythonhosted.org/packages/32/d1/ec5e8970ffa0fd35d680fa52973493e8979fa7be7b8650553a2cdb98ff6b/vmcp-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4c795df148164834b2be2d92c597235314da4debe4f8236fd5ff39553db6016",
        "md5": "2f48d8bd98dfa175942d60b30002d5ab",
        "sha256": "b134beb0faf88c7a1bc3b981519398076f3a0e2d33f69e71758097071dde678d"
      },
      "downloads": -1,
      "filename": "vmcp-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "2f48d8bd98dfa175942d60b30002d5ab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 40406,
      "upload_time": "2022-08-22T13:48:29",
      "upload_time_iso_8601": "2022-08-22T13:48:29.015984Z",
      "url": "https://files.pythonhosted.org/packages/e4/c7/95df148164834b2be2d92c597235314da4debe4f8236fd5ff39553db6016/vmcp-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}