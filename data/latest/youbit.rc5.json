{
  "info": {
    "author": "Florian Laporte",
    "author_email": "florianl@florianl.dev",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<p align=\"center\">\n<a href=\"https://github.com/MeViMo/youbit/blob/main/LICENSE\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/l/youbit?color=99ddcc\" alt=\"License\">\n</a>\n<a href=\"https://pypi.org/project/youbit/\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/youbit?color=99ddcc\" alt=\"Package version\">\n</a>\n<a href=\"#\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/pyversions/youbit?color=%2399DDCC\" alt=\"Python versions\">\n</a>\n<a href=\"#\" target=\"_blank\">\n    <img src=\"https://img.shields.io/maintenance/no/2022?color=99ddcc\" alt=\"maintained status\">\n</a>\n</p>\n\n<p align=\"center\">\n    <img src=\"https://i.imgur.com/SsCzuP3.png\" alt=\"YouBit visual\">\n    </br>\n</p>\n\nYouBit allows you to host any type of file on YouTube.\n\nIt does this by creating a video where every pixel represents one or more bits of the original file. When downloaded from YouTube, this video can be decoded back into the original file. [Here's an example of such a video](https://www.youtube.com/watch?v=dnhlx48t-h4).\nYouTube imposes no limits on the number of videos you can upload.\n\nThis is not a novel idea and has been explored by other projects such as [YouTubeDrive](https://github.com/dzhang314/YouTubeDrive) and [fvid](https://github.com/AlfredoSequeida/fvid). However, these projects left alot of good ideas on the table. YouBit adds a bunch of features, ideas and options to the base concept, while making a reasonable attempt at being performant.\n<br><br>\n:warning: **If you use YouBit, and Google does not like it, they might sanction the account. Use at your own risk!** :warning:\n<br><br>\n\n\n# Installation\n```\npip install youbit\n```\n**NOTE**: If a wheel is not available for your platform, a C compiler needs to be installed prior to installation.\n<br><br>\n\n# Usage:  CLI\nEncode and upload a file:\n```\npython -m youbit upload C:/myfile.txt firefox\n```\n**NOTE**: If you want YouBit to upload videos for you, **chrome** needs to be installed.\nThe 'firefox' argument denotes which browser YouBit should extract cookies from to authenticate itself with YouTube.\nIn this example, the currently logged-in account in *firefox* will be used. Can be any of ('firefox', 'chrome', 'edge', 'brave', 'opera', 'chromium').\n*Make sure* this account has gone to [studio.youtube.com](https://studio.youtube.com) before using it with YouBit.\nWhen going there for the first time, some popups might appear to ask for things like a channel name. YouBit will not traverse these for you.\n<br><br>\n\nDownload and decode a YouBit video:\n```\npython -m youbit download https://youtu.be/dQw4w9WgXcQ\n```\nOutput is always saved in the current working directory unless specified otherwise.\n<br><br>\n\nDecode a local video:\n```\npython -m youbit decode C:/myvideo.mp4\n```\n**NOTE**: This video *needs* to have been downloaded from YouTube. You cannot encode a file, and then immeadiately decode just to test it out.\n<br><br>\n\nEncode a file without uploading:\n```\npython -m youbit encode C:/myfile.txt\n```\n<br><br>\n\n\n# Usage: Python API\nAlternatively, the Python API can be used directly:\n```py\nfrom youbit import Encoder\nfrom youbit.settings import Settings, Browser\n\nsettings = Settings(browser=Browser.CHROME)\nencoder = Encoder('C:/myfile.txt', settings)\nurl = encoder.encode_and_upload()\n```\n\n```py\nfrom youbit import download_and_decode\n\nfilepath = download_and_decode('https://youtu.be/dQw4w9WgXcQ', 'C:/mydir/')\n```\n\nEncode without upload:\n```py\nfrom youbit import Encoder\n\nencoder = Encoder('C:/myfile.txt')\nfilepath = encoder.encode_local('C:/mydirectory/')\n```\n\nChanging encoder settings:\n```py\nfrom youbit import Encoder\nfrom youbit.settings import Settings, Resolution, BitsPerPixel\n\nsettings = Settings()  # sensible defaults if left untouched\nsettings.resolution = Resolution.QHD\nsettings.bits_per_pixel = BitsPerPixel.TWO\nsettings.ecc_symbols = 69\nsettings.constant_rate_factor = 20\nsettings.null_frames = True\n\nencoder = Encoder('C:/myfile.txt', my_settings)\n```\n\nDecoding a *local* file a little trickier. You must know the settings that were used during the encoding process in order to succesfully decode it.\nYou do this by passing a Metadata object to the decoding function. Your YouBit videos should have a base64 encoded string as their description.\nThis string can be used to instantiate the correct associated Metadata object.\n```py\nfrom youbit import decode_local, Metadata\n\nmetadata = Metadata.create_from_base64(VIDEO_DESCRIPTION_STRING)\n\nfilepath = decode_local('decode_me.mp4', 'C:/documents/', metadata)\n```\n\n<br><br>\n\n\n# FAQ\n\n- [Does this mean infinite, free cloud storage?!](#does-this-mean-infinite-free-cloud-storage)\n- [Why no colors?](#why-no-colors)\n- [What is 'bpp'?](#what-is-bpp)\n- [Why a framerate of 1?](#why-a-framerate-of-1)\n- [Why not you use the YouTube API for uploads?](#why-not-use-the-youtube-api-for-uploads)\n- [After uploading, how long do I have to wait to download A YouBit video again?](#after-uploading-how-long-do-i-have-to-wait-to-download-a-youbit-video-again)\n- [Why can I not use resolution x?](#why-can-i-not-use-resolution-x)\n- [How large can my file be?](#how-large-can-my-file-be)\n- [Why not upload lossless videos?](#why-not-upload-lossless-videos)\n- [What settings should I use?](#what-settings-should-i-use)\n<br><br>\n\n## Does this mean infinite, free cloud storage?!\nNo.\n+ It's slower: encoding and decoding takes time. The files uploaded to YouTube are much larger than the original. YouTube needs to *process* the video.\n+ You can't trust it: If YouTube changes some things tomorrow, there's a chance your video can no longer be decoded.\n\nIt's just a very fun concept to explore :)\n<br><br>\n\n## Why no colors?\nBecause [chroma subsampling](https://en.wikipedia.org/wiki/Chroma_subsampling) will compress away color information with extreme prejudice. So instead we save all our information in the luminance channel only. This results in greyscale videos, and works much better. It coincidentally makes the encoding and decoding process less complex as well.\n<br><br>\n\n## What is \"Bits Per Pixel\" (BPP)?\nAs you might have guessed, BitsPerPixel is a settings that dictates how many bits of information will be saved in a single pixel of video. A higher BPP allows for a higher information density - a smaller output video in comparison to the original file.\nHowever, it also introduces more corrupt pixels.\n\nA BPP of 1 means each pixel only has 2 states, 1 and 0, on and off, white and black. This means our greyscale pixels have a value of either 255 (white) or 0 (black). During decoding, YouBit treats anything 128 or more as a 1, and everything below 128 as a 0. This means YouTube's compression needs to change a pixel's value by at least 127 for it to become corrupt.\n\nNow consider a BPP of 2. Two bits have 4 possible states (00,01,10,11). So to represent 2 bits, our pixels need to have 4 possible states as well. Something like (0,85,170,255). The distance between these is now smaller: a change of only 43 is now required to corrupt the pixel. Our video will be half the size, but easier to corrupt when YouTube re-encodes it during upload.\n\nThe default settings use a BPP of 1. A BPP of 2 is possible, and 3 is experimental.\n<br><br>\n\n## Why a framerate of 1?\nI do not know exactly how YouTube decides on the bitrate to allocate to a stream, but it seems to rougly follow their [recommended video bitrates](https://support.google.com/youtube/answer/1722171?hl=en#zippy=%2Cbitrate). All else equal, a video with a framerate of 1 will get the same bitrate as a video with a framerate of 30. See where I'm going with this? More effective bandwith per frame, less compression.\n\nSecondarily, using a framerate of 1 during encoding allows us to **read only [keyframes](https://en.wikipedia.org/wiki/Group_of_pictures)** during the decoding process.\nThis is *very* important. Testing showed a massive delta in corruption between keyframes and B- or P-frames. Many keyframes would be completely void of any errors, while some B-frames at the end of a [GOP](https://en.wikipedia.org/wiki/Group_of_pictures) would be almost entirely unusable.\n\nIf we use a framerate of 1, YouTube will re-encode it as a video with a framerate of 6. This seems to be the minimum on YouTube.\nAfter analyzing the (open) GOP structure of these 6fps videos, it became apparent that just skipping any non-keyframes during the decoding process is not enough. We would see *duplicate* keyframes scattered around. Fortunately, these duplicate keyframes are predicatable. YouBit discards what it knows to be duplicate keyframes during the decoding process.\n\nThis *does* mean that YouBit videos that did **not** go through YouTube, **cannot** be decoded.\n<br><br>\n\n## Why not use the YouTube API for uploads?\nThere are 2 reasons. For one, unverified API projects can only upload private videos. These videos are locked to being private and this cannot be changed. This means YouBit links would not be able to be shared between users. (And no, getting this project verified by Google is not an option for obvious reasons).\n\nSecondly, The YouTube Data API v3 works with a quota system: all interactions with the API have an associated cost. Uploading a video costs a staggering 1600 points, out of 10,000 points that are replenished daily. This would limit the user to a measly 6 uploads per day.\n\nInstead YouBit extracts cookies from the browser of choice, to authenticate a [Selenium](https://www.selenium.dev/) headless browser instance where the upload process is automated. This is very hacky, adds alot of overhead and is very sensitive to changes to YouTube's DOM, but it is the best we've got.\n<br><br>\n\n## After uploading, how long do I have to wait to download A YouBit video again?\nThis is tricky, since it can take a long while for YouTube to *fully* finish processing a video.\nIf the video is unavailable because it is still processing (this means not even an SD stream is available yet), YouBit will throw an exception.\nIf the video is technically available, but the resolution that was specified during the encoding process is not yet available, YouBit will throw an exception.\nIf neither of the above, YouBit *will* download the video and *attempt* to decode it.\n\nThus, it is recommended to wait a sufficient amount of time. The highest available video bitrate (VBR) of any uploaded YouBit video can be checked most easily using the CLI:\n```\npy -m youbit test vbr https://www.youtube.com/watch?v=SLP9mbCuhJc\n```\n| Resolution (no zero-frame) | VBR settles around |\n| ---------- | ------------------ |\n| 1920x1080  | 10200              |\n| 2560x1440  | 19700              |\n| 3890x2160  | 47800              |\n| 7680x4320  | 172407             |\n\nThe decoding process might very well still work with a lower VBR, it all depends on the settings that were used.\nThere's no real advantage to using higher resolutions than the default of 1080p.\n<br><br>\n\n\n## Why can I not use resolution x?\nTechnically YouBit can work with any resolution video, however, resolutions lower than 1920x1080 are not supported because the bitrate YouTube allocates to them does not always scale favourably for our use-case. It also introduces inconsistencies because YouTube may use different, less performant codecs based on the resolution.\n\nResolutions higher than 1080p are supported, but should generally not be used. If you wish to experiment these might be of interest to you, but otherwise they just introduce a far longer *processing* time on YouTube's end.\n<br><br>\n\n\n## How large can my file be?\nYouBit encodes your files in chunks, so you are not limited by system memory, but we are limited by YouTube's maximum video length.\nYouTube videos are allowed to be up to 12 hours long, or 128GB, whichever comes first.\nYouBit will raise exceptions during the encoding process if either of these are violated.\n(*If the YouTube account you are using is not verified, the limit is 15 minutes instead. Be sure to verify your account.*)\n\nOfcourse, this depends entirely on the settings selected.\nTo give you an idea, the default settings will stop working with files larger than **9GB**.\n<br><br>\n\n\n## What is a 'null frame'?\nYouBit has the option to use 'null frames'. If enabled, YouBit will interject completely black frames in between 'real' frames when generating the video.\nThe idea is that YouTube will still allocate the same bitrate, but since the video is twice as long and all-black frames can be compressed away almost entirely, we will have twice the effective bandwidth per actual data-holding frame. In practice, this only works a little: videos with zero frames have a lower bitrate, but not half. 1080p videos seem to get a bitrate of 7000, compared to the usual 10200.\n\nThis is still a useful ~40% effective inrease in available bandwidth, leading to less errors and a potentially higher information density.\nOn higher resolutions however, the use of zero frames seems to be detrimental. The default settings forego using null frames.\nUse at your own discretion.\n<br><br>\n\n\n## Why not upload lossless videos?\nCompressing the video locally (before YouTube will compress it *again*) might seem like a very bad idea if we want our data to remain intact.\nHowever, the difference in filesize is very big. And as soon as the encoding process is reasonably time efficient, the time it takes to upload the video to YouTube becomes by far the biggest bottleneck. If we carefully control the amount of compressing that we do locally, we can make our video alot smaller (and faster to upload) without affecting data integrity all that much.\n\nThat being said, changing the 'crf' option in YouBit allows you to control this variable. It is simply the [Constant Rate Factor](https://slhck.info/video/2017/02/24/crf-guide.html) setting that is passed to the x264 codec.\n<br><br>\n\n\n## What settings should I use?\nUnless you know exactly what *all* the options do and how they interact, I would advise you to stick to the defaults.\nNot to say that the defaults settings are the best, they are just the simplest and most reliable.\nYou can actually speed up the whole process (encode -> upload -> download -> decode) significantly by using different settings.\n\nFor example, setting 'null_frames' to True allows you to use a 'BitsPerPixel' of 2, which drastically speeds up the whole process, since the resulting video is half the size while still being able to be succesfully decoded.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MeViMo/youbit",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "youbit",
    "package_url": "https://pypi.org/project/youbit/",
    "platform": null,
    "project_url": "https://pypi.org/project/youbit/",
    "project_urls": {
      "Homepage": "https://github.com/MeViMo/youbit",
      "Repository": "https://github.com/MeViMo/youbit"
    },
    "release_url": "https://pypi.org/project/youbit/2.0.0/",
    "requires_dist": [
      "av (>=9.2.0,<10.0.0)",
      "yt-dlp (>=2022.5.18,<2023.0.0)",
      "typer (>=0.4.1,<0.5.0)",
      "webdriver-manager (>=3.7.0,<4.0.0)",
      "selenium (>=4.2.0,<5.0.0)",
      "browser-cookie3 (>=0.15.0,<0.16.0)",
      "rich (>=12.4.4,<13.0.0)",
      "numba (>=0.55.2,<0.56.0)"
    ],
    "requires_python": ">=3.9,<3.11",
    "summary": "Host any file on YouTube, for free.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15508861,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff9a96dfa7ad12179149d9369402d89ad82b689f805ea97b3217737ba83707c4",
          "md5": "0b5bda4eea79ae3c1b070b3dda3504be",
          "sha256": "824db497fda16c83896f64cee335b86ee2ba9f0d8eff15f4056e23b07b54f4e5"
        },
        "downloads": -1,
        "filename": "youbit-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0b5bda4eea79ae3c1b070b3dda3504be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.11",
        "size": 268657,
        "upload_time": "2022-06-28T13:58:57",
        "upload_time_iso_8601": "2022-06-28T13:58:57.337544Z",
        "url": "https://files.pythonhosted.org/packages/ff/9a/96dfa7ad12179149d9369402d89ad82b689f805ea97b3217737ba83707c4/youbit-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bce1dc66ef46652b51450a40b95200146c1da4fafa8ee133c9c0d0c2b2f71687",
          "md5": "27e34b9490179e049628c27c7dc77328",
          "sha256": "abde21bd5bd061fdbed0eec91b7eac564bf7abe5bf1d220fa2977059c5a5a3cc"
        },
        "downloads": -1,
        "filename": "youbit-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "27e34b9490179e049628c27c7dc77328",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.11",
        "size": 270437,
        "upload_time": "2022-07-08T11:03:10",
        "upload_time_iso_8601": "2022-07-08T11:03:10.868894Z",
        "url": "https://files.pythonhosted.org/packages/bc/e1/dc66ef46652b51450a40b95200146c1da4fafa8ee133c9c0d0c2b2f71687/youbit-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9226c826af66d03a8be338bb3c85c6dfdecde82cd658f07eec756452da32486",
          "md5": "12771114d4351189b4c4091093d57fc3",
          "sha256": "1a172b4b7b9a6cd2ac6355da3a3beebc074e45008cea9c69aae85ca9e6f77fa4"
        },
        "downloads": -1,
        "filename": "youbit-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "12771114d4351189b4c4091093d57fc3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.11",
        "size": 270834,
        "upload_time": "2022-07-09T15:24:51",
        "upload_time_iso_8601": "2022-07-09T15:24:51.834397Z",
        "url": "https://files.pythonhosted.org/packages/b9/22/6c826af66d03a8be338bb3c85c6dfdecde82cd658f07eec756452da32486/youbit-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1061e51b2a365ec0169c6551a0e72e8dafa9394da86ec2324f63e7adfb6391ce",
          "md5": "b533c82886456e4e6683347a425da81d",
          "sha256": "817ea251b6845e7e24e9b55a05d09880dc47fdd5caef13ff3770ffe5530ab3d1"
        },
        "downloads": -1,
        "filename": "youbit-0.1.4-cp310-cp310-manylinux_2_31_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b533c82886456e4e6683347a425da81d",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.9,<3.11",
        "size": 1404262,
        "upload_time": "2022-07-13T09:17:23",
        "upload_time_iso_8601": "2022-07-13T09:17:23.042763Z",
        "url": "https://files.pythonhosted.org/packages/10/61/e51b2a365ec0169c6551a0e72e8dafa9394da86ec2324f63e7adfb6391ce/youbit-0.1.4-cp310-cp310-manylinux_2_31_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd3f76c7525912251f969298f6d03b28405135e09c757950303d4d00f21f2160",
          "md5": "ed7a4984f8c955ef8e4f7a23dc11c285",
          "sha256": "554a93c21c6d81e094e2e00e0d0e1782cf4827526ce8f95befa62022a9bbb26a"
        },
        "downloads": -1,
        "filename": "youbit-0.1.4-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "ed7a4984f8c955ef8e4f7a23dc11c285",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.9,<3.11",
        "size": 733544,
        "upload_time": "2022-07-13T09:17:25",
        "upload_time_iso_8601": "2022-07-13T09:17:25.485480Z",
        "url": "https://files.pythonhosted.org/packages/bd/3f/76c7525912251f969298f6d03b28405135e09c757950303d4d00f21f2160/youbit-0.1.4-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf27ea31bbaaae9e7bd9d6e88c1682c1a2da6c258f9113788f185886e34c3c6d",
          "md5": "e55830646120b881806eab10522b083e",
          "sha256": "dfc53d7ce2cde7e3b41d526ffa6890b9bfa7bf8f6f98e27bbd3bd1e92454386f"
        },
        "downloads": -1,
        "filename": "youbit-0.1.4-cp39-cp39-manylinux_2_31_x86_64.whl",
        "has_sig": false,
        "md5_digest": "e55830646120b881806eab10522b083e",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.9,<3.11",
        "size": 1426226,
        "upload_time": "2022-07-13T09:17:28",
        "upload_time_iso_8601": "2022-07-13T09:17:28.362383Z",
        "url": "https://files.pythonhosted.org/packages/bf/27/ea31bbaaae9e7bd9d6e88c1682c1a2da6c258f9113788f185886e34c3c6d/youbit-0.1.4-cp39-cp39-manylinux_2_31_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36ee6ad5702dd3d2a6dd741763e224b4216a97fedf6570f81043bd8554edf210",
          "md5": "5d019208c8731220798df5b966556563",
          "sha256": "653018c6868e52d8497e85987642b1c9963dc451021d40db3c6ec27b15c3067f"
        },
        "downloads": -1,
        "filename": "youbit-0.1.4-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "5d019208c8731220798df5b966556563",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.9,<3.11",
        "size": 739804,
        "upload_time": "2022-07-13T09:17:29",
        "upload_time_iso_8601": "2022-07-13T09:17:29.789532Z",
        "url": "https://files.pythonhosted.org/packages/36/ee/6ad5702dd3d2a6dd741763e224b4216a97fedf6570f81043bd8554edf210/youbit-0.1.4-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bf4577f4be259e461562fb7bad02c135afeee2fbc26f4a95834e26adfb18180",
          "md5": "d246c4a92206081ca86d465af890083e",
          "sha256": "93cc254bbdb0d394c126588dbe8dedcf7c2ad609f72b95eba0d43f11ebbcd6bd"
        },
        "downloads": -1,
        "filename": "youbit-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d246c4a92206081ca86d465af890083e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.11",
        "size": 290161,
        "upload_time": "2022-07-13T09:17:31",
        "upload_time_iso_8601": "2022-07-13T09:17:31.329386Z",
        "url": "https://files.pythonhosted.org/packages/3b/f4/577f4be259e461562fb7bad02c135afeee2fbc26f4a95834e26adfb18180/youbit-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8eb86126ad8f7a9377379b1e80b28f6dd9949137d3248c5e287e92891a4ea5b",
          "md5": "85aa3f7853268bc0bf22c8e2d702eab5",
          "sha256": "0440c4ba52c96b6461213dc6fa197bb79fbf98d3469c38168da6dec757bb3c7c"
        },
        "downloads": -1,
        "filename": "youbit-2.0.0-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "85aa3f7853268bc0bf22c8e2d702eab5",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.9,<3.11",
        "size": 725713,
        "upload_time": "2022-10-24T12:07:08",
        "upload_time_iso_8601": "2022-10-24T12:07:08.637973Z",
        "url": "https://files.pythonhosted.org/packages/b8/eb/86126ad8f7a9377379b1e80b28f6dd9949137d3248c5e287e92891a4ea5b/youbit-2.0.0-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edfcd0d347a68aa4af08d0241673d4ebcff627e22150da4288b71c159d7ff8f7",
          "md5": "a0b2ab51d1cb6049a86978e5537a65bc",
          "sha256": "8cb9507b4db2c29dc5ab7d745669641cc49ff3bf3b7e73663b7806b4c4c2cf69"
        },
        "downloads": -1,
        "filename": "youbit-2.0.0-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "a0b2ab51d1cb6049a86978e5537a65bc",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.9,<3.11",
        "size": 731976,
        "upload_time": "2022-10-24T12:07:10",
        "upload_time_iso_8601": "2022-10-24T12:07:10.746215Z",
        "url": "https://files.pythonhosted.org/packages/ed/fc/d0d347a68aa4af08d0241673d4ebcff627e22150da4288b71c159d7ff8f7/youbit-2.0.0-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a7813b9a8993ba2c2ed56ecfc60de2c5b37cea94d3508d2476aba205542b5a7",
          "md5": "763a677a35aee1770a8748c7236fc277",
          "sha256": "0db526705f0fb6d90a53f485c1f469d8e4b929cf05749ae0a01163a5e0266382"
        },
        "downloads": -1,
        "filename": "youbit-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "763a677a35aee1770a8748c7236fc277",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.11",
        "size": 286597,
        "upload_time": "2022-10-24T12:07:12",
        "upload_time_iso_8601": "2022-10-24T12:07:12.425074Z",
        "url": "https://files.pythonhosted.org/packages/8a/78/13b9a8993ba2c2ed56ecfc60de2c5b37cea94d3508d2476aba205542b5a7/youbit-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8eb86126ad8f7a9377379b1e80b28f6dd9949137d3248c5e287e92891a4ea5b",
        "md5": "85aa3f7853268bc0bf22c8e2d702eab5",
        "sha256": "0440c4ba52c96b6461213dc6fa197bb79fbf98d3469c38168da6dec757bb3c7c"
      },
      "downloads": -1,
      "filename": "youbit-2.0.0-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "85aa3f7853268bc0bf22c8e2d702eab5",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.9,<3.11",
      "size": 725713,
      "upload_time": "2022-10-24T12:07:08",
      "upload_time_iso_8601": "2022-10-24T12:07:08.637973Z",
      "url": "https://files.pythonhosted.org/packages/b8/eb/86126ad8f7a9377379b1e80b28f6dd9949137d3248c5e287e92891a4ea5b/youbit-2.0.0-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edfcd0d347a68aa4af08d0241673d4ebcff627e22150da4288b71c159d7ff8f7",
        "md5": "a0b2ab51d1cb6049a86978e5537a65bc",
        "sha256": "8cb9507b4db2c29dc5ab7d745669641cc49ff3bf3b7e73663b7806b4c4c2cf69"
      },
      "downloads": -1,
      "filename": "youbit-2.0.0-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "a0b2ab51d1cb6049a86978e5537a65bc",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.9,<3.11",
      "size": 731976,
      "upload_time": "2022-10-24T12:07:10",
      "upload_time_iso_8601": "2022-10-24T12:07:10.746215Z",
      "url": "https://files.pythonhosted.org/packages/ed/fc/d0d347a68aa4af08d0241673d4ebcff627e22150da4288b71c159d7ff8f7/youbit-2.0.0-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a7813b9a8993ba2c2ed56ecfc60de2c5b37cea94d3508d2476aba205542b5a7",
        "md5": "763a677a35aee1770a8748c7236fc277",
        "sha256": "0db526705f0fb6d90a53f485c1f469d8e4b929cf05749ae0a01163a5e0266382"
      },
      "downloads": -1,
      "filename": "youbit-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "763a677a35aee1770a8748c7236fc277",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<3.11",
      "size": 286597,
      "upload_time": "2022-10-24T12:07:12",
      "upload_time_iso_8601": "2022-10-24T12:07:12.425074Z",
      "url": "https://files.pythonhosted.org/packages/8a/78/13b9a8993ba2c2ed56ecfc60de2c5b37cea94d3508d2476aba205542b5a7/youbit-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}