{
  "info": {
    "author": "fuliucansheng",
    "author_email": "fuliucansheng@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<h1 align=\"Center\"> <p> unitorch </p> </h1>\n\n## Introduction\n\nunitorch provides efficient implementation of popular unified NLU / NLG models with PyTorch. It automatically optimizes training / inference speed based on pupular NLP toolkits (transformers, fairseq, fastseq, etc) without accuracy loss. All these can be easily done (no need to change any code/model/data if using our command line tool, or simply add one-line code ` import unitorch` if using source code).\n\n## Installation\n\n```bash\npip3 install unitorch\n```\n\n### Requirements\n\n- Python version >= 3.6\n- configparser\n- [datasets](https://github.com/huggingface/datasets)\n- [fairseq](https://github.com/pytorch/fairseq) == 0.10.2\n- fire\n- pyarrow == 2.0.0\n- pyparsing\n- scipy\n- sklearn\n- [torch](http://pytorch.org/) >= 1.4.0\n- [transformers](https://github.com/huggingface/transformers) == 4.3.2\n\n## Usage\n\n### Use source code\n\n```python\n# import unitorch at the beginning of your program\nimport unitorch\n\n# use as general package\nfrom unitorch.generation.unilm import UnilmForGeneration\nunilm_model = UnilmForGeneration(\"path/to/unilm/config.json\")\n\n# use auto mode which need a config file for lib init\nfrom unitorch import core_configure_parser\ncfg = core_configure_parser(\"path/to/config.ini\")\n\n# init all groups in unitorch, including model, task, process, dataset, etc.\nunitorch.init_core_group(cfg)\n\n# only init model group\nunitorch.init_core_model_group(cfg)\n\n# get inited model\nunilm_model = unitorch.core_model.get('core/model/unilm_for_generation')\n\n# train inited task\nunitorch.core_task.get('core/auto/supervised_task').train()\n\n```\n\n### Use unitorch cli\n```bash\n# only use config\nunitorch-auto-train path/to/config.ini \\\n\t--core/model/bert@config_name_or_file bert-large-uncased\n\n# run custom code using unitorch auto mode (like fairseq-cli)\nunitorch-auto-train path/to/code/directory \\\n\t--core/model/bert@config_name_or_file bert-large-cased\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fuliucansheng/unitorch",
    "keywords": "NLP NLG deep learning PyTorch",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unitorch",
    "package_url": "https://pypi.org/project/unitorch/",
    "platform": "",
    "project_url": "https://pypi.org/project/unitorch/",
    "project_urls": {
      "Homepage": "https://github.com/fuliucansheng/unitorch"
    },
    "release_url": "https://pypi.org/project/unitorch/0.0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Unified training/inference framework based PyTorch for NLP / CV / REC / RL / GNN with SOTA and fast performance",
    "version": "0.0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9481416,
  "releases": {
    "0.0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "461935dc7c96443ee231532e8411dc202403a4af30694cb04e0146914349faf5",
          "md5": "ccd158d2d8a3b96305f72b5bd5ef1820",
          "sha256": "fc4e71ba31ee9dd67b2b77b03bdef01e19c3ac7bd9b433f344e98be90ec519a8"
        },
        "downloads": -1,
        "filename": "unitorch-0.0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ccd158d2d8a3b96305f72b5bd5ef1820",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 51736,
        "upload_time": "2021-02-21T15:01:18",
        "upload_time_iso_8601": "2021-02-21T15:01:18.856195Z",
        "url": "https://files.pythonhosted.org/packages/46/19/35dc7c96443ee231532e8411dc202403a4af30694cb04e0146914349faf5/unitorch-0.0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "461935dc7c96443ee231532e8411dc202403a4af30694cb04e0146914349faf5",
        "md5": "ccd158d2d8a3b96305f72b5bd5ef1820",
        "sha256": "fc4e71ba31ee9dd67b2b77b03bdef01e19c3ac7bd9b433f344e98be90ec519a8"
      },
      "downloads": -1,
      "filename": "unitorch-0.0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ccd158d2d8a3b96305f72b5bd5ef1820",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 51736,
      "upload_time": "2021-02-21T15:01:18",
      "upload_time_iso_8601": "2021-02-21T15:01:18.856195Z",
      "url": "https://files.pythonhosted.org/packages/46/19/35dc7c96443ee231532e8411dc202403a4af30694cb04e0146914349faf5/unitorch-0.0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}