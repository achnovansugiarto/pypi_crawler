{
  "info": {
    "author": "Troy J. Farrell",
    "author_email": "troy@entheossoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django :: 2.2",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "======================\nDjango Loves Sandstorm\n======================\n\nDjango Loves Sandstorm (D♥S, ``DLS…`` and ``djangolovessandstorm``) provides\ntools for adapting Django applications to work with Sandstorm.  For\nauthentication, D♥S uses `HTTP headers provided by Sandstorm`_ to manage\n``SandstormUser`` objects as required by `Django Auth`_.\n\n.. _`HTTP headers provided by Sandstorm`: https://docs.sandstorm.io/en/latest/developing/auth/#headers-that-an-app-receives\n.. _`Django Auth`: https://docs.djangoproject.com/en/2.2/topics/auth/\n\nInstallation and Configuration\n==============================\n\nD♥S requires installation in your Python environment and configuration in your\nDjango project.  This section documents the required configuration.\n\nApps\n----\n\nIf using the suggested ``SandstormUser`` user model, the\n``djangolovessandstorm`` app must be added to the Django ``INSTALLED_APPS``\nlist::\n\n    INSTALLED_APPS = [\n        …\n        \"djangolovessandstorm.apps.DLSConfig\",\n        …\n    ]\n\nAuthentication Backends\n-----------------------\n\nD♥S provides the ``DLSAllowAllUsersBackend`` authentication backend, which\npopulates the ``SandstormUser`` model from the HTTP headers\nprovided by the Sandstorm HTTP bridge.  Use it by adding it to the\n``AUTHENTICATION_BACKENDS`` list in the Django settings::\n\n    AUTHENTICATION_BACKENDS = [\n        \"djangolovessandstorm.backends.DLSAllowAllUsersBackend\",\n    ]\n\nAuthentication Model\n--------------------\n\nD♥S suggests the use of the ``SandstormUser`` model.  Set the\n``AUTH_USER_MODEL`` in Django settings::\n\n    AUTH_USER_MODEL = \"djangolovessandstorm.SandstormUser\"\n\nMiddleware\n----------\n\nD♥S requires the use of middleware to read these HTTP headers and create the\nappropriate ``SandstormUser`` objects.  This middleware is found in the\n``djangolovessandstorm.middleware`` module.\n\nIt is added to the Django settings ``MIDDLEWARE`` list.  In the list of\nmiddleware, ``SessionMiddleware`` should appear before\n``AuthenticationMiddleware``.  ``AuthenticationMiddleware`` should appear\nbefore ``DLSMiddleware``::\n\n    MIDDLEWARE = [\n        …\n        \"django.contrib.sessions.middleware.SessionMiddleware\",\n        \"\n        …\n        \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n        …\n        \"djangolovessandstorm.middleware.DLSMiddleware\",\n        …\n    ]\n\nPermissions\n-----------\n\nTo use the Django Auth superuser and staff roles, configure the\ncorresponding permissions in the Django settings.  D♥S will look for these\npermissions in the ``X-Sandstorm-Permissions`` HTTP header, which will\nappear based upon the settings of ``bridgeConfig.viewInfo.permissions``\ninside ``sandstorm-pkgdef.capnp``.  For example, the following two lines in\nyour Django settings, will result in Django expecting ``superuser`` and\n``staff`` to be set in ``sandstorm-pkgdef.capnp``::\n\n    DLS_SUPERUSER_PERMISSION = \"superuser\"\n    DLS_STAFF_PERMISSION = \"staff\"\n\nTo make this work, ``superuser`` and ``staff`` should be named as\npermissions in ``sandstorm-pkgdef.capnp``::\n\n    bridgeConfig = (\n      viewInfo = (\n        permissions = [\n          (\n            name = \"superuser\",\n            title = (defaultText = \"superuser\"),\n            description = (defaultText = \"full control\"),\n          ),\n          (\n            name = \"staff\",\n            title = (defaultText = \"staff\"),\n            description = (defaultText = \"administrator interface access\"),\n          ),\n        ],\n        roles = [\n          (\n            title = (defaultText = \"Full access\"),\n            permissions = [\n              true,  # superuser\n              true,  # staff\n            ],\n            verbPhrase = (defaultText = \"full access\"),\n            description = (defaultText = \"may view and alter all data and settings\"),\n          ),\n          (\n            title = (defaultText = \"Staff\"),\n            permissions = [\n              false, # superuser\n              true,  # staff\n            ],\n            verbPhrase = (defaultText = \"staff may administer some applications\"),\n            description = (defaultText = \"may view and alter all some data and settings through Django Admin\"),\n          ),\n        ],\n      ),\n    ),\n\nHow It Works\n============\n\nD♥S middleware processes requests, creating and updating ``SandstormUser``\nobjects as necessary.  To understand how the code works, look first at the\nmiddleware.\n\n``DLSMiddleware`` inherits from\n``django.contrib.auth.middleware.RemoteUserMiddleware``.  To understand the\ncode, begin by reading the ``process_request`` method.\n\n``DLSMiddleware.process_request`` calls\n``RemoteUserMiddleware.process_request``, which performs some sanity checks\nbefore calling ``django.contrib.auth.authenticate`` and\n``django.contrib.auth.login``.  If the authentication backend does not find the\nuser in the database, a new user is ``create``d, ``save``d and configured\n(``configure_user``).  ``DLSAllowAllUsersBackend.configure_user`` stores the\nuserʼs name and handle, and generates a session key.  (The session key is\nnecessary because a SandstormUser does not have a password hash, which would\notherwise function as the session key.)\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.tjf.us/en/code/python/djangolovessandstorm",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangolovessandstorm",
    "package_url": "https://pypi.org/project/djangolovessandstorm/",
    "platform": "",
    "project_url": "https://pypi.org/project/djangolovessandstorm/",
    "project_urls": {
      "Homepage": "http://www.tjf.us/en/code/python/djangolovessandstorm"
    },
    "release_url": "https://pypi.org/project/djangolovessandstorm/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django-Sandstorm integration",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8245705,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00baf2e3bae1102c8de44939cda8da2173f7440c3f63447b66bd0cf1dcec4688",
          "md5": "3d49b14be0cca2fea77dd9dfed2fe0b9",
          "sha256": "62f4c49d681424ef2fc067b4dfb760a9bd9d775b87c978f32b7e520926934f3a"
        },
        "downloads": -1,
        "filename": "djangolovessandstorm-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d49b14be0cca2fea77dd9dfed2fe0b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8288,
        "upload_time": "2020-09-14T08:37:07",
        "upload_time_iso_8601": "2020-09-14T08:37:07.893071Z",
        "url": "https://files.pythonhosted.org/packages/00/ba/f2e3bae1102c8de44939cda8da2173f7440c3f63447b66bd0cf1dcec4688/djangolovessandstorm-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5c9289dfa9d0610cf3f8755814a63aa3cae1c2edfb3719971eb139f06dad2e3",
          "md5": "600623865bf771aba24fffc4b0463c41",
          "sha256": "fd5413e99f000f7348711d0403cbb552cfc781f425d47d857040b512828160a1"
        },
        "downloads": -1,
        "filename": "djangolovessandstorm-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "600623865bf771aba24fffc4b0463c41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8780,
        "upload_time": "2020-09-14T08:37:10",
        "upload_time_iso_8601": "2020-09-14T08:37:10.350053Z",
        "url": "https://files.pythonhosted.org/packages/d5/c9/289dfa9d0610cf3f8755814a63aa3cae1c2edfb3719971eb139f06dad2e3/djangolovessandstorm-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a9b4d855eca1edbda34542b11f44b9ee1ea55746586de2e11d06b21431b3a58",
          "md5": "892e81c19f04811050cec1b53c8465d5",
          "sha256": "822333fe25d0ea52b0d1c08dc3973f1734ef7623b5dea7d7aae4b3fb587a5a20"
        },
        "downloads": -1,
        "filename": "djangolovessandstorm-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "892e81c19f04811050cec1b53c8465d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8873,
        "upload_time": "2020-09-22T16:51:45",
        "upload_time_iso_8601": "2020-09-22T16:51:45.801799Z",
        "url": "https://files.pythonhosted.org/packages/2a/9b/4d855eca1edbda34542b11f44b9ee1ea55746586de2e11d06b21431b3a58/djangolovessandstorm-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b4ea1347718c02ca52754bf65046d471573cc6f85c2f07583a87bd2940e315e",
          "md5": "0132ba345c5e8966bc8e4dc6a34d1b81",
          "sha256": "ddd0b0bb53a92af1f363033b411b10fcc11228638079b9e152fc24c12c7c124a"
        },
        "downloads": -1,
        "filename": "djangolovessandstorm-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0132ba345c5e8966bc8e4dc6a34d1b81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7975,
        "upload_time": "2020-09-22T16:51:47",
        "upload_time_iso_8601": "2020-09-22T16:51:47.102789Z",
        "url": "https://files.pythonhosted.org/packages/3b/4e/a1347718c02ca52754bf65046d471573cc6f85c2f07583a87bd2940e315e/djangolovessandstorm-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a9b4d855eca1edbda34542b11f44b9ee1ea55746586de2e11d06b21431b3a58",
        "md5": "892e81c19f04811050cec1b53c8465d5",
        "sha256": "822333fe25d0ea52b0d1c08dc3973f1734ef7623b5dea7d7aae4b3fb587a5a20"
      },
      "downloads": -1,
      "filename": "djangolovessandstorm-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "892e81c19f04811050cec1b53c8465d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8873,
      "upload_time": "2020-09-22T16:51:45",
      "upload_time_iso_8601": "2020-09-22T16:51:45.801799Z",
      "url": "https://files.pythonhosted.org/packages/2a/9b/4d855eca1edbda34542b11f44b9ee1ea55746586de2e11d06b21431b3a58/djangolovessandstorm-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b4ea1347718c02ca52754bf65046d471573cc6f85c2f07583a87bd2940e315e",
        "md5": "0132ba345c5e8966bc8e4dc6a34d1b81",
        "sha256": "ddd0b0bb53a92af1f363033b411b10fcc11228638079b9e152fc24c12c7c124a"
      },
      "downloads": -1,
      "filename": "djangolovessandstorm-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "0132ba345c5e8966bc8e4dc6a34d1b81",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7975,
      "upload_time": "2020-09-22T16:51:47",
      "upload_time_iso_8601": "2020-09-22T16:51:47.102789Z",
      "url": "https://files.pythonhosted.org/packages/3b/4e/a1347718c02ca52754bf65046d471573cc6f85c2f07583a87bd2940e315e/djangolovessandstorm-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}