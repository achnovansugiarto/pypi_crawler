{
  "info": {
    "author": "Craig Barratt",
    "author_email": "cbarratt@users.sourceforge.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Home Automation",
      "Topic :: Utilities"
    ],
    "description": "# HASS Pyscript kernel shim for Jupyter\n\n[Pyscript](https://github.com/custom-components/pyscript) provides a kernel that interfaces with the Jupyter\nfront-ends (eg, notebook, console and lab). That allows you to develop and test pyscript triggers, functions\nand automation logic interactively. Plus you can interact with much of HASS by looking at state variables\nand calling services as you experiment and develop your own logic and automations.\n\nThis repository provides a shim that sits between HASS pyscript and Jupyter. When Jupyter starts\na kernel, it is configured to run the script `hass_pyscript_kernel.py` in this repository. This\nscript uses the HASS web interface to do a service call to pyscript that starts the kernel. It\nthen helps establish the various socket connections between HASS/pyscript and Jupyter.\n\n## Installation\n\nTo install the pyscript Jupyter kernel:\n```\npip install hass_pyscript_kernel\njupyter pyscript install\n```\nRunning `jupyter pyscript install` is only required on new installs, or if your old\nversion of `hass_pyscript_kernel` is prior to 1.0.0.\n\nOn a new install, you'll need to edit the `pyscript.conf` file. The install command above\nwill print its path. Replace these settings:\n\n- `hass_host` with the host name or IP address where your HASS instance is running\n- `hass_url` with the URL of your HASS httpd service\n- `hass_token` with a long-lived access token created via the button at the bottom of\n   your user profile page in HASS.\n- Since you've added a HASS access token to this file, you should make sure you are\n  comfortable with file permissions - anyone who can read this file could use the\n  access token to use the HASS UI without being an authenticated user.\n- `hass_proxy` with proxy url to use if HASS is not directly reachable.\n  e.g. when using SSH to access your HASS instance, you can open a SOCKS5 tunnel to\n  keep your Jupyter local. \n\nConfirm that Jupyter now recognizes the new pyscript kernel:\n```\njupyter kernelspec list\n```\nand you can confirm the settings you added above with:\n```\njupyter pyscript info\n```\n\n## Running Jupyter\n\nYou can open the browser-based Jupyter clients (eg, notebook and lab) as usual, eg:\n```\njupyter notebook\n```\nand use the Jupyter menus to start a new `hass pyscript` kernel.\n\nFor the Jupyter command-line console, you can run:\n```\njupyter console --kernel=pyscript\n```\n\nIf Jupyter can't connect look at [this wiki page](https://github.com/craigbarratt/hass-pyscript-jupyter/wiki/Connection-problems)\nfor suggestions.\n\n## Tutorial\n\nThere is a Jupyter notebook [tutorial](https://nbviewer.jupyter.org/github/craigbarratt/hass-pyscript-jupyter/blob/master/pyscript_tutorial.ipynb)\nthat covers many pyscript features.  It can be downlaoded and run interactively in Jupyter\nnotebook connected to your live HASS with pyscript.  You can download the `pyscript_tutorial.ipynb`\nnotebook using:\n```\nwget https://github.com/craigbarratt/hass-pyscript-jupyter/raw/master/pyscript_tutorial.ipynb\n```\nand open it with:\n```\njupyter notebook pyscript_tutorial.ipynb\n```\n\nYou can step through each command by hitting `<Shift>Enter`.  There are various ways to navigate\nand run cells in Jupyter that you can read in the Jupyter documentation.\n\n## Work Flow\n\nUsing the tutorial as examples, you can use a Jupyter client to interactively develop and test\nfunctions, triggers and services.\n\nJupyter auto-completion (with `<TAB>`) is supported in Jupyter notebook, console and lab. It should\nwork after you have typed at least the first character. After you hit `<TAB>` you should see a\nlist of potential completions from which you can select. It's a great way to easily see available\nstate variables, functions or services.\n\nIn a Jupyter session, one or more functions can be defined in each code cell. Every time that\ncell is executed (eg, `<Shift>Return`), those functions are redefined, and any existing trigger\ndecorators with the same function name are canceled and replaced by the new definition. You might\nhave other function and trigger definitions in another cell - they won't be affected (assuming\nthose function names are different), and they will only be replaced when you re-execute that\nother cell.\n\nSee [more documentation](https://hacs-pyscript.readthedocs.io/en/stable/reference.html#workflow).\n\n## Global Context\n\nEach Jupyter session has its own separate global context, so functions and variables defined in each\ninteractive session are isolated from the script files and other Jupyter sessions.  Pyscript\nprovides some utility functions to switch global contexts, which allows an interactive Jupyter\nsession to interact directly with functions and global variables created by a script file, or even\nanother Jupyter session.\n\nSee the [documentation on global contexts](https://hacs-pyscript.readthedocs.io/en/stable/reference.html#global-context).\n\n## Caveats\n\nThe pyscript Jupyter kernel is an experimental feature and it will probably evolve with new features\nand capabilities (and no doubt there are bugs that will need to be fixed).  Here are some caveats\nabout using it.\n\nFor Jupyter notebook:\n* Jupyter notebook supports a wide range of extensions, called nbextensions. Some of these might not\nwork correctly with pyscript's kernel. The black and isort nbextensions do work. If you are having\nproblems with notebooks running on the pyscript kernel, try disabling other nbextensions. Please\nreport nbextentions that you think are useful but don't work with pyscript's kernel and we'll\nlook at supporting them.\n\nFor Jupyter console:\n* Jupyter console allows multi-line input (eg, a function definition) and delays excution by the\nkernel until it is syntactically correct (ie, complete) and the indent on the last line is 0.  So if\nyou define a multi-line function or statement with indenting, you will need to hit `Enter` one more\ntime so there is an empty line indicating your code block is complete.\n\n* Jupyter console generally assumes the kernel operates in a half-duplex manner - it sends a snippet\nof code to the kernel to be executed, and the result (if any) and output (if any) are then displayed.\nIn pyscript, a trigger function runs asynchonously, so it can generate output at some future time.\nIn Jupyter notebook and lab, the right thing happens - whenever the output messages are generated, they\nappear below the last cell that was executed. Jupyter notebook displays the running list of log output.\nHowever, in Jupter console, it doesn't check for any output from the kernel until you hit `Enter` to\nexecute the next command. So the display of output in the console is delayed until you hit `Enter`.\nThe HASS log file will show any log output in real time, subject to the logging level threshold.\n\nFor Jupyter lab:\n* In Jupyter lab, each tab starts a new session (which is same behavior with iPython - each tab will\nhave a different iPython instance), so each tab (eg, a notebook in one and a console in another)\nwill have different global contexts. If you wish, you can use the function `pyscript.set_global_ctx()`\nto set the context in the other tabs to be the same as the first.\n\n## Contributing\n\nContributions are welcome! You are encouraged to submit PRs, bug reports, feature requests or\nadd to the Wiki with examples and tutorials. It would be fun to hear about unique and clever\napplications you develop.\n\n## Developing and installing locally\n\nFrom a clone of this repository run:\n```\npython -m pip install -r requirements.txt\npython setup.py bdist_wheel\npip install dist/hass_pyscript_kernel-0.30-py3-none-any.whl\n```\n\n## Useful Links\n\n* [Pyscript Documentation](https://hacs-pyscript.readthedocs.io/en/stable/index.html)\n* [Issues](https://github.com/craigbarratt/hass-pyscript-jupyter/issues)\n* [Wiki](https://github.com/craigbarratt/hass-pyscript-jupyter/wiki)\n* [GitHub repository](https://github.com/craigbarratt/hass-pyscript-jupyter) (please add a star if you like it!)\n* [Jupyter notebook tutorial](https://nbviewer.jupyter.org/github/craigbarratt/hass-pyscript-jupyter/blob/master/pyscript_tutorial.ipynb)\n* [Pyscript](https://github.com/custom-components/pyscript)\n\n## Copyright\n\nCopyright (c) 2020 Craig Barratt.  May be freely used and copied according to the terms of the\n[Apache 2.0 License](LICENSE).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/craigbarratt/hass-pyscript-jupyter/archive/1.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/craigbarratt/hass-pyscript-jupyter",
    "keywords": "hass,home automation,pyscript,jupyter kernel,jupyter,kernel,automation,python,interpreter",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hass-pyscript-kernel",
    "package_url": "https://pypi.org/project/hass-pyscript-kernel/",
    "platform": "any",
    "project_url": "https://pypi.org/project/hass-pyscript-kernel/",
    "project_urls": {
      "Download": "https://github.com/craigbarratt/hass-pyscript-jupyter/archive/1.0.0.tar.gz",
      "Homepage": "https://github.com/craigbarratt/hass-pyscript-jupyter"
    },
    "release_url": "https://pypi.org/project/hass-pyscript-kernel/1.0.0/",
    "requires_dist": [
      "aiohttp",
      "aiohttp-socks",
      "jupyter-client",
      "jupyter-core"
    ],
    "requires_python": ">=3.7",
    "summary": "Home Assistant Pyscript Jupyter kernel shim",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8585579,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "474d5e820faf1425794411bf3cfd8040496b8e2557d74361c45c7954771853e1",
          "md5": "6aa56a487058f011ab420a23734f9c2d",
          "sha256": "a6f11cf4843f43e4875230992169af607e331c21e82aa02d9ee28a0248141108"
        },
        "downloads": -1,
        "filename": "hass_pyscript_kernel-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6aa56a487058f011ab420a23734f9c2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26938,
        "upload_time": "2020-11-05T07:11:45",
        "upload_time_iso_8601": "2020-11-05T07:11:45.608521Z",
        "url": "https://files.pythonhosted.org/packages/47/4d/5e820faf1425794411bf3cfd8040496b8e2557d74361c45c7954771853e1/hass_pyscript_kernel-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "474d5e820faf1425794411bf3cfd8040496b8e2557d74361c45c7954771853e1",
        "md5": "6aa56a487058f011ab420a23734f9c2d",
        "sha256": "a6f11cf4843f43e4875230992169af607e331c21e82aa02d9ee28a0248141108"
      },
      "downloads": -1,
      "filename": "hass_pyscript_kernel-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6aa56a487058f011ab420a23734f9c2d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 26938,
      "upload_time": "2020-11-05T07:11:45",
      "upload_time_iso_8601": "2020-11-05T07:11:45.608521Z",
      "url": "https://files.pythonhosted.org/packages/47/4d/5e820faf1425794411bf3cfd8040496b8e2557d74361c45c7954771853e1/hass_pyscript_kernel-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}