{
  "info": {
    "author": "Amirouche",
    "author_email": "amirouche@hyper.dev",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# lbst - Immutable Log-Balanced Search Tree\n\n**prototype:** With CPython, in so far, it is faster to use LBST with\n1000+ items. wall-clock time benchmarks show that this datastructure\nbecomes interesting with PyPy 3.7 with 100+ items.\n\n![pink sakura tree at daytime](https://images.unsplash.com/photo-1515863149848-223cbed59017?w=1024&q=80)\n\n## Benchmarks\n\nHigher is better, less than one means copying is faster.\n\n### Small number of items = 20\n\n```\ncpython: ▇▇▇▇▇▇▇ 0.039\npypy   : ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 0.262\n```\n\n### Large number of items = 1000\n\n```\ncpython: ▇▇ 0.9489\npypy   : ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 20.15\n```\n\n## Kesako a Log-Balanced Search Tree?\n\n- A search tree is a dictionary that preserves ordering according to\n  an user specified function, also known under the name sorted\n  dictionary.\n  \n- In the original description of the algorithm, LBST used a logarithm\n  function to decide how to balance the tree.\n\n## Kesako an immutable datastructure?\n\nImmutable datastructures, also known under the name *persistent\ndatastructures* are datastructures that will produce new values\ninstead of changing, mutating, the value in-place.\n\nImmutable datastructures are useful in situations where you need to\nkeep around previous versions of the data to have an history to ease\ndebugging or to implement an *undo* feature such as in editors;\nanother way immutable datastructures can be put to good use is to keep\nthe data consistent in a concurrent or parallel programming setting,\nwhile a flow of executition, the writer, produce a new version of the\ndatastructure, the readers still have access the previous version of\nthe truth without requiring readers to wait for the writer to finish\nachieving single-writer / multiple readers without locks.\n\n## When is an immutable datastructure useful?\n\nAnytime you copy a *big* data structure, you may instead use an\nimmutable datastructure.\n\n## What is the difference with `dict` insertion order?\n\nPython builtin `dict` are sorted according to the time of insertion,\nif `\"z\"` is added to a dictionary first, then `\"a\"` is added, then the\ndictionary will have the keys in the following order `[\"z\", ...,\n\"a\"]`. That is not always the best approach performance-wise.\n\nThe following kind of code is a hint that you may use LBST:\n\n```python\nfrob = dict()\nfrob[key1] = value1\nfrob[key2] = value2\nfrob[key3] = value3\n...\n\n# then re-create the dictionary with an order given by `mykeyfunc`:\nfrob = {k: v for k in sorted(frob.keys(), key=mykeyfunc)\n```\n\nThat is somekind of copy, see the previous hint, that re-orders the\ndictionary keys according to `mykeyfunc` in order for instance to\nspeed up linear lookup. Using LBST, you can build a **large**\ndictionary that is sorted at construction time, save a few cycles by\navoding a reconstruction, duplicated effort, copies, and keep the\noverall wall-clock time under control.\n\n## `lbst.make()`\n\nReturn an immutable search tree, ordered according to Python builtin\nrich comparison, that can be overriden in user created types with the\nmethod called\n[`__lt__`](https://docs.python.org/3/reference/datamodel.html#object.__lt__).\n\n## `lbst.set(tree, key, value)`\n\nReturn a tree based on `tree` where `key` is associated with\n`value`.\n\n## `lbst.get(tree, key, default=None)`\n\nReturn the value associated with `key` in `tree`. If `key` is not\npresent in `tree`, returns `default`.\n\n## `lbst.delete(tree, key)`\n\nReturn a tree based on `tree` where `key` is not present.\n\n## `lbst.size(tree)`\n\nReturn the size of `tree`.\n\n## `lbst.start(tree)`\n\nReturn the smallest key present in `tree`.\n\n## `lbst.end(tree)`\n\nReturn the biggest key present in `tree`.\n\n## `lbst.cursor(tree)`\n\nReturn a cursor for `tree`. The initial position is not specified. A\ncursor is stateful: its position is changed / mutated in-place.\n\n## `lbst.cursor_clone(cursor)`\n\nReturn a cursor at the same position as `cursor` that does not share\nstate with `cursor`.\n\n## `lbst.cursor_seek(cursor, key)`\n\nPosition `cursor` near `key`. If `key` is present in the tree\nassociated with `cursor`, then the cursor will be exactly positioned\non `key` and `lbst.cursor_seek` will return `0`. Otherwise, when `key`\nis not present in the tree associated with `cursor`, there is two\ncases: 1) if the cursor is positioned after, then `lbst.cursor_seek`\nreturns `1`, and 2) if the cursor is positioned before, then\n`lbst.cursor_seek` return `-1`.\n\nIn other words, `lbst.cursor_seek`:\n\n- Return `-1`, then `cursor` is before `key`;\n- Return `0`, then `cursor` is **on** `key`;\n- Return `1`, then `cursor` is after `key`.\n\n## `lbst.cursor_key(cursor)`\n\nReturn the key associated with `cursor`.\n\n## `lbst.cursor_value(cursor)`\n\nReturn the value associated with `cursor`.\n\n## `lbst.cursor_next(cursor)`\n\nMove `cursor` to the next position, that is a bigger key that is just\nafter the current key. Returns `False` if `cursor` reached the end of\nthe key space *i.e.* there is no next key. Otherwise, it returns\n`True`.\n\n## `lbst.cursor_previous(cursor)`\n\nMove `cursor` to the previous position, that is a smaller key that is\njust before the current key. Returns `False` if `cursor` reached the start of\nthe key space *i.e.* there is no previous key. Otherwise, it returns\n`True`.\n\n## `lbst.to_dict(tree)`\n\nReturn a `dict` representation of `tree`. The returned `dict` has the\nkeys in the same order as `tree`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/amirouche/lbst",
    "keywords": "",
    "license": "CC0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lbst",
    "package_url": "https://pypi.org/project/lbst/",
    "platform": "",
    "project_url": "https://pypi.org/project/lbst/",
    "project_urls": {
      "Homepage": "https://github.com/amirouche/lbst"
    },
    "release_url": "https://pypi.org/project/lbst/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Immutable Log-Balanced Search Tree",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12932852,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa420b41ef3362bcdc624ce244033609e43cf8cf672f0c4fe37817a41884be73",
          "md5": "a39973b693d33d5e84fe03a4d8d414ac",
          "sha256": "209019bfaebaf65f83b6a2b0d629012063e022bcb9273c0c1502949da9d7e329"
        },
        "downloads": -1,
        "filename": "lbst-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a39973b693d33d5e84fe03a4d8d414ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 5697,
        "upload_time": "2022-02-15T09:49:22",
        "upload_time_iso_8601": "2022-02-15T09:49:22.345522Z",
        "url": "https://files.pythonhosted.org/packages/aa/42/0b41ef3362bcdc624ce244033609e43cf8cf672f0c4fe37817a41884be73/lbst-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f311929b7fcb0d00728affaf2f9db6fb344338d7d502f0d677c39b19406deb6d",
          "md5": "4d22c3336346f18585d4b20223b01799",
          "sha256": "4b574668327af1bac655ac97eb5cc300b18f5cb7c39ddd6cb08d11909579f2b6"
        },
        "downloads": -1,
        "filename": "lbst-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d22c3336346f18585d4b20223b01799",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5447,
        "upload_time": "2022-02-15T09:49:23",
        "upload_time_iso_8601": "2022-02-15T09:49:23.980885Z",
        "url": "https://files.pythonhosted.org/packages/f3/11/929b7fcb0d00728affaf2f9db6fb344338d7d502f0d677c39b19406deb6d/lbst-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fc938634b019e2396d037cb77046e149f00615a9ba3e1c9e74f9c94a124bc4b",
          "md5": "0aaa600efd4a21d73a94af8ee9747e31",
          "sha256": "7eaf4098eb1106d3977e69af2064d2dcd2a4dd8ba0cb541d581af12229d8dfd4"
        },
        "downloads": -1,
        "filename": "lbst-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0aaa600efd4a21d73a94af8ee9747e31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 5817,
        "upload_time": "2022-02-15T10:00:03",
        "upload_time_iso_8601": "2022-02-15T10:00:03.408872Z",
        "url": "https://files.pythonhosted.org/packages/9f/c9/38634b019e2396d037cb77046e149f00615a9ba3e1c9e74f9c94a124bc4b/lbst-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9f58527a1cfb4fa996e1bbda53863b4a63d5782e0ce2c702f28c1998eb24fd7",
          "md5": "d17ca7f88ab3e9c30dce5d8db86cbd06",
          "sha256": "6502f0e73daec59f869308b751c513dcf8f45e2f466134cecf44fb0905083a15"
        },
        "downloads": -1,
        "filename": "lbst-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d17ca7f88ab3e9c30dce5d8db86cbd06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5635,
        "upload_time": "2022-02-15T10:00:05",
        "upload_time_iso_8601": "2022-02-15T10:00:05.080644Z",
        "url": "https://files.pythonhosted.org/packages/a9/f5/8527a1cfb4fa996e1bbda53863b4a63d5782e0ce2c702f28c1998eb24fd7/lbst-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "644470bc672edffb56b1b10b346391a921688fb38d05df72d86b0cd2548bd524",
          "md5": "a8438f0fec9779623d44638bdf476ca5",
          "sha256": "5829108a0752a0fa86fcdc3cc71e7900259a3d1b899a6ef5c498a663db37ade7"
        },
        "downloads": -1,
        "filename": "lbst-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8438f0fec9779623d44638bdf476ca5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 8068,
        "upload_time": "2022-02-16T10:51:18",
        "upload_time_iso_8601": "2022-02-16T10:51:18.786381Z",
        "url": "https://files.pythonhosted.org/packages/64/44/70bc672edffb56b1b10b346391a921688fb38d05df72d86b0cd2548bd524/lbst-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05b6803f231f46f97a8b77a94a1a20a98c35e5ad05a320aabb7ee66f62edcf61",
          "md5": "63209e31a236ac21356a7152a60f3c43",
          "sha256": "f45c22e7e8e6bccecd1621f99e14b6fad01181626f09803b3a8f3602ceb3f677"
        },
        "downloads": -1,
        "filename": "lbst-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "63209e31a236ac21356a7152a60f3c43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8409,
        "upload_time": "2022-02-16T10:51:20",
        "upload_time_iso_8601": "2022-02-16T10:51:20.390878Z",
        "url": "https://files.pythonhosted.org/packages/05/b6/803f231f46f97a8b77a94a1a20a98c35e5ad05a320aabb7ee66f62edcf61/lbst-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bb5cbf7c5b57b3c03f69f92e05a07a717c1c58056da2c9975f4a237d2f8aab8",
          "md5": "54deb47ab76c28ad6b66a07ae3b3dc45",
          "sha256": "d1c62f43012d6e32a8681f057c6ec394db23b9bcd0643cf6e0cca66c97f4c099"
        },
        "downloads": -1,
        "filename": "lbst-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54deb47ab76c28ad6b66a07ae3b3dc45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 8394,
        "upload_time": "2022-02-18T09:54:06",
        "upload_time_iso_8601": "2022-02-18T09:54:06.160362Z",
        "url": "https://files.pythonhosted.org/packages/0b/b5/cbf7c5b57b3c03f69f92e05a07a717c1c58056da2c9975f4a237d2f8aab8/lbst-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ffb6433090f97f1583f493ac0df14050cef735dc6c51137c16758f87bc457d6",
          "md5": "16782cc2a2e16da2eb510ce05a09756b",
          "sha256": "252b2a99086b0b883a653fedb689221e5b1725c94ce54cd8fdd36825862d7d8c"
        },
        "downloads": -1,
        "filename": "lbst-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "16782cc2a2e16da2eb510ce05a09756b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8719,
        "upload_time": "2022-02-18T09:54:08",
        "upload_time_iso_8601": "2022-02-18T09:54:08.545745Z",
        "url": "https://files.pythonhosted.org/packages/5f/fb/6433090f97f1583f493ac0df14050cef735dc6c51137c16758f87bc457d6/lbst-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0bb5cbf7c5b57b3c03f69f92e05a07a717c1c58056da2c9975f4a237d2f8aab8",
        "md5": "54deb47ab76c28ad6b66a07ae3b3dc45",
        "sha256": "d1c62f43012d6e32a8681f057c6ec394db23b9bcd0643cf6e0cca66c97f4c099"
      },
      "downloads": -1,
      "filename": "lbst-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "54deb47ab76c28ad6b66a07ae3b3dc45",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 8394,
      "upload_time": "2022-02-18T09:54:06",
      "upload_time_iso_8601": "2022-02-18T09:54:06.160362Z",
      "url": "https://files.pythonhosted.org/packages/0b/b5/cbf7c5b57b3c03f69f92e05a07a717c1c58056da2c9975f4a237d2f8aab8/lbst-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ffb6433090f97f1583f493ac0df14050cef735dc6c51137c16758f87bc457d6",
        "md5": "16782cc2a2e16da2eb510ce05a09756b",
        "sha256": "252b2a99086b0b883a653fedb689221e5b1725c94ce54cd8fdd36825862d7d8c"
      },
      "downloads": -1,
      "filename": "lbst-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "16782cc2a2e16da2eb510ce05a09756b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 8719,
      "upload_time": "2022-02-18T09:54:08",
      "upload_time_iso_8601": "2022-02-18T09:54:08.545745Z",
      "url": "https://files.pythonhosted.org/packages/5f/fb/6433090f97f1583f493ac0df14050cef735dc6c51137c16758f87bc457d6/lbst-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}