{
  "info": {
    "author": "Christopher M. Pierce",
    "author_email": "contact@chris-pierce.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# BeLinear\nPerformant numerical solutions of the paraxial ray equation.\n\n[![Build Status](https://travis-ci.com/electronsandstuff/BeLinear.svg?branch=master)](https://travis-ci.com/electronsandstuff/BeLinear)\n\n## Installation and Testing\n\nPlease install the package using pip.\n\n```\npip install <unzipped belinear directory>\n```\n\nOnce setup the package can be tested using python's unittest framework.\n\n```\n(mainenv) [cmpierce@turing ~]$ python -m unittest belinear.tests\n........\n----------------------------------------------------------------------\nRan 8 tests in 0.136s\n\nOK\n```\n\nYou should see an indication that all tests pass successfully.\n\n## Quick-start Guide\n\nTo calculate linear transfer matrices, you're going to need fieldmaps for all of the elements in your system.  We're going to pick up the script after you have already calculated the fields (Ez and Bz) along the axis of the beamline.  The fields and positions must be in SI units: MV/m, Tesla, and meters.  I'll be using the following fields as an examples.\n\n![Fields](https://raw.githubusercontent.com/electronsandstuff/BeLinear/master/assets/fields.png)\n\nOnce we have the fields, we can make the call to the solver and get the transfer matrix.  The transfer matrix will be returned in [x, px] phase space as opposed to [x, x'] trace space which is common in accelerator physics.  This is done because the angle x' becomes ill-determined when particles have zero longitudinal momentum as is the case at the start of integration in guns.\n\nThe solver accepts a step size `h` in meters which will determine the accuracy of the resulting matrices.  See the section on convergence properties for a detailed discussion of how to choose this.  In my experience, setting `h = ~1e-6` is suitable for most accelerator physics applications.\n\nThe following example will setup some test fields and then solve for the resulting transfer matrix.\n\n```python\n# Load belinear and numpy\nimport belinear\nimport numpy as np\n\n# Compute the fields on axis (replace with your code)\nz   = np.linspace(0, 0.5, 1000)\nEz = (z_raw<0.005)*10e3/5e-3\nBz = np.bitwise_and(z_raw > 0.1, z_raw < 0.2) * 6e-3\n\n# Set the solver step size\nh = 5e-6\n\n# Solver for the transfer matrix\nM = belinear.get_M(z, Ez, Bz, h)\n```\n\nNote: this will start the particles with no longitudinal velocity and so we require that Ez(z=0) != 0.  To start with non-zero longitudinal energy, set the appropriate option.\n\n```python\n# Calculate the transport matrix\nM = belinear.get_M(z, Ez, Bz, h, gamma_initial=2)\n```\n\nBeLinear also supports multiple ODE solvers.  We have been using the default option which is the midpoint method.  This is expected to be the best option for most cases, however you may change which solver is used with the optional argument `method`.\n\n```python\n# Calculate the linear transport matrix\nM = belinear.get_M(z, Ez, Bz, h, method='<method name>')\n```\n\nThe solvers supported by BeLinear are:\n\n* \"midpoint\" - The [midpoint rule or modified Euler's method](https://en.wikipedia.org/wiki/Midpoint_method) is a symplectic integrator with second order global convergence.  It shows excellent accuracy for Hamiltonian systems with a low number of steps and preserves the symplectic form.  This is the default option in BeLinear and shows the best convergence for regularly used field configurations.\n* \"implicit_euler\" - This method is the well known [implicit Euler's method](https://en.wikipedia.org/wiki/Backward_Euler_method).  It's has first order global convergence and better stability than forwards Euler for some systems.\n* \"constant_field\" - Adapted from the paper \"Gulliford, C., & Bazarov, I. (2012).  PRAB, 15(2), 024002\".  It iterates the solution to [x1'(z), x2'(z)] = [[A, B], [C, D]]*[x1(z), x2(z)] for values of A, B, C, and D computed from the fields.  That is, it assumes constant coefficients in the ODE, but not necessarily constant fields since the coefficients also depend on gamma which changes in the presence of constant E fields.\n\nBeLinear also support cumulative output of the transfer matrices as one big numpy array of shape (2,2,N).  This function has all the same options as the normal solver call.  The following example will generate the cumulative matrices and plot all of them.\n\n```python\n# Load belinear and numpy\nimport belinear\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Compute the fields on axis (replace with your code)\nz   = np.linspace(0, 0.5, 1000)\nEz = (z_raw<0.005)*10e3/5e-3\nBz = np.bitwise_and(z_raw > 0.1, z_raw < 0.2) * 6e-3\n\n# Set the solver step size\nh = 5e-6\n\n# Solver for the transfer matrices\nM = belinear.get_cum_M(z, Ez, Bz, 5e-6)\n\n# Get the positions matrices are output at\nzM = np.arange(min(z), max(z), h)\n\n# Plot the resulting dynamics\nplt.plot(zM*1e2, M[0,0,:], c=\"C0\")\nplt.xlabel(\"s (cm)\")\nplt.ylabel(\"$M_{11}$\", c=\"C0\")\nplt.twinx()\nplt.plot(zM*1e2, M[1,1,:], c=\"C1\")\nplt.ylabel(\"$M_{22}$\", c=\"C1\")\n```\n\nPlotting the matrix elements against position gives the following plot.\n\n![Matrix elements](https://raw.githubusercontent.com/electronsandstuff/BeLinear/master/assets/matrix_elements.png)\n\nThis is also useful for calculating beam size along the system as in the following example.\n\n```python\n# Load belinear and numpy\nimport belinear\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Compute the fields on axis (replace with your code)\nz   = np.linspace(0, 0.5, 1000)\nEz = (z_raw<0.005)*10e3/5e-3\nBz = np.bitwise_and(z_raw > 0.1, z_raw < 0.2) * 6e-3\n\n# Set the solver step size\nh = 5e-6\n\n# Solver for the transfer matrices\nM = belinear.get_cum_M(z, Ez, Bz, 5e-6)\n\n# Get the positions matrices are output at\nzM = np.arange(min(z), max(z), h)\n\n# Set initial beam parameters (25 um RMS spot size, 25 meV MTE)\n# and solve for them along beamline\nx  = np.array([25e-6, np.sqrt(25e-3/511e3)])\nxM = np.sqrt((x**2 @ (M**2).T).T)\n\n# Plot beam size\nplt.plot(zM*1e2, xM[0,:]*1e6)\nplt.xlabel(\"s (cm)\")\nplt.ylabel(\"$\\sigma_x$ (um)\")\n```\n\nThis should output the following plot of beam size.\n\n![Spot size](https://raw.githubusercontent.com/electronsandstuff/BeLinear/master/assets/beam_size.png)\n\n## Convergence Properties\n\nTo test the convergence properties run the solver with a smaller step size than you would reasonably use (h = 1e-8 m for instance) and use the output as a \"ground truth\" results of what the matrix should be.  Run the solver again for you system while changing the step size and monitor the error.  If your step size was small enough in the previous step then you see asymptotically power law convergence of the global error.  As an example, I have computed the maximum global error vs step size for the field map at the top of the file and for the three solvers included in BeLinear.\n\n```python\n# Load belinear and numpy\nimport belinear\nimport numpy as np\n\n# Compute the fields on axis (replace with your code)\nz   = np.linspace(0, 0.5, 1000)\nEz = (z_raw<0.005)*10e3/5e-3\nBz = np.bitwise_and(z_raw > 0.1, z_raw < 0.2) * 6e-3\n\n# Set the solver step size for our reference matrix\nh_ref = 1e-8\n\n# Solver for the transfer matrices\nM_ref = belinear.get_M(z, Ez, Bz, h_ref)\n\n# Get matrices for a wide variety of step size\nhs = np.exp(np.linspace(np.log(1e-7), np.log(1e-4), 25))\nM_midpoint = np.array([belinear.get_M(z, Ez, Bz, h, method=\"midpoint\") for h in hs])\nM_implicit_euler = np.array([belinear.get_M(z, Ez, Bz, h, method=\"implicit_euler\") for h in hs])\nM_constant_field = np.array([belinear.get_M(z, Ez, Bz, h, method=\"constant_field\") for h in hs])\n\n# Compute the max relative error\nerr_midpoint = np.abs((M_midpoint-M_ref)/M_ref).max(axis=1).max(axis=1)\nerr_implicit_euler = np.abs((M_implicit_euler-M_ref)/M_ref).max(axis=1).max(axis=1)\nerr_constant_field = np.abs((M_constant_field-M_ref)/M_ref).max(axis=1).max(axis=1)\n\n# Plot the relative error\nplt.loglog(hs, err_midpoint, ls=\"none\", marker=\"x\", label=\"Midpoint\")\nplt.loglog(hs, err_implicit_euler, ls=\"none\", marker=\"x\", label=\"Euler\")\nplt.loglog(hs, err_constant_field, ls=\"none\", marker=\"x\", label=\"Constant\")\nplt.xlabel(\"h (m)\")\nplt.ylabel(\"Max. Relative Error\")\nplt.legend()\n```\n\nThis example will produce the following output.\n\n![Midpoint convergence](https://raw.githubusercontent.com/electronsandstuff/BeLinear/master/assets/convergence.png)\n\nFrom this, the higher order convergence of the midpoint method is clear.  The step size can now be selected based off of the trade-off between speed and accuracy.  For many applications, a step size of between 1 um and 10 um will be adequate and provide excellent performance.\n\n## Reference\n\n##### get_M(z, Ez, Bz, h, gamma_initial=1, method='midpoint')\n\nPrimary interface to the solver.  Please call this from user code as opposed to the low level functions to calculate the linear transport matrices from the fields Ez and Bz sampled at points z.  Convergence is controlled by the step size h.\n\n###### Parameters\n\n* z: array_like\n      Positions of the field samples in meters.\n* Ez: array_like\n      The z component of the on-axis electric field in MV/m.  An (n,) shape array.\n* Bz: array_like\n      The z component of the on-axis magnetic field in Tesla.  An (n,) shape array.\n* h: float\n      Solver step size in meters.\n* gamma_initial: float\n      The relativistic gamma factor of the beam at the start of the region of integration\n* method: str\n      Which ODE solver to use.  Options are \"midpoint\", \"implicit_euler\", or \"constant_field\"\n\n###### Returns\n\n* M: array_like\n      The linear transport matrix in [x, px] phase space.  A (2,2) numpy array.\n\n##### get_cum_M(z, Ez, Bz, h, gamma_initial=1, method='midpoint')\n\nThe same solver function as \"get_M\" except that it will output the transfer matrices at every step taken by the solver.  Useful for plotting particle trajectories.\n\n###### Parameters\n\n* z: array_like\n      Positions of the field samples in meters.\n* Ez: array_like\n      The z component of the on-axis electric field in MV/m.  An (n,) shape array.\n* Bz: array_like\n      The z component of the on-axis magnetic field in Tesla.  An (n,) shape array.\n* h: float\n      Solver step size in meters.\n* gamma_initial: float\n      The relativistic gamma factor of the beam at the start of the region of integration\n* method: str\n      Which ODE solver to use.  Options are \"midpoint\", \"implicit_euler\", or \"constant_field\"\n\n###### Returns\n\n* M_cum: array_like\n      The transfer matrices in phase space ([x, px]) output at every step from the solver.  A (2,2,n)\n      numpy array.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "GNU Lesser General Public License v3 (LGPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "belinear",
    "package_url": "https://pypi.org/project/belinear/",
    "platform": "",
    "project_url": "https://pypi.org/project/belinear/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/belinear/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Performant numerical solutions of the paraxial ray equation",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7263235,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f2bf6558fde56b6b8e79da466d056e9f98e7891023d4d4005f143afe8e42d57",
          "md5": "c2d4c418abc1c41ac2e0b67859baaf9d",
          "sha256": "776b0092805cad743bcd065c17d0bb443e96655c3d7ae42c3b1cac4888459949"
        },
        "downloads": -1,
        "filename": "belinear-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2d4c418abc1c41ac2e0b67859baaf9d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 2928870,
        "upload_time": "2020-05-12T01:33:44",
        "upload_time_iso_8601": "2020-05-12T01:33:44.223040Z",
        "url": "https://files.pythonhosted.org/packages/8f/2b/f6558fde56b6b8e79da466d056e9f98e7891023d4d4005f143afe8e42d57/belinear-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a9ee5aa07fa25d156a1d71fe48364c2dc4b9e752610d6e3c08455ad3fbce1f6",
          "md5": "f80ca93a41343edfea1cdf687ef79332",
          "sha256": "7e41e070297884844bb2751c8d2b386a15ca16271f5526cd8e85150e8eacc6de"
        },
        "downloads": -1,
        "filename": "belinear-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f80ca93a41343edfea1cdf687ef79332",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7946,
        "upload_time": "2020-05-11T23:00:56",
        "upload_time_iso_8601": "2020-05-11T23:00:56.539062Z",
        "url": "https://files.pythonhosted.org/packages/0a/9e/e5aa07fa25d156a1d71fe48364c2dc4b9e752610d6e3c08455ad3fbce1f6/belinear-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61f539fa13a414a01f418ff878584714ae041ff496d3e70cbc89065cf17238d2",
          "md5": "032ed5700b2948445cf624471f515a0f",
          "sha256": "f12f54660eb8a4f5537c8de8b838ef5d1644aaf36f848a470dd869cf5b04c25d"
        },
        "downloads": -1,
        "filename": "belinear-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "032ed5700b2948445cf624471f515a0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 2928953,
        "upload_time": "2020-05-17T19:28:30",
        "upload_time_iso_8601": "2020-05-17T19:28:30.778187Z",
        "url": "https://files.pythonhosted.org/packages/61/f5/39fa13a414a01f418ff878584714ae041ff496d3e70cbc89065cf17238d2/belinear-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed88fd74da430b0ecf63cfc810d54b192756a72eea1c1cea2b730975ccab2d75",
          "md5": "23f6cf395a9c0a3482766d8cb2ae48e3",
          "sha256": "58c6d0b9c114f8d0f8427df2a2cbeb1e08e3c633cb5608a56b7488f5d2ec4aca"
        },
        "downloads": -1,
        "filename": "belinear-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "23f6cf395a9c0a3482766d8cb2ae48e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8401,
        "upload_time": "2020-05-17T19:25:33",
        "upload_time_iso_8601": "2020-05-17T19:25:33.105914Z",
        "url": "https://files.pythonhosted.org/packages/ed/88/fd74da430b0ecf63cfc810d54b192756a72eea1c1cea2b730975ccab2d75/belinear-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61f539fa13a414a01f418ff878584714ae041ff496d3e70cbc89065cf17238d2",
        "md5": "032ed5700b2948445cf624471f515a0f",
        "sha256": "f12f54660eb8a4f5537c8de8b838ef5d1644aaf36f848a470dd869cf5b04c25d"
      },
      "downloads": -1,
      "filename": "belinear-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "032ed5700b2948445cf624471f515a0f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 2928953,
      "upload_time": "2020-05-17T19:28:30",
      "upload_time_iso_8601": "2020-05-17T19:28:30.778187Z",
      "url": "https://files.pythonhosted.org/packages/61/f5/39fa13a414a01f418ff878584714ae041ff496d3e70cbc89065cf17238d2/belinear-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed88fd74da430b0ecf63cfc810d54b192756a72eea1c1cea2b730975ccab2d75",
        "md5": "23f6cf395a9c0a3482766d8cb2ae48e3",
        "sha256": "58c6d0b9c114f8d0f8427df2a2cbeb1e08e3c633cb5608a56b7488f5d2ec4aca"
      },
      "downloads": -1,
      "filename": "belinear-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "23f6cf395a9c0a3482766d8cb2ae48e3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 8401,
      "upload_time": "2020-05-17T19:25:33",
      "upload_time_iso_8601": "2020-05-17T19:25:33.105914Z",
      "url": "https://files.pythonhosted.org/packages/ed/88/fd74da430b0ecf63cfc810d54b192756a72eea1c1cea2b730975ccab2d75/belinear-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}