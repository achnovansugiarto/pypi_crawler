{
  "info": {
    "author": "Matej Petkovic, Martin Breskvar",
    "author_email": "matej.petkovic@ijs.si",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## What is PyClus\n\nPyClus is a Python wrapper around [CLUS](http://source.ijs.si/ktclus/clus-public/-/tree/master).\nFor all the information about CLUS itself (what are the parameters, settings files, etc.) please, \nfollow the link above and consult the manual.\n\nThe rest of this readme describes PyCLUS and assumes you are (somewhat) familiar with CLUS.\n\n## Is PyClus for me? \n\nPyClus is for you if you like scikit, but - at the same time - you are tired of\n\n- manipulating nominal attributes in scikit,\n- manipulating missing values in scikit,\n- manually computing label weights for hierarchical multi-label classification.\n\nPyClus is for you if you would like to use scikit, but you have to use CLUS.\n\nPyClus is NOT\n- for you if you want to use Python but still want to get the output file and everything after one line,\nas is achieved by `> java clus.jar file.s`.\n- your solution for the issues you are facing when running CLUS\n(weird errors, empty output files, etc.).\n\n# Dependencies\n\nWe need \n\n- java, \n- `numpy` and `scikit learn`.\n\n# How to install it?\n\nSimply call \n\n`pip install pyclus`\n\n# Usage\n\nArguably, PyClus is somewhat simpler to use than CLUS itself:\n\n```\n# define xs_train, y_train, xs_test, y_test ...\nmodel = ClassificationTree(verbose=0, is_multi_target=False, min_leaf_size=12)\nmodel.fit(xs_train, y_train)\ny_hat_train_all = model.predict(xs_test)\n```\n\nWe can see that PyClus decouples CLUS's rigid pipeline of \n\n- loading the data,\n- learning the models,\n- evaluating the models,\n- outputting everything\n\nexecuting only one command.\n\n\n## Loading the data\n\nThe allowed data formats for *features* are:\n\n- `np.ndarray` (2D)\n- `List[List[Any]]`\n- `Tuple[List[int], List[int], List[Any]]` (list of row indices, list of column indices and list of values)\n\nThe first two are for dense data, the third one is for sparse data.\n\nMissing values should be denoted by the string `'?'`.\n\nThe allowed data formats for *targets* are:\n- `np.ndarray` (1D and 2D),\n- `List[List[Any]]` (multiple targets or single target as 1D multiple target),\n- `List[Any]` (single target).\n\nFor targets, the sparse format is not allowed.\n\n## Model initialization\n\nPyClus defines a few classes of models that can be used for\n\n- classification\n- regression\n- multi-label classification (MLC), and\n- hierarchical multi-label classification (HMLC)\n\ntasks.\n\nFor each of this problems, two classes are defined:\n\n- `<task>Tree` (e.g., `RegressionTree`, `HMLCTree`)\n- `<task>Ensemble` (e.g., `ClassificationEnsemble`, `MLCEnsemble`)\n\nWe initialize the objects in a scikit-fashion, however, there are some differences due to CLUS's peculiarities\nand immense number of options/parameters.\n\n### Settings file parameters\n\nThe most common arguments among those that are in CLUS passed to `.s` file\n(e.g., `n_trees`, `min_leaf_size`, `ensemble_method`, etc.) are listed explicitly and\ncan be seen in the signature of the class constructor.\n\nAll of them have default values.\n\nThose that are used less frequently, (e.g., `SplitPosition` in Section  `Tree` of the settings file),\ncan be passed to constructors as part of `**kwargs` as  `<Section>_<Parameter>=value`, for example\n\n`model = ClassificationTree(..., Tree_SplitPosition='Middle')` \n\nIf possible, do not use `Output` section (that might mess up fit and/or predict).\n\n**IMPORTANT NOTES**:\n- CLUS allows you to learn a single tree and still specify any number of trees in Section Ensemble \n of the settings. PyClus is not that liberal.\n- If you pass both `n_tree=100` and `Ensemble_Iterations=10`, the kwarg value wins, i.e., we will learn 10 trees.\nThe same goes for other explicitly named parameters.\n- If your clustering attributes are not the same as your target attributes, note that the temporary arff lists\nthe attributes in the following order: `x1, x2, xN, y1, ..., yN`.\n\n### CLUS command line switches\n\nIf you are not using simply `clus.jar file.s` but rather \n\n`clus.jar -forest -ssl file.s`,\n\nadd a kwarg for each switch to the constructor as `<switch>=value`, where\n`value` is the list of arguments for the switch. If the switch takes no arguments\n (as, for example `ssl`), use `[]` (empty list).\n \nA pyclus analogue of the java call above would be (for MLC data)\n\n`model = MLCEnsemble(..., forest=[], ssl=[])`. \n\n\n**IMPORTANT NOTES**:\n\nIn contrast to CLUS, you do not have to use `forest` explicitly:\n\n- if you are using, e.g., `MLCEnsemble`, `forest` is added automatically.\nThe calls below are equivalent:\n    - `MLCEnsemble(..., forest=[], ssl=[])`,\n    - `MLCEnsemble(..., ssl=[])`.\n- if you are using, e.g., `MLCTree`, you will face an exception if you use `forest`.\n\n\n### Java parameters\n\nJVM parameters are passed to the constructor via the argument `java_parameters`, e.g.,\n\n`java_parameters='-Xmx12G -Xms4G'`\n\nThe value of the argument is passed to the call `java <java params> clus.jar <clus params>` verbatim.\n\n## Fit & Predict\n\n### Fitting\nWhen fitting, a temporary folder with\n\n- training arff (where `xs_train` and `y_train` are dumped to)\n- settings file (with the specified parameters)\n\nis created.\n\nPrior to fitting (calling `java <params1> clus.jar <params2>` internally),\nthe settings file is updated, so that CLUS outputs model files.\n\nAfter the fitting, model files are loaded to your `model` object for later use.\nThen, temporary folder is deleted.\n\n### Predicting\n\nWhen predicting, a temporary folder with\n\n- testing arff (where `xs_test` and dummy target values are dumped to),\n- settings file (with the specified parameters),\n- model file(s)\n\nis created. After predicting (again calling `java <params1> clus.jar <params2>` internally)\nthe prediction file is read. After that, the folder is deleted.\n\nThe predictions are of type `Dict[str, List[List[Any]]`. The keys are model names\n(e.g., `Original` or `Forest with 4 trees`), wheres the values are lists of predictions for every\nexample in the test set.\n\nExamples:\n\n- regression (1 target): `{'Original': [[1.1], [2.1], ...], ...}`\n- regression (2 targets): `{'Original': [[1.1, 1.2], [2.1, 2.2], ...], ...}`\n- classification (1 target): `{'Original': [[('a', 0.87)], [('b', 0.51)], ...], ...}`\n    - in addition to the predicted class value, the confidence is also given (e.g., model `Original` predicts\n     `b` for the value of the first (and only target) for second example with confidence `0.51`).\n     Confidence is not strictly defined in CLUS (might be probability, might be some other measure of support of the\n     decision).\n- classification (2 targets): `{'Original': [[('a', 0.87), ('x', 0.90)], [('b', 0.51), ('y', 0.61)], ...], ...}`\n- MLC: same as classification, but the class values of every target are limited to '0' and '1'\n- HMLC: `{'Original': [[('lab1', 0.87), ('lab2', 0.01), ...], [('lab1', 0.12), ('lab2', 0.61), ...], ...], ...}`\n    - In contrast to MLC where the confidence always corresponds to the class value next to it,\n    HMLC gives a confidence for example having a given label (thus, it is not weird if the confidence is less than `1/2`).\n\n### Evaluation\n\nPyClus does not provide the error measures. Use scikit instead, it has some great methods in `sklearn.metrics`.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyclus",
    "package_url": "https://pypi.org/project/pyclus/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyclus/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyclus/1.0.1/",
    "requires_dist": [
      "scikit-learn (>=0.23.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Wrapper around Clus.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13248733,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52bc4a881fb307b8b9a24762714c897543fc5a54c7cbfbb25995b514843fe5a9",
          "md5": "89ef16515325859585e39d01de8d34b3",
          "sha256": "a40870cc3d2ccb2792a79d0ad647cd711a06d26575d9cc00b5f50f1e93c4c476"
        },
        "downloads": -1,
        "filename": "pyclus-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89ef16515325859585e39d01de8d34b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14206194,
        "upload_time": "2022-03-22T10:52:33",
        "upload_time_iso_8601": "2022-03-22T10:52:33.898946Z",
        "url": "https://files.pythonhosted.org/packages/52/bc/4a881fb307b8b9a24762714c897543fc5a54c7cbfbb25995b514843fe5a9/pyclus-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94d68e47dc75318625d3eec3c955e8b9abbe60e0b1613a21a5a51e25e5135f7d",
          "md5": "dac09b5b0a7e1918dae758f83591e6c5",
          "sha256": "0716768c43a256a8beb9ef31f32a7a3480a6ba1be44682bd4169d28b1294080d"
        },
        "downloads": -1,
        "filename": "pyclus-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dac09b5b0a7e1918dae758f83591e6c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14201378,
        "upload_time": "2022-03-22T10:52:37",
        "upload_time_iso_8601": "2022-03-22T10:52:37.287706Z",
        "url": "https://files.pythonhosted.org/packages/94/d6/8e47dc75318625d3eec3c955e8b9abbe60e0b1613a21a5a51e25e5135f7d/pyclus-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52bc4a881fb307b8b9a24762714c897543fc5a54c7cbfbb25995b514843fe5a9",
        "md5": "89ef16515325859585e39d01de8d34b3",
        "sha256": "a40870cc3d2ccb2792a79d0ad647cd711a06d26575d9cc00b5f50f1e93c4c476"
      },
      "downloads": -1,
      "filename": "pyclus-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89ef16515325859585e39d01de8d34b3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14206194,
      "upload_time": "2022-03-22T10:52:33",
      "upload_time_iso_8601": "2022-03-22T10:52:33.898946Z",
      "url": "https://files.pythonhosted.org/packages/52/bc/4a881fb307b8b9a24762714c897543fc5a54c7cbfbb25995b514843fe5a9/pyclus-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94d68e47dc75318625d3eec3c955e8b9abbe60e0b1613a21a5a51e25e5135f7d",
        "md5": "dac09b5b0a7e1918dae758f83591e6c5",
        "sha256": "0716768c43a256a8beb9ef31f32a7a3480a6ba1be44682bd4169d28b1294080d"
      },
      "downloads": -1,
      "filename": "pyclus-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dac09b5b0a7e1918dae758f83591e6c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14201378,
      "upload_time": "2022-03-22T10:52:37",
      "upload_time_iso_8601": "2022-03-22T10:52:37.287706Z",
      "url": "https://files.pythonhosted.org/packages/94/d6/8e47dc75318625d3eec3c955e8b9abbe60e0b1613a21a5a51e25e5135f7d/pyclus-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}