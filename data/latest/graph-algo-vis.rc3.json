{
  "info": {
    "author": "Akrash Sharma",
    "author_email": "akarshsharma654@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Visualisation of Graph Algorithms\n\n### Description ###\n\nThe package aims to create visual outputs for popular graph algorithms.   \nCurrently: BFS, DFS, Topological Sort, Prim's MST and Kruskal's MST      \nI plan to implement more algorithms: A* Search etc   \n\nIt is not just limited to getting a visual output, but the algorithms will be optimised by using heuristics for non-polynomial time algorithms. This project aims to create a better understanding of the working of graph algorithms, improve the computation time and optimising the algorithms. It could be used by analysts as well as students and teachers, as a teaching aid.\n\nTo run the package: pip install graph-algo-vis\n\n### Sample Code to run the package ###\n\n### BFS and DFS ###\nImport:   \nfrom graph_algo_vis import dfs_traversal, bfs_traversal    \n\nInstantiation:   \nd = dfs_traversal.DFS()     \nb = bfs_traversal.BFS()       \n\nVisualize the input graph:   \nd.draw_graph(\"input.txt\")  \n\nVisualize the result of DFS:   \nd.depth_first_search(\"input.txt\")     \n\n### Topological Sort ###  \nImport:   \nfrom graph_algo_vis import topological_sort   \n\nInstantiation:   \ng = topological_sort.Top_Sort()   \n\nVisualize the input graph and result:   \ng.topological_sort(\"input.txt\")      \n\n### Prim's and Kruskal's MST ###  \nImport:   \nfrom graph_algo_vis import primsMST, kruskalsMST     \n\nInstantiation:   \np = primsMST.Prims()     \nk = kruskalsMST.Krusals()\n\nVisualize the input graph and result:   \np.prims(\"input.txt\")         \nk.kruskals(\"input.txt\")     \n\n### Pre requisites ###\n\nTo run this package run you must have matplotlib and networkx libraries installed.\n\n### INPUT ###\n\nInput is taken from the file \n#### input.txt ####\n\nSample input for BFS, DFS, Prim's MST and Kruskal's MST    \n```\n4\n0 5 10 5\n0 0 5 0\n0 10 0 0\n0 0 10 0\n0\n\n```\nFirst line contains the number of nodes,say n.(Nodes are numbered as 0,1,2,...(n-1) )\nFollowed by n*n weighted matrix. Disconnected egdes are represented by negative weight.\nLast line contains the source node.(i.e, the node from which the BFS or DFS should begin)\n\nSample input for Topological Sort:\n```\n6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 5\n\n```   \nFirst line contains the number of edges.  \nFollowed by the edges eg 1 2 represents an edge from 1 to 2  \n\n\n### Draw Graph ###\n\n\nGraph is first drawn from the weighted matrix input from the user with weights shown. Edges are marked with black.  \n\n![1](https://i.ibb.co/bK1Y8D4/Graph.png)\n\n\n### BFS Traversal ###\n\nIterative BFS is performed, using a queue. Each time an edge is encountered, \nit is marked with red on the graph.\n\n### DFS traversal ###\n\nRecursive DFS is performed, resulting DFS forests are stored in a stack.    \n\n![2](https://i.ibb.co/mXPTWQK/DFS-Result.png)\n\n### Topological Sort ###   \n\nTopological Sort is performed using Depth First Search (DFS).  \n\nPS: Topological Sorting for a graph is not possible if the graph is not a Directed Acyclic Graph (DAG).  \nDirected Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u v, vertex u comes before v in the ordering.  \n\nGreen node - denotes the starting node.                                        \nRed node - denotes the final node.   \n\n![3](https://i.ibb.co/Rz4qPMv/Graph-after-Topological-Sort.png)     \n\n### Prim's and Kruskal's MST ###\n\nPrim's and Kruskal's algorithms are greedy algorithms that find a minimum spanning tree for       \na weighted, connected, undirected graph.     \n\nMinimum Spanning Tree (MST) : A spanning tree with a weight less than or equal to the weight of every other     spanning tree. The weight of a spanning tree is the sum of weights given to each edge of the spanning tree.    \n\nThe edges coloured in Red represent the edges included in the MST     \n![4](https://i.ibb.co/CMQWgQ4/MST.png)      \n\n### Time Complexity ###\n\nBFS, DFS, Topological Sort:    \n0(m+n)                                                                                                        \nwhere m - number of edges                                                                                \n      n - number of nodes     \n\nPrim's and Kruskal's MST:    \nO(V^2)                                                                 \nwhere V - Number of vertices      \n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://akrashsharma.netlify.app/",
    "keywords": "Graph,Algorithms,BFS,DFS,Topological Sort,Prim's MST,Kruskal's MST",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graph-algo-vis",
    "package_url": "https://pypi.org/project/graph-algo-vis/",
    "platform": "",
    "project_url": "https://pypi.org/project/graph-algo-vis/",
    "project_urls": {
      "Graph Algorithms Visualization": "https://github.com/Akarsh654/Graph-Algorithms-Package",
      "Homepage": "http://akrashsharma.netlify.app/"
    },
    "release_url": "https://pypi.org/project/graph-algo-vis/0.3/",
    "requires_dist": [
      "networkx",
      "matplotlib",
      "networkx ; extra == 'dev'",
      "matplotlib ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Visualize Graph Algorithms",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10934034,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cc95cc509b44d49b2b802d0dfe412e81cd24a6a4e2142867b9487b92a2cdc46",
          "md5": "252fcea5b0b43a925e00bfba9ffc6310",
          "sha256": "fcbb89ad71b844fe33df7ed583f441aa1ce58b9194e2acae53c44fd774fb57bf"
        },
        "downloads": -1,
        "filename": "graph_algo_vis-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "252fcea5b0b43a925e00bfba9ffc6310",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4950,
        "upload_time": "2021-06-30T08:27:24",
        "upload_time_iso_8601": "2021-06-30T08:27:24.215664Z",
        "url": "https://files.pythonhosted.org/packages/6c/c9/5cc509b44d49b2b802d0dfe412e81cd24a6a4e2142867b9487b92a2cdc46/graph_algo_vis-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "155dfa6e19938270a115b6c3eba3732841d05eb9c183881d985d04f128846a13",
          "md5": "ed761d07ec7680961c99927d04954b84",
          "sha256": "26f76df7bbf62f235cfc75852bac97219b6fed2c1eaa511c7cbaec4a9bab5080"
        },
        "downloads": -1,
        "filename": "graph_algo_vis-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ed761d07ec7680961c99927d04954b84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3822,
        "upload_time": "2021-06-30T08:27:25",
        "upload_time_iso_8601": "2021-06-30T08:27:25.542087Z",
        "url": "https://files.pythonhosted.org/packages/15/5d/fa6e19938270a115b6c3eba3732841d05eb9c183881d985d04f128846a13/graph_algo_vis-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "675cc6feea1e4858ca9295e07a90cc2d9f48497943ee57f50026ee60786cff33",
          "md5": "bb41cb4e223e55d2a277753664e23cd7",
          "sha256": "146198237961c50246365c983ed678f8e9d4b07b56d5ef86130153180abe75d9"
        },
        "downloads": -1,
        "filename": "graph_algo_vis-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb41cb4e223e55d2a277753664e23cd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6543,
        "upload_time": "2021-07-08T06:33:38",
        "upload_time_iso_8601": "2021-07-08T06:33:38.123323Z",
        "url": "https://files.pythonhosted.org/packages/67/5c/c6feea1e4858ca9295e07a90cc2d9f48497943ee57f50026ee60786cff33/graph_algo_vis-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5285a16ced54b909f4b97b71e27d150ddf99bc54f29d56062e4e5a85cba2c9d",
          "md5": "1ab74c50ea5de68629ae7c8833423b25",
          "sha256": "a23557af7281ad096647e5a533e409f94d5396124b854ad7ce16d68ad8e5de38"
        },
        "downloads": -1,
        "filename": "graph_algo_vis-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1ab74c50ea5de68629ae7c8833423b25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5078,
        "upload_time": "2021-07-08T06:33:39",
        "upload_time_iso_8601": "2021-07-08T06:33:39.937895Z",
        "url": "https://files.pythonhosted.org/packages/d5/28/5a16ced54b909f4b97b71e27d150ddf99bc54f29d56062e4e5a85cba2c9d/graph_algo_vis-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a78fe5584dfa922681da07db58c33bf40905d93c134d21bc60abd321929f830f",
          "md5": "fba6958a58bb27a5101a9ea99b892932",
          "sha256": "d5bb029b8296bc8a19412b816cec86d12f5f81b56776f2885374c2f77b539662"
        },
        "downloads": -1,
        "filename": "graph_algo_vis-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fba6958a58bb27a5101a9ea99b892932",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10223,
        "upload_time": "2021-07-17T09:27:49",
        "upload_time_iso_8601": "2021-07-17T09:27:49.822445Z",
        "url": "https://files.pythonhosted.org/packages/a7/8f/e5584dfa922681da07db58c33bf40905d93c134d21bc60abd321929f830f/graph_algo_vis-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a657f21bf0202b3ca3842ca391266a27836c0ebeb9fbf42526e3e81eb5e3dd16",
          "md5": "c9f025689d0d4fa917d1798164c10889",
          "sha256": "48e080fd76408778bebf1b47c23dc735757b432c15e032e38f696a513ce2422d"
        },
        "downloads": -1,
        "filename": "graph_algo_vis-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c9f025689d0d4fa917d1798164c10889",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7225,
        "upload_time": "2021-07-17T09:27:52",
        "upload_time_iso_8601": "2021-07-17T09:27:52.554594Z",
        "url": "https://files.pythonhosted.org/packages/a6/57/f21bf0202b3ca3842ca391266a27836c0ebeb9fbf42526e3e81eb5e3dd16/graph_algo_vis-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a78fe5584dfa922681da07db58c33bf40905d93c134d21bc60abd321929f830f",
        "md5": "fba6958a58bb27a5101a9ea99b892932",
        "sha256": "d5bb029b8296bc8a19412b816cec86d12f5f81b56776f2885374c2f77b539662"
      },
      "downloads": -1,
      "filename": "graph_algo_vis-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fba6958a58bb27a5101a9ea99b892932",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10223,
      "upload_time": "2021-07-17T09:27:49",
      "upload_time_iso_8601": "2021-07-17T09:27:49.822445Z",
      "url": "https://files.pythonhosted.org/packages/a7/8f/e5584dfa922681da07db58c33bf40905d93c134d21bc60abd321929f830f/graph_algo_vis-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a657f21bf0202b3ca3842ca391266a27836c0ebeb9fbf42526e3e81eb5e3dd16",
        "md5": "c9f025689d0d4fa917d1798164c10889",
        "sha256": "48e080fd76408778bebf1b47c23dc735757b432c15e032e38f696a513ce2422d"
      },
      "downloads": -1,
      "filename": "graph_algo_vis-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c9f025689d0d4fa917d1798164c10889",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7225,
      "upload_time": "2021-07-17T09:27:52",
      "upload_time_iso_8601": "2021-07-17T09:27:52.554594Z",
      "url": "https://files.pythonhosted.org/packages/a6/57/f21bf0202b3ca3842ca391266a27836c0ebeb9fbf42526e3e81eb5e3dd16/graph_algo_vis-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}