{
  "info": {
    "author": "Indykite",
    "author_email": "test@indykite.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# IndyKite Python SDK üêç\n\nThis project serves as a Software Development Kit for developers of Indykite applications.\n\n[![codecov](https://codecov.io/gh/indykite/jarvis-sdk-python/branch/master/graph/badge.svg?token=8u4yvyi5PN)](https://codecov.io/gh/indykite/jarvis-sdk-python)\n\n## Requirements\n\n* Python 3.8\n* [Buf](https://github.com/bufbuild/buf)\n\n## Installation\n\n* Create virtual env and install dependencies\n\n        pipenv install\n\n* Generate protobufs\n\n        ./gen_proto.sh\n\n## Used terminology\n\n| Definition | Description |\n| ---------- | ----------- |\n| Digital Twin | A digital twin is the digital identity of a physical entity on/in a software/identity system |\n| Application Space ID | ID of the application space the digital twin belongs to |\n| Application Agent ID | ID of the agent which makes the application available for the different calls |\n| Tenant ID | ID of the tenant the digital twin belongs to. The tenant belongs to an application space |\n| Private Key and Settings | The secret which required to reach the system. Indykite provides the necessary secrets |\n| Property | The digital twin's property (eg.: email, name) |\n| JWT | JSON Web Tokens |\n| Introspect | A process used to validate the token and to retrieve properties assigned to the token |\n| Patch property | Add, change or delete a property of a digital twin |\n\n## Initial settings\n\n1. You need to have a configuration json file to be able to use the IndyKite Proto SDK. You can get it from your\n   Indykite contact or from Indykite console if you have access to it.\n\n    Example configuration file:\n\n```json\n{\n  \"appSpaceId\": \"696e6479-6b69-4465-8000-010100000002\",\n  \"baseUrl\": \"https://jarvis.indykite.com\",\n  \"applicationId\": \"696e6479-6b69-4465-8000-020100000002\",\n  \"defaultTenantId\": \"696e6479-6b69-4465-8000-030100000002\",\n  \"appAgentId\": \"696e6479-6b69-4465-8000-050100000002\",\n  \"endpoint\": \"jarvis.indykite.com\",\n  \"privateKeyJWK\": {\n    \"kty\": \"EC\",\n    \"d\": \"aa\",\n    \"use\": \"sig\",\n    \"crv\": \"P-256\",\n    \"kid\": \"2e5lIxxb6obIwpok\",\n    \"x\": \"6d83se2Eg\",\n    \"y\": \"lshzMo\",\n    \"alg\": \"ES256\"\n  },\n  \"privateKeyPKCS8Base64\": \"LS0tLS==\",\n  \"privateKeyPKCS8\": \"-----BEGIN PRIVATE KEY-----\\nM\\n-----END PRIVATE KEY-----\"\n}\n```\n\nConditionally optional parameters:\n- baseUrl\n- defaultTenantId\n- endpoint\n\n\n\n2. Credentials \n    #### Identity\n    You have two choices to set up the necessary credentials. You either pass the json to the `INDYKITE_APPLICATION_CREDENTIALS`\n    environment variable or set the `INDYKITE_APPLICATION_CREDENTIALS_FILE` environment variable to the configuration file's path.\n\n   - on Linux and OSX\n\n       ```\n        export INDYKITE_APPLICATION_CREDENTIALS='{\n        \"appSpaceId\":\"00000000-0000-4000-a000-000000000000\",\n        \"appAgentId\":\"00000000-0000-4000-a000-000000000001\",\n        \"endpoint\": \"application.indykite.com\",\n        \"privateKeyJWK\":{\n          \"kty\":\"EC\",\n          \"d\": \"abcdef\",\n          \"use\": \"sig\",\n          \"crv\": \"P-256\",\n          \"kid\":\"efghij\",\n          \"x\":\"klmnop\",\n          \"y\":\"qrstvw\",\n          \"alg\":\"ES256\"\n          }\n        }'\n        ```\n\n     or\n\n      `export INDYKITE_APPLICATION_CREDENTIALS_FILE=/Users/xx/configuration.json`\n\n   - on Windows command line\n\n\n       ```\n        setex INDYKITE_APPLICATION_CREDENTIALS='{\n        \"appSpaceId\":\"00000000-0000-4000-a000-000000000000\",\n        \"appAgentId\":\"00000000-0000-4000-a000-000000000001\",\n        \"endpoint\": \"application.indykite.com\",\n        \"privateKeyJWK\":{\n          \"kty\":\"EC\",\n          \"d\": \"abcdef\",\n          \"use\": \"sig\",\n          \"crv\": \"P-256\",\n          \"kid\":\"efghij\",\n          \"x\":\"klmnop\",\n          \"y\":\"qrstvw\",\n          \"alg\":\"ES256\"\n          }\n        }'\n        ```\n\n     or\n\n      `setex INDYKITE_APPLICATION_CREDENTIALS_FILE \"C:\\Users\\xx\\Documents\\configuration.json\"`\n\n\n\n\n#### Config\nYou have two choices to set up the necessary credentials. You either pass the json to the `INDYKITE_SERVICE_ACCOUNT_CREDENTIALS`\nenvironment variable or set the `INDYKITE_SERVICE_ACCOUNT_CREDENTIALS_FILE` environment variable to the configuration file's path.\n\n   - on Linux and OSX\n       ```\n        export INDYKITE_SERVICE_ACCOUNT_CREDENTIALS='{\n        \"serviceAccountId\":\"gid:AAAAEg5K78iO852lPKlg25Ui6Nm\",\n        \"endpoint\":\"jarvis.indykite.com\",\n         \"privateKeyJWK\":{\n            \"kty\": \"EC\",\n            \"d\": \"Uio125jfi8Oph5hIoj4KLnw6Ha96qhGgh2yUIJki66gYuNjkMg\",\n            \"use\": \"sig\",\n            \"crv\": \"P-256\",\n            \"kid\": \"ph5hIoj4KLnw6HUio125jfi8Oph5hIoj4Khy5Plmy5uk8t7\",\n            \"x\": \"fr8f5LjhrtjJkyui66gt5i8ff5jflsHtgd3nf\",\n            \"y\": \"445mfgykk4hisfYyrej4HygTjg46Sqw69gHYh\",\n            \"alg\": \"ES256\"\n         }\n        }'\n        ```\n\n     or\n\n      `export INDYKITE_SERVICE_ACCOUNT_CREDENTIALS_FILE=/Users/xx/configuration.json`\n\n   - on Windows command line\n\n\n       ```\n        setex INDYKITE_SERVICE_ACCOUNT_CREDENTIALS='{\n        \"serviceAccountId\":\"gid:AAAAEg5K78iO852lPKlg25Ui6Nm\",\n        \"endpoint\":\"jarvis.indykite.com\",\n         \"privateKeyJWK\":{\n            \"kty\": \"EC\",\n            \"d\": \"Uio125jfi8Oph5hIoj4KLnw6Ha96qhGgh2yUIJki66gYuNjkMg\",\n            \"use\": \"sig\",\n            \"crv\": \"P-256\",\n            \"kid\": \"ph5hIoj4KLnw6HUio125jfi8Oph5hIoj4Khy5Plmy5uk8t7\",\n            \"x\": \"fr8f5LjhrtjJkyui66gt5i8ff5jflsHtgd3nf\",\n            \"y\": \"445mfgykk4hisfYyrej4HygTjg46Sqw69gHYh\",\n            \"alg\": \"ES256\"\n         }\n        }'\n        ```\n\n     or\n\n      `setex INDYKITE_SERVICE_ACCOUNT_CREDENTIALS_FILE \"C:\\Users\\xx\\Documents\\configuration.json\"`\n\n\n3. Initialize a client to establish the connection. This client instance's `self.stub` will be used by the other functions.\n\n*Note:* The client is opening a GRPC channel and the client *must* close the channel, too! If the client doesn't close the channel\nafter use, it can cause surprises like `_InactiveRpcErrors`.\n\n```python\nimport certifi\nimport grpc\nimport json\nimport os\nimport time\nimport uuid\nfrom authlib.jose import JsonWebKey, jwt\nfrom datetime import datetime, timedelta, timezone\n\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2_grpc as pb2_grpc\n\ndef __init__(self, credential_json=None, credential_file=None):\n    if credential_json is None:\n        credentials = os.path.join(os.path.dirname(credential_file), os.path.basename(credential_file))\n        with open(credentials, 'r') as file:\n            raw_content = file.read()\n            credentials = json.loads(raw_content)\n    else:\n        credentials = json.loads(credential_json)\n\n    # Create JWT token out of the credentials\n    jwk = credentials.get('private_key_jwk')\n    key = JsonWebKey.import_key(jwk)\n    message = {\n            'exp': int(time.mktime((datetime.now(timezone.utc) + timedelta(hours=24)).timetuple())),\n            'iat': int(time.mktime((datetime.now(timezone.utc)).timetuple())),\n            'iss': credentials.get('app_agent_id'),\n            'jti': str(uuid.uuid4()),\n            'sub': credentials.get('app_agent_id'),\n        }\n\n    jwt_token = jwt.encode({\n            'alg': 'ES256',\n            'cty': 'JWT',\n            'kid': jwk['kid']\n    }, message, key)\n\n    call_credentials = grpc.access_token_call_credentials(jwt_token.decode(\"utf-8\"))\n\n    certificate_path = certifi.where()\n    endpoint = credentials.get(\"endpoint\")\n\n    with open(certificate_path, \"rb\") as cert_file:\n        channel_credentials = grpc.ssl_channel_credentials(cert_file.read())\n\n    composite_credentials = grpc.composite_channel_credentials(channel_credentials,\n                                                               call_credentials)\n\n    self.channel = grpc.secure_channel(endpoint, composite_credentials)\n    self.stub = pb2_grpc.IdentityManagementAPIStub(channel=self.channel)\n```\n\n4. Close a GRPC channel\nYou simple call the `close()` function on the channel (The `IdentityClient()` function below represents the def in the previous step)\n```python\nfrom indykite_sdk.identity import IdentityClient\n\ndef open_and_close_channel():\n    client = IdentityClient()\n    client.channel.close()\n```\n\n## Running tests\n\nTo run unit tests, simply execute\n\n    pytest\n\nTo display code coverage, enter\n\n    pytest --cov .\n\n## Functions to call\n\nMost of the calls can be executed in two ways:\n\n1. An admin is able to manipulate a digital twin if he has proper rights to do so ([Admin service](#admin-service))\n2. As a self-service, the user is able to manipulate his account (modify/delete) using his active token ([Self-service](#self-serice))\n\nCurrently available functions:\n- [Introspect token](#introspect-token)\n- [Get user information](#get-user-information)\n- [Add, modify, delete a digital twin's property](#addmodifyremove-user-property-patch-property)\n- [Delete a digital twin](#delete-user)\n- [Verify email](#verify-email)\n- [Send new verification email](#send-new-verification-email-admin-service)\n- [Change password](#change-password)\n- [Ingest records](#ingest-records)\n- [Customers](#get-customer-information)\n- [AppSpaces](#get-appspace-information)\n- [Tenants](#get-tenant-information)\n- [Applications](#get-application-information)\n- [AppAgents](#get-applicationagent-information)\n- [Service accounts](#get-service-account-information)\n- [Config nodes](#get-configuration-nodes-information)\n- [OAuth2 providers](#get-oauth2-provider-information)\n- [OAuth2 applications](#get-oauth2-application-information)\n\n### Introspect token\n\n‚ÄúToken introspection‚Äù occurs when a resource server sends the token to the authorization server that originally issued the token,\nand receives a response from the authorization server with detail on whether the token is active or expired and what attributes are included in the token.\nIf the token was not valid, then the `response.active` attribute is false and no other information is in the response.\n\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\n\ndef introspect_token(self, user_token):\n    response = self.stub.TokenIntrospect(\n                pb2.TokenIntrospectRequest(token=user_token)\n            )\n\n    print (response)\n```\n\n### Get user information\n\nIt is possible to get an existing user's properties like it's email, mobile, nickname, givenname, familyname ...etc.\n\n#### Admin service\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\nfrom indykite_sdk.indykite.identity.v1beta1 import model_pb2 as model\nfrom indykite_sdk.indykite.identity.v1beta1 import attributes_pb2 as attributes\n\ndef get_digital_twin(self, digital_twin_id, tenant_id, field_name):\n    response = self.stub.GetDigitalTwin(\n            pb2.GetDigitalTwinRequest(\n                id=pb2.DigitalTwinIdentifier(\n                    digital_twin=model.DigitalTwin(\n                        id=digital_twin_id.bytes,\n                        tenant_id=tenant_id.bytes\n                    )\n                ),\n                properties=[\n                    attributes.PropertyMask(\n                        definition=attributes.PropertyDefinition(property=field_name)\n                    )\n                ]\n            )\n        )\n\n    print (response)\n```\n\n#### Self-service\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\nfrom indykite_sdk.indykite.identity.v1beta1 import attributes_pb2 as attributes\n\ndef get_digital_twin(self, token, field_name):\n    response = self.stub.GetDigitalTwin(\n                pb2.GetDigitalTwinRequest(\n                    id=pb2.DigitalTwinIdentifier(access_token=token),\n                    properties=[\n                        attributes.PropertyMask(\n                            definition=attributes.PropertyDefinition(property=field_name)\n                        )\n                    ]\n                )\n        )\n\n    print (response)\n```\n\n### Add/Modify/Remove User property (Patch property)\n\nIt is possible to add a property to a digital twin, modify an existing property or delete an existing property if it's not\nprotected. Also, the `PatchDigitalTwin` allows to send multiple operations in one request\n\n#### Admin service\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\nfrom indykite_sdk.indykite.identity.v1beta1 import model_pb2 as model\nfrom indykite_sdk.indykite.identity.v1beta1 import attributes_pb2 as attributes\nfrom indykite_sdk.indykite.objects import struct_pb2 as objects\n\ndef patch_property_add(self, digital_twin_id, tenant_id, property_name, value):\n    response = self.stub.PatchDigitalTwin(\n            pb2.PatchDigitalTwinRequest(\n                id=pb2.DigitalTwinIdentifier(\n                    digital_twin=model.DigitalTwin(\n                        id=digital_twin_id.bytes,\n                        tenant_id=tenant_id.bytes\n                    )\n                ),\n                operations=[\n                    attributes.PropertyBatchOperation(\n                        add=attributes.Property(\n                            definition=attributes.PropertyDefinition(property=property_name),\n                            object_value=objects.Value(string_value=value)\n                        )\n                    )\n                ]\n            )\n        )\n\n    print (response)\n```\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\nfrom indykite_sdk.indykite.identity.v1beta1 import model_pb2 as model\nfrom indykite_sdk.indykite.identity.v1beta1 import attributes_pb2 as attributes\nfrom indykite_sdk.indykite.objects import struct_pb2 as objects\n\ndef patch_property_replace(self, digital_twin_id, tenant_id, property_id, value):\n    response = self.stub.PatchDigitalTwin(\n            pb2.PatchDigitalTwinRequest(\n                id=pb2.DigitalTwinIdentifier(\n                    digital_twin=model.DigitalTwin(\n                        id=digital_twin_id.bytes,\n                        tenant_id=tenant_id.bytes\n                    )\n                ),\n                operations=[\n                    attributes.PropertyBatchOperation(\n                        replace=attributes.Property(\n                            id=int(property_id),\n                            object_value=objects.Value(string_value=value)\n                        )\n                    )\n                ]\n            )\n        )\n\n    print (response)\n```\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\nfrom indykite_sdk.indykite.identity.v1beta1 import model_pb2 as model\nfrom indykite_sdk.indykite.identity.v1beta1 import attributes_pb2 as attributes\n\ndef patch_property_remove(self, digital_twin_id, tenant_id, property_id):\n    response = self.stub.PatchDigitalTwin(\n            pb2.PatchDigitalTwinRequest(\n                id=pb2.DigitalTwinIdentifier(\n                    digital_twin=model.DigitalTwin(\n                        id=digital_twin_id.bytes,\n                        tenant_id=tenant_id.bytes\n                    )\n                ),\n                operations=[\n                    attributes.PropertyBatchOperation(\n                        remove=attributes.Property(\n                            id=int(property_id)\n                        )\n                    )\n                ]\n            )\n        )\n\n    print (response)\n```\n\n#### Self-service\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\nfrom indykite_sdk.indykite.identity.v1beta1 import model_pb2 as model\nfrom indykite_sdk.indykite.identity.v1beta1 import attributes_pb2 as attributes\nfrom indykite_sdk.indykite.objects import struct_pb2 as objects\n\ndef patch_property_add_replace_remove(self, token, add_name, add_value, replace_id, replace_value, remove_id):\n    response = self.stub.PatchDigitalTwin(\n            pb2.PatchDigitalTwinRequest(\n                id=pb2.DigitalTwinIdentifier(access_token=token),\n                operations=[\n                    attributes.PropertyBatchOperation(\n                        add=attributes.Property(\n                            definition=attributes.PropertyDefinition(property=add_name),\n                            object_value=objects.Value(string_value=add_value)\n                        )\n                    ),\n                    attributes.PropertyBatchOperation(\n                        replace=attributes.Property(\n                            id=int(replace_id),\n                            object_value=objects.Value(string_value=replace_value)\n                        )\n                    ),\n                    attributes.PropertyBatchOperation(\n                        remove=attributes.Property(\n                            id=int(remove_id)\n                        )\n                    )\n                ]\n            )\n        )\n\n    print (response)\n\n```\n\n### Delete User\n\nIt is allowed to send a delete user request which deletes the digital twin and all of it's connected properties from the system.\n\n#### Admin service\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\nfrom indykite_sdk.indykite.identity.v1beta1 import model_pb2 as model\n\ndef del_user(self, digital_twin_id, tenant_id):\n    response = self.stub.DeleteDigitalTwin(\n            pb2.DeleteDigitalTwinRequest(\n                id=pb2.DigitalTwinIdentifier(\n                    digital_twin=model.DigitalTwin(\n                        id=digital_twin_id.bytes,\n                        tenant_id=tenant_id.bytes\n                    )\n                )\n            )\n        )\n\n    print (response)\n```\n\n#### Self-service\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\n\ndef del_user(self, token):\n    response = self.stub.DeleteDigitalTwin(\n                pb2.DeleteDigitalTwinRequest(\n                    id=pb2.DigitalTwinIdentifier(access_token=token)\n                )\n        )\n```\n\n### Verify email\n\nWhen the registration required an email verification to complete the registration, the system sends a verification email to the\nregistered email address. The email should contain a token which can be sent to the SDK via `VerifyDigitalTwinEmail` function to\nset the digital twin's email as verified email.\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\n\ndef verify_email(self, token):\n    response = self.stub.VerifyDigitalTwinEmail(\n            pb2.VerifyDigitalTwinEmailRequest(token=token)\n        )\n```\n\n### Send new verification email (admin service)\n\nIt is possible that the token in the verification email is already expired when the user tried to verify his email. In this case\nit is necessary to send out a new, valid verification email. Calling the `StartDigitalTwinEmailVerification` method the system\nsends out another verification email to the registered address with a new token.\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\nfrom indykite_sdk.indykite.identity.v1beta1 import model_pb2 as model\n\ndef new_verification_email(self, digital_twin_id, tenant_id, email):\n    response = self.stub.StartDigitalTwinEmailVerification(\n            pb2.StartDigitalTwinEmailVerificationRequest(\n                digital_twin=model.DigitalTwin(\n                    id=digital_twin_id.bytes,\n                    tenant_id=tenant_id.bytes\n                ),\n                email=email\n            )\n        )\n```\n\n### Change password\n\nWhere there is a password, there is a high chance to forget it. With the `ChangePassword` function either the admin with the digital twin ID\nand tenant ID (Admin service), or the user (self-service) with his active token can change it.\n\n#### Admin service\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\nfrom indykite_sdk.indykite.identity.v1beta1 import model_pb2 as model\n\ndef change_password(self, digital_twin_id, tenant_id, new_password):\n    response = self.stub.ChangePassword(\n            pb2.ChangePasswordRequest(\n                digital_twin=model.DigitalTwin(\n                    id=digital_twin_id.bytes,\n                    tenant_id=tenant_id.bytes\n                ),\n                password=new_password\n            )\n        )\n\n    print (response)\n```\n\n#### Self-service\n\n```python\nfrom indykite_sdk.indykite.identity.v1beta1 import identity_management_api_pb2 as pb2\n\ndef change_password(self, token, new_password):\n    response = self.stub.ChangePassword(\n            pb2.ChangePasswordRequest(\n                token=token,\n                password=new_password,\n                ignore_policy=2\n            )\n        )\n\n    print(response)\n```\n\n### Ingest records\n\n```python\ndef stream_records(self, config_id, records):\n    record_iterator = self.generate_records_request(config_id, records)\n    response_iterator = self.stub.StreamRecords(record_iterator)\n\n    for response in response_iterator:\n      print(response)\n```\n\n### Get customer information\n\nIt is possible to get an existing customer's information.\nIf we don't have its id or name, we can get its id through service_account\nThe service account id is in the config file.\nThe ServiceAccount class will also return the customer id\n\n#### Read customer id with service_account request\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_customer(self, local):\n    client_config = ConfigClient(local)\n    service_account = client_config.get_service_account()\n    print(service_account.customer_id)\n    customer = client_config.get_customer_by_id(service_account.customer_id)\n    print(customer)\n```\n\n#### Read customer name\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_customer(self, local, customer_name):\n    client_config = ConfigClient(local)\n    customer = client_config.get_customer_by_name(customer_name)\n    print(customer)\n```\n\n### Get AppSpace information\n\nIt is possible to get an existing AppSpace's information from customer, AppSpaceId and AppSpace name.\n#### Read appspace with id\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_app_space(self, local, app_space_id):\n    client_config = ConfigClient(local)\n    app_space = client_config.get_app_space_by_id(app_space_id)\n    print(app_space)\n```\n\n#### Read appspace with name\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_app_space(self, local, customer_id, app_space_name):\n    client_config = ConfigClient(local)\n    app_space = client_config.get_app_space_by_name(customer_id, app_space_name)\n    print(app_space)\n```\n\n#### List appspaces \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_app_spaces(self, local, customer_id, match_list, bookmarks=[]):\n    #match_list is a nonempty list of app_spaces names\n    client_config = ConfigClient(local)\n    list_app_spaces_response = client_config.list_app_spaces(customer_id, match_list, bookmarks)\n    print(list_app_spaces_response)\n```\n\n### Create, update, delete AppSpace information\ndelete is not yet implemented in the IK platform\n\n#### Create appspace \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef create_app_space(self, local, customer_id, app_space_name, display_name, description):\n    client_config = ConfigClient(local)\n    app_space_response = client_config.create_app_space(customer_id, app_space_name, display_name,description, [])\n    print(app_space_response)\n```\n\n#### Update appspace \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef update_app_space(self, local, app_space_id, etag, display_name, description, bookmarks = []):\n    #etag and bookmarks can be retrieved from a get_app_space or with a create_app_space or update_app_space\n    client_config = ConfigClient(local)\n    app_space_response = client_config.update_app_space(app_space_id, etag, display_name, description, bookmarks)\n    print(app_space_response)\n```\n\n#### Delete appspace \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef delete_app_space(self, local, app_space_id, etag, bookmarks = []):\n    #etag and bookmarks can be retrieved from a get_app_space or with a create_app_space or update_app_space\n    client_config = ConfigClient(local)\n    delete_app_space_response = client_config.delete_app_space(app_space_id, etag, bookmarks)\n    print(delete_app_space_response)\n```\n\n### Get Tenant information\n\nIt is possible to get an existing Tenant's information from appSpace, TenantId and Tenant name.\nA tenant is a grouping of Digital Twins (DT -> digital users) in an appSpace\n#### Read tenant with id\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_tenant(self, local, tenant_id):\n    client_config = ConfigClient(local)\n    tenant = client_config.get_tenant_by_id(tenant_id)\n    print(tenant)\n```\n\n#### Read tenant with name\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_app_space(self, local, app_space_id, tenant_name):\n    client_config = ConfigClient(local)\n    tenant = client_config.get_tenant_by_name(app_space_id, tenant_name)\n    print(tenant)\n```\n\n#### List tenants \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_tenants(self, local, app_space_id, match_list, bookmarks=[]):\n    #match_list is a nonempty list of tenants names\n    client_config = ConfigClient(local)\n    list_tenants_response = client_config.list_tenants(app_space_id, match_list, bookmarks)\n    print(list_tenants_response)\n```\n\n### Create, update, delete Tenant information\ndelete is not yet implemented in the IK platform\n\n#### Create tenant \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef create_tenant(self, local, issuer_id, tenant_name, display_name, description):\n    client_config = ConfigClient(local)\n    tenant_response = client_config.create_tenant(issuer_id, tenant_name, display_name, description, [])\n    print(tenant_response)\n```\n\n#### Update tenant \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef update_tenant(self, local, tenant_id, etag, display_name, description, bookmarks = []):\n    #etag and bookmarks can be retrieved from a get_tenant or with a create_tenant or update_tenant\n    client_config = ConfigClient(local)\n    tenant_response = client_config.update_tenant(tenant_id, etag, display_name,\"description update\", [])\n    print(tenant_response)\n```\n\n#### Delete tenant \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef delete_tenant(self, local, tenant_id, etag, bookmarks = []):\n    #etag and bookmarks can be retrieved from a get_tenant or with a create_tenant or update_tenant\n    client_config = ConfigClient(local)\n    delete_tenant_response = client_config.delete_tenant(tenant_id, etag, bookmarks)\n    print(delete_tenant_response)\n```\n\n### Get Application information\n\nIt is possible to get an existing Application's information from appSpace, Application id and Application name.\nAn application is created in an appSpace\n#### Read application with id\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_application(self, local, application_id):\n    client_config = ConfigClient(local)\n    application = client_config.get_application_by_id(application_id)\n    print(application)\n```\n\n#### Read application with name\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_application(self, local, app_space_id, application_name):\n    client_config = ConfigClient(local)\n    application = client_config.get_application_by_name(app_space_id, application_name)\n    print(application)\n```\n\n#### List applications \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_applications(self, local, app_space_id, match_list, bookmarks=[]):\n    #match_list is a nonempty list of applications names\n    client_config = ConfigClient(local)\n    list_applications_response = client_config.list_applications(app_space_id, match_list, bookmarks)\n    print(list_applications_response)\n```\n\n### Create, update, delete Application information\ndelete is not yet implemented in the IK platform\n\n#### Create application \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef create_application(self, local, app_space_id, application_name, display_name, description):\n    client_config = ConfigClient(local)\n    application_response = client_config.create_application(app_space_id, application_name, display_name, description, [])\n    print(application_response)\n```\n\n#### Update application \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef update_application(self, local, application_id, etag, display_name, description, bookmarks = []):\n    #etag and bookmarks can be retrieved from a get_application or with a create_application or update_application\n    client_config = ConfigClient(local)\n    application_response = client_config.update_application(application_id, etag, display_name,description, bookmarks)\n    print(application_response)\n```\n\n#### Delete application \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef delete_application(self, local, application_id, etag, bookmarks = []):\n    #etag and bookmarks can be retrieved from a get_application or with a create_application or update_application\n    client_config = ConfigClient(local)\n    delete_application_response = client_config.delete_application(application_id, etag, bookmarks)\n    print(delete_application_response)\n```\n\n\n### Get ApplicationAgent information\n\nIt is possible to get an existing ApplicationAgent's information from Application, ApplicationAgent id and ApplicationAgent name.\nAn applicationAgent is created for an Application\n#### Read applicationAgent with id\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_application_agent(self, local, application_agent_id):\n    client_config = ConfigClient(local)\n    application_agent = client_config.get_application_agent_by_id(application_agent_id)\n    print(application_agent)\n```\n\n#### Read applicationAgent with name\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_application_agent(self, local, app_space_id, application_agent_name):\n    client_config = ConfigClient(local)\n    application_agent = client_config.get_application_agent_by_name(app_space_id, application_agent_name)\n    print(application_agent)\n```\n\n#### List applicationAgents \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_application_agents(self, local, app_space_id, match_list, bookmarks=[]):\n    #match_list is a nonempty list of application agents names\n    client_config = ConfigClient(local)\n    list_application_agents_response = client_config.list_application_agents(app_space_id, match_list, bookmarks)\n    print(list_application_agents_response)\n```\n\n### Create, update, delete ApplicationAgent information\ndelete is not yet implemented in the IK platform\n\n#### Create applicationAgent \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef create_application_agent(self, local, application_id, application_agent_name, display_name, description):\n    client_config = ConfigClient(local)\n    application_agent_response = client_config.create_application_agent(application_id, application_agent_name, display_name,\n                                                                description, [])\n    print(application_agent_response)\n```\n\n#### Update applicationAgent \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef update_application_agent(self, local, application_agent_id, etag, display_name, description, bookmarks = []):\n    #etag and bookmarks can be retrieved from a get_application_agent or with a create_application_agent or update_application_agent\n    client_config = ConfigClient(local)\n    application_agent_response = client_config.update_application_agent(application_agent_id, etag, display_name, description, bookmarks)\n    print(application_agent_response)\n```\n\n#### Delete applicationAgent \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef delete_application_agent(self, local, application_agent_id, etag, bookmarks = []):\n    #etag and bookmarks can be retrieved from a get_application_agent or with a create_application_agent or update_application_agent\n    client_config = ConfigClient(local)\n    delete_application_agent_response = client_config.delete_application_agent(application_agent_id, etag, bookmarks)\n    print(delete_application_agent_response)\n```\n\n### Get ApplicationAgentCredential information\n\nIt is possible to get an existing ApplicationAgentCredential's information from ApplicationAgent and ApplicationAgentCredential id.\nAn applicationAgentCredential is created for an ApplicationAgent\n#### Read applicationAgentCredential with id\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef get_application_agent_credential(self, local, application_agent_credential_id):\n    client_config = ConfigClient(local)\n    application_agent_credential = client_config.get_application_agent_credential(application_agent_credential_id)\n    print(application_agent_credential)\n```\n\n### Create, delete ApplicationAgentCredential information\ndelete is not yet implemented in the IK platform\n\n#### Register applicationAgentCredential with jwk\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef create_application_agent_credential(self, local, application_agent_id, display_name, jwk, expire_time_in_seconds, default_tenant_id):\n    client_config = ConfigClient(local)\n    application_agent_credential_response = client_config.register_application_agent_credential_jwk(application_agent_id,\n                                                                                             display_name, jwk,\n                                                                                             expire_time_in_seconds,\n                                                                                             default_tenant_id, [])\n    print(application_agent_credential_response)\n```\n\n#### Register applicationAgentCredential with pem\n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef create_application_agent_credential(self, local, application_agent_id, display_name, pem, expire_time_in_seconds, default_tenant_id):\n    client_config = ConfigClient(local)\n    application_agent_credential_response = client_config.register_application_agent_credential_pem(application_agent_id,\n                                                                                             display_name, pem,\n                                                                                             expire_time_in_seconds,\n                                                                                             default_tenant_id, [])\n    print(application_agent_credential_response)\n```\n\n\n#### Delete applicationAgentCredential \n```python\nfrom indykite_sdk.identity import IdentityClient\nfrom indykite_sdk.config import ConfigClient\nfrom indykite_sdk.indykite.config.v1beta1.model_pb2 import UniqueNameIdentifier\n\ndef delete_application_agent_credential(self, local, application_agent_credential_id, bookmarks = []):\n    #bookmarks can be retrieved from a get_application_agent_credential or with a create_application_agent \n    client_config = ConfigClient(local)\n    delete_application_agent_credential_response = client_config.delete_application_agent_credential(application_agent_credential_id, bookmarks)\n    print(delete_application_agent_credential_response)\n```\n\n### Get Service Account information\n\nTo use config methods (spaces), you need a service account, a service account credential and create a file with this credential.\nYou can create it in the Admin Console or using the SDK.\n\n#### Read service account\n\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef get_service_account(self, local, service_account_id):\n    client_config = ConfigClient(local)\n    service_account_response = client_config.get_service_account(service_account_id)\n    print(service_account_response)\n\n```\n\n#### Create service account\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef create_service_account(self, local, customer_id, service_account_name, display_name, description, role, bookmarks):\n    client_config = ConfigClient(local)\n    service_account_response = client_config.create_service_account(customer_id, service_account_name, display_name, description, role, bookmarks)\n    print(service_account_response)\n```\n\n#### Update service account\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef update_service_account(self, local, service_account_id, etag, display_name, description, bookmarks):\n    client_config = ConfigClient(local)\n    service_account_response = client_config.create_service_account(service_account_id, etag, display_name, description, bookmarks)\n    print(service_account_response)\n```\n\n#### Delete service account\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef delete_service_account(self, local, service_account_id, etag, bookmarks):\n    client_config = ConfigClient(local)\n    delete_service_account_response = client_config.delete_service_account(service_account_id, etag, bookmarks)\n    print(delete_service_account_response)\n```\n\n#### Read service account credential\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef get_service_account_credential(self, local, service_account_credential_id):\n    client_config = ConfigClient(local)\n    service_account_credential_response = client_config.get_service_account_credential(service_account_credential_id)\n    print(service_account_credential_response)\n```\n\n#### Register service account credential with jwk\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef register_service_account_credential(self, local, service_account_id, display_name, \n                                        public_key_jwk, expire_time_in_seconds, bookmarks):\n    client_config = ConfigClient(local)\n    service_account_credential_response = client_config.register_service_account_credential_jwk(service_account_id, \n                                                                                                display_name, \n                                                                                                public_key_jwk,\n                                                                                                expire_time_in_seconds,\n                                                                                                bookmarks)\n    print(service_account_credential_response)\n```\n\n#### Delete service account credential\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef delete_service_account_credential(self, local, service_account_credential_id, bookmarks):\n    client_config = ConfigClient(local)\n    delete_service_account_credential_response = client_config.delete_service_account_credential(service_account_credential_id, bookmarks)\n    print(delete_service_account_credential_response)\n```\n\n### Get Configuration nodes information\n\nOn spaces, you can create configurations nodes like authentication flows, email services, oauth2...\n\n#### Read node configuration\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef get_config_node(self, local, config_node_id, bookmarks):\n    client_config = ConfigClient(local)\n    config_node = client_config.read_config_node(config_node_id, bookmarks)\n    print(config_node)\n```\n\n#### Delete node configuration\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef delete_config_node(self, local, config_node_id, etag, bookmarks):\n    client_config = ConfigClient(local)\n    config_node = client_config.delete_config_node(config_node_id, etag, bookmarks)\n    print(config_node)\n```\n\n#### Create email service config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef create_email_service(self, local, location, name, display_name, \n                                        description, email_service_config, bookmarks):\n    client_config = ConfigClient(local)\n    create_email_service_config_node_response = client_config.create_email_service_config_node(location, \n                                                                                               name, \n                                                                                               display_name,\n                                                                                               description,\n                                                                                               email_service_config,\n                                                                                               bookmarks)\n    print(create_email_service_config_node_response)\n```\n\n#### Update email service config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef update_email_service(self, local, location, config_node_id, etag, display_name, \n                                        description, email_service_config, bookmarks):\n    client_config = ConfigClient(local)\n    update_email_service_config_node_response = client_config.update_email_service_config_node(config_node_id, \n                                                                                               etag,\n                                                                                               display_name,\n                                                                                               description,\n                                                                                               email_service_config,\n                                                                                               bookmarks)\n    print(update_email_service_config_node_response)\n```\n\n#### Create auth flow config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef create_auth_flow(self, local, location, name, display_name, \n                                        description, auth_flow_config, bookmarks):\n    client_config = ConfigClient(local)\n    create_auth_flow_config_node_response = client_config.create_auth_flow_config_node(location, \n                                                                                       name, \n                                                                                       display_name,\n                                                                                       description, \n                                                                                       auth_flow_config,\n                                                                                       bookmarks)\n    print(create_auth_flow_config_node_response)\n```\n\n#### Update auth flow config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef update_auth_flow(self, local, location, config_node_id, etag, display_name, \n                                        description, auth_flow_config, bookmarks):\n    client_config = ConfigClient(local)\n    update_auth_flow_config_node_response = client_config.update_auth_flow_config_node(config_node_id, \n                                                                                       etag, \n                                                                                       display_name, \n                                                                                       description, \n                                                                                       auth_flow_config, \n                                                                                       bookmarks)\n    print(update_auth_flow_config_node_response)\n```\n\n#### Create oauth2 client config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef create_oauth2_client(self, local, location, name, display_name, \n                                        description, oauth2_client_config, bookmarks):\n    client_config = ConfigClient(local)\n    create_oauth2_client_config_node_response = client_config.create_oauth2_client_config_node(location, \n                                                                                               name, \n                                                                                               display_name, \n                                                                                               description, oauth2_client_config, \n                                                                                               bookmarks)\n    print(create_oauth2_client_config_node_response)\n```\n\n#### Update oauth2 client config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef update_oauth2_client(self, local, location, config_node_id, etag, display_name, \n                                        description, oauth2_client_config, bookmarks):\n    client_config = ConfigClient(local)\n    update_oauth2_client_config_node_response = client_config.update_oauth2_client_config_node(config_node_id, \n                                                                                               etag, \n                                                                                               display_name, \n                                                                                               description, \n                                                                                               oauth2_client_config, \n                                                                                               bookmarks)\n    print(update_oauth2_client_config_node_response)\n```\n\n#### Create ingest mapping config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef create_ingest_mapping(self, local, location, name, display_name, \n                                        description, ingest_mapping_config, bookmarks):\n    client_config = ConfigClient(local)\n    create_ingest_mapping_config_node_response = client_config.create_ingest_mapping_config_node(location, \n                                                                                                 name, \n                                                                                                 display_name, \n                                                                                                 description, \n                                                                                                 ingest_mapping_config, \n                                                                                                 bookmarks)\n    print(create_ingest_mapping_config_node_response)\n```\n\n#### Update ingest_mapping config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef update_auth_flow(self, local, location, config_node_id, etag, display_name, \n                                        description, ingest_mapping_config, bookmarks):\n    client_config = ConfigClient(local)\n    update_ingest_mapping_config_node_response = client_config.update_ingest_mapping_config_node(\n            config_node_id,\n            etag,\n            display_name,\n            description,\n            ingest_mapping_config,\n            bookmarks)\n\n    print(update_ingest_mapping_config_node_response)\n```\n\n### Get OAuth2 provider information\n\nIn an Apppace, you can create OAuth2 providers.\nAn OAuth2 service provider is a named set of configuration options for OAuth2. \n\n#### Read OAuth2 provider\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef get_oauth2_provider(self, local, oauth2_provider_id, bookmarks):\n    client_config = ConfigClient(local)\n    config = client_config.read_oauth2_provider(oauth2_provider_id, bookmarks)\n    print(config)\n```\n\n#### Create oauth2 provider config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef create_oauth2_provider(self, local, app_space_id, name, display_name, \n                                        description, config, bookmarks):\n    client_config = ConfigClient(local)\n    create_oauth2_provider_response = client_config.create_oauth2_provider(app_space_id,\n                                                                               name,\n                                                                               display_name,\n                                                                               description,\n                                                                               config,\n                                                                               bookmarks)\n    print(create_oauth2_provider_response)\n```\n\n#### Update oauth2 provider config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef update_oauth2_provider(self, local, oauth2_provider_id, etag, display_name, \n                                        description, config, bookmarks):\n    client_config = ConfigClient(local)\n    update_oauth2_provider_response = client_config.update_oauth2_provider(oauth2_provider_id,\n                                                                               etag,\n                                                                               display_name,\n                                                                               description,\n                                                                               config,\n                                                                               bookmarks)\n    print(update_oauth2_provider_response)\n```\n\n#### Delete OAuth2 provider\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef delete_oauth2_provider(self, local, oauth2_provider_id, etag, bookmarks):\n    client_config = ConfigClient(local)\n    config = client_config.delete_oauth2_provider(oauth2_provider_id, etag, bookmarks)\n    print(config)\n```\n\n### Get OAuth2 application information\n\nIn an Apppace, you can create OAuth2 application under a given OAuth2 Provider.\nAn OAuth2 service provider is a named set of configuration options for OAuth2. \n\n#### Read OAuth2 application\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef get_oauth2_application(self, local, oauth2_application_id, bookmarks):\n    client_config = ConfigClient(local)\n    config = client_config.read_oauth2_application(oauth2_application_id, bookmarks)\n    print(config)\n```\n\n#### Create oauth2 application config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef create_oauth2_application(self, local, oauth2_provider_id, name, display_name, \n                                        description, config, bookmarks):\n    client_config = ConfigClient(local)\n    create_oauth2_application_response = client_config.create_oauth2_application(oauth2_provider_id,\n                                                                                     name,\n                                                                                     display_name,\n                                                                                     description,\n                                                                                     config,\n                                                                                     bookmarks)\n    print(create_oauth2_application_response)\n```\n\n#### Update oauth2 application config\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef update_oauth2_application(self, local, oauth2_application_id, etag, display_name, \n                                        description, config, bookmarks):\n    client_config = ConfigClient(local)\n    update_oauth2_application_response = client_config.update_oauth2_application(oauth2_application_id,\n                                                                                     etag,\n                                                                                     display_name,\n                                                                                     description,\n                                                                                     config,\n                                                                                     bookmarks)\n    print(update_oauth2_application_response)\n```\n\n#### Delete OAuth2 application\n```python\nfrom indykite_sdk.config import ConfigClient\n\ndef delete_oauth2_application(self, local, oauth2_application_id, etag, bookmarks):\n    client_config = ConfigClient(local)\n    config = client_config.delete_oauth2_application(oauth2_application_id, etag, bookmarks)\n    print(config)\n```\n\n\n# Changelog\n\n## [1.5.0](https://github.com/indykite/jarvis-sdk-python/compare/v1.4.0...v1.5.0) (2023-01-03)\n\n\n### Features\n\n* uuid to gid and files renaming ([a4ffd9e](https://github.com/indykite/jarvis-sdk-python/commit/a4ffd9e992c41374ee150c36015b029a61c065bb))\n\n## [1.4.0](https://github.com/indykite/jarvis-sdk-python/compare/v1.3.0...v1.4.0) (2022-12-09)\n\n\n### Features\n\n* config nodes and oauth2 ([5c3147f](https://github.com/indykite/jarvis-sdk-python/commit/5c3147fae5e08de1255c68f96321f2a25e675af5))\n* config nodes and oauth2 ([0d90b42](https://github.com/indykite/jarvis-sdk-python/commit/0d90b426c59293bdb3f29d46acdeea7c0cd4d9d2))\n* update documentation ([0ba7528](https://github.com/indykite/jarvis-sdk-python/commit/0ba7528a134a72bcc48de14fcb168bdd99540607))\n\n## [1.3.0](https://github.com/indykite/jarvis-sdk-python/compare/v1.2.0...v1.3.0) (2022-11-11)\n\n\n### Features\n\n* add config application application agent ([e2c1174](https://github.com/indykite/jarvis-sdk-python/commit/e2c1174ae8cab979b13fdab33041c4c77065fb49))\n* add config credentials ([4eb114a](https://github.com/indykite/jarvis-sdk-python/commit/4eb114a36d4724f9192150cc480ff1bdb981b612))\n* add config credentials ([d7317eb](https://github.com/indykite/jarvis-sdk-python/commit/d7317eb67a0671173c828d317a6f9b1cb9ff174c))\n* add config methods ([82b7505](https://github.com/indykite/jarvis-sdk-python/commit/82b7505334950ae6f00202f2937fa285ddfe7a99))\n* add config methods 2798 ([3648f19](https://github.com/indykite/jarvis-sdk-python/commit/3648f199a60d2e08edab9d28d6b1b91a5e0ecd7b))\n* add config methods appspaces and tenants ([bdbfa3c](https://github.com/indykite/jarvis-sdk-python/commit/bdbfa3ce68854f59dfe75d1c1d2041bf4f80c3fb))\n* add config methods appspaces tenants ([92b6c14](https://github.com/indykite/jarvis-sdk-python/commit/92b6c149131754cee234b0dff2aa880a829dcba7))\n* add ingest api ([39576d9](https://github.com/indykite/jarvis-sdk-python/commit/39576d99966e0bf1666a5526a8bcb545582fda69))\n* add service account credential ([9b73e92](https://github.com/indykite/jarvis-sdk-python/commit/9b73e923d0102657273753e2d5083f25e4cc3007))\n* add service_accounts ([facf4bd](https://github.com/indykite/jarvis-sdk-python/commit/facf4bd07e3e726e99e833c85d73d9754ac97c98))\n* update documentation ([9fe3b71](https://github.com/indykite/jarvis-sdk-python/commit/9fe3b71c05cf15cd2f14074bebae6837c665c16d))\n\n\n### Bug Fixes\n\n* return response in stream_records() ([6c4f09d](https://github.com/indykite/jarvis-sdk-python/commit/6c4f09daf2364c82efb48bce31f6aaea29b79f55))\n\n## [1.2.0](https://github.com/indykite/jarvis-sdk-python/compare/v1.1.0...v1.2.0) (2022-05-25)\n\n\n### Features\n\n* get digital twin with properties ([c515e56](https://github.com/indykite/jarvis-sdk-python/commit/c515e56e052ec8d06824eae39540653c5eaf0145))\n\n## [1.1.0](https://github.com/indykite/jarvis-sdk-python/compare/v1.0.2...v1.1.0) (2022-05-04)\n\n\n### Features\n\n* add enrich token method ([1298a5e](https://github.com/indykite/jarvis-sdk-python/commit/1298a5e3e0fbbd1fe5804a3ce4389145df0e9798))\n\n### [1.0.2](https://github.com/indykite/jarvis-sdk-python/compare/v1.0.1...v1.0.2) (2022-04-29)\n\n\n### Bug Fixes\n\n* add imports from root package ([9ea91f6](https://github.com/indykite/jarvis-sdk-python/commit/9ea91f63eaa490ce173d9a23243dd13ad5bbe6c6))\n* do not include tests in build files ([5d06b72](https://github.com/indykite/jarvis-sdk-python/commit/5d06b7280323cc5a81c1e5464e8504c1be0d3b8d))\n\n### [1.0.1](https://github.com/indykite/jarvis-sdk-python/compare/v1.0.0...v1.0.1) (2022-04-27)\n\n\n### Bug Fixes\n\n* add encoding when open files ([a5406ea](https://github.com/indykite/jarvis-sdk-python/commit/a5406ea86069992ae745a9a2891430634121e952))\n\n\n### Miscellaneous Chores\n\n* add missing __init__.py files ([c2d45b1](https://github.com/indykite/jarvis-sdk-python/commit/c2d45b10d8859ddbb711d1b550a94df20c5a0cc5))\n\n## [1.0.0](https://github.com/indykite/jarvis-sdk-python/compare/v1.0.0...v1.0.0) (2022-04-26)\n\n\n### Miscellaneous Chores\n\n* release 1.0.0 ([23325c5](https://github.com/indykite/jarvis-sdk-python/commit/23325c5c56234956d399f7426ff29a0082f4ae92))\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/indykite/jarvis-sdk-python",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jarvis-sdk-python",
    "package_url": "https://pypi.org/project/jarvis-sdk-python/",
    "platform": null,
    "project_url": "https://pypi.org/project/jarvis-sdk-python/",
    "project_urls": {
      "Homepage": "https://github.com/indykite/jarvis-sdk-python"
    },
    "release_url": "https://pypi.org/project/jarvis-sdk-python/1.5.0/",
    "requires_dist": [
      "authlib",
      "certifi",
      "grpcio",
      "google-api-python-client",
      "google-cloud-storage",
      "protobuf"
    ],
    "requires_python": "~=3.8",
    "summary": "A python SDK package for Indykite's jarvis system (with protobuf)",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16287810,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "633f1fe8b396a09eaec8595ac8b0b0868aa2e77deea18b04fa792ca284e2a056",
          "md5": "48b254111498b325594e96aa6d8b2b57",
          "sha256": "4806f6df5c6b79cb77eda54d029d0765e46df4fe35aefbfe23ad03d90efcb333"
        },
        "downloads": -1,
        "filename": "jarvis_sdk_python-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48b254111498b325594e96aa6d8b2b57",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.8",
        "size": 18606,
        "upload_time": "2022-04-26T18:19:12",
        "upload_time_iso_8601": "2022-04-26T18:19:12.906710Z",
        "url": "https://files.pythonhosted.org/packages/63/3f/1fe8b396a09eaec8595ac8b0b0868aa2e77deea18b04fa792ca284e2a056/jarvis_sdk_python-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cf4bbb25957197af9c349c2a619b1566960aeb977f9ae791767fadb7d3b3b18",
          "md5": "113d3ad73262687eaaaf2bf659d09396",
          "sha256": "80e499c1ca2a4a8cc481f7699d01cf6df7a1e0629240de77371d3d68cbc64e76"
        },
        "downloads": -1,
        "filename": "jarvis-sdk-python-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "113d3ad73262687eaaaf2bf659d09396",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.8",
        "size": 18597,
        "upload_time": "2022-04-26T18:19:14",
        "upload_time_iso_8601": "2022-04-26T18:19:14.669124Z",
        "url": "https://files.pythonhosted.org/packages/0c/f4/bbb25957197af9c349c2a619b1566960aeb977f9ae791767fadb7d3b3b18/jarvis-sdk-python-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ba24f76d484a1aa0fb2af2744c5b44412767ae3cecfa5d98a2e08abd6108b76",
          "md5": "73e85f9f0d0487e7e8729f86c28d3a54",
          "sha256": "8e7fcc90383f5e23d701767fd405ef093a12ea2d2f988fc614cdda6a05cd2e05"
        },
        "downloads": -1,
        "filename": "jarvis_sdk_python-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73e85f9f0d0487e7e8729f86c28d3a54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.8",
        "size": 97272,
        "upload_time": "2022-04-27T17:11:16",
        "upload_time_iso_8601": "2022-04-27T17:11:16.942502Z",
        "url": "https://files.pythonhosted.org/packages/7b/a2/4f76d484a1aa0fb2af2744c5b44412767ae3cecfa5d98a2e08abd6108b76/jarvis_sdk_python-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09a5f02e37088f79153b60b4808849c78696f607e0fe6ced3d7adbbd44e81cdd",
          "md5": "bda9b5be3b6296abd1f89f49906ee453",
          "sha256": "63ae1eb9151b6bb9444fa475dd6cc302a97d18d089601dacd199401f85b7e14a"
        },
        "downloads": -1,
        "filename": "jarvis-sdk-python-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bda9b5be3b6296abd1f89f49906ee453",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.8",
        "size": 86340,
        "upload_time": "2022-04-27T17:11:18",
        "upload_time_iso_8601": "2022-04-27T17:11:18.360243Z",
        "url": "https://files.pythonhosted.org/packages/09/a5/f02e37088f79153b60b4808849c78696f607e0fe6ced3d7adbbd44e81cdd/jarvis-sdk-python-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f6b4621af42f792cb42425dd73ea20fb7005692cd053c9ca811230b6eda1a34",
          "md5": "a8058c020cfb38d53800eedda5ed8f2e",
          "sha256": "a3f252e674d3013a618bef2ef11fdc358f5b400eb2e8af0c4a7460112b29a3e3"
        },
        "downloads": -1,
        "filename": "jarvis_sdk_python-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8058c020cfb38d53800eedda5ed8f2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.8",
        "size": 97505,
        "upload_time": "2022-04-29T11:00:03",
        "upload_time_iso_8601": "2022-04-29T11:00:03.200888Z",
        "url": "https://files.pythonhosted.org/packages/0f/6b/4621af42f792cb42425dd73ea20fb7005692cd053c9ca811230b6eda1a34/jarvis_sdk_python-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d626c8ab5d23243608a4d4af87354aa7804abe667cb75f7738f3449f81fe3a2",
          "md5": "e36c193f246f31a66d4aba83051fc77a",
          "sha256": "43e61ad666e4f030fbcf72d5e0c8baba9b1a05d9724384180bd18324a01d05c0"
        },
        "downloads": -1,
        "filename": "jarvis-sdk-python-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e36c193f246f31a66d4aba83051fc77a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.8",
        "size": 86782,
        "upload_time": "2022-04-29T11:00:05",
        "upload_time_iso_8601": "2022-04-29T11:00:05.357689Z",
        "url": "https://files.pythonhosted.org/packages/2d/62/6c8ab5d23243608a4d4af87354aa7804abe667cb75f7738f3449f81fe3a2/jarvis-sdk-python-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eba1a0d4f4a5bbdf5daa520e3def7a75bf3f8531361b933e3074823728cecf30",
          "md5": "2e86b435d0e2a5eaecb6770246cb36b8",
          "sha256": "21576066b9942a5aea717d082a72ed49d00a2cfed3d0b29327aa73a8b8e4086d"
        },
        "downloads": -1,
        "filename": "jarvis_sdk_python-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e86b435d0e2a5eaecb6770246cb36b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.8",
        "size": 99439,
        "upload_time": "2022-05-04T10:10:12",
        "upload_time_iso_8601": "2022-05-04T10:10:12.457644Z",
        "url": "https://files.pythonhosted.org/packages/eb/a1/a0d4f4a5bbdf5daa520e3def7a75bf3f8531361b933e3074823728cecf30/jarvis_sdk_python-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f62eb5c8fd466905d6a50611e4097a9b635863f15382e3f74c2d7ae975c1105",
          "md5": "99d312c8a2117d66f2c205618604307e",
          "sha256": "403716304d9efaa1f96a52fad7f32876e89fca9bc8dbfc782c994e8cc9505819"
        },
        "downloads": -1,
        "filename": "jarvis-sdk-python-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "99d312c8a2117d66f2c205618604307e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.8",
        "size": 88656,
        "upload_time": "2022-05-04T10:10:14",
        "upload_time_iso_8601": "2022-05-04T10:10:14.441199Z",
        "url": "https://files.pythonhosted.org/packages/4f/62/eb5c8fd466905d6a50611e4097a9b635863f15382e3f74c2d7ae975c1105/jarvis-sdk-python-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "765f903fe24523569294c58e104c49aeb153940cb1b2246d467ed6efe4ff01b6",
          "md5": "94787808d94b9f440d695e9517cf681b",
          "sha256": "e3dcd964becad2e33f870479ba84b74fde671d322f8651c623c44e03dd6adbd2"
        },
        "downloads": -1,
        "filename": "jarvis_sdk_python-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94787808d94b9f440d695e9517cf681b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.8",
        "size": 104436,
        "upload_time": "2022-05-25T07:26:40",
        "upload_time_iso_8601": "2022-05-25T07:26:40.656652Z",
        "url": "https://files.pythonhosted.org/packages/76/5f/903fe24523569294c58e104c49aeb153940cb1b2246d467ed6efe4ff01b6/jarvis_sdk_python-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1af13b76d413c198eb25ae418a00c71f753f46111455e761e3668636814ab20b",
          "md5": "9c29723e28019776efe41648945a0e15",
          "sha256": "bfe55910cd0959338d2772edf9d5da9a526c5c67658ae088812275a04fcf618f"
        },
        "downloads": -1,
        "filename": "jarvis-sdk-python-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9c29723e28019776efe41648945a0e15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.8",
        "size": 92024,
        "upload_time": "2022-05-25T07:26:42",
        "upload_time_iso_8601": "2022-05-25T07:26:42.531706Z",
        "url": "https://files.pythonhosted.org/packages/1a/f1/3b76d413c198eb25ae418a00c71f753f46111455e761e3668636814ab20b/jarvis-sdk-python-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d94f240242a6cbe4af7a55d75ce56e5a6ee537f7622c1a65223e1e31cda2295",
          "md5": "eccad0003957af56cb7088c0749639c0",
          "sha256": "2273da2cb00fec9f159db2e2804c486a39c280e872e1bba96ae88718e7e1a963"
        },
        "downloads": -1,
        "filename": "jarvis_sdk_python-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eccad0003957af56cb7088c0749639c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.8",
        "size": 135112,
        "upload_time": "2022-12-01T13:56:46",
        "upload_time_iso_8601": "2022-12-01T13:56:46.240415Z",
        "url": "https://files.pythonhosted.org/packages/0d/94/f240242a6cbe4af7a55d75ce56e5a6ee537f7622c1a65223e1e31cda2295/jarvis_sdk_python-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e9ffb7a117851e7fc1a501becae29f795d00ede688ff6de1b85fe149542334c",
          "md5": "d68ea0b421cc96979e30a9a8b73698b0",
          "sha256": "b7144bc6fe5f271f1013d26f21aabd7e7e233571bfcabf76f7f443da5becc99d"
        },
        "downloads": -1,
        "filename": "jarvis-sdk-python-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d68ea0b421cc96979e30a9a8b73698b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.8",
        "size": 117628,
        "upload_time": "2022-12-01T13:56:48",
        "upload_time_iso_8601": "2022-12-01T13:56:48.694472Z",
        "url": "https://files.pythonhosted.org/packages/8e/9f/fb7a117851e7fc1a501becae29f795d00ede688ff6de1b85fe149542334c/jarvis-sdk-python-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e70e33e336d8c04737bfe558c939fbddfba2ef9ba6c8c4f72cb41ac0497e3de0",
          "md5": "ab1bcafda654656e7df74f7cb5424586",
          "sha256": "da76c8b1bb6dc93553b100f0f87d3df1efcc1f8a6cb6436b4a752cc43d7ad8c8"
        },
        "downloads": -1,
        "filename": "jarvis_sdk_python-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab1bcafda654656e7df74f7cb5424586",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.8",
        "size": 155277,
        "upload_time": "2022-12-09T11:15:54",
        "upload_time_iso_8601": "2022-12-09T11:15:54.654374Z",
        "url": "https://files.pythonhosted.org/packages/e7/0e/33e336d8c04737bfe558c939fbddfba2ef9ba6c8c4f72cb41ac0497e3de0/jarvis_sdk_python-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "641796aa0dbfd5d9eaa306fd4549df19908f6d1826e28b43068fa13b174901b0",
          "md5": "cd6bae65845adf98586147a35b9af38a",
          "sha256": "9dc544d65b5e49344cdac64c84971a8b8d5fd1acb3774fd4cdc44776821b1894"
        },
        "downloads": -1,
        "filename": "jarvis-sdk-python-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cd6bae65845adf98586147a35b9af38a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.8",
        "size": 131726,
        "upload_time": "2022-12-09T11:15:56",
        "upload_time_iso_8601": "2022-12-09T11:15:56.838950Z",
        "url": "https://files.pythonhosted.org/packages/64/17/96aa0dbfd5d9eaa306fd4549df19908f6d1826e28b43068fa13b174901b0/jarvis-sdk-python-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea412628c18b4047fd907c2b3f10447d7189f7bb11d265adf85c730cdca1467c",
          "md5": "caaf482dbf850fff871b1eca3b10d039",
          "sha256": "b41527ccce582ea1686a8d73fe49daa63111bc241b8e513e75b0990bb0eed43f"
        },
        "downloads": -1,
        "filename": "jarvis_sdk_python-1.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "caaf482dbf850fff871b1eca3b10d039",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.8",
        "size": 155854,
        "upload_time": "2023-01-03T09:45:51",
        "upload_time_iso_8601": "2023-01-03T09:45:51.358942Z",
        "url": "https://files.pythonhosted.org/packages/ea/41/2628c18b4047fd907c2b3f10447d7189f7bb11d265adf85c730cdca1467c/jarvis_sdk_python-1.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3096baf0d6df30dfa1611494d29c3d0ba76d05f93c039211bcdff2df51b8dac2",
          "md5": "f87969b05eb06378e63fdccb5b65dccf",
          "sha256": "c4791d536e1fe9a2c0674f57290ad5e3c066fa69c9fb3228a50df7f512837231"
        },
        "downloads": -1,
        "filename": "jarvis-sdk-python-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f87969b05eb06378e63fdccb5b65dccf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.8",
        "size": 132429,
        "upload_time": "2023-01-03T09:45:53",
        "upload_time_iso_8601": "2023-01-03T09:45:53.350056Z",
        "url": "https://files.pythonhosted.org/packages/30/96/baf0d6df30dfa1611494d29c3d0ba76d05f93c039211bcdff2df51b8dac2/jarvis-sdk-python-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea412628c18b4047fd907c2b3f10447d7189f7bb11d265adf85c730cdca1467c",
        "md5": "caaf482dbf850fff871b1eca3b10d039",
        "sha256": "b41527ccce582ea1686a8d73fe49daa63111bc241b8e513e75b0990bb0eed43f"
      },
      "downloads": -1,
      "filename": "jarvis_sdk_python-1.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "caaf482dbf850fff871b1eca3b10d039",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.8",
      "size": 155854,
      "upload_time": "2023-01-03T09:45:51",
      "upload_time_iso_8601": "2023-01-03T09:45:51.358942Z",
      "url": "https://files.pythonhosted.org/packages/ea/41/2628c18b4047fd907c2b3f10447d7189f7bb11d265adf85c730cdca1467c/jarvis_sdk_python-1.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3096baf0d6df30dfa1611494d29c3d0ba76d05f93c039211bcdff2df51b8dac2",
        "md5": "f87969b05eb06378e63fdccb5b65dccf",
        "sha256": "c4791d536e1fe9a2c0674f57290ad5e3c066fa69c9fb3228a50df7f512837231"
      },
      "downloads": -1,
      "filename": "jarvis-sdk-python-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f87969b05eb06378e63fdccb5b65dccf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.8",
      "size": 132429,
      "upload_time": "2023-01-03T09:45:53",
      "upload_time_iso_8601": "2023-01-03T09:45:53.350056Z",
      "url": "https://files.pythonhosted.org/packages/30/96/baf0d6df30dfa1611494d29c3d0ba76d05f93c039211bcdff2df51b8dac2/jarvis-sdk-python-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}