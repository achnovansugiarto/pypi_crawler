{
  "info": {
    "author": "Hong Zhang (mt1022)",
    "author_email": "gxelab@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# PSite\n\n\n[![DOI](https://zenodo.org/badge/474568909.svg)](https://zenodo.org/badge/latestdoi/474568909)\n\n`PSite` is a python package that predicts P-site offsets for footprints generated in ribosome profiling using a Gradient Boosting Trees (GBT) model trained with footprints around both annotated start and stop codons. `PSite` can report estimated P-site offsets in two manners:\n\n- append a `PS` tag to each original alignment in `SAM` or `BAM` format, without any other modifications;\n- output a new `BAM` file of the alignments of P-site locations only;\n\nTo demonstrate the usage of the `PS` tag, `PSite` also has a `coverage` module that performs genome-wide calculation of P-site coverage of ribosome footprints at nucleotide resolution.\n\n### Dependency\n- `numpy` >= 1.21.2\n- `pandas` >= 1.3.4\n- `biopython` >= 1.79\n- `scikit-learn` >= 1.1.1\n- `pysam` >= 0.17.0\n- `pyBigWig` >= 0.3.18\n- `click` >= 8.1.2\n- `seaborn` >= 0.11.0\n\n\n### Install and uninstall\nTo install `PSite`, run\n```bash\npip install psite\n```\n\nAlternatively, download the package [tarball](https://github.com/gxelab/psite/releases) from the release page and run\n```\npip install psite-version-py3-none-any.whl\n```\n\nTo uninstall it, simply run\n```\npip uninstall psite\n```\n\n### Build distributions from source\nRun the following command in the source directory\n```bash\npython3 -m build\n```\n\n---------------------------------------\n\n### Usage\n`PSite` is designed to be used from the command line on Unix-like operating systems such as Linux or macOS.\n\n```bash\n$ psite -h\nUsage: psite [OPTIONS] COMMAND [ARGS]...\n\n  main interface\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  coverage  calculate the coverage for plus strand and minus strand...\n  pbam      generate bam with only P-site regions\n  predict   load pre-trained model and predict P-site offsets\n  setp      set global fixed P-site offset tag\n  train     train a model for P-site offset prediction\n```\n\n#### `train`\nThe core module that trains the GBT model for P-site offset prediction. It requires transcriptome alignments (`PATH_BAM`) and the corresponding sequences of all transcripts (`PATH_REF`). The required bam can be generated by mapping footprints to the reference genome using [STAR](https://github.com/alexdobin/STAR) and output transcriptome alignments with parameter `--quantMode TranscriptomeSAM`. The trained model is saved in `pickle` format for later use.\n\n```bash\n$ psite train -h\nUsage: psite train [OPTIONS] PATH_REF PATH_BAM OUTPUT_PREFIX PATH_TXINFO\n\n  train a model for P-site offset prediction\n\n  path_ref     : reference transcriptome (fasta) matching the bam\n  path_bam     : alignments of RPFs to reference transcriptome\n  output_prefix: output prefix of fitted models and logs\n  path_txinfo  : transcriptome annotation\n\nOptions:\n  -t, --type_rep [longest|principal|kallisto|salmon]\n                                  type of representative transcripts\n                                  [default: longest]\n  -e, --path_exp TEXT             path of transcript expression quant results\n  -i, --ignore_txversion          ignore transcript version in\n                                  \".\\d+\" format  [default: False]\n  -n, --nts INTEGER               flanking nucleotides to consider at each side\n                                  [default: 3]\n  -f, --frac FLOAT                fraction of alignments for training (for\n                                  large datasets)  [default: 1.0]\n  --offset_min INTEGER            lower bound of distance between RPF 5p and\n                                  start codon  [default: 10]\n  --offset_max INTEGER            upper bound of distance between RPF 5p and\n                                  start codon  [default: 14]\n  -d, --max_depth INTEGER         max depth of trees  [default: 3]\n  -m, --min_samples_split INTEGER\n                                  min number of alignments required to split\n                                  an internal node  [default: 6]\n  -k, --keep                      whether to keep intermediate results\n                                  [default: False]\n  -h, --help                      Show this message and exit.  [default:\n                                  False]\n```\n\n#### `predict`\nThis module predicts P-site for each alignment using a pre-trained model and append a `PS` tag (for \"P-site\") to the original alignment. The input can be either genomic alignments or transcriptomic alignments.\n\n```bash\n$ psite predict -h\nUsage: psite predict [OPTIONS] PATH_REF PATH_BAM PATH_MODEL PATH_OUT\n\n  load pre-trained model and predict P-site offsets\n\n  path_ref   : reference transcriptome (fasta) matching the bam\n  path_bam   : alignments of RPFs to reference transcriptome\n  path_model : path to save the fitted model\n  path_out   : output path of bam with PS (for P-site) tag\n\nOptions:\n  -i, --ignore_txversion    ignore transcript version in \".\\d+\"\n                            format  [default: False]\n  -l, --rlen_min INTEGER    lower bound for mapped read length\n  -u, --rlen_max INTEGER    upper bound for mapped read length\n  -c, --chunk_size INTEGER  chunk size for prediction batch  [default: 100000]\n  -h, --help                Show this message and exit.  [default: False]\n```\n\n#### `pbam`\nThis module predicts P-site for each alignment and keeps only the first nucleotide after excluding the P-site offset. Thus, each alignment in the output contains a single site. The input can be either genomic alignments or transcriptomic alignments.\n\n```bash\n$ psite pbam -h\nUsage: psite pbam [OPTIONS] PATH_REF PATH_BAM PATH_MODEL PATH_OUT\n\n  generate bam with only P-site regions\n\n  path_ref   : reference transcriptome (fasta) matching the bam\n  path_bam   : alignments of RPFs to reference transcriptome\n  path_model : path to save the fitted model\n  path_out   : output path of bam with P-site regions only\n\nOptions:\n  -f, --out_format [bam|sam]  P-site alignment output format  [default: bam]\n  -i, --ignore_txversion      ignore transcript version in \".\\d+\"\n                              format  [default: False]\n  -l, --rlen_min INTEGER      lower bound for mapped read length\n  -u, --rlen_max INTEGER      upper bound for mapped read length\n  -c, --chunk_size INTEGER    chunk size for prediction batch  [default:\n                              100000]\n  -h, --help                  Show this message and exit.  [default: False]\n```\n\n#### `coverage`\nThis module calculates the genome or transcriptome-wide coverage of RPF P-sites using the `PS` tag generatd by `predict` module.\n\n```bash\n$ psite coverage -h\nUsage: psite coverage [OPTIONS] PATH_BAM PREFIX\n\n  calculate the coverage for plus strand and minus strand separately\n\n  path_bam: sorted alignment bam file with the PS tag (for P-site offset)\n  prefix  : output prefix of P-site coverage tracks in bigWig format\n\nOptions:\n  -l, --rlen_min INTEGER  lower bound for RPF mapped length  [default: 25]\n  -u, --rlen_max INTEGER  upper bound for mapped read length  [default: 40]\n  -q, --mapq_min INTEGER  minimum mapping quality  [default: 10]\n  -i, --ignore_supp       whether to ignore supplementary alignments\n                          [default: False]\n  -h, --help              Show this message and exit.  [default: False]\n```\n\n#### `setp`\nThis module sets a global fixed value for the \"PS\" tag.\n```bash\n$ psite setp -h\nUsage: psite setp [OPTIONS] PATH_BAM PATH_OUT\n\n  set global fixed P-site offset tag\n\n  path_bam   : alignments of RPFs to reference transcriptome\n  path_out   : output path of bam with PS (for P-site) tag\n\nOptions:\n  -l, --rlen_min INTEGER     lower bound for mapped read length  [default: 27]\n  -u, --rlen_max INTEGER     upper bound for mapped read length  [default: 35]\n  -n, --nucleotides INTEGER  fixed global offset value  [default: 12]\n  -h, --help                 Show this message and exit.\n```\n\n---------------------------------------\n\n### An example workflow to use PSite\n\n##### Prepare input files\nAfter trimming adapters and optionally removing reads derived from rRNAs or tRNAs, map ribosomal footprints to the reference genome with STAR:\n\n```bash\nSTAR --runThreadN 16 --outFilterType BySJout --outFilterMismatchNmax 2 --genomeDir genome_index --readFilesIn sample_RPF.fq.gz  --outFileNamePrefix sample_RPF --readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --quantMode TranscriptomeSAM --outFilterMultimapNmax 1 --outFilterMatchNmin 16 --alignEndsType EndToEnd --outSAMattributes NH HI AS nM NM MD\n```\n\nThe parameter `--quantMode TranscriptomeSAM` will instruct STAR to translate the genomic alignments into transcript alignments, which will be used to train the GBT model. Since many uniquely mapped reads in genomic alignments will become multi-mapping reads in transcriptome alignment due to the presence of alternative transcript isoforms, `--outFilterMultimapNmax 1` parameter is included to exlude only multi-mapping reads in genomic alignments.\n\nPSite needs to know the position of annotated start codons and stop codons of all protein-coding transcripts, which can be obtained with the helper scripts located in the `scripts` directory:\n```bash\nRscript --vanilla scripts/extract_txinfo_ensembl.R gene_annotations.gtf txinfo.tsv\n```\n\nOnly a represent isoform is used in the analysis for a gene with multiple transcript isoforms. By default, PSite uses the longest transcript. However, a more reasonable choice is the most abundant isoform. Therefore, if the information of transcript abundance as calculated by [kallisto](https://pachterlab.github.io/kallisto/) or [salmon](https://salmon.readthedocs.io/en/latest/salmon.html) is provided, PSite can automatically determine the most abundant transcript isoform for later use:\n```bash\nsalmon quant -p4 --seqBias --gcBias --posBias -l A -i salmon_index -r sample_RNA.fq.gz -o salmon_results\n```\n\n##### Run PSite\nThe first step is to train a GBT model with `train` module with the transcriptome bam. Then, the fitted model will be saved in [pickle](https://docs.python.org/3/library/pickle.html) format.\n\n```bash\npsite train -i -t salmon -e salmon_results/quant.sf \\\n    all_transcripts.fa sample_RPF.Aligned.toTranscriptome.out.bam output_prefix txinfo.tsv\n```\n\nModel training is slow for large datasets. `-f` parameter can be used to select only a subset of alignments for training. This can significantly improve speed and reduce memory usage while maintaining similar accuracy.\n\nOnce the model is successfully trained, it can be used to predict P-site offsets for ribosome footprints that are mapped to the reference genome or reference transcriptomes. It should be noted that if you use genome bam for prediction, genomic fasta should be used as input, and vice versa.\n\n```bash\n# with transcriptomic bam\npsite predict -i all_transcripts.fa sample_RPF.Aligned.toTranscriptome.out.bam output_prefix.gbt.pickle sample_RPF.transcriptome.tag.bam\n\n# with genomic bam\npsite predict -i genome.fa sample_RPF.Aligned.sortedByCoord.out.bam output_prefix.gbt.pickle sample_RPF.genome.tag.bam\n```\nexample output:\n\n```\nr1\t16\t2L\t10716\t255\t29M\t*\t0\t0\tTACAATTTATTAAATGGGGACGGACCAAT\tIIIIIIIIIIIIIIIIIIIIIHIIDDDDD\tNH:i:1\tHI:i:1\tAS:i:28\tnM:i:0\tNM:i:0\tMD:Z:29\tjM:B:c,-1\tjI:B:i,-1\tPS:i:10\nr2\t16\t2L\t10836\t255\t33M\t*\t0\t0\tTGTCAACTTTTATCCTTTGTACCTTTCTACAAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIDDDDD\tNH:i:1\tHI:i:1\tAS:i:32\tnM:i:0\tNM:i:0\tMD:Z:33\tjM:B:c,-1\tjI:B:i,-1\tPS:i:12\nr3\t16\t2L\t10891\t255\t30M\t*\t0\t0\tCGGGTAAAGGGTATAAAGTCACTACGCGAA\tGGD1HEC?HHIHHGF<1?IHHDHHF0@DD0\tNH:i:1\tHI:i:1\tAS:i:29\tnM:i:0\tNM:i:0\tMD:Z:30\tjM:B:c,-1\tjI:B:i,-1\tPS:i:12\nr4\t16\t2L\t11027\t255\t31M\t*\t0\t0\tTTTCTGTTTGTATGTAAATCGCGTTTAATTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIDDDDD\tNH:i:1\tHI:i:1\tAS:i:30\tnM:i:0\tNM:i:0\tMD:Z:31\tjM:B:c,-1\tjI:B:i,-1\tPS:i:12\nr5\t16\t2L\t11073\t255\t32M\t*\t0\t0\tCGTTCCTATTTTGCTGTCCCCGTTCGATTTTT\tIHHIIIIIIIIIIIIIIHIIIIHIIIIDDDDD\tNH:i:1\tHI:i:1\tAS:i:31\tnM:i:0\tNM:i:0\tMD:Z:32\tjM:B:c,-1\tjI:B:i,-1\tPS:i:12\nr6\t16\t2L\t11077\t255\t29M\t*\t0\t0\tCCTATTTTGCTGTCCCCGTTCGATTTTTA\t@CC?FCD<<CG</H@HDHHHIHCF0?@@D\tNH:i:1\tHI:i:1\tAS:i:28\tnM:i:0\tNM:i:0\tMD:Z:29\tjM:B:c,-1\tjI:B:i,-1\tPS:i:12\nr7\t16\t2L\t11132\t255\t31M\t*\t0\t0\tAAATTACATCAGGACTAGTACTCGTTTGCGT\tIIIHIIHIIIIIHIHIIIHHIGIIIIDDDBD\tNH:i:1\tHI:i:1\tAS:i:30\tnM:i:0\tNM:i:0\tMD:Z:31\tjM:B:c,-1\tjI:B:i,-1\tPS:i:11\nr8\t16\t2L\t11138\t255\t32M\t*\t0\t0\tCATCAGGACTAGTACTCGTTTGCGTCGTATTT\t1HHHIIHIHGIHIIIIIIHHIIHGGHHDDD@@\tNH:i:1\tHI:i:1\tAS:i:31\tnM:i:0\tNM:i:0\tMD:Z:32\tjM:B:c,-1\tjI:B:i,-1\tPS:i:12\nr9\t16\t2L\t11138\t255\t29M\t*\t0\t0\tCATCAGGACTAGTACTCGTTTGCGTCGTA\tCFEGFHFCIHIHIIIHDIGIIHCHD<BB?\tNH:i:1\tHI:i:1\tAS:i:28\tnM:i:0\tNM:i:0\tMD:Z:29\tjM:B:c,-1\tjI:B:i,-1\tPS:i:10\nr10\t16\t2L\t11140\t255\t32M\t*\t0\t0\tTCAGGACTAGTACTCGTTTGCGTCGTATTTCT\tFCCHHCHIHIHHE0HHHDECHIH?IHG@0@D@\tNH:i:1\tHI:i:1\tAS:i:31\tnM:i:0\tNM:i:0\tMD:Z:32\tjM:B:c,-1\tjI:B:i,-1\tPS:i:13\n```\n\nIt is also possible to output alignments with P-site locations only, which can be used for downstream applications such as translated ORF prediction with [RibORF](https://github.com/zhejilab/RibORF).\n\n```bash\npsite pbam -f sam genome.fa sample_RPF.Aligned.sortedByCoord.out.bam output_prefix.gbt.pickle sample_RPF.genome.psite.sam\n```\n\nHere are a few lines from an example output:\n\n```\nr1      16      1       531180  255     1M      *       0       0       G       J       NH:i:1  HI:i:1  AS:i:30 nM:i:0  NM:i:0  MD:Z:31\nr2      16      1       531180  255     1M      *       0       0       G       J       NH:i:1  HI:i:1  AS:i:30 nM:i:0  NM:i:0  MD:Z:31\nr3      0       1       629921  255     1M      *       0       0       A       J       NH:i:1  HI:i:1  AS:i:31 nM:i:1  NM:i:1  MD:Z:0C33\nr4      0       1       629921  255     1M      *       0       0       A       J       NH:i:1  HI:i:1  AS:i:31 nM:i:1  NM:i:1  MD:Z:0C33\nr5      0       1       629922  255     1M      *       0       0       T       J       NH:i:1  HI:i:1  AS:i:32 nM:i:0  NM:i:0  MD:Z:33\nr6      0       1       629922  255     1M      *       0       0       T       J       NH:i:1  HI:i:1  AS:i:29 nM:i:1  NM:i:1  MD:Z:0C31\nr7      0       1       629922  255     1M      *       0       0       T       J       NH:i:1  HI:i:1  AS:i:29 nM:i:1  NM:i:1  MD:Z:0C31\nr8      0       1       629922  255     1M      *       0       0       T       J       NH:i:1  HI:i:1  AS:i:29 nM:i:1  NM:i:1  MD:Z:0C31\nr9      0       1       629922  255     1M      *       0       0       T       J       NH:i:1  HI:i:1  AS:i:32 nM:i:0  NM:i:0  MD:Z:33\nr10     0       1       629922  255     1M      *       0       0       T       J       NH:i:1  HI:i:1  AS:i:30 nM:i:1  NM:i:1  MD:Z:0C32\n```\n\nPSite also has a module for fast calculation of genome or transcriptome P-site coverage of ribosome footprints. The alignments should be sorted by coordinates before coverage calculation.\n```bash\n# sort bam\nsamtools sort -@ 8 -O bam -o sample_RPF.genome.tag.sorted.bam sample_RPF.genome.tag.bam\n\n# calculate coverage\npsite coverage sample_RPF.genome.tag.sorted.bam sample_RPF.psite_cov\n```\n\nNEW: a complete example of how to run PSite and use PSite output for downstream analyses is available from the [repository associated with PSite manuscript](https://github.com/gxelab/psite_analysis).\n\n---------------------------------------\n\n#### Other information\nPlease use the [issues](https://github.com/gxelab/psite/issues) panel for questions related to `PSite`, bug reports, or feature requests. If you find `PSite` helpful, please cite it with the zenodo doi: [10.5281/zenodo.7046270](https://doi.org/10.5281/zenodo.7046270).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gxelab/psite",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "psite",
    "package_url": "https://pypi.org/project/psite/",
    "platform": null,
    "project_url": "https://pypi.org/project/psite/",
    "project_urls": {
      "Bug Tracker": "https://github.com/gxelab/psite/issues",
      "Homepage": "https://github.com/gxelab/psite"
    },
    "release_url": "https://pypi.org/project/psite/0.1.5/",
    "requires_dist": [
      "numpy (>=1.21.2)",
      "pandas (>=1.3.4)",
      "scikit-learn (>=1.1.1)",
      "biopython (>=1.79)",
      "pysam (>=0.17.0)",
      "click (>=8.1.2)",
      "pyBigWig (>=0.3.18)",
      "seaborn (>=0.11.0)"
    ],
    "requires_python": ">=3.9",
    "summary": "Model-based inference of P-site offsets",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17076017,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f955cfdb57c892fdc5d94eae89dd6766fdaae5243ef6488e57ef42087b666c03",
          "md5": "e8d960106df5165cfa494efb34e1a490",
          "sha256": "216b977505699ba7f0729af8d4f2969480ab7b608a55fbf80fb8111d7e40a937"
        },
        "downloads": -1,
        "filename": "psite-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8d960106df5165cfa494efb34e1a490",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 18011,
        "upload_time": "2023-02-06T15:56:32",
        "upload_time_iso_8601": "2023-02-06T15:56:32.318751Z",
        "url": "https://files.pythonhosted.org/packages/f9/55/cfdb57c892fdc5d94eae89dd6766fdaae5243ef6488e57ef42087b666c03/psite-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "621741e8209e767b6a5505faeeea2eaffcc0a409d899841153256df92fbc77a3",
          "md5": "7120057d232eb5ff1b837a1686568c99",
          "sha256": "86e95119187798d9632df94fa4c4321bd3663e8c050b309e19c416454af2d0ce"
        },
        "downloads": -1,
        "filename": "psite-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7120057d232eb5ff1b837a1686568c99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 18365,
        "upload_time": "2023-02-06T15:56:35",
        "upload_time_iso_8601": "2023-02-06T15:56:35.738654Z",
        "url": "https://files.pythonhosted.org/packages/62/17/41e8209e767b6a5505faeeea2eaffcc0a409d899841153256df92fbc77a3/psite-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26bfa52217bc44d4a0c5ad4d32864693660cf8c742b95a891c8da1954691b96a",
          "md5": "2b2967e2060e8bfbfd3ac2f7a27fe344",
          "sha256": "7ad45c6ce973767d6ad1541d6897558cf7fc7d85e464a833a7ee975e8408463d"
        },
        "downloads": -1,
        "filename": "psite-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b2967e2060e8bfbfd3ac2f7a27fe344",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 18119,
        "upload_time": "2023-02-06T15:56:33",
        "upload_time_iso_8601": "2023-02-06T15:56:33.838880Z",
        "url": "https://files.pythonhosted.org/packages/26/bf/a52217bc44d4a0c5ad4d32864693660cf8c742b95a891c8da1954691b96a/psite-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98d726422c00658bd2ff7f60106fd6b094dacdafcfb861e731f62a0e03e70701",
          "md5": "8adfaa850fd93c1ecc6a8817547d7ef3",
          "sha256": "99c31ac7ce147cddcc9bc239c0c42d89b96024aa9f8ab831b016fa25cafdfdfb"
        },
        "downloads": -1,
        "filename": "psite-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8adfaa850fd93c1ecc6a8817547d7ef3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 18645,
        "upload_time": "2023-02-06T15:56:37",
        "upload_time_iso_8601": "2023-02-06T15:56:37.350546Z",
        "url": "https://files.pythonhosted.org/packages/98/d7/26422c00658bd2ff7f60106fd6b094dacdafcfb861e731f62a0e03e70701/psite-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f68da43ad09de38ae933f8508304caba16bef07f7f0e362eed83a6844bbfb63",
          "md5": "edca34e921608fc15d228aa275ca8ae2",
          "sha256": "4764e130d5bbfd258e8c82b5875e4111803d5ed041a4aedf1be1e023b2ca16db"
        },
        "downloads": -1,
        "filename": "psite-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edca34e921608fc15d228aa275ca8ae2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 18204,
        "upload_time": "2023-02-07T02:01:05",
        "upload_time_iso_8601": "2023-02-07T02:01:05.396250Z",
        "url": "https://files.pythonhosted.org/packages/2f/68/da43ad09de38ae933f8508304caba16bef07f7f0e362eed83a6844bbfb63/psite-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "414f538d5039fde6e29160bd1ba1cf716855f8f01c756dcfed31186348881f4f",
          "md5": "87fa62db383f408e6ca19bc34f122a19",
          "sha256": "50079eb41e9720b53fd3b571e2d30a40f582b339730d16be5c88ce9494a2293e"
        },
        "downloads": -1,
        "filename": "psite-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "87fa62db383f408e6ca19bc34f122a19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 18742,
        "upload_time": "2023-02-07T02:01:07",
        "upload_time_iso_8601": "2023-02-07T02:01:07.488892Z",
        "url": "https://files.pythonhosted.org/packages/41/4f/538d5039fde6e29160bd1ba1cf716855f8f01c756dcfed31186348881f4f/psite-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6bd1dd8a77e16774153305f90845228cd3d969f0377b48c709486bec4ff4161",
          "md5": "67d045d508615898710682eb04750d05",
          "sha256": "5fa4ecc151677a5629acb49425adc249263892d97e1e27afeeeaa5d8adfabf26"
        },
        "downloads": -1,
        "filename": "psite-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67d045d508615898710682eb04750d05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 18513,
        "upload_time": "2023-02-28T01:51:26",
        "upload_time_iso_8601": "2023-02-28T01:51:26.480628Z",
        "url": "https://files.pythonhosted.org/packages/b6/bd/1dd8a77e16774153305f90845228cd3d969f0377b48c709486bec4ff4161/psite-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c48a7cf7d79d111e2a69f0c7845d905e6c0e1b6e2c9f7d6c4334106c8dc341d",
          "md5": "6ca2bcdaf92c1987c98c41c444ca74fe",
          "sha256": "00c0bfe589063faf7454edc22462a1410bfe227e51017a36cca0c21ef9a70e2b"
        },
        "downloads": -1,
        "filename": "psite-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6ca2bcdaf92c1987c98c41c444ca74fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 19039,
        "upload_time": "2023-02-28T01:51:28",
        "upload_time_iso_8601": "2023-02-28T01:51:28.810040Z",
        "url": "https://files.pythonhosted.org/packages/9c/48/a7cf7d79d111e2a69f0c7845d905e6c0e1b6e2c9f7d6c4334106c8dc341d/psite-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6bd1dd8a77e16774153305f90845228cd3d969f0377b48c709486bec4ff4161",
        "md5": "67d045d508615898710682eb04750d05",
        "sha256": "5fa4ecc151677a5629acb49425adc249263892d97e1e27afeeeaa5d8adfabf26"
      },
      "downloads": -1,
      "filename": "psite-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67d045d508615898710682eb04750d05",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 18513,
      "upload_time": "2023-02-28T01:51:26",
      "upload_time_iso_8601": "2023-02-28T01:51:26.480628Z",
      "url": "https://files.pythonhosted.org/packages/b6/bd/1dd8a77e16774153305f90845228cd3d969f0377b48c709486bec4ff4161/psite-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c48a7cf7d79d111e2a69f0c7845d905e6c0e1b6e2c9f7d6c4334106c8dc341d",
        "md5": "6ca2bcdaf92c1987c98c41c444ca74fe",
        "sha256": "00c0bfe589063faf7454edc22462a1410bfe227e51017a36cca0c21ef9a70e2b"
      },
      "downloads": -1,
      "filename": "psite-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "6ca2bcdaf92c1987c98c41c444ca74fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 19039,
      "upload_time": "2023-02-28T01:51:28",
      "upload_time_iso_8601": "2023-02-28T01:51:28.810040Z",
      "url": "https://files.pythonhosted.org/packages/9c/48/a7cf7d79d111e2a69f0c7845d905e6c0e1b6e2c9f7d6c4334106c8dc341d/psite-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}