{
  "info": {
    "author": "Dhatim",
    "author_email": "contact@dhatim.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": ".. image:: https://badge.fury.io/py/liccheck.svg\n    :target: https://badge.fury.io/py/liccheck\n.. image:: https://github.com/dhatim/python-license-check/workflows/build/badge.svg\n    :target: https://github.com/dhatim/python-license-check/actions\n.. image:: https://codecov.io/gh/dhatim/python-license-check/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/dhatim/python-license-check\n\nPython License Checker\n======================\n\nCheck python packages listed in a ``requirements.txt`` file and report license issues.\n\nAbout\n=====\n\nYou can define a list of authorized licenses, unauthorized licenses and authorized packages.\n\nThe tool will check the ``requirements.txt`` file, check packages and their\ndependencies and return an error if some packages are not compliant\nagainst the given strategy.\n\nThe tool has 3 levels of checks to select from:\n\nStandard (default):\n    A package is considered as compliant when at least one of its licenses is\n    in the authorized license list, or if the package is in the list of\n    authorized packages.\n\nCautious:\n    Same as *Standard*, but a package is **not** considered compliant when one\n    or more of its licenses is in the unauthorized license list, even if it\n    also has a license in the authorized license list. A package is still\n    compliant if present in the authorized packages list.\n\nParanoid:\n    All licenses listed for a package must be in the authorised license list\n    for the package to be considered compliant. A package is still\n    compliant if present in the authorized packages list.\n\nAssumption\n==========\nThe tool requires to be installed in the same python (virtual) environment as the packages. This, because it uses\n``pkg_resources`` to access the packages resources and thus, their licenses information.\n\nHow to install\n==============\n\n::\n\n\t$ pip install liccheck\n\n\nHow to use\n==========\n\n``liccheck`` will read the ``requirements.txt`` and verify compliance of packages against a strategy defined in the ``ini`` file.\nIf the requirements file is not specified on the command line, it will search for ``requirements.txt`` in the current folder.\nYou have to setup an ``ini`` file with an authorized license list, unauthorized license list and authorized package list. The packages from your ``requirements.txt`` need to all be installed in the same python environment/virtualenv as ``liccheck``.\nIf the ``ini`` file is not specified on the command line, it will search for ``liccheck.ini`` in the current folder.\n\nHere is an example of a ``liccheck.ini`` file:\n::\n\n\t# Authorized and unauthorized licenses in LOWER CASE\n\t[Licenses]\n\tauthorized_licenses:\n\t\tbsd\n\t\tnew bsd\n\t\tbsd license\n\t\tnew bsd license\n\t\tsimplified bsd\n\t\tapache\n\t\tapache 2.0\n\t\tapache software license\n\t\tgnu lgpl\n\t\tlgpl with exceptions or zpl\n\t\tisc license\n\t\tisc license (iscl)\n\t\tmit\n\t\tmit license\n\t\tpython software foundation license\n\t\tzpl 2.1\n\n\tunauthorized_licenses:\n\t\tgpl v3\n\n\t[Authorized Packages]\n\t# Python software license (see http://zesty.ca/python/uuid.README.txt)\n\tuuid: 1.30\n\nNote: versions of authorized packages can be defined using `PEP-0440 version specifiers <https://www.python.org/dev/peps/pep-0440/#version-specifiers>`_, such as ``>=1.3,<1.4``. The implementation uses the nice package `semantic_version <https://pypi.org/project/semantic_version/>`_.\n\nFor demo purpose, let's say your ``requirements.txt`` file contains this:\n::\n\n\tFlask>=0.12.1\n\tflask_restful\n\tjsonify\n\tpsycopg2>=2.7.1\n\tnose\n\tscipy\n\tscikit-learn\n\tpandas\n\tnumpy\n\targparse\n\tuuid\n\tsqlbuilder\n\tproboscis\n\tpyyaml>=3.12\n\nThe execution will output this:\n::\n\n    $ liccheck -s my_strategy.ini -r my_project/required.txt\n    gathering licenses...23 packages and dependencies.\n    check forbidden packages based on licenses...none\n    check authorized packages based on licenses...19 packages.\n    check authorized packages...4 packages.\n    check unknown licenses...none\n\nIf some dependencies are unknown or are not matching the strategy, the output will be something like:\n::\n\n    $ liccheck -s my_strategy.ini -r my_project/requirements.txt\n\tgathering licenses...32 packages and dependencies.\n\tcheck forbidden packages based on licenses...1 forbidden packages :\n\t    Unidecode (0.4.21) : GPL ['GNU General Public License v2 or later (GPLv2+)']\n\t      dependency:\n\t          Unidecode << python-slugify << yoyo-migrations\n\n\tcheck authorized packages based on licenses...24 packages.\n\tcheck authorized packages...6 packages.\n\tcheck unknown licenses...1 unknown packages :\n\t    feedparser (5.2.1) : UNKNOWN []\n\t      dependency:\n\t          feedparser\n\nAlso supports pyproject.toml like:\n::\n\n    [project]\n    dependencies = [\n        \"Flask>=0.12.1\",\n        \"flask_restful\",\n        \"jsonify\",\n        \"psycopg2>=2.7.1\",\n        \"nose\",\n        \"scipy\",\n        \"scikit-learn\",\n        \"pandas\",\n        \"numpy\",\n        \"argparse\",\n        \"uuid\",\n        \"sqlbuilder\",\n        \"proboscis\",\n        \"pyyaml>=3.12\",\n    ]\n\n    [project.optional-dependencies]\n    test = [\n        \"pytest>=3.6.3\",\n    ]\n\n    [tool.liccheck]\n    authorized_licenses = [\n        \"bsd\",\n        \"new bsd\",\n        \"bsd license\",\n        \"new bsd license\",\n        \"simplified bsd\",\n        \"apache\",\n        \"apache 2.0\",\n        \"apache software license\",\n        \"gnu lgpl\",\n        \"lgpl with exceptions or zpl\",\n        \"isc license\",\n        \"isc license (iscl)\",\n        \"mit\",\n        \"mit license\",\n        \"python software foundation license\",\n        \"zpl 2.1\",\n    ]\n    unauthorized_licenses = [\n        \"gpl v3\",\n    ]\n    # strategy_ini_file = \"./liccheck.ini\"\n    # level = \"STANDARD\"\n    # requirement_txt_file = \"./requirements.txt\" # ignored if dependencies or optional_dependencies are defined\n    # reporting_txt_file = \"path/to/reporting.txt file\" # by default is None\n    # no_deps = false\n    dependencies = true # to load [project.dependencies]\n    optional_dependencies = [\"test\"] # to load extras from [project.optional-dependencies]\n\n    [tool.liccheck.authorized_packages]\n    uuid = 1.30\n\nUsing liccheck with pre-commit\n==============================\n\nAdd this to your .pre-commit-config.yaml:\n::\n\n    - repo: https://github.com/dhatim/python-license-check\n      rev: master\n      hooks:\n      - id: liccheck\n        language: system\n\nContributing\n============\n\nTo run the tests:\n::\n\n    $ tox -p all\n\nLicensing\n=========\n\n-  See `LICENSE <LICENSE>`__",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dhatim/python-license-check",
    "keywords": "license check build tool",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "liccheck-regex",
    "package_url": "https://pypi.org/project/liccheck-regex/",
    "platform": null,
    "project_url": "https://pypi.org/project/liccheck-regex/",
    "project_urls": {
      "Homepage": "https://github.com/dhatim/python-license-check"
    },
    "release_url": "https://pypi.org/project/liccheck-regex/0.7.4/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "Check python packages from requirement.txt and report issues",
    "version": "0.7.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15972144,
  "releases": {
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2708da021ec4edcc62be987a6af01756aa0bda87a55c2fe77490c92b8f03112",
          "md5": "11c89a7ee1d911ad83b683c7545539ba",
          "sha256": "a77cdea3696185aa5d9dab0706335df1bfa8ff4f5b9647138e4c02ed8d10943b"
        },
        "downloads": -1,
        "filename": "liccheck-regex-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "11c89a7ee1d911ad83b683c7545539ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 10911,
        "upload_time": "2022-12-02T16:44:36",
        "upload_time_iso_8601": "2022-12-02T16:44:36.889004Z",
        "url": "https://files.pythonhosted.org/packages/f2/70/8da021ec4edcc62be987a6af01756aa0bda87a55c2fe77490c92b8f03112/liccheck-regex-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2708da021ec4edcc62be987a6af01756aa0bda87a55c2fe77490c92b8f03112",
        "md5": "11c89a7ee1d911ad83b683c7545539ba",
        "sha256": "a77cdea3696185aa5d9dab0706335df1bfa8ff4f5b9647138e4c02ed8d10943b"
      },
      "downloads": -1,
      "filename": "liccheck-regex-0.7.4.tar.gz",
      "has_sig": false,
      "md5_digest": "11c89a7ee1d911ad83b683c7545539ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 10911,
      "upload_time": "2022-12-02T16:44:36",
      "upload_time_iso_8601": "2022-12-02T16:44:36.889004Z",
      "url": "https://files.pythonhosted.org/packages/f2/70/8da021ec4edcc62be987a6af01756aa0bda87a55c2fe77490c92b8f03112/liccheck-regex-0.7.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}