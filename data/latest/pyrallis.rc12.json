{
  "info": {
    "author": "Elad Richardson",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\"><img src=\"https://raw.githubusercontent.com/eladrich/pyrallis/master/docs/pyrallis_logo.png\" alt=\"logo\" width=\"70%\" /></p>\n\n<p align=\"center\">\n    <a href=\"https://badge.fury.io/py/pyrallis\"><img src=\"https://badge.fury.io/py/pyrallis.svg\" alt=\"PyPI version\" height=\"18\"></a>\n    <a href=\"https://github.com/eladrich/pyrallis/actions/workflows/pytest.yml\"><img src=\"https://github.com/eladrich/pyrallis/actions/workflows/pytest.yml/badge.svg\" alt=\"PyTest\" height=\"18\"></a>\n    <a href=\"https://pepy.tech/project/pyrallis\"><img src=\"https://pepy.tech/badge/pyrallis\" alt=\"Downloads\" height=\"18\"></a>\n    <a href=\"#contributors-\"><img src=\"https://img.shields.io/badge/all_contributors-2-orange.svg\" alt=\"All Contributors\" height=\"18\"></a>\n    <a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\" height=\"18\"></a>\n</p>\n\n\n# Pyrallis - Simple Configuration with Dataclasses\n\n> Pyrausta (also called pyrallis (œÄœÖœÅŒ±ŒªŒªŒØœÇ), pyragones) is a mythological insect-sized dragon from Cyprus.\n\n`Pyrallis` is a simple library, derived from `simple-parsing` and inspired by `Hydra`, for automagically creating project configuration from a dataclass.\n\n\n<p align=\"center\"><img src=\"https://github.com/eladrich/pyrallis/raw/master/docs/argparse2pyrallis.gif\" alt=\"GIF\" width=\"100%\" /></p>\n\n## Why `pyrallis`?\n\nWith `pyrallis` your configuration is linked directly to your pre-defined `dataclass`, allowing you to easily create different configuration structures, including nested ones, using an object-oriented design. The parsed arguments are used to initialize your `dataclass`, giving you the typing hints and automatic code completion of a full `dataclass` object.\n\n\n## My First Pyrallis Example üë∂\nThere are several key features to pyrallis but at its core pyrallis simply allows defining an argument parser using a dataclass.\n\n```python \nfrom dataclasses import dataclass\nimport pyrallis\n\n\n@dataclass\nclass TrainConfig:\n    \"\"\" Training config for Machine Learning \"\"\"\n    workers: int = 8 # The number of workers for training\n    exp_name: str = 'default_exp' # The experiment name\n\ndef main():\n    cfg = pyrallis.parse(config_class=TrainConfig)\n    print(f'Training {cfg.exp_name} with {cfg.workers} workers...')\n\n```\n\nThe arguments can then be specified using command-line arguments, a `yaml` configuration file, or both.\n\n```console\n$ python train_model.py --config_path=some_config.yaml --exp_name=my_first_exp\nTraining my_first_exp with 42 workers...\n```\nAssuming the following configuration file\n```yaml\nexp_name: my_yaml_exp\nworkers: 42\n```\n\n### Key Features\nBuilding on that design `pyrallis` offers some really enjoyable features including \n\n* Builtin IDE support for autocompletion and linting thanks to the structured config. ü§ì\n* Joint reading from command-line and a config file, with support for specifying a default config file. üòç\n* Support for builtin dataclass features, such as `__post_init__` and `@property` üòÅ\n* Support for nesting and inheritance of dataclasses, nested arguments are automatically created! üò≤\n* A magical `@pyrallis.wrap()` decorator for wrapping your main class ü™Ñ\n* Easy extension to new types using `pyrallis.encode.register` and `pyrallis.decode.register` üëΩ\n* Easy loading and saving of existing configurations using `pyrallis.dump` and `pyrallis.load` üíæ\n* Magical `--help` creation from dataclasses, taking into account the comments as well! üòé\n* Support for multiple configuration formats (`yaml`, `json`,`toml`) using `pyrallis.set_config_type` ‚öôÔ∏è\n\n\n## Getting to Know The `pyrallis` API in 5 Simple Steps üê≤\n\nThe best way to understand the full `pyrallis` API is through examples, let's get started!\n\n###  üê≤ 1/5 `pyrallis.parse` for `dataclass` Parsing üê≤\n\nCreation of an argparse configuration is really simple, just use `pyrallis.parse` on your predefined dataclass.\n\n```python\nfrom dataclasses import dataclass, field\nimport pyrallis\n\n\n@dataclass\nclass TrainConfig:\n    \"\"\" Training config for Machine Learning \"\"\"\n    # The number of workers for training\n    workers: int = field(default=8)\n    # The experiment name\n    exp_name: str = field(default='default_exp')\n\n\ndef main():\n    cfg = pyrallis.parse(config_class=TrainConfig)\n    print(f'Training {cfg.exp_name} with {cfg.workers} workers...')\n\n\nif __name__ == '__main__':\n    main()\n```\n> Not familiar with `dataclasses`? you should probably check the [Python Tutorial](https://docs.python.org/3/library/dataclasses.html) and come back here.\n\nThe config can then be parsed directly from command-line\n```console\n$ python train_model.py --exp_name=my_first_model\nTraining my_first_model with 8 workers...\n```\nOh, and `pyrallis` also generates an `--help` string automatically using the comments in your dataclass ü™Ñ\n\n```console\n$ python train_model.py --help\nusage: train_model.py [-h] [--config_path str] [--workers int] [--exp_name str]\n\noptional arguments:\n  -h, --help      show this help message and exit\n  --config_path str    Path for a config file to parse with pyrallis (default:\n                  None)\n\nTrainConfig:\n   Training config for Machine Learning\n\n  --workers int   The number of workers for training (default: 8)\n  --exp_name str  The experiment name (default: default_exp)\n```\n\n\n\n### üê≤ 2/5 The `pyrallis.wrap` Decorator üê≤\nDon't like the `pyrallis.parse` syntax?\n```python\ndef main():\n    cfg = pyrallis.parse(config_class=TrainConfig)\n    print(f'Training {cfg.exp_name} with {cfg.workers} workers...')\n```\nOne can equivalently use the `pyrallis.wrap` syntax üòé \n```python\n@pyrallis.wrap()\ndef main(cfg: TrainConfig):\n    # The decorator automagically uses the type hint to parsers arguments into TrainConfig\n    print(f'Training {cfg.exp_name} with {cfg.workers} workers...')\n```\nWe will use this syntax for the rest of our tutorial.\n\n\n### üê≤ 3/5 Better Configs Using Inherent `dataclass` Features üê≤\nWhen using a dataclass we can add additional functionality using existing `dataclass` features, such as the `post_init` mechanism or `@properties` :grin:\n```python\nfrom dataclasses import dataclass, field\nfrom pathlib import Path\nfrom typing import Optional\nimport pyrallis\n\n\n@dataclass\nclass TrainConfig:\n    \"\"\" Training config for Machine Learning \"\"\"\n    # The number of workers for training\n    workers: int = field(default=8)\n    # The number of workers for evaluation\n    eval_workers: Optional[int] = field(default=None)\n    # The experiment name\n    exp_name: str = field(default='default_exp')\n    # The experiment root folder path\n    exp_root: Path = field(default=Path('/share/experiments'))\n\n    def __post_init__(self):\n        # A builtin method of dataclasses, used for post-processing our configuration.\n        self.eval_workers = self.eval_workers or self.workers\n\n    @property\n    def exp_dir(self) -> Path:\n        # Properties are great for arguments that can be derived from existing ones\n        return self.exp_root / self.exp_name\n\n\n@pyrallis.wrap()\ndef main(cfg: TrainConfig):\n    print(f'Training {cfg.exp_name}...')\n    print(f'\\tUsing {cfg.workers} workers and {cfg.eval_workers} evaluation workers')\n    print(f'\\tSaving to {cfg.exp_dir}')\n```\n\n```console\n$ python -m train_model.py --exp_name=my_second_exp --workers=42\nTraining my_second_exp...\n    Using 42 workers and 42 evaluation workers\n    Saving to /share/experiments/my_second_exp\n```\n> Notice that in all examples we use the explicit `dataclass.field` syntax. This isn't a requirement of `pyrallis` but rather a style choice. As some of your arguments will probably require `dataclass.field` (mutable types for example) we find it cleaner to always use the same notation.\n\n\n### üê≤ 4/5 Building Hierarchical Configurations üê≤\nSometimes configs get too complex for a flat hierarchy üòï, luckily `pyrallis` supports nested dataclasses üí•\n\n```python\n\n@dataclass\nclass ComputeConfig:\n    \"\"\" Config for training resources \"\"\"\n    # The number of workers for training\n    workers: int = field(default=8)\n    # The number of workers for evaluation\n    eval_workers: Optional[int] = field(default=None)\n\n    def __post_init__(self):\n        # A builtin method of dataclasses, used for post-processing our configuration.\n        self.eval_workers = self.eval_workers or self.workers\n\n\n@dataclass\nclass LogConfig:\n    \"\"\" Config for logging arguments \"\"\"\n    # The experiment name\n    exp_name: str = field(default='default_exp')\n    # The experiment root folder path\n    exp_root: Path = field(default=Path('/share/experiments'))\n\n    @property\n    def exp_dir(self) -> Path:\n        # Properties are great for arguments that can be derived from existing ones\n        return self.exp_root / self.exp_name\n\n# TrainConfig will be our main configuration class.\n# Notice that default_factory is the standard way to initialize a class argument in dataclasses\n\n@dataclass\nclass TrainConfig:\n    log: LogConfig = field(default_factory=LogConfig)\n    compute: ComputeConfig = field(default_factory=ComputeConfig)\n\n@pyrallis.wrap()\ndef main(cfg: TrainConfig):\n    print(f'Training {cfg.log.exp_name}...')\n    print(f'\\tUsing {cfg.compute.workers} workers and {cfg.compute.eval_workers} evaluation workers')\n    print(f'\\tSaving to {cfg.log.exp_dir}')\n```\nThe argument parse will be updated accordingly\n```console\n$ python train_model.py --log.exp_name=my_third_exp --compute.eval_workers=2\nTraining my_third_exp...\n    Using 8 workers and 2 evaluation workers\n    Saving to /share/experiments/my_third_exp\n```\n\n### üê≤ 5/5 Easy Serialization with `pyrallis.dump` üê≤\nAs your config get longer you will probably want to start working with configuration files. Pyrallis supports encoding a dataclass configuration into a `yaml` file üíæ\n\nThe command `pyrallis.dump(cfg, open('run_config.yaml','w'))` will result in the following `yaml` file\n```yaml\ncompute:\n  eval_workers: 2\n  workers: 8\nlog:\n  exp_name: my_third_exp\n  exp_root: /share/experiments\n```\n> `pyrallis.dump` extends `yaml.dump` and uses the same syntax.\n\nConfiguration files can also be loaded back into a dataclass, and can even be used together with the command-line arguments.\n```python\ncfg = pyrallis.parse(config_class=TrainConfig,\n                              config_path='/share/configs/config.yaml')\n\n# or the decorator synrax\n@pyrallis.wrap(config_path='/share/configs/config.yaml')\n\n# or with the CONFIG argument\npython my_script.py --log.exp_name=readme_exp --config_path=/share/configs/config.yaml\n\n# Or if you just want to load from a .yaml without cmd parsing\ncfg = pyrallis.load(TrainConfig, '/share/configs/config.yaml')\n```\n> Command-line arguments have a higher priority and will override the configuration file\n\n\nFinally, one can easily extend the serialization to support new types üî•\n```python\n# For decoding from cmd/yaml\npyrallis.decode.register(np.ndarray,np.asarray)\n\n# For encoding to yaml \npyrallis.encode.register(np.ndarray, lambda x: x.tolist())\n\n# Or with the wrapper version instead \n@pyrallis.encode.register\ndef encode_array(arr : np.ndarray) -> str:\n    return arr.tolist()\n```\n\n#### üê≤ That's it you are now a `pyrallis` expert! üê≤\n\n\n\n## Why Another Parsing Library?\n<img src=\"https://imgs.xkcd.com/comics/standards_2x.png\" alt=\"XKCD 927 - Standards\" width=\"70%\" />\n\n> XKCD 927 - Standards \n\nThe builtin `argparse` has many great features but is somewhat outdated :older_man: with one its greatest weakness being the lack of typing. This has led to the development of many great libraries tackling different weaknesses of `argparse` (shout out for all the great projects out there! You rock! :metal:).  \n\nIn our case, we were looking for a library that would  support the vanilla `dataclass` without requiring dedicated classes, and would have a loading interface from both command-line and files. The closest candidates were `hydra` and `simple-parsing`, but they weren't exactly what we were looking for. Below are the pros and cons from our perspective:\n#### [Hydra](https://github.com/facebookresearch/hydra)\nA framework for elegantly configuring complex applications from Facebook Research.\n* Supports complex configuration from multiple files and allows for overriding them from command-line.\n* Does not support non-standard types, does not play nicely with `datclass.__post_init__`and requires a `ConfigStore` registration.\n#### [SimpleParsing](https://github.com/lebrice/SimpleParsing)\nA framework for simple, elegant and typed Argument Parsing by Fabrice Normandin\n* Strong integration with `argparse`, support for nested configurations together with standard arguments.\n* No support for joint loading from command-line and files, dataclasses are still wrapped by a Namespace, requires dedicated classes for serialization.\n\nWe decided to create a simple hybrid of the two approaches, building from `SimpleParsing` with some `hydra` features in mind. The result, `pyrallis`, is a simple library that that is relatively low on features, but hopefully excels at what it does.\n\nIf `pyrallis` isn't what you're looking for we strongly advise you to give `hydra` and `simpleParsing` a try (where other interesting option include `click`, `ext_argpase`, `jsonargparse`, `datargs` and `tap`). If you do :heart: `pyrallis` then welcome aboard! We're gonna have a great journey together! üê≤\n\n## Tips and Design Choices\n\n### Beware of Mutable Types (or use pyrallis.field)\nDataclasses are great (really!) but using mutable fields can sometimes be confusing. For example, say we try to code the following dataclass\n```python\n@dataclass\nclass OptimConfig:\n    worker_inds: List[int] = []\n    # Or the more explicit version\n    worker_inds: List[int] = field(default=[])\n```\nAs `[]` is mutable we would actually initialize every instance of this dataclass with the same list instance, and thus is not allowed. Instead `dataclasses` would direct you the default_factory function, which calls a factory function for generating the field in every new instance of your dataclass.\n\n```python\nworker_inds: List[int] = field(default_factory=list)\n```\n\nNow, this works great for empty collections, but what would be the alternative for\n```python\nworker_inds: List[int] = field(default=[1,2,3])\n```\nWell, you would have to create a dedicated factory function that regenerates the object, for example\n```python\nworker_inds: List[int] = field(default_factory=lambda : [1,2,3])\n```\nKind of annoying and could be confusing for a new guest reading your code :confused: Now, while this isn't really related to parsing/configuration we decided it could be nice to offer a sugar-syntax for such cases as part of `pyrallis`\n```python\nfrom pyrallis import field\nworker_inds: List[int] = field(default=[1,2,3], is_mutable=True)\n```\nThe `pyrallis.field` behaves like the regular `dataclasses.field` with an additional `is_mutable` flag. When toggled, the `default_factory` is created automatically, offering the same functionally with a more reader-friendly syntax.\n\n\n\n### Uniform Parsing Syntax\nFor parsing files we opted for `yaml` as our format of choice, following `hydra`, due to its concise format. \nNow, let us assume we have the following `.yaml` file which `yaml` successfully handles:\n```yaml\ncompute:\n  worker_inds: [0,2,3]\n```\nIntuitively we would also want users to be able to use the same syntax \n```cmd\npython my_app.py --compute.worker_inds=[0,2,3]\n```\n\nHowever, the more standard syntax for an argparse application would be \n```cmd\npython my_app.py --compute.worker_inds 0 2 3\n```\n\nWe decided to use the same syntax as in the `yaml` files to avoid confusion when loading from multiple sources.\n\nNot a `yaml` fun? `pyrallis` also supports `json` and `toml` formats using `pyrallis.set_config_type('json')` or `with pyrallis.config_type('json'):`\n\n\n\n# TODOs:\n- [x] Fix error with default Dict and List\n>         Underlying error: No decoding function for type ~KT, consider using pyrallis.decode.register\n- [x] Refine the `--help` command\n> For example the `options` argument is confusing there\n- [ ] Add a test to `omit_defaults`\n## Contributors ‚ú®\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://about.me/ido.weiss\"><img src=\"https://avatars.githubusercontent.com/u/10072365?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ido Weiss</b></sub></a><br /><a href=\"#design-idow09\" title=\"Design\">üé®</a> <a href=\"#ideas-idow09\" title=\"Ideas, Planning, & Feedback\">ü§î</a></td>\n    <td align=\"center\"><a href=\"https://github.com/yairf11\"><img src=\"https://avatars.githubusercontent.com/u/13931256?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Yair Feldman</b></sub></a><br /><a href=\"#design-yairf11\" title=\"Design\">üé®</a> <a href=\"#ideas-yairf11\" title=\"Ideas, Planning, & Feedback\">ü§î</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://eladrich.github.io/pyrallis/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyrallis",
    "package_url": "https://pypi.org/project/pyrallis/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyrallis/",
    "project_urls": {
      "Homepage": "https://eladrich.github.io/pyrallis/"
    },
    "release_url": "https://pypi.org/project/pyrallis/0.3.1/",
    "requires_dist": [
      "typing-inspect",
      "pyyaml",
      "dataclasses ; python_version < \"3.7\""
    ],
    "requires_python": ">=3.6",
    "summary": "A framework for simple dataclass-based configurations.",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13167405,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d934f7a9573c7e9210e27899b71bd37c3906746436835e4632ceae4c34e53f16",
          "md5": "5f975f1a80c6075fff2e034cba59010b",
          "sha256": "1f669b91af743e8f16c16f8b09e9f2f571d746c3b44c762282db3bf74e986890"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f975f1a80c6075fff2e034cba59010b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32555,
        "upload_time": "2021-12-30T10:24:54",
        "upload_time_iso_8601": "2021-12-30T10:24:54.967890Z",
        "url": "https://files.pythonhosted.org/packages/d9/34/f7a9573c7e9210e27899b71bd37c3906746436835e4632ceae4c34e53f16/pyrallis-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a571fe044e8a8cf9ca8905244b6d642cc2ab49bb09b561caec6c5d86c16083d1",
          "md5": "6c6a4b842a816c409e65583fe456f193",
          "sha256": "a9e30955584d1db7275f4b60da40973596652f408c129c19e0b373b1f482c162"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c6a4b842a816c409e65583fe456f193",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32538,
        "upload_time": "2021-12-30T10:24:56",
        "upload_time_iso_8601": "2021-12-30T10:24:56.605832Z",
        "url": "https://files.pythonhosted.org/packages/a5/71/fe044e8a8cf9ca8905244b6d642cc2ab49bb09b561caec6c5d86c16083d1/pyrallis-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08a6ec52f9af1169bd1a675a8c61f51d15897e7bc4c0d55c49298bd8e2b7c0d4",
          "md5": "3456265f577aca9c7e6d85a987c90852",
          "sha256": "6a77bda5d7e8bac137be2f4200065b6b6311a6f50a837fb5ad2893cad0ff278b"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3456265f577aca9c7e6d85a987c90852",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32588,
        "upload_time": "2021-12-30T16:00:19",
        "upload_time_iso_8601": "2021-12-30T16:00:19.349947Z",
        "url": "https://files.pythonhosted.org/packages/08/a6/ec52f9af1169bd1a675a8c61f51d15897e7bc4c0d55c49298bd8e2b7c0d4/pyrallis-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62e92ec471612b30ec5c59d97adbc2e93b4c6cec6d56c5719adac802f8b33ec6",
          "md5": "2b6298f462ef82331995001fe2c9ec76",
          "sha256": "bf25d3656f5a7df4b43f82d9a45d33414db101af5ec4ec170e9755ac953dcb22"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2b6298f462ef82331995001fe2c9ec76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32569,
        "upload_time": "2021-12-30T16:00:20",
        "upload_time_iso_8601": "2021-12-30T16:00:20.992333Z",
        "url": "https://files.pythonhosted.org/packages/62/e9/2ec471612b30ec5c59d97adbc2e93b4c6cec6d56c5719adac802f8b33ec6/pyrallis-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b25d3a2581fee5d54cab8615c8a56d69f408f7481837b37b171a1011826adbe",
          "md5": "3f9baaf634fa5a57557909c6d84a0dc1",
          "sha256": "84b63ae3f37122d2960a39e5730d6324787ea2211d3f0bb2a4a28b6de0fd5c6e"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f9baaf634fa5a57557909c6d84a0dc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32623,
        "upload_time": "2021-12-30T16:06:00",
        "upload_time_iso_8601": "2021-12-30T16:06:00.020888Z",
        "url": "https://files.pythonhosted.org/packages/6b/25/d3a2581fee5d54cab8615c8a56d69f408f7481837b37b171a1011826adbe/pyrallis-0.1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f02d3b48c119eff744f2a4155d2833ba363c3031f61e3b5aab968bd3934ec665",
          "md5": "062179e24be675e687ecbd58d3fc2125",
          "sha256": "1fe4e2692c2ac92d339cad671beb7986239c5a0848446881dd70ffc20154dfd4"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "062179e24be675e687ecbd58d3fc2125",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32595,
        "upload_time": "2021-12-30T16:06:01",
        "upload_time_iso_8601": "2021-12-30T16:06:01.819382Z",
        "url": "https://files.pythonhosted.org/packages/f0/2d/3b48c119eff744f2a4155d2833ba363c3031f61e3b5aab968bd3934ec665/pyrallis-0.1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36979808e76433f941e9c8fb699b126e035cabdde769c8c8fd9512dc30e6e342",
          "md5": "4f99c9d87a74cb23d1c769eb7f8aa55a",
          "sha256": "44bb33c57a57f90da9d808cb0e3c1ae8257c07e11457a8fe305f6834949fb04f"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f99c9d87a74cb23d1c769eb7f8aa55a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32615,
        "upload_time": "2021-12-30T16:58:58",
        "upload_time_iso_8601": "2021-12-30T16:58:58.993701Z",
        "url": "https://files.pythonhosted.org/packages/36/97/9808e76433f941e9c8fb699b126e035cabdde769c8c8fd9512dc30e6e342/pyrallis-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dd94a2ecf607cfb1dfeecf8d3a4094d5fa69a1b1143aa06a599843698f4d227",
          "md5": "a3b583fa960d5fd09d7ada224a515e93",
          "sha256": "b5e00eab04c1b1fd2850ed308ba8194083d8a042f988ba608e6597100b250716"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a3b583fa960d5fd09d7ada224a515e93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32605,
        "upload_time": "2021-12-30T16:59:00",
        "upload_time_iso_8601": "2021-12-30T16:59:00.229476Z",
        "url": "https://files.pythonhosted.org/packages/6d/d9/4a2ecf607cfb1dfeecf8d3a4094d5fa69a1b1143aa06a599843698f4d227/pyrallis-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcfc41d99f6e9f4db8e4dff099720d3eaf9d1c577fd73e44e617ccc1b10b5ff6",
          "md5": "085ee199dae24c01aae92d7594617459",
          "sha256": "761f68f9b83b1183e7c6425e32a6e1c7a0e4468e9aed9d9edc33f6879c631808"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "085ee199dae24c01aae92d7594617459",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33344,
        "upload_time": "2022-01-02T15:44:36",
        "upload_time_iso_8601": "2022-01-02T15:44:36.790311Z",
        "url": "https://files.pythonhosted.org/packages/fc/fc/41d99f6e9f4db8e4dff099720d3eaf9d1c577fd73e44e617ccc1b10b5ff6/pyrallis-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ab6c62f5a84001d22e811c90ddc77b16276521dc0b2f2f67a0e50546972d948",
          "md5": "a2c13e8a1e8b1824996904b86ec33be8",
          "sha256": "2d3b3c0e2e3d31af395f7650441a237c634367b432dab3468911eb2812f5b16e"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a2c13e8a1e8b1824996904b86ec33be8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33891,
        "upload_time": "2022-01-02T15:44:38",
        "upload_time_iso_8601": "2022-01-02T15:44:38.301170Z",
        "url": "https://files.pythonhosted.org/packages/7a/b6/c62f5a84001d22e811c90ddc77b16276521dc0b2f2f67a0e50546972d948/pyrallis-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "598d515d506a5941f845c187ad184b11d652599d6622dea9a511fbddee260548",
          "md5": "b6606ba6bab0243355e3554baf60a048",
          "sha256": "eb075a5296200d60866daf99c51f496927c1a7a843d0ec9ee8beea71babc9cfe"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6606ba6bab0243355e3554baf60a048",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32041,
        "upload_time": "2022-01-05T22:38:05",
        "upload_time_iso_8601": "2022-01-05T22:38:05.086473Z",
        "url": "https://files.pythonhosted.org/packages/59/8d/515d506a5941f845c187ad184b11d652599d6622dea9a511fbddee260548/pyrallis-0.1.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ff29d36f8a50758f08e3919632d02e3b2444fa3168dd6ee31de102a854f800d",
          "md5": "423edbf8fd426a4061df378a830e898e",
          "sha256": "a2e499cd24bf72fc157b00032df93f8f8380830b9d05e8822bd10a24f9762dbd"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "423edbf8fd426a4061df378a830e898e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32716,
        "upload_time": "2022-01-05T22:38:06",
        "upload_time_iso_8601": "2022-01-05T22:38:06.398911Z",
        "url": "https://files.pythonhosted.org/packages/2f/f2/9d36f8a50758f08e3919632d02e3b2444fa3168dd6ee31de102a854f800d/pyrallis-0.1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0c8036c20286d9082a85485338d79677f33ae42fd374eba460cbe9a34a5ee2c",
          "md5": "bce845b00027d4fe61a680e1d5e6a64c",
          "sha256": "462c569fe9ab8673a0123468bad381946cf9adbe5f100186ad3803f8c506cc03"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bce845b00027d4fe61a680e1d5e6a64c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32091,
        "upload_time": "2022-01-06T06:33:02",
        "upload_time_iso_8601": "2022-01-06T06:33:02.005397Z",
        "url": "https://files.pythonhosted.org/packages/f0/c8/036c20286d9082a85485338d79677f33ae42fd374eba460cbe9a34a5ee2c/pyrallis-0.1.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b32f55cfc1d8ccf485c961d78806327c24a2c5e20162a7c2dcada7a0cacc3d0",
          "md5": "0381c898db624187df92fa805bdba3dd",
          "sha256": "7c570ce94d72b460e3c0c3a1c85c7153231f4d19a03080a453ba5d9e3ee568fd"
        },
        "downloads": -1,
        "filename": "pyrallis-0.1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0381c898db624187df92fa805bdba3dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32745,
        "upload_time": "2022-01-06T06:33:03",
        "upload_time_iso_8601": "2022-01-06T06:33:03.875410Z",
        "url": "https://files.pythonhosted.org/packages/9b/32/f55cfc1d8ccf485c961d78806327c24a2c5e20162a7c2dcada7a0cacc3d0/pyrallis-0.1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01f6d248a0e93bd038c0c88561d4facfca95ec0a220dd53268f4ec0d73fd661d",
          "md5": "6daf58df2dda52480719faec55fa6eef",
          "sha256": "ba29207358d29284dace0339e170ac3be8d96b1ca5789b80617e3d2a3d4948cd"
        },
        "downloads": -1,
        "filename": "pyrallis-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6daf58df2dda52480719faec55fa6eef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32197,
        "upload_time": "2022-01-11T19:50:51",
        "upload_time_iso_8601": "2022-01-11T19:50:51.881840Z",
        "url": "https://files.pythonhosted.org/packages/01/f6/d248a0e93bd038c0c88561d4facfca95ec0a220dd53268f4ec0d73fd661d/pyrallis-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35116c4f00349fb4855c2eaf00483f0c46384b6994d9d9821292448cd7752a55",
          "md5": "6ebf7c49b06ebabd51a70df4d917ec85",
          "sha256": "c70f50dadad92537789ee2f728c215e27eeee28d41ef7acf3a92b55d65466fe2"
        },
        "downloads": -1,
        "filename": "pyrallis-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6ebf7c49b06ebabd51a70df4d917ec85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32908,
        "upload_time": "2022-01-11T19:50:53",
        "upload_time_iso_8601": "2022-01-11T19:50:53.934040Z",
        "url": "https://files.pythonhosted.org/packages/35/11/6c4f00349fb4855c2eaf00483f0c46384b6994d9d9821292448cd7752a55/pyrallis-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d69f5e93416b5c1042e6f4c339c3e9b34a6443b6ab9c5c8dc010760e1a2428c",
          "md5": "fcc3da928dab13c06f6a60316c490a38",
          "sha256": "3bddfec7fca125c287d81d68c4e8108975ecc5f926421982ff44d9aefe7fc41f"
        },
        "downloads": -1,
        "filename": "pyrallis-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fcc3da928dab13c06f6a60316c490a38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31430,
        "upload_time": "2022-01-24T21:08:18",
        "upload_time_iso_8601": "2022-01-24T21:08:18.624526Z",
        "url": "https://files.pythonhosted.org/packages/6d/69/f5e93416b5c1042e6f4c339c3e9b34a6443b6ab9c5c8dc010760e1a2428c/pyrallis-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4182bef3bfcdd823e32880ac0e0435698e9aaa1921144fe1e4c7536888b3fbd4",
          "md5": "17dd503fcbb09aed40c091ed8c413c1b",
          "sha256": "4e0716df93942761cf27081f6e59462186cde5b2706fdd3b1b63da777bf4e1a7"
        },
        "downloads": -1,
        "filename": "pyrallis-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "17dd503fcbb09aed40c091ed8c413c1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32020,
        "upload_time": "2022-01-24T21:08:20",
        "upload_time_iso_8601": "2022-01-24T21:08:20.328061Z",
        "url": "https://files.pythonhosted.org/packages/41/82/bef3bfcdd823e32880ac0e0435698e9aaa1921144fe1e4c7536888b3fbd4/pyrallis-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41e92b4b97250f261a31ac03434cf4cb49726e3c2ef5b2873b24819085d28703",
          "md5": "ee00cc97b20d989b3943e4c6b6bdc9cb",
          "sha256": "d6c0e64114a5824a02780028bf4597f26cb1abf7c35724aff348339272170538"
        },
        "downloads": -1,
        "filename": "pyrallis-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee00cc97b20d989b3943e4c6b6bdc9cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32202,
        "upload_time": "2022-02-10T22:55:56",
        "upload_time_iso_8601": "2022-02-10T22:55:56.330142Z",
        "url": "https://files.pythonhosted.org/packages/41/e9/2b4b97250f261a31ac03434cf4cb49726e3c2ef5b2873b24819085d28703/pyrallis-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8714899bafda4677ee07d31fb930eb8a24a2e194f471f1b7c41f19f991b7d702",
          "md5": "02769e2809f904ac33c5b179306916e1",
          "sha256": "a3102c43ed57cf2cab0c9f3df618b26fbb7a3dd3c826a3e716ec3b2b761af0df"
        },
        "downloads": -1,
        "filename": "pyrallis-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "02769e2809f904ac33c5b179306916e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33406,
        "upload_time": "2022-02-10T22:55:57",
        "upload_time_iso_8601": "2022-02-10T22:55:57.902775Z",
        "url": "https://files.pythonhosted.org/packages/87/14/899bafda4677ee07d31fb930eb8a24a2e194f471f1b7c41f19f991b7d702/pyrallis-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "022650617fa7f98a24888eadef5add412e4f856387dca0146afc8e6562c00dfd",
          "md5": "73a2cdc2199ccbab66e5e4d1ebb37c6d",
          "sha256": "a40fef11ec9fb3de54a590d8057b6f3bb209e02d7931e8f95da39a478a1eabf5"
        },
        "downloads": -1,
        "filename": "pyrallis-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73a2cdc2199ccbab66e5e4d1ebb37c6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33812,
        "upload_time": "2022-03-03T17:30:16",
        "upload_time_iso_8601": "2022-03-03T17:30:16.418079Z",
        "url": "https://files.pythonhosted.org/packages/02/26/50617fa7f98a24888eadef5add412e4f856387dca0146afc8e6562c00dfd/pyrallis-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77636d747160f7c0d5bf73801824c6d44098cc7c6514c3ac58bbb3e8044cff94",
          "md5": "60ddaa9512df74b1df7df2763eab86e6",
          "sha256": "0504d21ed1c20856f1d89c3e0cdbac8aa29cf3b80ba350b4ecdec5b27287f93f"
        },
        "downloads": -1,
        "filename": "pyrallis-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "60ddaa9512df74b1df7df2763eab86e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34515,
        "upload_time": "2022-03-03T17:30:17",
        "upload_time_iso_8601": "2022-03-03T17:30:17.769003Z",
        "url": "https://files.pythonhosted.org/packages/77/63/6d747160f7c0d5bf73801824c6d44098cc7c6514c3ac58bbb3e8044cff94/pyrallis-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e21896ce8acd58566f38ffa179b833fd52b4c285fd4e90842ad6b8362372639",
          "md5": "d4edab0df374939e8199d28efcad9b71",
          "sha256": "632370b563486495f5f9e7caf86cddffab8351214a3bdc60ae0d23b261ebdb59"
        },
        "downloads": -1,
        "filename": "pyrallis-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4edab0df374939e8199d28efcad9b71",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33419,
        "upload_time": "2022-03-14T08:23:24",
        "upload_time_iso_8601": "2022-03-14T08:23:24.193102Z",
        "url": "https://files.pythonhosted.org/packages/7e/21/896ce8acd58566f38ffa179b833fd52b4c285fd4e90842ad6b8362372639/pyrallis-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3ff4d865cd0166b3e0b0b09b1f5399114fe27c836b74f45f580d61efecf28dd",
          "md5": "4e9fb23ca47a8733a38dab303e4bbffe",
          "sha256": "ab7298f31c633d4858ec3b045a30e6cc9b9f7ab50f21ea93aa3fb28532ac4b6e"
        },
        "downloads": -1,
        "filename": "pyrallis-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4e9fb23ca47a8733a38dab303e4bbffe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33799,
        "upload_time": "2022-03-14T08:23:25",
        "upload_time_iso_8601": "2022-03-14T08:23:25.805614Z",
        "url": "https://files.pythonhosted.org/packages/b3/ff/4d865cd0166b3e0b0b09b1f5399114fe27c836b74f45f580d61efecf28dd/pyrallis-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e21896ce8acd58566f38ffa179b833fd52b4c285fd4e90842ad6b8362372639",
        "md5": "d4edab0df374939e8199d28efcad9b71",
        "sha256": "632370b563486495f5f9e7caf86cddffab8351214a3bdc60ae0d23b261ebdb59"
      },
      "downloads": -1,
      "filename": "pyrallis-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d4edab0df374939e8199d28efcad9b71",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 33419,
      "upload_time": "2022-03-14T08:23:24",
      "upload_time_iso_8601": "2022-03-14T08:23:24.193102Z",
      "url": "https://files.pythonhosted.org/packages/7e/21/896ce8acd58566f38ffa179b833fd52b4c285fd4e90842ad6b8362372639/pyrallis-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3ff4d865cd0166b3e0b0b09b1f5399114fe27c836b74f45f580d61efecf28dd",
        "md5": "4e9fb23ca47a8733a38dab303e4bbffe",
        "sha256": "ab7298f31c633d4858ec3b045a30e6cc9b9f7ab50f21ea93aa3fb28532ac4b6e"
      },
      "downloads": -1,
      "filename": "pyrallis-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4e9fb23ca47a8733a38dab303e4bbffe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 33799,
      "upload_time": "2022-03-14T08:23:25",
      "upload_time_iso_8601": "2022-03-14T08:23:25.805614Z",
      "url": "https://files.pythonhosted.org/packages/b3/ff/4d865cd0166b3e0b0b09b1f5399114fe27c836b74f45f580d61efecf28dd/pyrallis-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}