{
  "info": {
    "author": "Jonathan Crabbé",
    "author_email": "jc2133@cam.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# SimplEx - Explaining Latent Representations with a Corpus of Examples\n\n[![Tests](https://github.com/vanderschaarlab/Simplex/actions/workflows/test.yml/badge.svg)](https://github.com/vanderschaarlab/Simplex/actions/workflows/test.yml)\n[![pdf](https://img.shields.io/badge/PDF-%20NeurIPS%202021-red)](https://papers.nips.cc/paper/2021/hash/65658fde58ab3c2b6e5132a39fae7cb9-Abstract.html)\n[![License: Apache 2.0](https://img.shields.io/badge/License-Apache2.0-blue.svg)](https://github.com/JonathanCrabbe/Simplex/blob/main/LICENSE)\n\n\n![image](https://github.com/vanderschaarlab/Simplex/raw/main/simplex_examples.png \"Examples of SimplEx explanations\")\n\nCode Author: Jonathan Crabbé ([jc2133@cam.ac.uk](mailto:jc2133@cam.ac.uk))\n\nThis repository contains the implementation of SimplEx, a method to explain the latent\nrepresentations of black-box models with the help of a corpus of examples.\nFor more details, please read our [NeurIPS 2021 paper](https://papers.nips.cc/paper/2021/hash/65658fde58ab3c2b6e5132a39fae7cb9-Abstract.html): 'Explaining Latent Representations with a Corpus of Examples'.\n\n## :rocket: Installation\n\nThe library can be installed from PyPI using\n```bash\n$ pip install simplexai\n```\nor from source, using\n```bash\n$ pip install .\n```\n\n## Toy example\n\nBellow, you can find a toy demonstration where we make a corpus decomposition of test examples representations.\nAll the relevant code can be found in the file [simplex](explainers/simplex.py).\n\n```python\nfrom simplexai.explainers.simplex import Simplex\nfrom simplexai.models.image_recognition import MnistClassifier\nfrom simplexai.experiments.mnist import load_mnist\n\n# Get a model\nmodel = MnistClassifier() # Model should have the BlackBox interface\n\n# Load corpus and test inputs\ncorpus_loader = load_mnist(subset_size=100, train=True, batch_size=100) # MNIST train loader\ntest_loader = load_mnist(subset_size=10, train=True, batch_size=10) # MNIST test loader\ncorpus_inputs, _ = next(iter(corpus_loader)) # A tensor of corpus inputs\ntest_inputs, _ = next(iter(test_loader)) # A set of inputs to explain\n\n# Compute the corpus and test latent representations\ncorpus_latents = model.latent_representation(corpus_inputs).detach()\ntest_latents = model.latent_representation(test_inputs).detach()\n\n# Initialize SimplEX, fit it on test examples\nsimplex = Simplex(corpus_examples=corpus_inputs,\n                  corpus_latent_reps=corpus_latents)\nsimplex.fit(test_examples=test_inputs,\n            test_latent_reps=test_latents,\n            reg_factor=0)\n\n# Get the weights of each corpus decomposition\nweights = simplex.weights\n```\nWe get a tensor weights that can be interpreted as follows:\n``weights[i,c] = weight of corpus example c in the decomposition of example i``.\n\nWe can get the importance of each corpus feature for the decomposition\nof a given example ``i`` in the following way:\n```python\nimport torch\n\n# Compute the Integrated Jacobian for a particular example\ni = 4\ninput_baseline = torch.zeros(corpus_inputs.shape) # Baseline tensor of the same shape as corpus_inputs\nsimplex.jacobian_projection(test_id=i, model=model, input_baseline=input_baseline)\nresult = simplex.decompose(i)\n```\nWe get a list ``result`` where each element of the list corresponds to a corpus example.\nThis list is sorted by decreasing order of importance in the corpus decomposition.\nEach element of the list is a tuple structured as follows:\n```python\nw_c, x_c, proj_jacobian_c = result[c]\n```\nWhere ``w_c`` corresponds to the weight ``weights[i,c]``, ``x_c`` corresponds to ``corpus_inputs[c]``\nand ``proj_jacobian`` is a tensor such that ``proj_jacobian_c[k]`` is the Projected Jacobian\nof feature ``k`` from corpus example ``c``.\n\n\n## Reproducing the paper results\n### Reproducing MNIST Approximation Quality Experiment\n1. Run the following script for different values of CV (the results from the paper\n   were obtained by taking all integer CV between 0 and 9)\n```shell\npython -m simplexai.experiments.mnist -experiment \"approximation_quality\" -cv CV\n\n```\n\n2. Run the following script by adding all the values of CV from the previous step\n```shell\npython -m simplexai.experiments.results.mnist.quality.plot_results -cv_list CV1 CV2 CV3 ...\n\n```\n3. The resulting plots and data are saved [here](experiments/results/mnist/quality).\n\n### Reproducing Prostate Cancer Approximation Quality Experiment\nThis experiment requires the access to the private datasets CUTRACT\nand SEER decribed in the paper.\n1. Copy the files ``cutract_internal_all.csv`` and ``seer_external_imputed_new.csv`` are in the folder ``data/Prostate Cancer``\n2. Run the following script for different values of CV (the results from the paper\n   were obtained by taking all integer CV between 0 and 9)\n```shell\npython -m simplexai.experiments.prostate_cancer -experiment \"approximation_quality\" -cv CV\n\n```\n3. Run the following script by adding all the values of CV from the previous step\n```shell\npython -m simplexai.experiments.results.prostate.quality.plot_results -cv_list CV1 CV2 CV3 ...\n\n```\n4. The resulting plots are saved [here](experiments/results/prostate/quality).\n\n### Reproducing Prostate Cancer Outlier Experiment\nThis experiment requires the access to the private datasets CUTRACT\nand SEER decribed in the paper.\n1. Make sure that the files ``cutract_internal_all.csv`` and ``seer_external_imputed_new.csv`` are in the folder ``data/Prostate Cancer``\n2. Run the following script for different values of CV (the results from the paper\n   were obtained by taking all integer CV between 0 and 9)\n```shell\npython -m simplexai.experiments.prostate_cancer -experiment \"outlier_detection\" -cv CV\n\n```\n3. Run the following script by adding all the values of CV from the previous step\n```shell\npython -m simplexai.experiments.results.prostate.outlier.plot_results -cv_list CV1 CV2 CV3 ...\n\n```\n4. The resulting plots are saved [here](experiments/results/prostate/outlier).\n\n### Reproducing MNIST Jacobian Projection Significance Experiment\n1. Run the following script\n```shell\npython -m simplexai.experiments.mnist -experiment \"jacobian_corruption\"\n\n```\n\n2.The resulting plots and data are saved [here](experiments/results/mnist/jacobian_corruption).\n\n### Reproducing MNIST Outlier Detection Experiment\n1. Run the following script for different values of CV (the results from the paper\n   were obtained by taking all integer CV between 0 and 9)\n```shell\npython -m simplexai.experiments.mnist -experiment \"outlier_detection\" -cv CV\n\n```\n\n2. Run the following script by adding all the values of CV from the previous step\n```shell\npython -m simplexai.experiments.results.mnist.outlier.plot_results -cv_list CV1 CV2 CV3 ...\n\n```\n3. The resulting plots and data are saved [here](experiments/results/mnist/outlier).\n\n### Reproducing MNIST Influence Function Experiment\n1. Run the following script for different values of CV (the results from the paper\n   were obtained by taking all integer CV between 0 and 4)\n```shell\npython -m simplexai.experiments.mnist -experiment \"influence\" -cv CV\n\n```\n\n2. Run the following script by adding all the values of CV from the previous step\n```shell\npython -m simplexai.experiments.results.mnist.influence.plot_results -cv_list CV1 CV2 CV3 ...\n\n```\n3. The resulting plots and data are saved [here](experiments/results/mnist/influence).\n\nNote: some problems can appear with the package\n[Pytorch Influence Functions](https://github.com/nimarb/pytorch_influence_functions).\nIf this is the case, please change ``calc_influence_function.py`` in the following way:\n\n```python\n343: influences.append(tmp_influence) ==> influences.append(tmp_influence.cpu())\n438: influences_meta['test_sample_index_list'] = sample_list ==> #influences_meta['test_sample_index_list'] = sample_list\n```\n\n### Reproducing AR Approximation Quality Experiment\n1. Run the following script for different values of CV (the results from the paper\n   were obtained by taking all integer CV between 0 and 4)\n```shell\npython -m simplexai.experiments.time_series -experiment \"approximation_quality\" -cv CV\n\n```\n\n2. Run the following script by adding all the values of CV from the previous step\n```shell\npython -m simplexai.experiments.results.ar.quality.plot_results -cv_list CV1 CV2 CV3 ...\n\n```\n3. The resulting plots and data are saved [here](experiments/results/ar/quality).\n\n### Reproducing AR Outlier Detection Experiment\n1. Run the following script for different values of CV (the results from the paper\n   were obtained by taking all integer CV between 0 and 4)\n```shell\npython -m simplexai.experiments.time_series -experiment \"outlier_detection\" -cv CV\n\n```\n\n2. Run the following script by adding all the values of CV from the previous step\n```shell\npython -m simplexai.experiments.results.ar.outlier.plot_results -cv_list CV1 CV2 CV3 ...\n\n```\n3. The resulting plots and data are saved [here](experiments/results/ar/outlier).\n\n\n## :hammer: Tests\n\nInstall the testing dependencies using\n```bash\npip install .[testing]\n```\nThe tests can be executed using\n```bash\npytest -vsx\n```\n\n## Citing\n\nIf you use this code, please cite the associated paper:\n\n```\n@inproceedings{Crabbe2021Simplex,\n author = {Crabbe, Jonathan and Qian, Zhaozhi and Imrie, Fergus and van der Schaar, Mihaela},\n booktitle = {Advances in Neural Information Processing Systems},\n editor = {M. Ranzato and A. Beygelzimer and Y. Dauphin and P.S. Liang and J. Wortman Vaughan},\n pages = {12154--12166},\n publisher = {Curran Associates, Inc.},\n title = {Explaining Latent Representations with a Corpus of Examples},\n url = {https://proceedings.neurips.cc/paper/2021/file/65658fde58ab3c2b6e5132a39fae7cb9-Paper.pdf},\n volume = {34},\n year = {2021}\n}\n```\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.vanderschaar-lab.com/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simplexai",
    "package_url": "https://pypi.org/project/simplexai/",
    "platform": "any",
    "project_url": "https://pypi.org/project/simplexai/",
    "project_urls": {
      "Documentation": "https://pyscaffold.org/",
      "Homepage": "https://www.vanderschaar-lab.com/"
    },
    "release_url": "https://pypi.org/project/simplexai/0.0.3/",
    "requires_dist": [
      "captum (>=0.4.0)",
      "numpy (>=1.21.6)",
      "matplotlib",
      "pandas (>=1.3.3)",
      "pytorch-influence-functions (==0.1.1)",
      "scikit-learn (>=1.0.2)",
      "seaborn (>=0.11.2)",
      "torch (>=1.9.1)",
      "torchvision (>=0.10.1)",
      "importlib-metadata ; python_version < \"3.8\"",
      "pre-commit ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "bandit ; extra == 'testing'",
      "jupyter ; extra == 'testing'",
      "notebook ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "SimplEx - Explaining Latent Representations with a Corpus of Examples",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16459900,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "721fffd0a575719af6ff92ac24cafc15d4b1d142f80067dff9420b49ef5dcc21",
          "md5": "f8987c693574ea866bde5a4883eb8bc6",
          "sha256": "6a83c3efa589f7ef95f7eb57af10a09596190815910b328a313b2f20b433c06b"
        },
        "downloads": -1,
        "filename": "simplexai-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8987c693574ea866bde5a4883eb8bc6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41610,
        "upload_time": "2022-09-06T17:50:40",
        "upload_time_iso_8601": "2022-09-06T17:50:40.828930Z",
        "url": "https://files.pythonhosted.org/packages/72/1f/ffd0a575719af6ff92ac24cafc15d4b1d142f80067dff9420b49ef5dcc21/simplexai-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "108b283b90ac67feb973f0bd182ca6d59452c40cdd9b66fe07866c6c5a8780ba",
          "md5": "8b0ca42955be2f8012ac68867fc3f9a5",
          "sha256": "4a0493fc104d730f9f4dab4e7e7a73c3a25156abefdc0b90ed3db1094b0c74e2"
        },
        "downloads": -1,
        "filename": "simplexai-0.0.1-py3-none-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "8b0ca42955be2f8012ac68867fc3f9a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41346,
        "upload_time": "2022-09-06T17:49:42",
        "upload_time_iso_8601": "2022-09-06T17:49:42.671969Z",
        "url": "https://files.pythonhosted.org/packages/10/8b/283b90ac67feb973f0bd182ca6d59452c40cdd9b66fe07866c6c5a8780ba/simplexai-0.0.1-py3-none-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6be53a81b3a3c16b7d6a8f34fb557c9b69b8cd5adbafeedfae88442b376610b",
          "md5": "20798a94208c534d5f7e02efadfedce7",
          "sha256": "540ff8be1fb74d16918fce464f5e7c077d62975933d6e9275ebe617207ba89ae"
        },
        "downloads": -1,
        "filename": "simplexai-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20798a94208c534d5f7e02efadfedce7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41616,
        "upload_time": "2022-09-06T17:57:31",
        "upload_time_iso_8601": "2022-09-06T17:57:31.366426Z",
        "url": "https://files.pythonhosted.org/packages/d6/be/53a81b3a3c16b7d6a8f34fb557c9b69b8cd5adbafeedfae88442b376610b/simplexai-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3ad4f6db3f71a9cd4f8c0ae1538c8c2e99fb5423659863194599477f8583551",
          "md5": "94fb5f070e9e629cb39b3f9c579b72c3",
          "sha256": "8e0911c298a9de943f2417b5d42d318e879f254f066350b19772db34df415068"
        },
        "downloads": -1,
        "filename": "simplexai-0.0.2-py3-none-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "94fb5f070e9e629cb39b3f9c579b72c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41342,
        "upload_time": "2022-09-06T17:56:29",
        "upload_time_iso_8601": "2022-09-06T17:56:29.813218Z",
        "url": "https://files.pythonhosted.org/packages/b3/ad/4f6db3f71a9cd4f8c0ae1538c8c2e99fb5423659863194599477f8583551/simplexai-0.0.2-py3-none-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2355bacfc067b20c90ece9ae7f27cf9210b602f2f5787581b7169e8e06609abb",
          "md5": "a7a889d17cc25dbe2b02c06aced11436",
          "sha256": "513fb49a0b78ea60eeb989b4ed4f7808d98612c2816e1a4bbb67863ab953a6d9"
        },
        "downloads": -1,
        "filename": "simplexai-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7a889d17cc25dbe2b02c06aced11436",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 52892,
        "upload_time": "2023-01-17T15:44:14",
        "upload_time_iso_8601": "2023-01-17T15:44:14.169562Z",
        "url": "https://files.pythonhosted.org/packages/23/55/bacfc067b20c90ece9ae7f27cf9210b602f2f5787581b7169e8e06609abb/simplexai-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31b5cb3de02db70c321f6813e2ebff9a88ac0d31193b0319d1f698ea06af7c0f",
          "md5": "4e199580947a698ba65aadbab8b0353e",
          "sha256": "f1276f6c70bf30347a38e8894d686b2a998e74a941973eecaa9c271a7befb585"
        },
        "downloads": -1,
        "filename": "simplexai-0.0.3-py3-none-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "4e199580947a698ba65aadbab8b0353e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 52470,
        "upload_time": "2023-01-17T15:43:23",
        "upload_time_iso_8601": "2023-01-17T15:43:23.109697Z",
        "url": "https://files.pythonhosted.org/packages/31/b5/cb3de02db70c321f6813e2ebff9a88ac0d31193b0319d1f698ea06af7c0f/simplexai-0.0.3-py3-none-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2355bacfc067b20c90ece9ae7f27cf9210b602f2f5787581b7169e8e06609abb",
        "md5": "a7a889d17cc25dbe2b02c06aced11436",
        "sha256": "513fb49a0b78ea60eeb989b4ed4f7808d98612c2816e1a4bbb67863ab953a6d9"
      },
      "downloads": -1,
      "filename": "simplexai-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a7a889d17cc25dbe2b02c06aced11436",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 52892,
      "upload_time": "2023-01-17T15:44:14",
      "upload_time_iso_8601": "2023-01-17T15:44:14.169562Z",
      "url": "https://files.pythonhosted.org/packages/23/55/bacfc067b20c90ece9ae7f27cf9210b602f2f5787581b7169e8e06609abb/simplexai-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31b5cb3de02db70c321f6813e2ebff9a88ac0d31193b0319d1f698ea06af7c0f",
        "md5": "4e199580947a698ba65aadbab8b0353e",
        "sha256": "f1276f6c70bf30347a38e8894d686b2a998e74a941973eecaa9c271a7befb585"
      },
      "downloads": -1,
      "filename": "simplexai-0.0.3-py3-none-macosx_10_14_x86_64.whl",
      "has_sig": false,
      "md5_digest": "4e199580947a698ba65aadbab8b0353e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 52470,
      "upload_time": "2023-01-17T15:43:23",
      "upload_time_iso_8601": "2023-01-17T15:43:23.109697Z",
      "url": "https://files.pythonhosted.org/packages/31/b5/cb3de02db70c321f6813e2ebff9a88ac0d31193b0319d1f698ea06af7c0f/simplexai-0.0.3-py3-none-macosx_10_14_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}