{
  "info": {
    "author": "Mario Orlandi",
    "author_email": "morlandi@brainstorm.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Django Encrypted Model Fields (including JSONField)\n\n## About\n\nThis is a fork of <https://gitlab.com/lansharkconsulting/django/django-encrypted-model-fields>,\nwhich in turn was a fork of <https://github.com/foundertherapy/django-cryptographic-fields>.\n\nIt has been renamed, and updated to properly support Python3 and the latest\nversions of Django.\n\n`django-encrypted-json-fields` is set of fields that wrap standard\nDjango fields with encryption provided by the python cryptography\nlibrary. These fields are much more compatible with a 12-factor design\nsince they take their encryption key from the settings file instead of a\nfile on disk used by `keyczar`.\n\nWhile keyczar is an excellent tool to use for encryption, it's not\ncompatible with Python 3, and it requires, for hosts like Heroku, that\nyou either check your key file into your git repository for deployment,\nor implement manual post-deployment processing to write the key stored\nin an environment variable into a file that keyczar can read.\n\n## JSONField support\n\n`django-encrypted-json-fields` extends the origin project `django-encrypted-model-fields`\nby adding a specific support for JSONFields, with the following features:\n\n- the encrypted data remains a valid JSON, so you can inherit from django.db.models.JSONField and all validations will still work\n- if the data contains dictionaries, the keys are preserved so that the overall structure remains intact\n- that is: we only encrypt the values\n\n### Implementation notes\n\nI opted to encrypt the repr() of the values, then apply eval() later only (after decrypting).\n\nThis is usefull to reconstruct **both the value and the type**; since JSON manages\nonly a few simple types, this naive solution just fits the bill.\n\n## The crypter\n\nAll functions responsible for encryption/decryption (see below) require a `crypter`, which\ncan be obtained in a few ways:\n\n- default crypter: assign a key or a list of keys to the `EJF_ENCRYPTION_KEYS` setting,\n  and a default crypter will be build for you\n- assigning a callable to the `EJF_ENCRYPTION_KEYS` setting, which in turn will\n  return a list of keys as above\n- invoke `build_crypter(keys)` explicitly, and pass the resulting object around\n\nFor the latter, the use case I had in mind was the need to keep the data in play text\non the server, and export encrypted data for a remote client, sharing a common key.\n\n## Deferred get_crypter()\n\nSince `EJF_ENCRYPTION_KEYS` setting now accepts a callable, which might very well\nneed to retrieve some data from the Django models, I had to postpone the call to\nget_crypter() until all apps have been loaded.\n\nAs a side effect, now you can always and safely call the `generate_encryption_key`\nmanagement command (see below)\n\n## App settings\n\nEJF_ENCRYPTION_KEYS\n\n    either a key, a list of keys, or a callable returning the list of keys to\n    be used for building the default crypter\n\nEJF_DISABLE_ENCRYPTION\n\n    skip encryption when saving the model (save data unencrypted)\n\n## Helpers\n\nAll function used internally when saving and reading Django models can also be\ninvoked explicitly to apply encryption/decryption to arbitrary strings or JSON\nvalues.\n\nA possible use case consists in serializing encrypted data to be sent to a remote\nclient.\n\n| Function | Purpone |\n| ----------- | ----------- |\n| `generate_random_encryption_key()` | generate a key |\n| `build_crypter(keys)` | given a list of keys (or a key) builds the corresponding crypter |\n| `is_encrypted(s: Union[str, bytes]) -> bool `| Check if the given string (or bytes) is the result of an encryption |\n| `encrypt_str(s: str, crypter=None, force=False) -> bytes` | Encrypts the given string applying either the supplied crypter or, in None, the default crypter |\n| `decrypt_bytes(t: bytes, crypter=None, force=False) -> str` | Decrypts the given bytes and returns a string |\n| `encrypt_values(data, crypter=None, force=False, json_skip_keys=None)` | Applyes encryption to a JSON-serializable object |\n| `decrypt_values(data, crypter=None, force=False)` | reverses encrypt_values() |\n\n* force means: proceed even when encryption is disabled in project's settings\n\n## Managment commands\n\nSome management commands are supplied; run with `--help` for detailed informations:\n\n- generate_encryption_key\n- encrypt_str\n- decrypt_str\n- encrypt_all_tables\n- decrypt_all_tables\n\n\n## Getting Started\n\n> $ pip install django-encrypted-json-fields\n\nAdd \"encrypted_json_fields\" to your INSTALLED_APPS setting like this:\n\n```\n    INSTALLED_APPS = (\n        ...\n        'encrypted_json_fields',\n    )\n```\n\n`django-encrypted-json-fields` expects the encryption key to be\nspecified using `FIELD_ENCRYPTION_KEY` in your project's `settings.py`\nfile. For example, to load it from the local environment:\n\n```\n    import os\n\n    FIELD_ENCRYPTION_KEY = os.environ.get('FIELD_ENCRYPTION_KEY', '')\n```\n\nTo use an encrypted field in a Django model, use one of the fields from\nthe `encrypted_json_fields` module:\n\n```\n    from encrypted_json_fields.fields import EncryptedCharField\n\n    class EncryptedFieldModel(models.Model):\n        encrypted_char_field = EncryptedCharField(max_length=100)\n```\n\nFor fields that require `max_length` to be specified, the `Encrypted`\nvariants of those fields will automatically increase the size of the\ndatabase field to hold the encrypted form of the content. For example, a\n3 character CharField will automatically specify a database field size\nof 100 characters when `EncryptedCharField(max_length=3)` is specified.\n\nDue to the nature of the encrypted data, filtering by values contained\nin encrypted fields won't work properly. Sorting is also not supported.\n\n## Running Tests\n\nDoes the code actually work?\n\nRunning the unit tests from this app:\n\n```\npython manage.py test -v 2\n```\n\nor\n\n```\n./runtests.py\n```\n\nor\n\n```\ncoverage run --source='.' runtests.py\ncoverage report\n```\n\n## Sample project\n\nA sample project using this app for demonstration purposes is available here:\n\nhttps://github.com/morlandi/test_django_encrypted_json_fields\n\n\n## Credits\n\n- <https://gitlab.com/lansharkconsulting/django/django-encrypted-model-fields> has been shared by Scott Sharkey\n- <https://github.com/foundertherapy/django-cryptographic-fields> has been shared by Dana Spiegel\n\n\n# django-encrypted-model-fields Changelog\n\n-   1.0.4 - fix fetch_raw_field_value() for sqlite\n-   1.0.3 - prevent double encryption\n-   1.0.2 - \"force\" flag added\n-   1.0.0 - helpers available as standalone funcs\n    - major refactoring\n    - more unit tests\n-   0.7.2 - More hacks to optionally disable encryption of JSON fields\n-   0.7.1 - Overridable crypter\n    -   Optionally disable encryption with `FIELD_SKIP_ENCRYPTION`\n-   0.7.0 - JSONField support\n    -   deferred get_crypter()\n    -   `FIELD_ENCRYPTION_KEY` setting now accepts a callable\n-   0.6.5 - RE-Correct links to repository and homepage\n-   0.6.4 - Correct links to repository and homepage\n-   0.6.3 - Converted to poetry for build system\n-   0.6.2 - Bump support to any python \\< 4\n    -   Make Generating an Encryption Key more prominent\n-   0.6.1 - Add Support for Python up to 3.11\n-   0.6.0 - Major Update\n    -   Drop Python 2 Support\n    -   Drop support for Django \\< 2.2\n    -   Add support for Django 2.2, 3.0, 3.1, and 3.2\n    -   Drop support for Python \\< 3.6\n    -   Add Support for Python 3.6, 3.7, 3.8, and 3.9\n    -   Move travis-ci testing to gitlab\n    -   Remove Support for EncryptedNullBooleanField (deprecated by\n        Django 4.0)\n    -   Update Test App to Django 2.2 standard\n    -   Include 2 of Oleg Pesok's fixes: for Timezone-aware datetimes,\n        and the cached validator crash\n-   0.5.8 - Move to GITLAB repository\n-   0.5.7 - rearrange requirements and update dependencies\n    -   fix issue with output of generate_encryption_key command\n    -   define default value for FIELD_ENCRYPTION_KEY\n    -   restore support for Django 1.9, 1.10, and 1.11\n-   0.5.6 - Fixed issue with generating encryption keys (thanks Dave\n    Alan)\n    -   dropped support for Django 1.8, 1.9 and 1.10\n    -   fix classifier to include Django 2.0\n-   0.5.5 - Fixed README\n-   0.5.4 - drop python 3.4 support\n    -   add django 2.0 support\n    -   expand testing to cover python 2.7, 3.5 and 3.6 for django 1.9,\n        1.10, 1.11 and 2.0\n    -   fix broken test\n-   0.5.3 - Fork from foundertherapy/django-cryptographic-fields\n    -   update dependencies\n    -   convert to run under python 3.x\n    -   rename package so it can be uploaded to pypi\n    -   add support for tox/travis-ci testing\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/morlandi/django-encrypted-json-fields",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-encrypted-json-fields",
    "package_url": "https://pypi.org/project/django-encrypted-json-fields/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-encrypted-json-fields/",
    "project_urls": {
      "Homepage": "https://github.com/morlandi/django-encrypted-json-fields"
    },
    "release_url": "https://pypi.org/project/django-encrypted-json-fields/1.0.4/",
    "requires_dist": [
      "django (>=2.2)",
      "cryptography (>=3.4)"
    ],
    "requires_python": "",
    "summary": "A set of fields that wrap standard Django fields, including JSONField, with encryption provided by the python cryptography library",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15096771,
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f990e0fc84a0dd36990cae2fc3955f3a73501b2a3450195a29abc1ee7dbd8d48",
          "md5": "c0f972cc5ec271b39bf40f557c03cbe7",
          "sha256": "f9c3500a14dab15c8be7833841548a0ad2fbc8b8b3251785b6f3e57b0bbf8e7d"
        },
        "downloads": -1,
        "filename": "django_encrypted_json_fields-0.7.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0f972cc5ec271b39bf40f557c03cbe7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 16259,
        "upload_time": "2022-08-02T16:01:44",
        "upload_time_iso_8601": "2022-08-02T16:01:44.588495Z",
        "url": "https://files.pythonhosted.org/packages/f9/90/e0fc84a0dd36990cae2fc3955f3a73501b2a3450195a29abc1ee7dbd8d48/django_encrypted_json_fields-0.7.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "661fe8ba799be2597962ed55040f2206fe162ebccdb511e3bed7c733a660d6d7",
          "md5": "4dd22be3d054dd56425c2eab1d919d53",
          "sha256": "1cf0cfc38c917eca0064832edbe22369e2c117d2e9f3e2e92c9f3f46781029c8"
        },
        "downloads": -1,
        "filename": "django_encrypted_json_fields-0.7.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4dd22be3d054dd56425c2eab1d919d53",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 21515,
        "upload_time": "2022-08-09T15:41:05",
        "upload_time_iso_8601": "2022-08-09T15:41:05.852955Z",
        "url": "https://files.pythonhosted.org/packages/66/1f/e8ba799be2597962ed55040f2206fe162ebccdb511e3bed7c733a660d6d7/django_encrypted_json_fields-0.7.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d2b1da8f0ee8bedb4a3171b8d46df8a19384331ca85a004bfcb976670100524",
          "md5": "075492f41907a989af247082236e18c1",
          "sha256": "d38e81d128a01129aaf6d4ffb56729d94a0cb25a4126f6691881a79018d32af7"
        },
        "downloads": -1,
        "filename": "django_encrypted_json_fields-0.7.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "075492f41907a989af247082236e18c1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18546,
        "upload_time": "2022-08-09T18:12:40",
        "upload_time_iso_8601": "2022-08-09T18:12:40.412947Z",
        "url": "https://files.pythonhosted.org/packages/7d/2b/1da8f0ee8bedb4a3171b8d46df8a19384331ca85a004bfcb976670100524/django_encrypted_json_fields-0.7.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20ef096dc6f4b5a57b04587b1a1303f311fc004ee44d3a34fc25cefde4d186b1",
          "md5": "db1442530f9c019c84a4b47eb308fdaa",
          "sha256": "c792ff98ec2d1192c9e5b55eee247dc206e5248e85e5e20376c99c4390309bb0"
        },
        "downloads": -1,
        "filename": "django_encrypted_json_fields-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db1442530f9c019c84a4b47eb308fdaa",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22135,
        "upload_time": "2022-09-05T20:44:11",
        "upload_time_iso_8601": "2022-09-05T20:44:11.037396Z",
        "url": "https://files.pythonhosted.org/packages/20/ef/096dc6f4b5a57b04587b1a1303f311fc004ee44d3a34fc25cefde4d186b1/django_encrypted_json_fields-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f5ad9183b19c1c76367a87f3e3d7f28efdd914467b5c70c5ed32f9d068c6861",
          "md5": "30144f6bba4f7d0d32a25b23900af342",
          "sha256": "4f5eb76d9150fa5265c49a270eee850473521979d4e7bbda90fc0205bfca643a"
        },
        "downloads": -1,
        "filename": "django_encrypted_json_fields-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30144f6bba4f7d0d32a25b23900af342",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22335,
        "upload_time": "2022-09-07T08:10:54",
        "upload_time_iso_8601": "2022-09-07T08:10:54.961748Z",
        "url": "https://files.pythonhosted.org/packages/7f/5a/d9183b19c1c76367a87f3e3d7f28efdd914467b5c70c5ed32f9d068c6861/django_encrypted_json_fields-1.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f87d6f081c593504403c8bae77a0df30462e3a647ebcc05cd8d16dd04bedfb13",
          "md5": "934e941ab63d64dee469e51ce045dff7",
          "sha256": "d4c2af82ae67bda0d79185acb6e807ca423fa7ff40cd129eefe4441da9aac5d9"
        },
        "downloads": -1,
        "filename": "django_encrypted_json_fields-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "934e941ab63d64dee469e51ce045dff7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22477,
        "upload_time": "2022-09-07T14:13:24",
        "upload_time_iso_8601": "2022-09-07T14:13:24.429738Z",
        "url": "https://files.pythonhosted.org/packages/f8/7d/6f081c593504403c8bae77a0df30462e3a647ebcc05cd8d16dd04bedfb13/django_encrypted_json_fields-1.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "681d4f43e8fc13b0198420eba47a8283baf9a4d0f62651ed121401cabc0a70d7",
          "md5": "ac760022d31eb126720fcd0ecdd27c70",
          "sha256": "aad75c0ef5f80129c0becc4317ff209d48a2201cb9d39d0c351f775fa1c8c043"
        },
        "downloads": -1,
        "filename": "django_encrypted_json_fields-1.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac760022d31eb126720fcd0ecdd27c70",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22573,
        "upload_time": "2022-09-14T21:30:05",
        "upload_time_iso_8601": "2022-09-14T21:30:05.868815Z",
        "url": "https://files.pythonhosted.org/packages/68/1d/4f43e8fc13b0198420eba47a8283baf9a4d0f62651ed121401cabc0a70d7/django_encrypted_json_fields-1.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "681d4f43e8fc13b0198420eba47a8283baf9a4d0f62651ed121401cabc0a70d7",
        "md5": "ac760022d31eb126720fcd0ecdd27c70",
        "sha256": "aad75c0ef5f80129c0becc4317ff209d48a2201cb9d39d0c351f775fa1c8c043"
      },
      "downloads": -1,
      "filename": "django_encrypted_json_fields-1.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac760022d31eb126720fcd0ecdd27c70",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 22573,
      "upload_time": "2022-09-14T21:30:05",
      "upload_time_iso_8601": "2022-09-14T21:30:05.868815Z",
      "url": "https://files.pythonhosted.org/packages/68/1d/4f43e8fc13b0198420eba47a8283baf9a4d0f62651ed121401cabc0a70d7/django_encrypted_json_fields-1.0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}