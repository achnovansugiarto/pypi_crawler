{
  "info": {
    "author": "CyberZHG",
    "author_email": "CyberZHG@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# 6502 Restricted Assembler\n\n[![Python application](https://github.com/CyberZHG/cpu-6502-restricted-assembler/actions/workflows/python-test.yml/badge.svg)](https://github.com/CyberZHG/cpu-6502-restricted-assembler/actions/workflows/python-test.yml)\n[![Coverage Status](https://coveralls.io/repos/github/CyberZHG/mos-6502-restricted-assembler/badge.svg?branch=main)](https://coveralls.io/github/CyberZHG/mos-6502-restricted-assembler?branch=main)\n\nA 6502 assembler with restricted functions.\n\n## Install\n\n```bash\npip install mos-6502-restricted-assembler\n```\n\n## Usage\n\n```python\nfrom asm_6502 import Assembler\n\ncode = \"\"\"\nSTART ORG $0080\n      JMP START\n\"\"\"\nassembler = Assembler()\nresults = assembler.assemble(code, add_entry=False)\n# Results will be `[(0x0080, [0x4C, 0x80, 0x00])]`\n#     0x0080 is the offset of the codes, the following are the bytes generated by the assembler.\n\ncode = \"\"\"\nORG $0080\nJMP $abcd\n\"\"\"\nresults = assembler.assemble(code)\n# Results will be `[\n#     (0x0080, [0x4C, 0xcd, 0xab]),\n#     (0xFFFC, [0x80, 0x00]),\n# ]`\n# By default, the assembler will set to 0xFFFE/F the address of the first line that can be executed.\n```\n\n## Instructions\n\n### List\n\nOfficial:\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| ADC | AND | ASL | BCC | BCS | BEQ | BIT | BMI | BNE | BPL | BRK | BVC | BVS | CLC |\n| CLD | CLI | CLV | CMP | CPX | CPY | DEC | DEX | DEY | EOR | INC | INX | INY | JMP |\n| JSR | LDA | LDX | LDY | LSR | NOP | ORA | PHA | PHP | PLA | PLP | ROL | ROR | RTI |\n| RTS | SBC | SEC | SED | SEI | STA | STX | STY | TAX | TAY | TSX | TXA | TXS | TYA |\n\nUndocumented:\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| ANC | ARR | ASR | DCP | ISC | JAM | LAS | LAX | RLA | RRA | SAX | SBX | SHA | SHS |\n| SHX | SHY | SLO | SRE | XAA |  -  |  -  |  -  |  -  |  -  |  -  |  -  |  -  |  -  |\n\n\n### Pseudo\n\n```\nORG $0080    ; The following codes will be generated from this offset\n.BYTE $AB    ; Set to the current address $0080 with a byte $AB\n.WORD $ABCD  ; Set to the current address $0081 with two bytes $CD and $AB\n.END         ; This is equivelent to JMP *\n```\n\n### Addressing\n\n```\nSTART ORG $0080\n      .WORD *+3\n      NOP                 ; Implied addressing\n      JMP (START)         ; Indirect addressing\n      LDA #10             ; Load $0A into the accumulator\n      LDA #LO $ABCD       ; Load $CD into the accumulator\n      LDA #HI $ABCD       ; Load $AB into the accumulator\n      LDA $00             ; Load into accumulator from zero-page address $00\n      LDA $10,X           ; Load into accumulator from zero-page address ($10 + X) % $0100\n      LDX $10,Y           ; Load into X from zero-page address ($10 + Y) % $0100\n      LDA $ABCD           ; Load into accumulator from address $ABCD\n      LDA $ABCD,X         ; Load into accumulator from address $ABCD + X\n      LDA $ABCD,Y         ; Load into accumulator from address $ABCD + Y\n      LDA ($40,X)         ; Load into accumulator from the 2-byte address contained in ($40 + X) % $0100\n      LDA ($40),Y         ; Load into accumulator from (the 2-byte address contained in $40) + Y\n```\n\nSpecial rules for zero-page addressing:\n\n```\nLDA $0010           ; This is not zero-page addressing as the input contains a word\nLDA *               ; This is not zero-page addressing no matter what the current code address is\nLDA LABEL           ; This is not zero-page addressing no matter where LABEL points to\nLDA $FF+10-10       ; This is not zero-page addressing as the intermedidate result is greater than a byte\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CyberZHG/mos-6502-restricted-assembler",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mos-6502-restricted-assembler",
    "package_url": "https://pypi.org/project/mos-6502-restricted-assembler/",
    "platform": "",
    "project_url": "https://pypi.org/project/mos-6502-restricted-assembler/",
    "project_urls": {
      "Homepage": "https://github.com/CyberZHG/mos-6502-restricted-assembler"
    },
    "release_url": "https://pypi.org/project/mos-6502-restricted-assembler/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A 6502 assembler with restricted functions",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12144042,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16632fab96e3b0f2157c1be99f6ede9789edc5429c219055291b68c1c3fde284",
          "md5": "ef88fe29d0a46ba5b3278037a10f1851",
          "sha256": "17622ad9b4930d263de0628cb59e9d8e908dab54c9fac494b189d778bf1dd77a"
        },
        "downloads": -1,
        "filename": "mos-6502-restricted-assembler-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef88fe29d0a46ba5b3278037a10f1851",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20854,
        "upload_time": "2021-11-21T14:07:39",
        "upload_time_iso_8601": "2021-11-21T14:07:39.448312Z",
        "url": "https://files.pythonhosted.org/packages/16/63/2fab96e3b0f2157c1be99f6ede9789edc5429c219055291b68c1c3fde284/mos-6502-restricted-assembler-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a501d5e567efe130cae4de6c1d09a9c1de35b186f5c776df4181813413054633",
          "md5": "7222e34df6717c308272057671eeac8d",
          "sha256": "0b20ac31b97a00dbced5842262ab5694849ad1f8679a1ab8f35e4e3a263b3f7b"
        },
        "downloads": -1,
        "filename": "mos-6502-restricted-assembler-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7222e34df6717c308272057671eeac8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21288,
        "upload_time": "2021-11-28T06:45:31",
        "upload_time_iso_8601": "2021-11-28T06:45:31.210634Z",
        "url": "https://files.pythonhosted.org/packages/a5/01/d5e567efe130cae4de6c1d09a9c1de35b186f5c776df4181813413054633/mos-6502-restricted-assembler-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a501d5e567efe130cae4de6c1d09a9c1de35b186f5c776df4181813413054633",
        "md5": "7222e34df6717c308272057671eeac8d",
        "sha256": "0b20ac31b97a00dbced5842262ab5694849ad1f8679a1ab8f35e4e3a263b3f7b"
      },
      "downloads": -1,
      "filename": "mos-6502-restricted-assembler-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7222e34df6717c308272057671eeac8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21288,
      "upload_time": "2021-11-28T06:45:31",
      "upload_time_iso_8601": "2021-11-28T06:45:31.210634Z",
      "url": "https://files.pythonhosted.org/packages/a5/01/d5e567efe130cae4de6c1d09a9c1de35b186f5c776df4181813413054633/mos-6502-restricted-assembler-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}