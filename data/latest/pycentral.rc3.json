{
  "info": {
    "author": "aruba-automation",
    "author_email": "aruba-automation@hpe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: System :: Networking"
    ],
    "description": "# pycentral\n#### Aruba Central Python Package Index SDK\n\nAruba Central is an unified cloud-based network management and configuration platform for campus, branch, remote and data center networks. There are various needs for automation and programmability like automating repetitive tasks, configuring multiple devices, monitoring and more. This python package is to programmatically interact with Aruba Central via REST APIs.\n\n### How To Install\nIn order to run the workflow scripts, please complete the steps below:\n1. install virtual env (refer https://docs.python.org/3/library/venv.html). Make sure python version 3 is installed in system.\n    ```\n    $ python3 -m venv centralenv\n    ```\n\n2. Activate the virtual env\n    ```\n    $ source centralenv/bin/activate\n    in Windows:\n    $ centralenv/Scripts/activate.bat\n    ```\n\n3. Install the **pycentral** package\n    ```\n    (centralenv)$ pip3 install pycentral\n    ```\n\n    To install package with *extras* `colorLog` which will display log in color\n    ```\n    (centralenv)$ pip3 install pycentral[colorLog]\n    ```\n\nNow you can start making your script based on modules in pycentral or use different workflows from the subpackage `workflows`.\n\n## Executing Scripts\n\n1. Gathering variables required for the package base class `ArubaCentralBase`.\n\n    * **base_url**: Go to `Account Home -> API Gateway -> APIs`. *All Published APs Table* will show URL under *DOCUMENTATION* column. Truncate this to end with '.com' E.G. 'https://apigw-prod2.central.arubanetworks.com/swagger/central/' must be truncated to 'https://apigw-prod2.central.arubanetworks.com'.\n\n    * **client_id** and **client_secret**: Obtain client_id and client_secret variables by creating an API Gateway client in Aruba Central. Refer the following [documentation](https://developer.arubanetworks.com/aruba-central/docs/api-gateway-creating-application-token) for more details.\n\n        At this point, create an API access token from the API Gateway WebUI as described in the above documentation or go further to collect other variables for the Python base class to create/manage access_token via **OAUTH APIs.**\n\n    * **customer_id**: Obtain the **customer_id** by clicking on the figure icon on top right corner of Aruba Central WebUI.\n\n    ![Customer ID](pictures/customer-id.png)\n\n    * **username** and **password**: Aruba Central user's *username* and *password*. The access token generated by the OAUTH APIs will have the same role/privileges as the provided Aruba Central user.\n\n2. Providing input variables to the Python scripts. One of the following options can be used.\n    * Provide variables directly to Aruba Central Base class in dictionary format.\n\n        Access token approach:\n        ```python\n        central_info = {\n            \"base_url\": \"<api-gateway-domain-url>\",\n            \"token\": {\n                \"access_token\": \"<api-gateway-access-token>\"\n            }\n        }\n        ```\n\n        OAUTH APIs approach with capability to generate new access token:\n        ```python\n            central_info = {\n                \"username\": \"<aruba-central-account-username>\",\n                \"password\": \"<aruba-central-account-password>\",\n                \"client_id\": \"<api-gateway-client-id>\",\n                \"client_secret\": \"<api-gateway-client-secret>\",\n                \"customer_id\": \"<aruba-central-customer-id>\",\n                \"base_url\": \"<api-gateway-domain-url>\"\n            }\n        ```\n\n        Refer the sample scripts in *step3* and *step4* for examples.\n\n    * **OR** Provide the required variables using JSON/YAML file. Refer input files [sample_scripts/input_token_only.yaml](sample_scripts/input_token_only.yaml) and [sample_scripts/input_credentials.yaml](sample_scripts/input_credentials.yaml) for information.\n\n        Use `pycentral.workflows_utils.get_conn_from_file()` function which accepts name of the file and returns\n        the `ArubaCentralBase` instance object. Refer the sample script in *step5* for example.\n\n3. **Making API call using pycentral base**: Using the base class `ArubaCentralBase`, any Aruba Central supported REST API calls can be made. Refer the following sample script [sample_scripts/pycentral_base_sample.py](sample_scripts/pycentral_base_sample.py).\n\n    Obtain the HTTP Request related information from Aruba Central Swagger documentation or [API references](https://developer.arubanetworks.com/aruba-central/reference) page in Aruba Developer Hub.\n\n4. **Making API call using pycentral modules**: Some API endpoints supported by Aruba Central are implemented as modules in the Python package. Refer the following sample script using modules [sample_scripts/pycentral_module_sample.py](sample_scripts/pycentral_module_sample.py).\n\n    To obtain a list of implemented modules and its documentation refer the [pycentral module documentation](https://pycentral.readthedocs.io/en/latest/).\n\n5. **Using pycentral workflows**: Workflows are used to achieve an automation use-case which generally involves multiple API calls or dealing with scale and repetitive tasks with ease. Refer the sample script using workflows [sample_scripts/pycentral_workflow_sample.py](sample_scripts/pycentral_workflow_sample.py).\n\n    Refer the [workflows](pycentral/workflows/) directory to know the supported workflows.\n\n\n## Documentation:\n* **Python package documentation:** [pycentral module documentation](https://pycentral.readthedocs.io/en/latest/)\n* **Use-Cases and Workflows:** [Aruba Developer Hub](https://developer.arubanetworks.com/aruba-central)\n\n## Note:\n The package takes one of the two approaches to gain access to Aruba Central APIs.\n\n  * **OAUTH APIs:** By taking OAUTH approach to generate new access_token, the python package will cache the tokens locally for re-use. Caching tokens locally, helps preventing creation of new access_token every time the script is run. In addition, when the access_token is expired the script will attempt to use the supplied credentials and attempt to refresh the expired token.\n\n    Override the `ArubaCentralBase.storeToken()` and `ArubaCentralBase.loadToken()` function definitions to change this behavior of caching in local file(JSON) and manage tokens more securely.\n\n * **Access Token**: This process is more secure. By providing only the *access_token* instead of credentials, the package will not cache the tokens. But loses the ability to handle expired token and to generate new access tokens.\n\n## How to contribute\nPlease see the accompanying [CONTRIBUTIONS.md](CONTRIBUTIONS.md) file for guidelines on how to contribute to this repository.\n\n## Troubleshooting Issues\nIf you encounter module import errors, make sure that the package has been installed correctly.\n\nAdditionally, please read the [RELEASE-NOTES.md](RELEASE-NOTES.md) file for the current release information and known issues.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aruba/pycentral",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycentral",
    "package_url": "https://pypi.org/project/pycentral/",
    "platform": "",
    "project_url": "https://pypi.org/project/pycentral/",
    "project_urls": {
      "Homepage": "https://github.com/aruba/pycentral"
    },
    "release_url": "https://pypi.org/project/pycentral/0.0.3/",
    "requires_dist": [
      "requests",
      "PyYAML",
      "urllib3",
      "certifi",
      "colorlog ; extra == 'colorlog'"
    ],
    "requires_python": ">=3.6",
    "summary": "Aruba Central Python Package",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11771686,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7be03e8e9f7bd81d9674e63ebd915a4f59d8793dff06ccef7c52dcddad667db4",
          "md5": "c813a27464e7f18885b9b9c7397283f7",
          "sha256": "88e5d7418d2fdef997038c8953f0b23dcb90947921f5eef78a22522976579dbe"
        },
        "downloads": -1,
        "filename": "pycentral-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c813a27464e7f18885b9b9c7397283f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35042,
        "upload_time": "2020-08-25T06:02:26",
        "upload_time_iso_8601": "2020-08-25T06:02:26.216051Z",
        "url": "https://files.pythonhosted.org/packages/7b/e0/3e8e9f7bd81d9674e63ebd915a4f59d8793dff06ccef7c52dcddad667db4/pycentral-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7abcfa9a75b5b67e4c1e973847aacfd7f4ea4e760dd876935e400ba11d9b2cdb",
          "md5": "901f94b02053bb3ab3200eb70b5f822a",
          "sha256": "0f05acbcbe781dd2d01c0f6d84ed2ee6cc60460e57472ad05c80282fa9de0063"
        },
        "downloads": -1,
        "filename": "pycentral-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "901f94b02053bb3ab3200eb70b5f822a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 49691,
        "upload_time": "2021-05-18T23:29:58",
        "upload_time_iso_8601": "2021-05-18T23:29:58.163416Z",
        "url": "https://files.pythonhosted.org/packages/7a/bc/fa9a75b5b67e4c1e973847aacfd7f4ea4e760dd876935e400ba11d9b2cdb/pycentral-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2239e8ede23fd2036fd289de76bce909b5adb326beb81ecfb4d90a16235b5a71",
          "md5": "689538982bb0cdb95d34807e601d7209",
          "sha256": "8cf0aaa257a82a74516f6c1a9379118c2923e010f15edbd3677ce131a04e6a1c"
        },
        "downloads": -1,
        "filename": "pycentral-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "689538982bb0cdb95d34807e601d7209",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 49674,
        "upload_time": "2021-10-19T17:03:30",
        "upload_time_iso_8601": "2021-10-19T17:03:30.524565Z",
        "url": "https://files.pythonhosted.org/packages/22/39/e8ede23fd2036fd289de76bce909b5adb326beb81ecfb4d90a16235b5a71/pycentral-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2239e8ede23fd2036fd289de76bce909b5adb326beb81ecfb4d90a16235b5a71",
        "md5": "689538982bb0cdb95d34807e601d7209",
        "sha256": "8cf0aaa257a82a74516f6c1a9379118c2923e010f15edbd3677ce131a04e6a1c"
      },
      "downloads": -1,
      "filename": "pycentral-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "689538982bb0cdb95d34807e601d7209",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 49674,
      "upload_time": "2021-10-19T17:03:30",
      "upload_time_iso_8601": "2021-10-19T17:03:30.524565Z",
      "url": "https://files.pythonhosted.org/packages/22/39/e8ede23fd2036fd289de76bce909b5adb326beb81ecfb4d90a16235b5a71/pycentral-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}