{
  "info": {
    "author": "Thammi",
    "author_email": "thammi@chaossource.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Programming Language :: C",
      "Programming Language :: C++",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Pre-processors",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "# Hardcode Haml - Haml for Hardcore Coders (and Embedded devices)\n\nCompiling Haml markup/templates to program code.\n\n*Warning:* There are still some language features missing. The TODO section is\nan imcomplete documentation of the the parts I am aware of.\n\n## Concept\n\nMost template engines for compiled and statically typed languages (like C and\nC++) are only able to do simple search and replace jobs for given values. Having\nused template engines in script languages like Ruby, Python or Java Script makes\nreturning to those template engines hard. This is where Hardcode Haml comes into\nplay.\n\nHaml was first implemented in ruby and got ported to multiple other languages.\nIt compines the ability to replace parts of your markup with values calculated\nat runtime (even allowing evaluation of code directly from the markup) and\nadditionally replaces XML with more writeable and readable markup.\n\nThis project turns Haml markup into program code. Therefore the markup gets\nparsed and processed before runtime and maybe even optimized by your compiler.\nTherefore execution time, memory footprint and file size on the target device\nshould be superior to other approaches. The drawback is, that your templates are\ncompiled in your binary and you can't edit them on the target system.\n\nThe language modules will generate a function which, when executed, will output\nthe generated XML markup into a stream. The parameters of the function can be\nreferenced directly from within the template. Haml contains syntax elements\nwhich let you print out evaluated code and even pass code directly to the\ngenerated code. Loops and other control flow elements can be used to repeat\nblocks or conditionally display them.\n\nTo fullfill the needs of the target languages, Haml syntax has to be extended.\nWe need a way to specify the name and type of the parameters given to the\ntemplate. Additionally most languages need a way to execute code before the\nfunction declaration (e.g. to include headers).\n\n## State\n\nHardcode Haml is used in at least one production environment (in which I am\ninvolved). The development is driven by this project as we find bugs and\nimportant missing features. I am confident that Hardcode Haml in its current\nstate is stable and comprehensive enough to be useful in other projects.\n\nIf you are missing a useful feature or find a bug please file an issue on\n[Github](https://github.com/thammi/Hardcode-Haml/issues). Also feel free to\ncontact me there if you have any questions.\n\n## Supported Languages\n\nOutput can currently be generated in several languages\n\n* C++ _(using ostream)_\n* C _(using fputs())_\n* python _(using Pythons file objects)_\n\nOther languages can be implemented with ease. All language implementations are\ncurrently smaller than 100 lines (including whitespaces).\n\nHaml passes code directly to the underlying language, so the language modules\nwon't be interchangable without replacing some code in your templates.\n\n## Hardcode Haml Dialect\n\nSome syntax changes were neccessary to adopt Haml to the target languages.\n\n### Declaration\n\nAs languages like C and C++ do not have tightly built-in dictionary types using\nthose does not come natural in these languages. I therefore decided to use a\nmore native approach to pass the data into the template: Function parameters. To\ndeclare those the Haml syntax has to be extended:\n\n    ? int a, std::string b\n\nThe `?` declares the parameters passed to the templates and starts the actual\ntemplate. An implicit `?` at the start of the document is assumed if there is\nnone explicit declaration.\n\nIntroducing this operator has another advantage: It is possible to introduce\ncode which will be placed outside the actual function processing the template.\nSimply write this code before the `?` declaration. The way this code behaves\ndepends on the language you are using. In C/C++ this code will be added to the\nheader which enables you to include files and declare types used in your\ntemplate.\n\n### Boolean attributes\n\nBoolean attributes are implicit in ruby and detected at runtime. Hardcode Haml\ntries to do as much as possible in the parser and avoids complexity in the\nlanguage modules. Another problem is that not all target languages are able to\ndetermine whether an expression evaluates to a boolean.  Hardcode Haml therefore\nextends the syntax with the '?=' and '?=&gt;' operators for attributes.\n\nBoolean attributes are useful for radiobuttons, checkboxes and select elements.\nSimply write:\n\n    %input(type=\"radio\" checked?=foo)\n\n... or ...\n\n    %input(type=\"radio\"){\"checked\" ?=> foo}\n\nThis code evaluates to the following (X)HTML when `foo` is true:\n\n    <input type=\"radio\" checked=\"checked\">\n\n... and when `foo` is false to:\n\n    <input type=\"radio\">\n\n## Example\n\nThere is an example in the [Wiki](https://github.com/thammi/Hardcode-Haml/wiki/Example-Workflow-%28C++%29).\n\n## Todos\n\n### Tasks\n\n* correct scoping according to indent\n* implement most common syntax/language elements (see below)\n* ...\n* document implemented functionality and introduced syntax extensions of Haml\n* clean up the code (especially in the parser)\n* target language site helper\n* ...\n\n### Syntax/Language Elements\n\n#### Must have\n\n* entity escape (static, dynamic?)\n* filters (infrastructure, some filters)\n\n### May have\n\n* whitespace removal (&lt; and &gt;)\n* conditional comments /\\[] (only needed to support IE afaik)\n* whitespace preservation\n* escaping/unescaping html in evaluations\n\n### Won't implement (in the near future)\n\n* object reference \\[] (too close to the target language)\n\n## Links\n\n* [Official Haml Homepage](http://haml-lang.com/)\n* [Haml \"Reference\"](http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.chaossource.net/hardcode_haml/",
    "keywords": "haml template html web",
    "license": "AGPLv3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "hardcode-haml",
    "package_url": "https://pypi.org/project/hardcode-haml/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/hardcode-haml/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://www.chaossource.net/hardcode_haml/"
    },
    "release_url": "https://pypi.org/project/hardcode-haml/0.2.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Haml for hardcore coders (and C++/C/... projects)",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 837737,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db8feabb7ff55d3da0ab01a78830c05b0d6583278608d31b9bdda5a47e0a6332",
          "md5": "266637378cd90146fe1792317b55d81d",
          "sha256": "fc7233d0972206f68c480c1dec940a3971ecc50b4fbcc153c33620a628d0155b"
        },
        "downloads": -1,
        "filename": "hardcode-haml-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "266637378cd90146fe1792317b55d81d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14575,
        "upload_time": "2013-07-13T18:36:54",
        "upload_time_iso_8601": "2013-07-13T18:36:54.795499Z",
        "url": "https://files.pythonhosted.org/packages/db/8f/eabb7ff55d3da0ab01a78830c05b0d6583278608d31b9bdda5a47e0a6332/hardcode-haml-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af31a62a93c075465eb81e975dc2acfb17af98512340e01d73b1dd9006402ab0",
          "md5": "5f62495b6e1a308064835aa0b1287b75",
          "sha256": "2fe89fe34a9fd7c86380d929a7f2a7044ae9864b1c0500b6f4e28513e353033e"
        },
        "downloads": -1,
        "filename": "hardcode-haml-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5f62495b6e1a308064835aa0b1287b75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14600,
        "upload_time": "2013-08-11T17:07:57",
        "upload_time_iso_8601": "2013-08-11T17:07:57.383555Z",
        "url": "https://files.pythonhosted.org/packages/af/31/a62a93c075465eb81e975dc2acfb17af98512340e01d73b1dd9006402ab0/hardcode-haml-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93ba035e22a56651ee00c45679982d7dfb819164d698eeb5825f52d6ff4c69a0",
          "md5": "b004fd219b797fa3bc885aa40d86dee1",
          "sha256": "04cfe85327a05653646790afa3edc77ba91c51769823f1ddef800427dced786a"
        },
        "downloads": -1,
        "filename": "hardcode-haml-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b004fd219b797fa3bc885aa40d86dee1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15082,
        "upload_time": "2013-08-11T20:06:03",
        "upload_time_iso_8601": "2013-08-11T20:06:03.871685Z",
        "url": "https://files.pythonhosted.org/packages/93/ba/035e22a56651ee00c45679982d7dfb819164d698eeb5825f52d6ff4c69a0/hardcode-haml-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93ba035e22a56651ee00c45679982d7dfb819164d698eeb5825f52d6ff4c69a0",
        "md5": "b004fd219b797fa3bc885aa40d86dee1",
        "sha256": "04cfe85327a05653646790afa3edc77ba91c51769823f1ddef800427dced786a"
      },
      "downloads": -1,
      "filename": "hardcode-haml-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b004fd219b797fa3bc885aa40d86dee1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15082,
      "upload_time": "2013-08-11T20:06:03",
      "upload_time_iso_8601": "2013-08-11T20:06:03.871685Z",
      "url": "https://files.pythonhosted.org/packages/93/ba/035e22a56651ee00c45679982d7dfb819164d698eeb5825f52d6ff4c69a0/hardcode-haml-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}