{
  "info": {
    "author": "E:V:A",
    "author_email": "xdae3v3a@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Version Control",
      "Topic :: System :: Installation/Setup",
      "Topic :: System :: Software Distribution",
      "Topic :: System :: Systems Administration"
    ],
    "description": "### pip-date - Date your pip packages!\n\n[![pypi supported versions][1]][2]\n[![PyPI version][3]][4]\n[![Maintenance][5]][6]\n[![GitHub last commit][7]][8]\n[![Average time to resolve an issue][9]][10]\n\n[1]: https://img.shields.io/pypi/pyversions/pip-date.svg\n[2]: https://pypi.python.org/pypi/pip-date\n[3]: https://badge.fury.io/py/pip-date.svg\n[4]: https://badge.fury.io/py/pip-date\n[5]: https://img.shields.io/badge/Maintained%3F-yes-green.svg\n[6]: https://GitHub.com/E3V3A/pip-date/graphs/commit-activity\n[7]: https://img.shields.io/github/last-commit/E3V3A/pip-date.svg\n[8]: https://github.com/E3V3A/pip-date/commits/master \"Last commits to Master branch\"\n[9]: http://isitmaintained.com/badge/resolution/E3V3A/pip-date.svg\n[10]: http://isitmaintained.com//project/E3V3A/pip-date \"Average time to resolve an issue\"\n\nA simple *Python3* CLI tool to show the installation or modification times of all your pip packages.\n\n| STATUS: | Version | Date | Maintained? |\n|:------- |:------- |:---- |:----------- |\n| Working | `1.0.5` | 2022-01-23 | YES |\n\n---\n\nExample Output:\n\n![Full](./docs/screen1.png)\n\n![Full](./docs/screen2.png)\n\n---\n\n**Q:** *What does **`pip-date`** do?*\n\nThe primary use is for finding the *time* when a certain pip package was last modified or installed. \nIt is basically using one or more of: **atime, ctime** and **mtime** from the file status (*stat*) info.\nThis is essentially equivalent to using the \\*nix *stat* command, but is handled differently on Windows. \n(See below for further details.)\n\nUsing this information, it can show you and highlight packages that may have been corrupted or outdated. \nI also has some functionality of checking packages for outdated and deprecated installation methods. \n\nBut it can do more. Some features are:\n\n- Highlight packages with inconsistent file modification times (*mTime*).\n- Highlight package **versions** which are not conforming to the [PEP-0440](https://www.python.org/dev/peps/pep-0440/) standard.\n- Highlight packages installed with an unusual package distribution *priority* given by:  **`[chk, src, bin, egg, dev]`**\n- Highlight *`setuptools`* dependency packages for easy review\n- Show package installation type:  with pip/wheel as **`wheel`**, and source as **`sdist`**  (**FIX!**)\n- Show package installation location:   **`usr`** for `--user` and **`sys`** for *global* installations.\n- Show correct file modification time, depending on OS/FS architecture (*mtime* vs *ctime*)\n\n**Q:** *What does it **not** do?*\n\n- Does not install packages\n- Does not show dependencies\n- Does not (yet) show packages in a *`virtualenv`* or *`pipenv`* envrionment (**ToDo**)\n- Does not check package consistency \n- Does not show the very first time you installed a package, if it has been updated since.  \n  (Althought there are left-over artifacts that may show otherwise, we don't look for these.)\n\n\n**Q:** *Why is this needed?*\n\nIt probably isn't, **BUT**...\n\nBecause python packages often rely on a large number of sub-dependencies, it is very easy to accidentally \noverwrite some required dependency of one package with a different version needed by another package. \nYou will never know about it, until it breaks something. One common scenario causing package corruption \nis that you have installed some package XXX using pip, but then get an OS update and install the update \nusing you OS packagemanagement system, like `apt-get install XXX`, which would probably overwrite the \n*globally* installed pip package. This is especially true for beginners of python, who has not yet learned \nhow to use a virtual environment, and installing evything in either the global system (default) or \nuser (`--user`) environments. This may also occur when installing packages from sources, or when \nyou have to run some other non-pip installers like `setup.py`, `make install` or like, \nand you don't really know what it is going to do. \n\n\n**Q:** *What else is included?*\n\n* A script called **`pip-describe`**, that will do what *pip* doesn't, which is to show the \nfull-text `long_description` for **any** PyPI package (including those not already installed).\n\n* A script called **`pipbyday`**, that will print a simple table with:  \n  `mTime/aTime` +  `package-name` + `package-version`, sorted by time.\n\n* A script called **`pyfileinfo`**, that will show detailed file and date information \nfor a given file using python's `os.stat` info.\n\n* A script called **`pyOSinfo`**, that will print a number of *os, system* \nand *platform* variables, as seen by your Python interpreter.\n\n* **`NEW`** A script called (hold your breath!) **`pip-search`**, that will download and \nsearch all of the PyPi package database for packages matching your search criteria. \nHowever, for colored and sexy package searches, I recommend using [pip_search](https://github.com/victorgarric/pip_search).\nAlso, for cool powershell wrapper of pip-search, read [this](https://github.com/E3V3A/pip-date/issues/17#issuecomment-1019325517).\n\n**Q:** *Will I continue to support this tool?*\n\nSure, if it is broken, but I will not spend any more time for new features. So if you would like to add \nsomething just send me a PR, or at the very least, a detailed code snippet of what I need to implement.\n\n---\n\n### Dependencies\n\n\n* [requests](https://github.com/requests/requests) - used by `pip-describe` to get PyPI info\n* [lxml](https://github.com/lxml/lxml) - used by `pip-search` to parse html from PyPI\n\nand what you already have: \n* [Python3](https://www.python.org/) \n* [pip](https://github.com/pypa/pip/)\n\n\n### Installation \n\nThere is nothing to install really. Just download the `pip-date.py` file and make sure to place it in your `PATH`.\n\n**For pip installation:**\n\n```bash\npip install pip-date\n```\n\n\n**For single file installation:**\n\n```bash\ncd /usr/bin/\nwget https://github.com/E3V3A/pip-date/raw/master/pip-date\nchmod 755 pip-date\n```\n\n\n**For developer installation:**\n\n```bash\ngit clone https://github.com/E3V3A/pip-date.git\ncd pip-date\npip install pip-date --user\n```\n\n\n### How to Run\n\n```bash\npip-date      # When it's in your PATH\n./pip-date    # When it's not in your PATH\n```\n\n---\n\n### References:\n\n**Time Stamps**\n\nIt's quite amusing to see how different OS's and File System's (FS) are handling file time stamps.\nIn the Linux world the available time stamps are called [atime](), [ctime]() and [mtime](), where \nthey are generally available through the *`stat`* command. However, Windows systems doesn't have \nthis commmand because they are using a different way to *blah blah*... \n\nTo summarize the issue of finding the *`\"last modification time\"`* (*mtime*) when using Python on a \nWindows architechture, we need to use *`ctime`* instead. Thus we use `platform.architecture()` to \ncheck the machine's *(bits, linkage)* tuple for the \"WindowsPE\" string, and blatantly assuming\nthat it has a Windows FS that need *ctime*, and that anything else should use *mtime*. \n\nThen we use: `os.path.getctime(pkg_loc)` to get the file time stamp.\n\nFor all the gory details, see: \n[here](https://linuxhandbook.com/file-timestamps/), \n[here](https://www.unixtutorial.org/atime-ctime-mtime-in-unix-filesystems/) and \n[here](https://en.wikipedia.org/wiki/MAC_times). \n\n---\n\n#### Glossary:\n\n* **`bdist`** - *\"Built Distribution\"*:  \n\tA Distribution format containing files and metadata that only need \n    to be moved to the correct location on the target system, to be \n    installed. *Wheel* is such a format, whereas distutilâ€™s *Source \n    Distribution* is not, in that it requires a build step before it \n\tcan be installed. (A **\"Binary Distribution\"** is also a *bdist*, but \n\twith additional compiled extensions.)\n\n* **`sdist`** - *\"Source Distribution\"*:  \n    A distribution format (usually generated using python setup.py \n    sdist) that provides metadata and the essential source files needed \n    for installing by a tool like pip, or for generating a Built \n    Distribution.\n\n* **`egg`** - **[deprecated]**:  \n    The older *Built Distribution* format introduced by *setuptools*, \n\twhich is being replaced by *wheel*.\n\n* **`wheel`** - \"\":  \n    A *Built Distribution* **format** introduced by [**`PEP-0427`**](https://www.python.org/dev/peps/pep-0427/), which is \n\tintended to replace the \"egg\" format. A wheel (`bdist_wheel`) is a \n\tZIP-format archive with a specially formatted file name and using \n\tthe **`.whl`** extension. Normally, you need one wheel file for each \n\toperating system and architechture. And that list can get long for big \n\tprojects, like *numpy*.\n\n\n---\n\n#### Recommeded or Similar Tools:\n\n- **[pip-check](https://github.com/bartTC/pip-check/)** - Check you pip package update status with nice ANSI colored CLI\n- **[pip-chill](https://github.com/rbanffy/pip-chill)** - Lists only the dependencies (or not) of installed packages\n- **[pip_search](https://github.com/victorgarric/pip_search)** - Victor's amazing pip search replacement\n- **[venvlink](https://github.com/np-8/venvlink)** - Using virtual environments outside of the project folder, like a boss!\n---\n\n#### Bugs and Warnings\n\nNone\n\n\n#### ToDo / Help Needed\n\nSee issues marked [ToDo](https://github.com/E3V3A/pip-date/issues?q=is%3Aopen+is%3Aissue+label%3AToDo).\n\n#### Contribution\n\nFeel free to post issues and PR's related to this tool.  \nFeel free to fork, break, fix and contribute. Enjoy!\n\n\n#### Additional Badges\n\n[![build status][11]][12] [![Codacy Badge][13]][14] [![codecov][15]][16]\n\n---\n\n#### License\n\n[![GitHub license][21]][22]  \nA license to :sparkling_heart:!\n\n<sub>I use `GPLv3` because sharing code modifications is more beneficial for the world.</sub>\n\n[11]: https://ci.appveyor.com/api/projects/status/github/pip-date/pip-date?branch=master&svg=true\n[12]: https://ci.appveyor.com/project/pip-date/pip-date\n[13]: https://api.codacy.com/project/badge/Grade/176ceaabe43d4113b535f2fbd0487a9e\n[14]: https://www.codacy.com/app/E3V3A/pip-date?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=E3V3A/pip-date&amp;utm_campaign=Badge_Grade\n[15]: https://codecov.io/gh/pip-date/pip-date/branch/master/graph/badge.svg\n[16]: https://codecov.io/gh/pip-date/pip-date\n\n[21]: https://img.shields.io/github/license/E3V3A/pip-date.svg\n[22]: https://github.com/E3V3A/pip-date/blob/master/LICENSE.txt\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/E3V3A/pip-date/",
    "keywords": "pip date package management setuptools wheel egg stat os",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pip-date",
    "package_url": "https://pypi.org/project/pip-date/",
    "platform": "",
    "project_url": "https://pypi.org/project/pip-date/",
    "project_urls": {
      "Bug Reports": "https://github.com/E3V3A/pip-date/issues",
      "Homepage": "https://github.com/E3V3A/pip-date/"
    },
    "release_url": "https://pypi.org/project/pip-date/1.0.5/",
    "requires_dist": [
      "requests",
      "lxml"
    ],
    "requires_python": ">=3",
    "summary": "Show the installation/modification times of all your pip packages and other tools",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12656986,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7284c691584fbb260003f4b66ccbbb653cd4f1460f6c5d72043fa37596a19661",
          "md5": "b87eb3e9b533b8ab8f0897be68377289",
          "sha256": "ddb055f0036f9595e72b35040d034acc448dfd4970addc1072d0f2531196f009"
        },
        "downloads": -1,
        "filename": "pip_date-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b87eb3e9b533b8ab8f0897be68377289",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 18369,
        "upload_time": "2018-11-25T16:00:09",
        "upload_time_iso_8601": "2018-11-25T16:00:09.147302Z",
        "url": "https://files.pythonhosted.org/packages/72/84/c691584fbb260003f4b66ccbbb653cd4f1460f6c5d72043fa37596a19661/pip_date-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaa7515e8476fe8532b8b9df40a03a36ed8f4ef68b2219b173b7d8849ff0ae99",
          "md5": "f95ec9f81a7f20c75b6dd4c791aec3fe",
          "sha256": "7b6505aa3e2074a4da2c26d42032c1a184ab3afe8733242cd785c03580553f02"
        },
        "downloads": -1,
        "filename": "pip_date-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f95ec9f81a7f20c75b6dd4c791aec3fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 22370,
        "upload_time": "2018-12-01T22:43:14",
        "upload_time_iso_8601": "2018-12-01T22:43:14.239127Z",
        "url": "https://files.pythonhosted.org/packages/ea/a7/515e8476fe8532b8b9df40a03a36ed8f4ef68b2219b173b7d8849ff0ae99/pip_date-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a96430d1f76ab7cbff9e2a45a812fbae4d4784232022e731f216c184b6ffe6f",
          "md5": "bb10962e98acafba5a9d90433fbb285c",
          "sha256": "b8bd8c814c8413eb717e3128ace4d2b8ca9bd6d43527552d3b49b53180e7995d"
        },
        "downloads": -1,
        "filename": "pip_date-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb10962e98acafba5a9d90433fbb285c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 25422,
        "upload_time": "2019-02-08T15:54:27",
        "upload_time_iso_8601": "2019-02-08T15:54:27.558489Z",
        "url": "https://files.pythonhosted.org/packages/3a/96/430d1f76ab7cbff9e2a45a812fbae4d4784232022e731f216c184b6ffe6f/pip_date-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c316dc83383f0c661acb95af85d974d81352e0d6139d3080e81dfa4d46c34dc",
          "md5": "10f91979c064cead279673f38bef6410",
          "sha256": "e9c3729d3f3b5482881b074cf838bcb348318d3a7935fb71f1f54098f4ae4a28"
        },
        "downloads": -1,
        "filename": "pip_date-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10f91979c064cead279673f38bef6410",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 32677,
        "upload_time": "2022-01-23T01:23:05",
        "upload_time_iso_8601": "2022-01-23T01:23:05.390564Z",
        "url": "https://files.pythonhosted.org/packages/4c/31/6dc83383f0c661acb95af85d974d81352e0d6139d3080e81dfa4d46c34dc/pip_date-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5582d05fc610c3938dd300a7147a40dd9d4650a22157201528ecafcab0b40b6",
          "md5": "3a1ebaa5aac465c06ee64a6ab7aa8b83",
          "sha256": "9ed7192a5f475af8a7bd82ec2b3fa53ae0795908c0d850cdc23377e4f54ae3e8"
        },
        "downloads": -1,
        "filename": "pip_date-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a1ebaa5aac465c06ee64a6ab7aa8b83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 32978,
        "upload_time": "2022-01-23T02:57:30",
        "upload_time_iso_8601": "2022-01-23T02:57:30.570782Z",
        "url": "https://files.pythonhosted.org/packages/b5/58/2d05fc610c3938dd300a7147a40dd9d4650a22157201528ecafcab0b40b6/pip_date-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5582d05fc610c3938dd300a7147a40dd9d4650a22157201528ecafcab0b40b6",
        "md5": "3a1ebaa5aac465c06ee64a6ab7aa8b83",
        "sha256": "9ed7192a5f475af8a7bd82ec2b3fa53ae0795908c0d850cdc23377e4f54ae3e8"
      },
      "downloads": -1,
      "filename": "pip_date-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a1ebaa5aac465c06ee64a6ab7aa8b83",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 32978,
      "upload_time": "2022-01-23T02:57:30",
      "upload_time_iso_8601": "2022-01-23T02:57:30.570782Z",
      "url": "https://files.pythonhosted.org/packages/b5/58/2d05fc610c3938dd300a7147a40dd9d4650a22157201528ecafcab0b40b6/pip_date-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}