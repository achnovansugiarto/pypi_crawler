{
  "info": {
    "author": "Yoav Abadi",
    "author_email": "yoavabadi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Pypelinerr\n=========\n[![python-versions](https://img.shields.io/badge/python-3.6-blue?logo=python)](https://img.shields.io/pypi/pyversions/pypelinerr)\n[![pypi-badge](https://img.shields.io/pypi/v/pypelinerr.svg)](https://pypi.org/project/pypelinerr)\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](/LICENSE)\n\n[Railway Oriented Programming](https://fsharpforfunandprofit.com/rop/) implementation for Python.\n\n## Motivation\nHandling events that trigger a sequence of commands or side-effects can be extremely elegant using the railway pattern.\nThis package can allow you to create a dedicated pipeline for each flow or event, that will preform the tasks in an ordered fashion. \n\n## Basic Usage\n\n1. Create a class that inherit from `Pipeline`, with `phases` method:\n```python\nfrom pypelinerr import Pipeline\n\n\nclass SomeEventHandler(Pipeline):\n    def phases(self):\n        return [\n            'phase_one',\n            'phase_two',\n            'phase_three'\n        ]\n\n    def phase_one(self):\n        self.options['option_for_second_phase'] = True\n\n    def phase_two(self):\n        if 'option_for_second_phase' in self.options:\n            return 'an option got passed from first phase, cool!'\n\n    def phase_three(self):\n        self.options['reached_third_phase'] = True\n```\n2. in the pypeline manager, use `SomeEventHandler(options).run()`, where `options` are the input to the pipeline flow.\n\n## Example\nFor example, if you create a pipeline that first connects to a database, then fetches the a document by an id, validates it, and finally send a post request of the entry's user_id, it can look like this:\n```python\nimport requests\nfrom pymongo import MongoClient\n\nfrom pypelinerr import Pipeline\n\n\nclass RetrieveDataAndPost(Pipeline):\n    def phases(self):\n        return [\n            'connect_to_mongo',\n            'fetch_document',\n            'validate_document',\n            'post_results'\n        ]\n\n    def connect_to_mongo(self):\n        self.options['albums_collection'] = MongoClient('<MongoDB_URL>').albums\n\n    def fetch_document(self):\n        album_id = self.options.get('album_id')\n        self.options['album'] = self.options['albums_collection'].find_one({ 'id': album_id })\n\n    def validate_document(self):\n        if 'artist_name' not in self.options['album']:\n            self.fail_operation()\n\n    def post_results(self):\n        selected_artist =  self.options.get('album').get('artist_name')\n        requests.post('<Artists_Service_URL>', data={'selected_artist': selected_artist})\n```\n## Features\n\n\n### Break operation\nCalling the `break_operation(message?)` allows you to break from the pipeline's (event's handler) pipeline on an invalid result, without failing the whole pipeline.\nAn example for such a use-case is when checking in a DataBase if an entity not exists, and if so - not continuing the pipeline's flow.\n\nIn the bellow flow, we want to process a [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) event named `OrderCreated` of our online shop, \nwhere if the user details not present in our DB, we would not want to proceed, because only signed-up users can create an order:\n\n```python\nfrom pypelinerr import Pipeline\n\n\nclass OrderCreated(Pipeline):\n    def phases(self):\n        return [\n            'validate_user_exists',\n            'create_an_order',\n            '...',\n            '...'\n        ]\n\n    def validate_user_exists(self):\n        user = db.user_collection.find_one({'id': self.options['user_id']})\n        if not user:\n            self.break_operation(message='user not in mongo collection')\n\n    def create_an_order(self):\n        ...\n\n```\n\n\n### Fail operation\nBy calling `fail_operation(message?)`, we can stop *and* fail the pipeline's operation.\nThis can be very useful in case of, for example, a momentarily network connection issue with another service or a remote DB,\nwhen you will want to send the pipeline's operation result object to a failed-queue, for later processing of the event from the phase\nit failed, and with the current options. \n\nWe can also `raise` an Exception and it will count as a failed-operation, but in a case where we have a wrapper around the service call /\nDB access which already catches the exception, this is very useful:\n\nOther Module that handle mongo connection:\n```python\n\nfrom pymongo import MongoClient\n\n\nclass UserCollection:\n    def init_connection(self):\n        try:\n            return MongoClient('<MongoDB_URL>').db.user_collection\n        except Exception as e:\n            return None\n    ...\n```\n\nOur pypeline:\n```python\nfrom models.user import UserCollection\nfrom pypelinerr import Pipeline\n\n\nclass OrderCreated(Pipeline):\n    def phases(self):\n        return [\n            'validate_user_exists',\n            'create_an_order',\n            '...',\n            '...'\n        ]\n\n    def validate_user_exists(self):\n        user_collection =  UserCollection().init_connection()\n        if not user_collection:\n            self.fail_operation(message='mongo connection failure')\n\n    def create_an_order(self):\n        ...\n\n```\n\n### Schema\nThe Schema mechanism allows us to validate the messages (the event payload) been passed to the pipeline,\nbefore the pipeline itself starts:\n```python\nschema = Schema({'user_id': int, 'logged_in': bool})\nevent_payload = {'user_id': 'not a number', 'logged_in': True}\nOrderCreated(options=event_payload, schema=schema).run()\n```\nThis run will result in a failure, with a fail message of:\n```schema.SchemaUnexpectedTypeError: 'not a number' should be instance of 'int'```\n\n\n### entry_phase\nThe entry phase allow us to use the pipeline from a specific phase, and skip it's previous phases.\nThe most common use-case for this is re-running the pipeline in a case of failure, or using only a small part of the\nwhole pipeline.\n```python\nevent_payload = {'user_id': 123, 'logged_in': True}\nOrderCreated(options=event_payload, entry_phase='create_an_order').run()\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yoavabadi/pypelinerr",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pypelinerr",
    "package_url": "https://pypi.org/project/pypelinerr/",
    "platform": "",
    "project_url": "https://pypi.org/project/pypelinerr/",
    "project_urls": {
      "Homepage": "https://github.com/yoavabadi/pypelinerr"
    },
    "release_url": "https://pypi.org/project/pypelinerr/0.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Railway pattern based pypeline package",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12248870,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f4f7b392451f3aca1fc2d0ad32a2b4f5e6bcaaf45ed921e280985cef3546004",
          "md5": "0d328e99350e1fed213f02712eee37f6",
          "sha256": "41131532d1df6a987d20ef48c152f039f8f4af9f79c1b09306cf2d48e0bf6ebe"
        },
        "downloads": -1,
        "filename": "pypelinerr-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d328e99350e1fed213f02712eee37f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6165,
        "upload_time": "2020-09-18T14:18:55",
        "upload_time_iso_8601": "2020-09-18T14:18:55.846360Z",
        "url": "https://files.pythonhosted.org/packages/0f/4f/7b392451f3aca1fc2d0ad32a2b4f5e6bcaaf45ed921e280985cef3546004/pypelinerr-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fce7ff27433cc4a9e23ce8be7f5cc259b0a41dbda1352e535c17d6276472848c",
          "md5": "51d649d2fa3cf52be6a79c4a287c2a41",
          "sha256": "8fc3e33e3faf818d964b24df65dfd7e34bb1ac2feb0699367d58ebfe399329b1"
        },
        "downloads": -1,
        "filename": "pypelinerr-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "51d649d2fa3cf52be6a79c4a287c2a41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5083,
        "upload_time": "2020-09-18T14:18:58",
        "upload_time_iso_8601": "2020-09-18T14:18:58.492583Z",
        "url": "https://files.pythonhosted.org/packages/fc/e7/ff27433cc4a9e23ce8be7f5cc259b0a41dbda1352e535c17d6276472848c/pypelinerr-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c554d3429a4390bcf0e5a1f78e439939f80083a03ddfb6d0f9c1cd29dd58a28e",
          "md5": "0207d4d2aafb2bc261efcdf4028d094e",
          "sha256": "4266af44f0356de22979a6bdc9aa00a522624870b4caab531ce02dcc4b2b7228"
        },
        "downloads": -1,
        "filename": "pypelinerr-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0207d4d2aafb2bc261efcdf4028d094e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6151,
        "upload_time": "2020-09-18T14:35:23",
        "upload_time_iso_8601": "2020-09-18T14:35:23.505599Z",
        "url": "https://files.pythonhosted.org/packages/c5/54/d3429a4390bcf0e5a1f78e439939f80083a03ddfb6d0f9c1cd29dd58a28e/pypelinerr-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67bed465efe5507b0d51428571daab8849d92183f7d291c8d44d6b636e7f94b8",
          "md5": "e5a061a0aa53ccc0dc1aa0c6db1390dc",
          "sha256": "4ab8022b4bfa6027441a2a82508c1ad5f0594b4b490efb36c30170366bbdd2c5"
        },
        "downloads": -1,
        "filename": "pypelinerr-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e5a061a0aa53ccc0dc1aa0c6db1390dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5113,
        "upload_time": "2020-09-18T14:35:24",
        "upload_time_iso_8601": "2020-09-18T14:35:24.406699Z",
        "url": "https://files.pythonhosted.org/packages/67/be/d465efe5507b0d51428571daab8849d92183f7d291c8d44d6b636e7f94b8/pypelinerr-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a70f716ea61ec6f37fb57d324c4d49c2ef84b8e6c72c374b8bfc9f1b6c414d63",
          "md5": "fbbe6c361e547e0b819bc7e48bb1a861",
          "sha256": "3aa18090a2ca56552a1dd43b511b090ac0fe966ccf3ca78de6f2eeb6d52af360"
        },
        "downloads": -1,
        "filename": "pypelinerr-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fbbe6c361e547e0b819bc7e48bb1a861",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6162,
        "upload_time": "2021-12-08T20:53:27",
        "upload_time_iso_8601": "2021-12-08T20:53:27.321916Z",
        "url": "https://files.pythonhosted.org/packages/a7/0f/716ea61ec6f37fb57d324c4d49c2ef84b8e6c72c374b8bfc9f1b6c414d63/pypelinerr-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45454a95446f6cf1e98a9230d9641a7c7c0fb9147c37c2f598a107267c9b101a",
          "md5": "6140a55934d115147b75881bb23b1be5",
          "sha256": "e03fbb35862ba776f636f811d8bc696b325e5988da3fe10bba12ba57f53c77fd"
        },
        "downloads": -1,
        "filename": "pypelinerr-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "6140a55934d115147b75881bb23b1be5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5293,
        "upload_time": "2021-12-08T20:53:28",
        "upload_time_iso_8601": "2021-12-08T20:53:28.410771Z",
        "url": "https://files.pythonhosted.org/packages/45/45/4a95446f6cf1e98a9230d9641a7c7c0fb9147c37c2f598a107267c9b101a/pypelinerr-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a70f716ea61ec6f37fb57d324c4d49c2ef84b8e6c72c374b8bfc9f1b6c414d63",
        "md5": "fbbe6c361e547e0b819bc7e48bb1a861",
        "sha256": "3aa18090a2ca56552a1dd43b511b090ac0fe966ccf3ca78de6f2eeb6d52af360"
      },
      "downloads": -1,
      "filename": "pypelinerr-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fbbe6c361e547e0b819bc7e48bb1a861",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6162,
      "upload_time": "2021-12-08T20:53:27",
      "upload_time_iso_8601": "2021-12-08T20:53:27.321916Z",
      "url": "https://files.pythonhosted.org/packages/a7/0f/716ea61ec6f37fb57d324c4d49c2ef84b8e6c72c374b8bfc9f1b6c414d63/pypelinerr-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45454a95446f6cf1e98a9230d9641a7c7c0fb9147c37c2f598a107267c9b101a",
        "md5": "6140a55934d115147b75881bb23b1be5",
        "sha256": "e03fbb35862ba776f636f811d8bc696b325e5988da3fe10bba12ba57f53c77fd"
      },
      "downloads": -1,
      "filename": "pypelinerr-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "6140a55934d115147b75881bb23b1be5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5293,
      "upload_time": "2021-12-08T20:53:28",
      "upload_time_iso_8601": "2021-12-08T20:53:28.410771Z",
      "url": "https://files.pythonhosted.org/packages/45/45/4a95446f6cf1e98a9230d9641a7c7c0fb9147c37c2f598a107267c9b101a/pypelinerr-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}