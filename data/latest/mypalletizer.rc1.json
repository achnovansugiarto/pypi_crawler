{
  "info": {
    "author": "Zachary zhang",
    "author_email": "lijun.zhang@elephantrobotics.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# This is Python API for mypalletizer\n# pymycobot\n\n**This is python API for mycobot.**\n\nWe support Python2, Python3.5 or later.\n\n<details>\n<summary>Catalogue:</summary>\n\n<!-- vim-markdown-toc GFM -->\n\n* [MyCobot](#mycobot)\n\t* [Overall status](#overall-status)\n\t\t* [power_on](#power_on)\n\t\t* [power_off](#power_off)\n\t\t* [is_power_on](#is_power_on)\n\t\t* [release_all_servos](#release_all_servos)\n\t\t* [is_controller_connected](#is_controller_connected)\n\t* [MDI mode and operation](#mdi-mode-and-operation)\n\t\t* [get_angles](#get_angles)\n\t\t* [send_angle](#send_angle)\n\t\t* [send_angles()](#send_angles)\n\t\t* [get_radians](#get_radians)\n\t\t* [send_radians](#send_radians)\n\t\t* [get_coords](#get_coords)\n\t\t* [send_coord](#send_coord)\n\t\t* [send_coords](#send_coords)\n\t\t* [sync_send_angles](#sync_send_angles)\n\t\t* [sync_send_coords](#sync_send_coords)\n\t\t* [is_in_position](#is_in_position)\n\t* [JOG mode and operation](#jog-mode-and-operation)\n\t\t* [jog_angle](#jog_angle)\n\t\t* [jog_coord](#jog_coord)\n\t\t* [jog_stop](#jog_stop)\n\t\t* [pause](#pause)\n\t\t* [resume](#resume)\n\t\t* [stop](#stop)\n\t\t* [is_paused](#is_paused)\n\t\t* [set_encoder](#set_encoder)\n\t\t* [get_encoder](#get_encoder)\n\t\t* [set_encoders](#set_encoders)\n\t\t* [get_encoders](#get_encoders)\n\t* [Running status and Settings](#running-status-and-settings)\n\t\t* [get_speed](#get_speed)\n\t\t* [set_speed](#set_speed)\n\t\t* [get_joint_min_angle](#get_joint_min_angle)\n\t\t* [get_joint_max_angle](#get_joint_max_angle)\n\t* [Servo control](#servo-control)\n\t\t* [is_servo_enable](#is_servo_enable)\n\t\t* [is_all_servo_enable](#is_all_servo_enable)\n\t\t* [set_servo_data](#set_servo_data)\n\t\t* [get_servo_data](#get_servo_data)\n\t\t* [set_servo_calibration](#set_servo_calibration)\n\t\t* [release_servo](#release_servo)\n\t\t* [focus_servo](#focus_servo)\n\t* [Atom IO](#atom-io)\n\t\t* [set_color](#set_color)\n\t\t* [set_pin_mode](#set_pin_mode)\n\t\t* [set_digital_output()](#set_digital_output)\n\t\t* [get_digital_input()](#get_digital_input)\n\t\t* [set_pwm_output()](#set_pwm_output)\n\t\t* [get_gripper_value](#get_gripper_value)\n\t\t* [set_gripper_state](#set_gripper_state)\n\t\t* [set_gripper_value](#set_gripper_value)\n\t\t* [set_gripper_ini](#set_gripper_ini)\n\t\t* [is_gripper_moving](#is_gripper_moving)\n\t* [Basic](#basic)\n\t\t* [get_basic_output](#get_basic_output)\n\t\t* [set_basic_output](#set_basic_output)\n* [Angle](#angle)\n* [Coord](#coord)\n* [utils (Module)](#utils-module)\n\t* [get_port_list](#get_port_list)\n\t* [detect_port_of_basic](#detect_port_of_basic)\n\n<!-- vim-markdown-toc -->\n</details>\n\n# MyCobot\n\n**Import to your project**:\n\n```python\nfrom pymycobot import MyCobot\n```\n\n> Note: If no parameter is given, there is no parameter; if no return value is given, there is no return value\n\n## Overall status\n\n### power_on\n\n- **Prototype**: `power_on()`\n\n- **Description**:Atom open communication (default open).\n\n### power_off\n\n- **Prototype**: `power_off()`\n\n- **Description**: Atom turn off communication.\n\n### is_power_on\n\n- **Prototype**: `is_power_on()`\n\n- **Description**: Adjust robot arm whether power on.\n\n- **Returns**\n\n  - `1`: power on\n  - `0`: power off\n  - `-1`: error\n\n### release_all_servos\n\n- **Prototype**: `release_all_servos()`\n\n- **Description**: Set robot arm into free moving mode.\n\n### is_controller_connected\n\n- **Prototype**: `is_controller_connected()`\n\n- **Description**: Check if connected with Atom.\n\n- **Returns**\n\n  - `1`: connected\n  - `0`: not connected\n  - `-1`: error\n\n## MDI mode and operation\n\n### get_angles\n\n- **Prototype**: `get_angles()`\n\n- **Description**: Get the degree of all joints.\n\n- **Returns**: `list`: A float list of all degree.\n\n### send_angle\n\n- **Prototype**: `send_angles(id, degree, speed)`\n\n- **Description**: Send one degree of joint to robot arm.\n\n- **Parameters**\n\n  - `id`: Joint id(`genre.Angle`) / int 1-6\n  - `degree`: degree value(`float`) (about -170 ï½ž 170)\n  - `speed`: (`int`) 0 ~ 100\n\n- **Example**\n\n  ```python\n  from pymycobot.mycobot import MyCobot\n  from pymycobot.genre import Angle\n\n\n  mycobot = MyCobot('/dev/ttyUSB0')\n  mycobot.send_angle(Angle.J2.value, 10, 50)\n  ```\n\n### send_angles()\n\n- **Prototype**: `send_angles(degrees, speed)`\n\n- **Description**: Send the degrees of all joints to robot arm.\n\n- **Parameters**\n\n  - `degrees`: a list of degree value(`List[float]`), length 6.\n\n  - `speed`: (`int`) 0 ~ 100\n\n- **Example**\n\n  ```python\n  from pymycobot.mycobot import MyCobot\n  from pymycobot.genre import Angle\n\n\n  mycobot = MyCobot('/dev/ttyUSB0')\n  mycobot.send_angles([0,0,0,0,0,0], 80)\n  ```\n\n### get_radians\n\n- **Prototype**: `get_radians()`\n\n- **Description**: Get the radians of all joints.\n\n- **Returns**: `list`: A float list of radian.\n\n### send_radians\n\n- **Prototype**: `send_radians(radians, speed)`\n\n- **Description**: Send the radians of all joint to robot arm.\n\n- **Parameters**:\n\n  - `radians`: a list of radian value(`List[float]`), length 6.\n  - `speed`: (`int`) 0 ~ 100\n\n- **Example**\n\n  ```python\n  from pymycobot.mycobot import MyCobot\n  from pymycobot.genre import Angle\n\n\n  mycobot = MyCobot('/dev/ttyUSB0')\n  mycobot.send_angles_by_radian([1,1,1,1,1,1], 70)\n  ```\n\n### get_coords\n\n- **Prototype**: `get_coords()`\n\n- **Description**: Get the Coords from robot arm, coordinate system based on base.\n\n- **Returns**: `list`: A float list of coord - `[x, y, z, rx, ry, rz]`\n\n### send_coord\n\n- **Prototype**: `get_coords(id, coord, speed)`\n\n- **Description**: Send one coord to robot arm.\n\n- **Parameters**\n\n  - `id`: coord id(`genre.Coord`) / int 1-6\n  - `coord`: coord value(`float`)\n  - `speed`: (`int`) 0 ~ 100\n\n- **Example**\n\n  ```python\n  from pymycobot.mycobot import MyCobot\n  from pymycobot.genre import Coord\n\n\n  mycobot = MyCobot('/dev/ttyUSB0')\n  mycobot.send_coord(Coord.X.value, -40, 70)\n  ```\n\n### send_coords\n\n- **Prototype**: `send_coords(coords, speed, mode)`\n\n- **Description**: Send all coords to robot arm.\n\n- **Parameters**\n\n  - `coords`: a list of coords value(`List[float]`), length 6.\n  - `speed`: (`int`) 0 ~ 100\n  - `mode`: (`int`): `0` - angular, `1` - linear\n\n- **Example**\n\n  ```python\n  from pymycobot.mycobot import MyCobot\n  from pymycobot.genre import Coord\n\n\n  mycobot = MyCobot('/dev/ttyUSB0')\n  mycobot.send_coords([160, 160, 160, 0, 0, 0], 70, 0)\n  ```\n\n### sync_send_angles\n\n- **Prototype**: `sync_send_angles(degrees, speed, timeout=7)`\n\n- **Description**: Send the angle in synchronous state and return when the target point is reached\n\n- **Parameters**\n\n  - `degrees`: a list of degree value(`List[float]`), length 6.\n  - `speed`: (`int`) 0 ~ 100\n  - `timeout`: default 7s.\n\n### sync_send_coords\n\n- **Prototype**: `sync_send_coords(coords, speed, mode, timeout=7)`\n\n- **Description**: Send the coord in synchronous state and return when the target point is reached\n\n- **Parameters**\n\n  - `coords`: a list of coords value(`List[float]`)\n  - `speed`: (`int`) 0 ~ 100\n  - `mode`: (`int`): `0` - angular, `1` - linear\n  - `timeout`: default 7s.\n\n### is_in_position\n\n- **Prototype**: `is_in_position(data, flag)`\n\n- **Description**: Judge whether in the position.\n\n- **Parameters**\n\n  - `data`: A data list, angles or coords, length 6.\n  - `flag`: Tag the data type, `0` - angles, `1` - coords.\n\n- **Returns**\n\n  - `1` - true\n  - `0` - false\n  - `-1` - error\n\n## JOG mode and operation\n\n### jog_angle\n\n- **Prototype**: `jog_angle(joint_id, direction, speed)`\n\n- **Description**: Jog control angle\n\n- **Parameters**\n\n  - `joint_id`: (`int`) 1 ~ 6\n  - `direction`: `0` - decrease, `1` - increase\n  - `speed`: 0 ~ 100\n\n### jog_coord\n\n- **Prototype**: `jog_coord(coord_id, direction, speed)`\n\n- **Description**: Jog control coord.\n\n- **Parameters**\n\n  - `coord_id`: (`int`) 1 ~ 6\n  - `direction`: `0` - decrease, `1` - increase\n  - `speed`: 0 ~ 100\n\n### jog_stop\n\n- **Prototype**: `jog_stop()`\n\n- **Description**: Stop jog moving.\n\n### pause\n\n- **Prototype**: `pause()`\n\n- **Description**: Pause movement.\n\n### resume\n\n- **Prototype**: `resume()`\n\n- **Description**: Recovery movement.\n\n### stop\n\n- **Prototype**: `stop()`\n\n- **Description**: Stop moving.\n\n### is_paused\n\n- **Prototype**: `is_paused()`\n\n- **Description**: Judge whether the manipulator pauses or not.\n\n- **Returns** :\n\n  - `1` - paused\n  - `0` - not paused\n  - `-1` - error\n\n### set_encoder\n\n- **Prototype**: `set_encoder(joint_id, encoder)`\n\n- **Description**: Set a single joint rotation to the specified potential value.\n\n- **Parameters**\n\n  - `joint_id`: (`int`) 1 ~ 6\n  - `encoder`: 0 ~ 4096\n\n### get_encoder\n\n- **Prototype**: `get_encoder(joint_id)`\n\n- **Description**:Obtain the specified joint potential value.\n\n- **Parameters**: `joint_id`: (`int`) 1 ~ 6\n\n- **Returns**: `encoder`: 0 ~ 4096\n\n### set_encoders\n\n- **Prototype**: `set_encoders(encoders, sp)`\n\n- **Description**: Set the six joints of the manipulator to execute synchronously to the specified position.\n\n- **Parameters**:\n  - `encoders`: A encoder list, length 6.\n  - `sp`: speed 0 - 100\n\n### get_encoders\n\n- **Prototype**: `get_encoders()`\n\n- **Description**: Get the six joints of the manipulator.\n\n- **Returns**: the list of encoder (`list`)\n\n## Running status and Settings\n\n### get_speed\n\n- **Prototype**: `get_speed()`\n\n- **Description**: Get speed.\n\n- **Returns**: speed: (`int`)\n\n### set_speed\n\n- **Prototype**: `set_speed(speed)`\n\n- **Description**: Set speed.\n\n- **Parameters**: speed: (`int`) 0 ~ 100\n\n### get_joint_min_angle\n\n- **Prototype**: `get_joint_min_angle()`\n- **Description**: Gets the minimum movement angle of the specified joint\n\n- **Parameters**: `joint_id`: (`int`)\n\n- **Returns**: angle value (`float`)\n\n### get_joint_max_angle\n\n- **Prototype**: `get_joint_max_angle()`\n\n- **Description**: Gets the maximum movement angle of the specified joint\n\n- **Parameters**: `joint_id`: (`int`)\n\n- **Returns**: angle value (`float`)\n\n## Servo control\n\n### is_servo_enable\n\n- **Prototype**: `is_servo_enable(servo_id)`\n\n- **Description**: Determine whether all steering gears are connected\n\n- **Parameters**: `servo_id` (`int`) 1 ~ 6\n\n- **Returns**\n\n  - `0`: disable\n  - `1`: enable\n  - `-1`: error\n\n### is_all_servo_enable\n\n- **Prototype**: `is_all_servo_enable()`\n\n- **Description**: Determine whether the specified steering gear is connected\n\n- **Returns**\n\n  - `0`: disable\n  - `1`: enable\n  - `-1`: error\n\n### set_servo_data\n\n- **Prototype**: `set_servo_data(servo_no, data_id, value)`\n- **Description**: Set the data parameters of the specified address of the steering gear.\n\n- **Parameters**:\n  - `servo_no`: Serial number of articulated steering gear, 1 - 6.\n  - `data_id`: Data address.\n  - `value`: 0 - 4096\n\n### get_servo_data\n\n- **Prototype**: `get_servo_data(servo_no, data_id)`\n- **Description**: Read the data parameter of the specified address of the steering gear.\n\n- **Parameters**:\n\n  - `servo_no`: Serial number of articulated steering gear, 1 - 6.\n  - `data_id`: Data address.\n\n- **Returns**: `value`: 0 - 4096\n\n  - `0`: disable\n  - `1`: enable\n  - `-1`: error\n\n### set_servo_calibration\n\n- **Prototype**: `set_servo_calibration(servo_no)`\n- **Description**: The current position of the calibration joint actuator is the angle zero point, and the corresponding potential value is 2048.\n\n- **Parameters**:\n  - `servo_no`: Serial number of articulated steering gear, 1 - 6.\n\n### release_servo\n\n- **Prototype**: `release_servo(servo_id)`\n\n- **Description**: Power off designated servo\n\n- **Parameters**: `servo_id`: 1 ~ 6\n\n### focus_servo\n\n- **Prototype**: `focus_servo(servo_id)`\n\n- **Description**: Power on designated servo\n\n- **Parameters**: `servo_id`: 1 ~ 6\n\n## Atom IO\n\n### set_color\n\n- **Prototype**: `set_color(r, g, b)`\n\n- **Description**: Set the color of the light on the top of the robot arm.\n\n- **Parameters**\n\n  - `r`: 0 ~ 255\n  - `g`: 0 ~ 255\n  - `b`: 0 ~ 255\n\n### set_pin_mode\n\n- **Prototype**: `set_pin_mode(pin_no, pin_mode)`\n- **Description**: Set the state mode of the specified pin in atom.\n- **Parameters**\n\n  - `pin_no` (int): Pin number.\n  - `pin_mode` (int): 0 - input, 1 - output, 2 - input_pullup\n\n### set_digital_output()\n\n- **Parameters**\n\n  - `pin_no` (int):\n  - `pin_signal` (int): 0 / 1\n\n### get_digital_input()\n\n- **Parameters**: `pin_no` (int)\n\n- **Return**: signal value\n\n<!-- ### set_pwm_mode()\n\n- **Description**\n- **Parameters**-->\n\n### set_pwm_output()\n\n- **Prototype**: `set_pwm_output(channel, frequency, pin_val)`\n\n- **Description**: PWM control.\n\n- **Parameters**\n\n  - `channel` (`int`): IO number.\n  - `frequency` (`int`): clock frequency\n  - `pin_val` (`int`): Duty cycle 0 ~ 256; 128 means 50%\n\n### get_gripper_value\n\n- **Prototype**: `get_gripper_value()`\n\n- **Description**: Get gripper value\n\n- **Return**: gripper value (int)\n\n### set_gripper_state\n\n- **Prototype**: `set_gripper_state(flag, speed)`\n\n- **Description**: Set gripper switch state\n\n- **Parameters**\n\n  - `flag` (`int`): 0 - open, 1 - close\n  - `speed` (`int`): 0 ~ 100\n\n### set_gripper_value\n\n- **Prototype**: `set_gripper_value(value, speed)`\n\n- **Description**: Set gripper value\n\n- **Parameters**\n\n  - `value` (int): 1400 ~ 2048\n  - `speed` (int): 0 ~ 100\n\n### set_gripper_ini\n\n- **Prototype**: `set_gripper_ini()`\n\n- **Description**: Set the current position to zero, set current position value is `2048`.\n\n### is_gripper_moving\n\n- **Prototype**: `is_gripper_moving()`\n\n- **Description**: Judge whether the gripper is moving or not\n\n- **Returns**\n\n  - `0` : not moving\n  - `1` : is moving\n  - `-1`: error data\n\n## Basic\n\n### get_basic_output\n\n- **Prototype**: `get_basic_output(pin_no)`\n\n- **Description**: Get bottom pin.\n\n- **Parameters**\n\n  - `pin_no` (`int`) Pin number.\n\n- **Return**: `pin_signal` (`int`) 0 / 1\n\n### set_basic_output\n\n- **Prototype**: `set_basic_output(pin_no, pin_signal)`\n\n- **Description**: Set bottom pin.\n\n- **Parameters**\n\n  - `pin_no` (`int`) Pin number.\n  - `pin_signal` (`int`): 0 / 1\n\n# Angle\n\n```python\nfrom pymycobot import Angle\n```\n\n**Description**\n\nInstance class of joint. It's recommended to use this class to select joint.\n\n# Coord\n\n```python\nfrom pymycobot import Coord\n```\n\n**Description**\n\nInstance class of coord. It's recommended to use this class to select coord.\n\n# utils (Module)\n\nThis module support some help method.\n\n**Usage:**\n\n```python\nfrom pymycobot import utils\n```\n\n## get_port_list\n\n- **Prototype**: `get_port_list()`\n\n- **Description**: Get the all serial port list.\n\n- **Return**: serial port list (`list`)\n\n## detect_port_of_basic\n\n- **Prototype**: `detect_port_of_basic()`\n\n- **Description**: Returns the serial port string of the first detected M5 Basic. If it is not found, it returns `None`.\n\n- **Return**: detected port (`str`) or `None`\n\n- **Example**:\n\n  ```python\n  from pymycobot import MyCobot, utils\n\n  port = utils.detect_port_of_basic()\n  if port is None:\n  \traise Exception('Detection failed.')\n  mycobot = MyCobot(port, 115200)\n  ```\n\n---\n\nMore demo can go to [here](../demo).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/elephantrobotics/mypalletizer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mypalletizer",
    "package_url": "https://pypi.org/project/mypalletizer/",
    "platform": "",
    "project_url": "https://pypi.org/project/mypalletizer/",
    "project_urls": {
      "Homepage": "https://github.com/elephantrobotics/mypalletizer"
    },
    "release_url": "https://pypi.org/project/mypalletizer/1.0.0b1/",
    "requires_dist": [
      "pyserial"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, != 3.4.*",
    "summary": "Python API of serial communication for MyPalletizer series.",
    "version": "1.0.0b1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11270525,
  "releases": {
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4903111c2ea400363e97d2eca933d77c09197a4031ddf45f1906b4ff1a42e0a4",
          "md5": "af7f9ac07891c6755bc1a2fac8244083",
          "sha256": "d9d2921dfc81772c5dad5b0229d826d907a3fe1d72401031a53fc24519d57bb9"
        },
        "downloads": -1,
        "filename": "mypalletizer-1.0.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af7f9ac07891c6755bc1a2fac8244083",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, != 3.4.*",
        "size": 12850,
        "upload_time": "2021-08-11T09:11:42",
        "upload_time_iso_8601": "2021-08-11T09:11:42.012090Z",
        "url": "https://files.pythonhosted.org/packages/49/03/111c2ea400363e97d2eca933d77c09197a4031ddf45f1906b4ff1a42e0a4/mypalletizer-1.0.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d7730ec88432cf90b722e816ad5d675bb8eddb30dae56de27c5106e55bf8d9d",
          "md5": "8328bb45d047456891574124881f9edf",
          "sha256": "d1f4bbeba797a1e2d1c8fd1f6f18f3b0ce7ab7695fb1fd4926f80ee533fc11ac"
        },
        "downloads": -1,
        "filename": "mypalletizer-1.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "8328bb45d047456891574124881f9edf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, != 3.4.*",
        "size": 14636,
        "upload_time": "2021-08-11T09:11:45",
        "upload_time_iso_8601": "2021-08-11T09:11:45.430854Z",
        "url": "https://files.pythonhosted.org/packages/2d/77/30ec88432cf90b722e816ad5d675bb8eddb30dae56de27c5106e55bf8d9d/mypalletizer-1.0.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4903111c2ea400363e97d2eca933d77c09197a4031ddf45f1906b4ff1a42e0a4",
        "md5": "af7f9ac07891c6755bc1a2fac8244083",
        "sha256": "d9d2921dfc81772c5dad5b0229d826d907a3fe1d72401031a53fc24519d57bb9"
      },
      "downloads": -1,
      "filename": "mypalletizer-1.0.0b1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "af7f9ac07891c6755bc1a2fac8244083",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, != 3.4.*",
      "size": 12850,
      "upload_time": "2021-08-11T09:11:42",
      "upload_time_iso_8601": "2021-08-11T09:11:42.012090Z",
      "url": "https://files.pythonhosted.org/packages/49/03/111c2ea400363e97d2eca933d77c09197a4031ddf45f1906b4ff1a42e0a4/mypalletizer-1.0.0b1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d7730ec88432cf90b722e816ad5d675bb8eddb30dae56de27c5106e55bf8d9d",
        "md5": "8328bb45d047456891574124881f9edf",
        "sha256": "d1f4bbeba797a1e2d1c8fd1f6f18f3b0ce7ab7695fb1fd4926f80ee533fc11ac"
      },
      "downloads": -1,
      "filename": "mypalletizer-1.0.0b1.tar.gz",
      "has_sig": false,
      "md5_digest": "8328bb45d047456891574124881f9edf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, != 3.4.*",
      "size": 14636,
      "upload_time": "2021-08-11T09:11:45",
      "upload_time_iso_8601": "2021-08-11T09:11:45.430854Z",
      "url": "https://files.pythonhosted.org/packages/2d/77/30ec88432cf90b722e816ad5d675bb8eddb30dae56de27c5106e55bf8d9d/mypalletizer-1.0.0b1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}