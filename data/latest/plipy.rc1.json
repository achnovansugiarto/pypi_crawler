{
  "info": {
    "author": "Ryan Kelly",
    "author_email": "ryan@rfk.id.au",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "plipy:  a portable linux python\n===============================\n\n \nPlipy is a suite of tools for building and managing a portable linux python\nenvironment.  It aims for a plipy environment to run on most major linux \ndsitros in use today, as well as a good number that should have been phased\n*out* of use many years ago.  It's similar in spirit to `portable python`_ but\ntargeting linux instead of Windows.\n\nThe secret sauce is basically:\n\n  * Using the `autopackage build tools`_ to hide newer glibc symbols, so that\n    compiled libs can be used unmodified on older linux boxen.\n\n  * Setting the rpath on all shared libs to a sensible value, so that their\n    deps can be found regardless of where the plipy env is located.\n\n\nBuilding a plipy environment\n----------------------------\n\nTo build a plipy environment, you'll need at least a recent gcc version and the\n\"chrpath\" tool.  Initialise a new plipy env with the following command::\n\n    #> plipy PATH/TO/ENV init\n\nThis will build and set up a basic python installation (currently python 2.6.5)\nalong with setuptools and pip.  Most python packages  can be installed directly\nusing pip.  For packages with more complex needs a plipy \"recipe\" is provided,\nand you can install them using e.g.::\n\n    #> plipy PATH/TO/ENV install py_wxpython\n\nThis would build and install a custom wxPython version that is patched to \nbe more portable.\n\n\nUsing a plipy environment\n-------------------------\n\nIn the top level of a plipy environment there are three shell scripts named\n\"python\", \"plipy\" and \"shell\".   These set up some relevant environment vars\nand then chainload the appropriate command.\n\nHere's how you might install a third-party package using pip::\n\n    #>\n    #> PATH/TO/ENV/shell\n    plippy(ENV):$\n    plippy(ENV):$ pip install esky\n    ...lots of output as esky is installed...\n    plippy(ENV):$\n    plippy(ENV):$ <ctrl-D>\n    #>\n    \n\nWhat is it good for?\n--------------------\n\nWhy, everything that something like `portable python`_ is good for, except\non linux instead of Windows!  Use it as a convenient portable scripting or\ntesting environment, or to run  multiple python versions side-by-side.\n\nOne thing it's particular good for (actually, the reason it was created) is\nbuilding frozen Python apps on linux.  Plipy comes with recipes for patched\nversions of cx-freeze and bbfreeze that will build stand-alone applications\nhaving the same portability as the plipy env itself - meaning they should\nrun anywhere from ancient Red Hat distros to the latest Ubuntu release.\n\n\n\nReferences\n----------\n\n.. _autopackage build tools:   http://autopackage.org/aptools.html\n\n.. _portable python:   http://www.portablepython.com/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/rfk/plipy/",
    "keywords": "portable",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "plipy",
    "package_url": "https://pypi.org/project/plipy/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/plipy/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/rfk/plipy/"
    },
    "release_url": "https://pypi.org/project/plipy/0.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "a portable linux python",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 183885,
  "releases": {
    "0.0.1": []
  },
  "urls": [],
  "vulnerabilities": []
}