{
  "info": {
    "author": "",
    "author_email": "Simon Glass <sjg@chromium.org>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": ".. SPDX-License-Identifier: GPL-2.0+\n.. Copyright (c) 2011 The Chromium OS Authors\n.. Simon Glass <sjg@chromium.org>\n.. Maxim Cournoyer <maxim.cournoyer@savoirfairelinux.com>\n.. v1, v2, 19-Oct-11\n.. revised v3 24-Nov-11\n.. revised v4 Independence Day 2020, with Patchwork integration\n\nPatman patch manager\n====================\n\nThis tool is a Python script which:\n\n- Creates patch directly from your branch\n- Cleans them up by removing unwanted tags\n- Inserts a cover letter with change lists\n- Runs the patches through checkpatch.pl and its own checks\n- Optionally emails them out to selected people\n\nIt also has some Patchwork features:\n\n- shows review tags from Patchwork so you can update your local patches\n- pulls these down into a new branch on request\n- lists comments received on a series\n\nIt is intended to automate patch creation and make it a less\nerror-prone process. It is useful for U-Boot and Linux work so far,\nsince they use the checkpatch.pl script.\n\nIt is configured almost entirely by tags it finds in your commits.\nThis means that you can work on a number of different branches at\nonce, and keep the settings with each branch rather than having to\ngit format-patch, git send-email, etc. with the correct parameters\neach time. So for example if you put::\n\n    Series-to: fred.blogs@napier.co.nz\n\nin one of your commits, the series will be sent there.\n\nIn Linux and U-Boot this will also call get_maintainer.pl on each of your\npatches automatically (unless you use -m to disable this).\n\n\nInstallation\n------------\n\nYou can install patman using::\n\n   pip install patch-manager\n\nThe name is chosen since patman conflicts with an existing package.\n\nIf you are using patman within the U-Boot tree, it may be easiest to add a\nsymlink from your local `~/.bin` directory to `/path/to/tools/patman/patman`.\n\nHow to use this tool\n--------------------\n\nThis tool requires a certain way of working:\n\n- Maintain a number of branches, one for each patch series you are\n  working on\n- Add tags into the commits within each branch to indicate where the\n  series should be sent, cover letter, version, etc. Most of these are\n  normally in the top commit so it is easy to change them with 'git\n  commit --amend'\n- Each branch tracks the upstream branch, so that this script can\n  automatically determine the number of commits in it (optional)\n- Check out a branch, and run this script to create and send out your\n  patches. Weeks later, change the patches and repeat, knowing that you\n  will get a consistent result each time.\n\n\nHow to configure it\n-------------------\n\nFor most cases of using patman for U-Boot development, patman can use the\nfile 'doc/git-mailrc' in your U-Boot directory to supply the email aliases\nyou need. To make this work, tell git where to find the file by typing\nthis once::\n\n    git config sendemail.aliasesfile doc/git-mailrc\n\nFor both Linux and U-Boot the 'scripts/get_maintainer.pl' handles\nfiguring out where to send patches pretty well. For other projects,\nyou may want to specify a different script to be run, for example via\na project-specific `.patman` file::\n\n    # .patman configuration file at the root of some project\n\n    [settings]\n    get_maintainer_script: etc/teams.scm get-maintainer\n\nThe `get_maintainer_script` option corresponds to the\n`--get-maintainer-script` argument of the `send` command.  It is\nlooked relatively to the root of the current git repository, as well\nas on PATH.  It can also be provided arguments, as shown above.  The\ncontract is that the script should accept a patch file name and return\na list of email addresses, one per line, like `get_maintainer.pl`\ndoes.\n\nDuring the first run patman creates a config file for you by taking the default\nuser name and email address from the global .gitconfig file.\n\nTo add your own, create a file `~/.patman` like this::\n\n    # patman alias file\n\n    [alias]\n    me: Simon Glass <sjg@chromium.org>\n\n    u-boot: U-Boot Mailing List <u-boot@lists.denx.de>\n    wolfgang: Wolfgang Denk <wd@denx.de>\n    others: Mike Frysinger <vapier@gentoo.org>, Fred Bloggs <f.bloggs@napier.net>\n\nAs hinted above, Patman will also look for a `.patman` configuration\nfile at the root of the current project git repository, which makes it\npossible to override the `project` settings variable or anything else\nin a project-specific way. The values of this \"local\" configuration\nfile take precedence over those of the \"global\" one.\n\nAliases are recursive.\n\nThe checkpatch.pl in the U-Boot tools/ subdirectory will be located and\nused. Failing that you can put it into your path or ~/bin/checkpatch.pl\n\nIf you want to avoid sending patches to email addresses that are picked up\nby patman but are known to bounce you can add a [bounces] section to your\n.patman file. Unlike the [alias] section these are simple key: value pairs\nthat are not recursive::\n\n    [bounces]\n    gonefishing: Fred Bloggs <f.bloggs@napier.net>\n\n\nIf you want to change the defaults for patman's command-line arguments,\nyou can add a [settings] section to your .patman file.  This can be used\nfor any command line option by referring to the \"dest\" for the option in\npatman.py.  For reference, the useful ones (at the moment) shown below\n(all with the non-default setting)::\n\n    [settings]\n    ignore_errors: True\n    process_tags: False\n    verbose: True\n    smtp_server: /path/to/sendmail\n    patchwork_server: https://patchwork.ozlabs.org\n\nIf you want to adjust settings (or aliases) that affect just a single\nproject you can add a section that looks like [project_settings] or\n[project_alias].  If you want to use tags for your linux work, you could do::\n\n    [linux_settings]\n    process_tags: True\n\n\nHow to run it\n-------------\n\nFirst do a dry run:\n\n.. code-block:: bash\n\n    ./tools/patman/patman send -n\n\nIf it can't detect the upstream branch, try telling it how many patches\nthere are in your series\n\n.. code-block:: bash\n\n    ./tools/patman/patman -c5 send -n\n\nThis will create patch files in your current directory and tell you who\nit is thinking of sending them to. Take a look at the patch files:\n\n.. code-block:: bash\n\n    ./tools/patman/patman -c5 -s1 send -n\n\nSimilar to the above, but skip the first commit and take the next 5. This\nis useful if your top commit is for setting up testing.\n\n\nHow to install it\n-----------------\n\nThe most up to date version of patman can be found in the U-Boot sources.\nHowever to use it on other projects it may be more convenient to install it as\na standalone application. A distutils installer is included, this can be used\nto install patman:\n\n.. code-block:: bash\n\n    cd tools/patman && python setup.py install\n\n\nHow to add tags\n---------------\n\nTo make this script useful you must add tags like the following into any\ncommit. Most can only appear once in the whole series.\n\nSeries-to: email / alias\n    Email address / alias to send patch series to (you can add this\n    multiple times)\n\nSeries-cc: email / alias, ...\n    Email address / alias to Cc patch series to (you can add this\n    multiple times)\n\nSeries-version: n\n    Sets the version number of this patch series\n\nSeries-prefix: prefix\n    Sets the subject prefix. Normally empty but it can be RFC for\n    RFC patches, or RESEND if you are being ignored. The patch subject\n    is like [RFC PATCH] or [RESEND PATCH].\n    In the meantime, git format.subjectprefix option will be added as\n    well. If your format.subjectprefix is set to InternalProject, then\n    the patch shows like: [InternalProject][RFC/RESEND PATCH]\n\nSeries-postfix: postfix\n    Sets the subject \"postfix\". Normally empty, but can be the name of a\n    tree such as net or net-next if that needs to be specified. The patch\n    subject is like [PATCH net] or [PATCH net-next].\n\nSeries-name: name\n    Sets the name of the series. You don't need to have a name, and\n    patman does not yet use it, but it is convenient to put the branch\n    name here to help you keep track of multiple upstreaming efforts.\n\nSeries-links: [id | version:id]...\n    Set the ID of the series in patchwork. You can set this after you send\n    out the series and look in patchwork for the resulting series. The\n    URL you want is the one for the series itself, not any particular patch.\n    E.g. for http://patchwork.ozlabs.org/project/uboot/list/?series=187331\n    the series ID is 187331. This property can have a list of series IDs,\n    one for each version of the series, e.g.\n\n    ::\n\n       Series-links: 1:187331 2:188434 189372\n\n    Patman always uses the one without a version, since it assumes this is\n    the latest one. When this tag is provided, patman can compare your local\n    branch against patchwork to see what new reviews your series has\n    collected ('patman status').\n\nSeries-patchwork-url: url\n    This allows specifying the Patchwork URL for a branch. This overrides\n    both the setting files and the command-line argument. The URL should\n    include the protocol and web site, with no trailing slash, for example\n    'https://patchwork.ozlabs.org/project'\n\nCover-letter:\n    Sets the cover letter contents for the series. The first line\n    will become the subject of the cover letter::\n\n        Cover-letter:\n        This is the patch set title\n        blah blah\n        more blah blah\n        END\n\nCover-letter-cc: email / alias\n    Additional email addresses / aliases to send cover letter to (you\n    can add this multiple times)\n\nSeries-notes:\n    Sets some notes for the patch series, which you don't want in\n    the commit messages, but do want to send, The notes are joined\n    together and put after the cover letter. Can appear multiple\n    times::\n\n        Series-notes:\n        blah blah\n        blah blah\n        more blah blah\n        END\n\nCommit-notes:\n    Similar, but for a single commit (patch). These notes will appear\n    immediately below the --- cut in the patch file::\n\n        Commit-notes:\n        blah blah\n        blah blah\n        more blah blah\n\nSigned-off-by: Their Name <email>\n    A sign-off is added automatically to your patches (this is\n    probably a bug). If you put this tag in your patches, it will\n    override the default signoff that patman automatically adds.\n    Multiple duplicate signoffs will be removed.\n\nTested-by / Reviewed-by / Acked-by\n    These indicate that someone has tested/reviewed/acked your patch.\n    When you get this reply on the mailing list, you can add this\n    tag to the relevant commit and the script will include it when\n    you send out the next version. If 'Tested-by:' is set to\n    yourself, it will be removed. No one will believe you.\n\n    Example::\n\n        Tested-by: Their Name <fred@bloggs.com>\n        Reviewed-by: Their Name <email>\n        Acked-by: Their Name <email>\n\nSeries-changes: n\n    This can appear in any commit. It lists the changes for a\n    particular version n of that commit. The change list is\n    created based on this information. Each commit gets its own\n    change list and also the whole thing is repeated in the cover\n    letter (where duplicate change lines are merged).\n\n    By adding your change lists into your commits it is easier to\n    keep track of what happened. When you amend a commit, remember\n    to update the log there and then, knowing that the script will\n    do the rest.\n\n    Example::\n\n        Series-changes: n\n        - Guinea pig moved into its cage\n        - Other changes ending with a blank line\n        <blank line>\n\nCommit-changes: n\n    This tag is like Series-changes, except changes in this changelog will\n    only appear in the changelog of the commit this tag is in. This is\n    useful when you want to add notes which may not make sense in the cover\n    letter. For example, you can have short changes such as \"New\" or\n    \"Lint\".\n\n    Example::\n\n        Commit-changes: n\n        - This line will not appear in the cover-letter changelog\n        <blank line>\n\nCover-changes: n\n    This tag is like Series-changes, except changes in this changelog will\n    only appear in the cover-letter changelog. This is useful to summarize\n    changes made with Commit-changes, or to add additional context to\n    changes.\n\n    Example::\n\n        Cover-changes: n\n        - This line will only appear in the cover letter\n        <blank line>\n\nPatch-cc: Their Name <email>\n    This copies a single patch to another email address. Note that the\n    Cc: used by git send-email is ignored by patman, but will be\n    interpreted by git send-email if you use it.\n\nSeries-process-log: sort, uniq\n    This tells patman to sort and/or uniq the change logs. Changes may be\n    multiple lines long, as long as each subsequent line of a change begins\n    with a whitespace character. For example,\n\n    Example::\n\n        - This change\n          continues onto the next line\n        - But this change is separate\n\n    Use 'sort' to sort the entries, and 'uniq' to include only\n    unique entries. If omitted, no change log processing is done.\n    Separate each tag with a comma.\n\nChange-Id:\n    This tag is stripped out but is used to generate the Message-Id\n    of the emails that will be sent. When you keep the Change-Id the\n    same you are asserting that this is a slightly different version\n    (but logically the same patch) as other patches that have been\n    sent out with the same Change-Id.\n\nVarious other tags are silently removed, like these Chrome OS and\nGerrit tags::\n\n    BUG=...\n    TEST=...\n    Review URL:\n    Reviewed-on:\n    Commit-xxxx: (except Commit-notes)\n\nExercise for the reader: Try adding some tags to one of your current\npatch series and see how the patches turn out.\n\n\nWhere Patches Are Sent\n----------------------\n\nOnce the patches are created, patman sends them using git send-email. The\nwhole series is sent to the recipients in Series-to: and Series-cc.\nYou can Cc individual patches to other people with the Patch-cc: tag. Tags\nin the subject are also picked up to Cc patches. For example, a commit like\nthis::\n\n    commit 10212537b85ff9b6e09c82045127522c0f0db981\n    Author: Mike Frysinger <vapier@gentoo.org>\n    Date:    Mon Nov 7 23:18:44 2011 -0500\n\n    x86: arm: add a git mailrc file for maintainers\n\n    This should make sending out e-mails to the right people easier.\n\n    Patch-cc: sandbox, mikef, ag\n    Patch-cc: afleming\n\nwill create a patch which is copied to x86, arm, sandbox, mikef, ag and\nafleming.\n\nIf you have a cover letter it will get sent to the union of the Patch-cc\nlists of all of the other patches. If you want to sent it to additional\npeople you can add a tag::\n\n    Cover-letter-cc: <list of addresses>\n\nThese people will get the cover letter even if they are not on the To/Cc\nlist for any of the patches.\n\n\nPatchwork Integration\n---------------------\n\nPatman has a very basic integration with Patchwork. If you point patman to\nyour series on patchwork it can show you what new reviews have appeared since\nyou sent your series.\n\nTo set this up, add a Series-link tag to one of the commits in your series\n(see above).\n\nThen you can type:\n\n.. code-block:: bash\n\n    patman status\n\nand patman will show you each patch and what review tags have been collected,\nfor example::\n\n    ...\n     21 x86: mtrr: Update the command to use the new mtrr\n        Reviewed-by: Wolfgang Wallner <wolfgang.wallner@br-automation.com>\n      + Reviewed-by: Bin Meng <bmeng.cn@gmail.com>\n     22 x86: mtrr: Restructure so command execution is in\n        Reviewed-by: Wolfgang Wallner <wolfgang.wallner@br-automation.com>\n      + Reviewed-by: Bin Meng <bmeng.cn@gmail.com>\n    ...\n\nThis shows that patch 21 and 22 were sent out with one review but have since\nattracted another review each. If the series needs changes, you can update\nthese commits with the new review tag before sending the next version of the\nseries.\n\nTo automatically pull into these tags into a new branch, use the -d option:\n\n.. code-block:: bash\n\n    patman status -d mtrr4\n\nThis will create a new 'mtrr4' branch which is the same as your current branch\nbut has the new review tags in it. The tags are added in alphabetic order and\nare placed immediately after any existing ack/review/test/fixes tags, or at the\nend. You can check that this worked with:\n\n.. code-block:: bash\n\n    patman -b mtrr4 status\n\nwhich should show that there are no new responses compared to this new branch.\n\nThere is also a -C option to list the comments received for each patch.\n\n\nExample Work Flow\n-----------------\n\nThe basic workflow is to create your commits, add some tags to the top\ncommit, and type 'patman' to check and send them.\n\nHere is an example workflow for a series of 4 patches. Let's say you have\nthese rather contrived patches in the following order in branch us-cmd in\nyour tree where 'us' means your upstreaming activity (newest to oldest as\noutput by git log --oneline)::\n\n    7c7909c wip\n    89234f5 Don't include standard parser if hush is used\n    8d640a7 mmc: sparc: Stop using builtin_run_command()\n    0c859a9 Rename run_command2() to run_command()\n    a74443f sandbox: Rename run_command() to builtin_run_command()\n\nThe first patch is some test things that enable your code to be compiled,\nbut that you don't want to submit because there is an existing patch for it\non the list. So you can tell patman to create and check some patches\n(skipping the first patch) with:\n\n.. code-block:: bash\n\n    patman -s1 send -n\n\nIf you want to do all of them including the work-in-progress one, then\n(if you are tracking an upstream branch):\n\n.. code-block:: bash\n\n    patman send -n\n\nLet's say that patman reports an error in the second patch. Then:\n\n.. code-block:: bash\n\n    git rebase -i HEAD~6\n    # change 'pick' to 'edit' in 89234f5\n    # use editor to make code changes\n    git add -u\n    git rebase --continue\n\nNow you have an updated patch series. To check it:\n\n.. code-block:: bash\n\n    patman -s1 send -n\n\nLet's say it is now clean and you want to send it. Now you need to set up\nthe destination. So amend the top commit with:\n\n.. code-block:: bash\n\n    git commit --amend\n\nUse your editor to add some tags, so that the whole commit message is::\n\n    The current run_command() is really only one of the options, with\n    hush providing the other. It really shouldn't be called directly\n    in case the hush parser is bring used, so rename this function to\n    better explain its purpose::\n\n    Series-to: u-boot\n    Series-cc: bfin, marex\n    Series-prefix: RFC\n    Cover-letter:\n    Unified command execution in one place\n\n    At present two parsers have similar code to execute commands. Also\n    cmd_usage() is called all over the place. This series adds a single\n    function which processes commands called cmd_process().\n    END\n\n    Change-Id: Ica71a14c1f0ecb5650f771a32fecb8d2eb9d8a17\n\n\nYou want this to be an RFC and Cc the whole series to the bfin alias and\nto Marek. Two of the patches have tags (those are the bits at the front of\nthe subject that say mmc: sparc: and sandbox:), so 8d640a7 will be Cc'd to\nmmc and sparc, and the last one to sandbox.\n\nNow to send the patches, take off the -n flag:\n\n.. code-block:: bash\n\n   patman -s1 send\n\nThe patches will be created, shown in your editor, and then sent along with\nthe cover letter. Note that patman's tags are automatically removed so that\npeople on the list don't see your secret info.\n\nOf course patches often attract comments and you need to make some updates.\nLet's say one person sent comments and you get an Acked-by: on one patch.\nAlso, the patch on the list that you were waiting for has been merged,\nso you can drop your wip commit.\n\nTake a look on patchwork and find out the URL of the series. This will be\nsomething like `http://patchwork.ozlabs.org/project/uboot/list/?series=187331`\nAdd this to a tag in your top commit::\n\n   Series-links: 187331\n\nYou can use then patman to collect the Acked-by tag to the correct commit,\ncreating a new 'version 2' branch for us-cmd:\n\n.. code-block:: bash\n\n    patman status -d us-cmd2\n    git checkout us-cmd2\n\nYou can look at the comments in Patchwork or with:\n\n.. code-block:: bash\n\n    patman status -C\n\nThen you can resync with upstream:\n\n.. code-block:: bash\n\n    git fetch origin        # or whatever upstream is called\n    git rebase origin/master\n\nand use git rebase -i to edit the commits, dropping the wip one.\n\nThen update the `Series-cc:` in the top commit to add the person who reviewed\nthe v1 series::\n\n    Series-cc: bfin, marex, Heiko Schocher <hs@denx.de>\n\nand remove the Series-prefix: tag since it it isn't an RFC any more. The\nseries is now version two, so the series info in the top commit looks like\nthis::\n\n    Series-to: u-boot\n    Series-cc: bfin, marex, Heiko Schocher <hs@denx.de>\n    Series-version: 2\n    Cover-letter:\n    ...\n\nFinally, you need to add a change log to the two commits you changed. You\nadd change logs to each individual commit where the changes happened, like\nthis::\n\n    Series-changes: 2\n    - Updated the command decoder to reduce code size\n    - Wound the torque propounder up a little more\n\n(note the blank line at the end of the list)\n\nWhen you run patman it will collect all the change logs from the different\ncommits and combine them into the cover letter, if you have one. So finally\nyou have a new series of commits::\n\n    faeb973 Don't include standard parser if hush is used\n    1b2f2fe mmc: sparc: Stop using builtin_run_command()\n    cfbe330 Rename run_command2() to run_command()\n    0682677 sandbox: Rename run_command() to builtin_run_command()\n\nso to send them:\n\n.. code-block:: bash\n\n    patman\n\nand it will create and send the version 2 series.\n\n\nGeneral points\n--------------\n\n#. When you change back to the us-cmd branch days or weeks later all your\n   information is still there, safely stored in the commits. You don't need\n   to remember what version you are up to, who you sent the last lot of patches\n   to, or anything about the change logs.\n#. If you put tags in the subject, patman will Cc the maintainers\n   automatically in many cases.\n#. If you want to keep the commits from each series you sent so that you can\n   compare change and see what you did, you can either create a new branch for\n   each version, or just tag the branch before you start changing it:\n\n   .. code-block:: bash\n\n        git tag sent/us-cmd-rfc\n        # ...later...\n        git tag sent/us-cmd-v2\n\n#. If you want to modify the patches a little before sending, you can do\n   this in your editor, but be careful!\n#. If you want to run git send-email yourself, use the -n flag which will\n   print out the command line patman would have used.\n#. It is a good idea to add the change log info as you change the commit,\n   not later when you can't remember which patch you changed. You can always\n   go back and change or remove logs from commits.\n#. Some mailing lists have size limits and when we add binary contents to\n   our patches it's easy to exceed the size limits. Use \"--no-binary\" to\n   generate patches without any binary contents. You are supposed to include\n   a link to a git repository in your \"Commit-notes\", \"Series-notes\" or\n   \"Cover-letter\" for maintainers to fetch the original commit.\n#. Patches will have no changelog entries for revisions where they did not\n   change. For clarity, if there are no changes for this patch in the most\n   recent revision of the series, a note will be added. For example, a patch\n   with the following tags in the commit::\n\n        Series-version: 5\n        Series-changes: 2\n        - Some change\n\n        Series-changes: 4\n        - Another change\n\n   would have a changelog of:::\n\n        (no changes since v4)\n\n        Changes in v4:\n        - Another change\n\n        Changes in v2:\n        - Some change\n\n\nOther thoughts\n--------------\n\nThis script has been split into sensible files but still needs work.\nMost of these are indicated by a TODO in the code.\n\nIt would be nice if this could handle the In-reply-to side of things.\n\nThe tests are incomplete, as is customary. Use the 'test' subcommand to run\nthem:\n\n.. code-block:: bash\n\n    $ tools/patman/patman test\n\nNote that since the test suite depends on data files only available in\nthe git checkout, the `test` command is hidden unless `patman` is\ninvoked from the U-Boot git repository.\n\nAlternatively, you can run the test suite via Pytest:\n\n.. code-block:: bash\n\n    $ cd tools/patman && pytest\n\nError handling doesn't always produce friendly error messages - e.g.\nputting an incorrect tag in a commit may provide a confusing message.\n\nThere might be a few other features not mentioned in this README. They\nmight be bugs. In particular, tags are case sensitive which is probably\na bad thing.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "patch-manager",
    "package_url": "https://pypi.org/project/patch-manager/",
    "platform": null,
    "project_url": "https://pypi.org/project/patch-manager/",
    "project_urls": {
      "Bug Tracker": "https://source.denx.de/groups/u-boot/-/issues",
      "Homepage": "https://u-boot.readthedocs.io/en/latest/develop/patman.html"
    },
    "release_url": "https://pypi.org/project/patch-manager/0.0.2/",
    "requires_dist": [
      "u-boot-pylib"
    ],
    "requires_python": ">=3.7",
    "summary": "Patman patch manager",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16995072,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1a078bf7a7ac17cb548f6e9fbdcc0a4069c281bd01d3c64da6ba55b0825f9bc",
          "md5": "73990143aa5851702854b75efabea5e4",
          "sha256": "5281914eb3d840b5a76b6da787761263353a175e380388f84c543abcb67436f9"
        },
        "downloads": -1,
        "filename": "patch_manager-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73990143aa5851702854b75efabea5e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 76696,
        "upload_time": "2023-02-23T15:43:30",
        "upload_time_iso_8601": "2023-02-23T15:43:30.374751Z",
        "url": "https://files.pythonhosted.org/packages/c1/a0/78bf7a7ac17cb548f6e9fbdcc0a4069c281bd01d3c64da6ba55b0825f9bc/patch_manager-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c14fdd77cebfc0fe18a33745ef2d94d8f258f2d4cb8766247c08738935ec207f",
          "md5": "c0c821fd882cb0230d84a889380941d3",
          "sha256": "5eed696f41f380331bc6bb1f239879f9a5053f55fb520ad9830d4d3bd42ef446"
        },
        "downloads": -1,
        "filename": "patch-manager-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c0c821fd882cb0230d84a889380941d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 77211,
        "upload_time": "2023-02-23T15:43:31",
        "upload_time_iso_8601": "2023-02-23T15:43:31.845276Z",
        "url": "https://files.pythonhosted.org/packages/c1/4f/dd77cebfc0fe18a33745ef2d94d8f258f2d4cb8766247c08738935ec207f/patch-manager-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1a078bf7a7ac17cb548f6e9fbdcc0a4069c281bd01d3c64da6ba55b0825f9bc",
        "md5": "73990143aa5851702854b75efabea5e4",
        "sha256": "5281914eb3d840b5a76b6da787761263353a175e380388f84c543abcb67436f9"
      },
      "downloads": -1,
      "filename": "patch_manager-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73990143aa5851702854b75efabea5e4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 76696,
      "upload_time": "2023-02-23T15:43:30",
      "upload_time_iso_8601": "2023-02-23T15:43:30.374751Z",
      "url": "https://files.pythonhosted.org/packages/c1/a0/78bf7a7ac17cb548f6e9fbdcc0a4069c281bd01d3c64da6ba55b0825f9bc/patch_manager-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c14fdd77cebfc0fe18a33745ef2d94d8f258f2d4cb8766247c08738935ec207f",
        "md5": "c0c821fd882cb0230d84a889380941d3",
        "sha256": "5eed696f41f380331bc6bb1f239879f9a5053f55fb520ad9830d4d3bd42ef446"
      },
      "downloads": -1,
      "filename": "patch-manager-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c0c821fd882cb0230d84a889380941d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 77211,
      "upload_time": "2023-02-23T15:43:31",
      "upload_time_iso_8601": "2023-02-23T15:43:31.845276Z",
      "url": "https://files.pythonhosted.org/packages/c1/4f/dd77cebfc0fe18a33745ef2d94d8f258f2d4cb8766247c08738935ec207f/patch-manager-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}