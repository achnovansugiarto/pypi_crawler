{
  "info": {
    "author": "Zack the White, Qcmcmc",
    "author_email": "ssongaj@connect.ust.hk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Mending\r\n## _Make Overwrite More flexible In Python_\r\n\r\n[![Build Status](https://travis-ci.org/joemccann/dillinger.svg?branch=master)](https://travis-ci.org/joemccann/dillinger)\r\n\r\nA Lite Package focuses on making project's after-post mending easier and more flexible. Certain Method performs differently in Certain Condition in an event queue. Certainly used for mending or expanding finished Projects without modifying existed Codes.\r\n\r\n- No Origin Codes Changes, Injection with Licenses\r\n- None Invasive Embed Way, More Flexible\r\n- ✨Easy to use✨\r\n\r\n## Installation\r\n\r\nOverwrite requires [Python](https://www.python.org/) 3.6+ to run.\r\n\r\nSimply install with one-line pip command.\r\n\r\n```shell\r\npip install Mending\r\n```\r\n## How to Use\r\n\r\n**Core Import**\r\n\r\n```python\r\nfrom Mending import Mend\r\n```\r\n\r\n**Set a License**\r\nAny type of Cipher-text is satisfactory. Set _int 0_ as example.\r\n\r\n```python\r\n_license = 0\r\n```\r\n**Defined Function**\r\nMending function, used for _overwrite_ previous method.\r\n\r\n```python\r\ndef func():\r\n    return\r\n```\r\n**Register Function to _Event queue_.**\r\n\r\n1. _Register_type (string)_: \r\n   Register with the same _Event_queue_type_ will be added to the same event queue (in registration order).\r\n2. _times (integer)_: \r\n   The times this function calling is affected. (if affected forever, set times to _-1_)\r\n3. _license (any)_: \r\n   Used to identify whether the modification is valid and distinguish between different overwrite events.\r\n4. _func (function)_: \r\n   Mending function, used for overwriting.\r\n\r\n```python\r\nMend = Mend()\r\nMend.Butler.register('Register_type', times, _license, func)\r\n```\r\n\r\n```python\r\n# Add entrance to function\r\n@Mend.entrance(catalog='Register_type')\r\ndef affected_func():\r\n    return\r\n```\r\n**Add the License Claim**\r\nIf the license is valid, the registered function _affected_func_ will be modified and completely overwritten by _func_. \r\n\r\n```python\r\n# Claim above the function calling\r\nMend.claim(_license)\r\naffected_func()\r\n```\r\nThe Performance above is same as:\r\n```python\r\nfunc()\r\n```\r\n## Features\r\n\r\n**Complex Overwrite**\r\n\r\n```python\r\nMend.Butler.register('Event_queue_type_A', 1, license_A, func_A)\r\nMend.Butler.register('Event_queue_type_A', 2, license_B, func_B)\r\nMend.Butler.register('Event_queue_type_B', 1, license_B, func_C)\r\n```\r\n```python\r\ndef func_A():\r\n    print('1')\r\n    return\r\ndef func_B():\r\n    print('2')\r\n    return\r\ndef func_C():\r\n    print('3')\r\n    return\r\n```\r\n```python\r\n@Mend.entrance(catalog='Event_queue_type_A')\r\ndef affected_func_A():\r\n    print('A')\r\n    return\r\n@Mend.entrance(catalog='Event_queue_type_B')\r\ndef affected_func_B():\r\n    print('B')\r\n    return\r\n```\r\nDifferent _license_ claiming leads to different way of overwriting. After several times calling set before, the performance of modified function will change back to origin again as a result of event queue gets empty.\r\nThe program works as below:\r\n\r\n```python\r\n@Mend.claim(license_B)\r\naffected_func_A() # Output: 2\r\n@Mend.claim(license_A)\r\naffected_func_A() # Output: 1\r\n@Mend.claim(license_B)\r\naffected_func_A() # Output: 2\r\n@Mend.claim(license_A)\r\naffected_func_A() # Output: A\r\n@Mend.claim(license_B)\r\naffected_func_A() # Output: A\r\n@Mend.claim(license_B)\r\naffected_func_B() # Output: 3\r\n@Mend.claim(license_B)\r\naffected_func_B() # Output: B\r\n```\r\n**Get Catalog Name and Available Licenses of Original Function**\r\n\r\n```python\r\nMend.Butler.get(affected_func)\r\n-> dict {'catalog_name': str, 'available_license': list[str]}\r\n```\r\n\r\n**Browse the Event Queue**\r\n\r\nPrint details for _Event Queue_:\r\n\r\n```python\r\nMend.Queue.print(catalog: str)\r\n```\r\n\r\nGet length of _Event Queue_:\r\n\r\n```python\r\nMend.Queue.len(catalog: str)\r\n```\r\n\r\nGet _Event Queue_ as following type:\r\n\r\n```python\r\nMend.Queue.get(catalog: str)\r\n```\r\n\r\n```python\r\n[{'times_left': int, 'license': any, 'function_name': str}, \r\n {'times_left': int, 'license': any, 'function_name': str},\r\n {'times_left': int, 'license': any, 'function_name': str},]\r\n```\r\n\r\n**Directly manipulate the Event Queue**\r\n\r\nClass Queue redefined, making it compatible with _Pythonic_ Style Commands as below:\r\n\r\n```python\r\nMend.Queue.append(catalog: str, event: list)\r\nMend.Queue.pop(catalog: str, index: int)\r\nMend.Queue.replace(catalog: str, event: list, index: int)\r\nMend.Queue.clear(catalog: str)\r\n```\r\n\r\n## Threading\r\n\r\nFor multi-threaded function overrides, the event queue is cross-threaded, and the order of event completion depends on the total program time sequence, asynchrony may cause event order confusion. Instantiating Mending for each individual thread is a reasonable solution.\r\n\r\n## Development\r\n**Version:**\r\n*2021.11.18 (0.0.8)*\r\n\r\n**Author:** \r\n_Zack the White_,  _Qcmcmc_\r\n\r\n**Email Contact:**\r\n[_**Zack the White**_](ssongaj@connect.ust.hk)\r\n[_**Qcmcmc**_](2778512552@qq.com)\r\n\r\n## License\r\n\r\n[**MIT**](https://opensource.org/licenses/MIT)\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Beyonder-Zack/Mending",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Mending",
    "package_url": "https://pypi.org/project/Mending/",
    "platform": "",
    "project_url": "https://pypi.org/project/Mending/",
    "project_urls": {
      "Homepage": "https://github.com/Beyonder-Zack/Mending"
    },
    "release_url": "https://pypi.org/project/Mending/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12065984,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd6bb029a3ec5c2b0b22f5c128229120437c83419461ea8c585bb3d2b083f398",
          "md5": "166ec5eb6c39a9ab9b278651b28d018a",
          "sha256": "6df55491bdd9fc720e54e5be5fab6a9aa502315de96b34eefa65e2d221ca086d"
        },
        "downloads": -1,
        "filename": "Mending-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "166ec5eb6c39a9ab9b278651b28d018a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 7814,
        "upload_time": "2021-11-19T03:19:03",
        "upload_time_iso_8601": "2021-11-19T03:19:03.382394Z",
        "url": "https://files.pythonhosted.org/packages/fd/6b/b029a3ec5c2b0b22f5c128229120437c83419461ea8c585bb3d2b083f398/Mending-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2795b933d693fe12f8f1ce3efcdb1dc48750a55803f66699a5c73f818c0fc043",
          "md5": "10217f7cfedfe47e46f444cb8df8625a",
          "sha256": "6def230717ac2be8ceec0479fba2d1fe2422f5f3a40b24839a8d8d2e03109826"
        },
        "downloads": -1,
        "filename": "Mending-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "10217f7cfedfe47e46f444cb8df8625a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4142,
        "upload_time": "2021-11-19T03:19:05",
        "upload_time_iso_8601": "2021-11-19T03:19:05.069340Z",
        "url": "https://files.pythonhosted.org/packages/27/95/b933d693fe12f8f1ce3efcdb1dc48750a55803f66699a5c73f818c0fc043/Mending-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd6bb029a3ec5c2b0b22f5c128229120437c83419461ea8c585bb3d2b083f398",
        "md5": "166ec5eb6c39a9ab9b278651b28d018a",
        "sha256": "6df55491bdd9fc720e54e5be5fab6a9aa502315de96b34eefa65e2d221ca086d"
      },
      "downloads": -1,
      "filename": "Mending-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "166ec5eb6c39a9ab9b278651b28d018a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 7814,
      "upload_time": "2021-11-19T03:19:03",
      "upload_time_iso_8601": "2021-11-19T03:19:03.382394Z",
      "url": "https://files.pythonhosted.org/packages/fd/6b/b029a3ec5c2b0b22f5c128229120437c83419461ea8c585bb3d2b083f398/Mending-0.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2795b933d693fe12f8f1ce3efcdb1dc48750a55803f66699a5c73f818c0fc043",
        "md5": "10217f7cfedfe47e46f444cb8df8625a",
        "sha256": "6def230717ac2be8ceec0479fba2d1fe2422f5f3a40b24839a8d8d2e03109826"
      },
      "downloads": -1,
      "filename": "Mending-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "10217f7cfedfe47e46f444cb8df8625a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4142,
      "upload_time": "2021-11-19T03:19:05",
      "upload_time_iso_8601": "2021-11-19T03:19:05.069340Z",
      "url": "https://files.pythonhosted.org/packages/27/95/b933d693fe12f8f1ce3efcdb1dc48750a55803f66699a5c73f818c0fc043/Mending-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}