{
  "info": {
    "author": "Vasily Romanov",
    "author_email": "dorican@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "This application make more simple to input the data in forms that use dependent fields\nand works with linear dependence and when one field depends on several fields.\n\nDeveloped in association with `WinePad GmbH <https://www.winepad.at/>`_. Developer `Vasily Romanov <https://github.com/dorican>`_\n\nHow to use on frontend\n----------------------\nAdd \"dfapp\" to your INSTALLED_APPS setting like this:\n::\n\n    INSTALLED_APPS = [\n        ...\n        'dfapp',\n    ]\n\nCreate your own form inherited from \"DependentFieldsMixin\":\n::\n\n    from dfapp.mixins import DependentFieldsMixin\n\n    class UpdateFrontendForm(DependentFieldsMixin, forms.ModelForm):\n        something here\n\nFor example, I have models \"Country\", \"Region\"** and \"District\". These models connected each other through foreign key:\n::\n\n    from dfapp.mixins import MixinManager\n\n    class Country(models.Model):\n        ...\n\n    class Region(models.Model):\n        country = models.ForeignKey(Country ...)\n        ...\n\n    class District(models.Model):\n        region = models.ForeignKey(Region ...)\n        ...\n\nAnd I want to accelerate the adding model \"Wine\".\n::\n\n    class Wine(models.Model):\n        country = models.ForeignKey(Country ...)\n        region = models.ForeignKey(Region ...)\n        district = models.ForeignKey(District ...)\n        title = models.CharField(...)\n        objects = MixinManager()\n\nSo, I customize the form so to point linear dependence, url, class Meta and class Media. In class Meta you point widget's fields inheritated from \"MixinSelectWidget()\":\n::\n\n    from dfapp.mixins import MixinSelectWidget\n\n    class UpdateFrontendForm(DependentFieldsMixin, forms.ModelForm):\n        data_url = '/name_your_app/edit/frontend/form/'\n        dependencies = {\n            'country': {'key_parent': '', 'parent': [], 'all_parents': [], 'childs': ['region', 'district']},\n            'region': {'key_parent': 'country', 'parent': ['country'], 'all_parents': ['country'], 'childs': ['district']},\n            'district': {'key_parent': 'country', 'parent': ['region'], 'all_parents': ['country', 'region'], 'childs': [],\n        }\n\n        class Meta:\n            model = Wine\n            fields = ['country', 'region', 'district', 'title']\n            widgets = {\n                'country': MixinSelectWidget(),\n                'region': MixinSelectWidget(),\n                'district': MixinSelectWidget(),\n            }\n\n        class Media:\n            js = ('dfapp/js/update_form.js',)\n\nIn \"key_parent\" you specify the first field in a linear dependency. In  \"parent\" specify field from which field is inherited. For a \"region\" it will be a \"country\", for a \"district\" - a \"region\". In 'all_parents' - all parent fields in this dependency begin with the specified field.\n\nIn \"data_url\" you point full path to your view with your app's label.\nFor example, main URLconf looks so:\n::\n\n    urlpatterns = [\n        path('edit/frontend/form/<int:pk>/', Your_View.as_view(), name='Your_View_Name'),\n        ...\n    ]\n\nIn form's \"data_url\" you point \"name_your_app/some_url_to_your_view/\" without \"<int:pk>/\". You add it in URLconf.\n\nYou can point several linear dependencies, like so:\n::\n\n    class UpdateFrontendForm(DependentFieldsMixin, forms.ModelForm):\n        data_url = '...'\n        dependencies = {\n        'country': {'key_parent': '', 'parent': [], 'all_parents': [], 'childs': ['region2']},\n        'region2': {'key_parent': 'country', 'parent': ['country'], 'all_parents': ['country'], 'childs': []},\n        'region': {'key_parent': '', 'parent': [], 'all_parents': [], 'childs': ['district', 'subdistrict']},\n        'district': {'key_parent': 'region', 'parent': ['region'], 'all_parents': ['region'], 'childs': ['subdistrict']},\n        'subdistrict': {'key_parent': 'region', 'parent': ['district'], 'all_parents': ['region', 'district'], 'childs': []},\n    }\n\n\n**Most importantly, that the model fields included these fields!**\n\nCreate views. You need to create two views. First view will initialize the form. Second will create the form with updating data.\nBasic configuration first view may looks so:\n::\n\n    class IndexPageView(CreateView):\n        form_class = UpdateFrontendForm\n        template_name = 'base.html'\n        success_url = '/'\n\nBasic configuration second view looks so:\n::\n\n    from dfapp.views import CheckCTView\n\n    class FrontendFormView(CheckCTView):\n        form_class = UpdateFrontendForm\n\nAdd need urls in URLconf:\n::\n\n    from yourapp.views import IndexPageView, FrontendFormView\n\n    urlpatterns = [\n        path('', IndexPageView.as_view()),\n        path('edit/frontend/form/<int:pk>/', FrontendFormView.as_view()),\n        ...\n    ]\n\nYou can also point an independent dependency. If a country is selected, will be displayed \"mark\" that has only a country will be displayed. If a region is selected, will be displayed \"marks\" thet has \"country\" and \"region\". Id a district selected, will be displayed \"marks\" thet has \"country\" and \"region\" and \"district\". The key fields in independent dependency should be also inheritated MixinSelectWidget.\n\nThe configuration form may looks so:\n::\n\n    class UpdateFrontendForm(DependentFieldsMixin, forms.ModelForm):\n        data_url = '...'\n        dependencies = {\n            'country': {'key_parent': '', 'parent': [], 'all_parents': [], 'childs': ['region', 'district']},\n            'region': {'key_parent': 'country', 'parent': ['country'], 'all_parents': ['country'], 'childs': ['district']},\n            'district': {'key_parent': 'country', 'parent': ['region'], 'all_parents': ['country', 'region'], 'childs': [],\n            'mark': {'key_parent': '', 'parent': ['country', 'region', 'district'], 'all_parents': [], 'childs': []},\n            'mark2': {'key_parent': '', 'parent': ['country', 'region'], 'all_parents': [], 'childs': []},\n        }\n\n        class Meta:\n            ...\n            widgets = {\n                'country': MixinSelectWidget(),\n                'region': MixinSelectWidget(),\n                'district': MixinSelectWidget(),\n                'mark': MixinSelectWidget(),\n                'mark2': MixinSelectWidget(),\n            }\n\nThat's all. The configuration of formset, inline formset is similar to the standard.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dorican/django-dfapp",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-dfapp",
    "package_url": "https://pypi.org/project/django-dfapp/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-dfapp/",
    "project_urls": {
      "Homepage": "https://github.com/dorican/django-dfapp"
    },
    "release_url": "https://pypi.org/project/django-dfapp/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django app that manages dependent fields",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7499468,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77525cc749904f70991548abe6e4b90d25f8fb6f8a398c3409120b0f6aecfacc",
          "md5": "89bbf76e2899e9ec4d6ac4c97c1065e3",
          "sha256": "afe1003f729a1f52c491f037c60c85b50a853e1d76f19df0d075566193049297"
        },
        "downloads": -1,
        "filename": "django-dfapp-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "89bbf76e2899e9ec4d6ac4c97c1065e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11123,
        "upload_time": "2020-05-25T07:38:50",
        "upload_time_iso_8601": "2020-05-25T07:38:50.201429Z",
        "url": "https://files.pythonhosted.org/packages/77/52/5cc749904f70991548abe6e4b90d25f8fb6f8a398c3409120b0f6aecfacc/django-dfapp-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8cea09fb4a99322b966bdf808f46739be468269b2e87aee537deabd61d77e2c",
          "md5": "28db22e9a2d496eb6d7c3c92c79ff52b",
          "sha256": "54231801eb12844cdde5dd05588c9e4903197cc4e1bd6ffb507a6cfd5a0cddb6"
        },
        "downloads": -1,
        "filename": "django-dfapp-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "28db22e9a2d496eb6d7c3c92c79ff52b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9030,
        "upload_time": "2020-06-17T18:20:10",
        "upload_time_iso_8601": "2020-06-17T18:20:10.794347Z",
        "url": "https://files.pythonhosted.org/packages/d8/ce/a09fb4a99322b966bdf808f46739be468269b2e87aee537deabd61d77e2c/django-dfapp-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8cea09fb4a99322b966bdf808f46739be468269b2e87aee537deabd61d77e2c",
        "md5": "28db22e9a2d496eb6d7c3c92c79ff52b",
        "sha256": "54231801eb12844cdde5dd05588c9e4903197cc4e1bd6ffb507a6cfd5a0cddb6"
      },
      "downloads": -1,
      "filename": "django-dfapp-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "28db22e9a2d496eb6d7c3c92c79ff52b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9030,
      "upload_time": "2020-06-17T18:20:10",
      "upload_time_iso_8601": "2020-06-17T18:20:10.794347Z",
      "url": "https://files.pythonhosted.org/packages/d8/ce/a09fb4a99322b966bdf808f46739be468269b2e87aee537deabd61d77e2c/django-dfapp-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}