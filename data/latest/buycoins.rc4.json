{
  "info": {
    "author": "Rasheed Musa",
    "author_email": "rasheedmusa9@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# Buycoins Python Library\n\n[![Build Status](https://travis-ci.com/edgeee/buycoins-python.svg?token=oQSNV8eQ1aycrRUjPbyg&branch=main)](https://travis-ci.com/edgeee/buycoins-python) [![Circle CI](https://img.shields.io/badge/license-MIT-blue.svg)](https://img.shields.io/badge/license-MIT-blue.svg) [![PyPI version](https://badge.fury.io/py/buycoins.svg)](https://badge.fury.io/py/buycoins) [![Python 3.6+](https://img.shields.io/badge/python-3.6-blue.svg)](https://www.python.org/downloads/release/python-360/)\n\nThis library provides easy access to the Buycoins API using the Python programming language. It provides all the feature of the API so that you don't need to interact with the API directly. This library can be used with Python 3.6+\n\n## Table of Contents\n* [Links](#links)\n* [Installation](#installation)\n* [Introduction](#introduction)\n  * [Primer](#primer)\n  * [Initialization](#initialization)   \n* [Accounts](#accounts)\n  * [Create Naira deposit account](#create-naira-deposit-account)\n* [Orders](#orders)\n  * [Get cryptocurrency prices](#get-cryptocurrency-prices)\n  * [Get price for single cryptocurrency](#get-single-cryptocurrency-price)\n  * [Buy a cryptocurrency](#buy-a-cryptocurrency)\n  * [Sell a cryptocurrency](#sell-a-cryptocurrency)\n* [P2P Trading](#p2p-trading)\n  * [Place limit orders](#place-limit-orders)\n  * [Place market order](#place-market-orders)\n  * [Get list of orders](#get-list-of-orders)\n  * [Get market book](#get-market-book)\n* [Transactions](#transactions)\n  * [Get cryptocurrency balances](#get-balances)\n  * [Get single balance](#get-single-balance)\n  * [Estimate network fee](#estimate-network-fee)  \n  * [Create wallet address](#create-wallet-address)\n  * [Send cryptocurrency](#send-cryptocurrency-to-an-address)\n* [Webhooks](#webhooks)\n  * [Verify event payload](#verify-event-payload)\n* [Contributing](#contributing)\n* [License](#license)\n    \n    \n\n## Links\n- Buycoins API documentation: https://developers.buycoins.africa/\n\n## Installation\nYou can install this package using pip:\n```sh\npip install --upgrade buycoins\n```\n\n## Introduction\n\n#### Primer\n- The library is structured around the concept of a `type`, so everything is a type. \n- All date quantities are specified as timestamps. So you would have to reconstruct the ISO dates yourself if you ever need to. \n- All cryptocurrency (and monetary) values are specified as decimals.\n- Supports all cryptocurrencies supported by Buycoins\n\n#### Initialization\nFirstly, request API access by sending an email to  [support@buycoins.africa](mailto:support@buycoins.africa) with the email address you used in creating a Buycoins account.\nWhen you've been granted access, you should be able to generate a public and secret key from the 'API settings' section of your account.\n\nYou have to initialize the library once in your app. You can do this when initializing databases, logging, etc.\nAs a security practice, it is best not to hardcode your API keys. You should store them in environmental variables or a remote Secrets Manager.\n\n```python\nimport buycoins\n\nbuycoins.initialize('<PUBLIC-KEY>', '<SECRET-KEY>')\n```\n\n### Accounts\nAccounts provide a way to programmatically create virtual naira accounts.\n\n#### Types\n```dtd\nVirtualDepositAccountType:\n    account_number: str\n    account_name: str\n    account_type: str\n    bank_name: str\n    account_reference: str\n```\n\n#### Create Naira deposit account\n```python\nimport buycoins as bc\n\nacc = bc.accounts.create_deposit('john doe')  # VirtualDepositAccountType\n\nprint(acc.account_name)  # john doe\nprint(acc.bank_name)  # bank name\nprint(acc.account_number)  # account number\nprint(acc.account_reference) # account reference\nprint(acc.account_type) # account type\n```\n\n### Orders\nOrders provide a way to buy from and sell directly to Buycoins.\nWhen buying or selling, price ID should be the ID gotten from calling either `.get_price()` or `.get_prices()`.\nMake sure to use price that hasn't expired yet, so call `.get_price(cryptocurrency)` to get the latest price for the cryptocurrency just before buying or selling.\n\n\n#### Types\n```dtd\nCoinPriceType:\n    id: str\n    cryptocurrency: str\n    buy_price_per_coin: Decimal\n    min_buy: Decimal\n    max_buy: Decimal\n    expires_at: int\n\nclass OrderType(NamedTuple):\n    id: str\n    cryptocurrency: str\n    status: str\n    side: str\n    created_at: int\n    total_coin_amount: str\n    static_price: Decimal\n    price_type: str\n    dynamic_exchange_rate: str\n    coin_amount: Decimal\n```\n\n#### Get cryptocurrency prices\n```python\nimport buycoins as bc\n\n# Get prices of all cryptocurrencies\nprices = bc.orders.get_prices()  # CoinPriceType[]\n\nprint(prices[0].id)  # ID of first price entry\nprint(prices[0].cryptocurrency)  # cryptocurrency\nprint(prices[0].expires_at)  # when this price entry will expire\nprint(prices[0].buy_price_per_coin)  # coin price\nprint(prices[0].min_buy)  # minimum amount you can buy\nprint(prices[0].max_buy)  # max amount you can buy\n```\n\n#### Get single cryptocurrency price\n```python\nimport buycoins as bc\n\nprice = bc.orders.get_price('bitcoin')  # CoinPriceType\n\nprint(price.id)  # ID of price entry\nprint(price.cryptocurrency)  # cryptocurrency\nprint(price.expires_at)  # when this price entry will expire\nprint(price.buy_price_per_coin)  # coin price\nprint(price.min_buy)  # minimum amount you can buy\nprint(price.max_buy)  # max amount you can buy\n```\n\n#### Buy a cryptocurrency\n```python\nimport buycoins as bc\n\n\norder = bc.orders.buy(\n    price_id='price-id',\n    coin_amount=1.52,\n    cryptocurrency='litecoin'\n)  # OrderType\n\nprint(order.id)  # Order ID\nprint(order.status)  # either active or inactive\nprint(order.side)  # buy\nprint(order.cryptocurrency)  # litecoin\nprint(order.total_coin_amount)  # Total coin amount\nprint(order.price_type)  # Price type\n```\n\n#### Sell a cryptocurrency\n```python\nimport buycoins as bc\n\n\norder = bc.orders.sell(\n    price_id='price-id',\n    coin_amount=0.0043,\n    cryptocurrency='ethereum'\n)  # OrderType\n\nprint(order.id)  # Order ID\nprint(order.status)  # either active or inactive\nprint(order.side)  # sell\nprint(order.cryptocurrency)  # litecoin\nprint(order.total_coin_amount)  # Total coin amount\nprint(order.price_type)  # Price type\n```\n\n\n### P2P Trading\nP2P Trading lets you trade cryptocurrencies with other users.\nIf you are not familiar with p2p trading on the Buycoins platform, read about it [here](https://developers.buycoins.africa/p2p/introduction)\n\n#### Types\n```dtd\nclass OrderType(NamedTuple):\n    id: str\n    cryptocurrency: str\n    status: str\n    side: str\n    created_at: int\n    total_coin_amount: str\n    static_price: Decimal\n    price_type: str\n    dynamic_exchange_rate: str\n    coin_amount: Decimal\n```\n\n### Place limit orders\nWhen placing limit orders, if `price_type` is `static`, `static_price` must also be specified, and if `price_type` is `dynamic`, `dynamic_exchange_rate` must be provided.\n\n```python\nimport buycoins as bc\n\n\norder = bc.p2p.place_limit_order(\n    side='buy', # either 'buy' or 'sell'\n    coin_amount=0.00043,\n    cryptocurrency='ethereum',\n    price_type='static',\n    static_price=0.004,\n    dynamic_exchange_rate=None  # float   \n)  # OrderType\n\nprint(order.id)  # Order ID\nprint(order.status)  # status, either active or inactive\nprint(order.cryptocurrency)  # bitcoin, litecoin, etc\nprint(order.coin_amount)  # coin amount\n```\n\n#### Place market orders\n```python\nimport buycoins as bc\n\n\n# Place market order\n# `order` has all the properties as shown above\norder = bc.p2p.place_market_order(\n    side='buy',  # either buy or sell\n    coin_amount=0.00023,\n    cryptocurrency='litecoin'\n)  # order is an OrderType\n\nprint(order.id)  # Order ID\nprint(order.status)  # status, either active or inactive\nprint(order.cryptocurrency)  # bitcoin, litecoin, etc\nprint(order.coin_amount)  # coin amount\n```\n\n#### Get list of orders\n```python\nimport buycoins as bc\n\n\norders, dynamic_price_expiry = bc.p2p.get_orders('active')  # (OrderType[], timestamp)\n\nprint(dynamic_price_expiry)  # timestamp of when dynamic price expires\nprint(orders[0].id)  # ID of first order\nprint(orders[1].status)  # status of the first order\n```\n\n\n#### Get Market book\n```python\nimport buycoins as bc\n\n\nmarket_book, dynamic_price_expiry = bc.p2p.get_market_book()  # (OrderType[], timestamp)\n\nprint(dynamic_price_expiry)  # timestamp of when dynamic price expires\nprint(market_book[0].id)  # ID of first order\nprint(market_book[1].status)  # status of the first order\n```\n\n\n### Transactions\n\nTransactions enable you to send and receive cryptocurrencies.\n\n#### Types\n```dtd\nCoinBalanceType:\n    id: str\n    cryptocurrency: str\n    confirmed_balance: Decimal\n\nNetworkFeeType:\n    estimated_fee: Decimal\n    total: Decimal\n\nTransactionType:\n    hash: str\n    id: str\n\nSendReturnValueType:\n    id: str\n    address: str\n    cryptocurrency: str\n    amount: Decimal\n    fee: Decimal\n    status: str\n    transaction: TransactionType\n\nAddressType:\n    cryptocurrency: str\n    address: str\n```\n\n#### Get balances\n```python\nimport buycoins as bc\n\nbalances = bc.transactions.get_balances()  # CoinBalanceType[]\n\nprint(balances[0].cryptocurrency)  # bitcoin, litecoin, etc\nprint(balances[0].confirmed_balance)  # the confirmed balance\n```\n\n\n#### Get single balance\n```python\nimport buycoins as bc\n\n\nbalance = bc.transactions.get_balance('bitcoin')  # CoinBalanceType\n\nprint(balance.cryptocurrency)  # bitcoin\nprint(balance.confirmed_balance)  # the confirmed balance\n```\n\n#### Estimate network fee\n```python\nimport buycoins as bc\n\n\nfee = bc.transactions.estimate_network_fee(\n    'bitcoin',  # cryptocurrency\n    0.32,  # txn amount\n)  # NetworkFeeType\n\nprint(fee.estimated_fee)  # estimated fee for txn\nprint(fee.total)   # total\n```\n\n#### Send cryptocurrency to an address\n```python\nimport buycoins as bc\n\n\nsent = bc.transactions.send(\n    cryptocurrency='ethereum',\n    amount=0.0023,\n    address='<wallet-address>'\n)  # SendReturnValueType\n\nprint(sent.fee)  # fee charged for the 'send' txn\nprint(sent.status) # status of the txn\nprint(sent.transaction.id)  # ID of the txn\nprint(sent.transaction.hash)  # txn hash\n```\n\n#### Create wallet address\n```python\nimport buycoins as bc\n\n\naddr = bc.transactions.create_address('bitcoin')  # AddressType\n\nprint(addr.address)  # Address string\nprint(addr.cryptocurrency)  # cryptocurrency\n```\n\n\n### Webhooks\n\nWebhooks provides a way for Buycoins to inform you of events that take place on your account.\nSee the [Buycoins documentation](https://developers.buycoins.africa/webhooks/introduction) for  an introduction and the available events.\n\n#### Verify event payload\nEnsure that the webhook event originated from Buycoins\n\n```python\nimport buycoins as bc\n\n\nis_valid = bc.webhook.verify_payload(\n    body='<raw request body from buycoins (in bytes)>',\n    webhook_token='<webhook-token generated on buycoins>',\n    header_signature='X-Webhook-Signature header'\n)\n\nprint(is_valid)  # True if the event is from Buycoins, False otherwise.\n```\n\n## Testing\nTo run tests:\n\n```shell\npoetry run pytest\n```\n\n\n## Contributing\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n[MIT License](https://github.com/edgeee/buycoins-python/blob/master/LICENSE)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edgeee/buycoins-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "buycoins",
    "package_url": "https://pypi.org/project/buycoins/",
    "platform": "",
    "project_url": "https://pypi.org/project/buycoins/",
    "project_urls": {
      "Documentation": "https://github.com/edgeee/buycoins-python",
      "Homepage": "https://github.com/edgeee/buycoins-python",
      "Repository": "https://github.com/edgeee/buycoins-python"
    },
    "release_url": "https://pypi.org/project/buycoins/1.0.2/",
    "requires_dist": [
      "gql (>=2.0.0,<3.0.0)"
    ],
    "requires_python": ">=3.6,<3.7",
    "summary": "A Python SDK for the buycoins API",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9870812,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64bb3e11a013ae37ae11737966ecb565da94d4a1e7260476f25fd47f72eb80af",
          "md5": "b58fb60882a8ac0257e3d8a97b3ead4b",
          "sha256": "0b45a71acc2df9e4d353bca35edeba7ec20d93c5c5a973c98ffe8794b7c38aa7"
        },
        "downloads": -1,
        "filename": "buycoins-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b58fb60882a8ac0257e3d8a97b3ead4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 1032,
        "upload_time": "2021-01-30T00:43:57",
        "upload_time_iso_8601": "2021-01-30T00:43:57.889814Z",
        "url": "https://files.pythonhosted.org/packages/64/bb/3e11a013ae37ae11737966ecb565da94d4a1e7260476f25fd47f72eb80af/buycoins-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b97960b9ec3b59be20c0bd37df602c167142aed11298bed467ddfb32973ce6b",
          "md5": "3db54de8656ca73282cdd3c35108b218",
          "sha256": "e4298d2ec57e9b5004f67c478f0b41e81da5b1fdd54163df68438c7504619560"
        },
        "downloads": -1,
        "filename": "buycoins-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3db54de8656ca73282cdd3c35108b218",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 858,
        "upload_time": "2021-01-30T00:43:59",
        "upload_time_iso_8601": "2021-01-30T00:43:59.027699Z",
        "url": "https://files.pythonhosted.org/packages/2b/97/960b9ec3b59be20c0bd37df602c167142aed11298bed467ddfb32973ce6b/buycoins-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae9ba840b07ad6ae7c8e01f21b87fd25d4b862e4704e6240e4eba772442d9b7a",
          "md5": "8b19311adaac728e636929345ffe9b71",
          "sha256": "3283412b4ad0c55550a5f533ed145544a4704f43137b775f87a7615893dd208d"
        },
        "downloads": -1,
        "filename": "buycoins-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b19311adaac728e636929345ffe9b71",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 9665,
        "upload_time": "2021-02-02T21:59:04",
        "upload_time_iso_8601": "2021-02-02T21:59:04.658419Z",
        "url": "https://files.pythonhosted.org/packages/ae/9b/a840b07ad6ae7c8e01f21b87fd25d4b862e4704e6240e4eba772442d9b7a/buycoins-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd5f52c5b8c9912628df0ae00fcadc06445a10336fa10fd980cde13bf7adf1fc",
          "md5": "2ff1cc7a55abceaaa60ca79f3c0e7a93",
          "sha256": "3b9a2cf555ab022ec71560c6e71c1c2b0e34eadb6178c54f94df0e5c64a20e4f"
        },
        "downloads": -1,
        "filename": "buycoins-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ff1cc7a55abceaaa60ca79f3c0e7a93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 14620,
        "upload_time": "2021-02-02T21:59:06",
        "upload_time_iso_8601": "2021-02-02T21:59:06.126852Z",
        "url": "https://files.pythonhosted.org/packages/bd/5f/52c5b8c9912628df0ae00fcadc06445a10336fa10fd980cde13bf7adf1fc/buycoins-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "200775ed456fd6d1949f63d3fb0b7b96c3fda24324791ad8eb703ed220f083be",
          "md5": "ee0f1e6828a085f730fe34937272c1ed",
          "sha256": "6b31927aad7e24fd3bed1dcb7f33d476692af790fc0bd343747e239f8e52b200"
        },
        "downloads": -1,
        "filename": "buycoins-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee0f1e6828a085f730fe34937272c1ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.7",
        "size": 10533,
        "upload_time": "2021-02-20T03:12:58",
        "upload_time_iso_8601": "2021-02-20T03:12:58.961091Z",
        "url": "https://files.pythonhosted.org/packages/20/07/75ed456fd6d1949f63d3fb0b7b96c3fda24324791ad8eb703ed220f083be/buycoins-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6799de0a5a1f0d3db6adcf61e957830d20afaa0764fc727cb8a924849c516680",
          "md5": "1d3e942a6e48bff6e16fd258a36d1086",
          "sha256": "014b8f794e17d8f9cb24334bfc7fd385be951593cf63330f4bf73e9fd30ffc69"
        },
        "downloads": -1,
        "filename": "buycoins-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1d3e942a6e48bff6e16fd258a36d1086",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.7",
        "size": 16699,
        "upload_time": "2021-02-20T03:13:00",
        "upload_time_iso_8601": "2021-02-20T03:13:00.663548Z",
        "url": "https://files.pythonhosted.org/packages/67/99/de0a5a1f0d3db6adcf61e957830d20afaa0764fc727cb8a924849c516680/buycoins-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c06b7f46d6bc4c1ea3949efb040570e4157a69a9ea3f937deb777ce1778a519",
          "md5": "53da953db2e3c069b7a3d2873bec1e42",
          "sha256": "20b5589ef4646b92a8c270a7e2223b7aec40c7f25619cc4849b61ab6089691ac"
        },
        "downloads": -1,
        "filename": "buycoins-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53da953db2e3c069b7a3d2873bec1e42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.7",
        "size": 10517,
        "upload_time": "2021-03-24T21:15:49",
        "upload_time_iso_8601": "2021-03-24T21:15:49.223799Z",
        "url": "https://files.pythonhosted.org/packages/7c/06/b7f46d6bc4c1ea3949efb040570e4157a69a9ea3f937deb777ce1778a519/buycoins-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d6826157187e976f46c017ada4493bab07754970957f65e5f16f8edc8d413ac",
          "md5": "2164cf3a0172dca9ab13cd3a1515fa67",
          "sha256": "afd92e4c6a1cfe705877ae9b1d4fb436b9e60ee11a0dd23449c518dde3c53252"
        },
        "downloads": -1,
        "filename": "buycoins-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2164cf3a0172dca9ab13cd3a1515fa67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.7",
        "size": 16663,
        "upload_time": "2021-03-24T21:15:51",
        "upload_time_iso_8601": "2021-03-24T21:15:51.297230Z",
        "url": "https://files.pythonhosted.org/packages/2d/68/26157187e976f46c017ada4493bab07754970957f65e5f16f8edc8d413ac/buycoins-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c06b7f46d6bc4c1ea3949efb040570e4157a69a9ea3f937deb777ce1778a519",
        "md5": "53da953db2e3c069b7a3d2873bec1e42",
        "sha256": "20b5589ef4646b92a8c270a7e2223b7aec40c7f25619cc4849b61ab6089691ac"
      },
      "downloads": -1,
      "filename": "buycoins-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "53da953db2e3c069b7a3d2873bec1e42",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<3.7",
      "size": 10517,
      "upload_time": "2021-03-24T21:15:49",
      "upload_time_iso_8601": "2021-03-24T21:15:49.223799Z",
      "url": "https://files.pythonhosted.org/packages/7c/06/b7f46d6bc4c1ea3949efb040570e4157a69a9ea3f937deb777ce1778a519/buycoins-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d6826157187e976f46c017ada4493bab07754970957f65e5f16f8edc8d413ac",
        "md5": "2164cf3a0172dca9ab13cd3a1515fa67",
        "sha256": "afd92e4c6a1cfe705877ae9b1d4fb436b9e60ee11a0dd23449c518dde3c53252"
      },
      "downloads": -1,
      "filename": "buycoins-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2164cf3a0172dca9ab13cd3a1515fa67",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<3.7",
      "size": 16663,
      "upload_time": "2021-03-24T21:15:51",
      "upload_time_iso_8601": "2021-03-24T21:15:51.297230Z",
      "url": "https://files.pythonhosted.org/packages/2d/68/26157187e976f46c017ada4493bab07754970957f65e5f16f8edc8d413ac/buycoins-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}