{
  "info": {
    "author": "Eric Wald",
    "author_email": "codewhisper@brainshell.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 3",
      "Topic :: Text Processing :: General"
    ],
    "description": "CodeWhisper\n===========\n\nCodeWhisper is yet another parsing library, designed for rapid development and\neasy maintenance of complex parsers.  Languages with over a thousand rules and\ndozens of token types should parse thousands of strings in under a minute,\nwithout being impossible to understand or debug.\n\nThe design is heavily based on Jared Forsyth's CodeTalker, but has been\nrebuilt from the ground up in Cython for Python 3, with a slightly different\nfeature set.  CodeWhisper is not a drop-in replacement, but even complex\ngrammars should be relatively simple to adapt.\n\nCodeWhisper takes a three-step approach to processing a string: tokenization,\nparsing, and translation.\n\n\nTokenization\n------------\n\nTokenization is the process of breaking a string down into atomic chunks.\nNot every grammar works better with an explicit tokenization step, but for\nmany grammars, it speeds up the parsing process.\n\nCodeWhisper tokens are defined as subclasses of the `codewhisper.tokens.Token`\nclass, with a `match` method that determines whether and how much of the input\ncan be part of that token class.  For example:\n\n```python\nclass CHARACTER(Token):\n    r'''A Token that matches any single character.\n    '''#\"\"\"#'''\n    \n    @staticmethod\n    def match(text, position):\n        return 1\n```\n\nThe `CHARACTER` class matches any single character.  Because it is generally\nuseful for many grammars, it is included in the `codewhisper.tokens` module.\n\nThe `codewhisper.tokens.CharacterToken` class offers a fast and convenient way\nto match a single character from a limited set:\n\n```python\nclass SYMBOL(CharacterToken):\n    characters = ',:[]{}'\n\nclass WHITESPACE(CharacterToken):\n    characters = ' \\n\\r\\t'\n```\n\nThe `codewhisper.tokens.CharacterRangeToken` class is an even faster way to\nmatch characters with similar Unicode code points:\n\n```python\nclass UPPERCASE(CharacterRangeToken):\n    first = ord(\"A\")\n    last = ord(\"Z\")\n\nclass SURROGATE(CharacterRangeToken):\n    first = 0xD800\n    last = 0xDFFF\n```\n\nWhen you need to match sets of strings with more than one character, try the\n`codewhisper.tokens.StringToken` class:\n\n```python\nclass CONSTANT(StringToken):\n    strings = [\n        'true',\n        'false',\n        'null',\n    ]\n```\n\nThe `codewhisper.tokens` module also contains `DelimitedToken` for finding\nstrings that start and end with specific characters, `PatternToken` for\nfinding strings that match a regular expression, and `KeywordToken` for\nfinding any of a list of strings when they aren't followed by a letter or\nnumber.\n\nFor more complex tokens, custom Token subclasses can override the `match`\nmethod:\n\n```python\nclass INT(Token):\n    @classmethod\n    def match(cls, text, position):\n        if text[position] == \"0\":\n            return 1\n        result = None\n        for length, c in enumerate(text[position:]):\n            if not c.isdigit():\n                break\n            result = length + 1\n        return result\n```\n\nBy convention, Token subclasses meant to be used by a grammar are given\n`ALL_CAPS` names, whereas those meant to be used as base classes are named\nwith `CapitalizedWords`.  This, however, is merely to make things easier for\nthe developer; CodeWhisper itself doesn't care what you name anything.\n\n\nParsing\n-------\n\nParsing is the process of determining which tokens relate to each other,\nand what they might mean.  This is often the slowest of the three steps,\nbecause it may have to consider multiple options before it finds the right way\nto interpret the input.  These options are defined by rule functions, using a\nsyntax reminiscent of Wirth syntax, written in real Python code:\n\n```python\ndef value(rule):\n    rule | STRING | CONSTANT | NUMBER\n    rule | json_object | json_list\n\ndef json_object(rule):\n    rule | ('{', [Commas(STRING, ':', value)], '}')\n\ndef json_list(rule):\n    rule | ('[', [Commas(value)], ']')\n```\n\nEssentially, each grammar rule is defined by a function with a single\nparameter.  That parameter should be piped with one or more elements, where\neach elements may be:\n\n- A token class, matching any token of that class;\n- A string, matching any token with that exact string as its value;\n- A grammar rule, matching if and only if the rule does;\n- A tuple of elements, matching if each of its elements does, in that exact sequence;\n- A list of elements, matching each of its elements, or without consuming any tokens;\n- A set of elements, matching if any one of its elements matches; or\n- A `codewhisper.parsing.Parser` instance, for more complex behavior.\n\nNotably, elements may be computed when the rule function is run.  For example,\nthe `Commas` function used above, defined in `codewhisper.special`, is a\nnormal Python function that that happens to return a tuple.  Since the rule\nfunction is only run when it first gets used by a Grammar or another rule\nfunction, it can refer to itself, even indirectly, or to rules defined later.\n\nEach rule tries to match the token string against each of its options, in\norder.  Like a parsing expression grammar (PEG), if a rule is ambiguous, the\nfirst available option is used if possible.  Unlike a PEG, if that option\ndoesn't allow an outer rule to parse the remaining tokens, subsequent options\nthat match a different number of tokens will be attempted.  This makes\nCodeWhisper slightly slower than a good PEG implementation for unambiguous\ngrammars, but makes accidental ambiguity much easier to handle.\n\nSpecial caveats apply to sets.  They offer a convenient syntax for including a\ngroup of options inside a larger sequence, but they don't define an order, and\nthey can't include lists or tuples of lists.  If order is important, or a\nchoice includes optional items, use either a subrule or a Parser instance.\nFor example:\n\n```python\ndef json_float(rule):\n    integral = {\"0\", (Notahead(\"0\"), Plus(DIGIT))}\n    fractional = (\".\", Plus(DIGIT))\n    exponential = ({\"e\", \"E\"}, [{\"-\", \"+\"}], Plus(DIGIT))\n    rule | ([\"-\"], integral, Parser((fractional, [exponential]), exponential))\n```\n\nHere, sets are used for the `integral` and `exponential` portions of the rule,\nbut since lists are unhashable, `(fractional, [exponential])` uses an explicit\nParser.  That it happens to always check for a decimal point before checking\nfor an exponent is a minor bonus.\n\nThat example also showcases `Notahead` and `Plus`, which use Parser subclasses\nto match any number of digits, in one case only when the first digit is\nnon-zero. They're found in the `codetalker.special` module, along with\n`Avoid`, `Consume`, `Lookahead`, `Max`, `Parallel`, `Seek`, `Sequence`,\nand `Star`.\n\nBy convention, rule functions are given `lower_case` names, to distinguish\nthem from token classes.  Parser subclasses and functions that transform\nparser sequences have been given `TitleCase` names, though the fact that they\nget called within a rule function also helps distinguish them from rules and\ntokens, which can be important for translation purposes.\n\n\nTranslation\n-----------\n\nParse trees by themselves aren't very useful, so the Grammar class offers a\nway to translate them into what you really want.  By default, a token will be\ntranslated into its string value, but that can be overridden:\n\n```python\nclass NUMBER(PatternToken):\n    pattern = r\"(?:0|[1-9][0-9]*)(?:\\.[0-9]+|)(?:[eE][-+]?[0-9]+|)\"\n    \n    def translate(self, scope):\n        return float(self.value)\n```\n\nRules are by default translated into a list of translated tokens and subrules.\nTo get a subset of those, assign a list of rules and/or token classes to\n`rule.result`:\n\n```python\ndef json_list(rule):\n    rule | ('[', [{Commas(value), WHITESPACE}], ']')\n    rule.result = [value]\n```\n\nA single rule or token class can be selected by assigning just that item.\nIf no such item exists in the final parse, it will end up as None instead.\nA single one of multiple rules or tokens can be chosen by assigning a set:\n\n```python\ndef value(rule):\n    val = {CONSTANT, json_object, json_list, json_int, json_float, json_string}\n    rule | ([WHITESPACE], val, [WHITESPACE])\n    rule.result = val\n```\n\nMultiple such items can be combined into a dictionary by assigning one to\n`rule.result` with such a list, set, rule, or token class as each value:\n\n```python\ndef expression(rule):\n    rule | (term, Star(\"+\", term), [\"-\", term])\n    rule.result = {\n        'operators': [SYMBOL],\n        'terms': [term],\n    }\n```\n\nFor more interesting translations, the result can be passed to a translator\nfunction:\n\n```python\ndef json_int(rule):\n    rule | ([\"-\"], \"0\")\n    rule | ([\"-\"], Notahead(\"0\"), Plus(DIGIT))\n    def int_translator(node, scope):\n        return int(\"\".join(token.value for token in node))\n    rule.translator = int_translator\n```\n\nNote, however, that the tokens and subrules are not translated before being\npassed to that function.  It can translate them by using `scope.translate`\nwith or without extra information:\n\n```python\ndef json_object(rule):\n    rule | ('{', [Commas(json_string, ':', value)], '}')\n    rule.result = {'keys': [json_string], 'values': [value]}\n    def object_translator(node, scope):\n        return {\n            scope.translate(key): scope.translate(value)\n            for key, value in zip(node['keys'], node['values'])\n        }\n    rule.translator = object_translator\n```\n\n\nGrammar\n-------\n\nEach of those steps are governed by the Grammar class:\n\n```python\ntokens = [SYMBOL, WHITESPACE, CONSTANT, NUMBER, STRING]\ngrammar = Grammar(start=value, tokens=tokens, ignore=[WHITESPACE])\nresult = grammar.parse(text)\n```\n\nEach grammar's `start` rule is function defining the language that the text\nmust match in order to parse successfully.  It and any other rules it uses\nwill be evaluated as part of the Grammar creation, so they must already exist.\nEach grammar rule will be evaluated only once, even if it is used in multiple\ngrammars.\n\nThe list of `tokens` will be used to tokenize the text.  Each token class will\nbe checked in order; if two or more would match at the same position in the\ntext, the first one in the list takes precedence.\n\nAny tokens in the optional `ignore` list will be ignored by grammar rules,\nessentially as if they didn't exist.  Instead, they will be added to the\n`ignored` attribute of the following token.  As a convenience,\n`codewhisper.tokens.join_tokens` will include the value of any ignored tokens\nwithin the sequence passed to it.\n\nThe `parse` function runs unicode text through tokenization, parsing, and\ntranslation.  It is not intended to accept bytestrings, but pull requests that\ncan make it do so will be considered.\n\n\nExamples\n--------\n\nThe `examples` directory contains a few working grammars, including two\ndifferent ways to parse JavaScript Object Notation.  These do not, however,\nshowcase the full range of the parser, much less the special functions.\nIndeed, this parser is probably at its best with the kind of large, complex\nsystem that wouldn't fit well in a single file.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/goldenleaf/codewhisper",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "codewhisper",
    "package_url": "https://pypi.org/project/codewhisper/",
    "platform": null,
    "project_url": "https://pypi.org/project/codewhisper/",
    "project_urls": {
      "Homepage": "https://gitlab.com/goldenleaf/codewhisper"
    },
    "release_url": "https://pypi.org/project/codewhisper/1.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Dynamic parsing library",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16206571,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eda0a48e4439ca0bf3c24fc292a89c725f63e63b6a3353313261a7ac479b917e",
          "md5": "12524bbc34e5414eb0bdf09c450f82e6",
          "sha256": "6c743f205309f0b8c74c035f1ca2c61f21d5cc2f42cbf571e52cdb933a25b820"
        },
        "downloads": -1,
        "filename": "codewhisper-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "12524bbc34e5414eb0bdf09c450f82e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 372804,
        "upload_time": "2020-11-29T23:13:35",
        "upload_time_iso_8601": "2020-11-29T23:13:35.075031Z",
        "url": "https://files.pythonhosted.org/packages/ed/a0/a48e4439ca0bf3c24fc292a89c725f63e63b6a3353313261a7ac479b917e/codewhisper-1.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Installation problems"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21e79be206f4870347da71e56e680b24b7866017dc4ac1c8a25db272587f67e3",
          "md5": "e93264082038d9d5f422a5aacfe3673c",
          "sha256": "1246d063cdbe88f62644824b6caf651614817382fa3fe779cde1e5f1c48cb6b0"
        },
        "downloads": -1,
        "filename": "codewhisper-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e93264082038d9d5f422a5aacfe3673c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 372860,
        "upload_time": "2020-11-29T23:54:34",
        "upload_time_iso_8601": "2020-11-29T23:54:34.559488Z",
        "url": "https://files.pythonhosted.org/packages/21/e7/9be206f4870347da71e56e680b24b7866017dc4ac1c8a25db272587f67e3/codewhisper-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b53c14e2525c3f09a158aa4f68b8cf6157f6d8b77ac9a98dd41b6220e163d2e1",
          "md5": "25fed4995666d21bf7a4a16be7e10845",
          "sha256": "7f6196be1e9f656e1c52142a9b2b2eca1b38f345dc0743f233b254184bd5b5cd"
        },
        "downloads": -1,
        "filename": "codewhisper-1.0.1b1.tar.gz",
        "has_sig": false,
        "md5_digest": "25fed4995666d21bf7a4a16be7e10845",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 372868,
        "upload_time": "2020-11-29T23:45:55",
        "upload_time_iso_8601": "2020-11-29T23:45:55.474033Z",
        "url": "https://files.pythonhosted.org/packages/b5/3c/14e2525c3f09a158aa4f68b8cf6157f6d8b77ac9a98dd41b6220e163d2e1/codewhisper-1.0.1b1.tar.gz",
        "yanked": true,
        "yanked_reason": "Beta release"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd06eaa1311a07891af7c266e569a7cc4b0bee89232c455137f27d591992b153",
          "md5": "b46c69179765128839cda058ae7d3ea2",
          "sha256": "b3f51106bf9d30335bdb378cd024c131e4e87c7aa95f22b36b7ece74fcebb305"
        },
        "downloads": -1,
        "filename": "codewhisper-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b46c69179765128839cda058ae7d3ea2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 410742,
        "upload_time": "2022-07-04T19:49:13",
        "upload_time_iso_8601": "2022-07-04T19:49:13.211287Z",
        "url": "https://files.pythonhosted.org/packages/fd/06/eaa1311a07891af7c266e569a7cc4b0bee89232c455137f27d591992b153/codewhisper-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "671e3af8ba82bb369ca69abc0a55ce5465d75a1e76216a148150d4a3f16bf214",
          "md5": "9df5307eff6deadc57c216612ac5aa6a",
          "sha256": "700f03689715c78069afface9a5bacc158d4970e2b126bc069c602256d911266"
        },
        "downloads": -1,
        "filename": "codewhisper-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9df5307eff6deadc57c216612ac5aa6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 410963,
        "upload_time": "2022-11-13T01:29:47",
        "upload_time_iso_8601": "2022-11-13T01:29:47.491801Z",
        "url": "https://files.pythonhosted.org/packages/67/1e/3af8ba82bb369ca69abc0a55ce5465d75a1e76216a148150d4a3f16bf214/codewhisper-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6aa6986d1ba643df5267736939ab7f4dbc01808eb018feae0013ec9219a6ca06",
          "md5": "b1f29a37bda4804e448f325fe3fe045f",
          "sha256": "76f5186db1dd769b3c28c5a8bf764d02acd949335d49da5e3e02fedbc81b97df"
        },
        "downloads": -1,
        "filename": "codewhisper-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b1f29a37bda4804e448f325fe3fe045f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 414250,
        "upload_time": "2022-12-24T20:23:06",
        "upload_time_iso_8601": "2022-12-24T20:23:06.779180Z",
        "url": "https://files.pythonhosted.org/packages/6a/a6/986d1ba643df5267736939ab7f4dbc01808eb018feae0013ec9219a6ca06/codewhisper-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6aa6986d1ba643df5267736939ab7f4dbc01808eb018feae0013ec9219a6ca06",
        "md5": "b1f29a37bda4804e448f325fe3fe045f",
        "sha256": "76f5186db1dd769b3c28c5a8bf764d02acd949335d49da5e3e02fedbc81b97df"
      },
      "downloads": -1,
      "filename": "codewhisper-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b1f29a37bda4804e448f325fe3fe045f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 414250,
      "upload_time": "2022-12-24T20:23:06",
      "upload_time_iso_8601": "2022-12-24T20:23:06.779180Z",
      "url": "https://files.pythonhosted.org/packages/6a/a6/986d1ba643df5267736939ab7f4dbc01808eb018feae0013ec9219a6ca06/codewhisper-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}