{
  "info": {
    "author": "MrMrRobat",
    "author_email": "appkiller16@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "# aiopolly\n[![Python 3.7](https://img.shields.io/badge/Python%203.7-blue.svg)](https://python.org) \n[![PyPi Package Version](https://img.shields.io/pypi/v/aiopolly.svg)](https://pypi.python.org/pypi/aiopolly)\n[![Amazon Polly API](https://img.shields.io/badge/-Amazon%20Polly%20API-orange.svg?logo=amazon&labelColor=gray)](https://docs.aws.amazon.com/en_us/polly/latest/dg/what-is.html)\n\naiopolly is an asynchronous library for [Amazon Polly API](https://docs.aws.amazon.com/en_us/polly/latest/dg/API_Reference.html) which is written with [asyncio](https://docs.python.org/3/library/asyncio.html) and [aiohttp](https://github.com/aio-libs/aiohttp) and uses [pydantic](https://github.com/samuelcolvin/pydantic) models\n\n# Features\n- Asynchronous\n- Respects PEP-8 (no camelCase args and vars)\n- Provides easy way to work with SSML tags and lexicons\n- Has mapped and classified AWS API exceptions\n- Has audio convert support and built-in async opus converter\n\n# Installation\n```bash\n$ pip install aiopolly\n```\n\n# Getting started\nTo work with AWS Polly you need AWS account, IAM User and it's credentials, [here's the instructions](https://docs.aws.amazon.com/en_us/polly/latest/dg/setting-up.html) how to get it\n\nThen you can init this class using one of two methods:\n\n1) Provide your access and secret keys directly:\n    ```python\n   from aiopolly import Polly\n\n   polly = Polly(access_key='your_access_key', secret_key='your_secret_key')\n    ```\n\n\n2) Create a ~/.aws/credentials file with following data:\n    ```\n    [default]\n        aws_access_key_id = your_access_key\n        aws_secret_access_key = your_secret_key\n    ```\n    And init class without any auth params:\n    ```python\n   from aiopolly import Polly\n\n   polly = Polly()\n    ```\n\n\n# Examples\n\n## Many voices\n```python\nimport asyncio\nimport time\n\nfrom aiopolly import Polly, types\n\n\nasync def main():\n    time_start = time.time()\n    # Initializing AWS Polly client with default output_format\n    polly = Polly(output_format=types.AudioFormat.mp3)\n\n    voices = await polly.describe_voices()\n\n    text = 'Whatever you can do I can override it, got a million ways to synthesize it'\n\n    # Asynchronously synthesizing text with all available voices\n    synthesized = await voices.synthesize_speech(text, language_code=types.LanguageCode.en_US)\n\n    # Asynchronously saving each synthesized audio on disk\n    await asyncio.gather(\n        *(speech.save_on_disc(directory='examples') for speech in synthesized)\n    )\n\n    # Counting how many characters were synthesized\n    characters_synthesized = sum(speech.request_characters for speech in synthesized)\n\n    print(f'{characters_synthesized} characters are synthesized on {len(synthesized)}speech'\n          f'and saved on disc in {time.time() - time_start} seconds!')\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n## Managing lexicons\n```python\nimport asyncio\n\nfrom aiopolly import Polly\nfrom aiopolly.types import Alphabet, AudioFormat, LanguageCode, VoiceID\nfrom aiopolly.utils.lexicon import new_lexicon, new_lexeme\n\nasync def main():\n    # Creating a new Polly instance with default output format 'mp3'\n    polly = Polly(output_format=AudioFormat.mp3)\n\n    text = 'Python is a beautiful programming language which is commonly used for web backend and ML. ' \\\n           'It also has cool style guides listed in PEP-8, and many community libraries like aiopolly or aiogram.'\n\n    # Creating new lexemes\n    python_lexemes = [\n        new_lexeme(grapheme='PEP', alias='Python Enhancement Proposals'),\n        new_lexeme(grapheme='ML', alias='Machine Learning'),\n        new_lexeme(grapheme='aiopolly', phoneme='eɪˈaɪoʊˈpɑli'),\n        new_lexeme(grapheme='aiogram', phoneme='eɪˈaɪoʊˌgræm')\n    ]\n\n    # Creating a new lexicon with 'ipa' alphabet and 'en_US' language code\n    lexicon = new_lexicon(alphabet=Alphabet.ipa, lang=LanguageCode.en_US, lexemes=python_lexemes)\n\n    # Putting lexicon on Amazon server\n    lexicon_name = 'PythonML'\n    await polly.put_lexicon(lexicon_name=lexicon_name, content=lexicon)\n\n    # Synthesizing speech with lexicon we just created \n    # (we don't need to specify required param \"output_format\", as we using it by default)\n    speech = await polly.synthesize_speech(text, voice_id=VoiceID.Matthew, lexicon_names=[lexicon_name])\n\n    # Saving speech on disk with default name\n    await speech.save_on_disc()\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n## Using SSML Text\naiopolly got built-in ssml-text factory which you can use to manage your ssml text:\n```python\nimport asyncio\n\nfrom aiopolly import Polly\nfrom aiopolly.types import AudioFormat, VoiceID, TextType\nfrom aiopolly.utils.ssml import ssml_text, prosody\nfrom aiopolly.utils.ssml.params import Volume, Pitch, Rate\n\nsuper_fast = prosody(f'''\\\nUh, sama lamaa duma lamaa you assuming I'm a human\\\nWhat I gotta do to get it through to you I'm superhuman\\\nInnovative and I'm made of rubber\\\nSo that anything you say is ricocheting off of me and it'll glue to you\\\nI'm devastating more than ever demonstrating\\\nHow to give a motherfuckin' audience a feeling like it's levitating\\\nNever fading and I know that the haters are forever waiting\\\nFor the day that they can say I fell off they'd be  celebrating\\\n'Cause I know the way to get 'em motivated\n''',\n    rate=Rate.x_fast, volume=Volume.x_loud, pitch=Pitch.high\n)\n\n\nasync def main():\n    # Creating a new Polly instance with default output format 'mp3'\n    polly = Polly(output_format=AudioFormat.mp3)\n\n    text = ssml_text(super_fast)\n\n    speech = await polly.synthesize_speech(text, voice_id=VoiceID.Matthew, text_type=TextType.ssml)\n\n    await speech.save_on_disc(directory='speech')\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n## Using default params\nYou can init Polly client with any default params.\nThose will be used when same params in API methods remain empty.\n```python\nfrom aiopolly import Polly, types\n\npolly = Polly(\n    voice_id=types.VoiceID.Joanna,\n    output_format=types.AudioFormat.ogg_vorbis,\n    sample_rate='16000',\n    speech_mark_types=['ssml'],\n    text_type=types.TextType.ssml,\n    language_code=types.LanguageCode.en_US,\n    lexicon_names=['myLexicon', 'alsoMyLexicon'],\n    output_s3_key_prefix='s3_key_prefix',\n    output_s3_bucket_name='s3_bucket_name',\n    include_additional_language_codes=True,\n    **{'other_default_param': 'value'}\n)\n```\n\n## Using built-in OpusConverter\nFor this to work you need ffmpeg and libopus installed on your system\n\n```python\nimport asyncio\n\nfrom aiopolly import Polly\nfrom aiopolly.types import AudioFormat, TextType, VoiceID\nfrom aiopolly.utils.converter import OpusConverter\nfrom aiopolly.utils.ssml import ssml_text, pause, Strength\n\n\nasync def main():\n    # Creating instance if OpusConverter\n    converter = OpusConverter(auto_convert=True, keep_original=True)\n\n    polly = Polly(output_format=AudioFormat.mp3, converter=converter)\n\n    text = ssml_text(f'''\nsendVoice\n\nUse this method to send audio files, if you want Telegram clients to display the file as a playable voice message. \nFor this to work, your audio must be in an {pause(Strength.none)}.ogg file encoded with OPUS \n(other formats may be sent as Audio or Document)\n''')\n\n    # Synthesizing speech as usual, it will be converted automatically\n    speech = await polly.synthesize_speech(text, voice_id=VoiceID.Matthew, text_type=TextType.ssml)\n\n\n    # Saving speech on disk with default name\n    await speech.save_on_disc(directory='speech')\n    await speech.save_on_disc(directory='speech', converted=False)\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n# To-Do:\n- Test Synthesis tasks (not tested yet)\n- Write tests\n- Get rid of botocore (built-in request signer needed)\n- Work on converter API?\n- More docs?\n\n\n###### Inspired by Alex Root Junior's [aiogram](https://github.com/aiogram/aiogram)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MrMrRobat/aiopolly",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiopolly",
    "package_url": "https://pypi.org/project/aiopolly/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiopolly/",
    "project_urls": {
      "Homepage": "https://github.com/MrMrRobat/aiopolly"
    },
    "release_url": "https://pypi.org/project/aiopolly/0.2.2/",
    "requires_dist": [
      "aiofiles (==0.4.0)",
      "aiohttp (>=3.5.4)",
      "botocore (>=1.12.0)",
      "certifi (>=2019.3.9)",
      "pydantic (>=0.27)"
    ],
    "requires_python": "",
    "summary": "Asynchronous wrapper for AWS Polly API",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9342243,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ae87979de87633fbb9ac6d994fda910ebbaa80e115ecd7d2b89e41b8aa7f0eb",
          "md5": "13e22564677a21d5a551206e76e7b38a",
          "sha256": "bd56149ad8d2a809cc3e0530536923f3058741ff799933589c4818f7ac4fbd9f"
        },
        "downloads": -1,
        "filename": "aiopolly-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13e22564677a21d5a551206e76e7b38a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 35313,
        "upload_time": "2019-06-12T15:07:49",
        "upload_time_iso_8601": "2019-06-12T15:07:49.981692Z",
        "url": "https://files.pythonhosted.org/packages/5a/e8/7979de87633fbb9ac6d994fda910ebbaa80e115ecd7d2b89e41b8aa7f0eb/aiopolly-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfd78c3c9ecf3c9f6fcaec49be8f749093bc9dde691320c920b8a8f27aabdbd3",
          "md5": "060b8bb5f7f3125a263cf72757dfc712",
          "sha256": "5ad7697268c6b0cdcfb84124bcae07c34ca2b6eda0228ee9d3f1994341291be2"
        },
        "downloads": -1,
        "filename": "aiopolly-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "060b8bb5f7f3125a263cf72757dfc712",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29171,
        "upload_time": "2019-06-12T15:07:52",
        "upload_time_iso_8601": "2019-06-12T15:07:52.742133Z",
        "url": "https://files.pythonhosted.org/packages/df/d7/8c3c9ecf3c9f6fcaec49be8f749093bc9dde691320c920b8a8f27aabdbd3/aiopolly-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fec2ca800582a7c34ba78dbdc1d8ea60fd3de4a4985a2fdd793d3707ead56af",
          "md5": "88aa48e3aa1afe89c9432ae5dfcf592c",
          "sha256": "d82338cb9acf2d70de9836be28fc188cf19d42711d19c10b439704770db7cec5"
        },
        "downloads": -1,
        "filename": "aiopolly-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88aa48e3aa1afe89c9432ae5dfcf592c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34843,
        "upload_time": "2019-06-12T23:35:05",
        "upload_time_iso_8601": "2019-06-12T23:35:05.363660Z",
        "url": "https://files.pythonhosted.org/packages/6f/ec/2ca800582a7c34ba78dbdc1d8ea60fd3de4a4985a2fdd793d3707ead56af/aiopolly-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c1c4d076afec85a8c790eafdb2d9b5a8060b85ad316ea9829f6ed827ad0192d",
          "md5": "1455daf68432a884894059c6d8b80439",
          "sha256": "f1d2cc3bdfd9db5b15576fe795477393da548e1d61973a82b88e512f02358187"
        },
        "downloads": -1,
        "filename": "aiopolly-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1455daf68432a884894059c6d8b80439",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30156,
        "upload_time": "2019-06-12T23:35:07",
        "upload_time_iso_8601": "2019-06-12T23:35:07.389779Z",
        "url": "https://files.pythonhosted.org/packages/5c/1c/4d076afec85a8c790eafdb2d9b5a8060b85ad316ea9829f6ed827ad0192d/aiopolly-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c162d4e437e4a312ad988c0ed5c3af49b89c868f330f349efd1f92672e4e09be",
          "md5": "fb698b3f606908f86ef18b943575bd82",
          "sha256": "bc64a8b2a4754d789db16f7f345d2112a29ed900048253dc280cbe9612b82ea8"
        },
        "downloads": -1,
        "filename": "aiopolly-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb698b3f606908f86ef18b943575bd82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37074,
        "upload_time": "2021-02-07T12:28:13",
        "upload_time_iso_8601": "2021-02-07T12:28:13.864434Z",
        "url": "https://files.pythonhosted.org/packages/c1/62/d4e437e4a312ad988c0ed5c3af49b89c868f330f349efd1f92672e4e09be/aiopolly-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fda91d3c8607943d85e23441f7ffaa989a6ed5597a27ef5640ddcf3b615eb3f",
          "md5": "2f4dcedfe4c107e1032104520c8ec170",
          "sha256": "3360da85848ca09cd615598f956f230f536c211365a641ca230169fdf6eea036"
        },
        "downloads": -1,
        "filename": "aiopolly-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2f4dcedfe4c107e1032104520c8ec170",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32771,
        "upload_time": "2021-02-07T12:28:15",
        "upload_time_iso_8601": "2021-02-07T12:28:15.442325Z",
        "url": "https://files.pythonhosted.org/packages/2f/da/91d3c8607943d85e23441f7ffaa989a6ed5597a27ef5640ddcf3b615eb3f/aiopolly-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c162d4e437e4a312ad988c0ed5c3af49b89c868f330f349efd1f92672e4e09be",
        "md5": "fb698b3f606908f86ef18b943575bd82",
        "sha256": "bc64a8b2a4754d789db16f7f345d2112a29ed900048253dc280cbe9612b82ea8"
      },
      "downloads": -1,
      "filename": "aiopolly-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fb698b3f606908f86ef18b943575bd82",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 37074,
      "upload_time": "2021-02-07T12:28:13",
      "upload_time_iso_8601": "2021-02-07T12:28:13.864434Z",
      "url": "https://files.pythonhosted.org/packages/c1/62/d4e437e4a312ad988c0ed5c3af49b89c868f330f349efd1f92672e4e09be/aiopolly-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2fda91d3c8607943d85e23441f7ffaa989a6ed5597a27ef5640ddcf3b615eb3f",
        "md5": "2f4dcedfe4c107e1032104520c8ec170",
        "sha256": "3360da85848ca09cd615598f956f230f536c211365a641ca230169fdf6eea036"
      },
      "downloads": -1,
      "filename": "aiopolly-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2f4dcedfe4c107e1032104520c8ec170",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32771,
      "upload_time": "2021-02-07T12:28:15",
      "upload_time_iso_8601": "2021-02-07T12:28:15.442325Z",
      "url": "https://files.pythonhosted.org/packages/2f/da/91d3c8607943d85e23441f7ffaa989a6ed5597a27ef5640ddcf3b615eb3f/aiopolly-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}