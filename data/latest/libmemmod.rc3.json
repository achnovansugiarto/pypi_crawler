{
  "info": {
    "author": "DanielFvM",
    "author_email": "ds@xxxmail.eu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# memmod\nA library to modify another program's memory on linux x64. The goal of this library is to provide easy\nfunctions to modify the memory of another application externaly. Additionaly creating a program like\n[CheatEngine](https://cheatengine.org/) that runs natively on Linux with many features that CheatEngine provides.\n\n## Examples\nA basic example on how to use memmod, for more examples look [here](examples).\n```py\nfrom memmod import Process\n\n# opens a process with the name \"supertux2\" \nproc = Process(name=\"supertux2\")\n\n# get the puts function and execute it inside the process\nputs = proc.get_libc_function(\"puts\")\nputs(\"Hello World!\")\n\n# Find a module by name\nmodulebase = proc.find_module(proc.name)\nassert modulebase != None, \"Failed to find module base\"\n\n# Search ingame coin address by resolving a pointer chain \nstatic_ptr = modulebase.start + 0x6CBC40\ncoin_ptr_addr = proc.resolve_pointer_chain(static_ptr, [0x28, 0x20, 0x0])\n\n# Write to address a number\nproc.write(coin_ptr_addr, 9999)\n```\n\n\n## Installation\nYou can find the uploaded library [here](https://pypi.org/project/libmemmod/) and install it with:\n```\npip3 install libmemmod\n```\nTogether with the library you can also use the various [scripts](memmod/scripts/) that have been installed.\nHere an example of their usage:\n```\nsudo -E loadshared -n supertux2 mysharedlib.so\nsudo -E accessanalyzer -n supertux2 -a 0x559c7b55330e\nsudo -E pointerscanner -n supertux2 -a 0x558599fb6fe0 -r 0x1ff\nsudo -E timerhack -n supertux2 -f 2.0\n```\n\n## Features\n* read/write to a process\n* inject breakpoints and listen to them\n* execute functions within the target process\n* find modules from `/proc/pid/maps` by name, mode, offset or address\n* inject `.so` into target process with `load_shaderd_library()`\n* create function detours with an optional trampoline\n* bindings for ptrace\n* get path to binary file with `get_path_to_executable()`\n* search pattern in a module with a signature\n* resolve a pointerchain to find addresses, can be used with the [Pointer Scanner](memmod/scripts/pointerscanner.py).\n* supports mono specific calls, [see here](memmod/monomanager.py)\n* find symbol and relocation offsets within a module\n* get X11 window id with `get_x11_window()`\n* send key presses to the process `send_key()`\n* search for data or addresses in a specified range with `scan()` \n\n## How it works\n### Finding processes and reading/writing to them\nWe use the `/proc/` folder that \"stores\" all processes in separate folders with their Process-ID (pid) as the folder name.\nEach process has a `/proc/pid/status` file that contains the process name, a `/proc/pid/maps` file with all the memory regions\nlisted, a `/proc/pid/mem` \"file\" in which we can read/write in to the memory of the process (with the necessary permissions).\nFor reading and writting use the functions `read()` and `write()`, searching for a module can be done by using the functions\n`find_module()` and `find_module_with_address()`.\n\n### Debugging\nFor debugging we use the ptrace systemcall that allows us to stop a process, read its registers and continue until it reaches\na breakpoint. A breakpoint in x64 linux is the hex number 0xCC and we can simply write this byte into the process as explained\nin the previous section. To use the debugger with this library run `with proc.ptrace() as ptrace:`, when running this, it will\nautomatically attach to the process and stops, after that it will NOT detach, but instead just continue! If you want it to detach\nyou will need todo it manually with `ptrace.detach()`.\nFor easier handling with debugging and breakpoints you can use `add_breakpoint()`, it will take an `address` and a `handler` that\nis being executed as soon as the target process reaches the breakpoint. Optionaly you can provide it with data that can be used\nint the handler. The handler will receive the registers and the data if provided. The handler must return a boolean, if it returns\n`False` the breakpoint will be removed, to keep the breakpoint return `True`. But to start listening to the breakpoints you will\nneed to run the `listen()` function. Note that the breakpoints are not being written into the memory by `add_breakpoint()` but by\n`listen()`. Listen will stop when all breakpoints have been deleted or the user interrupts it with ctrl+c, which will lead to the\nautomatic removal of all breakpoints. Look [here](/examples/) for examples on how to use it.\n\n### Function execution\nWe use ptrace to stop the application and write the `call rax` instruction at the current `rip` location and a breakpoint after \nthat. We load into the `rax` register the address to the function we want to execute and the other register are being set to the \narguments we want to pass to the function. After setting the registers, we continue the process flow and will reset the registers \nand the overwritten binary as soon as we reach the breakpoint. To use this feature use the function `run_function()`.\nFor more information see [this](https://ancat.github.io/python/2019/01/01/python-ptrace.html) article.\n\n\n\n## Scripts\nTo show the capabilities of this library I programmed a few scripts that can be helpful when searching for addresses and are \nalso being installed when installing this library. These scripts where inspired by the functionalities of [CheatEngine](https://cheatengine.org/).\n* [Access Analyzer](memmod/scripts/accessanalyzer.py) Searches for asm instruction accessing address\n* [Pointer Scanner](memmod/scripts/pointerscanner.py) Searches for pointers pointing to an address\n* [Load Shared Library](memmod/scripts/loadshared.py) Loads a `.so` file to a process\n* [Timer hack](memmod/scripts/timerhack.py) Speeds up the clock by a defined factor (x64 only)\n\n\n## Resources\nHere are some useful links to websites that helped me making this library and the scripts.\n* [Guided Hacking - Read / Write to memory](https://www.youtube.com/watch?v=VMlW7BoI_IQ)\n* [Linux-Inject](https://github.com/gaffe23/linux-inject)\n* [ELF-Structure](https://uclibc.org/docs/elf-64-gen.pdf)\n* [Injecting Code with Ptrace](https://ancat.github.io/python/2019/01/01/python-ptrace.html)\n* [BananaBot - CSGO hacking](https://bananamafia.dev/post/bananabot/)\n* [C++ vtables](https://defuse.ca/exploiting-cpp-vtables.htm)\n* [LD_PRELOAD and Symbols](http://www.goldsborough.me/c/low-level/kernel/2016/08/29/16-48-53-the_-ld_preload-_trick/)\n* [Guided Hacking - Function hooking](https://guidedhacking.com/threads/how-to-hook-functions-code-detouring-guide.14185/)\n* [Guided Hacking - Unity / Mono](https://www.youtube.com/watch?v=e7cCus-LfBo)\n* [Mono API Documentation](http://docs.go-mono.com/?link=root:/embed)\n* [Sendkeys (X11)](https://github.com/kyoto/sendkeys)\n\n\n## Tools\nSome tools and programs that I used when testing and debugging the library and it's scripts.\n* readelf (read symbols from binary file)\n* objdump (assembler code of binary file)\n* gdb (for debugging the target process)\n* monodis\n* [online-86-assembler](https://defuse.ca/online-x86-assembler.htm)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danielfvm/memmod",
    "keywords": "linux,memory,hacking-tools",
    "license": "GPL-3.0-only",
    "maintainer": "",
    "maintainer_email": "",
    "name": "libmemmod",
    "package_url": "https://pypi.org/project/libmemmod/",
    "platform": null,
    "project_url": "https://pypi.org/project/libmemmod/",
    "project_urls": {
      "Bug Tracker": "https://github.com/danielfvm/memmod/issues",
      "Homepage": "https://github.com/danielfvm/memmod",
      "Repository": "https://github.com/danielfvm/memmod"
    },
    "release_url": "https://pypi.org/project/libmemmod/0.0.5/",
    "requires_dist": [
      "capstone (==4.0.2)",
      "pyelftools (>=0.28,<0.29)",
      "xlib (>=0.21,<0.22)"
    ],
    "requires_python": "",
    "summary": "A library to modify another program's memory.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14791098,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdcb5be7eed63c328d69057512fdd81a7a2e974b171b289ede9e2615ca0e72d3",
          "md5": "5e806ae7d0dcc20ed42fe3d4a125d661",
          "sha256": "9bdfe3e0f2229224ccf311ab7c8e48230f0538153a4048148b17a3592ad5821a"
        },
        "downloads": -1,
        "filename": "libmemmod-0.0.3-cp310-cp310-manylinux_2_35_x86_64.whl",
        "has_sig": false,
        "md5_digest": "5e806ae7d0dcc20ed42fe3d4a125d661",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 42200,
        "upload_time": "2022-08-10T12:46:47",
        "upload_time_iso_8601": "2022-08-10T12:46:47.993246Z",
        "url": "https://files.pythonhosted.org/packages/cd/cb/5be7eed63c328d69057512fdd81a7a2e974b171b289ede9e2615ca0e72d3/libmemmod-0.0.3-cp310-cp310-manylinux_2_35_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6eff545934a7e3c0b6c865ac1a7e3cad9c58a35dc8a642e350e8d89b643c6353",
          "md5": "7f3a86d5d8281b89dbed74e145123771",
          "sha256": "35e429e04819f5604a5bef07769ada643e3ca9dfbaf5bc421cd6e609c42426f4"
        },
        "downloads": -1,
        "filename": "libmemmod-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7f3a86d5d8281b89dbed74e145123771",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31214,
        "upload_time": "2022-08-10T12:46:50",
        "upload_time_iso_8601": "2022-08-10T12:46:50.750818Z",
        "url": "https://files.pythonhosted.org/packages/6e/ff/545934a7e3c0b6c865ac1a7e3cad9c58a35dc8a642e350e8d89b643c6353/libmemmod-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da17181624380b5afe96436de0ecd0a1bc1fa58f7a592178cecc7d29f2ddd939",
          "md5": "b0e9d0ce4f81140c791b9736d783da5d",
          "sha256": "eb24a9d2a098a12f5c420f5057a8daf875698c75b6e945825b4e2df76aa99cd9"
        },
        "downloads": -1,
        "filename": "libmemmod-0.0.4-cp310-cp310-manylinux_2_35_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b0e9d0ce4f81140c791b9736d783da5d",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 42398,
        "upload_time": "2022-08-10T13:12:42",
        "upload_time_iso_8601": "2022-08-10T13:12:42.944884Z",
        "url": "https://files.pythonhosted.org/packages/da/17/181624380b5afe96436de0ecd0a1bc1fa58f7a592178cecc7d29f2ddd939/libmemmod-0.0.4-cp310-cp310-manylinux_2_35_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdf0681031f5a68de84d271a88152152d55ad20348e0d34ee8b6ae479b314cfd",
          "md5": "11d8fc061cb75bda9488bd40705bb8c3",
          "sha256": "1184632b26f84ddaf4dac1d480745d57109c2337b847d8b580066608aa65c165"
        },
        "downloads": -1,
        "filename": "libmemmod-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "11d8fc061cb75bda9488bd40705bb8c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31643,
        "upload_time": "2022-08-10T13:12:45",
        "upload_time_iso_8601": "2022-08-10T13:12:45.061156Z",
        "url": "https://files.pythonhosted.org/packages/bd/f0/681031f5a68de84d271a88152152d55ad20348e0d34ee8b6ae479b314cfd/libmemmod-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "061bf9cfd553236ec600980a7ff164363f3420454fb72eb108840804d34a97e0",
          "md5": "9ac80dd7b300c6c6498c8614c212105d",
          "sha256": "cce1377d47e116c8b4accaafa8bda4be25f697307818511ff9efab3f5b1dde6a"
        },
        "downloads": -1,
        "filename": "libmemmod-0.0.5-cp310-cp310-manylinux_2_35_x86_64.whl",
        "has_sig": false,
        "md5_digest": "9ac80dd7b300c6c6498c8614c212105d",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 44366,
        "upload_time": "2022-08-17T17:34:44",
        "upload_time_iso_8601": "2022-08-17T17:34:44.539575Z",
        "url": "https://files.pythonhosted.org/packages/06/1b/f9cfd553236ec600980a7ff164363f3420454fb72eb108840804d34a97e0/libmemmod-0.0.5-cp310-cp310-manylinux_2_35_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6f0a7214966c874f2d388bbbdebaff02794d7c9ba85ed26ca2fff4291f565c1",
          "md5": "2604d47ad0aee6eadd34e548c9198175",
          "sha256": "cf2ec0b2833a41a55e3d24c6d5e3ee8ef517036cf58996ae6e84696205ec2876"
        },
        "downloads": -1,
        "filename": "libmemmod-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2604d47ad0aee6eadd34e548c9198175",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33098,
        "upload_time": "2022-08-17T17:34:46",
        "upload_time_iso_8601": "2022-08-17T17:34:46.086141Z",
        "url": "https://files.pythonhosted.org/packages/b6/f0/a7214966c874f2d388bbbdebaff02794d7c9ba85ed26ca2fff4291f565c1/libmemmod-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "061bf9cfd553236ec600980a7ff164363f3420454fb72eb108840804d34a97e0",
        "md5": "9ac80dd7b300c6c6498c8614c212105d",
        "sha256": "cce1377d47e116c8b4accaafa8bda4be25f697307818511ff9efab3f5b1dde6a"
      },
      "downloads": -1,
      "filename": "libmemmod-0.0.5-cp310-cp310-manylinux_2_35_x86_64.whl",
      "has_sig": false,
      "md5_digest": "9ac80dd7b300c6c6498c8614c212105d",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 44366,
      "upload_time": "2022-08-17T17:34:44",
      "upload_time_iso_8601": "2022-08-17T17:34:44.539575Z",
      "url": "https://files.pythonhosted.org/packages/06/1b/f9cfd553236ec600980a7ff164363f3420454fb72eb108840804d34a97e0/libmemmod-0.0.5-cp310-cp310-manylinux_2_35_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6f0a7214966c874f2d388bbbdebaff02794d7c9ba85ed26ca2fff4291f565c1",
        "md5": "2604d47ad0aee6eadd34e548c9198175",
        "sha256": "cf2ec0b2833a41a55e3d24c6d5e3ee8ef517036cf58996ae6e84696205ec2876"
      },
      "downloads": -1,
      "filename": "libmemmod-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "2604d47ad0aee6eadd34e548c9198175",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 33098,
      "upload_time": "2022-08-17T17:34:46",
      "upload_time_iso_8601": "2022-08-17T17:34:46.086141Z",
      "url": "https://files.pythonhosted.org/packages/b6/f0/a7214966c874f2d388bbbdebaff02794d7c9ba85ed26ca2fff4291f565c1/libmemmod-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}