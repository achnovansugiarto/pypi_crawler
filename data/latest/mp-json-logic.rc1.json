{
  "info": {
    "author": "mptnt1988",
    "author_email": "mptnt1988@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "json-logic-py\n=============\n\nForked from https://github.com/nadirizr/json-logic-py (author `nadir.izr <nadir@soundmindtech.com>`)\n\nThis parser accepts `JsonLogic <http://jsonlogic.com>`__ rules and\nexecutes them in Python.\n\nThis is a Python porting of the excellent GitHub project by\n`jwadhams <https://github.com/jwadhams>`__ for JavaScript:\n`json-logic-js <https://github.com/jwadhams/json-logic-js>`__.\n\nAll credit goes to him, this is simply an implementation of the same\nlogic in Python (small differences below).\n\nThe JsonLogic format is designed to allow you to share rules (logic)\nbetween front-end and back-end code (regardless of language difference),\neven to store logic along with a record in a database. JsonLogic is\ndocumented extensively at `JsonLogic.com <http://jsonlogic.com>`__,\nincluding examples of every `supported\noperation <http://jsonlogic.com/operations.html>`__ and a place to `try\nout rules in your browser <http://jsonlogic.com/play.html>`__.\n\nThe same format can also be executed in PHP by the library\n`json-logic-php <https://github.com/jwadhams/json-logic-php/>`__\n\nExamples\n--------\n\nSimple\n~~~~~~\n\n.. code:: python\n\n    from json_logic import jsonLogic\n    jsonLogic( { \"==\" : [1, 1] } )\n    # True\n\nThis is a simple test, equivalent to ``1 == 1``. A few things about the\nformat:\n\n1. The operator is always in the \"key\" position. There is only one key\n   per JsonLogic rule.\n2. The values are typically an array.\n3. Each value can be a string, number, boolean, array (non-associative),\n   or null\n\nCompound\n~~~~~~~~\n\nHere we're beginning to nest rules.\n\n.. code:: python\n\n    jsonLogic(\n      {\"and\" : [\n        { \">\" : [3,1] },\n        { \"<\" : [1,3] }\n      ] }\n    )\n    # True\n\nIn an infix language (like Python) this could be written as:\n\n.. code:: python\n\n    ( (3 > 1) and (1 < 3) )\n\nData-Driven\n~~~~~~~~~~~\n\nObviously these rules aren't very interesting if they can only take\nstatic literal data. Typically ``jsonLogic`` will be called with a rule\nobject and a data object. You can use the ``var`` operator to get\nattributes of the data object:\n\n.. code:: python\n\n    jsonLogic(\n      { \"var\" : [\"a\"] }, # Rule\n      { a : 1, b : 2 }   # Data\n    )\n    # 1\n\nIf you like, we support `syntactic\nsugar <https://en.wikipedia.org/wiki/Syntactic_sugar>`__ on unary\noperators to skip the array around values:\n\n.. code:: python\n\n    jsonLogic(\n      { \"var\" : \"a\" },\n      { a : 1, b : 2 }\n    )\n    # 1\n\nYou can also use the ``var`` operator to access an array by numeric\nindex:\n\n.. code:: python\n\n    jsonLogic(\n      {\"var\" : 1 },\n      [ \"apple\", \"banana\", \"carrot\" ]\n    )\n    # \"banana\"\n\nHere's a complex rule that mixes literals and data. The pie isn't ready\nto eat unless it's cooler than 110 degrees, *and* filled with apples.\n\n.. code:: python\n\n    rules = { \"and\" : [\n      {\"<\" : [ { \"var\" : \"temp\" }, 110 ]},\n      {\"==\" : [ { \"var\" : \"pie.filling\" }, \"apple\" ] }\n    ] }\n\n    data = { \"temp\" : 100, \"pie\" : { \"filling\" : \"apple\" } }\n\n    jsonLogic(rules, data)\n    # True\n\nAlways and Never\n~~~~~~~~~~~~~~~~\n\nSometimes the rule you want to process is \"Always\" or \"Never.\" If the\nfirst parameter passed to ``jsonLogic`` is a non-object,\nnon-associative-array, it is returned immediately.\n\n.. code:: python\n\n    #Always\n    jsonLogic(True, data_will_be_ignored);\n    # True\n\n    #Never\n    jsonLogic(False, i_wasnt_even_supposed_to_be_here);\n    # False\n\nInstallation\n------------\n\nThe best way to install this library is via\n`PIP <https://pypi.python.org/pypi/>`__:\n\n.. code:: bash\n\n    pip install json-logic\n\nIf that doesn't suit you, and you want to manage updates yourself, the\nentire library is self-contained in ``json_logic.py`` and you can\ndownload it straight into your project as you see fit.\n\n.. code:: bash\n\n    curl -O https://raw.githubusercontent.com/nadirizr/json-logic-py/master/json_logic.py\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mptnt1988/json-logic-py",
    "keywords": "json-logic",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mp_json_logic",
    "package_url": "https://pypi.org/project/mp_json_logic/",
    "platform": "",
    "project_url": "https://pypi.org/project/mp_json_logic/",
    "project_urls": {
      "Homepage": "https://github.com/mptnt1988/json-logic-py"
    },
    "release_url": "https://pypi.org/project/mp_json_logic/0.7.0a0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Build complex rules, serialize them as JSON, and execute them in Python",
    "version": "0.7.0a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8276207,
  "releases": {
    "0.7.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8f4d837c5440054146032004c47104de80c3743c0f47c0d7835c7d8152a5895",
          "md5": "ff5fda34ff876ad6df6e2c43a064c918",
          "sha256": "85c9abd533edc64d77eee266db20da7f416d1d78b03232f5aba77283146e0ec2"
        },
        "downloads": -1,
        "filename": "mp_json_logic-0.7.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "ff5fda34ff876ad6df6e2c43a064c918",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6400,
        "upload_time": "2020-09-26T02:08:34",
        "upload_time_iso_8601": "2020-09-26T02:08:34.709277Z",
        "url": "https://files.pythonhosted.org/packages/e8/f4/d837c5440054146032004c47104de80c3743c0f47c0d7835c7d8152a5895/mp_json_logic-0.7.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8f4d837c5440054146032004c47104de80c3743c0f47c0d7835c7d8152a5895",
        "md5": "ff5fda34ff876ad6df6e2c43a064c918",
        "sha256": "85c9abd533edc64d77eee266db20da7f416d1d78b03232f5aba77283146e0ec2"
      },
      "downloads": -1,
      "filename": "mp_json_logic-0.7.0a0.tar.gz",
      "has_sig": false,
      "md5_digest": "ff5fda34ff876ad6df6e2c43a064c918",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6400,
      "upload_time": "2020-09-26T02:08:34",
      "upload_time_iso_8601": "2020-09-26T02:08:34.709277Z",
      "url": "https://files.pythonhosted.org/packages/e8/f4/d837c5440054146032004c47104de80c3743c0f47c0d7835c7d8152a5895/mp_json_logic-0.7.0a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}