{
  "info": {
    "author": "Nikita Avdosev",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# bindpy\n\nThe bindpy package allows for partial application of arguments to a function, making it easy to create specialized versions of the function with some arguments pre-filled.\nIt is a better version of the Python's standard `partial` function from the `functools` package inspired by C++'s `std::bind`.\n\n## Install\n\nExpect gracefully crafted support for any version of Python 3+, but confidently tested in version 3.7 and higher.\n\n```\npip install bindpy\n```\n\n## Usage\n\n\n```python\nfrom bindpy import *\n```\n\n### `bind` function\n\nThe `show` function takes three arguments, `a1`, `a2` and `a3`, and returns a string composed of their values separated by spaces. The `show_10` function is a partially applied version of `show`, with `a2` bound to `_1`, `a1` bound to `_2` and `a3` bound to `10`.\n\nBind support placeholders : `_1`, `_2`, ... `_10`. The placeholders allow you to partially apply a function and leave certain arguments to be filled in later. This allows you to reuse the partially applied function and pass different values for the placeholder argument.\n\nOverall, `bind` and placeholders make it easier to create reusable and composable functions by allowing you to fix certain arguments and create new functions that take fewer arguments.\n\n```python\ndef show(a1, a2, a3):\n    return \" \".join(map(str, [a1, a2, a3]))\n    \nshow_10 = bind(show, _2, _1, a3=10)\n\nprint(show_10(20, 30)) # output: 30 20 10\n```\n\n***Convenient to use with functional style.***  \n\nIf you find lambda expressions unappealing, you can use bind for a more convenient and aesthetically pleasing experience with functional programming.\n\n```python\ndef add(a, b, c):\n  return a + b * c\n  \nnumbers = [1, 2, 3, 4]\nprint(list(map(bind(add, _1, 10, 2), numbers))) # output 21 22 23 24\n# same code with lambda\nprint(list(map(lambda x: add(x, 10, 2), numbers)))\n```\n\n```python\nimport os # used for example\n\nfiles = ['a.txt', 'b.json']\nmy_join = bind(os.path.join, '.', 'data')\nprint(list(map(my_join, files))) # output ['./data/a.txt', './data/b.json']\n```\n### `bind_front` function\n\n`bind_front` pre-specifies function arguments like `functools.partial`. It takes a function and values, returns new function with values bound to front. When called with remaining args, values passed to `bind_front` are automatically inserted in front.\n\n```python\ndef add(a, b, c=0):\n    return a + b + c\n\n\nadd_10 = bind_front(add, 10)\nresult = add_10(20, c=30)\nprint(result)  # 60\n\nadd_20_30 = bind_front(add, 20, 30)\nresult = add_20_30() # call add(20, 30)\nprint(result)  # 50\n```\n\n### `bind_back` function\n\n`bind_back` also pre-specifies function arguments but with values bound to end of arg list after all others. It takes a function and key-value pairs, returns new function with values bound to end. When called with remaining args, values passed to `bind_back` are automatically inserted at end.\n\n```python\nadd_30 = bind_back(add, c=30)\nresult = add_30(10, 20)\nprint(result)  # 60\n\nadd_40 = bind_back(add, 40)\nresult = add_40(10, 20) # call add(10, 20, 40)\nprint(result)  # 70\n\nadd_10 = bind_back(add, 10)\nresult = add_10(12)  # call add(10, 12), c=0 by  default\nprint(result)  # 22\n```\n\n### sequential binding\n\nYou can combine `bind_front` and `bind_back` to create a function that has arguments pre-specified at both the front and end of the argument list. \nFor example, the code:\n```python\ndef func(p1, p2, p3, p4, p5):\n    return \" \".join(map(str, [p1, p2, p3, p4, p5]))\n    \nb_func = bind_front(bind_back(func, 4, 5), 1, 2)\nprint(bfunc(3)) # 1 2 3 4 5\n```\n\ncan be replaced with:\n\n```python\nb_func_v2 = bind(1, 2, _1, 4, 5) # using placeholder *_1*\nprint(bfunc(3)) # 1 2 3 4 5\n```\n\n----\n\nWe hope this information helps you effectively use the bind functions in your project. If you have any questions or feedback, please reach out to us. Happy coding!\n\n----\n\n## Acknowledgements\n\nWe would like to express our sincere gratitude to all the individuals who have made this project a reality. Their contributions, guidance, and support have been invaluable. Thank you to everyone who has played a part in bringing this project to life.\n\n* [Daniil Dudkin](https://github.com/unterumarmung)\n* ChatGPT\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/avdosev/bindpy",
    "keywords": "bind,bindpy,bind_front,bind_back,partial,functools",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bindpy",
    "package_url": "https://pypi.org/project/bindpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/bindpy/",
    "project_urls": {
      "Homepage": "https://github.com/avdosev/bindpy",
      "Repository": "https://github.com/avdosev/bindpy"
    },
    "release_url": "https://pypi.org/project/bindpy/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "The bindpy package allows for partial application of arguments to a function, making it easy to create specialized versions of the function with some arguments pre-filled.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16717440,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9312e86505597f40227bacd4e706cd8e768150f5fdc8cf23a648b32e04ad353",
          "md5": "f118acd9c94ead7d2f4b3b4db5d3ae56",
          "sha256": "21bbe8f48d658df3dff3d63f25beb32735e92aa49dc6984c875aadb30e556121"
        },
        "downloads": -1,
        "filename": "bindpy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f118acd9c94ead7d2f4b3b4db5d3ae56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 5186,
        "upload_time": "2023-02-06T21:20:58",
        "upload_time_iso_8601": "2023-02-06T21:20:58.697561Z",
        "url": "https://files.pythonhosted.org/packages/e9/31/2e86505597f40227bacd4e706cd8e768150f5fdc8cf23a648b32e04ad353/bindpy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "147255c74e393d41b15f339e165d3c4ada3be893b29b3f0cee6fb7c86adc03fe",
          "md5": "bf427bef3f3ab476bf877cbe52f92851",
          "sha256": "55fb5d2cf100f9fd9fe86716a19711628ae423a909f5044b151ca70f90eab85e"
        },
        "downloads": -1,
        "filename": "bindpy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bf427bef3f3ab476bf877cbe52f92851",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 5218,
        "upload_time": "2023-02-06T21:21:00",
        "upload_time_iso_8601": "2023-02-06T21:21:00.490275Z",
        "url": "https://files.pythonhosted.org/packages/14/72/55c74e393d41b15f339e165d3c4ada3be893b29b3f0cee6fb7c86adc03fe/bindpy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38369e69c060474bcabdea3fd8c45cdcdfb632d369f5b8ec1f0297bb0d721ecf",
          "md5": "7b1deab42b0c8a774c273fb381e5ea30",
          "sha256": "bc40f7de5adc773f2de1bc59879cc7933575d38ddf60669ab113df8346fbd668"
        },
        "downloads": -1,
        "filename": "bindpy-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b1deab42b0c8a774c273fb381e5ea30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 5988,
        "upload_time": "2023-02-06T21:38:11",
        "upload_time_iso_8601": "2023-02-06T21:38:11.845507Z",
        "url": "https://files.pythonhosted.org/packages/38/36/9e69c060474bcabdea3fd8c45cdcdfb632d369f5b8ec1f0297bb0d721ecf/bindpy-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e36a7a85098402c39e4d9d490bdd766c8e07811fde620ecd50ca4abe0c3cc0a3",
          "md5": "b20539a5110f13df36f8d82c59ec9faa",
          "sha256": "0015f018f9e319192b4cd5a6da378662058798940dfd7bd31963e366a2ee4dcf"
        },
        "downloads": -1,
        "filename": "bindpy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b20539a5110f13df36f8d82c59ec9faa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 5341,
        "upload_time": "2023-02-06T21:38:14",
        "upload_time_iso_8601": "2023-02-06T21:38:14.108675Z",
        "url": "https://files.pythonhosted.org/packages/e3/6a/7a85098402c39e4d9d490bdd766c8e07811fde620ecd50ca4abe0c3cc0a3/bindpy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38369e69c060474bcabdea3fd8c45cdcdfb632d369f5b8ec1f0297bb0d721ecf",
        "md5": "7b1deab42b0c8a774c273fb381e5ea30",
        "sha256": "bc40f7de5adc773f2de1bc59879cc7933575d38ddf60669ab113df8346fbd668"
      },
      "downloads": -1,
      "filename": "bindpy-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7b1deab42b0c8a774c273fb381e5ea30",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 5988,
      "upload_time": "2023-02-06T21:38:11",
      "upload_time_iso_8601": "2023-02-06T21:38:11.845507Z",
      "url": "https://files.pythonhosted.org/packages/38/36/9e69c060474bcabdea3fd8c45cdcdfb632d369f5b8ec1f0297bb0d721ecf/bindpy-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e36a7a85098402c39e4d9d490bdd766c8e07811fde620ecd50ca4abe0c3cc0a3",
        "md5": "b20539a5110f13df36f8d82c59ec9faa",
        "sha256": "0015f018f9e319192b4cd5a6da378662058798940dfd7bd31963e366a2ee4dcf"
      },
      "downloads": -1,
      "filename": "bindpy-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b20539a5110f13df36f8d82c59ec9faa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 5341,
      "upload_time": "2023-02-06T21:38:14",
      "upload_time_iso_8601": "2023-02-06T21:38:14.108675Z",
      "url": "https://files.pythonhosted.org/packages/e3/6a/7a85098402c39e4d9d490bdd766c8e07811fde620ecd50ca4abe0c3cc0a3/bindpy-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}