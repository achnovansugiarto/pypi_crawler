{
  "info": {
    "author": "Johannes Bauer",
    "author_email": "joe@johannes-bauer.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# hsmwiz\nHSMWiz is a frontend for [OpenSC](https://github.com/OpenSC/OpenSC) to ease\nhandling of HSMs like the NitroKey HSM USB smart card. It was previously called\n\"nitrotool\" since it only targeted the NitroKey, but has since been renamed\nbecause it actually is not using anything specific to the NitroKey. \n\nBasically, it is just boilerplate that does nothing more than what is already\ndescribed in the [excellent OpenSC tutorial](https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM)\nfor the Smart Card HSM. However, there's some annoying issues with that --\nmultiple tools are needed (pkcs11-tool, pkcs15-tool, sc-hsm-tool, OpenSSL) and\noutput formats are sometimes not very user friendly (e.g., public keys are\nexported as binary DER blobs instead of PEM files). So I wrote this little\nfrontend to encapsulate common tasks a bit.\n\n## Hardware\nThe hardware I'm working with is the [NitroKey HSM](https://shop.nitrokey.com),\nwhich is a quite affordable smart-card based USB HSM. I'm in no way affiliated\nwith them whatsoever, just think they have a pretty cool product.\n\n## CA management and PKI\nOnce you've a good grip on keys that are working on your HSM, you might want to\nuse it to create a CA and issue certificates signed by that CA (which has its\nkey on a hardware token such as the NitroKey HSM). Lucky you, check out the\n[x509sak (X.509 Swiss Army Knife)](https://github.com/johndoe31415/x509sak),\nthe sibling project of hsmwiz, which has that exact capability.\n\n## Usage\nAll commands have comprehensive help pages. You can get a summary of available\ncommands by typing:\n\n```\n$ hsmwiz\nSyntax: hsmwiz [command] [options]\n\nAvailable commands:\n\nOptions vary from command to command. To receive further info, type\n    hsmwiz [command] --help\n    identify           Check if a HSM is connected and list all contents\n    verifypin          Try to login a HSM by entering a PIN or SO-PIN\n    checkengine        Check if the OpenSSL engine driver works\n    init               Initialize the smartcard for the first time, set default\n                       SO-PIN and PIN\n    format             Reinitialize the smartcard completely (removing all keys\n                       and certificates) and set SO-PIN and PIN back to their\n                       factory default\n    changepin          Change device PIN or SO-PIN\n    explore            Explore the smartcard structure interactively\n    unblock            Unblock the transponder's blocked PIN using the SO-PIN\n    keygen             Create a new private keypair on the smartcard\n    getkey             Fetch a public key from the smartcard\n    removekey          Remove a keypair from the smartcard\n    gencsr             Generate a certificate signing request from a HSM-\n                       contained private key\n    gencrt             Generate a self-signed certificate from a HSM-contained\n                       private key\n    putcrt             Put a certificate on the smartcard\n```\n\nThen, you can lookup individual help pages:\n\n```\n$ hsmwiz keygen --help\nusage: hsmwiz keygen [--id key_id] [--label key_label] [--pin pin]\n                          [--so-path path] [-v] [--help]\n                          keyspec\n\nCreate a new private keypair on the smartcard\n\npositional arguments:\n  keyspec            Key specification string to generate. Can be either\n                     'rsa:BITLENGTH' or 'EC:CURVENAME'. Examples are\n                     'rsa:1024', 'EC:brainpool256r1' or 'EC:prime256v1'.\n\noptional arguments:\n  --id key_id        Specifies the key ID to use for generating the new key.\n                     Must be an integer and defaults to 1.\n  --label key_label  Specifies the key label to use for generating the new\n                     key.\n  --pin pin          Specifies the PIN of the smartcard. If this argument is\n                     not given, the command will ask for it interactively.\n  --so-path path     Search path, separated by ':' characters, in which to\n                     look for shared objects like opensc-pkcs11.so. Defaults\n                     to /usr/local/lib:/usr/lib:/usr/lib/x86_64-linux-gnu\n  -v, --verbose      Increase verbosity. Can be specified multiple times.\n  --help             Show this help page.\n```\n\n## Example: General Stuff\nYou can first query a transponder:\n\n```\n$ hsmwiz identify\nUsing reader with a card: Nitrokey Nitrokey HSM (010000000000000000000000) 00 00\nVersion              : 2.6\nConfig options       :\n  User PIN reset with SO-PIN enabled\nSO-PIN tries left    : 15\nUser PIN tries left  : 3\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nDefault SO-PIN: 3537363231383830    Default PIN: 648219\npkcs15-tool --dump\nUsing reader with a card: Nitrokey Nitrokey HSM (010000000000000000000000) 00 00\nPKCS#15 Card [SmartCard-HSM]:\n\tVersion        : 0\n\tSerial number  : DENK#######\n\tManufacturer ID: www.CardContact.de\n\tFlags          :\nPIN [UserPIN]\n\tObject Flags   : [0x3], private, modifiable\n\tAuth ID        : 02\n\tID             : 01\n\tFlags          : [0x812], local, initialized, exchangeRefData\n\tLength         : min_len:6, max_len:15, stored_len:0\n\tPad char       : 0x00\n\tReference      : 129 (0x81)\n\tType           : ascii-numeric\n\tPath           : e82b0601040181c31f0201::\n\tTries left     : 3\n\nPIN [SOPIN]\n\tObject Flags   : [0x1], private\n\tID             : 02\n\tFlags          : [0x9A], local, unblock-disabled, initialized, soPin\n\tLength         : min_len:16, max_len:16, stored_len:0\n\tPad char       : 0x00\n\tReference      : 136 (0x88)\n\tType           : bcd\n\tPath           : e82b0601040181c31f0201::\n\tTries left     : 15\n```\n\nThen, you could use it to generate a new private key:\n\n```\n$ hsmwiz genkey EC:prime256v1 --label fookey\nUsing slot 0 with a present token (0x0)\nLogging in to \"UserPIN (SmartCard-HSM)\".\nPlease enter User PIN:\nKey pair generated:\nPrivate Key Object; EC\n  label:      fookey\n  ID:         01\n  Usage:      sign, derive\nPublic Key Object; EC  EC_POINT 256 bits\n  EC_POINT:   04410416d236f109229332666236b7af0d46d547cbb125151e1a6a657f2b2b8495b9207d40836ae3f276b55a8989385f46f16006677939b580b66636086dc3f095a4e2\n  EC_PARAMS:  06082a8648ce3d030107\n  label:      fookey\n  ID:         01\n  Usage:      verify, derive\n```\n\nCheck if that worked by identifying again:\n\n```\n$ hsmwiz id\n[...]\nPrivate EC Key [fookey]\n\tObject Flags   : [0x3], private, modifiable\n\tUsage          : [0x10C], sign, signRecover, derive\n\tAccess Flags   : [0x1D], sensitive, alwaysSensitive, neverExtract, local\n\tFieldLength    : 256\n\tKey ref        : 1 (0x1)\n\tNative         : yes\n\tAuth ID        : 01\n\tID             : 01\n\tMD:guid        : 7a767d92-49ec-5894-ddf2-ca7dc72ee476\n\nPublic EC Key [fookey]\n\tObject Flags   : [0x0]\n\tUsage          : [0x40], verify\n\tAccess Flags   : [0x2], extract\n\tFieldLength    : 256\n\tKey ref        : 0 (0x0)\n\tNative         : no\n\tID             : 01\n\tDirectValue    : <present>\n```\n\nGrab the public key:\n\n```\n$ hsmwiz getpubkey --label fookey\nUsing slot 0 with a present token (0x0)\nLogging in to \"UserPIN (SmartCard-HSM)\".\nPlease enter User PIN:\n# ECC key:\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEFtI28QkikzJmYja3rw1G1UfLsSUV\nHhpqZX8rK4SVuSB9QINq4/J2tVqJiThfRvFgBmd5ObWAtmY2CG3D8JWk4g==\n-----END PUBLIC KEY-----\n```\n\nOr create a CSR from a HSM key:\n\n```\n$ hsmwiz gencsr --pin 648219\nengine \"pkcs11\" set.\n-----BEGIN CERTIFICATE REQUEST-----\nMIHVMH0CAQAwGzEZMBcGA1UEAwwQTml0cm9LZXkgRXhhbXBsZTBZMBMGByqGSM49\nAgEGCCqGSM49AwEHA0IABBbSNvEJIpMyZmI2t68NRtVHy7ElFR4aamV/KyuElbkg\nfUCDauPydrVaiYk4X0bxYAZneTm1gLZmNghtw/CVpOKgADAKBggqhkjOPQQDAgNI\nADBFAiBybom3wRlgBDmNsm34rcOol62sgi0BHbz2PqJvwBshpgIhALdHw+PkEFeJ\npQD+3QcftVe9CZJu0uW25MEcg3S/yKOG\n-----END CERTIFICATE REQUEST-----\n```\n\n## Example: Setting up a NitroKey HSM for SSH authentication\nGenerate a key. For OpenSSH before v8.0, [this has to be an RSA\nkey](https://bugzilla.mindrot.org/show_bug.cgi?id=2474). You can create an\nECDSA/secp256r1 key by using:\n\n```\n$ hsmwiz genkey --id 2 --label my-ec-ssh-key --pin 648219 EC:prime256v1\nUsing slot 0 with a present token (0x0)\nKey pair generated:\nPrivate Key Object; EC\n  label:      sshkey\n  ID:         02\n  Usage:      sign, derive\nPublic Key Object; EC  EC_POINT 256 bits\n  EC_POINT:   044104ae19243bc5847e589392ffd6e4a463fd64826db96664b7d61a26c22eb523808bb4e8a31018be80f7aa1353c1f082a1a0c52ae4678129aad91f7908e62ad3081d\n  EC_PARAMS:  06082a8648ce3d030107\n  label:      sshkey\n  ID:         02\n  Usage:      verify, derive\n```\n\nAlternatively (e.g., if your OpenSSH version doesn't permit ECDSA/PKCS#11),\ncreate an RSA keypair inside the HSM:\n\n```\n$ hsmwiz genkey --id 1 --label my-ssh-key --pin 648219 rsa:2048\nUsing slot 0 with a present token (0x0)\nKey pair generated:\nPrivate Key Object; RSA\n  label:      my-ssh-key\n  ID:         01\n  Usage:      decrypt, sign, unwrap\nPublic Key Object; RSA 2048 bits\n  label:      my-ssh-key\n  ID:         01\n  Usage:      encrypt, verify, wrap\n```\n\nAfter you have created a key, you can easily extract the public key you just\ncreated from the NitroKey in SSH format. For the ECC case, this is done by:\n\n```\n$ hsmwiz getkey --id 2 --key-format ssh --pin 648219\nUsing slot 0 with a present token (0x0)\necdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK4ZJDvFhH5Yk5L/1uSkY/1kgm25ZmS31homwi61I4CLtOijEBi+gPeqE1PB8IKhoMUq5GeBKarZH3kI5irTCB0=\n```\n\nOr in the case of the RSA example:\n\n```\n$ hsmwiz getkey --id 1 --key-format ssh --pin 648219\nUsing slot 0 with a present token (0x0)\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCV6Fqr80gKq+wV+MA0dMltHTuwMwyVLBvLPdtVYdsw4S2YAjfTDnLATFHOhId/fFDMbSv9qH3YI/F8ryXM8MY53J1bd3Vd5iPbnG8/Azk0F5IUw9u/bhL6/39nFWJqSKww68pe4BFtCHMfPLchT9A6lMk0QOe8rU8VNkgcZsMfQ+iDzd5OmEC7JdlJSY7kCSPHkF/SoJLk5BuftV3kVCm2VAhkMgObbNnw3xHoiL0yv/JZyBly+ssDog72EkNvbYL9bvVMk2ZqYhLESPTwMnh7x1DyznlIC2R3XuqKkrQ5ztMblCAli5S7s1yYSKj4jCYzyIZf2nfPoCTTiqNs7Eyd\n```\n\nAdd the public key line to the `~/.ssh/authorized_keys` file on the user/host\nyou want to authenticate with (i.e., the one with the OpenSSH server).\n\nWhen you want to login to that server using the HSM, do:\n\n```\n$ ssh -o \"PKCS11Provider opensc-pkcs11.so\" joe@reliant\nEnter PIN for 'UserPIN (SmartCard-HSM)':\nWelcome to Ubuntu 17.10 (GNU/Linux 4.13.0 x86_64)\nLast login: Sat Apr  7 18:40:52 2018 from 127.0.0.1\nreliant joe [~]:\n```\n\nYou'll notice that you were asked to enter your NitroKey PIN. After entry, it\nallows SSH access!\n\n## Dependencies\nhsmwiz itself only depends on Python3, but assumes you've installed PC/SC,\nOpenSC and OpenSSL. It'll use those tools on the command line.\n\n## License\nGNU GPL-3.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/johndoe31415/hsmwiz/archive/0.0.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johndoe31415/hsmwiz",
    "keywords": "hsm,pcsc,smart,card,frontend,openssl",
    "license": "gpl-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hsmwiz",
    "package_url": "https://pypi.org/project/hsmwiz/",
    "platform": "",
    "project_url": "https://pypi.org/project/hsmwiz/",
    "project_urls": {
      "Download": "https://github.com/johndoe31415/hsmwiz/archive/0.0.2.tar.gz",
      "Homepage": "https://github.com/johndoe31415/hsmwiz"
    },
    "release_url": "https://pypi.org/project/hsmwiz/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Frontend for OpenSC, pkcs11tool and pkcs15tool to ease handling of HSM smartcards",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8720535,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cef85f82c7ae60d5bb0d520b1e9ce8be5a41429a15b3245d39d81c5ff10dc145",
          "md5": "b4b4c60790b2719ed29f2a1b9c8c5d79",
          "sha256": "ede2a43ae1efaca14cab1f10fa348cbef3fefdd9f71533e4b37de862665c56a7"
        },
        "downloads": -1,
        "filename": "hsmwiz-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b4b4c60790b2719ed29f2a1b9c8c5d79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19604,
        "upload_time": "2020-08-18T14:53:46",
        "upload_time_iso_8601": "2020-08-18T14:53:46.319798Z",
        "url": "https://files.pythonhosted.org/packages/ce/f8/5f82c7ae60d5bb0d520b1e9ce8be5a41429a15b3245d39d81c5ff10dc145/hsmwiz-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "823a3d266cc392e8b61029462ba11392d1fcd8e384109da6761532fc8119c3b1",
          "md5": "4c713e2124a6851b872395d9c3c6d3c6",
          "sha256": "2549368c2fa79d34b10daeb4cfb8d7518abcee27790b0213e04ee7c56520bbdb"
        },
        "downloads": -1,
        "filename": "hsmwiz-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4c713e2124a6851b872395d9c3c6d3c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20959,
        "upload_time": "2020-11-22T15:20:37",
        "upload_time_iso_8601": "2020-11-22T15:20:37.942007Z",
        "url": "https://files.pythonhosted.org/packages/82/3a/3d266cc392e8b61029462ba11392d1fcd8e384109da6761532fc8119c3b1/hsmwiz-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "823a3d266cc392e8b61029462ba11392d1fcd8e384109da6761532fc8119c3b1",
        "md5": "4c713e2124a6851b872395d9c3c6d3c6",
        "sha256": "2549368c2fa79d34b10daeb4cfb8d7518abcee27790b0213e04ee7c56520bbdb"
      },
      "downloads": -1,
      "filename": "hsmwiz-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4c713e2124a6851b872395d9c3c6d3c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20959,
      "upload_time": "2020-11-22T15:20:37",
      "upload_time_iso_8601": "2020-11-22T15:20:37.942007Z",
      "url": "https://files.pythonhosted.org/packages/82/3a/3d266cc392e8b61029462ba11392d1fcd8e384109da6761532fc8119c3b1/hsmwiz-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}