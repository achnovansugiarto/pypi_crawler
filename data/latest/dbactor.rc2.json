{
  "info": {
    "author": "Jack Schultz",
    "author_email": "jackschultz23@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# DBActor\n\nSimple class that interacts with Postgres to avoid ORM specifics.\n\n### Instillation\n\nDBActor supports multiple types of integrations. In many cases, you're looking to use it for a specific purpose. Sepcific extras installations allows for this.\n\nExamples of what the different extras allows you to do are below.\n\n```bash\n$ pip install dbactor\n$ pip install dbactor['jinjasql']\n$ pip install dbactor['sqlalchemy']\n$ pip install dbactor['pandas']\n$ pip install dbactor['all']\n```\n\n### Initialize\n\nPreference for DBActor location is in `db/__init__.py`.\n\n```python\nimport os\nfrom dbactor import DBActor\n\ndb_name = os.environ.get('DB_NAME', 'dbname')\ndb_user = os.environ.get('DB_USER', 'dbuser')\ndb_password = os.environ.get('DB_PASSWORD', 'dbpassword')\ndb_host = os.environ.get('DB_HOST', 'localhost')\ndb_port = os.environ.get('DB_PORT', '5432')\n\nactor = DBActor(database=db_name, user=db_user, password=db_password, host=db_host, port=db_port)\n\n# Or initialize with the url\ndb_url = f'postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}'\n\nactor = DBActor(url=db_url)\n```\n\nThen, to use in any file import with,\n\n```python\nfrom db import actor\n```\n\n## Examples\n\nIn examples below, the following table.\n\n**Product**\n\n`__tablename__ == products`\n\n| column_name | data_type |\n| ----------- | --------- |\n| id          | int4      |\n| name        | varchar   |\n| cost        | numeric\n\nStatements for initial creation without using DBActor.\n\n```sql\n-- products.sql\n-- Sequence and defined type\nCREATE SEQUENCE IF NOT EXISTS products_id_seq;\n\n-- Table Definition\nCREATE TABLE \"public\".\"products\" (\n    \"id\" int4 NOT NULL DEFAULT nextval('products_id_seq'::regclass),\n    \"name\" varchar,\n    \"cost\" numeric,\n    PRIMARY KEY (\"id\")\n);\n\nINSERT INTO \"public\".\"products\" (\"id\", \"name\", \"cost\") VALUES\n('1', 'mug', '4'),\n('2', 'fork', '1'),\n('3', 'spoon', '1'),\n('4', 'knife', '1'),\n('5', 'pan', '8');\n```\n\n## Actions\n\n```python\nfrom db import actor\n\nqstr = 'select count(*) from products'\nres = actor.call_one(qstr)\nprint(res)\n# RealDictRow([('count', 5)])\n\nqstr = 'select * from products;'\n\n# If wanting RealDict\nres = actor.call_all(qstr)\nprint(res)\n# [RealDictRow([('id', 1), ('name', 'mug'), ('cost', Decimal('4'))]), RealDictRow([('id', 2), ('name', 'fork'), ('cost', Decimal('1'))]), RealDictRow([('id', 3), ('name', 'spoon'), ('cost', Decimal('1'))]), RealDictRow([('id', 4), ('name', 'knife'), ('cost', Decimal('1'))]), RealDictRow([('id', 5), ('name', 'pan'), ('cost', Decimal('8'))])]\n\n# If wanting python dict rather than RealDict:\nres = actor.call_all_dict(qstr)\nprint(res)\n# [{'id': 1, 'name': 'mug', 'cost': Decimal('4')}, {'id': 2, 'name': 'fork', 'cost': Decimal('1')}, {'id': 3, 'name': 'spoon', 'cost': Decimal('1')}, {'id': 4, 'name': 'knife', 'cost': Decimal('1')}, {'id': 5, 'name': 'pan', 'cost': Decimal('8')}]\n```\n\n## JinjaSql\n\nIn cases where you may or may not have paramaters, JinjaSql is a great way to design queries, and DBActor allows for those in all cases.\n\n```python\nfrom dbactor import DBJinjaSqlActor\nfrom db import db_url\n\nactor = DBJinjaSqlActor(url=db_url)\n\nqstr = '''\n    SELECT\n        *\n    FROM\n        products\n    WHERE\n        1 = 1\n        {% if min_cost %}\n        AND asdf >= min_cost\n        {% endif %}\n        {% if max_cost %}\n        AND asdf <= max_cost\n        {% endif %}\n    ;\n'''\n\nqparams = dict(min_cost=3, max_cost=4)\nres = actor.call_all_dict(qstr, qparams=qparams)\nprint(res)\n# [{'id': 1, 'name': 'mug', 'cost': Decimal('4')}]\n```\n\n\n## SqlAlchemy\n\nDBActor is made to avoid using ORMs for the most part. However, when inserting or updating rows, ORMs prove to be simpler. with `DBSqlalchemyActor`, you can either create or update with sql strings alone, or also with SQLAlchemy models.\n\n\n```python\n# db/models.py\nfrom sqlalchemy import Column, Integer, Float, String\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(Integer)\n    price = Column(Float)\n```\n\nA perfect use case for this might be importing csvs.\n\nImagine a case where every day, someone creates a new csv with updated prices for the Things. In this case, there might be a daily job of looping through the csv and wanting to create or update an object for each row.\n\nproducts.csv\n```csv\nname,price\nmug, 10\ncup, 5\nplate, 3\nbowl, 6\n```\n\n```python\nimport csv\nfrom dbactor import DBSqlAlchemyActor\nfrom db import db_url\nfrom db.models import Product\n\nactor = DBSqlAlchemyActor(url=db_url)\n\nwith open('products.csv', 'r') as csvfile:\n    csvreader = csv.DictReader(csvfile)\n    for row in csvreader:\n        keys = dict(name=row['name'])\n        values = dict(price=row['price'])\n        actor.create_or_update_model(Product, keys=keys, values=values)\n        \nqstr = 'select * from products'\nres = actor.call_all_dict(qstr)\nprint(res)\n# [{'id': 2, 'name': 'fork', 'cost': Decimal('1')}, {'id': 3, 'name': 'spoon', 'cost': Decimal('1')}, {'id': 4, 'name': 'knife', 'cost': Decimal('1')}, {'id': 5, 'name': 'pan', 'cost': Decimal('8')}, {'id': 1, 'name': 'mug', 'cost': Decimal('10')}, {'id': 6, 'name': 'cup', 'cost': Decimal('5')}, {'id': 7, 'name': 'plate', 'cost': Decimal('3')}, {'id': 8, 'name': 'bowl', 'cost': Decimal('6')}]\n\nqstr = 'select count(*) from products'\nres = actor.call_one(qstr)\nprint(res)\n# RealDictRow([('count', 8)])\n```\n\n### Pandas\n\nWhen using `DBPandasActor`, you'll have the ability to `call_df` using the same connection. This is done with JinjaSQL templates.\n\n```python\nfrom dbactor import DBPandasActor\nfrom db import db_url\n\nactor = DBPandasActor(url=db_url)\n\nqstr = '''\nselect * from products where cost > {{min_cost}};\n'''\nqparams = dict(min_cost=4)\n\ndf = actor.call_df(qstr, qparams=qparams)\nprint(type(df))\n# <class 'pandas.core.frame.DataFrame'>\nprint(df)\n#    id   name  cost\n# 0   2   fork   1.0\n# 1   3  spoon   1.0\n# 2   4  knife   1.0\n# 3   5    pan   8.0\n# 4   1    mug  10.0\n# 5   6    cup   5.0\n# 6   7  plate   3.0\n# 7   8   bowl   6.0\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jackschultz/dbactor",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dbactor",
    "package_url": "https://pypi.org/project/dbactor/",
    "platform": "",
    "project_url": "https://pypi.org/project/dbactor/",
    "project_urls": {
      "Homepage": "http://github.com/jackschultz/dbactor"
    },
    "release_url": "https://pypi.org/project/dbactor/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "DBActor: ORM helper and alternative",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12031403,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0c71573e6904bb978638ac6ef42aecb0ef42b21dceccc40f65de8467c3d585c",
          "md5": "09c0524fca8bc83e7be73c19174f4744",
          "sha256": "6a9b7833b282414a89d9233a20527f4fcadcb3d5e0cf31e7c94b61c785de369d"
        },
        "downloads": -1,
        "filename": "dbactor-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "09c0524fca8bc83e7be73c19174f4744",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6869,
        "upload_time": "2021-10-26T13:19:03",
        "upload_time_iso_8601": "2021-10-26T13:19:03.584994Z",
        "url": "https://files.pythonhosted.org/packages/c0/c7/1573e6904bb978638ac6ef42aecb0ef42b21dceccc40f65de8467c3d585c/dbactor-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0aacf825e879a34281222742b74fc4061c467da993c18411da2f28623f91067",
          "md5": "1cc457e3eec7140f7009bd0034b42c61",
          "sha256": "744f6816291805e71a4dd036175f71026cb53cee105ae9986cd370916814d0dc"
        },
        "downloads": -1,
        "filename": "dbactor-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1cc457e3eec7140f7009bd0034b42c61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6985,
        "upload_time": "2021-11-15T22:25:19",
        "upload_time_iso_8601": "2021-11-15T22:25:19.094221Z",
        "url": "https://files.pythonhosted.org/packages/d0/aa/cf825e879a34281222742b74fc4061c467da993c18411da2f28623f91067/dbactor-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0aacf825e879a34281222742b74fc4061c467da993c18411da2f28623f91067",
        "md5": "1cc457e3eec7140f7009bd0034b42c61",
        "sha256": "744f6816291805e71a4dd036175f71026cb53cee105ae9986cd370916814d0dc"
      },
      "downloads": -1,
      "filename": "dbactor-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1cc457e3eec7140f7009bd0034b42c61",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6985,
      "upload_time": "2021-11-15T22:25:19",
      "upload_time_iso_8601": "2021-11-15T22:25:19.094221Z",
      "url": "https://files.pythonhosted.org/packages/d0/aa/cf825e879a34281222742b74fc4061c467da993c18411da2f28623f91067/dbactor-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}