{
  "info": {
    "author": "Megan Hofmann",
    "author_email": "m.hofmann@northeastern.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# knit_script\r\nKnit Script is a domain specific programming language for writing v-bed knitting machine instructions. The language is loosely based on conventions from Python 3 but includes support for controlling a knitting machine. The code is interpreted into knitout which can then be processed into instructions for different types of knitting machines.\r\n\r\n# Set Up\r\n## Install Development Version (from local source code)\r\n```\r\n$ git clone https://github.com/mhofmann-Khoury/knit_script.git\r\n$ pip install -e .   \r\n```\r\nThis will clone the [repository](https://github.com/mhofmann-Khoury/knit_script) to your machine and then install the system for active development to your python interpreter associated with pip. This will give you access to knit_script from anywhere on your machine as other standard python libraries.\r\n\r\nDistribution is updated with the following commands from within the repo directory:\r\n```\r\npython setup.py sdist\r\npython -m build\r\ntwine upload dist/*\r\n```\r\n\r\n## Install Stable Version from [PyPI](https://towardsdatascience.com/how-to-upload-your-python-package-to-pypi-de1b363a1b3)\r\n\r\n```\r\n$ pip install knit-script\r\n```\r\n\r\n## Add Your Own DAT Compiler\r\nThe Knitout to DAT compiler we use for controlling Shima Seiki machines is copyrighted and not provided with this distribution. You can install your own copy of the DAT compiler under the `dat_compiler` folder in your installation. Name the javascript entry point `knitout-to-dat.js` and have the main method accept two arguments for the knitout file name and the output dat file name. \r\n\r\n## Kniterate Compiler:\r\nWe have not tested these samples on a kniterate machine however the knitout to [kniterate compiler](https://github.com/textiles-lab/knitout-backend-kniterate/) is available and should work with our standardized knitout files. \r\n\r\n## Testing your installation\r\n\r\nYou can check that your installation using the installation_test.ks and installation_test.py files. Running the installation_test.py file should produce two files: `stst_10.k` and `stst_10.dat` ([if you have included a dat-compiler](#Add-Your-Own-Dat-Compiler)). Similarly, you can convert installation_test.ks into the same files using the entry points. \r\n\r\n### Using knit_script from command line (Unix)\r\n```\r\n$knit-script -k <name for knitout to generate> -d <name for dat file to generate, optional> <name of knit_script file>\r\n```\r\nFor example, convert installation_test.ks as follows:\r\n```\r\n$ knit-script -k stst_10.k -d stst_10.dat installation_test.ks\r\n```\r\n\r\nThe resulting dat file should look like:\r\n\r\n![A 10x10 square of stockinette in a dat format](/expected_installation_test_output.PNG)\r\n### Using knit_script from command line (windows)\r\nIndex into the knit_script directory to access knit_script.bat or add knit_script.bat to your system PATH\r\n```\r\n$knit_script.bat -k <name for knitout to generate> -d <name for dat file to generate, optional> <name of knit_script file>\r\n```\r\nFor example, convert installation_test.ks as follows:\r\n```\r\n$ knit_script.bat -k stst_10.k -d stst_10.dat installation_test.ks\r\n```\r\n\r\n## Using knit_script Interpreter from Python\r\nTo just generate a knitout file from knit_script, use the following\r\n\r\n```python\r\nfrom knit_script.interpret import knit_script_to_knitout\r\n\r\nknit_graph = knit_script_to_knitout('<pattern file>', '<knitout file name>')\r\n```\r\n\r\nTo also generate a data file use:\r\n\r\n```python\r\nfrom knit_script.interpret import knit_script_to_knitout_to_dat\r\n\r\nknit_graph = knit_script_to_knitout_to_dat('<pattern file>', '<knitout file name>', '<dat file name>')\r\n```\r\n\r\nAdditional examples of accessing the interpreter can be seen in the `test` package.\r\n\r\n# Knit Script DSL\r\nKnitscript is a scripting language designed to offer the computing convenience of standard languages (e.g., Python 3) with quality of life features specific to V-Bed Machine knitting. The language is built on a virtual machine model of a v-bed knitting machine similar to those assumed by knitout. Unlike knitout, knit script offers variables, control structures, functions, access to imported python libraries and much more. Knit Script interprets down to knitout operations that have been validated and should run without error on your machine. \r\n\r\n## Carriage Passes\r\n\r\nThe core knitting control structure of KnitScript is the control pass structure. A carriage pass is a set of consecutive needle operations (e.g., knit, tuck, miss, split, drop, xfer) that happen in one pass of the machine carriage. The direction that the carriage passes over the needles will determine the order that these operations occur. A carriage pass moving from left (needle 0) to right (max needle) (e.g., Rightward, Increasing, +, -->) will execute the operations on needles 0 to the max needle. A reverse carriage pass (e.g., Leftward, Decreasing, -, <--) will execute in the opposite order. Carriage passes are the unit of time we use to measure knitting programs and, as such, efficient use of carriage passes is essential to writing good knitting instructions. Knit script lets you disambiguate which needles you want to do an operation on from the direction you want to move in the carriage pass control structures. \r\n\r\nV-bed knitting allows for two types of carriage passes: those that involve yarn carriers and those that don't. Let's first look at those that require a yarn carrier. \r\n\r\nThe direction that a yarn moves must be specified by the programmer. Dragging a yarn from the left to the right will produce different knitted structures than pulling it from left to right. Most of the time we want to drag the yarn in the opposite direction that we last knit it in. \r\n\r\n### Directed Carriage Passes\r\nA directed carriage pass is described with a `direction` and list of `operations` applied to `needles` as follows:\r\n\r\n```KnitScript\r\nin <direction> direction:{\r\n    <operaton> <needles>;\r\n    ...\r\n    <operation> <needles>;\r\n}\r\n```\r\n\r\nFor example, we can knit the first even front needles up to `f10` in a Leftward direction:\r\n```KnitScript\r\nin Leftward direction:{\r\n    knit Front_Needles[0:10:2];\r\n}\r\n```\r\n\r\nIn the same carriage pass, we can knit every other back needle:\r\n```KnitScript\r\nin Leftward direction:{\r\n    knit Front_Needles[0:10:2];\r\n    knit Back_Needles[1:10:2];\r\n}\r\n```\r\nNote that this will knit one carriage pass with needles in the following order: `f0 b1 f2 b3...f8 b9`. This is because KnitScript ignores the order that needles are provide to an operation and instead sorts them into the order that they will be knit in the carriage pass direction (e.g., `Leftward` and increasing). If we change the direction of this pass to be `Rightward` it will knit in the following order `b9 f8 b7 f6...b1 f0`. This means that you don't have to keep track of the order needles are knit in. This is especially useful when rapidly switching between knitting directions.\r\n\r\nYou can mix operations that involve a yarn carrier into one carriage pass. Let's say you want to knit every even needle on the front and tuck the odd needles:\r\n\r\n```KnitScript\r\nin Rightward direction:{\r\n    knit Front_Needles[0:10:2];\r\n    tuck Front_Needles[1:10:2];\r\n}\r\n```\r\n\r\nAs a general rule, you want to reverse direction between carriage passes that involve a yarn carrier. Otherwise, the yarn will be dragged across the whole piece creating long floats. However, because knit script lets you write carriage passes in functions and jump around your code base you may not know where the carriage was last left. No fear, we have keywords for that. You can knit in the `current` or `reverse` direction. The `current` direction will repeat the last carriage pass direction run in with a yarn carrier. `reverse` will apply it in the reverse direction. So to knit our front needles back and forth over 10 rows we can write:\r\n\r\n```KnitScript\r\nfor r in range(0, 10):{\r\n    in reverse direction:{\r\n        knit Front_Needles[0:10];\r\n    }\r\n}\r\n```\r\n\r\nThe needles you pass to an operation can be any iterable of needles. If you provide integers they will be cast to front needles (e.g., `knit range(0,3)` -> `f0 f1 f2`). The needle list can come from a variable or as we have been showing from the following global sets of needles: `Front_Needles`, `Back_Needles`, `Needles`. The `Needles` keyword will sort the loops for all-needle knitting which may not be possible on all machines. \r\n\r\nBut what if you don't want to keep track of which needles are currently holding loops, the ones you want to knit on? We have keyword for that! `Loops` will give you the set of all needles that currently hold a loop. `Front_Loops` and `Back_Loops` will give you the set of all front/back needles that hold loops.\r\n\r\n### Un-Directed Carriage Passes\r\nXfer and drop operations don't involve a yarn and as a result the direction of the carriage pass will not affect your knitted object. Knitting machines tend to always do drops in a Rightward pass. Xfers seem to happen in whatever direction they feel like, depending on how your machine is configured. Because of this you will do these operations in a different control structure with optional parameters for the racking and target bed.\r\n\r\n```KnitScript\r\ndrop <needles>;\r\nxfer <needles> across;\r\nxfer <needles> across to <Front|Back> bed;\r\nxfer <needles> <n> to <Left|Right> to <Front|Back> bed;\r\n```\r\nHere are a few concrete examples:\r\nTransfer all loops on needles to the opposite bed:\r\n```KnitScript\r\nxfer Loops across;\r\n```\r\nTransfer all loops in set of needles to front bed. If a needle in the set is already on the front it won't transfer (its already on the front bed).\r\n```KnitScript\r\nxfer needles across to Front bed;\r\n```\r\n\r\nTransfer all front loops to the left by 2 needles.\r\n```KnitScript\r\nxfer Front_Loops 2 to Left;\r\n```\r\n\r\nA key feature of xfer and drop passes is that the direction the carriage passes will not affect the values of `current` or `reverse` for directed carriage passes. So we can do xfers without loosing track of back and forth knitting operations. Let's say we want to alternate knitting rows on the front and back (garter stitch for hand knitting). \r\n\r\n```KnitScript\r\nfor r in range(0, height):{\r\n    in reverse direction:{\r\n        knit Loops;\r\n    }\r\n    xfer Loops across;\r\n}\r\n```\r\n\r\nReverse switches back and forth between Leftward and Rightward with each pass even though we have the transfer pass. This might introduce some necessary no-operation carriage passes, knit script handles those for you. \r\n\r\n## Carriers and Yarn Management\r\nOf course, you can't knit with air and our examples so far say nothing about the yarn being knit with.\r\n\r\nKnitting machines control the yarn by pulling yarn-carriers across the needle bed in sync with the carriage pass. Each carrier has one yarn and multiple carriers can be used at the same time. In order to use a carrier it must be active or `inhooked` on the machine. In knitout, this is managed manually with the `inhook` and `in` commands. When a yarn is no longer needed, and likely getting in your way, you deactivate carriers with `outhook` and `out` commands. \r\n\r\n### The Yarn-Inserting-Hook\r\n\r\nThe main challenge of using carriers is managing the yarn-inserting-hook. When a yarn is first brought onto the machine it is loose and will slip out of the carrier. To prevent this, a yarn-inserting-hook grabs the tail of yarn and holds it in place while the yarn is knit. This hook hovers above needles on the bed and will block those needles from being used. The yarn-inserting-hook will be positioned just before the first needle that knits with the carrier. When you no longer need the hook to hold the yarn-tail because the yarn has knit enough loops you call `releasehook` in knitout. Choosing when to release the hook in knitout is a tension between multiple trade-offs. First, the longer you hold it, the longer you cannot use the needles below and after that hook. Second, as long as it is holding one yarn, you can't bring in a new yarn. Third, if you release it too early, the loops knit with that yarn are likely to come loose. One of the benefits of knitout is that you don't have to factor these considerations into your knitting program. Knit script does it for you.\r\n\r\n### Declaring Active Carriers in Knit Script\r\n\r\nKnit Script has a global variable named `Carrier`. Setting the value of `Carrier` to a yarn carrier will declare that all subsequent directed passes will use that carrier. The interpreter will also add an `inhook` operation when a new carrier is declared and a `in` operation if the carrier is already active. All of our prior examples were using `Carrier` by default. Run on their own, they will error because `Carrier` is not declared and no carriers will be activated in the knitout.\r\n\r\nYou can declare carrier the same way you declare any other variable. A simple variable declaration will work and will insert any needed `inhook` and `in` operations into your knitout before you use the carrier in a directed pass. \r\n\r\n```KnitScript\r\nCarrier = 1; // carrier will be set to first carrier on machine. Integer 1 casts to c1\r\nCarrier = c2; // positive integers prefixed with c declare a carrier\r\nCarrier = [c1, 2]; // lists of carriers are used for platted knitting with multiple carriers at once.\r\n// The order of carriers will be the order of yarns in the plate. Carriers and integers can be mixed\r\nCarrier += 1; // integer operations on carriers will act like integers\r\n```\r\n\r\nKnit Script is designed to treat carriers like output streams in other languages. If you bring  a carrier in, it must eventually go out, and when switching between different scopes you don't want to lose track of what carriers have already been activated. Like managing file-streams in Python, we recommend that you use with-statements to control which carrier is active. \r\n\r\nConsider the basic example where we want to knit stockinette with Carrier 1. Inside the with statement, the carrier will be c1 unless otherwise set. Outside the with statement, no carrier is available. \r\n\r\n```KnitScript\r\nimport cast_ons;\r\nwidth = 20;\r\nheight = 10;\r\n\r\ndef knit_stripe():{\r\n    for r in range(0, height):{\r\n        in reverse direction: { // Looks for carrier from outer scope. \r\n            knit Loops;\r\n        }\r\n    }\r\n}\r\n\r\nwith Carrier as c1:{\r\n    // All operations in this with statement will use carrier 1 unless another carrier is declared\r\n    cast_ons.alt_tuck_cast_on(width); // function call from standard knit script library\r\n    knit_stripe();\r\n}\r\n// Any knitting operations out here will cause an error since no carrier is active.\r\n```\r\n\r\nBut what if you want to use a different carrier inside some sub-scope, like a function call? Declaring the carrier value either with a variable declaration or a with statement will only set that value for the current scope. So when you leave a that scope, carrier will default back to the outer scopes value.\r\n\r\nLet's say you want to knit some stripes of stockinette with a different carrier, but otherwise knit with c1:\r\n```knit_script\r\nimport cast_ons;\r\nwidth = 20;\r\nheight = 10;\r\n\r\ndef knit_stripe():{\r\n    for r in range(0, height):{\r\n        in reverse direction: { // Looks for carrier from outer scope. \r\n            knit Loops;\r\n        }\r\n    }\r\n}\r\n\r\ndef knit_colored_stripe(new_carrier):{\r\n    with Carrier as new_carrier:{\r\n        knit_stripe();\r\n    }\r\n}\r\n\r\nwith Carrier as c1:{\r\n    cast_ons.alt_tuck_cast_on(width);\r\n    knit_stripe(); // uses c1\r\n    knit_colored_stripe(c2); // will use c2\r\n    knit_stripe(); // starts using c1 again\r\n}\r\n```\r\n\r\n### Cutting Yarns\r\nIn knitout, yarns are cut with an outhook operation that hooks the yarn on the yarn-inserting-hook, cuts it, then returns the tail of the yarn left on the carrier to the grippers. To use that carrier again, it will need to be inhooked again. Since cutting a yarn is destructive, you must explicitly cut the yarns.\r\n\r\nIn knitscript you cut a yarn with a cut statement which is the keyword `cut` followed by one or more carriers or a list of carriers. For example:\r\n```knit_script\r\ncut 1; // cuts carrier 1\r\ncut Carrier; // cuts the active carrier\r\ncut c1, c2, c3; // cuts each of the listed carriers\r\ncut [1, c2, 3], Carrier; // cuts carriers in the list and active carriers\r\n```\r\n\r\nNote that all the carriers in use at the end of a knitting program must be cut so that the object can be released from the machine. By default, knit_script will add outhook statements to the knitout for every yarn carrier that is still active at the very end of the program. \r\n\r\n## Gauge and Sheets\r\nSo for, we have given examples of using knit script to knit swatches of fabric. It is possible to make use of the two needle beds to create multiple sheets of fabric at once or creating objects out of layers of fabric. For example, we can knit a tube of fabric by reversing on the back bed using the following code:\r\n\r\n```knit_script\r\nwith Carrier as c1, width as 10:{\r\n    cast_ons.alt_tuck_cast_on(width, is_front=True);\r\n\tcast_ons.alt_tuck_cast_on(width, is_front=False);\r\n\r\n\tfor r in range(0, height):{\r\n\t\tin reverse direction:{\r\n\t\t\tknit Front_Loops;\r\n\t\t}\r\n\t\tin reverse direction:{\r\n\t\t\tknit Back_Loops;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nNote that this tube will knit stockinette on the front bed loop and reverse stockinette on the back bed loops. The final tube will have knits facing outwards and purls facing outwards. But what if we want to make a tube of knit-purl ribbing. The purls in the texture will take up space on the back bed. Instead, we will need to knit at half-gauge, knitting the front of the tube on even needles and the back of the tube on odd needles. This results in the cumbersome code below:\r\n\r\n```knit_script\r\nwith width as 12, height as 10, Carrier as 1:{\r\n\r\n    // Collect needles for the front and back of the tube split up by stitch type. Knits on front needles, purl on back needles\r\n    knit_front_tube = [n for n in Front_Needles[0:width:4]];\r\n    purl_front_tube_back_needles = [n for n in Back_Needles[2:width:4]];\r\n    purl_front_tube_front_needles = [n.opposite() for n in purl_front_tube_back_needles];//[n for n in Front_Needles[2:width:4]];\r\n\r\n    knit_back_tube_front_needles = [n for n in Front_Needles[1:width:4]];\r\n    knit_back_tube_back_needles = [n.opposite() for n in knit_back_tube_front_needles];\r\n    purl_back_tube = [n for n in Back_Needles[3:width:4]];\r\n\r\n    // cast on each side of the tube. Standard cast ons are not designed for half gauge so we have to do it manually\r\n    in Leftward direction:{\r\n        tuck purl_front_tube_front_needles;\r\n    }\r\n    in reverse direction:{\r\n        tuck knit_front_tube;\r\n    }\r\n    in reverse direction:{\r\n        tuck knit_back_tube_back_needles;\r\n    }\r\n    in reverse direction:{\r\n        tuck purl_back_tube;\r\n    }\r\n\r\n\r\n    for r in range(0, height):{\r\n        xfer purl_front_tube_front_needles across to back bed; // send front of tube cast ons to be back bed to be purled\r\n        // knit front of the tube\r\n        in reverse direction:{\r\n            knit knit_front_tube;\r\n            knit purl_front_tube_back_needles; // Note: knits and purls will merge to alternate based on bed order\r\n        }\r\n        xfer purl_front_tube_back_needles across to front bed; // move front tube purls out of way of back of tube knitting\r\n        xfer knit_back_tube_back_needles across to front bed; // return knits back bed to their position on front bed needles\r\n        // knit back of tube\r\n        in reverse direction:{\r\n            knit knit_back_tube_front_needles;\r\n            knit purl_back_tube;\r\n        }\r\n        xfer knit_back_tube_front_needles across to back bed; // move back of tube knits out of way of front of tube knitting\r\n    }\r\n}\r\n```\r\n\r\nWorking in half gauge requires us to manually keep track of a variety of details that knit script is designed to avoid. Because of this, knit script has support for gauging build directly into the language. \r\n\r\nWe introduce two concepts into the language: Gauge and Sheets. \r\n\r\nGauge is a spacing schema for the needles, allowing us to skip over needles. For instance, to knit at half gauge we set the `Gauge` to 2. This will cause us to skip every other needle. To knit at a third gauge we set `Gauge` to 3, and so on. Note that you do not generally want to work at large gauges (i.e., > 4) because this creates unseemly long floats. Knit Script won't stop you though, so try it out on your machine. Gauge defaults to 1 (full gauge) so that we knit on every needle.\r\n\r\nSo if we set the Gauge to 2 we will only b knitting on the even needles. Consider this simple KnitScript which knits the first four front needles at half gauge:\r\n\r\n```knit_script\r\nwith Gauge as 2, Carrier as 1:{\r\n    in Rightward direction:{\r\n        knit Front_Loops[0:4];\r\n    }\r\n}\r\n```\r\nThis will produce the following knitout:\r\n```knitout\r\nknit + f0 1;\r\nknit + f2 1;\r\nknit + f4 1;\r\nknit + f6 1;\r\n```\r\n\r\nSheets allow us to knit on different groups of gauged needles. By default, we knit on sheet 0, the set of needles starting at 0 on the right side. But if we want to knit on other sections we can set the working `Sheet` to any integer modifier. For example, we could knit the first four odd front needles using this code:\r\n\r\n```knit_script\r\nwith Gauge as 2, Sheet as 1, Carrier as 1:{\r\n    in Rightward direction:{\r\n        knit Front_Loops[0:4];\r\n    }\r\n}\r\n```\r\nThis will produce the following knitout:\r\n```knitout\r\nknit + f1 1;\r\nknit + f3 1;\r\nknit + f5 1;\r\nknit + f7 1;\r\n```\r\n\r\nYou can switch between different sheets by changing the `Sheet` variable. This will throw an error if the sheet you are using is not in the current `Gauge`. For example, we cannot knit on sheet 1 if we only have 1 Gauge (full gauge). \r\n\r\nChanging sheets will have hidden effects. To prevent sheets from crossing over each other we need the other sheets to be on the outside of the course being worked. Recall that the ribbed tube has xfer lines to move the back knits and front purls out of the way and then back into place. Changing between sheets in knit script will keep track of this for you. When working on a sheet you can always assume that the sheet is where you left it and that all other sheets are out of the way. \r\n\r\nWith Gauge and Sheets our ribbed tube is much simpler to program. We will knit the front of our tube on sheet 0 and the back of our tube on sheet 1 as follows:\r\n```knit_script\r\nimport cast_ons;\r\n\r\nwith Gauge as 2, Carrier as 1, width as 12, height as 20:{\r\n\t// cast on front and back of the tube\r\n\tfor s in range(0, Gauge):{\r\n\t\twith Sheet as s:{\r\n\t\t\tcast_ons.alt_tuck_cast_on(width);\r\n\t\t}\r\n\t}\r\n\tfor s in range(0, Gauge):{\r\n\t\twith Sheet as s:{\r\n\t\t    xfer Loops[1::2] across; // xfer every other loop to opposite bed for knit purl pattern\r\n\t\t}\r\n\t}\r\n\tfor r in range(0, height):{\r\n\t\tfor s in range(0, Gauge):{\r\n\t\t\twith Sheet as s:{\r\n\t\t\t\tin reverse direction:{\r\n\t\t\t\t\tknit Loops; // only the loops on the active sheet and keeps track of knit-purl pattern\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n### Machine vs Sheet Needles\r\nKnitScript uses the same notation as knitout to specify a needle (e.g., `f1`, `b2`). In this gauging schema using those values will assume you are indexing into the sheet, not the whole machine bed. So at `Gauge = 2`, when `Sheet == 0` `f1` will actually produce the needle `f2` on the machine bed. Set `Sheet==1` and `f1` will produce `f3` on the machine bed. But what if you want to access a needle on a different Sheet or you actually mean a specific needle on the machine bed?\r\n\r\nYou can access a needle from a specific sheet by accessing them with dot notation. Similar to needles, sheets can be specified as `s#` (e.g., `s2` is the sheet at index 2). So, regardless of the value of `Sheet`, we can access the front needle at index 1 of sheet 2 by writing `s2.f1`.\r\n\r\nYou can access a needle on the machine bed, regardless of the sheet and gauging schema with the keyword `machine`. So to get the real `f1` we write `machine.f1`. Side note: the keyword `machine` access the machine state of the interpreter directly, so if you can take full control of that state as though you are writing python code. \r\n\r\nIf you want to know the sheet of a given needle you can also get this from `machine` as follows: `machine.sheet_of(n)`\r\n\r\n### Layering Sheets\r\nIn the prior example there is an implicit layering of sheets used to form a tube. The first (front) layer of the tube is knit on sheet 0 and the second (back) layer of the tube is knit on sheet 1. But what if we don't want to keep this layering consistent across the whole set of needles on a sheet? For example, we could split our tube into two pieces with the first sheet in front of half the needles and in the back for the second half of needles. \r\n\r\nYou can explicitly set the layer of a given needle using `push` statements, the last knit script control structure we will go over.\r\n\r\nBy default, each needle will be on the same layer as the sheet it is on. For example, at `Gauge=2` the needles on sheet 0 (even needles) will be on layer 0 (the front layer) and the needles on sheet 1 (odd needles) will be on layer 1 (the back layer). \r\n\r\nWith a push statement we can change the layering for specific needles. For example, we can set a list of needles `first_needles` to be on the front layer (0) and the `second_needles' to be on the back layer (1) with the following statements:\r\n\r\n```knit_script\r\npush first_needles to layer 0;\r\npush second_needles to layer 1;\r\n```\r\n\r\nWe can also push needles to layers forward and backwards from their current position:\r\n```knit_script\r\npush first_needles 1 forward;\r\npush second_needles 1 backward;\r\n```\r\n\r\nFinally, we can push a layer all the way to the `front` or `back` of the pattern:\r\n```knits_script\r\npush first_needles to front;\r\npush second_needles to back;\r\n```\r\n\r\nNote that when we set a needle layer we effect the needles at the same position in all other sheets. So for example, if we have 2 sheets (i.e., `Gauge=2`) and we set the layer of f1 in sheet 0 to be 1 then we will also be setting the layer of f1 in sheet 1 to be 1. Two needles at equivalent positions in different sheets cannot have the same layer position because this will create xfer conflicts. Knit Script handles this for you. In practice, the difference between the current layer of your needle and the layer you are setting it to will be applied to all other needles in the same position in each sheet. Note that because all the sheets will cycle layers by the same amount it usually doesn't matter what the value of `Sheet` is when you are using push statements though you may want to set it specifically if you are \r\n\r\nLet's consider the following example where we are making our stockinette tube but switching the order of the layers half way across the tube. This will make two connect tubes, the first with stockinette facing out and the second with reverse stockinette facing out:\r\n\r\n```knit_script\r\nimport cast_ons;\r\nwith Gauge as 2, Carrier as 1, width as 10, height as 20:{\r\n    // cycle layers for first half of working needles\r\n    push Front_Needles[0:width/2] to back;\r\n    // cast on front and back of the tube\r\n\tfor s in range(0, Gauge):{\r\n\t\twith Sheet as s:{\r\n\t\t\tcast_ons.alt_tuck_cast_on(width, is_front=s%2==0);\r\n\t\t}\r\n\t}\r\n\tfor r in range(0, height):{\r\n\t    for s in range(0, Gauge):{\r\n\t        with Sheet as s:{\r\n\t            in reverse direction:{\r\n\t                knit Loops;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t}\r\n}\r\n```\r\n\r\nYou may not always want to cycle layer positions with a push. Your other option is to swap layer values between two needles at the same position in a sheet or with a specific layer. \r\n\r\nLet's say that you have 3 sheets (0, 1, 2) and 3 needles at the same position on those sheets: needle a on sheet 0, needle b on sheet 1, needle c on sheet 2. Their starting layers are the same as the sheet order (e.g., a on sheet 0 at layer 0). We can swap the layers of a and b in two ways:\r\n```knit_script\r\nswap a with sheet 1; // note that b is on sheet 1\r\nswap a with layer 1; // note that b is set to layer 1\r\n```\r\n\r\nIf you want to know what the layer of a specific needle is you can access that from the `machine` similar to checking the sheets of needles: `machine.layer_of(n)`.\r\n\r\n## Machine Headers\r\nBy default, knit script assumes you are converting to knitout to control a Shima Seiki SWG091N2 knitting machine that is 250 needles wide with 10 carriers. It will position your knitout instructions in the center of the bed and start. However, you can change all of these features for you whole program by starting your knit script program with a header in the same format as [knitout headers](https://textiles-lab.github.io/knitout/knitout.html).\r\n\r\n## Set Machine Type:\r\nWe currently support either Shima Seiki Whole garment machines or a Kniterate\r\n```knit_script\r\n;;Machine: <machine type being used>; // Options: SWG091N2 or Kniterate\r\n```\r\n\r\n## Knitting Position\r\nSet where to place the operations on the needle bed; Left, Center, Right, and Keep are standard values.\r\n\r\n```knit_script\r\n;;Position: <position>; //Defaults to Center\r\n```\r\n\r\n## Needle Bed Width:\r\nShima Seiki machines may have different needle bed widths. You can set this as:\r\n\r\n```knit_script\r\n;;Width: <Needle Count>; // Defaults to 250 but is machine dependent\r\n```\r\n\r\n## Set Maximum Racking\r\nKnit script will throw an error if your knitting operations force a racking beyond the maximum allowed. By default, we allow racking operations of |4.25| or less. You can change this value:\r\n\r\n```knit_script\r\n;;Rack: <maximum rack value>;\r\n```\r\n\r\n\r\n## Carrier Count\r\nYou can change the number of carriers on the machine. Note that this is likely dependent on the machine you are using and you do not need to set this manually.\r\n\r\n```knit_script\r\n;;Carriers: <Carrier Count>;\r\n```\r\n\r\n## Set Inserting Hook Size\r\nYou can set the expected size of the yarn-inserting hook (i.e., how many needles it blocks). This should be dependent on the machine and you likely do not need to set this. Setting this value to 0 will tell the interpreter that there is not yarn-inserting-hook and that other ways of inserting yarns must be used.\r\n\r\n```knit_script\r\n;;Hook: <hook size>;\r\n```\r\n\r\n\r\n# Packages\r\n\r\n## knit_graphs\r\nThe knit_graphs package holds the components of a Knit_Graph representation of a knitted structure. Knit Graphs are collections of loops connected on yarns and pulled through each other to form a node-link graph structure. Networkx graphs are used to represent yarns and knit graphs. This provides a variety of common graph algorithms for manipulating and searching in a knit graph. For more details on Loop based knit graphs reference [KnitPick](https://dl.acm.org/doi/abs/10.1145/3332165.3347886)\r\n\r\n## knitting_machine\r\nThe knitting_machine package holds components of the machine state for a v-bed knitting machine. Knitout operations can be performed on this virtual machine set which will either produce a knit graph representing the knitted object or result in machine knitting errors. For more details on the basic representations of a knitting machine reference [a compiler for Machine Knitting](https://dl.acm.org/doi/10.1145/2897824.2925940). For more details on knitout operations reference the [knitout specification](https://textiles-lab.github.io/knitout/knitout.html).\r\n\r\n## interpreter\r\nThe knit script interpreter which manages parsing and interpreting knit_script patterns. Parsing is managed through the [Parglare parsing toolkit](http://www.igordejanovic.net/parglare/0.16.0/).\r\n\r\n## tests\r\nTest classes for evaluating the interpreter and parsing knit_script samples. Calibration samples are used for calibrating allowable gauge on a machine. Paper samples demonstrate different basic techniques of sheet knitting. \r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mhofmann-Khoury/knit_script",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "knit-script",
    "package_url": "https://pypi.org/project/knit-script/",
    "platform": null,
    "project_url": "https://pypi.org/project/knit-script/",
    "project_urls": {
      "Homepage": "https://github.com/mhofmann-Khoury/knit_script"
    },
    "release_url": "https://pypi.org/project/knit-script/0.1.12/",
    "requires_dist": [
      "networkx (==3.0)",
      "parglare (==0.16.0)",
      "Naked (==0.1.32)"
    ],
    "requires_python": "",
    "summary": "Knit Script is a domain specific programming language for writing v-bed knitting machine instructions. The language is loosely based on conventions from Python 3 but includes support for controlling a knitting machine. The code is interpreted into knitout which can then be processed into instructions for different types of knitting machines.",
    "version": "0.1.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17196118,
  "releases": {
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a473ea8833cc762ff3be70a17d7eadc88698536259d9b3958db610d7b5a4fe3",
          "md5": "f3df8be5d8681a7ed569b6d3600dac5b",
          "sha256": "1f9e81a2e3b58a30d6d17ab6e210967d8e8f6285fd2bf8841bbd9b2075d7638b"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3df8be5d8681a7ed569b6d3600dac5b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 180516,
        "upload_time": "2023-02-23T20:02:09",
        "upload_time_iso_8601": "2023-02-23T20:02:09.778434Z",
        "url": "https://files.pythonhosted.org/packages/8a/47/3ea8833cc762ff3be70a17d7eadc88698536259d9b3958db610d7b5a4fe3/knit_script-0.1.10-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd0eca228aa578330d9421c9db1ccb5033d42fbe4b66460c460fd5416cdd35b1",
          "md5": "7bc893c7918b1455e10bdb368ab7001c",
          "sha256": "6747e122eee8b42a376aa1e186077d8560c0cce6f7eb48596c278346ea464f01"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "7bc893c7918b1455e10bdb368ab7001c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 164270,
        "upload_time": "2023-02-23T20:02:11",
        "upload_time_iso_8601": "2023-02-23T20:02:11.611256Z",
        "url": "https://files.pythonhosted.org/packages/cd/0e/ca228aa578330d9421c9db1ccb5033d42fbe4b66460c460fd5416cdd35b1/knit_script-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7061cd102070b5bfa7377a5780008650d412b6a0a94f1775d9cd5b3fdb4826e0",
          "md5": "262e776c4f9b7f57e27c9b84caf77dbd",
          "sha256": "004e13bfd5b0e05cc606408857cdf9d375495c32837211ee5496bb3645ec0d3b"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "262e776c4f9b7f57e27c9b84caf77dbd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 182176,
        "upload_time": "2023-03-02T16:47:11",
        "upload_time_iso_8601": "2023-03-02T16:47:11.270242Z",
        "url": "https://files.pythonhosted.org/packages/70/61/cd102070b5bfa7377a5780008650d412b6a0a94f1775d9cd5b3fdb4826e0/knit_script-0.1.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02e9ce582543672773a45a509f47b2827835364ef930e0495323a506d5ef78ec",
          "md5": "d1a68580ca6dc6ce8a27e9e8bac24640",
          "sha256": "be8a903bd6d35bb86f8b7c4d8a530e2ebd359cdfefe9c3c9e2a883e52e74618d"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "d1a68580ca6dc6ce8a27e9e8bac24640",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 169118,
        "upload_time": "2023-03-02T16:47:13",
        "upload_time_iso_8601": "2023-03-02T16:47:13.661116Z",
        "url": "https://files.pythonhosted.org/packages/02/e9/ce582543672773a45a509f47b2827835364ef930e0495323a506d5ef78ec/knit_script-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee8480113e953e7198cc37d97e448a3e7fe8f0c52e68119d92c3f04d0926255e",
          "md5": "fd98b53a671fe4e4c18c677c92f97764",
          "sha256": "9a27d2f18d0ceaa6df8e4ff3fb4e044e1363d568bf432b1bd4d6fab9e7962c2f"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd98b53a671fe4e4c18c677c92f97764",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 182691,
        "upload_time": "2023-03-07T20:51:26",
        "upload_time_iso_8601": "2023-03-07T20:51:26.234125Z",
        "url": "https://files.pythonhosted.org/packages/ee/84/80113e953e7198cc37d97e448a3e7fe8f0c52e68119d92c3f04d0926255e/knit_script-0.1.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cf4b0351182ecabb59112bbcae2d819c6c15644d7984e7457f253bef8164d0f",
          "md5": "3d0077aa0b694a6c1e3c4184d148419e",
          "sha256": "fcaff25630e5b922e5549b9080adfe6a192f804a5fe96604119887838b5f76f8"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "3d0077aa0b694a6c1e3c4184d148419e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 169894,
        "upload_time": "2023-03-07T20:51:28",
        "upload_time_iso_8601": "2023-03-07T20:51:28.625347Z",
        "url": "https://files.pythonhosted.org/packages/8c/f4/b0351182ecabb59112bbcae2d819c6c15644d7984e7457f253bef8164d0f/knit_script-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e885c842737dd69cf29343d5f9521152cebcf7102afdffea1d786125c333a4c",
          "md5": "20cf21c99df5d3c17d68e48a14f4dba1",
          "sha256": "e1c50008dc09be506f912cdd1e97b41d36b679e68253fcd63ca4d40cdd8c0af2"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20cf21c99df5d3c17d68e48a14f4dba1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 161651,
        "upload_time": "2023-01-17T16:26:08",
        "upload_time_iso_8601": "2023-01-17T16:26:08.445945Z",
        "url": "https://files.pythonhosted.org/packages/2e/88/5c842737dd69cf29343d5f9521152cebcf7102afdffea1d786125c333a4c/knit_script-0.1.3-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Compiler Access Error"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04ddc6d13c8cb26a512a1ffefe9de2e7d22e9885166393b37a68f5cc23fba775",
          "md5": "00168b8074559af6fddd689fd09b05bf",
          "sha256": "b1e47a64f32401e125bc0c251d7acdf1e16f44404901d8ab242b33ebf254a905"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "00168b8074559af6fddd689fd09b05bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 145746,
        "upload_time": "2023-01-17T16:26:10",
        "upload_time_iso_8601": "2023-01-17T16:26:10.953715Z",
        "url": "https://files.pythonhosted.org/packages/04/dd/c6d13c8cb26a512a1ffefe9de2e7d22e9885166393b37a68f5cc23fba775/knit_script-0.1.3.tar.gz",
        "yanked": true,
        "yanked_reason": "Compiler Access Error"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55a3d765c5a221d37f18d0919f3be3ff27e55cf6f982769a90feb0f87ba07dbc",
          "md5": "cd87c09363c5841286fdd6f6a21ca9fe",
          "sha256": "b59a63d49aa2368d172e27a64e463583417afc4541c08dd2b8b2f3b1506a7fa9"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd87c09363c5841286fdd6f6a21ca9fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 178479,
        "upload_time": "2023-01-17T16:34:24",
        "upload_time_iso_8601": "2023-01-17T16:34:24.022818Z",
        "url": "https://files.pythonhosted.org/packages/55/a3/d765c5a221d37f18d0919f3be3ff27e55cf6f982769a90feb0f87ba07dbc/knit_script-0.1.4-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Compiler access error"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35f205cd522099d81e9de36a63e98bd0c69d6f5cfc4da3294e61b4beea2f8e4c",
          "md5": "bccd7e241c9b9c9c3de64b0e902c96df",
          "sha256": "419642247e7add6fd0e7ff3373d13d06f7b0272192ece73dcfbb7daac9e951cf"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bccd7e241c9b9c9c3de64b0e902c96df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 145764,
        "upload_time": "2023-01-17T16:34:26",
        "upload_time_iso_8601": "2023-01-17T16:34:26.102410Z",
        "url": "https://files.pythonhosted.org/packages/35/f2/05cd522099d81e9de36a63e98bd0c69d6f5cfc4da3294e61b4beea2f8e4c/knit_script-0.1.4.tar.gz",
        "yanked": true,
        "yanked_reason": "Compiler access error"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "441da0e86aa667902df2c85676bd160f8a4989b11e7db3dff4239f5dd9b23abb",
          "md5": "bb5c4488e595efe83f0d01d00a56d7d9",
          "sha256": "a63230417a5fcf72c0841714f142caa475fd1494e5631fa062e35eaaabd0aac2"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb5c4488e595efe83f0d01d00a56d7d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 161832,
        "upload_time": "2023-01-17T16:53:02",
        "upload_time_iso_8601": "2023-01-17T16:53:02.534162Z",
        "url": "https://files.pythonhosted.org/packages/44/1d/a0e86aa667902df2c85676bd160f8a4989b11e7db3dff4239f5dd9b23abb/knit_script-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4428e134f947af0ac94d29c243556dca069508c15ced49e498152b0aaca96a3",
          "md5": "583d16aa618dff228b8368be64b111c0",
          "sha256": "8c843dc55202e07825801eaaeb95ded3a5f2167b7bd7fca178b73c6d2e12c701"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "583d16aa618dff228b8368be64b111c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 145806,
        "upload_time": "2023-01-17T16:53:05",
        "upload_time_iso_8601": "2023-01-17T16:53:05.567743Z",
        "url": "https://files.pythonhosted.org/packages/d4/42/8e134f947af0ac94d29c243556dca069508c15ced49e498152b0aaca96a3/knit_script-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58535609bf43ee01d078e2337197aa128d1534566135529d3477e2bdcdaaf31d",
          "md5": "3a5aaf13db66b612cd49b55d0d81dd7f",
          "sha256": "e810ebc79e583016517db4f0f5c685aec585dd1ae126a234a13d328fcce0517c"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a5aaf13db66b612cd49b55d0d81dd7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 179874,
        "upload_time": "2023-01-24T21:46:16",
        "upload_time_iso_8601": "2023-01-24T21:46:16.259395Z",
        "url": "https://files.pythonhosted.org/packages/58/53/5609bf43ee01d078e2337197aa128d1534566135529d3477e2bdcdaaf31d/knit_script-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "617577c49270103b64752ad612f4d3c0d8a217f28b78c1f5cd9f4190b10991f0",
          "md5": "820874c4a15ab51169f457fab2c60fe1",
          "sha256": "c1a932f94be002ce177acca6d9f85e61b68323051187089241e18d43827d37dc"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "820874c4a15ab51169f457fab2c60fe1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 163463,
        "upload_time": "2023-01-24T21:46:18",
        "upload_time_iso_8601": "2023-01-24T21:46:18.344389Z",
        "url": "https://files.pythonhosted.org/packages/61/75/77c49270103b64752ad612f4d3c0d8a217f28b78c1f5cd9f4190b10991f0/knit_script-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "481d84357c83290fac0890420b222b364e9e9a8690a7b330cba55e9f7df87ba1",
          "md5": "2d3a23371c9f13c13c87f03e567dfa43",
          "sha256": "de56451c820c62afbb55ed2a75e05d38498fbfd5d22f9b3e080fbc994da6030f"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d3a23371c9f13c13c87f03e567dfa43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 180492,
        "upload_time": "2023-02-07T16:38:51",
        "upload_time_iso_8601": "2023-02-07T16:38:51.261236Z",
        "url": "https://files.pythonhosted.org/packages/48/1d/84357c83290fac0890420b222b364e9e9a8690a7b330cba55e9f7df87ba1/knit_script-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9ec274fa1efbf882b545bdb6b4b27029e7ecf858d107b01ce05c627a3b39880",
          "md5": "96b17e249c82beda0fd5ae88782db737",
          "sha256": "8e0aef4a8562e1ebc8d9140acc4ae78ca040fb657a8cd1674028095db08f60f6"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "96b17e249c82beda0fd5ae88782db737",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 164262,
        "upload_time": "2023-02-07T16:38:53",
        "upload_time_iso_8601": "2023-02-07T16:38:53.003606Z",
        "url": "https://files.pythonhosted.org/packages/e9/ec/274fa1efbf882b545bdb6b4b27029e7ecf858d107b01ce05c627a3b39880/knit_script-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66ca164c8dfcfef996436dc45af821f46471efaee0b32cd54f7d86dd2bb88b4a",
          "md5": "249f91ffb1b8402f7311a3b9f1f0da51",
          "sha256": "06b4ad3ff80a25a6fd53c157fa0be89e6d9daf150c435b771688cad11ff81c68"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "249f91ffb1b8402f7311a3b9f1f0da51",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 180502,
        "upload_time": "2023-02-23T19:58:55",
        "upload_time_iso_8601": "2023-02-23T19:58:55.724036Z",
        "url": "https://files.pythonhosted.org/packages/66/ca/164c8dfcfef996436dc45af821f46471efaee0b32cd54f7d86dd2bb88b4a/knit_script-0.1.9-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "File not added"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c66ae23ad7922f842415e2eb4e8004dc0fced6616d32a6f5679b239d950199c",
          "md5": "76b931d01f0637c0f4c2d23e93043fc7",
          "sha256": "dca0db2af34d8e23f70771699fd2b078af62de9e0703ab982e064323aea6c3bf"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76b931d01f0637c0f4c2d23e93043fc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 180497,
        "upload_time": "2023-02-23T19:48:10",
        "upload_time_iso_8601": "2023-02-23T19:48:10.662414Z",
        "url": "https://files.pythonhosted.org/packages/3c/66/ae23ad7922f842415e2eb4e8004dc0fced6616d32a6f5679b239d950199c/knit_script-0.1.9-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "File not added"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b1ecf259d669c29104ade9c8218eb5192b2bb9b9914aadeed3ed653273f1ab6",
          "md5": "0faf8ed82f0fa0c644bc358be5ebc33b",
          "sha256": "d57b95773adec8a6d94c6ccb051387ee48bb7445f48655c2b686e31dfa0af27c"
        },
        "downloads": -1,
        "filename": "knit_script-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "0faf8ed82f0fa0c644bc358be5ebc33b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 168220,
        "upload_time": "2023-02-23T19:48:13",
        "upload_time_iso_8601": "2023-02-23T19:48:13.173081Z",
        "url": "https://files.pythonhosted.org/packages/0b/1e/cf259d669c29104ade9c8218eb5192b2bb9b9914aadeed3ed653273f1ab6/knit_script-0.1.9.tar.gz",
        "yanked": true,
        "yanked_reason": "File not added"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee8480113e953e7198cc37d97e448a3e7fe8f0c52e68119d92c3f04d0926255e",
        "md5": "fd98b53a671fe4e4c18c677c92f97764",
        "sha256": "9a27d2f18d0ceaa6df8e4ff3fb4e044e1363d568bf432b1bd4d6fab9e7962c2f"
      },
      "downloads": -1,
      "filename": "knit_script-0.1.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fd98b53a671fe4e4c18c677c92f97764",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 182691,
      "upload_time": "2023-03-07T20:51:26",
      "upload_time_iso_8601": "2023-03-07T20:51:26.234125Z",
      "url": "https://files.pythonhosted.org/packages/ee/84/80113e953e7198cc37d97e448a3e7fe8f0c52e68119d92c3f04d0926255e/knit_script-0.1.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8cf4b0351182ecabb59112bbcae2d819c6c15644d7984e7457f253bef8164d0f",
        "md5": "3d0077aa0b694a6c1e3c4184d148419e",
        "sha256": "fcaff25630e5b922e5549b9080adfe6a192f804a5fe96604119887838b5f76f8"
      },
      "downloads": -1,
      "filename": "knit_script-0.1.12.tar.gz",
      "has_sig": false,
      "md5_digest": "3d0077aa0b694a6c1e3c4184d148419e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 169894,
      "upload_time": "2023-03-07T20:51:28",
      "upload_time_iso_8601": "2023-03-07T20:51:28.625347Z",
      "url": "https://files.pythonhosted.org/packages/8c/f4/b0351182ecabb59112bbcae2d819c6c15644d7984e7457f253bef8164d0f/knit_script-0.1.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}