{
  "info": {
    "author": "Cirill Usachov (Kyrylo Usachov)",
    "author_email": "mave7dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pylocale\nA Python 3 library that allows adding static files with translations to the application, and then apply them to dynamically change text in the application.\n\nInstalling\n----------\n\n**Python 3.6.9 or higher is recommended**\n\nTo install the library, you can just run the following command:\n\n```shell script\n# Linux/macOS\npython3 -m pip install pylocale\n\n# Windows\npip install pylocale\n```\n\nTranslation files\n--------------\nYou must provide a folder in your project directory where your translation files will be located.\n```\nyour-app-root\n|--translations\n   |----en-us\n   |----de-de\n   |----zh-cn\n   ...\n...\n```\nThe struture can be any, but the translation files must be accessible from the program.\nTranslation files must be text files of .env-like format ```<KEY> = <TRANSLATION>``` **(spaces are required or you will get a parsing error)**:\n\n```\n# en-us file example\nHELP = Get help\nSETTINGS = Settings\nEXIT = Exit\n```\n```\n# de-de file example\nHELP = Hilfe bekommen\nSETTINGS = Einstellungen\nEXIT = Ausfahrt\n```\nIt's recommended for the translation files to have the same keys, but it's not necessary.\n\nUsage\n--------------\nYou can use pylocal as follows:\n```python\nfrom pylocal import PyLocal\n\ntranslator = PyLocal(\n    at='translations/',  # Your translations directory path.\n    root='en',  # Default locale.\n    silent=True  # Tell PyLocal not to raise exceptions in case of errors.\n)\n```\nTo get translation:\n```python\ntranslator['HELP']  # >>> Help\n```\nTo switch to another locale:\n```python\ntranslator.switch('de-de')\ntranslator['HELP']  # >>> Hilfe bekommen\n```\nAny translation you switch to covers the root translation file. That means If there was no help key, it would be taken from the root translation file:\n```\n# en-us file example\nHELP = Get help\nSETTINGS = Settings\nEXIT = Exit\nCOLOR = Color\n```\n```\n# en-gb file example\nCOLOR = Colour\n```\n```python\ntranslator = PyLocale(at='transaltions/', root='en-us')\ntanslator['COLOR']  # >>> Color\ntranslator.switch('en-gb')\ntanslator['COLOR']  # >>> Colour\n# SETTINGS is not defined in en-gb. It will be taken from en-us, which is the root translation file.\ntanslator['SETTINGS']  # >>> Settings\n```\n\nRaising exceptions\n--------------\nIf the silent mode is turned off (default) your app will break down with exceptions in case of errors. If you want the translator to try to return something, you may pass a True to silent parameter as shown above. In that case, the translator will return an empty string.\n```python\ntranslator = PyLocale(\n    at='transaltions/',\n    root='blablabla',\n    silent=True\n)\ntanslator['SETTINGS']  # >>> ''\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mavedev/pylocale",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pylocale",
    "package_url": "https://pypi.org/project/pylocale/",
    "platform": "",
    "project_url": "https://pypi.org/project/pylocale/",
    "project_urls": {
      "Homepage": "https://github.com/mavedev/pylocale"
    },
    "release_url": "https://pypi.org/project/pylocale/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Python3 library without dependencies that provides static translations across your app",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7258114,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a497e8f13729fadfaa3cefbf32d7d19f7f941bb9d36f1f115eb052a6d3be8d99",
          "md5": "170ca4fef7277eae62610d709cfcaf3a",
          "sha256": "c18d913bdfaf0c4d33ca91f009c7aaeda66c6a5ca7e570ea797e0fbb55221405"
        },
        "downloads": -1,
        "filename": "pylocale-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "170ca4fef7277eae62610d709cfcaf3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3691,
        "upload_time": "2020-05-16T22:05:54",
        "upload_time_iso_8601": "2020-05-16T22:05:54.097389Z",
        "url": "https://files.pythonhosted.org/packages/a4/97/e8f13729fadfaa3cefbf32d7d19f7f941bb9d36f1f115eb052a6d3be8d99/pylocale-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a497e8f13729fadfaa3cefbf32d7d19f7f941bb9d36f1f115eb052a6d3be8d99",
        "md5": "170ca4fef7277eae62610d709cfcaf3a",
        "sha256": "c18d913bdfaf0c4d33ca91f009c7aaeda66c6a5ca7e570ea797e0fbb55221405"
      },
      "downloads": -1,
      "filename": "pylocale-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "170ca4fef7277eae62610d709cfcaf3a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3691,
      "upload_time": "2020-05-16T22:05:54",
      "upload_time_iso_8601": "2020-05-16T22:05:54.097389Z",
      "url": "https://files.pythonhosted.org/packages/a4/97/e8f13729fadfaa3cefbf32d7d19f7f941bb9d36f1f115eb052a6d3be8d99/pylocale-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}