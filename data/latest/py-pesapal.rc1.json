{
  "info": {
    "author": "M69k65y",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3"
    ],
    "description": "# py-pesapal\n\n## About\npy-pesapal is a package that helps Python developers easily integrate their applications with PesaPal.\n\n\n## Installation\n    pip install py-pesapal\n\n\n## Basic Usage\nThere are two ways to use the package, one specifically geared towards Flask applications.\n\n### General Usage\n```python\nimport uuid\nfrom py_pesapal import Pesapal\n\npesapal = Pesapal(\n    consumer_key = \"12345\",\n    consumer_secret = \"12345\"\n)\n\ntransaction_data = {}\nline_items = []\ntransaction_total = []\n\nx = 1\nwhile(x <= 5):\n    items_dict = {}\n    items_dict[\"item_id\"] = x\n    items_dict[\"item_name\"] = \"Product {}\".format(x)\n    items_dict[\"item_count\"] = 1\n    items_dict[\"unit_cost\"] = 10 * x\n    items_dict[\"subtotal\"] = 1 * 10 * x\n    transaction_total.append(1 * 10 * x)\n\n    line_items.append(items_dict)\n    x += 1\n\ntransaction_data[\"line_items\"] = line_items\ntransaction_data[\"amount\"] = sum(transaction_total)\ntransaction_data[\"description\"] = \"Test transaction\"\ntransaction_data[\"reference\"] = str(uuid.uuid4())\ntransaction_data[\"email\"] = \"mail@example.com\"\ntransaction_data[\"currency\"] = \"KES\"\n\n# POST A DIRECT ORDER\ncallback_url = \"https://example.com/callback-url\"\n\n# Build URL to post a direct order\npost_order = pesapal.post_order(callback_url = callback_url, transaction_data = transaction_data)\n\n\n# QUERY PAYMENT STATUS\nmerchant_ref = \"your-unique-transaction-identifier\"\npesapal_tracking_id = \"pesapal-provided-id\"\n\n# Build URL to query payment status\npayment_status = pesapal.query_payment_status(merchant_ref = merchant_ref, pesapal_tracking_id = pesapal_tracking_id)\n\n\n# QUERY PAYMENT STATUS BY MERCHANT REF\nmerchant_ref = \"your-unique-transaction-identifier\"\n\n# Build URL to query payment status\npayment_status = pesapal.query_payment_status_by_merchant_ref(merchant_ref = merchant_ref)\n\n\n# QUERY PAYMENT DETAILS\nmerchant_ref = \"your-unique-transaction-identifier\"\npesapal_tracking_id = \"pesapal-provided-id\"\n\n# Build URL to query payment details\npayment_details = pesapal.query_payment_details(merchant_ref = merchant_ref, pesapal_tracking_id = pesapal_tracking_id)\n```\n\n### Usage in Flask\nThe basic usage of the package follows the same pattern as highlighted above with the main difference coming in creating a new instance of PesapalFlask.\n\n```python\nfrom flask import Flask\nfrom py_pesapal import PesapalFlask\n\napp = Flask(__name__)\n\npesapal = PesapalFlask(app, config = {\n\t\"PESAPAL_CONSUMER_KEY\": \"12345\",\n\t\"PESAPAL_CONSUMER_SECRET\": \"12345\",\n\t\"PESAPAL_CALLBACK_URL\": \"https://example.com/callback-url\"\n})\n```\n\n\n## Advanced Usage (Flask)\nUsing PesapalFlask in a Flask application makes it possible to have some advanced usage that is not possible if using Pesapal.\n\nCurrently, this advanced usage is limited to rendering a [payment iframe](https://developer.pesapal.com/how-to-integrate/php-sample) in a Jinja2 template page.\n```python\nimport uuid\nfrom flask import Flask, render_template\nfrom py_pesapal import PesapalFlask\n\napp = Flask(__name__)\n\npesapal = PesapalFlask(app, config = {\n\t\"PESAPAL_CONSUMER_KEY\": \"12345\",\n\t\"PESAPAL_CONSUMER_SECRET\": \"12345\",\n\t\"PESAPAL_CALLBACK_URL\": \"https://example.com/callback-url\"\n})\n\n@app.route(\"/payment\", methods = [\"GET])\ndef return_payment_page():\n    transaction_data = {}\n    line_items = []\n    transaction_total = []\n\n    x = 1\n    while(x <= 5):\n        items_dict = {}\n        items_dict[\"item_id\"] = x\n        items_dict[\"item_name\"] = \"Product {}\".format(x)\n        items_dict[\"item_count\"] = 1\n        items_dict[\"unit_cost\"] = 10 * x\n        items_dict[\"subtotal\"] = 1 * 10 * x\n        transaction_total.append(1 * 10 * x)\n\n        line_items.append(items_dict)\n        x += 1\n\n    transaction_data[\"line_items\"] = line_items\n    transaction_data[\"amount\"] = sum(transaction_total)\n    transaction_data[\"description\"] = \"Test transaction\"\n    transaction_data[\"reference\"] = str(uuid.uuid4())\n    transaction_data[\"email\"] = \"mail@example.com\"\n    transaction_data[\"currency\"] = \"KES\"\n\n    return render_template(\"payment.html\", data = transaction_data)\n```\n\n```html\n<!-- payment.html -->\n<!DOCTYPE html>\n<html>\n    <head>\n        <title> Fancy Page Title </title>\n    </head>\n\n    <body>\n        {{ render_iframe(data)|safe }}\n    </body>\n</html>\n```\n\n\n## Configuration\nThere are a number of configuration options when creating a new instance as highlighted below.\n\n### Pesapal\n```python\npesapal = Pesapal(\n    consumer_key = \"12345\",\n    consumer_secret = \"12345\",\n    testing = True, # Optional\n    prettyprint_xml = True, # Optional\n    save_xml_file = False, # Optional\n    xml_output_dir = None, # Optional\n    param_validation = True # Optional\n)\n```\n- `consumer_key` **(Required)**: The consumer_key value provided by PesaPal.\n- `consumer_secret` **(Required)**: The consumer_secret value provided by PesaPal.\n- `testing` **(Optional)**: Default value is `True`. Sets the base PesaPal URL as [https://demo.pesapal.com](https://demo.pesapal.com) if `True` or [https://pesapal.com](https://pesapal.com) if `False`.\n- `prettyprint_xml` **(Optional)**: Default value is `True`. Sets whether to prettyprint the generated XML data.\n- `save_xml_file` **(Optional)**: Default value is `False`. Sets whether the generated XML data should also be saved to a file on disc.\n- `xml_output_dir` **(Optional)**: Default value is `None`. If `save_xml_file` is set to `True`, this sets the desired output directory. If this param is not set, then the default directory used is `xml/` in the current working directory.\n- `param_validation` **(Optional)**: Default value is `True`. By default, py-pesapal requires the email address of whoever it is transacting. This is in contrast to PesaPal which requires one of either the email address or phone number to be provided. Use this param to switch off the validation that is handled by py-pesapal and default to PesaPal's native field validation.\n\n### PesapalFlask\n```python\nfrom flask import Flask\nfrom py_pesapal import PesapalFlask\n\napp = Flask(__name__)\n\npesapal = PesapalFlask(app, config = {\n\t\"PESAPAL_CONSUMER_KEY\": \"12345\",\n\t\"PESAPAL_CONSUMER_SECRET\": \"12345\",\n    \"PESAPAL_TESTING\": True, # Optional\n\t\"PESAPAL_CALLBACK_URL\": \"https://example.com/callback-url\",\n    \"PESAPAL_PRETTYPRINT_XML\": True, # Optional\n    \"PESAPAL_SAVE_XML\": False, # Optional\n    \"PESAPAL_OUTPUT_DIR\": None, # Optional\n    \"PESAPAL_PARAM_VALIDATION\": True # Optional\n})\n```\n\nAlternatively, the configuration values can be associated with the application instance.\n```python\nfrom flask import Flask\nfrom py_pesapal import PesapalFlask\n\napp = Flask(__name__)\napp.config[\"PESAPAL_CONSUMER_KEY\"] = \"12345\",\napp.config[\"PESAPAL_CONSUMER_SECRET\"] = \"12345\",\napp.config[\"PESAPAL_TESTING\"] = True, # Optional\napp.config[\"PESAPAL_CALLBACK_URL\"] = \"https://example.com/callback-url\",\napp.config[\"PESAPAL_PRETTYPRINT_XML\"] = True, # Optional\napp.config[\"PESAPAL_SAVE_XML\"] = False, # Optional\napp.config[\"PESAPAL_OUTPUT_DIR\"] = None, # Optional\napp.config[\"PESAPAL_PARAM_VALIDATION\"] = True # Optional\n\npesapal = PesapalFlask(app)\n```\n\n\n## Utils\nThe py-pesapal package exposes various utilities should a developer want more control over the process of integrating with PesaPal.\n\n```python\nfrom py_pesapal.utils import generate_oauth_url\n\n# BUILD OAUTH1 URL\nurl = generate_oauth_url(\n    consumer_key = \"12345\",\n    consumer_secret = \"12345\",\n    url = \"https://demo.pesapal.com\",\n    request_params = {\n        \"oauth_callback\": \"https://example.com/callback-url\"\n    }\n)\n```\n- `consumer_key` **(Required)**: The consumer_key value.\n- `consumer_secret` **(Required)**: The consumer_secret value.\n- `url` **(Required)**: This is the base URL to which the various params are appended.\n- `request_params` **(Required)**: The params that are appended to the base URL.\n\n```python\nfrom py_pesapal.utils import validate_params\n\n# VALIDATE PARAMS\nrequired_params = {\n    \"email\": True,\n    \"phone_number\": True,\n    \"first_name\": False\n}\n\nparams_to_be_validated = {\n    \"email\": \"mail@example.com\",\n    \"phone_number\": \"phone-number\"\n}\n\n# Raises a KeyError if one or more params are missing\nvalidate_params(params = params_to_be_validated, required_params = required_params)\n```\n- `params` **(Required)**: This is a dictionary of the params one wishes to validate.\n- `required_params` **(Required)**: This is a dictionary containing the name of the param and a Boolean indicating whether it is required or not.\n\n```python\nimport uuid\nfrom py_pesapal import generate_xml\n\ntransaction_data = {}\ntransaction_data[\"amount\"] = 120\ntransaction_data[\"description\"] = \"Test transaction\"\ntransaction_data[\"reference\"] = str(uuid.uuid4())\ntransaction_data[\"email\"] = \"mail@example.com\"\ntransaction_data[\"currency\"] = \"KES\"\n\n# GENERATE XML\nxml = generate_xml(\n    transaction_data = transaction_data,\n    prettyprint = True,\n    generate_xml_file = False,\n    xml_output_directory = None\n)\n```\n- `transaction_data` **(Required)**: The transaction data to be posted\n- `prettyprint` **(Optional)**: Sets whether or not to prettyprint the resultant XML.\n- `generate_xml_file` **(Optional)**: Sets whether or not to save the XML data to a file on disc.\n- `xml_output_directory` **(Optional)**: Sets the output directory for XML files if `generate_xml_file` is set to `True`. The default directory is `xml/` in the current working directory.\n\n\n## Licence\n[MIT](https://choosealicense.com/licenses/mit/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/M69k65y/py-pesapal",
    "keywords": "pesapal flask python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-pesapal",
    "package_url": "https://pypi.org/project/py-pesapal/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-pesapal/",
    "project_urls": {
      "Homepage": "https://github.com/M69k65y/py-pesapal"
    },
    "release_url": "https://pypi.org/project/py-pesapal/0.1.0/",
    "requires_dist": [
      "requests (>=2.22.0requests_oauthlib>=1.3.0)"
    ],
    "requires_python": "",
    "summary": "PesaPal integration made easy",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7371205,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1ba0fc6f4aab22d3be1f35bb53f29f8fc61881285614058c72aff5f995d01b4",
          "md5": "5ee3044dbf79466abc9b6fa6e658b981",
          "sha256": "fe89906f6fd6d4c23e340c934d8899d21d55975762befa1b5b64841823334a9e"
        },
        "downloads": -1,
        "filename": "py_pesapal-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ee3044dbf79466abc9b6fa6e658b981",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10541,
        "upload_time": "2020-06-01T16:34:15",
        "upload_time_iso_8601": "2020-06-01T16:34:15.533693Z",
        "url": "https://files.pythonhosted.org/packages/b1/ba/0fc6f4aab22d3be1f35bb53f29f8fc61881285614058c72aff5f995d01b4/py_pesapal-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ea7d6192c1221c2cfe166c8795bce73c4f1f3c1a93a66f932871bd1979962a9",
          "md5": "2e13d592332b2dd3ca58ade4dc188e29",
          "sha256": "5e6c29ea5c11cc7888d1e9871f7fb70a67ce5b829a6b1a60951c95c682d4e80c"
        },
        "downloads": -1,
        "filename": "py-pesapal-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2e13d592332b2dd3ca58ade4dc188e29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10214,
        "upload_time": "2020-06-01T16:34:22",
        "upload_time_iso_8601": "2020-06-01T16:34:22.463010Z",
        "url": "https://files.pythonhosted.org/packages/2e/a7/d6192c1221c2cfe166c8795bce73c4f1f3c1a93a66f932871bd1979962a9/py-pesapal-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1ba0fc6f4aab22d3be1f35bb53f29f8fc61881285614058c72aff5f995d01b4",
        "md5": "5ee3044dbf79466abc9b6fa6e658b981",
        "sha256": "fe89906f6fd6d4c23e340c934d8899d21d55975762befa1b5b64841823334a9e"
      },
      "downloads": -1,
      "filename": "py_pesapal-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ee3044dbf79466abc9b6fa6e658b981",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10541,
      "upload_time": "2020-06-01T16:34:15",
      "upload_time_iso_8601": "2020-06-01T16:34:15.533693Z",
      "url": "https://files.pythonhosted.org/packages/b1/ba/0fc6f4aab22d3be1f35bb53f29f8fc61881285614058c72aff5f995d01b4/py_pesapal-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ea7d6192c1221c2cfe166c8795bce73c4f1f3c1a93a66f932871bd1979962a9",
        "md5": "2e13d592332b2dd3ca58ade4dc188e29",
        "sha256": "5e6c29ea5c11cc7888d1e9871f7fb70a67ce5b829a6b1a60951c95c682d4e80c"
      },
      "downloads": -1,
      "filename": "py-pesapal-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2e13d592332b2dd3ca58ade4dc188e29",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10214,
      "upload_time": "2020-06-01T16:34:22",
      "upload_time_iso_8601": "2020-06-01T16:34:22.463010Z",
      "url": "https://files.pythonhosted.org/packages/2e/a7/d6192c1221c2cfe166c8795bce73c4f1f3c1a93a66f932871bd1979962a9/py-pesapal-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}