{
  "info": {
    "author": "ronshen0404",
    "author_email": "ronshen970404@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# TradingSystem\nAn event-driven backtest/realtime quantitative trading system.\n\n# Architecture\nData Handler \n* Handle live and historical OHLCV data\n* Generate a BarEvent which contains ticker symbol and OHLCV data\nStrategy\n* Get BarEvents and make trading decisions based on predefined rules\n* Generate a SignalEvent which contains order type (market/limit order) and the direction (long/short)\nOrder Handler\n* Get SignalEvents and determine the quantities that should be bought/sold\n* Generate an OrderEvent containing order type, direction, and quantities\nBroker\n* Get OrderEvents and route orders to a simulated or real brokerage\n* Once orders are filled, it creates a FillEvent which has executed price, commission, and the exchange where the order was filled\nPortfolio\n* Manage the whole portfolio. It tracks PnL, position, and the average price of ticker symbols\n* Get BarEvents and FillEvents to update the portfolio\n\n# Installation\n1. create a virtual environment\n2. pip install tradingsystem\n\n# Examples\nFor backtesting,\n```\nimport queue\nfrom tradingsystem.data_handler.historical_bar_handler import HistoricalBarHandler, get_data_from_csv, get_data_from_yahoo_finance\nfrom tradingsystem.strategy.sma_crossover import SMACrossover\nfrom tradingsystem.portfolio.portfolio import Portfolio\nfrom tradingsystem.order_handler.max_order_handler import MaxOrderHandler\nfrom tradingsystem.broker.simulated_broker import IBSimulatedBroker\nfrom tradingsystem.statistics.statistics import Statistics\nfrom tradingsystem.common import SessionType\nfrom tradingsystem.simulated_trading_session import TradingSession\n\nevents_queue = queue.Queue()       \ninit_asset_val = 10000\ntickers_data = {}\namzn = get_data_from_yahoo_finance(\"AMZN\", \"2022-01-01\", \"2022-05-01\", \"1d\")\nticker_list = ['AMZN']\ntickers_data['AMZN'] = amzn\nhistorical_bar_handler = HistoricalBarHandler(tickers_data, events_queue)\nportfolio = Portfolio(init_asset_val)\norder_handler = MaxOrderHandler(portfolio, events_queue, SessionType.BACKTEST)\nsma_crossover = SMACrossover(ticker_list, 10, 20, events_queue, SessionType.BACKTEST, portfolio)\nsimulated_broker = IBSimulatedBroker(events_queue, historical_bar_handler)\nstat = Statistics(init_asset_val)\ntrading_session = TradingSession(historical_bar_handler, sma_crossover, portfolio, \n                                 order_handler ,simulated_broker, events_queue, stat)\n#start backtest\ntrading_session.start_trading()\n```\n\nFor live trading in IB,\n1. Open Trader Workstation (TWS) or IB Gateway\n2. Change timezone to UTC in options\n3. Run the code below\n```\nimport queue\nfrom tradingsystem.data_handler.ib_real_time import IBRealTimeBarHandler\nfrom tradingsystem.strategy.sma_crossover import SMACrossover\nfrom tradingsystem.order_handler.max_order_handler import MaxOrderHandler\nfrom tradingsystem.portfolio.portfolio import Portfolio\nfrom tradingsystem.broker.ib_broker import IBBroker\nfrom tradingsystem.statistics.statistics import Statistics\nfrom tradingsystem.ibtws.twsclient import TWSClient\nfrom tradingsystem.common import SessionType\nfrom tradingsystem.trading_schedule.fx_schedule import FXSchedule\nfrom datetime import datetime\nfrom tradingsystem.ib_trading_session import TradingSession\n\n#set up     \nevents_queue = queue.Queue()       \ninit_asset_val = 10000 #in USD\nsession_type = SessionType.LIVE\ntwsclient = TWSClient(\"127.0.0.1\", 7497, 0)\ntrading_schedule = FXSchedule(2022)\nsymbol_list = ['EUR/USD']\nib_bar_handler = IBRealTimeBarHandler(twsclient, symbol_list, 300, \n                                      \"MIDPOINT\", True, events_queue, \n                                      )\nportfolio = Portfolio(init_asset_val)\nmax_order_handler = MaxOrderHandler(portfolio, events_queue, session_type)\nsma_crossover = SMACrossover(symbol_list, 10, 20, events_queue, session_type, portfolio)\nib_broker = IBBroker(twsclient, events_queue, symbol_list)\nstat = Statistics(init_asset_val)\ntrading_end = datetime(2022,12,31, 0, 00)\ntrading_session = TradingSession(twsclient, ib_bar_handler, sma_crossover, portfolio, \n                                 max_order_handler, ib_broker, events_queue, \n                                 trading_schedule, trading_end, stat)\n#start trading\ntrading_session.start_trading()\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ronshen0404/tradingsystem",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tradingsystem",
    "package_url": "https://pypi.org/project/tradingsystem/",
    "platform": null,
    "project_url": "https://pypi.org/project/tradingsystem/",
    "project_urls": {
      "Homepage": "https://github.com/ronshen0404/tradingsystem"
    },
    "release_url": "https://pypi.org/project/tradingsystem/0.0.1/",
    "requires_dist": [
      "mysql-connector-python (>=8.0.30)",
      "matplotlib (>=3.5.2)",
      "numpy (>=1.23.1)",
      "pandas (>=1.4.3)",
      "yfinance (>=0.1.74)"
    ],
    "requires_python": "",
    "summary": "An event-driven trading system",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14830622,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2672acb2480cfbc6dddc0aafa33db47686864ade5e4b29041624616bb5ab0a00",
          "md5": "2738bd0d378ce96a5780ec55db620b3c",
          "sha256": "77f76b4c83520fc31343915d09e4dde02edcb4dcb99996b4b0cb4b9cb04dee90"
        },
        "downloads": -1,
        "filename": "tradingsystem-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2738bd0d378ce96a5780ec55db620b3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 135839,
        "upload_time": "2022-08-22T00:26:18",
        "upload_time_iso_8601": "2022-08-22T00:26:18.744143Z",
        "url": "https://files.pythonhosted.org/packages/26/72/acb2480cfbc6dddc0aafa33db47686864ade5e4b29041624616bb5ab0a00/tradingsystem-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8689e6ee9070156164d5faee085785bf9593baab938577eeb2f00a1676918812",
          "md5": "1bf9ab59ceeff13ce2a154833aeec2fa",
          "sha256": "6536bb1532f5c39abefdb3124db4d1883e6800556440b768d512bff95ac67df0"
        },
        "downloads": -1,
        "filename": "tradingsystem-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1bf9ab59ceeff13ce2a154833aeec2fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 105900,
        "upload_time": "2022-08-22T00:26:20",
        "upload_time_iso_8601": "2022-08-22T00:26:20.863232Z",
        "url": "https://files.pythonhosted.org/packages/86/89/e6ee9070156164d5faee085785bf9593baab938577eeb2f00a1676918812/tradingsystem-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2672acb2480cfbc6dddc0aafa33db47686864ade5e4b29041624616bb5ab0a00",
        "md5": "2738bd0d378ce96a5780ec55db620b3c",
        "sha256": "77f76b4c83520fc31343915d09e4dde02edcb4dcb99996b4b0cb4b9cb04dee90"
      },
      "downloads": -1,
      "filename": "tradingsystem-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2738bd0d378ce96a5780ec55db620b3c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 135839,
      "upload_time": "2022-08-22T00:26:18",
      "upload_time_iso_8601": "2022-08-22T00:26:18.744143Z",
      "url": "https://files.pythonhosted.org/packages/26/72/acb2480cfbc6dddc0aafa33db47686864ade5e4b29041624616bb5ab0a00/tradingsystem-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8689e6ee9070156164d5faee085785bf9593baab938577eeb2f00a1676918812",
        "md5": "1bf9ab59ceeff13ce2a154833aeec2fa",
        "sha256": "6536bb1532f5c39abefdb3124db4d1883e6800556440b768d512bff95ac67df0"
      },
      "downloads": -1,
      "filename": "tradingsystem-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1bf9ab59ceeff13ce2a154833aeec2fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 105900,
      "upload_time": "2022-08-22T00:26:20",
      "upload_time_iso_8601": "2022-08-22T00:26:20.863232Z",
      "url": "https://files.pythonhosted.org/packages/86/89/e6ee9070156164d5faee085785bf9593baab938577eeb2f00a1676918812/tradingsystem-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}