{
  "info": {
    "author": "Anthony Krivonos",
    "author_email": "info@anthonykrivonos.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# 🌄 imagegengan\n\n> A plug-and-play GAN image generator using a Keras/Tensorflow backend. [1]\n\n## ⬇️ Installation\n\n`pip install imagegengan`\n\n## ✨ Features\n\n- Completely plug-and-play DCGAN implementation. [2]\n- Takes images *of any dimensions* as inputs and outputs to the dimensions of your choice.\n- Supports custom generative and discriminative models, if you need that.\n- Built-in image augmentation to mitigate effects of small training datasets.\n\n\n## 🏃‍♂️ Quick Start\n\n```\nfrom imagegengan import imagegengan\n\n# This is a relative path to a directory containing\n# a ton of different-sized images.\nimages_dir = \"dog_images/\"\n\n# These are the dimensions of our generated image.\n# The third dimension is the # of channels, so use\n# 3 for a color (RGB) image and 1 for grayscale.\nimg_shape = (200, 200, 3)\n\n# Create the image generator.\nimage_generator = imagegengan(img_shape=img_shape)\n\n# Train the image generator.\nimage_generator.train(from_dir=images_dir, epochs=150, batch_size=32)\n\n# Generate a new image (outputs a numpy array\n# that can be displayed or saved as an image).\ngenerated_image = image_generator.generate()\n```\n\nOr, without the comments:\n\n```\nfrom imagegengan import imagegengan\n\nimage_generator = imagegengan(img_shape=(200, 200, 3))\nimage_generator.train(from_dir=\"dog_images/\", epochs=150, batch_size=32)\n\ngenerated_image = image_generator.generate()\n```\n\n## 📖 Documentation\n\n### `imagegenrnn` Class\n\n##### `__init__(...)`\n\nInitializes a new imagegenrnn object.\n\n- **`img_shape`**: The image shape as a three-dimensional tuple (height, width, channels). (default `(224, 224, 3)`)\n- **`generator`**: The generator model to use. (default `Generator.Default`)\n- **`discriminator`**: The discriminator to use. (default `Discriminator.Default`)\n- **`upsample_layers`**: The sequence of layers for upsampling in the generator and downsampling in the discriminator. (default `[1024, 512, 256, 128, 64]`)\n- **`kernel_size`**: The kernel size for convolutions in the GAN. 5x5 is the standard so we advise against changing this. (default `(5, 5)`)\n- **`noise_depth`**: The length of the input noise vector. 100 is the standard so we advise against changing this. (default `100`)\n- **`lr`**: The learning rate of both the generator and discriminator. (default `0.00015`)\n\n#### `train(...)`\n\n> Train the GAN model on either images from a directory, images from a list, or images preprepared with the imagegengan.prepare_images function. Only one of such inputs must be provided.\n\n- **`from_dir`**: The directory to train from. The images here can be different sizes and the resizing function will standardize them. Do not supply from_list or from_prepared if you choose to train from a directory. (default `None`)\n- **`from_list`**: A numpy list containing *unprepared* images to train from. The images here can be different sizes and the resizing function will standardize them. Do not supply from_dir or from_prepared if you choose to train from a list. (default `[]`)\n- **`from_prepared`**: A numpy list or string .npy filename containing *prepared* images using the imagegengan.prepare_images function. The images here *must* be the same size as the image shape of the imagegengan class. Do not supply from_dir or from_list if you choose to train from a prepared list. (default `[]`)\n- **`epochs`**: The number of epochs to train on. (default `100`)\n- **`batch_size`**: The size of each training batch. Must be less than or equal to the number of input images. It is advised to keep this number small (~8) to avoid tensor overflows. (default `8`)\n- **`lr`**: The learning rate of the GAN (not of the generator or discriminator that were initialized in the constructor). Defaults to the generator's and discriminator's learning rate. (default `None`)\n- **`noise_level`**: The coefficient of noise when training the discriminator. (default `0.2`)\n- **`save_interval`**: The interval (in epochs) of saving the GAN to a file. If save_to is not None, defaults to 1/10th of the number of epochs. (default `None`)\n- **`save_to`**: The directory to save to on the save_interval. If None, the GAN is not saved. (default `None`)\n- **`grayscale`**: Boolean indicating whether or not the images should be converted into grayscale. (default `False`)\n- **`verbose`**: Boolean indicating whether the training's status should be outputted. (default `True`)\n- **`resizing`**: The resizing method. Use Resizing.CONTAIN or 0 to pad the images, Resizing.STRETCH or 1 to stretch the images and ignore aspect ratio, and Resizing.COVER or 2 to crop the images while maintaining aspect ratio. (default `Resizing.COVER`)\n- **`padding_color`**: The color of the padding used if the resizing mode is Resizing.CONTAIN or 0. Defaults to 0, which is black. (default `0`)\n- **`horizontal_flip`**: Boolean indicating whether the training images can be horizontally flipped during image data augmentation. This helps the GAN generator more kinds of images. (default `False`)\n- **`seed`**: Integer seed for the random image augmenter. (default `1`)\n- **`rounds`**: Number of rounds to go through during image augmentation. The more rounds, the longer it takes to train, but the more results yielded. (default `1`)\n- **`limit`**: Limits the number of training images used, mainly for debugging or retraining purposes. (default `None`)\n- **`shuffle`**: Boolean indicating whether or not to shuffle the training images. Often helpful during retraining. (default `False`)\n\n#### `generate(...)`\n\n> Generate a single image or a batch of images in numpy format.\n\n- **`num_outputs`**: The number of images to output. If  1, returns a single image. Otherwise, returns an array of images. (default `1`)\n- **`save_to_dir`**: The directory to save the images to, if not None. (default `None`)\n- **`file_prefix`**: The prefix of the generated image files. Does not do anything if save_to_dir is None. (default `\"generated_img\"`)\n- **`verbose`**: Boolean indicating whether the status of image generation should be outputted. (default `True`)\n\n**`returns`** A single numpy array output image or a list of such images.\n\n#### `save(...)`\n\n> Save the imagegengan to a .h5 file. Use like `gen.save('myfile')`.\n\n- **`filename`**: The name of the file to save the image as.\n\n#### `load(...)`\n\n> Load the imagegengan from a .h5 file. Use like `gen.load('myfile')`.\n\n- **`filename`**: The name of the file to load the image from.\n\n#### `prepare_images(...)`\n_(static method)_\n\n> Creates a numpy image list of resized images from either images from a directory or images from a list. Only one of such inputs must be provided.\n\n- **`img_shape`**: The image shape as a three-dimensional tuple (height, width, channels).\n- **`from_dir`**: The directory to train from. The images here can be different sizes and the resizing function will standardize them. Do not supply from_list or from_prepared if you choose to train from a directory. (default `None`)\n- **`from_list`**: A numpy list containing *unprepared* images to train from. The images here can be different sizes and the resizing function will standardize them. Do not supply from_dir or from_prepared if you choose to train from a list. (default `[]`)\n- **`save_to_npy`**: A string filename to where the numpy array output can be saved. Saving prepared images to a .npy file and inputting these images into imagegengan.train using from_prepared is the recommended (but not easiest) training method. If None, the output images are not saved. (default `None`)\n- **`verbose`**: Boolean indicating whether the image preparation status should be outputted. (default `True`)\n- **`grayscale`**: Boolean indicating whether or not the images should be converted into grayscale. (default `False`)\n- **`resizing`**: The resizing method. Use Resizing.CONTAIN or 0 to pad the images, Resizing.STRETCH or 1 to stretch the images and ignore aspect ratio, and Resizing.COVER or 2 to crop the images while maintaining aspect ratio. (default `Resizing.COVER`)\n- **`padding_color`**: The color of the padding used if the resizing mode is Resizing.CONTAIN or 0. Defaults to 0, which is black. (default `0`)\n- **`limit`**: Limits the number of training images used, mainly for debugging or retraining purposes. (default None)\n- **`shuffle`**: Boolean indicating whether or not to shuffle the training images. Often helpful during retraining. (default `False`)\n\n**`returns`** A numpy array of prepared images that are all the same size.\n\n## 📄 Changelist\n\n#### 1.0.0\n- Initial work; used [Tiago Freitas's implementation](https://github.com/tensorfreitas/DCGAN-for-Bird-Generation/blob/master/traindcgan.py), [Mitchell Jolly's implementation](https://github.com/mitchelljy/DCGAN-Keras), and [this issue on ImageDataGenerator flows](https://github.com/keras-team/keras/issues/2694#issuecomment-218446360) for reference.\n\n\n## 📚 References\n\n[1] Chollet, Francois et al. \"Keras.\" https://keras.io. (2015).\n\n[2] Alec Radford, et al. \"Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks.\" (2015).\n\n\n## Author\n\nAnthony Krivonos ([Portfolio](https://anthonykrivonos.com) | [LinkedIn](https://linkedin.com/in/anthonykrivonos))\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anthonykrivonos/imagegengan",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imagegengan",
    "package_url": "https://pypi.org/project/imagegengan/",
    "platform": "",
    "project_url": "https://pypi.org/project/imagegengan/",
    "project_urls": {
      "Homepage": "https://github.com/anthonykrivonos/imagegengan"
    },
    "release_url": "https://pypi.org/project/imagegengan/1.0.2/",
    "requires_dist": [
      "numpy",
      "opencv-contrib-python",
      "tensorflow",
      "Keras"
    ],
    "requires_python": ">=3.6",
    "summary": "A plug-and-play GAN image generator.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7274388,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a658d1682be409c57f30038b20f41ed839c5ac21b5939fc1aa3e69a4b197c3a",
          "md5": "344483891577dd2c3dace5d0e103f8ed",
          "sha256": "5152589c6558d0845c3cb957c1585b7ddb5f314778974423a50a57d9286d1c12"
        },
        "downloads": -1,
        "filename": "imagegengan-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "344483891577dd2c3dace5d0e103f8ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14650,
        "upload_time": "2020-05-19T04:21:08",
        "upload_time_iso_8601": "2020-05-19T04:21:08.390975Z",
        "url": "https://files.pythonhosted.org/packages/1a/65/8d1682be409c57f30038b20f41ed839c5ac21b5939fc1aa3e69a4b197c3a/imagegengan-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e396a39f92b3c1fd5fdfbed5a8b48c23404dec05808df1494565929d00eb171",
          "md5": "30ce7691b2f0552539fe8b7289e33cad",
          "sha256": "d449179e03207ca2fc336d047931324ed2bd77968efa2645c9eec8845798859a"
        },
        "downloads": -1,
        "filename": "imagegengan-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "30ce7691b2f0552539fe8b7289e33cad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12670,
        "upload_time": "2020-05-19T04:21:10",
        "upload_time_iso_8601": "2020-05-19T04:21:10.373524Z",
        "url": "https://files.pythonhosted.org/packages/4e/39/6a39f92b3c1fd5fdfbed5a8b48c23404dec05808df1494565929d00eb171/imagegengan-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a658d1682be409c57f30038b20f41ed839c5ac21b5939fc1aa3e69a4b197c3a",
        "md5": "344483891577dd2c3dace5d0e103f8ed",
        "sha256": "5152589c6558d0845c3cb957c1585b7ddb5f314778974423a50a57d9286d1c12"
      },
      "downloads": -1,
      "filename": "imagegengan-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "344483891577dd2c3dace5d0e103f8ed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14650,
      "upload_time": "2020-05-19T04:21:08",
      "upload_time_iso_8601": "2020-05-19T04:21:08.390975Z",
      "url": "https://files.pythonhosted.org/packages/1a/65/8d1682be409c57f30038b20f41ed839c5ac21b5939fc1aa3e69a4b197c3a/imagegengan-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e396a39f92b3c1fd5fdfbed5a8b48c23404dec05808df1494565929d00eb171",
        "md5": "30ce7691b2f0552539fe8b7289e33cad",
        "sha256": "d449179e03207ca2fc336d047931324ed2bd77968efa2645c9eec8845798859a"
      },
      "downloads": -1,
      "filename": "imagegengan-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "30ce7691b2f0552539fe8b7289e33cad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12670,
      "upload_time": "2020-05-19T04:21:10",
      "upload_time_iso_8601": "2020-05-19T04:21:10.373524Z",
      "url": "https://files.pythonhosted.org/packages/4e/39/6a39f92b3c1fd5fdfbed5a8b48c23404dec05808df1494565929d00eb171/imagegengan-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}