{
  "info": {
    "author": "Zeyn Schweyk",
    "author_email": "zschweyk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# MusicLibrary\r\nA simple and intuitive music library to create notes, chords and all the different inversions associated with them, scales, intervals, and so much more.\r\n\r\nCreated by Zeyn Schweyk. Contact zschweyk@gmail.com for any questions.\r\n\r\nInstall:\r\n```\r\npip install ZMusicLibrary\r\n```\r\n\r\n###\r\nNote\r\n=\r\n\r\nCreate a note object:\r\n```\r\nn = Note(\"C4\")\r\n```\r\nAdd an interval: returns a Note object\r\n####\r\nAll the fundamental intervals. Includes intervals in greater octaves as well. \r\n* \"P1\", \"A1\", \"m2\", \"M2\", \"A2\", \"m3\", \"M3\", \"P4\", \"A4\", \"D5\", \"P5\", \"A5\", \"m6\", \"M6\", \"A6\", \"D7\", \"m7\", \"M7\"\r\n```\r\nn1 = Note(\"F#3\") + \"M2\" # add a major 2nd (G#3)\r\nn2 = Note(\"A6\") - \"P4\" # subtract a perfect 4th (E5)\r\nn3 = Note(\"Eb5\") + \"-M3\" # add a negative major 3rd (Cb5)\r\nn4 = Note(\"Eb5\") - \"-M6\" # subtract a negative major 3rd (C6)\r\n# Can perform arithmetic on intervals greater than a perfect 8th\r\n# like a \"M9\" (major 9th), as long as it fits within the piano keyboard\r\n```\r\nCompare 2 notes: returns a str\r\n```\r\nn1 = Note(\"C4\")\r\nn2 = Note(\"Eb5\")\r\nprint(n1.compare_with(n2)) # will print a \"m10\", minor 10th\r\n```\r\nPerform logical tests:\r\n```\r\nn1 = Note(\"F5\")\r\nn2 = Note(\"G5\")\r\nprint(n1 == n2) # False\r\nprint(n1 < n2) # True\r\nprint(n1 <= n2) # True\r\nprint(n1 > n2) # False\r\nprint(n1 >= n2) # False\r\nprint(n1 != n2) # True\r\n```\r\nSimplify a note's notation: returns a new Note object\r\n```\r\nn = Note(\"C##4\")\r\nprint(n.simplify_notation()) # prints Note(D4)\r\n```\r\n###\r\nChord\r\n=\r\nCreate a pre-defined chord object:\r\n####\r\nHere are the following chord types, and the intervals that they consist of:\r\n####\r\n* \"Maj\": [\"P1\", \"M3\", \"P5\"]\r\n* \"Maj7\": [\"P1\", \"M3\", \"P5\", \"M7\"]\r\n* \"Dom\": [\"P1\", \"M3\", \"P5\", \"m7\"] \r\n* \"Min\": [\"P1\", \"m3\", \"P5\"]\r\n* \"Min7\": [\"P1\", \"m3\", \"P5\", \"m7\"]\r\n* \"MinNat7\": [\"P1\", \"m3\", \"P5\", \"M7\"]\r\n* \"Dim\": [\"P1\", \"m3\", \"D5\"]\r\n* \"Dim7\": [\"P1\", \"m3\", \"D5\", \"D7\"]\r\n* \"HDim7\": [\"P1\", \"m3\", \"D5\", \"m7\"]\r\n```\r\nc = Chord(chord_type=\"Min\", bass_note=\"E4\") # bass_note can be a str or Note object\r\nprint(c) # prints Chord([Note(F4), Note(Ab4), Note(C5)])\r\n```\r\nCreate a custom chord object:\r\n```\r\nc1 = Chord(list_of_notes=[\"F#4\", \"G#4\", \"A5\", \"C#4\"])\r\nprint(c1) # prints Chord([Note(F#4), Note(G#4), Note(A5), Note(C#4), Note(F#5)])\r\n\r\n# OR\r\n\r\nc2 = Chord(list_of_notes=[Note(\"F#4\"), Note(\"G#4\"), Note(\"A5\"), Note(\"C#4\")])\r\nprint(c2) # prints Chord([Note(F#4), Note(G#4), Note(A5), Note(C#4), Note(F#5)])\r\n\r\nprint(\"Equal:\", c1 == c2) # prints True\r\n```\r\n\r\nLoop through the notes of a chord:\r\n```\r\nc1 = Chord(chord_type=\"Dim7\", bass_note=\"E4\")\r\nfor note in c1:\r\n    print(note)\r\n```\r\n\r\nMake a chord have n notes (works with predefined and custom chords): returns a new chord\r\n```\r\nc1 = Chord(chord_type=\"Maj\", bass_note=\"B3\")\r\nc1 = c1.to_n_number_notes(5)\r\nprint(c1) # prints Chord([Note(B3), Note(D#3), Note(F#3), Note(B4), Note(D#4)])\r\n```\r\n\r\nChange the inversion of a chord (works with predefined and custom chords): returns a new chord\r\n####\r\nThere is no limit on the number of inversions, although the chord will shift an octave higher at len(chord) inversions.\r\n```\r\nc1 = Chord(chord_type=\"Maj\", bass_note=\"B3\")\r\nc1 = c1.inversion(2)\r\nprint(c1) # prints Chord([Note(F#3), Note(B4), Note(D#4)])\r\n```\r\n\r\nCombine to_n_number_notes and inversion:\r\n```\r\nc1 = Chord(chord_type=\"Maj\", bass_note=\"B3\")\r\nc1 = c1.to_n_number_notes(4)\r\nprint(c1.inversion(1)) # prints Chord([Note(D#3), Note(F#3), Note(B4), Note(D#4)])\r\n\r\nc2 = Chord(chord_type=\"Maj\", bass_note=\"B3\")\r\nc2 = c2.inversion(1)\r\nprint(c2.to_n_number_notes(4)) # prints Chord([Note(D#3), Note(F#3), Note(B4), Note(D#4)])\r\n```\r\nPerform logical tests:\r\n####\r\nCompares the last note of each chord, except for == and !=, which compare the every note in each chord.\r\n```\r\nc1 = Chord(chord_type=\"Maj\", bass_note=\"B3\")\r\nc1 = c1.to_n_number_notes(4)\r\nc1 = c1.inversion(1)\r\n\r\nc2 = Chord(chord_type=\"Maj\", bass_note=\"B3\")\r\nc2 = c2.to_n_number_notes(4)\r\nc2 = c2.inversion(2)\r\n\r\nprint(c1 < c2) # True\r\nprint(c1 <= c2) # True\r\nprint(c1 > c2) # False\r\nprint(c1 >= c2) # False\r\nprint(c1 == c2) # False\r\nprint(c1 != c2) # True\r\n```\r\n\r\n###\r\nScale\r\n=\r\nCreate a pre-defined scale object:\r\n####\r\nHere are the following scale types, and the intervals that they consist of:\r\n####\r\n* \"Maj\": [\"P1\", \"M2\", \"M3\", \"P4\", \"P5\", \"M6\", \"M7\"]\r\n* \"Min\": [\"P1\", \"M2\", \"m3\", \"P4\", \"P5\", \"m6\", \"m7\"]\r\n* \"Chromatic\": [\"P1\", \"A1\", \"M2\", \"A2\", \"M3\", \"P4\", \"A4\", \"P5\", \"A5\", \"M6\", \"A6\", \"M7\"],\r\n#####\r\n* \"HMin\": [\"P1\", \"M2\", \"m3\", \"P4\", \"P5\", \"m6\", \"M7\"]\r\n* \"MMin\": [\"P1\", \"M2\", \"m3\", \"P4\", \"P5\", \"M6\", \"M7\"]\r\n#####\r\n* \"MinBlues\": [\"P1\", \"m3\", \"P4\", \"D5\", \"P5\", \"m7\"]\r\n* \"MajBlues\": [\"P1\", \"M2\", \"m3\", \"M3\", \"P5\", \"M6\"]\r\n#####\r\n* \"MajPent\": ['P1', 'M2', 'M3',       'P5', 'M6']\r\n* \"MinPent\": ['P1',       'm3', 'P4', 'P5',       'm7']\r\n#####\r\n* 'Ionian': ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'M7']\r\n* 'Dorian': ['P1', 'M2', 'm3', 'P4', 'P5', 'M6', 'm7']\r\n* 'Phrygian': ['P1', 'm2', 'm3', 'P4', 'P5', 'm6', 'm7']\r\n* 'Lydian': ['P1', 'M2', 'M3', 'A4', 'P5', 'M6', 'M7']\r\n* 'Mixolydian': ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'm7']\r\n* 'Aeolian': ['P1', 'M2', 'm3', 'P4', 'P5', 'm6', 'm7']\r\n* 'Locrian': ['P1', 'm2', 'm3', 'P4', 'd5', 'm6', 'm7']\r\n\r\n```\r\ns1 = Scale(scale_type=\"HMin\", start_note=\"D4\")\r\nprint(s1) # prints Scale([Note(D4), Note(E4), Note(F4), Note(G4), Note(A5), Note(Bb5), Note(C#5)])\r\n```\r\nCreate a custom Scale object:\r\n```\r\ns2 = Scale(list_of_notes=[\"D4\", \"Eb4\", \"F4\", \"G4\", \"A5\", \"Bb5\", \"C#5\"])\r\nprint(s2) # prints Scale([Note(D4), Note(Eb4), Note(F4), Note(G4), Note(A5), Note(Bb5), Note(C#5)])\r\n```\r\nLoop through the notes of a scale:\r\n```\r\ns1 = Scale(scale_type=\"MinBlues\", start_note=\"C4\")\r\nfor note in s1:\r\n    print(note)\r\n```\r\n\r\nPerform logical tests:\r\n####\r\nCompares the last note of each scale, except for == and !=, which compare the every note in each scale.\r\n```\r\ns1 = Scale(scale_type=\"MinBlues\", start_note=\"C4\")\r\ns2 = Scale(scale_type=\"Lydian\", start_note=\"D4\")\r\n\r\nprint(s1 < s2) # True\r\nprint(s1 <= s2) # True\r\nprint(s1 > s2) # False\r\nprint(s1 >= s2) # False\r\nprint(s1 == s2) # False\r\nprint(s1 != s2) # True\r\n```\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ZSchweyk/ZMusicLibrary/archive/refs/tags/v1.0.6.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ZSchweyk/MusicLibrary",
    "keywords": "notes,intervals,chords,scales,custom,pre-defined,music,piano",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ZMusicLibrary",
    "package_url": "https://pypi.org/project/ZMusicLibrary/",
    "platform": "",
    "project_url": "https://pypi.org/project/ZMusicLibrary/",
    "project_urls": {
      "Download": "https://github.com/ZSchweyk/ZMusicLibrary/archive/refs/tags/v1.0.6.tar.gz",
      "Homepage": "https://github.com/ZSchweyk/MusicLibrary",
      "Portfolio Description": "https://2022mechatronicszeynschweyk.weebly.com/senior_year_capstone"
    },
    "release_url": "https://pypi.org/project/ZMusicLibrary/1.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "An extremely easy way to create notes, intervals, chords, and scales! Save yourself the trouble of music theory!",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12394515,
  "releases": {
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b77e39fde6e4e5b755531b30f9de6db85dd58290de9beb8bc3d3a82342127d83",
          "md5": "5f11c0d3791bd61d5d65b5e31a7e149f",
          "sha256": "baae58017ed9d7beb192e265aa3000f961afc5b9a760ace6a99b0705038086e7"
        },
        "downloads": -1,
        "filename": "ZMusicLibrary-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5f11c0d3791bd61d5d65b5e31a7e149f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5638,
        "upload_time": "2021-12-23T08:26:54",
        "upload_time_iso_8601": "2021-12-23T08:26:54.040010Z",
        "url": "https://files.pythonhosted.org/packages/b7/7e/39fde6e4e5b755531b30f9de6db85dd58290de9beb8bc3d3a82342127d83/ZMusicLibrary-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dcf9e2132adf50635f309d74632fb3726cc91fa02bfb7463ffa54169844b3bf",
          "md5": "f7bfdaa294fd009a1e895898b149ce65",
          "sha256": "9cfe0645c59736a051a0cfce3ed16bc14f485fd63d78e6356ecb649644578a8e"
        },
        "downloads": -1,
        "filename": "ZMusicLibrary-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "f7bfdaa294fd009a1e895898b149ce65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10278,
        "upload_time": "2021-12-24T00:46:31",
        "upload_time_iso_8601": "2021-12-24T00:46:31.145390Z",
        "url": "https://files.pythonhosted.org/packages/6d/cf/9e2132adf50635f309d74632fb3726cc91fa02bfb7463ffa54169844b3bf/ZMusicLibrary-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6dcf9e2132adf50635f309d74632fb3726cc91fa02bfb7463ffa54169844b3bf",
        "md5": "f7bfdaa294fd009a1e895898b149ce65",
        "sha256": "9cfe0645c59736a051a0cfce3ed16bc14f485fd63d78e6356ecb649644578a8e"
      },
      "downloads": -1,
      "filename": "ZMusicLibrary-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "f7bfdaa294fd009a1e895898b149ce65",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10278,
      "upload_time": "2021-12-24T00:46:31",
      "upload_time_iso_8601": "2021-12-24T00:46:31.145390Z",
      "url": "https://files.pythonhosted.org/packages/6d/cf/9e2132adf50635f309d74632fb3726cc91fa02bfb7463ffa54169844b3bf/ZMusicLibrary-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}