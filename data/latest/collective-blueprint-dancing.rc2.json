{
  "info": {
    "author": "Sylvain Boureliou",
    "author_email": "sylvain.boureliou@makina-corpus.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Plone",
      "Framework :: Zope2",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Introduction\r\n============\r\nThis package contains several blueprints for collective.transmogrifier\r\npipelines, dedicated to the Plone product collective.dancing.\r\n \r\n.. contents::\r\n\r\nCredits\r\n======================================\r\n|makinacom|_\r\n\r\n* `Planet Makina Corpus <http://www.makina-corpus.org>`_\r\n* `Contact us <mailto:python@makina-corpus.org>`_\r\n\r\n.. |makinacom| image:: http://depot.makina-corpus.org/public/logo.gif\r\n.. _makinacom:  http://www.makina-corpus.com\r\n\r\n\r\ncollective.blueprint.dancing Installation\r\n===========================================\r\n\r\n * When you're reading this you have probably already run\r\n   ``easy_install collective.blueprint.dancing``. Find out how to install\r\n   setuptools (and EasyInstall) here:\r\n   http://peak.telecommunity.com/DevCenter/EasyInstall\r\n\r\n * Create a file called ``collective.blueprint.dancing-configure.zcml`` in the\r\n   ``/path/to/instance/etc/package-includes`` directory.  The file\r\n   should only contain this::\r\n\r\n       <include package=\"collective.blueprint.dancing\" />\r\n\r\n\r\nAlternatively, if you are using zc.buildout and the plone.recipe.zope2instance\r\nrecipe to manage your project, you can do this:\r\n\r\n * Add ``collective.blueprint.dancing`` to the list of eggs to install, e.g.::\r\n\r\n    [buildout]\r\n    ...\r\n    eggs =\r\n        ...\r\n        collective.blueprint.dancing\r\n\r\n  * Tell the plone.recipe.zope2instance recipe to install a ZCML slug::\r\n\r\n        [instance]\r\n        recipe = plone.recipe.zope2instance\r\n        ...\r\n        zcml =\r\n            collective.blueprint.dancing\r\n\r\n  * Re-run buildout, e.g. with::\r\n\r\n    $ ./bin/buildout\r\n\r\nYou can skip the ZCML slug if you are going to explicitly include the package\r\nfrom another package's configure.zcml file.\r\n\r\nRequirements\r\n------------\r\n * Singing & Dancing - http://pypi.python.org/pypi/collective.dancing\r\n * tested with Plone 3.3.4\r\n\r\n\r\nDetailed Documentation\r\n======================\r\n\r\nImportSubscriber section\r\n==========================\r\n\r\nA ImportSubscriber section allows you to add subscribers to a collective.dancing\r\nchannel.\r\n\r\nThe ImportSubscriber blueprint name is\r\n``collective.blueprint.dancing.importsubscriber``.\r\n\r\nTo determine the subscriber informations, the ImportSubscriber section inspects\r\neach item and looks for the keys email, channel-id and composer-id, as described\r\nbelow. Any item missing the ``email`` keys will be skipped.\r\n\r\nIf the key ``channel-id`` is missing, the ImportSubscriber section looks for the\r\noption ``default-channel-id``. This option defaults to ``default-channel``.\r\n\r\nIf the key ``composer-id`` is missing, the ImportSubscriber section looks for\r\nthe option ``default-composer-id``. This option defaults to ``html``.\r\n\r\nFor each key, the corresponding information will be found among the following:\r\n\r\n* ``_collective.blueprint.dancing.importsubscriber_[sectionname]_[key]``\r\n* ``_collective.blueprint.dancing.importsubscriber_[key]``\r\n* ``_[sectionname]_[key]``\r\n* ``_[key]``\r\n\r\nwhere ``[sectionname]`` is replaced with the name given to the current section,\r\nand ``[key]`` is replaced by ``email``, ``channel-id`` or ``composer-id``. This\r\nallows you to target the right section precisely if needed.\r\n\r\nAlternatively, you can specify what key to use for each information by\r\nspecifying the``[key]-key`` option, which should be a list of keys to try (one\r\nkey per line; use a ``re:`` or ``regexp:`` prefix to specify regular\r\nexpressions).\r\n\r\n    >>> import pprint\r\n\r\n    >>> importsubscriber = \"\"\"\r\n    ... [transmogrifier]\r\n    ... pipeline =\r\n    ...     source\r\n    ...     importsubscriber\r\n    ...     importsubscriber2\r\n    ...     printer\r\n    ...\r\n    ... [source]\r\n    ... blueprint = collective.blueprint.dancing.tests.importsubscribersource\r\n    ...\r\n    ... [importsubscriber]\r\n    ... blueprint = collective.blueprint.dancing.importsubscriber\r\n    ...\r\n    ... [importsubscriber2]\r\n    ... blueprint = collective.blueprint.dancing.importsubscriber\r\n    ... default-channel-id=mychannel\r\n    ... default-composer-id=mycomposer\r\n    ...\r\n    ... [printer]\r\n    ... blueprint = collective.transmogrifier.sections.tests.pprinter\r\n    ... \"\"\"\r\n    >>> registerConfig(u'collective.blueprint.dancing.tests.importsubscriber',\r\n    ...                importsubscriber)\r\n\r\n    >>> transmogrifier(u'collective.blueprint.dancing.tests.importsubscriber')\r\n    [('_email', 'foo@foo.com')]\r\n    [('_email', 'bar@bar.com')]\r\n    [('_email', 'existing@email.com')]\r\n\r\n    >>> pprint.pprint(plone.subscribers)\r\n    (u'foo@foo.com -channel:default-channel - composer:html',\r\n     u'foo@foo.com -channel:mychannel - composer:mycomposer',\r\n     u'bar@bar.com -channel:default-channel - composer:html',\r\n     u'bar@bar.com -channel:mychannel - composer:mycomposer')\r\n\r\n\r\nChange History\r\n=====================\r\n\r\n(name of developer listed in brackets)\r\n\r\n0.2 - (unreleased)\r\n--------------------\r\n\r\n0.1 - 2009-02-10\r\n------------------\r\n- Added ImportSubscriber section. See importsubscriber.txt.\r\n  [sylvainb]\r\n\r\n\r\nDownload\r\n==========\r\n`collective.blueprint.dancing-0.1.zip\r\n<http://pypi.python.org/packages/source/c/collective.blueprint.dancing/collective.blueprint.dancing-0.1.zip#md5=5c08a7a8962f75117b222aa2ed8f7541>`_\r\n(`md5\r\n<http://pypi.python.org/pypi?:action=show_md5&digest=5c08a7a8962f75117b222aa2ed8f7541>`_)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.makina-corpus.com",
    "keywords": "plone dancing blueprints transmogrifier",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "collective.blueprint.dancing",
    "package_url": "https://pypi.org/project/collective.blueprint.dancing/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/collective.blueprint.dancing/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://www.makina-corpus.com"
    },
    "release_url": "https://pypi.org/project/collective.blueprint.dancing/0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "collective.dancing blueprints for collective.transmogrifier pipelines by Makina Corpus",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 752386,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd9581e0422bbf613d0e1e70cee274009ffcd1d6b91d243ac7d976f2e7550980",
          "md5": "5c08a7a8962f75117b222aa2ed8f7541",
          "sha256": "774c1054b69fe271fe0f5fe0388caff8d34b1aad503468d79cc183ba17f2bd8e"
        },
        "downloads": -1,
        "filename": "collective.blueprint.dancing-0.1.zip",
        "has_sig": false,
        "md5_digest": "5c08a7a8962f75117b222aa2ed8f7541",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19855,
        "upload_time": "2010-02-10T17:06:47",
        "upload_time_iso_8601": "2010-02-10T17:06:47.816191Z",
        "url": "https://files.pythonhosted.org/packages/bd/95/81e0422bbf613d0e1e70cee274009ffcd1d6b91d243ac7d976f2e7550980/collective.blueprint.dancing-0.1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": []
  },
  "urls": [],
  "vulnerabilities": []
}