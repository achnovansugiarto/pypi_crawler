{
  "info": {
    "author": "Artak",
    "author_email": "artaksafaryanc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Python data validation library\n\n## Table of Contents\n\n- [Introduction](#introduction)\n- [Installation](#installation)\n- [Usage](#usage)\n    - [Basic Usage](#basic-usage)\n- [Available rules](#available-rules)\n  - [required](#required)\n  - [required_with](#required_withfoobar)\n  - [required_with_all](#required_with_allfoobar)\n  - [required_without](#required_withoutfoobar)\n  - [required_without_all](#required_without_allfoobar)\n  - [required_if](#required_ifanotherfieldvalue)\n  - [required_unless](#required_unlessanotherfieldvalue)\n  - [present](#present)\n  - [email](#email)\n  - [url](#url)\n  - [ip](#ip)\n  - [ipv4](#ipv4)\n  - [ipv6](#ipv6)\n  - [re (regex)](#repattern)  \n  - [size](#sizevalue)\n  - [numeric](#numeric)\n  - [integer](#integer)\n  - [string](#string)  \n  - [list](#list)\n  - [dict](#dict)\n  - [between](#betweenminmax)\n  - [in](#infoobar)\n  - [nullable](#nullable)  \n  - [min](#minvalue)\n  - [max](#maxvalue)\n  - [gt](#gtother_field)\n  - [gte](#gteother_field)\n  - [lt](#ltother_field)\n  - [lte](#lteother_field)\n- [Retrieving data](#retrieving-data)\n- [Extending Validator](#extending-validator)\n  - [Custom Validation using callback](#custom-validation-using-callback)\n  - [Custom Validation using RuleContract](#custom-validation-using-rulecontract)\n- [Examples](https://github.com/holoyan/python-data-validation/tree/master/examples)  \n- [Credits](#credits)  \n- [License](#license)  \n\n## Introduction\n\n`piva` is a simple and powerful library for data validation\n\n```python\nfrom pyva import Validator\n\nvalidation = Validator(\n    {\n        'name': 'John',\n        'age': 25\n    },\n    {\n        'name':'required',\n        'age':' required|min:18'\n    }\n)\n\nif validation.passes():\n    # do something cool\n\n```\n\n## Installation\n\n```pip install pyva```\n\n## Usage\n\n### Basic Usage\n\n```python\n\nfrom pyva import Validator\n\ndata = {\n    'user': {\n        'name': 'John',\n        'email': 'johndoe@example.com',\n        'age': 25\n    }\n}\n\nrules = {\n    'user': 'required|dict',\n    'user.name': 'required|min:3|max:16', # must be at least 3 chars and not more than 16 (16 included )\n    'user.email': 'required',\n    'user.age': 'required|min:18|max:100',\n}\n\nv = Validator(data, rules)\n\nif v.passes():\n    validated_data = v.validated()\n    print(validated_data)\n\n# or check if it fails\nif v.fails():\n    print(v.failed_rules)\n\n\n# You can use list of rules\n\nrules = {\n        'user.age': ['required', 'min:18', 'max:100'],\n}\nv = Validator(data, rules)\n\n\n# event more, you can make rule params as a list\nrules = {\n      'user.age': [\n        'required',\n        ['min', 18], # first item of list must be rule, rest are params\n        ['max', 100] # 'max:100' this both are same\n      ],\n}\n\n```\n\n## Available Rules\n\n### required\n\nThe field under validation must be present in the input data and not empty. A field is considered \"empty\" if one of the following conditions are true:\n\n* The value is None.\n* The value is an empty string.\n* The value is an empty list,dict... or object that implements \\_\\_len\\_\\_ method and len(obj) < 1.\n\n### required_with:foo,bar,...\n\nThe field under validation must be present and not empty only if any of the other specified fields are present and not empty.\n\n### required_with_all:foo,bar,...\n\nThe field under validation must be present and not empty **only if all** of the other specified fields are present and not empty.\n\n### required_without:foo,bar,...\n\nThe field under validation must be present and not empty only when any of the other specified fields are empty or not present.\n\n### required_without_all:foo,bar,...\n\nThe field under validation must be present and not empty only when **all** of the other specified fields are empty or not present.\n\n### required_if:anotherfield,value,...\n\nThe field under validation must be present and not empty if the anotherfield field is equal to any value.\n\nIf you would like to construct more complex condition see [custom rules](#extending-validator)\n\n### required_unless:anotherfield,value,...\n\nThe field under validation must be present and not empty unless the anotherfield field is equal to any value.\n\n### present\n\nThe field under validation must be present in the input data but can be empty.\n\n### email\n\nThe field under validation must be formatted as an email address\n\ncheck some valid/invalid email [examples](https://github.com/holoyan/python-data-validation/tree/master/examples/emailChecking.py)\n\n**if this does not fit to your requirements check** [extending validator](#extending-validator) section\n\n\n### url\n\nThe field under validation must be a valid URL.\n\n### ip\n\nThe field under validation must be an IP address.\n\n### ipv4\n\nThe field under validation must be an IPv4 address.\n\n### ipv6\n\nThe field under validation must be an IPv6 address.\n\n### re:pattern\n\nThe field under validation must match the given regular expression.\n\n## *Note*\n**When using the re patterns, it may be necessary to specify rules in a list instead of using | delimiters, especially if the regular expression contains a | character.**\n\n### size:value\n\nThe field under validation must have a size matching the given value. \n* For string data, value corresponds to the number of characters. \n* For numeric data, value corresponds to a given integer value\n* For list,dict,tuple..., size corresponds to the len of the obj\n\n### numeric\n\nThe field under validation must be instance of `numbers.Number` or numeric string (strings like '5.6' considered as numeric).\n\n### integer\n\nThe field under validation must be an integer.\n\n### string\n\nThe field under validation must be a string.\n\n### list\n\nThe field under validation must be instance of list.\n\n### dict\n\nThe field under validation must be instance of dict.\n\n### between:min,max\n\nThe field under validation must have a size between the given min and max.\nStrings, numerics, list, dict... are evaluated in the same fashion as the [size](#sizevalue) rule.\n\n### in:foo,bar,...\n\nThe field under validation must be included in the given list of values.\n\n### nullable\n\nThe field under validation may be `None`.\n\n### min:value\n\nThe field under validation must have a minimum value. \n\n### max:value \n\nThe field under validation must be less than or equal to a maximum value.\n\n\nThe field under validation must be instance of dict.\n\n### gt:other_field\n\nThe field under validation must be greater than the given field. The two fields must be of the same type.\n\n### gte:other_field\n\nThe field under validation must be greater than or equal to the given field. The two fields must be of the same type.\n\n### lt:other_field\n\nThe field under validation must be less than the given field. The two fields must be of the same type. \n\n### lte:other_field\n\nThe field under validation must be less than or equal to the given field. The two fields must be of the same type. \n\n\n### Retrieving data\n\nTo retrieve the validated input data call `validated()` method\n\n```python\n\nfrom pyva import Validator\n\ndata = {\n    'user': {\n            'name': 'John',\n            'age': 28\n        }\n}\n\nrules = {\n    'user': 'dict',\n    'user.name': 'required|min:3',\n    'user.age': 'required|min:18|max:100',\n}\n\nvalidation = Validator(data, rules)\nif validation.passes():\n    print(validation.validated())  # get validated data\n\n```\n\n\n## Extending Validator\n\n### Custom Validation using callback:\n\n```python\n\nfrom pyva import Validator\n\ndef is_odd(attribute, value, fail):\n    \n    if value % 2 != 1:\n        fail(\"{} must be odd \".format(attribute))\n        \ndata = {\n    'length': 20\n}\n\nrules = {\n    'length': ['required', is_odd] \n}\n\nv = Validator(data, rules)\n\nprint(v.passes())\n\n# or check if it fails\nif v.fails():\n    print(v.failed_rules) # length must be odd\n\n```\n\nWhat if you want more powerful validation, well then check [Custom Validation using RuleContract](#custom-validation-using-ruleContract)\n\n\n### Custom Validation using RuleContract\n\nFor this you need to import `RuleContract`. \nYour class must implement `passes()` method and return `True` or `False`\n\n```python\n\nfrom pyva import RuleContract\nfrom pyva import Validator\n\n# your class must implement passes() method\n\nclass EndsWith(RuleContract):\n\n    def __init__(self, end_string):\n        self.end_string = end_string\n\n    def passes(self, attribute, value):\n        return value.endswith(self.end_string)\n\n    def message(self, attribute, value):\n        return \"{} must end with '{}'\".format(attribute, self.end_string)\n\n\ndata = {\n    'company_name': 'Accme company'\n}\n\nrules = {\n    'company_name': [\n        'required',\n        'string',\n        EndsWith('company')\n    ]\n}\n\nv = Validator(data, rules)\nprint(v.passes())\n\n```\n\n## Credits\n\n- Inspired by Laravel's [validation syntax](https://laravel.com/docs/8.x/validation)\n\n## License\n\nLicensed under the MIT  license.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/holoyan/python-data-validation",
    "keywords": "data,validation,validator,data validator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyva",
    "package_url": "https://pypi.org/project/pyva/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyva/",
    "project_urls": {
      "Homepage": "https://github.com/holoyan/python-data-validation"
    },
    "release_url": "https://pypi.org/project/pyva/0.4.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple and flexible python data validation library",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9936970,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a45047cd42df9a0f2d8e87c4b9d763e3370268c28cf5e272919d10d3c72fc23",
          "md5": "f482021cb7372c2504ba33bf000691f1",
          "sha256": "3fdb1adda89319c82413b38e524c846ef67e2e6840e2334b5977a658ebf00120"
        },
        "downloads": -1,
        "filename": "pyva-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f482021cb7372c2504ba33bf000691f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4205,
        "upload_time": "2021-03-03T14:07:46",
        "upload_time_iso_8601": "2021-03-03T14:07:46.673895Z",
        "url": "https://files.pythonhosted.org/packages/4a/45/047cd42df9a0f2d8e87c4b9d763e3370268c28cf5e272919d10d3c72fc23/pyva-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddcebfaaa986662b195b80b899b16404dbffa5ac6b462a06044670140865355b",
          "md5": "e85ad89cda41a50353afa4e9070c6550",
          "sha256": "6d4fe76e6a3b1595bdcc7c372e6d1365596d8edbed34f7d9b305ddf2fbbda1f4"
        },
        "downloads": -1,
        "filename": "pyva-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e85ad89cda41a50353afa4e9070c6550",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4858,
        "upload_time": "2021-03-15T11:03:47",
        "upload_time_iso_8601": "2021-03-15T11:03:47.705653Z",
        "url": "https://files.pythonhosted.org/packages/dd/ce/bfaaa986662b195b80b899b16404dbffa5ac6b462a06044670140865355b/pyva-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "325015e17357717e5e2bfc8a6b988336a7895990c356117b07386464e55a4b85",
          "md5": "6b774b9b7e77f3e6917a8ad6f02a3330",
          "sha256": "2f2e52d8b7e1883c742ae579a99a94f3e0d5b44ded2960667db9365a89464295"
        },
        "downloads": -1,
        "filename": "pyva-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6b774b9b7e77f3e6917a8ad6f02a3330",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6205,
        "upload_time": "2021-03-24T10:24:05",
        "upload_time_iso_8601": "2021-03-24T10:24:05.049298Z",
        "url": "https://files.pythonhosted.org/packages/32/50/15e17357717e5e2bfc8a6b988336a7895990c356117b07386464e55a4b85/pyva-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "993dae8e44447af95e449d2c7c5096398fce35dd11fcc5d8bcb2bf7a00306bb5",
          "md5": "c81e8189c46f041e4d6423fb5203f631",
          "sha256": "92a196eb471b2d286be3f3c581390c58d3e5dab793bc053afdf5786789ee795c"
        },
        "downloads": -1,
        "filename": "pyva-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c81e8189c46f041e4d6423fb5203f631",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16183,
        "upload_time": "2021-03-31T13:47:58",
        "upload_time_iso_8601": "2021-03-31T13:47:58.194779Z",
        "url": "https://files.pythonhosted.org/packages/99/3d/ae8e44447af95e449d2c7c5096398fce35dd11fcc5d8bcb2bf7a00306bb5/pyva-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd8540e756be5ca5ff3d3fe3fc5e1594da238b3719e8b29f98437d570ced7ac0",
          "md5": "fdc6d657f9118607223b3e5464289209",
          "sha256": "e5ce9855cbaf190778d3e62e3ddcf4c684fa7b027dc573e20c312c20458868fc"
        },
        "downloads": -1,
        "filename": "pyva-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fdc6d657f9118607223b3e5464289209",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16208,
        "upload_time": "2021-03-31T14:36:38",
        "upload_time_iso_8601": "2021-03-31T14:36:38.331416Z",
        "url": "https://files.pythonhosted.org/packages/bd/85/40e756be5ca5ff3d3fe3fc5e1594da238b3719e8b29f98437d570ced7ac0/pyva-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd8540e756be5ca5ff3d3fe3fc5e1594da238b3719e8b29f98437d570ced7ac0",
        "md5": "fdc6d657f9118607223b3e5464289209",
        "sha256": "e5ce9855cbaf190778d3e62e3ddcf4c684fa7b027dc573e20c312c20458868fc"
      },
      "downloads": -1,
      "filename": "pyva-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fdc6d657f9118607223b3e5464289209",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16208,
      "upload_time": "2021-03-31T14:36:38",
      "upload_time_iso_8601": "2021-03-31T14:36:38.331416Z",
      "url": "https://files.pythonhosted.org/packages/bd/85/40e756be5ca5ff3d3fe3fc5e1594da238b3719e8b29f98437d570ced7ac0/pyva-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}