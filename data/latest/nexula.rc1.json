{
  "info": {
    "author": "Haryo A W",
    "author_email": "haryo97@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Nexula (Nexus Lab)\nOpen Source Benchmark Toolkit (Still in development). Easy, Extendable and Reproducible Toolkit for benchmarking NLP problems.\nCurrently still has minimum features.\n\nExpect a lot of bugs in the source code :).\n\n# How to install\n```\npip install nexula\n```\nThe installation above will not install deep learning packages.\nIf you want to use Deep Learning, install `pytorch` and `torchtext` manually.\n\n## Overview\nThis library want to overcome the needs on searching the code of several \nMachine Learning model on separate site on benchmark or testing several models.\n\nHave you ever benchmarked several machine learning models and need to \ngo to many websites to collect the code. After that, you need to run \nand configure each of them one by one to benchmark the result. For us, this is really a pain in the neck.  \n\nWe want this library make us easier to benchmark and find all famous models that is ready to be benchmarked.\nWe also want this library EXTENDABLE (can be customized by user) and easier to REPRODUCE. We want to make sure \nthe library is easy to use.\n\nFor now, this library is far from that dream, but we will achieve it. \n\n# Quickstart\nSee `examples` folder. There will be a README.md that should guide you.\n\n# CLI Command\n```bash\n  -h, --help            show this help message and exit\n  -r RUN_YAML, --run-yaml RUN_YAML\n                        Yaml file as a command of the nexula\n  -v, --verbose         Add verbosity (logging from `info` to `debug`)\n  -c CUSTOM_MODULE, --custom-module CUSTOM_MODULE\n                        Add custom module directory (your custom code in a code)\n```\n\n## Example\nYour working directory:\n```\nsample_run.yaml\ncustom_nexula/custom_preprocessing.py\n```\nRun yaml and include your custom code.\n```\npython -r sample_run.yaml -c custom_nexula\n```\n# Run as Module/API\nTo be denounced\n\n# Features\n![Features](images/nexus.png)\nNexula uses features mostly from:\n* scikit-learn\n* pytorch-lightning\n\nNexula only have these choices on how to setup the data:\n* dataset input should be separated into train, dev, test\n\n## Pipeline\nWe separate the pipeline process into 2 steps\n* Create dataloader for the input of the model\n* Training and predict the model\n\nWe separate the model type into two kinds\n* Boomer (Shallow Learning) by using scikit-learn\n* Millenial (Deep Learning) by using pytorch (wrapped by pytorch-lightning)\n\n## Data Preprocessing\n* Lowercase (`nexus_basic_preprocesser`) : Lowercase the input.\n\n## Data Feature Representer Boomer\n* TF-IDF (`nexus_tf_idf_representer`) : Use TF-IDF vectorizer on training dataset\n\n## Data Feature Representer TorchText\n* TorchText (`nexus_millenial_representer`) : Use TorchText on generating sequence of text in index.\n\n## Boomer Model\nAll of them are imported from `scikit-learn` packages.\n* nexus_boomer_logistic_regression\n* nexus_boomer_linear_svc\n* nexus_boomer_gaussian_process\n* nexus_boomer_random_forest\n* nexus_boomer_ada_boost\n* nexus_boomer_multinomial_nb\n* nexus_boomer_quadratic_discriminant\n\n## Millenial Model\nAll of them are coded in this repository.\n* nexus_millenial_ccn1d_classification\n* nexus_millenial_lstm_classification\n\n## Run CLI\n* Run yaml as the process controller. Below is the yaml example. See Command Explanation.md in examples \nfolder on how to read the yaml.\n```yaml\nnexula_data:\n  data_choice_type: 'manual_split'\n  data_reader_type: 'read_csv'\n  data_reader_args:\n    train:\n      file: 'tests/dummy_data/train.csv'\n    dev:\n      file: 'tests/dummy_data/dev.csv'\n    test:\n      file: 'tests/dummy_data/test.csv'\n  data_pipeline:\n    boomer:\n      data_representer_func_list_and_args:\n        - process: 'nexus_tf_idf_representer'\n\nnexula_train:\n  models:\n    - model: 'nexus_boomer_logistic_regression'\n  callbacks:\n    - callback: 'model_saver_callback'\n      params:\n        output_dir: 'output/integration_test/'\n    - callback: 'benchmark_reporter_callback'\n      params:\n        output_dir: 'output/integration_test/'\n```\n\n## Customizable and Extendable\nFor every step in the pipeline, you can specify your own process.\nYou must extend the abstract class in `nexula.nexula_inventory.inventory_base`.\n```python\nfrom nexula.nexula_inventory.inventory_base import NexusBaseDataInventory\nimport numpy as np\n\n\nclass AddNewData(NexusBaseDataInventory):\n\n    name = 'add_new_data2'\n\n    def __init__(self, new_data_x='this is a new data', new_data_y=1, **kwargs):\n        super().__init__(**kwargs)\n        self.new_data_x = new_data_x\n        self.new_data_y = new_data_y\n        self.model = None\n\n    def get_model(self):\n        return self.model\n\n    def __call__(self, x, y, fit_to_data=True, *args, **kwargs):\n        \"\"\"\n        Lowercase the text\n        Parameters\n        ----------\n        x\n        y\n        fit_to_data\n        args\n        kwargs\n\n        Returns\n        -------\n\n        \"\"\"\n        x = np.concatenate(x, [self.new_data_x])\n        y = np.concatenate(y, [self.new_data_y])\n        return x, y\n```\nYour preprocessing can be included into yaml (in `nexula_data` part)\n```yaml\nnexula_data:\n  data_choice_type: 'manual_split'\n  data_reader_type: 'read_csv'\n  data_reader_args:\n    train:\n      file: 'tests/dummy_data/train.csv'\n    dev:\n      file: 'tests/dummy_data/dev.csv'\n    test:\n      file: 'tests/dummy_data/test.csv'\n  data_pipeline:\n    boomer:\n      data_preprocesser_func_list_and_args:\n        - process: 'add_new_data2'\n          params:\n            init:\n              new_data_x: 'testing'\n              new_data_y: 0\n      data_representer_func_list_and_args:\n        - process: 'nexus_tf_idf_representer'\n```\n\n# Callbacks\n* Model Saver (`model_saver_callback`) : Save the model after fitting into the training dataset\n* Benchmark Reporter Callback (`benchmark_reporter_callback`) : Output the benchmark result. The benchmark result contains:\n    * Metrics choice (currently only supports F1 Score and Accuracy Score)\n    * Inference runtime\n    * Training runtime\n* They are also extendable!\n\n# End\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/haryoa/nexus",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nexula",
    "package_url": "https://pypi.org/project/nexula/",
    "platform": "",
    "project_url": "https://pypi.org/project/nexula/",
    "project_urls": {
      "Homepage": "https://github.com/haryoa/nexus"
    },
    "release_url": "https://pypi.org/project/nexula/0.0.1/",
    "requires_dist": [
      "joblib (==0.14.1)",
      "scikit-learn (==0.22.2.post1)",
      "colorlog (==4.1.0)",
      "nltk (==3.5)",
      "pyyaml (==5.3.1)",
      "pandas (==1.0.1)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "(In development) Tools on Benchmarking Machine Learning Toolkit",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7171258,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9522ecb5fb7e55f2b7a58306f3f9e84d195a7ba505b0b7f0c9ad40f2a66aa389",
          "md5": "c1241d072ca0ff4df536acd3d0ff803e",
          "sha256": "61cdc9570f48a10f3f379fea2b2a61febf69b11b6e1f4a7164ff2368cb83f1a3"
        },
        "downloads": -1,
        "filename": "nexula-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1241d072ca0ff4df536acd3d0ff803e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 39972,
        "upload_time": "2020-05-05T11:09:17",
        "upload_time_iso_8601": "2020-05-05T11:09:17.931353Z",
        "url": "https://files.pythonhosted.org/packages/95/22/ecb5fb7e55f2b7a58306f3f9e84d195a7ba505b0b7f0c9ad40f2a66aa389/nexula-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f9b0beff6802887fb29333aa6c63e9a4d6692b7a571715f40e9f8befca7452d",
          "md5": "299a2734a50e87d758e7751e9c723891",
          "sha256": "068f9291d22ebc5bf0a3f7d21ea78a78d55dd54f2f1f9512eb2cb2665d60f935"
        },
        "downloads": -1,
        "filename": "nexula-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "299a2734a50e87d758e7751e9c723891",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 27740,
        "upload_time": "2020-05-05T11:09:20",
        "upload_time_iso_8601": "2020-05-05T11:09:20.555512Z",
        "url": "https://files.pythonhosted.org/packages/2f/9b/0beff6802887fb29333aa6c63e9a4d6692b7a571715f40e9f8befca7452d/nexula-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9522ecb5fb7e55f2b7a58306f3f9e84d195a7ba505b0b7f0c9ad40f2a66aa389",
        "md5": "c1241d072ca0ff4df536acd3d0ff803e",
        "sha256": "61cdc9570f48a10f3f379fea2b2a61febf69b11b6e1f4a7164ff2368cb83f1a3"
      },
      "downloads": -1,
      "filename": "nexula-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c1241d072ca0ff4df536acd3d0ff803e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 39972,
      "upload_time": "2020-05-05T11:09:17",
      "upload_time_iso_8601": "2020-05-05T11:09:17.931353Z",
      "url": "https://files.pythonhosted.org/packages/95/22/ecb5fb7e55f2b7a58306f3f9e84d195a7ba505b0b7f0c9ad40f2a66aa389/nexula-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f9b0beff6802887fb29333aa6c63e9a4d6692b7a571715f40e9f8befca7452d",
        "md5": "299a2734a50e87d758e7751e9c723891",
        "sha256": "068f9291d22ebc5bf0a3f7d21ea78a78d55dd54f2f1f9512eb2cb2665d60f935"
      },
      "downloads": -1,
      "filename": "nexula-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "299a2734a50e87d758e7751e9c723891",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 27740,
      "upload_time": "2020-05-05T11:09:20",
      "upload_time_iso_8601": "2020-05-05T11:09:20.555512Z",
      "url": "https://files.pythonhosted.org/packages/2f/9b/0beff6802887fb29333aa6c63e9a4d6692b7a571715f40e9f8befca7452d/nexula-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}