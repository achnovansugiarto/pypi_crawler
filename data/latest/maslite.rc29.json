{
  "info": {
    "author": "root-11",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![Python package](https://github.com/root-11/maslite/actions/workflows/python-test.yml/badge.svg)](https://github.com/root-11/maslite/actions/workflows/python-app.yml)\n[![Code coverage](https://codecov.io/gh/root-11/maslite/branch/master/graph/badge.svg)](https://codecov.io/gh/root-11/maslite)\n[![Downloads](https://pepy.tech/badge/maslite)](https://pepy.tech/project/maslite)\n[![Downloads](https://pepy.tech/badge/maslite/month)](https://pepy.tech/project/maslite/month)\n[![PyPI version](https://badge.fury.io/py/maslite.svg)](https://badge.fury.io/py/maslite)\n\n# MASlite\nA multi-agent platform contrived by [Bjorn Madsen](https://uk.linkedin.com/in/bmadsen)\n\nAll right reserved &copy; 2016-2021. MIT-license. \nAll code has been written by the author in isolation and any similarity \nto other systems is purely coincidental. \n\n--------------\n\n**New in version 2021.2.2+**\n\n- dropping support for python 3.5. \n\n- subscribe now permits topic and agent id to limit the messages received.\n\n- copy does no longer use deepcopy and will raise if you don't have a copy method!  \n  Let me emphasise: All messages must have a `copy()` method.\n\n- The `Scheduler` class must be initiated with one of two modes: real-time and simulated time.\n  - real-time uses the clock / time.time() **(default)**\n  - simulated time uses a jumping clock. \n\n- `Agent.set_alarm(..., relative=True, ....)`   \n  defaults to True as most use cases use the alarm as \"check again in x seconds\"\n  \n- `Agent.list_alarms(receiver=None)`\n  returns a list of (time, alarm message) set for the receiver.\n  > Allows, for example, an agent A to read whether an alarm has been set for agent B, and\n  > thereby refrain from setting an additional alarm.\n\n- broadcasts are subscription based. To have broadcast-like methods, each agent must subscribe first.\n  By default agents subscribe to their uuid and class name. But beware: \n  \n  > Some users have been surprised that the broadcasting method could overflow their memory usage, so this is a safeguard. \n  In the auction demo, 1000 sellers sending 1 offer to each of 1000 buyers which generates 1,000,000 messages. \n  Instead of keeping a pool of 1,000,000 messages, where most are irrelevant, the new subscribe system, encourages \n  that the developer actively add and remove subscriptions, for example by subscribing to NewSeller announcements, \n  and afterwards only subscribe to specific agents that have offered prices within budget (or some other criteria).\n\n\n--------------\n\n#### MASlite explained in 60 seconds:\n\nMASlite is a simle python module for creating multi-agent simulations.\n\n- _Simple_ API: Only 3 modules to learn: Scheduler, Agent & Agent message\n- _Fast_: Handles up to 270 million messages per second\n- _Lightweight_: 52kB.\n\nIt only has 3 components:\n\n- The scheduler (main loop)\n  - handles pause and proceed with a single call.\n  - assures repeatability in execution, which makes agents easy to debug.\n  - handles up to 270 million messages per second.\n\n- Agent's \n\n  - are python classes that have setup(), update() and teardown() methods that can be customized. \n  - can exchange messages using send() and receive().\n  - can subscribe/unsubscribe to message classes.\n  - have clocks and can set alarms.\n  - can be tested individually.\n  - can have independent I/O/Database interaction.\n  \n- Messages\n  - that have sender and receiver enable direct communication\n  - that have topics and no receiver are treated as broadcasts, and sent to subscribers.\n  \nThe are plenty of use-cases for MASlite:\n\n- Prototyping MASSIVE&trade; type games.\n- Creating data processing pipeline\n- Optimisation Engine, for:\n  - Scheduling (using Bjorn Madsen's distributed scheduling method)\n  - Auctions (using Dimtry Bertsekas alternating iterative auction)\n \n-------------------\n\nAll the user needs to worry about are the protocols of interaction, \nwhich conveniently may be summarised as:\n\n1. Design the messages that an agent will send or receive as regular \npython objects that inherit the necessary implementation details from \na basic `AgentMessage`. The messages must have an unambiguous `topic`.\n2. Write the functions that are supposed to execute once an agent \n receives one of the messages.\n3. Update the agents operations (`self.operations`) with a dictionary\nthat describes the relationship between `topic` and `function`.\n4. Write the update function that maintains the inner state of the agent\nusing `send` to send messages, and using `receive` to get messages.\n\nThe user can thereby create an agent using just:\n\n    class HelloMessage(AgentMessage):\n        def __init__(self, sender, receiver)\n            super().__init__(sender=sender, receiver=receiver)\n    \n    \n    class myAgent(Agent):\n        def __init__(self):\n            super().__init__()\n            self.operations[HelloMessage.__name__] = self.hello\n        \n        def update(self):\n            while self.messages:\n                msg = self.receive()\n                operation = self.operations.get(msg.topic))\n                if operation is not None:\n                    operation(msg)\n                else:\n                    self.logger.debug(\"%s: don't know what to do with: %s\" % (self.uuid), str(msg)))\n                    \n        def hello(self, msg)\n            print(msg)\n\n\nThat simple!\n\nThe dictionary `self.operations` which is inherited from the `Agent`-class\nis updated with `HelloMessage.__name__` pointing to the function `self.hello`. \n`self.operations` thereby acts \nas a pointer for when a `HelloMessage` arrives, so when the agents \nupdate function is called, it will get the topic from the message's and \npoint to the function `self.hello`, where `self.hello` in this simple\nexample just prints the content of the message. \n\nMore nuanced behaviour, can also be embedded without the user having\nto worry about any externals. For example if some messages take \nprecedence over others (priority messages), the inbox should be emptied \nin the beginning of the update function for sorting. \n\nHere is an example where some topics are treated with priority over \nothers:\n\n    class AgentWithPriorityInbox(Agent):\n        def __init__(self):\n            super().__init__()\n            self.operations.update({\"1\": self.some_priority_function, \n                                    \"2\": self.some_function, \n                                    \"3\": self.some_function,  # Same function for 2 topics.! \n                                    \"hello\": self.hello, })\n            self.priority_topics = [\"1\",\"2\",\"3\"]\n            self.priority_messages = deque()  # from collections import deque\n            self.normal_messages = deque()    # deques append and popleft are threadsafe.\n    \n        def update(self):\n            # 1. Empty the inbox and sort the messages using the topic:\n            while self.messages:\n                msg = self.receive()\n                if msg.topic in self.priority_topics:\n                    self.priority_messages.append(msg)\n                else:\n                    self.normal_messages.append(msg)\n            \n            # 2. We've now sorted the incoming messages and can now extend\n            # the priority message deque with the normal messages:\n            self.priority_messages.extend(normal_messages)\n            \n            # 3. Next we process them as usual:\n            while self.priority_messages:\n                msg = self.priority_messages.popleft()\n                operation = self.operations.get(msg.topic)\n                if operation is not None:\n                    operation(msg)\n                else:\n                    ...\n\nThe only thing which the user needs to worry about, is that the update\nfunction cannot depend on any externals. The agent is confined to\nsending (`self.send(msg)`) and receiving (`msg = self.receive()`) \nmessages which must be processed within the function `self.update`.\nAny responses to sent messages will not happen until the agent runs\nupdate again.\n\nIf any state needs to be stored within the agent, such as for example\nmemory of messages sent or received, then the agents `__init__` should\ndeclare the variables as class variables and store the information.\nCalls to databases, files, etc. can of course happen, including the usage\nof `self.setup()` and `self.teardown()` which are called when the agent\nis, respectively, started or stopped. See the boiler-plate (below) for a more \ndetailed description. \n \n### Boilerplate\n\nThe following boiler-plate allows the user to manage the whole lifecycle\nof an agent, including:\n\n1. add variables to `__init__` which can store information between updates.\n2. react to topics by extending `self.operations`\n2. extend `setup` and `teardown` for start and end of the agents lifecycle.\n4. use `update` with actions before(1), during(2) and after(3) reading messages.\n\nThere are no requirements, for using all functions. The boiler-plate merely\nseeks to illustrate typical usage.\n\nThere are also no requirements for the agent to be programmed in procedural,\nfunctional or object oriented manner. Doing that is completely up to the \nuser of MASlite.\n\n    class Example(Agent):\n        def __init__(self, db_connection):\n            super().__init__()\n            # add variables here.\n            self._is_setup = False\n            self.db_connection = db_connection\n            \n            # remember to register topics and their functions:\n            self.operations.update({\"topic x\": self.x,\n                                    \"topic y\": self.y,\n                                    \"topic ...\": self....})\n            \n        def update(self):\n            assert self._is_setup\n\n            # do something before reading messages\n            self.action_before_processing_messages()\n        \n            # read the messages\n            while self.messages:\n                msg = self.receive()\n                \n                # react immediately to some messages:\n                operation = self.operations.get(msg.topic)\n                if operation is not None:\n                    operation(msg)\n            \n            # react after reading all messages:\n            self.action_after_processing_all_messages()\n        \n        # Functions added by the user that are not inherited from the \n        # `Agent`-class. If the `update` function should react on these,\n        # the topic of the message must be in the self.operations dict.\n        \n        def setup(self):\n            self._is_setup = True\n            # add own setup operations here.\n            self.subscribe(self.__class__.__name__)\n        \n        def action_before_processing_messages(self)\n            # do something.\n            \n        def action_after_processing_all_messages(self)\n            # do something. Perhaps send a message to somebody that update is done?\n            msg = DoneMessages(sender=self, receiver=SomeOtherAgent)\n            self.send(msg)\n        \n        def x(msg):\n            # read msg and send a response\n            from_ = msg.sender\n            response = SomeMessage(sender=self, receiver=from_) \n            self.send(response)\n        \n        def y(msg):\n            with db_connection as db.:\n                db.somefield.update(time.time())\n                                \n        def teardown(self):\n            # add own teardown operations here.\n            self.db_connection.close()\n        \n\n### Messages\n\nMessages are objects and are required to use the base class `AgentMessage`.\n\nWhen agents receive messages they should be interpreted by their topic, which\nshould (by convention) also be the class name of the message. Practice has shown\nthat there are no obvious reasons where this convention shouldn't apply, so \nmessages which don't have a topic declared explicitly inherit the class name. \nAn example is shown below:\n\n    >>> from maslite import AgentMessage\n    >>> class MyMsg(AgentMessage):\n    ...     def __init__(self, sender, receiver):\n    ...         super().__init__(sender=sender, receiver=receiver)\n    ...\n    \n    >>> m = MyMsg(sender=1, receiver=2)\n    >>> m.topic\n    \n    'MyMsg'\n\nAdding functions to messages. Below is an example of a message with it's own\nfunction(s): \n\n    class DatabaseUpdateMessage(AgentMessage):\n        \"\"\" Description of the message \"\"\"\n        def __init__(self, sender, senders_db_alias):\n            super().__init__(sender=sender, receiver=DatabaseAgent.__name__)\n            self.senders_db_alias\n            self._states = {1: 'new', 2: 'read'} \n            self._state = 1\n            \n        def get_senders_alias(self):\n            return self.senders_db_alias\n            \n        def __next__(self)\n            if self._state + 1 <= max(self._states.keys()):\n                self._state += 1\n        \n        def state(self):\n            return self._states[self._state]\n\nThe class `DatabaseUpdateMessage` is subclassed from the `AgentMessage` so that \nthe basic message handling properties are available for the DatabaseUpdateMessage. \nThis helps the user as s/he doesn't need to know anything about how the message \nhandling system works.\n\nThe init function requires a sender, which normally defaults to the agent's `self`.\nThe `AgentMessage` knows that if it gets an agent in it's `__init__` call, it will\nobtain the agents UUID and use that. Similar applies to a receiver, where the typical\noperation is based on that the local agent gets a message from the sender and only \nknows the sender based on msg.get_sender() which returns the sending agents UUID. \nIf the sender might change UUID, in the course of multiple runs, the local agent \nshould be instructed to use, for example, the `senders_db_alias`. For the purpose\nof illustration, the message above contains the function `get_senders_alias` which\nthen can be persistent over multiple runs.\n\nThe message is also designed to be returned to save pythons garbage collector:\nWhen the DatabaseAgent receives the message, the `__next__`-function allows the\nagent to call `next(msg)` to progress it's `self._state` from '1' (new) to '2' (read)\nbefore returning it to the sender using 'self.send(msg)'. In such case it is \nimportant that the DatabaseAgent doesn't store the message in its variables, as\nthe message must __not__ have any open object pointers when sent. This is due to\nmultiprocessing which uses `multiprocessing.queue`s for exchanging messages, which\nrequire that `Agent`s and `AgentMessage`s can be pickled.\n\nIf an `Agent` can't be pickled when added to the `Scheduler`, the scheduler will\nraise an error explaining that the are open pointer references. Messages are a \nbit more tolerant as the `mailman` that manages the messages will try to send\nthe message and hope that the shared pointer will not cause conflicts. If sharing\nof object pointers is required by the user (for example during prototyping) the \nscheduler must be set up with `number_of_multiprocessors=0` which forces the \nscheduler to run single-process-single-threaded. \n\n\n__Message Conventions__:\n\n* Messages which have `None` as receiver are considered broadcasts. The logic is \nthat if you don't know who exactly you are sending it to, send it it to `None`, and\nyou might get a response if any other agent react on the topic of the message.\nThe magic behind the scenes is handled by the schedulers mail manager \nwhich keeps track of all topics that any `Agent` subscribes to.\nBy convention the topic of the message should be `self.__class__.__name__`.\n\n* Messages which have a `class.__name__` as receiver, will be received by all agents\nof that class. This is configured when the agent is added to the scheduler in `s.add(agent)` \n\n* Messages which have a particular UUID as receiver, will be received by the agent \nholding that UUID. If anyone other agent is tracking that UUID, by subscribing to\nit, then the tracking agent will receive a `deepcopy` of the message, and not the \noriginal. If the message has a `copy` method, this will be used instead of deepcopy. \n\n* To get the UUID of the sender the method `msg.sender` is available.\n\n* To subscribe/unsubscribe during runtime the agents should use the `subscribe`\nfunction directly.\n\n\n### How to load data from a database connection \n\nWhen agents are added to the scheduler `setup` is run.\nWhen agents are removed from `teardown` is run.\n\nif agents are added and removed iteratively, they should load their \nstate during `setup` and store it during `teardown` from some database. \nIt is not necessary to let the scheduler know where the database is. \nThe agents can keep track of this themselves. \n\nThough the user might find it attractive to use `uuid` to identify, a particular \n`Agent` the user should set the `uuid` in `super().__init__(uuid=\"this\")`, as a the\n`uuid` otherwise will be given be the scheduler.\n\n### Getting started\n\nTo get started only 3 steps are required:\n\nStep 1. setup a scheduler\n\n    >>> from maslite import Agent, Scheduler\n    >>> s = Scheduler()\n    \nStep 2. create agents which have an `update` method and (optionally)\na `setup` and `teardown`.\n\n    >>> class MyAgent(Agent):\n    ...     def __init__(self):\n    ...         super().__init__()\n    ...     def setup(self):\n    ...         pass\n    ...     def teardown(self):\n    ...         pass\n    ...     def update(self):\n    ...         pass\n        \n    >>> m = MyAgent()\n    >>> s.add(m)\n\nStep 3. run the scheduler (nothing happens here)\n\n    >>> s.run(pause_if_idle=True)\n\nOther methods such as `s.run(seconds=None, iterations=None, \npause_if_idle=False)` can be applied as the user finds it suitable.\n\nStep 4. to stop the scheduler there are the following options:\n\n1. Let it run until idle (most common)\n2. Run for N seconds (suitable for real-time systems), \n3. Run for N iterations (suitable for interrupt checking)\n\nThen leave the scheduler (and all the agents) in their set state, for\nexample to read the state of particular agents; and finally \nexecute the `teardown` method, on all agents in a loop:\n\n    >>> for uid, agent in s.agents.items():\n    ...     agent.teardown()\n\n\n### Debugging with pdb or breakpoints (PyCharm)\n\nDebugging is easily performed by putting breakpoint at the beginning of\nthe update function. In that way you can watch what happens inside the \nagent during its state-update.\n\n### Typical mistakes\n\nThe user constructs the agent correctly with:\n \n1. the methods `update`, `send`, `receive`, `setup` and `teardown`,\n2. adding the agent to the scheduler using `scheduler.add(agent)`.\n3. runs the scheduler using `scheduler.run()`, \n\n...but... \n\nQ: The agents don't seem to update?\n\nA: The agents are not getting any messages and are therefore not updated.\nThis is correct behaviour, as `update` only should run when there are\nnew messages! \nTo force agents to run `update` in every scheduling cycle, use the hidden \nmethod: `agent.keep_awake=True`. Doing this blindly however is a poor design\nchoice if the agent merely is polling for data. For this purpose \n`agent.set_alarm_clock(agent.now()+1)` should be used, as this allows the\nagent to sleep for 1 second and the be \"woken up\" by the alarm message.\n\nThe reason it is recommended to use the alarm instead of setting \n`keep_awake=True` is that the workload of the system remains transparent \nat the level of message exchange. Remember that the internal state of \nthe agents should always be hidden whilst the  messages should be \nindicative of any activity. \n\n...\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/root-11/maslite",
    "keywords": "multi agent system,MAS,maslite",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MASlite",
    "package_url": "https://pypi.org/project/MASlite/",
    "platform": "any",
    "project_url": "https://pypi.org/project/MASlite/",
    "project_urls": {
      "Homepage": "https://github.com/root-11/maslite"
    },
    "release_url": "https://pypi.org/project/MASlite/2022.11.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A fast & lightweight multi-agent system kernel",
    "version": "2022.11.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15891225,
  "releases": {
    "2019.5.20.38037": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ba370fdd0b414a6da19900d3cb060efbab0ce5115832b367890e0a09f17a036",
          "md5": "1ba45da526de39a6127705a75291639d",
          "sha256": "aaf5acf02d90d3ed9b76f959a9876111de8e68fb4da61edbf6c2167d986a938a"
        },
        "downloads": -1,
        "filename": "MASlite-2019.5.20.38037.tar.gz",
        "has_sig": false,
        "md5_digest": "1ba45da526de39a6127705a75291639d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22820,
        "upload_time": "2019-05-20T09:34:39",
        "upload_time_iso_8601": "2019-05-20T09:34:39.317308Z",
        "url": "https://files.pythonhosted.org/packages/0b/a3/70fdd0b414a6da19900d3cb060efbab0ce5115832b367890e0a09f17a036/MASlite-2019.5.20.38037.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.5.20.41895": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57d793f6b3707eebae742e4d77a2d7c1d59f915cb4eb2a4fc5fbe55246ba176e",
          "md5": "f3255608b9b3a6e7fdade5d2cc8d599a",
          "sha256": "a61e33e00c2138972e231e5733e3f746b6e722dc1edf45f122280ce2f2451c9b"
        },
        "downloads": -1,
        "filename": "MASlite-2019.5.20.41895.tar.gz",
        "has_sig": false,
        "md5_digest": "f3255608b9b3a6e7fdade5d2cc8d599a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22841,
        "upload_time": "2019-05-20T10:39:35",
        "upload_time_iso_8601": "2019-05-20T10:39:35.936422Z",
        "url": "https://files.pythonhosted.org/packages/57/d7/93f6b3707eebae742e4d77a2d7c1d59f915cb4eb2a4fc5fbe55246ba176e/MASlite-2019.5.20.41895.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.5.20.48214": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abd78569d2e3e561ceeade164fa15a451677085b36901eddf0ee9e7f16bf69eb",
          "md5": "6cc67f961decb633386e3dec9bbcaf38",
          "sha256": "31dfbdcc527edad426d6634424d71b0d83e6202c1c99799d6ada8cda333d97c1"
        },
        "downloads": -1,
        "filename": "MASlite-2019.5.20.48214.tar.gz",
        "has_sig": false,
        "md5_digest": "6cc67f961decb633386e3dec9bbcaf38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22862,
        "upload_time": "2019-05-20T12:29:05",
        "upload_time_iso_8601": "2019-05-20T12:29:05.720821Z",
        "url": "https://files.pythonhosted.org/packages/ab/d7/8569d2e3e561ceeade164fa15a451677085b36901eddf0ee9e7f16bf69eb/MASlite-2019.5.20.48214.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.5.9.45023": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e723e1fcf2e9d735d0a1574b1920de2cf13ccb6428e3d389bcd44869a25b170",
          "md5": "72b2d7dd05cacb955cce47270a5d4edc",
          "sha256": "b95db2e546a9dbb0b6f337221afd1c06c19a0fc3d03b3a0fefaef8c6d0c4e790"
        },
        "downloads": -1,
        "filename": "MASlite-2019.5.9.45023.tar.gz",
        "has_sig": false,
        "md5_digest": "72b2d7dd05cacb955cce47270a5d4edc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12704,
        "upload_time": "2019-05-09T11:33:55",
        "upload_time_iso_8601": "2019-05-09T11:33:55.936869Z",
        "url": "https://files.pythonhosted.org/packages/6e/72/3e1fcf2e9d735d0a1574b1920de2cf13ccb6428e3d389bcd44869a25b170/MASlite-2019.5.9.45023.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.5.9.49364": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c08b7c0ec7b6c60ead91969715e9932cdfb7c654efbf3b43e00b90184755f03f",
          "md5": "b27ca4ead5d8da37ace1b4217181d69d",
          "sha256": "7559dacbba929b6fb4af67159675d5200744d87c5b4c3b5eaf5f765fba86079c"
        },
        "downloads": -1,
        "filename": "MASlite-2019.5.9.49364.tar.gz",
        "has_sig": false,
        "md5_digest": "b27ca4ead5d8da37ace1b4217181d69d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20360,
        "upload_time": "2019-05-09T12:44:50",
        "upload_time_iso_8601": "2019-05-09T12:44:50.224893Z",
        "url": "https://files.pythonhosted.org/packages/c0/8b/7c0ec7b6c60ead91969715e9932cdfb7c654efbf3b43e00b90184755f03f/MASlite-2019.5.9.49364.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.5.9.50822": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "367d5a4c7d916ce1f7b38dd78c34075092d4b01e02115f77f7d9e49a9e1c84a5",
          "md5": "8f20235d17ec5b899f90ba0096d19c85",
          "sha256": "9a01365b227432214ed555a89236415986c65c10b8a99f4a087e6ec54938017e"
        },
        "downloads": -1,
        "filename": "MASlite-2019.5.9.50822.tar.gz",
        "has_sig": false,
        "md5_digest": "8f20235d17ec5b899f90ba0096d19c85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20382,
        "upload_time": "2019-05-09T13:07:51",
        "upload_time_iso_8601": "2019-05-09T13:07:51.829202Z",
        "url": "https://files.pythonhosted.org/packages/36/7d/5a4c7d916ce1f7b38dd78c34075092d4b01e02115f77f7d9e49a9e1c84a5/MASlite-2019.5.9.50822.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.5.9.51003": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2727a349af0b1bb414919a4b20deb976707822a259e5d81f62a38c158e33b67c",
          "md5": "9f0e0c9cf5cf6fcd68192e8dd7e3fcab",
          "sha256": "015b6444c9b8b4dcf80abb0906250f7cac9126634cac36a4b60556088dd10e2a"
        },
        "downloads": -1,
        "filename": "MASlite-2019.5.9.51003.tar.gz",
        "has_sig": false,
        "md5_digest": "9f0e0c9cf5cf6fcd68192e8dd7e3fcab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20381,
        "upload_time": "2019-05-09T13:10:59",
        "upload_time_iso_8601": "2019-05-09T13:10:59.963408Z",
        "url": "https://files.pythonhosted.org/packages/27/27/a349af0b1bb414919a4b20deb976707822a259e5d81f62a38c158e33b67c/MASlite-2019.5.9.51003.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.5.9.52401": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5b38b0d71a09629afdd0e35da7eb39a316da5475056a8b3be0b27dc10c6fa13",
          "md5": "b43ac5d0c7739c9f4e9f6a237a01f518",
          "sha256": "dc256ef999e17510f36180ff0e00ae2a669a4579e59b483a73ccbb7b45ad346b"
        },
        "downloads": -1,
        "filename": "MASlite-2019.5.9.52401.tar.gz",
        "has_sig": false,
        "md5_digest": "b43ac5d0c7739c9f4e9f6a237a01f518",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22743,
        "upload_time": "2019-05-09T13:34:08",
        "upload_time_iso_8601": "2019-05-09T13:34:08.367591Z",
        "url": "https://files.pythonhosted.org/packages/f5/b3/8b0d71a09629afdd0e35da7eb39a316da5475056a8b3be0b27dc10c6fa13/MASlite-2019.5.9.52401.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.6.14.39347": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b3cac3f14527d88c6920f2fad20181147af05d79310f8831a17c64026a11456",
          "md5": "9ecc41ab43de180ff531192d767d03cf",
          "sha256": "a03b6bb67858b6a49f1e22bbb96348d4cdd133bc4b8721321fe9974b6017c735"
        },
        "downloads": -1,
        "filename": "MASlite-2019.6.14.39347.tar.gz",
        "has_sig": false,
        "md5_digest": "9ecc41ab43de180ff531192d767d03cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27959,
        "upload_time": "2019-06-14T09:57:21",
        "upload_time_iso_8601": "2019-06-14T09:57:21.156912Z",
        "url": "https://files.pythonhosted.org/packages/7b/3c/ac3f14527d88c6920f2fad20181147af05d79310f8831a17c64026a11456/MASlite-2019.6.14.39347.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.7.17.55529": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2399a5d145a28a91c062455acfbe2e242cd6d2b4fc7f309d920125f095a3664",
          "md5": "80f9ffe42c97aa9fcf558d7d0ceb2d7c",
          "sha256": "08f3c1a9f687c2da86f00f72233fa77c069f57fdea5fb4670ed9da620e851f04"
        },
        "downloads": -1,
        "filename": "MASlite-2019.7.17.55529.tar.gz",
        "has_sig": false,
        "md5_digest": "80f9ffe42c97aa9fcf558d7d0ceb2d7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22332,
        "upload_time": "2019-07-17T14:26:56",
        "upload_time_iso_8601": "2019-07-17T14:26:56.730536Z",
        "url": "https://files.pythonhosted.org/packages/e2/39/9a5d145a28a91c062455acfbe2e242cd6d2b4fc7f309d920125f095a3664/MASlite-2019.7.17.55529.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2020.1.30.38386": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9991e5dd25e3197d58c00560f28975f818d974197befc3f70a2980a549f9b1ff",
          "md5": "d81fd5edbb27431dc78268a679a591cf",
          "sha256": "134af0f226d8786fb10874cbf7208b438c3c42af7a935e92b018ddba45998162"
        },
        "downloads": -1,
        "filename": "MASlite-2020.1.30.38386.tar.gz",
        "has_sig": false,
        "md5_digest": "d81fd5edbb27431dc78268a679a591cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19582,
        "upload_time": "2020-01-30T10:41:27",
        "upload_time_iso_8601": "2020-01-30T10:41:27.640177Z",
        "url": "https://files.pythonhosted.org/packages/99/91/e5dd25e3197d58c00560f28975f818d974197befc3f70a2980a549f9b1ff/MASlite-2020.1.30.38386.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2020.8.17.44845": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6f381c234e473deaf50745975d6f828fa6c1ed0e65787eb777bd64381c126e1",
          "md5": "0a59dab7c3c71894edfa5c515888df83",
          "sha256": "875666c1e7c10712aca858782dcdc0f679ea50922da99c1dfbafd04d170f73ce"
        },
        "downloads": -1,
        "filename": "MASlite-2020.8.17.44845.tar.gz",
        "has_sig": false,
        "md5_digest": "0a59dab7c3c71894edfa5c515888df83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19702,
        "upload_time": "2020-08-17T11:59:13",
        "upload_time_iso_8601": "2020-08-17T11:59:13.662472Z",
        "url": "https://files.pythonhosted.org/packages/c6/f3/81c234e473deaf50745975d6f828fa6c1ed0e65787eb777bd64381c126e1/MASlite-2020.8.17.44845.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.11.46065": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63f77a14958964bf1ad06dda3c73ab18003f66a2b2dfea5423a816d408aaaddd",
          "md5": "2cad2443ccf4f3e12706a1e7a4cf448d",
          "sha256": "7790d542dd19db7127defecc19a33d01fa67b83b893969d46ed0c74ebddc163e"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.11.46065.tar.gz",
        "has_sig": false,
        "md5_digest": "2cad2443ccf4f3e12706a1e7a4cf448d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22792,
        "upload_time": "2021-02-11T12:48:01",
        "upload_time_iso_8601": "2021-02-11T12:48:01.851183Z",
        "url": "https://files.pythonhosted.org/packages/63/f7/7a14958964bf1ad06dda3c73ab18003f66a2b2dfea5423a816d408aaaddd/maslite-2021.2.11.46065.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.11.46983": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab7bffbd01a7ca9a80c4b24acd9a1dd1125ceb50aa278632a72f79c2240b9dcc",
          "md5": "cc208f1b394b2745da9392a2f0862171",
          "sha256": "ebd97548d2a784be94f840b75a94187d3af33ab7568b0d336e9dd0d39979ed9d"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.11.46983.tar.gz",
        "has_sig": false,
        "md5_digest": "cc208f1b394b2745da9392a2f0862171",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22803,
        "upload_time": "2021-02-11T13:03:19",
        "upload_time_iso_8601": "2021-02-11T13:03:19.295161Z",
        "url": "https://files.pythonhosted.org/packages/ab/7b/ffbd01a7ca9a80c4b24acd9a1dd1125ceb50aa278632a72f79c2240b9dcc/maslite-2021.2.11.46983.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.12.55653": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68508d51c4fecebd4a36574df0e57d21b2135720c13b47137f2fdc8975f3025d",
          "md5": "6b2dbf03152d3d07979b4b950a77e9c8",
          "sha256": "9ecc8717f266122f1ea23e40ca17ed6bbf59e8da8b7f0ee37172df025a070519"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.12.55653.tar.gz",
        "has_sig": false,
        "md5_digest": "6b2dbf03152d3d07979b4b950a77e9c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22802,
        "upload_time": "2021-02-12T15:27:49",
        "upload_time_iso_8601": "2021-02-12T15:27:49.666377Z",
        "url": "https://files.pythonhosted.org/packages/68/50/8d51c4fecebd4a36574df0e57d21b2135720c13b47137f2fdc8975f3025d/maslite-2021.2.12.55653.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.2.59858": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4201492fe1579307fb365f4c4dea8489d4793a9b62136fef49691c5749657bb7",
          "md5": "e9e0569f66eb65cfd348e203749a4458",
          "sha256": "165e9e6ba1c738ed02e2d36817e46971dcc2a7b361dc26d8a91dd4c55b4ce94f"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.2.59858.tar.gz",
        "has_sig": false,
        "md5_digest": "e9e0569f66eb65cfd348e203749a4458",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21559,
        "upload_time": "2021-02-02T16:38:19",
        "upload_time_iso_8601": "2021-02-02T16:38:19.390798Z",
        "url": "https://files.pythonhosted.org/packages/42/01/492fe1579307fb365f4c4dea8489d4793a9b62136fef49691c5749657bb7/maslite-2021.2.2.59858.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.24.57495": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a4ede8978cf74beffbffc64f1f71303ea8f4538de5823a5adf08835ff41bbe4",
          "md5": "677d0ce7ad07455e30e6a470b476f743",
          "sha256": "692877ce5a7b6a49cc9500384bc2a5ae17a3b04e92a74acee2b9494e585cbcae"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.24.57495.tar.gz",
        "has_sig": false,
        "md5_digest": "677d0ce7ad07455e30e6a470b476f743",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23356,
        "upload_time": "2021-02-24T15:58:33",
        "upload_time_iso_8601": "2021-02-24T15:58:33.897861Z",
        "url": "https://files.pythonhosted.org/packages/2a/4e/de8978cf74beffbffc64f1f71303ea8f4538de5823a5adf08835ff41bbe4/maslite-2021.2.24.57495.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.3.39644": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ff5f2f213352b41afa4984ab10d7fe26d453b36eedfc65013b4a22709201b00",
          "md5": "d6734648bfdbd202fe97b42f9e5997e8",
          "sha256": "c31519af7c78126c6209e949a9c6f0fbbdaaa9f577cce310a27a0fa64179ecbe"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.3.39644.tar.gz",
        "has_sig": false,
        "md5_digest": "d6734648bfdbd202fe97b42f9e5997e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21610,
        "upload_time": "2021-02-03T11:01:21",
        "upload_time_iso_8601": "2021-02-03T11:01:21.832660Z",
        "url": "https://files.pythonhosted.org/packages/5f/f5/f2f213352b41afa4984ab10d7fe26d453b36eedfc65013b4a22709201b00/maslite-2021.2.3.39644.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.3.40868": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3cac04e729d6eaf1d3bdda47621a742d42f97a13a71f8aa5ac5f7be363341f9",
          "md5": "fc738e6c79eb45b6c06b732cc16b0c15",
          "sha256": "26649815167baab7e058c39a5485bcaa29144f168770f94231eac96e0ab0c37d"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.3.40868.tar.gz",
        "has_sig": false,
        "md5_digest": "fc738e6c79eb45b6c06b732cc16b0c15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21795,
        "upload_time": "2021-02-03T11:21:36",
        "upload_time_iso_8601": "2021-02-03T11:21:36.285195Z",
        "url": "https://files.pythonhosted.org/packages/d3/ca/c04e729d6eaf1d3bdda47621a742d42f97a13a71f8aa5ac5f7be363341f9/maslite-2021.2.3.40868.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.3.47492": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "683cc60774dee2e00648e9ecd96dc07ae0f680a5cc0c29b78ad46f15f649516c",
          "md5": "f6cd676cebde6f4cc55a5dba1877e643",
          "sha256": "12387bc9ea102e05f96b6b929fe1cd5078c054034ccca15c9dba0d2e489dbe95"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.3.47492.tar.gz",
        "has_sig": false,
        "md5_digest": "f6cd676cebde6f4cc55a5dba1877e643",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21822,
        "upload_time": "2021-02-03T13:12:02",
        "upload_time_iso_8601": "2021-02-03T13:12:02.953703Z",
        "url": "https://files.pythonhosted.org/packages/68/3c/c60774dee2e00648e9ecd96dc07ae0f680a5cc0c29b78ad46f15f649516c/maslite-2021.2.3.47492.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.4.45871": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce2bd7960ac6e9e1b18e96dbd2ebfe7046b8d6c94a7c1f565c0d609a56c94d59",
          "md5": "ec1c6e834ec1ba46c381688fb3cc0425",
          "sha256": "506e4b70c9c8b6b6b84deee5ba60e136f1a1a3df2b04d594836aa262cc4b7dcc"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.4.45871.tar.gz",
        "has_sig": false,
        "md5_digest": "ec1c6e834ec1ba46c381688fb3cc0425",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22380,
        "upload_time": "2021-02-04T12:44:59",
        "upload_time_iso_8601": "2021-02-04T12:44:59.100250Z",
        "url": "https://files.pythonhosted.org/packages/ce/2b/d7960ac6e9e1b18e96dbd2ebfe7046b8d6c94a7c1f565c0d609a56c94d59/maslite-2021.2.4.45871.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.4.62814": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17699e67877a559df64eff814a2300c9e622c07446f00106277f27ea389bc90b",
          "md5": "2ce0f7f0f727f153e83650ed8addfb1a",
          "sha256": "945749a344fdb658a7192e7c9750c6b2b419ae3b045b63e9ed8b9a6f55ba9e7f"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.4.62814.tar.gz",
        "has_sig": false,
        "md5_digest": "2ce0f7f0f727f153e83650ed8addfb1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22524,
        "upload_time": "2021-02-04T17:27:30",
        "upload_time_iso_8601": "2021-02-04T17:27:30.538777Z",
        "url": "https://files.pythonhosted.org/packages/17/69/9e67877a559df64eff814a2300c9e622c07446f00106277f27ea389bc90b/maslite-2021.2.4.62814.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.2.5.60421": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a82093d67f89b0e5657e0506700ab5d01ee2dbce6e075885f54890bb29d4303",
          "md5": "16b4b662871543e0b2076bc4a4b7b81b",
          "sha256": "dc73ae1f31d8c8b75f2cc7042928603a95d3b57e20b3e8b49c5e1f59f0fd74a2"
        },
        "downloads": -1,
        "filename": "maslite-2021.2.5.60421.tar.gz",
        "has_sig": false,
        "md5_digest": "16b4b662871543e0b2076bc4a4b7b81b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22584,
        "upload_time": "2021-02-05T16:47:27",
        "upload_time_iso_8601": "2021-02-05T16:47:27.871487Z",
        "url": "https://files.pythonhosted.org/packages/9a/82/093d67f89b0e5657e0506700ab5d01ee2dbce6e075885f54890bb29d4303/maslite-2021.2.5.60421.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.4.19.37909": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35335a1f41c337e1f18c6231b475881d3a9e4af6e1a4898ed39f877b05c417e1",
          "md5": "8e7f0005eab630da40af46885fa9337c",
          "sha256": "eca8fadb6d5bda0497b0667ced9c94192a7d7fd00e83e7d38fc9dd73d3478155"
        },
        "downloads": -1,
        "filename": "maslite-2021.4.19.37909.tar.gz",
        "has_sig": false,
        "md5_digest": "8e7f0005eab630da40af46885fa9337c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23341,
        "upload_time": "2021-04-19T09:32:11",
        "upload_time_iso_8601": "2021-04-19T09:32:11.177920Z",
        "url": "https://files.pythonhosted.org/packages/35/33/5a1f41c337e1f18c6231b475881d3a9e4af6e1a4898ed39f877b05c417e1/maslite-2021.4.19.37909.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.5.28.43437": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "991944cdd089471f6f922935ffe644e6a120c3e940e318a3ecebb7b1938bde68",
          "md5": "1d980e21a28323c95a58e925870c6e12",
          "sha256": "d2fc72849546a15563dc3048d870993ada56cf8d7491cb8f2f841bcbfda5fc0d"
        },
        "downloads": -1,
        "filename": "maslite-2021.5.28.43437.tar.gz",
        "has_sig": false,
        "md5_digest": "1d980e21a28323c95a58e925870c6e12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23383,
        "upload_time": "2021-05-28T11:04:25",
        "upload_time_iso_8601": "2021-05-28T11:04:25.334551Z",
        "url": "https://files.pythonhosted.org/packages/99/19/44cdd089471f6f922935ffe644e6a120c3e940e318a3ecebb7b1938bde68/maslite-2021.5.28.43437.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fa849a2ef0a7a0cbd3283599ce79f9ed24a78eb07a98544c7adcc7e5436a692",
          "md5": "fe687a36f7181c9ca432b67fc21d33a8",
          "sha256": "a0ba021dc493150f14b670f3dc3e1ffcf049b30ffdc56a517d5add28a543492e"
        },
        "downloads": -1,
        "filename": "MASlite-2022.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe687a36f7181c9ca432b67fc21d33a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24376,
        "upload_time": "2022-11-22T19:58:56",
        "upload_time_iso_8601": "2022-11-22T19:58:56.636519Z",
        "url": "https://files.pythonhosted.org/packages/9f/a8/49a2ef0a7a0cbd3283599ce79f9ed24a78eb07a98544c7adcc7e5436a692/MASlite-2022.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.11.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dec70285b6620c99f3f6330f2efbff4b9718840c56abf686e7002c47fff08f8e",
          "md5": "4a5fd7acaff3e86c115189ae3ad6b388",
          "sha256": "0ae692fcb3e0389fea32afd70cba1a04ed0d8435549630d529489ec9327b044c"
        },
        "downloads": -1,
        "filename": "MASlite-2022.11.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a5fd7acaff3e86c115189ae3ad6b388",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24374,
        "upload_time": "2022-11-22T20:25:38",
        "upload_time_iso_8601": "2022-11-22T20:25:38.225235Z",
        "url": "https://files.pythonhosted.org/packages/de/c7/0285b6620c99f3f6330f2efbff4b9718840c56abf686e7002c47fff08f8e/MASlite-2022.11.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.11.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5efdbc1dee87abbbe382334abac37d007b1290833fdc233c2f1be24f99c0ef22",
          "md5": "e07ebaeaec67f343f9b7812113971033",
          "sha256": "9649a43e617a289b30321df7e9ee468fc9ad0933dfcb26e0b091584b81315f55"
        },
        "downloads": -1,
        "filename": "MASlite-2022.11.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e07ebaeaec67f343f9b7812113971033",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24372,
        "upload_time": "2022-11-25T15:18:00",
        "upload_time_iso_8601": "2022-11-25T15:18:00.662234Z",
        "url": "https://files.pythonhosted.org/packages/5e/fd/bc1dee87abbbe382334abac37d007b1290833fdc233c2f1be24f99c0ef22/MASlite-2022.11.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.4.27.79467": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11b7d78f76de9f216a902f8ad5ab505f740c66fa868554182db23183890cca1c",
          "md5": "3510894302fd01b8e1f09b4b0abc3863",
          "sha256": "667229607ed4fb0403bed90a2d70c0b96bbb305de75b75de933151abe8805425"
        },
        "downloads": -1,
        "filename": "MASlite-2022.4.27.79467-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3510894302fd01b8e1f09b4b0abc3863",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24156,
        "upload_time": "2022-04-27T22:04:49",
        "upload_time_iso_8601": "2022-04-27T22:04:49.327129Z",
        "url": "https://files.pythonhosted.org/packages/11/b7/d78f76de9f216a902f8ad5ab505f740c66fa868554182db23183890cca1c/MASlite-2022.4.27.79467-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db6a0ed158c5199fd267503f9d8cd3f7a197f8c34f26386cbf0fb947b64f734d",
          "md5": "cc093b92d89ef2c64352721a8b906923",
          "sha256": "82de30b6208400852e64372c19a8d94d88a15f4e7180326e7329201c0446333d"
        },
        "downloads": -1,
        "filename": "MASlite-2022.4.27.79467.tar.gz",
        "has_sig": false,
        "md5_digest": "cc093b92d89ef2c64352721a8b906923",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23341,
        "upload_time": "2022-04-27T22:04:50",
        "upload_time_iso_8601": "2022-04-27T22:04:50.709321Z",
        "url": "https://files.pythonhosted.org/packages/db/6a/0ed158c5199fd267503f9d8cd3f7a197f8c34f26386cbf0fb947b64f734d/MASlite-2022.4.27.79467.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5efdbc1dee87abbbe382334abac37d007b1290833fdc233c2f1be24f99c0ef22",
        "md5": "e07ebaeaec67f343f9b7812113971033",
        "sha256": "9649a43e617a289b30321df7e9ee468fc9ad0933dfcb26e0b091584b81315f55"
      },
      "downloads": -1,
      "filename": "MASlite-2022.11.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e07ebaeaec67f343f9b7812113971033",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24372,
      "upload_time": "2022-11-25T15:18:00",
      "upload_time_iso_8601": "2022-11-25T15:18:00.662234Z",
      "url": "https://files.pythonhosted.org/packages/5e/fd/bc1dee87abbbe382334abac37d007b1290833fdc233c2f1be24f99c0ef22/MASlite-2022.11.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}