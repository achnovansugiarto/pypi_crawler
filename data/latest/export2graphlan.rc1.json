{
  "info": {
    "author": "Francesco Asnicar",
    "author_email": "f.asnicar@unitn.it",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "**export2graphlan** is a conversion software tool for producing both annotation and tree file for GraPhlAn. In particular, the annotation file tries to highlight specific sub-trees deriving automatically from input file what nodes are important. The two output file of **export2graphlan** should then be used to run ``graphlan_annotate.py``, in order to attach to the tree the derived annotations, and finally, by executing ``graphlan.py`` the user can get the output image.\n\n# PREREQUISITES #\n\n**export2graphlan** requires the following additional library:\n\n* pandas ver. 0.13.1 ([pandas](http://pandas.pydata.org/index.html))\n* BIOM ver. 2.0.1 ([biom-format](http://biom-format.org), only if you have input files in BIOM format)\n* SciPy ([scipy](http://www.scipy.org), required by hclust2)\n\n# INSTALLATION #\n\n**export2graphlan** is available in GitHub here: [export2graphlan repository](https://github.com/SegataLab/export2graphlan) and can be obtained using:\n\n1. [Bioconda](https://bioconda.github.io/recipes/export2graphlan/README.html)\n\n```\n$ conda install export2graphlan\n```\n\n2. Repository\n\n```\n$ git clone git@github.com:SegataLab/export2graphlan.git\n```\n\nThis will download the **export2graphlan** repository locally in the ``export2graphlan`` subfolder. You then have to put this subfolder into the system path, so that you can use **export2graphlan** from anywhere in your system:\n```\n$ export PATH=`pwd`/export2graphlan/:$PATH\n```\nAdding the above line into the bash configuration file will make the path addition permanent. For Windows or MacOS systems a similar procedure should be followed.\n\n# USAGE #\n```\nusage: export2graphlan.py [-h] [-i LEFSE_INPUT] [-o LEFSE_OUTPUT] -t TREE -a\n                          ANNOTATION [--annotations ANNOTATIONS]\n                          [--external_annotations EXTERNAL_ANNOTATIONS]\n                          [--background_levels BACKGROUND_LEVELS]\n                          [--background_clades BACKGROUND_CLADES]\n                          [--background_colors BACKGROUND_COLORS]\n                          [--title TITLE] [--title_font_size TITLE_FONT_SIZE]\n                          [--def_clade_size DEF_CLADE_SIZE]\n                          [--min_clade_size MIN_CLADE_SIZE]\n                          [--max_clade_size MAX_CLADE_SIZE]\n                          [--def_font_size DEF_FONT_SIZE]\n                          [--min_font_size MIN_FONT_SIZE]\n                          [--max_font_size MAX_FONT_SIZE]\n                          [--annotation_legend_font_size ANNOTATION_LEGEND_FONT_SIZE]\n                          [--abundance_threshold ABUNDANCE_THRESHOLD]\n                          [--most_abundant MOST_ABUNDANT]\n                          [--least_biomarkers LEAST_BIOMARKERS]\n                          [--discard_otus] [--internal_levels]\n                          [--biomarkers2colors BIOMARKERS2COLORS] [--sep SEP]\n                          [--out_table OUT_TABLE] [--fname_row FNAME_ROW]\n                          [--sname_row SNAME_ROW]\n                          [--metadata_rows METADATA_ROWS]\n                          [--skip_rows SKIP_ROWS] [--sperc SPERC]\n                          [--fperc FPERC] [--stop STOP] [--ftop FTOP]\n                          [--def_na DEF_NA]\n\nexport2graphlan.py (ver. 0.2.1 of 27 October 2018). Convert MetaPhlAn, LEfSe,\nand/or HUMAnN output to GraPhlAn input format. Authors: Francesco Asnicar\n(f.asnicar@unitn.it)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --annotations ANNOTATIONS\n                        List which levels should be annotated in the tree. Use\n                        a comma separate values form, e.g.,\n                        --annotation_levels 1,2,3. Default is None\n  --external_annotations EXTERNAL_ANNOTATIONS\n                        List which levels should use the external legend for\n                        the annotation. Use a comma separate values form,\n                        e.g., --annotation_levels 1,2,3. Default is None\n  --background_levels BACKGROUND_LEVELS\n                        List which levels should be highlight with a shaded\n                        background. Use a comma separate values form, e.g.,\n                        --background_levels 1,2,3. Default is None\n  --background_clades BACKGROUND_CLADES\n                        Specify the clades that should be highlight with a\n                        shaded background. Use a comma separate values form\n                        and surround the string with \" if there are spaces.\n                        Example: --background_clades \"Bacteria.Actinobacteria,\n                        Bacteria.Bacteroidetes.Bacteroidia,\n                        Bacteria.Firmicutes.Clostridia.Clostridiales\". Default\n                        is None\n  --background_colors BACKGROUND_COLORS\n                        Set the color to use for the shaded background. Colors\n                        can be either in RGB or HSV (using a semi-colon to\n                        separate values, surrounded with ()) format. Use a\n                        comma separate values form and surround the string\n                        with \" if it contains spaces. Example:\n                        --background_colors \"#29cc36, (150; 100; 100), (280;\n                        80; 88)\". To use a fixed set of colors associated to a\n                        fixed set of clades, you can specify a mapping file in\n                        a tab-separated format, where the first column is the\n                        clade (using the same format as for the \"--\n                        background_clades\" param) and the second colum is the\n                        color associated. Default is None\n  --title TITLE         If specified set the title of the GraPhlAn plot.\n                        Surround the string with \" if it contains spaces,\n                        e.g., --title \"Title example\"\n  --title_font_size TITLE_FONT_SIZE\n                        Set the title font size. Default is 15\n  --def_clade_size DEF_CLADE_SIZE\n                        Set a default size for clades that are not found as\n                        biomarkers by LEfSe. Default is 10\n  --min_clade_size MIN_CLADE_SIZE\n                        Set the minimum value of clades that are biomarkers.\n                        Default is 20\n  --max_clade_size MAX_CLADE_SIZE\n                        Set the maximum value of clades that are biomarkers.\n                        Default is 200\n  --def_font_size DEF_FONT_SIZE\n                        Set a default font size. Default is 10\n  --min_font_size MIN_FONT_SIZE\n                        Set the minimum font size to use. Default is 8\n  --max_font_size MAX_FONT_SIZE\n                        Set the maximum font size. Default is 12\n  --annotation_legend_font_size ANNOTATION_LEGEND_FONT_SIZE\n                        Set the font size for the annotation legend. Default\n                        is 10\n  --abundance_threshold ABUNDANCE_THRESHOLD\n                        Set the minimun abundace value for a clade to be\n                        annotated. Default is 20.0\n  --most_abundant MOST_ABUNDANT\n                        When only lefse_input is provided, you can specify how\n                        many clades highlight. Since the biomarkers are\n                        missing, they will be chosen from the most abundant.\n                        Default is 10\n  --least_biomarkers LEAST_BIOMARKERS\n                        When only lefse_input is provided, you can specify the\n                        minimum number of biomarkers to extract. The taxonomy\n                        is parsed, and the level is choosen in order to have\n                        at least the specified number of biomarkers. Default\n                        is 3\n  --discard_otus        If specified the OTU ids will be discarde from the\n                        taxonmy. Default is True, i.e. keep OTUs IDs in\n                        taxonomy\n  --internal_levels     If specified sum-up from leaf to root the abundances\n                        values. Default is False, i.e. do not sum-up\n                        abundances on the internal nodes\n  --biomarkers2colors BIOMARKERS2COLORS\n                        Mapping file that associates biomarkers to a specific\n                        color... I'll define later the specific format of this\n                        file!\n\ninput parameters:\n  You need to provide at least one of the two arguments\n\n  -i LEFSE_INPUT, --lefse_input LEFSE_INPUT\n                        LEfSe input data. A file that can be given to LEfSe\n                        for biomarkers analysis. It can be the result of a\n                        MetaPhlAn or HUMAnN analysis\n  -o LEFSE_OUTPUT, --lefse_output LEFSE_OUTPUT\n                        LEfSe output result data. The result of LEfSe analysis\n                        performed on the lefse_input file\n\noutput parameters:\n  -t TREE, --tree TREE  Output filename where save the input tree for GraPhlAn\n  -a ANNOTATION, --annotation ANNOTATION\n                        Output filename where save GraPhlAn annotation\n\nInput data matrix parameters:\n  --sep SEP\n  --out_table OUT_TABLE\n                        Write processed data matrix to file\n  --fname_row FNAME_ROW\n                        row number containing the names of the features\n                        [default 0, specify -1 if no names are present in the\n                        matrix\n  --sname_row SNAME_ROW\n                        column number containing the names of the samples\n                        [default 0, specify -1 if no names are present in the\n                        matrix\n  --metadata_rows METADATA_ROWS\n                        Row numbers to use as metadata[default None, meaning\n                        no metadata\n  --skip_rows SKIP_ROWS\n                        Row numbers to skip (0-indexed, comma separated) from\n                        the input file[default None, meaning no rows skipped\n  --sperc SPERC         Percentile of sample value distribution for sample\n                        selection\n  --fperc FPERC         Percentile of feature value distribution for sample\n                        selection\n  --stop STOP           Number of top samples to select (ordering based on\n                        percentile specified by --sperc)\n  --ftop FTOP           Number of top features to select (ordering based on\n                        percentile specified by --fperc)\n  --def_na DEF_NA       Set the default value for missing values [default None\n                        which means no replacement]\n\n```\n\n*Note*: the last input parameters (``Input data matrix parameters``) refer to the **DataMatrix** class contained in the [hclust2](https://github.com/SegataLab/hclust2) repository.\n\n# EXAMPLES #\nThe ``examples`` folder contains the following sub-folders: ``hmp_aerobiosis``, ``hmp_metahit_metabolic``, and ``hmp_metahit_mp2``.\nEach example should work just by typing in a terminal window (provided that you are inside one of the example folder) the following command:\n```\n#!bash\n\n$ ./PIPELINE.sh\n```\n\nIf everything goes well you should find in the same folder of the example six new files: ``annot.txt``, ``outimg.png``, ``outimg_annot.png``, ``outimg_legend.png``, ``outtree.txt``, and ``tree.txt``. Where:\n\n* ``annot.txt``: contains the annotation that will be used by GraPhlAn, produced by the export2graphlan.py script\n* ``outimg.png``: is the circular tree produced by GraPhlAn\n* ``outimg_annot.png``: contains the annotation legend of the circular tree\n* ``outimg_legend.png``: contains the legends of the highlighted biomarkers in the circular tree\n* ``outtree.txt``: is the annotated tree produced by graphlan_annotate.py\n* ``tree.txt``: is the tree produced by the export2graphlan.py script\n\n# Support #\nIf you should find problems in using **export2graphlan** please report them in [The bioBakery help forum](https://forum.biobakery.org/).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/segatalab/export2graphlan",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "export2graphlan",
    "package_url": "https://pypi.org/project/export2graphlan/",
    "platform": "",
    "project_url": "https://pypi.org/project/export2graphlan/",
    "project_urls": {
      "Homepage": "http://github.com/segatalab/export2graphlan"
    },
    "release_url": "https://pypi.org/project/export2graphlan/0.22/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "export2graphlan is a conversion software tool for producing both annotation and tree file for GraPhlAn",
    "version": "0.22",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7451247,
  "releases": {
    "0.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23e9cb088cbb559877974a7346605e6bb7789fc81d79d8439f4967971daa053c",
          "md5": "d80f2b90f265dc9171a30e738c07838a",
          "sha256": "169926472b750acedc5fb6f78a0429c34aa184e9788b35ee06737d91d7ba5977"
        },
        "downloads": -1,
        "filename": "export2graphlan-0.22.tar.gz",
        "has_sig": false,
        "md5_digest": "d80f2b90f265dc9171a30e738c07838a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14554,
        "upload_time": "2020-06-11T10:00:53",
        "upload_time_iso_8601": "2020-06-11T10:00:53.136149Z",
        "url": "https://files.pythonhosted.org/packages/23/e9/cb088cbb559877974a7346605e6bb7789fc81d79d8439f4967971daa053c/export2graphlan-0.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23e9cb088cbb559877974a7346605e6bb7789fc81d79d8439f4967971daa053c",
        "md5": "d80f2b90f265dc9171a30e738c07838a",
        "sha256": "169926472b750acedc5fb6f78a0429c34aa184e9788b35ee06737d91d7ba5977"
      },
      "downloads": -1,
      "filename": "export2graphlan-0.22.tar.gz",
      "has_sig": false,
      "md5_digest": "d80f2b90f265dc9171a30e738c07838a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14554,
      "upload_time": "2020-06-11T10:00:53",
      "upload_time_iso_8601": "2020-06-11T10:00:53.136149Z",
      "url": "https://files.pythonhosted.org/packages/23/e9/cb088cbb559877974a7346605e6bb7789fc81d79d8439f4967971daa053c/export2graphlan-0.22.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}