{
  "info": {
    "author": "Beth Signal",
    "author_email": "beth.signal@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Natural Language :: English",
      "Programming Language :: Python :: 3"
    ],
    "description": "========================\nhow_are_we_stranded_here\n========================\n\n.. image:: https://img.shields.io/pypi/v/how_are_we_stranded_here.svg\n        :target: https://pypi.python.org/pypi/how_are_we_stranded_here\n\nPython package for testing strandedness of RNA-Seq fastq files\n\n\nEver get RNA-Seq data where the library prep or strandedness has been omitted in the methods?\n\nThis should save some headaches later in your pipeline and analysis when you realise you've used the wrong strandedness setting (RF/fr-firststrand, FR/fr-secondstrand, unstranded)\n\n\nRequirements\n------------\nhow_are_we_stranded_here requires the following packages be installed:\n\nkallisto == 0.44.x\n\npython >= 3.6.0\n\nRSeQC\n\nIt also requires a transcriptome annotation (.fasta file - e.g. ensembl's .cdna.fasta, or a prebuilt kallisto index), and a corresponding gtf.\n\nSometimes pseudoalignments will not work with newer versions of kallisto. If this is an issue, we suggest downgrading to 0.44.0.\n\nInstallation\n------------\n.. code-block:: console\n\n        pip install how_are_we_stranded_here\n\n\nUsage\n------------\nFor basic usage, run check_strandedness with a gtf transcript annotation, transcripts fasta file and fastq read files from one sample.\n\n.. code-block:: console\n\n        check_strandedness --gtf Yeast.gtf --transcripts Yeast_cdna.fasta --reads_1 Sample_A_1.fq.gz --reads_2 Sample_A_2.fq.gz\n\n\nOutput\n------------\ncheck_strandedness will print to console the results of infer_experiment.py (http://rseqc.sourceforge.net/#infer-experiment-py), along with an interpretation.\n\n.. code-block:: console\n\n        checking strandedness\n        Reading reference gene model stranded_test_WT_yeast_rep1_1_val_1_1/Saccharomyces_cerevisiae.R64-1-1.98.bed ... Done\n        Loading SAM/BAM file ...  Total 20000 usable reads were sampled\n        This is PairEnd Data\n        Fraction of reads failed to determine: 0.0595\n        Fraction of reads explained by \"1++,1--,2+-,2-+\": 0.0073 (0.8% of explainable reads)\n        Fraction of reads explained by \"1+-,1-+,2++,2--\": 0.9332 (99.2% of explainable reads)\n        Over 90% of reads explained by \"1+-,1-+,2++,2--\"\n        Data is likely RF/fr-firststrand\n\n\nAny intermediate files are written to a folder in your current working directory derived from the name of the reads_1 file.\n\n\nHow it Works\n------------\ncheck_strandedness.py runs a series of commands to check which direction reads align once mapped in transcripts.\n\nIt first creates a kallisto index (or uses a pre-made index) of your organisms transcriptome.\n\nIt then maps a small subset of reads (default 200000) to the transcriptome, and uses kallisto's --genomebam argument to project pseudoalignments to genome sorted BAM file.\n\nIt finally runs RSeQC's infer_experiment.py to check which direction reads from the first and second pairs are aligned in relation to the transcript strand, and provides output with the likely strandedness of your data.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/betsig/how_are_we_stranded_here",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "how-are-we-stranded-here",
    "package_url": "https://pypi.org/project/how-are-we-stranded-here/",
    "platform": "",
    "project_url": "https://pypi.org/project/how-are-we-stranded-here/",
    "project_urls": {
      "Homepage": "https://github.com/betsig/how_are_we_stranded_here"
    },
    "release_url": "https://pypi.org/project/how-are-we-stranded-here/1.0.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "RSeQC"
    ],
    "requires_python": ">=3.6",
    "summary": "Python package for testing strandedness of RNA-Seq fastq files",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9722903,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12b5483a02769e127eba72873cf537e5673841c93a98ac75f4ca38f843353c03",
          "md5": "bdeac091f9eeadf1fa455a6359425407",
          "sha256": "8e09d80f3c849f5a93ac8f516beec376373f2e9135d7fbe146ef95bca777c221"
        },
        "downloads": -1,
        "filename": "how_are_we_stranded_here-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bdeac091f9eeadf1fa455a6359425407",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11253,
        "upload_time": "2021-03-09T22:54:53",
        "upload_time_iso_8601": "2021-03-09T22:54:53.796609Z",
        "url": "https://files.pythonhosted.org/packages/12/b5/483a02769e127eba72873cf537e5673841c93a98ac75f4ca38f843353c03/how_are_we_stranded_here-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b69779749cdcc8f059b6f578849a0f4f13c362c236f880feab57d6930638a0e",
          "md5": "a3456c87409e9d1b388df02919353873",
          "sha256": "5db2fde61409e1c37ef65b9065c3935c5a462130c939e64c810dc022f47f559a"
        },
        "downloads": -1,
        "filename": "how_are_we_stranded_here-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a3456c87409e9d1b388df02919353873",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32215,
        "upload_time": "2021-03-09T22:54:55",
        "upload_time_iso_8601": "2021-03-09T22:54:55.549949Z",
        "url": "https://files.pythonhosted.org/packages/7b/69/779749cdcc8f059b6f578849a0f4f13c362c236f880feab57d6930638a0e/how_are_we_stranded_here-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12b5483a02769e127eba72873cf537e5673841c93a98ac75f4ca38f843353c03",
        "md5": "bdeac091f9eeadf1fa455a6359425407",
        "sha256": "8e09d80f3c849f5a93ac8f516beec376373f2e9135d7fbe146ef95bca777c221"
      },
      "downloads": -1,
      "filename": "how_are_we_stranded_here-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bdeac091f9eeadf1fa455a6359425407",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11253,
      "upload_time": "2021-03-09T22:54:53",
      "upload_time_iso_8601": "2021-03-09T22:54:53.796609Z",
      "url": "https://files.pythonhosted.org/packages/12/b5/483a02769e127eba72873cf537e5673841c93a98ac75f4ca38f843353c03/how_are_we_stranded_here-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b69779749cdcc8f059b6f578849a0f4f13c362c236f880feab57d6930638a0e",
        "md5": "a3456c87409e9d1b388df02919353873",
        "sha256": "5db2fde61409e1c37ef65b9065c3935c5a462130c939e64c810dc022f47f559a"
      },
      "downloads": -1,
      "filename": "how_are_we_stranded_here-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a3456c87409e9d1b388df02919353873",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 32215,
      "upload_time": "2021-03-09T22:54:55",
      "upload_time_iso_8601": "2021-03-09T22:54:55.549949Z",
      "url": "https://files.pythonhosted.org/packages/7b/69/779749cdcc8f059b6f578849a0f4f13c362c236f880feab57d6930638a0e/how_are_we_stranded_here-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}