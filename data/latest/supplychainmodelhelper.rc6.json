{
  "info": {
    "author": "Marcel Fuhrmann",
    "author_email": "dr.marcel.fuhrmann@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Supply Chain Model Helper\r\n\r\nThis is a python package that helps with creating your own supply chain model. \r\nYou dont need intricate knowledge about python, you might need a bit knowledge \r\nabout graphs (essential part is provided in video tutorials) and a bit about \r\nsupply chain models in general.\r\nThis package also gives you the opportunity to store the data you may need to \r\nmake this supply chain model run in an efficient manner.\r\nA full documentation is provided inside the python package. Videotutorials \r\nwill be linked here later, as well as a documentation to read.\r\n\r\n## What's New in Version 0.2.0\r\nI added graphics package to draw certain aspects of the supply chain model. An \r\nexample can be found in the subfolder example_scripts in this project.\r\n\r\n## jupyter notebook files\r\nJupyter notebook tutorial files are stored in this projects 'example_scripts' \r\nsubfolder.\r\n\r\nCurrently these these tutorials are to be found:\r\n- Creating a toy supply chain model (unfinished)\r\n- tutorial on making use of the graphics package\r\n\r\nThe following jupyter tutorials are in development:\r\n- creating a simple supply chain model\r\n- toolkit for handling attributes on the network\r\n- data modelling and mapping it onto the predefined network structure\r\n- create a full gravity model\r\n- hdf5 datacube for supply chain modelling\r\n- Meta data schema of database for the supply chain model\r\n- handling multiple datasets for supply chain modelling\r\n- a not so simple example model\r\n\r\n\r\n## Installation manual\r\n> pip install supplychainmodelhelper\r\n\r\n## Example scripts\r\nin project folder 'example_scripts, you'll find examples of how to implement \r\nsupply chain toy models, so you can start working on your own much easier  \r\n\r\n## Video tutorials \r\nA series of tutorials is planned, but still unfinished.\r\nhttps://www.youtube.com/channel/UCtUiAESg7TiTdublRlUhvjw\r\n\r\nIf you cant wait, see a preliminary documentation below and full documentation \r\nfrom the help functions in python itself, instructions on how to get help \r\nwithin python below.\r\n\r\n## Functionalities\r\n### Create network model\r\n**Purpose:** create graph from specifications of the user with generally \r\nused node properties \r\nused in supply chain models.\r\n\r\nGet full documentation in python by\r\n\r\n> from supplchainmodulator import graphoperations as go\r\n\r\n> help(go)\r\n\r\nGet documentation on 1 particular function\r\n\r\n> help(go.[INSERT FUNCTION NAME HERE])\r\n\r\n\r\n#### Functions\r\n**Basic operations on network:**\r\n* **createGraph** - the graph is created with node attributes 'actors', \r\n  'locations','products'\r\n* **getListOfNodeIDs** - returns a list of nodeIDs with the corresponding \r\n  attributes, used for editing information on the graph\r\n* **getNodeIDswAttr** - returns a tuple of (nodeIDs,attributes) with the \r\n  corresponding attributes, used for editing information on the graph\r\n* **addAttr2ExistingNodes** - adds a user specified attribute to the nodes \r\n  of the network\r\n* **addAttr2Edges** - adds a user specified attribute to the edges of the \r\n  network\r\n* **getEdgeID** - returns the IDs for the edges on the graph, given the \r\n  user specified nodes (IDs given by getListOfNodeIDs) on the network \r\n* **getEdgesAttr** - returns a list of attributes of the edges (IDs given \r\n  by getEdgeID) specified by the user\r\n* **getEdgeIDswAttr** - returns a tuple of ((edge ID, attribute) = (node \r\n  out,node in, attribute)) of the edges (IDs given by getEdgeID) specified \r\n  by the user\r\n* **getExistingAttrs** - returns a list of existing attributes on the graph \r\n  (either nodes or edges)\r\n\r\n\r\n**Toolkit for handling information and data on the network:**\r\n* **combineActorBrand** - if an actor consists of different subtypes (e.g. \r\n  warehouse and brand(ALDI, REWE, etc.)), then this function helps with a \r\n  fast way of creating additional actors, before creating the network\r\n* **convertLoT2NTs** - functions like getEdgeIDswAttr, return a list of \r\n  tuples, but only a part of this is needed. This function accepts a list \r\n  of tuples as input and returns 2 lists with the same order as before.\r\n* **convertTup2LoT** - functions like addAttr2ExistingNodes, accept a list \r\n  of tuples as input, but only a list available. This function accepts 2 \r\n  lists as input and returns a list on tuples with the same order as before.\r\n* **getAllCombinations** - getEdgeID is a function that has the \r\n  corresponding nodes as input, and returns a direct  1-to-1 list (node out,\r\n  node in). If all possible combinations of edges between 2 nodes are to be \r\n  returned, this function helps with that.\r\n* **convertMatrix** - 2 applications:\r\n    1. for calibration might be needed if calibration measure is of \r\n       different dimension as the calculated flows\r\n    2. if a matrix with redundant information needs to be created from a \r\n       matrix with minimum information (e.g. similar geographical distances \r\n       between nodes to be put into a distance matrix)\r\n\r\n**Mapping raw data objects to network data objects:**\r\n* **proxyModel** - simple fraction model. If data for correlated variable \r\n  is available, this model may be used to use the proxy data to model the \r\n  data in question (e.g. modellled data = produced eggs, proxy data= number \r\n  of laying hens)\r\n* **furnessModel** - given geographical distance, supply and demand of the \r\n  participating nodes and the free parameter (resistance factor) beta this \r\n  function returns the flow between given nodes (beta needs to be \r\n  determined by hymanModel / calibration)\r\n  * NOTE that the attribute 'distance' needs to be defined on the edges of \r\n    the participating nodes. \r\n  * NOTE that the attribute 'output' needs to be defined on the nodes \r\n    supplying the product. \r\n  * NOTE that the attribute 'input' needs to be defined on the nodes \r\n    demanding the product.\r\n\r\n* **hymanModel** - calculates resistance factor beta given a transport \r\n  distance. Returns the flow between participating nodes of supply and demand. \r\n  * NOTE that each of the returned values are POSSIBLE average transport \r\n    distance. The best one still needs to be determined(see calibration). \r\n  * NOTE that the attribute 'distance' needs to be defined on the edges of \r\n    the participating nodes. \r\n  * NOTE that the attribute 'output' needs to be defined on the nodes \r\n    supplying the product. \r\n  * NOTE that the attribute 'input' needs to be defined on the nodes \r\n    demanding the product.\r\n\r\n* **calibration** - function for calculating the best configuration of \r\n  given transport distances and corresponding flows. A number of possible \r\n  average transport distances are given by the function \r\n  calcPotTransportDistances. The function hymanModel calculates the \r\n  corresponding flows. Now this needs to be calibrated against a measure to \r\n  determine which average transport distance fits best the calibration \r\n  measure. This function accepts a 4D-Tensor of all flows as input [supply,\r\n  demand,product,transport distance] and the calibration measure in question. \r\n  * NOTE that each of the returned values are POSSIBLE average transport \r\n    distance. The best one still needs to be determined(see calibration). \r\n  * NOTE that the attribute 'distance' needs to be defined on the edges of \r\n    the participating nodes. \r\n  * NOTE that the attribute 'output' needs to be defined on the nodes \r\n    supplying the product. \r\n  * NOTE that the attribute 'input' needs to be defined on the nodes \r\n    demanding the product.\r\n  \r\n* **getDistMatrix** - accesses the graph for attribute 'distance' for \r\n  user-specified nodes, return a dataframe containing information of the \r\n  geographical distance between the locations of given nodes (needs to be \r\n  entered into the graphe beforehand via the function addAttr2Edges)\r\n  * NOTE that the attribute 'distance' needs to be defined on the edges of \r\n    the participating nodes.\r\n\r\n* **optFlow, minOptFlowForBeta** - calculating and minimizing the optimal \r\n  flow given supply and demand of a product and the distance between \r\n  participating nodes. Needed for calculating minimum transport distance \r\n  (see calcPotTransportDistances). \r\n  * NOTE that the attribute 'distance' needs to be defined on the edges of \r\n    the participating nodes. \r\n  * NOTE that the attribute 'output' needs to be defined on the nodes \r\n    supplying the product. \r\n  * NOTE that the attribute 'distance' needs to be defined on the edges of \r\n    the participating nodes.\r\n\r\n* **propFlow** - calculating the proportional flow given supply and demand \r\n  of a product and the distance between participating nodes. Needed for \r\n  calculating maximum transport distance (see calcPotTransportDistances). \r\n  * NOTE that the attribute 'distance' needs to be defined on the edges of \r\n    the participating nodes.\r\n  * NOTE that the attribute 'output' needs to be defined on the nodes \r\n    supplying the product. \r\n  * NOTE that the attribute 'distance' needs to be defined on the edges of \r\n    the participating nodes.\r\n\r\n\r\n* **calcPotTransportDistances** - calculates the range of possible average \r\n  transport distances and returns a list of values within this interval. \r\n  The number of returned values from this interval may be specified by the \r\n  user (needed for hymanModel to determine beta for furnessModel). \r\n  * NOTE that each of the returned values are POSSIBLE average transport \r\n    distance. The best one still needs to be determined(see calibration). \r\n  * NOTE that the attribute 'distance' needs to be defined on the edges of \r\n    the participating nodes. \r\n  * NOTE that the attribute 'output' needs to be defined on the nodes \r\n    supplying the product. \r\n  * NOTE that the attribute 'input' needs to be defined on the nodes \r\n    demanding the product.\r\n  \r\n* **getWeightedDist** - returns the average transport distance, given the \r\n  flow between participating nodes of supply and demand. \r\n  * NOTE that each of the returned values are POSSIBLE average transport \r\n    distance. The best one still needs to be determined(see calibration). \r\n  * NOTE that the attribute 'distance' needs to be defined on the edges of \r\n    the participating nodes. \r\n  * NOTE that the attribute 'output' needs to be defined on the nodes \r\n    supplying the product. \r\n  * NOTE that the attribute 'input' needs to be defined on the nodes \r\n    demanding the product.\r\n\r\n\r\n\r\n### Create hdf5 file structure for raw data objects\r\n**Purpose:** create hdf5 file structure for raw data objects including \r\ninfos about metadata structure. This is optional, but highly recommended. \r\nComplex supply chain models are based on complex input data, so a \r\nstructured centralized data platform that gives easy access is necessary.\r\n\r\nGet full documentation in python by\r\n\r\n> from supplychainmodelhelper import mds\r\n\r\n> help(mds)\r\n\r\nGet documentation on 1 particular function\r\n\r\n> help(mds.Datacube.[INSERT FUNCTION NAME HERE])\r\n\r\n**function names:**    \r\n* **\\_\\_init\\_\\_** - initialise database: a new hdf5 file created or an \r\n  existing accessed \r\n\r\n* **add2TemplateMDofDB** - extend the existing basic metadata schema of the \r\n  database\r\n\r\n* **removeFromTemplateMDofDB** - remove an existing element from the md \r\n  schema of the database\r\n     \r\n* **add2TemplateMDofDataset** - extend the existing basic metadata schema \r\n  of an existing folder\r\n    \r\n* **removeElementTemplateDataSetMD** - remove an element of the md schema \r\n  of a dataset\r\n\r\n* **addFolder2ExistingDB** - add a folder to the database, incl. a list of \r\n  metadata information based on the current metadata schema\r\n\r\n* **removeFolder** - remove an existing folder from the database\r\n    \r\n* **addDataSet2ExistingFolder** - add a dataset to an existing folder, incl.\r\n  a list of metadata information based on the current metadataschema\r\n    \r\n* **getDataFrameFromFolder** - get an existing dataset from a specific \r\n  folder in the database\r\n\r\n* **removeDatasetFromFolder** - remove an existing dataset from an existing \r\n  folder in the database\r\n    \r\n* **getMDFromDataSet**- get metadata information about an existing dataset \r\n  in the database\r\n    \r\n* **getMDFromFolder** - get metadata information about an existing folder \r\n  in the database\r\n    \r\n* **getMDfrom_db** - get metadata information about the database\r\n\r\n* **editMDofDataset** - if the user changes the meta data schema of the \r\n  datasets, this needs to be updated with every dataset in the db. This \r\n  function helps with that.\r\n\r\n* **editMDofDB** - if the user changes the metadata schema of the database, \r\n  the new entries need to be filled with content. This function helps with \r\n  that.\r\n\r\n* **exportTemplateMDSchemaofDB2CSV** - store the current metadata schema of \r\n  the database as a template csv file, for later import\r\n    \r\n* **exportTemplateMDSchemaofDataset2CSV** - store the current metadata \r\n  schema of a folder as a template csv file, for later import \r\n    \r\n* **importMDDataofDatasetFromCSV** - import csv file with current metadata \r\n  schema of folder and filled out metadata information about containing \r\n  datasets \r\n    \r\n* **importMDDataofDBfromCSV** - import csv file with current metadata \r\n  schema of database and filled out metadata information about containing \r\n  datasets\r\n        \r\n## Assorted function to further support the user\r\n* **importDataFromFolder** - IF the user already has a data folder with \r\n  certain specifications\r\n\r\n> from supplychainmodelhelper import datahandling as dh\r\n\r\n> help(dh.importDataFromFolder)\r\n\r\nthis function may be used to create a hdf5 database without much effort.\r\nWith this a complete folder of raw data may be imported into a hdf5 database.\r\nNote that this function is still in the testing phase and needs further \r\nupdates.\r\n\r\n* **decBSList** - if a list of strings or bytestrings are given, this \r\n  function returns a list of strings. No need to check if some string is \r\n  one or the other, just apply this to your list.\r\n\r\n* **decBS** - if a string or bytestring is given, this function returns a \r\n  string. No need to check if some string is one or the other, just apply \r\n  this to your list.\r\n\r\n\r\n## Still to do\r\n* check proxy model for vegetables = identical/similar to eggs in FoodFlow?\r\n* video tutorials:\r\n    * graphoperations\r\n    * datacube\r\n    * datahandling\r\n    * what is to do for FoodFlow\r\n    * export graph to hdf5 and to graphml\r\n* make it possible to filter/link 2 LoTs via common attribute (intersect?)\r\n* check minimizing of active edges still possible with concept of distance \r\n  matrix mapped to graph\r\n* get all content of list of given node ids\r\n* on creating graph str should be accepted (currently list only)\r\n* check if get attributes of nodes/edges is always in a tuple\r\n* add attributes in tuples\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/DjMaFu/supplychainmodulator",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "supplychainmodelhelper",
    "package_url": "https://pypi.org/project/supplychainmodelhelper/",
    "platform": null,
    "project_url": "https://pypi.org/project/supplychainmodelhelper/",
    "project_urls": {
      "Homepage": "https://gitlab.com/DjMaFu/supplychainmodulator"
    },
    "release_url": "https://pypi.org/project/supplychainmodelhelper/0.2.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A package to help with your supply chain model",
    "version": "0.2.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14284105,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd410a8ab1605ba579e21806dd975a95f5bc4e76da7eb01b1db0732956b18947",
          "md5": "9fcb42d34ec085a3db0e45ca4ac658b8",
          "sha256": "4cf2fbfef8de1e2a66853ca94f7054684e4ad28bc2f396a184d22b180d6a967a"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fcb42d34ec085a3db0e45ca4ac658b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 82670,
        "upload_time": "2021-08-09T07:10:29",
        "upload_time_iso_8601": "2021-08-09T07:10:29.015379Z",
        "url": "https://files.pythonhosted.org/packages/dd/41/0a8ab1605ba579e21806dd975a95f5bc4e76da7eb01b1db0732956b18947/supplychainmodelhelper-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7727434133ddef9a726575bc48bdc7f7b7aa760d4552094bddab08d53528b729",
          "md5": "ed2cfacd9095f9fd574c3808e64ee28e",
          "sha256": "2fc70c20d8d225d0dcd5eba0f86e5f49fe1efb49db77bb8dda883110b8566ccb"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ed2cfacd9095f9fd574c3808e64ee28e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44771,
        "upload_time": "2021-08-09T07:10:30",
        "upload_time_iso_8601": "2021-08-09T07:10:30.829605Z",
        "url": "https://files.pythonhosted.org/packages/77/27/434133ddef9a726575bc48bdc7f7b7aa760d4552094bddab08d53528b729/supplychainmodelhelper-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b8d10035958c1ebfb9c2eda1c94554d4459554e38a7f6238fcd0faa4a3e427c",
          "md5": "48a9a5e5788dfa097f619c5d2cf70c1d",
          "sha256": "db12d5d22c2e458e15e7587aa97723ea41e89b28d4a16908efbf808b2b20bada"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48a9a5e5788dfa097f619c5d2cf70c1d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 51854,
        "upload_time": "2022-01-05T11:49:09",
        "upload_time_iso_8601": "2022-01-05T11:49:09.968566Z",
        "url": "https://files.pythonhosted.org/packages/4b/8d/10035958c1ebfb9c2eda1c94554d4459554e38a7f6238fcd0faa4a3e427c/supplychainmodelhelper-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e94912b2833f705368a5441b4665e0d9c9969106729de2e35d802415ec4e493",
          "md5": "65e8b384321a6bf35df9f03d45b9873e",
          "sha256": "208482bc259f2430cb609af5d14a851739474056e9205057179cb5fea27a97e6"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "65e8b384321a6bf35df9f03d45b9873e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51816,
        "upload_time": "2022-01-05T11:49:12",
        "upload_time_iso_8601": "2022-01-05T11:49:12.704350Z",
        "url": "https://files.pythonhosted.org/packages/7e/94/912b2833f705368a5441b4665e0d9c9969106729de2e35d802415ec4e493/supplychainmodelhelper-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2b5f842787fa98302a6b0dd56afe3b5dfe7d2fde7ef30300060d75fb329a151",
          "md5": "f240e3cb99b36c4fe21c388ff141bbe6",
          "sha256": "ce9db5f3117b4818d83e6793e32d38bcf620a813c652945c2f0498bcfae22469"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f240e3cb99b36c4fe21c388ff141bbe6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 54768,
        "upload_time": "2022-02-08T07:50:48",
        "upload_time_iso_8601": "2022-02-08T07:50:48.096318Z",
        "url": "https://files.pythonhosted.org/packages/b2/b5/f842787fa98302a6b0dd56afe3b5dfe7d2fde7ef30300060d75fb329a151/supplychainmodelhelper-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d6bd52f81b9d2cf7762e0866923eedd1853351b399aae37c2b3308fe6a06732",
          "md5": "ecc9154c0a02610227bb7e9331cb4072",
          "sha256": "17790c322e02d264f63b9129503898508aa4234848bdbc641813858c20ed8eff"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ecc9154c0a02610227bb7e9331cb4072",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55786,
        "upload_time": "2022-02-08T07:50:50",
        "upload_time_iso_8601": "2022-02-08T07:50:50.822913Z",
        "url": "https://files.pythonhosted.org/packages/4d/6b/d52f81b9d2cf7762e0866923eedd1853351b399aae37c2b3308fe6a06732/supplychainmodelhelper-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41ec8770cd16ceb350bf2c069fb82c09a798dfc93e768f97ea9f90320bfa71df",
          "md5": "465c28c0daa229467e2c3ab6d9e7aa7b",
          "sha256": "8a83938858856344ea08ec5789f6307f38a4d8b99bf6bcf91e273742c7e785eb"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "465c28c0daa229467e2c3ab6d9e7aa7b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 55503,
        "upload_time": "2022-02-08T15:28:35",
        "upload_time_iso_8601": "2022-02-08T15:28:35.271593Z",
        "url": "https://files.pythonhosted.org/packages/41/ec/8770cd16ceb350bf2c069fb82c09a798dfc93e768f97ea9f90320bfa71df/supplychainmodelhelper-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f71a40185afb6df01cbce9c273571bcc5ace81e74dd42aaaa7890224c5363da5",
          "md5": "fee72b0a4a1fe74e4b64264aeae7eb16",
          "sha256": "947621e4047f1dc244d5e348e9f5058ea9b46a8697a5e9b9c2446fc4e6f1e501"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fee72b0a4a1fe74e4b64264aeae7eb16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56586,
        "upload_time": "2022-02-08T15:28:38",
        "upload_time_iso_8601": "2022-02-08T15:28:38.700585Z",
        "url": "https://files.pythonhosted.org/packages/f7/1a/40185afb6df01cbce9c273571bcc5ace81e74dd42aaaa7890224c5363da5/supplychainmodelhelper-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec735108de575b2c8758d92cc67f9edd443f67dcd4b834d1d1e7db8911e322d2",
          "md5": "6b2f101edd469880eb09ce5d5c19b3f2",
          "sha256": "37f346ae60d74f3e10340a2c9b174e85da081408462da08cbcaec63fcee532de"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b2f101edd469880eb09ce5d5c19b3f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 55763,
        "upload_time": "2022-03-10T08:50:11",
        "upload_time_iso_8601": "2022-03-10T08:50:11.701893Z",
        "url": "https://files.pythonhosted.org/packages/ec/73/5108de575b2c8758d92cc67f9edd443f67dcd4b834d1d1e7db8911e322d2/supplychainmodelhelper-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb86e17d1b30e638be3d5efc8240f062a0b51cdf59053012088123895f836f32",
          "md5": "844929f851e4e11342f4213a1e80fab3",
          "sha256": "e8d0c2bd628a47abd90281d9ff3bab5ac7fc94eb3e8f738d11e26fa618a9478d"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "844929f851e4e11342f4213a1e80fab3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55995,
        "upload_time": "2022-03-10T08:50:15",
        "upload_time_iso_8601": "2022-03-10T08:50:15.940653Z",
        "url": "https://files.pythonhosted.org/packages/eb/86/e17d1b30e638be3d5efc8240f062a0b51cdf59053012088123895f836f32/supplychainmodelhelper-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41e0274835f7c139715470bec63fc30921db18bb687b2e2756f05ad54eb231d8",
          "md5": "d5cae8e055261f183332328f229111be",
          "sha256": "f0def75646f0e43afc98899eba91c44efbd1091519676881828c0a271a9f0eca"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5cae8e055261f183332328f229111be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60185,
        "upload_time": "2022-06-29T11:59:19",
        "upload_time_iso_8601": "2022-06-29T11:59:19.522760Z",
        "url": "https://files.pythonhosted.org/packages/41/e0/274835f7c139715470bec63fc30921db18bb687b2e2756f05ad54eb231d8/supplychainmodelhelper-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17f7f47986bc2f66162b46ec1f9514ac80b291349146d5195adc895bf9df3a47",
          "md5": "cdb09e0a570e2ba7e5c42b51b41f0e06",
          "sha256": "95191dfa9f32a1c84c9efd2d2f90047d7ed1958008c5c395ecaee15f4b98fa85"
        },
        "downloads": -1,
        "filename": "supplychainmodelhelper-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "cdb09e0a570e2ba7e5c42b51b41f0e06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60353,
        "upload_time": "2022-06-28T07:57:32",
        "upload_time_iso_8601": "2022-06-28T07:57:32.978602Z",
        "url": "https://files.pythonhosted.org/packages/17/f7/f47986bc2f66162b46ec1f9514ac80b291349146d5195adc895bf9df3a47/supplychainmodelhelper-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41e0274835f7c139715470bec63fc30921db18bb687b2e2756f05ad54eb231d8",
        "md5": "d5cae8e055261f183332328f229111be",
        "sha256": "f0def75646f0e43afc98899eba91c44efbd1091519676881828c0a271a9f0eca"
      },
      "downloads": -1,
      "filename": "supplychainmodelhelper-0.2.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d5cae8e055261f183332328f229111be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 60185,
      "upload_time": "2022-06-29T11:59:19",
      "upload_time_iso_8601": "2022-06-29T11:59:19.522760Z",
      "url": "https://files.pythonhosted.org/packages/41/e0/274835f7c139715470bec63fc30921db18bb687b2e2756f05ad54eb231d8/supplychainmodelhelper-0.2.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17f7f47986bc2f66162b46ec1f9514ac80b291349146d5195adc895bf9df3a47",
        "md5": "cdb09e0a570e2ba7e5c42b51b41f0e06",
        "sha256": "95191dfa9f32a1c84c9efd2d2f90047d7ed1958008c5c395ecaee15f4b98fa85"
      },
      "downloads": -1,
      "filename": "supplychainmodelhelper-0.2.7.tar.gz",
      "has_sig": false,
      "md5_digest": "cdb09e0a570e2ba7e5c42b51b41f0e06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 60353,
      "upload_time": "2022-06-28T07:57:32",
      "upload_time_iso_8601": "2022-06-28T07:57:32.978602Z",
      "url": "https://files.pythonhosted.org/packages/17/f7/f47986bc2f66162b46ec1f9514ac80b291349146d5195adc895bf9df3a47/supplychainmodelhelper-0.2.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}