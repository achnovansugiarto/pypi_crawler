{
  "info": {
    "author": "Shivam Saini",
    "author_email": "shivamsn97@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# SmartInput\nMuch better implementation of the python input function, with hints and history support.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install smartinput.\n\n__Note:__ Windows support is temporarily dropped. We are working on a fix and will update it soon.\n```bash\npip install smartinput --upgrade\n```\n\nOr alternatively, you can install the latest version using git:\n```bash\ngit clone https://github.com/shivamsn97/smartinput\ncd smartinput\npython setup.py install\n```\n## Usage\n\n### Using Smart Input:\n```python\nfrom smartinput import sinput\nmystr = sinput(\"Enter your name: \") #This parameter is optional\n#This will work as a normal input function.\n\nmystr2 = sinput(\"Enter your designation: \", hints=[\"teacher\",\"student\",\"developer\",\"hobbyist\"])\n#This will show hints whenever user will input something.\n```\n#### You can further customize the input field:\n```python\nfrom smartinput import sinput, Fore\nmystr = sinput(\"Name: \", hints=[\"Shivam\", \"Tushar\", \"Pulkit\", \"Imran\"], color=Fore.BLUE, hintcolor=Fore.GREEN)\n```\n#### Input History\nYes. You heard it right. sinput supports History. Which means you can use up/down arrow keys to navigate to previously used inputs. By default, previously used history is also treated as hints, and current input is automatically added to the provided History object. \n```python\nfrom smartinput import sinput, History, Fore\nmyhistory = History()\nstr1 = sinput(\">> \", history=myhistory, color=Fore.BLUE)\nstr2 = sinput(\">> \", history=myhistory, color=Fore.BLUE)\nstr3 = sinput(\">> \", history=myhistory, color=Fore.BLUE)\nstr4 = sinput(\">> \", history=myhistory, color=Fore.BLUE)\n#You can use up and down arrow keys to navigate to history. Also, history will be shown as hints.\n\nstr5 = sinput(\">> \", history=myhistory, historyAsHint=False, color=Fore.BLUE)\n#Here, history will not be considered as hints.\n\nstr6 = sinput(\">> \", history=myhistory,autohistory=False, color=Fore.BLUE)\n#The input of this command will not be added to history automatically.\n```\n\n### Create a Shell \nYou can create a fully interactive shell using smartinput, in just a few lines.\n\n#### Making a callback function\nTo create a shell, you must have a function that accepts two positional parameters, first is the input provided by the user, and second is a instance of a class that will be used to interact with shell in runtime.\n```python\ndef handle_query(query, shell):\n    shell.out(\"You said: \" + query) #This will output the first parameter on the shell.\n    #TODO:  in future versions, you will also be able to use return in place of shell.out.\n```\n\nYou can also exit from the shell using shell.exit()\n```python\ndef handle_query(query, shell):\n    if(\"bye\" in query):\n        shell.exit()  #will exit the shell when the input is bye.\n    shell.out(\"You said: \" + query) #This will output the first parameter on the shell.\n```\n\nAlert message (Something like *Please Wait...*)\nIt automatically disappears on next alert or output.\n```python\nfrom time import sleep\n\ndef handle_query(query, shell):\n    shell.alert(\"Please wait. Thinking...\")\n    sleep(3)  #Do processing here.\n    if(\"bye\" in query):\n        shell.exit()  #will exit the shell when the input is bye.\n    shell.out(\"You said: \" + query) \n```\n\n#### Making our Shell\n```python\nfrom smartinput import Shell, Fore\nmyshell = Shell()\n#Important:\nmyshell.setcallback(handle_query) #handle_query function was defined in the above section\n\n#Optional:\nmyshell.setintitle(\"Input: \") #defaults to \"> \"\nmyshell.setouttitle(\"Output: \") #defaults to \"< \"\nmyshell.setinputcolor(Fore.BLUE)\nmyshell.setoutputcolor(Fore.GREEN)\nmyshell.setalertcolor(Fore.RED)  # Color for the alert messsage.\nmyshell.setexiton(\"quit\") #defaults to \"exit\". Whenever user inputes this or press ctrl+d (EOF, linux), the shell exits.\n\n#You can also pass all these in the Shell constructor:\n#myshell = Shell(callback=handle_query, intitle=\"Input: \", outtitle=\"Output: \", inputcolor=Fore.BLUE, outputcolor=Fore.GREEN, alertcolor=Fore.RED, exiton=\"quit\")\n\n#Start the shell using:\nmyshell.start()\n```\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shivamsn97/smartinput",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "smartinput",
    "package_url": "https://pypi.org/project/smartinput/",
    "platform": "",
    "project_url": "https://pypi.org/project/smartinput/",
    "project_urls": {
      "Homepage": "https://github.com/shivamsn97/smartinput"
    },
    "release_url": "https://pypi.org/project/smartinput/1.0.8/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Much better implementation of the python input function, with hints and history support.",
    "version": "1.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7542846,
  "releases": {
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "310912b8552c56293e587c41231eef665f8792e4903f2fb894fbf63f746c5718",
          "md5": "03c6171915464e3e6a34def9b1323f06",
          "sha256": "ce31d3e0bdd6e06b490f4eb35967065a793619aa062c17536f4513054ab85b4e"
        },
        "downloads": -1,
        "filename": "smartinput-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "03c6171915464e3e6a34def9b1323f06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5923,
        "upload_time": "2020-06-23T14:08:03",
        "upload_time_iso_8601": "2020-06-23T14:08:03.219999Z",
        "url": "https://files.pythonhosted.org/packages/31/09/12b8552c56293e587c41231eef665f8792e4903f2fb894fbf63f746c5718/smartinput-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "310912b8552c56293e587c41231eef665f8792e4903f2fb894fbf63f746c5718",
        "md5": "03c6171915464e3e6a34def9b1323f06",
        "sha256": "ce31d3e0bdd6e06b490f4eb35967065a793619aa062c17536f4513054ab85b4e"
      },
      "downloads": -1,
      "filename": "smartinput-1.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "03c6171915464e3e6a34def9b1323f06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 5923,
      "upload_time": "2020-06-23T14:08:03",
      "upload_time_iso_8601": "2020-06-23T14:08:03.219999Z",
      "url": "https://files.pythonhosted.org/packages/31/09/12b8552c56293e587c41231eef665f8792e4903f2fb894fbf63f746c5718/smartinput-1.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}