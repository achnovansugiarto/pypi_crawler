{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "py_gql_test_client\n==================\n|codecov|\n\n.. image:: https://readthedocs.org/projects/graphql-client/badge/?version=latest\n   :target: https://dkistdc.readthedocs.io/projects/graphql-client/en/latest/?badge=latest\n   :alt: Documentation Status\n\nA forked and updated project of `gqlclient <https://pypi.org/project/gqlclient/>`__ for making requests to a GraphQL server using\nstandard library or pydantic dataclasses to spare you from string manipulation.\n\nFeatures\n--------\n\n-  Use standard library dataclasses to specify graphql parameters and responses\n\n-  Use `pydantic <https://pypi.org/project/pydantic/>`__ dataclasses to\n   specify graphql parameters and responses that have type validation\n\n-  Create and execute GraphQL Queries based upon typed models\n\n-  Create and execute GraphQL Mutations based upon typed models\n\n-  Async support\n\nInstallation\n------------\n\n.. code:: bash\n\n   pip install py_gql_test_client\n\nwith ``asyncio`` support\n\n.. code:: bash\n\n   pip install py_gql_test_client[async]\n\nExamples\n--------\n\n**Query**\n\n.. code:: python\n\n   from pydantic.dataclasses import dataclass\n\n   from py_gql_test_client import GraphQLClient\n\n   @dataclass\n   class Parameters:\n       attr_one: str\n       attr_two: int\n\n   @dataclass\n   class Response:\n       attr_three: int\n       attr_four: str\n       \n   client = GraphQLClient(gql_uri=\"http://localhost:5000/graphql\")\n   parameters = Parameters(attr_one=\"foo\", attr_two=3)\n   query = client.get_query(query_base=\"baseType\", query_response_cls=Response, query_parameters=parameters)\n   print(query)\n   #{'query': '{baseType(attr_one: \"foo\", attr_two: 3){attr_three, attr_four} }'}\n   response = client.execute_gql_query(query_base=\"baseType\", query_response_cls=Response, query_parameters=parameters)\n   print(response)\n   #{\"baseType\"{\"attr_three\":5, \"attr_four\":\"bar\"}}\n\n**Mutation**\n\n.. code:: python\n\n   from pydantic.dataclasses import dataclass\n\n   from py_gql_test_client import GraphQLClient\n\n\n   @dataclass\n   class Parameters:\n       attr_one: str\n       attr_two: int\n\n\n   @dataclass\n   class Response:\n       attr_three: int\n       attr_four: str\n       \n   client = GraphQLClient(gql_uri=\"http://localhost:5000/graphql\")\n   parameters = Parameters(attr_one=\"foo\", attr_two=3)\n   query = client.get_mutation(mutation_base=\"baseMutation\", mutation_response_cls=Response, mutation_parameters=parameters)\n   print(query)\n   #{'query': 'mutation baseType {baseType(attr_one: \"foo\", attr_two: 3){ok, attr_three, attr_four} }', 'operationName': 'baseType'}\n\n   response = client.execute_gql_mutation(mutation_base=\"baseMutation\", mutation_response_cls=Response, mutation_parameters=parameters)\n   print(response)\n   #{\"baseMutation\": {\"ok\": true, \"Response\": {\"attr_three\":5, \"attr_four\":\"bar\"} }}\n\n**Encoders**\n\n.. code:: python\n\n    from dataclasses import dataclass\n\n    from py_gql_test_client import GraphQLClient\n    from py_gql_test_client import GraphQLClient, dataclass_encoder\n\n    # set the default encoder to dataclass_encoder\n    client = GraphQLClient(gql_uri=\"http://127.0.0.1:30003/graphql\", default_response_encoder=dataclass_encoder)\n\n    @dataclass\n    class QueryResponse:\n        workflowId: int\n        workflowName: str\n        workflowDescription: str\n\n    response = client.execute_gql_query(\"workflows\", QueryResponse)\n    print(response)\n    # Response type is a list of dataclasses\n    # [QueryResponse(workflowId=1, workflowName='gql3_full - workflow_name', workflowDescription='gql3_full - workflow_description'), QueryResponse(workflowId=2, workflowName='VBI base calibration', workflowDescription='The base set of calibration tasks for VBI.'), QueryResponse(workflowId=3, workflowName='VISP base calibration', workflowDescription='The base set of calibration tasks for VISP.'), QueryResponse(workflowId=4, workflowName='VTF base calibration', workflowDescription='The base set of calibration tasks for VTF.'), QueryResponse(workflowId=5, workflowName='DLNIRSP base calibration', workflowDescription='The base set of calibration tasks for DLNIRSP.'), QueryResponse(workflowId=6, workflowName='CRYONIRSP base calibration', workflowDescription='The base set of calibration tasks for CRYONIRSP.')]\n\n    from py_gql_test_client import json_encoder\n    # for this call override the default encoder to the json encoder\n    response = client.execute_gql_query(\"workflows\",QueryResponse, response_encoder=json_encoder)\n    print(response)\n    # Response is a json formatted string\n    # '{\"workflows\": [{\"workflowId\": 1, \"workflowName\": \"gql3_full - workflow_name\", \"workflowDescription\": \"gql3_full - workflow_description\"}, {\"workflowId\": 2, \"workflowName\": \"VBI base calibration\", \"workflowDescription\": \"The base set of calibration tasks for VBI.\"}, {\"workflowId\": 3, \"workflowName\": \"VISP base calibration\", \"workflowDescription\": \"The base set of calibration tasks for VISP.\"}, {\"workflowId\": 4, \"workflowName\": \"VTF base calibration\", \"workflowDescription\": \"The base set of calibration tasks for VTF.\"}, {\"workflowId\": 5, \"workflowName\": \"DLNIRSP base calibration\", \"workflowDescription\": \"The base set of calibration tasks for DLNIRSP.\"}, {\"workflowId\": 6, \"workflowName\": \"CRYONIRSP base calibration\", \"workflowDescription\": \"The base set of calibration tasks for CRYONIRSP.\"}]}'\n\n.. |codecov| image:: https://codecov.io/bb/dkistdc/graphql_client/branch/master/graph/badge.svg\n   :target: https://codecov.io/bb/dkistdc/graphql_client",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-gql-test-client",
    "package_url": "https://pypi.org/project/py-gql-test-client/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-gql-test-client/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/py-gql-test-client/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Forked and updated version of https://pypi.org/project/gqlclient/",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7196666,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f8334782a327fbf8858ae2631b86d093071bf952a681efe57a6730b3c1cf473",
          "md5": "2384a1d9e172f1195ffe0ba3bc88f9a7",
          "sha256": "42df6c4929ca09ea955b4bedf59ee158528b4fc8bf5f6e31d508dceff5c40b8e"
        },
        "downloads": -1,
        "filename": "py_gql_test_client-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2384a1d9e172f1195ffe0ba3bc88f9a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12835,
        "upload_time": "2020-03-03T15:09:19",
        "upload_time_iso_8601": "2020-03-03T15:09:19.095399Z",
        "url": "https://files.pythonhosted.org/packages/1f/83/34782a327fbf8858ae2631b86d093071bf952a681efe57a6730b3c1cf473/py_gql_test_client-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eed3de72299dbea4e6b9624bc01a020e2d7097ed4cf286b2642856c641614a97",
          "md5": "c134026994d68a3388ef2774267b9e13",
          "sha256": "a1721091ba1215db94d92b2c6b70f1604795a492f71d3114e3722bdae0f0cb1a"
        },
        "downloads": -1,
        "filename": "py_gql_test_client-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c134026994d68a3388ef2774267b9e13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12856,
        "upload_time": "2020-05-08T12:04:08",
        "upload_time_iso_8601": "2020-05-08T12:04:08.318867Z",
        "url": "https://files.pythonhosted.org/packages/ee/d3/de72299dbea4e6b9624bc01a020e2d7097ed4cf286b2642856c641614a97/py_gql_test_client-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eed3de72299dbea4e6b9624bc01a020e2d7097ed4cf286b2642856c641614a97",
        "md5": "c134026994d68a3388ef2774267b9e13",
        "sha256": "a1721091ba1215db94d92b2c6b70f1604795a492f71d3114e3722bdae0f0cb1a"
      },
      "downloads": -1,
      "filename": "py_gql_test_client-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c134026994d68a3388ef2774267b9e13",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12856,
      "upload_time": "2020-05-08T12:04:08",
      "upload_time_iso_8601": "2020-05-08T12:04:08.318867Z",
      "url": "https://files.pythonhosted.org/packages/ee/d3/de72299dbea4e6b9624bc01a020e2d7097ed4cf286b2642856c641614a97/py_gql_test_client-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}