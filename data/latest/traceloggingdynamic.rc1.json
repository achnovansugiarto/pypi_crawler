{
  "info": {
    "author": "Doug Cook",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Logging"
    ],
    "description": "# traceloggingdynamic\r\n\r\nThe **traceloggingdynamic** module provides support for generating\r\n[TraceLogging](https://docs.microsoft.com/windows/win32/tracelogging/trace-logging-portal)-encoded\r\n[ETW (Event Tracing for Windows)](https://docs.microsoft.com/windows/win32/etw/event-tracing-portal)\r\nevents directly from Python (no C/C++ code). The events can be generated and\r\ncollected on Windows Vista or later. The events can be decoded on Windows 10\r\nor later.\r\n\r\nThis is a middle-layer API:\r\n\r\n- Directly exposes ETW concepts rather than wrapping them in Python idioms.\r\n- Makes it possible for the caller to be efficient even when that means the\r\n  caller might need to do more work (e.g. take names as bytes so that the\r\n  caller has the option of avoiding the string encoding for each event).\r\n- Could be used directly by a consumer or could be wrapped in a higher-level\r\n  module to create a more Python-friendly API.\r\n\r\n## Public\r\n\r\n- `Provider` class: represents an ETW data source with a name and id. Core\r\n  methods: provider.is_enabled(event_level, event_keyword),\r\n  provider.write(event_builder).\r\n- `EventBuilder` class: Used to put together the data for an event. Core\r\n  methods: `eb.reset(event_name, event_level, event_keyword, [more...])`,\r\n  `eb.add_FIELDTYPE(field_name, field_value, [out_type, tag])`. When the event\r\n  is ready, send it to ETW with `provider.write(eb)`.\r\n- `OutType` enum: Formatting hints that can be added to a field.\r\n- `providerid_from_name` function: Hashes a provider name string to generate\r\n  a provider id UUID. Hash is generated using the same algorithm as other ETW\r\n  APIs and tools such as .NET EventSource and WinRT LoggingChannel.\r\n\r\n## Example\r\n\r\n```python\r\n# At start of program:\r\nprovider = Provider(b'MyCompany.MyGroup.MyComponent')\r\n\r\n# When you want to generate an event:\r\nmy_field_value = True\r\nmy_event_level = 5      # 5 = Verbose\r\nmy_event_keyword = 0x21 # User-defined bits indicating categories.\r\nif provider.is_enabled(my_event_level, my_event_keyword): # Anybody listening?\r\n    eb = EventBuilder()\r\n    eb.reset(b'MyEventName', my_event_level, my_event_keyword)\r\n    eb.add_bool32(b'MyFieldName', my_field_value) # as needed to add fields.\r\n    provider.write(eb)\r\n```\r\n\r\n## Notes\r\n\r\nCollect the events using Windows SDK tools like traceview or tracelog.\r\nDecode the events using Windows SDK tools like traceview or tracefmt.\r\nFor example, for `Provider(b'MyCompany.MyComponent')`:\r\n\r\n```powershell\r\ntracelog -start MyTrace -f MyTraceFile.etl -guid *MyCompany.MyComponent -level 5 -matchanykw 0xf\r\n<run your Python program>\r\ntracelog -stop MyTrace\r\ntracefmt -o MyTraceData.txt MyTraceFile.etl\r\n```\r\n\r\nETW events are limited in size (event size = headers + metadata + data).\r\nWindows will drop any event that is larger than 64KB and will drop any event\r\nthat is larger than the buffer size of the recording session. To help prevent\r\nunexpected event loss, this module will raise an exception if the metadata\r\nexceeds 32KB or if the data exceeds 64KB. To help track down event loss, this\r\nmodule will assert if it detects that ETW dropped an event due to size.\r\n\r\nMost ETW decoding tools are unable to decode an event with more than 128\r\nfields. This module will raise an exception if you add more than 128 fields to\r\nan event. Note that sequence fields and binary fields each count as 2 fields.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/microsoft/tracelogging",
    "keywords": "TraceLogging,ETW,TraceLoggingDynamic,events,tracing",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "traceloggingdynamic",
    "package_url": "https://pypi.org/project/traceloggingdynamic/",
    "platform": null,
    "project_url": "https://pypi.org/project/traceloggingdynamic/",
    "project_urls": {
      "Bug Tracker": "https://github.com/microsoft/tracelogging/issues",
      "Homepage": "https://github.com/microsoft/tracelogging"
    },
    "release_url": "https://pypi.org/project/traceloggingdynamic/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Generates Event Tracing for Windows events using TraceLogging",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15183473,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be40de5fff1a5ed15f4b0d46391b9ca5943003f1477e134dfead99e92f75c3c1",
          "md5": "de744f7328af969e10432615e46f8338",
          "sha256": "09b6129438b99432733de18519017a7eed8285aeaa08c0cff6de45ac60e04b75"
        },
        "downloads": -1,
        "filename": "traceloggingdynamic-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "de744f7328af969e10432615e46f8338",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16606,
        "upload_time": "2022-09-13T19:14:05",
        "upload_time_iso_8601": "2022-09-13T19:14:05.186933Z",
        "url": "https://files.pythonhosted.org/packages/be/40/de5fff1a5ed15f4b0d46391b9ca5943003f1477e134dfead99e92f75c3c1/traceloggingdynamic-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be40de5fff1a5ed15f4b0d46391b9ca5943003f1477e134dfead99e92f75c3c1",
        "md5": "de744f7328af969e10432615e46f8338",
        "sha256": "09b6129438b99432733de18519017a7eed8285aeaa08c0cff6de45ac60e04b75"
      },
      "downloads": -1,
      "filename": "traceloggingdynamic-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "de744f7328af969e10432615e46f8338",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16606,
      "upload_time": "2022-09-13T19:14:05",
      "upload_time_iso_8601": "2022-09-13T19:14:05.186933Z",
      "url": "https://files.pythonhosted.org/packages/be/40/de5fff1a5ed15f4b0d46391b9ca5943003f1477e134dfead99e92f75c3c1/traceloggingdynamic-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}