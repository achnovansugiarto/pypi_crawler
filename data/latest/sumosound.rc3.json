{
  "info": {
    "author": "Patrick Malcolm",
    "author_email": "patmalcolm91@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# SumoSound\nSumoSound is a Python package which uses Sumo's TraCI API and PyOpenAL to generate\nvehicle sounds in a 3D environment. PyOpenAL calculates the proper volume, doppler\nshift, and stereo (or surround sound) output. The package comes with some built-in \ndefault sound effects, but is fully customizable, and can calculate the sounds from\nthe point of view of either a stationary ego position or one of the vehicles in the\nsimulation.\n\n## Installation\nSumoSound can be installed using pip:\n```\npip install SumoSound\n```\n\nOr, you can simply clone the GitHub repository and add it to your Python path.\n\nYou can then import the library.\n```python\nimport SumoSound\n```\n\n### Dependencies\n* Sumo TraCI\n* PyOpenAL\n\n## Usage\nSee the example script [sound_test.py](sound_test.py) for an example.\n\nIn general, you just need to define an ```Ego``` object (either of the ```Ego``` class or a\nsubclass of it), pass this ```Ego``` object to a ```Simulation``` object, and then call \n```update()``` on the ```Simulation``` object once per simulation step. Everything else \nshould be handled automatically.\n\n## Documentation\n\n### Ego\nAn ```Ego``` object defines the position, velocity, and orientation of the listener.\nThere are 3 ego types: Stationary Ego, Ego Vehicle, and Ego Vehicle with Manually-Calculated Speed.\n\n#### Stationary Ego (```Ego```)\nThe position, velocity, and orientation of a stationary ego are controlled with the methods ```set_position()```,\n```set_velocity()```, and ```set_angle()```. The ego will default to a location of (0, 0, 0) facing east with\nzero velocity.\n```python\nego = SumoSound.Ego()\n```\n\n#### Ego Vehicle (```EgoVehicle```)\nThe position, velocity, and orientation of an ego vehicle are synced via TraCI with the vehicle with the given ID.\nThese properties are automatically updated every time step by the ```Simulation``` object.\n```python\nego = SumoSound.EgoVehicle(\"vehicleID\")\n```\n\n#### Ego Vehicle with Manually-Calculated Speed (```EgoVehicleManualSpeed```)\nThe same as an ```EgoVehicle```, but the vehicle speed is calculated based on the ego position in the previous and\ncurrent simulation time steps. This is useful if the ego vehicle is being controlled externally and the speed property\nis incorrect or undefined.\n```python\nego = SumoSound.EgoVehicleManualSpeed(\"vehicleID\")\n```\n\n### Simulation\nA ```Simulation``` object keeps track of all of the vehicles in the Sumo simulation via TraCI, updating the sound\nsources and listener position as necessary. An ego must be passed to the constructor of the ```Simulation``` object.\n```python\nsimulation = SumoSound.Simulation(ego)\n```\nAdditional parameters are available as well. Most notably, the argument ```vehicle_class_map``` can be used to tell\nSumoSound which subclass of ```Vehicle``` to use for each Sumo vehicleClass. By default, the dict\n```DEFAULT_VEHICLE_CLASS_MAP``` is used. For more information on defining custom vehicle types, see the next section.\n\nThe method ```update()``` must be called every simulation step.\n```python\nwhile True:\n    traci.simulationStep()\n    simulation.update()\n```\n\n### Vehicle\nA ```Vehicle``` object keeps track of one or more sound sources associated with the vehicle type. SumoSound comes with a\nnumber of pre-defined vehicle types which are selected automatically by the ```Simulation``` object based on the Sumo\nvehicleClass property of each vehicle. Custom vehicle types can be created by simply sub-classing the ```Vehicle```\nclass. The gain of each vehicle sound can be automatically actuated by a signal. By default, the speed and acceleration\nof the vehicle are available as signals, but custom signals can also be created.\n\n```python\nclass CustomVehicle(SumoSound.Vehicle):\n    def __init__(self, id, engine_sound_file=\"path/to/file.wav\",\n                 tire_sound_file=\"path/to/file.wav\",\n                 horn_sound_file=\"path/to/file.wav\"):\n        super().__init__(id)\n        self.horn = False  # define a custom signal called \"horn\"\n        # add an engine sound to the vehicle, actuated by the vehicle acceleration\n        engine_sound = SumoSound.VehicleSound(engine_sound_file, base_gain=0.5)\n        self.add_sound(engine_sound, \"acceleration\", response_curve=[(0, 0.5), (2.5, 1)])\n        # add a tire sound to the vehicle, actuated by the vehicle speed\n        tire_sound = SumoSound.VehicleSound(tire_sound_file, base_gain=2)\n        self.add_sound(tire_sound, \"speed\", response_curve=[(0, 0), (28, 1)])\n        # add a horn sound to the vehicle, actuated by the custom signal \"horn\"\n        horn_sound = SumoSound.VehicleSound(horn_sound_file, base_gain=2)\n        self.add_sound(horn_sound, \"horn\", response_curve=[(False, 0), (True, 1)])\n```\n\nThe argument ```response_curve``` of the method ```add_sound()``` may either be a callable with the signature\n```fun(signal_value) -> gain``` or a list of ```(signal_value, gain)``` tuples, which are interpolated as necessary to\ncalculate the sound gain from the signal value.\n\nTo associate the custom vehicle type with a vehicle class, the ```vehicle_class_map``` argument of the ```Simulation```\nconstructor must be passed a custom dict containing the desired mapping, or the default dict can be modified before\ncreating the Simulation object.\n```python\n# map the custom vehicle type to the Sumo vehicleClass \"passenger\"\nSumoSound.DEFAULT_VEHICLE_CLASS_MAP[\"passenger\"] = CustomVehicle\nsimulation = SumoSound.Simulation(ego)\n```\n\nIn order to use the custom signal to actuate the sound, simply set the signal to the desired value, and everything will\nbe automatically handled the next time the simulation is updated.\n```python\nsimulation.vehicles[\"vehicleID\"].horn = True\n```\n\n## Contribution\nIssues and pull requests are welcome.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/patmalcolm91/SumoSound/archive/v_1.0.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/patmalcolm91/SumoSound",
    "keywords": "sumo,TraCI,sound,sound effects,3D sound,OpenAL,traffic",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SumoSound",
    "package_url": "https://pypi.org/project/SumoSound/",
    "platform": "",
    "project_url": "https://pypi.org/project/SumoSound/",
    "project_urls": {
      "Download": "https://github.com/patmalcolm91/SumoSound/archive/v_1.0.2.tar.gz",
      "Homepage": "https://github.com/patmalcolm91/SumoSound"
    },
    "release_url": "https://pypi.org/project/SumoSound/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python library to add 3D sound to a Sumo traffic simulation.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6163166,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04f244622f1cb6e794f19b16e5c43357e92ed62aacfbc8d43f1e0b54a147adf4",
          "md5": "f4c55ad7638723333e24e0c895d208ec",
          "sha256": "52d06a1170b0f33d1cb931e066e542c8fdc04f7ce5b80f73d44f40b6cc384a4c"
        },
        "downloads": -1,
        "filename": "SumoSound-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f4c55ad7638723333e24e0c895d208ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6999781,
        "upload_time": "2019-11-06T10:59:03",
        "upload_time_iso_8601": "2019-11-06T10:59:03.878344Z",
        "url": "https://files.pythonhosted.org/packages/04/f2/44622f1cb6e794f19b16e5c43357e92ed62aacfbc8d43f1e0b54a147adf4/SumoSound-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77348cc319c9e777029fa23621ecfe070d5fbfdb740bd3881448cf7cacbdf460",
          "md5": "c3d8b0a620a1b29adad6f86ef397e41c",
          "sha256": "7e9f9ef329b21bdc27ff8b1bb94ae34f5cad114f4fdddd31567a78ca64fc9872"
        },
        "downloads": -1,
        "filename": "SumoSound-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3d8b0a620a1b29adad6f86ef397e41c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7003348,
        "upload_time": "2019-11-06T11:21:11",
        "upload_time_iso_8601": "2019-11-06T11:21:11.921970Z",
        "url": "https://files.pythonhosted.org/packages/77/34/8cc319c9e777029fa23621ecfe070d5fbfdb740bd3881448cf7cacbdf460/SumoSound-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a446d251570f8a0f87222c984f09334cdd7fd5b8fb3f5a8b8bd82d70e2491062",
          "md5": "cecf8708d065e1cb2fefeee90dc87f3a",
          "sha256": "6224bf7ecec9ab43f75e394513ec58013eb947195df0d9506aa96b6075b2643c"
        },
        "downloads": -1,
        "filename": "SumoSound-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cecf8708d065e1cb2fefeee90dc87f3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7003848,
        "upload_time": "2019-11-19T17:02:40",
        "upload_time_iso_8601": "2019-11-19T17:02:40.757608Z",
        "url": "https://files.pythonhosted.org/packages/a4/46/d251570f8a0f87222c984f09334cdd7fd5b8fb3f5a8b8bd82d70e2491062/SumoSound-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a446d251570f8a0f87222c984f09334cdd7fd5b8fb3f5a8b8bd82d70e2491062",
        "md5": "cecf8708d065e1cb2fefeee90dc87f3a",
        "sha256": "6224bf7ecec9ab43f75e394513ec58013eb947195df0d9506aa96b6075b2643c"
      },
      "downloads": -1,
      "filename": "SumoSound-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "cecf8708d065e1cb2fefeee90dc87f3a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7003848,
      "upload_time": "2019-11-19T17:02:40",
      "upload_time_iso_8601": "2019-11-19T17:02:40.757608Z",
      "url": "https://files.pythonhosted.org/packages/a4/46/d251570f8a0f87222c984f09334cdd7fd5b8fb3f5a8b8bd82d70e2491062/SumoSound-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}