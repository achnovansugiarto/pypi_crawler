{
  "info": {
    "author": "Devin Fee",
    "author_email": "devin@devinfee.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# aiohttp-graphql\nAdds [GraphQL] support to your [aiohttp] application.\n\nBased on [flask-graphql] by [Syrus Akbary] and [sanic-graphql] by [Sergey Porivaev].\n\n[![PyPI version](https://badge.fury.io/py/aiohttp-graphql.svg)](https://badge.fury.io/py/aiohttp-graphql)\n[![Build Status](https://travis-ci.com/graphql-python/aiohttp-graphql.svg?branch=master)](https://github.com/graphql-python/aiohttp-graphql)\n[![Coverage Status](https://codecov.io/gh/graphql-python/aiohttp-graphql/branch/master/graph/badge.svg)](https://github.com/graphql-python/aiohttp-graphql)\n\n## Usage\nJust use the `GraphQLView` view from `aiohttp_graphql`\n\n```python\nfrom aiohttp_graphql import GraphQLView\n\nGraphQLView.attach(app, schema=Schema, graphiql=True)\n\n# Optional, for adding batch query support (used in Apollo-Client)\nGraphQLView.attach(app, schema=Schema, batch=True)\n```\n\nThis will add a `/graphql` endpoint to your app (customizable by passing `route_path='/mypath'` to `GraphQLView.attach`).\n\nNote: `GraphQLView.attach` is just a convenience function, and the same functionality can be achieved with\n\n```python\ngql_view = GraphQLView(schema=Schema, **kwargs)\napp.router.add_route('*', gql_view, name='graphql')\n```\n\nIt's worth noting that the the \"view function\" of `GraphQLView` is contained in `GraphQLView.__call__`. So, when you create an instance, that instance is callable with the request object as the sole positional argument. To illustrate:\n\n```python\ngql_view = GraphQLView(schema=Schema, **kwargs)\ngql_view(request)  # <-- the instance is callable and expects a `aiohttp.web.Request` object.\n```\n\n### Supported options\n-   `schema`: The `GraphQLSchema` object that you want the view to execute when it gets a valid request.\n-   `executor`: The `Executor` that you want to use to execute queries. If an `AsyncioExecutor` instance is provided, performs queries asynchronously within executorâ€™s loop.\n-   `root_value`: The `root_value` you want to provide to `executor.execute`.\n-   `context`: A value to pass as the `context` to the `graphql()` function. By default is set to `dict` with request object at key `request`.\n-   `pretty`: Whether or not you want the response to be pretty printed JSON.\n-   `graphiql`: If `True`, may present [GraphiQL] when loaded directly from a browser (a useful tool for debugging and exploration).\n-   `graphiql_version`: The version of the provided `graphiql` package.\n-   `graphiql_template`: Inject a Jinja template string to customize GraphiQL.\n-   `middleware`: Custom middleware for [graphql-python].\n-   `batch`: Set the GraphQL view as batch (for using in [Apollo-Client] or [ReactRelayNetworkLayer])\n-   `jinja_env`: Sets jinja environment to be used to process GraphiQL template. If Jinjaâ€™s async mode is enabled (by `enable_async=True`), uses\n`Template.render_async` instead of `Template.render`. If environment is not set, fallbacks to simple regex-based renderer.\n-   `max_age`: sets the response header `Access-Control-Max-Age` for preflight requests\n-   `encoder`: the encoder to use for responses (sensibly defaults to `graphql_server.json_encode`)\n-   `error_formatter`: the error formatter to use for responses (sensibly defaults to `graphql_server.default_format_error`)\n-   `enable_async`: whether `async` mode will be enabled.\n-   `subscriptions`: The [GraphiQL] socket endpoint for using subscriptions in [graphql-ws].\n\n\n## Testing\nTesting is done with `pytest`.\n\n```bash\ngit clone https://github.com/graphql-python/aiohttp-graphql\ncd aiohttp-graphql\n# Create a virtualenv\npython3.6 -m venv env && source env/bin/activate  # for example\npip install -e .[test]\npytest\n```\n\nThe tests, while modeled after sanic-graphql's tests, have been entirely refactored to take advantage of `pytest-asyncio`, conform with PEP-8, and increase readability with pytest fixtures. For usage tests, please check them out.\n\n\n## License\nCopyright for portions of project [aiohttp-graphql] are held by [Syrus Akbary] as part of project [flask-graphql] and [sanic-graphql] as part of project [Sergey Porivaev]. All other claims to this project [aiohttp-graphql] are held by [Devin Fee].\n\nThis project is licensed under the MIT License.\n\n  [GraphQL]: http://graphql.org/\n  [aiohttp]: https://github.com/aio-libs/aiohttp/\n  [flask-graphql]: https://github.com/graphql-python/flask-graphql\n  [sanic-graphql]: https://github.com/graphql-python/sanic-graphql\n  [Syrus Akbary]: https://github.com/syrusakbary\n  [Sergey Porivaev]: https://github.com/grazor\n  [GraphiQL]: https://github.com/graphql/graphiql\n  [graphql-python]: https://github.com/graphql-python/graphql-core\n  [Apollo-Client]: https://www.apollographql.com/docs/react/networking/network-layer/#query-batching\n  [Devin Fee]: https://github.com/dfee\n  [aiohttp-graphql]: https://github.com/graphql-python/aiohttp-graphql\n  [graphql-ws]: https://github.com/graphql-python/graphql-ws",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/graphql-python/aiohttp-graphql/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/graphql-python/aiohttp-graphql",
    "keywords": "api graphql protocol aiohttp",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiohttp-graphql",
    "package_url": "https://pypi.org/project/aiohttp-graphql/",
    "platform": "any",
    "project_url": "https://pypi.org/project/aiohttp-graphql/",
    "project_urls": {
      "Download": "https://github.com/graphql-python/aiohttp-graphql/releases",
      "Homepage": "https://github.com/graphql-python/aiohttp-graphql"
    },
    "release_url": "https://pypi.org/project/aiohttp-graphql/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Adds GraphQL support to your aiohttp application",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7159480,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a56d50043d131d5419e3e737044798f2ba907c09088340971f922f5d19d401e",
          "md5": "6740b4dbee19686f2325a51bd795bed8",
          "sha256": "d565518fd94437ed1bbf54502acbbe4a6479b34a4ab2b3a236220d28bf6b4df3"
        },
        "downloads": -1,
        "filename": "aiohttp-graphql-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6740b4dbee19686f2325a51bd795bed8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6642,
        "upload_time": "2017-09-23T09:41:27",
        "upload_time_iso_8601": "2017-09-23T09:41:27.263544Z",
        "url": "https://files.pythonhosted.org/packages/2a/56/d50043d131d5419e3e737044798f2ba907c09088340971f922f5d19d401e/aiohttp-graphql-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fce7953018ff0af70c515efff12175240ca1d4f9a47d2681eeba656a37e3db02",
          "md5": "1f1d9af870c563f0dc0e9de678b6369e",
          "sha256": "29035589ca0929f5dc19b09461db0a2563db0166a6efcf22e23498a44e45040e"
        },
        "downloads": -1,
        "filename": "aiohttp-graphql-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1f1d9af870c563f0dc0e9de678b6369e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19198,
        "upload_time": "2020-05-03T20:13:43",
        "upload_time_iso_8601": "2020-05-03T20:13:43.264858Z",
        "url": "https://files.pythonhosted.org/packages/fc/e7/953018ff0af70c515efff12175240ca1d4f9a47d2681eeba656a37e3db02/aiohttp-graphql-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fce7953018ff0af70c515efff12175240ca1d4f9a47d2681eeba656a37e3db02",
        "md5": "1f1d9af870c563f0dc0e9de678b6369e",
        "sha256": "29035589ca0929f5dc19b09461db0a2563db0166a6efcf22e23498a44e45040e"
      },
      "downloads": -1,
      "filename": "aiohttp-graphql-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1f1d9af870c563f0dc0e9de678b6369e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19198,
      "upload_time": "2020-05-03T20:13:43",
      "upload_time_iso_8601": "2020-05-03T20:13:43.264858Z",
      "url": "https://files.pythonhosted.org/packages/fc/e7/953018ff0af70c515efff12175240ca1d4f9a47d2681eeba656a37e3db02/aiohttp-graphql-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}