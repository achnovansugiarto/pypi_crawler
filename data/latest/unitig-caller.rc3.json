{
  "info": {
    "author": "John Lees",
    "author_email": "john@johnlees.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# unitig-caller\n[![Dev build Status](https://dev.azure.com/jlees/unitig-caller/_apis/build/status/johnlees.unitig-caller?branchName=master)](https://dev.azure.com/jlees/unitig-caller/_build/latest?definitionId=1&branchName=master)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/unitig-caller/badges/version.svg)](https://anaconda.org/bioconda/unitig-caller)\n\nDetermines presence/absence of sequence elements in bacterial sequence\ndata. Uses assemblies and/or reads as inputs.\n\nThe implementation of unitig-caller is a wrapper around the [Bifrost](https://github.com/pmelsted/bifrost) API which formats files for use with pyseer, as well as an implementation which calls sequences using an FM-index.\n\nCall mode builds a Bifrost DBG and calls the colours for each unitig within. Query mode queries\nthe colours of existing unitigs within a new population.\n\nSimple mode finds presence of unitigs in a new population using an FM-index.\n\n## Install\n\nUse `unitig-caller` if installed through pip/conda, or\n`python unitig_caller-runner.py` if using a clone of the code.\n\n### With conda (recommended)\nGet it from [bioconda](http://bioconda.github.io/):\n```\nconda install unitig-caller\n```\n\nIf you haven't set this up, first install\n[miniconda](https://docs.conda.io/en/latest/miniconda.html). Then\nadd the correct channels:\n```\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\n\n### With pip\nGet it from PyPI:\n```\npip install unitig-caller\n```\n\nRequires [bifrost](https://github.com/pmelsted/bifrost) version 1.0.3 installed, and accessible\nvia PATH (see steps for installation at Bifrost github page).\n\n### From source\nRequires `cmake`, `pthreads`, `pybind11` and a C++17 compiler (e.g. gcc >=7.3), in addition\nto the pip requirements.\n```\ngit clone https://github.com/johnlees/unitig-caller --recursive\npython setup.py install\n```\n\n## Usage\n\nThere are three ways to use this package:\n1. Build a population graph to extract unitigs for GWAS with pyseer like [unitig-counter](https://github.com/johnlees/unitig-counter) (`--call`).\n2. Find existing unitigs in a new population using a graph (`--query`).\n3. Find existing unitigs in a new population using an index (`--simple`).\n\nFor 1), run `--call` mode.\n\nBoth 2) and 3) give the same results with different index tools, both finding unitigs so pyseer models can be applied to a new population.\n\nFor 2) Run `--query` mode, specifying *new population* input fastas file names in a text file (one file per line), with `--unitigs` from *the original population*.\n\nFor 3), run `--simple` mode giving the new genomes as `--refs` and the `--unitigs` from *the original population*.\n\nThese modes are detailed below\n\n### Running Call mode\nThis uses Bifrost Build to generate a compact coloured de Bruijn graph, and return colours of unitigs within.\n\n#### If no pre-built Bifrost graph exists\n```\nunitig-caller --call --refs refs.txt --reads reads.txt --out out_prefix\n```\n\n`--refs` and `--reads` are .txt file listing paths of input ASSEMBLIES and READS respectively\n(.fasta or .fastq), each on a new line. No header row. Can either specify both or single arguments.\n\nNOTE: ensure reads and references are correctly assigned. Bifrost filters out kmers with coverage < 1 in READS\nfiles to remove sequencing errors.\n\n`--kmer` can be specified for the kmer size used to built the graph. By default this is 31 bp.\n\n#### If pre-built Bifrost graph exists\n\n```\nunitig-caller --call --graph graph.gfa --colours graph.bfg_colors --out out_prefix\n```\n\n`--graph` is a pre-built bifrost graph .gfa, and `--colours` is its associated colours file.\n\n#### For both call modes\n\n`--out` is the prefix for output files.\n\nCall mode automatically generates a .pyseer file containing unitigs found within the graph and their graph. Rtab or pyseer\nformats can be specified with `--rtab` and `--pyseer` respectively.\n\n### Running Query mode\nQueries existing unitigs in a Bifrost graph. This is useful when identical unitig definitions need to be used between populations, for example when using pyseer's prediction mode.\n\n#### If no pre-built Bifrost graph exists\n```\nunitig-caller --query --refs refs.txt --reads reads.txt --unitigs query_unitigs.fasta --out out_prefix\n```\n\n`--refs` and `--reads` are the same arguments as in `--call`.\n\n`--kmer` can be specified for the kmer size used to built the graph. By default this is 31 bp.\n\n#### If pre-built Bifrost graph exists\n\n```\nunitig-caller --query --graph graph.gfa --colours graph.bfg_colors --unitigs query_unitigs.fasta --out out_prefix\n```\n\n#### For both query modes\n\n`--unitigs` is .fasta file or text file with unitig sequences (one sequence per line, with header line).\n\n`--out` is the prefix for output files.\n\nQuery mode automatically generates a .pyseer file containing unitigs found within the graph and their graph. Rtab or pyseer\nformats can be specified with `--rtab` and `--pyseer` respectively.\n\n### Running simple mode\nThis uses suffix arrays (FM-index) provided by [SeqAn3](https://www.seqan.de/) to perform\nstring matches:\n```\nunitig-caller --simple --refs strain_list.txt --unitigs queries.txt --output calls\n```\n\n`--refs` is a required file listing input assemblies, the same as `refs` in `call`.\n\n`--unitigs` is a required list of the unitig sequences to call. The unitigs need\nto be in the first column (tab separated). A header row is assumed, so\noutput from [pyseer](https://github.com/mgalardini/pyseer) etc can be directly used.\n\n`calls_pyseer.txt` will contain unitig calls in seer/pyseer k-mer format.\n\nBy default FM-indexes are saved in the same location as the assembly files so that they can\nbe quickly loaded by subsequent runs. To turn this off use `--no-save-idx`.\n\n### Option reference\n```\nusage: unitig-caller [-h] (--call | --query | --simple) [--refs REFS]\n                     [--reads READS] [--graph GRAPH] [--colours COLOURS]\n                     [--unitigs UNITIGS] [--pyseer] [--rtab] [--out OUT]\n                     [--kmer KMER] [--write-graph]\n                     [--no-save-idx] [--threads THREADS] [--version]\n\nCall unitigs in a population dataset\n\noptional arguments:\n  -h, --help         show this help message and exit\n\nMode of operation:\n  --call             Build a DBG and call colours of unitigs within\n  --query            Query unitig colours in reference genomes/DBG\n  --simple           Use FM-index to make calls\n\nUnitig-caller input/output:\n  --refs REFS        Ref file to used to build DBG or use with --simple\n  --reads READS      Read file to used to build DBG\n  --graph GRAPH      Existing graph in GFA format\n  --colours COLOURS  Existing bifrost colours file in .bfg_colors format\n  --unitigs UNITIGS  Text or fasta file of unitigs to query (--query or --simple)\n  --pyseer           Output pyseer format\n  --rtab             Output rtab format\n  --out OUT          Prefix for output [default = 'unitig_caller']\n\nBifrost options:\n  --kmer KMER        K-mer size for graph building/querying [default = 31]\n  --write-graph      Output DBG built with unitig-caller\n\nSimple mode options:\n  --no-save-idx      Do not save FM-indexes for reuse\n\nOther:\n  --threads THREADS  Number of threads to use [default = 1]\n  --version          show program's version number and exit\n```\n\n## Interpreting output files\n\nPyseer format details unitig sequences followed by the file names of the genomes in which they are found.\n\nIf a unitig is not found in any genomes, it will have no associated file names.\n\n```\nTATCCAGGCAGGAAAATATACAGGGAACGTTGTGTTTTCGATTAAGTATGAATGATGTAAA | 12673_8#24.contigs_velvet:1 12673_8#26.contigs_velvet:1 12673_8#29.contigs_velvet:1\nGGCTATTGAAGCACCAGAGAATATCCAGGCAGGAAAATATACAGGGAACGT | 12673_8#24.contigs_velvet:1 12673_8#26.contigs_velvet:1 12673_8#27.contigs_velvet:1 12673_8#29.contigs_velvet:1\nCATGGCTATTGAAGCACCAGAGAATATCCAGGC | 12673_8#24.contigs_velvet:1 12673_8#26.contigs_velvet:1 12673_8#27.contigs_velvet:1 12673_8#28.contigs_velvet:1 12673_8#29.contigs_velvet:1\n```\n\nRtab format details unitig sequences, along with a presence/absence matrix in each input file (1 present, 0 not).\n\n```\nUnitig_sequence\t12673_8#24.contigs_velvet\t12673_8#26.contigs_velvet\t12673_8#27.contigs_velvet\t12673_8#28.contigs_velvet\t12673_8#29.contigs_velvet\nGGATGCGGATGCCGACGCTGATGCTGACGCC\t0\t0\t1\t0\t0\nAGCATCAGCATCAGCGTCGGCATCCGCATCC\t0\t0\t1\t0\t0\nCGCTGATGCGGATGCCGACGCTGATGCGGAC\t1\t1\t0\t0\t1\n```\n\n## Citation\n\nIf you use this, please cite the Bifrost paper:\n\nHolley G., Melsted, P. Bifrost â€“ Highly parallel construction and indexing of colored and compacted de Bruijn graphs.\nbioRxiv 695338 (2019). doi: https://doi.org/10.1101/695338",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johnlees/unitig-caller",
    "keywords": "gwas bacteria k-mer unitig",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unitig-caller",
    "package_url": "https://pypi.org/project/unitig-caller/",
    "platform": "",
    "project_url": "https://pypi.org/project/unitig-caller/",
    "project_urls": {
      "Homepage": "https://github.com/johnlees/unitig-caller"
    },
    "release_url": "https://pypi.org/project/unitig-caller/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "unitig-caller: wrapper around mantis to detect presence of sequence elements",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9776251,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ab1800bb9c3845639333458221b3946a029dc3ee4cb82f1450570a8cf62da17",
          "md5": "830e429a1bbb93cba1ca47f48e12745e",
          "sha256": "21d55c2c50f17dca0c594d0d9efbfeada8d64871dece75e93ffd9c0b75cdecb1"
        },
        "downloads": -1,
        "filename": "unitig_caller-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "830e429a1bbb93cba1ca47f48e12745e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6042,
        "upload_time": "2019-04-25T20:02:08",
        "upload_time_iso_8601": "2019-04-25T20:02:08.314861Z",
        "url": "https://files.pythonhosted.org/packages/5a/b1/800bb9c3845639333458221b3946a029dc3ee4cb82f1450570a8cf62da17/unitig_caller-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a49c3752680eb939e729c8d2a182fad5b665e0b4adfe54bf2e9a37cd935cfcb6",
          "md5": "af5521fafcf0086866afc7a9811c7cad",
          "sha256": "a83cdf91cc179216e7afeaed8f4a40eee86ac64572933406e7c7ca8cdf715fd0"
        },
        "downloads": -1,
        "filename": "unitig-caller-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "af5521fafcf0086866afc7a9811c7cad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13274,
        "upload_time": "2020-09-22T09:39:40",
        "upload_time_iso_8601": "2020-09-22T09:39:40.614330Z",
        "url": "https://files.pythonhosted.org/packages/a4/9c/3752680eb939e729c8d2a182fad5b665e0b4adfe54bf2e9a37cd935cfcb6/unitig-caller-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97c03e4ea1e4201874f9961548716951968d27fa2d2b07a5c5b54ca84697a41e",
          "md5": "00b2800c1a9ede12af6acbe199a8d6ab",
          "sha256": "ef3c4eda5d41ff88da7813cae13e004ca584a2c4bc5b78e50c66470e7025ae43"
        },
        "downloads": -1,
        "filename": "unitig-caller-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "00b2800c1a9ede12af6acbe199a8d6ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12194,
        "upload_time": "2021-03-15T18:45:24",
        "upload_time_iso_8601": "2021-03-15T18:45:24.112494Z",
        "url": "https://files.pythonhosted.org/packages/97/c0/3e4ea1e4201874f9961548716951968d27fa2d2b07a5c5b54ca84697a41e/unitig-caller-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97c03e4ea1e4201874f9961548716951968d27fa2d2b07a5c5b54ca84697a41e",
        "md5": "00b2800c1a9ede12af6acbe199a8d6ab",
        "sha256": "ef3c4eda5d41ff88da7813cae13e004ca584a2c4bc5b78e50c66470e7025ae43"
      },
      "downloads": -1,
      "filename": "unitig-caller-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "00b2800c1a9ede12af6acbe199a8d6ab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12194,
      "upload_time": "2021-03-15T18:45:24",
      "upload_time_iso_8601": "2021-03-15T18:45:24.112494Z",
      "url": "https://files.pythonhosted.org/packages/97/c0/3e4ea1e4201874f9961548716951968d27fa2d2b07a5c5b54ca84697a41e/unitig-caller-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}