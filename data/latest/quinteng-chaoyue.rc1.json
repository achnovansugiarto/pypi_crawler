{
  "info": {
    "author": "Quinteng Development Team",
    "author_email": "hello@quinteng.org",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# Quinteng ChaoYue\n[![License](https://img.shields.io/github/license/Quinteng/quinteng-chaoyue.svg?style=popout-square)](https://opensource.org/licenses/Apache-2.0)\n\n**Quinteng** is an open-source framework for working with noisy quantum computers at the level of pulses, circuits, and algorithms.\n\nQuinteng is made up of elements that work together to enable quantum computing. This element is **ChaoYue** and is the foundation on which the rest of Quinteng is built.\n\n## Installation\n\nWe encourage installing Quinteng via the pip tool (a python package manager), which installs all Quinteng elements, including ChaoYue.\n\n```bash\npip install quinteng\n```\n\nPIP will handle all dependencies automatically and you will always install the latest (and well-tested) version.\n\nTo install from source, follow the instructions in the [documentation](https://quinteng.org/documentation/contributing_to_quinteng.html#install-install-from-source-label).\n\n## Creating Your First Quantum Program in Quinteng ChaoYue\n\nNow that Quinteng is installed, it's time to begin working with ChaoYue.\n\nWe are ready to try out a quantum circuit example, which is simulated locally using\nthe Quinteng BasicAer element. This is a simple example that makes an entangled state.\n\n```\n$ python\n```\n\n```python\n>>> from quinteng import QuantumCircuit, transpile\n>>> from quinteng.providers.basicaer import QasmSimulatorPy\n>>> qc = QuantumCircuit(2, 2)\n>>> qc.h(0)\n>>> qc.cx(0, 1)\n>>> qc.measure([0,1], [0,1])\n>>> backend_sim = QasmSimulatorPy()\n>>> transpiled_qc = transpile(qc, backend_sim)\n>>> result = backend_sim.run(transpiled_qc).result()\n>>> print(result.get_counts(qc))\n```\n\nIn this case, the output will be:\n\n```python\n{'00': 513, '11': 511}\n```\n\nA script is available [here](examples/python/ibmq/hello_quantum.py), where we also show how to\nrun the same program on a real quantum computer via IBMQ.\n\n### Executing your code on a real quantum chip\n\nYou can also use Quinteng to execute your code on a\n**real quantum chip**.\nIn order to do so, you need to configure Quinteng for using the credentials in\nyour IBM Q account:\n\n#### Configure your IBMQ credentials\n\n1. Create an _[IBM Q](https://quantum-computing.ibm.com) > Account_ if you haven't already done so.\n\n2. Get an API token from the IBM Q website under _My Account > API Token_ and the URL for the account.\n\n3. Take your token and url from step 2, here called `MY_API_TOKEN`, `MY_URL`, and run:\n\n   ```python\n   >>> from quinteng import IBMQ\n   >>> IBMQ.save_account('MY_API_TOKEN', 'MY_URL')\n    ```\n\nAfter calling `IBMQ.save_account()`, your credentials will be stored on disk.\nOnce they are stored, at any point in the future you can load and use them\nin your program simply via:\n\n```python\n>>> from quinteng import IBMQ\n>>> IBMQ.load_account()\n```\n\nThose who do not want to save their credentials to disk should use instead:\n\n```python\n>>> from quinteng import IBMQ\n>>> IBMQ.enable_account('MY_API_TOKEN')\n```\n\nand the token will only be active for the session. For examples using ChaoYue with real\ndevices we have provided a set of examples in **examples/python** and we suggest starting with [using_quinteng_chaoyue_level_0.py](examples/python/using_quinteng_chaoyue_level_0.py) and working up in\nthe levels.\n\n## Contribution Guidelines\n\nIf you'd like to contribute to Quinteng ChaoYue, please take a look at our\n[contribution guidelines](CONTRIBUTING.md). This project adheres to Quinteng's [code of conduct](CODE_OF_CONDUCT.md). By participating, you are expected to uphold this code.\n\nWe use [GitHub issues](https://github.com/Quinteng/quinteng-chaoyue/issues) for tracking requests and bugs. Please\n[join the Quinteng Slack community](https://ibm.co/joinquintengslack)\nand use our [Quinteng Slack channel](https://quinteng.slack.com) for discussion and simple questions.\nFor questions that are more suited for a forum we use the Quinteng tag in the [Stack Exchange](https://quantumcomputing.stackexchange.com/questions/tagged/quinteng).\n\n## Next Steps\n\nNow you're set up and ready to check out some of the other examples from our\n[Quinteng Tutorials](https://github.com/Quinteng/quinteng-tutorials) repository.\n\n## Authors and Citation\n\nQuinteng ChaoYue is the work of [many people](https://github.com/Quinteng/quinteng-chaoyue/graphs/contributors) who contribute\nto the project at different levels. If you use Quinteng, please cite as per the included [BibTeX file](https://github.com/Quinteng/quinteng/blob/master/Quinteng.bib).\n\n## Changelog and Release Notes\n\nThe changelog for a particular release is dynamically generated and gets\nwritten to the release page on Github for each release. For example, you can\nfind the page for the `0.9.0` release here:\n\nhttps://github.com/Quinteng/quinteng-chaoyue/releases/tag/0.9.0\n\nThe changelog for the current release can be found in the releases tab:\n[![Releases](https://img.shields.io/github/release/Quinteng/quinteng-chaoyue.svg?style=popout-square)](https://github.com/Quinteng/quinteng-chaoyue/releases)\nThe changelog provides a quick overview of notable changes for a given\nrelease.\n\nAdditionally, as part of each release detailed release notes are written to\ndocument in detail what has changed as part of a release. This includes any\ndocumentation on potential breaking changes on upgrade and new features.\nFor example, You can find the release notes for the `0.9.0` release in the\nQuinteng documentation here:\n\nhttps://quinteng.org/documentation/release_notes.html#chaoyue-0-9\n\n## License\n\n[Apache License 2.0](LICENSE.txt)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Quinteng/quinteng-chaoyue",
    "keywords": "quinteng sdk quantum",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quinteng-chaoyue",
    "package_url": "https://pypi.org/project/quinteng-chaoyue/",
    "platform": "",
    "project_url": "https://pypi.org/project/quinteng-chaoyue/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Quinteng/quinteng-chaoyue/issues",
      "Documentation": "https://quinteng.org/documentation/",
      "Homepage": "https://github.com/Quinteng/quinteng-chaoyue",
      "Source Code": "https://github.com/Quinteng/quinteng-chaoyue"
    },
    "release_url": "https://pypi.org/project/quinteng-chaoyue/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Software for developing quantum computing programs",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12295858,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1380b6e33c4ea13e9e6d6d234d5103c0ce118dcf888c9aabc996e334eb44ea73",
          "md5": "b68332ba213df89e70b22d867d00a09b",
          "sha256": "7bcb57b1c7d256e4ce7243bc5e9f6767751de738d07fa35f09d242679ce17f74"
        },
        "downloads": -1,
        "filename": "quinteng-chaoyue-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b68332ba213df89e70b22d867d00a09b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5487110,
        "upload_time": "2021-12-14T01:54:13",
        "upload_time_iso_8601": "2021-12-14T01:54:13.826717Z",
        "url": "https://files.pythonhosted.org/packages/13/80/b6e33c4ea13e9e6d6d234d5103c0ce118dcf888c9aabc996e334eb44ea73/quinteng-chaoyue-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1380b6e33c4ea13e9e6d6d234d5103c0ce118dcf888c9aabc996e334eb44ea73",
        "md5": "b68332ba213df89e70b22d867d00a09b",
        "sha256": "7bcb57b1c7d256e4ce7243bc5e9f6767751de738d07fa35f09d242679ce17f74"
      },
      "downloads": -1,
      "filename": "quinteng-chaoyue-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b68332ba213df89e70b22d867d00a09b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5487110,
      "upload_time": "2021-12-14T01:54:13",
      "upload_time_iso_8601": "2021-12-14T01:54:13.826717Z",
      "url": "https://files.pythonhosted.org/packages/13/80/b6e33c4ea13e9e6d6d234d5103c0ce118dcf888c9aabc996e334eb44ea73/quinteng-chaoyue-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}