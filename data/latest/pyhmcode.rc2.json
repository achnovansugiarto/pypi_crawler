{
  "info": {
    "author": "Tilman Troester",
    "author_email": "tilman@troester.space",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Fortran",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Astronomy"
    ],
    "description": "# pyhmcode\n\nThis library provides a convenient interface to Alexander Mead's library, which underlies the HMCode and HMx codes to predict non-linear power spectra. For details on the Fortran version, refer to https://github.com/alexander-mead/HMcode.\nThe `pyhmcode` interface uses the excellent [f90wrap](https://github.com/jameskermode/f90wrap) library to generate the python interface. This allows access to virtually all functionality in the library, although to speed up compilation, the interface is limited to commonly-used subroutines.\nIf you use `pyhmcode`, please cite [Tröster, Mead et al. 2021](https://arxiv.org/abs/2109.04458) and the relevant papers describing the model:\n- HMCode2015: Mead et al. (2015; https://arxiv.org/abs/1505.07833)\n- HMCode2016: Mead et al. (2016; https://arxiv.org/abs/1602.02154)\n- HMCode2020: Mead et al. (2021; https://arxiv.org/abs/2009.01858)\n- HMx: Mead, Tröster et al. (2020; https://arxiv.org/abs/2005.00009)\n\n## Installation\n`pyhmcode` is `pip`-installable, so\n```\npip install pyhmcode\n```\nshould do the trick. For more control over the installation and access to the alternative interface, as well as CosmoSIS support, the repository can be cloned with\n```\ngit clone --recursive https://github.com/tilmantroester/pyhmcode\n```\n\n## Alternative interface and CosmoSIS support\nThere is an alternative interface to compute powerspectra in the `powerspectrum_interface` subdirectory. This interface uses `ctypes` and a thin Fortran wrapper to access the main functionality of HMCode and HMx, namely predicting the non-linear power spectra.\nInstallation proceeds by\n```\ncd powerspectrum_interface\npip install .\n```\nThis installs the `pyhmx` python module, which in turn is interfaced with CosmoSIS using the `cosmosis_interface.py` module.\n\n## Demos\n\nThe `notebooks` and `example` subdirectories include a number of examples on how to use the the interfaces. \nA basic example (from `examples/basic_example.py`) showing the use of `pyhmcode` to generate non-linear power specta, as well as its integration with CCL is shown below.\n```python\nimport pyhmcode\nimport pyhmcode.halo_profile_utils\n\n# We use CCL to generate the linear power spectrum\nimport pyccl as ccl\n\nimport numpy as np\n\n\nccl_cosmology = ccl.CosmologyVanillaLCDM()\n\nk = np.logspace(-4, 1.5, 100)\na = np.linspace(1/(1+6), 1, 10)\nz = 1/a - 1\n\npofk_lin = np.array([ccl.linear_matter_power(ccl_cosmology, k=k, a=a_)\n                     for a_ in a])\n\n# CCL uses units of Mpc, while pyhmcode uses Mpc/h. Hence we need to convert\n# the units here.\nh = ccl_cosmology[\"h\"]\nk = k/h\npofk_lin = pofk_lin * h**3\n\n# Create the pyhmcode cosmology object. Beside the cosmology parameters, it\n# also holds the linear power spectrum.\nhmcode_cosmology = pyhmcode.halo_profile_utils.ccl2hmcode_cosmo(\n                        ccl_cosmo=ccl_cosmology,\n                        pofk_lin_k_h=k,\n                        pofk_lin_z=z[::-1],\n                        pofk_lin=pofk_lin[::-1],\n                        log10_T_heat=7.8)\n\n# Create the halo model object, which holds information on the specific halo\n# model to use. E.g., the HMCode or HMx version.\nhmcode_model = pyhmcode.Halomodel(\n                    pyhmcode.HMx2020_matter_pressure_w_temp_scaling)\n\n# Now we can compute the non-linear power spectrum, given the cosmology,\n# halo model, and a list of fields.\nhmcode_pofk = pyhmcode.calculate_nonlinear_power_spectrum(\n                                    cosmology=hmcode_cosmology,\n                                    halomodel=hmcode_model, \n                                    fields=[pyhmcode.field_matter,\n                                            pyhmcode.field_electron_pressure])\n\n# The output of calculate_nonlinear_power_spectrum has\n# shape (n_field, n_field, n_z, n_k).\nmatter_matter_pofk = hmcode_pofk[0, 0]\nmatter_electron_pressure_pofk = hmcode_pofk[0, 1]\n\n# We can also use the halo profiles from HMCode or HMx and use them in another\n# halo model code.\nprofile_generator = pyhmcode.halo_profile_utils.HMxProfileGenerator(\n                        hmcode_cosmology,\n                        a_arr=a, k_arr=k,\n                        fields=[pyhmcode.field_matter,\n                                pyhmcode.field_cdm,\n                                pyhmcode.field_electron_pressure],\n                        add_diffuse=False)\n\n# Here we use the halo profile in the CCL halo model framework. \n# First setup the CCL halo model specification\nmass_def = ccl.halos.MassDef(\"vir\", 'matter')\nhmf = ccl.halos.MassFuncSheth99(ccl_cosmology, mass_def=mass_def,\n                                mass_def_strict=False, use_delta_c_fit=True)\nhbf = ccl.halos.HaloBiasSheth99(ccl_cosmology, mass_def=mass_def,\n                                mass_def_strict=False, use_delta_c_fit=True)\nhmc = ccl.halos.HMCalculator(ccl_cosmology, hmf, hbf, mass_def)\n\n# Compute the CCL halo model power spectrum, using the halo profile from HMx\nccl_halomodel_pofk = ccl.halos.halomod_Pk2D(\n                            cosmo=ccl_cosmology,\n                            hmc=hmc, \n                            prof=profile_generator.matter_profile,\n                            normprof1=False,\n                            a_arr=a, lk_arr=np.log(k*h))\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tilmantroester/pyhmcode",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyhmcode",
    "package_url": "https://pypi.org/project/pyhmcode/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyhmcode/",
    "project_urls": {
      "Bug Tracker": "https://github.com/tilmantroester/pyhmcode/issues",
      "Homepage": "https://github.com/tilmantroester/pyhmcode"
    },
    "release_url": "https://pypi.org/project/pyhmcode/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python interface for HMCode",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11415363,
  "releases": {
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb958bbfb6036b0025955d8e69f6815003bb1543300caa85d41e55780aa80ac2",
          "md5": "3b45a866ebce870a9971d39d6274857b",
          "sha256": "3a2adefe5fd305b89cffd43ab43603cfdd3eb0834fc6adce00d0782a4ac4a377"
        },
        "downloads": -1,
        "filename": "pyhmcode-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3b45a866ebce870a9971d39d6274857b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 352549,
        "upload_time": "2021-09-10T00:10:00",
        "upload_time_iso_8601": "2021-09-10T00:10:00.486793Z",
        "url": "https://files.pythonhosted.org/packages/fb/95/8bbfb6036b0025955d8e69f6815003bb1543300caa85d41e55780aa80ac2/pyhmcode-0.9.3.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a4016827df17adf0742d7b331115e169e8302c2641e799a037b68ec725a2732",
          "md5": "8358c48e09ce83b8213720951198870e",
          "sha256": "590b3a0f54dface898cff97b9c8018bff408b12ed99ba2d4bc39ce4b92bbfac7"
        },
        "downloads": -1,
        "filename": "pyhmcode-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8358c48e09ce83b8213720951198870e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 352588,
        "upload_time": "2021-09-10T10:24:17",
        "upload_time_iso_8601": "2021-09-10T10:24:17.300132Z",
        "url": "https://files.pythonhosted.org/packages/1a/40/16827df17adf0742d7b331115e169e8302c2641e799a037b68ec725a2732/pyhmcode-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a4016827df17adf0742d7b331115e169e8302c2641e799a037b68ec725a2732",
        "md5": "8358c48e09ce83b8213720951198870e",
        "sha256": "590b3a0f54dface898cff97b9c8018bff408b12ed99ba2d4bc39ce4b92bbfac7"
      },
      "downloads": -1,
      "filename": "pyhmcode-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8358c48e09ce83b8213720951198870e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 352588,
      "upload_time": "2021-09-10T10:24:17",
      "upload_time_iso_8601": "2021-09-10T10:24:17.300132Z",
      "url": "https://files.pythonhosted.org/packages/1a/40/16827df17adf0742d7b331115e169e8302c2641e799a037b68ec725a2732/pyhmcode-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}