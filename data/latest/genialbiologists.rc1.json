{
  "info": {
    "author": "Pauline Barbet, Arnaud Felten",
    "author_email": "pauline.barbet@anses.fr, arnaud.felten@anses.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "GENIAL : GENes Identification with Abricate for Lucky biologists\n================================================================\n\nAuthors : Barbet Pauline, Felten Arnaud\n\nAffiliation: [Food Safety Laboratory - ANSES Maisons Alfort (France)](https://www.anses.fr/en/content/laboratory-food-safety-maisons-alfort-and-boulogne-sur-mer)\n\nYou can find the latest version of the tool at [https://github.com/p-barbet/GENIAL](https://github.com/p-barbet/GENIAL)\n\n\nGENIAL\n======\n\nGENIAL aims to identify antimicrobial resistance and virulence genes from bacterial genomes matching them to a database gathering genes of interest using [ABRicate](https://github.com/tseemann/abricate).\n\n### Databases\n\nDefault databases available are ([Resfinder](https://cge.cbs.dtu.dk/services/ResFinder/), [CARD](https://card.mcmaster.ca/), [ARG-ANNOT](http://backup.mediterranee-infection.com/article.php?laref=282&titre=arg-annot), [NCBI](https://www.ncbi.nlm.nih.gov/bioproject/PRJNA313047), [EcOH](https://github.com/katholt/srst2/tree/master/data), [PlasmidFinder](https://cge.cbs.dtu.dk/services/PlasmidFinder/), [Ecoli_VF](https://github.com/phac-nml/ecoli_vf) and [VFDB](http://www.mgc.ac.cn/VFs/))\n\nAs well as this databes, it's posible to use your own database.\n\nThe tool is divided into two scripts.\n\n### GENIALanalysis\n\nGENIALanalysis aims to run ABricate. It takes in input a tsv file containing genomes fasta files paths and IDs.If you want to use your own database you also need to provide a multifasta whith genes IDs as headers. Then the script run ABricate and produce in output one ABRicate result file per genome, corresponding to a tsv file including genes found in each sample.\n\n### GENIALresults\n\nGENIALresults aims to conditionning ABRicate results in the form of matrixes and heatmaps of presence/absence. It takes in input a temporary file produced by the Abricate analysis containing the genomes Abricate results paths and IDs. In the case of vfdb database a file containing the virulence factors names, their family and species is automticaly included in the script.\n\nThe output depending on the database used :\n\n* In any cases a matrix in tsv format and a heatmap in png format with all genes found are created\n\n\nOn top of that:\n\n* If you use one of the default databases [Resfinder](https://cge.cbs.dtu.dk/services/ResFinder/) or [VFDB](http://www.mgc.ac.cn/VFs/) news matrix and heatmap by gene type are produced with a correspondace table between the gene name, its family and its number in all genomes.\n\n* If you don't use one of the two previous databases or if you use your own database, only a corespondance table between the gene name and its number in all genomes is produced in addition.\n\n![](workflow.PNG?raw=true \"script workflow\")\n\n\nDependencies\n============\n\nThe script has been developed with python 3.6 (tested with 3.6.6)\n\n### External dependencies\n\n* [ABRicate](https://github.com/tseemann/abricate) tested with 0.8.7\n* [Pandas](https://pandas.pydata.org/) tested with 0.23.4\n* [seaborn](https://seaborn.pydata.org/installing.html) tested with 0.9.0\n\n\nParameters\n==========\n\n### Command line options\n\n\n|   Options   |                                                              Description                                                              |        Required        |      Default     |\n|:-----------:|:-------------------------------------------------------------------------------------------------------------------------------------:|:----------------------:|:----------------:|\n|      -f     |                                            tsv file with FASTA files paths ans strains IDs                                            |           Yes          |                  |\n|     -dbp    |                                   Path to ABRicate databases repertory. Implies -dbf and --privatedb                                  |   Yes if --privatedb   |                  |\n|     -dbf    |                           Multifasta containing the private database sequences. Implies -dbp and --privatedb                          |   Yes if --privatedb   |                  |\n|      -T     |                                                        Number of thread to use                                                        |           No           |         1        |\n|      -w     |                                                           Working directory                                                           |           No           |         .        |\n|      -r     |                                                         Results directory name                                                        |           No           | ABRicate_results |\n| --defaultdb |  default databases available : resfinder, card, argannot, acoh, ecoli_vf, plasmidfinder, vfdb or ncbi. Incompatible with --privatedb  | Yes if not --privatedb |                  |\n| --privatedb |                              Private database name. Implies -dbp and -dbf. Incompatible with --defaultdb                              | Yes if not --defaultdb |                  |\n|   --mincov  |                                                   Minimum proportion of gene covered                                                  |           No           |        80        |\n|   --minid   |                                             Minimum proportion of exact nucleotide matches                                            |           No           |        90        |\n|     --R     |                                          Remove genes present in all genomes from the matrix                                          |           No           |       False      |\n\nTest \n====\n\nAfter installing ABRicate and Pandas and seaborn you can test the script with the command line :\n\n## Default database\n\n\tpython AntiViruce.py -f input_file.tsv --defaultdb vfdb -r results_directory --minid 90 --mincov 80\n\n## Private database\n\n\tpython AntiViruce.py -f input_file.tsv  --privatedb private_db_name -T 10 -r results_directory --minid 90 --mincov 80 -dbp path_to_abricate_databases_repertory -dbf private_db_multifasta_path\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/p-barbet/GENIAL",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GENIALbiologists",
    "package_url": "https://pypi.org/project/GENIALbiologists/",
    "platform": "",
    "project_url": "https://pypi.org/project/GENIALbiologists/",
    "project_urls": {
      "Homepage": "https://github.com/p-barbet/GENIAL"
    },
    "release_url": "https://pypi.org/project/GENIALbiologists/0.9.0/",
    "requires_dist": [
      "pandas",
      "seaborn",
      "biopython"
    ],
    "requires_python": "",
    "summary": "GENIAL: GENes Indentification with Abricate for Lucky biologists",
    "version": "0.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4811253,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f2123a3db9ceef6171f0a4fe3744c25ef87e24c71291a40a3e3c88ed6f9c813",
          "md5": "4d7e8f5ffaab55009d52267fddaac81a",
          "sha256": "20cb8d33ebef6a8240b4d61edd89ffa384c9eb422cfe0c3a9bf767039bd3b9b6"
        },
        "downloads": -1,
        "filename": "GENIALbiologists-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d7e8f5ffaab55009d52267fddaac81a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27022,
        "upload_time": "2019-02-12T14:58:33",
        "upload_time_iso_8601": "2019-02-12T14:58:33.224993Z",
        "url": "https://files.pythonhosted.org/packages/3f/21/23a3db9ceef6171f0a4fe3744c25ef87e24c71291a40a3e3c88ed6f9c813/GENIALbiologists-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7565042d99504140e45fae8e24004d93dc3db862bd8a83063ce7452ac1b3200b",
          "md5": "718785ea87d2f40e933642c83a33c66e",
          "sha256": "9376d696e78349e342ea88eb6b391eb05dea0e2d0e51cdfe3f352cff64586eb4"
        },
        "downloads": -1,
        "filename": "GENIALbiologists-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "718785ea87d2f40e933642c83a33c66e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12815,
        "upload_time": "2019-02-12T14:58:35",
        "upload_time_iso_8601": "2019-02-12T14:58:35.341295Z",
        "url": "https://files.pythonhosted.org/packages/75/65/042d99504140e45fae8e24004d93dc3db862bd8a83063ce7452ac1b3200b/GENIALbiologists-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f2123a3db9ceef6171f0a4fe3744c25ef87e24c71291a40a3e3c88ed6f9c813",
        "md5": "4d7e8f5ffaab55009d52267fddaac81a",
        "sha256": "20cb8d33ebef6a8240b4d61edd89ffa384c9eb422cfe0c3a9bf767039bd3b9b6"
      },
      "downloads": -1,
      "filename": "GENIALbiologists-0.9.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d7e8f5ffaab55009d52267fddaac81a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27022,
      "upload_time": "2019-02-12T14:58:33",
      "upload_time_iso_8601": "2019-02-12T14:58:33.224993Z",
      "url": "https://files.pythonhosted.org/packages/3f/21/23a3db9ceef6171f0a4fe3744c25ef87e24c71291a40a3e3c88ed6f9c813/GENIALbiologists-0.9.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7565042d99504140e45fae8e24004d93dc3db862bd8a83063ce7452ac1b3200b",
        "md5": "718785ea87d2f40e933642c83a33c66e",
        "sha256": "9376d696e78349e342ea88eb6b391eb05dea0e2d0e51cdfe3f352cff64586eb4"
      },
      "downloads": -1,
      "filename": "GENIALbiologists-0.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "718785ea87d2f40e933642c83a33c66e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12815,
      "upload_time": "2019-02-12T14:58:35",
      "upload_time_iso_8601": "2019-02-12T14:58:35.341295Z",
      "url": "https://files.pythonhosted.org/packages/75/65/042d99504140e45fae8e24004d93dc3db862bd8a83063ce7452ac1b3200b/GENIALbiologists-0.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}