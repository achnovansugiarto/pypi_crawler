{
  "info": {
    "author": "BuvinJ",
    "author_email": "buvintech@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Documentation"
    ],
    "description": "# pyMkDocs Utility\n\n## What is pyMkDocs?\npyMkDocs is a tool to generate documentation for Python projects.\nIt extends the features of [MkDocs](https://mkdocs.org).\nIt is, itself written in [Python](https://python.org).\n\n## Why was this project created?\n\n[MkDocs](https://mkdocs.org) is an amazing tool to generate a website with \nMarkdown. Until now, however, there \nwas no tool for *auto generating* a MkDocs project from Python source.\n\nThe typical starting point when comparing Python documentation generators, is\nthe standard library's [pydoc](https://docs.python.org/3/library/pydoc.html) module. \nWhile that tool is easy to use, it's not flexible, and the end result leaves \nsomething to be desired. In contrast, many would consider the \"gold standard\" for\nauto generating Python documentation to be [Sphinx](https://www.sphinx-doc.org/).\nBut that tool is complicated, and uses \n[reStructuredText](https://en.wikipedia.org/wiki/ReStructuredText).\nToo bad reStructuredText *sucks*, \n[Markdown](https://en.wikipedia.org/wiki/Markdown) *rocks*!\n\nAs the real work involved in documenting your code will end up revolving\naround writing [Doc Strings](https://www.python.org/dev/peps/pep-0257/) one way \nor another, being able to express yourself in that context via Markdown will make\nyou HAPPY for a long time to come!\n\n## How do I install it?\n\n`pip install pymkdocs`\n\n## Recipe to make it work:\n  - Ingredients:\n    - 1 folder containing Python source files (e.g. the `example` folder in this repo)\n    **OR** 1 fresh `pip install`\n    - (OPTIONAL) custom Docstrings and/or \"magic comments\" included in source (see below)\n\n  - Easy steps:\n    - Install pyMkDocs.\n    - Open a terminal and change to the project directory. Example: `cd pymkdocs`\n    - Run pyMkDocs. Example: `pymkdocs example/src example -r -c -s`\n\nCommand line help:\n\n```\n| pyMkDocs |\nThis utility generates MkDocs websites from Python source code.\nHelp:  pymkdocs -h/--help\nUsage: pymkdocs source destination [-m/-r] [-c] [-s]\n-m: magic mode (default) / -r: raw mode\n-c: include source code\n-s: serve test site\n```\n\n## How does this work?\npyMkDocs analyzes your Python source and generates markdown files from them.\nIt then employs MkDocs to produce html based documentation from the markdown!\nThis process creates:\n  - a 'mkdocs.yml' file, which is a config file for [MkDocs](https://mkdocs.org)\n  - a 'docs' folder, containing the markdown \n  - a 'site' folder, which is the final web site produced \n\n### Raw Mode\n\nThe easiest way to learn to use pyMkDocs may be to first run the example \nprovided in \"Raw Mode\". Pass the `-r` switch on the command line to enable \nthis option. Using this method for generating the documentation, the entire\ndirectory tree for a source path specified is recursively scanned and all \nelements of the code indexed. The files produced have a direct one-to-one \nalignment of Python package / module to a sub directory / document \n(i.e. site page).\n\nThis is the most straightforward style for indexing the exact source \nfound within that Python code base in a literal manner.    \n\n### Magic Mode\n\nNow that you've seen how easy it is to use \"Raw Mode\", let's dive into \"Magic Mode\"!   \n\n\"Magic Mode\" is used to generate documentation sites in a more dynamic,\ncustomizable manner. The key difference between this mode vs. \"Raw Mode\", is that\nthe method by which objects are indexed is \"by import\" rather than by \"file path\".\nThis mode also provides the means to define the structure of the content produced\nto a notable degree.\n\nThe way objects are found in this mode aligns with how the content of a package \nnaturally resolves via import within a Python runtime context. The source elements \nwhich are explicitly included within a given Python package's `__init__` module \nwill be indexed by the doc generator's parser / inspector. \n\nThe command line argument passed for the \"source\" argument may simply be the \nname of an import. That argument does not have to be the path to its directory, \nwhen using this mode. Therefore, after \"pip installing\" any library (including\nfrom remote or *local* sources), you could follow that up by running `pyMkDocs` \nagainst it *by import name*!     \n\nAs a bonus, when using this mode, \"magic comments\" (using syntax defined for this\nspecific tool) will be processed if placed within such an `__init__` module being\nscanned. This is used to dictate how the markdown files / site pages will be named\nand ordered, along with what content is generated.\n\nLet's look at an example \"magic init\" file...   \n\n**example/src/__init__.py**:\n\n```py3\n\"\"\"\nThis library is very impressive... :)\n\"\"\"\n# docs > Introduction.md\n# docs : __doc__ \n\n#------------------------------------------------------------------------------\n# docs > Mini.md\n\"\"\" docs : prose\nHere is some preamble text for the page...  \n\"\"\"\nfrom .functions import mini, MIN_SIZE\n\"\"\" docs : prose\nClosing comments on these functions...  \n\"\"\"\n\n#------------------------------------------------------------------------------\n# docs > Shark.md\n\"\"\" docs : prose\nThis page is devoted to the **Shark**.  \n\"\"\"\nfrom .class_and_function import Shark, maxi\n\n#------------------------------------------------------------------------------\n# docs > null\nfrom os import abc \n\n#------------------------------------------------------------------------------\n# docs > Config Parser.md\n\"\"\" docs : virtual\nfrom configparser import ConfigParser\n\"\"\" \n```\n\nThis `__init__` file naturally controls what is accessible via the Python \nimport system when a client executes `import src` (assuming that package can \nbe found). The items defined in this file are imported by a Python interpreter. \nThey are also auto documented when scanned by this tool, along with processing\nthe \"magic comments\" the interpreter ignored.\n\nThe following magic comments commands may be included in your `__init__` module.  \n\n**START WRITING**: `# docs > [Page Name].md`\n\nComment lines which start with this, indicate a starting point \nfor what is to be written to a given markdown file. That file/page will be named \nby what follows that `docs >` prefix. Note that the source content indexed and \nincluded in the resulting file may come from *any* importable module / package \non your system - not just your source!  \n\n**PROSE**:\n\n```py3\n\"\"\" docs : prose\nThis markdown appears where ever you want in the current document.\n\"\"\"\n````\n\nFollowing this comment pattern, \"write\" this markdown to the current document.\n\n**PACKAGE DOCSTRING**: `# docs : __doc__` \n\nInject the the package doc string into the current document. \n\n\n**DISCARD**: `# docs > null`\n\nDiscards the documentation for whatever source code follows. \n\n**VIRTUAL CODE**:\n\n```py3\n\"\"\" docs > virtual\nis_virtual_code_cool = True\n\"\"\"\n````\n\nFollowing this comment pattern, the parsing / object inspecting performed\nby the tool will act as though the virtual code were actually present,\nbut without it having to truly be included in your project.\nThis provides a means to create documentation in a completely open ended manner\nthat is is not tightly bound to any literal source.   \n\n## Minimal project layout\n\n  - before pyMkDocs:\n\n>      src/\n>          ...         # Other python files or folders\n\n  - after pyMkDocs:\n\n>      mkdocs.yml      # The configuration file.\n>\n>      src/\n>          ...         # Other python files or folders\n>\n>      docs/\n>          index.md    # The documentation homepage.\n>          ...         # Other markdown pages, images and other files.\n>\n>      site/           # The static site ready to be hosted\n>          index.html\n>          ...\n\n## Custom Content\n\npyMkDocs is not limited to only generating a site from scratch. Instead, it can \nbe dynamically *integrated* with your custom content.  Once you know how, it's \neasy to add your own pages, to add more \nMkDocs [extensions](https://www.mkdocs.org/user-guide/configuration/#markdown_extensions),\nto add [plugins](https://www.mkdocs.org/user-guide/configuration/#plugins), \nmodify the site [theme](https://www.mkdocs.org/user-guide/configuration/#theme)\nand more!  \n\n**Update Mode**\n\nThe easiest way to *start* an pyMkDocs project is to first allow the tool to \ncreate a basic site for you.  After that, you may edit the `mkdocs.yml` file\nwhich was generated.  When the tool is run again subsequently, it will detect\nthe presence of that prior configuration, and then operate in \"update mode\".\n\nIn \"Update Mode\", the only part of the `mkdocs.yml` which pyMkDocs will\nmodify is that found within the \"Reference\" section.  Anything else which you\ncustomized will be fully preserved and respected while MkDocs regenerates the\nsite.      \n\nTo learn more about how you may modify the `mkdocs.yml` file, see the \n[MkDocs Configuration Guide](https://www.mkdocs.org/user-guide/configuration/).\n\n**Hybrid Mode**\n\nAn alternative \"Hybrid Mode\" has also been provided. This a middle ground\nbetween starting from scratch or operating as a pure \"update\".\n\nTo use this method:\n\n- Remove an existing `mkdocs.yml` file (if applicable)\n- Create a `docs` folder (if one does not exist)\n- Add **your own** Markdown files to the `docs` folder\n- Run pyMkDocs!\n\nThe result of this will be similiar to creating a whole new site, accept \nyour pre-existing Markdown files will be used to generate site pages\nand they will be automatically added to the top level of your table of contents! \n\n**Home Page**\n\nWhen a vistor first browses to the site, its \"Home\" page will be displayed.\nThis page is created from a Markdown file named `index.md` (named like a \ndefault website page: `index.html`).\n\nIf this file does not exist in your `docs` folder, pyMkDocs will generate\na simple placeholder for you. To revise the content of this page, simply\nedit, or replace, the `index.md` source.   \n\n## Attribute Docstrings\n\nThe formal standards for Python docstrings are defined in \n[PEP-257](https://www.python.org/dev/peps/pep-0257/).\nThey do NOT include \"attribute docstrings\". There is, therefore, no *official* means\nto document how to use class and module attributes. The primary reason for this\nis because a consensus could not be arrived upon as to what the cleanest\nmeans would be for developers to employ such a standard in practice. Following\nthe rules for how this is done with modules, classes, and functions\n(adding triple double comments after the object signatures), seemed excessive\nor confusing to some. Further, there is a belief that attributes should be \n\"self documenting\", by simply using good names for them.     \n\nThat said, it has been suggested that *unofficial* documentation generators\n(such as this) may still wish to adhere to the standards proposed in the *rejected* \n[PEP-224](https://www.python.org/dev/peps/pep-0224/) or \n[PEP-258](https://www.python.org/dev/peps/pep-0258/#attribute-docstrings)\nregarding attributes. So, pyMkDocs recognizes those conventions and processes\nsuch comments when generating documentation.\n\n## Recommended Function Docstring\n**Code:**\n```py3\ndef fun(arg1: int, arg2: str = 'Hello World!'):\n    \"\"\"Description of your function\n\n    **Parameters**\n\n    > **arg1:** `int` -- Description of argument `arg1`.\n\n    > **arg2:** `str` -- Description of argument `arg2`.\n\n    **Returns**\n\n    > `str` -- Description of returned object.\n    \"\"\"\n    return arg2 + str(arg1)\n```\n\n**Screenshot:**\n\n![recommended docstring screenshot](img/recommend_docstring.png)\n\n## Want more?\nCheck out the example source. There, you will find tons of fancy elements you \ncan now instantly add to your documentation, leveraging the power of many\n[MkDocs](https://mkdocs.org) extensions!\n\n## Now what?\nOnce you have the source generated for a static website to display your amazing\ndocumentation, how do you make that available to your users / target audience?\n\nWell you may, of course, setup website hosting in any number of manners (which\nare all well beyond the scope of this document!). With that done, you could\nsimply upload the files there. That said, a very notable option for this\nspecific purpose, which is free, fast, and easy, is to use\n[GitHub Pages](https://pages.github.com/).\n\nWith GitHub Pages, you may create a *new* GitHub repository dedicated to the \nsite, or you may *add* a GitHub Pages site to an *existing* repository (e.g. \nyour project source). Arguably, the latter makes more sense if the code you are \ndocumenting is already on GitHub, or you intend to post it there. For more on \nthis see: [Creating a GitHub Pages site](https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site)\n\nNote that GitHub Pages allows you to serve your site from either the *root* of \nthe repository, or a sub directory named `docs`. There is no option to define\nthis path yourself, or to use a directory named `site`.  \n\nWhile GitHub Pages supports Markdown based sites, and can therefore use a \n`docs` directory with such content, it will then convert that to html via a \nseperate mechanism from what you've already produced with MkDocs. If you would \nlike to add a GitHub Pages site to an *existing* repository, it is doubtful you\nwould want it on the *root*, so in order to post your site as it appears locally, \nyou will need to place what is normally the \"site\" content in the `docs` \ndirectory. Thankfully, this is easy to resolve! Simply rename your folders \nand add the following lines to your `mkdocs.yalm` file:\n\n```\ndocs_dir: docs_src\nsite_dir: docs\n```\n\npyMkDocs will then auto generate Markdown into a `docs_src` folder and\nMkDocs will generate the website content within `docs`. Problem solved.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymkdocs",
    "package_url": "https://pypi.org/project/pymkdocs/",
    "platform": "",
    "project_url": "https://pypi.org/project/pymkdocs/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pymkdocs/0.4.0.0/",
    "requires_dist": [
      "mkdocs",
      "mkdocs-material",
      "pymdown-extensions"
    ],
    "requires_python": "",
    "summary": "Documentation generator for Python, using markdown and MkDocs.",
    "version": "0.4.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11267268,
  "releases": {
    "0.4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "851e60374d8048b0a8774581233fbe6c196484858126c8867246f625009537cf",
          "md5": "8bc70a7abadf6e56168328f8e2572261",
          "sha256": "3b4485cf125bbcedf498fcc7356a6fa78d2f7e40dd95290b626421479c10484c"
        },
        "downloads": -1,
        "filename": "pymkdocs-0.4.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bc70a7abadf6e56168328f8e2572261",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19560,
        "upload_time": "2021-08-24T21:07:04",
        "upload_time_iso_8601": "2021-08-24T21:07:04.177558Z",
        "url": "https://files.pythonhosted.org/packages/85/1e/60374d8048b0a8774581233fbe6c196484858126c8867246f625009537cf/pymkdocs-0.4.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce95beeffdedee7426509fb99dbe95647d4a86c2b55bbc0ec3999e7341b83236",
          "md5": "c0ddf309a26017197ebd011e2a840802",
          "sha256": "11aea6e7115fe672a7ff682f6297d658421c3c6542bb3a04bfdf79c40473997d"
        },
        "downloads": -1,
        "filename": "pymkdocs-0.4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c0ddf309a26017197ebd011e2a840802",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24360,
        "upload_time": "2021-08-24T21:07:06",
        "upload_time_iso_8601": "2021-08-24T21:07:06.625283Z",
        "url": "https://files.pythonhosted.org/packages/ce/95/beeffdedee7426509fb99dbe95647d4a86c2b55bbc0ec3999e7341b83236/pymkdocs-0.4.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "851e60374d8048b0a8774581233fbe6c196484858126c8867246f625009537cf",
        "md5": "8bc70a7abadf6e56168328f8e2572261",
        "sha256": "3b4485cf125bbcedf498fcc7356a6fa78d2f7e40dd95290b626421479c10484c"
      },
      "downloads": -1,
      "filename": "pymkdocs-0.4.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8bc70a7abadf6e56168328f8e2572261",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19560,
      "upload_time": "2021-08-24T21:07:04",
      "upload_time_iso_8601": "2021-08-24T21:07:04.177558Z",
      "url": "https://files.pythonhosted.org/packages/85/1e/60374d8048b0a8774581233fbe6c196484858126c8867246f625009537cf/pymkdocs-0.4.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce95beeffdedee7426509fb99dbe95647d4a86c2b55bbc0ec3999e7341b83236",
        "md5": "c0ddf309a26017197ebd011e2a840802",
        "sha256": "11aea6e7115fe672a7ff682f6297d658421c3c6542bb3a04bfdf79c40473997d"
      },
      "downloads": -1,
      "filename": "pymkdocs-0.4.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c0ddf309a26017197ebd011e2a840802",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24360,
      "upload_time": "2021-08-24T21:07:06",
      "upload_time_iso_8601": "2021-08-24T21:07:06.625283Z",
      "url": "https://files.pythonhosted.org/packages/ce/95/beeffdedee7426509fb99dbe95647d4a86c2b55bbc0ec3999e7341b83236/pymkdocs-0.4.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}