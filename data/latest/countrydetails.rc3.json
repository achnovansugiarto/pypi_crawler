{
  "info": {
    "author": "Manoj Boddu",
    "author_email": "manumanoj0010@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Country Details\n\nA python package for retrieving data from all the countries in the world.\n\n![](https://raw.githubusercontent.com/manumanoj0010/countrydetails/master/Readme_Images/cd.jpeg)\n\n## Install\n\n```python\npip install countrydetails\n```\n\n## Usage\n\nThere are 2 modules -\n1. Retrieving data of all countries **(Module Countries)**\n2. Retrieving data of a single country **(Module Country)**\n\n### Modules and their functions\n\n##### Module Countries\n\n- [countries()](#countries)\n- [phone_code()](#phone_code)\n- [currencies()](#currencies) \n- [capitals()](#capitals)  \n- [continents()](#continents)   \n- [countries_in_continents()](#countries_in_continents)\n- [regions()](#regions)\n- [countries_in_region()](#countries_in_region) \n- [states()](#states) \n\n##### Module Country\n\n- [info()](#info) \n- [name()](#name)  \n- [states()](#states) \n- [cities()](#cities)  \n- [states_and_cities()](#states_and_cities)  \n- [iso()](#iso) \n- [alt_spelling()](#alt_spellings) \n- [area()](#area)  \n- [borders()](#borders)  \n- [capital()](#capital)  \n- [calling_codes()](#calling_codes)  \n- [independence()](#independence) \n- [currency()](#currency) \n- [capital_latlng()](#capital_latlng) \n- [demonym()](#demonym) \n- [flag()](#flag) \n- [languages()](#languages) \n- [latlang()](#latlng)  \n- [native_name()](#native_name) \n- [population()](#population)  \n- [timezones()](#timezones) \n- [tld()](#tld) \n- [translations()](#translations) \n- [continents()](#continent) \n- [temperature()](#temperature)  \n- [government()](#government) \n- [expectancy()](#expectancy)  \n- [dish()](#dish)  \n- [symbol()](#symbol) \n- [desnity()](#density)  \n- [region()](#region) \n- [religion()](#religion)  \n- [total_states()](#total_states)  \n- [total_cities()](#total_cities)  \n- [wiki()](#wiki)  \n- [gei_json()](#geo_json)  \n- [all()](#all) \n\n\n## Module Countries\n\n> For the sake of simplicity, I will be showing less data in outputs here.\n\n### .countries()\nReturns the list of all available countries in the world\n\n``` python\nfrom Countrydetails import countries\n\ndata = countries.all_countries()\ndata.countries() \n\n```\n\n``` python\n['Afghanistan', 'Aland Islands', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla', 'Antarctica', 'Antigua And Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas The',  'Vietnam', 'Virgin Islands (British)', 'Virgin Islands (US)', 'Wallis And Futuna Islands', 'Western Sahara', 'Yemen', 'Zambia', 'Zimbabwe'] \n\n```\n\n### .phone_code()\nReturns phone codes of each country in a dictionary\n\n``` python\nfrom countrydetails import countries\n\ncountry = countries.all_countries()\nprint(country.phone_code()) \n\n```\n\n``` python\n{'Afghanistan': '93', 'Aland Islands': '+358-18', 'Albania': '355', 'Algeria': '213', 'American Samoa': '+1-684', 'Andorra': '376', 'Angola': '244', 'Anguilla': '+1-264', 'Antarctica': '', 'Antigua And Barbuda': '+1-268', 'Argentina': '54', 'Armenia': '374', 'Aruba': '297', 'Australia': '61', 'Austria': '43', 'Azerbaijan': '994', 'Bahamas The': '+1-242', 'Bahrain': '973', 'Bangladesh': '880', \n\n```\n\n### .currencies()\nReturns currencies of each country in a dictionary\n\n```python\nfrom countrydetails import countries\n\ncountry = countries.all_countries()\nprint(country.currencies()) \n\n```\n\n```python\n{'Afghanistan': 'AFN', 'Aland Islands': 'EUR', 'Albania': 'ALL', 'Algeria': 'DZD', 'American Samoa': 'USD', 'Andorra': 'EUR', 'Angola': 'AOA', 'Anguilla': 'XCD', 'Antarctica': '', 'Antigua And Barbuda': 'XCD', 'Argentina': 'ARS', 'Belgium': 'EUR', 'Belize': 'BZD', 'Benin': 'XOF', 'Bermuda': 'BMD', 'Bhutan': 'BTN', 'Bolivia': 'BOB', 'Bosnia and Herzegovina': 'BAM', 'Botswana': 'BWP',\n\n```\n\n### .capitals()\nReturns captial cities of each country in a dictionary\n```python\nfrom countrydetails import countries\n\ncountry = countries.all_countries()\nprint(country.capitals()) \n```\n```python\n{'Afghanistan': 'Kabul', 'Aland Islands': 'Mariehamn', 'Albania': 'Tirana', 'Algeria': 'Algiers', 'American Samoa': 'Pago Pago', 'Andorra': 'Andorra la Vella', 'Angola': 'Luanda', 'Anguilla': 'The Valley', 'Antarctica': '', 'Antigua And Barbuda': \"St. John's\",  'Bahamas The': 'Nassau', 'Bahrain': 'Manama', 'Bangladesh': 'Dhaka', 'Barbados': 'Bridgetown', 'Belarus': 'Minsk', 'Belgium': 'Brussels', 'Belize': 'Belmopan', \n```\n\n### .continents()\nReturns continents of each country\n```python\nfrom countrydetails import countries\n\ncountry = countries.all_countries()\nprint(country.continents()) \n```\n\n```\n[{'country': 'Afghanistan', 'continent': 'Asia'}, {'country': 'Albania', 'continent': 'Europe'}, {'country': 'Algeria', 'continent': 'Africa'}, {'country': 'American Samoa', 'continent': 'Oceania'}, {'country': 'Andorra', 'continent': 'Europe'}, {'country': 'Angola', 'continent': 'Africa'}, {'country': 'Anguilla', 'continent': 'North America'},{'country': 'Antarctica', 'continent': 'Antarctica'}],\n\n```\n\n### .countries_in_continents()\nReturns a list of countries present in a continent\n```python\nfrom countrydetails import countries\n\ncountry = countries.all_countries()\nprint(country.countries_in_continents()) \n```\n\n```python\n{'Asia': ['Afghanistan', 'Armenia', 'Azerbaijan', 'Bahrain', 'Bangladesh', 'Bhutan', 'Brunei', 'Cambodia', 'China', 'Cyprus', 'East Timor', 'Georgia', 'Hong Kong', 'India', 'Indonesia', 'Iran', 'Iraq', 'Israel', 'Japan', 'Jordan', 'Kazakhstan', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Lebanon',   'Tajikistan', 'Thailand', 'Turkey', 'Turkmenistan', 'United Arab Emirates', 'Uzbekistan', 'Vietnam', 'Yemen']\n```\n\n### .regions()\nReturns countries with its region\n```python\nfrom countrydetails import countries\n\ncountry = countries.all_countries()\nprint(country.regions()) \n```\n\n```python\n[{'country': 'Afghanistan', 'location': 'Southern and Central Asia'}, {'country': 'Albania', 'location': 'Southern Europe'}, {'country': 'Algeria', 'location': 'Northern Africa'}, {'country': 'American Samoa', 'location': 'Polynesia'}, {'country': 'Andorra', 'location': 'Southern Europe'}, {'country': 'Aruba', 'location': 'Caribbean'}, {'country': 'Australia', 'location': 'Australia and New Zealand'},  \n```\n\n### .countries_in_region()\nReturns list of countries present in its region\n```python\nfrom countrydetails import countries\n\ncountry = countries.all_countries()\nprint(country.countries_in_region()) \n```\n\n```python\n{'Antarctica': ['Antarctica', 'Heard Island and McDonald Islands', 'South Georgia and the South Sandwich Islands'], 'Eastern Europe': ['Belarus', 'Hungary', 'Moldova', 'Poland', 'Romania', 'Ukraine'], 'Southern Europe': ['Albania', 'Andorra',   'Italy', 'North Macedonia', 'Yugoslavia'], 'Western Europe': ['Austria', 'Belgium', 'France', 'Germany', 'Liechtenstein',  'Switzerland'], 'North America': ['Bermuda',  'United States'],\n```\n\n### .states()\nReturns all the available states in the world with its state code \n```python\nfrom countrydetails import countries\n\ncountry = countries.all_countries()\nprint(country.states()) \n```\n```python\n{'id': 1836, 'name': 'Nenets Autonomous Okrug', 'state_code': 'NEN'}, {'id': 1857, 'name': 'Nizhny Novgorod Oblast', 'state_code': 'NIZ'}, {'id': 1834, 'name': 'Novgorod Oblast', 'state_code': 'NGR'}, {'id': 1888, 'name': 'Novosibirsk', 'state_code': 'NVS'}, {'id': 1846, 'name': 'Omsk Oblast', 'state_code': 'OMS'}, {'id': 1886, 'name': 'Orenburg Oblast', 'state_code': 'ORE'}, {'id': 1908, 'name': 'Oryol Oblast', 'state_code': 'ORL'}, {'id': 1909, 'name': 'Penza Oblast', 'state_code': 'PNZ'}, {'id': 1871, 'name': 'Perm Krai', 'state_code': 'PER'}, {'id': 1833, 'name': 'Primorsky Krai', 'state_code': 'PRI'}, {'id': 1863, 'name': 'Pskov Oblast', 'state_code': 'PSK'}, {'id': 1852, 'name': 'Republic of Adygea', 'state_code': 'AD'} \n```\n\n\n\n## Module Country\n\n### .info()\n\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')  #you can give your desired country\nprint(country.info()) \n```\n```\n# Returns the data present below in a dict\n```\n\n### .name()\nReturns the name of the country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.name()) \n\n```\n\n```\nIndia\n```\n\n\n### .states()\nReturns all available in a  states list\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.states()) \n\n```\n```python\n['Andaman and Nicobar Islands', 'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chandigarh', 'Chhattisgarh', 'Dadra and Nagar Haveli', 'Daman and Diu', 'Delhi', 'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu and Kashmir', 'Jharkhand', 'Karnataka', 'Kerala', 'Ladakh', 'Lakshadweep', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Puducherry', 'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura', \n'Uttar Pradesh', 'Uttarakhand', 'West Bengal']\n```\n\n\n### .cities()\nReturns all available cities in a list\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.cities()) \n\n```\n\n```python\n# I am just displaying just a part of information here due to huge huge data\n['Bamboo Flat', 'Nicobar', 'Port Blair', 'South Andaman', 'Addanki', 'Ādoni', 'Akasahebpet', 'Akivīdu', 'Akkarampalle', 'Amalāpuram', 'Amudālavalasa', 'Anakāpalle', 'Anantapur', 'Atmakūr', 'Attili', 'Avanigadda', 'Badvel', 'Banganapalle', 'Bāpatla', 'Betamcherla', 'Bhattiprolu', 'Bhīmavaram', 'Bhīmunipatnam', 'Bobbili', 'Challapalle', 'Chemmumiahpet', 'Chilakalūrupet', 'Chinnachowk', 'Chīpurupalle', 'Chīrāla', 'Chittoor',  'Diguvametta', 'East Godāvari', 'Elamanchili', 'Puttaparthi', 'Puttūr', 'Rājahmundry',  'Takdah', 'Taki', 'Tamluk', 'Tarakeswar', 'Titagarh', 'Tufanganj', 'Tulin', 'Uchalan', 'Ula', 'Uluberia', 'Uttar Dinajpur district', 'Uttarpara Kotrung']\n```\n\n### .states_and_cities()\nReturns states and cities in a dict\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.states_and_cities()) \n```\n\n```python\n# I am just displaying just a part of information here due to huge huge data\n[{'id': 142095, 'name': 'South 24 Parganas district', 'latitude': '22.16197000', 'longitude': '88.43170000'}, {'id': 142096, 'name': 'Srikhanda', 'latitude': '23.60000000', 'longitude': '88.08330000'}, {'id': 142097, 'name': 'Srirampur', 'latitude': '23.35000000', 'longitude': '88.12000000'}, {'id': 142098, 'name': 'Suri', 'latitude': '23.91666667', 'longitude': '87.53333333'}, {'id': 142099, 'name': 'Swarupnagar community development block', 'latitude': '22.83330000', 'longitude': '88.86670000'}, {'id': 142100, 'name': 'Takdah', 'latitude': '27.03330000', 'longitude': '88.36670000'}, ]}]\n```\n\n\n### .iso()\nReturns ISO codes for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.iso()) \n\n```\n\n```\n{'alpha2': 'IN', 'alpha3': 'IND'}\n```\n### .alt_spellings()\n```python\nReturns alternate spellings for the name of a specified country\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.alt_spellings()) \n\n```\n\n```\n['IN', 'Bhārat', 'Republic of India', 'Bharat Ganrajya']\n```\n### .area()\nReturns area (km²) for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.area()) \n\n```\n\n```\n3287590\n```\n### .borders()\nReturns bordering countries (ISO3) for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.borders()) \n\n```\n\n```\n['AFG', 'BGD', 'BTN', 'MMR', 'CHN', 'NPL', 'PAK', 'LKA']\n```\n### .capital()\nReturns capital city for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.capital()) \n\n```\n\n```\nNew Delhi\n```\n\n### .calling_codes()\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.calling_codes()) \n\n```\n\n```\n [\"91\"]\n```\n### .independence()\nReturns independence year for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.independence()) \n\n```\n\n```\n1947\n```\n### .currency()\nReturns official currency for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.currency()) \n\n```\n\n```\n['INR']\n```\n### .capital_latlng()\nReturns capital city latitude and longitude for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.capital_latlng()) \n\n```\n\n```\n[28.614179, 77.202266]\n```\n### .demonym()\nReturns the demonyms for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.demonym()) \n\n```\n\n```\nIndian\n```\n### .flag()\nReturns SVG link of the official flag for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.flag()) \n\n```\n\n```\nSorry there is no link for indain flag :(\n```\n\n### .languages()\nReturns all spoken languages for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.languages()) \n\n```\n\n```\n['Asami', 'Bengali', 'Gujarati', 'Hindi', 'Kannada', 'Malayalam', 'Marathi', 'Odia', 'Punjabi', 'Tamil', 'Telugu', 'Urdu', 'Sanskrit', 'English', 'Konkani', 'Nepali', 'Bodo', 'Kashmiri', 'Maithili', 'Santali', 'Sindhi']\n```\n### .latlng()\nReturns approx latitude and longitude for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.latlng()) \n\n```\n\n```\n [20, 77]\n```\n### .native_name()\nReturns the name of the country in its native tongue\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.native_name()) \n\n```\n\n```\nभारत\n```\n### .population()\nReturns the population of the specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.population()) \n\n```\n\n```\n1263930000\n```\n### .timezones()\nReturns the timezones of a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.timezones()) \n\n```\n\n```\n['UTC+05:30']\n```\n### .tld()\nReturns the domain extension of a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.tld()) \n\n```\n\n```\n['.in']\n```\n### .translations()\nReturns translations of a given country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.translations()) \n\n```\n\n```\n{'de': 'Indien', 'es': 'India', 'fr': 'Inde', 'ja': 'インド', 'it': 'India'}\n```\n### .continent()\nReturns the continent of a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.continent()) \n\n```\n\n```\nAsia\n```\n### .temperature()\nReturns the average temperature for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.temperature()) \n\n```\n\n```\n23.65\n```\n### .government()\nReturns the type of government for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.government()) \n\n```\n\n```\nFederal Republic\n```\n### .expectancy()\nReturns the life expectancy of a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.expectancy()) \n\n```\n\n```\n62.5\n```\n### .dish()\nReturns the national dish of a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.dish()) \n\n```\n\n```\nNo officially announced national dish\n```\n### .symbol()\nReturns the national symbol of a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.symbol()) \n\n```\n\n```\nanimal\n```\n### .density()\nReturns the density of a specified country in sq km\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.density()) \n\n```\n\n```\n454.9380726\n```\n### .region()\nReturns the region of a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.region()) \n\n```\n\n```\nSouthern and Central Asia\n```\n### .religion()\nReturns the religion of the specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.religion()) \n\n```\n\n```\nHinduism\n```\n### .total_states()\nReturns the total number of states for the specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.total_states()) \n\n```\n\n```\n37 #including union territories\n```\n### .total_cities()\nReturn total numnber of cities for the specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.total_cities()) \n\n```\n\n```\n3865\n```\n### .wiki()\nReturns the Wikipedia page link for the specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.wiki()) \n\n```\n\n```\nhttp://en.wikipedia.org/wiki/india\n```\n### .all()\nReturns the every available data of all the countries in the world\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details()\nprint(country.all()) \n\n```\n\n```python\n# I am not displaying the output here as the data is enormous. You can try it yourself :)\n```\n\n### .geo_json()\nReturns geoJSON for a specified country\n```python\nfrom Countrydetails import country\n\ncountry = country.country_details('India')\nprint(country.geo_json()) \n\n```\n\n```\n{\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n            {\n                \"type\": \"Feature\",\n                \"id\": \"IND\",\n                \"properties\": {\n                    \"name\": \"India\"\n                },\n                \"geometry\": {\n                    \"type\": \"Polygon\",\n                    \"coordinates\": [\n                        [\n                            [\n                                77.837451,\n                                35.49401\n                            ],\n                            [\n                                78.912269,\n                                34.321936\n                            ],\n                            [\n                                78.811086,\n                                33.506198\n                            ],\n                            [\n                                77.837451,\n                                35.49401\n                            ]\n                        ]\n                    ]\n                }\n            }\n        ]\n    },\n```\n\n## Created & Maintained By\n\n### [Manumanoj](https://github.com/manumanoj0010)\n\nA Passionate Python and Web Developer. Currently pursuing his carrer as a student.\n\n<a href=\"https://www.linkedin.com/in/manumanoj0010/\" target=\"_blank\"><img src=\"https://github.com/aritraroy/social-icons/blob/master/linkedin-icon.png?raw=true\" width=\"60\"></a><a href=\"https://facebook.com/manumanoj0010\" target=\"_blank\"><img src=\"https://github.com/aritraroy/social-icons/blob/master/facebook-icon.png?raw=true\" width=\"60\"></a><a href=\"https://instagram.com/m.a.n.u.m.a.n.o.j\" target=\"_blank\"><img src=\"https://github.com/aritraroy/social-icons/blob/master/instagram-icon.png?raw=true\" width=\"60\"></a><a href=\"https://github.com/manumanoj0010\" target=\"_blank\"><img src=\"https://img.icons8.com/material-outlined/52/000000/github.png\"></a><a href=\"http://manojmanu.me/\"  target=\"_blank\"><img src=\"https://img.icons8.com/metro/52/000000/domain.png\"></a>\n\n[![GitHub stars](https://img.shields.io/github/stars/manumanoj0010/countrydetails.svg?style=social&label=Star)](https://github.com/manumanoj0010/countrydetails) [![GitHub forks](https://img.shields.io/github/forks/manumanoj0010/countrydetails.svg?style=social&label=Fork)](https://github.com/manumanoj0010/countrydetails/fork) [![GitHub watchers](https://img.shields.io/github/watchers/manumanoj0010/countrydetails?style=social&label=Watch)](https://github.com/manumanoj0010/countrydetails) [![GitHub followers](https://img.shields.io/github/followers/manumanoj0010.svg?style=social&label=Follow)](https://github.com/manumanoj0010)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/manumanoj0010/countrydetails",
    "keywords": "country,countrydetails,countryinfo,country information,country data,json",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Countrydetails",
    "package_url": "https://pypi.org/project/Countrydetails/",
    "platform": null,
    "project_url": "https://pypi.org/project/Countrydetails/",
    "project_urls": {
      "Homepage": "https://github.com/manumanoj0010/countrydetails"
    },
    "release_url": "https://pypi.org/project/Countrydetails/1.0.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python package for retrieving data of all the countries in the world.",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15337840,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d609df9502ed1f1c6ba80f02b6635bbcd097786c26ee18ef7600b91c0a5ce05",
          "md5": "e3235322688d5f932682fe905a64fbbb",
          "sha256": "04e802e80accef7e6b1b1f02e1cf35283de97a97d1d48af98c859a9570ad860b"
        },
        "downloads": -1,
        "filename": "Countrydetails-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3235322688d5f932682fe905a64fbbb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3531893,
        "upload_time": "2020-09-16T13:13:54",
        "upload_time_iso_8601": "2020-09-16T13:13:54.791195Z",
        "url": "https://files.pythonhosted.org/packages/5d/60/9df9502ed1f1c6ba80f02b6635bbcd097786c26ee18ef7600b91c0a5ce05/Countrydetails-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad702a22dd67e43d894a5080271aae4baafee49b0470da9a7a0b401bc90c5e19",
          "md5": "52e342a29aad0e58b39cc9f405710277",
          "sha256": "71efdc96087c57e3e9e2fcd6629bf52a0fe4b76eefd7c1cb5f52d6a1b3671093"
        },
        "downloads": -1,
        "filename": "Countrydetails-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "52e342a29aad0e58b39cc9f405710277",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3236610,
        "upload_time": "2020-09-16T13:15:31",
        "upload_time_iso_8601": "2020-09-16T13:15:31.129075Z",
        "url": "https://files.pythonhosted.org/packages/ad/70/2a22dd67e43d894a5080271aae4baafee49b0470da9a7a0b401bc90c5e19/Countrydetails-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8172be8f7d90ad850b9612de502b5cfd3b51175af8614f53b68f7728c3fe7dc8",
          "md5": "2475022f6c825969c3a660b79e15465b",
          "sha256": "47bb4405cd7b2e8f0027cdaee98ffe74f90df0b6f5996eda59bb226a154fb252"
        },
        "downloads": -1,
        "filename": "Countrydetails-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2475022f6c825969c3a660b79e15465b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3531887,
        "upload_time": "2020-09-16T14:01:24",
        "upload_time_iso_8601": "2020-09-16T14:01:24.570776Z",
        "url": "https://files.pythonhosted.org/packages/81/72/be8f7d90ad850b9612de502b5cfd3b51175af8614f53b68f7728c3fe7dc8/Countrydetails-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30b02a05aa2f14b8a9832abca31dc009714422da3d735e1e3398062ab1baab25",
          "md5": "6b99e66a39503b6e8dbe7d92fc956158",
          "sha256": "4a4212506549c33189a43e2172a5d3c0e347c69d9bc7b973383bf1222d0bf6af"
        },
        "downloads": -1,
        "filename": "Countrydetails-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6b99e66a39503b6e8dbe7d92fc956158",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3236547,
        "upload_time": "2020-09-16T14:01:32",
        "upload_time_iso_8601": "2020-09-16T14:01:32.929970Z",
        "url": "https://files.pythonhosted.org/packages/30/b0/2a05aa2f14b8a9832abca31dc009714422da3d735e1e3398062ab1baab25/Countrydetails-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec859314735b130d098c41df7df45d58ffd480a192b6575ca03e1d6b33406ad8",
          "md5": "cf8c99a9e05f0c54fdaea7cbd85d8ec8",
          "sha256": "0d398ec6ae75ed7d4e82a8c7b6fe743f4b46ea0df3c0474ed7a33736daa48366"
        },
        "downloads": -1,
        "filename": "Countrydetails-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf8c99a9e05f0c54fdaea7cbd85d8ec8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3541596,
        "upload_time": "2022-10-07T16:29:48",
        "upload_time_iso_8601": "2022-10-07T16:29:48.384444Z",
        "url": "https://files.pythonhosted.org/packages/ec/85/9314735b130d098c41df7df45d58ffd480a192b6575ca03e1d6b33406ad8/Countrydetails-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf76aef2afffd6a357154668603fe593e12138bd353c8db7041f3cae1bb5faac",
          "md5": "250d7d5102de7b8cf584af66432fb354",
          "sha256": "fba1884efb59211f29790b9075a3f2e3e0cc325866a1808684dd8e03b46b3337"
        },
        "downloads": -1,
        "filename": "Countrydetails-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "250d7d5102de7b8cf584af66432fb354",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3244138,
        "upload_time": "2022-10-07T16:29:52",
        "upload_time_iso_8601": "2022-10-07T16:29:52.869614Z",
        "url": "https://files.pythonhosted.org/packages/cf/76/aef2afffd6a357154668603fe593e12138bd353c8db7041f3cae1bb5faac/Countrydetails-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec859314735b130d098c41df7df45d58ffd480a192b6575ca03e1d6b33406ad8",
        "md5": "cf8c99a9e05f0c54fdaea7cbd85d8ec8",
        "sha256": "0d398ec6ae75ed7d4e82a8c7b6fe743f4b46ea0df3c0474ed7a33736daa48366"
      },
      "downloads": -1,
      "filename": "Countrydetails-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cf8c99a9e05f0c54fdaea7cbd85d8ec8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3541596,
      "upload_time": "2022-10-07T16:29:48",
      "upload_time_iso_8601": "2022-10-07T16:29:48.384444Z",
      "url": "https://files.pythonhosted.org/packages/ec/85/9314735b130d098c41df7df45d58ffd480a192b6575ca03e1d6b33406ad8/Countrydetails-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf76aef2afffd6a357154668603fe593e12138bd353c8db7041f3cae1bb5faac",
        "md5": "250d7d5102de7b8cf584af66432fb354",
        "sha256": "fba1884efb59211f29790b9075a3f2e3e0cc325866a1808684dd8e03b46b3337"
      },
      "downloads": -1,
      "filename": "Countrydetails-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "250d7d5102de7b8cf584af66432fb354",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3244138,
      "upload_time": "2022-10-07T16:29:52",
      "upload_time_iso_8601": "2022-10-07T16:29:52.869614Z",
      "url": "https://files.pythonhosted.org/packages/cf/76/aef2afffd6a357154668603fe593e12138bd353c8db7041f3cae1bb5faac/Countrydetails-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}