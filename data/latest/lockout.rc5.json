{
  "info": {
    "author": "Wilmer Arbelo",
    "author_email": "wilmer.arbelogonzalez@ucsf.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Lockout\n[![PyPI Version][pypi-image]][pypi-url]\n\nSparsity Inducing Regularization of Neural Networks\n\n## Install\n\n```\npip install lockout [-- upgrade]\n```\n\n## Usage\n[`PyTorch`](https://pytorch.org/) installation required.  \n\n### **1.** Neural Network Architecture\nTo modify the architecture of the neural network change either: \n* The number of input features: n_features\n* The number of layers: len(layer_sizes)\n* The number of nodes in the i<em>th</em> layer: layer_sizes[i]\n```\nfrom lockout.pytorch_utils import FCNN\n\nn_features  = 100       \nlayer_sizes = [10, 1]   \nmodel_init  = FCNN(n_features, layer_sizes)\n```\n\n### **2.** Create PyTorch DataLoaders\nPrevious preprocessing and partitioning of the data is assumed.\n```\nfrom lockout.pytorch_utils import make_DataLoaders\n\ndl_train, dl_valid, dl_test = make_DataLoaders(xtrain, xvalid, xtest, ytrain, yvalid, ytest)\n```\n\n### **3.** Unconstrained Training\nModify the following hyperparameters according to your particular problem:\n* lr: Learning rate\n* loss_type: Type of loss function\n    - loss_type=1 (Mean Squared Error) \n    - loss_type=2 (Mean Cross Entropy)\n* optim_id: Optimizer \n    - optim_id = 1: Stochastic Gradient Descend\n    - optim_id = 2: Adam\n* epochs: Maximum number of epochs during training\n* early_stopping: Number of epochs used in the convergence condition\n* tol_loss: Maximum change in the training loss function used in the convergence condition\n* reset_weights: Whether or not to reset weights before starts training\n```\nfrom lockout import Lockout\n\nlr = 1e-2\nloss_type = 1\noptim_id  = 1\n\n# Instantiate Lockout\nlockout_forward = Lockout(model_init, \n                          lr=lr, \n                          loss_type=loss_type, \n                          optim_id=optim_id)\n\n# Train Neural Network Without Regularization\nlockout_forward.train(dl_train, dl_valid, \n                      train_how=\"unconstrained\",\n                      epochs=10000,\n                      early_stopping=20,\n                      tol_loss=1e-6,\n                      reset_weights=True)\n```\n\nThe model at the validation minimum and the unconstrained model can be retrieved and saved for further use.\n```\nfrom lockout.pytorch_utils import save_model\n\n# Save Unconstrained Model\nmodel_forward_unconstrained = lockout_forward.model_last\nsave_model(model_forward_unconstrained, 'model_forward_unconstrained.pth')\n\n# Save Model At Validation Minimum\nmodel_forward_best = lockout_forward.model_best_valid\nsave_model(model_forward_best, 'model_forward_best.pth')\n```\n\nLoss and accuracy curves can be retrieved for analysis or graphing. For regression problems, R2 is computed as the accuracy.\n```\ndf0 = lockout_forward.path_data\ndf0.head()\n```\n<p align=\"left\">\n  <img src=\"Doc/path_data0.png\" width=\"400\" title=\"Loss and accuracy curves for unconstrained training\">\n</p>\n\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axes = plt.subplots(figsize=(9,6))\naxes.plot(df0[\"iteration\"], df0[\"train_loss\"], label=\"Training\", linewidth=4)\naxes.plot(df0[\"iteration\"], df0[\"valid_loss\"], label=\"Validation\", linewidth=4)\naxes.legend(fontsize=16)\naxes.set_xlabel(\"iteration\", fontsize=16)\naxes.set_ylabel(\"Loss Function\", fontsize=16)\naxes.tick_params(axis='both', which='major', labelsize=14)\naxes.set_title(\"Unconstrained\", fontsize=16)\naxes.grid(True, zorder=2)\nplt.show()\n```\n<p align=\"left\">\n  <img src=\"Doc/loss_vs_iter_forward.png\" width=\"400\" title=\"Loss vs iteration for unconstrained training\">\n</p>\n\n### **4.** Lockout Training: Option 1\nWithin this option, the network is first trained until the regularization path is found (Path 1). Then, the constraint t<sub>0</sub> is iteratively decreased during training with a stepsize &Delta;t<sub>0</sub> inversely proportional to the number of epochs (Path 2).\nA small &Delta;t<sub>0</sub> is necessary to stay on the regularization path.\n<br>\nModify the following hyperparameters according to your particular problem:\n* input_model: input model, either unconstrained or at validation minimum\n* regul_type: list of tuples (or dictionary) of the form [(layer_name, regul_id)] where:\n    - layer_name: layer name in the input model (string)\n    - regul_id = 1: L1 regularization\n    - regul_id = 2: Log regularization (see get_constraint function)\n* regul_path: list of tuples (or dictionary) of the form [(layer_name, path_flg)] where:\n    - path_flg = True: the constraint t<sub>0</sub> will be iteratively decreased in this layer\n    - path_flg = False: the constraint t<sub>0</sub> will be kept constant in this layer\n* epochs: maximum number of epochs used to bring the network to the regularization path (Path 1)\n* epochs2: maximum number of epochs used while training decreasing t<sub>0</sub> (Path 2)\n\n```\nfrom lockout import Lockout\n\nregul_type = [('linear_layers.0.weight', 1)]\nregul_path = [('linear_layers.0.weight', True)]\n\n# Instantiate Lockout\nlockout_option1 = Lockout(lockout_forward.model_best_valid,\n                          lr=1e-2, \n                          loss_type=1,\n                          regul_type=regul_type,\n                          regul_path=regul_path)\n\n# Train Neural Network With Lockout\nlockout_option1.train(dl_train, dl_valid, \n                      train_how=\"decrease_t0\", \n                      epochs=5000,\n                      epochs2=20000,\n                      early_stopping=20, \n                      tol_loss=1e-5)\n```\n\nThe model at the validation minimum can be retrieved and saved for further use.\n```\nfrom lockout.pytorch_utils import save_model\n\n# Save Model At Validation Minimum\nmodel_lockout_option1 = lockout_option1.model_best_valid\nsave_model(model_lockout_option1, 'model_lockout_option1.pth')\n```\n\nPath data can be retrieved for analysis or graphing.\n```\ndf1 = lockout_forward.path_data\ndf1.head()\n```\n<p align=\"left\">\n  <img src=\"Doc/path_data1.png\" width=\"900\" title=\"Path data for lockout training\">\n</p>\n\nTest accuracy can be computed using the models previously trained.\n```\nimport torch\nfrom lockout.pytorch_utils import dataset_r2\n\ndevice = torch.device('cpu')\nr2_test_forward, _  = dataset_r2(dl_test, model_forward_best, device)\nr2_test_lockout1, _ = dataset_r2(dl_test, model_lockout_option1, device)\nprint(\"Test R2 (unconstrained) = {:.3f}\".format(r2_test_forward))\nprint(\"Test R2 (lockout)       = {:.3f}\".format(r2_test_lockout1))\n```\n<p align=\"left\">\n  <img src=\"Doc/r2_test1.png\" width=\"280\" title=\"Test R2\">\n</p>\n\nFeature importance can be computed and graphed.\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom lockout.pytorch_utils import get_features_importance\n\nimportance = get_features_importance(model_lockout_option1, 'linear_layers.0.weight')\n\nfig, axes = plt.subplots(figsize=(9,6))\nx_pos = np.arange(len(importance))\naxes.bar(x_pos, importance, zorder=2)\naxes.set_xticks(x_pos)\naxes.set_xticklabels(importance.index, rotation='vertical')\naxes.set_xlim(-1,len(x_pos))\naxes.tick_params(axis='both', which='major', labelsize=14)\naxes.set_ylabel('Importance', fontsize=16)\naxes.set_xlabel('feature', fontsize=16)\naxes.set_title('Lockout', fontsize=16)\naxes.grid(True, zorder=1)\nplt.show()\n```\n<p align=\"left\">\n  <img src=\"Doc/feature_importance_lockout1.png\" width=\"500\" title=\"feature importance with lockout\">\n</p>\n\n### **5.** Lockout Training: Option 2\nWihtin this option, a discrete set of t<sub>0</sub> values is sampled. They can be entered as a 1D tensor.<br>\nModify the following hyperparameters according to your particular problem:\n* t0_grid: List of tuples (or dictionary) of the form [(layer_name, t0_sampled)] where:\n    - layer_name: layer name in the input model (string)\n    - t0_sampled: 1D tensor with the constraint values t0 to be sampled in the layer\n* epochs: maximum number of epochs used for the first t<sub>0</sub> value, t0_sampled[0]\n* epochs2: maximum number of epochs used for the rest of the t<sub>0</sub> values, t0_sampled[1:]\n```\nfrom lockout import Lockout\n\nregul_type = [('linear_layers.0.weight', 1)]\nregul_path = [('linear_layers.0.weight', True)]\n\nt0_sampled = torch.from_numpy(np.geomspace(53.504620, 1e-3, num=100, endpoint=True))\nt0_grid    = {'linear_layers.0.weight': t0_sampled}\n\n# Instantiate Lockout\nlockout_option2a = Lockout(lockout_forward.model_best_valid,\n                          lr=1e-2, \n                          loss_type=1,\n                          regul_type=regul_type,\n                          regul_path=regul_path, \n                          t0_grid=t0_grid)\n\n# Train Neural Network With Lockout\nlockout_option2a.train(dl_train, dl_valid, \n                      train_how=\"sampling_t0\", \n                      epochs=5000,\n                      epochs2=200,\n                      early_stopping=20, \n                      tol_loss=1e-4)\n```\n\nAll the functionalities described above can be used here, including retrieving the model at the validation minimum and computing feature importance.\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom lockout.pytorch_utils import save_model, get_features_importance\n\nmodel_lockout_option2a = lockout_option2a.model_best_valid\nsave_model(model_lockout_option2a, 'model_lockout_option2a.pth')\n\nimportance = get_features_importance(model_lockout_option2a, 'linear_layers.0.weight')\n\nfig, axes = plt.subplots(figsize=(9,6))\nx_pos = np.arange(len(importance))\naxes.bar(x_pos, importance, zorder=2)\naxes.set_xticks(x_pos)\naxes.set_xticklabels(importance.index, rotation='vertical')\naxes.set_xlim(-1,len(x_pos))\naxes.tick_params(axis='both', which='major', labelsize=14)\naxes.set_ylabel('Importance', fontsize=16)\naxes.set_xlabel('feature', fontsize=16)\naxes.set_title('Lockout', fontsize=16)\naxes.grid(True, zorder=1)\nplt.show()\n``` \n<p align=\"left\">\n  <img src=\"Doc/feature_importance_lockout2a.png\" width=\"500\" title=\"feature importance with lockout\">\n</p>\n\nAlternatively, the discrete set of t<sub>0</sub> values can be generated internally, in which case they are linearly sampled.<br>\nModify the following hyperparameters according to your particular problem:\n* t0_points: list of tuples (or dictionary) of the form [(layer_name, t0_number)] where:\n    - layer_name: layer name in the input model (string)\n    - t0_number: number of constraint values t0 to be linearly sampled (integer)\n```\nfrom lockout import Lockout\n\nregul_type = [('linear_layers.0.weight', 1)]\nregul_path = [('linear_layers.0.weight', True)]\nt0_points  = {'linear_layers.0.weight': 200}\n\n# Instantiate Lockout\nlockout_option2b = Lockout(lockout_forward.model_best_valid,\n                          lr=1e-2, \n                          loss_type=1,\n                          regul_type=regul_type,\n                          regul_path=regul_path, \n                          t0_points=t0_points)\n\n# Train Neural Network With Lockout\nlockout_option2b.train(dl_train, dl_valid, \n                      train_how=\"sampling_t0\", \n                      epochs=5000,\n                      epochs2=200,\n                      early_stopping=20, \n                      tol_loss=1e-4)\n```\n\n<!-- ### **6.** Lockout Training: Option 3\nWhithin this option, the neural network is trained with a single (constant) value of t<sub>0</sub> until the regularization path is found.<br>\nModify the following hyperparameters according to your particular problem: -->\n\n\n## Paper\n\nhttps://arxiv.org/abs/2107.07160\n\n<p align=\"left\">\n  <img src=\"Doc/abstract.png\" width=\"900\" title=\"paper abstract\">\n</p>\n\n<!-- **Abstract:** Regularized regression and classification procedures attempt to fit a function $f(\\bm{x}, \\bm{\\omega})$ of multiple predictor variables $\\bm{x}$, to data $\\{\\bm{x}_i, \\bm{y}_i\\}^N_i$, based on some loss criterion $L(y,f)$ but adding a constraint $P(\\bm{\\omega})\\le t_0$ on the joint values of the parameters $\\bm{\\omega}$ to improve accuracy. While there are efficient methods for finding solutions for all values of $t_0 \\ge 0$ with some constraints $P$ in the special case that $f$ is a linear function, none exist for non linear functions such as Neural Networks (NN). Here we present a fast algorithm that provides all such solutions for any differentiable function $f$ and loss $L$, and any constraint $P$ that is an increasing monotone function of the absolute value of each parameter. Applications involving sparsity inducing regularization of arbitrary neural networks are discussed. Empirical results indicate that these sparse solutions are usually superior to their dense counterparts in both accuracy and interpretability. This improvement in accuracy can often make neural networks competitive with, and some times superior to, state of the art methods in the analysis of tabular data. -->\n\n<!-- Badges -->\n\n[pypi-image]: https://img.shields.io/pypi/v/lockout\n[pypi-url]: https://pypi.org/project/lockout/\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/warbelo/Lockout",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lockout",
    "package_url": "https://pypi.org/project/lockout/",
    "platform": "",
    "project_url": "https://pypi.org/project/lockout/",
    "project_urls": {
      "Homepage": "https://github.com/warbelo/Lockout"
    },
    "release_url": "https://pypi.org/project/lockout/0.1.5/",
    "requires_dist": [
      "flit_core >=2,<4",
      "scikit-learn",
      "tqdm",
      "pandas",
      "matplotlib",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Lockout: Sparse Regularization of Neural Networks",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11082052,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "501204b64d145de6fc57fe0bf75a259c69f5db11a821dd8e6812662ca9aee825",
          "md5": "791bdbf1df8e48293aadf2104d2b1206",
          "sha256": "405c07d1bac146e5244a0b7a20e19e268663be11265e7949b492ef2aa69b8d8b"
        },
        "downloads": -1,
        "filename": "lockout-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "791bdbf1df8e48293aadf2104d2b1206",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13036,
        "upload_time": "2021-07-29T23:28:45",
        "upload_time_iso_8601": "2021-07-29T23:28:45.001001Z",
        "url": "https://files.pythonhosted.org/packages/50/12/04b64d145de6fc57fe0bf75a259c69f5db11a821dd8e6812662ca9aee825/lockout-0.1.1-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "141b4691768c75236e031e928e5ff5751cd23d967d429c9ccbb697a374b4578a",
          "md5": "44d2808fd3d4786b74729f14fa258823",
          "sha256": "1824495fed583dc18bd86c32b3fdbafae0b58c0a9bcdf87e9d79d063b4fd08cc"
        },
        "downloads": -1,
        "filename": "lockout-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "44d2808fd3d4786b74729f14fa258823",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14134433,
        "upload_time": "2021-07-29T23:29:14",
        "upload_time_iso_8601": "2021-07-29T23:29:14.265116Z",
        "url": "https://files.pythonhosted.org/packages/14/1b/4691768c75236e031e928e5ff5751cd23d967d429c9ccbb697a374b4578a/lockout-0.1.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d8effc145641d70f4d964ff599cda60abe055aca43d801c575354e3dda58255",
          "md5": "68aa7340fc9e31ce4085a7a98a8afdb5",
          "sha256": "a5823085c0c05ec4790ae284e50cb94e5194614672b0679b41bf53094f9a517c"
        },
        "downloads": -1,
        "filename": "lockout-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68aa7340fc9e31ce4085a7a98a8afdb5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13325,
        "upload_time": "2021-07-30T00:24:13",
        "upload_time_iso_8601": "2021-07-30T00:24:13.238161Z",
        "url": "https://files.pythonhosted.org/packages/8d/8e/ffc145641d70f4d964ff599cda60abe055aca43d801c575354e3dda58255/lockout-0.1.2-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ceab9b84abf3e528a769c17911908fc1ba5b27de6ca4ddcc4f1b78b38a3d80ee",
          "md5": "dab8d27efd294dcdb313104d5b439739",
          "sha256": "8125b53911c53bb51b2f0324aacb6a12d94ef2680b770ae12b5a0375ae212fb6"
        },
        "downloads": -1,
        "filename": "lockout-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dab8d27efd294dcdb313104d5b439739",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14134720,
        "upload_time": "2021-07-30T00:24:42",
        "upload_time_iso_8601": "2021-07-30T00:24:42.679024Z",
        "url": "https://files.pythonhosted.org/packages/ce/ab/9b84abf3e528a769c17911908fc1ba5b27de6ca4ddcc4f1b78b38a3d80ee/lockout-0.1.2.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f9c646ac292d74a13e379b0029626775e69970539073c8b2be25a8038bcddc1",
          "md5": "24719dac892893cc26795fe0c34eb4b4",
          "sha256": "065a0d1324892bb6573c61df257ba2f38c53e81423ded85d5b15ea1a88f71851"
        },
        "downloads": -1,
        "filename": "lockout-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24719dac892893cc26795fe0c34eb4b4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14791,
        "upload_time": "2021-07-31T18:48:18",
        "upload_time_iso_8601": "2021-07-31T18:48:18.451398Z",
        "url": "https://files.pythonhosted.org/packages/9f/9c/646ac292d74a13e379b0029626775e69970539073c8b2be25a8038bcddc1/lockout-0.1.3-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7731248c3b6edaab72567d7fc434a3a0e8eba24e0e1431815b96cac02d4be17",
          "md5": "609f7c29295d9da157ac16b3d621f1bf",
          "sha256": "5b73b2c028728713f6a102a745960a526c321ad1a89b9799917204e299d68c85"
        },
        "downloads": -1,
        "filename": "lockout-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "609f7c29295d9da157ac16b3d621f1bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14136164,
        "upload_time": "2021-07-31T18:48:49",
        "upload_time_iso_8601": "2021-07-31T18:48:49.031460Z",
        "url": "https://files.pythonhosted.org/packages/a7/73/1248c3b6edaab72567d7fc434a3a0e8eba24e0e1431815b96cac02d4be17/lockout-0.1.3.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72a199166f0913f3c7466f299ff103e66af47840c97706ad9e3fd2f3c5005b03",
          "md5": "a109652571466c23a0bed0179e8dcf71",
          "sha256": "1dcf6b2af63eb6648b95946663ead25b5e632d01cc9b0c41c74ea71620cd1329"
        },
        "downloads": -1,
        "filename": "lockout-0.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a109652571466c23a0bed0179e8dcf71",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14927,
        "upload_time": "2021-08-01T03:33:03",
        "upload_time_iso_8601": "2021-08-01T03:33:03.997319Z",
        "url": "https://files.pythonhosted.org/packages/72/a1/99166f0913f3c7466f299ff103e66af47840c97706ad9e3fd2f3c5005b03/lockout-0.1.4-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b24ff9ee30fb3b27f62d96cc4f1c1680094573e1f474aac90289220c986462f5",
          "md5": "602e48f1e926a3279339bc0e54e3ea5f",
          "sha256": "3c230cf8f4f407ddefe0bcdd2a7a3ecdec8d56d80e1f37c66e7b09e5bd5efc30"
        },
        "downloads": -1,
        "filename": "lockout-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "602e48f1e926a3279339bc0e54e3ea5f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14136262,
        "upload_time": "2021-08-01T03:33:41",
        "upload_time_iso_8601": "2021-08-01T03:33:41.664292Z",
        "url": "https://files.pythonhosted.org/packages/b2/4f/f9ee30fb3b27f62d96cc4f1c1680094573e1f474aac90289220c986462f5/lockout-0.1.4.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffebb75a6ae7a53d4149bc4f37c2d665b7fbfb68a001238a8dd62d3b4ced19c5",
          "md5": "eee8b25680208082137885b07d8d4d21",
          "sha256": "5046669358c6baf0e0648ecaae482584c0e442a4914a0570edeedee119352776"
        },
        "downloads": -1,
        "filename": "lockout-0.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eee8b25680208082137885b07d8d4d21",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 17469,
        "upload_time": "2021-08-03T18:09:27",
        "upload_time_iso_8601": "2021-08-03T18:09:27.106514Z",
        "url": "https://files.pythonhosted.org/packages/ff/eb/b75a6ae7a53d4149bc4f37c2d665b7fbfb68a001238a8dd62d3b4ced19c5/lockout-0.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dc47cf469ed0a59a679b0539582319251988df6bc0c01a4bfffe5f0cb3b2ff7",
          "md5": "2b81adce8d138c4f997dbbd7fa01d596",
          "sha256": "ba6b9acb65bf4cc7151b95603a2f8c94bf56af41c7c91f5881a124ae5580e5c7"
        },
        "downloads": -1,
        "filename": "lockout-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2b81adce8d138c4f997dbbd7fa01d596",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14684970,
        "upload_time": "2021-08-03T18:10:07",
        "upload_time_iso_8601": "2021-08-03T18:10:07.693275Z",
        "url": "https://files.pythonhosted.org/packages/5d/c4/7cf469ed0a59a679b0539582319251988df6bc0c01a4bfffe5f0cb3b2ff7/lockout-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffebb75a6ae7a53d4149bc4f37c2d665b7fbfb68a001238a8dd62d3b4ced19c5",
        "md5": "eee8b25680208082137885b07d8d4d21",
        "sha256": "5046669358c6baf0e0648ecaae482584c0e442a4914a0570edeedee119352776"
      },
      "downloads": -1,
      "filename": "lockout-0.1.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eee8b25680208082137885b07d8d4d21",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 17469,
      "upload_time": "2021-08-03T18:09:27",
      "upload_time_iso_8601": "2021-08-03T18:09:27.106514Z",
      "url": "https://files.pythonhosted.org/packages/ff/eb/b75a6ae7a53d4149bc4f37c2d665b7fbfb68a001238a8dd62d3b4ced19c5/lockout-0.1.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5dc47cf469ed0a59a679b0539582319251988df6bc0c01a4bfffe5f0cb3b2ff7",
        "md5": "2b81adce8d138c4f997dbbd7fa01d596",
        "sha256": "ba6b9acb65bf4cc7151b95603a2f8c94bf56af41c7c91f5881a124ae5580e5c7"
      },
      "downloads": -1,
      "filename": "lockout-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "2b81adce8d138c4f997dbbd7fa01d596",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14684970,
      "upload_time": "2021-08-03T18:10:07",
      "upload_time_iso_8601": "2021-08-03T18:10:07.693275Z",
      "url": "https://files.pythonhosted.org/packages/5d/c4/7cf469ed0a59a679b0539582319251988df6bc0c01a4bfffe5f0cb3b2ff7/lockout-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}