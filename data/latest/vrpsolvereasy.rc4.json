{
  "info": {
    "author": "\"UCHOA Eduardo SADYKOV Ruslan QUEIROGA Eduardo ERRAMI Najib\"",
    "author_email": "\"najib.errami@inria.fr\"",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "VRPSolverEasy \n==============================\n.. image:: https://github.com/inria-UFF/VRPSolverEasy/actions/workflows/python-package.yml/badge.svg\n    :target: https://github.com/inria-UFF/VRPSolverEasy/actions/workflows/python-package.yml\n\nVRPSolverEasy is a Python package which provides a **simple interface\nfor** `VRPSolver <https://vrpsolver.math.u-bordeaux.fr/>`__, which is a\nstate-of-the-art Branch-Cut-and-Price exact solver for vehicle routing\nproblems (VRPs). The simplified interface is accessible for **users\nwithout operations research background**, i.e., you do not need to know\nhow to model your problem as an Integer Programming problem. As a price\nto pay for the simplicity, this interface is restricted to some standard\nVRP variants, which involve the following features and their\ncombinations:\n\n    * capacitated vehicles, \n    * customer time windows, \n    * heterogeneous fleet,\n    * multiple depots,\n    * open routes,\n    * optional,\n    * customers with penalties,\n    * parallel links to model transition time/cost trade-off,\n    * incompatibilities between vehicles and customers,\n    * customers with alternative locations and/or time windows.\n\nTo our knowledge, VRPSolver is the most efficient **exact** solver\navailable for VRPs. Its particularity is to focus on finding and\nimproving a **lower bound** on the optimal solution value of your\ninstance. It is less efficient in finding feasible solutions, but still\ncan be better than available heuristic solvers for non-classic VRP\nvariants. One can expect to find **provably optimal solutions** for\ninstances with up to 100 customers. Instances with up to 200-250\ncustomers may also be solved in some cases, usually in long runs.\nPerformance of VRPSolver significantly improves when it is used together\nwith an efficient heuristic VRP solver, which is able to provide *very\ngood* initial upper bounds.\n\nVRPSolverEasy package is a **work in progress** for the moment. The\naccompanying paper is in preparation.\n\nVRPSolver is based on a research proof-of-concept code prone to issues.\nUse it only for research, teaching, testing, and R&D purposes at your\nown risk. It is not suited for use in production. Please use Issues\nsection in this repository to report bugs and issues, and to give\nsuggestions.\n\nLicense\n-------\n\nThe VRPSolverEasy package itself is open-source and free to use. It\nincludes compiled libraries of\n`BaPCod <https://bapcod.math.u-bordeaux.fr/>`__, its VRPSolver\nextension, and COIN-OR CLP solver. These libraries are also free to use.\n\nFor better performance, it is possible to use VRPSolverEasy together\nwith CPLEX MIP solver. This combination called *academic version*\nrequires an access to the source code of BaPCod available with an\n`academic-use-only\nlicense <https://bapcod.math.u-bordeaux.fr/#licence>`__. The academic\nversion of VRPSolverEasy additionally includes a MIP-based (slow)\nheuristic which is useful for finding feasible solutions in the absence\nof an external heuristic solver.\n\nInstallation\n------------\n\n.. image:: https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg\n\n``VRPSolverEasy`` requires a version of python >= 3.6\n\n.. warning::\n        Before starting the installation, we invite you to update\n        your version of pip by running this command: ::\n\n            python -m pip install --upgrade pip\n\nThere is two different way to install ``VRPSolverEasy`` :\n\nThe first way is to install it with ``pip``::\n\n   python -m pip install VRPSolverEasy\n\nThe second way is to follow these steps:\n\n-  Download the package and extract it into a local directory\n-  Move to this local directory and enter : ::\n\n    python pip install .\n\nInstallation instructions for Mac computers with Apple ARM processors,\nas well as for the academic version, are given in the documentation.\n\nExample\n-------\n\nA simple example that shows how to use the VRPSolverEasy package:\n\n.. code:: python\n\n\n   import math\n   import VRPSolverEasy as vrpse\n\n   def compute_euclidean_distance(x_i, y_i, x_j, y_j):\n       \"\"\"compute the euclidean distance between 2 points from graph\"\"\"\n       return round(math.sqrt((x_i - x_j)**2 +\n                              (y_i - y_j)**2), 3)\n\n   # data\n   cost_per_distance = 10\n   begin_time = 0\n   end_time = 5000\n   nb_point = 7\n\n   # map with names and coordinates\n   coordinates = {\"Wisconsin, USA\": (44.50, -89.50),  # depot\n                  \"West Virginia, USA\": (39.000000, -80.500000),\n                  \"Vermont, USA\": (44.000000, -72.699997),\n                  \"Texas, the USA\": (31.000000, -100.000000),\n                  \"South Dakota, the US\": (44.500000, -100.000000),\n                  \"Rhode Island, the US\": (41.742325, -71.742332),\n                  \"Oregon, the US\": (44.000000, -120.500000)\n                  }\n\n\n   # demands of points\n   demands = [0, 500, 300, 600, 658, 741, 436]\n\n   # Initialisation\n   model = vrpse.Model()\n\n   # Add vehicle type\n   model.add_vehicle_type(\n       id=1,\n       start_point_id=0,\n       end_point_id=0,\n       name=\"VEH1\",\n       capacity=1100,\n       max_number=6,\n       var_cost_dist=cost_per_distance,\n       tw_end=5000)\n\n   # Add depot\n   model.add_depot(id=0, name=\"D1\", tw_begin=0, tw_end=5000)\n\n   coordinates_keys = list(coordinates.keys())\n   # Add Customers\n   for i in range(1, nb_point):\n       model.add_customer(\n           id=i,\n           name=coordinates_keys[i],\n           demand=demands[i],\n           tw_begin=begin_time,\n           tw_end=end_time)\n\n   # Add links\n   coordinates_values = list(coordinates.values())\n   enumerate = 1\n   for i in range(0, 7):\n       for j in range(i + 1, 7):\n           dist = compute_euclidean_distance(coordinates_values[i][0],\n                                             coordinates_values[j][0],\n                                             coordinates_values[i][1],\n                                             coordinates_values[j][1])\n           model.add_link(\n               start_point_id=i,\n               end_point_id=j,\n               name=\"arc\" + str(enumerate),\n               distance=dist,\n               time=dist)\n           enumerate += 1\n\n   # solve model\n   model.solve()\n   model.export()\n\n   if model.solution.is_defined():\n       print(model.solution)\n\nDocumentation\n-------------\n\nDocumentation, explanation of demos (CVRP, VRPTW, HFVRP, and MDVRP), and\nthe solver API are accessible here: https://vrpsolvereasy.readthedocs.io/en/latest/.\n\nYou can also build the documentation locally by following this\ninstructions from the source folder : ::\n\n   cd docs\n   python -m pip install -r requirements.txt\n   cd ..\n   make html\n\nThe HTML pages will be in the folder ``build\\html``.\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://vrpsolvereasy.readthedocs.io/en/latest/",
    "keywords": "['VRP','Branch-Cut-&Price','Operations Research','Optimization','Linear Programming','Routing problems','Solver','Supply chain']",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "VRPSolverEasy",
    "package_url": "https://pypi.org/project/VRPSolverEasy/",
    "platform": null,
    "project_url": "https://pypi.org/project/VRPSolverEasy/",
    "project_urls": {
      "Homepage": "https://vrpsolvereasy.readthedocs.io/en/latest/"
    },
    "release_url": "https://pypi.org/project/VRPSolverEasy/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "'VRPSolverEasy is a simplified modeler solving routing problems by using a Branch-Cut-and-Price approach on a solver like CLP or CPLEX'",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17538926,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a00921529278aa655ad2cce1daf56d6f4bc4d3d237a92037e4fcfbd1d24d42ca",
          "md5": "2cd22720e0bbff3e46f9851f7f287e52",
          "sha256": "8f9c4ec99c6742a7d271026f99a5f380256353230cf8de667423a697200ec572"
        },
        "downloads": -1,
        "filename": "VRPSolverEasy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2cd22720e0bbff3e46f9851f7f287e52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9855150,
        "upload_time": "2023-02-10T23:43:00",
        "upload_time_iso_8601": "2023-02-10T23:43:00.506450Z",
        "url": "https://files.pythonhosted.org/packages/a0/09/21529278aa655ad2cce1daf56d6f4bc4d3d237a92037e4fcfbd1d24d42ca/VRPSolverEasy-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b132f38ad98c234febe59d7fa06a4e32423f2a7229d85f2587c3ca367d3ea16f",
          "md5": "ffed8bdbf631ee01b4abaaba0d310abf",
          "sha256": "95f91f805afc47aff2c0e813e98f70c6c834186ef77e78f170d74b8f508b781f"
        },
        "downloads": -1,
        "filename": "VRPSolverEasy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ffed8bdbf631ee01b4abaaba0d310abf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9808475,
        "upload_time": "2023-02-10T23:43:03",
        "upload_time_iso_8601": "2023-02-10T23:43:03.037958Z",
        "url": "https://files.pythonhosted.org/packages/b1/32/f38ad98c234febe59d7fa06a4e32423f2a7229d85f2587c3ca367d3ea16f/VRPSolverEasy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "379f26232888b2cd2b1467b1d165d594a6f2edccb846578fea3317d567372eb5",
          "md5": "6f95db13c2db6ed7ec568df70c5a360d",
          "sha256": "6370dc38d3c489bdae97d34883d6379e3f4b4d3eadf7d2117992ad28268e9519"
        },
        "downloads": -1,
        "filename": "VRPSolverEasy-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f95db13c2db6ed7ec568df70c5a360d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9874979,
        "upload_time": "2023-02-15T11:12:29",
        "upload_time_iso_8601": "2023-02-15T11:12:29.159339Z",
        "url": "https://files.pythonhosted.org/packages/37/9f/26232888b2cd2b1467b1d165d594a6f2edccb846578fea3317d567372eb5/VRPSolverEasy-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a044bfad12c6488e2911c034bb0ff2b5c73fb8c94aa43c2dc8850325ea93df3d",
          "md5": "cb8f50421b75e470b3150ec9efae6b81",
          "sha256": "28ba9c8368da669e4bc0dbea94b85370e4fa10f585cdf0dfaf5d8d5dfc588df8"
        },
        "downloads": -1,
        "filename": "VRPSolverEasy-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cb8f50421b75e470b3150ec9efae6b81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9827490,
        "upload_time": "2023-02-15T11:12:31",
        "upload_time_iso_8601": "2023-02-15T11:12:31.484645Z",
        "url": "https://files.pythonhosted.org/packages/a0/44/bfad12c6488e2911c034bb0ff2b5c73fb8c94aa43c2dc8850325ea93df3d/VRPSolverEasy-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a5d5b95ca7b0c68684f2893f6dd238d03d4d945741927d012fc8ce492e5e677",
          "md5": "ab4d723c86f21bb387e382de0aa0994a",
          "sha256": "a7589e944ab2681ad7723da2ca63653c692d59592f9ce91e748aaea580a71126"
        },
        "downloads": -1,
        "filename": "VRPSolverEasy-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab4d723c86f21bb387e382de0aa0994a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10410214,
        "upload_time": "2023-03-31T16:30:37",
        "upload_time_iso_8601": "2023-03-31T16:30:37.465173Z",
        "url": "https://files.pythonhosted.org/packages/3a/5d/5b95ca7b0c68684f2893f6dd238d03d4d945741927d012fc8ce492e5e677/VRPSolverEasy-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9751496c9537e4854316f09042afe12a66f9930499abd637ff9d71290f7b5347",
          "md5": "7322952eee4d7a97088bd3b811a0f075",
          "sha256": "7b4a589820708c32b0074e3e59446ee15286631b6793c48e877f2569b2075f23"
        },
        "downloads": -1,
        "filename": "VRPSolverEasy-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7322952eee4d7a97088bd3b811a0f075",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10105672,
        "upload_time": "2023-03-31T16:30:40",
        "upload_time_iso_8601": "2023-03-31T16:30:40.201229Z",
        "url": "https://files.pythonhosted.org/packages/97/51/496c9537e4854316f09042afe12a66f9930499abd637ff9d71290f7b5347/VRPSolverEasy-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ef4fb56cf76c198f62e4d170614e7c24f612d1aca8420ac86813ecd69799bab",
          "md5": "55fdd4f745bb0d1edec4c96edd3f0a52",
          "sha256": "88e8a8be9af0227498d447d49e436a0d0a5469e88f3fd6a47934836c6f4311f7"
        },
        "downloads": -1,
        "filename": "VRPSolverEasy-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55fdd4f745bb0d1edec4c96edd3f0a52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10410233,
        "upload_time": "2023-04-01T10:55:05",
        "upload_time_iso_8601": "2023-04-01T10:55:05.594103Z",
        "url": "https://files.pythonhosted.org/packages/9e/f4/fb56cf76c198f62e4d170614e7c24f612d1aca8420ac86813ecd69799bab/VRPSolverEasy-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29614e3f53dcf1f3f8c59bb75ebed45310a81efd4c4c0b2fe457a3ec77cc732e",
          "md5": "3c454f1a51c0c6f0d2778824ae11871f",
          "sha256": "e755522f220610cef2d0dc9a1e00e9271ea85625444c47bddf663d98e8ade702"
        },
        "downloads": -1,
        "filename": "VRPSolverEasy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3c454f1a51c0c6f0d2778824ae11871f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10105678,
        "upload_time": "2023-04-01T10:55:08",
        "upload_time_iso_8601": "2023-04-01T10:55:08.527494Z",
        "url": "https://files.pythonhosted.org/packages/29/61/4e3f53dcf1f3f8c59bb75ebed45310a81efd4c4c0b2fe457a3ec77cc732e/VRPSolverEasy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ef4fb56cf76c198f62e4d170614e7c24f612d1aca8420ac86813ecd69799bab",
        "md5": "55fdd4f745bb0d1edec4c96edd3f0a52",
        "sha256": "88e8a8be9af0227498d447d49e436a0d0a5469e88f3fd6a47934836c6f4311f7"
      },
      "downloads": -1,
      "filename": "VRPSolverEasy-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55fdd4f745bb0d1edec4c96edd3f0a52",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10410233,
      "upload_time": "2023-04-01T10:55:05",
      "upload_time_iso_8601": "2023-04-01T10:55:05.594103Z",
      "url": "https://files.pythonhosted.org/packages/9e/f4/fb56cf76c198f62e4d170614e7c24f612d1aca8420ac86813ecd69799bab/VRPSolverEasy-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29614e3f53dcf1f3f8c59bb75ebed45310a81efd4c4c0b2fe457a3ec77cc732e",
        "md5": "3c454f1a51c0c6f0d2778824ae11871f",
        "sha256": "e755522f220610cef2d0dc9a1e00e9271ea85625444c47bddf663d98e8ade702"
      },
      "downloads": -1,
      "filename": "VRPSolverEasy-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3c454f1a51c0c6f0d2778824ae11871f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10105678,
      "upload_time": "2023-04-01T10:55:08",
      "upload_time_iso_8601": "2023-04-01T10:55:08.527494Z",
      "url": "https://files.pythonhosted.org/packages/29/61/4e3f53dcf1f3f8c59bb75ebed45310a81efd4c4c0b2fe457a3ec77cc732e/VRPSolverEasy-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}