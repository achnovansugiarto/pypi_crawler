{
  "info": {
    "author": "Naibo Wang",
    "author_email": "naibowang@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# 请您Star Please Star\n\n如果你觉得此工具不错，请轻轻点击此页面右上角**Star**按钮增加项目曝光度，谢谢！\n\nIf you think this tool is good, please gently click the **Star** button in the upper right corner at this page to increase the project exposure, thank you!\n\n# 中文文档\n\n[点此查看中文文档](https://github.com/NaiboWang/CommandlineConfig/blob/master/Readme_CN.md)\n\n# Easy-to-use Commandline Configuration Tool\n\nA library for users to write (experiment in research) configurations in Python Dict or JSON format, read and write parameter value via `dot .` in code, while can read parameters from the command line to modify values.\n\n标签 Labels： Python, Command Line, commandline, config, configuration, parameters, 命令行，配置，传参，参数值修改。\n\nGithub URL: <https://github.com/NaiboWang/CommandlineConfig>\n\n## New Features\n\n### v2.2.*\n* Support infinite level nesting of parameters in dictionary\n* Automatic version checking\n* Support parameter value constrained to specified value (enumeration)\n* Support for tuple type\n* Support reading configuration from local JSON file\n* Support for setting parameter help and printing parameter descriptions via command line `-h`\n* Documentation updates, provide simple example\n\n## Simple Example\n\n```python\n# Install via pip\npip install commandline_config\n\n# import package\nfrom commandline_config import Config\n\n# Define configuration dictionary\nconfig = {\n  \"index\":1,\n  \"lr\": 0.1,\n  \"dbinfo\":{\n    \"username\": \"NUS\"\n  }\n}\n\n# Generate configuration class based on configuration dict\nc = Config(config)\n\n# Print the configuration of the parameters\nprint(c)\n\n# Read and write parameters directly via dot . and support multiple layers.\nc.index = 2\nc.dbinfo.username = \"ZJU\"\nprint(c.index, c.dbinfo.username, c[\"lr\"])\n\n# On the command line, modify the parameter values with --\npython example.py --index 3 --dbinfo.username XDU\n\n# Get the parameter descriptions via the help method in the code, or on the command line via -h or -help (customization required, see detailed documentation below for details)\nc.help()\n\npython example.py -h\n```\n\n## Catalogue\n- [请您Star Please Star](#请您star-please-star)\n- [中文文档](#中文文档)\n- [Easy-to-use Commandline Configuration Tool](#easy-to-use-commandline-configuration-tool)\n  - [New Features](#new-features)\n    - [v2.2.*](#v22)\n  - [Simple Example](#simple-example)\n  - [Catalogue](#catalogue)\n  - [Usage](#usage)\n    - [Please submit issue](#please-submit-issue)\n    - [Installation](#installation)\n    - [Configuration Way](#configuration-way)\n    - [Configuration parameters read and write method](#configuration-parameters-read-and-write-method)\n      - [Write method](#write-method)\n      - [Reading method](#reading-method)\n      - [Pass configuration to functions](#pass-configuration-to-functions)\n      - [Copy configuration](#copy-configuration)\n      - [Store configuration parameters to local file or database](#store-configuration-parameters-to-local-file-or-database)\n  - [Advanced options](#advanced-options)\n    - [Restrict parameter input values to fixed enum types](#restrict-parameter-input-values-to-fixed-enum-types)\n    - [Print parameter help descriptions](#print-parameter-help-descriptions)\n      - [Set parameter descriptions](#set-parameter-descriptions)\n      - [Print parameter help](#print-parameter-help)\n  - [Things need attention](#things-need-attention)\n    - [Conflict with Argparse](#conflict-with-argparse)\n    - [Input value forced conversion](#input-value-forced-conversion)\n    - [The list parameter needs to be assigned with a backslash before the string element quotes when passing by commandline](#the-list-parameter-needs-to-be-assigned-with-a-backslash-before-the-string-element-quotes-when-passing-by-commandline)\n    - [Quotes are required for command-line assignment of tuple parameters, and string elements must be preceded by a backslash](#quotes-are-required-for-command-line-assignment-of-tuple-parameters-and-string-elements-must-be-preceded-by-a-backslash)\n    - [Parameter naming convention](#parameter-naming-convention)\n    - [Unlimited layer of nested objects](#unlimited-layer-of-nested-objects)\n    - [Parameter integrity check, all parameters to be modified must be predefined](#parameter-integrity-check-all-parameters-to-be-modified-must-be-predefined)\n    - [Special configurations in zsh environment](#special-configurations-in-zsh-environment)\n  - [Full conversion example](#full-conversion-example)\n  - [Example Running Script](#example-running-script)\n  - [Shattered thoughts](#shattered-thoughts)\n  - [TODO](#todo)\n\n\n## Usage\n\n### Please submit issue\n\nIf you encounter any problems during using with this tool, please raise an issue in the github page of this project, I will solve the bugs and problems encountered at the first time.\n\n**Meanwhile, welcome to submit issues to propose what functions you want to add to this tool and I will implement them when possible.** \n\n\n### Installation\n\nThere are two ways to install this library:\n  \n* 1. Install via pip:\n  ```shell\n  pip install commandline_config\n  ```\n  \n  If already installed, you can upgrade it by the following command:\n\n  ```shell\n  pip install commandline_config --upgrade\n  ```\n  \n* 2. Import the commandline_config.py file directly from the `/commandline_config` folder of the github project into your own project directory, you need to install the dependency package `prettytable`:\n\n    ```shell\n    pip install prettytable\n    ```\n\n    Or install via `requirements.txt`:\n  \n    ```shell\n    pip install -r requirements.txt\n    ```\n  \n### Configuration Way\n\n* 0. Import library:\n\n    ```python\n    from commandline_config import Config\n    ```\n\n* 1. Set the parameter name and initial value in JSON/Python Dict format, and add the parameter description by `#` comment. Currently supports nesting a dict inside another dict, and **can nest unlimited layers**.\n\n    ```python\n    preset_config = {\n          \"index\": 1,  # Index of party\n          \"dataset\": \"mnist\",\n          'lr': 0.01,  # learning rate\n          'normalization': True,\n          \"pair\": (1,2),\n          \"multi_information\": [1, 0.5, 'test', \"TEST\"],  # list\n          \"dbinfo\": {\n              \"username\": \"NUS\",\n              \"password\": 123456,\n              \"retry_interval_time\": 5.5,\n              \"save_password\": False,\n              \"pair\": (\"test\",3),\n              \"multi\":{\n                  \"test\":0.01,\n              },\n              \"certificate_info\": [\"1\", 2, [3.5]],\n          }\n      }\n    ```\n  \n  That is, the initial configuration of the program is generated. Each key defined in `preset_config` dict is the parameter name and each value is the initial value of the parameter, and at the same time, the initial value type of the parameter is automatically detected according to the type of the set value.\n\n  The above configuration contains seven parameters: `index, dataset, batch, normalization, pair, multi_information and dbinfo`, where the type of the parameter **index** is automatically detected as **int**, the default value is **1** and the description is \"Index of party\".\n\n  Similarly, The type and default value of the second to fifth parameter are string: `\"mnist\"; float:0.01; bool:True; tuple:(1,2); list:[1,0.5,'test', \"TEST\"]`.\n\n  The seventh parameter is a nested dictionary of type dict, which also contains 7 parameters, with the same type and default values as the first 7 parameters, and will not be repeated here.\n\n* 2. Create a configuration class object by passing `preset_config` dict to `Config` in any function you want.\n\n    ```python\n    if __name__ == '__main__':\n        config = Config(preset_config)\n        # Or give the configuration a name:\n        config_with_name = Config(preset_config, name=\"Federated Learning Experiments\")\n\n        # Or you can store the preset_config in local file configuration.json and pass the filename to the Config class.\n        config_from_file = Config(\"configuration.json\")\n    ```\n\n  This means that the configuration object is successfully generated.\n\n* 3. Configuration of parameters can be printed directly via `print` function:\n\n  ```python\n  print(config_with_name)\n  ```\n\n  The output results are:\n  \n  ```\n  Configurations of Federated Learning Experiments:\n  +-------------------+-------+--------------------------+\n  |        Key        |  Type | Value                    |\n  +-------------------+-------+--------------------------+\n  |       index       |  int  | 1                        |\n  |      dataset      |  str  | mnist                    |\n  |         lr        | float | 0.01                     |\n  |   normalization   |  bool | True                     |\n  |        pair       | tuple | (1, 2)                   |\n  | multi_information |  list | [1, 0.5, 'test', 'TEST'] |\n  |       dbinfo      |  dict | See sub table below      |\n  +-------------------+-------+--------------------------+\n\n  Configurations of dict dbinfo:\n  +---------------------+-------+---------------------+\n  |         Key         |  Type | Value               |\n  +---------------------+-------+---------------------+\n  |       username      |  str  | NUS                 |\n  |       password      |  int  | 123456              |\n  | retry_interval_time | float | 5.5                 |\n  |    save_password    |  bool | False               |\n  |         pair        | tuple | ('test', 3)         |\n  |        multi        |  dict | See sub table below |\n  |   certificate_info  |  list | ['1', 2, [3.5]]     |\n  +---------------------+-------+---------------------+\n  \n  Configurations of dict multi:\n  +------+-------+-------+\n  | Key  |  Type | Value |\n  +------+-------+-------+\n  | test | float | 0.01  |\n  +------+-------+-------+\n  ```\n\n  Here the information of all parameters will be printed in table format. If you want to change the printing style, you can modify it by `config_with_name.set_print_style(style='')`. The values that can be taken for `style` are: `both`, `table`, `json` which means print both table and json at the same time, print only table, and json dictionary only.\n\n  E.g.:\n\n  ```python\n  # Only print json \n  config_with_name.set_print_style('json')\n  print(config_with_name)\n  print(\"----------\")\n  # Print table and json at the same time\n  config_with_name.set_print_style('table')\n  print(config_with_name)\n  ```\n\n  The output results are:\n\n  ```\n  Configurations of Federated Learning Experiments:\n  {'index': 1, 'dataset': 'mnist', 'lr': 0.01, 'normalization': True, 'pair': (1, 2), 'multi_information': [1, 0.5, 'test', 'TEST'], 'dbinfo': 'See below'}\n\n  Configurations of dict dbinfo:\n  {'username': 'NUS', 'password': 123456, 'retry_interval_time': 5.5, 'save_password': False, 'pair': ('test', 3), 'multi': 'See below', 'certificate_info': ['1', 2, [3.5]]}\n\n  Configurations of dict multi:\n  {'test': 0.01}\n\n  ----------\n    \n  Configurations of Federated Learning Experiments:\n  +-------------------+-------+--------------------------+\n  |        Key        |  Type | Value                    |\n  +-------------------+-------+--------------------------+\n  |       index       |  int  | 1                        |\n  |      dataset      |  str  | mnist                    |\n  |         lr        | float | 0.01                     |\n  |   normalization   |  bool | True                     |\n  |        pair       | tuple | (1, 2)                   |\n  | multi_information |  list | [1, 0.5, 'test', 'TEST'] |\n  |       dbinfo      |  dict | See sub table below      |\n  +-------------------+-------+--------------------------+\n  {'index': 1, 'dataset': 'mnist', 'lr': 0.01, 'normalization': True, 'pair': (1, 2), 'multi_information': [1, 0.5, 'test', 'TEST'], 'dbinfo': 'See below'}\n\n  Configurations of dict dbinfo:\n  +---------------------+-------+---------------------+\n  |         Key         |  Type | Value               |\n  +---------------------+-------+---------------------+\n  |       username      |  str  | NUS                 |\n  |       password      |  int  | 123456              |\n  | retry_interval_time | float | 5.5                 |\n  |    save_password    |  bool | False               |\n  |         pair        | tuple | ('test', 3)         |\n  |        multi        |  dict | See sub table below |\n  |   certificate_info  |  list | ['1', 2, [3.5]]     |\n  +---------------------+-------+---------------------+\n  {'username': 'NUS', 'password': 123456, 'retry_interval_time': 5.5, 'save_password': False, 'pair': ('test', 3), 'multi': 'See below', 'certificate_info': ['1', 2, [3.5]]}\n\n  Configurations of dict multi:\n  +------+-------+-------+\n  | Key  |  Type | Value |\n  +------+-------+-------+\n  | test | float | 0.01  |\n  +------+-------+-------+\n  {'test': 0.01}\n  ```\n\n\n### Configuration parameters read and write method\n\n#### Write method\n\nConfiguration parameter values can be written in three ways.\n\n* 1. To receive command line arguments, simply pass `--index 1` on the command line to modify the value of `index` to `1`. Also, the considerations for passing values to different types of arguments are：\n  \n  * When passing bool type, you can use `0` or `False` for **False**, `1` or `True` or `no value after the parameter` for **True**: `--normalization 1` or `--normalization True` or `--normalization` all can set the value of parameter `normalization` in the configuration to **True**.\n  * When passing list type, empty array and multi-dimensional arrays can be passed.\n  * To modify the value in the nested dict, please use `--nested-parameter-name.sub-parameter-name.sub-parameter-name.….sub-parameter-name value` to modify the value in the nested object, such as `--dbinfo.password 987654` to change the value of the `password` parameter in the `dbinfo` subobject to `987654`; `--dbinfo.multi.test 1` to change the value of the `test` parameter in the `multi` dict which is in `dbinfo` subobject to ```. Currently this tool can supports unlimited layers/levels of nesting.\n  * Note that **the argument index must be in the `preset_config` object defined above:**\n  \n  ```python\n  python test.py --dbinfo.password 987654 --dbinfo.multi.test 1 --index 0 --dataset emnist --normalization 0 --multi_information [\\'sdf\\',1,\\\"3.3\\\",,True,[1,[]]] \n  ```\n\n* 2. Use `config.index = 2` directly in the code to change the value of the parameter `index` to `2`. Again, list type parameters can be assigned as empty or multidimensional arrays. For nested objects, you can use `config.dbinfo.save_password=True` to modify the value of the `save_password` parameter in sub dict `dbinfo` to `True`.\n\n* 3. Way 1 and 2 will trigger type checking, that is, if the type of the assigned value and the type of the default value in the predefined dict `preset_config` does not match, the program will report an error, therefore, if you do not want to force type checking, you can use `config[\"index\"] = \"sdf\"` to force the value of the parameter index to the string `sdf` (not recommended, it will cause unexpected impact).\n\n#### Reading method\n\nRead the value of the parameter `dataset` directly by means of `config.dataset` or `config[\"dataset\"]`.\n\n```python\nprint(config.dataset, config[\"index\"])\n```\n\nThe value of an argument `a` will be read by this order: the last value modified by `config.a = *` > the value of `--a 2` specified by the command line > the initial value specified by `\"a\":1` defined by preset_config.\n\nFor the list type, if a multidimensional array is passed, the information can be read via standard slice of python:\n\n```python\nconfig.dbinfo.certificate_info = [1,[],[[2]]]\nprint(config.dbinfo.certificate_info[2][0][0])\n```\n\nFor parameters in a single nested object, there are four ways to read the values of the parameters, all of which can be read successfully:\n\n```\nprint(config.dbinfo.username)\nprint(config[\"dbinfo\"].password)\nprint(config.dbinfo[\"retry_interval_time\"])\nprint(config[\"dbinfo\"][\"save_password\"])\n```\n\n#### Pass configuration to functions\n\nSimply pass the above config object as a parameter to the function and call it:\n\n```python\ndef print_dataset_name(c):\n  print(c.dataset, c[\"dataset\"], c.dbinfo.certificate_info)\n\nprint_dataset_name(c=config)\n```\n\n#### Copy configuration\n\nA deep copy of the configuration object can be made by the `deepcopy` method:\n\n```python\nfrom copy import deepcopy\ncopy_config = deepcopy(config)\n# Modify new configuration's parameter value, will not affect the orignal configuration\ncopy_config.index=15 \n```\n\n#### Store configuration parameters to local file or database\n\nThe entire parameter configuration can be stored to a local file or uploaded to a remote server such as mongodb, simply by `config.save()` storing the configuration as a `config name (or config if there is no name).json` file in the directory, or you can specify the file name and path as follows:\n\n```python\nconfig.save(\"config/test_config.json\")\n```\n\nThen we successfully save the configuration to the local `configuration.json` file inside the `config` folder. The file content is as follows:\n\n```json\n{\n  \"index\": 1,\n  \"dataset\": \"mnist\",\n  \"lr\": 0.01,\n  \"normalization\": true,\n  \"pair\": [1, 2],\n  \"multi_information\": [1, 0.5, \"test\", \"TEST\"],\n  \"dbinfo\": {\n    \"username\": \"NUS\",\n    \"password\": 123456,\n    \"retry_interval_time\": 5.5,\n    \"save_password\": false,\n    \"pair\": [\"test\", 3],\n    \"multi\": { \"test\": 0.01 },\n    \"certificate_info\": [\"1\", 2, [3.5]]\n  }\n}\n```\n\nTo store it into the database such as `mongodb`, you need to get the json sequence first corresponding to the parameters with the `info = config.get_config()` command, and serialize it with the `json` library.\n\nFor example, to store the `config_with_name` configuration to `mongodb`:\n\n```python\nimport pymongo\nmyclient = pymongo.MongoClient('mongodb://username:example.com:27017/', connect=False)\nmydb = myclient['exps']\ntable = mydb[\"table\"]\n# Get the configurations\nconfiguration = config.get_config()\n# Insert configuration dict into mongodb table\ntable.insert_one(configuration)\n\n# Or make configuration as part of a bigger dict\nall_info = {\n  \"exp_time\":\"20220925\",\n  \"configuration\":configuration\n}\ntable.insert_one(all_info)\n```\n\nNote that tuples are not supported by JSON, so whether stored locally or in a database, tuple arguments will be converted to lists.\n\n## Advanced options\n\n### Restrict parameter input values to fixed enum types\n\nSet advanced options, such as enumerating Enum types, by passing the `options` parameter of the `Config` argument to the `Config` class.\n\n```python\noption={}\nconfig = Config(preset_config, options=option)\n```\n\nIf you want to limit the value of a parameter to a certain range, you can do so by configuring:\n\n```python\nadvanced_options = {\n    'lr': {\n        \"enum\": [0.001, 15.5, 0.01, 0.1] # restrict the lr value to one of 0.001, 15.5, 0.01, 0.1\n    },\n    'index': {\n        \"enum\": [1, 2, 3] # Restrict the index value to 1, 2 and 3\n    },\n    \"dbinfo\": {\n        \"username\": {\n            \"enum\": [\"XDU\", \"ZJU\", \"NUS\"] # restrict the dbinfo.username field to XDU, ZJU and NUS\n        },\n        \"multi\":{\n            \"test\":{\n                \"enum\": [1,0.1, 0.01, 15] # 3 layers nested\n            }\n        }\n    },\n}\n\nconfig = Config(preset_config, options=advanced_options)\n```\n\nIf enum is set, the following three ways to set a parameter to a value other than the qualified/speficied value will all report an error.\n\n* 1. The initial value of `index` is set to a value other than `1,2,3` in `preset_config`:\n\n  ```python\n  preset_config = {\n    \"index\":4,\n  }\n  ```\n\n* 2. The command line passes unqualified/unspecified values for the `lr` argument\n\n  ```shell\n  python example.py --lr 0.02\n  ```\n\n* 3. The code changes the value of `dbinfo.username` to a value other than `XDU, ZJU and NUS`.\n\n  ```python\n  config.dbinfo.username = \"UEST\"\n  ```\n\n  The output are:\n\n  ```Shell\n  AttributeError: Can not set value 4 because the key 'index' has set enum list and you the value 4 is not in the enum list [1, 2, 3]!\n\n  AttributeError: Can not set value 0.02 because the key 'lr' has set enum list and you the value 0.02 is not in the enum list [0.001, 15.5, 0.01, 0.1]!\n\n  AttributeError: Can not set value nus because the key 'username' has set enum list and you the value nus is not in the enum list ['XDU', 'ZJU', 'NUS']!\n  ```\n\n### Print parameter help descriptions\n\n#### Set parameter descriptions\n\nSet the parameter description helpers by specifying the `helpers` parameter in the `Config` class.\n\n```python\nhelpers = {\n    \"index\": \"index of information\",\n    \"dbinfo_help\": \"information dict for database\",\n    \"dbinfo\": {\n        \"username\": \"username for database\",\n        \"multi\":{\n            \"test\":\"test information\"\n        }\n    }\n}\n\nconfig = Config(preset_config, helpers=helpers)\n```\n\nNote that since the `dbinfo` parameter is a `dict`, if you want to set the parameter description for `dbinfo`, you need to set a `dbinfo_help` parameter to write the description in the `helpers` dictionary, i.e. add `_help` after the dict parameter name to set the parameter description for the dict field.\n\n#### Print parameter help\n\nTwo ways to print parameter descriptions, by passing `-h` or `-help` on the command line, or by calling the `help()` function in code.\n\n```python\nconfig_with_name.help()\n```\n\nor\n\n```shell\npython example.py -h\n# OR\npython example.py -help\n```\n\nNote that it is only one short slash `-` and no other command line arguments be added to get help instructions, and the output of both methods is:\n\n```\nParameter helps for Federated Learning Experiments:\n+-------------------+-------+-------------------------------+\n|        Key        |  Type | Comments                      |\n+-------------------+-------+-------------------------------+\n|       index       |  int  | index of information          |\n|      dataset      |  str  | -                             |\n|         lr        | float | -                             |\n|   normalization   |  bool | -                             |\n|        pair       | tuple | -                             |\n| multi_information |  list | -                             |\n|       dbinfo      |  dict | information dict for database |\n+-------------------+-------+-------------------------------+\n\nParameter helps for dict dbinfo:\n+---------------------+-------+-----------------------+\n|         Key         |  Type | Comments              |\n+---------------------+-------+-----------------------+\n|       username      |  str  | username for database |\n|       password      |  int  | -                     |\n| retry_interval_time | float | -                     |\n|    save_password    |  bool | -                     |\n|         pair        | tuple | -                     |\n|        multi        |  dict | Multiple Parameters   |\n|   certificate_info  |  list | -                     |\n+---------------------+-------+-----------------------+\n\nParameter helps for dict multi:\n+------+-------+------------------+\n| Key  |  Type | Comments         |\n+------+-------+------------------+\n| test | float | test information |\n+------+-------+------------------+\n```\n\n\n## Things need attention\n\n### Conflict with Argparse\nThis library cannot read command line arguments at the same time with the argparse library, so please do not use `args = parser.parse_args()` to read command line arguments while using this library.\n\n### Input value forced conversion\nThe type of the parameter will be automatically detected as the same type of the initial value set in `preset_config`, and the value of the command line parameter will be forced converted to the corresponding type value, such as the default value of `index` in the above `preset_config` dict is `1`, then the type of the parameter index is `int` with the initial value of `1`. If you specify `--index 15.5` on the command line, the parameter `index` will be automatically assigned to value `15`, that is, `15.5` will be automatically forced converted to `int` type.\n\nIf the parameter value specified on the command line parameters can not be forcedly converted to specific type, it will report an error, such as if the command line specified `--index sdf`, as sdf with orignal format of `string` can not be converted to `int` type, so it will report an error.\n\n### The list parameter needs to be assigned with a backslash before the string element quotes when passing by commandline\n\nWhen the command line argument is set to the input `list` type, if the element in the list is a `string,` you must use add a `backslash \\` before each `single/double quote` to parse it correctly, otherwise the argument value will be treated as an `int` or `float` type. If there are `spaces` in the command line they will be merged automatically (but the command line environment can not be `zsh`, if it is zsh environment then must remove all the spaces inside the list, `bash` and `sh` does not have this problem, that is, in the zsh environment, you cannot add any space(s) between `15` and `\\'12\\'` in `--a [15,\\'12\\']`).\n\nIf the parameters can be set as follows:\n\n  ```\n  python test.py --array [1,2.3,\\'sdf\\'] \n  ```\n\nThat can correctly resolve the array parameter whose value is a `list`, and the content of `[1,2.3,'sdf', \"qwe\"]`, that is, a list containing int, float, string type of data simultaneously.\n\n### Quotes are required for command-line assignment of tuple parameters, and string elements must be preceded by a backslash\n\nWhen the command line parameter is set to the input `tuple` type, the specified tuple type value must be enclosed in `quotes`; and if the element in the tuple is a `string`, a `backslash` must be added before each single/double quote `\\` for proper parsing, otherwise the parameter value will be treated as an `int` or `float` type. Similarly, if there are `spaces` in the command line they will be merged automatically (but the command line environment cannot be `zsh`, if it is zsh environment then all internal spaces must be removed, bash and sh do not have this problem).\n\nFor example, the parameter can be set to \n\n```\npython test.py --pair \"(1,2,\\'msg\\')\"\n```\n\nThe value of the pair parameter is a tuple of type `(1,2, \"msg\")`, i.e. a tuple of type `int`, `float`, `string`.\n\n\n### Parameter naming convention\n\nIf the parameter name contains special characters such as `-+.` or `space` or `other python reserved characters`, you must use the `middle bracket []` to read and write the parameter value instead of **.** E.g., if the parameter name is `multi-information`, it can only be accessed by `config[\"multi-information\"]`, cannot do `config.multi-information`, because the minus `sign -` is a python language's reserved symbol.\n\n### Unlimited layer of nested objects\nNow the tool can support unlimited layers of nesting, other supported parameter types are: `int, float, string, bool, tuple and list`.\n\n### Parameter integrity check, all parameters to be modified must be predefined\nThe name of the parameter passed on the command line **must be defined in `preset_config` in advance, otherwise an error will be reported**, e.g.\n\n  ```python\n  python test.py --arg1 1\n  ```\n\nSince the parameter name `arg1` is not defined in `preset_config` dict, an error is reported indicating that the `arg1` parameter is not defined. This function is set to perform parameter integrity checking to avoid entering incorrect parameter names through the command line.\n\n### Special configurations in zsh environment\nIf `zsh: no matches found` occurs when passing list arguments in the zsh Shell environment, please add a line `setopt no_nomatch` at the end of the `~/.zshrc` file, after save it then run `source ~/.zshrc` on the command line to refresh zsh, then the problem will be solved.\n\n\n## Full conversion example\n\nAn example will be given below to demonstrate the convenience of this tool compared to the `argparse` tool.\n\nThe code that needs to be written using the `argparse` tool:\n\n```python\nparser = argparse.ArgumentParser(description='PyTorch local error training')\nparser.add_argument('--model', default='vgg8b',\n                    help='model, mlp, vgg13, vgg16, vgg19, vgg8b, vgg11b, resnet18, resnet34, wresnet28-10 and more (default: vgg8b)')\nparser.add_argument('--dataset', default='CIFAR10',\n                    help='dataset, MNIST, KuzushijiMNIST, FashionMNIST, CIFAR10, CIFAR100, SVHN, STL10 or ImageNet (default: CIFAR10)')\nparser.add_argument('--batch-size', type=int, default=128,\n                    help='input batch size for training (default: 128)')\nparser.add_argument('--num-layers', type=int, default=1,\n                    help='number of hidden fully-connected layers for mlp and vgg models (default: 1')\nparser.add_argument('--lr', type=float, default=5e-4,\n                    help='initial learning rate (default: 5e-4)')\nparser.add_argument('--lr-decay-milestones', nargs='+', type=int, default=[200,300,350,375],\n                    help='decay learning rate at these milestone epochs (default: [200,300,350,375])')\nparser.add_argument('--optim', default='adam',\n                    help='optimizer, adam, amsgrad or sgd (default: adam)')\nparser.add_argument('--beta', type=float, default=0.99,\n                    help='fraction of similarity matching loss in predsim loss (default: 0.99)')\nargs = parser.parse_args()\n\nargs.cuda = not args.no_cuda and torch.cuda.is_available()\nif args.cuda:\n    cudnn.enabled = True\n    cudnn.benchmark = True\n```\n\nCode to be written after conversion with this tool:\n\n```python\n'''\n:param model: model, mlp, vgg13, vgg16, vgg19, vgg8b, vgg11b, resnet18, resnet34, wresnet28-10 and more (default: vgg8b)\n:param dataset: dataset, MNIST, KuzushijiMNIST, FashionMNIST, CIFAR10, CIFAR100, SVHN, STL10 or ImageNet (default: CIFAR10)\n:param batch-size: input batch size for training (default: 128)\n:param num-layers: number of hidden fully-connected layers for mlp and vgg models (default: 1)\n:param lr: initial learning rate (default: 5e-4)\n:param lr-decay-milestones: decay learning rate at these milestone epochs (default: [200,300,350,375])\n:param optim: optimizer, adam, amsgrad or sgd (default: adam)\n:param beta: fraction of similarity matching loss in predsim loss (default: 0.99)\n'''\nconfig = {\n  'model':'vgg8b',\n  'dataset':'CIFAR10',\n  'batch-size':128,\n  'num-layers':1,\n  'lr':5e-4,\n  'lr-decay-milestones':[200,300,350,375],\n  'optim':'adam',\n  'beta':0.99,\n}\nargs = Config(config, name='PyTorch local error training')\n\nargs.cuda = not args.no_cuda and torch.cuda.is_available()\nif args.cuda:\n    cudnn.enabled = True\n    cudnn.benchmark = True\n```\n\nAs we can see, the amount of code has been reduced and is more structured and neat.\n\nAnother case with library click:\n\n```python\nimport click\n\n@click.command()\n@click.option('--count', default=1, help='Number of greetings.')\n@click.option('--name', prompt='Your name',\n              help='The person to greet.')\ndef hello(count, name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for x in range(count):\n        click.echo(f\"Hello {name}!\")\n\nif __name__ == '__main__':\n    hello()\n```\n\nCan be converted to the following code:\n\n```python\nfrom commandline_config import Config\n\ndef hello(o):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for x in range(o.count):\n        print(f\"Hello {o.name}!\")\n\nif __name__ == '__main__':\n    args = {\n      \"count\":1, # Number of greetings.\n      \"name\":\"\", # The person to greet.\n    }\n    options = Config(args)\n    hello(options)\n```\n\n## Example Running Script\n\nYou can run `example.py` in the Github project to test the whole tool, most functions's codes had been provided inside the file:\n\n```\n# Get help for all parameters of example.py\npython example.py -h\n# Specify parameter values\npython example.py --dbinfo.multi.test 0.01 --dbinfo.username NUS\n```\n\n## Shattered thoughts\n\nThe following describes the author's personal reasons for developing and the benefits/conveniences of this package.\n\nFor us who often run research experiments, do you often need to set a lot of command line arguments at the beginning of a python file and call them in the following code as `args.*`：\n\nFor example, the following example paragraph:\n\n```python\nparser = argparse.ArgumentParser(description='index')\nparser.add_argument('--index', default=0, type=int, help='party index')\nparser.add_argument('--party_num', default=100, type=int)\nargs = parser.parse_args()\n\nprint(args.index)\n```\n\nWith one more additional parameter, we need to write one line of `parser.add_argument(...)`, when handwriting configuration of each parameter, it will be very tedious such as the name needs to add --, and modify the default value, type and description of the time is very troublesome, finally will lead to very long code and inconvenient to maintain. \n\nEven if you use a more advanced library `click`, you still need to write option constantly, and you need to write the same amount of parameters at the input parameter field of the function to match all the option, writing code is really tedious, such as the following Click code:\n\n```python\nimport click\n\nfrom caesar_encryption import encrypt\n\n@click.command()\n@click.argument('text', nargs=-1)\n@click.option('--decrypt/--encrypt', '-d/-e')\n@click.option('--key', '-k', default=1)\ndef caesar(text, decrypt, key):\n    text_string = ' '.join(text)\n    if decrypt:\n        key = -key\n    cyphertext = encrypt(text_string, key)\n    click.echo(cyphertext)\n\nif __name__ == '__main__':\n    caesar()\n```\n\nI don't want to specify option over and over again when writing code, and write a lot of corresponding parameters in the function name parameter field, which is very troublesome.\n\nSo would it make the code look more structured and clearer if the parameter configuration could be written in the format of Python objects/JSON?\n\nAlso, is it possible to directly read and write command line arguments as if they were Python objects, or deep copy them, as if no command line arguments had been configured?\n\nMost importantly, can we make the process of writing code faster, instead of adding a little bit of configuration line by line?\n\nIn order to solve the above pain points, this tool has been developed.\n\nMy goal is to make it easier for us to write more concise codes that works as the same as verbose command line parsing packages like Argparse or Click, while also making the configuration look structured and easy to maintain. Json was chosen because the Python dictionary type Dict is native in JSON format, so can make the same format as Python code. In this way, the configuration information can be directly embedded in the Python code file (anywhere), without the need to establish a separate configuration file such as TOML. At the same time, you can use the library to write the configuration at any position within the code file to read the command line parameters and modify the value of each field at any time.\n\nSimilar tools including:\n\n| Name           | Advantage| Disadvantage                                                                                                                              |\n|----------------|----------------|----------------------------------------------------------------------------------------------------------------------------------------|\n| Fire           | Can direct do conversion of function parameters to command line parameters | Cannot pass parameters to other functions.                                                                                                |\n| hydra          | Easy to read and write to yaml | Need additional yaml file with specifed path, also cannot perform integrity check and type conversion/check, not friendly for printing    |\n| ml_collections | Similar functionality to this tool with more configurable items | A little tideous to pass commandline parameters, when nesting need to artificially set specifed Class, and also without integrity check, not friendly for printing                              |\n\n## TODO\n\n**Welcome to submit issues to propose what functions you want to add to this tool and I will implement them when possible.** \n\n* Advanced options to support more advanced features such as commandline style (instead of use --, can change to - or +), etc.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NaiboWang/CommandlineConfig",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "commandline-config",
    "package_url": "https://pypi.org/project/commandline-config/",
    "platform": null,
    "project_url": "https://pypi.org/project/commandline-config/",
    "project_urls": {
      "Homepage": "https://github.com/NaiboWang/CommandlineConfig"
    },
    "release_url": "https://pypi.org/project/commandline-config/2.2.3/",
    "requires_dist": [
      "prettytable"
    ],
    "requires_python": "",
    "summary": "A library for users to write (experiment in research) configurations in Python Dict or JSON format, while can read parameters from the command line",
    "version": "2.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15250526,
  "releases": {
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56f57610d4d5473df3304041f65a2b7d442b4efb551797dd7c54005c6e6fd9ca",
          "md5": "f120ead758e5ab4c3073d684aa25e053",
          "sha256": "90edc86f99e9e62fc7a31e038d4f990a573bebc75813dc0e58ebbe733412b229"
        },
        "downloads": -1,
        "filename": "commandline_config-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f120ead758e5ab4c3073d684aa25e053",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10761,
        "upload_time": "2022-09-18T21:45:49",
        "upload_time_iso_8601": "2022-09-18T21:45:49.447408Z",
        "url": "https://files.pythonhosted.org/packages/56/f5/7610d4d5473df3304041f65a2b7d442b4efb551797dd7c54005c6e6fd9ca/commandline_config-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49e71a5b5176b3be1f672eb1143b36ef67f7480c84cba9a3d918612aaf9dca10",
          "md5": "179d0fc5c0484824c6005d0cf9d2ef26",
          "sha256": "b7ab658ea96054f52c689e126382db102ecb8e622898fd1d170fa2110742fb9a"
        },
        "downloads": -1,
        "filename": "commandline_config-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "179d0fc5c0484824c6005d0cf9d2ef26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10575,
        "upload_time": "2022-09-18T21:45:51",
        "upload_time_iso_8601": "2022-09-18T21:45:51.447185Z",
        "url": "https://files.pythonhosted.org/packages/49/e7/1a5b5176b3be1f672eb1143b36ef67f7480c84cba9a3d918612aaf9dca10/commandline_config-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb5a697e3cfc2f90784455dd010603e5e85522347d1ba8a1836fc3231795d20f",
          "md5": "4a748685483d36d97ecd3846a2b21bde",
          "sha256": "1c8169dc7a441e740da983d891c8af25479889a8b7060ec81876603c4bfdcd25"
        },
        "downloads": -1,
        "filename": "commandline_config-1.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a748685483d36d97ecd3846a2b21bde",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16081,
        "upload_time": "2022-09-19T23:49:25",
        "upload_time_iso_8601": "2022-09-19T23:49:25.468691Z",
        "url": "https://files.pythonhosted.org/packages/fb/5a/697e3cfc2f90784455dd010603e5e85522347d1ba8a1836fc3231795d20f/commandline_config-1.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e90fc1d0c364b7246aede35e8d3957226a03a38bd5ac2973eb961de7bda042ce",
          "md5": "9ee76f47eb6a2698479f24536b2ec0df",
          "sha256": "5f3a57612e2c169d0c92573205ddbaa39da8e2d7b6383de0feacebdf4e4c3048"
        },
        "downloads": -1,
        "filename": "commandline_config-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9ee76f47eb6a2698479f24536b2ec0df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25808,
        "upload_time": "2022-09-19T23:49:27",
        "upload_time_iso_8601": "2022-09-19T23:49:27.600863Z",
        "url": "https://files.pythonhosted.org/packages/e9/0f/c1d0c364b7246aede35e8d3957226a03a38bd5ac2973eb961de7bda042ce/commandline_config-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3204ce2ed32093f62c0011847c4e41b106dbc04e6a0eb644dd18942201ba7af",
          "md5": "1db93f7e817b17911fcd5585aef3d22e",
          "sha256": "1132dbe77962d5a863357157864efce838f4863593dac954f3e95183eb67b4ea"
        },
        "downloads": -1,
        "filename": "commandline_config-1.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1db93f7e817b17911fcd5585aef3d22e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16777,
        "upload_time": "2022-09-20T05:39:39",
        "upload_time_iso_8601": "2022-09-20T05:39:39.132727Z",
        "url": "https://files.pythonhosted.org/packages/b3/20/4ce2ed32093f62c0011847c4e41b106dbc04e6a0eb644dd18942201ba7af/commandline_config-1.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84d15912028a3c84bb0802bcea3845db7569b21bbd8d42aa5bbcae650c134ac5",
          "md5": "6a1264d28f008bdca55b95a2e42c5513",
          "sha256": "9285448e7fc28d39d8b2bdefe45833584a6448da14bfff8b5e2e161b9d1fd106"
        },
        "downloads": -1,
        "filename": "commandline_config-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6a1264d28f008bdca55b95a2e42c5513",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27200,
        "upload_time": "2022-09-20T05:39:40",
        "upload_time_iso_8601": "2022-09-20T05:39:40.665640Z",
        "url": "https://files.pythonhosted.org/packages/84/d1/5912028a3c84bb0802bcea3845db7569b21bbd8d42aa5bbcae650c134ac5/commandline_config-1.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86fc2d313caff165f32011fbc6a1f47fc115ea2a59eda7750435459dc5b625f5",
          "md5": "347ccaf4de33123e6c0f4d640c3bc0de",
          "sha256": "dee1e8e691c1df07b3e55913f2a27e8e9593215a492d2d36d7e5419a6773c900"
        },
        "downloads": -1,
        "filename": "commandline_config-1.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "347ccaf4de33123e6c0f4d640c3bc0de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17966,
        "upload_time": "2022-09-20T08:41:06",
        "upload_time_iso_8601": "2022-09-20T08:41:06.979817Z",
        "url": "https://files.pythonhosted.org/packages/86/fc/2d313caff165f32011fbc6a1f47fc115ea2a59eda7750435459dc5b625f5/commandline_config-1.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a318412c8aa139077b0741e0b1ed865f76f8612da96d72f96642bf0c4c9c5c94",
          "md5": "74dfb302f10815616e460f45abab55e7",
          "sha256": "a33b16542e20c8e68112e8c4b72a55276427e9eb64b0045566da2724be6eade4"
        },
        "downloads": -1,
        "filename": "commandline_config-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "74dfb302f10815616e460f45abab55e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29453,
        "upload_time": "2022-09-20T08:41:09",
        "upload_time_iso_8601": "2022-09-20T08:41:09.175399Z",
        "url": "https://files.pythonhosted.org/packages/a3/18/412c8aa139077b0741e0b1ed865f76f8612da96d72f96642bf0c4c9c5c94/commandline_config-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88bee6723c87c123e8a1768c21b882239c036c01815fca9eb141390f11cd7288",
          "md5": "58043dc7043c243c0c767347b3351649",
          "sha256": "58244c02223e8bd17a818e5c63d53da93cda63203cbf555be4b3b098d41d77ba"
        },
        "downloads": -1,
        "filename": "commandline_config-1.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58043dc7043c243c0c767347b3351649",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13254,
        "upload_time": "2022-09-21T09:41:18",
        "upload_time_iso_8601": "2022-09-21T09:41:18.786272Z",
        "url": "https://files.pythonhosted.org/packages/88/be/e6723c87c123e8a1768c21b882239c036c01815fca9eb141390f11cd7288/commandline_config-1.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3138b93132329b397efbeb488b70fd1c54eeec012982db4850d180980c68dfa7",
          "md5": "459c70ef85497e1c17374b02096bdde5",
          "sha256": "13d0e5e497ccf5dd41aa9d7d15c8ae793772e769b4ed70a8c86a495dba940939"
        },
        "downloads": -1,
        "filename": "commandline_config-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "459c70ef85497e1c17374b02096bdde5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20380,
        "upload_time": "2022-09-21T09:41:20",
        "upload_time_iso_8601": "2022-09-21T09:41:20.890159Z",
        "url": "https://files.pythonhosted.org/packages/31/38/b93132329b397efbeb488b70fd1c54eeec012982db4850d180980c68dfa7/commandline_config-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "888a637c8d8bbf60b59936ddb78f431716298339beb57ef937bab394828dea90",
          "md5": "17364b13926bfd64e183cc41d4cca0af",
          "sha256": "9d53058c1b337c0ef48535c269790fff1ab16a3d9a86ebab02b1c1676a7c7457"
        },
        "downloads": -1,
        "filename": "commandline_config-1.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17364b13926bfd64e183cc41d4cca0af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13269,
        "upload_time": "2022-09-21T09:46:14",
        "upload_time_iso_8601": "2022-09-21T09:46:14.650379Z",
        "url": "https://files.pythonhosted.org/packages/88/8a/637c8d8bbf60b59936ddb78f431716298339beb57ef937bab394828dea90/commandline_config-1.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ac7f896435b78f24e2f9048003edef9267b61c6df59d58262917c983403fb88",
          "md5": "6ded85741499630e434495e0904bb0cb",
          "sha256": "b7a9c664cc06139554cb561da3a7e010b5aa938b608080566f3bbbfa1e546694"
        },
        "downloads": -1,
        "filename": "commandline_config-1.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6ded85741499630e434495e0904bb0cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20399,
        "upload_time": "2022-09-21T09:46:16",
        "upload_time_iso_8601": "2022-09-21T09:46:16.722845Z",
        "url": "https://files.pythonhosted.org/packages/4a/c7/f896435b78f24e2f9048003edef9267b61c6df59d58262917c983403fb88/commandline_config-1.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd15e2d33908c803848443f8bce8d60f0b32b29810c4392c5d832d468aef07e8",
          "md5": "17ce603c901786be5f534e8bfc3827fe",
          "sha256": "29b35428fd4e99b4fda6588915d66d7c351b92d1b595551651846f02a4800229"
        },
        "downloads": -1,
        "filename": "commandline_config-1.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17ce603c901786be5f534e8bfc3827fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14671,
        "upload_time": "2022-09-22T08:51:42",
        "upload_time_iso_8601": "2022-09-22T08:51:42.783876Z",
        "url": "https://files.pythonhosted.org/packages/fd/15/e2d33908c803848443f8bce8d60f0b32b29810c4392c5d832d468aef07e8/commandline_config-1.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba12794aad818f825d9fe4f4908d787df676ffd327ec22f59a01750ad010ba91",
          "md5": "0e93544c4e353f51194f5b550df2adc1",
          "sha256": "f8055305e15394102b4b4e7755ed4cce76b62878284824f1be9ce75a4a9d1707"
        },
        "downloads": -1,
        "filename": "commandline_config-1.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0e93544c4e353f51194f5b550df2adc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22848,
        "upload_time": "2022-09-22T08:51:45",
        "upload_time_iso_8601": "2022-09-22T08:51:45.586892Z",
        "url": "https://files.pythonhosted.org/packages/ba/12/794aad818f825d9fe4f4908d787df676ffd327ec22f59a01750ad010ba91/commandline_config-1.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd2ab65f157b7a4506705f60e27f8107b4ac5ca02422d0605a32fa4c77dddcc7",
          "md5": "07dbc4e7daa5345f21943cdb44868430",
          "sha256": "e61893588127a0e7ce792e1e3660e82a60be7fffcc89740dfa5a132f08759444"
        },
        "downloads": -1,
        "filename": "commandline_config-1.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07dbc4e7daa5345f21943cdb44868430",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14879,
        "upload_time": "2022-09-22T12:49:28",
        "upload_time_iso_8601": "2022-09-22T12:49:28.624010Z",
        "url": "https://files.pythonhosted.org/packages/fd/2a/b65f157b7a4506705f60e27f8107b4ac5ca02422d0605a32fa4c77dddcc7/commandline_config-1.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76855b7fbd3f54df748fbd9a87c5f15070366bff9cb692392821233659ceeb9c",
          "md5": "aa63b995ebf6a2222887ed63af8cd267",
          "sha256": "02514590fe8292a24cf8a2acf20343d435a583055cd2555e66f7664b6c1d5df6"
        },
        "downloads": -1,
        "filename": "commandline_config-1.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aa63b995ebf6a2222887ed63af8cd267",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23366,
        "upload_time": "2022-09-22T12:49:30",
        "upload_time_iso_8601": "2022-09-22T12:49:30.537282Z",
        "url": "https://files.pythonhosted.org/packages/76/85/5b7fbd3f54df748fbd9a87c5f15070366bff9cb692392821233659ceeb9c/commandline_config-1.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "744ede911bcb0e97d81ddabd9f761b02ccc6053ebdba773e5a8e01c170364123",
          "md5": "5664e92b2db60c62cba2c3493a58ce9b",
          "sha256": "46ffdc9f59889ad282a60b3fefc15e9c263fff687f34c5e105bc362e3cc0b23f"
        },
        "downloads": -1,
        "filename": "commandline_config-1.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5664e92b2db60c62cba2c3493a58ce9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15326,
        "upload_time": "2022-09-23T12:53:54",
        "upload_time_iso_8601": "2022-09-23T12:53:54.337599Z",
        "url": "https://files.pythonhosted.org/packages/74/4e/de911bcb0e97d81ddabd9f761b02ccc6053ebdba773e5a8e01c170364123/commandline_config-1.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "527362c4b87dd05fd5125e91502492d25b2e2b8fec63ab5a2612acf442517f0c",
          "md5": "2b39aa60d0d036c029423b8ae798e2bf",
          "sha256": "a5c1ed8c9d13b5e0721aa146f41267ce951046e213b5b07c1bd4765c6000aca6"
        },
        "downloads": -1,
        "filename": "commandline_config-1.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2b39aa60d0d036c029423b8ae798e2bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24121,
        "upload_time": "2022-09-23T12:53:56",
        "upload_time_iso_8601": "2022-09-23T12:53:56.407035Z",
        "url": "https://files.pythonhosted.org/packages/52/73/62c4b87dd05fd5125e91502492d25b2e2b8fec63ab5a2612acf442517f0c/commandline_config-1.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07d717bb01946925aabfa58fb178b2c5ae9aa6d75ef53017e6fb8fe2062c496c",
          "md5": "63bc4a61870bf00b733f1345f95da88f",
          "sha256": "7f8a7ac5b6f5792f913e1bfed17d1cba89dd73d20e8a9cbfdcc0bbf8e9e2822e"
        },
        "downloads": -1,
        "filename": "commandline_config-1.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63bc4a61870bf00b733f1345f95da88f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15322,
        "upload_time": "2022-09-23T12:58:57",
        "upload_time_iso_8601": "2022-09-23T12:58:57.687505Z",
        "url": "https://files.pythonhosted.org/packages/07/d7/17bb01946925aabfa58fb178b2c5ae9aa6d75ef53017e6fb8fe2062c496c/commandline_config-1.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fa6cdd34ba0fe88c6635b98f00915e54f241d2dd91bce25a5d1e135755d263d",
          "md5": "6bc33e68c323cd0941e421c592b9320d",
          "sha256": "b30b7db7fdbbea72640a5bc2a8bff9d2f07c4f1754ec97a931efd21e698b877e"
        },
        "downloads": -1,
        "filename": "commandline_config-1.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6bc33e68c323cd0941e421c592b9320d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24118,
        "upload_time": "2022-09-23T12:59:00",
        "upload_time_iso_8601": "2022-09-23T12:59:00.301592Z",
        "url": "https://files.pythonhosted.org/packages/5f/a6/cdd34ba0fe88c6635b98f00915e54f241d2dd91bce25a5d1e135755d263d/commandline_config-1.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "280ae5e7660e04360dffe837187afa07bac17b53e50353a67bb0c117b88fbd15",
          "md5": "8dea39bc242dea1c4e2995b34c347141",
          "sha256": "b22de80dd4d8be164b81db97965bc88317d4bb597e2ff0369f2b1de9e21f9e5e"
        },
        "downloads": -1,
        "filename": "commandline_config-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8dea39bc242dea1c4e2995b34c347141",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15734,
        "upload_time": "2022-09-23T18:44:42",
        "upload_time_iso_8601": "2022-09-23T18:44:42.317064Z",
        "url": "https://files.pythonhosted.org/packages/28/0a/e5e7660e04360dffe837187afa07bac17b53e50353a67bb0c117b88fbd15/commandline_config-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7faa984c1b22279dc05fdda461c1575df88da5da168a0e471451e58dc5fe4da4",
          "md5": "c5d56f6c329b15f43fdaad37f3667bae",
          "sha256": "41f7498518e172672a9fa3bafb257b101b07e1579922c770672120c1e1e30518"
        },
        "downloads": -1,
        "filename": "commandline_config-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c5d56f6c329b15f43fdaad37f3667bae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24876,
        "upload_time": "2022-09-23T18:44:44",
        "upload_time_iso_8601": "2022-09-23T18:44:44.175446Z",
        "url": "https://files.pythonhosted.org/packages/7f/aa/984c1b22279dc05fdda461c1575df88da5da168a0e471451e58dc5fe4da4/commandline_config-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f3380dc336663763c9de3e500ad41671d9a8dc1ca3aa188783a8b728c57f2c5",
          "md5": "1e557b3683e02b75b789c6f80f284377",
          "sha256": "cf6b270e0c3ec6712d8c9e339c2209a9104241e6b9b345cc29b8b5713a160d5e"
        },
        "downloads": -1,
        "filename": "commandline_config-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e557b3683e02b75b789c6f80f284377",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15784,
        "upload_time": "2022-09-25T02:14:57",
        "upload_time_iso_8601": "2022-09-25T02:14:57.009885Z",
        "url": "https://files.pythonhosted.org/packages/5f/33/80dc336663763c9de3e500ad41671d9a8dc1ca3aa188783a8b728c57f2c5/commandline_config-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43a3c7fed6de0395e10333972b5670bb3a9bf6e56103eb2c8480eb9bd27eec55",
          "md5": "df216c0e554a29dab816936a611324e8",
          "sha256": "b2242445b4636c98d0acfb149819177c3c9f680d9d5c10e56e393c4aef99bddf"
        },
        "downloads": -1,
        "filename": "commandline_config-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "df216c0e554a29dab816936a611324e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24973,
        "upload_time": "2022-09-25T02:14:58",
        "upload_time_iso_8601": "2022-09-25T02:14:58.906366Z",
        "url": "https://files.pythonhosted.org/packages/43/a3/c7fed6de0395e10333972b5670bb3a9bf6e56103eb2c8480eb9bd27eec55/commandline_config-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6665b8d517a6212c426217c0f8bf8212e0a3491f94c43e5a78cf48a0287d55f2",
          "md5": "54cce5e5d48fd45c1affc71d577bd939",
          "sha256": "b876b8b32e65de045fb5d70e6715846e4cbc0713f0bd8d709785d18b721be400"
        },
        "downloads": -1,
        "filename": "commandline_config-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54cce5e5d48fd45c1affc71d577bd939",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16384,
        "upload_time": "2022-09-25T03:58:25",
        "upload_time_iso_8601": "2022-09-25T03:58:25.628103Z",
        "url": "https://files.pythonhosted.org/packages/66/65/b8d517a6212c426217c0f8bf8212e0a3491f94c43e5a78cf48a0287d55f2/commandline_config-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b9f6ab2a5fc25fa2a77e57a805cb85c59a8b8d554c35f4138b31a154c2dd008",
          "md5": "422cc61e651a6d153dc6570e4db7ba34",
          "sha256": "a89332d704b0b9967d7420870a45dd71564d33259d519af771225cc71dfe95ae"
        },
        "downloads": -1,
        "filename": "commandline_config-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "422cc61e651a6d153dc6570e4db7ba34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26154,
        "upload_time": "2022-09-25T03:58:27",
        "upload_time_iso_8601": "2022-09-25T03:58:27.930623Z",
        "url": "https://files.pythonhosted.org/packages/3b/9f/6ab2a5fc25fa2a77e57a805cb85c59a8b8d554c35f4138b31a154c2dd008/commandline_config-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93ecb8cbae54bde768dc83f0d68ce9330685ae9ccb6c6bf2844508b74ed473ac",
          "md5": "21b2b475a05e1e8466f00b62ce1d8a9e",
          "sha256": "d5d6d69d18be9e53fa4ecb42829b2d8d683a031652cd143a2b2838e7babc863a"
        },
        "downloads": -1,
        "filename": "commandline_config-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21b2b475a05e1e8466f00b62ce1d8a9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16376,
        "upload_time": "2022-09-25T04:12:33",
        "upload_time_iso_8601": "2022-09-25T04:12:33.417872Z",
        "url": "https://files.pythonhosted.org/packages/93/ec/b8cbae54bde768dc83f0d68ce9330685ae9ccb6c6bf2844508b74ed473ac/commandline_config-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f689a58685702791391ae566f500f2ee2ebda3648fc81f7a1f5e33bfb1a5394",
          "md5": "d42e71c70bdc411b563a93c68170af99",
          "sha256": "1689eec5db0a9d8050f2a23d0fca64c044a97396ca83bca3a67828efbbc27b3b"
        },
        "downloads": -1,
        "filename": "commandline_config-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d42e71c70bdc411b563a93c68170af99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26151,
        "upload_time": "2022-09-25T04:12:35",
        "upload_time_iso_8601": "2022-09-25T04:12:35.267309Z",
        "url": "https://files.pythonhosted.org/packages/7f/68/9a58685702791391ae566f500f2ee2ebda3648fc81f7a1f5e33bfb1a5394/commandline_config-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69a1308923005891fdd668e4c0477ab951f23d1eb561131c94a1dcd1a3fd5b45",
          "md5": "d953458c525ce8cfd0e86b819ae2de08",
          "sha256": "a9ca6829f739c5783f55169ea4ba81334555b75e9e409ae7a865197bc8d79a4f"
        },
        "downloads": -1,
        "filename": "commandline_config-2.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d953458c525ce8cfd0e86b819ae2de08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16384,
        "upload_time": "2022-09-25T04:17:52",
        "upload_time_iso_8601": "2022-09-25T04:17:52.495150Z",
        "url": "https://files.pythonhosted.org/packages/69/a1/308923005891fdd668e4c0477ab951f23d1eb561131c94a1dcd1a3fd5b45/commandline_config-2.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cbd4c1c91f9d05ca53c55b3a2a2caa4ee68bdd940f3e755ec22ea66a085ad73",
          "md5": "dd8510c69383d3dae470309a2d699437",
          "sha256": "60429a67bd24cabaf4bc6038addc857714af5c9be2410c04a50411b2d066118f"
        },
        "downloads": -1,
        "filename": "commandline_config-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dd8510c69383d3dae470309a2d699437",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26152,
        "upload_time": "2022-09-25T04:17:55",
        "upload_time_iso_8601": "2022-09-25T04:17:55.456900Z",
        "url": "https://files.pythonhosted.org/packages/8c/bd/4c1c91f9d05ca53c55b3a2a2caa4ee68bdd940f3e755ec22ea66a085ad73/commandline_config-2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3354e70fa97d50c8c836f63698458820c8b1ccc8b1489102a8d8478df7cf355",
          "md5": "ef56e6c2f4f81c2e60b6c02e86151d2a",
          "sha256": "6e23d8c1c081a3e3f78832dd0d132d60fb4f848c9871e4fe1b766a64b6a478cb"
        },
        "downloads": -1,
        "filename": "commandline_config-2.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef56e6c2f4f81c2e60b6c02e86151d2a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16455,
        "upload_time": "2022-09-25T04:49:11",
        "upload_time_iso_8601": "2022-09-25T04:49:11.335847Z",
        "url": "https://files.pythonhosted.org/packages/c3/35/4e70fa97d50c8c836f63698458820c8b1ccc8b1489102a8d8478df7cf355/commandline_config-2.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "290612ef6cb51667d2148d49d2a1f069c776839e6b2c890fdc8a2225fbf27a63",
          "md5": "52a75abe80a550642f743317c3a2815f",
          "sha256": "ab81d6ab0b1b12d12cc6309718ab8d2db1282cda06c2a5cb6e6c769baf792e6e"
        },
        "downloads": -1,
        "filename": "commandline_config-2.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "52a75abe80a550642f743317c3a2815f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26299,
        "upload_time": "2022-09-25T04:49:13",
        "upload_time_iso_8601": "2022-09-25T04:49:13.478170Z",
        "url": "https://files.pythonhosted.org/packages/29/06/12ef6cb51667d2148d49d2a1f069c776839e6b2c890fdc8a2225fbf27a63/commandline_config-2.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08abe2300babf1eadeb81cfcbe68884dc14221be7a0795c516576f2a9cff272e",
          "md5": "58783d9e35ccb54b8738458c38d25245",
          "sha256": "609153ee3b8c68a42b85959425decf56d4f743b1801eec4e1f62414202f760f7"
        },
        "downloads": -1,
        "filename": "commandline_config-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58783d9e35ccb54b8738458c38d25245",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17059,
        "upload_time": "2022-09-25T05:28:27",
        "upload_time_iso_8601": "2022-09-25T05:28:27.390872Z",
        "url": "https://files.pythonhosted.org/packages/08/ab/e2300babf1eadeb81cfcbe68884dc14221be7a0795c516576f2a9cff272e/commandline_config-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dda8adcbdd932ffc451d0ddeda5689565f04de5c7c55cd76e8674bcf25a7cd9",
          "md5": "4829142bf021d24acd0f08baf87f1793",
          "sha256": "a33601ddf4d71b13983104c7ffc096c593b9dbef6efb0fe5c067f00e2f1a28e2"
        },
        "downloads": -1,
        "filename": "commandline_config-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4829142bf021d24acd0f08baf87f1793",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26859,
        "upload_time": "2022-09-25T05:28:29",
        "upload_time_iso_8601": "2022-09-25T05:28:29.702007Z",
        "url": "https://files.pythonhosted.org/packages/8d/da/8adcbdd932ffc451d0ddeda5689565f04de5c7c55cd76e8674bcf25a7cd9/commandline_config-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e356b56972805687bdbd98fefd9148540e24370fda76fc50a9081808cedee7d",
          "md5": "5a25fe819e1b7aac16611c12fa7bdf25",
          "sha256": "315131951439fe7b1d6b773adb6f8fb0cc158b46c867a15955672d35222f14f0"
        },
        "downloads": -1,
        "filename": "commandline_config-2.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a25fe819e1b7aac16611c12fa7bdf25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16985,
        "upload_time": "2022-09-25T05:34:33",
        "upload_time_iso_8601": "2022-09-25T05:34:33.893897Z",
        "url": "https://files.pythonhosted.org/packages/1e/35/6b56972805687bdbd98fefd9148540e24370fda76fc50a9081808cedee7d/commandline_config-2.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b851807d81d2251a480df066af06b1679819f414b5c6b7e653ff8cb747d2710d",
          "md5": "3d1f5f4720337d456d5ff71ee5401609",
          "sha256": "945845ec6d5ec918fbda5003e5661cd54763e420990acbe982bb60e239833bfc"
        },
        "downloads": -1,
        "filename": "commandline_config-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3d1f5f4720337d456d5ff71ee5401609",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26778,
        "upload_time": "2022-09-25T05:34:35",
        "upload_time_iso_8601": "2022-09-25T05:34:35.524487Z",
        "url": "https://files.pythonhosted.org/packages/b8/51/807d81d2251a480df066af06b1679819f414b5c6b7e653ff8cb747d2710d/commandline_config-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "667f934f31ad0f5397836b0e12f6352bbd306a789f485793845c07f2577abdea",
          "md5": "26aae4e51d895adf6ccfdab8230f7c43",
          "sha256": "4417b75d93ff75cef3a3808313915a430fa83788f7ea5db567fd934c4eb3e6ed"
        },
        "downloads": -1,
        "filename": "commandline_config-2.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26aae4e51d895adf6ccfdab8230f7c43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17208,
        "upload_time": "2022-09-27T18:08:30",
        "upload_time_iso_8601": "2022-09-27T18:08:30.554709Z",
        "url": "https://files.pythonhosted.org/packages/66/7f/934f31ad0f5397836b0e12f6352bbd306a789f485793845c07f2577abdea/commandline_config-2.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69ed25b6ebbd20fd5e28ede577c9b9e338cd3c8f9b683f2043ae5cb60e345875",
          "md5": "1c39eeb0fd9c3002852cda135e90a9a5",
          "sha256": "4fc2a817d800fef99adc66e87dca7d56f5620b8136d20227f6a92688dc78a485"
        },
        "downloads": -1,
        "filename": "commandline_config-2.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1c39eeb0fd9c3002852cda135e90a9a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27151,
        "upload_time": "2022-09-27T18:08:32",
        "upload_time_iso_8601": "2022-09-27T18:08:32.499108Z",
        "url": "https://files.pythonhosted.org/packages/69/ed/25b6ebbd20fd5e28ede577c9b9e338cd3c8f9b683f2043ae5cb60e345875/commandline_config-2.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96c7133cb9bff3d3ac787b8617c31f483e5a67453c47d77180b5c5cc2ae0165a",
          "md5": "760939dcd328379b8ddc85d3c9261556",
          "sha256": "b13266cbab438b785e24e5f6de4962893d058d571d3f34c87960c7d529a9818e"
        },
        "downloads": -1,
        "filename": "commandline_config-2.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "760939dcd328379b8ddc85d3c9261556",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17207,
        "upload_time": "2022-09-29T07:29:52",
        "upload_time_iso_8601": "2022-09-29T07:29:52.347709Z",
        "url": "https://files.pythonhosted.org/packages/96/c7/133cb9bff3d3ac787b8617c31f483e5a67453c47d77180b5c5cc2ae0165a/commandline_config-2.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54a6c817cbb4316a1f9d45485e7d79125349738f6aefaa4e58367349ee860ff5",
          "md5": "4b10cfd10f442630eccdb6aa0dfe8b6b",
          "sha256": "4fe8d80270d3e5c9f203b5b15cad0e9910ab99d3b1d858dc9fe584a449a95dc3"
        },
        "downloads": -1,
        "filename": "commandline_config-2.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4b10cfd10f442630eccdb6aa0dfe8b6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27215,
        "upload_time": "2022-09-29T07:29:59",
        "upload_time_iso_8601": "2022-09-29T07:29:59.740546Z",
        "url": "https://files.pythonhosted.org/packages/54/a6/c817cbb4316a1f9d45485e7d79125349738f6aefaa4e58367349ee860ff5/commandline_config-2.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96c7133cb9bff3d3ac787b8617c31f483e5a67453c47d77180b5c5cc2ae0165a",
        "md5": "760939dcd328379b8ddc85d3c9261556",
        "sha256": "b13266cbab438b785e24e5f6de4962893d058d571d3f34c87960c7d529a9818e"
      },
      "downloads": -1,
      "filename": "commandline_config-2.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "760939dcd328379b8ddc85d3c9261556",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17207,
      "upload_time": "2022-09-29T07:29:52",
      "upload_time_iso_8601": "2022-09-29T07:29:52.347709Z",
      "url": "https://files.pythonhosted.org/packages/96/c7/133cb9bff3d3ac787b8617c31f483e5a67453c47d77180b5c5cc2ae0165a/commandline_config-2.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54a6c817cbb4316a1f9d45485e7d79125349738f6aefaa4e58367349ee860ff5",
        "md5": "4b10cfd10f442630eccdb6aa0dfe8b6b",
        "sha256": "4fe8d80270d3e5c9f203b5b15cad0e9910ab99d3b1d858dc9fe584a449a95dc3"
      },
      "downloads": -1,
      "filename": "commandline_config-2.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4b10cfd10f442630eccdb6aa0dfe8b6b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27215,
      "upload_time": "2022-09-29T07:29:59",
      "upload_time_iso_8601": "2022-09-29T07:29:59.740546Z",
      "url": "https://files.pythonhosted.org/packages/54/a6/c817cbb4316a1f9d45485e7d79125349738f6aefaa4e58367349ee860ff5/commandline_config-2.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}