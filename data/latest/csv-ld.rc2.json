{
  "info": {
    "author": "Donny Winston",
    "author_email": "donny@polyneme.xyz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# CSV-LD: A CSV-based Serialization for Linked Data\n\nComma-separated-values (CSV) is a useful data serialization and sharing format.\nThis document introduces the idea of CSV-LD as a CSV-based format to serialize\nLinked Data, mirroring the way that [JSON-LD](https://www.w3.org/TR/json-ld11/)\nis a JSON-based format to serialize Linked Data. \"CSV\" here includes any dialect\nthat uses a different delimiter, such as tab-separated-values (TSV).\n\nThe syntax of CSV-LD is designed to easily integrate into deployed systems that\nalready use CSV, and provides a smooth upgrade path from CSV to CSV-LD. It is\nprimarily intended to be a way to use Linked Data as part of spreadsheet-based\ndata entry; to facilitate data validation, display, and conversion of CSV into\nother formats via use of [CSV on the Web (CSVW)\nmetadata](https://www.w3.org/ns/csvw); and to build\n[FAIR](https://doi.org/10.1038/sdata.2016.18) data services.\n\nThe term \"CSV-LD\" was previously used to describe [a now-obsoleted\nprecursor](https://github.com/gkellogg/csv-ld) to the [CSVW\nspecifications](https://www.w3.org/2013/csvw/wiki/Main_Page); both approaches\nrequire a second file, a JSON-LD template document, to be shared along with a\nCSV file. The approach described herein, in contrast, requires only a CSV file\nfrom the data producer, one that includes links to CSVW-powered metadata.\n\n## Data Producers\n\nData producers need to add two header rows to their CSV to make it CSV-LD: the\n\"key-spec\" row, and the \"column-spec\" row. This mirrors the way that JSON can\nminimally be made JSON-LD by adding a \"@context\" key-value pair. CSV producers\ncommonly include a header row to label columns with names, and it is not\nuncommon to see CSV files with additional header rows (`headerRowCount` is part\nof the [CSVW vocabulary](https://www.w3.org/ns/csvw)).\n\n### The Key-Spec Row\n\nThe most important job of the top-most row, the key-spec row, is not at all\nabout specifying keys. Rather, it is to communicate to a data consumer that this\nfile is special in some way -- the left-most cell must have a URL in it, and\nhopefully, someone who has never seen CSV-LD before will click on the link.\n\nThe link is `http://example.org/csv-ld/2021/01/inKey` (not really, but I'll\nchange this soon -- I registered `csv-ld.org` and currently point it to the CSVW\nvocabulary page), and it will provide a friendly introduction to CSV-LD. The\nfile could indicate that it uses a different version of CSV-LD by using a\ndifferent prefix before `inKey`, which would link to that version's page.\n\nThe page will also explain that `inKey` marks a CSV column as being part of how\nto identify a row uniquely. A CSV table could have a single key, such as an ID\ncolumn, or a compound key, such as year and semester (e.g. \"Fall\", \"Spring\")\nuniquely identifying each row as an academic term. All key columns must be\ncontiguous and start on the left side -- this (1) makes the links easy to spot\nfor someone unfamiliar with CSV-LD, and (2) makes it easier for a data\nconsumer/steward to implement a CSV-LD processor.\n\nCell values in the key-spec row after (to the right of) the key columns (the\ncolumns containing the `inKey` link) have only one requirement: they cannot have\nthe same `inKey`-link value as the key-column cells. They can be blank,\ncomments, whatever.\n\nSo, to summarize, the key-spec row (1) communicates that the file is a CSV-LD\nfile, and (2) communicates the (possibly compound) key that uniquely identifies\na row.\n\n### The Column-Spec Row\n\nThe job of the column-spec row is to be an unambiguous labeling of each column.\nIt is fine for there to be a header row below the column-spec row that exhibits\nthe common header-row practice of using short names (\"x\", \"y\", etc.) as column\nlabels.\n\nFor a data producer, this task should be a simple matter of using a template or\nreference guide authored by a data steward that provides URLs for each column of\ninterest. For example, one might be given the following table of terms to record\nenvironmental metadata for collected biosamples:\n\n|Term URL|Comment|\n|---|---|\n|http://example.org/nmdc/id|Sample ID|\n|http://example.org/nmdc/lat_lon|Latitude and longitude|\n|http://example.org/nmdc/ecosystem|Type of ecosystem|\n|...|...|\n\nThese aren't real URLs (but I'll eventually update this example to be real).\nIt's also possible that a data steward may provide namespaces for data\nproducers, e.g. `http://example.org/nmdc/team42/`, and producers can use the\nnamespaces to prefix invented terms that will later resolve to working URLs\nthrough work done by the data steward.\n\nThe term URLs should resolve to pages that explain how values should be\nformatted. For example, `http://example.org/nmdc/lat_lon` could explain that the\nvalue should be latitude in degrees, a space, and longitude in degrees. This\nexplanation could be automatically generated by CSVW metadata (authored by the\ndata steward) that will also be used by a CSV-LD processor to validate the data.\nFor example, the CSVW metadata for this field could look like\n```json\n{\n  \"@context\": {\"@vocab\": \"http://www.w3.org/ns/csvw#\"},\n  \"name\": \"lat_long\",\n  \"separator\": \" \",\n  \"ordered\": true,\n  \"datatype\": {\n    \"base\": \"number\",\n    \"minimum\": \"-180\",\n    \"maximum\": \"180\"\n  }\n}\n```\n\n## Data Consumers\n\nA CSV-LD file is still just a CSV file, so a data consumer can simply ignore the\n\"extra\" headers rows. Each of the \"extra\" header rows is prefixed by a \"#\" and a\nspace, so that popular parsers can recognize these rows as \"comment\" lines and\nskip to the \"real\" header row, e.g. `pandas.read_csv(...,comment=\"#\")` for the\npopular Python `pandas` data-processing library. They could also click any link\nin the column-spec header to learn more about how to interpret the data in that\ncolumn. If they have access to a CSV-LD processor, they can use it to validate\nthe data and/or convert it to another format like JSON (i.e., JSON-LD).\n\n## Data Stewards\n\nData stewards are concerned with managing data integrity. They can author\nJSON-LD metadata for `csvw:Column` entities, as shown in the above example for\n`http://example.org/nmdc/lat_lon`, and make that metadata downloadable from the\nURL used for the column.\n\nA CSV-LD processor will request `http://example.org/nmdc/lat_lon` using an HTTP\n`Accept` header that expresses a preference for a JSON-LD response, whereas a\nhuman loading `http://example.org/nmdc/lat_lon` in their browser will get a web\npage (HTML) response that the data steward has produced (perhaps auto-generated\nfrom the metadata JSON-LD).\n\nThus, a data steward needs know how to serve web content, or needs to\ncollaborate with someone who can. I hope to provide in this repository a\nreference server implementation, written in Python.\n\n## Implementers of CSV-LD Processors\n\nThe final stakeholder in the CSV-LD world is the implementer of a CSV-LD\nprocessor. A more detailed specification is to come, but I will try to adhere to\na [\"worse is better\"](https://en.wikipedia.org/wiki/Worse_is_better) approach\nthat prioritizes simplicity of implementation. Furthermore, this repository will\nhost a reference CSV-LD processor implementation, written in Python. Perhaps the\nreference implementation will be good enough for most.\n\nOne thing to note here is that the job of the data producer is to aggregate a\nset of records (rows) with well-defined fields (columns). What a record *is* or\n*should be*, i.e. its type or class, and thus e.g. which columns are required,\nis left open to data consumers depending on the application.\n\nValidating a record as a whole is important, and the CSVW metadata spec can help\nwith this task. I expect to elaborate later on how exactly a CSV-LD processor\nmay be invoked e.g. as\n\n```\ncsvld --entity \"http://example.org/nmdc/BioSample\" --out data.json data.csv\n```\n\nto validate each row of the CSV-LD, in addition to independently validating each\ncolumn value.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/polyneme/nmdc-mongo-tools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "csv-ld",
    "package_url": "https://pypi.org/project/csv-ld/",
    "platform": "",
    "project_url": "https://pypi.org/project/csv-ld/",
    "project_urls": {
      "Homepage": "https://github.com/polyneme/nmdc-mongo-tools"
    },
    "release_url": "https://pypi.org/project/csv-ld/0.0.2/",
    "requires_dist": [
      "fastapi[all]",
      "python-dotenv",
      "rdflib",
      "requests",
      "toolz",
      "black ; extra == 'dev'",
      "invoke ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "setuptools-scm ; extra == 'dev'",
      "twine ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "Tools for CSV-LD, a CSV-based Serialization for Linked Data",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10177615,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a410962eda2edc997f9d78b109a11a5be0220530b95a164cb693923672daf842",
          "md5": "350fa8c140169639a94578b90d91a490",
          "sha256": "909a499b852375a0a240b37da398f659b0a2c4ff4eb06fe23a2da7ce86d43d71"
        },
        "downloads": -1,
        "filename": "csv_ld-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "350fa8c140169639a94578b90d91a490",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 5334,
        "upload_time": "2021-04-26T19:02:13",
        "upload_time_iso_8601": "2021-04-26T19:02:13.503717Z",
        "url": "https://files.pythonhosted.org/packages/a4/10/962eda2edc997f9d78b109a11a5be0220530b95a164cb693923672daf842/csv_ld-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "322e496984008c307e23cd5466940b24ce141ec4047747900ba7fc5984ec1fdb",
          "md5": "dc5fb4b3d01377c26723b13e124ef133",
          "sha256": "804bee82856f5c3b293ed01c157e8b450a6dce0f9769d45fb1ad1a2aae16c959"
        },
        "downloads": -1,
        "filename": "csv-ld-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dc5fb4b3d01377c26723b13e124ef133",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14812,
        "upload_time": "2021-04-26T19:02:14",
        "upload_time_iso_8601": "2021-04-26T19:02:14.381987Z",
        "url": "https://files.pythonhosted.org/packages/32/2e/496984008c307e23cd5466940b24ce141ec4047747900ba7fc5984ec1fdb/csv-ld-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "517bb324181f7d1251c23ea52c3a6b265721894c973d4fb5659d64a5f2e68d46",
          "md5": "056b531025321a2353bf8a48d27958fe",
          "sha256": "f8cb85353f8573a95d50e7d47a379d27dcc3fd49772f60904bcad6a86421cd22"
        },
        "downloads": -1,
        "filename": "csv_ld-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "056b531025321a2353bf8a48d27958fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6717,
        "upload_time": "2021-04-26T20:23:33",
        "upload_time_iso_8601": "2021-04-26T20:23:33.324016Z",
        "url": "https://files.pythonhosted.org/packages/51/7b/b324181f7d1251c23ea52c3a6b265721894c973d4fb5659d64a5f2e68d46/csv_ld-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e47c6da49bd97f859facd6c39226d3b6c64e3138f916957f2dfdeec981526ad",
          "md5": "e84f8dd7cde0899f28e2fda012bdd1e0",
          "sha256": "241384090b16516dc03fc013470ae67803ac742cfdb3c53810aeec3c756c9241"
        },
        "downloads": -1,
        "filename": "csv-ld-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e84f8dd7cde0899f28e2fda012bdd1e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 460542,
        "upload_time": "2021-04-26T20:23:34",
        "upload_time_iso_8601": "2021-04-26T20:23:34.240106Z",
        "url": "https://files.pythonhosted.org/packages/4e/47/c6da49bd97f859facd6c39226d3b6c64e3138f916957f2dfdeec981526ad/csv-ld-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "517bb324181f7d1251c23ea52c3a6b265721894c973d4fb5659d64a5f2e68d46",
        "md5": "056b531025321a2353bf8a48d27958fe",
        "sha256": "f8cb85353f8573a95d50e7d47a379d27dcc3fd49772f60904bcad6a86421cd22"
      },
      "downloads": -1,
      "filename": "csv_ld-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "056b531025321a2353bf8a48d27958fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 6717,
      "upload_time": "2021-04-26T20:23:33",
      "upload_time_iso_8601": "2021-04-26T20:23:33.324016Z",
      "url": "https://files.pythonhosted.org/packages/51/7b/b324181f7d1251c23ea52c3a6b265721894c973d4fb5659d64a5f2e68d46/csv_ld-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e47c6da49bd97f859facd6c39226d3b6c64e3138f916957f2dfdeec981526ad",
        "md5": "e84f8dd7cde0899f28e2fda012bdd1e0",
        "sha256": "241384090b16516dc03fc013470ae67803ac742cfdb3c53810aeec3c756c9241"
      },
      "downloads": -1,
      "filename": "csv-ld-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e84f8dd7cde0899f28e2fda012bdd1e0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 460542,
      "upload_time": "2021-04-26T20:23:34",
      "upload_time_iso_8601": "2021-04-26T20:23:34.240106Z",
      "url": "https://files.pythonhosted.org/packages/4e/47/c6da49bd97f859facd6c39226d3b6c64e3138f916957f2dfdeec981526ad/csv-ld-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}