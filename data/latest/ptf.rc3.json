{
  "info": {
    "author": "Antonin Bas",
    "author_email": "antonin@barefootnetworks.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "PTF Packet Testing Framework\n\n---\n\n# Introduction\n\nPTF is a Python based dataplane test framework. It is based on unittest, which\nis included in the standard Python distribution.\n\nThis document is meant to provide an introduction to the framework, discuss the\nbasics of running tests and to provide examples of how to add tests.\n\nMost of the code was taken from the [OFTest\nframework](https://github.com/floodlight/oftest). However, PTF focuses on the\ndataplane and is independent of OpenFlow. We also added several\n[new features](#New-features).\n\n---\n\n# Contributing\n\nBefore you start pushing new changes to this repository, you should notice\nthat the entire `src/` code is automatically formatted with Black.\nOur GitHub Action pipeline will verify that code is correctly\nformatted and fail if not.\n\nTwo separate targets in makefile were prepared to make our work easier.\nIf you want to run a check, type `make format-check`, but if you want to\nreformat your code, please use `make format`.\n\n`Black` is listed in the `requirements-dev.txt`. To install it locally, you\ncan use `make set-dev` or `pip install -r requirements-dev.txt`.\nMore information about Black, you find at\n[Black's GitHub Page](https://github.com/psf/black)\n\n---\n\n# Longer Start\n\n## Dependencies\n\nThe following software is required to run PTF:\n\n * Python 2.7 or 3.x\n * six 1.16.0\n * Scapy 2.4.5 (unless you provide another packet manipulation module)\n * pypcap (optional - VLAN tests will fail without this)\n * tcpdump (optional - Scapy will complain if it's missing)\n\nRoot/sudo privilege is required on the host, in order to run `ptf`.\n\nTo install minimal requirements execute:\n```text\npip install -r requirements.txt\n```\n\nThe default packet manipulator tool for `ptf` is `Scapy`. To install it use:\n```text\npip install scapy==2.4.5\n```\n\nTo enable VLAN tests, you need to install `pypcap`:\n```text\npip install pypcap\n```\n\nFor developer purpose, you should install `requirements-dev.txt` with:\n```text\npip install -r requirements-dev.txt\n```\n\nThe `tcpdump` is optional, but to install it use:\n```text\n# on CentOS\nyum install tcpdump\n\n# on Debian base\napt-get install tcpdump\n```\n\n## Run PTF\n\nOnce you have written tests and your switch is running, you can run 'ptf'. Use\n`--help` to see command line switches.\n\nFor example:\n\n    sudo ./ptf --test-dir mytests/ --pypath $PWD \\\n    \t --interface 0@veth1 --interface 1@veth3 --interface 2@veth5 \\\n    \t --interface 3@veth7 --interface 4@veth9 --interface 5@veth11 \\\n    \t --interface 6@veth13 --interface 7@veth15 --interface 8@veth17\n\nThis will run all the tests included in the `mytests` directory. The `--pypath`\noption can be used to easily add directories to the Python PATH. This is useful\nif you use a Python interface to configure your data plane (as part of your\ntests). The `--interface` option (or `-i`) can be used to specify the interfaces\non which to inject packets (along with the corresponding port number).\n\n## Install PTF\n\nPTF can be installed by running `sudo python setup.py install`. For more\ninformation on the different options accepted by `setup.py` (e.g. installing in\na custom location), please refer to the [setuptools documentation]\n(https://pythonhosted.org/setuptools/setuptools.html).\n\nPTF can also be installed with `pip`:\n\n```bash\n# Install the latest version\npip install ptf\n# Install specific version\npip install ptf==0.9.1\n```\n\n---\n\n# Writing tests for your switch\n\nTake a look at the `example` directory. This is not a working example as it is\n(the switch is not included), but it will show you how to write tests. This\ndirectory contains the following:\n\n* `run_client.sh`: a wrapper around `ptf`\n* `switch_sai_thrift`: empty directory, this is where the Python bindings to\n  program the switch's control plane would be copied\n* `mytests/sai_base_test.py`: a wrapper Python class around PTF's BaseTest\n  class. It is the base class for all the tests we added to `mytests/switch.py`\n* `mytests/switch.py`: some example tests\n\n## Running the example\n\nIf you want to run the example, you will need to obtain\n[p4factory](https://github.com/p4lang/p4factory). For the following, I will\nassume that you cloned the repository and installed the dependencies. I will\nassume that environment variable `P4FACTORY` contains the path to the cloned\nrepository.\n\nFirst, you need to create the required veths:\n\n    cd $P4FACTORY/tools/\n    sudo ./veth_setup.sh\n\nThe next step is to compile the target switch and to run it:\n\n    cd $P4FACTORY/targets/switch/\n    make bm-switchsai\n    sudo ./behavioral-model\n\nFinally, you can run the example tests:\n\n    cd <ptf-dir>/example/\n    sudo ../ptf --test-dir mytests/ \\\n    \t --pypath $P4FACTORY/targets/switch/tests/pd_thrift/\n    \t --interface 0@veth1 --interface 1@veth3 --interface 2@veth5 \\\n    \t --interface 3@veth7 --interface 4@veth9 --interface 5@veth11 \\\n    \t --interface 6@veth13 --interface 7@veth15 --interface 8@veth17\n\n---\n\n# New features\n\nWe added the following features to the base OFTest framework:\n\n## Filters\n\nThey can be used to discard some of the packets received from the switch. Take a\nlook at [sai_base_test.py](example/mytests/sai_base_test.py) for an example. You\nwill see the following code `testutils.add_filter(testutils.not_ipv6_filter)`\nwhich tells PTF to discard received IPv6 packets. You can add your own filters\n(they have to be callable Python objects which take a Scapy packet as input).\n\n## Ternary matching\n\nA PTF test -just like an OFTest test- matches the received packets against\nexpected packets. This is an exact match. However, sometimes one does not care\nabout all the fields in the packets. PTF introduces the Mask class which lets\nyou specified some field you do not care about when performing the match. For\nexample:\n\n    import mask\n    m = mask.Mask(expected_pkt)\n    m.set_do_not_care_scapy(IP, 'ttl')\n    verify_packets(<test>, m, <port list>)\n\n## Test timeout\n\nA timeout for test cases can be specified using the `--test-case-timeout`\ncommand line option. This timeout must be expressed in seconds. A timeout of 0\nis the same as no timeout (the default). If the timeout expires before the test\nis done executing, an exception will be raised and the test counts as an\nerror. A timeout can also be specified for each individual test case, using the\n`@testtimeout` decorator, which needs to be imported from `ptf.testutils`. This\ntimeout takes precedence over the global timeout passed on the command line.\n\n## Pluggable packet manipulation module\n\nBy default, `ptf` uses `Scapy` as the packet manipulation module, but it can \nalso operate on a different one. \n\nSuch module **must define/implement the same symbols**, as defined in `Scapy` \nimplementation of packet. Most of them are just names of most common frame \nheaders (Ether, IP, TCP, UDP, ...).\n\nThe default implementation can be found in file \n[/src/ptf/packet_scapy.py](/src/ptf/packet_scapy.py). It can be used as a \nreference when implementing your own version.\n\nTo use another packet manipulation module, one needs to \nprovide it as argument `-pmm` or `--packet-manipulation-module` when running the\n`ptf` binary.\n\n```text\nsudo ./ptf <other parameters> -pmm foo.packet_foo \n```\n\nPlease make sure that this module is loaded into the runtime before running \nany tests.\n\n## Sharding\n\nYou can achieve parallelization by splitting tests into N groups and running them with separate PTF processes.\nEach PTF instance will run disjoint subset of all selected tests.\n\nFor example to run specific set of tests across 3 PTF instances:\n\n```\n$ ssh mynode0 sudo ./ptf --test-dir mytests --num-shards 3 --shard-id 0 all ^other &\n$ ssh mynode1 sudo ./ptf --test-dir mytests --num-shards 3 --shard-id 1 all ^other &\n$ ssh mynode2 sudo ./ptf --test-dir mytests --num-shards 3 --shard-id 2 all ^other &\n```\n\n---\n\n# Configuring PTF\n\n## Platforms\n\nThe \"platform\" is a configuration file (written in Python) that tells PTF how to\nsend packets to and receive packets from the dataplane of the switch.\n\n### `eth`\n\nThe default platform, `eth`, uses Linux Ethernet interfaces and is configured\nwith the `-i` option (or `--interface`). Pass the option as `-i\nofport@interface`, for example `-i 1@eth1`. If no `-i` options are given the the\ndefault configuration uses vEths.\n\n### `remote`\n\nAnother common platform, `remote`, provides support for testing of switches on a\ndifferent host. This can be useful for cases where interfaces are not available\non one host (i.e. they're not bound to a Linux interface driver) or where PTF\ncannot run on the same host (unsupported OS, missing software, etc.).\n\nThis can be enable by modifying the `platforms/remote.py` file to point to 4\nNICs on the host running PTF, like so:\n\n    remote_port_map = {\n        (0, 23) : \"eth2\", # port 23 of device 0 is connected to physical port on the server eth2\n        (0, 24) : \"eth3\", # port 24 of device 0 is connected to physical port on the server eth3\n        (0, 25) : \"eth4\",\n        (0, 26) : \"eth5\"\n    }\n\n### `nn`\n\nWe introduce a new platform, `nn`, which uses [nanomsg] (http://nanomsg.org/) to\nsend and receive packet to the switch. We support IPC and TCP nanomsg\nsockets. When using this platform, you need to make sure that the Python package\n[nnpy] (https://github.com/nanomsg/nnpy) is installed. With `nn`, do not use\n`--interface`, instead use `--device-socket`. For each device, you need to\nprovide a list of enabled ports and a nanomsg socket address. For example:\n\n    --device-socket 0-{1,2,5-8}@ipc:///tmp/bmv2_packets_1.ipc\n\nThis command will enable ports 1, 2, 5, 6, 7, 8 on device 0. Packets for device\n0 will be captured and send on IPC socket `ipc:///tmp/bmv2_packets_1.ipc`.\n\n## Passing Parameters to Tests\n\nThere is a facility for passing test-specific parameters into tests that works as follows. On the command line, give the parameter\n\n    --test-params=\"key1=17;key2=True\"\n\nYou can then access these parameters in your tests' Pyhton code using the\nfollowing code:\n\n    import ptf.testutils as testutils\n    # Returns a dictionary which includes all your parameters\n    test_params = testutils.test_params_get()\n    # Returns the value of the parameter \"param\", or None if not found\n    param_value = testutils.test_param_get(\"param\")\n\nTake a look at [sai_base_test.py](example/mytests/sai_base_test.py) for an\nexample.\n\n## Grouping Tests together\n\nIt is very easy to create groups of tests, using the provided `group` Python\ndecorator. Simply decorate your test with `@group(<name of group>)`.\n\nTake a look at [switch.py](example/mytests/switch.py) for an example.\n\nOne given test can belong to several groups. You can choose to run only the\ntests belonging to a given group using a command like this one:\n\n    sudo ./ptf --test-dir mytests/ --pypath $PWD <name of group>\n\nWe also provide a convenient `disabled` decorator for tests.\n\n## Support for multidevice tests\n\nThe original OFTest was meant to unit test a single OF-compliant switch. With\nPTF, we tried to add support for testing a network of several devices. If you do\nnot intend to use this multi-device feature, you do not need to worry about it,\nit should not impact you. If you want to leverage this feature, here is what you\nneed to do:\n\n* when adding interfaces, instead of writing `<port_number>@<interface_name>`,\n  you need to write `<device_number>-<port_number>@<interface_name>`\n* when sending a packet, the port number becomes a tuple (device, port):\n  `send_packet(self, (<device_number>, <port_number>), pkt)`\n* the `verify_*` functions where also updated to include device information. For\n  example: `verify_packets(self, pkt, device_number=<device_number>,\n  ports=<port_list>)`. For more information, you can take a look at these\n  functions in [src/ptf/dataplane.py](src/ptf/dataplane.py).\n\n---\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/p4lang/ptf",
    "keywords": "ptf",
    "license": "Apache License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ptf",
    "package_url": "https://pypi.org/project/ptf/",
    "platform": "",
    "project_url": "https://pypi.org/project/ptf/",
    "project_urls": {
      "Homepage": "https://github.com/p4lang/ptf"
    },
    "release_url": "https://pypi.org/project/ptf/0.9.3/",
    "requires_dist": [
      "six (==1.16.0)"
    ],
    "requires_python": "",
    "summary": "PTF is a Python based dataplane test framework.",
    "version": "0.9.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12569590,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff6ad80670a024fc3e83653866f336f2899e5de7e33a3f88ef59a197e3f81c4e",
          "md5": "bc45e26524e2e63e88190fd8a70e5e57",
          "sha256": "5a90b81b292177ee165d01f9c37262a5dc7adf04a661d3d09887384a69ce25ca"
        },
        "downloads": -1,
        "filename": "ptf-0.9.1-0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc45e26524e2e63e88190fd8a70e5e57",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 58649,
        "upload_time": "2021-09-09T05:48:26",
        "upload_time_iso_8601": "2021-09-09T05:48:26.402634Z",
        "url": "https://files.pythonhosted.org/packages/ff/6a/d80670a024fc3e83653866f336f2899e5de7e33a3f88ef59a197e3f81c4e/ptf-0.9.1-0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "974247eb5a218554cadeb246ec5e6e6af92f18761f35d47b8294356851bfb289",
          "md5": "9c2251f1775bb67c530782a193a3014b",
          "sha256": "408ee0c5bd23a82c4cfc8d122d881747bdc8272e458c7719a82f312bafbabd85"
        },
        "downloads": -1,
        "filename": "ptf-0.9.1-0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c2251f1775bb67c530782a193a3014b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58483,
        "upload_time": "2021-09-08T00:05:43",
        "upload_time_iso_8601": "2021-09-08T00:05:43.249832Z",
        "url": "https://files.pythonhosted.org/packages/97/42/47eb5a218554cadeb246ec5e6e6af92f18761f35d47b8294356851bfb289/ptf-0.9.1-0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a63b89ee6abdad9abad969d066ea691182c54437c0cc496e6fcf4d354d7eb666",
          "md5": "7931769aaf886183f6df7db41a04b49f",
          "sha256": "2bb221a0e3244bf694a37f1bda2c919e1942c5ad0b84a18eea1e07f026fc9c8d"
        },
        "downloads": -1,
        "filename": "ptf-0.9.1-1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7931769aaf886183f6df7db41a04b49f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58628,
        "upload_time": "2021-09-09T05:34:21",
        "upload_time_iso_8601": "2021-09-09T05:34:21.266038Z",
        "url": "https://files.pythonhosted.org/packages/a6/3b/89ee6abdad9abad969d066ea691182c54437c0cc496e6fcf4d354d7eb666/ptf-0.9.1-1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4def247377f94751fb7699eb50834b40ce0575fa83c2cedc5658bff90809264e",
          "md5": "3c9b88e3c0c5132e646306296018addf",
          "sha256": "1afd6dd57d3a9bd05abb97befd6818926ca32ab4d16d953b88f14a01124ae3d4"
        },
        "downloads": -1,
        "filename": "ptf-0.9.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c9b88e3c0c5132e646306296018addf",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 60624,
        "upload_time": "2022-01-14T02:23:01",
        "upload_time_iso_8601": "2022-01-14T02:23:01.008333Z",
        "url": "https://files.pythonhosted.org/packages/4d/ef/247377f94751fb7699eb50834b40ce0575fa83c2cedc5658bff90809264e/ptf-0.9.2-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b028e8a1d23815ca60f31b78480fba76fb4be81aefdc7c7f98792cb3a5ab033",
          "md5": "a602d79c18d226a6ba20c108fbda6a8e",
          "sha256": "0053333a39c4e369cf901a2fb280f382be0f4cbad9c7499eb5a3d02e598080b7"
        },
        "downloads": -1,
        "filename": "ptf-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a602d79c18d226a6ba20c108fbda6a8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60653,
        "upload_time": "2022-01-14T02:23:02",
        "upload_time_iso_8601": "2022-01-14T02:23:02.691462Z",
        "url": "https://files.pythonhosted.org/packages/9b/02/8e8a1d23815ca60f31b78480fba76fb4be81aefdc7c7f98792cb3a5ab033/ptf-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b3af0edb20bb44b77dc365b67541cdaa908168142be57285e90628a946c1038",
          "md5": "64d5eb0c3dc2bbe9614569216689eeac",
          "sha256": "0bc294a4754c17deedcb109b86bd8ec926a18cc644f09197cab2f05c7e1d422e"
        },
        "downloads": -1,
        "filename": "ptf-0.9.3-0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "64d5eb0c3dc2bbe9614569216689eeac",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 60668,
        "upload_time": "2022-01-14T02:20:51",
        "upload_time_iso_8601": "2022-01-14T02:20:51.456019Z",
        "url": "https://files.pythonhosted.org/packages/8b/3a/f0edb20bb44b77dc365b67541cdaa908168142be57285e90628a946c1038/ptf-0.9.3-0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1c53ebf8ae63763e9ba1841ffb9e143b2c1316e9e259df23b93a169e774891e",
          "md5": "edb3916fe60850b9fe607635331f573d",
          "sha256": "c8169c9d3a3ffe92813c464a343e3a9774024cbcbbe16032cd988c2d544b50e0"
        },
        "downloads": -1,
        "filename": "ptf-0.9.3-0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edb3916fe60850b9fe607635331f573d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60694,
        "upload_time": "2022-01-14T02:20:52",
        "upload_time_iso_8601": "2022-01-14T02:20:52.603759Z",
        "url": "https://files.pythonhosted.org/packages/e1/c5/3ebf8ae63763e9ba1841ffb9e143b2c1316e9e259df23b93a169e774891e/ptf-0.9.3-0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b3af0edb20bb44b77dc365b67541cdaa908168142be57285e90628a946c1038",
        "md5": "64d5eb0c3dc2bbe9614569216689eeac",
        "sha256": "0bc294a4754c17deedcb109b86bd8ec926a18cc644f09197cab2f05c7e1d422e"
      },
      "downloads": -1,
      "filename": "ptf-0.9.3-0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "64d5eb0c3dc2bbe9614569216689eeac",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 60668,
      "upload_time": "2022-01-14T02:20:51",
      "upload_time_iso_8601": "2022-01-14T02:20:51.456019Z",
      "url": "https://files.pythonhosted.org/packages/8b/3a/f0edb20bb44b77dc365b67541cdaa908168142be57285e90628a946c1038/ptf-0.9.3-0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1c53ebf8ae63763e9ba1841ffb9e143b2c1316e9e259df23b93a169e774891e",
        "md5": "edb3916fe60850b9fe607635331f573d",
        "sha256": "c8169c9d3a3ffe92813c464a343e3a9774024cbcbbe16032cd988c2d544b50e0"
      },
      "downloads": -1,
      "filename": "ptf-0.9.3-0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "edb3916fe60850b9fe607635331f573d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 60694,
      "upload_time": "2022-01-14T02:20:52",
      "upload_time_iso_8601": "2022-01-14T02:20:52.603759Z",
      "url": "https://files.pythonhosted.org/packages/e1/c5/3ebf8ae63763e9ba1841ffb9e143b2c1316e9e259df23b93a169e774891e/ptf-0.9.3-0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}