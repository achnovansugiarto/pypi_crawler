{
  "info": {
    "author": "Pankaj Singh",
    "author_email": "aa3pankaj@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Pymongo Model\n==================================================== \n\nWith pymongo-model, it will be easier for you to use pymongo, as you will get a local copy of mongoDB document, you can do any change in the local copy (python object), changes will be committed from local copy to mongoDB only when you invoke save method like it happens in any ORM library.\\\n\\\nSimpleModel object provides basic feature of updating mongo document locally and commiting at once.\\\n\\\nAlso, \nYou can use below models for document history tracking feature (that can be used for operations like undo)\n1. In DiffHistoryModelV1, we are storing a new document (in delta collection) which consists of version details as well as original document everytime it is updated.\n2. In DiffHistoryModelV2, we are using [json-diff](https://github.com/fzumstein/jsondiff) for calculating difference in the versions and storing just the difference object instead of entire document for versioning.\n\nInstallation\n------------\n\nSupports Python 3+\nTo install, simply use pip\n```\n$ pip install pymongo-model\n```\n\nUsage\n-----\n\n```python\nimport pymongo\nfrom bson.objectid import ObjectId\nfrom model.pymongo_model import SimpleModel, DiffHistoryModelV1, DiffHistoryModelV2\n\nMONGO_KEY = os.getenv('MONGO_KEY')\nclient = pymongo.MongoClient(MONGO_KEY)\ndb = client[\"your_database\"]\n```\n\n#### Using SimpleModel\n```python\n\"\"\" A simple model that wraps mongodb document \n\"\"\"\nclass Player(SimpleModel):\n    collection = db.your_collection   #mongo collection object\n\n\n#Creating new document\nplayer = Player({\"username\":\"pankajsingh.08\",\"name\": \"Pankaj Singh\", \"age\": 25,\"runs\":300})    \nplayer.save()  #commited in db\n\n#Updating old document\nplayer = Player({\"_id\":ObjectId(\"provide_doc_id_here\")})    #provide mongo document id for fetching\nplayer.reload()     #this fetches data from db and maps to local dict object   \nplayer[\"city\"] = \"Hyderabad\"  #adding new key to document in local copy\nplayer[\"username\"] = \"aa3pankaj\" #updating old key in local copy\ndel player[\"age\"]  #deleting old key in local copy\nplayer.save()  #now everything will be committed at once in db\n\n```\n\n#### Using DiffHistoryModelV1\n```python\n\n\"\"\" A simple model that wraps mongodb document, \n    Also creates a delta_collection for document revision tracking,\n    In this version of DiffHistoryModel, it creates below document in the delta_collection for each update i.e after invoking save method \n    {\n       \"collection_name\": name of the collection of the document for which revision is being done,\n       \"document_id\" : mongo id of document for which revision is being done,\n       \"document\": original document object from your collection for which revision is being done,\n       \"_version\": revision number of the document,\n       \"is_latest\":Boolean, true only for latest\n    }\n\"\"\"\nclass Match(DiffHistoryModelV1):\n    #Refer https://api.mongodb.com/python/current/tutorial.html for creating db object\n    db_object = db                                #mongo client object\n    collection = db.your_collection               #mongo collection object\n    delta_collection_name = \"_delta_collection\"   #give any name for delta collection where revisions will be stored, it will be created automatically in the db\n\n#Creating new document\nmatch = Match({\"username\":\"pankajsingh.08\",\"name\": \"Pankaj Singh\", \"age\": 25})    \nmatch.save()  #commited in db\n\n#Updating old document\nmatch = Match({\"_id\":ObjectId(\"provide_doc_id_here\")})    #provide mongo document id for fetching\nmatch.reload()     #this fetches data from db and maps to local dict object   \nmatch[\"city\"] = \"Pune\"  #adding new key to document in local copy\nmatch.save()  #commited in original collection, Also a new document is created in the delta_collection\n\n#helper methods\ndoc_latest = match.get_latest_revision()  #latest record in db\nmatch.delete_latest_revision()  #deletes latest record in delta_collection, and makes previous record as latest but original document will not be touched\nmatch.undo()   #deletes latest record in delta_collection, and makes previous record as latest, Also original document will be updated\n```\n\n#### Using DiffHistoryModelV2\n```python\n\n\"\"\" A simple model that wraps mongodb document, \n    Also creates a delta_collection for document revision tracking, Only difference from DiffHistoryModelV1 is here instead of saving entire document, just difference is stored in diff.\n    In this version of DiffHistoryModel, it creates below document in the delta_collection for each update i.e after invoking save method \n    {\n       \"collection_name\": name of the collection of the document for which revision is being done,\n       \"document_id\" : mongo id of document for which revision is being done,\n       \"diff\": diff object generated from json-diff library (https://github.com/fzumstein/jsondiff)\n       \"_version\": revision number of the document,\n    }\n\"\"\"\n\nclass Match(DiffHistoryModelV2):\n    #Refer https://api.mongodb.com/python/current/tutorial.html for creating db object\n    db_object = db                                #mongo client object\n    collection = db.your_collection               #mongo collection object\n    delta_collection_name = \"_delta_collection\"   #give any name for delta collection where revisions will be stored, it will be created automatically in the db\n\n#Creating new document\nmatch = Match({\"username\":\"pankajsingh08\",\"name\": \"Pankaj Singh\", \"age\": \"25\"})    \nmatch.save()  #commited in db\n\n#Updating old document\nmatch = Match({\"_id\":ObjectId(\"provide_doc_id_here\")})    #provide mongo document id for fetching\nmatch.reload()     #this fetches data from db and maps to local dict object   \nmatch[\"city\"] = \"Pune\"  #adding new key to document in local copy\nmatch.save()  #commited in original collection, Also a new document is created in the delta_collection\n\n```\n\nProjects using pymongo-model\n----------------------------\n1. [PexaBot](https://github.com/aa3pankaj/PexaBot) : A chatbot for cricket match scoring and stats analysis\n\nSupport\n-------\nFind me on [Linkedin](https://www.linkedin.com/in/aa3pankaj/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aa3pankaj/pymongo-model",
    "keywords": "pymongo pymongo-json-diff pymongo-orm",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymongo-model",
    "package_url": "https://pypi.org/project/pymongo-model/",
    "platform": "",
    "project_url": "https://pypi.org/project/pymongo-model/",
    "project_urls": {
      "Homepage": "https://github.com/aa3pankaj/pymongo-model"
    },
    "release_url": "https://pypi.org/project/pymongo-model/2.0.2/",
    "requires_dist": [
      "jsondiff",
      "pymongo"
    ],
    "requires_python": ">=3.6",
    "summary": "Simple model based usage of pymongo, also provides optional feature for tracking mongoDB document history",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7716534,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7b8e5679478c1a46e0bd67bf3b8d6687b61625151de56019363f04cb4985f08",
          "md5": "c5b4edaaede63aee90c9ff7059ee40b9",
          "sha256": "9ee34f67a768ff2088b7de9ab10a9d2fc3a46049ddd3194c42b1f0edcac09def"
        },
        "downloads": -1,
        "filename": "pymongo_model-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5b4edaaede63aee90c9ff7059ee40b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 2035,
        "upload_time": "2020-07-14T15:00:31",
        "upload_time_iso_8601": "2020-07-14T15:00:31.905325Z",
        "url": "https://files.pythonhosted.org/packages/a7/b8/e5679478c1a46e0bd67bf3b8d6687b61625151de56019363f04cb4985f08/pymongo_model-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66aee5a62582801f7368f38d62f8ec2751fe03ff09a72d9a1505c1b1101fe717",
          "md5": "be4bc0dd46c339c6e7436cb351c3f81c",
          "sha256": "55dd7fa7ebba7e12f4e93b7458608e3f69561276d5771efeb3788b056e0eb85f"
        },
        "downloads": -1,
        "filename": "pymongo-model-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "be4bc0dd46c339c6e7436cb351c3f81c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1158,
        "upload_time": "2020-07-14T15:00:34",
        "upload_time_iso_8601": "2020-07-14T15:00:34.084413Z",
        "url": "https://files.pythonhosted.org/packages/66/ae/e5a62582801f7368f38d62f8ec2751fe03ff09a72d9a1505c1b1101fe717/pymongo-model-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a849d54640d3a124eb1c625720cb65d680c9e2f5d014880e1d4f26479ea4dc95",
          "md5": "c1d9e1797bbd256b538e1902f70c24e8",
          "sha256": "e8722bb48c33738b163f35b5fae8e121aee782a2448b8493c507fca142805451"
        },
        "downloads": -1,
        "filename": "pymongo_model-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1d9e1797bbd256b538e1902f70c24e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5006,
        "upload_time": "2020-07-16T17:29:08",
        "upload_time_iso_8601": "2020-07-16T17:29:08.630009Z",
        "url": "https://files.pythonhosted.org/packages/a8/49/d54640d3a124eb1c625720cb65d680c9e2f5d014880e1d4f26479ea4dc95/pymongo_model-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "442cbda3b4981890f989badadd9c5d6e8bb8aa5fc1d2a9210100904461988af0",
          "md5": "2ddf0863da94ad96161c6a9086316aa5",
          "sha256": "f344cd2a17942b1c8677056bbab8f661559c83ac57d088f6e35e7f370f1fcfc5"
        },
        "downloads": -1,
        "filename": "pymongo_model-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ddf0863da94ad96161c6a9086316aa5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5024,
        "upload_time": "2020-07-16T19:25:55",
        "upload_time_iso_8601": "2020-07-16T19:25:55.760559Z",
        "url": "https://files.pythonhosted.org/packages/44/2c/bda3b4981890f989badadd9c5d6e8bb8aa5fc1d2a9210100904461988af0/pymongo_model-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "442cbda3b4981890f989badadd9c5d6e8bb8aa5fc1d2a9210100904461988af0",
        "md5": "2ddf0863da94ad96161c6a9086316aa5",
        "sha256": "f344cd2a17942b1c8677056bbab8f661559c83ac57d088f6e35e7f370f1fcfc5"
      },
      "downloads": -1,
      "filename": "pymongo_model-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ddf0863da94ad96161c6a9086316aa5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5024,
      "upload_time": "2020-07-16T19:25:55",
      "upload_time_iso_8601": "2020-07-16T19:25:55.760559Z",
      "url": "https://files.pythonhosted.org/packages/44/2c/bda3b4981890f989badadd9c5d6e8bb8aa5fc1d2a9210100904461988af0/pymongo_model-2.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}