{
  "info": {
    "author": "CityScience MIT",
    "author_email": "csadmin@media.mit.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "Brix is a python library for CityScope modules which handles communication with [City I/O](http://cityio.media.mit.edu/).\n\nFull documentation can be found [here](https://cityscope.media.mit.edu/CS_Brix/).\n\nPlease note that brix is still being developed, which is why some features might change fairly quickly. You can follow the updates by keeping track of brix development in the [github repo](https://github.com/CityScope/CS_Brix).\n\n# Introduction\n\nWhat is this library for? If you have never heard of a CityScope before, you might want to stop reading and learn about them [here](https://cityscope.media.mit.edu/). CityScope is an awesome way to interact, explore, and co-create urban interventions in a way that can be accessed by multiple people with different background. If you know what they are, please keep reading.\n\nWhat is a CityScope table? a ‘table’ is our way of describing a CityScope project. Why table then? Since historically, most CityScope instances were composed of a mesh between a physical table-top 3D model of a city, augmented with projections, software, and other interface hardware. So a table => project.\n\nWhat is an indicator? An indicator is the result of running a module for CityScope. Indicators work by listening for updated from the CityScope table they are linked to, calculating some values by using a model, some function of the data, or a simulation, and then post the result of the calculations to CityIO to be displayed in the table.\n\nWhat are the types of indicators you can build? Indicators can be anything that could be displayed on a CityScope table, including the supporting screens associated to it. For the purpose of this library, we distinguish three types of indicator: numeric, heatmap, simulation.\n\n\n* Numeric: Numeric indicators are just a number or set of numbers. They are usually displayed in a chart (bar chart, radar chart, etc) next to the table. The most common numeric indicator are the numbers that go in the radar plot, which display information about density, diversity, and proximity.\n\n\n* Heatmap: These indicators are geodata. They are made up of geometries (points, lines, or polygons) and properties associated to them. These indicators are displayed as layers directly on the CityScope table.\n\n\n* Simulation: These type of indicators are also displayed on the table but they are the result of an agent based simulation and are therefore displayed as a dynamic layer. They change over time like a short movie. These are not yet supported by this library.\n\n# Installation\n\nBrix is now on pip. Just do:\n\n```\npip install cs-brix\n```\n\n# Tutorials\n\nThis module also contains a set of other useful functions that integrate with `brix.Handler` and `brix.Indicator`.\n\nThe functions `brix.get_OSM_geometries()` and `brix.get_OSM_nodes()` help you get data from Open Street Maps for your table.\n\n## Auto-updates of GEOGRIDDATA\n\nBrix also has the capability of automatically updating GEOGRIDDATA. For simple one-time updates, follow the documentation of `brix.Handler.update_geogrid_data()`. To use this feeature, you first need to define a function that takes a `brix.GEOGRIDDATA` as an input. When used with `brix.Handler.update_geogrid_data()`, this function can take any number of keyword arguments. The following example raises the height of all cells by 3 units:\n\n```\ndef add_height(geogrid_data, levels=1):\n        for cell in geogrid_data:\n                cell['height'] += levels\n        return geogrid_data\n\nH = Handler('dungeonmaster', quietly=False)\nH.update_geogrid_data(add_height,levels=3)\n```\n\nBrix also supports GEOGRIDDATA updates everytime there is a registered user interaction in the front end. To add a function to the update schedule, use `brix.Handler.add_geogrid_data_update_function()`. This has the limitation that your update funcion cannot take in any arguments other. If this limitation proves too restrictive, please submit an issue and we’ll consider pushing an update.\n\nThe following example updates the whole grid to Light Industrial use everytime there’s a user interaction:\n\n```\ndef update_g(geogrid_data):\n        for cell in geogrid_data:\n                cell['name'] = 'Light Industrial'\n        return geogrid_data\n\nH = Handler(table_name,quietly=False)\nH.add_geogrid_data_update_function(update_g)\nH.listen()\n```\n\nThe updates triggered by `brix.Handler.listen()` follow the following order:\n\n\n1. get GEOGRIDDATA\n\n\n2. run all GEOGRIDDATA updates using the result of 1 as input\n\n\n3. get the new GEOGRIDDATA\n\n\n4. update all indicators using the GEOGRIDDATA object resulting from 3\n\n## Creating a table from python\n\nBrix provides a class for creating spatial grids for CityScope projects: `brix.Grid_maker` a subclass of `brix.Handler`.\n\nFor most use cases, you will create your table using the web-app editor found [here](https://cityscope.media.mit.edu/CS_cityscopeJS/#/editor). For more complex projects, you might need to create your own table from an existing dataset. For example, you might want to select the grid area using a polygon defined in a shapefile. The tools we highlight here can be use for this purpose.\n\nThe first step is to instantiate the class by defining the location of your table and its name. The lat,lon provided to the `brix.Grid_maker` constructor correspond to the top left corner of the grid (North-West).\n\n```\nfrom brix import Grid_maker\ntable_name = 'dungeonmaster'\nlat,lon = 42.361875, -71.105713\nG = Grid_maker(table_name, lat, lon)\n```\n\nIf the table already exists, you can either use `brix.Handler.delete_table()` to delete it or wait to be prompted if you want to rewrite it. You can check if the table exists by using `brix.Handler.is_table()`. Please note that since `brix.Grid_maker` is a subclass of `brix.Handler`, most functions available for a `brix.Handler` object are also available for a `brix.Grid_maker` object. The table constructor also allows you to specify the cell_size, the nrows and ncols, as well as other parameters.\n\nOnce the grid maker object has been instatiated, we set the grid by running `brix.Grid_maker.set_grid_geojson()`:\n\n```\nG.set_grid_geojson()\n```\n\nThis will create the geojson that will be posted to CityIO to create the table. You can check the object by using `brix.Grid_maker.get_grid_geojson()`.\n\nThe next step is to define the cell types that the user will be able to choose frorm. Defining the necessary types and the properties of each type is a very complex process that involves data collection and analysis as well as community engagement and simulation that is beyond the scope of this tutorial. The default table created with the Grid constructor only contains a simple type called Default. To see this, you can use `brix.Grid_maker.grid_types()`. If you wish to change this, you can use `brix.Grid_maker.edit_types()`. This function will either take a json-like object (dict of dicts) with the name of the type as the key, or a list of names of types that will be automatically completed with default values. Once the types have been defined, they can be expressed in the following way, adding as many properties as needed by your table:\n\n```\n{\n        'Default': {\n                'color': [0, 0, 0],\n                'height': 0,\n                'interactive': 'Web',\n                ...\n        },\n        ...\n}\n```\n\nThe bare minimum properties that need to be defined are color, height, and interactive. If not provided, brix will assign them automatically.\n\nThe following line of code replaces the Default type by there other cell types callsed Type 1, Type 2, and Type 3, letting brix assign the color to each of them.\n\n```\nG.edit_types(['Type 1','Type 2','Type 3'])\n```\n\nFor most applications, you will want to turn off some of the cells and make them non-interactive. Usually, this will involve a shapefile or a geojson that contains the polygon that defines the interactive part of the table. If you have a Shapely polygon stored in poly you can set the non-interactive cells by using `brix.Grid_maker.set_noninteractive()`:\n\n```\nG.set_noninteractive(poly)\n```\n\nThe final step is to commit the grid to CityIO. Use `brix.Grid_maker.commit_grid()`:\n\n```\nG.commit_grid()\n```\n\nPutting it all together:\n\n```\nfrom brix import Grid_maker\ntable_name = 'dungeonmaster'\nlat,lon = 42.361875, -71.105713\nG = Grid_maker(table_name, lat, lon)\nG.set_grid_geojson()\nG.edit_types(['Type 1','Type 2','Type 3'])\nG.set_noninteractive(poly)\nG.commit_grid()\n```\n\nAlternatively, you can use poly as an argument to `brix.grid_from_poly()`. This function will calculate the location and the cell size based on the given polygon, and set the non-interactive parts. The following block of code achieves the same as the block above:\n\n```\nfrom brix import Grid_maker, grid_from_poly\ntable_name = 'dungeonmaster'\nG = grid_from_poly(table_name, poly)\nG.edit_types(['Type 1','Type 2','Type 3'])\nG.commit_grid()\n```\n\n## Testing your module\n\nTo automatically test your module, this library provides the `brix.User` class that simulates the behavior of a user interacting with your grid. This user runs in its own new thread to free up your main thread so that you can keep wokring on your indicator.\n\nThe following example consists of a `brix.Handler` that contains a diversity `brix.Indicator` that reponds to the updates of the `brix.User`:\n\n```\nfrom brix import Handler\nfrom brix.examples import Diversity\nfrom brix.test_tools import User\ntable_name = 'dungeonmaster'\nU = User(table_name)\nH = Handler(table_name,quietly=False)\ndiv = Diversity()\nH.add_indicator(div)\nU.start_user()\nH.listen()\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/CityScope/CS_Brix/archive/v_0.0.10.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CityScope/CS_Brix",
    "keywords": "",
    "license": "GNU General Public License v3.0 only (GPL-3.0-only)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cs-brix",
    "package_url": "https://pypi.org/project/cs-brix/",
    "platform": "",
    "project_url": "https://pypi.org/project/cs-brix/",
    "project_urls": {
      "Download": "https://github.com/CityScope/CS_Brix/archive/v_0.0.10.tar.gz",
      "Homepage": "https://github.com/CityScope/CS_Brix"
    },
    "release_url": "https://pypi.org/project/cs-brix/0.0.10/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Brix is a python library for CityScope modules which handles communication with City I/O.",
    "version": "0.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10543312,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79d7d8a11338484acc24c1ccfe951a4f1c908dd234852f9cee583607cae6cf5d",
          "md5": "397d3112f6c8948f7cbc438f6e808faa",
          "sha256": "051e4bd6b3eaf76c90060973cc0be0119ca45997e6b54be00d2b7aeff9175ef6"
        },
        "downloads": -1,
        "filename": "cs_brix-0.0.1-py3.7.egg",
        "has_sig": false,
        "md5_digest": "397d3112f6c8948f7cbc438f6e808faa",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 45024,
        "upload_time": "2020-11-24T16:02:04",
        "upload_time_iso_8601": "2020-11-24T16:02:04.482312Z",
        "url": "https://files.pythonhosted.org/packages/79/d7/d8a11338484acc24c1ccfe951a4f1c908dd234852f9cee583607cae6cf5d/cs_brix-0.0.1-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c83dacb7d0d585eadd60949075d1fc6a7b2193bea8a04261ee0ca2ac157b8c57",
          "md5": "c8f9714ca005feacc6e325e2313f3eb4",
          "sha256": "58f6be47e0cd0091f730348b6786d05a6afc38bb2a780d0c906c2413785900a9"
        },
        "downloads": -1,
        "filename": "cs-brix-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c8f9714ca005feacc6e325e2313f3eb4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16808,
        "upload_time": "2020-09-18T20:41:43",
        "upload_time_iso_8601": "2020-09-18T20:41:43.142680Z",
        "url": "https://files.pythonhosted.org/packages/c8/3d/acb7d0d585eadd60949075d1fc6a7b2193bea8a04261ee0ca2ac157b8c57/cs-brix-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a75244e88a26b30f51f447f95de6377bebcc3086337eb94950be11857140065",
          "md5": "e738bc559db6e82f0c1ebdad081307ec",
          "sha256": "cc7bcb9dde50702eb769c4b840013c4f05b8585e85fbb4e2265a59c5758a36ba"
        },
        "downloads": -1,
        "filename": "cs-brix-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "e738bc559db6e82f0c1ebdad081307ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 53407,
        "upload_time": "2021-06-02T22:01:02",
        "upload_time_iso_8601": "2021-06-02T22:01:02.225321Z",
        "url": "https://files.pythonhosted.org/packages/7a/75/244e88a26b30f51f447f95de6377bebcc3086337eb94950be11857140065/cs-brix-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22bb9aafa4639216139c4cff01de01bfc0420a980cb566677160e289e33ea670",
          "md5": "a5c1d49f9cb7e28e14bd52925c64dc1b",
          "sha256": "4d85a21fe4dc9b3c603384fbb1c651443340fbdad740c5ca72d08c6e8ad62388"
        },
        "downloads": -1,
        "filename": "cs-brix-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a5c1d49f9cb7e28e14bd52925c64dc1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17754,
        "upload_time": "2020-11-24T16:02:02",
        "upload_time_iso_8601": "2020-11-24T16:02:02.999756Z",
        "url": "https://files.pythonhosted.org/packages/22/bb/9aafa4639216139c4cff01de01bfc0420a980cb566677160e289e33ea670/cs-brix-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7d8e0e9c3564cdff75fc9cb5d817168d2b3bf24530cbd7d4232b74cad6e412d",
          "md5": "a00d2df777438a88cea31706ac263694",
          "sha256": "28983ab4665f970d37ad4d1a1c79e2e867073576f715df65cbb65a13e5ed56b9"
        },
        "downloads": -1,
        "filename": "cs_brix-0.0.3-py3.7.egg",
        "has_sig": false,
        "md5_digest": "a00d2df777438a88cea31706ac263694",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 50418,
        "upload_time": "2020-12-18T21:12:58",
        "upload_time_iso_8601": "2020-12-18T21:12:58.240534Z",
        "url": "https://files.pythonhosted.org/packages/b7/d8/e0e9c3564cdff75fc9cb5d817168d2b3bf24530cbd7d4232b74cad6e412d/cs_brix-0.0.3-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c6d2163155c7c76aa98671c0b07fa986be3e7256366a1b9947f9508a958a586",
          "md5": "74363b0ff0b504ce950ea7f9c8227e56",
          "sha256": "c18f4f5cf666537b8e84eb22f50592087b7ca7988afc71e90934462f24221692"
        },
        "downloads": -1,
        "filename": "cs-brix-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "74363b0ff0b504ce950ea7f9c8227e56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17894,
        "upload_time": "2020-11-30T00:26:24",
        "upload_time_iso_8601": "2020-11-30T00:26:24.184662Z",
        "url": "https://files.pythonhosted.org/packages/8c/6d/2163155c7c76aa98671c0b07fa986be3e7256366a1b9947f9508a958a586/cs-brix-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2013baa11b4536e06c4dcf9a49f536328ecc19a5ebfe600bae5db528b464cfb",
          "md5": "085b4ab4bce4cb647534ffa18a522746",
          "sha256": "587723620246d24351b6716aa65277932b8b3d33c3e3fbe47bc722f491dfa1f1"
        },
        "downloads": -1,
        "filename": "cs-brix-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "085b4ab4bce4cb647534ffa18a522746",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23707,
        "upload_time": "2020-12-18T21:12:55",
        "upload_time_iso_8601": "2020-12-18T21:12:55.353550Z",
        "url": "https://files.pythonhosted.org/packages/d2/01/3baa11b4536e06c4dcf9a49f536328ecc19a5ebfe600bae5db528b464cfb/cs-brix-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54c5352720b074520537029336a4e1a884f5d63ad10fdd24218dd840df46b78f",
          "md5": "01291c0f454ad7d2e7552afb8f73c9e3",
          "sha256": "fae74b29b2d98a7d52f177108065e89055d237fcd6af17711ed33ac0b04edeb3"
        },
        "downloads": -1,
        "filename": "cs-brix-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "01291c0f454ad7d2e7552afb8f73c9e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23770,
        "upload_time": "2020-12-21T18:38:15",
        "upload_time_iso_8601": "2020-12-21T18:38:15.972492Z",
        "url": "https://files.pythonhosted.org/packages/54/c5/352720b074520537029336a4e1a884f5d63ad10fdd24218dd840df46b78f/cs-brix-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49985b19a64ed38ececa8c8454a675b39949f87dcd80ebb875de8b144284c36c",
          "md5": "fc0fd17c38ea15b0c6536a5a74fcf8fe",
          "sha256": "5411ef93dfda1c52a80929ba60d6590b1d03e4160df2d2e0e79265670c3ddd33"
        },
        "downloads": -1,
        "filename": "cs-brix-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "fc0fd17c38ea15b0c6536a5a74fcf8fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24672,
        "upload_time": "2021-02-08T23:05:09",
        "upload_time_iso_8601": "2021-02-08T23:05:09.751083Z",
        "url": "https://files.pythonhosted.org/packages/49/98/5b19a64ed38ececa8c8454a675b39949f87dcd80ebb875de8b144284c36c/cs-brix-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74d2add192826294045719fdb9c803fca37b45d963c6162232dd94731a208d99",
          "md5": "ef4762b0bf79847968f2011b6999ef15",
          "sha256": "ee9d32ac0d26610c4510a314a7008468c04bfcb293fc60a5b21c8dcc7c88ca35"
        },
        "downloads": -1,
        "filename": "cs-brix-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ef4762b0bf79847968f2011b6999ef15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28661,
        "upload_time": "2021-03-08T15:06:06",
        "upload_time_iso_8601": "2021-03-08T15:06:06.067710Z",
        "url": "https://files.pythonhosted.org/packages/74/d2/add192826294045719fdb9c803fca37b45d963c6162232dd94731a208d99/cs-brix-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc3f7c02a19f6781a274cf90a025fd8238af6948f148f4e2c74d35b472e2a8ee",
          "md5": "a84d2610e6d3e74d3a971cce0060def0",
          "sha256": "3a908692a0f656dedf01970ea3cdbf0612837ebbe80d06d7cd2eec6d3328bf3f"
        },
        "downloads": -1,
        "filename": "cs_brix-0.0.8-py3.7.egg",
        "has_sig": false,
        "md5_digest": "a84d2610e6d3e74d3a971cce0060def0",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 77451,
        "upload_time": "2021-04-23T14:41:07",
        "upload_time_iso_8601": "2021-04-23T14:41:07.824426Z",
        "url": "https://files.pythonhosted.org/packages/fc/3f/7c02a19f6781a274cf90a025fd8238af6948f148f4e2c74d35b472e2a8ee/cs_brix-0.0.8-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d004120831a49e799d71b9807af57cc16ed492d85c2cee2ef6b3fa479daef6f5",
          "md5": "1a3dcc982d317e669d5e9c50987da416",
          "sha256": "519e1bd5c77b81ced2c6353592218c4db4af0499e2823da9c910eb695fdba005"
        },
        "downloads": -1,
        "filename": "cs-brix-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "1a3dcc982d317e669d5e9c50987da416",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29648,
        "upload_time": "2021-03-19T12:27:11",
        "upload_time_iso_8601": "2021-03-19T12:27:11.562326Z",
        "url": "https://files.pythonhosted.org/packages/d0/04/120831a49e799d71b9807af57cc16ed492d85c2cee2ef6b3fa479daef6f5/cs-brix-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7502352e11b209cf07ac2fbd8513c5f3c19699e92a375f9097c4adebbab683d2",
          "md5": "505030dc1921f521eac7f77fbdee6f3e",
          "sha256": "710b0392428a0e604f9463c0f21c125214b58ac8e0691f63bdf26a792c132d54"
        },
        "downloads": -1,
        "filename": "cs_brix-0.0.9-py3.7.egg",
        "has_sig": false,
        "md5_digest": "505030dc1921f521eac7f77fbdee6f3e",
        "packagetype": "bdist_egg",
        "python_version": "0.0.9",
        "requires_python": ">=3.6",
        "size": 87508,
        "upload_time": "2021-06-02T22:01:11",
        "upload_time_iso_8601": "2021-06-02T22:01:11.006076Z",
        "url": "https://files.pythonhosted.org/packages/75/02/352e11b209cf07ac2fbd8513c5f3c19699e92a375f9097c4adebbab683d2/cs_brix-0.0.9-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3d736f62e2578366566bef405298b7ef3b87c1d7785267bc26b3f2df8e6a455",
          "md5": "51a060d235e5c96d7965865aea1b91ca",
          "sha256": "a23be8a96816c392f1343f1565010ad2c81cd0f40cbbf4dc46bac0b51b2a7cd0"
        },
        "downloads": -1,
        "filename": "cs_brix-0.0.9-py3.9.egg",
        "has_sig": false,
        "md5_digest": "51a060d235e5c96d7965865aea1b91ca",
        "packagetype": "bdist_egg",
        "python_version": "0.0.9",
        "requires_python": ">=3.6",
        "size": 98900,
        "upload_time": "2021-06-02T22:01:12",
        "upload_time_iso_8601": "2021-06-02T22:01:12.031387Z",
        "url": "https://files.pythonhosted.org/packages/c3/d7/36f62e2578366566bef405298b7ef3b87c1d7785267bc26b3f2df8e6a455/cs_brix-0.0.9-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e6547b64499a234c5754593c02ad363e0ae6f00a426731d3feff965b3ce74d1",
          "md5": "e886621c1d7e1f599bf5c23c63a7a2a0",
          "sha256": "1f0c3a7c7aff2444340b979ac8d26c80a74cc67726afc9ed736a34eb087b8940"
        },
        "downloads": -1,
        "filename": "cs-brix-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "e886621c1d7e1f599bf5c23c63a7a2a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35366,
        "upload_time": "2021-04-23T14:42:09",
        "upload_time_iso_8601": "2021-04-23T14:42:09.158103Z",
        "url": "https://files.pythonhosted.org/packages/6e/65/47b64499a234c5754593c02ad363e0ae6f00a426731d3feff965b3ce74d1/cs-brix-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a75244e88a26b30f51f447f95de6377bebcc3086337eb94950be11857140065",
        "md5": "e738bc559db6e82f0c1ebdad081307ec",
        "sha256": "cc7bcb9dde50702eb769c4b840013c4f05b8585e85fbb4e2265a59c5758a36ba"
      },
      "downloads": -1,
      "filename": "cs-brix-0.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "e738bc559db6e82f0c1ebdad081307ec",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 53407,
      "upload_time": "2021-06-02T22:01:02",
      "upload_time_iso_8601": "2021-06-02T22:01:02.225321Z",
      "url": "https://files.pythonhosted.org/packages/7a/75/244e88a26b30f51f447f95de6377bebcc3086337eb94950be11857140065/cs-brix-0.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}