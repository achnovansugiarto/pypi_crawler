{
  "info": {
    "author": "Casey Grun, Karthik Sarma, Brian Wolfe, Seung Woo Shin",
    "author_email": "Stefan Badelt <bad-ants-fleet@posteo.eu>, Erik Winfree <winfree@caltech.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# peppercornenumerator \n\n[![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/dna-and-natural-algorithms-group/peppercornenumerator)](https://github.com/dna-and-natural-algorithms-group/peppercornenumerator/tags)\n[![GitHub release (latest by date including pre-releases)](https://img.shields.io/github/v/release/dna-and-natural-algorithms-group/peppercornenumerator?include_prereleases)](https://github.com/dna-and-natural-algorithms-group/peppercornenumerator/releases)\n[![PyPI version](https://badge.fury.io/py/peppercornenumerator.svg)](https://badge.fury.io/py/peppercornenumerator)\n[![PyPI - License](https://img.shields.io/pypi/l/peppercornenumerator)](https://opensource.org/licenses/MIT)\n![build](https://github.com/DNA-and-Natural-Algorithms-Group/peppercornenumerator/actions/workflows/python-package.yml/badge.svg)\n[![Codecov](https://img.shields.io/codecov/c/github/dna-and-natural-algorithms-group/peppercornenumerator)](https://codecov.io/gh/dna-and-natural-algorithms-group/peppercornenumerator)\n\n\nThis is a package for domain-level strand displacement (DSD) system analysis.\nAfter installation, you should be able to execute the scripts  **peppercorn**\nand  **pilsimulator**.\n\nThe reaction enumerator Peppercorn reads a file with initially present\ndomain-level complexes, and returns all possible reactions and products.\nPeppercorn supports arbitrary non-pseudoknotted structures and the following\ndomain-level reactions: bind, open, proximal 3-way and 4-way branch migration,\nremote 3-way and 4-way branch migration.  For more background on reaction\nsemantics we refer to [Badelt et al. (2020)].\n\nGiven a specification of initial species concentrations, the simulation\nsoftware Pilsimulator can read Peppercorn's output and simulate expected\nspecies concentrations over time. Alternatively, you can export the results\ninto **SBML** format for analysis in your favorite simulator.\nNote that the reaction rates assume DNA\nmolecules!\n\nFor a quick overview of the software, you can also have a look at [this talk]\nheld at the 26th International Conference on DNA Computing and Molecular\nProgramming ([DNA 26]).\n\n## Installation\n```sh\n~$ pip install peppercornenumerator\n```\n\nIf you are installing from the git repository, use:\n```bash\n$ pip install .\n```\nIf you are planning to contribute to the repository, please install the\ndevelopment version and make sure all tests pass:\n``` \n$ pip install .[dev]\n$ pytest \n```\n\n## Quickstart using executable scripts\n\n### General workflow\nAfter installation of **peppercornenumerator**, you must have\ntwo excutable scripts, try if they work and look at the options:\n```sh\n$ peppercorn --help\n$ pilsimulator --help\n```\n\nUse the executable **peppercorn** to load the file [example.pil] and write results to example_enum.pil:\n\n```sh\n# either using commandline flags\n$ peppercorn -o example_enum.pil example.pil\n# or read from STDIN and write to STDOUT:\n$ cat example.pil | peppercorn > example_enum.pil\n```\nYour can simulate the enumerated system using the **pilsimulator** executable.\n```sh\n$ cat example_enum.pil | pilsimulator --t8 1800 --p0 S1=100 S2=100 C1=0.1 \n```\nNote that default concentration unit changed to 'nM' in version 1.1 (previously\n'M').  Check commandline options of peppercorn to change units, e.g. to 'M', as\nwell as to provide initial concentrations directly in the input file.\n\n### Input/Output format\n\nThe following input format is recommended. The lengths of all domains are\ndefined first, then all initial complexes are defined in terms of their\nsequence and secondary structure. For more details on the **kernel notation**\nof complexes, see Figure 1 or Section 2 of [Badelt et al. (2020)]. \n\n```\n# <- this is a comment\n#\n# Shohei Kotani and William L. Hughes (2017)\n# Multi-Arm Junctions for Dynamic DNA Nanotechnology\n# \n# Figure 2A: Single-layer catalytic system with three-arm junction substrates.\n#\n\n#\n# Initialize domains (and their complements) and specify their lengths:\n#\nlength a   = 22  # Domains a and a* with length = 22\nlength b   = 22\nlength c   = 22\nlength t1  = 6   # name = 1 in Figure\nlength t2  = 6   # name = 2 in Figure\nlength t3  = 10  # name = 3 in Figure\nlength T2  = 2\n\nlength d1s = 16\nlength d2  = 6\n\n#\n# Initialize all initial complexes using kernel notation, \n# which combines name, sequence and structure into a single line!\n# Always use 5' to 3' direction of sequences.\n#\n\n# The following complex is called C1, has a single strand with 3 unpaired domains:\nC1 = t1 c a\n\n# The complex S1 has multiple strands and is connected via paired domains!\n# Sequence of S1:  d1s T2 b a t2 + t2* a* c* t1* + c b* \n# Structure of S1:  .  .  ( ( (  +  )  )  (   .  + ) )\nS1 = d1s T2 b( a( t2( + ) ) c*( t1* + ) ) \n\nS2 = t1( c( a( + t2* ) b*( d2 t3 + ) ) )\n\nP1 = t2* a*( c*( t1*( + ) ) )\nI1 = d1s T2 b( a t2 + c )\nI2 = d1s T2 b( a( t2( + ) ) b*( d2 t3 + ) c*( t1* + ) )\n\nP2 = d1s T2 b( a( t2( + ) ) ) d2 t3\nP3 = b( c*( t1* + ) )\n\nR = d1s( d2( + t3* ) )\n\nD = d1s d2\nRW = d1s( T2 b( a( t2( + ) ) ) d2( t3( + ) ) )\n```\n\nLet's use reaction condensation for a more compact representation of the\nreaction network and increase the default maximum complex size to avoid\n(warnings about) incomplete enumeration.\n```\n$ peppercorn -o system-enum.pil --max-complex-size 10 --condensed < system.pil\n```\n\nAnd then the output file should look something like this. The layout may vary\nbetween different Peppercorn versions.\n```\n# File generated by peppercorn-v0.9\n\n# Domains (17) \nlength a = 22\nlength b = 22\nlength c = 22\nlength d1s = 16\nlength d2 = 6\nlength t1 = 6\nlength T2 = 2\nlength t2 = 6\nlength t3 = 10\n\n# Resting complexes (12) \nC1 = t1 c a\nD = d1s d2\ne52 = t3*( d2*( d1s*( + ) ) + b( c*( t1*( + ) ) a( + t2* ) ) d2 )\ne60 = t3*( d2*( d1s*( + ) d2 + b( c*( t1*( + ) ) a( + t2* ) ) ) )\nI1 = d1s T2 b( a t2 + c )\nP1 = t2* a*( c*( t1*( + ) ) )\nP2 = d1s T2 b( a( t2( + ) ) ) d2 t3\nP3 = b( c*( t1* + ) )\nR = d1s( d2( + t3* ) )\nRW = d1s( T2 b( a( t2( + ) ) ) d2( t3( + ) ) )\nS1 = d1s T2 b( a( t2( + ) ) c*( t1* + ) )\nS2 = t1( c( a( + t2* ) b*( d2 t3 + ) ) )\n\n# Resting macrostates (11) \nmacrostate C1 = [C1]\nmacrostate D = [D]\nmacrostate e60 = [e60, e52]\nmacrostate I1 = [I1]\nmacrostate P1 = [P1]\nmacrostate P2 = [P2]\nmacrostate P3 = [P3]\nmacrostate R = [R]\nmacrostate RW = [RW]\nmacrostate S1 = [S1]\nmacrostate S2 = [S2]\n\n# Condensed reactions (6) \nreaction [condensed      =       466694 /M/s ] e60 + I1 -> P3 + RW + D + C1\nreaction [condensed      =      3082.99 /M/s ] I1 + P1 -> S1 + C1\nreaction [condensed      =        3e+06 /M/s ] P2 + R -> RW + D\nreaction [condensed      =  1.63659e+06 /M/s ] S1 + C1 -> I1 + P1\nreaction [condensed      =       466694 /M/s ] S2 + I1 -> P3 + P2 + C1\nreaction [condensed      =        3e+06 /M/s ] S2 + R -> e60\n```\n\n### Tips & Tricks\n  * You can specify concentrations of complexes in the input file, e.g.:\n\n        C1 = t1 c a @initial 10 nM\n\n    The benefit of hard-coding initial concentrations in the input file, is\n    that they do not have to be specified again when simulating the output\n    using the Pilsimulator software.\n\n  * You can name complexes, even though you do not want them initially present. To do that, give them explicitly 0 initial concentration:\n\n        I1 = d1s T2 b( a t2 + c ) @initial 0 nM\n\n  * Every file produced by Peppercorn, can be used as an input to Peppercorn,\n    although some types of input (e.g. macrostate assignments, condensed\n    reactions) may be ignored with a warning.  You can use that to specify\n    a reaction with a specific type and rate constant and that reaction will\n    then be part of the enumerated and condensed output of peppercorn. If\n    Peppercorn enumerates an already specified reaction (same type, same\n    complexes), the rate will not be updated.\n\n        reaction [branch-4way    =        1e-10 /s   ] I2 -> P3 + P2\n\n    Of course, all reactants and products must be previously defined complexes.\n    You can use the supported reaction types: \n    open, bind21, bind11, branch-3way, branch-4way ... but not condensed!\n\n  * You can use a short-hand notation for a *super sequence* that is composed\n    of multiple domains. For example, if a domain *k* is sometimes split into\n    *k1*, *k2*, and *k3*, e.g. when they are not all bound at the same time,\n    you can define\n\n        sup-sequence k = k1 k2 k3\n\n    and use the domain *k* as a shorthand for *k1 k2 k3* when applicable.\n    Note, that the output will always use the extended format, explicitly\n    listing the most detailed domain composition.\n        \n  * You can specify the nucleotide sequence of a domain, and it will remain\n    present in the ouput file. Hower, note that rates (at the moment) only\n    depend on domain length, and not on the nucleotide sequence. Use the keyword\n    `sequence` to initialize a domain with the nucleotide sequence:\n\n        sequence a = ACGTUGCA : 8\n\n    The digit at the end denotes the length of the domain, it can be omitted,\n    but must not be wrong.\n\n  * Peppercorn supports a range of different input file formats, e.g. the\n    specification language of the [Seesaw Compiler]. You can use the option\n    `--dry-run` to translate every valid input into kernel format without\n    enumeration.\n\n        $ cat seesaw_ciruit.ssw | peppercorn --dry-run\n\n  * Consider taking a look at the [case studies] directory for more examples.\n\n## Version\n1.1.1 -- Removed deprecated setup.py, bumping to Python>=3.8.\n\n1.1 -- Mayor Python>=3.7 code cleanup and speedups for some core functions.\n  * rewrite of all objects to use dsdobjects>=0.8 (an attempt to fix rare segfaults).\n  * moved ratemodel related functions to peppercornenumerator/ratemodel.py.\n  * renamed open to open1N in order to avoid name conflicts.\n  * default concentration unit for output is now 'nM' throughout the library.\n  * updating and extending unittests.\n  * some pythonification of old code.\n  * removing deprecated code and undocumented experimental features.\n  * updated files in case_study directory for compatibility with changes.\n\n1.0.1 -- bugfix for pilsimulator --labels option.\n\n1.0 -- stable release, requires python >= 3.7.\n\n## Authors\nStefan Badelt, Casey Grun, Karthik V. Sarma, Brian Wolfe, Seung Woo Shin and Erik Winfree.\n\n## Cite\nIf you are using this package, plese cite:\n - Stefan Badelt, Casey Grun, Karthik V. Sarma, Seung Woo Shin, Brian Wolfe, and Erik Winfree (2020)\n    \"Enumeration, condensation and simulation of pseudoknot-free domain-level DNA strand displacement systems\"\n    [[Badelt et al. (2020)]].\n\n\n[Badelt et al. (2020)]: <https://doi.org/10.1098/rsif.2019.0866>\n[example.pil]: <https://github.com/DNA-and-Natural-Algorithms-Group/peppercornenumerator/blob/master/tests/examples/literature/kotani2017_F2.pil>\n[Seesaw Compiler]: <http://www.qianlab.caltech.edu/SeesawCompiler/AOtoSEESAW.php>\n[case studies]: <https://github.com/DNA-and-Natural-Algorithms-Group/peppercornenumerator/blob/master/case_studies/>\n[DNA 26]: <http://dna26.iopconfs.org/home>\n[this talk]: <http://www.tbi.univie.ac.at/~stef/files/dna26-badelt-peppercorn.mp4>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "Stefan Badelt <bad-ants-fleet@posteo.eu>",
    "name": "peppercornenumerator",
    "package_url": "https://pypi.org/project/peppercornenumerator/",
    "platform": null,
    "project_url": "https://pypi.org/project/peppercornenumerator/",
    "project_urls": {
      "Home": "http://www.github.com/DNA-and-Natural-Algorithms-Group/peppercorn"
    },
    "release_url": "https://pypi.org/project/peppercornenumerator/1.1.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "natsort",
      "dsdobjects>=0.8",
      "pytest ; extra == \"dev\"",
      "pytest-cov ; extra == \"dev\"",
      "codecov ; extra == \"dev\""
    ],
    "requires_python": ">=3.8",
    "summary": "Domain-level nucleic acid reaction enumerator",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16857329,
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5283d25b97a9fd61683e792c2ae578563d7949e0d2165877a8d3e732e437644",
          "md5": "d03cfa599e46c5ca86f3818d0098be20",
          "sha256": "f1cf8254620417454afb90077cbd18f5bfd996d547db6ce0d94e7222084481d4"
        },
        "downloads": -1,
        "filename": "peppercornenumerator-0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d03cfa599e46c5ca86f3818d0098be20",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 62948,
        "upload_time": "2020-06-11T07:33:23",
        "upload_time_iso_8601": "2020-06-11T07:33:23.896750Z",
        "url": "https://files.pythonhosted.org/packages/f5/28/3d25b97a9fd61683e792c2ae578563d7949e0d2165877a8d3e732e437644/peppercornenumerator-0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8322b2d7e8ecaddfcc35c06b62c4db6c8b01c34075a6817d3068fb750e5a1dd3",
          "md5": "b5e7fe312d9c63b6ef3b12882fdd59b7",
          "sha256": "2d17d229ec2d3264d514c3063397c5a83ddc493a81a3ff9751ce7537e2f9cc5c"
        },
        "downloads": -1,
        "filename": "peppercornenumerator-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "b5e7fe312d9c63b6ef3b12882fdd59b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 61401,
        "upload_time": "2020-06-11T07:33:26",
        "upload_time_iso_8601": "2020-06-11T07:33:26.810073Z",
        "url": "https://files.pythonhosted.org/packages/83/22/b2d7e8ecaddfcc35c06b62c4db6c8b01c34075a6817d3068fb750e5a1dd3/peppercornenumerator-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ff211cb7f2ea4c62e47e2d8eedd1a636f3cd8f0024d2480deaf1521bd2eb724",
          "md5": "30e5dfbd0002e9de7d14d85f1dac1d0f",
          "sha256": "647a247bb8713b6b3f5cd0562affdc6a38ee0978edb95dc5d461d77ccdd9514f"
        },
        "downloads": -1,
        "filename": "peppercornenumerator-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30e5dfbd0002e9de7d14d85f1dac1d0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 62719,
        "upload_time": "2020-06-11T08:33:07",
        "upload_time_iso_8601": "2020-06-11T08:33:07.166168Z",
        "url": "https://files.pythonhosted.org/packages/3f/f2/11cb7f2ea4c62e47e2d8eedd1a636f3cd8f0024d2480deaf1521bd2eb724/peppercornenumerator-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f88301b171c771276c7ba1d223ea4e519edfd0dfac89593355bcfb55a58ea725",
          "md5": "091c02b981b203f90786cc7b7bab4d90",
          "sha256": "23f90acce7f59258e7c778058cae6009ecb2e85aefcb3025f3ed52df5aa6c232"
        },
        "downloads": -1,
        "filename": "peppercornenumerator-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "091c02b981b203f90786cc7b7bab4d90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 61264,
        "upload_time": "2020-06-11T08:33:08",
        "upload_time_iso_8601": "2020-06-11T08:33:08.594792Z",
        "url": "https://files.pythonhosted.org/packages/f8/83/01b171c771276c7ba1d223ea4e519edfd0dfac89593355bcfb55a58ea725/peppercornenumerator-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2435af370dc9a78e844224da044ba631a093decbeaed5faa068bb4941de01de0",
          "md5": "481635d68afa521e7322f466a018f2e5",
          "sha256": "c47b13dea7df466c4c6e8b985ab178cbed0213a085bb892e30b9fdb078a078e1"
        },
        "downloads": -1,
        "filename": "peppercornenumerator-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "481635d68afa521e7322f466a018f2e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 62658,
        "upload_time": "2020-09-15T12:08:48",
        "upload_time_iso_8601": "2020-09-15T12:08:48.227677Z",
        "url": "https://files.pythonhosted.org/packages/24/35/af370dc9a78e844224da044ba631a093decbeaed5faa068bb4941de01de0/peppercornenumerator-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99132789a36cad67b40f4144b1afe82e4f293d8d480ad4d8435b90894b007201",
          "md5": "5fb1e4246b5fc1b197223999aed5e295",
          "sha256": "439f34a8913afa16421e5b3002bae9f707169ede6f755e872e1aec92da80eb76"
        },
        "downloads": -1,
        "filename": "peppercornenumerator-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5fb1e4246b5fc1b197223999aed5e295",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 61569,
        "upload_time": "2020-09-15T12:08:50",
        "upload_time_iso_8601": "2020-09-15T12:08:50.098351Z",
        "url": "https://files.pythonhosted.org/packages/99/13/2789a36cad67b40f4144b1afe82e4f293d8d480ad4d8435b90894b007201/peppercornenumerator-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db12f25a5ae6cbebc77142d24f566898f03c4c399f4b0f3729e642db7f1add62",
          "md5": "504ee50b2552e6f885785ad8e8719b57",
          "sha256": "620bacff91a219fbee6fc96221b59a64c2bc498a9443f5e91312e307e20f74bd"
        },
        "downloads": -1,
        "filename": "peppercornenumerator-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "504ee50b2552e6f885785ad8e8719b57",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 50350,
        "upload_time": "2021-01-11T12:41:07",
        "upload_time_iso_8601": "2021-01-11T12:41:07.408792Z",
        "url": "https://files.pythonhosted.org/packages/db/12/f25a5ae6cbebc77142d24f566898f03c4c399f4b0f3729e642db7f1add62/peppercornenumerator-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d152bbe23d267f3fd64cdc9a551cd40d31433c3b47a91f57622023867b97d70",
          "md5": "cc663744d46ab62cbf1c548f35b65fae",
          "sha256": "d8a28c82d7a4dbebd6cd179d26a6a46c62ddea498e68d263f307ec3c4f8c54ae"
        },
        "downloads": -1,
        "filename": "peppercornenumerator-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cc663744d46ab62cbf1c548f35b65fae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 50223,
        "upload_time": "2021-01-11T12:41:08",
        "upload_time_iso_8601": "2021-01-11T12:41:08.877562Z",
        "url": "https://files.pythonhosted.org/packages/2d/15/2bbe23d267f3fd64cdc9a551cd40d31433c3b47a91f57622023867b97d70/peppercornenumerator-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84935d76f0761236c4798876b4dffd05871fbc404903cf0cbae661f18a430b13",
          "md5": "c1b3a6d3b607b7312065d357aa7d6c4b",
          "sha256": "4a063ee315399bff82540623ef3076ad91be4c63a7695a9f88ac0b74a270d7d6"
        },
        "downloads": -1,
        "filename": "peppercornenumerator-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1b3a6d3b607b7312065d357aa7d6c4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 50034,
        "upload_time": "2023-02-14T15:23:43",
        "upload_time_iso_8601": "2023-02-14T15:23:43.406917Z",
        "url": "https://files.pythonhosted.org/packages/84/93/5d76f0761236c4798876b4dffd05871fbc404903cf0cbae661f18a430b13/peppercornenumerator-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10682860b0e7cbbedf6c684b2c9abff238948a4a858ea827e400925945ac274b",
          "md5": "0a576d512e7245257e75aad15d79cdb9",
          "sha256": "5a6ad7393763f6d58f5462feab952e251722b56d2ab221c4513532a750a78733"
        },
        "downloads": -1,
        "filename": "peppercornenumerator-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a576d512e7245257e75aad15d79cdb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 48912,
        "upload_time": "2023-02-14T15:23:44",
        "upload_time_iso_8601": "2023-02-14T15:23:44.696807Z",
        "url": "https://files.pythonhosted.org/packages/10/68/2860b0e7cbbedf6c684b2c9abff238948a4a858ea827e400925945ac274b/peppercornenumerator-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84935d76f0761236c4798876b4dffd05871fbc404903cf0cbae661f18a430b13",
        "md5": "c1b3a6d3b607b7312065d357aa7d6c4b",
        "sha256": "4a063ee315399bff82540623ef3076ad91be4c63a7695a9f88ac0b74a270d7d6"
      },
      "downloads": -1,
      "filename": "peppercornenumerator-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c1b3a6d3b607b7312065d357aa7d6c4b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 50034,
      "upload_time": "2023-02-14T15:23:43",
      "upload_time_iso_8601": "2023-02-14T15:23:43.406917Z",
      "url": "https://files.pythonhosted.org/packages/84/93/5d76f0761236c4798876b4dffd05871fbc404903cf0cbae661f18a430b13/peppercornenumerator-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10682860b0e7cbbedf6c684b2c9abff238948a4a858ea827e400925945ac274b",
        "md5": "0a576d512e7245257e75aad15d79cdb9",
        "sha256": "5a6ad7393763f6d58f5462feab952e251722b56d2ab221c4513532a750a78733"
      },
      "downloads": -1,
      "filename": "peppercornenumerator-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0a576d512e7245257e75aad15d79cdb9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 48912,
      "upload_time": "2023-02-14T15:23:44",
      "upload_time_iso_8601": "2023-02-14T15:23:44.696807Z",
      "url": "https://files.pythonhosted.org/packages/10/68/2860b0e7cbbedf6c684b2c9abff238948a4a858ea827e400925945ac274b/peppercornenumerator-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}