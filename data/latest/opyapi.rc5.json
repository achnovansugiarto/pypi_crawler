{
  "info": {
    "author": "Dawid Kraczkowski",
    "author_email": "dawid.kraczkowski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# OpyAPI - JsonSchema and OpenAPI tools for python <br> [![CI](https://github.com/kodemore/opyapi/actions/workflows/main.yaml/badge.svg)](https://github.com/kodemore/opyapi/actions/workflows/main.yaml) [![Release](https://github.com/kodemore/opyapi/actions/workflows/release.yml/badge.svg)](https://github.com/kodemore/opyapi/actions/workflows/release.yml) [![codecov](https://codecov.io/gh/kodemore/opyapi/branch/main/graph/badge.svg?token=KWFTWSKPKJ)](https://codecov.io/gh/kodemore/opyapi) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\nJsonSchema and OpenAPI tools for python.\n\n## Features\n- Validation builder for json schema\n- Custom string formatters support\n- Full JsonSchema draft-7 support\n- Support for JsonReferences, $anchor\n- Dataclass generation from OpenAPI schema\n- Great performance\n\n## Installation\n\nWith pip,\n```shell\npip install opyapi\n```\nor through poetry\n```shell\npoetry add opyapi\n```\n\n# Usage\n\n> It is recommended to get familiar with json-schema if you haven't yet. \n> [Understanding Json Schema](https://json-schema.org/understanding-json-schema/index.html) is a great place to start and learn Json Schema's basics\n## Simple usage\nLibrary can be used to validate data, against defined json-schema like so:\n\n```python\nfrom opyapi import validate\n\nassert validate(\n    {\"name\": \"Test\", \"age\":12}, \n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\n                \"type\": \"string\",\n            },\n            \"age\": {\n              \"type\": \"integer\",  \n            }\n        }\n    }\n)\n```\n\n## Using references\nValidating documents against complex schemas is also possible,\nplease consider the following example with json references:\n\n```python\nfrom opyapi import validate\n\nschema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 2,\n        },\n        \"email\": {\n            \"$ref\": \"#/$defs/email\"\n        }\n    },\n    \"$defs\": {\n        \"email\": {\n            \"type\": \"string\",\n            \"format\": \"email\"\n        }\n    }\n}\n\nvalidate({\"name\": \"Bob\", \"email\": \"bob@test.com\"}, schema)\n```\n\n## Custom string formats support\n\n```python\nfrom opyapi import StringFormat, validate\nimport re\n\ndef my_format_validator(value: str) -> str:\n    if re.match(\"^my-\", value):\n        return value\n    raise ValueError(f\"Could not validate {value}\")\n\nStringFormat[\"my-format\"] = my_format_validator\n\nvalidate(\"my-test\", {\"type\": \"string\", \"format\": \"my-format\"})  # passes\nvalidate(\"test\", {\"type\": \"string\", \"format\": \"my-format\"})  # fails\n```\n\n> In the above example `opyapi.StringFormat` is used to register new custom format,\n> which is recognised during validation.\n\n## Re-using validators\n\nThere are scenarios where same validator should be used multiple times,\nin these scenarios to improve performance it is better to use `build_validator_for` \nwhich returns a validator function for the passed schema:\n\n```python\nfrom opyapi import build_validator_for\n\nmy_validator = build_validator_for({\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 2,\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"format\": \"email\",\n        }\n    },\n})\n\nassert my_validator({\"name\": \"Bob\", \"email\": \"bob@email.com\"})\n```\n\n## Catching errors\n\n`opyapi` provides versatile error package, which is really simple to use. You are only required to define try/except \nblock within you can catch one of the errors defined in the package depending on your scenario.\n\n```python\nfrom opyapi import build_validator_for\nfrom opyapi.errors import ValidationError\n\nmy_validator = build_validator_for({\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 2,\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"format\": \"email\",\n        }\n    },\n})\n\ntry:\n    my_validator({\"name\": \"Bob\", \"email\": \"invalid\"})\nexcept ValidationError as e:\n    print(f\"Validation failed from the reason: {e}\")\n\n```\n\n### Errors structure\n\nThe following graph represents exception used in `opyapi`. \nAll exceptions are part of `opyapi.errors` module.\n\n```\nValueError\n    ┗━ ValidationError\n            ┣━ TypeValidationError\n            ┣━ EnumValidationError\n            ┣━ FormatValidationError\n            ┣━ ItemsValidationError\n            ┃           ┣━ UniqueItemsValidationError\n            ┃           ┣━ AdditionalItemsValidationError\n            ┃           ┣━ MinimumItemsValidationError\n            ┃           ┗━ MaximumItemsValidationError\n            ┣━ MultipleOfValidationError\n            ┣━ ComparisonValidationError\n            ┃           ┣━ EqualityValidationError\n            ┃           ┗━ RangeValidationError\n            ┃                       ┣━ MinimumValidationError\n            ┃                       ┣━ MaximumValidationError\n            ┃                       ┣━ ExclusiveMinimumValidationError\n            ┃                       ┗━ ExclusiveMaximumValidationError\n            ┗━ ObjectValidationError\n                        ┣━ PropertyValidationError\n                        ┃           ┣━ RequiredPropertyValidationError\n                        ┃           ┣━ PropertyValueValidationError\n                        ┃           ┣━ PropertyNameValidationError\n                        ┃           ┗━ AdditionalPropertiesValidationError\n                        ┣━ ObjectSizeValidationError\n                        ┃           ┣━ MinimumPropertiesValidationError\n                        ┃           ┗━ MaximumPropertiesValidationError\n                        ┗━ DependencyValidationError\n```\n\n#### `opyapi.errors.ValidationError`\nGeneric validation error.\n\n#### `opyapi.errors.TypeValidationError`\nRaised when passed type does not conform type defined in the schema.\n\n> Can be triggered by following example schema:\n> ```json\n> {\n>   \"type\": \"integer\"\n> }\n> ```\n\n#### `opyapi.errors.EnumValidationError`\nRaised when value does not conform enum definition.\n\n> Can be triggered by following example schema:\n> ```json\n> {\n>   \"enum\": [\"integer\", \"string\", \"boolean\"]\n> }\n> ```\n\n#### `opyapi.errors.FormatValidationError`\nRaised when value does not conform defined format in string schema.\n\n> Can be triggered by following example schema:\n> ```json\n> {\n>   \"type\": \"string\",\n>   \"format\": \"date-time\"\n> }\n> ```\n\n#### `opyapi.errors.ItemsValidationError`\nGeneric Exception raised when validation of an array fails for some reason.\n\n#### `opyapi.errors.UniqueItemsValidationError`\nRaised when items in an array are expected to be unique but passed value does not conform the requirement. \nThis exception extends generic `opyapi.errors.ItemsValidationError` exception.\n\n> Can be triggered by following example schema:\n> ```json\n> {\n>   \"type\": \"array\",\n>   \"uniqueItems\": true\n> }\n> ```\n\n#### `opyapi.errors.AdditionalItemsValidationError`\nRaised when additional items in an array either does not conform the schema or are not expected.\nThis exception extends generic `opyapi.errors.ItemsValidationError` exception.\n\n> Can be triggered by the following schema:\n> ```json\n> {\n>   \"type\": \"array\",\n>   \"items\": [\n>     {\"type\": \"string\"},\n>     {\"type\":  \"integer\"}        \n>   ],\n>   \"additionalItems\": false\n> }\n> ```\n\n#### `opyapi.errors.MinimumItemsValidationError`, `opyapi.errors.MaximumItemsValidationError`\nRaised when number of items in an array does not conform maximum or minimum items specified in schema.\nThis exception extends generic `opyapi.errors.ItemsValidationError` exception.\n\n> Can be triggered by following example schema:\n> ```json\n> {\n>   \"type\": \"array\",\n>   \"minimumItems\": 2,\n>   \"MaximumItems\": 10\n> }\n> ```\n\n\n#### `opyapi.errors.MultipleOfValidationError`\nRaised when validated number is not multiplication of passed value.\n\n> Can be triggered by following example schema:\n> ```json\n> {\n>   \"type\": \"numerical\",\n>   \"multipleOf\": 2\n> }\n> ```\n\n#### `opyapi.errors.ComparisonValidationError`\nRaised when comparison operation fails. This is a generic exception used by other comparison errors.\n\n#### `opyapi.errors.EqualityValidationError`\nRaised when validated value is not the same as defined expected value. This exception extends `opyapi.errors.ComparisonValidationError`.\n\n> Can be triggered by following example schema:\n> ```json\n> {\n>   \"const\": \"test\"\n> }\n> ```\n\n#### `opyapi.errors.RangeValidationError`\nRaised when (exclusive) minimum, (exclusive) maximum comparisons fail. This exception extends `opyapi.errors.ComparisonValidationError`.\n\n#### `opyapi.errors.MinimumValidationError`, `opyapi.errors.MaximumValidationError`, `opyapi.errors.ExclusiveMinimumValidationError`, `opyapi.errors.ExclusiveMaximumValidationError`\nRaised when passed numerical (or integer) value is not within expected range defined in schema.\n\n> Can be triggered by the following example schema:\n> ```json\n> {\n>   \"type\": \"numerical\",\n>   \"minimum\": 2\n> }\n> ```\n\n\n#### `opyapi.errors.ObjectValidationError`\nGeneric exception raised when validation of an object fails for some reason.\n\n#### `opyapi.errors.PropertyValidationError`\nGeneric exception raised when validation of object's property fails for some reason. \nThis exception extends `opyapi.errors.ObjectValidationError` exception.\n\n#### `opyapi.errors.RequiredPropertyValidationError`\nRaised when required property is not present in passed object.\nThis exception extends `opyapi.errors.PropertyValidationError` exception.\n\n> Can be triggered by the following example schema:\n> ```json\n> {\n>   \"type\": \"object\",\n>   \"properties\": {\n>     \"name\" : {\"type\": \"string\"}\n>   },\n>   \"required\": [\"name\"]\n> }\n> ```\n\n#### `opyapi.errors.PropertyValueValidationError`\nRaised when property contains invalid value. \nThis exception extends `opyapi.errors.PropertyValidationError` exception.\n\n> Can be triggered by the following example schema:\n> ```json\n> {\n>   \"type\": \"object\",\n>   \"properties\": {\n>     \"name\" : {\"type\": \"string\"}\n>   }\n> }\n> ```\n\n#### `opyapi.errors.PropertyNameValidationError`\nRaised when property's names does not conform defined schema. \nThis exception extends `opyapi.errors.PropertyValidationError` exception.\n\n> Can be triggered by the following example schema:\n> ```json\n> {\n>   \"type\": \"object\",\n>   \"properties\": {\n>     \"name\" : {\"type\": \"string\"}\n>   },\n>   \"propertyNames\": {\n>     \"pattern\": \"^x-\" \n>   }\n> }\n> ```\n\n#### `opyapi.errors.AdditionalPropertiesValidationError`\nRaised when additional properties are not allowed or set schema is not followed. \nThis exception extends `opyapi.errors.PropertyValidationError` exception.\n\n> Can be triggered by the following example schema:\n> ```json\n> {\n>   \"type\": \"object\",\n>   \"properties\": {\n>     \"name\" : {\"type\": \"string\"}\n>   },\n>   \"additionalProperties\": false\n> }\n> ```\n\n#### `opyapi.errors.ObjectSizeValidationError`\nGeneric exception raised when number of properties does not conform defined schema. \nThis exception extends `opyapi.errors.ObjectValidationError` exception.\n\n#### `opyapi.errors.MinimumPropertiesValidationError`, `opyapi.errors.MaximumPropertiesValidationError`\nGeneric exception raised when number of properties does not conform defined schema. \nThese exceptions extend `opyapi.errors.ObjectSizeValidationError`exception.\n\n> Can be triggered by the following example schema:\n> ```json\n> {\n>   \"type\": \"object\",\n>   \"properties\": {\n>     \"name\" : {\"type\": \"string\"}\n>   },\n>   \"minProperties\": 2,\n>   \"maxProperties\": 10\n> }\n> ```\n\n#### `opyapi.errors.DependencyValidationError`\n\nRaised when dependent properties are defined in the schema but not provided in a passed object. \nThis exception extends `opyapi.errors.ObjectValidationError` exception.\n\n> Can be triggered by the following example schema:\n> ```json\n> {\n>   \"type\": \"object\",\n>   \"properties\": {\n>     \"name\" : {\"type\": \"string\"}\n>   },\n>   \"dependentRequired\": {\n>     \"name\": [\"first_name\", \"last_name\"]\n>   }\n> }\n> ```\n\n## API\n\n### `validate(obj: typing.Any, schema: typing.Union[dict, opyapi.JsonSchema]): typing.Any`\n\nValidates passed object `obj`, and if valid returns the object, otherwise raises a `ValueError` exception.\n\n```python\nfrom opyapi import validate\n\nassert validate(\n    {\"name\": \"Test\", \"age\":12}, \n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\n                \"type\": \"string\",\n            },\n            \"age\": {\n              \"type\": \"integer\",  \n            }\n        }\n    }\n)\n```\n\n### `build_validator_for(schema: typing.Union[dict, JsonSchema]) -> Callable`\n\nCreates validator function for passed json schema and returns it as a result.\n\n```python\nfrom opyapi import build_validator_for\n\nvalidator =  build_validator_for({\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n        },\n        \"age\": {\n          \"type\": \"integer\",  \n        }\n    }\n})\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kodemore/opyapi",
    "keywords": "JsonSchema,OpenAPI,validation,json,schema,rest,api",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opyapi",
    "package_url": "https://pypi.org/project/opyapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/opyapi/",
    "project_urls": {
      "Documentation": "https://github.com/kodemore/opyapi",
      "Homepage": "https://github.com/kodemore/opyapi",
      "Repository": "https://github.com/kodemore/opyapi"
    },
    "release_url": "https://pypi.org/project/opyapi/1.3.2/",
    "requires_dist": [
      "pyyaml (>=5.4.1,<6.0.0)",
      "cleo (>=2.0.1,<3.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "JsonSchem and OpenAPI tools for python.",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16682221,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fac199dae0aef4efebd9cb74be56220c2c60381c452e978512a894845c027b66",
          "md5": "1b3ecc16f730f1e021dfd9f856d54997",
          "sha256": "670b7f37abdddabca363e49c864a3ed50580b54a06b72a27bbed84222cb115de"
        },
        "downloads": -1,
        "filename": "opyapi-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1b3ecc16f730f1e021dfd9f856d54997",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 24084,
        "upload_time": "2021-08-14T15:39:46",
        "upload_time_iso_8601": "2021-08-14T15:39:46.971890Z",
        "url": "https://files.pythonhosted.org/packages/fa/c1/99dae0aef4efebd9cb74be56220c2c60381c452e978512a894845c027b66/opyapi-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30548e6ebd65406c7c3a1e355acc28b1e6b4d330d2bb9ee269bb1dc6f1fe3c2e",
          "md5": "d67a7d9187775443be064b250e5969bd",
          "sha256": "8c4ed3810cc6c1c23455c6f3ae251e420c4b4425a1f5e6f1fcab6f7ad221c657"
        },
        "downloads": -1,
        "filename": "opyapi-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d67a7d9187775443be064b250e5969bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 23337,
        "upload_time": "2021-11-10T22:35:37",
        "upload_time_iso_8601": "2021-11-10T22:35:37.595151Z",
        "url": "https://files.pythonhosted.org/packages/30/54/8e6ebd65406c7c3a1e355acc28b1e6b4d330d2bb9ee269bb1dc6f1fe3c2e/opyapi-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15793f64d24a5a3519c8e85cd7d81a3cfe5ef03c4ac0bb221d7deaa93791799f",
          "md5": "d8929ce04ea389c06093530486f82259",
          "sha256": "064c6c7c020b2017a70832fc7a1d2a8a14a322f271dd2cf66ee3bd5e019ac43a"
        },
        "downloads": -1,
        "filename": "opyapi-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8929ce04ea389c06093530486f82259",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 23389,
        "upload_time": "2021-11-11T06:36:12",
        "upload_time_iso_8601": "2021-11-11T06:36:12.014323Z",
        "url": "https://files.pythonhosted.org/packages/15/79/3f64d24a5a3519c8e85cd7d81a3cfe5ef03c4ac0bb221d7deaa93791799f/opyapi-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8703d46d80041676f63e5a172500fa5b0a0f489a3b4ab3d426ebc3ab9d75a97f",
          "md5": "7e9ed2ac3869e4de9be6e664cb75c35e",
          "sha256": "c8bd5d3fbd7786b47bf4dbd6d98d3335ea89485416bae6c5e555f3f8a104441a"
        },
        "downloads": -1,
        "filename": "opyapi-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7e9ed2ac3869e4de9be6e664cb75c35e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 23408,
        "upload_time": "2022-10-31T15:36:05",
        "upload_time_iso_8601": "2022-10-31T15:36:05.574541Z",
        "url": "https://files.pythonhosted.org/packages/87/03/d46d80041676f63e5a172500fa5b0a0f489a3b4ab3d426ebc3ab9d75a97f/opyapi-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7718bf5772c32c6627432d9c896c4a4627067b6eb478caa43de539fc3e499b5",
          "md5": "aad2c6acc62db11674e61865506c72df",
          "sha256": "46360970b6ee2b17674e75b90de4c96e58b58e48d6fae1455a3ecddf02421072"
        },
        "downloads": -1,
        "filename": "opyapi-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "aad2c6acc62db11674e61865506c72df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 23545,
        "upload_time": "2023-02-03T14:11:23",
        "upload_time_iso_8601": "2023-02-03T14:11:23.550103Z",
        "url": "https://files.pythonhosted.org/packages/d7/71/8bf5772c32c6627432d9c896c4a4627067b6eb478caa43de539fc3e499b5/opyapi-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7718bf5772c32c6627432d9c896c4a4627067b6eb478caa43de539fc3e499b5",
        "md5": "aad2c6acc62db11674e61865506c72df",
        "sha256": "46360970b6ee2b17674e75b90de4c96e58b58e48d6fae1455a3ecddf02421072"
      },
      "downloads": -1,
      "filename": "opyapi-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "aad2c6acc62db11674e61865506c72df",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 23545,
      "upload_time": "2023-02-03T14:11:23",
      "upload_time_iso_8601": "2023-02-03T14:11:23.550103Z",
      "url": "https://files.pythonhosted.org/packages/d7/71/8bf5772c32c6627432d9c896c4a4627067b6eb478caa43de539fc3e499b5/opyapi-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}