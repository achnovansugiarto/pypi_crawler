{
  "info": {
    "author": "cml",
    "author_email": "caimengli0660@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# [Yz-id](https://github.com/ml444/yz-id)\n--------------\n\n## Introduction\nAn ID generator for distributed microservices.\n一个分布式ID生成器框架，适用于微服务领域的全局ID生成。基于snowflake的设计理念，\n设计出这个可自行根据需要重新分配了各部分的bit位的ID生成器框架。\n\n在分布式系统中，整体的业务被拆分成多个自治的微服务，每个微服务之间需要通过网络进行通信和交互，\n由于网络的不确定性，会给系统带来各种各样的不一致问题，为了避免和解决不一致问题，\n最重要的模式是做系统之间的实时核对和事后核对，核对的基础就是领域对象及系统间的请求需要有唯一ID来标识。\n\n在源码的`extras`中已经举例出三种ID组合方式方案。\n- 【Snowflake】:\n\n    | 版本 | 毫秒级时间 | 机器ID | 序列号 |\n    | --- | --------- | ----- | ----- |\n    | 63  | 62-22     | 21-12 | 11-0  |\n\n- 【Sonyflake】:\n\n    | 版本 | 10毫秒级时间 | 序列号 | 机器ID |\n    | --- | ----------  | ----- | ----- |\n    | 63  | 62-24       | 23-16 | 15-0  |\n\n- 【Anonymous】:\n    - 【最大峰值】：\n\n        | 版本 | 类型 | 生成方式 | 秒级时间 | 序列号 | 机器ID |\n        | --- | ---- | ------ | ------- | ------ |-------|\n        | 63  | 62   | 60-61  | 59-30   | 29-10 | 0-9   |\n\n    - 【最小粒度】：\n\n        | 版本 | 类型 | 生成方式 | 毫秒级时间 | 序列号 | 机器ID |\n        | --- | ---- | ------ | --------- | ------|-------|\n        | 63   | 62  | 60-61  | 59-20     | 19-10 | 0-9   |\n\n    生成方式：(嵌入式，restful，中心分发）\n    `anonymous`适用于一些杂糅的架构场景，可以应对各种情景下的ID生成方式。\n\n## Quick start\n\n**安装模块**\n```shell\n$ pip install yzid\n```\n如果上面的三种方案适用你需要的场景，可以直接使用：\n```python\n# Anonymous:\nfrom yzid import get_id_service\ntime_epoch = 1610351662\nidsvc1 = get_id_service(time_epoch=time_epoch, machine_code=1)\nid1 = idsvc1.generate_id()\n\n# Snowflake\nfrom yzid import get_snowflake_service\ntime_epoch = 1610351662 * 1000\nidsvc2 = get_snowflake_service(time_epoch=time_epoch, machine_code=1)\nid2 = idsvc2.generate_id()\n\n# Sonyflake\nfrom yzid import get_sonyflake_service\ntime_epoch = 1610351662*100\nidsvc3 = get_sonyflake_service(time_epoch=time_epoch, machine_code=1)\nid3 = idsvc3.generate_id()\n```\n\n如果没有合适的，可以自定义组合方案。\n自定义组合ID组成示例：\n```python\nfrom yzid.core.service import IdService\n\n\ndef get_id_service(\n        time_epoch: int,\n        machine_code: int,\n        generate_method: int = 2,\n        mode_type: int = 1,\n        version: int = 0,\n):\n    \"\"\"\n\n    :param time_epoch:      时间起点\n    :param machine_code:    机器序号\n    :param generate_method: (嵌入式，restful，中心分发）\n    :param mode_type:       (最大峰值，最小粒度)\n    :param version:\n    :return:\n    \"\"\"\n    _type = {\n        \"max_peak\": [\n            (\"machine\",     (10, machine_code)),  # (<name>: (<bit_count>, <default_value>))\n            (\"sequence\",    20),                  # (<name>: (<bit_count>, 0))\n            (\"duration\",    30),\n            (\"method\",      (2, generate_method)),\n            (\"type\",        (1, 1)),\n            (\"version\",     (1, version)),\n        ],\n        \"min_granularity\": [\n            (\"machine\",     (10, machine_code)),\n            (\"sequence\",    10),\n            (\"duration\",    40),\n            (\"method\",      (2, generate_method)),\n            (\"type\",        (1, 0)),\n            (\"version\",     (1, version)),\n        ]\n    }\n    structure = _type.get(\"max_peak\") if mode_type == 1 else _type.get(\"min_granularity\")\n\n    return IdService(\n        structure=structure,\n        time_epoch=time_epoch,\n        time_unit=1 if mode_type == 1 else 10**3,  # 秒级和毫秒级的选择\n        time_name=\"duration\",\n        sequence_name=\"sequence\"\n    )\n```\n`structure`参数必须是有序的可迭代对象，在设计组合时，低位在前，高位在后；\n命名字段的值可以是`Tuple[int, int]`或`int`，只有单个int时，即只指定该组成部分占用的位数，默认值为0。\n\n`structure`里的所有组成部分的位数总和必须为64，否则报异常错误。\n\n在ID的组成部分中，有两个部分是必不可少的————`时间`和`序列号`，所以无论在`structure`中的命名组合是什么，\n都必须在实例化时指明它们的名称：\n```python\ntime_name=\"duration\",\nsequence_name=\"sequence\"\n```\n这样的`yzid`才知道需要对哪个部分进行时间操作和累加操作。\n\n`time_unit`是时间单位，为了告诉`yzid`是使用秒级、百毫秒级、十毫秒级、毫秒级、还是微秒级的；\n`time_unit`必须是底数为10的指数值：\n- 秒级 = 10**0 或 1\n- 百毫秒级 = 10**1 或 10\n- 十毫秒级 = 10**2 或 100\n- 毫秒级 = 10**3 或 1000\n- 微秒级 = 10**6 或 1000000\n\n`time_epoch`是起始时间戳，是一个重要的参数，而且需要警惕。一旦启用，不可变更。否则可能会造成ID重复。\n\n## Documentation\n\n[暂无](https://github.com/ml444/yz-id/README.md).\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ml444/yz-id.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yzid",
    "package_url": "https://pypi.org/project/yzid/",
    "platform": "",
    "project_url": "https://pypi.org/project/yzid/",
    "project_urls": {
      "Homepage": "https://github.com/ml444/yz-id.git"
    },
    "release_url": "https://pypi.org/project/yzid/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "An ID generator for distributed microservices.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10185141,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c961e6a1333746b882e56a2163ef69c51c9b845b7c5a1235358c1ced983a98aa",
          "md5": "dc0f3048c64acd8812c838232c1f2f12",
          "sha256": "9ce0dddd7f6b506d7d24b3a8a371969477a9649107dcdb59ba78a6e55f2e9c68"
        },
        "downloads": -1,
        "filename": "yzid-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc0f3048c64acd8812c838232c1f2f12",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17834,
        "upload_time": "2021-04-27T13:45:04",
        "upload_time_iso_8601": "2021-04-27T13:45:04.937903Z",
        "url": "https://files.pythonhosted.org/packages/c9/61/e6a1333746b882e56a2163ef69c51c9b845b7c5a1235358c1ced983a98aa/yzid-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c961e6a1333746b882e56a2163ef69c51c9b845b7c5a1235358c1ced983a98aa",
        "md5": "dc0f3048c64acd8812c838232c1f2f12",
        "sha256": "9ce0dddd7f6b506d7d24b3a8a371969477a9649107dcdb59ba78a6e55f2e9c68"
      },
      "downloads": -1,
      "filename": "yzid-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dc0f3048c64acd8812c838232c1f2f12",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17834,
      "upload_time": "2021-04-27T13:45:04",
      "upload_time_iso_8601": "2021-04-27T13:45:04.937903Z",
      "url": "https://files.pythonhosted.org/packages/c9/61/e6a1333746b882e56a2163ef69c51c9b845b7c5a1235358c1ced983a98aa/yzid-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}