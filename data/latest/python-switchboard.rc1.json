{
  "info": {
    "author": "Juho Enala",
    "author_email": "juho.enala@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Switchboard for Python\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nSwitchboard makes working with API's easy. Switchboard helps you can easily convert JSON schemas. Switchboard is still work on progress, but you are more than welcome to check it out!\n\n## But why Switchboard?\n\nWhen working with integrations and 3rd party API's, for instance, you often run into situation where the data must be digged manually. Let us consider that you have the following kind of simple database schema:\n\n```\n Column        | Type\n---------------+-------\n first_name    | string\n last_name     | string\n email         | string\n\n```\n\nYou are working with 3rd party user API, for instance, which returns the following kind of payload:\n\n```json\n{\n    \"id\": 12335,\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"contactInfo\": {\n        \"primaryEmail\": \"john.doe@foo.bar\"\n    }\n}\n```\n\nSo, what to do now? What is the best way to convert payload into your own format? Does this look familiar:\n\n```py\nresponse_dict = json.loads(response.body)\n\ndata = {\n    \"first_name\": response_dict.get(\"firstName\"),\n    \"last_name\": response_dict.get(\"lastName\"),\n    \"email\": response_dict.get(\"contactInfo\", {}).get(\"primaryEmail\")\n}\n```\n\nUnfortunately, the solution above becomes extremely messy when working with nested JSON structures, multiple 3rd party API's, or combination of them. This is why Switchboard is useful, by defining a new switchboard, you can easily manage data mappings between differen schemas.\n\n```py\nfrom switchboard import Switchboard, Wire\n\nclass UserSwitchboard(Switchboard):\n    first_name = Wire(\"firstName\")\n    last_name = Wire(\"lastName\")\n    email = Wire([\"contactInfo\", \"primaryEmail\"])  # Notice how simple it is to access nested data!\n```\n\nNow, the code looks much better. Nice!\n\n```py\nresponse_dict = json.loads(response.body)\ndata = UserSwitchboard().apply(response_dict)\n```\n\n## Documentation\n\n_This project is still in progress. Better documentation is coming later._\n\nDefining new Switchboards is easy. All you need to do is to import it, and define some chords.\n\n```py\nfrom switchboard import Switchboard, Cord\n\nclass MySwitchboard(Switchboard):\n    pet_name = Cord(\n        source=\"petName\",  # Source tells field location in source schema\n        required=True,     # If field is required and missing, exception is raised\n        default=\"Mr. Dog\"  # If field is missing, default value is being used\n    )\n```\n\n### Meta class\n\nSwitchboard functionality can be tweaked using Meta class:\n\n```py\nfrom switchboard import Switchboard, Cord\n\nclass MySwitchboard(Switchboard):\n    class Meta:\n        # Tells what to do with missing fields. Default functionlity is INCLUDE,\n        # which means that if source field is missing, field is appended but the field\n        # value will be None\n        missing = Switchboard.EXCLUDE  # Options: Switchboard.EXCLUDE | Switchboard.INCLUDE | Switchboard.RAISE\n\n    pet_name = Cord(\"petName\")\n```\n\n### Nested schemas\n\nCords can access nested fields, even lists.\n\n```py\nfrom switchboard import Switchboard, Cord\n\nclass MySwitchboard(Switchboard):\n    target_field = Cord(\n        source=[\n            \"field1\",  # Matches to field key\n            0,         # Matches to list index\n            \"field2\"   # Matches to field key\n        ]\n    )\n\nMySwitchboard().apply({ \"field1\": [{ \"field2\": \"value\" }] })\n# > { \"target_field\": \"value\" }\n```\n\n### Lists\n\nSwitchboard `many` attribute helps with dealing with lists. For example:\n\n```py\nclass MySwitchboard(Switchboard):\n    target = Cord(\"source\")\n\n\ndata_in = [\n    {\"source\": 1},\n    {\"source\": 2},\n    {\"source\": 3},\n    {\"source\": 4}\n]\n\nMySwitchboard(many=True).apply(data_in)\n# > { \"target\": 1, \"target\": 2, \"target\": 3, \"target\": 4 }\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/juhoen/Switchboard",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-switchboard",
    "package_url": "https://pypi.org/project/python-switchboard/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-switchboard/",
    "project_urls": {
      "Homepage": "https://github.com/juhoen/Switchboard"
    },
    "release_url": "https://pypi.org/project/python-switchboard/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A lightweight package for converting JSON schemas",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7869694,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48f85557ea1bdaaaaf1252b0e62fe5d4a1d2cf6e8fd50964a46a6debbe96375c",
          "md5": "73a309b1c571d860e6981ff9379b3b55",
          "sha256": "bfb608281cfacc29be4af39d57cc74d9fbb09896e59ecb8c89728a2ef6a3170f"
        },
        "downloads": -1,
        "filename": "python_switchboard-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73a309b1c571d860e6981ff9379b3b55",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7096,
        "upload_time": "2020-08-03T05:21:35",
        "upload_time_iso_8601": "2020-08-03T05:21:35.865922Z",
        "url": "https://files.pythonhosted.org/packages/48/f8/5557ea1bdaaaaf1252b0e62fe5d4a1d2cf6e8fd50964a46a6debbe96375c/python_switchboard-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48f85557ea1bdaaaaf1252b0e62fe5d4a1d2cf6e8fd50964a46a6debbe96375c",
        "md5": "73a309b1c571d860e6981ff9379b3b55",
        "sha256": "bfb608281cfacc29be4af39d57cc74d9fbb09896e59ecb8c89728a2ef6a3170f"
      },
      "downloads": -1,
      "filename": "python_switchboard-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73a309b1c571d860e6981ff9379b3b55",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7096,
      "upload_time": "2020-08-03T05:21:35",
      "upload_time_iso_8601": "2020-08-03T05:21:35.865922Z",
      "url": "https://files.pythonhosted.org/packages/48/f8/5557ea1bdaaaaf1252b0e62fe5d4a1d2cf6e8fd50964a46a6debbe96375c/python_switchboard-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}