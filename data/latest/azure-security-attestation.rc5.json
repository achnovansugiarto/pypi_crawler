{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "azpysdkhelp@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Azure Attestation client library for Python\n\nThe Microsoft Azure Attestation (MAA) service is a unified solution for remotely verifying the trustworthiness of a platform and integrity of the binaries running inside it. The service supports attestation of the platforms backed by Trusted Platform Modules (TPMs) alongside the ability to attest to the state of Trusted Execution Environments (TEEs) such as Intel(tm) Software Guard Extensions (SGX) enclaves and Virtualization-based Security (VBS) enclaves.\n\nAttestation is a process for demonstrating that software binaries were properly instantiated on a trusted platform. Remote relying parties can then gain confidence that only such intended software is running on trusted hardware. Azure Attestation is a unified customer-facing service and framework for attestation.\n\nAzure Attestation enables cutting-edge security paradigms such as Azure Confidential computing and Intelligent Edge protection. Customers have been requesting the ability to independently verify the location of a machine, the posture of a virtual machine (VM) on that machine, and the environment within which enclaves are running on that VM. Azure Attestation will empower these and many additional customer requests.\n\nAzure Attestation receives evidence from compute entities, turns them into a set of claims, validates them against configurable policies, and produces cryptographic proofs for claims-based applications (for example, relying parties and auditing authorities).\n\nThis package has been tested with Python 2.7, 3.6 to 3.9.\n\nFor a more complete view of Azure libraries, see the [Azure SDK for Python release page](https://aka.ms/azsdk/python/all).\n\n[Source code][source_code] | [Package (PyPI)][Attestation_pypi] | [API reference documentation][API_reference] | [Product documentation](https://docs.microsoft.com/azure/attestation/)\n\n## Getting started\n\n### Prerequisites\n\n* An Azure subscription.  To use Azure services, including the Azure Attestation service, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial][azure_sub] or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://account.windowsazure.com/Home/Index).\n* An existing Azure Attestation Instance, or you can use the \"shared provider\" available in each Azure region. If you need to create an Azure Attestation service instance, you can use the Azure Portal or [Azure CLI][azure_cli].\n\n### Install the package\n\nInstall the Azure Attestation client library for Python with [PyPI][Attestation_pypi]:\n\n```Powershell\npip install azure-security-attestation\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Attestation service, you'll need to create an instance of the [Attestation Client][attestation_client] or [Attestation Administration Client][attestation_admin_client] class. You need an **attestation endpoint**, which you may see as \"Attest URI\" in the portal,\nand **client credentials (client id, client secret, tenant id)** to instantiate a client object.\n\n[Client secret credential][ClientSecretCredential] authentication is being used in this getting started section but you can find more ways to authenticate with the [Azure identity package][azure_identity]. To use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below,\nor other credential providers provided with the Azure SDK, you should install the azure-identity package:\n\n```Powershell\npip install azure-identity\n```\n\n#### Create/Get credentials\n\nUse the [Azure CLI][azure_cli] snippet below to create/get client secret credentials.\n\n* Create a service principal and configure its access to Azure resources:\n\n    ```Powershell\n    az ad sp create-for-rbac -n <your-application-name> --skip-assignment\n    ```\n\n    Output:\n\n    ```json\n    {\n        \"appId\": \"generated-app-ID\",\n        \"displayName\": \"dummy-app-name\",\n        \"name\": \"http://dummy-app-name\",\n        \"password\": \"random-password\",\n        \"tenant\": \"tenant-ID\"\n    }\n    ```\n\n* Take note of the service principal objectId\n\n    ```Powershell\n    az ad sp show --id <appId> --query objectId\n    ```\n\n    Output:\n\n    ```Powershell\n    \"<your-service-principal-object-id>\"\n    ```\n\n* Use the returned credentials above to set  **AZURE_CLIENT_ID** (appId), **AZURE_CLIENT_SECRET** (password), and **AZURE_TENANT_ID** (tenant) environment variables. The following example shows a way to do this in Powershell:\n\n    ```Powershell\n    $Env:AZURE_CLIENT_ID=\"generated-app-ID\"\n    $Env:AZURE_CLIENT_SECRET=\"random-password\"\n    $Env:AZURE_TENANT_ID=\"tenant-ID\"\n    ```\n\nFor more information about the Azure Identity APIs and how to use them, see [Azure Identity client library](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity)\n\n## Key concepts\n\nThere are four major families of functionality provided in this preview SDK:\n\n* [SGX and TPM enclave attestation.](#attestation)\n* [MAA Attestation Token signing certificate discovery and validation.](#attestation-token-signing-certificate-discovery-and-validation)\n* [Attestation Policy management.](#policy-management)\n* [Attestation policy management certificate management](#policy-management-certificate-management) (yes, policy management management).\n\nThe Microsoft Azure Attestation service runs in two separate modes: \"Isolated\" and \"AAD\". When the service is running in \"Isolated\" mode, the customer needs to\nprovide additional information beyond their authentication credentials to verify that they are authorized to modify the state of an attestation instance.\n\nFinally, each region in which the Azure Attestation service is available supports a \"shared\" instance, which\ncan be used to attest SGX enclaves which only need verification against the azure baseline (there are no policies applied to the shared instance). TPM attestation is not available in the shared instance.\nWhile the shared instance requires AAD authentication, it does not have any RBAC policies - any customer with a valid AAD bearer token can attest using the shared instance.\n\n### Attestation\n\nSGX or TPM attestation is the process of validating evidence collected from\na trusted execution environment to ensure that it meets both the Azure baseline for that environment and customer defined policies applied to that environment.\n\n### Attestation service token signing certificate discovery and validation\n\nOne of the core operational guarantees of the Azure Attestation Service is that the service operates \"operationally out of the TCB\". In other words, there is no way that a Microsoft operator could tamper with the operation of the service, or corrupt data sent from the client. To ensure this guarantee, the core of the attestation service runs in an Intel(tm) SGX enclave.\n\nTo allow customers to verify that operations were actually performed inside the enclave, most responses from the Attestation Service are encoded in a [JSON Web Token][json_web_token], which is signed by a key held within the attestation service's enclave.\n\nThis token will be signed by a signing certificate issued by the MAA service for the specified instance.\n\nIf the MAA service instance is running in a region where the service runs in an SGX enclave, then\nthe certificate issued by the server can be verified using the [oe_verify_attestation_certificate API](https://openenclave.github.io/openenclave/api/enclave_8h_a3b75c5638360adca181a0d945b45ad86.html).\n\n### Policy Management\n\nEach attestation service instance has a policy applied to it which defines additional criteria which the customer has defined.\n\nFor more information on attestation policies, see [Attestation Policy](https://docs.microsoft.com/azure/attestation/author-sign-policy)\n\n### Policy Management certificate management\n\nWhen an attestation instance is running in \"Isolated\" mode, the customer who created the instance will have provided\na policy management certificate at the time the instance is created. All policy modification operations require that the customer sign\nthe policy data with one of the existing policy management certificates. The Policy Management Certificate Management APIs enable\nclients to \"roll\" the policy management certificates.\n\n### Isolated Mode and AAD Mode\n\nEach Microsoft Azure Attestation service instance operates in either \"AAD\" mode or \"Isolated\" mode. When an MAA instance is operating in AAD mode, it means that the customer which created the attestation instance allows Azure Active Directory and Azure Role Based Access control policies to verify access to the attestation instance.\n\n### *AttestationType*\n\nThe Azure Attestation service supports attesting different types of evidence depending on the environment.\nCurrently, MAA supports the following Trusted Execution environments:\n\n* OpenEnclave - An Intel(tm) Processor running code in an SGX Enclave where the attestation evidence was collected using the OpenEnclave [oe_get_report](https://openenclave.io/apidocs/v0.14/enclave_8h_aefcb89c91a9078d595e255bd7901ac71.html#aefcb89c91a9078d595e255bd7901ac71) or [oe_get_evidence](https://openenclave.io/apidocs/v0.14/attester_8h_a7d197e42468636e95a6ab97b8e74c451.html#a7d197e42468636e95a6ab97b8e74c451) API.\n* SgxEnclave - An Intel(tm) Processor running code in an SGX Enclave where the attestation evidence was collected using the Intel SGX SDK.\n* Tpm - A Virtualization Based Security environment where the Trusted Platform Module of the processor is used to provide the attestation evidence.\n\n### Runtime Data and Inittime Data\n\nRuntimeData refers to data which is presented to the Intel SGX Quote generation logic or the `oe_get_report`/`oe_get_evidence` APIs. If the caller to the attest API provided a `runtime_data` attribute, The Azure Attestation service will validate that the first 32 bytes of the `report_data` field in the SGX Quote/OE Report/OE Evidence matches the SHA256 hash of the `runtime_data`.\n\nInitTime data refers to data which is used to configure the SGX enclave being attested.\n\n> Note that InitTime data is not supported on Azure [DCsv2-Series](https://docs.microsoft.com/azure/virtual-machines/dcv2-series) virtual machines.\n\n### Additional concepts\n\n## Examples\n\n* [Create an attestation client instance](#create-client-instance)\n* [Attest an SGX enclave](#attest-sgx-enclave)\n* [Get attestation policy](#get-attestation-policy)\n* [Retrieve token validation certificates](#retrieve-token-certificates)\n* [Create an attestation client instance](#create-client-instance)\n\n### Create client instance\n\nCreates an instance of the Attestation Client at uri `endpoint`.\n\n```python\nattest_client = AttestationClient(\n    endpoint=base_uri,\n    credential=DefaultAzureCredential())\n```\n\n### Get attestation policy\n\nThe `set_policy` method retrieves the attestation policy from the service.\nAttestation Policies are instanced on a per-attestation type basis, the `AttestationType` parameter defines the type to retrieve.\n\n```python\npolicy, token = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\nprint('Instance SGX policy: ', policy)\nprint('Token: ', token)\n```\n\n### Set an attestation policy for a specified attestation type\n\nIf the attestation service instance is running in Isolated mode, the set_policy API needs to provide a signing certificate (and private key) which can be used to validate that the caller is authorized to modify policy on the attestation instance. If the service instance is running in AAD mode, then the signing certificate and key are optional.\n\nUnder the covers, the SetPolicy APIs create a [JSON Web Token][json_web_token] based on the policy document and signing information which is sent to the attestation service.\n\n```python\npolicy_set_response = attest_client.set_policy(AttestationType.SGX_ENCLAVE,\n    attestation_policy,\n    signing_key=key,\n    signing_certificate=signing_certificate)\nnew_policy, _ = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\n# `new_policy` will equal `attestation_policy`.\n```\n\nIf the service instance is running in AAD mode, the call to set_policy can be\nsimplified:\n\n```python\npolicy_set_response = attest_client.set_policy(AttestationType.SGX_ENCLAVE,            \n    attestation_policy)\n# Now retrieve the policy which was just set.\nnew_policy, _ = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\n\n```\n\nClients need to be able to verify that the attestation policy document was not modified before the policy document was received by the attestation service's enclave.\n\nThere are two properties provided in the [PolicyResult][attestation_policy_result] that can be used to verify that the service received the policy document:\n\n* [policy_signer][attestation_policy_result_parameters] - if the `set_policy` call included a signing certificate, this will be the certificate provided at the time of the `set_policy` call. If no policy signer was set, this will be null.\n* [policy_token_hash][attestation_policy_result_parameters] - this is the hash of the [JSON Web Token][json_web_token] sent to the service.\n\nTo verify the hash, clients can generate an attestation policy token and verify the hash generated from that token:\n\n```python\nfrom cryptography.hazmat.primitives import hashes\n\nexpected_policy = AttestationPolicyToken(\n    attestation_policy,\n    signing_key=key,\n    signing_certificate=signing_certificate)\nhasher = hashes.Hash(hashes.SHA256())\nhasher.update(expected_policy.serialize().encode('utf-8'))\nexpected_hash = hasher.finalize()\n\n# `expected_hash` will exactly match `policy_set_response.policy_token_hash`\n```\n\n### Attest SGX Enclave\n\nUse the [attest_sgx_enclave][attest_sgx] method to attest an SGX enclave.\n\nOne of the core challenges customers have interacting with encrypted environments is how to ensure that you can securely communicate with the code running in the environment (\"enclave code\").\n\nOne solution to this problem is what is known as \"Secure Key Release\", which is a pattern that enables secure communication with enclave code.\n\nTo implement the \"Secure Key Release\" pattern, the enclave code generates an ephemeral asymmetric key. It then serializes the public portion of the key to some format (possibly a JSON Web Key, or PEM, or some other serialization format).\n\nThe enclave code then calculates the SHA256 value of the public key and passes it as an input to code which generates an SGX Quote (for OpenEnclave, that would be the [oe_get_evidence](https://openenclave.io/apidocs/v0.14/attester_8h_a7d197e42468636e95a6ab97b8e74c451.html#a7d197e42468636e95a6ab97b8e74c451) or  [oe_get_report](https://openenclave.io/apidocs/v0.14/enclave_8h_aefcb89c91a9078d595e255bd7901ac71.html#aefcb89c91a9078d595e255bd7901ac71)).\n\nThe client then sends the SGX quote and the serialized key to the attestation service. The attestation service will validate the quote and ensure that the hash of the key is present in the quote and will issue an \"Attestation Token\".\n\nThe client can then send that Attestation Token (which contains the serialized key) to a 3rd party \"relying party\". The relying party then validates that the attestation token was created by the attestation service, and thus the serialized key can be used to encrypt some data held by the \"relying party\" to send to the service.\n\nThis example shows one common pattern of calling into the attestation service to retrieve an attestation token associated with a request.\n\nThis example assumes that you have an existing `AttestationClient` object which is configured with the base URI for your endpoint. It also assumes that you have an SGX Quote (`quote`) generated from within the SGX enclave you are attesting, and \"Runtime Data\" (`runtime_data`) which is referenced in the SGX Quote.\n\n```python\nresponse, token = attest_client.attest_sgx_enclave(quote, runtime_data=runtime_data)\n```\n\nAt this point, the enclave_held_data attribute in the attestationResult\nwill hold the input binary runtime_data.\n\nThe token is now passed to the \"relying party\". The relying party will\nvalidate that the token was issued by the Attestation Service. It then\nextracts the asymmetric key from the EnclaveHeldData field. The relying\nparty will then Encrypt its \"key\" data using the asymmetric key and\ntransmits it back to the enclave.\n\n```python\nencrypted_data = send_token_to_relying_party(attestationResult.Token)\n```\n\nNow the encrypted data can be passed into the enclave which can decrypt that data.\n\nAdditional information on how to perform attestation token validation can be found in the [MAA Service Attestation Sample](https://github.com/Azure-Samples/microsoft-azure-attestation).\n\n### Retrieve Token Certificates\n\nUse `get_signing_certificates` to retrieve the certificates which can be used to validate the token returned from the attestation service.\n\n```python\nsigners = attest_client.get_signing_certificates()\nfor signer in signers:\n    from cryptography.hazmat.backends import default_backend\n    cert = cryptography.x509.load_pem_x509_certificate(signer.certificates[0].encode('ascii'), backend=default_backend())\n    print('Cert  iss:', cert.issuer, '; subject:', cert.subject)\n```\n\n## Troubleshooting\n\nMost Attestation service operations will raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md). The attestation service APIs will throw a `HttpResponseError` on failure with helpful error codes. Many of these errors are recoverable.\n\n```python\ntry:\n    response, _ = attest_client.attest_sgx_enclave(\n        quote,\n        runtime_data=AttestationData(runtime_data, is_json=False))\nexcept HttpResponseError as ex:\n    # Ignore invalid quote errors.\n    if ex.error == \"InvalidParameter\":\n        pass\n}\n```\n\nAdditional troubleshooting information for the MAA service can be found [here](https://docs.microsoft.com/python/api/overview/azure/attestation?view=azure-python-preview)\n\n## Next steps\n\nFor more information about the Microsoft Azure Attestation service, please see our [documentation page](https://docs.microsoft.com/azure/attestation/).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [the Contributor License Agreement site](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][microsoft_code_of_conduct]. For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\nSee [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to these libraries.\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/attestation/azure-security-attestation\n[azure_identity]: https://docs.microsoft.com/python/api/overview/azure/identity-readme?view=azure-python-preview\n[DefaultAzureCredential]: https://docs.microsoft.com/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python\n[ClientSecretCredential]: https://docs.microsoft.com/python/api/azure-identity/azure.identity.clientsecretcredential?view=azure-python\n[attestation_policy_result]:https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.policyresult?view=azure-python-preview\n[attestation_client]: https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.attestationclient?view=azure-python-preview\n[attestation_admin_client]: https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.attestationadministrationclient?view=azure-python-preview\n[attestation_policy_result_parameters]: https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.policyresult?view=azure-python-preview#parameters\n[attest_sgx]: https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.attestationclient?view=azure-python-preview#attest-sgx-enclave-quote--inittime-data-none--runtime-data-none--draft-policy-none----kwargs-\n[attestation_pypi]: https://aka.ms/azsdk/python/azure-security-attestation\n[API_reference]:https://docs.microsoft.com/python/api/overview/azure/security-attestation-readme?view=azure-python-preview\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n[microsoft_code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[json_web_token]: https://tools.ietf.org/html/rfc7519\n[JWK]: https://tools.ietf.org/html/rfc7517\n[base64url_encoding]: https://tools.ietf.org/html/rfc4648#section-5\n[contributing]: https://github.com/Azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fattestation%2Fazure-security-attestation%2FREADME.png)\n\n\n# Release History\n\n## 1.0.0 (2021-07-06)\n\n### Features Added\n\nSample cleanup - instead of using `ClientSecretCredentials`, the samples now use\nDefaultAzureCredential.\n\n### Breaking Changes\n\n* TPM attestation takes a JSON string parameter and returns a JSON string parameter.\n  * `TPMAttestationRequest` and `TPMAttestationResponse` type were removed.\n* `confirmation` attribute removed from `AttestationResult` type.\n* The `AttestationSigningKey` type was removed, replaced with a `signing_key` and\n `signing_certificate` kwargs parameter.\n* All certificates and keys accepted and returned by the SDK are now PEM encoded\n  strings instead of DER encoded arrays of bytes for easier manipulation and\n  interoperability.\n* Removed `AttestationResponse` type, token value merged into `AttestationResult`,\n  `PolicyResult`, etc.\n* Removed `TokenValidationOptions` type and merged the validation options into\n  keyword arguments on the APIs which validate returned tokens. Those keyword\n  arguments can also be specified on the Client classes to simplify individual\n  API invocations.\n* Renamed `instance_url` parameter to the constructors to `endpoint`.\n* Many optional fields in `AttestationResult` were made non-optional.\n* `AttestationToken._validate_token` is made internal-only, and now returns `None`.\n  * The caller provided `validation_callback` now must throw exceptions on invalid\n  tokens rather than returning `False`.\n* Removed the `AttestationData` type, instead the `attest_xxx` APIs take two sets\n  of parameters: `inittime_data` and `inittime_json` and `runtime_data` and `runtime_json`.\n  if the `_json` value is set, the value of the parameter is an array of UTF8 encoded\n  JSON values, if the `_data` value is set, the value of the parameter is an array\n  of bytes.\n* The `get_policy` API now returns a `Tuple[str, AttestationToken]` to simplify\n  the consumption experience.\n* The `get_policy_management_certificates` API also returns a `Tuple[list[list[string]], AttestationToken]` to simplify the consumption experience. Note that each of the entries\nin the list is a PEM encoded X.509 certificate.\n\nTo call into the attest APIs if you care about the attestation policy and token,\nyou can write:\n\n```python\npolicy, token = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\n```\n\nIf you only care about the policy, you can write any of the following:\n\n```python\npolicy, _ = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\n```\n\nor\n\n```python\npolicy = attest_client.get_policy(AttestationType.SGX_ENCLAVE)[0]\n```\n\nor\n\n```python\nresponse = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\npolicy = response[0]\n```\n\n* The `AttestationToken` class no longer inherits from `Generic`.\n* The `attest_sgx_enclave`, and `attest_openenclave` APIs now return a tuple of\n  `AttestationResult`, `AttestationToken`, similar to the `get_policy` API.\n* The `set_policy`, `reset_policy`, `add_policy_management_certificate`, and `remove_policy_management_certificate` APIs all return a tuple.\n* The `AttestationToken.get_body()` API was renamed `AttestationToken.body()`\n* Several time related properties were renamed to be consistent with the usage from\n  keyvault:\n  * The `expiration_time` property on `AttestationToken` was renamed to `expires`.\n  * The `issuance_time` property on `AttestationToken` was renamed to `issued_on`.\n  * The `not_before_time` property on `AttestationToken` was renamed to `not_before`.\n* The `StoredAttestationPolicy` model type has been removed. To validate the attestation policy hash, use the `AttestationPolicyToken` model object instead.\n* The `get_openidmetadata` API has been renamed `get_open_id_metadata`.\n\n## 1.0.0b4 (2021-06-08)\n\n### Features Added\n\n* Added reset_policy API.\n* Added models.\n* Documentation cleanup.\n\n### Breaking Changes\n\n* Creating the `StoredAttestationPolicy` model type means that the `attestation_policy`\n    kwargs parameter for the constructor has been replaced with a positional `policy` parameter. As a result of this change, this code:\n\n```python\nStoredAttestationPolicy(attestation_policy=str(attestation_policy).encode('utf-8')))\n```\n\nchanges to:\n\n```python\nStoredAttestationPolicy(attestation_policy)\n```\n\n* Several parameters for the `AttestationResult` type have been renamed, and\n    several parameters which were shared with `AttestationToken` have been\n    removed. In general, the naming changes removed some protocol specific\n    elements and replaced them with friendlier names. Finally, the deprecated\n    attributes have been removed from the `AttestationResult`\n\n    Full set of changes:\n  * `iss` renamed to `issuer`\n  * `cnf` renamed to `confirmation`\n  * `jti` renamed to `unique_identifier`\n  * `iat` removed\n  * `exp` removed\n  * `nbf` removed\n  * `deprecated_version` removed\n  * `deprecated_is_debuggable` removed\n  * `deprecated_sgx_collateral` removed\n  * `deprecated_enclave_held_data` removed\n  * `deprecated_enclave_held_data2` removed\n  * `deprecated_product_id` removed\n  * `deprecated_mr_enclave` removed\n  * `deprecated_mr_signer` removed\n  * `deprecated_svn` removed\n  * `deprecated_tee` removed\n  * `deprecated_policy_signer` removed\n  * `deprecated_policy_hash` removed\n  * `deprecated_rp_data` removed\n\n  If customers need to access the removed or renamed fields directly, they can\n  use the `get_body` method of the `AttestationResponse` object:\n\n  ```python\n    if response.token.get_body().deprecated_tee != 'sgx':\n        print(\"Unexpected tee claim in token\")\n  ```\n\n## 1.0.0b2 (2021-05-11)\n\n### Features Added\n\n* Preliminary implementation of a Track 2 SDK for the attestation service.\n\n### Breaking Changes\n\n* Complete reimplementation of the API surface, follows the API patterns already\nestablished for the attestation service.\n\n## 1.0.0b1 (2021-01-15)\n\nInitial early preview release for MAA Data Plane SDK\nDemonstrates use of the machine generated MAA APIs.\n\n* Initial Release\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azure/azure-sdk-for-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-security-attestation",
    "package_url": "https://pypi.org/project/azure-security-attestation/",
    "platform": "",
    "project_url": "https://pypi.org/project/azure-security-attestation/",
    "project_urls": {
      "Homepage": "https://github.com/Azure/azure-sdk-for-python"
    },
    "release_url": "https://pypi.org/project/azure-security-attestation/1.0.0/",
    "requires_dist": [
      "azure-core (<2.0.0,>=1.8.2)",
      "cryptography (>=2.1.4)",
      "msrest (>=0.6.21)",
      "azure-security-nspkg ; python_version<'3.0'"
    ],
    "requires_python": "",
    "summary": "Microsoft Azure Attestation Client Library for Python",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10839966,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fa2b64f1876588883169a591b9b1038473eb06cfbe29d3e7ebd29cb98f80521",
          "md5": "cb5b03bbbbff3da875f7af4e95949639",
          "sha256": "9a1042cdc2f3fc20a2e006f3541b3b32666c284fb2427ddb900cf8e0e786dd3f"
        },
        "downloads": -1,
        "filename": "azure_security_attestation-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb5b03bbbbff3da875f7af4e95949639",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 82874,
        "upload_time": "2021-07-06T22:49:28",
        "upload_time_iso_8601": "2021-07-06T22:49:28.417826Z",
        "url": "https://files.pythonhosted.org/packages/0f/a2/b64f1876588883169a591b9b1038473eb06cfbe29d3e7ebd29cb98f80521/azure_security_attestation-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1309c728aff4e671de3bce4a56e0ba6c1b53da6a7df83970ee01bab3100ea76",
          "md5": "1b4ff2db263229eee2d8314edcf21b10",
          "sha256": "0bf814db4225d418b3332f2226537142849c0a45a638a5da380fd3f7c241a2da"
        },
        "downloads": -1,
        "filename": "azure-security-attestation-1.0.0.zip",
        "has_sig": false,
        "md5_digest": "1b4ff2db263229eee2d8314edcf21b10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1449840,
        "upload_time": "2021-07-06T22:49:31",
        "upload_time_iso_8601": "2021-07-06T22:49:31.124620Z",
        "url": "https://files.pythonhosted.org/packages/c1/30/9c728aff4e671de3bce4a56e0ba6c1b53da6a7df83970ee01bab3100ea76/azure-security-attestation-1.0.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06124154301bb67aee9642922321f22022ba4c84d76e9cd5223784bd122fd060",
          "md5": "dd9eb0922aa0fbca618e7b983cabbf6a",
          "sha256": "6dc1729e9a419d41133a01ff600e6e4efa13e6863c30204bb8009bde71c76f37"
        },
        "downloads": -1,
        "filename": "azure_security_attestation-1.0.0b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd9eb0922aa0fbca618e7b983cabbf6a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 43853,
        "upload_time": "2021-01-16T01:06:09",
        "upload_time_iso_8601": "2021-01-16T01:06:09.920951Z",
        "url": "https://files.pythonhosted.org/packages/06/12/4154301bb67aee9642922321f22022ba4c84d76e9cd5223784bd122fd060/azure_security_attestation-1.0.0b1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ab75991529f69c4f342f9c2390e23a2d819adaa6a57f8bfbab0c2cc2b4876cf",
          "md5": "4f5a0e3132d45b16f1cc4997613ba759",
          "sha256": "6d74f70b60fe98c4b3a38278252a4cd29a164de1b30bafc36223f1311f0c47d0"
        },
        "downloads": -1,
        "filename": "azure-security-attestation-1.0.0b1.zip",
        "has_sig": false,
        "md5_digest": "4f5a0e3132d45b16f1cc4997613ba759",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 99665,
        "upload_time": "2021-01-16T01:06:11",
        "upload_time_iso_8601": "2021-01-16T01:06:11.751244Z",
        "url": "https://files.pythonhosted.org/packages/0a/b7/5991529f69c4f342f9c2390e23a2d819adaa6a57f8bfbab0c2cc2b4876cf/azure-security-attestation-1.0.0b1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b9861e61af7859f62885379f73141a858ed2b7e917bcb0887870789f1efe262",
          "md5": "599899203b131e747f8f4ac0d707e720",
          "sha256": "c67ac769d2f36db60bb4085515b4a8fe444587ef9c4fa7a09a562309eceb95c6"
        },
        "downloads": -1,
        "filename": "azure_security_attestation-1.0.0b2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "599899203b131e747f8f4ac0d707e720",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 67724,
        "upload_time": "2021-05-11T00:19:11",
        "upload_time_iso_8601": "2021-05-11T00:19:11.328211Z",
        "url": "https://files.pythonhosted.org/packages/3b/98/61e61af7859f62885379f73141a858ed2b7e917bcb0887870789f1efe262/azure_security_attestation-1.0.0b2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "444d30da7ad3a10bcf54c22ab3d85fcd76592bbf11286514debe3f99aa09f861",
          "md5": "bf3d101b55388e1f798f60f112a80afc",
          "sha256": "377845350dec24ad5b98a7f7355f9ef3ce5991634f7ea7b35d31bf1b5a6d7cc3"
        },
        "downloads": -1,
        "filename": "azure-security-attestation-1.0.0b2.zip",
        "has_sig": false,
        "md5_digest": "bf3d101b55388e1f798f60f112a80afc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 533913,
        "upload_time": "2021-05-11T00:19:13",
        "upload_time_iso_8601": "2021-05-11T00:19:13.878650Z",
        "url": "https://files.pythonhosted.org/packages/44/4d/30da7ad3a10bcf54c22ab3d85fcd76592bbf11286514debe3f99aa09f861/azure-security-attestation-1.0.0b2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "689156190a4d280a1f81a7658779a881e8593f7b8b20f0c0d762b33c1a516c92",
          "md5": "6ca4d5377d4fc54c59a6f24a3c89139d",
          "sha256": "acf31c96d9dd418934c6355515d2a473301b3eeba061a12ca3caaaf98904f4d5"
        },
        "downloads": -1,
        "filename": "azure_security_attestation-1.0.0b3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ca4d5377d4fc54c59a6f24a3c89139d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 71087,
        "upload_time": "2021-05-14T00:21:55",
        "upload_time_iso_8601": "2021-05-14T00:21:55.136780Z",
        "url": "https://files.pythonhosted.org/packages/68/91/56190a4d280a1f81a7658779a881e8593f7b8b20f0c0d762b33c1a516c92/azure_security_attestation-1.0.0b3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4050932bf0a373c9ba88886b3ba10b1100ea1b24108b6af87b636ba3ea9be3d5",
          "md5": "6c2f5f2032b87224c258793675dcd085",
          "sha256": "f9243a04e5cbf744aac9a94b2b812fcd0e3969aeed177300769fb0cc0d6c00ea"
        },
        "downloads": -1,
        "filename": "azure-security-attestation-1.0.0b3.zip",
        "has_sig": false,
        "md5_digest": "6c2f5f2032b87224c258793675dcd085",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 593109,
        "upload_time": "2021-05-14T00:21:57",
        "upload_time_iso_8601": "2021-05-14T00:21:57.432855Z",
        "url": "https://files.pythonhosted.org/packages/40/50/932bf0a373c9ba88886b3ba10b1100ea1b24108b6af87b636ba3ea9be3d5/azure-security-attestation-1.0.0b3.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bb23bde6c4482b73502f178942b2c51dd220f88e5e0bf6889285ffec34f17e2",
          "md5": "ab8ed447d91acd809b50238502b75553",
          "sha256": "9f25cbe05e2131785bd43ea1e996c6a112069d872fab46e7b9f1118fc2f8191a"
        },
        "downloads": -1,
        "filename": "azure_security_attestation-1.0.0b4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab8ed447d91acd809b50238502b75553",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 75765,
        "upload_time": "2021-06-10T22:50:56",
        "upload_time_iso_8601": "2021-06-10T22:50:56.082296Z",
        "url": "https://files.pythonhosted.org/packages/8b/b2/3bde6c4482b73502f178942b2c51dd220f88e5e0bf6889285ffec34f17e2/azure_security_attestation-1.0.0b4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2559227b1f37146713613e2dedef2a2447afe873856e4162f4e07ba8b961076e",
          "md5": "83c9a44b739ee87768aa019ab1991bc8",
          "sha256": "4bdec1207efca92b83d922ff3871a020438df9fc212a35591addf4aa00605f8a"
        },
        "downloads": -1,
        "filename": "azure-security-attestation-1.0.0b4.zip",
        "has_sig": false,
        "md5_digest": "83c9a44b739ee87768aa019ab1991bc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1197015,
        "upload_time": "2021-06-10T22:50:58",
        "upload_time_iso_8601": "2021-06-10T22:50:58.637942Z",
        "url": "https://files.pythonhosted.org/packages/25/59/227b1f37146713613e2dedef2a2447afe873856e4162f4e07ba8b961076e/azure-security-attestation-1.0.0b4.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0fa2b64f1876588883169a591b9b1038473eb06cfbe29d3e7ebd29cb98f80521",
        "md5": "cb5b03bbbbff3da875f7af4e95949639",
        "sha256": "9a1042cdc2f3fc20a2e006f3541b3b32666c284fb2427ddb900cf8e0e786dd3f"
      },
      "downloads": -1,
      "filename": "azure_security_attestation-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cb5b03bbbbff3da875f7af4e95949639",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 82874,
      "upload_time": "2021-07-06T22:49:28",
      "upload_time_iso_8601": "2021-07-06T22:49:28.417826Z",
      "url": "https://files.pythonhosted.org/packages/0f/a2/b64f1876588883169a591b9b1038473eb06cfbe29d3e7ebd29cb98f80521/azure_security_attestation-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1309c728aff4e671de3bce4a56e0ba6c1b53da6a7df83970ee01bab3100ea76",
        "md5": "1b4ff2db263229eee2d8314edcf21b10",
        "sha256": "0bf814db4225d418b3332f2226537142849c0a45a638a5da380fd3f7c241a2da"
      },
      "downloads": -1,
      "filename": "azure-security-attestation-1.0.0.zip",
      "has_sig": false,
      "md5_digest": "1b4ff2db263229eee2d8314edcf21b10",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1449840,
      "upload_time": "2021-07-06T22:49:31",
      "upload_time_iso_8601": "2021-07-06T22:49:31.124620Z",
      "url": "https://files.pythonhosted.org/packages/c1/30/9c728aff4e671de3bce4a56e0ba6c1b53da6a7df83970ee01bab3100ea76/azure-security-attestation-1.0.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}