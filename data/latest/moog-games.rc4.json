{
  "info": {
    "author": "Nicholas Watters",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# Modular Object-Oriented Games\n\n<img src=\"readme_visuals/moog_header.gif\" width=\"900\">\n\n## Description\n\n[Project Website](https://jazlab.github.io/moog.github.io/index.html)\n\n### Summary\n\nThis [Modular Object-Oriented Games (MOOG)\nlibrary](https://github.com/jazlab/moog.github.io) is a general-purpose\npython-based platform for interactive games. It aims to satisfy the following\ncriteria:\n\n* Highly customizable. Environment physics, reward structure, agent interface,\n  and more are customizable.\n* Easy to rapidly prototype tasks. Tasks can be composed in a single short file.\n* Usable for both reinforment learning and psychology, with [DeepMind\n  dm_env](https://github.com/deepmind/dm_env) and [OpenAI\n  Gym](https://gym.openai.com/) interfaces for RL agents and an\n  [MWorks](https://mworks.github.io/) interface for psychology and\n  neurophysiology.\n* Light-weight and efficient. Most tasks run quickly, almost always faster than\n  100 frames per second on CPU and often much faster than that.\n* Facilitates procedural generation for randomizing task conditions every trial.\n\nSee [`moog_demos`](moog_demos) for a variety of example tasks.\n\n### Intended Users\n\nMOOG may be useful for the following kinds of researchers:\n\n* Machine learning researchers studying reinforcement learning in\n  2.5-dimensional (2-dimensional with occlusion) physical environments who want\n  to quickly implement tasks without having to wrangle with more complicated\n  game engines that aren't designed for RL.\n* Psychology researchers who want more flexibility than existing psychology\n  platforms afford.\n* Neurophysiology researchers who want to study interactive games yet still need\n  to precisely control stimulus timing.\n* Machine learning researchers studying unsupervised learning, particularly in\n  the video domain. MOOG can be used to procedurally generate video datasets\n  with controlled statistics.\n\n### Introduction\n\nThe core philosophy of MOOG is **\"one task, one file.\"** Namely, each task can\nbe implemented with a single configuration file. This configuration file should\nbe a short \"recipe\" for the task, containing as little substantive code as\npossible, and should define a set of components to pass to the MOOG environment.\nSee [the MOOG README](moog/README.md) for more details.\n\nWe also include an example [MWorks](https://mworks.github.io/) interface for\nrunning psychophysics experiments, as well as a [python demo\nscript](moog_demos/run_demo.py) for testing task prototypes.\n\n### Features Compared to Existing Platforms\n\nCompared to professional game engines (Unity, Unreal, etc.) and existing visual\nreinforcement learning platforms (DM-Lab, Mujoco, VizDoom, etc.):\n\n* **Python**. MOOG tasks are written purely in python, so users who are most\n  comfortable with python will find MOOG easy to use.\n* **Procedural Generation**. MOOG facilitates procedural generation, with a\n  [library of compositional\n  distributions](moog/state_initialization/distributions.py) to randomize\n  conditions across trials.\n* **Online Simulation**. MOOG supports online model-based RL, with a [ground\n  truth simulator](moog/env_wrappers/simulation.py) for tree search.\n* **Psychophysics**. MOOG can be run with MWorks, a psychophysics platform.\n* **Speed**. MOOG is fast on CPU. While the speed depends on the task and\n  rendering resolution, MOOG typically runs at ~200fps with 512x512 resolution\n  on a CPU, which is faster than one would get with DM-Lab or Mujoco and at\n  least as fast as Unity and Unreal.\n\nCompared to existing python game platforms (PyBullet, Pymunk, etc.):\n\n* **Customization**. Custom forces and game rules can be easily implemented in\n  MOOG.\n* **Psychophysics, Procedural Generation, and Online Simulation**, as described\n  above.\n* **RL Interface**. A task implemented in MOOG can be used out-of-the-box to\n  train RL agents, since MOOG is python-based and has DeepMind dm_env and OpenAI\n  Gym interfaces.\n\nCompared to existing psychophysics platforms (PsychoPy, PsychToolbox, MWorks):\n\n* **Flexibility**. MOOG offers a large scope of interactive tasks. Existing\n  psychophysics platforms are not easily customized for game-like tasks, action\n  interfaces, and arbitrary object shapes.\n* **Physics**. Existing psychophysics platforms do not have built-in physics,\n  such as forces, collisions, etc.\n* **RL Interface**, as described above.\n\nMOOG can [interface with MWorks](mworks), allowing users to leverage the MOOG\ntask framework while also allowing for precise timing control and interfaces\nwith eye-trackers, joysticks, and electrophysiology software.\n\n\n### Limitations\n\n* **Not 3D**. MOOG environments are 2.5-dimensional, meaning that they render in\n  2-dimensions with z-ordering for occlusion. MOOG does not support 3D sprites.\n* **Very simple graphics**. MOOG sprites are monochromatic polygons. There are\n  no textures, shadows, or other visual effects. Composite sprites can be\n  implemented by creating multiple overlapping sprites, but still the graphics\n  complexity is very limited. This has the benefit of a small and easily\n  parameterizable set of factors of variation of the sprites, but does make MOOG\n  environments visually unrealistic.\n* **Imperfect physics**. MOOG's physics engine is simple. It uses Newton's\n  method to effect action-at-a-distance forces. MOOG does include a collision\n  module that implements rotational mechanics, but it is not as robust as more\n  professional physics engines and can have instabilities (particularly if\n  multiple objects collide simultaneously). See\n  [`moog_demos/example_configs/falling_balls.py`](moog_demos/example_configs/falling_balls.py)\n  for an extreme example of unstable physics.\n\n\n## Getting Started\n\nSee the [project website](https://jazlab.github.io/moog.github.io/index.html)\nfor API documentation about every file and function in MOOG.\n\n### Installation\n\nIf you would like to install this library as a package, you can install using\npip:\n```bash\npip install moog-games\n```\n\nThis will install `moog` and `moog_demos` packages. Be sure to use python 3.7 or\nlater.\n\n### Running The Demo\n\nTasks can be played by running the [run_demo](moog_demos/run_demo.py) script, in\nwhich the `--config` flag indicates the task config to demo. For example, to\ndemo the [pong](moog_demos/example_configs/pong.py) task, you would run:\n\n```bash\npython3 -m moog_demos.run_demo --config='moog_demos.example_configs.pong'\n```\n\nWhen this command is run, the demo will produce an interactive display. At the\ntop of the display is the rendered environment state, in the middle of the\ndisplay is a histogram of recent rewards, and at the bottom of the display is a\ntop-down view of a cartoon joystick. You can click and drag the joystick around\nto control the agent avatar. The demo can be terminated by pressing `escape`.\n\nThe pong task looks like this:\n\n<img src=\"readme_visuals/pong.gif\" width=\"300\">\n\nYou can change the config flag to point to any of the [example\nconfigs](moog_demos/example_configs). They will all run except for `cleanup`,\nwhich is multi-agent so cannot be played by a single-agent demo, (though see\n[`multi_agent_example`](multi_agent_example/) for more about that).\n\n### Implementing Tasks\n\nBefore implementing your own tasks, please read [the MOOG\nREADME](moog/README.md).\n\nTo begin implementing your own task, we recommend first looking at all the\nexample configs in [`moog_demos`](moog_demos) and copying one with some\nsimilarities to your task into a working directory. Then modify it incrementally\nto your specification.\n\nTo demo your config, copy [`run_demo.py`](moog_demos/run_demo.py) into your\nworking directory and run it with\n```bash\n$ python3 run_demo.py --config='path.to.your.config' --level=$your_config_level\n```\n\n## Contact and Support\n\nPlease see [`CONTRIBUTING.md`](CONTRIBUTING.md) for information about support.\nPlease email Nick Watters at nwatters@mit.edu with questions and feedback.\n\n## Reference\n\nIf you use this library in your work, please cite it as follows:\n\n```\n@misc{moog2021,\nauthor = {Nicholas Watters and Joshua Tenenabum and Mehrdad Jazayeri},\ntitle = {Modular Object-Oriented Games: A Task Framework for Reinforcement Learning, Psychology, and Neuroscience},\nurl = {https://arxiv.org/abs/2102.12616},\neprint = {2102.12616},\njournal = {arXiv preprint arXiv:2102.12616},\nyear = {2021}\n}\n```\n\nSome parts of this codebase are derived from\n[Spriteworld](https://github.com/deepmind/spriteworld/). See the Spriteworld\nlicense in [LICENSE-spriteworld](LICENSE-spriteworld).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jazlab/moog.github.io",
    "keywords": "ai,reinforcement-learning,python,machine learning,objects,psychology,neurophysiology,psychophysics,physics,environment",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "moog-games",
    "package_url": "https://pypi.org/project/moog-games/",
    "platform": "",
    "project_url": "https://pypi.org/project/moog-games/",
    "project_urls": {
      "Homepage": "https://github.com/jazlab/moog.github.io"
    },
    "release_url": "https://pypi.org/project/moog-games/1.4/",
    "requires_dist": [
      "spriteworld",
      "imageio",
      "mss"
    ],
    "requires_python": "",
    "summary": "Modular object oriented games utils is a python-based game engine.",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10607762,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e44f274bf010ff72b85d41f8c81804ab7e7b643505ab1b0d5d449ce36d2818e",
          "md5": "394446e88c803c79cb7ceb0bd84dfa8c",
          "sha256": "debc62a10ec17d42507dd705227cd422168b4813978d3d6bd7c2548c585eeb24"
        },
        "downloads": -1,
        "filename": "moog_games-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "394446e88c803c79cb7ceb0bd84dfa8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 141912,
        "upload_time": "2021-02-17T23:03:27",
        "upload_time_iso_8601": "2021-02-17T23:03:27.291860Z",
        "url": "https://files.pythonhosted.org/packages/9e/44/f274bf010ff72b85d41f8c81804ab7e7b643505ab1b0d5d449ce36d2818e/moog_games-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d54f3fa5b9b42a56dc260fa9d958ba2bc418e63e478ae189a7566b34a1710a6b",
          "md5": "fd07eee0ca3f26c8ecb6e9479a4977bf",
          "sha256": "3a7db9fc67f8c3b046047b4ba470a286fb493ce20928dcc82fd1cb88cc244f1e"
        },
        "downloads": -1,
        "filename": "moog-games-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fd07eee0ca3f26c8ecb6e9479a4977bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 98552,
        "upload_time": "2021-02-17T23:03:32",
        "upload_time_iso_8601": "2021-02-17T23:03:32.391175Z",
        "url": "https://files.pythonhosted.org/packages/d5/4f/3fa5b9b42a56dc260fa9d958ba2bc418e63e478ae189a7566b34a1710a6b/moog-games-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "309876725691b3c787ee255715b604db06dfcdb21741ec70fed186926b107b0f",
          "md5": "fafdf5e15ee43a00e26815699317ff11",
          "sha256": "66cfecea746e7becfecc08b6dea9683fcbf31fe0c5df9492904b64f93f290380"
        },
        "downloads": -1,
        "filename": "moog_games-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fafdf5e15ee43a00e26815699317ff11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 142702,
        "upload_time": "2021-02-21T05:13:09",
        "upload_time_iso_8601": "2021-02-21T05:13:09.625411Z",
        "url": "https://files.pythonhosted.org/packages/30/98/76725691b3c787ee255715b604db06dfcdb21741ec70fed186926b107b0f/moog_games-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7a216003cad656748c0122a2b69b8e2db2738f3e600836e2d55182aa596cb1c",
          "md5": "ab5221c20fc7d8c6fca6795c7419d6ee",
          "sha256": "e0c0c25b4558c836e05760d3d40c04e20d074b680524ded5db136cdd4b922e82"
        },
        "downloads": -1,
        "filename": "moog-games-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ab5221c20fc7d8c6fca6795c7419d6ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 99088,
        "upload_time": "2021-02-21T05:13:11",
        "upload_time_iso_8601": "2021-02-21T05:13:11.938872Z",
        "url": "https://files.pythonhosted.org/packages/e7/a2/16003cad656748c0122a2b69b8e2db2738f3e600836e2d55182aa596cb1c/moog-games-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "becf66e95886bc52c45b904481fade501b8179c5af758ef3f76ae6fc35303183",
          "md5": "523045f4caed3345c54e95836bdb7189",
          "sha256": "9787195b39ad8c4a6dda1db42841b720f777a50a4040ac9e04287bc82fd87628"
        },
        "downloads": -1,
        "filename": "moog_games-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "523045f4caed3345c54e95836bdb7189",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 142700,
        "upload_time": "2021-02-23T00:39:12",
        "upload_time_iso_8601": "2021-02-23T00:39:12.002783Z",
        "url": "https://files.pythonhosted.org/packages/be/cf/66e95886bc52c45b904481fade501b8179c5af758ef3f76ae6fc35303183/moog_games-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b1356a8bb9b568b77cb8e66b60515589ba31522e86275539786da2d06468b57",
          "md5": "babc3f45f8858cd19627bb895547bd0f",
          "sha256": "f980f54c54791fe2c8f50c20a2d48a0b3035cd996eba53d93a2e2b0b154d8ab5"
        },
        "downloads": -1,
        "filename": "moog-games-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "babc3f45f8858cd19627bb895547bd0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 99092,
        "upload_time": "2021-02-23T00:39:13",
        "upload_time_iso_8601": "2021-02-23T00:39:13.758920Z",
        "url": "https://files.pythonhosted.org/packages/6b/13/56a8bb9b568b77cb8e66b60515589ba31522e86275539786da2d06468b57/moog-games-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e0ef4c03c4b8482565e7c7402e2a44c9479038b262c93836be14a05ceb5a61a",
          "md5": "e39b3b82ba1c56f456dbf9480172e057",
          "sha256": "52edeb07c1c83895689e03c7b9e2628a68fa343b3f49580e0b4df590c91624b4"
        },
        "downloads": -1,
        "filename": "moog_games-1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e39b3b82ba1c56f456dbf9480172e057",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 142890,
        "upload_time": "2021-06-10T02:30:15",
        "upload_time_iso_8601": "2021-06-10T02:30:15.470823Z",
        "url": "https://files.pythonhosted.org/packages/4e/0e/f4c03c4b8482565e7c7402e2a44c9479038b262c93836be14a05ceb5a61a/moog_games-1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2270e61a9a502053356f26e3f1dc81580a37327e82b922c56d8d7c6d878e355f",
          "md5": "9b122c0f02008202fb3c3ca6a9bec3e8",
          "sha256": "15d26ad86b84794dbdd3ff8c926050527ec822cdf2cca81955a2315a11c7889a"
        },
        "downloads": -1,
        "filename": "moog-games-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9b122c0f02008202fb3c3ca6a9bec3e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 99512,
        "upload_time": "2021-06-10T02:30:17",
        "upload_time_iso_8601": "2021-06-10T02:30:17.286804Z",
        "url": "https://files.pythonhosted.org/packages/22/70/e61a9a502053356f26e3f1dc81580a37327e82b922c56d8d7c6d878e355f/moog-games-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e0ef4c03c4b8482565e7c7402e2a44c9479038b262c93836be14a05ceb5a61a",
        "md5": "e39b3b82ba1c56f456dbf9480172e057",
        "sha256": "52edeb07c1c83895689e03c7b9e2628a68fa343b3f49580e0b4df590c91624b4"
      },
      "downloads": -1,
      "filename": "moog_games-1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e39b3b82ba1c56f456dbf9480172e057",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 142890,
      "upload_time": "2021-06-10T02:30:15",
      "upload_time_iso_8601": "2021-06-10T02:30:15.470823Z",
      "url": "https://files.pythonhosted.org/packages/4e/0e/f4c03c4b8482565e7c7402e2a44c9479038b262c93836be14a05ceb5a61a/moog_games-1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2270e61a9a502053356f26e3f1dc81580a37327e82b922c56d8d7c6d878e355f",
        "md5": "9b122c0f02008202fb3c3ca6a9bec3e8",
        "sha256": "15d26ad86b84794dbdd3ff8c926050527ec822cdf2cca81955a2315a11c7889a"
      },
      "downloads": -1,
      "filename": "moog-games-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "9b122c0f02008202fb3c3ca6a9bec3e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 99512,
      "upload_time": "2021-06-10T02:30:17",
      "upload_time_iso_8601": "2021-06-10T02:30:17.286804Z",
      "url": "https://files.pythonhosted.org/packages/22/70/e61a9a502053356f26e3f1dc81580a37327e82b922c56d8d7c6d878e355f/moog-games-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}