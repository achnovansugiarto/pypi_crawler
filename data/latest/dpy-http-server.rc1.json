{
  "info": {
    "author": "Marwynn Somridhivej",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# dpy-http-server\n`dpy-http-server` allows for efficient an intuitive creation and management of\nan HTTP web server that runs alongside a discord.py bot.\n\n## Key Features\n- Easy to use, yet powerful API the makes spinning up a web server on the same\nevent loop as a discord.py bot painless\n- Supports reloading on cog reload\n\n## Getting Started\nHere are some examples on how to use this API:\n\n### Global Scope\n```python\nimport discord\nimport server\nfrom aiohttp import web\n\nbot = discord.Bot(command_prefix=\"!\", description=\"example\", intents=discord.Intents.all())\n\n@bot.event\nasync def on_ready():\n    bot.server = server.HTTPServer(\n        bot=bot,\n        host=\"0.0.0.0\",\n        port=\"8000\",\n    )\n    await bot.server.start()\n\n@server.add_route(path=\"/\", method=\"GET\")\nasync def home(request):\n    return web.json_response(data={\"foo\": \"bar\"}, status=200)\n\nbot.run(YOUR_TOKEN)\n```\n\n### Inside Bot Subclass\n```python\nimport discord\nimport server\nfrom aiohttp import web\n\n\nclass Bot(discord.Bot):\n    def __init__(*args, **kwargs):\n        super().__init__(*args, **kwargs):\n        self.server = server.HTTPServer(\n            bot=self,\n            host=\"0.0.0.0\",\n            port=8000,\n        )\n        self.loop.create_task(self._start_webserver())\n\n    async def _start_webserver(self):\n        await self.wait_until_ready()\n        await self.server.start()\n\n    @server.add_route(path=\"/\", method=\"GET\")\n    async def home(self, request):\n        return web.json_response(data={\"foo\": bar}, status=200)\n\nbot = Bot(command_prefix=\"!\", description=\"example\", intents=discord.Intents.all())\nbot.run(YOUR_TOKEN)\n```\n\n### Inside Cog\n```python\nimport server\nfrom aiohttp import web\nfrom discord.ext import commands\n\n\nclass ServerCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.server = server.HTTPServer(\n            bot=self.bot,\n            host=\"0.0.0.0\",\n            port=8000,\n        )\n        self.bot.loop.create_task(self._start_server())\n\n    async def _start_server(self):\n        await self.bot.wait_until_ready()\n        await self.server.start()\n\n    @server.add_route(path=\"/\", method=\"GET\", cog=\"ServerCog\")\n    async def home(self, request):\n        return web.json_response(data={\"foo\": \"bar\"}, status=200)\n```\n\n### Using Checks with Globally Defined Methods\n```python\nimport discord\nimport server\nfrom aiohttp import web\n\nbot = discord.Bot(command_prefix=\"!\", description=\"example\", intents=discord.Intents.all())\n\n@bot.event\nasync def on_ready():\n    bot.server = server.HTTPServer(\n        bot=bot,\n        host=\"0.0.0.0\",\n        port=\"8000\",\n    )\n    await bot.server.start()\n\nasync def checker(request):\n    return request.headers.get(\"authorization\") == \"password\"\n\nasync def fail_handler(request):\n    return web.json_response(data={\"message\": \"you are not authorized\"}, status=401)\n\n@server.add_route(path=\"/\", method=\"GET\")\n@server.check(predicate=checker, fail_handler=fail_handler)\nasync def home(request):\n    return web.json_response(data={\"foo\": \"bar\"}, status=200)\n\nbot.run(YOUR_TOKEN)\n```\n\n### Using Checks with Cog Defined Methods\n```python\nimport server\nfrom aiohttp import web\nfrom discord.ext import commands\n\n\nclass ServerCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.server = server.HTTPServer(\n            bot=self.bot,\n            host=\"0.0.0.0\",\n            port=8000,\n        )\n        self.bot.loop.create_task(self._start_server())\n\n    async def _start_server(self):\n        await self.bot.wait_until_ready()\n        await self.server.start()\n\n    async def checker(self, request):\n        return request.headers.get(\"authorization\") == \"password\"\n\n    async def fail_handler(self, request):\n        return web.json_response(data={\"message\": \"you are not authorized\"}, status=401)\n\n    @server.add_route(path=\"/\", method=\"GET\", cog=\"ServerCog\")\n    @server.check(predicate=\"checker\", fail_handler=\"fail_handler\")\n    async def home(self, request):\n        return web.json_response(data={\"foo\": \"bar\"}, status=200)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/marwynnsomridhivej/dpy-http-server",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dpy-http-server",
    "package_url": "https://pypi.org/project/dpy-http-server/",
    "platform": "",
    "project_url": "https://pypi.org/project/dpy-http-server/",
    "project_urls": {
      "Homepage": "https://gitlab.com/marwynnsomridhivej/dpy-http-server"
    },
    "release_url": "https://pypi.org/project/dpy-http-server/0.1.0/",
    "requires_dist": [
      "discord.py",
      "aiohttp"
    ],
    "requires_python": "",
    "summary": "Efficiently and intuitively create and manage an HTTP web server running in tandem with a discord.py bot",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10009494,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c8090bc7171d7723f29da4e94fa1446557298d1510b99b7a80dc96efa0a53ba",
          "md5": "8407afd284b95e09a2b70f35c01f73d1",
          "sha256": "52c3e8403c9b4ae69fbf46071d4d62d66ac76a244f2d4f831fb33a66db6722e1"
        },
        "downloads": -1,
        "filename": "dpy_http_server-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8407afd284b95e09a2b70f35c01f73d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5797,
        "upload_time": "2021-04-08T14:59:03",
        "upload_time_iso_8601": "2021-04-08T14:59:03.211860Z",
        "url": "https://files.pythonhosted.org/packages/9c/80/90bc7171d7723f29da4e94fa1446557298d1510b99b7a80dc96efa0a53ba/dpy_http_server-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a35dbf9af132f6e01e47610d3a2c0b5dd153753ebb5837741aa63887dc1059f",
          "md5": "75720c7a977efafffbf4856e9d2e392e",
          "sha256": "03f89f5d3793dc47a556857c02f24fb44ff6de9300ef6b2f86e6e85848652f11"
        },
        "downloads": -1,
        "filename": "dpy-http-server-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "75720c7a977efafffbf4856e9d2e392e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5951,
        "upload_time": "2021-04-08T14:59:04",
        "upload_time_iso_8601": "2021-04-08T14:59:04.573513Z",
        "url": "https://files.pythonhosted.org/packages/8a/35/dbf9af132f6e01e47610d3a2c0b5dd153753ebb5837741aa63887dc1059f/dpy-http-server-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c8090bc7171d7723f29da4e94fa1446557298d1510b99b7a80dc96efa0a53ba",
        "md5": "8407afd284b95e09a2b70f35c01f73d1",
        "sha256": "52c3e8403c9b4ae69fbf46071d4d62d66ac76a244f2d4f831fb33a66db6722e1"
      },
      "downloads": -1,
      "filename": "dpy_http_server-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8407afd284b95e09a2b70f35c01f73d1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5797,
      "upload_time": "2021-04-08T14:59:03",
      "upload_time_iso_8601": "2021-04-08T14:59:03.211860Z",
      "url": "https://files.pythonhosted.org/packages/9c/80/90bc7171d7723f29da4e94fa1446557298d1510b99b7a80dc96efa0a53ba/dpy_http_server-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a35dbf9af132f6e01e47610d3a2c0b5dd153753ebb5837741aa63887dc1059f",
        "md5": "75720c7a977efafffbf4856e9d2e392e",
        "sha256": "03f89f5d3793dc47a556857c02f24fb44ff6de9300ef6b2f86e6e85848652f11"
      },
      "downloads": -1,
      "filename": "dpy-http-server-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "75720c7a977efafffbf4856e9d2e392e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5951,
      "upload_time": "2021-04-08T14:59:04",
      "upload_time_iso_8601": "2021-04-08T14:59:04.573513Z",
      "url": "https://files.pythonhosted.org/packages/8a/35/dbf9af132f6e01e47610d3a2c0b5dd153753ebb5837741aa63887dc1059f/dpy-http-server-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}