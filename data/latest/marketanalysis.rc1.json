{
  "info": {
    "author": "Micheal Omojola",
    "author_email": "momojola@aust.edu.ng",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Office/Business :: Scheduling",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Localization"
    ],
    "description": "===============\nmarketanalysis\n===============\n\nA fast, efficient Python library for generating market holidays based on countries'\nsecurity exchanges. It aims to make determining whether a specific date is a market \nholiday as fast and flexible as possible.\n\n\nExample Usage\n-------------\n\n.. code-block:: python\n\n    from datetime import date\n    from marketanalysis import marketholidays\n    from marketanalysis import markettradingdays\n\n    us_marketholidays = marketholidays.UnitedStates()\n    # or:\n    # us_marketholidays = marketholidays.US()\n    # or:\n    # us_marketholidays = marketholidays.CountryHoliday('US')\n    # or, for specific prov / states:\n    # us_marketholidays = marketholidays.CountryHoliday('US', prov=None, state='CA')\n\n    date(2015, 1, 1) in us_marketholidays  # True\n    date(2015, 1, 2) in us_marketholidays  # False\n\n    # The Holiday class will also recognize strings of any format\n    # and int/float representing a Unix timestamp\n    '2014-01-01' in us_marketholidays  # True\n    '1/1/2014' in us_marketholidays    # True\n    1388597445 in us_marketholidays    # True\n\n    us_marketholidays.get('2014-01-01')  # \"New Year's Day\"\n\n    us_marketholidays['2014-01-01': '2014-01-03']  # [date(2014, 1, 1)]\n\n    us_pr_marketholidays = marketholidays.UnitedStates()  # or marketholidays.US(...), or marketholidays.CountryHoliday('US', state='PR')\n\n    # some marketholidays are only present in parts of a country\n    '2018-01-06' in us_marketholidays     # False\n    '2018-01-06' in us_pr_marketholidays  # True\n\n    # Easily create custom Holiday objects with your own dates instead\n    # of using the pre-defined countries/states/provinces available\n    custom_marketholidays = marketholidays.MarketHolidayBase()\n    # Append custom holiday dates by passing:\n    # 1) a dict with date/name key/value pairs,\n    custom_marketholidays.append({\"2015-01-01\": \"New Year's Day\"})\n    # 2) a list of dates (in any format: date, datetime, string, integer),\n    custom_marketholidays.append(['2015-07-01', '07/04/2015'])\n    # 3) a single date item\n    custom_marketholidays.append(date(2015, 12, 25))\n\n    date(2015, 1, 1) in custom_marketholidays  # True\n    date(2015, 1, 2) in custom_marketholidays  # False\n    '12/25/2015' in custom_marketholidays      # True\n\n    # For more complex logic like 4th Monday of January, you can inherit the\n    # HolidayBase class and define your own _populate(year) method. See below\n    # documentation for examples.\n\n\nInstall\n-------\n\nThe latest stable version can always be installed or updated via pip:\n\n.. code-block:: bash\n\n    $ pip install marketholidays==0.1\n\nClone repo with git bash:\n\n .. code-block:: bash \n\n   $ git clone https://github.com/OmoMicheal/marketanalysis.git\n\n\nAvailable Countries\n-------------------\n\n=================== =========== =============================================================\nCountry             ISO code    Securities/Exchanges Available\n=================== =========== =============================================================\nCanada              CA/CAN      Canadian Securities Exchange\nNigeria             NG/NGA      Nigerian Stock Exchange, NSE\nSouthAfrica         ZA/ZAF      Johannesburg Stock Exchange\nUnitedStates        US/USA      New York Stock Exchange (NYSE);\n                                National Association of Securities \n                                Dealers Automated Quotations (NASDAQ)\n=================== =========== =============================================================\n\n\nAPI\n---\n\nclass marketholidays.MarketHolidayBase(years=[], expand=True, observed=True, prov=None, state=None)\n    The base class used to create holiday country classes.\n\nParameters:\n\nyears\n    An iterable list of integers specifying the years that the Holiday object\n    should pre-generate. This would generally only be used if setting *expand*\n    to False. (Default: [])\n\nexpand\n    A boolean value which specifies whether or not to append marketholidays in new\n    years to the marketholidays object. (Default: True)\n\nobserved\n    A boolean value which when set to True will include the observed day of a\n    holiday that falls on a weekend, when appropriate. (Default: True)\n\nprov\n    A string specifying a province that has unique statutory marketholidays.\n    (Default: Canada='ON')\n\nstate\n    A string specifying a state that has unique statutory marketholidays.\n    (Default: UnitedStates=None)\n\nMethods:\n\nget(key, default=None)\n    Returns a string containing the name of the holiday(s) in date ``key``, which\n    can be of date, datetime, string, unicode, bytes, integer or float type. If\n    multiple marketholidays fall on the same date the names will be separated by\n    commas\n\nget(key, default=None)\n    Returns a string containing the name of the holiday(s) in date ``key``, which\n    can be of date, datetime, string, unicode, bytes, integer or float type. If\n    multiple marketholidays fall on the same date the names will be separated by\n    commas\n\nget_list(key)\n    Same as ``get`` except returns a ``list`` of holiday names instead of a comma\n    separated string\n\nget_named(name)\n    Returns a ``list`` of marketholidays matching (even partially) the provided name\n    (case insensitive check)\n\npop(key, default=None)\n    Same as ``get`` except the key is removed from the holiday object\n\npop_named(name)\n    Same as ``pop`` but takes the name of the holiday (or part of it) rather than\n    the date\n\nupdate/append\n    Accepts dictionary of {date: name} pairs, a list of dates, or even singular\n    date/string/timestamp objects and adds them to the list of marketholidays\n\n\n-------------\n\n.. code-block:: python\n\n    # Simplest example possible\n\n    >>> from datetime import date\n    >>> from marketanalysis import marketholidays\n    >>> date(2021, 4, 2) in marketholidays.US()\n    True\n    >> date(2021, 1, 2) in marketholidays.US()\n    False\n\n    # However, this is not efficient because it is initializing a new market holiday \n    # object and generating a list of all the holidays in 2021 during each comparison.\n\n    # It is more efficient to create the object only once\n\n    >>> us_marketholidays = marketholidays.US()\n    >>> date(2021, 4, 2) in us_marketholidays\n    True\n    >> date(2021, 1, 2) in us_marketholidays\n    False\n\n    # You can pick whichever you prefer of the following two.\n\n    >>> marketholidays.UnitedStates() == marketholidays.US()\n    True\n\n\n    # Let's print out the market holidays in 2021 specific to NYSE and NASDAQ\n\n    >>> for date, name in sorted(marketholidays.US(state='CA', years=2021).items()):\n    >>>     print(date, name)\n    2021-01-01 New Year's Day\n    2021-01-18 Martin Luther King, Jr. Day\n    2021-02-15 Presidents' Day\n    2021-04-02 Good Friday\n    2021-05-31 Memorial Day\n    2021-07-04 Independence Day\n    2021-07-05 Independence Day (Observed)\n    2021-09-06 Labour Day\n    2021-10-11 Thanksgiving\n    2021-12-24 Christmas Day (Observed)\n    2021-12-25 Christmas Day\n    2021-12-31 New Year's Day (Observed)\n\n\n    from marketholidays import NG\n    >>> for date, name in sorted(NG(years=2021).items()):\n    >>>    print(date, name)\n\n    2021-01-01 New Year's Day\n    2021-04-02 Good Friday\n    2021-04-05 Easter Monday\n    2021-05-01 Workers’ Day\n    2021-05-03 Workers’ Day (Observed)\n    2021-06-12 Democracy Day\n    2021-06-14 Democracy Day (Observed)\n    2021-10-01 Independence Day\n    2021-12-25 Christmas Day\n    2021-12-26 Boxing Day\n    2021-12-27 Christmas Day (Observed)\n    2021-12-31 New Year's Day (Observed)\n\n\n\n    from marketholidays import CA\n    >>> for date, name in sorted(CA(years=2022).items()):\n    >>>    print(date, name)\n\n    2021-12-31 New Year's Day (Observed)\n    2022-01-01 New Year's Day\n    2022-02-21 Family Day\n    2022-04-15 Good Friday\n    2022-05-23 Victoria Day\n    2022-07-01 Canada Day\n    2022-08-01 Civic Holiday\n    2022-09-05 Labour Day\n    2022-10-10 Thanksgiving\n    2022-12-25 Christmas Day\n    2022-12-26 Boxing Day\n    2022-12-27 Christmas Day (Observed)\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/OmoMicheal/marketanalysis/archive/refs/tags/0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/OmoMicheal/marketanalysis",
    "keywords": "trading,NYSE,NASDAQ,market holidays,trading days",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marketanalysis",
    "package_url": "https://pypi.org/project/marketanalysis/",
    "platform": "any",
    "project_url": "https://pypi.org/project/marketanalysis/",
    "project_urls": {
      "Download": "https://github.com/OmoMicheal/marketanalysis/archive/refs/tags/0.1.tar.gz",
      "Homepage": "https://github.com/OmoMicheal/marketanalysis"
    },
    "release_url": "https://pypi.org/project/marketanalysis/0.11/",
    "requires_dist": [
      "datetime",
      "python-dateutil",
      "six"
    ],
    "requires_python": "",
    "summary": "A repository for market holidays and trading days in NYSE and NASDAQ",
    "version": "0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10060172,
  "releases": {
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "851295b573ed3d8aac6f6784fa050d7b56885d12c1fa406f23a18be3f355555e",
          "md5": "3ee0dce7fc80a918c5cc09a0a8d46b1f",
          "sha256": "ba697a79fac2ca8934447ecc14726a752ad3a7981a83117cf679bf1550e543fd"
        },
        "downloads": -1,
        "filename": "marketanalysis-0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ee0dce7fc80a918c5cc09a0a8d46b1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4783,
        "upload_time": "2021-04-14T08:53:49",
        "upload_time_iso_8601": "2021-04-14T08:53:49.440140Z",
        "url": "https://files.pythonhosted.org/packages/85/12/95b573ed3d8aac6f6784fa050d7b56885d12c1fa406f23a18be3f355555e/marketanalysis-0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "851295b573ed3d8aac6f6784fa050d7b56885d12c1fa406f23a18be3f355555e",
        "md5": "3ee0dce7fc80a918c5cc09a0a8d46b1f",
        "sha256": "ba697a79fac2ca8934447ecc14726a752ad3a7981a83117cf679bf1550e543fd"
      },
      "downloads": -1,
      "filename": "marketanalysis-0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3ee0dce7fc80a918c5cc09a0a8d46b1f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4783,
      "upload_time": "2021-04-14T08:53:49",
      "upload_time_iso_8601": "2021-04-14T08:53:49.440140Z",
      "url": "https://files.pythonhosted.org/packages/85/12/95b573ed3d8aac6f6784fa050d7b56885d12c1fa406f23a18be3f355555e/marketanalysis-0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}