{
  "info": {
    "author": "ChenSmallX",
    "author_email": "641751205@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Natural Language :: Chinese (Simplified)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# CqBear: QQ 机器熊框架\n\nA bear-like bot python module for go-cqhttp.\n\n一款 go-cqhttp 服务端的“类熊” QQ 机器人 python 框架。\n\n> 将机器人称作熊 `Bear`，\n> 将接受到的消息事件称作声音 `Sound`，\n> 将发出的控制消息称作吼叫 `Roar`，\n> 将规范化的符号表达(例如 at、图片等)称为句子 `Sentence`，\n> 将事件驱动回调称为反应 `react`，\n> 将计划任务称为记忆 `remember` 和 `job` 等。\n\n## 环境准备\n\nCqBear 充当的是一个 go-cqhttp 行为的控制器的角色，所以真正的 QQ 是运行在 go-cqhttp 中的，CqBear 只是提供了一个 python 语言的 go-cqhttp API 层。\n所以在使用 CqBear 之前，需要先准备好 go-cqhttp。\n\n### 下载并运行 go-cqhttp\n\n#### 下载\n\n- Windows PC\n\n    下载：[go-cqhttp_windows_386.exe(32位系统)](https://github.com/Mrs4s/go-cqhttp/releases/latest/download/go-cqhttp_windows_386.exe) 或 [go-cqhttp_windows_amd64.exe(64位系统)](https://github.com/Mrs4s/go-cqhttp/releases/latest/download/go-cqhttp_windows_amd64.exe) (链接均链接到最新的 go-cqhttp 构建件)\n\n- 其他系统环境\n\n    前往 go-cqhttp 的 github-release 下载 **对应环境** 的预编译程序即可。\n\n    > <https://github.com/Mrs4s/go-cqhttp/releases>\n\n    解压 `.tar.gz` 包命令：\n\n    ```sh\n    tar -xzvf archive.tar.gz\n    ```\n\n- 自编译运行\n\n    自行准备 Golang 环境。\n\n    ```sh\n    git clone https://github.com/Mrs4s/go-cqhttp.git\n    cd go-cqhttp\n    go build -ldflags \"-s -w -extldflags '-static'\"\n    ```\n\n    构建前可以使用 goproxy 国内代理来加速 go 依赖安装速度。\n\n    ```sh\n    go env -w GOPROXY=https://goproxy.cn,direct\n    ```\n\n    具体 go-cqhttp 构建文档：<https://docs.go-cqhttp.org/guide/quick_start.html#%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E6%9E%84%E5%BB%BA>。\n\n#### 运行 go-cqhttp\n\n首次运行 go-cqhttp 在选择通信方式后(CqBear 使用的是 HTTP 通信)会自动生成 config.yml 配置文件，修改 config.yml 中必要的配置和与 cqbear 相关的配置后，重启 go-cqhttp 即可。\n\n> windows 端 双击运行\n>\n> linux 端 `./go-cqhttp`(首次运行推荐不带参数运行) 或 `./go-cqhttp faststart`(跳过各项检查，快速启动)\n\n其中必要的配置：\n\n- `account.uin`： QQ 账号\n- `account.password`：密码，若使用扫码登录则无需填写这项\n\n其中与 cqbear 相关的配置如下：\n\n- `servers.http.host`: go-cqhttp 服务监听的地址，若和 cqbear 运行在同一台机器中，则填写 \"127.0.0.1\"，若不同则填写 \"0.0.0.0\"【此项需要在 cqbear 中使用】\n- `servers.http.port`: go-cqhttp 服务监听的端口，可以使用默认的 `5700`，也可以自定义【此项需要在 cqbear 中使用】\n- `servers.http.post.url`: cqbear 或其他接收 go-cqhttp 上报消息的服务端，此处可填写 \"127.0.0.1:5701\" 或其他地址【此项需要在 cqbear 中使用】\n\n### CqBear 快速开始 Quick Start\n\n#### 安装\n\n```sh\npython -m pip install cqbear\n```\n\n#### 示例\n\n```py\nfrom cqbear.bear import CqBear\nfrom cqbear.roar import (\n    SendPrivateMessage,\n    SendGroupMessage\n)\nfrom cqbear.sound import (\n    FriendPrivateMessage,\n    NormalGroupMessage\n)\nfrom cqbear.sentence import At\n\n@CqBear.react(NormalGroupMessage)  # 对 NormalGroupMessage 消息进行反应操作\ndef reply_group(bear: CqBear, msg: NormalGroupMessage):\n    \"\"\"\n    监听并回复群消息\n    \"\"\"\n    # 检查群号是否为 66666 以及 是否 at 了自己\n    if msg.group_id == 66666 and At().set_user_id(12345).has_me(msg.raw_message):\n        roar = SendGroupMessage()  # 创建群消息\n        roar.set_group_id(msg.group_id)     # 设置群号\n        roar.set_message(\"why you at me?\")  # 设置消息内容\n        bear.speak(roar)  # 发送消息\n\n@CqBear.react(FriendPrivateMessage)  # 对 FriendPrivateMessage 消息进行反应操作\ndef reply_friend(bear: CqBear, msg: FriendPrivateMessage):\n    \"\"\"\n    监听并回复好友信息\n    \"\"\"\n    # 检查私聊好友的 QQ 号是否为 987654321\n    if msg.user_id == 987654321:\n        roar = SendPrivateMessage()      # 创建私聊消息\n        roar.set_user_id(msg.user_id)    # 设置对方 QQ 号\n        roar.set_message(\"this is an example message\")  # 设置消息内容\n        bear.speak(roar)  # 发送消息\n\nbear = CqBear(\n    addr=\"127.0.0.1\",       # cqbear 监听的地址\n    port=5701,              # cqbear 监听的端口\n    cq_addr=\"127.0.0.1\",    # go-cqhttp 监听的地址\n    cq_port=5700,           # go-cqhttp 监听的端口\n    qq=12345                # 当前机器人的 qq 号\n)\nbear.start()                # 开始监听消息\n```\n\n### 初级使用指南\n\n建议使用带有 **【自动补全】** 和 **【提示doc】** 的 IDE 或 编辑器进行编码！\n\n建议使用带有 **【自动补全】** 和 **【提示doc】** 的 IDE 或 编辑器进行编码！\n\n建议使用带有 **【自动补全】** 和 **【提示doc】** 的 IDE 或 编辑器进行编码！\n\n> 重要的事情说三遍。\n\ncqbear 的核心组件为 CqBear，定义在 cqbear.bear 中，可使用 `from cqbear.bear import CqBear` 引入。\n\n#### 熊\n\n- `cqbear.bear.CqBear`\n\n    > 熊\n    >\n    > 完整的 QQ 机器熊类，包括了自动监听 go-cqhttp 上报消息、对不同的声音(消息)类型执行对应的反应回调、定时执行记忆(计划)任务等功能。\n\n    最基础的创建熊实例和开始运行：\n\n    ```py\n    from cqbear.bear import CqBear\n    bear = CqBear(\n        addr=\"127.0.0.1\",       # cqbear 监听的地址\n        port=5701,              # cqbear 监听的端口\n        cq_addr=\"127.0.0.1\",    # go-cqhttp 监听的地址\n        cq_port=5700,           # go-cqhttp 监听的端口\n        qq=12345                # 当前机器人的 qq 号\n    )\n    bear.start()                # 开始监听声音和执行定时任务\n    ```\n\n    可以通过 **装饰器** 注册声音反应和记忆任务，但是所有 **使用装饰器注册的** 声音反应和记忆任务必须定义在 **创建 CqBear 实例之前** 。装饰器类型：\n\n    1. 注册声音反应：`@CqBear.react(Sound_Type)`\n    2. 注册记忆任务：`@CqBear.remember(remember.Job)`\n\n    在 CqBear 实例开始运行后，需要使用 CqBear 实例的 `add_react` 和 `add_remember` 方法动态地添加声音反应和记忆任务。\n\n  - 注册声音(消息)反应\n\n    例：\n\n    ```py\n    from cqbear.bear import CqBear\n    from cqbear.sound import NormalGroupMessage\n\n    @CqBear.react(NormalGroupMessage)\n    def foo(bear: CqBear, msg: NormalGroupMessage):\n        ...\n    ```\n\n    声音类型定义在 `cqbear.sound` 中，定义的回调函数 **需要且只要** 2个参数：\n\n    - bear： 监听到消息的 CqBear 实例\n    - msg： 监听的消息类型实例\n\n    动态添加声音事件反应回调的方法：\n\n    ```py\n    from cqbear.bear import CqBear\n    from cqbear.sound import NormalGroupMessage\n    bear = CqBear(...)\n    # bear 已经被初始化和正在运行\n\n    # 定义回调函数\n    def bar(bear: CqBear, msg: NormalGroupMessage):\n        ...\n\n    # 添加对应声音类型的反应回调\n    bear.add_react(NormalGroupMessage, bar)\n    ```\n\n  - 注册记忆(计划)任务\n\n    例：\n\n    ```py\n    from cqbear.bear import CqBear\n    from cqbear.remember import every\n\n    @CqBear.remember(every().hour.at(\":0:0\"))  # 每 1 小时的 0 分 0 秒执行\n    def foo(bear: CqBear):\n        ...\n\n    # 更多记忆任务装饰器使用例子\n    @CqBear.remember(every(2).minute.at(\"::24\"))  # 每 2 分钟的 24 秒执行\n    @CqBear.remember(every(3).day.at(\"15:30:00\"))  # 每 3 天的 15：30 执行\n    @CqBear.remember(every().Tuesday.at(\"5:30:00\"))  # 每 周二 的 5：30 执行\n    @CqBear.remember(every().Friday)  # 每 周五 的 {当前 bear 程序运行时间} 执行\n    @CqBear.remember(every().month_day(7).at(\"15\"))  # 每个月的 7 日的 15：00 执行\n    import calendar\n    @CqBear.remember(every().week_day(calendar.SUNDAY).at(\"3:24\"))  # 每周日的 3：24 执行\n    ```\n\n    记忆任务的控制主体为 `cqbear.remember.Remember` 和 `cqbear.remember.Job`，前者为任务轮询和执行组件，后者为任务定义和检测组建。其中，CqBear 中已经内置了一个 `Remember` 实例用于执行定义好的 `Job`。\n\n    **通过装饰器注册** 的记忆任务的参数 **需要且只要** 1 个参数。`注意：是通过装饰器注册的记忆任务才有这项约束`\n\n    - bear：用于执行任务的 CqBear 实体\n\n    动态添加记忆任务的方法：\n\n    ```py\n    from cqbear.bear import CqBear\n    from cqbear.remember import every, Job\n    bear = CqBear(...)\n    # bear 已经被初始化和正在运行\n\n    def foo(bear: CqBear):  # 使用 bear 作为参数的回调函数\n        ...\n\n    def bar(func: Callable, *args, **kwargs):  # 传入一个回调以及任意参数的函数\n        ...\n\n    def foobar(bear: CqBear): # 同样使用 bear 作为参数的回调函数\n        ...\n\n    # 定义一个 Job 实体，并在 to_do 方法中传入其调用的任务函数和要使用的参数\n    # Job 的 to_do 方法接受一个回调函数 以及若干个回调函数需要的参数，此处传入的 bear 为 foo 需要的参数\n    job_a = every(2).hour.at(\"4:00:00\").to_do(foo, bear)\n\n    # 也可直接通过 cqbear.remember.Job 创建 Job 实体，并通过 Job 自身的 every 方法指定间隔单位个数\n    # 此处传入的 bar 为回调函数，而后续的 foo 和 bear 为 bar 需要的参数\n    job_b = Job().every(15).minute.at(\"::20\").to_do(bar, foo, bear)\n\n    # 定义一个没有配置 执行回调函数 的记忆任务\n    job_c = every(30).second\n\n    # 将 job_a 和 job_b 注册到 bear 中\n    bear.add_remember(job_a)  # 当没有传入函数作为参数时，需要保证 job_a.runable 为真值\n    bear.add_remember(job_b)\n    # 当传入的 job_c 没有配置执行函数时，可以给 add_remember 方法加上一个接受 bear 为参数的函数作为入参，add_remember 方法会自动将对应的 bear 实体传入此函数。\n    # 当传入的 job_c 也已经绑定了函数，则 add_remember 的函数入参不生效(不覆盖 job_c 的执行函数)。\n    bear.add_remember(job_c, foobar)\n    ```\n\n#### 声音(消息) cqbear.sound\n\n> 声音的基类 `Sound`\n\nCqBear 中产生的声音是从 go-cqhttp 端主动上报到 CqBear 的监听端口中，并由 `SonudUnderstander` 解析并实例化的。可以直接通过 `.` 来访问声音中所带有的参数，例如：\n\n```py\n@CqBear.react(NormalGroupMessage)\ndef reply_group(bear: CqBear, msg: NormalGroupMessage):\n    group_id = msg.group_id\n    sender_id = msg.user_id\n    sender_detail = msg.sender\n    message = msg.message\n    raw_message = msg.raw_message  # raw_message 为纯字符串，message 则会是未转换前的消息格式\n    ...\n```\n\n在编码的过程中可以通过有自动补全和提示doc的编码工具进行编码以获得最佳的体验。\n\n获得所有声音类型和说明的方法：\n\n```sh\n$ python\n>>> from cqbear.sound import doc as sound_doc\n>>> sound_doc()\n```\n\n每种声音的详细参数以及描述可以在 [go-cqhttp 的事件文档](https://docs.go-cqhttp.org/event/)中获取。\n\n> 如果发现有未实现的声音，请提交相关 issue 或 pr。\n\n#### 吼叫(API指令) cqbear.roar\n\n> 吼叫的基类 `Roar`\n\nCqBear 中使用的吼叫是对 go-cqhttp api 的一层封装起到更好用的作用，在创建吼叫实例后，可使用实例的 `.set_xxx` 方法对其参数进行设置，例如：\n\n```py\n@CqBear.react(FriendPrivateMessage)\ndef reply_friend(bear: CqBear, msg: FriendPrivateMessage):\n    roar = SendPrivateMessage()    # 吼叫\n    roar.set_user_id(msg.user_id)\n    roar.set_message(\"你好呀~\")\n    bear.speak(roar)  # 在 speak 之后，可继续编辑 roar 用于再次发送\n    ...\n```\n\n在编码的过程中可以通过有自动补全和提示doc的编码工具进行编码以获得最佳的体验。\n\n获得所有吼叫类型和说明的方法：\n\n```sh\n$ python\n>>> from cqbear.roar import doc as roar_doc\n>>> roar_doc()\n```\n\n每种吼叫的详细参数以及描述可以在 [go-cqhttp 的 API 文档](https://docs.go-cqhttp.org/api/)中获取。\n\n> 如果发现有未实现的吼叫，请提交相关 issue 或 pr。\n\n#### 句子(CQ code) cqbear.sentence\n\n> 句子的基类 `Sentence`\n\nCqBear 中将 CoolQ 中的 CQCode 概念称作句子，用于表示消息中中的各种元素，例如 at(`At`)，回复(`Reply`)，图片(`Image`)，表情(`Face`) 等。句子可以被发出也可以被收到，所以关于句子的使用方法会稍微多一些。\n\n- 创建句子实例并设置参数。句子中也是需要有参数来丰富的，例如 at 句子需要有被 at 对象的 qq 号码，必要时还需要设置 at 时展示的文字等。设置参数时，可以使用实例的 `.set_xxx` 方法对参数进行设置，以及可以将创建的句子实体转换成，例：\n\n    ```py\n    from cqbear.sentence import At, Reply, Image\n    at = At().set_user_id(123456)\n    reply = Reply().set_message_id(-1588745453)\n    image = Image().set_file_name(\"a.jpg\").set_utl(\"https://xxx.xxx/xxx/a.jpg\")\n\n    print(at.to_str())\n    print(str(reply))\n    ```\n\n- 从消息的 raw_message 中提取句子列表。CqBear 中内置了对句子的解析和识别功能，提供方便的代码开发流程。例：\n\n    ```py\n    from cqbear.sentence import SentenceUnderstander, At\n\n    @CqBear.react(FriendPrivateMessage)\n    def reply_friend(bear: CqBear, msg: FriendPrivateMessage):\n        str_list, sentence_list = SentenceUnderstander.extract_sentence(msg.raw_message)\n        for sentence in sentence_list:\n            if isinstance(sentence, At):\n                ...\n    ```\n\n- 检查消息中是否包含了某特定句子，例：\n\n    ```py\n    from cqbear.sentence import SentenceUnderstander, At\n    from cqbear.sound import NormalGroupMessage\n\n    @CqBear.react(NormalGroupMessage)\n    def reply_friend(bear: CqBear, msg: NormalGroupMessage):\n        if At().set_user_id(bear.qq).has_me(msg.raw_message):\n            ...\n    ```\n\n在编码的过程中可以通过有自动补全和提示doc的编码工具进行编码以获得最佳的体验。\n\n获得所有句子类型和说明的方法：\n\n```sh\n$ python\n>>> from cqbear.sentence import doc as sentence_doc\n>>> sentence_doc()\n```\n\n每种吼叫的详细参数以及描述可以在 [go-cqhttp 的 CQcode 文档](https://docs.go-cqhttp.org/cqcode/)中获取。\n\n> 如果发现有未实现的句子，请提交相关 issue 或 pr。\n\n#### 熊身体的其他部分(不建议独立使用)\n\nCqBear 中定义了多个组件分别用于执行不同的工作，但在 CqBear 种都进行了二次封装，无法直接通过 CqBear 控制，若需要单独使用其中某项功能，则可以独立定义使用：\n\n- `cqbear.bear.BearEar`\n\n    > 耳朵：\n    >\n    > 顾名思义，是用于听声音(消息)的的。\n    >\n    > cqbear 将消息定义为了 N 种声音(`Sound`)，可在 `cqbear.sound` 中获得所有声音的定义。\n\n    `BearEar` 中使用多线程创建了基于 `Flask` 的 http 服务端。后续有计划将 `Flask` 更换为基于 socket 的 http 服务端。\n\n    单独使用 `BearEar`，可以创建一个可以监听 go-cqhttp 上报消息的服务端，获取到的不同类型的消息会转为具体的声音类实体并存储在声音队列中，可通过 `BearEar.get_sound` 方法获取一个声音实体。\n\n    独立使用 BearEar 的例子：\n\n    ```py\n    from cqbear.bear import BearEar\n    ear = Bear(\n        addr=\"127.0.0.1\",\n        port=5701,\n        secret=\"\"    # 为了兼容 go-cqhttp 对上报消息加密功能预留的接口，暂时还未实现\n    )\n    ear.start_listen()  # start_listen 中使用了多线程，是个非阻塞的方法\n\n    while True:\n        sound = ear.get_sound()  # 从声音队列中获取一个声音\n        ...\n\n        if ...:\n            ear.clear_sound()               # 清空声音队列\n        if ... and ear.is_listening:        # 可使用 is_listening 判断 ear 当前是否会将声音推入队列\n            ear.ignore_sound()              # 可使用 ignore_sound 控制 ear 不将声音存入声音队列\n        if ... and not ear.is_listening:\n            ear.listen_sound()              # 可使用 listen_sound 控制 ear 开始将声音存入声音队列，默认情况为开启\n        if ...:\n            break\n\n    ear.stop_listen()  # 停止监听进程\n    ```\n\n- `cqbear.bear.BearMouth`\n\n    > 嘴巴：\n    >\n    > 熊通过嘴巴说话(向 go-cqhttp 发出消息)。\n    >\n    > cqbear 将发出消息定义为了 N 种熊吼(`Roar`)，可在 `cqbear.roar` 种获得所有熊吼的定义。\n\n    `BearMouth` 是一个可以将熊吼 Roar 转为 http 请求(`request`)发送到 go-cqhttp，并返回请求的回应(`response`)。\n\n    `BearMouth` 可单独定义实体并用于发送熊吼，例：\n\n    ```py\n    import datetime\n    import time\n    from cqbear.bear import BearMouth\n    from cqbear.roar import SendGroupMessage\n\n    mouth = BearMouth(\n        addr=\"127.0.0.1\",   # go-cqhttp 监听的地址\n        port=5700           # go-cqhttp 监听的端口\n    )\n\n    while True:\n        time.sleep(0.5)\n\n        # 一个简单的整点报时功能\n        if datetime.datetime.now().minute == 0 and datetime.datetime.now().second == 0:\n            group_roar = SendGroupMessage()\n            group_roar.set_group_id(123456789).set_message(f\"现在是{datetime.datetime.now().hour}点\")\n\n            # 也可以这样，只不过代码会显得比较长\n            group_roar = SendGroupMessage().set_group_id(123456789).set_message(f\"现在是{datetime.datetime.now().hour}点\")\n\n            if not mouth.speakable:  # 可以使用 speakable 判断当前 mouth 是否关闭了发送消息的功能\n                mouth.free()  # 只有在 free 的情况下，speak方法才生效\n            ret_code, ret_json_data = mouth.speak(roar)\n            ...\n\n        if ...:\n            mouth.free()\n        elif ...:\n            mouth.shutup()\n\n        if ...:\n            break\n    ```\n\n- `cqbear.bear.BearBrain`\n\n    > 大脑：\n    >\n    > 脑是熊思考的核心，“对声音做出反应”以及“记忆任务”都是在大脑中进行的。其中“对声音做出反应”的声音是从耳朵中获取的。\n\n    `BearBrain` 会将声音反应(声音类型和回调函数的关系)和记忆任务(计划任务实例和计划任务控制模块)保存起来，在启动 BearBrain 的“思考”机制后，会通过给定的接口去获取声音并执行对应的函数，或检查是否到了执行计划任务的时间要去执行设定好的任务。\n\n    `BearBrain` 可以单独使用，但需要自己定义许多东西。例如：\n\n    ```py\n    from cqbear.bear import BearBrain\n    from cqbear.sound import (\n        Sound,\n        NormalGroupMessage,\n        FriendPrivateMessage,\n        AnonymousGroupMessage\n    )\n    from cqbear.remember import Job\n    from typing import Optional\n\n    def get_sound() -> Optional[Sound]:  # 定义一个用于获取声音的函数 返回 None 的时候 brain 不做操作\n        ...\n\n    react_map = {\n        NormalGroupMessage: [foo],\n        FriendPrivateMessage: [foo, bar]\n    }  # 声音类型和回调 *列表* 的对应关系\n    remember_map = {\n        Job().every().hour.at(\":24:00\"): foobar\n    }  # 计划任务和回调函数的对应关系\n\n    brain = BearBrain(\n        bear=None,\n        listen_cb=get_sound,    # 传入一个获取声音的函数，一般是 BearEar.get_sound 方法\n        speak_cb=None,          # speak_cb 暂时还没有功能依赖，所以可以传入 None\n        react_map=react_map,        # 将两个 map 传入\n        remember_map=remember_map\n    )\n\n    if not brain.is_thinking:   # brain 不可重复 start_think\n        brain.start_think()     # start_think 使用了多线程，所以是不阻塞的\n\n    brain.add_react(AnonymousGroupMessage, foooobarar)  # 动态添加声音反应和记忆任务\n    brain.add_remember(Job()..., barfoo)\n\n    if brain.is_thinking:\n        brain.stop_think()\n    ```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ChenSmallX/CqBear",
    "keywords": "go-cqhttp,qqbot,Mirai,MiraiGo",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cqbear",
    "package_url": "https://pypi.org/project/cqbear/",
    "platform": "",
    "project_url": "https://pypi.org/project/cqbear/",
    "project_urls": {
      "Homepage": "https://github.com/ChenSmallX/CqBear"
    },
    "release_url": "https://pypi.org/project/cqbear/0.4/",
    "requires_dist": [
      "Flask (==2.0.1)",
      "requests (==2.22.0)",
      "setuptools (==45.2.0)"
    ],
    "requires_python": ">=3.4.0",
    "summary": "A bear-like bot python module for go-cqhttp.",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11952771,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c212ad45f6e9db35dfaa6fc3f07a75fb8ddb041616faf63400a2a54be1760139",
          "md5": "2d44d70e4e448b99a44b6c1d474170f3",
          "sha256": "3f32bc20143453f1f49e273966c953cb0ae52161672f1f2ca5c43ca31e90757e"
        },
        "downloads": -1,
        "filename": "cqbear-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d44d70e4e448b99a44b6c1d474170f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4.0",
        "size": 24093,
        "upload_time": "2021-10-10T15:36:18",
        "upload_time_iso_8601": "2021-10-10T15:36:18.378381Z",
        "url": "https://files.pythonhosted.org/packages/c2/12/ad45f6e9db35dfaa6fc3f07a75fb8ddb041616faf63400a2a54be1760139/cqbear-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22c929b5fc77029f9cd6ab6d318ce5ca2ebb8e0b95640c92850239b0c0213dbd",
          "md5": "dc05c403c3002e261919f9b7b858906f",
          "sha256": "006bab207eb7bb00db2defd7ca29a2f99f10a94dcc1dfa199467c0f74d8c2faf"
        },
        "downloads": -1,
        "filename": "cqbear-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dc05c403c3002e261919f9b7b858906f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4.0",
        "size": 11002,
        "upload_time": "2021-10-10T15:36:20",
        "upload_time_iso_8601": "2021-10-10T15:36:20.121741Z",
        "url": "https://files.pythonhosted.org/packages/22/c9/29b5fc77029f9cd6ab6d318ce5ca2ebb8e0b95640c92850239b0c0213dbd/cqbear-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "591e9c4afc3724c5c8f1d37764e56f241e5900d817c5689eb15cc673376e6ffc",
          "md5": "3b6c739c6aaea86326fc48299913d40c",
          "sha256": "2bb52808b619da77af221fe2706d404323fd8e314e11e53b2c3dea2d6c9cde9d"
        },
        "downloads": -1,
        "filename": "cqbear-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b6c739c6aaea86326fc48299913d40c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4.0",
        "size": 39869,
        "upload_time": "2021-11-02T08:33:33",
        "upload_time_iso_8601": "2021-11-02T08:33:33.590645Z",
        "url": "https://files.pythonhosted.org/packages/59/1e/9c4afc3724c5c8f1d37764e56f241e5900d817c5689eb15cc673376e6ffc/cqbear-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b89b424b2a75e91da8eed13ca45f41e2843321fb2f7d51731ebb116e602c7af",
          "md5": "3e12d9cd56dcb77d9754c51231a56139",
          "sha256": "25cf728993a211852dbc3df400702a8381aeec7d63136eeac17692b86083e975"
        },
        "downloads": -1,
        "filename": "cqbear-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3e12d9cd56dcb77d9754c51231a56139",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4.0",
        "size": 38730,
        "upload_time": "2021-11-02T08:33:35",
        "upload_time_iso_8601": "2021-11-02T08:33:35.309320Z",
        "url": "https://files.pythonhosted.org/packages/7b/89/b424b2a75e91da8eed13ca45f41e2843321fb2f7d51731ebb116e602c7af/cqbear-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "172f7f2cd8959e68d695f3960cdf1f8ab1e8a9415b07f68f1061ec79ee39779c",
          "md5": "f59656455f080bf0ee57d620cebc792a",
          "sha256": "3cd45f22b99af531558d89c2e0d82a2f1938f37786c5992270b15eb43c609cf9"
        },
        "downloads": -1,
        "filename": "cqbear-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f59656455f080bf0ee57d620cebc792a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4.0",
        "size": 45877,
        "upload_time": "2021-11-05T10:06:14",
        "upload_time_iso_8601": "2021-11-05T10:06:14.778974Z",
        "url": "https://files.pythonhosted.org/packages/17/2f/7f2cd8959e68d695f3960cdf1f8ab1e8a9415b07f68f1061ec79ee39779c/cqbear-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04ec26ed0570479227320bac4c1842208599f74c5c3e60d4d16b3ae39c28f377",
          "md5": "08e11d2543b34e92a49f5e00e2e49399",
          "sha256": "191ad2dd6b20c7367d5e880b158f7ac2ca1cfe91ef03acde2462aa82f9f9f283"
        },
        "downloads": -1,
        "filename": "cqbear-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "08e11d2543b34e92a49f5e00e2e49399",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4.0",
        "size": 50246,
        "upload_time": "2021-11-05T10:06:16",
        "upload_time_iso_8601": "2021-11-05T10:06:16.998947Z",
        "url": "https://files.pythonhosted.org/packages/04/ec/26ed0570479227320bac4c1842208599f74c5c3e60d4d16b3ae39c28f377/cqbear-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ae41f82a23bb4713f4ffd4b1961f4da9433210fc1f709bc712b7c6fdd853f40",
          "md5": "5cf1e77158de3a747c231863cb6de081",
          "sha256": "ac4d65ffc48629652a1e9d25c8b14bf70f11c1fda7e1c390acf0451ec24b9fb8"
        },
        "downloads": -1,
        "filename": "cqbear-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cf1e77158de3a747c231863cb6de081",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4.0",
        "size": 47773,
        "upload_time": "2021-11-07T15:44:01",
        "upload_time_iso_8601": "2021-11-07T15:44:01.991727Z",
        "url": "https://files.pythonhosted.org/packages/8a/e4/1f82a23bb4713f4ffd4b1961f4da9433210fc1f709bc712b7c6fdd853f40/cqbear-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "916556f05ff25cc7acc326f80f0f331b91b6f718e5fca5d7a15a0dd16bfa26a8",
          "md5": "69748b63a6d76558a565aef586bbbbf2",
          "sha256": "f32fdbd5837ea7a2501cc48dc6972958a7a163870dbb76b98a6dc72f84c45c6e"
        },
        "downloads": -1,
        "filename": "cqbear-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "69748b63a6d76558a565aef586bbbbf2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4.0",
        "size": 53473,
        "upload_time": "2021-11-07T15:44:04",
        "upload_time_iso_8601": "2021-11-07T15:44:04.065116Z",
        "url": "https://files.pythonhosted.org/packages/91/65/56f05ff25cc7acc326f80f0f331b91b6f718e5fca5d7a15a0dd16bfa26a8/cqbear-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ae41f82a23bb4713f4ffd4b1961f4da9433210fc1f709bc712b7c6fdd853f40",
        "md5": "5cf1e77158de3a747c231863cb6de081",
        "sha256": "ac4d65ffc48629652a1e9d25c8b14bf70f11c1fda7e1c390acf0451ec24b9fb8"
      },
      "downloads": -1,
      "filename": "cqbear-0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5cf1e77158de3a747c231863cb6de081",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4.0",
      "size": 47773,
      "upload_time": "2021-11-07T15:44:01",
      "upload_time_iso_8601": "2021-11-07T15:44:01.991727Z",
      "url": "https://files.pythonhosted.org/packages/8a/e4/1f82a23bb4713f4ffd4b1961f4da9433210fc1f709bc712b7c6fdd853f40/cqbear-0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "916556f05ff25cc7acc326f80f0f331b91b6f718e5fca5d7a15a0dd16bfa26a8",
        "md5": "69748b63a6d76558a565aef586bbbbf2",
        "sha256": "f32fdbd5837ea7a2501cc48dc6972958a7a163870dbb76b98a6dc72f84c45c6e"
      },
      "downloads": -1,
      "filename": "cqbear-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "69748b63a6d76558a565aef586bbbbf2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4.0",
      "size": 53473,
      "upload_time": "2021-11-07T15:44:04",
      "upload_time_iso_8601": "2021-11-07T15:44:04.065116Z",
      "url": "https://files.pythonhosted.org/packages/91/65/56f05ff25cc7acc326f80f0f331b91b6f718e5fca5d7a15a0dd16bfa26a8/cqbear-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}