{
  "info": {
    "author": "Plotly",
    "author_email": "almar.klein@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: User Interfaces"
    ],
    "description": "![CI](https://github.com/plotly/dash-slicer/workflows/CI/badge.svg)\n\n# dash_slicer\n\nA volume slicer for Dash\n\nCreate slice views along a given dimension, and allows multiple such\nviews to be linked, to help with navigation. Supports anisotropic data,\nmask overlays, and more.\n\n<img width='700' src='https://user-images.githubusercontent.com/3015475/102329845-28a67880-3f89-11eb-82de-2cc2ff463a53.png'></img>\n\n\n## Status\n\nThis work is marked as alpha - some essential features are still in\ndevelopment, and some parts of the API may change in future releases.\n\n\n## Installation\n\n```\n$ pip install dash-slicer\n```\n\nDash-slicer depends on Python 3.6+ plus some [dependencies](requirements.txt).\n\n\n## Usage example\n\n```py\nimport dash\nimport dash_html_components as html\nfrom dash_slicer import VolumeSlicer\nimport imageio\n\napp = dash.Dash(__name__, update_title=None)\n\nvol = imageio.volread(\"imageio:stent.npz\")\nslicer = VolumeSlicer(app, vol)\n\napp.layout = html.Div([slicer.graph, slicer.slider, *slicer.stores])\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True, dev_tools_props_check=False)\n```\n\nSee [the guide](https://dash.plotly.com/slicer) for more examples and explanations.\nA complete app that uses dash-slicer is [dash-vocid-xray](https://dash-gallery.plotly.host/dash-covid-xray/)\n([source](https://github.com/plotly/dash-sample-apps/blob/master/apps/dash-covid-xray/app.py)).\n\n\n\n## License\n\nThis code is distributed under the MIT license.\n\n\n## Developers\n\n\n* Make sure that you have Python with the appropriate dependencies installed, e.g. via `venv`.\n* Run `pip install -e .` to do an in-place install of the package.\n* Run the examples using e.g. `python examples/all_features.py`\n\n* Use `black .` to autoformat.\n* Use `flake8 .` to lint.\n* Use `pytest .` to run the tests.\n* Use `python update_docs_in_readme.py` to update the readme when needed.\n\nOn every PR, an app with the same name as your branch is deployed to the Dash\nplayground instance so that you can change whether your changes did not break\nthe package.\n\nRelease procedure:\n\n* Bump version in `__init__.py` (and commit this change).\n* Run `git tag v?.? && git push origin v?.?`\n* On GH, turn that tag into a release and write release notes.\n* Clear the dist dir.\n* Run `python setup.py sdist bdist_wheel`\n* Run `twine upload dist/*`\n* Bump version of dash-slicer in dash-docs.\n\n\n## Reference\n\n<!--- The below is autogenerated - do not edit --->\n\n### The VolumeSlicer class\n\n**class `VolumeSlicer(app, volume, *, spacing=None, origin=None, axis=0, reverse_y=True, clim=None, scene_id=None, color=None, thumbnail=True)`**\n\nA slicer object to show 3D image data in Dash. Upon\ninstantiation one can provide the following parameters:\n\n* `app` (`dash.Dash`): the Dash application instance.\n* `volume` (`ndarray`): the 3D numpy array to slice through. The dimensions\n  are assumed to be in zyx order. If this is not the case, you can\n  use `np.swapaxes` to make it so.\n* `spacing` (tuple of `float`): the distance between voxels for each\n  dimension (zyx). The spacing and origin are applied to make the slice\n  drawn in \"scene space\" rather than \"voxel space\".\n* `origin` (tuple of `float`): the offset for each dimension (zyx).\n* `axis` (`int`): the dimension to slice in. Default 0.\n* `reverse_y` (`bool`): whether to reverse the y-axis, so that the origin of\n  the slice is in the top-left, rather than bottom-left. Default True.\n  Note: setting this to False affects performance, see #12. This has been\n  fixed, but the fix has not yet been released with Dash.\n* `clim` (tuple of `float`): the (initial) contrast limits. Default the min\n  and max of the volume.\n* `scene_id` (`str`): the scene that this slicer is part of. Slicers\n  that have the same scene-id show each-other's positions with\n  line indicators. By default this is derived from `id(volume)`.\n* `color` (`str`): the color for this slicer. By default the color\n  is a shade of blue, orange, or green, depending on the axis. Set\n  to empty string to prevent drawing indicators for this slicer.\n* `thumbnail` (`int` or `bool`): the preferred size of low-resolution data\n  to be uploaded to the client. If `False`, the full-resolution data are\n  uploaded client-side. If `True` (default), a default value of 32 is used.\n\nNote that this is not a Dash Component. The components that make\nup the slicer (and which must be present in the layout) are:\n`slicer.graph`, `slicer.slider`, and `slicer.stores`.\n\n**method `VolumeSlicer.create_overlay_data(mask, color=None)`**\n\nGiven a 3D mask array, create an object that can be used as\noutput for `slicer.overlay_data`. Set mask to `None` to clear the mask.\nThe color can be a hex color or an rgb/rgba tuple. Alternatively,\ncolor can be a list of such colors, defining a colormap.\n\n**property `VolumeSlicer.axis`** (`int`): The axis to slice.\n\n**property `VolumeSlicer.clim`**: A `dcc.Store` to be used as Output, representing the contrast\nlimits as a 2-element tuple. This value should probably not be\nchanged too often (e.g. on slider drag) because the thumbnail\ndata is recreated on each change.\n\n**property `VolumeSlicer.extra_traces`**: A `dcc.Store` to be used as an Output to define additional\ntraces to be shown in this slicer. The data must be a list of\ndictionaries, with each dict representing a raw trace object.\n\n**property `VolumeSlicer.graph`**: The `dcc.Graph` for this slicer. Use `graph.figure` to access the\nPlotly Figure object.\n\n**property `VolumeSlicer.nslices`** (`int`): The number of slices for this slicer.\n\n**property `VolumeSlicer.overlay_data`**: A `dcc.Store` to be used an Output for the overlay data. The\nform of this data is considered an implementation detail; users\nare expected to use `create_overlay_data` to create it.\n\n**property `VolumeSlicer.scene_id`** (`str`): The id of the \"virtual scene\" for this slicer. Slicers that have\nthe same scene_id show each-other's positions.\n\n**property `VolumeSlicer.slider`**: The `dcc.Slider` to change the index for this slicer. If you\ndon't want to use the slider, wrap it in a div with style\n`display: none`.\n\n**property `VolumeSlicer.state`**: A `dcc.Store` representing the current state of the slicer (present\nin slicer.stores). This store is intended for use as State or Input.\nIts data is a dict with the fields:\n\n* \"index\": the integer slice index.\n* \"index_changed\": a bool indicating whether the index changed since last time.\n* \"xrange\": the view range (2 floats) in the x-dimension (2D).\n* \"yrange\": the view range (2 floats) in the y-dimension (2D).\n* \"zpos\": the float position aling the axis, in scene coordinates.\n* \"axis\": the axis (int) for this slicer.\n* \"color\": the color (str) for this slicer.\n\nThe id of the store is a dictionary so it can be used in a\npattern matching Input. Its field are: context, scene, name.\nWhere scene is the scene_id and name is \"state\".\n\n**property `VolumeSlicer.stores`**: A list of `dcc.Store` objects that the slicer needs to work.\nThese must be added to the app layout. Note that public stores\nlike `state` and `extra_traces` are also present in this list.\n\n\n\n### Reacting to slicer state\n\nIt is possible to get notified of updates to slicer position and\nview ranges. To get this for all slicers with a specific scene_id, create\na [pattern matching input](https://dash.plotly.com/pattern-matching-callbacks)\nlike this:\n```py\nInput({\"scene\": scene_id, \"context\": ALL, \"name\": \"state\"})\n```\n\nSee the `state` property for details.\n\n\n### Setting slicer positions\n\nTo programatically set the position of the slicer, create a `dcc.Store` with\na dictionary-id that has the following fields:\n\n* 'context': a unique name for this store.\n* 'scene': the scene_id of the slicer objects to set the position for.\n* 'name': 'setpos'\n\nThe value in the store must be an 3-element tuple (x, y, z) in scene coordinates.\nTo apply the position for one dimension only, use e.g `(None, None, x)`.\n\n\n### Performance tips\n\nThere tends to be a lot of interaction in an application that contains\nslicer objects. To realize a smooth user experience, performance matters.\nHere are some tips to help with that:\n\n* Most importantly, when running the server in debug mode, consider setting\n  `dev_tools_props_check=False`.\n* Also consider creating the `Dash` application with `update_title=None`.\n* Setting `reverse_y` to False negatively affects performance. This will be\n  fixed in a future version of Plotly/Dash.\n* For a smooth experience, avoid triggering unnecessary figure updates.\n* When adding a callback that uses the slicer position, use the (rate limited)\n  `state` store rather than the slider value.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/plotly/dash-slicer",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dash-slicer",
    "package_url": "https://pypi.org/project/dash-slicer/",
    "platform": "",
    "project_url": "https://pypi.org/project/dash-slicer/",
    "project_urls": {
      "Homepage": "https://github.com/plotly/dash-slicer"
    },
    "release_url": "https://pypi.org/project/dash-slicer/0.3.0/",
    "requires_dist": [
      "pillow",
      "numpy",
      "plotly",
      "dash",
      "dash-core-components"
    ],
    "requires_python": ">=3.6.0",
    "summary": "A volume slicer for Dash",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8931201,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57e0ae3aebf3d80ee4c4e6567c7f630b2ebeea016da2c8f0f0d8cb6f758b3478",
          "md5": "7fbb8236225c7a02a19e6bfade2927b3",
          "sha256": "ed3e9da617596ddc90e2c61e2173dbcfa0c8f9dbad919f848899bd25eead2cc6"
        },
        "downloads": -1,
        "filename": "dash_slicer-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fbb8236225c7a02a19e6bfade2927b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 11930,
        "upload_time": "2020-12-02T10:40:32",
        "upload_time_iso_8601": "2020-12-02T10:40:32.684600Z",
        "url": "https://files.pythonhosted.org/packages/57/e0/ae3aebf3d80ee4c4e6567c7f630b2ebeea016da2c8f0f0d8cb6f758b3478/dash_slicer-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea2efad25bbde71d12b5bfba2e17f620ed944ab2af4cf2a77cafc9ccf7d14467",
          "md5": "56db779cc64ae16764193c3014c83e97",
          "sha256": "34af39a85db499128cb64c08a60a5f8d58136606dc868dd20679779cb0ee3aaa"
        },
        "downloads": -1,
        "filename": "dash-slicer-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "56db779cc64ae16764193c3014c83e97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 11417,
        "upload_time": "2020-12-02T10:40:33",
        "upload_time_iso_8601": "2020-12-02T10:40:33.766810Z",
        "url": "https://files.pythonhosted.org/packages/ea/2e/fad25bbde71d12b5bfba2e17f620ed944ab2af4cf2a77cafc9ccf7d14467/dash-slicer-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd8da190c1101ca7a4b1214024374fbcec302fe3ec56f671c057896ab828b354",
          "md5": "fb263f293c3e8eebeb270453ff931981",
          "sha256": "dac996e2204bc196c9d2b33604aaa22cc4aae78032ccccdd53edd5bda73cc863"
        },
        "downloads": -1,
        "filename": "dash_slicer-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb263f293c3e8eebeb270453ff931981",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 17315,
        "upload_time": "2020-12-09T16:08:30",
        "upload_time_iso_8601": "2020-12-09T16:08:30.635690Z",
        "url": "https://files.pythonhosted.org/packages/dd/8d/a190c1101ca7a4b1214024374fbcec302fe3ec56f671c057896ab828b354/dash_slicer-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7243b0e969f49c0bf254375234d07764fbbb0a8d95abd342e7e871adf5973416",
          "md5": "05fea1f905f316ef9c9f2a02ecae140c",
          "sha256": "7769b6ca351aeb0f07a20525f638d3e5af9af2ecf93afdf8683b901d02915209"
        },
        "downloads": -1,
        "filename": "dash-slicer-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "05fea1f905f316ef9c9f2a02ecae140c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 17303,
        "upload_time": "2020-12-09T16:08:31",
        "upload_time_iso_8601": "2020-12-09T16:08:31.548619Z",
        "url": "https://files.pythonhosted.org/packages/72/43/b0e969f49c0bf254375234d07764fbbb0a8d95abd342e7e871adf5973416/dash-slicer-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75080695aa75816bfa7023e643876a8532a67823fa2f74b18d6eb8911acb40a2",
          "md5": "96a00291169a68d7a4142ca46fe37fff",
          "sha256": "97efc7c350c1da20b7c8cc9a466aa7e9cc8e0bd778377adc7f62a1f661672670"
        },
        "downloads": -1,
        "filename": "dash_slicer-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96a00291169a68d7a4142ca46fe37fff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 20870,
        "upload_time": "2020-12-18T07:51:50",
        "upload_time_iso_8601": "2020-12-18T07:51:50.646351Z",
        "url": "https://files.pythonhosted.org/packages/75/08/0695aa75816bfa7023e643876a8532a67823fa2f74b18d6eb8911acb40a2/dash_slicer-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5a7d8b2b1cefadfe96dbffe5b6400e30eb1507bbb54fb7ffd71c9652b5f3770",
          "md5": "4174073d34bf71a61e25d3cf9d6f7e00",
          "sha256": "b163ff61631a4ed2871272a731c4c70152fc7302c35186d107b83919b258794a"
        },
        "downloads": -1,
        "filename": "dash-slicer-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4174073d34bf71a61e25d3cf9d6f7e00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 20473,
        "upload_time": "2020-12-18T07:51:52",
        "upload_time_iso_8601": "2020-12-18T07:51:52.682790Z",
        "url": "https://files.pythonhosted.org/packages/a5/a7/d8b2b1cefadfe96dbffe5b6400e30eb1507bbb54fb7ffd71c9652b5f3770/dash-slicer-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75080695aa75816bfa7023e643876a8532a67823fa2f74b18d6eb8911acb40a2",
        "md5": "96a00291169a68d7a4142ca46fe37fff",
        "sha256": "97efc7c350c1da20b7c8cc9a466aa7e9cc8e0bd778377adc7f62a1f661672670"
      },
      "downloads": -1,
      "filename": "dash_slicer-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "96a00291169a68d7a4142ca46fe37fff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 20870,
      "upload_time": "2020-12-18T07:51:50",
      "upload_time_iso_8601": "2020-12-18T07:51:50.646351Z",
      "url": "https://files.pythonhosted.org/packages/75/08/0695aa75816bfa7023e643876a8532a67823fa2f74b18d6eb8911acb40a2/dash_slicer-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5a7d8b2b1cefadfe96dbffe5b6400e30eb1507bbb54fb7ffd71c9652b5f3770",
        "md5": "4174073d34bf71a61e25d3cf9d6f7e00",
        "sha256": "b163ff61631a4ed2871272a731c4c70152fc7302c35186d107b83919b258794a"
      },
      "downloads": -1,
      "filename": "dash-slicer-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4174073d34bf71a61e25d3cf9d6f7e00",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 20473,
      "upload_time": "2020-12-18T07:51:52",
      "upload_time_iso_8601": "2020-12-18T07:51:52.682790Z",
      "url": "https://files.pythonhosted.org/packages/a5/a7/d8b2b1cefadfe96dbffe5b6400e30eb1507bbb54fb7ffd71c9652b5f3770/dash-slicer-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}