{
  "info": {
    "author": "Thanmay Jasti",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Classification.Weighted_Ensemble(Models,X_train,y_train,X_val,y_val,X_test,y_test,Method='SLSQP')\n\nAny classification model  or an average Ensembling model combines the prediction from each model equally and often results in better performance on average than a given single model.\n\nWeighted Ensemble model is an approach that allows multiple models to contribute to a prediction in proportion to their trust or estimated performance.\n\nUsing this above mentoined Weighted_Ensemble class You can predict single model as well as multiple models Which will give  the clarity about the weightage of the model with respect to inputs \n\nParameters:\nModels==List of the model objects that you wanted to Predict \nX_train==Traininig dataset\ny_train==Training label dataset \nx_val==Validation data set\nY_val==Validation labels dataset\n#X_val and y_Val are used to calculate the weights of the model objects that are there in the Models List \nNOte:The sum of the weights of the modes mentioned in the object are always equal to 1\nx_test==Testing dataset to calculate the metric score\nY_test==Testing label dataset to calculate the metric score\n\nExample \nin the code  declare models=[]\nModel1:\nrf=Randomclassifier()\nmodels.append(rf)\n\nModel2:\nxgb=XGBClassifier()\nmodels.append(xgb)\n\nresult,weights=Weighted_Ensemble(Models,X_train,y_train,X_val,y_val,X_test,y_test,Method='SLSQP')\n\nResult is a data frame which is something like below\nthreshold\ttp\tfp\ttn\tfn\taccuracy\tprecision\trecall\tscope\tf1\tfpr\nThreshold values range from o.1 to 0.99 \nWeights  are the list of values that shows how much weightage it has given to the model \nWe can compare the values and pick the model very easily \n\nClassification.get_metric_score(y_true, y_proba):\nIf we have model already in hand we can call this method to observe the  perfomance of the model  with various thershold values \nResult is a data frame which is something like below\nthreshold\ttp\tfp\ttn\tfn\taccuracy\tprecision\trecall\tscope\tf1\tfpr\nThreshold values range from o.1 to 0.99  \n\nParameters:\ny_true==actual y values\ny_proba==We should give the probability values with respect to the predcition once\n\nExample:\ny_true is the actual values\nY_proba=np.round(model.predict_proba(X_test)[:,1],3)\nresult_df=get_metric_score(y_true, y_proba)\n\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "WeightedEnsemble",
    "package_url": "https://pypi.org/project/WeightedEnsemble/",
    "platform": "",
    "project_url": "https://pypi.org/project/WeightedEnsemble/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/WeightedEnsemble/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "will help in getting the correct classification model",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9872763,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79a221041887e3143fd1708cb11c0242222dcaeef5549ad36a9b713af42ba660",
          "md5": "bd2fc119f1ccdc6f1d12130fac4a6e04",
          "sha256": "fdf7d7f326c2f620d5d0f68362ba33f0d8160890e2f8d3be5ceeee14bce6aa16"
        },
        "downloads": -1,
        "filename": "WeightedEnsemble-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd2fc119f1ccdc6f1d12130fac4a6e04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3555,
        "upload_time": "2021-03-25T03:37:37",
        "upload_time_iso_8601": "2021-03-25T03:37:37.548212Z",
        "url": "https://files.pythonhosted.org/packages/79/a2/21041887e3143fd1708cb11c0242222dcaeef5549ad36a9b713af42ba660/WeightedEnsemble-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79a221041887e3143fd1708cb11c0242222dcaeef5549ad36a9b713af42ba660",
        "md5": "bd2fc119f1ccdc6f1d12130fac4a6e04",
        "sha256": "fdf7d7f326c2f620d5d0f68362ba33f0d8160890e2f8d3be5ceeee14bce6aa16"
      },
      "downloads": -1,
      "filename": "WeightedEnsemble-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bd2fc119f1ccdc6f1d12130fac4a6e04",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3555,
      "upload_time": "2021-03-25T03:37:37",
      "upload_time_iso_8601": "2021-03-25T03:37:37.548212Z",
      "url": "https://files.pythonhosted.org/packages/79/a2/21041887e3143fd1708cb11c0242222dcaeef5549ad36a9b713af42ba660/WeightedEnsemble-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}