{
  "info": {
    "author": "Sebastian Lobinger",
    "author_email": "software.slobinger@t-online.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Plaster Dynaconf\n\n## Introduction\n\nBy default, Pyramid use a pasteDeploy ini format file to loads its configuration,\n\nhere is a plugin to use [Dynaconf](https://dynaconf.com) instead to configure\nyour pyramid application.\n\ne.g.\n\n```\npserve dynaconf://settings.yml\n```\n\n### Why another Configuration Loader for Pyramid's plaster?\n\nTo answer this weustion lets have a look about what is so cool on Dynaconf.\nWith the creation of Dynaconf the autor(s) have created a tool that handles the\nreading of configuration data very well. This is especially true for applications\nthat are developed to be deployed in different enironments. Most of web applications\nare that kind of thing.\nIn development of such applications you know how the settings should be for\nyour development environment and everything that is no specific to *your*\nenv and no secret should be in the source code. But The idea of\n[12-factor-apps](https://12factor.net) goes even farther everything what one\nknows about the environment types the application will be deployed should be in\nthe source too and be overridden or extended with secrets in the specific env\nwith environment varibales.\n\nYou can do this with pasteDeploy too, but the need of different files for\ndifferent environments is not as convinient as one default settings file\nwith useful defaults for different environments that can overridden by the\nenvironments. And what environemnt is present is set by the environment and not\nby the file.\n\nOn my flask driven apps using dynaconf the start up of the application looks\neverythere the same `flask run`. \nI wanted to have a similar approach for my pyramid apps.\n`pserve dynaconf://settings.yml`\n\nMaybe it could even go as far as `pserve dynaconf://` but I am not sure if\nit is worth to do that much implicit especially because since dynaconf3 less\nthings happen implicit than before.\n\n### When will this be on version 1.x.y?\n\nIf I or someone else had time to write some good tests. Vecause this packages\nis mainly an integration piece of dynaconf and plaster with the clear\ndestination to be used with `pserve` for pyramid there are not just unit tests\nrequired. For now it \"works for me\" applies and I do not want to let this kind of\nmeasurement be the one for version 1.x.y .\n\n## Installation\n\n```\npip install plaster-yaml\n```\n\n## Usage\n\nThis package registers itself by default for the entrypoint\n`'plaster.loader_factory'` so that it can be used in the way described above.\nIf you wish to be able to do something like\n`pserve settings.yml` you have to add a configuration for the  entry point for\n`file+yml` to your setup.py or example:\n```\nsetup(\n    ...,\n    entry_points={\n     'paste.app_factory': ['main = <my_app>:main'],\n     'plaster.loader_factory': ['file+yml = plaster_yaml:Loader'],\n     ...\n    },\n)\n```\n\nYou must run `pip install -e .` to finallize the registration.\n\n## Troubleshouting\n\nIf you get the following exception:\n\n```\nplaster.exceptions.LoaderNotFound: Could not find a matching loader for the scheme \"file+yaml\", protocol \"wsgi\".\n```\n\nIt meast that you did not register the entry point. Read the usage section\nfor to register it properly.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/lobi/plaster-dynaconf",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "plaster-dynaconf",
    "package_url": "https://pypi.org/project/plaster-dynaconf/",
    "platform": "",
    "project_url": "https://pypi.org/project/plaster-dynaconf/",
    "project_urls": {
      "Homepage": "https://gitlab.com/lobi/plaster-dynaconf"
    },
    "release_url": "https://pypi.org/project/plaster-dynaconf/0.1.0/",
    "requires_dist": [
      "Dynaconf (>=3.0)",
      "plaster (>=1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "A plaster plugin to configure pyramid app with Dynaconf",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10945498,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea26db9c8fb0da0db45ae5d4138a553532f7194040b15af8fa589f4ad0abc10c",
          "md5": "d18652c4db0e7d1574ca93a0070ecf34",
          "sha256": "fe737ec91397a11b6f998d7016efa464aca06216e2bc5d0f940de6c0ecd0005e"
        },
        "downloads": -1,
        "filename": "plaster_dynaconf-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d18652c4db0e7d1574ca93a0070ecf34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5571,
        "upload_time": "2021-07-19T11:38:11",
        "upload_time_iso_8601": "2021-07-19T11:38:11.005582Z",
        "url": "https://files.pythonhosted.org/packages/ea/26/db9c8fb0da0db45ae5d4138a553532f7194040b15af8fa589f4ad0abc10c/plaster_dynaconf-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea26db9c8fb0da0db45ae5d4138a553532f7194040b15af8fa589f4ad0abc10c",
        "md5": "d18652c4db0e7d1574ca93a0070ecf34",
        "sha256": "fe737ec91397a11b6f998d7016efa464aca06216e2bc5d0f940de6c0ecd0005e"
      },
      "downloads": -1,
      "filename": "plaster_dynaconf-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d18652c4db0e7d1574ca93a0070ecf34",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5571,
      "upload_time": "2021-07-19T11:38:11",
      "upload_time_iso_8601": "2021-07-19T11:38:11.005582Z",
      "url": "https://files.pythonhosted.org/packages/ea/26/db9c8fb0da0db45ae5d4138a553532f7194040b15af8fa589f4ad0abc10c/plaster_dynaconf-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}