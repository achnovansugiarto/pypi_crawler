{
  "info": {
    "author": "Emmanuel Adegbite",
    "author_email": "olucurious@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Communications",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "*****\nPyFCM\n*****\n|version| |license| \n\nPython client for FCM - Firebase Cloud Messaging (Android, iOS and Web)\n\nFirebase Cloud Messaging (FCM) is the new version of GCM. It inherits the reliable and scalable GCM infrastructure, plus new features. GCM users are strongly recommended to upgrade to FCM.\n\nUsing FCM, you can notify a client app that new email or other data is available to sync. You can send notifications to drive user reengagement and retention. For use cases such as instant messaging, a message can transfer a payload of up to 4KB to a client app.\n\nFor more information, visit: https://firebase.google.com/docs/cloud-messaging/\n\n\nLinks\n=====\n\n- Project: https://github.com/olucurious/pyfcm\n- PyPi: https://pypi.python.org/pypi/pyfcm/\n\nLooking for a Django version?\n-----------------------------\nCheckout fcm-django\n- Link: https://github.com/xtrinch/fcm-django\n\nUpdates (Breaking Changes)\n--------------------------\n\n- MAJOR UPDATES (AUGUST 2017): https://github.com/olucurious/PyFCM/releases/tag/1.4.0\n\n\nQuickstart\n==========\n\nInstall using pip:\n\n\n::\n\n    pip install pyfcm\n\n    OR\n\n    pip install git+https://github.com/olucurious/PyFCM.git\n\nPyFCM supports Android, iOS and Web.\n\nFeatures\n--------\n\n- All FCM functionality covered\n- Tornado support\n\n\nExamples\n--------\n\nSend notifications using the ``FCMNotification`` class:\n\n.. code-block:: python\n\n    # Send to single device.\n    from pyfcm import FCMNotification\n\n    push_service = FCMNotification(api_key=\"<api-key>\")\n\n    # OR initialize with proxies\n\n    proxy_dict = {\n              \"http\"  : \"http://127.0.0.1\",\n              \"https\" : \"http://127.0.0.1\",\n            }\n    push_service = FCMNotification(api_key=\"<api-key>\", proxy_dict=proxy_dict)\n\n    # Your api-key can be gotten from:  https://console.firebase.google.com/project/<project-name>/settings/cloudmessaging\n\n    registration_id = \"<device registration_id>\"\n    message_title = \"Uber update\"\n    message_body = \"Hi john, your customized news for today is ready\"\n    result = push_service.notify_single_device(registration_id=registration_id, message_title=message_title, message_body=message_body)\n\n    # Send to multiple devices by passing a list of ids.\n    registration_ids = [\"<device registration_id 1>\", \"<device registration_id 2>\", ...]\n    message_title = \"Uber update\"\n    message_body = \"Hope you're having fun this weekend, don't forget to check today's news\"\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_title=message_title, message_body=message_body)\n\n    print result\n\nSend a data message.\n\n.. code-block:: python\n\n    # With FCM, you can send two types of messages to clients:\n    # 1. Notification messages, sometimes thought of as \"display messages.\"\n    # 2. Data messages, which are handled by the client app.\n    # 3. Notification messages with optional data payload.\n\n    # Client app is responsible for processing data messages. Data messages have only custom key-value pairs. (Python dict)\n    # Data messages let developers send up to 4KB of custom key-value pairs.\n\n    # Sending a notification with data message payload\n    data_message = {\n        \"Nick\" : \"Mario\",\n        \"body\" : \"great match!\",\n        \"Room\" : \"PortugalVSDenmark\"\n    }\n    # To multiple devices\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_body=message_body, data_message=data_message)\n    # To a single device\n    result = push_service.notify_single_device(registration_id=registration_id, message_body=message_body, data_message=data_message)\n\n    # Sending a data message only payload, do NOT include message_body also do NOT include notification body\n    # To multiple devices\n    result = push_service.multiple_devices_data_message(registration_ids=registration_ids, data_message=data_message)\n    # To a single device\n    result = push_service.single_device_data_message(registration_id=registration_id, data_message=data_message)\n\n    # To send extra kwargs (notification keyword arguments not provided in any of the methods),\n    # pass it as a key value in a dictionary to the method being used\n    extra_notification_kwargs = {\n        'android_channel_id': 2\n    }\n    result = push_service.notify_single_device(registration_id=registration_id, data_message=data_message, extra_notification_kwargs=extra_notification_kwargs)\n\n    # To process background notifications in iOS 10, set content_available\n    result = push_service.notify_single_device(registration_id=registration_id, data_message=data_message, content_available=True)\n\n    # To support rich notifications on iOS 10, set\n    extra_kwargs = {\n        'mutable_content': True\n    }\n    \n\n    \n    \n    \n    # and then write a NotificationService Extension in your app\n\n    # Use notification messages when you want FCM to handle displaying a notification on your app's behalf.\n    # Use data messages when you just want to process the messages only in your app.\n    # PyFCM can send a message including both notification and data payloads.\n    # In such cases, FCM handles displaying the notification payload, and the client app handles the data payload.\n\nSend a low priority message.\n\n.. code-block:: python\n\n    # The default is low_priority == False\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_body=message, low_priority=True)\n\nGet valid registration ids (useful for cleaning up invalid registration ids in your database)\n\n.. code-block:: python\n\n    registration_ids = ['reg id 1', 'reg id 2', 'reg id 3', 'reg id 4', ...]\n    valid_registration_ids = push_service.clean_registration_ids(registration_ids)\n    # Shoutout to @baali for this\n\nAppengine users should define their environment\n\n.. code-block:: python\n\n    push_service = FCMNotification(api_key=\"<api-key>\", proxy_dict=proxy_dict, env='app_engine')\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_body=message, low_priority=True)\n    \nManage subscriptions to a topic\n\n.. code-block:: python\n\n    push_service = FCMNotification(SERVER_KEY)\n    tokens = [\n        <registration_id_1>,\n        <registration_id_2>,\n    ]\n    \n    subscribed = push_service.subscribe_registration_ids_to_topic(tokens, 'test')\n    # returns True if successful, raises error if unsuccessful\n\n    unsubscribed = push_service.unsubscribe_registration_ids_from_topic(tokens, 'test')\n    # returns True if successful, raises error if unsuccessful\n\nSending a message to a topic.\n\n.. code-block:: python\n\n    # Send a message to devices subscribed to a topic.\n    result = push_service.notify_topic_subscribers(topic_name=\"news\", message_body=message)\n\n    # Conditional topic messaging\n    topic_condition = \"'TopicA' in topics && ('TopicB' in topics || 'TopicC' in topics)\"\n    result = push_service.notify_topic_subscribers(message_body=message, condition=topic_condition)\n    # FCM first evaluates any conditions in parentheses, and then evaluates the expression from left to right.\n    # In the above expression, a user subscribed to any single topic does not receive the message. Likewise,\n    # a user who does not subscribe to TopicA does not receive the message. These combinations do receive it:\n    # TopicA and TopicB\n    # TopicA and TopicC\n    # Conditions for topics support two operators per expression, and parentheses are supported.\n    # For more information, check: https://firebase.google.com/docs/cloud-messaging/topic-messaging\n\nOther argument options\n\n::\n\n    \n    collapse_key (str, optional): Identifier for a group of messages\n        that can be collapsed so that only the last message gets sent\n        when delivery can be resumed. Defaults to `None`.\n    delay_while_idle (bool, optional): If `True` indicates that the\n        message should not be sent until the device becomes active.\n    time_to_live (int, optional): How long (in seconds) the message\n        should be kept in FCM storage if the device is offline. The\n        maximum time to live supported is 4 weeks. Defaults to ``None``\n        which uses the FCM default of 4 weeks.\n    low_priority (boolean, optional): Whether to send notification with\n        the low priority flag. Defaults to `False`.\n    restricted_package_name (str, optional): Package name of the\n        application where the registration IDs must match in order to\n        receive the message. Defaults to `None`.\n    dry_run (bool, optional): If `True` no message will be sent but\n        request will be tested.\n\nGet response data.\n\n.. code-block:: python\n\n    # Response from PyFCM.\n    response_dict = {\n        'multicast_ids': list(), # List of Unique ID (number) identifying the multicast message.\n        'success': 0, #Number of messages that were processed without an error.\n        'failure': 0, #Number of messages that could not be processed.\n        'canonical_ids': 0, #Number of results that contain a canonical registration token.\n        'results': list(), #Array of dict objects representing the status of the messages processed.\n        'topic_message_id': None or str\n    }\n\n    # registration_id: Optional string specifying the canonical registration token for the client app that the message\n    # was processed and sent to. Sender should use this value as the registration token for future requests. Otherwise,\n    # the messages might be rejected.\n    # error: String specifying the error that occurred when processing the message for the recipient\n    \n    \n.. |version| image:: http://img.shields.io/pypi/v/pyfcm.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/pyfcm/\n\n.. |license| image:: http://img.shields.io/pypi/l/pyfcm.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/pyfcm/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/olucurious/pyfcm",
    "keywords": "firebase fcm apns ios gcm android push notifications",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfcm-tsn",
    "package_url": "https://pypi.org/project/pyfcm-tsn/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyfcm-tsn/",
    "project_urls": {
      "Homepage": "https://github.com/olucurious/pyfcm"
    },
    "release_url": "https://pypi.org/project/pyfcm-tsn/1.5.2/",
    "requires_dist": [
      "requests",
      "urllib3 (>=1.26.0)",
      "pytest ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Python client for FCM - Firebase Cloud Messaging (Android, iOS and Web)",
    "version": "1.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15156929,
  "releases": {
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab4930fdd385181456f8fdbc996f3a7a110eda5cbca3ca01c0996acdf0bbc3e5",
          "md5": "c950f442b81b54e88a825fe3f21f63ad",
          "sha256": "48716d7958c76b4ed98329d3b40860b96e2bd41fbdfb607eb7851df8d7706d95"
        },
        "downloads": -1,
        "filename": "pyfcm_tsn-1.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c950f442b81b54e88a825fe3f21f63ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16084,
        "upload_time": "2022-09-20T17:17:31",
        "upload_time_iso_8601": "2022-09-20T17:17:31.469294Z",
        "url": "https://files.pythonhosted.org/packages/ab/49/30fdd385181456f8fdbc996f3a7a110eda5cbca3ca01c0996acdf0bbc3e5/pyfcm_tsn-1.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eea11f33663653aaf83f87945e6db488f2a4db9b81bb18ea6e475ff4979b279a",
          "md5": "0f632f9c43ca693d8aab9e96833711e8",
          "sha256": "7719be759455d314013b0675b7c567aff30f2ca33820b67faba1564691089a03"
        },
        "downloads": -1,
        "filename": "pyfcm_tsn-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0f632f9c43ca693d8aab9e96833711e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17949,
        "upload_time": "2022-09-20T17:17:33",
        "upload_time_iso_8601": "2022-09-20T17:17:33.923468Z",
        "url": "https://files.pythonhosted.org/packages/ee/a1/1f33663653aaf83f87945e6db488f2a4db9b81bb18ea6e475ff4979b279a/pyfcm_tsn-1.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab4930fdd385181456f8fdbc996f3a7a110eda5cbca3ca01c0996acdf0bbc3e5",
        "md5": "c950f442b81b54e88a825fe3f21f63ad",
        "sha256": "48716d7958c76b4ed98329d3b40860b96e2bd41fbdfb607eb7851df8d7706d95"
      },
      "downloads": -1,
      "filename": "pyfcm_tsn-1.5.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c950f442b81b54e88a825fe3f21f63ad",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16084,
      "upload_time": "2022-09-20T17:17:31",
      "upload_time_iso_8601": "2022-09-20T17:17:31.469294Z",
      "url": "https://files.pythonhosted.org/packages/ab/49/30fdd385181456f8fdbc996f3a7a110eda5cbca3ca01c0996acdf0bbc3e5/pyfcm_tsn-1.5.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eea11f33663653aaf83f87945e6db488f2a4db9b81bb18ea6e475ff4979b279a",
        "md5": "0f632f9c43ca693d8aab9e96833711e8",
        "sha256": "7719be759455d314013b0675b7c567aff30f2ca33820b67faba1564691089a03"
      },
      "downloads": -1,
      "filename": "pyfcm_tsn-1.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0f632f9c43ca693d8aab9e96833711e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17949,
      "upload_time": "2022-09-20T17:17:33",
      "upload_time_iso_8601": "2022-09-20T17:17:33.923468Z",
      "url": "https://files.pythonhosted.org/packages/ee/a1/1f33663653aaf83f87945e6db488f2a4db9b81bb18ea6e475ff4979b279a/pyfcm_tsn-1.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}