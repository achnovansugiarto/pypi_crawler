{
  "info": {
    "author": "Nattōsai Mitō",
    "author_email": "flow4re2c@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# AsyncTkinter\n\n[Youtube](https://youtu.be/8XP1KgRd3jI)\n\n`asynctkinter` is an async library that saves you from ugly callback-based code,\njust like most of async libraries do.\nLet's say you want to do:\n\n1. `print('A')`\n1. wait for 1sec\n1. `print('B')`\n1. wait for a label to be pressed\n1. `print('C')`\n\nin that order.\nYour code would look like this:\n\n```python\ndef what_you_want_to_do(label):\n    bind_id = None\n    print('A')\n\n    def one_sec_later(__):\n        nonlocal bind_id\n        print('B')\n        bind_id = label.bind('<Button>', on_press, '+')\n    label.after(1000, one_sec_later)\n\n    def on_press(event):\n        label.unbind('<Button>', bind_id)\n        print('C')\n```\n\nIt's barely readable and not easy to understand.\nIf you use `asynctkinter`, the code above will become like this:\n\n```python\nimport asynctkinter as at\n\nasync def what_you_want_to_do(label):\n    print('A')\n    await at.sleep(1000, after=label.after)\n    print('B')\n    await at.event(label, '<Button>')\n    print('C')\n```\n\n## Installation\n\n```\npip install asynctkinter\n```\n\n## Pin the minor version\n\nIf you use this module, it's recommended to pin the minor version, because if\nit changed, it usually means some breaking changes occurred.\n\n## Usage\n\n```python\nfrom tkinter import Tk, Label\nimport asynctkinter as at\nat.patch_unbind()\n\nroot = Tk()\nlabel = Label(root, text='Hello', font=('', 60))\nlabel.pack()\n\nasync def some_task(label):\n    label['text'] = 'start heavy task'\n\n    # wait for a label to be pressed\n    event = await at.event(label, '<Button>')\n    print(f\"pos: {event.x}, {event.y}\")\n\n    # wait for 2sec\n    await at.sleep(2000, after=label.after)\n\nat.start(some_task(label))\nroot.mainloop()\n```\n\n#### wait for the completion/cancellation of multiple tasks simultaneously\n\n```python\nasync def some_task(label):\n    from functools import partial\n    import asynctkinter as at\n    sleep = partial(at.sleep, after=label.after)\n    # wait until EITEHR a label is pressed OR 5sec passes\n    tasks = await at.or_(\n        at.event(label, '<Button>'),\n        sleep(5000),\n    )\n    print(\"The label was pressed\" if tasks[0].done else \"5sec passed\")\n\n    # wait until BOTH a label is pressed AND 5sec passes\"\n    tasks = await at.and_(\n        at.event(label, '<Button>'),\n        sleep(5000),\n    )\n```\n\n#### synchronization primitive\n\nThere is a Trio's [Event](https://trio.readthedocs.io/en/stable/reference-core.html#trio.Event) equivalent.\n\n```python\nimport asynctkinter as at\n\nasync def task_A(e):\n    print('A1')\n    await e.wait()\n    print('A2')\nasync def task_B(e):\n    print('B1')\n    await e.wait()\n    print('B2')\n\ne = at.Event()\nat.start(task_A(e))\n# A1\nat.start(task_B(e))\n# B1\ne.set()\n# A2\n# B2\n```\n\n### threading\n\n`asynctkinter` doesn't have any I/O primitives like Trio and asyncio do,\nthus threads are the only way to perform them without blocking the main-thread:\n\n```python\nfrom concurrent.futures import ThreadPoolExecuter\nimport asynctkinter as at\n\nexecuter = ThreadPoolExecuter()\n\nasync def some_task(widget):\n    # create a new thread, run a function inside it, then\n    # wait for the completion of that thread\n    r = await at.run_in_thread(\n        thread_blocking_operation, after=widget.after)\n    print(\"return value:\", r)\n\n    # run a function inside a ThreadPoolExecuter, and wait for the completion\n    r = await at.run_in_executer(\n        thread_blocking_operation, executer, after=widget.after)\n    print(\"return value:\", r)\n```\n\nExceptions(not BaseExceptions) are propagated to the caller,\nso you can handle them like you do in synchronous code:\n\n```python\nimport requests\nfrom requests.exceptions import Timeout\nimport asynctkinter as at\n\nasync def some_task(widget):\n    try:\n        r = await at.run_in_thread(\n            lambda: requests.get('htt...', timeout=10), after=widget.after)\n    except Timeout:\n        print(\"TIMEOUT!\")\n    else:\n        print('GOT A RESPONSE')\n```\n\n## Structured Concurrency\n\nBoth `asynctkinter.and_()` and `asynctkinter.or_()` follow the concept of \"structured concurrency\".\nWhat does that mean?\nThey promise two things:\n\n* The tasks passed into them never outlive them.\n* Exceptions occured in the tasks are propagated to the caller.\n\nRead [this post][njs_sc] if you are curious to the concept.\n\n## Misc\n\n- Why is `patch_unbind()` necessary? Take a look at [this](https://stackoverflow.com/questions/6433369/deleting-and-changing-a-tkinter-event-binding).\n\n[njs_sc]:https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gottadiveintopython/asynctkinter",
    "keywords": "async,tkinter",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asynctkinter",
    "package_url": "https://pypi.org/project/asynctkinter/",
    "platform": "",
    "project_url": "https://pypi.org/project/asynctkinter/",
    "project_urls": {
      "Homepage": "https://github.com/gottadiveintopython/asynctkinter",
      "Repository": "https://github.com/gottadiveintopython/asynctkinter"
    },
    "release_url": "https://pypi.org/project/asynctkinter/0.2.0/",
    "requires_dist": [
      "asyncgui (>=0.5,<0.6)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "async library that works on top of tkinter's event loop",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10362123,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3b39b0a81c9536cd3e7a94ecd30b82f0c23d0e6c52eb9cc17e29879a14d0f1f",
          "md5": "cc202388d8e4281639ae64c58a35055e",
          "sha256": "38f2758387f76f6284efbee4a6ccb9d1b345ff6e128981a484484ceb4aa83a1e"
        },
        "downloads": -1,
        "filename": "asynctkinter-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc202388d8e4281639ae64c58a35055e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 2886,
        "upload_time": "2020-10-25T08:13:56",
        "upload_time_iso_8601": "2020-10-25T08:13:56.899494Z",
        "url": "https://files.pythonhosted.org/packages/f3/b3/9b0a81c9536cd3e7a94ecd30b82f0c23d0e6c52eb9cc17e29879a14d0f1f/asynctkinter-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0617fc63578d2e72858c9aa22e51b6e705e5ba46053a1220d9662de750454097",
          "md5": "1687fb40f06c3d88e19abd2f8a83bf62",
          "sha256": "eaf2192993801d977ab5d6976eef1fb492ade3fe678d21b07e9806c2f6ae0d88"
        },
        "downloads": -1,
        "filename": "asynctkinter-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1687fb40f06c3d88e19abd2f8a83bf62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 2385,
        "upload_time": "2020-10-25T08:13:59",
        "upload_time_iso_8601": "2020-10-25T08:13:59.816270Z",
        "url": "https://files.pythonhosted.org/packages/06/17/fc63578d2e72858c9aa22e51b6e705e5ba46053a1220d9662de750454097/asynctkinter-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94c7eb7f4383ab84d0879224783258b46b994a53a5b2e521513f28a83e7c5635",
          "md5": "20d3e8e83fd3bb5ba561861d146f211e",
          "sha256": "f394302b291f978b1fb2c4560868927eaf1e845674daa7cd75d4038a5ea700f6"
        },
        "downloads": -1,
        "filename": "asynctkinter-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20d3e8e83fd3bb5ba561861d146f211e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 3966,
        "upload_time": "2020-10-25T08:19:36",
        "upload_time_iso_8601": "2020-10-25T08:19:36.220543Z",
        "url": "https://files.pythonhosted.org/packages/94/c7/eb7f4383ab84d0879224783258b46b994a53a5b2e521513f28a83e7c5635/asynctkinter-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba514d39f8a4ff48fb7e3dfc69747f094f73b27400a1e41349e2ff128012de5a",
          "md5": "f4a6a1e78de1d135f94e8a7057c55095",
          "sha256": "1a42c3e60c88e4971ac4aede4a034f42ec2e3f44e30b350ecc09f50d14bf0dfe"
        },
        "downloads": -1,
        "filename": "asynctkinter-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f4a6a1e78de1d135f94e8a7057c55095",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 4005,
        "upload_time": "2020-10-25T08:19:37",
        "upload_time_iso_8601": "2020-10-25T08:19:37.835292Z",
        "url": "https://files.pythonhosted.org/packages/ba/51/4d39f8a4ff48fb7e3dfc69747f094f73b27400a1e41349e2ff128012de5a/asynctkinter-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1054f3137064217e1743cba52b634bfaa8ca38d3a3240edea692bf038e75b867",
          "md5": "8805086284cf2497a071563cfb4da4c6",
          "sha256": "a97004f659505c9b9679a74192e2912548f259c8d07eb09983c0904cc474df7d"
        },
        "downloads": -1,
        "filename": "asynctkinter-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8805086284cf2497a071563cfb4da4c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 3961,
        "upload_time": "2021-05-01T01:31:10",
        "upload_time_iso_8601": "2021-05-01T01:31:10.747071Z",
        "url": "https://files.pythonhosted.org/packages/10/54/f3137064217e1743cba52b634bfaa8ca38d3a3240edea692bf038e75b867/asynctkinter-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1c07b5ef47263393e6b594c081ac4dc143b7e2a3b9778036e83cbc76da220b8",
          "md5": "36ac00efb247dcdc9d62c09fc7ee64b3",
          "sha256": "9cef88fd3ee4af1c630dcaf9826adbfb68e2a6b4aa20e9b3a947b197a4c0e4a8"
        },
        "downloads": -1,
        "filename": "asynctkinter-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "36ac00efb247dcdc9d62c09fc7ee64b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 4003,
        "upload_time": "2021-05-01T01:31:12",
        "upload_time_iso_8601": "2021-05-01T01:31:12.491145Z",
        "url": "https://files.pythonhosted.org/packages/d1/c0/7b5ef47263393e6b594c081ac4dc143b7e2a3b9778036e83cbc76da220b8/asynctkinter-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24aafd265b2923a792c26e9035f8f6ec79be71f39e2712a7a761a567c6ec113c",
          "md5": "6715fb8ebcdbb101883094eeb014cd11",
          "sha256": "0cbe1fb73212b79a0b80d28c66d609d7b0407301b12d87371994b910676e8992"
        },
        "downloads": -1,
        "filename": "asynctkinter-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6715fb8ebcdbb101883094eeb014cd11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 5009,
        "upload_time": "2021-05-15T00:22:35",
        "upload_time_iso_8601": "2021-05-15T00:22:35.346745Z",
        "url": "https://files.pythonhosted.org/packages/24/aa/fd265b2923a792c26e9035f8f6ec79be71f39e2712a7a761a567c6ec113c/asynctkinter-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0280f0f74380def20020d43d5dbbe3179b20595b91e31a37210be807d9ad6f3",
          "md5": "de27eb7dce93e040bb01650dc929f15a",
          "sha256": "6624f9f14296b578b961b9e06738ab74e58c7bdad0f4f59f4854f5f1d1c3b592"
        },
        "downloads": -1,
        "filename": "asynctkinter-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "de27eb7dce93e040bb01650dc929f15a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5325,
        "upload_time": "2021-05-15T00:22:37",
        "upload_time_iso_8601": "2021-05-15T00:22:37.108953Z",
        "url": "https://files.pythonhosted.org/packages/f0/28/0f0f74380def20020d43d5dbbe3179b20595b91e31a37210be807d9ad6f3/asynctkinter-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24aafd265b2923a792c26e9035f8f6ec79be71f39e2712a7a761a567c6ec113c",
        "md5": "6715fb8ebcdbb101883094eeb014cd11",
        "sha256": "0cbe1fb73212b79a0b80d28c66d609d7b0407301b12d87371994b910676e8992"
      },
      "downloads": -1,
      "filename": "asynctkinter-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6715fb8ebcdbb101883094eeb014cd11",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 5009,
      "upload_time": "2021-05-15T00:22:35",
      "upload_time_iso_8601": "2021-05-15T00:22:35.346745Z",
      "url": "https://files.pythonhosted.org/packages/24/aa/fd265b2923a792c26e9035f8f6ec79be71f39e2712a7a761a567c6ec113c/asynctkinter-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0280f0f74380def20020d43d5dbbe3179b20595b91e31a37210be807d9ad6f3",
        "md5": "de27eb7dce93e040bb01650dc929f15a",
        "sha256": "6624f9f14296b578b961b9e06738ab74e58c7bdad0f4f59f4854f5f1d1c3b592"
      },
      "downloads": -1,
      "filename": "asynctkinter-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "de27eb7dce93e040bb01650dc929f15a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 5325,
      "upload_time": "2021-05-15T00:22:37",
      "upload_time_iso_8601": "2021-05-15T00:22:37.108953Z",
      "url": "https://files.pythonhosted.org/packages/f0/28/0f0f74380def20020d43d5dbbe3179b20595b91e31a37210be807d9ad6f3/asynctkinter-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}