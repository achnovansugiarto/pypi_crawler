{
  "info": {
    "author": "Erik Rose, Peter Potrowl, Vikram Saraph",
    "author_email": "grinch@grinchcentral.com, peter.potrowl@gmail.com, vikram.saraph.22@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing"
    ],
    "description": "everything below this is from the original repo's README\nmy really rough notes below:\n\n- this package hasn't been maintained lately\n- `setup.py` seems to use `distutils` to install\n- `distutils` is deprecated\n- installation fails with poetry 1.2\n- it is generally recommended to migrate from distutils to setuptools. if i do that, and publish to pypi, would that fix it?\n- https://setuptools.pypa.io/en/latest/deprecated/distutils-legacy.html\n\n===========\n\n\n.. image:: https://travis-ci.org/peter17/mediawiki-parser.svg?branch=master\n   :alt: Build Status\n   :target: https://travis-ci.org/peter17/mediawiki-parser\n\nPresentation\n============\n\nThis is a parser for MediaWiki's (MW) syntax. It's goal is to transform wikitext into an abstract syntax tree (AST) and then render this AST into various formats such as plain text and HTML.\n\nIt is an original work by Peter Potrowl and his mentor Erik Rose achieved during the Google Summer of Code 2011.\n\n\nRequirements\n============\n\nThis parser relies on Pijnu. You must install the latest version of Pijnu, available at: https://github.com/peter17/pijnu\n\nDo not use the version from http://spir.wikidot.com, which is outdated.\n\nFor basic and simple installation, just try:\n\n::\n\n pip install mediawiki-parser\n\nHow it works\n============\n\nTwo files, preprocessor.pijnu and mediawiki.pijnu describe the MW syntax using patterns that form a grammar. Another Python tool called Pijnu will interpret those grammars and use them to match the wikitext content and build the AST.\n\nThen, specific Python functions will render the leaves of the AST into the wanted format.\n\nThe reason why we use two grammars is that we will first substitute the templates in the wikitext with a preprocessor before actually parsing the content of the page.\n\nBuilding the parsers\n====================\n\nThe preprocessor and mediwiki parsers must be built from the Pijnu\ngrammars before you can use mediawiki-parser. You can build them through\nsetup.py, possibly setting the PYTHONPATH to point at pijnu:\n\n::\n\n cd /PATH/TO/mediawiki-parser/\n env PYTHONPATH=/PATH/TO/pijnu python setup.py build_parsers\n\nHow to test\n===========\n\nThe current simplest way to test the tool is to put wikitext inside the wikitext.txt file. Then, run:\n\n::\n\n python parser.py\n\nand the wikitext will be rendered as HTML in the article.htm file.\n\nOther ways might be implemented in the future.\n\nUnit tests\n----------\n\nInstall nose and run:\n\n::\n\n cd /PATH/TO/mediawiki-parser/\n env PYTHONPATH=/PATH/TO/pijnu/ nosetests tests\n\nHow to use in a program\n=======================\n\nExample for HTML\n----------------\nIn order to use this tool to render wikitext into HTML in a Python program, you can use the following lines:\n\n::\n\n templates = {}\n allowed_tags = []\n allowed_self_closing_tags = []\n allowed_attributes = []\n interwiki = {}\n namespaces = {}\n\n from mediawiki_parser.preprocessor import make_parser\n preprocessor = make_parser(templates)\n\n from mediawiki_parser.html import make_parser\n parser = make_parser(allowed_tags, allowed_self_closing_tags, allowed_attributes, interwiki, namespaces)\n\n preprocessed_text = preprocessor.parse(source)\n output = parser.parse(preprocessed_text.leaves())\n\nThe `output` string will contain the rendered HTML. You should describe the behavior you expect by filling the variables of the first lines:\n * if the wikitext calls foreign templates, put their names and content in the `templates` dict (e.g.: `{'my template': 'my template content'}`)\n * if some HTML tags are allowed on your wiki, list them in the `allowed_tags` list (e.g.: `['center', 'big', 'small', 'span']`; avoid `'script'` and some others, for security reasons)\n * if some self-closing HTML tags are allowed on your wiki, list them in the `allowed_self_closing_tags` list (e.g.: `['br', 'hr']`; avoid `'script'` and some others, for security reasons)\n * if some HTML tags are allowed on your wiki, list the attributes they can use the `allowed_attributes` list (e.g.: `['style', 'class']`; avoid `'onclick'` and some others, for security reasons)\n * if you want to be able to use interwiki links, list the foreign wikis in the `interwiki` dict (e.g.: `{'fr': 'http://fr.wikipedia.org/wiki/'}`)\n * if you want to be able to distinguish between standard links, file inclusions or categories, list the namespaces of your wiki in the `namespaces` dict (e.g.: `{'Template': 10, 'Category': 14, 'File': 6}` where the numbers are the namespace codes used in MW)\n\nExample for text\n----------------\nIn order to use this tool to render wikitext into text in a Python program, you can use the following lines:\n\n::\n\n templates = {}\n\n from mediawiki_parser.preprocessor import make_parser\n preprocessor = make_parser(templates)\n\n from mediawiki_parser.text import make_parser\n parser = make_parser()\n\n preprocessed_text = preprocessor.parse(source)\n output = parser.parse(preprocessed_text.leaves())\n\nThe `output` string will contain the rendered text.\nIf the wikitext calls foreign templates, put their names and content in the `templates` dict (e.g.: `{'my template': 'my template content'}`)\n\nExample for templates substitution\n----------------------------------\nIf you just want to replace the templates in a given wikitext, you can just call the preprocessor and no rendering postprocessor:\n\n::\n\n templates = {}\n\n from mediawiki_parser.preprocessor import make_parser\n preprocessor = make_parser(templates)\n\n output = preprocessor.parse(source)\n\nThe `output` string will contain the rendered wikitext.\nPut the templates names and content in the `templates` dict (e.g.: `{'my template': 'my template content'}`)\n\nPostprocessors\n--------------\n\nThe parser produces an AST. In order to provide human readable output, three postprocessors are provided:\n * html.py, for HTML output\n * text.py, for text output\n * raw.py, for raw output\n\nFor now, we mainly focused on HTML postprocessor. The text output might not be as cleaned as expected.\n\nYou can adapt them according to your needs.\n\nKnown bugs\n==========\n\nThis tool should be able to render any wikitext page into text or HTML.\n\nHowever, it does not intent to be bug-for-bug compatible with MW. For instance, using HTML entities in template calls (e.g.: `'{{temp&copy;late}}`') is currently not supported.\n\nPlease don't hesitate to report bugs that you may find when using this tool.\n\nSpecial thanks\n==============\n * To Nicholas Burlett for his directory restructure, performance improvements and other fixes\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vhxs/mediawiki-parser",
    "keywords": "MediaWiki,parser,syntax",
    "license": "GPL v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mediawiki-parser-fix",
    "package_url": "https://pypi.org/project/mediawiki-parser-fix/",
    "platform": null,
    "project_url": "https://pypi.org/project/mediawiki-parser-fix/",
    "project_urls": {
      "Homepage": "https://github.com/vhxs/mediawiki-parser"
    },
    "release_url": "https://pypi.org/project/mediawiki-parser-fix/0.4.1/",
    "requires_dist": [
      "pijnu (>=20160727)"
    ],
    "requires_python": "",
    "summary": "A parser for the MediaWiki syntax, based on Pijnu.",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15148066,
  "releases": {
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d53e8c2fc9a1c7899aeebdc29b5ceb6c8021fc2a3ffcf4e02ee6222ba54fb4f3",
          "md5": "5548a57cce81d20dd056f4b9624263f6",
          "sha256": "4932348b565428a17f0a114a4c6e6cf2b62cf13bb4d72344d0e505539defffb5"
        },
        "downloads": -1,
        "filename": "mediawiki_parser_fix-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5548a57cce81d20dd056f4b9624263f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44742,
        "upload_time": "2022-09-19T22:56:24",
        "upload_time_iso_8601": "2022-09-19T22:56:24.672297Z",
        "url": "https://files.pythonhosted.org/packages/d5/3e/8c2fc9a1c7899aeebdc29b5ceb6c8021fc2a3ffcf4e02ee6222ba54fb4f3/mediawiki_parser_fix-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51ecb4932b56bef719ef2ab9f39fbc7eb90fdd1c84c68295058e71ae7a14a92d",
          "md5": "724b96881fe3ac2a326b92355fb31c3a",
          "sha256": "a96da03f56f985b5fe423f98ebbdcd20aa7c3cff304bc3b2cd4f062da21c56a4"
        },
        "downloads": -1,
        "filename": "mediawiki-parser-fix-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "724b96881fe3ac2a326b92355fb31c3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50516,
        "upload_time": "2022-09-19T22:56:26",
        "upload_time_iso_8601": "2022-09-19T22:56:26.952341Z",
        "url": "https://files.pythonhosted.org/packages/51/ec/b4932b56bef719ef2ab9f39fbc7eb90fdd1c84c68295058e71ae7a14a92d/mediawiki-parser-fix-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d53e8c2fc9a1c7899aeebdc29b5ceb6c8021fc2a3ffcf4e02ee6222ba54fb4f3",
        "md5": "5548a57cce81d20dd056f4b9624263f6",
        "sha256": "4932348b565428a17f0a114a4c6e6cf2b62cf13bb4d72344d0e505539defffb5"
      },
      "downloads": -1,
      "filename": "mediawiki_parser_fix-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5548a57cce81d20dd056f4b9624263f6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 44742,
      "upload_time": "2022-09-19T22:56:24",
      "upload_time_iso_8601": "2022-09-19T22:56:24.672297Z",
      "url": "https://files.pythonhosted.org/packages/d5/3e/8c2fc9a1c7899aeebdc29b5ceb6c8021fc2a3ffcf4e02ee6222ba54fb4f3/mediawiki_parser_fix-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51ecb4932b56bef719ef2ab9f39fbc7eb90fdd1c84c68295058e71ae7a14a92d",
        "md5": "724b96881fe3ac2a326b92355fb31c3a",
        "sha256": "a96da03f56f985b5fe423f98ebbdcd20aa7c3cff304bc3b2cd4f062da21c56a4"
      },
      "downloads": -1,
      "filename": "mediawiki-parser-fix-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "724b96881fe3ac2a326b92355fb31c3a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 50516,
      "upload_time": "2022-09-19T22:56:26",
      "upload_time_iso_8601": "2022-09-19T22:56:26.952341Z",
      "url": "https://files.pythonhosted.org/packages/51/ec/b4932b56bef719ef2ab9f39fbc7eb90fdd1c84c68295058e71ae7a14a92d/mediawiki-parser-fix-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}