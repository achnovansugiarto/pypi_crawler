{
  "info": {
    "author": "OtoSense",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# dacc\nA declarative approach to data access object construction\n\nThe idea is to be able to specify a DAG (Directed Acyclic Graph) of data \ndependencies, and only have to retrieve or compute datas as they are needed. \n\nThis is an older solution, that will soon be replaced with a more modern approach, \ninvolving properties and cached_properties...\n\n## Example\n\nHere is a full, and real, example of usage.\n\nHere we tap into some website visitor data (in mongoDB) that has IP addresses for every visit, \nand use those to get approximate geo-coordinates for the visit.\n\n```python\nfrom ut.util.data_flow import DataFlow\nfrom pymongo import MongoClient\nimport pygeoip\nfrom pandas import DataFrame\nfrom collections import Counter\n\n\ntraj_names = {\n    'ip': 'IP',\n    'date': 'date'\n}\n\nevent_names = {\n    'audience_volume': 'audience_volume',\n    'broadcast_population_range': 'broadcast_population_range',\n    'broadcast_hard_radius': 'broadcast_hard_radius'\n}\n\nip_geo_data_filepath = '~/Data/geo/geoip/GeoLiteCity.dat'  # GeoIP.dat?\n\ntraj_mongo_db = 'fuak'\ntraj_mongo_collection = 'visits'\n\ngi = pygeoip.GeoIP(ip_geo_data_filepath)\n\ndef get_location_info(ip):\n    geo = gi.record_by_addr(ip)\n    return {'lat': geo.get('latitude'),\n            'lon': geo.get('longitude')}\n\nip_2_latlon = get_location_info\ntraj_data = MongoClient()[traj_mongo_db][traj_mongo_collection]\n\nclass TrajFeatBuilder(DataFlow):\n    def __init__(self, ip_geo_data_filepath=ip_geo_data_filepath, **kwargs):\n        params = dict()\n        params['data_dependencies'] = {\n            'ip_list': ['visitor_id'], \n            'ip_counts': ['ip_list'], \n            'latlon_counts': ['ip_counts']\n        }\n        params['data_makers'] = {k: params[k] for k in params['data_dependencies'].keys() if k in params.keys()}\n        kwargs = dict(kwargs, **params)\n        super(TrajFeatBuilder, self).__init__(**kwargs)\n\n        self.ip_2_latlon = get_location_info\n        self.traj_data = MongoClient()[traj_mongo_db][traj_mongo_collection]\n\n    def get_features(self, **kwargs):\n        visitor_id = kwargs.get('visitor_id', None)\n\n        if visitor_id:\n            ip_counts = self._ip_list_to_ip_counts(ip_list=self._visitor_id_to_ip_list(visitor_id=visitor_id))\n            # ip_counts = self._visitor_id_to_ip_list(visitor_id=visitor_id)\n            # ip_counts = Counter([x['ip'] for x in self.traj_data.find({'visitor_id': visitor_id},\n            #                                                           fields={'_id': False, 'ip': True})])\n            if len(ip_counts) == 0:\n                return None\n            else:\n                location_counts = DataFrame(map(self.ip_2_latlon, ip_counts.keys()))\n                location_counts['count'] = ip_counts.values()\n                return {'visitor_id': visitor_id, 'location_counts': self._ip_counts_to_latlon_counts(ip_counts)}\n        else:\n            raise ValueError('Unknown traj format (should be a visitor_id)')\n\n    def ip_list(self, visitor_id, **kwargs):\n        return [x['ip'] for x in self.traj_data.find({'visitor_id': visitor_id},\n                                                     fields={'_id': False, 'ip': True})]\n\n    def ip_counts(self, ip_list, **kwargs):\n        return Counter(ip_list)\n\n    def latlon_counts(self, ip_counts, **kwargs):\n        latlon_counts = DataFrame(map(self.ip_2_latlon, ip_counts.keys()))\n        latlon_counts['count'] = ip_counts.values()\n        return latlon_counts\n\n\n```\n\nMake the object:\n\n```python\ndflow = TrajFeatBuilder(verbose_level=10)\n\n```\n\nGet an `ip_list` for a given visitor\n\n```python\ndflow.get_data('ip_list', visitor_id='201411301840218052872011')\n```\n\n```\n['86.73.225.225',\n '86.73.225.225',\n '84.103.117.129',\n '84.103.117.129',\n '84.103.117.129',\n '84.103.117.129',\n '84.103.117.129',\n '84.103.117.129',\n '84.103.117.129',\n '84.103.117.129',\n '84.103.117.129',\n '84.103.117.129',\n '84.103.117.129',\n '84.103.117.129',\n '86.73.225.248',\n '86.73.225.225',\n '86.73.225.225',\n '86.73.225.225',\n '86.73.225.225',\n '86.73.225.225',\n '86.73.225.225',\n '86.73.225.225']\n```\nGet a count of the locations coordinates where visitor was present.\n\n```python\ndflow.get_data('latlon_counts', visitor_id='201411301840218052872011')\n```\n\n|    |     lat |    lon |   count |\n|---:|--------:|-------:|--------:|\n|  0 | 48.9258 | 2.4453 |       1 |\n|  1 | 48.9102 | 2.5532 |      12 |\n|  2 | 48.9258 | 2.4453 |       9 |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/i2mint/dacc",
    "keywords": "",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dacc",
    "package_url": "https://pypi.org/project/dacc/",
    "platform": "any",
    "project_url": "https://pypi.org/project/dacc/",
    "project_urls": {
      "Homepage": "https://github.com/i2mint/dacc"
    },
    "release_url": "https://pypi.org/project/dacc/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A declarative approache to data access object construction",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8291244,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fa43203ec8fa6f0f969c56305bfc4d98d30028b7eb1a2fce04dc2dbdf9b9cc7",
          "md5": "f384dd17de293bb4501cce118f68006c",
          "sha256": "b22bb5d56972cd590170ddcc1171c8f7302ebd442fb32e08095e46481f0f0f84"
        },
        "downloads": -1,
        "filename": "dacc-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f384dd17de293bb4501cce118f68006c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5199,
        "upload_time": "2020-09-28T18:23:37",
        "upload_time_iso_8601": "2020-09-28T18:23:37.934466Z",
        "url": "https://files.pythonhosted.org/packages/3f/a4/3203ec8fa6f0f969c56305bfc4d98d30028b7eb1a2fce04dc2dbdf9b9cc7/dacc-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "960776c1906467739001148b1aa5ee9691a6976667a6720d998a9b7687c46779",
          "md5": "2ee221c0f47fd120fb3a3463dafc29ad",
          "sha256": "34a4ab7d2b575014b99538d2d8fb691dc061e57a22ee50e694993ed7f19a3d45"
        },
        "downloads": -1,
        "filename": "dacc-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ee221c0f47fd120fb3a3463dafc29ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5449,
        "upload_time": "2020-09-28T18:23:50",
        "upload_time_iso_8601": "2020-09-28T18:23:50.047953Z",
        "url": "https://files.pythonhosted.org/packages/96/07/76c1906467739001148b1aa5ee9691a6976667a6720d998a9b7687c46779/dacc-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8432afd11585ec12cd572eae518c1d9daf4e1f638e4a77f985bd8114611f080",
          "md5": "114fab5fa1d1af9774a9fee677ee8c3b",
          "sha256": "e8227e9d7aac7fa8401542fa3a61bdfeb17af2f0820341849371080a7b1cef9c"
        },
        "downloads": -1,
        "filename": "dacc-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "114fab5fa1d1af9774a9fee677ee8c3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5199,
        "upload_time": "2020-09-28T18:45:21",
        "upload_time_iso_8601": "2020-09-28T18:45:21.638787Z",
        "url": "https://files.pythonhosted.org/packages/f8/43/2afd11585ec12cd572eae518c1d9daf4e1f638e4a77f985bd8114611f080/dacc-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "870fe988e3b35012e87f9488f3cc4f52bbdaf39044cccd01a831e73707cc2d74",
          "md5": "3d302656fadccc2f6494935f53b3b99a",
          "sha256": "0e91821081d3128fe90158570d9e20fe90ddbf1cbdc5a1e2fe5df99a53e4e8ed"
        },
        "downloads": -1,
        "filename": "dacc-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3d302656fadccc2f6494935f53b3b99a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5464,
        "upload_time": "2020-09-28T18:45:26",
        "upload_time_iso_8601": "2020-09-28T18:45:26.569396Z",
        "url": "https://files.pythonhosted.org/packages/87/0f/e988e3b35012e87f9488f3cc4f52bbdaf39044cccd01a831e73707cc2d74/dacc-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8432afd11585ec12cd572eae518c1d9daf4e1f638e4a77f985bd8114611f080",
        "md5": "114fab5fa1d1af9774a9fee677ee8c3b",
        "sha256": "e8227e9d7aac7fa8401542fa3a61bdfeb17af2f0820341849371080a7b1cef9c"
      },
      "downloads": -1,
      "filename": "dacc-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "114fab5fa1d1af9774a9fee677ee8c3b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5199,
      "upload_time": "2020-09-28T18:45:21",
      "upload_time_iso_8601": "2020-09-28T18:45:21.638787Z",
      "url": "https://files.pythonhosted.org/packages/f8/43/2afd11585ec12cd572eae518c1d9daf4e1f638e4a77f985bd8114611f080/dacc-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "870fe988e3b35012e87f9488f3cc4f52bbdaf39044cccd01a831e73707cc2d74",
        "md5": "3d302656fadccc2f6494935f53b3b99a",
        "sha256": "0e91821081d3128fe90158570d9e20fe90ddbf1cbdc5a1e2fe5df99a53e4e8ed"
      },
      "downloads": -1,
      "filename": "dacc-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3d302656fadccc2f6494935f53b3b99a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5464,
      "upload_time": "2020-09-28T18:45:26",
      "upload_time_iso_8601": "2020-09-28T18:45:26.569396Z",
      "url": "https://files.pythonhosted.org/packages/87/0f/e988e3b35012e87f9488f3cc4f52bbdaf39044cccd01a831e73707cc2d74/dacc-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}