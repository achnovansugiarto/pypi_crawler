{
  "info": {
    "author": "Daniel Kelshaw",
    "author_email": "daniel.j.kelshaw@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PyGA\n\n[![Build Status](https://travis-ci.org/danielkelshaw/PyGA.svg?branch=master)](https://travis-ci.org/danielkelshaw/PyGA)\n\nPyGA is an extensible toolkit for Genetic Algorithms (GA) in Python.\n\nThe library aims to provide a high-level declarative interface which\nensures that GAs can be implemented and customised with ease. PyGA \nfeatures an extensible framework which allows researchers to provide \ncustom implementations which interface with existing functionality.\n\n- **License:** MIT\n- **Python Versions:** 3.6+\n\n## **Features:**\n- [x] High-level module for Genetic Algorithms.\n- [x] Extensible API for implementing new functionality.\n\n## **Basic Usage:**\n\nPyGA aims to provide a high-level interface for Genetic Algorithms - the\ncode below demonstrates just how easy running an optimisation procedure\ncan be.\n\n```python\nimport pyga\nfrom pyga.utils.functions import single_objective as fx\n\n\nbounds = {\n    'x0': [-1e6, 1e6],\n    'x1': [-1e6, 1e6],\n    'x2': [-1e6, 1e6]\n}\n\noptimiser = pyga.SOGA(bounds, n_individuals=30, n_iterations=100)\noptimiser.optimise(fx.sphere)\n```\n\n## **History:**\nThe optimisation history is written to a ```History``` data structure\nto allow the user to further investigate the optimisation procedure \nupon completion. This is a powerful tool, letting the user define custom\nhistory classes which can record whichever data the user desires.\n\nTracking the history of the optimisation process allows for plotting\nof the results, an example demonstration is seen in the\n```plot_fitness_history``` function - this can be further customised\nthrough the designation of a ```PlotDesigner``` object which provides\nformatting instructions for the graphing tools.\n\n## **Constraints:**\n\nPyGA  allows the user to define a set of constraints for the \noptimisation problem - this is achieved through inheriting a template \nclass and implementing the designated method. An example of which is \ndemonstrated below:\n\n```python\nfrom pyga.constraints.base_constraints import PositionConstraint\n\n\nclass UserConstraint(PositionConstraint):\n\n    def constrain(self, position):\n        return position['x0'] > 0 and position['x1'] < 0\n\n\noptimiser.constraint_manager.register_constraint(UserConstraint())\n```\n\nThis provides the user with a large amount of freedom to define the\nappropriate constraints and allows the `ConstraintManager` to deal with\nthe relevant constraints at the appropriate time.\n\n## **Customisation:**\nThough the base ```SOGA``` will work for many, there maybe aspects that\none may want to change, such as the selection / recombination methods.\nA common interface has been designed for these, this ensures that the\nuser can alter the functionality at will and researchers can implement\nadditional functionality with ease.\n\nAttributes of the ```SOGA``` instance can be modified to implement\nalternative methods, this is demonstrated below:\n\n```python\n# using 'uniform crossover' as the crossover method\nfrom pyga.utils.crossovers import UniformCrossover\noptimiser.crossover = UniformCrossover(p_swap=0.25)\n```\n```python\n# using 'fitness-proportionate selection' as the selection method\nfrom pyga.utils.selections import FitnessProportionateSelection\noptimiser.selection = FitnessProportionateSelection()\n```\n\nIt is also possible to define alternative termination criteria through\nimplementation of a ```TerminationManager``` class, a couple of examples\nare demonstrated below:\n\n```python\n# using elapsed time as the termination criteria\nfrom pyga.utils.termination_manager import TimeTerminationManager\noptimiser.termination_manager = TimeTerminationManager(t_budget=10_000)\n```\n\n```python\n# using error as the termination criteria\nfrom pyga.utils.termination_manager import ErrorTerminationManager\noptimiser.termination_manager = ErrorTerminationManager(\n    optimiser, target=0.0, threshold=1e-3\n)\n```\n\n###### Author: Daniel Kelshaw\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danielkelshaw/PyGA",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyGAopt",
    "package_url": "https://pypi.org/project/PyGAopt/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyGAopt/",
    "project_urls": {
      "Homepage": "https://github.com/danielkelshaw/PyGA"
    },
    "release_url": "https://pypi.org/project/PyGAopt/1.0.1/",
    "requires_dist": [
      "pytest (==5.4.1)",
      "numpy (==1.18.2)",
      "matplotlib (==3.2.1)"
    ],
    "requires_python": "",
    "summary": "A Python Genetic Algorithm Library.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7091458,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbe0b907115f619eb2a1d91db0e97f1077194967cad486e3a54d78dec34de209",
          "md5": "0d3a078cdc9b920062f6c0deae94cef7",
          "sha256": "848580b3ab01b8ee544a4cb05b6a4c54aecd42efe87a0d85f13c175e20e72eaf"
        },
        "downloads": -1,
        "filename": "PyGAopt-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d3a078cdc9b920062f6c0deae94cef7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24642,
        "upload_time": "2020-04-24T08:16:55",
        "upload_time_iso_8601": "2020-04-24T08:16:55.951894Z",
        "url": "https://files.pythonhosted.org/packages/cb/e0/b907115f619eb2a1d91db0e97f1077194967cad486e3a54d78dec34de209/PyGAopt-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8f910f9e0f9fbe79b955a9c5287719be768e39f513526314ad1883fd522b514",
          "md5": "3de2ecfdc0ac9a48f5600ad9e77ad98d",
          "sha256": "5bb0ecb7aea15362f27244b151cbfb6aea9f1e658de475e95423b09ab3403711"
        },
        "downloads": -1,
        "filename": "PyGAopt-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3de2ecfdc0ac9a48f5600ad9e77ad98d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12874,
        "upload_time": "2020-04-24T08:16:58",
        "upload_time_iso_8601": "2020-04-24T08:16:58.608360Z",
        "url": "https://files.pythonhosted.org/packages/f8/f9/10f9e0f9fbe79b955a9c5287719be768e39f513526314ad1883fd522b514/PyGAopt-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce5872b97651a37e1e7dbfc3f4f4fecc79c92dd65acadd43ce5d3ee47560093b",
          "md5": "b841a2a7b43cb49c129c70a37519edfc",
          "sha256": "ac9f19187d54738771ea859453007bfee4d37469b944c0b168db0a3d57892a45"
        },
        "downloads": -1,
        "filename": "PyGAopt-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b841a2a7b43cb49c129c70a37519edfc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24654,
        "upload_time": "2020-04-24T09:56:31",
        "upload_time_iso_8601": "2020-04-24T09:56:31.589609Z",
        "url": "https://files.pythonhosted.org/packages/ce/58/72b97651a37e1e7dbfc3f4f4fecc79c92dd65acadd43ce5d3ee47560093b/PyGAopt-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0d2970a368b4285bdacceba09c967e68b98a7ca47a1d9703d87efb61ef47878",
          "md5": "64a0f36d780f3f2028b89a2f094df2a7",
          "sha256": "8f575bfbeb67cfe82e2b97d70fa7abe19d9d66e0b155ed66bb84ed6699ebba77"
        },
        "downloads": -1,
        "filename": "PyGAopt-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "64a0f36d780f3f2028b89a2f094df2a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12885,
        "upload_time": "2020-04-24T09:56:33",
        "upload_time_iso_8601": "2020-04-24T09:56:33.058137Z",
        "url": "https://files.pythonhosted.org/packages/e0/d2/970a368b4285bdacceba09c967e68b98a7ca47a1d9703d87efb61ef47878/PyGAopt-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce5872b97651a37e1e7dbfc3f4f4fecc79c92dd65acadd43ce5d3ee47560093b",
        "md5": "b841a2a7b43cb49c129c70a37519edfc",
        "sha256": "ac9f19187d54738771ea859453007bfee4d37469b944c0b168db0a3d57892a45"
      },
      "downloads": -1,
      "filename": "PyGAopt-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b841a2a7b43cb49c129c70a37519edfc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24654,
      "upload_time": "2020-04-24T09:56:31",
      "upload_time_iso_8601": "2020-04-24T09:56:31.589609Z",
      "url": "https://files.pythonhosted.org/packages/ce/58/72b97651a37e1e7dbfc3f4f4fecc79c92dd65acadd43ce5d3ee47560093b/PyGAopt-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0d2970a368b4285bdacceba09c967e68b98a7ca47a1d9703d87efb61ef47878",
        "md5": "64a0f36d780f3f2028b89a2f094df2a7",
        "sha256": "8f575bfbeb67cfe82e2b97d70fa7abe19d9d66e0b155ed66bb84ed6699ebba77"
      },
      "downloads": -1,
      "filename": "PyGAopt-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "64a0f36d780f3f2028b89a2f094df2a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12885,
      "upload_time": "2020-04-24T09:56:33",
      "upload_time_iso_8601": "2020-04-24T09:56:33.058137Z",
      "url": "https://files.pythonhosted.org/packages/e0/d2/970a368b4285bdacceba09c967e68b98a7ca47a1d9703d87efb61ef47878/PyGAopt-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}