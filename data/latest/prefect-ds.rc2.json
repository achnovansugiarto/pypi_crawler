{
  "info": {
    "author": "Andrew Schechtman-Rook",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# prefect DS\nTools for making Prefect work better for typical data science workflows.\n\n# Install\n\n```bash\n$ pip install prefect-ds\n```\n\n# Usage\n\n`prefect_ds` is a lightweight wrapper around [`Prefect`](https://docs.prefect.io/), designed\nto make it easier to run workflows I typically encounter when doing data science — especially\ntasks related to analyzing large datasets and building models. Specifically, it implements the \nfollowing:\n\n## [`PandasResultHandler`](prefect_ds/pandas_result_handler.py)\n\nA result handler that reads to and writes from Pandas DataFrames. It should be able to handle\nany file type Pandas supports, and unlike built-in handlers like `LocalResultHandler` requires\nthe full specification of the file path — this makes it easy to inspect task results, or\nuse those results in other analysis. It also has support for templating, so task arguments\ncan be injected into the filenames (useful for things like `map`).\n\n```python\n>>> import os\n>>> os.environ[\"PREFECT__LOGGING__LEVEL\"] = \"ERROR\"\n\n>>> import pandas as pd\n>>> import time\n\n>>> from prefect import task\n>>> from prefect_ds.pandas_result_handler import PandasResultHandler \n\n>>> # Note the use of the task argument {id} as a template in the filename\n>>> @task(result_handler=PandasResultHandler(\"data_{id}.csv\", \"csv\"))\n... def demo_task(id):\n...     time.sleep(5)\n...     return pd.DataFrame({\"one\": [1, 2, 3], \"two\": [4, 5, 6]})\n\n```\n\nNote that in order to use the templating functionality of `PandasResultHandler`, you will need\nto run your flow using the `DSTaskRunner` (see below for more details).\n\n## [`checkpoint_handler`](prefect_ds/checkpoint_handler.py) and [`DSTaskRunner`](prefect_ds/task_runner.py)\n\nA state handler that implements filename-based checkpointing, in concert with the specialty \nresult handlers in prefect_ds. It intercepts the state change from `Pending`\nto `Running`, runs the `read` method of the result handler, and if successful loads\nthe result of that method as the result of the task, then sets the task to the `Success`\nstate. Conversely, if the `read` method fails, the task is run as normal and instead the\n`checkpoint_handler` runs the `write` method of the result handler afterwards. Using the \n`checkpoint_handler` makes it much easier to cache data across Prefect runs — you don't have to\nexplicitly persist the final flow state between runs, and you don't have to have the cache expire\nafter a certain amount of time. \n\nThis handler combines with `DSTaskRunner`, an extension to Prefect's `TaskRunner` that implements\nthe necessary hacks to allow for the templating of task arguments. This templating is required\nto handle cases like `map`, where without the templating the `checkpoint_handler` will read from/write\nto the same file for every iteration of the `map`. \n\n```python\n>>> import contextlib\n\n>>> from prefect import Flow\n>>> from prefect.engine import FlowRunner\n>>> from prefect_ds.checkpoint_handler import checkpoint_handler\n>>> from prefect_ds.task_runner import DSTaskRunner\n\n>>> with Flow(\"test\") as flow:\n...     output = demo_task(1)\n\n>>> # First, clean up any existing task results\n>>> with contextlib.suppress(FileNotFoundError):\n...     os.remove(\"data_1.csv\")\n\n>>> # Run the flow. Since the result file doesn't exist, will run the task\n>>> start = time.time()\n>>> state = FlowRunner(flow=flow, task_runner_cls=DSTaskRunner).run(\n...     task_runner_state_handlers=[checkpoint_handler]\n... )\n>>> print(f\"Took more than 5 seconds: {(time.time() - start) > 5}\")\nTook more than 5 seconds: True\n\n>>> # Run the flow again. Now that the result file exists, the task is short-circuited\n>>> start = time.time()\n>>> state = FlowRunner(flow=flow, task_runner_cls=DSTaskRunner).run(\n...     task_runner_state_handlers=[checkpoint_handler]\n... )\n>>> print(f\"Took less than 1 second: {(time.time() - start) < 1}\")\nTook less than 1 second: True\n\n```\n\n## [`DSFlowRunner`](prefect_ds/flow_runner.py)\n\nAn extension to Prefect's `FlowRunner`, which will automatically purge the results of upstream\ntasks once all of their downstream tasks have been run. This can be useful if your task outputs are\nlarge datasets; by default Prefect stores the results of every task for the duration of the\nflow, which can overwhelm your RAM if your results are all things like multi-GB Pandas DataFrames.\nWhile `PandasResultHandler`, `checkpoint_handler`, and `DSTaskRunner` are all designed to be used\ntogether, `DSFlowRunner` can have value on its own.\n\n```python\n>>> from prefect_ds.flow_runner import DSFlowRunner\n\n>>> @task()\n... def generate_data():\n...     return pd.DataFrame({\"one\": [1, 2, 3], \"two\": [4, 5, 6]})\n\n>>> @task()\n... def double_data(input_data):\n...     return input_data * 2\n\n\n>>> with Flow(\"test\") as flow:\n...     initial_data = generate_data()\n...     two_x_data = double_data(initial_data)\n...     four_x_data = double_data(two_x_data)\n\n>>> state = DSFlowRunner(flow=flow).run(return_tasks=flow.tasks)\n>>> state.result[initial_data].result # actual type is prefect_ds.result.PurgedResult\n\n>>> state.result[two_x_data].result # another PurgedResult\n\n>>> state.result[four_x_data].result # final result is correct, even though upstream results are gone\n   one  two\n0    4   16\n1    8   20\n2   12   24\n\n```  \n\n# Caveat\nWhile these components have unit tests covering what I consider to be typical use cases, \nI have not attempted to comprehensively test every possible interaction with Prefect. \nAs my understanding of Prefect is still relatively immature, I expect there \nare edge cases where the added functionality of prefect_ds breaks something in Prefect. I think\nthis is especially likely with Prefect Cloud, which I have not done any testing on. If you find\nsuch a situation, please feel free to post an issue describing the problem and (ideally) including\na minimum reproducible example of the bug.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AndrewRook/prefect_ds",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "Andrew Schechtman-Rook",
    "maintainer_email": "",
    "name": "prefect-ds",
    "package_url": "https://pypi.org/project/prefect-ds/",
    "platform": "",
    "project_url": "https://pypi.org/project/prefect-ds/",
    "project_urls": {
      "Homepage": "https://github.com/AndrewRook/prefect_ds"
    },
    "release_url": "https://pypi.org/project/prefect-ds/0.1.1/",
    "requires_dist": [
      "prefect (<=0.9.2,>=0.9.0)",
      "pandas (<=0.25.3,>=0.25.3)",
      "pytest (<=5.3.2,>=5.3.2) ; extra == 'dev'",
      "pytest-cov (<=2.8.1,>=2.8.1) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Tools for making Prefect work better for typical data science workflows",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6700615,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fb1d85b3b83d455b3ec4914ed402a7bae858f7a55ebf1dc447aea77c08a09b9",
          "md5": "2a22a7e57a042def0acab7f811f12250",
          "sha256": "4098bb45635624ac031b87a172b3a901239dc02d262514ac8739fabf6e85cf63"
        },
        "downloads": -1,
        "filename": "prefect_ds-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a22a7e57a042def0acab7f811f12250",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13055,
        "upload_time": "2020-02-25T03:05:09",
        "upload_time_iso_8601": "2020-02-25T03:05:09.088279Z",
        "url": "https://files.pythonhosted.org/packages/8f/b1/d85b3b83d455b3ec4914ed402a7bae858f7a55ebf1dc447aea77c08a09b9/prefect_ds-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d9792ea3f4dbb5aaf6e72e055d0fc053da167c65d435450fa185bd12ee5b4b7",
          "md5": "91f8bd27ccd754a92bec533f76b29718",
          "sha256": "87c7cfdf1f21f4c5026f9435f28edb3518dee10b0100d226b2471838dc66f0df"
        },
        "downloads": -1,
        "filename": "prefect_ds-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "91f8bd27ccd754a92bec533f76b29718",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10454,
        "upload_time": "2020-02-25T03:05:11",
        "upload_time_iso_8601": "2020-02-25T03:05:11.183397Z",
        "url": "https://files.pythonhosted.org/packages/6d/97/92ea3f4dbb5aaf6e72e055d0fc053da167c65d435450fa185bd12ee5b4b7/prefect_ds-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e4e4ad554c68f8dfcf0f1c5a63bea69399d9edbec8efdef601bf2b653d1124e",
          "md5": "a2d631e6544707e51793c5419c523ebf",
          "sha256": "a8f358d03c2dccac30bbb3d56be66d0d44ea57db30efbbe10c62c06dd4711e33"
        },
        "downloads": -1,
        "filename": "prefect_ds-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2d631e6544707e51793c5419c523ebf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13075,
        "upload_time": "2020-02-26T02:23:02",
        "upload_time_iso_8601": "2020-02-26T02:23:02.972157Z",
        "url": "https://files.pythonhosted.org/packages/0e/4e/4ad554c68f8dfcf0f1c5a63bea69399d9edbec8efdef601bf2b653d1124e/prefect_ds-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "072912a18e618875a1a7d8a21c4a2162abc5bfca6839d6da956387c403605422",
          "md5": "92e0d938d5e8d39a4a140b5682e72677",
          "sha256": "5e0144dab35c277ea79f4d228ec7d8fc62513c45c0e92fac6caae39c364744e2"
        },
        "downloads": -1,
        "filename": "prefect_ds-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "92e0d938d5e8d39a4a140b5682e72677",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10451,
        "upload_time": "2020-02-26T02:23:04",
        "upload_time_iso_8601": "2020-02-26T02:23:04.437149Z",
        "url": "https://files.pythonhosted.org/packages/07/29/12a18e618875a1a7d8a21c4a2162abc5bfca6839d6da956387c403605422/prefect_ds-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e4e4ad554c68f8dfcf0f1c5a63bea69399d9edbec8efdef601bf2b653d1124e",
        "md5": "a2d631e6544707e51793c5419c523ebf",
        "sha256": "a8f358d03c2dccac30bbb3d56be66d0d44ea57db30efbbe10c62c06dd4711e33"
      },
      "downloads": -1,
      "filename": "prefect_ds-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a2d631e6544707e51793c5419c523ebf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13075,
      "upload_time": "2020-02-26T02:23:02",
      "upload_time_iso_8601": "2020-02-26T02:23:02.972157Z",
      "url": "https://files.pythonhosted.org/packages/0e/4e/4ad554c68f8dfcf0f1c5a63bea69399d9edbec8efdef601bf2b653d1124e/prefect_ds-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "072912a18e618875a1a7d8a21c4a2162abc5bfca6839d6da956387c403605422",
        "md5": "92e0d938d5e8d39a4a140b5682e72677",
        "sha256": "5e0144dab35c277ea79f4d228ec7d8fc62513c45c0e92fac6caae39c364744e2"
      },
      "downloads": -1,
      "filename": "prefect_ds-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "92e0d938d5e8d39a4a140b5682e72677",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10451,
      "upload_time": "2020-02-26T02:23:04",
      "upload_time_iso_8601": "2020-02-26T02:23:04.437149Z",
      "url": "https://files.pythonhosted.org/packages/07/29/12a18e618875a1a7d8a21c4a2162abc5bfca6839d6da956387c403605422/prefect_ds-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}