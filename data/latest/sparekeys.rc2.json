{
  "info": {
    "author": "Kale Kundert",
    "author_email": "kale@thekunderts.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "**********\nSpare Keys\n**********\nSpare Keys makes and distributes encrypted copies of the files that you would\nneed to recover from a catastrophic hard drive failure, e.g. SSH keys, GPG\nkeys, password vaults, etc.  The basic process goes like this:\n\n- You specify which files you want to keep spare copies of.  You can do this by\n  editing a configuration file, or by installing plugins.\n\n- You specify where you want to store encrypted copies of theses files (e.g.\n  remote hosts, USB drives, etc.), again via configuration files or plugins.\n\n- Run ``sparekeys`` to automatically create, encrypt, and distribute spare\n  copies of the specified files to the specified locations.  A decryption\n  script is distributed with the archive, so the only thing you need to\n  remember is the password you used for the encryption.\n\n- If you ever lose your hard drive, download the most recent archive from any\n  of the backup locations and run the provided decryption script to recover\n  your credentials.\n\n.. image:: https://img.shields.io/pypi/v/sparekeys.svg\n   :target: https://pypi.python.org/pypi/sparekeys\n\n.. image:: https://img.shields.io/pypi/pyversions/sparekeys.svg\n   :target: https://pypi.python.org/pypi/sparekeys\n\n.. image:: https://img.shields.io/readthedocs/sparekeys.svg\n   :target: https://sparekeys.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/github/workflow/status/kalekundert/sparekeys/Test%20and%20release/master\n   :target: https://github.com/kalekundert/sparekeys/actions\n\n.. image:: https://img.shields.io/coveralls/kalekundert/sparekeys.svg\n   :target: https://coveralls.io/github/kalekundert/sparekeys?branch=master\n\nInstallation\n============\nSpare Keys can be installed from PyPI::\n\n   $ pip3 install sparekeys\n\nNote that Spare Keys requires pythonâ‰¥3.6.\n\nUsage\n=====\nTo get started, simply run the following command::\n\n   $ sparekeys\n\nThis will create and execute a default configuration that will save your SSH\nand GPG credentials.  Your credentials won't be copied anywhere, but the path\nto the encrypted archive will be shown so that you can copy it yourself.\n\nFor more information::\n\n   $ sparekeys -h\n\nExamples\n========\nBelow are some example Spare Keys configuration files to help get you started.\nSee the Configuration_ and Plugins_ sections for more information on these\noptions.\n\nCopy SSH and GPG keys to a remote host via ``scp``::\n\n   [plugins]\n   archive = ['ssh', 'gpg']\n   publish = ['scp']\n\n   [publish.scp]\n   host = 'alice@example.com'\n\nCopy SSH and GPG keys to a USB drive mounted at ``/mnt/usb``::\n\n   [plugins]\n   archive = ['ssh', 'gpg']\n   publish = ['mount']\n\n   [publish.mount]\n   drive = '/mnt/usb'\n\nArchive SSH keys, GPG keys, and a cryptocurrency wallet::\n\n   [plugins]\n   archive = ['ssh', 'gpg', 'file']\n\n   # There isn't a built-in plugin for wallets (yet), so instead use the \"file\"\n   # plugin to manually specify files to copy.\n   [archive.file]\n   src = '~/.config/cryptocurrency'\n\nUse your avendesora_ \"login\" credentials to encrypt the archive.  As a\nfallback, prompt for a password (getpass)::\n\n   [plugins]\n   archive = ['ssh', 'gpg']\n   auth = ['avendesora', 'getpass']\n\n   [auth.avendesora]\n   account = 'login'\n\nConfiguration\n=============\nThe configuration file is based on the `TOML file format\n<https://github.com/toml-lang/toml>`__.  On Linux systems, it can be found at::\n\n   ~/.config/sparekeys/config.toml\n\nBroadly, you need to enable any plugins use with to use, and you need to\nconfigure any plugins that require extra information::\n\n   ## Enable plugins ###############################################\n\n   [plugins]\n   # When creating the archive, use the SSH and GPG plugins.\n   archive = ['ssh', 'gpg']\n\n   # When publishing the archive, use the 'scp' and 'mount' plugins:\n   publish = ['scp', 'mount']\n\n   ## Configure plugins ############################################\n\n   # The SSH and GPG plugins require no further information.\n\n   # The 'scp' plugin needs the address of a remote host:\n   [publish.scp]\n   host = 'alice@example.com'\n\n   # The 'mount' plugin needs the path of a drive to mount:\n   [publish.scp]\n   drive = '/mnt/usb'\n\nYou can get a list of installed plugins by running ``sparekeys plugins``.  More\ninformation on the built-in plugins is available in the Plugins_ section\nbelow.  The `Plugin API`_ section described how you can make your own plugins.\n\nThe ``[plugins]`` block:\n\n- ``archive`` (list): A list of plugins to use for finding important files and\n  building the archive.  Built-in options include 'ssh', 'gpg', and 'file'.\n\n- ``publish`` (list): A list of plugins to use when copying the encrypted\n  archive to remote destinations.  Built-in options include 'scp' and 'mount'\n\n- ``auth`` (list): A list of plugins to query for a password when encrypting\n  archive.  The plugins will be invoked in the order specified until a passcode\n  is obtained.  Any subsequent plugins will not be invoked.  If no\n  authentication plugins are specified, the built-in 'getpass' plugin (which\n  asks for a passcode in the terminal) will be used.  If no passcode can be\n  obtained, the archive will not be created.\n\n**The configuration blocks:**\n\nThe remaining blocks provide configuration options specific to individual\nplugins.  The block follow the naming pattern: ``[STAGE.PLUGIN]``.  ``STAGE``\nis the category of plugin, e.g. one of ``archive``, ``publish``, or ``auth``.\n``PLUGIN`` is the name of the plugin, which could be anything.  Within the\nblock go any options relating to the plugin in question.  Each plugin\nunderstands a different set of options.\n\nBelow is an example configuration block for the ``publish.scp`` plugin, which\ndescribes how to copy the archive to a remote host via scp::\n\n   [publish.scp]\n   host = ['alice@home.net', 'alice@work.com']\n   remote_dir = 'backup'\n\nIt is also possible to specify multiple configuration blocks for any individual\nplugin (except the authentication plugins).  If you do this, the plugin will be\nexecuted once for each such block.  For example, the following configuration\nwould publish the spare keys to two different directories on two different\nremote hosts::\n\n   [[publish.scp]]\n   host = 'alice@home.net'\n   remote_dir = 'backup'\n\n   [[publish.scp]]\n   host = 'alice@work.com'\n   remote_dir = '/backups/alice/'\n\n**Top-level options:**\n\n- ``archive_name`` (str, default: ``'{host}'``): A format string that will be\n  used to name each archive.  The following values can be substituted using the\n  standrad python formatting syntax:\n\n   - ``{user}``: The name of the logged-in user.\n   - ``{host}``: The name of the current machine.\n   - ``{date:YYYYMMDD}``: The current date.  The characters after the colon\n     specify how the date should be `formatted\n     <https://arrow.readthedocs.io/en/latest/#format>`__.\n\nPlugins\n=======\nSpare Keys supports the use of setuptools plugins to customize the backup\nprocess.  Below are descriptions of all the built-in plugins:\n\n``archive.ssh``\n   Copy the ``.ssh`` directory into the archive.  No configuration options.\n\n``archive.gpg``\n   Copy the ``.gpg`` directory into the archive.  No configuration options.\n\n``archive.file``\n   Copy arbitrary files into the archive.  This plugin is provided to make it\n   easy to copy valuable files for which devoted plugins are not available.\n   The following option must be configured:\n\n   - ``src`` (str or list): One or more paths to copy.  The copied file(s) will\n     have the same path relative to the archive as the original file(s) have\n     relative to the home directory.\n\n``archive.emborg``\n   Copy files for `borg backup <https://www.borgbackup.org/>`__ and its `emborg\n   front-end <https://github.com/KenKundert/emborg>`__ into the archive.  These\n   files include the keys and configuration options necessary to recover your\n   backups.  The ``borg key export`` command is run to download keys for\n   'repokey' backups, protecting against corruption in the backup archive.\n\n   - ``config`` (str): Name of emborg configuration to use. If not given the \n     default configuration is used.\n\n``archive.avendesora``\n   Copy configuration files for the avendesora_ password manager into the\n   archive.\n\n   No configuration options.\n\n``publish.scp``\n   Copy the encrypted archive to a remote host via ``scp``.  The following\n   configuration options are available:\n\n   - ``host`` (str or list, required): The name(s) of the remote host(s) to\n     copy the archive to.  Any format understood by SSH is acceptable.\n\n   - ``remote_dir`` (str, default: ``'backup/sparekeys'``): The directory where\n     the spare keys should be stored on the remote host.\n\n``publish.mount``\n   Copy the encrypted archive to a mounted/mountable drive.\n   For example, it might be a good idea to copy your keys onto a USB drive\n   which could be stored in a safe-deposit box.  The following configuration\n   options are available:\n\n   - ``drive`` (str): The path to the mountpoint for the drive, which must be\n     present and configured in ``/etc/fstab``.  If the drive is not mounted\n     when Spare Keys runs, Spare Keys will attempt to mount it and will (if\n     successful) unmount it when finished.  If the drive is mounted when Spare\n     Keys runs, Spare Keys will leave it mounted.\n\n   - ``remote_dir`` (str, default: ``'backup/sparekeys'``): The directory where\n     the spare keys should be stored on the mounted drive.\n\n``auth.getpass``\n   Get a passcode for the archive by prompting for one in the terminal.  The\n   passcode is never printed to the terminal and never saved anywhere.  This\n   plugin is special in that it is the default if no other authentication\n   plugins are enabled.\n\n``auth.avendesora``\n   Get a passcode for the archive from avendesora_.\n\n   - ``account`` (str): The name of the account to get the passcode for.  It's\n     recommended to use a password you have completely memorized (e.g. a login\n     password), because avendesora itself is unlikely to be available to you if\n     you ever need to recover your keys.  This configuration option is required.\n   - ``field`` (str): The name of the account field that contains the password \n     or pass phrase. If not given, avendesora chooses a likely candidate for \n     you.\n\nPlugin API\n==========\nPlugins can be installed using the `setuptools Entry Points API\n<https://amir.rachum.com/blog/2017/07/28/python-entry-points/>`__::\n\n   setup(\n      ...\n      entry_points={\n          'sparekeys.archive': [\n              'spam=package.module:archive_spam',\n          ],\n          'sparekeys.publish': [\n              'spam=package.module:publish_spam',\n          ],\n          'sparekeys.auth': [\n              'spam=package.module:auth_spam',\n          ],\n      },\n      ...\n   )\n\nCurrently, three entry points are supported: ``sparekeys.archive``,\n``sparekeys.publish``, and ``sparekeys.auth``.  These entry points correspond\nto the three categories of plugins detailed in the Configuration_ section\nabove.  Each plugin must have a unique name within its category (\"spam\" in the\nexample above).\n\nAn ``archive`` plugin must be a function that accepts two arguments:\n\n- A dictionary with any configuration values specific to the plugin.\n- The path to the archive.\n\nThe function must copy any necessary files into the archive, possibly after\ndoing more complicated things like generating or downloading said files.  The\n``sparekeys.copy_to_archive()`` utility is often useful for these plugins.  It\ncopies files into the archive such that their path within the archive is the\nsame as their path relative to the home directory.  Below is an example that\ncopies ``~/.config/spam`` into the archive::\n\n   def archive_spam(config, archive):\n       sparekeys.copy_to_archive('~/.config/spam', archive)\n\nA ``publish`` plugin must be a function that accepts two arguments:\n\n- A dictionary with any configuration values specific to the plugin.\n- The path the directory containing the encrypted archive (called\n  ``archive.tgz.gpg``) and the decryption script (called ``decrypt.sh``).\n\nThe plugin should copy the encrypted archive to a remote destination.  Below is\nan example that simply copies the archive to ``~/spam``::\n\n   def publish_spam(config, workspace):\n      cp(workspace, '~/spam')\n\nAn ``auth`` plugin must be a function that accepts one argument:\n\n- A dictionary with any configuration values specific to the plugin.\n\nThe plugin should either return a passcode or raise one of the exceptions\ndetailed below.  A typical plugin might query a particular password valut,\nusing an account specified in the given configuration.  Below is an example\nthat simply returns the string \"spam\"::\n\n   def auth_spam(config):\n       return \"spam\"\n\n**Exceptions:**\n\nPlugins can raise the following exceptions:\n\n- ``SkipPlugin``: The plugin can't do its job for some reason.  A warning will\n  be printed, but the program will continue.\n\n- ``PluginConfigError``: Something about the plugin's configuration doesn't\n  make sense and/or is missing.  The program will be stopped and an informative\n  error will be displayed.\n\n- ``PluginError``: Something else went wrong.  The program will be aborted\n  immediately and an informative error will be displayed..\n\n.. _avendesora: https://github.com/kenkundert/avendesora\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kalekundert/sparekeys",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sparekeys",
    "package_url": "https://pypi.org/project/sparekeys/",
    "platform": "",
    "project_url": "https://pypi.org/project/sparekeys/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kalekundert/sparekeys/issues",
      "Continuous Integration": "https://github.com/kalekundert/sparekeys/actions",
      "Documentation": "https://sparekeys.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/kalekundert/sparekeys",
      "Test Coverage": "https://coveralls.io/github/kalekundert/sparekeys",
      "Version Control": "https://github.com/kalekundert/sparekeys"
    },
    "release_url": "https://pypi.org/project/sparekeys/0.2.0/",
    "requires_dist": [
      "inform>=1.14",
      "shlib>=1.0",
      "setuptools",
      "toml",
      "appdirs",
      "docopt",
      "python-gnupg>=0.4.3",
      "sphinx ; extra == \"docs\"",
      "sphinx_rtd_theme ; extra == \"docs\"",
      "autoclasstoc ; extra == \"docs\"",
      "pytest ; extra == \"tests\"",
      "pytest-cov ; extra == \"tests\"",
      "coveralls ; extra == \"tests\""
    ],
    "requires_python": "~=3.6",
    "summary": "Make and distribute encrypted copies of the files that you would need to ",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7786498,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bb35a178cd1d834b995052e2790afc5e561a9be0f75b102983aef0b54749a5f",
          "md5": "08e5b237f2c318539e6fd8bf0e89a6df",
          "sha256": "f4e85c55fec4fb2b3ade92a08209b1a3440fd6b6398ed89be2896f970d44788c"
        },
        "downloads": -1,
        "filename": "sparekeys-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "08e5b237f2c318539e6fd8bf0e89a6df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25440,
        "upload_time": "2018-12-28T16:48:07",
        "upload_time_iso_8601": "2018-12-28T16:48:07.032949Z",
        "url": "https://files.pythonhosted.org/packages/9b/b3/5a178cd1d834b995052e2790afc5e561a9be0f75b102983aef0b54749a5f/sparekeys-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6479c4b4234a14cda33dc9dcb3ba0fc748e94f535eb1181a3b39b38ea6f9e368",
          "md5": "02425b3cd73f00b37a66b3320d48c855",
          "sha256": "c0d084c0edc079a8018a17899341f23dd6b5ec03240a4fd17cb357a68777468a"
        },
        "downloads": -1,
        "filename": "sparekeys-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02425b3cd73f00b37a66b3320d48c855",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "~=3.6",
        "size": 23765,
        "upload_time": "2020-07-25T20:35:22",
        "upload_time_iso_8601": "2020-07-25T20:35:22.037685Z",
        "url": "https://files.pythonhosted.org/packages/64/79/c4b4234a14cda33dc9dcb3ba0fc748e94f535eb1181a3b39b38ea6f9e368/sparekeys-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecd58f7199d3736ec48d76fda19565129115b3cc3395029a410a8425b8bfb560",
          "md5": "50ba7a7f799d275e32c049a3cca70e5f",
          "sha256": "8f898894565fe8268c857bab33b69f8d4c83fbd2e16aec7b750fa6a5c17494fc"
        },
        "downloads": -1,
        "filename": "sparekeys-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "50ba7a7f799d275e32c049a3cca70e5f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 27359,
        "upload_time": "2020-07-25T20:35:23",
        "upload_time_iso_8601": "2020-07-25T20:35:23.603716Z",
        "url": "https://files.pythonhosted.org/packages/ec/d5/8f7199d3736ec48d76fda19565129115b3cc3395029a410a8425b8bfb560/sparekeys-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6479c4b4234a14cda33dc9dcb3ba0fc748e94f535eb1181a3b39b38ea6f9e368",
        "md5": "02425b3cd73f00b37a66b3320d48c855",
        "sha256": "c0d084c0edc079a8018a17899341f23dd6b5ec03240a4fd17cb357a68777468a"
      },
      "downloads": -1,
      "filename": "sparekeys-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "02425b3cd73f00b37a66b3320d48c855",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": "~=3.6",
      "size": 23765,
      "upload_time": "2020-07-25T20:35:22",
      "upload_time_iso_8601": "2020-07-25T20:35:22.037685Z",
      "url": "https://files.pythonhosted.org/packages/64/79/c4b4234a14cda33dc9dcb3ba0fc748e94f535eb1181a3b39b38ea6f9e368/sparekeys-0.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecd58f7199d3736ec48d76fda19565129115b3cc3395029a410a8425b8bfb560",
        "md5": "50ba7a7f799d275e32c049a3cca70e5f",
        "sha256": "8f898894565fe8268c857bab33b69f8d4c83fbd2e16aec7b750fa6a5c17494fc"
      },
      "downloads": -1,
      "filename": "sparekeys-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "50ba7a7f799d275e32c049a3cca70e5f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 27359,
      "upload_time": "2020-07-25T20:35:23",
      "upload_time_iso_8601": "2020-07-25T20:35:23.603716Z",
      "url": "https://files.pythonhosted.org/packages/ec/d5/8f7199d3736ec48d76fda19565129115b3cc3395029a410a8425b8bfb560/sparekeys-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}