{
  "info": {
    "author": "Morris Lee",
    "author_email": "info.leekahwin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# A package to easy implement memory-based recommender\nThe description here will walkthrough a tutorial to implement a memory-based recommender step by step.\n\n\n## To install the package\n\n```\npip install memory-recommender==0.0.4\n```\n\n## Let's get started\n\nLet me show you how the package works, here will show user-based top-n recommendation. To make item-based, simply switch the index_col and column_col\n\n## **Step 1**: To get a sample dataframe from MovieLens\nThe first step is to get a sample dataset to show how it works. Let get a sample dataset from MovieLens.\n\n**Input [1]**:\n\n```python\n# let's import the package\nfrom m_recommender import memory as m\n\n# get dataframe\ndf = m.get_df()\ndf\n```\n\n**Output [1]**:\n\n```\n+-------+----------+-----------+----------+-------------------------------------+\n|       |   userId |   movieId |   rating | title                               |\n+=======+==========+===========+==========+=====================================+\n| 32170 |      605 |      1498 |        2 | Inventing the Abbotts               |\n+-------+----------+-----------+----------+-------------------------------------+\n| 83001 |       38 |    110102 |        4 | Captain America: The Winter Soldier |\n+-------+----------+-----------+----------+-------------------------------------+\n| 78180 |      574 |     64614 |        4 | Gran Torino                         |\n+-------+----------+-----------+----------+-------------------------------------+\n| 17477 |      190 |       785 |        5 | Kingpin                             |\n+-------+----------+-----------+----------+-------------------------------------+\n| 31043 |       57 |      1378 |        4 | Young Guns                          |\n+-------+----------+-----------+----------+-------------------------------------+\n1000 rows Ã— 4 columns\n```\n\n## **Step 2**: To pivot a table and compute the pearson correlation\nNext, in this function, it will help you to settle (3) pre-processing tasks. Those tasks are common tasks before putting it into memory-based recommender, which are:\n(1): Stratified Split into training subset and testing subset\n(2): Pivot the dataset\n(3): Normalised the dataset\n\n**Input [2]**:\n```python\n\ndf2=df # selected dataframe\nindex_col='userId' # to make a pivot table with what kind of index column\ncolumns_col='title' # to make a pivot table with what kind of columns\nvalues_col='rating' # to make a pivot table with what kind of values\nrandom_state_value =42\nproposed_test_size=0.2 # the proposed stratified split with the index column, if rejected, it will auto propose a new one\n\nX_train, X_test, matrix_train_norm, matrix_train_norm_treated_pearson, matrix_test = m.recommender_pre_processing(df2=df, \\\n                                                                                                                  index_col=index_col, \\\n                                                                                                                  columns_col=columns_col, \\\n                                                                                                                  values_col=values_col, \\\n                                                                                                                  random_state_value =random_state_value, \\\n                                                                                                                  proposed_test_size=proposed_test_size)\n```\n\n**Output [2]**:\n```\nSTATUS: Unique value for userId = 386\nSTATUS: The proportion of the stratified splitting is 0.4246 to be able to perform stratify split\nSTATUS: The dataframe is splitted with test size of 0.4246\nSTATUS: Dimension of \"X_train\" = (471, 4)\nSTATUS: Dimension of \"X_test\" = (349, 4)\nSTATUS: Pivoted for matrix training set\nSTATUS: Dimension of \"train matrix\" = (206, 422)\nSTATUS: Pivoted for matrix testing set\nSTATUS: Dimension of \"test matrix\" = (206, 312)\n...\nSTATUS: Computing Pearson Correlation ...\nSTATUS: Computing Pearson Correlation Done\n...\n```\n\n## **Step 3**: To make a prediction (user-based top-10 recommendation)\n\nNow, the dataset is ready to make a prediction. Let say we want to predict userId 15 to see what movies are recommended for this user. And the function to implement is show here.\n\n**Input [3]**:\n```python\nmatrix_train_norm_treated_pearson = matrix_train_norm_treated_pearson # pearson correlation dataset as computed in previous kernel\nmatrix_train_norm = matrix_train_norm # normalised dataset, as computed in previous kernel\ncol_Id = 15 # selected target column to make a prediction for it (here is a userId)\nthereshold = None # thereshold of similarity\nn_rows = 100 # returned number of similar elements\ntopN = 10 # to return the top N ranked elements\nshow_text = False # want to show the computation behind the scene?\n\ntopn_result, col_Id = m.collaborative_recommender(matrix_train_norm_treated_pearson=matrix_train_norm_treated_pearson, \\\n                                                matrix_train_norm = matrix_train_norm, \\\n                                                col_Id = col_Id, \\\n                                                thereshold = thereshold, \n                                                n_rows = n_rows, \\\n                                                topN = topN, \\\n                                                show_text = show_text)\ntopn_result\n```\n**Output [3]**:\n```\n+-----+----------------------+------------------+\n|     | conditional_column   |   weighted_score |\n+=====+======================+==================+\n| 188 | Batman Returns       |      7.55878e-18 |\n+-----+----------------------+------------------+\n| 114 | Taken                |      3.84573e-18 |\n+-----+----------------------+------------------+\n| 266 | The Sixth Sense      |      3.13265e-18 |\n+-----+----------------------+------------------+\n|  36 | Twelve Monkeys       |      2.85393e-18 |\n+-----+----------------------+------------------+\n|  27 | Romeo + Juliet       |      2.51117e-18 |\n+-----+----------------------+------------------+\n| 165 | Withnail & I         |      2.23939e-18 |\n+-----+----------------------+------------------+\n| 239 | The Boondock Saints  |      2.23008e-18 |\n+-----+----------------------+------------------+\n| 196 | Baraka               |      2.17991e-18 |\n+-----+----------------------+------------------+\n|  44 | Simon Birch          |      2.1664e-18  |\n+-----+----------------------+------------------+\n|  72 | Toy Story            |      1.96495e-18 |\n+-----+----------------------+------------------+\n\n```\n## **Step 4**:To evaluate the user-based top-N recommender\n\nIt is also important to evaluate the recommender. This can let us know that the recommender is it perform well or not for this dataset. Because at the first place we have stratified split the data into training and testing subsets, so the testing subset are the actual moviesthat has been watched by the users. So, the recommended movies will be compared to the testing subset.\n\n**Input [4]**:\n```python\n\ntopN = 10\nmatrix_train_norm = matrix_train_norm\nmatrix_train_norm_treated_pearson = matrix_train_norm_treated_pearson\nmatrix_test = matrix_test\ntarget_users_len =None\nn_rows=100\nSIZE=None\nlimit_len_actual='no' # limit test set item size\nrecommender_name='User-Based'\n\n\nresult_metric = m.get_evaluation_concat(topN =topN, matrix_train_norm = matrix_train_norm, \\\n                                      matrix_train_norm_treated_pearson = matrix_train_norm_treated_pearson, \\\n                                      matrix_test = matrix_test, \\\n                                      target_users_len = target_users_len, \\\n                                      n_rows=100, SIZE=None, limit_len_actual='no',recommender_name='User-Based')\nresult_metric\n\n\n```\n**Output [4]**:\n\n```\nSTATUS: Starting TopN = 10\nSTATUS: Random shuffled and sample dataset done\nSTATUS: Complete predictions 1/103...0.97%\nSTATUS: Complete predictions 11/103...10.68%\nSTATUS: Complete predictions 21/103...20.39%\nSTATUS: Complete predictions 31/103...30.10%\nSTATUS: Complete predictions 42/103...40.78%\nSTATUS: Complete predictions 52/103...50.49%\nSTATUS: Complete predictions 62/103...60.19%\nSTATUS: Complete predictions 73/103...70.87%\nSTATUS: Complete predictions 83/103...80.58%\nSTATUS: Complete predictions 93/103...90.29%\nSTATUS: Complete predictions 103/103...100.00%\n...\n+----+---------------+------------------+---------------+------------------+\n|    | Recommender   |   Precision@N=10 |   Recall@N=10 |   F-Measure@N=10 |\n+====+===============+==================+===============+==================+\n|  0 | User-Based    |           0.0039 |        0.0168 |           0.0063 |\n+----+---------------+------------------+---------------+------------------+\n```\n\nNow, the user-based recommender is implemented. For item-based recommender, simply simply switch the index_col and column_col when want to pivot the table. Hope you enjoy it. If you like it please let me know.\n\nThis is contributed by [Morris Lee](http://www.morris-lee.com/).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/k-w-lee/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memory-recommender",
    "package_url": "https://pypi.org/project/memory-recommender/",
    "platform": null,
    "project_url": "https://pypi.org/project/memory-recommender/",
    "project_urls": {
      "Bug Tracker": "https://github.com/k-w-lee/",
      "Homepage": "https://github.com/k-w-lee/"
    },
    "release_url": "https://pypi.org/project/memory-recommender/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A memory-based recommender system",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14101489,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7efd4d6eda0df0fac195e2c7bac940017b919ff6711677be3550cfb5132d915d",
          "md5": "763dad01314bedb7eebefa732090b478",
          "sha256": "c1c7234028545fcf41dd2ef7fe446f96e48819a31f6f8431f762f8263c2dc12f"
        },
        "downloads": -1,
        "filename": "memory_recommender-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "763dad01314bedb7eebefa732090b478",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34815,
        "upload_time": "2022-06-11T12:44:40",
        "upload_time_iso_8601": "2022-06-11T12:44:40.334582Z",
        "url": "https://files.pythonhosted.org/packages/7e/fd/4d6eda0df0fac195e2c7bac940017b919ff6711677be3550cfb5132d915d/memory_recommender-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6765d6f08126e5a47c05943e6f08da44795efcede068463fd5d6c651193bb0e",
          "md5": "4bf915323586197b3ec40eb6f8a80467",
          "sha256": "81ad179f1b14a3737c632acc6559ad59ab326c77336cb3e9a0f7f57faf3bb6fe"
        },
        "downloads": -1,
        "filename": "memory_recommender-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4bf915323586197b3ec40eb6f8a80467",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35020,
        "upload_time": "2022-06-11T12:44:44",
        "upload_time_iso_8601": "2022-06-11T12:44:44.077851Z",
        "url": "https://files.pythonhosted.org/packages/d6/76/5d6f08126e5a47c05943e6f08da44795efcede068463fd5d6c651193bb0e/memory_recommender-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f718b8fd439c84217f8ead2588ceacee13acee40b4f9e332b51f2eefc7d59008",
          "md5": "7013860dd9a80c91f32cfbcb1baa4147",
          "sha256": "76c2992b358272ff29311dd242c2c843ea3e04f773c70ae7d242d14902e4a0e9"
        },
        "downloads": -1,
        "filename": "memory_recommender-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7013860dd9a80c91f32cfbcb1baa4147",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36153,
        "upload_time": "2022-06-11T13:17:55",
        "upload_time_iso_8601": "2022-06-11T13:17:55.370875Z",
        "url": "https://files.pythonhosted.org/packages/f7/18/b8fd439c84217f8ead2588ceacee13acee40b4f9e332b51f2eefc7d59008/memory_recommender-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b940146779989a2a4d46efdbfc69650bd02d1e8100359c39c47f74f4e3bb553",
          "md5": "1460214519ed8949a30b4b0fc7482ff4",
          "sha256": "7e24712a0c7dd6fabc01e1241288e7ceb5ae12186d1031e43f0a2ebbb4bca0fe"
        },
        "downloads": -1,
        "filename": "memory_recommender-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1460214519ed8949a30b4b0fc7482ff4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37455,
        "upload_time": "2022-06-11T13:17:57",
        "upload_time_iso_8601": "2022-06-11T13:17:57.715004Z",
        "url": "https://files.pythonhosted.org/packages/3b/94/0146779989a2a4d46efdbfc69650bd02d1e8100359c39c47f74f4e3bb553/memory_recommender-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4c8e50359f303d0e5a3a035e914037f10b34815e3387eef4ae8825427097994",
          "md5": "be83cc3853b1570abbead81b555b7e2a",
          "sha256": "981d2026992b3031fdfee2ef4ce0faff93ebb540bf7c842676e8ce09482b0c72"
        },
        "downloads": -1,
        "filename": "memory_recommender-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be83cc3853b1570abbead81b555b7e2a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36198,
        "upload_time": "2022-06-11T13:23:16",
        "upload_time_iso_8601": "2022-06-11T13:23:16.230915Z",
        "url": "https://files.pythonhosted.org/packages/d4/c8/e50359f303d0e5a3a035e914037f10b34815e3387eef4ae8825427097994/memory_recommender-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79c021e0330081dc5b03398811a3282c058439819378303bf3650c09880d38fc",
          "md5": "c5e02f2041e3985c27dae18bd146eec7",
          "sha256": "82633711d086d9a6d02f861dc969ad0243e52db46cb524c8085a7ab3cb3e9a45"
        },
        "downloads": -1,
        "filename": "memory_recommender-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c5e02f2041e3985c27dae18bd146eec7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37534,
        "upload_time": "2022-06-11T13:23:18",
        "upload_time_iso_8601": "2022-06-11T13:23:18.353457Z",
        "url": "https://files.pythonhosted.org/packages/79/c0/21e0330081dc5b03398811a3282c058439819378303bf3650c09880d38fc/memory_recommender-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4ebadd70bfd8df409c016ae93e14a06636fffbb4f939eca862c4abb07ddb72e",
          "md5": "e06f1f3d2eb62501f96549451ce40955",
          "sha256": "3e68c5070074e950a1fc5869aea19a6a5b06bd2e3797d979af13522ac7cdfad3"
        },
        "downloads": -1,
        "filename": "memory_recommender-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e06f1f3d2eb62501f96549451ce40955",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36225,
        "upload_time": "2022-06-11T13:34:23",
        "upload_time_iso_8601": "2022-06-11T13:34:23.731349Z",
        "url": "https://files.pythonhosted.org/packages/b4/eb/add70bfd8df409c016ae93e14a06636fffbb4f939eca862c4abb07ddb72e/memory_recommender-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "796630581037df7bd16162ef73f2d38df1a932da11986d93089d5eab19182ad0",
          "md5": "5819276a61cf6a9ba957d054ba0ca8e1",
          "sha256": "7eb5758057da6af4aa594f46b9ee4946679cf042fbd53dd20dd3ca8348ce8a4b"
        },
        "downloads": -1,
        "filename": "memory_recommender-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5819276a61cf6a9ba957d054ba0ca8e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37567,
        "upload_time": "2022-06-11T13:34:25",
        "upload_time_iso_8601": "2022-06-11T13:34:25.702836Z",
        "url": "https://files.pythonhosted.org/packages/79/66/30581037df7bd16162ef73f2d38df1a932da11986d93089d5eab19182ad0/memory_recommender-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4ebadd70bfd8df409c016ae93e14a06636fffbb4f939eca862c4abb07ddb72e",
        "md5": "e06f1f3d2eb62501f96549451ce40955",
        "sha256": "3e68c5070074e950a1fc5869aea19a6a5b06bd2e3797d979af13522ac7cdfad3"
      },
      "downloads": -1,
      "filename": "memory_recommender-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e06f1f3d2eb62501f96549451ce40955",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 36225,
      "upload_time": "2022-06-11T13:34:23",
      "upload_time_iso_8601": "2022-06-11T13:34:23.731349Z",
      "url": "https://files.pythonhosted.org/packages/b4/eb/add70bfd8df409c016ae93e14a06636fffbb4f939eca862c4abb07ddb72e/memory_recommender-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "796630581037df7bd16162ef73f2d38df1a932da11986d93089d5eab19182ad0",
        "md5": "5819276a61cf6a9ba957d054ba0ca8e1",
        "sha256": "7eb5758057da6af4aa594f46b9ee4946679cf042fbd53dd20dd3ca8348ce8a4b"
      },
      "downloads": -1,
      "filename": "memory_recommender-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "5819276a61cf6a9ba957d054ba0ca8e1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 37567,
      "upload_time": "2022-06-11T13:34:25",
      "upload_time_iso_8601": "2022-06-11T13:34:25.702836Z",
      "url": "https://files.pythonhosted.org/packages/79/66/30581037df7bd16162ef73f2d38df1a932da11986d93089d5eab19182ad0/memory_recommender-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}