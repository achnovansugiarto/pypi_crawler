{
  "info": {
    "author": "Rio McMahon",
    "author_email": "rmcsqrd@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n# pygcdm\n[![Coverage Status](https://coveralls.io/repos/github/rmcsqrd/pygcdm/badge.svg?branch=main)](https://coveralls.io/github/rmcsqrd/pygcdm?branch=main)\n[![PyPI](https://img.shields.io/pypi/v/pygcdm)](https://pypi.org/project/pygcdm/)\n\nA python API for transferring [Common Data Model (CDM)](https://docs.unidata.ucar.edu/netcdf-java/current/userguide/common_data_model_overview.html) files using [Remote Procedure Calls](https://grpc.io/).\n\n- [Installation](#install)\n- [Usage](#use)\n  - [Transfer Files using GRPC](#transferAPI)\n  - [Encode/Decode API](#encodedecode)\n  - [Message Types](#msgtypes)\n  - [`variable_spec` Definition](#varspecdef)\n- [Utilities](#util)\n  - [Rebuilding the Package Locally](#buildlocal)\n  - [Committing the Package to PyPi](#buildpypi)\n  - [Generating Python Source Code from `proto` Files](#genproto)\n  - [Run Tests Locally](#runtests)\n\n## Installation<a name=\"install\"></a>\nCreate a new virtual environment using [conda](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands). If you don't have `conda` installed on your machine, install if following [these instructions](https://conda.io/projects/conda/en/latest/user-guide/install/index.html). Note that `pygcdm` requires `python>=3.9` so we specify that explicitly. We can then use `pip` for installation after activating the `conda` environment.\n```\nconda create --name [environment name] python=3.9\nconda activate [environment name]\npip install pygcdm\n```\n\n## Usage<a name=\"use\"></a>\n\n### Transfer Files using gRPC<a name=\"transferAPI\"></a>\nThis demonstrates how to implement the python encode/decode API and transmit netCDF files via gRPC. Start by opening up two separate tabs in your terminal. Make sure that whatever python environment you installed the requirements into is active in both. Navigate to the `examples` folder in this repo. \n\nIn the first tab, start the gRPC server by running the following command:\n```\npython grpc_netcdf_server.py\n```\nIf it is working properly you should see something that says `starting server...`.\n\nIn the second tab, make a client request by running the following command:\n```\npython grpc_netcdf_client.py\n```\nSomething resembling an xarray dataset should print to the terminal if everything is working. Feel free to modify the `loc` and `variable_spec` variables in `grpc_netcdf_client.py` to modify what data is transmitted.\n\n### Encode/Decode API<a name=\"encodedecode\"></a>\nThis demonstrates how to encode/decode gRPC messages within a python shell:\n```\n# import/instantiate encoder object\nfrom pygcdm.netcdf_encode import netCDF_Encode\nencoder = netCDF_Encode()\n\n# import and define header request\nimport pygcdm.protogen.gcdm_netcdf_pb2 as grpc_msg\nfile_loc = \"test/data/test3.nc\"\nheader_request = grpc_msg.HeaderRequest(location=file_loc)\nheader_response = encoder.generate_header_from_request(header_request)\n\n# define data request\nvar_spec = \"analysed_sst\"\ndata_request = grpc_msg.DataRequest(location=file_loc, variable_spec=var_spec)\ndata_response = encoder.generate_data_from_request(data_request)\n\n# decode header/data into xarray object\nfrom pygcdm.netcdf_decode import netCDF_Decode\ndecoder = netCDF_Decode()\nds = decoder.generate_file_from_response(header_response, data_response)\n```\n\n### Message Types<a name=\"msgtypes\"></a>\n`pygcdm` has two message types `HeaderRequest` and `DataRequest` which have corresponding response types (`HeaderResponse`, `DataResponse` respectively). These messages can be learned about [here](https://grpc.io/docs/what-is-grpc/introduction/#working-with-protocol-buffers) and are defined in `protos/pygcdm/protogen/gcdm_netcdf.proto`. The main idea is that you pack your request messages with the information you want and unpack the response messages (`pygcdm` does this packing/unpacking for you). The `.proto` messages are pretty human readable but a description is provided here:\n\n`HeaderRequest`:\n- `location` (string): file location where netCDF file is found on machine delivering response\n\n`DataRequest`:\n- `location` (string): file location where netCDF file is found on machine delivering response\n- `variable_spec` (string): desctribes what netCDF variable/variable slices you want to request (see `variable_spec` section in this README)\n\n### `variable_spec` Definition<a name=\"varspecdef\"></a>\n`variable_spec` is how you define which variable/data slices you want from the remote netCDF file. It follows [Backus-Naur form](https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form) according to the following definition, which was adopted from `netcdf-java` which is documented [here](https://docs.unidata.ucar.edu/netcdf-java/7.0/javadoc/ucar/nc2/ParsedArraySectionSpec.html):\n```\nsection specification := selector | selector '.' selector\nselector := varName ['(' dims ')']\nvarName := ESCAPED_STRING\n\n\ndims := dim | dim, dims\ndim := ':' | slice | start ':' end | start ':' end ':' stride\nslice := INTEGER\nstart := INTEGER\nstride := INTEGER\nend := INTEGER\nESCAPED_STRING : must escape characters = \".(\"\n```\nIn practice, this means that `variable_spec` can look like the following examples. Slicing notation is analogous to numpy slicing (but not identical).\n- `analysed_sst` \n- `analysed_sst(:, :, :)`\n- `analysed_sst(0,0:719:10,0:1439:10)`\n- `analysed_sst(0,200:700:10,1300:1400:10)`\n\nNote that these examples are derived from some of the tests in `test/`. \n\n\n## Utilities<a name=\"util\"></a>\n\n### Rebuilding the Package Locally<a name=\"buildlocal\"></a>\nIf you modify the package locally and want to rebuild the package for testing you can run the following command from the root folder:\n```\npip install .\n```\n(You can verify installation by running `pip show -f pygcdm`).\n\n### Committing the Package to PyPi<a name=\"buildpypi\"></a>\nIf you have the priviledges to do so, you can commit the package to PyPi by running the following command in the root folder:\n```\npython setup.py upload\n```\nwhich will prompt you what type of upload you want: `test` or `real`, where `test` uploads to [https://test.pypi.org/project/pygcdm/](https://test.pypi.org/project/pygcdm/) and `real` uploads to [https://pypi.org/project/pygcdm/](https://pypi.org/project/pygcdm/). You'll then be prompted to include your login credentials. \n\n### Generating Python Source Code from `proto` Files<a name=\"genproto\"></a>\nIn order to generate the grpc python source code from the `.proto` files in `protos/src/protogen`, we need to use the `protoc` compiler (the reason for the weird subfolder structure is so that `protoc` generates files with proper import namespaces). The python package with `protoc` can be installed by following the instructions [here](https://www.grpc.io/docs/languages/python/basics/#generating-client-and-server-code).\n\nTo compile our code, and put the resulting functions into `src/protogen/`, we can use the following commands (from the root directory where this README is located):\n```\n$ python -m grpc_tools.protoc -I protos/ --python_out=. --grpc_python_out=. protos/pygcdm/protogen/*.proto\n```\n\nMore information on the `protoc` compiler can be found by loading the module in python and using the `help` command:\n```\n$ python\n>>> import grpc_tools.protoc\n>>> help(grpc_tools.protoc)\n```\n\n### Run Tests Locally<a name=\"runtests\"></a>\nIf you want to run the tests locally, make sure you have the `pytest` module installed. Then, from the root directory run the following command:\n```\npytest test/*.py\n```\nIf you are testing to verify any changes make sure you rebuild the package locally using the instructions above.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rmcsqrd/pygcdm",
    "keywords": "",
    "license": "BSD-3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygcdm",
    "package_url": "https://pypi.org/project/pygcdm/",
    "platform": "",
    "project_url": "https://pypi.org/project/pygcdm/",
    "project_urls": {
      "Homepage": "https://github.com/rmcsqrd/pygcdm"
    },
    "release_url": "https://pypi.org/project/pygcdm/0.1.0/",
    "requires_dist": [
      "numpy",
      "xarray",
      "netCDF4",
      "grpcio",
      "grpcio-tools"
    ],
    "requires_python": ">=3.9.0",
    "summary": "Transfer CDM files using Remote Procedure Calls.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12647975,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "745f54411c33b0a06c65e8a090e50bc288fba946c72c3a865f1e64e0af4c78c6",
          "md5": "891e6758d3b5a15576a75c3a1119957d",
          "sha256": "d3db306628073b61e1fa47444c0b8f22f65eb7cc16b51316efcc0e21c8a7f1ea"
        },
        "downloads": -1,
        "filename": "pygcdm-0.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "891e6758d3b5a15576a75c3a1119957d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9.0",
        "size": 23557,
        "upload_time": "2021-09-14T20:43:30",
        "upload_time_iso_8601": "2021-09-14T20:43:30.450483Z",
        "url": "https://files.pythonhosted.org/packages/74/5f/54411c33b0a06c65e8a090e50bc288fba946c72c3a865f1e64e0af4c78c6/pygcdm-0.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bb646e23fa87d1889e699fa4ddfca40bc788e4b2acccaec125542ca9240d9b9",
          "md5": "2205cc2a01e48d4106d42ff9466913a4",
          "sha256": "2e94e897d511f94249d2055033966a41ebbbcd4c0d54d239182715ce883765a0"
        },
        "downloads": -1,
        "filename": "pygcdm-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2205cc2a01e48d4106d42ff9466913a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.0",
        "size": 22936,
        "upload_time": "2021-09-14T20:43:31",
        "upload_time_iso_8601": "2021-09-14T20:43:31.683894Z",
        "url": "https://files.pythonhosted.org/packages/3b/b6/46e23fa87d1889e699fa4ddfca40bc788e4b2acccaec125542ca9240d9b9/pygcdm-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "383fca3ce3bf2a7c87fbaf43680975f30400c50d84818461ee9ac0792c3799bd",
          "md5": "319351d30d6d48f829668e42a2785c55",
          "sha256": "3805f8a837442aba60858061a234fa7e93d5e2cbcf8d0259cc47d6b452a731ca"
        },
        "downloads": -1,
        "filename": "pygcdm-0.0.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "319351d30d6d48f829668e42a2785c55",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9.0",
        "size": 23691,
        "upload_time": "2021-09-14T21:05:54",
        "upload_time_iso_8601": "2021-09-14T21:05:54.708172Z",
        "url": "https://files.pythonhosted.org/packages/38/3f/ca3ce3bf2a7c87fbaf43680975f30400c50d84818461ee9ac0792c3799bd/pygcdm-0.0.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10df53af612ab9fa698402bc1435a511c7272cab29cb73167caba3278617c072",
          "md5": "659c151656e71a4047901dafd157f0e4",
          "sha256": "87538bb67cad80e645e682ed9bb3cc1b379c55f3a4faac839a8e5d7a9fb34c44"
        },
        "downloads": -1,
        "filename": "pygcdm-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "659c151656e71a4047901dafd157f0e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.0",
        "size": 22910,
        "upload_time": "2021-09-14T21:05:55",
        "upload_time_iso_8601": "2021-09-14T21:05:55.767010Z",
        "url": "https://files.pythonhosted.org/packages/10/df/53af612ab9fa698402bc1435a511c7272cab29cb73167caba3278617c072/pygcdm-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "825e4d566051a1f902816823a908318a0ad5c73d08a5dc9571ccebdc5289823a",
          "md5": "cf2a92ed9fe420f09bf366248f6b5b0c",
          "sha256": "a9a9cbeea5f37a81a6609a768aa3465fe0afcfa4fd39efefeb5b63ef8c4220f4"
        },
        "downloads": -1,
        "filename": "pygcdm-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf2a92ed9fe420f09bf366248f6b5b0c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9.0",
        "size": 25596,
        "upload_time": "2021-09-17T18:26:44",
        "upload_time_iso_8601": "2021-09-17T18:26:44.498528Z",
        "url": "https://files.pythonhosted.org/packages/82/5e/4d566051a1f902816823a908318a0ad5c73d08a5dc9571ccebdc5289823a/pygcdm-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2876450bf45eac96591415f171acfdda14d27c066d61fea8a71bb3405f98f9d6",
          "md5": "d8b5d52711b2448b29096f34e26cbbe9",
          "sha256": "c73abadd21707d202d4fe2aca5ae046d9a2ceca04646ccf05f725375a9837e96"
        },
        "downloads": -1,
        "filename": "pygcdm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8b5d52711b2448b29096f34e26cbbe9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.0",
        "size": 26539,
        "upload_time": "2021-09-17T18:26:46",
        "upload_time_iso_8601": "2021-09-17T18:26:46.038782Z",
        "url": "https://files.pythonhosted.org/packages/28/76/450bf45eac96591415f171acfdda14d27c066d61fea8a71bb3405f98f9d6/pygcdm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "825e4d566051a1f902816823a908318a0ad5c73d08a5dc9571ccebdc5289823a",
        "md5": "cf2a92ed9fe420f09bf366248f6b5b0c",
        "sha256": "a9a9cbeea5f37a81a6609a768aa3465fe0afcfa4fd39efefeb5b63ef8c4220f4"
      },
      "downloads": -1,
      "filename": "pygcdm-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cf2a92ed9fe420f09bf366248f6b5b0c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.9.0",
      "size": 25596,
      "upload_time": "2021-09-17T18:26:44",
      "upload_time_iso_8601": "2021-09-17T18:26:44.498528Z",
      "url": "https://files.pythonhosted.org/packages/82/5e/4d566051a1f902816823a908318a0ad5c73d08a5dc9571ccebdc5289823a/pygcdm-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2876450bf45eac96591415f171acfdda14d27c066d61fea8a71bb3405f98f9d6",
        "md5": "d8b5d52711b2448b29096f34e26cbbe9",
        "sha256": "c73abadd21707d202d4fe2aca5ae046d9a2ceca04646ccf05f725375a9837e96"
      },
      "downloads": -1,
      "filename": "pygcdm-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d8b5d52711b2448b29096f34e26cbbe9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9.0",
      "size": 26539,
      "upload_time": "2021-09-17T18:26:46",
      "upload_time_iso_8601": "2021-09-17T18:26:46.038782Z",
      "url": "https://files.pythonhosted.org/packages/28/76/450bf45eac96591415f171acfdda14d27c066d61fea8a71bb3405f98f9d6/pygcdm-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}