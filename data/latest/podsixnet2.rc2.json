{
  "info": {
    "author": "Chris McCormick",
    "author_email": "chris@mccormick.cx",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "PodSixNet - lightweight multiplayer networking library for Python games\n-----------------------------------------------------------------------\n\nPodSixNet (now called ``podsixnet2``) is a lightweight network layer\ndesigned to make it easy to write multiplayer games in Python. It uses\nPython's built in asyncore library and rencode.py (included) to\nasynchronously serialise network events and arbitrary data structures,\nand deliver them to your high level classes through simple callback\nmethods.\n\nEach class within your game client which wants to receive network\nevents, subclasses the ConnectionListener class and then implements\n``Network_*`` methods to catch specific user-defined events from the\nserver. You don't have to wait for buffers to fill, or check sockets for\nwaiting data or anything like that, just do ``connection.Pump()`` once\nper game loop and the library will handle everything else for you,\npassing off events to all classes that are listening. Sending data back\nto the server is just as easy, using ``connection.Send(mydata)``.\nLikewise on the server side, events are propagated to ``Network_*``\nmethod callbacks and data is sent back to clients with the\n``client.Send(mydata)`` method.\n\nThe `podsixnet2 mailing\nlist <http://groups.google.com/group/podsixnet>`__ is good for getting\nhelp from other users.\n\nFor users of the Construct game making environment for Windows, there is\na tutorial on doing multiplayer networking with podsixnet2,\n`here <http://www.scirra.com/forum/viewtopic.php?f=8&t=6299>`__. Thanks\nto Dave Chabo for contributing this tutorial.\n\nHere is `another tutorial by Julian\nMeyer <http://www.raywenderlich.com/38732/multiplayer-game-programming-for-teens-with-python>`__.\n\nInstall\n-------\n\n``pip install podsixnet2``\n\nor\n\n``easy_install podsixnet2``\n\nFrom source\n~~~~~~~~~~~\n\nFirst make sure you have `Python <http://python.org/>`__ 2.4 or greater\ninstalled (python 3 also works).\n\nNext you'll want to get the podsixnet2 source.\n\nThe module is found inside a subdirectory called podsixnet2 within the\ntop level folder. There's an ``__init__.py`` inside there, so you can\njust copy or symlink the podsixnet2 sub-directory into your own project\nand then do ``import podsixnet2``, or else you can run\n``sudo python setup.py install`` to install podsixnet2 into your Python\npath. Use ``sudo python setup.py develop`` if you want to stay up to\ndate with the cutting edge and still be able to svn/bzr up every now and\nthen.\n\nBy default podsixnet2 uses a binary encoder to transfer data over the\nnetwork, but it can optionally use the `JSON <http://json.org/>`__\nformat or other formats supported by a serialiser which has 'dumps' and\n'loads' methods. If you want to serialise your data using JSON you can\nchange the first line of Channel.py to 'from simplejson import dumps,\nloads' or use the built-in json library in Python 2.6 or higher. This\nwill allow you to write game clients in languages that can't read the\n'rencode' binary format, such as Javascript.\n\nExamples\n--------\n\nChat example:\n\n-  ``python examples/ChatServer.py``\n-  and a couple of instances of ``python examples/ChatClient.py``\n\nWhiteboard example:\n\n-  ``python examples/WhiteboardServer.py``\n-  and a couple of instances of ``python examples/WhiteboardClient.py``\n\nLagTime example (measures round-trip time from the server to the\nclient):\n\n-  ``python examples/LagTimeServer.py``\n-  and a couple of instances of ``python examples/LagTimeClient.py``\n\nQuick start - Server\n--------------------\n\nYou will need to subclass two classes in order to make your own server.\nEach time a client connects, a new Channel based class will be created,\nso you should subclass Channel to make your own\nserver-representation-of-a-client class like this:\n\n.. code:: python\n\n    from podsixnet2.Channel import Channel\n\n    class ClientChannel(Channel):\n\n        def Network(self, data):\n            print data\n\n        def Network_myaction(self, data):\n            print \"myaction:\", data\n\nWhenever the client does ``connection.Send(mydata)``, the ``Network()``\nmethod will be called. The method ``Network_myaction()`` will only be\ncalled if your data has a key called 'action' with a value of\n\"myaction\". In other words if it looks something like this:\n\n.. code:: python\n\n    data = {\"action\": \"myaction\", \"blah\": 123, ... }\n\nNext you need to subclass the Server class like this:\n\n.. code:: python\n\n        from podsixnet2.Server import Server\n        \n        class MyServer(Server):\n            \n            channelClass = ClientChannel\n            \n            def Connected(self, channel, addr):\n                print 'new connection:', channel\n\nSet ``channelClass`` to the channel class that you created above. The\nmethod ``Connected()`` will be called whenever a new client connects to\nyour server. See the example servers for an idea of what you might do\neach time a client connects. You need to call ``Server.Pump()`` every\nnow and then, probably once per game loop. For example:\n\n.. code:: python\n\n        myserver = MyServer()\n        while True:\n            myserver.Pump()\n            sleep(0.0001)\n\nWhen you want to send data to a specific client/channel, use the Send\nmethod of the Channel class:\n\n.. code:: python\n\n    channel.Send({\"action\": \"hello\", \"message\": \"hello client!\"})\n\nQuick start - Client\n--------------------\n\nTo have a client connect to your new server, you should use the\nConnection module. See ``pydoc Connection`` for more details, but here's\na summary:\n\n``Connection.connection`` is a singleton Channel which connects to the\nserver. You'll only have one of these in your game code, and you'll use\nit to connect to the server and send messages to the server.\n\n.. code:: python\n\n    from podsixnet2.Connection import connection\n\n    # connect to the server - optionally pass hostname and port like: (\"mccormick.cx\", 31425)\n    connection.Connect()\n\n    connection.Send({\"action\": \"myaction\", \"blah\": 123, \"things\": [3, 4, 3, 4, 7]})\n\nYou'll also need to put the following code once somewhere in your game\nloop:\n\n.. code:: python\n\n    connection.Pump()\n\nAny time you have an object in your game which you want to receive\nmessages from the server, subclass ``ConnectionListener``. For example:\n\n.. code:: python\n\n        from podsixnet2.Connection import ConnectionListener\n        \n        class MyNetworkListener(ConnectionListener):\n        \n            def Network(self, data):\n                print 'network data:', data\n            \n            def Network_connected(self, data):\n                print \"connected to the server\"\n            \n            def Network_error(self, data):\n                print \"error:\", data['error'][1]\n            \n            def Network_disconnected(self, data):\n                print \"disconnected from the server\"\n            \n            def Network_myaction(data):\n                print \"myaction:\", data\n\nJust like in the server case, the network events are received by\n``Network_*`` callback methods, where you should replace '\\*' with the\nvalue in the 'action' key you want to catch. You can implement as many\nor as few of the above as you like. For example, NetworkGUI would\nprobably only want to listen for the ``_connected``, ``_disconnected``,\nand ``_error`` network events. The data for ``_error`` always comes in\nthe form of network exceptions, like (111, 'Connection refused') - these\nare passed straight from the socket layer and are standard socket\nerrors.\n\nAnother class might implement custom methods like\n``Network_myaction()``, which will receive any data that gets sent from\nthe server with an 'action' key that has the name 'myaction'. For\nexample, the server might send a message with the number of players\ncurrently connected like so:\n\n.. code:: python\n\n    channel.Send({\"action\": \"numplayers\", \"players\": 10})\n\nAnd the listener would look like this:\n\n.. code:: python\n\n        from podsixnet2.Connection import ConnectionListener\n        \n        class MyPlayerListener(ConnectionListener):\n        \n            def Network_numplayers(data):\n                # update gui element displaying the number of currently connected players\n                print data['players']\n\nYou can subclass ``ConnectionListener`` as many times as you like in\nyour application, and every class you make which subclasses it will\nreceive the network events via named Network callbacks. You should call\nthe ``Pump()`` method on each object you instantiate once per game loop:\n\n.. code:: python\n\n        gui = MyPlayerListener()\n        while 1:\n            connection.Pump()\n            gui.Pump()\n\nLicense\n-------\n\nCopyright `Chris McCormick <http://mccormick.cx/>`__, 2009-2015.\n\npodsixnet2 is licensed under the terms of the LGPL v3.0 or higher. See\nthe file called `COPYING <COPYING>`__ for details.\n\nThis basically means that you can use it in most types of projects\n(commercial or otherwise), but if you make changes to the podsixnet2\ncode you must make the modified code available with the distribution of\nyour software. Hopefully you'll tell us about it so we can incorporate\nyour changes. I am not a lawyer, so please read the license carefully to\nunderstand your rights with respect to this code.\n\nWhy not use Twisted instead?\n----------------------------\n\nTwisted is a fantastic library for writing robust network code. I have\nused it in several projects in the past, and it was quite nice to work\nwith. That said, Twisted:\n\n-  wants to steal the mainloop\n-  is bloated not KISS (it implements many many different protocols)\n-  has a weird template launching language when Python should do just\n   fine\n-  is not written 100% for the specfic use-case of multiplayer games\n\nThese are some of the reasons why I decided to write a library that is\nlightweight, has no dependencies except Python, and is dedicated 100% to\nthe task of multiplayer game networking.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chr15m/PodSixNet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "podsixnet2",
    "package_url": "https://pypi.org/project/podsixnet2/",
    "platform": "",
    "project_url": "https://pypi.org/project/podsixnet2/",
    "project_urls": {
      "Homepage": "https://github.com/chr15m/PodSixNet"
    },
    "release_url": "https://pypi.org/project/podsixnet2/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Multiplayer networking library for games",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7015448,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce547e8196109c92293bd2017ad9c5432f5c84573693c73c08946b7b7f1b5084",
          "md5": "e794dd6653a992ebac65e5f261243d51",
          "sha256": "13affadbd9a9af1400033cf6da07cc87754ff20c2553bbe9b167ce132fe7070a"
        },
        "downloads": -1,
        "filename": "podsixnet2-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e794dd6653a992ebac65e5f261243d51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8818,
        "upload_time": "2020-04-14T08:15:45",
        "upload_time_iso_8601": "2020-04-14T08:15:45.401742Z",
        "url": "https://files.pythonhosted.org/packages/ce/54/7e8196109c92293bd2017ad9c5432f5c84573693c73c08946b7b7f1b5084/podsixnet2-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed4bea69ac128b3812b4c78ac9fcb903efc5efcf9b528ffaa514ceb9e5f53cb7",
          "md5": "6232df966f97219d7acaae134c5d432e",
          "sha256": "f8382ab65e06e7fab5746b4ce7427e1ab7310298287cf92bf18a74a0b1a53852"
        },
        "downloads": -1,
        "filename": "podsixnet2-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6232df966f97219d7acaae134c5d432e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12323,
        "upload_time": "2020-04-14T08:21:08",
        "upload_time_iso_8601": "2020-04-14T08:21:08.981420Z",
        "url": "https://files.pythonhosted.org/packages/ed/4b/ea69ac128b3812b4c78ac9fcb903efc5efcf9b528ffaa514ceb9e5f53cb7/podsixnet2-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed4bea69ac128b3812b4c78ac9fcb903efc5efcf9b528ffaa514ceb9e5f53cb7",
        "md5": "6232df966f97219d7acaae134c5d432e",
        "sha256": "f8382ab65e06e7fab5746b4ce7427e1ab7310298287cf92bf18a74a0b1a53852"
      },
      "downloads": -1,
      "filename": "podsixnet2-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6232df966f97219d7acaae134c5d432e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12323,
      "upload_time": "2020-04-14T08:21:08",
      "upload_time_iso_8601": "2020-04-14T08:21:08.981420Z",
      "url": "https://files.pythonhosted.org/packages/ed/4b/ea69ac128b3812b4c78ac9fcb903efc5efcf9b528ffaa514ceb9e5f53cb7/podsixnet2-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}