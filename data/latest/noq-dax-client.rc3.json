{
  "info": {
    "author": "Amazon Web Services",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "============================\nAmazon DAX Client for Python\n============================\n\nThe Amazon DAX Client for Python is used to access `Amazon DAX`_ clusters from\nPython. It is nearly source-compatible with Boto3, with only a small change\nneeded to the client initialization to use DAX instead of DynamoDB.\nCreating a connection to your DAX cluster requires using the cluster discovery endpoint URL returned\nin the DescribeClusters response as the endpoint.\n\n.. _`Amazon DAX`: https://aws.amazon.com/dynamodb/dax/\n\nInstallation\n------------\nInstall Amazon DAX Client using pip:\n\n.. code-block:: sh\n\n    $ pip install amazon-dax-client\n\nQuick Start\n-----------\nBoto3 has two different interfaces, the *resource interface* and the botocore\n*client interface*. Both are supported by the Amazon DAX client, with slightly\ndifferent client initialization.\n\nFor the resource API, change from:\n\n.. code-block:: python\n\n    ddb = boto3.resource('dynamodb')\n\nto\n\n.. code-block:: python\n\n    dax = AmazonDaxClient.resource(\n        endpoint_url=<cluster_discovery_endpoint_url>)\n\nAll other ``boto3.resource()`` arguments are accepted.\n\nFor the botocore client API, change from:\n\n.. code-block:: python\n\n    session = botocore.session.get_session()\n    ddb = session.create_client('dynamodb', ...)\n\nto\n\n.. code-block:: python\n\n    session = botocore.session.get_session()\n    dax = AmazonDaxClient(session, ...)\n\nFor Boto3 client API, change from:\n\n.. code-block:: python\n\n    ddb = boto3.client('dynamodb')\n\nto\n\n.. code-block:: python\n\n    dax = AmazonDaxClient(endpoint_url=<cluster_discovery_endpoint_url>)\n\nThe Boto3 and botocore client APIs are exactly the same.\n\nHostname Verification for TLS connections is enabled by default when making requests from the client to the cluster\nand has no effect for unencrypted clusters. This can be turned off using the client API, be sure you understand the\nimplication of turning it off, which is the inability to authenticate the cluster that you are connecting to.\n\nUnsupported Features\n--------------------\nThe Amazon DAX client does not support table operations. Any table manipulation\noperations must use the regular Boto3 or botocore DynamoDB client.\n\nPaginators are not currently supported for DAX.\n\nDocumentation\n-------------\nOnce created, the interface is the same as the Boto3/botocore DynamoDB clients.\n\n* `Boto3 DynamoDB resource API <http://boto3.readthedocs.io/en/latest/reference/services/dynamodb.html>`__\n* `botocore DynamoDB client API <http://botocore.readthedocs.io/en/latest/reference/services/dynamodb.html>`__\n\n\nFor acomplete example, follow the guide to `create a sample app`_.\n\n.. _`create a sample app`: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.client.sample-app.html\n\nGetting Help\n------------\nPlease use these community resources for getting help.\n\n* Ask a question on `StackOverflow <https://stackoverflow.com/>`__ and tag it with `amazon-dynamodb-dax <https://stackoverflow.com/questions/tagged/amazon-dynamodb-dax>`__\n* Ask a question on `the AWS DynamoDB forum <https://forums.aws.amazon.com/forum.jspa?forumID=131&start=0>`__\n* Open a support ticket with `AWS Support <https://console.aws.amazon.com/support/home#/>`__\n\n\nChanges\n-------\n\n**v2.0.0**\n\n* Encryption in transit feature\n* Drop support for python versions below 3.6\n\n**v1.1.8**\n\n* Retry logic bug fixes\n\n**v1.1.7**\n\n* Minor bug fixes\n\n**v1.1.6**\n\n* Linting fixes\n* Updated logging to log on Logger objects\n\n**v1.1.5**\n\n* Add jitter and backoff for retryable exceptions\n\n**v1.1.4**\n\n* Fixes bug starting with clusters of less than 3 nodes.\n\n**v1.1.3**\n\n* Fixes and improvements to service discovery logic.\n* Add support for Python 3.8.\n* Fix ``'RetryHandler' object has no attribute '_cluster': AttributeError``\n  problem reported in the AWS Forums.\n* Fix problems found by static analysis.\n\n**v1.1.2**\n\n* Fixes a bug that can result in a failure to update the roster when it\n  changes, which can later result in a ``NoRouteException``.\n\n**v1.1.1**\n\n* Fixes a bug that can result in an infinite loop on node failure.\n* Update TransactWriteItem test item limit to 25.\n\n**v1.1.0**\n\n* Adds support for transact-get-items and transact-write-items APIs for DyanamoDB transactions.\n* Improved efficiency of connection pooling.\n\n**v1.0.7**\n\n* Fix scheduling of background tasks.\n\n**v1.0.6**\n\n* Properly de-anonymize UnprocessedItems results from BatchWrite.\n* Raise a proper error if no backends are available.\n\n**v1.0.5**\n\n* Fix UpdateItem result parsing with a subset of attributes changed\n\n**v1.0.4**\n\n* Use user-specified timeouts\n* Fix issue with update response if the item is not changed\n* Fix error decoding BatchWrite UnprocessedItems.\n\n**v1.0.3**\n\n* Fix AmazonDaxClient.resource() when using batch_get_items or batch_write_items.\n\n**v1.0.2**\n\n* Fix Python 2 encoding issues\n* Fix decoding of ConsumedCapacity, ItemCollectionMetrics in batch operations\n\n**v1.0.1**\n\n* Initial release\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://aws.amazon.com/dynamodb/dax/",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "noq-dax-client",
    "package_url": "https://pypi.org/project/noq-dax-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/noq-dax-client/",
    "project_urls": {
      "Homepage": "https://aws.amazon.com/dynamodb/dax/"
    },
    "release_url": "https://pypi.org/project/noq-dax-client/2.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Amazon DAX Client for Python",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13960249,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6539f4a7cad1f4a99f7e8609aeef84e571cea72028a7bf1c3f5c6e06140f00a",
          "md5": "ebebd600207cb2a2033a4e83c93d89d3",
          "sha256": "6407672388b0de6b579defaacca68858dd90280c1c16c106638d047a0676d094"
        },
        "downloads": -1,
        "filename": "noq-dax-client-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ebebd600207cb2a2033a4e83c93d89d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 97729,
        "upload_time": "2022-05-26T16:40:41",
        "upload_time_iso_8601": "2022-05-26T16:40:41.063343Z",
        "url": "https://files.pythonhosted.org/packages/c6/53/9f4a7cad1f4a99f7e8609aeef84e571cea72028a7bf1c3f5c6e06140f00a/noq-dax-client-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8f0754e209b14b4410b8d502cf5f28baa5e966a6ab8f0f66033f51d99beba22",
          "md5": "c78eb68a7c2fac529a2fcf1c5b841d4e",
          "sha256": "f0158bd56c8bf130de4a223d195467efdb98a1d324cd9c6aa745399d5fbd431f"
        },
        "downloads": -1,
        "filename": "noq-dax-client-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c78eb68a7c2fac529a2fcf1c5b841d4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 97766,
        "upload_time": "2022-05-27T15:09:06",
        "upload_time_iso_8601": "2022-05-27T15:09:06.382769Z",
        "url": "https://files.pythonhosted.org/packages/a8/f0/754e209b14b4410b8d502cf5f28baa5e966a6ab8f0f66033f51d99beba22/noq-dax-client-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "546cf043d1971298dcf86a85b1d947c686c7f1f3c1d837493bbbd970ab8c9791",
          "md5": "24fdb3f64918822a2fd40782fc74cb23",
          "sha256": "8d0c1f249c71aaf5442ca5244b7e20850fab39b12e78ef1b8502fd75fe10ce7a"
        },
        "downloads": -1,
        "filename": "noq-dax-client-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "24fdb3f64918822a2fd40782fc74cb23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 97794,
        "upload_time": "2022-05-27T23:54:42",
        "upload_time_iso_8601": "2022-05-27T23:54:42.869992Z",
        "url": "https://files.pythonhosted.org/packages/54/6c/f043d1971298dcf86a85b1d947c686c7f1f3c1d837493bbbd970ab8c9791/noq-dax-client-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "546cf043d1971298dcf86a85b1d947c686c7f1f3c1d837493bbbd970ab8c9791",
        "md5": "24fdb3f64918822a2fd40782fc74cb23",
        "sha256": "8d0c1f249c71aaf5442ca5244b7e20850fab39b12e78ef1b8502fd75fe10ce7a"
      },
      "downloads": -1,
      "filename": "noq-dax-client-2.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "24fdb3f64918822a2fd40782fc74cb23",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 97794,
      "upload_time": "2022-05-27T23:54:42",
      "upload_time_iso_8601": "2022-05-27T23:54:42.869992Z",
      "url": "https://files.pythonhosted.org/packages/54/6c/f043d1971298dcf86a85b1d947c686c7f1f3c1d837493bbbd970ab8c9791/noq-dax-client-2.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}