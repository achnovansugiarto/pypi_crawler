{
  "info": {
    "author": "Guillaume Dubuisson Duplessis",
    "author_email": "guillaume@dubuissonduplessis.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# gowpy\n\nA very simple library for exploiting graph-of-words in NLP. \nCurrently at version **0.2.0**.\n\nThe graph-of-words model has been shown to be an interesting alternative\nto the widespread bag-of-words model by challenging its term independence \nassumption [[1,2]](#references).\nIn particular, the graph-of-words model makes it possible to capture term \ndependence and term order.\nIf you are looking for an efficient alternative to TF-IDF, give graph-of-words \na try on your dataset!\n\ngowpy leverages graph-of-words representation in order to do:\n- [**document classification**](#classification-with-tw-idf-a-graph-based-term-weighting-score)\n  in a [scikit-learn](https://scikit-learn.org)-like way via useful vectorizers, and\n- unsupervised [**keyword extraction**](#unsupervised-keywords-extraction) from a \n  single document. \n\nDetailed explanations, evaluations and discussions can be found in \nthe [reference section](#references).\n\n## Quick Start\n### Requirements and Installation\nThis project is based on Python 3.6+, [scikit-learn](https://github.com/scikit-learn/scikit-learn) and \n[NetworkX](https://github.com/networkx/networkx). \n\n#### Installation from PyPI\n```bash\npip install gowpy\n```\n\n#### Installation from the GitHub Source\nFirst, clone the project:\n```bash\ngit clone https://github.com/GuillaumeDD/gowpy.git\n```\n\nThen, `cd` to the project folder and run the install command:\n```bash\ncd gowpy/\npython setup.py install\n```\n\n### Example Usage\n#### Example Notebooks\nSee the [examples/ directory](./examples/) for example of notebooks:\n- [Notebook 1: unsupervised keyword extraction](./examples/keyword_extraction-paper_example.ipynb)\n- [Notebook 2: multi-class classification with TW-IDF](./examples/classification-r8-twidf.ipynb)\n- [Notebook 3: multi-class classification with frequent subgraphs](./examples/classification-r8-frequent_subgraphs.ipynb)\n\n#### Building a Graph-of-Words from a Document\n\n```python\nfrom gowpy.gow.builder import GoWBuilder\n\n# Creation of a graph-of-words builder\n# Here:\n# - the graph-of-words will be directed, and\n# - an edge will link every tokens co-occurring in a sliding window of size 4\n#\nbuilder = GoWBuilder(directed=True, window_size=4)\n\ntext = \"\"\"gowpy is a simple library for exploiting graph-of-words in nlp gowpy \nleverages graph-of-words representation for document classification and for keyword extraction \nfrom a document\"\"\"\n\n# Here, a preprocessing step fitted to the need of the project should be carried out \n\n# Creation of the graph-of-words\ngow = builder.compute_gow_from_document(text)\n```\n\nThen, it is possible to visualize the document as a graph-of-words:\n```python\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\ng = gow.to_labeled_graph()\n\noptions = {\n    \"font_weight\" : 'normal',\n    \"font_color\" : 'darkblue',\n    #\n    \"edge_color\" : 'lightgray',\n    #\n    \"node_size\" : 200,\n    \"node_color\": 'white',\n    \"with_labels\": True,\n}\nnx.draw(g, **options)\n``` \n\n![A graph-of-words example](./resources/gow.png)\n\n#### Unsupervised Keywords Extraction\nGraph-of-words can be leveraged to extract an automatically adaptative number of\ncohesive keywords from a text document in an unsupervised fashion [[2,3]](#references).\n\ngowpy implements the graph-of-words methods presented in [[3]](#references):\n- the three batch keyword extraction methods based on k-core, and\n- the word-level keyword extraction method CoreRank.\n\nSee this [example notebook](./examples/keyword_extraction-paper_example.ipynb)\nthat repoduces the running example of the paper demonstrating all the methods.\n\nFor short and medium size documents, both the \"density\" and the \"inflexion\" methods\nhave been showing strong performance. Here is how you can use the \"density\" method: \n```python\nfrom gowpy.summarization.unsupervised import KcoreKeywordExtractor\n\nextractor_kw = KcoreKeywordExtractor(directed=False, weighted=True, window_size=4,\n                                     selection_method='density')\n\n# \n# Note that preprocessing is particularly important for keyword extraction\n# in order to keep and normalize important terms such as adjectives and nouns.\n#\n# An already preprocessed text in which to extract keywords\n\npreprocessed_text = \"\"\"gowpy simple library exploiting graph-of-words nlp gowpy \nleverages graph-of-words representation document classification keyword extraction \ndocument\"\"\"\n\nextractor_kw.extract(preprocessed_text)\n```\n\nReturns:\n```text\n[('gowpy', 4),\n ('simple', 4),\n ('library', 4),\n ('exploiting', 4),\n ('graph-of-words', 4),\n ('nlp', 4),\n ('leverages', 4),\n ('representation', 4),\n ('document', 4),\n ('classification', 4),\n ('keyword', 4),\n ('extraction', 4)]\n```\n\nFor longer documents, the CoreRank method has been shown to be more appropriate.\nThis method takes an optional parameter that can specify the number of keywords\nto extract:\n```python\nfrom gowpy.summarization.unsupervised import CoreRankKeywordExtractor\n\nextractor_kw_cr = CoreRankKeywordExtractor(directed=False, weighted=True, window_size=4)\n\npreprocessed_text = \"\"\"gowpy simple library exploiting graph-of-words nlp gowpy \nleverages graph-of-words representation document classification keyword extraction \ndocument\"\"\"\n\nextractor_kw_cr.extract(preprocessed_text, n=5)\n```\n\nReturns:\n```text\n[('graph-of-words', 36),\n ('gowpy', 28),\n ('representation', 24),\n ('document', 24),\n ('library', 20)]\n```\n\n#### Classification with TW-IDF: a graph-based term weighting score\nTW-IDF [[0]](#references) challenges the term independence assumption behind \nthe bag-of-words model by (i) exploiting a graph-of-words representation of a \ndocument (here an unweighted directed graph of terms), and by (ii) leveraging \nthis new representation to replace the term frequency (TF) by graph-based term \nweights (TW).  \n\nSee this [example notebook](./examples/classification-r8-twidf.ipynb) for a \nusage example of TW-IDF for a multi-class classification task.\n\nTW-IDF is accessible via a dedicated vectorizer:\n```python\nfrom gowpy.feature_extraction.gow import TwidfVectorizer\n\ncorpus = [\n    'hello world !',\n    'foo bar'\n]\n\nvectorizer_gow = TwidfVectorizer(                 \n    # Graph-of-words specificities\n    directed=True,\n    window_size=4,\n    # Token frequency filtering\n    min_df=0.0,\n    max_df=1.0,\n    # Graph-based term weighting approach\n    term_weighting='degree'\n)\n\nX = vectorizer_gow.fit_transform(corpus)\nX\n```\nReturns:\n```text\n<2x5 sparse matrix of type '<class 'numpy.float64'>'\n\twith 3 stored elements in Compressed Sparse Row format>\n```\n\nTW-IDF vectorizer fits seamlessly in a grid search:\n```python\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import GridSearchCV\n\npipeline = Pipeline([\n    ('gow', TwidfVectorizer()),\n    ('svm', SVC()),\n])\n\nparameters = {\n    'gow__directed' : [True, False],\n    'gow__window_size' : [2, 4, 8, 16],\n    'gow__b' : [0.0, 0.003],\n    'gow__term_weighting' : ['degree', 'pagerank'],\n    'gow__min_df' : [0, 5, 10],\n    'gow__max_df' : [0.8, 0.9, 1.0],\n#\n    'svm__C' : [0.1, 1, 10],\n    'svm__kernel' : ['linear']\n}\n\n# find the best parameters for both the feature extraction and the\n# classifier\ngrid_search = GridSearchCV(pipeline, \n                           parameters, \n                           cv=10,\n                           n_jobs=-1)\n```\n\n#### Going further: classification based on frequent subgraphs\nFrequent subgraphs corresponding to long range n-gram can be mined and \nsubsequently used for document classification [[1]](#references).\n\nClassification with frequent subgraphs happens in a 3-step process:\n1. Conversion of the corpus of already preprocessed documents into a collection\n  of graph-of-words\n1. Mining the frequent subgraphs\n1. Loading the frequent subgraphs and exploiting them for classification\n\nSee this [example notebook](./examples/classification-r8-frequent_subgraphs.ipynb)\nfor a usage example of frequent subgraphs for a multi-class classification task.\n\n##### Conversion of the corpus into a collection of graph-of-words\nThe first step consists in turning the corpus into a graph-of-words and collection\nand then export that collection into a file format suited for frequent subgraph\nmining.\n```python\nfrom gowpy.gow.miner import GoWMiner\nimport gowpy.gow.io\n\ncorpus = [\n    'hello world !',\n    'foo bar',\n    # and many more...\n]\n\n# Conversation of the corpus into a collection of graph-of-words\ngow_miner = GoWMiner(directed=False, window_size=4)\ncorpus_gows = gow_miner.compute_gow_from_corpus(corpus)\n\n# Exportation of the collection of graph-of-words into a file for\n# interoperability with other languages such as C++\nwith open(\"corpus_gows.data\", \"w\") as f_output:\n    data = gowpy.gow.io.gow_to_data(corpus_gows)\n    f_output.write(data)\n```\n\n##### Mining the frequent subgraphs\nFrequent subgraphs mining can be realized via the [gSpan algorithm](https://www.cs.ucsb.edu/~xyan/software/gSpan.htm).\nThis step is not included in this project and has to be carried out by another\nprogram.\n\nThis project supports the reimplementation from [gBolt available at GitHub](https://github.com/Jokeren/gBolt).\nCurrently this implementation is limited to **undirected graph**.\nTo mine frequent subgraphs (after having installed gBolt on your machine):\n```bash\nOMP_NUM_THREADS=1 ./gbolt --input corpus_gows.data --output gbolt-mining-corpus_gow --dfs --nodes --support 0.01\n```\nNotice the **support parameter** which defines the minimum frequency of a subgraph\nto be considered as frequent. Here it is set to 1% (0.01).\nThis parameter is **corpus specific** and should be carefully tuned (see [[1]](#references)).\n\nMining produces two files:\n- `gbolt-mining-corpus_gow.t0`: the frequent subgraphs with more than one node\n- `gbolt-mining-corpus_gow.nodes`: the frequent single nodes\n\nThese two files can be loaded by the same `gow_miner` used for exportation:\n```python\ngow_miner.load_graphs('gbolt-mining-corpus_gow.t0', \n                      'gbolt-mining-corpus_gow.nodes')\ngow_miner\n```\nReturns:\n```text\nGraph-of-word miner:\n        - is_directed: False\n        - window_size: 4\n        - edge_labeling: True\n\n        - Number of tokens: 5\n        - Number of links between tokens: 4\n\n        - Number of loaded subgraph: 13\n```\n\n##### Classification with frequent subgraphs\nClassification with frequent subgraphs is accessible via a dedicated vectorizer:\n```python\nfrom gowpy.feature_extraction.gow import GoWVectorizer\n\nvectorizer_gow = GoWVectorizer(gow_miner)\nX = vectorizer_gow.fit_transform(corpus)\n# X is a sparse matrix\n```\n\nBefore tuning the `min_df` (the minimum being the support chosen during mining)\nand the `max_df`, it is possible the have a look at the normalized frequency\ndistribution:\n```python\nimport pandas as pd\ns_freq_per_pattern = pd.Series(gow_miner.stat_relative_freq_per_pattern())\ns_freq_per_pattern.describe()\n```\nFor instance, it can returns the following distribution:\n```text\ncount    10369.000000\nmean         0.026639\nstd          0.046551\nmin          0.008333\n25%          0.010000\n50%          0.013333\n75%          0.022778\nmax          0.865000\ndtype: float64\n```\n\n\nGoW vectorizer fits nicely in a grid search:\n```python\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\nfrom sklearn.model_selection import GridSearchCV\n\npipeline = Pipeline([\n    ('gow', GoWVectorizer(gow_miner)),\n    ('tfidf', TfidfTransformer()),\n    ('svm', SVC()),\n])\n\nparameters = {\n    'gow__subgraph_matching' : ['partial', 'induced'],\n    'gow__min_df' : [0.00833, 0.01, 0.013333],\n    'gow__max_df' : [0.022778, 0.5, 0.865],\n#\n    'svm__C' : [0.1, 1, 10],\n    'svm__kernel' : ['linear']\n}\n\n# find the best parameters for both the feature extraction and the\n# classifier\ngrid_search = GridSearchCV(pipeline, \n                           parameters, \n                           cv=10,\n                           n_jobs=-1)\n```\n\n## References\n\nDetailed explanations, evaluations and discussions can be found in these papers:\n- Information retrieval (TW-IDF)\n   + [0] [Graph-of-word and TW-IDF: New Approach to Ad Hoc IR](https://dl.acm.org/doi/abs/10.1145/2505515.2505671).\n     *Rousseau, François, and Vazirgiannis, Michalis*.\n     *Proceedings of the 22nd ACM international conference on Information & Knowledge Management*.(**CIKM 2013**)\n- Document classification with frequent subgraphs\n   + [1] [Text Categorization as a Graph Classification Problem](http://www.aclweb.org/anthology/P15-1164).\n      *Rousseau, François, Kiagias, Emmanouil and Vazirgiannis, Michalis*.\n      *Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International \n      Joint Conference on Natural Language Processing* (**ACL 2015**)\n- Keyword extraction from graph-of-words\n   + [2] [Main Core Retention on Graph-of-words for Single-Document Keyword Extraction](https://link.springer.com/chapter/10.1007/978-3-319-16354-3_42).\n     *Rousseau, François, and Vazirgiannis, Michalis*.\n     *Proceedings of the 37th European Conference on Information Retrieval*.\n     (**ECIR 2015**)\n   + [3] [A Graph Degeneracy-based Approach to Keyword Extraction](https://www.aclweb.org/anthology/D16-1191/).\n     *Tixier, Antoine, Malliaros, Fragkiskos, and Vazirgiannis, Michalis*.\n     *Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing*.\n     (**EMNLP 2016**)\n\nThis library involves the following algorithms:\n- Frequent subgraph mining (**currently not included in this library**)\n   + gSpan algorithm implementation for subgraph mining: [gBolt--very fast implementation for gSpan algorithm in data mining ](https://github.com/Jokeren/gBolt)\n- Subgraph matching\n   + VF2 algorithm for subgraph isomorphism matching: [VF2 algorithm for subgraph isomorphism from NetworkX](https://networkx.github.io/documentation/stable/reference/algorithms/isomorphism.vf2.html)\n- Graph degeneracy\n   + [k-core decomposition with NetworkX](https://networkx.github.io/documentation/stable/reference/algorithms/core.html)\n   + Custom implementation of generalized k-core decomposition for weighted graph from \n     [\"Generalized Cores\" V. Batagelj, M. Zaveršnik (2002)](https://arxiv.org/abs/cs/0202039)\n\n## License\nReleased under the 3-Clause BSD license (see [LICENSE file](./LICENSE))\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GuillaumeDD/gowpy.git",
    "keywords": "",
    "license": "new BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gowpy",
    "package_url": "https://pypi.org/project/gowpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/gowpy/",
    "project_urls": {
      "Homepage": "https://github.com/GuillaumeDD/gowpy.git"
    },
    "release_url": "https://pypi.org/project/gowpy/0.2.0/",
    "requires_dist": [
      "networkx (>=2.4)",
      "scikit-learn (>=0.22.2)",
      "matplotlib (>=3.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "A very simple graph-of-words library for NLP",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7473269,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e564727baefe92cba7074adf2918f7f6f81c43b09aab4efe7332683113501d54",
          "md5": "fca801afd4d56de7309f70a2e111b5b0",
          "sha256": "901a269d0bee38fc220a0345eed2535c7138ab92de94f4e12793fcfcb1a414ab"
        },
        "downloads": -1,
        "filename": "gowpy-0.1.0-py3.6.egg",
        "has_sig": false,
        "md5_digest": "fca801afd4d56de7309f70a2e111b5b0",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "requires_python": ">=3.6",
        "size": 58170,
        "upload_time": "2020-06-14T12:35:47",
        "upload_time_iso_8601": "2020-06-14T12:35:47.377516Z",
        "url": "https://files.pythonhosted.org/packages/e5/64/727baefe92cba7074adf2918f7f6f81c43b09aab4efe7332683113501d54/gowpy-0.1.0-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e39a0e6b845dfd72db92d627d92c028dba28891e5e5e90f87e165e587469c955",
          "md5": "acc0863f267d1332ce506a3af2405313",
          "sha256": "df37d0389ba56785faa270e889ff02624218daa29de6b33827fad151f3dedced"
        },
        "downloads": -1,
        "filename": "gowpy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "acc0863f267d1332ce506a3af2405313",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21339,
        "upload_time": "2020-05-03T15:42:32",
        "upload_time_iso_8601": "2020-05-03T15:42:32.261009Z",
        "url": "https://files.pythonhosted.org/packages/e3/9a/0e6b845dfd72db92d627d92c028dba28891e5e5e90f87e165e587469c955/gowpy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "923c137bc1b2c56e7e92f96c09678c50cef66e063569e552e24b099465b2f6a3",
          "md5": "cea07fddfba619fa861860106fbbb7c5",
          "sha256": "bc64761e062c04f8d68fcad722d184ca3c08804ed143fa853fc190a8e33342c5"
        },
        "downloads": -1,
        "filename": "gowpy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cea07fddfba619fa861860106fbbb7c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16738,
        "upload_time": "2020-05-03T15:42:34",
        "upload_time_iso_8601": "2020-05-03T15:42:34.773601Z",
        "url": "https://files.pythonhosted.org/packages/92/3c/137bc1b2c56e7e92f96c09678c50cef66e063569e552e24b099465b2f6a3/gowpy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cae2145b9ac747317765e16edbb71accd817dc80d3f941cc483119fe4a044ed5",
          "md5": "2ee7f45537dab0539795f7b7c9031788",
          "sha256": "062fa16ffccd8949d3d0e68f5b4f356721bbc02165609775f155f92854b9dcf8"
        },
        "downloads": -1,
        "filename": "gowpy-0.2.0-py3.6.egg",
        "has_sig": false,
        "md5_digest": "2ee7f45537dab0539795f7b7c9031788",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "requires_python": ">=3.6",
        "size": 58634,
        "upload_time": "2020-06-14T12:35:49",
        "upload_time_iso_8601": "2020-06-14T12:35:49.602849Z",
        "url": "https://files.pythonhosted.org/packages/ca/e2/145b9ac747317765e16edbb71accd817dc80d3f941cc483119fe4a044ed5/gowpy-0.2.0-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5e54fc0cd69ad97da7e6225ad0670f1bdb9272186cf6dc69a6d38c6e29bf933",
          "md5": "205ca1f884007b560979622f47a9b26c",
          "sha256": "875e8e781e3deacdc07b5162c4b7736e215d9c2a2854ff17e3848de9ad27c379"
        },
        "downloads": -1,
        "filename": "gowpy-0.2.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "205ca1f884007b560979622f47a9b26c",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 59267,
        "upload_time": "2020-06-14T12:35:51",
        "upload_time_iso_8601": "2020-06-14T12:35:51.029179Z",
        "url": "https://files.pythonhosted.org/packages/d5/e5/4fc0cd69ad97da7e6225ad0670f1bdb9272186cf6dc69a6d38c6e29bf933/gowpy-0.2.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c9fe8948bb2667e29f5c5fda955e20b1804444340d370a552e20505097f282d",
          "md5": "cb22bc4c00083d5dcfc2d2a387936dc5",
          "sha256": "18a4b5ead25417a9ea80a3e322186f7514855afd354fe86686c2a4e9cf870d0b"
        },
        "downloads": -1,
        "filename": "gowpy-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb22bc4c00083d5dcfc2d2a387936dc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27929,
        "upload_time": "2020-06-14T12:35:45",
        "upload_time_iso_8601": "2020-06-14T12:35:45.994954Z",
        "url": "https://files.pythonhosted.org/packages/7c/9f/e8948bb2667e29f5c5fda955e20b1804444340d370a552e20505097f282d/gowpy-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01a32b412623360e39cd5e44c5883a8473033dfcc37b6a97368dc18c4be743f1",
          "md5": "d6393338e7e92a5475387b2d6643d47e",
          "sha256": "12ae27287a5f03c6fb94e43c1b87d852ae0fea8b92fdbc0070388c42f9428761"
        },
        "downloads": -1,
        "filename": "gowpy-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d6393338e7e92a5475387b2d6643d47e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21868,
        "upload_time": "2020-06-14T12:35:52",
        "upload_time_iso_8601": "2020-06-14T12:35:52.259604Z",
        "url": "https://files.pythonhosted.org/packages/01/a3/2b412623360e39cd5e44c5883a8473033dfcc37b6a97368dc18c4be743f1/gowpy-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cae2145b9ac747317765e16edbb71accd817dc80d3f941cc483119fe4a044ed5",
        "md5": "2ee7f45537dab0539795f7b7c9031788",
        "sha256": "062fa16ffccd8949d3d0e68f5b4f356721bbc02165609775f155f92854b9dcf8"
      },
      "downloads": -1,
      "filename": "gowpy-0.2.0-py3.6.egg",
      "has_sig": false,
      "md5_digest": "2ee7f45537dab0539795f7b7c9031788",
      "packagetype": "bdist_egg",
      "python_version": "3.6",
      "requires_python": ">=3.6",
      "size": 58634,
      "upload_time": "2020-06-14T12:35:49",
      "upload_time_iso_8601": "2020-06-14T12:35:49.602849Z",
      "url": "https://files.pythonhosted.org/packages/ca/e2/145b9ac747317765e16edbb71accd817dc80d3f941cc483119fe4a044ed5/gowpy-0.2.0-py3.6.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5e54fc0cd69ad97da7e6225ad0670f1bdb9272186cf6dc69a6d38c6e29bf933",
        "md5": "205ca1f884007b560979622f47a9b26c",
        "sha256": "875e8e781e3deacdc07b5162c4b7736e215d9c2a2854ff17e3848de9ad27c379"
      },
      "downloads": -1,
      "filename": "gowpy-0.2.0-py3.7.egg",
      "has_sig": false,
      "md5_digest": "205ca1f884007b560979622f47a9b26c",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": ">=3.6",
      "size": 59267,
      "upload_time": "2020-06-14T12:35:51",
      "upload_time_iso_8601": "2020-06-14T12:35:51.029179Z",
      "url": "https://files.pythonhosted.org/packages/d5/e5/4fc0cd69ad97da7e6225ad0670f1bdb9272186cf6dc69a6d38c6e29bf933/gowpy-0.2.0-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c9fe8948bb2667e29f5c5fda955e20b1804444340d370a552e20505097f282d",
        "md5": "cb22bc4c00083d5dcfc2d2a387936dc5",
        "sha256": "18a4b5ead25417a9ea80a3e322186f7514855afd354fe86686c2a4e9cf870d0b"
      },
      "downloads": -1,
      "filename": "gowpy-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cb22bc4c00083d5dcfc2d2a387936dc5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 27929,
      "upload_time": "2020-06-14T12:35:45",
      "upload_time_iso_8601": "2020-06-14T12:35:45.994954Z",
      "url": "https://files.pythonhosted.org/packages/7c/9f/e8948bb2667e29f5c5fda955e20b1804444340d370a552e20505097f282d/gowpy-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01a32b412623360e39cd5e44c5883a8473033dfcc37b6a97368dc18c4be743f1",
        "md5": "d6393338e7e92a5475387b2d6643d47e",
        "sha256": "12ae27287a5f03c6fb94e43c1b87d852ae0fea8b92fdbc0070388c42f9428761"
      },
      "downloads": -1,
      "filename": "gowpy-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d6393338e7e92a5475387b2d6643d47e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21868,
      "upload_time": "2020-06-14T12:35:52",
      "upload_time_iso_8601": "2020-06-14T12:35:52.259604Z",
      "url": "https://files.pythonhosted.org/packages/01/a3/2b412623360e39cd5e44c5883a8473033dfcc37b6a97368dc18c4be743f1/gowpy-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}