{
  "info": {
    "author": "Ian Yoo",
    "author_email": "thyoostar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# Semantic-Segmentation-Pytorch\n\n[![PyPI Version](https://img.shields.io/pypi/v/seg-torch.svg)](https://pypi.org/project/seg-torch)\n\nPytorch implementation of FCN, UNet, PSPNet and various encoder models.\n<p align=\"center\">\n      <img src=\"docs/Thumbnail.png\">\n      <br></br>\n</p>\n\nThese are the reference implementation of the models.\n- FCN (Fully Convolutional Networks for Sementic Segmentation) [[Paper]](https://arxiv.org/abs/1411.4038)\n- UNet (Convolutional Networks for Biomedical Image Segmentation) [[Paper]](https://arxiv.org/abs/1505.04597)\n- PSPNet (Pyramid Scene Parsing Network) [[Paper]](https://arxiv.org/abs/1612.01105)\n\n## Models\n\nThis project supports models as follow:\n\n| model name          | encoder model       | decoder model       |\n|:-------------------:|:-------------------:|:-------------------:|\n| fcn8_vgg11          | VGG 11              | FCN8                |\n| fcn8_vgg13          | VGG 13              | FCN8                |\n| fcn8_vgg16          | VGG 16              | FCN8                |\n| fcn8_vgg19          | VGG 19              | FCN8                |\n| fcn16_vgg11         | VGG 11              | FCN16               |\n| fcn16_vgg13         | VGG 13              | FCN16               |\n| fcn16_vgg16         | VGG 16              | FCN16               |\n| fcn16_vgg19         | VGG 19              | FCN16               |\n| fcn32_vgg11         | VGG 11              | FCN32               |\n| fcn32_vgg13         | VGG 13              | FCN32               |\n| fcn32_vgg16         | VGG 16              | FCN32               |\n| fcn32_vgg19         | VGG 19              | FCN32               |\n| fcn8_resnet18       | Resnet-18           | FCN8                |\n| fcn8_resnet34       | Resnet-34           | FCN8                |\n| fcn8_resnet50       | Resnet-50           | FCN8                |\n| fcn8_resnet101      | Resnet-101          | FCN8                |\n| fcn8_resnet152      | Resnet-152          | FCN8                |\n| fcn16_resnet18      | Resnet-18           | FCN16               |\n| fcn16_resnet34      | Resnet-34           | FCN16               |\n| fcn16_resnet50      | Resnet-50           | FCN16               |\n| fcn16_resnet101     | Resnet-101          | FCN16               |\n| fcn16_resnet152     | Resnet-152          | FCN16               |\n| fcn32_resnet18      | Resnet-18           | FCN32               |\n| fcn32_resnet34      | Resnet-34           | FCN32               |\n| fcn32_resnet50      | Resnet-50           | FCN32               |\n| fcn32_resnet101     | Resnet-101          | FCN32               |\n| fcn32_resnet152     | Resnet-152          | FCN32               |\n| fcn8_mobilenet_v2   | MobileNet-v2        | FCN8                |\n| fcn16_mobilenet_v2  | MobileNet-v2        | FCN16               |\n| fcn32_mobilenet_v2  | MobileNet-v2        | FCN32               |\n| unet                | Unet                | Unet                |\n| unet_vgg11          | VGG11               | Unet                |\n| unet_vgg13          | VGG13               | Unet                |\n| unet_vgg16          | VGG16               | Unet                |\n| unet_vgg19          | VGG19               | Unet                |\n| unet_resnet18       | Resnet-18           | Unet                |\n| unet_resnet34       | Resnet-34           | Unet                |\n| unet_resnet50       | Resnet-50           | Unet                |\n| unet_resnet101      | Resnet-101          | Unet                |\n| unet_resnet152      | Resnet-152          | Unet                |\n| unet_mobilenet_v2   | MobileNet-v2        | Unet                |\n| pspnet_vgg11        | VGG11               | PSPNet              |\n| pspnet_vgg13        | VGG13               | PSPNet              |\n| pspnet_vgg16        | VGG16               | PSPNet              |\n| pspnet_vgg19        | VGG19               | PSPNet              |\n| pspnet_resnet18     | Resnet-18           | PSPNet              |\n| pspnet_resnet34     | Resnet-34           | PSPNet              |\n| pspnet_resnet50     | Resnet-50           | PSPNet              |\n| pspnet_resnet101    | Resnet-101          | PSPNet              |\n| pspnet_resnet152    | Resnet-152          | PSPNet              |\n| pspnet_mobilenet_v2 | MobileNet-v2        | PSPNet              |\n\nExample results of the pspnet_mobilenet_v2 model:\n\nInput Image            |  Ground Truth Image    | Result Image      |\n:-------------------------:|:-------------------------:|:-------------------------:|\n![](docs/exam_result/input1.png)  |  ![](docs/exam_result/ground_truth1.png)  |  ![](docs/exam_result/result1.png)\n![](docs/exam_result/input2.png)  |  ![](docs/exam_result/ground_truth2.png)  |  ![](docs/exam_result/result2.png)\n\n## Getting Started\n\n### Requirements\n\n- [pytorch](https://github.com/pytorch/pytorch) >= 1.5.0\n- [torchvision](https://github.com/pytorch/vision) >= 0.5.0\n- [TensorboardX](https://github.com/lanpa/tensorboardX) >= 0.2.0\n- opencv-python\n- [tqdm](https://github.com/tqdm/tqdm)\n\n### Installation\n\n```shell\npip install seg-torch\n```\n\nor\n\n```shell\ngit clone https://github.com/IanTaehoonYoo/semantic-segmentation-pytorch/\ncd semantic-segmentation-pytorch\npython setup.py install\n```\n### Preparing the data for training\n\nIn this project, the data for training is the [[Cityspaces]](https://www.cityscapes-dataset.com/). You can run this project using the sample dataset in the segmentation/test/dataset/cityspaces folder. If you want to run this project using another dataset, please refer to the dataset format as bellow.\n\n1. There are two folders which are the training images folder and the groundtruth labeled images folder.\n2. The training image and the labeled image must have the same file name and size.\n3. The training image must be the RGB image, and the labeled image should have the class value, the range [0, n_classes].\n\n### Example code to use this project with python\n\n```python\nfrom torchvision import transforms\n\nfrom segmentation.data_loader.segmentation_dataset import SegmentationDataset\nfrom segmentation.data_loader.transform import Rescale, ToTensor\nfrom segmentation.trainer import Trainer\nfrom segmentation.predict import *\nfrom segmentation.models import all_models\nfrom util.logger import Logger\n\ntrain_images = r'dataset/cityspaces/images/train'\ntest_images = r'dataset/cityspaces/images/test'\ntrain_labled = r'dataset/cityspaces/labeled/train'\ntest_labeled = r'dataset/cityspaces/labeled/test'\n\nif __name__ == '__main__':\n    model_name = \"fcn8_vgg16\"\n    device = 'cuda'\n    batch_size = 4\n    n_classes = 34\n    num_epochs = 10\n    image_axis_minimum_size = 200\n    pretrained = True\n    fixed_feature = False\n\n    logger = Logger(model_name=model_name, data_name='example')\n\n    ### Loader\n    compose = transforms.Compose([\n        Rescale(image_axis_minimum_size),\n        ToTensor()\n         ])\n\n    train_datasets = SegmentationDataset(train_images, train_labled, n_classes, compose)\n    train_loader = torch.utils.data.DataLoader(train_datasets, batch_size=batch_size, shuffle=True, drop_last=True)\n\n    test_datasets = SegmentationDataset(test_images, test_labeled, n_classes, compose)\n    test_loader = torch.utils.data.DataLoader(test_datasets, batch_size=batch_size, shuffle=True, drop_last=True)\n\n    ### Model\n    model = all_models.model_from_name[model_name](n_classes, batch_size,\n                                                   pretrained=pretrained,\n                                                   fixed_feature=fixed_feature)\n    model.to(device)\n\n    ###Load model\n    ###please check the foloder: (.segmentation/test/runs/models)\n    #logger.load_model(model, 'epoch_15')\n\n    ### Optimizers\n    if pretrained and fixed_feature: #fine tunning\n        params_to_update = model.parameters()\n        print(\"Params to learn:\")\n        params_to_update = []\n        for name, param in model.named_parameters():\n            if param.requires_grad == True:\n                params_to_update.append(param)\n                print(\"\\t\", name)\n        optimizer = torch.optim.Adadelta(params_to_update)\n    else:\n        optimizer = torch.optim.Adadelta(model.parameters())\n\n    ### Train\n    #scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)\n    trainer = Trainer(model, optimizer, logger, num_epochs, train_loader, test_loader)\n    trainer.train()\n\n\n    #### Writing the predict result.\n    predict(model, r'dataset/cityspaces/input.png',\n             r'dataset/cityspaces/output.png')\n```\n\n### Pre-trained models (Encoder models)\n\nThis project uses pre-trained models such as VGG, ResNet, and MobileNet from the torchvision library. If you want the fine-tunning model, you can change the input parameters which are 'pretrained' and 'fixed_feature' when calling a model. And then, you should set the optimizer to freeze the model like as follow.\n\n```python\n    model = all_models.model_from_name[model_name](n_classes, batch_size,\n                                                   pretrained=pretrained,\n                                                   fixed_feature=fixed_feature)\n\n    # Optimizers\n    if pretrained and fixed_feature: #fine-tunning\n        params_to_update = model.parameters()\n        print(\"Params to learn:\")\n        params_to_update = []\n        for name, param in model.named_parameters():\n            if param.requires_grad == True:\n                params_to_update.append(param)\n                print(\"\\t\", name)\n        optimizer = torch.optim.Adadelta(params_to_update)\n    else:\n        optimizer = torch.optim.Adadelta(model.parameters())\n\n```\n\n### Getting the learning results on Tensorboard\n\nThe Logger class is to write the result such as mean IoU, accuracy, loss, and predict labeled images. The logger class gets the model name and the data name. So, it can generate the tensorboard files automatically in the runs folder, .\\segmentation\\runs\\\n\nHere is example command to see the result\n\n```python\ntensorboard --logdir=%project_path\\segmentation\\runs --host localhost\n```\n\nIf you don't know about Tensorboard, please refer to [[Tensorboard]](https://www.tensorflow.org/tensorboard/get_started)\n\n### Saving and loading check points\n\nThe trainer class can save the check point automatically depends on argument is called 'check_point_epoch_stride'. So check points will be saved for every epoch stride in the runs folder, ./segmentation/runs/models.\n\nAlso, you can load the check point using the logger class. Here are example codes, please refer to as bellow.\n\n```python\n\n\"\"\"\nSave check point.\nPlease check the runs folder, ./segmentation/runs/models\n\"\"\"\ncheck_point_stride = 30 # the checkpoint is saved for every 30 epochs.\n\n#'model_name' and 'data_name' are to set a path to save the check point. \n# So you should set the same the Logger's arguemnts when you load the check point.\nlogger = Logger(model_name=\"pspnet_mobilenet_v2\", data_name='example')\n\ntrainer = Trainer(model, optimizer, logger, num_epochs,\n                      train_loader, test_loader,\n                      check_point_epoch_stride=check_point_stride)\n\n```\n\n```python\n\"\"\"\nLoad check point.\n\"\"\"\nn_classes = 33\nbatch_size = 4\n\n# The Logger's arguemnts should be the same as when you train the model.\nlogger = Logger(model_name=\"pspnet_mobilenet_v2\", data_name='example')\n\nmodel = all_models.model_from_name[model_name](n_classes, batch_size)\nlogger.load_model(model, 'epoch_253')                      \n```\n\n## Cite This Project\nIf you find this code useful, please consider the following BibTeX entry.\n\n```bash\n@misc{seg-pytorch,\n  author =       {Ian Yoo},\n  title =        {{sementic-segmentation-pytorch: Pytorch implementation of FCN, UNet, PSPNet and various encoder models}},\n  howpublished = {\\url{https://github.com/IanTaehoonYoo/semantic-segmentation-pytorch}},\n  year =         {2020}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/IanTaehoonYoo/semantic-segmentation-pytorch",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "seg-torch",
    "package_url": "https://pypi.org/project/seg-torch/",
    "platform": "any",
    "project_url": "https://pypi.org/project/seg-torch/",
    "project_urls": {
      "Homepage": "https://github.com/IanTaehoonYoo/semantic-segmentation-pytorch"
    },
    "release_url": "https://pypi.org/project/seg-torch/0.1.7/",
    "requires_dist": [
      "torch (>=1.5.0)",
      "torchvision (>=0.5.0)",
      "tensorboardX (>=2.0opencv-python)",
      "tqdm",
      "tensorflow ; extra == 'tensorflow'"
    ],
    "requires_python": "",
    "summary": "Semantic Segmentation with Pytorch",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7916643,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "247bc21d4e5b8d29af20f8f29153d7c7dc0598bec1299219203dc6907da7af15",
          "md5": "1cafd2f614778033971d35422309a6e2",
          "sha256": "dfbabe3ddd798c483203cbca48f94fe930d442dea549802b37e21f3f85ce7f3c"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cafd2f614778033971d35422309a6e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27521,
        "upload_time": "2020-08-02T22:13:55",
        "upload_time_iso_8601": "2020-08-02T22:13:55.638233Z",
        "url": "https://files.pythonhosted.org/packages/24/7b/c21d4e5b8d29af20f8f29153d7c7dc0598bec1299219203dc6907da7af15/seg_torch-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f17fa5b4766617e471ff0f0d5dc1b2c48e719cad2f1c1c9c5689077a2fa6eba0",
          "md5": "dbd4fdd2f16c4f291be695b8e417f3ae",
          "sha256": "49ce277a071ebb8c273776cf785c08322ded525b852c6f5383acf8940302c564"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dbd4fdd2f16c4f291be695b8e417f3ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17064,
        "upload_time": "2020-08-02T22:13:57",
        "upload_time_iso_8601": "2020-08-02T22:13:57.696110Z",
        "url": "https://files.pythonhosted.org/packages/f1/7f/a5b4766617e471ff0f0d5dc1b2c48e719cad2f1c1c9c5689077a2fa6eba0/seg_torch-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb4c6c78769a7ec7ee6b1a6bb94b36398dc5a76ba8f1864827bb46350fcc86f4",
          "md5": "41b1d51f2fd55446abb04475cf3b6882",
          "sha256": "4f71d47f5f709e61a9f6f34975e05e88d0b8effda77c3d17fbd54b5180cfaf3a"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41b1d51f2fd55446abb04475cf3b6882",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30051,
        "upload_time": "2020-08-03T03:37:34",
        "upload_time_iso_8601": "2020-08-03T03:37:34.596169Z",
        "url": "https://files.pythonhosted.org/packages/fb/4c/6c78769a7ec7ee6b1a6bb94b36398dc5a76ba8f1864827bb46350fcc86f4/seg_torch-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "810c04fa0c613f897427056e859828d7ad419ad169edd4baabb1408009564b95",
          "md5": "ad82191bca5fde725195adc156f4235e",
          "sha256": "4a3ffd0eee4bfd496888b62bd93091e004817b3e06ae6abbf75eb4b2ddf6ff06"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ad82191bca5fde725195adc156f4235e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20381,
        "upload_time": "2020-08-03T03:37:36",
        "upload_time_iso_8601": "2020-08-03T03:37:36.215703Z",
        "url": "https://files.pythonhosted.org/packages/81/0c/04fa0c613f897427056e859828d7ad419ad169edd4baabb1408009564b95/seg_torch-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "102af92dd920e7bce79b4604c8a90725c519976139a5fb6ef875bf0954a1fe9a",
          "md5": "baaa5756f7dd9ee8e32d3ba4bb44917b",
          "sha256": "9994da1da642a4bb7c61a2bb7995a2a467bbfb625c1c8055e288b24247232c7b"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "baaa5756f7dd9ee8e32d3ba4bb44917b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30067,
        "upload_time": "2020-08-03T03:50:28",
        "upload_time_iso_8601": "2020-08-03T03:50:28.320416Z",
        "url": "https://files.pythonhosted.org/packages/10/2a/f92dd920e7bce79b4604c8a90725c519976139a5fb6ef875bf0954a1fe9a/seg_torch-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c5beef7fb1cf4ca296b91b11b0bdabdaa2023507a42c2d26054d391b9e3b130",
          "md5": "7b800bec730594cf9b86006a94163a5e",
          "sha256": "b5ca36787e7463f80ce4f3d0c20637e5b2c9cfd1bde600d9d864b498aab51ec9"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7b800bec730594cf9b86006a94163a5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20388,
        "upload_time": "2020-08-03T03:50:30",
        "upload_time_iso_8601": "2020-08-03T03:50:30.669953Z",
        "url": "https://files.pythonhosted.org/packages/8c/5b/eef7fb1cf4ca296b91b11b0bdabdaa2023507a42c2d26054d391b9e3b130/seg_torch-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c4bd2ba217f76ce6e19555a14a3bb2b2a124528fa5eb05f4f37df27a4b6eae3",
          "md5": "2672100f34ebdfdccc5f89374773b33e",
          "sha256": "f220691043a7355b4842fa9eb5fc64454c698471e41de78f6d1aa65df2a65497"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2672100f34ebdfdccc5f89374773b33e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31941,
        "upload_time": "2020-08-03T23:09:44",
        "upload_time_iso_8601": "2020-08-03T23:09:44.037233Z",
        "url": "https://files.pythonhosted.org/packages/2c/4b/d2ba217f76ce6e19555a14a3bb2b2a124528fa5eb05f4f37df27a4b6eae3/seg_torch-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eda59636ea6e94cc5ac47b52d71d78f27d4e3b8627b47d581156bc5f2b1a70d7",
          "md5": "214c6f7b1eac50fe17f3e892499d70db",
          "sha256": "8c5efaf22a9a08c9aa6e332b508c9085632d38a01c019f112b64ffb7bd029396"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "214c6f7b1eac50fe17f3e892499d70db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21448,
        "upload_time": "2020-08-03T23:09:46",
        "upload_time_iso_8601": "2020-08-03T23:09:46.860893Z",
        "url": "https://files.pythonhosted.org/packages/ed/a5/9636ea6e94cc5ac47b52d71d78f27d4e3b8627b47d581156bc5f2b1a70d7/seg_torch-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dfb37148c77b08776032ae257c1bf2052844fe6c9625316a32468814a6c2bb9",
          "md5": "ab426424813347a5cca931374598b33a",
          "sha256": "56d59983e8028f7acc0aafb6c92a1039c921ea8e613b7260d19b6d8f70855526"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab426424813347a5cca931374598b33a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33480,
        "upload_time": "2020-08-07T04:57:24",
        "upload_time_iso_8601": "2020-08-07T04:57:24.845528Z",
        "url": "https://files.pythonhosted.org/packages/0d/fb/37148c77b08776032ae257c1bf2052844fe6c9625316a32468814a6c2bb9/seg_torch-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49863e7aa2d419f1c09992c8c79bb837e8d0373f5ff8111b884b5c1450deeea8",
          "md5": "b12edbdc7040f7fc418a0aadb6948ab5",
          "sha256": "8bd86c597bd7521788fb0f0fa40acaeecd8803ed3a74c527ba3062c93edbfe4c"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b12edbdc7040f7fc418a0aadb6948ab5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22722,
        "upload_time": "2020-08-07T04:57:29",
        "upload_time_iso_8601": "2020-08-07T04:57:29.040422Z",
        "url": "https://files.pythonhosted.org/packages/49/86/3e7aa2d419f1c09992c8c79bb837e8d0373f5ff8111b884b5c1450deeea8/seg_torch-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "870c993f2257ad3e8f9a8e99b1fa3644f60554a19adb690dd2a98db8ed77e0dd",
          "md5": "495156e2b31c0731f606d8da306d78e7",
          "sha256": "3e2e473ceddfbb4905995ae3de7198debfa55fac88d03f0b549543f49659838c"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "495156e2b31c0731f606d8da306d78e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33719,
        "upload_time": "2020-08-07T19:44:14",
        "upload_time_iso_8601": "2020-08-07T19:44:14.240456Z",
        "url": "https://files.pythonhosted.org/packages/87/0c/993f2257ad3e8f9a8e99b1fa3644f60554a19adb690dd2a98db8ed77e0dd/seg_torch-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30fe10c6fe5f6b44aeeed79656615163e3299a4e6d1c1152761c9362164d584d",
          "md5": "1bc54e1c732ab9b3fcff26d1909d449c",
          "sha256": "685915dc08960747acbe2614a44f637ea22797b09b55f73632fcd10d379ba3bb"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1bc54e1c732ab9b3fcff26d1909d449c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23002,
        "upload_time": "2020-08-07T19:44:15",
        "upload_time_iso_8601": "2020-08-07T19:44:15.737396Z",
        "url": "https://files.pythonhosted.org/packages/30/fe/10c6fe5f6b44aeeed79656615163e3299a4e6d1c1152761c9362164d584d/seg_torch-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86e68e258dbbd1d1091182dddd69908dea54c058038baaa072a76b87e191e08e",
          "md5": "a1616598df953a83519dc2f54b9f0c8a",
          "sha256": "e3b24cf82b57054ada608bd289bab8c06075d055bfe1cc791a79cb1faf35744e"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1616598df953a83519dc2f54b9f0c8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33717,
        "upload_time": "2020-08-08T20:56:52",
        "upload_time_iso_8601": "2020-08-08T20:56:52.625595Z",
        "url": "https://files.pythonhosted.org/packages/86/e6/8e258dbbd1d1091182dddd69908dea54c058038baaa072a76b87e191e08e/seg_torch-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "130eae8b77978652ae7a66442bf0996ebacf2bd88892c361062c235aafb73f80",
          "md5": "a3b77b5052d1538ed4fbde4ea63b1f8f",
          "sha256": "e743c5bfad81901ccb2b20611af1a108216984cc39ec4385fef1fdd1cf9c41c8"
        },
        "downloads": -1,
        "filename": "seg_torch-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a3b77b5052d1538ed4fbde4ea63b1f8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23003,
        "upload_time": "2020-08-08T20:56:55",
        "upload_time_iso_8601": "2020-08-08T20:56:55.667433Z",
        "url": "https://files.pythonhosted.org/packages/13/0e/ae8b77978652ae7a66442bf0996ebacf2bd88892c361062c235aafb73f80/seg_torch-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86e68e258dbbd1d1091182dddd69908dea54c058038baaa072a76b87e191e08e",
        "md5": "a1616598df953a83519dc2f54b9f0c8a",
        "sha256": "e3b24cf82b57054ada608bd289bab8c06075d055bfe1cc791a79cb1faf35744e"
      },
      "downloads": -1,
      "filename": "seg_torch-0.1.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a1616598df953a83519dc2f54b9f0c8a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 33717,
      "upload_time": "2020-08-08T20:56:52",
      "upload_time_iso_8601": "2020-08-08T20:56:52.625595Z",
      "url": "https://files.pythonhosted.org/packages/86/e6/8e258dbbd1d1091182dddd69908dea54c058038baaa072a76b87e191e08e/seg_torch-0.1.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "130eae8b77978652ae7a66442bf0996ebacf2bd88892c361062c235aafb73f80",
        "md5": "a3b77b5052d1538ed4fbde4ea63b1f8f",
        "sha256": "e743c5bfad81901ccb2b20611af1a108216984cc39ec4385fef1fdd1cf9c41c8"
      },
      "downloads": -1,
      "filename": "seg_torch-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "a3b77b5052d1538ed4fbde4ea63b1f8f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23003,
      "upload_time": "2020-08-08T20:56:55",
      "upload_time_iso_8601": "2020-08-08T20:56:55.667433Z",
      "url": "https://files.pythonhosted.org/packages/13/0e/ae8b77978652ae7a66442bf0996ebacf2bd88892c361062c235aafb73f80/seg_torch-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}