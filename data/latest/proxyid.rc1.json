{
  "info": {
    "author": "Felipe Paes",
    "author_email": "felipepaes@disroot.org",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Proxyid\n\nProxyid hides your Django model primary key\n\nProxyid turns **`https://myapp.com/model/1`** into **`https://myapp.com/model/5NxJD1dG6V`**\n\nIt makes use of the [hashids library](https://hashids.org) to mask your integer or uuid based primary keys. It's plug'n play, therefore, it doesn't interfere with the database or model definitions.\n\n| Type    | Primary Key                              | Exposed Proxied PK           |\n| :------ | :--------------------------------------- | :--------------------------- |\n| Integer | 3                                        | 5NxJD1dG6VB3ZR3eKyzYEWrba    |\n| UUID    | 82df2e8e-553b-4330-bd46-8299ec67a9bb\t | 7ljjRD1qVLfjkQepdRZAimyDDZZ2 |\n\n\n## Quick Start\n\nAssuming a Django project is already set with an app called appmock, proxyid can be installed with **pip**.\n\n```terminal\n$ pip install proxyid\n```\n\nThe configuration is set as a constant `PROXYID` in `settings.py`\n\n```python\nPROXYID = {\n    \"hashids\": {\n        \"salt\": \"A grain of salt\", # this is your salt\n        \"min_length\": 15           # this is the minimum length of the proxied id\n    }\n}\n```\n\nLet's say the project has an Author model\n\n```python\n# djangoproject/appmock/models.py\nfrom django.db import models\n\nclass Author(models.Model):\n    name = models.CharField()\n    nationality = models.CharField()\n\n    def __str__(self):\n        return self.name\n```\n\nNow take a look at our `urls.py`\n\n```python\n# djangoproject/appmock/urls.py\nfrom django.urls import path\nfrom appmock import views\n\n\nurlpatterns = [\n    # ...other path configuration\n    # ...other path configuration\n    # ...other path configuration\n    path(\"author/<pk>/\", views.author_detail, name=\"author-detail\")\n]\n```\n\n### Proxify the Primary Key\n\nIf the app is exposing the database's primary key, the Author resource would be found, for example, at `http://myapp.com/author/1`\nLet's hide our primary key. by importing the `proxify` decorator and defining a property method.\n\n\n```python\n# djangoproject/appmock/models.py\nfrom django.db import models\nfrom proxyid.decorators import proxify\n\nclass Author(models.Model):\n    name = models.CharField()\n    nationality = models.CharField()\n\n    @property\n    @proxify\n    def id_(self): pass\n\n    def __str__(self):\n        return self.name\n```\n\nThat's it, now our model instance will have the `id_` property with it's unique primary key encoded by proxyid by using the hashids library. All we need  is a method which doesn't return anything and the decorators `@property` and `@proxify`. You can name this property method whatever you want(except **pk** or **id**), let's name it `id_` for this example.\n\nLet's check it by retrieving a model in a django shell session\n\n```terminal\n$ python manage.py shell\nPython 3.9.2 (default, Mar 21 2021, 20:35:03)\n[GCC 9.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from appmock import models\n>>> author = models.Author.object.create(name=\"Lima Barreto\", nationality=\"Brazil\")\n>>> author.id\n1\n>>> author.id_\nRvBykxK6qojOJnOMrQeGpALDW\n```\n\n### Retrieving objects from encoded Primary Keys\n\nNow, how about retrieving our object from the database if our user is giving us the encoded(`RvBykxK6qojOJnOMrQeGpALDW`) primary key?\nLet's go to our hypothetical `author_detail` view function in `views.py`\n\n```python\n# djangoprojects/appmock/views.py\nfrom django.shortcuts import render, HttpResponse\n\nfrom appmock.models import Author\n\nfrom proxyid.encoding import decode\n\n# ...other code\n\ndef author_detail(request, pk):\n    decoded_pk = decode(pk) # this will bring RvBykxK6qojOJnOMrQeGpALDW back to 1\n    author = Author.objects.get(pk=decoded_pk)\n    context = {\"author\" : author}\n    return render(request, \"appmock/author_detail.html\", context)\n\n```\n\nWe imported `decode` from `proxyid.encoding`, the `decode` function will transform our proxied value back to it's original primary key value, allowing us to retrieve our object by giving the pk value to the ORM.\n\nHow the urls were generated? By just passing the object `id_` instead of `pk` property or whatever name you have it to the url function. Like this:\n\n```django-templates\n<!-- some html -->\n\n{% url 'author-detail' author.id_ %}\n```\n\nNow our author resource can be found at `http:myapp.com/author/RvBykxK6qojOJnOMrQeGpALDW`\n\n### What about class based views?\n\nLet's build the same logic of `author_detail` function view as a class based view now:\n\n```python\n# djangoproject/appmock/views.py\nfrom django.views import generic\n\nfrom appmock.models import Author\n\nfrom proxyid.mixins import ProxyidMixin\n\nclass AuthorDetailView(ProxyidMixin, generic.DetailView):\n    template_name = \"appmock/author_detail.html\"\n    model = Author\n    context_object_name = \"author\"\n```\n\nThat's it, the view will work the same way as long as you use the `ProxyidMixin` as a parent class, and don't forget to provide a `pk` argument(this can be customized) from the url dispatcher.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/felipepaes/proxyid",
    "keywords": "",
    "license": "FreeBSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "proxyid",
    "package_url": "https://pypi.org/project/proxyid/",
    "platform": "",
    "project_url": "https://pypi.org/project/proxyid/",
    "project_urls": {
      "Bug Tracker": "https://github.com/felipepaes/proxyid/issues",
      "Homepage": "https://github.com/felipepaes/proxyid"
    },
    "release_url": "https://pypi.org/project/proxyid/0.1.0/",
    "requires_dist": [
      "hashids"
    ],
    "requires_python": ">=3.6",
    "summary": "Proxyid hides your Django model primary key",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9896321,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57790020b6a1346003c46b9448078ae2da47b8b87677f9baeee6cd8ecbc6a10d",
          "md5": "9fcc0197b1e77368d2dff83c88df8738",
          "sha256": "6df505cdb07c1b4a87a548df49440a0e3cf11c2839bbe3b57bcce55958463a9f"
        },
        "downloads": -1,
        "filename": "proxyid-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fcc0197b1e77368d2dff83c88df8738",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7650,
        "upload_time": "2021-03-27T01:27:00",
        "upload_time_iso_8601": "2021-03-27T01:27:00.154532Z",
        "url": "https://files.pythonhosted.org/packages/57/79/0020b6a1346003c46b9448078ae2da47b8b87677f9baeee6cd8ecbc6a10d/proxyid-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9bc123a50fc28f2ee16da3ffdcca244ddadc19ef12e3c6317a633d15723009d",
          "md5": "acc7b16f3d4f0d45b49beaf2e784bfb1",
          "sha256": "de74c041b231122d63992ac9755804c10f46d2d0f923a403a0282ac137d8a521"
        },
        "downloads": -1,
        "filename": "proxyid-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "acc7b16f3d4f0d45b49beaf2e784bfb1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7676,
        "upload_time": "2021-03-27T01:27:01",
        "upload_time_iso_8601": "2021-03-27T01:27:01.692158Z",
        "url": "https://files.pythonhosted.org/packages/d9/bc/123a50fc28f2ee16da3ffdcca244ddadc19ef12e3c6317a633d15723009d/proxyid-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57790020b6a1346003c46b9448078ae2da47b8b87677f9baeee6cd8ecbc6a10d",
        "md5": "9fcc0197b1e77368d2dff83c88df8738",
        "sha256": "6df505cdb07c1b4a87a548df49440a0e3cf11c2839bbe3b57bcce55958463a9f"
      },
      "downloads": -1,
      "filename": "proxyid-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9fcc0197b1e77368d2dff83c88df8738",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7650,
      "upload_time": "2021-03-27T01:27:00",
      "upload_time_iso_8601": "2021-03-27T01:27:00.154532Z",
      "url": "https://files.pythonhosted.org/packages/57/79/0020b6a1346003c46b9448078ae2da47b8b87677f9baeee6cd8ecbc6a10d/proxyid-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9bc123a50fc28f2ee16da3ffdcca244ddadc19ef12e3c6317a633d15723009d",
        "md5": "acc7b16f3d4f0d45b49beaf2e784bfb1",
        "sha256": "de74c041b231122d63992ac9755804c10f46d2d0f923a403a0282ac137d8a521"
      },
      "downloads": -1,
      "filename": "proxyid-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "acc7b16f3d4f0d45b49beaf2e784bfb1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7676,
      "upload_time": "2021-03-27T01:27:01",
      "upload_time_iso_8601": "2021-03-27T01:27:01.692158Z",
      "url": "https://files.pythonhosted.org/packages/d9/bc/123a50fc28f2ee16da3ffdcca244ddadc19ef12e3c6317a633d15723009d/proxyid-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}