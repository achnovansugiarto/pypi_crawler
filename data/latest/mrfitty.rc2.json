{
  "info": {
    "author": "Joshua Lynch",
    "author_email": "joshua.kevin.lynch@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MrFitty\n\nMrFitty is an open-source Python package for fitting XANES data to a set of reference spectra using linear least\nsquares and best subset selection as described in *An Introduction to Statistical Learning with Applications in R* by\nGareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani. It runs on any system with a Python 3.8+ interpreter\nincluding Linux, OS X, and Windows.\n\nMrFitty functions similarly to the spectra-fitting tools in the LabView software suite written by\nDr. Matthew Marcus at the Berkeley Synchrotron available [here](https://sites.google.com/a/lbl.gov/als-beamline1032/software-download>`).\n\n* Free software: MIT license\n\n## Overview\n\nXANES spectrum fitting is a basic application of linear least squares: given the spectrum of an unknown sample and a library\nof reference spectra find the combination of references that best fits the unknown. Fitting each individual group of references\nto the unknown is simple, but selecting the 'best' combination of references from\nthe set of all fits is not simple.\n\nA straightforward comparison of models using the sum of squared residuals (SSR) or the equivalent mean-square error\n(MSE) seems to be a natural choice. But these choices overlook a purely numerical advantage held by the SSR of an\nn-component model over any model with fewer than n components. This advantage is the result of using the same data to\nboth *fit* the model and *evaluate* the model. Classical statistics offers methods to make improved comparisons of SSR\nand measures like it [2]. My objection to these methods is that they are difficult to interpret in terms of the data\nitself.\n\n*Prediction error* is a different approach to the model comparison problem that is computationally expensive but more\neasily interpreted. A straightforward comparison of different models can be made if datasets\nare partitioned into two parts, one for model fitting and the other for model evaluation. Then the model fitting\nprocess does not interact with the model evaluation process. This is the basis for *cross-validation* and similar\nmethods including the method implemented by MrFitty.\n\nDividing a dataset into two parts is clearly insufficient for a robust “goodness of fit” measure, and it has been\ncommon to see 5- and 10-fold cross-validation in machine learning literature, meaning datasets were divided into 5 or\n10 partitions and each partition evaluated against a model fit to the remaining data. MrFitty uses a large number of\nrandom partitions of the data to generate a robust “median prediction error” as well as a robust confidence interval of\nthe median prediction error. This confidence interval allows a well-defined criterion for saying either:\n\n  * fit A is better than fit B, or\n  * fit A is no better than fit B\n\nby asking whether the confidence intervals of median prediction error overlap. This criterion is directly\ninterpretable in terms of the data since weaker models and weaker data can be expected to give larger confidence\nintervals than stronger models and stronger data.\n\n## Requirements\n\nMrFitty requires Python 3.8+.\n\n## Installation\n\nUsers should consider installing MrFitty in a [Python virtual environment](https://docs.python.org/3.6/library/venv.html).\nThis is not necessary but it simplifies package management by separating the system Python from the users' Python environments.\nOn systems without Python 3.8+ the [Anaconda](https://anaconda.org) or [Miniconda](https://docs.conda.io/en/latest/miniconda.html)\nPython distribution is a good choice. Either one can be installed without administrative privileges and supports virtual environments.\n\n### Method 1 (not recommended!)\nIf the standard Python 3.8+ distribution is available then MrFitty can be installed with pip:\n\n    $ pip install git+https://github.com/jklynch/mr-fitty.git\n\n### Method 2 (recommended)\nAlternatively, MrFitty can be installed in a virtual environment using the standard Python 3.8+ distribution with the following commands:\n\n    $ python3 -m venv mrf\n    $ source mrf/bin/activate\n    (mrf) $ pip install --upgrade pip \n    (mrf) $ pip install mrfitty\n\n### Method 3 (recommended)\nIf the Anaconda or Miniconda distribution has been installed then MrFitty can be installed in a virtual environment with these commands:\n\n    $ conda create python=3.8 --name mrf\n    $ conda activate mrf\n    (mrf) $ pip install mrfitty\n\nIn all cases the required packages will be automatically installed by pip.\n\n## Update\nUpdate MrFitty with pip as follows:\n\n    (mrf) $ pip uninstall mrfitty\n    (mrf) $ pip install mrfitty\n\n## Usage\nMrFitty runs from the command line.  The --help option will display usage instructions:\n\n    $ mrfitty --help\n    Usage: mrfitty [OPTIONS] CONFIG_FP\n\n    Options:\n      --help   Show this message and exit.\n\nThe required CONFIG_FP argument specifies the path to a configuration file written by the user, e.g.\n\n    $ mrfitty ~/fit_arsenic_spectra.cfg\n\nHere is an example configuration file that uses an existing PRM file:\n\n    [fit]\n    minimum_component_count = 1\n    maximum_component_count = 3\n    fit_method = lsq\n    component_count_method = combination_fit\n\n    [references]\n    prm = reference/As_database_for_llsq_25_refs.prm\n\n    [data]\n    data/*.e\n\n    [output]\n    best_fit_files_dir = output\n    plots_pdf_dir = output\n    table_fp = output/fit_table.txt\n\n    [plots]\n    best_fits_plot_limit = 3\n\nHere is an example configuration file that specifies reference files and fit parameters directly:\n\n    [fit]\n    minimum_component_count = 1\n    maximum_component_count = 3\n    fit_method = lsq\n    component_count_method = combination_fit\n\n    [references]\n    reference/*.e\n\n    [data]\n    data/*.e\n\n    [output]\n    best_fit_files_dir = output\n    plots_pdf_dir = output\n    table_fp = output/fit_table.txt\n\n    [plots]\n    best_fits_plot_limit = 3\n\n## Input\nIn addition to a configuration file the necessary input files are\n\n  + at least two (but probably more) normalized reference spectrum files\n\n  + one or more normalized spectrum files to be fit by the reference files\n\nAll input files must contain at least two columns of data. One column is\nincident energy and the other column is normalized absorbance. Initial rows beginning\nwith '#' will be ignored except for the last row which must contain column headers.\nFor example, the following normalized file written by Athena can be used as\ninput to mr-fitty\n\n    # Athena data file -- Athena version 0.8.056\n    # Saving OTT3_55_spot0 as normalized mu(E)\n    # .  Element=As   Edge=K\n    # Background parameters\n    # .  E0=11866.000  Eshift=0.000  Rbkg=1.000\n    # .  Standard=0: None\n    # .  Kweight=2.0  Edge step=0.004\n    # .  Fixed step=no    Flatten=yes\n    # .  Pre-edge range: [ -97.934 : -28.385 ]\n    # .  Pre-edge line: 0.0068524 + -5.1098e-007 * E\n    # .  Normalization range: [ 45.901 : 302.157 ]\n    # .  Post-edge polynomial: 0.011539 + -5.5019e-007 * E + 0 * E^2\n    # .  Spline range: [ 0.000 : 301.924 ]   Clamps: None/Strong\n    # Foreward FT parameters\n    # .  Kweight=0.5   Window=hanning   Phase correction=no\n    # .  k-range: [ 2.000 : 6.902 ]   dk=1.00\n    # Backward FT parameters\n    # .  R-range: [ 1.000 : 3.000 ]\n    # .  dR=0.00   Window=hanning\n    # Plotting parameters\n    # .  Multiplier=1   Y-offset=0.000\n    # .\n    #------------------------\n    #  energy norm bkg_norm der_norm\n      11766.697      -0.80039166E-02  -0.80037989E-02   0.61484012E-03\n      11771.697      -0.49320333E-02  -0.49319157E-02   0.12085377E-02\n      11776.697       0.40723503E-02   0.40724678E-02   0.17648519E-04\n      ...\n\n## Output\nSeveral output files will be produced:\n\n  + a single PDF containing plots of each fitted spectrum\n  \n![best 3-component fits](images/best-3-component-fits.png)\n  \n![best 3-component fit](images/best-3-component-fit.png)\n\n![best 3-component fit reference clusters](images/best-3-component-fit-reference-clusters.png)\n\n  + a single table in text format with the best fit information for each fitted spectrum\n  + one file per fitted spectrum with four columns of data:\n\n     +  incident energy\n     +  fitted normalized absorbance value\n     +  residual of the fit\n     +  input normalized absorbance\n\n## References\n[1] Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani, *An Introduction to Statistical Learning with Applications in R*\n\n[2] Calvin, Scott, *XAFS for Everyone*, 2013, CRC Press\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jklynch/mr-fitty",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mrfitty",
    "package_url": "https://pypi.org/project/mrfitty/",
    "platform": "",
    "project_url": "https://pypi.org/project/mrfitty/",
    "project_urls": {
      "Homepage": "https://github.com/jklynch/mr-fitty"
    },
    "release_url": "https://pypi.org/project/mrfitty/0.14.0/",
    "requires_dist": [
      "jupyter",
      "matplotlib",
      "numpy",
      "pandas",
      "scipy",
      "scikits.bootstrap",
      "scikit-learn",
      "sqlalchemy"
    ],
    "requires_python": ">=3.8",
    "summary": "Linear least-squares fitting for XANES data.",
    "version": "0.14.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12569471,
  "releases": {
    "0.13.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf8492ba1974e707bce8d9d386dfa2e4291b47050d30c415063969cceccb5c31",
          "md5": "29abc4cd24b8eb44ca5547df8a467819",
          "sha256": "525f2aecfae3c99ed8a5739f10ba31fc7928afdf207c429248aec12f9df0bf4f"
        },
        "downloads": -1,
        "filename": "mrfitty-0.13.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29abc4cd24b8eb44ca5547df8a467819",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 246243,
        "upload_time": "2022-01-03T23:14:39",
        "upload_time_iso_8601": "2022-01-03T23:14:39.288556Z",
        "url": "https://files.pythonhosted.org/packages/cf/84/92ba1974e707bce8d9d386dfa2e4291b47050d30c415063969cceccb5c31/mrfitty-0.13.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cc2eec405b722c73a26c15867c03326f73216eae9a71256218943f454087171",
          "md5": "c80979a195165a6545eb8e8bdf05404a",
          "sha256": "c75f6b9b99c94e15b30844842aabc2813e8df3c074e8f53c769fd7e5101af966"
        },
        "downloads": -1,
        "filename": "mrfitty-0.13.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c80979a195165a6545eb8e8bdf05404a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 426465,
        "upload_time": "2022-01-03T23:14:41",
        "upload_time_iso_8601": "2022-01-03T23:14:41.003783Z",
        "url": "https://files.pythonhosted.org/packages/2c/c2/eec405b722c73a26c15867c03326f73216eae9a71256218943f454087171/mrfitty-0.13.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6f7702ca063854040582a1470efa4a4e771e085a698e6735839ae780dc1fce4",
          "md5": "92884e6f2f1743c9b3b13d161a631f28",
          "sha256": "4e92624c7ad8fc5dc83a81e94448989d1617396e83479e5a490e16f9227e9479"
        },
        "downloads": -1,
        "filename": "mrfitty-0.14.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92884e6f2f1743c9b3b13d161a631f28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 39689,
        "upload_time": "2022-01-14T01:58:00",
        "upload_time_iso_8601": "2022-01-14T01:58:00.701448Z",
        "url": "https://files.pythonhosted.org/packages/f6/f7/702ca063854040582a1470efa4a4e771e085a698e6735839ae780dc1fce4/mrfitty-0.14.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9bf4ec617990b2064fa90967be60352c28808050fa884ba96e1ab6a8a564d59",
          "md5": "f41903b1629108113faba9e134ce14b1",
          "sha256": "95ab98135bd44469b52ccd66439fe1d3808f6a4a3023a8c7683c39ba5520af40"
        },
        "downloads": -1,
        "filename": "mrfitty-0.14.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f41903b1629108113faba9e134ce14b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 39026,
        "upload_time": "2022-01-14T01:58:02",
        "upload_time_iso_8601": "2022-01-14T01:58:02.347167Z",
        "url": "https://files.pythonhosted.org/packages/c9/bf/4ec617990b2064fa90967be60352c28808050fa884ba96e1ab6a8a564d59/mrfitty-0.14.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6f7702ca063854040582a1470efa4a4e771e085a698e6735839ae780dc1fce4",
        "md5": "92884e6f2f1743c9b3b13d161a631f28",
        "sha256": "4e92624c7ad8fc5dc83a81e94448989d1617396e83479e5a490e16f9227e9479"
      },
      "downloads": -1,
      "filename": "mrfitty-0.14.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "92884e6f2f1743c9b3b13d161a631f28",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 39689,
      "upload_time": "2022-01-14T01:58:00",
      "upload_time_iso_8601": "2022-01-14T01:58:00.701448Z",
      "url": "https://files.pythonhosted.org/packages/f6/f7/702ca063854040582a1470efa4a4e771e085a698e6735839ae780dc1fce4/mrfitty-0.14.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9bf4ec617990b2064fa90967be60352c28808050fa884ba96e1ab6a8a564d59",
        "md5": "f41903b1629108113faba9e134ce14b1",
        "sha256": "95ab98135bd44469b52ccd66439fe1d3808f6a4a3023a8c7683c39ba5520af40"
      },
      "downloads": -1,
      "filename": "mrfitty-0.14.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f41903b1629108113faba9e134ce14b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 39026,
      "upload_time": "2022-01-14T01:58:02",
      "upload_time_iso_8601": "2022-01-14T01:58:02.347167Z",
      "url": "https://files.pythonhosted.org/packages/c9/bf/4ec617990b2064fa90967be60352c28808050fa884ba96e1ab6a8a564d59/mrfitty-0.14.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}