{
  "info": {
    "author": "Graham Thompson",
    "author_email": "grahamwt42@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pyUnicodeSteganography\n\nExperimental python package implementing several methods of unicode steganography (concealing\na message within text by sneaky use of the unicode character set).\n\n## Build/Install\n\n- Clone this repository\n\n- Build: `python3 -m build`  or  `python3 setup.py build`\n\n- Install: `python3 -m pip install .`  or  `python3 setup.py install`\n\n## Test\n\n`python3 setup.py test`\n\n## Using \n\n```python\nimport pyUnicodeSteganography as usteg\n\ntext = \"this is a completely normal message\"\nsecret_msg = \"attack at dawn\"\nencoded = usteg.encode(text, secret_msg)\ndecoded = usteg.decode(encoded)\n```\n\n## Steganography Methods\n\n## Zero Width Characters\n\nUnicode standard includes multiple non-printing or zerowidth characters such as '\\u200b' zero\nwidth space. Which are not visible when rendered by most browsers/editors and etc. These can \nbe used to invisibly embed arbitrary data inside of other text. This is the default method \nthis package uses for steganography.\n\n```python\nsecret_text = usteg.encode(\"some text\", \"data\")\nsecret_binary = usteg.encode(\"some text\", b'\\x00\\x01', binary=True)\n```\n\n## SNOW (steganographic nature of whitespace)\n\n[Original project site](http://darkside.com.au/snow/)\n\nAn older method which uses trailing whitespace to embed arbitrary data in text. SNOW takes\nadvantage of the fact that many browsers and other programs will retain but not display trailing\nwhitespace to embed arbitrary data. Can work even with plain ascii text and may function better \nin situations where special unicode characters are removed. \n\n```python\nsecret_text = usteg.encode(\"some text\", \"data\", method=\"snow\")\nsecret_binary = usteg.encode(\"some text\", b'\\x00\\x01', method=\"snow\", binary=True)\n```\n\n## Unicode Lookalikes \n\nUnicode includes a lot of characters which are [confusable](https://util.unicode.org/UnicodeJsps/confusables.jsp?a=a&r=None)with other characters. This can also be used to encode arbitrary data into a\nstring. This method strategically replaces characters in a string with lookalike characters creating a simple binary encoding. (normal char-0, lookalike-1) \n\n```python\nsecret_text = usteg.encode(\"some text\", \"a\", method=\"lookalike\")\nsecret_binary = usteg.encode(\"some text\", b'\\x00', method=\"lookalike\", binary=True)\n```\n\n## Platform Example Twitter\n\n```python\ntwitter_encoded = stego.encode(\"hello friend this is a perfectly normal conversation\", \"attack at dawn\", replacements=\"\\u200b\\u200c\\u200d\\u2060\")\ntwitter_decoded = stego.decode(twitter_encoded, replacements=\"\\u200b\\u200c\\u200d\\u2060\")\n```\n\nDifferent platforms have different rules for dealing with zero width chars and other unicode nonsense. Twitter for example removes some of the characters we use in our defaults. Some experiments \nshow we can use a different set successfully. When trying to send messages on a new platform \nplay around and see what characters are allowed if the defaults don't work. \n\n\n### Data Capacity \n\nSNOW method for steganography works by inserting new characters at the end of a string and so \ncan encode any amount of data at the cost of increasing the size of the text. Zero width and lookalike steganography require a certain amount of text for data to be encoded. Many platforms limit the number \nof consecutive zero width characters in a text, to evade this our default zw encoding splits the zw \ncharacters into groups of length 4 and inserts them between printable characters. This gives us roughly \n1 byte of encoded data per printable character. For lookalikes the rough formula is 1 byte per 8 substitutable chars.\n\n```python\nfrom pyUnicodeSteganography.lookalikes import capacity \nmy_string = \"hello I am a string I have nothing to fear because I have nothing to hide\"\nbyte_capacity = capacity(my_string)\n```\n\n### Data Corruption \n\nOur zero width encoding method has a couple of limitiations. It cannot properly handle unicode strings \nwhich contain any of the characters it uses as lookalikes. Encoding data into strings which contain \nthese will corrupt the data unpredictably. \n\n### Padded Output\n\nThe lookalikes method also cannot determine where the 'encoded' portion of a \nstring ends if you encode data into a string with more 'capacity' than you use. The returned bytes/string will instead be null padded up to the total capacity of the string you decode. Keep this \nin mind if encoding binary data. \n\n## Using Custom Character Sets\n\nPackage includes defaults for each method for their character set and delimiters (zerowidth and snow) or substitution table\n(lookalikes). The defaults are generally reasonable but there are a lot of cases where you may want to change them. Certain \nzerowidth characters are stripped/blocked on a website, lookalikes for a different language and etc. This can be done by \npassing a list of chars to the named arguments \"replacements\" and \"delimiter\" for zerowidth/snow. Or by passing a dictionary\nof chars and their lookalikes to \"replacements\" for lookalikes.\n\n```python\ncharacter_set = [\"\\u200B\", \"\\u200C\", \"\\u200E\", \"\\u0000\"]\ndelimiter = \"\\u2062\"\nsecret_text = usteg.encode(\"some text\", \"secret\", replacements=character_set, delimiter=delimiter)\nsecret = usteg.decode(secret_text, replacements=character_set, delimiter=delimiter)\n```\n\n```python\nsubstitution_table = {'A':'\\u0391', 'B':'\\u0392', 'C':'\\u03F9'}\nsecret_text = usteg.encode(\"ABC ABC ABC ABC ABC ABC\", \"a\", method=\"lookalike\", replacements=substitution_table)\nsecret = usteg.decode(secret_text, method=\"lookalike\", replacements=substitution_table)\n```\n### Limitations \n\nCurrently zero width only supports a 2 bit encoding method and requires 4 char character set. You may include more but only\nthe first 4 will be used in encoding. Snow only supports a 1 bit encoding and requires 2 chars in its character set. For both snow and zerowidth the delimiter string must be different than the characters used in the character set. \n\n## Encryption\n\nThis package does not include any support for encryption but it's easy enough to send encrypted messages using \nunicode steganography. The following is a simple example of how to do so with a well supported cryptography library. \n\n```python\nimport pyUnicodeSteganography as usteg\nimport nacl.secret\nimport nacl.utils \n\n# create secret key and initialize secret key encryption method\nkey = nacl.utils.random(nacl.secret.SecretBox.KEY_SIZE)\nbox = nacl.secret.SecretBox(key)\n\n# encrypt message and use unicode steganography to hide binary data in text\nmessage = b'encrypted secret'\nciphertext = box.encrypt(message)\nencoded_ciphertext = usteg.encode(\"hello friend\", ciphertext, binary=True)\n\n# extract encoded message and decrypt \nciphertext = usteg.decode(encoded_ciphertext, binary=True)\nplaintext = box.decrypt(ciphertext)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grahamwthompson/pyUnicodeSteganography",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyUnicodeSteganography",
    "package_url": "https://pypi.org/project/pyUnicodeSteganography/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyUnicodeSteganography/",
    "project_urls": {
      "Bug Tracker": "https://github.com/grahamwthompson/pyUnicodeSteganography/issues",
      "Homepage": "https://github.com/grahamwthompson/pyUnicodeSteganography"
    },
    "release_url": "https://pypi.org/project/pyUnicodeSteganography/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Experimental unicode steganography package",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11060250,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f028234253df9e667bf25bdb056876cc0b384e6b53ec9a9b2291839bf42cc8b",
          "md5": "8a39f5ab67bb6b42616dda034ecebe80",
          "sha256": "2695d853ecba4ae76196d4af12b330fd3810abdb043cf9f07b2b00b157909690"
        },
        "downloads": -1,
        "filename": "pyUnicodeSteganography-0.0.1-py3.7.egg",
        "has_sig": false,
        "md5_digest": "8a39f5ab67bb6b42616dda034ecebe80",
        "packagetype": "bdist_egg",
        "python_version": "0.0.1",
        "requires_python": ">=3.6",
        "size": 14909,
        "upload_time": "2021-08-01T00:34:16",
        "upload_time_iso_8601": "2021-08-01T00:34:16.859304Z",
        "url": "https://files.pythonhosted.org/packages/5f/02/8234253df9e667bf25bdb056876cc0b384e6b53ec9a9b2291839bf42cc8b/pyUnicodeSteganography-0.0.1-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53f9e2120595c17070e647712ddcd6919f702082d727cb86bb83ada01638c5b3",
          "md5": "ad7ba364eefca69097d8bfdeb550c5c3",
          "sha256": "226285fceb9ecd6e860b12b8570b9302cbbe83f1639f572a2bb7d50611c5a290"
        },
        "downloads": -1,
        "filename": "pyUnicodeSteganography-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad7ba364eefca69097d8bfdeb550c5c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9229,
        "upload_time": "2021-08-01T00:34:15",
        "upload_time_iso_8601": "2021-08-01T00:34:15.013028Z",
        "url": "https://files.pythonhosted.org/packages/53/f9/e2120595c17070e647712ddcd6919f702082d727cb86bb83ada01638c5b3/pyUnicodeSteganography-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cec36e6455d8b20d72f607da9a9e940ae6362579905f6c6ed7fc30d2c4354521",
          "md5": "d4f8199eb401f480d82f5f4969c62976",
          "sha256": "354869464d2228e12e44dca5a6c2cc8848c9b32719a1f3b1e2d29b0b74087e83"
        },
        "downloads": -1,
        "filename": "pyUnicodeSteganography-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d4f8199eb401f480d82f5f4969c62976",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7347,
        "upload_time": "2021-08-01T00:34:18",
        "upload_time_iso_8601": "2021-08-01T00:34:18.501442Z",
        "url": "https://files.pythonhosted.org/packages/ce/c3/6e6455d8b20d72f607da9a9e940ae6362579905f6c6ed7fc30d2c4354521/pyUnicodeSteganography-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f028234253df9e667bf25bdb056876cc0b384e6b53ec9a9b2291839bf42cc8b",
        "md5": "8a39f5ab67bb6b42616dda034ecebe80",
        "sha256": "2695d853ecba4ae76196d4af12b330fd3810abdb043cf9f07b2b00b157909690"
      },
      "downloads": -1,
      "filename": "pyUnicodeSteganography-0.0.1-py3.7.egg",
      "has_sig": false,
      "md5_digest": "8a39f5ab67bb6b42616dda034ecebe80",
      "packagetype": "bdist_egg",
      "python_version": "0.0.1",
      "requires_python": ">=3.6",
      "size": 14909,
      "upload_time": "2021-08-01T00:34:16",
      "upload_time_iso_8601": "2021-08-01T00:34:16.859304Z",
      "url": "https://files.pythonhosted.org/packages/5f/02/8234253df9e667bf25bdb056876cc0b384e6b53ec9a9b2291839bf42cc8b/pyUnicodeSteganography-0.0.1-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53f9e2120595c17070e647712ddcd6919f702082d727cb86bb83ada01638c5b3",
        "md5": "ad7ba364eefca69097d8bfdeb550c5c3",
        "sha256": "226285fceb9ecd6e860b12b8570b9302cbbe83f1639f572a2bb7d50611c5a290"
      },
      "downloads": -1,
      "filename": "pyUnicodeSteganography-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ad7ba364eefca69097d8bfdeb550c5c3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9229,
      "upload_time": "2021-08-01T00:34:15",
      "upload_time_iso_8601": "2021-08-01T00:34:15.013028Z",
      "url": "https://files.pythonhosted.org/packages/53/f9/e2120595c17070e647712ddcd6919f702082d727cb86bb83ada01638c5b3/pyUnicodeSteganography-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cec36e6455d8b20d72f607da9a9e940ae6362579905f6c6ed7fc30d2c4354521",
        "md5": "d4f8199eb401f480d82f5f4969c62976",
        "sha256": "354869464d2228e12e44dca5a6c2cc8848c9b32719a1f3b1e2d29b0b74087e83"
      },
      "downloads": -1,
      "filename": "pyUnicodeSteganography-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d4f8199eb401f480d82f5f4969c62976",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7347,
      "upload_time": "2021-08-01T00:34:18",
      "upload_time_iso_8601": "2021-08-01T00:34:18.501442Z",
      "url": "https://files.pythonhosted.org/packages/ce/c3/6e6455d8b20d72f607da9a9e940ae6362579905f6c6ed7fc30d2c4354521/pyUnicodeSteganography-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}