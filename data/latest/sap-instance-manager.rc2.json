{
  "info": {
    "author": "SAP SE",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "sap\\_instance\\_manager\n================\n\nPython package for creating and deleting service instances per tenant\nwithin an application at runtime.\n\nOverview\n--------\n\nThis package provides a client for the *Instance Manager* - a component\nthat creates and deletes service instances (via REST API) for a\nspecified key. *Instance Manager* can be used in the context of\nmultitenant applications where the tenant id is the key an instance is\nassociated with.\n\n*Multitenancy* is a concept for sharing resources between several\ndifferent and unrelated to each other groups of users called *tenants*.\nExample: subscriptions to a commercial cloud application can be sold to\ntwo different companies each of which should use the application in\nisolation from the other one. Customizations are also applied\n(e.g. different branding, identity providers, database schemas etc.).\n\nA typical application has access to external resources (e.g. a database\nor messaging) via *services*. If an application is used by different\ntenants, then using a separate service instance for each one will\nimprove isolation since service binding provides access to a particular\nresource.\n\nWith this package a Python application can dynamically create and delete\nservice instances per tenant at runtime. An instance of a *managed\nservice* of the desired type is created first and is then bound to the\napplication. For a HANA database the *managed service* is called\n*‘managed-hana’*. This service binding only provides parameters (HTTP\nendpoints and credentials) which can later be used by the application\nfor creating and deleting service instances of the desired type for each\ntenant.\n\nAPI\n---\n\n\n\n.. code:: python\n\n    from sap import instance_manager\n\n    # create instance manager client\n    client = instance_manager.create(options)\n\n    # create instance\n    instance = client.create('my-tenant')\n    print(instance)\n    # ...\n\n    # get already created instance\n    instance = client.get('my-tenant')\n    print(instance)\n    # ...\n\n    # delete instance\n    client.delete('my-tenant')\n\n\nOptions\n~~~~~~~\n\nThe *managed service* bound to the application (for example\n*managed-hana*) provides credentials as well as REST endpoints of the\n*Instance Manager* - the component that handles creation and deletion of\nservices. These credentials and endpoints are mandatory.\n\nThe create and delete operations are executed asynchronously on server\nside. To provide an easier interface, this library also implements\npolling until an operation is finished. Developers can tune polling via\nsome optional properties.\n\nSince operations involve network activity (thus, can be considered\nrelatively slower) the package also caches the created instances. Cache\noptions can also be provided by developers.\n\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n| Property                      | Mandatory | Type    | Details                                                                                                                       |\n+===============================+===========+=========+===============================================================================================================================+\n| user                          | x         | string  | User for authentication.                                                                                                      |\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n| password                      | x         | string  | Password for the user.                                                                                                        |\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n| post_managed_instance_url     | x         | string  | REST endpoint used for creating a new service instance for a tenant.                                                          |\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n| get_managed_instance_url      | x         | string  | REST endpoint                                                                                                                 |\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n| get_all_managed_instances_url | x         | string  | REST endpoint used for getting details about all instances (for all tenants).                                                 |\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n| delete_managed_instance_url   | x         | string  | REST endpoint used for deletion of a service instance.                                                                        |\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n| polling_interval_millis       |           | integer | States how many milliseconds to wait between requests in the polling phase. Defaults to 300 milliseconds. Minimum value is 0. |\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n| polling_timeout_seconds       |           | integer | Sets a limit for the amount of time (in seconds) that can be spent in polling. Defaults to 120 seconds. Minimum value is 1.   |\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n| cache_max_items               |           | integer | States the capacity of the cache. Default value is 500. Minimum value is 1.                                                   |\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n| cache_item_expire_seconds     |           | integer | Number of seconds after which a cache entry expires. Defaults to 600 seconds. Minimum value is 1.                             |\n+-------------------------------+-----------+---------+-------------------------------------------------------------------------------------------------------------------------------+\n\n\n**Note**:\n\n- A *managed service* binding contains all of the mandatory properties mentioned above.\n\n- It is recommended to have a single instance manager client Python object per *managed service* bound to the application.\n\n\nMethods\n~~~~~~~\n-  ``create(tenant, optional_parameters)`` - creates a service instance\n   for the provided tenant. The method polls until the instance is\n   successfully created. Reports error if an instance for this tenant\n   already exists. The second argument is optional. It is a ``dict``\n   with parameters for provisioning or binding, as would be done with\n   the -c options of the CLI commands ``create-service`` and\n   ``bind-service`` for unmanaged services. E.g.\n\n   .. code:: python\n\n       {\n         \"provisioning_parameters\": { \"database_id\" : \"<HANA Tenant DB Guid or Name>\" },\n         \"binding_parameters\": {\"<key>\" : \"<value>\"}\n       }\n\n-  ``get(tenant)`` - gets the corresponding instance for the provided\n   tenant either from cache or from server. Value of ``None`` means that\n   a service instance for this tenant does not exist. **Note**: this\n   method only polls if the instance is in status\n   ``CREATION_IN_PROGRESS``. In all other cases it returns the service\n   instance as it is on server. Thus, having the ``credentials``\n   property on the ``instance`` object is not guaranteed.\n-  ``get_all()`` - gets the instances for all tenants as array of\n   objects. Filtering of the instances according to their status (e.g.\n   ``CREATION_SUCCEEDED``, ``CREATION_IN_PROGRESS``) does not take\n   place. Thus, having the ``credentials`` property on each of the\n   instances provided is not guaranteed. This method updates the cache.\n-  ``delete(tenant)`` - deletes service instance for the provided\n   tenant. The method polls until the instance is successfully deleted.\n   Reports error if an instance for this tenant does not exists.\n\nWhen a method raises an error and this error is caused by an unexpected\nHTTP response code received from the server, then this error object will\nhave a ``statusCode`` property with the status code of the received HTTP\nresponse.\n\nSSL Certificates\n----------------\n\nWhen the Instance Manager is running on a host with a self-signed\ncertificate, you can use the ``REQUESTS_CA_BUNDLE`` environment variable\nto specify the path to the certificate.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.sap.com/",
    "keywords": "SAP instancemanager",
    "license": "SAP DEVELOPER LICENSE AGREEMENT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sap-instance-manager",
    "package_url": "https://pypi.org/project/sap-instance-manager/",
    "platform": "",
    "project_url": "https://pypi.org/project/sap-instance-manager/",
    "project_urls": {
      "Homepage": "https://www.sap.com/"
    },
    "release_url": "https://pypi.org/project/sap-instance-manager/0.4.2/",
    "requires_dist": [
      "requests (==2.26.0)",
      "jsonschema (==3.2.0)"
    ],
    "requires_python": ">=3.0",
    "summary": "SAP Python instance manager client",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11560607,
  "releases": {
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17e382cbea5e9c22f6012d9dcc102a616ded6bebbdb9932d5edf1eab948f1f64",
          "md5": "81e180fba69cd9f6373bb89053c3175e",
          "sha256": "54ccafed976acc616491e7d62bd7d41a6c19be2f365ed7f3d9fec4953c18f551"
        },
        "downloads": -1,
        "filename": "sap_instance_manager-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81e180fba69cd9f6373bb89053c3175e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 15140,
        "upload_time": "2021-03-24T15:07:03",
        "upload_time_iso_8601": "2021-03-24T15:07:03.627289Z",
        "url": "https://files.pythonhosted.org/packages/17/e3/82cbea5e9c22f6012d9dcc102a616ded6bebbdb9932d5edf1eab948f1f64/sap_instance_manager-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe5d2cce0bd6b1e9f5504b7a4e313dfefaf3f3efd9012f344f62006e4b6663f2",
          "md5": "f0c7df3f2c425ebf491eed3472d6924b",
          "sha256": "ebb5524249fab263b0e48ac1412d31e635ed2f82224dcf7334edcb92ca77237e"
        },
        "downloads": -1,
        "filename": "sap_instance_manager-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0c7df3f2c425ebf491eed3472d6924b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 15150,
        "upload_time": "2021-09-27T13:56:52",
        "upload_time_iso_8601": "2021-09-27T13:56:52.904380Z",
        "url": "https://files.pythonhosted.org/packages/fe/5d/2cce0bd6b1e9f5504b7a4e313dfefaf3f3efd9012f344f62006e4b6663f2/sap_instance_manager-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe5d2cce0bd6b1e9f5504b7a4e313dfefaf3f3efd9012f344f62006e4b6663f2",
        "md5": "f0c7df3f2c425ebf491eed3472d6924b",
        "sha256": "ebb5524249fab263b0e48ac1412d31e635ed2f82224dcf7334edcb92ca77237e"
      },
      "downloads": -1,
      "filename": "sap_instance_manager-0.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f0c7df3f2c425ebf491eed3472d6924b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 15150,
      "upload_time": "2021-09-27T13:56:52",
      "upload_time_iso_8601": "2021-09-27T13:56:52.904380Z",
      "url": "https://files.pythonhosted.org/packages/fe/5d/2cce0bd6b1e9f5504b7a4e313dfefaf3f3efd9012f344f62006e4b6663f2/sap_instance_manager-0.4.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}