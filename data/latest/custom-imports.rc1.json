{
  "info": {
    "author": "Robert Wright",
    "author_email": "madman.bob@hotmail.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# custom_imports\n\nTools to hook into Python's `import` syntax.\n\nThese hooks can allow you to `import` config files,\nmodules written in different languages,\nor even create entirely virtual modules.\n\n## Basic Usage\n\nIncluded in `custom_imports` are some sample importers,\n`json_importer`, `cfg_importer`, `ini_importer`, and `CSVImporter`.\n\nWhen registered, these importers allow you to `import` the corresponding file\ntypes as though they were Python modules.\n\nFor example,\n\n`server_config.ini`\n\n```ini\n[environment]\nserver_name = prod\ndebug = no\n\n[database]\nhost = https://example.com\nport = 27017\nusername = <username>\npassword = <password>\n```\n\n`connections.py`\n\n```python\nimport server_config\n\nif server_config.environment.debug:\n    setup_logging()\n\ndb_client = DatabaseClient(**server_config.database)\n```\n\n## Registration\n\nImporters can be registered with `importer.register()`.\n\n```python\nfrom custom_imports import ini_importer\n\nini_importer.register()\n\nimport server_config\n```\n\nAlternatively, you can use the importer as a context manager:\n\n```python\nwith ini_importer:\n    import server_config\n```\n\nand the importer deregisters itself once the `with` block has been terminated.\n\n## Deregistration\n\nImport hooks modify `sys.meta_path`, which is global, so it's a bad idea to\nleave your importers hanging around if you intend for your code to be used as\npart of a larger project.\n\nFor example, if two modules use different flavors of CSV, then one of them is\ngoing to be unable to import their CSV files.\n\nThankfully, once a module has been imported for the first time, it is stored in\nthe module cache, and so you no longer need the importer.\n\nTo keep your `sys.meta_path` clear, you can deregister an importer once you're\nfinished with it.\nThis can be done either with `importer.deregister()`, or by using the importer\nas a context manager.\n\n## Environment-wide Setup\n\nOn the other hand, it can be ugly needing to have a non-`import` (the importer\nregistration) before an `import` (your custom module type).\n\nIf you *are* the only project needing to use this Python environment, then you\ncan register an importer environment-wide.\nTo do so, create a `custom-imports.pth` file in your environment's\n`site-packages` folder with the following contents:\n\n```pth\nimport custom_imports; custom_imports.ini_importer.register()\n```\n\nFor multiple importers, repeat the entire line, replacing the importer used.\n\nIf your project uses an importer in this way, be sure to include this step in\nyour project's environment setup instructions.\n\n## Reference\n\n### `Finder`\n\nModule `Finder`s search for a module among the various paths available.\nIf it finds a module, it returns a \"locator\" for that module,\nwhich can be any non-`None` Python object that contains all the\ninformation required to immediately locate the module.\nIf it fails to find a module, it returns `None`.\n\nModule `Finder`s do not attempt to construct the module,\nthey only find their locators.\n\nCustom `Finder`s should inherit from `Finder` and override the `find_module_locator` method.\n\nTwo module `Finder`s are provided by default:\n\n#### `SimpleFinder`\n\nA basic Finder class.\n\n```python\nSimpleFinder(\n    locate_module=func,\n)\n```\n\nFinds a module locator by calling `func(fullname, path, target)`.\n\n#### `FileModuleExtensionFinder`\n\nFinder for file based modules by file extensions.\n\nA file based module is a module that is generated from a single file.\n\n```python\nFileModuleExtensionFinder(ext)\n```\n\nThis Finder interprets a module's name as a filename, with extension `ext`.\nParent modules are interpreted as directories.\n\nThis provides a relative path, which is searched for on the standard module\nsearch path. If a file with that relative path is found, then the absolute\n`Path` of that file is returned as its module locator.\n\n### `Loader`\n\nModule `Loader`s take module locators, and construct the module at that location.\n\nCustom `Loader`s should inherit from `Loader` and override the `create_module` and `exec_module` methods.\n\nTwo module `Loader`s are provided by default:\n\n#### `SimpleLoader`\n\nA basic Loader class.\n\n```python\nSimpleLoader(\n    module_type=cls,\n    module_type_kwargs=kwargs,\n    load_module=func,\n)\n```\n\nCreates an empty module by calling the equivalent of `cls(**kwargs)`,\nand executes it by calling `func(module, module_locator)`.\n\n#### `FileModuleLoader`\n\nLoader for file based modules.\n\nA file based module is a module that is generated from a single file.\n\n```python\nFileModuleLoader(\n    module_type=cls,\n    module_type_kwargs=kwargs,\n    read_module=func,\n)\n```\n\nThis Loader takes a `Path` to the file to be loaded as its module locator,\ncreates an empty module by calling the equivalent of `cls(**kwargs)`,\nand executes it by calling `func(module, file)`.\n\nThe file handle passed to `func` is closed after `func` terminates.\n\n### `Importer`\n\nA basic Importer class.\n\n```python\nImporter(\n    finder=finder,\n    loader=loader,\n)\n```\n\nWhen registered, this `Importer` overloads `import` syntax to additionally\nattempt to use `finder` to find modules, and `loader` to load them.\n\nRegister an `Importer` with `importer.register()`.\nDeregister an `Importer` with `importer.deregister()`.\n\nMay also be used as a context manager:\n\n```python\nwith foo_importer:\n    import foo\n```\n\nwith the importer registering itself at the start of the block, and\nderegistering itself at the end.\n\n### Sample importers\n\n#### `json_importer`\n\nWhen registered, imports `.json` files as `dict`s.\n\n#### `cfg_importer`\n\nWhen registered, import `.cfg` files using `ConfigParser`,\nwith attribute notation.\n\n#### `ini_importer`\n\nWhen registered, import `.ini` files using `ConfigParser`,\nwith attribute notation.\n\n#### `CSVImporter`\n\nWhen instantiated and registered, import `.csv` files using the provided CSV reader.\n\n```python\nCSVImporter(\n    csv_reader=csv_reader,\n    csv_reader_kwargs=kwargs,\n)\n```\n\nThis importer loads a module using the result of `csv_reader(file, **kwargs)`.\n\n`csv_reader` should be a CSV reader class (for example, `csv.reader`, or\n`csv.DictReader`).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/madman-bob/python-custom-imports",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "custom-imports",
    "package_url": "https://pypi.org/project/custom-imports/",
    "platform": "",
    "project_url": "https://pypi.org/project/custom-imports/",
    "project_urls": {
      "Homepage": "https://github.com/madman-bob/python-custom-imports"
    },
    "release_url": "https://pypi.org/project/custom-imports/1.0.0/",
    "requires_dist": [
      "more-properties",
      "twine"
    ],
    "requires_python": ">=3.6",
    "summary": "Tools to hook into Python's import syntax",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6979279,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25985b1c86d984b40ca3e2ce2ba7216bd997e6a2bf2aa4fedc6e6f0bf07da1a9",
          "md5": "32c1cfdbb55a9c6a534c8c339d9a98ff",
          "sha256": "cce3245172e05a9d6d2858b338fbc689e3055b2e740338cd5a96e79608ed0351"
        },
        "downloads": -1,
        "filename": "custom_imports-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32c1cfdbb55a9c6a534c8c339d9a98ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13312,
        "upload_time": "2020-04-08T17:15:37",
        "upload_time_iso_8601": "2020-04-08T17:15:37.752727Z",
        "url": "https://files.pythonhosted.org/packages/25/98/5b1c86d984b40ca3e2ce2ba7216bd997e6a2bf2aa4fedc6e6f0bf07da1a9/custom_imports-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2a95c969a7875d63025917724a6a628212d55e980004617fa9e77b646ae8662",
          "md5": "9310a363297b13d1051818524e8a9109",
          "sha256": "cf5bf1365f8f9e4f078020a5a5d0d81f78df8f3f91431c52a0f9785c5890e410"
        },
        "downloads": -1,
        "filename": "custom_imports-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9310a363297b13d1051818524e8a9109",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10096,
        "upload_time": "2020-04-08T17:15:39",
        "upload_time_iso_8601": "2020-04-08T17:15:39.685665Z",
        "url": "https://files.pythonhosted.org/packages/c2/a9/5c969a7875d63025917724a6a628212d55e980004617fa9e77b646ae8662/custom_imports-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25985b1c86d984b40ca3e2ce2ba7216bd997e6a2bf2aa4fedc6e6f0bf07da1a9",
        "md5": "32c1cfdbb55a9c6a534c8c339d9a98ff",
        "sha256": "cce3245172e05a9d6d2858b338fbc689e3055b2e740338cd5a96e79608ed0351"
      },
      "downloads": -1,
      "filename": "custom_imports-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "32c1cfdbb55a9c6a534c8c339d9a98ff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13312,
      "upload_time": "2020-04-08T17:15:37",
      "upload_time_iso_8601": "2020-04-08T17:15:37.752727Z",
      "url": "https://files.pythonhosted.org/packages/25/98/5b1c86d984b40ca3e2ce2ba7216bd997e6a2bf2aa4fedc6e6f0bf07da1a9/custom_imports-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2a95c969a7875d63025917724a6a628212d55e980004617fa9e77b646ae8662",
        "md5": "9310a363297b13d1051818524e8a9109",
        "sha256": "cf5bf1365f8f9e4f078020a5a5d0d81f78df8f3f91431c52a0f9785c5890e410"
      },
      "downloads": -1,
      "filename": "custom_imports-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9310a363297b13d1051818524e8a9109",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10096,
      "upload_time": "2020-04-08T17:15:39",
      "upload_time_iso_8601": "2020-04-08T17:15:39.685665Z",
      "url": "https://files.pythonhosted.org/packages/c2/a9/5c969a7875d63025917724a6a628212d55e980004617fa9e77b646ae8662/custom_imports-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}