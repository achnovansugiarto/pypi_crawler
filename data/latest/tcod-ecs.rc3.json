{
  "info": {
    "author": null,
    "author_email": "Kyle Benesch <4b796c65+github@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# About\n\n[![PyPI](https://img.shields.io/pypi/v/tcod-ec)](https://pypi.org/project/tcod-ecs/)\n[![PyPI - License](https://img.shields.io/pypi/l/tcod-ecs)](https://github.com/HexDecimal/python-tcod-ecs/blob/main/LICENSE)\n[![Documentation Status](https://readthedocs.org/projects/python-tcod-ecs/badge/?version=latest)](https://python-tcod-ecs.readthedocs.io)\n[![codecov](https://codecov.io/gh/HexDecimal/python-tcod-ecs/branch/main/graph/badge.svg?token=4Ak5QpTLZB)](https://codecov.io/gh/HexDecimal/python-tcod-ecs)\n\nThis is an [Entity-component-system](https://en.wikipedia.org/wiki/Entity_component_system) implemented in Python.\nSee the [ECS FAQ](https://github.com/SanderMertens/ecs-faq) for more info.\n\nThis implementation focuses on type-hinting, organization, and is designed to work well with Python.\nThe following features are currently implemented:\n\n- Entities can have store components which are instances of any Python object. Components are looked up by their type.\n- Entities can have one instance of a type, or multiple instances of a type with a string or other hashable to differentiate them.\n- Components can be registered as abstract, allowing a base type to hold subclasses of that component.\n- Entity tags are distinct from components, tags are any hashable Python object rather than empty class.\n- Entity relationships are supported, either as many-to-many or many-to-one relationships.\n- ECS Queries can be made to fetch entities having a combination of components/tags/relations or the absence of such.\n\nA lightweight version which implements only the entity-component framework exists called [tcod-ec](https://pypi.org/project/tcod-ec/).\n\n# Installation\n\nUse pip to install this library:\n```\npip install tcod-ecs\n```\n\nIf `tcod` is installed and the version is less than `14.0.0` then `import tcod.ecs` will fail.\nRemove or update `tcod` to fix this issue.\n\n# Examples\n\n## World\n\n```py\n>>> import tcod.ecs\n>>> world = tcod.ecs.World()  # New empty world.\n\n```\n\n## Entity\n\nNew entities can be created with `World.new_entity`.\nAn entity always knows about its assigned world.\nWorlds only know about their entities once the entity is assigned a name, component, tag, or relation.\nAn entity is identified by its \"Python identity\" rather than with a low-level stand-in identifier.\n\n```py\n\n>>> entity = world.new_entity(name=\"MyEntity\")  # Name is optional and can be any hashable, not just str.\n>>> entity\n<Entity name='MyEntity'>\n>>> entity.world is world  # Worlds can always be accessed from their entity.\nTrue\n>>> world.named[\"MyEntity\"]  # Named entities can be accessed with `World.named`.\n<Entity name='MyEntity'>\n>>> world.named.get(\"Missing\") is None  # `World.named` acts like a dictionary, including assignment and `.get()`.\nTrue\n\n```\n\n## Components\n\nComponents are instances of any Python type.\nThese can be accessed, assigned, or removed from entities via the dict-like `Entity.components` attribute.\nThe type is used as the key to access the component.\nThe types used can be custom classes or standard Python types.\n\n```py\n\n>>> import attrs\n>>> entity = world.new_entity()\n>>> entity.components[int] = 42\n>>> entity.components[int]\n42\n>>> int in entity.components\nTrue\n>>> del entity.components[int]\n>>> entity.components[int]  # Missing keys raise KeyError\nTraceback (most recent call last):\n  ...\nKeyError: <Entity ...>\n>>> entity.components.get(int, \"default\")  # Test keys with `.get()` like a dictionary.\n'default'\n>>> @attrs.define\n... class Vector2:\n...     x: int = 0\n...     y: int = 0\n>>> entity.components[Vector2] = Vector2(1, 2)\n>>> entity.components[Vector2]\nVector2(x=1, y=2)\n>>> entity.components.set(Vector2(3, 4))  # Shorter syntax derives the type from the value when assigning a component.\n>>> entity.components[Vector2]\nVector2(x=3, y=4)\n>>> entity.components.update_values([11, Vector2(0, 0)])  # Multiple values can be assigned without keys.\n>>> entity.components[int]\n11\n>>> entity.components[Vector2]\nVector2(x=0, y=0)\n\n# Queries can be made on all entities of a world with matching components.\n>>> for e in world.Q.all_of(components=[Vector2]):\n...     e.components[Vector2].x += 10\n>>> entity.components[Vector2]\nVector2(x=10, y=0)\n\n# You can match components and iterate over them at the same time.  This can be combined with the above.\n>>> for pos, i in world.Q[Vector2, int]:\n...     print((pos, i))\n(Vector2(x=10, y=0), 11)\n\n# You can include `Entity` to iterate over entities with their components.\n# This always iterates over the entity itself instead of an Entity component.\n>>> for e, pos, i in world.Q[tcod.ecs.Entity, Vector2, int]:\n...     print((e, pos, i))\n(<Entity ...>, Vector2(x=10, y=0), 11)\n\n```\n\n## Named Components\n\nOnly one component can be assigned unless that component is given a unique name.\nYou can name components with the key syntax `(name, type)` when assigning components.\nNames are not limited to strings, and can be any hashable or frozen object.\nThe syntax `[type]` and `[(name, type)]` can be used interchangeably in all places accepting a component key.\nQueries on components access named components with the same syntax and must use names explicitly.\n\n```py\n>>> entity = world.new_entity()\n>>> entity.components[Vector2] = Vector2(0, 0)\n>>> entity.components[(\"velocity\", Vector2)] = Vector2(1, 1)\n>>> entity.components[(\"velocity\", Vector2)]\nVector2(x=1, y=1)\n>>> @attrs.define(frozen=True)\n... class Slot:\n...     index: int\n>>> entity.components.update(  # Like a dict Entity.components has the `.update()` method.\n...     {\n...         (\"hp\", int): 10,\n...         (\"max_hp\", int): 12,\n...         (\"atk\", int): 1,\n...         str: \"foo\",\n...         (Slot(1), str): \"empty\",\n...     }\n... )\n>>> entity.components[(\"hp\", int)]\n10\n>>> entity.components[str]\n'foo'\n>>> entity.components[(Slot(1), str)]\n'empty'\n\n# Queries can be made on all named components with the same syntax as normal ones.\n>>> for e in world.Q.all_of(components=[(\"hp\", int), (\"max_hp\", int)]):\n...     e.components[(\"hp\", int)] = e.components[(\"max_hp\", int)]\n>>> entity.components[(\"hp\", int)]\n12\n>>> for e, pos, delta in world.Q[tcod.ecs.Entity, Vector2, (\"velocity\", Vector2)]:\n...     e.components[Vector2] = Vector2(pos.x + delta.x, pos.y + delta.y)\n>>> entity.components[Vector2]\nVector2(x=1, y=1)\n\n```\n\n## Tags\n\nTags are hashable objects stored in the set-like `Entity.tags`.\nThese are useful as flags or to group entities together.\n\n```py\n>>> entity = world.new_entity()\n>>> entity.tags.add(\"player\")  # Works well for groups\n>>> \"player\" in entity.tags\nTrue\n>>> entity.tags.add((\"eats\", \"fruit\"))\n>>> entity.tags.add((\"eats\", \"meat\"))\n>>> set(world.Q.all_of(tags=[\"player\"])) == {entity}\nTrue\n\n```\n\n## Relations\n\n\n\n```py\n>>> star = world.new_entity()\n>>> planet = world.new_entity()\n>>> moon = world.new_entity()\n>>> ship = world.new_entity()\n>>> player = world.new_entity()\n>>> moon_rock = world.new_entity()\n>>> OrbitOf = \"OrbitOf\"\n>>> LandedOn = \"LandedOn\"\n>>> planet.relations[OrbitOf] = star\n>>> moon.relations[OrbitOf] = planet\n>>> ship.relations[LandedOn] = moon\n>>> moon_rock.relations[LandedOn] = moon\n>>> player.relations[LandedOn] = moon_rock\n>>> set(world.Q.all_of(relations=[(OrbitOf, planet)])) == {moon}\nTrue\n>>> set(world.Q.all_of(relations=[(OrbitOf, None)])) == {planet, moon}\nTrue\n>>> set(world.Q.all_of(relations=[(LandedOn, None)])) == {ship, moon_rock, player}\nTrue\n>>> set(world.Q.all_of(relations=[(LandedOn, None)]).none_of(relations=[(LandedOn, moon)])) == {player}\nTrue\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "tcod-ecs",
    "package_url": "https://pypi.org/project/tcod-ecs/",
    "platform": null,
    "project_url": "https://pypi.org/project/tcod-ecs/",
    "project_urls": {
      "Changelog": "https://github.com/HexDecimal/python-tcod-ecs/blob/main/CHANGELOG.md",
      "Documentation": "https://python-tcod-ecs.readthedocs.io",
      "Home": "https://github.com/HexDecimal",
      "Source": "https://github.com/HexDecimal/python-tcod-ecs"
    },
    "release_url": "https://pypi.org/project/tcod-ecs/0.2.0/",
    "requires_dist": [
      "typing-extensions >=4.4.0",
      "attrs >=22.2.0 ; extra == \"test\"",
      "pytest >=7.2.0 ; extra == \"test\"",
      "pytest-cov >=4.0.0 ; extra == \"test\"",
      "pytest-benchmark >=4.0.0 ; extra == \"test\"",
      "mypy >=1.1.1 ; extra == \"test\""
    ],
    "requires_python": ">=3.8",
    "summary": "A type-hinted Entity Component System based on Python dictionaries and sets.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17490323,
  "releases": {
    "0.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d05c03f92e97e3187649736e3724b5df43c9037e9f45130e9a7bd77093b9c950",
          "md5": "3fadc49cd3ac8adf0a37a8ce68afdcb3",
          "sha256": "2c1bcbf44563d7b97b307eba7190cca9c052fd49bfd7d24b6738391d1644101f"
        },
        "downloads": -1,
        "filename": "tcod_ecs-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3fadc49cd3ac8adf0a37a8ce68afdcb3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 4675,
        "upload_time": "2023-03-25T01:14:09",
        "upload_time_iso_8601": "2023-03-25T01:14:09.936023Z",
        "url": "https://files.pythonhosted.org/packages/d0/5c/03f92e97e3187649736e3724b5df43c9037e9f45130e9a7bd77093b9c950/tcod_ecs-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "3a3f564a4b5de0ec3d115778f37c59810509d9e677e31b21e026b9940818ce4f",
          "md5": "872970d6e105419686704ba0ef9f0bed",
          "sha256": "6108b683f0cc53f69ceb299df5e8853777406426684d0b71f1a91f9dc2f26120"
        },
        "downloads": -1,
        "filename": "tcod-ecs-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "872970d6e105419686704ba0ef9f0bed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12019,
        "upload_time": "2023-03-25T01:14:12",
        "upload_time_iso_8601": "2023-03-25T01:14:12.407464Z",
        "url": "https://files.pythonhosted.org/packages/3a/3f/564a4b5de0ec3d115778f37c59810509d9e677e31b21e026b9940818ce4f/tcod-ecs-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a9fcb095e5c7a72f6d3ca0ed93c28edc657fdb9c7d2322da1527ccf544e24586",
          "md5": "a9851cc23a7c753f711df6982104b732",
          "sha256": "8c8471421f562a17d6052d646d71ed0bd4984e37d037dbecc9f10e122b052455"
        },
        "downloads": -1,
        "filename": "tcod_ecs-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9851cc23a7c753f711df6982104b732",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7474,
        "upload_time": "2023-03-27T01:14:02",
        "upload_time_iso_8601": "2023-03-27T01:14:02.984528Z",
        "url": "https://files.pythonhosted.org/packages/a9/fc/b095e5c7a72f6d3ca0ed93c28edc657fdb9c7d2322da1527ccf544e24586/tcod_ecs-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "998d15627d5aa3698deca4d51f121892961149ae57a0185ecfa9ae2b22cfb434",
          "md5": "a582a91b86f75b1f32cc949185458557",
          "sha256": "265c503adcc2e6575008ca911e4dc6217755cf5fd746433c393ac3dc8f1bd5ee"
        },
        "downloads": -1,
        "filename": "tcod-ecs-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a582a91b86f75b1f32cc949185458557",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15664,
        "upload_time": "2023-03-27T01:14:05",
        "upload_time_iso_8601": "2023-03-27T01:14:05.374572Z",
        "url": "https://files.pythonhosted.org/packages/99/8d/15627d5aa3698deca4d51f121892961149ae57a0185ecfa9ae2b22cfb434/tcod-ecs-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "87b2eed8075ea52129f8ca318bd0dc58e7f93edba2835587fd2b40b16a200339",
          "md5": "eaef3619e0fb434a245b19a10657823d",
          "sha256": "6eb75dde812caffe5edfe741aee5daa6db8928d1a3c182b90f3a79143b0e2ff9"
        },
        "downloads": -1,
        "filename": "tcod_ecs-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eaef3619e0fb434a245b19a10657823d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9831,
        "upload_time": "2023-03-29T07:54:12",
        "upload_time_iso_8601": "2023-03-29T07:54:12.695191Z",
        "url": "https://files.pythonhosted.org/packages/87/b2/eed8075ea52129f8ca318bd0dc58e7f93edba2835587fd2b40b16a200339/tcod_ecs-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "f804f4f64259afaddad20ebbc772435ddcd49adacbbafc08482c0583d646a232",
          "md5": "0ec01e8858b77f1e6cc5ec7cd627dc91",
          "sha256": "f0376bd89f800506d21362705f5b846ee913766ee0346468cace3335c7de7425"
        },
        "downloads": -1,
        "filename": "tcod-ecs-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ec01e8858b77f1e6cc5ec7cd627dc91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 19664,
        "upload_time": "2023-03-29T07:54:15",
        "upload_time_iso_8601": "2023-03-29T07:54:15.211464Z",
        "url": "https://files.pythonhosted.org/packages/f8/04/f4f64259afaddad20ebbc772435ddcd49adacbbafc08482c0583d646a232/tcod-ecs-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "87b2eed8075ea52129f8ca318bd0dc58e7f93edba2835587fd2b40b16a200339",
        "md5": "eaef3619e0fb434a245b19a10657823d",
        "sha256": "6eb75dde812caffe5edfe741aee5daa6db8928d1a3c182b90f3a79143b0e2ff9"
      },
      "downloads": -1,
      "filename": "tcod_ecs-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eaef3619e0fb434a245b19a10657823d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 9831,
      "upload_time": "2023-03-29T07:54:12",
      "upload_time_iso_8601": "2023-03-29T07:54:12.695191Z",
      "url": "https://files.pythonhosted.org/packages/87/b2/eed8075ea52129f8ca318bd0dc58e7f93edba2835587fd2b40b16a200339/tcod_ecs-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "f804f4f64259afaddad20ebbc772435ddcd49adacbbafc08482c0583d646a232",
        "md5": "0ec01e8858b77f1e6cc5ec7cd627dc91",
        "sha256": "f0376bd89f800506d21362705f5b846ee913766ee0346468cace3335c7de7425"
      },
      "downloads": -1,
      "filename": "tcod-ecs-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0ec01e8858b77f1e6cc5ec7cd627dc91",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 19664,
      "upload_time": "2023-03-29T07:54:15",
      "upload_time_iso_8601": "2023-03-29T07:54:15.211464Z",
      "url": "https://files.pythonhosted.org/packages/f8/04/f4f64259afaddad20ebbc772435ddcd49adacbbafc08482c0583d646a232/tcod-ecs-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}