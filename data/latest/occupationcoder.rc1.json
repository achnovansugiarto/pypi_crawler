{
  "info": {
    "author": "Arthur Turrell and Jyldyz Djumalieva",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "===============\noccupationcoder\n===============\n\n\n.. image:: https://img.shields.io/pypi/v/occupationcoder.svg\n        :target: https://pypi.python.org/pypi/occupationcoder\n\n.. image:: https://img.shields.io/travis/aeturrell/occupationcoder.svg\n        :target: https://travis-ci.com/aeturrell/occupationcoder\n\n.. image:: https://readthedocs.org/projects/occupationcoder/badge/?version=latest\n        :target: https://occupationcoder.readthedocs.io/en/latest/?version=latest\n        :alt: Documentation Status\n\n\nA tool to assign standard occupational classification codes to job vacancy descriptions\n---------------------------------------------------------------------------------------\n\nGiven a job title, job description, and job sector the algorithm assigns\na UK 3-digit standard occupational classification (SOC) code to the job.\nThe algorithm uses the **SOC 2010** standard, more details of which can\nbe found on `the ONS'\nwebsite <https://www.ons.gov.uk/methodology/classificationsandstandards/standardoccupationalclassificationsoc/soc2010>`__.\n\nThis code originally written by Jyldyz Djumalieva, `Arthur\nTurrell <http://aeturrell.github.io/home>`__, David Copple, James\nThurgood, and Bradley Speigner. If you use this code please cite:\n\nTurrell, A., Speigner, B., Djumalieva, J., Copple, D., & Thurgood, J.\n(2019). `Transforming Naturally Occurring Text Data Into Economic\nStatistics: The Case of Online Job Vacancy\nPostings <https://www.nber.org/papers/w25837>`__ (No. w25837). National\nBureau of Economic Research.\n\n::\n\n    @techreport{turrell2019transforming,\n      title={Transforming naturally occurring text data into economic statistics: The case of online job vacancy postings},\n      author={Turrell, Arthur and Speigner, Bradley and Djumalieva, Jyldyz and Copple, David and Thurgood, James},\n      year={2019},\n      institution={National Bureau of Economic Research}\n    }\n\n* Documentation: https://occupationcoder.readthedocs.io.\n\nPre-requisites\n~~~~~~~~~~~~~~\n\nSee `setup.py` for a full list of Python packages.\n\noccupationcoder is built on top of `NLTK <http://www.nltk.org/>`__ and\nuses 'Wordnet' (a corpora, number 82 on their list) and the Punkt\nTokenizer Models (number 106 on their list). When the coder is run, it\nwill expect to find these in their usual directories. If you have nltk\ninstalled, you can get them corpora using ``nltk.download()`` which will\ninstall them in the right directories or you can go to\n`http://www.nltk.org/nltk_data/ <http://www.nltk.org/nltk_data/>`__ to\ndownload them manually (and follow the install instructions).\n\nA couple of the other packages, such as\n`fuzzywuzzy <https://github.com/seatgeek/fuzzywuzzy>`__ do not come\nwith the Anaconda distribution of Python. You can install these via pip\n(if you have access to the internet) or download the relevant binaries\nand install them manually.\n\nFile and folder description\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  ``occupationcoder/coder`` applies SOC codes to job descriptions\n-  ``occupationcoder/createdictionaries`` turns the ONS' index of SOC\n   code into dictionaries used by ``occupationcoder/coder``\n-  ``occupationcoder/dictionaries`` contains the dictionaries used by\n   ``occupationcoder/coder``\n-  ``occupationcoder/outputs`` is the default output directory\n-  ``occupationcoder/testvacancies`` contains 'test' vacancies to run\n   the code on\n-  ``occupationcoder/utilities`` contains helper functions which mostly\n   manipulate strings\n\nInstallation via terminal using pip\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDownload the package and navigate to the download directory. Then use\n\n.. code-block:: shell\n\n    python setup.py sdist\n    cd dist\n    pip install occupationcoder-version.tar.gz\n\nThe first line creates the .tar.gz file, the second navigates to the\ndirectory with the packaged code in, and the third line installs the\npackage. The version number to use will be evident from the name of the\n.tar.gz file.\n\nRunning the code as a python script\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nImporting, and creating an instance, of the coder\n\n.. code-block:: python\n\n    import pandas as pd\n    from occupationcoder.coder import coder\n    myCoder = coder.Coder()\n\nTo run the code on a single job, use the following syntax with the\n``codejobrow(job_title,job_description,job_sector)`` method:\n\n.. code-block:: python\n\n    if __name__ == '__main__':\n        myCoder.codejobrow('Physicist','Calculations of the universe','Professional scientific')\n\nThe ``if`` statement is required because the code is parallelised. Note\nthat you can leave some of the fields blank and the algorithm will still\nreturn a SOC code.\n\nTo run the code on a file (eg csv name 'job\\_file.csv') with structure\n\n+--------------+-------------------------------------------------------------------------------------------------------------------+---------------------------------------------------+\n| job\\_title   | job\\_description                                                                                                  | job\\_sector                                       |\n+==============+===================================================================================================================+===================================================+\n| Physicist    | Make calculations about the universe, do research, perform experiments and understand the physical environment.   | Professional, scientific & technical activities   |\n+--------------+-------------------------------------------------------------------------------------------------------------------+---------------------------------------------------+\n\nuse\n\n.. code-block:: python\n\n    df = pd.read_csv('path/to/foo.csv')\n    df = myCoder.codedataframe(df)\n\nThis will return a new dataframe with SOC code entries appended in a new\ncolumn:\n\n+--------------+-------------------------------------------------------------------------------------------------------------------+---------------------------------------------------+-------------+\n| job\\_title   | job\\_description                                                                                                  | job\\_sector                                       | SOC\\_code   |\n+==============+===================================================================================================================+===================================================+=============+\n| Physicist    | Make calculations about the universe, do research, perform experiments and understand the physical environment.   | Professional, scientific & technical activities   | 211         |\n+--------------+-------------------------------------------------------------------------------------------------------------------+---------------------------------------------------+-------------+\n\nRunning the code from the command line\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you have all the relevant packages in requirements.txt, download the\ncode and navigate to the occupationcoder folder (which contains the\nREADME). Then run\n\n.. code-block:: shell\n\n    python -m occupationcoder.coder.coder path/to/foo.csv\n\nThis will create a 'processed\\_jobs.csv' file in the outputs/ folder\nwhich has the original text and an extra 'SOC\\_code' column with the\nassigned SOC codes.\n\nTesting\n~~~~~~~\n\nTo run the tests in your virtual environment, use\n\n.. code-block:: shell\n\n    python -m unittest\n\nin the top level occupationcoder directory. Look in ``test_occupationcoder.py`` for what is run and examples of use. The output appears in the 'processed\\_jobs.csv' file in the outputs/\nfolder.\n\nAcknowledgements\n~~~~~~~~~~~~~~~~\n\nWe are very grateful to Emmet Cassidy for testing this algorithm.\n\nDisclaimer\n~~~~~~~~~~\n\nThis code is provided 'as is'. We would love it if you made it better or\nextended it to work for other countries. All views expressed are our\npersonal views, not those of any employer.\n\n\nCredits\n-------\n\nThe development of this package was supported by the Bank of England.\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n\n=======\nHistory\n=======\n\n0.2.0 (2021-04-15)\n------------------\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aeturrell/occupationcoder",
    "keywords": "occupationcoder",
    "license": "Custom",
    "maintainer": "",
    "maintainer_email": "",
    "name": "occupationcoder",
    "package_url": "https://pypi.org/project/occupationcoder/",
    "platform": "",
    "project_url": "https://pypi.org/project/occupationcoder/",
    "project_urls": {
      "Homepage": "https://github.com/aeturrell/occupationcoder"
    },
    "release_url": "https://pypi.org/project/occupationcoder/0.2.0/",
    "requires_dist": [
      "pandas",
      "scikit-learn",
      "nltk",
      "dask",
      "beautifulsoup4"
    ],
    "requires_python": ">=3.5",
    "summary": "A tool to use job text, such as job description, to assign standard occupational classification codes.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10077120,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b9a9de1a880b0ecb2f674a114956f2e12a4dbc6aea0e15765694b04a172cf58",
          "md5": "66ea7f90a6e85f5725f4e5506c82d432",
          "sha256": "7fe5180b4656fc7aeda14fc1a729ccbafbba010f76240dc0afbd32d983e5ec8c"
        },
        "downloads": -1,
        "filename": "occupationcoder-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66ea7f90a6e85f5725f4e5506c82d432",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 1718340,
        "upload_time": "2021-04-15T20:07:51",
        "upload_time_iso_8601": "2021-04-15T20:07:51.889202Z",
        "url": "https://files.pythonhosted.org/packages/8b/9a/9de1a880b0ecb2f674a114956f2e12a4dbc6aea0e15765694b04a172cf58/occupationcoder-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "061ca9eeec10ffb81d7298cccd89dca0f761ef8d7a004c5588e87ed47a031f5e",
          "md5": "8fccc78acdc178ba7f086d7388262b48",
          "sha256": "aa977219c2b6da9a9e38d581b344c320dbfca15470f6e869a467e8459f8e07e1"
        },
        "downloads": -1,
        "filename": "occupationcoder-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8fccc78acdc178ba7f086d7388262b48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 1717504,
        "upload_time": "2021-04-15T20:07:56",
        "upload_time_iso_8601": "2021-04-15T20:07:56.776116Z",
        "url": "https://files.pythonhosted.org/packages/06/1c/a9eeec10ffb81d7298cccd89dca0f761ef8d7a004c5588e87ed47a031f5e/occupationcoder-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b9a9de1a880b0ecb2f674a114956f2e12a4dbc6aea0e15765694b04a172cf58",
        "md5": "66ea7f90a6e85f5725f4e5506c82d432",
        "sha256": "7fe5180b4656fc7aeda14fc1a729ccbafbba010f76240dc0afbd32d983e5ec8c"
      },
      "downloads": -1,
      "filename": "occupationcoder-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66ea7f90a6e85f5725f4e5506c82d432",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 1718340,
      "upload_time": "2021-04-15T20:07:51",
      "upload_time_iso_8601": "2021-04-15T20:07:51.889202Z",
      "url": "https://files.pythonhosted.org/packages/8b/9a/9de1a880b0ecb2f674a114956f2e12a4dbc6aea0e15765694b04a172cf58/occupationcoder-0.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "061ca9eeec10ffb81d7298cccd89dca0f761ef8d7a004c5588e87ed47a031f5e",
        "md5": "8fccc78acdc178ba7f086d7388262b48",
        "sha256": "aa977219c2b6da9a9e38d581b344c320dbfca15470f6e869a467e8459f8e07e1"
      },
      "downloads": -1,
      "filename": "occupationcoder-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8fccc78acdc178ba7f086d7388262b48",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 1717504,
      "upload_time": "2021-04-15T20:07:56",
      "upload_time_iso_8601": "2021-04-15T20:07:56.776116Z",
      "url": "https://files.pythonhosted.org/packages/06/1c/a9eeec10ffb81d7298cccd89dca0f761ef8d7a004c5588e87ed47a031f5e/occupationcoder-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}