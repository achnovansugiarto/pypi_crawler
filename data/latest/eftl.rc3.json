{
  "info": {
    "author": "TIBCO Software Inc.",
    "author_email": "support@tibco.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "## API Overview\nThe TIBCO eFTL API is a compact version of the TIBCO FTL API, small enough for mobile applications and browser applications. It includes everything you need to exchange messages, and it omits everything else.\n\n## Functionality\nPrograms use the API for these operations:\n\n* Connecting to an eFTL service\n* Publishing messages (one-to-many)\n* Subscribing to messages (one-to-many) and filtering with content matchers\n* Constructing and unpacking messages\n\n## Asynchronous Callback Architecture\nAPI calls return quickly, which reflects a requirement of mobile device applications. All API calls that depend on a TIBCO eFTL service are asynchronous. When the service responds, the TIBCO eFTL library invokes a user-defined callback method.\n\n## Message Data Types\nThe field data types within eFTL messages are similar to those in FTL messages, except that eFTL messages do not support inbox types.\n\nHowever, the field data types within eFTL messages are not similar to those in EMS messages. For details of message translation, see “Message Translation: TIBCO eFTL and TIBCO EMS” in TIBCO eFTL Concepts (https://docs.tibco.com/pub/eftl/6.8.0/doc/pdf/TIB_eftl_6.8.0_concepts.pdf).\n\n## Installation\nThe eFTL python library is hosted on PyPI and can be installed with `pip3 install eftl`\n\n## Documentation\nhttps://docs.tibco.com/pub/eftl/6.8.0/doc/html/api-reference/python/connection.html\n\n## Prerequisites\nPlease make sure that you have the FTL Server running with an eFTL service.\nBy default, the following sample programs assume that server is running at localhost:8585.\n\nFor more information, see \nhttps://docs.tibco.com/products/tibco-ftl-enterprise-edition-6-8-0 (FTL), and\nhttps://docs.tibco.com/products/tibco-eftl-enterprise-edition-6-8-0 (eFTL).\n\n## Sample Programs\n\n# Publisher\n\nA publisher could look like this:\n\n```\nimport asyncio\nimport getopt, sys, time\nimport datetime\nfrom messaging.eftl.connection import Eftl\n\nuser       = \"user\"\npassword   = \"password\"\nurl        = \"ws://localhost:8585/channel\"\nconnection = None\nloop       = None\nsendCount  = 10\nrate       = 1\neFTL       = Eftl()\nerror      = False\nsent       = 0\n\ndef usage():\n    print (usage_lines)\n    sys.exit(0)\n\nusage_lines = \"\"\"\n        Usage: python3 publisher.py [options] url\n        Options:\n        \\t-user        <str>    Username for authentication\n        \\t-password    <str>    Password for authentication\n        \\t-count       <int>    Number of message to publish\n        \\t-rate        <int>    Number of message per second\n      \"\"\"\n\ndef parseArgs(argv):\n    count = len(argv)\n    i = 1\n\n    while i < count:\n        if (argv[i].lower() == '-user'):\n            global user\n            user = argv[i+1]\n        elif (argv[i].lower() == \"-password\"):\n            global password\n            password = argv[i+1]\n        elif (argv[i].lower() == \"-count\"):\n            global sendCount\n            sendCount = int(argv[i+1])\n        elif (argv[i].lower() == \"-rate\"):\n            global rate\n            rate = int(argv[i+1])\n        elif (argv[i].lower() == \"-help\") or (argv[i].lower() == \"-h\"):\n            usage()\n        else:\n           global url\n           url = argv[i]\n\n        i += 1\n\n# internal disconnect function\nasync def _disconnect():\n    global connection\n\n    if connection.is_connected():\n        await connection.disconnect()\n\nasync def on_publish_complete(message):\n    global sent\n    print(\"Successfully Sent message [%s]: {%s}\" % (sent, message))\n    sent += 1\n\n    if sent == sendCount:\n        done = True\n        print(\"Total messages sent: %s\" % sent)\n\n        if connection.is_connected():\n            await _disconnect()\n\nasync def on_publish_error(message, code, reason):\n    print(\"Failed to send message: %s, code: %s, reason: %s\" %(message, code, reason))\n\n    if connection.is_connected():\n        await _disconnect()\n\n\n# connection callback on_connect called on a successful connect\nasync def on_connect(connection):\n    print(\"Connected to eFTL server: %s\" % url)\n\n# connection callback on_reconnect \nasync def on_reconnect(connection):\n    print(\"Reconnect attempt: \")\n\n# connection callback on_error called if an error on the connection \nasync def on_error(connection, code, reason):\n    global error\n    print(\"Connection error [%s], reason %s\" %(code, reason))\n    error = True\n\n# connection callback on_disconnect called upon a disconnect from eFTL\nasync def on_disconnect(connection, loop, code, reason):\n    print(\"Disconnected [%s]: %s\" %(code, reason))\n\n    loop.stop()\n\nasync def run():\n    global connection\n    global sendCount\n\n    try:\n        # connect to the eftl \n        connection = await eFTL.connect(url,\n                                    user=user,\n                                    password=password,\n                                    trust_all=True,\n                                    event_loop=loop,\n                                    on_connect=on_connect,\n                                    on_reconnect=on_reconnect,\n                                    on_disconnect=on_disconnect,\n                                    on_error=on_error)\n\n        for i in range(sendCount):\n            msg = connection.create_message()\n            msg.set_string(\"type\", \"hello\")\n            msg.set_string(\"text\", \"This is a sample eFTL message\")\n            msg.set_long(\"long\", i)\n            msg.set_datetime(\"time\", datetime.datetime.now())\n\n            await connection.publish(msg,\n                                     on_complete=on_publish_complete,\n                                     on_error=on_publish_error)\n\n            if rate > 0:\n                await asyncio.sleep(float(1/rate))\n            else:\n                await asyncio.sleep(1)\n\n    finally:\n        print(\"Done..\")\n\ndef cleanup():\n    global loop\n    global connection\n\n    for task in asyncio.Task.all_tasks():\n        task.cancel()\n\n    if connection.is_connected():\n        loop.run_until_complete(_disconnect())\n\n    loop.stop()\n    loop.close()\n\ndef main(argv):\n    errors = None\n    global loop\n\n    parseArgs(argv)\n\n    try:\n        loop = asyncio.get_event_loop();\n        loop.run_until_complete(run())\n        loop.run_forever()\n    except (EOFError, KeyboardInterrupt):\n        print(\"Disconnected from eFTL server: %s\" % url)\n    except Exception as err:\n        errors = True\n    finally:\n           cleanup()\n           if errors:\n               sys.exit(1)\n           else:\n               sys.exit(0)\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n\n```\n\n# Subscriber\n\nA sample subscriber would like :\n\n```\nimport asyncio\nimport getopt, sys, time\nimport datetime\nimport threading\nfrom messaging.eftl.connection import Eftl\n\nuser       = \"user\"\npassword   = \"password\"\nurl        = \"ws://localhost:8585/channel\"\nconnection = None\nloop       = None\neFTL       = Eftl()\nerror      = False\nclientId   = \"sample-python-client\"\nreceived   = 0\ndurName    = \"sample-durable\"\nclientAck  = False\nackMode    = \"auto\"\ntimer      = None\nsubscriberId = None\n\ndef usage():\n    print (usage_lines)\n    sys.exit(0)\n\nusage_lines = \"\"\"\n        Usage: python3 subscriber.py [options] url\n        Options:\n        \\t-user        <str>    Username for authentication\n        \\t-password    <str>    Password for authentication\n        \\t-clientId    <str>    unique client id\n        \\t-name        <str>    durable name\n        \\t-clientAcknowledge    Flag to indicate that client ack\n      \"\"\"\n\ndef parseArgs(argv):\n    count = len(argv)\n    i = 1\n\n    while i < count:\n        if (argv[i].lower() == '-user'):\n            global user\n            user = argv[i+1]\n        elif (argv[i].lower() == \"-password\"):\n            global password\n            password = argv[i+1]\n        elif (argv[i].lower() == \"-clientid\"):\n            global clientId\n            clientId = argv[i+1]\n        elif (argv[i].lower() == \"-name\"):\n            global durName\n            durName = argv[i+1]\n        elif (argv[i].lower() == \"-clientacknowledge\"):\n            global clientAck\n            clientAck = True\n        elif (argv[i].lower() == \"-help\") or (argv[i].lower() == \"-h\"):\n            usage()\n        else:\n           global url\n           url = argv[i]\n\n        i += 1\n\n\n# internal disconnect function\nasync def _disconnect():\n    global connection\n\n    if connection.is_connected():\n        await connection.disconnect()\n\n\nasync def _unsubscribe(id):\n    global connection\n\n    await connection.unsubscribe(id)\n\n\ndef on_recv_timeout():\n    global timer\n    global subscriberId\n    event_loop = None\n\n    event_loop = asyncio.new_event_loop()\n\n    timer.cancel()\n    event_loop.run_until_complete(_unsubscribe(subscriberId))\n    event_loop.run_until_complete(_disconnect())\n\nasync def on_subscribe(id):\n    global timer\n    global subscriberId\n\n    subscriberId = id\n    print(\"Successfully subscribed to receive messages\")\n\n    timer = threading.Timer(30.0, on_recv_timeout)\n    timer.start()\n\nasync def on_subscribe_error(code, reason):\n    print(\"Failed to subscribe, code: %s, reason: %s\" %(code, reason))\n\n    if connection.is_connected():\n        await _disconnect()\n\nasync def on_message(message):\n    global received\n    global clientAck\n\n    print(\"Received message: [%s] %s\" %(received, message))\n    received += 1\n\n    # if client ack mode, then acknowledge the message\n    if clientAck and message is not None:\n        await connection.acknowledge(message)\n\n\n# on_connect callback called on a successful connect\nasync def on_connect(connection):\n    global clientAck\n    global ackMode\n    print(\"Connected to eFTL server: %s\" % url)\n\n    if clientAck:\n        ackMode = \"client\"\n\n    # subscribe to the matcher, once connected\n    matcher = \"{\\\"type\\\":\\\"hello\\\"}\"\n    await connection.subscribe(matcher=matcher,\n                              ack=ackMode,\n                              durable=durName,\n                              on_subscribe=on_subscribe,\n                              on_error=on_subscribe_error,\n                              on_message=on_message)\n\n# on_reconnect callback\nasync def on_reconnect(connection):\n    print(\"Reconnect attempt: \")\n\n# on_error callback called if an error on the connection \nasync def on_error(connection, code, reason):\n    global error\n    print(\"Connection error [%s], reason %s\" %(code, reason))\n    error = True\n\n# on_disconnect callback called upon a disconnect from eFTL\nasync def on_disconnect(connection, loop, code, reason):\n    print(\"Disconnected [%s]: %s\" %(code, reason))\n\n    loop.stop()\n\nasync def run():\n    global connection\n    global sendCount\n    global clientId\n\n    try:\n        # connect to the eftl \n        connection = await eFTL.connect(url,\n                                    user=user,\n                                    password=password,\n                                    client_id=clientId,\n                                    trust_all=True,\n                                    event_loop=loop,\n                                    on_connect=on_connect,\n                                    on_reconnect=on_reconnect,\n                                    on_disconnect=on_disconnect,\n                                    on_error=on_error)\n\n    finally:\n        print(\"Waiting for messages..\")\n\ndef cleanup():\n    global loop\n    global connection\n    global subscriberId\n\n    if connection.is_connected():\n        loop.run_until_complete(_disconnect())\n\n    loop.stop()\n    loop.close()\n\ndef main(argv):\n    errors = None\n    global loop\n\n    parseArgs(argv)\n\n    try:\n        loop = asyncio.get_event_loop();\n        loop.run_until_complete(run())\n        loop.run_forever()\n    except (EOFError, KeyboardInterrupt):\n        print(\"Disconnected from eFTL server: %s\" % url)\n    except Exception as err:\n        errors = True\n    finally:\n           cleanup()\n           if errors:\n               sys.exit(1)\n           else:\n               sys.exit(0)\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n```\n\n# Key/Value map\n\nYou may also create a key/value map associated with your EftlConnection. Once created, you can get, set, and remove key/value mappings:\n\nFollowing is the sample to set key/value pair:\n\n```\nimport asyncio\nimport getopt, sys, time\nimport datetime\nfrom messaging.eftl.connection import Eftl\n\nuser       = \"user\"\npassword   = \"password\"\nmapName    = \"sample_map\"\nkeyName    = \"key1\"\nurl        = \"ws://localhost:8585/map\"\nconnection = None\nloop       = None\ntext       = \"This is sample eFTL text\"\neFTL       = Eftl()\n\ndef usage():\n    print (usage_lines)\n    sys.exit(0)\n\nusage_lines = \"\"\"\n        Usage: python3 kvset.py [options] url\n        Options:\n        \\t-user        <str>    Username for authentication\n        \\t-password    <str>    Password for authentication\n        \\t-map         <str>    Map name where we want to the key-value to be stored\n        \\t-key         <str>    The name of the key\n        \\t-text        <str>    The value associated with the key\n      \"\"\"\n\ndef parseArgs(argv):\n    count = len(argv)\n    i = 1\n\n    while i < count:\n        if (argv[i].lower() == '-user'):\n            global user\n            user = argv[i+1]\n        elif (argv[i].lower() == \"-password\"):\n            global password\n            password = argv[i+1]\n        elif (argv[i].lower() == \"-map\"):\n            global mapName\n            mapName = argv[i+1]\n        elif (argv[i].lower() == \"-key\"):\n            global keyName\n            keyName = argv[i+1]\n        elif (argv[i].lower() == \"-text\"):\n            global text\n            text = argv[i+1]\n        elif (argv[i].lower() == \"-help\") or (argv[i].lower() == \"-h\"):\n            usage()\n        else:\n           global url\n           url = argv[i]\n\n        i += 1\n\n# internal disconnect function\nasync def _disconnect():\n    global connection\n\n    if connection.is_connected():\n        await connection.disconnect()\n\n# on_success callback invoked an a successful get\nasync def on_success_set_key(message,key):\n    print(\"Sucess setting key-value pair %s = %s\" % (key, message))\n\n    #Asynchronously disconnect from the eFTL.\n    if connection.is_connected():\n        await _disconnect()\n\n# on_error_map_get callback invoked if get fails\nasync def on_error_map_set(key, message, code, reason):\n    print(\"Error setting key-value pair: %s\\n\", reason);\n\n    #Asynchronously disconnect from the eFTL.\n    cleanup()\n\n# on_connect callback called on a successful connect\nasync def on_connect(connection):\n    print(\"Connected to eFTL server: %s\" % url)\n\n# on_reconnect callback\nasync def on_reconnect(connection):\n    print(\"Reconnect attempt: \")\n\n# on_error callback called if an error on the connection \nasync def on_error(connection, code, reason):\n    print(\"Connection error [%s], reason %s\" %(code, reason))\n\n# on_disconnect callback called upon a disconnect from eFTL\nasync def on_disconnect(connection, loop, code, reason):\n    print(\"Disconnected [%s]: %s\" %(code, reason))\n    loop.stop()\n\nasync def run():\n    global connection\n\n    try:\n        # connect to the eftl \n        connection = await eFTL.connect(url,\n                                    user=user,\n                                    password=password,\n                                    trust_all=True,\n                                    event_loop=loop,\n                                    on_connect=on_connect,\n                                    on_reconnect=on_reconnect,\n                                    on_disconnect=on_disconnect,\n                                    on_error=on_error)\n\n        # create the map\n        map = await connection.create_kv_map(mapName)\n\n        msg = connection.create_message()\n        msg.set_string(\"text\", text)\n        msg.set_long(\"long\", 101)\n        msg.set_datetime(\"time\", datetime.datetime.now())\n\n        # set the key-value pair in the map object\n        await map.set(keyName,\n                      msg,\n                      on_success=on_success_set_key,\n                      on_error=on_error_map_set)\n    finally:\n        print(\"Done..\")\n\ndef cleanup():\n    global loop\n    global connection\n\n    if connection.is_connected():\n        loop.run_until_complete(_disconnect())\n\n    loop.stop()\n    loop.close()\n\ndef main(argv):\n    errors = None\n    global loop\n\n    parseArgs(argv)\n\n    try:\n        loop = asyncio.get_event_loop();\n        loop.run_until_complete(run())\n        loop.run_forever()\n    except (EOFError, KeyboardInterrupt):\n        print(\"Disconnected from eFTL server: %s\" % url)\n    except Exception as err:\n        errors = True\n    finally:\n           cleanup()\n           if errors:\n               sys.exit(1)\n           else:\n               sys.exit(0)\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n \n```\n\nSample to get key/value pair:\n\n```\nimport asyncio\nimport getopt, sys, time\nfrom messaging.eftl.connection import Eftl\n\nuser       = \"user\"\npassword   = \"password\"\nmapName    = \"sample_map\"\nkeyName    = \"key1\"\nurl        = \"ws://localhost:8585/map\"\nconnection = None\nloop       = None\neFTL       = Eftl()\nerror      = False\n\ndef usage():\n    print (usage_lines)\n    sys.exit(0)\n\nusage_lines = \"\"\"\n        Usage: python3 kvget.py [options] url\n        Options:\n        \\t-user        <str>    Username for authentication\n        \\t-password    <str>    Password for authentication\n        \\t-map         <str>    Map name from which to retrieve the key\n        \\t-key         <str>    The key's value to be retrieved\n      \"\"\"\n\ndef parseArgs(argv):\n    count = len(argv)\n    i = 1\n\n    while i < count:\n        if (argv[i].lower() == '-user'):\n            global user\n            user = argv[i+1]\n        elif (argv[i].lower() == \"-password\"):\n            global password\n            password = argv[i+1]\n        elif (argv[i].lower() == \"-map\"):\n            global mapName\n            mapName = argv[i+1]\n        elif (argv[i].lower() == \"-key\"):\n            global keyName\n            keyName = argv[i+1]\n        elif (argv[i].lower() == \"-help\") or (argv[i].lower() == \"-h\"):\n            usage()\n        else:\n           global url\n           url = argv[i]\n\n        i += 1\n\n# internal disconnect function\nasync def _disconnect():\n    global connection\n\n    if connection.is_connected():\n        await connection.disconnect()\n\n# on_success callback invoked an a successful get\nasync def on_success_get_key(message,key):\n\n    if message is not None:\n        print(\"Get map='%s' key='%s' value=%s\" % (mapName, key, message))\n    else:\n        print(\"Get map='%s' key='%s' value=null\" % (mapName, key))\n\n    #cleanup connection.\n    await _disconnect()\n\n# on_error_map_get callback invoked if get fails\nasync def on_error_map_get(message, code, reason, key):\n    global error\n\n    print(\"Error getting key-value pair: %s\\n\", reason);\n\n    #Asynchronously disconnect from the eFTL.\n    error = True\n    cleanup()\n\n# on_connect callback called on a successful connect\nasync def on_connect(connection):\n    global map\n    print(\"Connected to eFTL server: %s\" % url)\n\n    # create the map\n    map = await connection.create_kv_map(mapName)\n\n    await map.get(keyName,\n                  on_success=on_success_get_key,\n                  on_error=on_error_map_get)\n\n# on_reconnect callback\nasync def on_reconnect(connection):\n    print(\"Reconnect attempt: \")\n\n# on_error callback\nasync def on_error(connection, code, reason):\n    global error\n    print(\"Connection error [%s], reason %s\" %(code, reason))\n    error = True\n\n# on_disconnect callback called upon a disconnect from eFTL\nasync def on_disconnect(connection, loop, code, reason):\n    print(\"Disconnected [%s]: %s\" %(code, reason))\n    loop.stop()\n\nasync def run():\n    global connection\n\n    try:\n        # connect to the eftl \n        connection = await eFTL.connect(url,\n                                    user=user,\n                                    password=password,\n                                    trust_all=True,\n                                    event_loop=loop,\n                                    on_connect=on_connect,\n                                    on_reconnect=on_reconnect,\n                                    on_disconnect=on_disconnect,\n                                    on_error=on_error)\n    finally:\n        print(\"Waiting to get key-value from map..\")\n\ndef cleanup():\n    global loop\n    global connection\n\n    if connection.is_connected():\n        loop.run_until_complete(_disconnect())\n\n    loop.stop()\n    loop.close()\n\ndef main(argv):\n    errors = None\n    global loop\n\n    # parse args\n    parseArgs(argv)\n\n    try:\n        loop = asyncio.get_event_loop();\n        loop.run_until_complete(run())\n        loop.run_forever()\n    except (EOFError, KeyboardInterrupt):\n        print(\"Disconnected from eFTL server: %s\" % url)\n    except Exception as err:\n        errors = True\n    finally:\n           cleanup()\n           if errors:\n               sys.exit(1)\n           else:\n               sys.exit(0)\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n\n\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.tibco.com",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eftl",
    "package_url": "https://pypi.org/project/eftl/",
    "platform": null,
    "project_url": "https://pypi.org/project/eftl/",
    "project_urls": {
      "Homepage": "https://www.tibco.com"
    },
    "release_url": "https://pypi.org/project/eftl/1.2.0/",
    "requires_dist": [
      "asyncio",
      "datetime",
      "jsonpickle",
      "autobahn",
      "pyOpenSSL",
      "service-identity"
    ],
    "requires_python": "",
    "summary": "TIBCO eFTL client for Python",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13784579,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "767fd3c6fbdf4d251be05ada05d068acabb18052d1d38a2b9249815acd4b4205",
          "md5": "b4b27cf08e2e08530cd2d7421a4e1c30",
          "sha256": "ae5dd0f7b9b59ab32d8a98b7970030abd728c3ab39f967d9721cb432669ec3c3"
        },
        "downloads": -1,
        "filename": "eftl-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4b27cf08e2e08530cd2d7421a4e1c30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21935,
        "upload_time": "2020-12-03T17:19:51",
        "upload_time_iso_8601": "2020-12-03T17:19:51.203915Z",
        "url": "https://files.pythonhosted.org/packages/76/7f/d3c6fbdf4d251be05ada05d068acabb18052d1d38a2b9249815acd4b4205/eftl-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a08a0815fb5ef96d660616e8b35d5af1ff886c8289ff771e32e7568cb07654ac",
          "md5": "63d0a8e7be69555f485ade4b248d9bf2",
          "sha256": "fff2ae6a45dde814c6d183d7c7b91ef8090cdfa87bd1c1afeb8eca456e8bd756"
        },
        "downloads": -1,
        "filename": "eftl-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63d0a8e7be69555f485ade4b248d9bf2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21912,
        "upload_time": "2021-06-03T21:14:06",
        "upload_time_iso_8601": "2021-06-03T21:14:06.886254Z",
        "url": "https://files.pythonhosted.org/packages/a0/8a/0815fb5ef96d660616e8b35d5af1ff886c8289ff771e32e7568cb07654ac/eftl-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ccc7d93ab0fc1dab05382632803723a654d348ee57cb2714879b4ddc6624b82",
          "md5": "b3d603a815672d0ba6012ac285d07efc",
          "sha256": "c1286376e80ad6e86460e825b7254c487bc5a32d3fb3ec16e7aa1daa66766974"
        },
        "downloads": -1,
        "filename": "eftl-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3d603a815672d0ba6012ac285d07efc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22209,
        "upload_time": "2022-05-11T17:05:41",
        "upload_time_iso_8601": "2022-05-11T17:05:41.375452Z",
        "url": "https://files.pythonhosted.org/packages/9c/cc/7d93ab0fc1dab05382632803723a654d348ee57cb2714879b4ddc6624b82/eftl-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ccc7d93ab0fc1dab05382632803723a654d348ee57cb2714879b4ddc6624b82",
        "md5": "b3d603a815672d0ba6012ac285d07efc",
        "sha256": "c1286376e80ad6e86460e825b7254c487bc5a32d3fb3ec16e7aa1daa66766974"
      },
      "downloads": -1,
      "filename": "eftl-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3d603a815672d0ba6012ac285d07efc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22209,
      "upload_time": "2022-05-11T17:05:41",
      "upload_time_iso_8601": "2022-05-11T17:05:41.375452Z",
      "url": "https://files.pythonhosted.org/packages/9c/cc/7d93ab0fc1dab05382632803723a654d348ee57cb2714879b4ddc6624b82/eftl-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}