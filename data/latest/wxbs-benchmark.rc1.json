{
  "info": {
    "author": "Dmytro Mishkin",
    "author_email": "ducha.aiki@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# wxbs_benchmark\n> This package implements two evaluation protocols for thw WxBS dataset: PCK for correpondence estimates, and recal on ground truth correspondences given the estimated fundamental matrix\n\n\n## Install\n\n`pip install wxbs_benchmark`\n\n## How to use\n\nI will show you how to benchmark a simple baseline of OpenCV SIFT + MAGSAC++ below.\n\n```python\nimport numpy as np\nimport cv2\nimport kornia.feature as KF\nimport torch\nfrom kornia_moons.feature import *\nfrom tqdm import tqdm\nfrom wxbs_benchmark.dataset import *\nfrom wxbs_benchmark.evaluation import *\nimport matplotlib.pyplot as plt\n\n\ndef estimate_F_SIFT(img1, img2):\n    det = cv2.SIFT_create(8000, contrastThreshold=-10000, edgeThreshold=10000)\n    kps1, descs1 = det.detectAndCompute(img1, None)\n    kps2, descs2 = det.detectAndCompute(img2, None)\n    snn_ratio, idxs = KF.match_snn(torch.from_numpy(descs1),\n                           torch.from_numpy(descs2), 0.9)\n    tentatives = cv2_matches_from_kornia(snn_ratio, idxs)\n    src_pts = np.float32([ kps1[m.queryIdx].pt for m in tentatives ]).reshape(-1,2)\n    dst_pts = np.float32([ kps2[m.trainIdx].pt for m in tentatives ]).reshape(-1,2)\n    F, _ = cv2.findFundamentalMat(src_pts, dst_pts, cv2.USAC_MAGSAC, 0.25, 0.999, 100000)\n    return F\n\ndef estimate_F_SIFT_HardNet(img1, img2):\n    det = cv2.SIFT_create(8000, contrastThreshold=-10000, edgeThreshold=10000)\n    kps1, descs1 = det.detectAndCompute(img1, None)\n    kps2, descs2 = det.detectAndCompute(img2, None)\n    snn_ratio, idxs = KF.match_snn(torch.from_numpy(descs1),\n                           torch.from_numpy(descs2), 0.9)\n    tentatives = cv2_matches_from_kornia(snn_ratio, idxs)\n    src_pts = np.float32([ kps1[m.queryIdx].pt for m in tentatives ]).reshape(-1,2)\n    dst_pts = np.float32([ kps2[m.trainIdx].pt for m in tentatives ]).reshape(-1,2)\n    F, _ = cv2.findFundamentalMat(src_pts, dst_pts, cv2.USAC_MAGSAC, 0.25, 0.999, 100000)\n    return F\n\n\nFs = []\nsubset = 'test'\ndset = WxBSDataset('.WxBS', subset=subset, download=True)\nfor pair_dict in tqdm(dset):\n    Fs.append(estimate_F_SIFT(pair_dict['img1'],\n                         pair_dict['img2']))\nresult_dict, thresholds = evaluate_Fs(Fs, subset)\n\n```\n\n    /opt/homebrew/Caskroom/miniforge/base/envs/python39/lib/python3.9/site-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n      and should_run_async(code)\n    100%|██████████| 32/32 [00:12<00:00,  2.65it/s]\n\n\n\n![png](https://raw.githubusercontent.com/ducha-aiki/wxbs_benchmark/master/docs/images/output_4_1.png)\n\n\n```python\n\nplt.figure()\nplt.plot(thresholds, result_dict['average'], '-x')\nplt.ylim([0,1.05])\nplt.xlabel('Thresholds')\nplt.ylabel('Recall on GT corrs')\nplt.grid(True)\nplt.legend(['SIFT + MAGSAC++'])\n\n```\n\n    /opt/homebrew/Caskroom/miniforge/base/envs/python39/lib/python3.9/site-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n      and should_run_async(code)\n\n\n\n\n\n    <matplotlib.legend.Legend at 0x16e382b50>\n\n\n\n\n![png](https://raw.githubusercontent.com/ducha-aiki/wxbs_benchmark/master/docs/images/output_5_2.png)\n\n\nWe can also check per-image-pair results\n\n```python\nplt.figure(figsize=(10,10))\nplt.ylim([0,1.05])\nplt.xlabel('Thresholds')\nplt.ylabel('Recall on GT corrs')\nplt.grid(True)\n\n\nfor img_pair, recall in result_dict.items():\n    plt.plot(thresholds, recall, '-x', label=img_pair)\n\nplt.legend()\n\n```\n\n    /opt/homebrew/Caskroom/miniforge/base/envs/python39/lib/python3.9/site-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n      and should_run_async(code)\n\n\n\n\n\n    <matplotlib.legend.Legend at 0x173e39820>\n\n\n\n\n![png](https://raw.githubusercontent.com/ducha-aiki/wxbs_benchmark/master/docs/images/output_7_2.png)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ducha-aiki/wxbs_benchmark/tree/master/",
    "keywords": "WxBS,image matching,benchmark,image correspondences",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wxbs-benchmark",
    "package_url": "https://pypi.org/project/wxbs-benchmark/",
    "platform": "",
    "project_url": "https://pypi.org/project/wxbs-benchmark/",
    "project_urls": {
      "Homepage": "https://github.com/ducha-aiki/wxbs_benchmark/tree/master/"
    },
    "release_url": "https://pypi.org/project/wxbs-benchmark/0.0.1/",
    "requires_dist": [
      "pip",
      "packaging",
      "kornia",
      "torch",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "Code for benchmarking image matchers on WxBS dataset",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11016006,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edf31998c902d999ea8b1f6d99e72bdf7b17af119fa4a308228093dde06d14a2",
          "md5": "b632d99b500d0cc07cec3de30576fcc1",
          "sha256": "434e872fe2deebb031a13a40e362b7ec0c4448c1c0a74cacc4884cf942597270"
        },
        "downloads": -1,
        "filename": "wxbs_benchmark-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b632d99b500d0cc07cec3de30576fcc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10687,
        "upload_time": "2021-07-27T14:00:24",
        "upload_time_iso_8601": "2021-07-27T14:00:24.573689Z",
        "url": "https://files.pythonhosted.org/packages/ed/f3/1998c902d999ea8b1f6d99e72bdf7b17af119fa4a308228093dde06d14a2/wxbs_benchmark-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f750c81784e6b17f65392300aae8463497f62ce1288ac34409bf6fc699d590b",
          "md5": "20fea243cc682f0b3f14cc913731795b",
          "sha256": "27107bac85482e19888eef6c76ba6d07d7b2d692aae066b7dee8b682b9d1581c"
        },
        "downloads": -1,
        "filename": "wxbs_benchmark-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "20fea243cc682f0b3f14cc913731795b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13906,
        "upload_time": "2021-07-27T14:00:25",
        "upload_time_iso_8601": "2021-07-27T14:00:25.950794Z",
        "url": "https://files.pythonhosted.org/packages/1f/75/0c81784e6b17f65392300aae8463497f62ce1288ac34409bf6fc699d590b/wxbs_benchmark-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edf31998c902d999ea8b1f6d99e72bdf7b17af119fa4a308228093dde06d14a2",
        "md5": "b632d99b500d0cc07cec3de30576fcc1",
        "sha256": "434e872fe2deebb031a13a40e362b7ec0c4448c1c0a74cacc4884cf942597270"
      },
      "downloads": -1,
      "filename": "wxbs_benchmark-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b632d99b500d0cc07cec3de30576fcc1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10687,
      "upload_time": "2021-07-27T14:00:24",
      "upload_time_iso_8601": "2021-07-27T14:00:24.573689Z",
      "url": "https://files.pythonhosted.org/packages/ed/f3/1998c902d999ea8b1f6d99e72bdf7b17af119fa4a308228093dde06d14a2/wxbs_benchmark-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f750c81784e6b17f65392300aae8463497f62ce1288ac34409bf6fc699d590b",
        "md5": "20fea243cc682f0b3f14cc913731795b",
        "sha256": "27107bac85482e19888eef6c76ba6d07d7b2d692aae066b7dee8b682b9d1581c"
      },
      "downloads": -1,
      "filename": "wxbs_benchmark-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "20fea243cc682f0b3f14cc913731795b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13906,
      "upload_time": "2021-07-27T14:00:25",
      "upload_time_iso_8601": "2021-07-27T14:00:25.950794Z",
      "url": "https://files.pythonhosted.org/packages/1f/75/0c81784e6b17f65392300aae8463497f62ce1288ac34409bf6fc699d590b/wxbs_benchmark-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}