{
  "info": {
    "author": "lffelmann",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# complexNumbers\r\n\r\nUse complex numbers in python.\r\n\r\n## 1 Initial Complex\r\n\r\n```\r\nz = Complex(value)\r\n```\r\n\r\nvalue can be 5 different datatypes:\r\n\r\n- `int`\r\n- `float`\r\n- `complex`\r\n- `str`\r\n- `Complex`\r\n\r\n### 1.1 `int, float`\r\n\r\nThey are used when a real number should be become a complex number. (no imaginary part)\r\n\r\n### 1.2 `complex`\r\n\r\nStandard complex numbers also can be initialed. (e.g.: `1+1j`)\r\n\r\n### 1.3 `str`\r\n\r\nWith a string there can be entered complex numbers in the cartesian and polar form.\r\n\r\n#### 1.3.1 cartesian form\r\n\r\nshould be entered like this: `\"x+yj\"`\r\n\r\n#### 1.3.2 polar form\r\n\r\nModulus and argument are separated by `e^`. (e.g.: `1e^1`)\r\n\r\n### 1.4 `Complex`\r\n\r\nValue can also be the same type as the own class.\r\n\r\n## 2 Variables\r\n\r\nThe class has following `__self__` variables.\r\n\r\n- `real`: real part of the cartesian form\r\n- `imaginary`: imaginary part of the cartesian form\r\n- `modulus`: modulus of the polar form\r\n- `argument`: argument of the polar form in the range [0; 2Pi[\r\n\r\n## 3 Methods\r\n\r\nThe class can be used with the following methods:\r\n\r\n- `__add__ , __radd__ , __iadd__` equals `+ , +=`\r\n- `__sub__ , __rsub__ , __isub__` equals `- , -=`\r\n- `__mul__ , __rmul__ , __imul__` equals `* , *=`\r\n- `__truediv__ , __rtruediv__ , __itruediv__` equals `/ , /=`\r\n- `__pow__` equals `**` ***ATTENTION:*** only real numbers can be used as `power` and when used to get a root only one\r\n  solution returns.\r\n- `__eq__` equals `==`\r\n- `__ne__` equals `!=`\r\n- `__abs__` equals `abs()` returns the modulus\r\n- `__str__` equals `str()` returns the number in cartesian form (e.g.: `\"1+1j\"`)\r\n- `root(n)` returns a list with all possible roots of the complex number. `n` is the power of the root (e.g.: n = 2 ...\r\n  square root)\r\n\r\n## 4 Example\r\n\r\n```\r\n>>> a = Complex(\"1+1j\")\r\n>>> b = Complex(\"1e^1\")\r\n>>> print(a.modulus)\r\n1.4142135623730951\r\n>>> print(a.argument)\r\n0.7853981633974483\r\n>>> print(b.real)\r\n0.5403023058681398\r\n>>> print(b.imaginary)\r\n0.8414709848078965\r\n>>> print(a+b)\r\n1.5403023058681398+1.8414709848078965j\r\n>>> print(a-b)\r\n0.45969769413186023+0.1585290151921035j\r\n>>> print(a*b)\r\n-0.30116867893975674+1.3817732906760363j\r\n>>> print(a/b)\r\n1.3817732906760363-0.30116867893975674j\r\n>>> print(a**2)\r\n1.2246467991473535e-16+2.0000000000000004j\r\n>>> print(b**0.5)\r\n0.8775825618903728+0.479425538604203j\r\n>>> print(b.root())\r\n[0.8775825618903728+0.479425538604203j, -0.8775825618903728-0.4794255386042029j]\r\n>>> print(abs(b)\r\n1.0\r\n>>> print(a == a)\r\nTrue\r\n>>> print(a != b)\r\nTrue\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lffelmann/complexNumbers",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "complexNumbers",
    "package_url": "https://pypi.org/project/complexNumbers/",
    "platform": null,
    "project_url": "https://pypi.org/project/complexNumbers/",
    "project_urls": {
      "Homepage": "https://github.com/lffelmann/complexNumbers"
    },
    "release_url": "https://pypi.org/project/complexNumbers/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15933080,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3a42e1543a02c7130df82a95908633adb2a3cf98ecc130c1ce6214744ec0254",
          "md5": "751bea3cb71aee01a6b5144eb6e8ab63",
          "sha256": "534e2efa5a862bfbb72d3d656838d234c3fd6b36f3e4bd40cc632f6b02c33e16"
        },
        "downloads": -1,
        "filename": "complexNumbers-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "751bea3cb71aee01a6b5144eb6e8ab63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 3086,
        "upload_time": "2022-11-29T21:06:13",
        "upload_time_iso_8601": "2022-11-29T21:06:13.112951Z",
        "url": "https://files.pythonhosted.org/packages/e3/a4/2e1543a02c7130df82a95908633adb2a3cf98ecc130c1ce6214744ec0254/complexNumbers-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36f84278091eeaf0c3998372992f2fe20dde4438bb7cb42c788a74f20f633279",
          "md5": "217a83dfde0beb6ee7d9b684b4a1c3f3",
          "sha256": "4eb71a47bd13571354b091895e75c6bf5c79dd157ee9610197ba1235df3f1cc9"
        },
        "downloads": -1,
        "filename": "complexNumbers-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "217a83dfde0beb6ee7d9b684b4a1c3f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 3081,
        "upload_time": "2022-11-29T21:06:14",
        "upload_time_iso_8601": "2022-11-29T21:06:14.870886Z",
        "url": "https://files.pythonhosted.org/packages/36/f8/4278091eeaf0c3998372992f2fe20dde4438bb7cb42c788a74f20f633279/complexNumbers-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3a42e1543a02c7130df82a95908633adb2a3cf98ecc130c1ce6214744ec0254",
        "md5": "751bea3cb71aee01a6b5144eb6e8ab63",
        "sha256": "534e2efa5a862bfbb72d3d656838d234c3fd6b36f3e4bd40cc632f6b02c33e16"
      },
      "downloads": -1,
      "filename": "complexNumbers-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "751bea3cb71aee01a6b5144eb6e8ab63",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 3086,
      "upload_time": "2022-11-29T21:06:13",
      "upload_time_iso_8601": "2022-11-29T21:06:13.112951Z",
      "url": "https://files.pythonhosted.org/packages/e3/a4/2e1543a02c7130df82a95908633adb2a3cf98ecc130c1ce6214744ec0254/complexNumbers-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36f84278091eeaf0c3998372992f2fe20dde4438bb7cb42c788a74f20f633279",
        "md5": "217a83dfde0beb6ee7d9b684b4a1c3f3",
        "sha256": "4eb71a47bd13571354b091895e75c6bf5c79dd157ee9610197ba1235df3f1cc9"
      },
      "downloads": -1,
      "filename": "complexNumbers-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "217a83dfde0beb6ee7d9b684b4a1c3f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 3081,
      "upload_time": "2022-11-29T21:06:14",
      "upload_time_iso_8601": "2022-11-29T21:06:14.870886Z",
      "url": "https://files.pythonhosted.org/packages/36/f8/4278091eeaf0c3998372992f2fe20dde4438bb7cb42c788a74f20f633279/complexNumbers-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}