{
  "info": {
    "author": "Elielson Barbosa",
    "author_email": "elielsonbr.com@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# JogoDaVelha\nEste é um pacote de jogo da velha desenvolvido em python utilizando conceitos de orientação a objetos.\n\n# Sumário\n\n1. [INSTALAÇÃO](#1-instalao)\n\n    1.1. [Como baixar o jogo em pacote via pip](#11-como-baixar-o-jogo-em-pacote-via-pip)\n\n    1.2. [Como baixar/clonar o projeto completo do github](#12-como-baixarclonar-o-projeto-completo-do-github)\n\n2. [CRIANDO SEU JOGO](#2-criando-seu-jogo)\n\n    2.1. [Jogador vs Jogador](#21-jogador-vs-jogador)\n\n    2.2. [Jogador vs CPU](#22-jogador-vs-cpu)\n\n    2.3. [CPU vs CPU](#23-cpu-vs-cpu-)\n\n3. [RODANDO JOGO PRONTO](#3-rodando-jogo-pronto)\n\n# 1. INSTALAÇÃO\n\n## 1.1. Como baixar o jogo em pacote via pip.\nPara instalar a biblioteca via gerenciador de pacotes basta rodar o comando abaixo em seu terminal:\n\n    pip install JogoDaVelha-Elielson68\n\nE então a biblioteca principal estará disponível para você montar seu jogo a seu estilo.\nAbaixo em  <b>Criando seu jogo</b> há mais explicações sobre.\n\n## 1.2. Como baixar/clonar o projeto completo do github.\n\nCaso deseje clonar o projeto todo com um jogo pronto incluso, rode o comando:\n\n    git clone https://github.com/Elielson68/JogoDaVelha.git\n\nPara baixar o arquivo .zip basta acessar <a href=\"https://github.com/Elielson68/JogoDaVelha/archive/master.zip\">https://github.com/Elielson68/JogoDaVelha/archive/master.zip</a>.\n\n# 2 CRIANDO SEU JOGO\n\nEsta biblioteca permite você criar o jogo para ser jogado tanto jogador vs jogador, jogador vs CPU e também CPU vs CPU. Abaixo os passos a passos de como criar cada tipo de jogo.\n\n## 2.1. Jogador vs Jogador\n\nCaso você tenha instalado o pacote via gerenciador de pacotes pode iniciar direto do passo abaixo. Caso tenha baixado ou clonado, antes de iniciar o passo abaixo você deve criar um arquivo .py na pasta JogoDaVelha e então pode continuar seguindo os passos indicados.\n\n### 2.1.1. Criando objetos.\n\nPrimeiro importe o pacote tabuleiro e jogador para seu arquivo python.\n\n```python\nfrom Tabuleiro.tabuleiro import Tabuleiro\nfrom Tabuleiro.jogador import Jogador\n```\n\nFeitas as importações você pode criar os objetos Tabuleiro e Jogador.\n\n```python\ntabuleiro_velha = Tabuleiro()\njogador_1 = Jogador(\"Player 1\", \"X\")\njogador_2 = Jogador(\"Player 2\", \"O\")\n```  \n\nVocê pode substituir os valores \"Player 1\" e \"Player 2\" por outro valor que achar ser mais adequado. O mesmo equivale para os símbolos \"X\" e \"O\".\n\n### 2.1.2. Inserindo jogadores no tabuleiro.\n\nApós ter criado os jogadores, agora você deve inserir os mesmos no tabuleiro.\n\nPara isso utilize o método <b>setJogadores()</b>\n\n```python\ntabuleiro_velha.setJogadores(jogador_1)\ntabuleiro_velha.setJogadores(jogador_2)\n```\n\n## 2.1.3. Mostrando o tabuleiro.\n\nPara mostrar o tabuleiro basta chamar o método <b>MostrarTabuleiro()</b> do nosso objeto tabuleiro_velha.\n\n```python\nprint(tabuleiro_velha.MostrarTabuleiro())\n``` \n\nAparecerá algo deste tipo:\n\n             1       2       3\n    A: \t[-]\t[-]\t[-]\t\n    B: \t[-]\t[-]\t[-]\t\n    C: \t[-]\t[-]\t[-]\t\n\n## 2.1.4. Realizando jogadas.\n\nCom os jogadores no tabuleiro e com o tabuleiro sendo impresso, agora basta fazer a jogada.\n\nPara fazer uma jogada basta indicar a linha, que são representadas pelas letras A, B e C. E logo em seguida indicar a coluna, representadas pelos números: 1,2 e 3.\n\nUsamos o método <b>setJogada()</b> do nosso objeto tabuleiro_velha para isso.\n\n```python\ntabuleiro_velha.setJogada(\"A1\")\n```\n\nO resultado se imprimirmos o tabuleiro novamente será algo deste tipo:\n\n```python\nprint(tabuleiro_velha.MostrarTabuleiro())\n```\n\n     \t 1\t 2\t 3\n    A: \t[X]\t[-]\t[-]\t\n    B: \t[-]\t[-]\t[-]\t\n    C: \t[-]\t[-]\t[-]\n\n## 2.1.5. Mostrando a vez de quem deve jogar.\n\nA cada jogada realizada o tabuleiro irá revezar de jogador_1 para jogador_2. Se for de seu agrado mostrar de quem é a vez basta utlizar o método <b>getNomeJogadorDaVez()</b>\n\n```python\nprint(tabuleiro_velha.getNomeJogadorDaVez())\n```\n\n## 2.1.6. Vericando vitória de jogador.\n\nA cada jogada realizada é possível verificar se houve algum ganhador. Para realizar a verificação basta utilizar o método <b>isGanhador()</b> que retorna se a última jogada realizada resultou na vitória do jogador da vez passada.\n\n```python\nprint(tabuleiro_velha.isGanhador())\n```\n\n## 2.1.7. Verificando se há casas disponíveis.\n\nPara verificar se ainda há casas disponíveis para jogar basta utilizar o método <b>isCasasDisponiveis()</b> que retorna 'True' se há casas disponíveis e 'False' se não há.\n\n```python\nprint(tabuleiro_velha.isCasasDisponiveis())\n```\n\n## 2.1.8. Definindo a vez de quem começa.\n\nVocê pode escolher a vez de quem começa, por padrão o jogo sempre irá começar pelo primeiro jogador inserido no tabuleiro, para trocar quem inicia basta utilizar dois métodos que são <b>setVez()</b> e <b>RevezarVez()</b>.\n\n```python\ntabuleiro_velha.setVez(RevezarVez())\n```\n\n## 2.1.9. Código de jogo simples\n\nAbaixo um código simples utilizando os passos anteriores.\n\n```python\nfrom Tabuleiro.tabuleiro import Tabuleiro\nfrom Tabuleiro.jogador import Jogador\ntabuleiro_velha = Tabuleiro()\njogador_1 = Jogador(\"Player 1\", \"X\")\njogador_2 = Jogador(\"Player 2\", \"O\")\ntabuleiro_velha.setJogadores(jogador_1)\ntabuleiro_velha.setJogadores(jogador_2)\nwhile True: \n    print(tabuleiro_velha.MostrarTabuleiro())\n    if tabuleiro_velha.isGanhador(): #A cada jogada realizada será verificado se houve um ganhador\n        tabuleiro_velha.setVez(tabuleiro_velha.RevezarVez()) #Como o ganhador foi o último jogador, então é necessário revezar a vez para o último jogador.\n        print(\"O ganhador é \", tabuleiro_velha.getNomeJogadorDaVez())\n        break\n    if not tabuleiro_velha.isCasasDisponiveis(): #Se ninguém tiver ganho, então é verificado se o tabuleiro ainda possui casas disponíveis.\n        print(\"Não houve ganhadores! Empate!\")\n        break\n    print(\"Vez dê \", tabuleiro_velha.getNomeJogadorDaVez())\n        jogada = input(\"Digite sua jogada: \")\n        tabuleiro_velha.setJogada(jogada)\n```\n\n## 2.2. Jogador vs CPU\n\nOs passos para desenvolver jogador vs CPU são os mesmos que para jogador vs jogador, as únicas diferenças são apenas na hora de inserir os jogadores no tabuleiro e de inserir jogadas.\n\n### 2.2.1. Inserindo jogador e CPU no tabuleiro\n\nComo agora você deve inserir uma CPU ao invés do jogador_2, você deve importar a classe CPU do pacote Tabuleiro e então criar o objeto CPU e então inserir no tabuleiro_velha para isso utilize o código abaixo:\n\n```python\nfrom Tabuleiro.tabuleiro import Tabuleiro\nfrom Tabuleiro.jogador import Jogador\nfrom Tabuleiro.cpu import CPU\ntabuleiro_velha = Tabuleiro()\njogador_1 = Jogador(\"Player 1\", \"X\")\nCPU = CPU()\ntabuleiro_velha.setJogadores(jogador_1)\ntabuleiro_velha.setJogadores(CPU)\n```\n\n### 2.2.2. Verificando a vez de quem deve jogar\n\nAgora iremos verificar se a vez de quem deve jogar é do jogador_1 ou da CPU. Para isso utilizaremos uma condição simples em que ela verificará se o nome de quem tá jogando é do jogador_1 ou da CPU. Caso seja do jogador_1 então o programa pedirá para ele inserir sua jogada, caso seja da CPU a jogada será aleatória.\n\nPara verificarmos o nome de quem está jogando, utilizaremos o método <b>getNomeJogadorDaVez()</b> do objeto tabuleiro_velha.\n\n```python\njogada = \"\"\nif tabuleiro_velha.getNomeJogadorDaVez() == jogador_1.getNome():\n    jogada = input(\"Digite sua jogada: \")\n```\n\n### 2.2.3. Gerando jogada da CPU\n\nA CPU possui o método <b>getMovimentoCPU()</b> que retorna um número aleatório de 0 a 8, representando os 9 valores possíveis no tabuleiro. O tabuleiro possui o método <b>getListKeysDecodificador()</b> que retorna uma lista com todas as casas no formato: \"A1\", \"A2\" etc. Desta forma, para obter a jogada da CPU teremos o código abaixo:\n\n```python\njogada = \"\"\nif tabuleiro_velha.getNomeJogadorDaVez() == jogador_1.getNome():\n    jogada = input(\"Digite sua jogada: \")\nelse:\n    movimento_CPU = CPU.getMovimentoCPU()\n    jogada = tabuleiro_velha.getListKeysDecodificador()[movimento_CPU]\n```\n\n### 2.2.4. Código de Jogador vs CPU\n\nPor fim, basta inserir essa última parte do jogo no código e teremos o resultado abaixo:\n\n```python\nfrom Tabuleiro.tabuleiro import Tabuleiro\nfrom Tabuleiro.jogador import Jogador\nfrom Tabuleiro.cpu import CPU\ntabuleiro_velha = Tabuleiro()\njogador_1 = Jogador(\"Player 1\", \"X\")\nCPU = CPU()\ntabuleiro_velha.setJogadores(jogador_1)\ntabuleiro_velha.setJogadores(CPU)\n\nwhile True: \n    print(tabuleiro_velha.MostrarTabuleiro())\n    if tabuleiro_velha.isGanhador(): #A cada jogada realizada será verificado se houve um ganhador\n        tabuleiro_velha.setVez(tabuleiro_velha.RevezarVez()) #Como o ganhador foi o último jogador, então é necessário revezar a vez para o último jogador.\n        print(\"O ganhador é \", tabuleiro_velha.getNomeJogadorDaVez())\n        break\n    if not tabuleiro_velha.isCasasDisponiveis(): #Se ninguém tiver ganho, então é verificado se o tabuleiro ainda possui casas disponíveis.\n        print(\"Não houve ganhadores! Empate!\")\n        break\n    print(\"Vez dê \", tabuleiro_velha.getNomeJogadorDaVez())\n    jogada = \"\"\n    if tabuleiro_velha.getNomeJogadorDaVez() == jogador_1.getNome():\n        jogada = input(\"Digite sua jogada: \")\n    else:\n        movimento_CPU = CPU.getMovimentoCPU()\n        jogada = tabuleiro_velha.getListKeysDecodificador()[movimento_CPU]\n    tabuleiro_velha.setJogada(jogada)\n```\n\n## 2.3. CPU vs CPU 🤖\n\nOs passos para fazer um jogo de CPU vs CPU são os mesmos anteriores, alterando somente os jogadores a serem inseridos e a vez de quem deve jogar.\n\n### 2.3.1. Importando e criando as CPU's.\n\nSerá necessário importar as CPU's, criar os objetos delas e então inserir elas no tabuleiro como jogadoras.\n\n```python\nfrom Tabuleiro.tabuleiro import Tabuleiro\nfrom Tabuleiro.cpu import CPU\ntabuleiro_velha = Tabuleiro()\nCPU_1 = CPU(\"CPU 1\", \"X\")\nCPU_2 = CPU(\"CPU 2\", \"O\")\ntabuleiro_velha.setJogadores(CPU_1)\ntabuleiro_velha.setJogadores(CPU_2)\n```\n\n### 2.3.2. Definindo jogadas das CPU's\n\nAgora basta verificar se é a vez da CPU_1 ou da CPU_2 e então definir a jogada de ambas.\n\n```python\nmovimento_CPU = 0\njogada = \"\"\nif tabuleiro_velha.getNomeJogadorDaVez() == CPU_1:\n    movimento_CPU = CPU_1.getMovimentoCPU()\nelse:\n    movimento_CPU = CPU_2.getMovimentoCPU()\njogada = tabuleiro_velha.getListKeysDecodificador()[movimento_CPU]\n```\n\n### 2.3.3. Código de CPU vs CPU\n\nSubstituindo agora a forma de definir a jogada nos códigos anteriores, teremos o resultado abaixo:\n\n```python\nfrom Tabuleiro.tabuleiro import Tabuleiro\nfrom Tabuleiro.cpu import CPU\ntabuleiro_velha = Tabuleiro()\nCPU_1 = CPU(\"CPU 1\", \"X\")\nCPU_2 = CPU(\"CPU 2\", \"O\")\ntabuleiro_velha.setJogadores(CPU_1)\ntabuleiro_velha.setJogadores(CPU_2)\nwhile True: \n    print(tabuleiro_velha.MostrarTabuleiro())\n    if tabuleiro_velha.isGanhador(): #A cada jogada realizada será verificado se houve um ganhador\n        tabuleiro_velha.setVez(tabuleiro_velha.RevezarVez()) #Como o ganhador foi o último jogador, então é necessário revezar a vez para o último jogador.\n        print(\"O ganhador é \", tabuleiro_velha.getNomeJogadorDaVez())\n        break\n    if not tabuleiro_velha.isCasasDisponiveis(): #Se ninguém tiver ganho, então é verificado se o tabuleiro ainda possui casas disponíveis.\n        print(\"Não houve ganhadores! Empate!\")\n        break\n    print(\"Vez dê \", tabuleiro_velha.getNomeJogadorDaVez())\n    movimento_CPU = 0\n    jogada = \"\"\n    if tabuleiro_velha.getNomeJogadorDaVez() == CPU_1:\n        movimento_CPU = CPU_1.getMovimentoCPU()\n    else:\n        movimento_CPU = CPU_2.getMovimentoCPU()\n    jogada = tabuleiro_velha.getListKeysDecodificador()[movimento_CPU]\n    tabuleiro_velha.setJogada(jogada)\n```\n\n# 3. RODANDO JOGO PRONTO\n\nCaso deseje apenas testar as funcionalidades, você pode iniciar um jogo já criado que vem junto do pacote. Para isso será necessário você importar o módulo Jogo.py do pacote Jogo.\n\n```python\nfrom Jogo import Jogo\n```\n\nApós a importação basta utilizar a função Play() do módulo Jogo.\n\n```python\nfrom Jogo import Jogo\n\nJogo.Play()\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Elielson68/JogoDaVelha",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "JogoDaVelha-Elielson68",
    "package_url": "https://pypi.org/project/JogoDaVelha-Elielson68/",
    "platform": "",
    "project_url": "https://pypi.org/project/JogoDaVelha-Elielson68/",
    "project_urls": {
      "Homepage": "https://github.com/Elielson68/JogoDaVelha"
    },
    "release_url": "https://pypi.org/project/JogoDaVelha-Elielson68/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "is a simples 'jogo da velha' game",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8254256,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc9e8140bad6e800fd6fedd83fcb1c71cc9cef74150c722e10f0900fbe885550",
          "md5": "bf71c1ca81d4164bc3eb2b00a271390f",
          "sha256": "085dacb40c17f365bbd19711af0184172c44cb1e9b0cc6149371f0d780d12a9c"
        },
        "downloads": -1,
        "filename": "JogoDaVelha_Elielson68-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf71c1ca81d4164bc3eb2b00a271390f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7242,
        "upload_time": "2020-09-23T02:00:34",
        "upload_time_iso_8601": "2020-09-23T02:00:34.123834Z",
        "url": "https://files.pythonhosted.org/packages/bc/9e/8140bad6e800fd6fedd83fcb1c71cc9cef74150c722e10f0900fbe885550/JogoDaVelha_Elielson68-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ebe201198f41369c3a7bcd02aa0fc789898d3d87a6204863bed43c8f5812ca5",
          "md5": "13abd59643026acf4bac0275b87a18e9",
          "sha256": "c0e2da490d31c24548ea4be956524205adac856e8969c54ecfca3f652417710e"
        },
        "downloads": -1,
        "filename": "JogoDaVelha-Elielson68-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "13abd59643026acf4bac0275b87a18e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5299,
        "upload_time": "2020-09-23T02:00:36",
        "upload_time_iso_8601": "2020-09-23T02:00:36.656519Z",
        "url": "https://files.pythonhosted.org/packages/9e/be/201198f41369c3a7bcd02aa0fc789898d3d87a6204863bed43c8f5812ca5/JogoDaVelha-Elielson68-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bef92a0971b3fc579234f9a7bf7136295297b6d933388eb5d27a3a6dca2d6b1",
          "md5": "297564ff33ec9f7a8813e420e0f5bd7a",
          "sha256": "61663a9ee167ea9842177dd2d9562e09b3536e2fad9d035dd77a55e7589f7d22"
        },
        "downloads": -1,
        "filename": "JogoDaVelha_Elielson68-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "297564ff33ec9f7a8813e420e0f5bd7a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7235,
        "upload_time": "2020-09-23T02:35:42",
        "upload_time_iso_8601": "2020-09-23T02:35:42.139073Z",
        "url": "https://files.pythonhosted.org/packages/4b/ef/92a0971b3fc579234f9a7bf7136295297b6d933388eb5d27a3a6dca2d6b1/JogoDaVelha_Elielson68-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a019ddb9d22daf8538334218df0e05bc67070d67c631e3073d857ef277740b9",
          "md5": "87114358522064b440160c8c1ff97800",
          "sha256": "3bcf8b96539a950399ecde57d105f5fd6a89519b3b2c90dd21dbb55dd982156f"
        },
        "downloads": -1,
        "filename": "JogoDaVelha-Elielson68-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "87114358522064b440160c8c1ff97800",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5241,
        "upload_time": "2020-09-23T02:35:43",
        "upload_time_iso_8601": "2020-09-23T02:35:43.354287Z",
        "url": "https://files.pythonhosted.org/packages/2a/01/9ddb9d22daf8538334218df0e05bc67070d67c631e3073d857ef277740b9/JogoDaVelha-Elielson68-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d700e7c556e2068d97ce5351a6a9d0b2bdb392b31ecc8db21be458ff39e13df",
          "md5": "b589b203fc368d97d9c331f356ad8745",
          "sha256": "dfe81d5072d59e79614b4219599b9193d48cdea576633af8677c7ccebfd70865"
        },
        "downloads": -1,
        "filename": "JogoDaVelha_Elielson68-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b589b203fc368d97d9c331f356ad8745",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10806,
        "upload_time": "2020-09-23T16:35:20",
        "upload_time_iso_8601": "2020-09-23T16:35:20.002820Z",
        "url": "https://files.pythonhosted.org/packages/0d/70/0e7c556e2068d97ce5351a6a9d0b2bdb392b31ecc8db21be458ff39e13df/JogoDaVelha_Elielson68-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35733cb419e4ea6b7a86184aa4822f6d446de03bc0b8616ade3b2abf2fd35692",
          "md5": "00eced553a8779777139d4cf92e4c935",
          "sha256": "87002a64908bbe418286c9530d3d53ea2c7b59cdd49766c3caa6d03fe06ff441"
        },
        "downloads": -1,
        "filename": "JogoDaVelha-Elielson68-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "00eced553a8779777139d4cf92e4c935",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9234,
        "upload_time": "2020-09-23T16:35:21",
        "upload_time_iso_8601": "2020-09-23T16:35:21.677666Z",
        "url": "https://files.pythonhosted.org/packages/35/73/3cb419e4ea6b7a86184aa4822f6d446de03bc0b8616ade3b2abf2fd35692/JogoDaVelha-Elielson68-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d700e7c556e2068d97ce5351a6a9d0b2bdb392b31ecc8db21be458ff39e13df",
        "md5": "b589b203fc368d97d9c331f356ad8745",
        "sha256": "dfe81d5072d59e79614b4219599b9193d48cdea576633af8677c7ccebfd70865"
      },
      "downloads": -1,
      "filename": "JogoDaVelha_Elielson68-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b589b203fc368d97d9c331f356ad8745",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10806,
      "upload_time": "2020-09-23T16:35:20",
      "upload_time_iso_8601": "2020-09-23T16:35:20.002820Z",
      "url": "https://files.pythonhosted.org/packages/0d/70/0e7c556e2068d97ce5351a6a9d0b2bdb392b31ecc8db21be458ff39e13df/JogoDaVelha_Elielson68-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35733cb419e4ea6b7a86184aa4822f6d446de03bc0b8616ade3b2abf2fd35692",
        "md5": "00eced553a8779777139d4cf92e4c935",
        "sha256": "87002a64908bbe418286c9530d3d53ea2c7b59cdd49766c3caa6d03fe06ff441"
      },
      "downloads": -1,
      "filename": "JogoDaVelha-Elielson68-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "00eced553a8779777139d4cf92e4c935",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9234,
      "upload_time": "2020-09-23T16:35:21",
      "upload_time_iso_8601": "2020-09-23T16:35:21.677666Z",
      "url": "https://files.pythonhosted.org/packages/35/73/3cb419e4ea6b7a86184aa4822f6d446de03bc0b8616ade3b2abf2fd35692/JogoDaVelha-Elielson68-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}