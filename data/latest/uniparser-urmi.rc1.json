{
  "info": {
    "author": "Timofey Arkhangelskiy",
    "author_email": "timarkh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "# Urmi morphological analyzer\n\nThis is a rule-based morphological analyzer for Christian Urmi (Afro-Asiatic > North-Eastern Neo-Aramaic). It is based on a formalized description of Urmi morphology and uses [uniparser-morph](https://github.com/timarkh/uniparser-morph) for parsing. It performs full morphological analysis of Urmi words (lemmatization, POS tagging, grammatical tagging). The text to be analyzed should be written in the Latin-based alphabet (the Assyrian New Alphabet).\n\n## How to use\n### Python package\nThe analyzer is available as a Python package. If you want to analyze Urmi texts in Python, install the module:\n\n```\npip3 install uniparser-urmi\n```\n\nImport the module and create an instance of ``UrmiAnalyzer`` class. Set ``mode='strict'`` if you are going to process text in standard Assyrian New Alphabet, or ``mode='nodiacritics'`` if you expect some words to lack the diacritics (e.g. *t* instead of *ṭ*). After that, you can either parse tokens or lists of tokens with ``analyze_words()``, or parse a frequency list with ``analyze_wordlist()``. Here is a simple example:\n\n```python\nfrom uniparser_urmi import UrmiAnalyzer\na = UrmiAnalyzer(mode='strict')\n\nanalyses = a.analyze_words('вajjannux')\n# The parser is initialized before first use, so expect\n# some delay here (usually several seconds)\n\n# You will get a list of Wordform objects\n# The analysis attributes are stored in its properties\n# as string values, e.g.:\nfor ana in analyses:\n        print(ana.wf, ana.lemma, ana.gramm)\n\n# You can also pass lists (even nested lists) and specify\n# output format ('xml', 'json' or 'conll')\n# If you pass a list, you will get a list of analyses\n# with the same structure\nanalyses = a.analyze_words([['вajjannux'], ['ʕəbarwo', 'lab', 'bote', '.']],\n\t                       format='xml')\nanalyses = a.analyze_words([['вajjannux'], ['ʕəbarwo', 'lab', 'bote', '.']],\n\t                       format='conll')\nanalyses = a.analyze_words(['вajjannux', [['laḥmawo'], ['ʕəbarwo', 'lab', 'bote', '.']]],\n\t                       format='json')\n```\n\nRefer to the [uniparser-morph documentation](https://uniparser-morph.readthedocs.io/en/latest/) for the full list of options.\n\nIf you want to quickly check an analysis for one particular word, you can also use the command-line interface. Here is an example for the word *вajjannux*:\n\n```\npython3 -m uniparser_urmi вajjannux\n```\n\n<!---\n### Disambiguation\nApart from the analyzer, this repository contains a set of [Constraint Grammar](https://visl.sdu.dk/constraint_grammar.html) rules that can be used for partial disambiguation of analyzed Urmi texts. If you want to use them, set ``disambiguation=True`` when calling ``analyze_words``:\n\n```python\nanalyses = a.analyze_words(['ʕəbarwo', 'lab', 'bote', '.'], disambiguate=True)\n```\n\nIn order for this to work, you have to install the ``cg3`` executable separately. On Ubuntu/Debian, you can use ``apt-get``:\n\n```\nsudo apt-get install cg3\n```\n\nOn Windows, download the binary and add the path to the ``PATH`` environment variable. See [the documentation](https://visl.sdu.dk/cg3/single/#installation) for other options.\n\nNote that each time you call ``analyze_words()`` with ``disambiguate=True``, the CG grammar is loaded and compiled from scratch, which makes the analysis even slower. If you are analyzing a large text, it would make sense to pass the entire text contents in a single function call rather than do it sentence-by-sentence, for optimal performance.\n-->\n\n### Word lists\nAlternatively, you can use a preprocessed word list. The ``wordlists`` directory contains a list of words from a 622-thousand-word [Christian Urmi corpus](https://neo-aramaic.web-corpora.net/index_en.html) (``wordlist.csv``) with 63,000 unique tokens, list of analyzed tokens (``wordlist_analyzed.txt``; each line contains all possible analyses for one word in an XML format), and list of tokens the parser could not analyze (``wordlist_unanalyzed.txt``). The recall of the analyzer on the corpus texts is about 76%.\n\n## Description format\nThe description is carried out in the ``uniparser-morph`` format and involves a description of the inflection (paradigms.txt) and a grammatical dictionary (lexemes.txt). The dictionary contains descriptions of individual lexemes, each of which is accompanied by information about its stem, its part-of-speech tag and some other grammatical information, its consonant root, its inflectional type (paradigm), and English and/or Russian translations. See more about the format [in the uniparser-morph documentation](https://uniparser-morph.readthedocs.io/en/latest/format.html).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/timarkh/uniparser-grammar-urmi",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "uniparser-urmi",
    "package_url": "https://pypi.org/project/uniparser-urmi/",
    "platform": "",
    "project_url": "https://pypi.org/project/uniparser-urmi/",
    "project_urls": {
      "Bug Tracker": "https://github.com/timarkh/uniparser-grammar-urmi/issues",
      "Homepage": "https://github.com/timarkh/uniparser-grammar-urmi"
    },
    "release_url": "https://pypi.org/project/uniparser-urmi/1.1.0/",
    "requires_dist": [
      "uniparser-morph (>=2.4.1)",
      "importlib-resources"
    ],
    "requires_python": ">=3.7",
    "summary": "Rule-based morphological analysis for Christian Urmi (North-Eastern Neo-Aramaic)",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11460057,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f8c7ef3ff14dd12ee239b6cb037183d9453353ae8d94b2e47a2b949a63a8f99",
          "md5": "c83fb64ef90d2ca55394c4af44fc96ca",
          "sha256": "bf25f755a4dcd6c7e05769c79bb178e8c967db1007ad0bba0146953d71878856"
        },
        "downloads": -1,
        "filename": "uniparser_urmi-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c83fb64ef90d2ca55394c4af44fc96ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 263878,
        "upload_time": "2021-09-15T16:08:18",
        "upload_time_iso_8601": "2021-09-15T16:08:18.274535Z",
        "url": "https://files.pythonhosted.org/packages/2f/8c/7ef3ff14dd12ee239b6cb037183d9453353ae8d94b2e47a2b949a63a8f99/uniparser_urmi-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa292b4c14c72acfc3759cbc8d8d75bc4faae0683e9a5b04e2db978aec29f63c",
          "md5": "a71ea390ec59aa7c3be04b80f63e0de7",
          "sha256": "08bb030c689d4e90f3ce7d72ef3ee7c94edc37ab27f68626ca9f8ef7d8440dec"
        },
        "downloads": -1,
        "filename": "uniparser-urmi-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a71ea390ec59aa7c3be04b80f63e0de7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 260818,
        "upload_time": "2021-09-15T16:08:20",
        "upload_time_iso_8601": "2021-09-15T16:08:20.175277Z",
        "url": "https://files.pythonhosted.org/packages/fa/29/2b4c14c72acfc3759cbc8d8d75bc4faae0683e9a5b04e2db978aec29f63c/uniparser-urmi-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f8c7ef3ff14dd12ee239b6cb037183d9453353ae8d94b2e47a2b949a63a8f99",
        "md5": "c83fb64ef90d2ca55394c4af44fc96ca",
        "sha256": "bf25f755a4dcd6c7e05769c79bb178e8c967db1007ad0bba0146953d71878856"
      },
      "downloads": -1,
      "filename": "uniparser_urmi-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c83fb64ef90d2ca55394c4af44fc96ca",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 263878,
      "upload_time": "2021-09-15T16:08:18",
      "upload_time_iso_8601": "2021-09-15T16:08:18.274535Z",
      "url": "https://files.pythonhosted.org/packages/2f/8c/7ef3ff14dd12ee239b6cb037183d9453353ae8d94b2e47a2b949a63a8f99/uniparser_urmi-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa292b4c14c72acfc3759cbc8d8d75bc4faae0683e9a5b04e2db978aec29f63c",
        "md5": "a71ea390ec59aa7c3be04b80f63e0de7",
        "sha256": "08bb030c689d4e90f3ce7d72ef3ee7c94edc37ab27f68626ca9f8ef7d8440dec"
      },
      "downloads": -1,
      "filename": "uniparser-urmi-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a71ea390ec59aa7c3be04b80f63e0de7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 260818,
      "upload_time": "2021-09-15T16:08:20",
      "upload_time_iso_8601": "2021-09-15T16:08:20.175277Z",
      "url": "https://files.pythonhosted.org/packages/fa/29/2b4c14c72acfc3759cbc8d8d75bc4faae0683e9a5b04e2db978aec29f63c/uniparser-urmi-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}