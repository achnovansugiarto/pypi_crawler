{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<p align=\"center\">\n <img src=\".github/assets/images/mlbaklava-logo.png\">\n</p>\n\n<h1 align=\"center\">mlbaklava</h1>\n\nThis is a package for building python based Machine Learning models into docker images, that can be deployed directly into AWS SageMaker.\n\nThis is an extension to the standard python packaging utility `setuptools`. The \nofficial [python packaging guide](https://packaging.python.org/)\nexplains the basics of building python distributions in detail.\n\nThis extends the existing behavior of building a setuptools source\ndistribution (`sdist`) by installing the built package artifact\n(`*.tar.gz`) into a Docker image. After the python distribution has been\ninstalled to the Docker image, it allows the user to configure the image\nfor the purposes of model training and prediction.\n\nThe name was chosen because [mlbaklava](https://en.wikipedia.org/wiki/mlbaklava) consists of small pieces and layers, like we put technologies together in form of many layers to create Docker images.\n\n## Installation\n\nInstall [docker](https://www.docker.com/) and then install the package:\n\n```\npip install mlbaklava\n```\n\n## Features\n\nInstalling the `mlbaklava` package automatically registers\nextensions to `setuptools`. New features are added to build python\ndistributions into docker images.\n\nWhen installed, this package allows you to use two new **setuptools\ncommands** (similar to `sdist` or `bdist_wheel`):\n\n* `train`: Builds a training docker image for your package. A training \n  image (`python setup.py train`) executes a user-provided function \n  just once in order to produce a model artifact. This image conforms to the AWS \n  SageMaker training image API.\n  \n* `predict`: Builds a prediction docker image for your package. A prediction\n   image (`python setup.py predict`) hosts the user-provided function in a web \n   application to be able to produce many decisions over time using a RESTful \n   service conforming to the AWS SageMaker prediction API.\n  \n* `execute`: Builds a batch execution docker image for your package. A batch execution \n  image (`python setup.py execute`) executes a user-provided batch function for prediction \n  on large amount of records.\n  \n  \n### Production-grade Machine Learning API using Flask, Gunicorn, Nginx, and Docker\n\n![Flask App](docs/flask.png)\n\nNew **setup keywords** are also registered with setuptools (similar to\n`install_requires` or `entry_points`). These include:\n\n* `python_version`: Specify the version of python to build the docker image for\n* `dockerlines`: Add docker commands to your resulting `Dockerfile`\n\nThis package also defines a [Python API](mlbaklava/api.py) to perform \nthe same actions as the setuptools extension.\n\n## Usage\n\n### Train\n\nTo create a training image, your package must define a function that\ntakes no arguments and returns nothing. It can be named anything as long\nas it is correctly referenced in the `setup.py` file.\n\n```python\ndef my_training_function():\n    \"\"\"\n    A training function takes no arguments and returns no results\n    \"\"\"\n    pass\n```\n\nThe `setup.py` must include a `mlbaklava.train` entrypoint which\npoints to this function. The entrypoint is the full module path to the\ndefined python function. An example of a `setup.py` script with a valid\ntraining entrypoint would  look like the following:\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='example',\n    version='0.0.1',\n    packages=find_packages(),\n    include_package_data=True,\n    entry_points={\n        'mlbaklava.train': [\n            'my_entrypoint = example.main:my_training_function',\n        ],\n    }\n)\n```\n\nWith this `setup.py`, a training docker image can be built:\n\n```\npython setup.py train\n```\n\nSee the [examples](examples/) for full sample projects.\n\n### Predict\n\nTo create a prediction image, your package must define a function\nthat takes one argument and returns one value. It can be named anything\nas long as it is correctly referenced in the `setup.py` file.\n\n```python\ndef my_hosted_function(payload):\n    \"\"\"\n    A hosted function takes a dictionary input and returns a dictionary\n    output.\n\n    Arguments:\n        payload (dict[str, object]): This is the payload was sent to\n            the SageMaker server using a POST request to the\n            `invocations` route.\n\n    Returns:\n        result (dict[str, object]): The output of the function is\n            expected to be either a dictionary (like the function input)\n            or a JSON string.\n    \"\"\"\n    return {}\n```\n\nThe `setup.py` must include a `mlbaklava.predict` entrypoint\nwhich points to this function. The entrypoint is the full module path to\nthe defined python function. An example of a `setup.py` script with a\nvalid prediction entrypoint would  look like the following:\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='example',\n    version='0.0.1',\n    packages=find_packages(),\n    include_package_data=True,\n    entry_points={\n        'mlbaklava.predict': [\n            'my_entrypoint = example.main:my_hosted_function',\n        ]\n    }\n)\n```\n\nWith this `setup.py`, a prediction docker image can be built:\n\n```\npython setup.py predict\n```\n\nSee the [examples](examples/) for full sample projects.\n\n### Predict Initialization\n\nThere are often cases when python code needs to execute prior to running\npredictions. For example, it may take a long time to load a model\nartifact into memory.\n\nTo add a prediction initializer, your package must define a function\nthat takes no arguments and may return anything. It can be named\nanything as long as it is correctly referenced in the `setup.py` file.\nThe function is responsible for it's own caching, but it is recommended\nto use caching function similar to `functools.lru_cache` to save the\nfunction results in memory.\n\n```python\nimport functools\n\n@functools.lru_cache()\ndef my_init_function():\n    \"\"\"\n    An initialization function takes no arguments and may return a\n    result.\n\n    Returns:\n        data (object): Data necessary for prediction. Could be any type.\n    \"\"\"\n    return 1, 2, 3\n```\n\nThe `setup.py` must include a `mlbaklava.initialize` entrypoint\nwhich points to this function. The entrypoint is the full module path to\nthe defined python function. An example of a `setup.py` script with a\nvalid prediction initialization entrypoint would  look like the\nfollowing:\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='example',\n    version='0.0.1',\n    packages=find_packages(),\n    include_package_data=True,\n\n    # Notice that we have an initializer AND a predict function\n    entry_points={\n        'mlbaklava.predict': [\n            'my_entrypoint = example.main:my_hosted_function',\n        ]\n        'mlbaklava.initialize': [\n            'my_initializer = example.main:my_init_function',\n        ]\n    }\n)\n```\n\nWith this `setup.py`, a prediction docker image can be built that will\ninitialize using the `my_init_function` initializer:\n\n```\npython setup.py predict\n```\n\nSee the [examples](examples/) for full sample projects.\n\n### Multiple Options\n\nA package may include all of the previous entrypoints in a single image\nif that package is responsible for both training and prediction. Like\nthe previous examples, all that is required is to add a set of\nentrypoints to an existing `setup.py` script.\n\nIn addition, we can also fix the `python_version` and add custom\n`dockerlines` to the final image\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='example',\n    version='0.0.1',\n    packages=find_packages(),\n    include_package_data=True,\n\n    # This will force the python version for the resulting image\n    python_version='3.6.6',\n\n    # This will run during the docker build stage\n    dockerlines=[\n        'RUN echo Hello, World!',\n        'RUN echo Hello, Sailor!',\n    ],\n\n    # The predict and train entrypoints create distinct images\n    entry_points={\n        'mlbaklava.train': [\n            'my_train_entrypoint = example.main:my_training_function',\n        ],\n        'mlbaklava.predict': [\n            'my_predict_entrypoint = example.main:my_hosted_function',\n        ]\n        'mlbaklava.initialize': [\n            'my_initializer = example.main:my_init_function',\n        ]\n    }\n)\n```\n\nWith this `setup.py`, both a prediction and a training docker image can\nbe built:\n\n```\npython setup.py predict\npython setup.py train\n```\n\n# Community\nEngage with the mlbaklava + MLCTL community on Slack at:\n\n[https://mlctl.slack.com/](https://mlctl.slack.com/)\n\n# Contributing\nFor information on how to contribute to `mlbaklava`, please read through the [contributing guidelines](./.github/CONTRIBUTING.md).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/intuit/baklava",
    "keywords": "",
    "license": "",
    "maintainer": "Intuit ML Platform",
    "maintainer_email": "baklava-maintainers@intuit.com",
    "name": "mlbaklava",
    "package_url": "https://pypi.org/project/mlbaklava/",
    "platform": "",
    "project_url": "https://pypi.org/project/mlbaklava/",
    "project_urls": {
      "Homepage": "https://github.com/intuit/baklava"
    },
    "release_url": "https://pypi.org/project/mlbaklava/0.0.5.dev1/",
    "requires_dist": [
      "docker (>=2.0.0)",
      "appdirs (>=1.4.0)",
      "six (>=1.16.0)"
    ],
    "requires_python": "",
    "summary": "",
    "version": "0.0.5.dev1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11216507,
  "releases": {
    "0.0.4.dev7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb95ee6dd9e82771062689fe60a7c3eb1ac68a174f0eb9a64ac23f6a396e9be8",
          "md5": "7ab25a0ca87b3417afb70360b00c26fb",
          "sha256": "f0d5c84a4872f07fb712a13bd5ddb5c258e5c114426e36ea4c9c2b980767dd39"
        },
        "downloads": -1,
        "filename": "mlbaklava-0.0.4.dev7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ab25a0ca87b3417afb70360b00c26fb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22165,
        "upload_time": "2021-07-26T23:09:43",
        "upload_time_iso_8601": "2021-07-26T23:09:43.668300Z",
        "url": "https://files.pythonhosted.org/packages/bb/95/ee6dd9e82771062689fe60a7c3eb1ac68a174f0eb9a64ac23f6a396e9be8/mlbaklava-0.0.4.dev7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af3610d3fa99b73f8d54bbf2190fa6c3abaf695c90359d6a429f661ae83b3850",
          "md5": "f9ae02296289ebf8ff2188e73d1c4e37",
          "sha256": "c0c4374401e79237a53eb7ee23c472c738fdc5c400ea2630aabf043e22539b24"
        },
        "downloads": -1,
        "filename": "mlbaklava-0.0.4.dev7.tar.gz",
        "has_sig": false,
        "md5_digest": "f9ae02296289ebf8ff2188e73d1c4e37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 220048,
        "upload_time": "2021-07-26T23:09:45",
        "upload_time_iso_8601": "2021-07-26T23:09:45.463900Z",
        "url": "https://files.pythonhosted.org/packages/af/36/10d3fa99b73f8d54bbf2190fa6c3abaf695c90359d6a429f661ae83b3850/mlbaklava-0.0.4.dev7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35d3cf6f1990a959f233f73f00a5792c8274d90ee87ab175770f24c9f713464d",
          "md5": "9fa84765d6daedf200729684b0262257",
          "sha256": "1c3608e6a8edccc8fd4fe26d5d241fc937d1a975944537380b18df65eb69ef6b"
        },
        "downloads": -1,
        "filename": "mlbaklava-0.0.5.dev1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fa84765d6daedf200729684b0262257",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 28280,
        "upload_time": "2021-08-18T23:38:16",
        "upload_time_iso_8601": "2021-08-18T23:38:16.078683Z",
        "url": "https://files.pythonhosted.org/packages/35/d3/cf6f1990a959f233f73f00a5792c8274d90ee87ab175770f24c9f713464d/mlbaklava-0.0.5.dev1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e283fad98ea884e13610d7ce59921361e45b242777d898edde0c4e732b51c310",
          "md5": "b2d9aa54c889cf2f3cfade11b57b9bb5",
          "sha256": "c93aa8b4cb6d14333e66ab659f6445a1659c565e6973079b9745f81cd3d435d7"
        },
        "downloads": -1,
        "filename": "mlbaklava-0.0.5.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2d9aa54c889cf2f3cfade11b57b9bb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 232995,
        "upload_time": "2021-08-18T23:38:17",
        "upload_time_iso_8601": "2021-08-18T23:38:17.847545Z",
        "url": "https://files.pythonhosted.org/packages/e2/83/fad98ea884e13610d7ce59921361e45b242777d898edde0c4e732b51c310/mlbaklava-0.0.5.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35d3cf6f1990a959f233f73f00a5792c8274d90ee87ab175770f24c9f713464d",
        "md5": "9fa84765d6daedf200729684b0262257",
        "sha256": "1c3608e6a8edccc8fd4fe26d5d241fc937d1a975944537380b18df65eb69ef6b"
      },
      "downloads": -1,
      "filename": "mlbaklava-0.0.5.dev1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9fa84765d6daedf200729684b0262257",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 28280,
      "upload_time": "2021-08-18T23:38:16",
      "upload_time_iso_8601": "2021-08-18T23:38:16.078683Z",
      "url": "https://files.pythonhosted.org/packages/35/d3/cf6f1990a959f233f73f00a5792c8274d90ee87ab175770f24c9f713464d/mlbaklava-0.0.5.dev1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e283fad98ea884e13610d7ce59921361e45b242777d898edde0c4e732b51c310",
        "md5": "b2d9aa54c889cf2f3cfade11b57b9bb5",
        "sha256": "c93aa8b4cb6d14333e66ab659f6445a1659c565e6973079b9745f81cd3d435d7"
      },
      "downloads": -1,
      "filename": "mlbaklava-0.0.5.dev1.tar.gz",
      "has_sig": false,
      "md5_digest": "b2d9aa54c889cf2f3cfade11b57b9bb5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 232995,
      "upload_time": "2021-08-18T23:38:17",
      "upload_time_iso_8601": "2021-08-18T23:38:17.847545Z",
      "url": "https://files.pythonhosted.org/packages/e2/83/fad98ea884e13610d7ce59921361e45b242777d898edde0c4e732b51c310/mlbaklava-0.0.5.dev1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}