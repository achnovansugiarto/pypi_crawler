{
  "info": {
    "author": "Rik",
    "author_email": "rik.de.kort@hey.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# Pydantic SQL Bridge ðŸŒ‰\n\nSQL and Pydantic models, simplified. Maintain straightforward one-to-one mappings between database tables and Pydantic\nmodels, without the baggage of an ORM. You can read and write to most SQL databases like SQLite, PostgreSQL, MSSQL, and\nMySQL.\n\n## Installation\n\nPydantic-SQL-bridge is available on PyPI.\n\n```shell\npip install pydantic-sql-bridge\n```\n\n## How to use\n\nThere are two options for using Pydantic-SQL-bridge: Pydantic first, or SQL first.\n\n### Pydantic first\n\nUse this if you are setting up a new database, and want to control your database schema from your Pydantic models.\n\nTo setup a database according to our Pydantic models, we import `cursor` and `setup_database`.\n\n```python\nfrom pydantic import BaseModel\nfrom pydantic_sql_bridge.utils import cursor\nfrom pydantic_sql_bridge.pydantic_first import setup_database\n\n\nclass User(BaseModel):\n    id: int\n    name = 'Jane Doe'\n\n\nclass CheckingAccount(BaseModel):\n    user: User\n    balance: float\n\n\nwith cursor('local', 'sqlite') as c:\n    setup_database(c, [User, CheckingAccount])\n    c.connection.commit()\n```\n\nIf you prefer to generate SQL to setup your database (for instance, if you are deploying the database separately, or you\nwant to make manual adjustments), we can use `generate_sql`. Since we are not connecting to a database directly, we'll\nalso have to tell Pydantic-SQL-bridge what`DatabaseType` you are using.\n\n```python\nfrom pydantic import BaseModel\nfrom pydantic_sql_bridge.pydantic_first import generate_sql\nfrom pydantic_sql_bridge.utils import DatabaseType\n\n\nclass User(BaseModel):\n    id: int\n    name = 'Jane Doe'\n\n\nclass CheckingAccount(BaseModel):\n    user: User\n    balance: float\n\n\nsql = generate_sql([User, CheckingAccount], database_type=DatabaseType.SQLITE)\nwith open('table_definitions.sql', 'w+') as handle:\n    handle.write(sql)\n```\n\n### SQL first\nNote: this feature is not available yet.\n\nUse this if you prefer to generate your Pydantic models based on your database, for instance if someone else is\nmaintaining the database. The primary way is to derive the models from the database directly, like so:\n\n```python\nfrom pydantic_sql_bridge.utils import cursor\nfrom pydantic_sql_bridge.sql_first import create_models_from_db\n\nwith cursor('local', 'sqlite') as c:\n    create_models_from_db(c, filename='models.py')\n```\n\nPydantic-SQL-bridge will generate a `models.py` file in your current directory (you can of course modify the\nfilename/path). You can check this into your repo and get all the benefits of developing with Pydantic.\n\nIf you have a repository of SQL statements that define your database schema, you can also read use that to generate the\nmodels.\n\n```python\nfrom pydantic_sql_bridge.sql_first import create_models_from_sql\n\nwith open('table_definitions.sql', 'r') as handle:\n    sql = handle.read()\n\ncreate_models_from_sql(sql, filename='models.py')\n```\n\n## Notes from the maintainers\n\n### Nested models\n\n```python\nfrom pydantic import BaseModel\n\n\nclass Trade(BaseModel):\n    __id__ = ('id',)\n    id: int\n    counterparty: int\n    amount: float\n\n\nclass CheckingAccount(BaseModel):\n    id: int\n    balance: float\n    last_transaction: Trade\n```\n\nIf you have nested models, Pydantic-SQL-bridge will put the models in separate tables, and retrieve them as needed.\nIt is necessary to tell Pydantic-SQL-bridge which fields identify the nested model. You do this by setting the `__id__`\nattribute.\n\nThis feature is still in development. Pydantic-SQL-bridge already gets nested models correctly from the database,\nbut writing still has to be done per model.\nThe `__id__` attribute is also not so nice to use. In the future Pydantic-SQL-bridge will include helpers to make this\neasier.\n\n## Why not an ORM?\n\n\"ORM\" implies taking on object-oriented programming features like inheritance. This does not match with the database\nmodel, which is about sets of records, and relations between them. These paradigms don't match, and I think trying to\nmap them (ORM stands for \"Object-Relational Mapper\") is a mistake.\nSee [here](https://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/) for an in-depth\nexplanation.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydantic-sql-bridge",
    "package_url": "https://pypi.org/project/pydantic-sql-bridge/",
    "platform": null,
    "project_url": "https://pypi.org/project/pydantic-sql-bridge/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pydantic-sql-bridge/0.0.1/",
    "requires_dist": [
      "pydantic (>=1.10.5,<2.0.0)",
      "sqlglot (>=11.3.6,<12.0.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "A simple bridge between SQL databases and Pydantic",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17422011,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b65cc61befbc334e0e655172ef5adf6c2550666e35e0679555bbb42ca0b472f",
          "md5": "772930462bda6874f5b0326a6dc25292",
          "sha256": "6e293696ab2532791f083aa7e61efe8af7619ffa7c3d76ab6fe53e5d3937f97c"
        },
        "downloads": -1,
        "filename": "pydantic_sql_bridge-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "772930462bda6874f5b0326a6dc25292",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 8350,
        "upload_time": "2023-03-23T22:00:06",
        "upload_time_iso_8601": "2023-03-23T22:00:06.426016Z",
        "url": "https://files.pythonhosted.org/packages/3b/65/cc61befbc334e0e655172ef5adf6c2550666e35e0679555bbb42ca0b472f/pydantic_sql_bridge-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "085d22aa3bc3d26da7b6467e3428111001f2d5954f13fe075f6264df6d7fe596",
          "md5": "055c9f0769427828fb94783732f385c2",
          "sha256": "304135ad776e1d288433a6aae905de88a45ee092b562d8c54060bc2a6ebdb164"
        },
        "downloads": -1,
        "filename": "pydantic_sql_bridge-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "055c9f0769427828fb94783732f385c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 6954,
        "upload_time": "2023-03-23T22:00:08",
        "upload_time_iso_8601": "2023-03-23T22:00:08.478515Z",
        "url": "https://files.pythonhosted.org/packages/08/5d/22aa3bc3d26da7b6467e3428111001f2d5954f13fe075f6264df6d7fe596/pydantic_sql_bridge-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b65cc61befbc334e0e655172ef5adf6c2550666e35e0679555bbb42ca0b472f",
        "md5": "772930462bda6874f5b0326a6dc25292",
        "sha256": "6e293696ab2532791f083aa7e61efe8af7619ffa7c3d76ab6fe53e5d3937f97c"
      },
      "downloads": -1,
      "filename": "pydantic_sql_bridge-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "772930462bda6874f5b0326a6dc25292",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 8350,
      "upload_time": "2023-03-23T22:00:06",
      "upload_time_iso_8601": "2023-03-23T22:00:06.426016Z",
      "url": "https://files.pythonhosted.org/packages/3b/65/cc61befbc334e0e655172ef5adf6c2550666e35e0679555bbb42ca0b472f/pydantic_sql_bridge-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "085d22aa3bc3d26da7b6467e3428111001f2d5954f13fe075f6264df6d7fe596",
        "md5": "055c9f0769427828fb94783732f385c2",
        "sha256": "304135ad776e1d288433a6aae905de88a45ee092b562d8c54060bc2a6ebdb164"
      },
      "downloads": -1,
      "filename": "pydantic_sql_bridge-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "055c9f0769427828fb94783732f385c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 6954,
      "upload_time": "2023-03-23T22:00:08",
      "upload_time_iso_8601": "2023-03-23T22:00:08.478515Z",
      "url": "https://files.pythonhosted.org/packages/08/5d/22aa3bc3d26da7b6467e3428111001f2d5954f13fe075f6264df6d7fe596/pydantic_sql_bridge-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}