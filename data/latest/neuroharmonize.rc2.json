{
  "info": {
    "author": "Raymond Pomponio",
    "author_email": "raymond.pomponio@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "==============\nneuroHarmonize\n==============\n\nHarmonization tools for multi-site neuroimaging analysis. Part of the work\nreported in our paper with data from the ISTAGING consoritum [1]_.\n\ncontact: raymond (dot) pomponio (at) outlook (dot) com\n\nOverview\n---------\n\nThis package extends the functionality of the package developed by Nick Cullen [2]_,\n``neuroCombat``, which is hosted on GitHub: https://github.com/ncullen93/neuroCombat\n\nCullen's package, ``neuroCombat``, allows the user to perform a\nharmonization procedure using the ComBat [3]_ algorithm for correcting\nmulti-site data.\n\nThis package, ``neuroHarmonize``, provides similar functionality, with additional\nfeatures:\n\n1. Support for working with NIFTI images. Implemented with the ``nibabel`` package.\n2. Separate train/test datasets.\n3. Specify covariates with generic nonlinear effects. Implemented using\n   Generalized Additive Models (GAMs) from the ``statsmodels`` package.\n4. Skip the empirical Bayes (EB) step of ComBat, if desired.\n\nInstallation\n------------\n\nLatest version: ``2.x.x`` (July 2021)\n\nRequirements:\n\n* ``git >= 2.17.2``\n* ``python >= 3.6.8``\n\n*To make installation easier, neuroCombat is not a formal dependency for this\npackage, but the source code is included to call neuroCombat functions.*\n\n**Option 1: Install from PyPI**\n\nTo install the latest version of ``neuroHarmonize``, run the following in the command line:\n\n    >>> pip install neuroHarmonize\n\n**Option 2: Install from GitHub**\n\n*Use if the first option fails.*\n\n1. Install the developer version of ``statsmodels``. This package depends on ``statsmodels v0.12.x``. Run the following in the command line:\n\n    >>> pip install git+https://github.com/statsmodels/statsmodels\n    \n2. Install latest version of ``neuroHarmonize``. Run the following in the command line:\n\n    >>> pip install git+https://github.com/rpomponio/neuroHarmonize\n\nQuick Start\n-----------\n\n*Please note:* the ComBat [3]_ algorithm corrects for site effects but\nintentionally preserves covariate effects. If you wish to remove covariate\neffects as well you can use the argument ``return_s_data``.\n\nYou must provide a **data matrix** which is a ``numpy.array`` containing the\nfeatures to be harmonized. For example, an ``array`` of brain volumes:\n\n::\n  \n  array([[3138.0, 3164.2,  ..., 206.4],\n         [1708.4, 2351.2,  ..., 364.0],\n         ...,\n         [1119.6, 1071.6,  ..., 326.6]])\n         \nThe dimensionality of this matrix must be: **N_samples x N_features**\n\nYou must also provide a **covariate matrix** which is a ``pandas.DataFrame`` \ncontaining all covariates to control for during harmonization. All covariates\nmust be encoded numerically (you must handle categorical covariates in a\npre-processing step, see ``pandas.get_dummies``). The ``DataFrame`` must\nalso contain a single column called \"SITE\" with labels that identify sites\n(the labels in \"SITE\" need not be numeric).\n\n::\n\n       SITE   AGE  SEX_M\n  0  SITE_A  76.5      1\n  1  SITE_B  80.1      1\n  2  SITE_A  82.9      0\n  ...   ...   ...    ...\n  9  SITE_B  82.1      0\n  \nThe dimensionality of this dataframe must be: **N_samples x N_Covariates**\n\nThe order of samples must be identical in the **covariate_matrix** and the\n**data_matrix**.\n\nAfter preparing both inputs, you can call ``harmonizationLearn`` to harmonize\nthe provided dataset.\n\nExample usage:\n\n    >>> from neuroHarmonize import harmonizationLearn\n    >>> import pandas as pd\n    >>> import numpy as np\n    >>> # load your data and all numeric covariates\n    >>> my_data = pd.read_csv('brain_volumes.csv')\n    >>> my_data = np.array(my_data)\n    >>> covars = pd.read_csv('subject_info.csv')\n    >>> # run harmonization and store the adjusted data\n    >>> my_model, my_data_adj = harmonizationLearn(my_data, covars)\n\nThe dimensionality of the matrix ``my_data_adj`` will be identical to\n``my_data``: **N_samples x N_features**\n\nWorking with NIFTI Images\n-------------------------\n\nTo work with NIFTI images, you compute a mask using a ``pandas.DataFrame`` which\ncontains file paths for all of the images in the **training set**.\n\n    >>> import pandas as pd\n    >>> import numpy as np\n    >>> from neuroHarmonize.harmonizationNIFTI import createMaskNIFTI\n    >>> nifti_list = pd.read_csv('brain_images_paths.csv')\n    >>> nifti_avg, nifti_mask, affine = createMaskNIFTI(nifti_list, threshold=0)\n\nAfter the mask is created, you can flatten the images to a 2D ``numpy.array``\nvery similar to what is done with the tabular data example above.\n\n    >>> from neuroHarmonize.harmonizationNIFTI import flattenNIFTIs\n    >>> nifti_array = flattenNIFTIs(nifti_list, 'thresholded_mask.nii.gz')\n\nThe next step is identical to working with tabular data. You simply pass the 2D\narray to ``neuroHarmonize.harmonizationLearn``.\n\n    >>> import neuroHarmonize as nh\n    >>> covars = pd.read_csv('subject_info.csv')\n    >>> my_model, nifti_array_adj = nh.harmonizationLearn(nifti_array, covars)\n    >>> nh.saveHarmonizationModel(my_model, 'MY_MODEL')\n\nLastly, you can apply the model sequentially to images in a larger dataset with\n``applyModelNIFTIs``. When performing NIFTI harmonization, loading the entire set\nof images may exceed memory capacity. This function will reduce the burden on\nmemory by applying the model to images one-by-one and saving the results as NIFTIs. \n\n    >>> from neuroHarmonize.harmonizationNIFTI import applyModelNIFTIs\n    >>> # load pre-trained model\n    >>> my_model = nh.loadHarmonizationModel('MY_MODEL')\n    >>> applyModelNIFTIs(covars, my_model, nifti_list, 'thresholded_mask.nii.gz')\n\nApplying Pre-Trained Models to New Data\n---------------------------------------\n\nThis feature allows you to train a harmonization model on a subset of data, then\napply the model to the entire set. For example, in longitudinal analyses, one may\nwish to train a harmonization model on baseline cases and apply the model to\nfollow-up cases, to avoid double-counting subjects.\n\nIf you have previously trained a harmonization model with ``harmonizationLearn``,\nyou may apply the model parameters to new data with ``harmonizationApply``.\n\nFirst load the model:\n\n    >>> from neuroHarmonize import harmonizationApply, loadHarmonizationModel\n    >>> import pandas as pd\n    >>> import numpy as np\n    >>> # load a pre-trained model\n    >>> my_model = loadHarmonizationModel('../models/my_model')\n\nNext, prepare the holdout data on which you will apply the model. This data\nmust look exactly like the training data for ``harmonizationLearn``, including\nthe same number and order of covariates. If the holdout data contains a\ndifferent number of sites, an error will be thrown.\n\nAfter preparing the holdout data simply apply the model:\n\n    >>> df_holdout = pd.read_csv('../data/brain_volumes_holdout.csv')\n    >>> my_holdout_data = np.array(df_holdout)\n    >>> covars = pd.read_csv('subject_info_holdout.csv')\n    >>> my_holdout_data_adj = harmonizationApply(my_holdout_data, covars, my_model)\n\nSpecifying Nonlinear Covariate Effects\n--------------------------------------\n\nYou may specify nonlinear covariate effects with the optional argument:\n``smooth_terms``. For example, you may want to specify age as a nonlinear\nterm in the harmonization model, if age exhibits nonlinear relationships with\nbrain volumes. This can be done easily with ``harmonizationLearn``:\n\n    >>> from neuroHarmonize import harmonizationLearn\n    >>> import pandas as pd\n    >>> import numpy as np\n    >>> # load your data and all numeric covariates\n    >>> my_data = pd.read_csv('brain_volumes.csv')\n    >>> my_data = np.array(my_data)\n    >>> covars = pd.read_csv('subject_info.csv')\n    >>> # run harmonization with NONLINEAR effects of age\n    >>> my_model, my_data_adj = harmonizationLearn(data, covars, smooth_terms=['AGE'])\n\nWhen applying nonlinear models to holdout data, you may get an error: \"some data\npoints fall outside the outermost knots, and I'm not sure how to handle them\".\nThis is documented: https://github.com/statsmodels/statsmodels/issues/2361. \nThe current workaround is to use the optional argument: ``smooth_term_bounds``,\nwhich controls the boundary knots for nonlinear estimation. You should specify\nboundaries that contain the limits of the entire dataset, including holdout data.\n\nEmpirical Bayes\n---------------\n\nNote the default behavior is to run the empirical Bayes (EB) step of ComBat, which\nis useful for harmonizing multiple features that are similar such as genes or\nbrain regional volumes.\n\nTo run without EB, simply pass the optional argument ``eb=False`` to\n``harmonizationLearn``. This is convenient when harmonizing a small number of\nfeatures, e.g. fewer than 10.\n\nWhen ``eb=True``, ComBat uses Empirical Bayes to fit a prior distribution for\nthe site effects for each site. You may wish to visualize fit of the prior\ndistribution, along with the observed distribution of site effects. The following\ncode example plots both distributions for the location effect of site 1.\n\n    >>> import matplotlib.pyplot as plt\n    >>> import seaborn as sns\n    >>> from neuroHarmonize import loadHarmonizationModel\n    >>> model = loadHarmonizationModel('../models/my_model')\n    >>> site_01 = stats.norm.rvs(size=10000, loc=model['gamma_bar'][0], scale=np.sqrt(model['t2'][0]))\n    >>> sns.kdeplot(site_01, color='blue', label='Site-1-prior')\n    >>> sns.kdeplot(model['gamma_hat'][0, :], color='blue', label='Site-1-observed', linestyle='--')\n    >>> plt.show()\n\n.. image:: figure_1.png\n\nCitations\n---------\n\n.. [1] Pomponio, R., Shou, H., Davatzikos, C., et al., (2019).\n   \"Harmonization of large MRI datasets for the analysis of brain imaging\n   patterns throughout the lifespan.\" Neuroimage 208.\n   https://doi.org/10.1016/j.neuroimage.2019.116450.\n.. [2] Fortin, J. P., N. Cullen, Y. I. Sheline, W. D. Taylor, I. Aselcioglu,\n   P. A. Cook, P. Adams, C. Cooper, M. Fava, P. J. McGrath, M. McInnis,\n   M. L. Phillips, M. H. Trivedi, M. M. Weissman and R. T. Shinohara (2017).\n   \"Harmonization of cortical thickness measurements across scanners and sites.\"\n   Neuroimage 167: 104-120. https://doi.org/10.1016/j.neuroimage.2017.11.024.\n.. [3] W. Evan Johnson and Cheng Li, Adjusting batch effects in microarray\n   expression data using empirical Bayes methods. Biostatistics, 8(1):118-127,\n   2007. https://doi.org/10.1093/biostatistics/kxj037.\n\n    \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rpomponio/neuroHarmonize",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neuroHarmonize",
    "package_url": "https://pypi.org/project/neuroHarmonize/",
    "platform": "",
    "project_url": "https://pypi.org/project/neuroHarmonize/",
    "project_urls": {
      "Bug Tracker": "https://github.com/rpomponio/neuroHarmonize/issues",
      "Homepage": "https://github.com/rpomponio/neuroHarmonize"
    },
    "release_url": "https://pypi.org/project/neuroHarmonize/2.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Harmonization tools for multi-center neuroimaging studies.",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10958196,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "decfcf437bdd8484cb145fbc0e9fc2e7f47c64e5a943156e48672891869e4ddc",
          "md5": "e5cc2f2742f91b77f5b15c5b82510739",
          "sha256": "9e3d1dcaaf677f37eb46f9915d4ba0e8b8a9bab7a3d849016649282f1e8da77a"
        },
        "downloads": -1,
        "filename": "neuroHarmonize-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e5cc2f2742f91b77f5b15c5b82510739",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16924,
        "upload_time": "2021-05-13T13:59:59",
        "upload_time_iso_8601": "2021-05-13T13:59:59.122239Z",
        "url": "https://files.pythonhosted.org/packages/de/cf/cf437bdd8484cb145fbc0e9fc2e7f47c64e5a943156e48672891869e4ddc/neuroHarmonize-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcc8ed3e71aee23cc6f27a5321c5808f2b32bd1894db86bc6f485f4b73fb6aa9",
          "md5": "2658a76b21028a84d46bacf4d953bdab",
          "sha256": "ae6121be424b8a0ebf8efdbefbbcebab9606a04643d41947acfaf57c02a08d3d"
        },
        "downloads": -1,
        "filename": "neuroHarmonize-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2658a76b21028a84d46bacf4d953bdab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17647,
        "upload_time": "2021-07-20T16:46:42",
        "upload_time_iso_8601": "2021-07-20T16:46:42.907871Z",
        "url": "https://files.pythonhosted.org/packages/dc/c8/ed3e71aee23cc6f27a5321c5808f2b32bd1894db86bc6f485f4b73fb6aa9/neuroHarmonize-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f62bfe5a5418b5ba3d2bb72873b6b01b7329562a68ffef75ae93a88f8bd45b9",
          "md5": "653a40a7b0b7084103b28ff404aeeb6a",
          "sha256": "0bca0a34ffcf840e6d726b89ae2f9e6c7485c8e2cc6a3d3ac9ff390cb3956ea2"
        },
        "downloads": -1,
        "filename": "neuroHarmonize-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "653a40a7b0b7084103b28ff404aeeb6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17396,
        "upload_time": "2021-07-20T16:46:43",
        "upload_time_iso_8601": "2021-07-20T16:46:43.912723Z",
        "url": "https://files.pythonhosted.org/packages/3f/62/bfe5a5418b5ba3d2bb72873b6b01b7329562a68ffef75ae93a88f8bd45b9/neuroHarmonize-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dcc8ed3e71aee23cc6f27a5321c5808f2b32bd1894db86bc6f485f4b73fb6aa9",
        "md5": "2658a76b21028a84d46bacf4d953bdab",
        "sha256": "ae6121be424b8a0ebf8efdbefbbcebab9606a04643d41947acfaf57c02a08d3d"
      },
      "downloads": -1,
      "filename": "neuroHarmonize-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2658a76b21028a84d46bacf4d953bdab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17647,
      "upload_time": "2021-07-20T16:46:42",
      "upload_time_iso_8601": "2021-07-20T16:46:42.907871Z",
      "url": "https://files.pythonhosted.org/packages/dc/c8/ed3e71aee23cc6f27a5321c5808f2b32bd1894db86bc6f485f4b73fb6aa9/neuroHarmonize-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f62bfe5a5418b5ba3d2bb72873b6b01b7329562a68ffef75ae93a88f8bd45b9",
        "md5": "653a40a7b0b7084103b28ff404aeeb6a",
        "sha256": "0bca0a34ffcf840e6d726b89ae2f9e6c7485c8e2cc6a3d3ac9ff390cb3956ea2"
      },
      "downloads": -1,
      "filename": "neuroHarmonize-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "653a40a7b0b7084103b28ff404aeeb6a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17396,
      "upload_time": "2021-07-20T16:46:43",
      "upload_time_iso_8601": "2021-07-20T16:46:43.912723Z",
      "url": "https://files.pythonhosted.org/packages/3f/62/bfe5a5418b5ba3d2bb72873b6b01b7329562a68ffef75ae93a88f8bd45b9/neuroHarmonize-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}