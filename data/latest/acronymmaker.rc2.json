{
  "info": {
    "author": "Romain Wallon",
    "author_email": "romain.gael.wallon@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# AcronymMaker in Python\n\n[![pipeline status](https://gitlab.com/acronym-maker/python-implementation/badges/master/pipeline.svg)](https://gitlab.com/acronym-maker/python-implementation/commits/master)\n[![coverage report](https://gitlab.com/acronym-maker/python-implementation/badges/master/coverage.svg)](https://gitlab.com/acronym-maker/python-implementation/-/commits/master)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=acronym-maker_python-implementation&metric=alert_status)](https://sonarcloud.io/dashboard?id=acronym-maker_python-implementation)\n\n## Description\n\n*AcronymMaker* creates awesome acronyms for your projects.\nLet us briefly describe how it works with some vocabulary.\n\nA *token* is a set of words from which one word must appear in the acronym\nbuilt by *AcronymMaker*.\nSaid differently, there must be a letter in common between a word from the\nset and the built acronym.\nThis letter may be either the first letter of a word in the token or any\nletter, depending on the *letter selection strategy* that is given to\n*AcronymMaker*.\n\nAdditionally, tokens may be *optional*.\nIn this case, *AcronymMaker* will try to match a letter from the words in\nthe optional token to a letter in the acronym, but the acronym will still\nbe accepted if it fails to do so.\n\nTo find an acronym for a given sequence of tokens, *AcronymMaker* uses a\n*dictionary*, i.e., a set of known words, in which it looks for acronyms.\nA word in the dictionary is said to be *explained* (as an acronym) by the\nsequence of tokens if there is a letter in the word for each word in each\n(non-optional) token.\nIn this case, we say that the letter is *explained* by the corresponding\nword.\n\nMoreover, there are two ways to explain a word as an acronym: either\nby following the order of the tokens in the specified sequence, or\nwithout considering this order.\n*AcronymMaker* supports both of them (independently).\n\nFinally, note that there may be unexplained letters in the acronym.\nTheir number may be limited, by limiting both the number of consecutive\nunused letters and the number of overall unused letters in a word.\nIf one of these limits is exceeded, then the word will not be considered\nas explained.\n\n## Requirements\n\nThis project provides a Python implementation of *AcronymMaker*, you\nthus need [Python 3](https://www.python.org/downloads/) on your computer\nto run it.\n\nYou may install *AcronymMaker* on your computer along with all its\n[dependencies](requirements.txt) thanks to `pip` with the following command\nline:\n\n```bash\npython3 -m pip install acronymmaker\n```\n\n## How to use *AcronymMaker*\n\nThere are two ways to use the Python implementation of *AcronymMaker*.\nThis section describes both of them.\n\n### Command-Line Interface\n\n*AcronymMaker* comes with a command-line interface that has the following\nusage:\n\n```\nacronymmaker [-l {all,first}] [-m {ordered,ordered-greedy,unordered}] [-c <nb>] [-u <nb>] -d <dict> [<dict> ...]\n```\n\nLet us now describe the parameters of the command line above.\n\n+ The parameter `-l` (`--select-letters`) allows specifying whether only the\n  `first` letter or `all` the letters of a word from a token may be used to\n  explain a letter of the acronym.\n\n+ The parameter `-m` (`--matching-strategy`) allows specifying whether the\n  tokens must be considered `ordered` or `unordered`.\n  The strategy `ordered-greedy` also considers the tokens in order, but using\n  a more efficient algorithm that may however miss matching acronyms which\n  would have been found by the `ordered` strategy.\n\n+ The parameters `-c` (`--max-consecutive-unused`) and `-u`\n  (`--max-total-unused`) allow specifying the maximum numbers of unused\n  letters in the acronym, by limiting the number of consecutive and overall\n  unexplained letters, respectively.\n\n+ The parameter `-d` (`--dictionary`) allows specifying the path to the\n  dictionary file(s) from which *AcronymMaker* will look for acronyms.\n  You may find such dictionaries [here](../dictionaries).\n  This is the only required parameter.\n\nOnce the command-line application has started, a prompt asks you to enter your\ntokens, separated by blank spaces.\nEach token defines a set of words separated with slashes (`/`), and may end\nwith a question mark (`?`) to specify that the token is optional.\nWhen you press `Enter`, the matching acronyms are displayed in the console.\nYou may then enter new sequences of tokens if you wish to find other acronyms,\nor you may exit the application with either `Ctrl-C` or `Ctrl-D`.\n\n### Python API\n\nYou may also want to directly interact with the Python API of *AcronymMaker*.\nThe `acronymmaker` package provides the function and classes to\nprogrammatically set up an instance of `AcronymMaker` similarly to what is\nproposed for the command-line interface.\n\nFirst, there are two functions corresponding to the letter selection\nstrategies.\nBoth of them are in the `acronymmaker.selection` module.\n\n```python\nfrom acronymmaker.selection import select_all_letters, select_first_letter\n```\n\nThere are also three classes corresponding to the matching strategies.\nThey are defined in the `acronymmaker.matching` module.\n \n```python\nfrom acronymmaker.matching import GreedyOrderedMatchingStrategy\nfrom acronymmaker.matching import RegexBasedOrderedMatchingStrategy\nfrom acronymmaker.matching import UnorderedMatchingStrategy\n```\n\nAll these strategies define a constructor that takes as parameters the\nmaximum number of consecutive unused letters and the maximum number of\noverall unused letters, as this can be seen in the example below.\n\n```python\nmatching_strategy = UnorderedMatchingStrategy(max_consecutive_unused=3, max_total_unused=5)\n```\n\nIt is now possible to instantiate an `AcronymMaker` to create your acronyms.\nFirst, you need to import `AcronymMaker`.\n\n```python\nfrom acronymmaker.maker import AcronymMaker\n```\n\nThen, you may instantiate an `AcronymMaker` as follows.\n\n```python\nmy_acronyms = []\nmaker = AcronymMaker(select_all_letters, matching_strategy, my_acronyms.append)\n```\n\nThe `maker` initialized above will append to `my_acronyms` all the acronyms\nit will identify.\nYou may of course provide any callback function as third parameter to the\nconstructor of `AcronymMaker`.\nThe only requirement for this function is that it must take as parameter an\ninstance of `Acronym` (from the `acronymmaker.matching` module).\nYou can for instance print it, display it on a GUI, etc.\n\nThen, you need to tell to the instance of `AcronymMaker` what are the\nwords that are authorized as acronyms (a.k.a. the \"dictionary\").\nWe provide a set of dictionary as [text files](../dictionaries), but you can\nof course use your own set of words.\n\nTo add new words, you can either add them one at a time, or all of them\nat once.\n\n```python\nmaker.add_known_word('foo')\nmaker.add_known_words(['bar', 'baz'])\n```\n\nThen, you need to provide the list of the tokens for which to find an acronym.\nTo this end, the `TokenBuilder`, defined in `acronymmaker.token`, makes\neasier the creation of a `Token`.\n \n```python\nbuilder = TokenBuilder(select_all_letters)\nbuilder.add_word('foo')\nbuilder.add_word('bar')\nbuilder.set_optional(True)\ntoken = builder.build()\n```\n\nOnce you have built all your tokens, put them in a list, say `tokens`.\nFinally, pass this list as parameter to the `find_acronym` method of `maker`.\nIt will try to explain each word of the dictionary, and will invoke the\ncallback function specified when creating the instance of `AcronymMaker`\neach time it successfully explains a word with the corresponding `Acronym`\ninstance.\n\n```python\nmaker.find_acronyms(tokens)\n```\n\nTo deal with the instances of `Acronym` that are produced by this method\nand stored in the list `my_acronyms` (in this example), you may be\nparticularly interested in the following methods:\n\n+ `get_word()` gives the word that is explained as an acronym, with\n  each explained letter upper-cased.\n \n+ `get_explanations()` gives the list of explanations of the acronym,\n  i.e., all the possible combinations of words in the tokens that explain\n  the word as an acronym.\n  Moreover, each letter corresponding to an explained letter of the acronym\n  are upper-cased.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/acronym-maker/python-implementation",
    "keywords": "acronym acronyms build create make word words",
    "license": "GNU General Public License, Version 3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "acronymmaker",
    "package_url": "https://pypi.org/project/acronymmaker/",
    "platform": "",
    "project_url": "https://pypi.org/project/acronymmaker/",
    "project_urls": {
      "Homepage": "https://gitlab.com/acronym-maker/python-implementation"
    },
    "release_url": "https://pypi.org/project/acronymmaker/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Create awesome acronyms for your projects!",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9481521,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2e374049469428ae012c632ebf0023e03b8c8b504a886421eb4312e5ba0ba5a",
          "md5": "70a193f78e35bf094f3d6ae3d70ae115",
          "sha256": "12316df1abe7c930d34116024b2a59748b0d8ab89e88021fb94973e24cb2a926"
        },
        "downloads": -1,
        "filename": "acronymmaker-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "70a193f78e35bf094f3d6ae3d70ae115",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17481,
        "upload_time": "2021-02-21T15:07:48",
        "upload_time_iso_8601": "2021-02-21T15:07:48.538286Z",
        "url": "https://files.pythonhosted.org/packages/f2/e3/74049469428ae012c632ebf0023e03b8c8b504a886421eb4312e5ba0ba5a/acronymmaker-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c49186f3b888a95e7600f964a157eb537d42e1c21c52bbe6550159524c891c88",
          "md5": "b6400776db53f98c245ac9499ca7e164",
          "sha256": "6d63d53f98fb661fbebf8093c7f4ccfb71342b72054381b01b5ae5c2cc27c82e"
        },
        "downloads": -1,
        "filename": "acronymmaker-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b6400776db53f98c245ac9499ca7e164",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17423,
        "upload_time": "2021-02-21T15:19:31",
        "upload_time_iso_8601": "2021-02-21T15:19:31.000936Z",
        "url": "https://files.pythonhosted.org/packages/c4/91/86f3b888a95e7600f964a157eb537d42e1c21c52bbe6550159524c891c88/acronymmaker-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c49186f3b888a95e7600f964a157eb537d42e1c21c52bbe6550159524c891c88",
        "md5": "b6400776db53f98c245ac9499ca7e164",
        "sha256": "6d63d53f98fb661fbebf8093c7f4ccfb71342b72054381b01b5ae5c2cc27c82e"
      },
      "downloads": -1,
      "filename": "acronymmaker-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b6400776db53f98c245ac9499ca7e164",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17423,
      "upload_time": "2021-02-21T15:19:31",
      "upload_time_iso_8601": "2021-02-21T15:19:31.000936Z",
      "url": "https://files.pythonhosted.org/packages/c4/91/86f3b888a95e7600f964a157eb537d42e1c21c52bbe6550159524c891c88/acronymmaker-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}