{
  "info": {
    "author": "Pål Næverlid Sævik",
    "author_email": "pnsaevik@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# fscacher\n\nCaching solution for functions that operate on the file system.\n\n## Installation\n\n`pip install <path to repository>`\n\n\n## Usage\n\nSimple usage: \n\n```\nfrom fscacher import Cache\n\ncache = Cache(cache_path)\nfn = cache.memoize(expensive_fn)\n\nresult = fn(\"arg1\", \"arg2\")\n```\nWhen `fn` is called the first time, the function `expensive_fn` is evaluated\nand its return value is serialized and stored at `cache_path`. Subsequent\ncalls to `fn` deserializes the stored result instead of re-evaluating\n`expensive_fn`.\n\nOptional arguments to `memoize` include:\n-   `key`: Function with arguments `(func, args, kwargs)` and return value of\n    type `str`, used to create the function call signature\n-   `dump`: Function with arguments `(return_value, filename)` and no return\n    value for serializing the result of `expensive_fn`\n-   `load`: Function with arguments `(filename, )` for de-serializing the\n    binary data on disk as a return value\n-   `digest`: Function with arguments `(stream, )` and return value of type `str`\n    for digesting function call signature as well as the contents of serialized\n    files\n-   `protocol`: Use predefined functions for `key`, `dump`, `load` and `digest`.\n    A list of known protocol schemes are presented below. If both protocol and\n    explicit functions are set, the explicit functions takes presedence.\n\nIf any of the arguments `key`, `dump`, `load` or `digest` are set to\n`\"default\"`, the functions defined by the `cache.defaults` dict are used\ninstead.\n\nDefault key function is constructed as follows:\n1.  Arguments and keyword arguments (both keys and values) are converted to\n    string by the `str` function. Numpy arrays are converted to lists before\n    conversion.\n2.  Any arguments which are too long (> 22 chars) or contain invalid characters\n    (`= \\/:*?\"<>|`) are utf-8 encoded and converted to a 64-bit truncated\n    sha256 hash.\n3.  Keyword arguments are joined as key-value pairs of the form `k=v`.\n4.  If short enough, the key is the function name followed by the\n    space-separated argument list. If too long, the key is the function\n    name followed by the full sha256 hash of the space-separated argument\n    list.\n\nDefault dump and load functions are from the python pickle module.\n\nDefault digest function is sha256.\n\nImplemented protocols include:\n-   `filename/<suffix>`: Return value is interpreted as the name of a temporary\n    file, which should have the suffix `<suffix>`, including any leading dot.\n    `key` is default key, except that `<suffix>` is appended. `dump` moves the\n    file to the index location. `load` returns the file name as a string.\n-   `filehash/<suffix>`: Return value is interpreted as the name of a temporary\n    file, which should have the suffix `<suffix>`, including any leading dot.\n    `key` is default key with the suffix `.hash` appended. `dump` computes the\n    hash of the temporary file and renames it to the hash value (unless already\n    present). Thereafter, it copies the file (as a hardlink if possible) to the\n    location specified by `key`, except that `.hash` is replaced by `<suffix>`.\n    Finally, the hash is stored as a string (lowercase hex) at the location\n    specified by `key` (the index location). `load` returns the contents of the\n    file at the index location and interprets it as a `pathlib` path. In the\n    end, this protocol works like `filename/<suffix>`, except that multiple\n    function calls can be mapped to the same file if their return value has\n    equal contents.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pnsaevik/fscacher",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "semantic-fscacher",
    "package_url": "https://pypi.org/project/semantic-fscacher/",
    "platform": "",
    "project_url": "https://pypi.org/project/semantic-fscacher/",
    "project_urls": {
      "Homepage": "https://github.com/pnsaevik/fscacher"
    },
    "release_url": "https://pypi.org/project/semantic-fscacher/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "File system based caching",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9726056,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d375d79705e6a781ed7d14ccefcd7b383aa671f21d1ef651f9b88e0b264492f5",
          "md5": "fabc24845c9ea58b7436825d1a3b4dc8",
          "sha256": "80020d1f2e9ea79d158c49afe810943ac4f9cac5886ac9f73a0b6bfc95e806f6"
        },
        "downloads": -1,
        "filename": "semantic_fscacher-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fabc24845c9ea58b7436825d1a3b4dc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4713,
        "upload_time": "2021-03-10T07:44:37",
        "upload_time_iso_8601": "2021-03-10T07:44:37.302697Z",
        "url": "https://files.pythonhosted.org/packages/d3/75/d79705e6a781ed7d14ccefcd7b383aa671f21d1ef651f9b88e0b264492f5/semantic_fscacher-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b83e3d3746e93dfe185844ddc5a3b2a99d46383b904ed0817b83afd303246996",
          "md5": "f87d5f5571d9e1c53ef92aa6f728311d",
          "sha256": "4e43be6fbbd260a15bf7a8e804dd1d8e66167f465910508d204d771e90640f05"
        },
        "downloads": -1,
        "filename": "semantic-fscacher-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f87d5f5571d9e1c53ef92aa6f728311d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4814,
        "upload_time": "2021-03-10T07:44:38",
        "upload_time_iso_8601": "2021-03-10T07:44:38.532787Z",
        "url": "https://files.pythonhosted.org/packages/b8/3e/3d3746e93dfe185844ddc5a3b2a99d46383b904ed0817b83afd303246996/semantic-fscacher-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7df7007f848002f48513d9445527722f94e7da9bba65343875ccf9923c8ef21",
          "md5": "0fe4783cbf90cf7860f9db0ab8b1624f",
          "sha256": "55fb294956afd9be2b351c1f571cda56250ef8e8c5d572a4cddba24b9de7a333"
        },
        "downloads": -1,
        "filename": "semantic_fscacher-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fe4783cbf90cf7860f9db0ab8b1624f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4686,
        "upload_time": "2021-03-10T07:54:24",
        "upload_time_iso_8601": "2021-03-10T07:54:24.951220Z",
        "url": "https://files.pythonhosted.org/packages/d7/df/7007f848002f48513d9445527722f94e7da9bba65343875ccf9923c8ef21/semantic_fscacher-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21c2813c96b57b8f5667ccb9e5d25596b42d3b9d32fd6394d37cbe11e931baeb",
          "md5": "043db98f0a84a15e89218bcbc8651479",
          "sha256": "aacb07381b81c4a01d9793d7b70a28f844d60ab3487c9e4f6a79c1bfdc6c5a37"
        },
        "downloads": -1,
        "filename": "semantic-fscacher-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "043db98f0a84a15e89218bcbc8651479",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4710,
        "upload_time": "2021-03-10T07:54:26",
        "upload_time_iso_8601": "2021-03-10T07:54:26.016427Z",
        "url": "https://files.pythonhosted.org/packages/21/c2/813c96b57b8f5667ccb9e5d25596b42d3b9d32fd6394d37cbe11e931baeb/semantic-fscacher-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7df7007f848002f48513d9445527722f94e7da9bba65343875ccf9923c8ef21",
        "md5": "0fe4783cbf90cf7860f9db0ab8b1624f",
        "sha256": "55fb294956afd9be2b351c1f571cda56250ef8e8c5d572a4cddba24b9de7a333"
      },
      "downloads": -1,
      "filename": "semantic_fscacher-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0fe4783cbf90cf7860f9db0ab8b1624f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4686,
      "upload_time": "2021-03-10T07:54:24",
      "upload_time_iso_8601": "2021-03-10T07:54:24.951220Z",
      "url": "https://files.pythonhosted.org/packages/d7/df/7007f848002f48513d9445527722f94e7da9bba65343875ccf9923c8ef21/semantic_fscacher-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21c2813c96b57b8f5667ccb9e5d25596b42d3b9d32fd6394d37cbe11e931baeb",
        "md5": "043db98f0a84a15e89218bcbc8651479",
        "sha256": "aacb07381b81c4a01d9793d7b70a28f844d60ab3487c9e4f6a79c1bfdc6c5a37"
      },
      "downloads": -1,
      "filename": "semantic-fscacher-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "043db98f0a84a15e89218bcbc8651479",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4710,
      "upload_time": "2021-03-10T07:54:26",
      "upload_time_iso_8601": "2021-03-10T07:54:26.016427Z",
      "url": "https://files.pythonhosted.org/packages/21/c2/813c96b57b8f5667ccb9e5d25596b42d3b9d32fd6394d37cbe11e931baeb/semantic-fscacher-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}