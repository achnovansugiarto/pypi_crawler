{
  "info": {
    "author": "",
    "author_email": "Barry Warsaw <barry@python.org>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Development Status :: 6 - Mature",
      "Environment :: X11 Applications",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Desktop Environment"
    ],
    "description": "# Welcome to PYnche\n\nThis is the *Py*thonically *N*atural *C*olor and *H*ue *E*ditor.\n\nPynche is based largely on a similar color editor I wrote many years ago for\nthe SunView window system.  That editor was called ICE: the Interactive Color\nEditor.  I'd always wanted to port the editor to X but didn't feel like\nhacking X and C code to do it.  Fast forward many years, to where Python +\nTkinter provided such a nice programming environment, with enough power, that\nI finally buckled down and implemented it.  I changed the name because there\nwere too many other systems have the acronym `ICE'.\n\n# Contact\n* Author: Barry Warsaw\n* Email: barry@python.org\n* Bugs, Contributions: https://gitlab.com/warsaw/pynche\n\n# A modern day warrior\n\nAs of Python 3.11, [Pynche is finally\nremoved](https://github.com/python/cpython/issues/91551) from the CPython\nrepository and moved into its own repo.  Given that the code in CPython wasn't\neven Python 3 compatible, this was long overdue.\n\nI don't intend to support this too much, but I'll keep it working (with your\nhelp!) and it still makes a nice demo of using\n[tkinter](https://docs.python.org/3/library/tkinter.html) from Python, so I\nguess here ya go.  Contributions and collaborators welcome!\n\nI've done the most minimal work to port this to Python 3.  On macOS (where I\ntest things), you need to `brew install python-tk` to get it to work.\n\nTo run it: `python3 src/pynche`.\n\nOther than that, reach out if you want to play along.\n\n# Introduction\n\nPynche is a color editor based largely on a similar program that I originally\nwrote back in 1987 for the SunView window system.  That editor was called ICE,\nthe Interactive Color Editor.  I'd always wanted to port this program to X but\ndidn't feel like hacking X and C code to do it.  Fast forward many years, to\nwhere Python + Tkinter provides such a nice programming environment, with\nenough power, that I finally buckled down and re-implemented it.  I changed\nthe name because these days, too many other systems have the acronym `ICE'.\n\nPynche should work with any variant of Python 3 but as only been tested on\nmacOS with `brew` installed Python 3.9 and TclTk 8.6.12 (via `python-tk`)\nsince the separation of the source code from the CPython repo.\n\nPynche must find a text database of colors names in order to provide nearest\ncolor matching.  Pynche is distributed with an\n[rgb.txt](https://gitlab.com/warsaw/pynche/-/blob/main/src/pynche/data/rgb.txt)\nfile from the X11R6.4 distribution for this reason, along with other \"web\nrelated\" database (see below).  You can use a different file with the -d\noption.  The file\n[xlicense.txt](https://gitlab.com/warsaw/pynche/-/blob/main/src/pynche/data/xlicense.txt)\ncontains the license only for `rgb.txt`.\n\nPynche is pronounced: Pin'-chee\n\n# Running Standalone\n\nOn Unix, start it by running the `pynche` script.  On Windows, run `pynche.pyw`\nto inhibit the console window.  When run from the command line, the following\noptions are recognized:\n\n`--database file`\n`-d file`\n    Alternate location of the color database file.  Without this\n    option, the first valid file found will be used (see below).\n\n`--initfile file`\n`-i file`\n    Alternate location of the persistent initialization file.  See\n    the section on Persistency below.\n\n`--ignore`\n`-X`\n    Ignore the persistent initialization file when starting up.\n    Pynche will still write the current option settings to the\n    persistent init file when it quits.\n\n`--help`\n`-h`\n    Print the help message.\n\n`initialcolor`\n    a Tk color name or `#rrggbb` color spec to be used as the\n    initially selected color.  This overrides any color saved in\n    the persistent init file.  Since `#` needs to be escaped in\n    many shells, it is optional in the spec (e.g. #45dd1f is the\n    same as 45dd1f).\n\n# Running as a Modal Dialog\n\n**Warning: this mode has not been tested since the CPython repo separation.\nAll of the information here is pretty ancient.**\n\nPynche can be run as a modal dialog, inside another application, say as a\ngeneral color chooser.  In fact, Grail 0.6 uses Pynche and a future version of\nIDLE may as well.  Pynche supports the API implemented by the Tkinter standard\ntkColorChooser module, with a few changes as described below.  By importing\npyColorChooser from the Pynche package, you can run\n\n`pyColorChooser.askcolor()`\n\nwhich will popup Pynche as a modal dialog, and return the selected\ncolor.\n\nThere are some UI differences when running as a modal vs. standalone.  When\nrunning as a modal, there is no \"Quit\" menu item under the \"File\" menu.\nInstead there are \"Okay\" and \"Cancel\" buttons.\n\nWhen \"Okay\" is hit, askcolor() returns the tuple\n\n`((r, g, b), \"name\")`\n\nwhere `r`, `g`, and `b` are red, green, and blue color values respectively (in\nthe range 0 to 255).  `\"name\"` will be a color name from the color database if\nthere is an exact match, otherwise it will be an X11 color spec of the form\n`\"#rrggbb\"`.  Note that this is different than tkColorChooser, which doesn't\nknow anything about color names.\n\n`askcolor()` supports the following optional keyword arguments:\n\n`color`\n    the color to set as the initial selected color\n\n`master[*]`\n    the master window to use as the parent of the modal\n    dialog.  Without this argument, `pyColorChooser` will create\n    its own `Tkinter.Tk` instance as the master.  This may not\n    be what you want.\n\n`databasefile`\n    similar to the `--database` option, the value must be a\n    file name\n\n`initfile[*]`\n    similar to the `--initfile` option, the value must be a\n    file name\n\n`ignore[*]`\n    similar to the `--ignore` flag, the value is a boolean\n\n`wantspec`\n    When this is true, the `\"name\"` field in the return tuple\n    will always be a color spec of the form `\"#rrggbb\"`.  It\n    will not return a color name even if there is a match;\n    this is so `pyColorChooser` can exactly match the API of\n    `tkColorChooser`.\n\n[*] these arguments must be specified the first time\n`askcolor()` is used and cannot be changed on subsequent calls.\n\n\n# The ColorStrip Window\n\n![The ColorStrip Window](colorstrip.png)\n\nThe top part of the main Pynche window contains the \"color variation strips\".\nEach strip contains a number of \"color chips\".  The strips always indicate the\ncurrently selected color by a highlight rectangle around the selected color\nchip, with an arrow pointing to the chip.  Each arrow has an associated number\ngiving you the color value along the variation's axis.  Each variation strip\nshows you the colors that are reachable from the selected color by varying\njust one axis of the color solid.\n\nFor example, when the selected color is (in Red/Green/Blue notation)\n127/127/127, the Red Variations strip shows you every color in the range\n0/127/127 to 255/127/127.  Similarly for the green and blue axes.  You can\nselect any color by clicking on its chip.  This will update the highlight\nrectangle and the arrow, as well as other displays in Pynche.\n\nClick on \"Update while dragging\" if you want Pynche to update the selected\ncolor while you drag along any variation strip.  Click on \"Hexadecimal\" to\ndisplay the arrow numbers in hex.\n\nThere are also two shortcut buttons in this window, which auto-select Black\n(0/0/0) and White (255/255/255).\n\n\n# The Proof Window\n\n![The Proof Window](proof.png)\n\nIn the lower left corner of the main window you see two larger color chips.\nThe Selected chip shows you a larger version of the color selected in the\nvariation strips, along with its X11 color specification.  The Nearest chip\nshows you the closest color in the X11 database to the selected color, giving\nits X11 color specification, and below that, its X11 color name.  When the\nSelected chip color exactly matches the Nearest chip color, you will see the\ncolor name appear below the color specification for the Selected chip.\n\nClicking on the Nearest color chip selects that color.  Color distance is\ncalculated in the 3D space of the RGB color solid and if more than one color\nname is the same distance from the selected color, the first one found will be\nchosen.\n\nNote that there may be more than one X11 color name for the same RGB value.\nIn that case, the first one found in the text database is designated the\n\"primary\" name, and this is shown under the Nearest chip.  The other names are\n\"aliases\" and they are visible in the Color List Window (see below).\n\nBoth the color specifications and color names are selectable for copying and\npasting into another window.\n\n\n# The Type-in Window\n\n![The Type-in Window](typein.png)\n\nAt the lower right of the main window are three entry fields.  Here you can\ntype numeric values for any of the three color axes.  Legal values are between\n0 and 255, and these fields do not allow you to enter illegal values.  You\nmust hit Enter or Tab to select the new color.\n\nClick on \"Update while typing\" if you want Pynche to select the color on every\nkeystroke (well, every one that produces a legal value!)  Click on\n\"Hexadecimal\" to display and enter color values in hex.\n\n\n# Other Views\n\nThere are three secondary windows which are not displayed by default.  You can\nbring these up via the \"View\" menu on the main Pynche window.\n\n\n# The Text Window\n\n![The Text Window](textwindow.png)\n\nThe \"Text Window\" allows you to see what effects various colors have on the\nstandard Tk text widget elements.  In the upper part of the window is a plain\nTk text widget and here you can edit the text, select a region of text, etc.\nBelow this is a button \"Track color changes\".  When this is turned on, any\ncolors selected in the other windows will change the text widget element\nspecified in the radio buttons below.  When this is turned off, text widget\nelements are not affected by color selection.\n\nYou can choose which element gets changed by color selection by clicking on\none of the radio buttons in the bottom part of this window.  Text foreground\nand background affect the text in the upper part of the window.  Selection\nforeground and background affect the colors of the primary selection which is\nwhat you see when you click the middle button (depending on window system) and\ndrag it through some text.\n\nThe Insertion is the insertion cursor in the text window, where new text will\nbe inserted as you type.  The insertion cursor only has a background.\n\n\n# The Color List Window\n\n![The Color List Window](colorlist.png)\n\nThe \"Color List\" window shows every named color in the color name database.\nIn the upper part of the window you see a scrolling list of all the color\nnames in the database, in alphabetical order.  Click on any color to select\nit.  In the bottom part of the window is displayed any aliases for the\nselected color (those color names that have the same RGB value, but were found\nlater in the text database).  For example, find the color \"Black\" and you'll\nsee that its aliases are \"gray0\" and \"grey0\".\n\nIf the color has no aliases you'll see `\"<no aliases>\"` here.  If you just want\nto see if a color has an alias, and do not want to select a color when you\nclick on it, turn off \"Update on Click\".\n\nNote that the color list is always updated when a color is selected\nfrom the main window.  There's no way to turn this feature off.  If\nthe selected color has no matching color name you'll see\n`\"<no matching color>\"` in the Aliases window.\n\n\n# The Details Window\n\n![The Details Window](details.png)\n\nThe \"Details\" window gives you more control over color selection than just\nclicking on a color chip in the main window.  The row of buttons along the top\napply the specified increment and decrement amounts to the selected color.\nThese delta amounts are applied to the color strips specified by the check\nboxes labeled \"Move Sliders\".  Thus if just Red and Green are selected,\nhitting -10 will subtract 10 from the color value along the red and green\nvariation only.  Note the message under the checkboxes; this indicates the\nprimary color level being changed when more than one slider is tied together.\nFor example, if Red and Green are selected, you will be changing the Yellow\nlevel of the selected color.\n\nThe \"At Boundary\" behavior determines what happens when any color\nvariation hits either the lower or upper boundaries (0 or 255) as\na result of clicking on the top row buttons:\n\n`Stop`\n    When the increment or decrement would send any of the tied\n    variations out of bounds, the entire delta is discarded.\n\n`Wrap Around`\n    When the increment or decrement would send any of the tied\n    variations out of bounds, the out of bounds value is wrapped\n    around to the other side.  Thus if red were at 238 and +25\n    were clicked, red would have the value 7.\n\n`Preserve Distance`\n    When the increment or decrement would send any of the tied\n    variations out of bounds, all tied variations are wrapped as\n    one, so as to preserve the distance between them.  Thus if\n    green and blue were tied, and green was at 238 while blue was\n    at 223, and +25 were clicked, green would be at 15 and blue\n    would be at 0.\n\n`Squash`\n    When the increment or decrement would send any of the tied\n    variations out of bounds, the out of bounds variation is set\n    to the ceiling of 255 or floor of 0, as appropriate.  In this\n    way, all tied variations are squashed to one edge or the\n    other.\n\nThe top row buttons have the following keyboard accelerators:\n\n-25 == Shift Left Arrow\n-10 == Control Left Arrow\n -1 == Left Arrow\n +1 == Right Arrow\n+10 == Control Right Arrow\n+25 == Shift Right Arrow\n\n\n# Keyboard Accelerators\n\n`Alt-w` in any secondary window dismisses the window.  In the main\nwindow it exits Pynche (except when running as a modal).\n\n`Alt-q` in any window exits Pynche (except when running as a modal).\n\n\n# Persistency\n\nPynche remembers various settings of options and colors between invocations,\nstoring these values in a persistent initialization file.  The actual location\nof this file is specified by the `--initfile` option (see above), and defaults\nto `~/.pynche`.\n\nWhen Pynche exits, it saves these values in the init file, and re-reads them\nwhen it starts up.  There is no locking on this file, so if you run multiple\ninstances of Pynche at a time, you may clobber the init file.\n\nThe actual options stored include\n\n- the currently selected color\n\n- all settings of checkbox and radio button options in all windows\n\n- the contents of the text window, the current text selection and\n  insertion point, and all current text widget element color\n  settings.\n\n- the name of the color database file (but not its contents)\n\nYou can inhibit Pynche from reading the init file by supplying the `--ignore`\noption on the command line.  However, you cannot suppress the storing of the\nsettings in the init file on Pynche exit.  If you really want to do this, use\n`/dev/null` as the init file, using `--initfile`.\n\n\n# Color Name Database Files\n\nPynche uses a color name database file to calculate the nearest color to the\nselected color, and to display in the Color List view.  Several files are\ndistributed with Pynche, described below.  By default, the X11 color name\ndatabase file is selected.  Other files:\n\n`html40colors.txt` -- the HTML 4.0 guaranteed color names\n\n`websafe.txt` -- the 216 \"web-safe\" colors that Netscape and MSIE\nguarantee will not be dithered.  These are specified in `#rrggbb`\nformat for both values and names\n\n`webcolors.txt` -- The 140 color names that Tim Peters and his\nsister say NS and MSIE both understand (with some controversy over\nAliceBlue).\n\n`namedcolors.txt` -- an alternative set of Netscape colors.\n\nYou can switch between files by choosing \"Load palette...\" from\nthe \"File\" menu.  This brings up a standard Tk file dialog.\nChoose the file you want and then click \"Ok\".  If Pynche\nunderstands the format in this file, it will load the database and\nupdate the appropriate windows.  If not, it will bring up an error\ndialog.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "tkinter,color chooser",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynche",
    "package_url": "https://pypi.org/project/pynche/",
    "platform": null,
    "project_url": "https://pypi.org/project/pynche/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/warsaw/pynche/-/issues",
      "Documentation": "https://gitlab.com/warsaw/pynche/-/blob/main/README.md",
      "Home Page": "https://gitlab.com/warsaw/pynche/-/blob/main/README.md",
      "Source": "https://gitlab.com/warsaw/pynche.git"
    },
    "release_url": "https://pypi.org/project/pynche/2.0a1/",
    "requires_dist": [
      "atpublic>=3.0.1"
    ],
    "requires_python": ">=3.9",
    "summary": "The Pythonically Natural Color and Hue Editor",
    "version": "2.0a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14103435,
  "releases": {
    "2.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad5fd77ec21fecdb203ecd45d28f77b07a23c6f4e1e92d20c52b4998ea9dc1a7",
          "md5": "a302ed170a15a4fe9fe7092397a2f75c",
          "sha256": "2a3c41e16ab03d0a2b7781d889bd37af8d9f03ea60d647b2f56f2a89ef4dc4d1"
        },
        "downloads": -1,
        "filename": "pynche-2.0a0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "a302ed170a15a4fe9fe7092397a2f75c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 369824,
        "upload_time": "2022-06-11T21:40:48",
        "upload_time_iso_8601": "2022-06-11T21:40:48.801405Z",
        "url": "https://files.pythonhosted.org/packages/ad/5f/d77ec21fecdb203ecd45d28f77b07a23c6f4e1e92d20c52b4998ea9dc1a7/pynche-2.0a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00b6e5064741becce20cd7f7537406f59236291892439af4e401fc54d84da549",
          "md5": "d6e741b561df46403f60592c8b862c58",
          "sha256": "eb8dd004d0180bb90ba9207169eb9f117a24c92f5e4e59728e6fea3656abe662"
        },
        "downloads": -1,
        "filename": "pynche-2.0a0.tar.gz",
        "has_sig": true,
        "md5_digest": "d6e741b561df46403f60592c8b862c58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 312062,
        "upload_time": "2022-06-11T21:40:51",
        "upload_time_iso_8601": "2022-06-11T21:40:51.132889Z",
        "url": "https://files.pythonhosted.org/packages/00/b6/e5064741becce20cd7f7537406f59236291892439af4e401fc54d84da549/pynche-2.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "644fc8408adeb936452d9219027ef3fc7d4ec3d4c56baad0990598dfbcbada39",
          "md5": "0a3cc988be4aea8a7a0d4d16d6387782",
          "sha256": "3f4712a95353d53bc5e75f161002fa075fd5a53ffb751af92f50529c60aa5d2d"
        },
        "downloads": -1,
        "filename": "pynche-2.0a1-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "0a3cc988be4aea8a7a0d4d16d6387782",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 43042,
        "upload_time": "2022-06-11T22:16:30",
        "upload_time_iso_8601": "2022-06-11T22:16:30.109852Z",
        "url": "https://files.pythonhosted.org/packages/64/4f/c8408adeb936452d9219027ef3fc7d4ec3d4c56baad0990598dfbcbada39/pynche-2.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34f378c0a45ab67ecd04f32e035a3da415be9e9ecf5a49ec40b059a531530902",
          "md5": "d4bcb551e8726e73409005b23400ae86",
          "sha256": "28b6d86c821c01ea8b442a43a72c21a42859d3310d56202431c05d7060a9ab6e"
        },
        "downloads": -1,
        "filename": "pynche-2.0a1.tar.gz",
        "has_sig": true,
        "md5_digest": "d4bcb551e8726e73409005b23400ae86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 43931,
        "upload_time": "2022-06-11T22:16:32",
        "upload_time_iso_8601": "2022-06-11T22:16:32.137028Z",
        "url": "https://files.pythonhosted.org/packages/34/f3/78c0a45ab67ecd04f32e035a3da415be9e9ecf5a49ec40b059a531530902/pynche-2.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "644fc8408adeb936452d9219027ef3fc7d4ec3d4c56baad0990598dfbcbada39",
        "md5": "0a3cc988be4aea8a7a0d4d16d6387782",
        "sha256": "3f4712a95353d53bc5e75f161002fa075fd5a53ffb751af92f50529c60aa5d2d"
      },
      "downloads": -1,
      "filename": "pynche-2.0a1-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "0a3cc988be4aea8a7a0d4d16d6387782",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 43042,
      "upload_time": "2022-06-11T22:16:30",
      "upload_time_iso_8601": "2022-06-11T22:16:30.109852Z",
      "url": "https://files.pythonhosted.org/packages/64/4f/c8408adeb936452d9219027ef3fc7d4ec3d4c56baad0990598dfbcbada39/pynche-2.0a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34f378c0a45ab67ecd04f32e035a3da415be9e9ecf5a49ec40b059a531530902",
        "md5": "d4bcb551e8726e73409005b23400ae86",
        "sha256": "28b6d86c821c01ea8b442a43a72c21a42859d3310d56202431c05d7060a9ab6e"
      },
      "downloads": -1,
      "filename": "pynche-2.0a1.tar.gz",
      "has_sig": true,
      "md5_digest": "d4bcb551e8726e73409005b23400ae86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 43931,
      "upload_time": "2022-06-11T22:16:32",
      "upload_time_iso_8601": "2022-06-11T22:16:32.137028Z",
      "url": "https://files.pythonhosted.org/packages/34/f3/78c0a45ab67ecd04f32e035a3da415be9e9ecf5a49ec40b059a531530902/pynche-2.0a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}