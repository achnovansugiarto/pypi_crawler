{
  "info": {
    "author": null,
    "author_email": "Alethea Katherine Flowers <thea@winterbloom.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# üç™ Gingerbread\n\n*Gingerbread* is a set of Python utilities used by [Winterbloom](https://winterbloom.com) to create decorative printed circuit boards (PCBs), such as the ones we used a front panels:\n\n![Front panels made from PCBs](readme_resources/speak2me.jpg)\n\nGingerbread consists of three utilities:\n\n* [`convert`](#using-convert) helps convert designs created with [Affinity Designer](https://affinity.serif.com/en-gb/designer/) to KiCAD PCB files.\n* [`fancytext`](#using-fancytext) is used to generate beautiful text labels for KiCAD PCBs.\n* [`trace`](#using-trace) is a re-implementation of KiCAD's \"Image Converter\" program ([bitmap2component](https://gitlab.com/kicad/code/kicad/-/tree/master/bitmap2component)) as a Python library and command line tool to enable automation.\n\n**NOTE**: This tool is *extremely* tailored to Winterbloom's needs. It's not perfect, it's not universal, and it probably won't work the way you think it will. Because of this, it comes with no warranty and no promise of support- again, **we won't be providing any free support for this.**\n\nThat said, you're welcome to try it out, learn from it, take code from it, and give us feedback or even [contribute](#contributing) if you'd like. If you'd like to pay us to add a feature or support some use case, [reach out](thea@winterbloom.com).\n\nThere are several [similar projects](#similar-projects) that might fit your use case better.\n\n\n## Installation\n\nPresently we've only ever tested on macOS and Linux. It might be tricky to get working regardless of platform, and it probably doesn't work on Windows except under WSL. There's a [Docker option](#docker), but it has some drawbacks.\n\n### macOS\n\nYou'll need [homebrew](https://brew.sh) and a few dependencies:\n\n```sh\nbrew install cairo pango pangocairo potrace\n```\n\nYou'll also need Python 3.10 or later. Install using `pip`:\n\n```sh\npython3 -m pip install gingerbread\n```\n\n### Linux / WSL\n\nAt the time of writing, Ubuntu 22.04 or later is your best bet. If you want to use Debian, you'll need to build [Python 3.10](https://realpython.com/installing-python/#how-to-build-python-from-source-code) or later and pango 1.50 or later, since the current versions are behind. This *should* work under WSL (Windows Subsystem for Linux), just be sure to use Ubuntu 22.04 or later.\n\nYou'll need at least the following system packages:\n\n```sh\nsudo apt install -y \\\n    build-essential \\\n    cmake \\\n    libpotrace-dev \\\n    libvips-dev \\\n    libcairo2 \\\n    libpango1.0-0 \\\n    libpangocairo-1.0-0 \\\n    libvips42\n```\n\nOnce you have the requisites installed, you can install Gingerbread:\n\n```sh\npython3 -m pip install --user gingerbread\n```\n\n### Docker\n\nThere's a rough Docker version of Gingerbread that you can use if all else fails. From our limited testing, `convert` works okay (although a bit slower), but `fancytext` does not work at all.\n\nTo use the Docker version, clone this repo:\n\n```sh\ngit clone https://github.com/wntrblm/Gingerbread.git\ncd Gingerbread\n```\n\nBuild the image- we don't publish it to Dockerhub because it's experimental:\n\n```sh\ndocker build -t gingerbread .\n```\n\nYou can now run Gingerbread using Docker. You'll need to pass the current working directory as a volume so that Gingerbread can read and write files. You can test this out on the included example file:\n\n```sh\ncd example\ndocker run --rm -v \"$PWD\":/workdir gingerbread -m gingerbread.convert example.svg\n```\n\n\n## Using convert\n\n`convert` is designed to convert designs created with [Affinity Designer](https://affinity.serif.com/en-gb/designer/) to KiCAD PCB files. `convert` requires a bit of work to set up, but once working you can rapidly iterate on your design.\n\nThere's an example in the `./example` directory, including the source `afdesign` file, the exported `svg`, and the generated `kicad_pcb`. It might be useful to look at the example as you work through these docs.\n\n\n### Page settings\n\nIt's *highly recommended* to set up your document in Affinity to use millimeters and to have a DPI of `2540`:\n\n![Affinity page settings](readme_resources/affinity-page-settings.png)\n\nWhy that specific DPI? Well, 2540 DPI happens to be 1000 dots-per-mm, which helpfully avoids rounding issues when exporting the design from Affinity and when converting the outline and drills. You can use other DPIs, just be sure to tell `convert` using the `--dpi` flag.\n\n\n### Creating an outline\n\nThe outline should be drawn on a layer named `Edge.Cuts` (or `EdgeCuts`) in Affinity. `convert` handles `Edge.Cuts` in a specific way to make sure that there is a 1-to-1 match between the size and units in Affinity and KiCAD. This approach can't handle as many complex edge cases as the rasterization approach used by the graphic layers, but as long as your paths have been converted to curves it should handle them well. `Edge.Cuts` can also contain \"cut-outs\"- closed paths within the overall board shape.\n\nThe example file has a complex outline with four internal cut-outs.\n\n\n### Graphics layers\n\nNon-transparent areas on layers `F.SilkS`, `B.SilkS`, `F.Cu`, and `B.Cu` in Affinity are converted as-is to the respective layers in KiCAD. `F.Mask` and `B.Mask` are \"inverted\" like they are in KiCAD, meaning that non-transparent areas indicate where to *remove* the soldermask. For all of these layers, `convert` works by rasterizing the individual layers to black and white images, re-vectorizing using `trace`, and plotting the results as a KiCAD footprint.\n\nThe example file has graphics on the `F.SilkS`, `F.Cu`, and `F.Mask` layers.\n\n\n### Drills\n\nItems on the `Drills` layer are handled seperately as well. `convert` walks through all of the shapes in the `Drills` layer and converts **only** circles to drills. This is again done to preserve position and size between Affinity and KiCAD.\n\nThe example file has a single drill in the center.\n\n\n### Exporting the design\n\nWhen exporting the design to an SVG, click the *More* button and setup the export parameters. Make sure that *Rasterize* is set to \"Nothing\", *Export text as curves* is checked, and *Flatten transforms* is checked.\n\n![Affinity export settings](readme_resources/affinity-export-settings.png)\n\nYou can save this as a preset to avoid having to change these every time you export.\n\n\n### Running convert\n\nOnce the design is exported as an SVG, you can run `convert` to turn it into a KiCAD PCB:\n\n```sh\npython3 -m gingerbread.convert design.svg\n```\n\n`convert` will report details about the converted PCB. Double-check this output to make sure that things match up with what you expect. For example. running convert on the example design shows:\n\n```\nconvert: Converting board outline\nconvert: Outline converted: overall board size is 100.00 mm x 100.00 mm (10000.00 mm¬≤).\nconvert: Converting drills\nconvert: Drills converted: 1\nconvert: Converting graphic layers\nconvert: F.SilkS    converted\nconvert: B.SilkS    not found\nconvert: F.Cu       converted\nconvert: B.Cu       not found\nconvert: F.Mask     converted\nconvert: B.Mask     not found\nconvert: Writing...\nconvert: Written to example.kicad_pcb üíú\n```\n\n`convert` has a several options for customizing the conversion process and the output. Run `python3 -m gingerbread.convert --help` to get a full list of options.\n\n\n## Using fancytext\n\n`fancytext` is intended to be relatively easy to use. It's a terminal application that copies the resulting label to your clipboard.\n\nThe most basic example is:\n\n```sh\npython3 -m gingerbread.fancytext \"example\"\n```\n\nWhich will generate a simple text label:\n\n![A simple text label](readme_resources/fancytext-1.png)\n\nThis rudimentary example isn't much more useful than KiCAD's own text facilities, but Fancytext gives you much more control.\n\nYou can change various aspects of how the text is rendered:\n\n```sh\npython3 -m gingerbread.fancytext --font \"Pluto\" --italic --size 3 \"example\"\n```\n\n![A fancier text label](readme_resources/fancytext-2.png)\n\nYou can run `python3 -m gingerbread.fancytext --help` to get a complete list of options.\n\nFancytext has another fancy trick- outlines. You can use outlines to call more attention to your text labels. There are various outline styles, starting with `--outline-stroke`:\n\n```sh\npython3 -m gingerbread.fancytext --outline-stroke 0.5 \"example\"\n```\n\n![A fancy stroked outline](readme_resources/fancytext-3.png)\n\nThere's also the more eye-catching `--outline-fill`:\n\n```sh\npython3 -m gingerbread.fancytext --outline-fill --outline-stroke 0.2 \"example\"\n```\n\n![A fancy filled outline](readme_resources/fancytext-4.png)\n\nThe shape of the end caps can be changed by wrapping your text in `[]`, `||`, `<>`, `()`, `//`, or `\\\\`, and you can mix and match:\n\n```sh\npython3 -m gingerbread.fancytext --outline-fill --outline-stroke 0.2 \"/example>\"\n```\n\n![A fancy filled outline with fancy caps](readme_resources/fancytext-5.png)\n\nThere are *lots* of options for customizing the look of these labels. You can run `python3 -m gingerbread.fancytext --help` to get a complete list of options. As an example, we like using these settings for our labels:\n\n```sh\npython3 -m gingerbread.fancytext --font \"Space Mono\" --bold --italic --stroke 0.1 --padding 0 0 --outline-stroke 0.2 --outline-fill \"fancytext\"\n```\n\nWhich ends up looking like this:\n\n![Winterbloom style fancy text](readme_resources/fancytext-6.png)\n\n\n## Using trace\n\n`trace` is fairly straightforward compared to the other tools in Gingerbread. Provide it with an image and it will provide you with a KiCAD footprint:\n\n```sh\npython3 -m gingerbread.trace footprint.png\n```\n\nThere's several options for `trace`, including the important `--dpi` option which tells `trace` the physical size that the footprint should be. Run `python3 -m gingerbread.trace --help` see all options.\n\n\n## Similar projects\n\nProjects similar to Gingerbread's `convert`:\n- [svg2shenzhen](https://github.com/badgeek/svg2shenzhen) is an Inkscape-based tool for creating PCBs and footprints from SVGs. Gingerbread shares a lot in common with svg2shenzhen's inner workings, but svg2shenzhen is much more broadly used and handles more use cases.\n- [Gerbolyze](https://github.com/jaseg/gerbolyze) renders both vector and raster artwork onto existing Gerber files. This is a very different approach than the one taken by Gingerbread and svg2shenzhen and can produce some incredible results through its grayscale emulation.\n- [PCBmodE](https://boldport.com/pcbmode) is a circuit board design program built on Inkscape.\n\nProjects similar to Fancytext:\n- [KiBuzzard](https://github.com/gregdavill/KiBuzzard) creates beautiful text labels. Fancytext is actually inspired by and inherits many stylistic choices from Buzzard. However, they differ in their implementation - Buzzard is vector graphics all the way through, whereas Fancytext has an intermediary rasterization step. KiBuzzard is also a KiCAD plugin with a GUI whereas Fancytext is (presently) a terminal application.\n\n\n## Acknowledgements\n\nGingerbread sits on the shoulders of the incredible work of other open source projects:\n\n- [cairosvg](https://cairosvg.org/) is used by `convert` to rasterize SVG files.\n- [cairo](https://www.cairographics.org/) (via [cairocffi](https://cairocffi.readthedocs.io/en/stable/)) is used by both `convert` and `fancytext` to render 2d graphics.\n- [pango](https://pango.gnome.org/) (via [pangocffi](https://pangocffi.readthedocs.io/en/stable/)) is used by `fancytext` to layout text.\n- [svgpathtools](https://github.com/mathandy/svgpathtools) is used by `convert` to process the board outline.\n- [rich](https://rich.readthedocs.io/en/stable/introduction.html) is used throughout for pretty terminal output.\n- [pyperclip](https://github.com/asweigart/pyperclip) is used to copy stuff to your clipboard.\n- [numpy](https://numpy.org/) is used extensively to shuffle data around between various libraries.\n- [vips](https://www.libvips.org/) (via [pyvips](https://libvips.github.io/pyvips/)) is used for processing images efficiently.\n- [potrace](http://potrace.sourceforge.net/) (via [potracecffi](https://github.com/wntrblm/potracecffi)) is used in `trace` for converting raster images to polygons.\n- [Gdsdk](https://heitzmann.github.io/gdstk/) and the underlying [Clipper](http://www.angusj.com/delphi/clipper/documentation/Docs/Overview/_Body.htm) library are used to wrangle polygons and punch holes in them.\n\nAdditionally, information and ideas from the following projects were used when building Gingerbread:\n\n- [svg2shenzhen](https://github.com/badgeek/svg2shenzhen)'s overall strategy for converting SVGs to KiCAD PCBs served as the starting point for Gingerbread's `convert`.\n- [pangocairocffi's tests](https://pangocairocffi.readthedocs.io/en/latest/tests.html) were used as a starting point when implementing `fancytext`'s text layout.\n- [librsvg's text.rs](https://gitlab.gnome.org/GNOME/librsvg/-/blob/main/src/text.rs#L1219w) was used as a reference for implementing `fancytext`'s text layout.\n- KiCAD's [bitmap2component](https://gitlab.com/kicad/code/kicad/-/tree/master/bitmap2component) was used as a reference for implementing `trace` and for testing its output.\n- KiCAD's [kimath](https://gitlab.com/kicad/code/kicad/-/tree/master/libs/kimath) was used as a reference for implementing `trace`'s polygon handling.\n- KiCAD's [S-Expression reference](https://dev-docs.kicad.org/en/file-formats/sexpr-intro/).\n\n\n## Contributing\n\nBecause this tool is so specifically tailored to Winterbloom's workflow, we aren't really expecting a lot of outside contributions. However, if you'd like to contribute please file an issue or reach out to us before you start writing code, so we can make sure it's something that'll be beneficial for all of us. :)\n\n\n## License\n\nGingerbread is published under the [MIT License](LICENSE)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "gingerbread",
    "package_url": "https://pypi.org/project/gingerbread/",
    "platform": null,
    "project_url": "https://pypi.org/project/gingerbread/",
    "project_urls": {
      "Source": "https://github.com/wntrblm/gingerbread"
    },
    "release_url": "https://pypi.org/project/gingerbread/2022.8.23/",
    "requires_dist": [
      "cairosvg",
      "cairocffi",
      "pangocffi",
      "pangocairocffi",
      "potracecffi",
      "svgpathtools",
      "rich",
      "defusedxml",
      "cssselect2",
      "pyperclip",
      "numpy",
      "pyvips",
      "gdstk"
    ],
    "requires_python": ">=3.10",
    "summary": "Gingerbread is a set of Python utilities used by Winterbloom",
    "version": "2022.8.23",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14852612,
  "releases": {
    "2022.8.23": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "6784115eda454990db135340c0fc2fb0e2bc0b97abeaef2991142b3a39341cb2",
          "md5": "b5cb52c39b0cea09cd6a5672942615af",
          "sha256": "de23dbd375670abfe06bba13780532c515b5f9d1945841c0d629eb269e4b7f2d"
        },
        "downloads": -1,
        "filename": "gingerbread-2022.8.23-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5cb52c39b0cea09cd6a5672942615af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 29168,
        "upload_time": "2022-08-23T17:22:16",
        "upload_time_iso_8601": "2022-08-23T17:22:16.009160Z",
        "url": "https://files.pythonhosted.org/packages/67/84/115eda454990db135340c0fc2fb0e2bc0b97abeaef2991142b3a39341cb2/gingerbread-2022.8.23-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "3f77f22d860b09173545fb9655bd47c90a17a64e16bc68779715a72e7793da1e",
          "md5": "40e6c50418418cb34695ca0488526bc5",
          "sha256": "4133657a35a5db56898520dd722a829cfea9ac31dc4657a521889fc9b43096c4"
        },
        "downloads": -1,
        "filename": "gingerbread-2022.8.23.tar.gz",
        "has_sig": false,
        "md5_digest": "40e6c50418418cb34695ca0488526bc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 3247207,
        "upload_time": "2022-08-23T17:22:18",
        "upload_time_iso_8601": "2022-08-23T17:22:18.735779Z",
        "url": "https://files.pythonhosted.org/packages/3f/77/f22d860b09173545fb9655bd47c90a17a64e16bc68779715a72e7793da1e/gingerbread-2022.8.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "6784115eda454990db135340c0fc2fb0e2bc0b97abeaef2991142b3a39341cb2",
        "md5": "b5cb52c39b0cea09cd6a5672942615af",
        "sha256": "de23dbd375670abfe06bba13780532c515b5f9d1945841c0d629eb269e4b7f2d"
      },
      "downloads": -1,
      "filename": "gingerbread-2022.8.23-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b5cb52c39b0cea09cd6a5672942615af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 29168,
      "upload_time": "2022-08-23T17:22:16",
      "upload_time_iso_8601": "2022-08-23T17:22:16.009160Z",
      "url": "https://files.pythonhosted.org/packages/67/84/115eda454990db135340c0fc2fb0e2bc0b97abeaef2991142b3a39341cb2/gingerbread-2022.8.23-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "3f77f22d860b09173545fb9655bd47c90a17a64e16bc68779715a72e7793da1e",
        "md5": "40e6c50418418cb34695ca0488526bc5",
        "sha256": "4133657a35a5db56898520dd722a829cfea9ac31dc4657a521889fc9b43096c4"
      },
      "downloads": -1,
      "filename": "gingerbread-2022.8.23.tar.gz",
      "has_sig": false,
      "md5_digest": "40e6c50418418cb34695ca0488526bc5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 3247207,
      "upload_time": "2022-08-23T17:22:18",
      "upload_time_iso_8601": "2022-08-23T17:22:18.735779Z",
      "url": "https://files.pythonhosted.org/packages/3f/77/f22d860b09173545fb9655bd47c90a17a64e16bc68779715a72e7793da1e/gingerbread-2022.8.23.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}