{
  "info": {
    "author": "Austin S. Hemmelgarn et al.",
    "author_email": "<ahferroin7 AT gmail DOT com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Other/Nonlisted Topic",
      "Topic :: System :: Filesystems",
      "Topic :: System :: Systems Administration",
      "Topic :: Utilities"
    ],
    "description": "cleanfree v0.1a, a simple program to zero out free fs blocks\n\ncleanfree is a relatively simple program written in python, designed to\nwrite zeros to unused data blocks on a filesystem.  This is primarily\nindented for use on filesystems in virtualized hard disks, where the\nvirtual machine manager can sometimes reclaim the empty space for reuse\non the host system.  Traditionally this would be done using something like\n'dd if=/dev/zero of=/somefile'; that method has some major disadvantages:\n    * It takes a lot of time for a big disk.\n    * It uses all of the available disk space, causing concurrent writes\n      to fail.\nThere have already been some programs made to do essentially the same\nthing, but all the ones that I know of at the time are specific to a\nparticular filesystem, and they lack some otherwise useful features\n(like dumping a list of free blocks to stdout), cleanfree is intended\nto address these issues.\n\ncleanfree needs Python > 3.0 to run; for more info on Python, check\nout <http://www.python.org>.  Currently, cleanfree only runs on POSIX\nderived systems, because it needs to be able to access disk partitions\nas files.\n\nVersion 1 will support FAT filesystems, support for other filesystems\nwill be added in subsequent versions.\n\nFilesystems that I specifically plan to support:\n    * FAT (FAT16, FAT32, VFAT)\n    * UFS1 (BSD's FFS)\n    * UFS2 (From FreeBSD)\n    * Amiga FFS\n    * Amiga SFS\n    * MINIX FS\n    * BFS (BeOS FS, the newer 64 bit version)\n    * ext2/3/4\n    * HFS\n    * HFS+\n    * XFS\n    * Btrfs (Once it has stabilized more)\n\nFilesystems that I may support if I can get documentation and have\nsufficient time:\n    * Acorn Disk Filing System\n    * AthFS\n    * Fossil\n    * FAT12\n    * FATX\n    * OS/2 HPFS\n    * NTFS\n    * IBM JFS\n    * Novell Storage Services\n    * ReFS\n    * Reiser\n    * Reiser4\n    * VxFS\n    * ZFS\n    * HAMMER\n\nFilesystems that I won't support, and the reasons why:\n    * Any Log structured FS (NILFS, NILFS2, BSD's LFS, WAFL, LogFS):\n      Won't be supported because rewriting the unused blocks in a log\n      structured file system essentially invalidates the primary arguments\n      for using such a filesystem to begin with.\n    * Flash file systems (exFAT, FFS2, JFFS, JFFS2, TFAT, UBIFS, YAFFS):\n      Won't be supported for the reasons mentioned above under Log\n      structured FS; plus, the number of read/erase/rewrite cycles that\n      doing this to a flash device would generate would severely shorten\n      the life of the device.\n    * Any FS that is inherently read-only (cramfs, cromfs, squashfs):\n      Won't be supported because these filesystems don't have free blocks,\n      any block that is part of the fs is always in use.  If you need to\n      get rid of redundant or 'unused' blocks in such a FS, you should\n      rebuild the fs itself.\n    * CD/DVD Filesystems (ISO9660, UDF, and their derivatives): Won't be\n      supported because of the reasons mentioned for read only filesystems.\n    * Distributed/Network Filesystems: Won't be supported because the\n      operation needs to be done on the underlying filesystem instead.\n      Some that have a dedicated on disk format may be supported.\n    * AdvFS (used by Tru64), CP/M FS, Macintosh FS, NetWare FS, Amiga\n      OFS, Amiga PFS, QNX4fs, QNX6fs, SkyFS: Won't be supported due to\n      the lack of documentation and/or lack of widespread use, although\n      if you want to add support yourself, I would be happy to add the\n      appropriate patches.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ferroin/cleanfree/",
    "keywords": "Virtualization, Maintnence, Filesystem, Disk Image",
    "license": "Apache Software License v2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cleanfree",
    "package_url": "https://pypi.org/project/cleanfree/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/cleanfree/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/Ferroin/cleanfree/"
    },
    "release_url": "https://pypi.org/project/cleanfree/0.1.0a/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A simple program to zero out free blocks on the filesystem.",
    "version": "0.1.0a",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 482119,
  "releases": {
    "0.1.0a": []
  },
  "urls": [],
  "vulnerabilities": []
}