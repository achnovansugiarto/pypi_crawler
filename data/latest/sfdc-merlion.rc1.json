{
  "info": {
    "author": "Aadyot Bhatnagar, Paul Kassianik, Chenghao Liu, Tian Lan, Wenzhuo Yang, Rowan Cassius, Doyen Sahoo, Devansh Arpit, Sri Subramanian, Gerald Woo, Amrita Saha, Arun Kumar Jagota, Gokulakrishnan Gopalakrishnan, Manpreet Singh, K C Krithika, Sukumar Maddineni, Daeki Cho, Bo Zong, Yingbo Zhou, Caiming Xiong, Silvio Savarese, Steven Hoi, Huan Wang",
    "author_email": "abhatnagar@salesforce.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<div align=\"center\">\n<img alt=\"Logo\" src=\"https://github.com/salesforce/Merlion/raw/main/merlion_logo.svg\" width=\"80%\"/>\n</div>\n\n<div align=\"center\">\n  <a href=\"https://github.com/salesforce/Merlion/actions\">\n  <img alt=\"Tests\" src=\"https://github.com/salesforce/Merlion/actions/workflows/tests.yml/badge.svg?branch=main\"/>\n  </a>\n  <a href=\"https://github.com/salesforce/Merlion/actions\">\n  <img alt=\"Coverage\" src=\"https://github.com/salesforce/Merlion/raw/badges/coverage.svg\"/>\n  </a>\n  <a href=\"https://pypi.python.org/pypi/sfdc-merlion\">\n  <img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/sfdc-merlion.svg\"/>\n  </a>\n  <a href=\"https://salesforce.github.io/Merlion\">\n  <img alt=\"docs\" src=\"https://github.com/salesforce/Merlion/actions/workflows/docs.yml/badge.svg\"/>\n  </a>\n</div>\n\n# Merlion: A Machine Learning Library for Time Series\n\n## Table of Contents\n1. [Introduction](#introduction)\n1. [Installation](#installation)\n1. [Documentation](#documentation)\n1. [Getting Started](#getting-started)\n    1. [Anomaly Detection](#anomaly-detection)\n    1. [Forecasting](#forecasting)\n1. [Evaluation and Benchmarking](#evaluation-and-benchmarking)\n1. [Technical Report and Citing Merlion](#technical-report-and-citing-merlion)\n\n## Introduction\nMerlion is a Python library for time series intelligence. It provides an end-to-end machine learning framework that\nincludes loading and transforming data, building and training models, post-processing model outputs, and evaluating\nmodel performance. It supports various time series learning tasks, including forecasting and anomaly detection for both\nunivariate and multivariate time series. This library aims to provide engineers and researchers a one-stop solution to\nrapidly develop models for their specific time series needs, and benchmark them across multiple time series datasets.\n\nMerlion's key features are\n-  Standardized and easily extensible data loading & benchmarking for a wide range of forecasting and anomaly\n   detection datasets.\n-  A library of diverse models for both anomaly detection and forecasting, unified undera shared interface. Models include classic statistical methods, tree ensembles, and deeplearning approaches. Advanced users may fully configure each model as desired.\n-  Abstract `DefaultDetector` and `DefaultForecaster` models that are efficient, robustly achieve good performance, and provide a starting point for new users.\n-  AutoML for automated hyperaparameter tuning and model selection.\n-  Practical, industry-inspired post-processing rules for anomaly detectors that make anomaly scores more interpretable, while also reducing the number of false positives.\n-  Easy-to-use ensembles that combine the outputs of multiple models to achieve more robust performance. \n-  Flexible evaluation pipelines that simulate the live deployment & re-training of a model in production,\n   and evaluate performance on both forecasting and anomaly detection.\n-  Native support for visualizing model predictions.\n\nThe table below provides a visual overview of how Merlion's key features compare to other libraries for time series\nanomaly detection and/or forecasting.\n\n|                     | Merlion | Alibi Detect | Kats | statsmodels | GluonTS | RRCF | STUMPY | Greykite | Prophet | pmdarima \n:---                  | :---:     | :---:|  :---:  | :---: | :---: | :---: | :---: | :---: | :----: | :---:\n| Univariate Forecasting | ✅      | | ✅    | ✅          | ✅       |      |      |✅        | ✅      | ✅ \n| Multivariate Forecasting | ✅ | | ✅ | ✅ | ✅ | | | | | | \n| Univariate Anomaly Detection | ✅ | ✅ | ✅ | | | ✅ | ✅ | ✅ | ✅ | \n| Multivariate Anomaly Detection | ✅ | ✅ | ✅ | | | ✅ | ✅ | | | |\n| AutoML | ✅ | | ✅ | | | | | ✅ | | ✅ \n| Ensembles | ✅ | | | | | ✅  | | | | \n| Benchmarking | ✅ | | | | ✅ | | | | | \n| Visualization | ✅ | | ✅ | | | | | ✅ | ✅ | | \n\n## Installation\n\nMerlion consists of two sub-repos: `merlion` implements the library's core time series intelligence features,\nand `ts_datasets` provides standardized data loaders for multiple time series datasets. These loaders load\ntime series as ``pandas.DataFrame`` s with accompanying metadata.\n\nYou can install `merlion` from PyPI by calling ``pip install sfdc-merlion``. You may install from source by\ncloning this repo, navigating to the root directory, and calling ``pip install .``, or ``pip install -e .`` to\ninstall in editable mode. You may install  additional dependencies for plotting & visualization via\n``pip install sfdc-merlion[plot]``, or by calling ``pip install \".[plot]\"`` from the root directory of this repo.\n\nTo install the data loading package `ts_datasets`, clone this repo, navigate to its root directory, and call\n``pip install -e ts_datasets/``. This package must be installed in editable mode (i.e. with the ``-e`` flag)\nif you don't want  to manually specify the root directory of every dataset when initializing its data loader.\n\nNote the following external dependencies:\n\n1. Some of our forecasting models depend on OpenMP. If using ``conda``, please ``conda install -c conda-forge lightgbm``\n   before installing our package. This will ensure that OpenMP is configured to work with the ``lightgbm`` package\n   (one of our dependencies) in your ``conda`` environment. If using Mac, please install [Homebrew](https://brew.sh/)\n   and call ``brew install libomp`` so that the OpenMP libary is available for the model.\n\n2. Some of our anomaly detection models depend on the Java Development Kit (JDK). For Ubuntu, call\n   ``sudo apt-get install openjdk-11-jdk``. For Mac OS, install [Homebrew](<https://brew.sh/>) and call\n   ``brew tap adoptopenjdk/openjdk && brew install --cask adoptopenjdk11``.\n\n## Documentation\n\nFor example code and an introduction to Merlion, see the Jupyter notebooks in\n[`examples`](https://github.com/salesforce/Merlion/tree/main/examples), and the guided walkthrough\n[here](https://salesforce.github.io/Merlion/tutorials.html). You may find detailed API documentation (including the\nexample code) [here](https://salesforce.github.io/Merlion/). The\n[technical report](https://arxiv.org/abs/2109.09265) outlines Merlion's overall architecture\nand presents experimental results on time series anomaly detection & forecasting for both univariate and multivariate\ntime series.\n\n## Getting Started\nHere, we provide some minimal examples using Merlion default models, \nto help you get started with both anomaly detection and forecasting.\n\n### Anomaly Detection\nWe begin by importing Merlion’s `TimeSeries` class and the data loader for the Numenta Anomaly Benchmark `NAB`.\nWe can then divide a specific time series from this dataset into training and testing splits.\n\n```python\nfrom merlion.utils import TimeSeries\nfrom ts_datasets.anomaly import NAB\n\n# Data loader returns pandas DataFrames, which we convert to Merlion TimeSeries\ntime_series, metadata = NAB(subset=\"realKnownCause\")[3]\ntrain_data = TimeSeries.from_pd(time_series[metadata.trainval])\ntest_data = TimeSeries.from_pd(time_series[~metadata.trainval])\ntest_labels = TimeSeries.from_pd(metadata.anomaly[~metadata.trainval])\n```\n\nWe can then initialize and train Merlion’s `DefaultDetector`, which is an anomaly detection model that\nbalances performance with efficiency. We also obtain its predictions on the test split.\n\n```python\nfrom merlion.models.defaults import DefaultDetectorConfig, DefaultDetector\nmodel = DefaultDetector(DefaultDetectorConfig())\nmodel.train(train_data=train_data)\ntest_pred = model.get_anomaly_label(time_series=test_data)\n```\n\nNext, we visualize the model's predictions.\n\n```python\nfrom merlion.plot import plot_anoms\nimport matplotlib.pyplot as plt\nfig, ax = model.plot_anomaly(time_series=test_data)\nplot_anoms(ax=ax, anomaly_labels=test_labels)\nplt.show()\n```\n![anomaly figure](https://github.com/salesforce/Merlion/raw/main/figures/anom_example.png)\n\nFinally, we can quantitatively evaluate the model. The precision and recall come from the fact that the model\nfired 3 alarms, with 2 true positives, 1 false negative, and 1 false positive. We also evaluate the mean time\nthe model took to detect each anomaly that it correctly detected.\n\n```python\nfrom merlion.evaluate.anomaly import TSADMetric\np = TSADMetric.Precision.value(ground_truth=test_labels, predict=test_pred)\nr = TSADMetric.Recall.value(ground_truth=test_labels, predict=test_pred)\nf1 = TSADMetric.F1.value(ground_truth=test_labels, predict=test_pred)\nmttd = TSADMetric.MeanTimeToDetect.value(ground_truth=test_labels, predict=test_pred)\nprint(f\"Precision: {p:.4f}, Recall: {r:.4f}, F1: {f1:.4f}\\n\"\n      f\"Mean Time To Detect: {mttd}\")\n```\n```\nPrecision: 0.6667, Recall: 0.6667, F1: 0.6667\nMean Time To Detect: 1 days 10:30:00\n```\n### Forecasting\nWe begin by importing Merlion’s `TimeSeries` class and the data loader for the `M4` dataset. We can then divide a\nspecific time series from this dataset into training and testing splits.\n\n```python\nfrom merlion.utils import TimeSeries\nfrom ts_datasets.forecast import M4\n\n# Data loader returns pandas DataFrames, which we convert to Merlion TimeSeries\ntime_series, metadata = M4(subset=\"Hourly\")[0]\ntrain_data = TimeSeries.from_pd(time_series[metadata.trainval])\ntest_data = TimeSeries.from_pd(time_series[~metadata.trainval])\n```\n\nWe can then initialize and train Merlion’s `DefaultForecaster`, which is an forecasting model that balances\nperformance with efficiency. We also obtain its predictions on the test split.\n\n```python\nfrom merlion.models.defaults import DefaultForecasterConfig, DefaultForecaster\nmodel = DefaultForecaster(DefaultForecasterConfig())\nmodel.train(train_data=train_data)\ntest_pred, test_err = model.forecast(time_stamps=test_data.time_stamps)\n```\n\nNext, we visualize the model’s predictions.\n\n```python\nimport matplotlib.pyplot as plt\nfig, ax = model.plot_forecast(time_series=test_data, plot_forecast_uncertainty=True)\nplt.show()\n```\n![forecast figure](https://github.com/salesforce/Merlion/raw/main/figures/forecast_example.png)\n\nFinally, we quantitatively evaluate the model. sMAPE measures the error of the prediction on a scale of 0 to 100\n(lower is better), while MSIS evaluates the quality of the 95% confidence band on a scale of 0 to 100 (lower is better).\n\n```python\n# Evaluate the model's predictions quantitatively\nfrom scipy.stats import norm\nfrom merlion.evaluate.forecast import ForecastMetric\n\n# Compute the sMAPE of the predictions (0 to 100, smaller is better)\nsmape = ForecastMetric.sMAPE.value(ground_truth=test_data, predict=test_pred)\n\n# Compute the MSIS of the model's 95% confidence interval (0 to 100, smaller is better)\nlb = TimeSeries.from_pd(test_pred.to_pd() + norm.ppf(0.025) * test_err.to_pd().values)\nub = TimeSeries.from_pd(test_pred.to_pd() + norm.ppf(0.975) * test_err.to_pd().values)\nmsis = ForecastMetric.MSIS.value(ground_truth=test_data, predict=test_pred,\n                                 insample=train_data, lb=lb, ub=ub)\nprint(f\"sMAPE: {smape:.4f}, MSIS: {msis:.4f}\")\n```\n```\nsMAPE: 6.2855, MSIS: 19.1584\n```\n\n## Evaluation and Benchmarking\n\nOne of Merlion's key features is an evaluation pipeline that simulates the live deployment\nof a model on historical data. This enables you to compare models on the datasets relevant\nto them, under the conditions that they may encounter in a production environment. Our\nevaluation pipeline proceeds as follows:\n1. Train an initial model on recent historical training data (designated as the training split of the time series)\n1. At a regular interval (e.g. once per day), retrain the entire model on the most recent data. This can be either the\n   entire history of the time series, or a more limited window (e.g. 4 weeks).\n1. Obtain the model's predictions (anomaly scores or forecasts) for the time series values that occur between\n   re-trainings. You may customize whether this should be done in batch (predicting all values at once),\n   streaming (updating the model's internal state after each data point without fully re-training it),\n   or some intermediate cadence.\n1. Compare the model's predictions against the ground truth (labeled anomalies for anomaly detection, or the actual\n   time series values for forecasting), and report quantitative evaluation metrics.\n\nWe provide scripts that allow you to use this pipeline to evaluate arbitrary models on arbitrary datasets.\nFor example, invoking\n```shell script\npython benchmark_anomaly.py --dataset NAB_realAWSCloudwatch --model IsolationForest --retrain_freq 1d\n``` \nwill evaluate the anomaly detection performance of the `IsolationForest` (retrained once a day) on the\n\"realAWSCloudwatch\" subset of the NAB dataset.  Similarly, invoking\n```shell script\npython benchmark_forecast.py --dataset M4_Hourly --model ETS\n```\nwill evaluate the batch forecasting performance (i.e. no retraining) of `ETS` on the \"Hourly\" subset of the M4 dataset. \nYou can find the results produced by running these scripts in the Experiments section of the\n[technical report](https://arxiv.org/abs/2109.09265).\n\n## Technical Report and Citing Merlion\nYou can find more details in our technical report: https://arxiv.org/abs/2109.09265\n\nIf you're using Merlion in your research or applications, please cite using this BibTeX:\n```\n@article{bhatnagar2021merlion,\n      title={Merlion: A Machine Learning Library for Time Series},\n      author={Aadyot Bhatnagar and Paul Kassianik and Chenghao Liu and Tian Lan and Wenzhuo Yang\n              and Rowan Cassius and Doyen Sahoo and Devansh Arpit and Sri Subramanian and Gerald Woo\n              and Amrita Saha and Arun Kumar Jagota and Gokulakrishnan Gopalakrishnan and Manpreet Singh\n              and K C Krithika and Sukumar Maddineni and Daeki Cho and Bo Zong and Yingbo Zhou\n              and Caiming Xiong and Silvio Savarese and Steven Hoi and Huan Wang},\n      year={2021},\n      eprint={2109.09265},\n      archivePrefix={arXiv},\n      primaryClass={cs.LG}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/salesforce/Merlion",
    "keywords": "time series,forecasting,anomaly detection,machine learning,autoML,ensemble learning,benchmarking,Python,scientific toolkit",
    "license": "3-Clause BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sfdc-merlion",
    "package_url": "https://pypi.org/project/sfdc-merlion/",
    "platform": "",
    "project_url": "https://pypi.org/project/sfdc-merlion/",
    "project_urls": {
      "Homepage": "https://github.com/salesforce/Merlion"
    },
    "release_url": "https://pypi.org/project/sfdc-merlion/1.0.0/",
    "requires_dist": [
      "cython",
      "dill",
      "fbprophet",
      "GitPython",
      "JPype1 (==1.0.2)",
      "matplotlib",
      "numpy (!=1.18.*)",
      "pandas (>=1.1.0)",
      "pystan (<3.0\")",
      "scikit-learn (>=0.22)",
      "scipy (>=1.5.0)",
      "statsmodels (>=0.12.2)",
      "torch (>=1.1.0)",
      "lightgbm",
      "tqdm",
      "wheel",
      "pytest",
      "plotly (>=4.13) ; extra == 'plot'"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Merlion: A Machine Learning Framework for Time Series Intelligence",
    "version": "1.0.0",
    "yanked": true,
    "yanked_reason": "Deprecated package. Please install the package salesforce-merlion instead."
  },
  "last_serial": 11533045,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35fd3d3b68652c4d30f896a8c9520370059b1c6928edf99fcfc24070e50822ee",
          "md5": "e467a7a42b10ae1be5c3446ba1e72dd8",
          "sha256": "f4a62b1a5010948a2bc35059ea130c4159d4b8069d70003fdadf83292a587747"
        },
        "downloads": -1,
        "filename": "sfdc_merlion-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e467a7a42b10ae1be5c3446ba1e72dd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 522815,
        "upload_time": "2021-09-21T17:45:16",
        "upload_time_iso_8601": "2021-09-21T17:45:16.894868Z",
        "url": "https://files.pythonhosted.org/packages/35/fd/3d3b68652c4d30f896a8c9520370059b1c6928edf99fcfc24070e50822ee/sfdc_merlion-1.0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Deprecated package. Please install the package salesforce-merlion instead."
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cc4eb99394a32b3481c23cc077fb66a979eca58b99697ed14f67f6f988c0001",
          "md5": "93eb88a135a4ce4f406fd57dfe791052",
          "sha256": "e17dd88b7307ec4c5152f10d6bc0437c77d4f394171d72b87d7b0866cdfc35a6"
        },
        "downloads": -1,
        "filename": "sfdc-merlion-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "93eb88a135a4ce4f406fd57dfe791052",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 480300,
        "upload_time": "2021-09-21T17:45:18",
        "upload_time_iso_8601": "2021-09-21T17:45:18.774785Z",
        "url": "https://files.pythonhosted.org/packages/2c/c4/eb99394a32b3481c23cc077fb66a979eca58b99697ed14f67f6f988c0001/sfdc-merlion-1.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Deprecated package. Please install the package salesforce-merlion instead."
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35fd3d3b68652c4d30f896a8c9520370059b1c6928edf99fcfc24070e50822ee",
        "md5": "e467a7a42b10ae1be5c3446ba1e72dd8",
        "sha256": "f4a62b1a5010948a2bc35059ea130c4159d4b8069d70003fdadf83292a587747"
      },
      "downloads": -1,
      "filename": "sfdc_merlion-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e467a7a42b10ae1be5c3446ba1e72dd8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 522815,
      "upload_time": "2021-09-21T17:45:16",
      "upload_time_iso_8601": "2021-09-21T17:45:16.894868Z",
      "url": "https://files.pythonhosted.org/packages/35/fd/3d3b68652c4d30f896a8c9520370059b1c6928edf99fcfc24070e50822ee/sfdc_merlion-1.0.0-py3-none-any.whl",
      "yanked": true,
      "yanked_reason": "Deprecated package. Please install the package salesforce-merlion instead."
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2cc4eb99394a32b3481c23cc077fb66a979eca58b99697ed14f67f6f988c0001",
        "md5": "93eb88a135a4ce4f406fd57dfe791052",
        "sha256": "e17dd88b7307ec4c5152f10d6bc0437c77d4f394171d72b87d7b0866cdfc35a6"
      },
      "downloads": -1,
      "filename": "sfdc-merlion-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "93eb88a135a4ce4f406fd57dfe791052",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 480300,
      "upload_time": "2021-09-21T17:45:18",
      "upload_time_iso_8601": "2021-09-21T17:45:18.774785Z",
      "url": "https://files.pythonhosted.org/packages/2c/c4/eb99394a32b3481c23cc077fb66a979eca58b99697ed14f67f6f988c0001/sfdc-merlion-1.0.0.tar.gz",
      "yanked": true,
      "yanked_reason": "Deprecated package. Please install the package salesforce-merlion instead."
    }
  ],
  "vulnerabilities": []
}