{
  "info": {
    "author": "Talha Ilyas",
    "author_email": "mr.talhailyas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\r\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)\r\n [![Generic badge](https://img.shields.io/badge/Version-0.2.2-<COLOR>.svg)](https://shields.io/) [![Downloads](https://pepy.tech/badge/empatches)](https://pepy.tech/project/empatches)  [![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fpypi.org%2Fproject%2Fempatches%2F&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=hits&edge_flat=false)](https://hits.seeyoufarm.com)\r\n\r\n# Extract and Merge Image Patches (EMPatches)\r\n\r\nExtract and Merge Batches/Image patches (tf/torch), fast and self-contained digital image processing and deep learning model training.\r\n\r\n* **Extract** patches\r\n* **Merge** the extracted patches to obtain the original image back.\r\n### *Upadate 0.2.2 (New Functionalities)*\r\n\r\n* Handling 1D spectral and 3D volumetric data structures, thanks to [antonyvam](https://github.com/antonyvam).\r\n* Batch processing support for 1D, 2D, 3D (image/pixel + voxel/volumetric) data added.\r\n* Bug fixes for multi-dimensional image patch merging for `C > 3`.\r\n\r\n### *Update 0.2.0*\r\n\r\n* Handling of `tensorflow`/`pytorch` **Batched images** of shape `BxCxHxW` -> `pytorch` or `BxHxWxC` -> `tf`. C can be any number not limited to just RGB channels.\r\n* **Modes** added for mergeing patches.\r\n    1. `overwrite`: next patch will overwrite the overlapping area of the previous patch.\r\n    2. `max` : maximum value of overlapping area at each pixel will be written.\r\n    3. `min`: minimum value of overlapping area at each pixel will be written.\r\n    4. `avg` : mean/average value of overlapping area at each pixel will be written.\r\n* Patching via providing **Indices**.\r\n* **Strided** patching thanks to [Andreasgejlm](https://github.com/Andreasgejlm)\r\n\r\n## Dependencies\r\n\r\n```\r\npython >= 3.6\r\nnumpy \r\nmath\r\n```\r\n\r\n# Usage\r\n* [Extracting Patches](#Extracting-Patches)\r\n* [Merging Patches](#Merging-Patches)\r\n* [Voxel/Volumetric Data patching](#Voxel-patching)\r\n* [1D spectral Data patching](#1D-patching)\r\n* [Strided Patching](#Strided-Patching)\r\n* [Batched Patching](#Batched-Patching)\r\n* [Patching via Providing Indices](#Patching-via-Providing-Indices)\r\n\r\n## <a name=\"Extracting-Patches\">Extracting Patches</a>\r\n```python\r\nfrom empatches import EMPatches\r\nimport imgviz # just for plotting\r\n\r\n# get image either RGB or Grayscale\r\nimg = cv2.imread('../digits.jpg')\r\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\r\n```\r\n\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/digit.jpg)\r\n\r\n```python\r\n# load module\r\nemp = EMPatches()\r\nimg_patches, indices = emp.extract_patches(img, patchsize=512, overlap=0.2)\r\n\r\n# displaying 1st 10 image patches\r\ntiled= imgviz.tile(list(map(np.uint8, img_patches)),border=(255,0,0))\r\nplt.figure()\r\nplt.imshow(tiled)\r\n```\r\n\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/patched.png)\r\n\r\n## Image Processing\r\nNow we can perform our operation on each patch independently and after we are done we can merge them back together.\r\n\r\n```python\r\n'''\r\npseudo code\r\n'''\r\n# do some processing, just store the patches in the list in same order\r\nimg_patches_processed = some_processing_func(img_patches)\r\n# or run your deep learning model on patches independently and then merge the predictions\r\nimg_patches_processed = model.predict(img_patches)\r\n'''For now lets just flip channels'''\r\nimg_patches[1] = cv2.cvtColor(img_patches[1], cv2.COLOR_BGR2RGB)\r\n```\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/patched_process.png)\r\n\r\n## <a name=\"Merging-Patches\">Merging-Patches</a>\r\n\r\nAfter processing the patches if you can merge all of them back in original form as follows,\r\n\r\n```python\r\nmerged_img = emp.merge_patches(img_patches, indices, mode='max') # or\r\nmerged_img = emp.merge_patches(img_patches, indices, mode='min') # or\r\nmerged_img = emp.merge_patches(img_patches, indices, mode='overwrite') # or\r\nmerged_img = emp.merge_patches(img_patches, indices, mode='avg') # or\r\n# display\r\nplt.figure()\r\nplt.imshow(merged_img.astype(np.uint8))\r\nplt.title(Your mode)\r\n```\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/modesS.png)\r\n\r\n## <a name=\"Strided-Patching\">Strided Patching</a>\r\n\r\n```python\r\nimg_patches, indices = emp.extract_patches(img, patchsize=512, overlap=0.2, stride=128)\r\ntiled= imgviz.tile(list(map(np.uint8, img_patches)),border=(255,0,0))\r\nplt.figure()\r\nplt.imshow(tiled.astype(np.uint8))\r\nplt.title('Strided patching')\r\n```\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/stride.png)\r\n\r\n## <a name=\"Voxel-patching\">Volumetric/Voxel data patching</a>\r\n\r\n```python\r\n# first generate a sample data\r\ndef midpoints(x):\r\n    sl = ()\r\n    for i in range(x.ndim):\r\n        x = (x[sl + np.index_exp[:-1]] + x[sl + np.index_exp[1:]]) / 2.0\r\n        sl += np.index_exp[:]\r\n    return x\r\nr, g, b = np.indices((17, 17, 17)) / 16.0\r\nrc = midpoints(r)\r\ngc = midpoints(g)\r\nbc = midpoints(b)\r\n# define a sphere about [0.5, 0.5, 0.5]\r\nsphere = ((rc - 0.5)**2 + (gc - 0.5)**2 + (bc - 0.5)**2 < 0.5**2).astype(int)\r\n\r\nax = plt.figure().add_subplot(projection='3d')\r\nax.voxels(sphere)\r\nplt.title(f'Voxel 3D data: {sphere.shape} shape')\r\n```\r\n\r\nExtract patches from voxel 3D data.\r\n\r\n```python\r\nemp = EMPatches()\r\npatches, indices  = emp.extract_patches(sphere, patchsize=8, overlap=0.0, stride=None, vox=True)\r\n\r\nax = plt.figure().add_subplot(projection='3d')\r\nax.voxels(patches[1])\r\nplt.title(f'Patched Voxel 3D data: {patches[0].shape} shape')\r\n\r\nfor i in range(len(patches)):\r\n    print(patches[i].shape)\r\n\r\nmp = emp.merge_patches(patches, indices)\r\n\r\n```\r\n```\r\n###############___VOXEL DATA___ setting vox to True ########################\r\n##  shape     indices in xyz dimension\r\n>> (8, 8, 8) (0, 8, 0, 8, 0, 8)\r\n>> (8, 8, 8) (0, 8, 0, 8, 8, 16)\r\n>> (8, 8, 8) (8, 16, 0, 8, 0, 8)\r\n>> (8, 8, 8) (8, 16, 0, 8, 8, 16)\r\n>> (8, 8, 8) (0, 8, 8, 16, 0, 8)\r\n>> (8, 8, 8) (0, 8, 8, 16, 8, 16)\r\n>> (8, 8, 8) (8, 16, 8, 16, 0, 8)\r\n>> (8, 8, 8) (8, 16, 8, 16, 8, 16)\r\n```\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/v4.png)\r\n\r\n### *⚠️NOTE⚠️*\r\nHere the output shape is 8x8x8 i.e. the croping is also done in D/C dimension unlike when we are doing image croping/patching in that case the output would have shape 8x8x3 (RGB) or 8x8 (grayscale), and incides would be like.\r\n\r\n```\r\n###############___PIXEL DATA___ -> setting vox to False ########################\r\n##  shape     indices in xy dimension\r\n>> (8, 8, 16) (0, 8, 0, 8)\r\n>> (8, 8, 16) (8, 16, 0, 8)\r\n>> (8, 8, 16) (0, 8, 8, 16)\r\n>> (8, 8, 16) (8, 16, 8, 16)\r\n```\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/v3.png)\r\n\r\n## <a name=\"1D-patching\">1D spectral Data patching</a>\r\n\r\n\r\n```python\r\nx1 = np.linspace(0.0, 5.0)\r\ny1 = np.cos(5 * np.pi * x1) * np.exp(-x1)\r\nplt.plot(y1)\r\nplt.title('1D spectra')\r\n\r\nemp = EMPatches()\r\npatches, indices  = emp.extract_patches(y1, patchsize=8, overlap=0.0, stride=None)\r\n```\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/1D.png)\r\n```python\r\nax1 = plt.subplot(1)\r\nplt.plot(patches[0]) # 0th patch\r\nax2 = plt.subplot(2, sharex=ax1, sharey=ax1)\r\nplt.plot(patches[2]) # 2nd pathc\r\nplt.suptitle('patched 1D spectra')\r\n# merge again\r\nmp = emp.merge_patches(patches, indices)\r\n```\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/1dp.png)\r\n\r\n## <a name=\"Batched-Patching\">Batched Patching</a>\r\n\r\n### Things to know.\r\n\r\n* batch : Batch of images of shape either BxCxHxW -> pytorch or BxHxWxC -> tf\r\n                to extract patches from in list(list1, list2, ...),\r\n                where, list1->([H W C], [H W C], ...) and so on.\r\n* patchsize :  size of patch to extract from image only square patches can be\r\n             extracted for now.\r\n* overlap (Optional): overlap between patched in percentage a float between [0, 1].\r\n* stride (Optional): Step size between patches\r\n* type (Optional): Type of batched images tf or torch type\r\n\r\n* batch_patches : a list containing lists of extracted patches of images.\r\n* batch_indices : a list containing lists of indices of patches in order, whihc can be used \r\n            at later stage for 'merging_patches'.\r\n\r\n* merged_batch : a np array of shape BxCxHxW -> pytorch or BxHxWxC -> tf.\r\n\r\n\r\n### Extraction\r\n```python\r\nfrom empatches import BatchPatching\r\n\r\nbp = BatchPatching(patchsize=512, overlap=0.2, stride=None, typ='torch')\r\n# extracging\r\nbatch_patches, batch_indices = bp.patch_batch(batch) # batch of shape BxCxHxW, C can be any number 3 or greater\r\n\r\nplt.imshow(batch_patches[1][2])\r\nplt.title('3rd patch of 2nd image in batch')\r\n```\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/bp.png)\r\n\r\n### Merging\r\n```python\r\n# merging\r\n# output will be of shpae depending on typ variable\r\n# BxCxHxW -> torch or BxHxWxC -> tf\r\nmerged_batch = bp.merge_batch(batch_patches, batch_indices, mode='avg') \r\n\r\n# accessing the merged images\r\nplt.imshow(merged_batch[1,...].astype(np.uint8))\r\nplt.title('2nd merged image in batch')\r\n```\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/bm.png)\r\n\r\n## <a name=\"Patching-via-Providing-Indices\">Patching via Providing Indices</a>\r\n\r\n**NOTE** in this case merging is not supported.\r\n\r\n```python\r\nfrom empatches import patch_via_indices\r\n\r\nimg = cv2.imread('./digit.jpg')\r\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\r\nimg = cv2.resize(img, (1024, 512))\r\n\r\ni = [(0, 512, 0, 256),  # 1st patch dims/indices\r\n     (0, 256, 310, 922),# 2nd patch dims/indices\r\n     (0, 512, 512, 768)]# 3rd patch dims/indices\r\nimg_patches = patch_via_indices(img, indices)\r\n\r\n# plotting\r\ntiled= imgviz.tile(list(map(np.uint8, img_patches)),border=(255,0,0))\r\nplt.figure()\r\nplt.imshow(tiled.astype(np.uint8))\r\nplt.title('patching via providing indices')\r\n```\r\n\r\n![alt text](https://github.com/Mr-TalhaIlyas/EMPatches/raw/main/screens/p_via_indices.png)\r\n\r\nFor more infomration visit Homepage.\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Mr-TalhaIlyas/EMPatches",
    "keywords": "python,extract image patches,merge image patches,patchify,sliding window",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "empatches",
    "package_url": "https://pypi.org/project/empatches/",
    "platform": null,
    "project_url": "https://pypi.org/project/empatches/",
    "project_urls": {
      "Homepage": "https://github.com/Mr-TalhaIlyas/EMPatches"
    },
    "release_url": "https://pypi.org/project/empatches/0.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Extract and Merge Batches/Image patches (tf/torch) for easy, fast and self-contained digital image processing and deep learning model training.",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15941187,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ece0614ad9455d817eb5aa5b2fb9288b2e66b35bc66a6f3244a989e9ecda53e",
          "md5": "110ff152ccbe59bcb937ae4e08ec64d0",
          "sha256": "ee632321f2280de1028a0a6c69210a24802f481f05d1708507178c6ea824d3b2"
        },
        "downloads": -1,
        "filename": "empatches-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "110ff152ccbe59bcb937ae4e08ec64d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3462,
        "upload_time": "2022-03-08T03:11:56",
        "upload_time_iso_8601": "2022-03-08T03:11:56.178117Z",
        "url": "https://files.pythonhosted.org/packages/8e/ce/0614ad9455d817eb5aa5b2fb9288b2e66b35bc66a6f3244a989e9ecda53e/empatches-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47a872d75fa9bd973821a2e45d224d0cbc3458abebea2bb44cca91a7e971db20",
          "md5": "59eead40deba689fd266bc66eac0510a",
          "sha256": "66769785a8410a28843c8c98a96e6dd41441ac1ccab22eb42125f6bedb614c70"
        },
        "downloads": -1,
        "filename": "empatches-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "59eead40deba689fd266bc66eac0510a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3496,
        "upload_time": "2022-03-08T03:18:42",
        "upload_time_iso_8601": "2022-03-08T03:18:42.249484Z",
        "url": "https://files.pythonhosted.org/packages/47/a8/72d75fa9bd973821a2e45d224d0cbc3458abebea2bb44cca91a7e971db20/empatches-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56943c4b12220c560e42dfe86e084c124c49f481265d2853ff3d8f8ecb5723c5",
          "md5": "f7e46acad83895cd5a3ecb2006d89741",
          "sha256": "bdf02f9ece8877f619553aec6d22c3041368d96dd62e879c75e7d3b701d90ce4"
        },
        "downloads": -1,
        "filename": "empatches-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f7e46acad83895cd5a3ecb2006d89741",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3667,
        "upload_time": "2022-06-15T00:02:11",
        "upload_time_iso_8601": "2022-06-15T00:02:11.513291Z",
        "url": "https://files.pythonhosted.org/packages/56/94/3c4b12220c560e42dfe86e084c124c49f481265d2853ff3d8f8ecb5723c5/empatches-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4540d423c2f766065bb664fc6cbbee5b73d4d2dedaf343cdac03b3abb622655",
          "md5": "9f12d0493baaea6698a27edac33cb00b",
          "sha256": "61dbc78813090fe2574a1796d2a1f87ae3fe15d894b5fd0dbbe8d91d78a02f19"
        },
        "downloads": -1,
        "filename": "empatches-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9f12d0493baaea6698a27edac33cb00b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6205,
        "upload_time": "2022-10-28T00:52:04",
        "upload_time_iso_8601": "2022-10-28T00:52:04.244561Z",
        "url": "https://files.pythonhosted.org/packages/b4/54/0d423c2f766065bb664fc6cbbee5b73d4d2dedaf343cdac03b3abb622655/empatches-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec514fe10a20769e5264dddb019d1147b8ec908790c8488cbd1cc7212418f698",
          "md5": "a0789c782305e1d17458ab2c15fd4617",
          "sha256": "102d196e4ad5c2e501d745ca1054c79dc3d45266c132f24b71784d62cd84d4a8"
        },
        "downloads": -1,
        "filename": "empatches-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a0789c782305e1d17458ab2c15fd4617",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11052,
        "upload_time": "2022-11-30T11:25:10",
        "upload_time_iso_8601": "2022-11-30T11:25:10.121761Z",
        "url": "https://files.pythonhosted.org/packages/ec/51/4fe10a20769e5264dddb019d1147b8ec908790c8488cbd1cc7212418f698/empatches-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec514fe10a20769e5264dddb019d1147b8ec908790c8488cbd1cc7212418f698",
        "md5": "a0789c782305e1d17458ab2c15fd4617",
        "sha256": "102d196e4ad5c2e501d745ca1054c79dc3d45266c132f24b71784d62cd84d4a8"
      },
      "downloads": -1,
      "filename": "empatches-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a0789c782305e1d17458ab2c15fd4617",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11052,
      "upload_time": "2022-11-30T11:25:10",
      "upload_time_iso_8601": "2022-11-30T11:25:10.121761Z",
      "url": "https://files.pythonhosted.org/packages/ec/51/4fe10a20769e5264dddb019d1147b8ec908790c8488cbd1cc7212418f698/empatches-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}