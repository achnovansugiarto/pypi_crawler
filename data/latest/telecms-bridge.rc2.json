{
  "info": {
    "author": "Billy Truong",
    "author_email": "support@service.exchange",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# [Service Exchange](https://app.service.exchange/demo)\n\nDescription\n===========\n\n* About Service Exchange: <https://about.service.exchange>\n* **Live Demo**: <https://app.service.exchange/demo>\n* Documentation: <https://docs.service.exchange/>\n* Support: support@service.exchange\n\n**Service Exchange** is a SaaS service that automatically generates extendable back office for your application. <br />\n**Service Exchange** is a standalone app which generates REST API thought which your SQL database is connected to **Service Exchange**. <br />\nThis project has been designed to fit requirements of small startups and mature companies.\n\n* **Data Privacy**. Tele-CMS does not access your data: its transferred directly from browser to your application.\n* **Customizable Interface**. With WYSIWYG interface customization your can change almost every part of interface.\n* **Extendable**. Flex Features allows you to create your custom Actions, Views, Fields and other.\n* **Works with any technology**. The interface is generated automatically based on an analysis of the data and data structure of your database.\n* **Quick installation**. All you need is to install Service Exchange and connect it to your database.\n\nFeatures\n========\n\n* **CRUD (create, read, update, delete)**\n\n  All common operations to view, create, update or delete data.\n\n* **Search and Filter**\n\n  Filter data easily by any field with most common lookups and search them by text occurrence. For some specific cases you can create SQL Segment to filter with.\n  \n* **Segments**\n\n  Segments allow you to save applied set of filters as a Segment or create it from SQL query for quick use in future.\n  \n* **WYSIWYG Interface Customization**\n\n  You can customize almost every part of interface visually – navigation menu, collection list views, record create/update forms.\n  \n* **List View layout**\n\n  A number of out-of-the-box list layouts except default Table View like Kanban Board and Map with markers.\n  \n* **Dashboards**\n\n  Create different types of charts, tables and other widgets to visualize your KPIs or monitor data without programming – inside your visual interface. Complex data queries can be created with SQL.\n  \n* **Teams and Permissions**\n\n  Invite users to collaborate on a project and assign access rights based on their team.\n  \n* **Export**\n\n  You can export all collection data or part of it into the most common formats like CSV or Excel.\n\n* **Responsive Layout**\n\n  The interface is optimized for any device from phones to tablets to desktops.\n  \nExtendability\n=============\n\nWhile we are trying to include most of important features out of the box sometimes its not enough. For any specific cases we offer Flex features to implement functionality not available with standard features:\n\n* **Custom Views**\n  \n  For very specific pages you can create your own custom FlexView based on React, Angular or any other framework and integrate it inService Exchange interface. Writing your own custom JS/CSS/HTML has no limits in implementing any page you need.\n\n* **Custom Actions**\n\n  If need to run some operations on records or any other business logic inside your Backend you can create FlexActions and run them directly fromService Exchange interface. Passing some additional parameters to your Backend is supported.\n\n* **Custom Fields**\n\n  Sometimes using existing fields is not enough and you need to create custom which can be a combination of multiple fields, use fields from related collections and be result of some calculation. In this case you can use FlexField and write your custom JavaScript function which can format fields data any way you want.\n\nHow It Works\n============\n\n**Service Exchange** is a SaaS frontend application hosted on **Service Exchange** side that works in your browser. It connects to your project SQL database through open source **Service Exchange** backend application which you install on your side. So Integrating **Service Exchange** with your project requires installing only one component - **Service Exchange**. Here how it should look like after installation:\n\n**Your App**\n\nAny of your applications which works with your **Database**. **Service Exchange** does not interact with it directly.\n\n**Database**\n\nYour database **Service Exchange** has no direct access to.\n\n**Service Exchange**\n\nAn open source application installed on your server's side and connected to your database. It automatically generates REST API based on your database structure. **Tele-CMS Interface** works with **Database** through **Service Exchange**.\n\n**Tele-CMS Interface**\n\nWeb application accessible from any browser. Maintaining and updating of this web application is on **Service Exchange** team side. Your application data is transmitted directly from **Service Exchange** to **Tele-CMS Interface** in your browser and remain invisible for the **Service Exchange** service.\n\nRequirements\n============\n\n* **Python** 2.7 or 3.4+\n* Any of the following **SQL Databases**:\n\n  * PostgreSQL\n  * MySQL\n  * SQLite\n  * Oracle\n  * Microsoft SQL Server\n  * Firebird\n  * Sybase\n\nInstallation\n============\n\n### Method 1. Using standalone Service Exchange\n\n1. Install **telecms\\_bridge** package using pip or update if you did it before\n\n```bash\npip install telecms_bridge -U\n```\n\n2. Install appropriate database adapter\n\n```bash\n# for PostgreSQL\npip install psycopg2\n# for MySQL\npip install mysqlclient\n```\n\n3. Run **Service Exchange** for your configuration.\nYou can read about all possible settings at [Configuration](https://docs.service.exchange/getting-started/configuration) page.\n\n```bash\nDATABASE_ENGINE=postgresql \\\n    DATABASE_HOST=host.docker.internal \\\n    DATABASE_PORT=5432 \\\n    DATABASE_NAME=database \\\n    DATABASE_USER=postgres \\\n    DATABASE_PASSWORD=password \\\n    telecms_bridge\n```\n\n![Result of running Service Exchange](https://github.com/serviceexchange/docs/raw/main/.gitbook/assets/image%20%2828%29.png)\n\n4. Register your project by opening in your browser:\n**<http://localhost:8888/>** where **localhost** is your **Service Exchange** HOST and **8888** is its PORT.\nIf you want to run Service Exchange on different host/port you can configure it \\(read more at [Configuration](https://docs.service.exchange/getting-started/configuration) page\\).\n\n> If you don't have **Tele-CMS** account yet you will be asked to create one and sign in with the existing account.\n\n> After registering your project you will be redirected to your project and can start working with **Tele-CMS**\n\nAfter registering your project you will be redirected to your project and can start working with **Tele-CMS**\n\n### Method 2. Using Service Exchange inside Docker\n\n**Service Exchange** has **Docker** image available on [Docker Hub](https://cloud.docker.com/u/serviceexchange/repository/docker/serviceexchange/telecmsbridge).\nIn order start it inside **Docker** for your configuration run the following command.\nYou can read about all possible settings at [Configuration](https://docs.service.exchange/getting-started/configuration) page.\n\n1. Install **Docker** if you don't have it [https://docs.docker.com/install/](https://docs.docker.com/install/)\n2. Make sure **Docker** is running\n3. Update **Service Exchange** image if downloaded it before\n\n```text\ndocker pull serviceexchange/telecmsbridge\n```\n\n4. Run **Docker** container. This will run Service Exchange on **<http://localhost:8888/>.**\n\n> If you want to run on different port change it here:\n> ****`... -p 9000:8888 ...` – this will run on **9000**\n\n```bash\ndocker run -p 8888:8888 \\\n    -e DATABASE_ENGINE=postgresql \\\n    -e DATABASE_HOST=host.docker.internal \\\n    -e DATABASE_PORT=5432 \\\n    -e DATABASE_NAME=database \\\n    -e DATABASE_USER=postgres \\\n    -e DATABASE_PASSWORD=password \\\n    serviceexchange/telecmsbridge\n```\n\n> If you are using **Docker before 18.03** you can't use `host.docker.internal` for DATABASE\\_HOST\n> **Docker 17.12 – 18.02** use `docker.for.mac.host.internal`\n> **Docker 17.06 – 17.11** use `docker.for.mac.localhost`\n> **Docker 17.05 and below** your `local host IP address` \\(can be found using `ifconfig` command\\)\n\n5. Register your project by opening in your browser:\n**<http://localhost:8888/>** where **localhost** is your **Service Exchange** HOST and **8888** is its PORT.\nIf you want to run Service Exchange on different host/port you can configure it by changing **Docker** container port in this command.\n\n> If you don't have **Tele-CMS** account yet you will be asked to create one and sign in with the existing account.\n\n> After registering your project you will be redirected to your project and can start working with **Tele-CMS**\n\nSupport\n=======\n\nFeel free to Email us – support@service.exchange\n\nLicense\n=======\n\nThis project (Service Exchange) is **MIT** licensed - see the LICENCE file for details.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/serviceexchange/telecms-bridge",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "telecms-bridge",
    "package_url": "https://pypi.org/project/telecms-bridge/",
    "platform": null,
    "project_url": "https://pypi.org/project/telecms-bridge/",
    "project_urls": {
      "Homepage": "https://github.com/serviceexchange/telecms-bridge"
    },
    "release_url": "https://pypi.org/project/telecms-bridge/1.0.1/",
    "requires_dist": [
      "tornado (==6.1)",
      "six",
      "telecms-bridge-base (==1.0.0)"
    ],
    "requires_python": "",
    "summary": "",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14821190,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de65ffdd3464fda0ba1e078f447028f24071a37a844da81e04237e67bad3e8b2",
          "md5": "333f9941e11027405b45d5bad08d4ecb",
          "sha256": "87e270e52884b176074ab90bc849879f174bc937d297830cc14b7133dd13833b"
        },
        "downloads": -1,
        "filename": "telecms_bridge-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "333f9941e11027405b45d5bad08d4ecb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16666,
        "upload_time": "2022-08-20T09:13:47",
        "upload_time_iso_8601": "2022-08-20T09:13:47.229623Z",
        "url": "https://files.pythonhosted.org/packages/de/65/ffdd3464fda0ba1e078f447028f24071a37a844da81e04237e67bad3e8b2/telecms_bridge-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "142fc2bbb32f4c09551d6c8a11f199b7e9a6b7a3bf1eec93da2a5c838e0eec28",
          "md5": "c9cbcbfde46d25605cc8400aa2788634",
          "sha256": "919ca55f4309c5d8e627707b4a71744e5a3763d1cc00be49154dd5b082cca924"
        },
        "downloads": -1,
        "filename": "telecms-bridge-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c9cbcbfde46d25605cc8400aa2788634",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16507,
        "upload_time": "2022-08-20T09:13:49",
        "upload_time_iso_8601": "2022-08-20T09:13:49.132284Z",
        "url": "https://files.pythonhosted.org/packages/14/2f/c2bbb32f4c09551d6c8a11f199b7e9a6b7a3bf1eec93da2a5c838e0eec28/telecms-bridge-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a508438f71e6e75bf0294a3e3e10519a1b30e2588a02aec26fc9de28d48d30cf",
          "md5": "177f9a923698625e238b0da582f5ae8b",
          "sha256": "df12ec7bb2e50ae5c5bc3b3a0067814aefad48a44b8555489db068e2afd78db8"
        },
        "downloads": -1,
        "filename": "telecms_bridge-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "177f9a923698625e238b0da582f5ae8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16659,
        "upload_time": "2022-08-20T11:43:11",
        "upload_time_iso_8601": "2022-08-20T11:43:11.176419Z",
        "url": "https://files.pythonhosted.org/packages/a5/08/438f71e6e75bf0294a3e3e10519a1b30e2588a02aec26fc9de28d48d30cf/telecms_bridge-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee58dc43211ef7e09389d2ac3b6d88e5186a75a2d4283dd0a5481e582c26a1c5",
          "md5": "8db40418212f7d8093adf03f35906235",
          "sha256": "333e6fedd5f6cbb0198feb7eac1d9dc231a4d54fb68d4fce61e60656749e255d"
        },
        "downloads": -1,
        "filename": "telecms-bridge-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8db40418212f7d8093adf03f35906235",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16473,
        "upload_time": "2022-08-20T11:43:12",
        "upload_time_iso_8601": "2022-08-20T11:43:12.611255Z",
        "url": "https://files.pythonhosted.org/packages/ee/58/dc43211ef7e09389d2ac3b6d88e5186a75a2d4283dd0a5481e582c26a1c5/telecms-bridge-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a508438f71e6e75bf0294a3e3e10519a1b30e2588a02aec26fc9de28d48d30cf",
        "md5": "177f9a923698625e238b0da582f5ae8b",
        "sha256": "df12ec7bb2e50ae5c5bc3b3a0067814aefad48a44b8555489db068e2afd78db8"
      },
      "downloads": -1,
      "filename": "telecms_bridge-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "177f9a923698625e238b0da582f5ae8b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16659,
      "upload_time": "2022-08-20T11:43:11",
      "upload_time_iso_8601": "2022-08-20T11:43:11.176419Z",
      "url": "https://files.pythonhosted.org/packages/a5/08/438f71e6e75bf0294a3e3e10519a1b30e2588a02aec26fc9de28d48d30cf/telecms_bridge-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee58dc43211ef7e09389d2ac3b6d88e5186a75a2d4283dd0a5481e582c26a1c5",
        "md5": "8db40418212f7d8093adf03f35906235",
        "sha256": "333e6fedd5f6cbb0198feb7eac1d9dc231a4d54fb68d4fce61e60656749e255d"
      },
      "downloads": -1,
      "filename": "telecms-bridge-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8db40418212f7d8093adf03f35906235",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16473,
      "upload_time": "2022-08-20T11:43:12",
      "upload_time_iso_8601": "2022-08-20T11:43:12.611255Z",
      "url": "https://files.pythonhosted.org/packages/ee/58/dc43211ef7e09389d2ac3b6d88e5186a75a2d4283dd0a5481e582c26a1c5/telecms-bridge-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}