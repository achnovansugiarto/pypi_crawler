{
  "info": {
    "author": "Ashley Sommer",
    "author_email": "ashleysommer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "\n# Sanic-Synchro-Ctx\nPlugin to provide an App context that is shared across multiple workers\n\nCan use native python SyncManager backend, or Redis if you want. (Redis is much faster).\n\n## Installation\n```bash\n$ pip3 install sanic-synchro-ctx\n```\n\nOr in a python virtualenv _(these example commandline instructions are for a Linux/Unix based OS)_\n```bash\n$ python3 -m virtualenv --python=python3 --no-site-packages .venv\n$ source ./.venv/bin/activate\n$ pip3 install sanic sanic-synchro-ctx\n```\n\nTo exit the virtual enviornment:\n```bash\n$ deactivate\n```\n\n## Redis Extension\nYou can install the relevant Redis libraries for this plugin, with the installable redis extension:\n```bash\n$ pip3 install sanic-synchro-ctx[redis]\n```\nThat is the same as running:\n```bash\n$ pip3 install \"sanic-synchro-ctx\" \"aioredis>=2.0\" \"hiredis>=1.0\"\n```\n\n## Compatibility\n* Works with Python 3.8 and greater.\n* Works with Sanic v21.9.0 and greater.\n* If you are installing the redis library separately, use aioredis >= 2.0\n\n\n## Usage\nA very simple example, it uses the native python SyncManager backend, doesn't require a Redis connection.\n```python3\nfrom sanic_synchro_ctx import SanicSynchroCtx\napp = Sanic(\"sample\")\ns = SanicSynchroCtx(app)\n\n@app.after_server_start\ndef handler(app, loop=None):\n    # This will only set this value if it doesn't already exist\n    # So only the first worker will set this value\n    app.ctx.synchro.set_default({\"counter\": 0})\n\n@app.route(\"/inc\")\ndef increment(request: Request):\n    # atomic increment operation\n    counter = request.app.ctx.synchro.increment(\"counter\")\n    print(\"counter: {}\".format(counter), flush=True)\n    return html(\"<p>Incremented!</p>\")\n\n@app.route(\"/count\")\ndef increment(request: Request):\n    # Get from shared context:\n    counter = request.app.ctx.synchro.counter\n    print(\"counter: {}\".format(counter), flush=True)\n    return html(f\"<p>count: {counter}</p>\")\n\napp.run(\"127.0.0.1\", port=8000, workers=8)\n```\n\nRedis example:\n```python3\nfrom sanic_synchro_ctx import SanicSynchroCtx\nredis = aioredis.from_url(\"redis://localhost\")\napp = Sanic(\"sample\")\ns = SanicSynchroCtx(app, backend=\"redis\", redis_client=redis)\n\n@app.after_server_start\nasync def handler(app, loop=None):\n    # This will only set this value if it doesn't already exist\n    # So only the first worker will set this value\n    await app.ctx.synchro.set_default({\"counter\": 0})\n\n@app.route(\"/inc\")\nasync def increment(request: Request):\n    # atomic increment operation\n    counter = await request.app.ctx.synchro.increment(\"counter\")\n    print(f\"counter: {counter}\", flush=True)\n    return html(\"<p>Incremented!</p>\")\n\n@app.route(\"/count\")\nasync def increment(request: Request):\n    # Get from shared context:\n    counter = await request.app.ctx.synchro.counter\n    print(f\"counter: {counter}\", flush=True)\n    return html(f\"<p>count: {counter}</p>\")\n\napp.run(\"127.0.0.1\", port=8000, workers=8)\n```\n\n\n## Changelog\nA comprehensive changelog is kept in the [CHANGELOG file](https://github.com/ashleysommer/sanic-synchro-ctx/blob/master/CHANGELOG.md).\n\n\n## Benchmarks\nI've done some basic benchmarks. SyncManager works surprisingly well, but Redis backend is much faster. \n\n\n## License\nThis repository is licensed under the MIT License. See the [LICENSE deed](https://github.com/ashleysommer/sanic-synchro-ctx/blob/master/LICENSE.txt) for details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ashleysommer/sanic-synchro-ctx",
    "keywords": "Linked Data,Semantic Web,RDF,Python,SHACL,Shapes,Schema,Validate",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sanic-synchro-ctx",
    "package_url": "https://pypi.org/project/sanic-synchro-ctx/",
    "platform": "",
    "project_url": "https://pypi.org/project/sanic-synchro-ctx/",
    "project_urls": {
      "Homepage": "https://github.com/ashleysommer/sanic-synchro-ctx",
      "Repository": "https://github.com/ashleysommer/sanic-synchro-ctx"
    },
    "release_url": "https://pypi.org/project/sanic-synchro-ctx/0.1.0/",
    "requires_dist": [
      "aioredis[hiredis] (>=2.0.1); extra == \"redis\"",
      "hiredis (>=1.0.0); extra == \"redis\"",
      "sanic (>=21.9.3)"
    ],
    "requires_python": ">=3.8.0,<4.0.0",
    "summary": "Synchronize Sanic contects between instances when using multiple workers",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12501126,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60494efc74e5bb5c8d51249d2f53a103b54eb33fa153f4c6d9874a730b80fab6",
          "md5": "d738e024a421a9ed83f6fe1d4238778e",
          "sha256": "7e347564586ef3449f65be180eb142dfe331f12b6eecbb23b3dca6bca7a92931"
        },
        "downloads": -1,
        "filename": "sanic_synchro_ctx-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d738e024a421a9ed83f6fe1d4238778e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0,<4.0.0",
        "size": 9532,
        "upload_time": "2022-01-07T06:15:59",
        "upload_time_iso_8601": "2022-01-07T06:15:59.235857Z",
        "url": "https://files.pythonhosted.org/packages/60/49/4efc74e5bb5c8d51249d2f53a103b54eb33fa153f4c6d9874a730b80fab6/sanic_synchro_ctx-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea7f626bc4a842d8369c6eb19c816895d3ebc04ffad557faf69bdf10aa95870f",
          "md5": "a3bbd8cccb7b14d6439855262ba03e1d",
          "sha256": "7a136d4da6b491a5c2634699da3e2ecd1f2f2cd8484fd110a35f6de470a693b5"
        },
        "downloads": -1,
        "filename": "sanic-synchro-ctx-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a3bbd8cccb7b14d6439855262ba03e1d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0,<4.0.0",
        "size": 34438,
        "upload_time": "2022-01-07T06:16:01",
        "upload_time_iso_8601": "2022-01-07T06:16:01.597526Z",
        "url": "https://files.pythonhosted.org/packages/ea/7f/626bc4a842d8369c6eb19c816895d3ebc04ffad557faf69bdf10aa95870f/sanic-synchro-ctx-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60494efc74e5bb5c8d51249d2f53a103b54eb33fa153f4c6d9874a730b80fab6",
        "md5": "d738e024a421a9ed83f6fe1d4238778e",
        "sha256": "7e347564586ef3449f65be180eb142dfe331f12b6eecbb23b3dca6bca7a92931"
      },
      "downloads": -1,
      "filename": "sanic_synchro_ctx-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d738e024a421a9ed83f6fe1d4238778e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.0,<4.0.0",
      "size": 9532,
      "upload_time": "2022-01-07T06:15:59",
      "upload_time_iso_8601": "2022-01-07T06:15:59.235857Z",
      "url": "https://files.pythonhosted.org/packages/60/49/4efc74e5bb5c8d51249d2f53a103b54eb33fa153f4c6d9874a730b80fab6/sanic_synchro_ctx-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea7f626bc4a842d8369c6eb19c816895d3ebc04ffad557faf69bdf10aa95870f",
        "md5": "a3bbd8cccb7b14d6439855262ba03e1d",
        "sha256": "7a136d4da6b491a5c2634699da3e2ecd1f2f2cd8484fd110a35f6de470a693b5"
      },
      "downloads": -1,
      "filename": "sanic-synchro-ctx-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a3bbd8cccb7b14d6439855262ba03e1d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.0,<4.0.0",
      "size": 34438,
      "upload_time": "2022-01-07T06:16:01",
      "upload_time_iso_8601": "2022-01-07T06:16:01.597526Z",
      "url": "https://files.pythonhosted.org/packages/ea/7f/626bc4a842d8369c6eb19c816895d3ebc04ffad557faf69bdf10aa95870f/sanic-synchro-ctx-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}