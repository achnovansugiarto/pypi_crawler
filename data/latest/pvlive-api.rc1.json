{
  "info": {
    "author": "Jamie Taylor",
    "author_email": "jamie.taylor@sheffield.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Intended Audience :: System Administrators",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database :: Database Engines/Servers",
      "Topic :: Utilities"
    ],
    "description": "\r\r\n# PV_Live\r\r\nA Python implementation of the PV_Live web API. See https://www.solar.sheffield.ac.uk/pvlive/\r\r\n\r\r\n**Latest Version: 0.12**\r\r\n\r\r\n**New! Updated 2022-07-19 to use the v4 PV_Live API.**\r\r\n\r\r\n## About this repository\r\r\n\r\r\n* This Python library provides a convenient interface for the PV_Live web API to facilitate accessing PV_Live results in Python code.\r\r\n* Developed and tested with Python 3.8, should work with Python 3.5+. Support for Python 2.7+ has been discontinued as of 2021-01-15.\r\r\n\r\r\n## How do I get set up?\r\r\n\r\r\n* Make sure you have Git installed - [Download Git](https://git-scm.com/downloads)\r\r\n* Run `pip install git+https://github.com/SheffieldSolar/PV_Live-API`\r\r\n\r\r\n## Usage\r\r\n\r\r\nThere are three methods for extracting raw data from the PV_Live API:\r\r\n\r\r\n|Method|Description|Docs Link|\r\r\n|------|-----------|---------|\r\r\n|`PVLive.latest(entity_type=\"pes\", entity_id=0, extra_fields=\"\", period=30, dataframe=False)`|Get the latest PV_Live generation result from the API.|[&#128279;](https://sheffieldsolar.github.io/PV_Live-API/build/html/modules.html#pvlive_api.pvlive.PVLive.latest)|\r\r\n|`PVLive.at_time(dt, entity_type=\"pes\", entity_id=0, extra_fields=\"\", period=30, dataframe=False)`|Get the PV_Live generation result for a given time from the API.|[&#128279;](https://sheffieldsolar.github.io/PV_Live-API/build/html/modules.html#pvlive_api.pvlive.PVLive.at_time)|\r\r\n|`PVLive.between(start, end, entity_type=\"pes\", entity_id=0, extra_fields=\"\", period=30, dataframe=False)`|Get the PV_Live generation result for a given time interval from the API.|[&#128279;](https://sheffieldsolar.github.io/PV_Live-API/build/html/modules.html#pvlive_api.pvlive.PVLive.between)|\r\r\n\r\r\nThere are two methods for extracting derived statistics:\r\r\n\r\r\n|Method|Description|Docs Link|\r\r\n|------|-----------|---------|\r\r\n|`PVLive.day_peak(d, entity_type=\"pes\", entity_id=0, extra_fields=\"\", period=30, dataframe=False)`|Get the peak PV_Live generation result for a given day from the API.|[&#128279;](https://sheffieldsolar.github.io/PV_Live-API/build/html/modules.html#pvlive_api.pvlive.PVLive.day_peak)|\r\r\n|`PVLive.day_energy(d, entity_type=\"pes\", entity_id=0)`|Get the cumulative PV generation for a given day from the API.|[&#128279;](https://sheffieldsolar.github.io/PV_Live-API/build/html/modules.html#pvlive_api.pvlive.PVLive.day_energy)|\r\r\n\r\r\nThese methods include the following optional parameters:\r\r\n\r\r\n|Parameter|Usage|\r\r\n|---------|-----|\r\r\n|`entity_type`|Choose between `\"pes\"` or `\"gsp\"`. If querying for national data, this parameter can be set to either value (or left to it's default value) since setting `entity_id` to `0` will always return national data.|\r\r\n|`entity_id`|Set `entity_id=0` (the default value) to return nationally aggregated data. If `entity_type=\"pes\"`, specify a _pes_id_ to retrieve data for, else if `entity_id=\"gsp\"`, specify a _gsp_id_. For a full list of GSP and PES IDs, refer to the lookup table hosted on National Grid ESO's data portal [here](https://data.nationalgrideso.com/system/gis-boundaries-for-gb-grid-supply-points).|\r\r\n|`extra_fields`|Use this to extract additional fields from the API such as _installedcapacity_mwp_. For a full list of available fields, see the [PV_Live API Docs](https://www.solar.sheffield.ac.uk/pvlive/api/).|\r\r\n|`period`|Set the desired temporal resolution (in minutes) for PV outturn estimates. Options are 30 (default) or 5.|\r\r\n|`dataframe`|Set `dataframe=True` and the results will be returned as a Pandas DataFrame object which is generally much easier to work with. The columns of the DataFrame will be _pes_id_ or _gsp_id_, _datetime_gmt_, _generation_mw_, plus any extra fields specified.|\r\r\n\r\r\n## Code Examples\r\r\n\r\r\nSee [pvlive_api_demo.py](https://github.com/SheffieldSolar/PV_Live-API/blob/master/pvlive_api_demo.py) for more example usage.\r\r\n\r\r\nThe examples below assume you have imported the PVLive class and created a local instance called `pvl`:\r\r\n\r\r\n```Python\r\r\nfrom datetime import datetime\r\r\nimport pytz\r\r\n\r\r\nfrom pvlive_api import PVLive\r\r\n\r\r\npvl = PVLive()\r\r\n```\r\r\n\r\r\n|Example|Code|Example Output|\r\r\n|-------|----|------|\r\r\n|Get the latest nationally aggregated GB PV outturn|`pvl.latest()`|`(0, '2021-01-20T11:00:00Z', 203.0)`|\r\r\n|Get the latest aggregated outturn for **PES** region **23** (Yorkshire)|`pvl.latest(entity_id=23)`|`(23, '2021-01-20T14:00:00Z', 5.8833031)`\r\r\n|Get the latest aggregated outturn for **GSP** ID **120** (INDQ1 or \"Indian Queens\")|`pvl.latest(entity_type=\"gsp\", entity_id=120)`|`(120, '2021-01-20T14:00:00Z', 1, 3.05604)`\r\r\n|Get the nationally aggregated GB PV outturn for all of 2020 as a DataFrame|`pvl.between(start=datetime(2020, 1, 1, 0, 30, tzinfo=pytz.utc), end=datetime(2021, 1, 1, tzinfo=pytz.utc), dataframe=True)`|![Screenshot of output](/misc/code_example_output.png?raw=true)|\r\r\n|Get a list of GSP IDs|`pvl.gsp_ids`|`array([  0,   1,   2,   3,   ..., 336, 337, 338])`|\r\r\n|Get a list of PES IDs|`pvl.pes_ids`|`array([  0,   1,   2,   3,   ..., 336, 337, 338])`|\r\r\n\r\r\nTo download data for all GSPs, use something like:\r\r\n\r\r\n```python\r\r\ndef download_pvlive_by_gsp(start, end, include_national=True, extra_fields=\"\"):\r\r\n    data = None\r\r\n    pvl = PVLive()\r\r\n    min_gsp_id = 0 if include_national else 1\r\r\n    for gsp_id in pvl.gsp_ids:\r\r\n        if gsp_id < min_gsp_id:\r\r\n            continue\r\r\n        data_ = pvl.between(start=start, end=end, entity_type=\"gsp\", entity_id=gsp_id,\r\r\n                            dataframe=True, extra_fields=extra_fields)\r\r\n        if data is None:\r\r\n            data = data_\r\r\n        else:\r\r\n            data = pd.concat((data, data_), ignore_index=True)\r\r\n    return data\r\r\n```\r\r\n\r\r\n## Command Line Utilities\r\r\n\r\r\n### pv_live\r\r\n\r\r\nThis utility can be used to download data to a CSV file:\r\r\n\r\r\n```\r\r\n>> pv_live -h\r\r\nusage: pvlive.py [-h] [-s \"<yyyy-mm-dd HH:MM:SS>\"] [-e \"<yyyy-mm-dd HH:MM:SS>\"] [--entity_type <entity_type>] [--entity_id <entity_id>]\r\r\n                 [--period <5|30>] [-q] [-o </path/to/output/file>]\r\r\n\r\r\nThis is a command line interface (CLI) for the PV_Live API module\r\r\n\r\r\noptional arguments:\r\r\n  -h, --help            show this help message and exit\r\r\n  -s \"<yyyy-mm-dd HH:MM:SS>\", --start \"<yyyy-mm-dd HH:MM:SS>\"\r\r\n                        Specify a UTC start date in 'yyyy-mm-dd HH:MM:SS' format (inclusive), default behaviour is to retrieve the latest outturn.\r\r\n  -e \"<yyyy-mm-dd HH:MM:SS>\", --end \"<yyyy-mm-dd HH:MM:SS>\"\r\r\n                        Specify a UTC end date in 'yyyy-mm-dd HH:MM:SS' format (inclusive), default behaviour is to retrieve the latest outturn.\r\r\n  --entity_type <entity_type>\r\r\n                        Specify an entity type, either 'gsp' or 'pes'. Default is 'pes'.\r\r\n  --entity_id <entity_id>\r\r\n                        Specify an entity ID, default is 0 (i.e. national).\r\r\n  --period <5|30>       Desired temporal resolution (in minutes) for PV outturn estimates. Default is 30.\r\r\n  -q, --quiet           Specify to not print anything to stdout.\r\r\n  -o </path/to/output/file>, --outfile </path/to/output/file>\r\r\n                        Specify a CSV file to write results to.\r\r\n\r\r\nJamie Taylor, 2018-06-04\r\r\n```\r\r\n\r\r\n## Using the Docker Image\r\r\n\r\r\nThere is also a Docker Image hosted on Docker Hub which can be used to download data from the PV_Live API with minimal setup:\r\r\n\r\r\n```\r\r\n>> docker run -it --rm sheffieldsolar/pv_live-api:<release> pv_live -h\r\r\n```\r\r\n\r\r\n## Documentation\r\r\n\r\r\n* [https://sheffieldsolar.github.io/PV_Live-API/](https://sheffieldsolar.github.io/PV_Live-API/)\r\r\n\r\r\n## How do I upgrade?\r\r\n\r\r\nSheffield Solar will endeavour to update this library in sync with the [PV_Live API](https://www.solar.sheffield.ac.uk/pvlive/api/ \"PV_Live API webpage\") and ensure the latest version of this library always supports the latest version of the PV_Live API, but cannot guarantee this. To make sure you are forewarned of upcoming changes to the API, you should email [solar@sheffield.ac.uk](mailto:solar@sheffield.ac.uk?subject=PV_Live%20API%20email%20updates \"Email Sheffield Solar\") and request to be added to the PV_Live user mailing list.\r\r\n\r\r\nTo upgrade the code:\r\r\n* Run `pip install --upgrade git+https://github.com/SheffieldSolar/PV_Live-API`\r\r\n\r\r\n## Who do I talk to?\r\r\n\r\r\n* Jamie Taylor - [jamie.taylor@sheffield.ac.uk](mailto:jamie.taylor@sheffield.ac.uk \"Email Jamie\") - [SheffieldSolar](https://github.com/SheffieldSolar)\r\r\n\r\r\n## Authors\r\r\n\r\r\n* **Jamie Taylor** - [SheffieldSolar](https://github.com/SheffieldSolar)\r\r\n* **Ethan Jones** - [SheffieldSolar](https://github.com/SheffieldSolar)\r\r\n\r\r\n## License\r\r\n\r\r\nNo license is defined yet - use at your own risk.\r\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/SheffieldSolar/PV_Live-API/archive/refs/tags/0.12.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SheffieldSolar/PV_Live",
    "keywords": "solar pv pv_live api",
    "license": "None",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pvlive-api",
    "package_url": "https://pypi.org/project/pvlive-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/pvlive-api/",
    "project_urls": {
      "Download": "https://github.com/SheffieldSolar/PV_Live-API/archive/refs/tags/0.12.tar.gz",
      "Homepage": "https://github.com/SheffieldSolar/PV_Live"
    },
    "release_url": "https://pypi.org/project/pvlive-api/0.12/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python interface for the PV_Live web API from Sheffield Solar.",
    "version": "0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16088318,
  "releases": {
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3ca05eaaa4ff741f34c2ac39cca42c60e39e2d46e9c5b6d377144589f921400",
          "md5": "e7e5eed0ef5fce458146e8a871893f22",
          "sha256": "8122fdf18fa33e626c27179874754736a7ed85c45218763d202b151c883cf1b7"
        },
        "downloads": -1,
        "filename": "pvlive_api-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "e7e5eed0ef5fce458146e8a871893f22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14388,
        "upload_time": "2022-12-09T17:12:03",
        "upload_time_iso_8601": "2022-12-09T17:12:03.692795Z",
        "url": "https://files.pythonhosted.org/packages/a3/ca/05eaaa4ff741f34c2ac39cca42c60e39e2d46e9c5b6d377144589f921400/pvlive_api-0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3ca05eaaa4ff741f34c2ac39cca42c60e39e2d46e9c5b6d377144589f921400",
        "md5": "e7e5eed0ef5fce458146e8a871893f22",
        "sha256": "8122fdf18fa33e626c27179874754736a7ed85c45218763d202b151c883cf1b7"
      },
      "downloads": -1,
      "filename": "pvlive_api-0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "e7e5eed0ef5fce458146e8a871893f22",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14388,
      "upload_time": "2022-12-09T17:12:03",
      "upload_time_iso_8601": "2022-12-09T17:12:03.692795Z",
      "url": "https://files.pythonhosted.org/packages/a3/ca/05eaaa4ff741f34c2ac39cca42c60e39e2d46e9c5b6d377144589f921400/pvlive_api-0.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}