{
  "info": {
    "author": "John Vollmers",
    "author_email": "john.vollmers@kit.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# MDMcleaner\n## A pipeline for the assessment, classification and refinement of microbial dark matter SAGs and MAGs\nMDMcleaner is a reference-DB contamination aware pipeline for reliable contig classification of metagenome assembled (MAG) and single-cell amplified (SAG) genomes.\nIt is based on the GTDB taxonomic system and uses GTDB representative genomes, as well as SILVA SSU and LSU and RefSeq eukaryotic and viral datasets as references. Classification is based on a \"least common ancestor\" (LCA) approach, that is implemented in a way that can recognize potential contaminants not only in the analyzed genome, but also in the underlying reference datasets. Furthermore each contig is classified only up to taxlevels that are actually supported by the corresponding alignment identities, thereby avoiding overclassification for organisms that are underrepresented in the reference database.\n\n## Dependencies:\n- python 3.7+\n- biopython v.1.78+\n- wget v.1.19+ (downloading reference datasets)\n- ncbi-blast v.2.10.1+ (aligning nucleotide sequences)\n- diamond v.2.0.6+ (aligning amino acid sequences)\n- hmmer v.3.3.1+ (detecting conserved marker genes)\n- barrnap v.0.9+ (detecting ribosomal RNA genes)\n- aragorn v 1.2.38+ (detecting tRNA genes)\n- prodigal v 2.6.3 (ORF/CDS-prediction)\n\nThis repository is hosted at [github]( https://github.com/KIT-IBG-5/mdmcleaner) and mirrored at [gitlab](https://git.scc.kit.edu/ww5070/mdmcleaner).\n\n## Installation:\nThe MDMcleaner is now installable via **pip** (without dependencies), and **Bioconda**. In case of pip, all dependencies listed above need to be installed seperately.\n\nto install via pip:\n[![PyPI version](https://badge.fury.io/py/mdmcleaner.svg)](https://badge.fury.io/py/mdmcleaner)\n```pip install mdmcleaner```\n\nto install via conda:\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/mdmcleaner/badges/installer/conda.svg)](https://conda.anaconda.org/bioconda)\n```conda install -c bioconda mdmcleaner```\n\nto install directly from this repository: [![GitHub version](https://badge.fury.io/gh/KIT-IBG-5%2Fmdmcleaner.svg)](https://badge.fury.io/gh/KIT-IBG-5%2Fmdmcleaner)\n\n - either clone this repository or download and extract the latest release.\n - enter the repository folder: ```cd mdmcleaner```\n - create wheel: ```python setup.py bdist_wheel``Â´\n - install from local wheel file: ```pip install dist/*.whl```\n\n## Configuration\nSeveral options can be passed directly as commandline arguments (see usage below), but basic settings, such as database location, should be provided in the form of ```mdmcleaner.config``` config files. The pipeline distinguishes between global (system/environment-wide settings) and local (individual) config files.\n\nThe hierarchy is as follows:\n - command line arguments override global and local setting\n - local settings override global settings\n - global settings are set in the ```mdmcleaner.config``` file within the mdmcleaner ```lib``` folder (best accessed via ```mdmcleaner.py set_configs -s global```\n\nthe settings that can be specified/adjusted in the config files are:\n- location of blastn binaries (default is simply \"blastn\", which assumes it is present in PATH)\n- location of blastp binaries (default is simply \"blastp\", which assumes it is present in PATH)\n- location of barrnap binaries (default is simply \"barrnap\", which assumes it is present in PATH)\n- location of aragorn binaries (default is simply \"blastp\", which assumes it is present in PATH)\n\nTo create a local config file in the current working directory, simply use ```mdmcleaner set_configs -s local [SETTING_ARGUMENTS]```\nThis file can be moved and copied and will be automatically recognized if present in the current working directory when running MDMcleaner. Alternative the path to a local config file can be passed to mdmcleaner via the \"-c\" argument of the \"clean\" and \"makedb\" workflows.\n\n## overview of MDMcleaner commands\nA list of mdmcleaner commands is returned when invoking the help function of MCMcleaner as follows: ```mdmcleaner -h```. Each command has it's own help function that can be invoked with ```mdmcleaner <COMMAND> -h```. The available commands are:\n - **set_configs** can be used to change global or local settings. Will modify or create 'mdmcleaner.config'-files\n - **show_configs** lists the currently applicable MDMcleaner settings/configurations\n - **makedb** downloads and processes reference data into a MDMclenaner reference database. May have a LONG run-time but can be aborted and resumed\n - **clean** the major MDMcleaner workflow for assessing and filtering genome contamination\n - **get_markers** an accessory command for extracting marker gene sequences from input genomes\n - **completeness** an accessory command for \"quick-and-dirty\" assessment of bin completeness based on universally required types or tRNAs\n - **refdb_contams** EXPERIMENTAL: evaluates refDBambiguity overviewfiles and adds obvious refDB contaminations to the blacklist\n - **acc2taxpath** Get full taxonomic path associated with a specific input accession. Currently only works for MDMcleaner/GTDB accessions, but support for NCBI accession-numbers will follow soon\n - **check_dependencies** Just check if all dependencies are being met\n - **version** show version info and quit \n\n#### usage of ```mdmcleaner set_configs```:\n```\nusage: mdmcleaner set_configs [-h] [-s {local,global}] [--blastp BLASTP] [--blastn BLASTN] [--diamond DIAMOND] [--barrnap BARRNAP] [--hmmsearch HMMSEARCH] [--aragorn ARAGORN] [--db_basedir DB_BASEDIR]\n                                 [--threads THREADS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s {local,global}, --scope {local,global}\n                        change settings in local or global config file. 'global' likely require admin privileges. 'local' will modify or create a mdmcleaner.config file in the current working directory.\n                        default = 'local'\n  --blastp BLASTP       path to blastp binaries (if not in PATH)\n  --blastn BLASTN       path to blastn binaries (if not in PATH)\n  --diamond DIAMOND     path to diamond binaries (if not in PATH)\n  --barrnap BARRNAP     path to barrnap binaries (if not in PATH)\n  --hmmsearch HMMSEARCH\n                        path to hmmsearch binaries (if not in PATH)\n  --aragorn ARAGORN     path to aragorn binaries (if not in PATH)\n  --db_basedir DB_BASEDIR\n                        path to basedirectory for reference database\n  --threads THREADS     threads to use by default\n```\n## Downloading and creating the reference database\nThe reference database is created by running ```mdmcleaner.py makedb```. This downloads the most recent datasets from GTDB, RefSeq and Silva and processes them into the format used by MDMcleaner, ensuring that users can access the newest reference data independently of our ability to keep our database current. The download and processing may take a long time (>13h at 100 Mbit/s), but can be resumed from the last checkpoint, simply by running it again if aborted.\n\nAlternatively you can use the ready made database used during the work on the mdmcleaner publication. This has been deposited at zenodo for reproducability reasons. You find and download it at [this link](https://zenodo.org/record/5698995#.YkylqjVCRhE), or use the ```--get_pub_data``` argument of ```mdmcleaner.py makedb```\n\n**Remember to add the location of the database directory to a config file!** Preferrably to the global configuration file by running ```mdmcleaner.py set_configs --db_basedir <path/to/databasefolder>``` \nIf you specify the target database directory in a config file, you do not need to use the ```-o``` option of makedb (instead the target folder will be automatically read from the configs file)\n\n#### usage of ```mdmcleaner makedb```:\n```\nusage: mdmcleaner makedb [-h] [-o OUTDIR] [-c CONFIGFILE] [--verbose] [--quiet]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTDIR, --outdir OUTDIR\n                        target base directory for reference-data. may not be the current working directory. Needs >100GB space! Default = './db/gtdb'\n  -c CONFIGFILE, --config CONFIGFILE\n                        provide a local config file with the target location to store database-files. default: looks for config files named 'mdmcleaner.config' in current working directory. settings in\n                        the local config file will override settings in the global config file '/home/ww5070/temp_binsaga/sagabin_refiner/lib/mdmcleaner.config'\n  --get_pub_data        get the ready made reference dataset used during the work on the mdmcleaner publication (WARNING: is outdated and only provided for reproducability and/or testing purposes)\n  --verbose             verbose output (download progress etc)\n  --quiet               quiet mode (suppress any status messages except Errors and Warnings)\n```\n\n## Processing MAGs and SAGs\nTo process MAGs and SAGs, simply use the \"clean\" function of MDMcleaner. If you have multiple genomes, specify them all at once instead of calling MDMcleaner individually for each genome. This apeeds up processing time by allowing to reuse of database objects without needing to reinitialize them for every query genome.\nFor safety reasons the number of threads used is set to 1 by default. However many steps of the MDMcleaner pipeline can profit from using multiple threads. Remember to specify as many threads as you can safely use on your system.\n\nFor each genome, intermediary results are stored in a seperate subfolder in \"mdmcleaner_results\". Delete them only when you are finished, as these allow resuming or rerunning analyses without having to redo all analyses from scratch...\n\nBy default, mdmcleaner will try to resolve any potential reference-database ambiguities it encounters. This will increase run time and may not always be successful. If speed is of essence, this can be skipped by using the ```--fast_run``` argument\n\nIf possible, we recommend to use at least 8 threads (```-t 8```) for mdmcleaner runs. With 8 threads it will take about 20-30 minutes per complete & average-sized bacterial genome\n\n#### usage of ```mdmcleaner clean```:\n```\nusage: mdmcleaner clean [-h] -i INPUT_FASTAS [INPUT_FASTAS ...] [-o OUTPUT_FOLDER] [-v] [-c CONFIGFILE] [-t THREADS] [-f] [--overview_files_basename OVERVIEW_BASENAME] [-I IGNORELISTFILE]\n                           [--no_filterfasta]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT_FASTAS [INPUT_FASTAS ...], --input_fastas INPUT_FASTAS [INPUT_FASTAS ...]\n                        input fastas of genomes and/or bins\n  -o OUTPUT_FOLDER, --output_folder OUTPUT_FOLDER\n                        output-folder for MDMcleaner results. Default = 'mdmcleaner_output'\n  -v, --version         show program's version number and exit\n  -c CONFIGFILE, --config CONFIGFILE\n                        provide a local config file with basic settings (such as the location of database-files). default: looks for config files named 'mdmcleaner.config' in current working directory.\n                        settings in the local config file will override settings in the global config file '/home/ww5070/temp_binsaga/sagabin_refiner/lib/mdmcleaner.config'\n  -t THREADS, --threads THREADS\n                        Number of threads to use. Can also be set in the mdmcleaner.config file\n  -f, --force           Force reclassification of pre-existing blast-results\n  --overview_files_basename OVERVIEW_BASENAME\n                        basename for overviewfiles (default=\"overview\"\n  -b BLACKLISTFILE, --blacklistfile BLACKLISTFILE\n                        File listing reference-DB sequence-names that should be ignored during blast-analyses (e.g. known refDB-contaminations...\n  --no_filterfasta      Do not write filtered contigs to final output fastas (Default = False)\n  --fast_run            skips evaluation of reference-database-ambiguities. Runs will be faster but ambiguities will not be resolved on the go!\n```\n\n## OUTPUT FILES\nRunning the ```clean``` option of MDMcleaner.py will create a mdmcleaner_results folder in the current orking directory. Individual results for each genome are saved in individual subfolders of \"mdmcleaner_results\". This includes a detailed report on the individual contig classifications, a input-table for vizualization with KRONA and (optionally) filtered contig fastas, divided into the four categories \"keep\", \"evaluate_low\", \"evaluate_high\" and \"delete\":\n#### individual output files per genome:\n- fullcontiginfos_beforecleanup.tsv --> a tab seperated table with details for each contig\n- \\<genome-name\\>_rRNA_lsu_rRNA.fasta --> 23s rRNA genes\n- \\<genome-name\\>_rRNA_ssu_rRNA.fasta --> 16s rRNA genes\n- \\<genome-name\\>_rRNA_tsu_rRNA.fasta --> 5s rRNA genes\n- \\<genome-name\\>_tRNAs.fasta.gz --> tRNA genes\n- \\<genome-name\\>_totalprots.faa --> total protein sequences\n- \\<genome-name\\>_keep.fasta --> trusted contigs that are safe to submit\n- \\<genome-name\\>_evaluate_low.fasta --> contigs that yielded some kind of refDB ambiguity and __may__ profit from some individual re-evaluation (cross-blast against RefSeq etc)\n- \\<genome-name\\>_evaluate_high.fasta --> contigs that yielded indications of refDB contamiations and should not be submitted before detailed re-evaluation\n- \\<genome-name\\>_delete.fasta --> untrusted contigs that should definitively not be included in the genome submission\n- various intermediary files and progress markers...\n\nAdditionally, general overview files are written to the current working directory: \"overview_allbeforecleanup.tsv\", \"overview_refdb_ambiguities.tsv\" and \"overview_errorlist.txt\"\n#### general overview files\n- overview_allbeforecleanup.tsv --> tab seperated table listing majority classification and general metrics per analyzed bin\n- overview_refdb_ambiguities.tsv --> tab seperated table listing detected refDB ambiguities together with evidence information and preliminary MDMcleaner assessments\n- overview_errorlist.txt --> list of genomes that yielded errors during MDMcleaner assessments and may need to be rerun\n\n## How to cite:\nplease cite our publication: [**Vollmers, John, et al. \"How clear is our current view on microbial dark matter?(Re-) assessing public MAG & SAG datasets with MDMcleaner.\" Nucleic Acids Research (2022)**](https://doi.org/10.1093/nar/gkac294)\n\n## For help or feedback:\nplease write an issue on the [github repository](https://github.com/KIT-IBG-5/mdmcleaner/issues) or send us an [email](mailto:ibg5-support@lists.kit.edu?subject=[MDMcleaner%20support])\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KIT-IBG-5/mdmcleaner",
    "keywords": "",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdmcleaner",
    "package_url": "https://pypi.org/project/mdmcleaner/",
    "platform": null,
    "project_url": "https://pypi.org/project/mdmcleaner/",
    "project_urls": {
      "Homepage": "https://github.com/KIT-IBG-5/mdmcleaner"
    },
    "release_url": "https://pypi.org/project/mdmcleaner/0.8.7/",
    "requires_dist": [
      "biopython",
      "numpy"
    ],
    "requires_python": "",
    "summary": "A pipeline for the assessment, classification and refinement of microbial dark matter SAGs and MAGs",
    "version": "0.8.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16401477,
  "releases": {
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3b9fc454ac155713d9c1423eaa70b76189088bfc7e5c55538abd202da4956df",
          "md5": "fdb36ed1d4a5a02fca25786fefb59e03",
          "sha256": "8d9800122b2a69a3e8e8e3f7cf40d44df0afc052bbd5e7f48dddf0075246a0ec"
        },
        "downloads": -1,
        "filename": "mdmcleaner-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdb36ed1d4a5a02fca25786fefb59e03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11430556,
        "upload_time": "2022-04-08T23:04:25",
        "upload_time_iso_8601": "2022-04-08T23:04:25.223858Z",
        "url": "https://files.pythonhosted.org/packages/a3/b9/fc454ac155713d9c1423eaa70b76189088bfc7e5c55538abd202da4956df/mdmcleaner-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e701e2f2f7f486823bf656f01e7d700cabbed9ee0686ea00eb89de42e0d419e",
          "md5": "62b635f395f8d2964b062273a75fca0f",
          "sha256": "0a613540838e8d5abc40fcb423f5ce76c3d292ffbc8ae5173e7e3d1696fb90b0"
        },
        "downloads": -1,
        "filename": "mdmcleaner-0.8.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62b635f395f8d2964b062273a75fca0f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11430580,
        "upload_time": "2022-05-04T14:13:28",
        "upload_time_iso_8601": "2022-05-04T14:13:28.781804Z",
        "url": "https://files.pythonhosted.org/packages/2e/70/1e2f2f7f486823bf656f01e7d700cabbed9ee0686ea00eb89de42e0d419e/mdmcleaner-0.8.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2c3ee807eb254a739f230620992f29df3fce69ccf309c6e805d259447773cf7",
          "md5": "c2a6e65fb00d8a7326316c2920e03fac",
          "sha256": "2e941a841c41e35d6294f3553efba93b414a34a309ea7276ea63664dd29bd750"
        },
        "downloads": -1,
        "filename": "mdmcleaner-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c2a6e65fb00d8a7326316c2920e03fac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11172473,
        "upload_time": "2022-05-04T14:13:53",
        "upload_time_iso_8601": "2022-05-04T14:13:53.864603Z",
        "url": "https://files.pythonhosted.org/packages/d2/c3/ee807eb254a739f230620992f29df3fce69ccf309c6e805d259447773cf7/mdmcleaner-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d8652e5a6df377a9744c877560258aaa8f053d00b0c47daf98cfe1c8651c9f3",
          "md5": "024bdc8bcfeb9fe2377dfeba6f18f2c6",
          "sha256": "68017b5b4810049a310dbe497f15e6ad64e7f8da1cc43755156c46b262f23d6a"
        },
        "downloads": -1,
        "filename": "mdmcleaner-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "024bdc8bcfeb9fe2377dfeba6f18f2c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11430483,
        "upload_time": "2022-05-10T20:04:49",
        "upload_time_iso_8601": "2022-05-10T20:04:49.189505Z",
        "url": "https://files.pythonhosted.org/packages/7d/86/52e5a6df377a9744c877560258aaa8f053d00b0c47daf98cfe1c8651c9f3/mdmcleaner-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c76106777cfd9f0ee5a5b3e05abb269d8744b460fa4b4c6b905b24f1ba66ca87",
          "md5": "194ab40975221e0fd8cccf71c352d873",
          "sha256": "4267d085455bbba7593f2be58aa826074afe004bb4ba1d847e5f3c061871c16d"
        },
        "downloads": -1,
        "filename": "mdmcleaner-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "194ab40975221e0fd8cccf71c352d873",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11174052,
        "upload_time": "2022-05-10T20:05:13",
        "upload_time_iso_8601": "2022-05-10T20:05:13.880454Z",
        "url": "https://files.pythonhosted.org/packages/c7/61/06777cfd9f0ee5a5b3e05abb269d8744b460fa4b4c6b905b24f1ba66ca87/mdmcleaner-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eecdf3e13c143b5dd70401b72cabaa9e8abd6ff04c60fe37a711465c2ffb1e62",
          "md5": "5071b96fae12db66440ba8587014ac86",
          "sha256": "95b34855754ddaa3f3f4524c02d2d818d80e70bb797d026c329f8ff200f91c05"
        },
        "downloads": -1,
        "filename": "mdmcleaner-0.8.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5071b96fae12db66440ba8587014ac86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11430602,
        "upload_time": "2022-06-01T21:10:42",
        "upload_time_iso_8601": "2022-06-01T21:10:42.338552Z",
        "url": "https://files.pythonhosted.org/packages/ee/cd/f3e13c143b5dd70401b72cabaa9e8abd6ff04c60fe37a711465c2ffb1e62/mdmcleaner-0.8.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e8cf2b60f10ab1d5b407d65e0ee7cf579a55ca6a0b0317d0c5710fbf4f552b0",
          "md5": "790da73f1e3771003ea8d9f9c56db517",
          "sha256": "c35ec24ef049969827f03e365f267c9aa43561ca3b0444d3ba8c03f30bfe809f"
        },
        "downloads": -1,
        "filename": "mdmcleaner-0.8.3.tar.gz",
        "has_sig": false,
        "md5_digest": "790da73f1e3771003ea8d9f9c56db517",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11174062,
        "upload_time": "2022-06-01T21:11:05",
        "upload_time_iso_8601": "2022-06-01T21:11:05.018568Z",
        "url": "https://files.pythonhosted.org/packages/9e/8c/f2b60f10ab1d5b407d65e0ee7cf579a55ca6a0b0317d0c5710fbf4f552b0/mdmcleaner-0.8.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b1ba025ef7e785991c6e7b53fb16efc4ef8f495832be70f8c0717e79ddf9877",
          "md5": "54018070bf83a6420a1f5563e7b7281a",
          "sha256": "3ac20ea2b900af0ef0b7ca8a8956ecebed7157dc084ab4d711275d994a076631"
        },
        "downloads": -1,
        "filename": "mdmcleaner-0.8.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54018070bf83a6420a1f5563e7b7281a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11432975,
        "upload_time": "2023-01-12T09:19:20",
        "upload_time_iso_8601": "2023-01-12T09:19:20.413428Z",
        "url": "https://files.pythonhosted.org/packages/8b/1b/a025ef7e785991c6e7b53fb16efc4ef8f495832be70f8c0717e79ddf9877/mdmcleaner-0.8.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec801d253de484318dff8ad062b9129e6adadaae73caf3edeaf6305b7f6026e0",
          "md5": "fea140bec908b24ad7eb13dc52258d6d",
          "sha256": "3ecec639ff02020e25a6beb5e09ba680659c22de10f0cf7e38a8d2709846b431"
        },
        "downloads": -1,
        "filename": "mdmcleaner-0.8.7.tar.gz",
        "has_sig": false,
        "md5_digest": "fea140bec908b24ad7eb13dc52258d6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11178272,
        "upload_time": "2023-01-12T09:19:29",
        "upload_time_iso_8601": "2023-01-12T09:19:29.475488Z",
        "url": "https://files.pythonhosted.org/packages/ec/80/1d253de484318dff8ad062b9129e6adadaae73caf3edeaf6305b7f6026e0/mdmcleaner-0.8.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b1ba025ef7e785991c6e7b53fb16efc4ef8f495832be70f8c0717e79ddf9877",
        "md5": "54018070bf83a6420a1f5563e7b7281a",
        "sha256": "3ac20ea2b900af0ef0b7ca8a8956ecebed7157dc084ab4d711275d994a076631"
      },
      "downloads": -1,
      "filename": "mdmcleaner-0.8.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "54018070bf83a6420a1f5563e7b7281a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11432975,
      "upload_time": "2023-01-12T09:19:20",
      "upload_time_iso_8601": "2023-01-12T09:19:20.413428Z",
      "url": "https://files.pythonhosted.org/packages/8b/1b/a025ef7e785991c6e7b53fb16efc4ef8f495832be70f8c0717e79ddf9877/mdmcleaner-0.8.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec801d253de484318dff8ad062b9129e6adadaae73caf3edeaf6305b7f6026e0",
        "md5": "fea140bec908b24ad7eb13dc52258d6d",
        "sha256": "3ecec639ff02020e25a6beb5e09ba680659c22de10f0cf7e38a8d2709846b431"
      },
      "downloads": -1,
      "filename": "mdmcleaner-0.8.7.tar.gz",
      "has_sig": false,
      "md5_digest": "fea140bec908b24ad7eb13dc52258d6d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11178272,
      "upload_time": "2023-01-12T09:19:29",
      "upload_time_iso_8601": "2023-01-12T09:19:29.475488Z",
      "url": "https://files.pythonhosted.org/packages/ec/80/1d253de484318dff8ad062b9129e6adadaae73caf3edeaf6305b7f6026e0/mdmcleaner-0.8.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}