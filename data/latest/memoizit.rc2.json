{
  "info": {
    "author": "Øystein Blixhavn",
    "author_email": "oystein@blixhavn.no",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Memoizit ![Build badge](https://github.com/blixhavn/memoizit/actions/workflows/ci.yml/badge.svg)  [![codecov](https://codecov.io/gh/blixhavn/memoizit/branch/main/graph/badge.svg?token=FAY3S48JGU)](https://codecov.io/gh/blixhavn/memoizit)\n\nA memoize library which can be used standalone, or plugged into key/value stores such as Redis. Also contains functionality to invalidate cache based on function name and arguments.\n\n## Why use this one?\nThere are already several python libraries providing memoizing in some form, ranging from very basic dict caches, more [performance focused](https://github.com/gsakkis/memoized), to [very advanced](https://github.com/DreamLab/memoize), comprehensive libraries. However, I've caught myself writing this particular implementation in two separate projects, and I gathered I should extract it to a separate library. It has a couple of strengths:\n\n* **It is flexible** - the two arguments `unique_on` and `conditions` provide a powerful configurability in how and what you actually want to memoize, making it ideal in situations where memoization is introduced to speed up legacy code. Paired with the `invalidate_memoize` function, there's no limit to how specific you can have your caching be.\n\n* **It is extendable** - currently shipped only with support for dict-type cache and Redis, it is very easy to write new extensions for other storage alternatives. The test blueprints are even already written!\n\n## Basic installation\nUsing Memoizit completely bare with in-memory caching:\n```\npip install memoizit\n```\n\n#### With Redis\nIf you want to (be able to) use Redis as cache storage:\n\n```\npip install memoizit[redis]\n```\n\n\n## Setup\n```\nfrom memoizit import Memoizer\n\nm = Memoizer()\n\n@m.memoize()\ndef heavy_calculation(n):\n    return n**n\n```\n\n#### With Redis\nDefault configuration looks for Redis at `localhost:6379`. If this matches your setup, simply run\n```\nm = Memoizer(backend=\"redis\")\n```\n\nOtherwise, Redis can be configured using either keyword arguments in the class constructor, or by setting environment variables:\n```\nREDIS_HOST\nREDIS_PORT\nREDIS_USERNAME\nREDIS_PASSWORD\n```\n```\nm = Memoizer(\n    backend=\"redis\",\n    host=\"redis\",\n    port=\"63791\",\n    username=\"johndoe\",\n    password=\"hunter2\"\n)\n```\n\n## Usage\n\n#### Memoize\nThe memoize decorator has three arguments:\n* **expiration** - seconds until the memoized value is invalidated (default 300 - 5 minutes).\n* **unique_on** - arguments to include in the cache key. Can be both args and kwargs (mainly useful to avoid `self` arguments in class methods). If ignored, all arguments will be used.\n* **conditions** - list of arguments and conditional values that need to match in order to apply memoization.\n\n\n##### Example use case\n```\nclass Office:\n\n    @m.memoize(\n        expiration=60*60*24,\n        unique_on=['department', 'include_management'],\n        conditions=[('with_sideeffects', False)]\n    )\n    def get_employees(self, department, include_management=False, with_sideeffects=False):\n        <expensive external requests>\n        <possible sideeffects>\n        return employees\n```\n\n> ⚠ **NB**: Note that omitting `self` from `unique_on` might pollute other class instances with incorrect cache.\n\n#### Invalidate memoize\nThis library includes the strange function `invalidate_memoize`. This implements a limited wildcard functionality, where arguments and keyword arguments can be provided to specify which cache entries to delete, but only in a left-to-right order. Example:\n\n```\n@m.memoize()\nperform_miracle(country_id, miracle_type, target=\"cats\"):\n    <miracle>\n```\nThis function is then called with the following arguments:\n```\nperform_miracle(2, \"divine\", target=\"dogs\")\n```\n\nThis will find the cache entry and delete it (specifying argument name is optional):\n```\nm.invalidate_memoize('perform_miracle', 2, \"divine\")\n```\nWhile this will not work:\n```\nm.invalidate_memoize(\"perform_miracle\", 2, target=\"dogs\")\n```\n\nThis function can be particulary useful when memoizing `read` functions from an API wrapper, where you want to invalidate the cache on `update` or `delete`.\n\n## Contributing\nClone repo:\n```\ngit clone git@github.com:blixhavn/memoizit.git\ncd memoizit\n```\nSet up virtual environment and activate it:\n```\npython3 -m virtualenv venv\nsource venv/bin/activate\n```\nInstall with dev requirements:\n\n```\npip install -e .[dev]\n```\n\nRun tests and code checks as follows:\n```\nblack .\nmypy .\nflake8\npytest \n```\nThe Redis tests are skipped unless Redis is available at `localhost:6379`.\n\nThen, create a pull request with your work! For your convenience there is also a `pre-commit` file that can be copied into `.git/hooks/`, which will run black, mypy and flake8 before allowing commits. Note however that this does not work in Windows.\n\n## License\n\nMemoizit is released under the MIT license. Have at it.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blixhavn/advanced-memoize",
    "keywords": "memoize,memoizing,cache,redis,memory,in-memory,invalidate",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memoizit",
    "package_url": "https://pypi.org/project/memoizit/",
    "platform": "",
    "project_url": "https://pypi.org/project/memoizit/",
    "project_urls": {
      "Bug Tracker": "https://github.com/blixhavn/advanced-memoize/issues",
      "Homepage": "https://github.com/blixhavn/advanced-memoize"
    },
    "release_url": "https://pypi.org/project/memoizit/1.0.0/",
    "requires_dist": [
      "mypy (==0.812) ; extra == 'dev'",
      "pytest (==6.2.1) ; extra == 'dev'",
      "pytest-cov (==2.12.1) ; extra == 'dev'",
      "black (==21.4b0) ; extra == 'dev'",
      "flake8 (==3.9.2) ; extra == 'dev'",
      "redis (>=3.5.3) ; extra == 'dev'",
      "redis (>=3.5.3) ; extra == 'redis'"
    ],
    "requires_python": ">=3.6",
    "summary": "A memoize library which can be used standalone, or plugged into key/value stores such as redis.     Also contains functionality to invalidate cache based on function name and arguments.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11481773,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d562640ab3c25553493eb46db08bd09e400299b74a75e84f8b4a5853737e0d43",
          "md5": "350fbc6e46f6211908f508d820c83390",
          "sha256": "b41036e9c08896dfd8944c14921fa1559999d5ec072bac0268ba5794890e848b"
        },
        "downloads": -1,
        "filename": "memoizit-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "350fbc6e46f6211908f508d820c83390",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6557,
        "upload_time": "2021-09-17T20:22:23",
        "upload_time_iso_8601": "2021-09-17T20:22:23.646779Z",
        "url": "https://files.pythonhosted.org/packages/d5/62/640ab3c25553493eb46db08bd09e400299b74a75e84f8b4a5853737e0d43/memoizit-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "744524c65f3c0146e1aa1d5eb1ff14ebcef8fefafdf4b80ce29cb56d94851e78",
          "md5": "c0dd4fc3e2cd69f3533001d6a389159b",
          "sha256": "7f736975be3cb672b83fd9cd30eff61aa4d30da27b0cd21131fa8609454dbcb5"
        },
        "downloads": -1,
        "filename": "memoizit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c0dd4fc3e2cd69f3533001d6a389159b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5582,
        "upload_time": "2021-09-17T20:22:27",
        "upload_time_iso_8601": "2021-09-17T20:22:27.526281Z",
        "url": "https://files.pythonhosted.org/packages/74/45/24c65f3c0146e1aa1d5eb1ff14ebcef8fefafdf4b80ce29cb56d94851e78/memoizit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3023f6cb1ea8f98a312aaf6db58c18fe9469b25b09ec24eee5fe369306a8d8a",
          "md5": "4438e9d486734c550ccfc27a53dafd86",
          "sha256": "6b6534189de214e7648efae8a23d306aa4abc7f690af1086af77c3c4ac8dca92"
        },
        "downloads": -1,
        "filename": "memoizit-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4438e9d486734c550ccfc27a53dafd86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10909,
        "upload_time": "2021-09-17T20:22:25",
        "upload_time_iso_8601": "2021-09-17T20:22:25.663654Z",
        "url": "https://files.pythonhosted.org/packages/c3/02/3f6cb1ea8f98a312aaf6db58c18fe9469b25b09ec24eee5fe369306a8d8a/memoizit-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1015ba584c2510d135101385ec688220965b7a0cdb12e02e55e98fda4c3d9b8e",
          "md5": "84f79eea3e82c77c2a5784170e72659d",
          "sha256": "c5dda5aeeb16c8c41126c7afa8659631c2170a364db3541102a8abbd216135f0"
        },
        "downloads": -1,
        "filename": "memoizit-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "84f79eea3e82c77c2a5784170e72659d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8102,
        "upload_time": "2021-09-17T20:22:28",
        "upload_time_iso_8601": "2021-09-17T20:22:28.866801Z",
        "url": "https://files.pythonhosted.org/packages/10/15/ba584c2510d135101385ec688220965b7a0cdb12e02e55e98fda4c3d9b8e/memoizit-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3023f6cb1ea8f98a312aaf6db58c18fe9469b25b09ec24eee5fe369306a8d8a",
        "md5": "4438e9d486734c550ccfc27a53dafd86",
        "sha256": "6b6534189de214e7648efae8a23d306aa4abc7f690af1086af77c3c4ac8dca92"
      },
      "downloads": -1,
      "filename": "memoizit-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4438e9d486734c550ccfc27a53dafd86",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10909,
      "upload_time": "2021-09-17T20:22:25",
      "upload_time_iso_8601": "2021-09-17T20:22:25.663654Z",
      "url": "https://files.pythonhosted.org/packages/c3/02/3f6cb1ea8f98a312aaf6db58c18fe9469b25b09ec24eee5fe369306a8d8a/memoizit-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1015ba584c2510d135101385ec688220965b7a0cdb12e02e55e98fda4c3d9b8e",
        "md5": "84f79eea3e82c77c2a5784170e72659d",
        "sha256": "c5dda5aeeb16c8c41126c7afa8659631c2170a364db3541102a8abbd216135f0"
      },
      "downloads": -1,
      "filename": "memoizit-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "84f79eea3e82c77c2a5784170e72659d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8102,
      "upload_time": "2021-09-17T20:22:28",
      "upload_time_iso_8601": "2021-09-17T20:22:28.866801Z",
      "url": "https://files.pythonhosted.org/packages/10/15/ba584c2510d135101385ec688220965b7a0cdb12e02e55e98fda4c3d9b8e/memoizit-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}