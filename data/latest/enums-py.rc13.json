{
  "info": {
    "author": "nekitdev",
    "author_email": "nekitdevofficial@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "enums.py\n========\n\n*Less sophisticated, less restrictive, more magical and funky!*\n\n.. image:: https://img.shields.io/pypi/l/enums.py.svg\n    :target: https://opensource.org/licenses/MIT\n    :alt: Project License\n\n.. image:: https://img.shields.io/pypi/v/enums.py.svg\n    :target: https://pypi.python.org/pypi/enums.py\n    :alt: Library Version\n\n.. image:: https://img.shields.io/pypi/pyversions/enums.py.svg\n    :target: https://pypi.python.org/pypi/enums.py\n    :alt: Required Python Versions\n\n.. image:: https://img.shields.io/pypi/status/enums.py.svg\n    :target: https://github.com/nekitdev/enums.py\n    :alt: Development Status\n\n.. image:: https://img.shields.io/pypi/dm/enums.py.svg\n    :target: https://pypi.python.org/pypi/enums.py\n    :alt: Library Downloads / Month\n\n.. image:: https://app.codacy.com/project/badge/Grade/a961fd80512140f29ddb2a42b8cf5fb1\n    :target: https://app.codacy.com/gh/nekitdev/enums.py/dashboard\n    :alt: Code Quality\n\n.. image:: https://img.shields.io/coveralls/github/nekitdev/enums.py\n    :target: https://coveralls.io/github/nekitdev/enums.py\n    :alt: Code Coverage\n\nenums.py is a module that implements enhanced enumerations for Python.\n\n**Incompatible with standard library!**\n\nBelow are many examples of using this module.\n\nPrerequisites\n-------------\n\nCode snippets and examples are using several common imports and types,\nwhich are mainly omitted for simplicity:\n\n.. code-block:: python3\n\n    from typing import TypeVar  # for different typing purposes\n\n    from enums import (  # library imports used in examples\n        # enumerations\n        Enum,\n        StrEnum,\n        IntEnum,\n        # flag boundary\n        FlagBoundary,\n        # boundaries\n        CONFORM,\n        EJECT,\n        KEEP,\n        STRICT,\n        # flags\n        Flag,\n        IntFlag,\n        # traits\n        Trait,\n        Order,\n        StrFormat,\n        # auto item\n        auto,\n        # unique decorator\n        unique,\n    )\n\n    T = TypeVar(\"T\")  # general (and generic) type variable\n\n    E = TypeVar(\"E\", bound=Enum)  # enumeration type variable\n\n    F = TypeVar(\"F\", bound=Flag)  # flag type variable\n    FB = TypeVar(\"FB\", bound=FlagBoundary)  # flag boundary type variable\n    IF = TypeVar(\"IF\", bound=IntFlag)  # integer flag type variable\n\nCreating Enumerations\n---------------------\n\nThere are many ways to create enumerations.\n\nThis can be done in classical way:\n\n.. code-block:: python3\n\n    class Color(Enum):\n        RED = 1\n        GREEN = 2\n        BLUE = 3\n\nLike the standard ``enum`` module, ``enums.py`` has ``auto`` class:\n\n.. code-block:: python3\n\n    class Color(Enum):\n        RED = auto()\n        GREEN = auto()\n        BLUE = auto()\n\nEnumerations can be created without explicit ``class`` usage:\n\n.. code-block:: python3\n\n    Color = Enum(\"Color\", [\"RED\", \"GREEN\", \"BLUE\"])\n\nStrings can also be used here:\n\n.. code-block:: python3\n\n    Color = Enum(\"Color\", \"RED GREEN BLUE\")\n\nYou can also use keyword arguments in order to define members:\n\n.. code-block:: python3\n\n    Color = Enum(\"Color\", RED=1, GREEN=2, BLUE=3)\n\nSame with ``auto()``, of course:\n\n.. code-block:: python3\n\n    Color = Enum(\"Color\", RED=auto(), GREEN=auto(), BLUE=auto())\n\nAll code snippets above produce ``Color`` in the end, which has 3 members:\n\n- ``<Color.RED: 1>``\n\n- ``<Color.GREEN: 2>``\n\n- ``<Color.BLUE: 3>``\n\nUsing Arguments\n---------------\n\nEnumeration members that have ``tuple`` values but do not subclass ``tuple``\nare interpreted as values passed to ``__init__`` of their class:\n\n.. code-block:: python3\n\n    class Planet(Enum):\n        MERCURY = (3.303e+23, 2.4397e6)\n        VENUS   = (4.869e+24, 6.0518e6)\n        EARTH   = (5.976e+24, 6.37814e6)\n        MARS    = (6.421e+23, 3.3972e6)\n        JUPITER = (1.9e+27,   7.1492e7)\n        SATURN  = (5.688e+26, 6.0268e7)\n        URANUS  = (8.686e+25, 2.5559e7)\n        NEPTUNE = (1.024e+26, 2.4746e7)\n\n        def __init__(self, mass: float, radius: float) -> None:\n            self.mass = mass  # kg\n            self.radius = radius  # m\n\n        @property\n        def surface_gravity(self) -> float:\n            # universal gravitational constant\n            G = 6.67300E-11  # m^3 kg^(-1) s^(-2)\n\n            return G * self.mass / (self.radius * self.radius)\n\n    print(Planet.EARTH.value)  # (5.976e+24, 6378140.0)\n    print(Planet.EARTH.surface_gravity)  # 9.802652743337129\n\nIteration\n---------\n\nIt is possible to iterate over unique enumeration members:\n\n.. code-block:: python3\n\n    Color = Enum(\"Color\", RED=1, GREEN=2, BLUE=3)\n\n    for color in Color:\n        print(Color.title)\n\n    # Red\n    # Green\n    # Blue\n\nOr over all members, including aliases:\n\n.. code-block:: python3\n\n    Color = Enum(\"Color\", RED=1, GREEN=2, BLUE=3, R=1, G=2, B=3)\n\n    for name, color in Color.members.items():\n        print(name, color.name)\n\n    # RED RED\n    # GREEN GREEN\n    # BLUE BLUE\n    # R RED\n    # G GREEN\n    # B BLUE\n\nMember Attributes\n-----------------\n\nEnumeration members have several useful attributes:\n\n- *name*, which represents their actual name;\n\n- *value*, which contains their value;\n\n- *title*, which is more human-readable version of their *name*.\n\n.. code-block:: python3\n\n    print(Color.BLUE.name)  # BLUE\n    print(Color.BLUE.value)  # 3\n    print(Color.BLUE.title)  # Blue\n\nAdvanced Access\n---------------\n\nEnumeration members can be accessed with case insensitive strings:\n\n.. code-block:: python3\n\n    class Test(Enum):\n        TEST = 13\n\n    test = Test.from_name(\"test\")  # <Test.TEST: 13>\n\n**Note that if two members have same case insensitive name version, last in wins!**\n\n**Also keep in mind** ``Enum.from_name`` **will not work with composite flags!**\n\nYou can use ``Flag.from_args`` to create composite flag from multiple values or names:\n\n.. code-block:: python3\n\n    Perm = Flag(\"Perm\", \"Z X W R\", start=0)\n\n    Perm.from_args(\"r\", \"w\", \"x\")  # <Perm.X|R|W: 7>\n\n    Perm.from_args(2, 4)  # <Perm.W|R: 6>\n\nThere is also ``Enum.from_value``, which tries to use ``Enum.from_name`` if given value is string,\nand otherwise (also if failed), it attempts by-value lookup. This function accepts ``default``\nargument, such that ``Enum.from_value(default)`` will be called on fail if ``default`` was given.\n\nExample:\n\n.. code-block:: python3\n\n    class Perm(Flag):\n        Z, X, W, R = 0, 1, 2, 4\n\n    Perm.from_value(8, default=0)  # <Perm.Z: 0>\n    Perm.from_value(\"broken\", \"r\")  # <Perm.R: 4>\n\nString Enumeration\n------------------\n\n``StrEnum`` is a simple type derived from ``Enum``,\nwhich only affects ``enum_generate_next_value``\nby making it use the casefolded version of the member name:\n\n.. code-block:: python3\n\n    class Relationship(StrEnum):\n        BLOCKED = auto()  # \"blocked\"\n        FOLLOWED = auto()  # \"followed\"\n        FRIEND = auto()  # \"friend\"\n\nFlags\n-----\n\n``Flag`` is a special enumeration that focuses around supporting bit-flags along with operations on them,\nsuch as **OR** ``|``, **AND** ``&``, **XOR** ``^`` and **INVERT** ``~``.\n\n.. code-block:: python3\n\n    class Perm(Flag):\n        Z = 0\n        X = 1\n        W = 2\n        R = 4\n\n    # <Perm.W|R: 6>\n    RW = Perm.R | Perm.W\n\n    # <Perm.R: 4>\n    R = (Perm.R | Perm.W) & Perm.R\n\n    # <Perm.X|W: 3>\n    WX = Perm.W ^ Perm.X\n\n    # <Perm.Z: 0>\n    Z = Perm.X ^ Perm.X\n\n    # <Perm.X|R: 5>\n    RX = ~Perm.W\n\nFlag Boundaries\n---------------\n\nFlags can have different *boundaries* (of type ``FlagBoundary``)\nthat define how unknown bits are handled.\n\nSTRICT\n~~~~~~\n\n*Strict* boundary is pretty straightforward: an exception is raised on any unknown bits.\n\n.. code-block:: python3\n\n    class Strict(Flag, boundary=STRICT):\n        X = auto()  # 0b0001\n        Y = auto()  # 0b0010\n        Z = auto()  # 0b0100\n\n    strict = Strict(0b1101)  # error!\n\n    # Traceback (most recent call last):\n    # <...>\n    # ValueError: Invalid value 13 in Strict:\n    #     given 0b0 1101\n    #   allowed 0b0 0111\n    # <...>\n\nCONFORM\n~~~~~~~\n\n*Conform* boundary is going to remove any invalid bits, leaving only known ones.\n\n.. code-block:: python3\n\n    class Conform(Flag, boundary=CONFORM):\n        X = auto()  # 0b0001\n        Y = auto()  # 0b0010\n        Z = auto()  # 0b0100\n\n    conform = Conform(0b1101)  # 0b0101 -> <Conform.X|Z: 5>\n\nEJECT\n~~~~~\n\n*Eject* boundary is going to remove ``Flag`` membership from out-of-range values.\n\n.. code-block:: python3\n\n    class Eject(Flag, boundary=EJECT):\n        X = auto()  # 0b0001\n        Y = auto()  # 0b0010\n        Z = auto()  # 0b0100\n\n    eject = Eject(0b1101)  # 13\n\nKEEP\n~~~~\n\n*Keep* boundary is going to save all invalid bits.\n\n.. code-block:: python3\n\n    class Keep(Flag, boundary=KEEP):\n        X = auto()  # 0b0001\n        Y = auto()  # 0b0010\n        Z = auto()  # 0b0100\n\n    keep = Keep(0b1101)  # <Keep.X|Z|0x8: 13>\n\nType Restriction and Inheritance\n--------------------------------\n\nEnumeration members can be restricted to have values of the same type:\n\n.. code-block:: python3\n\n    class OnlyInt(IntEnum):\n        SOME = 1\n        OTHER = \"2\"  # will be casted\n        BROKEN = \"broken\"  # error will be raised on creation\n\nAs well as inherit behavior from that type:\n\n.. code-block:: python3\n\n    class Access(IntFlag):\n        NONE = 0\n        SIMPLE = 1\n        MAIN = 2\n\n    FULL = Access.SIMPLE | Access.MAIN\n\n    print(FULL + 10)  # 13\n\nBecause ``IntEnum`` and ``IntFlag`` are subclasses of ``int``,\nthey lose their membership when ``int`` operations are used with them.\n\nMethod Resolution Order\n-----------------------\n\n``enums.py`` requires the following definiton of new ``Enum`` subclass:\n\n.. code-block:: python3\n\n    EnumName([trait_type, ...] [data_type] enum_type)\n\nFor example:\n\n.. code-block:: python3\n\n    class Value(Order, Enum):\n        \"\"\"Generic value that supports ordering.\"\"\"\n\n    class FloatValue(float, Value):\n        \"\"\"Float value that inherits Value.\"\"\"\n\nHere, ``FloatValue`` bases are going to be transformed into:\n\n.. code-block:: python3\n\n    (Value, float, Order, Enum)\n\nWhich allows us to preserve functions defined in enumerations or flags,\nwhile still having *traits* work nicely with overriding them.\n\nTraits\n------\n\n``enums.py`` implements special *traits* (aka *mixins*), which add specific behavior to classes.\nEach Trait implements some functionality for enumerations, but does not subclass ``Enum``.\nTherefore they are pretty much useless on their own.\n\nStrFormat\n~~~~~~~~~\n\nDefault ``__format__`` of ``Enum`` will attempt to use ``__format__`` of member data type, if given:\n\n.. code-block:: python3\n\n    class Foo(IntEnum):\n        BAR = 42\n\n    print(f\"{Foo.BAR}\")  # 42\n\n``StrFormat`` overwrites that behavior and uses ``str(member).__format__(format_spec)`` instead:\n\n.. code-block:: python3\n\n    class Foo(StrFormat, IntEnum):\n        BAR = 42\n\n    print(f\"{Foo.BAR}\")  # Foo.BAR\n\nOrder\n~~~~~\n\n``Order`` trait implements ordering (``==``, ``!=``, ``<``, ``>``, ``<=`` and ``>=``)\nfor enumeration members. This function will attempt to find member by value.\n\nExample:\n\n.. code-block:: python3\n\n    class Grade(Order, Enum):\n        A = 5\n        B = 4\n        C = 3\n        D = 2\n        F = 1\n\n    print(Grade.A > Grade.C)  # True\n    print(Grade.F <= Grade.D)  # True\n\n    print(Grade.B == 4)  # True\n    print(Grade.F >= 0)  # True\n\nDefining Traits\n---------------\n\nOne can define their own trait for enumerations by deriving from ``Trait``.\n\nExample:\n\n.. code-block:: python3\n\n    class StrTitle(Trait):\n        \"\"\"Use title of the member in str() calls.\"\"\"\n\n        def __str__(self) -> str:\n            return self.title\n\nUsing the trait is as simple as expected:\n\n.. code-block:: python3\n\n    class Color(StrTitle, Enum):\n        RED = auto()\n        GREEN = auto()\n        BLUE = auto()\n\n    print(Color.RED)  # Red\n\nUnique Enumerations\n-------------------\n\nEnumeration members can have aliases, for example:\n\n.. code-block:: python3\n\n    class Color(Enum):\n        RED = 1\n        GREEN = 2\n        BLUE = 3\n        R, G, B = RED, GREEN, BLUE  # aliases\n\n``enums.py`` has ``@unique`` class decorator, that can be used\nto check and identify that enumeration does not have aliases.\n\nThat is, the following snippet will error:\n\n.. code-block:: python3\n\n    @unique\n    class Color(Enum):\n        RED = 1\n        GREEN = 2\n        BLUE = 3\n        R, G, B = RED, GREEN, BLUE  # aliases\n\nWith the following exception:\n\n.. code-block:: python3\n\n    ValueError: Duplicates found in <enum 'Color'>: R -> RED, G -> GREEN, B -> BLUE.\n\nClass Keyword Arguments\n-----------------------\n\n``Enum`` class knows several class keyword arguments:\n\n- **auto_on_missing** - ``bool``\n- **ignore** - ``Union[str, Iterable[str]]``\n- **start** - ``T``\n- **boundary** - ``FB`` (used in ``Flag``)\n\nauto_on_missing\n~~~~~~~~~~~~~~~\n\nBoolean flag, if set to ``True`` (default is ``False``), allows to do something like:\n\n.. code-block:: python3\n\n    class Color(Enum, auto_on_missing=True):\n        RED  # 1\n        GREEN  # 2\n        BLUE  # 3\n\n    print(repr(Color.RED))  # <Color.RED: 1>\n\nignore\n~~~~~~\n\nWorks same as putting ``enum_ignore`` inside the class (default is ``()`` (empty tuple)):\n\n.. code-block:: python3\n\n    class Time(Enum, ignore=(\"time_vars\", \"day\")):\n        time_vars = vars()\n\n        for day in range(366):\n            time_vars[f\"day_{day}\"] = day\n\n    day = Time.day_365  # <Time.day_365: 365>\n\nstart\n~~~~~\n\nJust like ``enum_start``, defines a *start* value that should be used for enum members (default is ``None``):\n\n.. code-block:: python3\n\n    class Perm(Flag, start=0):\n        Z = auto()  # 0\n        X = auto()  # 1\n        W = auto()  # 2\n        R = auto()  # 4\n\n    print(repr(Perm.R | Perm.W))  # <Perm.R|W: 6>\n\nboundary\n~~~~~~~~\n\nRepresents boundaries for flags. See **Flag Boundaries** section for more information.\n\nSpecial Names\n-------------\n\n``enums.py`` uses special names for managing behavior:\n\n- **enum_missing** - ``classmethod(cls: Type[E], value: T) -> E``\n\n- **enum_ignore** - ``Union[str, Iterable[str]]``\n\n- **enum_generate_next_value** - ``staticmethod(name: str, start: Optional[T], count: int, member_values: List[T]) -> T``\n\n- **enum_auto_on_missing** - ``bool``\n\n- **enum_start** - ``T``\n\n- **_name** - ``Optional[str]``\n\n- **_value** - ``T``\n\nenum_missing\n~~~~~~~~~~~~\n\nClass method that should be used in order to process values that are not present in the enumeration:\n\n.. code-block:: python3\n\n    from typing import Union\n\n    class Speed(Enum):\n        SLOW = 1\n        NORMAL = 2\n        FAST = 3\n\n        @classmethod\n        def enum_missing(cls, value: Union[float, int]) -> Enum:\n            if value < 1:\n                return cls.SLOW\n\n            elif value > 3:\n                return cls.FAST\n\n            else:\n                return cls.NORMAL\n\n    speed = Speed(5)  # <Speed.FAST: 3>\n\nenum_ignore\n~~~~~~~~~~~\n\nIterable of strings or a string that contains names of class members\nthat should be ignored when creating enumeration members:\n\n.. code-block:: python3\n\n    class Time(IntEnum):\n        enum_ignore = [\"Time\", \"second\"]  # or \"Time, second\" or \"Time second\" or \"Time,second\"\n\n        Time = vars()\n\n        for second in range(60):\n            Time[f\"s_{second}\"] = second\n\n    print(repr(Time.s_59))  # <Time.s_59: 59>\n    print(repr(Time.s_0)) # <Time.s_0: 0>\n\nenum_generate_next_value\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nStatic method that takes member name, start value (default is None, unless specified otherwise),\ncount of unique members already created and list of all member values (including aliases).\n\nThis method should output value for the new member:\n\n.. code-block:: python3\n\n    from typing import List, Optional\n\n    class CountEnum(Enum):\n        @staticmethod\n        def enum_generate_next_value(\n            name: str, start: Optional[T], count: int, values: List[T]\n        ) -> T:\n            \"\"\"Return count of unique members + 1.\"\"\"\n            return count + 1\n\n    class Mark(CountEnum):\n        F = auto()  # 1\n        D = auto()  # 2\n        C = auto()  # 3\n        B = auto()  # 4\n        A = auto()  # 5\n\nenum_auto_on_missing\n~~~~~~~~~~~~~~~~~~~~\n\nBoolean that indicates whether auto() should be used to generate values for missing names:\n\n.. code-block:: python3\n\n    class Color(Enum):\n        enum_auto_on_missing = True\n        RED, GREEN, BLUE  # 1, 2, 3\n\nenum_start\n~~~~~~~~~~\n\nVariable that indicates what value should be passed as ``start`` to ``enum_generate_next_value``.\n\n_name\n~~~~~\n\nPrivate attribute, name of the member. Ideally it should *never* be modified.\n\n_value\n~~~~~~\n\nPrivate attribute, value of the member. Again, it is better *not* to modify it, unless required.\n\nUpdating (Mutating) Enumerations\n--------------------------------\n\nUnlike in standard ``enum`` module, enumerations can be mutated:\n\n.. code-block:: python3\n\n    class Color(Enum):\n        RED = 1\n        GREEN = 2\n        BLUE = 3\n\n    ALPHA = Color.add_member(\"ALPHA\", 0)  # <Color.ALPHA: 0>\n\nOr using ``Enum.update()`` for several members:\n\n.. code-block:: python3\n\n    class Color(Enum):\n        RED = 1\n        GREEN = 2\n        BLUE = 3\n\n    Color.update(ALPHA=0, BROKEN=-1)\n\nEven ``Flag`` flags operate nicely when mutated:\n\n.. code-block:: python3\n\n    class P(Flag):\n        R = 4\n        W = 2\n        X = 1\n        Z = 0\n\n    RWX = P.R | P.W | P.X  # <P.R|W|X: 7>\n\n    P.update(RWX=RWX.value)  # RWX is now <P.RWX: 7>\n\nInstalling\n----------\n\n**Python 3.6 or higher is required**\n\nTo install the library, you can just run the following command:\n\n.. code:: sh\n\n    # Linux / OS X\n    python3 -m pip install --upgrade enums.py\n\n    # Windows\n    py -3 -m pip install --upgrade enums.py\n\nIn order to install the library from source, you can do the following:\n\n.. code:: sh\n\n    $ git clone https://github.com/nekitdev/enums.py\n    $ cd enums.py\n    $ python -m pip install --upgrade .\n\nTesting\n-------\n\nIn order to test the library, you need to have *coverage*, *flake8* and *pytest* packages.\n\nThey can be installed like so:\n\n.. code:: sh\n\n    $ cd enums.py\n    $ python -m pip install .[test]\n\nThen linting and running tests with coverage:\n\n.. code:: sh\n\n    # lint the source\n    $ flake8\n    # run tests and record coverage\n    $ coverage run -m pytest test_enums.py\n\nChanglelog\n----------\n\n- **0.1.0** - Initial release, almost full support of standard enum module;\n\n- **0.1.1** - Make bitwise operations in Flag smarter;\n\n- **0.1.2** - Add IntEnum and IntFlag;\n\n- **0.1.3** - Add Traits and fix bugs;\n\n- **0.1.4** - Add nice dir() implementation for both Enum class and members;\n\n- **0.1.5** - Fix small bugs;\n\n- **0.2.0** - Fix IntEnum to be almost even with standard library, fix bugs and add tests.\n\n- **0.3.0** - Fix MRO resolution and add small enhancements.\n\n- **0.3.1** - Fix small typos and other non-code-related things.\n\n- **0.4.0** - Typing fixes and usage of ``ENUM_DEFINED`` flag instead of setting to ``None`` and checks.\n\n- **0.5.0** - Preserve important methods, such as ``__format__``, ``__repr__``, ``__str__`` and others.\n\n- **0.6.0** - Overall rewrite, implement flag boundaries and improve flags.\n\nAuthors\n-------\n\nThis project is mainly developed by `nekitdev <https://github.com/nekitdev>`_.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nekitdev/enums.py",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "enums.py",
    "package_url": "https://pypi.org/project/enums.py/",
    "platform": "",
    "project_url": "https://pypi.org/project/enums.py/",
    "project_urls": {
      "Homepage": "https://github.com/nekitdev/enums.py",
      "Issue tracker": "https://github.com/nekitdev/enums.py/issues"
    },
    "release_url": "https://pypi.org/project/enums.py/0.6.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Enhanced Enumerations for Python.",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10259992,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7038aa913794a7720ae8f34be1b2beab3c2a2ddbca7f57dd7372fc7de78bfb2c",
          "md5": "a86eeedd3d38225bf52bfa8af1d003af",
          "sha256": "ea9d01835ccd0376ef48aea381c961aeecaf18fef79f3f7e2260dbdaada5b5e9"
        },
        "downloads": -1,
        "filename": "enums.py-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a86eeedd3d38225bf52bfa8af1d003af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16179,
        "upload_time": "2020-07-09T16:35:41",
        "upload_time_iso_8601": "2020-07-09T16:35:41.238417Z",
        "url": "https://files.pythonhosted.org/packages/70/38/aa913794a7720ae8f34be1b2beab3c2a2ddbca7f57dd7372fc7de78bfb2c/enums.py-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bbff7488d8bc05e13d98ad9165d8ac0874ea0660fa0f801f2baffe1ec62da9f",
          "md5": "b005ba16515c4f0c30a511cbe1477405",
          "sha256": "87a57520b0e74588f164366db087ae964c92be0786b723e8fe9a6b05affe5e0f"
        },
        "downloads": -1,
        "filename": "enums.py-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b005ba16515c4f0c30a511cbe1477405",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16150,
        "upload_time": "2020-07-09T17:52:14",
        "upload_time_iso_8601": "2020-07-09T17:52:14.041732Z",
        "url": "https://files.pythonhosted.org/packages/0b/bf/f7488d8bc05e13d98ad9165d8ac0874ea0660fa0f801f2baffe1ec62da9f/enums.py-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "539ef010865ec58fa33374156597d1e30d3ae566059dbc56139fc3b30a1dad2c",
          "md5": "7032abf6e8f07ae973405aecec5e5cfe",
          "sha256": "923aa86a00e44458536e81c4d8d9fcf4ce2979b7020704631e968d537f94a2a9"
        },
        "downloads": -1,
        "filename": "enums.py-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7032abf6e8f07ae973405aecec5e5cfe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16867,
        "upload_time": "2020-07-09T19:16:56",
        "upload_time_iso_8601": "2020-07-09T19:16:56.508576Z",
        "url": "https://files.pythonhosted.org/packages/53/9e/f010865ec58fa33374156597d1e30d3ae566059dbc56139fc3b30a1dad2c/enums.py-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc9c94bbd793153ed7035d585d43f36ac85e3266b19d80150188304355b1d4c6",
          "md5": "5d6288c9dfffc54d161e7b01e1b8a6a2",
          "sha256": "3000ff3be008e124b1fb99bdd10886d6c6681738c1f46626707ff311b4727c98"
        },
        "downloads": -1,
        "filename": "enums.py-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5d6288c9dfffc54d161e7b01e1b8a6a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22664,
        "upload_time": "2020-07-10T21:51:55",
        "upload_time_iso_8601": "2020-07-10T21:51:55.568141Z",
        "url": "https://files.pythonhosted.org/packages/bc/9c/94bbd793153ed7035d585d43f36ac85e3266b19d80150188304355b1d4c6/enums.py-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f53a27b6f4c9e635d4c1cdd3632ed3d1ec6a69e49c1e63640634fc99485ca215",
          "md5": "a19c490fd1c0b0957e8228886e19e5b8",
          "sha256": "305604701ba7a5aa6ced75da8fb3a61f2aa2cc54962788c480834b98fcd2e457"
        },
        "downloads": -1,
        "filename": "enums.py-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a19c490fd1c0b0957e8228886e19e5b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22884,
        "upload_time": "2020-07-11T18:29:35",
        "upload_time_iso_8601": "2020-07-11T18:29:35.737224Z",
        "url": "https://files.pythonhosted.org/packages/f5/3a/27b6f4c9e635d4c1cdd3632ed3d1ec6a69e49c1e63640634fc99485ca215/enums.py-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f216c31d0f01866130e981612878c97d0b3ab9bce660edc30fa2073c15c113c9",
          "md5": "b95cfe0aae1e07024255e98f23893c49",
          "sha256": "da84ceaf1cbc9008d43bd440df2faf0fd88da2e32c48e3bd0f2885400a1d0a8a"
        },
        "downloads": -1,
        "filename": "enums.py-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b95cfe0aae1e07024255e98f23893c49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22890,
        "upload_time": "2020-07-18T13:38:22",
        "upload_time_iso_8601": "2020-07-18T13:38:22.758805Z",
        "url": "https://files.pythonhosted.org/packages/f2/16/c31d0f01866130e981612878c97d0b3ab9bce660edc30fa2073c15c113c9/enums.py-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e58d78477e3c7d3b618768f459b1fb95454ae553ba51cb0985c0ddc9d651e1ad",
          "md5": "b9133b20f378ae5198f7130312c5844e",
          "sha256": "d39abc9c024fb0914ba5ebf61156a123c5030d5acdcab916da1a855b2a069bef"
        },
        "downloads": -1,
        "filename": "enums.py-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b9133b20f378ae5198f7130312c5844e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29632,
        "upload_time": "2020-07-19T22:12:55",
        "upload_time_iso_8601": "2020-07-19T22:12:55.485858Z",
        "url": "https://files.pythonhosted.org/packages/e5/8d/78477e3c7d3b618768f459b1fb95454ae553ba51cb0985c0ddc9d651e1ad/enums.py-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d13afb091a90ff18111d0851d64b5c0cc7de00c61f18a14652acd548ec11f2d",
          "md5": "8630afb8634c7cef5a2e8aa4ff3c434f",
          "sha256": "e8f143b154360a118790d1c212d649ec002f1a2c25a145984b71bff017db12c0"
        },
        "downloads": -1,
        "filename": "enums.py-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8630afb8634c7cef5a2e8aa4ff3c434f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30088,
        "upload_time": "2020-12-17T23:04:53",
        "upload_time_iso_8601": "2020-12-17T23:04:53.134872Z",
        "url": "https://files.pythonhosted.org/packages/9d/13/afb091a90ff18111d0851d64b5c0cc7de00c61f18a14652acd548ec11f2d/enums.py-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8199a409db1bf3b7ce6e0c02df1f5c53cadd34b6494f86303f4bbdb27119aa43",
          "md5": "c114d144fc1fb37eb0b479fc8ae13877",
          "sha256": "a3f26bcc757b4dbbf8c7c5631cdbf99f0b2a89328e4718efa395fd5095097556"
        },
        "downloads": -1,
        "filename": "enums.py-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c114d144fc1fb37eb0b479fc8ae13877",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23293,
        "upload_time": "2020-12-18T12:07:19",
        "upload_time_iso_8601": "2020-12-18T12:07:19.866774Z",
        "url": "https://files.pythonhosted.org/packages/81/99/a409db1bf3b7ce6e0c02df1f5c53cadd34b6494f86303f4bbdb27119aa43/enums.py-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96bc8f9e6670e3c3011ec384fb2a5b49100f3a95634aa17f2811a9bea286a57d",
          "md5": "e8db2ed8b79fb6f3a0f91d5a4778e156",
          "sha256": "89c0d95790074bd388769e832a38f9aa80e71fce9fab8ad7b79f488636b53c36"
        },
        "downloads": -1,
        "filename": "enums.py-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e8db2ed8b79fb6f3a0f91d5a4778e156",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30180,
        "upload_time": "2020-12-18T12:07:21",
        "upload_time_iso_8601": "2020-12-18T12:07:21.795580Z",
        "url": "https://files.pythonhosted.org/packages/96/bc/8f9e6670e3c3011ec384fb2a5b49100f3a95634aa17f2811a9bea286a57d/enums.py-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffe55c5f02faa1cc57b46f5d256e9963f80d8844cc014fea8b313d7a4ab227ed",
          "md5": "b159278551d6fe93831a73c35c94a046",
          "sha256": "e6bdd4b13495aac112f4c28e7f781282becfb2c04beb2de02e5a1677e1891aa5"
        },
        "downloads": -1,
        "filename": "enums.py-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b159278551d6fe93831a73c35c94a046",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30343,
        "upload_time": "2020-12-26T22:02:58",
        "upload_time_iso_8601": "2020-12-26T22:02:58.808429Z",
        "url": "https://files.pythonhosted.org/packages/ff/e5/5c5f02faa1cc57b46f5d256e9963f80d8844cc014fea8b313d7a4ab227ed/enums.py-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "893447371cffa7d36888c12b5c7bf9f5f8be91473ab7a6184ffae691252f535e",
          "md5": "1ca31a24aa31f1d67ece8f015f6fba2f",
          "sha256": "2fc01ced17e4bb11bd21b439584309fc8ca9a62cefaf82ca93a178a7051abd8f"
        },
        "downloads": -1,
        "filename": "enums.py-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ca31a24aa31f1d67ece8f015f6fba2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30666,
        "upload_time": "2021-01-15T23:37:44",
        "upload_time_iso_8601": "2021-01-15T23:37:44.568579Z",
        "url": "https://files.pythonhosted.org/packages/89/34/47371cffa7d36888c12b5c7bf9f5f8be91473ab7a6184ffae691252f535e/enums.py-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4dfcd6062959ffe55aa2f902771b777695e709990c249e9678acfe20edc2fa6",
          "md5": "fa9744ed8f4090a68e9d725c2cac9b33",
          "sha256": "6d03a11c926c122302f79bac72e561ab1a396fa479a03c68b88749f0ae8923eb"
        },
        "downloads": -1,
        "filename": "enums.py-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fa9744ed8f4090a68e9d725c2cac9b33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30667,
        "upload_time": "2021-02-07T17:40:50",
        "upload_time_iso_8601": "2021-02-07T17:40:50.343935Z",
        "url": "https://files.pythonhosted.org/packages/d4/df/cd6062959ffe55aa2f902771b777695e709990c249e9678acfe20edc2fa6/enums.py-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a76801fb9d7d132b59975f4538041acba5c46050712b46a19c864172e08734cb",
          "md5": "217d139f06c598f81d64f3eca56d8b4f",
          "sha256": "f5621db9e72c25882dc62923148ad5e9f05ac1764ce79afbda167057aaf80c54"
        },
        "downloads": -1,
        "filename": "enums.py-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "217d139f06c598f81d64f3eca56d8b4f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36179,
        "upload_time": "2021-05-04T22:15:42",
        "upload_time_iso_8601": "2021-05-04T22:15:42.810783Z",
        "url": "https://files.pythonhosted.org/packages/a7/68/01fb9d7d132b59975f4538041acba5c46050712b46a19c864172e08734cb/enums.py-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a76801fb9d7d132b59975f4538041acba5c46050712b46a19c864172e08734cb",
        "md5": "217d139f06c598f81d64f3eca56d8b4f",
        "sha256": "f5621db9e72c25882dc62923148ad5e9f05ac1764ce79afbda167057aaf80c54"
      },
      "downloads": -1,
      "filename": "enums.py-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "217d139f06c598f81d64f3eca56d8b4f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 36179,
      "upload_time": "2021-05-04T22:15:42",
      "upload_time_iso_8601": "2021-05-04T22:15:42.810783Z",
      "url": "https://files.pythonhosted.org/packages/a7/68/01fb9d7d132b59975f4538041acba5c46050712b46a19c864172e08734cb/enums.py-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}