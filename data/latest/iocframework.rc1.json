{
  "info": {
    "author": "Dino16m",
    "author_email": "anselem16m@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Documentation for IOCFramework\n## This project is a dependency injection frameework for python Object Oriented projects.\n\n## Installation\n\n`pip install iocframework`\n\n### Basic uses\n- Registering a project's class dependency maps.\n- Resolving a project's dependencies from registered dependency maps.\n- Resolving a project's class' nested dependency, leveraging typing to instantiate dependencies that have no args constructors.\n\n### Example use case\n\tfrom IOCFramework import get_app\n\n    class BarService:\n    \tdef __init__(self):\n        \tpass\n\n    class FooService:\n    \tbar_service: BarService\n        def __init__(self, bar_service: BarService):\n        \tself.bar_service = bar_service\n\n    class FooController:  \n\t\tfoo_service: FooService\n\t\tdef __init__(self, foo_service: FooService):\n    \t\tself.foo_service = foo_service\n\n   \tapp = get_app()\n    foo_controller = app.make(FooController) # makes an instance of fooController\n\n\n\n\nIn the example above the dependency tree goes from `FooController` down to `BarService`, in real life it could be deeper, this package smartly resolves and instantiates FooController by going down the dependency graph. It recognizes `BarService` as a dependency of `FooService` which on its own is a dependency of the required `FooController`.\n\nAnother use case is when you want to resolve a class but with some default values.\n\n### Example use case\n\tfrom IOCFramework import get_app\n\n    class BarService:\n    \tdef __init__(self):\n        \tpass\n\n    class FooService:\n    \tbar_service: BarService\n        def __init__(self, bar_service: BarService):\n        \tself.bar_service = bar_service\n\n\n   \tapp = get_app()\n    custom_bar_service = BarService() # custom instance of barService\n    foo_service = app.make_with(FooService, {\"bar_service\": custom_bar_service})\n\n  In the example above, we created an instance of `FooService` to which we we manually injected an already created instance of its dependency `BarService` by manually creating an instance of `BarService` and passing it by parameter name to the container. This is very helpful for passing constants to class instances or when passing an object created by another class to the new class.\n\nAnother use case is binding classes or interfaces to their implementation in the container.\n\n### Example use case\n\tfrom IOCFramework import get_app\n\n    class BarService:\n    \tdef __init__(self):\n        \tpass\n\n    class AbstractFooService:\n    \tdef say_foo(self):\n        \traise MethodNotImplemented\n\n    class FooService(AbstractFooService):\n    \tbar_service: BarService\n        def __init__(self, bar_service: BarService):\n        \tself.bar_service = bar_service\n\n        def say_foo(self):\n        \treturn \"foo\"\n\n   \tapp = get_app()\n    bindings = {\n    \tAbstractFooService: FooService\n    }\n    app.add_bindings(bindings)\n    foo_service = app.make(AbstractFooService)\n    foo_val = foo_service.say_foo() # returns foo\n\n  In the example above, we registered `AbstractFooService` to return an instance of `FOOService`, this pattern can be useful when a single base class has multiple different implementations for differenct use cases.\n\nThe use case above can be extended for singletons, suppose we want our entire application to use a single instance of a very expensive class, we can use the singleton method of app; here is an example\n\n### Example use case\n\tfrom IOCFramework import get_app\n\n    class BarService:\n    \tdef __init__(self):\n        \tpass\n\n    class FooService:\n    \tbar_service: BarService\n        def __init__(self, bar_service: BarService):\n        \tself.bar_service = bar_service\n\n  \tclass FizzService:'\n    \tbar_service: BarService\n        def __init__(self, bar_service: BarService):\n        \tself.bar_service = bar_service\n\n   \tapp = get_app()\n    singletons = {\n    \tBarService: BarService\n    }\n    app.add_singletons(singletons)\n    foo_service = app.make(FooService)\n    fizz_service = app.make(FizzService)\n    fizz_service.bar_service == foo_service.bar_service # True because barService is a singleton \n\nThere is yet another use case which adds power to the use cases above, imagine for you have a base class with multiple subclasses, with each of the subclasses serving a single service class. To resolve this, you could type the dependency on the services with their specific class implementation, locking yourself to an implementation or you could type them all with their base class and resolve them by need.\n\n### Example use case\n\tfrom IOCFramework import get_app\n\n    class BaseBarService:\n    \tdef __init__(self):\n        \tpass\n\n    class FooBarService(BaseBarService):\n    \tdef __init__(self):\n        \tpass\n\n    class FizzBarService(BaseBarService):\n    \tdef __init__(self):\n        \tpass\n\n    class FooService:\n    \tbar_service: BaseBarService\n        def __init__(self, bar_service: BaseBarService):\n        \tself.bar_service = bar_service\n\n  \tclass FizzService:'\n    \tbar_service: BaseBarService\n        def __init__(self, bar_service: BaseBarService):\n        \tself.bar_service = bar_service\n\n   \tapp = get_app()\n   \tapp.when(FizzService, needs=BaseBarService, give=FizzBarService) # give can also be a callable which returns an instance of the service in question\n\tapp.when(FooService, needs=BaseBarService, give=FooBarService)\n    fizz_service = app.make(FizzService)\n    foo_service = app.make(FooService)\n\n    isinstance(fizz_service.bar_service, FizzBarService) # True\n\n    isinstance(foo_service.bar_service, FooBarService) # True\n\nThis project is based on Laravel's IOC container.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dino16m/iocframework",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iocframework",
    "package_url": "https://pypi.org/project/iocframework/",
    "platform": "",
    "project_url": "https://pypi.org/project/iocframework/",
    "project_urls": {
      "Homepage": "https://github.com/dino16m/iocframework"
    },
    "release_url": "https://pypi.org/project/iocframework/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Read the latest Real Python tutorials",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8039883,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2793fbd95ec3c46d7cf0e8181e67825d0920a5c7fe59d44372563f34c896b926",
          "md5": "aed2d0e1528176057803bdbbf2ddd219",
          "sha256": "68b37fd609b54a6cdba790ae2fe258fe8d15624b5f9254749655a972d6d7b045"
        },
        "downloads": -1,
        "filename": "iocframework-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aed2d0e1528176057803bdbbf2ddd219",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9945,
        "upload_time": "2020-08-26T01:18:34",
        "upload_time_iso_8601": "2020-08-26T01:18:34.118354Z",
        "url": "https://files.pythonhosted.org/packages/27/93/fbd95ec3c46d7cf0e8181e67825d0920a5c7fe59d44372563f34c896b926/iocframework-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f1c0435d0ae61392e01cc2058ea0980275d74de7df393b999ff1d1eefaf4772",
          "md5": "b25b33748daa0eab9696b1c26d8b6987",
          "sha256": "27b29e1c6038b90e2e405f76d94641b0bf485aa04255fbc9ee7d94ca6345cc22"
        },
        "downloads": -1,
        "filename": "iocframework-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b25b33748daa0eab9696b1c26d8b6987",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6415,
        "upload_time": "2020-08-26T01:18:36",
        "upload_time_iso_8601": "2020-08-26T01:18:36.764643Z",
        "url": "https://files.pythonhosted.org/packages/3f/1c/0435d0ae61392e01cc2058ea0980275d74de7df393b999ff1d1eefaf4772/iocframework-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2793fbd95ec3c46d7cf0e8181e67825d0920a5c7fe59d44372563f34c896b926",
        "md5": "aed2d0e1528176057803bdbbf2ddd219",
        "sha256": "68b37fd609b54a6cdba790ae2fe258fe8d15624b5f9254749655a972d6d7b045"
      },
      "downloads": -1,
      "filename": "iocframework-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aed2d0e1528176057803bdbbf2ddd219",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9945,
      "upload_time": "2020-08-26T01:18:34",
      "upload_time_iso_8601": "2020-08-26T01:18:34.118354Z",
      "url": "https://files.pythonhosted.org/packages/27/93/fbd95ec3c46d7cf0e8181e67825d0920a5c7fe59d44372563f34c896b926/iocframework-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f1c0435d0ae61392e01cc2058ea0980275d74de7df393b999ff1d1eefaf4772",
        "md5": "b25b33748daa0eab9696b1c26d8b6987",
        "sha256": "27b29e1c6038b90e2e405f76d94641b0bf485aa04255fbc9ee7d94ca6345cc22"
      },
      "downloads": -1,
      "filename": "iocframework-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b25b33748daa0eab9696b1c26d8b6987",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6415,
      "upload_time": "2020-08-26T01:18:36",
      "upload_time_iso_8601": "2020-08-26T01:18:36.764643Z",
      "url": "https://files.pythonhosted.org/packages/3f/1c/0435d0ae61392e01cc2058ea0980275d74de7df393b999ff1d1eefaf4772/iocframework-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}