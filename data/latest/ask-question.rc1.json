{
  "info": {
    "author": "Henry Letellier",
    "author_email": "henrysoftwarehouse@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ask_question\n\n## Description\n\nThis is a python package I created in order to simplify the boiling process when asking the user a question via TTY.\n\n## Table of Content\n\n1. [ask_question](#askquestion)\n2. [Description](#description)\n3. [Table of Content](#table-of-content)\n4. [Installation](#installation)\n    1. [Using pip](#using-pip)\n    2. [Using python](#using-python)\n5. [Usage](#usage)\n    1. [Impoting](#importing)\n    2. [Initialising](#initialising)\n    3. [Calling the pause function](#calling-the-pause-function)\n    4. [Asking a question](#asking-a-question)\n        1. [Where do you live ?](#where-do-you-live)\n        2. [How old are you ?](#how-old-are-you)\n        3. [Do you like sugar ?](#do-you-like-sugar)\n6. [Available boiling](#available-boiling)\n7. [Change the initialisation content](#change-the-initialisation-content)\n    1. [Changing the forbidden characters](#changing-the-forbidden-characters)\n    2. [Changing the description](#changing-the-descriptions)\n    3. [Changing both](#changing-both)\n8. [Author](#author)\n9. [Version](#version)\n\n## Installation\n\n### Using pip\n\n```sh\npip install -U ask-question\n```\n\n### Using python\n\nUnder windows:\n\n```bat\npy -m pip install -U ask-question\n```\n\nUnder Linux/Mac OS:\n\n```sh\npython3 -m pip install -U ask-question\n```\n\n## Usage\n\n### Importing\n\n```py\nimport ask_question as aq\n```\n\n### Initialising\n\nThe generic class is: `AskQuestion(human_type:dict={}, illegal_characters_nb:str=\"\")`\n\n```py\nAQI = aq.AskQuestion()\n```\n\n### Calling the pause function\n\nThe generic function is:\n\n```py\npause(self, pause_message:str=\"Press enter to continue...\")\n```\n\nThe output is: None\n\n```py\nAQI.pause(\"Press enter to continue ...\")\n```\n\n### Asking a Question\n\nThe generic function to ask a question is:\n\n```py\nask_question(self, question:str, answer_type:str)\n```\n\nThe outputs of this functions can be:\n\n* str   = a string\n* int   = a whole number\n* float = a floating number\n\n#### Where do you live ?\n\n```py\nanswer = AQI.ask_question(\"Where are you from? \", \"str\")\nprint(f\"You live in {answer}!\")\n```\n\n#### How old are you ?\n\n```py\nanswer = AQI.ask_question(\"How old are you?\", \"uint\")\nADD_S = \"\"\nif answer > 1:\n    ADD_S = \"s\"\nprint(f\"You are {answer} year{ADD_S} old !\")\n```\n\n#### Do you like sugar ?\n\n```py\nanswer = AQI.ask_question(\"Do you like sugar? [(Y)es/(n)o]: \", \"bool\")\nif answer == True:\n    print(\"You like sugar !\")\nelse:\n    print(\"You do not like sugar.\")\n```\n\n## Available boiling\n\nHere are all the available boiling options and their explanation:\n\n* int = whole number (-1, 0, 1, 2, 3, etc...)\n* float = floating number (-1.2, 0.1, 1.2, etc...)\n* uint = whole positive number (0, 1, 2, etc...)\n* ufloat = whole positive floating number (0.1, 1.2, etc ...)\n* num = numeric (numbers from 0 onwards)\n* alnum = alphanumeric (only numbers and the alphabet)\n* isalpha = alphabet (from a to z and A to Z)\n* char = alphabet (from a to z and A to Z)\n* ascii = ascii Table\n* str = string (any character you can type)\n* version = version (numbers seperated by '.' characters)\n* ver = version (numbers seperated by '.' characters)\n* bool = boolean (yes/True/1 or no/False/0 answer type)\n\n## Change the initialisation content\n\nWhen initialising the class it is possible to change the forbidden characters and/or the descriptions of the available types.\n\n### changing the forbidden characters\n\n```py\nimport ask_question as aq\nillegal_characters = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c\"\nillegal_characters = illegal_characters.replace(\"0123456789\",\"\")\nAQI = aq.AskQuestion(dict(), illegal_characters)\n```\n\nThis initialisation has changed the characters that will be allowed for the number conversion in the 'int' and 'float' options.\n\n### Changing the descriptions\n\n```py\nimport ask_question as aq\nhuman_type = {\n    \"int\":\"whole number (-1, 0, 1, 2, 3, etc...)\",\n    \"float\":\"floating number (-1.2, 0.1, 1.2, etc...)\",\n    \"uint\":\"whole positive number (0, 1, 2, etc...)\",\n    \"ufloat\":\"whole positive floating number (0.1, 1.2, etc ...)\",\n    \"num\":\"numeric (numbers from 0 onwards)\",\n    \"alnum\":\"alphanumeric (only numbers and the alphabet)\",\n    \"isalpha\":\"alphabet (from a to z and A to Z)\",\n    \"char\":\"alphabet (from a to z and A to Z)\",\n    \"ascii\":\"ascii Table\",\n    \"str\":\"string (any character you can type)\",\n    \"version\":\"version (numbers seperated by '.' characters)\",\n    \"ver\":\"version (numbers seperated by '.' characters)\",\n    \"bool\":\"boolean (yes/True/1 or no/False/0 answer type)\",\n}\nAQI = aq.AskQuestion(human_type)\n```\n\nThis initialisation has changed the descriptions for the types.\nWhen the user will enter a wrong answer, the description displayed for the type you were expecting will be taken from the human_type dictionnary you have entered.\n\n### Changing both\n\n```py\nimport ask_question as aq\nillegal_characters = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c\"\nillegal_characters = illegal_characters.replace(\"0123456789\",\"\")\nhuman_type = {\n    \"int\":\"whole number (-1, 0, 1, 2, 3, etc...)\",\n    \"float\":\"floating number (-1.2, 0.1, 1.2, etc...)\",\n    \"uint\":\"whole positive number (0, 1, 2, etc...)\",\n    \"ufloat\":\"whole positive floating number (0.1, 1.2, etc ...)\",\n    \"num\":\"numeric (numbers from 0 onwards)\",\n    \"alnum\":\"alphanumeric (only numbers and the alphabet)\",\n    \"isalpha\":\"alphabet (from a to z and A to Z)\",\n    \"char\":\"alphabet (from a to z and A to Z)\",\n    \"ascii\":\"ascii Table\",\n    \"str\":\"string (any character you can type)\",\n    \"version\":\"version (numbers seperated by '.' characters)\",\n    \"ver\":\"version (numbers seperated by '.' characters)\",\n    \"bool\":\"boolean (yes/True/1 or no/False/0 answer type)\",\n}\nAQI = aq.AskQuestion(human_type)\n```\n\nYou have now impacted the int and float typing as well as the 'type' descriptions.\n\n## Author\n\nThis module was written by (c) Henry Letellier\nAttributions are appreciated.\n\nQuick way (I assume you have already initialised the class):\n\n```py\nprint(f\"AskQuestion is written by {AQI.author}\")\n```\n\n## Version\n\nThe current version is 1.0.0\n\nAn easy way to display the version is:\n\n```py\nimport ask_question as aq\naq.__Version__\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Hanra-s-work/ask_question",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ask-question",
    "package_url": "https://pypi.org/project/ask-question/",
    "platform": null,
    "project_url": "https://pypi.org/project/ask-question/",
    "project_urls": {
      "Homepage": "https://github.com/Hanra-s-work/ask_question"
    },
    "release_url": "https://pypi.org/project/ask-question/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A module simplifie the boiling process when asking the user a question via TTY.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14769745,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3eb1a80bed9b8acccd7b77fb421b679748701ae100ad7b014d78dc08e0a3c5e",
          "md5": "a59f1b653a0030082c79b332e38ad648",
          "sha256": "75d59d6938e311ec80e981fb433f5f4de6b23985e090ed0ba3e9767cd633d6cf"
        },
        "downloads": -1,
        "filename": "ask_question-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a59f1b653a0030082c79b332e38ad648",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6150,
        "upload_time": "2022-08-15T22:58:20",
        "upload_time_iso_8601": "2022-08-15T22:58:20.142298Z",
        "url": "https://files.pythonhosted.org/packages/b3/eb/1a80bed9b8acccd7b77fb421b679748701ae100ad7b014d78dc08e0a3c5e/ask_question-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3eb1a80bed9b8acccd7b77fb421b679748701ae100ad7b014d78dc08e0a3c5e",
        "md5": "a59f1b653a0030082c79b332e38ad648",
        "sha256": "75d59d6938e311ec80e981fb433f5f4de6b23985e090ed0ba3e9767cd633d6cf"
      },
      "downloads": -1,
      "filename": "ask_question-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a59f1b653a0030082c79b332e38ad648",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6150,
      "upload_time": "2022-08-15T22:58:20",
      "upload_time_iso_8601": "2022-08-15T22:58:20.142298Z",
      "url": "https://files.pythonhosted.org/packages/b3/eb/1a80bed9b8acccd7b77fb421b679748701ae100ad7b014d78dc08e0a3c5e/ask_question-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}