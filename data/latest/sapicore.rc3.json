{
  "info": {
    "author": "Neuromorphic algorithms by Ayon Borthakur and Thomas Cleland, Framework architecture by Matthew Einhorn. Project of the Computational Physiology Laboratory at Cornell University",
    "author_email": "ab2535@cornell.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Sapicore\n========\n\nA project of the Computational Physiology Laboratory at Cornell University.\n\nPlease see the online `docs <https://cplab.github.io/sapicore/index.html>`_\nfor complete documentation.\n\n-----------------\n\nA PyTorch-based framework for neuromorphic modeling.\n\nSapicore is a framework that provides high level abstractions to help write\nneuromorphic models using pytorch. Sapicore itself does not contain any concrete\nmodels, instead each model may have its own repo that implements the Sapicore\ncomponents used by the model.\n\nFollowing this methodology will allow Sapicore to be used by multiple models\nindependently, without each polluting the other with different implementation\ndetails or requirements.\n\nSapicore models common to a lab can be placed in a package outside the\nframework and re-used by other projects that want to use these common models.\n\nSapicore supports model user-configuration using the\n`tree-config <https://github.com/matham/tree-config/>`_ package.\nSimilarly, Sapicore supports annotating properties and buffers for logging\nto e.g. ``tensorboardx`` for live display or using\n`nixio <https://github.com/G-Node/nixpy>`_ HDF5 based files for later analysis or\ndebugging.\n\nInstallation\n------------\n\nSapicore has minimal requirements. It requires\n\n* Python 3.7+\n* Pytorch 1.5+ (see `PyTorch installation <https://pytorch.org/get-started/locally/>`_).\n* Scientific stack (see the list in ``setup.py``).\n* Tensorboard and tensorboardx (optional).\n\n  The easiest way is to install them with conda as follows::\n\n      conda install -c conda-forge numpy tqdm pandas ruamel.yaml tensorboard tensorboardx\n\n  or using pip, simply (pip automatically installs the remaining dependencies)::\n\n      python -m pip install tensorboard tensorboardx\n\nOnce the dependencies are installed, to install Sapicore in the current\nconda/pip environment:\n\nUser install\n************\n\nYou can install the latest stable Sapicore with::\n\n    pip install sapicore\n\nTo install the latest Sapicore from github, do::\n\n    pip install https://github.com/cplab/sapicore/archive/refs/heads/main.zip\n\nDevelopment install\n*******************\n\nTo install Sapicore for development and editing Sapicore itself:\n\n* Clone sapicore from github::\n\n      git clone https://github.com/cplab/sapicore.git\n\n* `cd` into sapicore::\n\n      cd sapicore\n\n* Install it as an editable install::\n\n      pip install -e .\n\nExample model\n-------------\n\nFollowing is brief runnable example. A similar but complete example with configuration and logging\ncan be found under sapicore/examples.\n\n.. code-block:: python\n\n    import torch\n    from sapicore.model import SapicoreModel\n    from sapicore.neuron.analog import AnalogNeuron\n    from sapicore.synapse import SapicoreSynapse\n    from sapicore.pipeline import PipelineBase\n    from sapicore.learning import SapicoreLearning\n\n\n    class SimpleNeuron(AnalogNeuron):\n        \"\"\"Represents a neuron or matrix of neurons.\"\"\"\n\n        activation: torch.Tensor\n\n        def forward(self, data: torch.tensor) -> torch.tensor:\n            self.activation = torch.clip(data, -2, 2)\n            return self.activation\n\n\n    class SimpleSynapse(SapicoreSynapse):\n        \"\"\"Represents a synapse connecting a neuron or matrix of neurons.\"\"\"\n\n        weight: torch.Tensor\n\n        def __init__(self, **kwargs):\n            super().__init__(**kwargs)\n            # register weight as part of the state so it is saved with the model\n            self.register_buffer(\"weight\", torch.zeros(0))\n            self.weight = torch.normal(0, 1, size=(5, ))\n\n        def forward(self, data: torch.tensor) -> torch.tensor:\n            return data * self.weight\n\n\n    class SimpleLearning(SapicoreLearning):\n        \"\"\"Learns the synapse weight based on pre-post activation.\"\"\"\n\n        def apply_learning(\n                self, pre_neuron: SimpleNeuron, synapse: SimpleSynapse,\n                post_neuron: SimpleNeuron, **kwargs):\n            synapse.weight *= torch.abs(pre_neuron.activation) * \\\n                torch.abs(post_neuron.activation)\n\n\n    class MyModel(SapicoreModel):\n        \"\"\"Network model that contains neurons/synapses.\"\"\"\n\n        neuron_1: SimpleNeuron\n\n        synapse: SimpleSynapse\n\n        neuron_2: SimpleNeuron\n\n        learning: SimpleLearning\n\n        def __init__(self, **kwargs):\n            super().__init__(**kwargs)\n            self.neuron_1 = SimpleNeuron()\n            self.synapse = SimpleSynapse()\n            self.neuron_2 = SimpleNeuron()\n\n            self.add_neuron(None, 'entry_neuron', self.neuron_1)\n            self.add_synapse(self.neuron_1, 'synapse', self.synapse)\n            self.add_neuron(self.synapse, 'exit_neuron', self.neuron_2)\n\n            self.learning = SimpleLearning()\n            self.add_learning_rule('learning', self.learning)\n\n        def initialize_learning_state(self) -> None:\n            self.learning.initialize_state()\n\n        def forward(self, data: torch.tensor) -> torch.tensor:\n            data = self.neuron_1(data)\n            data = self.synapse(data)\n            data = self.neuron_2(data)\n            return data\n\n        def apply_learning(self, **kwargs) -> None:\n            self.learning.apply_learning(self.neuron_1, self.synapse, self.neuron_2)\n\n\n    class SimplePipeline(PipelineBase):\n        \"\"\"Training pipeline.\"\"\"\n\n        def run(self) -> None:\n            use_cuda = torch.cuda.is_available()\n            cuda_device = torch.device(\"cuda:0\" if use_cuda else \"cpu\")\n\n            model = MyModel()\n            model.initialize_state()\n            model.initialize_learning_state()\n            model.to(cuda_device)\n\n            print('Pre-learning weight: ', model.synapse.weight.cpu().numpy())\n\n            # these models don't use gradients\n            with torch.no_grad():\n                for i in range(3):\n                    # fake data\n                    data = torch.normal(0, 1, size=(5, ))\n                    # pass it through the model\n                    model.forward(data)\n                    # apply model learning\n                    model.apply_learning()\n\n            print('Post-learning weight: ', model.synapse.weight.cpu().numpy())\n\n\n    if __name__ == '__main__':\n        # create and run the model\n        pipeline = SimplePipeline()\n        pipeline.run()\n\nWhen run, this print::\n\n    Pre-learning weight:  [-0.95982265 -0.2735969   0.6473335  -0.37592512  0.05847792]\n    Post-learning weight:  [-6.0495706e-09 -8.3768668e-08  3.3906079e-05 -3.3586942e-09\n      1.3144294e-32]\n\nAuthors\n-------\n\nA project of the Computational Physiology Laboratory at Cornell University.\n\n- Neuromorphic algorithms by Ayon Borthakur and Thomas Cleland.\n- Framework architecture by Matthew Einhorn.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cplab/sapicore",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sapicore",
    "package_url": "https://pypi.org/project/sapicore/",
    "platform": null,
    "project_url": "https://pypi.org/project/sapicore/",
    "project_urls": {
      "Homepage": "https://github.com/cplab/sapicore"
    },
    "release_url": "https://pypi.org/project/sapicore/0.1.1/",
    "requires_dist": [
      "numpy",
      "tqdm",
      "pandas",
      "ruamel.yaml",
      "nixio",
      "tree-config",
      "pytest (>=3.6) ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "sphinx-rtd-theme ; extra == 'dev'",
      "coveralls ; extra == 'dev'",
      "sphinx ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A PyTorch-based framework for neuromorphic modeling",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13797172,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11d354398ebabbe40edfff83d2d7bf5e6b838e19762acd1f8b4bafe919b0b922",
          "md5": "df1c52d8a5d5a0622491ef95a64a2512",
          "sha256": "f794d3923ad14524152e254a2ce4c25ca50b641bf1de97a14b472f124d418886"
        },
        "downloads": -1,
        "filename": "sapicore-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df1c52d8a5d5a0622491ef95a64a2512",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22828,
        "upload_time": "2021-08-01T18:22:58",
        "upload_time_iso_8601": "2021-08-01T18:22:58.386722Z",
        "url": "https://files.pythonhosted.org/packages/11/d3/54398ebabbe40edfff83d2d7bf5e6b838e19762acd1f8b4bafe919b0b922/sapicore-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d5a2c8d137638e3e178feef8c34859a4a2da6fd19162da8460b48df0b472c87",
          "md5": "f4180b3b4a1c0edf3c415c24bdb9d831",
          "sha256": "532573d0fd7c15cefdf64e0af24a9df73bf35c917698e077741832bed957b4e5"
        },
        "downloads": -1,
        "filename": "sapicore-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f4180b3b4a1c0edf3c415c24bdb9d831",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20815,
        "upload_time": "2021-08-01T18:23:00",
        "upload_time_iso_8601": "2021-08-01T18:23:00.333475Z",
        "url": "https://files.pythonhosted.org/packages/2d/5a/2c8d137638e3e178feef8c34859a4a2da6fd19162da8460b48df0b472c87/sapicore-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4cb5bc6508496bde38cd662a3a5ee38c446753c27af0d5baa51d9f80a1cf16f",
          "md5": "3cd73bfed203fb97f8b858a0a1ed346d",
          "sha256": "940d4ed2161f485968b6d85b475fcf22918a81a97f8cbd2739004c4627b03272"
        },
        "downloads": -1,
        "filename": "sapicore-0.1.0.dev0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3cd73bfed203fb97f8b858a0a1ed346d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22893,
        "upload_time": "2021-07-30T05:59:49",
        "upload_time_iso_8601": "2021-07-30T05:59:49.680251Z",
        "url": "https://files.pythonhosted.org/packages/c4/cb/5bc6508496bde38cd662a3a5ee38c446753c27af0d5baa51d9f80a1cf16f/sapicore-0.1.0.dev0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71d99554205b68e18457cc82adcd74736c2d90a3abb451f2aa658e8045ce6c0c",
          "md5": "b4deb482b18d12c0b4e47cdbe8c967c5",
          "sha256": "dca3478ca4ed63f5404878f6ce02c38b5dcacfa84e11cd3ce1d6748ef80a4d77"
        },
        "downloads": -1,
        "filename": "sapicore-0.1.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "b4deb482b18d12c0b4e47cdbe8c967c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20841,
        "upload_time": "2021-07-30T05:59:51",
        "upload_time_iso_8601": "2021-07-30T05:59:51.582068Z",
        "url": "https://files.pythonhosted.org/packages/71/d9/9554205b68e18457cc82adcd74736c2d90a3abb451f2aa658e8045ce6c0c/sapicore-0.1.0.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74480036854f532fcd4dbc9d97d0b663287bc3218e776d14441513ce702636ae",
          "md5": "c7319d71c41c3c140d2819b9de769428",
          "sha256": "a0e6a164e1c498869f7f0295addad48c185bc0d8b5cc2186b4c3b3dcfaab651b"
        },
        "downloads": -1,
        "filename": "sapicore-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7319d71c41c3c140d2819b9de769428",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22853,
        "upload_time": "2022-05-12T18:00:10",
        "upload_time_iso_8601": "2022-05-12T18:00:10.535009Z",
        "url": "https://files.pythonhosted.org/packages/74/48/0036854f532fcd4dbc9d97d0b663287bc3218e776d14441513ce702636ae/sapicore-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8f0b7af923d68f1bbdbf85cd7ce32f4272efab4620079bad41bad9db8e73f41",
          "md5": "9253c6e783d1eeea72b2b0450446ca7c",
          "sha256": "6a38ae2b416d93a45e80d2aa1f26a3cd13efb6b0f4038097aa71b69d014eaab9"
        },
        "downloads": -1,
        "filename": "sapicore-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9253c6e783d1eeea72b2b0450446ca7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20381,
        "upload_time": "2022-05-12T18:00:12",
        "upload_time_iso_8601": "2022-05-12T18:00:12.848743Z",
        "url": "https://files.pythonhosted.org/packages/a8/f0/b7af923d68f1bbdbf85cd7ce32f4272efab4620079bad41bad9db8e73f41/sapicore-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "74480036854f532fcd4dbc9d97d0b663287bc3218e776d14441513ce702636ae",
        "md5": "c7319d71c41c3c140d2819b9de769428",
        "sha256": "a0e6a164e1c498869f7f0295addad48c185bc0d8b5cc2186b4c3b3dcfaab651b"
      },
      "downloads": -1,
      "filename": "sapicore-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c7319d71c41c3c140d2819b9de769428",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 22853,
      "upload_time": "2022-05-12T18:00:10",
      "upload_time_iso_8601": "2022-05-12T18:00:10.535009Z",
      "url": "https://files.pythonhosted.org/packages/74/48/0036854f532fcd4dbc9d97d0b663287bc3218e776d14441513ce702636ae/sapicore-0.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8f0b7af923d68f1bbdbf85cd7ce32f4272efab4620079bad41bad9db8e73f41",
        "md5": "9253c6e783d1eeea72b2b0450446ca7c",
        "sha256": "6a38ae2b416d93a45e80d2aa1f26a3cd13efb6b0f4038097aa71b69d014eaab9"
      },
      "downloads": -1,
      "filename": "sapicore-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9253c6e783d1eeea72b2b0450446ca7c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20381,
      "upload_time": "2022-05-12T18:00:12",
      "upload_time_iso_8601": "2022-05-12T18:00:12.848743Z",
      "url": "https://files.pythonhosted.org/packages/a8/f0/b7af923d68f1bbdbf85cd7ce32f4272efab4620079bad41bad9db8e73f41/sapicore-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}