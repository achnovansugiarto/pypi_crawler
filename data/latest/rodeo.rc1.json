{
  "info": {
    "author": "Mohan Wu, Martin Lysy",
    "author_email": "mlysy@uwaterloo.ca",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# **rodeo:** Probabilistic ODE Solver\n\n*Mohan Wu, Martin Lysy*\n\n---\n\n## Description\n\n**rodeo** is a fast and flexible Python front-end library with a Fortran/C++ back-end that uses [probabilistic numerics](http://probabilistic-numerics.org/) to solve ordinary differential equations (ODEs).  That is, most ODE solvers (such as [Euler's method](https://en.wikipedia.org/wiki/Euler_method)) produce a deterministic approximation to the ODE on a grid of size `delta`.  As `delta` goes to zero, the approximation converges to the true ODE solution.  Probabilistic solvers such as **rodeo** also output a solution an a grid of size `delta`; however, the solution is random.  Still, as `delta` goes to zero, the probabilistic numerical approximation converges to the true solution.\n\n**rodeo** implements the probabilistic solver of [Chkrebtii et al (2016)](https://projecteuclid.org/euclid.ba/1473276259). This begins by putting a [Gaussian process](https://en.wikipedia.org/wiki/Gaussian_process) prior on the ODE solution, and updating it sequentially as the solver steps through the grid. The user-facing interface is written in Python to allow for a wide appeal. The back-end is a time-varying Kalman filter implemented in C++ and Fortran using state-of-the-art linear algrebra routines found [here](https://github.com/mlysy/kalmantv). **rodeo** is 10-40x faster than a pure Python implementation, achieving comparable speeds to the widely-used deterministic solver **odein** in the **Scipy** library. Various low-level backends are provided in the following modules:\n\n- `rodeo.cython`: This module performs the underlying linear algebra using the BLAS/LAPACK routines provided by NumPy through a Cython interface. \n  To maximize speed, no input checks are provided.  All inputs must be `float64` NumPy arrays in *Fortran* order. \n\n- `rodeo.eigen`: This module uses the C++ Eigen library for linear algebra.  The interface is also through Cython.  \n  Here again we have the same input requirements and lack of checks.  Eigen is known to be faster than most BLAS/LAPACK implementations, \n  but it needs to be compiled properly to achieve maximum performance.  In particular this involves linking against an installed version of Eigen (not provided)\n  and setting the right compiler flags for SIMD and OpenMP support.  Some defaults are provided in `setup.py`, but tweaks may be required depending on the user's system. \n\n- `rodeo.numba`: This module once again uses BLAS/LAPACK but the interface is through Numba.  Here input checks are performed and the inputs can be \n  in either C or Fortran order, and single or double precision (`float32` and `float64`).  However, C ordered arrays are first converted to Fortran order, \n  so the latter is preferable for performance considerations.\n\n## Installation\n\nDownload the repo from GitHub and then install with the `setup.py` script:\n\n```bash\ngit clone https://github.com/mlysy/rodeo.git\ncd rodeo\npip install .\n```\n\n## Unit Testing\n\nThe unit tests are done against the deterministic ode solver **odeint** to ensure that the solutions are approximately equal. They can be ran through the following commands:\n\n```bash\ncd tests\npython -m unittest discover -v\n```\n\n## Examples\n\nWe provide four separate ODE problems as examples to demonstrate the capabilities of **rodeo**. These examples are best viewed in the `examples/tutorial.ipynb` jupyter notebook, hence extra installations are required.\n\n```bash\npip install .[examples]\n```\n\n## Documentation\n\nThe HTML documentation can be compiled from the **kalmantv** root folder:\n```bash\npip install .[docs]\ncd docs\nmake html\n```\nThis will create the documentation in `docs/build`.\n\n## Usage\n\nPlease see the detailed example in the tutorial [here](https://nbviewer.jupyter.org/github/mlysy/rodeo/blob/cythonize/examples/tutorial.ipynb).  Running the tutorial compares the deterministic Euler solver to the probabilistic solver for the ODE initial value problem\n\n```\nx(t)^{(2)} = sin(2t) - x_t^{(0)}\nx(0)^{(1)} = 0\nx(0)^{(0)} = -1\n```\n\nThe results for N = 50, 100, and 200 grid points for both solvers is shown below.\n\n![chkrebtii](/docs/figures/chkrebtiifigure.png)\n\n**rodeo** is also capable of performing parameter inference using the mode-quadrature approximation method. For example the two variate **FitzHugh-Nagumo** model can be stated as\n```\nV(t)^{(1)} = cV(t)^{(0)} - (V(t)^{(0)})^3/3 + R(t)^({0})\nR(t)^{(1)} = -(V(t)^{(0)} - a + bR(t)^{(0)})/c\nV^{(0)} = -1, R^{(0)} = 1\n```\nwhere the parameter of interest is `theta = (a,b,c)`. A comparison of the deterministic Euler solver to the probabilistic solver is shown below.\n\n![fitzhugh](/docs/figures/fitzfigure.png)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mlysy/rodeo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rodeo",
    "package_url": "https://pypi.org/project/rodeo/",
    "platform": "",
    "project_url": "https://pypi.org/project/rodeo/",
    "project_urls": {
      "Homepage": "https://github.com/mlysy/rodeo"
    },
    "release_url": "https://pypi.org/project/rodeo/0.4/",
    "requires_dist": [
      "numpy",
      "scipy",
      "Cython",
      "numba",
      "eigenpip",
      "kalmantv",
      "sphinx ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "recommonmark ; extra == 'docs'",
      "jupyter ; extra == 'examples'",
      "matplotlib ; extra == 'examples'",
      "numdifftools ; extra == 'examples'",
      "seaborn ; extra == 'examples'"
    ],
    "requires_python": "",
    "summary": "",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12029660,
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8074cbf67fd5beef3984d4506ade2125b4cf44ee54936938f85975a8aaf833ab",
          "md5": "352c46a06e62b4fb39750f0c02ee5d9b",
          "sha256": "cc217008f15fc49e6efeb05e53738cf01e372a4b1917dd13a2631dc1f93db66d"
        },
        "downloads": -1,
        "filename": "rodeo-0.4-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "352c46a06e62b4fb39750f0c02ee5d9b",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 386553,
        "upload_time": "2021-11-15T19:06:02",
        "upload_time_iso_8601": "2021-11-15T19:06:02.308175Z",
        "url": "https://files.pythonhosted.org/packages/80/74/cbf67fd5beef3984d4506ade2125b4cf44ee54936938f85975a8aaf833ab/rodeo-0.4-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a386466d93b5442203e96789458abea3cb35afe825afacddcf0caf2203db10a9",
          "md5": "412e7b29ab432387f86858f1c58dea24",
          "sha256": "3dcc0eeb414127bd56b32297b2e0594c6b5837510ba0c26af59c00abbbda11bd"
        },
        "downloads": -1,
        "filename": "rodeo-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "412e7b29ab432387f86858f1c58dea24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25771,
        "upload_time": "2021-11-15T19:06:03",
        "upload_time_iso_8601": "2021-11-15T19:06:03.957795Z",
        "url": "https://files.pythonhosted.org/packages/a3/86/466d93b5442203e96789458abea3cb35afe825afacddcf0caf2203db10a9/rodeo-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8074cbf67fd5beef3984d4506ade2125b4cf44ee54936938f85975a8aaf833ab",
        "md5": "352c46a06e62b4fb39750f0c02ee5d9b",
        "sha256": "cc217008f15fc49e6efeb05e53738cf01e372a4b1917dd13a2631dc1f93db66d"
      },
      "downloads": -1,
      "filename": "rodeo-0.4-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "352c46a06e62b4fb39750f0c02ee5d9b",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 386553,
      "upload_time": "2021-11-15T19:06:02",
      "upload_time_iso_8601": "2021-11-15T19:06:02.308175Z",
      "url": "https://files.pythonhosted.org/packages/80/74/cbf67fd5beef3984d4506ade2125b4cf44ee54936938f85975a8aaf833ab/rodeo-0.4-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a386466d93b5442203e96789458abea3cb35afe825afacddcf0caf2203db10a9",
        "md5": "412e7b29ab432387f86858f1c58dea24",
        "sha256": "3dcc0eeb414127bd56b32297b2e0594c6b5837510ba0c26af59c00abbbda11bd"
      },
      "downloads": -1,
      "filename": "rodeo-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "412e7b29ab432387f86858f1c58dea24",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25771,
      "upload_time": "2021-11-15T19:06:03",
      "upload_time_iso_8601": "2021-11-15T19:06:03.957795Z",
      "url": "https://files.pythonhosted.org/packages/a3/86/466d93b5442203e96789458abea3cb35afe825afacddcf0caf2203db10a9/rodeo-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}