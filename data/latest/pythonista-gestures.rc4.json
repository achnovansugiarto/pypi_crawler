{
  "info": {
    "author": "Mikael Honkala",
    "author_email": "mikael.honkala@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: iOS"
    ],
    "description": "# gestures\n\nGestures wrapper for iOS\n\n# Gestures for the Pythonista iOS app\n \nThis is a convenience class for enabling gestures, including drag and drop\nsupport, in Pythonista UI applications. Main intent here has been to make\nthem Python friendly, hiding all the Objective-C details.\n\nRun the file on its own to see a demo of the supported gestures.\n\n![Demo image](https://raw.githubusercontent.com/mikaelho/pythonista-gestures/master/gestures.jpg)\n\n## Installation\n\nCopy from [GitHub](https://github.com/mikaelho/pythonista-gestures), or\n\n    pip install pythonista-gestures\n\nwith [stash](https://github.com/ywangd/stash).\n\n## Versions:\n\n* 1.2 - Adds drag and drop support.  \n* 1.1 - Adds distance parameters to swipe gestures.\n* 1.0 - First version released to PyPi. \n  Breaks backwards compatibility in syntax, adds multi-recognizer coordination,\n  and removes force press support.\n\n## Usage\n\nFor example, do something when user swipes left on a Label:\n \n    import gestures\n\n    def swipe_handler(data):\n        print(fâ€˜I was swiped left, starting from {data.location}')\n     \n    label = ui.Label()\n    gestures.swipe(label, swipe_handler, direction=gestures.LEFT)\n\nYour handler method gets one `data` argument that always contains the\nattributes described below. Individual gestures may provide more\ninformation; see the API documentation for the methods used to add different\ngestures.\n  \n* `recognizer` - (ObjC) recognizer object\n* `view` - (Pythonista) view that was gestured at\n* `location` - Location of the gesture as a `ui.Point` with `x` and `y`\n  attributes\n* `state` - State of gesture recognition; one of\n  `gestures.POSSIBLE/BEGAN/RECOGNIZED/CHANGED/ENDED/CANCELLED/FAILED`\n* `began`, `changed`, `ended`, `failed` - convenience boolean properties to \n  check for these states\n* `number_of_touches` - Number of touches recognized\n\nFor continuous gestures, check for `data.began` or `data.ended` in the handler \nif you are just interested that a pinch or a force press happened.\n\nAll of the gesture-adding methods return an object that can be used\nto remove or disable the gesture as needed, see the API. You can also remove\nall gestures from a view with `remove_all_gestures(view)`.\n\n## Drag and drop\n\nThis module supports dragging and dropping both within a Pythonista app and\nbetween Pythonista and another app (only possible on iPads). These two cases\nare handled differently:\n    \n* For in-app drops, Apple method of relaying objects is skipped completely,\n  and you can refer to _any_ Python object to be dropped to the target view.\n* For cross-app drops, we have to conform to Apple method of managing data.\n  Currently only plain text and image drops are supported, in either direction.\n* It is also good to note that `ui.TextField` and `ui.TextView` views natively\n  act as receivers for both in-app and cross-app plain text drag and drop.\n\nView is set to be a sender for a drap and drop operation with the `drag`\nfunction. Drag starts with a long press, and can end in any view that has been\nset as a receiver with the `drop` function. Views show the readiness to receive\ndata with a green \"plus\" sign. You can accept only specific types of data;\nincompatible drop targets show a grey \"forbidden\" sign.\n\nFollowing example covers setting up an in-app drag and drop operation between\ntwo labels. To repeat, in the in-app case, the simple string could replaced by\nany Python object of any complexity, passed by reference:\n    \n    drag(sender_label, \"Important data\")\n    \n    drop(receiver_label,\n        lambda data, sender, receiver: setattr(receiver, 'text', data),\n        accept=str)\n\nSee the documentation for the two functions for details.\n\n## Fine-tuning gesture recognition\n\nBy default only one gesture recognizer will be successful. You can prioritize\none over the other by using the `before` method of the returned object.\nFor example, the following ensures that the swipe always has a chance to happen\nfirst:\n    \n    panner = pan(view, pan_handler)\n    swiper = swipe(view, swipe_handler, direction=RIGHT)\n    swiper.before(panner)\n    \n(For your convenience, there is also a similar `after` method.)\n\nYou can also allow gestures to be recognized simultaneously using the\n`together_with` method. For example, the following enables simultaneous panning\nand zooming (pinching):\n    \n    panner = pan(view, pan_handler)\n    pincher = pinch(view, pinch_handler)\n    panner.together_with(pincher)\n\n## Using lambdas\n\nIf there in existing method that you just want to trigger with a gesture,\noften you do not need to create an extra handler function.\nThis works best with the discrete `tap` and `swipe` gestures where we do not\nneed to worry with the state of the gesture.\n\n    tap(label, lambda _: setattr(label, 'text', 'Tapped'))\n\nThe example below triggers some kind of a database refresh when a long press is\ndetected on a button.\nAnything more complicated than this is probably worth creating a separate\nfunction.\n    \n    long_press(button, lambda data: db.refresh() if data.began else None)\n\n## Pythonista app-closing gesture\n\nWhen you use the `hide_title_bar=True` attribute with `present`, you close\nthe app with the 2-finger-swipe-down gesture. This gesture can be\ndisabled with:\n  \n    gestures.disable_swipe_to_close(view)\n    \nwhere the `view` must be the one you `present`.\n\nYou can also replace the close gesture with another, by providing the\n\"magic\" `close` string as the gesture handler. For example,\nif you feel that tapping with two thumbs is more convenient in two-handed\nphone use:\n  \n    gestures.tap(view, 'close', number_of_touches_required=2)\n\n## Other details\n \n* Adding a gesture to a view automatically sets `touch_enabled=True` for that\n  view, to avoid counter-intuitive situations where adding a gesture\n  recognizer to e.g. ui.Label produces no results.\n* It can be hard to add gestures to ui.ScrollView, ui.TextView and the like,\n  because they have complex multi-view structures and gestures already in\n  place.  \n\n# API\n\n* [Functions](#functions)\n  * [Gestures](#gestures)\n  * [Gesture management](#gesture-management)\n  * [Drag and drop](#drag-and-drop)\n\n\n# Functions\n\n\n#### GESTURES\n#### `tap(view, action,number_of_taps_required=None, number_of_touches_required=None)`\n\n  Call `action` when a tap gesture is recognized for the `view`.\n  \n  Additional parameters:\n  \n  * `number_of_taps_required` - Set if more than one tap is required for\n    the gesture to be recognized.\n  * `number_of_touches_required` - Set if more than one finger is\n    required for the gesture to be recognized.\n\n#### `doubletap(view, action,number_of_touches_required=None)`\n\n  Convenience method that calls `tap` with a 2-tap requirement.\n      \n\n#### `long_press(view, action,number_of_taps_required=None,number_of_touches_required=None,minimum_press_duration=None,allowable_movement=None)`\n\n  Call `action` when a long press gesture is recognized for the\n  `view`. Note that this is a continuous gesture; you might want to\n  check for `data.changed` or `data.ended` to get the desired results.\n  \n  Additional parameters:\n  \n  * `number_of_taps_required` - Set if more than one tap is required for\n    the gesture to be recognized.\n  * `number_of_touches_required` - Set if more than one finger is\n    required for the gesture to be recognized.\n  * `minimum_press_duration` - Set to change the default 0.5-second\n    recognition treshold.\n  * `allowable_movement` - Set to change the default 10 point maximum\n  distance allowed for the gesture to be recognized.\n\n#### `pan(view, action,minimum_number_of_touches=None,maximum_number_of_touches=None)`\n\n  Call `action` when a pan gesture is recognized for the `view`.\n  This is a continuous gesture.\n  \n  Additional parameters:\n  \n  * `minimum_number_of_touches` - Set to control the gesture recognition.\n  * `maximum_number_of_touches` - Set to control the gesture recognition.\n  \n  Handler `action` receives the following gesture-specific attributes\n  in the `data` argument:\n  \n  * `translation` - Translation from the starting point of the gesture\n    as a `ui.Point` with `x` and `y` attributes.\n  * `velocity` - Current velocity of the pan gesture as points per\n    second (a `ui.Point` with `x` and `y` attributes).\n\n#### `edge_pan(view, action, edges)`\n\n  Call `action` when a pan gesture starting from the edge is\n  recognized for the `view`. This is a continuous gesture.\n  \n  `edges` must be set to one of\n  `gestures.EDGE_NONE/EDGE_TOP/EDGE_LEFT/EDGE_BOTTOM/EDGE_RIGHT\n  /EDGE_ALL`. If you want to recognize pans from different edges,\n  you have to set up separate recognizers with separate calls to this\n  method.\n  \n  Handler `action` receives the same gesture-specific attributes in\n  the `data` argument as pan gestures, see `pan`.\n\n#### `pinch(view, action)`\n\n  Call `action` when a pinch gesture is recognized for the `view`.\n  This is a continuous gesture.\n  \n  Handler `action` receives the following gesture-specific attributes\n  in the `data` argument:\n  \n  * `scale` - Relative to the distance of the fingers as opposed to when\n    the touch first started.\n  * `velocity` - Current velocity of the pinch gesture as scale\n    per second.\n\n#### `rotation(view, action)`\n\n  Call `action` when a rotation gesture is recognized for the `view`.\n  This is a continuous gesture.\n  \n  Handler `action` receives the following gesture-specific attributes\n  in the `data` argument:\n  \n  * `rotation` - Rotation in radians, relative to the position of the\n    fingers when the touch first started.\n  * `velocity` - Current velocity of the rotation gesture as radians\n    per second.\n\n#### `swipe(view, action,direction=None,number_of_touches_required=None,min_distance=None,max_distance=None)`\n\n  Call `action` when a swipe gesture is recognized for the `view`.\n  \n  Additional parameters:\n  \n  * `direction` - Direction of the swipe to be recognized. Either one of\n    `gestures.RIGHT/LEFT/UP/DOWN`, or a list of multiple directions.\n  * `number_of_touches_required` - Set if you need to change the minimum\n    number of touches required.\n  * `min_distance` - Minimum distance the swipe gesture must travel in\n    order to be recognized. Default is 50.\n    This uses an undocumented recognizer attribute.\n  * `max_distance` - Maximum distance the swipe gesture can travel in\n    order to still be recognized. Default is a very large number.\n    This uses an undocumented recognizer attribute.\n  \n  If set to recognize swipes to multiple directions, the handler\n  does not receive any indication of the direction of the swipe. Add\n  multiple recognizers if you need to differentiate between the\n  directions.\n\n#### GESTURE MANAGEMENT\n#### `disable(handler)`\n\n  Disable a recognizer temporarily. \n\n#### `enable(handler)`\n\n  Enable a disabled gesture recognizer. There is no error if the\n  recognizer is already enabled. \n\n#### `remove(view, handler)`\n\n  Remove the recognizer from the view permanently. \n\n#### `remove_all_gestures(view)`\n\n  Remove all gesture recognizers from a view. \n\n#### `disable_swipe_to_close(view)`\n\n  Utility class method that will disable the two-finger-swipe-down\n  gesture used in Pythonista to end the program when in full screen\n  view (`hide_title_bar` set to `True`).\n  \n  Returns a tuple of the actual ObjC view and dismiss target.\n\n#### `replace_close_gesture(view, recognizer_class)`\n\n\n#### DRAG AND DROP\n#### `drag(view, payload, allow_others=False)`\n\n  Sets the `view` to be the sender in a drag and drop operation. Dragging\n  starts with a long press.\n  \n  For within-app drag and drop, `payload` can be anything, and it is passed\n  by reference.\n  \n  If the `payload` is a text string or a `ui.Image`, it can be dragged\n  (copied) to another app (on iPad).\n  There is also built-in support for dropping text to any `ui.TextField` or\n  `ui.TextView`. \n  \n  If `payload` is a function, it is called at the time when the drag starts.\n  The function receives one argument, the sending `view`, and must return the\n  data to be dragged.\n  \n  Additional parameters:\n  \n  * `allow_others` - Set to True if other gestures attached to the view\n  should be prioritized over the dragging.\n\n#### `drop(view, action, accept=None)`\n\n  Sets the `view` as a drop target, calling the `action` function with\n  dropped data.\n  \n  Additional parameters:\n  \n  * `accept` - Control which data will be accepted for dropping. Simplest\n  option is to provide an accepted Python type like `dict` or `ui.Label`.\n  \n    For cross-app drops, only two types are currently supported: `str` for\n    plain text, and `ui.Image` for images.\n    \n    For in-app drops, the `accept` argument can also be a function that will\n    be called when a drag enters the view. Function gets same parameters\n    as the main handler, and should return False if the view should not accept\n    the drop.\n  \n  `action` function has to have this signature:\n      \n      def handle_drop(data, sender, receiver):\n          ...\n          \n  Arguments of the `action` function are:\n          \n  * `data` - The dragged data.\n  * `sender` - Source view of the drag and drop. This is `None` for drags\n  between apps.\n  * `receiver` - Same as `view`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mikaelho/pythonista-gestures",
    "keywords": "",
    "license": "The Unlicense",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pythonista-gestures",
    "package_url": "https://pypi.org/project/pythonista-gestures/",
    "platform": "",
    "project_url": "https://pypi.org/project/pythonista-gestures/",
    "project_urls": {
      "Homepage": "https://github.com/mikaelho/pythonista-gestures"
    },
    "release_url": "https://pypi.org/project/pythonista-gestures/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Gestures wrapper for iOS",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6857601,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e076e1766485ab9b521d9d4c304854f479b87db6df350dc54996aa5c71e4d608",
          "md5": "61ca4a951dac2b53af3444db69c8b6e2",
          "sha256": "3eacb71fbac3c1b509d2b6f8a32876568ce469c4d83163ea6cb21f9be32a0ee3"
        },
        "downloads": -1,
        "filename": "pythonista_gestures-1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61ca4a951dac2b53af3444db69c8b6e2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10408,
        "upload_time": "2020-03-01T13:16:02",
        "upload_time_iso_8601": "2020-03-01T13:16:02.383653Z",
        "url": "https://files.pythonhosted.org/packages/e0/76/e1766485ab9b521d9d4c304854f479b87db6df350dc54996aa5c71e4d608/pythonista_gestures-1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76da735eff77643683323decfa650e837177de51c03d141e3683e5d53eb3fa85",
          "md5": "c22c9592d207f5f3bef3cf9683985684",
          "sha256": "3ce91c523a2d54fe7cb21951f79894a9894edbb40f27d0a2ad0ea68a92291f62"
        },
        "downloads": -1,
        "filename": "pythonista-gestures-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c22c9592d207f5f3bef3cf9683985684",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 112434,
        "upload_time": "2020-03-01T13:16:06",
        "upload_time_iso_8601": "2020-03-01T13:16:06.376064Z",
        "url": "https://files.pythonhosted.org/packages/76/da/735eff77643683323decfa650e837177de51c03d141e3683e5d53eb3fa85/pythonista-gestures-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c70e82eefbc9aef53b0e8b13173443bb25e4683be8c9280f7019b728c4b0494",
          "md5": "d512a81fe914bcfd4cf87a48721e3f53",
          "sha256": "4f708d7da3eba48b2069a17e819a86086fec24bc20da2e36cf6727de3e6cc2cd"
        },
        "downloads": -1,
        "filename": "pythonista_gestures-1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d512a81fe914bcfd4cf87a48721e3f53",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11179,
        "upload_time": "2020-03-08T13:47:06",
        "upload_time_iso_8601": "2020-03-08T13:47:06.341592Z",
        "url": "https://files.pythonhosted.org/packages/4c/70/e82eefbc9aef53b0e8b13173443bb25e4683be8c9280f7019b728c4b0494/pythonista_gestures-1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f334b743c3e527d1a822f719969c0abce582f9f4ccb68d33256eee49aa3f4748",
          "md5": "ac27ad1f36471dddd6218ba0d15cfc3d",
          "sha256": "1469d655e1c569479229be8ffdf65e78141f2cf954614af1497412a8f573462d"
        },
        "downloads": -1,
        "filename": "pythonista-gestures-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac27ad1f36471dddd6218ba0d15cfc3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 113417,
        "upload_time": "2020-03-08T13:47:09",
        "upload_time_iso_8601": "2020-03-08T13:47:09.258458Z",
        "url": "https://files.pythonhosted.org/packages/f3/34/b743c3e527d1a822f719969c0abce582f9f4ccb68d33256eee49aa3f4748/pythonista-gestures-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5088e25ba5657e34a5b0a03607565c6c75b5a60503e8c9abd7db0369de7bc93",
          "md5": "a1b09d1e62db3112801661e7c46265f4",
          "sha256": "96751b3509bb41d5b89d4e12045cc8feb5092ed908c225bfd99a63ae30760c29"
        },
        "downloads": -1,
        "filename": "pythonista_gestures-1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1b09d1e62db3112801661e7c46265f4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15466,
        "upload_time": "2020-03-21T23:22:12",
        "upload_time_iso_8601": "2020-03-21T23:22:12.302727Z",
        "url": "https://files.pythonhosted.org/packages/d5/08/8e25ba5657e34a5b0a03607565c6c75b5a60503e8c9abd7db0369de7bc93/pythonista_gestures-1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5968cdd17d93ebc0aa5e737a21e6d06d5caee9e3d2d917963a1863140d1be5c0",
          "md5": "3cfcf181dbbda7467946febe44de25fa",
          "sha256": "9b0cc0cd4228376c7581832b461099ba0285ab97e7169cd6c798b1c1bf0e7a83"
        },
        "downloads": -1,
        "filename": "pythonista-gestures-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3cfcf181dbbda7467946febe44de25fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 118412,
        "upload_time": "2020-03-21T23:22:15",
        "upload_time_iso_8601": "2020-03-21T23:22:15.470215Z",
        "url": "https://files.pythonhosted.org/packages/59/68/cdd17d93ebc0aa5e737a21e6d06d5caee9e3d2d917963a1863140d1be5c0/pythonista-gestures-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40ef12fff202abaa18ec888e943ca3b970bcbde0d3e02218682dcf1c01ac319b",
          "md5": "fe160ced5c33948edc0f2496ac94ae8c",
          "sha256": "8a5c514ea3e0f2149a896f56a71a9085e2e0de1bd340c013f151a83c72d43baf"
        },
        "downloads": -1,
        "filename": "pythonista_gestures-1.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe160ced5c33948edc0f2496ac94ae8c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15479,
        "upload_time": "2020-03-21T23:32:42",
        "upload_time_iso_8601": "2020-03-21T23:32:42.928236Z",
        "url": "https://files.pythonhosted.org/packages/40/ef/12fff202abaa18ec888e943ca3b970bcbde0d3e02218682dcf1c01ac319b/pythonista_gestures-1.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae593b6e6675dde3581a25533cf36095b00362bc42f4ca558a05524f52939037",
          "md5": "a349f3a6d16f4c86ad1861334f8e6bc8",
          "sha256": "1410aa0364c1d9e4707d9587985a76d2d91d877d8c8a069f4118bad02b2583c7"
        },
        "downloads": -1,
        "filename": "pythonista-gestures-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a349f3a6d16f4c86ad1861334f8e6bc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 118427,
        "upload_time": "2020-03-21T23:32:45",
        "upload_time_iso_8601": "2020-03-21T23:32:45.505787Z",
        "url": "https://files.pythonhosted.org/packages/ae/59/3b6e6675dde3581a25533cf36095b00362bc42f4ca558a05524f52939037/pythonista-gestures-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "40ef12fff202abaa18ec888e943ca3b970bcbde0d3e02218682dcf1c01ac319b",
        "md5": "fe160ced5c33948edc0f2496ac94ae8c",
        "sha256": "8a5c514ea3e0f2149a896f56a71a9085e2e0de1bd340c013f151a83c72d43baf"
      },
      "downloads": -1,
      "filename": "pythonista_gestures-1.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe160ced5c33948edc0f2496ac94ae8c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 15479,
      "upload_time": "2020-03-21T23:32:42",
      "upload_time_iso_8601": "2020-03-21T23:32:42.928236Z",
      "url": "https://files.pythonhosted.org/packages/40/ef/12fff202abaa18ec888e943ca3b970bcbde0d3e02218682dcf1c01ac319b/pythonista_gestures-1.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae593b6e6675dde3581a25533cf36095b00362bc42f4ca558a05524f52939037",
        "md5": "a349f3a6d16f4c86ad1861334f8e6bc8",
        "sha256": "1410aa0364c1d9e4707d9587985a76d2d91d877d8c8a069f4118bad02b2583c7"
      },
      "downloads": -1,
      "filename": "pythonista-gestures-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a349f3a6d16f4c86ad1861334f8e6bc8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 118427,
      "upload_time": "2020-03-21T23:32:45",
      "upload_time_iso_8601": "2020-03-21T23:32:45.505787Z",
      "url": "https://files.pythonhosted.org/packages/ae/59/3b6e6675dde3581a25533cf36095b00362bc42f4ca558a05524f52939037/pythonista-gestures-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}