{
  "info": {
    "author": "Daniel C. Jones",
    "author_email": "djones3@fredhutch.org",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n![Maxspin](https://raw.github.com/dcjones/maxspin/main/logo.png)\n\n\nMaxspin (maximization of spatial information) is an information theoretic\napproach to quantifying the degree of spatial organization in spatial\ntranscriptomics (or other spatial omics) data.\n\n## Installation\n\nThe python package can be installed with:\n```sh\npip install maxspin\n```\n\n## Basic Usage\n\nThis package operates on `AnnData` objects from the [anndata](https://github.com/scverse/anndata) package.\n\nWe assume the existence of a spatial neighborhood graph. A simple and effective\nway of doing this is Delaunay triangulation, for example using [squidpy](https://github.com/scverse/squidpy).\n\n```python\nimport squidpy as sq\n\nsq.gr.spatial_neighbors(adata, delaunay=True, coord_type=\"generic\")\n```\n\nSpatial information can then be measured using the `spatial_information` function.\n\n```python\nfrom maxspin import spatial_information\n\nspatial_information(adata, prior=None)\n```\n\nThis adds a `spatial_information` column to the `var` metadata.\n\nSimilarly, pairwise spatial information can be computed with\n`pairwise_spatial_information`. This function will test every pair of genes,\nwhich is pretty impractical for large numbers of genes, so it's a good idea to\nsubset the `AnnData` object before calling this.\n\n\n```python\nfrom maxspin import pairwise_spatial_information\n\npairwise_spatial_information(adata, prior=None)\n```\n\nFor a more detailed example, check out the [tutorial](https://github.com/dcjones/maxspin/blob/main/tutorial.ipynb).\n\n## Interpreting the spatial information score\n\nThe method compute a score for every cell/spot that's in `[0,1]`, like a\ncorrelation but typically much smaller, and sums them to arrive at a spatial\ninformation score that is then in `[0, ncells]`. It's possible to normalize for\nthe number of cells by just dividing, but by default a pattern involving more\ncells is considered more spatially coherent, hence the sum.\n\n## Normalization\n\nThere are different ways spatial information can be computed. By default, no\nnormalization is done and spatial information is computed on absolute counts.\nUncertainty is incorporated using a Gamma-Poisson model.\n\nIf `prior=None` is used, the method makes no attempt to account for estimation\nuncertainty and computes spatial information directly on whatever is in\n`adata.X`.\n\nThe recommended way to run `spatial_information` is with some kind of normalized\nestimate of expression with some uncertainty estimation. There are two\nrecommended ways of doing this: SCVI and Vanity.\n\n\n## SCVI\n\n[SCVI](https://scvi-tools.org/) is a convenient and versatile probabilistic\nmodel of sequencing experiments, from which we can sample from the posterior to\nget normalized point estimates with uncertainty.\n\nUsing Maxspin with SCVI looks something like this:\n\n\n```python\nimport scvi\nimport numpy as np\nfrom maxspin import spatial_information\n\nscvi.model.SCVI.setup_anndata(adata)\nmodel = scvi.model.SCVI(adata, n_latent=20)\n\n# Sample log-expression values from the posterior.\nposterior_samples = np.log(model.get_normalized_expression(return_numpy=True, return_mean=False, n_samples=20, library_size=\"latent\"))\nadata_scvi = adata.copy()\nadata_scvi.X = np.mean(posterior_samples, axis=0)\nadata_scvi.layers[\"std\"] = np.std(posterior_samples, axis=0)\n\nspatial_information(adata_scvi, prior=\"gaussian\")\n```\n\nThe [tutorial](https://github.com/dcjones/maxspin/blob/main/tutorial.ipynb) has\na more in depth example of using SCVI.\n\n## Vanity\n\n\nI developed the normalization method [vanity](https://github.com/dcjones/vanity)\nin part as convenient way to normalize spatial transcriptomics data in a way\nthat provides uncertainty estimates. The preferred way of running vanity + maxspin is then:\n\n```python\nfrom maxspin import spatial_information\nfrom vanity import normalize_vanity\n\nnormalize_vanity(adata)\nspatial_information(adata, prior=\"gaussian\")\n\n```\n\nCompared to SCVI, this model more aggressively shrinks low expression genes,\nwhich might cause it to miss something very subtle, but is less likely to detect\nspurious patterns.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dcjones/maxspin",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maxspin",
    "package_url": "https://pypi.org/project/maxspin/",
    "platform": null,
    "project_url": "https://pypi.org/project/maxspin/",
    "project_urls": {
      "Documentation": "https://github.com/dcjones/maxspin",
      "Homepage": "https://github.com/dcjones/maxspin",
      "Repository": "https://github.com/dcjones/maxspin"
    },
    "release_url": "https://pypi.org/project/maxspin/0.1.0/",
    "requires_dist": [
      "jax (>=0.3.13,<0.4.0)",
      "anndata (>=0.8.0,<0.9.0)",
      "numpy (>=1.22.3,<2.0.0)",
      "scipy (>=1.8.1,<2.0.0)",
      "flax (>=0.4.2,<0.5.0)",
      "tqdm (>=4.64.0,<5.0.0)",
      "optax (>=0.1.2,<0.2.0)"
    ],
    "requires_python": ">=3.8,<3.11",
    "summary": "Estimate spatial information in spatial -omics datasets.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16138042,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c90dc4382d59ee8d01c54b0c0a7b1fdff08663682ae2936e9491bf9acaf57816",
          "md5": "98b45b2ffb80048163cfc30b2ed1966d",
          "sha256": "995349e928fa64c84194af1e870885020902824e666b762796c928e9ae2d212c"
        },
        "downloads": -1,
        "filename": "maxspin-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98b45b2ffb80048163cfc30b2ed1966d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.11",
        "size": 17963,
        "upload_time": "2022-12-18T01:51:59",
        "upload_time_iso_8601": "2022-12-18T01:51:59.961581Z",
        "url": "https://files.pythonhosted.org/packages/c9/0d/c4382d59ee8d01c54b0c0a7b1fdff08663682ae2936e9491bf9acaf57816/maxspin-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7379f897dd79e4a69f25cdc5b310676691cdb0bb1cf5abbb082527de5173970d",
          "md5": "6848ef43778cf39bfd2c097987313bd5",
          "sha256": "1a0256b4c9e60192c45f74a0ab92df1efa606079ca25c974600eb521ab79b786"
        },
        "downloads": -1,
        "filename": "maxspin-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6848ef43778cf39bfd2c097987313bd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.11",
        "size": 15755,
        "upload_time": "2022-12-18T01:52:02",
        "upload_time_iso_8601": "2022-12-18T01:52:02.068280Z",
        "url": "https://files.pythonhosted.org/packages/73/79/f897dd79e4a69f25cdc5b310676691cdb0bb1cf5abbb082527de5173970d/maxspin-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c90dc4382d59ee8d01c54b0c0a7b1fdff08663682ae2936e9491bf9acaf57816",
        "md5": "98b45b2ffb80048163cfc30b2ed1966d",
        "sha256": "995349e928fa64c84194af1e870885020902824e666b762796c928e9ae2d212c"
      },
      "downloads": -1,
      "filename": "maxspin-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "98b45b2ffb80048163cfc30b2ed1966d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<3.11",
      "size": 17963,
      "upload_time": "2022-12-18T01:51:59",
      "upload_time_iso_8601": "2022-12-18T01:51:59.961581Z",
      "url": "https://files.pythonhosted.org/packages/c9/0d/c4382d59ee8d01c54b0c0a7b1fdff08663682ae2936e9491bf9acaf57816/maxspin-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7379f897dd79e4a69f25cdc5b310676691cdb0bb1cf5abbb082527de5173970d",
        "md5": "6848ef43778cf39bfd2c097987313bd5",
        "sha256": "1a0256b4c9e60192c45f74a0ab92df1efa606079ca25c974600eb521ab79b786"
      },
      "downloads": -1,
      "filename": "maxspin-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6848ef43778cf39bfd2c097987313bd5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<3.11",
      "size": 15755,
      "upload_time": "2022-12-18T01:52:02",
      "upload_time_iso_8601": "2022-12-18T01:52:02.068280Z",
      "url": "https://files.pythonhosted.org/packages/73/79/f897dd79e4a69f25cdc5b310676691cdb0bb1cf5abbb082527de5173970d/maxspin-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}