{
  "info": {
    "author": "Intel",
    "author_email": "intelnervana@intel.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ngraph-onnx [![Build Status](https://travis-ci.org/NervanaSystems/ngraph-onnx.svg?branch=master)](https://travis-ci.org/NervanaSystems/ngraph-onnx/branches)\n\nnGraph Backend for ONNX.\n\nThis repository contains tools to run [ONNX][onnx] models using the [Intel nGraph library][ngraph_github] as a backend.\n\n## Installation\n\nFollow our [build][building] instructions to install nGraph-ONNX from sources.\n\n<!-- @TODO: Restore pip installation section when new wheels are on PyPI\n\nnGraph and nGraph-ONNX are available as binary wheels you can install from PyPI.\n\nnGraph binary wheels are currently tested on Ubuntu 16.04, if you're using a different system, you may want to [build][building] nGraph-ONNX from sources.\n\n### Prerequisites\n\nPython 3.4 or higher is required. \n\n    # apt update\n    # apt install python3 python-virtualenv\n\n### Using a virtualenv (optional)\n\nYou may wish to use a virutualenv for your installation.\n\n    $ virtualenv -p $(which python3) venv\n    $ source venv/bin/activate\n    (venv) $\n\n### Installing\n\n    (venv) $ pip install ngraph-core\n    (venv) $ pip install ngraph-onnx\n-->\n\n## Usage example\n\n### Importing an ONNX model\n\nYou can download models from the [ONNX model zoo][onnx_model_zoo]. For example ResNet-50:\n\n```\n$ wget https://s3.amazonaws.com/download.onnx/models/opset_8/resnet50.tar.gz\n$ tar -xzvf resnet50.tar.gz\n```\n\nUse the following Python commands to convert the downloaded model to an nGraph model:\n\n```python\n# Import ONNX and load an ONNX file from disk\n>>> import onnx\n>>> onnx_protobuf = onnx.load('resnet50/model.onnx')\n\n# Convert ONNX model to an ngraph model\n>>> from ngraph_onnx.onnx_importer.importer import import_onnx_model\n>>> ng_function = import_onnx_model(onnx_protobuf)\n\n# The importer returns a list of ngraph models for every ONNX graph output:\n>>> print(ng_function)\n<Function: 'resnet50' ([1, 1000])>\n```\n\nThis creates an nGraph `Function` object, which can be used to execute a computation on a chosen backend.\n\n### Running a computation\n\nAfter importing an ONNX model, you will have an nGraph `Function` object. \nNow you can create an nGraph `Runtime` backend and use it to compile your `Function` to a backend-specific `Computation` object.\nFinally, you can execute your model by calling the created `Computation` object with input data.\n\n```python\n# Using an ngraph runtime (CPU backend) create a callable computation object\n>>> import ngraph as ng\n>>> runtime = ng.runtime(backend_name='CPU')\n>>> resnet_on_cpu = runtime.computation(ng_function)\n\n# Load an image (or create a mock as in this example)\n>>> import numpy as np\n>>> picture = np.ones([1, 3, 224, 224], dtype=np.float32)\n\n# Run computation on the picture:\n>>> resnet_on_cpu(picture)\n[array([[2.16105007e-04, 5.58412226e-04, 9.70510227e-05, 5.76671446e-05,\n         7.45318757e-05, 4.80892748e-04, 5.67404088e-04, 9.48728994e-05,\n         ...\n```\n\n[onnx]: http://onnx.ai/\n[onnx_model_zoo]: https://github.com/onnx/models\n[ngraph_github]: https://github.com/NervanaSystems/ngraph\n[building]: https://github.com/NervanaSystems/ngraph-onnx/blob/master/BUILDING.md\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NervanaSystems/ngraph-onnx",
    "keywords": "",
    "license": "License :: OSI Approved :: Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ngraph-onnx",
    "package_url": "https://pypi.org/project/ngraph-onnx/",
    "platform": "",
    "project_url": "https://pypi.org/project/ngraph-onnx/",
    "project_urls": {
      "Homepage": "https://github.com/NervanaSystems/ngraph-onnx"
    },
    "release_url": "https://pypi.org/project/ngraph-onnx/0.24.0/",
    "requires_dist": [
      "cachetools",
      "ngraph-core",
      "numpy",
      "onnx",
      "setuptools"
    ],
    "requires_python": "",
    "summary": "nGraph Backend for ONNX",
    "version": "0.24.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5621083,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20087fa2dd4533e303f1c896d47237701093b1eabce779bb69e0cf60a8804453",
          "md5": "133de2e09af2baddf49cb5feed176654",
          "sha256": "cb4fe0726f235329f2ccb2c913f24f0d2e1550a3ca7bbe3c3754d11c281cb5e8"
        },
        "downloads": -1,
        "filename": "ngraph_onnx-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "133de2e09af2baddf49cb5feed176654",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 55378,
        "upload_time": "2018-12-01T00:23:29",
        "upload_time_iso_8601": "2018-12-01T00:23:29.748629Z",
        "url": "https://files.pythonhosted.org/packages/20/08/7fa2dd4533e303f1c896d47237701093b1eabce779bb69e0cf60a8804453/ngraph_onnx-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.0rc5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f06dda0f658a366be0dd992b136dd8a7b67dd1781ef295a67308d9b0e89c8798",
          "md5": "87898b70fda24e87f1a3d96323f7b734",
          "sha256": "351f426e42b05cbc9274febb0f26a1e34b64116e35cafb85e1a4bd41c04ba8df"
        },
        "downloads": -1,
        "filename": "ngraph_onnx-0.10.0rc5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87898b70fda24e87f1a3d96323f7b734",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 51419,
        "upload_time": "2018-11-30T05:57:23",
        "upload_time_iso_8601": "2018-11-30T05:57:23.081028Z",
        "url": "https://files.pythonhosted.org/packages/f0/6d/da0f658a366be0dd992b136dd8a7b67dd1781ef295a67308d9b0e89c8798/ngraph_onnx-0.10.0rc5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.24.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53828440d4bf3e0de3fbea9cdc4fe627dfb66757f2d63d8b342532f7067ce09e",
          "md5": "100e29027837a495b2fd1f8fff844280",
          "sha256": "74610fe1883df36c3dd8e6071dde4b8833759db6aabcdcb3db8f3c1b1cacdd96"
        },
        "downloads": -1,
        "filename": "ngraph_onnx-0.24.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "100e29027837a495b2fd1f8fff844280",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20416,
        "upload_time": "2019-08-01T22:17:44",
        "upload_time_iso_8601": "2019-08-01T22:17:44.089351Z",
        "url": "https://files.pythonhosted.org/packages/53/82/8440d4bf3e0de3fbea9cdc4fe627dfb66757f2d63d8b342532f7067ce09e/ngraph_onnx-0.24.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53828440d4bf3e0de3fbea9cdc4fe627dfb66757f2d63d8b342532f7067ce09e",
        "md5": "100e29027837a495b2fd1f8fff844280",
        "sha256": "74610fe1883df36c3dd8e6071dde4b8833759db6aabcdcb3db8f3c1b1cacdd96"
      },
      "downloads": -1,
      "filename": "ngraph_onnx-0.24.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "100e29027837a495b2fd1f8fff844280",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20416,
      "upload_time": "2019-08-01T22:17:44",
      "upload_time_iso_8601": "2019-08-01T22:17:44.089351Z",
      "url": "https://files.pythonhosted.org/packages/53/82/8440d4bf3e0de3fbea9cdc4fe627dfb66757f2d63d8b342532f7067ce09e/ngraph_onnx-0.24.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}