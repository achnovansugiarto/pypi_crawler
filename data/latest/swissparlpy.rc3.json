{
  "info": {
    "author": "",
    "author_email": "Stefan Oderbolz <odi@metaodi.ch>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "[![PyPI Version][pypi-image]][pypi-url]\n[![Build Status][build-image]][build-url]\n\n\nswissparlpy\n===========\n\nThis module provides easy access to the data of the [OData webservice](https://ws.parlament.ch/odata.svc/) of the [Swiss parliament](https://www.parlament.ch/en).\n\n## Table of Contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n    * [Get tables and their variables](#get-tables-and-their-variables)\n    * [Get data of a table](#get-data-of-a-table)\n    * [Use together with `pandas`](#use-together-with-pandas)\n    * [Substrings](#substrings)\n    * [Date ranges](#date-ranges)\n    * [Advanced filter](#advanced-filter)\n    * [Large queries](#large-queries)\n* [Credits](#credits)\n* [Development](#development)\n* [Release](#release)\n\n## Installation\n\n[swissparlpy is available on PyPI](https://pypi.org/project/swissparlpy/), so to install it simply use:\n\n```\n$ pip install swissparlpy\n```\n\n## Usage\n\nSee the [`examples` directory](/examples) for more scripts.\n\n### Get tables and their variables\n\n```python\n>>> import swissparlpy as spp\n>>> spp.get_tables()[:5] # get first 5 tables\n['MemberParty', 'Party', 'Person', 'PersonAddress', 'PersonCommunication']\n>>> spp.get_variables('Party') # get variables of table `Party`\n['ID', 'Language', 'PartyNumber', 'PartyName', 'StartDate', 'EndDate', 'Modified', 'PartyAbbreviation']\n```\n\n### Get data of a table\n\n```python\n>>> import swissparlpy as spp\n>>> data = spp.get_data('Canton', Language='DE')\n>>> data\n<swissparlpy.client.SwissParlResponse object at 0x7f8e38baa610>\n>>> data.count\n26\n>>> data[0]\n{'ID': 2, 'Language': 'DE', 'CantonNumber': 2, 'CantonName': 'Bern', 'CantonAbbreviation': 'BE'}\n>>> [d['CantonName'] for d in data]\n['Bern', 'Neuenburg', 'Genf', 'Wallis', 'Uri', 'Schaffhausen', 'Jura', 'Basel-Stadt', 'St. Gallen', 'Obwalden', 'Appenzell A.-Rh.', 'Solothurn', 'Waadt', 'Zug', 'Aargau', 'Basel-Landschaft', 'Luzern', 'Thurgau', 'Freiburg', 'Appenzell I.-Rh.', 'Schwyz', 'Graubünden', 'Glarus', 'Tessin', 'Zürich', 'Nidwalden']\n```\n\nThe return value of `get_data` is iterable, so you can easily loop over it. Or you can use indices to access elements, e.g. `data[1]` to get the second element, or `data[-1]` to get the last one.\n\nEven [slicing](https://python-reference.readthedocs.io/en/latest/docs/brackets/slicing.html) is supported, so you can do things like only iterate over the first 5 elements using\n\n```python\nfor rec in data[:5]:\n   print(rec)\n```\n\n### Use together with `pandas`\n\nTo create a pandas DataFrame from `get_data` simply pass the return value to the constructor:\n\n```python\n>>> import swissparlpy as spp\n>>> import pandas as pd\n>>> parties = spp.get_data('Party', Language='DE')\n>>> parties_df = pd.DataFrame(parties)\n>>> parties_df\n      ID Language  PartyNumber  ...                   EndDate                         Modified PartyAbbreviation\n0     12       DE           12  ... 2000-01-01 00:00:00+00:00 2010-12-26 13:05:26.430000+00:00                SP\n1     13       DE           13  ... 2000-01-01 00:00:00+00:00 2010-12-26 13:05:26.430000+00:00               SVP\n2     14       DE           14  ... 2000-01-01 00:00:00+00:00 2010-12-26 13:05:26.430000+00:00               CVP\n3     15       DE           15  ... 2000-01-01 00:00:00+00:00 2010-12-26 13:05:26.430000+00:00      FDP-Liberale\n4     16       DE           16  ... 2000-01-01 00:00:00+00:00 2010-12-26 13:05:26.430000+00:00               LDP\n..   ...      ...          ...  ...                       ...                              ...               ...\n78  1582       DE         1582  ... 2000-01-01 00:00:00+00:00 2015-12-03 08:48:38.250000+00:00             BastA\n79  1583       DE         1583  ... 2000-01-01 00:00:00+00:00 2019-03-07 17:24:15.013000+00:00              CVPO\n80  1584       DE         1584  ... 2000-01-01 00:00:00+00:00 2019-11-08 17:28:43.947000+00:00                Al\n81  1585       DE         1585  ... 2000-01-01 00:00:00+00:00 2019-11-08 17:41:39.513000+00:00               EàG\n82  1586       DE         1586  ... 2000-01-01 00:00:00+00:00 2021-08-12 07:59:22.627000+00:00               M-E\n\n[83 rows x 8 columns]\n```\n\n### Substrings\n\nIf you want to query for substrings there are two main operators to use:\n\n**`__startswith`**:\n\n```python\n>>> import swissparlpy as spp\n>>> persons = spp.get_data(\"Person\", Language=\"DE\", LastName__startswith='Bal')\n>>> persons.count\n12\n```\n\n**`__contains`**\n```python\n>>> import swissparlpy as spp\n>>> co2_business = spp.get_data(\"Business\", Title__contains=\"CO2\", Language = \"DE\")\n>>> co2_business.count\n265\n```\n\nYou can suffix any field with those operators to query the data.\n\n### Date ranges\n\nTo query for date ranges you can use the operators...\n\n* `__gt` (greater than)\n* `__gte` (greater than or equal)\n* `__lt` (less than)\n* `__lte` (less than or equal)\n\n...in combination with a `datetime` object.\n\n```python\n>>> import swissparlpy as spp\n>>> from datetime import datetime\n>>> business = spp.get_data(\n...     \"Business\",\n...     Language=\"DE\",\n...     SubmissionDate__gt=datetime.fromisoformat('2019-09-30'),\n...     SubmissionDate__lte=datetime.fromisoformat('2019-10-31')\n... )\n>>> business.count\n22\n```\n\n### Advanced filter\n\n**Text query**\n\nIt's possible to write text queries using operators like `eq` (equals), `ne` (not equals), `lt`/`lte` (less than/less than or equals), `gt` / `gte` (greater than/greater than or equals), `startswith()` and `contains`:\n\n```python\nimport swissparlpy as spp\nimport pandas as pd\n   \npersons = spp.get_data(\n   \"Person\",\n   filter=\"(startswith(FirstName, 'Ste') or LastName eq 'Seiler') and Language eq 'DE'\"\n)\n\ndf = pd.DataFrame(persons)\nprint(df[['FirstName', 'LastName']])\n```\n\n**Callable Filter**\n\nYou can provide a callable as a filter which allows for more advanced filters.\n\n`swissparlpy.filter` provides `or_` and `and_`.\n\n```python\nimport swissparlpy as spp\nimport pandas as pd\n\n# filter by FirstName = 'Stefan' OR LastName == 'Seiler'\ndef filter_by_name(ent):\n   return spp.filter.or_(\n      ent.FirstName == 'Stefan',\n      ent.LastName == 'Seiler'\n   )\n   \npersons = spp.get_data(\"Person\", filter=filter_by_name, Language='DE')\n\ndf = pd.DataFrame(persons)\nprint(df[['FirstName', 'LastName']])\n```\n\n### Large queries\n\nLarge queries (especially the tables Voting and Transcripts) may result in server-side errors (500 Internal Server Error). In these cases it is recommended to download the data in smaller batches, save the individual blocks and combine them after the download.\n\nThis is an [example script](/examples/download_votes_in_batches.py) to download all votes of the legislative period 50, session by session, and combine them afterwards in one `DataFrame`:\n\n```python\nimport swissparlpy as spp\nimport pandas as pd\nimport os\n\n__location__ = os.path.realpath(os.getcwd())\npath = os.path.join(__location__, \"voting50\")\n\n# download votes of one session and save as pickled DataFrame\ndef save_votes_of_session(id, path):\n    if not os.path.exists(path):\n        os.mkdir(path)\n    data = spp.get_data(\"Voting\", Language=\"DE\", IdSession=id)\n    print(f\"{data.count} rows loaded.\")\n    df = pd.DataFrame(data)\n    pickle_path = os.path.join(path, f'{id}.pks')\n    df.to_pickle(pickle_path)\n    print(f\"Saved pickle at {pickle_path}\")\n\n\n# get all session of the 50 legislative period\nsessions50 = spp.get_data(\"Session\", Language=\"DE\", LegislativePeriodNumber=50)\nsessions50.count\n\nfor session in sessions50:\n    print(f\"Loading session {session['ID']}\")\n    save_votes_of_session(session['ID'], path)\n\n# Combine to one dataframe\ndf_voting50 = pd.concat([pd.read_pickle(os.path.join(path, x)) for x in os.listdir(path)])\n```\n\n## Credits\n\nThis library is inspired by the R package [swissparl](https://github.com/zumbov2/swissparl) of [David Zumbach](https://github.com/zumbov2).\n[Ralph Straumann](https://twitter.com/rastrau) initial [asked about a Python version of `swissparl` on Twitter](https://twitter.com/rastrau/status/1441048778740432902), which led to this project.\n\n## Development\n\nTo develop on this project, install `flit`:\n\n```\npip install flit\nflit install -s\n```\n\n## Release\n\nTo create a new release, follow these steps (please respect [Semantic Versioning](http://semver.org/)):\n\n1. Adapt the version number in `swissparlpy/__init__.py`\n1. Update the CHANGELOG with the version\n1. Create a [pull request to merge `develop` into `main`](https://github.com/metaodi/swissparlpy/compare/main...develop?expand=1) (make sure the tests pass!)\n1. Create a [new release/tag on GitHub](https://github.com/metaodi/swissparlpy/releases) (on the main branch)\n1. The [publication on PyPI](https://pypi.python.org/pypi/swissparlpy) happens via [GitHub Actions](https://github.com/metaodi/swissparlpy/actions?query=workflow%3A%22Upload+Python+Package%22) on every tagged commit\n\n\n<!-- Badges -->\n[pypi-image]: https://img.shields.io/pypi/v/swissparlpy\n[pypi-url]: https://pypi.org/project/swissparlpy/\n[build-image]: https://github.com/metaodi/swissparlpy/actions/workflows/build.yml/badge.svg\n[build-url]: https://github.com/metaodi/swissparlpy/actions/workflows/build.yml\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "swissparlpy",
    "package_url": "https://pypi.org/project/swissparlpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/swissparlpy/",
    "project_urls": {
      "Home": "https://github.com/metaodi/swissparlpy"
    },
    "release_url": "https://pypi.org/project/swissparlpy/0.2.1/",
    "requires_dist": [
      "requests",
      "pyodata>=1.9.0",
      "flit ; extra == \"dev\"",
      "jupyter ; extra == \"dev\"",
      "pandas ; extra == \"dev\"",
      "flake8 ; extra == \"test\"",
      "mock ; extra == \"test\"",
      "responses ; extra == \"test\"",
      "pytest ; extra == \"test\"",
      "pytest-cov ; extra == \"test\""
    ],
    "requires_python": ">=3.7",
    "summary": "Client for Swiss parliament API",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12746535,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cc64f2194e1b60ed73ed8e49ef188263448b9b2edd6a4dda87975fb4a9e7fa5",
          "md5": "1568154ea59a349fff5eb57d59cc5dec",
          "sha256": "e98e4272cff9bb9d20855c0f0f77fea05be4c32bc2087cd277ec715917cf236a"
        },
        "downloads": -1,
        "filename": "swissparlpy-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1568154ea59a349fff5eb57d59cc5dec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 4528,
        "upload_time": "2021-09-27T13:29:39",
        "upload_time_iso_8601": "2021-09-27T13:29:39.302569Z",
        "url": "https://files.pythonhosted.org/packages/4c/c6/4f2194e1b60ed73ed8e49ef188263448b9b2edd6a4dda87975fb4a9e7fa5/swissparlpy-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6976db9fc6f3c2a1853981ced56543b0fd5844c9a5c8ae2b6ce1f863b98ac984",
          "md5": "e70d10e53efa712bd9990ba9ea035397",
          "sha256": "d22787184a39866aac5b84e3b8256e17488ac91e2c72e9ba105c7eb903cd0ec8"
        },
        "downloads": -1,
        "filename": "swissparlpy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e70d10e53efa712bd9990ba9ea035397",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16504,
        "upload_time": "2021-09-27T13:29:42",
        "upload_time_iso_8601": "2021-09-27T13:29:42.241430Z",
        "url": "https://files.pythonhosted.org/packages/69/76/db9fc6f3c2a1853981ced56543b0fd5844c9a5c8ae2b6ce1f863b98ac984/swissparlpy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e65a07558c71906062edc35ab31ab16c99b4deb166eb2702d0e7d8312921d15b",
          "md5": "8ab0bddcf092842f46b247cbb7372a8c",
          "sha256": "c736fa0e7b1869fb516d5ab445f2dcac3f0d949f4fcf90e671b0fbf3d32102d7"
        },
        "downloads": -1,
        "filename": "swissparlpy-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ab0bddcf092842f46b247cbb7372a8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6870,
        "upload_time": "2021-10-14T15:59:26",
        "upload_time_iso_8601": "2021-10-14T15:59:26.756879Z",
        "url": "https://files.pythonhosted.org/packages/e6/5a/07558c71906062edc35ab31ab16c99b4deb166eb2702d0e7d8312921d15b/swissparlpy-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "833f5ae3249cfa8a485497af60aae43b388a378ecc4a1afe788edcd62ed31017",
          "md5": "83823e41736aa1ab0716c0bbfda5f5f9",
          "sha256": "392d195a938e6ee71c7434acc7924ed87c15589639d70118d7bda408ba4c5ec7"
        },
        "downloads": -1,
        "filename": "swissparlpy-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "83823e41736aa1ab0716c0bbfda5f5f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22989,
        "upload_time": "2021-10-14T15:59:28",
        "upload_time_iso_8601": "2021-10-14T15:59:28.372886Z",
        "url": "https://files.pythonhosted.org/packages/83/3f/5ae3249cfa8a485497af60aae43b388a378ecc4a1afe788edcd62ed31017/swissparlpy-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5189392a5574d1166b5ede02d474632c23cf7609888169bd3e440975d06ef41",
          "md5": "c927428f6bfa40717c1febed38e0b110",
          "sha256": "2956e137be768f92465e049889f72878eb00d66ebb57d4414892df4d65aaca7b"
        },
        "downloads": -1,
        "filename": "swissparlpy-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c927428f6bfa40717c1febed38e0b110",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6921,
        "upload_time": "2022-01-31T16:16:49",
        "upload_time_iso_8601": "2022-01-31T16:16:49.083697Z",
        "url": "https://files.pythonhosted.org/packages/b5/18/9392a5574d1166b5ede02d474632c23cf7609888169bd3e440975d06ef41/swissparlpy-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "247779032c15154e8d4305d1a7de081311bc614403d077ddc22ba174f2494c19",
          "md5": "71253a5abd900fe0a89735ac07ed47e1",
          "sha256": "df8e27b1510eca21151a9b45fa372847a1dac3a4931fadd3bcf35e5b059208f8"
        },
        "downloads": -1,
        "filename": "swissparlpy-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "71253a5abd900fe0a89735ac07ed47e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22851,
        "upload_time": "2022-01-31T16:16:50",
        "upload_time_iso_8601": "2022-01-31T16:16:50.805296Z",
        "url": "https://files.pythonhosted.org/packages/24/77/79032c15154e8d4305d1a7de081311bc614403d077ddc22ba174f2494c19/swissparlpy-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5189392a5574d1166b5ede02d474632c23cf7609888169bd3e440975d06ef41",
        "md5": "c927428f6bfa40717c1febed38e0b110",
        "sha256": "2956e137be768f92465e049889f72878eb00d66ebb57d4414892df4d65aaca7b"
      },
      "downloads": -1,
      "filename": "swissparlpy-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c927428f6bfa40717c1febed38e0b110",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6921,
      "upload_time": "2022-01-31T16:16:49",
      "upload_time_iso_8601": "2022-01-31T16:16:49.083697Z",
      "url": "https://files.pythonhosted.org/packages/b5/18/9392a5574d1166b5ede02d474632c23cf7609888169bd3e440975d06ef41/swissparlpy-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "247779032c15154e8d4305d1a7de081311bc614403d077ddc22ba174f2494c19",
        "md5": "71253a5abd900fe0a89735ac07ed47e1",
        "sha256": "df8e27b1510eca21151a9b45fa372847a1dac3a4931fadd3bcf35e5b059208f8"
      },
      "downloads": -1,
      "filename": "swissparlpy-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "71253a5abd900fe0a89735ac07ed47e1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 22851,
      "upload_time": "2022-01-31T16:16:50",
      "upload_time_iso_8601": "2022-01-31T16:16:50.805296Z",
      "url": "https://files.pythonhosted.org/packages/24/77/79032c15154e8d4305d1a7de081311bc614403d077ddc22ba174f2494c19/swissparlpy-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}