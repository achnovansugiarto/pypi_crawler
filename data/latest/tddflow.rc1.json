{
  "info": {
    "author": "",
    "author_email": "Stephan Lukits <stephan.lukits@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# tddflow\n\n[installation](#installation) | [usage](#usage)\n\nA finger exercise for Python.  Following:\n\n- beautiful is better then ugly (Tim Peters)\n- easy things should be easy, and hard things possible (Larry Wall)\n- The more often a message with the same content is received the less\n  information it contains (Claude Shannon)\n- Design for the common case\n- Don't Repeat Yourself\n- Keep It Simple Stupid\n\nthe basic example of python's unittest module...\n\n```py\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_upper(self):\n        self.assertEqual('foo'.upper(), 'FOO')\n\n    def test_isupper(self):\n        self.assertTrue('FOO'.isupper())\n        self.assertFalse('Foo'.isupper())\n\n    def test_split(self):\n        s = 'hello world'\n        self.assertEqual(s.split(), ['hello', 'world'])\n        # check that s.split fails when the separator is not a string\n        with self.assertRaises(TypeError):\n            s.split(2)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n... could become:\n\n```py\nfrom tddflow import run, T\n\nclass AString: \n\n    def can_be_capitalized(self, t: T):\n        t.equal('foo'.upper(), 'FOO')\n\n    def _a_helper_function(self):\n        pass\n\n    def can_determine_if_it_is_upper_case(self, t: T):\n        t.truthy('FOO'.isupper())\n        t.falsy('Foo'.isupper())\n\n    def can_be_split_into_a_list_of_strings_at_spaces(self, t: T):\n        s = 'hello world'\n        t.equal(s.split(), ['hello', 'world'])\n\n    def split_fails_if_a_given_separator_is_not_a_string(self, t: T):\n        t.raises(lambda: s.split(2), TypeError)\n\nif __name__ == '__main__':\n    run(AString)\n```\n\nNot repeating eight times the word 'test' or four times the word\n'assert'.  By factoring features for assertion and test control flow out\nfrom the test suite in its own type (inspired by the Go testing\nframework) cluttering of the test suite's namespace is avoided, no need\nfor inheritance, no need for uppercase methods, no need for \"marking\"\ntests; i.e. noise through repetition is down to a minimum while our IDE\nwill still offer us the T-API because of the type hinting.\n\nTo make this little exercise (more) useful I want to add also a tddflow\ncommand\n\n```\n    python -m tddflow\n```\n\nwhich should watch the modules of the package it was executed in\ntogether with its sub-packages for modifications on test or production\nmodules.  Is a test module modified it should be automatically executed\nand the result of the test run should be reported.  As well as all test\nmodules importing absolute a modified production module should be\nexecutes on its modification.  If all tests succeed we get the \"green\nbar\" if not we get the \"red bar\" and failed tests are reported.  It also\nshould report \"logging tests\", i.e. if a test is executed containing a\nline\n\n    t.log(type(interesting_value))\n\nit will report the test with the logged text which comes in handy in\nmy experience.\n\nKent Beck writes in \"Test-Driven Development By Example\": \"Driving a\ntesting tool using the testing tool itself to run the tests may seem a\nbit like performing brain surgery on yourself.\" Doesn't that sound like\nfun?  [Tag along](https://github.com/slukits/tddflow/blob/main/01_run.md)\nif you feel like it.\n\n\n## Installation\n\n\n    pip install tddflow\n\n\n\n## Usage\n\n    python -m tddflow\n\nstarts the package watcher\n\n    python -m tddflow help\n\ndocuments tddflow's command line arguments.  The typical usage of\ntddflow for testing:\n\n    from tddflow.testing import run, T\n\n    class TestedSubject:\n\n        def init(self, t: T):\n            \"\"\"setup fixtures which all tests have in common.\"\"\"\n            pass\n\n        def setup(self, t: T):\n            \"\"\"setup fixtures for each test individually.\"\"\"\n            pass\n\n        def tear_down(self, t: T):\n            \"\"\"clear resources obtained by setup.\"\"\"\n            pass\n\n        def has_tested_behavior(self, t: T):\n            \"\"\"\n            implement tests using t for test control flow and\n            assertions\n            \"\"\"\n            t.fatal_if_not(t.truthy(True))\n\n        def finalize(self, t: T):\n            \"\"\"clear resources obtained by init\"\"\"\n            pass\n\n    if __name__ == '__main__':\n        run(TestedSubject)\n\nSee also tddflow.testing.Config for how to configure a tests-suite run.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tddflow",
    "package_url": "https://pypi.org/project/tddflow/",
    "platform": null,
    "project_url": "https://pypi.org/project/tddflow/",
    "project_urls": {
      "Bug Tracker": "https://github.com/slukits/tddflow/issues",
      "Homepage": "https://github.com/slukits/tddflow"
    },
    "release_url": "https://pypi.org/project/tddflow/0.9.1/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "simple, lightweight python testing framework for a TDD workflow with automatic test execution",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16209267,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61f5d923fd0f5d53eb8f7726a77baee90704378d90cd17d01ad517ca13ba4540",
          "md5": "dbe3e1ff1ca71b56e1091fbf80ce2e4d",
          "sha256": "75b21db38c190154b846cabca122baf50f2f7ffc2686baa006077cbcdbed29dd"
        },
        "downloads": -1,
        "filename": "tddflow-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbe3e1ff1ca71b56e1091fbf80ce2e4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 38231,
        "upload_time": "2022-12-25T12:16:46",
        "upload_time_iso_8601": "2022-12-25T12:16:46.393807Z",
        "url": "https://files.pythonhosted.org/packages/61/f5/d923fd0f5d53eb8f7726a77baee90704378d90cd17d01ad517ca13ba4540/tddflow-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93f39d5568c870013b4d1645aedf962010a80a248dc53a78e5279b24835ceb8c",
          "md5": "e291208b8a848937a78c01138422a2fb",
          "sha256": "e74c39fee65aaa63b4a2087d8494596d5cb9ebc8c4f8a881662736b71508060f"
        },
        "downloads": -1,
        "filename": "tddflow-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e291208b8a848937a78c01138422a2fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 28395,
        "upload_time": "2022-12-25T12:16:48",
        "upload_time_iso_8601": "2022-12-25T12:16:48.459760Z",
        "url": "https://files.pythonhosted.org/packages/93/f3/9d5568c870013b4d1645aedf962010a80a248dc53a78e5279b24835ceb8c/tddflow-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61f5d923fd0f5d53eb8f7726a77baee90704378d90cd17d01ad517ca13ba4540",
        "md5": "dbe3e1ff1ca71b56e1091fbf80ce2e4d",
        "sha256": "75b21db38c190154b846cabca122baf50f2f7ffc2686baa006077cbcdbed29dd"
      },
      "downloads": -1,
      "filename": "tddflow-0.9.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dbe3e1ff1ca71b56e1091fbf80ce2e4d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 38231,
      "upload_time": "2022-12-25T12:16:46",
      "upload_time_iso_8601": "2022-12-25T12:16:46.393807Z",
      "url": "https://files.pythonhosted.org/packages/61/f5/d923fd0f5d53eb8f7726a77baee90704378d90cd17d01ad517ca13ba4540/tddflow-0.9.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93f39d5568c870013b4d1645aedf962010a80a248dc53a78e5279b24835ceb8c",
        "md5": "e291208b8a848937a78c01138422a2fb",
        "sha256": "e74c39fee65aaa63b4a2087d8494596d5cb9ebc8c4f8a881662736b71508060f"
      },
      "downloads": -1,
      "filename": "tddflow-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e291208b8a848937a78c01138422a2fb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 28395,
      "upload_time": "2022-12-25T12:16:48",
      "upload_time_iso_8601": "2022-12-25T12:16:48.459760Z",
      "url": "https://files.pythonhosted.org/packages/93/f3/9d5568c870013b4d1645aedf962010a80a248dc53a78e5279b24835ceb8c/tddflow-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}