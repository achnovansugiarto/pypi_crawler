{
  "info": {
    "author": "Umit Aksoylu",
    "author_email": "umit@aksoylu.space",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Welcome To GoldenFace\nAn Image Processing Library About Calculating Face Golden Ratio, Facial Cosine Similarity and More\n\nplease visit for manual => [Manual Page](http://goldenface.aksoylu.space)\n\nGithub => [Manual Page](http://github.com/Aksoylu/GoldenFace)\n\nÜmit Aksoylu 2021 © M.I.T  License\nPlease check example.py for practical usage.\n\n## Installing Library:\n```bash\npip install GoldenFace\n```\n\n#### Required Libraries (Dependencies)\nopencv-python\n\n## Core Functions\n\nReading a face image as goldenFace object:\n```python\numitFace = GoldenFace.goldenFace(\"umit.png\")\n```\n\nPrinting face vectors:\n```python\nprint(umitFace.face2Vec())\n```\n\nPrinting Geometric Facial Golden Ratio (Between 0-100):\n```python\nprint(umitFace.geometricRatio())\n```\n\nPrinting Facial Cosine Similarity With A Golden Face (Between 1.0-0):\n```python\nprint(umitFace.similarityRatio())\n```\n\nSaving a goldenFace objects vectors as json file:\n```python\numitFace.saveFaceVec(\"umitFaceVectors.json\")\n```\n\nReading a face as vectors from json file:\n```python\nloadedFace = functions.loadFaceVec(\"face.json\")\n```\nCalculating face similarity between two face:\n```python\nprint(umitFace.faceSimilarity(loadedFace))\n```\n\n## Get Info From GoldenFace Object\n\nGet all facial landmark points\n```python\nprint(umitFace.getLandmarks())\n```\n\nGet all facial important points\n```python\nprint(umitFace.getFacialPoints())\n```\n\nGet face borders\n\n```python\nprint(umitFace.getFaceBorder())\n```\n\n## Calculating Functions\n\nCalculate Trichion-Glabella-Subnazale-Menton Deflection on face\n```python\nprint(umitFace.calculateTGSM())\n```\n\nCalculate Column Parsed line Deflection on face\n```python\nprint(umitFace.calculateVFM())\n```\n\nCalculate Trichion-Zygoma-Menton Deflection\n```python\nprint(umitFace.calculateVFM())\n```\n\nCalculate Trichion-Subnazale-Menton Deflection\n```python\nprint(umitFace.calculateTSM())\n```\n\nCalculate Lateral cantus-Chelion Deflection\n```python\nprint(umitFace.calculateLC())\n```\n\n## Drawing Functions\nThese functions allow you to draw landmarks/ border lines on face\n\ncolor = (255,255,0)\n\nDraw a cover on face\n```python\numitFace.drawFaceCover(color)\n```\nDraw border lines on face\n```python\numitFace.drawLandmark(color)\n```\nDraw Trichion-Zygoma-Menton line on face\n```python\numitFace.drawTZM(color)\n```\nDraw Trichion-Glabella-Subnazale-Menton line on face\n```python\numitFace.drawTGSM(color)\n```\nDraw Column Parsed line on face\n```python\numitFace.drawVFM(color)\n```\nDraw Trichion-Subnazale-Menton line on face\n```python\numitFace.drawTSM(color)\n```\nDraw Lateral cantus-Chelion\n```python\numitFace.drawLC(color)\n```\nDraw facial golden ratio mask on face\n```python\numitFace.drawMask(color)\n```\nDraw facial important points on face\n```python\numitFace.drawFacialPoints(color)\n```\nDraw all landmark points on face\n```python\numitFace.drawLandmarks(color)\n```\n## Write processed goldenFace object as image:\n```python\numitFace.writeImage(\"umit_analyzed.jpeg\")\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Aksoylu/GoldenFace",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GoldenFace",
    "package_url": "https://pypi.org/project/GoldenFace/",
    "platform": "",
    "project_url": "https://pypi.org/project/GoldenFace/",
    "project_urls": {
      "Homepage": "https://github.com/Aksoylu/GoldenFace"
    },
    "release_url": "https://pypi.org/project/GoldenFace/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Facial Cosine Similarity,Face Golden Ratio Calculation And Facial Landmark Detecting/Drawing Library",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10372918,
  "releases": {
    "1.0": [],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b16ccab38583efddc51704954ecf84a30db567fa010e86212c554aa13453a8d7",
          "md5": "a459919825e7c0434d3f59c1a76e06b5",
          "sha256": "5be0fde476ab874fc4408a6d92f7a9aa0d0255379b09ecca236bbeef1c3d8c2a"
        },
        "downloads": -1,
        "filename": "GoldenFace-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a459919825e7c0434d3f59c1a76e06b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37717487,
        "upload_time": "2021-05-16T21:04:31",
        "upload_time_iso_8601": "2021-05-16T21:04:31.315992Z",
        "url": "https://files.pythonhosted.org/packages/b1/6c/cab38583efddc51704954ecf84a30db567fa010e86212c554aa13453a8d7/GoldenFace-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b16ccab38583efddc51704954ecf84a30db567fa010e86212c554aa13453a8d7",
        "md5": "a459919825e7c0434d3f59c1a76e06b5",
        "sha256": "5be0fde476ab874fc4408a6d92f7a9aa0d0255379b09ecca236bbeef1c3d8c2a"
      },
      "downloads": -1,
      "filename": "GoldenFace-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a459919825e7c0434d3f59c1a76e06b5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 37717487,
      "upload_time": "2021-05-16T21:04:31",
      "upload_time_iso_8601": "2021-05-16T21:04:31.315992Z",
      "url": "https://files.pythonhosted.org/packages/b1/6c/cab38583efddc51704954ecf84a30db567fa010e86212c554aa13453a8d7/GoldenFace-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}