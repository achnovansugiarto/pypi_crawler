{
  "info": {
    "author": "Xanadu",
    "author_email": "filippo@xanadu.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "![Logo](https://github.com/XanaduAI/MrMustard/blob/main/mm_white.png#gh-light-mode-only)\n![Logo](https://github.com/XanaduAI/MrMustard/blob/main/mm_dark.png#gh-dark-mode-only)\n\n[![Apache-2.0](https://img.shields.io/badge/License-Apache--2.0-blue)](https://opensource.org/licenses/Apache-2.0)\n[![Actions Status](https://github.com/XanaduAI/MrMustard/workflows/Tests/badge.svg)](https://github.com/XanaduAI/MrMustard/actions)\n[![Python version](https://img.shields.io/pypi/pyversions/mrmustard.svg?style=popout-square)](https://pypi.org/project/MrMustard/)\n\nMr Mustard is a differentiable simulator with a sophisticated built-in optimizer, that operates seamlessly across phase space and Fock space. It is built on top of an agnostic autodiff interface, to allow for plug-and-play backends (TensorFlow by default).\n\nMr Mustard supports:\n- Phase space representation of Gaussian states and Gaussian channels on an arbitrary number of modes\n- Exact Fock representation of any Gaussian circuit and any Gaussian state up to an arbitrary cutoff\n- Riemannian optimization on the symplectic group (for Gaussian transformations) and on the unitary group (for interferometers)\n- Adam optimizer for euclidean parameters\n- single-mode gates (parallelizable):\n    - squeezing, displacement, phase rotation, attenuator, amplifier, additive noise, phase noise\n- two-mode gates:\n    - beam splitter, Mach-Zehnder interferometer, two-mode squeezing, CX, CZ, CPHASE\n- N-mode gates (with dedicated Riemannian optimization):\n    - Interferometer (unitary), RealInterferometer (orthogonal), Gaussian transformation (symplectic)\n- single-mode states (parallelizable):\n    - Vacuum, Coherent, SqueezedVacuum, Thermal, Fock\n- two-mode states:\n    - TMSV (two-mode squeezed vacuum)\n- N-mode states:\n    - Gaussian\n- Photon number moments and entropic measures\n- PNR detectors and Threshold detectors with trainable quantum efficiency and dark counts\n- Homodyne, Heterodyne and Generaldyne measurements\n- Composable circuits\n- Plug-and-play backends (TensorFlow as default)\n- An abstraction layer `XPTensor` for seamless symplectic algebra (experimental)\n\n# The lab module\nThe lab module contains things you'd find in a lab: states, transformations, measurements, circuits. States can be used at the beginning of a circuit as well as at the end, in which case a state is interpreted as a measurement (a projection onto that state). Transformations are usually parametrized and map states to states. The action on states is differentiable with respect to the state and to the gate parameters.\n\n\n## 1. States and Gates\nHere are a few examples of states and gates:\n```python\nimport numpy as np\nfrom mrmustard.lab import *\n\nvac = Vacuum(num_modes=2)        # 2-mode vacuum state\ncoh = Coherent(x=0.1, y=-0.4)    # coh state |alpha> with alpha = 0.1 - 0.4j\nsq  = SqueezedVacuum(r=0.5)      # squeezed vacuum state\ng   = Gaussian(num_modes=2)      # 2-mode Gaussian state with zero means\nfock4 = Fock(4)                  # fock state |4>\n\nD  = Dgate(x=1.0, y=-0.4)         # Displacement by 1.0 along x and -0.4 along y\nS  = Sgate(r=0.5)                 # Squeezer with r=0.5\nR  = Rgate(phi=0.3)               # Phase rotation by 0.3\nA  = Amplifier(gain=2.0)          # noisy amplifier with 200% gain\nL  = Attenuator(0.5)              # pure loss channel with 50% transmissivity\nN  = AdditiveNoise(noise=0.1)     # additive noise with noise level 0.1\n\nBS = BSgate(theta=np.pi/4)          # 50/50 beam splitter\nS2 = S2gate(r=0.5)                  # two-mode squeezer\nMZ = MZgate(phi_a=0.3, phi_b=0.1)   # Mach-Zehnder interferometer\nI  = Interferometer(8)              # 8-mode interferometer\nL  = Attenuator(0.5)                # pure lossy channel with 50% transmissivity\nA  = Amplifier(gain=2.0, nbar=1.0)  # noisy amplifier with 200% gain\n```\n\nThe `repr` of single-mode states shows the Wigner function:\n<img width=\"571\" alt=\"Screen Shot 2021-12-06 at 1 31 17 PM\" src=\"https://user-images.githubusercontent.com/8944955/144902008-8d26d59c-8600-4391-9144-ffcc1b2215c2.png\">\n\n```python\ncat_amps = Coherent(2.0).ket([20]) + Coherent(-2.0).ket([20])\ncat_amps = cat_amps / np.linalg.norm(cat_amps)\ncat = State(ket=cat_amps)\ncat\n```\n<img width=\"538\" alt=\"Screen Shot 2021-12-06 at 8 27 06 PM\" src=\"https://user-images.githubusercontent.com/8944955/144949009-ebf7bbf8-9240-406c-ab99-bf8c36acd3f7.png\">\n\nStates (even those in Fock representation) are always compatible with gates:\n```python\ncat >> Sgate(0.5)  # squeezed cat\n```\n<img width=\"479\" alt=\"Screen Shot 2021-12-07 at 2 03 14 PM\" src=\"https://user-images.githubusercontent.com/8944955/145090219-298ca2ab-92e9-4ac2-beab-33ee33770fb2.png\">\n\n\n\n\n## 2. Gates and the right shift operator `>>`\n\nApplying gates to states looks natural, thanks to python's right-shift operator `>>`:\n```python\ndisplaced_squeezed = Vacuum(1) >> Sgate(r=0.5) >> Dgate(x=1.0)\n```\n\nIf you want to apply a gate to specific modes, use the `getitem` format. Here are a few examples:\n```python\nD = Dgate(y=-0.4)\nS = Sgate(r=0.1, phi=0.5)\nstate = Vacuum(2) >> D[1] >> S[0]  # displacement on mode 1 and squeezing on mode 0\n\nBS = BSgate(theta=1.1)\nstate = Vacuum(3) >> BS[0,2]  # applying a beamsplitter to modes 0 and 2\nstate = Vacuum(4) >> S[0,1,2]  # applying the same Sgate in parallel to modes 0, 1 and 2 but not to mode 3\n```\n\n## 3. Circuit\nWhen chaining just gates with the right-shift `>>` operator, we create a circuit:\n```python\nX8 = Sgate(r=[1.0] * 4) >> Interferometer(4)\noutput = Vacuum(4) >> X8\n\n# lossy X8\nnoise = lambda: np.random.uniform(size=4)\nX8_noisy = (Sgate(r=0.9 + 0.1*noise(), phi=0.1*noise())\n                >> Attenuator(0.89 + 0.01*noise())\n                >> Interferometer(4)\n                >> Attenuator(0.95 + 0.01*noise())\n               )\n\n# 2-mode Bloch Messiah decomposition\nbloch_messiah = Sgate(r=[0.1,0.2]) >> BSgate(theta=-0.1, phi=2.1) >> Dgate(x=[0.1, -0.4])\nmy_state = Vacuum(2) >> bloch_messiah\n```\n\n## 4. Measurements\nIn order to perform a measurement, we use the left-shift operator, e.g. `coh << sq` (think of the left-shift on a state as \"closing\" the circuit).\n```python\nleftover = Vacuum(4) >> X8 << SqueezedVacuum(r=10.0, phi=np.pi)[2]  # a homodyne measurement of p=0.0 on mode 2\n```\n\nTransformations can also be applied in the dual sense by using the left-shift operator `<<`:\n```python\nAttenuator(0.5) << Coherent(0.1, 0.2) == Coherent(0.1, 0.2) >> Amplifier(2.0)\n```\nThis has the advantage of modelling lossy detectors without applying the loss channel to the state going into the detector, which can be overall faster e.g. if the state is kept pure by doing so.\n\n## 5. Detectors\nThere are two types of detectors in Mr Mustard. Fock detectors (PNRDetector and ThresholdDetector) and Gaussian detectors (Homodyne, Heterodyne, Generaldyne).\n\nThe PNR and Threshold detectors return an array of unnormalized measurement results, meaning that the elements of the array are the density matrices of the leftover systems, conditioned on the outcomes:\n```python\nresults = Gaussian(2) << PNRDetector(efficiency = 0.9, modes = [0])\nresults[0]  # unnormalized dm of mode 1 conditioned on measuring 0 in mode 0\nresults[1]  # unnormalized dm of mode 1 conditioned on measuring 1 in mode 0\nresults[2]  # unnormalized dm of mode 1 conditioned on measuring 2 in mode 0\n# etc...\n```\nThe trace of the leftover density matrices will yield the success probability. If multiple modes are measured then there is a corresponding number of indices:\n```python\nresults = Gaussian(3) << PNRDetector(efficiency = [0.9, 0.8], modes = [0,1])\nresults[2,3]  # unnormalized dm of mode 2 conditioned on measuring 2 in mode 0 and 3 in mode 1\n# etc...\n```\nSet a lower `settings.PNR_INTERNAL_CUTOFF` (default 50) to speed-up computations of the PNR output.\n\n## 6. Comparison operator `==`\nStates support the comparison operator:\n```python\n>>> bunched = (Coherent(1.0) & Coherent(1.0)) >> BSgate(np.pi/4)\n>>> bunched.get_modes(1) == Coherent(np.sqrt(2.0))\nTrue\n```\nAs well as transformations (gates and circuits):\n```python\n>>> Dgate(np.sqrt(2)) >> Attenuator(0.5) == Attenuator(0.5) >> Dgate(1.0)\nTrue\n```\n\n## 7. State operations and properties\nStates can be joined using the `&` (and) operator:\n```python\nCoherent(x=1.0, y=1.0) & Coherent(x=2.0, y=2.0)  # A separable two-mode coherent state\n\ns = SqueezedVacuum(r=1.0)\ns4 = s & s & s & s   # four squeezed states\n```\n\nSubsystems can be accessed via `get_modes`:\n```python\njoint = Coherent(x=1.0, y=1.0) & Coherent(x=2.0, y=2.0)\njoint.get_modes(0)  # first mode\njoint.get_modes(1)  # second mode\n\nswapped = joint.get_modes([1,0])\n```\n\n## 8. Fock representation\nThe Fock representation of a State is obtained via `.ket(cutoffs)` or `.dm(cutoffs)`. For circuits and gates (transformations in general) it's `.U(cutoffs)` or `.choi(cutoffs)`, if available. The Fock representation is exact and it doesn't break differentiability. This means that one can define cost functions on the Fock representation and backpropagate back to the phase space representation.\n\n```python\n# Fock representation of a coherent state\nCoherent(0.5).ket(cutoffs=[5])   # ket\nCoherent(0.5).dm(cutoffs=[5])    # density matrix\n\nDgate(x=1.0).U(cutoffs=[15])  # truncated unitary matrix\nDgate(x=1.0).choi(cutoffs=[15])  # truncated choi tensor\n```\n\nStates can be initialized in Fock representation and used as any other state:\n```python\nmy_amplitudes = np.array([0.5, 0.25, -0.5, 0.25, 0.25, 0.5, -0.25] + [0.0]*23)  # notice the buffer\nmy_state = State(ket=my_amplitudes)\nmy_state >> Sgate(r=0.5)  # just works\n```\n<img width=\"542\" alt=\"Screen Shot 2021-12-06 at 1 44 38 PM\" src=\"https://user-images.githubusercontent.com/8944955/144903799-5b6c1524-4357-4be0-9778-e1f0de6943c1.png\">\n\nAlternatively,\n```python\nmy_amplitudes = np.array([0.5, 0.25, -0.5, 0.25, 0.25, 0.5, -0.25])  # no buffer\nmy_state = State(ket=my_amplitudes)\nmy_state._cutoffs = [42]  # force the cutoff\nmy_state >> Sgate(r=0.5)  # works too\n```\n\n# The physics module\nThe physics module contains a growing number of functions that we can apply to states directly. These are made out of the functions that operate on the _representation_ of the state:\n\n- If the state is in Gaussian representation, then internally the physics functions utilize the [physics.gaussian](https://github.com/XanaduAI/MrMustard/blob/main/mrmustard/physics/gaussian.py) module.\n- If the state is in Fock representation, then internally the physics functions utilize the [physics.fock](https://github.com/XanaduAI/MrMustard/blob/main/mrmustard/physics/fock.py) module.\n\n\n# The math module\nThe math module is the backbone of Mr Mustard, which consists in the [`Math`](https://github.com/XanaduAI/MrMustard/blob/main/mrmustard/math/math_interface.py) interface. Mr Mustard comes with a plug-and-play backends through a math interface. You can use it as a drop-in replacement for tensorflow or pytorch and your code will be plug-and-play too!\n```python\nfrom mrmustard import settings\nfrom mrmustard.math import Math\nmath = Math()\n\nmath.cos(0.1)  # tensorflow\n\nsettings.BACKEND = 'torch'\n\nmath.cos(0.1)  # pytorch (upcoming)\n```\n\n### Optimization\nThe `Optimizer` (available in `mrmustard.training` uses Adam underneath the hood for Euclidean parameters and a custom symplectic optimizer for Gaussian gates and states and a unitary/orthogonal optimizer for interferometers.\n\nWe can turn any simulation in Mr Mustard into an optimization by marking which parameters we wish to be trainable. Let's take a simple example: synthesizing a displaced squeezed state.\n\n```python\nfrom mrmustard.lab import Dgate, Ggate, Attenuator, Vacuum, Coherent, DisplacedSqueezed\nfrom mrmustard.physics import fidelity\nfrom mrmustard.training import Optimizer\n\nD = Dgate(x = 0.1, y = -0.5, x_trainable=True, y_trainable=True)\nL = Attenuator(transmissivity=0.5)\n\n# we write a function that takes no arguments and returns the cost\ndef cost_fn_eucl():\n    state_out = Vacuum(1) >> D >> L\n    return 1 - fidelity(state_out, Coherent(0.1, 0.5))\n\nG = Ggate(num_modes=1, symplectic_trainable=True)\ndef cost_fn_sympl():\n    state_out = Vacuum(1) >> G >> D >> L\n    return 1 - fidelity(state_out, DisplacedSqueezed(r=0.3, phi=1.1, x=0.4, y=-0.2))\n\n# For illustration, here the Euclidean optimization doesn't include squeezing \nopt = Optimizer(symplectic_lr=0.1, euclidean_lr=0.01)\nopt.minimize(cost_fn_eucl, by_optimizing=[D])  # using Adam for D\n\n# But the symplectic optimization always does\nopt = Optimizer(symplectic_lr=0.1, euclidean_lr=0.01)\nopt.minimize(cost_fn_sympl, by_optimizing=[G,D])  # uses Adam for D and the symplectic opt for G\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/XanaduAI/mrmustard",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mrmustard",
    "package_url": "https://pypi.org/project/mrmustard/",
    "platform": null,
    "project_url": "https://pypi.org/project/mrmustard/",
    "project_urls": {
      "Homepage": "https://github.com/XanaduAI/mrmustard"
    },
    "release_url": "https://pypi.org/project/mrmustard/0.4.1/",
    "requires_dist": [
      "numpy",
      "scipy",
      "numba",
      "thewalrus (>=0.17.0)",
      "tensorflow-macos (<=2.10.0)",
      "tensorflow-probability (<=0.18.0)",
      "rich",
      "tqdm",
      "matplotlib",
      "ray[tune] ; extra == 'ray'",
      "scikit-optimize ; extra == 'ray'"
    ],
    "requires_python": "",
    "summary": "Differentiable quantum Gaussian circuits",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17420363,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b25a2cbd6c8ca5236f6cb95321c9c8c1c9bf94b1f6bd6745e2125de179eb2db7",
          "md5": "f821d4c30643df41be5d6da9f86c2751",
          "sha256": "2ee04c203adc93110914d4038ad55d060e5a53e726ac22c2f7a9b651904c19b2"
        },
        "downloads": -1,
        "filename": "mrmustard-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f821d4c30643df41be5d6da9f86c2751",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 84711,
        "upload_time": "2021-12-08T17:30:06",
        "upload_time_iso_8601": "2021-12-08T17:30:06.463040Z",
        "url": "https://files.pythonhosted.org/packages/b2/5a/2cbd6c8ca5236f6cb95321c9c8c1c9bf94b1f6bd6745e2125de179eb2db7/mrmustard-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3383a145f3685f954f9f8097c6a3dff30f5a95133de071c6604bd7fd988d475c",
          "md5": "418cb35fb0e9690325def1b46df3c95c",
          "sha256": "085ec5fefd025ad2451686b856d7d59f3edb3303bc18bbc329c35adf5a6f4944"
        },
        "downloads": -1,
        "filename": "mrmustard-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "418cb35fb0e9690325def1b46df3c95c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69641,
        "upload_time": "2021-12-08T17:30:08",
        "upload_time_iso_8601": "2021-12-08T17:30:08.037986Z",
        "url": "https://files.pythonhosted.org/packages/33/83/a145f3685f954f9f8097c6a3dff30f5a95133de071c6604bd7fd988d475c/mrmustard-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6444211d8adf8ee32dda2822548b7e7d21142d8ef0c28785df8304af339e7ac",
          "md5": "a615ac0a024b280186e25f5b2fc0d94a",
          "sha256": "6183f7cd3e473443f89d136b23e4c6e527c3d1ab3201f235930dc84a86f9d191"
        },
        "downloads": -1,
        "filename": "mrmustard-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a615ac0a024b280186e25f5b2fc0d94a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 85318,
        "upload_time": "2021-12-16T23:21:15",
        "upload_time_iso_8601": "2021-12-16T23:21:15.913990Z",
        "url": "https://files.pythonhosted.org/packages/f6/44/4211d8adf8ee32dda2822548b7e7d21142d8ef0c28785df8304af339e7ac/mrmustard-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1048d9682594b84c5d9ca7c96f01300f48ebf6d2f44504eb688fdef620bfda8",
          "md5": "330645eb16cac8b3d761e520851cb6e1",
          "sha256": "6df1e65e8a79d031ab364ca61d9603b7772b2d9cf6991937b725f5bc27580696"
        },
        "downloads": -1,
        "filename": "mrmustard-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "330645eb16cac8b3d761e520851cb6e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70267,
        "upload_time": "2021-12-16T23:21:17",
        "upload_time_iso_8601": "2021-12-16T23:21:17.763439Z",
        "url": "https://files.pythonhosted.org/packages/f1/04/8d9682594b84c5d9ca7c96f01300f48ebf6d2f44504eb688fdef620bfda8/mrmustard-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e128d136483bc369faae1a5ca5fcd36cdfc3d9d0bb98d6ec4c419364750b077",
          "md5": "e24892b5a3f382e0180642af68b6a2e4",
          "sha256": "97b3aaaab89f3f08a1c948454cf8887341fb0acbfbc9c095c2bdeeba42f65e85"
        },
        "downloads": -1,
        "filename": "mrmustard-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e24892b5a3f382e0180642af68b6a2e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 92789,
        "upload_time": "2022-03-24T19:28:06",
        "upload_time_iso_8601": "2022-03-24T19:28:06.966071Z",
        "url": "https://files.pythonhosted.org/packages/9e/12/8d136483bc369faae1a5ca5fcd36cdfc3d9d0bb98d6ec4c419364750b077/mrmustard-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "924f7e0a82f77d6bee9933de595ea165dfa6471afbac1f053584afaa4ccc80c5",
          "md5": "4de2367db1e0ae2f45015f3a231f9311",
          "sha256": "6959fadfb058ee90c92840196960904305bbf20ac53260d2a2337328d41c6d76"
        },
        "downloads": -1,
        "filename": "mrmustard-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4de2367db1e0ae2f45015f3a231f9311",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 76267,
        "upload_time": "2022-03-24T19:28:09",
        "upload_time_iso_8601": "2022-03-24T19:28:09.623502Z",
        "url": "https://files.pythonhosted.org/packages/92/4f/7e0a82f77d6bee9933de595ea165dfa6471afbac1f053584afaa4ccc80c5/mrmustard-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad90e9b7463ccadce8dc5f352843d1654f948d3318a27e203627d5d67529d2d9",
          "md5": "d3148a24375fdf2414d105e3f2020bde",
          "sha256": "521be77f2c8c0dadb52179536f07ac325ca962afbac1ec5c794b626ef0e329a9"
        },
        "downloads": -1,
        "filename": "mrmustard-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3148a24375fdf2414d105e3f2020bde",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 99474,
        "upload_time": "2022-09-16T17:18:26",
        "upload_time_iso_8601": "2022-09-16T17:18:26.262368Z",
        "url": "https://files.pythonhosted.org/packages/ad/90/e9b7463ccadce8dc5f352843d1654f948d3318a27e203627d5d67529d2d9/mrmustard-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28ce427aca466b52b4be6e43a305b3661c215b145ca3f2795b7fd9526771c7aa",
          "md5": "840f4fe1c408b2f19ab96274d8ec7708",
          "sha256": "144fb19b385e4ada6c8859ffe7d31ff58053195de9b5b2fae09df509a89a600e"
        },
        "downloads": -1,
        "filename": "mrmustard-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "840f4fe1c408b2f19ab96274d8ec7708",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 81556,
        "upload_time": "2022-09-16T17:18:29",
        "upload_time_iso_8601": "2022-09-16T17:18:29.062467Z",
        "url": "https://files.pythonhosted.org/packages/28/ce/427aca466b52b4be6e43a305b3661c215b145ca3f2795b7fd9526771c7aa/mrmustard-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff88363afe0dae96416228a9112b6f0fcd4cb6b139dea64bf8e305662b4f344d",
          "md5": "cc60a0f2861d5f6eec32e78cf38efc63",
          "sha256": "3f7fdf2b48c94ae2c2de8b2619c54eaa7825abe1d6b781467c755314bface10d"
        },
        "downloads": -1,
        "filename": "mrmustard-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc60a0f2861d5f6eec32e78cf38efc63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 126656,
        "upload_time": "2023-03-08T18:57:29",
        "upload_time_iso_8601": "2023-03-08T18:57:29.689819Z",
        "url": "https://files.pythonhosted.org/packages/ff/88/363afe0dae96416228a9112b6f0fcd4cb6b139dea64bf8e305662b4f344d/mrmustard-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "362079ac8082ff5f9a543175c9767203f7bccef3a6e13b3778542658ff8e8c8f",
          "md5": "b1ab1c5281690ce29d6a5504fe831311",
          "sha256": "17f74f8f505bb3511405d93d6a1c0ebbdce30658900c87e0bed484505bf6333f"
        },
        "downloads": -1,
        "filename": "mrmustard-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1ab1c5281690ce29d6a5504fe831311",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 140775,
        "upload_time": "2023-03-23T18:57:03",
        "upload_time_iso_8601": "2023-03-23T18:57:03.595020Z",
        "url": "https://files.pythonhosted.org/packages/36/20/79ac8082ff5f9a543175c9767203f7bccef3a6e13b3778542658ff8e8c8f/mrmustard-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "362079ac8082ff5f9a543175c9767203f7bccef3a6e13b3778542658ff8e8c8f",
        "md5": "b1ab1c5281690ce29d6a5504fe831311",
        "sha256": "17f74f8f505bb3511405d93d6a1c0ebbdce30658900c87e0bed484505bf6333f"
      },
      "downloads": -1,
      "filename": "mrmustard-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b1ab1c5281690ce29d6a5504fe831311",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 140775,
      "upload_time": "2023-03-23T18:57:03",
      "upload_time_iso_8601": "2023-03-23T18:57:03.595020Z",
      "url": "https://files.pythonhosted.org/packages/36/20/79ac8082ff5f9a543175c9767203f7bccef3a6e13b3778542658ff8e8c8f/mrmustard-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}