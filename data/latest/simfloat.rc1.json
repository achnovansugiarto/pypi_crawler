{
  "info": {
    "author": "Rob Clewley",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Education",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# ieee754_simulation\n\nA Python module to simulate binary floating point representations and arithmetic to IEEE 754 standards of arbitrary fixed precision, or to infinite precision, and different rounding modes.\nYou may find it is easier to learn about machine epsilon, denormalized numbers, representation and rounding error using low-bit formats compared to the standard single or double precision.\n\nThe design is loosely based on the Decimal module. This code was written in 2008 when I was teaching a numerical analysis class.\n\n## Features\n * Primarily intended for teaching purposes, e.g. in a numerical analysis course. It demonstrates representation formats and facilitates exploration of the distribution of represented values along the real number line.\n * It's not intended to be an efficient implementation for computation. It focuses on transparency to aid learning.\n * It can represent any (sign, characteristic, significand) IEEE 754-style format, and is not restricted to representations with total precision less than 64 bits. The internal representations and arithmetic are done using arbitrary precision and do not depend on the python 'float' (64 bit) class.\n * Available rounding modes are 'up', 'down', 'floor', 'ceiling', 'half_up', and 'half_down'.\n * Arithmetic operations are only permitted between numbers represented in exactly the same format.\n * A binary integer class is also implemented with its associated integer arithmetic and shift operations (no logical operations).\n * max, min, sqrt, power functions are defined for the appropriate numeric classes.\n\nSee the following for details, and references therein:\n - http://en.wikipedia.org/wiki/Floating_point\n - http://en.wikipedia.org/wiki/Rounding\n - http://en.wikipedia.org/wiki/IEEE_754\n - http://en.wikipedia.org/wiki/Binary_numeral_system\n\n## Known issues\n\n * Binary floating point arithmetic not simulated in its native form, but through\n  internal use of arbitrary precision Decimal floating point numbers. It would\n  be preferable to have a pure binary arithmetic implementation that\n  demonstrates shifting of exponents, etc. before addition.\n * Does not directly simulate the algorithmic implementations by which\n  IEEE 754 arithmetic and rounding is performed in CPUs. e.g. rounding up\n  is *not* achieved by adding 0.5 and then truncating in this code.\n * Creation of higher precision floats is slow due to python implementation of\n  frexp function.\n * Boolean operations on binary floating point numbers are not supported at this\n  time.\n * `ContextClass` does not support initialization from numpy float128 values. Needs\n  additional code to extract byte-by-byte hex representation from the 'data'\n  attribute of such a value, and conversion into equivalent binary string.\n * `eval(repr(x))`, when `x` is a `ContextClass` instance, creates a Binary object with\n  the same representation (fixed precision, rounding) as x, not another\n  ContextClass instance. However, `x == eval(repr(x))`.\n* decimal context precision value must not be changed by the user to be less\n  than the precision required by any ContextClass instances (Binary numbers of a\n  fixed precision), otherwise arithmetic on those numbers may be inaccurate.\n  In Python 2.5 and above, local context could be established for these\n  calculations using the with statement (see here for implementation details:\n  http://docs.python.org/lib/decimal-decimal.html). See binary_py25.py.\n* mod, floordiv, divmod methods are not supported.\n* Can be slow to evaluate expressions involving high precision values.\n* Can hash a binary context (ContextClass instance), but cannot hash\n  a decimal.context instance.\n* Requires numpy to be installed, in order to use numpy.sign, numpy.zeros\n  and provide compatibility with numpy.float32, numpy.float64, and\n  numpy.float128 values. The sign function and array use provide better speed\n  in key parts of the algorithms, but could be easily replaced to make\n  numpy installation optional.\n* Does not support use of minifloats (IEEE-754 style formats with very low\n  bit lengths for the exponent and characteristic) for integer-only\n  representations. (This is a common application of such values, according to\n  http://en.wikipedia.org/wiki/Minifloat.)\n* Historical: `float(Decimal(\"Inf\"))` will not work in Python 2.5 due to a\n  problem in Python itself. This has been fixed in Python 2.6 and above\n  (http://bugs.python.org/issue3188).\n\n## Usage\n\n### Constructors\n\n```\n>>> context = define_context(5, 12, ROUND_DOWN)\n```\n\nEquivalent binary float values in a given context:\n\n```\n>>> x = Binary('-0.1111', context)          # binary fraction assumed by default\n>>> x = Binary(Decimal(\"-0.9375\"), context) # decimal fraction\n```\n\nThe following represent the same binary number (in context) but are a way\nto directly specify the representation in terms of the underlying context\n\n```\n>>> a = context('1 01110 111000000000')   # (sign, characteristic, significand)\n>>> a = context('101110111000000000')     # (sign, characteristic, significand)\n```\n\nThese alternative forms are also valid, for convenience:\n\n```\n>>> a = context(Decimal(\"-0.9375\"))\n>>> a = context(Binary('-0.1111'))\n```\n\nIf the python float literal `-0.9375` is exactly representable in the context,\nthen this is also equivalent:\n\n```\n>>> a = context(-0.9375)\n>>> a = context(numpy.float64(-0.9375))\n```\n\nOtherwise, the resulting representation in a will be to the \"nearest\"\nrepresentable value under the rules of the context's precision and rounding\nmode.\nThe values in a are instances of the context, and are not Binary class\ninstances.\nNote that a context instance cannot be initialized directly using a string\nliteral for a binary fraction, to avoid ambiguity with the primary use\ncase, namely with input strings for (sign, characteristic, significand).\nThe Binary constructor can also represent _arbitrary_ precision binary values in\nthe absence of a given context. After any of the above definitions of `x`:\n\n```\n>>> x.context\n<class 'binary.Float_5_12_D'>\n```\n\nHowever:\n\n```\n>>> y = Binary('0.110100101010101011110001111100001e5')\n>>> y.context is None\nTrue\n```\n\nNote that infinite binary precision is not possible to specify from a\nDecimal object, in case the binary representation is non-terminating.\n\n```\n>>> b = Binary(Decimal(\"0.1\"))\nValueError: Cannot create arbitrary precision binary value without a\n   representation context\n```\n\n### Views\n\nFor a context instance `x` (not a Binary instance), we slightly break the\ntradition that `eval(repr(x))` is identically the same type as `x`. However,\n`eval(repr(x)) == x` and the evaluation leads to a Binary object with the same\ncontext.\n\n```\n>>> x = context(Decimal(\"-0.9375\"))\n>>> x                 # default 'view' is as binary\nBinary(\"-0.1111E0\", (5, 12, ROUND_DOWN))\n>>> bx = eval(repr(x))\n>>> bx == x\nTrue\n>>> bx.context\n<class 'binary.Float_5_12_D'>\n>>> bx.context == x.context   # bx really quacks like a duck\nTrue\n>>> x.as_binary()     # output always in scientific notation with 0 before radix\nBinary(\"-0.1111E0\")\n>>> x.as_binary() == bx  # x.as_binary() keeps the same context\nTrue\n>>> x.as_decimal()\nDecimal(\"-0.9375\")\n>>> print(x)\n1 01110 111000000000\n```\n\n### Comparisons\n\nYou can only compare like representations from the same context.\n\n```\n>>> d = double(1)\n>>> q = quadruple(1)\n>>> d == q\nValueError: Mismatched precision\n```\n\nIf you want to compare the actual values that these objects represent, convert\nthem to a Binary number first\n\n```\n>>> bd = Binary(double(1))\n>>> bq = Binary(quadruple(1))\n>>> bd == bq\nTrue\n>>> bd == 1.0   # cannot compare with python-native floats\nTypeError: Invalid object for comparison\n>>> bd > 1\nFalse\n>>> bd == Decimal(\"1\")\nTrue\n```\n\n### Conversions\n\nFor high precision floats with long mantissas, convert them accurately to\nDecimal type. Note that `Decimal(str(f))` will not be accurate for floats `f`\nwith mantissas longer than the displayable length of `f` by the `str` function.\nThus `float(Decimal(str(f))) != f` for some `f`. To avoid this, create the\nrepresentation of the float in the appropriate context by\n`double(f)`\nwhich will be a precise representation of `f` in double precision, where `f`\ncan be a python float, numpy.float64. For numpy.float32 use `single(f)`.\nBinary values in one context can be converted (coerced) to another by:\n\n```\n>>> xs = Binary('-1111.001', single)\n>>> xd = Binary(xs, double)\n```\n\nor\n\n```\n>>> xd = Binary(double(xs))\n```\n\n### Arithmetic\n\nCan only perform arithmetic on representations from a given context with\nother instances of the same context (including Binary instances with\nidentical context).\n\nTo perform arbitray precision arithmetic with mixed representations,\nfirst convert to Binary type, which does not care about the precision of\nthe operands: the operation returns a new Binary value of the precise\nresult, without context if neither operand had context, otherwise with\nthe highest precision context. In a tie, arithmetic is not possible unless\nthe rounding is the same.\n\n```\n>>> bd = Binary(double(1.5))\n>>> bq = Binary(quadruple(0.1))\n>>> c = bd + bq\n>>> print(c)\n0.11001100110011001100110011001100110011001100110011001101E1\n>>> c.__class__\n<class 'binary.Binary'>\n>>> c.context   # coerced to the higher precision\n<class 'binary.Float_15_112_HU'>\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/robclewley/ieee754_simulation",
    "keywords": "",
    "license": "BSD 2-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Simfloat",
    "package_url": "https://pypi.org/project/Simfloat/",
    "platform": "",
    "project_url": "https://pypi.org/project/Simfloat/",
    "project_urls": {
      "Homepage": "https://github.com/robclewley/ieee754_simulation"
    },
    "release_url": "https://pypi.org/project/Simfloat/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simulate binary floating point representations and arithmetic to IEEE 754 standards of arbitrary fixed precision, or to infinite precision, and different rounding modes",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8040862,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "133d65fb16b5ec448d0cdac56f86f4a20ec5fad87774a6a5a7aa8abf29a8b600",
          "md5": "5d9e80810aa24138344385189ec45e9c",
          "sha256": "f9c12d1367cd2aec07fa8198cd761f53586d27757daa7ab7d6000d689d9a0d8c"
        },
        "downloads": -1,
        "filename": "Simfloat-0.2-py3.7.egg",
        "has_sig": false,
        "md5_digest": "5d9e80810aa24138344385189ec45e9c",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": null,
        "size": 59757,
        "upload_time": "2020-08-26T05:43:12",
        "upload_time_iso_8601": "2020-08-26T05:43:12.177893Z",
        "url": "https://files.pythonhosted.org/packages/13/3d/65fb16b5ec448d0cdac56f86f4a20ec5fad87774a6a5a7aa8abf29a8b600/Simfloat-0.2-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "133d65fb16b5ec448d0cdac56f86f4a20ec5fad87774a6a5a7aa8abf29a8b600",
        "md5": "5d9e80810aa24138344385189ec45e9c",
        "sha256": "f9c12d1367cd2aec07fa8198cd761f53586d27757daa7ab7d6000d689d9a0d8c"
      },
      "downloads": -1,
      "filename": "Simfloat-0.2-py3.7.egg",
      "has_sig": false,
      "md5_digest": "5d9e80810aa24138344385189ec45e9c",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": null,
      "size": 59757,
      "upload_time": "2020-08-26T05:43:12",
      "upload_time_iso_8601": "2020-08-26T05:43:12.177893Z",
      "url": "https://files.pythonhosted.org/packages/13/3d/65fb16b5ec448d0cdac56f86f4a20ec5fad87774a6a5a7aa8abf29a8b600/Simfloat-0.2-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}