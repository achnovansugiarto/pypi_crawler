{
  "info": {
    "author": "Gabriel Felix de Souza Lopes <gafelix435@gmail.com>, Alejandro Tarafa Guzm√°n <alejandro.guzman@looplex.com.br>",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# EasyPype - Create flexible, extensible, potent pipelines\r\nEasyPype offers you a simple way to orchestrate a set of operations in a specific order.\r\n\r\n\r\n## Table of contents\r\n* [Overview](#overview)\r\n* [Why](#why)\r\n* [How](#how)\r\n* [Quickstart](#quickstart)\r\n* [Modules](#modules)\r\n\r\n\r\n## Overview\r\nEasyPype will offer you:\r\n\r\n  - Easy and flexible way to define a set of operations and the correct order to execute them.\r\n  - Multiprocessing execution of your operations.\r\n  - Extensible code, so you can add new features easily.\r\n\r\n## Why\r\nSometimes, you want to orchestrate complex operations, performed by different entities, in a specific order. For instance, take a look at a data pipeline. It's basically a set of nodes doing operations, following the defined flux. Although the data pipeline is a good example, there are many others.\r\n\r\nTherefore, the orchestration problem exists in different contexts. So, It would be nice to have some anticipated solution, because the problem repeats itself. That's easypype.\r\n\r\n## How\r\nIn order to orchestrate complex operations, this solution considers two main entities: Commands and Pipe. A Command is the operation you want to perform and the Pipe is the orchestrator. Hence, the Pipe entity contains a list of Commands to be executed.\r\n\r\nAlso, all Commands must be able to know the state of the execution. Then, the Sink entity was created and It holds the state over all executions, until the Pipe ends It's job.\r\n\r\nIn an effort to implement these ideias, two design patterns were used: Command and Builder. The first one allows the Pipe to orchestrate things and the second will help specifying which operations (and what order) to execute.\r\n\r\n## Quickstart\r\nFirst, you must install EasyPype:\r\n```\r\npip install easypype\r\n```\r\n\r\nThen, create a new python file and import it:\r\n```\r\nimport easypype as ep\r\n```\r\n\r\nTo understand how EasyPype will help you, let's take a look at this code snippet:\r\n```\r\nimport easypype as ep\r\n\r\npipe = ep.PipeBuilderConcrete().command(ep.Sum(2)).build()\r\nmySink = ep.ConcreteSink()\r\nmySink.collect([1, 2, 3])\r\npipe.do(mySink)\r\n```\r\n\r\nEasyPype uses four modules:\r\n1. \"command\", has the Command class, the generic pipe operation.\r\n2. \"pipe\", holds classes related to pipe logic: Pipe, a command that executes a given list of commands, and PipeBuilder, the entity responsible to create a Pipe object. \r\n3. \"sink\", knows the Sink class, a basic data holder.\r\n4. \"log\", gives you a configured logger using \"logging\" from python.\r\n    \r\nHence, you can:\r\n- Load data\r\n```\r\nmySink = ep.ConcreteSink()\r\nmySink.collect([1, 2, 3])\r\n```\r\n- Setup operations\r\n```\r\npipe = ep.PipeBuilderConcrete().command(ep.Sum(2)).build()\r\n```\r\n- Run pipeline\r\n```\r\npipe.do(mySink)\r\n```\r\n\r\n### Adding custom commands\r\nBy default, EasyPype has a command called Sum that iterates an iterable object and increases each register by some amount. However, you can easily define your command:\r\n```\r\nimport easypype as ep\r\n\r\nclass Multiplier(ep.Command):\r\n\r\n    def __init__(self, amount):\r\n        self.amount = amount\r\n\r\n    def multiply(self, sink: ep.Sink):\r\n        return [i * self.amount for i in sink.data]\r\n\r\n    def do(self, sink: ep.Sink):\r\n        return self.multiply(sink)\r\n        \r\npipe = ep.PipeBuilderConcrete().command(Multiplier(2)).build()\r\nmySink = ep.ConcreteSink()\r\nmySink.collect([1, 2, 3])\r\npipe.do(mySink)\r\nprint(mySink.data)\r\n```\r\n\r\nCommands **need** four things to work:\r\n1. Extends Command class.\r\n2. Implement do(self, sink: ep.Sink).\r\n3. Return the data after the operation is completed.\r\n\r\nKeep in mind that the Sink will collect all returned values by the Command.\r\n\r\n\r\n## Modules\r\n* [command](#command)\r\n* [pipe](#pipe)\r\n* [sink](#sink)\r\n\r\n### command\r\n- Command: interface that declares how a command should be implemented.<br/>\r\n=> do(self, sink: Sink):\r\n executes the Command and returns new data.<br/>\r\n=> \\__init__(self, args*):\r\n gets command parameters.<br/>\r\n- Sum: command that increases each register of an iterable by some value.<br/>\r\n=> \\__init__(self, amount: Number):\r\n gets the value to be summed.\r\n \r\n### pipe\r\n- Pipe: special command that executes a list of other commands.<br/>\r\n=> do(self, sink: Sink):\r\n executes each command listed internally.<br/>\r\n- PipeBuilder: interface that declares how a pipe builder should be implemented.<br/>\r\n=> build(self) -> Pipe:\r\n returns the built Pipe.<br/>\r\n=> command(self, command: Command):\r\n append command to the Pipe command list.<br/>\r\n- PipeBuilderConcrete: PipeBuilder implementation.\r\n\r\n### sink\r\n- Sink: interface that declares how a sink should be implemented.<br/>\r\n=> data(self):\r\n property that returns data inside the Sink.<br/>\r\n=> collect(self, data: Any):\r\n data property setter.<br/>\r\n- ConcreteSink: Sink implementation.<br/>\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/looplex/easypype/archive/refs/tags/v1.2.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/looplex/easypype/tree/main",
    "keywords": "Pipeline,ETL,transform,load,pipe",
    "license": "unlicense",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easypype",
    "package_url": "https://pypi.org/project/easypype/",
    "platform": null,
    "project_url": "https://pypi.org/project/easypype/",
    "project_urls": {
      "Download": "https://github.com/looplex/easypype/archive/refs/tags/v1.2.1.tar.gz",
      "Homepage": "https://github.com/looplex/easypype/tree/main"
    },
    "release_url": "https://pypi.org/project/easypype/1.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Easy way of creating pipelines",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13207341,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79d47ddc51aed47e51e842be6c83451a45502c11dc22b229d25600f9a4c9716c",
          "md5": "15992d0ea7aeb7fce7847bbc252775f4",
          "sha256": "ac75f7e38b07955ce00eb3fffbba3298c5122156b73bb21e00d9a5d58b996d19"
        },
        "downloads": -1,
        "filename": "easypype-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "15992d0ea7aeb7fce7847bbc252775f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3466,
        "upload_time": "2022-02-21T23:07:58",
        "upload_time_iso_8601": "2022-02-21T23:07:58.167970Z",
        "url": "https://files.pythonhosted.org/packages/79/d4/7ddc51aed47e51e842be6c83451a45502c11dc22b229d25600f9a4c9716c/easypype-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2091f2dfe98e35e97f62e832c8afb6ecb6cdd669f42dc8df4185f923cd0fbfcb",
          "md5": "c7f9180ff984df1d0c3d9184d50dcd14",
          "sha256": "8e2ff905425dee0a2fb0de307d15b55a9ab466dec69b4ad44e7bd1a0dc38d45a"
        },
        "downloads": -1,
        "filename": "easypype-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c7f9180ff984df1d0c3d9184d50dcd14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 5281,
        "upload_time": "2022-02-24T23:02:43",
        "upload_time_iso_8601": "2022-02-24T23:02:43.018761Z",
        "url": "https://files.pythonhosted.org/packages/20/91/f2dfe98e35e97f62e832c8afb6ecb6cdd669f42dc8df4185f923cd0fbfcb/easypype-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e14eb54033078f0d5ffa40de07c68ef8899982e27cc35fd157384639c5fbcba",
          "md5": "99d537c442e46e72b806c6d5c3dfea7a",
          "sha256": "a0b4e578b3eaa800802764ef607a28b5dce9a86c51413ad2a57f0053c1d12f6a"
        },
        "downloads": -1,
        "filename": "easypype-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "99d537c442e46e72b806c6d5c3dfea7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 5263,
        "upload_time": "2022-02-24T23:18:39",
        "upload_time_iso_8601": "2022-02-24T23:18:39.686619Z",
        "url": "https://files.pythonhosted.org/packages/6e/14/eb54033078f0d5ffa40de07c68ef8899982e27cc35fd157384639c5fbcba/easypype-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "284cedf7fddad4adade0f142f0c2ab44b627542e83e6ae6d8ca5d7f7f1f220fb",
          "md5": "8d36850f7cf706c1701b54496d88c54c",
          "sha256": "fbfa10220a89cfac8d0d324377582f6915ee42018ab6a8c761153c4de1a4a96d"
        },
        "downloads": -1,
        "filename": "easypype-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8d36850f7cf706c1701b54496d88c54c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6410,
        "upload_time": "2022-02-25T16:31:11",
        "upload_time_iso_8601": "2022-02-25T16:31:11.791049Z",
        "url": "https://files.pythonhosted.org/packages/28/4c/edf7fddad4adade0f142f0c2ab44b627542e83e6ae6d8ca5d7f7f1f220fb/easypype-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daf5a8bfdd40e3009cc2f6fc9121f84ee6a1b143825a9686abbca3e72584003c",
          "md5": "7ae6371a01f989bf75d3598fcc3b4510",
          "sha256": "dc51e02abb7c1157ce771abe3c690accc1b272c525af45634e1a56a3ac13b8b6"
        },
        "downloads": -1,
        "filename": "easypype-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7ae6371a01f989bf75d3598fcc3b4510",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6189,
        "upload_time": "2022-03-08T14:14:47",
        "upload_time_iso_8601": "2022-03-08T14:14:47.417003Z",
        "url": "https://files.pythonhosted.org/packages/da/f5/a8bfdd40e3009cc2f6fc9121f84ee6a1b143825a9686abbca3e72584003c/easypype-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0406d1a5f753f8c6bb59cc52f5047d4670727f3916bf683fafe852e50fe6beea",
          "md5": "c86516ea45f06235f7a5208872b31f04",
          "sha256": "8aa87d5aab0d46cecac2bcf38c4dd16d075b9b1fc26ac3ccc2d3d9623adec4e5"
        },
        "downloads": -1,
        "filename": "easypype-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c86516ea45f06235f7a5208872b31f04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6079,
        "upload_time": "2022-03-17T16:33:15",
        "upload_time_iso_8601": "2022-03-17T16:33:15.798161Z",
        "url": "https://files.pythonhosted.org/packages/04/06/d1a5f753f8c6bb59cc52f5047d4670727f3916bf683fafe852e50fe6beea/easypype-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0406d1a5f753f8c6bb59cc52f5047d4670727f3916bf683fafe852e50fe6beea",
        "md5": "c86516ea45f06235f7a5208872b31f04",
        "sha256": "8aa87d5aab0d46cecac2bcf38c4dd16d075b9b1fc26ac3ccc2d3d9623adec4e5"
      },
      "downloads": -1,
      "filename": "easypype-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c86516ea45f06235f7a5208872b31f04",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 6079,
      "upload_time": "2022-03-17T16:33:15",
      "upload_time_iso_8601": "2022-03-17T16:33:15.798161Z",
      "url": "https://files.pythonhosted.org/packages/04/06/d1a5f753f8c6bb59cc52f5047d4670727f3916bf683fafe852e50fe6beea/easypype-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}