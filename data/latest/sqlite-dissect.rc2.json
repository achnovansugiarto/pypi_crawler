{
  "info": {
    "author": "Defense Cyber Crime Center (DC3)",
    "author_email": "TSD@dc3.mil",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "# DC3 SQLite Dissect\n[![SQLite Dissect Python](https://github.com/Defense-Cyber-Crime-Center/sqlite-dissect/actions/workflows/ci.yml/badge.svg)](https://github.com/Defense-Cyber-Crime-Center/sqlite-dissect/actions/workflows/ci.yml)\n<a href=\"https://github.com/Defense-Cyber-Crime-Center/sqlite-dissect/releases\" target=\"_blank\"><img src=\"https://img.shields.io/github/v/release/Defense-Cyber-Crime-Center/sqlite-dissect?label=GitHub%20Release\"></a>\n<a href=\"https://pypi.org/project/sqlite-dissect/\" target=\"_blank\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/sqlite-dissect?label=PyPi%20Release\"></a>\n\n### Usage:\n\n    sqlite_dissect [-h] [-v] [-d OUTPUT_DIRECTORY] [-p FILE_PREFIX]\n                   [-e EXPORT_TYPE] [-n | -w WAL | -j ROLLBACK_JOURNAL] [-r | EXEMPTED_TABLES]\n                   [-s | -t] [-g] [-c] [-f] [-k] [-l LOG_LEVEL] [-i LOG_FILE] [--warnings]\n                   SQLITE_PATH\n\nSQLite Dissect is a SQLite parser with recovery abilities over SQLite databases\nand their accompanying journal files. If no options are set other than the file\nname, the default behaviour will be to check for any journal files and print to\nthe console the output of the SQLite files.  The directory of the SQLite file\nspecified will be searched through to find the associated journal files.  If \nthey are not in the same directory as the specified file, they will not be found\nand their location will need to be specified in the command.  SQLite carving\nwill not be done by default.  Please see the options below to enable carving.\n\n#### Required Arguments:\n\n| Argument    | Description                                                                                                                                                                                                                  | Example Usage                  |\n|-------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------|\n| SQLITE_PATH | The path and filename of the SQLite file or directory to be carved. If a directory is provided, it will recursively search for files with the extensions: `.db`, `.sqlite`, `.sqlite3`. | `sqlite_dissect SQLITE_PATH` |  \n\n\n#### Optional Arguments:\n\n| Argument                         | Flag         | Description                              |\n| ---------------------------------|--------------|------------------------------------------|\n| --help                           | -h           | show this help message and exit          |\n| --version                        | -v           | display the version of SQLite Dissect    |\n| --directory DIRECTORY            | -d DIRECTORY | directory to write output to (must be specified for outputs other than console text) |\n| --file-prefix PREFIX             | -p PREFIX    | the file prefix to use on output files; default is the name of the SQLite file (the directory for output must be specified) |\n| --export FORMATS                 | -e FORMATS   | the format(s) to export to {text, csv, sqlite, xlsx, case}. text written to console if -d is not specified. Multiple space-delimited format values are permitted ex. `-e sqlite csv xlsx`. |\n| --no-journal                     | -n           | turn off automatic detection of journal files |\n| --wal WAL                        | -w WAL       | the WAL file to use instead of searching the SQLite file directory by default |\n| --rollback-journal JOURNAL       | -j JOURNAL   | the rollback journal file to use instead of searching the SQLite file directory by default (under development, currently only outputs to csv, output directory needs to be specified) |\n| --exempted-tables TABLES         | -r TABLES    | comma-delimited string of tables \\[table1,table2,table3\\] to exempt (currently only implemented and allowed for rollback journal parsing) ex. `-r table1,table2,table3`                  |\n| --schema                         | -s           | output the the initial schema found in the main database file to console                                                                                                      |\n| --schema-history                 | -t           | output the schema history to console, prints the --schema information and write-head log changes                                                                                      |\n| --signatures                     | -g           | output the signatures generated to console                                                                                                                                            |\n| --carve                          | -c           | carves and recovers table data                                                                                                                                                        |\n| --carve-freelists                | -f           | carves freelist pages (carving must be enabled, under development)                                                                                                                    |\n| --tables TABLES                  | -b TABLES    | specified comma-delimited string of tables \\[table1,table2,table3\\] to carve ex. `-b table1,table2,table3`                                                                                |\n| --disable-strict-format-checking | -k           | disable strict format checks for SQLite databases (this may result in improperly parsed SQLite files)                                                                                 |\n| --log-level LEVEL                | -l LEVEL     | level to log messages at {critical, error, warning, info, debug, off}                                                                                                                 |\n| --log-file FILE                  | -i FILE      | log file to write to; appends to file if file already exists. default is to write to console. ignored if log-level set to `off`                                                               |\n| --warnings                       |              | enable runtime warnings                                                                                                                                                               |\n | --header                         |              | enable header info printing                                                                                                                                                           |\n | --config FILE                         |              | file containing configuration values for the execution of SQLite Dissect                                                                                                                                                            |\n\n### Command Line Usage:\n\n1. Print the version:\n\n```shell\nsqlite_dissect --version\n```\n\n2. Parse a SQLite database and print the outputs to the screen:\n\n```shell\nsqlite_dissect [SQLITE_PATH]\n```\n\n\n3. Parse a SQLite database and print schema history to a SQLite output file:\n\n```shell\nsqlite_dissect [SQLITE_PATH] --schema-history -d [OUTPUT_DIRECTORY] -e sqlite\n```\n\n4. Parse a SQLite database and print the output to a SQLite file along with printing signatures and carving entries:\n\n```shell\nsqlite_dissect [SQLITE_PATH] --signatures -d [OUTPUT_DIRECTORY] -e sqlite --carve\n```\n\n5. Parse a SQLite database and print the output to a SQLite file and carving entries, including freelists, for specific tables:\n\n```shell\nsqlite_dissect [SQLITE_PATH] -d [OUTPUT_DIRECTORY] -e sqlite --carve --carve-freelists -b [TABLES]\n```\n\n6. Parse a SQLite database file and print the output to a xlsx workbook along with generating signatures and \n   carving entries.  The schema history (schema updates throughout the WAL are included if a WAL file is detected) and \n   signatures will be printed to standard output.  The log level will be set to debug and all log messages will be\n   output to the specified log file.\n\n```shell\nsqlite_dissect [SQLITE_PATH] -d [OUTPUT_DIRECTORY] -e xlsx --schema-history --carve --signatures --log-level debug -i [LOG_FILE]\n```\n\n7. Parse a SQLite database file along with a specified rollback journal file and send the output to CSV files.  \n   (CSV is the only output option currently implemented for rollback journal files)\n\n```shell\nsqlite_dissect [SQLITE_PATH] -d [OUTPUT_DIRECTORY] -e csv --carve -j [ROLLBACK_JOURNAL]\n```\n\n##### Configuration Files\nSQLite Dissect can optionally be configured with configuration files that are provided using the CLI argument `--config`\n\nThe format for the configuration file is as follows:\n```text\n# this is a comment\n; this is also a comment (.ini style)\n---            # lines that start with --- are ignored (yaml style)\n-------------------\n[section]      # .ini-style section names are treated as comments\n\n# how to specify a key-value pair (all of these are equivalent):\nname value     # key is case sensitive: \"Name\" isn't \"name\"\nname = value   # (.ini style)  (white space is ignored, so name = value same as name=value)\nname: value    # (yaml style)\n--name value   # (argparse style)\n\n# how to set a flag arg (eg. arg which has action=\"store_true\")\n--name\nname\nname = True    # \"True\" and \"true\" are the same\n\n# how to specify a list arg (eg. arg which has action=\"append\")\nfruit = [apple, orange, lemon]\nindexes = [1, 12, 35 , 40]\n```\n\nFor example:\n```config\n[export]\ndirectory=/path/to/output\nexport=[text, sqlite, case]\n```\n\n##### Environment Variables\nSQLite Dissect can also be configured using environment variables with the prefixed version of the argument flag (SQLD_).\n\nFor example:\n```shell\nexport SQLD_DIRECTORY=/path/to/output\nexport SQLD_EXPORT_TYPE=\"[text, sqlite, case]\"\n```\n\n### Description\n\nThis application focuses on carving by analyzing the allocated content within each of the SQLite\ndatabase tables and creating signatures.  Where there is no content in the table, the signature\nis based off of analyzing the create table statement in the master schema table.  The signature\ncontains the series of possible serial types that can be stored within the file for that table.  \nThis signature is then applied to the unallocated content and freeblocks of the table b-tree in\nthe file.  This includes both interior and leaf table b-tree pages for that table.  The signatures \nare only applied to the pages belonging to the particular b-tree page it was generated from due\nto initial research showing that the pages when created or pulled from the freelist set are\noverwritten with zeros for the unallocated portions.  Fragments within the pages can be reported\non but, due to the size (<4 bytes), are not carved.  Due to the fact that entries are added into\ntables in SQLite from the end of the page and moving toward the beginning, the carving works\nin the same manner in order to detect previously partially overwritten entries better.  This \ncarving can also be applied to the set of freelist pages within the SQLite file if specified\nbut the freelist pages are currently treated as sets of unallocated data with the exception \nof the freelist page metadata.\n\nThe carving process does not currently account for index b-trees as the more pertinent information\nis included in the table b-trees.  Additionally, there are some table b-trees that are not currently\nsupported.  This includes tables that are \"without row_id\", virtual, or internal schema objects.\nThese are unique cases which are slightly more rare use cases or don't offer as much as the\nmain tables do.  By default all tables will be carved if they do not fall into one of these cases.\nYou can send in a specific list of tables to be carved.\n\nThis application is written in the hopes that many of these use cases can be addressed in the future\nand is scalable to those use cases.  Although one specific type of signature is preferred by default\nin the application, SQLite Dissect generates multiple versions of a signature and can eventually\nsupport carving by specifying other signatures or providing your own.  Since SQLite Dissect generates\nthe signature based off of existing data within the SQLite files automatically, there is no need to\nsupply SQLite Dissect a signature for a particular schema or application.  This could be implemented\nthough to allow possibly more specific/targeted carving of SQLite files through this application.\n\nJournal carving is supported primarily for WAL files.  If a WAL file is found, this application will\nparse through each of the commit records in sequence and assign a version to them.  This is the same\nas timelining that some applications use to explain this.  Rollback journals are currentlytreated as\na full unallocated block and only support export to csv files.\n\nSQLite Dissect can support output to various forms: text, csv, xlsx, and sqlite.  Due to certain\nconstraints on what can be written to some file types, certain modifications need to be made.  For\ninstance, when writing SQLite columns such as row_id that are already going to pre-exist in the table\nfor export to a SQLite file we need to preface the columns with \"sd_\" so they will not conflict with \nthe actual row_id column.  This also applies to internal schema objects. If certain SQLite tables are \nrequested to be written to a SQLite file, than these will be prefaced with \"iso_\" so they will not \nconflict with similar internal schema objects that may already exist in the SQLite file bring written \nto.  In xlsx or csv, due to a \"=\" symbol indicating a type of equation, these are prefaced with a \" \" \ncharacter to avoid this issue.  More details can be found in the code documentation of the export classes \nthemselves.\n\nSQLite Dissect opens the file as read only and acts as a read only interpreter when parsing and carving\nthe SQLite file.  This is to ensure no changes are made to the files being analyzed.  The only use\nof the sqlite3 libraries in Python are to write the output to a SQLite file if that option is\nspecified for output.\n\n#### Additional Notes:\n1. SQLite Dissect currently only works on a SQLite database or a SQLite database along with a journal\n   (WAL or rollback) file.  Journal files by themselves are not supported yet.\n\n#### Currently not implemented:\n1. Signatures and carving are not implemented for \"without rowid\" tables or indexes.  This will not cause an error \n   but will skip signature generation and carving processes.\n2. Signatures and carving are not implemented for virtual tables.  This will not cause an error but will skip \n   signature generation and carving processes.  `Note:  Even though virtual tables are skipped, virtual tables may \n   create other non-virtual tables which are not skipped.  Currently nothing ties these tables back to the virtual\n   table that created them.`\n3. Invalidated frames in WAL files are currently skipped and not parsed.  `Note:  This applies to previous WAL records\n   that were previously written to the SQLite database.`\n4. Signatures generated are only reflective of the base/initial schema in the SQLite database.\n\n#### Known issues and errors:\n1. A use case may occur on generating a very small signature due to a table with very few columns resulting in\n   many false positives and longer parsing time.\n2. Due to current handling queuing of data objects to be printed in addition to #1 above, a memory issue may\n   occur with carving some tables.\n\n#### Future implementation:\n1. Export binary objects to separate files during export instead of being written to text files.\n2. Print out sets of data that were unallocated or in freeblocks that did not have successful carvings.\n3. Fix issues with schemas with comments.\n4. Handle \"altered column\" table signatures where detected.\n5. Implement handling of invalidated WAL frames.\n6. The ability to de-dupe carved entries to those in allocated space (in cases such as those where the b-tree was migrated).\n\n# Library Scripts\n\nHigh level scripts that are used to access the rest of the library and provide the base application for executing\nSQLite Dissect when built.\n\n- api_usage.py\n- example.py\n- setup.py\n- sqlite_dissect.py\n\n<br>\n\n### api_usage.py\n\nThis script shows an example of the api usage for a specific test file.\n\nTODO:\n- [ ] Documentation improvements.\n\n<br>\n\n### example.py\n\nThis script shows examples of how this library can be used.\n\nTODO:\n- [ ] Documentation improvements.\n- [ ] Implement additional export methods.\n\n<br>\n\n### setup.py\n\nThis script is used to setup the sqlite_dissect package for use in python environments.\n\n>Note:  To compile a distribution for the project run \"python setup.py sdist\" in the directory this file is located in.\n\n>Note: openpyxl is needed for the xlsx export and will install jdcal, et-xmlfile \\[\"openpyxl>=2.4.0b1\"\\]\n\n>Note: PyInstaller is used for generation of executables but not included in this setup.py script and will\n>      install altgraph, dis3, macholib, pefile, pypiwin32, pywin32 as dependencies. \\[pyinstaller==3.6 needs to be used\n>      for Python 2.7 since the newer versions of PyInstaller of 4.0+ require Python 3.6\\]  Information on how to run\n>      PyInstaller is included in the spec files under the pyinstaller directory.  Four files are here, two for windows\n>      and two for linux, both for x64 platforms.  The two different files for each allow you to build it as one single\n>      file or a directory of decompressed files.  Since the one file extracts to a temp directory in order to run, on\n>      some systems this may be blocked and therefore the directory of files is preferred.\n\n<br>\n\n### sqlite_dissect.py\n\nThis script acts as the command line script to run this library as a stand-alone application.\n\nTODO:\n- [ ] Documentation improvements.\n- [ ] Implement append, overwrite, etc. options for the log file if specified.\n- [ ] Incorporate signature generation input and output files once implemented.\n- [ ] Incorporate \"store in memory\" arguments (currently set to False, more in depth operations may want it True).\n- [ ] Implement multiple passes/depths.\n- [ ] Test use cases for exempted tables with rollback journal and when combined with specified tables.  \n- [ ] Check on name vs table_name properties of the master schema entry.  \n- [ ] Test cases where the schema changes throughout the WAL file.\n- [ ] Investigate handling of virtual and \"without rowid\" tables when creating table signatures through the interface.\n- [ ] Documentation on \"without rowid\" tables and indexes in references to carving in help documentation.\n- [ ] Make sure to address/print unallocated space (especially uncarved) from updated page numbers in commit records.\n- [ ] Research if there can be journal files with a zero length database file or zero-length journal files.\n- [ ] Research if there can be combinations and of multiple rollback journal and WAL files with the SQLite database.\n- [ ] Validate initial research that allocation of freelist pages to a b-tree results in a wipe of the page data.\n- [ ] Add additional logging messages to the master schema entries skipped in signature generation. \n- [ ] Integrate in the SQLite Forensic Corpus into tests.\n- [ ] Look into updating terminology for versioning to timelining.\n- [ ] Update code for compatibility with Python 3.\n- [ ] Create PyUnit tests.\n- [ ] Create a GUI.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Defense-Cyber-Crime-Center/sqlite-dissect",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlite-dissect",
    "package_url": "https://pypi.org/project/sqlite-dissect/",
    "platform": null,
    "project_url": "https://pypi.org/project/sqlite-dissect/",
    "project_urls": {
      "Homepage": "https://github.com/Defense-Cyber-Crime-Center/sqlite-dissect"
    },
    "release_url": "https://pypi.org/project/sqlite-dissect/0.2.0/",
    "requires_dist": [
      "openpyxl (==2.6.4)",
      "ConfigArgParse"
    ],
    "requires_python": "",
    "summary": "This package allows parsing and carving of SQLite files",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13947740,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fd519f46be100c6c0e6cd4ffc7e0a0f793f1d0779ffa026736e9478233d1632",
          "md5": "3762f443c14c44e5bcdb40536b2d917d",
          "sha256": "fba754a31abe8892edf550b44d77bddc7efcbf9d4dcfed8f259982ca8f8fbd37"
        },
        "downloads": -1,
        "filename": "sqlite_dissect-0.1.0-py2.7.egg",
        "has_sig": false,
        "md5_digest": "3762f443c14c44e5bcdb40536b2d917d",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "requires_python": null,
        "size": 351007,
        "upload_time": "2022-04-12T14:55:20",
        "upload_time_iso_8601": "2022-04-12T14:55:20.141281Z",
        "url": "https://files.pythonhosted.org/packages/0f/d5/19f46be100c6c0e6cd4ffc7e0a0f793f1d0779ffa026736e9478233d1632/sqlite_dissect-0.1.0-py2.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30239080b717954b33ed8b078dabdedf4220e433af22588eb496409c1f1b6d3c",
          "md5": "ab5db78302fcb889681f9106f40c12f6",
          "sha256": "eebdae82550c8b903ee690b25cdc713f5b8ae256b66055ab073e26f29b9b8bed"
        },
        "downloads": -1,
        "filename": "sqlite_dissect-0.1.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab5db78302fcb889681f9106f40c12f6",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 187169,
        "upload_time": "2022-04-12T14:55:18",
        "upload_time_iso_8601": "2022-04-12T14:55:18.935859Z",
        "url": "https://files.pythonhosted.org/packages/30/23/9080b717954b33ed8b078dabdedf4220e433af22588eb496409c1f1b6d3c/sqlite_dissect-0.1.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2dd737c3c5405687f5a19afc6e49e74ecaf8a0f54999473a91919126fc59ab70",
          "md5": "ff194a318bd85f414535c49e8ae35cd8",
          "sha256": "377066854a040b5c2db1e8235d8962dce187426c4e96e652c2b92c25bfe47d47"
        },
        "downloads": -1,
        "filename": "sqlite_dissect-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ff194a318bd85f414535c49e8ae35cd8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 157426,
        "upload_time": "2022-04-12T14:55:21",
        "upload_time_iso_8601": "2022-04-12T14:55:21.129349Z",
        "url": "https://files.pythonhosted.org/packages/2d/d7/37c3c5405687f5a19afc6e49e74ecaf8a0f54999473a91919126fc59ab70/sqlite_dissect-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48eda606543ed0f1147b0a54ce07237beb28fec305c5af92a85d126e711b3a9a",
          "md5": "0f3d9a68dce980a2aaa7a6c3a5266e79",
          "sha256": "f09716880d1b399da5a948894560696f8d11bdbd6e9d794bcd075e3371dbe567"
        },
        "downloads": -1,
        "filename": "sqlite_dissect-0.2.0-py2.7.egg",
        "has_sig": false,
        "md5_digest": "0f3d9a68dce980a2aaa7a6c3a5266e79",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "requires_python": null,
        "size": 367462,
        "upload_time": "2022-05-26T17:31:01",
        "upload_time_iso_8601": "2022-05-26T17:31:01.157436Z",
        "url": "https://files.pythonhosted.org/packages/48/ed/a606543ed0f1147b0a54ce07237beb28fec305c5af92a85d126e711b3a9a/sqlite_dissect-0.2.0-py2.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2eaec4f6aae60af3dd19d23c16524ed114231ce2038524e3441190bf57c38a2e",
          "md5": "04423d4d450cd6a8f0a9a3cfcb0bb760",
          "sha256": "fcd894e3e314cbb10b4060969479fe601364b935cd6abc68f14898c73745d64b"
        },
        "downloads": -1,
        "filename": "sqlite_dissect-0.2.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "04423d4d450cd6a8f0a9a3cfcb0bb760",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 195794,
        "upload_time": "2022-05-26T17:30:59",
        "upload_time_iso_8601": "2022-05-26T17:30:59.540107Z",
        "url": "https://files.pythonhosted.org/packages/2e/ae/c4f6aae60af3dd19d23c16524ed114231ce2038524e3441190bf57c38a2e/sqlite_dissect-0.2.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "807c9bac9fcdfa5f4e5d65459b24d5e7e9b5f207cd89786f5ca1aa3e55ca810c",
          "md5": "6e5834dd313ebe5c965a38b87916de01",
          "sha256": "7cce079d8db509b414e03d246e6277d82f381163420710a73390204c304f8488"
        },
        "downloads": -1,
        "filename": "sqlite_dissect-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6e5834dd313ebe5c965a38b87916de01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 167861,
        "upload_time": "2022-05-26T17:31:02",
        "upload_time_iso_8601": "2022-05-26T17:31:02.622608Z",
        "url": "https://files.pythonhosted.org/packages/80/7c/9bac9fcdfa5f4e5d65459b24d5e7e9b5f207cd89786f5ca1aa3e55ca810c/sqlite_dissect-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48eda606543ed0f1147b0a54ce07237beb28fec305c5af92a85d126e711b3a9a",
        "md5": "0f3d9a68dce980a2aaa7a6c3a5266e79",
        "sha256": "f09716880d1b399da5a948894560696f8d11bdbd6e9d794bcd075e3371dbe567"
      },
      "downloads": -1,
      "filename": "sqlite_dissect-0.2.0-py2.7.egg",
      "has_sig": false,
      "md5_digest": "0f3d9a68dce980a2aaa7a6c3a5266e79",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 367462,
      "upload_time": "2022-05-26T17:31:01",
      "upload_time_iso_8601": "2022-05-26T17:31:01.157436Z",
      "url": "https://files.pythonhosted.org/packages/48/ed/a606543ed0f1147b0a54ce07237beb28fec305c5af92a85d126e711b3a9a/sqlite_dissect-0.2.0-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2eaec4f6aae60af3dd19d23c16524ed114231ce2038524e3441190bf57c38a2e",
        "md5": "04423d4d450cd6a8f0a9a3cfcb0bb760",
        "sha256": "fcd894e3e314cbb10b4060969479fe601364b935cd6abc68f14898c73745d64b"
      },
      "downloads": -1,
      "filename": "sqlite_dissect-0.2.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "04423d4d450cd6a8f0a9a3cfcb0bb760",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 195794,
      "upload_time": "2022-05-26T17:30:59",
      "upload_time_iso_8601": "2022-05-26T17:30:59.540107Z",
      "url": "https://files.pythonhosted.org/packages/2e/ae/c4f6aae60af3dd19d23c16524ed114231ce2038524e3441190bf57c38a2e/sqlite_dissect-0.2.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "807c9bac9fcdfa5f4e5d65459b24d5e7e9b5f207cd89786f5ca1aa3e55ca810c",
        "md5": "6e5834dd313ebe5c965a38b87916de01",
        "sha256": "7cce079d8db509b414e03d246e6277d82f381163420710a73390204c304f8488"
      },
      "downloads": -1,
      "filename": "sqlite_dissect-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6e5834dd313ebe5c965a38b87916de01",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 167861,
      "upload_time": "2022-05-26T17:31:02",
      "upload_time_iso_8601": "2022-05-26T17:31:02.622608Z",
      "url": "https://files.pythonhosted.org/packages/80/7c/9bac9fcdfa5f4e5d65459b24d5e7e9b5f207cd89786f5ca1aa3e55ca810c/sqlite_dissect-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}