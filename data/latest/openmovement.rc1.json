{
  "info": {
    "author": "Daniel Jackson",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "# Open Movement Python Code\r\n\r\nThis repository contains the Python code for the [Open Movement](https://openmovement.dev) project.\r\n\r\n```bash\r\npython -m pip install \"git+https://github.com/digitalinteraction/openmovement-python.git#egg=openmovement\"\r\n```\r\n\r\n\r\n## `omconvert` - wrapper for `omconvert` binary executable\r\n\r\n([omconvert.py](src/openmovement/process/omconvert.py)) is a Python wrapper for the [omconvert](https://github.com/digitalinteraction/omconvert) executable, which processes `.cwa` and `.omx` binary files and produce calculated outputs, such as SVM (signal vector magnitude) and WTV (wear-time validation).  It can also be used to output raw accelerometer `.csv` files (these can be very large).\r\n\r\nThe example code, [run_omconvert.py](src/examples/run_omconvert.py), exports the SVM and WTV files.  A basic usage example is:\r\n\r\n```python\r\nimport os\r\nfrom openmovement.process import OmConvert\r\n\r\nsource_file = 'CWA-DATA.CWA'\r\n\r\nbase_name = os.path.splitext(source_file)[0]\r\noptions = {}\r\n\r\n# Nearest-point sampling\r\noptions['interpolate_mode'] = 1\r\n\r\n# Optionally export accelerometer CSV file (can take a long time)\r\n#options['csv_file'] = base_name + '.csv'\r\n\r\n# SVM (no filter)\r\noptions['svm_filter'] = 0\r\noptions['svm_file'] = base_name + '.svm.csv'\r\n\r\n# Wear-time validation\r\noptions['wtv_file'] = base_name + '.wtv.csv'\r\n\r\n# Run the processing\r\nom = OmConvert()\r\nresult = om.execute(source_file, options)\r\n```\r\n\r\n*Note:* You will need the `omconvert` binary either in your `PATH`, in the current working directory, or in the same directory as the `omconvert.py` file (or, on Windows, if you have *OmGui* installed in the default location).  On Windows you can use the `bin/build-omconvert.bat` script to fetch the source and build the binary, or on macOS/Linux you can use the `bin/build-omconvert.sh` script. \r\n\r\n\r\n## `cwa_load` - .CWA file loader\r\n\r\nLoad `.CWA` files directly into Python (requires `numpy` and `pandas`).\r\n\r\n```python\r\nfrom openmovement.load import CwaData\r\n\r\nfilename = 'cwa-data.cwa'\r\nwith CwaData(filename, include_gyro=False, include_temperature=True) as cwa_data:\r\n    # As an ndarray of [time,accel_x,accel_y,accel_z,temperature]\r\n    sample_values = cwa_data.get_sample_values()\r\n    # As a pandas DataFrame\r\n    samples = cwa_data.get_samples()\r\n```\r\n\r\nYou can also use `MultiData` instead of `CwaData`, which supports .CWA files, .WAV accelerometer files and timeseries .CSV files (all of which could be inside a .ZIP file).\r\n\r\n\r\n## `zip_helper` - \"potentially zipped\" file helper\r\n\r\nHandles a \"potentially zipped\" file: one that may be inside a .ZIP archive but, if so, you need the extracted file on a drive and it can't be a stream from a compressed file.  For example, when you need to memory-map the file (e.g. with `cwa_load`), or use it with an external process (e.g. with `omconvert`).\r\n\r\nOffers a convenient `with` syntax:\r\n\r\n* If the file extension is not '.zip', the original filename is passed through via the `with` syntax.\r\n\r\n* Otherwise, the file is opened as a .ZIP archive, and it is searched for exactly one matching filename (by default, a single-file archive).  The matching file is extracted to a temporary location, and that location is passed through the `with` syntax as the filename to use.  At the end of the `with` block, the temporary file is automatically removed.\r\n\r\n```python\r\nfrom openmovement.load import PotentiallyZippedFile\r\n\r\nfilename = 'example.zip'\r\nwith PotentiallyZippedFile(filename, ['*.cwa', '*.omx']) as file:\r\n    print('Using: ' + file)\r\n    pass\r\n```\r\n\r\n\r\n## Python implementations of algorithms\r\n\r\n### SVM\r\n\r\n* [calc_svm.py](src/openmovement/process/calc_svm.py) - Calculates the mean *abs(SVM-1)* value (otherwise known as the Euclidean Norm Minus One; where SVM=Signal Vector Magnitude) for an epoch of timestamped accelerometer data (default 60 seconds).\r\n\r\n* [run_svm.py](src/examples/run_svm.py) - Example showing how to run the SVM calculation from a source data file to an output `.csvm.csv` file.\r\n\r\n### WTV\r\n\r\n* [calc_svm.py](src/openmovement/process/calc_wtv.py) - Calculates the WTV (wear-time validation) value (30 minute epochs)  for an epoch of timestamped accelerometer data (default 60 seconds).\r\n\r\n* [run_wtv.py](src/examples/run_wtv.py) - Example showing how to run the WTV calculation from a source data file to an output `.cwtv.csv` file.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/digitalinteraction/openmovement-python/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openmovement",
    "package_url": "https://pypi.org/project/openmovement/",
    "platform": "",
    "project_url": "https://pypi.org/project/openmovement/",
    "project_urls": {
      "Bug Tracker": "https://github.com/digitalinteraction/openmovement-python/issues",
      "Homepage": "https://github.com/digitalinteraction/openmovement-python/"
    },
    "release_url": "https://pypi.org/project/openmovement/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Open Movement processing code",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10500519,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "333567a4ac2b1e780d99dc3829a8f0bf13d645497a966d1d342be8b24e16dec1",
          "md5": "02db4ca20dc870f219021a5c539b1f99",
          "sha256": "7f39f12c6e30a798feaf5c2a5b26c699ad0cfe5e7b6010511ddbe6034d2edebe"
        },
        "downloads": -1,
        "filename": "openmovement-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "02db4ca20dc870f219021a5c539b1f99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33931,
        "upload_time": "2021-05-28T15:29:00",
        "upload_time_iso_8601": "2021-05-28T15:29:00.659432Z",
        "url": "https://files.pythonhosted.org/packages/33/35/67a4ac2b1e780d99dc3829a8f0bf13d645497a966d1d342be8b24e16dec1/openmovement-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "333567a4ac2b1e780d99dc3829a8f0bf13d645497a966d1d342be8b24e16dec1",
        "md5": "02db4ca20dc870f219021a5c539b1f99",
        "sha256": "7f39f12c6e30a798feaf5c2a5b26c699ad0cfe5e7b6010511ddbe6034d2edebe"
      },
      "downloads": -1,
      "filename": "openmovement-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "02db4ca20dc870f219021a5c539b1f99",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 33931,
      "upload_time": "2021-05-28T15:29:00",
      "upload_time_iso_8601": "2021-05-28T15:29:00.659432Z",
      "url": "https://files.pythonhosted.org/packages/33/35/67a4ac2b1e780d99dc3829a8f0bf13d645497a966d1d342be8b24e16dec1/openmovement-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}