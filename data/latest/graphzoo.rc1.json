{
  "info": {
    "author": "",
    "author_email": "Anoushka Vyas <anoushkavyas@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# GraphZoo\n> PyTorch version of [GraphZoo](https://github.com/AnoushkaVyas/GraphZoo).\n\n> Facilitating learning, using, and designing graph processing pipelines/models systematically.\n\nWe present a novel framework GraphZoo, that makes learning, using, and designing graph processing pipelines/models systematic by abstraction over the redundant components. The framework contains a powerful library that supports several hyperbolic manifolds and an easy-to-use modular framework to perform graph processing tasks which aids researchers in different components, namely, (i) reproduce evaluation pipelines of state-of-the-art approaches, (ii) design new hyperbolic or Euclidean graph networks and compare them against the state-of-the art approaches on standard benchmarks, (iii) add custom datasets for evaluation, (iv) add new tasks and evaluation criteria. For more details check out our [paper](https://www2022.thewebconf.org/PaperFiles/54.pdf) and [poster](https://github.com/AnoushkaVyas/GraphZoo/blob/main/GraphZooPoster.pdf).\n\n## Installation\n\n### Using Github source:\n```\ngit clone https://github.com/AnoushkaVyas/GraphZoo.git\ncd GraphZoo\npython setup.py install\n```\n\n### Using Pypi:\n\n```\npip install graphzoo\n```\n\n## Getting Started in 60 Seconds\n\nTo train a Hyperbolic Graph Convolutional Networks model for node classification task on Cora dataset, make use of GraphZoo APIs customized loss functions and evaluation metrics for this task.\n\nDownload data:\n\n```python\nimport graphzoo as gz\nimport torch\nfrom graphzoo.config import parser\n\nparams = parser.parse_args(args=[])\nparams.download_folder ='./data/'\ngz.dataloader.download_and_extract(params)\n```\nPrepare input data:\n\n```python\nparams.dataset='cora'\nparams.task='nc'\nparams.datapath='data/cora'\ndata = gz.dataloader.DataLoader(params)\n```\n\nInitialize the model and fine-tune the hyperparameters:\n\n```python\nparams.model='HGCN'\nparams.manifold='PoincareBall'\nparams.dim=128\nmodel= gz.models.NCModel(params)\n```\n\n`Trainer` is used to control the training flow:\n\n```python\noptimizer = gz.optimizers.RiemannianAdam(params=model.parameters(), lr=params.lr, weight_decay=params.weight_decay)\ntrainer=gz.trainers.Trainer(params,model,optimizer,data)\ntrainer.run()\ntrainer.evaluate()\n```\n## Getting Started Using Command Line\nTo train a Hyperbolic Graph Convolutional Networks model for node classification task on Cora dataset using command line:\n\n```python\ncd GraphZoo\npython graphzoo/trainers/train.py --task nc --dataset cora --datapath ./data/cora --download_folder ./data/ --model HGCN --lr 0.01 --dim 16 --num-layers 2 --act relu --bias 1 --dropout 0.5 --weight-decay 0.001 --manifold PoincareBall --log-freq 5 --cuda 0 --c None\n```\n## Customizing Input Arguments\n\nVarious flags can be modified in the `graphzoo.config` module by the user.\n\n### Download Data \n\n```python\n     \"\"\"\n    GraphZoo Download and Extract\n    \n    Input Parameters\n    ----------\n        'dataset': (None, 'which dataset to use, can be any of [cora, pubmed, airport, disease_nc, disease_lp] (type: str)')\n        'download_folder': (None, 'path to the folder for raw data (type: str)')\n        \n    API Input Parameters\n    ----------\n        args: list of above defined input parameters from `graphzoo.config`\n    \n    \"\"\"\n\n```\n\n### Preparing Data\n\n```python\n     \"\"\"\n    GraphZoo Dataloader\n\n    Input Parameters\n    ----------\n        'dataset': ('cora', 'which dataset to use, can be any of [cora, pubmed, airport, disease_nc, disease_lp, ppi, citeseer, webkb] (type: str)'),\n        'datapath': (None, 'path to raw data (type: str)'),\n        'val-prop': (0.05, 'proportion of validation edges for link prediction (type:float)'),\n        'test-prop': (0.1, 'proportion of test edges for link prediction (type: float)'),\n        'use-feats': (1, 'whether to use node features (1) or not (0 in case of Shallow methods) (type: int)'),\n        'normalize-feats': (1, 'whether to normalize input node features (1) or not (0) (type: int)'),\n        'normalize-adj': (1, 'whether to row-normalize the adjacency matrix (1) or not(0) (type: int)'),\n        'split-seed': (1234, 'seed for data splits (train/test/val) (type: int)')\n\n    API Input Parameters\n    ----------\n        args: list of above defined input parameters from `graphzoo.config`\n    \n    \"\"\"\n\n```\n\n### Models\n\n```python\n    \"\"\"\n    Base model for graph embedding tasks\n\n    Input Parameters\n    ----------\n        'task': ('nc', 'which tasks to train on, can be any of [lp, nc] (type: str)'),\n        'model': ('HGCN', 'which encoder to use, can be any of [Shallow, MLP, HNN, GCN, GAT, HGCN,HGAT] (type: str)'),\n        'dim': (128, 'embedding dimension (type: int)'),\n        'manifold': ('PoincareBall', 'which manifold to use, can be any of [Euclidean, Hyperboloid, PoincareBall] (type: str)'),\n        'c': (1.0, 'hyperbolic radius, set to None for trainable curvature (type: float)'),\n        'r': (2.0, 'fermi-dirac decoder parameter for lp (type: float)'),\n        't': (1.0, 'fermi-dirac decoder parameter for lp (type: float)'),\n        'pretrained-embeddings': (None, 'path to pretrained embeddings (.npy file) for Shallow node classification (type: str)'),\n        'num-layers': (2, 'number of hidden layers in encoder (type: int)'),\n        'bias': (1, 'whether to use bias (1) or not (0) (type: int)'),\n        'act': ('relu', 'which activation function to use or None for no activation (type: str)'),\n        'n-heads': (4, 'number of attention heads for graph attention networks, must be a divisor dim (type: int)'),\n        'alpha': (0.2, 'alpha for leakyrelu in graph attention networks (type: float)'),\n        'use-att': (0, 'whether to use hyperbolic attention (1) or not (0) (type: int)'),\n        'local-agg': (0, 'whether to local tangent space aggregation (1) or not (0) (type: int)') \n        \n    API Input Parameters\n    ----------\n        args: list of above defined input parameters from `graphzoo.config`\n    \"\"\"\n```\n\n### Trainer\n\n```python\n    \"\"\"\n    GraphZoo Trainer\n\n    Input Parameters\n    ----------\n        'lr': (0.05, 'initial learning rate (type: float)'),\n        'dropout': (0.0, 'dropout probability (type: float)'),\n        'cuda': (-1, 'which cuda device to use or -1 for cpu training (type: int)'),\n        'repeat': (10, 'number of times to repeat the experiment (type: int)'),\n        'optimizer': ('Adam', 'which optimizer to use, can be any of [Adam, RiemannianAdam, RiemannianSGD] (type: str)'),\n        'epochs': (5000, 'maximum number of epochs to train for (type:int)'),\n        'weight-decay': (0.0, 'l2 regularization strength (type: float)'),\n        'momentum': (0.999, 'momentum in optimizer (type: float)'),\n        'patience': (100, 'patience for early stopping (type: int)'),\n        'seed': (1234, 'seed for training (type: int)'),\n        'log-freq': (5, 'how often to compute print train/val metrics in epochs (type: int)'),\n        'eval-freq': (1, 'how often to compute val metrics in epochs (type: int)'),\n        'save': (0, '1 to save model and logs and 0 otherwise (type: int)'),\n        'save-dir': (None, 'path to save training logs and model weights (type: str)'),\n        'lr-reduce-freq': (None, 'reduce lr every lr-reduce-freq or None to keep lr constant (type: int)'),\n        'gamma': (0.5, 'gamma for lr scheduler (type: float)'),\n        'grad-clip': (None, 'max norm for gradient clipping, or None for no gradient clipping (type: float)'),\n        'min-epochs': (100, 'do not early stop before min-epochs (type: int)'),\n        'betas': ((0.9, 0.999), 'coefficients used for computing running averages of gradient and its square (type: Tuple[float, float])'),\n        'eps': (1e-8, 'term added to the denominator to improve numerical stability (type: float)'),\n        'amsgrad': (False, 'whether to use the AMSGrad variant of this algorithm from the paper `On the Convergence of Adam and Beyond` (type: bool)'),\n        'stabilize': (None, 'stabilize parameters if they are off-manifold due to numerical reasons every ``stabilize`` steps (type: int)'),\n        'dampening': (0,'dampening for momentum (type: float)'),\n        'nesterov': (False,'enables Nesterov momentum (type: bool)')\n\n    API Input Parameters\n    ----------\n        args: list of above defined input parameters from `graphzoo.config`\n        optimizer: a :class:`optim.Optimizer` instance\n        model: a :class:`BaseModel` instance\n    \n    \"\"\"\n```\n\n## Customizing the Framework\n\n### Adding Custom Dataset\n\n1. Add the dataset files in the `data` folder of the source code.\n2. To run this code on new datasets, please add corresponding data processing and loading in `load_data_nc` and `load_data_lp` functions in `dataloader/dataloader.py` in the source code.\n\nOutput format for node classification dataloader is:\n\n```\ndata = {'adj_train': adj, 'features': features, 'labels': labels, 'idx_train': idx_train, 'idx_val': idx_val, 'idx_test': idx_test}\n```\nOutput format for link prediction dataloader is:\n\n```\ndata = {'adj_train': adj_train, 'features': features, ‘train_edges’: train_edges, ‘train_edges_false’: train_edges_false,  ‘val_edges’: val_edges, ‘val_edges_false’: val_edges_false, ‘test_edges’: test_edges, ‘test_edges_false’: test_edges_false, 'adj_train_norm':adj_train_norm}\n```\n\n### Adding Custom Layers\n\n1. Attention layers can be added in `layers/att_layers.py` in the source code by adding a class in the file.\n2. Hyperbolic layers can be added in `layers/hyp_layers.py` in the source code by adding a class in the file.\n3. Other layers like a single GCN layer can be added in `layers/layers.py` in the source code by adding a class in the file.\n\n### Adding Custom Models\n\n1. After adding custom layers, custom models can be added in `models/encoders.py` in the source code by adding a class in the file.\n2. After adding custom layers, custom decoders to calculate the final output can be added in `models/decoders.py` in the source code by adding a class in the file. \n\n## Datasets \n\nThe included datasets are the following and they need to be downloaded from the [link](https://github.com/AnoushkaVyas/GraphZoo/releases/tag/Datasets):\n1. Cora\n2. Pubmed\n3. Disease\n4. Airport\n5. PPI\n6. Webkb\n7. Citeseer\n\n## Models\n\n### Shallow Methods \n1. Shallow Euclidean \n2. Shallow Hyperbolic\n\n### Neural Network Methods\n1. Multi-Layer Perceptron (MLP)\n2. Hyperbolic Neural Networks (HNN) \n\n### Graph Neural Network Methods\n1. Graph Convolutional Neural Networks (GCN) \n2. Graph Attention Networks (GAT)\n3. Hyperbolic Graph Convolutions (HGCN) \n4. Hyperbolic Graph Attention Networks (HGAT)\n\n\n## Package References\n\n[Tutorials](https://github.com/AnoushkaVyas/GraphZoo/tree/main/tutorials) \n\n[Documentation](https://github.com/AnoushkaVyas/GraphZoo#customizing-input-arguments)\n\n## Code References\n\nSome of the code was forked from the following repositories.\n- [hgcn](https://github.com/HazyResearch/hgcn)\n- [hgat](https://github.com/oom-debugger/hyperbolic-layers/tree/8ead8b713fee28f830dd8b33a1468082e0eeae50/py_hnn)\n- [geoopt](https://github.com/geoopt/geoopt)\n- [pygcn](https://github.com/tkipf/pygcn/tree/master/pygcn)\n- [gae](https://github.com/tkipf/gae/tree/master/gae)\n- [hyperbolic-image-embeddings](https://github.com/leymir/hyperbolic-image-embeddings)\n- [pyGAT](https://github.com/Diego999/pyGAT)\n- [poincare-embeddings](https://github.com/facebookresearch/poincare-embeddings)\n\n## Citation\nIf you use GraphZooZoo in your research, please use the following BibTex entry.\n\n```\n@inproceedings{10.1145/3487553.3524241,\nauthor = {Vyas, Anoushka and Choudhary, Nurendra and Khatir, Mehrdad and Reddy, Chandan K.},\ntitle = {GraphZoo: A Development Toolkit for Graph Neural Networks with Hyperbolic Geometries},\nyear = {2022},\nisbn = {9781450391306},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nurl = {https://doi.org/10.1145/3487553.3524241},\ndoi = {10.1145/3487553.3524241},\nbooktitle = {Companion Proceedings of the Web Conference 2022},\nkeywords = {graph learning, graph neural network, hyperbolic models, software},\nlocation = {Lyon, France},\nseries = {WWW '22}\n}\n```\n\n\n## License\n[MIT](https://opensource.org/licenses/MIT)\n\nCopyright (c) 2022 Anoushka Vyas\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2022 Anoushka Vyas  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphzoo",
    "package_url": "https://pypi.org/project/graphzoo/",
    "platform": null,
    "project_url": "https://pypi.org/project/graphzoo/",
    "project_urls": {
      "Bug Tracker": "https://github.com/AnoushkaVyas/GraphZoo",
      "Homepage": "https://github.com/AnoushkaVyas/GraphZoo"
    },
    "release_url": "https://pypi.org/project/graphzoo/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A hyperbolic toolkit",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14870222,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01d1354e0586d727e881b63f0ce9af2bbfe799e3997eaf42604dce2548a14328",
          "md5": "9424d512dd20158d578c0f45b095857c",
          "sha256": "88ac703f66650233a9dbcb7d041c1cf78fe3abf0d56a2f378dfeb3e5ed6e677d"
        },
        "downloads": -1,
        "filename": "graphzoo-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9424d512dd20158d578c0f45b095857c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 45012,
        "upload_time": "2022-08-24T19:59:05",
        "upload_time_iso_8601": "2022-08-24T19:59:05.302592Z",
        "url": "https://files.pythonhosted.org/packages/01/d1/354e0586d727e881b63f0ce9af2bbfe799e3997eaf42604dce2548a14328/graphzoo-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05fa08f08aee1089cdfee34f0f6b4e2b18f0d0b1af2f13764b1154c13f94868f",
          "md5": "8778008857eb28aa29d0bfbf111829f2",
          "sha256": "2b9214d961cc1c0b71a15fd987c746683906eafb61ec16d8b90834386061802b"
        },
        "downloads": -1,
        "filename": "graphzoo-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8778008857eb28aa29d0bfbf111829f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 2154619,
        "upload_time": "2022-08-24T19:59:08",
        "upload_time_iso_8601": "2022-08-24T19:59:08.299310Z",
        "url": "https://files.pythonhosted.org/packages/05/fa/08f08aee1089cdfee34f0f6b4e2b18f0d0b1af2f13764b1154c13f94868f/graphzoo-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01d1354e0586d727e881b63f0ce9af2bbfe799e3997eaf42604dce2548a14328",
        "md5": "9424d512dd20158d578c0f45b095857c",
        "sha256": "88ac703f66650233a9dbcb7d041c1cf78fe3abf0d56a2f378dfeb3e5ed6e677d"
      },
      "downloads": -1,
      "filename": "graphzoo-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9424d512dd20158d578c0f45b095857c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 45012,
      "upload_time": "2022-08-24T19:59:05",
      "upload_time_iso_8601": "2022-08-24T19:59:05.302592Z",
      "url": "https://files.pythonhosted.org/packages/01/d1/354e0586d727e881b63f0ce9af2bbfe799e3997eaf42604dce2548a14328/graphzoo-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05fa08f08aee1089cdfee34f0f6b4e2b18f0d0b1af2f13764b1154c13f94868f",
        "md5": "8778008857eb28aa29d0bfbf111829f2",
        "sha256": "2b9214d961cc1c0b71a15fd987c746683906eafb61ec16d8b90834386061802b"
      },
      "downloads": -1,
      "filename": "graphzoo-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8778008857eb28aa29d0bfbf111829f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 2154619,
      "upload_time": "2022-08-24T19:59:08",
      "upload_time_iso_8601": "2022-08-24T19:59:08.299310Z",
      "url": "https://files.pythonhosted.org/packages/05/fa/08f08aee1089cdfee34f0f6b4e2b18f0d0b1af2f13764b1154c13f94868f/graphzoo-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}