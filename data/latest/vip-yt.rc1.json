{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: Public Domain",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Multimedia :: Video"
    ],
    "description": "Official repository: <https://github.com/VIP-yt/VIP-yt>\r\n\r\n**PS**: Some links in this document will not work since this is a copy of the README.md from Github\r\n\r\n<!-- MANPAGE: BEGIN EXCLUDED SECTION -->\r\n<div align=\"center\">\r\n\r\n[![VIP-yt](https://raw.githubusercontent.com/VIP-yt/VIP-yt/master/.github/banner.svg)](#readme)\r\n\r\n[![Release version](https://img.shields.io/github/v/release/VIP-yt/VIP-yt?color=brightgreen&label=Download&style=for-the-badge)](#release-files \"Release\")\r\n[![PyPi](https://img.shields.io/badge/-PyPi-blue.svg?logo=pypi&labelColor=555555&style=for-the-badge)](https://pypi.org/project/VIP-yt \"PyPi\")\r\n[![Donate](https://img.shields.io/badge/_-Donate-red.svg?logo=githubsponsors&labelColor=555555&style=for-the-badge)](Collaborators.md#collaborators \"Donate\")\r\n[![Matrix](https://img.shields.io/matrix/VIP-yt:matrix.org?color=brightgreen&labelColor=555555&label=&logo=element&style=for-the-badge)](https://matrix.to/#/#VIP-yt:matrix.org \"Matrix\")\r\n[![Discord](https://img.shields.io/discord/807245652072857610?color=blue&labelColor=555555&label=&logo=discord&style=for-the-badge)](https://discord.gg/H5MNcFW63r \"Discord\")\r\n[![Supported Sites](https://img.shields.io/badge/-Supported_Sites-brightgreen.svg?style=for-the-badge)](supportedsites.md \"Supported Sites\")\r\n[![License: Unlicense](https://img.shields.io/badge/-Unlicense-blue.svg?style=for-the-badge)](LICENSE \"License\")\r\n[![CI Status](https://img.shields.io/github/workflow/status/VIP-yt/VIP-yt/Core%20Tests/master?label=Tests&style=for-the-badge)](https://github.com/VIP-yt/VIP-yt/actions \"CI Status\")\r\n[![Commits](https://img.shields.io/github/commit-activity/m/VIP-yt/VIP-yt?label=commits&style=for-the-badge)](https://github.com/VIP-yt/VIP-yt/commits \"Commit History\")\r\n[![Last Commit](https://img.shields.io/github/last-commit/VIP-yt/VIP-yt/master?label=&style=for-the-badge)](https://github.com/VIP-yt/VIP-yt/commits \"Commit History\")\r\n\r\n</div>\r\n<!-- MANPAGE: END EXCLUDED SECTION -->\r\n\r\nVIP-yt is a [youtube-dl](https://github.com/ytdl-org/youtube-dl) fork based on the now inactive [youtube-dlc](https://github.com/blackjack4494/yt-dlc). The main focus of this project is adding new features and patches while also keeping up to date with the original project\r\n\r\n<!-- MANPAGE: MOVE \"USAGE AND OPTIONS\" SECTION HERE -->\r\n\r\n<!-- MANPAGE: BEGIN EXCLUDED SECTION -->\r\n* [NEW FEATURES](#new-features)\r\n    * [Differences in default behavior](#differences-in-default-behavior)\r\n* [INSTALLATION](#installation)\r\n    * [Update](#update)\r\n    * [Release Files](#release-files)\r\n    * [Dependencies](#dependencies)\r\n    * [Compile](#compile)\r\n* [USAGE AND OPTIONS](#usage-and-options)\r\n    * [General Options](#general-options)\r\n    * [Network Options](#network-options)\r\n    * [Geo-restriction](#geo-restriction)\r\n    * [Video Selection](#video-selection)\r\n    * [Download Options](#download-options)\r\n    * [Filesystem Options](#filesystem-options)\r\n    * [Thumbnail Options](#thumbnail-options)\r\n    * [Internet Shortcut Options](#internet-shortcut-options)\r\n    * [Verbosity and Simulation Options](#verbosity-and-simulation-options)\r\n    * [Workarounds](#workarounds)\r\n    * [Video Format Options](#video-format-options)\r\n    * [Subtitle Options](#subtitle-options)\r\n    * [Authentication Options](#authentication-options)\r\n    * [Post-processing Options](#post-processing-options)\r\n    * [SponsorBlock Options](#sponsorblock-options)\r\n    * [Extractor Options](#extractor-options)\r\n* [CONFIGURATION](#configuration)\r\n    * [Authentication with .netrc file](#authentication-with-netrc-file)\r\n* [OUTPUT TEMPLATE](#output-template)\r\n    * [Output template and Windows batch files](#output-template-and-windows-batch-files)\r\n    * [Output template examples](#output-template-examples)\r\n* [FORMAT SELECTION](#format-selection)\r\n    * [Filtering Formats](#filtering-formats)\r\n    * [Sorting Formats](#sorting-formats)\r\n    * [Format Selection examples](#format-selection-examples)\r\n* [MODIFYING METADATA](#modifying-metadata)\r\n    * [Modifying metadata examples](#modifying-metadata-examples)\r\n* [EXTRACTOR ARGUMENTS](#extractor-arguments)\r\n* [PLUGINS](#plugins)\r\n* [EMBEDDING VIP-yt](#embedding-VIP-yt)\r\n    * [Embedding examples](#embedding-examples)\r\n* [DEPRECATED OPTIONS](#deprecated-options)\r\n* [CONTRIBUTING](CONTRIBUTING.md#contributing-to-VIP-yt)\r\n    * [Opening an Issue](CONTRIBUTING.md#opening-an-issue)\r\n    * [Developer Instructions](CONTRIBUTING.md#developer-instructions)\r\n* [MORE](#more)\r\n<!-- MANPAGE: END EXCLUDED SECTION -->\r\n\r\n\r\n# NEW FEATURES\r\n\r\n* Merged with **youtube-dl v2021.12.17+ [commit/a03b977](https://github.com/ytdl-org/youtube-dl/commit/a03b9775d544b06a5b4f2aa630214c7c22fc2229)**<!--([exceptions](https://github.com/VIP-yt/VIP-yt/issues/21))--> and **youtube-dlc v2020.11.11-3+ [commit/f9401f2](https://github.com/blackjack4494/yt-dlc/commit/f9401f2a91987068139c5f757b12fc711d4c0cee)**: You get all the features and patches of [youtube-dlc](https://github.com/blackjack4494/yt-dlc) in addition to the latest [youtube-dl](https://github.com/ytdl-org/youtube-dl)\r\n\r\n* **[SponsorBlock Integration](#sponsorblock-options)**: You can mark/remove sponsor sections in youtube videos by utilizing the [SponsorBlock](https://sponsor.ajay.app) API\r\n\r\n* **[Format Sorting](#sorting-formats)**: The default format sorting options have been changed so that higher resolution and better codecs will be now preferred instead of simply using larger bitrate. Furthermore, you can now specify the sort order using `-S`. This allows for much easier format selection than what is possible by simply using `--format` ([examples](#format-selection-examples))\r\n\r\n* **Merged with animelover1984/youtube-dl**: You get most of the features and improvements from [animelover1984/youtube-dl](https://github.com/animelover1984/youtube-dl) including `--write-comments`, `BiliBiliSearch`, `BilibiliChannel`, Embedding thumbnail in mp4/ogg/opus, playlist infojson etc. Note that the NicoNico livestreams are not available. See [#31](https://github.com/VIP-yt/VIP-yt/pull/31) for details.\r\n\r\n* **YouTube improvements**:\r\n    * Supports Clips, Stories (`ytstories:<channel UCID>`), Search (including filters)**\\***, YouTube Music Search, Channel-specific search, Search prefixes (`ytsearch:`, `ytsearchdate:`)**\\***, Mixes, YouTube Music Albums/Channels ([except self-uploaded music](https://github.com/VIP-yt/VIP-yt/issues/723)), and Feeds (`:ytfav`, `:ytwatchlater`, `:ytsubs`, `:ythistory`, `:ytrec`, `:ytnotif`)\r\n    * Fix for [n-sig based throttling](https://github.com/ytdl-org/youtube-dl/issues/29326) **\\***\r\n    * Supports some (but not all) age-gated content without cookies\r\n    * Download livestreams from the start using `--live-from-start` (*experimental*)\r\n    * `255kbps` audio is extracted (if available) from YouTube Music when premium cookies are given\r\n    * Redirect channel's home URL automatically to `/video` to preserve the old behaviour\r\n\r\n* **Cookies from browser**: Cookies can be automatically extracted from all major web browsers using `--cookies-from-browser BROWSER[+KEYRING][:PROFILE]`\r\n\r\n* **Download time range**: Videos can be downloaded partially based on either timestamps or chapters using `--download-sections`\r\n\r\n* **Split video by chapters**: Videos can be split into multiple files based on chapters using `--split-chapters`\r\n\r\n* **Multi-threaded fragment downloads**: Download multiple fragments of m3u8/mpd videos in parallel. Use `--concurrent-fragments` (`-N`) option to set the number of threads used\r\n\r\n* **Aria2c with HLS/DASH**: You can use `aria2c` as the external downloader for DASH(mpd) and HLS(m3u8) formats\r\n\r\n* **New and fixed extractors**: Many new extractors have been added and a lot of existing ones have been fixed. See the [changelog](Changelog.md) or the [list of supported sites](supportedsites.md)\r\n\r\n* **New MSOs**: Philo, Spectrum, SlingTV, Cablevision, RCN etc.\r\n\r\n* **Subtitle extraction from manifests**: Subtitles can be extracted from streaming media manifests. See [commit/be6202f](https://github.com/VIP-yt/VIP-yt/commit/be6202f12b97858b9d716e608394b51065d0419f) for details\r\n\r\n* **Multiple paths and output templates**: You can give different [output templates](#output-template) and download paths for different types of files. You can also set a temporary path where intermediary files are downloaded to using `--paths` (`-P`)\r\n\r\n* **Portable Configuration**: Configuration files are automatically loaded from the home and root directories. See [configuration](#configuration) for details\r\n\r\n* **Output template improvements**: Output templates can now have date-time formatting, numeric offsets, object traversal etc. See [output template](#output-template) for details. Even more advanced operations can also be done with the help of `--parse-metadata` and `--replace-in-metadata`\r\n\r\n* **Other new options**: Many new options have been added such as `--alias`, `--print`, `--concat-playlist`, `--wait-for-video`, `--retry-sleep`, `--sleep-requests`, `--convert-thumbnails`, `--force-download-archive`, `--force-overwrites`, `--break-on-reject` etc\r\n\r\n* **Improvements**: Regex and other operators in `--format`/`--match-filter`, multiple `--postprocessor-args` and `--downloader-args`, faster archive checking, more [format selection options](#format-selection), merge multi-video/audio, multiple `--config-locations`, `--exec` at different stages, etc\r\n\r\n* **Plugins**: Extractors and PostProcessors can be loaded from an external file. See [plugins](#plugins) for details\r\n\r\n* **Self-updater**: The releases can be updated using `VIP-yt -U`\r\n\r\nSee [changelog](Changelog.md) or [commits](https://github.com/VIP-yt/VIP-yt/commits) for the full list of changes\r\n\r\nFeatures marked with a **\\*** have been back-ported to youtube-dl\r\n\r\n### Differences in default behavior\r\n\r\nSome of VIP-yt's default options are different from that of youtube-dl and youtube-dlc:\r\n\r\n* The options `--auto-number` (`-A`), `--title` (`-t`) and `--literal` (`-l`), no longer work. See [removed options](#Removed) for details\r\n* `avconv` is not supported as an alternative to `ffmpeg`\r\n* VIP-yt stores config files in slightly different locations to youtube-dl. See [configuration](#configuration) for a list of correct locations\r\n* The default [output template](#output-template) is `%(title)s [%(id)s].%(ext)s`. There is no real reason for this change. This was changed before VIP-yt was ever made public and now there are no plans to change it back to `%(title)s-%(id)s.%(ext)s`. Instead, you may use `--compat-options filename`\r\n* The default [format sorting](#sorting-formats) is different from youtube-dl and prefers higher resolution and better codecs rather than higher bitrates. You can use the `--format-sort` option to change this to any order you prefer, or use `--compat-options format-sort` to use youtube-dl's sorting order\r\n* The default format selector is `bv*+ba/b`. This means that if a combined video + audio format that is better than the best video-only format is found, the former will be preferred. Use `-f bv+ba/b` or `--compat-options format-spec` to revert this\r\n* Unlike youtube-dlc, VIP-yt does not allow merging multiple audio/video streams into one file by default (since this conflicts with the use of `-f bv*+ba`). If needed, this feature must be enabled using `--audio-multistreams` and `--video-multistreams`. You can also use `--compat-options multistreams` to enable both\r\n* `--no-abort-on-error` is enabled by default. Use `--abort-on-error` or `--compat-options abort-on-error` to abort on errors instead\r\n* When writing metadata files such as thumbnails, description or infojson, the same information (if available) is also written for playlists. Use `--no-write-playlist-metafiles` or `--compat-options no-playlist-metafiles` to not write these files\r\n* `--add-metadata` attaches the `infojson` to `mkv` files in addition to writing the metadata when used with `--write-info-json`. Use `--no-embed-info-json` or `--compat-options no-attach-info-json` to revert this\r\n* Some metadata are embedded into different fields when using `--add-metadata` as compared to youtube-dl. Most notably, `comment` field contains the `webpage_url` and `synopsis` contains the `description`. You can [use `--parse-metadata`](#modifying-metadata) to modify this to your liking or use `--compat-options embed-metadata` to revert this\r\n* `playlist_index` behaves differently when used with options like `--playlist-reverse` and `--playlist-items`. See [#302](https://github.com/VIP-yt/VIP-yt/issues/302) for details. You can use `--compat-options playlist-index` if you want to keep the earlier behavior\r\n* The output of `-F` is listed in a new format. Use `--compat-options list-formats` to revert this\r\n* All *experiences* of a funimation episode are considered as a single video. This behavior breaks existing archives. Use `--compat-options seperate-video-versions` to extract information from only the default player\r\n* Live chats (if available) are considered as subtitles. Use `--sub-langs all,-live_chat` to download all subtitles except live chat. You can also use `--compat-options no-live-chat` to prevent any live chat/danmaku from downloading\r\n* Youtube channel URLs are automatically redirected to `/video`. Append a `/featured` to the URL to download only the videos in the home page. If the channel does not have a videos tab, we try to download the equivalent `UU` playlist instead. For all other tabs, if the channel does not show the requested tab, an error will be raised. Also, `/live` URLs raise an error if there are no live videos instead of silently downloading the entire channel. You may use `--compat-options no-youtube-channel-redirect` to revert all these redirections\r\n* Unavailable videos are also listed for youtube playlists. Use `--compat-options no-youtube-unavailable-videos` to remove this\r\n* If `ffmpeg` is used as the downloader, the downloading and merging of formats happen in a single step when possible. Use `--compat-options no-direct-merge` to revert this\r\n* Thumbnail embedding in `mp4` is done with mutagen if possible. Use `--compat-options embed-thumbnail-atomicparsley` to force the use of AtomicParsley instead\r\n* Some private fields such as filenames are removed by default from the infojson. Use `--no-clean-infojson` or `--compat-options no-clean-infojson` to revert this\r\n* When `--embed-subs` and `--write-subs` are used together, the subtitles are written to disk and also embedded in the media file. You can use just `--embed-subs` to embed the subs and automatically delete the separate file. See [#630 (comment)](https://github.com/VIP-yt/VIP-yt/issues/630#issuecomment-893659460) for more info. `--compat-options no-keep-subs` can be used to revert this\r\n* `certifi` will be used for SSL root certificates, if installed. If you want to use system certificates (e.g. self-signed), use `--compat-options no-certifi`\r\n* youtube-dl tries to remove some superfluous punctuations from filenames. While this can sometimes be helpful, it is often undesirable. So VIP-yt tries to keep the fields in the filenames as close to their original values as possible. You can use `--compat-options filename-sanitization` to revert to youtube-dl's behavior\r\n\r\nFor ease of use, a few more compat options are available:\r\n\r\n* `--compat-options all`: Use all compat options (Do NOT use)\r\n* `--compat-options youtube-dl`: Same as `--compat-options all,-multistreams`\r\n* `--compat-options youtube-dlc`: Same as `--compat-options all,-no-live-chat,-no-youtube-channel-redirect`\r\n\r\n\r\n# INSTALLATION\r\n\r\nYou can install VIP-yt using one of the following methods:\r\n\r\n### Using the release binary\r\n\r\nYou can simply download the [correct binary file](#release-files) for your OS\r\n\r\n<!-- MANPAGE: BEGIN EXCLUDED SECTION -->\r\n[![Windows](https://img.shields.io/badge/-Windows_x64-blue.svg?style=for-the-badge&logo=windows)](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt.exe)\r\n[![Linux](https://img.shields.io/badge/-Linux/BSD-red.svg?style=for-the-badge&logo=linux)](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt)\r\n[![MacOS](https://img.shields.io/badge/-MacOS-lightblue.svg?style=for-the-badge&logo=apple)](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt_macos)\r\n[![Source Tarball](https://img.shields.io/badge/-Source_tar-green.svg?style=for-the-badge)](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt.tar.gz)\r\n[![Other variants](https://img.shields.io/badge/-Other-grey.svg?style=for-the-badge)](#release-files)\r\n[![All versions](https://img.shields.io/badge/-All_Versions-lightgrey.svg?style=for-the-badge)](https://github.com/VIP-yt/VIP-yt/releases)\r\n<!-- MANPAGE: END EXCLUDED SECTION -->\r\n\r\nNote: The manpages, shell completion files etc. are available in the [source tarball](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt.tar.gz)\r\n\r\n<!-- TODO: Move to Wiki -->\r\nIn UNIX-like OSes (MacOS, Linux, BSD), you can also install the same in one of the following ways:\r\n\r\n```\r\nsudo curl -L https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt -o /usr/local/bin/VIP-yt\r\nsudo chmod a+rx /usr/local/bin/VIP-yt\r\n```\r\n\r\n```\r\nsudo wget https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt -O /usr/local/bin/VIP-yt\r\nsudo chmod a+rx /usr/local/bin/VIP-yt\r\n```\r\n\r\n```\r\nsudo aria2c https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt --dir /usr/local/bin -o VIP-yt\r\nsudo chmod a+rx /usr/local/bin/VIP-yt\r\n```\r\n\r\n\r\n### With [PIP](https://pypi.org/project/pip)\r\n\r\nYou can install the [PyPI package](https://pypi.org/project/VIP-yt) with:\r\n```\r\npython3 -m pip install -U VIP-yt\r\n```\r\n\r\nYou can install without any of the optional dependencies using:\r\n```\r\npython3 -m pip install --no-deps -U VIP-yt\r\n```\r\n\r\nIf you want to be on the cutting edge, you can also install the master branch with:\r\n```\r\npython3 -m pip install --force-reinstall https://github.com/VIP-yt/VIP-yt/archive/master.tar.gz\r\n```\r\n\r\nOn some systems, you may need to use `py` or `python` instead of `python3`\r\n\r\n<!-- TODO: Add to Wiki, Remove Taps -->\r\n### With [Homebrew](https://brew.sh)\r\n\r\nmacOS or Linux users that are using Homebrew can also install it by:\r\n\r\n```\r\nbrew install VIP-yt/taps/VIP-yt\r\n```\r\n\r\n## UPDATE\r\nYou can use `VIP-yt -U` to update if you are [using the provided release](#using-the-release-binary)\r\n\r\nIf you [installed with pip](#with-pip), simply re-run the same command that was used to install the program\r\n\r\nIf you [installed using Homebrew](#with-homebrew), run `brew upgrade VIP-yt/taps/VIP-yt`\r\n\r\n<!-- MANPAGE: BEGIN EXCLUDED SECTION -->\r\n## RELEASE FILES\r\n\r\n#### Recommended\r\n\r\nFile|Description\r\n:---|:---\r\n[VIP-yt](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt)|Platform-independent [zipimport](https://docs.python.org/3/library/zipimport.html) binary. Needs Python (recommended for **Linux/BSD**)\r\n[VIP-yt.exe](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt.exe)|Windows (Win7 SP1+) standalone x64 binary (recommended for **Windows**)\r\n[VIP-yt_macos](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt_macos)|Universal MacOS (10.15+) standalone executable (recommended for **MacOS**)\r\n\r\n#### Alternatives\r\n\r\nFile|Description\r\n:---|:---\r\n[VIP-yt_x86.exe](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt_x86.exe)|Windows (Vista SP2+) standalone x86 (32-bit) binary\r\n[VIP-yt_min.exe](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt_min.exe)|Windows (Win7 SP1+) standalone x64 binary built with `py2exe`<br/> ([Not recommended](#standalone-py2exe-builds-windows))\r\n[VIP-yt_linux](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt_linux)|Linux standalone x64 binary\r\n[VIP-yt_linux.zip](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt_linux.zip)|Unpackaged Linux executable (no auto-update)\r\n[VIP-yt_win.zip](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt_win.zip)|Unpackaged Windows executable (no auto-update)\r\n[VIP-yt_macos.zip](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt_macos.zip)|Unpackaged MacOS (10.15+) executable (no auto-update)\r\n[VIP-yt_macos_legacy](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt_macos_legacy)|MacOS (10.9+) standalone x64 executable\r\n\r\n#### Misc\r\n\r\nFile|Description\r\n:---|:---\r\n[VIP-yt.tar.gz](https://github.com/VIP-yt/VIP-yt/releases/latest/download/VIP-yt.tar.gz)|Source tarball. Also contains manpages, completions, etc\r\n[SHA2-512SUMS](https://github.com/VIP-yt/VIP-yt/releases/latest/download/SHA2-512SUMS)|GNU-style SHA512 sums\r\n[SHA2-256SUMS](https://github.com/VIP-yt/VIP-yt/releases/latest/download/SHA2-256SUMS)|GNU-style SHA256 sums\r\n<!-- MANPAGE: END EXCLUDED SECTION -->\r\n\r\n## DEPENDENCIES\r\nPython versions 3.7+ (CPython and PyPy) are supported. Other versions and implementations may or may not work correctly.\r\n\r\n<!-- Python 3.5+ uses VC++14 and it is already embedded in the binary created\r\n<!x-- https://www.microsoft.com/en-us/download/details.aspx?id=26999 --x>\r\nOn windows, [Microsoft Visual C++ 2010 SP1 Redistributable Package (x86)](https://download.microsoft.com/download/1/6/5/165255E7-1014-4D0A-B094-B6A430A6BFFC/vcredist_x86.exe) is also necessary to run VIP-yt. You probably already have this, but if the executable throws an error due to missing `MSVCR100.dll` you need to install it manually.\r\n-->\r\n\r\nWhile all the other dependencies are optional, `ffmpeg` and `ffprobe` are highly recommended\r\n\r\n### Strongly recommended\r\n\r\n* [**ffmpeg** and **ffprobe**](https://www.ffmpeg.org) - Required for [merging separate video and audio files](#format-selection) as well as for various [post-processing](#post-processing-options) tasks. License [depends on the build](https://www.ffmpeg.org/legal.html)\r\n\r\n    <!-- TODO: ffmpeg has merged this patch. Remove this note once there is new release -->\r\n    **Note**: There are some regressions in newer ffmpeg versions that causes various issues when used alongside VIP-yt. Since ffmpeg is such an important dependency, we provide [custom builds](https://github.com/VIP-yt/FFmpeg-Builds#ffmpeg-static-auto-builds) with patches for these issues at [VIP-yt/FFmpeg-Builds](https://github.com/VIP-yt/FFmpeg-Builds). See [the readme](https://github.com/VIP-yt/FFmpeg-Builds#patches-applied) for details on the specific issues solved by these builds\r\n\r\n### Networking\r\n* [**certifi**](https://github.com/certifi/python-certifi)\\* - Provides Mozilla's root certificate bundle. Licensed under [MPLv2](https://github.com/certifi/python-certifi/blob/master/LICENSE)\r\n* [**brotli**](https://github.com/google/brotli)\\* or [**brotlicffi**](https://github.com/python-hyper/brotlicffi) - [Brotli](https://en.wikipedia.org/wiki/Brotli) content encoding support. Both licensed under MIT <sup>[1](https://github.com/google/brotli/blob/master/LICENSE) [2](https://github.com/python-hyper/brotlicffi/blob/master/LICENSE) </sup>\r\n* [**websockets**](https://github.com/aaugustin/websockets)\\* - For downloading over websocket. Licensed under [BSD-3-Clause](https://github.com/aaugustin/websockets/blob/main/LICENSE)\r\n\r\n### Metadata\r\n\r\n* [**mutagen**](https://github.com/quodlibet/mutagen)\\* - For `--embed-thumbnail` in certain formats. Licensed under [GPLv2+](https://github.com/quodlibet/mutagen/blob/master/COPYING)\r\n* [**AtomicParsley**](https://github.com/wez/atomicparsley) - For `--embed-thumbnail` in `mp4`/`m4a` files when `mutagen`/`ffmpeg` cannot. Licensed under [GPLv2+](https://github.com/wez/atomicparsley/blob/master/COPYING)\r\n* [**xattr**](https://github.com/xattr/xattr), [**pyxattr**](https://github.com/iustin/pyxattr) or [**setfattr**](http://savannah.nongnu.org/projects/attr) - For writing xattr metadata (`--xattr`) on **Linux**. Licensed under [MIT](https://github.com/xattr/xattr/blob/master/LICENSE.txt), [LGPL2.1](https://github.com/iustin/pyxattr/blob/master/COPYING) and [GPLv2+](http://git.savannah.nongnu.org/cgit/attr.git/tree/doc/COPYING) respectively\r\n\r\n### Misc\r\n\r\n* [**pycryptodomex**](https://github.com/Legrandin/pycryptodome)\\* - For decrypting AES-128 HLS streams and various other data. Licensed under [BSD-2-Clause](https://github.com/Legrandin/pycryptodome/blob/master/LICENSE.rst)\r\n* [**phantomjs**](https://github.com/ariya/phantomjs) - Used in extractors where javascript needs to be run. Licensed under [BSD-3-Clause](https://github.com/ariya/phantomjs/blob/master/LICENSE.BSD)\r\n* [**secretstorage**](https://github.com/mitya57/secretstorage) - For `--cookies-from-browser` to access the **Gnome** keyring while decrypting cookies of **Chromium**-based browsers on **Linux**. Licensed under [BSD-3-Clause](https://github.com/mitya57/secretstorage/blob/master/LICENSE)\r\n* Any external downloader that you want to use with `--downloader`\r\n\r\n#### Deprecated\r\n\r\n* [**avconv** and **avprobe**](https://www.libav.org) - Now **deprecated** alternative to ffmpeg. License [depends on the build](https://libav.org/legal)\r\n* [**sponskrub**](https://github.com/faissaloo/SponSkrub) - For using the now **deprecated** [sponskrub options](#sponskrub-options). Licensed under [GPLv3+](https://github.com/faissaloo/SponSkrub/blob/master/LICENCE.md)\r\n* [**rtmpdump**](http://rtmpdump.mplayerhq.hu) - For downloading `rtmp` streams. ffmpeg can be used instead with `--downloader ffmpeg`. Licensed under [GPLv2+](http://rtmpdump.mplayerhq.hu)\r\n* [**mplayer**](http://mplayerhq.hu/design7/info.html) or [**mpv**](https://mpv.io) - For downloading `rstp`/`mms` streams. ffmpeg can be used instead with `--downloader ffmpeg`. Licensed under [GPLv2+](https://github.com/mpv-player/mpv/blob/master/Copyright)\r\n\r\nTo use or redistribute the dependencies, you must agree to their respective licensing terms.\r\n\r\nThe standalone release binaries are built with the Python interpreter and the packages marked with **\\*** included.\r\n\r\nIf you do not have the necessary dependencies for a task you are attempting, VIP-yt will warn you. All the currently available dependencies are visible at the top of the `--verbose` output\r\n\r\n\r\n## COMPILE\r\n\r\n### Standalone PyInstaller Builds\r\nTo build the Windows/MacOS executable, you must have Python and `pyinstaller` (plus any of VIP-yt's [optional dependencies](#dependencies) if needed). Once you have all the necessary dependencies installed, simply run `pyinst.py`. The executable will be built for the same architecture (32/64 bit) as the Python used.\r\n\r\n    python3 -m pip install -U pyinstaller -r requirements.txt\r\n    python3 devscripts/make_lazy_extractors.py\r\n    python3 pyinst.py\r\n\r\nOn some systems, you may need to use `py` or `python` instead of `python3`.\r\n\r\nNote that pyinstaller [does not support](https://github.com/pyinstaller/pyinstaller#requirements-and-tested-platforms) Python installed from the Windows store without using a virtual environment.\r\n\r\n**Important**: Running `pyinstaller` directly **without** using `pyinst.py` is **not** officially supported. This may or may not work correctly.\r\n\r\n### Platform-independent Binary (UNIX)\r\nYou will need the build tools `python` (3.6+), `zip`, `make` (GNU), `pandoc`\\* and `pytest`\\*.\r\n\r\nAfter installing these, simply run `make`.\r\n\r\nYou can also run `make VIP-yt` instead to compile only the binary without updating any of the additional files. (The dependencies marked with **\\*** are not needed for this)\r\n\r\n### Standalone Py2Exe Builds (Windows)\r\n\r\nWhile we provide the option to build with [py2exe](https://www.py2exe.org), it is recommended to build [using PyInstaller](#standalone-pyinstaller-builds) instead since the py2exe builds **cannot contain `pycryptodomex`/`certifi` and needs VC++14** on the target computer to run.\r\n\r\nIf you wish to build it anyway, install Python and py2exe, and then simply run `setup.py py2exe`\r\n\r\n    py -m pip install -U py2exe -r requirements.txt\r\n    py devscripts/make_lazy_extractors.py\r\n    py setup.py py2exe\r\n\r\n### Related scripts\r\n\r\n* **`devscripts/update-version.py`** - Update the version number based on current timestamp\r\n* **`devscripts/make_lazy_extractors.py`** - Create lazy extractors. Running this before building the binaries (any variant) will improve their startup performance. Set the environment variable `YTDLP_NO_LAZY_EXTRACTORS=1` if you wish to forcefully disable lazy extractor loading.\r\n\r\nYou can also fork the project on github and run your fork's [build workflow](.github/workflows/build.yml) to automatically build a full release\r\n\r\n# USAGE AND OPTIONS\r\n\r\n<!-- MANPAGE: BEGIN EXCLUDED SECTION -->\r\n    VIP-yt [OPTIONS] [--] URL [URL...]\r\n\r\n`Ctrl+F` is your friend :D\r\n<!-- MANPAGE: END EXCLUDED SECTION -->\r\n\r\n<!-- Auto generated -->\r\n## General Options:\r\n    -h, --help                      Print this help text and exit\r\n    --version                       Print program version and exit\r\n    -U, --update                    Update this program to latest version\r\n    --no-update                     Do not update (default)\r\n    -i, --ignore-errors             Ignore download and postprocessing errors.\r\n                                    The download will be considered successful\r\n                                    even if the postprocessing fails\r\n    --no-abort-on-error             Continue with next video on download errors;\r\n                                    e.g. to skip unavailable videos in a\r\n                                    playlist (default)\r\n    --abort-on-error                Abort downloading of further videos if an\r\n                                    error occurs (Alias: --no-ignore-errors)\r\n    --dump-user-agent               Display the current user-agent and exit\r\n    --list-extractors               List all supported extractors and exit\r\n    --extractor-descriptions        Output descriptions of all supported\r\n                                    extractors and exit\r\n    --force-generic-extractor       Force extraction to use the generic extractor\r\n    --default-search PREFIX         Use this prefix for unqualified URLs. Eg:\r\n                                    \"gvsearch2:python\" downloads two videos from\r\n                                    google videos for the search term \"python\".\r\n                                    Use the value \"auto\" to let VIP-yt guess\r\n                                    (\"auto_warning\" to emit a warning when\r\n                                    guessing). \"error\" just throws an error. The\r\n                                    default value \"fixup_error\" repairs broken\r\n                                    URLs, but emits an error if this is not\r\n                                    possible instead of searching\r\n    --ignore-config                 Don't load any more configuration files\r\n                                    except those given by --config-locations.\r\n                                    For backward compatibility, if this option\r\n                                    is found inside the system configuration\r\n                                    file, the user configuration is not loaded.\r\n                                    (Alias: --no-config)\r\n    --no-config-locations           Do not load any custom configuration files\r\n                                    (default). When given inside a configuration\r\n                                    file, ignore all previous --config-locations\r\n                                    defined in the current file\r\n    --config-locations PATH         Location of the main configuration file;\r\n                                    either the path to the config or its\r\n                                    containing directory (\"-\" for stdin). Can be\r\n                                    used multiple times and inside other\r\n                                    configuration files\r\n    --flat-playlist                 Do not extract the videos of a playlist,\r\n                                    only list them\r\n    --no-flat-playlist              Extract the videos of a playlist\r\n    --live-from-start               Download livestreams from the start.\r\n                                    Currently only supported for YouTube\r\n                                    (Experimental)\r\n    --no-live-from-start            Download livestreams from the current time\r\n                                    (default)\r\n    --wait-for-video MIN[-MAX]      Wait for scheduled streams to become\r\n                                    available. Pass the minimum number of\r\n                                    seconds (or range) to wait between retries\r\n    --no-wait-for-video             Do not wait for scheduled streams (default)\r\n    --mark-watched                  Mark videos watched (even with --simulate)\r\n    --no-mark-watched               Do not mark videos watched (default)\r\n    --no-colors                     Do not emit color codes in output (Alias:\r\n                                    --no-colours)\r\n    --compat-options OPTS           Options that can help keep compatibility\r\n                                    with youtube-dl or youtube-dlc\r\n                                    configurations by reverting some of the\r\n                                    changes made in VIP-yt. See \"Differences in\r\n                                    default behavior\" for details\r\n    --alias ALIASES OPTIONS         Create aliases for an option string. Unless\r\n                                    an alias starts with a dash \"-\", it is\r\n                                    prefixed with \"--\". Arguments are parsed\r\n                                    according to the Python string formatting\r\n                                    mini-language. Eg: --alias get-audio,-X\r\n                                    \"-S=aext:{0},abr -x --audio-format {0}\"\r\n                                    creates options \"--get-audio\" and \"-X\" that\r\n                                    takes an argument (ARG0) and expands to\r\n                                    \"-S=aext:ARG0,abr -x --audio-format ARG0\".\r\n                                    All defined aliases are listed in the --help\r\n                                    output. Alias options can trigger more\r\n                                    aliases; so be careful to avoid defining\r\n                                    recursive options. As a safety measure, each\r\n                                    alias may be triggered a maximum of 100\r\n                                    times. This option can be used multiple times\r\n\r\n## Network Options:\r\n    --proxy URL                     Use the specified HTTP/HTTPS/SOCKS proxy. To\r\n                                    enable SOCKS proxy, specify a proper scheme.\r\n                                    Eg: socks5://user:pass@127.0.0.1:1080/. Pass\r\n                                    in an empty string (--proxy \"\") for direct\r\n                                    connection\r\n    --socket-timeout SECONDS        Time to wait before giving up, in seconds\r\n    --source-address IP             Client-side IP address to bind to\r\n    -4, --force-ipv4                Make all connections via IPv4\r\n    -6, --force-ipv6                Make all connections via IPv6\r\n\r\n## Geo-restriction:\r\n    --geo-verification-proxy URL    Use this proxy to verify the IP address for\r\n                                    some geo-restricted sites. The default proxy\r\n                                    specified by --proxy (or none, if the option\r\n                                    is not present) is used for the actual\r\n                                    downloading\r\n    --geo-bypass                    Bypass geographic restriction via faking\r\n                                    X-Forwarded-For HTTP header (default)\r\n    --no-geo-bypass                 Do not bypass geographic restriction via\r\n                                    faking X-Forwarded-For HTTP header\r\n    --geo-bypass-country CODE       Force bypass geographic restriction with\r\n                                    explicitly provided two-letter ISO 3166-2\r\n                                    country code\r\n    --geo-bypass-ip-block IP_BLOCK  Force bypass geographic restriction with\r\n                                    explicitly provided IP block in CIDR notation\r\n\r\n## Video Selection:\r\n    -I, --playlist-items ITEM_SPEC  Comma separated playlist_index of the videos\r\n                                    to download. You can specify a range using\r\n                                    \"[START]:[STOP][:STEP]\". For backward\r\n                                    compatibility, START-STOP is also supported.\r\n                                    Use negative indices to count from the right\r\n                                    and negative STEP to download in reverse\r\n                                    order. Eg: \"-I 1:3,7,-5::2\" used on a\r\n                                    playlist of size 15 will download the videos\r\n                                    at index 1,2,3,7,11,13,15\r\n    --min-filesize SIZE             Do not download any videos smaller than SIZE\r\n                                    (e.g. 50k or 44.6m)\r\n    --max-filesize SIZE             Do not download any videos larger than SIZE\r\n                                    (e.g. 50k or 44.6m)\r\n    --date DATE                     Download only videos uploaded on this date.\r\n                                    The date can be \"YYYYMMDD\" or in the format \r\n                                    [now|today|yesterday][-N[day|week|month|year]].\r\n                                    Eg: --date today-2weeks\r\n    --datebefore DATE               Download only videos uploaded on or before\r\n                                    this date. The date formats accepted is the\r\n                                    same as --date\r\n    --dateafter DATE                Download only videos uploaded on or after\r\n                                    this date. The date formats accepted is the\r\n                                    same as --date\r\n    --match-filters FILTER          Generic video filter. Any \"OUTPUT TEMPLATE\"\r\n                                    field can be compared with a number or a\r\n                                    string using the operators defined in\r\n                                    \"Filtering formats\". You can also simply\r\n                                    specify a field to match if the field is\r\n                                    present, use \"!field\" to check if the field\r\n                                    is not present, and \"&\" to check multiple\r\n                                    conditions. Use a \"\\\" to escape \"&\" or\r\n                                    quotes if needed. If used multiple times,\r\n                                    the filter matches if atleast one of the\r\n                                    conditions are met. Eg: --match-filter\r\n                                    !is_live --match-filter \"like_count>?100 &\r\n                                    description~='(?i)\\bcats \\& dogs\\b'\" matches\r\n                                    only videos that are not live OR those that\r\n                                    have a like count more than 100 (or the like\r\n                                    field is not available) and also has a\r\n                                    description that contains the phrase \"cats &\r\n                                    dogs\" (caseless). Use \"--match-filter -\" to\r\n                                    interactively ask whether to download each\r\n                                    video\r\n    --no-match-filter               Do not use generic video filter (default)\r\n    --no-playlist                   Download only the video, if the URL refers\r\n                                    to a video and a playlist\r\n    --yes-playlist                  Download the playlist, if the URL refers to\r\n                                    a video and a playlist\r\n    --age-limit YEARS               Download only videos suitable for the given\r\n                                    age\r\n    --download-archive FILE         Download only videos not listed in the\r\n                                    archive file. Record the IDs of all\r\n                                    downloaded videos in it\r\n    --no-download-archive           Do not use archive file (default)\r\n    --max-downloads NUMBER          Abort after downloading NUMBER files\r\n    --break-on-existing             Stop the download process when encountering\r\n                                    a file that is in the archive\r\n    --break-on-reject               Stop the download process when encountering\r\n                                    a file that has been filtered out\r\n    --break-per-input               Make --break-on-existing, --break-on-reject\r\n                                    and --max-downloads act only on the current\r\n                                    input URL\r\n    --no-break-per-input            --break-on-existing and similar options\r\n                                    terminates the entire download queue\r\n    --skip-playlist-after-errors N  Number of allowed failures until the rest of\r\n                                    the playlist is skipped\r\n\r\n## Download Options:\r\n    -N, --concurrent-fragments N    Number of fragments of a dash/hlsnative\r\n                                    video that should be downloaded concurrently\r\n                                    (default is 1)\r\n    -r, --limit-rate RATE           Maximum download rate in bytes per second\r\n                                    (e.g. 50K or 4.2M)\r\n    --throttled-rate RATE           Minimum download rate in bytes per second\r\n                                    below which throttling is assumed and the\r\n                                    video data is re-extracted (e.g. 100K)\r\n    -R, --retries RETRIES           Number of retries (default is 10), or\r\n                                    \"infinite\"\r\n    --file-access-retries RETRIES   Number of times to retry on file access\r\n                                    error (default is 3), or \"infinite\"\r\n    --fragment-retries RETRIES      Number of retries for a fragment (default is\r\n                                    10), or \"infinite\" (DASH, hlsnative and ISM)\r\n    --retry-sleep [TYPE:]EXPR       An expression for the time to sleep between\r\n                                    retries in seconds (optionally) prefixed by\r\n                                    the type of retry (file_access, fragment,\r\n                                    http (default)) to apply the sleep to. EXPR\r\n                                    can be a number, linear=START[:END[:STEP=1]]\r\n                                    or exp=START[:END[:BASE=2]]. This option can\r\n                                    be used multiple times to set the sleep for\r\n                                    the different retry types. Eg: --retry-sleep\r\n                                    linear=1::2 --retry-sleep fragment:exp=1:20\r\n    --skip-unavailable-fragments    Skip unavailable fragments for DASH,\r\n                                    hlsnative and ISM downloads (default)\r\n                                    (Alias: --no-abort-on-unavailable-fragment)\r\n    --abort-on-unavailable-fragment\r\n                                    Abort download if a fragment is unavailable\r\n                                    (Alias: --no-skip-unavailable-fragments)\r\n    --keep-fragments                Keep downloaded fragments on disk after\r\n                                    downloading is finished\r\n    --no-keep-fragments             Delete downloaded fragments after\r\n                                    downloading is finished (default)\r\n    --buffer-size SIZE              Size of download buffer (e.g. 1024 or 16K)\r\n                                    (default is 1024)\r\n    --resize-buffer                 The buffer size is automatically resized\r\n                                    from an initial value of --buffer-size\r\n                                    (default)\r\n    --no-resize-buffer              Do not automatically adjust the buffer size\r\n    --http-chunk-size SIZE          Size of a chunk for chunk-based HTTP\r\n                                    downloading (e.g. 10485760 or 10M) (default\r\n                                    is disabled). May be useful for bypassing\r\n                                    bandwidth throttling imposed by a webserver\r\n                                    (experimental)\r\n    --playlist-random               Download playlist videos in random order\r\n    --lazy-playlist                 Process entries in the playlist as they are\r\n                                    received. This disables n_entries,\r\n                                    --playlist-random and --playlist-reverse\r\n    --no-lazy-playlist              Process videos in the playlist only after\r\n                                    the entire playlist is parsed (default)\r\n    --xattr-set-filesize            Set file xattribute ytdl.filesize with\r\n                                    expected file size\r\n    --hls-use-mpegts                Use the mpegts container for HLS videos;\r\n                                    allowing some players to play the video\r\n                                    while downloading, and reducing the chance\r\n                                    of file corruption if download is\r\n                                    interrupted. This is enabled by default for\r\n                                    live streams\r\n    --no-hls-use-mpegts             Do not use the mpegts container for HLS\r\n                                    videos. This is default when not downloading\r\n                                    live streams\r\n    --download-sections REGEX       Download only chapters whose title matches\r\n                                    the given regular expression. Time ranges\r\n                                    prefixed by a \"*\" can also be used in place\r\n                                    of chapters to download the specified range.\r\n                                    Eg: --download-sections \"*10:15-15:00\"\r\n                                    --download-sections \"intro\". Needs ffmpeg.\r\n                                    This option can be used multiple times to\r\n                                    download multiple sections\r\n    --downloader [PROTO:]NAME       Name or path of the external downloader to\r\n                                    use (optionally) prefixed by the protocols\r\n                                    (http, ftp, m3u8, dash, rstp, rtmp, mms) to\r\n                                    use it for. Currently supports native,\r\n                                    aria2c, avconv, axel, curl, ffmpeg, httpie,\r\n                                    wget. You can use this option multiple times\r\n                                    to set different downloaders for different\r\n                                    protocols. For example, --downloader aria2c\r\n                                    --downloader \"dash,m3u8:native\" will use\r\n                                    aria2c for http/ftp downloads, and the\r\n                                    native downloader for dash/m3u8 downloads\r\n                                    (Alias: --external-downloader)\r\n    --downloader-args NAME:ARGS     Give these arguments to the external\r\n                                    downloader. Specify the downloader name and\r\n                                    the arguments separated by a colon \":\". For\r\n                                    ffmpeg, arguments can be passed to different\r\n                                    positions using the same syntax as\r\n                                    --postprocessor-args. You can use this\r\n                                    option multiple times to give different\r\n                                    arguments to different downloaders (Alias:\r\n                                    --external-downloader-args)\r\n\r\n## Filesystem Options:\r\n    -a, --batch-file FILE           File containing URLs to download (\"-\" for\r\n                                    stdin), one URL per line. Lines starting\r\n                                    with \"#\", \";\" or \"]\" are considered as\r\n                                    comments and ignored\r\n    --no-batch-file                 Do not read URLs from batch file (default)\r\n    -P, --paths [TYPES:]PATH        The paths where the files should be\r\n                                    downloaded. Specify the type of file and the\r\n                                    path separated by a colon \":\". All the same\r\n                                    TYPES as --output are supported.\r\n                                    Additionally, you can also provide \"home\"\r\n                                    (default) and \"temp\" paths. All intermediary\r\n                                    files are first downloaded to the temp path\r\n                                    and then the final files are moved over to\r\n                                    the home path after download is finished.\r\n                                    This option is ignored if --output is an\r\n                                    absolute path\r\n    -o, --output [TYPES:]TEMPLATE   Output filename template; see \"OUTPUT\r\n                                    TEMPLATE\" for details\r\n    --output-na-placeholder TEXT    Placeholder for unavailable fields in\r\n                                    \"OUTPUT TEMPLATE\" (default: \"NA\")\r\n    --restrict-filenames            Restrict filenames to only ASCII characters,\r\n                                    and avoid \"&\" and spaces in filenames\r\n    --no-restrict-filenames         Allow Unicode characters, \"&\" and spaces in\r\n                                    filenames (default)\r\n    --windows-filenames             Force filenames to be Windows-compatible\r\n    --no-windows-filenames          Make filenames Windows-compatible only if\r\n                                    using Windows (default)\r\n    --trim-filenames LENGTH         Limit the filename length (excluding\r\n                                    extension) to the specified number of\r\n                                    characters\r\n    -w, --no-overwrites             Do not overwrite any files\r\n    --force-overwrites              Overwrite all video and metadata files. This\r\n                                    option includes --no-continue\r\n    --no-force-overwrites           Do not overwrite the video, but overwrite\r\n                                    related files (default)\r\n    -c, --continue                  Resume partially downloaded files/fragments\r\n                                    (default)\r\n    --no-continue                   Do not resume partially downloaded\r\n                                    fragments. If the file is not fragmented,\r\n                                    restart download of the entire file\r\n    --part                          Use .part files instead of writing directly\r\n                                    into output file (default)\r\n    --no-part                       Do not use .part files - write directly into\r\n                                    output file\r\n    --mtime                         Use the Last-modified header to set the file\r\n                                    modification time (default)\r\n    --no-mtime                      Do not use the Last-modified header to set\r\n                                    the file modification time\r\n    --write-description             Write video description to a .description file\r\n    --no-write-description          Do not write video description (default)\r\n    --write-info-json               Write video metadata to a .info.json file\r\n                                    (this may contain personal information)\r\n    --no-write-info-json            Do not write video metadata (default)\r\n    --write-playlist-metafiles      Write playlist metadata in addition to the\r\n                                    video metadata when using --write-info-json,\r\n                                    --write-description etc. (default)\r\n    --no-write-playlist-metafiles   Do not write playlist metadata when using\r\n                                    --write-info-json, --write-description etc.\r\n    --clean-info-json               Remove some private fields such as filenames\r\n                                    from the infojson. Note that it could still\r\n                                    contain some personal information (default)\r\n    --no-clean-info-json            Write all fields to the infojson\r\n    --write-comments                Retrieve video comments to be placed in the\r\n                                    infojson. The comments are fetched even\r\n                                    without this option if the extraction is\r\n                                    known to be quick (Alias: --get-comments)\r\n    --no-write-comments             Do not retrieve video comments unless the\r\n                                    extraction is known to be quick (Alias:\r\n                                    --no-get-comments)\r\n    --load-info-json FILE           JSON file containing the video information\r\n                                    (created with the \"--write-info-json\" option)\r\n    --cookies FILE                  Netscape formatted file to read cookies from\r\n                                    and dump cookie jar in\r\n    --no-cookies                    Do not read/dump cookies from/to file\r\n                                    (default)\r\n    --cookies-from-browser BROWSER[+KEYRING][:PROFILE]\r\n                                    The name of the browser and (optionally) the\r\n                                    name/path of the profile to load cookies\r\n                                    from, separated by a \":\". Currently\r\n                                    supported browsers are: brave, chrome,\r\n                                    chromium, edge, firefox, opera, safari,\r\n                                    vivaldi. By default, the most recently\r\n                                    accessed profile is used. The keyring used\r\n                                    for decrypting Chromium cookies on Linux can\r\n                                    be (optionally) specified after the browser\r\n                                    name separated by a \"+\". Currently supported\r\n                                    keyrings are: basictext, gnomekeyring, kwallet\r\n    --no-cookies-from-browser       Do not load cookies from browser (default)\r\n    --cache-dir DIR                 Location in the filesystem where youtube-dl\r\n                                    can store some downloaded information (such\r\n                                    as client ids and signatures) permanently.\r\n                                    By default $XDG_CACHE_HOME/VIP-yt or\r\n                                    ~/.cache/VIP-yt\r\n    --no-cache-dir                  Disable filesystem caching\r\n    --rm-cache-dir                  Delete all filesystem cache files\r\n\r\n## Thumbnail Options:\r\n    --write-thumbnail               Write thumbnail image to disk\r\n    --no-write-thumbnail            Do not write thumbnail image to disk (default)\r\n    --write-all-thumbnails          Write all thumbnail image formats to disk\r\n    --list-thumbnails               List available thumbnails of each video.\r\n                                    Simulate unless --no-simulate is used\r\n\r\n## Internet Shortcut Options:\r\n    --write-link                    Write an internet shortcut file, depending\r\n                                    on the current platform (.url, .webloc or\r\n                                    .desktop). The URL may be cached by the OS\r\n    --write-url-link                Write a .url Windows internet shortcut. The\r\n                                    OS caches the URL based on the file path\r\n    --write-webloc-link             Write a .webloc macOS internet shortcut\r\n    --write-desktop-link            Write a .desktop Linux internet shortcut\r\n\r\n## Verbosity and Simulation Options:\r\n    -q, --quiet                     Activate quiet mode. If used with --verbose,\r\n                                    print the log to stderr\r\n    --no-warnings                   Ignore warnings\r\n    -s, --simulate                  Do not download the video and do not write\r\n                                    anything to disk\r\n    --no-simulate                   Download the video even if printing/listing\r\n                                    options are used\r\n    --ignore-no-formats-error       Ignore \"No video formats\" error. Useful for\r\n                                    extracting metadata even if the videos are\r\n                                    not actually available for download\r\n                                    (experimental)\r\n    --no-ignore-no-formats-error    Throw error when no downloadable video\r\n                                    formats are found (default)\r\n    --skip-download                 Do not download the video but write all\r\n                                    related files (Alias: --no-download)\r\n    -O, --print [WHEN:]TEMPLATE     Field name or output template to print to\r\n                                    screen, optionally prefixed with when to\r\n                                    print it, separated by a \":\". Supported\r\n                                    values of \"WHEN\" are the same as that of\r\n                                    --use-postprocessor, and \"video\" (default).\r\n                                    Implies --quiet. Implies --simulate unless\r\n                                    --no-simulate or later stages of WHEN are\r\n                                    used. This option can be used multiple times\r\n    --print-to-file [WHEN:]TEMPLATE FILE\r\n                                    Append given template to the file. The\r\n                                    values of WHEN and TEMPLATE are same as that\r\n                                    of --print. FILE uses the same syntax as the\r\n                                    output template. This option can be used\r\n                                    multiple times\r\n    -j, --dump-json                 Quiet, but print JSON information for each\r\n                                    video. Simulate unless --no-simulate is\r\n                                    used. See \"OUTPUT TEMPLATE\" for a\r\n                                    description of available keys\r\n    -J, --dump-single-json          Quiet, but print JSON information for each\r\n                                    url or infojson passed. Simulate unless\r\n                                    --no-simulate is used. If the URL refers to\r\n                                    a playlist, the whole playlist information\r\n                                    is dumped in a single line\r\n    --force-write-archive           Force download archive entries to be written\r\n                                    as far as no errors occur, even if -s or\r\n                                    another simulation option is used (Alias:\r\n                                    --force-download-archive)\r\n    --newline                       Output progress bar as new lines\r\n    --no-progress                   Do not print progress bar\r\n    --progress                      Show progress bar, even if in quiet mode\r\n    --console-title                 Display progress in console titlebar\r\n    --progress-template [TYPES:]TEMPLATE\r\n                                    Template for progress outputs, optionally\r\n                                    prefixed with one of \"download:\" (default),\r\n                                    \"download-title:\" (the console title),\r\n                                    \"postprocess:\",  or \"postprocess-title:\".\r\n                                    The video's fields are accessible under the\r\n                                    \"info\" key and the progress attributes are\r\n                                    accessible under \"progress\" key. E.g.:\r\n                                    --console-title --progress-template\r\n                                    \"download-title:%(info.id)s-%(progress.eta)s\"\r\n    -v, --verbose                   Print various debugging information\r\n    --dump-pages                    Print downloaded pages encoded using base64\r\n                                    to debug problems (very verbose)\r\n    --write-pages                   Write downloaded intermediary pages to files\r\n                                    in the current directory to debug problems\r\n    --print-traffic                 Display sent and read HTTP traffic\r\n\r\n## Workarounds:\r\n    --encoding ENCODING             Force the specified encoding (experimental)\r\n    --legacy-server-connect         Explicitly allow HTTPS connection to servers\r\n                                    that do not support RFC 5746 secure\r\n                                    renegotiation\r\n    --no-check-certificates         Suppress HTTPS certificate validation\r\n    --prefer-insecure               Use an unencrypted connection to retrieve\r\n                                    information about the video (Currently\r\n                                    supported only for YouTube)\r\n    --add-header FIELD:VALUE        Specify a custom HTTP header and its value,\r\n                                    separated by a colon \":\". You can use this\r\n                                    option multiple times\r\n    --bidi-workaround               Work around terminals that lack\r\n                                    bidirectional text support. Requires bidiv\r\n                                    or fribidi executable in PATH\r\n    --sleep-requests SECONDS        Number of seconds to sleep between requests\r\n                                    during data extraction\r\n    --sleep-interval SECONDS        Number of seconds to sleep before each\r\n                                    download. This is the minimum time to sleep\r\n                                    when used along with --max-sleep-interval\r\n                                    (Alias: --min-sleep-interval)\r\n    --max-sleep-interval SECONDS    Maximum number of seconds to sleep. Can only\r\n                                    be used along with --min-sleep-interval\r\n    --sleep-subtitles SECONDS       Number of seconds to sleep before each\r\n                                    subtitle download\r\n\r\n## Video Format Options:\r\n    -f, --format FORMAT             Video format code, see \"FORMAT SELECTION\"\r\n                                    for more details\r\n    -S, --format-sort SORTORDER     Sort the formats by the fields given, see\r\n                                    \"Sorting Formats\" for more details\r\n    --format-sort-force             Force user specified sort order to have\r\n                                    precedence over all fields, see \"Sorting\r\n                                    Formats\" for more details (Alias: --S-force)\r\n    --no-format-sort-force          Some fields have precedence over the user\r\n                                    specified sort order (default)\r\n    --video-multistreams            Allow multiple video streams to be merged\r\n                                    into a single file\r\n    --no-video-multistreams         Only one video stream is downloaded for each\r\n                                    output file (default)\r\n    --audio-multistreams            Allow multiple audio streams to be merged\r\n                                    into a single file\r\n    --no-audio-multistreams         Only one audio stream is downloaded for each\r\n                                    output file (default)\r\n    --prefer-free-formats           Prefer video formats with free containers\r\n                                    over non-free ones of same quality. Use with\r\n                                    \"-S ext\" to strictly prefer free containers\r\n                                    irrespective of quality\r\n    --no-prefer-free-formats        Don't give any special preference to free\r\n                                    containers (default)\r\n    --check-formats                 Make sure formats are selected only from\r\n                                    those that are actually downloadable\r\n    --check-all-formats             Check all formats for whether they are\r\n                                    actually downloadable\r\n    --no-check-formats              Do not check that the formats are actually\r\n                                    downloadable\r\n    -F, --list-formats              List available formats of each video.\r\n                                    Simulate unless --no-simulate is used\r\n    --merge-output-format FORMAT    If a merge is required (e.g.\r\n                                    bestvideo+bestaudio), output to given\r\n                                    container format. One of mkv, mp4, ogg,\r\n                                    webm, flv. Ignored if no merge is required\r\n\r\n## Subtitle Options:\r\n    --write-subs                    Write subtitle file\r\n    --no-write-subs                 Do not write subtitle file (default)\r\n    --write-auto-subs               Write automatically generated subtitle file\r\n                                    (Alias: --write-automatic-subs)\r\n    --no-write-auto-subs            Do not write auto-generated subtitles\r\n                                    (default) (Alias: --no-write-automatic-subs)\r\n    --list-subs                     List available subtitles of each video.\r\n                                    Simulate unless --no-simulate is used\r\n    --sub-format FORMAT             Subtitle format; accepts formats preference,\r\n                                    Eg: \"srt\" or \"ass/srt/best\"\r\n    --sub-langs LANGS               Languages of the subtitles to download (can\r\n                                    be regex) or \"all\" separated by commas. (Eg:\r\n                                    --sub-langs \"en.*,ja\") You can prefix the\r\n                                    language code with a \"-\" to exclude it from\r\n                                    the requested languages. (Eg: --sub-langs\r\n                                    all,-live_chat) Use --list-subs for a list\r\n                                    of available language tags\r\n\r\n## Authentication Options:\r\n    -u, --username USERNAME         Login with this account ID\r\n    -p, --password PASSWORD         Account password. If this option is left\r\n                                    out, VIP-yt will ask interactively\r\n    -2, --twofactor TWOFACTOR       Two-factor authentication code\r\n    -n, --netrc                     Use .netrc authentication data\r\n    --netrc-location PATH           Location of .netrc authentication data;\r\n                                    either the path or its containing directory.\r\n                                    Defaults to ~/.netrc\r\n    --video-password PASSWORD       Video password (vimeo, youku)\r\n    --ap-mso MSO                    Adobe Pass multiple-system operator (TV\r\n                                    provider) identifier, use --ap-list-mso for\r\n                                    a list of available MSOs\r\n    --ap-username USERNAME          Multiple-system operator account login\r\n    --ap-password PASSWORD          Multiple-system operator account password.\r\n                                    If this option is left out, VIP-yt will ask\r\n                                    interactively\r\n    --ap-list-mso                   List all supported multiple-system operators\r\n    --client-certificate CERTFILE   Path to client certificate file in PEM\r\n                                    format. May include the private key\r\n    --client-certificate-key KEYFILE\r\n                                    Path to private key file for client\r\n                                    certificate\r\n    --client-certificate-password PASSWORD\r\n                                    Password for client certificate private key,\r\n                                    if encrypted. If not provided, and the key\r\n                                    is encrypted, VIP-yt will ask interactively\r\n\r\n## Post-Processing Options:\r\n    -x, --extract-audio             Convert video files to audio-only files\r\n                                    (requires ffmpeg and ffprobe)\r\n    --audio-format FORMAT           Format to convert the audio to when -x is\r\n                                    used. (currently supported: best (default),\r\n                                    mp3, aac, m4a, opus, vorbis, flac, alac,\r\n                                    wav). You can specify multiple rules using\r\n                                    similar syntax as --remux-video\r\n    --audio-quality QUALITY         Specify ffmpeg audio quality to use when\r\n                                    converting the audio with -x. Insert a value\r\n                                    between 0 (best) and 10 (worst) for VBR or a\r\n                                    specific bitrate like 128K (default 5)\r\n    --remux-video FORMAT            Remux the video into another container if\r\n                                    necessary (currently supported: mp4, mkv,\r\n                                    flv, webm, mov, avi, mka, ogg, mp3, aac,\r\n                                    m4a, opus, vorbis, flac, alac, wav). If\r\n                                    target container does not support the\r\n                                    video/audio codec, remuxing will fail. You\r\n                                    can specify multiple rules; Eg.\r\n                                    \"aac>m4a/mov>mp4/mkv\" will remux aac to m4a,\r\n                                    mov to mp4 and anything else to mkv\r\n    --recode-video FORMAT           Re-encode the video into another format if\r\n                                    necessary. The syntax and supported formats\r\n                                    are the same as --remux-video\r\n    --postprocessor-args NAME:ARGS  Give these arguments to the postprocessors.\r\n                                    Specify the postprocessor/executable name\r\n                                    and the arguments separated by a colon \":\"\r\n                                    to give the argument to the specified\r\n                                    postprocessor/executable. Supported PP are:\r\n                                    Merger, ModifyChapters, SplitChapters,\r\n                                    ExtractAudio, VideoRemuxer, VideoConvertor,\r\n                                    Metadata, EmbedSubtitle, EmbedThumbnail,\r\n                                    SubtitlesConvertor, ThumbnailsConvertor,\r\n                                    FixupStretched, FixupM4a, FixupM3u8,\r\n                                    FixupTimestamp and FixupDuration. The\r\n                                    supported executables are: AtomicParsley,\r\n                                    FFmpeg and FFprobe. You can also specify\r\n                                    \"PP+EXE:ARGS\" to give the arguments to the\r\n                                    specified executable only when being used by\r\n                                    the specified postprocessor. Additionally,\r\n                                    for ffmpeg/ffprobe, \"_i\"/\"_o\" can be\r\n                                    appended to the prefix optionally followed\r\n                                    by a number to pass the argument before the\r\n                                    specified input/output file. Eg: --ppa\r\n                                    \"Merger+ffmpeg_i1:-v quiet\". You can use\r\n                                    this option multiple times to give different\r\n                                    arguments to different postprocessors.\r\n                                    (Alias: --ppa)\r\n    -k, --keep-video                Keep the intermediate video file on disk\r\n                                    after post-processing\r\n    --no-keep-video                 Delete the intermediate video file after\r\n                                    post-processing (default)\r\n    --post-overwrites               Overwrite post-processed files (default)\r\n    --no-post-overwrites            Do not overwrite post-processed files\r\n    --embed-subs                    Embed subtitles in the video (only for mp4,\r\n                                    webm and mkv videos)\r\n    --no-embed-subs                 Do not embed subtitles (default)\r\n    --embed-thumbnail               Embed thumbnail in the video as cover art\r\n    --no-embed-thumbnail            Do not embed thumbnail (default)\r\n    --embed-metadata                Embed metadata to the video file. Also\r\n                                    embeds chapters/infojson if present unless\r\n                                    --no-embed-chapters/--no-embed-info-json are\r\n                                    used (Alias: --add-metadata)\r\n    --no-embed-metadata             Do not add metadata to file (default)\r\n                                    (Alias: --no-add-metadata)\r\n    --embed-chapters                Add chapter markers to the video file\r\n                                    (Alias: --add-chapters)\r\n    --no-embed-chapters             Do not add chapter markers (default) (Alias:\r\n                                    --no-add-chapters)\r\n    --embed-info-json               Embed the infojson as an attachment to\r\n                                    mkv/mka video files\r\n    --no-embed-info-json            Do not embed the infojson as an attachment\r\n                                    to the video file\r\n    --parse-metadata FROM:TO        Parse additional metadata like title/artist\r\n                                    from other fields; see \"MODIFYING METADATA\"\r\n                                    for details\r\n    --replace-in-metadata FIELDS REGEX REPLACE\r\n                                    Replace text in a metadata field using the\r\n                                    given regex. This option can be used\r\n                                    multiple times\r\n    --xattrs                        Write metadata to the video file's xattrs\r\n                                    (using dublin core and xdg standards)\r\n    --concat-playlist POLICY        Concatenate videos in a playlist. One of\r\n                                    \"never\", \"always\", or \"multi_video\"\r\n                                    (default; only when the videos form a single\r\n                                    show). All the video files must have same\r\n                                    codecs and number of streams to be\r\n                                    concatable. The \"pl_video:\" prefix can be\r\n                                    used with \"--paths\" and \"--output\" to set\r\n                                    the output filename for the concatenated\r\n                                    files. See \"OUTPUT TEMPLATE\" for details\r\n    --fixup POLICY                  Automatically correct known faults of the\r\n                                    file. One of never (do nothing), warn (only\r\n                                    emit a warning), detect_or_warn (the\r\n                                    default; fix file if we can, warn\r\n                                    otherwise), force (try fixing even if file\r\n                                    already exists)\r\n    --ffmpeg-location PATH          Location of the ffmpeg binary; either the\r\n                                    path to the binary or its containing directory\r\n    --exec [WHEN:]CMD               Execute a command, optionally prefixed with\r\n                                    when to execute it (after_move if\r\n                                    unspecified), separated by a \":\". Supported\r\n                                    values of \"WHEN\" are the same as that of\r\n                                    --use-postprocessor. Same syntax as the\r\n                                    output template can be used to pass any\r\n                                    field as arguments to the command. After\r\n                                    download, an additional field \"filepath\"\r\n                                    that contains the final path of the\r\n                                    downloaded file is also available, and if no\r\n                                    fields are passed, %(filepath)q is appended\r\n                                    to the end of the command. This option can\r\n                                    be used multiple times\r\n    --no-exec                       Remove any previously defined --exec\r\n    --convert-subs FORMAT           Convert the subtitles to another format\r\n                                    (currently supported: srt, vtt, ass, lrc)\r\n                                    (Alias: --convert-subtitles)\r\n    --convert-thumbnails FORMAT     Convert the thumbnails to another format\r\n                                    (currently supported: jpg, png, webp). You\r\n                                    can specify multiple rules using similar\r\n                                    syntax as --remux-video\r\n    --split-chapters                Split video into multiple files based on\r\n                                    internal chapters. The \"chapter:\" prefix can\r\n                                    be used with \"--paths\" and \"--output\" to set\r\n                                    the output filename for the split files. See\r\n                                    \"OUTPUT TEMPLATE\" for details\r\n    --no-split-chapters             Do not split video based on chapters (default)\r\n    --remove-chapters REGEX         Remove chapters whose title matches the\r\n                                    given regular expression. The syntax is the\r\n                                    same as --download-sections. This option can\r\n                                    be used multiple times\r\n    --no-remove-chapters            Do not remove any chapters from the file\r\n                                    (default)\r\n    --force-keyframes-at-cuts       Force keyframes at cuts when\r\n                                    downloading/splitting/removing sections.\r\n                                    This is slow due to needing a re-encode, but\r\n                                    the resulting video may have fewer artifacts\r\n                                    around the cuts\r\n    --no-force-keyframes-at-cuts    Do not force keyframes around the chapters\r\n                                    when cutting/splitting (default)\r\n    --use-postprocessor NAME[:ARGS]\r\n                                    The (case sensitive) name of plugin\r\n                                    postprocessors to be enabled, and\r\n                                    (optionally) arguments to be passed to it,\r\n                                    separated by a colon \":\". ARGS are a\r\n                                    semicolon \";\" delimited list of NAME=VALUE.\r\n                                    The \"when\" argument determines when the\r\n                                    postprocessor is invoked. It can be one of\r\n                                    \"pre_process\" (after video extraction),\r\n                                    \"after_filter\" (after video passes filter),\r\n                                    \"before_dl\" (before each video download),\r\n                                    \"post_process\" (after each video download;\r\n                                    default), \"after_move\" (after moving video\r\n                                    file to it's final locations), \"after_video\"\r\n                                    (after downloading and processing all\r\n                                    formats of a video), or \"playlist\" (at end\r\n                                    of playlist). This option can be used\r\n                                    multiple times to add different postprocessors\r\n\r\n## SponsorBlock Options:\r\nMake chapter entries for, or remove various segments (sponsor,\r\n    introductions, etc.) from downloaded YouTube videos using the\r\n    [SponsorBlock API](https://sponsor.ajay.app)\r\n\r\n    --sponsorblock-mark CATS        SponsorBlock categories to create chapters\r\n                                    for, separated by commas. Available\r\n                                    categories are sponsor, intro, outro,\r\n                                    selfpromo, preview, filler, interaction,\r\n                                    music_offtopic, poi_highlight, all and\r\n                                    default (=all). You can prefix the category\r\n                                    with a \"-\" to exclude it. See [1] for\r\n                                    description of the categories. Eg:\r\n                                    --sponsorblock-mark all,-preview\r\n                                    [1] https://wiki.sponsor.ajay.app/w/Segment_Categories\r\n    --sponsorblock-remove CATS      SponsorBlock categories to be removed from\r\n                                    the video file, separated by commas. If a\r\n                                    category is present in both mark and remove,\r\n                                    remove takes precedence. The syntax and\r\n                                    available categories are the same as for\r\n                                    --sponsorblock-mark except that \"default\"\r\n                                    refers to \"all,-filler\" and poi_highlight is\r\n                                    not available\r\n    --sponsorblock-chapter-title TEMPLATE\r\n                                    An output template for the title of the\r\n                                    SponsorBlock chapters created by\r\n                                    --sponsorblock-mark. The only available\r\n                                    fields are start_time, end_time, category,\r\n                                    categories, name, category_names. Defaults\r\n                                    to \"[SponsorBlock]: %(category_names)l\"\r\n    --no-sponsorblock               Disable both --sponsorblock-mark and\r\n                                    --sponsorblock-remove\r\n    --sponsorblock-api URL          SponsorBlock API location, defaults to\r\n                                    https://sponsor.ajay.app\r\n\r\n## Extractor Options:\r\n    --extractor-retries RETRIES     Number of retries for known extractor errors\r\n                                    (default is 3), or \"infinite\"\r\n    --allow-dynamic-mpd             Process dynamic DASH manifests (default)\r\n                                    (Alias: --no-ignore-dynamic-mpd)\r\n    --ignore-dynamic-mpd            Do not process dynamic DASH manifests\r\n                                    (Alias: --no-allow-dynamic-mpd)\r\n    --hls-split-discontinuity       Split HLS playlists to different formats at\r\n                                    discontinuities such as ad breaks\r\n    --no-hls-split-discontinuity    Do not split HLS playlists to different\r\n                                    formats at discontinuities such as ad breaks\r\n                                    (default)\r\n    --extractor-args KEY:ARGS       Pass these arguments to the extractor. See\r\n                                    \"EXTRACTOR ARGUMENTS\" for details. You can\r\n                                    use this option multiple times to give\r\n                                    arguments for different extractors\r\n\r\n# CONFIGURATION\r\n\r\nYou can configure VIP-yt by placing any supported command line option to a configuration file. The configuration is loaded from the following locations:\r\n\r\n1. **Main Configuration**: The file given by `--config-location`\r\n1. **Portable Configuration**: `VIP-yt.conf` in the same directory as the bundled binary. If you are running from source-code (`<root dir>/VIP_yt/__main__.py`), the root directory is used instead.\r\n1. **Home Configuration**: `VIP-yt.conf` in the home path given by `-P`, or in the current directory if no such path is given\r\n1. **User Configuration**:\r\n    * `%XDG_CONFIG_HOME%/VIP-yt/config` (recommended on Linux/macOS)\r\n    * `%XDG_CONFIG_HOME%/VIP-yt.conf`\r\n    * `%APPDATA%/VIP-yt/config` (recommended on Windows)\r\n    * `%APPDATA%/VIP-yt/config.txt`\r\n    * `~/VIP-yt.conf`\r\n    * `~/VIP-yt.conf.txt`\r\n    \r\n    `%XDG_CONFIG_HOME%` defaults to `~/.config` if undefined. On windows, `%APPDATA%` generally points to `C:\\Users\\<user name>\\AppData\\Roaming` and `~` points to `%HOME%` if present, `%USERPROFILE%` (generally `C:\\Users\\<user name>`), or `%HOMEDRIVE%%HOMEPATH%`\r\n\r\n1. **System Configuration**: `/etc/VIP-yt.conf`\r\n\r\nFor example, with the following configuration file VIP-yt will always extract the audio, not copy the mtime, use a proxy and save all videos under `YouTube` directory in your home directory:\r\n```\r\n# Lines starting with # are comments\r\n\r\n# Always extract audio\r\n-x\r\n\r\n# Do not copy the mtime\r\n--no-mtime\r\n\r\n# Use this proxy\r\n--proxy 127.0.0.1:3128\r\n\r\n# Save all videos under YouTube directory in your home directory\r\n-o ~/YouTube/%(title)s.%(ext)s\r\n```\r\n\r\nNote that options in configuration file are just the same options aka switches used in regular command line calls; thus there **must be no whitespace** after `-` or `--`, e.g. `-o` or `--proxy` but not `- o` or `-- proxy`.\r\n\r\nYou can use `--ignore-config` if you want to disable all configuration files for a particular VIP-yt run. If `--ignore-config` is found inside any configuration file, no further configuration will be loaded. For example, having the option in the portable configuration file prevents loading of home, user, and system configurations. Additionally, (for backward compatibility) if `--ignore-config` is found inside the system configuration file, the user configuration is not loaded.\r\n\r\n### Config file encoding\r\n\r\nThe config files are decoded according to the UTF BOM if present, and in the encoding from system locale otherwise.\r\n\r\nIf you want your file to be decoded differently, add `# coding: ENCODING` to the beginning of the file (e.g. `# coding: shift-jis`). There must be no characters before that, even spaces or BOM.\r\n\r\n### Authentication with `.netrc` file\r\n\r\nYou may also want to configure automatic credentials storage for extractors that support authentication (by providing login and password with `--username` and `--password`) in order not to pass credentials as command line arguments on every VIP-yt execution and prevent tracking plain text passwords in the shell command history. You can achieve this using a [`.netrc` file](https://stackoverflow.com/tags/.netrc/info) on a per extractor basis. For that you will need to create a `.netrc` file in `--netrc-location` and restrict permissions to read/write by only you:\r\n```\r\ntouch $HOME/.netrc\r\nchmod a-rwx,u+rw $HOME/.netrc\r\n```\r\nAfter that you can add credentials for an extractor in the following format, where *extractor* is the name of the extractor in lowercase:\r\n```\r\nmachine <extractor> login <username> password <password>\r\n```\r\nFor example:\r\n```\r\nmachine youtube login myaccount@gmail.com password my_youtube_password\r\nmachine twitch login my_twitch_account_name password my_twitch_password\r\n```\r\nTo activate authentication with the `.netrc` file you should pass `--netrc` to VIP-yt or place it in the [configuration file](#configuration).\r\n\r\nThe default location of the .netrc file is `$HOME` (`~`) in UNIX. On Windows, it is `%HOME%` if present, `%USERPROFILE%` (generally `C:\\Users\\<user name>`) or `%HOMEDRIVE%%HOMEPATH%`\r\n\r\n# OUTPUT TEMPLATE\r\n\r\nThe `-o` option is used to indicate a template for the output file names while `-P` option is used to specify the path each type of file should be saved to.\r\n\r\n<!-- MANPAGE: BEGIN EXCLUDED SECTION -->\r\n**tl;dr:** [navigate me to examples](#output-template-examples).\r\n<!-- MANPAGE: END EXCLUDED SECTION -->\r\n\r\nThe simplest usage of `-o` is not to set any template arguments when downloading a single file, like in `VIP-yt -o funny_video.flv \"https://some/video\"` (hard-coding file extension like this is _not_ recommended and could break some post-processing).\r\n\r\nIt may however also contain special sequences that will be replaced when downloading each video. The special sequences may be formatted according to [Python string formatting operations](https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting). For example, `%(NAME)s` or `%(NAME)05d`. To clarify, that is a percent symbol followed by a name in parentheses, followed by formatting operations.\r\n\r\nThe field names themselves (the part inside the parenthesis) can also have some special formatting:\r\n\r\n1. **Object traversal**: The dictionaries and lists available in metadata can be traversed by using a `.` (dot) separator. You can also do python slicing using `:`. Eg: `%(tags.0)s`, `%(subtitles.en.-1.ext)s`, `%(id.3:7:-1)s`, `%(formats.:.format_id)s`. `%()s` refers to the entire infodict. Note that all the fields that become available using this method are not listed below. Use `-j` to see such fields\r\n\r\n1. **Addition**: Addition and subtraction of numeric fields can be done using `+` and `-` respectively. Eg: `%(playlist_index+10)03d`, `%(n_entries+1-playlist_index)d`\r\n\r\n1. **Date/time Formatting**: Date/time fields can be formatted according to [strftime formatting](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes) by specifying it separated from the field name using a `>`. Eg: `%(duration>%H-%M-%S)s`, `%(upload_date>%Y-%m-%d)s`, `%(epoch-3600>%H-%M-%S)s`\r\n\r\n1. **Alternatives**: Alternate fields can be specified separated with a `,`. Eg: `%(release_date>%Y,upload_date>%Y|Unknown)s`\r\n\r\n1. **Replacement**: A replacement value can specified using a `&` separator. If the field is *not* empty, this replacement value will be used instead of the actual field content. This is done after alternate fields are considered; thus the replacement is used if *any* of the alternative fields is *not* empty.\r\n\r\n1. **Default**: A literal default value can be specified for when the field is empty using a `|` separator. This overrides `--output-na-template`. Eg: `%(uploader|Unknown)s`\r\n\r\n1. **More Conversions**: In addition to the normal format types `diouxXeEfFgGcrs`, VIP-yt additionally supports converting to `B` = **B**ytes, `j` = **j**son (flag `#` for pretty-printing), `h` = HTML escaping, `l` = a comma separated **l**ist (flag `#` for `\\n` newline-separated), `q` = a string **q**uoted for the terminal (flag `#` to split a list into different arguments), `D` = add **D**ecimal suffixes (Eg: 10M) (flag `#` to use 1024 as factor), and `S` = **S**anitize as filename (flag `#` for restricted)\r\n\r\n1. **Unicode normalization**: The format type `U` can be used for NFC [unicode normalization](https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize). The alternate form flag (`#`) changes the normalization to NFD and the conversion flag `+` can be used for NFKC/NFKD compatibility equivalence normalization. Eg: `%(title)+.100U` is NFKC\r\n\r\nTo summarize, the general syntax for a field is:\r\n```\r\n%(name[.keys][addition][>strf][,alternate][&replacement][|default])[flags][width][.precision][length]type\r\n```\r\n\r\nAdditionally, you can set different output templates for the various metadata files separately from the general output template by specifying the type of file followed by the template separated by a colon `:`. The different file types supported are `subtitle`, `thumbnail`, `description`, `annotation` (deprecated), `infojson`, `link`, `pl_thumbnail`, `pl_description`, `pl_infojson`, `chapter`, `pl_video`. For example, `-o \"%(title)s.%(ext)s\" -o \"thumbnail:%(title)s\\%(title)s.%(ext)s\"`  will put the thumbnails in a folder with the same name as the video. If any of the templates is empty, that type of file will not be written. Eg: `--write-thumbnail -o \"thumbnail:\"` will write thumbnails only for playlists and not for video.\r\n\r\nThe available fields are:\r\n\r\n - `id` (string): Video identifier\r\n - `title` (string): Video title\r\n - `fulltitle` (string): Video title ignoring live timestamp and generic title\r\n - `url` (string): Video URL\r\n - `ext` (string): Video filename extension\r\n - `alt_title` (string): A secondary title of the video\r\n - `description` (string): The description of the video\r\n - `display_id` (string): An alternative identifier for the video\r\n - `uploader` (string): Full name of the video uploader\r\n - `license` (string): License name the video is licensed under\r\n - `creator` (string): The creator of the video\r\n - `timestamp` (numeric): UNIX timestamp of the moment the video became available\r\n - `upload_date` (string): Video upload date in UTC (YYYYMMDD)\r\n - `release_timestamp` (numeric): UNIX timestamp of the moment the video was released\r\n - `release_date` (string): The date (YYYYMMDD) when the video was released in UTC\r\n - `modified_timestamp` (numeric): UNIX timestamp of the moment the video was last modified\r\n - `modified_date` (string): The date (YYYYMMDD) when the video was last modified in UTC\r\n - `uploader_id` (string): Nickname or id of the video uploader\r\n - `channel` (string): Full name of the channel the video is uploaded on\r\n - `channel_id` (string): Id of the channel\r\n - `channel_follower_count` (numeric): Number of followers of the channel\r\n - `location` (string): Physical location where the video was filmed\r\n - `duration` (numeric): Length of the video in seconds\r\n - `duration_string` (string): Length of the video (HH:mm:ss)\r\n - `view_count` (numeric): How many users have watched the video on the platform\r\n - `like_count` (numeric): Number of positive ratings of the video\r\n - `dislike_count` (numeric): Number of negative ratings of the video\r\n - `repost_count` (numeric): Number of reposts of the video\r\n - `average_rating` (numeric): Average rating give by users, the scale used depends on the webpage\r\n - `comment_count` (numeric): Number of comments on the video (For some extractors, comments are only downloaded at the end, and so this field cannot be used)\r\n - `age_limit` (numeric): Age restriction for the video (years)\r\n - `live_status` (string): One of \"is_live\", \"was_live\", \"is_upcoming\", \"not_live\"\r\n - `is_live` (boolean): Whether this video is a live stream or a fixed-length video\r\n - `was_live` (boolean): Whether this video was originally a live stream\r\n - `playable_in_embed` (string): Whether this video is allowed to play in embedded players on other sites\r\n - `availability` (string): Whether the video is \"private\", \"premium_only\", \"subscriber_only\", \"needs_auth\", \"unlisted\" or \"public\"\r\n - `start_time` (numeric): Time in seconds where the reproduction should start, as specified in the URL\r\n - `end_time` (numeric): Time in seconds where the reproduction should end, as specified in the URL\r\n - `format` (string): A human-readable description of the format\r\n - `format_id` (string): Format code specified by `--format`\r\n - `format_note` (string): Additional info about the format\r\n - `width` (numeric): Width of the video\r\n - `height` (numeric): Height of the video\r\n - `resolution` (string): Textual description of width and height\r\n - `tbr` (numeric): Average bitrate of audio and video in KBit/s\r\n - `abr` (numeric): Average audio bitrate in KBit/s\r\n - `acodec` (string): Name of the audio codec in use\r\n - `asr` (numeric): Audio sampling rate in Hertz\r\n - `vbr` (numeric): Average video bitrate in KBit/s\r\n - `fps` (numeric): Frame rate\r\n - `dynamic_range` (string): The dynamic range of the video\r\n - `stretched_ratio` (float): `width:height` of the video's pixels, if not square\r\n - `vcodec` (string): Name of the video codec in use\r\n - `container` (string): Name of the container format\r\n - `filesize` (numeric): The number of bytes, if known in advance\r\n - `filesize_approx` (numeric): An estimate for the number of bytes\r\n - `protocol` (string): The protocol that will be used for the actual download\r\n - `extractor` (string): Name of the extractor\r\n - `extractor_key` (string): Key name of the extractor\r\n - `epoch` (numeric): Unix epoch of when the information extraction was completed\r\n - `autonumber` (numeric): Number that will be increased with each download, starting at `--autonumber-start`\r\n - `video_autonumber` (numeric): Number that will be increased with each video\r\n - `n_entries` (numeric): Total number of extracted items in the playlist\r\n - `playlist_id` (string): Identifier of the playlist that contains the video\r\n - `playlist_title` (string): Name of the playlist that contains the video\r\n - `playlist` (string): `playlist_id` or `playlist_title`\r\n - `playlist_count` (numeric): Total number of items in the playlist. May not be known if entire playlist is not extracted\r\n - `playlist_index` (numeric): Index of the video in the playlist padded with leading zeros according the final index\r\n - `playlist_autonumber` (numeric): Position of the video in the playlist download queue padded with leading zeros according to the total length of the playlist\r\n - `playlist_uploader` (string): Full name of the playlist uploader\r\n - `playlist_uploader_id` (string): Nickname or id of the playlist uploader\r\n - `webpage_url` (string): A URL to the video webpage which if given to VIP-yt should allow to get the same result again\r\n - `webpage_url_basename` (string): The basename of the webpage URL\r\n - `webpage_url_domain` (string): The domain of the webpage URL\r\n - `original_url` (string): The URL given by the user (or same as `webpage_url` for playlist entries)\r\n\r\nAvailable for the video that belongs to some logical chapter or section:\r\n\r\n - `chapter` (string): Name or title of the chapter the video belongs to\r\n - `chapter_number` (numeric): Number of the chapter the video belongs to\r\n - `chapter_id` (string): Id of the chapter the video belongs to\r\n\r\nAvailable for the video that is an episode of some series or programme:\r\n\r\n - `series` (string): Title of the series or programme the video episode belongs to\r\n - `season` (string): Title of the season the video episode belongs to\r\n - `season_number` (numeric): Number of the season the video episode belongs to\r\n - `season_id` (string): Id of the season the video episode belongs to\r\n - `episode` (string): Title of the video episode\r\n - `episode_number` (numeric): Number of the video episode within a season\r\n - `episode_id` (string): Id of the video episode\r\n\r\nAvailable for the media that is a track or a part of a music album:\r\n\r\n - `track` (string): Title of the track\r\n - `track_number` (numeric): Number of the track within an album or a disc\r\n - `track_id` (string): Id of the track\r\n - `artist` (string): Artist(s) of the track\r\n - `genre` (string): Genre(s) of the track\r\n - `album` (string): Title of the album the track belongs to\r\n - `album_type` (string): Type of the album\r\n - `album_artist` (string): List of all artists appeared on the album\r\n - `disc_number` (numeric): Number of the disc or other physical medium the track belongs to\r\n - `release_year` (numeric): Year (YYYY) when the album was released\r\n\r\nAvailable only when using `--download-sections` and for `chapter:` prefix when using `--split-chapters` for videos with internal chapters:\r\n\r\n - `section_title` (string): Title of the chapter\r\n - `section_number` (numeric): Number of the chapter within the file\r\n - `section_start` (numeric): Start time of the chapter in seconds\r\n - `section_end` (numeric): End time of the chapter in seconds\r\n\r\nAvailable only when used in `--print`:\r\n\r\n - `urls` (string): The URLs of all requested formats, one in each line\r\n - `filename` (string): Name of the video file. Note that the actual filename may be different due to post-processing. Use `--exec echo` to get the name after all postprocessing is complete\r\n - `formats_table` (table): The video format table as printed by `--list-formats`\r\n - `thumbnails_table` (table): The thumbnail format table as printed by `--list-thumbnails`\r\n - `subtitles_table` (table): The subtitle format table as printed by `--list-subs`\r\n - `automatic_captions_table` (table): The automatic subtitle format table as printed by `--list-subs`\r\n \r\n \r\nAvailable only in `--sponsorblock-chapter-title`:\r\n\r\n - `start_time` (numeric): Start time of the chapter in seconds\r\n - `end_time` (numeric): End time of the chapter in seconds\r\n - `categories` (list): The SponsorBlock categories the chapter belongs to\r\n - `category` (string): The smallest SponsorBlock category the chapter belongs to\r\n - `category_names` (list): Friendly names of the categories\r\n - `name` (string): Friendly name of the smallest category\r\n\r\nEach aforementioned sequence when referenced in an output template will be replaced by the actual value corresponding to the sequence name. For example for `-o %(title)s-%(id)s.%(ext)s` and an mp4 video with title `VIP-yt test video` and id `BaW_jenozKc`, this will result in a `VIP-yt test video-BaW_jenozKc.mp4` file created in the current directory.\r\n\r\nNote that some of the sequences are not guaranteed to be present since they depend on the metadata obtained by a particular extractor. Such sequences will be replaced with placeholder value provided with `--output-na-placeholder` (`NA` by default).\r\n\r\n**Tip**: Look at the `-j` output to identify which fields are available for the particular URL\r\n\r\nFor numeric sequences you can use [numeric related formatting](https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting), for example, `%(view_count)05d` will result in a string with view count padded with zeros up to 5 characters, like in `00042`.\r\n\r\nOutput templates can also contain arbitrary hierarchical path, e.g. `-o \"%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s\"` which will result in downloading each video in a directory corresponding to this path template. Any missing directory will be automatically created for you.\r\n\r\nTo use percent literals in an output template use `%%`. To output to stdout use `-o -`.\r\n\r\nThe current default template is `%(title)s [%(id)s].%(ext)s`.\r\n\r\nIn some cases, you don't want special characters such as 中, spaces, or &, such as when transferring the downloaded filename to a Windows system or the filename through an 8bit-unsafe channel. In these cases, add the `--restrict-filenames` flag to get a shorter title.\r\n\r\n<!-- MANPAGE: BEGIN EXCLUDED SECTION -->\r\n#### Output template and Windows batch files\r\n\r\nIf you are using an output template inside a Windows batch file then you must escape plain percent characters (`%`) by doubling, so that `-o \"%(title)s-%(id)s.%(ext)s\"` should become `-o \"%%(title)s-%%(id)s.%%(ext)s\"`. However you should not touch `%`'s that are not plain characters, e.g. environment variables for expansion should stay intact: `-o \"C:\\%HOMEPATH%\\Desktop\\%%(title)s.%%(ext)s\"`.\r\n<!-- MANPAGE: END EXCLUDED SECTION -->\r\n\r\n#### Output template examples\r\n\r\n```bash\r\n$ VIP-yt --get-filename -o \"test video.%(ext)s\" BaW_jenozKc\r\ntest video.webm    # Literal name with correct extension\r\n\r\n$ VIP-yt --get-filename -o \"%(title)s.%(ext)s\" BaW_jenozKc\r\nyoutube-dl test video ''_ä↭𝕐.webm    # All kinds of weird characters\r\n\r\n$ VIP-yt --get-filename -o \"%(title)s.%(ext)s\" BaW_jenozKc --restrict-filenames\r\nyoutube-dl_test_video_.webm    # Restricted file name\r\n\r\n# Download YouTube playlist videos in separate directory indexed by video order in a playlist\r\n$ VIP-yt -o \"%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s\" \"https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re\"\r\n\r\n# Download YouTube playlist videos in separate directories according to their uploaded year\r\n$ VIP-yt -o \"%(upload_date>%Y)s/%(title)s.%(ext)s\" \"https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re\"\r\n\r\n# Prefix playlist index with \" - \" separator, but only if it is available\r\n$ VIP-yt -o '%(playlist_index|)s%(playlist_index& - |)s%(title)s.%(ext)s' BaW_jenozKc \"https://www.youtube.com/user/TheLinuxFoundation/playlists\"\r\n\r\n# Download all playlists of YouTube channel/user keeping each playlist in separate directory:\r\n$ VIP-yt -o \"%(uploader)s/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s\" \"https://www.youtube.com/user/TheLinuxFoundation/playlists\"\r\n\r\n# Download Udemy course keeping each chapter in separate directory under MyVideos directory in your home\r\n$ VIP-yt -u user -p password -P \"~/MyVideos\" -o \"%(playlist)s/%(chapter_number)s - %(chapter)s/%(title)s.%(ext)s\" \"https://www.udemy.com/java-tutorial\"\r\n\r\n# Download entire series season keeping each series and each season in separate directory under C:/MyVideos\r\n$ VIP-yt -P \"C:/MyVideos\" -o \"%(series)s/%(season_number)s - %(season)s/%(episode_number)s - %(episode)s.%(ext)s\" \"https://videomore.ru/kino_v_detalayah/5_sezon/367617\"\r\n\r\n# Download video as \"C:\\MyVideos\\uploader\\title.ext\", subtitles as \"C:\\MyVideos\\subs\\uploader\\title.ext\"\r\n# and put all temporary files in \"C:\\MyVideos\\tmp\"\r\n$ VIP-yt -P \"C:/MyVideos\" -P \"temp:tmp\" -P \"subtitle:subs\" -o \"%(uploader)s/%(title)s.%(ext)s\" BaW_jenoz --write-subs\r\n\r\n# Download video as \"C:\\MyVideos\\uploader\\title.ext\" and subtitles as \"C:\\MyVideos\\uploader\\subs\\title.ext\"\r\n$ VIP-yt -P \"C:/MyVideos\" -o \"%(uploader)s/%(title)s.%(ext)s\" -o \"subtitle:%(uploader)s/subs/%(title)s.%(ext)s\" BaW_jenozKc --write-subs\r\n\r\n# Stream the video being downloaded to stdout\r\n$ VIP-yt -o - BaW_jenozKc\r\n```\r\n\r\n# FORMAT SELECTION\r\n\r\nBy default, VIP-yt tries to download the best available quality if you **don't** pass any options.\r\nThis is generally equivalent to using `-f bestvideo*+bestaudio/best`. However, if multiple audiostreams is enabled (`--audio-multistreams`), the default format changes to `-f bestvideo+bestaudio/best`. Similarly, if ffmpeg is unavailable, or if you use VIP-yt to stream to `stdout` (`-o -`), the default becomes `-f best/bestvideo+bestaudio`.\r\n\r\n**Deprecation warning**: Latest versions of VIP-yt can stream multiple formats to the stdout simultaneously using ffmpeg. So, in future versions, the default for this will be set to `-f bv*+ba/b` similar to normal downloads. If you want to preserve the `-f b/bv+ba` setting, it is recommended to explicitly specify it in the configuration options.\r\n\r\nThe general syntax for format selection is `-f FORMAT` (or `--format FORMAT`) where `FORMAT` is a *selector expression*, i.e. an expression that describes format or formats you would like to download.\r\n\r\n<!-- MANPAGE: BEGIN EXCLUDED SECTION -->\r\n**tl;dr:** [navigate me to examples](#format-selection-examples).\r\n<!-- MANPAGE: END EXCLUDED SECTION -->\r\n\r\nThe simplest case is requesting a specific format, for example with `-f 22` you can download the format with format code equal to 22. You can get the list of available format codes for particular video using `--list-formats` or `-F`. Note that these format codes are extractor specific.\r\n\r\nYou can also use a file extension (currently `3gp`, `aac`, `flv`, `m4a`, `mp3`, `mp4`, `ogg`, `wav`, `webm` are supported) to download the best quality format of a particular file extension served as a single file, e.g. `-f webm` will download the best quality format with the `webm` extension served as a single file.\r\n\r\nYou can use `-f -` to interactively provide the format selector *for each video*\r\n\r\nYou can also use special names to select particular edge case formats:\r\n\r\n - `all`: Select **all formats** separately\r\n - `mergeall`: Select and **merge all formats** (Must be used with `--audio-multistreams`, `--video-multistreams` or both)\r\n - `b*`, `best*`: Select the best quality format that **contains either** a video or an audio\r\n - `b`, `best`: Select the best quality format that **contains both** video and audio. Equivalent to `best*[vcodec!=none][acodec!=none]`\r\n - `bv`, `bestvideo`: Select the best quality **video-only** format. Equivalent to `best*[acodec=none]`\r\n - `bv*`, `bestvideo*`: Select the best quality format that **contains video**. It may also contain audio. Equivalent to `best*[vcodec!=none]`\r\n - `ba`, `bestaudio`: Select the best quality **audio-only** format. Equivalent to `best*[vcodec=none]`\r\n - `ba*`, `bestaudio*`: Select the best quality format that **contains audio**. It may also contain video. Equivalent to `best*[acodec!=none]` ([Do not use!](https://github.com/VIP-yt/VIP-yt/issues/979#issuecomment-919629354))\r\n - `w*`, `worst*`: Select the worst quality format that contains either a video or an audio\r\n - `w`, `worst`: Select the worst quality format that contains both video and audio. Equivalent to `worst*[vcodec!=none][acodec!=none]`\r\n - `wv`, `worstvideo`: Select the worst quality video-only format. Equivalent to `worst*[acodec=none]`\r\n - `wv*`, `worstvideo*`: Select the worst quality format that contains video. It may also contain audio. Equivalent to `worst*[vcodec!=none]`\r\n - `wa`, `worstaudio`: Select the worst quality audio-only format. Equivalent to `worst*[vcodec=none]`\r\n - `wa*`, `worstaudio*`: Select the worst quality format that contains audio. It may also contain video. Equivalent to `worst*[acodec!=none]`\r\n\r\nFor example, to download the worst quality video-only format you can use `-f worstvideo`. It is however recommended not to use `worst` and related options. When your format selector is `worst`, the format which is worst in all respects is selected. Most of the time, what you actually want is the video with the smallest filesize instead. So it is generally better to use `-S +size` or more rigorously, `-S +size,+br,+res,+fps` instead of `-f worst`. See [sorting formats](#sorting-formats) for more details.\r\n\r\nYou can select the n'th best format of a type by using `best<type>.<n>`. For example, `best.2` will select the 2nd best combined format. Similarly, `bv*.3` will select the 3rd best format that contains a video stream.\r\n\r\nIf you want to download multiple videos and they don't have the same formats available, you can specify the order of preference using slashes. Note that formats on the left hand side are preferred, for example `-f 22/17/18` will download format 22 if it's available, otherwise it will download format 17 if it's available, otherwise it will download format 18 if it's available, otherwise it will complain that no suitable formats are available for download.\r\n\r\nIf you want to download several formats of the same video use a comma as a separator, e.g. `-f 22,17,18` will download all these three formats, of course if they are available. Or a more sophisticated example combined with the precedence feature: `-f 136/137/mp4/bestvideo,140/m4a/bestaudio`.\r\n\r\nYou can merge the video and audio of multiple formats into a single file using `-f <format1>+<format2>+...` (requires ffmpeg installed), for example `-f bestvideo+bestaudio` will download the best video-only format, the best audio-only format and mux them together with ffmpeg.\r\n\r\n**Deprecation warning**: Since the *below* described behavior is complex and counter-intuitive, this will be removed and multistreams will be enabled by default in the future. A new operator will be instead added to limit formats to single audio/video\r\n\r\nUnless `--video-multistreams` is used, all formats with a video stream except the first one are ignored. Similarly, unless `--audio-multistreams` is used, all formats with an audio stream except the first one are ignored. For example, `-f bestvideo+best+bestaudio --video-multistreams --audio-multistreams` will download and merge all 3 given formats. The resulting file will have 2 video streams and 2 audio streams. But `-f bestvideo+best+bestaudio --no-video-multistreams` will download and merge only `bestvideo` and `bestaudio`. `best` is ignored since another format containing a video stream (`bestvideo`) has already been selected. The order of the formats is therefore important. `-f best+bestaudio --no-audio-multistreams` will download and merge both formats while `-f bestaudio+best --no-audio-multistreams` will ignore `best` and download only `bestaudio`.\r\n\r\n## Filtering Formats\r\n\r\nYou can also filter the video formats by putting a condition in brackets, as in `-f \"best[height=720]\"` (or `-f \"[filesize>10M]\"`).\r\n\r\nThe following numeric meta fields can be used with comparisons `<`, `<=`, `>`, `>=`, `=` (equals), `!=` (not equals):\r\n\r\n - `filesize`: The number of bytes, if known in advance\r\n - `width`: Width of the video, if known\r\n - `height`: Height of the video, if known\r\n - `tbr`: Average bitrate of audio and video in KBit/s\r\n - `abr`: Average audio bitrate in KBit/s\r\n - `vbr`: Average video bitrate in KBit/s\r\n - `asr`: Audio sampling rate in Hertz\r\n - `fps`: Frame rate\r\n\r\nAlso filtering work for comparisons `=` (equals), `^=` (starts with), `$=` (ends with), `*=` (contains), `~=` (matches regex) and following string meta fields:\r\n\r\n - `ext`: File extension\r\n - `acodec`: Name of the audio codec in use\r\n - `vcodec`: Name of the video codec in use\r\n - `container`: Name of the container format\r\n - `protocol`: The protocol that will be used for the actual download, lower-case (`http`, `https`, `rtsp`, `rtmp`, `rtmpe`, `mms`, `f4m`, `ism`, `http_dash_segments`, `m3u8`, or `m3u8_native`)\r\n - `format_id`: A short description of the format\r\n - `language`: Language code\r\n\r\nAny string comparison may be prefixed with negation `!` in order to produce an opposite comparison, e.g. `!*=` (does not contain). The comparand of a string comparison needs to be quoted with either double or single quotes if it contains spaces or special characters other than `._-`.\r\n\r\nNote that none of the aforementioned meta fields are guaranteed to be present since this solely depends on the metadata obtained by particular extractor, i.e. the metadata offered by the website. Any other field made available by the extractor can also be used for filtering.\r\n\r\nFormats for which the value is not known are excluded unless you put a question mark (`?`) after the operator. You can combine format filters, so `-f \"[height<=?720][tbr>500]\"` selects up to 720p videos (or videos where the height is not known) with a bitrate of at least 500 KBit/s. You can also use the filters with `all` to download all formats that satisfy the filter. For example, `-f \"all[vcodec=none]\"` selects all audio-only formats.\r\n\r\nFormat selectors can also be grouped using parentheses, for example if you want to download the best pre-merged mp4 and webm formats with a height lower than 480 you can use `-f \"(mp4,webm)[height<480]\"`.\r\n\r\n## Sorting Formats\r\n\r\nYou can change the criteria for being considered the `best` by using `-S` (`--format-sort`). The general format for this is `--format-sort field1,field2...`.\r\n\r\nThe available fields are:\r\n\r\n - `hasvid`: Gives priority to formats that has a video stream\r\n - `hasaud`: Gives priority to formats that has a audio stream\r\n - `ie_pref`: The format preference\r\n - `lang`: The language preference\r\n - `quality`: The quality of the format\r\n - `source`: The preference of the source\r\n - `proto`: Protocol used for download (`https`/`ftps` > `http`/`ftp` > `m3u8_native`/`m3u8` > `http_dash_segments`> `websocket_frag` > `mms`/`rtsp` > `f4f`/`f4m`)\r\n - `vcodec`: Video Codec (`av01` > `vp9.2` > `vp9` > `h265` > `h264` > `vp8` > `h263` > `theora` > other)\r\n - `acodec`: Audio Codec (`flac`/`alac` > `wav`/`aiff` > `opus` > `vorbis` > `aac` > `mp4a` > `mp3` > `eac3` > `ac3` > `dts` > other)\r\n - `codec`: Equivalent to `vcodec,acodec`\r\n - `vext`: Video Extension (`mp4` > `webm` > `flv` > other). If `--prefer-free-formats` is used, `webm` is preferred.\r\n - `aext`: Audio Extension (`m4a` > `aac` > `mp3` > `ogg` > `opus` > `webm` > other). If `--prefer-free-formats` is used, the order changes to `opus` > `ogg` > `webm` > `m4a` > `mp3` > `aac`.\r\n - `ext`: Equivalent to `vext,aext`\r\n - `filesize`: Exact filesize, if known in advance\r\n - `fs_approx`: Approximate filesize calculated from the manifests\r\n - `size`: Exact filesize if available, otherwise approximate filesize\r\n - `height`: Height of video\r\n - `width`: Width of video\r\n - `res`: Video resolution, calculated as the smallest dimension.\r\n - `fps`: Framerate of video\r\n - `hdr`: The dynamic range of the video (`DV` > `HDR12` > `HDR10+` > `HDR10` > `HLG` > `SDR`)\r\n - `tbr`: Total average bitrate in KBit/s\r\n - `vbr`: Average video bitrate in KBit/s\r\n - `abr`: Average audio bitrate in KBit/s\r\n - `br`: Equivalent to using `tbr,vbr,abr`\r\n - `asr`: Audio sample rate in Hz\r\n \r\n**Deprecation warning**: Many of these fields have (currently undocumented) aliases, that may be removed in a future version. It is recommended to use only the documented field names.\r\n\r\nAll fields, unless specified otherwise, are sorted in descending order. To reverse this, prefix the field with a `+`. Eg: `+res` prefers format with the smallest resolution. Additionally, you can suffix a preferred value for the fields, separated by a `:`. Eg: `res:720` prefers larger videos, but no larger than 720p and the smallest video if there are no videos less than 720p. For `codec` and `ext`, you can provide two preferred values, the first for video and the second for audio. Eg: `+codec:avc:m4a` (equivalent to `+vcodec:avc,+acodec:m4a`) sets the video codec preference to `h264` > `h265` > `vp9` > `vp9.2` > `av01` > `vp8` > `h263` > `theora` and audio codec preference to `mp4a` > `aac` > `vorbis` > `opus` > `mp3` > `ac3` > `dts`. You can also make the sorting prefer the nearest values to the provided by using `~` as the delimiter. Eg: `filesize~1G` prefers the format with filesize closest to 1 GiB.\r\n\r\nThe fields `hasvid` and `ie_pref` are always given highest priority in sorting, irrespective of the user-defined order. This behaviour can be changed by using `--format-sort-force`. Apart from these, the default order used is: `lang,quality,res,fps,hdr:12,codec:vp9.2,size,br,asr,proto,ext,hasaud,source,id`. The extractors may override this default order, but they cannot override the user-provided order.\r\n\r\nNote that the default has `codec:vp9.2`; i.e. `av1` is not preferred. Similarly, the default for hdr is `hdr:12`; i.e. dolby vision is not preferred. These choices are made since DV and AV1 formats are not yet fully compatible with most devices. This may be changed in the future as more devices become capable of smoothly playing back these formats.\r\n\r\nIf your format selector is `worst`, the last item is selected after sorting. This means it will select the format that is worst in all respects. Most of the time, what you actually want is the video with the smallest filesize instead. So it is generally better to use `-f best -S +size,+br,+res,+fps`.\r\n\r\n**Tip**: You can use the `-v -F` to see how the formats have been sorted (worst to best).\r\n\r\n## Format Selection examples\r\n\r\n```bash\r\n# Download and merge the best video-only format and the best audio-only format,\r\n# or download the best combined format if video-only format is not available\r\n$ VIP-yt -f \"bv+ba/b\"\r\n\r\n# Download best format that contains video,\r\n# and if it doesn't already have an audio stream, merge it with best audio-only format\r\n$ VIP-yt -f \"bv*+ba/b\"\r\n\r\n# Same as above\r\n$ VIP-yt\r\n\r\n# Download the best video-only format and the best audio-only format without merging them\r\n# For this case, an output template should be used since\r\n# by default, bestvideo and bestaudio will have the same file name.\r\n$ VIP-yt -f \"bv,ba\" -o \"%(title)s.f%(format_id)s.%(ext)s\"\r\n\r\n# Download and merge the best format that has a video stream,\r\n# and all audio-only formats into one file\r\n$ VIP-yt -f \"bv*+mergeall[vcodec=none]\" --audio-multistreams\r\n\r\n# Download and merge the best format that has a video stream,\r\n# and the best 2 audio-only formats into one file\r\n$ VIP-yt -f \"bv*+ba+ba.2\" --audio-multistreams\r\n\r\n\r\n# The following examples show the old method (without -S) of format selection\r\n# and how to use -S to achieve a similar but (generally) better result\r\n\r\n# Download the worst video available (old method)\r\n$ VIP-yt -f \"wv*+wa/w\"\r\n\r\n# Download the best video available but with the smallest resolution\r\n$ VIP-yt -S \"+res\"\r\n\r\n# Download the smallest video available\r\n$ VIP-yt -S \"+size,+br\"\r\n\r\n\r\n\r\n# Download the best mp4 video available, or the best video if no mp4 available\r\n$ VIP-yt -f \"bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4] / bv*+ba/b\"\r\n\r\n# Download the best video with the best extension\r\n# (For video, mp4 > webm > flv. For audio, m4a > aac > mp3 ...)\r\n$ VIP-yt -S \"ext\"\r\n\r\n\r\n\r\n# Download the best video available but no better than 480p,\r\n# or the worst video if there is no video under 480p\r\n$ VIP-yt -f \"bv*[height<=480]+ba/b[height<=480] / wv*+ba/w\"\r\n\r\n# Download the best video available with the largest height but no better than 480p,\r\n# or the best video with the smallest resolution if there is no video under 480p\r\n$ VIP-yt -S \"height:480\"\r\n\r\n# Download the best video available with the largest resolution but no better than 480p,\r\n# or the best video with the smallest resolution if there is no video under 480p\r\n# Resolution is determined by using the smallest dimension.\r\n# So this works correctly for vertical videos as well\r\n$ VIP-yt -S \"res:480\"\r\n\r\n\r\n\r\n# Download the best video (that also has audio) but no bigger than 50 MB,\r\n# or the worst video (that also has audio) if there is no video under 50 MB\r\n$ VIP-yt -f \"b[filesize<50M] / w\"\r\n\r\n# Download largest video (that also has audio) but no bigger than 50 MB,\r\n# or the smallest video (that also has audio) if there is no video under 50 MB\r\n$ VIP-yt -f \"b\" -S \"filesize:50M\"\r\n\r\n# Download best video (that also has audio) that is closest in size to 50 MB\r\n$ VIP-yt -f \"b\" -S \"filesize~50M\"\r\n\r\n\r\n\r\n# Download best video available via direct link over HTTP/HTTPS protocol,\r\n# or the best video available via any protocol if there is no such video\r\n$ VIP-yt -f \"(bv*+ba/b)[protocol^=http][protocol!*=dash] / (bv*+ba/b)\"\r\n\r\n# Download best video available via the best protocol\r\n# (https/ftps > http/ftp > m3u8_native > m3u8 > http_dash_segments ...)\r\n$ VIP-yt -S \"proto\"\r\n\r\n\r\n\r\n# Download the best video with either h264 or h265 codec,\r\n# or the best video if there is no such video\r\n$ VIP-yt -f \"(bv*[vcodec~='^((he|a)vc|h26[45])']+ba) / (bv*+ba/b)\"\r\n\r\n# Download the best video with best codec no better than h264,\r\n# or the best video with worst codec if there is no such video\r\n$ VIP-yt -S \"codec:h264\"\r\n\r\n# Download the best video with worst codec no worse than h264,\r\n# or the best video with best codec if there is no such video\r\n$ VIP-yt -S \"+codec:h264\"\r\n\r\n\r\n\r\n# More complex examples\r\n\r\n# Download the best video no better than 720p preferring framerate greater than 30,\r\n# or the worst video (still preferring framerate greater than 30) if there is no such video\r\n$ VIP-yt -f \"((bv*[fps>30]/bv*)[height<=720]/(wv*[fps>30]/wv*)) + ba / (b[fps>30]/b)[height<=720]/(w[fps>30]/w)\"\r\n\r\n# Download the video with the largest resolution no better than 720p,\r\n# or the video with the smallest resolution available if there is no such video,\r\n# preferring larger framerate for formats with the same resolution\r\n$ VIP-yt -S \"res:720,fps\"\r\n\r\n\r\n\r\n# Download the video with smallest resolution no worse than 480p,\r\n# or the video with the largest resolution available if there is no such video,\r\n# preferring better codec and then larger total bitrate for the same resolution\r\n$ VIP-yt -S \"+res:480,codec,br\"\r\n```\r\n\r\n# MODIFYING METADATA\r\n\r\nThe metadata obtained by the extractors can be modified by using `--parse-metadata` and `--replace-in-metadata`\r\n\r\n`--replace-in-metadata FIELDS REGEX REPLACE` is used to replace text in any metadata field using [python regular expression](https://docs.python.org/3/library/re.html#regular-expression-syntax). [Backreferences](https://docs.python.org/3/library/re.html?highlight=backreferences#re.sub) can be used in the replace string for advanced use.\r\n\r\nThe general syntax of `--parse-metadata FROM:TO` is to give the name of a field or an [output template](#output-template) to extract data from, and the format to interpret it as, separated by a colon `:`. Either a [python regular expression](https://docs.python.org/3/library/re.html#regular-expression-syntax) with named capture groups or a similar syntax to the [output template](#output-template) (only `%(field)s` formatting is supported) can be used for `TO`. The option can be used multiple times to parse and modify various fields.\r\n\r\nNote that any field created by this can be used in the [output template](#output-template) and will also affect the media file's metadata added when using `--add-metadata`.\r\n\r\nThis option also has a few special uses:\r\n\r\n* You can download an additional URL based on the metadata of the currently downloaded video. To do this, set the field `additional_urls` to the URL that you want to download. Eg: `--parse-metadata \"description:(?P<additional_urls>https?://www\\.vimeo\\.com/\\d+)` will download the first vimeo video found in the description\r\n\r\n* You can use this to change the metadata that is embedded in the media file. To do this, set the value of the corresponding field with a `meta_` prefix. For example, any value you set to `meta_description` field will be added to the `description` field in the file. For example, you can use this to set a different \"description\" and \"synopsis\". To modify the metadata of individual streams, use the `meta<n>_` prefix (Eg: `meta1_language`). Any value set to the `meta_` field will overwrite all default values.\r\n\r\n**Note**: Metadata modification happens before format selection, post-extraction and other post-processing operations. Some fields may be added or changed during these steps, overriding your changes.\r\n\r\nFor reference, these are the fields VIP-yt adds by default to the file metadata:\r\n\r\nMetadata fields            | From\r\n:--------------------------|:------------------------------------------------\r\n`title`                    | `track` or `title`\r\n`date`                     | `upload_date`\r\n`description`,  `synopsis` | `description`\r\n`purl`, `comment`          | `webpage_url`\r\n`track`                    | `track_number`\r\n`artist`                   | `artist`, `creator`, `uploader` or `uploader_id`\r\n`genre`                    | `genre`\r\n`album`                    | `album`\r\n`album_artist`             | `album_artist`\r\n`disc`                     | `disc_number`\r\n`show`                     | `series`\r\n`season_number`            | `season_number`\r\n`episode_id`               | `episode` or `episode_id`\r\n`episode_sort`             | `episode_number`\r\n`language` of each stream  | the format's `language`\r\n\r\n**Note**: The file format may not support some of these fields\r\n\r\n\r\n## Modifying metadata examples\r\n\r\n```bash\r\n# Interpret the title as \"Artist - Title\"\r\n$ VIP-yt --parse-metadata \"title:%(artist)s - %(title)s\"\r\n\r\n# Regex example\r\n$ VIP-yt --parse-metadata \"description:Artist - (?P<artist>.+)\"\r\n\r\n# Set title as \"Series name S01E05\"\r\n$ VIP-yt --parse-metadata \"%(series)s S%(season_number)02dE%(episode_number)02d:%(title)s\"\r\n\r\n# Prioritize uploader as the \"artist\" field in video metadata\r\n$ VIP-yt --parse-metadata \"%(uploader|)s:%(meta_artist)s\" --add-metadata\r\n\r\n# Set \"comment\" field in video metadata using description instead of webpage_url,\r\n# handling multiple lines correctly\r\n$ VIP-yt --parse-metadata \"description:(?s)(?P<meta_comment>.+)\" --add-metadata\r\n\r\n# Do not set any \"synopsis\" in the video metadata\r\n$ VIP-yt --parse-metadata \":(?P<meta_synopsis>)\"\r\n\r\n# Remove \"formats\" field from the infojson by setting it to an empty string\r\n$ VIP-yt --parse-metadata \":(?P<formats>)\" -j\r\n\r\n# Replace all spaces and \"_\" in title and uploader with a `-`\r\n$ VIP-yt --replace-in-metadata \"title,uploader\" \"[ _]\" \"-\"\r\n\r\n```\r\n\r\n# EXTRACTOR ARGUMENTS\r\n\r\nSome extractors accept additional arguments which can be passed using `--extractor-args KEY:ARGS`. `ARGS` is a `;` (semicolon) separated string of `ARG=VAL1,VAL2`. Eg: `--extractor-args \"youtube:player-client=android_embedded,web;include_live_dash\" --extractor-args \"funimation:version=uncut\"`\r\n\r\nThe following extractors use this feature:\r\n\r\n#### youtube\r\n* `skip`: One or more of `hls`, `dash` or `translated_subs` to skip extraction of the m3u8 manifests, dash manifests and [auto-translated subtitles](https://github.com/VIP-yt/VIP-yt/issues/4090#issuecomment-1158102032) respectively\r\n* `player_client`: Clients to extract video data from. The main clients are `web`, `android` and `ios` with variants `_music`, `_embedded`, `_embedscreen`, `_creator` (Eg: `web_embedded`); and `mweb` and `tv_embedded` (agegate bypass) with no variants. By default, `android,web` is used, but `tv_embedded` and `creator` variants are added as required for age-gated videos. Similarly the music variants are added for `music.youtube.com` urls. You can use `all` to use all the clients, and `default` for the default clients.\r\n* `player_skip`: Skip some network requests that are generally needed for robust extraction. One or more of `configs` (skip client configs), `webpage` (skip initial webpage), `js` (skip js player). While these options can help reduce the number of requests needed or avoid some rate-limiting, they could cause some issues. See [#860](https://github.com/VIP-yt/VIP-yt/pull/860) for more details\r\n* `include_live_dash`: Include live dash formats even without `--live-from-start` (These formats don't download properly)\r\n* `comment_sort`: `top` or `new` (default) - choose comment sorting mode (on YouTube's side)\r\n* `max_comments`: Limit the amount of comments to gather. Comma-separated list of integers representing `max-comments,max-parents,max-replies,max-replies-per-thread`. Default is `all,all,all,all`\r\n    * E.g. `all,all,1000,10` will get a maximum of 1000 replies total, with up to 10 replies per thread. `1000,all,100` will get a maximum of 1000 comments, with a maximum of 100 replies total\r\n* `innertube_host`: Innertube API host to use for all API requests \r\n  * e.g. `studio.youtube.com`, `youtubei.googleapis.com`\r\n  * Note: Cookies exported from `www.youtube.com` will not work with hosts other than `*.youtube.com`\r\n* `innertube_key`: Innertube API key to use for all API requests\r\n\r\n#### youtubetab (YouTube playlists, channels, feeds, etc.)\r\n* `skip`: One or more of `webpage` (skip initial webpage download), `authcheck` (allow the download of playlists requiring authentication when no initial webpage is downloaded. This may cause unwanted behavior, see [#1122](https://github.com/VIP-yt/VIP-yt/pull/1122) for more details)\r\n* `approximate_date`: Extract approximate `upload_date` in flat-playlist. This may cause date-based filters to be slightly off\r\n\r\n#### funimation\r\n* `language`: Languages to extract. Eg: `funimation:language=english,japanese`\r\n* `version`: The video version to extract - `uncut` or `simulcast`\r\n\r\n#### crunchyroll\r\n* `language`: Languages to extract. Eg: `crunchyroll:language=jaJp`\r\n* `hardsub`: Which hard-sub versions to extract. Eg: `crunchyroll:hardsub=None,enUS`\r\n\r\n#### crunchyrollbeta\r\n* `format`: Which stream type(s) to extract. Default is `adaptive_hls` Eg: `crunchyrollbeta:format=vo_adaptive_hls`\r\n    * Potentially useful values include `adaptive_hls`, `adaptive_dash`, `vo_adaptive_hls`, `vo_adaptive_dash`, `download_hls`, `trailer_hls`, `trailer_dash`\r\n* `hardsub`: Preference order for which hardsub versions to extract. Default is `None` (no hardsubs). Eg: `crunchyrollbeta:hardsub=en-US,None`\r\n\r\n#### vikichannel\r\n* `video_types`: Types of videos to download - one or more of `episodes`, `movies`, `clips`, `trailers`\r\n\r\n#### niconico\r\n* `segment_duration`: Segment duration in milliseconds for HLS-DMC formats. Use it at your own risk since this feature **may result in your account termination.**\r\n\r\n#### youtubewebarchive\r\n* `check_all`: Try to check more at the cost of more requests. One or more of `thumbnails`, `captures`\r\n\r\n#### gamejolt\r\n* `comment_sort`: `hot` (default), `you` (cookies needed), `top`, `new` - choose comment sorting mode (on GameJolt's side)\r\n\r\n#### hotstar\r\n* `res`: resolution to ignore - one or more of `sd`, `hd`, `fhd`\r\n* `vcodec`: vcodec to ignore - one or more of `h264`, `h265`, `dvh265`\r\n* `dr`: dynamic range to ignore - one or more of `sdr`, `hdr10`, `dv`\r\n\r\n#### tiktok\r\n* `app_version`: App version to call mobile APIs with - should be set along with `manifest_app_version`. (e.g. `20.2.1`)\r\n* `manifest_app_version`: Numeric app version to call mobile APIs with. (e.g. `221`)\r\n\r\n#### rokfinchannel\r\n* `tab`: Which tab to download. One of `new`, `top`, `videos`, `podcasts`, `streams`, `stacks`. (E.g. `rokfinchannel:tab=streams`)\r\n\r\n\r\nNOTE: These options may be changed/removed in the future without concern for backward compatibility\r\n\r\n<!-- MANPAGE: MOVE \"INSTALLATION\" SECTION HERE -->\r\n\r\n\r\n# PLUGINS\r\n\r\nPlugins are loaded from `<root-dir>/ytdlp_plugins/<type>/__init__.py`; where `<root-dir>` is the directory of the binary (`<root-dir>/VIP-yt`), or the root directory of the module if you are running directly from source-code (`<root dir>/VIP_yt/__main__.py`). Plugins are currently not supported for the `pip` version\r\n\r\nPlugins can be of `<type>`s `extractor` or `postprocessor`. Extractor plugins do not need to be enabled from the CLI and are automatically invoked when the input URL is suitable for it. Postprocessor plugins can be invoked using `--use-postprocessor NAME`.\r\n\r\nSee [ytdlp_plugins](ytdlp_plugins) for example plugins.\r\n\r\nNote that **all** plugins are imported even if not invoked, and that **there are no checks** performed on plugin code. Use plugins at your own risk and only if you trust the code\r\n\r\nIf you are a plugin author, add [ytdlp-plugins](https://github.com/topics/ytdlp-plugins) as a topic to your repository for discoverability\r\n\r\n\r\n\r\n# EMBEDDING VIP-yt\r\n\r\nVIP-yt makes the best effort to be a good command-line program, and thus should be callable from any programming language.\r\n\r\nYour program should avoid parsing the normal stdout since they may change in future versions. Instead they should use options such as `-J`, `--print`, `--progress-template`, `--exec` etc to create console output that you can reliably reproduce and parse.\r\n\r\nFrom a Python program, you can embed VIP-yt in a more powerful fashion, like this:\r\n\r\n```python\r\nfrom VIP_yt import YoutubeDL\r\n\r\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\r\nwith YoutubeDL() as ydl:\r\n    ydl.download(URLS)\r\n```\r\n\r\nMost likely, you'll want to use various options. For a list of options available, have a look at [`VIP_yt/YoutubeDL.py`](VIP_yt/YoutubeDL.py#L180).\r\n\r\n**Tip**: If you are porting your code from youtube-dl to VIP-yt, one important point to look out for is that we do not guarantee the return value of `YoutubeDL.extract_info` to be json serializable, or even be a dictionary. It will be dictionary-like, but if you want to ensure it is a serializable dictionary, pass it through `YoutubeDL.sanitize_info` as shown in the [example below](#extracting-information)\r\n\r\n## Embedding examples\r\n\r\n#### Extracting information\r\n\r\n```python\r\nimport json\r\nimport VIP_yt\r\n\r\nURL = 'https://www.youtube.com/watch?v=BaW_jenozKc'\r\n\r\n# ℹ️ See help(VIP_yt.YoutubeDL) for a list of available options and public functions\r\nydl_opts = {}\r\nwith VIP_yt.YoutubeDL(ydl_opts) as ydl:\r\n    info = ydl.extract_info(URL, download=False)\r\n\r\n    # ℹ️ ydl.sanitize_info makes the info json-serializable\r\n    print(json.dumps(ydl.sanitize_info(info)))\r\n```\r\n#### Download using an info-json\r\n\r\n```python\r\nimport VIP_yt\r\n\r\nINFO_FILE = 'path/to/video.info.json'\r\n\r\nwith VIP_yt.YoutubeDL() as ydl:\r\n    error_code = ydl.download_with_info_file(INFO_FILE)\r\n\r\nprint('Some videos failed to download' if error_code\r\n      else 'All videos successfully downloaded')\r\n```\r\n\r\n#### Extract audio\r\n\r\n```python\r\nimport VIP_yt\r\n\r\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\r\n\r\nydl_opts = {\r\n    'format': 'm4a/bestaudio/best',\r\n    # ℹ️ See help(VIP_yt.postprocessor) for a list of available Postprocessors and their arguments\r\n    'postprocessors': [{  # Extract audio using ffmpeg\r\n        'key': 'FFmpegExtractAudio',\r\n        'preferredcodec': 'm4a',\r\n    }]\r\n}\r\n\r\nwith VIP_yt.YoutubeDL(ydl_opts) as ydl:\r\n    error_code = ydl.download(URLS)\r\n```\r\n\r\n#### Filter videos\r\n\r\n```python\r\nimport VIP_yt\r\n\r\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\r\n\r\ndef longer_than_a_minute(info, *, incomplete):\r\n    \"\"\"Download only videos longer than a minute (or with unknown duration)\"\"\"\r\n    duration = info.get('duration')\r\n    if duration and duration < 60:\r\n        return 'The video is too short'\r\n\r\nydl_opts = {\r\n    'match_filter': longer_than_a_minute,\r\n}\r\n\r\nwith VIP_yt.YoutubeDL(ydl_opts) as ydl:\r\n    error_code = ydl.download(URLS)\r\n```\r\n\r\n#### Adding logger and progress hook\r\n\r\n```python\r\nimport VIP_yt\r\n\r\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\r\n\r\nclass MyLogger:\r\n    def debug(self, msg):\r\n        # For compatibility with youtube-dl, both debug and info are passed into debug\r\n        # You can distinguish them by the prefix '[debug] '\r\n        if msg.startswith('[debug] '):\r\n            pass\r\n        else:\r\n            self.info(msg)\r\n\r\n    def info(self, msg):\r\n        pass\r\n\r\n    def warning(self, msg):\r\n        pass\r\n\r\n    def error(self, msg):\r\n        print(msg)\r\n\r\n\r\n# ℹ️ See \"progress_hooks\" in help(VIP_yt.YoutubeDL)\r\ndef my_hook(d):\r\n    if d['status'] == 'finished':\r\n        print('Done downloading, now post-processing ...')\r\n\r\n\r\nydl_opts = {\r\n    'logger': MyLogger(),\r\n    'progress_hooks': [my_hook],\r\n}\r\n\r\nwith VIP_yt.YoutubeDL(ydl_opts) as ydl:\r\n    ydl.download(URLS)\r\n```\r\n\r\n#### Add a custom PostProcessor\r\n\r\n```python\r\nimport VIP_yt\r\n\r\nURLS = ['https://www.youtube.com/watch?v=BaW_jenozKc']\r\n\r\n# ℹ️ See help(VIP_yt.postprocessor.PostProcessor)\r\nclass MyCustomPP(VIP_yt.postprocessor.PostProcessor):\r\n    def run(self, info):\r\n        self.to_screen('Doing stuff')\r\n        return [], info\r\n\r\n\r\nwith VIP_yt.YoutubeDL() as ydl:\r\n    # ℹ️ \"when\" can take any value in VIP_yt.utils.POSTPROCESS_WHEN\r\n    ydl.add_post_processor(MyCustomPP(), when='pre_process')\r\n    ydl.download(URLS)\r\n```\r\n\r\n\r\n#### Use a custom format selector\r\n\r\n```python\r\nimport VIP_yt\r\n\r\nURL = ['https://www.youtube.com/watch?v=BaW_jenozKc']\r\n\r\ndef format_selector(ctx):\r\n    \"\"\" Select the best video and the best audio that won't result in an mkv.\r\n    NOTE: This is just an example and does not handle all cases \"\"\"\r\n\r\n    # formats are already sorted worst to best\r\n    formats = ctx.get('formats')[::-1]\r\n\r\n    # acodec='none' means there is no audio\r\n    best_video = next(f for f in formats\r\n                      if f['vcodec'] != 'none' and f['acodec'] == 'none')\r\n\r\n    # find compatible audio extension\r\n    audio_ext = {'mp4': 'm4a', 'webm': 'webm'}[best_video['ext']]\r\n    # vcodec='none' means there is no video\r\n    best_audio = next(f for f in formats if (\r\n        f['acodec'] != 'none' and f['vcodec'] == 'none' and f['ext'] == audio_ext))\r\n\r\n    # These are the minimum required fields for a merged format\r\n    yield {\r\n        'format_id': f'{best_video[\"format_id\"]}+{best_audio[\"format_id\"]}',\r\n        'ext': best_video['ext'],\r\n        'requested_formats': [best_video, best_audio],\r\n        # Must be + separated list of protocols\r\n        'protocol': f'{best_video[\"protocol\"]}+{best_audio[\"protocol\"]}'\r\n    }\r\n\r\n\r\nydl_opts = {\r\n    'format': format_selector,\r\n}\r\n\r\nwith VIP_yt.YoutubeDL(ydl_opts) as ydl:\r\n    ydl.download(URLS)\r\n```\r\n\r\n<!-- MANPAGE: MOVE \"NEW FEATURES\" SECTION HERE -->\r\n\r\n# DEPRECATED OPTIONS\r\n\r\nThese are all the deprecated options and the current alternative to achieve the same effect\r\n\r\n#### Almost redundant options\r\nWhile these options are almost the same as their new counterparts, there are some differences that prevents them being redundant\r\n\r\n    -j, --dump-json                  --print \"%()j\"\r\n    -F, --list-formats               --print formats_table\r\n    --list-thumbnails                --print thumbnails_table --print playlist:thumbnails_table\r\n    --list-subs                      --print automatic_captions_table --print subtitles_table\r\n\r\n#### Redundant options\r\nWhile these options are redundant, they are still expected to be used due to their ease of use\r\n\r\n    --get-description                --print description\r\n    --get-duration                   --print duration_string\r\n    --get-filename                   --print filename\r\n    --get-format                     --print format\r\n    --get-id                         --print id\r\n    --get-thumbnail                  --print thumbnail\r\n    -e, --get-title                  --print title\r\n    -g, --get-url                    --print urls\r\n    --match-title REGEX              --match-filter \"title ~= (?i)REGEX\"\r\n    --reject-title REGEX             --match-filter \"title !~= (?i)REGEX\"\r\n    --min-views COUNT                --match-filter \"view_count >=? COUNT\"\r\n    --max-views COUNT                --match-filter \"view_count <=? COUNT\"\r\n    --user-agent UA                  --add-header \"User-Agent:UA\"\r\n    --referer URL                    --add-header \"Referer:URL\"\r\n    --playlist-start NUMBER          -I NUMBER:\r\n    --playlist-end NUMBER            -I :NUMBER\r\n    --playlist-reverse               -I ::-1\r\n    --no-playlist-reverse            Default\r\n\r\n\r\n#### Not recommended\r\nWhile these options still work, their use is not recommended since there are other alternatives to achieve the same\r\n\r\n    --exec-before-download CMD       --exec \"before_dl:CMD\"\r\n    --no-exec-before-download        --no-exec\r\n    --all-formats                    -f all\r\n    --all-subs                       --sub-langs all --write-subs\r\n    --print-json                     -j --no-simulate\r\n    --autonumber-size NUMBER         Use string formatting. Eg: %(autonumber)03d\r\n    --autonumber-start NUMBER        Use internal field formatting like %(autonumber+NUMBER)s\r\n    --id                             -o \"%(id)s.%(ext)s\"\r\n    --metadata-from-title FORMAT     --parse-metadata \"%(title)s:FORMAT\"\r\n    --hls-prefer-native              --downloader \"m3u8:native\"\r\n    --hls-prefer-ffmpeg              --downloader \"m3u8:ffmpeg\"\r\n    --list-formats-old               --compat-options list-formats (Alias: --no-list-formats-as-table)\r\n    --list-formats-as-table          --compat-options -list-formats [Default] (Alias: --no-list-formats-old)\r\n    --youtube-skip-dash-manifest     --extractor-args \"youtube:skip=dash\" (Alias: --no-youtube-include-dash-manifest)\r\n    --youtube-skip-hls-manifest      --extractor-args \"youtube:skip=hls\" (Alias: --no-youtube-include-hls-manifest)\r\n    --youtube-include-dash-manifest  Default (Alias: --no-youtube-skip-dash-manifest)\r\n    --youtube-include-hls-manifest   Default (Alias: --no-youtube-skip-hls-manifest)\r\n\r\n\r\n#### Developer options\r\nThese options are not intended to be used by the end-user\r\n\r\n    --test                           Download only part of video for testing extractors\r\n    --load-pages                     Load pages dumped by --write-pages\r\n    --youtube-print-sig-code         For testing youtube signatures\r\n    --allow-unplayable-formats       List unplayable formats also\r\n    --no-allow-unplayable-formats    Default\r\n\r\n\r\n#### Old aliases\r\nThese are aliases that are no longer documented for various reasons\r\n\r\n    --avconv-location                --ffmpeg-location\r\n    --clean-infojson                 --clean-info-json\r\n    --cn-verification-proxy URL      --geo-verification-proxy URL\r\n    --dump-headers                   --print-traffic\r\n    --dump-intermediate-pages        --dump-pages\r\n    --force-write-download-archive   --force-write-archive\r\n    --load-info                      --load-info-json\r\n    --no-clean-infojson              --no-clean-info-json\r\n    --no-split-tracks                --no-split-chapters\r\n    --no-write-srt                   --no-write-subs\r\n    --prefer-unsecure                --prefer-insecure\r\n    --rate-limit RATE                --limit-rate RATE\r\n    --split-tracks                   --split-chapters\r\n    --srt-lang LANGS                 --sub-langs LANGS\r\n    --trim-file-names LENGTH         --trim-filenames LENGTH\r\n    --write-srt                      --write-subs\r\n    --yes-overwrites                 --force-overwrites\r\n\r\n#### Sponskrub Options\r\nSupport for [SponSkrub](https://github.com/faissaloo/SponSkrub) has been deprecated in favor of the `--sponsorblock` options\r\n\r\n    --sponskrub                      --sponsorblock-mark all\r\n    --no-sponskrub                   --no-sponsorblock\r\n    --sponskrub-cut                  --sponsorblock-remove all\r\n    --no-sponskrub-cut               --sponsorblock-remove -all\r\n    --sponskrub-force                Not applicable\r\n    --no-sponskrub-force             Not applicable\r\n    --sponskrub-location             Not applicable\r\n    --sponskrub-args                 Not applicable\r\n\r\n#### No longer supported\r\nThese options may no longer work as intended\r\n\r\n    --prefer-avconv                  avconv is not officially supported by VIP-yt (Alias: --no-prefer-ffmpeg)\r\n    --prefer-ffmpeg                  Default (Alias: --no-prefer-avconv)\r\n    -C, --call-home                  Not implemented\r\n    --no-call-home                   Default\r\n    --include-ads                    No longer supported\r\n    --no-include-ads                 Default\r\n    --write-annotations              No supported site has annotations now\r\n    --no-write-annotations           Default\r\n\r\n#### Removed\r\nThese options were deprecated since 2014 and have now been entirely removed\r\n\r\n    -A, --auto-number                -o \"%(autonumber)s-%(id)s.%(ext)s\"\r\n    -t, -l, --title, --literal       -o \"%(title)s-%(id)s.%(ext)s\"\r\n\r\n# CONTRIBUTING\r\nSee [CONTRIBUTING.md](CONTRIBUTING.md#contributing-to-VIP-yt) for instructions on [Opening an Issue](CONTRIBUTING.md#opening-an-issue) and [Contributing code to the project](CONTRIBUTING.md#developer-instructions)\r\n\r\n# MORE\r\nFor FAQ see the [youtube-dl README](https://github.com/ytdl-org/youtube-dl#faq)\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/VIP-yt/VIP-yt",
    "keywords": "",
    "license": "",
    "maintainer": "Abdo-Asil",
    "maintainer_email": "pukkandan.ytdlp@gmail.com",
    "name": "VIP-yt",
    "package_url": "https://pypi.org/project/VIP-yt/",
    "platform": null,
    "project_url": "https://pypi.org/project/VIP-yt/",
    "project_urls": {
      "Documentation": "https://github.com/VIP-yt/VIP-yt#readme",
      "Funding": "https://github.com/VIP-yt/VIP-yt/blob/master/Collaborators.md#collaborators",
      "Homepage": "https://github.com/VIP-yt/VIP-yt",
      "Source": "https://github.com/VIP-yt/VIP-yt",
      "Tracker": "https://github.com/VIP-yt/VIP-yt/issues"
    },
    "release_url": "https://pypi.org/project/VIP-yt/2022.7.26/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A youtube-dl fork with additional features and patches",
    "version": "2022.7.26",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14553544,
  "releases": {
    "2022.7.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8dfabe2669901cd0c23af0e924f4fd9facdaacb8f45849bb697e2dc571b16c7",
          "md5": "67314e0d288789aef94929755945ffa5",
          "sha256": "8e8984d5c3629ece0223f0487decb2028ecd4878618225be64161bdff0bec684"
        },
        "downloads": -1,
        "filename": "VIP-yt-2022.7.26.tar.gz",
        "has_sig": false,
        "md5_digest": "67314e0d288789aef94929755945ffa5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2146647,
        "upload_time": "2022-07-26T13:38:09",
        "upload_time_iso_8601": "2022-07-26T13:38:09.628588Z",
        "url": "https://files.pythonhosted.org/packages/e8/df/abe2669901cd0c23af0e924f4fd9facdaacb8f45849bb697e2dc571b16c7/VIP-yt-2022.7.26.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8dfabe2669901cd0c23af0e924f4fd9facdaacb8f45849bb697e2dc571b16c7",
        "md5": "67314e0d288789aef94929755945ffa5",
        "sha256": "8e8984d5c3629ece0223f0487decb2028ecd4878618225be64161bdff0bec684"
      },
      "downloads": -1,
      "filename": "VIP-yt-2022.7.26.tar.gz",
      "has_sig": false,
      "md5_digest": "67314e0d288789aef94929755945ffa5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 2146647,
      "upload_time": "2022-07-26T13:38:09",
      "upload_time_iso_8601": "2022-07-26T13:38:09.628588Z",
      "url": "https://files.pythonhosted.org/packages/e8/df/abe2669901cd0c23af0e924f4fd9facdaacb8f45849bb697e2dc571b16c7/VIP-yt-2022.7.26.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}