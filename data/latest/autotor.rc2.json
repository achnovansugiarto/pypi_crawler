{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3"
    ],
    "description": "# AutoTor\n\n<div id=\"top\"></div>\n\n[![Contributors][contributors-shield]][contributors-url]\n[![Forks][forks-shield]][forks-url]\n[![Stars][stars-shield]][stars-url]\n[![Issues][issues-shield]][issues-url]\n[![MIT License][license-shield]][license-url]\n\n<!-- TOC -->\n<details open=true>\n  <summary>Table of Contents</summary>\n  <ol>\n    <li>\n      <a href=\"#about-the-project\">About the Project</a>\n       <ul>\n        <li><a href=\"#contents\">Contents</a></li>\n        <li><a href=\"#dependencies\">Dependencies</a></li>\n      </ul>\n    </li>\n    <li>\n      <a href=\"#getting-started\">Getting Started</a>\n      <ul>\n        <li><a href=\"#installation\">Installation</a></li>\n        <li><a href=\"#coding\">Coding</a></li>\n      </ul>\n    </li>\n    <li><a href=\"#contributing\">Contributing</a></li>\n  </ol>\n</details>\n<!-- /TOC -->\n\n\n<!-- ABOUT -->\n## About the Project\nSimple high-level API to make parallel requests throughout Tor in an automated way, with circuit renewal and randomised user-agents. It can be used to easily navigate in an anonymus way or to get information from webs. At the moment, AutoTor is not OS-agnostic as it is tailored to Windows but is expected to become compatible with, at least, Linux in the short-term.\n\n### Contents\nThe most important source code elements in the project are outlined and described as follows:\n* ```main.py```: Implements an example of how the library should be used.\n* AutoTor module:\n  * ```autotor_base.py```: Implements a class that takes care of all the logic to automate Tor download, Tor configuration, Tor initialisation, getting request sessions, Tor circuit renewal, releasing Tor resources and performing parallel runs with a pool of threads.\n  * ```autotor_ip.py```: Implements an example class to override the request function that actually takes care of the requests. In this case, the function tries to get the IP in use by Tor. \n\n<p align=\"right\"><a href=\"#top\">Back to top</a></p>\n\n### Dependencies\nAmong others, the project has been built around the following Python libraries:\n\n* [requests[socks]][requests-link] (>=2.27.1)\n* [stem][stem-link] (>=1.8.0) \n* [fake-useragent][fake-useragent-link] (>=0.1.11)\n\n<p align=\"right\"><a href=\"#top\">Back to top</a></p>\n<!-- /ABOUT -->\n\n\n<!-- START -->\n## Getting Started\n### Installation\n\n#### Option 1 - setup.py\nTo install with ```pip``` by using the setup.py, one should just follow two steps:\n1. Clone the project:\n```bash\n  git clone https://github.com/salvaba94/AutoTor.git\n```\n2. Run the following command to install the dependencies and AutoTor:\n```bash\n  pip install .\n```\n\n<p align=\"right\"><a href=\"#top\">Back to top</a></p>\n\n#### Option 2 - PyPI\nInstalling AutoTor from PyPI is the simplest. It only requires the following command:\n\n```bash\n  pip install autotor\n```\n\n<p align=\"right\"><a href=\"#top\">Back to top</a></p>\n\n### Coding\n\n#### Create your class\nThe main class of the package is ```TorRequests```. It is a class with an abstract method ```request``` that should be implemented in any derived class to customise the request as desired by the user. ```TorIP``` is an example class illustrating how the derived class could be potentially implemented. Below is the metacode for a sample implementation:\n\n```python\nfrom autotor import TorRequests\nfrom threading import Lock\n\nGLOBAL_LOCK = Lock()\n\nclass MyClass(TorRequests):\n\n    # Override the initialisation function (if needed).\n    def __init__(self, another_arg = 5, *args, **kwargs):\n        # Initialise superclass.\n        super(MyClass, self).__init__(*args, **kwargs)\n        # Initialise other parameters.\n        self.another_arg = another_arg\n\n    # Override the request function and implement custom functionality. \n    # This function gets as inputs the elements the current thread should \n    # take care of and the ID of the current thread. Naturally, the \n    # function should be thread-safe.\n    def request(self, elem, n_id):\n        \n        # Get Tor session.\n        session = self.get_tor_session(n_id)\n        # Renew Tor circuit.\n        self.renew_tor_ip(n_id)\n\n        # Use the session to get information.\n        # Use elem to characterise the differences between requests.\n        # Use GLOBAL_LOCK to handle non-atomic operations.\n        ...\n```\n**Note**: In order to make the requests with another IP and user-agent just get another session and call the renew method. It is also recommended to randomise the waiting time between requests.\n\n<p align=\"right\"><a href=\"#top\">Back to top</a></p>\n\n#### Usage\nOnce one has implemented the request method in the derived class, one can use the threaded request version within a ```with``` statement to implicitly call the request method. Any opened resources will be automatically cleared upon exiting the statement.\n\n```python\nfrom autotor import MyClass\nimport numpy as np\n\n# Use threaded_request within a with statement. This function will \n# take care of allocating the list of requests among the thread pool.\nwith MyClass(another_arg = 20, n_process = 5, tor_root = \".\") as tor:\n    result = tor.threaded_request(np.arange(10))\n```\n\n<p align=\"right\"><a href=\"#top\">Back to top</a></p>\n\n<!-- /START -->\n\n<!-- CONTRIBUTING -->\n## Contributing\n\nAny contributions are greatly appreciated. If you have suggestions that would make the project any better, fork the repository and create a pull request or simply open an issue. If you decide to follow the first procedure, here is a reminder of the steps:\n\n1. Fork the project.\n2. Create your branch:\n```\n  git checkout -b branchname\n```\n3. Commit your changes:\n```\n  git commit -m \"Add some amazing feature\"\n```\n4. Push to the branch: \n```\n  git push origin branchname\n```\n5. Open a pull request.\n\n<p align=\"right\"><a href=\"#top\">Back to top</a></p>\n\n**Disclaimer:** The authors won't be hold accountable of any irresponsible misuse of the high-level API as per the [MIT License][license-url]. So, use it with care.\n\n**If you like the project and/or any of its contents results useful to you, don't forget to give it a star in [GitHub][github-repo]! It means a lot to me .**\n\n<!-- LINKS -->\n[contributors-shield]: https://img.shields.io/github/contributors/salvaba94/AutoTor.svg?style=plastic&color=0e76a8\n[contributors-url]: https://github.com/salvaba94/AutoTor/graphs/contributors\n[forks-shield]: https://img.shields.io/github/forks/salvaba94/AutoTor.svg?style=plastic&color=0e76a8\n[forks-url]: https://github.com/salvaba94/AutoTor/network/members\n[stars-shield]: https://img.shields.io/github/stars/salvaba94/AutoTor.svg?style=plastic&color=0e76a8\n[stars-url]: https://github.com/salvaba94/G2Net/stargazers\n[issues-shield]: https://img.shields.io/github/issues/salvaba94/AutoTor.svg?style=plastic&color=0e76a8\n[issues-url]: https://github.com/salvaba94/AutoTor/issues\n[license-shield]: https://img.shields.io/github/license/salvaba94/AutoTor.svg?style=plastic&color=0e76a8\n[license-url]: https://github.com/salvaba94/AutoTor/blob/main/LICENSE\n[stem-link]: https://stem.torproject.org/\n[requests-link]: https://docs.python-requests.org/en/latest/\n[fake-useragent-link]: https://github.com/hellysmile/fake-useragent\n[github-repo]: https://github.com/salvaba94/AutoTor\n\n<!-- /LINKS -->\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/salvaba94/AutoTor",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "autotor",
    "package_url": "https://pypi.org/project/autotor/",
    "platform": null,
    "project_url": "https://pypi.org/project/autotor/",
    "project_urls": {
      "Homepage": "https://github.com/salvaba94/AutoTor"
    },
    "release_url": "https://pypi.org/project/autotor/2.0.0/",
    "requires_dist": [
      "requests[socks] (>=2.27.1)",
      "stem (>=1.8.0)",
      "fake-useragent (>=0.1.11)"
    ],
    "requires_python": ">=3.7",
    "summary": "AutoTor is a simple package to make requests through Tor. It allows automation, easy Tor circuit renewal and customisation of the requests in a threaded way.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13208936,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddd7e26976efb774d1d4bd1a53164ae553e7dc3cc03cba727d03312be11325b1",
          "md5": "5da7e54f1990f766f1233e4066647ae2",
          "sha256": "7ccf0a5380dad2c3b01c116dfd09a8d63150710bb311a739fe4193ae8b8518d5"
        },
        "downloads": -1,
        "filename": "autotor-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5da7e54f1990f766f1233e4066647ae2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7139,
        "upload_time": "2022-03-03T19:58:19",
        "upload_time_iso_8601": "2022-03-03T19:58:19.381642Z",
        "url": "https://files.pythonhosted.org/packages/dd/d7/e26976efb774d1d4bd1a53164ae553e7dc3cc03cba727d03312be11325b1/autotor-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b274938bfcb87027fd1f0b27adcffb1869144003a42f8651d61e84543fee69d8",
          "md5": "e2dd2514b6b0b0af8d7609c595f1f17d",
          "sha256": "bd46fb4a20e8c142b9957189ea480a37c942a4dd9ca6b495e9c3b520a56b7ac3"
        },
        "downloads": -1,
        "filename": "autotor-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e2dd2514b6b0b0af8d7609c595f1f17d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6353,
        "upload_time": "2022-03-03T19:58:21",
        "upload_time_iso_8601": "2022-03-03T19:58:21.380136Z",
        "url": "https://files.pythonhosted.org/packages/b2/74/938bfcb87027fd1f0b27adcffb1869144003a42f8651d61e84543fee69d8/autotor-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aed37f780bb9d06eee05cdbc358c59d51dd335cf0418df1aa330240a24ca2f8e",
          "md5": "bb779e5ab7a9b183a64f30571a988e66",
          "sha256": "179eda22c0c2a3578e84484cd3099276a4b31ffe9c5537fcf702925a8a70403c"
        },
        "downloads": -1,
        "filename": "autotor-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb779e5ab7a9b183a64f30571a988e66",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9757,
        "upload_time": "2022-03-17T20:00:52",
        "upload_time_iso_8601": "2022-03-17T20:00:52.349104Z",
        "url": "https://files.pythonhosted.org/packages/ae/d3/7f780bb9d06eee05cdbc358c59d51dd335cf0418df1aa330240a24ca2f8e/autotor-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e04668046efbae1fecdef777b12bbb032bd2e19638611d1e9bd594aec176469b",
          "md5": "4e4642742b707057011467af7cb58880",
          "sha256": "8754ee3aa80a0cf8aeba2641926432936625add049393973f78d57dca66709e7"
        },
        "downloads": -1,
        "filename": "autotor-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4e4642742b707057011467af7cb58880",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8755,
        "upload_time": "2022-03-17T20:00:53",
        "upload_time_iso_8601": "2022-03-17T20:00:53.874585Z",
        "url": "https://files.pythonhosted.org/packages/e0/46/68046efbae1fecdef777b12bbb032bd2e19638611d1e9bd594aec176469b/autotor-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aed37f780bb9d06eee05cdbc358c59d51dd335cf0418df1aa330240a24ca2f8e",
        "md5": "bb779e5ab7a9b183a64f30571a988e66",
        "sha256": "179eda22c0c2a3578e84484cd3099276a4b31ffe9c5537fcf702925a8a70403c"
      },
      "downloads": -1,
      "filename": "autotor-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb779e5ab7a9b183a64f30571a988e66",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9757,
      "upload_time": "2022-03-17T20:00:52",
      "upload_time_iso_8601": "2022-03-17T20:00:52.349104Z",
      "url": "https://files.pythonhosted.org/packages/ae/d3/7f780bb9d06eee05cdbc358c59d51dd335cf0418df1aa330240a24ca2f8e/autotor-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e04668046efbae1fecdef777b12bbb032bd2e19638611d1e9bd594aec176469b",
        "md5": "4e4642742b707057011467af7cb58880",
        "sha256": "8754ee3aa80a0cf8aeba2641926432936625add049393973f78d57dca66709e7"
      },
      "downloads": -1,
      "filename": "autotor-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4e4642742b707057011467af7cb58880",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 8755,
      "upload_time": "2022-03-17T20:00:53",
      "upload_time_iso_8601": "2022-03-17T20:00:53.874585Z",
      "url": "https://files.pythonhosted.org/packages/e0/46/68046efbae1fecdef777b12bbb032bd2e19638611d1e9bd594aec176469b/autotor-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}