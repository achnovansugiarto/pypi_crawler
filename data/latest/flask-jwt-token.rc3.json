{
  "info": {
    "author": "guapit",
    "author_email": "guapit <guapit@qq.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Flask JWT Token(JWT Token认证插件)\r\n\r\n<p align=\"center\">\r\n<a href=\"#\"><img src=\"https://img.shields.io/badge/Module-flask--jwt--token-critical.svg\"/></a>\r\n<a href=\"#\"><img src=\"https://img.shields.io/badge/Language-Python-blue\"/></a>\r\n    <a href=\"#\"><img src=\"https://img.shields.io/badge/Version-0.1.0-f1c232\"/></a>\r\n<img src=\"https://img.shields.io/badge/Author-guapit-ff69b4\"/>\r\n<a href=\"https://www.github.com/guapit\"><img src=\"https://img.shields.io/badge/Github-guapit-success\"/></a>\r\n<a href=\"https://www.gitee.com/guapit\"><img src=\"https://img.shields.io/badge/Gitee-guapit-yellowgreen\"/></a>\r\n<a href=\"#\"><img src=\"https://img.shields.io/badge/E--mail-guapit%40qq.com-yellowgreen\"/></a>\r\n</p><br>\r\n\r\n\r\n   This is a highly scalable `token` authentication system developed based on the `PyJWT` plug-in. It can be used simply,  and the encryption method can be customized arbitrarily. It supports password encryption,  private key public key encryption, private key public key file encryption\r\nWhether you are django, Flask, Fastapi or software application authorization,  you can use it to achieve application layer decoupling\r\n\r\n这是一个基于 `PyJWT`插件开发的高可扩展的`token`认证系统,可以简单的使用,也可以任意定制加密方式,支持 密码加密, 私钥公钥加密,私钥公钥文件加密\r\n无论你是 django, Flask, Fastapi还是软件应用授权都可以使用,实现应用层解耦\r\n\r\nRequired plugins 必要的插件\r\n\r\n```pthon\r\npip install -U pyjwt\r\npip install -U pydantic\r\npip install -U pytz\r\n```\r\n\r\n## pip安装\r\n\r\n```bash\r\npip install flask-jwt-token\r\n```\r\n\r\n\r\n\r\n## settings(配置)\r\n\r\nIt's easy to use, or you can customize any authorization management you want\r\n\r\n可以简单使用,也可以任意定制授权管理,非常好用\r\n\r\n`key`:str = \"guapi\" # 公共加密秘钥\r\n\r\n`crypto`: str = 'HS256' # 加密算法\r\n\r\n`private_key`: str = None # 这是私钥,如果使用openssl加密\r\n\r\n`public_key`: str = None # 这是公钥,如果使用openssl加密\r\n\r\n`private_file`: str = None # 这是私钥文件路径,如果使用openssl加密\r\n\r\n`public_file`: str = None # 这是公钥文件路径,如果使用openssl加密\r\n\r\n`issuer`:str = None # 签发者(可选),如果不填默认 any\r\n\r\n`type`: str = 'JWT' # 签发类型(可选),有些环境需要选择签发类型时再设置\r\n\r\n`address`: List[str]|str = None # 收件人(可选),如果有指定的签名范围可以\r\n\r\n`verify_exp`:Optional[bool] = True # 是否关闭过期验证\r\n\r\n`verify_signatrue`:Optional[bool] = True # 验证签名,如果关闭只加密信息,不进行key秘钥加密\r\n\r\n`expiration`:Optional[int] = 5 # Token临时到期时间\r\n\r\n`expiration_max`:Optional[int] = 7 # Token最大有效期\r\n\r\n`is_uuid`:Optional[bool] = False # 是否需要加盐\r\n\r\n`utc`:Optional[timezone] = None # 设置时区\r\n\r\n`kid`: str = None # 前后端共享公钥\r\n\r\n`require`: List[str] = None # 解密后过滤器,可以选择返回指定字段信息\r\n\r\n`active_expiration`:Optional[datetime] = None # 设置Token什么时间内无法使用\r\n\r\n## Function函数\r\n\r\n### create_playload(self, data:dict = {})\r\n\r\n测试创建数据和配置是否合法\r\n\r\n:param data: 需要加密的信息数据\r\n\r\n:return: 验证数据合法后返回 playload 对象\r\n\r\n```python\r\njwt.create_playload({'id':1,'username':'guapit'})\r\n```\r\n\r\n### def get_playload(self,palyload:tuple[bool, dict, str],require:List[str]=None,language:str=\"en\")\r\n\r\n**English Fields**:\r\n\r\ncrypto,type,address,create_time,expiration,expiration_max,issuer,issuer,uuid,active_exp,pal\r\n\r\n**中文字段**:\r\n\r\n加密算法,加盐类型,可访问者,创建时间,到期时间,到期上限,发布者,唯一识别码,主动过期,解密数据\r\n\r\n:param palyload: 荷载对象\r\n\r\n:param require: 过滤掉不需要返回的字段,参考上面的字段名称\r\n\r\n:param language: 设置语言版本 en | cn\r\n\r\n:return: 验证数据合法后返回过滤后的 playload 对象\r\n\r\n### def get_headers(self,encode_key:str)\r\n\r\n得到解密后的明文headers头信息\r\n\r\n### def set_headers(self,headers: dict = None)\r\n\r\n设置加密荷载的头部信息(内置函数,无需设置)\r\n\r\n如果设置了 self.kid 会优先使用属性上的值\r\n\r\n:param headers: 需要加密的信息数据\r\n\r\n:return: 返回更新后的headers信息\r\n\r\n### def get_playload(self,palyload:tuple[bool, dict, str],require:List[str]=None,language:str=\"en\") ->tuple[bool, dict, str]\r\n\r\n格式化解密后的结果\r\n\r\nEnglish Fields:\r\n    crypto,type,address,create_time,expiration,expiration_max,issuer,issuer,uuid,active_exp,pal\r\n中文字段:\r\n    加密算法,加盐类型,可访问者,创建时间,到期时间,到期上限,发布者,唯一识别码,主动过期,解密数据\r\n:param palyload: 荷载对象\r\n:param require: 过滤掉不需要返回的字段,参考上面的字段名称\r\n:param language: 设置语言版本 en | cn\r\n:return: 验证数据合法后返回过滤后的 playload 对象 \r\n\r\n使用方法:\r\n\r\n```python\r\ndecode = jt.get_playload(decode,language=\"cn\",require=[\"address\",'type','crypto','issuer'])\r\n```\r\n\r\n English:\r\n\r\n```json\r\n(True,\r\n {'create_time': 1675960891,\r\n  'data': {'id': 1, 'username': 'guapit'},\r\n  'expiration': 1675961391,\r\n  'expiration_max': 1676565691,\r\n  'expiration_stop': 1675960891,\r\n  'uuid': None},\r\n 'Token令牌获取成功')\r\n```\r\n\r\n中文:\r\n\r\n```json\r\n(True,\r\n {'主动过期': 1675961064,\r\n  '创建时间': 1675961064,\r\n  '到期上限': 1676565864,\r\n  '到期时间': 1675961564,\r\n  '唯一识别码': None,\r\n  '解密数据': {'id': 1, 'username': 'guapit'}},\r\n 'Token令牌获取成功')\r\n```\r\n\r\n\r\n\r\n### def encode(self,data:dict = {},headers:dict = None,json_encoder: Type[JSONEncoder] | None = None)\r\n\r\n根据 self.key 的属性进行加密\r\n:param data: 需要加密的信息数据\r\n:param headers: 如果需要在荷载信息头部加入定制信息可以传入字典\r\n:param json_encoder: 自定义json解析接口(一般无需设置)\r\n:return: 验证数据合法后返回 playload 对象\r\n\r\n### def decode(self,encode_key:str,address:List[str]|str=None,issue:str = None,leeway:Union[int, float, timedelta] = 0)\r\n\r\n根据 self.key 的属性进行解密\r\n:param encode_key: 加密文\r\n:param address: 允许解密的用户范围\r\n:param issue: 发布者中是否包含指定发布者\r\n:param leeway: 过期后允许多久宽容期,一般无需设置,默认设置为: 秒\r\n:return: 验证数据合法后返回 `状态`,`数据`,`状态注解` \r\n\r\n### def encode_ssl(self,data:dict = {},headers:dict = None, json_encoder: Type[JSONEncoder] | None = None)\r\n\r\n根据 self.private_key 的属性进行加密\r\n生成私钥，指定私钥的长度为2048bit   1024基本安全, 2048非常安全\r\nlinux: openssl genrsa -out rsa_private_key.pem 2048\r\n以上生成的是 RS256 加密密文\r\n:param data: 需要加密的信息数据\r\n:param headers: 如果需要在荷载信息头部加入定制信息可以传入字典\r\n:param json_encoder: 自定义json解析接口(一般无需设置)\r\n:return: 验证数据合法后返回Token密文\r\n\r\n### def decode_ssl(self,encode_key:str,address:List[str]|str=None,issue:str = None,leeway:Union[int, float, timedelta] = 0)\r\n\r\n根据 self.public_key 的属性进行解密\r\n根据私钥生成对应的公钥参考\r\nlinux: openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key_2048.pub    \r\n以上生成的是 RS256 公钥\r\n:param encode_key: 加密文\r\n:param address: 允许解密的用户范围\r\n:param issue: 发布者中是否包含指定发布者\r\n:param leeway: 过期后允许多久宽容期,一般无需设置,默认设置为: 秒\r\n\r\n:return: 验证数据合法后返回 `状态`,`数据`,`状态注解`       \r\n\r\n### def encode_ssl_file(self,data:dict = {},headers:dict = None, json_encoder: Type[JSONEncoder] | None = None)\r\n\r\n根据 self.private_file 的属性的文件里面的私钥进行加密\r\n\r\n生成私钥，指定私钥的长度为2048bit  1024基本安全, 2048非常安全\r\n\r\nlinux: openssl genrsa -out rsa_private_key.pem 2048\r\n\r\n以上生成的是 RS256 加密密文\r\n\r\n:param data: 需要加密的信息数据\r\n\r\n:param headers: 如果需要在荷载信息头部加入定制信息可以传入字典\r\n\r\n:param json_encoder: 自定义json解析接口(一般无需设置)\r\n\r\n:return: 验证数据合法后返回Token密文\r\n\r\n### def decode_ssl_file(self,encode_key:str,address:List[str]|str=None,issue:str = None,leeway:Union[int, float, timedelta] = 0)\r\n\r\n根据 self.public_file 的属性的文件里面的公钥进行解密\r\n根据私钥生成对应的公钥参考\r\nlinux: openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key_2048.pub    \r\n以上生成的是 RS256 公钥\r\n:param data: 需要加密的信息数据\r\n:param headers: 如果需要在荷载信息头部加入定制信息可以传入字典\r\n:param leeway: 过期后允许多久宽容期,一般无需设置,默认设置为: 秒\r\n:return: 验证数据合法后返回 `状态`,`数据`,`状态注解`\r\n\r\n## 使用方法\r\n\r\n### 简单的加密\r\n\r\nkey\r\n\r\n```python\r\nfrom flask_jwt_token import JwtToken\r\n\r\njwt = JwtToken()\r\njwt.crypto = 'HS256' # 选择加密算法\r\njwt.key = \"iJIUzUxMiIsInR5cC\" # 秘钥\r\n\r\nuser = {'id':1,'username':'guapit'}\r\n\r\n# 进行加密\r\nencode_key = jwt.encode(user)\r\n\r\n# 进行解密\r\ndecode = jwt.decode(encode)\r\n```\r\n\r\n### 私钥公钥加密 \r\n\r\nprivate_key and public_key\r\n\r\n```python\r\nfrom flask_jwt_token import JwtToken\r\n\r\njwt = JwtToken()\r\njwt.crypto = 'HS256' # 选择加密算法\r\njwt.private_key  = \"-----BEGIN PRIVATE KEY-----...\" # 秘钥\r\njwt.public_key  = \"-----BEGIN PUBLIC KEY-----...\" # 公钥\r\nuser = {'id':1,'username':'guapit'}\r\n\r\n# 进行加密\r\nencode_key = jt.encode_ssl(user)\r\n\r\n# 进行解密\r\ndecode = jt.decode_ssl(encode)\r\n```\r\n\r\n### 私钥公钥文件加密解密\r\n\r\nprivate_key and public_key\r\n\r\n```python\r\nfrom flask_jwt_token import JwtToken\r\n\r\njwt = JwtToken()\r\njwt.crypto = 'RS256' # 选择加密算法\r\njwt.private_file  = \"./cart/private_file.pem\" # 秘钥\r\njwt.public_file  = \"./cart/private_file.pub\"  # 公钥\r\nuser = {'id':1,'username':'guapit'}\r\n\r\n# 进行加密\r\nencode_key = jwt.encode_ssl_file(user)\r\n\r\n# 进行解密\r\ndecode = jwt.decode_ssl_file(encode)\r\n```\r\n\r\n### 高级扩展\r\n\r\n```python\r\nfrom flask_jwt_token import JwtToken\r\n\r\njwt = JwtToken()\r\njwt.crypto = 'HS256' # 选择加密算法\r\njt.key = \"iJIUzUxMiIsInR5cC\" # 秘钥\r\n\r\njwt.issuer = [\"guapit\",\"瓜皮猫\"] # 设置签发者\r\njwt.address = [\"https://guapit.com\",\"github.com\"] # 设置授权接受订阅用户\r\nuser = {'id':1,'username':'guapit'}\r\n\r\n# 进行加密\r\nencode_key = jwt.encode(user)\r\n\r\n# 进行解密\r\n# 如果设置的解密 issuer 发布者中 属于 jt.issuer 其中一个可以解密成功\r\n# 如果设置的解密 address 订阅者中属于 jt.address 其中一个可以解密成功\r\ndecode = jwt.decode(encode,address=[\"github.com\"],issuer=[\"guapit\"])\r\n\r\n\r\n```\r\n\r\n### 返回字段过滤\r\n\r\n```python\r\nfrom flask_jwt_token import JwtToken\r\n\r\njwt = JwtToken()\r\njwt.crypto = 'HS256' # 选择加密算法\r\njwt.key = \"iJIUzUxMiIsInR5cC\" # 秘钥\r\njwt.require = ['typ','alg','iss','iti','aud']\r\nuser = {'id':1,'username':'guapit'}\r\n\r\n# 进行加密\r\nencode_key = jwt.encode(user)\r\n\r\n# 进行解密\r\ndecode = jwt.decode(encode)\r\n```\r\n\r\n这样返回后数据就是\r\n\r\n```json\r\nTrue, {'pal': {'id': 1, 'username': 'guapit'}, 'exp': 1675862965, 'exm': 1676438960, 'iat': 1675862960, 'nbf': 1675862960}, 'Token令牌获取成功')\r\n```\r\n\r\n### 控制过期时间\r\n\r\n```python\r\njwt.expiration = 500 # 表示500秒后过期\r\njwt.expiration_max = 7 # 表示 最大可延续的周期为7天\r\n\r\n # 表示当前时间 + 60秒后,此Token才会生效\r\njwt.active_expiration = datetime.now() + timedelta(seconds=60)\r\n```\r\n\r\n### 完整返回信息\r\n\r\n```python\r\ntyp:str = 'JWT' # 签发类型\r\nalg:str # 加密算法\r\niss:str = None # 签发者\r\niti:str = None # uuid\r\naud:List[str]|str = None # 收信人\r\npal:dict = {} # 荷载对象\r\nexp:Optional[datetime] # 过期时间\r\nexm:Optional[int] = None # 最大过期时间\r\niat:Optional[datetime] # 创建时间\r\nnbf:Optional[datetime] = None # 不得超过的最大时间\r\n```\r\n\r\n注意返回的信息是一个元祖\r\n\r\n第一个参数:表示是否成功获取到解密信息\r\n\r\n第二个参数:表示成功获取的解密数据,否则为空字典\r\n\r\n第三个参数: 表示获取Token的状态注解\r\n\r\n返回后信息\r\n\r\n```json\r\nTrue, {'typ': 'JWT', 'alg': 'HS256', 'iss': None, 'iti': None, 'aud': None, 'pal': {'id': 1, 'username': 'guapit'}, 'exp': 1675862965, 'exm': 1676438960, 'iat': 1675862960, 'nbf': 1675862960}, 'Token令牌获取成功')\r\n```\r\n\r\n\r\n\r\n**更多扩展定制,等待你发现...**\r\n\r\n## 支持的加密算法\r\n\r\n```bash\r\nHS256 - HMAC using SHA-256 hash algorithm (default)\r\nHS384 - HMAC using SHA-384 hash algorithm\r\nHS512 - HMAC using SHA-512 hash algorithm\r\nES256 - ECDSA signature algorithm using SHA-256 hash algorithm\r\nES256K - ECDSA signature algorithm with secp256k1 curve using SHA-256 hash algorithm\r\nES384 - ECDSA signature algorithm using SHA-384 hash algorithm\r\nES512 - ECDSA signature algorithm using SHA-512 hash algorithm\r\nRS256 - RSASSA-PKCS1-v1_5 signature algorithm using SHA-256 hash algorithm\r\nRS384 - RSASSA-PKCS1-v1_5 signature algorithm using SHA-384 hash algorithm\r\nRS512 - RSASSA-PKCS1-v1_5 signature algorithm using SHA-512 hash algorithm\r\nPS256 - RSASSA-PSS signature using SHA-256 and MGF1 padding with SHA-256\r\nPS384 - RSASSA-PSS signature using SHA-384 and MGF1 padding with SHA-384\r\nPS512 - RSASSA-PSS signature using SHA-512 and MGF1 padding with SHA-512\r\nEdDSA - Both Ed25519 signature using SHA-512 and Ed448 signature using SHA-3 are supported. Ed25519 and Ed448 provide 128-bit and 224-bit security respectively.\r\n\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/guapit/flask-auto-router",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-jwt-token",
    "package_url": "https://pypi.org/project/flask-jwt-token/",
    "platform": null,
    "project_url": "https://pypi.org/project/flask-jwt-token/",
    "project_urls": {
      "Bug Tracker": "https://github.com/guapit/flask-jwt-token/issues",
      "Homepage": "https://github.com/guapit/flask-jwt-token"
    },
    "release_url": "https://pypi.org/project/flask-jwt-token/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Custom flask jwt token",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16771303,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73f0296c60dba67df989b5aa2aa86bf72404ac91a65906a1ff64fcd14d9e7ae5",
          "md5": "e13ec5a11df9afbada72a3f638c8809e",
          "sha256": "5b668934f75c4721a1eb03fd8e9c5ae25963d8bce82128688269d7adb6d64968"
        },
        "downloads": -1,
        "filename": "flask_jwt_token-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e13ec5a11df9afbada72a3f638c8809e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 4846,
        "upload_time": "2023-02-08T13:43:27",
        "upload_time_iso_8601": "2023-02-08T13:43:27.088631Z",
        "url": "https://files.pythonhosted.org/packages/73/f0/296c60dba67df989b5aa2aa86bf72404ac91a65906a1ff64fcd14d9e7ae5/flask_jwt_token-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f6be092910b36c4b9c25274a2705b16325ca22d2ba58fbe90a03fa1083d2e4c",
          "md5": "96ea67dadca015f807592c63860fa262",
          "sha256": "ed7441d02a7b81a0418b192b41e1c15e061cf3e475fdb4b9050d3921658fd879"
        },
        "downloads": -1,
        "filename": "flask-jwt-token-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "96ea67dadca015f807592c63860fa262",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5250,
        "upload_time": "2023-02-08T13:43:29",
        "upload_time_iso_8601": "2023-02-08T13:43:29.170243Z",
        "url": "https://files.pythonhosted.org/packages/3f/6b/e092910b36c4b9c25274a2705b16325ca22d2ba58fbe90a03fa1083d2e4c/flask-jwt-token-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d8fc4b0c3454b6fdd96308bded71b8ca28ef6a67e7aca33c75d1a7ebf3f5c02",
          "md5": "70d3762d24d8f21fa41b7ef2802356d4",
          "sha256": "00f20066162bdd75bda0f342cc398f123619310159b907dfcef1597d4629f93e"
        },
        "downloads": -1,
        "filename": "flask_jwt_token-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70d3762d24d8f21fa41b7ef2802356d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5926,
        "upload_time": "2023-02-08T14:02:05",
        "upload_time_iso_8601": "2023-02-08T14:02:05.074910Z",
        "url": "https://files.pythonhosted.org/packages/1d/8f/c4b0c3454b6fdd96308bded71b8ca28ef6a67e7aca33c75d1a7ebf3f5c02/flask_jwt_token-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e202fb89e7f4da53b5b746bfb7b62f90bc94828d9c1bdfddcec1a12e35b268bf",
          "md5": "3a26c2f82810345242b0908aa6610e65",
          "sha256": "c3c1fa0cb3a7458b15133c7a66e39cbe630d3dcfef85c4142c2ecef4d228c7ae"
        },
        "downloads": -1,
        "filename": "flask-jwt-token-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3a26c2f82810345242b0908aa6610e65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6491,
        "upload_time": "2023-02-08T14:02:08",
        "upload_time_iso_8601": "2023-02-08T14:02:08.434619Z",
        "url": "https://files.pythonhosted.org/packages/e2/02/fb89e7f4da53b5b746bfb7b62f90bc94828d9c1bdfddcec1a12e35b268bf/flask-jwt-token-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0c768d8f250a465029ca3ac8db4538927cf1b04900a71d65796d6d176f93f18",
          "md5": "b9321e4b6e1bda7a0eff1806c85a642b",
          "sha256": "5e06def9d9d51c772999456a96d766afe0e2a1dd812421c82bed7b8a58fad700"
        },
        "downloads": -1,
        "filename": "flask_jwt_token-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9321e4b6e1bda7a0eff1806c85a642b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6179,
        "upload_time": "2023-02-09T16:46:38",
        "upload_time_iso_8601": "2023-02-09T16:46:38.426393Z",
        "url": "https://files.pythonhosted.org/packages/c0/c7/68d8f250a465029ca3ac8db4538927cf1b04900a71d65796d6d176f93f18/flask_jwt_token-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad59f903eeff24d00a64a2dee168e283e2d396da27c8cce689b977cdac0ff684",
          "md5": "974e89a963bdc5aa98c76228765a6116",
          "sha256": "eedf5b13934d5c528f5b5efc954f4c7db39dac92e5d62435de41fa244dc8cc16"
        },
        "downloads": -1,
        "filename": "flask-jwt-token-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "974e89a963bdc5aa98c76228765a6116",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7055,
        "upload_time": "2023-02-09T16:46:43",
        "upload_time_iso_8601": "2023-02-09T16:46:43.630104Z",
        "url": "https://files.pythonhosted.org/packages/ad/59/f903eeff24d00a64a2dee168e283e2d396da27c8cce689b977cdac0ff684/flask-jwt-token-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0c768d8f250a465029ca3ac8db4538927cf1b04900a71d65796d6d176f93f18",
        "md5": "b9321e4b6e1bda7a0eff1806c85a642b",
        "sha256": "5e06def9d9d51c772999456a96d766afe0e2a1dd812421c82bed7b8a58fad700"
      },
      "downloads": -1,
      "filename": "flask_jwt_token-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b9321e4b6e1bda7a0eff1806c85a642b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6179,
      "upload_time": "2023-02-09T16:46:38",
      "upload_time_iso_8601": "2023-02-09T16:46:38.426393Z",
      "url": "https://files.pythonhosted.org/packages/c0/c7/68d8f250a465029ca3ac8db4538927cf1b04900a71d65796d6d176f93f18/flask_jwt_token-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad59f903eeff24d00a64a2dee168e283e2d396da27c8cce689b977cdac0ff684",
        "md5": "974e89a963bdc5aa98c76228765a6116",
        "sha256": "eedf5b13934d5c528f5b5efc954f4c7db39dac92e5d62435de41fa244dc8cc16"
      },
      "downloads": -1,
      "filename": "flask-jwt-token-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "974e89a963bdc5aa98c76228765a6116",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7055,
      "upload_time": "2023-02-09T16:46:43",
      "upload_time_iso_8601": "2023-02-09T16:46:43.630104Z",
      "url": "https://files.pythonhosted.org/packages/ad/59/f903eeff24d00a64a2dee168e283e2d396da27c8cce689b977cdac0ff684/flask-jwt-token-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}