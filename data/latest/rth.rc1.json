{
  "info": {
    "author": "Fabien Z.",
    "author_email": "contact.biowolf@gmx.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Routing Tables Helper\n\nA program made by a lover of new technologies, for all networking developers, sysadmins and other people that might find any\nuse to it.\nIt aims to ease the creation and calculus of routing tables when working on networks. Simply providing the required data\nis sufficient for the program to build the routing tables itself, and display them to you.\n\n## Is it finished yet?\n\nNo, the program is only in its first stable release. I'm always hoping to create and innovate more; maybe it won't be\nupdated for a moment, but it doesn't mean I let it down either.\n\n### Contact info\nBy mail: biothewolff [at] gmx [dot] fr\\\nOn Discord: BioTheWolff#7708\\\nYou can also find me on these two french Discord servers:\n- [Developpeur(euse)s FR](https://discord.gg/8d4ACG5)\n- [l4p1n-srv](https://discord.gg/awbUQe4)\n\n## What is it?\n\nThe Routing Tables Helper, or RTH, is a program that aims to provide an easy, and quick, way to create routing\ntables. Instead of having to create them by hand, using a Virtual Machine or your own network, and a piece of paper,\nthis virtual network builder and routing tables generator does it all for you.\n\n# Documentation\n\n## Classes\n\nThe main class you'll want to use is the Dispatcher class. You can import it from `rth.core.dispatcher`\n\nThe other classes, that each do one part of the work, are the `NetworkCreator`, `Ants` and `RoutingTablesGenerator` classes.\nNormally, you won't use them on their own, unless you are willing to do a special action.\n\n## How to use the software\n\nThe biggest problem here is how to format the data the right way. \nTo generate the routing tables, we will need three things: the subnetworks, the routers and the links. As the computer is no\nsentient machine, it needs the links to virtually reconstruct the network and find paths in all this mess of figures and names.\n\n### General flow and usage of the program\n\nThis is the easiest and fastest part to read and understand.\nYou just need to import the Dispatcher, create an instance, `execute()` it the right way and it's all done!\n\n```ignorelang\nfrom rth.core.dispatcher import Dispatcher\n\ninst = Dispatcher()\ninst.execute(subnetworks, routers, links)\n# And it's all done !\n\n# You can then display the output in the console\ninst.display_routing_tables()\n\n# or output it to a file (txt will be the best format for now)\ninst.output_routing_tables(\"D:/Projects/output.txt\")\n```\n\n### Subnetworks data\n\nThe subnetworks data is a dictionary you must provide under this format: `{NAME: CIDR, ...}` meaning putting the names of \nthe subnetworks as keys, and their respectives CIDRs in values.\n\nExample: \n```python\nsubnetworks = {\n    'A': \"10.0.1.0/24\",\n    'B': \"10.0.2.0/24\",\n    'C': \"10.0.3.0/24\"\n}\n```\n\nNB: if you wish to not give any name to a subnetwork, leave the key as an empty string (`''`) and it will automatically be \nnamed `<Untitled Network#ID:{ID HERE}>` (with `{ID HERE}` being the unique ID of the network)\n\n### Routers data\n\nThe routers data is also a dictionary, which resembles the subnetworks data. The only difference is the value you must give;\nthe format is `{NAME: HAS_INTERNET_CONNECTION, ...}`. The `HAS_INTERNET_CONNECTION` value **must be either True or None**.\n`True` means the router is connected to internet, and `None` means it doesn't.\n\nExample:\n```python\nrouters = {\n    0: True,\n    1: None,\n    2: None,\n    3: None\n}\n``` \n\n**WARNING:** In this current version, only **ONE** router should have the internet connection. It will throw an exception if\nmore or less than one are set with an internet connection.\n\nThe router with the internet connection will be called \"master router\" below.\n\n### Links data\n\nThe links data is the most important, and also the trickiest to format. The format is\n`{ROUTER_NAME: {SUBNETWORK_NAME: IP, ...}, ...}`. So, to explain it more literally, you must make a dictionary of the \nconnected subnetworks, and the IP at which the router is connected onto the subnetwork, for each router.\n\nThe `IP` value can be either an IPv4, or `None`. If `None` is given, the program will automatically assign an IP for the router,\nwhich will be the first available address starting from the END of the subnetwork range.\n\nExample:\n```python\nlinks = {\n    0: {\n        \"A\": \"10.0.1.200\"\n    },\n    1: {\n        \"A\": None,\n        \"C\": \"10.0.3.254\"\n    },\n    2: {\n        \"A\": \"10.0.1.253\",\n        \"B\": \"10.0.2.253\"\n    },\n    3: {\n        \"B\": \"10.0.2.252\",\n        \"C\": None\n    }\n}\n```\n\n### Now to combine it all into an example\n\n```python\nfrom rth.core.dispatcher import Dispatcher\n\nsubnetworks = {\n    'A': \"10.0.1.0/24\",\n    'B': \"10.0.2.0/24\",\n    'C': \"10.0.3.0/24\"\n}\n\nrouters = {\n    0: True,\n    1: None,\n    2: None,\n    3: None\n}\n\nlinks = {\n    0: {\n        \"A\": \"10.0.1.200\"\n    },\n    1: {\n        \"A\": None,\n        \"C\": \"10.0.3.254\"\n    },\n    2: {\n        \"A\": \"10.0.1.253\",\n        \"B\": \"10.0.2.253\"\n    },\n    3: {\n        \"B\": \"10.0.2.252\",\n        \"C\": None\n    }\n}\n\ninst = Dispatcher()\ninst.execute(subnetworks, routers, links)\n```\n\n## Hidden choices, and output formatting\n\n### Hidden choices and impact on paths\n\nThis title may be a bit weird, but it will become clear in a second. The program, when it encounters several possible ways\nto get from a subnetwork to another, will have to make a choice. Therefore, the path followed by the program, which will be \nof course visible on the routing tables at the end might disturb you. So, in order to clear doubts and help the users find the\npath quicker, I included a \"hops\" seconds in the output.\n\nIt looks like this:\n```ignorelang\n----- HOPS -----\nFrom subnetwork A to subnetwork B: router 2\nFrom subnetwork A to subnetwork C: router 2 > router 1\nFrom subnetwork A to subnetwork D: router 2 > router 1 > router 3\nFrom subnetwork B to subnetwork A: router 2\n\n...\n(I only show a small amount here, even though in reality there are more lines)\n```\n\nIt will help you see which path has been taken.\n\n### Output formatting\n\nThe output of the routing tables is not a table, as you might expect. For now, at least.\nIt currently looks like this:\n\n```ignorelang\n----- ROUTING TABLES -----\nRouter MyRouter\n  - 192.168.0.0/24      : 192.168.0.254 via 192.168.0.254\n  - 192.168.1.0/24      : 192.168.1.254 via 192.168.1.254\n  - 0.0.0.0/0           : 192.168.1.253 via 192.168.1.254\n  - 10.0.0.0/24         : 192.168.0.253 via 192.168.0.254\n  - 10.0.1.0/24         : 192.168.1.253 via 192.168.1.254\n```\n\nAs you may have guessed, it is formatted as `DESTINATION NETWORK : GATEWAY via INTERFACE`\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BioTheWolff/RTH",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Fabien Z.",
    "maintainer_email": "contact.biowolf@gmx.fr",
    "name": "rth",
    "package_url": "https://pypi.org/project/rth/",
    "platform": "",
    "project_url": "https://pypi.org/project/rth/",
    "project_urls": {
      "Bug Tracker": "https://github.com/BioTheWolff/RTH/issues",
      "Homepage": "https://github.com/BioTheWolff/RTH",
      "Source Code": "https://github.com/BioTheWolff/RTH"
    },
    "release_url": "https://pypi.org/project/rth/1.0.0/",
    "requires_dist": [
      "nettools"
    ],
    "requires_python": ">=3.6",
    "summary": "Generates paths between the subnetworks of a local network and generates routing tables of all the routers of said local network",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7833022,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0154655d0ae2cc1b5d61c3fa4c32d75c4d5450a8d70533e3f3a72f0e063979e",
          "md5": "34fc404f12fa746ba9df2ed4afc0fe49",
          "sha256": "7937d5aea28e441b88182fea71230fe57f8748010a8149bbb59d92c269f3ea9d"
        },
        "downloads": -1,
        "filename": "rth-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34fc404f12fa746ba9df2ed4afc0fe49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19744,
        "upload_time": "2020-07-29T18:30:12",
        "upload_time_iso_8601": "2020-07-29T18:30:12.333676Z",
        "url": "https://files.pythonhosted.org/packages/c0/15/4655d0ae2cc1b5d61c3fa4c32d75c4d5450a8d70533e3f3a72f0e063979e/rth-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48e69a5fef49bbaa390783369135bebeda3db461ed6b78dcbe09bb3efdd114eb",
          "md5": "70fadb1c5ccd4a77110635103b543de8",
          "sha256": "9292a40575fec774f45524ce1fac9d1c6df6d2be2e9bdef9c4e62dc64ad2e810"
        },
        "downloads": -1,
        "filename": "rth-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "70fadb1c5ccd4a77110635103b543de8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19835,
        "upload_time": "2020-07-29T18:30:15",
        "upload_time_iso_8601": "2020-07-29T18:30:15.513607Z",
        "url": "https://files.pythonhosted.org/packages/48/e6/9a5fef49bbaa390783369135bebeda3db461ed6b78dcbe09bb3efdd114eb/rth-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0154655d0ae2cc1b5d61c3fa4c32d75c4d5450a8d70533e3f3a72f0e063979e",
        "md5": "34fc404f12fa746ba9df2ed4afc0fe49",
        "sha256": "7937d5aea28e441b88182fea71230fe57f8748010a8149bbb59d92c269f3ea9d"
      },
      "downloads": -1,
      "filename": "rth-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "34fc404f12fa746ba9df2ed4afc0fe49",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19744,
      "upload_time": "2020-07-29T18:30:12",
      "upload_time_iso_8601": "2020-07-29T18:30:12.333676Z",
      "url": "https://files.pythonhosted.org/packages/c0/15/4655d0ae2cc1b5d61c3fa4c32d75c4d5450a8d70533e3f3a72f0e063979e/rth-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48e69a5fef49bbaa390783369135bebeda3db461ed6b78dcbe09bb3efdd114eb",
        "md5": "70fadb1c5ccd4a77110635103b543de8",
        "sha256": "9292a40575fec774f45524ce1fac9d1c6df6d2be2e9bdef9c4e62dc64ad2e810"
      },
      "downloads": -1,
      "filename": "rth-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "70fadb1c5ccd4a77110635103b543de8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19835,
      "upload_time": "2020-07-29T18:30:15",
      "upload_time_iso_8601": "2020-07-29T18:30:15.513607Z",
      "url": "https://files.pythonhosted.org/packages/48/e6/9a5fef49bbaa390783369135bebeda3db461ed6b78dcbe09bb3efdd114eb/rth-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}