{
  "info": {
    "author": "",
    "author_email": "Arvid Müllern-Aspegren <kontakt@rvid.se>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# rvid.seq a.k.a RID\n\nAdmin-friendly, fixed-length, unique-enough, fast-enough, monotonic,\nidentifiers.\n\nOptimized for small contexts where you only very rarely need more than a few\nmillion unique ID:s per day and prefer those ID:s to carry a bit of meaning\nand be easy to read, remember and speak out loud.\n\nIt is essentially a compact, semi-high-resolution timestamp, with a bit of\nlogic for avoiding duplicates in a cross-platform manner.\n\n```\nfrom rvid.seq import RID\nmy_id = RID.next()\n>>> '0Q1-USW-YU8'\n```\n\n## Definition\n\nA RID is an *approximation* of millisecond Unix epoch time, encoded in base-35\nwith a readability-optimized character set and presented in exactly three\ngroups of exactly three alphanumerics.\n\nThe characters used for encoding is: `0123456789ABCDEFGH*JKLMN#PQRSTUVWXY`.\nNote that I and O are replaced with * and #.\n\n## Compatibility\n\nThe code is tested OK with CPython 3.6 and 3.11, and PyPy 7.3.1.\n\nThe wheel building may however have some issues on Python 3.6, since\ncurrent versions of pip no longer support interpreters that old.\n\n## Building and installing\n\nVia PyPI: `pip install rvid.seq`\n\nFor local build it is not much harder:\n\n```\nhg clone https://hg.sr.ht/~rvid/rvid.seq\ncd rvid.seq\npip wheel . -w dist\n```\n\nThe build produces a pure python wheel with no dependencies.\n\n### Troubleshooting\n\n> ⚠️ **pip can't find 'hg' command**\n\nThere seems to be a bug in setuptools_scm or mercurial, which on at least some\nsystems mean that you must run pip via a virtualenv where mercurial is\npre-installed:\n\n```\npython3 -m venv venv\nvenv/bin/pip install mercurial\nvenv/bin/pip wheel . -w dist\n```\n\n## Usage\n\n### Command-line\n\nThe command-line tool `rid` lets you get the RID for current time or do \ntranslations:\n\n```\n(venv) [user@host ~]$ rid\n0Q1-X1G-HQ6\n\n(venv) [user@host ~]$ rid 0Q1-X1G-HQ6\n0Q1-X1G-HQ6 corresponds to 2023-02-14 18:23:34\n\n(venv) [user@host ~]$ rid $(date +%s)\n1676397310 corresponds to 0Q1-X2P-P00\n```\n\n### In Python code\n\nFor programmatic usage, you would import the RID singleton in your software,\nand use its `.next()` method to get a value:\n\n```\nfrom rvid.seq import RID\nid = RID.next()\n```\n\nIf you application is multi-threaded, you can use the thread-safe version. It\nworks exactly the same but is slower due to locking-overhead.\n\n```\nfrom rvid.seq import RID_ThreadSafe as RID\nid = RID.next()\n```\n\nIf your application is multi-process within a single system, have a look at\nthe section called [Multi-process support](#multi-process-support).\n\n### Safe resumption\n\n```\nfrom rvid.seq import epoch2rid, RID\n\n[RID.next() for _ in range(2)]\n>>> ['0Q1-UX2-XYS', '0Q1-UX2-XYT']\n\nRID.adjust_top_from_rid( epoch2rid( time.time() + 1000 * 1000 ) )\nRID.next()\n>>> '0Q2-EYH-G0Q'\n```\n\nIf picking up work from e.g. a saved file in a new session, you will need to\nseed the RID-generator with the max-RID from that saved file. (Or else stuff\ngets weird if your clock has moved backwards).\n\n## Scalability\n\nBy the year 2525, if man is still alive, you still have 18 billion id:s left in\nthe number space before wrapping over.\n\nRID is unlikely to be too slow. A Ryzen 3900X generates about 430k RID:s/second\nwith CPython 3.9 and 9.5M RID:s/second with Pypy 7.3.1.\n\n## Multi-process support\n\n> ⚠️ **The multi-process functionality is not properly tested!**\n\nRID:s are not UUID:s. They cannot be assumed to be unique outside controlled\nand coordinated *local* contexts. At some point I might want a local context\nthat spans multiple processes, though. As a fun experiment, I built a network\nwrapper called `netseq`.\n\n`netseq` provides a central server process that manages the issuing of RID:s,\nand a client proxy class, that transparently fetches tranches of RID:s for\nlocal usage. When multiple clients are connected, they get interleaved\ntranches of RID:s.\n\nOut of the box, the tranches cover three seconds into the future (with 'now'\ndefined as either system time or the highest previously issued RID, which ever\nis higher) and are sized equally across all connected clients. The clients\nhand out RID:s to their local consumers from their latest tranch, until\nthe values become 1.5 seconds off compared to the reference \"now\", and then\nfetches an updated set.\n\nPerformance is surprisingly good. RID-issuance throughput is only about\n50% slower over the network than in the basic, single-process version.\n(Or about 200k RID:s per second on a half-modern desktop). Latency\nshould be way beyond imperceptible for interactive usage.\n\n```\n(venv) [user@host ~]$ netseq server\n[2023-02-14 18:58:24,634] INFO [rvid.networknumbers.server]: TCP Server is running. Ctrl-C to kill it.\n[2023-02-14 18:58:24,634] INFO [rvid.networknumbers.server]: Registered handler is: <class 'rvid.netseq.server.RIDHandler'>\n[2023-02-14 18:58:42,324] INFO [rvid.netseq.server]: Making new tranches for 1 clients at ms-epoch 1676397522325\n[2023-02-14 18:58:47,320] INFO [rvid.netseq.server]: Making new tranches for 2 clients at ms-epoch 1676397527320\n[...]\n\n\n(venv) [user@host ~]$ netseq client\nRunning .next() 12 times with 0.1s sleep between\n0Q1-X2U-RE6 with last fetch at 1676397530651 and 1665 ID:s remaining\n0Q1-X2U-SUR with last fetch at 1676397530651 and 762 ID:s remaining\n0Q1-X2U-SWT with last fetch at 1676397530651 and 726 ID:s remaining\n[...]\n```\n\n## Background and motivations\n\nI have found UUID:s to be annoying at times. They take up lots of screen space\nand are difficult to read. And I always end up having to read them when\ndebugging one thing or another. They are not optimized for direct human \nconsumption.\n\n### On the topic of anchoring to system time\n\nI've chosen to anchor the number sequence on system time, because it adds some\nextra context information to each ID. I'm not certain that I will stick with\nthat, because it also adds a bit of complication to the implementation and\nsome mental overhead when parsing the ID:s.\n\nSkipping the system-time anchor would allow dropping one of the triplets and\nstill get a reasonable 1.8 billion unique values.\n\n```\nfrom rvid.seq.common import rid2epoch_ms\nrid2epoch_ms(\"000-YYY-YYY\")\n>>> 1838265624\n```\n\nOn the other hand, decoupling time from ID would mean that you must have and\nmust read a timestamp to have the slightest idea about when an object was\ncreated. I'm not 100% sure that it would be net gain in mental overhead.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rvid.seq",
    "package_url": "https://pypi.org/project/rvid.seq/",
    "platform": null,
    "project_url": "https://pypi.org/project/rvid.seq/",
    "project_urls": {
      "homepage": "https://rvid.se/seq",
      "repository": "https://hg.sr.ht/~rvid/rvid.seq"
    },
    "release_url": "https://pypi.org/project/rvid.seq/0.2.0/",
    "requires_dist": [
      "black ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "mypy[reports] ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Admin-friendly, fixed-length, unique-enough, fast-enough, monotonic, identifiers.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16959019,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdc0d80302a2d14b4b7cc243e3c868d6267ff84cfa387e660e70e2bd1c313d36",
          "md5": "b789b900c8fcce08fe15a5979a0c3858",
          "sha256": "03b0af84712e654455630cb7cc734ad641fa221a545d41a8910e8d831dfe6c5c"
        },
        "downloads": -1,
        "filename": "rvid.seq-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b789b900c8fcce08fe15a5979a0c3858",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16375,
        "upload_time": "2023-02-14T18:24:02",
        "upload_time_iso_8601": "2023-02-14T18:24:02.684512Z",
        "url": "https://files.pythonhosted.org/packages/cd/c0/d80302a2d14b4b7cc243e3c868d6267ff84cfa387e660e70e2bd1c313d36/rvid.seq-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56e402a64adbf675c0b3325f2574dc86c4c800b51cba503f77a1c6403b949cb2",
          "md5": "3efd2bd4dc3e615b2caee3aa183dd8b2",
          "sha256": "a9faed00299ddffb0be169cd2b28ec9addd0a87ded177519bf76e10aeef06050"
        },
        "downloads": -1,
        "filename": "rvid.seq-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3efd2bd4dc3e615b2caee3aa183dd8b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15975,
        "upload_time": "2023-02-19T21:38:10",
        "upload_time_iso_8601": "2023-02-19T21:38:10.481775Z",
        "url": "https://files.pythonhosted.org/packages/56/e4/02a64adbf675c0b3325f2574dc86c4c800b51cba503f77a1c6403b949cb2/rvid.seq-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a2742abf7e62f3bdcce398f65022aa6137f5fabb5e06947cb107d04c845c618",
          "md5": "ba09ca31a7a93905e40893f81cbd8c9b",
          "sha256": "688fe8c392d9107a63e20fef8d624b3427b59f76bb00010b436432294bc7a236"
        },
        "downloads": -1,
        "filename": "rvid.seq-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba09ca31a7a93905e40893f81cbd8c9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16401,
        "upload_time": "2023-02-21T10:50:17",
        "upload_time_iso_8601": "2023-02-21T10:50:17.580976Z",
        "url": "https://files.pythonhosted.org/packages/5a/27/42abf7e62f3bdcce398f65022aa6137f5fabb5e06947cb107d04c845c618/rvid.seq-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a2742abf7e62f3bdcce398f65022aa6137f5fabb5e06947cb107d04c845c618",
        "md5": "ba09ca31a7a93905e40893f81cbd8c9b",
        "sha256": "688fe8c392d9107a63e20fef8d624b3427b59f76bb00010b436432294bc7a236"
      },
      "downloads": -1,
      "filename": "rvid.seq-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ba09ca31a7a93905e40893f81cbd8c9b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16401,
      "upload_time": "2023-02-21T10:50:17",
      "upload_time_iso_8601": "2023-02-21T10:50:17.580976Z",
      "url": "https://files.pythonhosted.org/packages/5a/27/42abf7e62f3bdcce398f65022aa6137f5fabb5e06947cb107d04c845c618/rvid.seq-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}