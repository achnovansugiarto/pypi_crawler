{
  "info": {
    "author": "Andrew Ray",
    "author_email": "mcaray9@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Latest Version\nserialize-mcr='0.0.1'\n\n## Maintainers\nJunpu Fan (Original Author, `serial-j` = https://github.com/JunpuFan/serial-j/blob/master)  \nAndrew Ray, rayam@iu.edu (Primary Maintainer) \n\n## Features \n   1. serialize-mcr JSON / Python Dictionary data into Python object based on a compact data `schema`.\n       1. Data `schema` is a python list `[]` of many `{}`.\n       2. Each `{}` in the `schema` defines a property in your `JSON` data. \n       3. The easiest form of a property definition is `{'name':'my_property'}` which means:\n          1. Your `JSON` data **MUST** contain a property called `my_property` .\n          2. Its value **MUST** be a **non-empty** value. \n          3. Non-empty means that the value of  `my_property` can not be `None`, `\"\"`, `()`, `[]`, or `{}`.\n       4. Additional options are available to give you more control over your data definition. Those options are: `nullable`, `optional`, `is_compound`, `compound_serialize-mcrr`, `compound_schema`, `type`, and `default`.\n          1. Option `nullable: True` means the value of `my_property` can be `None`, or a nullable equivalent.\n          2. Option `optional: True` means `my_property` may or may not exist in your `JSON` data.\n             1. In case `my_property` exist, verify all applicable options.\n             2. In case `my_property` doesn't exist, we ignore `my_property`.\n          3. Option `is_compound: True` means `my_property` is a nested `JSON` object or an Array of `JSON` objects.\n             1. When `is_compound: True`, you must provide either `compound_serialize-mcrr` or `compound_schema` so we can property serialize-mcr this nested data structure.\n                1. `compound_serialize-mcrr` is a `serialize-mcr` serialize-mcrr class.\n                2. `compound_schema` has the same structure as the data `schema`.\n          4. Option `type` gives you the power to validate the value of each property in your `JSON` data. Currently supported type definitions are:\n             1. `'type': (bool,)` a boolean value.\n             2. `'type': (float,)` a floating point number.\n             3. `'type': (int,)` an integer.\n             4. `'type': (int, (1, 64, 343))` an enumeration of integers, this means that the value of a `JSON` property should be in `(1, 64, 343)`.\n             5. `'type': (int, range(1, 10, 3)`, a range of integers, this means that the value of a `JSON` property should be in `range(1, 10, 3)`.\n             6. `'type': (int, lambda x: x % 2 == 0)` a user defined `lambda` expression used to filter desired integer values, the above example `lambda`  specifies the value of the `JSON` property should be a `even` number.\n             7. `'type': (str,)` a string value.\n             8. `'type': (str, ('SUCCESS', 'FAILURE'))` an enumeration of strings, this means that the value of a `JSON` property should be in `('SUCCESS', 'FAILURE')`. Note that `('SUCCESS', 'FAILURE')` is just an example here, you can define anything you like.\n             9. `'type': (str, 'email')` an email address.\n             10. `'type': (str, 'url')` a web url.\n             11. `'type': (str, 'ipv4')` an IPv4 address.\n             12. `'type': (str, 'ipv6')` an IPv6 address.\n             13. `'type': (str, 'uuid')` an UUID string.\n             14. `'type': (str, '[^@]+@[^@]+\\.[^@]+')` a user defined `regex`.\n          5. Option `default` gives you the power to set a defaulted value for a property in the case where it was not passed in AND the property was optional\n             1. `default` does not work if the property is optional, or in other words `required`\n             2. `default` does a type check against the defined `type` if passed in\n                1. if the type of the `default` value does not conform with the `type` defined, then an error will be thrown\n             3. `default` defaulted value is `None`, therefore both `True` and `False` are also supported in the `default` realm of options.\n   2. Automatically validate every JSON properties defined in the `schema` based on varies additional options specified in `schema`.\n   3. You are given convenient built-in methods that you can use to convert your data back to JSON encoded string or JSON / Python Dictionary.\n   4. You have the flexibility of defining additional methods in your serialize-mcrr class that utilize your data in anyway you want.\n\n\n\n## Example Codes\n\n| Name                                                  | Code                                                         |\n| ----------------------------------------------------- | ------------------------------------------------------------ |\n| Basic Example                                         | [basic_ex.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/basic_ex.py) |\n| serialize-mcr Nested Json Data with `compound_schema`     | [nested_ex2.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/nested_ex2.py) |\n| serialize-mcr Nested Json Data with `compound_serialize-mcrr` | [nested_ex1.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/nested_ex1.py) |\n| Data Type Validation: all in one example              | [typed_ex.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/typed_ex.py) |\n| Data Type Validation: `bool`                          | [bool_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/bool_data.py) |\n| Data Type Validation: `float`                         | [float_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/float_data.py) |\n| Data Type Validation: `int`                           | [int_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/int_data.py) |\n| Data Type Validation: `int enum`                      | [int_enum_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/int_enum_data.py) |\n| Data Type Validation: `int range`                     | [int_ranged_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/int_ranged_data.py) |\n| Data Type Validation: `int lambda`                    | [int_lambda_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/int_lambda_data.py) |\n| Data Type Validation: `str`                           | [str_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/str_data.py) |\n| Data Type Validation: `str enum`                      | [str_enum_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/str_enum_data.py) |\n| Data Type Validation: `str email`                     | [str_email_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/str_email_data.py) |\n| Data Type Validation: `str url`                       | [str_url_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/str_url_data.py) |\n| Data Type Validation: `str uuid`                      | [str_uuid_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/str_uuid_data.py) |\n| Data Type Validation: `str ipv4`                      | [str_ipv4_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/str_ipv4_data.py) |\n| Data Type Validation: `str ipv6`                      | [str_ipv6_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/str_ipv6_data.py) |\n| Data Type Validation: `str regex`                     | [str_regex_data.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/str_regex_data.py) |\n| Default Data: `default`                               | [extra_params_ex.py](https://github.com/millcityrunner/serialize-mcr/blob/master/examples/type/extra_params_ex.py) |\n\n\n\n\n## Basic Example\nLet's first see a basic example. \n\n```python\nfrom serialize_mcr import SerializeMCR\n\nclass FruitBucket(SerializeMCR):\n    # define how our data should look like using `schema`.\n    schema = [\n        {'name': 'apple'},\n        {'name': 'orange'},\n        {'name': 'pineapple'},\n    ]\n\n# test data for FruitBucket \ntest1 = dict(\n    apple=\"good apple\",\n    orange=\"very good orange\",\n    pineapple=\"nice pineapple\",\n)\n\nserialize-mcr\nfruits = FruitBucket(test1)\n\n# `fruits` is a proper python object , which means that you can use \n# `fruits.apple` syntax to retrieve the value of `apple`.\nprint(fruits.apple)\n>>> good apple\n\n# ...and other fruits too.\nprint(fruits.orange)\n>>> very good orange\nprint(fruits.pineapple)\n>>> nice pineapple\n\n# you can get the JSON formatted string back too.\nprint(fruits)\n>>> {\"apple\": \"good apple\", \"orange\": \"very good orange\", \"pineapple\": \"nice pineapple\"}\n\n# interested to get the python dictionary back?\nfruits_data = fruits.as_dict()\nprint(fruits_data)\n>>> {'apple': 'good apple', 'orange': 'very good orange', 'pineapple': 'nice pineapple'}\n```\n\n\n\n## Nested JSON Data \n\nLet's see how we can serialize-mcr more complex data structure into python object.\n\n\n\n##### Serializing Nested JSON Data with `compound_schema`.\n\nDefine a nested data `schema` called `compound_schema` to serialize-mcr nested `JSON` data.\n\n```python\nfrom serialize_mcr import SerializeMCR\n\nclass SnackBucket(SerializeMCR):\n    schema = [\n        {'name': 'apple'},\n        {'name': 'orange'},\n        {'name': 'pineapple'},\n        {'name': 'snack', 'is_compound': True,\n            'compound_schema': [\n                 {'name': 'cheese', 'optional': True},\n                 {'name': 'chocolate'},\n                 {'name': 'chips', 'nullable': True},\n            ],\n        },\n    ]\n\ntest3 = dict(\n    apple=\"good apple\",\n    orange=\"very good orange\",\n    pineapple=\"nice pineapple\",\n    snack=[\n        dict(\n            cheese=\"Feta\",\n            chocolate=\"Ferrero Rocher\",\n            chips=[] \n        ),\n        dict(\n            chocolate=\"Swiss milk chocolate\",\n            chips=[\"Cheetos\", \"Lays Classic Potato Chips\", \"Cool Ranch Doritos\"] \n        ),\n    ]\n)\nmysnacks = SnackBucket(test3)\nprint(mysnacks)\n>>> {\"apple\": \"good apple\", \"orange\": \"very good orange\", \"pineapple\": \"nice pineapple\", \n>>> \"snack\": [{\"cheese\": \"Feta\", \"chocolate\": \"Ferrero Rocher\", \"chips\": []}, \n>>>           {\"chocolate\": \"Swiss milk chocolate\", \"chips\": \n>>>                [\"Cheetos\", \"Lays Classic Potato Chips\", \"Cool Ranch Doritos\"]}]}\n```\n\n\n\n##### Serializing Nested JSON Data with `compound_serialize-mcrr`.\n\nDefine a separete data `serialize-mcr` serialize-mcrr called `compound_serialize-mcrr` to serialize-mcr nested `JSON` data.\n\n```python\nfrom serialize_mcr import SerializeMCR\nclass Snack(SerializeMCR):\n    schema = [\n        # cheese is nice but is optional.\n        {'name': 'cheese', 'optional': True},\n        # chocolate is a MUST have.\n        {'name': 'chocolate'},\n        # chips is a must but we have to decide which kind later, \n        # so its value can be None, False, \"\", {}, [].\n        {'name': 'chips', 'nullable': True},\n    ]\n    \nclass NestedBucket(SerializeMCR):\n    schema = [\n        {'name': 'apple'},\n        {'name': 'orange'},\n        {'name': 'pineapple'},\n        {'name': 'snack', 'is_compound': True, 'compound_serialize-mcrr': Snack}\n    ]\n    \n# test data for NestedBucket\ntest2 = dict(\n    apple=\"good apple\",\n    orange=\"very good orange\",\n    pineapple=\"nice pineapple\",\n    snack=dict(\n        chocolate=\"Ferrero Rocher\",\n        chips=[] # yeah its a list of chips!\n    ),\n)\nmy_snacks = NestedBucket(test2)\nprint(my_snacks)\n>>> {\"apple\": \"good apple\", \"orange\": \"very good orange\", \"pineapple\": \"nice pineapple\", \n>>>  \"snack\": {\"chocolate\": \"Ferrero Rocher\", \"chips\": []}}\n```\n\n\n\n## Data Type Validation \n\na compact example that shows all data types currently supported by this package.\n\n```python\nfrom serialize_mcr import SerializeMCR\n\n\nclass TypedData(SerializeMCR):\n    schema = [\n        {'name': 'prop1', 'type': (int,)},\n        {'name': 'prop2', 'type': (int, (1, 64, 343))},\n        {'name': 'prop3', 'type': (int, range(1, 10, 3))},\n        {'name': 'prop4', 'type': (int, lambda x: x % 2 == 0)},\n        {'name': 'prop5', 'type': (str,)},\n        {'name': 'prop6', 'type': (str, ('SUCCESS', 'FAILURE'))},\n        {'name': 'prop7', 'type': (str, 'email')},\n        {'name': 'prop8', 'type': (str, 'url')},\n        {'name': 'prop9', 'type': (str, 'ipv4')},\n        {'name': 'prop10', 'type': (str, 'ipv6')},\n        {'name': 'prop11', 'type': (str, 'uuid')},\n        {'name': 'prop12', 'type': (str, '[^@]+@[^@]+\\.[^@]+')},\n        {'name': 'prop13', 'type': (float,)},\n        {'name': 'prop14', 'type': (bool,)},\n    ]\n\n\ntest1 = {\n    'prop1': 1,\n    'prop2': 64,\n    'prop3': 4,\n    'prop4': 2,\n    'prop5': \"str\",\n    'prop6': 'SUCCESS',\n    'prop7': 'anyone@emailservice.com',\n    'prop8': 'https://www.something.com/something-something/something/12345',\n    'prop9': '172.16.255.1',\n    'prop10': '2001:0db8:0a0b:12f0:0000:0000:0000:0001',\n    'prop11': 'c026dd66-86f2-498e-8c2c-858179c0c93d',\n    'prop12': 'junpufan@me.com',\n    'prop13': 0.1,\n    'prop14': True\n}\n\ndata1 = TypedData(test1)\nprint(data1)\n# >>> {\"prop1\": 1, \"prop2\": 64, \"prop3\": 4, \"prop4\": 2, \"prop5\": \"str\",\n# >>> \"prop6\": \"SUCCESS\", \"prop7\": \"anyone@emailservice.com\",\n# >>> \"prop8\": \"https://www.something.com/something-something/something/12345\",\n# >>> \"prop9\": \"172.16.255.1\", \"prop10\": \"2001:0db8:0a0b:12f0:0000:0000:0000:0001\",\n# >>> \"prop11\": \"c026dd66-86f2-498e-8c2c-858179c0c93d\", \"prop12\": \"junpufan@me.com\",\n# >>> \"prop13\": 0.1, \"prop14\": true}\n\n```\n\n## Defaulting Data on Optional Properties Absence\n\na simple way to ensure a value is set at all times for optional properties in a JSON schema\n\n```python\nfrom serialize_mcr import SerializeMCR\n\nclass DefaultingValues(SerializeMCR):\n    schema = [\n        {'name': 'var1', 'type': (int,), 'optional': True, 'default': 0},\n        {'name': 'var2', 'type': (str,), 'optional': True, 'default': 'str'},\n        {'name': 'var3', 'type': (float,), 'optional': True, 'default': 1.25},\n        {'name': 'var4', 'type': (bool,), 'optional': True, 'default': True},\n        {'name': 'var5', 'type': (int, (1, 3, 5)), 'optional': True, 'default': 3}\n    ]\n    \n### acceptable bodies to pass in\n# since all properties are optional, no values are required to be passed in\n# all values will be set to their defined default value\ntest1 = {}\ndata1 = DefaultingValues(data=test1)\n\n# choosing some but not all properties will also work, as var2, var3, var5 will be set to their default values\ntest2 = {'var1': 24, 'var4': False}\ndata2 = DefaultingValues(data=test2)\n\n\nclass InvalidDefaultValues(SerializeMCR):\n    schema = [\n        {'name': 'var1', 'type': (int,), 'default': 0},\n        {'name': 'var2', 'type': (str,), 'optional': True, 'default': 1},\n        {'name': 'var3', 'type': (float,), 'optional': True, 'default': True},\n        {'name': 'var4', 'type': (bool,), 'optional': True, 'default': False},\n        {'name': 'var5', 'type': (int, (1, 3, 5)), 'default': 3}\n    ]\n    \n# var1 is not optional, therefore a default value cannot be set\n# var2 has a defined type of `str`, but a defaulted value of `int`\n# var3 has a defined type of `float`, but a defaulted value of `bool`\n# var4 is acceptable\n# var5 is not optional, therefore a default value cannot be set\n\n``` \n**Note: The schema's of a serialize-mcr are not validated until a dataset is passed into the Class, therefore improper schema definitions are acceptable, but will fail to build.**\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/millcityrunner/serialize-mcr",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "serialize-mcr",
    "package_url": "https://pypi.org/project/serialize-mcr/",
    "platform": null,
    "project_url": "https://pypi.org/project/serialize-mcr/",
    "project_urls": {
      "Homepage": "https://github.com/millcityrunner/serialize-mcr"
    },
    "release_url": "https://pypi.org/project/serialize-mcr/1.0.1/",
    "requires_dist": [
      "flask-sqlalchemy",
      "sqlalchemy"
    ],
    "requires_python": "",
    "summary": "Creating a serializer for data structures",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14731959,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c674524bbf19d6092dcba834067694b601e77ecde618f3bb9081f9e20a1ea0e6",
          "md5": "a4c5882fbf7e5ecaa0bdcd7fe55c185b",
          "sha256": "58b6de2c1906a4aebb3dca8d6f37e23f8ecb107dfb56443a23ba4ed8d2949ec1"
        },
        "downloads": -1,
        "filename": "serialize_mcr-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4c5882fbf7e5ecaa0bdcd7fe55c185b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14331,
        "upload_time": "2021-03-04T15:26:26",
        "upload_time_iso_8601": "2021-03-04T15:26:26.822018Z",
        "url": "https://files.pythonhosted.org/packages/c6/74/524bbf19d6092dcba834067694b601e77ecde618f3bb9081f9e20a1ea0e6/serialize_mcr-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4641015176db8e9db105c1b63812f3d5af34b4b6073bc06069bcf3ce3c2c4560",
          "md5": "4074af512c5c207a0c7404d075cf3026",
          "sha256": "8818717a7dd2f64c28b6cb4eb4493536e10c62c725f0ab720e5bb2637df3d78a"
        },
        "downloads": -1,
        "filename": "serialize-mcr-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4074af512c5c207a0c7404d075cf3026",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16643,
        "upload_time": "2021-03-04T15:26:33",
        "upload_time_iso_8601": "2021-03-04T15:26:33.926782Z",
        "url": "https://files.pythonhosted.org/packages/46/41/015176db8e9db105c1b63812f3d5af34b4b6073bc06069bcf3ce3c2c4560/serialize-mcr-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "533aeb0c570607c2a59bb1bbc7905b50631132a9ac52e738d3daa07364578d33",
          "md5": "91b038be67adc0ec90ed036e0f5c95a2",
          "sha256": "c48bd84d0eac9ad59eaa765f84129b7ea8c30a13b35cebd963201c7dd8ebfaee"
        },
        "downloads": -1,
        "filename": "serialize_mcr-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91b038be67adc0ec90ed036e0f5c95a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14332,
        "upload_time": "2021-03-04T15:41:09",
        "upload_time_iso_8601": "2021-03-04T15:41:09.174049Z",
        "url": "https://files.pythonhosted.org/packages/53/3a/eb0c570607c2a59bb1bbc7905b50631132a9ac52e738d3daa07364578d33/serialize_mcr-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5f04a3d39979593d9244a82854c2c48851cb9c4c77c5840f0ceb368a7df7d97",
          "md5": "62dca00a11b766ebfa025012630b7052",
          "sha256": "02904aa96cf409e7e64eb54633987551fe91eac6e05f6a0ad2945fbf1bcb3056"
        },
        "downloads": -1,
        "filename": "serialize-mcr-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "62dca00a11b766ebfa025012630b7052",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16626,
        "upload_time": "2021-03-04T15:41:10",
        "upload_time_iso_8601": "2021-03-04T15:41:10.507136Z",
        "url": "https://files.pythonhosted.org/packages/b5/f0/4a3d39979593d9244a82854c2c48851cb9c4c77c5840f0ceb368a7df7d97/serialize-mcr-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9f22bfccfd48e4ecd1ea15a39a18ec18a5965b46d85e29f5a470cb33fbab817",
          "md5": "acf709c163955b2d9f9400cc3be03461",
          "sha256": "e76fb130cb490e9104bfa82350b2f2e14017a036c31871a907163542c472d4a4"
        },
        "downloads": -1,
        "filename": "serialize-mcr-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "acf709c163955b2d9f9400cc3be03461",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16554,
        "upload_time": "2021-03-05T03:05:48",
        "upload_time_iso_8601": "2021-03-05T03:05:48.742440Z",
        "url": "https://files.pythonhosted.org/packages/c9/f2/2bfccfd48e4ecd1ea15a39a18ec18a5965b46d85e29f5a470cb33fbab817/serialize-mcr-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8c1af1fadddfb23691bb00257466a12d04e3e9ade1a450895700c1106e53d7f",
          "md5": "4966c20a94e102d7722dccfc1de8e488",
          "sha256": "e7c30ef32959180030eba605ca17d6cdca40f3c70a826bbce4a12c3b03370996"
        },
        "downloads": -1,
        "filename": "serialize-mcr-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4966c20a94e102d7722dccfc1de8e488",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16558,
        "upload_time": "2021-03-05T03:07:23",
        "upload_time_iso_8601": "2021-03-05T03:07:23.880816Z",
        "url": "https://files.pythonhosted.org/packages/d8/c1/af1fadddfb23691bb00257466a12d04e3e9ade1a450895700c1106e53d7f/serialize-mcr-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1798f0cc7dc2c1f5038284bb1a6c8286b30d1395e0f3d1adcc3f5ff8b1fbefc8",
          "md5": "e374f81df5abe393c220926acbed100c",
          "sha256": "1062da40da1838bd777fa0338b8b5049828f81103f84802acad6cadb29f556e3"
        },
        "downloads": -1,
        "filename": "serialize-mcr-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e374f81df5abe393c220926acbed100c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16578,
        "upload_time": "2021-03-05T11:57:43",
        "upload_time_iso_8601": "2021-03-05T11:57:43.662710Z",
        "url": "https://files.pythonhosted.org/packages/17/98/f0cc7dc2c1f5038284bb1a6c8286b30d1395e0f3d1adcc3f5ff8b1fbefc8/serialize-mcr-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf89186e6d07b068da75121f8ea824634e5aab7f7dfba8b3dec92cb0c43d1f8a",
          "md5": "0f22b667f931d6dd5f8ca28c5467de53",
          "sha256": "692fa164aefb0aa275adf89ff60cc6a7884e3488b065a9d5d73b724de117472c"
        },
        "downloads": -1,
        "filename": "serialize_mcr-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f22b667f931d6dd5f8ca28c5467de53",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14368,
        "upload_time": "2022-08-10T17:10:50",
        "upload_time_iso_8601": "2022-08-10T17:10:50.437772Z",
        "url": "https://files.pythonhosted.org/packages/bf/89/186e6d07b068da75121f8ea824634e5aab7f7dfba8b3dec92cb0c43d1f8a/serialize_mcr-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ef7899d7b125dc152b2552b5d872e4618a9d0e0da69d729217225808ef0d43a",
          "md5": "3aa1d0e40fd7be1235f3ea8b67b8aed5",
          "sha256": "1ecd99009ea28dd8bd2fa88825955ad7f5fbbbb2be2fa7bab8acf41aa40f5524"
        },
        "downloads": -1,
        "filename": "serialize-mcr-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3aa1d0e40fd7be1235f3ea8b67b8aed5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16518,
        "upload_time": "2022-08-10T17:10:52",
        "upload_time_iso_8601": "2022-08-10T17:10:52.098559Z",
        "url": "https://files.pythonhosted.org/packages/5e/f7/899d7b125dc152b2552b5d872e4618a9d0e0da69d729217225808ef0d43a/serialize-mcr-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37410b3fbb1266e5b04a8fe0c8238214c63f81d69274f675daaf0cfe4302d2c9",
          "md5": "ba8252f7dd440beced9b2bc63f0b4169",
          "sha256": "ccc63e4d10bf4205a746573238382d1b7bfa90bbac295633d4022c3bd2135367"
        },
        "downloads": -1,
        "filename": "serialize_mcr-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba8252f7dd440beced9b2bc63f0b4169",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14371,
        "upload_time": "2022-08-11T17:54:29",
        "upload_time_iso_8601": "2022-08-11T17:54:29.084745Z",
        "url": "https://files.pythonhosted.org/packages/37/41/0b3fbb1266e5b04a8fe0c8238214c63f81d69274f675daaf0cfe4302d2c9/serialize_mcr-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8e4b2de02984312b06d5f354a9cb3af018a63157d9e0be8c88dd986c29f2460",
          "md5": "8c55069b43f46130ee48700993972043",
          "sha256": "6501383000bad9845759c6be9fa1e8e51b6bee4854cee75d825d6413844067da"
        },
        "downloads": -1,
        "filename": "serialize-mcr-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8c55069b43f46130ee48700993972043",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16512,
        "upload_time": "2022-08-11T17:54:30",
        "upload_time_iso_8601": "2022-08-11T17:54:30.904022Z",
        "url": "https://files.pythonhosted.org/packages/d8/e4/b2de02984312b06d5f354a9cb3af018a63157d9e0be8c88dd986c29f2460/serialize-mcr-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37410b3fbb1266e5b04a8fe0c8238214c63f81d69274f675daaf0cfe4302d2c9",
        "md5": "ba8252f7dd440beced9b2bc63f0b4169",
        "sha256": "ccc63e4d10bf4205a746573238382d1b7bfa90bbac295633d4022c3bd2135367"
      },
      "downloads": -1,
      "filename": "serialize_mcr-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ba8252f7dd440beced9b2bc63f0b4169",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14371,
      "upload_time": "2022-08-11T17:54:29",
      "upload_time_iso_8601": "2022-08-11T17:54:29.084745Z",
      "url": "https://files.pythonhosted.org/packages/37/41/0b3fbb1266e5b04a8fe0c8238214c63f81d69274f675daaf0cfe4302d2c9/serialize_mcr-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8e4b2de02984312b06d5f354a9cb3af018a63157d9e0be8c88dd986c29f2460",
        "md5": "8c55069b43f46130ee48700993972043",
        "sha256": "6501383000bad9845759c6be9fa1e8e51b6bee4854cee75d825d6413844067da"
      },
      "downloads": -1,
      "filename": "serialize-mcr-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8c55069b43f46130ee48700993972043",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16512,
      "upload_time": "2022-08-11T17:54:30",
      "upload_time_iso_8601": "2022-08-11T17:54:30.904022Z",
      "url": "https://files.pythonhosted.org/packages/d8/e4/b2de02984312b06d5f354a9cb3af018a63157d9e0be8c88dd986c29f2460/serialize-mcr-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}