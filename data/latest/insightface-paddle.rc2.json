{
  "info": {
    "author": "Baidu",
    "author_email": "dazhiningsibuqu@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Natural Language :: Chinese (Simplified)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Utilities"
    ],
    "description": "[简体中文](README_ch.md) | English\n\n------------------------------------------------------------------------------------------\n\n<p align=\"left\">\n    <a href=\"./LICENSE\"><img src=\"https://img.shields.io/badge/license-Apache%202-dfd.svg\"></a>\n    <a href=\"https://github.com/littletomatodonkey/insight-face-paddle/releases\"><img src=\"https://img.shields.io/github/v/release/littletomatodonkey/insight-face-paddle?color=ffa\"></a>\n    <a href=\"\"><img src=\"https://img.shields.io/badge/python-3.7+-aff.svg\"></a>\n    <a href=\"\"><img src=\"https://img.shields.io/badge/os-linux%2C%20win%2C%20mac-pink.svg\"></a>\n    <a href=\"\"><img src=\"https://img.shields.io/pypi/format/insightface-paddle?color=c77\"></a>\n    <a href=\"https://github.com/littletomatodonkey/insight-face-paddle/graphs/contributors\"><img src=\"https://img.shields.io/github/contributors/littletomatodonkey/insight-face-paddle?color=9ea\"></a>\n    <a href=\"https://pypi.org/project/insightface-paddle/\"><img src=\"https://img.shields.io/pypi/dm/insightface-paddle?color=9cf\"></a>\n    <a href=\"https://github.com/littletomatodonkey/insight-face-paddle/stargazers\"><img src=\"https://img.shields.io/github/stars/littletomatodonkey/insight-face-paddle?color=ccf\"></a>\n</p>\n\n# InsightFace Paddle\n\n## 1. Introduction\n\n### 1.1 Overview\n\n`InsightFacePaddle` is an open source deep face detection and recognition toolkit, powered by PaddlePaddle. `InsightFacePaddle` provide three related pretrained models now, include `BlazeFace` for face detection, `ArcFace` and `MobileFace` for face recognition.\n\n\n- This tutorial is mainly about Whl package inference using `PaddleInfernence`.\n- For face recognition task, please refer to: [Face recognition tuturial](https://github.com/deepinsight/insightface/blob/master/recognition/arcface_paddle/README_en.md).\n- For face detection task, please refer to: [Face detection tuturial](https://github.com/deepinsight/insightface/blob/master/detection/blazeface_paddle/README_en.md).\n\n\n### 1.2 Benchmark\n\nFor face detection task, on WiderFace dataset, the following table shows mAP, speed and time cost for BlazeFace.\n\n| Model structure                  | Model size | WiderFace mAP   | CPU time cost | GPU time cost |\n| :-------------------------: | :-----: | :-----: | :--------: | :--------: |\n| BlazeFace-FPN-SSH-Paddle      | 0.65MB | 0.9187/0.8979/0.8168 | 31.7ms  |  5.6ms |\n| RetinaFace      | 1.68MB | -/-/0.825 | 182.0ms  | 17.4ms |\n\n\nFor face recognition task, on MSAM dataset, the following table shows precision, speed and time cost for MobileFaceNet.\n\n\n| Model structure           | lfw   | cfp_fp | agedb30  | CPU time cost | GPU time cost |\n| :-------------------------: | :-----: | :------: | :-------: | :-------: | :--------: |\n| MobileFaceNet-Paddle      | 0.9945 | 0.9343  | 0.9613 | 4.3ms | 2.3ms   |\n| MobileFaceNet-mxnet | 0.9950 | 0.8894  | 0.9591   |  7.3ms | 4.7ms   |\n\n\n**Benchmark environment:**\n* CPU: Intel(R) Xeon(R) Gold 6184 CPU @ 2.40GHz\n* GPU: a single NVIDIA Tesla V100\n\n\n**Note:** Performance of `RetinaFace` is tested using script [test.py](https://github.com/deepinsight/insightface/blob/master/detection/retinaface/test.py). The image shape is modified to `640x480` here. Performance of `MobileFaceNet-mxnet` is tested using script [verification.py](https://github.com/deepinsight/insightface/blob/master/recognition/arcface_mxnet/verification.py).\n\n\n### 1.3 Visualization\n\nOne example result predicted by `InsightFacePaddle` is as follow. Please refer to the [Demo](./demo/friends/output/) for more.\n\n<div align=\"center\">\n<img src=\"./demo/friends/output/friends3.jpg\"  width = \"800\" />\n</div>\n\n\n### 1.4 Community\n\nScan the QR code below with your QQ (QQ group number: `705899115`) to discuss more about deep learning together.\n\n<div align=\"center\">\n<img src=\"./qq_group.jpeg\"  width = \"300\" />\n</div>\n\n\n## 2. Installation\n1. Install PaddlePaddle\n\nPaddlePaddle 2.1 or later is required for `InsightFacePaddle`. You can use the following steps to install PaddlePaddle.\n\n```bash\n# for GPU\npip3 install paddlepaddle-gpu\n\n# for CPU\npip3 install paddlepaddle\n```\nFor more details about installation. please refer to [PaddlePaddle](https://www.paddlepaddle.org.cn/).\n\n2. Install requirements\n\n`InsightFacePaddle` dependencies are listed in `requirements.txt`, you can use the following command to install the dependencies.\n\n```bash\npip3 install --upgrade -r requirements.txt -i https://mirror.baidu.com/pypi/simple\n```\n\n3. Install `InsightFacePaddle`\n\n* [Recommanded] You can use `pip` to install the lastest version `InsightFacePaddle` from `pypi`.\n\n```bash\npip3 install --upgrade insightface-paddle\n```\n\n* You can also build whl package and install by following commands.\n\n```bash\ncd ./InsightFacePaddle\npython3 setup.py bdist_wheel\npip3 install dist/*\n```\n\n## 3. Quick Start\n\n`InsightFacePaddle` support two ways of use, including `Commad Line` and `Python API`.\n\n### 3.1 Command Line\n\nYou can use `InsightFacePaddle` in Command Line.\n\n#### 3.1.1 Get help\n\nYou can get the help about `InsightFacePaddle` by following command.\n\n```bash\ninsightfacepaddle -h\n```\n\nThe args are as follows:\n| args |  type | default | help |\n| ---- | ---- | ---- | ---- |\n| det_model | str | BlazeFace | The detection model. |\n| rec_model | str | MobileFace | The recognition model. |\n| use_gpu | bool | True | Whether use GPU to predict. Default by `True`. |\n| enable_mkldnn | bool | False | Whether use MKLDNN to predict, valid only when `--use_gpu` is `False`. Default by `False`. |\n| cpu_threads | int | 1 | The num of threads with CPU, valid only when `--use_gpu` is `False` and `--enable_mkldnn` is `True`. Default by `1`. |\n| input | str | - | The path of video to be predicted. Or the path or directory of image file(s) to be predicted. |\n| output | str | - | The directory to save prediction result. |\n| det | bool | False | Whether to detect. |\n| det_thresh | float | 0.8 | The threshold of detection postprocess. Default by `0.8`. |\n| rec | bool | False | Whether to recognize. |\n| index | str | - | The path of index file. |\n| cdd_num | int | 5 | The number of candidates in the recognition retrieval. Default by `5`. |\n| rec_thresh | float | 0.45 | The threshold of match in recognition, use to remove candidates with low similarity. Default by `0.45`. |\n| max_batch_size | int | 1 | The maxium of batch_size to recognize. Default by `1`. |\n| build_index | str | - | The path of index to be build. |\n| img_dir | str | - | The img(s) dir used to build index. |\n| label | str | - | The label file path used to build index. |\n\n\n#### 3.1.2 Build index\n\nIf use recognition, before start predicting, you have to build the index.\n\n```bash\ninsightfacepaddle --build_index ./demo/friends/index.bin --img_dir ./demo/friends/gallery --label ./demo/friends/gallery/label.txt\n```\n\nAn example used to build index is as follows:\n<div align=\"center\">\n<img src=\"./demo/friends/gallery/Rachel/Rachel00035.jpg\"  width = \"200\" />\n</div>\n\n#### 3.1.3 Predict\n\n1. Detection only\n\n* Image(s)\n\nUse the image below to predict:\n<div align=\"center\">\n<img src=\"./demo/friends/query/friends1.jpg\"  width = \"800\" />\n</div>\n\nThe prediction command:\n```bash\ninsightfacepaddle --det --input ./demo/friends/query/friends1.jpg --output ./output\n```\n\nThe result is under the directory `./output`:\n<div align=\"center\">\n<img src=\"./demo/friends/output/friends1.jpg\"  width = \"800\" />\n</div>\n\n* Video\n```bash\ninsightfacepaddle --det --input ./demo/friends/query/friends.mp4 --output ./output\n```\n\n2. Recognition only\n\n* Image(s)\n\nUse the image below to predict:\n<div align=\"center\">\n<img src=\"./demo/friends/query/Rachel.png\"  width = \"200\" />\n</div>\n\nThe prediction command:\n```bash\ninsightfacepaddle --rec --index ./demo/friends/index.bin --input ./demo/friends/query/Rachel.png\n```\n\nThe result is output in the terminal:\n```bash\nINFO:root:File: Rachel., predict label(s): ['Rachel']\n```\n\n3. Detection and recognition\n\n* Image(s)\n\nUse the image below to predict:\n<div align=\"center\">\n<img src=\"./demo/friends/query/friends2.jpg\"  width = \"800\" />\n</div>\n\nThe prediction command:\n```bash\ninsightfacepaddle --det --rec --index ./demo/friends/index.bin --input ./demo/friends/query/friends2.jpg --output ./output\n```\n\nThe result is under the directory `./output`:\n<div align=\"center\">\n<img src=\"./demo/friends/output/friends2.jpg\"  width = \"800\" />\n</div>\n\n* Video\n```bash\ninsightfacepaddle --det --rec --index ./demo/friends/index.bin --input ./demo/friends/query/friends.mp4 --output ./output\n```\n\n### 3.2 Python\n\nYou can use `InsightFacePaddle` in Python. First, import `InsightFacePaddle` and `logging` because `InsightFacePaddle` using that to control log.\n\n```python\nimport insightface_paddle as face\nimport logging\nlogging.basicConfig(level=logging.INFO)\n```\n\n#### 3.2.1 Get help\n\n```python\nparser = face.parser()\nhelp_info = parser.print_help()\nprint(help_info)\n```\n\n#### 3.2.2 Building index\n\n```python\nparser = face.parser()\nargs = parser.parse_args()\nargs.build_index = \"./demo/friends/index.bin\"\nargs.img_dir = \"./demo/friends/gallery\"\nargs.label = \"./demo/friends/gallery/label.txt\"\npredictor = face.InsightFace(args)\npredictor.build_index()\n```\n\n#### 3.2.3 Prediction\n\n1. Detection only\n\n* Image(s)\n```python\nparser = face.parser()\nargs = parser.parse_args()\n\nargs.det = True\nargs.output = \"./output\"\ninput_path = \"./demo/friends/query/friends1.jpg\"\n\npredictor = face.InsightFace(args)\nres = predictor.predict(input_path)\nprint(next(res))\n```\n\n* NumPy\n```python\nimport cv2\n\nparser = face.parser()\nargs = parser.parse_args()\n\nargs.det = True\nargs.output = \"./output\"\npath = \"./demo/friends/query/friends1.jpg\"\nimg = cv2.imread(path)[:, :, ::-1]\n\npredictor = face.InsightFace(args)\nres = predictor.predict(img)\nprint(next(res))\n```\n\nThe prediction result saved as `\"./output/tmp.png\"`.\n\n* Video\n```python\nparser = face.parser()\nargs = parser.parse_args()\n\nargs.det = True\nargs.output = \"./output\"\ninput_path = \"./demo/friends/query/friends.mp4\"\n\npredictor = face.InsightFace(args)\nres = predictor.predict(input_path)\nfor _ in res:\n    print(_)\n```\n\n2. Recognition only\n\n* Image(s)\n```python\nparser = face.parser()\nargs = parser.parse_args()\n\nargs.rec = True\nargs.index = \"./demo/friends/index.bin\"\ninput_path = \"./demo/friends/query/Rachel.png\"\n\npredictor = face.InsightFace(args)\nres = predictor.predict(input_path, print_info=True)\nnext(res)\n```\n\n* NumPy\n```python\nimport cv2\n\nparser = face.parser()\nargs = parser.parse_args()\n\nargs.rec = True\nargs.index = \"./demo/friends/index.bin\"\npath = \"./demo/friends/query/Rachel.png\"\nimg = cv2.imread(path)[:, :, ::-1]\n\npredictor = face.InsightFace(args)\nres = predictor.predict(img, print_info=True)\nnext(res)\n```\n\n3. Detection and recognition\n\n* Image(s)\n```python\nparser = face.parser()\nargs = parser.parse_args()\n\nargs.det = True\nargs.rec = True\nargs.index = \"./demo/friends/index.bin\"\nargs.output = \"./output\"\ninput_path = \"./demo/friends/query/friends2.jpg\"\n\npredictor = face.InsightFace(args)\nres = predictor.predict(input_path, print_info=True)\nnext(res)\n```\n\n* NumPy\n```python\nimport cv2\n\nparser = face.parser()\nargs = parser.parse_args()\n\nargs.det = True\nargs.rec = True\nargs.index = \"./demo/friends/index.bin\"\nargs.output = \"./output\"\npath = \"./demo/friends/query/friends2.jpg\"\nimg = cv2.imread(path)[:, :, ::-1]\n\npredictor = face.InsightFace(args)\nres = predictor.predict(img, print_info=True)\nnext(res)\n```\n\nThe prediction result saved as `\"./output/tmp.png\"`.\n\n* Video\n```python\nparser = face.parser()\nargs = parser.parse_args()\n\nargs.det = True\nargs.rec = True\nargs.index = \"./demo/friends/index.bin\"\nargs.output = \"./output\"\ninput_path = \"./demo/friends/query/friends.mp4\"\n\npredictor = face.InsightFace(args)\nres = predictor.predict(input_path, print_info=True)\nfor _ in res:\n    pass\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/littletomatodonkey/insight-face-paddle.git",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/littletomatodonkey/insight-face-paddle",
    "keywords": "insight face,Arcface,BlazeFace,MobileFace,face detection,face recognition,PaddlePaddle",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "insightface-paddle",
    "package_url": "https://pypi.org/project/insightface-paddle/",
    "platform": "",
    "project_url": "https://pypi.org/project/insightface-paddle/",
    "project_urls": {
      "Download": "https://github.com/littletomatodonkey/insight-face-paddle.git",
      "Homepage": "https://github.com/littletomatodonkey/insight-face-paddle"
    },
    "release_url": "https://pypi.org/project/insightface-paddle/2.0.0/",
    "requires_dist": [
      "requests",
      "prettytable",
      "tqdm",
      "Pillow",
      "scikit-learn (==0.23.2)",
      "opencv-python (==4.4.0.46)",
      "numpy"
    ],
    "requires_python": "",
    "summary": "A toolkit for face detection and recognition powered by PaddlePaddle.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12056502,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b17fb5cdc8d8660b56917626996db5f0bc201ed393d7af3e515ed1e07dc4b23a",
          "md5": "e5f3a3c038046205321fa3a29a908d00",
          "sha256": "2cff1401fff5cfef0949b204a38aa347f70ea31dbbf36c0a27509bb438eed77d"
        },
        "downloads": -1,
        "filename": "insightface_paddle-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5f3a3c038046205321fa3a29a908d00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7316689,
        "upload_time": "2021-07-07T10:27:11",
        "upload_time_iso_8601": "2021-07-07T10:27:11.501494Z",
        "url": "https://files.pythonhosted.org/packages/b1/7f/b5cdc8d8660b56917626996db5f0bc201ed393d7af3e515ed1e07dc4b23a/insightface_paddle-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35c85a5a68ea4f07e19563fa673f66a50223e24d92019f9282c90abfb1c9c7a5",
          "md5": "ce3b9485e327e3102ba88c91aeae0286",
          "sha256": "f51e2ab8acb93dbb71983d8e78d2ad8cec333ee76878b4f1db0c31017a8ff0b6"
        },
        "downloads": -1,
        "filename": "insightface_paddle-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce3b9485e327e3102ba88c91aeae0286",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7320413,
        "upload_time": "2021-11-18T07:13:34",
        "upload_time_iso_8601": "2021-11-18T07:13:34.064917Z",
        "url": "https://files.pythonhosted.org/packages/35/c8/5a5a68ea4f07e19563fa673f66a50223e24d92019f9282c90abfb1c9c7a5/insightface_paddle-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35c85a5a68ea4f07e19563fa673f66a50223e24d92019f9282c90abfb1c9c7a5",
        "md5": "ce3b9485e327e3102ba88c91aeae0286",
        "sha256": "f51e2ab8acb93dbb71983d8e78d2ad8cec333ee76878b4f1db0c31017a8ff0b6"
      },
      "downloads": -1,
      "filename": "insightface_paddle-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce3b9485e327e3102ba88c91aeae0286",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7320413,
      "upload_time": "2021-11-18T07:13:34",
      "upload_time_iso_8601": "2021-11-18T07:13:34.064917Z",
      "url": "https://files.pythonhosted.org/packages/35/c8/5a5a68ea4f07e19563fa673f66a50223e24d92019f9282c90abfb1c9c7a5/insightface_paddle-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}