{
  "info": {
    "author": "FARIS Lab",
    "author_email": "muhammadfarisadiprabowo1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "# nnGA Library - Neural Network Genetic Algorithm Library (v0.0.5)\n\nOff the shelf Genetic Algorithm library for deep learning problems\n\n## License\nOur code is released under the MIT license (refer to the [LICENSE](https://github.com/rssalessio/PoisoningDataDrivenControl/blob/master/LICENSE) file for details).\n\n## Requirements\nTo use the library you need atleast Python 3.6. Examples may require additional libraries.\n\nOther required dependencies:\n- NumPy\n- Neptune\n\n## Usage/Examples\nYou can import the library by typing ```pip install faris-lab-train-model```.\n\nTo learn how to use neptune, check the following examples:\n```python\nimport neptune.new as neptune\nfrom nnga import nnGA, GaussianInitializationStrategy, \\\n    GaussianMutationStrategy, BasicCrossoverStrategy, \\\n    PopulationParameters\n\ndef make_network(parameters=None):\n    ''' Function that creates a network given a set of parameters '''\n    neural_network = ...\n    return neural_network\n\n\ndef fitness(idx, parameters):\n    ''' Fitness function to evaluate a set of parameters '''\n    # Evaluate parameters\n    network = make_network(parameters)\n    return evaluate_network(network)\n\n\nif __name__ == '__main__':\n    # Initialize GA parameters\n    network = make_initial_network()\n    network_structure = [list(layer.shape) for layer in network]  # List of tuples, containing the shape of each layer\n    \n    # Population parameters\n    population = PopulationParameters(population_size=200)\n    \n    # Mutation strategy\n    mutation = GaussianMutationStrategy(network_structure, 1e-1)\n    \n    # Crossover strategy\n    crossover = BasicCrossoverStrategy(network_structure)\n    \n    # Initialization strategy\n    init = GaussianInitializationStrategy(\n        mean=0., std=1., network_structure=network_structure)\n\n    ga = nnGA(\n        epochs=50,  # Number of epochs\n        fitness_function=fitness,\n        population_parameters=population,\n        mutation_strategy=mutation,\n        initialization_strategy=init,\n        crossover_strategy=crossover,\n        num_processors=8)  # Number of cores\n\n    # Run GA with neptune\n    run = neptune.init(project=\"common/quickstarts\", \n                        api_token=\"ANONYMOUS\",\n                        ga)\n```\n\nIn general the code has the following structure\n```python\nfrom nnga import nnGA, GaussianInitializationStrategy, \\\n    GaussianMutationStrategy, BasicCrossoverStrategy, \\\n    PopulationParameters\n\ndef make_network(parameters=None):\n    ''' Function that creates a network given a set of parameters '''\n    neural_network = ...\n    return neural_network\n\n\ndef fitness(idx, parameters):\n    ''' Fitness function to evaluate a set of parameters '''\n    # Evaluate parameters\n    network = make_network(parameters)\n    return evaluate_network(network)\n\n\nif __name__ == '__main__':\n    # Initialize GA parameters\n    network = make_initial_network()\n    network_structure = [list(layer.shape) for layer in network]  # List of tuples, containing the shape of each layer\n    \n    # Population parameters\n    population = PopulationParameters(population_size=200)\n    \n    # Mutation strategy\n    mutation = GaussianMutationStrategy(network_structure, 1e-1)\n    \n    # Crossover strategy\n    crossover = BasicCrossoverStrategy(network_structure)\n    \n    # Initialization strategy\n    init = GaussianInitializationStrategy(\n        mean=0., std=1., network_structure=network_structure)\n\n    ga = nnGA(\n        epochs=50,  # Number of epochs\n        fitness_function=fitness,\n        population_parameters=population,\n        mutation_strategy=mutation,\n        initialization_strategy=init,\n        crossover_strategy=crossover,\n        num_processors=8)  # Number of cores\n\n    # Run GA\n    network_parameters, best_result, results = ga.run()\n\n```\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://farislab.com/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "faris-lab-train-model",
    "package_url": "https://pypi.org/project/faris-lab-train-model/",
    "platform": null,
    "project_url": "https://pypi.org/project/faris-lab-train-model/",
    "project_urls": {
      "Homepage": "https://farislab.com/"
    },
    "release_url": "https://pypi.org/project/faris-lab-train-model/0.0.10/",
    "requires_dist": [
      "numpy",
      "neptune-client"
    ],
    "requires_python": ">=3.6",
    "summary": "Neural Network Genetic Algorithm library used for deep learning problems",
    "version": "0.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13289473,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92b47c1994c9aaef1845a0df41c094ece6aa3dc9fa33284d0666a1b920c1772c",
          "md5": "061e41e3e8804ef9163d0ec34056c3cc",
          "sha256": "adf7630d8c1ee42d7c5cfd872a64436e85752b2cd39166222018677866cf0de7"
        },
        "downloads": -1,
        "filename": "faris_lab_train_model-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "061e41e3e8804ef9163d0ec34056c3cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10762,
        "upload_time": "2022-03-25T03:39:12",
        "upload_time_iso_8601": "2022-03-25T03:39:12.387687Z",
        "url": "https://files.pythonhosted.org/packages/92/b4/7c1994c9aaef1845a0df41c094ece6aa3dc9fa33284d0666a1b920c1772c/faris_lab_train_model-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb5dcbb16a46492821c1ebe881d7d15a8f14fea844179354efeaebe58b6bafe0",
          "md5": "e33844714f19cb5c70ca7ef5c2b955b8",
          "sha256": "139b12146a9c8d79da67f364e5cba9c10a5d816b6558f9ec22c6eb4405378482"
        },
        "downloads": -1,
        "filename": "faris-lab-train-model-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "e33844714f19cb5c70ca7ef5c2b955b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9441,
        "upload_time": "2022-03-25T03:39:14",
        "upload_time_iso_8601": "2022-03-25T03:39:14.955846Z",
        "url": "https://files.pythonhosted.org/packages/cb/5d/cbb16a46492821c1ebe881d7d15a8f14fea844179354efeaebe58b6bafe0/faris-lab-train-model-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92b47c1994c9aaef1845a0df41c094ece6aa3dc9fa33284d0666a1b920c1772c",
        "md5": "061e41e3e8804ef9163d0ec34056c3cc",
        "sha256": "adf7630d8c1ee42d7c5cfd872a64436e85752b2cd39166222018677866cf0de7"
      },
      "downloads": -1,
      "filename": "faris_lab_train_model-0.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "061e41e3e8804ef9163d0ec34056c3cc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10762,
      "upload_time": "2022-03-25T03:39:12",
      "upload_time_iso_8601": "2022-03-25T03:39:12.387687Z",
      "url": "https://files.pythonhosted.org/packages/92/b4/7c1994c9aaef1845a0df41c094ece6aa3dc9fa33284d0666a1b920c1772c/faris_lab_train_model-0.0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb5dcbb16a46492821c1ebe881d7d15a8f14fea844179354efeaebe58b6bafe0",
        "md5": "e33844714f19cb5c70ca7ef5c2b955b8",
        "sha256": "139b12146a9c8d79da67f364e5cba9c10a5d816b6558f9ec22c6eb4405378482"
      },
      "downloads": -1,
      "filename": "faris-lab-train-model-0.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "e33844714f19cb5c70ca7ef5c2b955b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9441,
      "upload_time": "2022-03-25T03:39:14",
      "upload_time_iso_8601": "2022-03-25T03:39:14.955846Z",
      "url": "https://files.pythonhosted.org/packages/cb/5d/cbb16a46492821c1ebe881d7d15a8f14fea844179354efeaebe58b6bafe0/faris-lab-train-model-0.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}